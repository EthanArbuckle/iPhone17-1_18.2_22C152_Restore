void *sub_10009120C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t i;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;

  v1 = v0;
  sub_10002572C(&qword_10021C5D0);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)();
  v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  v10 = 1 << *(unsigned char *)(v2 + 32);
  v11 = *(void *)(v2 + 56);
  v12 = -1;
  if (v10 < 64) {
    v12 = ~(-1 << v10);
  }
  v13 = v12 & v11;
  v14 = (unint64_t)(v10 + 63) >> 6;
  if ((v12 & v11) == 0) {
    goto LABEL_12;
  }
LABEL_11:
  v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (i = v15 | (v9 << 6); ; i = __clz(__rbit64(v18)) + (v9 << 6))
  {
    v20 = (void *)(*(void *)(v2 + 48) + 16 * i);
    v21 = v20[1];
    v22 = (void *)(*(void *)(v4 + 48) + 16 * i);
    *v22 = *v20;
    v22[1] = v21;
    result = (void *)swift_bridgeObjectRetain();
    if (v13) {
      goto LABEL_11;
    }
LABEL_12:
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v14) {
      goto LABEL_28;
    }
    v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v14) {
        goto LABEL_28;
      }
      v18 = *(void *)(v6 + 8 * v9);
      if (!v18)
      {
        v9 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_28;
        }
        v18 = *(void *)(v6 + 8 * v9);
        if (!v18) {
          break;
        }
      }
    }
LABEL_25:
    v13 = (v18 - 1) & v18;
  }
  v19 = v17 + 3;
  if (v19 >= v14) {
    goto LABEL_28;
  }
  v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v14) {
      goto LABEL_28;
    }
    v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void sub_1000913C0()
{
  sub_10000DFE0();
  v2 = v1;
  v3 = v0;
  uint64_t v5 = v4(0);
  sub_100020C48();
  uint64_t v7 = v6;
  __chkstk_darwin(v8);
  v10 = (char *)&v28 - v9;
  sub_10002572C(v2);
  uint64_t v11 = *v0;
  uint64_t v12 = static _SetStorage.copy(original:)();
  uint64_t v13 = v12;
  if (!*(void *)(v11 + 16))
  {
    swift_release();
LABEL_30:
    uint64_t *v3 = v13;
    sub_10000DFB8();
    return;
  }
  v14 = (void *)(v12 + 56);
  unint64_t v15 = (unint64_t)((1 << *(unsigned char *)(v13 + 32)) + 63) >> 6;
  v29 = v3;
  v30 = (const void *)(v11 + 56);
  if (v13 != v11 || (unint64_t)v14 >= v11 + 56 + 8 * v15) {
    memmove(v14, v30, 8 * v15);
  }
  int64_t v17 = 0;
  *(void *)(v13 + 16) = *(void *)(v11 + 16);
  uint64_t v18 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v19 = *(void *)(v11 + 56);
  uint64_t v20 = -1;
  if (v18 < 64) {
    uint64_t v20 = ~(-1 << v18);
  }
  unint64_t v21 = v20 & v19;
  int64_t v31 = (unint64_t)(v18 + 63) >> 6;
  if ((v20 & v19) == 0) {
    goto LABEL_12;
  }
LABEL_11:
  unint64_t v22 = __clz(__rbit64(v21));
  v21 &= v21 - 1;
  for (unint64_t i = v22 | (v17 << 6); ; unint64_t i = __clz(__rbit64(v25)) + (v17 << 6))
  {
    unint64_t v27 = *(void *)(v7 + 72) * i;
    (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v10, *(void *)(v11 + 48) + v27, v5);
    (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(*(void *)(v13 + 48) + v27, v10, v5);
    if (v21) {
      goto LABEL_11;
    }
LABEL_12:
    int64_t v24 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v24 >= v31) {
      goto LABEL_28;
    }
    unint64_t v25 = *((void *)v30 + v24);
    ++v17;
    if (!v25)
    {
      int64_t v17 = v24 + 1;
      if (v24 + 1 >= v31) {
        goto LABEL_28;
      }
      unint64_t v25 = *((void *)v30 + v17);
      if (!v25)
      {
        int64_t v17 = v24 + 2;
        if (v24 + 2 >= v31) {
          goto LABEL_28;
        }
        unint64_t v25 = *((void *)v30 + v17);
        if (!v25) {
          break;
        }
      }
    }
LABEL_25:
    unint64_t v21 = (v25 - 1) & v25;
  }
  int64_t v26 = v24 + 3;
  if (v26 >= v31)
  {
LABEL_28:
    swift_release();
    v3 = v29;
    goto LABEL_30;
  }
  unint64_t v25 = *((void *)v30 + v26);
  if (v25)
  {
    int64_t v17 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v17 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v17 >= v31) {
      goto LABEL_28;
    }
    unint64_t v25 = *((void *)v30 + v17);
    ++v26;
    if (v25) {
      goto LABEL_25;
    }
  }
LABEL_32:
  __break(1u);
}

uint64_t sub_10009163C()
{
  v1 = v0;
  uint64_t v2 = type metadata accessor for Trialpb_TrialExperiment();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  sub_10002572C(&qword_10021C600);
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_34:
    uint64_t *v1 = v8;
    return result;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v10 = *(void *)(v6 + 56);
  v34 = v0;
  uint64_t v35 = v6 + 56;
  if (v9 < 64) {
    uint64_t v11 = ~(-1 << v9);
  }
  else {
    uint64_t v11 = -1;
  }
  unint64_t v12 = v11 & v10;
  int64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v37 = v3 + 16;
  uint64_t v13 = v7 + 56;
  uint64_t v38 = v3;
  v14 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  int64_t v16 = 0;
  if (!v12) {
    goto LABEL_7;
  }
LABEL_6:
  unint64_t v17 = __clz(__rbit64(v12));
  v12 &= v12 - 1;
  for (unint64_t i = v17 | (v16 << 6); ; unint64_t i = __clz(__rbit64(v20)) + (v16 << 6))
  {
    uint64_t v22 = v6;
    uint64_t v23 = *(void *)(v6 + 48);
    uint64_t v24 = *(void *)(v38 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v5, v23 + v24 * i, v2);
    sub_100032DB4(&qword_10021C5F0, (void (*)(uint64_t))&type metadata accessor for Trialpb_TrialExperiment);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v25 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v26 = result & ~v25;
    unint64_t v27 = v26 >> 6;
    if (((-1 << v26) & ~*(void *)(v13 + 8 * (v26 >> 6))) == 0)
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v25) >> 6;
      while (++v27 != v30 || (v29 & 1) == 0)
      {
        BOOL v31 = v27 == v30;
        if (v27 == v30) {
          unint64_t v27 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v13 + 8 * v27);
        if (v32 != -1)
        {
          unint64_t v28 = __clz(__rbit64(~v32)) + (v27 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    unint64_t v28 = __clz(__rbit64((-1 << v26) & ~*(void *)(v13 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(void *)(v13 + ((v28 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v28;
    uint64_t result = (*v14)(*(void *)(v8 + 48) + v28 * v24, v5, v2);
    ++*(void *)(v8 + 16);
    uint64_t v6 = v22;
    if (v12) {
      goto LABEL_6;
    }
LABEL_7:
    int64_t v19 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      goto LABEL_36;
    }
    if (v19 >= v36) {
      goto LABEL_32;
    }
    unint64_t v20 = *(void *)(v35 + 8 * v19);
    ++v16;
    if (!v20)
    {
      int64_t v16 = v19 + 1;
      if (v19 + 1 >= v36) {
        goto LABEL_32;
      }
      unint64_t v20 = *(void *)(v35 + 8 * v16);
      if (!v20)
      {
        int64_t v16 = v19 + 2;
        if (v19 + 2 >= v36) {
          goto LABEL_32;
        }
        unint64_t v20 = *(void *)(v35 + 8 * v16);
        if (!v20) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v12 = (v20 - 1) & v20;
  }
  int64_t v21 = v19 + 3;
  if (v21 >= v36)
  {
LABEL_32:
    uint64_t result = swift_release_n();
    v1 = v34;
    goto LABEL_34;
  }
  unint64_t v20 = *(void *)(v35 + 8 * v21);
  if (v20)
  {
    int64_t v16 = v21;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v16 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v16 >= v36) {
      goto LABEL_32;
    }
    unint64_t v20 = *(void *)(v35 + 8 * v16);
    ++v21;
    if (v20) {
      goto LABEL_20;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1000919E8()
{
  v1 = v0;
  uint64_t v2 = *v0;
  sub_10002572C(&qword_10021C5D0);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_34:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  if (!v8) {
    goto LABEL_7;
  }
LABEL_6:
  unint64_t v12 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (unint64_t i = v12 | (v11 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v11 << 6))
  {
    unint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * i);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v9 + 8 * (v21 >> 6))) == 0)
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v20) >> 6;
      while (++v22 != v25 || (v24 & 1) == 0)
      {
        BOOL v26 = v22 == v25;
        if (v22 == v25) {
          unint64_t v22 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v9 + 8 * v22);
        if (v27 != -1)
        {
          unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    unint64_t v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v9 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(void *)(v9 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    unint64_t v28 = (void *)(*(void *)(v4 + 48) + 16 * v23);
    *unint64_t v28 = v18;
    v28[1] = v19;
    ++*(void *)(v4 + 16);
    if (v8) {
      goto LABEL_6;
    }
LABEL_7:
    int64_t v14 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      goto LABEL_36;
    }
    if (v14 >= v29) {
      goto LABEL_32;
    }
    unint64_t v15 = *(void *)(v6 + 8 * v14);
    ++v11;
    if (!v15)
    {
      int64_t v11 = v14 + 1;
      if (v14 + 1 >= v29) {
        goto LABEL_32;
      }
      unint64_t v15 = *(void *)(v6 + 8 * v11);
      if (!v15)
      {
        int64_t v11 = v14 + 2;
        if (v14 + 2 >= v29) {
          goto LABEL_32;
        }
        unint64_t v15 = *(void *)(v6 + 8 * v11);
        if (!v15) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v8 = (v15 - 1) & v15;
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v29)
  {
LABEL_32:
    uint64_t result = swift_release_n();
    v1 = v0;
    goto LABEL_34;
  }
  unint64_t v15 = *(void *)(v6 + 8 * v16);
  if (v15)
  {
    int64_t v11 = v16;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v11 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_32;
    }
    unint64_t v15 = *(void *)(v6 + 8 * v11);
    ++v16;
    if (v15) {
      goto LABEL_20;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100091C94()
{
  v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  sub_10002572C(&qword_10021C5E8);
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_34:
    uint64_t *v1 = v8;
    return result;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v10 = *(void *)(v6 + 56);
  v34 = v0;
  uint64_t v35 = v6 + 56;
  if (v9 < 64) {
    uint64_t v11 = ~(-1 << v9);
  }
  else {
    uint64_t v11 = -1;
  }
  unint64_t v12 = v11 & v10;
  int64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v37 = v3 + 16;
  uint64_t v13 = v7 + 56;
  uint64_t v38 = v3;
  int64_t v14 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  int64_t v16 = 0;
  if (!v12) {
    goto LABEL_7;
  }
LABEL_6:
  unint64_t v17 = __clz(__rbit64(v12));
  v12 &= v12 - 1;
  for (unint64_t i = v17 | (v16 << 6); ; unint64_t i = __clz(__rbit64(v20)) + (v16 << 6))
  {
    uint64_t v22 = v6;
    uint64_t v23 = *(void *)(v6 + 48);
    uint64_t v24 = *(void *)(v38 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v5, v23 + v24 * i, v2);
    sub_100032DB4(&qword_1002197C0, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v25 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v26 = result & ~v25;
    unint64_t v27 = v26 >> 6;
    if (((-1 << v26) & ~*(void *)(v13 + 8 * (v26 >> 6))) == 0)
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v25) >> 6;
      while (++v27 != v30 || (v29 & 1) == 0)
      {
        BOOL v31 = v27 == v30;
        if (v27 == v30) {
          unint64_t v27 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v13 + 8 * v27);
        if (v32 != -1)
        {
          unint64_t v28 = __clz(__rbit64(~v32)) + (v27 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    unint64_t v28 = __clz(__rbit64((-1 << v26) & ~*(void *)(v13 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(void *)(v13 + ((v28 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v28;
    uint64_t result = (*v14)(*(void *)(v8 + 48) + v28 * v24, v5, v2);
    ++*(void *)(v8 + 16);
    uint64_t v6 = v22;
    if (v12) {
      goto LABEL_6;
    }
LABEL_7:
    int64_t v19 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      goto LABEL_36;
    }
    if (v19 >= v36) {
      goto LABEL_32;
    }
    unint64_t v20 = *(void *)(v35 + 8 * v19);
    ++v16;
    if (!v20)
    {
      int64_t v16 = v19 + 1;
      if (v19 + 1 >= v36) {
        goto LABEL_32;
      }
      unint64_t v20 = *(void *)(v35 + 8 * v16);
      if (!v20)
      {
        int64_t v16 = v19 + 2;
        if (v19 + 2 >= v36) {
          goto LABEL_32;
        }
        unint64_t v20 = *(void *)(v35 + 8 * v16);
        if (!v20) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v12 = (v20 - 1) & v20;
  }
  int64_t v21 = v19 + 3;
  if (v21 >= v36)
  {
LABEL_32:
    uint64_t result = swift_release_n();
    v1 = v34;
    goto LABEL_34;
  }
  unint64_t v20 = *(void *)(v35 + 8 * v21);
  if (v20)
  {
    int64_t v16 = v21;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v16 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v16 >= v36) {
      goto LABEL_32;
    }
    unint64_t v20 = *(void *)(v35 + 8 * v16);
    ++v21;
    if (v20) {
      goto LABEL_20;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100092040(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result < 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v6 = *v4;
  uint64_t v7 = *(void *)(*v4 + 16);
  if (v7 < a2)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v8 = result;
  uint64_t v9 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v10 = 1 - v9;
  if (__OFSUB__(1, v9))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v11 = v7 + v10;
  if (__OFADD__(v7, v10))
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v11 > *(void *)(v6 + 24) >> 1)
  {
    if (v7 <= v11) {
      uint64_t v15 = v7 + v10;
    }
    else {
      uint64_t v15 = v7;
    }
    sub_10002114C(isUniquelyReferenced_nonNull_native, v15, 1, v6);
    uint64_t v6 = v16;
  }
  uint64_t v17 = v6 + 32 + 16 * v8;
  uint64_t result = swift_arrayDestroy();
  if (!v10) {
    goto LABEL_16;
  }
  uint64_t v18 = *(void *)(v6 + 16);
  if (__OFSUB__(v18, a2)) {
    goto LABEL_22;
  }
  uint64_t result = (uint64_t)sub_100021610((char *)(v6 + 32 + 16 * a2), v18 - a2, (char *)(v17 + 16));
  uint64_t v19 = *(void *)(v6 + 16);
  BOOL v20 = __OFADD__(v19, v10);
  uint64_t v21 = v19 + v10;
  if (!v20)
  {
    *(void *)(v6 + 16) = v21;
LABEL_16:
    *(void *)uint64_t v17 = a3;
    *(void *)(v17 + 8) = a4;
    *uint64_t v4 = v6;
    return result;
  }
LABEL_23:
  __break(1u);
  return result;
}

uint64_t sub_100092158(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_18:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v9 = *(void *)(v5 + 48);
  uint64_t v10 = (void *)(v9 + 16 * v8);
  BOOL v11 = *v10 == a1 && v10[1] == a2;
  if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    uint64_t v15 = ~v7;
    do
    {
      unint64_t v8 = (v8 + 1) & v15;
      if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
        goto LABEL_18;
      }
      uint64_t v16 = (void *)(v9 + 16 * v8);
      BOOL v17 = *v16 == a1 && v16[1] == a2;
    }
    while (!v17 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
  }
  swift_bridgeObjectRelease();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v13 = *v2;
  uint64_t v19 = *v2;
  uint64_t *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10009120C();
    uint64_t v13 = v19;
  }
  uint64_t v14 = *(void *)(*(void *)(v13 + 48) + 16 * v8);
  sub_100092588(v8);
  uint64_t *v2 = v19;
  swift_bridgeObjectRelease();
  return v14;
}

void sub_1000922E8()
{
  sub_10000DFE0();
  uint64_t v3 = v2;
  uint64_t v4 = type metadata accessor for UUID();
  sub_100020C48();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  sub_100017CD4();
  uint64_t v8 = *v0;
  sub_100032DB4(&qword_1002197C0, (void (*)(uint64_t))&type metadata accessor for UUID);
  swift_bridgeObjectRetain();
  uint64_t v9 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v10 = -1 << *(unsigned char *)(v8 + 32);
  unint64_t v11 = v9 & ~v10;
  uint64_t v25 = v8 + 56;
  if ((*(void *)(v8 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11))
  {
    uint64_t v22 = v0;
    uint64_t v23 = v3;
    uint64_t v24 = ~v10;
    unint64_t v12 = *(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 16);
    uint64_t v13 = *(void *)(v6 + 72);
    while (1)
    {
      uint64_t v14 = v8;
      uint64_t v15 = *(void *)(v8 + 48);
      unint64_t v16 = v13 * v11;
      v12(v1, v15 + v13 * v11, v4);
      sub_100032DB4(&qword_10021C5E0, (void (*)(uint64_t))&type metadata accessor for UUID);
      char v17 = sub_100092FC0();
      sub_100016614();
      v18();
      if (v17) {
        break;
      }
      unint64_t v11 = (v11 + 1) & v24;
      uint64_t v8 = v14;
      if (((*(void *)(v25 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v19 = 1;
        uint64_t v3 = v23;
        goto LABEL_10;
      }
    }
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v21 = *v22;
    uint64_t v26 = *v22;
    *uint64_t v22 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_1000913C0();
      uint64_t v21 = v26;
    }
    uint64_t v3 = v23;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 32))(v23, *(void *)(v21 + 48) + v16, v4);
    sub_100092744(v11);
    *uint64_t v22 = v26;
    swift_bridgeObjectRelease();
    uint64_t v19 = 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v19 = 1;
  }
LABEL_10:
  sub_10002538C(v3, v19, 1, v4);
  sub_10000DFB8();
}

unint64_t sub_100092588(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v10 = Hasher._finalize()();
        swift_bridgeObjectRelease();
        Swift::Int v11 = v10 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v11 >= v9 && v2 >= v11)
          {
LABEL_15:
            uint64_t v14 = *(void *)(v3 + 48);
            uint64_t v15 = (_OWORD *)(v14 + 16 * v2);
            unint64_t v16 = (_OWORD *)(v14 + 16 * v6);
            BOOL v17 = v2 != v6 || v15 >= v16 + 1;
            int64_t v2 = v6;
            if (v17)
            {
              *uint64_t v15 = *v16;
              int64_t v2 = v6;
            }
          }
        }
        else if (v11 >= v9 || v2 >= v11)
        {
          goto LABEL_15;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v18 = *(void *)(v3 + 16);
  BOOL v19 = __OFSUB__(v18, 1);
  uint64_t v20 = v18 - 1;
  if (v19)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v20;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t sub_100092744(int64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t result = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v1;
  uint64_t v9 = *v1 + 56;
  uint64_t v10 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v11 = (a1 + 1) & ~v10;
  if (((1 << v11) & *(void *)(v9 + 8 * (v11 >> 6))) != 0)
  {
    v34 = v1;
    uint64_t v12 = ~v10;
    swift_retain();
    uint64_t v13 = _HashTable.previousHole(before:)();
    if ((*(void *)(v9 + 8 * (v11 >> 6)) & (1 << v11)) != 0)
    {
      unint64_t v36 = (v13 + 1) & v12;
      uint64_t v15 = *(void (**)(char *, unint64_t, uint64_t))(v4 + 16);
      uint64_t v14 = v4 + 16;
      uint64_t v35 = v15;
      uint64_t v16 = *(void *)(v14 + 56);
      uint64_t v37 = v14;
      uint64_t v38 = v16;
      BOOL v17 = (void (**)(char *, uint64_t))(v14 - 8);
      do
      {
        uint64_t v18 = v9;
        int64_t v19 = v38 * v11;
        v35(v7, *(void *)(v8 + 48) + v38 * v11, v3);
        sub_100032DB4(&qword_1002197C0, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v20 = dispatch thunk of Hashable._rawHashValue(seed:)();
        (*v17)(v7, v3);
        unint64_t v21 = v20 & v12;
        if (a1 >= (uint64_t)v36)
        {
          if (v21 < v36 || a1 < (uint64_t)v21)
          {
LABEL_20:
            uint64_t v9 = v18;
            goto LABEL_24;
          }
        }
        else if (v21 < v36 && a1 < (uint64_t)v21)
        {
          goto LABEL_20;
        }
        uint64_t v23 = *(void *)(v8 + 48);
        int64_t v24 = v38 * a1;
        unint64_t v25 = v23 + v38 * a1;
        unint64_t v26 = v23 + v19 + v38;
        BOOL v27 = v38 * a1 < v19 || v25 >= v26;
        uint64_t v9 = v18;
        if (v27)
        {
          swift_arrayInitWithTakeFrontToBack();
LABEL_23:
          a1 = v11;
          goto LABEL_24;
        }
        a1 = v11;
        if (v24 != v19)
        {
          swift_arrayInitWithTakeBackToFront();
          goto LABEL_23;
        }
LABEL_24:
        unint64_t v11 = (v11 + 1) & v12;
      }
      while (((*(void *)(v9 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
    }
    *(void *)(v9 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
    uint64_t result = swift_release();
    uint64_t v1 = v34;
  }
  else
  {
    *(void *)(v9 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
  }
  uint64_t v29 = *v1;
  uint64_t v30 = *(void *)(*v1 + 16);
  BOOL v31 = __OFSUB__(v30, 1);
  uint64_t v32 = v30 - 1;
  if (v31)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v29 + 16) = v32;
    ++*(_DWORD *)(v29 + 36);
  }
  return result;
}

uint64_t sub_100092A34(void *a1)
{
  id v1 = [a1 replayHeaderItems];
  if (!v1) {
    return 0;
  }
  int64_t v2 = v1;
  uint64_t v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_100092A98(void *a1)
{
  id v1 = [a1 localContextualSuggestions];
  if (!v1) {
    return 0;
  }
  int64_t v2 = v1;
  sub_100023FA0(0, (unint64_t *)&qword_10021DD50);
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_100092B08(void *a1)
{
  id v2 = [a1 duplicateSuggestions];

  if (!v2) {
    return 0;
  }
  sub_100023FA0(0, (unint64_t *)&qword_10021DD50);
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_100092B80(void *a1)
{
  id v1 = [a1 skuUploadWhitelist];
  if (!v1) {
    return 0;
  }
  id v2 = v1;
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_100092BD8(void *a1, SEL *a2)
{
  id v2 = [a1 *a2];
  if (!v2) {
    return 0;
  }
  uint64_t v3 = v2;
  sub_100023FA0(0, &qword_10021B9B0);
  uint64_t v4 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  return v4;
}

uint64_t sub_100092C54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10008ED64(a1, a2, a3, *(void *)(v3 + 16));
}

unint64_t sub_100092C5C()
{
  unint64_t result = qword_10021C5D8;
  if (!qword_10021C5D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10021C5D8);
  }
  return result;
}

uint64_t sub_100092CA8(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1000371D4(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100092CEC()
{
  unint64_t result = qword_10021C608;
  if (!qword_10021C608)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10021C608);
  }
  return result;
}

unint64_t sub_100092D2C()
{
  unint64_t result = qword_10021C618;
  if (!qword_10021C618)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10021C618);
  }
  return result;
}

unint64_t sub_100092D78()
{
  unint64_t result = qword_10021C628;
  if (!qword_10021C628)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10021C628);
  }
  return result;
}

uint64_t sub_100092DC4()
{
  sub_100021398();
  sub_10002572C(v2);
  sub_10001DCF8();
  (*(void (**)(uint64_t, uint64_t))(v3 + 16))(v0, v1);
  return v0;
}

unsigned char *storeEnumTagSinglePayload for PARNetworkRequestFactory.NetworkRequestError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100092EE8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PARNetworkRequestFactory.NetworkRequestError()
{
  return &type metadata for PARNetworkRequestFactory.NetworkRequestError;
}

unint64_t sub_100092F24()
{
  unint64_t result = qword_10021C658;
  if (!qword_10021C658)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10021C658);
  }
  return result;
}

uint64_t sub_100092F70()
{
  return v0;
}

void sub_100092FA4(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 192) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_100092FC0()
{
  return dispatch thunk of static Equatable.== infix(_:_:)();
}

void sub_100092FDC()
{
  uint64_t v2 = *(void *)(v0 + 16) + 1;
  sub_10002114C(0, v2, 1, v0);
}

uint64_t sub_100093010()
{
  return v0;
}

uint64_t sub_100093030()
{
  return v0;
}

uint64_t sub_100093040()
{
  return v0;
}

uint64_t sub_10009304C()
{
  return v0;
}

uint64_t sub_100093070()
{
  return v0;
}

uint64_t sub_100093080()
{
  return v0;
}

BOOL sub_100093098@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t sub_1000930A4()
{
  return sub_10002464C();
}

uint64_t sub_1000930BC()
{
  return v0;
}

uint64_t sub_1000930D0()
{
  return v0;
}

uint64_t sub_1000930DC()
{
  return v0;
}

uint64_t sub_1000930E8()
{
  return v0;
}

uint64_t sub_1000930F4()
{
  return v0;
}

uint64_t sub_100093154()
{
  return BidirectionalCollection<>.joined(separator:)();
}

uint64_t sub_100093174@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (qword_100218BE8 != -1) {
    swift_once();
  }
  swift_retain();
  swift_bridgeObjectRetain();
  AvroArray.init(schema:)();
  uint64_t v33 = v7;
  uint64_t v34 = v8;
  uint64_t v35 = v9;
  uint64_t v36 = v10;
  uint64_t v11 = swift_bridgeObjectRetain();
  sub_10011A690(v11, v12, v13, v14, v15, v16, v17, v18, v32.schema.type._countAndFlagsBits, (uint64_t)v32.schema.type._object, v32.schema.name._countAndFlagsBits, (uint64_t)v32.schema.name._object, v32.schema.namespace.value._countAndFlagsBits, (uint64_t)v32.schema.namespace.value._object, (uint64_t)v32.schema.fields._rawValue, (uint64_t)v32.fields._rawValue, v33, v34, v35,
    v36,
    v37[0],
    v37[1],
    v37[2],
    v37[3],
    v37[4],
    v37[5]);
  uint64_t v20 = v19;
  swift_bridgeObjectRelease();
  v32.schema.type._uint64_t countAndFlagsBits = v20;
  swift_retain();
  sub_100093EF4(&v32.schema.type._countAndFlagsBits);
  if (v3)
  {
    uint64_t result = swift_release();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t countAndFlagsBits = v32.schema.type._countAndFlagsBits;
    uint64_t v22 = *(void *)(v32.schema.type._countAndFlagsBits + 16);
    if (v22)
    {
      uint64_t v40 = a1;
      uint64_t v23 = a3;
      uint64_t v24 = *(void *)(type metadata accessor for Trialpb_TrialExperiment() - 8);
      unint64_t v25 = countAndFlagsBits
          + ((*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80));
      uint64_t v26 = *(void *)(v24 + 72);
      swift_retain();
      do
      {
        sub_100093BE0();
        v25 += v26;
        --v22;
      }
      while (v22);
      swift_release_n();
      a3 = v23;
      a1 = v40;
    }
    else
    {
      swift_release();
    }
    if (qword_100218BE0 != -1) {
      swift_once();
    }
    SwiftAvro::AvroRecordSchema schema = *(SwiftAvro::AvroRecordSchema *)byte_10021C660;
    sub_100093F9C((uint64_t)&schema);
    AvroRecord.init(schema:)(&v32, &schema);
    static AvroValue.string(_:)(a1, a2, (uint64_t)v37);
    swift_bridgeObjectRelease();
    AvroRecord.set(_:forField:)(v37, 0x6553686372616573, 0xEF64496E6F697373);
    sub_100093A1C((uint64_t)v37);
    static AvroValue.array(_:)(v33, v34, v35, v36, (uint64_t)v38);
    AvroRecord.set(_:forField:)(v38, 0xD000000000000011, 0x80000001001B5BA0);
    sub_100093A1C((uint64_t)v38);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = swift_release();
    uint64_t v28 = v32.schema.name._countAndFlagsBits;
    object = v32.schema.name._object;
    Swift::String_optional v31 = v32.schema.namespace;
    long long v30 = *(_OWORD *)&v32.schema.fields._rawValue;
    *(Swift::String *)a3 = v32.schema.type;
    *(void *)(a3 + 16) = v28;
    *(void *)(a3 + 24) = object;
    *(Swift::String_optional *)(a3 + 32) = v31;
    *(_OWORD *)(a3 + 48) = v30;
  }
  return result;
}

uint64_t sub_10009355C()
{
  if (qword_100218BF8 != -1) {
    swift_once();
  }
  ByteBuffer.writeBytes(_:)((Swift::OpaquePointer)qword_10021C6E8);
  if (qword_100218C00 != -1) {
    swift_once();
  }
  ByteBuffer.writeBytes(_:)((Swift::OpaquePointer)qword_10021C6F0);
  long long v1 = v0[1];
  v5[0] = *v0;
  v5[1] = v1;
  long long v2 = v0[3];
  v5[2] = v0[2];
  v5[3] = v2;
  static AvroValue.record(_:)((uint64_t)v5, (uint64_t)v4);
  ByteBuffer.writeAvroValue(_:)((uint64_t)v4);
  sub_100093A1C((uint64_t)v4);
  return 0;
}

uint64_t sub_100093648()
{
  sub_10002572C(&qword_10021C6F8);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1001A3830;
  uint64_t v1 = *AvroSchema.string.unsafeMutableAddressor();
  swift_retain();
  *(void *)(v0 + 32) = AvroRecordSchema.Field.init(name:type:optional:)(0x6553686372616573, 0xEF64496E6F697373, v1);
  *(void *)(v0 + 40) = v2;
  *(void *)(v0 + 48) = v3;
  if (qword_100218BE8 != -1) {
    swift_once();
  }
  uint64_t v4 = static AvroSchema.array(schema:)();
  uint64_t result = AvroRecordSchema.Field.init(name:type:optional:)(0xD000000000000011, 0x80000001001B5BA0, v4);
  *(void *)(v0 + 56) = result;
  *(void *)(v0 + 64) = v6;
  *(void *)(v0 + 72) = v7;
  *(void *)&xmmword_10021C660 = 0x64726F636572;
  *((void *)&xmmword_10021C660 + 1) = 0xE600000000000000;
  qword_10021C670 = 0xD000000000000013;
  unk_10021C678 = 0x80000001001A6130;
  *(void *)&xmmword_10021C680 = 0xD000000000000032;
  *((void *)&xmmword_10021C680 + 1) = 0x80000001001B5BC0;
  qword_10021C690 = v0;
  return result;
}

uint64_t sub_100093798()
{
  if (qword_100218BF0 != -1) {
    swift_once();
  }
  v1[0] = xmmword_10021C6B0;
  v1[1] = *(_OWORD *)&qword_10021C6C0;
  v1[2] = xmmword_10021C6D0;
  uint64_t v2 = qword_10021C6E0;
  uint64_t result = static AvroSchema.record(schema:)((uint64_t)v1);
  qword_10021C698 = 0x7961727261;
  unk_10021C6A0 = 0xE500000000000000;
  qword_10021C6A8 = result;
  return result;
}

uint64_t sub_10009382C()
{
  sub_10002572C(&qword_10021C6F8);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1001A4D80;
  uint64_t v1 = AvroSchema.string.unsafeMutableAddressor();
  uint64_t v2 = *v1;
  swift_retain();
  *(void *)(v0 + 32) = AvroRecordSchema.Field.init(name:type:optional:)(0xD000000000000013, 0x80000001001B5C00, v2);
  *(void *)(v0 + 40) = v3;
  *(void *)(v0 + 48) = v4;
  uint64_t v5 = *v1;
  swift_retain();
  *(void *)(v0 + 56) = AvroRecordSchema.Field.init(name:type:optional:)(0x656D697265707865, 0xEC0000006449746ELL, v5);
  *(void *)(v0 + 64) = v6;
  *(void *)(v0 + 72) = v7;
  uint64_t v8 = *v1;
  swift_retain();
  *(void *)(v0 + 80) = AvroRecordSchema.Field.init(name:type:optional:)(0x6E656D7461657274, 0xEB00000000644974, v8);
  *(void *)(v0 + 88) = v9;
  *(void *)(v0 + 96) = v10;
  uint64_t v11 = AvroSchema.int.unsafeMutableAddressor();
  uint64_t v12 = *v11;
  swift_retain();
  *(void *)(v0 + 104) = AvroRecordSchema.Field.init(name:type:optional:)(0x656D796F6C706564, 0xEC0000006449746ELL, v12);
  *(void *)(v0 + 112) = v13;
  *(void *)(v0 + 120) = v14;
  uint64_t v15 = *v11;
  swift_retain();
  uint64_t result = AvroRecordSchema.Field.init(name:type:optional:)(0xD000000000000014, 0x80000001001B5C20, v15);
  *(void *)(v0 + 128) = result;
  *(void *)(v0 + 136) = v17;
  *(void *)(v0 + 144) = v18;
  *(void *)&xmmword_10021C6B0 = 0x64726F636572;
  *((void *)&xmmword_10021C6B0 + 1) = 0xE600000000000000;
  strcpy((char *)&qword_10021C6C0, "ExperimentInfo");
  unk_10021C6CF = -18;
  xmmword_10021C6D0 = 0uLL;
  qword_10021C6E0 = v0;
  return result;
}

void sub_1000939F4()
{
  qword_10021C6E8 = (uint64_t)&off_1001F9EE0;
}

void sub_100093A08()
{
  qword_10021C6F0 = (uint64_t)&off_1001F9F08;
}

uint64_t sub_100093A1C(uint64_t a1)
{
  return a1;
}

uint64_t sub_100093A68(uint64_t result, unint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  switch(a9)
  {
    case 0:
      uint64_t result = sub_100093B94(result, a2, a3, a4);
      break;
    case 1:
    case 2:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_3;
    case 3:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      break;
    case 4:
LABEL_3:
      uint64_t result = swift_release();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100093B94(uint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  if (a4 == 6) {
    return sub_100093BB8(result, a2);
  }
  if (a4 == 5) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100093BB8(uint64_t result, unint64_t a2)
{
  uint64_t v2 = (a2 >> 60) & 3;
  if (v2 == 2 || v2 == 1) {
    return sub_1000291B4(result, a2 & 0xCFFFFFFFFFFFFFFFLL);
  }
  if (!v2) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100093BE0()
{
  if (qword_100218BF0 != -1) {
    swift_once();
  }
  SwiftAvro::AvroRecordSchema schema = *(SwiftAvro::AvroRecordSchema *)byte_10021C6B0;
  sub_100093F9C((uint64_t)&schema);
  AvroRecord.init(schema:)(&v9, &schema);
  uint64_t v1 = Trialpb_TrialExperiment.experimentNamespace.getter();
  static AvroValue.string(_:)(v1, v2, (uint64_t)v10);
  swift_bridgeObjectRelease();
  AvroRecord.set(_:forField:)(v10, 0xD000000000000013, 0x80000001001B5C00);
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v8 = v10;
    return sub_100093A1C((uint64_t)v8);
  }
  sub_100093A1C((uint64_t)v10);
  uint64_t v3 = Trialpb_TrialExperiment.experimentID.getter();
  static AvroValue.string(_:)(v3, v4, (uint64_t)v11);
  swift_bridgeObjectRelease();
  AvroRecord.set(_:forField:)(v11, 0x656D697265707865, 0xEC0000006449746ELL);
  sub_100093A1C((uint64_t)v11);
  uint64_t v5 = Trialpb_TrialExperiment.treatmentID.getter();
  static AvroValue.string(_:)(v5, v6, (uint64_t)v12);
  swift_bridgeObjectRelease();
  AvroRecord.set(_:forField:)(v12, 0x6E656D7461657274, 0xEB00000000644974);
  sub_100093A1C((uint64_t)v12);
  uint64_t result = Trialpb_TrialExperiment.deploymentID.getter();
  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (result > 0x7FFFFFFF)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  AvroValue.init(_:)(v13, result);
  AvroRecord.set(_:forField:)(v13, 0x656D796F6C706564, 0xEC0000006449746ELL);
  sub_100093A1C((uint64_t)v13);
  uint64_t result = Trialpb_TrialExperiment.compatibilityVersion.getter();
  if ((result & 0x80000000) == 0)
  {
    AvroValue.init(_:)(v14, result);
    AvroRecord.set(_:forField:)(v14, 0xD000000000000014, 0x80000001001B5C20);
    sub_100093A1C((uint64_t)v14);
    SwiftAvro::AvroRecord v16 = v9;
    static AvroValue.record(_:)((uint64_t)&v16, (uint64_t)v15);
    sub_100093FF4((uint64_t)&v16);
    AvroArray.append(_:)(v15);
    uint64_t v8 = v15;
    return sub_100093A1C((uint64_t)v8);
  }
LABEL_12:
  __break(1u);
  return result;
}

void sub_100093EF4(uint64_t *a1)
{
  uint64_t v2 = *(void *)(type metadata accessor for Trialpb_TrialExperiment() - 8);
  uint64_t v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_10011BD4C(v3);
    uint64_t v3 = v4;
  }
  uint64_t v5 = *(void *)(v3 + 16);
  v6[0] = v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v5;
  sub_10009405C(v6);
  *a1 = v3;
}

uint64_t sub_100093F9C(uint64_t a1)
{
  return a1;
}

uint64_t sub_100093FF4(uint64_t a1)
{
  return a1;
}

void sub_10009405C(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Trialpb_TrialExperiment();
  uint64_t v157 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  v152 = (char *)&v143 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v5);
  v166 = (char *)&v143 - v8;
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v143 - v10;
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (char *)&v143 - v13;
  uint64_t v15 = __chkstk_darwin(v12);
  v155 = (char *)&v143 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  v154 = (char *)&v143 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  v150 = (char *)&v143 - v20;
  __chkstk_darwin(v19);
  v149 = (char *)&v143 - v21;
  v170 = a1;
  Swift::Int v22 = a1[1];
  Swift::Int v23 = _minimumMergeRunLength(_:)(v22);
  if (v23 >= v22)
  {
    if (v22 < 0) {
      goto LABEL_155;
    }
    if (v22) {
      sub_100094CF4(0, v22, 1, v170);
    }
    return;
  }
  Swift::Int v24 = v23;
  uint64_t v145 = sub_1000EE2C4(v22 / 2);
  unint64_t v156 = v25;
  uint64_t v146 = v22;
  if (v22 <= 0) {
    goto LABEL_119;
  }
  Swift::Int v144 = v24;
  uint64_t v162 = v157 + 16;
  v163 = (void (**)(char *, uint64_t))(v157 + 8);
  uint64_t v164 = v4;
  v168 = (void (**)(char *, uint64_t, uint64_t))(v157 + 32);
  uint64_t v26 = (char *)_swiftEmptyArrayStorage;
  uint64_t v27 = 0;
  v159 = v11;
  uint64_t v28 = v22;
  v148 = v14;
  while (1)
  {
    uint64_t v29 = v27;
    if (v27 + 1 >= v28)
    {
      uint64_t v39 = v27 + 1;
      uint64_t v40 = v164;
      v41 = v148;
    }
    else
    {
      uint64_t v167 = v28;
      uint64_t v30 = *v170;
      uint64_t v31 = *(void *)(v157 + 72);
      uint64_t v165 = v27 + 1;
      SwiftAvro::AvroRecord v32 = *(void (**)(char *, uint64_t, uint64_t))(v157 + 16);
      uint64_t v33 = v164;
      v32(v149, v30 + v31 * (v27 + 1), v164);
      uint64_t v153 = v29;
      v158 = (char *)v30;
      uint64_t v169 = v31;
      v32(v150, v30 + v31 * v29, v33);
      uint64_t v34 = Trialpb_TrialExperiment.experimentNamespace.getter();
      uint64_t v36 = v35;
      if (v34 == Trialpb_TrialExperiment.experimentNamespace.getter() && v36 == v37) {
        LODWORD(v161) = 0;
      }
      else {
        LODWORD(v161) = _stringCompareWithSmolCheck(_:_:expecting:)();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v40 = v164;
      v42 = *v163;
      (*v163)(v150, v164);
      v42(v149, v40);
      uint64_t v39 = v153 + 2;
      uint64_t v28 = v167;
      if (v153 + 2 < v167)
      {
        v147 = v26;
        v165 *= v169;
        v43 = v158;
        uint64_t v160 = v169 * v39;
        while (1)
        {
          v32(v154, (uint64_t)&v43[v160], v40);
          v32(v155, (uint64_t)&v43[v165], v40);
          uint64_t v44 = Trialpb_TrialExperiment.experimentNamespace.getter();
          uint64_t v46 = v45;
          BOOL v48 = v44 == Trialpb_TrialExperiment.experimentNamespace.getter() && v46 == v47;
          int v49 = v48 ? 0 : _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v40 = v164;
          v42(v155, v164);
          v42(v154, v40);
          if ((v161 ^ v49)) {
            break;
          }
          ++v39;
          v43 += v169;
          uint64_t v28 = v167;
          if (v39 >= v167)
          {
            uint64_t v39 = v167;
            uint64_t v26 = v147;
            goto LABEL_24;
          }
        }
        uint64_t v26 = v147;
        uint64_t v28 = v167;
      }
LABEL_24:
      v41 = v148;
      uint64_t v29 = v153;
      if (v161)
      {
        if (v39 < v153) {
          goto LABEL_156;
        }
        if (v153 < v39)
        {
          v147 = v26;
          uint64_t v50 = 0;
          uint64_t v51 = v169 * (v39 - 1);
          uint64_t v52 = v39 * v169;
          uint64_t v53 = v153;
          uint64_t v54 = v153 * v169;
          uint64_t v165 = v39;
          do
          {
            if (v53 != v39 + v50 - 1)
            {
              v55 = v158;
              if (!v158) {
                goto LABEL_162;
              }
              v56 = &v158[v54];
              uint64_t v160 = (uint64_t)&v158[v51];
              uint64_t v40 = v164;
              v161 = (void (*)(char *, char *, uint64_t))*v168;
              v161(v152, &v158[v54], v164);
              if (v54 < v51 || v56 >= &v55[v52])
              {
                uint64_t v58 = v160;
                swift_arrayInitWithTakeFrontToBack();
              }
              else
              {
                uint64_t v58 = v160;
                if (v54 != v51) {
                  swift_arrayInitWithTakeBackToFront();
                }
              }
              v161((char *)v58, v152, v40);
              uint64_t v39 = v165;
            }
            ++v53;
            --v50;
            v51 -= v169;
            v52 -= v169;
            v54 += v169;
          }
          while (v53 < v39 + v50);
          uint64_t v26 = v147;
          v41 = v148;
          uint64_t v29 = v153;
          uint64_t v28 = v167;
        }
      }
    }
    if (v39 < v28)
    {
      if (__OFSUB__(v39, v29)) {
        goto LABEL_154;
      }
      if (v39 - v29 < v144)
      {
        if (__OFADD__(v29, v144)) {
          goto LABEL_157;
        }
        if (v29 + v144 >= v28) {
          uint64_t v59 = v28;
        }
        else {
          uint64_t v59 = v29 + v144;
        }
        if (v59 < v29)
        {
LABEL_158:
          __break(1u);
          goto LABEL_159;
        }
        if (v39 != v59)
        {
          uint64_t v153 = v29;
          v147 = v26;
          uint64_t v143 = v2;
          uint64_t v60 = *(void *)(v157 + 72);
          v158 = *(char **)(v157 + 16);
          uint64_t v61 = v60 * (v39 - 1);
          uint64_t v160 = v60;
          uint64_t v169 = v39 * v60;
          uint64_t v151 = v59;
          do
          {
            uint64_t v62 = 0;
            uint64_t v63 = v153;
            uint64_t v165 = v39;
            v161 = (void (*)(char *, char *, uint64_t))v61;
            while (1)
            {
              uint64_t v167 = v63;
              uint64_t v64 = *v170;
              v65 = (void (*)(char *, uint64_t, uint64_t))v158;
              ((void (*)(char *, uint64_t, uint64_t))v158)(v41, v169 + v62 + *v170, v40);
              uint64_t v66 = v61 + v62 + v64;
              v67 = v41;
              v68 = v159;
              v65(v159, v66, v40);
              uint64_t v69 = Trialpb_TrialExperiment.experimentNamespace.getter();
              uint64_t v71 = v70;
              if (v69 == Trialpb_TrialExperiment.experimentNamespace.getter() && v71 == v72) {
                break;
              }
              char v74 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v75 = *v163;
              (*v163)(v68, v40);
              v75(v67, v40);
              v41 = v67;
              if ((v74 & 1) == 0) {
                goto LABEL_61;
              }
              uint64_t v76 = *v170;
              uint64_t v61 = (uint64_t)v161;
              if (!*v170) {
                goto LABEL_160;
              }
              v77 = (char *)v161 + v76 + v62;
              v78 = *v168;
              uint64_t v79 = v164;
              (*v168)(v166, v76 + v169 + v62, v164);
              swift_arrayInitWithTakeFrontToBack();
              v78(v77, (uint64_t)v166, v79);
              v62 -= v160;
              uint64_t v63 = v167 + 1;
              uint64_t v80 = v165;
              uint64_t v40 = v79;
              if (v165 == v167 + 1) {
                goto LABEL_62;
              }
            }
            swift_bridgeObjectRelease_n();
            v81 = *v163;
            (*v163)(v68, v40);
            v81(v67, v40);
            v41 = v67;
LABEL_61:
            uint64_t v80 = v165;
            uint64_t v61 = (uint64_t)v161;
LABEL_62:
            uint64_t v39 = v80 + 1;
            v61 += v160;
            v169 += v160;
          }
          while (v39 != v151);
          uint64_t v39 = v151;
          uint64_t v2 = v143;
          uint64_t v26 = v147;
          uint64_t v29 = v153;
        }
      }
    }
    if (v39 < v29) {
      goto LABEL_153;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_10011B190(0, *((void *)v26 + 2) + 1, 1, v26);
      uint64_t v26 = v134;
    }
    unint64_t v83 = *((void *)v26 + 2);
    unint64_t v82 = *((void *)v26 + 3);
    unint64_t v84 = v83 + 1;
    uint64_t v165 = v39;
    if (v83 >= v82 >> 1)
    {
      sub_10011B190(v82 > 1, v83 + 1, 1, v26);
      uint64_t v26 = v135;
    }
    *((void *)v26 + 2) = v84;
    v85 = v26 + 32;
    v86 = &v26[16 * v83 + 32];
    uint64_t v87 = v165;
    *(void *)v86 = v29;
    *((void *)v86 + 1) = v87;
    if (v83) {
      break;
    }
    unint64_t v84 = 1;
LABEL_112:
    uint64_t v28 = v170[1];
    uint64_t v27 = v165;
    if (v165 >= v28) {
      goto LABEL_120;
    }
  }
  while (1)
  {
    unint64_t v88 = v84 - 1;
    if (v84 >= 4)
    {
      v93 = &v85[2 * v84];
      uint64_t v94 = *(v93 - 8);
      uint64_t v95 = *(v93 - 7);
      BOOL v99 = __OFSUB__(v95, v94);
      uint64_t v96 = v95 - v94;
      if (v99) {
        goto LABEL_138;
      }
      uint64_t v98 = *(v93 - 6);
      uint64_t v97 = *(v93 - 5);
      BOOL v99 = __OFSUB__(v97, v98);
      uint64_t v91 = v97 - v98;
      char v92 = v99;
      if (v99) {
        goto LABEL_139;
      }
      unint64_t v100 = v84 - 2;
      v101 = &v85[2 * v84 - 4];
      uint64_t v103 = *v101;
      uint64_t v102 = v101[1];
      BOOL v99 = __OFSUB__(v102, v103);
      uint64_t v104 = v102 - v103;
      if (v99) {
        goto LABEL_140;
      }
      BOOL v99 = __OFADD__(v91, v104);
      uint64_t v105 = v91 + v104;
      if (v99) {
        goto LABEL_142;
      }
      if (v105 >= v96)
      {
        v123 = &v85[2 * v88];
        uint64_t v125 = *v123;
        uint64_t v124 = v123[1];
        BOOL v99 = __OFSUB__(v124, v125);
        uint64_t v126 = v124 - v125;
        if (v99) {
          goto LABEL_148;
        }
        BOOL v116 = v91 < v126;
        goto LABEL_101;
      }
    }
    else
    {
      if (v84 != 3)
      {
        uint64_t v117 = *((void *)v26 + 4);
        uint64_t v118 = *((void *)v26 + 5);
        BOOL v99 = __OFSUB__(v118, v117);
        uint64_t v110 = v118 - v117;
        char v111 = v99;
        goto LABEL_95;
      }
      uint64_t v90 = *((void *)v26 + 4);
      uint64_t v89 = *((void *)v26 + 5);
      BOOL v99 = __OFSUB__(v89, v90);
      uint64_t v91 = v89 - v90;
      char v92 = v99;
    }
    if (v92) {
      goto LABEL_141;
    }
    unint64_t v100 = v84 - 2;
    v106 = &v85[2 * v84 - 4];
    uint64_t v108 = *v106;
    uint64_t v107 = v106[1];
    BOOL v109 = __OFSUB__(v107, v108);
    uint64_t v110 = v107 - v108;
    char v111 = v109;
    if (v109) {
      goto LABEL_143;
    }
    v112 = &v85[2 * v88];
    uint64_t v114 = *v112;
    uint64_t v113 = v112[1];
    BOOL v99 = __OFSUB__(v113, v114);
    uint64_t v115 = v113 - v114;
    if (v99) {
      goto LABEL_145;
    }
    if (__OFADD__(v110, v115)) {
      goto LABEL_147;
    }
    if (v110 + v115 >= v91)
    {
      BOOL v116 = v91 < v115;
LABEL_101:
      if (v116) {
        unint64_t v88 = v100;
      }
      goto LABEL_103;
    }
LABEL_95:
    if (v111) {
      goto LABEL_144;
    }
    v119 = &v85[2 * v88];
    uint64_t v121 = *v119;
    uint64_t v120 = v119[1];
    BOOL v99 = __OFSUB__(v120, v121);
    uint64_t v122 = v120 - v121;
    if (v99) {
      goto LABEL_146;
    }
    if (v122 < v110) {
      goto LABEL_112;
    }
LABEL_103:
    unint64_t v127 = v88 - 1;
    if (v88 - 1 >= v84)
    {
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
LABEL_148:
      __break(1u);
      goto LABEL_149;
    }
    if (!*v170) {
      goto LABEL_161;
    }
    v128 = v26;
    v129 = &v85[2 * v127];
    uint64_t v130 = *v129;
    v131 = &v85[2 * v88];
    uint64_t v132 = v131[1];
    sub_10009506C(*v170 + *(void *)(v157 + 72) * *v129, *v170 + *(void *)(v157 + 72) * *v131, *v170 + *(void *)(v157 + 72) * v132, v156);
    if (v2) {
      break;
    }
    if (v132 < v130) {
      goto LABEL_135;
    }
    if (v88 > *((void *)v128 + 2)) {
      goto LABEL_136;
    }
    uint64_t *v129 = v130;
    v85[2 * v127 + 1] = v132;
    unint64_t v133 = *((void *)v128 + 2);
    if (v88 >= v133) {
      goto LABEL_137;
    }
    uint64_t v26 = v128;
    unint64_t v84 = v133 - 1;
    memmove(&v85[2 * v88], v131 + 2, 16 * (v133 - 1 - v88));
    *((void *)v128 + 2) = v133 - 1;
    if (v133 <= 2) {
      goto LABEL_112;
    }
  }
LABEL_117:
  swift_bridgeObjectRelease();
  if (v146 >= -1) {
    goto LABEL_132;
  }
  __break(1u);
LABEL_119:
  uint64_t v26 = (char *)_swiftEmptyArrayStorage;
  unint64_t v84 = _swiftEmptyArrayStorage[2];
LABEL_120:
  if (v84 >= 2)
  {
    uint64_t v136 = *v170;
    while (1)
    {
      unint64_t v137 = v84 - 2;
      if (v84 < 2) {
        break;
      }
      if (!v136) {
        goto LABEL_163;
      }
      uint64_t v138 = *(void *)&v26[16 * v137 + 32];
      uint64_t v139 = *(void *)&v26[16 * v84 + 24];
      sub_10009506C(v136 + *(void *)(v157 + 72) * v138, v136 + *(void *)(v157 + 72) * *(void *)&v26[16 * v84 + 16], v136 + *(void *)(v157 + 72) * v139, v156);
      if (v2) {
        goto LABEL_117;
      }
      if (v139 < v138) {
        goto LABEL_150;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_10011B25C((uint64_t)v26);
        uint64_t v26 = v142;
      }
      if (v137 >= *((void *)v26 + 2)) {
        goto LABEL_151;
      }
      v140 = &v26[16 * v137 + 32];
      *(void *)v140 = v138;
      *((void *)v140 + 1) = v139;
      unint64_t v141 = *((void *)v26 + 2);
      if (v84 > v141) {
        goto LABEL_152;
      }
      memmove(&v26[16 * v84 + 16], &v26[16 * v84 + 32], 16 * (v141 - v84));
      *((void *)v26 + 2) = v141 - 1;
      unint64_t v84 = v141 - 1;
      if (v141 <= 2) {
        goto LABEL_131;
      }
    }
LABEL_149:
    __break(1u);
LABEL_150:
    __break(1u);
LABEL_151:
    __break(1u);
LABEL_152:
    __break(1u);
LABEL_153:
    __break(1u);
LABEL_154:
    __break(1u);
LABEL_155:
    __break(1u);
LABEL_156:
    __break(1u);
LABEL_157:
    __break(1u);
    goto LABEL_158;
  }
LABEL_131:
  swift_bridgeObjectRelease();
  if (v146 >= -1)
  {
LABEL_132:
    *(void *)(v145 + 16) = 0;
    swift_bridgeObjectRelease();
    return;
  }
LABEL_159:
  __break(1u);
LABEL_160:
  __break(1u);
LABEL_161:
  __break(1u);
LABEL_162:
  __break(1u);
LABEL_163:
  __break(1u);
}

uint64_t sub_100094CF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v46 = a4;
  uint64_t v36 = a1;
  uint64_t v41 = type metadata accessor for Trialpb_TrialExperiment();
  uint64_t v6 = __chkstk_darwin(v41);
  uint64_t v44 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v34 - v9;
  uint64_t result = __chkstk_darwin(v8);
  uint64_t v14 = (char *)&v34 - v13;
  uint64_t v42 = a3;
  uint64_t v35 = a2;
  if (a3 != a2)
  {
    uint64_t v37 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
    uint64_t v38 = v12 + 16;
    uint64_t v15 = *(void *)(v12 + 72);
    uint64_t v39 = (void (**)(char *, uint64_t))(v12 + 8);
    uint64_t v40 = v15;
    v43 = (void (**)(char *, uint64_t, uint64_t))(v12 + 32);
    uint64_t v48 = v15 * (v42 - 1);
    uint64_t v47 = v15 * v42;
    while (2)
    {
      uint64_t v16 = 0;
      uint64_t v17 = v36;
      uint64_t v18 = v41;
      while (1)
      {
        uint64_t v19 = *v46;
        uint64_t v45 = v47 + v16;
        uint64_t v20 = v37;
        v37(v14, v47 + v16 + v19, v18);
        v20(v10, v48 + v16 + v19, v18);
        uint64_t v21 = Trialpb_TrialExperiment.experimentNamespace.getter();
        Swift::Int v22 = v14;
        Swift::Int v23 = v10;
        uint64_t v25 = v24;
        if (v21 == Trialpb_TrialExperiment.experimentNamespace.getter() && v25 == v26) {
          break;
        }
        char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v29 = *v39;
        (*v39)(v23, v18);
        uint64_t result = ((uint64_t (*)(char *, uint64_t))v29)(v22, v18);
        uint64_t v10 = v23;
        uint64_t v14 = v22;
        if (v28)
        {
          uint64_t v30 = *v46;
          if (!*v46)
          {
            __break(1u);
            return result;
          }
          uint64_t v31 = v30 + v48 + v16;
          SwiftAvro::AvroRecord v32 = *v43;
          uint64_t v18 = v41;
          (*v43)(v44, v30 + v47 + v16, v41);
          swift_arrayInitWithTakeFrontToBack();
          uint64_t result = ((uint64_t (*)(uint64_t, char *, uint64_t))v32)(v31, v44, v18);
          v16 -= v40;
          ++v17;
          uint64_t v14 = v22;
          if (v42 != v17) {
            continue;
          }
        }
        goto LABEL_13;
      }
      swift_bridgeObjectRelease_n();
      uint64_t v33 = *v39;
      (*v39)(v23, v18);
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v33)(v22, v18);
      uint64_t v10 = v23;
      uint64_t v14 = v22;
LABEL_13:
      v48 += v40;
      v47 += v40;
      if (++v42 != v35) {
        continue;
      }
      break;
    }
  }
  return result;
}

void sub_10009506C(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8 = type metadata accessor for Trialpb_TrialExperiment();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  v77 = (char *)&v66 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v76 = (char *)&v66 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  __chkstk_darwin(v14);
  uint64_t v18 = *(void *)(v17 + 72);
  if (!v18)
  {
    __break(1u);
LABEL_89:
    __break(1u);
LABEL_90:
    __break(1u);
    goto LABEL_91;
  }
  int64_t v19 = a2 - a1;
  if (a2 - a1 == 0x8000000000000000 && v18 == -1) {
    goto LABEL_89;
  }
  int64_t v21 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v18 == -1) {
    goto LABEL_90;
  }
  uint64_t v72 = (char *)&v66 - v15;
  uint64_t v73 = v16;
  uint64_t v23 = v19 / v18;
  uint64_t v24 = v21 / v18;
  uint64_t v75 = v18;
  if (v19 / v18 >= v21 / v18)
  {
    sub_100119258(a2, v21 / v18, a4);
    uint64_t v25 = (char *)(a4 + v24 * v18);
    if (v24 * v18 >= 1 && a1 < a2)
    {
      uint64_t v73 = -v18;
      char v28 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
      uint64_t v74 = v9 + 16;
      uint64_t v69 = (void (**)(char *, uint64_t))(v9 + 8);
      uint64_t v70 = v28;
      unint64_t v67 = a4;
      unint64_t v71 = a1;
      do
      {
        unint64_t v29 = a3;
        unint64_t v78 = (unint64_t)v25;
        uint64_t v30 = v73;
        uint64_t v72 = &v25[v73];
        uint64_t v31 = v70;
        ((void (*)(char *))v70)(v76);
        v31(v77, a2 + v30, v8);
        uint64_t v32 = Trialpb_TrialExperiment.experimentNamespace.getter();
        uint64_t v34 = v33;
        if (v32 == Trialpb_TrialExperiment.experimentNamespace.getter() && v34 == v35) {
          char v37 = 0;
        }
        else {
          char v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        a3 = v29 + v73;
        uint64_t v38 = *v69;
        (*v69)(v77, v8);
        v38(v76, v8);
        unint64_t v39 = v71;
        if (v37)
        {
          if (v29 < a2 || a3 >= a2)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v29 != a2)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          a2 += v30;
          a4 = v67;
          uint64_t v18 = v75;
          uint64_t v25 = (char *)v78;
        }
        else if (v29 < v78 || a3 >= v78)
        {
          uint64_t v42 = v72;
          swift_arrayInitWithTakeFrontToBack();
          uint64_t v25 = v42;
          a4 = v67;
          uint64_t v18 = v75;
        }
        else
        {
          uint64_t v18 = v75;
          if (v29 == v78)
          {
            uint64_t v25 = v72;
          }
          else
          {
            v43 = v72;
            swift_arrayInitWithTakeBackToFront();
            uint64_t v25 = v43;
          }
          a4 = v67;
        }
      }
      while ((unint64_t)v25 > a4 && a2 > v39);
    }
  }
  else
  {
    sub_100119258(a1, v19 / v18, a4);
    uint64_t v25 = (char *)(a4 + v23 * v18);
    if (v23 * v18 >= 1 && a2 < a3)
    {
      uint64_t v47 = *(char **)(v9 + 16);
      uint64_t v74 = v9 + 16;
      uint64_t v76 = (char *)(v9 + 8);
      v77 = v47;
      uint64_t v48 = v72;
      uint64_t v49 = v73;
      unint64_t v78 = a4 + v23 * v18;
      unint64_t v68 = a3;
      while (1)
      {
        uint64_t v50 = v77;
        ((void (*)(char *, unint64_t, uint64_t))v77)(v48, a2, v8);
        ((void (*)(uint64_t, unint64_t, uint64_t))v50)(v49, a4, v8);
        uint64_t v51 = Trialpb_TrialExperiment.experimentNamespace.getter();
        uint64_t v52 = v8;
        uint64_t v54 = v53;
        if (v51 == Trialpb_TrialExperiment.experimentNamespace.getter() && v54 == v55) {
          break;
        }
        uint64_t v57 = v49;
        char v58 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v59 = *(void (**)(char *, uint64_t))v76;
        (*(void (**)(uint64_t, uint64_t))v76)(v57, v52);
        v59(v48, v52);
        uint64_t v8 = v52;
        if ((v58 & 1) == 0) {
          goto LABEL_69;
        }
        uint64_t v18 = v75;
        unint64_t v60 = a2 + v75;
        BOOL v61 = a1 < a2 || a1 >= v60;
        unint64_t v62 = v68;
        if (!v61)
        {
          uint64_t v49 = v73;
          if (a1 != a2) {
            swift_arrayInitWithTakeBackToFront();
          }
          uint64_t v25 = (char *)v78;
          goto LABEL_79;
        }
        swift_arrayInitWithTakeFrontToBack();
LABEL_78:
        uint64_t v25 = (char *)v78;
        uint64_t v49 = v73;
LABEL_79:
        a1 += v18;
        BOOL v65 = a4 >= (unint64_t)v25 || v60 >= v62;
        a2 = v60;
        if (v65) {
          goto LABEL_16;
        }
      }
      swift_bridgeObjectRelease_n();
      uint64_t v63 = *(void (**)(char *, uint64_t))v76;
      (*(void (**)(uint64_t, uint64_t))v76)(v49, v52);
      v63(v48, v52);
      uint64_t v8 = v52;
LABEL_69:
      uint64_t v18 = v75;
      BOOL v64 = a1 < a4 || a1 >= a4 + v75;
      unint64_t v62 = v68;
      if (v64)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a1 != a4)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      unint64_t v60 = a2;
      a4 += v18;
      goto LABEL_78;
    }
LABEL_16:
    a2 = a1;
  }
  uint64_t v45 = &v25[-a4];
  if (v18 != -1 || v45 != (char *)0x8000000000000000)
  {
    sub_100119258(a4, (uint64_t)v45 / v18, a2);
    return;
  }
LABEL_91:
  __break(1u);
}

uint64_t destroy for AvroRecord()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for AvroRecord(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for AvroRecord(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for AvroRecord(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AvroRecord(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 64))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AvroRecord(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ExperimentsMetadata()
{
  return &type metadata for ExperimentsMetadata;
}

uint64_t sub_100095900(uint64_t a1, uint64_t a2)
{
  type metadata accessor for OSSignpostID();
  sub_100020C48();
  uint64_t v4 = v3;
  __chkstk_darwin(v5);
  *(void *)(v2 + 16) = 0;
  *(void *)(v2 + 32) = 0;
  swift_unknownObjectWeakInit();
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  static os_signpost_type_t.begin.getter();
  if (qword_100218B98 != -1) {
    swift_once();
  }
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  uint64_t v6 = *(void (**)(uint64_t))(v4 + 8);
  uint64_t v7 = sub_100017EDC();
  v6(v7);
  sub_10002572C(qword_10021C7E0);
  swift_allocObject();
  swift_retain();
  sub_10003A43C();
  *(void *)(v2 + 16) = v8;
  swift_release();
  static os_signpost_type_t.end.getter();
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  swift_release();
  uint64_t v9 = sub_100017EDC();
  v6(v9);
  *(void *)(v2 + 32) = a2;
  swift_unknownObjectWeakAssign();
  swift_unknownObjectRelease();
  return v2;
}

uint64_t sub_100095AFC()
{
  *(void *)(v0 + 16) = 0;
  swift_release();
  swift_release();
  sub_10001CDE0(v0 + 24);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return v0;
}

uint64_t sub_100095B80()
{
  sub_100095AFC();

  return _swift_deallocClassInstance(v0, 152, 7);
}

void sub_100095BB4()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for OSSignpostID();
  sub_100020C48();
  uint64_t v4 = v3;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v9 = Strong;
    uint64_t v10 = v0[4];
    static os_signpost_type_t.begin.getter();
    if (qword_100218B98 != -1) {
      swift_once();
    }
    static OSSignpostID.exclusive.getter();
    sub_10002C26C();
    uint64_t v11 = *(void (**)(uint64_t))(v4 + 8);
    uint64_t v12 = sub_100026988();
    v11(v12);
    type metadata accessor for LocalStateManager();
    swift_allocObject();
    uint64_t v13 = swift_unknownObjectRetain();
    uint64_t v39 = v10;
    v0[7] = sub_100086860(v13, v10);
    v0[8] = &off_1001FD580;
    swift_unknownObjectRelease();
    static os_signpost_type_t.end.getter();
    static OSSignpostID.exclusive.getter();
    sub_100024A54();
    sub_10002C26C();
    uint64_t v14 = sub_100026988();
    v11(v14);
    char v37 = v11;
    v0[5] = sub_10007E6FC();
    v0[6] = v15;
    swift_unknownObjectRelease();
    static os_signpost_type_t.begin.getter();
    sub_10002A4A0();
    sub_100024A54();
    sub_10002C26C();
    uint64_t v16 = sub_100026988();
    v11(v16);
    type metadata accessor for MotionManager();
    swift_allocObject();
    uint64_t v17 = swift_unknownObjectRetain();
    v0[9] = sub_1000E631C(v17, v39);
    v0[10] = &off_1001FFFE8;
    swift_unknownObjectRelease();
    static os_signpost_type_t.end.getter();
    static OSSignpostID.exclusive.getter();
    uint64_t v18 = v9;
    sub_10002C26C();
    int64_t v19 = v37;
    ((void (*)(char *, uint64_t))v37)(v7, v2);
    static os_signpost_type_t.begin.getter();
    static OSSignpostID.exclusive.getter();
    sub_10002C26C();
    uint64_t v20 = sub_100026988();
    v19(v20);
    type metadata accessor for DeviceRestrictionsManager();
    swift_allocObject();
    uint64_t v21 = sub_10002AD74();
    v1[11] = sub_10005A358(v21, v39);
    v1[12] = &off_1001FC2D8;
    swift_unknownObjectRelease();
    static os_signpost_type_t.end.getter();
    static OSSignpostID.exclusive.getter();
    sub_100024A54();
    sub_10002C26C();
    uint64_t v22 = sub_100026988();
    v19(v22);
    static os_signpost_type_t.begin.getter();
    sub_10002A4A0();
    sub_10002C26C();
    uint64_t v23 = sub_100026988();
    v19(v23);
    type metadata accessor for SilhouetteContextProvider();
    swift_allocObject();
    uint64_t v24 = sub_10002AD74();
    uint64_t v25 = v39;
    v1[13] = sub_1000E51DC(v24, v39);
    v1[14] = &off_1001FFFE0;
    swift_unknownObjectRelease();
    static os_signpost_type_t.end.getter();
    sub_10002A4A0();
    sub_10002C26C();
    uint64_t v26 = sub_100026988();
    v19(v26);
    static os_signpost_type_t.begin.getter();
    sub_10002A4A0();
    sub_10002C26C();
    uint64_t v27 = sub_100026988();
    v19(v27);
    id v28 = objc_allocWithZone((Class)type metadata accessor for UserDefaultsManager());
    uint64_t v29 = sub_10002AD74();
    v1[15] = sub_1000679E8(v29, v25);
    v1[16] = &off_1001FC9D8;
    swift_unknownObjectRelease();
    static os_signpost_type_t.end.getter();
    static OSSignpostID.exclusive.getter();
    sub_10002C26C();
    ((void (*)(char *, uint64_t))v19)(v7, v2);
    static os_signpost_type_t.begin.getter();
    static OSSignpostID.exclusive.getter();
    sub_10002C26C();
    uint64_t v30 = sub_100026988();
    v19(v30);
    type metadata accessor for SiriSettingsManager();
    swift_allocObject();
    uint64_t v31 = sub_10002AD74();
    uint64_t v38 = v18;
    v1[17] = sub_10004B458(v31, v39);
    v1[18] = &off_1001FBA60;
    swift_unknownObjectRelease();
    static os_signpost_type_t.end.getter();
    static OSSignpostID.exclusive.getter();
    sub_10002C26C();
    uint64_t v32 = sub_100026988();
    v19(v32);
    static os_signpost_type_t.begin.getter();
    static OSSignpostID.exclusive.getter();
    sub_10002C26C();
    ((void (*)(char *, uint64_t))v19)(v7, v2);
    if (v1[5])
    {
      swift_unknownObjectRetain();
      sub_10007B9DC();
      swift_unknownObjectRelease();
    }
    static os_signpost_type_t.end.getter();
    static OSSignpostID.exclusive.getter();
    sub_10002C26C();
    ((void (*)(char *, uint64_t))v19)(v7, v2);
    static os_signpost_type_t.begin.getter();
    static OSSignpostID.exclusive.getter();
    sub_10002C26C();
    uint64_t v33 = sub_1000270BC();
    v19(v33);
    sub_100096280();
    static os_signpost_type_t.end.getter();
    static OSSignpostID.exclusive.getter();
    sub_10002C26C();
    uint64_t v34 = sub_1000270BC();
    v19(v34);
    id v35 = [self defaultCenter];
    [v35 addObserver:v1 selector:"searchPerformedNotification:" name:@"com.apple.parsecd.performedSearch" object:0];
    swift_unknownObjectRelease();
  }
}

uint64_t sub_100096280()
{
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    if (qword_100218C08 != -1) {
      swift_once();
    }
    if (byte_100236B90 == 1)
    {
      id v1 = objc_allocWithZone((Class)NSUserDefaults);
      id v2 = sub_1000071E4(0x6C7070612E6D6F63, 0xEC00000061642E65);
      if (v2)
      {
        uint64_t v3 = v2;
        NSString v4 = String._bridgeToObjectiveC()();
        id v5 = [v3 stringForKey:v4];

        if (v5)
        {
          uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v8 = v7;

          if (v6 == 0x7972726163 && v8 == 0xE500000000000000)
          {
            swift_bridgeObjectRelease();
            char v10 = 1;
          }
          else
          {
            char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
          }
        }
        else
        {
          char v10 = 0;
        }
      }
      else
      {
        char v10 = 0;
      }
      id v11 = [self defaultCenter];
      sub_10002572C((uint64_t *)&unk_10021BAE0);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1001A2A20;
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      AnyHashable.init<A>(_:)();
      *(void *)(inited + 96) = type metadata accessor for ContextUpdate(0);
      *(unsigned char *)sub_10002E5E8((uint64_t *)(inited + 72)) = v10 & 1;
      swift_storeEnumTagMultiPayload();
      uint64_t v13 = Dictionary.init(dictionaryLiteral:)();
      sub_10010553C(@"com.apple.parsecd.contextUpdate", 0, v13, v11);

      return swift_unknownObjectRelease();
    }
    else
    {
      return swift_unknownObjectRelease();
    }
  }
  return result;
}

void sub_100096540()
{
  uint64_t v1 = v0;
  if (qword_100218B78 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10002A10C(v2, (uint64_t)qword_100236A80);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    id v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Received search performed notification, requesting location if allowed", v5, 2u);
    swift_slowDealloc();
  }

  if (*(void *)(v1 + 40))
  {
    swift_unknownObjectRetain();
    sub_10007A974();
    swift_unknownObjectRelease();
  }
  if (*(void *)(v1 + 72) && object_getClass(*(id *)(v1 + 72)) == (Class)_TtC7parsecd13MotionManager)
  {
    swift_unknownObjectRetain();
    sub_1000E6218();
    swift_unknownObjectRelease();
  }
}

uint64_t type metadata accessor for ContextProviderInterface()
{
  return self;
}

uint64_t sub_100096798()
{
  return swift_initClassMetadata2();
}

uint64_t sub_100096808()
{
  uint64_t v0 = swift_retain();

  return sub_100096840(v0);
}

uint64_t sub_100096840(uint64_t a1)
{
  if (!a1) {
    return sub_100096AA4();
  }
  return a1;
}

uint64_t sub_100096894@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = sub_100096808();
  uint64_t v4 = v3;
  uint64_t result = swift_release();
  *a1 = v2;
  a1[1] = v4;
  return result;
}

uint64_t static AvroPrimitiveSchema.int.getter()
{
  return 2;
}

uint64_t sub_1000968F4()
{
  return Sequence.withContiguousStorageIfAvailable<A>(_:)();
}

void sub_100096918()
{
  uint64_t v0 = String.utf8CString.getter();
  sub_100096A30(1, v0);
  int64_t v4 = v3 >> 1;
  uint64_t v5 = (v3 >> 1) - v2;
  if (__OFSUB__(v3 >> 1, v2))
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (!v5)
  {
LABEL_8:
    swift_unknownObjectRelease();
    return;
  }
  uint64_t v6 = v1;
  uint64_t v7 = v2;
  sub_1000EE4C4(0, v5 & ~(v5 >> 63), 0);
  if ((v5 & 0x8000000000000000) == 0)
  {
    while (v7 < v4)
    {
      char v8 = *(unsigned char *)(v6 + v7);
      unint64_t v10 = _swiftEmptyArrayStorage[2];
      unint64_t v9 = _swiftEmptyArrayStorage[3];
      if (v10 >= v9 >> 1) {
        sub_1000EE4C4(v9 > 1, v10 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v10 + 1;
      *((unsigned char *)&_swiftEmptyArrayStorage[4] + v10) = v8;
      if (v4 == ++v7) {
        goto LABEL_8;
      }
    }
    __break(1u);
    goto LABEL_11;
  }
LABEL_12:
  __break(1u);
}

uint64_t sub_100096A30(uint64_t result, uint64_t a2)
{
  if (result < 0)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  unint64_t v3 = *(void *)(a2 + 16);
  uint64_t result = sub_100088164(0, (v3 - result) & ~((uint64_t)(v3 - result) >> 63), v3);
  if (v4) {
    unint64_t v5 = v3;
  }
  else {
    unint64_t v5 = result;
  }
  if ((v5 & 0x8000000000000000) != 0) {
    goto LABEL_9;
  }
  if (v3 >= v5) {
    return a2;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_100096AA4()
{
  return sub_100096D1C();
}

uint64_t sub_100096AD8()
{
  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_100096B00()
{
  uint64_t v0 = sub_100096AD8();

  return _swift_deallocClassInstance(v0, 42, 7);
}

uint64_t type metadata accessor for Critbit.Internal()
{
  return sub_100040C54();
}

uint64_t sub_100096B48()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t *sub_100096BEC()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 80) - 8) + 8))((uint64_t)v0 + *(void *)(*v0 + 96));
  return v0;
}

uint64_t sub_100096C6C()
{
  uint64_t v0 = sub_100096BEC();
  uint64_t v1 = *(unsigned int *)(*v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*v0 + 52);

  return _swift_deallocClassInstance(v0, v1, v2);
}

uint64_t type metadata accessor for Critbit.External()
{
  return sub_100040C54();
}

uint64_t sub_100096CD8()
{
  return swift_initClassMetadata2();
}

uint64_t sub_100096D1C()
{
  *(void *)(v0 + 16) = 0;
  *(void *)(v0 + 24) = 0;
  swift_release();
  return v0;
}

uint64_t sub_100096D40()
{
  uint64_t v0 = sub_100096AD8();

  return _swift_deallocClassInstance(v0, 32, 7);
}

uint64_t type metadata accessor for Critbit.Node()
{
  return sub_100040C54();
}

uint64_t sub_100096D88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 16);
}

void *sub_100096D90(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

uint64_t sub_100096DC0()
{
  return swift_release();
}

void *sub_100096DC8(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  return a1;
}

void *sub_100096E18(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  return a1;
}

uint64_t sub_100096E58(uint64_t *a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 16))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      uint64_t v3 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v3) = -1;
      }
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t sub_100096EAC(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2;
    }
  }
  return result;
}

uint64_t type metadata accessor for Critbit()
{
  return sub_100040C54();
}

uint64_t sub_100096F14()
{
  return swift_getWitnessTable();
}

uint64_t sub_100096F30@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v6 - 8);
  uint64_t v7 = *(void *)(*v2 + 16);
  if (v7)
  {
    type metadata accessor for Critbit.Node();
    type metadata accessor for Array();
    do
    {
      swift_retain();
      swift_retain();
      Array.append(_:)();
      uint64_t v8 = *(void *)(v7 + 16);
      swift_retain();
      swift_release();
      swift_release();
      uint64_t *v2 = v8;
      uint64_t v7 = *(void *)(v8 + 16);
    }
    while (v7);
  }
  else
  {
    uint64_t v8 = *v2;
  }
  unint64_t v9 = *(char **)(v8 + 24);
  if (!v9)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    uint64_t v17 = (uint64_t)a2;
    uint64_t v18 = 1;
    return sub_10002538C(v17, v18, 1, TupleTypeMetadata2);
  }
  uint64_t v21 = *((void *)v9 + 2);
  swift_bridgeObjectRetain();
  swift_retain();
  static String.Encoding.utf8.getter();
  sub_10002572C(&qword_10021C9E8);
  sub_1000972A8();
  uint64_t v20 = String.init<A>(bytes:encoding:)();
  uint64_t v11 = v10;
  uint64_t result = swift_bridgeObjectRelease();
  if (v11)
  {
    uint64_t v13 = *(void *)(a1 + 16);
    type metadata accessor for Critbit.Node();
    type metadata accessor for Array();
    swift_getWitnessTable();
    swift_getWitnessTable();
    RangeReplaceableCollection<>.popLast()();
    uint64_t v14 = v21;
    if (!v21) {
      uint64_t v14 = sub_100096AA4();
    }
    swift_release();
    uint64_t *v3 = v14;
    uint64_t v15 = swift_getTupleTypeMetadata2();
    uint64_t v16 = (char *)a2 + *(int *)(v15 + 48);
    *a2 = v20;
    a2[1] = v11;
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(v16, &v9[*(void *)(*(void *)v9 + 96)], v13);
    swift_release();
    uint64_t v17 = (uint64_t)a2;
    uint64_t v18 = 0;
    TupleTypeMetadata2 = v15;
    return sub_10002538C(v17, v18, 1, TupleTypeMetadata2);
  }
  __break(1u);
  return result;
}

uint64_t sub_100097210(uint64_t a1)
{
  return a1;
}

uint64_t sub_100097248@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = sub_100097210(*v1);
  uint64_t v5 = v4;
  swift_bridgeObjectRelease();
  uint64_t result = swift_release();
  *a1 = v3;
  a1[1] = v5;
  return result;
}

unint64_t sub_1000972A8()
{
  unint64_t result = qword_10021C9F0[0];
  if (!qword_10021C9F0[0])
  {
    sub_1000371D4(&qword_10021C9E8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10021C9F0);
  }
  return result;
}

uint64_t sub_1000972FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t *))
{
  uint64_t v6 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v6 - 8);
  if (!a1) {
    goto LABEL_9;
  }
  if (*(void *)(a1 + 16))
  {
    swift_retain();
    uint64_t v7 = swift_retain();
    char v8 = sub_10002699C(v7);
    swift_release();
    if ((v8 & 1) == 0)
    {
      swift_release();
LABEL_11:
      char v17 = 0;
      return v17 & 1;
    }
    uint64_t v9 = swift_retain();
    char v10 = sub_10002699C(v9);
    swift_release();
    swift_release();
    if ((v10 & 1) == 0) {
      goto LABEL_11;
    }
    goto LABEL_9;
  }
  uint64_t v11 = *(void *)(a1 + 24);
  if (!v11)
  {
LABEL_9:
    char v17 = 1;
    return v17 & 1;
  }
  uint64_t v12 = *(void *)(v11 + 24);
  uint64_t v18 = *(void *)(v11 + 16);
  swift_retain();
  swift_retain();
  static String.Encoding.utf8.getter();
  sub_10002572C(&qword_10021C9E8);
  sub_1000972A8();
  uint64_t result = String.init<A>(bytes:encoding:)();
  if (v14)
  {
    uint64_t v15 = result;
    uint64_t v16 = v14;
    uint64_t v18 = v12;
    swift_retain();
    char v17 = a4(v15, v16, &v18);
    swift_release();
    swift_release_n();
    swift_bridgeObjectRelease();
    return v17 & 1;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000974B0()
{
  swift_release();

  return swift_bridgeObjectRelease();
}

void *sub_1000974EC(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_100097524(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *sub_100097584(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SchemaStoreModel(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 16))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SchemaStoreModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for Critbit.Iterator()
{
  return sub_100040C54();
}

Swift::Void __swiftcall NSFileManager.createRequiredCacheSubdirectories()()
{
  uint64_t v0 = sub_10002572C(&qword_10021BB20);
  __chkstk_darwin(v0 - 8);
  sub_100024A64();
  uint64_t v3 = v1 - v2;
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v39 - v6;
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v39 - v8;
  uint64_t v10 = type metadata accessor for URL();
  sub_100020C48();
  uint64_t v12 = v11;
  __chkstk_darwin(v13);
  sub_100024A64();
  uint64_t v16 = v14 - v15;
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v39 - v19;
  __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v39 - v21;
  NSFileManager.parsecdAssetsDirectoryURL.getter();
  if (sub_100027BA4((uint64_t)v9, 1, v10) == 1)
  {
    sub_10003CB40((uint64_t)v9);
    if (qword_100218C58 != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    uint64_t v24 = sub_10001DD88(v23, (uint64_t)qword_100236C50);
    os_log_type_t v25 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)sub_100023E24();
      *(_WORD *)uint64_t v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "unable to obtain cache assets directory", v26, 2u);
      sub_100017D40();
    }
  }
  else
  {
    sub_10000E0F4();
    v27();
    NSFileManager.createRequiredCohortsSubdirectories(cachesURL:)();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v22, v10);
  }
  NSFileManager.parsecdCustomFBDirectoryURL.getter();
  if (sub_100027BA4((uint64_t)v7, 1, v10) == 1)
  {
    sub_10003CB40((uint64_t)v7);
    if (qword_100218C58 != -1) {
      swift_once();
    }
    uint64_t v28 = type metadata accessor for Logger();
    uint64_t v29 = sub_10001DD88(v28, (uint64_t)qword_100236C50);
    os_log_type_t v30 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)sub_100023E24();
      *(_WORD *)uint64_t v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "unable to obtain cache custom feedback directory", v31, 2u);
      sub_100017D40();
    }
  }
  else
  {
    sub_10000E0F4();
    v32();
    sub_1000982A8();
    NSFileManager.createRequiredFLSubdirectories()();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v20, v10);
  }
  NSFileManager.parsecdSessionFBDirectoryURL.getter();
  if (sub_100027BA4(v3, 1, v10) == 1)
  {
    sub_10003CB40(v3);
    if (qword_100218C58 != -1) {
      swift_once();
    }
    uint64_t v33 = type metadata accessor for Logger();
    uint64_t v34 = sub_10001DD88(v33, (uint64_t)qword_100236C50);
    os_log_type_t v35 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v34, v35))
    {
      *(_WORD *)sub_100023E24() = 0;
      sub_100018528((void *)&_mh_execute_header, v36, v37, "unable to obtain cache session feedback directory");
      sub_100017D40();
    }
  }
  else
  {
    sub_10000E0F4();
    v38();
    _sSo13NSFileManagerC7parsecdE34createRequiredSessionFBDirectories3urly10Foundation3URLV_tF_0();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v16, v10);
  }
}

void _sSo13NSFileManagerC7parsecdE34createRequiredSessionFBDirectories3urly10Foundation3URLV_tF_0()
{
  uint64_t v1 = v0;
  URL.path.getter();
  sub_10002572C(qword_10021CA78);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1001A2A20;
  *(void *)(inited + 64) = &type metadata for Int;
  *(void *)(inited + 32) = NSFilePosixPermissions;
  *(void *)(inited + 40) = 448;
  type metadata accessor for FileAttributeKey(0);
  sub_1000986B4();
  uint64_t v3 = NSFilePosixPermissions;
  Dictionary.init(dictionaryLiteral:)();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v25 = 0;
  unsigned int v6 = [v0 setAttributes:isa ofItemAtPath:v5 error:&v25];

  if (v6)
  {
    id v7 = v25;
  }
  else
  {
    id v9 = v25;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
  }
  URL._bridgeToObjectiveC()(v8);
  uint64_t v11 = v10;
  uint64_t v12 = swift_initStackObject();
  *(_OWORD *)(v12 + 16) = xmmword_1001A2A20;
  *(void *)(v12 + 64) = &type metadata for Int;
  *(void *)(v12 + 32) = v3;
  *(void *)(v12 + 40) = 448;
  uint64_t v13 = v3;
  uint64_t v14 = Dictionary.init(dictionaryLiteral:)();
  id v25 = 0;
  unsigned __int8 v15 = sub_100098704((uint64_t)v11, 1, v14, (uint64_t)&v25, v1);

  id v16 = v25;
  if (v15)
  {
    id v17 = v16;
  }
  else
  {
    id v18 = v25;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    if (qword_100218C58 != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    sub_10002A10C(v19, (uint64_t)qword_100236C50);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      id v25 = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v22 = 136315138;
      swift_getErrorValue();
      uint64_t v23 = Error.localizedDescription.getter();
      sub_10001C274(v23, v24, (uint64_t *)&v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Error making parsecd caches subdir: %s", v22, 0xCu);
      swift_arrayDestroy();
      sub_100017D40();
      sub_100017D40();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
}

uint64_t NSFileManager.createRequiredCohortsSubdirectories(cachesURL:)()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for URL();
  sub_100020C48();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  sub_100016550();
  URL.appendingPathComponent(_:isDirectory:)();
  _sSo13NSFileManagerC7parsecdE34createRequiredSessionFBDirectories3urly10Foundation3URLV_tF_0();
  sub_10002572C(qword_10021CA78);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1001A2A20;
  *(void *)(inited + 32) = NSFileProtectionKey;
  type metadata accessor for FileProtectionType(0);
  *(void *)(inited + 64) = v8;
  *(void *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
  type metadata accessor for FileAttributeKey(0);
  sub_1000986B4();
  id v9 = NSFileProtectionKey;
  uint64_t v10 = NSFileProtectionCompleteUntilFirstUserAuthentication;
  Dictionary.init(dictionaryLiteral:)();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  URL.path.getter();
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v23 = 0;
  LODWORD(v2) = [v2 setAttributes:isa ofItemAtPath:v12 error:&v23];

  if (v2)
  {
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
    id v14 = v23;
    return v13(v1, v3);
  }
  else
  {
    id v16 = v23;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    if (qword_100218C58 != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    sub_10002A10C(v17, (uint64_t)qword_100236C50);
    swift_errorRetain();
    swift_errorRetain();
    id v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      id v23 = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v20 = 136315138;
      swift_getErrorValue();
      uint64_t v21 = Error.localizedDescription.getter();
      sub_10001C274(v21, v22, (uint64_t *)&v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "error setting protection key: %s", v20, 0xCu);
      swift_arrayDestroy();
      sub_100017D40();
      sub_100017D40();
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
    }
    swift_errorRelease();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v1, v3);
  }
}

uint64_t sub_1000982A8()
{
  uint64_t v0 = type metadata accessor for URL();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = static _CPKnownFeedbackType.allCustomFeedbackDirectories.getter();
  uint64_t v5 = v4[2];
  if (v5)
  {
    uint64_t v6 = v4 + 5;
    do
    {
      swift_bridgeObjectRetain();
      URL.appendingPathComponent(_:isDirectory:)();
      swift_bridgeObjectRelease();
      _sSo13NSFileManagerC7parsecdE34createRequiredSessionFBDirectories3urly10Foundation3URLV_tF_0();
      (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
      v6 += 2;
      --v5;
    }
    while (v5);
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  return swift_bridgeObjectRelease();
}

Swift::Void __swiftcall NSFileManager.createRequiredFLSubdirectories()()
{
  uint64_t v1 = sub_10002572C(&qword_10021BB20);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for URL();
  sub_100020C48();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  sub_100016550();
  NSFileManager.feedbackLoggerCacheDirectoryURL.getter((uint64_t)v3);
  if (sub_100027BA4((uint64_t)v3, 1, v4) == 1)
  {
    sub_10003CB40((uint64_t)v3);
  }
  else
  {
    sub_10000E0F4();
    v8();
    _sSo13NSFileManagerC7parsecdE34createRequiredSessionFBDirectories3urly10Foundation3URLV_tF_0();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0, v4);
  }
}

id NSFileManager.saveInCache(file:from:)()
{
  uint64_t v1 = v0;
  NSFileManager.validateCacheSubdirectories()();
  URL.path.getter();
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unsigned int v3 = [v0 fileExistsAtPath:v2];

  URL._bridgeToObjectiveC()(v4);
  if (v3)
  {
    uint64_t v7 = v5;
    URL._bridgeToObjectiveC()(v6);
    uint64_t v9 = v8;
    id v15 = 0;
    unsigned int v10 = [v1 replaceItemAtURL:v7 withItemAtURL:v8 backupItemName:0 options:1 resultingItemURL:0 error:&v15];
  }
  else
  {
    uint64_t v11 = v5;
    URL._bridgeToObjectiveC()(v6);
    uint64_t v9 = v12;
    id v15 = 0;
    unsigned int v10 = [v1 moveItemAtURL:v11 toURL:v12 error:&v15];
  }
  if (v10) {
    return v15;
  }
  id v14 = v15;
  _convertNSErrorToError(_:)();

  return (id)swift_willThrow();
}

unint64_t sub_1000986B4()
{
  unint64_t result = qword_100219240;
  if (!qword_100219240)
  {
    type metadata accessor for FileAttributeKey(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100219240);
  }
  return result;
}

id sub_100098704(uint64_t a1, char a2, uint64_t a3, uint64_t a4, void *a5)
{
  type metadata accessor for FileAttributeKey(0);
  sub_1000986B4();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v10 = [a5 createDirectoryAtURL:a1 withIntermediateDirectories:a2 & 1 attributes:isa error:a4];

  return v10;
}

uint64_t sub_1000987A8()
{
  return swift_initClassMetadata2();
}

uint64_t sub_1000987E0()
{
  return String.init<A>(describing:)();
}

BOOL sub_100098810(uint64_t a1)
{
  return a1 != 0;
}

uint64_t sub_10009881C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return == infix<A>(_:_:)(a1, a2, a3, WitnessTable, &protocol witness table for UInt);
}

uint64_t sub_100098890(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return RawRepresentable<>.hashValue.getter(a1, a2, WitnessTable, &protocol witness table for UInt);
}

uint64_t sub_1000988FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return RawRepresentable<>.hash(into:)(a1, a2, a3, WitnessTable, &protocol witness table for UInt);
}

uint64_t sub_10009896C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return RawRepresentable<>._rawHashValue(seed:)(a1, a2, a3, WitnessTable, &protocol witness table for UInt);
}

BOOL sub_1000989DC@<W0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  BOOL result = sub_100098810(*a1);
  *a2 = result;
  return result;
}

void sub_100098A10(void *a1@<X8>)
{
  *a1 = 0;
}

unint64_t sub_100098A18()
{
  return 0xD000000000000010;
}

uint64_t sub_100098A38()
{
  return sub_1000987E0();
}

const char *sub_100098A40()
{
  return "lifetime";
}

uint64_t sub_100098A54()
{
  uint64_t v0 = sub_1000FF328();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v1, v2);
}

uint64_t type metadata accessor for LifetimeSpanPrototype()
{
  return sub_100040C54();
}

unsigned char *sub_100098AC0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *BOOL result = a2;
        return result;
      case 2:
        *(_WORD *)BOOL result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)BOOL result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *BOOL result = 0;
      break;
    case 2:
      *(_WORD *)BOOL result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100098B5CLL);
    case 4:
      *(_DWORD *)BOOL result = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t type metadata accessor for LifetimeTrackingActivity()
{
  return sub_100040C54();
}

uint64_t sub_100098B9C(uint64_t a1)
{
  *(void *)(a1 + 8) = swift_getWitnessTable();
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_100098BFC()
{
  return swift_getWitnessTable();
}

uint64_t sub_100098C18(char a1)
{
  type metadata accessor for Lock();
  sub_100023CE4();
  *(void *)(v1 + 16) = Lock.init()();
  *(unsigned char *)(v1 + 24) = a1;
  return v1;
}

void *sub_100098C64()
{
  sub_10002E860();
  sub_100023CE4();
  v0[2] = Lock.init()();
  sub_100085EFC(v1, (uint64_t)v0 + *(void *)(*v0 + 96), &qword_10021BF30);
  return v0;
}

uint64_t sub_100098CC8()
{
  sub_10002E860();
  sub_100023CE4();
  *(void *)(v0 + 16) = Lock.init()();
  type metadata accessor for Client();
  sub_10001DCF8();
  uint64_t v1 = sub_10001AA80();
  v2(v1);
  return v0;
}

uint64_t sub_100098D50(uint64_t a1)
{
  uint64_t v2 = sub_10002572C(&qword_10021CD70);
  __chkstk_darwin(v2);
  unsigned int v4 = (char *)&v20[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001FC68(a1, v20);
  uint64_t v5 = v20[0];
  uint64_t v6 = v20[1];
  int64_t v7 = v20[3];
  unint64_t v8 = v20[4];
  int64_t v9 = (unint64_t)(v20[2] + 64) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  if (!v8) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v11 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  unint64_t v12 = v11 | (v7 << 6);
  while (1)
  {
    uint64_t v17 = *(void *)(v5 + 48);
    uint64_t v18 = type metadata accessor for CancellableStoreKey();
    sub_1000A3620(v17 + *(void *)(*(void *)(v18 - 8) + 72) * v12, (uint64_t)v4);
    *(void *)&v4[*(int *)(v2 + 48)] = *(void *)(*(void *)(v5 + 56) + 8 * v12);
    swift_retain();
    AnyCancellable.cancel()();
    uint64_t result = sub_100019994((uint64_t)v4, &qword_10021CD70);
    if (v8) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v13 = v7 + 1;
    if (__OFADD__(v7, 1)) {
      break;
    }
    if (v13 >= v9) {
      return swift_release();
    }
    unint64_t v14 = *(void *)(v6 + 8 * v13);
    int64_t v15 = v7 + 1;
    if (!v14)
    {
      int64_t v15 = v7 + 2;
      if (v7 + 2 >= v9) {
        return swift_release();
      }
      unint64_t v14 = *(void *)(v6 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v7 + 3;
        if (v7 + 3 >= v9) {
          return swift_release();
        }
        unint64_t v14 = *(void *)(v6 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v7 + 4;
          if (v7 + 4 >= v9) {
            return swift_release();
          }
          unint64_t v14 = *(void *)(v6 + 8 * v15);
          if (!v14)
          {
            int64_t v15 = v7 + 5;
            if (v7 + 5 >= v9) {
              return swift_release();
            }
            unint64_t v14 = *(void *)(v6 + 8 * v15);
            if (!v14)
            {
              int64_t v16 = v7 + 6;
              while (v16 < v9)
              {
                unint64_t v14 = *(void *)(v6 + 8 * v16++);
                if (v14)
                {
                  int64_t v15 = v16 - 1;
                  goto LABEL_18;
                }
              }
              return swift_release();
            }
          }
        }
      }
    }
LABEL_18:
    unint64_t v8 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
    int64_t v7 = v15;
  }
  __break(1u);
  return result;
}

uint64_t sub_100098F54()
{
  uint64_t v0 = swift_retain();
  uint64_t v1 = sub_100019FB4(v0);
  swift_release();
  return v1;
}

void sub_100098F98(uint64_t a1, void *a2)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    unsigned int v4 = (void *)Strong;
    if (qword_100218B50 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_10002A10C(v5, (uint64_t)qword_100236A08);
    id v6 = v4;
    id v7 = a2;
    id v8 = v6;
    id v9 = v7;
    id v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = swift_slowAlloc();
      uint64_t v15 = swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 136315394;
      type metadata accessor for UUID();
      sub_10001AA38((unint64_t *)&qword_10021CC60, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
      sub_10001C274(v13, v14, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v12 + 12) = 1024;
      [v9 processIdentifier];

      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "timing out idle xpc transaction: %s from %d", (uint8_t *)v12, 0x12u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    sub_10009921C();
  }
}

void sub_10009921C()
{
  sub_10000DFE0();
  if ((*(unsigned char *)(v0 + OBJC_IVAR____TtC7parsecd16ClientConnection_isActiveListener) & 1) == 0
    && sub_10002A144(*(unsigned int **)(*(void *)(v0 + OBJC_IVAR____TtC7parsecd16ClientConnection_transactionOpen)+ 16), *(void *)(v0 + OBJC_IVAR____TtC7parsecd16ClientConnection_transactionOpen)))
  {
    uint64_t v2 = sub_100098F54();
    if (v2)
    {
      if (*(void *)(*(void *)(v2 + 64) + 32))
      {
        swift_retain();
        sub_1000F0C24();
        swift_release();
      }
      swift_release();
    }
    v28[7] = *(void *)(v0 + OBJC_IVAR____TtC7parsecd16ClientConnection_backgroundQueue);
    uint64_t v3 = type metadata accessor for DispatchTime();
    v28[8] = v28;
    v28[5] = v3;
    uint64_t v4 = *(void *)(v3 - 8);
    __chkstk_darwin(v3);
    sub_100024A64();
    uint64_t v7 = v5 - v6;
    v28[3] = v28;
    __chkstk_darwin(v8);
    id v10 = (char *)v28 - v9;
    static DispatchTime.now()();
    uint64_t v11 = type metadata accessor for DispatchTimeInterval();
    sub_100020C48();
    uint64_t v13 = v12;
    __chkstk_darwin(v14);
    sub_100017DE0();
    void *v1 = 60;
    (*(void (**)(void *, void, uint64_t))(v13 + 104))(v1, enum case for DispatchTimeInterval.seconds(_:), v11);
    + infix(_:_:)();
    sub_100028B20();
    v15();
    int64_t v16 = *(void (**)(char *, uint64_t))(v4 + 8);
    v28[4] = v4 + 8;
    v28[6] = v16;
    v16(v10, v3);
    uint64_t v17 = sub_100023CE4();
    swift_unknownObjectWeakInit();
    v29[4] = sub_1000A24A8;
    v29[5] = v17;
    v29[0] = _NSConcreteStackBlock;
    v29[1] = 1107296256;
    v29[2] = sub_1000085EC;
    v29[3] = &unk_1001FDBE0;
    uint64_t v18 = _Block_copy(v29);
    uint64_t v19 = type metadata accessor for DispatchQoS();
    v28[2] = v28;
    sub_100020C48();
    uint64_t v21 = v20;
    __chkstk_darwin(v22);
    sub_100017CD4();
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v23 = type metadata accessor for DispatchWorkItemFlags();
    v28[1] = v28;
    sub_100020C48();
    uint64_t v25 = v24;
    __chkstk_darwin(v26);
    sub_1000213B0();
    v28[9] = &_swiftEmptyArrayStorage;
    sub_1000A1FB8((unint64_t *)&qword_100219260, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10002572C((uint64_t *)&unk_10021BAF0);
    sub_1000301A0();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
    _Block_release(v18);
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v7, v23);
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v3, v19);
    sub_10000E040();
    v27();
    swift_release();
    swift_release();
  }
  sub_10000DFB8();
}

id sub_100099644()
{
  ObjectType = (objc_class *)swift_getObjectType();
  swift_getObjectType();
  swift_unknownObjectRetain();
  OS_dispatch_source.cancel()();
  swift_unknownObjectRelease();
  if (sub_10002A144(*(unsigned int **)(*(void *)&v0[OBJC_IVAR____TtC7parsecd16ClientConnection_transactionOpen]+ 16), *(void *)&v0[OBJC_IVAR____TtC7parsecd16ClientConnection_transactionOpen]))
  {
    uint64_t v2 = sub_100098F54();
    if (v2)
    {
      if (*(void *)(*(void *)(v2 + 64) + 32))
      {
        swift_retain();
        sub_1000F0C24();
        swift_release();
      }
      swift_release();
    }
  }
  sub_100019EB4(0);
  sub_100099728();
  v4.receiver = v0;
  v4.super_class = ObjectType;
  return objc_msgSendSuper2(&v4, "dealloc");
}

void sub_100099728()
{
  uint64_t v1 = *(os_unfair_lock_s **)(*(void *)(v0 + OBJC_IVAR____TtC7parsecd16ClientConnection_cancellableLock) + 16);
  os_unfair_lock_lock(v1);
  sub_10002845C();
  uint64_t v2 = swift_bridgeObjectRetain();
  sub_100098D50(v2);
  swift_bridgeObjectRelease();
  os_unfair_lock_unlock(v1);
}

uint64_t sub_1000998E0()
{
  return type metadata accessor for ClientConnection(0);
}

void sub_1000998E8()
{
  sub_1000A3D4C();
  uint64_t v2 = *(os_unfair_lock_s **)(*(void *)(v1 + OBJC_IVAR____TtC7parsecd16ClientConnection_cancellableLock) + 16);
  os_unfair_lock_lock(v2);
  swift_beginAccess();
  uint64_t v3 = swift_retain();
  sub_10003BB28(v3, v0, v4, v5, v6, v7, v8, v9, v10, v11);
  swift_endAccess();
  os_unfair_lock_unlock(v2);
}

uint64_t sub_100099970()
{
  sub_1000E6CC4((void (*)(uint64_t *__return_ptr))sub_1000A338C);
  return swift_release();
}

uint64_t sub_1000999C8@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  *a2 = sub_1000BAB4C(a1);
  return swift_endAccess();
}

void sub_100099A30()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = Strong;
    if ((sub_100033310(*(unsigned char **)(*(void *)(Strong + OBJC_IVAR____TtC7parsecd16ClientConnection_transactionOpen)
                                  + 16)) & 1) != 0)
    {
      if (qword_100218B50 != -1) {
        swift_once();
      }
      uint64_t v2 = type metadata accessor for Logger();
      sub_10002A10C(v2, (uint64_t)qword_100236A08);
      uint64_t v3 = Logger.logObject.getter();
      os_log_type_t v4 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v3, v4))
      {
        uint64_t v5 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v5 = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, v4, "Timed out client reconnected, leaving connection intact.", v5, 2u);
        swift_slowDealloc();
      }
      else
      {

        uint64_t v3 = v1;
      }
    }
    else
    {
      swift_retain();
      sub_1000089C8();
      swift_release();
      if (qword_100218B50 != -1) {
        swift_once();
      }
      uint64_t v6 = type metadata accessor for Logger();
      sub_10002A10C(v6, (uint64_t)qword_100236A08);
      uint64_t v3 = v1;
      uint64_t v7 = Logger.logObject.getter();
      os_log_type_t v8 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v7, v8))
      {
        uint64_t v9 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v9 = 67109120;
        [*(id *)((char *)&v3->isa + OBJC_IVAR____TtC7parsecd16ClientConnection_connection) processIdentifier];
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        _os_log_impl((void *)&_mh_execute_header, v7, v8, "Invalidating inactive connection from pid %d", v9, 8u);
        swift_slowDealloc();
      }
      else
      {

        uint64_t v7 = v3;
      }

      [*(id *)((char *)&v3->isa + OBJC_IVAR____TtC7parsecd16ClientConnection_connection) invalidate];
    }
  }
}

void sub_100099CC0()
{
  uint64_t v2 = v0;
  sub_100024344();
  uint64_t v3 = type metadata accessor for UserAgent();
  sub_100020C48();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  os_log_type_t v8 = (char *)v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10002572C(&qword_10021BF30);
  uint64_t v10 = sub_100016544(v9);
  __chkstk_darwin(v10);
  sub_100017DC8();
  if (v0[OBJC_IVAR____TtC7parsecd16ClientConnection_parClientRequiresStateChangeNotifications] != 1) {
    return;
  }
  uint64_t v11 = sub_1000CCB2C(v0);
  if (!v11)
  {
    long long v27 = 0u;
    long long v28 = 0u;
    goto LABEL_9;
  }
  uint64_t v12 = v11;
  v25[1] = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v25[2] = v13;
  AnyHashable.init<A>(_:)();
  sub_100039D58((uint64_t)v26, v12, &v27);
  swift_bridgeObjectRelease();
  sub_100039C5C((uint64_t)v26);
  if (!*((void *)&v28 + 1))
  {
LABEL_9:
    uint64_t v15 = (uint64_t *)&unk_10021BB30;
    int64_t v16 = &v27;
    goto LABEL_10;
  }
  sub_100023FA0(0, (unint64_t *)&qword_10021D040);
  if ((swift_dynamicCast() & 1) == 0) {
    return;
  }
  uint64_t v14 = (void *)v26[0];
  if (!sub_100098F54())
  {

    return;
  }
  sub_100032384();
  if (sub_100027BA4(v1, 1, v3))
  {

    swift_release();
    uint64_t v15 = &qword_10021BF30;
    int64_t v16 = (long long *)v1;
LABEL_10:
    sub_100019994((uint64_t)v16, v15);
    return;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v1, v3);
  sub_100019994(v1, &qword_10021BF30);
  uint64_t v17 = UserAgent.fullString.getter();
  uint64_t v19 = v18;
  uint64_t v20 = sub_100020CAC();
  v21(v20);
  objc_allocWithZone((Class)PARBag);
  id v22 = v14;
  id v23 = sub_10001519C(v22, v17, v19);
  uint64_t v24 = *(void **)&v2[OBJC_IVAR____TtC7parsecd16ClientConnection_remoteObject];
  if (v24)
  {
    [v24 bagDidLoad:v23 error:0];

    swift_release();
  }
  else
  {
    swift_release();
  }
}

void sub_100099FDC(void *a1)
{
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC7parsecd16ClientConnection_parClientRequiresStateChangeNotifications) != 1) {
    return;
  }
  uint64_t v2 = sub_1000CCB2C(a1);
  if (!v2)
  {
    long long v15 = 0u;
    long long v16 = 0u;
    goto LABEL_11;
  }
  uint64_t v3 = v2;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  AnyHashable.init<A>(_:)();
  sub_100039D58((uint64_t)v14, v3, &v15);
  swift_bridgeObjectRelease();
  sub_100039C5C((uint64_t)v14);
  if (!*((void *)&v16 + 1))
  {
LABEL_11:
    sub_100019994((uint64_t)&v15, (uint64_t *)&unk_10021BB30);
    return;
  }
  if ((sub_1000A3D6C() & 1) == 0) {
    return;
  }
  uint64_t v5 = v14[0];
  uint64_t v4 = v14[1];
  uint64_t v6 = *(void **)(v1 + OBJC_IVAR____TtC7parsecd16ClientConnection_remoteObject);
  if (v6)
  {
    NSString v7 = String._bridgeToObjectiveC()();
    [v6 didDownloadResource:v7];
  }
  if (v5 == 0xD00000000000001BLL && v4 == 0x80000001001B61C0)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v8 & 1) == 0) {
      return;
    }
  }
  sub_100023FA0(0, &qword_10021BEB0);
  id v9 = sub_100009C80(0xD000000000000014, 0x80000001001B4C50, 0);
  id v10 = objc_allocWithZone((Class)type metadata accessor for FlusherClient());
  id v11 = FlusherClient.init(connection:)(v9);
  uint64_t v12 = sub_1000A3CF4();
  v13(v12);
}

void sub_10009A244(void *a1)
{
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC7parsecd16ClientConnection_parClientRequiresStateChangeNotifications) != 1) {
    return;
  }
  uint64_t v2 = sub_1000CCB2C(a1);
  if (!v2)
  {
    long long v7 = 0u;
    long long v8 = 0u;
    goto LABEL_8;
  }
  uint64_t v3 = v2;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  AnyHashable.init<A>(_:)();
  sub_100039D58((uint64_t)&v6, v3, &v7);
  swift_bridgeObjectRelease();
  sub_100039C5C((uint64_t)&v6);
  if (!*((void *)&v8 + 1))
  {
LABEL_8:
    sub_100019994((uint64_t)&v7, (uint64_t *)&unk_10021BB30);
    return;
  }
  if (sub_1000A3D6C())
  {
    uint64_t v4 = *(void **)(v1 + OBJC_IVAR____TtC7parsecd16ClientConnection_remoteObject);
    if (v4)
    {
      NSString v5 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v4 didDeleteResource:v5];
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
}

void sub_10009A3D4(void *a1, uint64_t a2, const void *a3)
{
  uint64_t v6 = sub_10002572C(&qword_10021F2D0);
  __chkstk_darwin(v6 - 8);
  uint64_t v41 = (uint64_t)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t BagTask = type metadata accessor for ForceFetchBagTask(0);
  uint64_t v40 = *(void *)(BagTask - 8);
  uint64_t v9 = *(void *)(v40 + 64);
  uint64_t v10 = __chkstk_darwin(BagTask);
  __chkstk_darwin(v10);
  uint64_t v12 = (unint64_t *)((char *)&v37 - v11);
  uint64_t v13 = sub_10002572C(&qword_10021BF30);
  __chkstk_darwin(v13 - 8);
  long long v15 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = type metadata accessor for UserAgent();
  uint64_t v16 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v18 = (char *)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = swift_allocObject();
  v43 = a3;
  uint64_t v44 = v19;
  *(void *)(v19 + 16) = a3;
  _Block_copy(a3);
  unint64_t v20 = sub_100019060(a1, 1);
  if (v20 >= 2)
  {
    uint64_t v38 = (uint64_t)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v39 = a2;
    sub_100032384();
    uint64_t v21 = v42;
    if (sub_100027BA4((uint64_t)v15, 1, v42) == 1)
    {
      sub_100019154(v20);
      sub_100019994((uint64_t)v15, &qword_10021BF30);
      goto LABEL_5;
    }
    uint64_t v23 = v16;
    uint64_t v24 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
    uint64_t v25 = v18;
    v24(v18, v15, v21);
    if (swift_unknownObjectWeakLoadStrong())
    {
      swift_unknownObjectRelease();
      uint64_t v26 = (uint64_t)v12;
      (*(void (**)(char *, char *, uint64_t))(v23 + 16))((char *)v12 + *(int *)(BagTask + 20), v18, v21);
      *uint64_t v12 = v20;
      long long v27 = (unint64_t *)((char *)v12 + *(int *)(BagTask + 24));
      uint64_t v28 = v44;
      *long long v27 = sub_10002FFE4;
      v27[1] = v28;
      uint64_t v29 = type metadata accessor for TaskPriority();
      uint64_t v30 = v21;
      uint64_t v31 = v41;
      sub_10002538C(v41, 1, 1, v29);
      uint64_t v32 = (uint64_t)v12;
      uint64_t v33 = v38;
      sub_1000A3620(v32, v38);
      unint64_t v34 = (*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80);
      os_log_type_t v35 = v25;
      uint64_t v36 = swift_allocObject();
      *(void *)(v36 + 16) = 0;
      *(void *)(v36 + 24) = 0;
      sub_1000A34B0(v33, v36 + v34);
      sub_1000A35D8(v20);
      swift_retain();
      sub_1000A1DC8(v31, (uint64_t)&unk_10021CD50, v36);
      swift_release();
      sub_100019154(v20);
      sub_10003108C(v26, (void (*)(void))type metadata accessor for ForceFetchBagTask);
      (*(void (**)(char *, uint64_t))(v23 + 8))(v35, v30);
      id v22 = v43;
      goto LABEL_6;
    }
    (*(void (**)(char *, uint64_t))(v23 + 8))(v18, v21);
  }
  sub_100019154(v20);
LABEL_5:
  id v22 = v43;
  (*((void (**)(const void *, void, void))v43 + 2))(v43, 0, 0);
LABEL_6:
  swift_release();
  _Block_release(v22);
}

void sub_10009A8C4(void *a1, void *a2, uint64_t a3, void (**a4)(void, void, void, void))
{
  uint64_t v8 = type metadata accessor for Client();
  uint64_t v43 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for UserAgent();
  uint64_t v42 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10002572C(&qword_10021BF30);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  _Block_copy(a4);
  _Block_copy(a4);
  _Block_copy(a4);
  _Block_copy(a4);
  _Block_copy(a4);
  _Block_copy(a4);
  _Block_copy(a4);
  _Block_copy(a4);
  _Block_copy(a4);
  _Block_copy(a4);
  uint64_t v17 = a3;
  unint64_t v18 = sub_100019060(a1, 1);
  uint64_t v19 = v18;
  if (v18 >= 2)
  {
    sub_100032384();
    if (sub_100027BA4((uint64_t)v16, 1, v11))
    {
      sub_100019994((uint64_t)v16, &qword_10021BF30);
      NSString v20 = 0;
    }
    else
    {
      uint64_t v41 = v19;
      uint64_t v21 = v42;
      (*(void (**)(char *, char *, uint64_t))(v42 + 16))(v13, v16, v11);
      sub_100019994((uint64_t)v16, &qword_10021BF30);
      UserAgent.client.getter();
      (*(void (**)(char *, uint64_t))(v21 + 8))(v13, v11);
      uint64_t v19 = v41;
      Client.name.getter();
      (*(void (**)(char *, uint64_t))(v43 + 8))(v10, v8);
      NSString v20 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    [a2 setClientShortName:v20];

    self;
    uint64_t v22 = swift_dynamicCastObjCClass();
    if (v22)
    {
      uint64_t v23 = (void *)v22;
      uint64_t Strong = swift_unknownObjectWeakLoadStrong();
      id v25 = a2;
      char v26 = sub_10009AF58(v23, Strong);
      swift_unknownObjectRelease();
      _Block_copy(a4);
      if (v26) {
        sub_1000A2E08(v23, v19, v17, v17, a4);
      }
      else {
        sub_1000CCF14();
      }

      goto LABEL_13;
    }
    self;
    if (swift_dynamicCastObjCClass())
    {
      _Block_copy(a4);
      id v27 = a2;
      sub_1000D015C();
    }
    else
    {
      self;
      uint64_t v28 = swift_dynamicCastObjCClass();
      if (v28)
      {
        uint64_t v29 = v28;
        _Block_copy(a4);
        id v27 = a2;
        sub_1000D1AD8(v29, v17, (uint64_t)v19, (uint64_t)a4, v30, v31, v32, v33, v40, (uint64_t)v41, v42, v43, v44, v45, v46, v47, v48, v49, v50,
          v51);
      }
      else
      {
        self;
        if (swift_dynamicCastObjCClass())
        {
          _Block_copy(a4);
          id v27 = a2;
          sub_1000D3484();
        }
        else
        {
          self;
          if (swift_dynamicCastObjCClass())
          {
            _Block_copy(a4);
            id v27 = a2;
            sub_1000D57D0();
          }
          else
          {
            self;
            if (swift_dynamicCastObjCClass())
            {
              _Block_copy(a4);
              id v27 = a2;
              sub_1000D80F8();
            }
            else
            {
              self;
              uint64_t v34 = swift_dynamicCastObjCClass();
              if (v34)
              {
                uint64_t v35 = v34;
                _Block_copy(a4);
                id v27 = a2;
                sub_1000DA3A8(v35, v17, (uint64_t)v19, (uint64_t)a4, v36, v37, v38, v39, v40, (uint64_t)v41, v42, v43, v44, v45, v46, v47, v48, v49, v50,
                  v51);
              }
              else
              {
                self;
                if (swift_dynamicCastObjCClass())
                {
                  _Block_copy(a4);
                  id v27 = a2;
                  sub_1000DBC4C();
                }
                else
                {
                  self;
                  if (!swift_dynamicCastObjCClass())
                  {
                    ((void (**)(void, id, void, void))a4)[2](a4, [a2 queryId], 0, 0);
LABEL_13:
                    sub_100019154((unint64_t)v19);
                    goto LABEL_29;
                  }
                  _Block_copy(a4);
                  id v27 = a2;
                  sub_1000DC0AC();
                }
              }
            }
          }
        }
      }
    }
    sub_100019154((unint64_t)v19);

    goto LABEL_29;
  }
  sub_100019154(v18);
  ((void (**)(void, id, void, void))a4)[2](a4, [a2 queryId], 0, 0);
LABEL_29:
  _Block_release(a4);
  _Block_release(a4);
  _Block_release(a4);
  _Block_release(a4);
  _Block_release(a4);
  _Block_release(a4);
  _Block_release(a4);
  _Block_release(a4);
  _Block_release(a4);
  _Block_release(a4);
  _Block_release(a4);
}

uint64_t sub_10009AF58(void *a1, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  sub_100017C74();
  uint64_t v3 = sub_100024344();
  sub_100018148(v3, 0);
  uint64_t v4 = (void *)sub_100016A0C();
  swift_unknownObjectRelease();
  if (!v4) {
    return 0;
  }
  if ([v4 engagementCardGrpcDisabled]) {
    goto LABEL_19;
  }
  id v5 = [a1 queryCommand];
  if (!v5) {
    goto LABEL_19;
  }
  id v6 = v5;
  self;
  uint64_t v7 = swift_dynamicCastObjCClass();
  if (!v7)
  {
    self;
    uint64_t v17 = swift_dynamicCastObjCClass();
    if (v17)
    {
      unint64_t v18 = (void *)v17;
      id v6 = v6;
      id v19 = [v18 card];
      if (v19)
      {
        NSString v20 = v19;
        id v21 = [v19 drilldownMetadata];

        if (v21)
        {
          id v22 = [v21 jsonData];

          if (v22)
          {
            uint64_t v13 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v15 = v23;

            goto LABEL_16;
          }
        }
      }
    }
LABEL_19:

    return 0;
  }
  uint64_t v8 = (void *)v7;
  id v9 = v6;
  id v10 = [v8 drilldownMetadata];
  if (v10)
  {
    uint64_t v11 = v10;
    id v12 = [v10 jsonData];

    if (v12)
    {
      uint64_t v13 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v15 = v14;

LABEL_16:
      sub_1000291B4(v13, v15);
      return 1;
    }
  }

  return 0;
}

void sub_10009B200()
{
  sub_1000A3D4C();
  if (v0) {
    _convertErrorToNSError(_:)();
  }
  uint64_t v1 = sub_10001AA80();
  id v4 = v2;
  v3(v1);
}

void sub_10009B278()
{
  sub_10000DFE0();
  uint64_t v4 = v3;
  unint64_t v37 = v5;
  type metadata accessor for SessionLookupKey();
  sub_10001DCF8();
  __chkstk_darwin(v6);
  sub_100028CA0();
  uint64_t v7 = type metadata accessor for Requestor();
  sub_100020C48();
  uint64_t v9 = v8;
  __chkstk_darwin(v10);
  sub_100017DC8();
  uint64_t v11 = type metadata accessor for Client();
  uint64_t v12 = sub_100016544(v11);
  __chkstk_darwin(v12);
  sub_10001DDC8();
  uint64_t v13 = type metadata accessor for UserAgent();
  sub_100020C48();
  uint64_t v15 = v14;
  __chkstk_darwin(v16);
  sub_100017DE0();
  swift_bridgeObjectRetain();
  uint64_t v36 = v4;
  Client.init(_:)();
  unint64_t v18 = *(void (**)(uint64_t, void, uint64_t))(v9 + 104);
  unint64_t v17 = v9 + 104;
  v18(v0, enum case for Requestor.parsecd(_:), v7);
  UserAgent.init(_:requestor:)();
  if (swift_unknownObjectWeakLoadStrong())
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v2, v1, v13);
    swift_storeEnumTagMultiPayload();
    uint64_t v19 = sub_100081524();
    swift_unknownObjectRelease();
    sub_10003108C(v2, (void (*)(void))type metadata accessor for SessionLookupKey);
    if (v19)
    {
      id v20 = objc_allocWithZone((Class)_CPFeedbackPayload);
      uint64_t v21 = sub_100020CAC();
      sub_100027BCC(v21, v22);
      uint64_t v23 = sub_100020CAC();
      id v25 = sub_100005914(v23, v24);
      if (v25)
      {
        char v26 = v25;
        sub_1000148D0();
        swift_unknownObjectRelease();

LABEL_11:
        (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v1, v13);
        goto LABEL_12;
      }
      if (qword_100218B30 != -1) {
        swift_once();
      }
      uint64_t v32 = type metadata accessor for Logger();
      sub_10002A10C(v32, (uint64_t)qword_1002369A8);
      sub_1000A3DCC();
      uint64_t v28 = Logger.logObject.getter();
      os_log_type_t v33 = static os_log_type_t.error.getter();
      if (sub_100019BAC(v33))
      {
        uint64_t v38 = v1;
        uint64_t v34 = (uint8_t *)sub_100017D90();
        uint64_t v39 = sub_10001AB54();
        *(_DWORD *)uint64_t v34 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v35 = sub_10001C274(v36, v37, &v39);
        sub_10001ED4C(v35);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v28, (os_log_type_t)v0, "Could not construct feedback payload data from '%s'", v34, 0xCu);
        swift_arrayDestroy();
        sub_100017D40();
        sub_100017D40();
        swift_unknownObjectRelease();

        (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v38, v13);
        goto LABEL_12;
      }
      swift_bridgeObjectRelease_n();
      swift_unknownObjectRelease();
LABEL_10:

      goto LABEL_11;
    }
  }
  if (qword_100218B50 != -1) {
    swift_once();
  }
  uint64_t v27 = type metadata accessor for Logger();
  sub_10002A10C(v27, (uint64_t)qword_100236A08);
  sub_1000A3DCC();
  uint64_t v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.error.getter();
  if (!sub_100019BAC(v29))
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_10;
  }
  uint64_t v30 = (uint8_t *)sub_100017D90();
  uint64_t v39 = sub_10001AB54();
  *(_DWORD *)uint64_t v30 = 136315138;
  swift_bridgeObjectRetain();
  uint64_t v31 = sub_10001C274(v36, v17, &v39);
  sub_10001ED4C(v31);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease_n();
  _os_log_impl((void *)&_mh_execute_header, v28, (os_log_type_t)v0, "Could not find session for Connection from '%s'", v30, 0xCu);
  swift_arrayDestroy();
  sub_100017D40();
  sub_100017D40();

  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v1, v13);
LABEL_12:
  sub_10000DFB8();
}

uint64_t sub_10009B9C4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + OBJC_IVAR____TtC7parsecd11ClientState_engagedSuggestionController;
  uint64_t result = sub_10002845C();
  if (*(void *)(v3 + 24))
  {
    sub_10001C20C(v3, (uint64_t)v7);
    uint64_t v5 = v8;
    uint64_t v6 = v9;
    sub_10001B620(v7, v8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 72))(a1, v5, v6);
    return sub_10001CA50((uint64_t)v7);
  }
  return result;
}

void sub_10009BA5C()
{
  uint64_t v2 = v1;
  sub_1000A3D20();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v4 = Strong;
    if (qword_100218B30 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    uint64_t v6 = sub_10001DD88(v5, (uint64_t)qword_1002369A8);
    os_log_type_t v7 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)sub_100023E24();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "registering new receiving listener", v8, 2u);
      sub_100017D40();
    }

    *(unsigned char *)(v2 + OBJC_IVAR____TtC7parsecd16ClientConnection_isActiveListener) = 1;
    *(void *)(v4 + 32) = *(void *)(v2 + OBJC_IVAR____TtC7parsecd16ClientConnection_remoteObject);
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    if (v0)
    {
      sub_100025244();
      v0();
    }
  }
  else
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_10001ED8C();
    sub_10002572C(&qword_100219280);
    uint64_t inited = (__n128 *)swift_initStackObject();
    uint64_t v10 = sub_100025460(inited, (__n128)xmmword_1001A2A20);
    v10[4].n128_u64[1] = (unint64_t)&type metadata for String;
    sub_100018548((uint64_t)v10, 0xD00000000000002FLL);
    Dictionary.init(dictionaryLiteral:)();
    id v11 = objc_allocWithZone((Class)NSError);
    id v12 = sub_10002EB8C();
    if (qword_100218B30 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    uint64_t v14 = (void *)sub_10001DD88(v13, (uint64_t)qword_1002369A8);
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (sub_100019BAC(v15))
    {
      *(_WORD *)sub_100023E24() = 0;
      sub_100016620((void *)&_mh_execute_header, v16, v17, "assembly was missing at teeFeedback time");
      sub_100017D40();
    }

    if (v0)
    {
      swift_errorRetain();
      sub_100030D6C((uint64_t)v12);

      sub_100025244();
      v0();
      swift_errorRelease();
    }
  }
}

void sub_10009BD90(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v3 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v3 = 0;
  }
  id v4 = (id)v3;
  (*(void (**)(uint64_t))(a2 + 16))(a2);
}

void sub_10009BDF4()
{
  sub_1000A3D20();
  if (swift_unknownObjectWeakLoadStrong())
  {
    sub_100081400();
    if (v0)
    {
      sub_100025244();
      v0();
    }
    swift_unknownObjectRelease();
  }
  else if (v0)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_10001ED8C();
    sub_10002572C(&qword_100219280);
    uint64_t inited = (__n128 *)swift_initStackObject();
    uint64_t v2 = sub_100025460(inited, (__n128)xmmword_1001A2A20);
    v2[4].n128_u64[1] = (unint64_t)&type metadata for String;
    sub_100018548((uint64_t)v2, 0xD000000000000018);
    Dictionary.init(dictionaryLiteral:)();
    id v3 = objc_allocWithZone((Class)NSError);
    id v4 = sub_10002EB8C();
    sub_100025244();
    v0();
  }
}

uint64_t sub_10009BFD4()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for Client();
  sub_100020C48();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  sub_100017DC8();
  uint64_t result = sub_100098F54();
  if (result)
  {
    sub_100012EE4();
    Client.type.getter();
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v1, v3);
    uint64_t v8 = ClientType.rawValue.getter();
    if (v8 == ClientType.rawValue.getter()) {
      return swift_release();
    }
    sub_1000BE38C();
    if (*(unsigned char *)(v2 + OBJC_IVAR____TtC7parsecd16ClientConnection_isActiveListener) != 1) {
      return swift_release();
    }
    if (qword_100218B30 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    uint64_t v10 = sub_10001DD88(v9, (uint64_t)qword_1002369A8);
    os_log_type_t v11 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v10, v11))
    {
      id v12 = (_WORD *)sub_100023E24();
      sub_10002E8F0(v12);
      sub_100028E84((void *)&_mh_execute_header, v10, v11, "cleaning up receiving listener after connection was interrupted");
      sub_100017D40();
    }

    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      *(void *)(Strong + 32) = 0;
      swift_unknownObjectRelease();
      swift_release();
      return swift_unknownObjectRelease();
    }
    else
    {
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_10009C188(uint64_t result)
{
  if (result)
  {
    sub_1000A3D20();
    sub_100111B7C();
    v1();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_10009C2B0(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    sub_10002572C(&qword_10021ACB0);
    v3.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  }
  else
  {
    v3.super.Class isa = 0;
  }
  Class isa = v3.super.isa;
  (*(void (**)(uint64_t))(a2 + 16))(a2);
}

void sub_10009C32C(uint64_t a1, uint64_t a2, void (*a3)(void, void))
{
  if (swift_unknownObjectWeakLoadStrong())
  {
    id v11 = [objc_allocWithZone((Class)NSDictionary) init];
    sub_100006DF8();
    sub_1000AAAD0();
    os_log_type_t v7 = v6;
    swift_unknownObjectRelease();
    if (a3)
    {
      id v8 = v11;
      static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)();

      ((void (*)(void *, void, void))a3)(v7, 0, 0);
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_unknownObjectRelease();
    }
  }
  else if (a3)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_10001ED8C();
    id v9 = objc_allocWithZone((Class)NSError);
    id v10 = sub_1000B06A0(v3, v4, 500, 0);
    a3(0, 0);
  }
}

void sub_10009C5F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2)
  {
    v7.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    if (a3)
    {
LABEL_3:
      uint64_t v8 = _convertErrorToNSError(_:)();
      goto LABEL_6;
    }
  }
  else
  {
    v7.super.Class isa = 0;
    if (a3) {
      goto LABEL_3;
    }
  }
  uint64_t v8 = 0;
LABEL_6:
  id v9 = (id)v8;
  (*(void (**)(uint64_t, uint64_t, Class))(a4 + 16))(a4, a1, v7.super.isa);
}

uint64_t sub_10009C6B0()
{
  sub_1000A3D4C();
  if (swift_unknownObjectWeakLoadStrong())
  {
    id v2 = [self defaultManager];
    uint64_t v3 = sub_1000B19C4(v1);
    id v4 = 0;
    swift_unknownObjectRelease();

    if (v0)
    {
LABEL_3:
      id v5 = sub_100030D6C((uint64_t)v4);
      v0(v3, v5);

      swift_errorRelease();
      goto LABEL_6;
    }
  }
  else
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v6 = objc_allocWithZone((Class)NSError);
    uint64_t v7 = sub_1000A3D58();
    id v4 = sub_1000B06A0(v7, v8, v9, 0);
    swift_willThrow();
    uint64_t v3 = 0;
    if (v0) {
      goto LABEL_3;
    }
  }

LABEL_6:

  return swift_errorRelease();
}

uint64_t sub_10009C8A8()
{
  uint64_t result = sub_100098F54();
  if (result)
  {
    uint64_t v1 = result + OBJC_IVAR____TtC7parsecd11ClientState_engagedSuggestionController;
    sub_10002845C();
    if (*(void *)(v1 + 24))
    {
      sub_10001C20C(v1, (uint64_t)v4);
      sub_10001B620(v4, v4[3]);
      uint64_t v2 = sub_100020CAC();
      v3(v2);
      swift_release();
      return sub_10001CA50((uint64_t)v4);
    }
    else
    {
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_10009CAA4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t result = sub_100098F54();
  if (result)
  {
    uint64_t v5 = result + OBJC_IVAR____TtC7parsecd11ClientState_engagedSuggestionController;
    sub_10002845C();
    if (*(void *)(v5 + 24))
    {
      sub_10001C20C(v5, (uint64_t)v8);
      sub_10001B620(v8, v8[3]);
      if (a3) {
        [a3 intValue];
      }
      uint64_t v6 = sub_100020CAC();
      v7(v6);
      swift_release();
      return sub_10001CA50((uint64_t)v8);
    }
    else
    {
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_10009CC28(void *a1, void *a2)
{
  return sub_10009CE50(a1, a2, (void (*)(void))sub_10009CC44);
}

void sub_10009CC44(uint64_t a1)
{
  if (a1)
  {
    swift_errorRetain();
    if (qword_100218B18 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    sub_10002A10C(v1, (uint64_t)qword_100236960);
    swift_errorRetain();
    swift_errorRetain();
    oslog = Logger.logObject.getter();
    os_log_type_t v2 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v2))
    {
      uint64_t v3 = (uint8_t *)swift_slowAlloc();
      uint64_t v7 = swift_slowAlloc();
      *(_DWORD *)uint64_t v3 = 136315138;
      swift_getErrorValue();
      uint64_t v4 = Error.localizedDescription.getter();
      sub_10001C274(v4, v5, &v7);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, oslog, v2, "ECC: Failed to add engagedResult %s", v3, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
}

uint64_t sub_10009CE50(void *a1, void *a2, void (*a3)(void))
{
  sub_10009D10C(a2, (uint64_t)&v14);
  if (v15)
  {
    sub_10001C1AC(&v14, (uint64_t)v16);
    if (a1) {
      unint64_t v5 = a1;
    }
    else {
      unint64_t v5 = _swiftEmptyArrayStorage;
    }
    *(void *)&long long v14 = _swiftEmptyArrayStorage;
    uint64_t v6 = v5[2];
    if (v6)
    {
      sub_100023FA0(0, &qword_1002199B0);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v7 = v5 + 5;
      do
      {
        sub_100027BCC(*(v7 - 1), *v7);
        if (PAREngagedResult.init(encoded:)())
        {
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
        v7 += 2;
        --v6;
      }
      while (v6);
      swift_bridgeObjectRelease();
      unint64_t v8 = v14;
    }
    else
    {
      swift_bridgeObjectRetain();
      unint64_t v8 = (unint64_t)_swiftEmptyArrayStorage;
    }
    swift_bridgeObjectRelease();
    if (v8 >> 62)
    {
      sub_10002E7A0();
      uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v13) {
        goto LABEL_18;
      }
    }
    else if (*(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_18:
      sub_10001B620(v16, v16[3]);
      uint64_t v11 = sub_10002EA78();
      v12(v11);
      swift_bridgeObjectRelease();
      return sub_10001CA50((uint64_t)v16);
    }
    swift_bridgeObjectRelease();
    if (a3)
    {
      sub_100025244();
      a3();
    }
    return sub_10001CA50((uint64_t)v16);
  }
  uint64_t result = sub_100019994((uint64_t)&v14, &qword_10021CD08);
  if (a3)
  {
    sub_1000A27CC();
    sub_100024A30();
    unsigned char *v10 = 1;
    sub_100025244();
    a3();
    return swift_errorRelease();
  }
  return result;
}

double sub_10009D10C@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = sub_100019060(a1, 1);
  unint64_t v4 = v3;
  if (v3 >= 2)
  {
    uint64_t v5 = v3 + OBJC_IVAR____TtC7parsecd11ClientState_engagedSuggestionController;
    swift_beginAccess();
    sub_1000A2AAC(v5, (uint64_t)&v11);
    sub_100019154(v4);
    if (v12)
    {
      sub_10001C1AC(&v11, a2);
      return result;
    }
    sub_100019994((uint64_t)&v11, &qword_10021CD08);
  }
  else
  {
    sub_100019154(v3);
  }
  if (qword_100218B50 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  sub_10002A10C(v7, (uint64_t)qword_100236A08);
  unint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v8, v9))
  {
    id v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "State is not ready", v10, 2u);
    swift_slowDealloc();
  }

  *(void *)(a2 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return result;
}

uint64_t sub_10009D360(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[15] = a4;
  v5[16] = v4;
  v5[13] = a2;
  v5[14] = a3;
  v5[12] = a1;
  return sub_1000270D0((uint64_t)sub_10009D380);
}

void sub_10009D380()
{
  uint64_t v35 = v0;
  uint64_t v1 = v0;
  sub_10009D10C(*(void **)(v0 + 120), v0 + 56);
  if (!*(void *)(v0 + 80))
  {
    sub_100019994(v0 + 56, &qword_10021CD08);
    goto LABEL_27;
  }
  os_log_type_t v33 = (void *)(v0 + 16);
  sub_10001C1AC((long long *)(v0 + 56), v0 + 16);
  if (qword_100218B50 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10002A10C(v2, (uint64_t)qword_100236A08);
  unint64_t v3 = (void *)Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (sub_100017D10(v4))
  {
    uint64_t v5 = *(void *)(v0 + 112);
    uint64_t v6 = (uint8_t *)sub_100017D90();
    *(_DWORD *)uint64_t v6 = 134217984;
    *(void *)(v0 + 56) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_10002E728();
    _os_log_impl(v7, v8, v9, v10, v6, 0xCu);
    sub_100017D40();
  }
  uint64_t v11 = *(void *)(v0 + 112);

  uint64_t v12 = *(void *)(v0 + 40);
  uint64_t v13 = *(void *)(v0 + 48);
  sub_10001B620(v33, v12);
  if ((v11 & 0x8000000000000000) == 0)
  {
    unint64_t v14 = (*(uint64_t (**)(void, void, void, uint64_t, uint64_t))(v13 + 24))(*(void *)(v0 + 96), *(void *)(v0 + 104), *(void *)(v0 + 112), v12, v13);
    swift_bridgeObjectRetain_n();
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.debug.getter();
    unint64_t v17 = v14 >> 62;
    if (!os_log_type_enabled(v15, v16))
    {
      swift_bridgeObjectRelease_n();
      goto LABEL_13;
    }
    uint64_t v13 = sub_100017D90();
    *(_DWORD *)uint64_t v13 = 134217984;
    if (v17) {
      goto LABEL_31;
    }
    uint64_t v18 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
    while (1)
    {
      swift_bridgeObjectRelease();
      *(void *)(v1 + 56) = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Fetched %ld recent results", (uint8_t *)v13, 0xCu);
      sub_100017D40();
LABEL_13:

      if (v17)
      {
        swift_bridgeObjectRetain();
        uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v19) {
          goto LABEL_26;
        }
      }
      else
      {
        uint64_t v19 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (!v19) {
          goto LABEL_26;
        }
      }
      uint64_t v34 = _swiftEmptyArrayStorage;
      uint64_t v15 = &v34;
      sub_1000EE544();
      if ((v19 & 0x8000000000000000) == 0) {
        break;
      }
      __break(1u);
LABEL_31:
      swift_bridgeObjectRetain();
      uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    uint64_t v20 = 0;
    uint64_t v21 = v34;
    unint64_t v22 = v14 & 0xC000000000000001;
    unint64_t v23 = v14;
    do
    {
      if (v22) {
        id v24 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v24 = *(id *)(v14 + 8 * v20 + 32);
      }
      id v25 = v24;
      uint64_t v26 = PAREngagedResult.encoded()();
      uint64_t v28 = v27;

      uint64_t v34 = v21;
      unint64_t v29 = v21[2];
      if (v29 >= v21[3] >> 1)
      {
        sub_100029560();
        uint64_t v21 = v34;
      }
      ++v20;
      v21[2] = v29 + 1;
      uint64_t v30 = &v21[2 * v29];
      v30[4] = v26;
      v30[5] = v28;
      unint64_t v14 = v23;
    }
    while (v19 != v20);
LABEL_26:
    swift_bridgeObjectRelease();
    sub_10001CA50((uint64_t)v33);
LABEL_27:
    sub_100029F4C();
    __asm { BRAA            X2, X16 }
  }
  sub_100024270();
  sub_100025974();
  sub_100029F4C();
}

uint64_t sub_10009D7FC(int a1, uint64_t a2, void *a3, void *aBlock, void *a5)
{
  v5[2] = a3;
  v5[3] = a5;
  _OWORD v5[4] = _Block_copy(aBlock);
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v11 = v10;
  v5[5] = v10;
  id v12 = a3;
  a5;
  uint64_t v13 = (void *)swift_task_alloc();
  v5[6] = v13;
  *uint64_t v13 = v5;
  v13[1] = sub_10009D8F0;
  return sub_10009D360(v9, v11, a2, (uint64_t)v12);
}

uint64_t sub_10009D8F0()
{
  sub_100019BA0();
  uint64_t v2 = v1;
  sub_100026880();
  uint64_t v4 = v3;
  uint64_t v6 = v5[4];
  uint64_t v7 = (void *)v5[3];
  os_log_t v8 = (void *)v5[2];
  uint64_t v9 = *v0;
  sub_10001DD38();
  void *v10 = v9;
  swift_task_dealloc();
  swift_bridgeObjectRelease();

  if (v6)
  {
    if (v2)
    {
      v11.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
    }
    else
    {
      v11.super.Class isa = 0;
    }
    id v12 = *(const void **)(v4 + 32);
    uint64_t v13 = sub_10001AA80();
    v14(v13);
    _Block_release(v12);
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  sub_100017DBC();
  return v15();
}

uint64_t sub_10009DA7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10002572C(&qword_10021F2D0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for TaskPriority();
  sub_10002538C((uint64_t)v6, 1, 1, v7);
  os_log_t v8 = (void *)swift_allocObject();
  v8[2] = 0;
  v8[3] = 0;
  void v8[4] = a1;
  v8[5] = a2;
  uint64_t v9 = (void *)swift_allocObject();
  v9[2] = 0;
  v9[3] = 0;
  v9[4] = &unk_10021CC88;
  v9[5] = v8;
  sub_1000A2198((uint64_t)v6, (uint64_t)&unk_10021CC98, (uint64_t)v9);
  return swift_release();
}

uint64_t sub_10009DB80(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void (*a5)(uint64_t))
{
  sub_10009D10C(a4, (uint64_t)&v25);
  if (v26)
  {
    sub_10001C1AC(&v25, (uint64_t)v27);
    uint64_t v9 = v28;
    uint64_t v10 = v29;
    sub_10001B620(v27, v28);
    if (a3 < 0) {
      goto LABEL_23;
    }
    unint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 32))(a1, a2, a3, v9, v10);
    unint64_t v12 = v11;
    if (a5)
    {
      if (v11 >> 62)
      {
        uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
        if (v13) {
          goto LABEL_6;
        }
      }
      else
      {
        uint64_t v13 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v13)
        {
LABEL_6:
          id v24 = a5;
          *(void *)&long long v25 = _swiftEmptyArrayStorage;
          sub_1000EE544();
          if ((v13 & 0x8000000000000000) == 0)
          {
            uint64_t v14 = 0;
            uint64_t v15 = v25;
            do
            {
              if ((v12 & 0xC000000000000001) != 0) {
                id v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
              }
              else {
                id v16 = *(id *)(v12 + 8 * v14 + 32);
              }
              uint64_t v17 = v16;
              uint64_t v18 = PAREngagedResult.encoded()();
              uint64_t v20 = v19;

              *(void *)&long long v25 = v15;
              unint64_t v21 = *(void *)(v15 + 16);
              if (v21 >= *(void *)(v15 + 24) >> 1)
              {
                sub_100029560();
                uint64_t v15 = v25;
              }
              ++v14;
              *(void *)(v15 + 16) = v21 + 1;
              uint64_t v22 = v15 + 16 * v21;
              *(void *)(v22 + 32) = v18;
              *(void *)(v22 + 40) = v20;
            }
            while (v13 != v14);
            swift_bridgeObjectRelease();
            v24(v15);
            goto LABEL_20;
          }
          __break(1u);
LABEL_23:
          sub_100024270();
          uint64_t result = sub_100025974();
          __break(1u);
          return result;
        }
      }
      swift_bridgeObjectRelease();
      a5((uint64_t)_swiftEmptyArrayStorage);
    }
LABEL_20:
    swift_bridgeObjectRelease();
    return sub_10001CA50((uint64_t)v27);
  }
  uint64_t result = sub_100019994((uint64_t)&v25, &qword_10021CD08);
  if (a5) {
    return ((uint64_t (*)(void))a5)(0);
  }
  return result;
}

void sub_10009DE9C(uint64_t a1, uint64_t a2)
{
  if (a1) {
    v3.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  }
  else {
    v3.super.Class isa = 0;
  }
  Class isa = v3.super.isa;
  (*(void (**)(uint64_t))(a2 + 16))(a2);
}

void sub_10009DF08(void *a1, void *a2, void (*a3)(void))
{
  sub_10009D10C(a2, (uint64_t)&v16);
  if (v17)
  {
    sub_10001C1AC(&v16, (uint64_t)v18);
    if (a1) {
      uint64_t v5 = a1;
    }
    else {
      uint64_t v5 = _swiftEmptyArrayStorage;
    }
    *(void *)&long long v16 = _swiftEmptyArrayStorage;
    uint64_t v6 = v5[2];
    if (v6)
    {
      sub_100023FA0(0, &qword_1002199B0);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v7 = v5 + 5;
      do
      {
        sub_100027BCC(*(v7 - 1), *v7);
        if (PAREngagedResult.init(encoded:)())
        {
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
        v7 += 2;
        --v6;
      }
      while (v6);
      swift_bridgeObjectRelease();
      unint64_t v8 = v16;
    }
    else
    {
      swift_bridgeObjectRetain();
      unint64_t v8 = (unint64_t)_swiftEmptyArrayStorage;
    }
    swift_bridgeObjectRelease();
    if (v8 >> 62)
    {
      sub_10002E7A0();
      uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v15) {
        goto LABEL_18;
      }
    }
    else if (*(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_18:
      sub_10001B620(v18, v18[3]);
      uint64_t v13 = sub_10002EA78();
      v14(v13);
      swift_bridgeObjectRelease();
LABEL_22:
      sub_10001CA50((uint64_t)v18);
      return;
    }
    swift_bridgeObjectRelease();
    if (a3)
    {
      sub_100025244();
      a3();
    }
    goto LABEL_22;
  }
  sub_100019994((uint64_t)&v16, &qword_10021CD08);
  if (a3)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_10001ED8C();
    sub_10002572C(&qword_100219280);
    uint64_t inited = (__n128 *)swift_initStackObject();
    uint64_t v10 = sub_100025460(inited, (__n128)xmmword_1001A2A20);
    v10[4].n128_u64[1] = (unint64_t)&type metadata for String;
    sub_100018548((uint64_t)v10, 0xD000000000000022);
    Dictionary.init(dictionaryLiteral:)();
    id v11 = objc_allocWithZone((Class)NSError);
    id v12 = sub_1000298D0();
    sub_100025244();
    a3();
  }
}

uint64_t sub_10009E284()
{
  sub_1000A3D4C();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v3 = sub_10007E168();
    uint64_t result = swift_unknownObjectRelease();
    if (v3)
    {
      sub_10004FEFC(v1, v0);
      return swift_unknownObjectRelease();
    }
  }
  return result;
}

uint64_t sub_10009E388()
{
  sub_1000A3D20();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    if (v0)
    {
      sub_100017C74();
      sub_100018148(0, 0);
      uint64_t v2 = (void *)sub_100016A0C();
      swift_unknownObjectRelease();
      if (v2 && (id v3 = [v2 resources], v2, v3))
      {
        uint64_t v4 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
      }
      else
      {
        uint64_t v4 = 0;
      }
      v0(v4);
      swift_unknownObjectRelease();
      return swift_bridgeObjectRelease();
    }
    else
    {
      return swift_unknownObjectRelease();
    }
  }
  else if (v0)
  {
    return ((uint64_t (*)(void))v0)(0);
  }
  return result;
}

void sub_10009E588()
{
}

void sub_10009E5B8(uint64_t a1, uint64_t a2)
{
  if (a1) {
    v3.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  }
  else {
    v3.super.Class isa = 0;
  }
  Class isa = v3.super.isa;
  (*(void (**)(uint64_t))(a2 + 16))(a2);
}

uint64_t sub_10009E640()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F) {
    return swift_updateClassMetadata2();
  }
  return result;
}

void sub_10009E734(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v67 = a3;
  uint64_t v5 = type metadata accessor for PegasusContext(0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v62 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Context = type metadata accessor for Apple_Parsec_Search_PegasusQueryContext();
  uint64_t v64 = *(void *)(Context - 8);
  __chkstk_darwin(Context);
  uint64_t v10 = (char *)&v62 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100218B50 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  sub_10002A10C(v11, (uint64_t)qword_100236A08);
  id v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  BOOL v14 = os_log_type_enabled(v12, v13);
  BOOL v65 = v10;
  uint64_t v66 = Context;
  if (v14)
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 134217984;
    v73[0] = ClientType.rawValue.getter();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Received QueryContext request for %lu", v15, 0xCu);
    swift_slowDealloc();
  }

  uint64_t v16 = ClientType.rawValue.getter();
  if (v16 == ClientType.rawValue.getter() && swift_unknownObjectWeakLoadStrong())
  {
    sub_10007E6FC();
    BOOL v17 = sub_100079ADC();
    swift_unknownObjectRelease();
    if (v17)
    {
      uint64_t v18 = self;
      uint64_t v19 = @"com.apple.parsecd.contextCacheUpdate";
      id v20 = [v18 defaultCenter];
      type metadata accessor for NotificationBarrier();
      swift_allocObject();
      uint64_t v68 = sub_100037A44(v19, v20, (uint64_t)sub_10009F3BC, 0);
      swift_unknownObjectRelease();
      goto LABEL_11;
    }
    swift_unknownObjectRelease();
  }
  uint64_t v68 = 0;
LABEL_11:
  uint64_t v21 = a2 + OBJC_IVAR____TtC7parsecd16ClientConnection_assembly;
  if (swift_unknownObjectWeakLoadStrong())
  {
    id v22 = [self defaultCenter];
    swift_unknownObjectRelease();
    [v22 postNotificationName:@"com.apple.parsecd.performedSearch" object:0];
  }
  unint64_t v23 = *(void **)(a2 + OBJC_IVAR____TtC7parsecd16ClientConnection_connection);
  NSString v24 = String._bridgeToObjectiveC()();
  id v25 = [v23 valueForEntitlement:v24];

  if (v25)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v71 = 0u;
    long long v72 = 0u;
  }
  sub_100085EFC((uint64_t)&v71, (uint64_t)v73, (uint64_t *)&unk_10021BB30);
  if (!v74)
  {
    sub_100019994((uint64_t)v73, (uint64_t *)&unk_10021BB30);
    goto LABEL_21;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_21:
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Found no suitable value for application identifier entitlement", v31, 2u);
      swift_slowDealloc();
    }

    sub_1000A27CC();
    swift_allocError();
    *uint64_t v32 = 2;
    os_log_type_t v33 = (void *)_convertErrorToNSError(_:)();
    uint64_t v34 = (void (**)(void, void, void))v67;
    goto LABEL_38;
  }
  unint64_t v26 = v70;
  uint64_t v63 = v69;
  NSString v27 = String._bridgeToObjectiveC()();
  id v28 = [v23 valueForEntitlement:v27];

  if (v28)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v71 = 0u;
    long long v72 = 0u;
  }
  sub_100085EFC((uint64_t)&v71, (uint64_t)v73, (uint64_t *)&unk_10021BB30);
  if (!v74)
  {
    sub_100019994((uint64_t)v73, (uint64_t *)&unk_10021BB30);
    goto LABEL_33;
  }
  if ((swift_dynamicCast() & 1) == 0 || (v69 & 1) == 0)
  {
LABEL_33:
    swift_bridgeObjectRetain();
    uint64_t v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v39, v40))
    {
      uint64_t v41 = (uint8_t *)swift_slowAlloc();
      v73[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v41 = 136315138;
      swift_bridgeObjectRetain();
      *(void *)&long long v71 = sub_10001C274(v63, v26, v73);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      uint64_t v42 = "QueryContext Request denied for unauthorized client %s: missing context entitlement";
      goto LABEL_35;
    }
LABEL_36:

    swift_bridgeObjectRelease_n();
    goto LABEL_37;
  }
  swift_bridgeObjectRetain();
  uint64_t v35 = sub_1000598AC(v63, v26);
  char v37 = v36;
  swift_bridgeObjectRelease();
  if ((v37 & 1) != 0 || (uint64_t v38 = ClientType.rawValue.getter(), v38 == ClientType.rawValue.getter()))
  {
    swift_bridgeObjectRetain();
    uint64_t v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v39, v40))
    {
      uint64_t v41 = (uint8_t *)swift_slowAlloc();
      v73[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v41 = 136315138;
      swift_bridgeObjectRetain();
      *(void *)&long long v71 = sub_10001C274(v63, v26, v73);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      uint64_t v42 = "Request for QueryContext denied for unrecognized client: %s";
LABEL_35:
      _os_log_impl((void *)&_mh_execute_header, v39, v40, v42, v41, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

LABEL_37:
      uint64_t v34 = (void (**)(void, void, void))v67;
      sub_1000A27CC();
      swift_allocError();
      unsigned char *v43 = 2;
      os_log_type_t v33 = (void *)_convertErrorToNSError(_:)();
LABEL_38:
      ((void (**)(void, void, void *))v34)[2](v34, 0, v33);

      swift_errorRelease();
      swift_release();
      goto LABEL_39;
    }
    goto LABEL_36;
  }
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v45 = Strong;
    uint64_t v62 = *(void *)(v21 + 8);
    if (v68)
    {
      swift_retain();
      sub_100037B00(100);
      swift_release();
    }
    uint64_t v46 = ClientType.rawValue.getter();
    if (v46 == ClientType.rawValue.getter()) {
      uint64_t v47 = a1;
    }
    else {
      uint64_t v47 = v35;
    }
    sub_100023FDC((uint64_t)v7);
    uint64_t v48 = (uint64_t)v65;
    sub_1000F5CD0(v47, v45, v62, (uint64_t)v65);
    sub_10003108C((uint64_t)v7, (void (*)(void))type metadata accessor for PegasusContext);
    sub_10001AA38(&qword_10021CCF0, (void (*)(uint64_t))&type metadata accessor for Apple_Parsec_Search_PegasusQueryContext);
    uint64_t v49 = v66;
    uint64_t v55 = Message.serializedData(partial:)();
    unint64_t v57 = v56;
    (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v48, v49);
    swift_bridgeObjectRetain();
    char v58 = Logger.logObject.getter();
    os_log_type_t v59 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v58, v59))
    {
      unint64_t v60 = (uint8_t *)swift_slowAlloc();
      v73[0] = swift_slowAlloc();
      *(_DWORD *)unint64_t v60 = 136315138;
      swift_bridgeObjectRetain();
      *(void *)&long long v71 = sub_10001C274(v63, v26, v73);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v58, v59, "Sending QueryContext data to %s", v60, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v34 = (void (**)(void, void, void))v67;
    sub_100027BCC(v55, v57);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    ((void (**)(void, Class, void))v34)[2](v34, isa, 0);

    swift_release();
    sub_1000291B4(v55, v57);
    sub_1000291B4(v55, v57);
    swift_unknownObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v50 = Logger.logObject.getter();
    os_log_type_t v51 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v50, v51))
    {
      uint64_t v52 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v52 = 0;
      _os_log_impl((void *)&_mh_execute_header, v50, v51, "Couldn't retain assembly", v52, 2u);
      swift_slowDealloc();
    }

    sub_1000A27CC();
    swift_allocError();
    *uint64_t v53 = 1;
    uint64_t v54 = (void *)_convertErrorToNSError(_:)();
    uint64_t v34 = (void (**)(void, void, void))v67;
    (*(void (**)(uint64_t, void, void *))(v67 + 16))(v67, 0, v54);

    swift_release();
    swift_errorRelease();
  }
LABEL_39:
  _Block_release(v34);
}

BOOL sub_10009F3BC()
{
  uint64_t v0 = sub_10002572C((uint64_t *)&unk_10021CCF8);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)v15 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for ContextUpdate(0);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  unint64_t v8 = (char *)v15 - v7;
  uint64_t v9 = Notification.userInfo.getter();
  if (!v9)
  {
    long long v17 = 0u;
    long long v18 = 0u;
    goto LABEL_6;
  }
  uint64_t v10 = v9;
  v15[1] = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v15[2] = v11;
  AnyHashable.init<A>(_:)();
  sub_100039D58((uint64_t)v16, v10, &v17);
  swift_bridgeObjectRelease();
  sub_100039C5C((uint64_t)v16);
  if (!*((void *)&v18 + 1))
  {
LABEL_6:
    sub_100019994((uint64_t)&v17, (uint64_t *)&unk_10021BB30);
    sub_10002538C((uint64_t)v2, 1, 1, v3);
    goto LABEL_7;
  }
  int v12 = swift_dynamicCast();
  sub_10002538C((uint64_t)v2, v12 ^ 1u, 1, v3);
  if (sub_100027BA4((uint64_t)v2, 1, v3) == 1)
  {
LABEL_7:
    sub_100019994((uint64_t)v2, (uint64_t *)&unk_10021CCF8);
    return 0;
  }
  sub_1000A34B0((uint64_t)v2, (uint64_t)v8);
  sub_1000A34B0((uint64_t)v8, (uint64_t)v6);
  BOOL v13 = swift_getEnumCaseMultiPayload() == 2;
  sub_10003108C((uint64_t)v6, (void (*)(void))type metadata accessor for ContextUpdate);
  return v13;
}

void sub_10009F67C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 >> 60 == 15)
  {
    Class isa = 0;
    if (a3)
    {
LABEL_3:
      uint64_t v7 = _convertErrorToNSError(_:)();
      goto LABEL_6;
    }
  }
  else
  {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    if (a3) {
      goto LABEL_3;
    }
  }
  uint64_t v7 = 0;
LABEL_6:
  id v8 = (id)v7;
  (*(void (**)(uint64_t, Class))(a4 + 16))(a4, isa);
}

void sub_10009F714(uint64_t a1, void (**a2)(void, void, void))
{
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a2;
  _Block_copy(a2);
  if (qword_100218B50 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_10002A10C(v5, (uint64_t)qword_100236A08);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    id v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Received request for Bag data", v8, 2u);
    swift_slowDealloc();
  }

  uint64_t v9 = *(void **)(a1 + OBJC_IVAR____TtC7parsecd16ClientConnection_connection);
  NSString v10 = String._bridgeToObjectiveC()();
  id v11 = [v9 valueForEntitlement:v10];

  if (v11)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v32 = 0u;
    long long v33 = 0u;
  }
  sub_100085EFC((uint64_t)&v32, (uint64_t)v34, (uint64_t *)&unk_10021BB30);
  if (v35)
  {
    int v12 = swift_dynamicCast();
    if (v12) {
      uint64_t v13 = v30;
    }
    else {
      uint64_t v13 = 0;
    }
    if (v12) {
      uint64_t v14 = v31;
    }
    else {
      uint64_t v14 = 0;
    }
  }
  else
  {
    sub_100019994((uint64_t)v34, (uint64_t *)&unk_10021BB30);
    uint64_t v13 = 0;
    uint64_t v14 = 0;
  }
  NSString v15 = String._bridgeToObjectiveC()();
  id v16 = [v9 valueForEntitlement:v15];

  if (v16)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v32 = 0u;
    long long v33 = 0u;
  }
  sub_100085EFC((uint64_t)&v32, (uint64_t)v34, (uint64_t *)&unk_10021BB30);
  if (!v35)
  {
    sub_100019994((uint64_t)v34, (uint64_t *)&unk_10021BB30);
    goto LABEL_25;
  }
  if ((swift_dynamicCast() & 1) == 0 || (v30 & 1) == 0)
  {
LABEL_25:
    swift_bridgeObjectRetain();
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      *(void *)&long long v32 = swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 136315138;
      v34[0] = v13;
      v34[1] = v14;
      swift_bridgeObjectRetain();
      sub_10002572C(&qword_10021D050);
      uint64_t v22 = String.init<A>(describing:)();
      v34[0] = sub_10001C274(v22, v23, (uint64_t *)&v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Bag Data Request denied for unauthorized client %s: missing context entitlement", v21, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    sub_1000A27CC();
    swift_allocError();
    char v25 = 2;
LABEL_29:
    *NSString v24 = v25;
    unint64_t v26 = (void *)_convertErrorToNSError(_:)();
    ((void (**)(void, void, void *))a2)[2](a2, 0, v26);

    swift_errorRelease();
    goto LABEL_30;
  }
  swift_bridgeObjectRelease();
  if (!swift_unknownObjectWeakLoadStrong())
  {
    NSString v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Couldn't retain assembly", v29, 2u);
      swift_slowDealloc();
    }

    sub_1000A27CC();
    swift_allocError();
    char v25 = 1;
    goto LABEL_29;
  }
  sub_100017C74();
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = sub_1000A2A84;
  *(void *)(v17 + 24) = v4;
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = sub_1000A2A84;
  *(void *)(v18 + 24) = v4;
  swift_retain_n();
  sub_100102AE8(0, (void (*)(id))sub_1000A2A8C, v17, (uint64_t)sub_1000A2A94, v18);
  swift_release();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
LABEL_30:
  swift_release();
  _Block_release(a2);
}

uint64_t sub_10009FCF0(void *a1, void (*a2)(uint64_t, unint64_t, uint64_t))
{
  uint64_t v3 = sub_1000CCE5C(a1);
  if (v4 >> 60 == 15)
  {
    if (qword_100218B50 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_10002A10C(v5, (uint64_t)qword_100236A08);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v6, v7))
    {
      id v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Couldn't construct bag data", v8, 2u);
      swift_slowDealloc();
    }

    sub_1000A27CC();
    uint64_t v9 = swift_allocError();
    unsigned char *v10 = 3;
    a2(0, 0xF000000000000000, v9);
    return swift_errorRelease();
  }
  else
  {
    uint64_t v12 = v3;
    unint64_t v13 = v4;
    if (qword_100218B50 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_10002A10C(v14, (uint64_t)qword_100236A08);
    NSString v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Sending Bag data", v17, 2u);
      swift_slowDealloc();
    }

    sub_100027BCC(v12, v13);
    a2(v12, v13, 0);
    sub_10000A330(v12, v13);
    return sub_10000A330(v12, v13);
  }
}

uint64_t sub_10009FF58(uint64_t a1, void (*a2)(void, unint64_t, uint64_t))
{
  if (qword_100218B50 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_10002A10C(v3, (uint64_t)qword_100236A08);
  swift_errorRetain();
  swift_errorRetain();
  unint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315138;
    swift_getErrorValue();
    uint64_t v7 = Error.localizedDescription.getter();
    sub_10001C274(v7, v8, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "failed to vend bag: %s", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  sub_1000A27CC();
  uint64_t v9 = swift_allocError();
  unsigned char *v10 = 1;
  a2(0, 0xF000000000000000, v9);
  return swift_errorRelease();
}

void sub_1000A018C(uint64_t a1, void (**a2)(void, void, void))
{
  if (qword_100218B50 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_10002A10C(v4, (uint64_t)qword_100236A08);
  os_log_type_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Received request for Device Setup State", v7, 2u);
    swift_slowDealloc();
  }

  unint64_t v8 = *(void **)(a1 + OBJC_IVAR____TtC7parsecd16ClientConnection_connection);
  NSString v9 = String._bridgeToObjectiveC()();
  id v10 = [v8 valueForEntitlement:v9];

  if (v10)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v34 = 0u;
    long long v35 = 0u;
  }
  sub_100085EFC((uint64_t)&v34, (uint64_t)v36, (uint64_t *)&unk_10021BB30);
  if (v37)
  {
    int v11 = swift_dynamicCast();
    if (v11) {
      uint64_t v12 = v32;
    }
    else {
      uint64_t v12 = 0;
    }
    if (v11) {
      uint64_t v13 = v33;
    }
    else {
      uint64_t v13 = 0;
    }
  }
  else
  {
    sub_100019994((uint64_t)v36, (uint64_t *)&unk_10021BB30);
    uint64_t v12 = 0;
    uint64_t v13 = 0;
  }
  NSString v14 = String._bridgeToObjectiveC()();
  id v15 = [v8 valueForEntitlement:v14];

  if (v15)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v34 = 0u;
    long long v35 = 0u;
  }
  sub_100085EFC((uint64_t)&v34, (uint64_t)v36, (uint64_t *)&unk_10021BB30);
  if (!v37)
  {
    sub_100019994((uint64_t)v36, (uint64_t *)&unk_10021BB30);
    goto LABEL_30;
  }
  if ((swift_dynamicCast() & 1) == 0 || (v32 & 1) == 0)
  {
LABEL_30:
    swift_bridgeObjectRetain();
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      unint64_t v23 = (uint8_t *)swift_slowAlloc();
      *(void *)&long long v34 = swift_slowAlloc();
      *(_DWORD *)unint64_t v23 = 136315138;
      v36[0] = v12;
      v36[1] = v13;
      swift_bridgeObjectRetain();
      sub_10002572C(&qword_10021D050);
      uint64_t v24 = String.init<A>(describing:)();
      v36[0] = sub_10001C274(v24, v25, (uint64_t *)&v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Request for device setup state denied for unauthorized client %s: missing context entitlement", v23, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    sub_1000A27CC();
    swift_allocError();
    char v27 = 2;
LABEL_34:
    *unint64_t v26 = v27;
    os_log_type_t v28 = (void *)_convertErrorToNSError(_:)();
    ((void (**)(void, void, void *))a2)[2](a2, 0, v28);

    swift_errorRelease();
    goto LABEL_35;
  }
  swift_bridgeObjectRelease();
  if (!swift_unknownObjectWeakLoadStrong())
  {
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Device setup state failed on assembly access", v31, 2u);
      swift_slowDealloc();
    }

    sub_1000A27CC();
    swift_allocError();
    char v27 = 1;
    goto LABEL_34;
  }
  char v16 = sub_1000146F0();
  if (v16) {
    uint64_t v17 = 2;
  }
  else {
    uint64_t v17 = 1;
  }
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v18, v19))
  {
    os_log_type_t v20 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)os_log_type_t v20 = 67109120;
    LODWORD(v36[0]) = v16 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Sending Device Setup State: %{BOOL}d", v20, 8u);
    swift_slowDealloc();
  }

  a2[2](a2, v17, 0);
  swift_unknownObjectRelease();
LABEL_35:
  _Block_release(a2);
}

void sub_1000A076C(void *a1, int a2, void *aBlock, void (*a4)(void))
{
  os_log_type_t v6 = _Block_copy(aBlock);
  _Block_copy(v6);
  id v7 = a1;
  a4();
  _Block_release(v6);
}

uint64_t sub_1000A07E0(void *a1)
{
  uint64_t v2 = v1;
  if (swift_unknownObjectWeakLoadStrong())
  {
    sub_10007EBB8();
    swift_unknownObjectRelease();
    sub_10001C1AC(&v26, (uint64_t)v27);
    id v4 = [a1 channelItem];
    uint64_t v5 = sub_10000896C(v4, (SEL *)&selRef_channelIdentifier);
    if (v6)
    {
      uint64_t v7 = v5;
      uint64_t v8 = v6;
      uint64_t v9 = sub_10000896C(v4, (SEL *)&selRef_pushTopic);
      if (v10)
      {
        uint64_t v11 = v9;
        uint64_t v12 = v10;
        sub_10001B620(v27, v27[3]);
        sub_100071728(v7, v8, v11, v12);
        if (!v1)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v2 = (uint64_t)[objc_allocWithZone((Class)PARSubscriptionStatus) init];
          [(id)v2 setIsSubscribed:1];

          sub_10001CA50((uint64_t)v27);
          return v2;
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_21;
      }
      swift_bridgeObjectRelease();
      if (qword_100218B50 != -1) {
        swift_once();
      }
      uint64_t v22 = type metadata accessor for Logger();
      sub_10002A10C(v22, (uint64_t)qword_100236A08);
      uint64_t v18 = Logger.logObject.getter();
      os_log_type_t v23 = static os_log_type_t.error.getter();
      uint64_t v2 = v23;
      if (!os_log_type_enabled(v18, v23))
      {
LABEL_20:

        sub_1000A27CC();
        swift_allocError();
        *uint64_t v24 = 3;
        swift_willThrow();

LABEL_21:
        sub_10001CA50((uint64_t)v27);
        return v2;
      }
      os_log_type_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v20 = 0;
      uint64_t v21 = "Invalid pushTopic for subscribe command";
    }
    else
    {
      if (qword_100218B50 != -1) {
        swift_once();
      }
      uint64_t v17 = type metadata accessor for Logger();
      sub_10002A10C(v17, (uint64_t)qword_100236A08);
      uint64_t v18 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.error.getter();
      uint64_t v2 = v19;
      if (!os_log_type_enabled(v18, v19)) {
        goto LABEL_20;
      }
      os_log_type_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v20 = 0;
      uint64_t v21 = "Invalid ChannelId for subscribe command";
    }
    _os_log_impl((void *)&_mh_execute_header, v18, (os_log_type_t)v2, v21, v20, 2u);
    swift_slowDealloc();
    goto LABEL_20;
  }
  if (qword_100218B50 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  sub_10002A10C(v13, (uint64_t)qword_100236A08);
  NSString v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v2 = swift_slowAlloc();
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Cannot create a valid cloud channel connection", (uint8_t *)v2, 2u);
    swift_slowDealloc();
  }

  sub_1000A27CC();
  swift_allocError();
  *char v16 = 1;
  swift_willThrow();
  return v2;
}

uint64_t sub_1000A0BB4(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return sub_1000270D0((uint64_t)sub_1000A0BCC);
}

void sub_1000A0BCC()
{
  sub_100019BA0();
  if (qword_100218B50 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = sub_10001DD88(v1, (uint64_t)qword_100236A08);
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    id v4 = (_WORD *)sub_100023E24();
    sub_10002E8F0(v4);
    sub_100028E84((void *)&_mh_execute_header, v2, v3, "Subscribing to channel");
    sub_100017D40();
  }
  uint64_t v5 = *(void *)(v0 + 16);

  if (v5)
  {
    uint64_t v6 = *(void **)(v0 + 16);
    self;
    uint64_t v7 = swift_dynamicCastObjCClass();
    if (v7)
    {
      uint64_t v8 = (void *)v7;
      id v9 = v6;
      sub_1000A07E0(v8);

      sub_100025494();
      __asm { BRAA            X2, X16 }
    }
  }
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v12, v13))
  {
    NSString v14 = (uint8_t *)sub_100023E24();
    *(_WORD *)NSString v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Invalid PARSubscriptionChannel type for subscribe command", v14, 2u);
    sub_100017D40();
  }

  sub_1000A27CC();
  uint64_t v15 = sub_100024A30();
  sub_1000262E0(v15, v16);
  sub_100017DBC();
  sub_100025494();
  __asm { BRAA            X1, X16 }
}

uint64_t sub_1000A0DD8(void *a1, void *aBlock, void *a3)
{
  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  id v6 = a1;
  a3;
  uint64_t v7 = (void *)swift_task_alloc();
  v3[5] = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_1000A3CF0;
  return sub_1000A0BB4((uint64_t)a1);
}

uint64_t sub_1000A0E98(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return sub_1000270D0((uint64_t)sub_1000A0EB0);
}

void sub_1000A0EB0()
{
  sub_100019BA0();
  uint64_t v2 = *(void **)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = qword_100218B50;
    id v4 = v2;
    if (v3 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    id v6 = sub_10001DD88(v5, (uint64_t)qword_100236A08);
    os_log_type_t v7 = static os_log_type_t.debug.getter();
    if (sub_100017D10(v7))
    {
      uint64_t v8 = (_WORD *)sub_100023E24();
      sub_10002E8F0(v8);
      sub_100028E84((void *)&_mh_execute_header, v6, v0, "Unsubscribing from channel");
      sub_100017D40();
    }

    [objc_allocWithZone((Class)PARSubscriptionStatus) init];
    sub_1000A3D8C();
    sub_100025494();
    __asm { BRAA            X2, X16 }
  }
  sub_1000A27CC();
  uint64_t v11 = sub_100024A30();
  sub_1000262E0(v11, v12);
  sub_100017DBC();
  sub_100025494();
  __asm { BRAA            X1, X16 }
}

uint64_t sub_1000A1028(void *a1, void *aBlock, void *a3)
{
  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  id v6 = a1;
  id v7 = a3;
  uint64_t v8 = (void *)swift_task_alloc();
  v3[5] = v8;
  *uint64_t v8 = v3;
  v8[1] = sub_1000A10E4;
  return sub_1000A0E98((uint64_t)a1);
}

uint64_t sub_1000A10E4()
{
  sub_100019BA0();
  uint64_t v2 = v0;
  id v4 = v3;
  sub_100026880();
  uint64_t v6 = v5;
  uint64_t v8 = v7[4];
  uint64_t v9 = (void *)v7[3];
  uint64_t v10 = (void *)v7[2];
  uint64_t v11 = *v1;
  sub_10001DD38();
  *uint64_t v12 = v11;
  swift_task_dealloc();

  if (v2)
  {
    if (v8)
    {
      os_log_type_t v13 = *(void (***)(void, void, void))(v6 + 32);
      uint64_t v14 = (void *)_convertErrorToNSError(_:)();
      swift_errorRelease();
      ((void (**)(void, void, void *))v13)[2](v13, 0, v14);
      _Block_release(v13);
    }
    else
    {
      swift_errorRelease();
    }
  }
  else if (v8)
  {
    uint64_t v15 = *(const void **)(v6 + 32);
    uint64_t v16 = sub_100027EA8();
    v17(v16);

    _Block_release(v15);
  }
  else
  {
  }
  sub_100017DBC();
  return v18();
}

uint64_t sub_1000A1284(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return sub_1000270D0((uint64_t)sub_1000A129C);
}

void sub_1000A129C()
{
  sub_100019BA0();
  uint64_t v2 = *(void **)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = qword_100218B50;
    id v4 = v2;
    if (v3 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    uint64_t v6 = sub_10001DD88(v5, (uint64_t)qword_100236A08);
    os_log_type_t v7 = static os_log_type_t.debug.getter();
    if (sub_100017D10(v7))
    {
      uint64_t v8 = (_WORD *)sub_100023E24();
      sub_10002E8F0(v8);
      sub_100028E84((void *)&_mh_execute_header, v6, v0, "Getting channel subscription status");
      sub_100017D40();
    }

    [objc_allocWithZone((Class)PARSubscriptionStatus) init];
    sub_1000A3D8C();
    sub_100025494();
    __asm { BRAA            X2, X16 }
  }
  sub_1000A27CC();
  uint64_t v11 = sub_100024A30();
  sub_1000262E0(v11, v12);
  sub_100017DBC();
  sub_100025494();
  __asm { BRAA            X1, X16 }
}

uint64_t sub_1000A1414(void *a1, int a2, void *a3, void *aBlock)
{
  uint64_t v6 = _Block_copy(aBlock);
  os_log_type_t v7 = (void *)swift_allocObject();
  v7[2] = a3;
  void v7[3] = v6;
  v7[4] = a1;
  id v8 = a3;
  id v9 = a1;
  uint64_t v10 = sub_100027EA8();

  return sub_10009DA7C(v10, v11);
}

uint64_t sub_1000A1494(void *a1, void *aBlock, void *a3)
{
  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  id v6 = a1;
  id v7 = a3;
  id v8 = (void *)swift_task_alloc();
  v3[5] = v8;
  *id v8 = v3;
  v8[1] = sub_1000A3CF0;
  return sub_1000A1284((uint64_t)a1);
}

uint64_t sub_1000A1550()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_100048298;
  return sub_1000A15E0();
}

uint64_t sub_1000A15E0()
{
  v1[5] = v0;
  uint64_t v2 = type metadata accessor for Client();
  v1[6] = v2;
  v1[7] = *(void *)(v2 - 8);
  v1[8] = swift_task_alloc();
  v1[9] = type metadata accessor for ForceFetchBagTask(0);
  v1[10] = swift_task_alloc();
  v1[11] = swift_task_alloc();
  return _swift_task_switch(sub_1000A16E0, 0, 0);
}

uint64_t sub_1000A16E0()
{
  sub_100023C50();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 96) = v1;
  void *v1 = v0;
  v1[1] = sub_1000A1780;
  return sub_1000BE500();
}

uint64_t sub_1000A1780()
{
  sub_100023C50();
  sub_100026880();
  *(void *)(v2 + 104) = v1;
  *(void *)(v2 + 112) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v3 = sub_1000A1D0C;
  }
  else {
    uint64_t v3 = sub_1000A186C;
  }
  return _swift_task_switch(v3, 0, 0);
}

void sub_1000A186C()
{
  id v1 = *(id *)(v0 + 104);
  uint64_t v2 = sub_10000896C(v1, (SEL *)&selRef_version);
  if (v3) {
    uint64_t v4 = v2;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v38 = v4;
  if (v3) {
    unint64_t v5 = v3;
  }
  else {
    unint64_t v5 = 0xE000000000000000;
  }
  if (([v1 feedbackEnabled] & 1) == 0)
  {
    if (qword_100218B30 != -1) {
      swift_once();
    }
    uint64_t v6 = *(void *)(v0 + 40);
    uint64_t v7 = *(void *)(v0 + 88);
    uint64_t v8 = type metadata accessor for Logger();
    sub_10002A10C(v8, (uint64_t)qword_1002369A8);
    sub_1000A3620(v6, v7);
    id v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.default.getter();
    BOOL v11 = os_log_type_enabled(v9, v10);
    uint64_t v12 = *(void *)(v0 + 88);
    if (v11)
    {
      unint64_t v36 = v5;
      uint64_t v13 = *(void *)(v0 + 56);
      uint64_t v14 = *(void *)(v0 + 64);
      uint64_t v34 = *(void *)(v0 + 48);
      uint64_t v15 = (uint8_t *)sub_100017D90();
      *(_DWORD *)uint64_t v15 = 134349056;
      sub_100012EE4();
      Client.type.getter();
      uint64_t v16 = v14;
      unint64_t v5 = v36;
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v16, v34);
      uint64_t v17 = ClientType.rawValue.getter();
      sub_10003108C(v12, (void (*)(void))type metadata accessor for ForceFetchBagTask);
      *(void *)(v0 + 32) = v17;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "feedback collection disabled in bag for client %{public}lu", v15, 0xCu);
      sub_100017D40();
    }
    else
    {
      sub_10003108C(*(void *)(v0 + 88), (void (*)(void))type metadata accessor for ForceFetchBagTask);
    }
  }
  if (qword_100218B20 != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  sub_10002A10C(v18, (uint64_t)qword_100236978);
  uint64_t v19 = sub_100027EA8();
  sub_1000A3620(v19, v20);
  swift_bridgeObjectRetain();
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.default.getter();
  BOOL v23 = os_log_type_enabled(v21, v22);
  uint64_t v24 = *(void *)(v0 + 80);
  if (v23)
  {
    uint64_t v25 = *(void *)(v0 + 56);
    uint64_t v26 = *(void *)(v0 + 64);
    uint64_t v35 = *(void *)(v0 + 48);
    unint64_t v27 = v5;
    uint64_t v28 = swift_slowAlloc();
    uint64_t v37 = sub_10001AB54();
    *(_DWORD *)uint64_t v28 = 136315394;
    uint64_t v39 = v37;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 16) = sub_10001C274(v38, v27, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v28 + 12) = 2050;
    sub_100012EE4();
    Client.type.getter();
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v26, v35);
    uint64_t v29 = ClientType.rawValue.getter();
    sub_10003108C(v24, (void (*)(void))type metadata accessor for ForceFetchBagTask);
    *(void *)(v0 + 24) = v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "sending bag with version: %s to client: %{public}lu", (uint8_t *)v28, 0x16u);
    swift_arrayDestroy();
    sub_100017D40();
    sub_100017D40();
  }
  else
  {
    sub_10003108C(*(void *)(v0 + 80), (void (*)(void))type metadata accessor for ForceFetchBagTask);
    swift_bridgeObjectRelease_n();
  }

  os_log_type_t v30 = *(void **)(v0 + 104);
  sub_1000265FC();
  (*v31)(v30, 0);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_100017DBC();
  sub_100029F4C();
  __asm { BRAA            X1, X16 }
}

uint64_t sub_1000A1D0C()
{
  sub_10001DD48();
  uint64_t v1 = *(void *)(v0 + 112);
  sub_1000265FC();
  unint64_t v3 = *v2;
  swift_errorRetain();
  id v4 = sub_100030D6C(v1);
  swift_errorRelease();
  v3(0, v4);
  swift_errorRelease();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_100017DBC();
  return v5();
}

uint64_t sub_1000A1DC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  if (sub_100027BA4(a1, 1, v6) == 1)
  {
    sub_100019994(a1, &qword_10021F2D0);
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  }
  if (*(void *)(a3 + 16))
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a2;
  *(void *)(v7 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_1000A1F38()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000A1F70()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_1000A1FB0()
{
  sub_100098F98(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1000A1FB8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000A2000(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  id v4 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v4;
  *id v4 = v3;
  v4[1] = sub_100048298;
  return v6();
}

uint64_t sub_1000A20CC(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  unint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v5;
  *unint64_t v5 = v4;
  v5[1] = sub_100048298;
  return v7();
}

uint64_t sub_1000A2198(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  if (sub_100027BA4(a1, 1, v6) == 1)
  {
    sub_100019994(a1, &qword_10021F2D0);
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  }
  if (*(void *)(a3 + 16))
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a2;
  *(void *)(v7 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_1000A2308(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_1000A23E4;
  return v6(a1);
}

uint64_t sub_1000A23E4()
{
  sub_100023C50();
  sub_100026880();
  uint64_t v1 = *v0;
  sub_10001DD38();
  void *v2 = v1;
  swift_task_dealloc();
  sub_100017DBC();
  return v3();
}

void sub_1000A24A8()
{
}

uint64_t sub_1000A24B4()
{
  sub_10001DD48();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000213A4(v0);
  void *v1 = v2;
  v1[1] = sub_100048298;
  uint64_t v3 = sub_100027E8C();
  return v4(v3);
}

uint64_t sub_1000A2550()
{
  sub_100019BA0();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000213A4(v0);
  void *v1 = v2;
  v1[1] = sub_100048298;
  uint64_t v3 = sub_1000A3D0C();
  return v4(v3);
}

uint64_t sub_1000A2600()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000A2640()
{
  sub_100019BA0();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000213A4(v0);
  void *v1 = v2;
  v1[1] = sub_100048298;
  uint64_t v3 = sub_10002E6AC();
  return v4(v3);
}

uint64_t sub_1000A26F8()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000A2730()
{
  sub_10001DD48();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000213A4(v0);
  void *v1 = v2;
  v1[1] = sub_100048298;
  uint64_t v3 = sub_100018558();
  return v4(v3);
}

unint64_t sub_1000A27CC()
{
  unint64_t result = qword_10021CCB8;
  if (!qword_10021CCB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10021CCB8);
  }
  return result;
}

uint64_t sub_1000A281C()
{
  sub_10001DD48();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000213A4(v0);
  void *v1 = v2;
  v1[1] = sub_100046F50;
  uint64_t v3 = sub_100027E8C();
  return v4(v3);
}

uint64_t sub_1000A28B8()
{
  _Block_release(*(const void **)(v0 + 24));

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000A2900()
{
  sub_10001DD48();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000213A4(v0);
  void *v1 = v2;
  v1[1] = sub_100048298;
  uint64_t v3 = sub_100027E8C();
  return v4(v3);
}

uint64_t sub_1000A2998(void *a1)
{
  return sub_10000896C(a1, (SEL *)&selRef_entityIdentifier);
}

uint64_t sub_1000A29A4(void *a1, SEL *a2)
{
  id v3 = [a1 *a2];

  if (v3)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  return sub_10001AA80();
}

uint64_t sub_1000A2A0C(void *a1)
{
  id v2 = [a1 results];

  if (!v2) {
    return 0;
  }
  sub_100023FA0(0, (unint64_t *)&unk_10021CD38);
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

void sub_1000A2A84(uint64_t a1, unint64_t a2, uint64_t a3)
{
  sub_10009F67C(a1, a2, a3, *(void *)(v3 + 16));
}

uint64_t sub_1000A2A8C(void *a1)
{
  return sub_10009FCF0(a1, *(void (**)(uint64_t, unint64_t, uint64_t))(v1 + 16));
}

uint64_t sub_1000A2A94(uint64_t a1)
{
  return sub_10009FF58(a1, *(void (**)(void, unint64_t, uint64_t))(v1 + 16));
}

void sub_1000A2A9C(uint64_t a1)
{
  sub_10009E5B8(a1, *(void *)(v1 + 16));
}

void sub_1000A2AA4(uint64_t a1)
{
  sub_10009BD90(a1, *(void *)(v1 + 16));
}

uint64_t sub_1000A2AAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10002572C(&qword_10021CD08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_1000A2B14(uint64_t a1)
{
  sub_10009DE9C(a1, *(void *)(v1 + 16));
}

uint64_t sub_1000A2B1C()
{
  _Block_release(*(const void **)(v0 + 40));

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000A2B6C()
{
  sub_100019BA0();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000213A4(v0);
  void *v1 = v2;
  v1[1] = sub_100048298;
  uint64_t v3 = sub_1000A3D0C();
  return v4(v3);
}

void sub_1000A2C20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10009C5F4(a1, a2, a3, *(void *)(v3 + 16));
}

void sub_1000A2C28(uint64_t a1)
{
  sub_10009C2B0(a1, *(void *)(v1 + 16));
}

uint64_t (*sub_1000A2C30())()
{
  uint64_t v1 = sub_100023E9C();
  uint64_t v2 = (void *)sub_1000288C8((uint64_t)v1);
  *(void *)(v0 + 32) = sub_1000A2D14(v2, v3, v4);
  return sub_1000A2C7C;
}

uint64_t (*sub_1000A2C80())()
{
  uint64_t v1 = sub_100023E9C();
  uint64_t v2 = sub_1000288C8((uint64_t)v1);
  *(void *)(v0 + 32) = sub_1000A2D9C(v2, v3);
  return sub_1000A2C7C;
}

void sub_1000A2CCC(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);

  free(v1);
}

void (*sub_1000A2D14(void *a1, uint64_t a2, uint64_t a3))(id *a1)
{
  unint64_t v6 = a3 & 0xC000000000000001;
  sub_100065188(a2, (a3 & 0xC000000000000001) == 0, a3);
  if (v6) {
    id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    id v7 = *(id *)(a3 + 8 * a2 + 32);
  }
  *a1 = v7;
  return sub_1000A2D94;
}

void sub_1000A2D94(id *a1)
{
}

uint64_t (*sub_1000A2D9C(uint64_t a1, uint64_t a2))()
{
  uint64_t v6 = sub_1000297A0(a1, a2);
  sub_100065188(v6, v7, v8);
  if (v5) {
    id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    id v9 = *(id *)(v3 + 8 * v4 + 32);
  }
  void *v2 = v9;
  return sub_1000A3CEC;
}

void sub_1000A2E08(void *a1, NSObject *a2, uint64_t a3, uint64_t a4, const void *a5)
{
  uint64_t v9 = sub_10002572C(&qword_10021BB20);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v58 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v58 - v13;
  _Block_copy(a5);
  _Block_copy(a5);
  id v15 = [a1 queryCommand];
  if (v15)
  {
    uint64_t v16 = v15;
    self;
    uint64_t v17 = swift_dynamicCastObjCClass();
    if (v17)
    {
      uint64_t v18 = (void *)v17;
      uint64_t v19 = qword_100218B50;
      id v20 = v16;
      if (v19 != -1) {
        swift_once();
      }
      uint64_t v21 = type metadata accessor for Logger();
      sub_10002A10C(v21, (uint64_t)qword_100236A08);
      id v22 = v20;
      BOOL v23 = Logger.logObject.getter();
      os_log_type_t v24 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v23, v24))
      {
        os_log_t v61 = a2;
        uint64_t v25 = (uint8_t *)swift_slowAlloc();
        uint64_t v26 = swift_slowAlloc();
        uint64_t v62 = a1;
        uint64_t v65 = v26;
        *(_DWORD *)uint64_t v25 = 136315138;
        uint64_t v63 = sub_10000896C(v18, (SEL *)&selRef_entityIdentifier);
        uint64_t v64 = v27;
        sub_10002572C(&qword_10021D050);
        uint64_t v28 = String.init<A>(describing:)();
        uint64_t v63 = sub_10001C274(v28, v29, &v65);
        a2 = v61;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v23, v24, "performing entity query command: %s", v25, 0xCu);
        swift_arrayDestroy();
        a1 = v62;
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      _Block_copy(a5);
      sub_1000DD7AC((uint64_t)a1, a3, (uint64_t)a2, (uint64_t)a5, v44, v45, v46, v47, v58, v59, (uint64_t)v60, (uint64_t)v61, (uint64_t)v62, v63, v64, v65, v66, v67, v68,
        v69);
    }
    else
    {
      uint64_t v62 = a1;
      self;
      uint64_t v30 = swift_dynamicCastObjCClass();
      if (v30)
      {
        uint64_t v31 = (void *)v30;
        uint64_t v32 = qword_100218B50;
        id v33 = v16;
        if (v32 != -1) {
          swift_once();
        }
        uint64_t v34 = type metadata accessor for Logger();
        sub_10002A10C(v34, (uint64_t)qword_100236A08);
        id v35 = v33;
        unint64_t v36 = Logger.logObject.getter();
        int v37 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v36, (os_log_type_t)v37))
        {
          HIDWORD(v59) = v37;
          uint64_t v38 = (uint8_t *)swift_slowAlloc();
          uint64_t v58 = swift_slowAlloc();
          uint64_t v63 = v58;
          unint64_t v60 = v38;
          *(_DWORD *)uint64_t v38 = 136315138;
          id v39 = [v31 card];
          os_log_t v61 = v36;
          if (v39)
          {
            os_log_type_t v40 = v39;
            id v41 = [v39 urlValue];

            if (v41)
            {
              static URL._unconditionallyBridgeFromObjectiveC(_:)();

              uint64_t v42 = type metadata accessor for URL();
              uint64_t v43 = 0;
            }
            else
            {
              uint64_t v42 = type metadata accessor for URL();
              uint64_t v43 = 1;
            }
            uint64_t v48 = (uint64_t)v62;
            sub_10002538C((uint64_t)v12, v43, 1, v42);
            sub_100085EFC((uint64_t)v12, (uint64_t)v14, &qword_10021BB20);
          }
          else
          {
            uint64_t v49 = type metadata accessor for URL();
            sub_10002538C((uint64_t)v14, 1, 1, v49);
            uint64_t v48 = (uint64_t)v62;
          }
          uint64_t v50 = v60;
          uint64_t v51 = String.init<A>(describing:)();
          uint64_t v65 = sub_10001C274(v51, v52, &v63);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          os_log_t v53 = v61;
          _os_log_impl((void *)&_mh_execute_header, v61, BYTE4(v59), "performing show card command: %s", v50, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          uint64_t v48 = (uint64_t)v62;
        }
        _Block_copy(a5);
        sub_1000DD7AC(v48, a3, (uint64_t)a2, (uint64_t)a5, v54, v55, v56, v57, v58, v59, (uint64_t)v60, (uint64_t)v61, (uint64_t)v62, v63, v64, v65, v66, v67, v68,
          v69);
      }
      else
      {
      }
    }
  }
  _Block_release(a5);
  _Block_release(a5);
  _Block_release(a5);
}

uint64_t sub_1000A338C@<X0>(void *a1@<X8>)
{
  return sub_1000999C8(*(void *)(v1 + 24), a1);
}

uint64_t type metadata accessor for ForceFetchBagTask(uint64_t a1)
{
  return sub_100027D28(a1, qword_10021CDD0);
}

uint64_t sub_1000A33B4()
{
  uint64_t v0 = *(unsigned __int8 *)(*(void *)(type metadata accessor for ForceFetchBagTask(0) - 8) + 80) | 7;
  swift_unknownObjectRelease();
  swift_release();
  type metadata accessor for UserAgent();
  sub_10001DCF8();
  sub_10000E040();
  v1();
  swift_release();
  uint64_t v2 = sub_10001AA80();

  return _swift_deallocObject(v2, v3, v0);
}

uint64_t sub_1000A34B0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_100024344();
  v4(v3);
  sub_10001DCF8();
  uint64_t v5 = sub_10002A0A4();
  v6(v5);
  return a2;
}

uint64_t sub_1000A3500()
{
  sub_10001DD48();
  type metadata accessor for ForceFetchBagTask(0);
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_1000213A4(v0);
  void *v1 = v2;
  v1[1] = sub_100048298;
  sub_10002E6AC();
  return sub_1000A1550();
}

unint64_t sub_1000A35D8(unint64_t result)
{
  if (result >= 2) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_1000A35E8()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000A3620(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100024344();
  v5(v4);
  sub_10001DCF8();
  (*(void (**)(uint64_t, uint64_t))(v6 + 16))(a2, v2);
  return a2;
}

uint64_t *sub_1000A367C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
  }
  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UserAgent();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_retain();
    v12(v9, v10, v11);
    uint64_t v13 = *(int *)(a3 + 24);
    uint64_t v14 = (uint64_t *)((char *)v7 + v13);
    id v15 = (uint64_t *)((char *)a2 + v13);
    uint64_t v16 = v15[1];
    void *v14 = *v15;
    v14[1] = v16;
  }
  swift_retain();
  return v7;
}

uint64_t sub_1000A3784(uint64_t a1, uint64_t a2)
{
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UserAgent();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);

  return swift_release();
}

void *sub_1000A3814(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UserAgent();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_retain();
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (void *)((char *)a1 + v11);
  uint64_t v13 = (void *)((char *)a2 + v11);
  uint64_t v14 = v13[1];
  *uint64_t v12 = *v13;
  v12[1] = v14;
  swift_retain();
  return a1;
}

void *sub_1000A38D4(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UserAgent();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (void *)((char *)a1 + v10);
  uint64_t v12 = (void *)((char *)a2 + v10);
  uint64_t v13 = v12[1];
  *uint64_t v11 = *v12;
  v11[1] = v13;
  swift_retain();
  swift_release();
  return a1;
}

void *sub_1000A3994(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UserAgent();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

void *sub_1000A3A2C(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_release();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UserAgent();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 24));
  swift_release();
  return a1;
}

uint64_t sub_1000A3AD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000A3AEC);
}

uint64_t sub_1000A3AEC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UserAgent();
    uint64_t v9 = (uint64_t)a1 + *(int *)(a3 + 20);
    return sub_100027BA4(v9, a2, v8);
  }
}

uint64_t sub_1000A3B74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000A3B88);
}

void *sub_1000A3B88(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *unint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UserAgent();
    uint64_t v8 = (uint64_t)v5 + *(int *)(a4 + 20);
    return (void *)sub_10002538C(v8, a2, a2, v7);
  }
  return result;
}

uint64_t sub_1000A3C08()
{
  uint64_t result = type metadata accessor for UserAgent();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1000A3CF4()
{
  return 0;
}

uint64_t sub_1000A3D0C()
{
  return v0;
}

void sub_1000A3D2C(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

uint64_t sub_1000A3D58()
{
  return v0;
}

uint64_t sub_1000A3D6C()
{
  return swift_dynamicCast();
}

uint64_t sub_1000A3D8C()
{
  return v0;
}

uint64_t sub_1000A3DB4()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000A3DCC()
{
  return swift_bridgeObjectRetain_n();
}

uint64_t sub_1000A3DEC()
{
  return v0;
}

id sub_1000A3DF8@<X0>(void *a1@<X8>)
{
  return a1;
}

char *sub_1000A3E10()
{
  if (qword_100218C08 != -1) {
    swift_once();
  }
  return &byte_100236B90;
}

uint64_t sub_1000A3E5C()
{
  uint64_t result = sub_1000A3E84(5);
  byte_100236B90 = result & 1;
  return result;
}

uint64_t sub_1000A3E84(char a1)
{
  sub_1000A3F10(a1);
  NSString v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  uint64_t v2 = MGCopyAnswer();

  if (!v2) {
    return 0;
  }
  uint64_t result = swift_dynamicCast();
  if (result) {
    return v4;
  }
  return result;
}

unint64_t sub_1000A3F10(char a1)
{
  unint64_t result = 0x726556646C697542;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x4E746375646F7250;
      break;
    case 2:
      unint64_t result = 0x54746375646F7250;
      break;
    case 3:
      unint64_t result = 0x56746375646F7250;
      break;
    case 4:
      unint64_t result = 0x6F436E6F69676552;
      break;
    case 5:
      unint64_t result = 0x6C616E7265746E49;
      break;
    case 6:
      unint64_t result = 0xD000000000000015;
      break;
    case 7:
      unint64_t result = 0x48746375646F7250;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for OSVariant()
{
  return &type metadata for OSVariant;
}

uint64_t sub_1000A4068()
{
  return byte_100236B90;
}

void *sub_1000A4088(void *a1, uint64_t a2)
{
  type metadata accessor for Locker();
  uint64_t v5 = swift_allocObject();
  uint64_t v6 = (_DWORD *)swift_slowAlloc();
  *(void *)(v5 + 16) = v6;
  *uint64_t v6 = 0;
  v2[2] = v5;
  uint64_t v7 = type metadata accessor for TopicCacheInMemoryImpl();
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = 20;
  sub_1000A59EC();
  type metadata accessor for TopicCacheEntry();
  sub_1000A5A2C();
  *(void *)(v8 + 24) = Dictionary.init(dictionaryLiteral:)();
  v2[8] = v7;
  v2[9] = &off_100202040;
  v2[4] = a2;
  v2[5] = v8;
  v2[10] = 0;
  v2[3] = a1;
  if (a1)
  {
    uint64_t v9 = qword_100218C20;
    swift_retain();
    id v10 = a1;
    swift_retain();
    if (v9 != -1) {
      swift_once();
    }
    [v10 addObserver:v2 selector:"clearCache" name:qword_100236BB0 object:0];

    swift_release();
    swift_release();
  }
  return v2;
}

void sub_1000A41F8()
{
  NSString v1 = *(os_unfair_lock_s **)(v0[2] + 16);
  os_unfair_lock_lock(v1);
  sub_1000A4234(v0);
  os_unfair_lock_unlock(v1);
}

void sub_1000A4234(void *a1)
{
  uint64_t v43 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v43 - 8);
  __chkstk_darwin(v43);
  uint64_t v44 = (char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10002572C(&qword_10021CED0);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (uint64_t)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v38 - v8;
  uint64_t v49 = type metadata accessor for TopicCacheEntry();
  uint64_t v10 = __chkstk_darwin(v49);
  uint64_t v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v48 = (char *)&v38 - v14;
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v38 - v15;
  uint64_t v17 = a1 + 5;
  sub_10001B620(a1 + 5, a1[8]);
  unint64_t v18 = (unint64_t)sub_10011D2A8();
  if (v18)
  {
    unint64_t v19 = v18;
    if (v18 >> 62) {
      goto LABEL_19;
    }
    uint64_t v20 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    for (; v20; uint64_t v20 = _CocoaArrayWrapper.endIndex.getter())
    {
      uint64_t v38 = v7;
      id v39 = v12;
      uint64_t v46 = (char *)v20;
      unint64_t v47 = v19 & 0xC000000000000001;
      uint64_t v40 = v2;
      id v41 = (void (**)(char *, uint64_t))(v2 + 8);
      uint64_t v7 = 4;
      uint64_t v42 = v9;
      uint64_t v45 = v16;
      while (1)
      {
        id v21 = v47 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v19 + 8 * v7);
        id v22 = v21;
        uint64_t v2 = (uint64_t)v48;
        uint64_t v12 = (char *)(v7 - 3);
        if (__OFADD__(v7 - 4, 1)) {
          break;
        }
        sub_10001B620(v17, a1[8]);
        sub_10011D4E8(v22, (uint64_t)v9);
        if (sub_100027BA4((uint64_t)v9, 1, v49) == 1)
        {

          swift_bridgeObjectRelease();
          sub_1000A56B4((uint64_t)v9);
LABEL_17:
          uint64_t v12 = v39;
          uint64_t v2 = v40;
          uint64_t v7 = v38;
          uint64_t v20 = (uint64_t)v46;
          goto LABEL_21;
        }
        sub_1000A5838((uint64_t)v9, (uint64_t)v16);
        sub_10001B620(v17, a1[8]);
        BOOL v23 = sub_10011D4B8();
        sub_1000A5938((uint64_t)v16, v2);
        if (v23)
        {
          sub_1000A58DC(v2);
        }
        else
        {
          os_log_type_t v24 = a1;
          uint64_t v25 = v44;
          Date.init()();
          sub_1000A599C();
          uint64_t v26 = v43;
          char v27 = dispatch thunk of static Comparable.< infix(_:_:)();
          uint64_t v28 = v25;
          a1 = v24;
          uint64_t v9 = v42;
          (*v41)(v28, v26);
          sub_1000A58DC(v2);
          if (v27)
          {

            sub_1000A58DC((uint64_t)v45);
            swift_bridgeObjectRelease();
            goto LABEL_17;
          }
        }
        sub_10001B620(v17, a1[8]);
        sub_10011D684(v22);

        uint64_t v16 = v45;
        sub_1000A58DC((uint64_t)v45);
        ++v7;
        uint64_t v20 = (uint64_t)v46;
        if (v12 == v46)
        {
          swift_bridgeObjectRelease();
          uint64_t v12 = v39;
          uint64_t v2 = v40;
          uint64_t v7 = v38;
          goto LABEL_21;
        }
      }
      __break(1u);
LABEL_19:
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
LABEL_21:
    unint64_t v29 = (void *)a1[10];
    if (v29) {
      [v29 invalidate];
    }
    if (v20)
    {
      sub_100065188(0, (v19 & 0xC000000000000001) == 0, v19);
      if ((v19 & 0xC000000000000001) != 0) {
        id v30 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v30 = *(id *)(v19 + 32);
      }
      uint64_t v31 = v30;
      swift_bridgeObjectRelease();
      sub_10001B620(v17, a1[8]);
      sub_10011D4E8(v31, v7);
      if (sub_100027BA4(v7, 1, v49) == 1)
      {

        sub_1000A56B4(v7);
      }
      else
      {
        sub_1000A5838(v7, (uint64_t)v12);
        uint64_t v32 = (uint64_t)v12;
        uint64_t v33 = (uint64_t)v44;
        (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v44, v12, v43);
        uint64_t v34 = swift_allocObject();
        swift_weakInit();
        id v35 = objc_allocWithZone((Class)NSTimer);
        swift_retain();
        id v36 = sub_1000A5714(v33, 0, (uint64_t)sub_1000A58D4, v34, 0.0);

        sub_1000A58DC(v32);
        swift_release();
        int v37 = (void *)a1[10];
        a1[10] = v36;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
}

uint64_t sub_1000A4760()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_1000A41F8();
    return swift_release();
  }
  return result;
}

void sub_1000A47B8(void *a1, uint64_t a2)
{
  uint64_t v5 = *(os_unfair_lock_s **)(*(void *)(v2 + 16) + 16);
  os_unfair_lock_lock(v5);
  sub_1000A481C(a2, v2, a1);
  os_unfair_lock_unlock(v5);

  sub_1000A41F8();
}

uint64_t sub_1000A481C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = type metadata accessor for TopicCacheEntry();
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = swift_bridgeObjectRetain();
  sub_1000F47F8(v8, (uint64_t)v7);
  sub_10001B620((void *)(a2 + 40), *(void *)(a2 + 64));
  sub_10011D5CC(a3, (uint64_t)v7);
  if (qword_100218B18 != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  sub_10002A10C(v9, (uint64_t)qword_100236960);
  id v10 = a3;
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136642819;
    id v14 = objc_msgSend(v10, "description", v13 + 4);
    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v17 = v16;

    v19[1] = sub_10001C274(v15, v17, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Adding result for topic: %{sensitive}s", v13, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  return sub_1000A58DC((uint64_t)v7);
}

void sub_1000A4CBC(void *a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void (***)(uint64_t, uint64_t))(v6 - 8);
  __chkstk_darwin(v6);
  sub_10000DFD0();
  uint64_t v10 = v9 - v8;
  uint64_t v11 = sub_10002572C(&qword_10021CED0);
  __chkstk_darwin(v11 - 8);
  sub_10000DFD0();
  uint64_t v14 = v13 - v12;
  uint64_t v66 = type metadata accessor for TopicCacheEntry();
  __chkstk_darwin(v66);
  sub_10000DFD0();
  uint64_t v17 = v16 - v15;
  uint64_t v18 = type metadata accessor for Client();
  __chkstk_darwin(v18 - 8);
  sub_10000DFD0();
  uint64_t v21 = v20 - v19;
  id v22 = (void *)a1[4];
  swift_retain();
  static Client.parsecd.getter();
  type metadata accessor for ResourceAccessSpan();
  swift_allocObject();
  uint64_t v23 = sub_100003EAC(v22, 20, v21, 0, 1);
  uint64_t v75 = _swiftEmptyArrayStorage;
  if (!(a2 >> 62))
  {
    uint64_t v24 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v24) {
      goto LABEL_3;
    }
LABEL_31:
    swift_bridgeObjectRelease();
    os_log_t v61 = _swiftEmptyArrayStorage;
LABEL_32:
    *(unsigned char *)(v23 + qword_10021B6C8) = 1;
    sub_100011708();
    swift_release();
    goto LABEL_33;
  }
LABEL_30:
  swift_bridgeObjectRetain();
  uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
  if (!v24) {
    goto LABEL_31;
  }
LABEL_3:
  uint64_t v62 = a3;
  uint64_t v63 = v23;
  unint64_t v70 = a1 + 5;
  unint64_t v71 = a2 & 0xC000000000000001;
  uint64_t v69 = v7 + 1;
  uint64_t v23 = 4;
  uint64_t v64 = a1;
  a3 = (void *)v66;
  unint64_t v65 = a2;
  uint64_t v68 = v24;
  while (1)
  {
    if (v71) {
      uint64_t v25 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      uint64_t v25 = (char *)*(id *)(a2 + 8 * v23);
    }
    uint64_t v7 = (void (**)(uint64_t, uint64_t))v25;
    if (__OFADD__(v23 - 4, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    uint64_t v73 = v23;
    sub_10001B620(v70, a1[8]);
    sub_10011D4E8(v7, v14);
    if (sub_100027BA4(v14, 1, (uint64_t)a3) == 1) {
      break;
    }
    uint64_t v72 = v23 - 3;
    sub_1000A5838(v14, v17);
    Date.init()();
    sub_1000A599C();
    char v26 = dispatch thunk of static Comparable.< infix(_:_:)();
    (*v69)(v10, v6);
    if ((v26 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(unsigned char *)(v63 + qword_10021B6C8) = 27;
      sub_100011708();
      if (qword_100218B18 != -1) {
        swift_once();
      }
      uint64_t v51 = type metadata accessor for Logger();
      sub_10002A10C(v51, (uint64_t)qword_100236960);
      unint64_t v52 = v7;
      os_log_t v53 = Logger.logObject.getter();
      os_log_type_t v54 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v53, v54))
      {
        uint64_t v55 = (uint8_t *)swift_slowAlloc();
        uint64_t v74 = swift_slowAlloc();
        *(_DWORD *)uint64_t v55 = 136642819;
        id v56 = [v52 description];
        uint64_t v57 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v59 = v58;

        uint64_t v60 = sub_10001C274(v57, v59, &v74);
        sub_100025998(v60);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v53, v54, "Cached result expired for: %{sensitive}s", v55, 0xCu);
        swift_arrayDestroy();
        sub_100017D40();
        sub_100017D40();
      }
      else
      {
      }
      swift_release();
      sub_1000A58DC(v17);
      os_log_t v61 = 0;
      a3 = v62;
      goto LABEL_33;
    }
    if (qword_100218B18 != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    sub_10002A10C(v27, (uint64_t)qword_100236960);
    uint64_t v28 = v7;
    unint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v67 = swift_slowAlloc();
      uint64_t v74 = swift_slowAlloc();
      *(_DWORD *)uint64_t v67 = 136642819;
      uint64_t v31 = v14;
      uint64_t v32 = v10;
      id v33 = [v28 description];
      uint64_t v34 = v6;
      uint64_t v35 = v17;
      uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v38 = v37;

      uint64_t v10 = v32;
      uint64_t v14 = v31;
      a3 = (void *)v66;
      uint64_t v39 = v36;
      uint64_t v17 = v35;
      uint64_t v6 = v34;
      *(void *)(v67 + 4) = sub_10001C274(v39, v38, &v74);

      a1 = v64;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Found cached result for: %{sensitive}s", (uint8_t *)v67, 0xCu);
      swift_arrayDestroy();
      a2 = v65;
      sub_100017D40();
      sub_100017D40();
    }
    else
    {
    }
    uint64_t v40 = swift_bridgeObjectRetain();
    sub_1000B9F94(v40);

    sub_1000A58DC(v17);
    uint64_t v23 = v73 + 1;
    if (v72 == v68)
    {
      swift_bridgeObjectRelease();
      os_log_t v61 = v75;
      a3 = v62;
      uint64_t v23 = v63;
      goto LABEL_32;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000A56B4(v14);
  if (qword_100218B18 != -1) {
    swift_once();
  }
  uint64_t v41 = type metadata accessor for Logger();
  sub_10002A10C(v41, (uint64_t)qword_100236960);
  uint64_t v42 = v7;
  uint64_t v43 = Logger.logObject.getter();
  os_log_type_t v44 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v43, v44))
  {
    uint64_t v45 = (uint8_t *)swift_slowAlloc();
    uint64_t v74 = swift_slowAlloc();
    *(_DWORD *)uint64_t v45 = 136642819;
    id v46 = [v42 description];
    uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v49 = v48;

    uint64_t v50 = sub_10001C274(v47, v49, &v74);
    sub_100025998(v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v43, v44, "Cached result missing for: %{sensitive}s, will trigger server request", v45, 0xCu);
    swift_arrayDestroy();
    sub_100017D40();
    sub_100017D40();
  }
  else
  {
  }
  a3 = v62;
  *(unsigned char *)(v63 + qword_10021B6C8) = 6;
  sub_100011708();
  swift_release();

  os_log_t v61 = 0;
LABEL_33:
  *a3 = v61;
}

void sub_1000A5548()
{
  NSString v1 = *(os_unfair_lock_s **)(v0[2] + 16);
  os_unfair_lock_lock(v1);
  sub_10001B620(v0 + 5, v0[8]);
  sub_10011D72C();
  uint64_t v2 = (void *)v0[10];
  if (v2)
  {
    [v2 invalidate];
    uint64_t v3 = (void *)v0[10];
  }
  else
  {
    uint64_t v3 = 0;
  }
  v0[10] = 0;

  os_unfair_lock_unlock(v1);
}

uint64_t sub_1000A5600()
{
  sub_1000A5548();
  NSString v1 = *(void **)(v0 + 24);
  if (v1) {
    [v1 removeObserver:v0];
  }
  swift_release();

  swift_release();
  sub_10001CA50(v0 + 40);

  return v0;
}

uint64_t sub_1000A565C()
{
  sub_1000A5600();

  return _swift_deallocClassInstance(v0, 88, 7);
}

uint64_t type metadata accessor for TopicCacheController()
{
  return self;
}

uint64_t sub_1000A56B4(uint64_t a1)
{
  uint64_t v2 = sub_10002572C(&qword_10021CED0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id sub_1000A5714(uint64_t a1, char a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t v6 = v5;
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  v17[4] = a3;
  v17[5] = a4;
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 1107296256;
  v17[2] = sub_100006748;
  v17[3] = &unk_1001FE018;
  uint64_t v13 = _Block_copy(v17);
  id v14 = [v6 initWithFireDate:isa interval:a2 & 1 repeats:v13 block:a5];
  _Block_release(v13);

  uint64_t v15 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(a1, v15);
  swift_release();
  return v14;
}

uint64_t sub_1000A5838(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TopicCacheEntry();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000A589C()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000A58D4()
{
  return sub_1000A4760();
}

uint64_t sub_1000A58DC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for TopicCacheEntry();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000A5938(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TopicCacheEntry();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000A599C()
{
  unint64_t result = qword_10021E7D0;
  if (!qword_10021E7D0)
  {
    type metadata accessor for Date();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10021E7D0);
  }
  return result;
}

unint64_t sub_1000A59EC()
{
  unint64_t result = qword_100219768;
  if (!qword_100219768)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100219768);
  }
  return result;
}

unint64_t sub_1000A5A2C()
{
  unint64_t result = qword_10021CED8;
  if (!qword_10021CED8)
  {
    sub_1000A59EC();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10021CED8);
  }
  return result;
}

void sub_1000A5A70(unint64_t a1, uint64_t *a2)
{
  if (a1 >> 62) {
    goto LABEL_13;
  }
  uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v5; uint64_t v5 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v6 = 4;
    while (1)
    {
      id v7 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(a1 + 8 * v6);
      uint64_t v8 = v7;
      uint64_t v9 = v6 - 3;
      if (__OFADD__(v6 - 4, 1)) {
        break;
      }
      uint64_t v10 = v7;
      sub_1000ABDFC(&v10, a2);
      if (v2)
      {

        swift_bridgeObjectRelease();
        return;
      }

      ++v6;
      if (v9 == v5) {
        goto LABEL_10;
      }
    }
    __break(1u);
LABEL_13:
    swift_bridgeObjectRetain();
  }
LABEL_10:

  swift_bridgeObjectRelease();
}

uint64_t sub_1000A5B84(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t))
{
  sub_10001FC68(a1, v19);
  uint64_t v3 = v19[0];
  uint64_t v4 = v19[1];
  int64_t v5 = v19[3];
  unint64_t v6 = v19[4];
  int64_t v7 = (unint64_t)(v19[2] + 64) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  if (!v6) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v9 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  unint64_t v10 = v9 | (v5 << 6);
  while (1)
  {
    uint64_t v15 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v10);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    uint64_t v18 = *(void *)(*(void *)(v3 + 56) + 8 * v10);
    swift_bridgeObjectRetain();
    swift_retain();
    a2(v16, v17, v18);
    swift_release();
    uint64_t result = swift_bridgeObjectRelease();
    if (v6) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v11 = v5 + 1;
    if (__OFADD__(v5, 1)) {
      break;
    }
    if (v11 >= v7) {
      return swift_release();
    }
    unint64_t v12 = *(void *)(v4 + 8 * v11);
    int64_t v13 = v5 + 1;
    if (!v12)
    {
      int64_t v13 = v5 + 2;
      if (v5 + 2 >= v7) {
        return swift_release();
      }
      unint64_t v12 = *(void *)(v4 + 8 * v13);
      if (!v12)
      {
        int64_t v13 = v5 + 3;
        if (v5 + 3 >= v7) {
          return swift_release();
        }
        unint64_t v12 = *(void *)(v4 + 8 * v13);
        if (!v12)
        {
          int64_t v13 = v5 + 4;
          if (v5 + 4 >= v7) {
            return swift_release();
          }
          unint64_t v12 = *(void *)(v4 + 8 * v13);
          if (!v12)
          {
            int64_t v13 = v5 + 5;
            if (v5 + 5 >= v7) {
              return swift_release();
            }
            unint64_t v12 = *(void *)(v4 + 8 * v13);
            if (!v12)
            {
              int64_t v14 = v5 + 6;
              while (v14 < v7)
              {
                unint64_t v12 = *(void *)(v4 + 8 * v14++);
                if (v12)
                {
                  int64_t v13 = v14 - 1;
                  goto LABEL_18;
                }
              }
              return swift_release();
            }
          }
        }
      }
    }
LABEL_18:
    unint64_t v6 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v13 << 6);
    int64_t v5 = v13;
  }
  __break(1u);
  return result;
}

void sub_1000A5D0C()
{
  qword_10021CEE0 = 0x40F5180000000000;
}

uint64_t sub_1000A5D20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = v4 + OBJC_IVAR____TtC7parsecd16DownloadResource_redirectUrl;
  uint64_t v9 = type metadata accessor for URL();
  sub_10002947C();
  sub_10002538C(v10, v11, v12, v9);
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a2;
  sub_10000E004();
  (*(void (**)(void))(v13 + 32))();
  sub_1000257C8();
  sub_1000B0874(a4, v8);
  swift_endAccess();
  return v4;
}

void sub_1000A5DF4()
{
  sub_10000DFE0();
  uint64_t v2 = type metadata accessor for URL();
  sub_100020C48();
  uint64_t v4 = v3;
  __chkstk_darwin(v5);
  sub_1000281C8();
  __chkstk_darwin(v6);
  uint64_t v7 = sub_10002572C(&qword_10021BB20);
  uint64_t v8 = sub_100016544(v7);
  __chkstk_darwin(v8);
  sub_100025008();
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v29 - v10;
  uint64_t v12 = v0 + OBJC_IVAR____TtC7parsecd16DownloadResource_redirectUrl;
  sub_100017F00();
  sub_1000B0BA0(v12, (uint64_t)v11, &qword_10021BB20);
  int v13 = sub_100027BA4((uint64_t)v11, 1, v2);
  sub_100025680((uint64_t)v11, &qword_10021BB20);
  sub_10002572C(&qword_100219988);
  int64_t v14 = (void (**)(void))(v4 + 8);
  if (v13 == 1)
  {
    uint64_t inited = (__n128 *)swift_initStackObject();
    sub_1000B1508(inited, (__n128)xmmword_1001A2A20);
    sub_100017F00();
    sub_100029310();
    v16();
    uint64_t v17 = URL.absoluteString.getter();
    unint64_t v19 = v18;
    sub_100024380();
    v20();
    inited[3].n128_u64[0] = v17;
    inited[3].n128_u64[1] = v19;
LABEL_5:
    Dictionary.init(dictionaryLiteral:)();
    sub_10000DFB8();
    return;
  }
  uint64_t v21 = (__n128 *)swift_initStackObject();
  sub_1000B1508(v21, (__n128)xmmword_1001A3830);
  sub_100017F00();
  sub_100029310();
  v22();
  uint64_t v23 = URL.absoluteString.getter();
  unint64_t v25 = v24;
  char v26 = *v14;
  sub_100024380();
  v26();
  v21[3].n128_u64[0] = v23;
  v21[3].n128_u64[1] = v25;
  strcpy((char *)&v21[4], "redirect_url");
  v21[4].n128_u8[13] = 0;
  v21[4].n128_u16[7] = -5120;
  sub_1000B0BA0(v12, v1, &qword_10021BB20);
  sub_1000184F4(v1, 1, v2);
  if (!v27)
  {
    v21[5].n128_u64[0] = URL.absoluteString.getter();
    v21[5].n128_u64[1] = v28;
    sub_100024380();
    v26();
    goto LABEL_5;
  }
  __break(1u);
}

uint64_t sub_1000A609C()
{
  swift_bridgeObjectRelease();
  type metadata accessor for URL();
  sub_10000E004();
  sub_10000E040();
  v1();
  sub_100025680(v0 + OBJC_IVAR____TtC7parsecd16DownloadResource_redirectUrl, &qword_10021BB20);
  return v0;
}

uint64_t sub_1000A6118()
{
  sub_1000A609C();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v1, v2);
}

uint64_t sub_1000A6170()
{
  return type metadata accessor for DownloadResource();
}

uint64_t type metadata accessor for DownloadResource()
{
  uint64_t result = qword_10021CF10;
  if (!qword_10021CF10) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1000A61C0()
{
  type metadata accessor for URL();
  if (v0 <= 0x3F)
  {
    sub_10003A254();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

void sub_1000A6298()
{
  sub_10000DFE0();
  uint64_t v1 = type metadata accessor for URLQueryItem();
  sub_100020C48();
  uint64_t v3 = v2;
  __chkstk_darwin(v4);
  sub_100016550();
  uint64_t v5 = sub_10002572C((uint64_t *)&unk_10021D010);
  uint64_t v6 = sub_100016544(v5);
  __chkstk_darwin(v6);
  sub_100024A64();
  uint64_t v9 = v7 - v8;
  uint64_t v11 = __chkstk_darwin(v10);
  int v13 = (char *)&v36 - v12;
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v36 - v14;
  uint64_t v16 = self;
  URL._bridgeToObjectiveC()(v17);
  unint64_t v19 = v18;
  id v20 = objc_msgSend(v16, "parsec_componentsWithURL:resolvingAgainstBaseURL:", v18, 0);

  if (v20)
  {
    static URLComponents._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v21 = type metadata accessor for URLComponents();
    uint64_t v22 = (uint64_t)v13;
    uint64_t v23 = 0;
  }
  else
  {
    uint64_t v21 = type metadata accessor for URLComponents();
    uint64_t v22 = (uint64_t)v13;
    uint64_t v23 = 1;
  }
  sub_10002538C(v22, v23, 1, v21);
  sub_1000B0814((uint64_t)v13, (uint64_t)v15, (uint64_t *)&unk_10021D010);
  sub_1000B0BA0((uint64_t)v15, v9, (uint64_t *)&unk_10021D010);
  type metadata accessor for URLComponents();
  sub_1000184F4(v9, 1, v21);
  if (v32)
  {
    sub_100025680(v9, (uint64_t *)&unk_10021D010);
  }
  else
  {
    uint64_t v24 = URLComponents.queryItems.getter();
    sub_10000E004();
    sub_10000E040();
    v25();
    if (v24)
    {
      uint64_t v36 = v15;
      uint64_t v37 = v24;
      uint64_t v26 = *(void *)(v24 + 16);
      if (v26)
      {
        uint64_t v27 = v3 + 16;
        unint64_t v28 = *(void (**)(uint64_t, unint64_t, uint64_t))(v3 + 16);
        unint64_t v29 = v37 + ((*(unsigned __int8 *)(v27 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 64));
        uint64_t v30 = *(void *)(v27 + 56);
        while (1)
        {
          v28(v0, v29, v1);
          BOOL v32 = URLQueryItem.name.getter() == 0x6E6F6973726576 && v31 == 0xE700000000000000;
          if (v32)
          {
            swift_bridgeObjectRelease();
            uint64_t v15 = v36;
            goto LABEL_20;
          }
          char v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v33) {
            break;
          }
          sub_100024380();
          v34();
          v29 += v30;
          if (!--v26) {
            goto LABEL_16;
          }
        }
        uint64_t v15 = v36;
LABEL_20:
        swift_bridgeObjectRelease();
        URLQueryItem.value.getter();
        sub_100024380();
        v35();
      }
      else
      {
LABEL_16:
        swift_bridgeObjectRelease();
        uint64_t v15 = v36;
      }
    }
  }
  sub_100025680((uint64_t)v15, (uint64_t *)&unk_10021D010);
  sub_10000DFB8();
}

void sub_1000A65E0()
{
  sub_10000DFE0();
  uint64_t v1 = type metadata accessor for URL();
  sub_100020C48();
  uint64_t v3 = v2;
  __chkstk_darwin(v4);
  sub_100016550();
  uint64_t v5 = sub_10002572C((uint64_t *)&unk_10021D010);
  uint64_t v6 = sub_100016544(v5);
  __chkstk_darwin(v6);
  sub_100024A64();
  uint64_t v9 = v7 - v8;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v37 - v11;
  URLComponents.init(url:resolvingAgainstBaseURL:)();
  sub_1000B0BA0((uint64_t)v12, v9, (uint64_t *)&unk_10021D010);
  uint64_t v13 = type metadata accessor for URLComponents();
  sub_1000184F4(v9, 1, v13);
  if (v14)
  {
    sub_100025680(v9, (uint64_t *)&unk_10021D010);
LABEL_14:
    sub_100025680((uint64_t)v12, (uint64_t *)&unk_10021D010);
    sub_10000DFB8();
    return;
  }
  uint64_t v15 = URLComponents.path.getter();
  uint64_t v17 = v16;
  sub_10000E004();
  sub_10000E040();
  v18();
  uint64_t v41 = v15;
  uint64_t v42 = v17;
  uint64_t v39 = 47;
  unint64_t v40 = 0xE100000000000000;
  sub_100021100();
  unint64_t v19 = (void *)StringProtocol.components<A>(separatedBy:)();
  swift_bridgeObjectRelease();
  if (v19[2] <= 4uLL)
  {
    swift_bridgeObjectRelease();
    if (qword_100218B00 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_10002A10C(v20, (uint64_t)qword_100236918);
    sub_100016608();
    v21();
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      unint64_t v38 = (void *)sub_1000B1540();
      *(_DWORD *)uint64_t v24 = 138412290;
      URL._bridgeToObjectiveC()((NSURL *)&unk_1001A3000);
      uint64_t v26 = v25;
      sub_10001ED4C(v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v38 = v26;
      sub_100023C70();
      v27();
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "invalid lookup hints url when processing signature: %@", v24, 0xCu);
      sub_10002572C(&qword_100219710);
      swift_arrayDestroy();
      sub_100017D40();
      sub_100017D40();
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0, v1);
    }

    goto LABEL_14;
  }
  uint64_t v28 = v19[11];
  uint64_t v41 = v19[10];
  uint64_t v42 = v28;
  swift_bridgeObjectRetain();
  v29._uint64_t countAndFlagsBits = 45;
  v29._object = (void *)0xE100000000000000;
  String.append(_:)(v29);
  if (v19[2] < 5uLL)
  {
    __break(1u);
  }
  else
  {
    uint64_t v30 = v19[12];
    uint64_t v31 = (void *)v19[13];
    swift_bridgeObjectRetain();
    v32._uint64_t countAndFlagsBits = v30;
    v32._object = v31;
    String.append(_:)(v32);
    swift_bridgeObjectRelease();
    v33._uint64_t countAndFlagsBits = 45;
    v33._object = (void *)0xE100000000000000;
    String.append(_:)(v33);
    if (v19[2] >= 3uLL)
    {
      uint64_t v34 = v19[8];
      uint64_t v35 = (void *)v19[9];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v36._uint64_t countAndFlagsBits = v34;
      v36._object = v35;
      String.append(_:)(v36);
      swift_bridgeObjectRelease();
      goto LABEL_14;
    }
  }
  __break(1u);
}

void sub_1000A69A8()
{
  sub_10000DFE0();
  uint64_t v2 = v0;
  if ((sub_10002A144(*(unsigned int **)(*(void *)(v0 + OBJC_IVAR____TtC7parsecd15DownloadManager_hasStarted) + 16), *(void *)(v0 + OBJC_IVAR____TtC7parsecd15DownloadManager_hasStarted)) & 1) == 0)
  {
    if (qword_100218B58 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_10002A10C(v3, (uint64_t)qword_100236A20);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v5))
    {
      *(_WORD *)swift_slowAlloc() = 0;
      sub_100024288((void *)&_mh_execute_header, v6, v7, "DownloadManager started. Dispatching loadResources.");
      sub_100017D40();
    }

    v16[2] = *(void *)(v2 + OBJC_IVAR____TtC7parsecd15DownloadManager_queue);
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 16) = v2;
    v17[4] = sub_1000B07F0;
    v17[5] = v8;
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 1107296256;
    v17[2] = sub_1000085EC;
    v17[3] = &unk_1001FE0D0;
    uint64_t v9 = _Block_copy(v17);
    type metadata accessor for DispatchQoS();
    v16[1] = v16;
    sub_100020C48();
    __chkstk_darwin(v10);
    sub_100029688();
    static DispatchQoS.unspecified.getter();
    uint64_t v11 = type metadata accessor for DispatchWorkItemFlags();
    sub_100020C48();
    uint64_t v13 = v12;
    __chkstk_darwin(v14);
    sub_100017DE0();
    v16[3] = _swiftEmptyArrayStorage;
    sub_10003045C();
    sub_10002572C((uint64_t *)&unk_10021BAF0);
    sub_1000301A0();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v9);
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v1, v11);
    sub_100023C70();
    v15();
    swift_release();
  }
  sub_10000DFB8();
}

void sub_1000A6C60()
{
  sub_10000DFE0();
  uint64_t v2 = sub_10002572C(&qword_10021BB20);
  uint64_t v3 = sub_100016544(v2);
  __chkstk_darwin(v3);
  sub_100024A64();
  uint64_t v6 = v4 - v5;
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v75 - v9;
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v75 - v11;
  uint64_t v89 = type metadata accessor for URL();
  sub_100020C48();
  uint64_t v14 = v13;
  __chkstk_darwin(v15);
  sub_100017D2C();
  sub_100024A74();
  __chkstk_darwin(v16);
  sub_100024FFC();
  uint64_t v88 = v17;
  sub_100029488();
  uint64_t v18 = type metadata accessor for DispatchPredicate();
  sub_100020C48();
  uint64_t v20 = v19;
  __chkstk_darwin(v21);
  sub_100016550();
  uint64_t v22 = *(void **)(v0 + OBJC_IVAR____TtC7parsecd15DownloadManager_queue);
  void *v1 = v22;
  sub_100023D14();
  v23();
  id v24 = v22;
  LOBYTE(v22) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v20 + 8))(v1, v18);
  if ((v22 & 1) == 0) {
    goto LABEL_53;
  }
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (!Strong) {
    goto LABEL_51;
  }
  uint64_t v26 = Strong;
  id v27 = [self standardUserDefaults];
  id v28 = [v27 dictionaryForKey:@"download_resources"];

  if (!v28)
  {
    swift_unknownObjectRelease();
LABEL_51:
    sub_10000DFB8();
    return;
  }
  uint64_t v78 = v26;
  uint64_t v29 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  int64_t v30 = 0;
  uint64_t v87 = v29 + 64;
  sub_100028B30();
  unint64_t v33 = v32 & v31;
  v86 = (void *)(v0 + OBJC_IVAR____TtC7parsecd15DownloadManager_resources);
  char v92 = v96;
  uint64_t v35 = v99;
  unint64_t v84 = (void (**)(uint64_t, char *, uint64_t))(v14 + 32);
  unint64_t v83 = (void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16);
  uint64_t v79 = v14 + 8;
  int64_t v90 = (unint64_t)(v34 + 63) >> 6;
  int64_t v76 = v90 - 1;
  uint64_t v93 = v29;
  uint64_t v77 = v29 + 104;
  uint64_t v80 = v12;
  uint64_t v82 = v6;
  v81 = v10;
  uint64_t v91 = v99;
  while (1)
  {
    if (v33)
    {
      unint64_t v36 = __clz(__rbit64(v33));
      v33 &= v33 - 1;
      unint64_t v37 = v36 | (v30 << 6);
      goto LABEL_7;
    }
    int64_t v41 = v30 + 1;
    if (__OFADD__(v30, 1)) {
      break;
    }
    if (v41 >= v90)
    {
      int64_t v43 = v30;
    }
    else
    {
      unint64_t v42 = *(void *)(v87 + 8 * v41);
      if (v42) {
        goto LABEL_11;
      }
      int64_t v43 = v30 + 1;
      if (v30 + 2 < v90)
      {
        unint64_t v42 = *(void *)(v87 + 8 * (v30 + 2));
        if (v42)
        {
          int64_t v41 = v30 + 2;
          goto LABEL_11;
        }
        int64_t v43 = v30 + 2;
        if (v30 + 3 < v90)
        {
          unint64_t v42 = *(void *)(v87 + 8 * (v30 + 3));
          if (v42)
          {
            int64_t v41 = v30 + 3;
LABEL_11:
            unint64_t v33 = (v42 - 1) & v42;
            unint64_t v37 = __clz(__rbit64(v42)) + (v41 << 6);
            int64_t v30 = v41;
LABEL_7:
            uint64_t v38 = *(void *)(v93 + 56);
            uint64_t v39 = (void *)(*(void *)(v93 + 48) + 16 * v37);
            uint64_t v40 = v39[1];
            *(void *)&long long v95 = *v39;
            *((void *)&v95 + 1) = v40;
            sub_10001C348(v38 + 32 * v37, (uint64_t)v92);
            swift_bridgeObjectRetain();
            goto LABEL_14;
          }
          int64_t v41 = v30 + 4;
          int64_t v43 = v30 + 3;
          if (v30 + 4 < v90)
          {
            unint64_t v42 = *(void *)(v87 + 8 * v41);
            if (v42) {
              goto LABEL_11;
            }
            while (v30 + 5 < v90)
            {
              unint64_t v42 = *(void *)(v77 + 8 * v30++);
              if (v42)
              {
                int64_t v41 = v30 + 4;
                goto LABEL_11;
              }
            }
            int64_t v43 = v76;
          }
        }
      }
    }
    unint64_t v33 = 0;
    memset(v96, 0, 32);
    int64_t v30 = v43;
    long long v95 = 0u;
LABEL_14:
    sub_1000B0814((uint64_t)&v95, (uint64_t)&v97, &qword_10021D020);
    uint64_t v44 = v98;
    if (!v98)
    {
      swift_unknownObjectRelease();
      swift_release();
      goto LABEL_51;
    }
    uint64_t v45 = v97;
    sub_10003CA28(v35, &v95);
    sub_10002572C(&qword_10021ACB0);
    if (swift_dynamicCast())
    {
      id v46 = v94;
      if (v94[2] && (sub_1000287F0(7107189, 0xE300000000000000), (v47 & 1) != 0))
      {
        sub_1000B1564();
        URL.init(string:)();
        uint64_t v48 = v89;
        swift_bridgeObjectRelease();
        sub_1000184F4((uint64_t)v12, 1, v48);
        if (v49)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_100025680((uint64_t)v12, &qword_10021BB20);
        }
        else
        {
          (*v84)(v88, v12, v48);
          sub_10002947C();
          sub_10002538C(v50, v51, v52, v48);
          if (v46[2] && (sub_1000287F0(0x7463657269646572, 0xEC0000006C72755FLL), (v53 & 1) != 0))
          {
            sub_1000B1564();
            swift_bridgeObjectRelease();
            URL.init(string:)();
            uint64_t v48 = v89;
            swift_bridgeObjectRelease();
            sub_100025680((uint64_t)v10, &qword_10021BB20);
            sub_1000B0814(v6, (uint64_t)v10, &qword_10021BB20);
          }
          else
          {
            swift_bridgeObjectRelease();
          }
          uint64_t v54 = v85;
          (*v83)(v85, v88, v48);
          sub_1000B0BA0((uint64_t)v10, v6, &qword_10021BB20);
          type metadata accessor for DownloadResource();
          uint64_t v55 = swift_allocObject();
          swift_bridgeObjectRetain();
          sub_1000A5D20(v45, v44, v54, v6);
          id v56 = v86;
          sub_1000257C8();
          swift_retain();
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v94 = (void *)*v56;
          unint64_t v58 = v94;
          void *v56 = 0x8000000000000000;
          unint64_t v59 = sub_1000287F0(v45, v44);
          uint64_t v61 = v58[2];
          BOOL v62 = (v60 & 1) == 0;
          Swift::Int v63 = v61 + v62;
          if (__OFADD__(v61, v62)) {
            goto LABEL_54;
          }
          unint64_t v64 = v59;
          char v65 = v60;
          sub_10002572C(&qword_100219780);
          if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v63))
          {
            unint64_t v66 = sub_1000287F0(v45, v44);
            if ((v65 & 1) != (v67 & 1)) {
              goto LABEL_56;
            }
            unint64_t v64 = v66;
          }
          uint64_t v68 = v94;
          if (v65)
          {
            uint64_t v69 = v94[7];
            swift_release();
            *(void *)(v69 + 8 * v64) = v55;
          }
          else
          {
            sub_10002B91C((uint64_t)&v94[v64 >> 6]);
            unint64_t v70 = (uint64_t *)(v68[6] + 16 * v64);
            *unint64_t v70 = v45;
            v70[1] = v44;
            *(void *)(v68[7] + 8 * v64) = v55;
            uint64_t v71 = v68[2];
            BOOL v72 = __OFADD__(v71, 1);
            uint64_t v73 = v71 + 1;
            if (v72) {
              goto LABEL_55;
            }
            v68[2] = v73;
            swift_bridgeObjectRetain();
          }
          void *v86 = v68;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_endAccess();
          swift_release();
          uint64_t v10 = v81;
          sub_100025680((uint64_t)v81, &qword_10021BB20);
          sub_10000E040();
          v74();
          uint64_t v6 = v82;
          uint64_t v12 = v80;
        }
        uint64_t v35 = v91;
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v35 = v91;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

void sub_1000A7474()
{
  sub_10000DFE0();
  type metadata accessor for DispatchPredicate();
  sub_100020C48();
  __chkstk_darwin(v2);
  sub_100016500();
  uint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC7parsecd15DownloadManager_queue);
  void *v1 = v3;
  sub_100023D14();
  v4();
  id v5 = v3;
  LOBYTE(v3) = _dispatchPreconditionTest(_:)();
  sub_100018488();
  v6();
  if ((v3 & 1) == 0) {
    goto LABEL_35;
  }
  if (!swift_unknownObjectWeakLoadStrong())
  {
LABEL_30:
    sub_10000DFB8();
    return;
  }
  uint64_t v7 = (void *)(v0 + OBJC_IVAR____TtC7parsecd15DownloadManager_resources);
  sub_100017F00();
  uint64_t v46 = *v7 + 64;
  sub_100028B30();
  unint64_t v10 = v9 & v8;
  int64_t v47 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v48 = v12;
  swift_bridgeObjectRetain();
  int64_t v13 = 0;
  uint64_t v14 = _swiftEmptyDictionarySingleton;
  if (!v10) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v15 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  int64_t v49 = v13;
  for (unint64_t i = v15 | (v13 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v19 << 6))
  {
    uint64_t v21 = (uint64_t *)(*(void *)(v48 + 48) + 16 * i);
    uint64_t v23 = *v21;
    uint64_t v22 = v21[1];
    swift_bridgeObjectRetain();
    swift_retain();
    sub_1000A5DF4();
    uint64_t v25 = v24;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v50 = v14;
    unint64_t v27 = sub_1000287F0(v23, v22);
    uint64_t v29 = v14[2];
    BOOL v30 = (v28 & 1) == 0;
    Swift::Int v31 = v29 + v30;
    if (__OFADD__(v29, v30))
    {
      __break(1u);
LABEL_32:
      __break(1u);
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
    unint64_t v32 = v27;
    char v33 = v28;
    sub_10002572C((uint64_t *)&unk_10021D030);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v31))
    {
      unint64_t v34 = sub_1000287F0(v23, v22);
      if ((v33 & 1) != (v35 & 1)) {
        goto LABEL_36;
      }
      unint64_t v32 = v34;
    }
    uint64_t v14 = v50;
    if (v33)
    {
      uint64_t v36 = v50[7];
      swift_bridgeObjectRelease();
      *(void *)(v36 + 8 * v32) = v25;
    }
    else
    {
      sub_10002B91C((uint64_t)&v50[v32 >> 6]);
      unint64_t v37 = (uint64_t *)(v50[6] + 16 * v32);
      *unint64_t v37 = v23;
      v37[1] = v22;
      *(void *)(v50[7] + 8 * v32) = v25;
      uint64_t v38 = v50[2];
      BOOL v39 = __OFADD__(v38, 1);
      uint64_t v40 = v38 + 1;
      if (v39) {
        goto LABEL_32;
      }
      v50[2] = v40;
      swift_bridgeObjectRetain();
    }
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    int64_t v13 = v49;
    if (v10) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v17 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      goto LABEL_33;
    }
    if (v17 >= v47) {
      goto LABEL_29;
    }
    unint64_t v18 = *(void *)(v46 + 8 * v17);
    int64_t v19 = v13 + 1;
    if (!v18)
    {
      int64_t v19 = v13 + 2;
      if (v13 + 2 >= v47) {
        goto LABEL_29;
      }
      unint64_t v18 = *(void *)(v46 + 8 * v19);
      if (!v18)
      {
        int64_t v19 = v13 + 3;
        if (v13 + 3 >= v47) {
          goto LABEL_29;
        }
        unint64_t v18 = *(void *)(v46 + 8 * v19);
        if (!v18) {
          break;
        }
      }
    }
LABEL_18:
    unint64_t v10 = (v18 - 1) & v18;
    int64_t v49 = v19;
  }
  uint64_t v20 = v13 + 4;
  if (v13 + 4 >= v47)
  {
LABEL_29:
    swift_release();
    id v41 = [self standardUserDefaults];
    sub_10002572C(&qword_10021ACB0);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    int64_t v43 = @"download_resources";
    uint64_t v44 = (void *)sub_1000B1558();
    [v44 v45];

    swift_unknownObjectRelease();
    goto LABEL_30;
  }
  unint64_t v18 = *(void *)(v46 + 8 * v20);
  if (v18)
  {
    int64_t v19 = v13 + 4;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v19 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v19 >= v47) {
      goto LABEL_29;
    }
    unint64_t v18 = *(void *)(v46 + 8 * v19);
    ++v20;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

void sub_1000A7874()
{
  sub_10000DFE0();
  uint64_t v2 = v0;
  uint64_t v4 = sub_1000CCB2C(v3);
  if (!v4)
  {
    long long v24 = 0u;
    long long v25 = 0u;
    goto LABEL_10;
  }
  uint64_t v5 = v4;
  v23[6] = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v23[7] = v6;
  AnyHashable.init<A>(_:)();
  sub_100039D58((uint64_t)v23, v5, &v24);
  swift_bridgeObjectRelease();
  sub_100039C5C((uint64_t)v23);
  if (!*((void *)&v25 + 1))
  {
LABEL_10:
    sub_100025680((uint64_t)&v24, (uint64_t *)&unk_10021BB30);
    goto LABEL_11;
  }
  sub_100023FA0(0, (unint64_t *)&qword_10021D040);
  if (swift_dynamicCast())
  {
    uint64_t v7 = (void *)v23[0];
    if (qword_100218B58 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_10002A10C(v8, (uint64_t)qword_100236A20);
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v9, v10))
    {
      *(_WORD *)swift_slowAlloc() = 0;
      sub_100024288((void *)&_mh_execute_header, v11, v12, "Received bag change notification");
      sub_100017D40();
    }

    sub_1000A69A8();
    v22[3] = *(void *)(v2 + OBJC_IVAR____TtC7parsecd15DownloadManager_queue);
    uint64_t v13 = sub_100023CFC();
    *(void *)(v13 + 16) = v2;
    *(void *)(v13 + 24) = v7;
    v23[4] = sub_1000B0DA4;
    v23[5] = v13;
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 1107296256;
    v23[2] = sub_1000085EC;
    v23[3] = &unk_1001FE260;
    uint64_t v14 = _Block_copy(v23);
    uint64_t v15 = type metadata accessor for DispatchQoS();
    v22[2] = v22;
    sub_100020C48();
    uint64_t v17 = v16;
    __chkstk_darwin(v18);
    sub_100029688();
    id v19 = v7;
    static DispatchQoS.unspecified.getter();
    type metadata accessor for DispatchWorkItemFlags();
    v22[1] = v22;
    sub_100020C48();
    __chkstk_darwin(v20);
    sub_100017CD4();
    *(void *)&long long v24 = _swiftEmptyArrayStorage;
    sub_10003045C();
    sub_10002572C((uint64_t *)&unk_10021BAF0);
    sub_1000301A0();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v14);

    sub_100023C70();
    v21();
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v1, v15);
    swift_release();
  }
LABEL_11:
  sub_10000DFB8();
}

void sub_1000A7BE4(void *a1)
{
  if (swift_unknownObjectWeakLoadStrong())
  {
    uint64_t v3 = (void *)sub_1000801C8();
    uint64_t v4 = sub_100023CFC();
    *(void *)(v4 + 16) = v1;
    *(void *)(v4 + 24) = a1;
    void v8[4] = sub_1000B0DCC;
    v8[5] = v4;
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 1107296256;
    v8[2] = sub_1000AA918;
    v8[3] = &unk_1001FE2B0;
    uint64_t v5 = _Block_copy(v8);
    id v6 = v1;
    id v7 = a1;
    swift_release();
    [v3 getAllTasksWithCompletionHandler:v5];
    _Block_release(v5);
    swift_unknownObjectRelease();
  }
}

uint64_t sub_1000A7D58(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v78 = a1;
  int64_t v76 = a2;
  uint64_t v6 = sub_10002572C(&qword_10021BB20);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  uint64_t v75 = (char *)&v67 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v72 = (uint64_t)&v67 - v10;
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v67 - v11;
  uint64_t v13 = type metadata accessor for URL();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v74 = (void (*)(void))((char *)&v67 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v73 = (char *)&v67 - v18;
  __chkstk_darwin(v17);
  uint64_t v77 = (void (*)(void))((char *)&v67 - v19);
  uint64_t v20 = type metadata accessor for DispatchPredicate();
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v23 = (uint64_t *)((char *)&v67 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  long long v24 = *(void **)(a4 + OBJC_IVAR____TtC7parsecd15DownloadManager_queue);
  *uint64_t v23 = v24;
  (*(void (**)(void *, void, uint64_t))(v21 + 104))(v23, enum case for DispatchPredicate.onQueue(_:), v20);
  id v25 = v24;
  LOBYTE(v24) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v21 + 8))(v23, v20);
  if (v24)
  {
    uint64_t result = swift_unknownObjectWeakLoadStrong();
    if (result)
    {
      uint64_t v27 = result;
      sub_1000B0BA0(a3, (uint64_t)v12, &qword_10021BB20);
      uint64_t v28 = v13;
      if (sub_100027BA4((uint64_t)v12, 1, v13) == 1)
      {
        sub_100025680((uint64_t)v12, &qword_10021BB20);
        sub_1000A84A0();
      }
      else
      {
        uint64_t v70 = v27;
        uint64_t v29 = v14;
        BOOL v30 = *(void (**)(void (*)(void), char *, uint64_t))(v14 + 32);
        v30(v77, v12, v28);
        Swift::Int v31 = (uint64_t *)(a4 + OBJC_IVAR____TtC7parsecd15DownloadManager_resources);
        swift_beginAccess();
        uint64_t v32 = *v31;
        char v33 = v76;
        swift_bridgeObjectRetain();
        uint64_t v34 = v78;
        uint64_t v35 = sub_100039E78(v78, v33, v32);
        swift_endAccess();
        swift_bridgeObjectRelease();
        uint64_t v71 = v35;
        if (!v35)
        {
          uint64_t v36 = *(void (**)(char *, void (*)(void), uint64_t))(v29 + 16);
          uint64_t v68 = v30;
          unint64_t v37 = v73;
          v36(v73, v77, v28);
          uint64_t v69 = v29;
          uint64_t v38 = v72;
          sub_10002538C(v72, 1, 1, v28);
          type metadata accessor for DownloadResource();
          uint64_t v39 = swift_allocObject();
          swift_bridgeObjectRetain();
          uint64_t v40 = (uint64_t)v37;
          uint64_t v41 = v38;
          BOOL v30 = v68;
          uint64_t v29 = v69;
          sub_1000A5D20(v34, (uint64_t)v33, v40, v41);
          swift_beginAccess();
          swift_bridgeObjectRetain();
          uint64_t v42 = swift_retain();
          uint64_t v71 = v39;
          sub_10003BB8C(v42, v34, (uint64_t)v33, v43, v44, v45, v46, v47, v67, (uint64_t)v68);
          swift_endAccess();
          swift_bridgeObjectRelease();
        }
        uint64_t v48 = v75;
        sub_1000A8F5C((uint64_t)v75);
        if (sub_100027BA4((uint64_t)v48, 1, v28) == 1)
        {
          swift_release();
          (*(void (**)(void (*)(void), uint64_t))(v29 + 8))(v77, v28);
          sub_100025680((uint64_t)v48, &qword_10021BB20);
        }
        else
        {
          v30(v74, v48, v28);
          uint64_t v49 = v71 + OBJC_IVAR____TtC7parsecd16DownloadResource_url;
          swift_beginAccess();
          uint64_t v50 = v73;
          (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v73, v49, v28);
          URL._bridgeToObjectiveC()(v51);
          char v53 = v52;
          uint64_t v75 = *(char **)(v29 + 8);
          ((void (*)(char *, uint64_t))v75)(v50, v28);
          uint64_t v54 = v77;
          URL._bridgeToObjectiveC()(v55);
          uint64_t v57 = v56;
          unsigned __int8 v58 = sub_1000B0DE4(v53, v56);

          if (v58)
          {
            id v59 = [self defaultManager];
            URL.path.getter();
            NSString v60 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
            unsigned int v61 = [v59 fileExistsAtPath:v60];

            if (v61)
            {
              if ((sub_1000A90F0(v78, (uint64_t)v33) & 1) == 0)
              {
                unint64_t v66 = (void (*)(void (*)(void), uint64_t))v75;
                ((void (*)(void (*)(void), uint64_t))v75)(v74, v28);
                swift_release();
                v66(v54, v28);
                return swift_unknownObjectRelease();
              }
              uint64_t v62 = 0xE600000000000000;
              uint64_t v63 = 0x70756B6F6F6CLL;
            }
            else
            {
              uint64_t v62 = 0xE700000000000000;
              uint64_t v63 = 0x676E697373696DLL;
            }
          }
          else
          {
            uint64_t v62 = 0xE600000000000000;
            uint64_t v63 = 0x657461647075;
          }
          uint64_t v64 = v78;
          sub_1000A90F0(v78, (uint64_t)v33);
          swift_bridgeObjectRetain();
          sub_1000A9190(v64, v33, v54, v63, v62);
          swift_bridgeObjectRelease();
          char v65 = (void (*)(void (*)(void), uint64_t))v75;
          ((void (*)(void (*)(void), uint64_t))v75)(v74, v28);
          swift_release();
          v65(v54, v28);
          swift_bridgeObjectRelease();
        }
      }
      return swift_unknownObjectRelease();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1000A84A0()
{
  sub_10000DFE0();
  uint64_t v2 = v0;
  uint64_t v4 = v3;
  unint64_t v6 = v5;
  CFStringRef v94 = v7;
  uint64_t v8 = sub_10002572C(&qword_10021BB20);
  uint64_t v9 = sub_100016544(v8);
  __chkstk_darwin(v9);
  sub_10000E04C();
  uint64_t v11 = sub_100023EBC(v10);
  sub_100020C48();
  uint64_t v13 = v12;
  __chkstk_darwin(v14);
  sub_100024998();
  uint64_t v15 = type metadata accessor for DispatchPredicate();
  sub_100020C48();
  uint64_t v17 = v16;
  __chkstk_darwin(v18);
  uint64_t v20 = (uint64_t *)((char *)&v82 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v21 = *(void **)&v2[OBJC_IVAR____TtC7parsecd15DownloadManager_queue];
  *uint64_t v20 = v21;
  sub_100023D14();
  v22();
  id v23 = v21;
  LOBYTE(v21) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v17 + 8))(v20, v15);
  if ((v21 & 1) == 0)
  {
    __break(1u);
    goto LABEL_31;
  }
  int v92 = v4;
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (!Strong) {
    goto LABEL_29;
  }
  uint64_t v4 = Strong;
  id v25 = &v2[OBJC_IVAR____TtC7parsecd15DownloadManager_resources];
  swift_beginAccess();
  uint64_t v26 = *(void *)v25;
  swift_bridgeObjectRetain();
  CFStringRef v27 = v94;
  uint64_t v28 = sub_100039E78(v94, v6, v26);
  swift_endAccess();
  swift_bridgeObjectRelease();
  swift_release();
  if (v28)
  {
    sub_1000257C8();
    swift_bridgeObjectRetain();
    sub_1000BAD6C((uint64_t)v27, v6);
    swift_endAccess();
    swift_bridgeObjectRelease();
    swift_release();
    sub_1000A7474();
    uint64_t v29 = (void *)sub_1000801C8();
    uint64_t v91 = v4;
    BOOL v30 = *(void **)(v4 + 264);
    Swift::Int v31 = (void *)swift_allocObject();
    v31[2] = v29;
    v31[3] = v27;
    v31[4] = v6;
    v31[5] = v2;
    BOOL v99 = sub_1000B1294;
    unint64_t v100 = v31;
    *(void *)&long long v96 = _NSConcreteStackBlock;
    *((void *)&v96 + 1) = 1107296256;
    uint64_t v97 = sub_1000085EC;
    uint64_t v98 = &unk_1001FE350;
    uint64_t v32 = _Block_copy(&v96);
    uint64_t v85 = type metadata accessor for DispatchQoS();
    v86 = &v82;
    sub_100020C48();
    uint64_t v90 = v11;
    uint64_t v34 = v33;
    __chkstk_darwin(v35);
    sub_100016550();
    swift_bridgeObjectRetain();
    id v36 = v30;
    uint64_t v88 = v13;
    id v37 = v36;
    id v83 = v29;
    uint64_t v38 = v2;
    static DispatchQoS.unspecified.getter();
    type metadata accessor for DispatchWorkItemFlags();
    uint64_t v89 = v1;
    unint64_t v84 = &v82;
    sub_100020C48();
    unint64_t v87 = v6;
    __chkstk_darwin(v39);
    sub_100017DC8();
    long long v95 = _swiftEmptyArrayStorage;
    sub_10003045C();
    sub_10002572C((uint64_t *)&unk_10021BAF0);
    sub_1000301A0();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v32);

    uint64_t v13 = v88;
    uint64_t v4 = v91;
    uint64_t v1 = v89;
    sub_100023C70();
    v40();
    unint64_t v6 = v87;
    CFStringRef v41 = v27;
    CFStringRef v27 = v94;
    (*(void (**)(const __CFString *, uint64_t))(v34 + 8))(v41, v85);
    uint64_t v11 = v90;
    swift_release();
  }
  if ((v92 & 1) == 0)
  {
LABEL_23:
    swift_unknownObjectRelease();
    goto LABEL_29;
  }
  uint64_t v42 = v93;
  sub_1000A8F5C(v93);
  sub_1000184F4(v42, 1, v11);
  if (v70)
  {
    swift_unknownObjectRelease();
    sub_100025680(v93, &qword_10021BB20);
    goto LABEL_29;
  }
  sub_10000E0F4();
  v43();
  id v44 = [self defaultManager];
  URL._bridgeToObjectiveC()(v45);
  uint64_t v47 = v46;
  *(void *)&long long v96 = 0;
  uint64_t v48 = (void *)sub_1000B1558();
  unsigned int v50 = [v48 v49];

  uint64_t v51 = (void *)v96;
  if (v50)
  {
    uint64_t v52 = self;
    id v53 = v51;
    id v54 = [v52 defaultCenter];
    CFStringRef v94 = @"PARFileDeletedNotification";
    sub_10002572C((uint64_t *)&unk_10021BAE0);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1001A2A20;
    *(void *)&long long v96 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *((void *)&v96 + 1) = v56;
    AnyHashable.init<A>(_:)();
    *(void *)(inited + 96) = &type metadata for String;
    *(void *)(inited + 72) = v27;
    *(void *)(inited + 80) = v6;
    swift_bridgeObjectRetain();
    uint64_t v57 = Dictionary.init(dictionaryLiteral:)();
    sub_10010553C((uint64_t)v94, 0, v57, v54);
    swift_unknownObjectRelease();

LABEL_28:
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v1, v11);
    goto LABEL_29;
  }
  id v58 = (id)v96;
  _convertNSErrorToError(_:)();

  swift_willThrow();
  id v59 = (void *)_convertErrorToNSError(_:)();
  id v60 = [v59 userInfo];

  uint64_t v61 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v62 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_100039DBC(v62, v63, v61, &v96);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v98)
  {
    sub_100023FA0(0, (unint64_t *)&unk_10021D060);
    if ((swift_dynamicCast() & 1) == 0) {
      goto LABEL_24;
    }
    id v64 = v95;
    id v65 = [v95 domain];
    uint64_t v66 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v68 = v67;

    BOOL v70 = v66 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v68 == v69;
    if (v70)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v71 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v71 & 1) == 0)
      {

        goto LABEL_24;
      }
    }
    id v72 = [v64 code];

    if (v72 == (id)2)
    {
      sub_100016614();
      v73();
      swift_errorRelease();
      goto LABEL_23;
    }
  }
  else
  {
    sub_100025680((uint64_t)&v96, (uint64_t *)&unk_10021BB30);
  }
LABEL_24:
  if (qword_100218B58 != -1) {
LABEL_31:
  }
    swift_once();
  uint64_t v74 = type metadata accessor for Logger();
  sub_10002A10C(v74, (uint64_t)qword_100236A20);
  swift_bridgeObjectRetain();
  swift_errorRetain();
  swift_bridgeObjectRetain();
  swift_errorRetain();
  uint64_t v75 = Logger.logObject.getter();
  os_log_type_t v76 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v75, v76))
  {
    swift_unknownObjectRelease();

    swift_errorRelease();
    swift_errorRelease();
    swift_bridgeObjectRelease_n();
    swift_errorRelease();
    goto LABEL_28;
  }
  uint64_t v77 = (_DWORD *)sub_10001D784();
  uint64_t v78 = sub_1000B1540();
  uint64_t v89 = v1;
  uint64_t v79 = (void *)v78;
  *(void *)&long long v96 = sub_10001AB54();
  _DWORD *v77 = 136315394;
  uint64_t v91 = v4;
  swift_bridgeObjectRetain();
  long long v95 = (void *)sub_10001C274((uint64_t)v94, v6, (uint64_t *)&v96);
  uint64_t v90 = v11;
  sub_10002EA94();
  swift_bridgeObjectRelease_n();
  uint64_t v80 = (void *)sub_1000B1520();
  long long v95 = v80;
  sub_10002EA94();
  *uint64_t v79 = v80;
  swift_errorRelease();
  swift_errorRelease();
  sub_10001AA8C((void *)&_mh_execute_header, v75, v76, "error trying to remove %s: %@");
  sub_10002572C(&qword_100219710);
  swift_arrayDestroy();
  sub_100017D40();
  swift_arrayDestroy();
  sub_100017D40();
  sub_100017D40();
  swift_unknownObjectRelease();

  swift_errorRelease();
  sub_100023C70();
  v81();
LABEL_29:
  sub_10000DFB8();
}

void sub_1000A8F5C(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_10002572C(&qword_10021BB20);
  uint64_t v4 = sub_100016544(v3);
  __chkstk_darwin(v4);
  sub_100016500();
  if (swift_unknownObjectWeakLoadStrong())
  {
    id v5 = [self defaultManager];
    NSFileManager.parsecdAssetsDirectoryURL.getter();

    uint64_t v6 = type metadata accessor for URL();
    sub_1000184F4(v1, 1, v6);
    if (v7)
    {
      swift_unknownObjectRelease();
      sub_100025680(v1, &qword_10021BB20);
      uint64_t v14 = a1;
      uint64_t v15 = 1;
    }
    else
    {
      URL.appendingPathComponent(_:isDirectory:)();
      swift_unknownObjectRelease();
      sub_10000E004();
      sub_10000E040();
      v13();
      uint64_t v14 = a1;
      uint64_t v15 = 0;
    }
    sub_10002538C(v14, v15, 1, v6);
    sub_100024390();
  }
  else
  {
    type metadata accessor for URL();
    sub_10002947C();
    sub_100024390();
    sub_10002538C(v8, v9, v10, v11);
  }
}

uint64_t sub_1000A90F0(uint64_t a1, uint64_t a2)
{
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == a1 && v4 == a2) {
    goto LABEL_12;
  }
  char v6 = sub_100021CC8();
  swift_bridgeObjectRelease();
  if ((v6 & 1) == 0)
  {
    if (static String._unconditionallyBridgeFromObjectiveC(_:)() != a1 || v8 != a2)
    {
      char v7 = sub_100021CC8();
LABEL_13:
      swift_bridgeObjectRelease();
      return v7 & 1;
    }
LABEL_12:
    char v7 = 1;
    goto LABEL_13;
  }
  char v7 = 1;
  return v7 & 1;
}

void sub_1000A9190(uint64_t a1, void *a2, void (*a3)(void), uint64_t a4, uint64_t a5)
{
  uint64_t v11 = type metadata accessor for Client();
  uint64_t v12 = sub_100016544(v11);
  __chkstk_darwin(v12);
  sub_10000E04C();
  uint64_t v82 = v13;
  sub_100029488();
  type metadata accessor for Date();
  sub_100020C48();
  __chkstk_darwin(v14);
  sub_10000E04C();
  uint64_t v15 = sub_10002572C(&qword_10021BB20);
  uint64_t v16 = sub_100016544(v15);
  __chkstk_darwin(v16);
  sub_10000E04C();
  uint64_t v80 = v17;
  uint64_t v18 = sub_10002572C(&qword_10021DC60);
  uint64_t v19 = sub_100016544(v18);
  __chkstk_darwin(v19);
  sub_100017DE0();
  uint64_t v85 = type metadata accessor for URLRequest();
  sub_100020C48();
  uint64_t v83 = v20;
  __chkstk_darwin(v21);
  sub_100017D2C();
  __chkstk_darwin(v22);
  sub_100021308();
  __chkstk_darwin(v23);
  sub_100024FFC();
  uint64_t v84 = v24;
  sub_100029488();
  type metadata accessor for DispatchPredicate();
  sub_100020C48();
  uint64_t v26 = v25;
  __chkstk_darwin(v27);
  sub_100017DC8();
  uint64_t v28 = *(void **)(v5 + OBJC_IVAR____TtC7parsecd15DownloadManager_queue);
  *char v7 = v28;
  sub_100023D14();
  v29();
  id v30 = v28;
  LOBYTE(v28) = _dispatchPreconditionTest(_:)();
  uint64_t v31 = v26 + 8;
  sub_100019BC8();
  v32();
  if ((v28 & 1) == 0)
  {
    __break(1u);
LABEL_27:
    swift_once();
    goto LABEL_8;
  }
  if (!swift_unknownObjectWeakLoadStrong()) {
    return;
  }
  uint64_t v31 = a1;
  sub_1000A9B80(a1, a2, a3, a4, a5, v8);
  if (v6)
  {
LABEL_4:
    swift_unknownObjectRelease();
    return;
  }
  if (sub_100027BA4(v8, 1, v85) != 1)
  {
    sub_10000E0F4();
    v45();
    if (qword_100218B58 != -1) {
      swift_once();
    }
    uint64_t v46 = type metadata accessor for Logger();
    sub_10002A10C(v46, (uint64_t)qword_100236A20);
    uint64_t v47 = *(void (**)(void))(v83 + 16);
    sub_10002A00C();
    v47();
    sub_10002A00C();
    v47();
    swift_bridgeObjectRetain_n();
    uint64_t v48 = Logger.logObject.getter();
    os_log_type_t v49 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v48, v49))
    {
      uint64_t v50 = swift_slowAlloc();
      v90[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v50 = 136315906;
      URLRequest.url.getter();
      uint64_t v51 = type metadata accessor for URL();
      uint64_t v79 = v48;
      if (sub_100027BA4(v80, 1, v51) == 1)
      {
        sub_100025680(v80, &qword_10021BB20);
        uint64_t v52 = 0;
      }
      else
      {
        URL.absoluteString.getter();
        uint64_t v52 = v55;
        sub_10000E004();
        (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v80, v51);
      }
      v89[1] = v52;
      sub_10002572C(&qword_10021D050);
      uint64_t v57 = String.init<A>(describing:)();
      v89[0] = sub_10001C274(v57, v58, v90);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v81 = *(void (**)(void))(v83 + 8);
      sub_100016614();
      v59();
      *(_WORD *)(v50 + 12) = 2080;
      if (a5) {
        uint64_t v60 = a4;
      }
      else {
        uint64_t v60 = 0;
      }
      if (a5) {
        unint64_t v61 = a5;
      }
      else {
        unint64_t v61 = 0xE000000000000000;
      }
      swift_bridgeObjectRetain();
      sub_10001C274(v60, v61, v90);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v50 + 22) = 2048;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v50 + 32) = 2080;
      URLRequest.allHTTPHeaderFields.getter();
      sub_10002572C(&qword_10021D058);
      uint64_t v62 = String.init<A>(describing:)();
      v89[0] = sub_10001C274(v62, v63, v90);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100016614();
      v81();
      id v54 = v81;
      _os_log_impl((void *)&_mh_execute_header, v79, v49, "starting download of %s reason: %s delay: %f headers: %s", (uint8_t *)v50, 0x2Au);
      swift_arrayDestroy();
      sub_100017D40();
      sub_100017D40();
    }
    else
    {
      id v53 = *(void (**)(void))(v83 + 8);
      sub_100016614();
      v53();
      swift_bridgeObjectRelease_n();
      sub_100016614();
      v53();
      id v54 = v53;
    }
    id v64 = (void *)sub_1000801C8();
    Class isa = URLRequest._bridgeToObjectiveC()().super.isa;
    uint64_t v66 = (void *)sub_1000B1558();
    id v68 = [v66 v67];

    id v69 = v68;
    objc_msgSend(v69, "set_nw_activity:", nw_activity_create());

    swift_unknownObjectRelease();
    id v70 = v69;
    Date.init(timeIntervalSinceNow:)();
    Class v71 = Date._bridgeToObjectiveC()().super.isa;
    sub_10000E040();
    v72();
    uint64_t v73 = (void *)sub_1000B1558();
    [v73 v74];

    [v70 resume];
    uint64_t v75 = sub_100010DE0();
    static Client.parsecd.getter();
    id v76 = v70;
    id v77 = objc_msgSend(v76, "_nw_activity");
    type metadata accessor for ResourceAccessNetworkSpan();
    uint64_t v78 = swift_allocObject();
    sub_1000B0F0C(v75, 9, v82, 0, 1, v76, (uint64_t)v77, 0, 0xE000000000000000, v78);
    [v76 taskIdentifier];
    swift_beginAccess();
    swift_retain();
    sub_10003BB98();
    swift_endAccess();

    swift_release();
    swift_unknownObjectRelease();
    ((void (*)(uint64_t, uint64_t))v54)(v84, v85);
    return;
  }
  sub_100025680(v8, &qword_10021DC60);
  if (qword_100218B58 != -1) {
    goto LABEL_27;
  }
LABEL_8:
  uint64_t v33 = type metadata accessor for Logger();
  sub_10002A10C(v33, (uint64_t)qword_100236A20);
  swift_bridgeObjectRetain_n();
  uint64_t v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v34, v35))
  {

    swift_bridgeObjectRelease_n();
    goto LABEL_4;
  }
  unint64_t v36 = (unint64_t)a2;
  id v37 = (_DWORD *)swift_slowAlloc();
  v89[0] = swift_slowAlloc();
  *id v37 = 136315138;
  swift_bridgeObjectRetain();
  uint64_t v38 = sub_10001C274(v31, v36, v89);
  sub_10001ED4C(v38);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease_n();
  sub_1000293B8();
  _os_log_impl(v39, v40, v41, v42, v43, v44);
  swift_arrayDestroy();
  sub_100017D40();
  sub_100017D40();
  swift_unknownObjectRelease();
}

uint64_t sub_1000A9B80@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void (*a3)(void)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10 = v7;
  uint64_t v57 = a5;
  uint64_t v53 = a4;
  uint64_t v55 = a3;
  id v59 = a2;
  uint64_t v58 = a1;
  uint64_t v54 = a6;
  uint64_t v11 = sub_10002572C(&qword_10021DC60);
  uint64_t v12 = sub_100016544(v11);
  __chkstk_darwin(v12);
  sub_100024998();
  uint64_t v56 = type metadata accessor for URLRequest();
  sub_100020C48();
  uint64_t v52 = v13;
  __chkstk_darwin(v14);
  sub_100017D2C();
  uint64_t v50 = v15;
  __chkstk_darwin(v16);
  sub_100024FFC();
  uint64_t v51 = v17;
  uint64_t v18 = sub_100029488();
  uint64_t v19 = type metadata accessor for PegasusContext(v18);
  uint64_t v20 = sub_100016544(v19);
  __chkstk_darwin(v20);
  sub_100017CD4();
  uint64_t v21 = (void *)type metadata accessor for DispatchPredicate();
  sub_100020C48();
  __chkstk_darwin(v22);
  uint64_t v24 = *(void **)(v6 + OBJC_IVAR____TtC7parsecd15DownloadManager_queue);
  *(uint64_t *)((char *)&v49 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0)) = (uint64_t)v24;
  sub_100023D14();
  v25();
  id v26 = v24;
  LOBYTE(v24) = _dispatchPreconditionTest(_:)();
  sub_100023C70();
  v27();
  if ((v24 & 1) == 0)
  {
    __break(1u);
    goto LABEL_25;
  }
  if (swift_unknownObjectWeakLoadStrong())
  {
    sub_1000A90F0(v58, (uint64_t)v59);
    if (v57)
    {
      if ((v53 != 0x676E697373696DLL || v57 != 0xE700000000000000)
        && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        uint64_t v29 = (uint64_t *)(v6 + OBJC_IVAR____TtC7parsecd15DownloadManager_resources);
        swift_beginAccess();
        uint64_t v30 = *v29;
        uint64_t v31 = v59;
        swift_bridgeObjectRetain();
        uint64_t v32 = sub_100039E78(v58, v31, v30);
        swift_bridgeObjectRelease();
        swift_endAccess();
        if (v32)
        {
          sub_1000AA0B4(v32);
          swift_release();
        }
      }
    }
    sub_100023FDC(v8);
    type metadata accessor for PARNetworkRequestFactory();
    uint64_t inited = swift_initStackObject();
    uint64_t v37 = swift_retain();
    sub_10001E5C0(v37, inited);
    sub_10008E920();
    if (v10)
    {
      swift_unknownObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      return sub_100028F88(v8);
    }
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v35 = v56;
    if (sub_100027BA4((uint64_t)isa, 1, v56) == 1)
    {
      sub_100028F88(v8);
      swift_unknownObjectRelease();
      sub_100025680((uint64_t)isa, &qword_10021DC60);
      uint64_t v33 = 1;
      uint64_t v34 = v54;
      return sub_10002538C(v34, v33, 1, v35);
    }
    uint64_t v39 = *(void (**)(void))(v52 + 32);
    uint64_t v6 = v51;
    v39();
    Class isa = URLRequest._bridgeToObjectiveC()().super.isa;
    self;
    uint64_t v40 = swift_dynamicCastObjCClass();
    if (!v40)
    {

      uint64_t v35 = v56;
      goto LABEL_20;
    }
    uint64_t v21 = (void *)v40;
    uint64_t v55 = v39;
    if (qword_100218C10 == -1)
    {
LABEL_18:
      [v21 _setTimeWindowDuration:*(double *)&qword_10021CEE0];
      uint64_t v41 = v50;
      static URLRequest._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v35 = v56;
      sub_10000E040();
      v42();
      uint64_t v43 = v41;
      uint64_t v39 = v55;
      ((void (*)(uint64_t, uint64_t, uint64_t))v55)(v6, v43, v35);
LABEL_20:
      v44._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
      v44._object = (void *)0x80000001001B6360;
      v45.value._uint64_t countAndFlagsBits = v58;
      v45.value._object = v59;
      URLRequest.setValue(_:forHTTPHeaderField:)(v45, v44);
      uint64_t v46 = v57;
      if (v57)
      {
        v47._object = (void *)0x80000001001B6380;
        uint64_t v48 = v53;
        v47._uint64_t countAndFlagsBits = 0xD000000000000017;
        URLRequest.setValue(_:forHTTPHeaderField:)(*(Swift::String_optional *)(&v46 - 1), v47);
      }
      swift_unknownObjectRelease();
      sub_100028F88(v8);
      uint64_t v34 = v54;
      ((void (*)(uint64_t, uint64_t, uint64_t))v39)(v54, v6, v35);
      uint64_t v33 = 0;
      return sub_10002538C(v34, v33, 1, v35);
    }
LABEL_25:
    swift_once();
    goto LABEL_18;
  }
  uint64_t v33 = 1;
  uint64_t v34 = v54;
  uint64_t v35 = v56;
  return sub_10002538C(v34, v33, 1, v35);
}

void sub_1000AA0B4(uint64_t a1)
{
  uint64_t v3 = sub_10002572C(&qword_10021BB20);
  uint64_t v4 = sub_100016544(v3);
  __chkstk_darwin(v4);
  sub_100016550();
  uint64_t v5 = type metadata accessor for URL();
  sub_100020C48();
  __chkstk_darwin(v6);
  sub_100025008();
  __chkstk_darwin(v7);
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void *)(a1 + 24);
  swift_bridgeObjectRetain();
  LOBYTE(v8) = sub_1000A90F0(v8, v9);
  swift_bridgeObjectRelease();
  if ((v8 & 1) == 0) {
    goto LABEL_5;
  }
  uint64_t v10 = a1 + OBJC_IVAR____TtC7parsecd16DownloadResource_redirectUrl;
  sub_100017F00();
  sub_1000B0BA0(v10, v1, &qword_10021BB20);
  uint64_t v11 = sub_10002B040();
  sub_1000184F4(v11, v12, v5);
  if (v13)
  {
    sub_100025680(v1, &qword_10021BB20);
LABEL_5:
    sub_100017F00();
    sub_100016608();
    v14();
    sub_1000A6298();
    goto LABEL_6;
  }
  sub_10000E0F4();
  v15();
  sub_1000A65E0();
LABEL_6:
  sub_100024380();
  v16();
  sub_100024390();
}

void sub_1000AA288(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = a2;
  v8[3] = a3;
  void v8[4] = a4;
  v11[4] = sub_1000B12E0;
  v11[5] = v8;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 1107296256;
  v11[2] = sub_1000AA918;
  v11[3] = &unk_1001FE3A0;
  uint64_t v9 = _Block_copy(v11);
  swift_bridgeObjectRetain();
  id v10 = a4;
  swift_release();
  [a1 getAllTasksWithCompletionHandler:v9];
  _Block_release(v9);
}

uint64_t sub_1000AA380(unint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v8 = result;
    if (!result) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v8 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (!v8) {
      goto LABEL_9;
    }
  }
  if (v8 < 1)
  {
    __break(1u);
    return result;
  }
  uint64_t v10 = 0;
  do
  {
    if ((a1 & 0xC000000000000001) != 0) {
      id v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v11 = *(id *)(a1 + 8 * v10 + 32);
    }
    uint64_t v12 = v11;
    ++v10;
    char v13 = v11;
    sub_1000AA490(&v13, a2, a3, a4);
  }
  while (v8 != v10);
LABEL_9:

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000AA490(void **a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v8 = sub_10002572C(&qword_10021DC60);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  id v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  char v13 = (char *)&v38 - v12;
  uint64_t v14 = *a1;
  id v15 = [v14 originalRequest];
  if (v15)
  {
    uint64_t v16 = v15;
    static URLRequest._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v17 = type metadata accessor for URLRequest();
    uint64_t v18 = (uint64_t)v11;
    uint64_t v19 = 0;
  }
  else
  {
    uint64_t v17 = type metadata accessor for URLRequest();
    uint64_t v18 = (uint64_t)v11;
    uint64_t v19 = 1;
  }
  sub_10002538C(v18, v19, 1, v17);
  sub_1000B0814((uint64_t)v11, (uint64_t)v13, &qword_10021DC60);
  type metadata accessor for URLRequest();
  if (sub_100027BA4((uint64_t)v13, 1, v17) == 1) {
    return sub_100025680((uint64_t)v13, &qword_10021DC60);
  }
  uint64_t v21 = URLRequest.allHTTPHeaderFields.getter();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(*(void *)(v17 - 8) + 8))(v13, v17);
  if (v21)
  {
    uint64_t v22 = sub_100039E20(0xD00000000000001BLL, 0x80000001001B6360, v21);
    uint64_t v24 = v23;
    uint64_t result = swift_bridgeObjectRelease();
    if (v24)
    {
      if (v22 == a2 && v24 == a3)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t result = swift_bridgeObjectRelease();
        if ((v26 & 1) == 0) {
          return result;
        }
      }
      [v14 cancel];
      id v27 = [v14 taskIdentifier];
      uint64_t v41 = *(void *)&a4[OBJC_IVAR____TtC7parsecd15DownloadManager_queue];
      uint64_t v28 = swift_allocObject();
      *(void *)(v28 + 16) = a4;
      *(void *)(v28 + 24) = v27;
      aBlock[4] = sub_1000B1324;
      aBlock[5] = v28;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_1000085EC;
      aBlock[3] = &unk_1001FE3F0;
      uint64_t v29 = _Block_copy(aBlock);
      uint64_t v39 = type metadata accessor for DispatchQoS();
      uint64_t v40 = &v38;
      uint64_t v30 = *(void *)(v39 - 8);
      __chkstk_darwin(v39);
      uint64_t v32 = (char *)&v38 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v33 = a4;
      static DispatchQoS.unspecified.getter();
      uint64_t v34 = type metadata accessor for DispatchWorkItemFlags();
      uint64_t v38 = (uint64_t)&v38;
      uint64_t v35 = *(void *)(v34 - 8);
      __chkstk_darwin(v34);
      uint64_t v37 = (char *)&v38 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
      aBlock[7] = _swiftEmptyArrayStorage;
      sub_10003045C();
      sub_10002572C((uint64_t *)&unk_10021BAF0);
      sub_1000301A0();
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v29);
      (*(void (**)(char *, uint64_t))(v35 + 8))(v37, v34);
      (*(void (**)(char *, uint64_t))(v30 + 8))(v32, v39);
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_1000AA918(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  sub_100023FA0(0, &qword_10021D048);
  uint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  v1(v2);
  swift_release();

  return swift_bridgeObjectRelease();
}

void sub_1000AA99C(uint64_t a1, uint64_t a2)
{
  type metadata accessor for DispatchPredicate();
  sub_100020C48();
  __chkstk_darwin(v6);
  sub_100017DC8();
  uint64_t v7 = *(void **)(v2 + OBJC_IVAR____TtC7parsecd15DownloadManager_queue);
  void *v3 = v7;
  sub_100023D14();
  v8();
  id v9 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  sub_100016614();
  v10();
  if (v7)
  {
    id v11 = (uint64_t *)(v2 + OBJC_IVAR____TtC7parsecd15DownloadManager_resources);
    swift_beginAccess();
    uint64_t v12 = *v11;
    swift_bridgeObjectRetain();
    sub_100039E78(a1, a2, v12);
    swift_endAccess();
    swift_bridgeObjectRelease();
    sub_100024390();
  }
  else
  {
    __break(1u);
  }
}

void sub_1000AAAD0()
{
  sub_10000DFE0();
  uint64_t v2 = v1;
  unint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = sub_10002572C(&qword_10021BB20);
  uint64_t v8 = sub_100016544(v7);
  __chkstk_darwin(v8);
  sub_100024998();
  uint64_t v9 = type metadata accessor for URL();
  sub_100020C48();
  uint64_t v11 = v10;
  __chkstk_darwin(v12);
  sub_100024A64();
  uint64_t v15 = v13 - v14;
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v40 - v17;
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v20 = Strong;
    sub_1000A8F5C(v0);
    sub_1000184F4(v0, 1, v9);
    if (v21)
    {
      swift_unknownObjectRelease();
      sub_100025680(v0, &qword_10021BB20);
    }
    else
    {
      sub_10000E0F4();
      v22();
      uint64_t v41 = v6;
      if (!v2) {
        goto LABEL_8;
      }
      id v23 = [self defaultManager];
      URL.path.getter();
      NSString v24 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v45[0] = 0;
      id v25 = [v23 attributesOfItemAtPath:v24 error:v45];

      id v26 = v45[0];
      if (v25)
      {
        type metadata accessor for FileAttributeKey(0);
        sub_1000B1340((unint64_t *)&qword_100219240, type metadata accessor for FileAttributeKey);
        uint64_t v40 = (void *)v4;
        uint64_t v42 = v20;
        static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v43 = v11;
        id v27 = v26;

        Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        uint64_t v29 = isa;
        Class *v2 = isa;
LABEL_8:
        sub_100023FA0(0, (unint64_t *)&qword_10021D070);
        sub_100016608();
        v30();
        sub_1000AB018(v15);
        sub_100018488();
        v31();
        swift_unknownObjectRelease();
        goto LABEL_14;
      }
      id v32 = v45[0];
      _convertNSErrorToError(_:)();

      swift_willThrow();
      if (qword_100218B58 != -1) {
        swift_once();
      }
      uint64_t v33 = type metadata accessor for Logger();
      sub_10002A10C(v33, (uint64_t)qword_100236A20);
      swift_bridgeObjectRetain();
      swift_errorRetain();
      swift_bridgeObjectRetain();
      swift_errorRetain();
      uint64_t v34 = Logger.logObject.getter();
      os_log_type_t v35 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v34, v35))
      {
        uint64_t v36 = (_DWORD *)sub_10001D784();
        uint64_t v37 = (void *)sub_1000B1540();
        uint64_t v40 = (void *)sub_10001AB54();
        v45[0] = v40;
        *uint64_t v36 = 136315394;
        uint64_t v43 = v11;
        swift_bridgeObjectRetain();
        uint64_t v44 = sub_10001C274(v41, v4, (uint64_t *)v45);
        uint64_t v42 = v20;
        sub_10002EA94();
        swift_bridgeObjectRelease_n();
        uint64_t v38 = sub_1000B1520();
        uint64_t v44 = v38;
        sub_10002EA94();
        *uint64_t v37 = v38;
        swift_errorRelease();
        swift_errorRelease();
        sub_10001AA8C((void *)&_mh_execute_header, v34, v35, "no file handle for %s: %@");
        sub_10002572C(&qword_100219710);
        swift_arrayDestroy();
        sub_100017D40();
        swift_arrayDestroy();
        sub_100017D40();
        sub_100017D40();
        swift_unknownObjectRelease();

        swift_errorRelease();
        sub_10000E040();
        v39();
      }
      else
      {
        swift_unknownObjectRelease();

        swift_errorRelease();
        swift_errorRelease();
        swift_bridgeObjectRelease_n();
        swift_errorRelease();
        (*(void (**)(char *, uint64_t))(v11 + 8))(v18, v9);
      }
    }
  }
LABEL_14:
  sub_10000DFB8();
}

id sub_1000AB018(uint64_t a1)
{
  URL._bridgeToObjectiveC()(__stack_chk_guard);
  unint64_t v3 = v2;
  id v12 = 0;
  id v4 = [(id)swift_getObjCClassFromMetadata() fileHandleForReadingFromURL:v2 error:&v12];

  id v5 = v12;
  if (v4)
  {
    uint64_t v6 = type metadata accessor for URL();
    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
    id v8 = v5;
    v7(a1, v6);
  }
  else
  {
    id v9 = v12;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    uint64_t v10 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(a1, v10);
  }
  return v4;
}

uint64_t sub_1000AB170(uint64_t a1, void *a2)
{
  uint64_t v75 = a2;
  uint64_t v3 = sub_10002572C(&qword_10021BB20);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  SEL v74 = (char *)v69 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v86 = (uint64_t)v69 - v6;
  uint64_t v87 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v87 - 8);
  uint64_t v8 = __chkstk_darwin(v87);
  uint64_t v10 = (char *)v69 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v79 = (char *)v69 - v12;
  __chkstk_darwin(v11);
  uint64_t v80 = (char *)v69 - v13;
  uint64_t v14 = type metadata accessor for DispatchPredicate();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (void *)((char *)v69 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v18 = *(void **)(a1 + OBJC_IVAR____TtC7parsecd15DownloadManager_queue);
  *uint64_t v17 = v18;
  (*(void (**)(void *, void, uint64_t))(v15 + 104))(v17, enum case for DispatchPredicate.onQueue(_:), v14);
  id v19 = v18;
  LOBYTE(v18) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v15 + 8))(v17, v14);
  if ((v18 & 1) == 0) {
    goto LABEL_41;
  }
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v21 = result;
    uint64_t v22 = v75;
    uint64_t v23 = sub_1000B0D4C(v75);
    if (!v23) {
      return swift_unknownObjectRelease();
    }
    uint64_t v24 = sub_10001F858(v23);
    uint64_t v25 = swift_beginAccess();
    __chkstk_darwin(v25);
    v69[-2] = v24;
    v69[-1] = a1;
    uint64_t v73 = a1;
    uint64_t v26 = swift_bridgeObjectRetain();
    uint64_t v27 = v83;
    sub_1000A5B84(v26, sub_1000B0DDC);
    uint64_t v83 = v27;
    swift_bridgeObjectRelease();
    v69[0] = v21;
    sub_1000073FC();
    sub_100017A90();
    uint64_t result = swift_unknownObjectRelease();
    int64_t v29 = 0;
    uint64_t v30 = *(void *)(v24 + 56);
    uint64_t v81 = v24 + 56;
    uint64_t v85 = v24;
    char v31 = *(unsigned char *)(v24 + 32);
    id v32 = v10;
    uint64_t v33 = 1 << v31;
    uint64_t v34 = -1;
    if (v33 < 64) {
      uint64_t v34 = ~(-1 << v33);
    }
    unint64_t v35 = v34 & v30;
    int64_t v82 = (unint64_t)(v33 + 63) >> 6;
    uint64_t v84 = (void (**)(uint64_t, char *, uint64_t))(v7 + 32);
    id v77 = (void (**)(char *, uint64_t))(v7 + 8);
    uint64_t v78 = (void (**)(char *, char *, uint64_t))(v7 + 16);
    *(void *)&long long v28 = 136446466;
    long long v70 = v28;
    v69[1] = (char *)&type metadata for Any + 8;
    uint64_t v36 = v87;
    for (unint64_t i = v10; ; v32 = i)
    {
      while (1)
      {
        if (v35)
        {
          unint64_t v37 = __clz(__rbit64(v35));
          v35 &= v35 - 1;
          unint64_t v38 = v37 | (v29 << 6);
        }
        else
        {
          if (__OFADD__(v29++, 1))
          {
            __break(1u);
            goto LABEL_40;
          }
          if (v29 >= v82) {
            goto LABEL_35;
          }
          unint64_t v40 = *(void *)(v81 + 8 * v29);
          if (!v40)
          {
            int64_t v41 = v29 + 1;
            if (v29 + 1 >= v82) {
              goto LABEL_35;
            }
            unint64_t v40 = *(void *)(v81 + 8 * v41);
            if (!v40)
            {
              int64_t v41 = v29 + 2;
              if (v29 + 2 >= v82) {
                goto LABEL_35;
              }
              unint64_t v40 = *(void *)(v81 + 8 * v41);
              if (!v40)
              {
                int64_t v41 = v29 + 3;
                if (v29 + 3 >= v82)
                {
LABEL_35:
                  swift_release();
                  sub_1000A7474();
                  return swift_unknownObjectRelease();
                }
                unint64_t v40 = *(void *)(v81 + 8 * v41);
                if (!v40)
                {
                  while (1)
                  {
                    int64_t v29 = v41 + 1;
                    if (__OFADD__(v41, 1)) {
                      break;
                    }
                    if (v29 >= v82) {
                      goto LABEL_35;
                    }
                    unint64_t v40 = *(void *)(v81 + 8 * v29);
                    ++v41;
                    if (v40) {
                      goto LABEL_19;
                    }
                  }
LABEL_40:
                  __break(1u);
LABEL_41:
                  __break(1u);
                  return result;
                }
              }
            }
            int64_t v29 = v41;
          }
LABEL_19:
          unint64_t v35 = (v40 - 1) & v40;
          unint64_t v38 = __clz(__rbit64(v40)) + (v29 << 6);
        }
        uint64_t v42 = (uint64_t *)(*(void *)(v85 + 48) + 16 * v38);
        uint64_t v44 = *v42;
        uint64_t v43 = (void *)v42[1];
        swift_bridgeObjectRetain();
        NSString v45 = String._bridgeToObjectiveC()();
        id v46 = [v22 urlForIdentifier:v45];

        if (v46) {
          break;
        }
        uint64_t v51 = v86;
        sub_10002538C(v86, 1, 1, v36);
LABEL_27:
        swift_bridgeObjectRelease();
        uint64_t result = sub_100025680(v51, &qword_10021BB20);
      }
      uint64_t v87 = v44;
      Swift::String v47 = v22;
      uint64_t v48 = v32;
      uint64_t v49 = v79;
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v50 = *v84;
      uint64_t v51 = v86;
      uint64_t v52 = v49;
      id v32 = v48;
      uint64_t v22 = v47;
      (*v84)(v86, v52, v36);
      sub_10002538C(v51, 0, 1, v36);
      if (sub_100027BA4(v51, 1, v36) == 1) {
        goto LABEL_27;
      }
      uint64_t v53 = v80;
      v50((uint64_t)v80, (char *)v51, v36);
      if (qword_100218B58 != -1) {
        swift_once();
      }
      uint64_t v54 = type metadata accessor for Logger();
      sub_10002A10C(v54, (uint64_t)qword_100236A20);
      id v76 = *v78;
      v76(v32, v53, v36);
      swift_bridgeObjectRetain_n();
      uint64_t v55 = Logger.logObject.getter();
      os_log_type_t v56 = static os_log_type_t.info.getter();
      BOOL v57 = os_log_type_enabled(v55, v56);
      uint64_t v58 = v87;
      if (v57)
      {
        id v59 = v32;
        uint64_t v60 = swift_slowAlloc();
        uint64_t v71 = swift_slowAlloc();
        uint64_t v88 = v71;
        *(_DWORD *)uint64_t v60 = v70;
        swift_bridgeObjectRetain();
        *(void *)(v60 + 4) = sub_10001C274(v58, (unint64_t)v43, &v88);
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v60 + 12) = 2080;
        unint64_t v61 = v59;
        uint64_t v62 = URL.absoluteString.getter();
        *(void *)(v60 + 14) = sub_10001C274(v62, v63, &v88);
        swift_bridgeObjectRelease();
        id v64 = *v77;
        id v65 = v61;
        uint64_t v58 = v87;
        (*v77)(v65, v36);
        _os_log_impl((void *)&_mh_execute_header, v55, v56, "add resource %{public}s from %s", (uint8_t *)v60, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_bridgeObjectRelease_n();
        id v64 = *v77;
        (*v77)(v32, v36);
      }

      uint64_t v66 = (uint64_t)v74;
      SEL v67 = v80;
      v76(v74, v80, v36);
      sub_10002538C(v66, 0, 1, v36);
      uint64_t v68 = v83;
      sub_1000A7D58(v58, v43, v66, v73);
      uint64_t v22 = v75;
      uint64_t v83 = v68;
      if (v68)
      {
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        sub_100025680(v66, &qword_10021BB20);
        v64(v67, v36);
        return swift_release();
      }
      swift_bridgeObjectRelease();
      sub_100025680(v66, &qword_10021BB20);
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v64)(v67, v36);
    }
  }
  return result;
}

void sub_1000AB9EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((sub_1000ABA38(a1, a2, a4) & 1) == 0) {
    sub_1000A84A0();
  }
}

uint64_t sub_1000ABA38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    Hasher.init(_seed:)();
    String.hash(into:)();
    Swift::Int v6 = Hasher._finalize()();
    uint64_t v7 = -1 << *(unsigned char *)(a3 + 32);
    unint64_t v8 = v6 & ~v7;
    uint64_t v9 = a3 + 56;
    if ((*(void *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
    {
      uint64_t v10 = *(void *)(a3 + 48);
      uint64_t v11 = (void *)(v10 + 16 * v8);
      BOOL v12 = *v11 == a1 && v11[1] == a2;
      if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        return 1;
      }
      uint64_t v14 = ~v7;
      unint64_t v15 = (v8 + 1) & v14;
      if ((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15))
      {
        while (1)
        {
          uint64_t v16 = (void *)(v10 + 16 * v15);
          BOOL v17 = *v16 == a1 && v16[1] == a2;
          if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            break;
          }
          uint64_t result = 0;
          unint64_t v15 = (v15 + 1) & v14;
          if (((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15) & 1) == 0) {
            return result;
          }
        }
        return 1;
      }
    }
  }
  return 0;
}

uint64_t sub_1000ABB70(unint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = a2;
  sub_1000A5A70(a1, v5);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v5;
  *(void *)(v6 + 24) = a3;
  aBlock[4] = sub_1000B0DD4;
  aBlock[5] = v6;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000085EC;
  aBlock[3] = &unk_1001FE300;
  uint64_t v7 = _Block_copy(aBlock);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&aBlock[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  BOOL v12 = v5;
  id v13 = a3;
  static DispatchQoS.unspecified.getter();
  uint64_t v14 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  BOOL v17 = (char *)&aBlock[-1] - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v19 = _swiftEmptyArrayStorage;
  sub_10003045C();
  sub_10002572C((uint64_t *)&unk_10021BAF0);
  sub_1000301A0();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v7);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return swift_release();
}

uint64_t sub_1000ABDFC(void **a1, uint64_t *a2)
{
  NSString v45 = a2;
  uint64_t v3 = sub_10002572C(&qword_10021DC60);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v43 - v7;
  uint64_t v9 = sub_10002572C(&qword_10021BB20);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  BOOL v12 = *a1;
  if (qword_100218B58 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  sub_10002A10C(v13, (uint64_t)qword_100236A20);
  id v14 = v12;
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    BOOL v17 = (uint8_t *)swift_slowAlloc();
    uint64_t v44 = swift_slowAlloc();
    aBlock[0] = v44;
    *(_DWORD *)BOOL v17 = 136315138;
    id v18 = [v14 originalRequest];
    if (v18)
    {
      id v19 = v18;
      static URLRequest._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v20 = type metadata accessor for URLRequest();
      uint64_t v21 = (uint64_t)v6;
      uint64_t v22 = 0;
    }
    else
    {
      uint64_t v20 = type metadata accessor for URLRequest();
      uint64_t v21 = (uint64_t)v6;
      uint64_t v22 = 1;
    }
    sub_10002538C(v21, v22, 1, v20);
    sub_1000B0814((uint64_t)v6, (uint64_t)v8, &qword_10021DC60);
    type metadata accessor for URLRequest();
    if (sub_100027BA4((uint64_t)v8, 1, v20) == 1)
    {
      uint64_t v23 = 0x3E6C696E3CLL;
      uint64_t v24 = &qword_10021DC60;
      uint64_t v25 = (uint64_t)v8;
    }
    else
    {
      URLRequest.url.getter();
      (*(void (**)(char *, uint64_t))(*(void *)(v20 - 8) + 8))(v8, v20);
      uint64_t v26 = type metadata accessor for URL();
      if (sub_100027BA4((uint64_t)v11, 1, v26) != 1)
      {
        uint64_t v23 = URL.absoluteString.getter();
        unint64_t v27 = v28;
        (*(void (**)(char *, uint64_t))(*(void *)(v26 - 8) + 8))(v11, v26);
        goto LABEL_14;
      }
      uint64_t v23 = 0x3E6C696E3CLL;
      uint64_t v24 = &qword_10021BB20;
      uint64_t v25 = (uint64_t)v11;
    }
    sub_100025680(v25, v24);
    unint64_t v27 = 0xE500000000000000;
LABEL_14:
    Swift::String v47 = (void *)sub_10001C274(v23, v27, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "cancel download %s", v17, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    goto LABEL_15;
  }

LABEL_15:
  [v14 cancel];
  id v29 = [v14 taskIdentifier];
  uint64_t v30 = v45;
  uint64_t v44 = *(uint64_t *)((char *)v45 + OBJC_IVAR____TtC7parsecd15DownloadManager_queue);
  uint64_t v31 = swift_allocObject();
  *(void *)(v31 + 16) = v30;
  *(void *)(v31 + 24) = v29;
  aBlock[4] = (uint64_t)sub_1000B14A0;
  aBlock[5] = v31;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1000085EC;
  aBlock[3] = (uint64_t)&unk_1001FE440;
  id v32 = _Block_copy(aBlock);
  uint64_t v33 = type metadata accessor for DispatchQoS();
  uint64_t v43 = (uint64_t)&v43;
  uint64_t v34 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  uint64_t v36 = (char *)&v43 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v37 = v30;
  static DispatchQoS.unspecified.getter();
  uint64_t v38 = type metadata accessor for DispatchWorkItemFlags();
  NSString v45 = &v43;
  uint64_t v39 = *(void *)(v38 - 8);
  __chkstk_darwin(v38);
  int64_t v41 = (char *)&v43 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::String v47 = _swiftEmptyArrayStorage;
  sub_10003045C();
  sub_10002572C((uint64_t *)&unk_10021BAF0);
  sub_1000301A0();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v32);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v41, v38);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v36, v33);
  return swift_release();
}

uint64_t sub_1000AC43C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t *)(a1 + OBJC_IVAR____TtC7parsecd15DownloadManager_spans);
  sub_1000257C8();
  sub_10003B4BC(a2);
  if (v4)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v6 = *v3;
    uint64_t *v3 = 0x8000000000000000;
    Swift::Int v7 = *(void *)(v6 + 24);
    sub_10002572C(&qword_100219788);
    _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v7);
    type metadata accessor for ResourceAccessNetworkSpan();
    _NativeDictionary._delete(at:)();
    uint64_t *v3 = v9;
    swift_bridgeObjectRelease();
  }
  swift_endAccess();
  return swift_release();
}

uint64_t sub_1000AC534(uint64_t a1, void *a2)
{
  return sub_1000AB170(a1, a2);
}

void sub_1000AC64C()
{
}

uint64_t type metadata accessor for DownloadManager()
{
  return self;
}

void sub_1000AC72C(uint64_t a1, void *a2, uint64_t *a3, char *a4, const void *a5)
{
  uint64_t v93 = a4;
  uint64_t v108 = a3;
  uint64_t v105 = type metadata accessor for URL();
  uint64_t v98 = *(void *)(v105 - 8);
  uint64_t v7 = __chkstk_darwin(v105);
  long long v96 = (char *)&v89 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v92 = v8;
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v89 - v9;
  uint64_t v11 = sub_10002572C(&qword_10021BB20);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  uint64_t v103 = (char *)&v89 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v97 = (char *)&v89 - v14;
  uint64_t v15 = type metadata accessor for URLRequest();
  uint64_t v107 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  v106 = (char *)&v89 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_10002572C(&qword_10021DC60);
  uint64_t v18 = __chkstk_darwin(v17 - 8);
  uint64_t v99 = (uint64_t)&v89 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v100 = (uint64_t)&v89 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v89 - v23;
  uint64_t v25 = __chkstk_darwin(v22);
  unint64_t v27 = (char *)&v89 - v26;
  uint64_t v28 = __chkstk_darwin(v25);
  uint64_t v30 = (char *)&v89 - v29;
  __chkstk_darwin(v28);
  id v32 = (char *)&v89 - v31;
  uint64_t v101 = swift_allocObject();
  uint64_t v102 = a5;
  *(void *)(v101 + 16) = a5;
  _Block_copy(a5);
  id v33 = [a2 originalRequest];
  if (v33)
  {
    uint64_t v34 = v33;
    static URLRequest._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v35 = 0;
  }
  else
  {
    uint64_t v35 = 1;
  }
  sub_10002538C((uint64_t)v30, v35, 1, v15);
  sub_1000B0814((uint64_t)v30, (uint64_t)v32, &qword_10021DC60);
  int v36 = sub_100027BA4((uint64_t)v32, 1, v15);
  uint64_t v37 = v107;
  if (v36 == 1)
  {
    sub_100025680((uint64_t)v32, &qword_10021DC60);
    uint64_t countAndFlagsBits = 0;
    object = 0;
  }
  else
  {
    v39._object = (void *)0x80000001001B6380;
    v39._uint64_t countAndFlagsBits = 0xD000000000000017;
    Swift::String_optional v40 = URLRequest.value(forHTTPHeaderField:)(v39);
    uint64_t countAndFlagsBits = v40.value._countAndFlagsBits;
    object = v40.value._object;
    (*(void (**)(char *, uint64_t))(v37 + 8))(v32, v15);
  }
  id v41 = [a2 originalRequest];
  if (v41)
  {
    uint64_t v42 = v41;
    static URLRequest._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v43 = 0;
  }
  else
  {
    uint64_t v43 = 1;
  }
  uint64_t v44 = v106;
  sub_10002538C((uint64_t)v24, v43, 1, v15);
  sub_1000B0814((uint64_t)v24, (uint64_t)v27, &qword_10021DC60);
  if (sub_100027BA4((uint64_t)v27, 1, v15) == 1)
  {
    sub_100025680((uint64_t)v27, &qword_10021DC60);
    uint64_t v45 = 0;
    id v46 = 0;
  }
  else
  {
    v47._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
    v47._object = (void *)0x80000001001B6360;
    Swift::String_optional v48 = URLRequest.value(forHTTPHeaderField:)(v47);
    uint64_t v45 = v48.value._countAndFlagsBits;
    id v46 = v48.value._object;
    (*(void (**)(char *, uint64_t))(v37 + 8))(v27, v15);
  }
  uint64_t v104 = v10;
  if (qword_100218B58 != -1) {
    swift_once();
  }
  uint64_t v49 = type metadata accessor for Logger();
  sub_10002A10C(v49, (uint64_t)qword_100236A20);
  (*(void (**)(char *, uint64_t *, uint64_t))(v37 + 16))(v44, v108, v15);
  swift_bridgeObjectRetain_n();
  uint64_t v50 = Logger.logObject.getter();
  os_log_type_t v51 = static os_log_type_t.debug.getter();
  BOOL v52 = os_log_type_enabled(v50, v51);
  uint64_t v94 = v45;
  if (v52)
  {
    long long v95 = object;
    uint64_t v53 = 0x3E6C696E3CLL;
    uint64_t v54 = swift_slowAlloc();
    uint64_t v90 = swift_slowAlloc();
    aBlock[0] = v90;
    *(_DWORD *)uint64_t v54 = 136315394;
    if (v46) {
      uint64_t v55 = v45;
    }
    else {
      uint64_t v55 = 0x3E6C696E3CLL;
    }
    if (v46) {
      unint64_t v56 = (unint64_t)v46;
    }
    else {
      unint64_t v56 = 0xE500000000000000;
    }
    swift_bridgeObjectRetain();
    BOOL v109 = (void *)sub_10001C274(v55, v56, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v54 + 12) = 2080;
    uint64_t v57 = (uint64_t)v97;
    URLRequest.url.getter();
    uint64_t v58 = v105;
    if (sub_100027BA4(v57, 1, v105) == 1)
    {
      sub_100025680(v57, &qword_10021BB20);
      unint64_t v59 = 0xE500000000000000;
    }
    else
    {
      uint64_t v53 = URL.absoluteString.getter();
      unint64_t v59 = v61;
      (*(void (**)(uint64_t, uint64_t))(v98 + 8))(v57, v58);
    }
    BOOL v109 = (void *)sub_10001C274(v53, v59, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v60 = *(void (**)(char *, uint64_t))(v107 + 8);
    v60(v106, v15);
    _os_log_impl((void *)&_mh_execute_header, v50, v51, "will begin %s url %s", (uint8_t *)v54, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    object = v95;
  }
  else
  {
    swift_bridgeObjectRelease_n();
    uint64_t v60 = *(void (**)(char *, uint64_t))(v37 + 8);
    v60(v44, v15);

    uint64_t v58 = v105;
  }
  uint64_t v62 = (uint64_t)v103;
  unint64_t v63 = v104;
  if (!v46)
  {
LABEL_33:
    swift_bridgeObjectRelease();
    goto LABEL_34;
  }
  URLRequest.url.getter();
  if (sub_100027BA4(v62, 1, v58) != 1)
  {
    uint64_t v64 = v98;
    uint64_t v108 = *(uint64_t **)(v98 + 32);
    ((void (*)(char *, uint64_t))v108)(v63, v62);
    uint64_t v65 = v94;
    if (sub_1000A90F0(v94, (uint64_t)v46))
    {
      uint64_t v66 = v93;
      uint64_t v107 = *(void *)&v93[OBJC_IVAR____TtC7parsecd15DownloadManager_queue];
      (*(void (**)(char *, char *, uint64_t))(v64 + 16))(v96, v63, v58);
      unint64_t v67 = (*(unsigned __int8 *)(v64 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v64 + 80);
      long long v95 = object;
      unint64_t v68 = (v92 + v67 + 7) & 0xFFFFFFFFFFFFFFF8;
      id v69 = (void *)swift_allocObject();
      void v69[2] = v66;
      v69[3] = v65;
      v69[4] = v46;
      ((void (*)(char *, char *, uint64_t))v108)((char *)v69 + v67, v96, v58);
      long long v70 = (void *)((char *)v69 + v68);
      uint64_t v71 = (uint64_t)v95;
      *long long v70 = countAndFlagsBits;
      v70[1] = v71;
      id v72 = (void (**)(uint64_t, uint64_t))((char *)v69 + ((v68 + 23) & 0xFFFFFFFFFFFFFFF8));
      uint64_t v73 = v101;
      *id v72 = sub_1000B0B98;
      v72[1] = (void (*)(uint64_t, uint64_t))v73;
      aBlock[4] = (uint64_t)sub_1000B0CC8;
      aBlock[5] = (uint64_t)v69;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_1000085EC;
      aBlock[3] = (uint64_t)&unk_1001FE210;
      SEL v74 = _Block_copy(aBlock);
      uint64_t v75 = type metadata accessor for DispatchQoS();
      uint64_t v108 = &v89;
      uint64_t v76 = *(void *)(v75 - 8);
      __chkstk_darwin(v75);
      uint64_t v78 = (char *)&v89 - ((v77 + 15) & 0xFFFFFFFFFFFFFFF0);
      id v79 = v66;
      swift_retain();
      static DispatchQoS.unspecified.getter();
      uint64_t v80 = type metadata accessor for DispatchWorkItemFlags();
      v106 = (char *)&v89;
      uint64_t v81 = *(void *)(v80 - 8);
      __chkstk_darwin(v80);
      uint64_t v83 = (char *)&v89 - ((v82 + 15) & 0xFFFFFFFFFFFFFFF0);
      BOOL v109 = _swiftEmptyArrayStorage;
      sub_10003045C();
      sub_10002572C((uint64_t *)&unk_10021BAF0);
      sub_1000301A0();
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v74);
      (*(void (**)(char *, uint64_t))(v81 + 8))(v83, v80);
      (*(void (**)(char *, uint64_t))(v76 + 8))(v78, v75);
      (*(void (**)(char *, uint64_t))(v98 + 8))(v104, v105);
      swift_release();
      swift_release();
      uint64_t v84 = v102;
      goto LABEL_38;
    }
    (*(void (**)(char *, uint64_t))(v64 + 8))(v63, v58);
    swift_bridgeObjectRelease();
    goto LABEL_33;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100025680(v62, &qword_10021BB20);
LABEL_34:
  uint64_t v85 = v100;
  sub_10002538C(v100, 1, 1, v15);
  uint64_t v86 = v99;
  sub_1000B0BA0(v85, v99, &qword_10021DC60);
  if (sub_100027BA4(v86, 1, v15) == 1)
  {
    Class isa = 0;
  }
  else
  {
    Class isa = URLRequest._bridgeToObjectiveC()().super.isa;
    v60((char *)v86, v15);
  }
  uint64_t v88 = v102;
  (*((void (**)(const void *, void, Class))v102 + 2))(v102, 0, isa);

  sub_100025680(v85, &qword_10021DC60);
  swift_release();
  uint64_t v84 = v88;
LABEL_38:
  _Block_release(v84);
}

void sub_1000AD31C(uint64_t a1, uint64_t a2, void *a3, void (*a4)(void), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v27[0] = a7;
  v27[1] = a8;
  uint64_t v28 = a6;
  uint64_t v12 = sub_10002572C(&qword_10021DC60);
  uint64_t v13 = __chkstk_darwin(v12 - 8);
  uint64_t v15 = (char *)v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)v27 - v16;
  uint64_t v18 = type metadata accessor for URLRequest();
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)v27 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000A9B80(a2, a3, a4, a5, v28, (uint64_t)v17);
  uint64_t v22 = (void (*)(uint64_t, char *))v27[0];
  if (sub_100027BA4((uint64_t)v17, 1, v18) == 1)
  {
    sub_100025680((uint64_t)v17, &qword_10021DC60);
    if (qword_100218B58 != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    sub_10002A10C(v23, (uint64_t)qword_100236A20);
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "createDownloadRequest failed ", v26, 2u);
      swift_slowDealloc();
    }
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v21, v17, v18);
    (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v15, v21, v18);
    sub_10002538C((uint64_t)v15, 0, 1, v18);
    v22(1, v15);
    sub_100025680((uint64_t)v15, &qword_10021DC60);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  }
}

void sub_1000AD750(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10002572C(&qword_10021DC60);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000B0BA0(a2, (uint64_t)v8, &qword_10021DC60);
  uint64_t v9 = type metadata accessor for URLRequest();
  Class isa = 0;
  if (sub_100027BA4((uint64_t)v8, 1, v9) != 1)
  {
    Class isa = URLRequest._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  }
  (*(void (**)(uint64_t, uint64_t, Class))(a3 + 16))(a3, a1, isa);
}

void sub_1000AD864()
{
  sub_10000DFE0();
  BOOL v109 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = sub_10002572C(&qword_10021DC60);
  uint64_t v7 = sub_100016544(v6);
  __chkstk_darwin(v7);
  sub_1000281C8();
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v104 - v9;
  uint64_t v11 = sub_10002572C(&qword_10021BB20);
  uint64_t v12 = sub_100016544(v11);
  __chkstk_darwin(v12);
  sub_10000E04C();
  uint64_t v108 = sub_100023EBC(v13);
  sub_100020C48();
  uint64_t v15 = v14;
  uint64_t v17 = *(void *)(v16 + 64);
  uint64_t v19 = __chkstk_darwin(v18);
  v106 = (char *)v104 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)v104 - v20;
  if (v3)
  {
    uint64_t v110 = v1;
    uint64_t v22 = v10;
    uint64_t v23 = v5;
    uint64_t v24 = (char *)v104 - v20;
    uint64_t v25 = v15;
    uint64_t v26 = v3;
    unint64_t v27 = (void *)_convertErrorToNSError(_:)();
    id v28 = [v27 domain];
    uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v31 = v30;

    BOOL v33 = v29 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v31 == v32;
    if (v33)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v34 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v34 & 1) == 0)
      {

        uint64_t v15 = v25;
        uint64_t v21 = v24;
        uint64_t v5 = v23;
        uint64_t v3 = v26;
        uint64_t v10 = v22;
        uint64_t v1 = v110;
        goto LABEL_10;
      }
    }
    uint64_t v35 = (char *)[v27 code];

    BOOL v33 = v35 + 999 == 0;
    uint64_t v15 = v25;
    uint64_t v21 = v24;
    uint64_t v5 = v23;
    uint64_t v3 = v26;
    uint64_t v10 = v22;
    uint64_t v1 = v110;
    if (v33)
    {
LABEL_34:
      sub_10000DFB8();
      return;
    }
  }
LABEL_10:
  id v36 = [v5 response];
  if (!v36) {
    goto LABEL_34;
  }
  uint64_t v110 = (uint64_t)v36;
  self;
  uint64_t v37 = swift_dynamicCastObjCClass();
  if (!v37
    || (uint64_t v38 = (void *)v37,
        uint64_t v39 = v3,
        Swift::String_optional v40 = &v109[OBJC_IVAR____TtC7parsecd15DownloadManager_assembly],
        (uint64_t Strong = swift_unknownObjectWeakLoadStrong()) == 0))
  {
    sub_10000DFB8();

    return;
  }
  uint64_t v42 = Strong;
  uint64_t v105 = *((void *)v40 + 1);
  id v43 = [v5 originalRequest];
  if (v43)
  {
    uint64_t v44 = v43;
    static URLRequest._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v45 = type metadata accessor for URLRequest();
    uint64_t v46 = v1;
    uint64_t v47 = 0;
  }
  else
  {
    uint64_t v45 = type metadata accessor for URLRequest();
    uint64_t v46 = sub_10002B040();
  }
  sub_10002538C(v46, v47, 1, v45);
  sub_1000B0814(v1, (uint64_t)v10, &qword_10021DC60);
  type metadata accessor for URLRequest();
  sub_1000184F4((uint64_t)v10, 1, v45);
  if (v33)
  {
    sub_100025680((uint64_t)v10, &qword_10021DC60);
    uint64_t v52 = v107;
    uint64_t v50 = sub_10002B040();
    sub_10002538C(v50, v51, 1, v108);
LABEL_24:
    sub_100025680(v52, &qword_10021BB20);
    if (qword_100218B58 != -1) {
      swift_once();
    }
    uint64_t v58 = type metadata accessor for Logger();
    sub_10002A10C(v58, (uint64_t)qword_100236A20);
    unint64_t v59 = Logger.logObject.getter();
    os_log_type_t v60 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v59, v60))
    {
      unint64_t v61 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v61 = 0;
      _os_log_impl((void *)&_mh_execute_header, v59, v60, "task completed with nil url", v61, 2u);
      sub_100017D40();
      swift_unknownObjectRelease();

      sub_100020CB8();
    }
    else
    {

      sub_100020CB8();
      swift_unknownObjectRelease();
    }
    goto LABEL_34;
  }
  uint64_t v52 = v107;
  URLRequest.url.getter();
  sub_10000E004();
  sub_10000E040();
  v53();
  uint64_t v54 = sub_10002B040();
  uint64_t v55 = v108;
  sub_1000184F4(v54, v56, v108);
  if (v57) {
    goto LABEL_24;
  }
  uint64_t v62 = v52;
  unint64_t v63 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 32);
  v63(v21, v62, v55);
  if ((char *)[v38 statusCode] - 200 > (char *)0xC7)
  {
    uint64_t v81 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v83 = v82;
    sub_10002572C(&qword_100219280);
    uint64_t v84 = v21;
    uint64_t v85 = v15;
    uint64_t inited = swift_initStackObject();
    sub_1000260BC((__n128 *)inited, (__n128)xmmword_1001A2A20);
    _StringGuts.grow(_:)(24);
    swift_bridgeObjectRelease();
    strcpy((char *)&v111, "status code ");
    BYTE13(v111) = 0;
    HIWORD(v111) = -5120;
    id v116 = [v38 statusCode];
    v119._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    sub_100023C7C(v119);
    swift_bridgeObjectRelease();
    sub_100026300();
    v120._uint64_t countAndFlagsBits = URL.absoluteString.getter();
    sub_100023C7C(v120);
    swift_bridgeObjectRelease();
    long long v87 = v111;
    *(void *)(inited + 72) = &type metadata for String;
    *(_OWORD *)(inited + 48) = v87;
    uint64_t v88 = Dictionary.init(dictionaryLiteral:)();
    id v89 = objc_allocWithZone((Class)NSError);
    id v90 = sub_1000B06A0(v81, v83, 500, v88);
    sub_100080FCC();
    swift_unknownObjectRelease();

    sub_100020CB8();
    (*(void (**)(char *, uint64_t))(v85 + 8))(v84, v55);
    goto LABEL_34;
  }
  uint64_t v107 = v42;
  if (v39)
  {
    uint64_t v64 = (void *)_convertErrorToNSError(_:)();
    uint64_t v65 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v67 = v66;
    sub_10002572C(&qword_100219280);
    uint64_t v68 = v15;
    uint64_t v69 = swift_initStackObject();
    sub_1000260BC((__n128 *)v69, (__n128)xmmword_1001A2A20);
    _StringGuts.grow(_:)(30);
    swift_bridgeObjectRelease();
    *(void *)&long long v111 = 0x64616F6C6E776F64;
    *((void *)&v111 + 1) = 0xEF20726F72726520;
    id v70 = [v64 domain];
    uint64_t v71 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v72 = v21;
    SEL v74 = v73;

    v75._uint64_t countAndFlagsBits = v71;
    v75._object = v74;
    String.append(_:)(v75);
    swift_bridgeObjectRelease();
    v76._uint64_t countAndFlagsBits = 32;
    v76._object = (void *)0xE100000000000000;
    String.append(_:)(v76);
    id v116 = [v64 code];
    v117._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    sub_100023C7C(v117);
    swift_bridgeObjectRelease();
    sub_100026300();
    v118._uint64_t countAndFlagsBits = URL.absoluteString.getter();
    sub_100023C7C(v118);
    swift_bridgeObjectRelease();
    long long v77 = v111;
    *(void *)(v69 + 72) = &type metadata for String;
    *(_OWORD *)(v69 + 48) = v77;
    uint64_t v78 = Dictionary.init(dictionaryLiteral:)();
    id v79 = objc_allocWithZone((Class)NSError);
    id v80 = sub_1000B06A0(v65, v67, 500, v78);
    sub_100080FCC();
    swift_unknownObjectRelease();

    sub_100020CB8();
    (*(void (**)(char *, uint64_t))(v68 + 8))(v72, v108);
    goto LABEL_34;
  }
  uint64_t v91 = v109;
  sub_1000A69A8();
  v104[0] = *(dispatch_queue_t *)&v91[OBJC_IVAR____TtC7parsecd15DownloadManager_queue];
  uint64_t v92 = v106;
  sub_100016608();
  v93();
  uint64_t v94 = *(unsigned __int8 *)(v15 + 80);
  v104[1] = (dispatch_queue_t)v15;
  uint64_t v95 = (v94 + 32) & ~v94;
  uint64_t v96 = swift_allocObject();
  *(void *)(v96 + 16) = v5;
  *(void *)(v96 + 24) = v91;
  v63((char *)(v96 + v95), (uint64_t)v92, v108);
  uint64_t v97 = (uint64_t *)(v96 + ((v17 + v95 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v98 = v105;
  *uint64_t v97 = v107;
  v97[1] = v98;
  uint64_t v99 = sub_100023CFC();
  *(void *)(v99 + 16) = sub_1000B098C;
  *(void *)(v99 + 24) = v96;
  uint64_t v114 = sub_100017874;
  uint64_t v115 = v99;
  *(void *)&long long v111 = _NSConcreteStackBlock;
  *((void *)&v111 + 1) = 1107296256;
  v112 = sub_100017848;
  uint64_t v113 = &unk_1001FE148;
  uint64_t v100 = _Block_copy(&v111);
  id v101 = v5;
  uint64_t v102 = v91;
  swift_unknownObjectRetain();
  swift_retain();
  swift_release();
  dispatch_sync(v104[0], v100);
  _Block_release(v100);
  swift_unknownObjectRelease();
  sub_100020CB8();
  sub_10000E040();
  v103();
  LOBYTE(v100) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  if ((v100 & 1) == 0) {
    goto LABEL_34;
  }
  __break(1u);
}

uint64_t sub_1000AE2A0(void *a1, uint64_t *a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v119 = a5;
  Swift::String v120 = a4;
  uint64_t v123 = a3;
  uint64_t v124 = a2;
  uint64_t v6 = sub_10002572C(&qword_10021BB20);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  id v116 = (char *)&v113 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v113 - v9;
  uint64_t v11 = type metadata accessor for URL();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v121 = (char *)&v113 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v13);
  Swift::String v117 = (char *)&v113 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  os_log_t v122 = (os_log_t)((char *)&v113 - v18);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v113 - v19;
  uint64_t v21 = sub_10002572C(&qword_10021DC60);
  uint64_t v22 = __chkstk_darwin(v21 - 8);
  uint64_t v24 = (char *)&v113 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __chkstk_darwin(v22);
  unint64_t v27 = (char *)&v113 - v26;
  uint64_t v28 = __chkstk_darwin(v25);
  uint64_t v30 = (char *)&v113 - v29;
  __chkstk_darwin(v28);
  uint64_t v32 = (char *)&v113 - v31;
  id v33 = [a1 originalRequest];
  if (v33)
  {
    char v34 = v33;
    static URLRequest._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v35 = type metadata accessor for URLRequest();
    uint64_t v36 = (uint64_t)v30;
    uint64_t v37 = 0;
  }
  else
  {
    uint64_t v35 = type metadata accessor for URLRequest();
    uint64_t v36 = (uint64_t)v30;
    uint64_t v37 = 1;
  }
  sub_10002538C(v36, v37, 1, v35);
  sub_1000B0814((uint64_t)v30, (uint64_t)v32, &qword_10021DC60);
  type metadata accessor for URLRequest();
  if (sub_100027BA4((uint64_t)v32, 1, v35) == 1) {
    return sub_100025680((uint64_t)v32, &qword_10021DC60);
  }
  uint64_t v118 = v12;
  uint64_t v115 = v11;
  v39._object = (void *)0x80000001001B6360;
  v39._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  Swift::String_optional v40 = URLRequest.value(forHTTPHeaderField:)(v39);
  uint64_t v114 = *(uint64_t (**)(char *, uint64_t))(*(void *)(v35 - 8) + 8);
  uint64_t result = v114(v32, v35);
  if (v40.value._object)
  {
    sub_1000AA99C(v40.value._countAndFlagsBits, (uint64_t)v40.value._object);
    if (!v41)
    {
      if (qword_100218B58 != -1) {
        swift_once();
      }
      uint64_t v52 = type metadata accessor for Logger();
      sub_10002A10C(v52, (uint64_t)qword_100236A20);
      uint64_t v53 = v118;
      uint64_t v54 = v115;
      (*(void (**)(char *, uint64_t, uint64_t))(v118 + 16))(v20, v123, v115);
      swift_bridgeObjectRetain_n();
      uint64_t v55 = Logger.logObject.getter();
      os_log_type_t v56 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v55, v56))
      {
        uint64_t v57 = swift_slowAlloc();
        uint64_t v124 = (uint64_t *)swift_slowAlloc();
        uint64_t aBlock = (uint64_t)v124;
        *(_DWORD *)uint64_t v57 = 136315394;
        swift_bridgeObjectRetain();
        os_log_t v122 = v55;
        uint64_t v125 = (void *)sub_10001C274(v40.value._countAndFlagsBits, (unint64_t)v40.value._object, &aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v57 + 12) = 2080;
        uint64_t v58 = URL.absoluteString.getter();
        uint64_t v125 = (void *)sub_10001C274(v58, v59, &aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v53 + 8))(v20, v54);
        os_log_t v60 = v122;
        _os_log_impl((void *)&_mh_execute_header, v122, v56, "missing resource for %s url: %s", (uint8_t *)v57, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        swift_bridgeObjectRelease_n();
        (*(void (**)(char *, uint64_t))(v53 + 8))(v20, v54);
      }
      uint64_t v64 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v66 = v65;
      sub_10002572C(&qword_100219280);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1001A2A20;
      *(void *)(inited + 32) = 0x6E6F73616572;
      *(void *)(inited + 40) = 0xE600000000000000;
      uint64_t aBlock = 0;
      unint64_t v127 = 0xE000000000000000;
      _StringGuts.grow(_:)(20);
      swift_bridgeObjectRelease();
      uint64_t aBlock = 0x20676E697373696DLL;
      unint64_t v127 = 0xE800000000000000;
      String.append(_:)(v40.value);
      swift_bridgeObjectRelease();
      v68._uint64_t countAndFlagsBits = 0x203A3E4C52553C20;
      v68._object = (void *)0xE800000000000000;
      String.append(_:)(v68);
      v69._uint64_t countAndFlagsBits = URL.absoluteString.getter();
      String.append(_:)(v69);
      swift_bridgeObjectRelease();
      uint64_t v70 = aBlock;
      unint64_t v71 = v127;
      *(void *)(inited + 72) = &type metadata for String;
      *(void *)(inited + 48) = v70;
      *(void *)(inited + 56) = v71;
      uint64_t v72 = Dictionary.init(dictionaryLiteral:)();
      id v73 = objc_allocWithZone((Class)NSError);
      id v74 = sub_1000B06A0(v64, v66, 500, v72);
      Swift::String v75 = v120;
      Swift::String v76 = (void *)v120[33];
      long long v77 = (void *)swift_allocObject();
      uint64_t v78 = v119;
      v77[2] = v75;
      v77[3] = v78;
      v77[4] = v74;
      uint64_t v130 = sub_1000B0A4C;
      v131 = v77;
      uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
      unint64_t v127 = 1107296256;
      v128 = sub_1000085EC;
      v129 = &unk_1001FE198;
      id v79 = _Block_copy(&aBlock);
      uint64_t v123 = type metadata accessor for DispatchQoS();
      uint64_t v124 = &v113;
      uint64_t v80 = *(void *)(v123 - 8);
      __chkstk_darwin(v123);
      uint64_t v82 = (char *)&v113 - ((v81 + 15) & 0xFFFFFFFFFFFFFFF0);
      id v83 = v76;
      swift_unknownObjectRetain();
      id v84 = v74;
      static DispatchQoS.unspecified.getter();
      uint64_t v85 = type metadata accessor for DispatchWorkItemFlags();
      os_log_t v122 = (os_log_t)&v113;
      uint64_t v86 = *(void *)(v85 - 8);
      __chkstk_darwin(v85);
      uint64_t v88 = (char *)&v113 - ((v87 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v125 = _swiftEmptyArrayStorage;
      sub_10003045C();
      sub_10002572C((uint64_t *)&unk_10021BAF0);
      sub_1000301A0();
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v79);

      (*(void (**)(char *, uint64_t))(v86 + 8))(v88, v85);
      (*(void (**)(char *, uint64_t))(v80 + 8))(v82, v123);
      return swift_release();
    }
    uint64_t v42 = v41;
    swift_bridgeObjectRelease();
    URL._bridgeToObjectiveC()(v43);
    uint64_t v45 = v44;
    id v46 = sub_1000B0A78(v44);

    os_log_t v47 = v122;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v48 = v42 + OBJC_IVAR____TtC7parsecd16DownloadResource_url;
    swift_beginAccess();
    (*(void (**)(uint64_t, os_log_t, uint64_t))(v118 + 40))(v48, v47, v115);
    swift_endAccess();
    id v49 = [a1 currentRequest];
    if (v49)
    {
      uint64_t v50 = v49;
      static URLRequest._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v51 = 0;
    }
    else
    {
      uint64_t v51 = 1;
    }
    unint64_t v61 = v121;
    sub_10002538C((uint64_t)v24, v51, 1, v35);
    sub_1000B0814((uint64_t)v24, (uint64_t)v27, &qword_10021DC60);
    if (sub_100027BA4((uint64_t)v27, 1, v35) == 1)
    {
      sub_100025680((uint64_t)v27, &qword_10021DC60);
      uint64_t v62 = v115;
      sub_10002538C((uint64_t)v10, 1, 1, v115);
    }
    else
    {
      URLRequest.url.getter();
      v114(v27, v35);
      uint64_t v62 = v115;
      if (sub_100027BA4((uint64_t)v10, 1, v115) != 1)
      {
        uint64_t v89 = v118;
        id v90 = *(void **)(v118 + 32);
        uint64_t v91 = v117;
        uint64_t v121 = (char *)(v118 + 32);
        Swift::String v120 = v90;
        ((void (*)(NSObject *, char *, uint64_t))v90)(v117, v10, v62);
        URL._bridgeToObjectiveC()(v92);
        uint64_t v94 = v93;
        id v95 = sub_1000B0A78(v93);

        static URL._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v96 = *(void (**)(os_log_t, uint64_t, uint64_t))(v89 + 16);
        os_log_t v97 = v122;
        uint64_t v123 = v48;
        v96(v122, v48, v62);
        sub_1000B1340(&qword_10021D028, (void (*)(uint64_t))&type metadata accessor for URL);
        LOBYTE(v94) = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v98 = *(void (**)(os_log_t, uint64_t))(v89 + 8);
        v98(v97, v62);
        v98(v91, v62);
        if (v94)
        {
          v98(v61, v62);
        }
        else
        {
          uint64_t v99 = (uint64_t)v116;
          ((void (*)(char *, NSObject *, uint64_t))v120)(v116, v61, v62);
          sub_10002538C(v99, 0, 1, v62);
          uint64_t v100 = v42 + OBJC_IVAR____TtC7parsecd16DownloadResource_redirectUrl;
          swift_beginAccess();
          sub_1000B0874(v99, v100);
          swift_endAccess();
        }
        uint64_t v63 = v118;
        uint64_t v48 = v123;
        goto LABEL_25;
      }
    }
    sub_100025680((uint64_t)v10, &qword_10021BB20);
    uint64_t v63 = v118;
LABEL_25:
    if (qword_100218B58 != -1) {
      swift_once();
    }
    uint64_t v101 = type metadata accessor for Logger();
    sub_10002A10C(v101, (uint64_t)qword_100236A20);
    swift_retain_n();
    uint64_t v102 = Logger.logObject.getter();
    os_log_type_t v103 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v102, v103))
    {
      uint64_t v104 = swift_slowAlloc();
      uint64_t v123 = swift_slowAlloc();
      uint64_t aBlock = v123;
      *(_DWORD *)uint64_t v104 = 136315394;
      uint64_t v105 = *(void *)(v42 + 16);
      unint64_t v106 = *(void *)(v42 + 24);
      swift_bridgeObjectRetain();
      uint64_t v125 = (void *)sub_10001C274(v105, v106, &aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v104 + 12) = 2080;
      os_log_t v107 = v122;
      (*(void (**)(os_log_t, uint64_t, uint64_t))(v63 + 16))(v122, v48, v62);
      uint64_t v108 = URL.absoluteString.getter();
      uint64_t v109 = v63;
      uint64_t v110 = v108;
      unint64_t v112 = v111;
      (*(void (**)(os_log_t, uint64_t))(v109 + 8))(v107, v62);
      uint64_t v125 = (void *)sub_10001C274(v110, v112, &aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v102, v103, "%s url: %s", (uint8_t *)v104, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    sub_1000A7474();
    return swift_release();
  }
  return result;
}

void sub_1000AF1BC()
{
  sub_10000DFE0();
  uint64_t v122 = v2;
  char v4 = v3;
  uint64_t v5 = sub_10002572C(&qword_10021BB20);
  uint64_t v6 = sub_100016544(v5);
  __chkstk_darwin(v6);
  sub_100017D2C();
  sub_100024A74();
  __chkstk_darwin(v7);
  sub_100024FFC();
  uint64_t v128 = sub_100023EBC(v8);
  sub_100020C48();
  uint64_t v123 = v9;
  __chkstk_darwin(v10);
  sub_100017D2C();
  sub_100024A74();
  __chkstk_darwin(v11);
  sub_100021308();
  sub_100024A74();
  __chkstk_darwin(v12);
  sub_100021308();
  sub_100024A74();
  __chkstk_darwin(v13);
  sub_100021308();
  sub_100024A74();
  __chkstk_darwin(v14);
  sub_100024FFC();
  uint64_t v124 = v15;
  uint64_t v16 = sub_10002572C(&qword_10021DC60);
  uint64_t v17 = sub_100016544(v16);
  __chkstk_darwin(v17);
  sub_100017D2C();
  sub_100024A74();
  __chkstk_darwin(v18);
  sub_100021308();
  sub_100024A74();
  __chkstk_darwin(v19);
  sub_100021308();
  sub_100024A74();
  __chkstk_darwin(v20);
  sub_100024FFC();
  object = v21;
  uint64_t v132 = *(void *)&v0[OBJC_IVAR____TtC7parsecd15DownloadManager_queue];
  uint64_t v22 = sub_100023CFC();
  *(void *)(v22 + 16) = v0;
  *(void *)(v22 + 24) = v4;
  unint64_t v137 = sub_1000B0790;
  uint64_t v138 = v22;
  *(void *)&long long v134 = _NSConcreteStackBlock;
  *((void *)&v134 + 1) = 1107296256;
  v135 = sub_1000085EC;
  uint64_t v136 = &unk_1001FE080;
  uint64_t v23 = _Block_copy(&v134);
  uint64_t v24 = type metadata accessor for DispatchQoS();
  sub_100020C48();
  uint64_t v26 = v25;
  __chkstk_darwin(v27);
  sub_100017DC8();
  v129 = v0;
  id v28 = v4;
  static DispatchQoS.unspecified.getter();
  type metadata accessor for DispatchWorkItemFlags();
  sub_100020C48();
  __chkstk_darwin(v29);
  sub_100017CD4();
  unint64_t v133 = _swiftEmptyArrayStorage;
  sub_10003045C();
  sub_10002572C((uint64_t *)&unk_10021BAF0);
  sub_1000301A0();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v23);
  sub_100016614();
  v30();
  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v1, v24);
  swift_release();
  id v31 = [v28 response];
  if (!v31) {
    goto LABEL_24;
  }
  id v32 = v31;
  self;
  uint64_t v33 = swift_dynamicCastObjCClass();
  if (!v33) {
    goto LABEL_23;
  }
  char v34 = (void *)v33;
  id v35 = [v28 originalRequest];
  if (v35)
  {
    uint64_t v36 = v35;
    uint64_t v37 = (uint64_t)v130;
    static URLRequest._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v38 = type metadata accessor for URLRequest();
    uint64_t v39 = (uint64_t)v130;
    uint64_t v40 = 0;
  }
  else
  {
    uint64_t v38 = type metadata accessor for URLRequest();
    uint64_t v37 = (uint64_t)v130;
    uint64_t v39 = sub_10002B040();
  }
  sub_10002538C(v39, v40, 1, v38);
  sub_1000B0814(v37, (uint64_t)object, &qword_10021DC60);
  type metadata accessor for URLRequest();
  sub_1000184F4((uint64_t)object, 1, v38);
  if (v66)
  {

    uint64_t v41 = &qword_10021DC60;
    uint64_t v42 = (uint64_t)object;
LABEL_9:
    sub_100025680(v42, v41);
    goto LABEL_24;
  }
  v43._object = (void *)0x80000001001B6360;
  v43._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  Swift::String_optional v44 = URLRequest.value(forHTTPHeaderField:)(v43);
  sub_10000E004();
  id v46 = *(void (**)(void *, uint64_t))(v45 + 8);
  v46(object, v38);
  if (!v44.value._object)
  {
LABEL_23:

    goto LABEL_24;
  }
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (!Strong)
  {

    swift_bridgeObjectRelease();
    goto LABEL_24;
  }
  uint64_t v48 = Strong;
  id v130 = v28;
  object = v44.value._object;
  id v49 = (char *)[v34 statusCode];
  uint64_t v50 = v49;
  if ((unint64_t)(v49 - 200) > 0xC7)
  {
    if (qword_100218B58 != -1) {
      swift_once();
    }
    uint64_t v56 = type metadata accessor for Logger();
    sub_10002A10C(v56, (uint64_t)qword_100236A20);
    unint64_t v57 = (unint64_t)object;
    swift_bridgeObjectRetain();
    uint64_t v58 = Logger.logObject.getter();
    os_log_type_t v59 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v58, v59))
    {
      uint64_t v60 = sub_10001D784();
      *(void *)&long long v134 = sub_10001AB54();
      *(_DWORD *)uint64_t v60 = 136315394;
      swift_bridgeObjectRetain();
      uint64_t v61 = sub_10001C274(v44.value._countAndFlagsBits, v57, (uint64_t *)&v134);
      sub_10002E87C(v61);
      sub_10002EA94();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v60 + 12) = 2048;
      unint64_t v133 = v50;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v58, v59, "download of %s got status code %ld", (uint8_t *)v60, 0x16u);
      swift_arrayDestroy();
      sub_100017D40();
      sub_100017D40();
      swift_unknownObjectRelease();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_unknownObjectRelease();
    }
    goto LABEL_23;
  }
  if (v49 != (char *)206 && v49 != (char *)200)
  {

    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    goto LABEL_24;
  }
  uint64_t countAndFlagsBits = v44.value._countAndFlagsBits;
  sub_1000A69A8();
  id v51 = [v130 originalRequest];
  if (v51)
  {
    uint64_t v52 = v51;
    uint64_t v53 = v125;
    static URLRequest._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v54 = 0;
    uint64_t v55 = v128;
  }
  else
  {
    uint64_t v54 = 1;
    uint64_t v55 = v128;
    uint64_t v53 = v125;
  }
  sub_10002538C(v53, v54, 1, v38);
  sub_1000B0814(v53, (uint64_t)v126, &qword_10021DC60);
  sub_1000184F4((uint64_t)v126, 1, v38);
  if (v66)
  {
    sub_100025680((uint64_t)v126, &qword_10021DC60);
    uint64_t v65 = v127;
    sub_10002947C();
    sub_10002538C(v62, v63, v64, v55);
LABEL_32:
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();

    uint64_t v41 = &qword_10021BB20;
    uint64_t v42 = (uint64_t)v65;
    goto LABEL_9;
  }
  URLRequest.url.getter();
  uint64_t v65 = v127;
  v46(v126, v38);
  sub_1000184F4((uint64_t)v127, 1, v55);
  if (v66) {
    goto LABEL_32;
  }
  uint64_t v126 = (void *)v48;
  uint64_t v67 = v123;
  uint64_t v113 = (void (*)(uint64_t, void (*)(void), uint64_t))v123[4];
  v113(v124, v127, v55);
  if (qword_100218B58 != -1) {
    swift_once();
  }
  uint64_t v68 = type metadata accessor for Logger();
  uint64_t v69 = sub_10002A10C(v68, (uint64_t)qword_100236A20);
  uint64_t v70 = (void (*)(uint64_t, uint64_t, uint64_t))v123[2];
  v70(v120, v124, v55);
  id v116 = (void (*)(uint64_t *, uint64_t, uint64_t))v70;
  v70(v121, v122, v55);
  uint64_t v125 = v69;
  unint64_t v71 = Logger.logObject.getter();
  os_log_type_t v72 = static os_log_type_t.default.getter();
  int v73 = v72;
  uint64_t v115 = v123 + 2;
  if (os_log_type_enabled(v71, v72))
  {
    uint64_t v74 = sub_10001D784();
    id v114 = v32;
    uint64_t v112 = swift_slowAlloc();
    *(void *)&long long v134 = v112;
    *(_DWORD *)uint64_t v74 = 136315394;
    int v111 = v73;
    uint64_t v75 = URL.absoluteString.getter();
    uint64_t v77 = sub_10001C274(v75, v76, (uint64_t *)&v134);
    sub_10002E87C(v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v78 = (void (*)(void))v67[1];
    sub_100023C70();
    v78();
    *(_WORD *)(v74 + 12) = 2080;
    uint64_t v79 = URL.absoluteString.getter();
    unint64_t v133 = (void *)sub_10001C274(v79, v80, (uint64_t *)&v134);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v81 = v129;
    unint64_t v127 = v78;
    sub_100023C70();
    v78();
    uint64_t v55 = v128;
    sub_10001AA8C((void *)&_mh_execute_header, v71, (os_log_type_t)v111, "download of %s finished %s");
    swift_arrayDestroy();
    id v32 = v114;
    sub_100017D40();
    sub_100017D40();
  }
  else
  {
    id v83 = (void (*)(void))v123[1];
    sub_10001AB6C();
    v83();
    unint64_t v127 = v83;
    sub_10001AB6C();
    v83();

    uint64_t v81 = v129;
  }
  __chkstk_darwin(v82);
  uint64_t v84 = countAndFlagsBits;
  *(void *)&v110[-32] = v81;
  *(void *)&v110[-24] = v84;
  *(void *)&v110[-16] = object;
  OS_dispatch_queue.sync<A>(execute:)();
  if (v134 == 1)
  {
    uint64_t v85 = v119;
    sub_1000A8F5C(v119);
    sub_1000184F4(v85, 1, v55);
    if (!v66)
    {
      v113(v118, (void (*)(void))v85, v55);
      uint64_t v98 = sub_100010DE0();
      sub_10002572C(&qword_100219720);
      swift_allocObject();
      sub_1000068C0(v98, 7, 0);
      id v99 = [self defaultManager];
      NSFileManager.saveInCache(file:from:)();

      uint64_t v101 = sub_100073614();
      sub_100039DBC(0xD000000000000027, 0x80000001001B3A00, (uint64_t)v101, &v134);
      swift_bridgeObjectRelease();
      id v114 = v32;
      if (v136)
      {
        if (swift_dynamicCast()) {
          uint64_t v102 = (uint64_t)v133;
        }
        else {
          uint64_t v102 = 0;
        }
      }
      else
      {
        sub_100025680((uint64_t)&v134, (uint64_t *)&unk_10021BB30);
        uint64_t v102 = 0;
      }
      sub_10001793C(v102);
      id v103 = [self defaultCenter];
      sub_10002572C((uint64_t *)&unk_10021BAE0);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1001A3830;
      *(void *)&long long v134 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *((void *)&v134 + 1) = v105;
      sub_10002E8FC();
      *(void *)(inited + 96) = &type metadata for String;
      unint64_t v106 = object;
      *(void *)(inited + 72) = countAndFlagsBits;
      *(void *)(inited + 80) = v106;
      *(void *)&long long v134 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *((void *)&v134 + 1) = v107;
      sub_10002E8FC();
      *(void *)(inited + 168) = v55;
      uint64_t v108 = sub_10002E5E8((uint64_t *)(inited + 144));
      v116(v108, v118, v55);
      uint64_t v109 = Dictionary.init(dictionaryLiteral:)();
      sub_10010553C(@"PARFileDownloadCompletedNotification", 0, v109, v103);
      sub_100028E9C();
      swift_release();

      sub_1000240FC();
      uint64_t v100 = v127;
      sub_100019BC8();
      v100();
      goto LABEL_54;
    }
    sub_100025680(v85, &qword_10021BB20);
    swift_bridgeObjectRetain();
    uint64_t v86 = Logger.logObject.getter();
    os_log_type_t v87 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v86, v87))
    {
      uint64_t v88 = (uint8_t *)swift_slowAlloc();
      *(void *)&long long v134 = sub_10001AB54();
      *(_DWORD *)uint64_t v88 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v89 = sub_100023D38();
      sub_10002E87C(v89);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v86, v87, "failed to get destination to save identifier %s", v88, 0xCu);
      swift_arrayDestroy();
      sub_100017D40();
      sub_100017D40();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }
    sub_100028E9C();

    sub_1000240FC();
    ((void (*)(uint64_t, uint64_t))v127)(v124, v55);
  }
  else
  {
    sub_100016608();
    v90();
    swift_bridgeObjectRetain();
    uint64_t v91 = Logger.logObject.getter();
    os_log_type_t v92 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v91, v92))
    {
      sub_100028E9C();

      sub_1000240FC();
      uint64_t v100 = v127;
      sub_100019BC8();
      v100();
      swift_bridgeObjectRelease_n();
LABEL_54:
      sub_100019BC8();
      v100();
      goto LABEL_24;
    }
    uint64_t v93 = sub_10001D784();
    *(void *)&long long v134 = swift_slowAlloc();
    *(_DWORD *)uint64_t v93 = 136315394;
    swift_bridgeObjectRetain();
    uint64_t v94 = sub_100023D38();
    sub_10002E87C(v94);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v93 + 12) = 2080;
    uint64_t v95 = URL.absoluteString.getter();
    unint64_t v133 = (void *)sub_10001C274(v95, v96, (uint64_t *)&v134);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000240FC();
    os_log_t v97 = v127;
    sub_10001AB6C();
    v97();
    sub_10001AA8C((void *)&_mh_execute_header, v91, v92, "failed to find download for identifier %s url %s");
    swift_arrayDestroy();
    sub_100017D40();
    sub_100017D40();
    sub_100028E9C();

    sub_10001AB6C();
    v97();
  }
LABEL_24:
  sub_10000DFB8();
}

uint64_t sub_1000B04B0(int a1, id a2)
{
  id v2 = [a2 taskIdentifier];
  swift_beginAccess();
  sub_1000BAD8C(v2);
  swift_endAccess();
  return swift_release();
}

void sub_1000B0530(uint64_t a1@<X1>, uint64_t a2@<X2>, BOOL *a3@<X8>)
{
  sub_1000AA99C(a1, a2);
  uint64_t v5 = v4;
  if (v4) {
    swift_release();
  }
  *a3 = v5 != 0;
}

id sub_1000B06A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (a4)
  {
    v8.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v8.super.Class isa = 0;
  }
  id v9 = [v4 initWithDomain:v7 code:a3 userInfo:v8.super.isa];

  return v9;
}

uint64_t sub_1000B0750()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000B0790()
{
  return sub_1000B04B0(*(void *)(v0 + 16), *(id *)(v0 + 24));
}

void sub_1000B0798(BOOL *a1@<X8>)
{
  sub_1000B0530(*(void *)(v1 + 24), *(void *)(v1 + 32), a1);
}

uint64_t sub_1000B07B8()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_1000B07F0()
{
}

uint64_t sub_1000B0814(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_10002572C(a3);
  sub_10000E004();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, a1);
  return a2;
}

uint64_t sub_1000B0874(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10002572C(&qword_10021BB20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000B08DC()
{
  type metadata accessor for URL();
  sub_100020C48();
  sub_100028344();

  sub_100018488();
  v1();
  swift_unknownObjectRelease();
  sub_100024390();
  return _swift_deallocObject(v2, v3, v4);
}

uint64_t sub_1000B098C()
{
  uint64_t v1 = type metadata accessor for URL();
  sub_100024920(v1);
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  unint64_t v6 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  NSString v7 = *(void **)(v0 + 16);
  NSDictionary v8 = *(uint64_t **)(v0 + 24);
  uint64_t v9 = v0 + v6;
  uint64_t v10 = v0 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v11 = *(void **)v10;
  uint64_t v12 = *(void *)(v10 + 8);

  return sub_1000AE2A0(v7, v8, v9, v11, v12);
}

uint64_t sub_1000B09FC()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000B0A0C()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_1000B0A4C()
{
}

id sub_1000B0A78(void *a1)
{
  id v1 = a1;
  uint64_t v2 = +[NSURLComponents parsec_componentsWithURL:v1 resolvingAgainstBaseURL:0];
  uint64_t v3 = [v2 queryItems];
  id v4 = [v3 mutableCopy];

  uint64_t v5 = objc_msgSend(v4, "parsec_filterObjectsUsingBlock:", &stru_1001FE488);
  if ([v5 count])
  {
    [v2 setQueryItems:v5];
  }
  else
  {
    [v2 setQueryItems:0];
    [v2 setQuery:0];
  }
  unint64_t v6 = [v2 URL];

  return v6;
}

uint64_t sub_1000B0B60()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

void sub_1000B0B98(uint64_t a1, uint64_t a2)
{
  sub_1000AD750(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_1000B0BA0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_10002572C(a3);
  sub_10000E004();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

uint64_t sub_1000B0C00()
{
  type metadata accessor for URL();
  sub_100020C48();
  sub_100028344();

  swift_bridgeObjectRelease();
  sub_100018488();
  v1();
  swift_bridgeObjectRelease();
  swift_release();
  sub_100024390();
  return _swift_deallocObject(v2, v3, v4);
}

void sub_1000B0CC8()
{
  uint64_t v1 = type metadata accessor for URL();
  sub_100024920(v1);
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  unint64_t v6 = (*(unsigned __int8 *)(v3 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = v0[2];
  uint64_t v9 = v0[3];
  uint64_t v10 = (void *)v0[4];
  uint64_t v11 = (void (*)(void))((char *)v0 + v6);
  uint64_t v12 = *(void *)((char *)v0 + v7);
  uint64_t v13 = *(void *)((char *)v0 + v7 + 8);
  uint64_t v14 = (void *)((char *)v0 + ((v7 + 23) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v15 = *v14;
  uint64_t v16 = v14[1];

  sub_1000AD31C(v8, v9, v10, v11, v12, v13, v15, v16);
}

uint64_t sub_1000B0D4C(void *a1)
{
  id v1 = [a1 downloadResourcesList];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

void sub_1000B0DA4()
{
  sub_1000A7BE4(*(void **)(v0 + 24));
}

uint64_t sub_1000B0DCC(unint64_t a1)
{
  return sub_1000ABB70(a1, *(void **)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_1000B0DD4()
{
  return sub_1000AC534(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

void sub_1000B0DDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1000AB9EC(a1, a2, a3, *(void *)(v3 + 16));
}

id sub_1000B0DE4(void *a1, void *a2)
{
  id v4 = a1;
  id v5 = a2;
  id v6 = 0;
  if (a1 && a2)
  {
    unint64_t v7 = +[NSURLComponents parsec_componentsWithURL:v4 resolvingAgainstBaseURL:0];
    uint64_t v8 = +[NSURLComponents parsec_componentsWithURL:v5 resolvingAgainstBaseURL:0];
    uint64_t v9 = [v7 path];
    uint64_t v10 = [v8 path];
    id v6 = 0;
    if ([v9 isEqual:v10])
    {
      uint64_t v11 = [v7 query];
      uint64_t v12 = [v8 query];
      id v6 = [v11 isEqual:v12];
    }
  }

  return v6;
}

uint64_t sub_1000B0F00(uint64_t a1, int a2, uint64_t a3, uint64_t a4, char a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return sub_1000B0F0C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t sub_1000B0F0C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, char a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v13 = a10 + qword_100236CC0;
  *(void *)uint64_t v13 = 0;
  *(unsigned char *)(v13 + 8) = 1;
  type metadata accessor for Client();
  sub_100016608();
  v14();
  if (a5)
  {
    sub_10002572C((uint64_t *)&unk_10021BB00);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1001A3830;
    uint64_t v32 = Client.name.getter();
    uint64_t v34 = v33;
    *(void *)(inited + 56) = &type metadata for String;
    unint64_t v35 = sub_1000303C8();
    *(void *)(inited + 32) = v32;
    *(void *)(inited + 40) = v34;
    *(void *)(inited + 96) = &type metadata for String;
    *(void *)(inited + 104) = v35;
    *(void *)(inited + 64) = v35;
    *(void *)(inited + 72) = a8;
    *(void *)(inited + 80) = a9;
    sub_100028478();
    *(void *)(a10 + *(void *)(v36 + 472)) = 0;
    sub_100028478();
    uint64_t v38 = *(void *)(v37 + 480);
    *(void *)(a10 + v38) = 0;
    sub_100028478();
    uint64_t v40 = (void *)(a10 + *(void *)(v39 + 464));
    uint64_t v25 = a6;
    *uint64_t v40 = a6;
    v40[1] = &off_1001FFE70;
    swift_retain();
    objc_msgSend(a6, "set_nw_activity:", a7);
    *(void *)(a10 + v38) = a7;
    swift_unknownObjectRetain();
    swift_release();
    swift_unknownObjectRelease();
    uint64_t v26 = "client=%{signpost.description:attribute,public}s, version=%{signpost.description:attribute,public}s";
    uint64_t v27 = a1;
    int v28 = a2;
    uint64_t v29 = 99;
    uint64_t v30 = inited;
  }
  else
  {
    *(void *)uint64_t v13 = a4;
    *(unsigned char *)(v13 + 8) = 0;
    sub_10002572C((uint64_t *)&unk_10021BB00);
    uint64_t v15 = swift_initStackObject();
    *(_OWORD *)(v15 + 16) = xmmword_1001A2A30;
    uint64_t v16 = Client.name.getter();
    uint64_t v18 = v17;
    *(void *)(v15 + 56) = &type metadata for String;
    unint64_t v19 = sub_1000303C8();
    *(void *)(v15 + 32) = v16;
    *(void *)(v15 + 40) = v18;
    *(void *)(v15 + 96) = &type metadata for String;
    *(void *)(v15 + 104) = v19;
    *(void *)(v15 + 64) = v19;
    *(void *)(v15 + 72) = a8;
    *(void *)(v15 + 80) = a9;
    *(void *)(v15 + 136) = &type metadata for UInt64;
    *(void *)(v15 + 144) = &protocol witness table for UInt64;
    *(void *)(v15 + 112) = a4;
    sub_100028478();
    *(void *)(a10 + *(void *)(v20 + 472)) = 0;
    sub_100028478();
    uint64_t v22 = *(void *)(v21 + 480);
    *(void *)(a10 + v22) = 0;
    sub_100028478();
    uint64_t v24 = (void *)(a10 + *(void *)(v23 + 464));
    uint64_t v25 = a6;
    *uint64_t v24 = a6;
    v24[1] = &off_1001FFE70;
    swift_retain();
    objc_msgSend(a6, "set_nw_activity:", a7);
    *(void *)(a10 + v22) = a7;
    swift_unknownObjectRetain();
    swift_release();
    swift_unknownObjectRelease();
    uint64_t v26 = "client=%{signpost.description:attribute,public}s, version=%{signpost.description:attribute,public}s, identifie"
          "r=%{signpost.description:attribute,public}llu";
    uint64_t v27 = a1;
    int v28 = a2;
    uint64_t v29 = 155;
    uint64_t v30 = v15;
  }
  uint64_t v41 = sub_100077B20(v27, v28, (uint64_t)v26, v29, 2, v30);

  swift_unknownObjectRelease();
  sub_100019BC8();
  v42();
  return v41;
}

uint64_t sub_1000B124C()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

void sub_1000B1294()
{
  sub_1000AA288(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void **)(v0 + 40));
}

uint64_t sub_1000B12A0()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000B12E0(unint64_t a1)
{
  return sub_1000AA380(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(char **)(v1 + 32));
}

uint64_t sub_1000B12EC()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000B1324()
{
  return sub_1000AC43C(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1000B1340(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

BOOL sub_1000B1388(id a1, NSURLQueryItem *a2, unint64_t a3)
{
  uint64_t v3 = a2;
  id v4 = [(NSURLQueryItem *)v3 name];
  if ([v4 isEqualToString:@"key"])
  {
    char v5 = 0;
  }
  else
  {
    id v6 = [(NSURLQueryItem *)v3 name];
    if ([v6 isEqualToString:@"lsk"])
    {
      char v5 = 0;
    }
    else
    {
      unint64_t v7 = [(NSURLQueryItem *)v3 name];
      if ([v7 isEqualToString:@"internal"])
      {
        char v5 = 0;
      }
      else
      {
        uint64_t v8 = [(NSURLQueryItem *)v3 name];
        if ([v8 isEqualToString:@"seed"])
        {
          char v5 = 0;
        }
        else
        {
          uint64_t v9 = [(NSURLQueryItem *)v3 name];
          unsigned __int8 v10 = [v9 isEqualToString:@"eat"];

          char v5 = v10 ^ 1;
        }
      }
    }
  }
  return v5;
}

__n128 *sub_1000B1508(__n128 *result, __n128 a2)
{
  result[1] = a2;
  result[2].n128_u64[0] = 7107189;
  result[2].n128_u64[1] = 0xE300000000000000;
  return result;
}

uint64_t sub_1000B1520()
{
  *(_WORD *)(v0 + 12) = 2112;
  return _convertErrorToNSError(_:)();
}

uint64_t sub_1000B1540()
{
  return swift_slowAlloc();
}

uint64_t sub_1000B1558()
{
  return v0;
}

uint64_t sub_1000B1564()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1000B1584()
{
  uint64_t result = sub_10003CBF0();
  *(unsigned char *)(result + 24) = 1;
  return result;
}

uint64_t sub_1000B15A4(void *a1)
{
  id v2 = [a1 typeForPQC];
  if ((unint64_t)v2 >= 2)
  {
    if (v2 != (id)2)
    {
      if (qword_100218B68 != -1) {
        swift_once();
      }
      uint64_t v7 = type metadata accessor for Logger();
      sub_10002A10C(v7, (uint64_t)qword_100236A50);
      id v8 = a1;
      uint64_t v9 = Logger.logObject.getter();
      os_log_type_t v10 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v9, v10))
      {
        uint64_t v11 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v11 = 67109120;
        [v8 type];
        sub_1000269BC();

        _os_log_impl((void *)&_mh_execute_header, v9, v10, "ECC: type %d is not handled", v11, 8u);
        swift_slowDealloc();
      }
      else
      {
      }
      return 0;
    }
    return 1;
  }
  sub_1000B1960(a1);
  if (v3)
  {
    v4._uint64_t countAndFlagsBits = sub_10002C2A0();
    Swift::Bool v5 = String.hasPrefix(_:)(v4);
    swift_bridgeObjectRelease();
    if (v5) {
      return 1;
    }
  }
  return 0;
}

uint64_t sub_1000B1730(void *a1)
{
  id v2 = [a1 result];
  if (!v2) {
    return 0;
  }
  id v3 = v2;
  id v4 = [v2 typeForPQC];
  if ((unint64_t)v4 >= 2)
  {
    if (v4 != (id)2)
    {
      if (qword_100218B68 != -1) {
        swift_once();
      }
      uint64_t v11 = type metadata accessor for Logger();
      sub_10002A10C(v11, (uint64_t)qword_100236A50);
      id v3 = v3;
      uint64_t v12 = Logger.logObject.getter();
      os_log_type_t v13 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v12, v13))
      {
        uint64_t v14 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v14 = 67109120;
        [v3 type];
        sub_1000269BC();

        _os_log_impl((void *)&_mh_execute_header, v12, v13, "ECC: type %d is not handled", v14, 8u);
        swift_slowDealloc();

        return 0;
      }

LABEL_16:
      return 0;
    }
    id v9 = [a1 titleText];
  }
  else
  {
    sub_1000B1960(v3);
    uint64_t v6 = v5;
    if (!v5)
    {

      return v6;
    }
    v7._uint64_t countAndFlagsBits = sub_10002C2A0();
    Swift::Bool v8 = String.hasPrefix(_:)(v7);
    swift_bridgeObjectRelease();
    if (!v8) {
      goto LABEL_16;
    }
    id v9 = [v3 completedQuery];
  }
  id v10 = v9;
  if (!v10) {
    goto LABEL_16;
  }
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v6;
}

uint64_t type metadata accessor for SafariEngagedSuggestionController()
{
  return self;
}

uint64_t sub_1000B1960(void *a1)
{
  id v1 = [a1 jsonSectionBundleIdentifier];
  if (!v1) {
    return 0;
  }
  id v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

char *sub_1000B19C4(int64_t a1)
{
  type metadata accessor for UUID();
  sub_100020C48();
  uint64_t v73 = v4;
  uint64_t v74 = v3;
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v66 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10002572C(&qword_10021BB20);
  __chkstk_darwin(v7 - 8);
  id v9 = (void (*)(void))((char *)&v66 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = type metadata accessor for URL();
  sub_100020C48();
  uint64_t v12 = v11;
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v68 = (char *)&v66 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v69 = (char *)&v66 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v66 - v19;
  uint64_t v21 = __chkstk_darwin(v18);
  uint64_t v23 = (char *)&v66 - v22;
  uint64_t v24 = __chkstk_darwin(v21);
  unint64_t v76 = (char *)&v66 - v25;
  __chkstk_darwin(v24);
  uint64_t v27 = (char *)&v66 - v26;
  uint64_t v75 = v1;
  NSFileManager.parsecdCustomFBDirectoryURL.getter();
  if (sub_100027BA4((uint64_t)v9, 1, v10) != 1)
  {
    (*(void (**)(char *, void (*)(void), uint64_t))(v12 + 32))(v27, v9, v10);
    if (a1 < (uint64_t)0xFFFFFFFF80000000)
    {
      __break(1u);
    }
    else if (a1 <= 0x7FFFFFFF)
    {
      uint64_t v71 = v12;
      os_log_type_t v72 = v27;
      switch((int)a1)
      {
        case 0:
        case 19:
          (*(void (**)(char *, uint64_t))(v12 + 8))(v27, v10);
          goto LABEL_3;
        case 1:
          uint64_t v32 = @"SafariAutoFill";
          goto LABEL_27;
        case 2:
          uint64_t v32 = @"Crowdsourcing";
          goto LABEL_27;
        case 3:
          uint64_t v32 = @"SpotlightResultFeatures";
          goto LABEL_27;
        case 4:
          uint64_t v32 = @"SafariAutoPlay";
          goto LABEL_27;
        case 5:
          uint64_t v32 = @"Trystero";
          goto LABEL_27;
        case 6:
          uint64_t v32 = @"EngagedCompletionFeatures";
          goto LABEL_27;
        case 7:
          uint64_t v32 = @"ProactiveEventTracker";
          goto LABEL_27;
        case 8:
          uint64_t v32 = @"PhiDES";
          goto LABEL_27;
        case 9:
          uint64_t v32 = @"DuetExpert";
          goto LABEL_27;
        case 10:
          uint64_t v32 = @"UserReport";
          goto LABEL_27;
        case 11:
          uint64_t v32 = @"Usage";
          goto LABEL_27;
        case 12:
          uint64_t v32 = @"FeedbackV2";
          goto LABEL_27;
        case 13:
          uint64_t v32 = @"FeedbackV2PB";
          goto LABEL_27;
        case 14:
          uint64_t v32 = @"ProactiveEventTrackerAggregated";
          goto LABEL_27;
        case 15:
          uint64_t v32 = @"Handwashing";
          goto LABEL_27;
        case 16:
          uint64_t v32 = @"Experiments";
          goto LABEL_27;
        case 17:
          uint64_t v32 = @"FeatureQuality";
          goto LABEL_27;
        case 18:
          uint64_t v32 = @"OnDeviceAnalytics";
LABEL_27:
          uint64_t v33 = v32;
          break;
        default:
          uint64_t v32 = +[NSString stringWithFormat:@"(unknown: %i)", a1];
          break;
      }
      uint64_t v34 = v32;
      uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v9 = v36;

      UUID.init()();
      uint64_t v37 = UUID.uuidString.getter();
      a1 = v38;
      (*(void (**)(char *, void (*)(void)))(v73 + 8))(v6, v74);
      uint64_t v67 = v35;
      URL.appendingPathComponent(_:isDirectory:)();
      uint64_t v73 = v37;
      URL.appendingPathComponent(_:)();
      uint64_t v39 = *(void (**)(void))(v71 + 8);
      sub_10001DD54();
      v39();
      URL.standardizedFileURL.getter();
      uint64_t v74 = v39;
      ((void (*)(char *, uint64_t))v39)(v23, v10);
      URL.path.getter();
      NSString v40 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      sub_10002572C(qword_10021CA78);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1001A2A20;
      *(void *)(inited + 64) = &type metadata for Int;
      *(void *)(inited + 32) = NSFilePosixPermissions;
      *(void *)(inited + 40) = 384;
      type metadata accessor for FileAttributeKey(0);
      sub_1000986B4();
      uint64_t v42 = NSFilePosixPermissions;
      uint64_t v43 = Dictionary.init(dictionaryLiteral:)();
      unsigned __int8 v44 = sub_1000B2384((uint64_t)v40, 0, 0xC000000000000000, v43, v75);

      if ((v44 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (qword_100218B50 != -1) {
          swift_once();
        }
        uint64_t v49 = type metadata accessor for Logger();
        sub_10002A10C(v49, (uint64_t)qword_100236A08);
        sub_1000259B0();
        v50();
        id v51 = Logger.logObject.getter();
        os_log_type_t v52 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v51, v52))
        {
          uint64_t v53 = swift_slowAlloc();
          uint64_t v78 = swift_slowAlloc();
          *(_DWORD *)uint64_t v53 = 136315138;
          id v9 = (void (*)(void))(v53 + 12);
          uint64_t v75 = (void *)(v53 + 4);
          uint64_t v54 = URL.path.getter();
          uint64_t v77 = sub_10001C274(v54, v55, &v78);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          uint64_t v56 = sub_10002A4BC();
          ((void (*)(uint64_t))(v53 + 12))(v56);
          _os_log_impl((void *)&_mh_execute_header, v51, v52, "could not create custom feedback file at %s", (uint8_t *)v53, 0xCu);
          swift_arrayDestroy();
          sub_100017D40();
          sub_100017D40();
        }
        else
        {
          uint64_t v61 = sub_10002A4BC();
          ((void (*)(uint64_t))v9)(v61);
        }

        uint64_t v62 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v20 = v63;
        id v64 = objc_allocWithZone((Class)NSError);
        sub_1000B06A0(v62, (uint64_t)v20, 500, 0);
        swift_willThrow();
        sub_10001DD54();
        v9();
        ((void (*)(char *, uint64_t))v9)(v72, v10);
        return v20;
      }
      if (qword_100218B30 == -1)
      {
LABEL_30:
        uint64_t v45 = type metadata accessor for Logger();
        sub_10002A10C(v45, (uint64_t)qword_1002369A8);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        id v46 = Logger.logObject.getter();
        os_log_type_t v47 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v46, v47))
        {
          uint64_t v48 = swift_slowAlloc();
          uint64_t v75 = (void *)swift_slowAlloc();
          uint64_t v78 = (uint64_t)v75;
          *(_DWORD *)uint64_t v48 = 136315394;
          swift_bridgeObjectRetain();
          uint64_t v77 = sub_10001C274(v67, (unint64_t)v9, &v78);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v48 + 12) = 2080;
          swift_bridgeObjectRetain();
          uint64_t v77 = sub_10001C274(v73, a1, &v78);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v46, v47, "Created custom feedback file for type %s with name %s", (uint8_t *)v48, 0x16u);
          swift_arrayDestroy();
          sub_100017D40();
          sub_100017D40();
        }
        else
        {

          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
        }
        sub_10003010C();
        uint64_t v20 = v69;
        sub_1000259B0();
        v57();
        uint64_t v58 = v70;
        os_log_type_t v59 = (char *)sub_100009A78((uint64_t)v20);
        uint64_t v60 = v74;
        if (!v58) {
          uint64_t v20 = v59;
        }
        sub_10001DD54();
        v60();
        sub_10001DD54();
        v60();
        return v20;
      }
LABEL_45:
      swift_once();
      goto LABEL_30;
    }
    __break(1u);
    goto LABEL_45;
  }
  sub_10003CB40((uint64_t)v9);
LABEL_3:
  uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v30 = v29;
  id v31 = objc_allocWithZone((Class)NSError);
  sub_1000B06A0(v28, v30, 500, 0);
  swift_willThrow();
  return v20;
}

id sub_1000B2384(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, void *a5)
{
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_1000291B4(a2, a3);
  type metadata accessor for FileAttributeKey(0);
  sub_1000986B4();
  Class v10 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v11 = [a5 createFileAtPath:a1 contents:isa attributes:v10];

  return v11;
}

uint64_t sub_1000B2444()
{
  swift_retain();
  uint64_t v0 = sub_10008096C();
  uint64_t v2 = v1;
  swift_release();
  sub_1000B267C(0, v0, v2);
  return v0;
}

uint64_t sub_1000B24A8()
{
  sub_10005B134();
  uint64_t v0 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v0 - 8);
  static DispatchQoS.userInitiated.getter();
  uint64_t v1 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v1);
  v6[1] = 0;
  sub_100030414((unint64_t *)&qword_10021B3D0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  dispatch thunk of OptionSet.init(rawValue:)();
  uint64_t v2 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  __chkstk_darwin(v2);
  (*(void (**)(char *, void))(v4 + 104))((char *)v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:));
  uint64_t result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  qword_100236BA8 = result;
  return result;
}

uint64_t sub_1000B267C(char a1, uint64_t a2, uint64_t a3)
{
  if (qword_100218C18 != -1) {
    swift_once();
  }
  v22[2] = qword_100236BA8;
  uint64_t v6 = swift_allocObject();
  swift_weakInit();
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = v6;
  *(unsigned char *)(v7 + 24) = a1 & 1;
  *(void *)(v7 + 32) = a2;
  *(void *)(v7 + 40) = a3;
  aBlock[4] = sub_1000B3A3C;
  aBlock[5] = v7;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000085EC;
  aBlock[3] = &unk_1001FE508;
  uint64_t v8 = _Block_copy(aBlock);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  v22[1] = v22;
  sub_100020C48();
  uint64_t v11 = v10;
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v15 = type metadata accessor for DispatchWorkItemFlags();
  v22[0] = v22;
  sub_100020C48();
  uint64_t v17 = v16;
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)v22 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22[3] = _swiftEmptyArrayStorage;
  sub_100030414((unint64_t *)&qword_100219260, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10002572C((uint64_t *)&unk_10021BAF0);
  sub_1000301A0();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v8);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v15);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v9);
  swift_release();
  return swift_release();
}

void sub_1000B2954(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for Client();
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)v86 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v11 = Strong;
    uint64_t v12 = (void *)sub_100010DE0();
    static Client.parsecd.getter();
    type metadata accessor for ResourceAccessSpan();
    swift_allocObject();
    uint64_t v13 = sub_100003EAC(v12, 39, (uint64_t)v9, 0, 1);
    id v14 = [self defaultTreatmentStore];
    sub_10002572C(&qword_10021ACF8);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1001A2A20;
    uint64_t v16 = *(void *)(v11 + 24);
    *(void *)(inited + 32) = *(void *)(v11 + 16);
    *(void *)(inited + 40) = v16;
    swift_bridgeObjectRetain();
    sub_1000EE584(inited);
    Class isa = Set._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v90 = v14;
    id v18 = [v14 areasForNamespaces:isa];

    v92[0] = 0;
    id v19 = [v18 resultWithError:v92];

    id v20 = v92[0];
    if (v19)
    {
      uint64_t v21 = *(void *)(v11 + 24);
      *(void *)&v91[0] = *(void *)(v11 + 16);
      *((void *)&v91[0] + 1) = v21;
      swift_bridgeObjectRetain_n();
      id v22 = v20;
      id v23 = objc_msgSend(v19, "__swift_objectForKeyedSubscript:", _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
      swift_unknownObjectRelease();
      if (v23)
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        memset(v91, 0, sizeof(v91));
      }
      sub_10008822C((uint64_t)v91, (uint64_t)v92);
      if (!v92[3])
      {
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();

        sub_100039CB0((uint64_t)v92);
        return;
      }
      sub_10002572C(&qword_10021C5C0);
      if ((swift_dynamicCast() & 1) == 0)
      {
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();

        return;
      }
      id v88 = v19;
      swift_bridgeObjectRelease();
      Class v34 = Set._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v35 = v90;
      id v36 = [v90 treatmentsPayloadForAreas:v34];

      v92[0] = 0;
      id v37 = [v36 resultWithError:v92];

      id v38 = v92[0];
      if (v37)
      {
        uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v41 = v40;
        id v42 = v38;

        uint64_t v43 = HIBYTE(v41) & 0xF;
        uint64_t v44 = v39;
        if ((v41 & 0x2000000000000000) == 0) {
          uint64_t v43 = v39 & 0xFFFFFFFFFFFFLL;
        }
        uint64_t v45 = (void *)v13;
        if (!v43)
        {
          swift_release();
          swift_release();

          swift_bridgeObjectRelease();
          return;
        }
        id v46 = v88;
        if (a2)
        {
          *(unsigned char *)(v13 + qword_10021B6C8) = 54;
          sub_100011708();
          if (qword_100218B78 != -1) {
            swift_once();
          }
          uint64_t v47 = type metadata accessor for Logger();
          sub_10002A10C(v47, (uint64_t)qword_100236A80);
          swift_retain_n();
          swift_bridgeObjectRetain_n();
          uint64_t v48 = Logger.logObject.getter();
          os_log_type_t v49 = static os_log_type_t.debug.getter();
          int v50 = v49;
          if (!os_log_type_enabled(v48, v49))
          {

            swift_bridgeObjectRelease_n();
            swift_release_n();
            id v73 = v90;
LABEL_47:
            swift_retain();
            sub_100082118();
            swift_release();
            swift_release();
            swift_release();

            return;
          }
          uint64_t v51 = swift_slowAlloc();
          v92[0] = (id)swift_slowAlloc();
          uint64_t v89 = v45;
          *(_DWORD *)uint64_t v51 = 136315394;
          LODWORD(v87) = v50;
          uint64_t v53 = *(void *)(v11 + 16);
          unint64_t v52 = *(void *)(v11 + 24);
          swift_bridgeObjectRetain();
          *(void *)&v91[0] = sub_10001C274(v53, v52, (uint64_t *)v92);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          *(_WORD *)(v51 + 12) = 2080;
          swift_bridgeObjectRetain();
          *(void *)&v91[0] = sub_10001C274(v44, v41, (uint64_t *)v92);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v48, (os_log_type_t)v87, "AMS Baseline Treatments for namespace %s initialized to '%s'", (uint8_t *)v51, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

LABEL_46:
          id v73 = v90;
          goto LABEL_47;
        }
        if (!a4
          || (v44 == a3 ? (BOOL v55 = v41 == a4) : (BOOL v55 = 0), !v55
                                                      && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0))
        {
          *(unsigned char *)(v13 + qword_10021B6C8) = 55;
          sub_100011708();
          if (qword_100218B78 != -1) {
            swift_once();
          }
          uint64_t v61 = type metadata accessor for Logger();
          sub_10002A10C(v61, (uint64_t)qword_100236A80);
          swift_retain_n();
          swift_bridgeObjectRetain_n();
          uint64_t v62 = Logger.logObject.getter();
          os_log_type_t v63 = static os_log_type_t.debug.getter();
          int v64 = v63;
          if (os_log_type_enabled(v62, v63))
          {
            uint64_t v65 = swift_slowAlloc();
            uint64_t v89 = (void *)swift_slowAlloc();
            *(void *)&v91[0] = v89;
            *(_DWORD *)uint64_t v65 = 136315650;
            LODWORD(v87) = v64;
            uint64_t v66 = *(void *)(v11 + 16);
            unint64_t v67 = *(void *)(v11 + 24);
            swift_bridgeObjectRetain();
            v92[0] = (id)sub_10001C274(v66, v67, (uint64_t *)v91);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_release_n();
            swift_bridgeObjectRelease();
            *(_WORD *)(v65 + 12) = 2080;
            v86[1] = v65 + 14;
            swift_retain();
            uint64_t v68 = (void *)sub_10008096C();
            uint64_t v70 = v69;
            swift_release();
            v92[0] = v68;
            v92[1] = v70;
            sub_10002572C(&qword_10021D050);
            uint64_t v71 = String.init<A>(describing:)();
            v92[0] = (id)sub_10001C274(v71, v72, (uint64_t *)v91);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_release_n();
            swift_bridgeObjectRelease();
            *(_WORD *)(v65 + 22) = 2080;
            swift_bridgeObjectRetain();
            v92[0] = (id)sub_10001C274(v44, v41, (uint64_t *)v91);
            id v46 = v88;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            _os_log_impl((void *)&_mh_execute_header, v62, (os_log_type_t)v87, "Stale previously vended AMS Baseline Treatments for namespace %s %s updated to '%s'", (uint8_t *)v65, 0x20u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            swift_bridgeObjectRelease_n();
            swift_release_n();
          }
          goto LABEL_46;
        }
        swift_bridgeObjectRetain();
        swift_retain();
        uint64_t v56 = sub_10008096C();
        uint64_t v58 = v57;
        swift_release();
        if (v58)
        {
          if (v44 == v56 && v58 == v41)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
LABEL_55:
            if (qword_100218B78 != -1) {
              swift_once();
            }
            uint64_t v80 = type metadata accessor for Logger();
            sub_10002A10C(v80, (uint64_t)qword_100236A80);
            swift_retain();
            uint64_t v81 = Logger.logObject.getter();
            os_log_type_t v82 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v81, v82))
            {
              id v83 = (uint8_t *)swift_slowAlloc();
              uint64_t v89 = (void *)swift_slowAlloc();
              v92[0] = v89;
              *(_DWORD *)id v83 = 136315138;
              uint64_t v45 = (void *)v13;
              os_log_type_t v87 = v83 + 4;
              uint64_t v85 = *(void *)(v11 + 16);
              unint64_t v84 = *(void *)(v11 + 24);
              swift_bridgeObjectRetain();
              *(void *)&v91[0] = sub_10001C274(v85, v84, (uint64_t *)v92);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_release();
              swift_bridgeObjectRelease();
              _os_log_impl((void *)&_mh_execute_header, v81, v82, "AMS BaselineTreatments for namespace %s unchanged", v83, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {

              swift_release();
            }
            id v73 = v90;
            id v46 = v88;
            *((unsigned char *)v45 + qword_10021B6C8) = 53;
            sub_100011708();
            goto LABEL_47;
          }
          char v60 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v60) {
            goto LABEL_55;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        *(unsigned char *)(v13 + qword_10021B6C8) = 54;
        sub_100011708();
        if (qword_100218B78 != -1) {
          swift_once();
        }
        uint64_t v74 = type metadata accessor for Logger();
        sub_10002A10C(v74, (uint64_t)qword_100236A80);
        swift_retain_n();
        swift_bridgeObjectRetain_n();
        uint64_t v75 = Logger.logObject.getter();
        os_log_type_t v76 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v75, v76))
        {
          uint64_t v77 = swift_slowAlloc();
          uint64_t v89 = (void *)swift_slowAlloc();
          v92[0] = v89;
          *(_DWORD *)uint64_t v77 = 136315394;
          uint64_t v79 = *(void *)(v11 + 16);
          unint64_t v78 = *(void *)(v11 + 24);
          swift_bridgeObjectRetain();
          *(void *)&v91[0] = sub_10001C274(v79, v78, (uint64_t *)v92);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          *(_WORD *)(v77 + 12) = 2080;
          swift_bridgeObjectRetain();
          *(void *)&v91[0] = sub_10001C274(v44, v41, (uint64_t *)v92);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v75, v76, "AMS Baseline Treatments for namespace %s updated to '%s'", (uint8_t *)v77, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
          swift_release_n();
        }
        id v73 = v90;
        id v46 = v88;
        goto LABEL_47;
      }
      id v54 = v92[0];
      uint64_t v25 = _convertNSErrorToError(_:)();

      swift_willThrow();
      id v27 = v88;
      uint64_t v26 = (unsigned char *)v13;
    }
    else
    {
      id v24 = v92[0];
      uint64_t v25 = _convertNSErrorToError(_:)();

      swift_willThrow();
      uint64_t v26 = (unsigned char *)v13;
      id v27 = v90;
    }

    v26[qword_10021B6C8] = 52;
    sub_100011708();
    if (qword_100218B78 != -1) {
      swift_once();
    }
    uint64_t v28 = type metadata accessor for Logger();
    sub_10002A10C(v28, (uint64_t)qword_100236A80);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v89 = v26;
      id v31 = (uint8_t *)swift_slowAlloc();
      v92[0] = (id)swift_slowAlloc();
      *(_DWORD *)id v31 = 136315138;
      *(void *)&v91[0] = v25;
      swift_errorRetain();
      sub_10002572C(&qword_10021B3C0);
      uint64_t v32 = String.init<A>(describing:)();
      *(void *)&v91[0] = sub_10001C274(v32, v33, (uint64_t *)v92);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Couldn't fetch Baseline Treatments: %s", v31, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_release();

      swift_release();
      swift_errorRelease();
    }
    else
    {
      swift_release();
      swift_release();
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
}

uint64_t sub_1000B393C()
{
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  return v0;
}

uint64_t sub_1000B396C()
{
  sub_1000B393C();

  return _swift_deallocClassInstance(v0, 56, 7);
}

uint64_t type metadata accessor for AMSBaselineTreatmentProvider()
{
  return self;
}

uint64_t sub_1000B39C4()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000B39FC()
{
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

void sub_1000B3A3C()
{
  sub_1000B2954(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

Swift::Int sub_1000B3A50(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

Swift::Int sub_1000B3A94(char a1)
{
  return Hasher._finalize()();
}

Swift::Int sub_1000B3ADC()
{
  return sub_1000B4160();
}

Swift::Int sub_1000B3AE8(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

Swift::Int sub_1000B3B28()
{
  return Hasher._finalize()();
}

Swift::Int sub_1000B3B64(char a1)
{
  return Hasher._finalize()();
}

Swift::Int sub_1000B3BA8(char a1)
{
  return Hasher._finalize()();
}

Swift::Int sub_1000B3BEC(Swift::UInt8 a1)
{
  return Hasher._finalize()();
}

Swift::Int sub_1000B3C2C(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

Swift::Int sub_1000B3C6C()
{
  return Hasher._finalize()();
}

uint64_t sub_1000B3CAC()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

void sub_1000B3D1C(uint64_t a1, char a2)
{
}

void sub_1000B3D50()
{
}

void sub_1000B3D78(uint64_t a1, char a2)
{
}

void sub_1000B3DAC(uint64_t a1, unsigned __int8 a2)
{
}

void sub_1000B3DD8(int a1, Swift::UInt8 a2)
{
}

void sub_1000B3E00(uint64_t a1, unsigned __int8 a2)
{
}

uint64_t sub_1000B3E28()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000B3EE8()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1000B3F28()
{
  sub_1000243BC();
  sub_10005F084(v0);
  sub_1000269E4();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Swift::Int sub_1000B3F70()
{
  return Hasher._finalize()();
}

Swift::Int sub_1000B3FAC()
{
  sub_1000243BC();
  Hasher._combine(_:)(v0);
  return Hasher._finalize()();
}

Swift::Int sub_1000B3FE8()
{
  sub_1000243BC();
  Hasher._combine(_:)(v0);
  return Hasher._finalize()();
}

Swift::Int sub_1000B4024()
{
  sub_1000243BC();
  Hasher._combine(_:)(v0 + 1);
  return Hasher._finalize()();
}

Swift::Int sub_1000B4064()
{
  sub_1000243BC();
  sub_1000270DC(v0);
  return Hasher._finalize()();
}

Swift::Int sub_1000B40A4()
{
  sub_1000243BC();
  sub_1000270DC(v0);
  return Hasher._finalize()();
}

Swift::Int sub_1000B40E4()
{
  return Hasher._finalize()();
}

Swift::Int sub_1000B4124()
{
  sub_1000243BC();
  Hasher._combine(_:)(v0);
  return Hasher._finalize()();
}

Swift::Int sub_1000B4160()
{
  return Hasher._finalize()();
}

const char *sub_1000B41DC(char a1)
{
  uint64_t result = "creating";
  switch(a1)
  {
    case 1:
      uint64_t result = "updating";
      break;
    case 2:
      uint64_t result = "failedToGetURL";
      break;
    case 3:
      uint64_t result = "failedToRead";
      break;
    case 4:
      uint64_t result = "failedToWrite";
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1000B4268(unint64_t result)
{
  if (result >= 5) {
    return 5;
  }
  return result;
}

Swift::Int sub_1000B4278()
{
  return sub_1000B3C2C(*v0);
}

Swift::Int sub_1000B4294()
{
  return sub_1000B4124();
}

unint64_t sub_1000B42B0@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1000B4268(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000B42DC()
{
  uint64_t v0 = qword_10021D2D0;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t sub_1000B4314()
{
  uint64_t v0 = qword_10021D2E0;
  swift_bridgeObjectRetain();
  return v0;
}

const char *sub_1000B434C()
{
  return sub_1000B41DC(*v0);
}

uint64_t sub_1000B436C(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain();
  Logger.init(subsystem:category:)();
  uint64_t v5 = (void *)(v2 + OBJC_IVAR____TtC7parsecd27DevicePersistentDataManager_cachedData);
  v5[1] = 0;
  v5[2] = 0;
  *uint64_t v5 = 0;
  uint64_t v6 = OBJC_IVAR____TtC7parsecd27DevicePersistentDataManager_locker;
  type metadata accessor for Locker();
  uint64_t v7 = swift_allocObject();
  uint64_t v8 = (_DWORD *)swift_slowAlloc();
  *(void *)(v7 + 16) = v8;
  *uint64_t v8 = 0;
  *(void *)(v2 + v6) = v7;
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + OBJC_IVAR____TtC7parsecd27DevicePersistentDataManager_fileManager) = a2;
  return v2;
}

unint64_t sub_1000B4448()
{
  uint64_t v60 = type metadata accessor for UUID();
  sub_100020C48();
  unint64_t v59 = v1;
  __chkstk_darwin(v2);
  sub_10000E04C();
  uint64_t v58 = v3;
  uint64_t v64 = type metadata accessor for OSSignpostID();
  sub_100020C48();
  uint64_t v61 = v4;
  __chkstk_darwin(v5);
  sub_10000E04C();
  uint64_t v63 = v6;
  type metadata accessor for PegasusPersistenceContext();
  sub_100020C48();
  __chkstk_darwin(v7);
  uint64_t v8 = type metadata accessor for URL();
  sub_100020C48();
  uint64_t v10 = v9;
  uint64_t v12 = __chkstk_darwin(v11);
  id v14 = (char *)v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)v57 - v15;
  sub_10002572C(&qword_10021D460);
  swift_allocObject();
  swift_retain();
  sub_10003A90C();
  uint64_t v65 = v17;
  uint64_t v62 = v0;
  id v18 = *(void **)(v0 + OBJC_IVAR____TtC7parsecd27DevicePersistentDataManager_fileManager);
  v67[0] = *(void *)(v62 + OBJC_IVAR____TtC7parsecd27DevicePersistentDataManager_fileManager);
  sub_100023FA0(0, (unint64_t *)&qword_10021A2F0);
  static PegasusConfigContainerURLProvider.containerURL<A>(using:)();
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v14, v16, v8);
  id v19 = v18;
  PegasusPersistenceContext.init(location:fileManager:)();
  static PegasusKeyValueStoreFactory.deviceInfoStore(context:name:requiresAuthentication:)();
  uint64_t v21 = sub_10002AD9C();
  v22(v21);
  uint64_t v23 = sub_10000E164();
  v24(v23);
  sub_10001C1AC(&v66, (uint64_t)v67);
  sub_100024A84();
  unint64_t v25 = dispatch thunk of PegasusKeyValueStore.integer(for:)();
  LOBYTE(v16) = v26;
  LODWORD(v8) = v26 & 1;
  sub_10001B620(v67, v67[3]);
  uint64_t v27 = dispatch thunk of PegasusKeyValueStore.string(for:)();
  uint64_t v29 = v28;
  swift_bridgeObjectRetain();
  LODWORD(v60) = v8;
  unint64_t v30 = sub_1000BD004(v25, v8, v27, v29);
  unint64_t v33 = v30;
  uint64_t v34 = v31;
  uint64_t v35 = v32;
  if ((v16 & 1) != 0
    || v30 != v25
    || !v29
    || (v31 == v27 ? (BOOL v36 = v29 == v32) : (BOOL v36 = 0), !v36 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0))
  {
    uint64_t v58 = v27;
    unint64_t v59 = v25;
    uint64_t v41 = sub_100023FA0(0, (unint64_t *)&qword_1002192B0);
    sub_10002A4D0();
    unint64_t v55 = sub_100021100();
    unint64_t v56 = v55;
    v57[0] = v55;
    uint64_t v53 = &type metadata for String;
    unint64_t v54 = v55;
    sub_1000259C8();
    sub_1000213C8();
    swift_bridgeObjectRetain();
    sub_100017F18();
    *(void *)(v42 - 256) = v41;
    id v43 = (id)OS_os_log.init(subsystem:category:)();
    uint64_t v44 = v63;
    OSSignpostID.init(log:)();
    static os_signpost_type_t.event.getter();
    sub_10002DEB4();
    sub_10001BB64(v45, (uint64_t)v43, (uint64_t)"failedToRead", 12, 2, v44, (uint64_t)"enableTelemetry=YES", 19, v51, v52);

    uint64_t v61 = *(void *)(v61 + 8);
    ((void (*)(uint64_t, uint64_t))v61)(v44, v64);
    id v46 = Logger.logObject.getter();
    os_log_type_t v47 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v46, v47))
    {
      uint64_t v48 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v48 = 0;
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "Failed to read data from store", v48, 2u);
      sub_100017D40();
    }

    if (v60 || v33 != v59)
    {
      sub_100024A84();
      dispatch thunk of PegasusKeyValueStore.setInteger(_:for:)();
    }
    if (v29)
    {
      if (v34 == v58 && v29 == v35) {
        goto LABEL_24;
      }
      char v50 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v50)
      {
LABEL_25:
        sub_10002572C((uint64_t *)&unk_10021BB00);
        uint64_t v40 = swift_allocObject();
        *(_OWORD *)(v40 + 16) = xmmword_1001A2A20;
        *(void *)(v40 + 56) = &type metadata for Int;
        *(void *)(v40 + 64) = &protocol witness table for Int;
        *(void *)(v40 + 32) = v33;
        goto LABEL_26;
      }
    }
    sub_100024A84();
    swift_bridgeObjectRetain();
    dispatch thunk of PegasusKeyValueStore.setString(_:for:)();
LABEL_24:
    swift_bridgeObjectRelease();
    goto LABEL_25;
  }
  swift_bridgeObjectRelease();
  id v37 = Logger.logObject.getter();
  os_log_type_t v38 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v37, v38))
  {
    uint64_t v39 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v39 = 0;
    _os_log_impl((void *)&_mh_execute_header, v37, v38, "Persistent data read successfully", v39, 2u);
    sub_100017D40();
  }

  sub_10002572C((uint64_t *)&unk_10021BB00);
  uint64_t v40 = swift_allocObject();
  *(_OWORD *)(v40 + 16) = xmmword_1001A2A20;
  *(void *)(v40 + 56) = &type metadata for Int;
  *(void *)(v40 + 64) = &protocol witness table for Int;
  *(void *)(v40 + 32) = v25;
LABEL_26:
  sub_100032150("enableTelemetry=YES d20=%{signpost.telemetry:number1,public}lu", 62, 2, v40, v53, v54, v55, v56);
  swift_release();
  swift_bridgeObjectRelease();
  sub_10001CA50((uint64_t)v67);
  return v33;
}

uint64_t sub_1000B4F48()
{
  sub_10002572C((uint64_t *)&unk_10021BB00);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1001A2A20;
  swift_errorRetain();
  sub_10002572C(&qword_10021B3C0);
  uint64_t v1 = String.init<A>(describing:)();
  uint64_t v3 = v2;
  *(void *)(v0 + 56) = &type metadata for String;
  *(void *)(v0 + 64) = sub_1000303C8();
  *(void *)(v0 + 32) = v1;
  *(void *)(v0 + 40) = v3;
  sub_100032150("ActivityResult=%{signpost.description:attribute}s", 49, 2, v0);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000B5004()
{
  swift_release();
  uint64_t v1 = v0 + OBJC_IVAR____TtC7parsecd27DevicePersistentDataManager_logger;
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t sub_1000B50A4()
{
  sub_1000B5004();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v1, v2);
}

uint64_t sub_1000B50FC()
{
  return type metadata accessor for DevicePersistentDataManager();
}

uint64_t type metadata accessor for DevicePersistentDataManager()
{
  uint64_t result = qword_10021D338;
  if (!qword_10021D338) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000B514C()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

unint64_t sub_1000B5208()
{
  unint64_t result = qword_10021D420;
  if (!qword_10021D420)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10021D420);
  }
  return result;
}

unint64_t sub_1000B5254(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1000B5284();
  unint64_t result = sub_1000B52D0();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1000B5284()
{
  unint64_t result = qword_10021D440;
  if (!qword_10021D440)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10021D440);
  }
  return result;
}

unint64_t sub_1000B52D0()
{
  unint64_t result = qword_10021D448;
  if (!qword_10021D448)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10021D448);
  }
  return result;
}

unint64_t sub_1000B5320()
{
  unint64_t result = qword_10021D450;
  if (!qword_10021D450)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10021D450);
  }
  return result;
}

unint64_t sub_1000B536C(uint64_t a1)
{
  unint64_t result = sub_1000B5394();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000B5394()
{
  unint64_t result = qword_10021D458;
  if (!qword_10021D458)
  {
    type metadata accessor for DevicePersistentDataManager();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10021D458);
  }
  return result;
}

unint64_t sub_1000B53E4(unint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    swift_stdlib_random();
    unint64_t result = (0 * (unsigned __int128)v1) >> 64;
    if (-(uint64_t)v1 % v1)
    {
      while (1)
        swift_stdlib_random();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for DevicePersistentDataManager.Activity(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000B553CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DevicePersistentDataManager.Activity()
{
  return &type metadata for DevicePersistentDataManager.Activity;
}

NSString sub_1000B5578()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_100236BB0 = (uint64_t)result;
  return result;
}

uint64_t static ObjcExceptionUtil.tryBlock<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v29 = a4;
  uint64_t v31 = type metadata accessor for Optional();
  sub_100020C48();
  uint64_t v8 = v7;
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)aBlock - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  id v14 = (char *)aBlock - v13;
  sub_1000259EC();
  uint64_t v15 = (void *)swift_allocObject();
  v15[2] = a3;
  void v15[3] = v14;
  v15[4] = a1;
  v15[5] = a2;
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = sub_1000B5E08;
  *(void *)(v16 + 24) = v15;
  aBlock[4] = sub_10001787C;
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100017848;
  aBlock[3] = &unk_1001FE668;
  uint64_t v17 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  id v18 = (void (*)(uint64_t))v17[2];
  uint64_t isEscapingClosureAtFileLocation = v17;
  v18(isEscapingClosureAtFileLocation);
  id v20 = 0;
  while (1)
  {

    id v21 = v20;
    _Block_release((const void *)isEscapingClosureAtFileLocation);
    uint64_t isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    id v22 = (void *)swift_release();
    if (isEscapingClosureAtFileLocation)
    {
      __break(1u);
      goto LABEL_9;
    }
    if (v21)
    {
      id v23 = v21;
      sub_10002A4F0();
      sub_10004B198();
      swift_allocError();
      *(void *)uint64_t v24 = v21;
      *(void *)(v24 + 8) = 0;
      *(unsigned char *)(v24 + 16) = 0;
      swift_willThrow();

      (*(void (**)(char *, uint64_t))(v8 + 8))(v14, v31);
      return swift_release();
    }
    uint64_t v26 = v31;
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v12, v14, v31);
    id v22 = (void *)sub_100027BA4((uint64_t)v12, 1, (uint64_t)a3);
    if (v22 != 1) {
      break;
    }
LABEL_9:
    __break(1u);
    id v20 = objc_begin_catch(v22);
    objc_end_catch();
  }
  sub_100024AA8();
  v28(v27);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v14, v26);
  return swift_release();
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void (*v17)(void);
  uint64_t isEscapingClosureAtFileLocation;
  id v19;
  id v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v25;
  void (*v26)(void);
  void v27[2];
  char *v28;
  uint64_t v29;
  void aBlock[6];
  uint64_t v31;

  v27[1] = a4;
  uint64_t v29 = type metadata accessor for Optional();
  sub_100020C48();
  uint64_t v8 = v7;
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v28 = (char *)v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v27 - v12;
  uint64_t v31 = 0;
  sub_1000259EC();
  id v14 = (void *)swift_allocObject();
  v14[2] = a3;
  v14[3] = v13;
  v14[4] = a1;
  void v14[5] = a2;
  v14[6] = &v31;
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = sub_1000B5E2C;
  *(void *)(v15 + 24) = v14;
  aBlock[4] = sub_1000B5E58;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100017848;
  aBlock[3] = &unk_1001FE6E0;
  uint64_t v16 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  uint64_t v17 = (void (*)(void))v16[2];
  uint64_t isEscapingClosureAtFileLocation = v16;
  v17();
  id v19 = 0;
  while (1)
  {

    id v20 = v19;
    _Block_release((const void *)isEscapingClosureAtFileLocation);
    uint64_t isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    id v21 = (void *)swift_release();
    if (isEscapingClosureAtFileLocation)
    {
      __break(1u);
      goto LABEL_12;
    }
    if (v20)
    {
      id v22 = v20;
      sub_10002A4F0();
      sub_10004B198();
      swift_allocError();
      *(void *)id v23 = v20;
      *(void *)(v23 + 8) = 0;
      *(unsigned char *)(v23 + 16) = 0;
      swift_willThrow();

LABEL_7:
      (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v29);
      goto LABEL_8;
    }
    if (v31)
    {
      swift_errorRetain();
      swift_willThrow();
      goto LABEL_7;
    }
    unint64_t v25 = (uint64_t)v28;
    uint64_t isEscapingClosureAtFileLocation = v29;
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v28, v13, v29);
    id v21 = (void *)sub_100027BA4(v25, 1, (uint64_t)a3);
    if (v21 != 1) {
      break;
    }
LABEL_12:
    __break(1u);
    id v19 = objc_begin_catch(v21);
    objc_end_catch();
  }
  sub_100024AA8();
  v26();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v13, isEscapingClosureAtFileLocation);
LABEL_8:
  swift_errorRelease();
  return swift_release();
}

uint64_t sub_1000B5BDC(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v14 - v11;
  a2(v10);
  sub_10002538C((uint64_t)v12, 0, 1, a5);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 40))(a1, v12, v8);
}

uint64_t sub_1000B5D00(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v13 - v10;
  a2(v9);
  sub_10002538C((uint64_t)v11, 0, 1, a4);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 40))(a1, v11, v7);
}

uint64_t sub_1000B5DFC()
{
  return sub_100026898(v0, 48);
}

uint64_t sub_1000B5E08()
{
  return sub_1000B5D00(*(void *)(v0 + 24), *(void (**)(uint64_t))(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 16));
}

uint64_t sub_1000B5E14()
{
  return sub_100026898(v0, 32);
}

uint64_t sub_1000B5E20()
{
  return sub_100026898(v0, 56);
}

uint64_t sub_1000B5E2C()
{
  return sub_1000B5BDC(*(void *)(v0 + 24), *(void (**)(uint64_t))(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 16));
}

uint64_t sub_1000B5E3C()
{
  return sub_100026898(v0, 32);
}

ValueMetadata *type metadata accessor for ObjcExceptionUtil()
{
  return &type metadata for ObjcExceptionUtil;
}

uint64_t sub_1000B5E5C(void *a1)
{
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();

  sub_10002572C(&qword_10021D528);
  uint64_t v3 = swift_allocObject();
  *(_DWORD *)(v3 + 16) = 0;
  *(void *)(v1 + 24) = v3;
  return v1;
}

void sub_1000B5EB8()
{
  uint64_t v1 = (os_unfair_lock_s *)(*(void *)(v0 + 24) + 16);
  os_unfair_lock_lock(v1);
  sub_1000B9164();
  os_unfair_lock_unlock(v1);
}

void sub_1000B5F1C(uint64_t a1, uint64_t a2, os_unfair_lock_s *a3)
{
  uint64_t v3 = a3 + 4;
  os_unfair_lock_lock(a3 + 4);
  sub_1000B8C44(v4, &v5);
  os_unfair_lock_unlock(v3);
}

void sub_1000B5F88()
{
  uint64_t v1 = (os_unfair_lock_s *)(*(void *)(v0 + 24) + 16);
  os_unfair_lock_lock(v1);
  sub_1000B8B44();
  os_unfair_lock_unlock(v1);
}

uint64_t sub_1000B5FF4()
{
  return swift_unknownObjectWeakLoadStrong();
}

uint64_t sub_1000B6020()
{
  sub_10002572C(&qword_10021D530);
  swift_allocObject();
  uint64_t result = sub_10010FD9C((uint64_t)_swiftEmptyDictionarySingleton);
  qword_10021D468 = result;
  return result;
}

uint64_t sub_1000B606C()
{
  sub_10002572C(&qword_10021AE98);
  swift_allocObject();
  uint64_t result = sub_100098C18(0);
  qword_100236BB8 = result;
  return result;
}

uint64_t sub_1000B60B4()
{
  sub_10005B134();
  uint64_t v0 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v0 - 8);
  static DispatchQoS.userInteractive.getter();
  uint64_t v1 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v1);
  v6[1] = 0;
  sub_100030414((unint64_t *)&qword_10021B3D0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  dispatch thunk of OptionSet.init(rawValue:)();
  uint64_t v2 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  __chkstk_darwin(v2);
  (*(void (**)(char *, void))(v4 + 104))((char *)v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:));
  uint64_t result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  qword_100236BC0 = result;
  return result;
}

uint64_t sub_1000B6288(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v45 = a6;
  uint64_t v46 = a7;
  uint64_t v44 = a5;
  LODWORD(v43) = a3;
  uint64_t v9 = type metadata accessor for URL();
  sub_100020C48();
  uint64_t v11 = v10;
  uint64_t v13 = *(void *)(v12 + 64);
  __chkstk_darwin(v14);
  uint64_t v15 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100218C38 != -1) {
    swift_once();
  }
  uint64_t v47 = qword_100236BC0;
  uint64_t v16 = swift_allocObject();
  swift_unknownObjectWeakInit();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v9);
  unint64_t v17 = (*(unsigned __int8 *)(v11 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v18 = v17 + v13;
  uint64_t v19 = swift_allocObject();
  unint64_t v20 = (v18 & 0xFFFFFFFFFFFFFFF8) + v19;
  *(void *)(v19 + 16) = v16;
  uint64_t v41 = v16;
  (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v19 + v17, v15, v9);
  *(unsigned char *)(v19 + v18) = v43 & 1;
  *(void *)(v20 + 8) = a4;
  uint64_t v21 = v45;
  *(void *)(v20 + 16) = v44;
  id v22 = (uint64_t *)(v19 + (((v18 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v23 = v46;
  *id v22 = v21;
  v22[1] = v23;
  aBlock[4] = sub_1000B8964;
  aBlock[5] = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000085EC;
  aBlock[3] = &unk_1001FE778;
  uint64_t v40 = _Block_copy(aBlock);
  uint64_t v42 = type metadata accessor for DispatchQoS();
  id v43 = &v39;
  sub_100020C48();
  uint64_t v25 = v24;
  __chkstk_darwin(v26);
  sub_10000DFD0();
  uint64_t v29 = v28 - v27;
  swift_retain();
  sub_100030358(a4);
  sub_100030358(v21);
  static DispatchQoS.unspecified.getter();
  uint64_t v30 = type metadata accessor for DispatchWorkItemFlags();
  sub_100020C48();
  uint64_t v32 = v31;
  __chkstk_darwin(v33);
  sub_10000DFD0();
  uint64_t v36 = v35 - v34;
  uint64_t v48 = _swiftEmptyArrayStorage;
  sub_100030414((unint64_t *)&qword_100219260, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10002572C((uint64_t *)&unk_10021BAF0);
  sub_100092CA8((unint64_t *)&qword_100219270, (uint64_t *)&unk_10021BAF0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  id v37 = v40;
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v37);
  (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v36, v30);
  (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v29, v42);
  swift_release();
  return swift_release();
}

void sub_1000B6650(uint64_t a1, uint64_t a2, int a3, void (*a4)(unsigned char *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v104 = a6;
  uint64_t v105 = a7;
  uint64_t v98 = a5;
  uint64_t v102 = a4;
  int v101 = a3;
  uint64_t v8 = type metadata accessor for URLRequest();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v107 = &v89[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = type metadata accessor for URL();
  uint64_t v99 = *(void *)(v11 - 8);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v100 = &v89[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v12);
  uint64_t v15 = &v89[-v14];
  uint64_t v108 = type metadata accessor for Date();
  uint64_t v16 = *(void *)(v108 - 8);
  __chkstk_darwin(v108);
  uint64_t v18 = &v89[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v19 = sub_10002572C(&qword_10021BB10);
  uint64_t v20 = __chkstk_darwin(v19 - 8);
  id v103 = &v89[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v20);
  uint64_t v23 = &v89[-v22];
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v25 = (void *)Strong;
    uint64_t v96 = v9;
    uint64_t v97 = a2;
    Swift::String_optional v26 = URL.host(percentEncoded:)(1);
    uint64_t countAndFlagsBits = v26.value._countAndFlagsBits;
    if (!v26.value._object)
    {
      if (qword_100218BB0 != -1) {
        swift_once();
      }
      uint64_t v30 = type metadata accessor for Logger();
      sub_10002A10C(v30, (uint64_t)qword_100236AD8);
      id v31 = v25;
      uint64_t v32 = Logger.logObject.getter();
      os_log_type_t v33 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v32, v33))
      {
        uint64_t v34 = (uint8_t *)swift_slowAlloc();
        aBlock[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v34 = 136315138;
        uint64_t v35 = sub_1000B7470();
        uint64_t v111 = sub_10001C274(v35, v36, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        id v37 = "Throttling warmup for session: %s couldn't infer hostname";
LABEL_23:
        uint64_t v46 = v32;
        os_log_type_t v47 = v33;
        uint64_t v48 = v34;
        uint32_t v49 = 12;
        goto LABEL_24;
      }
      goto LABEL_25;
    }
    uint64_t v95 = v8;
    uint64_t v27 = qword_100218C28;
    swift_bridgeObjectRetain();
    if (v27 != -1) {
      swift_once();
    }
    swift_retain();
    uint64_t v28 = sub_1000132D4();
    swift_release();
    sub_100039E7C(countAndFlagsBits, (uint64_t)v26.value._object, v28, (uint64_t)v23);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v29 = v108;
    if (sub_100027BA4((uint64_t)v23, 1, v108))
    {
      sub_1000B8A68((uint64_t)v23);
    }
    else
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v16 + 16))(v18, v23, v29);
      sub_1000B8A68((uint64_t)v23);
      Date.timeIntervalSinceNow.getter();
      double v39 = v38;
      (*(void (**)(unsigned char *, uint64_t))(v16 + 8))(v18, v29);
      double v40 = fabs(v39);
      if (v40 < 180.0)
      {
        swift_bridgeObjectRelease();
        if (qword_100218BB0 != -1) {
          swift_once();
        }
        uint64_t v41 = type metadata accessor for Logger();
        sub_10002A10C(v41, (uint64_t)qword_100236AD8);
        id v31 = v25;
        uint64_t v32 = Logger.logObject.getter();
        os_log_type_t v42 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v32, v42))
        {
          uint64_t v43 = swift_slowAlloc();
          aBlock[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v43 = 136315394;
          uint64_t v44 = sub_1000B7470();
          uint64_t v111 = sub_10001C274(v44, v45, aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          *(_WORD *)(v43 + 12) = 2048;
          uint64_t v111 = *(void *)&v40;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          id v37 = "Throttling warmup for session: %s attempted %f seconds ago";
          uint64_t v46 = v32;
          os_log_type_t v47 = v42;
          uint64_t v48 = (uint8_t *)v43;
          uint32_t v49 = 22;
LABEL_24:
          _os_log_impl((void *)&_mh_execute_header, v46, v47, v37, v48, v49);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          return;
        }
LABEL_25:

        return;
      }
    }
    if (qword_100218C30 != -1) {
      swift_once();
    }
    uint64_t v50 = qword_100236BB8;
    swift_retain();
    Lock.lock()();
    swift_beginAccess();
    if (*(unsigned char *)(v50 + 24))
    {
      Lock.unlock()();
      swift_bridgeObjectRelease();
      swift_release();
      if (qword_100218BB0 != -1) {
        swift_once();
      }
      uint64_t v51 = type metadata accessor for Logger();
      sub_10002A10C(v51, (uint64_t)qword_100236AD8);
      id v31 = v25;
      uint64_t v32 = Logger.logObject.getter();
      os_log_type_t v33 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v32, v33))
      {
        uint64_t v34 = (uint8_t *)swift_slowAlloc();
        aBlock[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v34 = 136315138;
        uint64_t v52 = sub_1000B7470();
        uint64_t v109 = sub_10001C274(v52, v53, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        id v37 = "Throttling warmup for session: %s: already in progress";
        goto LABEL_23;
      }
      goto LABEL_25;
    }
    *(unsigned char *)(v50 + 24) = 1;
    Lock.unlock()();
    swift_release();
    if (qword_100218BB0 != -1) {
      swift_once();
    }
    uint64_t v54 = type metadata accessor for Logger();
    uint64_t v55 = sub_10002A10C(v54, (uint64_t)qword_100236AD8);
    uint64_t v56 = v99;
    uint64_t v57 = v99 + 16;
    uint64_t v58 = v97;
    uint64_t v93 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v99 + 16);
    v93(v15, v97, v11);
    id v59 = v25;
    uint64_t v94 = v55;
    uint64_t v60 = Logger.logObject.getter();
    os_log_type_t v61 = static os_log_type_t.debug.getter();
    int v62 = v61;
    if (os_log_type_enabled(v60, v61))
    {
      uint64_t v63 = swift_slowAlloc();
      uint64_t v91 = swift_slowAlloc();
      aBlock[0] = v91;
      *(_DWORD *)uint64_t v63 = 136315394;
      int v90 = v62;
      uint64_t v64 = sub_1000B7470();
      uint64_t v109 = sub_10001C274(v64, v65, aBlock);
      uint64_t v92 = v57;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v63 + 12) = 2080;
      uint64_t v66 = URL.absoluteString.getter();
      uint64_t v109 = sub_10001C274(v66, v67, aBlock);
      uint64_t v29 = v108;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(unsigned char *, uint64_t))(v56 + 8))(v15, v11);
      _os_log_impl((void *)&_mh_execute_header, v60, (os_log_type_t)v90, "Warming up session %s to %s", (uint8_t *)v63, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v58 = v97;
      swift_slowDealloc();
    }
    else
    {

      (*(void (**)(unsigned char *, uint64_t))(v56 + 8))(v15, v11);
    }

    v93(v100, v58, v11);
    uint64_t v68 = v107;
    URLRequest.init(url:cachePolicy:timeoutInterval:)();
    URLRequest.cachePolicy.setter();
    URLRequest.assumesHTTP3Capable.setter();
    uint64_t v69 = v102;
    if (v102)
    {
      swift_retain();
      v69(v68);
      sub_1000332CC((uint64_t)v69);
    }
    sub_10002572C(&qword_10021D520);
    swift_allocObject();
    uint64_t v70 = sub_1000B5E5C(0);
    Class isa = URLRequest._bridgeToObjectiveC()().super.isa;
    uint64_t v72 = swift_allocObject();
    swift_unknownObjectWeakInit();
    id v73 = (void *)swift_allocObject();
    v73[2] = v70;
    uint64_t v73[3] = v72;
    uint64_t v74 = v59;
    uint64_t v76 = v104;
    uint64_t v75 = v105;
    v73[4] = v104;
    v73[5] = v75;
    aBlock[4] = (uint64_t)sub_1000B8B18;
    aBlock[5] = (uint64_t)v73;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1000B774C;
    aBlock[3] = (uint64_t)&unk_1001FE7C8;
    uint64_t v77 = _Block_copy(aBlock);
    swift_retain();
    sub_100030358(v76);
    swift_release();
    id v78 = [v74 dataTaskWithRequest:isa completionHandler:v77];
    _Block_release(v77);

    id v79 = v78;
    sub_1000B5F88();

    uint64_t v80 = (uint64_t)v103;
    Date.init()();
    sub_10002538C(v80, 0, 1, v29);
    swift_retain();
    aBlock[0] = sub_1000132D4();
    sub_100118BA8(v80, countAndFlagsBits, (uint64_t)v26.value._object);
    sub_1000821C8();
    swift_release();
    id v81 = v74;
    os_log_type_t v82 = Logger.logObject.getter();
    os_log_type_t v83 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v82, v83))
    {
      unint64_t v84 = (uint8_t *)swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)unint64_t v84 = 136315138;
      uint64_t v85 = sub_1000B7470();
      uint64_t v109 = sub_10001C274(v85, v86, aBlock);
      uint64_t v68 = v107;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v82, v83, "Kicked off connection warmup for session %s", v84, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    uint64_t v88 = v96;
    *(float *)&double v87 = NSURLSessionTaskPriorityHigh;
    [v79 setPriority:v87];
    objc_msgSend(v79, "set_preconnect:", 1);
    [v79 resume];

    swift_release();
    (*(void (**)(unsigned char *, uint64_t))(v88 + 8))(v68, v95);
  }
}

uint64_t sub_1000B7470()
{
  uint64_t result = sub_1000B8B6C(v0);
  if (!v2) {
    return 0x6E776F6E6B6E75;
  }
  return result;
}

void sub_1000B74AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(void))
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (!Strong) {
    goto LABEL_14;
  }
  uint64_t v10 = (void *)Strong;
  if (qword_100218BB0 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  sub_10002A10C(v11, (uint64_t)qword_100236AD8);
  id v12 = v10;
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 136315138;
    uint64_t v16 = sub_1000B7470();
    sub_10001C274(v16, v17, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "warmup attempt complete for session %s", v15, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    if (!a7) {
      goto LABEL_11;
    }
LABEL_8:
    uint64_t v18 = *(os_unfair_lock_s **)(a5 + 24);
    swift_retain();
    sub_1000B5F1C((uint64_t)sub_1000B8BFC, a5, v18);
    if (v19)
    {
      uint64_t v20 = v19;
      a7();
    }
    sub_1000332CC((uint64_t)a7);
    goto LABEL_11;
  }

  if (a7) {
    goto LABEL_8;
  }
LABEL_11:
  if (qword_100218C30 != -1) {
    swift_once();
  }
  swift_retain();
  sub_100102320(0);

  swift_release();
LABEL_14:
  sub_1000B5EB8();
}

uint64_t sub_1000B774C(uint64_t a1, void *a2, void *a3, void *a4)
{
  unsigned int v6 = a2;
  uint64_t v7 = *(void (**)(void *, unint64_t, void *, void *))(a1 + 32);
  if (a2)
  {
    swift_retain();
    id v8 = v6;
    unsigned int v6 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v10 = v9;
  }
  else
  {
    swift_retain();
    unint64_t v10 = 0xF000000000000000;
  }
  id v11 = a3;
  id v12 = a4;
  v7(v6, v10, a3, a4);

  sub_10000A330((uint64_t)v6, v10);

  return swift_release();
}

uint64_t sub_1000B7814(void *a1, uint64_t a2, char a3)
{
  if (a3)
  {
    id v6 = a1;
    _StringGuts.grow(_:)(51);
    v7._object = (void *)0x80000001001B6850;
    v7._uint64_t countAndFlagsBits = 0xD000000000000016;
    String.append(_:)(v7);
    [v6 code];
    v8._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    v9._uint64_t countAndFlagsBits = 0x3A6E69616D6F6420;
    v9._object = (void *)0xE900000000000020;
    String.append(_:)(v9);
    id v10 = [v6 domain];
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v13 = v12;

    v14._uint64_t countAndFlagsBits = v11;
    v14._object = v13;
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    v15._uint64_t countAndFlagsBits = 0x7069726373656420;
    v15._object = (void *)0xEE00203A6E6F6974;
    String.append(_:)(v15);
    id v16 = [v6 description];
    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v19 = v18;

    sub_1000B8FBC(a1, a2, 1);
    v20._uint64_t countAndFlagsBits = v17;
    v20._object = v19;
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    sub_1000B8FBC(a1, a2, 1);
    return 0;
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_10002572C(&qword_10021D050);
    return String.init<A>(describing:)();
  }
}

uint64_t sub_1000B79F4()
{
  return sub_1000B7814(*(void **)v0, *(void *)(v0 + 8), *(unsigned char *)(v0 + 16));
}

id sub_1000B7A00(uint64_t a1, char a2)
{
  uint64_t v38 = type metadata accessor for URLRequest();
  sub_100020C48();
  uint64_t v5 = v4;
  uint64_t v37 = *(void *)(v6 + 64);
  __chkstk_darwin(v7);
  Swift::String v9 = (char *)v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = sub_10002572C(&qword_10021D538);
  sub_100020C48();
  uint64_t v41 = v10;
  __chkstk_darwin(v11);
  sub_10000DFD0();
  uint64_t v14 = v13 - v12;
  uint64_t v40 = sub_10002572C(&qword_10021D540);
  sub_100020C48();
  uint64_t v42 = v15;
  __chkstk_darwin(v16);
  sub_10000DFD0();
  uint64_t v19 = v18 - v17;
  _s19ResponseFutureStoreCMa();
  swift_allocObject();
  Swift::String v20 = sub_1000B89E4();
  Class isa = URLRequest._bridgeToObjectiveC()().super.isa;
  aBlock[4] = sub_1000B8C80;
  aBlock[5] = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000B774C;
  aBlock[3] = &unk_1001FE7F0;
  uint64_t v22 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  id v23 = [v36[1] dataTaskWithRequest:isa completionHandler:v22];
  _Block_release(v22);

  LODWORD(v24) = *(_DWORD *)*(&off_1001FE970 + a2);
  [v23 setPriority:v24];
  uint64_t v25 = swift_allocObject();
  *(void *)(v25 + 16) = v20;
  *(void *)(v25 + 24) = v23;
  swift_retain();
  id v26 = v23;
  sub_10002572C(&qword_10021D548);
  sub_100092CA8(&qword_10021D550, &qword_10021D548);
  Deferred.init(createPublisher:)();
  uint64_t v27 = a1;
  uint64_t v28 = v38;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v9, v27, v38);
  unint64_t v29 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v30 = (v37 + v29 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v31 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v31 + v29, v9, v28);
  *(void *)(v31 + v30) = v26;
  id v32 = v26;
  sub_10002572C(&qword_10021B3C0);
  sub_100092CA8(&qword_10021D558, &qword_10021D538);
  uint64_t v33 = v39;
  Publisher.mapError<A>(_:)();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v14, v33);
  sub_100092CA8(&qword_10021D560, &qword_10021D540);
  uint64_t v34 = v40;
  Publisher.eraseToAnyPublisher()();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v19, v34);
  return v32;
}

void sub_1000B7E44(uint64_t a1, unint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v8 = sub_1000B8128();
  uint64_t v10 = (void (*)(void))v9;
  if (v8)
  {
    if (!v9)
    {
LABEL_5:
      swift_release();
      return;
    }
    if (a4)
    {
      swift_retain();
      sub_100030358((uint64_t)v10);
      swift_errorRetain();
      uint64_t v11 = _convertErrorToNSError(_:)();
      sub_1000B8EB4();
      swift_allocError();
      *(void *)uint64_t v12 = v11;
      *(void *)(v12 + 8) = 0;
      *(unsigned char *)(v12 + 16) = 1;
      v10();
      sub_1000332CC((uint64_t)v10);
      sub_1000332CC((uint64_t)v10);
      swift_release();
      swift_errorRelease();
      swift_errorRelease();
      goto LABEL_5;
    }
    if (a3 && (self, (uint64_t v13 = swift_dynamicCastObjCClass()) != 0))
    {
      uint64_t v14 = (void *)v13;
      id v15 = a3;
      swift_retain();
      sub_100030358((uint64_t)v10);
      id v21 = v15;
      sub_1000B8F00(a1, a2);
      ((void (*)(void *, uint64_t, unint64_t, void))v10)(v14, a1, a2, 0);
      sub_1000332CC((uint64_t)v10);
      sub_1000332CC((uint64_t)v10);

      swift_release();
      sub_10000A330(a1, a2);
      swift_release();
    }
    else
    {
      swift_retain();
      sub_100030358((uint64_t)v10);
      id v16 = a3;
      sub_10002572C(&qword_10021D568);
      uint64_t v17 = String.init<A>(describing:)();
      uint64_t v19 = v18;
      sub_1000B8EB4();
      swift_allocError();
      *(void *)uint64_t v20 = v17;
      *(void *)(v20 + 8) = v19;
      *(unsigned char *)(v20 + 16) = 0;
      v10();
      sub_1000332CC((uint64_t)v10);
      sub_1000332CC((uint64_t)v10);
      swift_release();
      swift_errorRelease();
      swift_release();
    }
  }
  else
  {
    sub_1000332CC(v9);
  }
}

uint64_t sub_1000B8128()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 40);
  uint64_t v2 = (uint64_t)&v1[4];
  uint64_t v3 = v1 + 5;
  os_unfair_lock_lock(v1 + 5);
  sub_1000B8F14(v2, &v7);
  os_unfair_lock_unlock(v3);
  uint64_t v4 = v7;
  if ((void)v8)
  {
    long long v6 = v8;
    *(_OWORD *)(swift_allocObject() + 16) = v6;
  }
  return v4;
}

id sub_1000B81D8@<X0>(void *a1@<X1>, uint64_t *a2@<X8>)
{
  sub_10002572C(&qword_10021D548);
  swift_allocObject();
  swift_retain();
  uint64_t v4 = Future.init(_:)();
  sub_1000B8354();
  id result = [a1 resume];
  *a2 = v4;
  return result;
}

uint64_t sub_1000B8270(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a2;
  swift_retain();
  sub_1000B82F4();

  return swift_release();
}

void sub_1000B82F4()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 40);
  uint64_t v2 = v1 + 4;
  uint64_t v3 = v1 + 5;
  os_unfair_lock_lock(v1 + 5);
  sub_1000B8E94(v2);
  os_unfair_lock_unlock(v3);
}

void sub_1000B8354()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 40);
  uint64_t v2 = v1 + 4;
  uint64_t v3 = v1 + 5;
  os_unfair_lock_lock(v1 + 5);
  sub_1000B8E04(v2);
  os_unfair_lock_unlock(v3);
}

uint64_t sub_1000B83B0@<X0>(uint64_t *a1@<X0>, void *a2@<X2>, void *a3@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v6 = URLRequest.allHTTPHeaderFields.getter();
  if (v6
    && (uint64_t v7 = sub_100039E20(0xD000000000000011, 0x80000001001B6810, v6), v9 = v8, swift_bridgeObjectRelease(), v9))
  {
    _StringGuts.grow(_:)(18);
    swift_bridgeObjectRelease();
    v25[0] = 0xD000000000000010;
    v25[1] = 0x80000001001B6830;
    v10._uint64_t countAndFlagsBits = v7;
    v10._object = v9;
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    unint64_t v11 = 0xD000000000000010;
    unint64_t v12 = 0x80000001001B6830;
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v11 = 0;
    unint64_t v12 = 0xE000000000000000;
  }
  if (qword_100218B28 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  sub_10002A10C(v13, (uint64_t)qword_100236990);
  id v14 = a2;
  swift_bridgeObjectRetain();
  id v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = swift_slowAlloc();
    v25[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v17 = 136315394;
    uint64_t v24 = v5;
    id v18 = [v14 description];
    uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v23 = v11;
    unint64_t v21 = v20;

    uint64_t v26 = sub_10001C274(v19, v21, v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v17 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v26 = sub_10001C274(v23, v12, v25);
    uint64_t v5 = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Download for %s %s failed", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  *a3 = v5;
  return swift_errorRetain();
}

unsigned char *sub_1000B86A8(unsigned char *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((*result & 1) == 0)
  {
    uint64_t v4 = *(void *)(a2 + 24);
    *(void *)(a2 + 24) = a3;
    *(void *)(a2 + 32) = a4;
    sub_1000332CC(v4);
    return (unsigned char *)swift_retain();
  }
  return result;
}

uint64_t sub_1000B86F0@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  if (*(unsigned char *)result)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  else
  {
    *(unsigned char *)id result = 1;
    uint64_t Strong = swift_weakLoadStrong();
    uint64_t v6 = *(void *)(a2 + 24);
    uint64_t v7 = *(void *)(a2 + 32);
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 32) = 0;
    sub_100030358(v6);
    sub_1000332CC(v6);
    swift_weakAssign();
    if (v6)
    {
      id result = swift_allocObject();
      *(void *)(result + 16) = v6;
      *(void *)(result + 24) = v7;
      long long v8 = sub_1000B8F60;
    }
    else
    {
      long long v8 = 0;
      id result = 0;
    }
    *a3 = Strong;
    a3[1] = (uint64_t)v8;
    a3[2] = result;
  }
  return result;
}

uint64_t sub_1000B87CC()
{
  swift_weakDestroy();
  sub_1000332CC(*(void *)(v0 + 24));
  swift_release();
  return v0;
}

uint64_t sub_1000B87FC()
{
  uint64_t v0 = sub_1000B87CC();

  return _swift_deallocClassInstance(v0, 48, 7);
}

uint64_t _s19ResponseFutureStoreCMa()
{
  return self;
}

uint64_t sub_1000B8850()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000B8888()
{
  uint64_t v1 = type metadata accessor for URL();
  sub_100020C48();
  uint64_t v3 = v2;
  uint64_t v4 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v5 = (v4 + 24) & ~v4;
  unint64_t v7 = (v5 + *(void *)(v6 + 64)) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = v7 + v0;
  unint64_t v9 = (v7 + 31) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0 + v5, v1);
  if (*(void *)(v8 + 8)) {
    swift_release();
  }
  if (*(void *)(v0 + v9)) {
    swift_release();
  }

  return _swift_deallocObject(v0, v9 + 16, v4 | 7);
}

void sub_1000B8964()
{
  uint64_t v1 = type metadata accessor for URL();
  sub_100024920(v1);
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  unint64_t v6 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v7 = v6 + *(void *)(v5 + 64);
  uint64_t v8 = (v7 & 0xFFFFFFFFFFFFFFF8) + v0;
  uint64_t v9 = *(void *)(v0 + 16);
  uint64_t v10 = v0 + v6;
  int v11 = *(unsigned __int8 *)(v0 + v7);
  unint64_t v12 = *(void (**)(unsigned char *))(v8 + 8);
  uint64_t v13 = *(void *)(v8 + 16);
  id v14 = (uint64_t *)(v0 + (((v7 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v15 = *v14;
  uint64_t v16 = v14[1];

  sub_1000B6650(v9, v10, v11, v12, v13, v15, v16);
}

void *sub_1000B89E4()
{
  swift_weakInit();
  v0[3] = 0;
  v0[4] = 0;
  sub_10002572C(&qword_10021D578);
  uint64_t v1 = swift_allocObject();
  *(_DWORD *)(v1 + 20) = 0;
  *(unsigned char *)(v1 + 16) = 0;
  v0[5] = v1;
  return v0;
}

void *sub_1000B8A30(uint64_t a1, void *(*a2)(uint64_t *__return_ptr))
{
  id result = a2(&v4);
  if (!v2) {
    return (void *)v4;
  }
  return result;
}

uint64_t sub_1000B8A68(uint64_t a1)
{
  uint64_t v2 = sub_10002572C(&qword_10021BB10);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000B8AC8()
{
  swift_release();
  swift_release();
  if (*(void *)(v0 + 32)) {
    swift_release();
  }

  return _swift_deallocObject(v0, 48, 7);
}

void sub_1000B8B18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1000B74AC(a1, a2, a3, a4, *(void *)(v4 + 16), *(void *)(v4 + 24), *(void (**)(void))(v4 + 32));
}

uint64_t sub_1000B8B24()
{
  return swift_unknownObjectWeakAssign();
}

uint64_t sub_1000B8B44()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1000B8B6C(void *a1)
{
  id v1 = [a1 sessionDescription];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_1000B8BD0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1000B5FF4();
  if (!v1) {
    *a1 = result;
  }
  return result;
}

uint64_t sub_1000B8BFC@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000B8BD0(a1);
}

void *sub_1000B8C18@<X0>(uint64_t a1@<X0>, void *(*a2)(uint64_t *__return_ptr)@<X1>, void *a3@<X8>)
{
  uint64_t result = sub_1000B8A30(a1, a2);
  if (!v3) {
    *a3 = result;
  }
  return result;
}

void *sub_1000B8C44@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_1000B8C18(a1, *(void *(**)(uint64_t *__return_ptr))(v2 + 16), a2);
}

uint64_t sub_1000B8C60()
{
  return swift_unknownObjectWeakAssign();
}

void sub_1000B8C80(uint64_t a1, unint64_t a2, void *a3, uint64_t a4)
{
}

uint64_t sub_1000B8C88()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

id sub_1000B8CC8@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000B81D8(*(void **)(v1 + 24), a1);
}

uint64_t sub_1000B8CD0()
{
  uint64_t v1 = type metadata accessor for URLRequest();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_1000B8D74@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = type metadata accessor for URLRequest();
  sub_100024920(v5);
  uint64_t v8 = *(void **)(v2
                + ((*(void *)(v7 + 64)
                  + ((*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
                  + 7) & 0xFFFFFFFFFFFFFFF8));

  return sub_1000B83B0(a1, v8, a2);
}

uint64_t sub_1000B8DFC(uint64_t a1, uint64_t a2)
{
  return sub_1000B8270(a1, a2);
}

unsigned char *sub_1000B8E04(unsigned char *result)
{
  if ((*result & 1) == 0) {
    return (unsigned char *)swift_weakAssign();
  }
  return result;
}

uint64_t sub_1000B8E2C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000B8E64()
{
  sub_10002A510();
  return v0();
}

unsigned char *sub_1000B8E94(unsigned char *a1)
{
  return sub_1000B86A8(a1, v1[2], v1[3], v1[4]);
}

unint64_t sub_1000B8EB4()
{
  unint64_t result = qword_10021D570;
  if (!qword_10021D570)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10021D570);
  }
  return result;
}

uint64_t sub_1000B8F00(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_100027BCC(a1, a2);
  }
  return a1;
}

uint64_t sub_1000B8F14@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1000B86F0(a1, v2, a2);
}

uint64_t sub_1000B8F30()
{
  sub_10002A510();
  return v0();
}

uint64_t sub_1000B8F60(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void, void))(v1 + 16))(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(unsigned __int8 *)(a1 + 24));
}

id sub_1000B8F9C(void *a1, uint64_t a2, char a3)
{
  if (a3) {
    return a1;
  }
  else {
    return (id)swift_bridgeObjectRetain();
  }
}

void _s13ResponseErrorOwxx(uint64_t a1)
{
}

void sub_1000B8FBC(void *a1, uint64_t a2, char a3)
{
  if (a3) {

  }
  else {
    swift_bridgeObjectRelease();
  }
}

uint64_t _s13ResponseErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_1000B8F9C(*(void **)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t _s13ResponseErrorOwca(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_1000B8F9C(*(void **)a2, v4, v5);
  uint64_t v6 = *(void **)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  char v8 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  sub_1000B8FBC(v6, v7, v8);
  return a1;
}

uint64_t _s13ResponseErrorOwta(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  char v6 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v3;
  sub_1000B8FBC(v4, v5, v6);
  return a1;
}

uint64_t _s13ResponseErrorOwet(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFF && *(unsigned char *)(a1 + 17))
    {
      int v2 = *(_DWORD *)a1 + 254;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
      if (v3 <= 1) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t _s13ResponseErrorOwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)unint64_t result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1000B913C(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = a2 & 1;
  return result;
}

ValueMetadata *_s13ResponseErrorOMa()
{
  return &_s13ResponseErrorON;
}

uint64_t sub_1000B9164()
{
  return sub_1000B8B44();
}

uint64_t *sub_1000B9180(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for Logger();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = *(void **)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + v8) = (uint64_t)v9;
    id v10 = v9;
  }
  return a1;
}

uint64_t sub_1000B9250(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(void **)(a2 + v7);
  *(void *)(a1 + v7) = v8;
  id v9 = v8;
  return a1;
}

uint64_t sub_1000B92D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(void **)(a1 + v7);
  id v9 = *(void **)(a2 + v7);
  *(void *)(a1 + v7) = v9;
  id v10 = v9;

  return a1;
}

uint64_t sub_1000B9358(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1000B93D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(void **)(a1 + v7);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);

  return a1;
}

uint64_t sub_1000B9458(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000B946C);
}

uint64_t sub_1000B946C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for Logger();
  sub_1000248F0();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    return sub_100027BA4(a1, a2, v6);
  }
  else
  {
    unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v9 >= 0xFFFFFFFF) {
      LODWORD(v9) = -1;
    }
    int v10 = v9 - 1;
    if (v10 < 0) {
      int v10 = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_1000B9504(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000B9518);
}

void sub_1000B9518(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for Logger();
  sub_1000248F0();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    sub_10002538C(a1, a2, a2, v8);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = a2;
  }
}

uint64_t sub_1000B95A0()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

BOOL sub_1000B9634(int a1, int a2)
{
  return a1 == a2;
}

uint64_t sub_1000B9644()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v2 = v1;
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = sub_10002DEC4();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_1000B96C0(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x64757469676E6F6CLL;
  }
  else {
    uint64_t v3 = 0x656475746974616CLL;
  }
  if (v2) {
    unint64_t v4 = 0xE800000000000000;
  }
  else {
    unint64_t v4 = 0xE900000000000065;
  }
  if (a2) {
    uint64_t v5 = 0x64757469676E6F6CLL;
  }
  else {
    uint64_t v5 = 0x656475746974616CLL;
  }
  if (a2) {
    unint64_t v6 = 0xE900000000000065;
  }
  else {
    unint64_t v6 = 0xE800000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = sub_10002DEC4();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

BOOL sub_1000B975C(char a1, char a2)
{
  return qword_1001A7248[a1] == qword_1001A7248[a2];
}

BOOL sub_1000B9780(char a1, char a2)
{
  return qword_1001A73B0[a1] == qword_1001A73B0[a2];
}

uint64_t sub_1000B97A8(char a1, char a2)
{
  if (qword_1001A7720[a1] == qword_1001A7720[a2]) {
    char v2 = 1;
  }
  else {
    char v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease_n();
  return v2 & 1;
}

uint64_t sub_1000B9810(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 1852141679;
  unint64_t v3 = 0xE400000000000000;
  uint64_t v4 = a1;
  uint64_t v5 = 1852141679;
  switch(v4)
  {
    case 1:
      unint64_t v3 = 0xE600000000000000;
      uint64_t v5 = 0x6465736F6C63;
      break;
    case 2:
      uint64_t v5 = 0x69737365636F7270;
      unint64_t v3 = 0xEA0000000000676ELL;
      break;
    case 3:
      unint64_t v3 = 0xE800000000000000;
      uint64_t v5 = 0x646564616F6C7075;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE400000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xE600000000000000;
      uint64_t v2 = 0x6465736F6C63;
      break;
    case 2:
      uint64_t v2 = 0x69737365636F7270;
      unint64_t v6 = 0xEA0000000000676ELL;
      break;
    case 3:
      unint64_t v6 = 0xE800000000000000;
      uint64_t v2 = 0x646564616F6C7075;
      break;
    default:
      break;
  }
  if (v5 == v2 && v3 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = sub_10002DEC4();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

void *sub_1000B9970(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    id v32 = _swiftEmptyArrayStorage;
    sub_1000EE484();
    uint64_t v2 = _swiftEmptyArrayStorage;
    uint64_t v4 = (uint64_t *)(a1 + 64);
    do
    {
      uint64_t v25 = v1;
      uint64_t v5 = *(v4 - 4);
      uint64_t v6 = *(v4 - 3);
      uint64_t v7 = *(v4 - 2);
      uint64_t v8 = *(v4 - 1);
      uint64_t v9 = *v4;
      unint64_t v30 = &type metadata for AppDistEntry;
      uint64_t v31 = &off_1001FB7E0;
      int v10 = (void *)swift_allocObject();
      v29[0] = v10;
      v10[2] = v5;
      v10[3] = v6;
      v10[4] = v7;
      v10[5] = v8;
      v10[6] = v9;
      id v32 = v2;
      unint64_t v12 = v2[2];
      unint64_t v11 = v2[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v13 = &type metadata for AppDistEntry;
      if (v12 >= v11 >> 1)
      {
        sub_1000EE484();
        uint64_t v13 = v30;
        uint64_t v2 = v32;
      }
      v4 += 5;
      uint64_t v14 = sub_10002E598((uint64_t)v29, (uint64_t)v13);
      __chkstk_darwin(v14);
      uint64_t v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v17 + 16))(v16);
      long long v18 = *(_OWORD *)v16;
      long long v23 = *((_OWORD *)v16 + 1);
      long long v24 = v18;
      uint64_t v19 = *((void *)v16 + 4);
      uint64_t v27 = &type metadata for AppDistEntry;
      uint64_t v28 = &off_1001FB7E0;
      uint64_t v20 = swift_allocObject();
      *(void *)&long long v26 = v20;
      long long v21 = v23;
      *(_OWORD *)(v20 + 16) = v24;
      *(_OWORD *)(v20 + 32) = v21;
      *(void *)(v20 + 48) = v19;
      v2[2] = v12 + 1;
      sub_10001C1AC(&v26, (uint64_t)&v2[5 * v12 + 4]);
      sub_10001CA50((uint64_t)v29);
      uint64_t v1 = v25 - 1;
    }
    while (v25 != 1);
  }
  return v2;
}

void sub_1000B9B8C(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if ((unint64_t)*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v4 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (__OFADD__(v4, v3))
  {
    __break(1u);
    goto LABEL_22;
  }
  unint64_t v5 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  uint64_t *v1 = v5;
  if (isUniquelyReferenced_nonNull_bridgeObject)
  {
    if ((v5 & 0x8000000000000000) == 0 && (v5 & 0x4000000000000000) == 0)
    {
      uint64_t v7 = v5 & 0xFFFFFFFFFFFFFF8;
      if (v4 + v3 <= *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        goto LABEL_12;
      }
    }
  }
  if (v5 >> 62) {
    goto LABEL_23;
  }
  while (1)
  {
    swift_bridgeObjectRetain();
    sub_100025024();
    uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    swift_bridgeObjectRelease();
    uint64_t *v1 = v8;
    uint64_t v7 = v8 & 0xFFFFFFFFFFFFFF8;
LABEL_12:
    uint64_t v9 = sub_10002ADB4(v7);
    sub_1000BB3D4(v9, v10, a1, (void (*)(uint64_t, void, uint64_t))sub_100119744, &qword_10021D620, &qword_1002199A0, (uint64_t (*)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))sub_1000A2C30);
    if (v11 >= v3) {
      break;
    }
LABEL_22:
    __break(1u);
LABEL_23:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v11 >= 1)
  {
    sub_1000254A8();
    if (v14)
    {
      __break(1u);
      return;
    }
    *(void *)(v12 + 16) = v13;
  }
  swift_bridgeObjectRelease();

  specialized Array._endMutation()();
}

void sub_1000B9D6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void sub_1000B9DA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_1000213D8();
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  unint64_t v20 = v11;
  if (v11 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v21 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if ((unint64_t)*v10 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v22 = *(void *)((*v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (__OFADD__(v22, v21))
  {
    __break(1u);
    goto LABEL_22;
  }
  unint64_t v23 = *v10;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  uint64_t *v10 = v23;
  if (isUniquelyReferenced_nonNull_bridgeObject)
  {
    if ((v23 & 0x8000000000000000) == 0 && (v23 & 0x4000000000000000) == 0)
    {
      uint64_t v25 = v23 & 0xFFFFFFFFFFFFFF8;
      if (v22 + v21 <= *(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        goto LABEL_12;
      }
    }
  }
  a10 = v21;
  uint64_t v21 = (uint64_t)v19;
  uint64_t v19 = v17;
  uint64_t v17 = (unint64_t *)v15;
  uint64_t v15 = v13;
  if (v23 >> 62) {
    goto LABEL_23;
  }
  while (1)
  {
    swift_bridgeObjectRetain();
    uint64_t v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    swift_bridgeObjectRelease();
    uint64_t *v10 = v26;
    uint64_t v25 = v26 & 0xFFFFFFFFFFFFFF8;
    uint64_t v13 = v15;
    uint64_t v15 = (uint64_t *)v17;
    uint64_t v17 = v19;
    uint64_t v19 = (unint64_t *)v21;
    uint64_t v21 = a10;
LABEL_12:
    uint64_t v27 = sub_10002ADB4(v25);
    sub_1000BB3D4(v27, v28, v20, (void (*)(uint64_t, void, uint64_t))v19, v17, v15, (uint64_t (*)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))v13);
    if (v29 >= v21) {
      break;
    }
LABEL_22:
    __break(1u);
LABEL_23:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v29 >= 1)
  {
    sub_1000254A8();
    if (v32)
    {
      __break(1u);
      return;
    }
    *(void *)(v30 + 16) = v31;
  }
  swift_bridgeObjectRelease();
  sub_10000E178();
  specialized Array._endMutation()();
}

uint64_t sub_1000B9F94(uint64_t result)
{
  uint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 16);
  uint64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = result;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (!result || v5 > *(void *)(v3 + 24) >> 1)
  {
    if (v4 <= v5) {
      uint64_t v7 = v4 + v2;
    }
    else {
      uint64_t v7 = v4;
    }
    uint64_t result = sub_100065AA4(result, v7, 1, v3);
    uint64_t v3 = result;
  }
  if (!*(void *)(v6 + 16))
  {
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
  uint64_t v8 = *(void *)(v3 + 16);
  uint64_t v9 = (*(void *)(v3 + 24) >> 1) - v8;
  uint64_t v10 = type metadata accessor for Apple_Parsec_Spotlight_V1alpha_Result();
  uint64_t v12 = *(void *)(v10 - 8);
  uint64_t result = v10 - 8;
  uint64_t v11 = v12;
  if (v9 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v13 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t result = sub_100119BDC(v6 + v13, v2, v3 + v13 + *(void *)(v11 + 72) * v8);
  if (!v2)
  {
LABEL_14:
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t *v1 = v3;
    return result;
  }
  uint64_t v14 = *(void *)(v3 + 16);
  BOOL v15 = __OFADD__(v14, v2);
  uint64_t v16 = v14 + v2;
  if (!v15)
  {
    *(void *)(v3 + 16) = v16;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

Swift::Void __swiftcall _CPSearchResultForFeedback.redactSensitive()()
{
  id v1 = [v0 type];
  if (v1 != 1)
  {
    id v2 = sub_10000E194((uint64_t)v1, "setUserInput:");
    id v3 = sub_10000E194((uint64_t)v2, "setCompletedQuery:");
    id v4 = sub_10000E194((uint64_t)v3, "setIntendedQuery:");
    sub_10000E194((uint64_t)v4, "setPunchout:");
    sub_1000BA164(_CPCardSectionForFeedback.redactSensitive());
  }
}

Swift::Void __swiftcall _CPSearchResultForFeedback.redactUnused()()
{
  if ([v0 type] != 1) {
    sub_1000BA164(_CPCardSectionForFeedback.redactUnused());
  }
}

id sub_1000BA164(void (*a1)(void))
{
  id v3 = v1;
  id v4 = [v1 card];
  if (v4)
  {
    uint64_t v5 = sub_1000BB1A4(v4, (SEL *)&selRef_cardSections, &qword_10021D650);
    if (v5)
    {
      uint64_t v6 = v5;
      sub_100027EB4();
      if (v8)
      {
        swift_bridgeObjectRetain();
        id result = (id)_CocoaArrayWrapper.endIndex.getter();
        uint64_t v9 = (uint64_t)result;
        if (result) {
          goto LABEL_5;
        }
      }
      else
      {
        uint64_t v9 = *(void *)(v7 + 16);
        id result = (id)swift_bridgeObjectRetain();
        if (v9)
        {
LABEL_5:
          if (v9 < 1)
          {
            __break(1u);
            goto LABEL_42;
          }
          for (uint64_t i = 0; i != v9; ++i)
          {
            if ((v6 & 0xC000000000000001) != 0) {
              id v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else {
              id v12 = *(id *)(v6 + 8 * i + 32);
            }
            unint64_t v13 = v12;
            a1();
          }
        }
      }
      swift_bridgeObjectRelease_n();
    }
  }
  id v14 = [v3 inlineCard];
  if (v14)
  {
    uint64_t v15 = sub_1000BB1A4(v14, (SEL *)&selRef_cardSections, &qword_10021D650);
    if (v15)
    {
      uint64_t v16 = v15;
      sub_100027EB4();
      if (v18)
      {
        swift_bridgeObjectRetain();
        id result = (id)_CocoaArrayWrapper.endIndex.getter();
        uint64_t v19 = (uint64_t)result;
        if (result)
        {
LABEL_16:
          if (v19 >= 1)
          {
            for (uint64_t j = 0; j != v19; ++j)
            {
              if ((v16 & 0xC000000000000001) != 0) {
                id v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
              }
              else {
                id v21 = *(id *)(v16 + 8 * j + 32);
              }
              uint64_t v22 = v21;
              a1();
            }
            goto LABEL_22;
          }
LABEL_42:
          __break(1u);
          goto LABEL_43;
        }
      }
      else
      {
        uint64_t v19 = *(void *)(v17 + 16);
        id result = (id)swift_bridgeObjectRetain();
        if (v19) {
          goto LABEL_16;
        }
      }
LABEL_22:
      swift_bridgeObjectRelease_n();
    }
  }
  id result = [v3 compactCard];
  if (result)
  {
    id result = (id)sub_1000BB1A4(result, (SEL *)&selRef_cardSections, &qword_10021D650);
    if (result)
    {
      unint64_t v23 = (unint64_t)result;
      sub_100027EB4();
      if (v25)
      {
        swift_bridgeObjectRetain();
        id result = (id)_CocoaArrayWrapper.endIndex.getter();
        uint64_t v26 = (uint64_t)result;
        if (result)
        {
LABEL_27:
          if (v26 >= 1)
          {
            for (uint64_t k = 0; k != v26; ++k)
            {
              if ((v23 & 0xC000000000000001) != 0) {
                uint64_t v28 = sub_10002CDBC();
              }
              else {
                uint64_t v28 = (uint64_t)sub_1000243D4();
              }
              uint64_t v29 = (void *)v28;
              a1();
            }
            return (id)swift_bridgeObjectRelease_n();
          }
LABEL_43:
          __break(1u);
          return result;
        }
      }
      else
      {
        uint64_t v26 = *(void *)(v24 + 16);
        id result = (id)swift_bridgeObjectRetain();
        if (v26) {
          goto LABEL_27;
        }
      }
      return (id)swift_bridgeObjectRelease_n();
    }
  }
  return result;
}

Swift::Void __swiftcall _CPCardSectionForFeedback.redactSensitive()()
{
  sub_10000E194(v0, "setActionDestination:");
  uint64_t v2 = sub_1000BB0F8(v1, (SEL *)&selRef_cardSections, &qword_10021D650);
  if (v2)
  {
    uint64_t v3 = v2;
    sub_100027EB4();
    if (v5)
    {
      swift_bridgeObjectRetain();
      uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
      if (v6) {
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t v6 = *(void *)(v4 + 16);
      swift_bridgeObjectRetain();
      if (v6)
      {
LABEL_4:
        if (v6 < 1)
        {
          __break(1u);
          return;
        }
        for (uint64_t i = 0; i != v6; ++i)
        {
          if ((v3 & 0xC000000000000001) != 0) {
            id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v8 = *(id *)(v3 + 8 * i + 32);
          }
          uint64_t v9 = v8;
          _CPCardSectionForFeedback.redactSensitive()();
        }
      }
    }
    swift_bridgeObjectRelease_n();
  }
}

Swift::Void __swiftcall _CPCardSectionForFeedback.redactUnused()()
{
  uint64_t v1 = sub_1000BB0F8(v0, (SEL *)&selRef_cardSections, &qword_10021D650);
  if (v1)
  {
    uint64_t v2 = v1;
    sub_100027EB4();
    if (v4)
    {
      swift_bridgeObjectRetain();
      uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
      if (v5) {
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t v5 = *(void *)(v3 + 16);
      swift_bridgeObjectRetain();
      if (v5)
      {
LABEL_4:
        if (v5 < 1)
        {
          __break(1u);
          return;
        }
        for (uint64_t i = 0; i != v5; ++i)
        {
          if ((v2 & 0xC000000000000001) != 0) {
            id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v7 = *(id *)(v2 + 8 * i + 32);
          }
          id v8 = v7;
          _CPCardSectionForFeedback.redactUnused()();
        }
      }
    }
    swift_bridgeObjectRelease_n();
  }
}

Swift::Void __swiftcall _CPCardSectionEngagementFeedback.redactSensitive()()
{
  id v1 = [v0 destination];
  if (v1)
  {
    id v2 = v1;
    sub_1000BB220((uint64_t)_swiftEmptyArrayStorage, v1);
  }
}

Swift::Void __swiftcall _CPPunchoutForFeedback.redactSensitive()()
{
  sub_1000BB220((uint64_t)_swiftEmptyArrayStorage, v0);
}

Swift::Void __swiftcall _CPCardSectionEngagementFeedback.redactUnused()()
{
  id v1 = [v0 destination];
}

Swift::Void __swiftcall _CPSectionRankingFeedback.redactSensitive()()
{
}

Swift::Void __swiftcall _CPStartLocalSearchFeedback.redactSensitive()()
{
}

void sub_1000BA6F4(SEL *a1, SEL *a2)
{
  id v4 = [v2 *a1];
  if (v4)
  {
    id v5 = v4;
    objc_msgSend(v4, *a2, 0);
  }
}

Swift::Void __swiftcall _CPStartNetworkSearchFeedback.redactSensitive()()
{
  sub_100025170();
  if (sub_1000BB28C(v0))
  {
    uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_1000BAA1C(v1, v2);
    swift_bridgeObjectRelease();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v0 setHeaders:isa];

    swift_bridgeObjectRelease();
  }
  else
  {
    [v0 setHeaders:0];
  }
  if (sub_1000BB28C(v0))
  {
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_1000BAA1C(v4, v5);
    swift_bridgeObjectRelease();
    v6.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v0 setHeaders:v6.super.isa];

    sub_100026FB4();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_100026FB4();
    [v7 v8];
  }
}

#error "1000BA988: call analysis failed (funcsize=65)"

uint64_t sub_1000BAA1C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_1000287F0(a1, a2);
  LOBYTE(a2) = v7;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0) {
    return 0;
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v13 = *v3;
  uint64_t v9 = *v3;
  uint64_t *v3 = 0x8000000000000000;
  Swift::Int v10 = *(void *)(v9 + 24);
  sub_10002572C(&qword_100219750);
  _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v10);
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(*(void *)(v13 + 56) + 16 * v6);
  _NativeDictionary._delete(at:)();
  uint64_t *v3 = v13;
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t sub_1000BAB2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1000BAE4C(a1, a2, &qword_100219758, (uint64_t (*)(void))&type metadata accessor for URLQueryItem, a3);
}

#error "1000BABA0: call analysis failed (funcsize=56)"

#error "1000BACAC: call analysis failed (funcsize=73)"

uint64_t sub_1000BAD6C(uint64_t a1, uint64_t a2)
{
  return sub_1000163F4(a1, a2, &qword_100219780, (void (*)(void))type metadata accessor for DownloadResource);
}

#error "1000BADD0: call analysis failed (funcsize=39)"

uint64_t sub_1000BAE2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1000BAE4C(a1, a2, &qword_1002197B8, (uint64_t (*)(void))&type metadata accessor for Date, a3);
}

uint64_t sub_1000BAE4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t (*a4)(void)@<X3>, uint64_t a5@<X8>)
{
  id v8 = v5;
  swift_bridgeObjectRetain();
  unint64_t v12 = sub_1000287F0(a1, a2);
  LOBYTE(a2) = v13;
  swift_bridgeObjectRelease();
  if (a2)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_10002B2CC();
    Swift::Int v16 = *(void *)(v15 + 24);
    sub_10002572C(a3);
    _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v16);
    swift_bridgeObjectRelease();
    uint64_t v17 = *(void *)(v24 + 56);
    uint64_t v18 = a4(0);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(*(void *)(v18 - 8) + 32))(a5, v17 + *(void *)(*(void *)(v18 - 8) + 72) * v12, v18);
    _NativeDictionary._delete(at:)();
    *id v8 = v24;
    swift_bridgeObjectRelease();
    sub_100025024();
  }
  else
  {
    a4(0);
    uint64_t v19 = sub_100025A38();
  }

  return sub_10002538C(v19, v20, v21, v22);
}

#error "1000BB010: call analysis failed (funcsize=63)"

uint64_t sub_1000BB0C0(void *a1)
{
  return sub_1000BB1A4(a1, (SEL *)&selRef_results, &qword_10021D628);
}

uint64_t sub_1000BB0DC(void *a1)
{
  return sub_1000BB0F8(a1, (SEL *)&selRef_sections, &qword_10021D638);
}

uint64_t sub_1000BB0F8(void *a1, SEL *a2, unint64_t *a3)
{
  id v4 = [a1 *a2];
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v4;
  sub_100023FA0(0, a3);
  uint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v6;
}

uint64_t sub_1000BB16C(void *a1)
{
  return sub_1000BB0F8(a1, (SEL *)&selRef_sections, &qword_10021D630);
}

uint64_t sub_1000BB188(void *a1)
{
  return sub_1000BB0F8(a1, (SEL *)&selRef_results, &qword_10021D628);
}

uint64_t sub_1000BB1A4(void *a1, SEL *a2, unint64_t *a3)
{
  id v5 = [a1 *a2];

  if (!v5) {
    return 0;
  }
  sub_100023FA0(0, a3);
  uint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v6;
}

void sub_1000BB220(uint64_t a1, void *a2)
{
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [a2 setUrls:isa];
}

uint64_t sub_1000BB28C(void *a1)
{
  id v1 = [a1 headers];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_1000BB2F0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000BB330(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CancellableStoreKey();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000BB38C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000BB3D4(uint64_t result, uint64_t a2, unint64_t a3, void (*a4)(uint64_t, void, uint64_t), unint64_t *a5, uint64_t *a6, uint64_t (*a7)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))
{
  uint64_t v13 = result;
  unint64_t v14 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v15) {
      return a3;
    }
  }
  else
  {
    uint64_t v15 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v15) {
      return a3;
    }
  }
  if (v13)
  {
    if (v14)
    {
      swift_bridgeObjectRetain();
      uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (v16 <= a2)
      {
        if (v15 >= 1)
        {
          uint64_t v17 = sub_1000BB584(a5, a6);
          swift_bridgeObjectRetain();
          for (uint64_t i = 0; i != v15; ++i)
          {
            uint64_t v19 = sub_10002572C(a6);
            uint64_t v20 = (void (*)(unsigned char *, void))a7(v23, i, a3, v19, v17);
            id v22 = *v21;
            v20(v23, 0);
            *(void *)(v13 + 8 * i) = v22;
          }
          swift_bridgeObjectRelease();
          return a3;
        }
        goto LABEL_16;
      }
    }
    else
    {
      if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a2)
      {
        a4((a3 & 0xFFFFFFFFFFFFFF8) + 32, *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10), v13);
        return a3;
      }
      __break(1u);
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1000BB584(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1000371D4(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for BiomeStreamsLedger()
{
  return self;
}

void *sub_1000BB5F8(uint64_t a1, uint64_t a2)
{
  v2[3] = 0;
  swift_unknownObjectWeakInit();
  type metadata accessor for Locker();
  uint64_t v4 = swift_allocObject();
  id v5 = (_DWORD *)swift_slowAlloc();
  *(void *)(v4 + 16) = v5;
  *id v5 = 0;
  v2[4] = v4;
  v2[5] = _swiftEmptyDictionarySingleton;
  v2[3] = a2;
  swift_unknownObjectWeakAssign();
  swift_unknownObjectRelease();
  return v2;
}

uint64_t sub_1000BB694()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(os_unfair_lock_s **)(*(void *)(v0 + 32) + 16);
  os_unfair_lock_lock(v2);
  swift_beginAccess();
  uint64_t v3 = swift_bridgeObjectRetain();
  sub_1000A5B84(v3, (void (*)(uint64_t, uint64_t, uint64_t))sub_1000BB9F8);
  swift_bridgeObjectRelease();
  os_unfair_lock_unlock(v2);
  if (swift_unknownObjectWeakLoadStrong())
  {
    uint64_t v4 = *(void *)(v1 + 24);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 24);
    uint64_t v7 = swift_bridgeObjectRetain();
    v6(v7, ObjectType, v4);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
  }
  uint64_t v8 = _swiftEmptyArrayStorage[2];
  if (v8)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = &_swiftEmptyArrayStorage[5];
    do
    {
      uint64_t v10 = *v9;
      uint64_t v11 = swift_getObjectType();
      unint64_t v12 = *(void (**)(uint64_t, uint64_t))(v10 + 72);
      swift_unknownObjectRetain();
      v12(v11, v10);
      swift_unknownObjectRelease();
      v9 += 2;
      --v8;
    }
    while (v8);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  sub_10001CDE0(v1 + 16);
  swift_release();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_1000BB834(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v9 = Strong;
    uint64_t v10 = *(void *)(a3 + 24);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v10 + 64))(ObjectType, v10);
    swift_unknownObjectRetain();
    sub_100067D78();
    uint64_t v12 = *(void *)(*a4 + 16);
    sub_100067E1C(v12);
    uint64_t v13 = *a4;
    *(void *)(v13 + 16) = v12 + 1;
    uint64_t v14 = v13 + 16 * v12;
    *(void *)(v14 + 32) = v9;
    *(void *)(v14 + 40) = v10;
    return swift_unknownObjectRelease();
  }
  else
  {
    sub_10006844C();
    uint64_t v16 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.error.getter();
    sub_10002572C((uint64_t *)&unk_10021BB00);
    uint64_t v17 = swift_allocObject();
    *(_OWORD *)(v17 + 16) = xmmword_1001A2A20;
    *(void *)(v17 + 56) = &type metadata for String;
    *(void *)(v17 + 64) = sub_1000303C8();
    *(void *)(v17 + 32) = a1;
    *(void *)(v17 + 40) = a2;
    swift_bridgeObjectRetain();
    os_log(_:dso:log:type:_:)();

    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_1000BB9A0()
{
  sub_1000BB694();

  return _swift_deallocClassInstance(v0, 48, 7);
}

uint64_t type metadata accessor for ActivityMonitor()
{
  return self;
}

uint64_t sub_1000BB9F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000BB834(a1, a2, a3, *(uint64_t **)(v3 + 16));
}

uint64_t sub_1000BBA00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 56))(a3, a4);
  uint64_t v10 = v9;
  uint64_t v11 = *(os_unfair_lock_s **)(*(void *)(a2 + 32) + 16);
  os_unfair_lock_lock(v11);
  sub_10001621C(a2, v8, v10, a1, a4);
  os_unfair_lock_unlock(v11);
  swift_bridgeObjectRelease();
  swift_unknownObjectRetain();
  sub_1000BBAD0(a2, a1, a3, a4);

  return swift_unknownObjectRelease();
}

uint64_t sub_1000BBAD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v8 = *(void *)(a1 + 24);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 16))(a2, a4, ObjectType, v8);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ResourceAccessOutcome(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0x93)
  {
    if (a2 + 109 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 109) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 110;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x6E;
  int v5 = v6 - 110;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for ResourceAccessOutcome(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 109 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 109) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0x93) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0x92)
  {
    unsigned int v6 = ((a2 - 147) >> 8) + 1;
    *uint64_t result = a2 + 109;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000BBCB4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 109;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ResourceAccessOutcome()
{
  return &type metadata for ResourceAccessOutcome;
}

uint64_t getEnumTagSinglePayload for ResourceAccessActivity(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xD4)
  {
    if (a2 + 44 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 44) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 45;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x2D;
  int v5 = v6 - 45;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for ResourceAccessActivity(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 44 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 44) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xD4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xD3)
  {
    unsigned int v6 = ((a2 - 212) >> 8) + 1;
    *uint64_t result = a2 + 44;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000BBE40);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 44;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ResourceAccessActivity()
{
  return &type metadata for ResourceAccessActivity;
}

uint64_t sub_1000BBE78(char a1)
{
  return qword_1001A79B0[a1];
}

uint64_t sub_1000BBE8C(char a1)
{
  return qword_1001A7B18[a1];
}

uint64_t sub_1000BBEA0(uint64_t a1)
{
  uint64_t v3 = a1 - 496;
  if (!(!v2 & v1))
  {
    uint64_t result = 29;
    switch(v3)
    {
      case 0:
        return 15;
      case 1:
        return 16;
      case 2:
        return 17;
      case 3:
        return 18;
      case 4:
        return 19;
      case 5:
        return 20;
      case 6:
        return 21;
      case 7:
        return 22;
      case 8:
        return 23;
      case 9:
        return 24;
      case 10:
        return 25;
      case 11:
        return 26;
      case 12:
        return 27;
      case 13:
        return 28;
      case 14:
        return result;
      case 15:
        return 30;
      case 16:
        return 31;
      case 17:
        return 32;
      case 18:
        return 33;
      case 19:
        return 34;
      case 20:
        return 35;
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 63:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
      case 69:
      case 70:
      case 71:
      case 72:
      case 73:
      case 74:
      case 75:
      case 76:
      case 77:
      case 78:
      case 82:
      case 83:
        return 110;
      case 54:
        return 36;
      case 55:
        return 37;
      case 56:
        return 38;
      case 57:
        return 39;
      case 58:
        return 40;
      case 59:
        return 41;
      case 60:
        return 42;
      case 61:
        return 43;
      case 62:
        return 44;
      case 79:
        return 45;
      case 80:
        return 46;
      case 81:
        return 47;
      case 84:
        return 48;
      case 85:
        return 49;
      case 86:
        return 50;
      case 87:
        return 51;
      default:
        JUMPOUT(0);
    }
  }
  switch(a1)
  {
    case 700:
      return 56;
    case 701:
      return 57;
    case 702:
      return 58;
    case 1101:
      return 75;
    case 1102:
      return 76;
    case 1200:
      return 77;
    case 1420:
      return 102;
  }
  return 110;
}

uint64_t sub_1000BC64C(uint64_t a1)
{
  uint64_t result = 1;
  switch(a1)
  {
    case 0:
      uint64_t result = 0;
      break;
    case 1:
      return result;
    case 2:
      uint64_t result = 2;
      break;
    case 3:
      uint64_t result = 3;
      break;
    case 4:
      uint64_t result = 4;
      break;
    case 5:
      uint64_t result = 5;
      break;
    case 6:
      uint64_t result = 6;
      break;
    case 7:
      uint64_t result = 7;
      break;
    case 8:
      uint64_t result = 8;
      break;
    case 9:
      uint64_t result = 9;
      break;
    case 10:
      uint64_t result = 10;
      break;
    case 11:
      uint64_t result = 11;
      break;
    case 12:
      uint64_t result = 12;
      break;
    case 13:
      uint64_t result = 13;
      break;
    case 14:
      uint64_t result = 14;
      break;
    case 15:
      uint64_t result = 15;
      break;
    case 16:
      uint64_t result = 16;
      break;
    case 17:
      uint64_t result = 17;
      break;
    case 18:
      uint64_t result = 18;
      break;
    case 19:
      uint64_t result = 19;
      break;
    case 20:
      uint64_t result = 20;
      break;
    case 21:
      uint64_t result = 21;
      break;
    case 22:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 64:
      goto LABEL_10;
    case 23:
      uint64_t result = 22;
      break;
    case 24:
      uint64_t result = 23;
      break;
    case 25:
      uint64_t result = 24;
      break;
    case 26:
      uint64_t result = 25;
      break;
    case 27:
      uint64_t result = 26;
      break;
    case 28:
      uint64_t result = 27;
      break;
    case 29:
      uint64_t result = 28;
      break;
    case 30:
      uint64_t result = 29;
      break;
    case 31:
      uint64_t result = 30;
      break;
    case 50:
      uint64_t result = 31;
      break;
    case 60:
      uint64_t result = 32;
      break;
    case 61:
      uint64_t result = 33;
      break;
    case 62:
      uint64_t result = 34;
      break;
    case 63:
      uint64_t result = 35;
      break;
    case 65:
      uint64_t result = 36;
      break;
    case 66:
      uint64_t result = 37;
      break;
    case 67:
      uint64_t result = 38;
      break;
    default:
      switch(a1)
      {
        case 100:
          uint64_t result = 39;
          break;
        case 200:
          uint64_t result = 40;
          break;
        case 300:
          uint64_t result = 41;
          break;
        case 301:
          uint64_t result = 42;
          break;
        case 400:
          uint64_t result = 43;
          break;
        case 500:
          uint64_t result = 44;
          break;
        default:
LABEL_10:
          uint64_t result = 45;
          break;
      }
      break;
  }
  return result;
}

BOOL sub_1000BC924(char *a1, char *a2)
{
  return sub_1000B9780(*a1, *a2);
}

Swift::Int sub_1000BC930()
{
  return sub_1000B3B64(*v0);
}

void sub_1000BC938(uint64_t a1)
{
  sub_1000B3D78(a1, *v1);
}

Swift::Int sub_1000BC940()
{
  return sub_1000B4064();
}

uint64_t sub_1000BC948@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1000BBEA0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000BC974@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1000BBE8C(*v1);
  *a1 = result;
  return result;
}

BOOL sub_1000BC9A0(char *a1, char *a2)
{
  return sub_1000B975C(*a1, *a2);
}

Swift::Int sub_1000BC9AC()
{
  return sub_1000B3BA8(*v0);
}

void sub_1000BC9B4(uint64_t a1)
{
  sub_1000B3D1C(a1, *v1);
}

Swift::Int sub_1000BC9BC()
{
  return sub_1000B40A4();
}

uint64_t sub_1000BC9C4@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1000BC64C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000BC9F0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1000BBE78(*v1);
  *a1 = result;
  return result;
}

unint64_t sub_1000BCA20()
{
  unint64_t result = qword_10021D8E8;
  if (!qword_10021D8E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10021D8E8);
  }
  return result;
}

unint64_t sub_1000BCA70()
{
  unint64_t result = qword_10021D8F0;
  if (!qword_10021D8F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10021D8F0);
  }
  return result;
}

uint64_t sub_1000BCABC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = [self defaultProvider];
  BOOL v7 = (void *)swift_allocObject();
  v7[2] = a2;
  void v7[3] = a3;
  aBlock[4] = sub_1000BCE7C;
  aBlock[5] = v7;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_1000BCC78;
  aBlock[3] = &unk_1001FEC28;
  uint64_t v8 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  unsigned int v9 = [v6 enumerateActiveExperimentsForEnvironment:a1 error:aBlock block:v8];
  _Block_release(v8);
  swift_unknownObjectRelease();
  id v10 = aBlock[0];
  LOBYTE(a2) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (a2) {
    __break(1u);
  }
  if (!v9)
  {
    _convertNSErrorToError(_:)();

    return swift_willThrow();
  }
  return result;
}

void sub_1000BCC78(uint64_t a1, void *a2)
{
  char v2 = *(void (**)(void))(a1 + 32);
  id v3 = a2;
  v2();
}

id sub_1000BCCD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v8 = [self defaultProvider];
  v12[4] = a3;
  v12[5] = a4;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 1107296256;
  v12[2] = sub_1000085EC;
  v12[3] = &unk_1001FEBD8;
  unsigned int v9 = _Block_copy(v12);
  swift_retain();
  swift_release();
  id v10 = [v8 addStatusUpdateHandlerForEnvironment:a1 queue:a2 block:v9];
  _Block_release(v9);
  swift_unknownObjectRelease();
  return v10;
}

uint64_t sub_1000BCDE0(uint64_t a1)
{
  objc_msgSend(objc_msgSend(self, "defaultProvider"), "removeUpdateHandlerForToken:", a1);

  return swift_unknownObjectRelease();
}

uint64_t type metadata accessor for TrialAllocationStatusProvider()
{
  return self;
}

uint64_t sub_1000BCE6C()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000BCE7C()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t initializeBufferWithCopyOfBuffer for DevicePersistentData(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for DevicePersistentData()
{
  return swift_bridgeObjectRelease();
}

void *assignWithCopy for DevicePersistentData(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for DevicePersistentData(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for DevicePersistentData(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 24))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 16);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DevicePersistentData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DevicePersistentData()
{
  return &type metadata for DevicePersistentData;
}

unint64_t sub_1000BD004(unint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for UUID();
  sub_100020C48();
  uint64_t v10 = v9;
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10002572C((uint64_t *)&unk_10021E620);
  __chkstk_darwin(v14 - 8);
  sub_100021208();
  if ((a2 & 1) != 0 || a1 - 21 <= 0xFFFFFFFFFFFFFFEBLL)
  {
    a1 = sub_1000B53E4(0x14uLL) + 1;
    if (!a4) {
      goto LABEL_8;
    }
  }
  else if (!a4)
  {
    goto LABEL_8;
  }
  UUID.init(uuidString:)();
  if (sub_100027BA4(v4, 1, v8) != 1)
  {
    sub_1000BD6F4(v4);
    return a1;
  }
  swift_bridgeObjectRelease();
  sub_1000BD6F4(v4);
LABEL_8:
  UUID.init()();
  UUID.uuidString.getter();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v8);
  return a1;
}

uint64_t sub_1000BD17C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a1 != a4) {
    return 0;
  }
  if (a2 == a5 && a3 == a6) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

uint64_t sub_1000BD1B8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 3158628 && a2 == 0xE300000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x5555656369766564 && a2 == 0xEA00000000004449)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1000BD2A4(char a1)
{
  if (a1) {
    return 0x5555656369766564;
  }
  else {
    return 3158628;
  }
}

uint64_t sub_1000BD2D8(void *a1)
{
  uint64_t v4 = sub_10002572C(&qword_10021D9B8);
  sub_100020C48();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  sub_100021208();
  sub_10001B620(a1, a1[3]);
  sub_1000BD6A8();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1) {
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v2, v4);
}

uint64_t sub_1000BD414(void *a1)
{
  sub_10002572C(&qword_10021D9A8);
  sub_100020C48();
  __chkstk_darwin(v3);
  sub_100021208();
  uint64_t v4 = a1[3];
  sub_10001B620(a1, v4);
  sub_1000BD6A8();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v1)
  {
    uint64_t v4 = KeyedDecodingContainer.decode(_:forKey:)();
    KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v6 = sub_100025A4C();
    v7(v6);
  }
  sub_10001CA50((uint64_t)a1);
  return v4;
}

uint64_t sub_1000BD56C()
{
  return sub_1000BD2A4(*v0);
}

uint64_t sub_1000BD574@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000BD1B8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000BD59C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = static AvroPrimitiveSchema.int.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000BD5C4(uint64_t a1)
{
  unint64_t v2 = sub_1000BD6A8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000BD600(uint64_t a1)
{
  unint64_t v2 = sub_1000BD6A8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000BD63C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1000BD414(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t sub_1000BD66C(void *a1)
{
  return sub_1000BD2D8(a1);
}

uint64_t sub_1000BD68C(uint64_t *a1, uint64_t *a2)
{
  return sub_1000BD17C(*a1, a1[1], a1[2], *a2, a2[1], a2[2]);
}

unint64_t sub_1000BD6A8()
{
  unint64_t result = qword_10021D9B0;
  if (!qword_10021D9B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10021D9B0);
  }
  return result;
}

uint64_t sub_1000BD6F4(uint64_t a1)
{
  uint64_t v2 = sub_10002572C((uint64_t *)&unk_10021E620);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unsigned char *storeEnumTagSinglePayload for DevicePersistentData.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000BD820);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DevicePersistentData.CodingKeys()
{
  return &type metadata for DevicePersistentData.CodingKeys;
}

unint64_t sub_1000BD85C()
{
  unint64_t result = qword_10021D9C0;
  if (!qword_10021D9C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10021D9C0);
  }
  return result;
}

unint64_t sub_1000BD8AC()
{
  unint64_t result = qword_10021D9C8;
  if (!qword_10021D9C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10021D9C8);
  }
  return result;
}

unint64_t sub_1000BD8FC()
{
  unint64_t result = qword_10021D9D0;
  if (!qword_10021D9D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10021D9D0);
  }
  return result;
}

uint64_t sub_1000BD94C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for URLError.Code();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v24 - v6;
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v24 - v8;
  [v1 code];
  URLError.Code.init(rawValue:)();
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v7, v9, v2);
  static URLError.Code.cancelled.getter();
  sub_1000BDD68();
  char v10 = sub_10002C2CC();
  uint64_t v11 = *(void (**)(void))(v3 + 8);
  sub_100026A24();
  v11();
  if (v10)
  {
    sub_100026A24();
    v11();
    sub_100026A24();
    v11();
    return 59;
  }
  else
  {
    static URLError.Code.badURL.getter();
    char v13 = sub_10002C2CC();
    sub_100026A24();
    v11();
    if (v13)
    {
      sub_100026A24();
      v11();
      sub_100026A24();
      v11();
      return 60;
    }
    else
    {
      static URLError.Code.timedOut.getter();
      char v14 = sub_10002C2CC();
      sub_100026A24();
      v11();
      if (v14)
      {
        sub_100026A24();
        v11();
        sub_100026A24();
        v11();
        return 61;
      }
      else
      {
        static URLError.Code.unsupportedURL.getter();
        char v15 = sub_10002C2CC();
        sub_100026A24();
        v11();
        if (v15)
        {
          sub_100026A24();
          v11();
          sub_100026A24();
          v11();
          return 62;
        }
        else
        {
          static URLError.Code.cannotFindHost.getter();
          char v16 = sub_10002C2CC();
          sub_100026A24();
          v11();
          if ((v16 & 1) != 0
            || (static URLError.Code.cannotConnectToHost.getter(),
                char v17 = sub_10002C2CC(),
                sub_100026A24(),
                v11(),
                (v17 & 1) != 0))
          {
            sub_100026A24();
            v11();
            sub_100026A24();
            v11();
            return 63;
          }
          else
          {
            static URLError.Code.networkConnectionLost.getter();
            char v18 = sub_10002C2CC();
            sub_100026A24();
            v11();
            if (v18)
            {
              sub_100026A24();
              v11();
              sub_100026A24();
              v11();
              return 64;
            }
            else
            {
              static URLError.Code.dnsLookupFailed.getter();
              char v19 = sub_10002C2CC();
              sub_100026A24();
              v11();
              if (v19)
              {
                sub_100026A24();
                v11();
                sub_100026A24();
                v11();
                return 65;
              }
              else
              {
                static URLError.Code.httpTooManyRedirects.getter();
                char v20 = sub_10002C2CC();
                sub_100026A24();
                v11();
                if (v20)
                {
                  sub_100026A24();
                  v11();
                  sub_100026A24();
                  v11();
                  return 66;
                }
                else
                {
                  static URLError.Code.resourceUnavailable.getter();
                  char v21 = sub_10002C2CC();
                  sub_100026A24();
                  v11();
                  if (v21)
                  {
                    sub_100026A24();
                    v11();
                    sub_100026A24();
                    v11();
                    return 67;
                  }
                  else
                  {
                    static URLError.Code.notConnectedToInternet.getter();
                    char v22 = sub_10002C2CC();
                    sub_100026A24();
                    v11();
                    if (v22)
                    {
                      sub_100026A24();
                      v11();
                      sub_100026A24();
                      v11();
                      return 68;
                    }
                    else
                    {
                      static URLError.Code.redirectToNonExistentLocation.getter();
                      char v23 = sub_10002C2CC();
                      sub_100026A24();
                      v11();
                      sub_100026A24();
                      v11();
                      sub_100026A24();
                      v11();
                      if (v23) {
                        return 69;
                      }
                      else {
                        return 22;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

unint64_t sub_1000BDD68()
{
  unint64_t result = qword_10021D9D8;
  if (!qword_10021D9D8)
  {
    type metadata accessor for URLError.Code();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10021D9D8);
  }
  return result;
}

uint64_t sub_1000BDDB8()
{
  return sub_100012824((uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__bag, (uint64_t (*)(uint64_t))sub_100012864);
}

uint64_t sub_1000BDDD8()
{
  return sub_100012824((uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__configuration, (uint64_t (*)(uint64_t))sub_10008081C);
}

uint64_t sub_1000BDDF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = type metadata accessor for URLQueryItem();
  if (v3)
  {
    sub_10000E004();
    sub_10002A020();
    v5();
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v6 = 1;
  }

  return sub_10002538C(a2, v6, 1, v4);
}

double sub_1000BDE98@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  if (*(void *)(a1 + 16))
  {
    sub_10001C348(a1 + 32, (uint64_t)a2);
  }
  else
  {
    double result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

void sub_1000BDEB8()
{
  sub_10000DFE0();
  uint64_t v3 = sub_10002572C(&qword_10021BB20);
  uint64_t v4 = sub_100016544(v3);
  __chkstk_darwin(v4);
  sub_10001ED70();
  __chkstk_darwin(v5);
  sub_1000E21E8();
  uint64_t v6 = type metadata accessor for URL();
  sub_100020C48();
  uint64_t v8 = v7;
  __chkstk_darwin(v9);
  sub_1000E210C();
  sub_100020C48();
  uint64_t v52 = v11;
  uint64_t v53 = v10;
  __chkstk_darwin(v10);
  sub_100027570();
  __chkstk_darwin(v12);
  char v14 = (char *)&v46 - v13;
  char v15 = *(void **)(v0 + 56);
  swift_retain();
  static Client.parsecd.getter();
  type metadata accessor for ResourceAccessSpan();
  sub_1000281FC();
  uint64_t v16 = sub_100003EAC(v15, 8, (uint64_t)v14, 0, 1);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (!Strong)
  {
    *(unsigned char *)(v16 + qword_10021B6C8) = 39;
    sub_100011708();
LABEL_19:
    swift_release();
    goto LABEL_20;
  }
  uint64_t v18 = Strong;
  char v19 = (void *)sub_100012824((uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__bag, (uint64_t (*)(uint64_t))sub_100012864);
  if (v19)
  {
    char v20 = v19;
    uint64_t v51 = v18;
    id v21 = [v19 searchURL];

    if (v21)
    {
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v22 = 0;
    }
    else
    {
      uint64_t v22 = 1;
    }
    sub_10002538C(v2, v22, 1, v6);
    sub_1000E0D90(v2, v1, &qword_10021BB20);
    sub_1000184F4(v1, 1, v6);
    if (!v23)
    {
      sub_1000E257C();
      sub_1000E2854();
      sub_10000E0F4();
      v29();
      uint64_t v30 = sub_100023CE4();
      *(void *)(v30 + 16) = 0;
      uint64_t v31 = sub_10007FBE8();
      static Client.parsecd.getter();
      char v32 = (void *)sub_100012824((uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__bag, (uint64_t (*)(uint64_t))sub_100012864);
      uint32_t v49 = (void *)v31;
      uint64_t v50 = v8;
      if (v32)
      {
        uint64_t v33 = v32;
        uint64_t v34 = v30;
        int v47 = [v32 assumesHTTP3Capable];
      }
      else
      {
        uint64_t v34 = v30;
        int v47 = 0;
      }
      uint64_t v35 = sub_100023CE4();
      swift_weakInit();
      uint64_t v36 = sub_100023CFC();
      *(void *)(v36 + 16) = v35;
      *(void *)(v36 + 24) = v34;
      uint64_t v37 = sub_100023CE4();
      swift_weakInit();
      uint64_t v38 = (void *)swift_allocObject();
      v38[2] = v16;
      v38[3] = v37;
      uint64_t v48 = v34;
      v38[4] = v34;
      swift_retain_n();
      swift_retain();
      swift_retain();
      swift_retain();
      uint64_t v39 = sub_1000E2E40();
      uint64_t v40 = v49;
      sub_1000B6288(v39, v41, v47, v42, v36, v43, (uint64_t)v38);

      swift_release();
      swift_release();
      sub_10000E040();
      v44();
      swift_release();
      swift_release();
      sub_1000C1BD4();
      swift_release();
      swift_unknownObjectRelease();
      sub_1000E2C08();
      sub_10000E040();
      v45();
      goto LABEL_19;
    }
  }
  else
  {
    sub_10002538C(v1, 1, 1, v6);
  }
  sub_100019994(v1, &qword_10021BB20);
  if (qword_100218AE8 != -1) {
    swift_once();
  }
  uint64_t v24 = type metadata accessor for Logger();
  uint64_t v25 = (void *)sub_10001DD88(v24, (uint64_t)qword_1002368D0);
  os_log_type_t v26 = static os_log_type_t.debug.getter();
  if (sub_100017D10(v26))
  {
    *(_WORD *)sub_100023E24() = 0;
    sub_1000E2E4C((void *)&_mh_execute_header, v27, v28, "warm not required, bag fetch in process");
    sub_100017D40();
  }

  *(unsigned char *)(v16 + qword_10021B6C8) = 60;
  sub_100011708();
  swift_release();
  swift_unknownObjectRelease();
LABEL_20:
  sub_10000DFB8();
}

uint64_t sub_1000BE38C()
{
  uint64_t v2 = sub_10002572C(&qword_10021BF30);
  uint64_t v3 = sub_100016544(v2);
  __chkstk_darwin(v3);
  uint64_t v4 = sub_1000E2600();
  sub_100020C48();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  sub_100016500();
  sub_10001DAF4((uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__userAgent, (void (*)(uint64_t))sub_10002A280);
  sub_1000184F4(v1, 1, v4);
  if (v8) {
    return sub_100019994(v1, &qword_10021BF30);
  }
  sub_1000E257C();
  sub_10000E0F4();
  v10();
  uint64_t v11 = (void *)sub_100012824((uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__configuration, (uint64_t (*)(uint64_t))sub_10008081C);
  if (!v11 || (uint64_t v12 = v11, v13 = [v11 parsecEnabled], v12, v13))
  {
    swift_unknownObjectRetain();
    sub_1000E7068();
    swift_unknownObjectRelease();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v0, v4);
}

uint64_t sub_1000BE500()
{
  sub_100023C50();
  *(void *)(v1 + 200) = v0;
  uint64_t v2 = sub_10002572C(&qword_10021BF30);
  sub_100016544(v2);
  *(void *)(v1 + 208) = swift_task_alloc();
  sub_100026FC8();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_1000BE588()
{
  uint64_t v1 = v0[26];
  sub_10001DAF4((uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__userAgent, (void (*)(uint64_t))sub_10002A280);
  type metadata accessor for UserAgent();
  uint64_t v2 = sub_100029494();
  int v5 = sub_100027BA4(v2, v3, v4);
  sub_100019994(v1, &qword_10021BF30);
  if (v5 == 1)
  {
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;
    sub_10002572C(&qword_100219280);
    uint64_t inited = (__n128 *)swift_initStackObject();
    uint64_t v10 = sub_10002E6C0(inited, (__n128)xmmword_1001A2A20);
    uint64_t v12 = (__n128 *)sub_1000E219C(v10, (uint64_t)&type metadata for String, v11);
LABEL_12:
    v12[3].n128_u64[0] = v13;
    v12[3].n128_u64[1] = v14;
    uint64_t v27 = Dictionary.init(dictionaryLiteral:)();
    id v28 = objc_allocWithZone((Class)NSError);
    sub_1000B06A0(v6, v8, 1, v27);
    swift_willThrow();
    swift_task_dealloc();
    sub_100017DBC();
    return v29();
  }
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  v0[27] = Strong;
  if (!Strong)
  {
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v23;
    sub_10002572C(&qword_100219280);
    uint64_t v24 = (__n128 *)swift_initStackObject();
    uint64_t v12 = sub_10002E6C0(v24, (__n128)xmmword_1001A2A20);
    v12[2].n128_u64[0] = v25;
    v12[2].n128_u64[1] = v26;
    v12[4].n128_u64[1] = (unint64_t)&type metadata for String;
    uint64_t v13 = 0x6D65737341206F6ELL;
    unint64_t v14 = 0xEB00000000796C62;
    goto LABEL_12;
  }
  if (qword_100218B20 != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  v0[28] = sub_10002A10C(v16, (uint64_t)qword_100236978);
  char v17 = (void *)Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.debug.getter();
  if (sub_100017D10(v18))
  {
    *(_WORD *)sub_100023E24() = 0;
    sub_1000E2E4C((void *)&_mh_execute_header, v19, v20, "Triggering Bag Forcefetch for parsec_tool");
    sub_100017D40();
  }

  v0[29] = sub_100017C74();
  id v21 = (void *)swift_task_alloc();
  v0[30] = v21;
  *id v21 = v0;
  v21[1] = sub_1000BE874;
  return sub_100102738();
}

uint64_t sub_1000BE874()
{
  sub_100023C50();
  sub_100026880();
  uint64_t v3 = v2;
  v2[22] = v1;
  v2[23] = v4;
  v2[24] = v0;
  uint64_t v5 = *v1;
  sub_10001DD38();
  *uint64_t v6 = v5;
  v3[31] = v0;
  swift_task_dealloc();
  if (!v0) {
    swift_unknownObjectRelease();
  }
  sub_100026FC8();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_1000BE964()
{
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (_WORD *)sub_100023E24();
    sub_10002B114(v4);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Bag fetch completed, returning value to parsec_tool client", v0, 2u);
    sub_100017D40();
  }
  uint64_t v5 = *(void *)(v1 + 184);

  sub_1000C1BD4();
  swift_unknownObjectRelease();
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(uint64_t))(v1 + 8);
  return v6(v5);
}

uint64_t sub_1000BEA50()
{
  sub_100023C50();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_task_dealloc();
  sub_100017DBC();
  return v0();
}

uint64_t sub_1000BEAC0(unint64_t a1, uint64_t a2)
{
  uint64_t v69 = a2;
  uint64_t v3 = sub_10002572C(&qword_10021DE08);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v50 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v75 = type metadata accessor for Apple_Parsec_Spotlight_V1alpha_Result();
  uint64_t v70 = *(void *)(v75 - 8);
  uint64_t v6 = __chkstk_darwin(v75);
  uint64_t v8 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v6);
  unint64_t v65 = (char *)&v50 - v10;
  __chkstk_darwin(v9);
  uint64_t v64 = (char *)&v50 - v11;
  uint64_t v61 = type metadata accessor for Apple_Parsec_Spotlight_V1alpha_ZkwSuggestResponse.Section();
  uint64_t v57 = *(void *)(v61 - 8);
  __chkstk_darwin(v61);
  uint64_t v60 = (char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v52 = a1;
  if (a1 >> 62) {
    goto LABEL_44;
  }
  uint64_t v13 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t v14 = *(void *)(Apple_Parsec_Spotlight_V1alpha_ZkwSuggestResponse.sections.getter() + 16);
    uint64_t result = swift_bridgeObjectRelease();
    if (!v13 || v13 != v14) {
      return result;
    }
    unint64_t v16 = 0;
    unint64_t v56 = v52 & 0xC000000000000001;
    uint64_t v51 = v52 & 0xFFFFFFFFFFFFFF8;
    uint64_t v50 = v52 + 32;
    uint64_t v55 = v57 + 16;
    uint64_t v74 = (void (**)(char *, char *, uint64_t))(v70 + 16);
    id v73 = (void (**)(char *, uint64_t))(v70 + 8);
    char v17 = (void (**)(char *, char *, uint64_t))(v70 + 32);
    uint64_t v53 = (uint64_t (**)(char *, uint64_t))(v57 + 8);
    uint64_t v54 = v13;
    int v62 = (void (**)(char *, char *, uint64_t))(v70 + 32);
    uint64_t v63 = v5;
    while (v16 != v13)
    {
      if (v56)
      {
        unint64_t v18 = v16;
        id v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (v16 >= *(void *)(v51 + 16)) {
          goto LABEL_43;
        }
        unint64_t v18 = v16;
        id v19 = *(id *)(v50 + 8 * v16);
      }
      uint64_t v20 = v19;
      id v59 = objc_msgSend(v19, "topic", v50);

      uint64_t v21 = Apple_Parsec_Spotlight_V1alpha_ZkwSuggestResponse.sections.getter();
      if (v18 >= *(void *)(v21 + 16)) {
        goto LABEL_42;
      }
      unint64_t v22 = v21 + ((*(unsigned __int8 *)(v57 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v57 + 80));
      uint64_t v23 = *(void *)(v57 + 72);
      unint64_t v58 = v18;
      (*(void (**)(char *, unint64_t, uint64_t))(v57 + 16))(v60, v22 + v23 * v18, v61);
      swift_bridgeObjectRelease();
      uint64_t v24 = Apple_Parsec_Spotlight_V1alpha_ZkwSuggestResponse.Section.resultIdentifiers.getter();
      uint64_t v25 = v24;
      uint64_t v68 = *(void *)(v24 + 16);
      if (v68)
      {
        unint64_t v26 = 0;
        uint64_t v67 = v24 + 32;
        uint64_t v27 = _swiftEmptyArrayStorage;
        uint64_t v66 = v24;
        while (v26 < *(void *)(v25 + 16))
        {
          unint64_t v72 = v26;
          id v28 = (uint64_t *)(v67 + 16 * v26);
          uint64_t v30 = *v28;
          uint64_t v29 = v28[1];
          swift_bridgeObjectRetain();
          uint64_t v31 = Apple_Parsec_Spotlight_V1alpha_ZkwSuggestResponse.results.getter();
          uint64_t v32 = *(void *)(v31 + 16);
          if (v32)
          {
            uint64_t v71 = v27;
            unint64_t v33 = v31 + ((*(unsigned __int8 *)(v70 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v70 + 80));
            uint64_t v34 = *(void *)(v70 + 72);
            uint64_t v35 = *(void (**)(char *, unint64_t, uint64_t))(v70 + 16);
            swift_bridgeObjectRetain();
            uint64_t v36 = v75;
            while (1)
            {
              v35(v8, v33, v36);
              if (Apple_Parsec_Spotlight_V1alpha_Result.identifier.getter() == v30 && v37 == v29) {
                break;
              }
              char v39 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              if (v39) {
                goto LABEL_27;
              }
              uint64_t v36 = v75;
              (*v73)(v8, v75);
              v33 += v34;
              if (!--v32)
              {
                swift_bridgeObjectRelease();
                uint64_t v40 = 1;
                char v17 = v62;
                uint64_t v5 = v63;
                uint64_t v27 = v71;
                goto LABEL_25;
              }
            }
            swift_bridgeObjectRelease();
LABEL_27:
            uint64_t v36 = v75;
            uint64_t v27 = v71;
            uint64_t v25 = v66;
            swift_bridgeObjectRelease();
            char v17 = v62;
            uint64_t v5 = v63;
            (*v62)(v63, v8, v36);
            uint64_t v40 = 0;
          }
          else
          {
            uint64_t v40 = 1;
            uint64_t v36 = v75;
LABEL_25:
            uint64_t v25 = v66;
          }
          sub_10002538C((uint64_t)v5, v40, 1, v36);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (sub_100027BA4((uint64_t)v5, 1, v36) == 1)
          {
            sub_100019994((uint64_t)v5, &qword_10021DE08);
          }
          else
          {
            uint64_t v41 = v36;
            uint64_t v42 = *v17;
            uint64_t v43 = v64;
            (*v17)(v64, v5, v41);
            (*v74)(v65, v43, v41);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v27 = (void *)sub_100065AA4(0, v27[2] + 1, 1, (uint64_t)v27);
            }
            unint64_t v45 = v27[2];
            unint64_t v44 = v27[3];
            if (v45 >= v44 >> 1) {
              uint64_t v27 = (void *)sub_100065AA4(v44 > 1, v45 + 1, 1, (uint64_t)v27);
            }
            void v27[2] = v45 + 1;
            uint64_t v46 = v70;
            uint64_t v47 = v75;
            v42((char *)v27+ ((*(unsigned __int8 *)(v46 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80))+ *(void *)(v70 + 72) * v45, v65, v75);
            (*(void (**)(char *, uint64_t))(v46 + 8))(v64, v47);
          }
          unint64_t v26 = v72 + 1;
          if (v72 + 1 == v68)
          {
            swift_bridgeObjectRelease();
            goto LABEL_38;
          }
        }
        __break(1u);
        break;
      }
      swift_bridgeObjectRelease();
      uint64_t v27 = _swiftEmptyArrayStorage;
LABEL_38:
      uint64_t v48 = v59;
      unint64_t v49 = v58 + 1;
      sub_1000A47B8(v59, (uint64_t)v27);

      swift_bridgeObjectRelease();
      uint64_t result = (*v53)(v60, v61);
      unint64_t v16 = v49;
      uint64_t v13 = v54;
      if (v49 == v54) {
        return result;
      }
    }
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    swift_bridgeObjectRetain();
    uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_1000BF188@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v69 = a3;
  uint64_t v5 = type metadata accessor for Apple_Parsec_Spotlight_V1alpha_ZkwSuggestResponse.Section();
  uint64_t v81 = *(void *)(v5 - 8);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v66 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v66 - v9;
  uint64_t v11 = type metadata accessor for Apple_Parsec_Spotlight_V1alpha_Result();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  double v87 = (char *)&v66 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  unint64_t v16 = (char *)&v66 - v15;
  uint64_t v68 = type metadata accessor for Apple_Parsec_Spotlight_V1alpha_ZkwSuggestResponse();
  uint64_t v17 = *(void *)(v68 - 8);
  __chkstk_darwin(v68);
  uint64_t v88 = (char *)&v66 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v19 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v19 == *(void *)(a2 + 16))
  {
    uint64_t v67 = v17;
    Apple_Parsec_Spotlight_V1alpha_ZkwSuggestResponse.init()();
    if (v19)
    {
      uint64_t v20 = 0;
      uint64_t v21 = v12 + 16;
      os_log_type_t v83 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
      unint64_t v77 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
      uint64_t v22 = a2 + v77;
      uint64_t v75 = *(void *)(v21 + 56);
      unint64_t v76 = a1 & 0xC000000000000001;
      uint64_t v73 = v81 + 32;
      uint64_t v74 = (void (**)(char *, char *, uint64_t))(v81 + 16);
      unint64_t v72 = (void (**)(unint64_t, char *, uint64_t))(v21 + 16);
      uint64_t v71 = (void (**)(char *, uint64_t))(v81 + 8);
      uint64_t v85 = v21;
      uint64_t v70 = (void (**)(char *, uint64_t))(v21 - 8);
      id v79 = v8;
      unint64_t v80 = a1;
      uint64_t v86 = v11;
      unint64_t v84 = v16;
      os_log_type_t v82 = v10;
      uint64_t v78 = v19;
      do
      {
        uint64_t v23 = v5;
        v83(v16, v22, v11);
        Apple_Parsec_Spotlight_V1alpha_ZkwSuggestResponse.Section.init()();
        uint64_t v24 = Apple_Parsec_Spotlight_V1alpha_Result.identifier.getter();
        uint64_t v26 = v25;
        uint64_t v27 = (void (*)(unsigned char *, void))Apple_Parsec_Spotlight_V1alpha_ZkwSuggestResponse.Section.resultIdentifiers.modify();
        uint64_t v29 = v28;
        uint64_t v30 = *v28;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t *v29 = v30;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_10002114C(0, *(void *)(v30 + 16) + 1, 1, v30);
          uint64_t v30 = v55;
          uint64_t *v29 = v55;
        }
        unint64_t v33 = *(void *)(v30 + 16);
        unint64_t v32 = *(void *)(v30 + 24);
        if (v33 >= v32 >> 1)
        {
          sub_10002114C(v32 > 1, v33 + 1, 1, v30);
          uint64_t v30 = v56;
          uint64_t *v29 = v56;
        }
        uint64_t v34 = v82;
        *(void *)(v30 + 16) = v33 + 1;
        uint64_t v35 = v30 + 16 * v33;
        *(void *)(v35 + 32) = v24;
        *(void *)(v35 + 40) = v26;
        v27(v89, 0);
        if (v76) {
          id v36 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v36 = *(id *)(v80 + 8 * v20 + 32);
        }
        uint64_t v37 = v36;
        uint64_t v5 = v23;
        id v38 = [v36 contextId];

        static String._unconditionallyBridgeFromObjectiveC(_:)();
        Apple_Parsec_Spotlight_V1alpha_ZkwSuggestResponse.Section.contextID.setter();
        char v39 = v79;
        (*v74)(v79, v34, v5);
        uint64_t v40 = (void (*)(unsigned char *, void))Apple_Parsec_Spotlight_V1alpha_ZkwSuggestResponse.sections.modify();
        uint64_t v42 = v41;
        uint64_t v43 = *v41;
        char v44 = swift_isUniquelyReferenced_nonNull_native();
        *uint64_t v42 = v43;
        if ((v44 & 1) == 0)
        {
          uint64_t v43 = sub_100065D04(0, *(void *)(v43 + 16) + 1, 1, v43);
          *uint64_t v42 = v43;
        }
        unint64_t v46 = *(void *)(v43 + 16);
        unint64_t v45 = *(void *)(v43 + 24);
        if (v46 >= v45 >> 1)
        {
          uint64_t v43 = sub_100065D04(v45 > 1, v46 + 1, 1, v43);
          *uint64_t v42 = v43;
        }
        *(void *)(v43 + 16) = v46 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v81 + 32))(v43+ ((*(unsigned __int8 *)(v81 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v81 + 80))+ *(void *)(v81 + 72) * v46, v39, v5);
        v40(v89, 0);
        v83(v87, (uint64_t)v84, v86);
        uint64_t v47 = (void (*)(unsigned char *, void))Apple_Parsec_Spotlight_V1alpha_ZkwSuggestResponse.results.modify();
        unint64_t v49 = v48;
        uint64_t v50 = *v48;
        char v51 = swift_isUniquelyReferenced_nonNull_native();
        *unint64_t v49 = v50;
        if ((v51 & 1) == 0)
        {
          uint64_t v50 = sub_100065AA4(0, *(void *)(v50 + 16) + 1, 1, v50);
          *unint64_t v49 = v50;
        }
        unint64_t v53 = *(void *)(v50 + 16);
        unint64_t v52 = *(void *)(v50 + 24);
        if (v53 >= v52 >> 1)
        {
          uint64_t v50 = sub_100065AA4(v52 > 1, v53 + 1, 1, v50);
          *unint64_t v49 = v50;
        }
        ++v20;
        *(void *)(v50 + 16) = v53 + 1;
        uint64_t v54 = v75;
        uint64_t v11 = v86;
        (*v72)(v50 + v77 + v53 * v75, v87, v86);
        v47(v89, 0);
        (*v71)(v82, v5);
        unint64_t v16 = v84;
        (*v70)(v84, v11);
        v22 += v54;
      }
      while (v78 != v20);
    }
    uint64_t v64 = v69;
    uint64_t v65 = v68;
    (*(void (**)(uint64_t, char *, uint64_t))(v67 + 32))(v69, v88, v68);
    return sub_10002538C(v64, 0, 1, v65);
  }
  else
  {
    if (qword_100218B18 != -1) {
      swift_once();
    }
    uint64_t v57 = type metadata accessor for Logger();
    sub_10002A10C(v57, (uint64_t)qword_100236960);
    unint64_t v58 = Logger.logObject.getter();
    os_log_type_t v59 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v58, v59))
    {
      uint64_t v60 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v60 = 0;
      _os_log_impl((void *)&_mh_execute_header, v58, v59, "TopicContextss and results should have the same count.", v60, 2u);
      swift_slowDealloc();
    }

    uint64_t v61 = v69;
    uint64_t v62 = v68;
    return sub_10002538C(v61, 1, 1, v62);
  }
}

uint64_t sub_1000BF934(uint64_t a1)
{
  return sub_1000BF954(a1, qword_100236BC8, 300);
}

uint64_t sub_1000BF944(uint64_t a1)
{
  return sub_1000BF954(a1, qword_100236BE0, 600);
}

uint64_t sub_1000BF954(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for DispatchTimeInterval();
  sub_10004CD40(v5, a2);
  *(void *)sub_10002A10C(v5, (uint64_t)a2) = a3;
  sub_10000E004();
  uint64_t v7 = *(uint64_t (**)(void))(v6 + 104);

  return v7();
}

void sub_1000BF9E4(void *a1, char a2, void (*a3)(void))
{
  if (*(unsigned char *)(v3 + qword_100236B10 + 8)) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = *(void *)(v3 + qword_100236B10);
  }
  if ((a2 & 1) == 0)
  {
    id v7 = a1;
    sub_100023D58();
    sub_1000E24C8();
    a3();
    sub_1000E08D0(a1, 0);
    uint64_t v8 = qword_10021B6C8;
    char v9 = 2;
LABEL_6:
    *(unsigned char *)(v3 + v8) = v9;
    return;
  }
  swift_errorRetain();
  id v10 = sub_100030D6C((uint64_t)a1);
  ((void (*)(uint64_t, void, id))a3)(v6, 0, v10);
  swift_errorRelease();
  if (*(void *)(v3 + qword_100236B08))
  {
    swift_retain();
    sub_1000CC1B0((uint64_t)a1);
    swift_release();
  }
  swift_errorRetain();
  sub_10002572C(&qword_10021B3C0);
  if (sub_1000E3054())
  {
    sub_1000E2EC0();
    if (v18)
    {
      uint64_t v11 = qword_10021B6C8;
      if (v18 == 1) {
        char v12 = 20;
      }
      else {
        char v12 = 21;
      }
    }
    else
    {
      uint64_t v11 = qword_10021B6C8;
      char v12 = 19;
    }
    goto LABEL_20;
  }
  swift_errorRelease();
  swift_errorRetain();
  if (!sub_1000E3054())
  {
    sub_1000E2EC0();
    swift_errorRelease();
    uint64_t v8 = qword_10021B6C8;
    char v9 = 24;
    goto LABEL_6;
  }
  if (v18 != 1)
  {
    unint64_t v16 = (void *)sub_10002E854();
    sub_1000B8FBC(v16, v17, 0);
    sub_1000E2EC0();
    uint64_t v11 = qword_10021B6C8;
    char v12 = 23;
LABEL_20:
    *(unsigned char *)(v3 + v11) = v12;
    goto LABEL_21;
  }
  char v13 = sub_1000BD94C();
  uint64_t v14 = (void *)sub_10002E854();
  sub_1000B8FBC(v14, v15, 1);
  sub_1000E2EC0();
  *(unsigned char *)(v3 + qword_10021B6C8) = v13;
LABEL_21:
  swift_errorRelease();
}

void sub_1000BFBE8(void *a1)
{
  sub_1000E2B44();
  sub_10010227C();
  swift_release();
  sub_1000BFC4C();
}

void sub_1000BFC4C()
{
  uint64_t v1 = *(os_unfair_lock_s **)(*(void *)(v0 + OBJC_IVAR____TtC7parsecd11ClientState_pegasusProxyLocker) + 16);
  os_unfair_lock_lock(v1);
  sub_1000C0D5C();
  os_unfair_lock_unlock(v1);
}

uint64_t sub_1000BFC8C(uint64_t a1)
{
  sub_1000E2B44();
  sub_1001021FC();
  swift_release();
  type metadata accessor for Client();
  sub_10001DCF8();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8);

  return v4(a1, v2);
}

void sub_1000BFD04()
{
  sub_10000DFE0();
  sub_1000E2CBC();
  uint64_t v3 = type metadata accessor for UserAgent();
  sub_100020C48();
  uint64_t v74 = v4;
  __chkstk_darwin(v5);
  sub_10000E04C();
  uint64_t v66 = v6;
  uint64_t v7 = sub_10002572C(&qword_10021BF30);
  uint64_t v8 = sub_100016544(v7);
  __chkstk_darwin(v8);
  sub_100017D2C();
  uint64_t v68 = v9;
  sub_10000E100();
  __chkstk_darwin(v10);
  char v12 = (char *)&v63 - v11;
  uint64_t v13 = type metadata accessor for Client();
  sub_100020C48();
  uint64_t v15 = v14;
  __chkstk_darwin(v16);
  sub_100017D2C();
  uint64_t v72 = v17;
  sub_10000E100();
  __chkstk_darwin(v18);
  sub_10002EC98();
  uint64_t v20 = __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v63 - v21;
  __chkstk_darwin(v20);
  sub_1000E21E8();
  sub_1000E2B44();
  sub_1001022C4();
  swift_release();
  uint64_t v73 = v1;
  sub_10002B9E8(v1, (uint64_t)v12, &qword_10021BF30);
  uint64_t v23 = sub_100029494();
  sub_1000184F4(v23, v24, v3);
  uint64_t v69 = v3;
  if (v25)
  {
    sub_100019994((uint64_t)v12, &qword_10021BF30);
    static Client.unknown.getter();
  }
  else
  {
    UserAgent.client.getter();
    sub_1000E269C();
    sub_100024400();
    v26();
    sub_1000E2C90();
    v27(v2, v22, v13);
  }
  uint64_t v28 = v13;
  if (qword_100218B38 != -1) {
    swift_once();
  }
  uint64_t v29 = type metadata accessor for Logger();
  sub_1000E2174(v29, (uint64_t)qword_1002369C0);
  sub_1000E2854();
  uint64_t v70 = v31;
  uint64_t v71 = v30;
  sub_100016608();
  v32();
  swift_retain_n();
  unint64_t v33 = Logger.logObject.getter();
  os_log_type_t v34 = static os_log_type_t.default.getter();
  int v35 = v34;
  if (os_log_type_enabled(v33, v34))
  {
    uint64_t v36 = sub_10001D784();
    int v65 = v35;
    uint64_t v37 = v36;
    uint64_t v64 = sub_100023E3C();
    v77[0] = v64;
    *(_DWORD *)uint64_t v37 = 136446466;
    Client.type.getter();
    uint64_t v76 = ClientType.rawValue.getter();
    uint64_t v67 = v13;
    uint64_t v38 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v76 = sub_10001C274(v38, v39, v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v75 = *(void (**)(uint64_t))(v15 + 8);
    sub_100023C70();
    v40();
    *(_WORD *)(v37 + 12) = 2080;
    type metadata accessor for SessionType();
    sub_10003233C(&qword_10021DB60, (void (*)(uint64_t))&type metadata accessor for SessionType);
    uint64_t v41 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v76 = sub_10001C274(v41, v42, v77);
    uint64_t v28 = v67;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v33, (os_log_type_t)v65, "userAgent changed to %{public}s for session %s", (uint8_t *)v37, 0x16u);
    sub_1000E24A4();
    sub_100017D40();
    sub_100017D40();
  }
  else
  {
    sub_100029304();
    uint64_t v75 = v43;
    sub_100023C70();
    v44();

    swift_release_n();
  }
  uint64_t v45 = v74;
  uint64_t v46 = v72;
  sub_10001DAF4((uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__client, (void (*)(uint64_t))sub_10002A150);
  Client.type.getter();
  uint64_t v47 = sub_100029304();
  v75(v47);
  Client.type.getter();
  uint64_t v48 = ClientType.rawValue.getter();
  if (v48 != ClientType.rawValue.getter())
  {
    sub_1000C0378((uint64_t)v77);
    uint64_t v49 = v0 + OBJC_IVAR____TtC7parsecd11ClientState_engagedSuggestionController;
    sub_1000257C8();
    sub_1000E0328((uint64_t)v77, v49, &qword_10021CD08);
    swift_endAccess();
  }
  sub_1000E2854();
  sub_100016608();
  v50();
  sub_1000BFC8C(v46);
  uint64_t v51 = sub_100012824((uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__bag, (uint64_t (*)(uint64_t))sub_100012864);
  if (v51)
  {
    unint64_t v52 = (void *)v51;
    uint64_t v53 = v28;
    uint64_t v54 = v68;
    sub_10001DAF4((uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__userAgent, (void (*)(uint64_t))sub_10002A280);
    uint64_t v55 = v69;
    if (sub_100027BA4(v54, 1, v69))
    {
      sub_100019994(v54, &qword_10021BF30);
      uint64_t v56 = 0;
      uint64_t v57 = 0;
    }
    else
    {
      uint64_t v58 = v66;
      sub_100016608();
      v59();
      sub_100019994(v54, &qword_10021BF30);
      uint64_t v56 = UserAgent.fullString.getter();
      uint64_t v57 = v60;
      (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v58, v55);
    }
    objc_allocWithZone((Class)PARBag);
    id v61 = v52;
    id v62 = sub_10001519C(v61, v56, v57);
    sub_1000BFBE8(v62);

    uint64_t v28 = v53;
  }
  sub_100019994(v73, &qword_10021BF30);
  ((void (*)(uint64_t, uint64_t))v75)(v2, v28);
  sub_10000DFB8();
}

double sub_1000C0378@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Client();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10002572C(&qword_10021BF30);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UserAgent();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  char v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001DAF4((uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__userAgent, (void (*)(uint64_t))sub_10002A280);
  if (sub_100027BA4((uint64_t)v8, 1, v9) == 1)
  {
    sub_100019994((uint64_t)v8, &qword_10021BF30);
    if (qword_100218B68 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_10002A10C(v13, (uint64_t)qword_100236A50);
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "ClientState configured with nil useragent", v16, 2u);
      swift_slowDealloc();
    }

    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v8, v9);
  UserAgent.client.getter();
  uint64_t v17 = Client.type.getter();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  if (v17 == 1)
  {
    uint64_t v18 = type metadata accessor for SafariEngagedSuggestionController();
    swift_allocObject();
    swift_retain();
    uint64_t v19 = sub_1000B1584();
    goto LABEL_11;
  }
  if (v17 == 2)
  {
    uint64_t v18 = type metadata accessor for SpotlightEngagedSuggestionController();
    swift_allocObject();
    swift_retain();
    uint64_t v19 = sub_10005CA40();
LABEL_11:
    *(void *)(a1 + 24) = v18;
    *(void *)(a1 + 32) = &off_1001FAA60;
    *(void *)a1 = v19;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    return result;
  }
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
LABEL_13:
  *(void *)(a1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

void sub_1000C0704()
{
  sub_10000DFE0();
  uint64_t v2 = v0;
  uint64_t v39 = v4;
  uint64_t v40 = v3;
  uint64_t v37 = v5;
  uint64_t v7 = v6;
  uint64_t v8 = sub_10002572C(&qword_10021DB68);
  uint64_t v9 = sub_100016544(v8);
  __chkstk_darwin(v9);
  sub_10000E04C();
  uint64_t v38 = v10;
  sub_100029488();
  uint64_t v11 = type metadata accessor for SessionType();
  sub_100020C48();
  uint64_t v13 = v12;
  __chkstk_darwin(v14);
  sub_10000E04C();
  uint64_t v41 = v15;
  uint64_t v16 = sub_10002572C(&qword_10021BF30);
  uint64_t v17 = sub_100016544(v16);
  __chkstk_darwin(v17);
  sub_1000E2134();
  uint64_t v18 = type metadata accessor for Client();
  uint64_t v19 = sub_100016544(v18);
  __chkstk_darwin(v19);
  sub_100028CA0();
  v0[3] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v20 = OBJC_IVAR____TtC7parsecd11ClientState__bag;
  sub_10002572C(&qword_10021DB70);
  sub_100023CFC();
  sub_100024344();
  *(void *)((char *)v0 + v20) = sub_100098D4C();
  uint64_t v21 = OBJC_IVAR____TtC7parsecd11ClientState__client;
  static Client.unknown.getter();
  sub_10002572C(&qword_10021DB78);
  sub_1000281FC();
  *(void *)((char *)v0 + v21) = sub_100098CC8();
  uint64_t v22 = OBJC_IVAR____TtC7parsecd11ClientState__userAgent;
  uint64_t v23 = type metadata accessor for UserAgent();
  sub_10002538C(v1, 1, 1, v23);
  sub_10002572C(&qword_10021DB80);
  sub_1000281FC();
  *(void *)((char *)v0 + v22) = sub_100098C64();
  uint64_t v24 = (uint64_t)v0 + OBJC_IVAR____TtC7parsecd11ClientState_lastNetworkRequest;
  uint64_t v25 = type metadata accessor for Date();
  sub_10002538C(v24, 1, 1, v25);
  uint64_t v26 = OBJC_IVAR____TtC7parsecd11ClientState__configuration;
  sub_10002572C((uint64_t *)&unk_10021DB88);
  sub_100023CFC();
  uint64_t v27 = (void *)sub_100024344();
  *(void *)((char *)v2 + v26) = sub_10010FF20(v27);
  uint64_t v28 = (char *)v2 + OBJC_IVAR____TtC7parsecd11ClientState_engagedSuggestionController;
  *((void *)v28 + 4) = 0;
  *(_OWORD *)uint64_t v28 = 0u;
  *((_OWORD *)v28 + 1) = 0u;
  *(void *)((char *)v2 + OBJC_IVAR____TtC7parsecd11ClientState_zkwProxy) = 0;
  *(void *)((char *)v2 + OBJC_IVAR____TtC7parsecd11ClientState_engagementProxy) = 0;
  *(void *)((char *)v2 + OBJC_IVAR____TtC7parsecd11ClientState_safariAssistantProxy) = 0;
  *(void *)((char *)v2 + OBJC_IVAR____TtC7parsecd11ClientState_lookupSearchProxy) = 0;
  *(void *)((char *)v2 + OBJC_IVAR____TtC7parsecd11ClientState_safariSearchProxy) = 0;
  uint64_t v29 = OBJC_IVAR____TtC7parsecd11ClientState_pegasusProxyLocker;
  type metadata accessor for Locker();
  uint64_t v30 = sub_100023CE4();
  uint64_t v31 = (_DWORD *)swift_slowAlloc();
  *(void *)(v30 + 16) = v31;
  *uint64_t v31 = 0;
  *(void *)((char *)v2 + v29) = v30;
  v2[3] = v39;
  swift_unknownObjectWeakAssign();
  v2[7] = sub_100010DE0();
  type metadata accessor for ClientSessionManager();
  swift_allocObject();
  sub_1000E3018();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000DF83C();
  v2[8] = v32;
  v2[9] = &off_1002000D0;
  v2[5] = v40;
  v2[6] = v7;
  swift_bridgeObjectRetain();
  v2[4] = dispatch_semaphore_create(0);
  uint64_t v33 = sub_1000E2EF0();
  sub_10002B9E8(v33, v34, &qword_10021DB68);
  sub_1000184F4(v38, 1, v11);
  if (v35)
  {
    SessionType.init(withClientIdentifier:)();
    sub_100019994(v38, &qword_10021DB68);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32))((uint64_t)v2 + OBJC_IVAR____TtC7parsecd11ClientState_sessionType, v41, v11);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v36 = *(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32);
    v36(v41, v38, v11);
    v36((uint64_t)v2 + OBJC_IVAR____TtC7parsecd11ClientState_sessionType, v41, v11);
  }
  sub_1000BFC4C();
  swift_unknownObjectRelease();
  sub_100019994(v37, &qword_10021DB68);
  sub_10000DFB8();
}

uint64_t sub_1000C0B08()
{
  if (swift_unknownObjectWeakLoadStrong())
  {
    id v1 = [self defaultCenter];
    [v1 removeObserver:v0];
    swift_unknownObjectRelease();
  }
  sub_10001CDE0(v0 + 16);

  swift_bridgeObjectRelease();
  swift_release();
  swift_unknownObjectRelease();
  type metadata accessor for SessionType();
  sub_10001DCF8();
  sub_10000E040();
  v2();
  swift_release();
  swift_release();
  swift_release();
  sub_100019994(v0 + OBJC_IVAR____TtC7parsecd11ClientState_lastNetworkRequest, &qword_10021BB10);
  swift_release();
  sub_100019994(v0 + OBJC_IVAR____TtC7parsecd11ClientState_engagedSuggestionController, &qword_10021CD08);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_1000C0CB4()
{
  sub_1000C0B08();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v1, v2);
}

uint64_t sub_1000C0D0C()
{
  return type metadata accessor for ClientState();
}

uint64_t type metadata accessor for ClientState()
{
  uint64_t result = qword_10021DA18;
  if (!qword_10021DA18) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1000C0D5C()
{
  sub_10000DFE0();
  uint64_t v1 = v0;
  type metadata accessor for Client();
  sub_100020C48();
  __chkstk_darwin(v2);
  sub_100017CD4();
  if (!swift_unknownObjectWeakLoadStrong()) {
    goto LABEL_23;
  }
  uint64_t v3 = (void *)sub_100012824((uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__bag, (uint64_t (*)(uint64_t))sub_100012864);
  if (!v3)
  {
    sub_100017C74();
    sub_100018148(0, 0);
    uint64_t v3 = (void *)sub_100016A0C();
    swift_unknownObjectRelease();
    if (!v3) {
      goto LABEL_6;
    }
  }
  uint64_t v4 = sub_1000CCE5C(v3);
  if (v5 >> 60 != 15)
  {
    uint64_t v11 = v4;
    unint64_t v12 = v5;
    sub_10001DAF4((uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__client, (void (*)(uint64_t))sub_10002A150);
    uint64_t v13 = Client.type.getter();
    sub_1000283D4();
    sub_100027EC0();
    v14();
    switch(v13)
    {
      case 4:
        sub_1000E2220();
        sub_10007FBE8();
        sub_100024344();
        type metadata accessor for PegasusProxyForLookupSearch();
        sub_1000281FC();
        sub_1000E20A0();
        uint64_t v18 = PegasusProxyForLookupSearch.init(bagData:urlSession:)();
        sub_1000E22FC(v18);
        sub_1000E2220();
        sub_10007FBE8();
        type metadata accessor for PegasusProxyForEngagement();
        sub_1000281FC();
        sub_1000E2370();
        break;
      case 2:
        sub_1000E2220();
        sub_10007FBE8();
        sub_100024344();
        type metadata accessor for PegasusProxyForSpotlightZKW();
        sub_1000281FC();
        sub_1000E20A0();
        uint64_t v19 = PegasusProxyForSpotlightZKW.init(bagData:urlSession:)();
        sub_1000E22FC(v19);
        sub_1000E2220();
        sub_10007FBE8();
        type metadata accessor for PegasusProxyForEngagement();
        sub_1000281FC();
        sub_1000E2370();
        break;
      case 1:
        sub_1000E2220();
        sub_10007FBE8();
        sub_100024344();
        type metadata accessor for PegasusProxyForSafariAssistant();
        sub_1000281FC();
        sub_1000E20A0();
        uint64_t v15 = PegasusProxyForSafariAssistant.init(bagData:urlSession:)();
        sub_1000E22FC(v15);
        sub_1000E2220();
        sub_10007FBE8();
        sub_100024344();
        type metadata accessor for PegasusProxyForSafariSearch();
        sub_1000281FC();
        sub_1000E20A0();
        uint64_t v16 = PegasusProxyForSafariSearch.init(bagData:urlSession:)();
        sub_1000E22FC(v16);
        sub_1000E2220();
        sub_10007FBE8();
        type metadata accessor for PegasusProxyForEngagement();
        sub_1000281FC();
        sub_1000E2370();
        break;
      default:

        sub_10000A330(v11, v12);
        swift_unknownObjectRelease();
        goto LABEL_23;
    }
    uint64_t v20 = PegasusProxyForEngagement.init(bagData:urlSession:client:)();

    sub_10000A330(v11, v12);
    swift_unknownObjectRelease();
    *(void *)&v1[OBJC_IVAR____TtC7parsecd11ClientState_engagementProxy] = v20;
    swift_release();
LABEL_23:
    sub_10000DFB8();
    return;
  }

LABEL_6:
  if (qword_100218AE8 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v21 = sub_10001DD88(v6, (uint64_t)qword_1002368D0);
  os_log_type_t v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v21, v7))
  {
    uint64_t v8 = (_WORD *)sub_100023E24();
    sub_10002B114(v8);
    _os_log_impl((void *)&_mh_execute_header, v21, v7, "couldn't initialize Pegasus Proxy, missing bag data", v1, 2u);
    sub_100017D40();
    swift_unknownObjectRelease();
    sub_10000DFB8();
  }
  else
  {

    sub_10000DFB8();
    swift_unknownObjectRelease();
  }
}

void sub_1000C112C()
{
  sub_1000E2C64();
  sub_100024344();
  uint64_t v3 = type metadata accessor for UserAgent();
  sub_100020C48();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  sub_100016550();
  uint64_t v7 = sub_10002572C(&qword_10021BF30);
  uint64_t v8 = sub_100016544(v7);
  __chkstk_darwin(v8);
  sub_100017DC8();
  uint64_t v9 = sub_1000CCB2C(v0);
  if (!v9)
  {
    long long v19 = 0u;
    long long v20 = 0u;
    goto LABEL_7;
  }
  uint64_t v10 = v9;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  AnyHashable.init<A>(_:)();
  sub_100039D58((uint64_t)v18, v10, &v19);
  swift_bridgeObjectRelease();
  sub_100039C5C((uint64_t)v18);
  if (!*((void *)&v20 + 1))
  {
LABEL_7:
    sub_100019994((uint64_t)&v19, (uint64_t *)&unk_10021BB30);
    goto LABEL_10;
  }
  sub_100023FA0(0, (unint64_t *)&qword_10021D040);
  if (swift_dynamicCast())
  {
    uint64_t v11 = (void *)v18[0];
    sub_10001DAF4((uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__userAgent, (void (*)(uint64_t))sub_10002A280);
    if (sub_100027BA4(v2, 1, v3))
    {
      sub_100019994(v2, &qword_10021BF30);
      uint64_t v12 = 0;
      uint64_t v13 = 0;
    }
    else
    {
      sub_100016608();
      v14();
      sub_100019994(v2, &qword_10021BF30);
      uint64_t v12 = UserAgent.fullString.getter();
      uint64_t v13 = v15;
      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v1, v3);
    }
    objc_allocWithZone((Class)PARBag);
    id v16 = v11;
    id v17 = sub_10001519C(v16, v12, v13);
    sub_1000BFBE8(v17);
  }
LABEL_10:
  OS_dispatch_semaphore.signal()();
  sub_100024390();
}

void sub_1000C13D4()
{
  type metadata accessor for SessionType();
  if (v0 <= 0x3F)
  {
    sub_1000442AC();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

unint64_t sub_1000C1504()
{
  unint64_t result = qword_10021DB30;
  if (!qword_10021DB30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10021DB30);
  }
  return result;
}

uint64_t sub_1000C1550(uint64_t a1)
{
  uint64_t result = sub_10003233C((unint64_t *)&unk_10021DB50, (void (*)(uint64_t))type metadata accessor for ClientState);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000C15A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = sub_10002572C(&qword_10021BF30);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = &v20[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = type metadata accessor for UserAgent();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = &v20[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (!result) {
    return result;
  }
  uint64_t v12 = (void **)(a3 + 16);
  id v13 = sub_1000C18D4();
  swift_beginAccess();
  uint64_t v14 = *v12;
  *uint64_t v12 = v13;

  swift_beginAccess();
  if (*v12) {
    sub_1000CCD2C(0, 0xE000000000000000, *v12);
  }
  swift_beginAccess();
  if (*v12) {
    [*v12 setTriggerEvent:19];
  }
  swift_beginAccess();
  if (*v12) {
    [*v12 setEndpoint:12];
  }
  swift_beginAccess();
  uint64_t v15 = *v12;
  if (!*v12) {
    return swift_release();
  }
  id v16 = objc_allocWithZone((Class)_CPFeedbackPayload);
  id v17 = v15;
  id v18 = [v16 initWithCodable:v17];
  [v18 setQueryId:0];
  if (!v18)
  {

    return swift_release();
  }
  swift_unknownObjectRetain();
  id v19 = v18;
  sub_10001DAF4((uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__userAgent, (void (*)(uint64_t))sub_10002A280);
  if (sub_100027BA4((uint64_t)v6, 1, v7) == 1)
  {
    parsecdUserAgent.getter();
    sub_100019994((uint64_t)v6, &qword_10021BF30);
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v8 + 32))(v10, v6, v7);
  }
  sub_1000148D0();

  swift_unknownObjectRelease();
  swift_release();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v8 + 8))(v10, v7);
}

id sub_1000C18D4()
{
  uint64_t v1 = sub_10002572C(&qword_10021BB20);
  uint64_t v2 = sub_100016544(v1);
  __chkstk_darwin(v2);
  sub_100016550();
  id v3 = [self startSearchFeedbackWithUUID];
  URLRequest.url.getter();
  uint64_t v4 = type metadata accessor for URL();
  sub_1000184F4(v0, 1, v4);
  if (v5)
  {
    sub_100019994(v0, &qword_10021BB20);
    NSString v7 = 0;
  }
  else
  {
    URL.absoluteString.getter();
    sub_10000E004();
    sub_10000E040();
    v6();
    NSString v7 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  [v3 setUrl:v7];

  uint64_t v8 = URLRequest.allHTTPHeaderFields.getter();
  Class isa = (Class)v8;
  if (v8)
  {
    sub_1000CC3E0(v8);
    swift_bridgeObjectRelease();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_release();
  }
  [v3 setHeaders:isa];

  return v3;
}

uint64_t sub_1000C1A7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = sub_10002572C(&qword_10021DBC0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = &v15[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  *(unsigned char *)(a2 + qword_10021B6C8) = 4;
  sub_100011708();
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v11 = result;
    swift_beginAccess();
    uint64_t v12 = *(void **)(a4 + 16);
    if (v12)
    {
      uint64_t v13 = type metadata accessor for Apple_Parsec_Search_V2_SearchResponse();
      sub_10002538C((uint64_t)v9, 1, 1, v13);
      id v14 = v12;
      sub_1000DECDC((uint64_t)v14, (uint64_t)v9, 0, 0, a1, 0, v11);

      swift_release();
      return sub_100019994((uint64_t)v9, &qword_10021DBC0);
    }
    else
    {
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_1000C1BD4()
{
  uint64_t v0 = sub_10002572C(&qword_10021BB10);
  uint64_t v1 = sub_100016544(v0);
  __chkstk_darwin(v1);
  sub_100016500();
  Date.init()();
  type metadata accessor for Date();
  uint64_t v2 = sub_1000E29A0();
  sub_10002538C(v2, v3, v4, v5);
  sub_1000257C8();
  sub_1000E2994();
  sub_1000E0328(v6, v7, v8);
  return swift_endAccess();
}

BOOL sub_1000C1C80()
{
  if (!swift_unknownObjectWeakLoadStrong()) {
    return 0;
  }
  id v0 = [self standardUserDefaults];
  id v1 = [v0 objectForKey:@"download_resources"];

  BOOL v2 = v1 == 0;
  if (v1)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
  }
  else
  {
    swift_unknownObjectRelease();
    memset(v4, 0, sizeof(v4));
  }
  sub_100019994((uint64_t)v4, (uint64_t *)&unk_10021BB30);
  return v2;
}

id sub_1000C1D60(void *a1, uint64_t a2, unint64_t a3)
{
  if (qword_100218B70 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_10002A10C(v6, (uint64_t)qword_100236A68);
  id v7 = a1;
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = swift_slowAlloc();
    unint64_t v15 = a3;
    uint64_t v11 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 134349571;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v10 + 12) = 2050;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v10 + 22) = 2117;
    id v12 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v11 = v7;

    _os_log_impl((void *)&_mh_execute_header, v8, v9, "queryId:%{public}llu requestId: %{public}llu response: %{sensitive}@", (uint8_t *)v10, 0x20u);
    sub_10002572C(&qword_100219710);
    swift_arrayDestroy();
    a3 = v15;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  id v13 = v7;
  sub_1000B8F00(a2, a3);
  return v13;
}

void *sub_1000C1F70(void *a1, uint64_t a2, unint64_t a3)
{
  id v5 = [a1 statusCode];
  unint64_t v6 = a3 >> 60;
  if (a3 >> 60 == 15)
  {
    uint64_t v7 = 0;
  }
  else
  {
    sub_10002A494();
    uint64_t v7 = Data.count.getter();
  }
  if (qword_100218B70 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_10002A10C(v8, (uint64_t)qword_100236A68);
  os_log_type_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = v7;
    id v12 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)id v12 = 134217984;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "response statusCode: %ld", v12, 0xCu);
    uint64_t v7 = v11;
    unint64_t v6 = a3 >> 60;
    swift_slowDealloc();
  }

  if (v5 == (id)200)
  {
    if (v6 <= 0xE)
    {
      uint64_t v15 = sub_10002A494();
      sub_1000B8F00(v15, v16);
      id v17 = a1;
      return a1;
    }
    sub_1000E0D44();
    sub_100024A30();
    uint64_t v7 = 0;
    *(void *)uint64_t v13 = 200;
    char v14 = 1;
  }
  else
  {
    sub_1000E0D44();
    sub_100024A30();
    char v14 = 0;
    *(void *)uint64_t v13 = v5;
  }
  *(void *)(v13 + 8) = v7;
  *(unsigned char *)(v13 + 16) = v14;
  swift_willThrow();
  return a1;
}

uint64_t sub_1000C2184(void *a1)
{
  BOOL v2 = self;
  sub_100016640();
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  v13[0] = 0;
  id v4 = [v2 JSONObjectWithData:isa options:0 error:v13];

  if (!v4)
  {
    id v9 = v13[0];
    _convertNSErrorToError(_:)();

LABEL_6:
    swift_willThrow();
    return sub_10002A494();
  }
  id v5 = v13[0];
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  sub_10002572C(&qword_100219EE0);
  if ((swift_dynamicCast() & 1) == 0)
  {
    sub_1000E0D44();
    uint64_t v10 = sub_100024A30();
    sub_1000E30B4(v10, v11);
    goto LABEL_6;
  }
  id v6 = a1;
  uint64_t v7 = sub_100016640();
  sub_100027BCC(v7, v8);
  return sub_10002A494();
}

uint64_t sub_1000C22F4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  type metadata accessor for Apple_Parsec_Search_V2_SearchResponse.StatusCode();
  sub_100020C48();
  __chkstk_darwin(v7);
  type metadata accessor for Apple_Parsec_Search_V2_SearchResponse();
  sub_100020C48();
  uint64_t v64 = v8;
  __chkstk_darwin(v9);
  sub_100028CA0();
  sub_1000BDE98(a5, &v62);
  if (!v63)
  {
    sub_100019994((uint64_t)&v62, (uint64_t *)&unk_10021BB30);
    goto LABEL_6;
  }
  sub_100023FA0(0, &qword_10021DDA0);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_6:
    sub_1000E0D44();
    uint64_t v13 = sub_100024A30();
    sub_1000E30B4(v13, v14);
    swift_willThrow();
    return sub_10002EF04();
  }
  Apple_Parsec_Search_V2_SearchResponse.init()();
  id v10 = objc_msgSend(v61, "__swift_objectForKeyedSubscript:", _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
  swift_unknownObjectRelease();
  if (v10)
  {
    _bridgeAnyObjectToAny(_:)();
    uint64_t v11 = swift_unknownObjectRelease();
  }
  else
  {
    sub_1000E239C();
  }
  sub_1000E22D0(v11, v12, (uint64_t *)&unk_10021BB30);
  if (v63)
  {
    if (sub_100026324())
    {
      BOOL v15 = v59 == 19279 && v60 == 0xE200000000000000;
      if (!v15 && (sub_1000E2860() & 1) == 0)
      {
        BOOL v16 = v59 == 0x524F525245 && v60 == 0xE500000000000000;
        if (!v16 && (sub_1000E2860() & 1) == 0)
        {
          if (v59 == 0x4C555345525F4F4ELL && v60 == 0xEA00000000005354)
          {
            swift_bridgeObjectRelease();
          }
          else
          {
            char v52 = sub_1000E2860();
            swift_bridgeObjectRelease();
            if ((v52 & 1) == 0) {
              goto LABEL_25;
            }
          }
          uint64_t v53 = sub_1000E21D0();
          v54(v53);
          Apple_Parsec_Search_V2_SearchResponse.status.setter();
          if (qword_100218B70 != -1) {
            swift_once();
          }
          uint64_t v55 = type metadata accessor for Logger();
          sub_10002A10C(v55, (uint64_t)qword_100236A68);
          id v19 = Logger.logObject.getter();
          os_log_type_t v56 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v19, v56))
          {
            uint64_t v57 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v57 = 0;
            _os_log_impl((void *)&_mh_execute_header, v19, v56, "Response status: No results", v57, 2u);
            swift_slowDealloc();
          }

          goto LABEL_26;
        }
      }
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    sub_100019994((uint64_t)&v62, (uint64_t *)&unk_10021BB30);
  }
LABEL_25:
  uint64_t v17 = sub_1000E21D0();
  v18(v17);
  id v19 = v5;
  Apple_Parsec_Search_V2_SearchResponse.status.setter();
LABEL_26:
  uint64_t v20 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  id v21 = sub_1000298F8(v20);
  sub_1000E2684();
  if (v19)
  {
    sub_1000E25A0();
    uint64_t v22 = swift_unknownObjectRelease();
  }
  else
  {
    sub_1000E239C();
  }
  sub_1000E22D0(v22, v23, (uint64_t *)&unk_10021BB30);
  if (v63)
  {
    if (sub_100026324())
    {
      id v19 = v5;
      Apple_Parsec_Search_V2_SearchResponse.query.setter();
    }
  }
  else
  {
    sub_100019994((uint64_t)&v62, (uint64_t *)&unk_10021BB30);
  }
  uint64_t v24 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  id v25 = sub_1000298F8(v24);
  sub_1000E2684();
  if (v19)
  {
    sub_1000E25A0();
    uint64_t v26 = swift_unknownObjectRelease();
  }
  else
  {
    sub_1000E239C();
  }
  sub_1000E22D0(v26, v27, (uint64_t *)&unk_10021BB30);
  if (v63)
  {
    if (sub_100026324())
    {
      id v19 = v5;
      Apple_Parsec_Search_V2_SearchResponse.maxAgeSeconds.setter();
    }
  }
  else
  {
    sub_100019994((uint64_t)&v62, (uint64_t *)&unk_10021BB30);
  }
  uint64_t v28 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  id v29 = sub_1000298F8(v28);
  sub_1000E2684();
  if (v19)
  {
    sub_1000E25A0();
    uint64_t v30 = swift_unknownObjectRelease();
  }
  else
  {
    sub_1000E239C();
  }
  sub_1000E22D0(v30, v31, (uint64_t *)&unk_10021BB30);
  if (v63)
  {
    if (sub_100026324())
    {
      id v19 = Data.init(base64Encoded:options:)();
      unint64_t v33 = v32;
      swift_bridgeObjectRelease();
      if (v33 >> 60 != 15)
      {
        sub_10002E854();
        id v19 = v5;
        Apple_Parsec_Search_V2_SearchResponse.feedback.setter();
      }
    }
  }
  else
  {
    sub_100019994((uint64_t)&v62, (uint64_t *)&unk_10021BB30);
  }
  uint64_t v34 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  id v35 = sub_1000298F8(v34);
  sub_1000E2684();
  if (v19)
  {
    sub_1000E25A0();
    uint64_t v36 = swift_unknownObjectRelease();
  }
  else
  {
    sub_1000E239C();
  }
  sub_1000E22D0(v36, v37, (uint64_t *)&unk_10021BB30);
  if (v63)
  {
    if (sub_100026324())
    {
      id v19 = v5;
      Apple_Parsec_Search_V2_SearchResponse.partialClientAddress.setter();
    }
  }
  else
  {
    sub_100019994((uint64_t)&v62, (uint64_t *)&unk_10021BB30);
  }
  uint64_t v38 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  id v39 = sub_1000298F8(v38);
  sub_1000E2684();
  if (v19)
  {
    sub_1000E25A0();
    uint64_t v40 = swift_unknownObjectRelease();
  }
  else
  {
    sub_1000E239C();
  }
  sub_1000E22D0(v40, v41, (uint64_t *)&unk_10021BB30);
  if (v63)
  {
    if (sub_100026324())
    {
      id v19 = v5;
      Apple_Parsec_Search_V2_SearchResponse.millisecondDuration.setter();
    }
  }
  else
  {
    sub_100019994((uint64_t)&v62, (uint64_t *)&unk_10021BB30);
  }
  uint64_t v42 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  id v43 = sub_1000298F8(v42);
  sub_1000E2684();
  if (v19)
  {
    sub_1000E25A0();
    uint64_t v44 = swift_unknownObjectRelease();
  }
  else
  {
    sub_1000E239C();
  }
  sub_1000E22D0(v44, v45, (uint64_t *)&unk_10021BB30);
  if (v63)
  {
    if (sub_100026324()) {
      Apple_Parsec_Search_V2_SearchResponse.completionScore.setter();
    }
  }
  else
  {

    sub_100019994((uint64_t)&v62, (uint64_t *)&unk_10021BB30);
  }
  sub_100021CF0();
  v46();
  id v47 = a2;
  uint64_t v48 = sub_10002A494();
  sub_100027BCC(v48, v49);
  return sub_10002EF04();
}

id sub_1000C2B30(char *a1, void *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v47 = a8;
  uint64_t v53 = a2;
  uint64_t v54 = a5;
  char v52 = a1;
  uint64_t v15 = type metadata accessor for Apple_Parsec_Search_V2_SearchResponse();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v48 = (char *)&v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for URLRequest();
  uint64_t v44 = *(void *)(v18 - 8);
  uint64_t v45 = v18;
  __chkstk_darwin(v18);
  uint64_t v46 = (char *)&v39 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for Apple_Parsec_Search_V2_SearchResponse.StatusCode();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v39 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  uint64_t v26 = (char *)&v39 - v25;
  uint64_t v49 = a6;
  uint64_t v50 = a7;
  if (String.count.getter() < 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v52, v54, v15);
  }
  else
  {
    uint64_t v42 = v15;
    unint64_t v43 = a4;
    uint64_t v51 = a3;
    uint64_t v27 = v54;
    Apple_Parsec_Search_V2_SearchResponse.status.getter();
    (*(void (**)(char *, void, uint64_t))(v21 + 104))(v24, enum case for Apple_Parsec_Search_V2_SearchResponse.StatusCode.statusError(_:), v20);
    sub_10003233C(&qword_10021DD98, (void (*)(uint64_t))&type metadata accessor for Apple_Parsec_Search_V2_SearchResponse.StatusCode);
    char v28 = dispatch thunk of static Equatable.== infix(_:_:)();
    id v29 = *(void (**)(char *, uint64_t))(v21 + 8);
    v29(v24, v20);
    v29(v26, v20);
    if (v28)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v52, v27, v42);
      a4 = v43;
    }
    else
    {
      uint64_t v40 = a9;
      uint64_t v41 = a11;
      type metadata accessor for CachedResultSet(0);
      uint64_t v30 = (uint64_t)v46;
      (*(void (**)(char *, uint64_t, uint64_t))(v44 + 16))(v46, v47, v45);
      uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
      uint64_t v32 = (uint64_t)v48;
      uint64_t v33 = v42;
      v31(v48, v27, v42);
      uint64_t v34 = v50;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v35 = v51;
      a4 = v43;
      sub_100027BCC(v51, v43);
      uint64_t v36 = sub_10010B540(v49, v34, v30, v32, v40, a10, v35, a4);
      if (*(void *)(*(void *)(v41 + 64) + 32))
      {
        swift_retain();
        sub_1000F0DF8(v36);
        swift_release();
      }
      swift_release();
      v31(v52, v54, v33);
    }
    a3 = v51;
  }
  uint64_t v37 = v53;
  sub_100027BCC(a3, a4);
  return v37;
}

id sub_1000C2F50(char *a1, void *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v27 = a8;
  uint64_t v28 = a6;
  id v29 = a1;
  uint64_t v25 = a5;
  uint64_t v26 = a9;
  uint64_t v14 = sub_10002572C(&qword_10021DBC0);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for Apple_Parsec_Search_V2_SearchResponse();
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v17 - 8) + 16);
  v18(v16, a5, v17);
  sub_10002538C((uint64_t)v16, 0, 1, v17);
  uint64_t v19 = Data.count.getter();
  uint64_t v20 = a2;
  id v21 = [a2 statusCode];
  swift_getObjectType();
  sub_1000DEE88(a7, (uint64_t)v16, v19, (uint64_t)v21, v27, v26, v28);
  sub_100019994((uint64_t)v16, &qword_10021DBC0);
  v18(v29, v25, v17);
  id v22 = v20;
  sub_100027BCC(a3, a4);
  return v22;
}

uint64_t sub_1000C30EC(void *a1)
{
  uint64_t v11 = a1;
  uint64_t v12 = 0;
  swift_errorRetain();
  swift_errorRetain();
  sub_10002572C(&qword_10021B3C0);
  if (swift_dynamicCast() && !v10)
  {
    uint64_t v12 = v9[0];
    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRetain();
    if (swift_dynamicCast())
    {
      if (v10 == 1)
      {
        swift_errorRelease();
        uint64_t v11 = v9[0];
        swift_errorRelease();
        goto LABEL_10;
      }
      sub_1000B8FBC(v9[0], (uint64_t)v9[1], 0);
    }
    swift_errorRelease();
    uint64_t v1 = _convertErrorToNSError(_:)();
    swift_errorRelease();
    uint64_t v11 = (void *)v1;
  }
LABEL_10:
  swift_errorRetain();
  swift_errorRetain();
  BOOL v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    v9[0] = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 134218754;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 12) = 2050;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 22) = 2050;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 32) = 2082;
    swift_errorRetain();
    uint64_t v5 = String.init<A>(describing:)();
    sub_10001C274(v5, v6, (uint64_t *)v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "failed with HTTP status code %ld performing query %{public}llu requestId: %{public}llu error %{public}s", (uint8_t *)v4, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }
  swift_beginAccess();
  swift_errorRetain();
  uint64_t v7 = (void *)_convertErrorToNSError(_:)();
  swift_errorRelease();
  swift_beginAccess();
  sub_1000C34A0();

  sub_10002572C(&qword_10021DD20);
  return Just.init(_:)();
}

void sub_1000C34A0()
{
  sub_10000DFE0();
  uint64_t v4 = v0;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v36 = v9;
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  uint64_t v14 = sub_10002572C(&qword_10021DBC0);
  uint64_t v15 = sub_100016544(v14);
  __chkstk_darwin(v15);
  sub_100017DE0();
  uint64_t v16 = sub_10002572C(&qword_10021BF30);
  uint64_t v17 = sub_100016544(v16);
  __chkstk_darwin(v17);
  uint64_t v18 = sub_10002EF30();
  sub_100020C48();
  uint64_t v20 = v19;
  __chkstk_darwin(v21);
  sub_100016550();
  if (v13)
  {
    uint64_t v34 = v8;
    uint64_t v35 = v6;
    id v22 = objc_allocWithZone((Class)_CPErrorFeedback);
    id v33 = v13;
    id v23 = sub_100083BF8((uint64_t)v13);
    id v24 = objc_allocWithZone((Class)_CPFeedbackPayload);
    swift_unknownObjectRetain();
    id v25 = [v24 initWithCodable:v23];
    [v25 setQueryId:v11];
    sub_10001DAF4((uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__userAgent, (void (*)(uint64_t))sub_10002A280);
    uint64_t v26 = sub_1000E27AC();
    sub_1000184F4(v26, v27, v18);
    if (v28)
    {
      parsecdUserAgent.getter();
      sub_100019994(v2, &qword_10021BF30);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 32))(v1, v2, v18);
    }
    sub_10002A494();
    sub_1000148D0();
    swift_unknownObjectRelease();

    sub_100028214();
    v29();
    uint64_t v30 = type metadata accessor for Apple_Parsec_Search_V2_SearchResponse();
    sub_10002538C(v3, 1, 1, v30);
    swift_getObjectType();
    uint64_t v31 = sub_1000E269C();
    sub_1000DEE88(v31, v32, v36, v34, v35, v11, v4);

    sub_100019994(v3, &qword_10021DBC0);
  }
  sub_10000DFB8();
}

id sub_1000C370C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v9 = [objc_allocWithZone((Class)PARReply) init];
  [a5 scale];
  objc_msgSend(v9, "setScale:");
  if ([a5 verboseReply])
  {
    Class isa = URLRequest._bridgeToObjectiveC()().super.isa;
    [v9 setHttpRequest:isa];

    [v9 setHttpResponse:a1];
  }
  sub_1000CCEBC(a2, a3, v9);
  return v9;
}

void sub_1000C37E8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v9 = objc_allocWithZone((Class)_CPSkipSearchFeedback);
  swift_bridgeObjectRetain();
  id v12 = sub_1000CC200(4, a2, a3);
  swift_unknownObjectRetain();
  id v10 = [a1 queryId];
  id v11 = [objc_allocWithZone((Class)_CPFeedbackPayload) initWithCodable:v12];
  [v11 setQueryId:v10];
  sub_100023D58();
  sub_1000148D0();
  swift_unknownObjectRelease();

  *(unsigned char *)(a5 + qword_10021B6C8) = 1;
  sub_100011708();
}

uint64_t sub_1000C38FC()
{
  [v0 nwActivityLabel];
  uint64_t v1 = nw_activity_create();
  if ([v0 nwActivity])
  {
    sub_100027EA8();
    nw_activity_set_parent_activity();
    swift_unknownObjectRelease();
  }
  nw_activity_activate();
  return v1;
}

uint64_t sub_1000C3974@<X0>(void *a1@<X0>, uint64_t (*a2)(void, void, void)@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = a2(*a1, a1[1], a1[2]);
  *a3 = result;
  a3[1] = v5;
  a3[2] = v6;
  return result;
}

uint64_t sub_1000C39B8@<X0>(void *a1@<X0>, uint64_t (*a2)(void, void, void)@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = a2(*a1, a1[1], a1[2]);
  if (!v3)
  {
    *a3 = result;
    a3[1] = v6;
    a3[2] = v7;
  }
  return result;
}

uint64_t sub_1000C3A00@<X0>(void *a1@<X0>, uint64_t (*a2)(void, void, void)@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = a2(*a1, a1[1], a1[2]);
  if (!v3)
  {
    *a3 = result;
    a3[1] = v6;
    a3[2] = v7;
    a3[3] = v8;
  }
  return result;
}

uint64_t sub_1000C3A48@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(char *, uint64_t, uint64_t, uint64_t, uint64_t)@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  uint64_t v8 = a1[2];
  uint64_t v9 = a1[3];
  uint64_t v10 = sub_10002572C(&qword_10021DCB8);
  uint64_t result = a2((char *)a3 + *(int *)(v10 + 64), v6, v7, v8, v9);
  if (!v3)
  {
    *a3 = result;
    a3[1] = v12;
    a3[2] = v13;
  }
  return result;
}

uint64_t sub_1000C3AD0@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(char *, uint64_t, uint64_t, uint64_t, char *)@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  uint64_t v9 = a1[2];
  uint64_t v10 = sub_10002572C(&qword_10021DCB8);
  uint64_t result = a2((char *)a3 + *(int *)(v10 + 64), v7, v8, v9, (char *)a1 + *(int *)(v10 + 64));
  if (!v3)
  {
    *a3 = result;
    a3[1] = v12;
    a3[2] = v13;
  }
  return result;
}

uint64_t sub_1000C3B5C@<X0>(char *a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, char *)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *((void *)a1 + 1);
  uint64_t v9 = *((void *)a1 + 2);
  uint64_t v10 = sub_10002572C(&qword_10021DCB8);
  uint64_t result = a2(v7, v8, v9, &a1[*(int *)(v10 + 64)]);
  if (!v3)
  {
    *(void *)a3 = result;
    *(unsigned char *)(a3 + 8) = v12 & 1;
  }
  return result;
}

id sub_1000C3BE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void **)a1;
  if (*(unsigned char *)(a1 + 8))
  {
    swift_errorRetain();
    sub_10002572C(&qword_10021B3C0);
    return (id)swift_willThrowTypedImpl();
  }
  else
  {
    *(void *)a2 = v2;
    *(unsigned char *)(a2 + 8) = 0;
    return v2;
  }
}

uint64_t sub_1000C3C60(char *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v67 = a7;
  uint64_t v75 = a6;
  uint64_t v64 = a5;
  uint64_t v65 = a3;
  uint64_t v80 = 0;
  uint64_t v9 = type metadata accessor for Apple_Parsec_Feedback_V2_EndpointType();
  uint64_t v72 = *(void *)(v9 - 8);
  uint64_t v73 = v9;
  __chkstk_darwin(v9);
  uint64_t v74 = (char *)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = type metadata accessor for Apple_Parsec_Feedback_V2_SearchType();
  uint64_t v69 = *(void *)(v71 - 8);
  __chkstk_darwin(v71);
  uint64_t v70 = (char *)&v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10002572C(&qword_10021DD90);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v61 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for Apple_Parsec_Feedback_V2_TriggerSearchRequestEvent();
  uint64_t v68 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v61 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_10002572C((uint64_t *)&unk_10021DC20);
  uint64_t v19 = __chkstk_darwin(v18 - 8);
  uint64_t v21 = (char *)&v61 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  id v23 = (char *)&v61 - v22;
  uint64_t v24 = type metadata accessor for Apple_Parsec_Feedback_V2_FeedbackPayload();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v78 = (char *)&v61 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  id v29 = (char *)&v61 - v28;
  uint64_t v79 = v25;
  uint64_t v30 = *(void (**)(char *, char *, uint64_t))(v25 + 16);
  uint64_t v66 = a1;
  unint64_t v77 = v30;
  v30((char *)&v61 - v28, a1, v24);
  id v76 = a2;
  [a2 queryId];
  Apple_Parsec_Feedback_V2_FeedbackPayload.queryID.setter();
  Apple_Parsec_Feedback_V2_FeedbackPayload.containedFeedback.getter();
  uint64_t v31 = type metadata accessor for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback();
  if (sub_100027BA4((uint64_t)v23, 1, v31) == 1)
  {
    uint64_t v32 = v80;
    id v33 = v77;
    uint64_t v34 = v78;
    goto LABEL_17;
  }
  sub_10002B9E8((uint64_t)v23, (uint64_t)v21, (uint64_t *)&unk_10021DC20);
  uint64_t v63 = *(void *)(v31 - 8);
  int v35 = (*(uint64_t (**)(char *, uint64_t))(v63 + 88))(v21, v31);
  if (v35 == enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.startNetworkSearchFeedback(_:))
  {
    uint64_t result = (uint64_t)[v76 triggerEvent];
    if (result < 0)
    {
      __break(1u);
      return result;
    }
    Apple_Parsec_Feedback_V2_TriggerSearchRequestEvent.init(rawValue:)();
    int v37 = sub_100027BA4((uint64_t)v14, 1, v15);
    uint64_t v34 = v78;
    uint64_t v62 = v31;
    id v61 = v21;
    if (v37 == 1)
    {
      (*(void (**)(char *, void, uint64_t))(v68 + 104))(v17, enum case for Apple_Parsec_Feedback_V2_TriggerSearchRequestEvent.unknown(_:), v15);
      sub_100019994((uint64_t)v14, &qword_10021DD90);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v68 + 32))(v17, v14, v15);
    }
    uint64_t v42 = (void (*)(unsigned char *, void))Apple_Parsec_Feedback_V2_FeedbackPayload.startNetworkSearchFeedback.modify();
    Apple_Parsec_Feedback_V2_StartNetworkSearchFeedback.triggerEvent.setter();
    v42(v81, 0);
    id v43 = v76;
    id v44 = [v76 triggerEvent];
    uint64_t v45 = (unsigned int *)&enum case for Apple_Parsec_Feedback_V2_SearchType.committed(_:);
    if (v44 != (id)23) {
      uint64_t v45 = (unsigned int *)&enum case for Apple_Parsec_Feedback_V2_SearchType.asYouType(_:);
    }
    (*(void (**)(char *, void, uint64_t))(v69 + 104))(v70, *v45, v71);
    uint64_t v46 = (void (*)(unsigned char *, void))Apple_Parsec_Feedback_V2_FeedbackPayload.startNetworkSearchFeedback.modify();
    Apple_Parsec_Feedback_V2_StartNetworkSearchFeedback.searchType.setter();
    v46(v81, 0);
    id v47 = [v43 queryString];
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v48 = (void (*)(unsigned char *, void))Apple_Parsec_Feedback_V2_FeedbackPayload.startNetworkSearchFeedback.modify();
    Apple_Parsec_Feedback_V2_StartNetworkSearchFeedback.input.setter();
    v48(v81, 0);
    (*(void (**)(char *, void, uint64_t))(v72 + 104))(v74, enum case for Apple_Parsec_Feedback_V2_EndpointType.parsecSearch(_:), v73);
    uint64_t v49 = (void (*)(unsigned char *, void))Apple_Parsec_Feedback_V2_FeedbackPayload.startNetworkSearchFeedback.modify();
    Apple_Parsec_Feedback_V2_StartNetworkSearchFeedback.endpoint.setter();
    v49(v81, 0);
    uint64_t v32 = v80;
    uint64_t v21 = v61;
    goto LABEL_15;
  }
  if (v35 == enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.endNetworkSearchFeedback(_:))
  {
    uint64_t v62 = v31;
    (*(void (**)(char *, void, uint64_t))(v72 + 104))(v74, enum case for Apple_Parsec_Feedback_V2_EndpointType.parsecSearch(_:), v73);
    uint64_t v38 = (void (*)(unsigned char *, void))Apple_Parsec_Feedback_V2_FeedbackPayload.endNetworkSearchFeedback.modify();
    Apple_Parsec_Feedback_V2_EndNetworkSearchFeedback.endpointType.setter();
    v38(v81, 0);
    sub_100099970();
    sub_10003233C(&qword_100219EB0, (void (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_FeedbackPayload);
    uint64_t v39 = v80;
    uint64_t v40 = Message.serializedData(partial:)();
    uint64_t v34 = v78;
    if (v39)
    {
      swift_errorRelease();
      uint64_t v32 = 0;
    }
    else
    {
      uint64_t v58 = v40;
      unint64_t v59 = v41;
      Data.base64EncodedString(options:)(0);
      uint64_t v80 = 0;
      sub_1000291B4(v58, v59);
      uint64_t v60 = (void (*)(unsigned char *, void))Apple_Parsec_Feedback_V2_FeedbackPayload.endNetworkSearchFeedback.modify();
      uint64_t v32 = v80;
      Apple_Parsec_Feedback_V2_EndNetworkSearchFeedback.fbq.setter();
      v60(v81, 0);
    }
LABEL_15:
    id v33 = v77;
    uint64_t v31 = v62;
    goto LABEL_16;
  }
  uint64_t v32 = v80;
  id v33 = v77;
  uint64_t v34 = v78;
LABEL_16:
  (*(void (**)(char *, uint64_t))(v63 + 8))(v21, v31);
LABEL_17:
  sub_100019994((uint64_t)v23, (uint64_t *)&unk_10021DC20);
  v33(v34, v29, v24);
  sub_10003233C(&qword_100219EB0, (void (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_FeedbackPayload);
  uint64_t v50 = Message.serializedData(partial:)();
  if (v32)
  {
    swift_errorRelease();
    char v52 = *(void (**)(char *, uint64_t))(v79 + 8);
    v52(v34, v24);
    return ((uint64_t (*)(char *, uint64_t))v52)(v29, v24);
  }
  else
  {
    uint64_t v53 = v50;
    unint64_t v54 = v51;
    uint64_t v55 = *(void (**)(char *, uint64_t))(v79 + 8);
    v55(v34, v24);
    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      id v56 = objc_allocWithZone((Class)_CPFeedbackPayload);
      swift_unknownObjectRetain();
      sub_100027BCC(v53, v54);
      id v57 = sub_100005914(v53, v54);
      sub_1000148D0();
      swift_release();
      swift_unknownObjectRelease();

      sub_1000291B4(v53, v54);
      return ((uint64_t (*)(char *, uint64_t))v55)(v29, v24);
    }
    else
    {
      v55(v29, v24);
      return sub_1000291B4(v53, v54);
    }
  }
}

uint64_t sub_1000C45B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 112) = v18;
  *(_OWORD *)(v8 + 80) = v16;
  *(_OWORD *)(v8 + 96) = v17;
  *(void *)(v8 + 64) = a7;
  *(void *)(v8 + 72) = a8;
  *(void *)(v8 + 48) = a5;
  *(void *)(v8 + 56) = a6;
  *(void *)(v8 + 40) = a4;
  uint64_t v9 = type metadata accessor for BinaryEncodingError();
  *(void *)(v8 + 120) = v9;
  *(void *)(v8 + 128) = *(void *)(v9 - 8);
  *(void *)(v8 + 136) = swift_task_alloc();
  *(void *)(v8 + 144) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Apple_Parsec_Search_StatusCode();
  *(void *)(v8 + 152) = v10;
  *(void *)(v8 + 160) = *(void *)(v10 - 8);
  *(void *)(v8 + 168) = swift_task_alloc();
  uint64_t v11 = type metadata accessor for UUID();
  *(void *)(v8 + 176) = v11;
  *(void *)(v8 + 184) = *(void *)(v11 - 8);
  *(void *)(v8 + 192) = swift_task_alloc();
  uint64_t v12 = type metadata accessor for URLRequest();
  *(void *)(v8 + 200) = v12;
  *(void *)(v8 + 208) = *(void *)(v12 - 8);
  *(void *)(v8 + 216) = swift_task_alloc();
  uint64_t v13 = type metadata accessor for Apple_Parsec_Safari_V1alpha_SafariSearchResponse();
  *(void *)(v8 + 224) = v13;
  *(void *)(v8 + 232) = *(void *)(v13 - 8);
  *(void *)(v8 + 240) = swift_task_alloc();
  *(void *)(v8 + 248) = swift_task_alloc();
  return _swift_task_switch(sub_1000C4824, 0, 0);
}

uint64_t sub_1000C4824(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24)
{
  sub_1000E2704();
  a23 = v25;
  a24 = v26;
  sub_1000E2D3C();
  a22 = v24;
  if (qword_100218AE8 != -1) {
    swift_once();
  }
  uint64_t v27 = (void *)v24[5];
  uint64_t v28 = type metadata accessor for Logger();
  os_log_type_t v29 = sub_10002A10C(v28, (uint64_t)qword_1002368D0);
  id v30 = v27;
  swift_bridgeObjectRetain_n();
  id v31 = v30;
  uint64_t v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.info.getter();
  BOOL v34 = sub_100017D10(v33);
  unint64_t v35 = v24[7];
  if (v34)
  {
    uint64_t v36 = (void *)v24[5];
    a10 = v24 + 3;
    a11 = v24[6];
    uint64_t v37 = sub_10001D784();
    a12 = sub_10001AB54();
    a13 = a12;
    *(_DWORD *)uint64_t v37 = 134349315;
    id v38 = [v36 queryId];

    v24[3] = v38;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    *(_WORD *)(v37 + 12) = 2085;
    swift_bridgeObjectRetain();
    v24[4] = sub_10001C274(a11, v35, &a13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    sub_1000E2C4C((void *)&_mh_execute_header, v32, v29, "performing safari search over gRPC qid: %{public}llu query: %{sensitive}s");
    swift_arrayDestroy();
    sub_100017D40();
    sub_100017D40();
  }
  else
  {
    uint64_t v39 = (void *)v24[5];

    swift_bridgeObjectRelease_n();
  }

  sub_1000E2CE8();
  sub_1000E2F6C();
  v24[32] = v40;
  *uint64_t v40 = v41;
  v40[1] = sub_1000C4A5C;
  sub_1000E20D4();
  return v44(v42, v43, v44, v45, v46, v47, v48, v49, a9, a10, a11, a12, a13, a14, a15, a16);
}

uint64_t sub_1000C4A5C()
{
  sub_100023C50();
  sub_100026880();
  uint64_t v2 = *v1;
  sub_10001DD38();
  void *v3 = v2;
  *(void *)(v4 + 264) = v0;
  swift_task_dealloc();
  sub_100026FC8();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_1000C4B3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void (*a15)(id, void, id), uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  sub_1000E2720();
  uint64_t v25 = *(void *)(v22 + 264);
  id v26 = [objc_allocWithZone((Class)PARReply) init];
  sub_10003233C(&qword_10021DD80, (void (*)(uint64_t))&type metadata accessor for Apple_Parsec_Safari_V1alpha_SafariSearchResponse);
  uint64_t v27 = Message.serializedData(partial:)();
  if (v25)
  {
    sub_100024400();
    v29();

    *(void *)(v22 + 16) = v25;
    swift_errorRetain();
    sub_10002572C(&qword_10021B3C0);
    sub_100027EA8();
    if (swift_dynamicCast())
    {
      sub_1000E2C9C();
      swift_errorRelease();
      sub_1000E269C();
      sub_10000E0F4();
      v30();
      *(unsigned char *)(v22 + 16 + qword_10021B6C8) = 18;
      sub_100011708();
      [v23 queryId];
      sub_10003233C(&qword_10021DD78, (void (*)(uint64_t))&type metadata accessor for BinaryEncodingError);
      uint64_t v31 = sub_100024A30();
      sub_100016608();
      v32();
      sub_100030D6C(v31);
      swift_errorRelease();
      uint64_t v33 = sub_1000E2B2C();
      v24(v33);
      swift_errorRelease();
      sub_100027EC0();
      v34();
    }
    else
    {
      uint64_t v45 = *(void (**)(uint64_t, void, id))(v22 + 88);
      uint64_t v46 = *(void *)(v22 + 80);
      uint64_t v47 = *(void **)(v22 + 40);
      swift_errorRelease();
      *(unsigned char *)(v46 + qword_10021B6C8) = 48;
      sub_100011708();
      [v47 queryId];
      sub_1000E246C();
      id v48 = sub_100030D6C(v25);
      swift_errorRelease();
      v45(v46, 0, v48);
      swift_errorRelease();
    }
    swift_errorRelease();
  }
  else
  {
    uint64_t v35 = v27;
    unint64_t v36 = v28;
    if (sub_10003014C(v27, v28))
    {
      a17 = *(void *)(v22 + 232);
      a18 = *(void *)(v22 + 224);
      a15 = *(void (**)(id, void, id))(v22 + 88);
      a16 = *(void *)(v22 + 96);
      uint64_t v37 = *(void **)(v22 + 40);
      *(unsigned char *)(*(void *)(v22 + 80) + qword_10021B6C8) = 20;
      sub_100011708();
      id v38 = [v37 queryId];
      Apple_Parsec_Safari_V1alpha_SafariSearchResponse.status.getter();
      uint64_t v39 = Apple_Parsec_Search_StatusCode.rawValue.getter();
      sub_100028214();
      v40();
      sub_1000E0D44();
      uint64_t v41 = sub_100024A30();
      *(void *)uint64_t v42 = v39;
      *(void *)(v42 + 8) = 0;
      *(unsigned char *)(v42 + 16) = 1;
      id v43 = sub_100030D6C(v41);
      swift_errorRelease();
      a15(v38, 0, v43);
      swift_errorRelease();

      sub_1000291B4(v35, v36);
      sub_10000E040();
      v44();
    }
    else
    {
      uint64_t v49 = *(void *)(v22 + 232);
      a12 = *(void *)(v22 + 240);
      a13 = *(void *)(v22 + 224);
      a14 = *(void *)(v22 + 216);
      a15 = *(void (**)(id, void, id))(v22 + 176);
      a10 = *(void *)(v22 + 200);
      a11 = *(void *)(v22 + 56);
      uint64_t v68 = *(void *)(v22 + 48);
      uint64_t v69 = *(void *)(v22 + 112);
      a9 = *(void *)(v22 + 248);
      sub_1000CCEBC(v35, v36, v26);
      type metadata accessor for CachedResultSet(0);
      sub_100025A60();
      v50();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v49 + 16))(a12, a9, a13);
      swift_bridgeObjectRetain();
      UUID.init()();
      uint64_t v51 = UUID.uuidString.getter();
      uint64_t v53 = v52;
      sub_100028214();
      v54();
      sub_1000E2220();
      uint64_t v55 = sub_10010B588(v68, a11, a14, a12, v51, v53, v35, v36);
      if (*(void *)(*(void *)(v69 + 64) + 32))
      {
        swift_retain();
        sub_1000F0DF8(v55);
        swift_release();
      }
      uint64_t v56 = *(void *)(v22 + 232);
      a17 = *(void *)(v22 + 224);
      a18 = *(void *)(v22 + 248);
      a16 = v55;
      id v57 = *(void (**)(void))(v22 + 88);
      [*(id *)(v22 + 40) queryId];
      id v58 = v26;
      sub_1000E24C8();
      v57();

      sub_1000E2BD8(qword_10021B6C8);
      swift_release();

      sub_1000291B4(v35, v36);
      (*(void (**)(uint64_t, uint64_t))(v56 + 8))(a18, a17);
    }
  }
  sub_1000E2770();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_100017DBC();
  sub_1000E2754();
  return v60(v59, v60, v61, v62, v63, v64, v65, v66, a9, a10, a11, a12, a13, a14, (void (*)(void, void, void))a15, a16, a17, a18, a19,
           a20,
           a21,
           a22);
}

uint64_t sub_1000C509C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_1000E26E8();
  sub_1000E2BCC();
  uint64_t v15 = v12[33];
  v12[2] = v15;
  swift_errorRetain();
  sub_10002572C(&qword_10021B3C0);
  if (swift_dynamicCast())
  {
    sub_1000E2C9C();
    swift_errorRelease();
    sub_1000E29B0();
    sub_10000E0F4();
    v16();
    *((unsigned char *)v12 + qword_10021B6C8 + 16) = 18;
    sub_100011708();
    [v13 queryId];
    sub_10003233C(&qword_10021DD78, (void (*)(uint64_t))&type metadata accessor for BinaryEncodingError);
    uint64_t v17 = sub_100024A30();
    sub_100016608();
    v18();
    sub_100030D6C(v17);
    swift_errorRelease();
    uint64_t v19 = sub_1000E2B2C();
    v14(v19);
    swift_errorRelease();
    sub_10002ECB8();
    sub_100027EC0();
    v20();
  }
  else
  {
    uint64_t v21 = (void (*)(id, void, id))v12[11];
    uint64_t v22 = v12[10];
    id v23 = (void *)v12[5];
    swift_errorRelease();
    *(unsigned char *)(v22 + qword_10021B6C8) = 48;
    sub_100011708();
    id v24 = [v23 queryId];
    swift_errorRetain();
    id v25 = sub_100030D6C(v15);
    swift_errorRelease();
    v21(v24, 0, v25);
    swift_errorRelease();
  }
  swift_errorRelease();
  sub_1000E2770();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_100017DBC();
  sub_1000E21F8();
  return v27(v26, v27, v28, v29, v30, v31, v32, v33, a9, a10, a11, a12);
}

uint64_t sub_1000C52D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void))
{
  return sub_1000C78E0();
}

uint64_t sub_1000C5330(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v52 = a8;
  uint64_t v42 = a7;
  uint64_t v43 = a5;
  uint64_t v47 = a3;
  uint64_t v48 = a4;
  uint64_t v10 = type metadata accessor for Apple_Parsec_Feedback_V2_EndpointType();
  uint64_t v49 = *(void *)(v10 - 8);
  uint64_t v50 = (void (*)(unsigned char *, void))v10;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = type metadata accessor for Apple_Parsec_Feedback_V2_SearchType();
  uint64_t v44 = *(void *)(v46 - 8);
  __chkstk_darwin(v46);
  uint64_t v45 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10002572C((uint64_t *)&unk_10021DC20);
  uint64_t v15 = __chkstk_darwin(v14 - 8);
  uint64_t v17 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v40 - v18;
  uint64_t v20 = type metadata accessor for Apple_Parsec_Feedback_V2_FeedbackPayload();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = __chkstk_darwin(v20);
  id v24 = (char *)&v40 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  uint64_t v26 = (char *)&v40 - v25;
  uint64_t v51 = *(void (**)(char *, uint64_t, uint64_t))(v21 + 16);
  v51((char *)&v40 - v25, a1, v20);
  [a2 queryId];
  Apple_Parsec_Feedback_V2_FeedbackPayload.queryID.setter();
  Apple_Parsec_Feedback_V2_FeedbackPayload.containedFeedback.getter();
  uint64_t v27 = type metadata accessor for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback();
  if (sub_100027BA4((uint64_t)v19, 1, v27) != 1)
  {
    uint64_t v41 = v12;
    sub_10002B9E8((uint64_t)v19, (uint64_t)v17, (uint64_t *)&unk_10021DC20);
    uint64_t v28 = *(void *)(v27 - 8);
    int v29 = (*(uint64_t (**)(char *, uint64_t))(v28 + 88))(v17, v27);
    if (v29 == enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.startNetworkSearchFeedback(_:))
    {
      uint64_t v43 = v28;
      swift_bridgeObjectRetain();
      uint64_t v40 = v17;
      uint64_t v30 = (void (*)(unsigned char *, void))Apple_Parsec_Feedback_V2_FeedbackPayload.startNetworkSearchFeedback.modify();
      Apple_Parsec_Feedback_V2_StartNetworkSearchFeedback.input.setter();
      v30(v53, 0);
      (*(void (**)(char *, void, uint64_t))(v44 + 104))(v45, enum case for Apple_Parsec_Feedback_V2_SearchType.committed(_:), v46);
      uint64_t v31 = (void (*)(unsigned char *, void))Apple_Parsec_Feedback_V2_FeedbackPayload.startNetworkSearchFeedback.modify();
      uint64_t v28 = v43;
      Apple_Parsec_Feedback_V2_StartNetworkSearchFeedback.searchType.setter();
      v31(v53, 0);
      (*(void (**)(char *, void, void (*)(unsigned char *, void)))(v49 + 104))(v41, enum case for Apple_Parsec_Feedback_V2_EndpointType.parsecCard(_:), v50);
      uint64_t v50 = (void (*)(unsigned char *, void))Apple_Parsec_Feedback_V2_FeedbackPayload.startNetworkSearchFeedback.modify();
      Apple_Parsec_Feedback_V2_StartNetworkSearchFeedback.endpoint.setter();
      uint64_t v17 = v40;
      v50(v53, 0);
    }
    else if (v29 == enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.endNetworkSearchFeedback(_:))
    {
      (*(void (**)(char *, void, void (*)(unsigned char *, void)))(v49 + 104))(v41, enum case for Apple_Parsec_Feedback_V2_EndpointType.parsecCard(_:), v50);
      uint64_t v40 = v17;
      uint64_t v32 = (void (*)(unsigned char *, void))Apple_Parsec_Feedback_V2_FeedbackPayload.endNetworkSearchFeedback.modify();
      Apple_Parsec_Feedback_V2_EndNetworkSearchFeedback.endpointType.setter();
      v32(v53, 0);
      sub_100099970();
      uint64_t v17 = v40;
    }
    (*(void (**)(char *, uint64_t))(v28 + 8))(v17, v27);
  }
  sub_100019994((uint64_t)v19, (uint64_t *)&unk_10021DC20);
  v51(v24, (uint64_t)v26, v20);
  sub_10003233C(&qword_100219EB0, (void (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_FeedbackPayload);
  swift_unknownObjectRetain();
  uint64_t v33 = Message.serializedData(partial:)();
  unint64_t v35 = v34;
  unint64_t v36 = *(void (**)(char *, uint64_t))(v21 + 8);
  v36(v24, v20);
  id v37 = objc_allocWithZone((Class)_CPFeedbackPayload);
  id v38 = sub_100005914(v33, v35);
  sub_1000148D0();
  swift_unknownObjectRelease();

  return ((uint64_t (*)(char *, uint64_t))v36)(v26, v20);
}

void sub_1000C5938(unsigned char *a1, uint64_t a2, void (*a3)(id, void, void), uint64_t a4, void *a5)
{
  if ((*a1 & 1) == 0)
  {
    *(unsigned char *)(a2 + qword_10021B6C8) = 24;
    if (qword_100218AF0 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_10002A10C(v7, (uint64_t)qword_1002368E8);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      v13[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 136315138;
      uint64_t v11 = String.init<A>(describing:)();
      sub_10001C274(v11, v12, v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Engagement Search: publisher failure, error: %s. Returning an empty response", v10, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    a3([a5 queryId], 0, 0);
  }
  swift_beginAccess();
  if (swift_unknownObjectWeakLoadStrong())
  {
    sub_100099970();
    swift_unknownObjectRelease();
  }
  sub_100011708();
}

void sub_1000C5B6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, void (*a6)(id, void, id), uint64_t a7, void *a8)
{
  uint64_t v39 = a8;
  uint64_t v40 = a7;
  id v37 = a6;
  uint64_t v38 = a4;
  unsigned int v36 = a5;
  uint64_t v41 = a2;
  uint64_t v42 = a3;
  uint64_t v9 = type metadata accessor for PegasusProxyForEngagement.Error();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  unint64_t v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Apple_Parsec_Responseframework_Engagement_V1alpha_EngagementResponse();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_10002572C(&qword_10021DC08);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v34 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002B9E8(a1, (uint64_t)v19, &qword_10021DC08);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v19, v9);
    uint64_t v20 = v39;
    *(unsigned char *)(v38 + qword_10021B6C8) = 48;
    id v21 = [v20 queryId];
    sub_10003233C(&qword_10021DC10, (void (*)(uint64_t))&type metadata accessor for PegasusProxyForEngagement.Error);
    uint64_t v22 = swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v10 + 16))(v23, v12, v9);
    id v24 = sub_100030D6C(v22);
    swift_errorRelease();
    v37(v21, 0, v24);
    swift_errorRelease();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  else
  {
    uint64_t v25 = (void (*)(id, id, void))v37;
    uint64_t v35 = v14;
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v19, v13);
    *(unsigned char *)(v38 + qword_10021B6C8) = 2;
    id v26 = [objc_allocWithZone((Class)PARReply) init];
    sub_10003233C(&qword_10021DC18, (void (*)(uint64_t))&type metadata accessor for Apple_Parsec_Responseframework_Engagement_V1alpha_EngagementResponse);
    uint64_t v27 = Message.serializedData(partial:)();
    unint64_t v29 = v28;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_1000291B4(v27, v29);
    uint64_t v31 = v39;
    [v26 setData:isa];

    [v26 setReplyType:v36];
    id v32 = [v31 queryId];
    id v33 = v26;
    v25(v32, v26, 0);

    (*(void (**)(char *, uint64_t))(v35 + 8))(v16, v13);
  }
  sub_1000C931C();
}

uint64_t sub_1000C5F98(void *a1)
{
  uint64_t result = sub_1000C2184(a1);
  if (v1) {
    return v3;
  }
  return result;
}

uint64_t sub_1000C5FC4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = sub_1000C22F4(a1, a2, a3, a4, a5);
  if (v5) {
    return v7;
  }
  return result;
}

uint64_t sub_1000C5FEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void))
{
  return sub_1000C78E0();
}

uint64_t sub_1000C6040(char *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v79 = a8;
  uint64_t v65 = a7;
  uint64_t v66 = a5;
  uint64_t v72 = a3;
  uint64_t v73 = a4;
  uint64_t v81 = 0;
  uint64_t v10 = type metadata accessor for Apple_Parsec_Feedback_V2_LookupSelectionType();
  __chkstk_darwin(v10 - 8);
  uint64_t v74 = (uint64_t *)((char *)&v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = type metadata accessor for Apple_Parsec_Feedback_V2_EndpointType();
  uint64_t v76 = *(void *)(v12 - 8);
  uint64_t v77 = v12;
  __chkstk_darwin(v12);
  uint64_t v78 = (char *)&v61 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = type metadata accessor for Apple_Parsec_Feedback_V2_TriggerSearchRequestEvent();
  uint64_t v69 = *(void *)(v71 - 8);
  __chkstk_darwin(v71);
  uint64_t v70 = (char *)&v61 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for Apple_Parsec_Feedback_V2_SearchType();
  uint64_t v68 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v61 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_10002572C((uint64_t *)&unk_10021DC20);
  uint64_t v19 = __chkstk_darwin(v18 - 8);
  id v21 = (char *)&v61 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v61 - v22;
  uint64_t v24 = type metadata accessor for Apple_Parsec_Feedback_V2_FeedbackPayload();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = __chkstk_darwin(v24);
  unint64_t v28 = (char *)&v61 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  uint64_t v30 = (char *)&v61 - v29;
  uint64_t v82 = v25;
  uint64_t v31 = *(void (**)(char *, char *, uint64_t))(v25 + 16);
  uint64_t v67 = a1;
  uint64_t v80 = v31;
  v31((char *)&v61 - v29, a1, v24);
  id v75 = a2;
  [a2 queryId];
  Apple_Parsec_Feedback_V2_FeedbackPayload.queryID.setter();
  Apple_Parsec_Feedback_V2_FeedbackPayload.containedFeedback.getter();
  uint64_t v32 = type metadata accessor for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback();
  if (sub_100027BA4((uint64_t)v23, 1, v32) == 1)
  {
    uint64_t v33 = v82;
    uint64_t v34 = v80;
    goto LABEL_12;
  }
  sub_10002B9E8((uint64_t)v23, (uint64_t)v21, (uint64_t *)&unk_10021DC20);
  uint64_t v63 = *(void *)(v32 - 8);
  int v35 = (*(uint64_t (**)(char *, uint64_t))(v63 + 88))(v21, v32);
  uint64_t v64 = v32;
  if (v35 == enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.startNetworkSearchFeedback(_:))
  {
    swift_bridgeObjectRetain();
    uint64_t v62 = v21;
    unsigned int v36 = (void (*)(unsigned char *, void))Apple_Parsec_Feedback_V2_FeedbackPayload.startNetworkSearchFeedback.modify();
    Apple_Parsec_Feedback_V2_StartNetworkSearchFeedback.input.setter();
    v36(v83, 0);
    (*(void (**)(char *, void, uint64_t))(v68 + 104))(v17, enum case for Apple_Parsec_Feedback_V2_SearchType.committed(_:), v15);
    id v37 = (void (*)(unsigned char *, void))Apple_Parsec_Feedback_V2_FeedbackPayload.startNetworkSearchFeedback.modify();
    Apple_Parsec_Feedback_V2_StartNetworkSearchFeedback.searchType.setter();
    v37(v83, 0);
    (*(void (**)(char *, void, uint64_t))(v69 + 104))(v70, enum case for Apple_Parsec_Feedback_V2_TriggerSearchRequestEvent.lookup(_:), v71);
    uint64_t v38 = (void (*)(unsigned char *, void))Apple_Parsec_Feedback_V2_FeedbackPayload.startNetworkSearchFeedback.modify();
    Apple_Parsec_Feedback_V2_StartNetworkSearchFeedback.triggerEvent.setter();
    v38(v83, 0);
    (*(void (**)(char *, void, uint64_t))(v76 + 104))(v78, enum case for Apple_Parsec_Feedback_V2_EndpointType.parsecSearch(_:), v77);
    uint64_t v39 = (void (*)(unsigned char *, void))Apple_Parsec_Feedback_V2_FeedbackPayload.startNetworkSearchFeedback.modify();
    Apple_Parsec_Feedback_V2_StartNetworkSearchFeedback.endpoint.setter();
    v39(v83, 0);
    id v40 = [v75 lookupSelectionType];
    sub_10005D094((uint64_t)v40, v74);
    uint64_t v41 = (void (*)(unsigned char *, void))Apple_Parsec_Feedback_V2_FeedbackPayload.startNetworkSearchFeedback.modify();
    Apple_Parsec_Feedback_V2_StartNetworkSearchFeedback.lookupSelectionType.setter();
    id v21 = v62;
    v41(v83, 0);
  }
  else if (v35 == enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.endNetworkSearchFeedback(_:))
  {
    uint64_t v62 = v21;
    (*(void (**)(char *, void, uint64_t))(v76 + 104))(v78, enum case for Apple_Parsec_Feedback_V2_EndpointType.parsecSearch(_:), v77);
    uint64_t v42 = (void (*)(unsigned char *, void))Apple_Parsec_Feedback_V2_FeedbackPayload.endNetworkSearchFeedback.modify();
    Apple_Parsec_Feedback_V2_EndNetworkSearchFeedback.endpointType.setter();
    v42(v83, 0);
    sub_100099970();
    sub_10003233C(&qword_100219EB0, (void (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_FeedbackPayload);
    uint64_t v43 = v81;
    uint64_t v44 = Message.serializedData(partial:)();
    if (v43)
    {
      swift_errorRelease();
      uint64_t v81 = 0;
    }
    else
    {
      uint64_t v46 = v44;
      unint64_t v47 = v45;
      Data.base64EncodedString(options:)(0);
      uint64_t v81 = 0;
      sub_1000291B4(v46, v47);
      uint64_t v48 = (void (*)(unsigned char *, void))Apple_Parsec_Feedback_V2_FeedbackPayload.endNetworkSearchFeedback.modify();
      Apple_Parsec_Feedback_V2_EndNetworkSearchFeedback.fbq.setter();
      v48(v83, 0);
    }
    uint64_t v33 = v82;
    id v21 = v62;
    goto LABEL_11;
  }
  uint64_t v33 = v82;
LABEL_11:
  uint64_t v34 = v80;
  (*(void (**)(char *, uint64_t))(v63 + 8))(v21, v64);
LABEL_12:
  sub_100019994((uint64_t)v23, (uint64_t *)&unk_10021DC20);
  v34(v28, v30, v24);
  sub_10003233C(&qword_100219EB0, (void (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_FeedbackPayload);
  uint64_t v49 = v81;
  uint64_t v50 = Message.serializedData(partial:)();
  if (v49)
  {
    swift_errorRelease();
    uint64_t v52 = *(void (**)(char *, uint64_t))(v33 + 8);
    v52(v28, v24);
    return ((uint64_t (*)(char *, uint64_t))v52)(v30, v24);
  }
  else
  {
    uint64_t v54 = v50;
    unint64_t v55 = v51;
    id v58 = *(uint64_t (**)(char *, uint64_t))(v33 + 8);
    uint64_t v56 = v33 + 8;
    id v57 = v58;
    v58(v28, v24);
    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      uint64_t v82 = v56;
      id v59 = objc_allocWithZone((Class)_CPFeedbackPayload);
      swift_unknownObjectRetain();
      sub_100027BCC(v54, v55);
      id v60 = sub_100005914(v54, v55);
      sub_1000148D0();
      swift_release();
      swift_unknownObjectRelease();

      sub_1000291B4(v54, v55);
      return v57(v30, v24);
    }
    else
    {
      v57(v30, v24);
      return sub_1000291B4(v54, v55);
    }
  }
}

uint64_t sub_1000C6938(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 128) = v19;
  *(_OWORD *)(v8 + 96) = v17;
  *(_OWORD *)(v8 + 112) = v18;
  *(void *)(v8 + 80) = a7;
  *(void *)(v8 + 88) = a8;
  *(void *)(v8 + 64) = a5;
  *(void *)(v8 + 72) = a6;
  *(void *)(v8 + 56) = a4;
  uint64_t v9 = type metadata accessor for BinaryEncodingError();
  *(void *)(v8 + 136) = v9;
  *(void *)(v8 + 144) = *(void *)(v9 - 8);
  *(void *)(v8 + 152) = swift_task_alloc();
  *(void *)(v8 + 160) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Apple_Parsec_Search_StatusCode();
  *(void *)(v8 + 168) = v10;
  *(void *)(v8 + 176) = *(void *)(v10 - 8);
  *(void *)(v8 + 184) = swift_task_alloc();
  uint64_t v11 = type metadata accessor for Apple_Parsec_Lookup_V1alpha_LookupSearchResponse();
  *(void *)(v8 + 192) = v11;
  *(void *)(v8 + 200) = *(void *)(v11 - 8);
  *(void *)(v8 + 208) = swift_task_alloc();
  uint64_t v12 = type metadata accessor for Apple_Parsec_Lookup_V1alpha_LookupSearchRequest();
  *(void *)(v8 + 216) = v12;
  *(void *)(v8 + 224) = *(void *)(v12 - 8);
  *(void *)(v8 + 232) = swift_task_alloc();
  uint64_t v13 = type metadata accessor for JSONEncodingOptions();
  *(void *)(v8 + 240) = v13;
  *(void *)(v8 + 248) = *(void *)(v13 - 8);
  *(void *)(v8 + 256) = swift_task_alloc();
  type metadata accessor for PegasusContext(0);
  *(void *)(v8 + 264) = swift_task_alloc();
  uint64_t Context = type metadata accessor for Apple_Parsec_Search_PegasusQueryContext();
  *(void *)(v8 + 272) = Context;
  *(void *)(v8 + 280) = *(void *)(Context - 8);
  *(void *)(v8 + 288) = swift_task_alloc();
  return _swift_task_switch(sub_1000C6C1C, 0, 0);
}

uint64_t sub_1000C6C1C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30)
{
  sub_1000E2720();
  a29 = v31;
  a30 = v32;
  a28 = v30;
  uint64_t v33 = v30[7];
  uint64_t v34 = v30[36];
  uint64_t v35 = v30[33];
  uint64_t v36 = v30[8];
  sub_100023FDC(v35);
  sub_1000F5CD0(23, v33, v36, v34);
  sub_100027C24(v35, (void (*)(void))type metadata accessor for PegasusContext);
  JSONEncodingOptions.init()();
  sub_10003233C(&qword_10021CCF0, (void (*)(uint64_t))&type metadata accessor for Apple_Parsec_Search_PegasusQueryContext);
  uint64_t v37 = Message.jsonString(options:)();
  unint64_t v39 = v38;
  sub_10001AB6C();
  v40();
  if (qword_100218B70 != -1) {
    swift_once();
  }
  uint64_t v41 = (void *)v30[9];
  uint64_t v42 = type metadata accessor for Logger();
  int v43 = sub_10002A10C(v42, (uint64_t)qword_100236A68);
  id v44 = v41;
  swift_bridgeObjectRetain_n();
  id v45 = v44;
  swift_bridgeObjectRetain();
  uint64_t v46 = Logger.logObject.getter();
  os_log_type_t v47 = static os_log_type_t.debug.getter();
  if (sub_100017D10(v47))
  {
    HIDWORD(a13) = v43;
    a12 = v30 + 5;
    unint64_t v48 = v30[11];
    a15 = v30 + 6;
    a16 = v30[12];
    uint64_t v49 = (void *)v30[9];
    a10 = v30 + 3;
    a11 = v30[10];
    a14 = v37;
    uint64_t v50 = sub_1000E215C();
    a18 = sub_100023E3C();
    *(_DWORD *)uint64_t v50 = 134349827;
    id v51 = [v49 queryId];

    v30[3] = v51;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    *(_WORD *)(v50 + 12) = 2085;
    swift_bridgeObjectRetain();
    v30[4] = sub_10001C274(a11, v48, &a18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v50 + 22) = 2085;
    swift_bridgeObjectRetain();
    v30[5] = sub_10001C274(a14, v39, &a18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_10002EEC0();
    *(_WORD *)(v50 + 32) = 2050;
    v30[6] = a16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v46, (os_log_type_t)v43, "performing query %{public}llu lookup string %{sensitive}s header: %{sensitive}s requestId: %{public}llu", (uint8_t *)v50, 0x2Au);
    sub_10002EE98();
    sub_100017D40();
    sub_100017D40();
  }
  else
  {
    uint64_t v52 = (void *)v30[9];

    swift_bridgeObjectRelease_n();
    sub_1000E29D4();
  }

  dispatch thunk of PegasusProxyForLookupSearch.createRequest(_:context:)();
  uint64_t v64 = (char *)&async function pointer to dispatch thunk of PegasusProxyForLookupSearch.send(_:)
      + async function pointer to dispatch thunk of PegasusProxyForLookupSearch.send(_:);
  swift_task_alloc();
  sub_1000E2F6C();
  v30[37] = v53;
  *uint64_t v53 = v54;
  v53[1] = sub_1000C6FEC;
  sub_1000E2754();
  return v57(v55, v56, v57, v58, v59, v60, v61, v62, a9, a10, a11, a12, a13, a14, a15, a16, v64, a18, a19,
           a20,
           a21,
           a22);
}

uint64_t sub_1000C6FEC()
{
  sub_100023C50();
  sub_100026880();
  uint64_t v2 = *v1;
  sub_10001DD38();
  void *v3 = v2;
  *(void *)(v4 + 304) = v0;
  swift_task_dealloc();
  sub_100026FC8();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_1000C70CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9, void (*a10)(id, void, id), void (*a11)(id, id, void), uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  sub_1000E2720();
  uint64_t v25 = v22[38];
  id v26 = [objc_allocWithZone((Class)PARReply) init];
  sub_10003233C(&qword_10021DDC0, (void (*)(uint64_t))&type metadata accessor for Apple_Parsec_Lookup_V1alpha_LookupSearchResponse);
  uint64_t v27 = Message.serializedData(partial:)();
  if (v25)
  {

    sub_100016614();
    v29();
    uint64_t v30 = (void *)v22[17];
    sub_100024400();
    v31();
    sub_100028214();
    v32();
    v22[2] = v25;
    swift_errorRetain();
    sub_10002572C(&qword_10021B3C0);
    if (swift_dynamicCast())
    {
      uint64_t v33 = v22[20];
      sub_1000E2FE4();
      swift_errorRelease();
      sub_10000E0F4();
      v34();
      *(unsigned char *)(v24 + qword_10021B6C8) = 18;
      id v35 = [v30 queryId];
      sub_10003233C(&qword_10021DD78, (void (*)(uint64_t))&type metadata accessor for BinaryEncodingError);
      uint64_t v36 = sub_100024A30();
      sub_1000E2C2C(v36, v37);
      sub_100016608();
      v38();
      id v39 = sub_100030D6C(v33);
      swift_errorRelease();
      v23(v35, 0, v39);
      swift_errorRelease();
      sub_100028214();
      v40();
    }
    else
    {
      unint64_t v48 = (void (*)(void *, void, id))v22[15];
      uint64_t v49 = (void *)v22[9];
      swift_errorRelease();
      sub_1000E2C40(qword_10021B6C8);
      [v49 queryId];
      sub_1000E2AD8();
      id v50 = sub_100030D6C(v25);
      swift_errorRelease();
      v48(v49, 0, v50);
      swift_errorRelease();
    }
    swift_errorRelease();
  }
  else
  {
    BOOL v41 = sub_10003014C(v27, v28);
    a17 = v22[36];
    a18 = v22[35];
    a15 = v22[29];
    a16 = v22[34];
    a13 = v22[24];
    a14 = v22[27];
    a12 = v22[26];
    if (v41)
    {
      a10 = (void (*)(id, void, id))v22[15];
      a11 = (void (*)(id, id, void))v22[16];
      uint64_t v42 = (void *)v22[9];
      *(unsigned char *)(v22[14] + qword_10021B6C8) = 20;
      a9 = [v42 queryId];
      Apple_Parsec_Lookup_V1alpha_LookupSearchResponse.status.getter();
      uint64_t v43 = Apple_Parsec_Search_StatusCode.rawValue.getter();
      sub_10002DEA8();
      sub_1000292E0();
      v44();
      sub_1000E0D44();
      uint64_t v45 = sub_100024A30();
      *(void *)uint64_t v46 = v43;
      *(void *)(v46 + 8) = 0;
      *(unsigned char *)(v46 + 16) = 1;
      id v47 = sub_100030D6C(v45);
      swift_errorRelease();
      a10(a9, 0, v47);
      swift_errorRelease();
    }
    else
    {
      a11 = (void (*)(id, id, void))v22[15];
      uint64_t v51 = v22[14];
      uint64_t v52 = (void *)v22[9];
      uint64_t v53 = sub_1000E25C4();
      sub_1000CCEBC(v53, v54, v26);
      id v55 = [v52 queryId];
      id v56 = v26;
      a11(v55, v26, 0);

      *(unsigned char *)(v51 + qword_10021B6C8) = 2;
      sub_100011708();
    }
    uint64_t v57 = sub_1000E25C4();
    sub_1000291B4(v57, v58);
    sub_100019BC8();
    v59();
    sub_100023C70();
    v60();
    (*(void (**)(uint64_t, uint64_t))(a18 + 8))(a17, a16);
  }
  sub_10002EF6C();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_100017DBC();
  sub_1000E2754();
  return v62(v61, v62, v63, v64, v65, v66, v67, v68, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22);
}

uint64_t sub_1000C7568(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_1000E26E8();
  sub_1000E2BCC();
  uint64_t v15 = v12[38];
  uint64_t v16 = v12[35];
  sub_100024400();
  v17();
  long long v18 = (void *)(v16 + 8);
  sub_10001AA80();
  sub_100016614();
  v19();
  v12[2] = v15;
  swift_errorRetain();
  sub_10002572C(&qword_10021B3C0);
  if (swift_dynamicCast())
  {
    uint64_t v20 = v12[20];
    sub_1000E2FE4();
    swift_errorRelease();
    sub_10000E0F4();
    v21();
    *(unsigned char *)(v14 + qword_10021B6C8) = 18;
    id v22 = [v18 queryId];
    sub_10003233C(&qword_10021DD78, (void (*)(uint64_t))&type metadata accessor for BinaryEncodingError);
    uint64_t v23 = sub_100024A30();
    sub_1000E2C2C(v23, v24);
    sub_100016608();
    v25();
    id v26 = sub_100030D6C(v20);
    swift_errorRelease();
    v13(v22, 0, v26);
    swift_errorRelease();
    sub_10002ECB8();
    sub_100028214();
    v27();
  }
  else
  {
    unint64_t v28 = (void (*)(id, void, id))v12[15];
    uint64_t v29 = (void *)v12[9];
    swift_errorRelease();
    sub_1000E2C40(qword_10021B6C8);
    id v30 = [v29 queryId];
    swift_errorRetain();
    id v31 = sub_100030D6C(v15);
    swift_errorRelease();
    v28(v30, 0, v31);
    swift_errorRelease();
  }
  swift_errorRelease();
  sub_10002EF6C();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_100017DBC();
  sub_1000E21F8();
  return v33(v32, v33, v34, v35, v36, v37, v38, v39, a9, a10, a11, a12);
}

void *sub_1000C77CC(void *a1, uint64_t a2, unint64_t a3)
{
  uint64_t result = sub_1000C1F70(a1, a2, a3);
  if (v3) {
    return (void *)v5;
  }
  return result;
}

id sub_1000C77F4(uint64_t a1, void *a2, uint64_t a3, unint64_t a4)
{
  id v6 = a2;
  sub_100027BCC(a3, a4);
  Apple_Parsec_Search_V2_SearchResponse.init()();
  return v6;
}

uint64_t sub_1000C785C@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(char *, uint64_t, uint64_t, uint64_t)@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  uint64_t v8 = a1[2];
  uint64_t v9 = sub_10002572C(&qword_10021DCB8);
  uint64_t result = a2((char *)a3 + *(int *)(v9 + 64), v6, v7, v8);
  if (!v3)
  {
    *a3 = result;
    a3[1] = v11;
    a3[2] = v12;
  }
  return result;
}

uint64_t sub_1000C78E0()
{
  sub_100017F00();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    sub_100099970();
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1000C7938@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = OBJC_IVAR____TtC7parsecd11ClientState_zkwProxy;
  uint64_t v5 = *(void *)(a1 + OBJC_IVAR____TtC7parsecd11ClientState_zkwProxy);
  if (!v5)
  {
    sub_1000C0D5C();
    uint64_t v5 = *(void *)(a1 + v4);
    if (!v5)
    {
      if (qword_100218B18 != -1) {
        swift_once();
      }
      uint64_t v6 = type metadata accessor for Logger();
      sub_10002A10C(v6, (uint64_t)qword_100236960);
      uint64_t v7 = Logger.logObject.getter();
      os_log_type_t v8 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v7, v8))
      {
        uint64_t v9 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v9 = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, v8, "Missing zkw proxy, bailing", v9, 2u);
        swift_slowDealloc();
      }

      uint64_t v5 = 0;
    }
  }
  *a2 = v5;

  return swift_retain();
}

uint64_t sub_1000C7A4C@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_10002572C(&qword_10021DDC8);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!swift_unknownObjectWeakLoadStrong())
  {
    uint64_t v30 = 0;
    long long v28 = 0u;
    long long v29 = 0u;
    goto LABEL_20;
  }
  sub_10007E85C((uint64_t)&v28);
  swift_unknownObjectRelease();
  if (!*((void *)&v29 + 1))
  {
LABEL_20:
    sub_100019994((uint64_t)&v28, &qword_10021DE00);
    if (qword_100218B18 != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    sub_10002A10C(v23, (uint64_t)qword_100236960);
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v24, v25))
    {
      id v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Topic results cache is disabled", v26, 2u);
      swift_slowDealloc();
    }

    uint64_t v27 = type metadata accessor for Apple_Parsec_Spotlight_V1alpha_ZkwSuggestResponse();
    return sub_10002538C(a2, 1, 1, v27);
  }
  sub_10001C1AC(&v28, (uint64_t)v31);
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v7 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  unint64_t v8 = (unint64_t)_swiftEmptyArrayStorage;
  if (!v7) {
    goto LABEL_13;
  }
  *(void *)&long long v28 = _swiftEmptyArrayStorage;
  uint64_t result = specialized ContiguousArray.reserveCapacity(_:)();
  if ((v7 & 0x8000000000000000) == 0)
  {
    uint64_t v10 = 0;
    do
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v11 = *(id *)(a1 + 8 * v10 + 32);
      }
      uint64_t v12 = v11;
      ++v10;
      id v13 = [v11 topic];

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    while (v7 != v10);
    unint64_t v8 = v28;
LABEL_13:
    uint64_t v14 = sub_10001B620(v31, v32);
    if (v8 >> 62)
    {
      sub_100023FA0(0, (unint64_t *)&qword_100219768);
      swift_bridgeObjectRetain();
      unint64_t v15 = _bridgeCocoaArray<A>(_:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRetain();
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
      sub_100023FA0(0, (unint64_t *)&qword_100219768);
      unint64_t v15 = v8;
    }
    swift_bridgeObjectRelease();
    uint64_t v16 = (void *)*v14;
    long long v17 = *(os_unfair_lock_s **)(v16[2] + 16);
    swift_retain();
    swift_bridgeObjectRetain();
    os_unfair_lock_lock(v17);
    sub_1000A4CBC(v16, v15, &v28);
    os_unfair_lock_unlock(v17);
    swift_bridgeObjectRelease_n();
    swift_release();
    uint64_t v18 = v28;
    if ((void)v28)
    {
      sub_10001B620(v31, v32);
      sub_1000BF188(a1, v18, (uint64_t)v6);
      swift_bridgeObjectRelease();
      uint64_t v19 = type metadata accessor for Apple_Parsec_Spotlight_V1alpha_ZkwSuggestResponse();
      if (sub_100027BA4((uint64_t)v6, 1, v19) != 1)
      {
        (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v19 - 8) + 32))(a2, v6, v19);
        uint64_t v21 = a2;
        uint64_t v22 = 0;
        uint64_t v20 = v19;
        goto LABEL_26;
      }
      sub_100019994((uint64_t)v6, &qword_10021DDC8);
    }
    uint64_t v20 = type metadata accessor for Apple_Parsec_Spotlight_V1alpha_ZkwSuggestResponse();
    uint64_t v21 = a2;
    uint64_t v22 = 1;
LABEL_26:
    sub_10002538C(v21, v22, 1, v20);
    return sub_10001CA50((uint64_t)v31);
  }
  __break(1u);
  return result;
}

uint64_t sub_1000C7E9C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v45 = a3;
  uint64_t v46 = a6;
  uint64_t v44 = a4;
  uint64_t v9 = type metadata accessor for Apple_Parsec_Feedback_V2_EndpointType();
  uint64_t v49 = *(void *)(v9 - 8);
  uint64_t v50 = v9;
  __chkstk_darwin(v9);
  uint64_t v51 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Apple_Parsec_Feedback_V2_SearchType();
  uint64_t v47 = *(void *)(v11 - 8);
  uint64_t v48 = v11;
  __chkstk_darwin(v11);
  id v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10002572C((uint64_t *)&unk_10021DC20);
  uint64_t v15 = __chkstk_darwin(v14 - 8);
  long long v17 = (char *)&v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v41 - v18;
  uint64_t v20 = type metadata accessor for Apple_Parsec_Feedback_V2_FeedbackPayload();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v41 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  id v26 = (char *)&v41 - v25;
  uint64_t v52 = *(void (**)(char *, uint64_t, uint64_t))(v21 + 16);
  uint64_t v53 = a5 + 16;
  v52((char *)&v41 - v25, a1, v20);
  [a2 queryId];
  Apple_Parsec_Feedback_V2_FeedbackPayload.queryID.setter();
  Apple_Parsec_Feedback_V2_FeedbackPayload.containedFeedback.getter();
  uint64_t v27 = type metadata accessor for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback();
  if (sub_100027BA4((uint64_t)v19, 1, v27) != 1)
  {
    uint64_t v43 = v24;
    sub_10002B9E8((uint64_t)v19, (uint64_t)v17, (uint64_t *)&unk_10021DC20);
    uint64_t v28 = *(void *)(v27 - 8);
    int v29 = (*(uint64_t (**)(char *, uint64_t))(v28 + 88))(v17, v27);
    uint64_t v42 = v17;
    if (v29 == enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.startNetworkSearchFeedback(_:))
    {
      (*(void (**)(char *, void, uint64_t))(v47 + 104))(v13, enum case for Apple_Parsec_Feedback_V2_SearchType.zeroKeyword(_:), v48);
      uint64_t v30 = (void (*)(unsigned char *, void))Apple_Parsec_Feedback_V2_FeedbackPayload.startNetworkSearchFeedback.modify();
      Apple_Parsec_Feedback_V2_StartNetworkSearchFeedback.searchType.setter();
      v30(v54, 0);
      (*(void (**)(char *, void, uint64_t))(v49 + 104))(v51, enum case for Apple_Parsec_Feedback_V2_EndpointType.parsecZeroKeywordSuggest(_:), v50);
      id v31 = (void (*)(unsigned char *, void))Apple_Parsec_Feedback_V2_FeedbackPayload.startNetworkSearchFeedback.modify();
      Apple_Parsec_Feedback_V2_StartNetworkSearchFeedback.endpoint.setter();
      v31(v54, 0);
    }
    else if (v29 == enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.endNetworkSearchFeedback(_:))
    {
      uint64_t v48 = v45 + 16;
      (*(void (**)(char *, void, uint64_t))(v49 + 104))(v51, enum case for Apple_Parsec_Feedback_V2_EndpointType.parsecSearch(_:), v50);
      uint64_t v32 = (void (*)(unsigned char *, void))Apple_Parsec_Feedback_V2_FeedbackPayload.endNetworkSearchFeedback.modify();
      Apple_Parsec_Feedback_V2_EndNetworkSearchFeedback.endpointType.setter();
      v32(v54, 0);
      swift_beginAccess();
      if (swift_unknownObjectWeakLoadStrong())
      {
        sub_100099970();
        swift_unknownObjectRelease();
      }
    }
    (*(void (**)(char *, uint64_t))(v28 + 8))(v42, v27);
    uint64_t v24 = v43;
  }
  sub_100019994((uint64_t)v19, (uint64_t *)&unk_10021DC20);
  swift_beginAccess();
  if (!swift_weakLoadStrong()) {
    return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v26, v20);
  }
  v52(v24, (uint64_t)v26, v20);
  sub_10003233C(&qword_100219EB0, (void (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_FeedbackPayload);
  uint64_t v33 = v24;
  uint64_t v34 = Message.serializedData(partial:)();
  unint64_t v36 = v35;
  uint64_t v37 = *(void (**)(char *, uint64_t))(v21 + 8);
  v37(v33, v20);
  id v38 = objc_allocWithZone((Class)_CPFeedbackPayload);
  swift_unknownObjectRetain();
  sub_100027BCC(v34, v36);
  id v39 = sub_100005914(v34, v36);
  sub_1000148D0();
  swift_unknownObjectRelease();
  swift_release();

  sub_1000291B4(v34, v36);
  return ((uint64_t (*)(char *, uint64_t))v37)(v26, v20);
}

void sub_1000C84D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (qword_100218B18 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_10002A10C(v8, (uint64_t)qword_100236960);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "ZKW: Received response after timeout, attempting to add response to topic cache", v11, 2u);
    swift_slowDealloc();
  }

  if (*(unsigned char *)(a2 + 81) != 1) {
    goto LABEL_11;
  }
  sub_10007E85C((uint64_t)&v21);
  if (!v22)
  {
    sub_100019994((uint64_t)&v21, &qword_10021DE00);
LABEL_11:
    swift_retain();
    swift_unknownObjectRetain();
    long long v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = swift_slowAlloc();
      *(_DWORD *)uint64_t v19 = 67109376;
      LODWORD(v23[0]) = *(unsigned __int8 *)(a2 + 81);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      *(_WORD *)(v19 + 8) = 1024;
      sub_10007E85C((uint64_t)v23);
      BOOL v20 = v24 != 0;
      sub_100019994((uint64_t)v23, &qword_10021DE00);
      LODWORD(v23[0]) = v20;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_unknownObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "ZKW: Failed to add to the cache. Span is done: %{BOOL}d. Cache is enabled %{BOOL}d", (uint8_t *)v19, 0xEu);
      swift_slowDealloc();
    }
    else
    {

      swift_unknownObjectRelease();
      swift_release();
    }
    return;
  }
  sub_10001C1AC(&v21, (uint64_t)v23);
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "ZKW: Populating cache with response received after timeout", v14, 2u);
    swift_slowDealloc();
  }

  sub_10001B620(v23, v24);
  id v15 = [a5 queryTopicContexts];
  sub_100023FA0(0, &qword_10021DDD0);
  unint64_t v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  sub_1000BEAC0(v16, a1);
  swift_bridgeObjectRelease();
  sub_10001CA50((uint64_t)v23);
}

void sub_1000C881C(uint64_t a1, uint64_t a2, void (*a3)(id, uint64_t, id), uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v47 = a3;
  uint64_t v48 = a8;
  id v44 = a5;
  uint64_t v45 = a6;
  uint64_t v46 = a4;
  uint64_t v11 = type metadata accessor for PegasusProxyForSpotlightZKW.Error();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  id v15 = (char *)v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v13);
  os_log_type_t v18 = (char *)v38 - v17;
  __chkstk_darwin(v16);
  BOOL v20 = (char *)v38 - v19;
  uint64_t v21 = sub_10002572C((uint64_t *)&unk_10021DE10);
  __chkstk_darwin(v21 - 8);
  uint64_t v23 = (char *)v38 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = a7 + 16;
  sub_10002B9E8(a1, (uint64_t)v23, (uint64_t *)&unk_10021DE10);
  if (sub_100027BA4((uint64_t)v23, 1, v11) == 1)
  {
    sub_100019994((uint64_t)v23, (uint64_t *)&unk_10021DE10);
  }
  else
  {
    uint64_t v41 = v24;
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v20, v23, v11);
    (*(void (**)(char *, void, uint64_t))(v12 + 104))(v18, enum case for PegasusProxyForSpotlightZKW.Error.timedOut(_:), v11);
    char v25 = static PegasusProxyForSpotlightZKW.Error.== infix(_:_:)();
    id v26 = *(void (**)(char *, uint64_t))(v12 + 8);
    v26(v18, v11);
    if (v25) {
      char v27 = 27;
    }
    else {
      char v27 = 24;
    }
    *(unsigned char *)(a2 + qword_10021B6C8) = v27;
    if (qword_100218B18 != -1) {
      swift_once();
    }
    uint64_t v42 = a2;
    uint64_t v28 = type metadata accessor for Logger();
    sub_10002A10C(v28, (uint64_t)qword_100236960);
    uint64_t v43 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
    v43(v15, v20, v11);
    int v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      id v31 = (uint8_t *)swift_slowAlloc();
      uint64_t v39 = swift_slowAlloc();
      v50[0] = v39;
      id v40 = v26;
      *(_DWORD *)id v31 = 136315138;
      v38[1] = v31 + 4;
      v43(v18, v15, v11);
      uint64_t v32 = String.init<A>(describing:)();
      uint64_t v49 = sub_10001C274(v32, v33, v50);
      id v26 = v40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v26(v15, v11);
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "ZKW: publisher failure, error: %s. Returning an empty response", v31, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      v26(v15, v11);
    }

    id v34 = [v44 queryId];
    sub_10003233C(&qword_10021DDF8, (void (*)(uint64_t))&type metadata accessor for PegasusProxyForSpotlightZKW.Error);
    uint64_t v35 = swift_allocError();
    v43(v36, v20, v11);
    id v37 = sub_100030D6C(v35);
    swift_errorRelease();
    v47(v34, v45, v37);
    swift_errorRelease();
    v26(v20, v11);
  }
  swift_beginAccess();
  if (swift_unknownObjectWeakLoadStrong())
  {
    sub_100099970();
    swift_unknownObjectRelease();
  }
  sub_100011708();
}

void sub_1000C8D10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(id, uint64_t, id), uint64_t a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v45 = a8;
  uint64_t v46 = a4;
  uint64_t v50 = a3;
  id v51 = a7;
  uint64_t v47 = a6;
  uint64_t v48 = a5;
  uint64_t v49 = a2;
  uint64_t v11 = type metadata accessor for PegasusProxyForSpotlightZKW.Error();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for Apple_Parsec_Spotlight_V1alpha_ZkwSuggestResponse();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  os_log_type_t v18 = (char *)&v42 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_10002572C(&qword_10021DDF0);
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v42 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002B9E8(a1, (uint64_t)v21, &qword_10021DDF0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v21, v11);
    *(unsigned char *)(v46 + qword_10021B6C8) = 48;
    id v22 = [v51 queryId];
    sub_10003233C(&qword_10021DDF8, (void (*)(uint64_t))&type metadata accessor for PegasusProxyForSpotlightZKW.Error);
    uint64_t v23 = swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v12 + 16))(v24, v14, v11);
    id v25 = sub_100030D6C(v23);
    swift_errorRelease();
    v48(v22, a10, v25);
    swift_errorRelease();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v18, v21, v15);
    *(unsigned char *)(v46 + qword_10021B6C8) = 2;
    id v26 = [objc_allocWithZone((Class)PARReply) init];
    sub_10003233C(&qword_10021DDE8, (void (*)(uint64_t))&type metadata accessor for Apple_Parsec_Spotlight_V1alpha_ZkwSuggestResponse);
    uint64_t v27 = Message.serializedData(partial:)();
    unint64_t v29 = v28;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_1000291B4(v27, v29);
    uint64_t v43 = v16;
    uint64_t v44 = v15;
    objc_msgSend(v26, "setData:", isa, v18);

    id v31 = v51;
    id v32 = [v51 queryId];
    id v33 = v26;
    v48(v32, (uint64_t)v26, 0);

    if (qword_100218B18 != -1) {
      swift_once();
    }
    uint64_t v34 = type metadata accessor for Logger();
    sub_10002A10C(v34, (uint64_t)qword_100236960);
    swift_unknownObjectRetain();
    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v35, v36))
    {
      id v37 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)id v37 = 67109120;
      sub_10007E85C((uint64_t)v52);
      BOOL v38 = v53 != 0;
      sub_100019994((uint64_t)v52, &qword_10021DE00);
      LODWORD(v52[0]) = v38;
      id v31 = v51;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_unknownObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "ZKW: Attempting to add to cache. Cache is on: %{BOOL}d", v37, 8u);
      swift_slowDealloc();
    }
    else
    {

      swift_unknownObjectRelease();
    }
    sub_10007E85C((uint64_t)v52);
    if (v53)
    {
      sub_10001B620(v52, v53);
      id v39 = [v31 queryTopicContexts];
      sub_100023FA0(0, &qword_10021DDD0);
      unint64_t v40 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v41 = v42;
      sub_1000BEAC0(v40, v42);

      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v41, v44);
      sub_10001CA50((uint64_t)v52);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v42, v44);

      sub_100019994((uint64_t)v52, &qword_10021DE00);
    }
  }
  sub_1000C931C();
}

void sub_1000C931C()
{
  if (swift_unknownObjectWeakLoadStrong())
  {
    sub_100099970();
    swift_unknownObjectRelease();
  }
  sub_100011708();
}

uint64_t sub_1000C938C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 88) = v16;
  *(_OWORD *)(v8 + 72) = v15;
  *(void *)(v8 + 56) = a7;
  *(void *)(v8 + 64) = a8;
  *(void *)(v8 + 40) = a5;
  *(void *)(v8 + 48) = a6;
  *(void *)(v8 + 32) = a4;
  uint64_t v9 = type metadata accessor for ProxyError();
  *(void *)(v8 + 96) = v9;
  *(void *)(v8 + 104) = *(void *)(v9 - 8);
  *(void *)(v8 + 112) = swift_task_alloc();
  sub_10002572C(&qword_10021DE30);
  *(void *)(v8 + 120) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Apple_Parsec_Sba_V1_HashBucketDetail();
  *(void *)(v8 + 128) = v10;
  *(void *)(v8 + 136) = *(void *)(v10 - 8);
  *(void *)(v8 + 144) = swift_task_alloc();
  uint64_t v11 = type metadata accessor for Apple_Parsec_Sba_V1_SafariAssistantPrefetchResponse();
  *(void *)(v8 + 152) = v11;
  *(void *)(v8 + 160) = *(void *)(v11 - 8);
  *(void *)(v8 + 168) = swift_task_alloc();
  *(void *)(v8 + 176) = sub_10002572C(&qword_10021DE38);
  *(void *)(v8 + 184) = swift_task_alloc();
  *(void *)(v8 + 192) = swift_task_alloc();
  type metadata accessor for PegasusContext(0);
  *(void *)(v8 + 200) = swift_task_alloc();
  type metadata accessor for Apple_Parsec_Search_PegasusQueryContext();
  *(void *)(v8 + 208) = swift_task_alloc();
  sub_10002572C(&qword_10021DE40);
  *(void *)(v8 + 216) = swift_task_alloc();
  uint64_t v12 = type metadata accessor for Apple_Parsec_Sba_V1_SafariAssistantPrefetchRequest();
  *(void *)(v8 + 224) = v12;
  *(void *)(v8 + 232) = *(void *)(v12 - 8);
  *(void *)(v8 + 240) = swift_task_alloc();
  return _swift_task_switch(sub_1000C9678, 0, 0);
}

uint64_t sub_1000C9678(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, NSObject *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24)
{
  sub_1000E2704();
  a23 = v25;
  a24 = v26;
  sub_1000E2D3C();
  a22 = v24;
  if (qword_100218AE8 != -1) {
    swift_once();
  }
  uint64_t v27 = (void *)v24[4];
  uint64_t v28 = type metadata accessor for Logger();
  sub_1000E2174(v28, (uint64_t)qword_1002368D0);
  id v29 = v27;
  os_log_type_t v30 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.default.getter();
  BOOL v32 = sub_100017D10(v31);
  id v33 = (void *)v24[4];
  uint64_t v34 = &selRef_isEqualToString_;
  if (v32)
  {
    a11 = v30;
    uint64_t v35 = sub_10001D784();
    a12 = sub_100023E3C();
    a13 = a12;
    *(_DWORD *)uint64_t v35 = 136643075;
    id v36 = [v33 urlString];
    uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    HIDWORD(a10) = v27;
    unint64_t v39 = v38;

    v24[2] = sub_10001C274(v37, v39, &a13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    *(_WORD *)(v35 + 12) = 2085;
    id v40 = [v33 urlVariants];
    static Array._unconditionallyBridgeFromObjectiveC(_:)();

    sub_1000E25C4();
    uint64_t v41 = Array.description.getter();
    unint64_t v43 = v42;
    swift_bridgeObjectRelease();
    uint64_t v44 = v41;
    uint64_t v34 = &selRef_isEqualToString_;
    v24[3] = sub_10001C274(v44, v43, &a13);
    sub_100026344();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    sub_1000E2C4C((void *)&_mh_execute_header, v30, BYTE4(a10), "URL string: %{sensitive}s, URL variants: %{sensitive}s");
    sub_10002EE98();
    sub_100017D40();
    sub_100017D40();
  }
  else
  {
  }
  uint64_t v46 = v24[27];
  uint64_t v45 = v24[28];
  uint64_t v47 = (void *)v24[4];
  id v48 = [v47 v34[471]];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  id v49 = [v47 localeString];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  dispatch thunk of PegasusProxyForSafariAssistant.createPrefetchRequest(url:localeString:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000184F4(v46, 1, v45);
  if (v50)
  {
    id v51 = (void (*)(void))v24[7];
    uint64_t v52 = v24[6];
    sub_100019994(v24[27], &qword_10021DE40);
    *(unsigned char *)(v52 + qword_10021B6C8) = 17;
    sub_1000E24C8();
    v51();
    sub_1000E23A8();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_100017DBC();
    sub_1000E20D4();
    return v54(v53, v54, v55, v56, v57, v58, v59, v60, a9, a10, a11, a12, a13, a14, a15, a16);
  }
  else
  {
    uint64_t v62 = v24[25];
    sub_10000E0F4();
    v63();
    sub_100023FDC(v62);
    sub_1000E2B08();
    sub_100027C24(v62, (void (*)(void))type metadata accessor for PegasusContext);
    Apple_Parsec_Sba_V1_SafariAssistantPrefetchRequest.queryContext.setter();
    sub_1000E2CE8();
    sub_1000E2F6C();
    v24[31] = v64;
    *uint64_t v64 = v65;
    v64[1] = sub_1000C9AAC;
    sub_1000E20D4();
    return v68(v66, v67, v68, v69, v70, v71, v72, v73, a9, a10, a11, a12, a13, a14, a15, a16);
  }
}

uint64_t sub_1000C9AAC()
{
  sub_100023C50();
  sub_100026880();
  uint64_t v1 = *v0;
  sub_10001DD38();
  void *v2 = v1;
  swift_task_dealloc();
  sub_100026FC8();
  return _swift_task_switch(v3, v4, v5);
}

#error "1000C9D5C: call analysis failed (funcsize=305)"

void sub_1000CA054(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_10000DFE0();
  a19 = v20;
  a20 = v21;
  uint64_t v23 = v22;
  v260 = v24;
  v237 = v25;
  unint64_t v27 = v26;
  uint64_t v234 = v28;
  uint64_t v235 = v29;
  uint64_t v239 = type metadata accessor for Logger();
  sub_100020C48();
  uint64_t v233 = v30;
  __chkstk_darwin(v31);
  v232 = (char *)v231 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100029488();
  uint64_t v33 = type metadata accessor for SHA256();
  sub_100020C48();
  *(void *)&long long v244 = v34;
  __chkstk_darwin(v35);
  sub_100024A74();
  __chkstk_darwin(v36);
  v251 = (char *)v231 - v37;
  sub_100029488();
  uint64_t v249 = type metadata accessor for SHA256Digest();
  sub_100020C48();
  v243 = v38;
  __chkstk_darwin(v39);
  sub_100017D2C();
  sub_100024A74();
  __chkstk_darwin(v40);
  sub_100024FFC();
  uint64_t v248 = v41;
  sub_100029488();
  uint64_t v258 = type metadata accessor for String.Encoding();
  sub_100020C48();
  uint64_t v242 = v42;
  __chkstk_darwin(v43);
  v257 = (char *)v231 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100029488();
  uint64_t v259 = type metadata accessor for Apple_Parsec_Sba_V1_HashBucketDetail.HashDetail();
  sub_100020C48();
  uint64_t v245 = v45;
  __chkstk_darwin(v46);
  sub_100017D2C();
  sub_100024A74();
  __chkstk_darwin(v47);
  uint64_t v262 = (uint64_t)v231 - v48;
  uint64_t v49 = sub_10002572C(&qword_10021DE60);
  uint64_t v50 = sub_100016544(v49);
  __chkstk_darwin(v50);
  sub_100017D2C();
  sub_100024A74();
  __chkstk_darwin(v51);
  v255 = (void (**)(void))((char *)v231 - v52);
  sub_100029488();
  uint64_t v53 = type metadata accessor for Apple_Parsec_Sba_V1_SafariAssistantPrefetchRequest();
  sub_100020C48();
  uint64_t v253 = v54;
  __chkstk_darwin(v55);
  v252 = (char *)v231 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = sub_10002572C(&qword_10021DE30);
  uint64_t v58 = sub_100016544(v57);
  __chkstk_darwin(v58);
  sub_10000E04C();
  sub_10001D79C(v59);
  uint64_t v256 = 0;
  uint64_t v60 = type metadata accessor for Apple_Parsec_Sba_V1_HashBucketDetail();
  sub_100020C48();
  uint64_t v62 = v61;
  uint64_t v64 = __chkstk_darwin(v63);
  uint64_t v66 = (char *)v231 - ((v65 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v64);
  sub_10001D79C((uint64_t)v231 - v67);
  uint64_t v68 = Apple_Parsec_Sba_V1_SafariAssistantPrefetchResponse.hashBuckets.getter();
  uint64_t v69 = *(void *)(v68 + 16);
  unint64_t v241 = v27;
  uint64_t v261 = v33;
  uint64_t v236 = v62;
  if (v69)
  {
    v246 = (char *)v53;
    v254 = *(void (**)(void))(v62 + 16);
    sub_10002B154();
    uint64_t v71 = v68 + v70;
    uint64_t v72 = *(void *)(v62 + 72);
    uint64_t v238 = v68;
    swift_bridgeObjectRetain();
    while (1)
    {
      unint64_t v27 = v60;
      ((void (*)(char *, uint64_t, uint64_t))v254)(v66, v71, v60);
      uint64_t v73 = Apple_Parsec_Sba_V1_HashBucketDetail.hashPrefix.getter();
      id v75 = v74;
      uint64_t v23 = v260;
      BOOL v77 = v73 == Apple_Parsec_Sba_V1_SafariAssistantPrefetchRequest.hashPrefix.getter() && v75 == v76;
      if (v77) {
        break;
      }
      uint64_t v23 = v76;
      sub_100023D58();
      char v78 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v78) {
        goto LABEL_13;
      }
      uint64_t v60 = v27;
      sub_100019BC8();
      v79();
      v71 += v72;
      if (!--v69)
      {
        swift_bridgeObjectRelease();
        sub_1000E2268();
        sub_10002EC8C();
        uint64_t v33 = v261;
        uint64_t v53 = (uint64_t)v246;
        goto LABEL_11;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_13:
    sub_10002EC8C();
    uint64_t v81 = v252;
    uint64_t v82 = v253;
    swift_bridgeObjectRelease();
    uint64_t v83 = (uint64_t)v250;
    uint64_t v60 = v27;
    sub_10000E0F4();
    v84();
    sub_1000E2268();
    uint64_t v33 = v261;
    uint64_t v53 = (uint64_t)v246;
  }
  else
  {
    sub_10002EC8C();
LABEL_11:
    uint64_t v81 = v252;
    uint64_t v82 = v253;
    uint64_t v83 = (uint64_t)v250;
  }
  sub_10002538C(v83, v80, 1, v60);
  swift_bridgeObjectRelease();
  unint64_t v85 = (unint64_t)&unk_1001A3000;
  if (sub_100027BA4(v83, 1, v60) == 1)
  {
    sub_100019994(v83, &qword_10021DE30);
    if (qword_100218AE8 == -1)
    {
LABEL_16:
      sub_10002A10C((uint64_t)v23, (uint64_t)qword_1002368D0);
      sub_1000E2AA0();
      swift_bridgeObjectRetain_n();
      uint64_t v86 = Logger.logObject.getter();
      os_log_type_t v87 = static os_log_type_t.default.getter();
      if (sub_1000E2838(v87))
      {
        uint64_t v88 = (_DWORD *)sub_100017D90();
        v265[0] = sub_10001AB54();
        *uint64_t v88 = *(void *)(v85 + 3808);
        swift_bridgeObjectRetain();
        uint64_t v89 = sub_1000E25B8();
        uint64_t v91 = sub_10001C274(v89, v27, v90);
        sub_1000E23E8(v91);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        sub_1000E2DD0((void *)&_mh_execute_header, v86, (os_log_type_t)v53, "Search response did not have any matching hash bucket for url %{sensitive}s");
        sub_1000E2E6C();
        sub_100017D40();
        sub_100017D40();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      uint64_t v101 = sub_1000E2F78();
      sub_10002538C(v101, v102, v103, v60);
      goto LABEL_91;
    }
LABEL_98:
    swift_once();
    goto LABEL_16;
  }
  sub_10000E0F4();
  v92();
  if (qword_100218AE8 != -1) {
    swift_once();
  }
  sub_1000E2174((uint64_t)v23, (uint64_t)qword_1002368D0);
  sub_100016608();
  v93();
  v250 = v23;
  uint64_t v94 = Logger.logObject.getter();
  os_log_type_t v95 = static os_log_type_t.debug.getter();
  BOOL v96 = os_log_type_enabled(v94, v95);
  v231[0] = v60;
  if (v96)
  {
    unint64_t v27 = sub_100017D90();
    v265[0] = sub_10001AB54();
    v246 = (char *)v53;
    *(_DWORD *)unint64_t v27 = 136642819;
    uint64_t v97 = Apple_Parsec_Sba_V1_SafariAssistantPrefetchRequest.hashPrefix.getter();
    uint64_t v99 = sub_10001C274(v97, v98, v265);
    sub_1000E23E8(v99);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100028214();
    v100();
    _os_log_impl((void *)&_mh_execute_header, v94, v95, "HashDetail.prefixHash: %{sensitive}s", (uint8_t *)v27, 0xCu);
    swift_arrayDestroy();
    sub_100017D40();
    sub_1000E2268();
    sub_100017D40();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v82 + 8))(v81, v53);
  }

  sub_1000E2FB8();
  uint64_t v104 = *(uint64_t **)(Apple_Parsec_Sba_V1_HashBucketDetail.hashDetails.getter() + 16);
  if (v104)
  {
    uint64_t v253 = *(void *)(v245 + 16);
    sub_10002B154();
    v246 = v105;
    uint64_t v60 = (uint64_t)&v105[v106];
    uint64_t v108 = *(void *)(v107 + 56);
    uint64_t v109 = _swiftEmptyDictionarySingleton;
    v254 = (void (*)(void))v107;
    v252 = (char *)(v107 + 16);
    LOBYTE(v53) = v259;
    while (1)
    {
      sub_100016608();
      v110();
      uint64_t v111 = Apple_Parsec_Sba_V1_HashBucketDetail.HashDetail.fullHash.getter();
      unint64_t v85 = v112;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v265[0] = (uint64_t)v109;
      uint64_t v114 = sub_1000E30A8();
      uint64_t v23 = v109;
      unint64_t v116 = sub_1000287F0(v114, v115);
      uint64_t v118 = v109[2];
      BOOL v119 = (v117 & 1) == 0;
      Swift::Int v120 = v118 + v119;
      if (__OFADD__(v118, v119)) {
        break;
      }
      unint64_t v27 = v116;
      char v121 = v117;
      sub_10002572C(&qword_10021DE68);
      uint64_t v23 = v265;
      Swift::Bool v122 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v120);
      uint64_t v123 = v261;
      if (v122)
      {
        uint64_t v23 = (uint64_t *)v265[0];
        uint64_t v124 = sub_1000E30A8();
        unint64_t v126 = sub_1000287F0(v124, v125);
        if ((v121 & 1) != (v127 & 1))
        {
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
LABEL_101:
          swift_bridgeObjectRelease();
          __break(1u);
          JUMPOUT(0x1000CB954);
        }
        unint64_t v27 = v126;
      }
      v260 = v104;
      uint64_t v109 = (uint64_t *)v265[0];
      if (v121)
      {
        unint64_t v128 = v27 * v108;
        unint64_t v129 = *(void *)(v265[0] + 56) + v27 * v108;
        uint64_t v130 = v265[0];
        v131 = *(void (**)(unint64_t, uint64_t, uint64_t))v252;
        unint64_t v27 = (unint64_t)v255;
        uint64_t v53 = v259;
        (*(void (**)(void (**)(void), unint64_t, uint64_t))v252)(v255, v129, v259);
        v131(*(void *)(v130 + 56) + v128, v262, v53);
        uint64_t v109 = (uint64_t *)v130;
        sub_10002538C(v27, 0, 1, v53);
      }
      else
      {
        *(void *)(v265[0] + 8 * (v27 >> 6) + 64) |= 1 << v27;
        uint64_t v132 = (uint64_t *)(v109[6] + 16 * v27);
        *uint64_t v132 = v111;
        v132[1] = v85;
        uint64_t v53 = v259;
        sub_100021CF0();
        v133();
        uint64_t v134 = v109[2];
        BOOL v135 = __OFADD__(v134, 1);
        uint64_t v136 = v134 + 1;
        if (v135) {
          goto LABEL_93;
        }
        v109[2] = v136;
        unint64_t v27 = (unint64_t)v255;
        uint64_t v137 = sub_1000E27AC();
        sub_10002538C(v137, v138, 1, v53);
        swift_bridgeObjectRetain();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_100019994(v27, &qword_10021DE60);
      v60 += v108;
      uint64_t v104 = (uint64_t *)((char *)v260 - 1);
      if (v260 == (uint64_t *)1)
      {
        swift_bridgeObjectRelease();
        sub_1000E2268();
        uint64_t v139 = v109;
        uint64_t v33 = v123;
        goto LABEL_38;
      }
    }
    __break(1u);
LABEL_93:
    __break(1u);
LABEL_94:
    __break(1u);
LABEL_95:
    __break(1u);
LABEL_96:
    __break(1u);
LABEL_97:
    __break(1u);
    goto LABEL_98;
  }
  swift_bridgeObjectRelease();
  uint64_t v139 = _swiftEmptyDictionarySingleton;
LABEL_38:
  v140 = sub_1000E26D0();
  os_log_type_t v141 = static os_log_type_t.default.getter();
  BOOL v142 = os_log_type_enabled(v140, v141);
  v260 = v139;
  if (v142)
  {
    uint64_t v139 = (uint64_t *)sub_100017D90();
    *(_DWORD *)uint64_t v139 = 134217984;
    unint64_t v27 = (unint64_t)v139 + 4;
    sub_1000E2FB8();
    swift_beginAccess();
    uint64_t v143 = Apple_Parsec_Sba_V1_HashBucketDetail.hashDetails.getter();
    swift_endAccess();
    uint64_t v144 = *(void *)(v143 + 16);
    swift_bridgeObjectRelease();
    v265[0] = v144;
    sub_1000E2268();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_1000E2B90((void *)&_mh_execute_header, v140, v141, "HashDetail.fullHash count: %ld");
    sub_100017D40();
  }

  sub_1000E2588((uint64_t)&v266);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_10002114C(0, v139[2] + 1, 1, (uint64_t)v139);
    uint64_t v139 = v229;
  }
  unint64_t v146 = v139[2];
  unint64_t v145 = v139[3];
  unint64_t v147 = v146 + 1;
  if (v146 >= v145 >> 1)
  {
    sub_10002114C(v145 > 1, v146 + 1, 1, (uint64_t)v139);
    uint64_t v139 = v230;
  }
  v139[2] = v147;
  v148 = &v139[2 * v146];
  v255 = (void (**)(void))(v242 + 8);
  v148[4] = v234;
  v148[5] = v27;
  uint64_t v253 = v244 + 8;
  v252 = v243 + 16;
  v246 = v243 + 8;
  sub_1000E2898();
  uint64_t v238 = v149 + 16;
  swift_bridgeObjectRetain();
  v237 = v139;
  unint64_t v27 = (unint64_t)(v139 + 5);
  *(void *)&long long v150 = 136642819;
  long long v244 = v150;
  v243 = (char *)&type metadata for Any + 8;
  do
  {
    uint64_t v151 = *(void *)(v27 - 8);
    unint64_t v152 = *(void *)v27;
    swift_bridgeObjectRetain();
    static String.Encoding.utf8.getter();
    uint64_t v262 = v151;
    uint64_t v60 = String.data(using:allowLossyConversion:)();
    unint64_t v85 = v153;
    v154 = *v255;
    sub_100024400();
    v154();
    v254 = v154;
    if (v85 >> 60 == 15)
    {
      swift_bridgeObjectRetain();
      v155 = sub_1000E26D0();
      os_log_type_t v156 = static os_log_type_t.error.getter();
      if (sub_1000165B4(v156))
      {
        uint64_t v157 = sub_100017D90();
        v265[0] = sub_10001AB54();
        *(_DWORD *)uint64_t v157 = v244;
        swift_bridgeObjectRetain();
        *(void *)(v157 + 4) = sub_10001C274(v262, v152, v265);
        swift_bridgeObjectRelease_n();
        sub_1000E2B90((void *)&_mh_execute_header, v155, (os_log_type_t)v151, "Could not sha256Base64Encode url %{sensitive}s");
        swift_arrayDestroy();
        sub_100017D40();
        sub_100017D40();
      }
      else
      {

        sub_1000E2E84();
      }
    }
    else
    {
      sub_10003233C(&qword_10021DE70, (void (*)(uint64_t))&type metadata accessor for SHA256);
      uint64_t v23 = (uint64_t *)v33;
      dispatch thunk of HashFunction.init()();
      switch(v85 >> 62)
      {
        case 1uLL:
          uint64_t v53 = v60 >> 32;
          if (v60 >> 32 < (int)v60) {
            goto LABEL_94;
          }
          uint64_t v23 = (uint64_t *)(v85 & 0x3FFFFFFFFFFFFFFFLL);
          sub_100027BCC(v60, v85);
          if (__DataStorage._bytes.getter() && __OFSUB__((int)v60, __DataStorage._offset.getter())) {
            goto LABEL_97;
          }
          __DataStorage._length.getter();
          dispatch thunk of HashFunction.update(bufferPointer:)();
          goto LABEL_62;
        case 2uLL:
          uint64_t v158 = *(void *)(v60 + 16);
          uint64_t v242 = *(void *)(v60 + 24);
          sub_1000B8F00(v60, v85);
          swift_retain();
          swift_retain();
          uint64_t v23 = (uint64_t *)(v85 & 0x3FFFFFFFFFFFFFFFLL);
          uint64_t v53 = __DataStorage._bytes.getter();
          if (!v53) {
            goto LABEL_54;
          }
          uint64_t v23 = (uint64_t *)(v85 & 0x3FFFFFFFFFFFFFFFLL);
          uint64_t v159 = __DataStorage._offset.getter();
          if (__OFSUB__(v158, v159)) {
            goto LABEL_96;
          }
          LOBYTE(v53) = v53 + v158 - v159;
LABEL_54:
          if (__OFSUB__(v242, v158)) {
            goto LABEL_95;
          }
          __DataStorage._length.getter();
          dispatch thunk of HashFunction.update(bufferPointer:)();
          swift_release();
          swift_release();
LABEL_62:
          sub_10000A330(v60, v85);
LABEL_63:
          sub_1000E2BA8();
          sub_1000E29B0();
          dispatch thunk of HashFunction.finalize()();
          sub_10000E040();
          v160();
          uint64_t v267 = v249;
          uint64_t v268 = sub_10003233C((unint64_t *)&qword_10021DE78, (void (*)(uint64_t))&type metadata accessor for SHA256Digest);
          sub_10002E5E8(v265);
          sub_10002A020();
          v161();
          sub_10001B620(v265, v267);
          uint64_t v162 = v256;
          dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();
          uint64_t v256 = v162;
          sub_10000E040();
          v163();
          uint64_t v164 = v264;
          sub_10001CA50((uint64_t)v265);
          sub_10002E728();
          uint64_t countAndFlagsBits = Data.base64EncodedString(options:)(v165)._countAndFlagsBits;
          uint64_t v167 = sub_10001AA80();
          sub_1000291B4(v167, v168);
          sub_10000A330(v60, v85);
          if (v260[2])
          {
            swift_bridgeObjectRetain();
            uint64_t v169 = sub_1000E269C();
            sub_1000287F0(v169, v170);
            uint64_t v164 = v247;
            if (v171)
            {
              uint64_t v172 = v259;
              sub_10002A020();
              v173();
              uint64_t v174 = 0;
            }
            else
            {
              uint64_t v174 = 1;
              uint64_t v172 = v259;
            }
            uint64_t v33 = v261;
            sub_10002538C(v164, v174, 1, v172);
            swift_bridgeObjectRelease();
            uint64_t v176 = sub_1000E2274();
            sub_1000184F4(v176, v177, v172);
            if (!v77)
            {
              swift_bridgeObjectRelease_n();
              sub_1000E2CC8();
              (*(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 32))(v231[2], v164, v259);
              swift_bridgeObjectRetain();
              sub_1000E2F4C();
              Apple_Parsec_Sba_V1_HashBucketDetail.HashDetail.matchedURLVariant.setter();
              sub_10002572C(&qword_10021DE80);
              os_log_type_t v194 = (*(unsigned char *)(v33 + 80) + 32) & ~*(unsigned char *)(v33 + 80);
              *(_OWORD *)(swift_allocObject() + 16) = xmmword_1001A2A20;
              sub_10002A020();
              v195();
              sub_1000E2588((uint64_t)&v269);
              sub_1000257C8();
              Apple_Parsec_Sba_V1_HashBucketDetail.hashDetails.setter();
              swift_endAccess();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              v196 = sub_1000E26D0();
              os_log_type_t v197 = static os_log_type_t.default.getter();
              if (sub_100019BAC(v197))
              {
                uint64_t v199 = sub_10001D784();
                uint64_t v262 = sub_100023E3C();
                v265[0] = v262;
                *(_DWORD *)uint64_t v199 = 136643075;
                swift_bridgeObjectRetain();
                uint64_t v200 = sub_1000E2F4C();
                uint64_t v263 = sub_10001C274(v200, v201, v202);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease_n();
                *(_WORD *)(v199 + 12) = 2085;
                swift_bridgeObjectRetain();
                uint64_t v203 = sub_1000E269C();
                uint64_t v263 = sub_10001C274(v203, v204, v205);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease_n();
                _os_log_impl((void *)&_mh_execute_header, v196, v194, "Found matching HashDetail for url %{sensitive}s, full hash: %{sensitive}s", (uint8_t *)v199, 0x16u);
                uint64_t countAndFlagsBits = v262;
                sub_10002EE98();
                sub_100017D40();
                sub_100017D40();
              }
              else
              {
                sub_1000E2E84();
                sub_1000E2594();
                swift_bridgeObjectRelease_n();
              }

              sub_100023C70();
              v206();
              sub_1000E2570();
              uint64_t v207 = v231[0];
              sub_100016608();
              v208();
              sub_10002538C(countAndFlagsBits, 0, 1, v207);
              swift_bridgeObjectRelease();
              sub_100016640();
              sub_1000292E0();
              v209();
              goto LABEL_91;
            }
          }
          else
          {
            uint64_t v175 = sub_1000E2588((uint64_t)&a15);
            sub_10002538C(v175, 1, 1, v259);
            uint64_t v33 = v261;
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_100019994(v164, &qword_10021DE60);
          break;
        case 3uLL:
          memset(v265, 0, 14);
          goto LABEL_57;
        default:
          v265[0] = v60;
          LOWORD(v265[1]) = v85;
          BYTE2(v265[1]) = BYTE2(v85);
          BYTE3(v265[1]) = BYTE3(v85);
          BYTE4(v265[1]) = BYTE4(v85);
          BYTE5(v265[1]) = BYTE5(v85);
LABEL_57:
          dispatch thunk of HashFunction.update(bufferPointer:)();
          sub_10000A330(v60, v85);
          goto LABEL_63;
      }
    }
    v27 += 16;
    --v147;
  }
  while (v147);
  swift_bridgeObjectRelease_n();
  sub_1000E2ED8();
  sub_1000E30D4();
  sub_100016608();
  v178();
  sub_1000E2268();
  swift_bridgeObjectRetain_n();
  v179 = Logger.logObject.getter();
  os_log_type_t v180 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v179, v180))
  {
    uint64_t v181 = sub_10001D784();
    uint64_t v262 = sub_100023E3C();
    v265[0] = v262;
    *(_DWORD *)uint64_t v181 = 136643075;
    swift_bridgeObjectRetain();
    uint64_t v182 = sub_1000E2588((uint64_t)&v264);
    uint64_t v184 = sub_10001C274(v182, v27, v183);
    sub_1000E23E8(v184);
    uint64_t v259 = v185;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v181 + 12) = 2085;
    static String.Encoding.utf8.getter();
    uint64_t v186 = String.data(using:allowLossyConversion:)();
    unint64_t v188 = v187;
    sub_100024400();
    v189();
    if (v188 >> 60 == 15)
    {
      object = (void *)0xE400000000000000;
      uint64_t v191 = 1701736302;
    }
    else
    {
      sub_10003233C(&qword_10021DE70, (void (*)(uint64_t))&type metadata accessor for SHA256);
      dispatch thunk of HashFunction.init()();
      switch(v188 >> 62)
      {
        case 1uLL:
          if (v186 >> 32 < (int)v186) {
            __break(1u);
          }
          uint64_t v258 = (int)v186;
          sub_100027BCC(v186, v188);
          sub_10002E728();
          uint64_t v214 = v256;
          sub_1000DF634(v215, v216);
          if (!v214) {
            goto LABEL_88;
          }
          goto LABEL_101;
        case 2uLL:
          uint64_t v210 = *(void *)(v186 + 16);
          uint64_t v258 = *(void *)(v186 + 24);
          sub_1000B8F00(v186, v188);
          swift_retain();
          swift_retain();
          uint64_t v211 = v210;
          uint64_t v212 = v256;
          sub_1000DF634(v211, v258);
          swift_release();
          swift_release();
          if (v212) {
            goto LABEL_101;
          }
          goto LABEL_88;
        case 3uLL:
          sub_100026FC8();
          goto LABEL_84;
        default:
LABEL_84:
          uint64_t v213 = v256;
          sub_1000DF714();
          if (v213) {
            goto LABEL_101;
          }
LABEL_88:
          sub_10000A330(v186, v188);
          uint64_t v217 = v231[1];
          dispatch thunk of HashFunction.finalize()();
          sub_10000E040();
          v218();
          uint64_t v219 = sub_1000F9344(v217);
          unint64_t v221 = v220;
          Swift::String v222 = Data.base64EncodedString(options:)(0);
          uint64_t v191 = v222._countAndFlagsBits;
          object = v222._object;
          sub_1000291B4(v219, v221);
          sub_10000A330(v186, v188);
          break;
      }
    }
    uint64_t v263 = sub_10001C274(v191, (unint64_t)object, v265);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_1000E2DA4();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v179, v180, "No matching HashDetail for url %{sensitive}s, full hash: %{sensitive}s", (uint8_t *)v181, 0x16u);
    sub_1000E24A4();
    sub_100017D40();
    sub_100017D40();

    sub_1000E26C4();
    v223(v232, v239);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    uint64_t v192 = sub_10001AA80();
    v193(v192);
  }
  uint64_t v224 = v236;
  uint64_t v225 = sub_1000E2F78();
  uint64_t v226 = v231[0];
  sub_10002538C(v225, v227, v228, v231[0]);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v224 + 8))(v240, v226);
LABEL_91:
  sub_10000DFB8();
}

uint64_t sub_1000CB974(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[7] = v14;
  v8[8] = v15;
  v8[5] = a7;
  void v8[6] = a8;
  v8[3] = a5;
  void v8[4] = a6;
  v8[2] = a4;
  uint64_t v9 = type metadata accessor for ProxyError();
  v8[9] = v9;
  v8[10] = *(void *)(v9 - 8);
  v8[11] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Apple_Parsec_Sba_V1_SafariAssistantSummarizeResponse();
  v8[12] = v10;
  v8[13] = *(void *)(v10 - 8);
  v8[14] = swift_task_alloc();
  v8[15] = sub_10002572C(&qword_10021DE98);
  v8[16] = swift_task_alloc();
  v8[17] = swift_task_alloc();
  type metadata accessor for PegasusContext(0);
  v8[18] = swift_task_alloc();
  type metadata accessor for Apple_Parsec_Search_PegasusQueryContext();
  v8[19] = swift_task_alloc();
  sub_10002572C(&qword_10021DEA0);
  v8[20] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for Apple_Parsec_Sba_V1_SafariAssistantSummarizeRequest();
  v8[21] = v11;
  v8[22] = *(void *)(v11 - 8);
  v8[23] = swift_task_alloc();
  return _swift_task_switch(sub_1000CBBCC, 0, 0);
}

uint64_t sub_1000CBBCC()
{
  uint64_t v2 = *(void *)(v0 + 160);
  uint64_t v1 = *(void *)(v0 + 168);
  id v3 = [*(id *)(v0 + 24) urlString];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  sub_10002DEA8();
  dispatch thunk of PegasusProxyForSafariAssistant.createSummarizeRequest(urlString:)();
  swift_bridgeObjectRelease();
  sub_1000184F4(v2, 1, v1);
  if (v4)
  {
    uint64_t v5 = *(void (**)(void))(v0 + 40);
    uint64_t v7 = *(void **)(v0 + 24);
    uint64_t v6 = *(void *)(v0 + 32);
    sub_100019994(*(void *)(v0 + 160), &qword_10021DEA0);
    *(unsigned char *)(v6 + qword_10021B6C8) = 17;
    sub_100011708();
    [v7 queryId];
    sub_100026FC8();
    v5();
    sub_10002EFA4();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_100017DBC();
    return v8();
  }
  else
  {
    uint64_t v10 = *(void *)(v0 + 144);
    sub_10000E0F4();
    v11();
    sub_100023FDC(v10);
    sub_1000E2B08();
    sub_100027C24(v10, (void (*)(void))type metadata accessor for PegasusContext);
    Apple_Parsec_Sba_V1_SafariAssistantSummarizeRequest.queryContext.setter();
    uint64_t v16 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to dispatch thunk of PegasusProxyForSafariAssistant.summarize(searchRequest:)
                                                   + async function pointer to dispatch thunk of PegasusProxyForSafariAssistant.summarize(searchRequest:));
    swift_task_alloc();
    sub_1000E2F6C();
    *(void *)(v0 + 192) = v12;
    *uint64_t v12 = v13;
    v12[1] = sub_1000CBDFC;
    uint64_t v14 = *(void *)(v0 + 184);
    uint64_t v15 = *(void *)(v0 + 136);
    return v16(v15, v14);
  }
}

uint64_t sub_1000CBDFC()
{
  sub_100023C50();
  sub_100026880();
  uint64_t v1 = *v0;
  sub_10001DD38();
  void *v2 = v1;
  swift_task_dealloc();
  sub_100026FC8();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_1000CBEC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_1000E26E8();
  sub_1000E2BCC();
  sub_10002B9E8(v12[17], v12[16], &qword_10021DE98);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v13 = (void (*)(uint64_t))v12[5];
    sub_1000E2C90();
    sub_10000E0F4();
    v14();
    sub_1000E2C40(qword_10021B6C8);
    sub_10003233C(&qword_10021DE48, (void (*)(uint64_t))&type metadata accessor for ProxyError);
    uint64_t v15 = sub_100024A30();
    sub_100026344();
    v16();
    sub_100030D6C(v15);
    swift_errorRelease();
    uint64_t v17 = sub_1000E3074();
    v13(v17);
    swift_errorRelease();
  }
  else
  {
    uint64_t v18 = v12[12];
    uint64_t v19 = v12[4];
    sub_10000E0F4();
    v20();
    *(unsigned char *)(v19 + qword_10021B6C8) = 2;
    id v21 = [objc_allocWithZone((Class)PARReply) init];
    sub_10003233C(&qword_10021DEA8, (void (*)(uint64_t))&type metadata accessor for Apple_Parsec_Sba_V1_SafariAssistantSummarizeResponse);
    uint64_t v22 = sub_10001DB48();
    if (v18)
    {
      swift_errorRelease();
      Class isa = 0;
    }
    else
    {
      uint64_t v25 = v22;
      unint64_t v26 = v23;
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      sub_1000291B4(v25, v26);
    }
    unint64_t v27 = (void (*)(void))v12[5];
    uint64_t v28 = (void *)v12[3];
    [v21 setData:isa];

    [v28 queryId];
    id v29 = v21;
    sub_1000E24C8();
    v27();
  }
  uint64_t v30 = v12[17];
  sub_100024400();
  v31();
  sub_100011708();
  sub_100019994(v30, &qword_10021DE98);
  sub_1000283AC();
  v32();
  sub_10002EFA4();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_100017DBC();
  sub_1000E21F8();
  return v34(v33, v34, v35, v36, v37, v38, v39, v40, a9, a10, a11, a12);
}

uint64_t sub_1000CC1B0(uint64_t a1)
{
  *(void *)(v1 + *(void *)(*(void *)v1 + 472)) = a1;
  swift_errorRetain();

  return swift_errorRelease();
}

id sub_1000CC200(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    NSString v5 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v5 = 0;
  }
  id v6 = [v3 initWithTriggerEvent:a1 input:v5];

  return v6;
}

id sub_1000CC274(uint64_t a1, uint64_t a2, uint64_t a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a6)
  {
    NSString v17 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v17 = 0;
  }
  if (a8)
  {
    NSString v18 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v18 = 0;
  }
  if (!a10)
  {
    NSString v19 = 0;
    if (a11) {
      goto LABEL_9;
    }
LABEL_11:
    v20.super.Class isa = 0;
    goto LABEL_12;
  }
  NSString v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (!a11) {
    goto LABEL_11;
  }
LABEL_9:
  v20.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
LABEL_12:
  id v21 = [v11 initWithStartSearch:a1 responseSize:a2 statusCode:a3 parsecStatus:v17 parsecDuration:v18 fbq:v19 partialClientIp:a4 networkTimingData:v20.super.isa];

  swift_unknownObjectRelease();
  return v21;
}

uint64_t sub_1000CC3E0(uint64_t isStackAllocationSafe)
{
  uint64_t v2 = isStackAllocationSafe;
  char v3 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v4 = (unint64_t)((1 << v3) + 63) >> 6;
  if ((v3 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    NSString v5 = (uint64_t *)((char *)&v9 - ((8 * v4 + 15) & 0x3FFFFFFFFFFFFFF0));
    sub_10008FF84(0, v4, v5);
    uint64_t v6 = sub_1000CC544((uint64_t)v5, v4, v2);
    if (v1) {
      swift_willThrow();
    }
    else {
      return v6;
    }
  }
  else
  {
    uint64_t v7 = (void *)swift_slowAlloc();
    sub_10008FF84(0, v4, v7);
    uint64_t v2 = sub_1000CC544((uint64_t)v7, v4, v2);
    swift_slowDealloc();
  }
  return v2;
}

uint64_t sub_1000CC544(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v31 = (unint64_t *)result;
  uint64_t v32 = 0;
  int64_t v4 = 0;
  uint64_t v5 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(a3 + 64);
  int64_t v35 = (unint64_t)(v5 + 63) >> 6;
  CFStringRef v8 = @"X-Apple-GeoMetadata";
  while (v7)
  {
    unint64_t v9 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v10 = v9 | (v4 << 6);
LABEL_17:
    uint64_t v14 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v10);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v15 && v17 == v16)
    {
LABEL_42:
      uint64_t result = swift_bridgeObjectRelease();
    }
    else
    {
      CFStringRef v19 = v8;
      char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v20) {
        goto LABEL_41;
      }
      if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v15 && v21 == v16) {
        goto LABEL_40;
      }
      char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v23) {
        goto LABEL_41;
      }
      if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v15 && v24 == v16) {
        goto LABEL_40;
      }
      char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v26) {
        goto LABEL_41;
      }
      if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v15 && v27 == v16)
      {
LABEL_40:
        swift_bridgeObjectRelease();
LABEL_41:
        swift_bridgeObjectRelease();
        CFStringRef v8 = v19;
        uint64_t v3 = a3;
        goto LABEL_42;
      }
      char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      CFStringRef v8 = v19;
      uint64_t v3 = a3;
      if ((v29 & 1) == 0)
      {
        *(unint64_t *)((char *)v31 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
        BOOL v11 = __OFADD__(v32++, 1);
        if (v11) {
          goto LABEL_50;
        }
      }
    }
  }
  BOOL v11 = __OFADD__(v4++, 1);
  if (v11)
  {
    __break(1u);
    goto LABEL_49;
  }
  if (v4 >= v35) {
    return sub_1000CC87C(v31, a2, v32, v3);
  }
  unint64_t v12 = *(void *)(v34 + 8 * v4);
  if (v12)
  {
LABEL_16:
    unint64_t v7 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v4 << 6);
    goto LABEL_17;
  }
  int64_t v13 = v4 + 1;
  if (v4 + 1 >= v35) {
    return sub_1000CC87C(v31, a2, v32, v3);
  }
  unint64_t v12 = *(void *)(v34 + 8 * v13);
  if (v12) {
    goto LABEL_15;
  }
  int64_t v13 = v4 + 2;
  if (v4 + 2 >= v35) {
    return sub_1000CC87C(v31, a2, v32, v3);
  }
  unint64_t v12 = *(void *)(v34 + 8 * v13);
  if (v12) {
    goto LABEL_15;
  }
  int64_t v13 = v4 + 3;
  if (v4 + 3 >= v35) {
    return sub_1000CC87C(v31, a2, v32, v3);
  }
  unint64_t v12 = *(void *)(v34 + 8 * v13);
  if (v12)
  {
LABEL_15:
    int64_t v4 = v13;
    goto LABEL_16;
  }
  while (1)
  {
    int64_t v4 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v4 >= v35) {
      return sub_1000CC87C(v31, a2, v32, v3);
    }
    unint64_t v12 = *(void *)(v34 + 8 * v4);
    ++v13;
    if (v12) {
      goto LABEL_16;
    }
  }
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
  return result;
}

uint64_t sub_1000CC87C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    return (uint64_t)_swiftEmptyDictionarySingleton;
  }
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  sub_10002572C(&qword_10021DBC8);
  uint64_t result = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v9 = result;
  uint64_t v37 = a1;
  uint64_t v38 = a2;
  if (a2 < 1) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = *a1;
  }
  uint64_t v11 = 0;
  uint64_t v12 = result + 64;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      uint64_t v39 = v11;
      unint64_t v14 = v13 | (v11 << 6);
    }
    else
    {
      uint64_t v15 = v11 + 1;
      if (__OFADD__(v11, 1)) {
        goto LABEL_40;
      }
      if (v15 >= v38) {
        return v9;
      }
      unint64_t v16 = v37[v15];
      uint64_t v17 = v11 + 1;
      if (!v16)
      {
        uint64_t v17 = v11 + 2;
        if (v11 + 2 >= v38) {
          return v9;
        }
        unint64_t v16 = v37[v17];
        if (!v16)
        {
          uint64_t v17 = v11 + 3;
          if (v11 + 3 >= v38) {
            return v9;
          }
          unint64_t v16 = v37[v17];
          if (!v16)
          {
            uint64_t v18 = v11 + 4;
            if (v11 + 4 >= v38) {
              return v9;
            }
            unint64_t v16 = v37[v18];
            if (!v16)
            {
              while (1)
              {
                uint64_t v17 = v18 + 1;
                if (__OFADD__(v18, 1)) {
                  goto LABEL_41;
                }
                if (v17 >= v38) {
                  return v9;
                }
                unint64_t v16 = v37[v17];
                ++v18;
                if (v16) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v17 = v11 + 4;
          }
        }
      }
LABEL_24:
      unint64_t v10 = (v16 - 1) & v16;
      uint64_t v39 = v17;
      unint64_t v14 = __clz(__rbit64(v16)) + (v17 << 6);
    }
    uint64_t v19 = v4;
    char v20 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v14);
    uint64_t v22 = *v20;
    uint64_t v21 = v20[1];
    char v23 = (uint64_t *)(*(void *)(v4 + 56) + 16 * v14);
    uint64_t v24 = *v23;
    uint64_t v25 = v23[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v26 = -1 << *(unsigned char *)(v9 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v12 + 8 * (v27 >> 6))) == 0) {
      break;
    }
    unint64_t v29 = __clz(__rbit64((-1 << v27) & ~*(void *)(v12 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
LABEL_34:
    *(void *)(v12 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v29;
    uint64_t v34 = (void *)(*(void *)(v9 + 48) + 16 * v29);
    void *v34 = v22;
    v34[1] = v21;
    int64_t v35 = (void *)(*(void *)(v9 + 56) + 16 * v29);
    *int64_t v35 = v24;
    v35[1] = v25;
    ++*(void *)(v9 + 16);
    if (__OFSUB__(v5--, 1)) {
      goto LABEL_39;
    }
    uint64_t v4 = v19;
    uint64_t v11 = v39;
    if (!v5) {
      return v9;
    }
  }
  char v30 = 0;
  unint64_t v31 = (unint64_t)(63 - v26) >> 6;
  while (++v28 != v31 || (v30 & 1) == 0)
  {
    BOOL v32 = v28 == v31;
    if (v28 == v31) {
      unint64_t v28 = 0;
    }
    v30 |= v32;
    uint64_t v33 = *(void *)(v12 + 8 * v28);
    if (v33 != -1)
    {
      unint64_t v29 = __clz(__rbit64(~v33)) + (v28 << 6);
      goto LABEL_34;
    }
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1000CCB2C(void *a1)
{
  id v1 = [a1 userInfo];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_1000CCB98(void *a1)
{
  id v1 = [a1 completionCacheSuggestions];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  sub_100023FA0(0, (unint64_t *)&qword_10021DD50);
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_1000CCC08(void *a1)
{
  return sub_10000896C(a1, (SEL *)&selRef_previouslyEngagedQuery);
}

uint64_t sub_1000CCC14(void *a1)
{
  return sub_10000896C(a1, (SEL *)&selRef_keyboardInputMode);
}

uint64_t sub_1000CCC20(void *a1)
{
  return sub_10000896C(a1, (SEL *)&selRef_searchString);
}

uint64_t sub_1000CCC2C(void *a1)
{
  return sub_10000896C(a1, (SEL *)&selRef_tokenString);
}

uint64_t sub_1000CCC38(void *a1)
{
  id v2 = [a1 jsonData];

  if (!v2) {
    return 0;
  }
  uint64_t v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

void sub_1000CCCA8(uint64_t a1, void *a2)
{
  sub_100023FA0(0, (unint64_t *)&qword_10021DD50);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [a2 setCompletionCacheSuggestions:isa];
}

void sub_1000CCD2C(uint64_t a1, uint64_t a2, void *a3)
{
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [a3 setInput:v4];
}

void sub_1000CCD90(uint64_t a1, uint64_t a2, void *a3)
{
  NSString v4 = String._bridgeToObjectiveC()();
  [a3 setInput:v4];
}

void sub_1000CCDE8(uint64_t a1, unint64_t a2, void *a3)
{
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_1000291B4(a1, a2);
  [a3 setData:isa];
}

uint64_t sub_1000CCE5C(void *a1)
{
  id v1 = [a1 bagData];
  if (v1)
  {
    id v2 = v1;
    static Data._unconditionallyBridgeFromObjectiveC(_:)();
  }
  return sub_100027EA8();
}

void sub_1000CCEBC(uint64_t a1, uint64_t a2, void *a3)
{
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  [a3 setData:isa];
}

void sub_1000CCF14()
{
  sub_10000DFE0();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  v427 = v6;
  CFStringRef v8 = v7;
  v454 = (char *)type metadata accessor for Logger();
  sub_100020C48();
  uint64_t v416 = v9;
  __chkstk_darwin(v10);
  uint64_t v415 = v11;
  sub_10001AB78();
  uint64_t v425 = v12;
  sub_10002572C(&qword_10021DC30);
  sub_100020C48();
  v403[3] = v14;
  v403[4] = v13;
  __chkstk_darwin(v13);
  sub_10000E04C();
  v403[2] = v15;
  sub_10002572C(&qword_10021DC38);
  sub_100020C48();
  v403[6] = v17;
  v403[7] = v16;
  __chkstk_darwin(v16);
  sub_10000E04C();
  v403[5] = v18;
  sub_10002572C(&qword_10021DC40);
  sub_100020C48();
  uint64_t v405 = v20;
  uint64_t v406 = v19;
  __chkstk_darwin(v19);
  sub_10000E04C();
  uint64_t v404 = v21;
  sub_10002572C(&qword_10021DC48);
  sub_100020C48();
  uint64_t v410 = v23;
  uint64_t v411 = v22;
  __chkstk_darwin(v22);
  sub_100017D2C();
  uint64_t v422 = v24;
  sub_10000E100();
  __chkstk_darwin(v25);
  sub_100021308();
  uint64_t v407 = v26;
  sub_10000E100();
  __chkstk_darwin(v27);
  sub_100024FFC();
  uint64_t v409 = v28;
  uint64_t v424 = sub_10002572C(&qword_10021DC50);
  sub_100020C48();
  uint64_t v430 = v29;
  __chkstk_darwin(v30);
  sub_100017D2C();
  uint64_t v408 = v31;
  sub_10000E100();
  __chkstk_darwin(v32);
  sub_100024FFC();
  uint64_t v423 = v33;
  sub_10002572C(&qword_10021DC58);
  sub_100020C48();
  uint64_t v418 = v35;
  uint64_t v419 = v34;
  __chkstk_darwin(v34);
  sub_10000E04C();
  uint64_t v417 = v36;
  uint64_t v37 = sub_1000E23FC();
  uint64_t v38 = sub_100024920(v37);
  uint64_t v412 = v39;
  __chkstk_darwin(v38);
  sub_10002CDD4();
  uint64_t v413 = v41;
  uint64_t v414 = v40;
  sub_100019BD4();
  __chkstk_darwin(v42);
  sub_100024FFC();
  uint64_t v426 = v43;
  uint64_t v44 = sub_10002572C(&qword_10021DC60);
  uint64_t v45 = sub_100016544(v44);
  __chkstk_darwin(v45);
  sub_10000E04C();
  uint64_t v428 = v46;
  sub_100029488();
  type metadata accessor for Apple_Parsec_Search_V2_SearchResponse();
  sub_100020C48();
  v432 = v48;
  v433 = v47;
  __chkstk_darwin(v47);
  sub_10000E04C();
  v431 = v49;
  sub_1000E29EC();
  sub_100020C48();
  v438 = v51;
  uint64_t v439 = v50;
  __chkstk_darwin(v50);
  sub_10002CDD4();
  uint64_t v421 = v52;
  sub_100019BD4();
  __chkstk_darwin(v53);
  sub_100024FFC();
  v403[1] = v54;
  sub_100019BD4();
  __chkstk_darwin(v55);
  sub_100024FFC();
  v429 = v56;
  sub_100019BD4();
  __chkstk_darwin(v57);
  sub_100024FFC();
  id v434 = v58;
  sub_100019BD4();
  __chkstk_darwin(v59);
  sub_100024FFC();
  v441 = v60;
  uint64_t v420 = v61;
  __chkstk_darwin(v62);
  sub_100024FFC();
  uint64_t v440 = v63;
  uint64_t v64 = sub_1000E2280();
  uint64_t v65 = sub_100016544(v64);
  __chkstk_darwin(v65);
  sub_10000E04C();
  uint64_t v442 = v66;
  uint64_t v67 = sub_1000E25E8();
  uint64_t v68 = sub_100016544(v67);
  __chkstk_darwin(v68);
  sub_1000E2644(v69, (uint64_t)v403[0]);
  uint64_t v70 = sub_10002572C(&qword_10021BF30);
  uint64_t v71 = sub_100016544(v70);
  __chkstk_darwin(v71);
  sub_100017D2C();
  uint64_t v447 = v72;
  sub_10000E100();
  uint64_t v74 = __chkstk_darwin(v73);
  sub_1000E2F58(v74, v75, v76, v77, v78, v79, v80, v81, (uint64_t)v403[0]);
  uint64_t v460 = type metadata accessor for UserAgent();
  sub_100020C48();
  uint64_t v450 = v82;
  __chkstk_darwin(v83);
  sub_100017D2C();
  v446 = v84;
  sub_10000E100();
  __chkstk_darwin(v85);
  v448 = (char *)v403 - v86;
  sub_1000E25D0();
  sub_100020C48();
  v435 = v88;
  v436 = (void *)v87;
  __chkstk_darwin(v87);
  sub_100017DC8();
  uint64_t v89 = sub_10002572C((uint64_t *)&unk_10021DC68);
  sub_100020C48();
  uint64_t v451 = v90;
  __chkstk_darwin(v91);
  sub_100016500();
  uint64_t v452 = sub_100023CE4();
  *(void *)(v452 + 16) = v3;
  _Block_copy(v3);
  v453 = (void *)v3;
  _Block_copy(v3);
  uint64_t v456 = v0;
  Regex.init(_regexString:version:)();
  id v92 = [v8 queryString];
  uint64_t v93 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v95 = v94;

  uint64_t v467 = v93;
  uint64_t v468 = v95;
  swift_retain();
  sub_10001DAF4((uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__client, (void (*)(uint64_t))sub_10002A150);
  [v8 queryId];
  sub_1000E2454();
  sub_1000281FC();
  BOOL v96 = (void *)sub_1000E2594();
  uint64_t v437 = v1;
  uint64_t v97 = v1;
  unint64_t v98 = v8;
  uint64_t v455 = sub_100029254(v96, v99, v97);
  id v100 = [v8 queryCommand];
  if (v100)
  {
    uint64_t v101 = v100;
    self;
    uint64_t v102 = swift_dynamicCastObjCClass();
    if (v102)
    {
      uint64_t v103 = (void *)v102;
      id v104 = v101;
      uint64_t v105 = sub_10000896C(v103, (SEL *)&selRef_tokenString);
      unint64_t v107 = v106;
      swift_bridgeObjectRelease();

      if (v107) {
        uint64_t v108 = v105;
      }
      else {
        uint64_t v108 = 0;
      }
      unint64_t v109 = 0xE000000000000000;
      if (v107) {
        unint64_t v109 = v107;
      }
LABEL_15:
      uint64_t v467 = v108;
      uint64_t v468 = v109;
      goto LABEL_16;
    }
    self;
    uint64_t v110 = swift_dynamicCastObjCClass();
    if (v110)
    {
      uint64_t v111 = (void *)v110;
      id v112 = v101;
      uint64_t v113 = sub_10000896C(v111, (SEL *)&selRef_searchString);
      unint64_t v115 = v114;
      swift_bridgeObjectRelease();

      if (v115) {
        uint64_t v108 = v113;
      }
      else {
        uint64_t v108 = 0;
      }
      unint64_t v109 = 0xE000000000000000;
      if (v115) {
        unint64_t v109 = v115;
      }
      goto LABEL_15;
    }
  }
LABEL_16:
  v463[0] = 0;
  swift_stdlib_random();
  uint64_t v449 = v463[0];
  if (qword_100218AE8 != -1) {
    swift_once();
  }
  uint64_t v116 = sub_10002A10C((uint64_t)v454, (uint64_t)qword_1002368D0);
  swift_retain_n();
  id v117 = v98;
  uint64_t v118 = Logger.logObject.getter();
  os_log_type_t v119 = static os_log_type_t.default.getter();
  BOOL v120 = os_log_type_enabled(v118, v119);
  uint64_t v459 = v89;
  uint64_t v457 = v5;
  if (v120)
  {
    uint64_t v121 = swift_slowAlloc();
    uint64_t v444 = v116;
    uint64_t v122 = v121;
    v458 = (void *)sub_100023E3C();
    v463[0] = (uint64_t)v458;
    *(_DWORD *)uint64_t v122 = 136447235;
    type metadata accessor for SessionType();
    sub_10003233C(&qword_10021DB60, (void (*)(uint64_t))&type metadata accessor for SessionType);
    uint64_t v123 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v125 = sub_10001C274(v123, v124, v463);
    sub_1000E24EC(v125);
    sub_1000E2C78();
    swift_bridgeObjectRelease();
    *(_WORD *)(v122 + 12) = 2050;
    id v126 = [v117 queryId];

    *(void *)&long long v461 = v126;
    sub_1000E297C();

    *(_WORD *)(v122 + 22) = 2050;
    *(void *)&long long v461 = v449;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v122 + 32) = 2085;
    sub_100017F00();
    swift_bridgeObjectRetain();
    uint64_t v127 = sub_1000E2E40();
    *(void *)&long long v461 = sub_10001C274(v127, v128, v129);
    sub_1000E297C();
    swift_bridgeObjectRelease();
    *(_WORD *)(v122 + 42) = 2048;
    swift_bridgeObjectRetain();
    sub_1000E2E40();
    uint64_t v130 = String.UTF16View.count.getter();
    uint64_t v5 = v457;
    swift_bridgeObjectRelease();
    *(void *)&long long v461 = v130;
    sub_10002E728();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v118, v119, "Session %{public}s performing query %{public}llu requestId: %{public}llu '%{sensitive}s', length: %ld", (uint8_t *)v122, 0x34u);
    sub_1000E24A4();
    sub_100017D40();
    uint64_t v116 = v444;
    sub_100017D40();
  }
  else
  {

    sub_1000E2C78();
  }
  sub_10000F62C();
  if ((v131 & 1) == 0)
  {
    v458 = v117;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_10002572C(&qword_100219280);
    uint64_t inited = (__n128 *)swift_initStackObject();
    v140 = sub_100025460(inited, (__n128)xmmword_1001A2A20);
    v140[4].n128_u64[1] = (unint64_t)&type metadata for String;
    sub_100018548((uint64_t)v140, 0xD000000000000013);
    Dictionary.init(dictionaryLiteral:)();
    id v141 = objc_allocWithZone((Class)NSError);
    BOOL v142 = (char *)sub_1000E2514();
    uint64_t v143 = (void *)Logger.logObject.getter();
    os_log_type_t v144 = static os_log_type_t.error.getter();
    BOOL v145 = sub_1000E287C(v144);
    v454 = v142;
    if (v145)
    {
      unint64_t v146 = (_DWORD *)sub_100017D90();
      v463[0] = sub_10001AB54();
      *unint64_t v146 = 136642819;
      sub_100017F00();
      uint64_t v148 = v467;
      unint64_t v147 = v468;
      swift_bridgeObjectRetain();
      uint64_t v466 = sub_10001C274(v148, v147, v463);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10002ECC4((void *)&_mh_execute_header, v149, v150, "Bag fetch failed, can't complete query: %{sensitive}s");
      swift_arrayDestroy();
      sub_100017D40();
      sub_100017D40();
    }

    uint64_t v151 = v460;
    sub_100017F00();
    uint64_t v152 = v467;
    uint64_t v153 = v468;
    id v154 = objc_allocWithZone((Class)_CPSkipSearchFeedback);
    swift_bridgeObjectRetain();
    id v155 = sub_1000CC200(3, v152, v153);
    os_log_type_t v156 = *(char ***)(v457 + 64);
    swift_unknownObjectRetain();
    id v157 = [v458 queryId];
    id v158 = [objc_allocWithZone((Class)_CPFeedbackPayload) initWithCodable:v155];
    [v158 setQueryId:v157];
    uint64_t v159 = v447;
    sub_10001DAF4((uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__userAgent, (void (*)(uint64_t))sub_10002A280);
    sub_1000184F4(v159, 1, v151);
    if (v135)
    {
      parsecdUserAgent.getter();
      sub_100019994(v159, &qword_10021BF30);
    }
    else
    {
      sub_1000E257C();
      uint64_t v175 = sub_10002E854();
      v176(v175);
    }
    sub_1000148D0();
    swift_unknownObjectRelease();

    sub_1000283AC();
    v177();
    [v458 queryId];
    uint64_t v178 = (uint64_t)v454;
    v179 = v454;
    id v180 = sub_100030D6C(v178);

    if (v180) {
      uint64_t v181 = (void *)_convertErrorToNSError(_:)();
    }
    else {
      uint64_t v181 = 0;
    }
    uint64_t v182 = sub_10002EED8();
    v183(v182);

    swift_errorRelease();
    sub_1000E24D4(qword_10021B6C8);

    swift_release();
    sub_1000E25C4();
    goto LABEL_37;
  }
  uint64_t v132 = (uint64_t)v445;
  sub_10001DAF4((uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__userAgent, (void (*)(uint64_t))sub_10002A280);
  uint64_t v133 = sub_1000E2274();
  sub_1000184F4(v133, v134, v460);
  if (v135)
  {
    sub_100019994(v132, &qword_10021BF30);
    [v117 queryId];
    uint64_t v136 = v453;
    uint64_t v137 = sub_1000270F4();
    v138(v137);
    sub_1000E24D4(qword_10021B6C8);
    swift_release();
LABEL_47:
    sub_10000E040();
    v203();
    sub_1000E2820();
    swift_bridgeObjectRelease();
    _Block_release(v136);
    uint64_t v174 = (char **)v136;
    goto LABEL_48;
  }
  v458 = v117;
  uint64_t v444 = v116;
  sub_10000E0F4();
  v160();
  sub_100017F00();
  v463[0] = v467;
  v463[1] = v468;
  sub_1000E0714();
  sub_100092CA8((unint64_t *)&unk_10021DC80, (uint64_t *)&unk_10021DC68);
  char v161 = BidirectionalCollection<>.starts<A>(with:)();
  if (v161)
  {
    id v162 = objc_allocWithZone((Class)_CPSkipSearchFeedback);
    sub_1000E3018();
    swift_bridgeObjectRetain();
    sub_1000E21C4();
    v166 = (char *)sub_1000CC200(v163, v164, v165);
    v454 = v166;
    swift_unknownObjectRetain();
    uint64_t v167 = v458;
    id v168 = [v458 queryId];
    id v169 = [objc_allocWithZone((Class)_CPFeedbackPayload) initWithCodable:v166];
    [v169 setQueryId:v168];
    sub_1000148D0();
    swift_unknownObjectRelease();

    [v167 queryId];
    uint64_t v170 = v453;
    sub_1000260E0();
    v171();
    sub_1000E24D4(qword_10021B6C8);
    swift_release();

    sub_100016614();
    v172();
    sub_1000E2CD4();
LABEL_32:
    sub_10000E040();
    v173();
    sub_1000E2820();
    swift_bridgeObjectRelease();
    _Block_release(v170);
    uint64_t v174 = (char **)v170;
LABEL_48:
    _Block_release(v174);
    sub_10000DFB8();
    return;
  }
  uint64_t v185 = sub_100012824((uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__bag, (uint64_t (*)(uint64_t))sub_100012864);
  uint64_t v186 = v458;
  if (!v185)
  {
    [v458 queryId];
    uint64_t v136 = v453;
    uint64_t v198 = sub_1000270F4();
    v199(v198);
    sub_1000E24D4(qword_10021B6C8);
    swift_release();
LABEL_46:
    sub_10000E040();
    v202();
    sub_1000E2C08();
    goto LABEL_47;
  }
  unint64_t v187 = (SEL *)v185;
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  uint64_t v189 = v455;
  if (!Strong)
  {
    [v186 queryId];
    uint64_t v136 = v453;
    uint64_t v200 = sub_1000270F4();
    v201(v200);
    sub_1000E27D4(qword_10021B6C8);
    swift_release();

    goto LABEL_46;
  }
  uint64_t v190 = Strong;
  uint64_t v191 = v5;
  uint64_t v192 = *(void *)(v5 + 24);
  unsigned __int8 v193 = [(SEL *)v187 isEnabled];
  uint64_t v447 = v190;
  if ((v193 & 1) == 0)
  {
    unint64_t v204 = (void *)Logger.logObject.getter();
    os_log_type_t v205 = static os_log_type_t.default.getter();
    if (sub_100017D10(v205))
    {
      v206 = (_WORD *)sub_100023E24();
      sub_1000263D4(v206);
      sub_100024288((void *)&_mh_execute_header, v207, v208, "no search, bag disabled");
      sub_100017D40();
    }

    uint64_t v209 = v467;
    uint64_t v210 = v468;
    id v211 = objc_allocWithZone((Class)_CPSkipSearchFeedback);
    swift_bridgeObjectRetain();
    id v212 = sub_1000CC200(2, v209, v210);
    sub_1000E2808();
    sub_1000E2C14();
    uint64_t v213 = v458;
    id v215 = [v458 v214];
    id v216 = [objc_allocWithZone((Class)_CPFeedbackPayload) initWithCodable:v212];
    [v216 setQueryId:v215];
    sub_1000148D0();
    swift_unknownObjectRelease();

    [v213 v187[133]];
    uint64_t v170 = v453;
    sub_1000260E0();
    v217();
    *(unsigned char *)(v189 + qword_10021B6C8) = 40;
    sub_100011708();

    swift_release();
    swift_unknownObjectRelease();

    sub_10000E040();
    v218();
    sub_1000E22E8();
    goto LABEL_32;
  }
  sub_1000E2808();
  sub_1000E8784();
  swift_unknownObjectRelease();
  uint64_t v194 = v191 + OBJC_IVAR____TtC7parsecd11ClientState_engagedSuggestionController;
  sub_100017F00();
  sub_10002B9E8(v194, (uint64_t)&v461, &qword_10021CD08);
  if (v462)
  {
    sub_10001C1AC(&v461, (uint64_t)v463);
    sub_10001B620(v463, (uint64_t)v464);
    v195 = v458;
    sub_1000E21C4();
    os_log_type_t v197 = (void *)v196();
    sub_10001CA50((uint64_t)v463);
  }
  else
  {
    sub_100019994((uint64_t)&v461, &qword_10021CD08);
    os_log_type_t v197 = _swiftEmptyArrayStorage;
    v195 = v458;
  }
  sub_1000CCCA8((uint64_t)v197, v195);
  swift_unknownObjectRetain();
  sub_1000E6D84();
  uint64_t v220 = v219;
  swift_unknownObjectRelease();
  if (v220)
  {
    sub_10001AA80();
    NSString v221 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v221 = 0;
  }
  Swift::String v222 = v458;
  [v458 setPreviouslyEngagedQuery:v221];

  v446 = v187;
  v223 = (char *)[(SEL *)v187 minimumQueryLength];
  os_log_type_t v156 = &selRef_isEqualToString_;
  unsigned __int8 v224 = [v222 pretend];
  v445 = v223;
  if ((v224 & 1) == 0)
  {
    swift_bridgeObjectRetain();
    sub_10001AA80();
    uint64_t v225 = String.UTF16View.count.getter();
    swift_bridgeObjectRelease();
    if (v225 < (uint64_t)v223)
    {
      uint64_t v226 = sub_1000CCB98(v222);
      swift_bridgeObjectRelease();
      if (!v226) {
        goto LABEL_68;
      }
      unint64_t v227 = sub_1000CCB98(v222);
      if (!v227)
      {
LABEL_100:
        v400 = v453;
        _Block_release(v453);
        _Block_release(v400);
        __break(1u);
        goto LABEL_101;
      }
      uint64_t v228 = v227 >> 62 ? _CocoaArrayWrapper.endIndex.getter() : *(void *)((v227 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRelease();
      Swift::String v222 = v458;
      if (v228 <= 0)
      {
LABEL_68:
        id v250 = v222;
        v251 = Logger.logObject.getter();
        os_log_type_t v252 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v251, v252))
        {
          uint64_t v253 = sub_10001AB54();
          v458 = (void *)sub_10001AB54();
          v463[0] = (uint64_t)v458;
          *(_DWORD *)uint64_t v253 = 134218498;
          sub_1000E2C14();
          *(void *)&long long v461 = [v250 v254];
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          *(_WORD *)(v253 + 12) = 2080;
          uint64_t v255 = v467;
          unint64_t v256 = v468;
          swift_bridgeObjectRetain();
          *(void *)&long long v461 = sub_10001C274(v255, v256, v463);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v253 + 22) = 2048;
          *(void *)&long long v461 = v445;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v251, v252, "query[%llu] input '%s' less than %ld", (uint8_t *)v253, 0x20u);
          sub_1000E2E6C();
          sub_100017D40();
          sub_100017D40();
        }
        else
        {
        }
        uint64_t v282 = v467;
        uint64_t v283 = v468;
        id v284 = objc_allocWithZone((Class)_CPSkipSearchFeedback);
        swift_bridgeObjectRetain();
        id v285 = sub_1000CC200(1, v282, v283);
        swift_unknownObjectRetain();
        id v286 = [v250 queryId];
        id v287 = [objc_allocWithZone((Class)_CPFeedbackPayload) initWithCodable:v285];
        [v287 setQueryId:v286];
        sub_1000148D0();
        swift_unknownObjectRelease();

        [v250 queryId];
        uint64_t v136 = v453;
        uint64_t v288 = sub_1000270F4();
        v289(v288);
        sub_1000E266C(qword_10021B6C8);
        swift_release();

        swift_unknownObjectRelease();
        sub_100027C24(v443, (void (*)(void))type metadata accessor for SessionTokens);
        uint64_t v290 = sub_1000E2EF0();
        v291(v290);
        goto LABEL_47;
      }
    }
  }
  uint64_t v229 = v442;
  uint64_t v230 = v447;
  sub_100023FDC(v442);
  type metadata accessor for PARNetworkRequestFactory();
  sub_1000E273C();
  sub_1000E3018();
  uint64_t v231 = swift_retain();
  sub_10001E5C0(v231, v230);
  v232 = (void *)sub_100012824((uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__configuration, (uint64_t (*)(uint64_t))sub_10008081C);
  uint64_t v233 = v449;
  sub_1000892F4(v229, v222, v446, v443, v449, v232);
  swift_release();

  uint64_t v234 = (char *)(v438 + 4);
  uint64_t v235 = (void (*)(void))v438[4];
  sub_1000E27FC();
  v235();
  if ([v222 pretend])
  {
    id v236 = objc_allocWithZone((Class)NSHTTPURLResponse);
    id v237 = v222;
    id v238 = [v236 init];
    uint64_t v239 = (uint64_t)v431;
    Apple_Parsec_Search_V2_SearchResponse.init()();
    id v240 = sub_1000C370C((uint64_t)v238, 0, 0xC000000000000000, v239, v237);
    char v242 = v241;

    sub_10000E040();
    v243();
    [v237 queryId];
    if (v242)
    {
      v463[0] = (uint64_t)v240;
      sub_10002572C(&qword_10021B3C0);
      swift_willThrowTypedImpl();
      id v244 = 0;
    }
    else
    {
      id v244 = v240;
    }
    uint64_t v258 = sub_10002EED8();
    v259(v258);

    sub_1000E24D4(qword_10021B6C8);
    swift_unknownObjectRelease();

    sub_1000E08D0(v240, v242 & 1);
    swift_release();
    sub_10000E040();
    v260();
    sub_100027C24(v442, (void (*)(void))type metadata accessor for PegasusContext);
    sub_100027C24(v443, (void (*)(void))type metadata accessor for SessionTokens);
    sub_100023C70();
    v261();
LABEL_37:
    sub_10000E040();
    v184();
    sub_1000E2820();
    swift_bridgeObjectRelease();
    _Block_release(v156);
    uint64_t v174 = v156;
    goto LABEL_48;
  }
  v441 = v235;
  v445 = v234;
  sub_10001DAF4((uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__client, (void (*)(uint64_t))sub_10002A150);
  Client.type.getter();
  sub_100024400();
  v245();
  uint64_t v246 = ClientType.rawValue.getter();
  uint64_t v247 = ClientType.rawValue.getter();
  uint64_t v248 = v446;
  if (v246 == v247)
  {
    v464 = &unk_1001FCBE0;
    unint64_t v465 = sub_1000714F0();
    LOBYTE(v463[0]) = 6;
    char v249 = isFeatureEnabled(_:)();
    sub_10001CA50((uint64_t)v463);
  }
  else
  {
    char v249 = 0;
  }
  uint64_t v262 = v439;
  id v263 = v434;
  if (*(void *)(*(void *)(v457 + 64) + 32))
  {
    uint64_t v264 = v428;
    sub_100016608();
    v265();
    sub_10002538C(v264, 0, 1, v262);
    swift_retain();
    uint64_t v266 = sub_1000F12D4(v458, v264);
    swift_release();
    sub_100019994(v264, &qword_10021DC60);
    if (v266)
    {
      id v267 = [objc_allocWithZone((Class)PARReply) init];
      if ((v249 & 1) == 0)
      {
        [v458 scale];
        objc_msgSend(v267, "setScale:");
      }
      type metadata accessor for CachedResultSet.Result(0);
      uint64_t v268 = sub_10002EF04();
      sub_100027BCC(v268, v269);
      sub_10002EF04();
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      uint64_t v271 = sub_10002EF04();
      sub_1000291B4(v271, v272);
      [v267 setData:isa];

      v273 = v458;
      id v274 = [v458 queryId];
      v275 = v453;
      (*((void (**)(void *, id, id, void))v453 + 2))(v453, v274, v267, 0);
      uint64_t v276 = v467;
      uint64_t v277 = v468;
      swift_bridgeObjectRetain();
      sub_1000C37E8(v273, v276, v277, (uint64_t)v448, v455);
      swift_release();

      swift_unknownObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();

      sub_10000E040();
      v278();
      sub_100027C24(v442, (void (*)(void))type metadata accessor for PegasusContext);
      sub_100027C24(v443, (void (*)(void))type metadata accessor for SessionTokens);
      sub_10000E040();
      v279();
      sub_1000E22E8();
      sub_10000E040();
      v257();
      sub_1000E2820();
      swift_bridgeObjectRelease();
      _Block_release(v275);
      uint64_t v174 = (char **)v275;
      goto LABEL_48;
    }
  }
  if (v249)
  {
    uint64_t v136 = v453;
    _Block_copy(v453);
    sub_1000DCA98(v458, v440, v447, v192, v455, v427, v448, v457, (void (**)(void, void, void, void))v136);
    sub_10008A384();
    sub_1000C1BD4();
    swift_release();
    swift_unknownObjectRelease();

    sub_10000E040();
    v280();
    sub_100027C24(v442, (void (*)(void))type metadata accessor for PegasusContext);
    sub_100027C24(v443, (void (*)(void))type metadata accessor for SessionTokens);
    sub_1000E2C08();
    sub_10000E040();
    v281();
    goto LABEL_47;
  }
  v292 = v458;
  uint64_t v428 = sub_1000C38FC();
  if (qword_100218B70 != -1) {
    swift_once();
  }
  sub_10002A10C((uint64_t)v454, (uint64_t)qword_100236A68);
  v293 = v438;
  v295 = (char *)(v438 + 2);
  v294 = (void (*)(void))v438[2];
  uint64_t v296 = v440;
  ((void (*)(id, uint64_t, uint64_t))v294)(v263, v440, v262);
  v432 = v294;
  v433 = v295;
  ((void (*)(void *, uint64_t, uint64_t))v294)(v429, v296, v262);
  id v297 = v292;
  v298 = Logger.logObject.getter();
  int v299 = static os_log_type_t.debug.getter();
  BOOL v300 = os_log_type_enabled(v298, (os_log_type_t)v299);
  id v434 = v297;
  if (v300)
  {
    LODWORD(v458) = v299;
    uint64_t v301 = sub_1000E215C();
    v403[0] = (id)sub_100023E3C();
    v463[0] = (uint64_t)v403[0];
    *(_DWORD *)uint64_t v301 = 134349826;
    *(void *)&long long v461 = objc_msgSend(v297, "queryId", v403[0]);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    *(_WORD *)(v301 + 12) = 2080;
    uint64_t v302 = URLRequest.debugDescription.getter();
    *(void *)&long long v461 = sub_10001C274(v302, v303, v463);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v262 = (uint64_t)(v293 + 1);
    v304 = (void (*)(void))v293[1];
    sub_100016614();
    v304();
    *(_WORD *)(v301 + 22) = 2080;
    if (!URLRequest.allHTTPHeaderFields.getter()) {
      Dictionary.init(dictionaryLiteral:)();
    }
    uint64_t v305 = Dictionary.description.getter();
    unint64_t v307 = v306;
    swift_bridgeObjectRelease();
    uint64_t v308 = sub_10001C274(v305, v307, v463);
    sub_1000E24EC(v308);
    swift_bridgeObjectRelease();
    v431 = v304;
    sub_100016614();
    v304();
    *(_WORD *)(v301 + 32) = 2050;
    *(void *)&long long v461 = v233;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v298, (os_log_type_t)v458, "performing query %{public}llu request %s header: %s requestId: %{public}llu", (uint8_t *)v301, 0x2Au);
    sub_1000E24A4();
    sub_100017D40();
    sub_100017D40();

    uint64_t v309 = v457;
    id v297 = v434;
  }
  else
  {

    v310 = (void (*)(void))v293[1];
    sub_100023C70();
    v310();
    v431 = v310;
    sub_100023C70();
    v310();

    uint64_t v309 = v457;
  }
  uint64_t v311 = v440;
  id v312 = sub_1000C18D4();
  swift_bridgeObjectRetain();
  uint64_t v313 = sub_10002ECB8();
  sub_1000CCD2C(v313, v314, v312);
  unint64_t v315 = (unint64_t)[v297 triggerEvent];
  if (v315 >> 31)
  {
    __break(1u);
    goto LABEL_100;
  }
  [v312 setTriggerEvent:v315];
  [v312 setEndpoint:6];
  if ([v297 triggerEvent] == (id)23) {
    uint64_t v316 = 3;
  }
  else {
    uint64_t v316 = 2;
  }
  [v312 setSearchType:v316];
  swift_unknownObjectRetain();
  id v317 = v312;
  sub_1000E2C14();
  id v319 = [v297 v318];
  id v320 = [objc_allocWithZone((Class)_CPFeedbackPayload) initWithCodable:v317];
  [v320 setQueryId:v319];
  v429 = v317;

  sub_1000148D0();
  swift_unknownObjectRelease();

  swift_unknownObjectRetain();
  [v297 *(SEL *)(v262 + 1064)];
  sub_1000E8098();
  swift_unknownObjectRelease();
  v321 = (void *)sub_10007FBE8();
  id v322 = sub_1000B7A00(v311, 2);
  v458 = v323;

  uint64_t v324 = v455;
  uint64_t v325 = swift_weakLoadStrong();
  v403[0] = v322;
  if (v325)
  {
    uint64_t v326 = v325;
    LODWORD(v435) = *(unsigned __int8 *)(v324 + 80);
    uint64_t v327 = v437;
    sub_10002A020();
    v329(v328);
    v436 = *(void **)(v324 + qword_100236B10);
    char v330 = *(unsigned char *)(v324 + qword_100236B10 + 8);
    type metadata accessor for ResourceAccessNetworkSpan();
    id v331 = v297;
    uint64_t v332 = sub_1000281FC();
    id v333 = v322;
    uint64_t v334 = v428;
    swift_unknownObjectRetain_n();
    id v335 = v333;
    swift_retain();
    uint64_t v402 = v332;
    id v297 = v331;
    uint64_t v336 = v455;
    *(void *)(v336 + qword_100236B08) = sub_1000B0F00(v326, (int)v435, v327, (uint64_t)v436, v330, v335, v334, 12662, 0xE200000000000000, v402);

    swift_unknownObjectRelease();
    swift_release();
  }
  else
  {
    id v337 = v322;
    swift_retain();
  }
  UUID.init()();
  v463[0] = (uint64_t)v458;
  id v338 = [v297 queryId];
  uint64_t v339 = sub_100023CFC();
  *(void *)(v339 + 16) = v338;
  *(void *)(v339 + 24) = v233;
  uint64_t v340 = sub_100023CFC();
  *(void *)(v340 + 16) = sub_1000E0764;
  *(void *)(v340 + 24) = v339;
  sub_10002572C(&qword_10021DC90);
  sub_10002572C(&qword_10021DC98);
  sub_100092CA8(&qword_10021DCA0, &qword_10021DC90);
  Publisher.map<A>(_:)();
  swift_release();
  swift_release();
  uint64_t v341 = sub_100023CFC();
  *(void *)(v341 + 16) = sub_1000E0774;
  *(void *)(v341 + 24) = v309;
  swift_retain();
  sub_10002572C(&qword_10021DCA8);
  sub_1000E21C4();
  Publishers.Map.tryMap<A>(_:)();
  swift_release();
  sub_10000E040();
  v342();
  uint64_t v343 = sub_100023CFC();
  *(void *)(v343 + 16) = sub_1000E07AC;
  *(void *)(v343 + 24) = v309;
  swift_retain();
  sub_10002572C(&qword_10021DCB0);
  Publishers.TryMap.tryMap<A>(_:)();
  swift_release();
  sub_10000E040();
  v344();
  uint64_t v345 = sub_100023CFC();
  *(void *)(v345 + 16) = sub_1000E07E4;
  *(void *)(v345 + 24) = v309;
  swift_retain();
  uint64_t v437 = sub_10002572C(&qword_10021DCB8);
  Publishers.TryMap.tryMap<A>(_:)();
  swift_release();
  sub_1000E2C08();
  sub_10000E040();
  v346();
  v347 = v432;
  sub_1000E24BC();
  v347();
  v435 = (void *)v467;
  v436 = (void *)v468;
  swift_bridgeObjectRetain();
  uint64_t v406 = sub_10000896C(v429, (SEL *)&selRef_uuid);
  if (v348)
  {
    uint64_t v349 = v348;
    sub_10001AA80();
    sub_1000E24BC();
    v347();
    v350 = v438;
    uint64_t v351 = *((unsigned __int8 *)v438 + 80);
    uint64_t v404 = v351 | 7;
    uint64_t v405 = v351;
    unint64_t v352 = (v420 + ((v351 + 32) & ~v351) + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v353 = swift_allocObject();
    uint64_t v354 = (uint64_t)v436;
    *(void *)(v353 + 16) = v435;
    *(void *)(v353 + 24) = v354;
    sub_100021CF0();
    v355();
    v356 = (uint64_t *)(v353 + v352);
    uint64_t *v356 = v406;
    v356[1] = v349;
    *(void *)(v353 + ((v352 + 23) & 0xFFFFFFFFFFFFFFF8)) = v457;
    v436 = v350 + 1;
    swift_retain();
    sub_10001AB6C();
    v357();
    uint64_t v358 = sub_100023CFC();
    *(void *)(v358 + 16) = sub_1000E0820;
    *(void *)(v358 + 24) = v353;
    Publishers.TryMap.tryMap<A>(_:)();
    swift_release();
    uint64_t v359 = v410;
    uint64_t v410 = *(void *)(v410 + 8);
    sub_100027EC0();
    v360();
    v361 = v429;
    v435 = v361;
    v362 = v403[0];
    v438 = v362;
    id v363 = [v434 queryId];
    v364 = (void *)sub_10002F090();
    v364[2] = v457;
    v364[3] = v361;
    v364[4] = v362;
    v364[5] = v363;
    uint64_t v365 = sub_100023CFC();
    *(void *)(v365 + 16) = sub_1000E0844;
    *(void *)(v365 + 24) = v364;
    swift_retain();
    Publishers.TryMap.tryMap<A>(_:)();
    swift_release();
    sub_1000E29B0();
    v366 = (void (*)(void))v410;
    sub_100027EC0();
    v366();
    sub_10002A020();
    v367();
    uint64_t v368 = swift_allocObject();
    id v369 = v434;
    *(void *)(v368 + 16) = v434;
    sub_100021CF0();
    v370();
    uint64_t v371 = sub_100023CFC();
    *(void *)(v371 + 16) = sub_1000E0874;
    *(void *)(v371 + 24) = v368;
    id v372 = v369;
    sub_10002572C(&qword_10021DD20);
    uint64_t v373 = v408;
    Publishers.TryMap.tryMap<A>(_:)();
    swift_release();
    sub_10002DEA8();
    sub_100027EC0();
    v366();
    Publishers.TryMap.tryMap<A>(_:)();
    v374 = *(char **)(v430 + 8);
    v430 += 8;
    v445 = v374;
    sub_10000E040();
    v375();
    v441 = (void (*)(void))[v372 queryId];
    sub_1000E300C();
    v376 = v454;
    sub_100016608();
    v377();
    sub_1000E27C4();
    unint64_t v378 = ((unint64_t)v372 + v415 + 7) & 0xFFFFFFFFFFFFFFF8;
    sub_10001ED98();
    unint64_t v380 = v379 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v381 = swift_allocObject();
    sub_1000E27FC();
    v382();
    *(void *)(v381 + v378) = v441;
    *(void *)(v381 + v373) = v449;
    *(void *)(v381 + v359 + 8) = v457;
    v383 = v435;
    *(void *)((char *)v366 + v381) = v435;
    *(void *)(v381 + v380) = v438;
    uint64_t v384 = sub_100023CFC();
    *(void *)(v384 + 16) = sub_1000E0898;
    *(void *)(v384 + 24) = v381;
    swift_retain();
    v454 = v383;
    sub_10002572C(&qword_10021DD28);
    uint64_t v385 = sub_100092CA8(&qword_10021DD30, &qword_10021DC50);
    sub_100092CA8(&qword_10021DD38, &qword_10021DD28);
    uint64_t v386 = v423;
    Publisher.catch<A>(_:)();
    swift_release();
    sub_10001AA80();
    sub_10000E040();
    v387();
    uint64_t v388 = sub_100023CFC();
    sub_1000E2448(v388);
    *(void *)(v386 + 24) = &off_1001FDB50;
    swift_unknownObjectWeakInit();
    uint64_t v389 = v426;
    uint64_t v390 = v414;
    sub_1000E0380(v426, v414);
    unint64_t v391 = (*(unsigned __int8 *)(v412 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v412 + 80);
    sub_10001D7A8();
    uint64_t v392 = swift_allocObject();
    *(void *)(v392 + 16) = v386;
    sub_1000E03DC(v390, v392 + v391);
    *(void *)&v376[v392] = v455;
    v393 = (void (**)())(v392 + v385);
    uint64_t v394 = v452;
    *v393 = sub_1000E209C;
    v393[1] = (void (*)())v394;
    sub_100092CA8((unint64_t *)&unk_10021DD40, &qword_10021DC58);
    sub_1000E303C();
    swift_retain();
    sub_1000E2A34();
    swift_release();
    sub_10000E040();
    v395();
    sub_100023D58();
    sub_1000998E8();
    swift_release();
    sub_10008A384();
    sub_1000C1BD4();

    swift_unknownObjectRelease();
    swift_release();
    swift_unknownObjectRelease();

    swift_release();
    sub_100027C24(v389, (void (*)(void))type metadata accessor for CancellableStoreKey);
    sub_10000E040();
    v396();
    sub_100027C24(v442, (void (*)(void))type metadata accessor for PegasusContext);
    sub_100027C24(v443, (void (*)(void))type metadata accessor for SessionTokens);
    sub_10000E040();
    v397();
    sub_1000E22E8();
    sub_10000E040();
    v398();
    swift_release();
    swift_bridgeObjectRelease();
    v399 = (char **)v453;
    _Block_release(v453);
    uint64_t v174 = v399;
    goto LABEL_48;
  }
LABEL_101:
  v401 = v453;
  _Block_release(v453);
  _Block_release(v401);
  swift_release();
  __break(1u);
}

void sub_1000D015C()
{
  sub_10000DFE0();
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v293 = v8;
  uint64_t v10 = v9;
  id v303 = (id)type metadata accessor for URLQueryItem();
  sub_100020C48();
  uint64_t v255 = v11;
  __chkstk_darwin(v12);
  sub_10000E04C();
  uint64_t v302 = v13;
  sub_100029488();
  id v299 = (id)type metadata accessor for Logger();
  sub_100020C48();
  uint64_t v281 = v14;
  __chkstk_darwin(v15);
  uint64_t v280 = v16;
  sub_10001AB78();
  uint64_t v291 = v17;
  sub_10002572C(&qword_10021DC30);
  sub_100020C48();
  uint64_t v263 = v19;
  uint64_t v264 = v18;
  __chkstk_darwin(v18);
  sub_10000E04C();
  uint64_t v262 = v20;
  sub_10002572C(&qword_10021DC38);
  sub_100020C48();
  uint64_t v266 = v22;
  uint64_t v267 = v21;
  __chkstk_darwin(v21);
  sub_10000E04C();
  uint64_t v265 = v23;
  sub_10002572C(&qword_10021DC40);
  sub_100020C48();
  uint64_t v269 = v25;
  uint64_t v270 = v24;
  __chkstk_darwin(v24);
  sub_10000E04C();
  uint64_t v268 = v26;
  sub_10002572C(&qword_10021DC48);
  sub_100020C48();
  uint64_t v273 = v28;
  uint64_t v274 = v27;
  __chkstk_darwin(v27);
  sub_100017D2C();
  uint64_t v271 = v29;
  sub_10000E100();
  __chkstk_darwin(v30);
  sub_100024FFC();
  uint64_t v272 = v31;
  sub_10002572C(&qword_10021DC50);
  sub_100020C48();
  uint64_t v278 = v33;
  uint64_t v279 = v32;
  __chkstk_darwin(v32);
  sub_1000E2644(v34, v243);
  sub_10002572C(&qword_10021DC58);
  sub_100020C48();
  uint64_t v283 = v36;
  uint64_t v284 = v35;
  __chkstk_darwin(v35);
  sub_10000E04C();
  uint64_t v282 = v37;
  uint64_t v38 = sub_1000E23FC();
  uint64_t v39 = sub_100024920(v38);
  uint64_t v275 = v40;
  __chkstk_darwin(v39);
  sub_10002CDD4();
  uint64_t v276 = v42;
  uint64_t v277 = v41;
  sub_100019BD4();
  uint64_t v44 = __chkstk_darwin(v43);
  sub_1000E2F58(v44, v45, v46, v47, v48, v49, v50, v51, v243);
  uint64_t v52 = sub_10002572C((uint64_t *)&unk_10021D010);
  uint64_t v53 = sub_100016544(v52);
  __chkstk_darwin(v53);
  sub_100017D2C();
  id v288 = v54;
  sub_10000E100();
  __chkstk_darwin(v55);
  sub_100021308();
  id v287 = v56;
  sub_10000E100();
  __chkstk_darwin(v57);
  sub_100024FFC();
  uint64_t v294 = v58;
  uint64_t v59 = sub_1000E25E8();
  uint64_t v60 = sub_100016544(v59);
  __chkstk_darwin(v60);
  sub_10000E04C();
  uint64_t v296 = v61;
  sub_1000E29EC();
  sub_100020C48();
  uint64_t v297 = v63;
  uint64_t v298 = v62;
  __chkstk_darwin(v62);
  sub_10002CDD4();
  uint64_t v261 = v64;
  sub_100019BD4();
  __chkstk_darwin(v65);
  sub_100024FFC();
  uint64_t v289 = v66;
  sub_100019BD4();
  __chkstk_darwin(v67);
  sub_100024FFC();
  uint64_t v286 = v68;
  sub_100019BD4();
  uint64_t v70 = __chkstk_darwin(v69);
  v295 = (char *)&v243 - v71;
  uint64_t v260 = v72;
  __chkstk_darwin(v70);
  sub_100024FFC();
  uint64_t v300 = v73;
  uint64_t v74 = sub_1000E2280();
  uint64_t v75 = sub_100016544(v74);
  __chkstk_darwin(v75);
  sub_10000E04C();
  uint64_t v301 = v76;
  uint64_t v77 = sub_10002572C(&qword_10021BF30);
  uint64_t v78 = sub_100016544(v77);
  __chkstk_darwin(v78);
  sub_1000E2134();
  uint64_t v79 = type metadata accessor for UserAgent();
  sub_100020C48();
  uint64_t v304 = v80;
  __chkstk_darwin(v81);
  sub_10000E04C();
  uint64_t v305 = v82;
  sub_1000E25D0();
  sub_100020C48();
  uint64_t v256 = v84;
  uint64_t v257 = v83;
  __chkstk_darwin(v83);
  sub_10000E074();
  type metadata accessor for URL();
  sub_100020C48();
  uint64_t v306 = v86;
  uint64_t v307 = v85;
  __chkstk_darwin(v85);
  sub_100017DE0();
  uint64_t v87 = sub_100023CE4();
  sub_1000E2CB0(v87);
  uint64_t v308 = v5;
  _Block_copy(v5);
  id v88 = [v10 moreResultsURL];
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v89 = *(void **)(v7 + 56);
  swift_retain();
  sub_10001DAF4((uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__client, (void (*)(uint64_t))sub_10002A150);
  [v10 queryId];
  sub_1000E2454();
  sub_1000281FC();
  uint64_t v258 = v2;
  uint64_t v90 = v2;
  uint64_t v91 = v7;
  uint64_t v92 = sub_100029254(v89, 6, v90);
  sub_10001DAF4((uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__userAgent, (void (*)(uint64_t))sub_10002A280);
  uint64_t v93 = sub_1000E2274();
  sub_1000184F4(v93, v94, v79);
  if (v163)
  {
    sub_100019994(v0, &qword_10021BF30);
    [v10 queryId];
    uint64_t v95 = v308;
    uint64_t v96 = sub_1000270F4();
    v97(v96);
    sub_1000E2BD8(qword_10021B6C8);
    swift_release();
    sub_10000E040();
    v98();
  }
  else
  {
    id v285 = v10;
    uint64_t v259 = v3;
    SEL v254 = v1;
    sub_1000E2C90();
    sub_10000E0F4();
    v99();
    uint64_t v100 = sub_100012824((uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__bag, (uint64_t (*)(uint64_t))sub_100012864);
    if (v100)
    {
      uint64_t v101 = (void *)v100;
      uint64_t Strong = swift_unknownObjectWeakLoadStrong();
      if (Strong)
      {
        uint64_t v103 = Strong;
        uint64_t v253 = v92;
        uint64_t v249 = v79;
        sub_100023FDC(v301);
        sub_1000E2920();
        uint64_t v104 = v310;
        type metadata accessor for PARNetworkRequestFactory();
        uint64_t inited = swift_initStackObject();
        uint64_t v106 = swift_retain();
        sub_10001E5C0(v106, inited);
        uint64_t v252 = v91;
        swift_unknownObjectRetain();
        uint64_t v107 = (uint64_t)v296;
        sub_1000E8784();
        swift_unknownObjectRelease();
        id v250 = (void (*)(void))v104;
        sub_10008C850();
        id v248 = v101;
        uint64_t v251 = v103;
        swift_release();
        sub_100027C24(v107, (void (*)(void))type metadata accessor for SessionTokens);
        uint64_t v115 = v297;
        sub_1000E257C();
        v295 = v116;
        uint64_t v247 = v117;
        sub_10000E0F4();
        v118();
        if (qword_100218B70 != -1) {
          swift_once();
        }
        sub_1000E2174((uint64_t)v299, (uint64_t)qword_100236A68);
        os_log_type_t v119 = *(void (**)(void))(v115 + 16);
        uint64_t v120 = v286;
        sub_1000E2EB4();
        sub_100025A60();
        v119();
        sub_1000E2EB4();
        uint64_t v245 = v119;
        uint64_t v246 = v115 + 16;
        sub_100025A60();
        v119();
        uint64_t v296 = v285;
        uint64_t v121 = Logger.logObject.getter();
        int v122 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v121, (os_log_type_t)v122))
        {
          int v244 = v122;
          id v285 = v121;
          uint64_t v123 = sub_1000E215C();
          uint64_t v243 = sub_100023E3C();
          uint64_t v310 = v243;
          *(_DWORD *)uint64_t v123 = 134349826;
          unint64_t v124 = v296;
          id v309 = [v296 queryId];
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          *(_WORD *)(v123 + 12) = 2080;
          uint64_t v125 = URLRequest.debugDescription.getter();
          id v309 = (id)sub_1000E2D80(v125, v126);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          uint64_t v127 = *(void (**)(void))(v115 + 8);
          sub_100016614();
          v127();
          *(_WORD *)(v123 + 22) = 2080;
          if (!URLRequest.allHTTPHeaderFields.getter()) {
            Dictionary.init(dictionaryLiteral:)();
          }
          uint64_t v128 = Dictionary.description.getter();
          unint64_t v130 = v129;
          swift_bridgeObjectRelease();
          id v309 = (id)sub_10001C274(v128, v130, &v310);
          sub_1000E297C();
          swift_bridgeObjectRelease();
          sub_100016614();
          v127();
          *(_WORD *)(v123 + 32) = 2050;
          char v131 = v250;
          id v309 = v250;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          uint64_t v132 = v285;
          _os_log_impl((void *)&_mh_execute_header, v285, (os_log_type_t)v244, "performing query %{public}llu request: %s header: %s requestId: %{public}llu", (uint8_t *)v123, 0x2Au);
          swift_arrayDestroy();
          sub_100017D40();
          sub_100017D40();

          uint64_t v133 = v253;
        }
        else
        {

          uint64_t v134 = *(void (**)(void))(v115 + 8);
          sub_1000283AC();
          v134();
          sub_1000283AC();
          v134();

          uint64_t v133 = v253;
          char v131 = v250;
        }
        char v135 = self;
        URL._bridgeToObjectiveC()(v136);
        uint64_t v138 = v137;
        id v139 = objc_msgSend(v135, "parsec_componentsWithURL:resolvingAgainstBaseURL:", v137, 0);

        if (v139)
        {
          uint64_t v140 = (uint64_t)v287;
          static URLComponents._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v141 = type metadata accessor for URLComponents();
          uint64_t v142 = v140;
          uint64_t v143 = 0;
        }
        else
        {
          uint64_t v141 = type metadata accessor for URLComponents();
          uint64_t v142 = sub_1000E2274();
        }
        sub_10002538C(v142, v143, 1, v141);
        sub_1000E2E34();
        sub_1000E0D90(v144, v145, v146);
        uint64_t v147 = (uint64_t)v288;
        sub_1000E2E34();
        sub_10002B9E8(v148, v149, v150);
        type metadata accessor for URLComponents();
        uint64_t v151 = sub_1000E2274();
        sub_1000184F4(v151, v152, v141);
        if (v163)
        {
          sub_100019994(v147, (uint64_t *)&unk_10021D010);
          goto LABEL_39;
        }
        uint64_t v153 = URLComponents.queryItems.getter();
        sub_10000E004();
        sub_10000E040();
        v154();
        if (v153)
        {
          uint64_t v155 = *(void *)(v153 + 16);
          if (!v155)
          {
            swift_bridgeObjectRelease();
            goto LABEL_39;
          }
          os_log_type_t v156 = *(void (**)(uint64_t))(v255 + 16);
          sub_10002B154();
          uint64_t v289 = v153;
          uint64_t v158 = v153 + v157;
          uint64_t v120 = v159;
          uint64_t v160 = *(void *)(v159 + 56);
          while (1)
          {
            uint64_t v161 = sub_10002EF04();
            v156(v161);
            BOOL v163 = URLQueryItem.name.getter() == 113 && v162 == 0xE100000000000000;
            if (v163) {
              break;
            }
            char v164 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if (v164) {
              goto LABEL_35;
            }
            sub_100027EC0();
            v165();
LABEL_36:
            v158 += v160;
            if (!--v155)
            {
LABEL_44:
              swift_bridgeObjectRelease();
              uint64_t v133 = v253;
              char v131 = v250;
              goto LABEL_39;
            }
          }
          swift_bridgeObjectRelease();
LABEL_35:
          URLQueryItem.value.getter();
          uint64_t v167 = v166;
          sub_100027EC0();
          v168();
          if (v167) {
            goto LABEL_44;
          }
          goto LABEL_36;
        }
LABEL_39:
        id v169 = sub_1000C18D4();
        unint64_t v170 = (unint64_t)[v296 triggerEvent];
        if (v170 >> 31)
        {
          __break(1u);
        }
        else
        {
          [v169 setTriggerEvent:v170];
          sub_100028864();
          sub_1000CCD2C(v171, v172, v173);
          [v169 setEndpoint:6];
          swift_unknownObjectRetain();
          id v174 = v169;
          id v175 = [v296 queryId];
          id v176 = [objc_allocWithZone((Class)_CPFeedbackPayload) initWithCodable:v174];
          [v176 setQueryId:v175];
          id v288 = v174;

          sub_1000148D0();
          swift_unknownObjectRelease();

          uint64_t v177 = sub_1000C38FC();
          uint64_t v178 = (void *)sub_10007FBE8();
          uint64_t v179 = sub_1000E2594();
          id v303 = sub_1000B7A00(v179, v180);
          uint64_t v182 = v181;

          uint64_t v183 = swift_weakLoadStrong();
          if (v183)
          {
            uint64_t v184 = v183;
            int v185 = *(unsigned __int8 *)(v133 + 80);
            uint64_t v186 = v258;
            sub_10002A020();
            v187();
            uint64_t v188 = *(void *)(v133 + qword_100236B10);
            char v189 = *(unsigned char *)(v133 + qword_100236B10 + 8);
            type metadata accessor for ResourceAccessNetworkSpan();
            uint64_t v190 = sub_1000281FC();
            id v191 = v303;
            swift_unknownObjectRetain_n();
            id v192 = v191;
            uint64_t v242 = v190;
            char v131 = v250;
            uint64_t v193 = sub_1000B0F00(v184, v185, v186, v188, v189, v192, v177, 0, 0xE000000000000000, v242);
            *(void *)(v253 + qword_100236B08) = v193;

            swift_unknownObjectRelease();
            swift_release();
          }
          uint64_t v289 = v182;
          uint64_t v302 = v177;
          UUID.init()();
          uint64_t v310 = v182;
          uint64_t v194 = v296;
          id v195 = [v296 queryId];
          uint64_t v196 = sub_100023CFC();
          *(void *)(v196 + 16) = v195;
          *(void *)(v196 + 24) = v131;
          uint64_t v197 = sub_100023CFC();
          *(void *)(v197 + 16) = sub_1000E2034;
          *(void *)(v197 + 24) = v196;
          sub_10002572C(&qword_10021DC90);
          sub_10002572C(&qword_10021DC98);
          sub_100092CA8(&qword_10021DCA0, &qword_10021DC90);
          Publisher.map<A>(_:)();
          swift_release();
          uint64_t v198 = sub_100023CFC();
          uint64_t v199 = v252;
          *(void *)(v198 + 16) = sub_1000E0774;
          *(void *)(v198 + 24) = v199;
          swift_retain();
          sub_10002572C(&qword_10021DCA8);
          Publishers.Map.tryMap<A>(_:)();
          swift_release();
          sub_10000E040();
          v200();
          uint64_t v201 = sub_100023CFC();
          *(void *)(v201 + 16) = sub_1000E07AC;
          *(void *)(v201 + 24) = v199;
          swift_retain();
          sub_10002572C(&qword_10021DCB0);
          Publishers.TryMap.tryMap<A>(_:)();
          swift_release();
          sub_10000E040();
          v202();
          uint64_t v203 = sub_100023CFC();
          *(void *)(v203 + 16) = sub_1000E07E4;
          *(void *)(v203 + 24) = v199;
          swift_retain();
          sub_10002572C(&qword_10021DCB8);
          Publishers.TryMap.tryMap<A>(_:)();
          swift_release();
          sub_10000E040();
          v204();
          id v205 = v288;
          id v287 = v205;
          id v206 = [v194 queryId];
          uint64_t v207 = (void *)sub_10002F090();
          v207[2] = v199;
          v207[3] = v205;
          id v208 = v303;
          v207[4] = v303;
          v207[5] = v206;
          uint64_t v209 = sub_100023CFC();
          *(void *)(v209 + 16) = sub_1000E1F44;
          *(void *)(v209 + 24) = v207;
          id v288 = v208;
          swift_retain();
          uint64_t v210 = v194;
          uint64_t v120 = v272;
          Publishers.TryMap.tryMap<A>(_:)();
          swift_release();
          uint64_t v133 = v273 + 8;
          char v131 = *(void (**)(void))(v273 + 8);
          sub_100027EC0();
          v131();
          sub_100016608();
          v211();
          uint64_t v212 = swift_allocObject();
          *(void *)(v212 + 16) = v210;
          sub_10000E0F4();
          v213();
          uint64_t v214 = sub_100023CFC();
          *(void *)(v214 + 16) = sub_1000E0874;
          *(void *)(v214 + 24) = v212;
          id v215 = v210;
          sub_10002572C(&qword_10021DD20);
          Publishers.TryMap.tryMap<A>(_:)();
          swift_release();
          sub_100027EC0();
          v131();
          uint64_t v296 = [v215 queryId];
          uint64_t v216 = qword_100218B08;
          id v303 = v287;
          if (v216 == -1) {
            goto LABEL_43;
          }
        }
        swift_once();
LABEL_43:
        sub_10002A10C((uint64_t)v299, (uint64_t)qword_100236930);
        uint64_t v217 = v281;
        sub_1000E300C();
        sub_100016608();
        v218();
        unint64_t v219 = (v280
              + ((*(unsigned __int8 *)(v217 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v217 + 80))
              + 7) & 0xFFFFFFFFFFFFFFF8;
        sub_10001ED98();
        unint64_t v221 = v220 & 0xFFFFFFFFFFFFFFF8;
        uint64_t v222 = swift_allocObject();
        sub_1000E27FC();
        v223();
        *(void *)(v222 + v219) = v296;
        *(void *)((char *)v131 + v222) = v250;
        *(void *)(v222 + v133) = v252;
        *(void *)(v222 + v120) = v303;
        id v224 = v288;
        *(void *)(v222 + v221) = v288;
        uint64_t v225 = sub_100023CFC();
        *(void *)(v225 + 16) = sub_1000E0898;
        *(void *)(v225 + 24) = v222;
        id v299 = v224;
        swift_retain();
        uint64_t v226 = sub_10002572C(&qword_10021DD28);
        uint64_t v227 = sub_100092CA8(&qword_10021DD30, &qword_10021DC50);
        sub_100092CA8(&qword_10021DD38, &qword_10021DD28);
        uint64_t v228 = v279;
        uint64_t v229 = v290;
        Publisher.catch<A>(_:)();
        swift_release();
        sub_10000E040();
        v230();
        uint64_t v231 = sub_100023CFC();
        sub_1000E2448(v231);
        *(void *)(v229 + 24) = &off_1001FDB50;
        swift_unknownObjectWeakInit();
        uint64_t v232 = v292;
        uint64_t v233 = v277;
        sub_1000E0380(v292, v277);
        sub_1000E2D28();
        sub_10001D7A8();
        uint64_t v234 = swift_allocObject();
        uint64_t v235 = sub_1000E2CB0(v234);
        sub_1000E03DC(v233, v235 + v228);
        id v236 = v254;
        *(void *)(v226 + v225) = v253;
        id v237 = (void (**)())(v226 + v227);
        uint64_t *v237 = sub_1000E209C;
        v237[1] = v236;
        sub_100092CA8((unint64_t *)&unk_10021DD40, &qword_10021DC58);
        sub_1000E303C();
        swift_retain();
        Publisher<>.sink(receiveValue:)();
        swift_release();
        sub_10000E040();
        v238();
        sub_1000E27B8();
        sub_1000998E8();
        swift_release();
        sub_1000C1BD4();

        swift_unknownObjectRelease();
        swift_release();
        swift_unknownObjectRelease();

        swift_release();
        sub_100027C24(v232, (void (*)(void))type metadata accessor for CancellableStoreKey);
        sub_100019994(v294, (uint64_t *)&unk_10021D010);
        sub_10000E040();
        v239();
        sub_100027C24(v301, (void (*)(void))type metadata accessor for PegasusContext);
        sub_10000E040();
        v240();
        sub_10000E040();
        v241();
        swift_release();
        unint64_t v114 = v308;
        goto LABEL_11;
      }
      [v285 queryId];
      uint64_t v95 = v308;
      uint64_t v110 = sub_1000270F4();
      v111(v110);
      sub_1000E2BD8(qword_10021B6C8);
      swift_release();
    }
    else
    {
      [v285 queryId];
      uint64_t v95 = v308;
      uint64_t v108 = sub_1000270F4();
      v109(v108);
      sub_1000E2BD8(qword_10021B6C8);
      swift_release();
    }
    sub_1000283AC();
    v112();
    sub_10000E040();
    v113();
  }
  swift_release();
  unint64_t v114 = v95;
LABEL_11:
  _Block_release(v114);
  sub_10000DFB8();
}

void sub_1000D1AD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_10000DFE0();
  a19 = v24;
  a20 = v25;
  uint64_t v27 = v26;
  uint64_t v29 = v28;
  uint64_t v251 = v30;
  uint64_t v32 = v31;
  uint64_t v259 = (unsigned __int8 *)type metadata accessor for Logger();
  sub_100020C48();
  uint64_t v247 = v33;
  __chkstk_darwin(v34);
  uint64_t v246 = v35;
  sub_10001AB78();
  sub_10001D79C(v36);
  uint64_t v234 = sub_10002572C(&qword_10021DC30);
  sub_100020C48();
  uint64_t v233 = v37;
  __chkstk_darwin(v38);
  sub_10000E04C();
  sub_10001D79C(v39);
  uint64_t v236 = sub_10002572C(&qword_10021DC38);
  sub_100020C48();
  uint64_t v235 = v40;
  __chkstk_darwin(v41);
  sub_10001D79C((uint64_t)&v216 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v238 = sub_10002572C(&qword_10021DC40);
  sub_100020C48();
  id v237 = v43;
  __chkstk_darwin(v44);
  sub_10000E04C();
  sub_10001D79C(v45);
  id v241 = (id)sub_10002572C(&qword_10021DC48);
  sub_100020C48();
  uint64_t v240 = v46;
  __chkstk_darwin(v47);
  sub_100017D2C();
  sub_100024A74();
  __chkstk_darwin(v48);
  sub_100024FFC();
  sub_10001D79C(v49);
  uint64_t v245 = sub_10002572C(&qword_10021DC50);
  sub_100020C48();
  uint64_t v244 = v50;
  __chkstk_darwin(v51);
  sub_1000E2628(v52, (uint64_t)v216);
  sub_10002572C(&qword_10021DC58);
  sub_100020C48();
  uint64_t v249 = v54;
  uint64_t v250 = v53;
  __chkstk_darwin(v53);
  id v248 = (char *)&v216 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = sub_1000E23FC();
  uint64_t v57 = sub_100024920(v56);
  uint64_t v242 = v58;
  __chkstk_darwin(v57);
  sub_10002CDD4();
  sub_10001D79C(v59);
  sub_1000E2150((uint64_t)&a13);
  __chkstk_darwin(v60);
  sub_100024FFC();
  uint64_t v253 = v61;
  uint64_t v62 = sub_1000E25E8();
  uint64_t v63 = sub_100016544(v62);
  __chkstk_darwin(v63);
  sub_10000E074();
  type metadata accessor for URLRequest();
  sub_100020C48();
  uint64_t v256 = v65;
  uint64_t v257 = v64;
  uint64_t v67 = *(void *)(v66 + 64);
  __chkstk_darwin(v64);
  sub_10001D79C((uint64_t)&v216 - ((v67 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v68);
  sub_100024FFC();
  uint64_t v255 = v69;
  uint64_t v71 = __chkstk_darwin(v70);
  sub_1000E23D4(v71, v72, v73, v74, v75, v76, v77, v78, (uint64_t)v216);
  __chkstk_darwin(v79);
  sub_1000E21E8();
  __chkstk_darwin(v80);
  uint64_t v258 = (uint64_t)&v216 - v81;
  uint64_t v82 = sub_1000E2280();
  uint64_t v83 = sub_100016544(v82);
  __chkstk_darwin(v83);
  sub_100017DC8();
  uint64_t v84 = sub_10002572C(&qword_10021BF30);
  uint64_t v85 = sub_100016544(v84);
  __chkstk_darwin(v85);
  sub_10001DDC8();
  uint64_t v262 = type metadata accessor for UserAgent();
  sub_100020C48();
  uint64_t v260 = v86;
  __chkstk_darwin(v87);
  sub_10000E04C();
  uint64_t v261 = v88;
  uint64_t v232 = sub_1000E25D0();
  sub_100020C48();
  uint64_t v231 = v89;
  __chkstk_darwin(v90);
  sub_100017CD4();
  uint64_t v263 = sub_100023CE4();
  uint64_t v264 = v27;
  *(void *)(v263 + 16) = v27;
  uint64_t v91 = *(void **)(v29 + 56);
  _Block_copy(v27);
  swift_retain();
  sub_10001DAF4((uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__client, (void (*)(uint64_t))sub_10002A150);
  [v32 queryId];
  sub_1000E2454();
  sub_1000281FC();
  uint64_t v92 = sub_100029254(v91, 7, v23);
  sub_10000F62C();
  if ((v93 & 1) == 0
    || (uint64_t v94 = sub_100012824((uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__bag, (uint64_t (*)(uint64_t))sub_100012864)) == 0)
  {
    [v32 queryId];
    unint64_t v98 = v264;
    sub_1000260E0();
    v100();
    *(unsigned char *)(v92 + qword_10021B6C8) = 36;
    sub_100011708();
    swift_release();
LABEL_7:
    swift_release();
    goto LABEL_8;
  }
  uint64_t v230 = v94;
  sub_10001DAF4((uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__userAgent, (void (*)(uint64_t))sub_10002A280);
  uint64_t v95 = sub_100029494();
  sub_1000184F4(v95, v96, v262);
  if (v97)
  {
    sub_100019994(v20, &qword_10021BF30);
    [v32 queryId];
    unint64_t v98 = v264;
    sub_1000260E0();
    v99();
    *(unsigned char *)(v92 + qword_10021B6C8) = 37;
    sub_100011708();
    swift_release();
    swift_release();
    sub_1000E2E9C();
LABEL_8:
    uint64_t v101 = v98;
LABEL_9:
    _Block_release(v101);
    sub_10000DFB8();
    return;
  }
  uint64_t v227 = v92;
  uint64_t v229 = v21;
  sub_1000E2C90();
  sub_10000E0F4();
  v102();
  if (!swift_unknownObjectWeakLoadStrong())
  {
    [v32 queryId];
    unint64_t v98 = v264;
    sub_1000260E0();
    v116();
    sub_10001AAA4(qword_10021B6C8);
    swift_release();
    sub_1000E2E9C();
    sub_10002A494();
    sub_100023C70();
    v117();
    goto LABEL_7;
  }
  sub_1000E2FD8();
  uint64_t v226 = v103;
  uint64_t v104 = v103;
  sub_100023FDC(v105);
  sub_1000E2920();
  uint64_t v106 = v266;
  if (qword_100218AF0 != -1) {
    swift_once();
  }
  sub_1000E2174((uint64_t)v259, (uint64_t)qword_1002368E8);
  uint64_t v228 = v29;
  swift_retain_n();
  id v107 = v32;
  uint64_t v225 = v104;
  uint64_t v108 = Logger.logObject.getter();
  os_log_type_t v109 = static os_log_type_t.default.getter();
  if (sub_1000165B4(v109))
  {
    uint64_t v110 = sub_10001AB54();
    id v224 = (char *)sub_10001AB54();
    uint64_t v266 = (uint64_t)v224;
    *(_DWORD *)uint64_t v110 = 136446722;
    uint64_t v221 = v110 + 4;
    os_log_t v222 = v108;
    LODWORD(v223) = v104;
    type metadata accessor for SessionType();
    sub_10003233C(&qword_10021DB60, (void (*)(uint64_t))&type metadata accessor for SessionType);
    uint64_t v111 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v113 = sub_1000E2D80(v111, v112);
    sub_1000E2A1C(v113);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v110 + 12) = 2050;
    id v114 = [v107 queryId];

    uint64_t v265 = (uint64_t)v114;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    *(_WORD *)(v110 + 22) = 2050;
    uint64_t v265 = v106;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    os_log_t v115 = v222;
    _os_log_impl((void *)&_mh_execute_header, v222, (os_log_type_t)v223, "Session %{public}s performing query %{public}llu requestId: %{public}llu", (uint8_t *)v110, 0x20u);
    swift_arrayDestroy();
    sub_100017D40();
    sub_100017D40();
  }
  else
  {

    swift_release_n();
  }
  type metadata accessor for PARNetworkRequestFactory();
  uint64_t v118 = sub_1000E273C();
  uint64_t v119 = swift_retain();
  sub_10001E5C0(v119, v118);
  sub_10002E7C0();
  sub_1000E8784();
  swift_unknownObjectRelease();
  sub_10008D6C0();
  swift_release();
  sub_100027C24(v22, (void (*)(void))type metadata accessor for SessionTokens);
  uint64_t v120 = v256;
  uint64_t v121 = v257;
  uint64_t v122 = v258;
  sub_1000E27B8();
  uint64_t v223 = v123;
  os_log_t v222 = v124;
  sub_10000E0F4();
  v125();
  if (qword_100218B70 != -1) {
    swift_once();
  }
  sub_1000E2174((uint64_t)v259, (uint64_t)qword_100236A68);
  unint64_t v126 = *(void (**)(uint64_t, uint64_t, uint64_t))(v120 + 16);
  v126(v254, v122, v121);
  uint64_t v221 = v120 + 16;
  unint64_t v219 = v126;
  v126(v255, v122, v121);
  uint64_t v127 = (char *)v107;
  uint64_t v128 = Logger.logObject.getter();
  int v129 = static os_log_type_t.debug.getter();
  BOOL v130 = os_log_type_enabled(v128, (os_log_type_t)v129);
  uint64_t v220 = v106;
  if (v130)
  {
    uint64_t v216 = v128;
    int v218 = v129;
    char v131 = v127;
    uint64_t v132 = sub_1000E215C();
    uint64_t v217 = sub_100023E3C();
    uint64_t v266 = v217;
    *(_DWORD *)uint64_t v132 = 134349826;
    sub_1000E2A1C((uint64_t)[v131 queryId]);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    id v224 = v131;

    *(_WORD *)(v132 + 12) = 2080;
    uint64_t v133 = URLRequest.debugDescription.getter();
    uint64_t v265 = sub_1000E2D80(v133, v134);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    char v135 = *(void (**)(void))(v120 + 8);
    sub_100029304();
    sub_1000292E0();
    v135();
    *(_WORD *)(v132 + 22) = 2080;
    if (!URLRequest.allHTTPHeaderFields.getter()) {
      Dictionary.init(dictionaryLiteral:)();
    }
    uint64_t v136 = v216;
    Dictionary.description.getter();
    swift_bridgeObjectRelease();
    uint64_t v137 = sub_1000E2EF0();
    uint64_t v265 = sub_10001C274(v137, v138, v139);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000292E0();
    v135();
    *(_WORD *)(v132 + 32) = 2050;
    uint64_t v106 = v220;
    uint64_t v265 = v220;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_1000E2DB0();
    _os_log_impl((void *)&_mh_execute_header, v136, v140, "performing query %{public}llu request: %s header: %s requestId: %{public}llu", (uint8_t *)v132, 0x2Au);
    sub_10002EE98();
    sub_100017D40();
    sub_100017D40();

    uint64_t v141 = v227;
    uint64_t v127 = v224;
  }
  else
  {

    uint64_t v142 = *(void (**)(void))(v120 + 8);
    sub_1000292E0();
    v142();
    sub_1000292E0();
    v142();

    uint64_t v141 = v227;
  }
  id v143 = sub_1000C18D4();
  sub_100078FE4(113, 0xE100000000000000);
  if (v144)
  {
    NSString v145 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v145 = 0;
  }
  [v143 setInput:v145];

  unint64_t v146 = (unint64_t)[v127 triggerEvent];
  if (!(v146 >> 31))
  {
    [v143 setTriggerEvent:v146];
    [v143 setEndpoint:11];
    sub_10002E7C0();
    id v147 = v143;
    id v148 = [v127 queryId];
    id v149 = [objc_allocWithZone((Class)_CPFeedbackPayload) initWithCodable:v147];
    [v149 setQueryId:v148];

    sub_1000148D0();
    swift_unknownObjectRelease();

    uint64_t v254 = sub_1000C38FC();
    uint64_t v150 = (void *)sub_10007FBE8();
    id v224 = (char *)sub_1000B7A00(v258, 2);
    uint64_t v255 = v151;

    uint64_t Strong = swift_weakLoadStrong();
    if (Strong)
    {
      uint64_t v153 = Strong;
      int v154 = *(unsigned __int8 *)(v141 + 80);
      sub_10002A020();
      v155();
      uint64_t v232 = *(void *)(v141 + qword_100236B10);
      LODWORD(v231) = *(unsigned __int8 *)(v141 + qword_100236B10 + 8);
      type metadata accessor for ResourceAccessNetworkSpan();
      id v156 = v147;
      uint64_t v157 = v106;
      uint64_t v158 = sub_1000281FC();
      uint64_t v159 = v127;
      uint64_t v160 = v224;
      uint64_t v161 = v254;
      swift_unknownObjectRetain_n();
      uint64_t v162 = v160;
      uint64_t v215 = v158;
      uint64_t v106 = v157;
      id v147 = v156;
      uint64_t v163 = v227;
      *(void *)(v163 + qword_100236B08) = sub_1000B0F00(v153, v154, v23, v232, v231, v162, v161, 0, 0xE000000000000000, v215);

      uint64_t v127 = v159;
      swift_unknownObjectRelease();
      swift_release();
    }
    UUID.init()();
    uint64_t v266 = v255;
    id v164 = [v127 queryId];
    uint64_t v165 = sub_100023CFC();
    *(void *)(v165 + 16) = v164;
    *(void *)(v165 + 24) = v106;
    uint64_t v166 = sub_100023CFC();
    *(void *)(v166 + 16) = sub_1000E2034;
    *(void *)(v166 + 24) = v165;
    sub_10002572C(&qword_10021DC90);
    sub_10002572C(&qword_10021DC98);
    sub_100092CA8(&qword_10021DCA0, &qword_10021DC90);
    sub_100026344();
    Publisher.map<A>(_:)();
    swift_release();
    uint64_t v167 = sub_100023CFC();
    uint64_t v168 = v228;
    *(void *)(v167 + 16) = sub_1000E0774;
    *(void *)(v167 + 24) = v168;
    swift_retain();
    sub_10002572C(&qword_10021DCA8);
    Publishers.Map.tryMap<A>(_:)();
    swift_release();
    sub_10000E040();
    v169();
    uint64_t v170 = sub_100023CFC();
    *(void *)(v170 + 16) = sub_1000E07AC;
    *(void *)(v170 + 24) = v168;
    swift_retain();
    sub_10002572C(&qword_10021DCB0);
    Publishers.TryMap.tryMap<A>(_:)();
    swift_release();
    sub_10000E040();
    v171();
    uint64_t v172 = sub_100023CFC();
    *(void *)(v172 + 16) = sub_1000E07E4;
    *(void *)(v172 + 24) = v168;
    swift_retain();
    sub_10002572C(&qword_10021DCB8);
    sub_1000E2BA8();
    Publishers.TryMap.tryMap<A>(_:)();
    swift_release();
    sub_10000E040();
    v173();
    id v174 = v147;
    uint64_t v238 = (uint64_t)v174;
    id v175 = [v127 queryId];
    id v176 = (void *)sub_10002F090();
    v176[2] = v168;
    v176[3] = v174;
    uint64_t v177 = v224;
    v176[4] = v224;
    v176[5] = v175;
    uint64_t v178 = sub_100023CFC();
    *(void *)(v178 + 16) = sub_1000E1F44;
    *(void *)(v178 + 24) = v176;
    swift_retain();
    id v237 = v177;
    uint64_t v179 = v127;
    uint64_t v180 = v239;
    Publishers.TryMap.tryMap<A>(_:)();
    swift_release();
    uint64_t v181 = *(void (**)(void))(v240 + 8);
    sub_1000283AC();
    v181();
    uint64_t v182 = v257;
    sub_100016608();
    v183();
    uint64_t v184 = swift_allocObject();
    *(void *)(v184 + 16) = v179;
    sub_10000E0F4();
    v185();
    uint64_t v186 = sub_100023CFC();
    *(void *)(v186 + 16) = sub_1000E0874;
    *(void *)(v186 + 24) = v184;
    unint64_t v187 = v179;
    sub_10002572C(&qword_10021DD20);
    Publishers.TryMap.tryMap<A>(_:)();
    swift_release();
    sub_1000283AC();
    v181();
    id v241 = [v187 queryId];
    uint64_t v188 = v247;
    sub_1000E300C();
    sub_100016608();
    v189();
    uint64_t v190 = (void *)((v188[80] + 16) & ~(unint64_t)v188[80]);
    unint64_t v191 = ((unint64_t)v190 + v246 + 7) & 0xFFFFFFFFFFFFFFF8;
    sub_10001ED98();
    unint64_t v193 = v192 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v194 = swift_allocObject();
    v188 += 32;
    sub_1000E27FC();
    v195();
    *(void *)(v194 + v191) = v241;
    *(void *)&v179[v194] = v220;
    *(void *)(v194 + v180) = v228;
    sub_1000E2FB8();
    *(void *)(v194 + v182) = v188;
    sub_1000E2FAC();
    *(void *)(v194 + v193) = v190;
    uint64_t v196 = sub_100023CFC();
    *(void *)(v196 + 16) = sub_1000E0898;
    *(void *)(v196 + 24) = v194;
    swift_retain();
    uint64_t v259 = v188;
    uint64_t v247 = v190;
    uint64_t v197 = sub_10002572C(&qword_10021DD28);
    sub_100092CA8(&qword_10021DD30, &qword_10021DC50);
    sub_100092CA8(&qword_10021DD38, &qword_10021DD28);
    uint64_t v198 = v252;
    Publisher.catch<A>(_:)();
    swift_release();
    sub_10000E040();
    v199();
    uint64_t v200 = sub_100023CFC();
    sub_1000E2448(v200);
    *(void *)(v198 + 24) = &off_1001FDB50;
    swift_unknownObjectWeakInit();
    uint64_t v201 = v253;
    uint64_t v202 = v243;
    sub_1000E0380(v253, v243);
    sub_1000E2E14();
    uint64_t v205 = v204 & ~v203;
    sub_1000E2898();
    unint64_t v207 = (v206 + v205 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v208 = swift_allocObject();
    uint64_t v209 = sub_1000E2CB0(v208);
    sub_1000E03DC(v202, v209 + v205);
    *(void *)(v197 + v207) = v227;
    uint64_t v210 = (void (**)())(v197 + ((v207 + 15) & 0xFFFFFFFFFFFFFFF8));
    uint64_t v211 = v263;
    *uint64_t v210 = sub_1000E209C;
    v210[1] = (void (*)())v211;
    sub_100092CA8((unint64_t *)&unk_10021DD40, &qword_10021DC58);
    swift_retain();
    swift_retain();
    Publisher<>.sink(receiveValue:)();
    swift_release();
    sub_10000E040();
    v212();
    sub_1000998E8();
    swift_release();
    sub_1000C1BD4();

    swift_unknownObjectRelease();
    swift_release();
    swift_unknownObjectRelease();
    sub_1000E2E9C();
    swift_release();
    sub_100027C24(v201, (void (*)(void))type metadata accessor for CancellableStoreKey);
    sub_10000E040();
    v213();
    sub_100027C24(v229, (void (*)(void))type metadata accessor for PegasusContext);
    sub_10000E040();
    v214();
    swift_release();
    uint64_t v101 = v264;
    goto LABEL_9;
  }
  __break(1u);
}

void sub_1000D3484()
{
  sub_10000DFE0();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  v272[4] = v6;
  sub_100024344();
  uint64_t v7 = type metadata accessor for Logger();
  sub_100020C48();
  v272[0] = v8;
  __chkstk_darwin(v9);
  uint64_t v271 = v10;
  sub_10001AB78();
  sub_10001D79C(v11);
  uint64_t v260 = sub_10002572C(&qword_10021DC30);
  sub_100020C48();
  uint64_t v259 = v12;
  __chkstk_darwin(v13);
  sub_10000E04C();
  sub_10001D79C(v14);
  uint64_t v262 = sub_10002572C(&qword_10021DC38);
  sub_100020C48();
  uint64_t v261 = v15;
  __chkstk_darwin(v16);
  sub_10001D79C((uint64_t)&v249 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v264 = sub_10002572C(&qword_10021DC40);
  sub_100020C48();
  uint64_t v263 = v18;
  __chkstk_darwin(v19);
  sub_10000E04C();
  sub_10001D79C(v20);
  id v266 = (id)sub_10002572C(&qword_10021DC48);
  sub_100020C48();
  uint64_t v265 = v21;
  __chkstk_darwin(v22);
  sub_100017D2C();
  sub_100024A74();
  __chkstk_darwin(v23);
  sub_100024FFC();
  sub_10001D79C(v24);
  uint64_t v270 = sub_10002572C(&qword_10021DC50);
  sub_100020C48();
  uint64_t v269 = v25;
  __chkstk_darwin(v26);
  sub_10000E04C();
  sub_10001D79C(v27);
  v272[3] = sub_10002572C(&qword_10021DC58);
  sub_100020C48();
  v272[2] = v28;
  __chkstk_darwin(v29);
  v272[1] = (char *)&v249 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = sub_1000E23FC();
  uint64_t v32 = sub_100024920(v31);
  uint64_t v267 = v33;
  __chkstk_darwin(v32);
  sub_10002CDD4();
  sub_10001D79C(v34);
  sub_1000E2150((uint64_t)&v293);
  __chkstk_darwin(v35);
  uint64_t v273 = (uint64_t)&v249 - v36;
  uint64_t v279 = sub_1000E29EC();
  sub_100020C48();
  uint64_t v278 = v37;
  __chkstk_darwin(v38);
  sub_10002CDD4();
  sub_1000288DC(v39);
  __chkstk_darwin(v40);
  sub_1000288DC((uint64_t)&v249 - v41);
  __chkstk_darwin(v42);
  sub_1000288DC((uint64_t)&v249 - v43);
  __chkstk_darwin(v44);
  sub_100024FFC();
  sub_10001D79C(v45);
  sub_1000E2150((uint64_t)&v279);
  __chkstk_darwin(v46);
  uint64_t v281 = (uint64_t)&v249 - v47;
  uint64_t v48 = sub_1000E2280();
  uint64_t v49 = sub_100016544(v48);
  __chkstk_darwin(v49);
  uint64_t v51 = sub_10002F02C(v50, v249);
  uint64_t v52 = sub_100016544(v51);
  __chkstk_darwin(v52);
  sub_100016550();
  uint64_t v53 = sub_10002572C(&qword_10021BF30);
  uint64_t v54 = sub_100016544(v53);
  __chkstk_darwin(v54);
  sub_100017D2C();
  uint64_t Strong = v55;
  sub_10000E100();
  __chkstk_darwin(v56);
  id v285 = (char *)&v249 - v57;
  uint64_t v58 = type metadata accessor for UserAgent();
  sub_100020C48();
  uint64_t v60 = v59;
  __chkstk_darwin(v61);
  sub_100017D2C();
  id v286 = v62;
  sub_10000E100();
  __chkstk_darwin(v63);
  uint64_t v65 = (char *)&v249 - v64;
  uint64_t v258 = type metadata accessor for Client();
  sub_100020C48();
  uint64_t v257 = v66;
  __chkstk_darwin(v67);
  sub_1000E2628(v68, v249);
  uint64_t v289 = sub_100023CE4();
  *(void *)(v289 + 16) = v3;
  _Block_copy((const void *)v3);
  if (qword_100218B10 != -1) {
    swift_once();
  }
  uint64_t v292 = v58;
  uint64_t v280 = v7;
  uint64_t v69 = (void *)sub_10002A10C(v7, (uint64_t)qword_100236948);
  swift_retain_n();
  id v70 = v0;
  id v288 = v69;
  uint64_t v71 = Logger.logObject.getter();
  os_log_type_t v72 = static os_log_type_t.default.getter();
  BOOL v73 = os_log_type_enabled(v71, v72);
  uint64_t v291 = (const void *)v3;
  if (v73)
  {
    uint64_t v74 = sub_10001D784();
    uint64_t v282 = v1;
    uint64_t v75 = v74;
    uint64_t v76 = sub_10001AB54();
    uint64_t v284 = v60;
    v294[0] = v76;
    *(_DWORD *)uint64_t v75 = 136446466;
    uint64_t v77 = v65;
    type metadata accessor for SessionType();
    sub_10003233C(&qword_10021DB60, (void (*)(uint64_t))&type metadata accessor for SessionType);
    uint64_t v78 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v80 = sub_10001C274(v78, v79, v294);
    sub_1000E2D5C(v80);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_1000E2F34();
    swift_bridgeObjectRelease();
    *(_WORD *)(v75 + 12) = 2048;
    id v81 = [v70 queryId];

    uint64_t v293 = (uint64_t)v81;
    uint64_t v65 = v77;
    sub_1000E2E34();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl((void *)&_mh_execute_header, v71, v72, "Session %{public}s performing zkw query[%llu]", (uint8_t *)v75, 0x16u);
    sub_1000E28EC();
    uint64_t v3 = (uint64_t)v291;
    uint64_t v60 = v284;
    sub_100017D40();
    uint64_t v1 = v282;
    sub_100017D40();
  }
  else
  {

    sub_1000E2F34();
  }
  uint64_t v82 = v5;
  uint64_t v83 = *(void **)(v5 + 56);
  swift_retain();
  uint64_t v84 = (uint64_t)v290;
  sub_10001DAF4((uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__client, (void (*)(uint64_t))sub_10002A150);
  sub_1000E253C();
  sub_1000E2454();
  sub_1000281FC();
  uint64_t v85 = sub_100029254(v83, 3, v84);
  sub_10000F62C();
  if ((v86 & 1) == 0)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_10002572C(&qword_100219280);
    uint64_t inited = (__n128 *)swift_initStackObject();
    char v93 = sub_100025460(inited, (__n128)xmmword_1001A2A20);
    uint64_t v94 = sub_1000E218C((uint64_t)v93, (uint64_t)&type metadata for String);
    sub_100018548(v94, v95);
    Dictionary.init(dictionaryLiteral:)();
    id v96 = objc_allocWithZone((Class)NSError);
    id v97 = sub_1000E2514();
    unint64_t v98 = v70;
    int v99 = Logger.logObject.getter();
    os_log_type_t v100 = static os_log_type_t.error.getter();
    BOOL v101 = os_log_type_enabled(v99, v100);
    uint64_t v275 = v85;
    if (v101)
    {
      *(_DWORD *)sub_100017D90() = 134217984;
      sub_1000E2DBC((uint64_t)[v98 queryId]);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      sub_1000E2B90((void *)&_mh_execute_header, v99, v100, "Bag fetch failed, can't complete zkw query[%llu]");
      sub_100017D40();
    }
    else
    {

      int v99 = v98;
    }

    id v117 = objc_allocWithZone((Class)_CPSkipSearchFeedback);
    id v118 = sub_1000CC200(3, 0, 0xE000000000000000);
    swift_unknownObjectRetain();
    id v119 = [v98 queryId];
    id v120 = [objc_allocWithZone((Class)_CPFeedbackPayload) initWithCodable:v118];
    [v120 setQueryId:v119];
    uint64_t v121 = Strong;
    sub_10001DAF4((uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__userAgent, (void (*)(uint64_t))sub_10002A280);
    uint64_t v122 = v292;
    sub_1000184F4(v121, 1, v292);
    if (v90)
    {
      parsecdUserAgent.getter();
      sub_100019994(v121, &qword_10021BF30);
    }
    else
    {
      (*(void (**)(id, uint64_t, uint64_t))(v60 + 32))(v286, v121, v122);
    }
    uint64_t v3 = (uint64_t)v291;
    sub_1000148D0();
    swift_unknownObjectRelease();

    sub_100019BC8();
    v123();
    [v98 queryId];
    id v124 = v97;
    id v125 = sub_100030D6C((uint64_t)v97);

    if (v125) {
      unint64_t v126 = (void *)_convertErrorToNSError(_:)();
    }
    else {
      unint64_t v126 = 0;
    }
    uint64_t v127 = v275;
    sub_1000E2214();
    v128();

    swift_errorRelease();
    *(unsigned char *)(v127 + qword_10021B6C8) = 36;
    sub_100011708();
    swift_release();
    swift_release();

    goto LABEL_56;
  }
  uint64_t v87 = (uint64_t)v285;
  sub_10001DAF4((uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__userAgent, (void (*)(uint64_t))sub_10002A280);
  uint64_t v88 = sub_1000E2274();
  sub_1000184F4(v88, v89, v292);
  if (v90)
  {
    sub_100019994(v87, &qword_10021BF30);
    sub_1000E253C();
    sub_1000260E0();
    v91();
    sub_1000E266C(qword_10021B6C8);
    swift_release();
LABEL_55:
    swift_release();
LABEL_56:
    uint64_t v246 = (const void *)v3;
    goto LABEL_57;
  }
  sub_10002E728();
  sub_10000E0F4();
  v102();
  uint64_t v103 = sub_100012824((uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__bag, (uint64_t (*)(uint64_t))sub_100012864);
  if (!v103)
  {
    sub_1000E253C();
    sub_1000260E0();
    v129();
    sub_1000E266C(qword_10021B6C8);
    swift_release();
LABEL_27:
    sub_100019BC8();
    v131();
    goto LABEL_55;
  }
  uint64_t v104 = (void *)v103;
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (!Strong)
  {
    sub_1000E253C();
    sub_1000260E0();
    v130();
    *(unsigned char *)(v85 + qword_10021B6C8) = 39;
    sub_100011708();
    swift_release();

    goto LABEL_27;
  }
  uint64_t v284 = v60;
  id v286 = v104;
  if (([v104 isEnabled] & 1) == 0)
  {
    uint64_t v132 = (void *)Logger.logObject.getter();
    os_log_type_t v133 = static os_log_type_t.default.getter();
    if (sub_1000165B4(v133))
    {
      unint64_t v134 = (_WORD *)sub_100023E24();
      sub_10002B114(v134);
      sub_100018528((void *)&_mh_execute_header, v135, v136, "no zkw, bag disabled");
      sub_100017D40();
    }

    objc_allocWithZone((Class)_CPSkipSearchFeedback);
    id v137 = sub_1000CC200(2, 0, 0xE000000000000000);
    sub_1000E2808();
    id v138 = sub_1000E253C();
    id v139 = [objc_allocWithZone((Class)_CPFeedbackPayload) initWithCodable:v137];
    [v139 setQueryId:v138];
    sub_1000148D0();
    swift_unknownObjectRelease();

    sub_1000E253C();
    sub_1000260E0();
    v140();
    sub_1000E266C(qword_10021B6C8);

    swift_release();
    swift_unknownObjectRelease();

    goto LABEL_54;
  }
  sub_1000E2808();
  sub_1000E8784();
  swift_unknownObjectRelease();
  sub_100023FDC(v283);
  v294[0] = 0;
  swift_stdlib_random();
  uint64_t v105 = v294[0];
  swift_retain_n();
  uint64_t v106 = v70;
  int v107 = (int)v288;
  uint64_t v108 = Logger.logObject.getter();
  os_log_type_t v109 = static os_log_type_t.default.getter();
  BOOL v110 = sub_1000165B4(v109);
  uint64_t v256 = v65;
  uint64_t v282 = v1;
  uint64_t v255 = v82;
  if (v110)
  {
    uint64_t v111 = sub_10001AB54();
    id v285 = (char *)v105;
    uint64_t v112 = v111;
    uint64_t v254 = sub_10001AB54();
    v294[0] = v254;
    *(_DWORD *)uint64_t v112 = 136446722;
    LODWORD(v253) = v107;
    type metadata accessor for SessionType();
    sub_10003233C(&qword_10021DB60, (void (*)(uint64_t))&type metadata accessor for SessionType);
    uint64_t v113 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v115 = sub_10001C274(v113, v114, v294);
    sub_1000E2D5C(v115);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v112 + 12) = 2050;
    id v116 = [v106 queryId];

    uint64_t v293 = (uint64_t)v116;
    uint64_t v65 = v256;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    *(_WORD *)(v112 + 22) = 2050;
    uint64_t v293 = (uint64_t)v285;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v108, (os_log_type_t)v253, "Session %{public}s performing query %{public}llu requestId: %{public}llu", (uint8_t *)v112, 0x20u);
    swift_arrayDestroy();
    sub_100017D40();
    uint64_t v105 = (uint64_t)v285;
    sub_100017D40();
  }
  else
  {

    swift_release_n();
  }
  type metadata accessor for PARNetworkRequestFactory();
  uint64_t v141 = sub_1000E273C();
  uint64_t v142 = swift_retain();
  sub_10001E5C0(v142, v141);
  sub_10008C008();
  uint64_t v276 = v106;
  id v285 = (char *)v105;
  swift_release();
  sub_1000E2960();
  sub_1000E2570();
  uint64_t v143 = v279;
  uint64_t v254 = v144;
  uint64_t v253 = v145;
  sub_10000E0F4();
  v146();
  if (qword_100218B70 != -1) {
    swift_once();
  }
  sub_1000E2174(v280, (uint64_t)qword_100236A68);
  id v147 = (void (*)(void))MEMORY[0x10];
  sub_1000E24BC();
  v147();
  sub_1000E2DA4();
  uint64_t v252 = 16;
  uint64_t v251 = v147;
  sub_1000E24BC();
  v147();
  id v148 = v276;
  id v149 = Logger.logObject.getter();
  id v150 = (id)static os_log_type_t.debug.getter();
  BOOL v151 = os_log_type_enabled(v149, (os_log_type_t)v150);
  uint64_t v275 = v85;
  if (v151)
  {
    LODWORD(v250) = v150;
    uint64_t v276 = v149;
    uint64_t v152 = sub_1000E215C();
    uint64_t v249 = sub_100023E3C();
    v294[0] = v249;
    *(_DWORD *)uint64_t v152 = 134349826;
    sub_1000E2D5C((uint64_t)[v148 queryId]);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    *(_WORD *)(v152 + 12) = 2080;
    uint64_t v153 = URLRequest.debugDescription.getter();
    uint64_t v293 = sub_10001C274(v153, v154, v294);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v3 = 8;
    id v149 = MEMORY[8];
    sub_1000283D4();
    sub_100023C70();
    ((void (*)(void))v149)();
    *(_WORD *)(v152 + 22) = 2080;
    uint64_t v143 = (uint64_t)v274;
    if (!URLRequest.allHTTPHeaderFields.getter()) {
      Dictionary.init(dictionaryLiteral:)();
    }
    uint64_t v155 = v285;
    uint64_t v156 = Dictionary.description.getter();
    unint64_t v158 = v157;
    swift_bridgeObjectRelease();
    uint64_t v159 = sub_10001C274(v156, v158, v294);
    sub_1000E2D5C(v159);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100023C70();
    ((void (*)(void))v149)();
    sub_1000E30E8();
    uint64_t v293 = (uint64_t)v155;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_1000E2DB0();
    id v150 = v276;
    _os_log_impl((void *)&_mh_execute_header, v276, v160, "performing query %{public}llu request %s header: %s requestId: %{public}llu", (uint8_t *)v152, 0x2Au);
    sub_1000E2588((uint64_t)v272);
    swift_arrayDestroy();
    sub_100017D40();
    sub_100017D40();

    uint64_t v65 = v256;
    uint64_t v85 = v275;
  }
  else
  {

    uint64_t v166 = (void (*)(void))MEMORY[8];
    sub_1000292E0();
    v166();
    sub_1000E2DA4();
    sub_1000292E0();
    v166();
  }
  uint64_t v167 = v255;
  sub_1000C18D4();
  uint64_t v168 = sub_100024344();
  sub_1000CCD2C(v168, 0xE000000000000000, v150);
  [v150 setSearchType:1];
  unint64_t v169 = (unint64_t)[v148 triggerEvent];
  if (v169 >> 31)
  {
    __break(1u);
    swift_once();
    sub_10002A10C(v280, (uint64_t)qword_100236A68);
    sub_1000E246C();
    uint64_t v161 = Logger.logObject.getter();
    os_log_type_t v162 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v161, v162))
    {
      sub_100017D90();
      uint64_t v163 = (void *)sub_1000E2A84();
      uint64_t v164 = sub_1000E22B0(5.7779e-34);
      uint64_t v276 = v149;
      uint64_t v165 = v164;
      sub_1000E2554(v164);
      uint64_t v65 = v256;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v163 = v165;
      id v149 = v276;
      uint64_t v143 = 0x100216000;
      swift_errorRelease();
      sub_1000E2DD0((void *)&_mh_execute_header, v161, v162, "zeroKeywordRequest failed: %@");
      sub_10002572C(&qword_100219710);
      sub_1000E29BC();
      sub_100017D40();
      sub_100017D40();
    }
    else
    {
      swift_errorRelease();
    }

    [v149 *(SEL *)(v143 + 1064)];
    sub_1000E2AD8();
    sub_100030D6C(v167);
    sub_1000E3024();
    if (v150) {
      id v195 = (void *)_convertErrorToNSError(_:)();
    }
    else {
      id v195 = 0;
    }
    sub_1000E2214();
    v247();

    swift_errorRelease();
    sub_1000E266C(qword_10021B6C8);
    swift_release();
    swift_unknownObjectRelease();

    uint64_t v248 = swift_errorRelease();
    sub_1000E2D68(v248, (void (*)(void))type metadata accessor for PegasusContext);
    sub_100027C24(v282, (void (*)(void))type metadata accessor for SessionTokens);
LABEL_54:
    (*(void (**)(char *, uint64_t))(v284 + 8))(v65, v292);
    goto LABEL_55;
  }
  [v150 setTriggerEvent:v169];
  [v150 setEndpoint:6];
  uint64_t v170 = *(void *)(v167 + 64);
  swift_unknownObjectRetain();
  id v171 = v150;
  uint64_t v172 = &selRef_isEqualToString_;
  id v173 = [v148 queryId];
  id v174 = [objc_allocWithZone((Class)_CPFeedbackPayload) initWithCodable:v171];
  [v174 setQueryId:v173];
  id v274 = v171;

  sub_1000148D0();
  swift_unknownObjectRelease();

  id v175 = v148;
  id v176 = Logger.logObject.getter();
  os_log_type_t v177 = static os_log_type_t.debug.getter();
  if (sub_100017D10(v177))
  {
    uint64_t v178 = (uint8_t *)sub_100017D90();
    *(_DWORD *)uint64_t v178 = 134217984;
    sub_1000E2554((uint64_t)[v175 queryId]);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl((void *)&_mh_execute_header, v176, (os_log_type_t)v170, "Dispatching network request for zkw query: (%llu)", v178, 0xCu);
    sub_100017D40();
  }
  else
  {

    id v176 = v175;
  }

  uint64_t v179 = sub_1000C38FC();
  uint64_t v180 = (void *)sub_10007FBE8();
  id v181 = sub_1000B7A00(v281, 2);
  uint64_t v183 = v182;

  uint64_t v184 = swift_weakLoadStrong();
  uint64_t v277 = v179;
  id v250 = v181;
  if (v184)
  {
    uint64_t v185 = v184;
    LODWORD(v257) = *(unsigned __int8 *)(v85 + 80);
    uint64_t v186 = (uint64_t)v290;
    sub_10002A020();
    v187();
    uint64_t v188 = *(void *)(v85 + qword_100236B10);
    char v189 = *(unsigned char *)(v85 + qword_100236B10 + 8);
    type metadata accessor for ResourceAccessNetworkSpan();
    uint64_t v3 = sub_1000281FC();
    id v190 = v181;
    unint64_t v191 = v175;
    id v192 = v190;
    swift_unknownObjectRetain_n();
    id v193 = v192;
    swift_retain();
    char v194 = v189;
    uint64_t v172 = &selRef_isEqualToString_;
    *(void *)(v85 + qword_100236B08) = sub_1000B0F00(v185, v257, v186, v188, v194, v193, v179, 12662, 0xE200000000000000, v3);

    id v175 = v191;
    swift_unknownObjectRelease();
    swift_release();
  }
  else
  {
    id v196 = v181;
    swift_retain();
  }
  UUID.init()();
  uint64_t v276 = v183;
  v294[0] = (uint64_t)v183;
  id v197 = [v175 v172[133]];
  uint64_t v198 = sub_100023CFC();
  uint64_t v199 = v285;
  *(void *)(v198 + 16) = v197;
  *(void *)(v198 + 24) = v199;
  uint64_t v200 = sub_100023CFC();
  *(void *)(v200 + 16) = sub_1000E2034;
  *(void *)(v200 + 24) = v198;
  sub_10002572C(&qword_10021DC90);
  sub_10002572C(&qword_10021DC98);
  sub_100092CA8(&qword_10021DCA0, &qword_10021DC90);
  sub_1000E2BA8();
  Publisher.map<A>(_:)();
  swift_release();
  swift_release();
  uint64_t v201 = sub_100023CFC();
  uint64_t v202 = v255;
  *(void *)(v201 + 16) = sub_1000E0774;
  *(void *)(v201 + 24) = v202;
  swift_retain();
  sub_10002572C(&qword_10021DCA8);
  Publishers.Map.tryMap<A>(_:)();
  swift_release();
  sub_10000E040();
  v203();
  uint64_t v204 = sub_100023CFC();
  *(void *)(v204 + 16) = sub_1000E07AC;
  *(void *)(v204 + 24) = v202;
  swift_retain();
  sub_10002572C(&qword_10021DCB0);
  Publishers.TryMap.tryMap<A>(_:)();
  swift_release();
  sub_10002EEB0();
  sub_10000E040();
  v205();
  uint64_t v206 = sub_100023CFC();
  *(void *)(v206 + 16) = sub_1000E07E4;
  *(void *)(v206 + 24) = v202;
  swift_retain();
  unint64_t v207 = v172;
  uint64_t v208 = sub_10002572C(&qword_10021DCB8);
  sub_1000E2F98();
  Publishers.TryMap.tryMap<A>(_:)();
  swift_release();
  sub_10000E040();
  v209();
  sub_1000E2D98();
  id v211 = v210;
  id v274 = v211;
  id v212 = v250;
  id v290 = v212;
  id v213 = [v175 v207[133]];
  uint64_t v214 = (void *)sub_10002F090();
  v214[2] = v202;
  v214[3] = v211;
  v214[4] = v212;
  v214[5] = v213;
  uint64_t v215 = sub_100023CFC();
  *(void *)(v215 + 16) = sub_1000E1F44;
  *(void *)(v215 + 24) = v214;
  swift_retain();
  sub_1000E2970();
  Publishers.TryMap.tryMap<A>(_:)();
  swift_release();
  uint64_t v216 = v265;
  uint64_t v217 = *(void (**)(void))(v265 + 8);
  sub_100016614();
  v217();
  sub_1000E2F08((uint64_t)&v281);
  sub_1000E2CC8();
  sub_100016608();
  v218();
  sub_1000E2E14();
  uint64_t v219 = swift_allocObject();
  *(void *)(v219 + 16) = v175;
  sub_10000E0F4();
  v220();
  uint64_t v221 = sub_100023CFC();
  *(void *)(v221 + 16) = sub_1000E0874;
  *(void *)(v221 + 24) = v219;
  os_log_t v222 = v175;
  sub_10002572C(&qword_10021DD20);
  Publishers.TryMap.tryMap<A>(_:)();
  swift_release();
  sub_100016614();
  v217();
  id v266 = [v222 v207[133]];
  uint64_t v223 = v272[0];
  sub_1000E2570();
  uint64_t v224 = v280;
  sub_100016608();
  v225();
  sub_1000E27C4();
  sub_10002A0D0();
  unint64_t v227 = v226 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v228 = swift_allocObject();
  (*(void (**)(uint64_t, NSObject *, uint64_t))(v223 + 32))(v228 + v221, v222, v224);
  *(void *)((char *)v217 + v228) = v266;
  *(void *)(v228 + v216 + 8) = v285;
  *(void *)(v228 + v208) = v255;
  uint64_t v229 = v274;
  *(void *)(v228 + v3) = v274;
  *(void *)(v228 + v227) = v290;
  uint64_t v230 = sub_100023CFC();
  *(void *)(v230 + 16) = sub_1000E0898;
  *(void *)(v230 + 24) = v228;
  swift_retain();
  id v288 = v229;
  uint64_t v231 = sub_10002572C(&qword_10021DD28);
  uint64_t v232 = sub_100092CA8(&qword_10021DD30, &qword_10021DC50);
  sub_100092CA8(&qword_10021DD38, &qword_10021DD28);
  uint64_t v233 = v270;
  uint64_t v234 = v272[5];
  Publisher.catch<A>(_:)();
  swift_release();
  sub_10000E040();
  v235();
  uint64_t v236 = sub_100023CFC();
  sub_1000E2448(v236);
  *(void *)(v234 + 24) = &off_1001FDB50;
  swift_unknownObjectWeakInit();
  uint64_t v237 = v273;
  uint64_t v238 = v268;
  sub_1000E0380(v273, v268);
  sub_1000E2FD8();
  sub_1000E2D28();
  sub_10001D7A8();
  uint64_t v239 = swift_allocObject();
  *(void *)(v239 + 16) = v234;
  sub_1000E03DC(v238, v239 + v233);
  *(void *)(v239 + v231) = v275;
  uint64_t v240 = (void (**)())(v239 + v232);
  uint64_t v241 = v289;
  *uint64_t v240 = sub_1000E209C;
  v240[1] = (void (*)())v241;
  sub_100092CA8((unint64_t *)&unk_10021DD40, &qword_10021DC58);
  swift_retain();
  swift_retain();
  Publisher<>.sink(receiveValue:)();
  swift_release();
  sub_10000E040();
  v242();
  sub_1000998E8();
  swift_release();
  sub_10008A384();
  sub_1000C1BD4();

  swift_unknownObjectRelease();
  swift_release();
  swift_unknownObjectRelease();

  swift_release();
  sub_100027C24(v237, (void (*)(void))type metadata accessor for CancellableStoreKey);
  sub_1000E26C4();
  sub_10000E040();
  uint64_t v244 = v243();
  sub_1000E2D68(v244, (void (*)(void))type metadata accessor for PegasusContext);
  sub_100027C24(v282, (void (*)(void))type metadata accessor for SessionTokens);
  sub_1000E26C4();
  sub_10000E040();
  v245();
  swift_release();
  uint64_t v246 = v291;
LABEL_57:
  _Block_release(v246);
  sub_10000DFB8();
}

void sub_1000D57D0()
{
  sub_10000DFE0();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  id v331 = v5;
  uint64_t v7 = v6;
  uint64_t v8 = type metadata accessor for Logger();
  sub_100020C48();
  uint64_t v319 = v9;
  __chkstk_darwin(v10);
  uint64_t v318 = v11;
  sub_10001AB78();
  sub_10001D79C(v12);
  uint64_t v307 = sub_10002572C(&qword_10021DC30);
  sub_100020C48();
  uint64_t v306 = v13;
  __chkstk_darwin(v14);
  sub_10000E04C();
  sub_10001D79C(v15);
  uint64_t v309 = sub_10002572C(&qword_10021DC38);
  sub_100020C48();
  uint64_t v308 = v16;
  __chkstk_darwin(v17);
  sub_10000E04C();
  sub_10001D79C(v18);
  uint64_t v311 = sub_10002572C(&qword_10021DC40);
  sub_100020C48();
  uint64_t v310 = v19;
  __chkstk_darwin(v20);
  sub_10000E04C();
  sub_10001D79C(v21);
  uint64_t v313 = sub_10002572C(&qword_10021DC48);
  sub_100020C48();
  uint64_t v312 = v22;
  __chkstk_darwin(v23);
  sub_100024A74();
  __chkstk_darwin(v24);
  sub_100021308();
  sub_100024A74();
  __chkstk_darwin(v25);
  sub_100024FFC();
  sub_10001D79C(v26);
  uint64_t v317 = sub_10002572C(&qword_10021DC50);
  sub_100020C48();
  uint64_t v316 = v27;
  __chkstk_darwin(v28);
  sub_10000E04C();
  sub_10001D79C(v29);
  uint64_t v322 = sub_10002572C(&qword_10021DC58);
  sub_100020C48();
  uint64_t v321 = v30;
  __chkstk_darwin(v31);
  sub_10000E04C();
  uint64_t v320 = v32;
  uint64_t v33 = sub_1000E23FC();
  uint64_t v34 = sub_100024920(v33);
  uint64_t v314 = v35;
  __chkstk_darwin(v34);
  sub_10002CDD4();
  sub_10001D79C(v36);
  sub_1000E2150((uint64_t)&v342);
  __chkstk_darwin(v37);
  sub_100024FFC();
  uint64_t v325 = v38;
  uint64_t v332 = sub_1000E29EC();
  sub_100020C48();
  uint64_t v326 = v39;
  __chkstk_darwin(v40);
  sub_10002CDD4();
  sub_1000288DC(v41);
  __chkstk_darwin(v42);
  sub_100024FFC();
  sub_1000288DC(v43);
  __chkstk_darwin(v44);
  sub_100024FFC();
  sub_1000288DC(v45);
  __chkstk_darwin(v46);
  sub_100024FFC();
  sub_1000288DC(v47);
  __chkstk_darwin(v48);
  sub_100024FFC();
  sub_10001D79C(v49);
  sub_1000E2150((uint64_t)&v351);
  __chkstk_darwin(v50);
  id v333 = (char *)&v297 - v51;
  uint64_t v52 = sub_1000E2280();
  uint64_t v53 = sub_100016544(v52);
  __chkstk_darwin(v53);
  uint64_t v55 = sub_10002F02C(v54, (uint64_t)v297);
  uint64_t v56 = sub_100016544(v55);
  __chkstk_darwin(v56);
  sub_100017D2C();
  sub_100024A74();
  __chkstk_darwin(v57);
  sub_100024FFC();
  uint64_t v59 = v58;
  uint64_t v60 = sub_10002572C(&qword_10021BF30);
  uint64_t v61 = sub_100016544(v60);
  __chkstk_darwin(v61);
  sub_100024A74();
  __chkstk_darwin(v62);
  id v335 = (void (*)(void))((char *)&v297 - v63);
  id v64 = (id)type metadata accessor for UserAgent();
  sub_100020C48();
  uint64_t v341 = v65;
  __chkstk_darwin(v66);
  sub_100024A74();
  __chkstk_darwin(v67);
  uint64_t v349 = (char *)&v297 - v68;
  uint64_t v304 = sub_1000E25D0();
  sub_100020C48();
  uint64_t v303 = v69;
  __chkstk_darwin(v70);
  sub_100017CD4();
  uint64_t v342 = sub_100023CE4();
  *(void *)(v342 + 16) = v2;
  _Block_copy(v2);
  _Block_copy(v2);
  id v71 = [v7 queryString];
  id v348 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v73 = v72;

  v350[0] = 0;
  swift_stdlib_random();
  id v339 = (id)v350[0];
  uint64_t v74 = (void *)v4[7];
  swift_retain();
  sub_10001DAF4((uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__client, (void (*)(uint64_t))sub_10002A150);
  [v7 queryId];
  sub_1000E2454();
  sub_1000281FC();
  uint64_t v305 = v0;
  uint64_t v343 = sub_100029254(v74, 4, v0);
  if (qword_100218B00 != -1) {
    swift_once();
  }
  uint64_t v334 = v8;
  uint64_t v75 = sub_10002A10C(v8, (uint64_t)qword_100236918);
  swift_retain_n();
  id v76 = v7;
  sub_1000E3018();
  swift_bridgeObjectRetain_n();
  uint64_t v77 = v4;
  uint64_t v338 = v75;
  uint64_t v78 = Logger.logObject.getter();
  os_log_type_t v79 = static os_log_type_t.default.getter();
  BOOL v80 = os_log_type_enabled(v78, v79);
  v347 = v2;
  id v345 = v77;
  if (v80)
  {
    uint64_t v81 = sub_1000E215C();
    uint64_t v327 = v59;
    uint64_t v82 = v81;
    uint64_t v302 = sub_100023E3C();
    v350[0] = v302;
    *(_DWORD *)uint64_t v82 = 136446979;
    unint64_t v346 = v73;
    type metadata accessor for SessionType();
    id v340 = v64;
    sub_10003233C(&qword_10021DB60, (void (*)(uint64_t))&type metadata accessor for SessionType);
    uint64_t v83 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v85 = sub_10001C274(v83, v84, v350);
    sub_1000E2908(v85);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v82 + 12) = 2050;
    id v64 = [v77 queryId];

    id v353 = v64;
    uint64_t v2 = v347;
    sub_1000E2CC8();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    *(_WORD *)(v82 + 22) = 2050;
    uint64_t v86 = (uint64_t)v344;
    sub_1000E293C();
    *(_WORD *)(v82 + 32) = 2085;
    swift_bridgeObjectRetain();
    id v353 = (id)sub_10001C274((uint64_t)v348, v346, v350);
    unint64_t v73 = v346;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v78, v79, "Session %{public}s performing lookup query[%{public}llu] requestId:%{public}llu '%{sensitive}s'", (uint8_t *)v82, 0x2Au);
    sub_1000E24A4();
    sub_100017D40();
    uint64_t v87 = v327;
    sub_100017D40();
  }
  else
  {

    sub_1000E2E84();
    swift_release_n();

    uint64_t v86 = (uint64_t)v344;
    uint64_t v87 = v59;
  }
  sub_10000F62C();
  if ((v88 & 1) == 0)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_10002572C(&qword_100219280);
    uint64_t inited = (__n128 *)swift_initStackObject();
    unint64_t v98 = sub_100025460(inited, (__n128)xmmword_1001A2A20);
    uint64_t v99 = sub_1000E218C((uint64_t)v98, (uint64_t)&type metadata for String);
    sub_100018548(v99, v100);
    uint64_t v101 = Dictionary.init(dictionaryLiteral:)();
    id v102 = objc_allocWithZone((Class)NSError);
    uint64_t v103 = sub_10002E854();
    uint64_t v105 = (char *)sub_1000B06A0(v103, v104, 1, v101);
    swift_bridgeObjectRetain_n();
    uint64_t v106 = (void *)Logger.logObject.getter();
    os_log_type_t v107 = static os_log_type_t.error.getter();
    BOOL v108 = sub_1000E287C(v107);
    uint64_t v349 = v105;
    if (v108)
    {
      id v340 = v64;
      uint64_t v109 = sub_100017D90();
      v344 = (char *)&type metadata for Any + 8;
      BOOL v110 = (_DWORD *)v109;
      v350[0] = sub_10001AB54();
      *BOOL v110 = 136642819;
      id v64 = v110 + 1;
      swift_bridgeObjectRetain();
      uint64_t v111 = (uint64_t)v348;
      uint64_t v112 = sub_10001C274((uint64_t)v348, v73, v350);
      sub_1000E2DBC(v112);
      sub_1000E2CC8();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_10002EEC0();
      sub_10002ECC4((void *)&_mh_execute_header, v113, v114, "Bag fetch failed, can't complete query: %{sensitive}s");
      swift_arrayDestroy();
      sub_100017D40();
      sub_100017D40();

      uint64_t v115 = &selRef_isEqualToString_;
    }
    else
    {

      sub_1000E2E84();
      uint64_t v115 = &selRef_isEqualToString_;
      uint64_t v111 = (uint64_t)v348;
    }
    id v129 = v345;
    id v130 = objc_allocWithZone((Class)_CPSkipSearchFeedback);
    id v131 = sub_1000CC200(3, v111, v73);
    swift_unknownObjectRetain();
    id v132 = [v129 v115[133]];
    id v133 = [objc_allocWithZone((Class)_CPFeedbackPayload) initWithCodable:v131];
    [v133 setQueryId:v132];
    sub_1000E2ED8();
    sub_10001DAF4(v134, v135);
    sub_1000184F4(v73, 1, (uint64_t)v64);
    if (v93)
    {
      parsecdUserAgent.getter();
      sub_100019994(v73, &qword_10021BF30);
    }
    else
    {
      sub_1000288EC();
      (*(void (**)(uint64_t, unint64_t, id))(v136 + 32))(v336, v73, v64);
    }
    sub_1000148D0();
    swift_unknownObjectRelease();

    sub_100019BC8();
    v137();
    [v129 v115[133]];
    uint64_t v138 = (uint64_t)v349;
    id v139 = v349;
    id v140 = sub_100030D6C(v138);

    if (v140) {
      uint64_t v141 = (void *)_convertErrorToNSError(_:)();
    }
    else {
      uint64_t v141 = 0;
    }
    uint64_t v142 = v347;
    sub_1000E2214();
    v143();

    swift_errorRelease();
    sub_1000293CC(qword_10021B6C8);
    sub_1000E2B78();
    swift_release();

    _Block_release(v142);
    uint64_t v144 = v142;
    goto LABEL_32;
  }
  sub_1000E2268();
  sub_10001DAF4(v89, v90);
  uint64_t v91 = sub_1000E27AC();
  sub_1000184F4(v91, v92, (uint64_t)v64);
  if (v93)
  {
    swift_bridgeObjectRelease();
    uint64_t v94 = sub_100019994((uint64_t)&type metadata for Any, &qword_10021BF30);
    sub_10002EFDC(v94, "queryId");
    uint64_t v95 = sub_1000270F4();
    v96(v95);
    sub_1000293CC(qword_10021B6C8);
    sub_1000E2B78();
LABEL_31:
    swift_release();
    _Block_release(v2);
    uint64_t v144 = v2;
LABEL_32:
    _Block_release(v144);
    sub_10000DFB8();
    return;
  }
  sub_1000E257C();
  sub_10000E0F4();
  v116();
  uint64_t v117 = sub_100012824((uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__bag, (uint64_t (*)(uint64_t))sub_100012864);
  if (!v117)
  {
    uint64_t v145 = swift_bridgeObjectRelease();
    sub_10002EFDC(v145, "queryId");
    uint64_t v146 = sub_1000270F4();
    v147(v146);
    sub_1000293CC(qword_10021B6C8);
    swift_release();
LABEL_30:
    sub_1000283AC();
    v151();
    goto LABEL_31;
  }
  id v118 = (void *)v117;
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (!Strong)
  {
    uint64_t v148 = swift_bridgeObjectRelease();
    sub_10002EFDC(v148, "queryId");
    uint64_t v149 = sub_1000270F4();
    v150(v149);
    sub_1000293CC(qword_10021B6C8);
    swift_release();

    goto LABEL_30;
  }
  uint64_t v120 = Strong;
  id v340 = v64;
  uint64_t v301 = (void (*)(void))v4;
  uint64_t v121 = v4[3];
  if (([v118 isEnabled] & 1) == 0)
  {
    uint64_t v152 = v118;
    uint64_t v153 = v2;
    unint64_t v154 = (void *)Logger.logObject.getter();
    os_log_type_t v155 = static os_log_type_t.default.getter();
    if (sub_1000165B4(v155))
    {
      uint64_t v156 = (_WORD *)sub_100023E24();
      sub_10002B114(v156);
      sub_100018528((void *)&_mh_execute_header, v157, v158, "no search, bag disabled");
      sub_100017D40();
    }

    objc_allocWithZone((Class)_CPSkipSearchFeedback);
    id v159 = sub_1000CC200(2, (uint64_t)v348, v73);
    sub_10002E7C0();
    id v160 = v345;
    id v161 = [v345 queryId];
    id v162 = [objc_allocWithZone((Class)_CPFeedbackPayload) initWithCodable:v159];
    [v162 setQueryId:v161];
    uint64_t v163 = v349;
    sub_1000148D0();
    swift_unknownObjectRelease();

    [v160 queryId];
    sub_1000260E0();
    v164();
    sub_1000293CC(qword_10021B6C8);

    swift_release();
    swift_unknownObjectRelease();

    (*(void (**)(char *, id))(v341 + 8))(v163, v340);
    sub_1000E2B78();
    _Block_release(v153);
    uint64_t v144 = v153;
    goto LABEL_32;
  }
  v352[0] = &unk_1001FCBE0;
  v352[1] = sub_1000714F0();
  LOBYTE(v350[0]) = 3;
  char v122 = isFeatureEnabled(_:)();
  sub_10001CA50((uint64_t)v350);
  if (v122)
  {
    swift_bridgeObjectRelease();
    if (qword_100218B70 != -1) {
      swift_once();
    }
    uint64_t v123 = v120;
    sub_1000E2174(v334, (uint64_t)qword_100236A68);
    id v124 = v345;
    id v125 = Logger.logObject.getter();
    os_log_type_t v126 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v125, v126))
    {
      uint64_t v127 = sub_10001D784();
      *(_DWORD *)uint64_t v127 = 134349312;
      v350[0] = (uint64_t)[v124 queryId];
      uint64_t v128 = (uint64_t)v349;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      *(_WORD *)(v127 + 12) = 2050;
      sub_1000E2E28();
      v350[0] = v86;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_1000E2C4C((void *)&_mh_execute_header, v125, v126, "Will perform %{public}llu request, requestId: %{public}llu using gRPC endpoint");
      sub_100017D40();
    }
    else
    {

      id v125 = v124;
      sub_1000E2E28();
      uint64_t v128 = (uint64_t)v349;
    }

    uint64_t v167 = (uint64_t)v301;
    swift_unknownObjectRetain();
    uint64_t v168 = v330;
    sub_1000E8784();
    swift_unknownObjectRelease();
    sub_100027C24(v168, (void (*)(void))type metadata accessor for SessionTokens);
    unint64_t v169 = (void (**)(void, void, void, void))v347;
    _Block_copy(v347);
    sub_1000DC4EC(v124, v86, v331, v123, v121, v128, v343, v167, v169);
    sub_10008A384();
    sub_1000C1BD4();
    swift_release();
    swift_unknownObjectRelease();

    sub_100028214();
    v170();
    goto LABEL_63;
  }
  sub_10002E7C0();
  sub_1000E8784();
  swift_unknownObjectRelease();
  sub_100023FDC(v86);
  type metadata accessor for PARNetworkRequestFactory();
  uint64_t v165 = sub_1000E273C();
  uint64_t v166 = swift_retain();
  sub_10001E5C0(v166, v165);
  sub_10008CECC(v86, v345, v118, v87, v339);
  swift_release();
  sub_1000E2960();
  sub_1000E2570();
  uint64_t v329 = v171;
  uint64_t v302 = v172;
  sub_10000E0F4();
  v173();
  if (qword_100218B70 != -1) {
    swift_once();
  }
  uint64_t v337 = v120;
  uint64_t v300 = (SEL *)v118;
  sub_10002A10C(v334, (uint64_t)qword_100236A68);
  id v174 = (void (*)(void))MEMORY[0x10];
  id v175 = (SEL *)v323;
  sub_1000E2EFC();
  v174();
  sub_1000E25B8();
  sub_10002ECAC();
  uint64_t v336 = 16;
  id v335 = v174;
  sub_1000E2EFC();
  v174();
  id v176 = v345;
  os_log_type_t v177 = Logger.logObject.getter();
  int v178 = static os_log_type_t.debug.getter();
  BOOL v179 = os_log_type_enabled(v177, (os_log_type_t)v178);
  uint64_t v327 = v87;
  unint64_t v346 = v73;
  if (v179)
  {
    LODWORD(v345) = v178;
    uint64_t v180 = sub_1000E215C();
    uint64_t v299 = sub_100023E3C();
    v350[0] = v299;
    *(_DWORD *)uint64_t v180 = 134349826;
    id v353 = [v176 queryId];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    *(_WORD *)(v180 + 12) = 2080;
    uint64_t v181 = URLRequest.debugDescription.getter();
    id v353 = (id)sub_10001C274(v181, v182, v350);
    sub_1000E2EB4();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v183 = MEMORY[8];
    sub_100023C70();
    ((void (*)(void))v183)();
    *(_WORD *)(v180 + 22) = 2080;
    if (!URLRequest.allHTTPHeaderFields.getter()) {
      Dictionary.init(dictionaryLiteral:)();
    }
    uint64_t v87 = Dictionary.description.getter();
    uint64_t v86 = v184;
    swift_bridgeObjectRelease();
    uint64_t v185 = sub_10001C274(v87, v86, v350);
    sub_1000E2908(v185);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1000E25B8();
    uint64_t v330 = v183;
    sub_100023C70();
    ((void (*)(void))v183)();
    sub_1000E30E8();
    sub_1000E293C();
    sub_1000E2DB0();
    _os_log_impl((void *)&_mh_execute_header, v177, v186, "performing query %{public}llu request %s header: %s requestId: %{public}llu", (uint8_t *)v180, 0x2Au);
    sub_1000E24A4();
    sub_100017D40();
    sub_100017D40();

    unint64_t v73 = v346;
  }
  else
  {

    uint64_t v183 = 8;
    id v192 = (void (*)(void))MEMORY[8];
    sub_1000292E0();
    v192();
    sub_1000E25B8();
    uint64_t v330 = (uint64_t)v192;
    sub_1000292E0();
    v192();
  }
  sub_1000E2660();
  id v193 = sub_1000C18D4();
  sub_1000CCD90((uint64_t)v348, v73, v193);
  [v193 setTriggerEvent:11];
  [v193 setEndpoint:6];
  uint64_t v194 = (uint64_t)[v176 lookupSelectionType];
  if (v194 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
LABEL_65:
    __break(1u);
    swift_once();
    sub_10002A10C(v334, (uint64_t)qword_100236A68);
    sub_1000E246C();
    unint64_t v187 = Logger.logObject.getter();
    os_log_type_t v188 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v187, v188))
    {
      uint64_t v300 = v175;
      sub_100017D90();
      char v189 = (void *)sub_1000E2A84();
      uint64_t v190 = v87;
      uint64_t v191 = sub_1000E22B0(5.7779e-34);
      v350[0] = v191;
      id v175 = v300;
      uint64_t v86 = (uint64_t)v344;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *char v189 = v191;
      uint64_t v87 = v190;
      swift_errorRelease();
      sub_1000E2DD0((void *)&_mh_execute_header, v187, v188, "lookupRequest failed: %@");
      sub_10002572C(&qword_100219710);
      sub_1000E2E6C();
      sub_100017D40();
      sub_100017D40();
    }
    else
    {
      swift_errorRelease();
    }

    sub_10002EFDC(v225, "queryId");
    sub_1000E2AD8();
    sub_100030D6C(v183);
    sub_1000E3024();
    if (v193) {
      uint64_t v226 = (void *)_convertErrorToNSError(_:)();
    }
    else {
      uint64_t v226 = 0;
    }
    unint64_t v169 = (void (**)(void, void, void, void))v347;
    uint64_t v294 = sub_100026610();
    v295(v294);

    swift_errorRelease();
    sub_1000293CC(qword_10021B6C8);
    swift_release();
    swift_unknownObjectRelease();

    swift_errorRelease();
    sub_100027C24(v86, (void (*)(void))type metadata accessor for PegasusContext);
    sub_100027C24(v87, (void (*)(void))type metadata accessor for SessionTokens);
    (*(void (**)(char *, id))(v341 + 8))(v349, v340);
LABEL_63:
    sub_1000E2B78();
    _Block_release(v169);
    uint64_t v144 = v169;
    goto LABEL_32;
  }
  if (v194 > 0x7FFFFFFF) {
    goto LABEL_65;
  }
  [v193 setLookupSelectionType:v194];
  swift_unknownObjectRetain();
  id v195 = v193;
  sub_1000E2C14();
  id v197 = [v176 v196];
  id v198 = [objc_allocWithZone((Class)_CPFeedbackPayload) initWithCodable:v195];
  [v198 setQueryId:v197];

  sub_100029304();
  sub_1000148D0();
  swift_unknownObjectRelease();

  swift_unknownObjectRetain();
  [v176 v175[133]];
  sub_1000E8098();
  swift_unknownObjectRelease();
  id v199 = v176;
  unint64_t v200 = v346;
  swift_bridgeObjectRetain_n();
  id v201 = v199;
  uint64_t v202 = (void *)Logger.logObject.getter();
  os_log_type_t v203 = static os_log_type_t.debug.getter();
  BOOL v204 = sub_1000E2838(v203);
  id v328 = v195;
  if (v204)
  {
    uint64_t v205 = sub_10001D784();
    v350[0] = sub_10001AB54();
    *(_DWORD *)uint64_t v205 = 134218242;
    id v206 = [v201 v175[133]];

    id v353 = v206;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    *(_WORD *)(v205 + 12) = 2080;
    swift_bridgeObjectRetain();
    id v353 = (id)sub_10001C274((uint64_t)v348, v200, v350);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    sub_1000E2F14((void *)&_mh_execute_header, v207, v208, "Dispatching network request for (id, query): (%llu, %s)");
    sub_1000E28EC();
    sub_100017D40();
    sub_100017D40();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v299 = sub_1000C38FC();
  UUID.init()();
  uint64_t v209 = (void *)sub_10007FBE8();
  uint64_t v210 = sub_1000E2660();
  id v211 = sub_1000B7A00(v210, 2);
  id v345 = v212;

  uint64_t v213 = v343;
  uint64_t v214 = swift_weakLoadStrong();
  id v298 = v211;
  if (v214)
  {
    uint64_t v215 = v214;
    LODWORD(v323) = *(unsigned __int8 *)(v213 + 80);
    uint64_t v216 = v305;
    sub_10002A020();
    v217();
    uint64_t v218 = *(void *)(v213 + qword_100236B10);
    char v219 = *(unsigned char *)(v213 + qword_100236B10 + 8);
    type metadata accessor for ResourceAccessNetworkSpan();
    uint64_t v220 = sub_1000281FC();
    id v221 = v211;
    id v222 = v201;
    uint64_t v223 = v299;
    swift_unknownObjectRetain_n();
    id v224 = v221;
    swift_retain();
    *(void *)(v213 + qword_100236B08) = sub_1000B0F00(v215, v323, v216, v218, v219, v224, v223, 12662, 0xE200000000000000, v220);

    id v201 = v222;
    swift_unknownObjectRelease();
    swift_release();
  }
  else
  {
    id v227 = v211;
    swift_retain();
  }
  v350[0] = (uint64_t)v345;
  id v228 = objc_msgSend(v201, "queryId", v201);
  uint64_t v229 = sub_100023CFC();
  sub_1000E2E08();
  *(void *)(v230 + 16) = v228;
  *(void *)(v230 + 24) = v231;
  uint64_t v232 = sub_100023CFC();
  *(void *)(v232 + 16) = sub_1000E2034;
  *(void *)(v232 + 24) = v229;
  sub_10002572C(&qword_10021DC90);
  sub_10002572C(&qword_10021DC98);
  sub_100092CA8(&qword_10021DCA0, &qword_10021DC90);
  sub_100028864();
  Publisher.map<A>(_:)();
  swift_release();
  swift_release();
  uint64_t v233 = sub_100023CFC();
  uint64_t v234 = v301;
  *(void *)(v233 + 16) = sub_1000E0774;
  *(void *)(v233 + 24) = v234;
  swift_retain();
  sub_10002572C(&qword_10021DCA8);
  Publishers.Map.tryMap<A>(_:)();
  swift_release();
  sub_10000E040();
  v235();
  uint64_t v236 = sub_100023CFC();
  *(void *)(v236 + 16) = sub_1000E07AC;
  *(void *)(v236 + 24) = v234;
  swift_retain();
  sub_10002572C(&qword_10021DCB0);
  sub_1000E2ED8();
  Publishers.TryMap.tryMap<A>(_:)();
  swift_release();
  sub_10000E040();
  v237();
  uint64_t v238 = sub_100023CFC();
  *(void *)(v238 + 16) = sub_1000E07E4;
  *(void *)(v238 + 24) = v234;
  swift_retain();
  uint64_t v323 = sub_10002572C(&qword_10021DCB8);
  Publishers.TryMap.tryMap<A>(_:)();
  swift_release();
  sub_1000930D0();
  sub_100016614();
  v239();
  sub_1000E2588((uint64_t)&v327);
  sub_1000E2268();
  sub_1000E24BC();
  v234();
  uint64_t v240 = (void *)sub_1000E25B8();
  uint64_t v311 = sub_10000896C(v240, v241);
  if (v242)
  {
    uint64_t v243 = v242;
    sub_1000E2F08((uint64_t)v352);
    sub_1000E2E34();
    sub_1000E24BC();
    v234();
    uint64_t v244 = v326;
    uint64_t v245 = *(unsigned __int8 *)(v326 + 80);
    uint64_t v310 = v245 | 7;
    sub_1000E2FD8();
    unint64_t v247 = (v246 + ((v245 + 32) & ~v245) + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v248 = swift_allocObject();
    unint64_t v249 = v346;
    *(void *)(v248 + 16) = v348;
    *(void *)(v248 + 24) = v249;
    sub_100021CF0();
    v250();
    uint64_t v251 = (uint64_t *)(v248 + v247);
    uint64_t *v251 = v311;
    v251[1] = v243;
    *(void *)(v248 + ((v247 + 23) & 0xFFFFFFFFFFFFFFF8)) = v301;
    unint64_t v346 = v244 + 8;
    swift_retain();
    sub_1000E2EE4();
    sub_100019BC8();
    v252();
    uint64_t v253 = sub_100023CFC();
    *(void *)(v253 + 16) = sub_1000E0820;
    *(void *)(v253 + 24) = v248;
    sub_1000E2970();
    uint64_t v254 = v313;
    Publishers.TryMap.tryMap<A>(_:)();
    swift_release();
    uint64_t v326 = *(void *)(v312 + 8);
    sub_100018488();
    v255();
    id v256 = v328;
    id v328 = v256;
    id v257 = v298;
    id v348 = v257;
    id v258 = v297;
    id v259 = [v297 queryId];
    uint64_t v260 = (void *)sub_10002F090();
    v260[2] = v301;
    v260[3] = v256;
    v260[4] = v257;
    v260[5] = v259;
    uint64_t v261 = sub_100023CFC();
    *(void *)(v261 + 16) = sub_1000E1F44;
    *(void *)(v261 + 24) = v260;
    swift_retain();
    Publishers.TryMap.tryMap<A>(_:)();
    swift_release();
    uint64_t v262 = (void (*)(void))v326;
    ((void (*)(uint64_t, uint64_t))v326)(v244, v254);
    sub_100016608();
    v263();
    sub_1000E2FD8();
    uint64_t v264 = swift_allocObject();
    *(void *)(v264 + 16) = v258;
    sub_100021CF0();
    v265();
    uint64_t v266 = sub_100023CFC();
    *(void *)(v266 + 16) = sub_1000E0874;
    *(void *)(v266 + 24) = v264;
    id v267 = v258;
    sub_10002572C(&qword_10021DD20);
    Publishers.TryMap.tryMap<A>(_:)();
    swift_release();
    sub_100018488();
    v262();
    uint64_t v336 = (uint64_t)[v267 queryId];
    sub_100016608();
    v268();
    sub_1000E27C4();
    unint64_t v269 = ((unint64_t)v267 + v318 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v270 = (v269 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v271 = (v270 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v272 = (v271 + 15) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v273 = swift_allocObject();
    sub_1000E2994();
    v274();
    *(void *)(v273 + v269) = v336;
    sub_1000E2E08();
    *(void *)(v273 + v270) = v275;
    *(void *)(v273 + v271) = v301;
    id v276 = v328;
    *(void *)(v273 + v272) = v328;
    *(void *)(v273 + ((v272 + 15) & 0xFFFFFFFFFFFFFFF8)) = v348;
    uint64_t v277 = sub_100023CFC();
    *(void *)(v277 + 16) = sub_1000E0898;
    *(void *)(v277 + 24) = v273;
    swift_retain();
    id v339 = v276;
    sub_10002572C(&qword_10021DD28);
    uint64_t v278 = sub_100092CA8(&qword_10021DD30, &qword_10021DC50);
    sub_100092CA8(&qword_10021DD38, &qword_10021DD28);
    sub_1000E2F98();
    uint64_t v279 = v324;
    Publisher.catch<A>(_:)();
    swift_release();
    sub_10002EEB0();
    sub_10000E040();
    v280();
    uint64_t v281 = sub_100023CFC();
    sub_1000E2448(v281);
    *(void *)(v279 + 24) = &off_1001FDB50;
    sub_1000E2F8C();
    swift_unknownObjectWeakInit();
    uint64_t v282 = v325;
    uint64_t v283 = v315;
    sub_1000E0380(v325, v315);
    unint64_t v284 = (*(unsigned __int8 *)(v314 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v314 + 80);
    sub_10001D7A8();
    uint64_t v285 = swift_allocObject();
    *(void *)(v285 + 16) = v279;
    sub_1000E03DC(v283, v285 + v284);
    *(void *)(v285 + v278) = v343;
    id v286 = (void (**)())(v285 + v270);
    uint64_t v287 = v342;
    *id v286 = sub_1000E209C;
    v286[1] = (void (*)())v287;
    sub_100092CA8((unint64_t *)&unk_10021DD40, &qword_10021DC58);
    sub_1000E303C();
    swift_retain();
    sub_1000E2A34();
    swift_release();
    sub_10000E040();
    v288();
    sub_1000930D0();
    sub_1000998E8();
    swift_release();
    sub_10008A384();
    sub_1000C1BD4();
    swift_release();
    sub_1000E2E08();

    swift_unknownObjectRelease();
    swift_release();
    swift_unknownObjectRelease();

    sub_100027C24(v282, (void (*)(void))type metadata accessor for CancellableStoreKey);
    sub_1000E2660();
    sub_1000E2EE4();
    sub_10000E040();
    uint64_t v291 = v290();
    sub_1000E2D68(v291, (void (*)(void))type metadata accessor for PegasusContext);
    sub_100027C24(v327, (void (*)(void))type metadata accessor for SessionTokens);
    sub_10000E040();
    v292();
    swift_release();
    uint64_t v293 = v347;
    _Block_release(v347);
    uint64_t v144 = v293;
    goto LABEL_32;
  }
  uint64_t v296 = v347;
  _Block_release(v347);
  _Block_release(v296);
  swift_release();
  __break(1u);
}

void sub_1000D80F8()
{
  sub_10000DFE0();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v272 = v6;
  uint64_t v8 = v7;
  uint64_t v9 = type metadata accessor for Logger();
  sub_100020C48();
  uint64_t v268 = v10;
  __chkstk_darwin(v11);
  uint64_t v264 = v12;
  sub_10001AB78();
  sub_10001D79C(v13);
  uint64_t v256 = sub_10002572C(&qword_10021DC30);
  sub_100020C48();
  uint64_t v255 = v14;
  __chkstk_darwin(v15);
  sub_10000E04C();
  sub_10001D79C(v16);
  uint64_t v259 = sub_10002572C(&qword_10021DC38);
  sub_100020C48();
  uint64_t v258 = v17;
  __chkstk_darwin(v18);
  sub_10001D79C((uint64_t)&v245 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v262 = sub_10002572C(&qword_10021DC48);
  sub_100020C48();
  uint64_t v261 = v20;
  __chkstk_darwin(v21);
  sub_100017D2C();
  sub_100024A74();
  __chkstk_darwin(v22);
  sub_100024FFC();
  sub_10001D79C(v23);
  uint64_t v267 = sub_10002572C(&qword_10021DC50);
  sub_100020C48();
  uint64_t v266 = v24;
  __chkstk_darwin(v25);
  sub_10000E04C();
  sub_10001D79C(v26);
  uint64_t v271 = sub_10002572C(&qword_10021DC58);
  sub_100020C48();
  uint64_t v270 = v27;
  __chkstk_darwin(v28);
  unint64_t v269 = (char *)&v245 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = sub_1000E23FC();
  uint64_t v31 = sub_100024920(v30);
  uint64_t v263 = v32;
  __chkstk_darwin(v31);
  sub_10002CDD4();
  sub_10001D79C(v33);
  sub_1000E2150((uint64_t)&v294);
  __chkstk_darwin(v34);
  sub_100024FFC();
  uint64_t v275 = v35;
  uint64_t v279 = sub_1000E29EC();
  sub_100020C48();
  uint64_t v278 = v36;
  __chkstk_darwin(v37);
  sub_10002CDD4();
  sub_1000288DC(v38);
  __chkstk_darwin(v39);
  sub_1000288DC((uint64_t)&v245 - v40);
  __chkstk_darwin(v41);
  sub_100024FFC();
  sub_1000288DC(v42);
  __chkstk_darwin(v43);
  sub_10001D79C((uint64_t)&v245 - v44);
  sub_1000E2150((uint64_t)&v281);
  __chkstk_darwin(v45);
  uint64_t v281 = (uint64_t)&v245 - v46;
  uint64_t v47 = sub_1000E2280();
  uint64_t v48 = sub_100016544(v47);
  __chkstk_darwin(v48);
  uint64_t v294 = (uint64_t)&v245 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = sub_1000E25E8();
  uint64_t v51 = sub_100016544(v50);
  __chkstk_darwin(v51);
  sub_100017CD4();
  uint64_t v52 = sub_10002572C(&qword_10021BF30);
  uint64_t v53 = sub_100016544(v52);
  __chkstk_darwin(v53);
  sub_100017D2C();
  sub_100024A74();
  __chkstk_darwin(v54);
  uint64_t v285 = (char *)&v245 - v55;
  uint64_t v296 = type metadata accessor for UserAgent();
  sub_100020C48();
  uint64_t v57 = v56;
  __chkstk_darwin(v58);
  sub_100017D2C();
  sub_100024A74();
  __chkstk_darwin(v59);
  sub_100024FFC();
  uint64_t v61 = v60;
  uint64_t v253 = sub_1000E25D0();
  sub_100020C48();
  uint64_t v252 = v62;
  __chkstk_darwin(v63);
  sub_100016550();
  uint64_t v64 = sub_100023CE4();
  id v290 = v3;
  uint64_t v291 = v64;
  *(void *)(v64 + 16) = v3;
  _Block_copy(v3);
  id v65 = [v8 flightQuery];
  id v295 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v67 = v66;

  sub_1000E2920();
  id v289 = (id)v299[0];
  uint64_t v68 = *(void **)(v5 + 56);
  swift_retain();
  sub_10001DAF4((uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__client, (void (*)(uint64_t))sub_10002A150);
  [v8 queryId];
  sub_1000E2454();
  sub_1000281FC();
  uint64_t v254 = v0;
  uint64_t v292 = sub_100029254(v68, 5, v0);
  if (qword_100218AF8 != -1) {
    swift_once();
  }
  uint64_t v280 = v9;
  sub_1000E2174(v9, (uint64_t)qword_100236900);
  sub_1000E2594();
  swift_retain_n();
  id v69 = v8;
  swift_bridgeObjectRetain_n();
  id v70 = v69;
  uint64_t v288 = v5;
  id v71 = Logger.logObject.getter();
  os_log_type_t v72 = static os_log_type_t.default.getter();
  BOOL v73 = os_log_type_enabled(v71, v72);
  uint64_t v293 = v57;
  if (v73)
  {
    uint64_t v74 = sub_1000E215C();
    uint64_t v283 = v1;
    uint64_t v282 = v61;
    uint64_t v75 = v70;
    uint64_t v76 = v74;
    uint64_t v61 = sub_100023E3C();
    v299[0] = v61;
    *(_DWORD *)uint64_t v76 = 136446979;
    uint64_t v77 = v5;
    type metadata accessor for SessionType();
    sub_10003233C(&qword_10021DB60, (void (*)(uint64_t))&type metadata accessor for SessionType);
    uint64_t v78 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v80 = sub_10001C274(v78, v79, v299);
    sub_1000E2794(v80);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v76 + 12) = 2048;
    id v81 = [v75 queryId];

    id v297 = v81;
    uint64_t v5 = v77;
    sub_1000E297C();

    *(_WORD *)(v76 + 22) = 2050;
    id v297 = v289;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v76 + 32) = 2085;
    swift_bridgeObjectRetain();
    id v297 = (id)sub_10001C274((uint64_t)v295, v67, v299);
    sub_1000E297C();
    sub_10002EEC0();
    _os_log_impl((void *)&_mh_execute_header, v71, v72, "Session %{public}s performing flight query[%llu] requestId: %{public}llu '%{sensitive}s'", (uint8_t *)v76, 0x2Au);
    swift_arrayDestroy();
    sub_100017D40();
    id v70 = v75;
    sub_1000E2E28();
    uint64_t v1 = v283;
    uint64_t v82 = v294;
    sub_100017D40();
  }
  else
  {

    sub_1000E29D4();
    sub_1000E2594();
    swift_release_n();

    uint64_t v82 = v294;
  }
  sub_10000F62C();
  uint64_t v83 = v296;
  if ((v84 & 1) == 0)
  {
    id v289 = v70;
    uint64_t v284 = v5;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_1000E30C8();
    sub_10002572C(&qword_100219280);
    uint64_t inited = (__n128 *)swift_initStackObject();
    char v93 = sub_100025460(inited, (__n128)xmmword_1001A2A20);
    uint64_t v94 = sub_1000E218C((uint64_t)v93, (uint64_t)&type metadata for String);
    sub_100018548(v94, v95);
    Dictionary.init(dictionaryLiteral:)();
    id v96 = objc_allocWithZone((Class)NSError);
    id v97 = sub_10002EAAC();
    swift_bridgeObjectRetain_n();
    unint64_t v98 = sub_1000E26D0();
    os_log_type_t v99 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v98, v99))
    {
      uint64_t v100 = v67;
      uint64_t v101 = (uint8_t *)sub_100017D90();
      v299[0] = sub_10001AB54();
      *(_DWORD *)uint64_t v101 = 136642819;
      swift_bridgeObjectRetain();
      uint64_t v102 = (uint64_t)v295;
      uint64_t v103 = sub_1000E27B8();
      id v297 = (id)sub_10001C274(v103, v104, v105);
      uint64_t v83 = v296;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v98, v99, "Bag fetch failed, can't complete query: %{sensitive}s", v101, 0xCu);
      swift_arrayDestroy();
      sub_100017D40();
      uint64_t v67 = v100;
      sub_100017D40();

      uint64_t v106 = v293;
      os_log_type_t v107 = &selRef_isEqualToString_;
    }
    else
    {

      sub_1000E29D4();
      uint64_t v106 = v293;
      os_log_type_t v107 = &selRef_isEqualToString_;
      uint64_t v102 = (uint64_t)v295;
    }
    id v116 = v286;
    id v117 = objc_allocWithZone((Class)_CPSkipSearchFeedback);
    id v118 = sub_1000CC200(3, v102, v67);
    swift_unknownObjectRetain();
    id v119 = [v289 v107[133]];
    id v120 = [objc_allocWithZone((Class)_CPFeedbackPayload) initWithCodable:v118];
    [v120 setQueryId:v119];
    uint64_t v121 = v287;
    sub_10001DAF4((uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__userAgent, (void (*)(uint64_t))sub_10002A280);
    sub_1000184F4(v121, 1, v83);
    if (v89)
    {
      parsecdUserAgent.getter();
      sub_100019994(v121, &qword_10021BF30);
    }
    else
    {
      (*(void (**)(void *, uint64_t, uint64_t))(v106 + 32))(v116, v121, v83);
    }
    sub_1000E27B8();
    sub_1000148D0();
    swift_unknownObjectRelease();

    sub_1000292E0();
    v122();
    [v289 v107[133]];
    id v123 = v97;
    id v124 = sub_100030D6C((uint64_t)v97);

    if (v124) {
      id v125 = (void *)_convertErrorToNSError(_:)();
    }
    else {
      id v125 = 0;
    }
    os_log_type_t v126 = v290;
    uint64_t v127 = sub_1000E20F0();
    v128(v127);

    swift_errorRelease();
    sub_1000E2384(qword_10021B6C8);
    swift_release();
    swift_release();

    id v129 = v126;
    goto LABEL_28;
  }
  sub_1000288EC();
  sub_10001DAF4(v85, v86);
  uint64_t v87 = sub_100029494();
  sub_1000184F4(v87, v88, v83);
  if (v89)
  {
    swift_bridgeObjectRelease();
    sub_100019994((uint64_t)v71, &qword_10021BF30);
    [v70 queryId];
    char v90 = v290;
    sub_1000260E0();
    v91();
    sub_1000E2384(qword_10021B6C8);
    swift_release();
LABEL_27:
    swift_release();
    id v129 = v90;
    goto LABEL_28;
  }
  sub_10002ECAC();
  sub_10000E0F4();
  v108();
  uint64_t v109 = sub_100012824((uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__bag, (uint64_t (*)(uint64_t))sub_100012864);
  if (!v109)
  {
    swift_bridgeObjectRelease();
    [v70 queryId];
    char v90 = v290;
    sub_1000260E0();
    v130();
    sub_1000E2384(qword_10021B6C8);
    swift_release();
LABEL_26:
    sub_100016614();
    v132();
    goto LABEL_27;
  }
  BOOL v110 = (void *)v109;
  uint64_t v283 = v1;
  uint64_t v287 = v67;
  uint64_t v284 = v5;
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (!Strong)
  {
    swift_bridgeObjectRelease();
    [v70 queryId];
    char v90 = v290;
    sub_1000260E0();
    v131();
    sub_1000E2384(qword_10021B6C8);
    swift_release();

    goto LABEL_26;
  }
  uint64_t v112 = (char *)Strong;
  unsigned __int8 v113 = [v110 isEnabled];
  id v286 = v110;
  if (v113)
  {
    sub_10002E7C0();
    sub_1000E2970();
    sub_1000E8784();
    swift_unknownObjectRelease();
    sub_100023FDC(v82);
    type metadata accessor for PARNetworkRequestFactory();
    uint64_t v114 = sub_1000E273C();
    uint64_t v115 = swift_retain();
    sub_10001E5C0(v115, v114);
    sub_1000288EC();
    sub_100028864();
    sub_10008D968();
    uint64_t v282 = v61;
    uint64_t v285 = v112;
    swift_release();
    sub_1000E2960();
    sub_1000E2570();
    uint64_t v251 = v146;
    uint64_t v250 = v147;
    sub_10000E0F4();
    v148();
    uint64_t v149 = sub_1000C38FC();
    if (qword_100218B70 != -1) {
      swift_once();
    }
    sub_10002A10C(v280, (uint64_t)qword_100236A68);
    id v150 = (void (*)(void))MEMORY[0x10];
    sub_1000E2EFC();
    v150();
    sub_1000E2660();
    sub_10002ECAC();
    uint64_t v249 = 16;
    uint64_t v248 = v150;
    sub_1000E2EFC();
    v150();
    id v151 = v70;
    uint64_t v152 = Logger.logObject.getter();
    int v153 = static os_log_type_t.debug.getter();
    BOOL v154 = os_log_type_enabled(v152, (os_log_type_t)v153);
    uint64_t v277 = v149;
    if (v154)
    {
      os_log_t v245 = v152;
      int v247 = v153;
      uint64_t v155 = sub_1000E215C();
      uint64_t v246 = sub_100023E3C();
      v299[0] = v246;
      *(_DWORD *)uint64_t v155 = 134349826;
      id v297 = [v151 queryId];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      *(_WORD *)(v155 + 12) = 2080;
      uint64_t v156 = URLRequest.description.getter();
      id v297 = (id)sub_1000E2D80(v156, v157);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v158 = (void (*)(void))MEMORY[8];
      sub_1000E2EF0();
      sub_1000292E0();
      v158();
      *(_WORD *)(v155 + 22) = 2080;
      sub_10002EC8C();
      if (!URLRequest.allHTTPHeaderFields.getter()) {
        Dictionary.init(dictionaryLiteral:)();
      }
      uint64_t v159 = Dictionary.description.getter();
      unint64_t v161 = v160;
      swift_bridgeObjectRelease();
      uint64_t v162 = sub_10001C274(v159, v161, v299);
      sub_1000E2794(v162);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1000E2660();
      sub_1000292E0();
      v158();
      *(_WORD *)(v155 + 32) = 2050;
      id v163 = v289;
      id v297 = v289;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_1000E2DB0();
      os_log_t v164 = v245;
      _os_log_impl((void *)&_mh_execute_header, v245, v165, "performing query %{public}llu request %s header: %s requestId: %{public}llu", (uint8_t *)v155, 0x2Au);
      sub_1000E24A4();
      sub_100017D40();
      sub_100017D40();
    }
    else
    {

      uint64_t v166 = (void (*)(void))MEMORY[8];
      sub_10001AB6C();
      v166();
      sub_1000E2660();
      sub_10001AB6C();
      v166();

      id v163 = v289;
    }
    id v167 = sub_1000C18D4();
    unint64_t v168 = v287;
    sub_1000CCD90((uint64_t)v295, v287, v167);
    [v167 setTriggerEvent:20];
    [v167 setEndpoint:13];
    swift_unknownObjectRetain();
    id v169 = v167;
    id v170 = [v151 queryId];
    id v171 = [objc_allocWithZone((Class)_CPFeedbackPayload) initWithCodable:v169];
    [v171 setQueryId:v170];

    sub_1000148D0();
    swift_unknownObjectRelease();

    sub_1000E2808();
    [v151 queryId];
    sub_1000E8098();
    swift_unknownObjectRelease();
    id v172 = v151;
    swift_bridgeObjectRetain();
    id v173 = (void *)Logger.logObject.getter();
    os_log_type_t v174 = static os_log_type_t.debug.getter();
    BOOL v175 = sub_1000E2838(v174);
    id v276 = v169;
    if (v175)
    {
      uint64_t v176 = sub_10001D784();
      v299[0] = sub_10001AB54();
      *(_DWORD *)uint64_t v176 = 134218242;
      id v177 = v163;
      id v178 = [v172 queryId];

      id v297 = v178;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      *(_WORD *)(v176 + 12) = 2080;
      swift_bridgeObjectRetain();
      id v297 = (id)sub_10001C274((uint64_t)v295, v168, v299);
      id v163 = v177;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      sub_1000E2F14((void *)&_mh_execute_header, v179, v180, "Dispatching network request for (id, query): (%llu, %s)");
      sub_1000E2E6C();
      sub_100017D40();
      sub_100017D40();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    UUID.init()();
    uint64_t v181 = (void *)sub_10007FBE8();
    id v182 = sub_1000B7A00(v281, 2);
    uint64_t v184 = v183;

    uint64_t v185 = v292;
    uint64_t v186 = swift_weakLoadStrong();
    if (v186)
    {
      uint64_t v187 = v186;
      LODWORD(v295) = *(unsigned __int8 *)(v185 + 80);
      uint64_t v188 = v254;
      sub_10002A020();
      v189();
      id v273 = *(id *)(v185 + qword_100236B10);
      char v190 = *(unsigned char *)(v185 + qword_100236B10 + 8);
      type metadata accessor for ResourceAccessNetworkSpan();
      uint64_t v191 = sub_1000281FC();
      id v192 = v182;
      id v193 = v182;
      id v194 = v172;
      uint64_t v195 = v277;
      swift_unknownObjectRetain_n();
      id v196 = v193;
      swift_retain();
      *(void *)(v185 + qword_100236B08) = sub_1000B0F00(v187, (int)v295, v188, (uint64_t)v273, v190, v196, v195, 12662, 0xE200000000000000, v191);

      id v182 = v192;
      id v163 = v289;
      id v172 = v194;
      swift_unknownObjectRelease();
      swift_release();
    }
    else
    {
      id v197 = v182;
      swift_retain();
    }
    uint64_t v287 = v184;
    v299[0] = v184;
    id v198 = [v172 queryId];
    uint64_t v199 = sub_100023CFC();
    *(void *)(v199 + 16) = v198;
    *(void *)(v199 + 24) = v163;
    uint64_t v200 = sub_100023CFC();
    *(void *)(v200 + 16) = sub_1000E2034;
    *(void *)(v200 + 24) = v199;
    sub_10002572C(&qword_10021DC90);
    sub_10002572C(&qword_10021DC98);
    sub_100092CA8(&qword_10021DCA0, &qword_10021DC90);
    sub_100028864();
    Publisher.map<A>(_:)();
    swift_release();
    swift_release();
    uint64_t v201 = sub_100023CFC();
    uint64_t v202 = v284;
    *(void *)(v201 + 16) = sub_1000E0774;
    *(void *)(v201 + 24) = v202;
    swift_retain();
    sub_10002572C(&qword_10021DCA8);
    uint64_t v203 = v257;
    Publishers.Map.tryMap<A>(_:)();
    swift_release();
    sub_10000E040();
    v204();
    uint64_t v205 = sub_100023CFC();
    *(void *)(v205 + 16) = sub_1000E1388;
    *(void *)(v205 + 24) = v202;
    swift_retain();
    sub_10002572C(&qword_10021DCB8);
    uint64_t v206 = v260;
    Publishers.TryMap.tryMap<A>(_:)();
    swift_release();
    sub_10002EEB0();
    sub_1000283D4();
    sub_10000E040();
    v207();
    id v208 = v276;
    id v276 = v208;
    id v209 = v182;
    id v295 = v209;
    id v210 = [v172 queryId];
    id v211 = (void *)sub_10002F090();
    v211[2] = v202;
    v211[3] = v208;
    v211[4] = v209;
    v211[5] = v210;
    uint64_t v212 = sub_100023CFC();
    *(void *)(v212 + 16) = sub_1000E1F44;
    *(void *)(v212 + 24) = v211;
    swift_retain();
    sub_1000E2970();
    Publishers.TryMap.tryMap<A>(_:)();
    swift_release();
    uint64_t v213 = v261;
    uint64_t v214 = *(void (**)(void))(v261 + 8);
    sub_1000E2F4C();
    sub_100016614();
    v214();
    sub_1000E2F08((uint64_t)&v282);
    uint64_t v215 = v279;
    sub_100016608();
    v216();
    sub_1000E2D98();
    uint64_t v217 = swift_allocObject();
    *(void *)(v217 + 16) = v172;
    sub_10000E0F4();
    v218();
    uint64_t v219 = sub_100023CFC();
    *(void *)(v219 + 16) = sub_1000E0874;
    *(void *)(v219 + 24) = v217;
    id v220 = v172;
    sub_10002572C(&qword_10021DD20);
    sub_1000E21C4();
    Publishers.TryMap.tryMap<A>(_:)();
    swift_release();
    sub_1000E2E40();
    sub_100016614();
    v214();
    id v273 = [v220 queryId];
    sub_1000E2970();
    sub_1000E30D4();
    uint64_t v221 = v280;
    sub_100016608();
    v222();
    unint64_t v223 = (*(unsigned __int8 *)(v203 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v203 + 80);
    sub_10002A0D0();
    unint64_t v225 = v224 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v226 = swift_allocObject();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v203 + 32))(v226 + v223, v203, v221);
    sub_1000E2EE4();
    *(void *)((char *)v214 + v226) = v227;
    *(void *)(v226 + v213 + 8) = v289;
    *(void *)(v226 + v206) = v284;
    id v228 = v276;
    *(void *)(v226 + v215) = v276;
    *(void *)(v226 + v225) = v295;
    uint64_t v229 = sub_100023CFC();
    *(void *)(v229 + 16) = sub_1000E0898;
    *(void *)(v229 + 24) = v226;
    swift_retain();
    id v289 = v228;
    uint64_t v230 = sub_10002572C(&qword_10021DD28);
    uint64_t v231 = sub_100092CA8(&qword_10021DD30, &qword_10021DC50);
    sub_100092CA8(&qword_10021DD38, &qword_10021DD28);
    sub_1000E2BA8();
    uint64_t v232 = v274;
    Publisher.catch<A>(_:)();
    swift_release();
    sub_10000E040();
    v233();
    uint64_t v234 = sub_100023CFC();
    sub_1000E2448(v234);
    *(void *)(v232 + 24) = &off_1001FDB50;
    swift_unknownObjectWeakInit();
    uint64_t v235 = sub_1000E2F08((uint64_t)&v298);
    uint64_t v236 = v265;
    sub_1000E0380(v235, v265);
    unint64_t v237 = (*(unsigned __int8 *)(v263 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v263 + 80);
    sub_10001D7A8();
    uint64_t v238 = swift_allocObject();
    uint64_t v239 = sub_1000E2CB0(v238);
    sub_1000E03DC(v236, v239 + v237);
    uint64_t v240 = (void (*)())v291;
    *(void *)(v229 + v230) = v292;
    uint64_t v241 = (void (**)())(v229 + v231);
    *uint64_t v241 = sub_1000E209C;
    v241[1] = v240;
    sub_100092CA8((unint64_t *)&unk_10021DD40, &qword_10021DC58);
    sub_1000E303C();
    swift_retain();
    sub_1000E2A34();
    swift_release();
    sub_10000E040();
    v242();
    sub_1000E27B8();
    sub_1000998E8();
    swift_release();
    sub_10008A384();
    sub_1000C1BD4();
    swift_release();

    swift_unknownObjectRelease();
    swift_release();
    swift_unknownObjectRelease();
    sub_1000E2BB4();

    sub_100027C24(v206, (void (*)(void))type metadata accessor for CancellableStoreKey);
    sub_1000E26C4();
    sub_10000E040();
    v243();
    sub_100027C24(v294, (void (*)(void))type metadata accessor for PegasusContext);
    sub_100027C24(v283, (void (*)(void))type metadata accessor for SessionTokens);
    sub_10000E040();
    v244();
    swift_release();
    id v129 = v290;
  }
  else
  {
    uint64_t v285 = v112;
    id v133 = (void *)sub_1000E26D0();
    os_log_type_t v134 = static os_log_type_t.default.getter();
    if (sub_1000165B4(v134))
    {
      uint64_t v135 = (_WORD *)sub_100023E24();
      sub_10002B114(v135);
      sub_100018528((void *)&_mh_execute_header, v136, v137, "no search, bag disabled");
      sub_100017D40();
    }

    objc_allocWithZone((Class)_CPSkipSearchFeedback);
    id v138 = sub_1000CC200(2, (uint64_t)v295, v287);
    sub_10002E7C0();
    id v139 = [v70 queryId];
    id v140 = v70;
    id v141 = [objc_allocWithZone((Class)_CPFeedbackPayload) initWithCodable:v138];
    [v141 setQueryId:v139];
    sub_1000148D0();
    swift_unknownObjectRelease();

    [v140 queryId];
    uint64_t v142 = v290;
    uint64_t v143 = sub_1000270F4();
    v144(v143);
    sub_1000E2384(qword_10021B6C8);

    swift_release();
    swift_unknownObjectRelease();
    sub_1000E2BB4();
    sub_100016614();
    v145();
    swift_release();
    id v129 = v142;
  }
LABEL_28:
  _Block_release(v129);
  sub_10000DFB8();
}

void sub_1000DA3A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_10000DFE0();
  a19 = v25;
  a20 = v26;
  uint64_t v28 = v27;
  uint64_t v30 = v29;
  uint64_t v268 = v31;
  sub_1000E2CBC();
  type metadata accessor for Apple_Parsec_Spotlight_V1alpha_TopicContext();
  sub_100020C48();
  id v273 = v32;
  uint64_t v274 = v33;
  __chkstk_darwin(v32);
  sub_10000E04C();
  uint64_t v255 = v34;
  uint64_t v35 = sub_1000E23FC();
  uint64_t v36 = sub_100024920(v35);
  uint64_t v253 = v37;
  __chkstk_darwin(v36);
  sub_10002CDD4();
  sub_1000288DC(v38);
  uint64_t v40 = __chkstk_darwin(v39);
  sub_1000E23D4(v40, v41, v42, v43, v44, v45, v46, v47, v239[0]);
  sub_1000E2150((uint64_t)&a15);
  __chkstk_darwin(v48);
  uint64_t v266 = (uint64_t)v239 - v49;
  sub_100029488();
  uint64_t v264 = type metadata accessor for Apple_Parsec_Spotlight_V1alpha_ZkwSuggestRequest();
  sub_100020C48();
  uint64_t v267 = v50;
  __chkstk_darwin(v51);
  sub_100024A74();
  __chkstk_darwin(v52);
  uint64_t v265 = (char *)v239 - v53;
  uint64_t v54 = sub_1000E2280();
  uint64_t v55 = sub_100016544(v54);
  __chkstk_darwin(v55);
  sub_100027014();
  uint64_t Context = type metadata accessor for Apple_Parsec_Search_PegasusQueryContext();
  sub_100020C48();
  uint64_t v261 = v56;
  __chkstk_darwin(v57);
  sub_100024A74();
  __chkstk_darwin(v58);
  sub_100024FFC();
  sub_10001D79C(v59);
  uint64_t v60 = sub_10002572C(&qword_10021DDC8);
  uint64_t v61 = sub_100016544(v60);
  __chkstk_darwin(v61);
  sub_1000E2134();
  id v258 = (id)type metadata accessor for Apple_Parsec_Spotlight_V1alpha_ZkwSuggestResponse();
  sub_100020C48();
  uint64_t v257 = v62;
  __chkstk_darwin(v63);
  sub_10000E04C();
  sub_10001D79C(v64);
  uint64_t v65 = sub_10002572C(&qword_10021BF30);
  uint64_t v66 = sub_100016544(v65);
  __chkstk_darwin(v66);
  uint64_t v272 = (unint64_t *)sub_10002EF30();
  sub_100020C48();
  uint64_t v270 = v67;
  __chkstk_darwin(v68);
  sub_10002CDD4();
  sub_10001D79C(v69);
  sub_1000E2150((uint64_t)&v279);
  __chkstk_darwin(v70);
  uint64_t v271 = (uint64_t)v239 - v71;
  uint64_t v72 = sub_1000E25D0();
  uint64_t v73 = sub_100016544(v72);
  __chkstk_darwin(v73);
  sub_10001DDC8();
  uint64_t v276 = sub_100023CE4();
  *(void *)(v276 + 16) = v28;
  uint64_t v74 = *(void **)(v30 + 56);
  _Block_copy(v28);
  swift_retain();
  uint64_t v275 = v30;
  sub_10001DAF4((uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__client, (void (*)(uint64_t))sub_10002A150);
  [v22 queryId];
  sub_1000E2454();
  sub_1000281FC();
  uint64_t v277 = sub_100029254(v74, 3, v20);
  id v75 = [objc_allocWithZone((Class)PARReply) init];
  id v76 = [v22 queryTopicContexts];
  uint64_t v263 = sub_100023FA0(0, &qword_10021DDD0);
  unint64_t v77 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v77 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v78 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v78 = *(void *)((v77 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (!v78)
  {
    if (qword_100218B70 != -1) {
      swift_once();
    }
    uint64_t v89 = type metadata accessor for Logger();
    char v90 = (void *)sub_10001DD88(v89, (uint64_t)qword_100236A68);
    os_log_type_t v91 = static os_log_type_t.default.getter();
    if (sub_1000165B4(v91))
    {
      uint64_t v92 = (_WORD *)sub_100023E24();
      sub_10002B114(v92);
      sub_100018528((void *)&_mh_execute_header, v93, v94, "There are no query topics. Returning an empty response");
      sub_100017D40();
    }

    [v22 queryId];
    uint64_t v95 = sub_1000297BC();
    v96(v95);
    uint64_t v97 = qword_10021B6C8;
    goto LABEL_15;
  }
  uint64_t v79 = v275;
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (!Strong)
  {
    [v22 queryId];
    uint64_t v98 = sub_1000297BC();
    v99(v98);
    uint64_t v97 = qword_10021B6C8;
LABEL_15:
    sub_1000E2BF0(v97);
    swift_release();
    swift_release();

LABEL_18:
    uint64_t v102 = v28;
    goto LABEL_19;
  }
  uint64_t v81 = Strong;
  uint64_t v250 = *(void *)(v79 + 24);
  sub_10000F62C();
  if ((v82 & 1) == 0)
  {
    [v22 queryId];
    uint64_t v100 = sub_1000297BC();
    v101(v100);
    uint64_t v88 = qword_10021B6C8;
    goto LABEL_17;
  }
  uint64_t v247 = v24;
  sub_10001DAF4((uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__userAgent, (void (*)(uint64_t))sub_10002A280);
  uint64_t v83 = sub_1000E27AC();
  sub_1000184F4(v83, v84, (uint64_t)v272);
  if (v85)
  {
    sub_100019994(v23, &qword_10021BF30);
    [v22 queryId];
    uint64_t v86 = sub_1000297BC();
    v87(v86);
    uint64_t v88 = qword_10021B6C8;
LABEL_17:
    sub_1000E2BF0(v88);
    swift_release();
    swift_release();

    swift_unknownObjectRelease();
    goto LABEL_18;
  }
  uint64_t v249 = v81;
  id v248 = v75;
  uint64_t v103 = *(void *)(v270 + 32);
  uint64_t v245 = v270 + 32;
  uint64_t v244 = v103;
  sub_10000E0F4();
  v104();
  uint64_t v105 = (void *)sub_100012824((uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__bag, (uint64_t (*)(uint64_t))sub_100012864);
  if (!v105)
  {
    [v22 queryId];
    uint64_t v117 = sub_1000E2A50();
    id v119 = *(void **)(v118 - 256);
    v120(v117);
    sub_1000E2BF0(qword_10021B6C8);

    swift_release();
    swift_unknownObjectRelease();
    sub_100027EC0();
    v121();
LABEL_54:
    swift_release();
    goto LABEL_18;
  }
  id v246 = v105;
  unint64_t v106 = *(void *)(v79 + OBJC_IVAR____TtC7parsecd11ClientState_pegasusProxyLocker);
  os_log_type_t v107 = *(os_unfair_lock_s **)(v106 + 16);
  swift_retain();
  os_unfair_lock_lock(v107);
  if (*(void *)(v79 + OBJC_IVAR____TtC7parsecd11ClientState_zkwProxy))
  {
    swift_retain();
    dispatch thunk of BasePegasusProxy.warmUpConnectionIfNeeded()();
    swift_release();
  }
  os_unfair_lock_unlock(v107);
  swift_release();
  id v108 = [v22 queryTopicContexts];
  unint64_t v109 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  sub_1000C7A4C(v109, v21);
  swift_bridgeObjectRelease();
  uint64_t v110 = sub_1000E2274();
  int v112 = sub_100027BA4(v110, v111, (uint64_t)v258);
  unsigned __int8 v113 = &off_100218000;
  uint64_t v114 = (uint64_t)v248;
  uint64_t v115 = v249;
  if (v112 != 1)
  {
    sub_1000E2898();
    sub_10001AA80();
    sub_10000E0F4();
    v122();
    id v123 = [objc_allocWithZone((Class)PARReply) init];
    sub_10003233C(&qword_10021DDE8, (void (*)(uint64_t))&type metadata accessor for Apple_Parsec_Spotlight_V1alpha_ZkwSuggestResponse);
    uint64_t v124 = Message.serializedData(partial:)();
    sub_1000CCDE8(v124, v131, v123);
    unint64_t v116 = (unint64_t)v123;
    ((void (**)(void, id, id, void))v28)[2](v28, [v22 queryId], v123, 0);
    sub_1000C37E8(v22, 0, 0xE000000000000000, v271, v277);
    uint64_t v22 = v272;
    if (qword_100218B18 != -1) {
LABEL_73:
    }
      swift_once();
    uint64_t v132 = type metadata accessor for Logger();
    id v133 = (void *)sub_10001DD88(v132, (uint64_t)qword_100236960);
    os_log_type_t v134 = static os_log_type_t.default.getter();
    BOOL v135 = sub_1000165B4(v134);
    uint64_t v136 = v270;
    if (v135)
    {
      uint64_t v137 = (_WORD *)sub_100023E24();
      sub_10002B114(v137);
      sub_100018528((void *)&_mh_execute_header, v138, v139, "Returning early, all topics are in the results cache");
      sub_100017D40();
    }

    swift_release();
    swift_unknownObjectRelease();

    sub_10000E040();
    v140();
    (*(void (**)(uint64_t, unint64_t *))(v136 + 8))(v271, v22);
    goto LABEL_54;
  }
  unint64_t v243 = v106;
  sub_100019994(v21, &qword_10021DDC8);
  unint64_t v116 = v275;
  while (1)
  {
    uint64_t v142 = v271;
    if (v113[355] != (uint64_t (*)())-1) {
      swift_once();
    }
    uint64_t v143 = type metadata accessor for Logger();
    sub_1000E2174(v143, (uint64_t)qword_100236960);
    swift_retain_n();
    uint64_t v144 = v22;
    uint64_t v256 = v113;
    uint64_t v145 = Logger.logObject.getter();
    os_log_type_t v146 = static os_log_type_t.default.getter();
    BOOL v147 = os_log_type_enabled(v145, v146);
    id v258 = v144;
    if (v147)
    {
      uint64_t v22 = (unint64_t *)sub_10001D784();
      v278[0] = sub_10001AB54();
      *(_DWORD *)uint64_t v22 = 136446466;
      type metadata accessor for SessionType();
      sub_10003233C(&qword_10021DB60, (void (*)(uint64_t))&type metadata accessor for SessionType);
      uint64_t v148 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v280 = sub_10001C274(v148, v149, v278);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_1000E2C78();
      swift_bridgeObjectRelease();
      *((_WORD *)v22 + 6) = 2050;
      uint64_t v115 = (uint64_t)[v258 queryId];

      uint64_t v280 = v115;
      sub_1000E2F8C();
      uint64_t v144 = (unint64_t *)v258;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      sub_1000E2C4C((void *)&_mh_execute_header, v145, v146, "Session %{public}s performing query %{public}llu");
      swift_arrayDestroy();
      sub_100017D40();
      sub_100017D40();
    }
    else
    {

      sub_1000E2C78();
    }
    id v150 = *(os_unfair_lock_s **)(v243 + 16);
    swift_retain();
    os_unfair_lock_lock(v150);
    sub_1000C7938(v116, v278);
    os_unfair_lock_unlock(v150);
    swift_release();
    uint64_t v257 = v278[0];
    if (!v278[0])
    {
      [v144 queryId];
      uint64_t v160 = sub_1000E2A50();
      uint64_t v162 = *(void **)(v161 - 256);
      v163(v160);
      sub_1000E2BF0(qword_10021B6C8);

      swift_release();
      swift_unknownObjectRelease();

      (*(void (**)(uint64_t, unint64_t *))(v270 + 8))(v142, v272);
      goto LABEL_54;
    }
    id v151 = [v144 queryTopicContexts];
    unint64_t v152 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v152 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v114 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v114 = *(void *)((v152 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    int v153 = v255;
    uint64_t v242 = v28;
    if (v114)
    {
      v278[0] = (uint64_t)_swiftEmptyArrayStorage;
      sub_1000EE524(0, v114 & ~(v114 >> 63), 0);
      if (v114 < 0)
      {
        __break(1u);
        goto LABEL_73;
      }
      uint64_t v115 = 0;
      uint64_t v22 = (unint64_t *)v278[0];
      uint64_t v144 = (unint64_t *)(v152 & 0xC000000000000001);
      uint64_t v28 = (void (**)(void, void, void, void))(v274 + 32);
      do
      {
        if (v144) {
          id v154 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v154 = *(id *)(v152 + 8 * v115 + 32);
        }
        uint64_t v155 = v154;
        sub_100066AA0();

        v278[0] = (uint64_t)v22;
        unint64_t v116 = v22[2];
        unint64_t v156 = v22[3];
        if (v116 >= v156 >> 1)
        {
          sub_1000EE524(v156 > 1, v116 + 1, 1);
          uint64_t v22 = (unint64_t *)v278[0];
        }
        ++v115;
        v22[2] = v116 + 1;
        sub_10002B154();
        (*(void (**)(char *, uint64_t (*)()))(v158 + 32))((char *)v22 + v157 + *(void *)(v158 + 72) * v116, v153);
      }
      while (v114 != v115);
      swift_bridgeObjectRelease();
      uint64_t v159 = (uint64_t)v272;
      sub_1000E2F8C();
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v22 = _swiftEmptyArrayStorage;
      uint64_t v159 = (uint64_t)v272;
    }
    sub_1000E2ED8();
    sub_100023FDC(v164);
    sub_1000288EC();
    sub_1000F5CD0(2, v115, v250, v165);
    sub_100027C24((uint64_t)v144, (void (*)(void))type metadata accessor for PegasusContext);
    Apple_Parsec_Spotlight_V1alpha_ZkwSuggestRequest.init()();
    uint64_t v166 = (void *)v254;
    sub_1000930D0();
    sub_100016608();
    v167();
    Apple_Parsec_Spotlight_V1alpha_ZkwSuggestRequest.queryContext.setter();
    Apple_Parsec_Spotlight_V1alpha_ZkwSuggestRequest.topics.setter();
    UUID.init()();
    UUID.init()();
    [v258 timeoutIntervalForRequest];
    if ((~*(void *)&v168 & 0x7FF0000000000000) == 0)
    {
      __break(1u);
LABEL_70:
      __break(1u);
      goto LABEL_71;
    }
    if (v168 <= -9.22337204e18) {
      goto LABEL_70;
    }
    if (v168 < 9.22337204e18) {
      break;
    }
LABEL_71:
    __break(1u);
    swift_once();
    unint64_t v243 = v116;
    uint64_t v125 = type metadata accessor for Logger();
    sub_10002A10C(v125, (uint64_t)qword_100236960);
    sub_1000E246C();
    swift_errorRetain();
    os_log_type_t v126 = Logger.logObject.getter();
    os_log_type_t v127 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v126, v127))
    {
      uint64_t v128 = (uint8_t *)sub_100017D90();
      uint64_t v240 = sub_10001AB54();
      v278[0] = v240;
      *(_DWORD *)uint64_t v128 = 136315138;
      uint64_t v115 = (uint64_t)(v128 + 12);
      v239[1] = (uint64_t)(v128 + 4);
      uint64_t v280 = v159;
      swift_errorRetain();
      sub_10002572C(&qword_10021B3C0);
      id v241 = v166;
      uint64_t v129 = String.init<A>(describing:)();
      uint64_t v280 = sub_10001C274(v129, v130, v278);
      sub_1000E2F8C();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v126, v127, "ZKW: serialization failure, error: %s. Cannot use cached response, will make a call to the server", v128, 0xCu);
      swift_arrayDestroy();
      sub_100017D40();
      sub_100017D40();
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
    }
    swift_errorRelease();
    sub_10000E040();
    v141();
    unint64_t v116 = v275;
    unsigned __int8 v113 = &off_100218000;
  }
  uint64_t v169 = (uint64_t)v168;
  uint64_t v280 = (uint64_t)v168;
  if (!(uint64_t)v168)
  {
    id v170 = (void *)sub_1000E25B8();
    id v172 = [v170 v171];
    if (v172)
    {
      id v173 = v172;
      uint64_t v169 = (uint64_t)[v172 integerValue];
    }
    else
    {
      uint64_t v169 = 500;
    }
    uint64_t v280 = v169;
  }
  os_log_type_t v174 = Logger.logObject.getter();
  os_log_type_t v175 = static os_log_type_t.info.getter();
  if (sub_100019BAC(v175))
  {
    *(_DWORD *)sub_100017D90() = 134217984;
    v278[0] = v169;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_1000E2B90((void *)&_mh_execute_header, v174, (os_log_type_t)v22, "ZKW: zkwSearchRenderTimeout is %ld");
    sub_100017D40();
  }

  uint64_t v176 = v257;
  swift_retain();
  uint64_t v177 = dispatch thunk of BasePegasusProxy.feedbackEventStream.getter();
  swift_release();
  v278[0] = v177;
  uint64_t v178 = sub_100023CFC();
  *(void *)(v178 + 24) = &off_1001FDB50;
  swift_unknownObjectWeakInit();
  uint64_t v179 = sub_100023CE4();
  sub_1000E2448(v179);
  swift_weakInit();
  uint64_t v255 = type metadata accessor for CancellableStoreKey;
  uint64_t v180 = v260;
  sub_1000E0380(v269, v260);
  sub_100016608();
  v181();
  sub_1000E2D98();
  unint64_t v254 = *(unsigned __int8 *)(v182 + 80);
  uint64_t v183 = (v254 + 32) & ~v254;
  uint64_t v275 = v254 | 7;
  uint64_t v256 = (uint64_t (**)())((char *)v259 + 7);
  unint64_t v184 = ((unint64_t)v259 + v183 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v185 = swift_allocObject();
  id v186 = v258;
  *(void *)(v185 + 16) = v258;
  *(void *)(v185 + 24) = v178;
  sub_1000E03DC(v180, v185 + v183);
  *(void *)(v185 + v184) = v176;
  sub_10000E0F4();
  v187();
  id v188 = v186;
  uint64_t v189 = sub_10002572C(&qword_10021DBE0);
  sub_100092CA8(&qword_10021DBE8, &qword_10021DBE0);
  char v190 = (void *)Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  sub_1000998E8();
  swift_release();
  id v258 = (id)sub_10002572C(&qword_10021DDD8);
  id v273 = v239;
  sub_100020C48();
  uint64_t v263 = v191;
  __chkstk_darwin(v192);
  sub_100017CD4();
  uint64_t v252 = v189;
  sub_100016608();
  v193();
  uint64_t v194 = type metadata accessor for DispatchTimeInterval();
  uint64_t v251 = v239;
  sub_100020C48();
  uint64_t v196 = v195;
  __chkstk_darwin(v197);
  sub_10001DDC8();
  sub_100017F00();
  *char v190 = v280;
  (*(void (**)(void *, void, uint64_t))(v196 + 104))(v190, enum case for DispatchTimeInterval.milliseconds(_:), v194);
  uint64_t v198 = v249;
  uint64_t v199 = *(void **)(v249 + 280);
  uint64_t v200 = (void *)sub_10002F090();
  v200[2] = v277;
  v200[3] = v198;
  v200[4] = v250;
  v200[5] = v188;
  uint64_t v274 = (char *)v188;
  id v201 = v199;
  swift_retain();
  swift_unknownObjectRetain();
  sub_10002ECAC();
  dispatch thunk of PegasusProxyForSpotlightZKW.searchResponsePublisher(forSearchRequest:withTimeout:onQueue:responseAfterTimeoutHandler:)();

  swift_release();
  uint64_t v202 = sub_1000E30A8();
  v203(v202);
  uint64_t v204 = *(void *)(v267 + 8);
  v267 += 8;
  uint64_t v253 = v204;
  sub_10000E040();
  v205();
  uint64_t v206 = sub_100023CFC();
  *(void *)(v206 + 24) = &off_1001FDB50;
  swift_unknownObjectWeakInit();
  uint64_t v207 = v266;
  uint64_t v208 = v260;
  sub_1000E0380(v266, v260);
  uint64_t v209 = (v254 + 64) & ~v254;
  unint64_t v210 = v254;
  id v211 = (void *)swift_allocObject();
  uint64_t v259 = sub_1000E209C;
  v211[2] = v277;
  v211[3] = sub_1000E209C;
  uint64_t v212 = v274;
  v211[4] = v276;
  v211[5] = v212;
  sub_1000E2EE4();
  *(void *)(v213 + 48) = v214;
  *(void *)(v213 + 56) = v206;
  sub_1000E03DC(v208, v213 + v209);
  uint64_t v215 = sub_100023CFC();
  *(void *)(v215 + 24) = &off_1001FDB50;
  swift_unknownObjectWeakInit();
  sub_1000E0380(v207, v208);
  uint64_t v216 = (v210 + 24) & ~v210;
  sub_1000E2E08();
  unint64_t v218 = (v217 + v216) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v219 = (v218 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v220 = (v219 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v221 = (v220 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v222 = swift_allocObject();
  *(void *)(v222 + 16) = v215;
  sub_1000E03DC(v208, v222 + v216);
  *(void *)(v222 + v218) = v277;
  unint64_t v223 = (void (**)())(v222 + v219);
  uint64_t v224 = v276;
  char *v223 = v259;
  v223[1] = (void (*)())v224;
  unint64_t v225 = v274;
  *(void *)(v222 + v220) = v274;
  uint64_t v226 = (uint64_t *)(v222 + v221);
  uint64_t v227 = v250;
  *uint64_t v226 = v249;
  v226[1] = v227;
  id v228 = v248;
  *(void *)(v222 + ((v221 + 23) & 0xFFFFFFFFFFFFFFF8)) = v248;
  sub_100092CA8(&qword_10021DDE0, &qword_10021DDD8);
  id v229 = v225;
  swift_retain_n();
  id v230 = v228;
  swift_retain_n();
  id v231 = v229;
  swift_unknownObjectRetain();
  id v232 = v230;
  sub_1000E2FB8();
  Publisher.sink(receiveCompletion:receiveValue:)();
  swift_release();
  swift_release();
  sub_10000E040();
  v233();
  sub_1000998E8();

  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  swift_release();

  sub_100027C24(v269, (void (*)(void))type metadata accessor for CancellableStoreKey);
  uint64_t v234 = sub_1000930D0();
  sub_100027C24(v234, v235);
  sub_1000E2D98();
  sub_10000E040();
  v236();
  sub_1000E26C4();
  sub_10000E040();
  v237();
  sub_10000E040();
  v238();
  swift_release();
  uint64_t v102 = v242;
LABEL_19:
  _Block_release(v102);
  sub_10000DFB8();
}

void sub_1000DBC4C()
{
  sub_10000DFE0();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v36 = v6;
  uint64_t v7 = sub_10002572C(&qword_10021F2D0);
  uint64_t v8 = sub_100016544(v7);
  __chkstk_darwin(v8);
  uint64_t v9 = sub_1000E210C();
  uint64_t v10 = sub_100016544(v9);
  __chkstk_darwin(v10);
  sub_100017DC8();
  uint64_t v11 = sub_100023CE4();
  *(void *)(v11 + 16) = v3;
  _Block_copy(v3);
  swift_retain();
  sub_10001DAF4((uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__client, (void (*)(uint64_t))sub_10002A150);
  type metadata accessor for ResourceAccessSpan();
  sub_1000281FC();
  uint64_t v12 = (void *)sub_1000E2594();
  uint64_t v14 = sub_100003EAC(v12, v13, v1, 0, 1);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (!Strong)
  {
    [v36 queryId];
    sub_1000260E0();
    v27();
    *(unsigned char *)(v14 + qword_10021B6C8) = 39;
    sub_100011708();
    swift_release();
LABEL_11:
    swift_release();
    goto LABEL_12;
  }
  uint64_t v16 = Strong;
  uint64_t v17 = *(void *)(v5 + OBJC_IVAR____TtC7parsecd11ClientState_safariAssistantProxy);
  if (v17)
  {
    uint64_t v35 = *(void *)(v5 + 24);
    uint64_t v18 = qword_100218AE8;
    swift_retain();
    if (v18 != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    sub_10002A10C(v19, (uint64_t)qword_1002368D0);
    sub_1000E2AA0();
    swift_retain_n();
    uint64_t v20 = Logger.logObject.getter();
    static os_log_type_t.default.getter();
    uint64_t v21 = sub_1000E2C20();
    os_log_type_t v34 = v22;
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v33 = v20;
      uint64_t v23 = (uint8_t *)sub_100017D90();
      uint64_t v32 = sub_10001AB54();
      *(_DWORD *)uint64_t v23 = 136446210;
      uint64_t v37 = v32;
      type metadata accessor for SessionType();
      sub_10003233C(&qword_10021DB60, (void (*)(uint64_t))&type metadata accessor for SessionType);
      uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v26 = sub_10001C274(v24, v25, &v37);
      sub_10001ED4C(v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Session %{public}s performing safari summarization prefetch", v23, 0xCu);
      swift_arrayDestroy();
      sub_100017D40();
      sub_100017D40();
    }
    else
    {

      swift_release_n();
    }
    static TaskPriority.userInitiated.getter();
    uint64_t v29 = type metadata accessor for TaskPriority();
    sub_1000E2DE8(v29);
    uint64_t v30 = (void *)swift_allocObject();
    v30[2] = 0;
    v30[3] = 0;
    v30[4] = v36;
    v30[5] = v17;
    v30[6] = v14;
    v30[7] = sub_1000E209C;
    v30[8] = v11;
    v30[9] = v16;
    v30[10] = v35;
    v30[11] = v5;
    swift_retain();
    swift_retain();
    id v31 = v36;
    swift_retain();
    swift_retain();
    swift_unknownObjectRetain();
    sub_1001013F0(v0);
    swift_release();
    swift_release();
    swift_unknownObjectRelease();
    swift_release();
    sub_100019994(v0, &qword_10021F2D0);
    goto LABEL_11;
  }
  sub_1000260E0();
  v28();
  *(unsigned char *)(v14 + qword_10021B6C8) = 42;
  sub_100011708();
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
LABEL_12:
  _Block_release(v3);
  sub_10000DFB8();
}

void sub_1000DC0AC()
{
  sub_10000DFE0();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v8 = sub_10002572C(&qword_10021F2D0);
  uint64_t v9 = sub_100016544(v8);
  __chkstk_darwin(v9);
  uint64_t v10 = sub_1000E210C();
  uint64_t v11 = sub_100016544(v10);
  __chkstk_darwin(v11);
  sub_100017DC8();
  uint64_t v12 = sub_100023CE4();
  *(void *)(v12 + 16) = v3;
  _Block_copy(v3);
  swift_retain();
  sub_10001DAF4((uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__client, (void (*)(uint64_t))sub_10002A150);
  type metadata accessor for ResourceAccessSpan();
  sub_1000281FC();
  int v13 = (void *)sub_1000E2AA0();
  uint64_t v15 = sub_100003EAC(v13, v14, v1, 0, 1);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (!Strong)
  {
    [v7 queryId];
    sub_1000260E0();
    v28();
    sub_1000E27D4(qword_10021B6C8);
    swift_release();
LABEL_11:
    swift_release();
    goto LABEL_12;
  }
  uint64_t v17 = Strong;
  uint64_t v18 = *(void *)(v5 + OBJC_IVAR____TtC7parsecd11ClientState_safariAssistantProxy);
  if (v18)
  {
    uint64_t v36 = *(void *)(v5 + 24);
    uint64_t v19 = qword_100218AE8;
    swift_retain();
    if (v19 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_1000E2174(v20, (uint64_t)qword_1002368D0);
    swift_retain_n();
    uint64_t v21 = Logger.logObject.getter();
    static os_log_type_t.default.getter();
    os_log_type_t v22 = sub_1000E2C20();
    os_log_type_t v35 = v23;
    if (os_log_type_enabled(v22, v23))
    {
      os_log_type_t v34 = v21;
      uint64_t v24 = (uint8_t *)sub_100017D90();
      uint64_t v33 = sub_10001AB54();
      *(_DWORD *)uint64_t v24 = 136446210;
      uint64_t v37 = v33;
      type metadata accessor for SessionType();
      sub_10003233C(&qword_10021DB60, (void (*)(uint64_t))&type metadata accessor for SessionType);
      uint64_t v25 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v27 = sub_10001C274(v25, v26, &v37);
      sub_10001ED4C(v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_1000E2F34();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Session %{public}s performing safari summarization summarize", v24, 0xCu);
      sub_1000E29BC();
      sub_100017D40();
      sub_100017D40();
    }
    else
    {

      sub_1000E2F34();
    }
    static TaskPriority.high.getter();
    uint64_t v30 = type metadata accessor for TaskPriority();
    sub_1000E2DE8(v30);
    id v31 = (void *)swift_allocObject();
    v31[2] = 0;
    void v31[3] = 0;
    v31[4] = v18;
    v31[5] = v7;
    v31[6] = v15;
    v31[7] = sub_1000E209C;
    v31[8] = v12;
    v31[9] = v17;
    v31[10] = v36;
    swift_retain();
    id v32 = v7;
    swift_retain();
    swift_retain();
    swift_unknownObjectRetain();
    sub_1001013F0(v0);
    swift_release();
    swift_release();
    swift_unknownObjectRelease();
    swift_release();
    sub_100019994(v0, &qword_10021F2D0);
    goto LABEL_11;
  }
  sub_1000260E0();
  v29();
  sub_1000E27D4(qword_10021B6C8);
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
LABEL_12:
  _Block_release(v3);
  sub_10000DFB8();
}

void sub_1000DC4EC(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void (**a9)(void, void, void, void))
{
  uint64_t v66 = a3;
  uint64_t v67 = a5;
  uint64_t v68 = a2;
  uint64_t v69 = a4;
  uint64_t v13 = sub_10002572C(&qword_10021F2D0);
  __chkstk_darwin(v13 - 8);
  uint64_t v70 = (char *)&v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for UserAgent();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v64 = v15;
  uint64_t v65 = v16;
  uint64_t v17 = *(void *)(v16 + 64);
  __chkstk_darwin(v15);
  uint64_t v18 = type metadata accessor for CancellableStoreKey();
  uint64_t v62 = *(void **)(v18 - 8);
  uint64_t v19 = v62[8];
  uint64_t v20 = __chkstk_darwin(v18 - 8);
  uint64_t v63 = (uint64_t)&v54 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  os_log_type_t v22 = (char *)&v54 - v21;
  uint64_t v71 = swift_allocObject();
  *(void *)(v71 + 16) = a9;
  uint64_t v23 = *(void *)(a8 + OBJC_IVAR____TtC7parsecd11ClientState_lookupSearchProxy);
  if (v23)
  {
    _Block_copy(a9);
    swift_retain();
    id v24 = [a1 queryString];
    uint64_t v61 = a7;
    id v25 = v24;
    uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v54 = (char *)&v54 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v55 = a6;
    uint64_t v59 = v26;
    uint64_t v60 = v23;
    uint64_t v27 = v26;
    uint64_t v57 = v28;

    uint64_t v58 = v22;
    UUID.init()();
    swift_retain();
    uint64_t v29 = dispatch thunk of BasePegasusProxy.feedbackEventStream.getter();
    swift_release();
    uint64_t v72 = v29;
    uint64_t v56 = swift_allocObject();
    swift_weakInit();
    uint64_t v30 = v63;
    sub_1000E0380((uint64_t)v22, v63);
    uint64_t v31 = v64;
    uint64_t v32 = v65;
    (*(void (**)(char *, uint64_t, uint64_t))(v65 + 16))((char *)&v54 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), v55, v64);
    unint64_t v33 = (*((unsigned __int8 *)v62 + 80) + 56) & ~(unint64_t)*((unsigned __int8 *)v62 + 80);
    unint64_t v34 = (v19 + v33 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v35 = *(unsigned __int8 *)(v32 + 80);
    uint64_t v62 = a9;
    uint64_t v36 = (v35 + v34 + 8) & ~v35;
    uint64_t v37 = (char *)swift_allocObject();
    *((void *)v37 + 2) = a1;
    *((void *)v37 + 3) = v27;
    uint64_t v38 = v32;
    uint64_t v39 = v57;
    uint64_t v40 = a1;
    uint64_t v41 = v66;
    *((void *)v37 + 4) = v57;
    *((void *)v37 + 5) = v41;
    *((void *)v37 + 6) = &off_1001FDB50;
    sub_1000E03DC(v30, (uint64_t)&v37[v33]);
    *(void *)&v37[v34] = v56;
    (*(void (**)(char *, char *, uint64_t))(v38 + 32))(&v37[v36], v54, v31);
    id v42 = v40;
    swift_bridgeObjectRetain();
    v41;
    sub_10002572C(&qword_10021DBE0);
    sub_100092CA8(&qword_10021DBE8, &qword_10021DBE0);
    Publisher<>.sink(receiveValue:)();
    swift_release();
    swift_release();
    uint64_t v43 = (uint64_t)v58;
    sub_1000998E8();
    swift_release();
    uint64_t v44 = (uint64_t)v70;
    static TaskPriority.userInitiated.getter();
    uint64_t v45 = type metadata accessor for TaskPriority();
    sub_10002538C(v44, 0, 1, v45);
    uint64_t v46 = (void *)swift_allocObject();
    v46[2] = 0;
    v46[3] = 0;
    uint64_t v47 = v67;
    v46[4] = v69;
    v46[5] = v47;
    uint64_t v48 = v59;
    uint64_t v49 = v60;
    v46[6] = v42;
    v46[7] = v48;
    uint64_t v50 = v68;
    v46[8] = v39;
    v46[9] = v50;
    uint64_t v51 = v61;
    v46[10] = v49;
    v46[11] = v51;
    uint64_t v52 = v71;
    v46[12] = sub_1000E209C;
    v46[13] = v52;
    swift_retain();
    id v53 = v42;
    swift_unknownObjectRetain();
    swift_retain();
    swift_retain();
    sub_1001013F0(v44);
    swift_release();
    swift_release();
    sub_100019994(v44, &qword_10021F2D0);
    sub_100027C24(v43, (void (*)(void))type metadata accessor for CancellableStoreKey);
    swift_release();
    _Block_release(v62);
  }
  else
  {
    _Block_copy(a9);
    ((void (**)(void, id, void, void))a9)[2](a9, [a1 queryId], 0, 0);
    *(unsigned char *)(a7 + qword_10021B6C8) = 42;
    sub_100011708();
    swift_release();
    _Block_release(a9);
  }
}

void sub_1000DCA98(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7, uint64_t a8, void (**a9)(void, void, void, void))
{
  id v102 = a7;
  uint64_t v103 = a6;
  uint64_t v114 = a5;
  uint64_t v98 = a4;
  uint64_t v96 = a3;
  uint64_t v93 = a2;
  id v113 = a1;
  uint64_t v120 = type metadata accessor for URLRequest();
  uint64_t v110 = *(void *)(v120 - 8);
  __chkstk_darwin(v120);
  unint64_t v109 = v10;
  uint64_t v118 = (char *)&v86 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10002572C(&qword_10021F2D0);
  __chkstk_darwin(v11 - 8);
  uint64_t v119 = (uint64_t)&v86 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v121 = type metadata accessor for Apple_Parsec_Safari_V1alpha_SafariSearchRequest();
  uint64_t v111 = *(void *)(v121 - 8);
  uint64_t v13 = __chkstk_darwin(v121);
  uint64_t v115 = (char *)&v86 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v105 = v14;
  __chkstk_darwin(v13);
  uint64_t v117 = (char *)&v86 - v15;
  uint64_t v16 = type metadata accessor for Apple_Parsec_Search_PegasusSearchQuery();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  unint64_t v116 = (char *)&v86 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v101 = type metadata accessor for UserAgent();
  uint64_t v100 = *(void *)(v101 - 8);
  __chkstk_darwin(v101);
  uint64_t v97 = v19;
  os_log_type_t v99 = (char *)&v86 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for CancellableStoreKey();
  uint64_t v94 = *(void *)(v20 - 8);
  uint64_t v21 = *(void *)(v94 + 64);
  uint64_t v22 = __chkstk_darwin(v20 - 8);
  uint64_t v95 = (uint64_t)&v86 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  uint64_t v123 = (uint64_t)&v86 - v23;
  uint64_t v24 = type metadata accessor for PegasusContext(0);
  __chkstk_darwin(v24 - 8);
  uint64_t v26 = (char *)&v86 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Context = type metadata accessor for Apple_Parsec_Search_PegasusQueryContext();
  uint64_t v107 = *(void *)(Context - 8);
  uint64_t v108 = Context;
  __chkstk_darwin(Context);
  uint64_t v122 = (uint64_t)&v86 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v106 = type metadata accessor for Apple_Parsec_Safari_V1alpha_SafariQueryContext();
  uint64_t v104 = *(void *)(v106 - 8);
  __chkstk_darwin(v106);
  uint64_t v30 = (char *)&v86 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = sub_10002572C(&qword_10021DD60);
  __chkstk_darwin(v31 - 8);
  unint64_t v33 = (char *)&v86 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = swift_allocObject();
  *(void *)(v34 + 16) = a9;
  uint64_t v35 = *(void **)(a8 + OBJC_IVAR____TtC7parsecd11ClientState_safariSearchProxy);
  if (v35)
  {
    uint64_t v36 = a8;
    uint64_t v89 = v34;
    uint64_t v90 = v17;
    uint64_t v91 = v16;
    uint64_t v92 = a9;
    uint64_t v37 = v35;
    _Block_copy(a9);
    swift_retain();
    id v38 = v113;
    sub_10008EFB0(v38, (uint64_t)v33);
    [v38 triggerEvent];
    sub_10000896C(v38, (SEL *)&selRef_previouslyEngagedQuery);
    int v112 = v30;
    uint64_t v88 = v33;
    dispatch thunk of PegasusProxyForSafariSearch.createSafariQueryContext(previousQuery:suggestQuery:localCompletions:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v39 = v96;
    sub_100023FDC((uint64_t)v26);
    sub_1000F5CD0(1, v39, v98, v122);
    sub_100027C24((uint64_t)v26, (void (*)(void))type metadata accessor for PegasusContext);
    id v87 = v38;
    [v38 scale];
    Apple_Parsec_Search_PegasusQueryContext.uiScale.setter();
    sub_10000896C(v38, (SEL *)&selRef_keyboardInputMode);
    Apple_Parsec_Search_PegasusQueryContext.keyboardIme.setter();
    uint64_t v40 = v123;
    UUID.init()();
    swift_retain();
    uint64_t v41 = dispatch thunk of BasePegasusProxy.feedbackEventStream.getter();
    id v113 = v37;
    swift_release();
    uint64_t v124 = v41;
    uint64_t v96 = swift_allocObject();
    uint64_t v98 = v36;
    swift_weakInit();
    uint64_t v42 = v95;
    sub_1000E0380(v40, v95);
    uint64_t v43 = v100;
    uint64_t v44 = v99;
    uint64_t v45 = v101;
    (*(void (**)(char *, id, uint64_t))(v100 + 16))(v99, v102, v101);
    unint64_t v46 = (*(unsigned __int8 *)(v94 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v94 + 80);
    unint64_t v47 = (v21 + v46 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v48 = (*(unsigned __int8 *)(v43 + 80) + v47 + 8) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80);
    uint64_t v49 = (char *)swift_allocObject();
    uint64_t v50 = v87;
    uint64_t v51 = v103;
    *((void *)v49 + 2) = v87;
    *((void *)v49 + 3) = v51;
    *((void *)v49 + 4) = &off_1001FDB50;
    sub_1000E03DC(v42, (uint64_t)&v49[v46]);
    *(void *)&v49[v47] = v96;
    (*(void (**)(char *, char *, uint64_t))(v43 + 32))(&v49[v48], v44, v45);
    id v52 = v50;
    v51;
    sub_10002572C(&qword_10021DBE0);
    sub_100092CA8(&qword_10021DBE8, &qword_10021DBE0);
    Publisher<>.sink(receiveValue:)();
    swift_release();
    swift_release();
    sub_1000998E8();
    swift_release();
    id v53 = [v52 queryCommand];
    id v102 = v52;
    if (v53)
    {
      uint64_t v54 = v53;
      self;
      uint64_t v55 = swift_dynamicCastObjCClass();
      if (v55)
      {
        uint64_t v56 = (void *)v55;
        id v57 = v54;
        uint64_t v58 = &selRef_tokenString;
LABEL_10:
        uint64_t v60 = sub_10000896C(v56, (SEL *)v58);
        unint64_t v62 = v61;

        if (v62) {
          uint64_t v63 = v60;
        }
        else {
          uint64_t v63 = 0;
        }
        if (!v62) {
          unint64_t v62 = 0xE000000000000000;
        }
        goto LABEL_18;
      }
      self;
      uint64_t v59 = swift_dynamicCastObjCClass();
      if (v59)
      {
        uint64_t v56 = (void *)v59;
        id v57 = v54;
        uint64_t v58 = &selRef_searchString;
        goto LABEL_10;
      }
    }
    id v64 = [v52 queryString];
    uint64_t v63 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v62 = v65;

LABEL_18:
    uint64_t v66 = v93;
    uint64_t v101 = v62;
    uint64_t v103 = (void *)v63;
    Apple_Parsec_Search_PegasusSearchQuery.init()();
    swift_bridgeObjectRetain();
    Apple_Parsec_Search_PegasusSearchQuery.query.setter();
    uint64_t v67 = v117;
    dispatch thunk of PegasusProxyForSafariSearch.createRequest(_:context:safariContext:)();
    uint64_t v68 = v119;
    static TaskPriority.userInitiated.getter();
    uint64_t v69 = type metadata accessor for TaskPriority();
    sub_10002538C(v68, 0, 1, v69);
    uint64_t v70 = v111;
    uint64_t v71 = v67;
    uint64_t v72 = v121;
    (*(void (**)(char *, char *, uint64_t))(v111 + 16))(v115, v71, v121);
    uint64_t v73 = v110;
    (*(void (**)(char *, uint64_t, uint64_t))(v110 + 16))(v118, v66, v120);
    unint64_t v74 = (*(unsigned __int8 *)(v70 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v70 + 80);
    unint64_t v75 = (v105 + v74 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v76 = (v75 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v77 = (*(unsigned __int8 *)(v73 + 80) + v76 + 16) & ~(unint64_t)*(unsigned __int8 *)(v73 + 80);
    unint64_t v109 = (v109 + v77 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v78 = (char *)swift_allocObject();
    *((void *)v78 + 2) = 0;
    *((void *)v78 + 3) = 0;
    uint64_t v79 = v102;
    uint64_t v80 = v103;
    *((void *)v78 + 4) = v102;
    *((void *)v78 + 5) = v80;
    id v81 = v113;
    *((void *)v78 + 6) = v101;
    *((void *)v78 + 7) = v81;
    (*(void (**)(char *, char *, uint64_t))(v70 + 32))(&v78[v74], v115, v72);
    *(void *)&v78[v75] = v114;
    char v82 = (void (**)())&v78[v76];
    uint64_t v83 = (void (*)())v89;
    *char v82 = sub_1000E209C;
    v82[1] = v83;
    (*(void (**)(char *, char *, uint64_t))(v73 + 32))(&v78[v77], v118, v120);
    *(void *)&v78[v109] = v98;
    swift_retain();
    id v84 = v79;
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v85 = v119;
    sub_1001013F0(v119);
    swift_release();
    swift_release();
    sub_100019994(v85, &qword_10021F2D0);
    (*(void (**)(char *, uint64_t))(v70 + 8))(v117, v121);
    (*(void (**)(char *, uint64_t))(v90 + 8))(v116, v91);
    sub_100027C24(v123, (void (*)(void))type metadata accessor for CancellableStoreKey);
    (*(void (**)(uint64_t, uint64_t))(v107 + 8))(v122, v108);
    (*(void (**)(char *, uint64_t))(v104 + 8))(v112, v106);
    sub_100019994((uint64_t)v88, &qword_10021DD60);
    swift_release();
    _Block_release(v92);
    return;
  }
  _Block_copy(a9);
  ((void (**)(void, id, void, void))a9)[2](a9, [v113 queryId], 0, 0);
  *(unsigned char *)(v114 + qword_10021B6C8) = 42;
  sub_100011708();
  swift_release();

  _Block_release(a9);
}

void sub_1000DD7AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_10000DFE0();
  a19 = v22;
  a20 = v23;
  uint64_t v25 = v24;
  uint64_t v27 = v26;
  uint64_t v217 = v28;
  id v238 = v29;
  uint64_t v30 = type metadata accessor for CancellableStoreKey();
  uint64_t v31 = sub_100024920(v30);
  uint64_t v216 = v32;
  __chkstk_darwin(v31);
  sub_10002CDD4();
  sub_1000288DC(v33);
  __chkstk_darwin(v34);
  sub_100024FFC();
  uint64_t v223 = v35;
  sub_1000E2150((uint64_t)&a13);
  __chkstk_darwin(v36);
  uint64_t v222 = (uint64_t)&v205 - v37;
  sub_100029488();
  uint64_t v38 = type metadata accessor for JSONDecodingOptions();
  uint64_t v39 = sub_100016544(v38);
  __chkstk_darwin(v39);
  sub_10000E04C();
  sub_10001D79C(v40);
  uint64_t v41 = sub_10002572C(&qword_10021DBD0);
  uint64_t v42 = sub_100016544(v41);
  __chkstk_darwin(v42);
  uint64_t v220 = (uint64_t)&v205 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100029488();
  uint64_t v224 = type metadata accessor for Searchfoundation_DrillDownMetadata();
  sub_100020C48();
  uint64_t v218 = v44;
  __chkstk_darwin(v45);
  sub_100017D2C();
  sub_100024A74();
  __chkstk_darwin(v46);
  id v229 = (char *)&v205 - v47;
  uint64_t v48 = sub_1000E2280();
  uint64_t v49 = sub_100016544(v48);
  __chkstk_darwin(v49);
  id v228 = (char *)&v205 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100029488();
  uint64_t Context = type metadata accessor for Apple_Parsec_Search_PegasusQueryContext();
  uint64_t v52 = sub_100016544(Context);
  __chkstk_darwin(v52);
  uint64_t v227 = (char *)&v205 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100029488();
  type metadata accessor for Apple_Parsec_Responseframework_Engagement_V1alpha_EngagementRequest();
  sub_100020C48();
  uint64_t v225 = v54;
  uint64_t v226 = v55;
  __chkstk_darwin(v54);
  sub_10000E04C();
  uint64_t v230 = v56;
  uint64_t v57 = sub_10002572C(&qword_10021BF30);
  uint64_t v58 = sub_100016544(v57);
  __chkstk_darwin(v58);
  uint64_t v239 = sub_1000E2600();
  sub_100020C48();
  uint64_t v235 = v59;
  __chkstk_darwin(v60);
  sub_10002CDD4();
  sub_10001D79C(v61);
  sub_1000E2150((uint64_t)&a9);
  __chkstk_darwin(v62);
  id v231 = (char *)&v205 - v63;
  sub_100029488();
  uint64_t v64 = type metadata accessor for PegasusClientName();
  sub_100020C48();
  uint64_t v66 = v65;
  __chkstk_darwin(v67);
  sub_100027014();
  uint64_t v68 = type metadata accessor for Client();
  sub_100020C48();
  uint64_t v70 = v69;
  uint64_t v72 = __chkstk_darwin(v71);
  unint64_t v74 = (char *)&v205 - ((v73 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v72);
  sub_1000E21E8();
  uint64_t v236 = sub_100023CE4();
  *(void *)(v236 + 16) = v25;
  id v232 = v25;
  _Block_copy(v25);
  sub_10001DAF4((uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__client, (void (*)(uint64_t))sub_10002A150);
  Client.type.getter();
  uint64_t v75 = *(void *)(v70 + 8);
  uint64_t v237 = v68;
  uint64_t v233 = v75;
  uint64_t v234 = v70 + 8;
  sub_100024400();
  v76();
  uint64_t v77 = ClientType.rawValue.getter();
  if (v77 == ClientType.rawValue.getter())
  {
    (*(void (**)(uint64_t, void, uint64_t))(v66 + 104))(v21, enum case for PegasusClientName.LookupSearch(_:), v64);
    Client.init(_:)();
  }
  else
  {
    sub_10001DAF4((uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__client, (void (*)(uint64_t))sub_10002A150);
  }
  uint64_t v78 = v27;
  uint64_t v79 = *(void **)(v27 + 56);
  sub_1000E30A8();
  sub_100025A60();
  v80();
  swift_retain();
  id v81 = v238;
  id v82 = [v238 queryId];
  type metadata accessor for ResourceAccessSpan();
  sub_1000281FC();
  uint64_t v83 = sub_100003EAC(v79, 18, (uint64_t)v74, (uint64_t)v82, 0);
  sub_10001DAF4((uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__userAgent, (void (*)(uint64_t))sub_10002A280);
  sub_1000184F4(v20, 1, v239);
  uint64_t v84 = v235;
  if (v85)
  {
    sub_100019994(v20, &qword_10021BF30);
    [v81 queryId];
    uint64_t v86 = v232;
    uint64_t v87 = sub_1000270F4();
    v88(v87);
    sub_1000E27D4(qword_10021B6C8);
    swift_release();
  }
  else
  {
    uint64_t v89 = v235 + 32;
    uint64_t v90 = v231;
    uint64_t v212 = *(void *)(v235 + 32);
    sub_1000E27FC();
    v91();
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      uint64_t v93 = Strong;
      uint64_t v209 = v89;
      uint64_t v211 = *(void *)(v78 + 24);
      uint64_t v94 = *(os_unfair_lock_s **)(*(void *)(v78 + OBJC_IVAR____TtC7parsecd11ClientState_pegasusProxyLocker) + 16);
      swift_retain();
      os_unfair_lock_lock(v94);
      uint64_t v213 = (char *)OBJC_IVAR____TtC7parsecd11ClientState_engagementProxy;
      uint64_t v95 = *(void **)(v78 + OBJC_IVAR____TtC7parsecd11ClientState_engagementProxy);
      if (v95)
      {
        swift_retain();
        dispatch thunk of BasePegasusProxy.warmUpConnectionIfNeeded()();
        swift_release();
      }
      uint64_t v215 = v93;
      uint64_t v214 = v83;
      os_unfair_lock_unlock(v94);
      swift_release();
      if (qword_100218AF0 != -1) {
        swift_once();
      }
      uint64_t v96 = type metadata accessor for Logger();
      sub_1000E2174(v96, (uint64_t)qword_1002368E8);
      id v97 = v238;
      swift_retain_n();
      uint64_t v98 = (char *)v97;
      id v238 = v95;
      os_log_type_t v99 = Logger.logObject.getter();
      os_log_type_t v100 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v99, v100))
      {
        uint64_t v101 = sub_10001AB54();
        uint64_t v210 = sub_100023E3C();
        uint64_t v241 = v210;
        *(_DWORD *)uint64_t v101 = 136446723;
        type metadata accessor for SessionType();
        sub_10003233C(&qword_10021DB60, (void (*)(uint64_t))&type metadata accessor for SessionType);
        uint64_t v102 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v240 = sub_10001C274(v102, v103, &v241);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v101 + 12) = 2050;
        id v104 = [v98 queryId];

        uint64_t v240 = (uint64_t)v104;
        sub_1000E2994();
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        *(_WORD *)(v101 + 22) = 2085;
        id v105 = [v98 queryCommand];
        uint64_t v240 = (uint64_t)v105;
        sub_10002572C(&qword_10021DC00);
        Optional.debugDescription.getter();

        uint64_t v106 = sub_10002EF04();
        uint64_t v240 = sub_10001C274(v106, v107, v108);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v99, v100, "Session %{public}s performing engagement query %{public}llu command: %{sensitive}s", (uint8_t *)v101, 0x20u);
        sub_10002EE98();
        sub_100017D40();
        uint64_t v90 = v231;
        sub_100017D40();
      }
      else
      {

        swift_release_n();
      }
      uint64_t v210 = v78;
      uint64_t v111 = *(void *)&v213[v78];
      uint64_t v112 = v215;
      if (v111)
      {
        swift_retain();
        Apple_Parsec_Responseframework_Engagement_V1alpha_EngagementRequest.init()();
        uint64_t v113 = (uint64_t)v228;
        sub_100023FDC((uint64_t)v228);
        uint64_t v114 = Client.type.getter();
        sub_1000F5CD0(v114, v112, v211, (uint64_t)v227);
        sub_100027C24(v113, (void (*)(void))type metadata accessor for PegasusContext);
        Apple_Parsec_Responseframework_Engagement_V1alpha_EngagementRequest.queryContext.setter();
        Searchfoundation_DrillDownMetadata.init()();
        Apple_Parsec_Responseframework_Engagement_V1alpha_EngagementRequest.requestMetadata.setter();
        id v115 = [v98 queryString];
        uint64_t v116 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v118 = v117;

        id v119 = [v98 queryCommand];
        if (v119)
        {
          uint64_t v120 = v119;
          id v228 = (char *)v116;
          self;
          uint64_t v121 = swift_dynamicCastObjCClass();
          if (v121)
          {
            uint64_t v122 = (void *)v121;
            swift_bridgeObjectRelease();
            uint64_t v227 = v120;
            id v123 = [v122 drilldownMetadata];
            if (!v123 || (uint64_t v124 = sub_1000CCC38(v123), v125 >> 60 == 15))
            {
              os_log_type_t v126 = (void *)Logger.logObject.getter();
              os_log_type_t v127 = static os_log_type_t.error.getter();
              if (sub_100017D10(v127))
              {
                uint64_t v128 = (_WORD *)sub_100023E24();
                sub_1000263D4(v128);
                sub_100024288((void *)&_mh_execute_header, v129, v130, "Incomplete request: Missing drilldowndata");
                sub_100017D40();
              }

              [v98 queryId];
              uint64_t v86 = v232;
              uint64_t v131 = sub_1000270F4();
              v132(v131);
              sub_10001AAA4(qword_10021B6C8);
              swift_release();
              swift_release();
              swift_unknownObjectRelease();
              id v133 = v227;
LABEL_33:

LABEL_38:
              sub_10000E040();
              v160();
              (*(void (**)(char *, uint64_t))(v84 + 8))(v90, v239);
              goto LABEL_39;
            }
            uint64_t v151 = v124;
            unint64_t v152 = v125;
            uint64_t v213 = v98;
            uint64_t v208 = v111;
            sub_100027BCC(v124, v125);
            id v228 = (char *)sub_10000896C(v122, (SEL *)&selRef_tokenString);
            id v154 = (char *)v152;
            uint64_t v155 = v151;
            if (!v153)
            {
              sub_10000A330(v151, v152);
              id v162 = v227;

              id v228 = 0;
              LODWORD(v211) = 1;
              uint64_t v118 = (void *)0xE000000000000000;
LABEL_43:
              uint64_t v163 = v220;
              uint64_t v220 = v155;
              sub_100027BCC(v155, (unint64_t)v154);
              sub_100027BCC(v155, (unint64_t)v154);
              JSONDecodingOptions.init()();
              sub_10003233C(&qword_10021DBD8, (void (*)(uint64_t))&type metadata accessor for Searchfoundation_DrillDownMetadata);
              uint64_t v227 = v154;
              sub_1000E2994();
              uint64_t v164 = v224;
              Message.init(jsonUTF8Data:options:)();
              sub_10002538C(v163, 0, 1, v164);
              sub_10000E0F4();
              v165();
              sub_1000E300C();
              sub_10002E678();
              sub_100016608();
              v166();
              Apple_Parsec_Responseframework_Engagement_V1alpha_EngagementRequest.requestMetadata.setter();
              UUID.init()();
              uint64_t v167 = v223;
              UUID.init()();
              swift_retain();
              uint64_t v168 = dispatch thunk of BasePegasusProxy.feedbackEventStream.getter();
              swift_release();
              uint64_t v241 = v168;
              uint64_t v207 = type metadata accessor for CancellableStoreKey;
              sub_1000E0380(v167, v221);
              sub_1000E29B0();
              sub_100016608();
              v169();
              uint64_t v219 = *(unsigned __int8 *)(v216 + 80);
              sub_1000E2898();
              uint64_t v216 = v171 + v170;
              uint64_t v172 = v171;
              uint64_t v206 = v171;
              id v238 = (id)(v173 | 7);
              unint64_t v174 = (v171 + v170 + 7) & 0xFFFFFFFFFFFFFFF8;
              os_log_type_t v175 = (void *)swift_allocObject();
              id v176 = v213;
              uint64_t v177 = (uint64_t)v228;
              v175[2] = v213;
              v175[3] = v177;
              v175[4] = v118;
              sub_1000E2E28();
              *(void *)(v178 + 40) = v118;
              *(void *)(v178 + 48) = &off_1001FDB50;
              sub_1000E03DC(v221, v178 + v172);
              *(void *)((char *)v175 + v174) = v210;
              sub_1000E21C4();
              sub_10000E0F4();
              v179();
              swift_retain();
              id v229 = (char *)v176;
              uint64_t v180 = v118;
              sub_10002572C(&qword_10021DBE0);
              sub_100092CA8(&qword_10021DBE8, &qword_10021DBE0);
              sub_1000E2EB4();
              Publisher<>.sink(receiveValue:)();
              swift_release();
              swift_release();
              sub_1000998E8();
              swift_release();
              uint64_t v241 = dispatch thunk of PegasusProxyForEngagement.searchResponsePublisher(forSearchRequestWithQueryContext:)();
              uint64_t v181 = sub_100023CFC();
              *(void *)(v181 + 24) = &off_1001FDB50;
              id v228 = v180;
              swift_unknownObjectWeakInit();
              uint64_t v182 = v222;
              uint64_t v183 = v221;
              sub_1000E0380(v222, v221);
              unint64_t v184 = (void *)swift_allocObject();
              uint64_t v217 = sub_1000E0378;
              v184[2] = v214;
              v184[3] = sub_1000E0378;
              uint64_t v185 = v236;
              id v186 = v229;
              v184[4] = v236;
              v184[5] = v186;
              v184[6] = v181;
              sub_1000E03DC(v183, (uint64_t)v184 + v206);
              uint64_t v187 = sub_100023CFC();
              *(void *)(v187 + 24) = &off_1001FDB50;
              swift_unknownObjectWeakInit();
              uint64_t v188 = v183;
              sub_1000E0380(v182, v183);
              uint64_t v189 = (v219 + 24) & ~v219;
              sub_1000E2898();
              unint64_t v191 = (v190 + v189 + 7) & 0xFFFFFFFFFFFFFFF8;
              unint64_t v192 = (v191 + 11) & 0xFFFFFFFFFFFFFFF8;
              unint64_t v193 = (v192 + 11) & 0xFFFFFFFFFFFFFFF8;
              uint64_t v194 = swift_allocObject();
              *(void *)(v194 + 16) = v187;
              sub_1000E03DC(v188, v194 + v189);
              *(void *)(v194 + v191) = v214;
              *(_DWORD *)(v194 + v192) = v211;
              uint64_t v195 = (void (**)())(v194 + v193);
              void *v195 = v217;
              v195[1] = (void (*)())v185;
              uint64_t v196 = v229;
              *(void *)(v194 + ((v193 + 23) & 0xFFFFFFFFFFFFFFF8)) = v229;
              id v197 = v196;
              swift_retain_n();
              swift_retain_n();
              id v198 = v197;
              sub_10002572C(&qword_10021DBF0);
              sub_100092CA8(&qword_10021DBF8, &qword_10021DBF0);
              Publisher.sink(receiveCompletion:receiveValue:)();
              swift_release();
              swift_release();
              swift_release();
              uint64_t v199 = v222;
              sub_1000998E8();
              swift_release();
              swift_release();
              sub_1000E2DA4();
              swift_unknownObjectRelease();
              swift_release();
              uint64_t v200 = v220;
              unint64_t v201 = (unint64_t)v227;
              sub_10000A330(v220, (unint64_t)v227);
              sub_10000A330(v200, v201);
              sub_100027C24(v223, (void (*)(void))type metadata accessor for CancellableStoreKey);
              sub_100027C24(v199, (void (*)(void))type metadata accessor for CancellableStoreKey);
              sub_1000E26C4();
              sub_10000E040();
              v202();
              sub_10000E040();
              v203();
              sub_10000E040();
              v204();
              uint64_t v86 = v232;
              goto LABEL_39;
            }
            uint64_t v118 = v153;
            sub_10000A330(v151, (unint64_t)v154);
            id v156 = v227;

            int v157 = 1;
LABEL_42:
            LODWORD(v211) = v157;
            goto LABEL_43;
          }
          self;
          uint64_t v137 = swift_dynamicCastObjCClass();
          if (v137)
          {
            uint64_t v138 = (void *)v137;
            uint64_t v213 = v98;
            id v133 = v120;
            id v139 = [v138 card];
            if (!v139
              || (id v140 = v139,
                  id v141 = [v139 drilldownMetadata],
                  v140,
                  !v141)
              || (uint64_t v142 = sub_1000CCC38(v141), v143 >> 60 == 15))
            {
              swift_bridgeObjectRelease();
              uint64_t v144 = (void *)Logger.logObject.getter();
              os_log_type_t v145 = static os_log_type_t.error.getter();
              if (sub_100017D10(v145))
              {
                os_log_type_t v146 = (_WORD *)sub_100023E24();
                sub_1000263D4(v146);
                sub_100024288((void *)&_mh_execute_header, v147, v148, "Incomplete request: Missing drilldowndata");
                sub_100017D40();
              }

              [v213 queryId];
              uint64_t v86 = v232;
              uint64_t v149 = sub_1000270F4();
              v150(v149);
              sub_10001AAA4(qword_10021B6C8);
              swift_release();
              swift_release();
              swift_unknownObjectRelease();
              goto LABEL_33;
            }
            uint64_t v155 = v142;
            id v154 = (char *)v143;
            uint64_t v208 = v111;

            int v157 = 2;
            goto LABEL_42;
          }
        }
        swift_bridgeObjectRelease();
        [v98 queryId];
        uint64_t v86 = v232;
        uint64_t v158 = sub_1000270F4();
        v159(v158);
        sub_10001AAA4(qword_10021B6C8);
        swift_release();
        swift_release();
        swift_unknownObjectRelease();
        goto LABEL_38;
      }
      [v98 queryId];
      uint64_t v86 = v232;
      uint64_t v134 = sub_1000270F4();
      v135(v134);
      sub_10001AAA4(qword_10021B6C8);
      swift_release();
      swift_unknownObjectRelease();
    }
    else
    {
      [v238 queryId];
      uint64_t v86 = v232;
      uint64_t v109 = sub_1000270F4();
      v110(v109);
      sub_1000E27D4(qword_10021B6C8);
      swift_release();
    }
    sub_100018488();
    v136();
  }
LABEL_39:
  sub_100024400();
  v161();
  swift_release();
  _Block_release(v86);
  sub_10000DFB8();
}

uint64_t sub_1000DECDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v20 = a5;
  uint64_t v21 = a6;
  uint64_t v12 = type metadata accessor for Client();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001DAF4((uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__client, (void (*)(uint64_t))sub_10002A150);
  Client.type.getter();
  uint64_t v16 = *(void (**)(char *, uint64_t))(v13 + 8);
  v16(v15, v12);
  uint64_t v17 = ClientType.rawValue.getter();
  if (v17 == ClientType.rawValue.getter())
  {
    uint64_t v18 = 7;
  }
  else
  {
    sub_10001DAF4((uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__client, (void (*)(uint64_t))sub_10002A150);
    uint64_t v18 = Client.type.getter();
    v16(v15, v12);
  }
  return sub_1000DF040(a1, a2, a3, a4, v20, v21, v18, a7);
}

uint64_t sub_1000DEE88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v21 = a5;
  uint64_t v22 = a6;
  uint64_t v20 = a4;
  uint64_t v11 = type metadata accessor for Client();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001DAF4((uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__client, (void (*)(uint64_t))sub_10002A150);
  Client.type.getter();
  uint64_t v15 = *(void (**)(char *, uint64_t))(v12 + 8);
  v15(v14, v11);
  uint64_t v16 = ClientType.rawValue.getter();
  if (v16 == ClientType.rawValue.getter())
  {
    uint64_t v17 = 7;
  }
  else
  {
    sub_10001DAF4((uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__client, (void (*)(uint64_t))sub_10002A150);
    uint64_t v17 = Client.type.getter();
    v15(v14, v11);
  }
  return sub_1000DF040(a1, a2, a3, v20, v21, v22, v17, a7);
}

uint64_t sub_1000DF040(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v54 = a6;
  uint64_t v55 = a8;
  uint64_t v52 = a3;
  uint64_t v53 = a4;
  uint64_t v51 = a1;
  uint64_t v9 = sub_10002572C(&qword_10021BF30);
  __chkstk_darwin(v9 - 8);
  uint64_t v50 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for UserAgent();
  uint64_t v57 = *(void *)(v11 - 8);
  uint64_t v58 = v11;
  __chkstk_darwin(v11);
  uint64_t v56 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Apple_Parsec_Search_V2_SearchResponse.StatusCode();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_10002572C(&qword_10021DBC0);
  __chkstk_darwin(v17 - 8);
  uint64_t v19 = (char *)&v47 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for Apple_Parsec_Search_V2_SearchResponse();
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v23 = (char *)&v47 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002B9E8(a2, (uint64_t)v19, &qword_10021DBC0);
  if (sub_100027BA4((uint64_t)v19, 1, v20) == 1)
  {
    sub_100019994((uint64_t)v19, &qword_10021DBC0);
    uint64_t v24 = sub_100073614();
    objc_allocWithZone((Class)_CPEndNetworkSearchFeedback);
    uint64_t v25 = swift_unknownObjectRetain();
    id v26 = sub_1000CC274(v25, v52, v53, 0.0, 0, 0, 0, 0, 0, 0, (uint64_t)v24);
    uint64_t v27 = (uint64_t)v50;
    goto LABEL_15;
  }
  (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v23, v19, v20);
  Apple_Parsec_Search_V2_SearchResponse.status.getter();
  int v28 = (*(uint64_t (**)(char *, uint64_t))(v14 + 88))(v16, v13);
  if (v28 == enum case for Apple_Parsec_Search_V2_SearchResponse.StatusCode.UNRECOGNIZED(_:))
  {
    uint64_t v49 = 0x524F525245;
    uint64_t v48 = 0xE500000000000000;
  }
  else
  {
    if (v28 != enum case for Apple_Parsec_Search_V2_SearchResponse.StatusCode.statusOk(_:))
    {
      uint64_t v27 = (uint64_t)v50;
      if (v28 == enum case for Apple_Parsec_Search_V2_SearchResponse.StatusCode.statusError(_:))
      {
        uint64_t v49 = 0x524F525245;
      }
      else
      {
        if (v28 == enum case for Apple_Parsec_Search_V2_SearchResponse.StatusCode.statusNoResults(_:))
        {
          uint64_t v48 = 0xEA00000000005354;
          uint64_t v49 = 0x4C555345525F4F4ELL;
          goto LABEL_14;
        }
        uint64_t v49 = 0x524F525245;
        (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
      }
      uint64_t v48 = 0xE500000000000000;
      goto LABEL_14;
    }
    uint64_t v48 = 0xE200000000000000;
    uint64_t v49 = 19279;
  }
  uint64_t v27 = (uint64_t)v50;
LABEL_14:
  uint64_t v29 = Apple_Parsec_Search_V2_SearchResponse.feedback.getter();
  unint64_t v31 = v30;
  Swift::String v32 = Data.base64EncodedString(options:)(0);
  sub_1000291B4(v29, v31);
  uint64_t v33 = Apple_Parsec_Search_V2_SearchResponse.partialClientAddress.getter();
  uint64_t v35 = v34;
  double v36 = (double)Apple_Parsec_Search_V2_SearchResponse.millisecondDuration.getter();
  uint64_t v37 = sub_100073614();
  objc_allocWithZone((Class)_CPEndNetworkSearchFeedback);
  uint64_t v38 = swift_unknownObjectRetain();
  id v26 = sub_1000CC274(v38, v52, v53, v36, v49, v48, v32._countAndFlagsBits, (uint64_t)v32._object, v33, v35, (uint64_t)v37);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v20);
LABEL_15:
  id v39 = objc_allocWithZone((Class)_CPFeedbackPayload);
  swift_unknownObjectRetain();
  id v40 = v26;
  id v41 = [v39 initWithCodable:v40];
  [v41 setQueryId:v54];

  sub_10001DAF4((uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__userAgent, (void (*)(uint64_t))sub_10002A280);
  uint64_t v42 = v58;
  int v43 = sub_100027BA4(v27, 1, v58);
  uint64_t v45 = v56;
  uint64_t v44 = v57;
  if (v43 == 1)
  {
    parsecdUserAgent.getter();
    sub_100019994(v27, &qword_10021BF30);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v57 + 32))(v56, v27, v42);
  }
  sub_1000148D0();

  swift_unknownObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v45, v42);
}

uint64_t sub_1000DF634(uint64_t a1, uint64_t a2)
{
  uint64_t result = __DataStorage._bytes.getter();
  if (!result || (uint64_t result = __DataStorage._offset.getter(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      __DataStorage._length.getter();
      type metadata accessor for SHA256();
      sub_10003233C(&qword_10021DE70, (void (*)(uint64_t))&type metadata accessor for SHA256);
      return dispatch thunk of HashFunction.update(bufferPointer:)();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1000DF714()
{
  return dispatch thunk of HashFunction.update(bufferPointer:)();
}

void sub_1000DF83C()
{
  sub_10000DFE0();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  unint64_t v6 = v5;
  uint64_t v43 = v7;
  uint64_t v9 = v8;
  uint64_t v10 = type metadata accessor for SessionTokens(0);
  uint64_t v11 = sub_100016544(v10);
  __chkstk_darwin(v11);
  sub_100027570();
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v42 - v13;
  *(void *)(v2 + 16) = 0;
  *(void *)(v2 + 24) = 0;
  *(void *)(v2 + 32) = 0;
  sub_10002572C(&qword_10021C010);
  swift_allocObject();
  *(void *)(v2 + 40) = sub_10010FEE4(0, 0);
  *(void *)(v2 + 80) = 0;
  swift_unknownObjectWeakInit();
  *(unsigned char *)(v2 + 88) = 2;
  type metadata accessor for SessionEndEventController();
  swift_allocObject();
  *(void *)(v2 + 136) = sub_1000E8C4C();
  *(unsigned char *)(v2 + 152) = 1;
  *(void *)(v2 + 80) = &off_1001FD220;
  sub_1000E2F4C();
  swift_unknownObjectWeakAssign();
  uint64_t v15 = swift_unknownObjectRetain();
  sub_10001319C(v15, (uint64_t)v14);
  sub_1000257C8();
  sub_1000E0380((uint64_t)v14, v0);
  sub_10002572C(&qword_10021DB98);
  sub_1000281FC();
  uint64_t v16 = (void *)sub_10010FF5C(v0);
  sub_100027C24((uint64_t)v14, (void (*)(void))type metadata accessor for SessionTokens);
  *(void *)(v2 + 144) = v16;
  swift_endAccess();
  sub_10002B9E8(v4, (uint64_t)&v44, (uint64_t *)&unk_10021DBA0);
  if (v45)
  {
    sub_10001C1AC(&v44, (uint64_t)&v46);
  }
  else
  {
    id v17 = [self standardUserDefaults];
    sub_100024344();
    uint64_t v47 = type metadata accessor for ClientSessionTimekeeper();
    uint64_t v48 = &off_1002019D8;
    uint64_t v18 = sub_10002E5E8((uint64_t *)&v46);
    sub_10010F234(v16, (uint64_t)v18);
    sub_100019994((uint64_t)&v44, (uint64_t *)&unk_10021DBA0);
  }
  sub_10001C1AC(&v46, v2 + 96);
  uint64_t v19 = *(void **)(v9 + 256);
  uint64_t v20 = v43;
  *(void *)(v2 + 48) = v19;
  *(void *)(v2 + 56) = v20;
  *(void *)(v2 + 64) = v6;
  uint64_t v21 = self;
  id v22 = v19;
  swift_bridgeObjectRetain();
  id v23 = [v21 standardUserDefaults];
  NSString v24 = String._bridgeToObjectiveC()();
  unsigned int v25 = [v23 BOOLForKey:v24];

  if (v25)
  {
    if (qword_100218B68 != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    sub_10002A10C(v26, (uint64_t)qword_100236A50);
    swift_bridgeObjectRetain();
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = (_DWORD *)sub_100017D90();
      uint64_t v30 = sub_10001AB54();
      id v42 = (id)v4;
      *(void *)&long long v46 = v30;
      _DWORD *v29 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v31 = sub_10001C274(v43, v6, (uint64_t *)&v46);
      sub_1000E2FF8(v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_10002EEC0();
      sub_1000E2B90((void *)&_mh_execute_header, v27, v28, "query cache OFF for %s");
      sub_1000E28EC();
      sub_100017D40();
      sub_100017D40();

      swift_release();
      uint64_t v32 = (uint64_t)v42;
    }
    else
    {
      sub_1000E29D4();

      swift_release();
      uint64_t v32 = v4;
    }
    sub_100019994(v32, (uint64_t *)&unk_10021DBA0);
    uint64_t v38 = 0;
  }
  else
  {
    if (qword_100218B68 != -1) {
      swift_once();
    }
    uint64_t v33 = type metadata accessor for Logger();
    sub_10002A10C(v33, (uint64_t)qword_100236A50);
    swift_bridgeObjectRetain();
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v34, v35))
    {
      id v42 = v23;
      double v36 = (uint8_t *)sub_100017D90();
      *(void *)&long long v46 = sub_10001AB54();
      *(_DWORD *)double v36 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v37 = sub_10001C274(v43, v6, (uint64_t *)&v46);
      sub_1000E2FF8(v37);
      id v23 = v42;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_10002EEC0();
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "query cache ON for %s", v36, 0xCu);
      swift_arrayDestroy();
      sub_100017D40();
      sub_100017D40();
    }
    else
    {

      sub_1000E29D4();
    }
    type metadata accessor for QCCritbitCompressed();
    sub_10002F090();
    sub_100077168();
    sub_100024344();
    type metadata accessor for QueryCache();
    swift_allocObject();
    uint64_t v39 = sub_100016640();
    uint64_t v38 = sub_1000DFDD0(v39, v40, v41);

    sub_100019994(v4, (uint64_t *)&unk_10021DBA0);
  }
  *(void *)(v2 + 32) = v38;
  swift_release();
  sub_10000DFB8();
}

void *sub_1000DFDD0(uint64_t a1, uint64_t a2, void *a3)
{
  v30[3] = type metadata accessor for QCCritbitCompressed();
  v30[4] = &off_1001FFF58;
  v30[0] = a2;
  type metadata accessor for ActivityMonitor();
  swift_allocObject();
  a3[7] = sub_1000BB5F8(0, 0);
  a3[8] = 0;
  a3[10] = 0;
  swift_unknownObjectWeakInit();
  sub_100023FA0(0, (unint64_t *)&qword_100219250);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v5 - 8);
  static DispatchQoS.default.getter();
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v6);
  v29[1] = 0;
  sub_1000E01F0();
  dispatch thunk of OptionSet.init(rawValue:)();
  uint64_t v7 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  __chkstk_darwin(v7);
  (*(void (**)(char *, void))(v9 + 104))((char *)v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:));
  uint64_t v10 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  a3[12] = 0;
  a3[10] = &off_1001FD220;
  a3[11] = v10;
  swift_unknownObjectWeakAssign();
  sub_10001C20C((uint64_t)v30, (uint64_t)(a3 + 2));
  sub_10002572C((uint64_t *)&unk_10021E7E0);
  swift_allocObject();
  swift_retain();
  sub_10003A93C();
  a3[8] = v11;
  swift_release();
  sub_10002572C((uint64_t *)&unk_10021DBB0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1001A3750;
  uint64_t v13 = (void *)GEOCountryConfigurationCountryCodeDidChangeNotification;
  *(void *)(inited + 32) = GEOCountryConfigurationCountryCodeDidChangeNotification;
  *(void *)(inited + 40) = NSSystemTimeZoneDidChangeNotification;
  *(void *)(inited + 48) = NSCurrentLocaleDidChangeNotification;
  uint64_t v14 = qword_100218AB0;
  id v15 = v13;
  uint64_t v16 = NSSystemTimeZoneDidChangeNotification;
  id v17 = NSCurrentLocaleDidChangeNotification;
  if (v14 != -1) {
    swift_once();
  }
  uint64_t v18 = (void *)qword_100236850;
  *(void *)(inited + 56) = qword_100236850;
  uint64_t v19 = (void *)MCEffectiveSettingsChangedNotification;
  id v20 = v18;
  id v21 = v19;
  sub_100065D74();
  uint64_t v23 = v22;
  *(void *)(v22 + 16) = 5;
  *(void *)(v22 + 64) = v21;
  id v24 = [self defaultCenter];
  uint64_t v25 = *(void *)(v23 + 16);
  if (v25)
  {
    uint64_t v26 = (uint64_t *)(v23 + 32);
    do
    {
      uint64_t v27 = *v26++;
      [v24 addObserver:a3 selector:"cacheClearNotificationWithNotification:" name:v27 object:0];
      --v25;
    }
    while (v25);
  }
  swift_release();

  sub_10001CA50((uint64_t)v30);
  swift_bridgeObjectRelease();
  return a3;
}

unint64_t sub_1000E01F0()
{
  unint64_t result = qword_10021B3D0;
  if (!qword_10021B3D0)
  {
    type metadata accessor for OS_dispatch_queue.Attributes();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10021B3D0);
  }
  return result;
}

uint64_t sub_1000E0234()
{
  uint64_t v1 = sub_100021CA4();

  return _swift_deallocObject(v1, v2, v3);
}

uint64_t sub_1000E0264()
{
  swift_weakDestroy();
  uint64_t v0 = sub_100021CA4();

  return _swift_deallocObject(v0, v1, v2);
}

uint64_t sub_1000E0294()
{
  swift_release();
  swift_release();
  uint64_t v0 = sub_100025198();

  return _swift_deallocObject(v0, v1, v2);
}

uint64_t sub_1000E02CC(uint64_t a1)
{
  return sub_1000C15A8(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1000E02D4()
{
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000E031C(uint64_t a1)
{
  return sub_1000C1A7C(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1000E0328(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_1000E2B5C(a1, a2, a3);
  sub_10001DCF8();
  (*(void (**)(uint64_t, uint64_t))(v5 + 40))(v3, v4);
  return v3;
}

void sub_1000E0378()
{
}

uint64_t sub_1000E0380(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_100024344();
  v4(v3);
  sub_10001DCF8();
  sub_10002A020();
  v5();
  return a2;
}

uint64_t sub_1000E03DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CancellableStoreKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000E0440(uint64_t a1)
{
  return sub_1000E1198(a1, (uint64_t (*)(uint64_t))sub_1000C5330);
}

uint64_t sub_1000E0458()
{
  swift_unknownObjectWeakDestroy();
  uint64_t v0 = sub_100025198();

  return _swift_deallocObject(v0, v1, v2);
}

uint64_t sub_1000E0488()
{
  uint64_t v1 = type metadata accessor for CancellableStoreKey();
  sub_100024920(v1);
  swift_release();
  swift_release();

  swift_release();
  sub_1000E2AF0();
  sub_10001DCF8();
  sub_10000E040();
  v2();
  sub_100026344();

  return _swift_deallocObject(v3, v4, v5);
}

void sub_1000E0544()
{
  uint64_t v2 = sub_1000E2298();
  sub_1000213F4(v2);
  uint64_t v3 = v1[2];
  uint64_t v4 = (void (*)(id, void, void))v1[3];
  uint64_t v5 = v1[4];
  uint64_t v6 = (void *)v1[5];

  sub_1000C5938(v0, v3, v4, v5, v6);
}

uint64_t sub_1000E0598()
{
  sub_1000E2C64();
  uint64_t v1 = type metadata accessor for CancellableStoreKey();
  sub_100024920(v1);
  unint64_t v4 = (((((((*(void *)(v3 + 64)
            + ((*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))
            + 7) & 0xFFFFFFFFFFFFFFF8)
          + 11) & 0xFFFFFFFFFFFFFFF8)
        + 11) & 0xFFFFFFFFFFFFFFF8)
      + 23) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  sub_1000E2AF0();
  sub_10001DCF8();
  sub_10000E040();
  v5();
  swift_release();
  swift_release();

  sub_10002E678();
  sub_100024390();
  return _swift_deallocObject(v6, v7, v8);
}

void sub_1000E0680()
{
  uint64_t v2 = sub_1000E2298();
  sub_100024920(v2);
  sub_1000E2AB0();
  unint64_t v5 = (v4 + 11) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = (v5 + 11) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = *(void *)(v1 + 16);
  uint64_t v8 = *(void *)(v1 + v4);
  unsigned int v9 = *(_DWORD *)(v1 + v5);
  uint64_t v10 = *(void (**)(id, void, id))(v1 + v6);
  uint64_t v11 = *(void *)(v1 + v6 + 8);
  uint64_t v12 = *(void **)(v1 + ((v6 + 23) & 0xFFFFFFFFFFFFFFF8));

  sub_1000C5B6C(v0, v7, v1 + v3, v8, v9, v10, v11, v12);
}

unint64_t sub_1000E0714()
{
  unint64_t result = qword_10021DC78;
  if (!qword_10021DC78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10021DC78);
  }
  return result;
}

id sub_1000E0764(void *a1, uint64_t a2, unint64_t a3)
{
  return sub_1000C1D60(a1, a2, a3);
}

uint64_t sub_1000E076C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1000C3974(a1, *(uint64_t (**)(void, void, void))(v2 + 16), a2);
}

void *sub_1000E0774(void *a1, uint64_t a2, unint64_t a3)
{
  return sub_1000C77CC(a1, a2, a3);
}

uint64_t sub_1000E0790@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1000C39B8(a1, *(uint64_t (**)(void, void, void))(v2 + 16), a2);
}

uint64_t sub_1000E07AC(void *a1)
{
  return sub_1000C5F98(a1);
}

uint64_t sub_1000E07C8@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1000C3A00(a1, *(uint64_t (**)(void, void, void))(v2 + 16), a2);
}

uint64_t sub_1000E07E4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1000C5FC4(a1, a2, a3, a4, a5);
}

uint64_t sub_1000E0800@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1000C3A48(a1, *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 16), a2);
}

uint64_t sub_1000E0824@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1000C3AD0(a1, *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t, char *))(v2 + 16), a2);
}

id sub_1000E0844(char *a1, void *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  return sub_1000C2F50(a1, a2, a3, a4, a5, v5[2], v5[3], v5[4], v5[5]);
}

uint64_t sub_1000E0878@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000C3B5C(a1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *))(v2 + 16), a2);
}

uint64_t sub_1000E089C(void *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1);
}

void sub_1000E08D0(void *a1, char a2)
{
  if (a2) {
    swift_errorRelease();
  }
  else {
}
  }

uint64_t sub_1000E08DC()
{
  sub_1000E2C64();
  uint64_t v0 = type metadata accessor for CancellableStoreKey();
  sub_100024920(v0);
  sub_1000E2D08();
  sub_100020C48();
  sub_1000E2414();
  swift_unknownObjectRelease();
  type metadata accessor for UUID();
  sub_10001DCF8();
  sub_10000E040();
  v1();
  swift_release();
  sub_100016614();
  v2();
  sub_1000E21C4();
  sub_100024390();
  return _swift_deallocObject(v3, v4, v5);
}

uint64_t sub_1000E09DC()
{
  uint64_t v3 = sub_1000E2298();
  sub_100024920(v3);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = sub_1000E3088();
  sub_1000213F4(v6);
  sub_1000E27EC();
  uint64_t v10 = *(void *)(v1 + 32);
  uint64_t v11 = *(void *)(v1 + v2);

  return sub_1000C3C60(v0, v7, v8, v10, v1 + v5, v11, v1 + v9);
}

uint64_t sub_1000E0A64()
{
  type metadata accessor for Apple_Parsec_Safari_V1alpha_SafariSearchRequest();
  sub_100020C48();
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  unint64_t v4 = (((*(void *)(v3 + 64) + ((v2 + 64) & ~v2) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  type metadata accessor for URLRequest();
  sub_100020C48();
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  unint64_t v13 = ((*(void *)(v8 + 64) + ((v4 + v9 + 16) & ~v9) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  uint64_t v14 = v2 | v9 | 7;
  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  swift_release();
  sub_1000283AC();
  v10();
  swift_release();
  swift_release();
  sub_100016614();
  v11();
  swift_release();

  return _swift_deallocObject(v0, v13, v14);
}

uint64_t sub_1000E0BC0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Apple_Parsec_Safari_V1alpha_SafariSearchRequest();
  sub_100024920(v2);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = type metadata accessor for URLRequest();
  sub_100024920(v5);
  sub_1000E2AB0();
  uint64_t v14 = v1[3];
  uint64_t v15 = v1[2];
  uint64_t v6 = v1[5];
  uint64_t v13 = v1[4];
  uint64_t v7 = v1[6];
  uint64_t v8 = v1[7];
  uint64_t v9 = swift_task_alloc();
  uint64_t v10 = (void *)sub_10002AC58(v9);
  void *v10 = v11;
  v10[1] = sub_100048298;
  return sub_1000C45B8(a1, v15, v14, v13, v6, v7, v8, (uint64_t)v1 + v4);
}

unint64_t sub_1000E0D44()
{
  unint64_t result = qword_10021DD88;
  if (!qword_10021DD88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10021DD88);
  }
  return result;
}

uint64_t sub_1000E0D90(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_1000E2B5C(a1, a2, a3);
  sub_10001DCF8();
  sub_100021CF0();
  v4();
  return v3;
}

uint64_t sub_1000E0DE0()
{
  swift_release();
  uint64_t v0 = sub_100025198();

  return _swift_deallocObject(v0, v1, v2);
}

uint64_t sub_1000E0E20()
{
  _Block_release(*(const void **)(v0 + 16));
  uint64_t v1 = sub_100021CA4();

  return _swift_deallocObject(v1, v2, v3);
}

uint64_t sub_1000E0E80()
{
  sub_1000E2C64();
  type metadata accessor for URLRequest();
  sub_100020C48();
  swift_bridgeObjectRelease();
  sub_100018488();
  v0();
  swift_bridgeObjectRelease();
  swift_release();
  sub_100028864();
  sub_100024390();
  return _swift_deallocObject(v1, v2, v3);
}

id sub_1000E0F40(char *a1, void *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v11 = type metadata accessor for URLRequest();
  sub_100024920(v11);
  sub_1000E2AB0();
  return sub_1000C2B30(a1, a2, a3, a4, a5, *(void *)(v5 + 16), *(void *)(v5 + 24), v5 + v12, *(void *)(v5 + v13), *(void *)(v5 + v13 + 8), *(void *)(v5 + ((v13 + 23) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_1000E1008()
{
  uint64_t v0 = sub_1000E2298();
  sub_100024920(v0);
  uint64_t v1 = sub_10002E734();

  return sub_1000C5FEC(v1, v2, v3, v4, v5);
}

uint64_t sub_1000E1068()
{
  sub_1000E2C64();
  uint64_t v0 = type metadata accessor for CancellableStoreKey();
  sub_100024920(v0);
  type metadata accessor for UserAgent();
  sub_100020C48();
  sub_1000E2414();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  type metadata accessor for UUID();
  sub_10001DCF8();
  sub_10000E040();
  v1();
  swift_release();
  sub_1000283AC();
  v2();
  sub_1000E21C4();
  sub_100024390();
  return _swift_deallocObject(v3, v4, v5);
}

uint64_t sub_1000E1180(uint64_t a1)
{
  return sub_1000E1198(a1, (uint64_t (*)(uint64_t))sub_1000C6040);
}

uint64_t sub_1000E1198(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v4 = type metadata accessor for CancellableStoreKey();
  sub_100024920(v4);
  uint64_t v5 = type metadata accessor for UserAgent();
  sub_1000213F4(v5);
  sub_1000E27EC();
  return a2(a1);
}

uint64_t sub_1000E124C()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 112, 7);
}

uint64_t sub_1000E12B4()
{
  sub_1000E2D3C();
  sub_1000E2AC0();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_10002AC58(v0);
  void *v1 = v2;
  v1[1] = sub_100046F50;
  sub_1000E20B8();
  sub_1000E20D4();
  return sub_1000C6938(v3, v4, v5, v6, v7, v8, v9, v10);
}

id sub_1000E1388(uint64_t a1, void *a2, uint64_t a3, unint64_t a4)
{
  return sub_1000C77F4(a1, a2, a3, a4);
}

uint64_t sub_1000E13A4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1000C785C(a1, *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 16), a2);
}

uint64_t sub_1000E13C4()
{
  swift_release();
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000E1410()
{
  type metadata accessor for URLRequest();
  sub_100020C48();

  sub_100018488();
  v1();
  sub_1000E21C4();

  return _swift_deallocObject(v2, v3, v4);
}

id sub_1000E14A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1000E2CBC();
  uint64_t v6 = type metadata accessor for URLRequest();
  sub_1000213F4(v6);
  uint64_t v7 = sub_10002A494();

  return sub_1000C370C(v7, v8, a3, a4, v9);
}

uint64_t sub_1000E1520()
{
  type metadata accessor for Logger();
  sub_10001DCF8();
  unint64_t v2 = (((((((((*(void *)(v1 + 64)
              + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80))
              + 7) & 0xFFFFFFFFFFFFFFF8)
            + 15) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 15) & 0xFFFFFFFFFFFFFFF8;
  sub_10000E040();
  v3();
  swift_release();
  swift_unknownObjectRelease();

  uint64_t v4 = sub_10002E678();

  return _swift_deallocObject(v4, v5, v6);
}

uint64_t sub_1000E15E8(void *a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  sub_100024920(v2);
  sub_100028B48();

  return sub_1000C30EC(a1);
}

uint64_t sub_1000E1694()
{
  uint64_t v0 = type metadata accessor for CancellableStoreKey();
  sub_100024920(v0);
  sub_1000E26A8();
  swift_release();
  sub_1000E2AF0();
  sub_10001DCF8();
  sub_10000E040();
  v1();
  swift_release();
  swift_release();
  uint64_t v2 = sub_10002E678();

  return _swift_deallocObject(v2, v3, v4);
}

uint64_t sub_1000E1750()
{
  uint64_t v0 = sub_1000E2298();
  sub_100024920(v0);
  uint64_t v1 = sub_10002E734();
  return sub_1000C52D8(v1, v2, v3, v4, v5);
}

uint64_t sub_1000E17A0()
{
  sub_1000E2C64();
  uint64_t v0 = type metadata accessor for CancellableStoreKey();
  sub_100024920(v0);
  sub_1000E2D08();
  sub_100020C48();
  sub_1000E2414();
  swift_release();
  type metadata accessor for UUID();
  sub_10001DCF8();
  sub_10000E040();
  v1();
  swift_release();
  sub_100016614();
  v2();
  sub_1000E21C4();
  sub_100024390();
  return _swift_deallocObject(v3, v4, v5);
}

uint64_t sub_1000E18A0()
{
  uint64_t v3 = sub_1000E2298();
  sub_100024920(v3);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = sub_1000E3088();
  sub_1000213F4(v6);
  sub_1000E27EC();
  uint64_t v10 = *(void *)(v1 + v2);

  return sub_1000C7E9C(v0, v7, v8, v1 + v5, v10, v1 + v9);
}

uint64_t sub_1000E1924()
{
  swift_release();
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

void sub_1000E196C(uint64_t a1)
{
  sub_1000C84D0(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void **)(v1 + 40));
}

uint64_t sub_1000E1978()
{
  uint64_t v1 = type metadata accessor for CancellableStoreKey();
  sub_100024920(v1);
  swift_release();
  swift_release();

  swift_release();
  sub_1000E2AF0();
  sub_10001DCF8();
  sub_10000E040();
  v2();
  sub_100026344();

  return _swift_deallocObject(v3, v4, v5);
}

void sub_1000E1A3C()
{
  uint64_t v2 = sub_1000E2298();
  sub_1000213F4(v2);
  uint64_t v4 = v1[2];
  uint64_t v5 = (void (*)(id, uint64_t, id))v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = v1[7];
  uint64_t v10 = (uint64_t)v1 + ((*(unsigned __int8 *)(v3 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  sub_1000C881C(v0, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_1000E1A90()
{
  sub_10000DFE0();
  uint64_t v2 = type metadata accessor for CancellableStoreKey();
  sub_100024920(v2);
  sub_1000E26A8();
  unint64_t v3 = (v1 + 23) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  sub_1000E2AF0();
  sub_10001DCF8();
  sub_10000E040();
  v4();
  swift_release();
  swift_release();

  swift_unknownObjectRelease();
  sub_10002E678();
  sub_10000DFB8();
  return _swift_deallocObject(v5, v6, v7);
}

void sub_1000E1B7C()
{
  uint64_t v2 = sub_1000E2298();
  sub_100024920(v2);
  sub_100028B48();
  unint64_t v4 = (v3 + 23) & 0xFFFFFFFFFFFFFFF8;
  sub_1000C8D10(v0, *(void *)(v1 + 16), v1 + v5, *(void *)(v1 + v6), *(void (**)(id, uint64_t, id))(v1 + v3), *(void *)(v1 + v3 + 8), *(void **)(v1 + v4), *(void *)(v1 + ((v4 + 15) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v1 + ((v4 + 15) & 0xFFFFFFFFFFFFFFF8) + 8), *(void *)(v1 + ((((v4 + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_1000E1C18()
{
  swift_unknownObjectRelease();

  swift_release();
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 96, 7);
}

uint64_t sub_1000E1C80()
{
  sub_1000E2AC0();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_10002AC58(v0);
  void *v1 = v2;
  v1[1] = sub_100048298;
  sub_1000E20B8();
  return sub_1000C938C(v3, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_1000E1D54()
{
  swift_unknownObjectRelease();
  swift_release();

  swift_release();
  swift_release();
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 88, 7);
}

uint64_t sub_1000E1DB4()
{
  sub_1000E2BCC();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_10002AC58(v0);
  void *v1 = v2;
  v1[1] = sub_100048298;
  sub_1000E20B8();
  sub_1000E21F8();
  return sub_1000CB974(v3, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t getEnumTagSinglePayload for ClientState.ResponseError(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFE && *(unsigned char *)(a1 + 17))
    {
      int v2 = *(_DWORD *)a1 + 253;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
      if (v3 <= 2) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ClientState.ResponseError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)unint64_t result = a2 - 254;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1000E1F00(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 1u) {
    return *(unsigned __int8 *)(a1 + 16);
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t sub_1000E1F18(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(void *)unint64_t result = a2 - 2;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 2;
  }
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ClientState.ResponseError()
{
  return &type metadata for ClientState.ResponseError;
}

uint64_t sub_1000E201C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1000E0824(a1, a2);
}

uint64_t sub_1000E2038@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1000E0790(a1, a2);
}

uint64_t sub_1000E2050@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1000E07C8(a1, a2);
}

uint64_t sub_1000E2068@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1000E0800(a1, a2);
}

uint64_t sub_1000E2080@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000E0878(a1, a2);
}

uint64_t sub_1000E20A0()
{
  return v0;
}

uint64_t sub_1000E20F0()
{
  return v0;
}

uint64_t sub_1000E210C()
{
  return type metadata accessor for Client();
}

uint64_t sub_1000E2134()
{
  return 0;
}

void sub_1000E2150(uint64_t a1@<X8>)
{
  *(void *)(a1 - 256) = v1;
}

uint64_t sub_1000E215C()
{
  return swift_slowAlloc();
}

uint64_t sub_1000E2174(uint64_t a1, uint64_t a2)
{
  return sub_10002A10C(a1, a2);
}

uint64_t sub_1000E218C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 72) = a2;
  return result;
}

void *sub_1000E219C@<X0>(void *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  result[4] = a3;
  result[5] = v3;
  result[9] = a2;
  return result;
}

uint64_t sub_1000E21D0()
{
  return v0;
}

uint64_t sub_1000E2220()
{
  return sub_100027BCC(v1, v0);
}

uint64_t sub_1000E2238()
{
  *(_WORD *)(v1 + 22) = 2048;
  *(void *)(v0 + 544) = *(void *)(v0 + 392);
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_1000E2274()
{
  return v0;
}

uint64_t sub_1000E2280()
{
  return type metadata accessor for PegasusContext(0);
}

uint64_t sub_1000E2298()
{
  return type metadata accessor for CancellableStoreKey();
}

uint64_t sub_1000E22B0(float a1)
{
  float *v1 = a1;
  return _convertErrorToNSError(_:)();
}

uint64_t sub_1000E22D0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_1000E0D90(v3 - 144, v3 - 112, a3);
}

uint64_t sub_1000E22E8()
{
  return *(void *)(v0 + 480);
}

uint64_t sub_1000E22FC(uint64_t a1)
{
  *(void *)(v2 + v1) = a1;
  return swift_release();
}

uint64_t sub_1000E2318(uint64_t a1)
{
  *(void *)(v1 + 544) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_1000E2344(uint64_t a1)
{
  *(void *)(v1 + 544) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_1000E2370()
{
  return v0;
}

void sub_1000E2384(uint64_t a1@<X8>)
{
  *(unsigned char *)(*(void *)(v2 - 232) + a1) = v1;
  sub_100011708();
}

double sub_1000E239C()
{
  double result = 0.0;
  *(_OWORD *)(v0 - 144) = 0u;
  *(_OWORD *)(v0 - 128) = 0u;
  return result;
}

uint64_t sub_1000E23A8()
{
  return swift_task_dealloc();
}

void sub_1000E23D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v10 - 200) = (char *)&a9 - v9;
}

uint64_t sub_1000E23E8(uint64_t a1)
{
  *(void *)(v1 - 152) = a1;
  return v1 - 152;
}

uint64_t sub_1000E23FC()
{
  return type metadata accessor for CancellableStoreKey();
}

void sub_1000E2414()
{
  uint64_t v2 = *(void **)(v0 + 16);
}

uint64_t sub_1000E2448(uint64_t a1)
{
  return a1 + 16;
}

uint64_t sub_1000E2454()
{
  return type metadata accessor for ResourceAccessSpan();
}

uint64_t sub_1000E246C()
{
  return swift_errorRetain();
}

uint64_t sub_1000E2484()
{
  return v0;
}

uint64_t sub_1000E24A4()
{
  return swift_arrayDestroy();
}

void sub_1000E24D4(uint64_t a1@<X8>)
{
  *(unsigned char *)(*(void *)(v2 + 472) + a1) = v1;
  sub_100011708();
}

uint64_t sub_1000E24EC(uint64_t a1)
{
  *(void *)(v1 + 568) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

id sub_1000E2514()
{
  return sub_1000B06A0(v0, v1, 1, v2);
}

id sub_1000E253C()
{
  uint64_t v3 = *(const char **)(v1 + 1064);
  return [v0 v3];
}

uint64_t sub_1000E2554(uint64_t a1)
{
  *(void *)(v1 - 176) = a1;
  return v1 - 176;
}

uint64_t sub_1000E2570()
{
  return *(void *)(v0 - 256);
}

uint64_t sub_1000E2588@<X0>(uint64_t a1@<X8>)
{
  return *(void *)(a1 - 256);
}

uint64_t sub_1000E2594()
{
  return v0;
}

uint64_t sub_1000E25A0()
{
  return _bridgeAnyObjectToAny(_:)();
}

uint64_t sub_1000E25B8()
{
  return *(void *)(v0 - 400);
}

uint64_t sub_1000E25C4()
{
  return v0;
}

uint64_t sub_1000E25D0()
{
  return type metadata accessor for Client();
}

uint64_t sub_1000E25E8()
{
  return type metadata accessor for SessionTokens(0);
}

uint64_t sub_1000E2600()
{
  return type metadata accessor for UserAgent();
}

void sub_1000E2628(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 216) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

void sub_1000E2644(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 + 376) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_1000E2660()
{
  return *(void *)(v0 - 360);
}

void sub_1000E266C(uint64_t a1@<X8>)
{
  *(unsigned char *)(v2 + a1) = v1;
  sub_100011708();
}

uint64_t sub_1000E2684()
{
  return swift_unknownObjectRelease();
}

uint64_t sub_1000E269C()
{
  return v0;
}

uint64_t sub_1000E26D0()
{
  return Logger.logObject.getter();
}

uint64_t sub_1000E273C()
{
  return swift_allocObject();
}

uint64_t sub_1000E2770()
{
  return swift_task_dealloc();
}

uint64_t sub_1000E2794(uint64_t a1)
{
  *(void *)(v1 - 184) = a1;
  return v1 - 184;
}

uint64_t sub_1000E27AC()
{
  return v0;
}

uint64_t sub_1000E27B8()
{
  return v0;
}

void sub_1000E27D4(uint64_t a1@<X8>)
{
  *(unsigned char *)(v2 + a1) = v1;
  sub_100011708();
}

uint64_t sub_1000E2808()
{
  return swift_unknownObjectRetain();
}

uint64_t sub_1000E2820()
{
  return swift_release();
}

BOOL sub_1000E2838(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_1000E2860()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

BOOL sub_1000E287C(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_1000E28A4()
{
  *(_WORD *)(v0 + 12) = 2085;
  return swift_bridgeObjectRetain();
}

id sub_1000E28C8(float a1)
{
  float *v2 = a1;
  return [v1 queryId];
}

uint64_t sub_1000E28EC()
{
  return swift_arrayDestroy();
}

uint64_t sub_1000E2908(uint64_t a1)
{
  *(void *)(v1 - 176) = a1;
  return v1 - 176;
}

uint64_t sub_1000E2920()
{
  *(void *)(v0 - 96) = 0;
  return swift_stdlib_random();
}

uint64_t sub_1000E293C()
{
  *(void *)(v0 - 176) = *(void *)(v0 - 312);
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_1000E297C()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_1000E29A0()
{
  return v0;
}

uint64_t sub_1000E29B0()
{
  return v0;
}

uint64_t sub_1000E29BC()
{
  return swift_arrayDestroy();
}

uint64_t sub_1000E29D4()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_1000E29EC()
{
  return type metadata accessor for URLRequest();
}

uint64_t sub_1000E2A1C(uint64_t a1)
{
  *(void *)(v1 - 112) = a1;
  return v1 - 112;
}

uint64_t sub_1000E2A34()
{
  return Publisher<>.sink(receiveValue:)();
}

uint64_t sub_1000E2A50()
{
  return v0;
}

uint64_t sub_1000E2A68(uint64_t a1, unsigned char *a2)
{
  *a2 = 1;
  return _convertErrorToNSError(_:)();
}

uint64_t sub_1000E2A84()
{
  return swift_slowAlloc();
}

uint64_t sub_1000E2AA0()
{
  return v0;
}

uint64_t sub_1000E2AD8()
{
  return swift_errorRetain();
}

uint64_t sub_1000E2AF0()
{
  return type metadata accessor for UUID();
}

void sub_1000E2B08()
{
  sub_1000F5CD0(21, v0, v2, v1);
}

uint64_t sub_1000E2B2C()
{
  return v0;
}

uint64_t sub_1000E2B44()
{
  return swift_retain();
}

uint64_t sub_1000E2B5C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_10002572C(a3);
}

uint64_t sub_1000E2B78()
{
  return swift_release();
}

void sub_1000E2B90(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  _os_log_impl(a1, a2, a3, a4, v4, 0xCu);
}

void sub_1000E2BB4()
{
  uint64_t v2 = *(void **)(v0 - 280);
}

void sub_1000E2BD8(uint64_t a1@<X8>)
{
  *(unsigned char *)(v2 + a1) = v1;
  sub_100011708();
}

void sub_1000E2BF0(uint64_t a1@<X8>)
{
  *(unsigned char *)(*(void *)(v2 - 136) + a1) = v1;
  sub_100011708();
}

uint64_t sub_1000E2C08()
{
  return v0;
}

uint64_t sub_1000E2C20()
{
  return v0;
}

uint64_t sub_1000E2C2C(uint64_t a1, uint64_t a2)
{
  return a2;
}

void sub_1000E2C40(uint64_t a1@<X8>)
{
  *(unsigned char *)(v1 + a1) = 48;
}

void sub_1000E2C4C(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  _os_log_impl(a1, a2, a3, a4, v4, 0x16u);
}

uint64_t sub_1000E2C78()
{
  return swift_release_n();
}

uint64_t sub_1000E2CB0(uint64_t result)
{
  *(void *)(result + 16) = v1;
  return result;
}

uint64_t sub_1000E2CBC()
{
  return 0;
}

uint64_t sub_1000E2CD4()
{
  return v0;
}

uint64_t sub_1000E2CE8()
{
  return swift_task_alloc();
}

uint64_t sub_1000E2D08()
{
  return type metadata accessor for UserAgent();
}

uint64_t sub_1000E2D48(uint64_t a1)
{
  *(void *)(v1 + 568) = a1;
  return v1 + 568;
}

uint64_t sub_1000E2D5C(uint64_t result)
{
  *(void *)(v1 - 192) = result;
  return result;
}

uint64_t sub_1000E2D68(uint64_t a1, void (*a2)(void))
{
  uint64_t v4 = *(void *)(v2 - 272);
  return sub_100027C24(v4, a2);
}

uint64_t sub_1000E2D80(uint64_t a1, unint64_t a2)
{
  return sub_10001C274(a1, a2, (uint64_t *)(v2 - 96));
}

uint64_t sub_1000E2DA4()
{
  return *(void *)(v0 - 344);
}

uint64_t sub_1000E2DBC(uint64_t a1)
{
  *(void *)(v1 - 176) = a1;
  return v1 - 176;
}

void sub_1000E2DD0(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  _os_log_impl(a1, a2, a3, a4, v4, 0xCu);
}

uint64_t sub_1000E2DE8(uint64_t a1)
{
  return sub_10002538C(v1, 0, 1, a1);
}

uint64_t sub_1000E2E40()
{
  return v0;
}

void sub_1000E2E4C(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

uint64_t sub_1000E2E6C()
{
  return swift_arrayDestroy();
}

uint64_t sub_1000E2E84()
{
  return swift_bridgeObjectRelease_n();
}

void sub_1000E2E9C()
{
  uint64_t v2 = *(void **)(v0 - 448);
}

void sub_1000E2EC0()
{
  sub_1000E08D0(v0, 1);
}

uint64_t sub_1000E2EF0()
{
  return v0;
}

uint64_t sub_1000E2F08@<X0>(uint64_t a1@<X8>)
{
  return *(void *)(a1 - 256);
}

void sub_1000E2F14(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0x16u);
}

uint64_t sub_1000E2F34()
{
  return swift_release_n();
}

uint64_t sub_1000E2F4C()
{
  return v0;
}

void sub_1000E2F58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v10 + 392) = (char *)&a9 - v9;
}

uint64_t sub_1000E2F78()
{
  return *(void *)(v0 - 392);
}

uint64_t sub_1000E2FF8(uint64_t a1)
{
  *(void *)(v1 - 160) = a1;
  return v1 - 160;
}

uint64_t sub_1000E3018()
{
  return v0;
}

uint64_t sub_1000E3024()
{
  return swift_errorRelease();
}

uint64_t sub_1000E303C()
{
  return swift_retain();
}

uint64_t sub_1000E3054()
{
  return swift_dynamicCast();
}

uint64_t sub_1000E3074()
{
  return 0;
}

uint64_t sub_1000E3088()
{
  return type metadata accessor for UserAgent();
}

uint64_t sub_1000E30A8()
{
  return v0;
}

void sub_1000E30B4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 2;
}

uint64_t sub_1000E30D4()
{
  return *(void *)(v0 - 256);
}

void sub_1000E30E8()
{
  *(_WORD *)(v0 + 32) = 2050;
}

uint64_t sub_1000E3100()
{
  return sub_100073698(v0);
}

uint64_t sub_1000E310C()
{
  return swift_initClassMetadata2();
}

id sub_1000E315C()
{
  id v1 = [v0 response];

  return v1;
}

uint64_t sub_1000E3194()
{
  sub_100017E10();
  swift_unknownObjectRelease();
  sub_100017E10();
  swift_errorRelease();
  sub_100017E10();

  return swift_unknownObjectRelease();
}

uint64_t sub_1000E31FC()
{
  sub_100017E10();
  if ((*(unsigned char *)(v0 + *(void *)(v1 + 120)) & 1) == 0) {
    sub_1000E3CA4();
  }
  uint64_t v2 = sub_1000FF328();
  swift_unknownObjectRelease();
  sub_100023E18();
  swift_errorRelease();
  sub_100023E18();
  swift_unknownObjectRelease();
  return v2;
}

uint64_t sub_1000E328C()
{
  uint64_t v0 = sub_1000E31FC();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v1, v2);
}

uint64_t type metadata accessor for NetworkSpan()
{
  return sub_100040C54();
}

uint64_t sub_1000E32F8()
{
  sub_100017E10();
  uint64_t v2 = *(void *)(v0 + *(void *)(v1 + 128));
  static os_log_type_t.error.getter();
  os_log(_:dso:log:type:_:)();
  sub_1000FF494();
  static os_log_type_t.error.getter();
  uint64_t v3 = sub_10002572C((uint64_t *)&unk_10021BB00);
  uint64_t v4 = sub_10002C214();
  *(_OWORD *)(v4 + 16) = xmmword_1001A2A20;
  uint64_t v5 = *(void *)(v0 + *(void *)(*(void *)v0 + 464) + 8);
  swift_unknownObjectRetain();
  sub_10002572C(&qword_10021E020);
  uint64_t v6 = String.init<A>(describing:)();
  uint64_t v8 = v7;
  *(void *)(v4 + 56) = &type metadata for String;
  unint64_t v9 = sub_1000303C8();
  *(void *)(v4 + 64) = v9;
  *(void *)(v4 + 32) = v6;
  *(void *)(v4 + 40) = v8;
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  static os_log_type_t.error.getter();
  uint64_t v121 = v3;
  uint64_t v10 = (__n128 *)sub_10002C214();
  sub_100024AD0(v10, v11, v12, v13, v14, v15, v16, v17, v97, v103, v109, v116, v121, v127, v18);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v110 = v5;
  uint64_t v19 = v5;
  id v20 = *(void (**)(uint64_t, uint64_t))(v5 + 16);
  v20(ObjectType, v19);
  sub_10002572C(&qword_10021D568);
  uint64_t v21 = String.init<A>(describing:)();
  v10[3].n128_u64[1] = (unint64_t)&type metadata for String;
  v10[4].n128_u64[0] = v9;
  v10[2].n128_u64[0] = v21;
  v10[2].n128_u64[1] = v22;
  uint64_t v128 = v2;
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  uint64_t v23 = sub_1000E37B4();
  if (v26)
  {
    static os_log_type_t.error.getter();
    uint64_t v73 = (__n128 *)sub_10002C214();
    __n128 v82 = sub_100024AD0(v73, v74, v75, v76, v77, v78, v79, v80, v98, ObjectType, v110, v9, v122, v2, v81);
    ((void (*)(uint64_t, uint64_t, __n128))v20)(v108, v115, v82);
    uint64_t v83 = String.init<A>(describing:)();
    uint64_t v72 = v120;
    v73[3].n128_u64[1] = (unint64_t)&type metadata for String;
    v73[4].n128_u64[0] = v120;
    v73[2].n128_u64[0] = v83;
    v73[2].n128_u64[1] = v84;
    os_log(_:dso:log:type:_:)();
  }
  else
  {
    uint64_t v27 = v24;
    int v28 = v25;
    unint64_t v29 = HIDWORD(v25);
    uint64_t v111 = v23;
    static os_log_type_t.error.getter();
    uint64_t v30 = (__n128 *)sub_10002C214();
    sub_100024AD0(v30, v31, v32, v33, v34, v35, v36, v37, v98, ObjectType, v111, v9, v122, v128, v38);
    v39[7] = v40;
    v39[8] = &protocol witness table for Int;
    v39[4] = v27;
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();
    static os_log_type_t.error.getter();
    id v41 = (__n128 *)sub_10002C214();
    sub_100024AD0(v41, v42, v43, v44, v45, v46, v47, v48, v99, v105, v112, v117, v123, v129, v49);
    *(void *)(v50 + 56) = &type metadata for UInt32;
    *(void *)(v50 + 64) = &protocol witness table for UInt32;
    *(_DWORD *)(v50 + 32) = v29;
    sub_10002710C();
    swift_bridgeObjectRelease();
    static os_log_type_t.error.getter();
    uint64_t v51 = (__n128 *)sub_10002C214();
    sub_100024AD0(v51, v52, v53, v54, v55, v56, v57, v58, v100, v106, v113, v118, v124, v130, v59);
    *(void *)(v60 + 56) = &type metadata for UInt32;
    *(void *)(v60 + 64) = &protocol witness table for UInt32;
    *(_DWORD *)(v60 + 32) = v28;
    sub_10002710C();
    swift_bridgeObjectRelease();
    static os_log_type_t.error.getter();
    uint64_t v61 = (__n128 *)sub_10002C214();
    sub_100024AD0(v61, v62, v63, v64, v65, v66, v67, v68, v101, v107, v114, v119, v125, v131, v69);
    v70[7] = v71;
    v70[8] = &protocol witness table for Double;
    v70[4] = v115;
    os_log(_:dso:log:type:_:)();
    uint64_t v72 = v120;
  }
  swift_bridgeObjectRelease();
  static os_log_type_t.error.getter();
  char v85 = (__n128 *)sub_10002C214();
  sub_100024AD0(v85, v86, v87, v88, v89, v90, v91, v92, v102, v108, v115, v120, v126, v132, v93);
  swift_errorRetain();
  sub_10002572C(&qword_100220510);
  uint64_t v94 = String.init<A>(describing:)();
  v85[3].n128_u64[1] = (unint64_t)&type metadata for String;
  v85[4].n128_u64[0] = v72;
  v85[2].n128_u64[0] = v94;
  v85[2].n128_u64[1] = v95;
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  static os_log_type_t.error.getter();
  return os_log(_:dso:log:type:_:)();
}

uint64_t sub_1000E37B4()
{
  sub_100017E10();
  uint64_t v2 = *(void *)(v0 + *(void *)(v1 + 464) + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 16);
  uint64_t v5 = v4(ObjectType, v2);
  if (!v5) {
    goto LABEL_7;
  }
  uint64_t v6 = (void *)v5;
  self;
  uint64_t v7 = (void *)swift_dynamicCastObjCClass();
  if (!v7)
  {

LABEL_7:
    sub_10002572C((uint64_t *)&unk_10021BB00);
    uint64_t v16 = sub_10002C214();
    *(_OWORD *)(v16 + 16) = xmmword_1001A2A20;
    uint64_t v73 = v4(ObjectType, v2);
    sub_10002572C(&qword_10021D568);
    uint64_t v17 = String.init<A>(describing:)();
    uint64_t v19 = v18;
    *(void *)(v16 + 56) = &type metadata for String;
    *(void *)(v16 + 64) = sub_1000303C8();
    *(void *)(v16 + 32) = v17;
    *(void *)(v16 + 40) = v19;
    sub_100017F30((uint64_t)"UNIDENTIFIED_RESPONSE_TYPE=%{signpost.description:attribute,public}s");
    swift_bridgeObjectRelease();
    sub_1000FF9C0();
    *(double *)&uint64_t result = 0.0;
    return result;
  }
  [v7 statusCode];
  if (!(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(ObjectType, v2))
  {

    *(double *)&uint64_t result = 0.0;
    return result;
  }
  *(void *)&long long v78 = 0xD000000000000021;
  *((void *)&v78 + 1) = 0x80000001001B3A50;
  uint64_t v8 = AnyHashable.init<A>(_:)();
  sub_100025A6C(v8, v9, v10, v11, v12, v13, v14, v15, v54, v58, v62, v64, v69, v73, v74, v75, v76, v77, v78);
  sub_100039C5C((uint64_t)&v73);
  if (v79) {
    sub_100026A34();
  }
  else {
    sub_100039CB0((uint64_t)&v78);
  }
  *(void *)&long long v78 = 0xD00000000000001DLL;
  *((void *)&v78 + 1) = 0x80000001001B3A30;
  uint64_t v21 = AnyHashable.init<A>(_:)();
  sub_100025A6C(v21, v22, v23, v24, v25, v26, v27, v28, v55, v59, v63, v65, v70, v73, v74, v75, v76, v77, v78);
  sub_100039C5C((uint64_t)&v73);
  if (v79) {
    sub_100026A34();
  }
  else {
    sub_100039CB0((uint64_t)&v78);
  }
  uint64_t v29 = AnyHashable.init<A>(_:)();
  sub_100025A6C(v29, v30, v31, v32, v33, v34, v35, v36, v56, 0xD00000000000001BLL, 0x80000001001B3AF0, v66, v71, v73, v74, v75, v76, v77, v78);
  sub_100039C5C((uint64_t)&v73);
  if (v79)
  {
    if (sub_100026A34())
    {
      uint64_t v68 = v60;
      goto LABEL_19;
    }
  }
  else
  {
    sub_100039CB0((uint64_t)&v78);
  }
  uint64_t v37 = AnyHashable.init<A>(_:)();
  sub_100025A6C(v37, v38, v39, v40, v41, v42, v43, v44, v57, 0xD00000000000001BLL, 0x80000001001B38B0, v67, v72, v73, v74, v75, v76, v77, v78);
  sub_100039C5C((uint64_t)&v73);
  if (!v79)
  {
    sub_100039CB0((uint64_t)&v78);
    goto LABEL_23;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_23:
    swift_bridgeObjectRelease();

    goto LABEL_25;
  }
LABEL_19:
  double v45 = *(double *)&v68;
  uint64_t v46 = AnyHashable.init<A>(_:)();
  sub_100025A6C(v46, v47, v48, v49, v50, v51, v52, v53, v57, 0xD00000000000001ALL, 0x80000001001B3930, v68, v72, v73, v74, v75, v76, v77, v78);
  swift_bridgeObjectRelease();

  sub_100039C5C((uint64_t)&v73);
  if (v79)
  {
    if (sub_100026A34())
    {
      *(double *)&uint64_t result = v61 - v45;
      return result;
    }
  }
  else
  {
    sub_100039CB0((uint64_t)&v78);
  }
LABEL_25:
  *(double *)&uint64_t result = 0.0;
  return result;
}

uint64_t sub_1000E3BBC(uint64_t a1, unint64_t a2, double a3)
{
  int v3 = a2;
  unint64_t v6 = HIDWORD(a2);
  sub_10002572C((uint64_t *)&unk_10021BB00);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1001A3750;
  *(void *)(v7 + 56) = &type metadata for Int;
  *(void *)(v7 + 64) = &protocol witness table for Int;
  *(void *)(v7 + 32) = a1;
  *(void *)(v7 + 96) = &type metadata for UInt32;
  *(void *)(v7 + 104) = &protocol witness table for UInt32;
  *(_DWORD *)(v7 + 72) = v3;
  *(void *)(v7 + 136) = &type metadata for UInt32;
  *(void *)(v7 + 144) = &protocol witness table for UInt32;
  *(_DWORD *)(v7 + 112) = v6;
  *(void *)(v7 + 176) = &type metadata for Double;
  *(void *)(v7 + 184) = &protocol witness table for Double;
  *(double *)(v7 + 152) = a3;
  sub_100100328("statusCode=%{signpost.description:attribute,public}d, download=%{signpost.description:attribute}lu, upload=%{signpost.description:attribute}lu, runtime=%{signpost.description:attribute}f", 186, 2, v7);

  return swift_bridgeObjectRelease();
}

void sub_1000E3CA4()
{
  sub_100017E10();
  if ((*(unsigned char *)(v0 + *(void *)(v1 + 120)) & 1) == 0)
  {
    sub_1000E37B4();
    if (v2)
    {
      sub_10002572C((uint64_t *)&unk_10021BB00);
      uint64_t v6 = sub_10002C214();
      *(_OWORD *)(v6 + 16) = xmmword_1001A2A20;
      sub_100023E18();
      uint64_t v8 = *(void *)(v0 + *(void *)(v7 + 464) + 8);
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v8 + 16))(ObjectType, v8);
      sub_10002572C(&qword_10021D568);
      uint64_t v10 = String.init<A>(describing:)();
      uint64_t v12 = v11;
      *(void *)(v6 + 56) = &type metadata for String;
      *(void *)(v6 + 64) = sub_1000303C8();
      *(void *)(v6 + 32) = v10;
      *(void *)(v6 + 40) = v12;
      sub_100017F30((uint64_t)"UNIDENTIFIED_RESPONSE_TYPE=%{signpost.description:attribute,public}s");
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_100023E18();
      (*(void (**)(uint64_t, uint64_t))(v3 + 568))(v4, v5);
    }
    sub_1000FF9C0();
  }
}

uint64_t sub_1000E3DE0()
{
  return sub_1000FFDA8((void (*)(void))sub_1000E4110);
}

uint64_t sub_1000E3E20(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  if (*(void *)(a1 + *(void *)(*(void *)a1 + 480)))
  {
    swift_unknownObjectRetain();
    if (nw_activity_is_activated())
    {
      nw_activity_complete_with_reason();
    }
    else
    {
      static os_log_type_t.info.getter();
      sub_10002572C((uint64_t *)&unk_10021BB00);
      uint64_t v3 = swift_allocObject();
      *(_OWORD *)(v3 + 16) = xmmword_1001A2A20;
      swift_unknownObjectRetain();
      sub_10002572C(&qword_10021E008);
      uint64_t v4 = String.init<A>(describing:)();
      uint64_t v6 = v5;
      *(void *)(v3 + 56) = &type metadata for String;
      *(void *)(v3 + 64) = sub_1000303C8();
      *(void *)(v3 + 32) = v4;
      *(void *)(v3 + 40) = v6;
      os_log(_:dso:log:type:_:)();
      swift_bridgeObjectRelease();
    }
    a1 = swift_unknownObjectRelease();
  }
  return a2(a1);
}

uint64_t sub_1000E3F94(uint64_t a1, unint64_t a2, double a3)
{
  unint64_t v6 = HIDWORD(a2);
  sub_10002572C(&qword_10021E000);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1001A3750;
  *(void *)(inited + 32) = 0x635F737574617473;
  *(void *)(inited + 40) = 0xEB0000000065646FLL;
  *(void *)(inited + 48) = [objc_allocWithZone((Class)NSNumber) initWithInteger:a1];
  *(void *)(inited + 56) = 0x656D69746E7572;
  *(void *)(inited + 64) = 0xE700000000000000;
  *(void *)(inited + 72) = [objc_allocWithZone((Class)NSNumber) initWithDouble:a3];
  *(void *)(inited + 80) = 0xD000000000000010;
  *(void *)(inited + 88) = 0x80000001001B6CA0;
  *(void *)(inited + 96) = [objc_allocWithZone((Class)NSNumber) initWithUnsignedInt:a2];
  strcpy((char *)(inited + 104), "uploaded_bytes");
  *(unsigned char *)(inited + 119) = -18;
  *(void *)(inited + 120) = [objc_allocWithZone((Class)NSNumber) initWithUnsignedInt:v6];
  sub_10002FF38();
  return Dictionary.init(dictionaryLiteral:)();
}

uint64_t sub_1000E4110()
{
  return sub_1000E3E20(*(void *)(v0 + 16), *(uint64_t (**)(uint64_t))(v0 + 24));
}

uint64_t sub_1000E411C(uint64_t a1)
{
  uint64_t v1 = a1 + 56;
  uint64_t v2 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v3 = -1;
  if (v2 < 64) {
    uint64_t v3 = ~(-1 << v2);
  }
  uint64_t v4 = v3 & *(void *)(a1 + 56);
  int64_t v5 = (unint64_t)(v2 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v7 = 0;
  if (!v4) {
    goto LABEL_5;
  }
LABEL_4:
  for (v4 &= v4 - 1; ; uint64_t v4 = (v9 - 1) & v9)
  {
    swift_bridgeObjectRetain();
    sub_1000E45A4();
    uint64_t result = swift_bridgeObjectRelease();
    if (v4) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v8 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v8 >= v5) {
      goto LABEL_23;
    }
    uint64_t v9 = *(void *)(v1 + 8 * v8);
    ++v7;
    if (!v9)
    {
      int64_t v7 = v8 + 1;
      if (v8 + 1 >= v5) {
        goto LABEL_23;
      }
      uint64_t v9 = *(void *)(v1 + 8 * v7);
      if (!v9)
      {
        int64_t v7 = v8 + 2;
        if (v8 + 2 >= v5) {
          goto LABEL_23;
        }
        uint64_t v9 = *(void *)(v1 + 8 * v7);
        if (!v9)
        {
          int64_t v7 = v8 + 3;
          if (v8 + 3 >= v5) {
            goto LABEL_23;
          }
          uint64_t v9 = *(void *)(v1 + 8 * v7);
          if (!v9) {
            break;
          }
        }
      }
    }
LABEL_20:
    ;
  }
  int64_t v10 = v8 + 4;
  if (v10 >= v5)
  {
LABEL_23:
    swift_release();
    return swift_release();
  }
  uint64_t v9 = *(void *)(v1 + 8 * v10);
  if (v9)
  {
    int64_t v7 = v10;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v7 = v10 + 1;
    if (__OFADD__(v10, 1)) {
      break;
    }
    if (v7 >= v5) {
      goto LABEL_23;
    }
    uint64_t v9 = *(void *)(v1 + 8 * v7);
    ++v10;
    if (v9) {
      goto LABEL_20;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_1000E42A0()
{
  swift_beginAccess();
  return *(void *)(v0 + 24);
}

uint64_t sub_1000E42D4()
{
  return 0x200000;
}

uint64_t sub_1000E42DC()
{
  swift_beginAccess();
  uint64_t v1 = v0[2];
  if (v1)
  {
    *(void *)(v1 + 16) = 0;
    swift_release();
    *(void *)(v1 + 24) = 0;
    swift_release();
  }
  v0[3] = 0;
  uint64_t v2 = swift_endAccess();
  v0[4] = 0;
  return (*(uint64_t (**)(uint64_t))(*v0 + 248))(v2);
}

uint64_t sub_1000E4368(uint64_t a1)
{
  return sub_1000E411C(a1);
}

void sub_1000E43B0()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  swift_retain();
  sub_100096918();
  uint64_t v4 = v3;
  if (!v2)
  {
    swift_release();
    swift_bridgeObjectRelease();
    return;
  }
  if (v1)
  {
    uint64_t v5 = *(void *)(v3 + 16);
    if (!v5)
    {
      swift_retain_n();
      goto LABEL_15;
    }
    uint64_t v6 = *(void *)(v1 + 16);
    swift_retain_n();
    if (v6)
    {
      do
      {
        while (1)
        {
          sub_1000E4DD0(v4);
          swift_retain();
          swift_release();
          uint64_t v7 = sub_1000E4E18();
          uint64_t v8 = *(void *)(v6 + 32);
          swift_retain();
          swift_release();
          if (v8 < v5) {
            break;
          }
          swift_release();
          uint64_t v6 = *(void *)(v7 + 16);
          if (!v6) {
            goto LABEL_13;
          }
        }
        swift_release();
        uint64_t v6 = *(void *)(v7 + 16);
      }
      while (v6);
    }
    else
    {
      uint64_t v7 = v1;
    }
LABEL_13:
    uint64_t v9 = *(void *)(v7 + 24);
    if (v9)
    {
      if ((sub_1000EB0C0(v4, *(void *)(v9 + 16)) & 1) == 0)
      {
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_17;
      }
LABEL_15:
      uint64_t v10 = swift_retain();
      sub_1000972FC(v10, v1, v2, sub_1000E5128);
      swift_release();
      swift_bridgeObjectRelease();
      swift_release_n();
LABEL_17:
      swift_release();
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

unint64_t sub_1000E45A4()
{
  sub_10002AD10();
  if (*(uint64_t *)(v0 + 24) < 1) {
    return swift_endAccess();
  }
  sub_100096918();
  uint64_t v2 = sub_1000E4878(v1);
  swift_endAccess();
  unint64_t result = swift_bridgeObjectRelease();
  if (v2)
  {
    unint64_t result = sub_10010B444();
    unint64_t v4 = result + 1024;
    if (result >= 0xFFFFFFFFFFFFFC00)
    {
      __break(1u);
    }
    else
    {
      unint64_t v5 = *(void *)(v0 + 32);
      BOOL v6 = v5 >= v4;
      unint64_t v7 = v5 - v4;
      if (v6)
      {
        *(void *)(v0 + 32) = v7;
        uint64_t v8 = sub_100026A54();
        v9(v8);
        return swift_release();
      }
    }
    __break(1u);
  }
  return result;
}

void sub_1000E4684(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10010B444();
  uint64_t v6 = v1[4];
  BOOL v7 = __CFADD__(v6, v5);
  unint64_t v8 = v6 + v5;
  if (v7)
  {
    __break(1u);
    goto LABEL_14;
  }
  unint64_t v2 = v5;
  if (v8 < 0x200000) {
    goto LABEL_10;
  }
  if (qword_100218B68 != -1) {
    goto LABEL_16;
  }
  while (1)
  {
    uint64_t v9 = type metadata accessor for Logger();
    sub_10002A10C(v9, (uint64_t)qword_100236A50);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "!!! exceeded max cost, flushing cache !!!", v12, 2u);
      swift_slowDealloc();
    }

    uint64_t v13 = v3[4];
    BOOL v7 = __CFADD__(v13, v2);
    unint64_t v14 = v13 + v2;
    if (v7) {
      break;
    }
    BOOL v7 = v14 >= 0x200000;
    unint64_t v15 = v14 - 0x200000;
    if (!v7) {
      goto LABEL_18;
    }
    (*(void (**)(unint64_t))(*v3 + 264))(v15 + 1);
LABEL_10:
    sub_10002AD10();
    sub_100096918();
    sub_1000E4A08(v16, a1, 1);
    swift_endAccess();
    swift_bridgeObjectRelease();
    unint64_t v17 = v2 + 1024;
    if (v2 >= 0xFFFFFFFFFFFFFC00)
    {
LABEL_14:
      __break(1u);
    }
    else
    {
      uint64_t v18 = v3[4];
      BOOL v7 = __CFADD__(v18, v17);
      uint64_t v19 = v18 + v17;
      if (!v7)
      {
        v3[4] = v19;
        uint64_t v20 = sub_100026A54();
        v21(v20);
        return;
      }
    }
    __break(1u);
LABEL_16:
    swift_once();
  }
  __break(1u);
LABEL_18:
  __break(1u);
}

uint64_t sub_1000E4878(uint64_t a1)
{
  uint64_t v2 = *v1;
  if (!*v1) {
    return 0;
  }
  uint64_t v3 = v1;
  uint64_t v5 = *(void *)(v2 + 16);
  swift_retain();
  uint64_t v6 = 0;
  if (v5)
  {
    do
    {
      uint64_t v6 = v2;
      sub_1000E4DD0(a1);
      swift_retain();
      swift_release();
      uint64_t v2 = sub_1000E4E18();
      swift_release();
    }
    while (*(void *)(v2 + 16));
  }
  uint64_t v7 = *(void *)(v2 + 24);
  if (!v7 || !sub_10004699C(*(void *)(v7 + 16), a1))
  {
    swift_release();
    swift_release();
    return 0;
  }
  uint64_t v8 = *(void *)(v7 + 24);
  if (v6)
  {
    uint64_t v9 = *(void *)(v6 + 16);
    if (v9)
    {
      uint64_t v9 = sub_1000E4E18();
      uint64_t v10 = swift_retain();
    }
    else
    {
      uint64_t v10 = 0;
    }
    *(void *)(v6 + 16) = v10;
    swift_retain();
    swift_release();
    if (v9)
    {
      uint64_t v12 = *(void *)(v9 + 24);
      swift_retain();
      swift_release();
    }
    else
    {
      uint64_t v12 = 0;
    }
    *(void *)(v6 + 24) = v12;
    swift_release();
  }
  else
  {
    *(void *)(v2 + 24) = 0;
    swift_retain();
  }
  swift_release();
  uint64_t result = swift_release();
  uint64_t v13 = v3[1];
  BOOL v14 = __OFSUB__(v13, 1);
  uint64_t v15 = v13 - 1;
  if (!v14)
  {
    v3[1] = v15;
    return v8;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000E4A08(uint64_t result, uint64_t a2, char a3)
{
  unint64_t v4 = v3;
  uint64_t v6 = result;
  uint64_t v7 = v3[1];
  if (!v7)
  {
    sub_10002572C(&qword_10021E188);
    uint64_t v23 = swift_allocObject();
    *(void *)(v23 + 16) = v6;
    *(void *)(v23 + 24) = a2;
    sub_10002572C(&qword_10021E190);
    swift_allocObject();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v24 = sub_1000E4F78(v23);
    swift_release();
    uint64_t result = 1;
    *unint64_t v4 = v24;
    v4[1] = 1;
    return result;
  }
  uint64_t v8 = *v3;
  if (!*v3)
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    return result;
  }
  uint64_t v10 = *(void *)(v8 + 16);
  uint64_t result = swift_retain();
  uint64_t v11 = v8;
  if (v10)
  {
    do
    {
      sub_1000E4DD0(v6);
      swift_retain();
      swift_release();
      uint64_t v11 = sub_1000E4E18();
      uint64_t result = swift_release();
    }
    while (*(void *)(v11 + 16));
  }
  uint64_t v12 = *(void *)(v11 + 24);
  if (!v12) {
    goto LABEL_25;
  }
  uint64_t v13 = sub_1000E4E54(v6);
  if (v13 != -1)
  {
    uint64_t v15 = v13;
    unsigned __int8 v16 = v14;
    int v17 = (v14 >> 8) & 1;
    sub_10002572C(&qword_10021E180);
    swift_allocObject();
    uint64_t v18 = sub_1000E4D44(v15, v16, v17);
    sub_1000E4DD0(v6);
    uint64_t v19 = sub_1000E4E18();
    sub_10002572C(&qword_10021E188);
    uint64_t v20 = swift_allocObject();
    *(void *)(v20 + 16) = v6;
    *(void *)(v20 + 24) = a2;
    *(void *)(v19 + 24) = v20;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_release();
    swift_release();
    uint64_t v21 = *(void *)(v8 + 16);
    swift_retain();
    for (; v21; uint64_t v21 = *(void *)(v8 + 16))
    {
      uint64_t v22 = *(void *)(v21 + 32);
      if (v15 < v22 || v22 == v15 && *(unsigned __int8 *)(v21 + 40) < v16) {
        break;
      }
      sub_1000E4DD0(v6);
      swift_retain();
      swift_release();
      uint64_t v8 = sub_1000E4E18();
      swift_release();
    }
    swift_release();
    uint64_t v25 = *(void *)(v8 + 16);
    uint64_t v26 = sub_1000E4E18();
    if (v25)
    {
      *(void *)(v26 + 16) = v25;
      swift_retain();
      swift_release();
    }
    else
    {
      *(void *)(v26 + 24) = *(void *)(v8 + 24);
      swift_retain();
      swift_release();
      swift_release();
      *(void *)(v8 + 24) = 0;
    }
    swift_release();
    *(void *)(v8 + 16) = v18;
    swift_release();
    uint64_t result = swift_release();
    if (!__OFADD__(v7, 1))
    {
      v4[1] = v7 + 1;
      return 1;
    }
    __break(1u);
    goto LABEL_24;
  }
  if (a3)
  {
    swift_retain();
    swift_release();
    *(void *)(v12 + 24) = a2;
    swift_retain();
    swift_release();
    swift_release();
    return 1;
  }
  swift_release();
  return 0;
}

uint64_t sub_1000E4D44(uint64_t a1, char a2, char a3)
{
  sub_10002572C(&qword_10021E190);
  swift_allocObject();
  *(void *)(v3 + 16) = sub_100096D1C();
  swift_allocObject();
  *(void *)(v3 + 24) = sub_100096D1C();
  *(void *)(v3 + 32) = a1;
  *(unsigned char *)(v3 + 40) = a2;
  *(unsigned char *)(v3 + 41) = a3;
  return v3;
}

BOOL sub_1000E4DD0(BOOL result)
{
  uint64_t v2 = *(void *)(v1 + 32);
  if (v2 >= *(void *)(result + 16)) {
    return 0;
  }
  if ((v2 & 0x8000000000000000) == 0) {
    return (*(unsigned char *)(v1 + 40) & *(unsigned char *)(result + v2 + 32)) != 0 || *(unsigned char *)(v1 + 41) == 1;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000E4E18()
{
  return swift_retain();
}

uint64_t sub_1000E4E30(int a1)
{
  unsigned int v1 = a1 | ((a1 & 0xFE) >> 1) | (((a1 | ((a1 & 0xFE) >> 1)) & 0xFCu) >> 2);
  return (v1 | ((v1 & 0xF0) >> 4)) & ~(((v1 | ((v1 & 0xF0) >> 4)) & 0xFE) >> 1);
}

uint64_t sub_1000E4E54(uint64_t result)
{
  uint64_t v2 = *(void *)(v1 + 16);
  unint64_t v3 = *(void *)(v2 + 16);
  unint64_t v4 = *(void *)(result + 16);
  if (v4 >= v3) {
    uint64_t v5 = *(void *)(v2 + 16);
  }
  else {
    uint64_t v5 = *(void *)(result + 16);
  }
  if (!v5) {
    goto LABEL_7;
  }
  int v6 = *(unsigned __int8 *)(result + 32);
  int v7 = *(unsigned __int8 *)(v2 + 32);
  if (v6 != v7)
  {
    uint64_t v5 = 0;
    goto LABEL_10;
  }
  if (v5 == 1)
  {
LABEL_7:
    if (v3 >= v4)
    {
      if (v4 >= v3) {
        return -1;
      }
      uint64_t v8 = v2 + v5;
    }
    else
    {
      uint64_t v8 = result + v5;
    }
    int v9 = *(unsigned __int8 *)(v8 + 32);
LABEL_14:
    sub_1000E4E30(v9);
    return v5;
  }
  if (v4 < 2)
  {
LABEL_29:
    __break(1u);
  }
  else if (v3 >= 2)
  {
    int v6 = *(unsigned __int8 *)(result + 33);
    int v7 = *(unsigned __int8 *)(v2 + 33);
    if (v6 == v7)
    {
      uint64_t v10 = 0;
      while (v5 - 2 != v10)
      {
        if (v4 - 2 == v10)
        {
          __break(1u);
LABEL_28:
          __break(1u);
          goto LABEL_29;
        }
        if (v3 - 2 == v10) {
          goto LABEL_28;
        }
        int v6 = *(unsigned __int8 *)(result + 34 + v10);
        int v7 = *(unsigned __int8 *)(v2 + 34 + v10++);
        if (v6 != v7)
        {
          uint64_t v5 = v10 + 1;
          goto LABEL_10;
        }
      }
      goto LABEL_7;
    }
    uint64_t v5 = 1;
LABEL_10:
    int v9 = v7 ^ v6;
    goto LABEL_14;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000E4F78(uint64_t a1)
{
  *(void *)(v1 + 16) = 0;
  *(void *)(v1 + 24) = a1;
  swift_release();
  return v1;
}

uint64_t sub_1000E4FA0()
{
  swift_release();

  return _swift_deallocClassInstance(v0, 40, 7);
}

uint64_t type metadata accessor for QCCritbit()
{
  return self;
}

uint64_t sub_1000E4FFC()
{
  return sub_1000E42A0();
}

uint64_t sub_1000E5020()
{
  return *(void *)(*(void *)v0 + 32);
}

uint64_t sub_1000E502C()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 200))();
}

uint64_t sub_1000E5070()
{
  return sub_1000E42DC();
}

uint64_t sub_1000E5094(uint64_t a1)
{
  return sub_1000E4368(a1);
}

uint64_t sub_1000E50B8()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 216))();
}

uint64_t sub_1000E50FC()
{
  return (*(uint64_t (**)(void))(v0 + 16))() & 1;
}

uint64_t sub_1000E5128(uint64_t a1, uint64_t a2, void *a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(v3 + 16))(a1, a2, *a3) & 1;
}

id sub_1000E515C(void *a1, uint64_t a2)
{
  id v4 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) initWithFeedback:a1];
  id v5 = v4;
  [v5 setQueryId:a2];

  return v4;
}

void *sub_1000E51DC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_10002572C(&qword_10021BB20);
  __chkstk_darwin(v3 - 8);
  sub_10000DFD0();
  uint64_t v6 = v5 - v4;
  uint64_t v7 = type metadata accessor for URL();
  sub_100020C48();
  uint64_t v24 = v8;
  __chkstk_darwin(v9);
  sub_10000DFD0();
  uint64_t v23 = v11 - v10;
  v2[3] = 0;
  swift_unknownObjectWeakInit();
  sub_10005B134();
  type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  sub_100020C48();
  __chkstk_darwin(v12);
  sub_10000DFD0();
  (*(void (**)(uint64_t, void))(v15 + 104))(v14 - v13, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:));
  uint64_t v16 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v16 - 8);
  sub_10000DFD0();
  static DispatchQoS.unspecified.getter();
  uint64_t v17 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v17);
  sub_10000DFD0();
  sub_1000E5FD0();
  sub_10002572C(&qword_10021A2E0);
  sub_1000E6014();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v18 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  v2[5] = 0x7465756F686C6973;
  v2[6] = 0xEF617461645F6574;
  v2[3] = a2;
  v2[4] = v18;
  swift_unknownObjectWeakAssign();
  sub_1000E553C(v6);
  if (sub_100027BA4(v6, 1, v7) == 1)
  {
    swift_unknownObjectRelease();
    sub_100019938(v6, &qword_10021BB20);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 32))(v23, v6, v7);
    uint64_t v19 = Data.init(contentsOf:options:)();
    unint64_t v21 = v20;
    sub_1000E59F0(v19, v20);
    sub_1000291B4(v19, v21);
    swift_unknownObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v7);
  }
  return v2;
}

uint64_t sub_1000E553C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for URL();
  sub_100020C48();
  uint64_t v4 = v3;
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)v39 - v9;
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    v39[1] = Strong;
    uint64_t v12 = self;
    id v13 = [v12 defaultManager];
    id v40 = 0;
    id v14 = [v13 URLForDirectory:13 inDomain:1 appropriateForURL:0 create:1 error:&v40];

    id v15 = v40;
    if (v14)
    {
      v39[0] = a1;
      static URL._unconditionallyBridgeFromObjectiveC(_:)();
      id v16 = v15;

      URL.appendingPathComponent(_:isDirectory:)();
      uint64_t v17 = *(void (**)(uint64_t))(v4 + 8);
      uint64_t v18 = sub_100025A88();
      v17(v18);
      (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v10, v8, v2);
      id v19 = [v12 defaultManager];
      URL._bridgeToObjectiveC()(v20);
      uint64_t v22 = v21;
      id v40 = 0;
      unsigned int v23 = [v19 createDirectoryAtURL:v21 withIntermediateDirectories:1 attributes:0 error:&v40];

      if (v23)
      {
        id v24 = v40;
        uint64_t v25 = v39[0];
        URL.appendingPathComponent(_:isDirectory:)();
        swift_unknownObjectRelease();
        uint64_t v26 = sub_100025A88();
        v17(v26);
        uint64_t v27 = v25;
        uint64_t v28 = 0;
        return sub_10002538C(v27, v28, 1, v2);
      }
      id v31 = v40;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      uint64_t v32 = sub_100025A88();
      v17(v32);
      a1 = v39[0];
    }
    else
    {
      id v30 = v40;
      _convertNSErrorToError(_:)();

      swift_willThrow();
    }
    if (qword_100218B78 != -1) {
      swift_once();
    }
    uint64_t v33 = type metadata accessor for Logger();
    sub_10002A10C(v33, (uint64_t)qword_100236A80);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = (uint8_t *)swift_slowAlloc();
      id v40 = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v36 = 136315138;
      swift_getErrorValue();
      uint64_t v37 = Error.localizedDescription.getter();
      v39[2] = sub_10001C274(v37, v38, (uint64_t *)&v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "error getting path to silhouette file: %s", v36, 0xCu);
      swift_arrayDestroy();
      sub_100017D40();
      sub_100017D40();
      swift_unknownObjectRelease();

      swift_errorRelease();
    }
    else
    {
      swift_unknownObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v27 = a1;
    uint64_t v28 = 1;
    return sub_10002538C(v27, v28, 1, v2);
  }

  return sub_10002538C(a1, 1, 1, v2);
}

void sub_1000E59F0(uint64_t a1, unint64_t a2)
{
  if (!sub_10003014C(a1, a2))
  {
    uint64_t v3 = sub_1000E5C5C();
    if (v4)
    {
      uint64_t v7 = v3;
      uint64_t v8 = v4;
      uint64_t v9 = v5;
      uint64_t v10 = v6;
      if (swift_unknownObjectWeakLoadStrong())
      {
        id v11 = [self defaultCenter];
        swift_unknownObjectRelease();
        sub_10002572C((uint64_t *)&unk_10021BAE0);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_1001A2A20;
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        AnyHashable.init<A>(_:)();
        *(void *)(inited + 96) = type metadata accessor for ContextUpdate(0);
        id v13 = sub_10002E5E8((uint64_t *)(inited + 72));
        *id v13 = v7;
        v13[1] = v8;
        v13[2] = v9;
        uint64_t v13[3] = v10;
        swift_storeEnumTagMultiPayload();
        uint64_t v14 = Dictionary.init(dictionaryLiteral:)();
        sub_10010553C(@"com.apple.parsecd.contextUpdate", v2, v14, v11);

        return;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  if (qword_100218B78 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  sub_10002A10C(v15, (uint64_t)qword_100236A80);
  oslog = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v16, "error parsing silhouette data", v17, 2u);
    sub_100017D40();
  }
}

uint64_t sub_1000E5C5C()
{
  uint64_t v0 = self;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v14 = 0;
  id v2 = [v0 JSONObjectWithData:isa options:0 error:&v14];

  id v3 = v14;
  if (v2)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    sub_10002572C(qword_1002199B8);
    swift_dynamicCast();
    uint64_t v4 = (uint64_t)v14;
    sub_100039DBC(7104883, 0xE300000000000000, (uint64_t)v14, &v15);
    if (v16)
    {
      if (swift_dynamicCast())
      {
        uint64_t v5 = (uint64_t)v14;
        goto LABEL_12;
      }
    }
    else
    {
      sub_100019938((uint64_t)&v15, (uint64_t *)&unk_10021BB30);
    }
    uint64_t v5 = 0;
LABEL_12:
    sub_100039DBC(30320, 0xE200000000000000, v4, &v15);
    swift_bridgeObjectRelease();
    if (v16) {
      swift_dynamicCast();
    }
    else {
      sub_100019938((uint64_t)&v15, (uint64_t *)&unk_10021BB30);
    }
    return v5;
  }
  uint64_t v6 = v3;
  _convertNSErrorToError(_:)();

  swift_willThrow();
  if (qword_100218B78 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  sub_10002A10C(v7, (uint64_t)qword_100236A80);
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Error parsing silhouette JSON, adding unparsed string instead", v10, 2u);
    sub_100017D40();
  }

  Class v11 = Data._bridgeToObjectiveC()().super.isa;
  id v12 = [(objc_class *)v11 base64EncodedStringWithOptions:0];

  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  swift_errorRelease();
  return v5;
}

uint64_t sub_1000E5F48()
{
  sub_10001CDE0(v0 + 16);

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1000E5F78()
{
  sub_1000E5F48();

  return _swift_deallocClassInstance(v0, 56, 7);
}

uint64_t type metadata accessor for SilhouetteContextProvider()
{
  return self;
}

unint64_t sub_1000E5FD0()
{
  unint64_t result = qword_10021BFF0;
  if (!qword_10021BFF0)
  {
    type metadata accessor for OS_dispatch_queue.Attributes();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10021BFF0);
  }
  return result;
}

unint64_t sub_1000E6014()
{
  unint64_t result = qword_10021C000;
  if (!qword_10021C000)
  {
    sub_1000371D4(&qword_10021A2E0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10021C000);
  }
  return result;
}

BOOL sub_1000E6068()
{
  return sub_1000E6070(*v0);
}

BOOL sub_1000E6070(char a1)
{
  if (qword_100218BC0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v2 = *(void *)(qword_100236AF8 + 16);
    if (!v2) {
      break;
    }
    uint64_t v3 = 0;
    while (1)
    {
      uint64_t v4 = v3 + 1;
      if (__OFADD__(v3, 1)) {
        break;
      }
      if (qword_1001A84B8[*(char *)(qword_100236AF8 + 32 + v3)] == qword_1001A84B8[a1])
      {
        int v5 = *(unsigned __int8 *)(qword_100236AF8 + 32 + v3);
        return v5 == 45;
      }
      ++v3;
      if (v4 == v2) {
        goto LABEL_7;
      }
    }
    __break(1u);
LABEL_11:
    swift_once();
  }
LABEL_7:
  int v5 = 45;
  return v5 == 45;
}

BOOL sub_1000E6124(char a1)
{
  if (qword_100218C80 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v2 = *(void *)(qword_100236CB0 + 16);
    if (!v2) {
      break;
    }
    uint64_t v3 = 0;
    while (1)
    {
      uint64_t v4 = v3 + 1;
      if (__OFADD__(v3, 1)) {
        break;
      }
      if (qword_1001A84B8[*(char *)(qword_100236CB0 + 32 + v3)] == qword_1001A84B8[a1])
      {
        int v5 = *(unsigned __int8 *)(qword_100236CB0 + 32 + v3);
        return v5 == 45;
      }
      ++v3;
      if (v4 == v2) {
        goto LABEL_7;
      }
    }
    __break(1u);
LABEL_11:
    swift_once();
  }
LABEL_7:
  int v5 = 45;
  return v5 == 45;
}

uint64_t sub_1000E61D8(char a1)
{
  return qword_1001A84B8[a1];
}

const char *sub_1000E6208()
{
  return sub_1000E61EC(*v0);
}

BOOL sub_1000E6210()
{
  return sub_1000E6124(*v0);
}

uint64_t sub_1000E6218()
{
  uint64_t v2 = v0;
  type metadata accessor for Date();
  sub_100026A88();
  uint64_t v4 = v3;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = v2 + OBJC_IVAR____TtC7parsecd13MotionManager_lastUpdate;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v7, v8, v1);
  Date.timeIntervalSinceNow.getter();
  double v10 = v9;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v1);
  if (v10 < -300.0) {
    return sub_1000E65D4();
  }
  return result;
}

uint64_t sub_1000E631C(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Date();
  sub_100026A88();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  double v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(v2 + 40) = 0;
  swift_unknownObjectWeakInit();
  *(void *)(v2 + 40) = a2;
  swift_unknownObjectWeakAssign();
  *(unsigned char *)(v2 + 48) = 0;
  *(void *)(v2 + 16) = [objc_allocWithZone((Class)CMMotionActivityManager) init];
  id v10 = [objc_allocWithZone((Class)NSOperationQueue) init];
  *(void *)(v2 + 24) = v10;
  [v10 setQualityOfService:25];
  [v10 setMaxConcurrentOperationCount:1];
  id v11 = [self distantPast];
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v2 + OBJC_IVAR____TtC7parsecd13MotionManager_lastUpdate, v9, v3);
  id v12 = [self defaultCenter];
  swift_retain();
  [v12 addObserver:v2 selector:"bagChangeNotification:" name:@"PARBagChangeNotification" object:0];

  swift_release();
  swift_unknownObjectRelease();
  return v2;
}

uint64_t sub_1000E65D4()
{
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = v0[5];
    uint64_t v4 = (void *)v0[2];
    uint64_t v5 = v0[3];
    uint64_t v6 = (void *)swift_allocObject();
    void v6[2] = v0;
    v6[3] = v2;
    v6[4] = v3;
    void v8[4] = sub_1000E6C5C;
    v8[5] = v6;
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 1107296256;
    v8[2] = sub_1000E69D8;
    v8[3] = &unk_100200018;
    uint64_t v7 = _Block_copy(v8);
    swift_retain();
    swift_unknownObjectRetain();
    swift_release();
    [v4 startActivityUpdatesToQueue:v5 withHandler:v7];
    _Block_release(v7);
    return swift_unknownObjectRelease();
  }
  return result;
}

id sub_1000E66E4(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = &v17[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (a1)
  {
    id v8 = a1;
    if ([v8 stationary])
    {
      int v9 = 1;
    }
    else if ([v8 automotive])
    {
      int v9 = 5;
    }
    else if ([v8 walking])
    {
      int v9 = 2;
    }
    else if ([v8 running])
    {
      int v9 = 3;
    }
    else if ([v8 cycling])
    {
      int v9 = 4;
    }
    else
    {
      int v9 = 0;
    }
    if (*(unsigned __int8 *)(a2 + 48) + 1 != v9 + 1)
    {
      *(unsigned char *)(a2 + 48) = v9;
      Date.init()();
      uint64_t v12 = a2 + OBJC_IVAR____TtC7parsecd13MotionManager_lastUpdate;
      swift_beginAccess();
      (*(void (**)(uint64_t, unsigned char *, uint64_t))(v5 + 40))(v12, v7, v4);
      swift_endAccess();
      id v13 = [self defaultCenter];
      sub_10002572C((uint64_t *)&unk_10021BAE0);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1001A2A20;
      uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v19 = v15;
      AnyHashable.init<A>(_:)();
      *(void *)(inited + 96) = type metadata accessor for ContextUpdate(0);
      *(unsigned char *)sub_10002E5E8((uint64_t *)(inited + 72)) = *(unsigned char *)(a2 + 48);
      swift_storeEnumTagMultiPayload();
      uint64_t v16 = Dictionary.init(dictionaryLiteral:)();
      sub_10010553C(@"com.apple.parsecd.contextUpdate", 0, v16, v13);
    }
    return [*(id *)(a2 + 16) stopActivityUpdates];
  }
  else
  {
    id v10 = *(void **)(a2 + 16);
    return [v10 stopActivityUpdates];
  }
}

void sub_1000E69D8(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3(a2);
  swift_release();
}

uint64_t sub_1000E6A44()
{
  sub_10001CDE0(v0 + 32);
  uint64_t v1 = v0 + OBJC_IVAR____TtC7parsecd13MotionManager_lastUpdate;
  uint64_t v2 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t sub_1000E6AC0()
{
  sub_1000E6A44();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v1, v2);
}

uint64_t sub_1000E6B18()
{
  return type metadata accessor for MotionManager();
}

uint64_t type metadata accessor for MotionManager()
{
  uint64_t result = qword_10021E278;
  if (!qword_10021E278) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000E6B68()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1000E6C1C()
{
  swift_release();
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

id sub_1000E6C5C(void *a1)
{
  return sub_1000E66E4(a1, *(void *)(v1 + 16));
}

uint64_t sub_1000E6C68(void (*a1)(uint64_t *__return_ptr))
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 16);
  os_unfair_lock_lock(v3);
  a1(&v5);
  os_unfair_lock_unlock(v3);
  return v5;
}

uint64_t sub_1000E6CC4(void (*a1)(uint64_t *__return_ptr))
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 16);
  os_unfair_lock_lock(v3);
  a1(&v5);
  os_unfair_lock_unlock(v3);
  return v5;
}

uint64_t sub_1000E6D20(uint64_t result)
{
  if (result >= 3u) {
    return 3;
  }
  else {
    return result;
  }
}

Swift::Int sub_1000E6D34()
{
  return sub_1000B3BEC(*v0);
}

void sub_1000E6D3C(int a1)
{
  sub_1000B3DD8(a1, *v1);
}

Swift::Int sub_1000E6D44()
{
  return sub_1000B3FE8();
}

uint64_t sub_1000E6D4C@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1000E6D20(*a1);
  *a2 = result;
  return result;
}

void sub_1000E6D78(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_1000E6D84()
{
  swift_retain();
  uint64_t v0 = sub_10008096C();
  swift_release();
  return v0;
}

uint64_t sub_1000E6DD0()
{
  swift_retain();
  sub_10002819C();
  sub_100082118();

  return swift_release();
}

uint64_t sub_1000E6E24(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(NSObject **)(v2 + 48);
  uint64_t v6 = (void *)swift_allocObject();
  void v6[2] = v2;
  v6[3] = a1;
  v6[4] = a2;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = sub_1000E99A8;
  *(void *)(v7 + 24) = v6;
  v10[4] = sub_100017874;
  v10[5] = v7;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1107296256;
  v10[2] = sub_100017848;
  v10[3] = &unk_1002002D8;
  id v8 = _Block_copy(v10);
  swift_retain();
  sub_100030358(a1);
  swift_retain();
  swift_release();
  dispatch_sync(v5, v8);
  _Block_release(v8);
  LOBYTE(v5) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v5) {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000E6F98(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = sub_10002572C(&qword_10021BF30);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UserAgent();
  sub_10002538C((uint64_t)v5, 1, 1, v6);
  sub_10000FDFC(0, (uint64_t)v5, 3);
  uint64_t result = sub_1000E97F8((uint64_t)v5, &qword_10021BF30);
  if (a2) {
    return a2(result);
  }
  return result;
}

void sub_1000E7068()
{
  id v0 = [objc_allocWithZone((Class)_CPConnectionInvalidatedFeedback) init];
  if (v0)
  {
    id v3 = v0;
    id v1 = [objc_allocWithZone((Class)_CPFeedbackPayload) initWithCodable:v0];
    [v1 setQueryId:0];
    if (v1)
    {
      sub_10002819C();
      sub_1000148D0();

      uint64_t v2 = v1;
    }
    else
    {
      uint64_t v2 = v3;
    }
  }
}

void sub_1000E7154(uint64_t a1, void (*a2)(void))
{
  type metadata accessor for DispatchPredicate();
  sub_100020C48();
  __chkstk_darwin(v5);
  sub_100021208();
  uint64_t v6 = *(void **)(v2 + 48);
  void *v3 = v6;
  uint64_t v7 = sub_10002CDE8();
  v8(v7);
  id v9 = v6;
  _dispatchPreconditionTest(_:)();
  uint64_t v10 = sub_10002758C();
  v11(v10);
  if (v6)
  {
    uint64_t v12 = *(void *)(v2 + 16);
    *(unsigned char *)(v2 + 88) = 2;
    if (v12)
    {
      swift_unknownObjectRetain();
      sub_1000487DC();
      swift_unknownObjectRelease();
    }
    sub_100008BE8(0);
    sub_1000E6DD0();
    if (*(void *)(v2 + 32))
    {
      swift_retain();
      sub_1000F0C24();
      swift_release();
    }
    *(void *)(v2 + 16) = 0;
    *(void *)(v2 + 24) = 0;
    swift_unknownObjectRelease();
    sub_1000E729C();
    if (a2) {
      a2();
    }
  }
  else
  {
    __break(1u);
  }
}

void sub_1000E729C()
{
  id v1 = *(os_unfair_lock_s **)(*(void *)(v0 + 32) + 16);
  os_unfair_lock_lock(v1);
  *(void *)(v0 + 24) = 0;
  swift_unknownObjectRelease();
  os_unfair_lock_unlock(v1);
}

uint64_t sub_1000E72DC(uint64_t a1, uint64_t a2, unint64_t a3)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v6 = result;
    uint64_t v7 = sub_100006474();
    unint64_t v9 = v8;
    if (qword_100218B38 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_10002A10C(v10, (uint64_t)qword_1002369C0);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_retain_n();
    id v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 136315650;
      swift_bridgeObjectRetain();
      sub_10001C274(a2, a3, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v13 + 12) = 2080;
      swift_bridgeObjectRetain();
      sub_10001C274(v7, v9, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v13 + 22) = 2080;
      os_log_type_t type = v12;
      uint64_t v14 = v7;
      uint64_t v15 = a2;
      uint64_t v16 = *(void *)(v6 + 56);
      unint64_t v17 = *(void *)(v6 + 64);
      swift_bridgeObjectRetain();
      sub_10001C274(v16, v17, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      a2 = v15;
      uint64_t v7 = v14;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v11, type, "soft limit reached expected %s current %s %s", (uint8_t *)v13, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    if (v7 == a2 && v9 == a3)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v19 & 1) == 0) {
        return swift_release();
      }
    }
    sub_1000E7608();
    return swift_release();
  }
  return result;
}

void sub_1000E7608()
{
  sub_10000DFE0();
  id v3 = v1;
  uint64_t v67 = v4;
  uint64_t v5 = type metadata accessor for UserAgent();
  sub_100020C48();
  uint64_t v7 = v6;
  __chkstk_darwin(v8);
  uint64_t v66 = v9;
  uint64_t v10 = (char *)v58 - (((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10002572C(&qword_10021BF30);
  uint64_t v12 = sub_100016544(v11);
  __chkstk_darwin(v12);
  sub_10001DDC8();
  type metadata accessor for DispatchPredicate();
  sub_100020C48();
  uint64_t v14 = v13;
  __chkstk_darwin(v15);
  sub_100017CD4();
  uint64_t v16 = (void *)v1[6];
  *(void *)uint64_t v2 = v16;
  sub_100023D14();
  v17();
  id v18 = v16;
  unint64_t v19 = _dispatchPreconditionTest(_:)();
  unint64_t v20 = (void *)(v14 + 8);
  sub_100025454();
  v21();
  if ((v19 & 1) == 0)
  {
    __break(1u);
LABEL_12:
    swift_once();
    goto LABEL_4;
  }
  if (!v1[2]) {
    goto LABEL_10;
  }
  unint64_t v20 = (void *)(v7 + 16);
  uint64_t v2 = *(void (**)(void))(v7 + 16);
  sub_100023C94();
  v2();
  sub_10002538C(v0, 0, 1, v5);
  sub_10000FDFC(0, v0, 1);
  sub_1000E97F8(v0, &qword_10021BF30);
  uint64_t v65 = sub_100006474();
  unint64_t v19 = v22;
  if (qword_100218B38 != -1) {
    goto LABEL_12;
  }
LABEL_4:
  uint64_t v23 = type metadata accessor for Logger();
  sub_10002A10C(v23, (uint64_t)qword_1002369C0);
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  id v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.debug.getter();
  int v26 = v25;
  BOOL v27 = os_log_type_enabled(v24, v25);
  unint64_t v63 = v19;
  id v64 = v18;
  if (v27)
  {
    uint64_t v28 = swift_slowAlloc();
    LODWORD(v60) = v26;
    uint64_t v29 = v28;
    uint64_t v59 = swift_slowAlloc();
    v69[0] = v59;
    *(_DWORD *)uint64_t v29 = 136315394;
    swift_bridgeObjectRetain();
    uint64_t v70 = sub_10001C274(v65, v19, v69);
    uint64_t v62 = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v29 + 12) = 2080;
    id v30 = v10;
    uint64_t v31 = v5;
    uint64_t v32 = v7;
    double v61 = v2;
    uint64_t v33 = v3[7];
    unint64_t v34 = v3[8];
    swift_bridgeObjectRetain();
    uint64_t v35 = v33;
    uint64_t v7 = v32;
    uint64_t v5 = v31;
    uint64_t v10 = v30;
    uint64_t v70 = sub_10001C274(v35, v34, v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    uint64_t v2 = v61;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v24, (os_log_type_t)v60, "soft limit reached, maxtimer session id %s %s", (uint8_t *)v29, 0x16u);
    swift_arrayDestroy();
    sub_100017D40();
    sub_100017D40();
  }
  else
  {

    swift_release_n();
    swift_bridgeObjectRelease_n();
  }
  uint64_t v36 = v3[4];
  if (v36)
  {
    swift_retain();
    sub_1000F0C24();
    swift_release();
  }
  sub_100017F00();
  uint64_t v37 = v3[15];
  sub_10001B620(v3 + 12, v37);
  uint64_t v62 = v58;
  sub_100026808();
  uint64_t v39 = v38;
  __chkstk_darwin(v40);
  sub_100024F80();
  sub_100016608();
  v41();
  uint64_t v60 = type metadata accessor for DispatchTime();
  double v61 = (void (*)(void))v58;
  sub_100020C48();
  uint64_t v59 = v42;
  __chkstk_darwin(v43);
  sub_10000E04C();
  v58[1] = v44;
  sub_1000E8FCC();
  (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v36, v37);
  uint64_t v45 = sub_100023CE4();
  swift_weakInit();
  sub_100023C94();
  v2();
  unint64_t v46 = (*(unsigned __int8 *)(v7 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v47 = (char *)swift_allocObject();
  uint64_t v48 = v65;
  *((void *)v47 + 2) = v45;
  *((void *)v47 + 3) = v48;
  *((void *)v47 + 4) = v63;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v47[v46], v10, v5);
  v69[4] = (uint64_t)sub_1000E9448;
  v69[5] = (uint64_t)v47;
  v69[0] = (uint64_t)_NSConcreteStackBlock;
  v69[1] = 1107296256;
  void v69[2] = (uint64_t)sub_1000085EC;
  v69[3] = (uint64_t)&unk_100200210;
  uint64_t v49 = _Block_copy(v69);
  type metadata accessor for DispatchQoS();
  uint64_t v67 = v58;
  sub_100020C48();
  __chkstk_darwin(v50);
  sub_100021CFC();
  static DispatchQoS.unspecified.getter();
  uint64_t v51 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v66 = v58;
  sub_100020C48();
  uint64_t v53 = v52;
  __chkstk_darwin(v54);
  sub_100017DE0();
  uint64_t v68 = _swiftEmptyArrayStorage;
  sub_10003045C();
  sub_10002572C((uint64_t *)&unk_10021BAF0);
  sub_1000301A0();
  sub_100019BE0();
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
  _Block_release(v49);
  (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v7 + 32, v51);
  uint64_t v55 = sub_100023D58();
  v56(v55);
  sub_10000E040();
  v57();
  swift_release();
  swift_release();
LABEL_10:
  sub_10000DFB8();
}

uint64_t sub_1000E7CFC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v7 = sub_10002572C(&qword_10021BF30);
  __chkstk_darwin(v7 - 8);
  unint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v11 = result;
    uint64_t v12 = sub_100006474();
    unint64_t v14 = v13;
    if (qword_100218B38 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_10002A10C(v15, (uint64_t)qword_1002369C0);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      uint64_t v25 = a4;
      uint64_t v23 = v19;
      uint64_t v27 = v19;
      *(_DWORD *)uint64_t v18 = 136315394;
      swift_bridgeObjectRetain();
      uint64_t v26 = sub_10001C274(a2, a3, &v27);
      id v24 = v9;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v18 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v26 = sub_10001C274(v12, v14, &v27);
      unint64_t v9 = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "max timer expired expected %s current %s", (uint8_t *)v18, 0x16u);
      swift_arrayDestroy();
      a4 = v25;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    if (v12 == a2 && v14 == a3)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v21 & 1) == 0) {
        goto LABEL_16;
      }
    }
    if (!*(void *)(v11 + 16)) {
      return swift_release();
    }
    uint64_t v22 = type metadata accessor for UserAgent();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v22 - 8) + 16))(v9, a4, v22);
    sub_10002538C((uint64_t)v9, 0, 1, v22);
    sub_10000FDFC(0, v9, 2);
    sub_1000E97F8((uint64_t)v9, &qword_10021BF30);
LABEL_16:
    if (*(void *)(v11 + 32))
    {
      swift_retain();
      sub_1000F0C24();
      swift_release();
    }
    return swift_release();
  }
  return result;
}

void sub_1000E8098()
{
  sub_10000DFE0();
  uint64_t v24 = v1;
  uint64_t v3 = v2;
  uint64_t v4 = type metadata accessor for Logger();
  sub_100020C48();
  uint64_t v6 = v5;
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v9);
  uint64_t v10 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = *(void *)(v0 + 48);
  sub_100016608();
  v11();
  unint64_t v12 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  unint64_t v13 = (v8 + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v14 = (v13 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v15 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v15 + v12, v10, v4);
  *(void *)(v15 + v13) = v0;
  *(void *)(v15 + v14) = v3;
  *(void *)(v15 + ((v14 + 15) & 0xFFFFFFFFFFFFFFF8)) = v24;
  v27[4] = sub_1000E9384;
  void v27[5] = v15;
  v27[0] = _NSConcreteStackBlock;
  v27[1] = 1107296256;
  void v27[2] = sub_1000085EC;
  void v27[3] = &unk_1002001C0;
  uint64_t v16 = _Block_copy(v27);
  type metadata accessor for DispatchQoS();
  sub_100020C48();
  __chkstk_darwin(v17);
  sub_100017DC8();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v18 = type metadata accessor for DispatchWorkItemFlags();
  sub_100020C48();
  uint64_t v20 = v19;
  __chkstk_darwin(v21);
  sub_100017DE0();
  uint64_t v26 = _swiftEmptyArrayStorage;
  sub_10003045C();
  sub_10002572C((uint64_t *)&unk_10021BAF0);
  sub_1000301A0();
  sub_100019BE0();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v16);
  (*(void (**)(unint64_t, uint64_t))(v20 + 8))(v13, v18);
  sub_100023D58();
  sub_100027EC0();
  v22();
  swift_release();
  sub_10000DFB8();
}

void sub_1000E8330(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = type metadata accessor for SessionTokens(0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  unint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain_n();
  uint64_t v24 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v24, v13))
  {
    uint64_t v14 = swift_slowAlloc();
    uint64_t v23 = a4;
    uint64_t v15 = v14;
    uint64_t v16 = swift_slowAlloc();
    uint64_t v22 = a3;
    uint64_t v26 = v16;
    *(_DWORD *)uint64_t v15 = 136446722;
    uint64_t v21 = v15 + 4;
    sub_10003093C((uint64_t)v8);
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v12, &v8[*(int *)(v6 + 20)], v9);
    sub_100027C78((uint64_t)v8, (void (*)(void))type metadata accessor for SessionTokens);
    sub_1000E93F4();
    uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v19 = v18;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    uint64_t v25 = sub_10001C274(v17, v19, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 12) = 2050;
    uint64_t v25 = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v15 + 22) = 2050;
    uint64_t v25 = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v24, v13, "Client session uuid: %{public}s requestId: %{public}llu queryId: %{public}llu", (uint8_t *)v15, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
    uint64_t v20 = v24;
  }
}

void sub_1000E8660()
{
}

uint64_t sub_1000E868C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for SessionTokens(0);
  uint64_t v3 = v2 - 8;
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000B788();
  sub_10003093C((uint64_t)v5);
  uint64_t v6 = &v5[*(int *)(v3 + 28)];
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, v6, v7);
  return sub_100027C78((uint64_t)v5, (void (*)(void))type metadata accessor for SessionTokens);
}

void sub_1000E8784()
{
}

void sub_1000E87B0()
{
  sub_10000DFE0();
  uint64_t v3 = v2;
  type metadata accessor for DispatchPredicate();
  sub_100020C48();
  __chkstk_darwin(v4);
  sub_100017DE0();
  uint64_t v5 = *(void **)(v0 + 48);
  void *v1 = v5;
  sub_100023D14();
  v6();
  v5;
  char v7 = _dispatchPreconditionTest(_:)();
  sub_100027EC0();
  v8();
  if (v7)
  {
    v3(0);
    OS_dispatch_queue.sync<A>(execute:)();
    sub_10000DFB8();
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1000E88B4@<X0>(uint64_t a1@<X8>)
{
  return sub_10003093C(a1);
}

void sub_1000E88F8()
{
  sub_10000DFE0();
  void v11[6] = *(void *)(v0 + 136);
  v11[7] = v2;
  if (sub_1000E6C68((void (*)(uint64_t *__return_ptr))sub_1000E8F84))
  {
    v11[3] = *(void *)(v0 + 48);
    uint64_t v3 = sub_100023CE4();
    swift_weakInit();
    v12[4] = sub_1000E8FC4;
    v12[5] = v3;
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 1107296256;
    v12[2] = sub_1000085EC;
    v12[3] = &unk_100200170;
    uint64_t v4 = _Block_copy(v12);
    type metadata accessor for DispatchQoS();
    v11[2] = v11;
    sub_100020C48();
    __chkstk_darwin(v5);
    sub_100021208();
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
    v11[1] = v11;
    sub_100020C48();
    uint64_t v8 = v7;
    __chkstk_darwin(v9);
    sub_100017CD4();
    v11[9] = _swiftEmptyArrayStorage;
    sub_10003045C();
    sub_10002572C((uint64_t *)&unk_10021BAF0);
    sub_1000301A0();
    sub_100029324();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v4);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v1, v6);
    sub_1000292E0();
    v10();
    swift_release();
    swift_release();
  }
  sub_10000DFB8();
}

uint64_t sub_1000E8B30()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_1000E7154(3, 0);
    return swift_release();
  }
  return result;
}

uint64_t sub_1000E8B94()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  sub_10001CDE0(v0 + 72);
  sub_10001CA50(v0 + 96);
  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_1000E8BF4()
{
  sub_1000E8B94();

  return _swift_deallocClassInstance(v0, 153, 7);
}

uint64_t type metadata accessor for ClientSessionManager()
{
  return self;
}

void *sub_1000E8C4C()
{
  v0[2] = _swiftEmptySetSingleton;
  v0[3] = 0;
  type metadata accessor for Locker();
  uint64_t v1 = sub_100023CE4();
  uint64_t v2 = (_DWORD *)swift_slowAlloc();
  *(void *)(v1 + 16) = v2;
  _DWORD *v2 = 0;
  v0[4] = v1;
  return v0;
}

uint64_t sub_1000E8CA0@<X0>(uint64_t a1@<X0>, BOOL *a2@<X8>)
{
  uint64_t v4 = sub_10002572C((uint64_t *)&unk_10021E620);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  sub_1000922E8();
  swift_endAccess();
  uint64_t v7 = type metadata accessor for UUID();
  int v8 = sub_100027BA4((uint64_t)v6, 1, v7);
  uint64_t result = sub_1000E97F8((uint64_t)v6, (uint64_t *)&unk_10021E620);
  BOOL v10 = v8 != 1 && !*(void *)(*(void *)(a1 + 16) + 16) && *(void *)(a1 + 24) != 0;
  *a2 = v10;
  return result;
}

uint64_t sub_1000E8DAC()
{
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  return v0;
}

uint64_t sub_1000E8DDC()
{
  uint64_t v0 = sub_1000E8DAC();

  return _swift_deallocClassInstance(v0, 40, 7);
}

uint64_t type metadata accessor for SessionEndEventController()
{
  return self;
}

unsigned char *storeEnumTagSinglePayload for ClientSessionState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000E8EFCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ClientSessionState()
{
  return &type metadata for ClientSessionState;
}

unint64_t sub_1000E8F38()
{
  unint64_t result = qword_10021E610;
  if (!qword_10021E610)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10021E610);
  }
  return result;
}

uint64_t sub_1000E8F84@<X0>(BOOL *a1@<X8>)
{
  return sub_1000E8CA0(*(void *)(v1 + 16), a1);
}

uint64_t sub_1000E8F8C()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000E8FC4()
{
  return sub_1000E8B30();
}

uint64_t sub_1000E8FCC()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchTime();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  static DispatchTime.now()();
  uint64_t v6 = DispatchTime.uptimeNanoseconds.getter();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  double v8 = *(double *)(v1 + 16) * 1000000000.0;
  if ((~*(void *)&v8 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (v8 <= -1.0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (v8 >= 1.84467441e19)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  uint64_t result = v6 + (unint64_t)v8;
  if (!__CFADD__(v6, (unint64_t)v8)) {
    return DispatchTime.init(uptimeNanoseconds:)();
  }
LABEL_9:
  __break(1u);
  return result;
}

BOOL sub_1000E9108(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  double v8 = (char *)&v12 - v7;
  if (qword_100218C68 != -1) {
    swift_once();
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, a1, v2);
  Date.init(timeInterval:since:)();
  Date.timeIntervalSinceNow.getter();
  double v10 = v9;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
  if (qword_100218C70 != -1) {
    swift_once();
  }
  return v10 <= *(double *)&qword_10021FBF8;
}

uint64_t sub_1000E92A8@<X0>(uint64_t a1@<X8>)
{
  return sub_1000E88B4(a1);
}

uint64_t sub_1000E92C4@<X0>(uint64_t a1@<X8>)
{
  return sub_1000E868C(a1);
}

uint64_t sub_1000E92E0()
{
  type metadata accessor for Logger();
  sub_10000E060();
  v1 += 8;
  uint64_t v2 = *(unsigned __int8 *)(v1 + 72);
  uint64_t v3 = v2 | 7;
  unint64_t v4 = ((((((*(void *)(v1 + 56) + ((v2 + 16) & ~v2) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
     + 8;
  sub_10000E040();
  v5();
  swift_release();

  return _swift_deallocObject(v0, v4, v3);
}

void sub_1000E9384()
{
  uint64_t v1 = type metadata accessor for Logger();
  sub_100024920(v1);
  sub_100028B48();
  uint64_t v4 = *(void *)(v0 + v3);
  uint64_t v6 = *(void *)(v0 + v5);
  uint64_t v7 = *(void *)(v0 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8));

  sub_1000E8330(v0 + v2, v4, v6, v7);
}

unint64_t sub_1000E93F4()
{
  unint64_t result = qword_10021CC60;
  if (!qword_10021CC60)
  {
    type metadata accessor for UUID();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10021CC60);
  }
  return result;
}

uint64_t sub_1000E9448()
{
  return sub_1000E965C((uint64_t (*)(uint64_t, uint64_t, uint64_t, char *))sub_1000E7CFC);
}

uint64_t sub_1000E9460(void *a1)
{
  id v2 = [a1 data];

  if (!v2) {
    return 0;
  }
  uint64_t v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_1000E94D0(void *a1)
{
  id v1 = [a1 experimentInfos];
  if (!v1) {
    return 0;
  }
  id v2 = v1;
  sub_1000E96D8();
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

void sub_1000E9530(uint64_t a1, void *a2)
{
  sub_1000E96D8();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [a2 setExperimentInfos:isa];
}

uint64_t sub_1000E95A8()
{
  type metadata accessor for UserAgent();
  sub_100020C48();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v6 = ((v5 + 40) & ~v5) + *(void *)(v4 + 64);
  uint64_t v7 = v5 | 7;
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v8 = sub_10001D7C0();
  v9(v8);

  return _swift_deallocObject(v0, v6, v7);
}

uint64_t sub_1000E9644()
{
  return sub_1000E965C((uint64_t (*)(uint64_t, uint64_t, uint64_t, char *))sub_1000E72DC);
}

uint64_t sub_1000E965C(uint64_t (*a1)(uint64_t, uint64_t, uint64_t, char *))
{
  uint64_t v2 = *(void *)(type metadata accessor for UserAgent() - 8);
  uint64_t v3 = v1[2];
  uint64_t v4 = v1[3];
  uint64_t v5 = v1[4];
  uint64_t v6 = (char *)v1 + ((*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));

  return a1(v3, v4, v5, v6);
}

unint64_t sub_1000E96D8()
{
  unint64_t result = qword_10021E640;
  if (!qword_10021E640)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10021E640);
  }
  return result;
}

uint64_t *sub_1000E9718()
{
  sub_1000483FC((uint64_t)v5);
  unint64_t result = (uint64_t *)sub_1000E9844((uint64_t)v5, (uint64_t)v6);
  if (*((void *)&v6[0] + 1))
  {
    v6[4] = v6[0];
    v6[5] = v6[1];
    v6[6] = v6[2];
    v6[7] = v6[3];
    id v1 = [self defaultManager];
    sub_100010DE0();
    uint64_t v2 = sub_10009355C();
    unint64_t v4 = v3;
    sub_1000EA658();
    sub_1000291B4(v2, v4);

    swift_release();
    return sub_1000E98AC(v5);
  }
  return result;
}

uint64_t sub_1000E97F8(uint64_t a1, uint64_t *a2)
{
  sub_10002572C(a2);
  sub_10000E060();
  sub_10000E040();
  v3();
  return a1;
}

uint64_t sub_1000E9844(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10002572C(&qword_10021E650);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t *sub_1000E98AC(uint64_t *a1)
{
  return a1;
}

uint64_t sub_1000E98E8(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

BOOL sub_1000E9958()
{
  return sub_1000482E8();
}

uint64_t sub_1000E9960()
{
  swift_release();
  if (*(void *)(v0 + 24)) {
    swift_release();
  }

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000E99A8()
{
  return sub_1000E6F98(*(void *)(v0 + 16), *(uint64_t (**)(uint64_t))(v0 + 24));
}

uint64_t sub_1000E99B4()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000E99C4()
{
  type metadata accessor for UserAgent();
  sub_100020C48();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v6 = v5 | 7;
  unint64_t v7 = (((*(void *)(v4 + 64) + ((v5 + 40) & ~v5) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  uint64_t v8 = sub_10001D7C0();
  v9(v8);
  swift_release();

  return _swift_deallocObject(v0, v7 + 8, v6);
}

void sub_1000E9AA8(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v5, v6, a4, v4, 2u);
}

Swift::Void __swiftcall Incident.reportTelemetry()()
{
  char v3 = v2;
  uint64_t v4 = v1;
  uint64_t v5 = v0;
  uint64_t v6 = type metadata accessor for OSSignpostID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  double v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v3)
  {
    if (v3 == 1)
    {
      static os_signpost_type_t.event.getter();
      if (qword_100218C50 != -1) {
        swift_once();
      }
      sub_10002572C((uint64_t *)&unk_10021BB00);
      uint64_t v10 = swift_allocObject();
      *(_OWORD *)(v10 + 16) = xmmword_1001A2A30;
      *(void *)(v10 + 56) = &type metadata for Int;
      *(void *)(v10 + 64) = &protocol witness table for Int;
      *(void *)(v10 + 32) = v5;
      *(void *)(v10 + 96) = &type metadata for Int;
      *(void *)(v10 + 104) = &protocol witness table for Int;
      *(void *)(v10 + 72) = v4;
      *(void *)(v10 + 136) = &type metadata for String;
      *(void *)(v10 + 144) = sub_1000303C8();
      *(void *)(v10 + 112) = 0xD00000000000001ELL;
      *(void *)(v10 + 120) = 0x80000001001B7260;
      static OSSignpostID.exclusive.getter();
      sub_100025A9C();
    }
    else
    {
      static os_signpost_type_t.event.getter();
      if (qword_100218C50 != -1) {
        swift_once();
      }
      sub_10002572C((uint64_t *)&unk_10021BB00);
      uint64_t v34 = swift_allocObject();
      *(_OWORD *)(v34 + 16) = xmmword_1001A2A20;
      *(void *)(v34 + 56) = &type metadata for String;
      *(void *)(v34 + 64) = sub_1000303C8();
      *(void *)(v34 + 32) = 0xD000000000000016;
      *(void *)(v34 + 40) = 0x80000001001B5DE0;
      static OSSignpostID.exclusive.getter();
      sub_100025A9C();
    }
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  else
  {
    uint64_t v39 = v6;
    id v11 = v5;
    LODWORD(v37) = static os_signpost_type_t.event.getter();
    if (qword_100218C50 != -1) {
      swift_once();
    }
    uint64_t v36 = qword_10021E658;
    sub_10002572C((uint64_t *)&unk_10021BB00);
    uint64_t v12 = swift_allocObject();
    *(_OWORD *)(v12 + 16) = xmmword_1001A3830;
    *(void *)(v12 + 56) = &type metadata for String;
    unint64_t v13 = sub_1000303C8();
    *(void *)(v12 + 64) = v13;
    strcpy((char *)(v12 + 32), "ObjCException");
    *(_WORD *)(v12 + 46) = -4864;
    id v14 = [v11 name];
    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v38 = v11;
    uint64_t v16 = v15;
    uint64_t v18 = v17;

    *(void *)(v12 + 96) = &type metadata for String;
    *(void *)(v12 + 104) = v13;
    *(void *)(v12 + 72) = v16;
    *(void *)(v12 + 80) = v18;
    static OSSignpostID.exclusive.getter();
    sub_100025A9C();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v39);
    LOBYTE(v16) = static os_log_type_t.fault.getter();
    unint64_t v19 = qword_10021E658;
    sub_1000EA1D8(v5, v4, 0);
    sub_1000EA1D8(v5, v4, 0);
    sub_10002C308();
    os_log_type_t v20 = v16;
    if (os_log_type_enabled(v19, (os_log_type_t)v16))
    {
      sub_10002C308();
      uint64_t v21 = swift_slowAlloc();
      uint64_t v39 = swift_slowAlloc();
      uint64_t v41 = v39;
      *(_DWORD *)uint64_t v21 = 136315650;
      os_log_t v37 = v19;
      id v22 = v38;
      id v23 = [v38 name];
      uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v26 = v25;

      uint64_t v40 = sub_10001C274(v24, v26, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100026AA8();
      *(_WORD *)(v21 + 12) = 2080;
      uint64_t v27 = sub_1000EA1F8(v22);
      if (v28)
      {
        unint64_t v29 = v28;
      }
      else
      {
        uint64_t v27 = 1701736302;
        unint64_t v29 = 0xE400000000000000;
      }
      uint64_t v40 = sub_10001C274(v27, v29, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100026AA8();
      *(_WORD *)(v21 + 22) = 2080;
      id v30 = [v22 callStackSymbols];
      static Array._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v31 = Array.description.getter();
      unint64_t v33 = v32;
      swift_bridgeObjectRelease();
      uint64_t v40 = sub_10001C274(v31, v33, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100026AA8();
      _os_log_impl((void *)&_mh_execute_header, v37, v20, "ObjC Exception: %s, reason: %s, call stack symbols: %s", (uint8_t *)v21, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      sub_1000EA1E8(v5, v4, 0);
    }
    else
    {
      sub_1000EA1E8(v5, v4, 0);
      id v35 = v38;
    }
  }
}

uint64_t sub_1000EA174()
{
  sub_10006844C();
  uint64_t result = OS_os_log.init(subsystem:category:)();
  qword_10021E658 = result;
  return result;
}

id sub_1000EA1D8(id result, uint64_t a2, char a3)
{
  if (!a3) {
    return result;
  }
  return result;
}

void sub_1000EA1E8(id a1, uint64_t a2, char a3)
{
  if (!a3) {
}
  }

uint64_t sub_1000EA1F8(void *a1)
{
  id v1 = [a1 reason];
  if (!v1) {
    return 0;
  }
  char v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

void destroy for Incident(uint64_t a1)
{
}

uint64_t _s7parsecd8IncidentOwCP_0(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_1000EA1D8(*(id *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for Incident(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_1000EA1D8(*(id *)a2, v4, v5);
  uint64_t v6 = *(void **)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  char v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  sub_1000EA1E8(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for Incident(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  sub_1000EA1E8(v4, v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for Incident()
{
  return &type metadata for Incident;
}

uint64_t getEnumTagSinglePayload for QueryCache.Activity(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFD)
  {
    if (a2 + 3 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 3) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 4;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v5 = v6 - 4;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *_s5ErrorOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000EA4C0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *_s5ErrorOMa()
{
  return &_s5ErrorON;
}

unint64_t sub_1000EA4FC()
{
  unint64_t result = qword_10021E660;
  if (!qword_10021E660)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10021E660);
  }
  return result;
}

void *sub_1000EA548(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return sub_1000EA560(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t))sub_10011A5CC);
}

void *sub_1000EA560(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, unint64_t))
{
  if ((a4 & 1) == 0) {
    goto LABEL_2;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  id v11 = (void *)swift_dynamicCastClass();
  if (!v11)
  {
    swift_unknownObjectRelease();
    id v11 = _swiftEmptyArrayStorage;
  }
  uint64_t v12 = v11[2];
  swift_release();
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v12 != (a4 >> 1) - a3)
  {
LABEL_11:
    swift_unknownObjectRelease();
LABEL_2:
    uint64_t v10 = (void *)a5(a1, a2, a3, a4);
    goto LABEL_9;
  }
  uint64_t v10 = (void *)swift_dynamicCastClass();
  if (!v10)
  {
    swift_unknownObjectRelease();
    uint64_t v10 = _swiftEmptyArrayStorage;
  }
LABEL_9:
  swift_unknownObjectRelease();
  return v10;
}

void sub_1000EA658()
{
  sub_10000DFE0();
  uint64_t v74 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v69 = v6;
  uint64_t v70 = v7;
  type metadata accessor for UUID();
  sub_100020C48();
  uint64_t v67 = v8;
  uint64_t v68 = v9;
  __chkstk_darwin(v8);
  sub_100017DE0();
  uint64_t v10 = sub_10002572C(&qword_10021BB20);
  uint64_t v11 = sub_100016544(v10);
  __chkstk_darwin(v11);
  unint64_t v13 = (char *)&v63 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for URL();
  sub_100020C48();
  uint64_t v73 = v15;
  __chkstk_darwin(v16);
  sub_100017D2C();
  uint64_t v66 = v17;
  sub_10000E100();
  uint64_t v19 = __chkstk_darwin(v18);
  __chkstk_darwin(v19);
  sub_10002EAD4();
  __chkstk_darwin(v20);
  sub_100021308();
  uint64_t v72 = v21;
  sub_10000E100();
  __chkstk_darwin(v22);
  uint64_t v24 = (char *)&v63 - v23;
  if (v3)
  {
    sub_10002572C(&qword_10021E680);
    swift_allocObject();
    uint64_t v25 = swift_retain();
    uint64_t v26 = v5;
    sub_10003B2D4(v25, 3, 0, v5);
    uint64_t v28 = v27;
  }
  else
  {
    uint64_t v26 = v5;
    uint64_t v28 = 0;
  }
  NSFileManager.parsecdCustomFBDirectoryURL.getter();
  sub_1000184F4((uint64_t)v13, 1, v14);
  if (!v29)
  {
    sub_10000E0F4();
    v32();
    uint64_t v71 = v24;
    uint64_t v65 = v1;
    uint64_t v64 = v26;
    uint64_t v63 = v26;
    switch((int)v26)
    {
      case 0:
        unint64_t v33 = @"unknown";
        goto LABEL_30;
      case 1:
        unint64_t v33 = @"SafariAutoFill";
        goto LABEL_30;
      case 2:
        unint64_t v33 = @"Crowdsourcing";
        goto LABEL_30;
      case 3:
        unint64_t v33 = @"SpotlightResultFeatures";
        goto LABEL_30;
      case 4:
        unint64_t v33 = @"SafariAutoPlay";
        goto LABEL_30;
      case 5:
        unint64_t v33 = @"Trystero";
        goto LABEL_30;
      case 6:
        unint64_t v33 = @"EngagedCompletionFeatures";
        goto LABEL_30;
      case 7:
        unint64_t v33 = @"ProactiveEventTracker";
        goto LABEL_30;
      case 8:
        unint64_t v33 = @"PhiDES";
        goto LABEL_30;
      case 9:
        unint64_t v33 = @"DuetExpert";
        goto LABEL_30;
      case 10:
        unint64_t v33 = @"UserReport";
        goto LABEL_30;
      case 11:
        unint64_t v33 = @"Usage";
        goto LABEL_30;
      case 12:
        unint64_t v33 = @"FeedbackV2";
        goto LABEL_30;
      case 13:
        unint64_t v33 = @"FeedbackV2PB";
        goto LABEL_30;
      case 14:
        unint64_t v33 = @"ProactiveEventTrackerAggregated";
        goto LABEL_30;
      case 15:
        unint64_t v33 = @"Handwashing";
        goto LABEL_30;
      case 16:
        unint64_t v33 = @"Experiments";
        goto LABEL_30;
      case 17:
        unint64_t v33 = @"FeatureQuality";
        goto LABEL_30;
      case 18:
        unint64_t v33 = @"OnDeviceAnalytics";
        goto LABEL_30;
      case 19:
        unint64_t v33 = @"ModelFeedback";
LABEL_30:
        uint64_t v34 = v33;
        break;
      default:
        unint64_t v33 = +[NSString stringWithFormat:@"(unknown: %i)", v26];
        break;
    }
    id v35 = v33;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    URL.appendingPathComponent(_:isDirectory:)();
    swift_bridgeObjectRelease();
    UUID.init()();
    UUID.uuidString.getter();
    sub_10000E040();
    v36();
    URL.appendingPathComponent(_:)();
    swift_bridgeObjectRelease();
    uint64_t v37 = v65;
    URL.standardizedFileURL.getter();
    id v38 = *(void (**)(void))(v73 + 8);
    sub_100025AB8();
    v38();
    URL.path.getter();
    NSString v39 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    sub_10002572C(qword_10021CA78);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1001A2A20;
    *(void *)(inited + 64) = &type metadata for Int;
    *(void *)(inited + 32) = NSFilePosixPermissions;
    *(void *)(inited + 40) = 384;
    type metadata accessor for FileAttributeKey(0);
    sub_1000F0BDC((unint64_t *)&qword_100219240, type metadata accessor for FileAttributeKey);
    uint64_t v41 = NSFilePosixPermissions;
    uint64_t v42 = Dictionary.init(dictionaryLiteral:)();
    unsigned __int8 v43 = sub_1000F0A6C((uint64_t)v39, v69, v70, v42, v74);

    if (v43)
    {
      if (v28)
      {
        swift_retain();
        uint64_t v44 = Data.count.getter();
        sub_100017910(v44);
        swift_release();
        sub_100025AB8();
        v38();
        sub_100025AB8();
        v38();
        sub_100025AB8();
        v38();
        goto LABEL_42;
      }
      sub_100025AB8();
      v38();
      sub_100025AB8();
      v38();
      uint64_t v55 = v71;
LABEL_67:
      ((void (*)(char *, uint64_t))v38)(v55, v14);
      goto LABEL_68;
    }
    if (qword_100218C58 != -1) {
      swift_once();
    }
    uint64_t v45 = type metadata accessor for Logger();
    sub_10002A10C(v45, (uint64_t)qword_100236C50);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v73 + 16))(v66, v37, v14);
    unint64_t v46 = Logger.logObject.getter();
    int v47 = static os_log_type_t.error.getter();
    BOOL v48 = os_log_type_enabled(v46, (os_log_type_t)v47);
    uint64_t v49 = v71;
    if (v48)
    {
      LODWORD(v74) = v47;
      uint64_t v50 = swift_slowAlloc();
      uint64_t v51 = swift_slowAlloc();
      v76[0] = v51;
      *(_DWORD *)uint64_t v50 = 136315394;
      uint64_t v73 = v51;
      if (v64 > 0x13)
      {
        uint64_t v52 = +[NSString stringWithFormat:@"(unknown: %i)", v64];
      }
      else
      {
        switch(v63)
        {
          case 1:
            uint64_t v52 = @"SafariAutoFill";
            break;
          case 2:
            uint64_t v52 = @"Crowdsourcing";
            break;
          case 3:
            uint64_t v52 = @"SpotlightResultFeatures";
            break;
          case 4:
            uint64_t v52 = @"SafariAutoPlay";
            break;
          case 5:
            uint64_t v52 = @"Trystero";
            break;
          case 6:
            uint64_t v52 = @"EngagedCompletionFeatures";
            break;
          case 7:
            uint64_t v52 = @"ProactiveEventTracker";
            break;
          case 8:
            uint64_t v52 = @"PhiDES";
            break;
          case 9:
            uint64_t v52 = @"DuetExpert";
            break;
          case 10:
            uint64_t v52 = @"UserReport";
            break;
          case 11:
            uint64_t v52 = @"Usage";
            break;
          case 12:
            uint64_t v52 = @"FeedbackV2";
            break;
          case 13:
            uint64_t v52 = @"FeedbackV2PB";
            break;
          case 14:
            uint64_t v52 = @"ProactiveEventTrackerAggregated";
            break;
          case 15:
            uint64_t v52 = @"Handwashing";
            break;
          case 16:
            uint64_t v52 = @"Experiments";
            break;
          case 17:
            uint64_t v52 = @"FeatureQuality";
            break;
          case 18:
            uint64_t v52 = @"OnDeviceAnalytics";
            break;
          case 19:
            uint64_t v52 = @"ModelFeedback";
            break;
          default:
            uint64_t v52 = @"unknown";
            break;
        }
        uint64_t v56 = v52;
      }
      uint64_t v57 = v52;
      uint64_t v58 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v60 = v59;

      uint64_t v75 = sub_10001C274(v58, v60, v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v50 + 12) = 2080;
      uint64_t v61 = URL.lastPathComponent.getter();
      uint64_t v75 = sub_10001C274(v61, v62, v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100025AB8();
      v38();
      _os_log_impl((void *)&_mh_execute_header, v46, (os_log_type_t)v74, "error persisting custom feedback at %s/%s", (uint8_t *)v50, 0x16u);
      swift_arrayDestroy();
      sub_100017D40();
      sub_100017D40();

      uint64_t v49 = v71;
      if (!v28) {
        goto LABEL_66;
      }
    }
    else
    {
      sub_100025AB8();
      v38();

      if (!v28)
      {
LABEL_66:
        sub_100025AB8();
        v38();
        sub_100025AB8();
        v38();
        uint64_t v55 = v49;
        goto LABEL_67;
      }
    }
    sub_10003CAF4();
    uint64_t v53 = swift_allocError();
    *uint64_t v54 = 3;
    swift_retain();
    sub_1000EE0E0(v53);
    swift_release();
    sub_100025AB8();
    v38();
    sub_100025AB8();
    v38();
    sub_100025AB8();
    v38();
    swift_errorRelease();
    goto LABEL_42;
  }
  sub_100025628((uint64_t)v13, &qword_10021BB20);
  if (v28)
  {
    sub_10003CAF4();
    uint64_t v30 = swift_allocError();
    *uint64_t v31 = 8;
    swift_retain();
    sub_1000EE0E0(v30);
    swift_errorRelease();
    swift_release();
LABEL_42:
    sub_1000EE124();
    swift_release();
  }
LABEL_68:
  sub_10000DFB8();
}

uint64_t sub_1000EB0C0(uint64_t result, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 16);
  if (v2)
  {
    unint64_t v3 = *(void *)(result + 16);
    if (!v3) {
      return 1;
    }
    if (*(unsigned __int8 *)(a2 + 32) != *(unsigned __int8 *)(result + 32)) {
      return 0;
    }
    uint64_t v4 = 0;
    uint64_t v5 = result + 33;
    unint64_t v6 = v3 - 1;
    while (v2 - 1 != v4)
    {
      unint64_t result = v6 == v4;
      if (v6 != v4)
      {
        int v7 = *(unsigned __int8 *)(a2 + 33 + v4);
        int v8 = *(unsigned __int8 *)(v5 + v4++);
        if (v7 == v8) {
          continue;
        }
      }
      return result;
    }
  }
  else
  {
    unint64_t v3 = *(void *)(result + 16);
  }
  if (v2 == v3) {
    return 1;
  }
  if (v2 < v3) {
    return 0;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000EB144()
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  Swift::String_optional v0 = String.Iterator.next()();
  if (v0.value._object)
  {
    uint64_t countAndFlagsBits = v0.value._countAndFlagsBits;
    object = v0.value._object;
    while (1)
    {
      Swift::String_optional v3 = String.Iterator.next()();
      if (!v3.value._object) {
        break;
      }
      if (countAndFlagsBits == v3.value._countAndFlagsBits && object == v3.value._object)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v5 & 1) == 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return 0;
        }
      }
      Swift::String_optional v6 = String.Iterator.next()();
      uint64_t countAndFlagsBits = v6.value._countAndFlagsBits;
      object = v6.value._object;
      if (!v6.value._object) {
        goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
LABEL_12:
    swift_bridgeObjectRelease();
    int v7 = String.Iterator.next()().value._object;
    swift_bridgeObjectRelease();
    BOOL v8 = v7 == 0;
    swift_bridgeObjectRelease();
  }
  return v8;
}

uint64_t sub_1000EB2A8()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10004CD40(v0, qword_100236C50);
  sub_10002A10C(v0, (uint64_t)qword_100236C50);
  return Logger.init(subsystem:category:)();
}

void NSFileManager.sessionFiles.getter()
{
  sub_10000DFE0();
  uint64_t v1 = v0;
  uint64_t v2 = sub_10002572C(&qword_10021BB20);
  uint64_t v3 = sub_100016544(v2);
  __chkstk_darwin(v3);
  sub_100024A64();
  uint64_t v6 = v4 - v5;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v67 - v8;
  uint64_t v10 = type metadata accessor for URL();
  sub_100020C48();
  uint64_t v12 = v11;
  __chkstk_darwin(v13);
  sub_100017D2C();
  uint64_t v76 = v14;
  sub_10000E100();
  __chkstk_darwin(v15);
  sub_100021308();
  uint64_t v77 = v16;
  sub_10000E100();
  __chkstk_darwin(v17);
  sub_100021308();
  uint64_t v75 = v18;
  sub_10000E100();
  __chkstk_darwin(v19);
  sub_100021308();
  uint64_t v70 = v20;
  sub_10000E100();
  __chkstk_darwin(v21);
  uint64_t v23 = (char *)&v67 - v22;
  NSFileManager.parsecdSessionFBDirectoryURL.getter();
  sub_1000184F4((uint64_t)v9, 1, v10);
  if (v24)
  {
    sub_100025628((uint64_t)v9, &qword_10021BB20);
  }
  else
  {
    long long v78 = *(void (**)(void))(v12 + 32);
    uint64_t v79 = v12 + 32;
    sub_10000E0F4();
    v25();
    URL._bridgeToObjectiveC()(v26);
    uint64_t v28 = v27;
    sub_10002572C(&qword_10021E668);
    uint64_t v29 = swift_allocObject();
    *(_OWORD *)(v29 + 16) = xmmword_1001A3830;
    *(void *)(v29 + 32) = NSURLCreationDateKey;
    *(void *)(v29 + 40) = NSURLFileSizeKey;
    uint64_t v80 = 0;
    uint64_t v30 = NSURLCreationDateKey;
    uint64_t v31 = NSURLFileSizeKey;
    id v32 = sub_1000F0B48((uint64_t)v28, v29, 0, (uint64_t)&v80, v1);

    id v33 = v80;
    if (v32)
    {
      uint64_t v68 = v23;
      uint64_t v34 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
      id v35 = v33;

      uint64_t v80 = _swiftEmptyArrayStorage;
      uint64_t v36 = v78;
      uint64_t v37 = v70;
      uint64_t v74 = *(void *)(v34 + 16);
      if (v74)
      {
        unint64_t v38 = 0;
        uint64_t v72 = (void *)(v12 + 16);
        uint64_t v73 = v12;
        uint64_t v69 = v12 + 8;
        uint64_t v71 = v34;
        while (1)
        {
          if (v38 >= *(void *)(v34 + 16)) {
            __break(1u);
          }
          unint64_t v39 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
          uint64_t v40 = *(void *)(v12 + 72);
          (*(void (**)(uint64_t, unint64_t, uint64_t))(v12 + 16))(v6, v34 + v39 + v40 * v38, v10);
          sub_100023CA8(v6, 0);
          sub_1000184F4(v6, 1, v10);
          if (v24) {
            break;
          }
          uint64_t v41 = v6;
          sub_100023D64();
          v36();
          uint64_t v42 = v37;
          uint64_t v43 = URL.lastPathComponent.getter();
          uint64_t v44 = v36;
          unint64_t v46 = v45;
          type metadata accessor for SessionFilename();
          swift_allocObject();
          uint64_t v47 = SessionFilename.init(fromString:)(v43, v46);
          swift_release();
          if (v47)
          {
            sub_100023D64();
            v44();
            BOOL v48 = v80;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              sub_100019C04();
              BOOL v48 = v80;
            }
            uint64_t v12 = v73;
            uint64_t v6 = v41;
            unint64_t v50 = v48[2];
            unint64_t v49 = v48[3];
            uint64_t v34 = v71;
            if (v50 >= v49 >> 1)
            {
              sub_1000EE564(v49 > 1, v50 + 1, 1);
              BOOL v48 = v80;
            }
            v48[2] = v50 + 1;
            uint64_t v36 = v78;
            ((void (*)(char *, void, uint64_t))v78)((char *)v48 + v39 + v50 * v40, v75, v10);
            uint64_t v80 = v48;
            uint64_t v37 = v70;
          }
          else
          {
            sub_10000E040();
            v51();
            uint64_t v36 = v44;
            uint64_t v12 = v73;
            uint64_t v37 = v42;
            uint64_t v6 = v41;
            uint64_t v34 = v71;
          }
          if (v74 == ++v38) {
            goto LABEL_17;
          }
        }
      }
      else
      {
LABEL_17:
        sub_100023CA8(v6, 1);
      }
      swift_bridgeObjectRelease();
      sub_100025628(v6, &qword_10021BB20);
      uint64_t v52 = v80;
      uint64_t v53 = v80[2];
      if (v53)
      {
        uint64_t v80 = _swiftEmptyArrayStorage;
        sub_1000EE564(0, v53, 0);
        sub_10002B154();
        uint64_t v72 = v52;
        uint64_t v74 = v54;
        uint64_t v75 = v55;
        uint64_t v56 = (char *)v52 + v54;
        uint64_t v57 = v12 + 16;
        uint64_t v58 = *(void *)(v12 + 72);
        unint64_t v59 = (void (**)(uint64_t, uint64_t))(v57 - 8);
        uint64_t v73 = (v57 - 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
        do
        {
          uint64_t v60 = v76;
          v75(v76, v56, v10);
          URL.standardizedFileURL.getter();
          uint64_t v61 = *v59;
          (*v59)(v60, v10);
          unint64_t v62 = v80;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_100019C04();
            unint64_t v62 = v80;
          }
          unint64_t v64 = v62[2];
          unint64_t v63 = v62[3];
          if (v64 >= v63 >> 1)
          {
            sub_1000EE564(v63 > 1, v64 + 1, 1);
            unint64_t v62 = v80;
          }
          v62[2] = v64 + 1;
          sub_10000E0F4();
          v65();
          uint64_t v80 = v62;
          v56 += v58;
          --v53;
        }
        while (v53);
        swift_release();
      }
      else
      {
        swift_release();
        uint64_t v61 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
      }
      v61((uint64_t)v68, v10);
    }
    else
    {
      uint64_t v66 = v80;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      swift_errorRelease();
      (*(void (**)(char *, uint64_t))(v12 + 8))(v23, v10);
    }
  }
  sub_10000DFB8();
}

Swift::Void __swiftcall NSFileManager.parsec_cleanup()()
{
  uint64_t v3 = v0;
  uint64_t v4 = sub_10002572C(&qword_10021BB10);
  uint64_t v5 = sub_100016544(v4);
  __chkstk_darwin(v5);
  sub_100017DE0();
  uint64_t v178 = type metadata accessor for Date();
  sub_100020C48();
  uint64_t v181 = v6;
  __chkstk_darwin(v7);
  sub_100024A64();
  unint64_t v10 = v8 - v9;
  __chkstk_darwin(v11);
  sub_10001D79C((uint64_t)v164 - v12);
  uint64_t v13 = sub_10002572C(&qword_10021E670);
  uint64_t v14 = sub_100016544(v13);
  __chkstk_darwin(v14);
  sub_10000E04C();
  sub_10001D79C(v15);
  uint64_t v185 = type metadata accessor for URLResourceValues();
  sub_100020C48();
  *(void *)&long long v180 = v16;
  __chkstk_darwin(v17);
  sub_10000E04C();
  sub_10001D79C(v18);
  uint64_t v19 = sub_10002572C(&qword_10021BB20);
  uint64_t v20 = sub_100016544(v19);
  __chkstk_darwin(v20);
  sub_100017D2C();
  sub_100024A74();
  uint64_t v22 = __chkstk_darwin(v21);
  char v24 = (char *)v164 - v23;
  __chkstk_darwin(v22);
  sub_100021308();
  sub_100024A74();
  __chkstk_darwin(v25);
  uint64_t v27 = (void (*)(uint64_t, char *, uint64_t))((char *)v164 - v26);
  uint64_t v28 = type metadata accessor for URL();
  sub_100020C48();
  uint64_t v195 = v29;
  __chkstk_darwin(v30);
  sub_100017D2C();
  sub_100024A74();
  __chkstk_darwin(v31);
  sub_100021308();
  sub_100024A74();
  __chkstk_darwin(v32);
  sub_100021308();
  sub_100024A74();
  __chkstk_darwin(v33);
  sub_100021308();
  sub_100024A74();
  __chkstk_darwin(v34);
  sub_100021308();
  sub_100024A74();
  __chkstk_darwin(v35);
  sub_100021308();
  sub_100024A74();
  __chkstk_darwin(v36);
  sub_100021308();
  sub_100024A74();
  __chkstk_darwin(v37);
  sub_100021308();
  sub_100024A74();
  __chkstk_darwin(v38);
  sub_100021308();
  sub_100024A74();
  __chkstk_darwin(v39);
  sub_10001D79C((uint64_t)v164 - v40);
  if (qword_100218C58 != -1) {
    goto LABEL_80;
  }
  while (1)
  {
    uint64_t v41 = type metadata accessor for Logger();
    uint64_t v190 = sub_10002A10C(v41, (uint64_t)qword_100236C50);
    uint64_t v42 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.debug.getter();
    BOOL v44 = sub_100019BAC(v43);
    uint64_t v189 = v24;
    if (v44)
    {
      unint64_t v45 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v45 = 0;
      _os_log_impl((void *)&_mh_execute_header, v42, (os_log_type_t)v1, "Cleaning up", v45, 2u);
      sub_100017D40();
    }

    NSFileManager.parsecdSessionFBDirectoryURL.getter();
    sub_1000184F4((uint64_t)v27, 1, v28);
    if (v133)
    {
      sub_100025628((uint64_t)v27, &qword_10021BB20);
      return;
    }
    unint64_t v171 = v10;
    uint64_t v1 = (uint64_t)v195;
    unint64_t v46 = (char *)v195[4];
    uint64_t v47 = v188;
    uint64_t v202 = (char *)(v195 + 4);
    uint64_t v194 = v46;
    sub_10000E0F4();
    v48();
    URL._bridgeToObjectiveC()(v49);
    uint64_t v51 = v50;
    uint64_t v173 = sub_10002572C(&qword_10021E668);
    uint64_t v52 = swift_allocObject();
    *(_OWORD *)(v52 + 16) = xmmword_1001A3830;
    *(void *)(v52 + 32) = NSURLCreationDateKey;
    *(void *)(v52 + 40) = NSURLFileSizeKey;
    v205[0] = 0;
    uint64_t v172 = NSURLCreationDateKey;
    uint64_t v53 = NSURLFileSizeKey;
    id v54 = sub_1000F0B48((uint64_t)v51, v52, 0, (uint64_t)v205, v3);

    id v55 = v205[0];
    if (!v54)
    {
      id v63 = v205[0];
      _convertNSErrorToError(_:)();

      swift_willThrow();
      swift_errorRelease();
      (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v47, v28);
      return;
    }
    uint64_t v56 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    id v57 = v55;

    unint64_t v10 = v186;
    URL.appendingPathComponent(_:isDirectory:)();
    URL._bridgeToObjectiveC()(v58);
    uint64_t v60 = v59;
    v205[0] = 0;
    unsigned int v61 = [v3 removeItemAtURL:v59 error:v205];

    if (v61)
    {
      id v62 = v205[0];
    }
    else
    {
      id v64 = v205[0];
      _convertNSErrorToError(_:)();

      swift_willThrow();
      swift_errorRelease();
    }
    uint64_t v174 = 0;
    uint64_t v65 = v195;
    sub_100029918();
    uint64_t v27 = (void (*)(uint64_t, char *, uint64_t))v194;
    char v24 = v199;
    uint64_t v170 = v2;
    uint64_t v169 = v3;
    v205[0] = _swiftEmptyArrayStorage;
    uint64_t v193 = *(void *)(v56 + 16);
    if (!v193) {
      break;
    }
    unint64_t v2 = 0;
    unint64_t v192 = (unint64_t)(v65 + 2);
    *(void *)&long long v187 = v65 + 1;
    unint64_t v191 = v56;
    while (v2 < *(void *)(v56 + 16))
    {
      unint64_t v10 = (*((unsigned __int8 *)v65 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v65 + 80);
      ((void (*)(char *, unint64_t, uint64_t))v65[2])(v24, v56 + v10 + v65[9] * v2, v28);
      sub_10002538C((uint64_t)v24, 0, 1, v28);
      sub_1000184F4((uint64_t)v24, 1, v28);
      if (v133)
      {
        uint64_t v3 = v200;
        goto LABEL_28;
      }
      uint64_t v56 = v198;
      uint64_t v66 = v24;
      char v24 = v202;
      v27(v198, v66, v28);
      URL.lastPathComponent.getter();
      char v67 = sub_1000EB144();
      swift_bridgeObjectRelease();
      if (v67)
      {
        v27(v196, (char *)v56, v28);
        uint64_t v68 = v205[0];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1000EE564(0, v68[2] + 1, 1);
          uint64_t v68 = v205[0];
        }
        sub_10002EBC8();
        unint64_t v70 = v68[2];
        unint64_t v69 = v68[3];
        if (v70 >= v69 >> 1)
        {
          sub_1000EE564(v69 > 1, v70 + 1, 1);
          uint64_t v68 = v205[0];
        }
        v68[2] = v70 + 1;
        uint64_t v27 = (void (*)(uint64_t, char *, uint64_t))v194;
        sub_10000E0F4();
        ((void (*)(void))v27)();
        v205[0] = v68;
        uint64_t v65 = v195;
      }
      else
      {
        sub_100026350();
        sub_10000E040();
        v71();
        sub_10002EBC8();
      }
      ++v2;
      uint64_t v1 = v197;
      uint64_t v3 = v200;
      if (v193 == v2) {
        goto LABEL_26;
      }
    }
    __break(1u);
LABEL_80:
    swift_once();
  }
  uint64_t v3 = v200;
LABEL_26:
  sub_1000297EC();
LABEL_28:
  swift_bridgeObjectRelease();
  sub_100025628((uint64_t)v24, &qword_10021BB20);
  id v175 = v205[0];
  uint64_t v72 = *((void *)v205[0] + 2);
  uint64_t v73 = (uint64_t)v189;
  if (v72)
  {
    uint64_t v198 = v195[2];
    sub_10002B154();
    uint64_t v75 = (uint64_t)v175 + v74;
    uint64_t v196 = (uint64_t)(v76 - 8);
    uint64_t v199 = v76;
    uint64_t v193 = *((void *)v76 + 7);
    uint64_t v168 = (void (**)(uint64_t, NSObject *, uint64_t))(v180 + 32);
    v164[3] = v181 + 32;
    uint64_t v167 = (uint64_t *)(v181 + 8);
    uint64_t v166 = (void (**)(uint64_t, uint64_t))(v180 + 8);
    v164[2] = &v203;
    *(void *)&long long v77 = 136315138;
    long long v187 = v77;
    uint64_t v181 = (char *)&type metadata for Any + 8;
    v164[1] = "t.telemetry:string2,public}s";
    unint64_t v192 = 0x80000001001B72F0;
    long long v180 = xmmword_1001A2A20;
    do
    {
      sub_10002C344();
      v78();
      sub_10002538C(v73, 0, 1, v28);
      sub_1000184F4(v73, 1, v28);
      if (v133) {
        goto LABEL_78;
      }
      sub_10000E0F4();
      ((void (*)(void))v27)();
      uint64_t v79 = URL.lastPathComponent.getter();
      unint64_t v81 = v80;
      type metadata accessor for SessionFilename();
      swift_allocObject();
      uint64_t v82 = SessionFilename.init(fromString:)(v79, v81);
      if (v82)
      {
        uint64_t v83 = (void (*)(NSObject *, uint64_t))v82;
        unint64_t v84 = (unsigned char *)(v82 + OBJC_IVAR____TtC7parsecd15SessionFilename_uploadPending);
        swift_beginAccess();
        if (*v84)
        {
LABEL_33:
          sub_100026350();
          sub_10000E040();
          v85();
          swift_release();
        }
        else
        {
          uint64_t v96 = (char *)v83 + OBJC_IVAR____TtC7parsecd15SessionFilename_state;
          swift_beginAccess();
          switch(*v96)
          {
            case 1:
              uint64_t v103 = v183;
              sub_10002C344();
              v104();
              uint64_t v105 = sub_100021D24();
              os_log_type_t v106 = static os_log_type_t.debug.getter();
              if (sub_100019BAC(v106))
              {
                uint64_t v107 = sub_100017D90();
                uint64_t v108 = sub_10001AB54();
                sub_1000284A4(v108);
                unint64_t v191 = v105;
                uint64_t v109 = URL.lastPathComponent.getter();
                *(void *)(v107 + 4) = sub_10002B160(v109, v110);
                swift_bridgeObjectRelease();
                uint64_t v111 = *(void (**)(void))v196;
                sub_100024400();
                v111();
                uint64_t v112 = v191;
                uint64_t v113 = v191;
                os_log_type_t v114 = v1;
                uint64_t v115 = "Closed session file is ready for processing: %s.";
                goto LABEL_45;
              }
              swift_release();

              sub_1000288F8();
              uint64_t v121 = v103;
              goto LABEL_48;
            case 2:
              goto LABEL_33;
            case 3:
              sub_10002C344();
              v116();
              uint64_t v112 = sub_100021D24();
              os_log_type_t v117 = static os_log_type_t.debug.getter();
              uint64_t v1 = v117;
              if (os_log_type_enabled(v112, v117))
              {
                uint64_t v107 = sub_100017D90();
                uint64_t v118 = sub_10001AB54();
                sub_1000284A4(v118);
                uint64_t v119 = URL.lastPathComponent.getter();
                *(void *)(v107 + 4) = sub_10002B160(v119, v120);
                swift_bridgeObjectRelease();
                uint64_t v111 = *(void (**)(void))v196;
                sub_100024400();
                v111();
                uint64_t v113 = v112;
                os_log_type_t v114 = v1;
                uint64_t v115 = "Ignoring file in uploaded state, but you might want to delete it: %s.";
LABEL_45:
                _os_log_impl((void *)&_mh_execute_header, v113, v114, v115, (uint8_t *)v107, 0xCu);
                swift_arrayDestroy();
                uint64_t v27 = (void (*)(uint64_t, char *, uint64_t))v194;
                sub_100017D40();
                uint64_t v73 = (uint64_t)v189;
                sub_100017D40();
                swift_release();

                sub_100024400();
                v111();
              }
              else
              {
                swift_release();

                sub_1000288F8();
                uint64_t v121 = v3;
LABEL_48:
                v83(v121, v28);
                uint64_t v122 = sub_10002B2F4((uint64_t)&v207);
                ((void (*)(uint64_t))v83)(v122);
              }
              goto LABEL_49;
            default:
              uint64_t inited = swift_initStackObject();
              *(_OWORD *)(inited + 16) = v180;
              uint64_t v98 = v172;
              *(void *)(inited + 32) = v172;
              uint64_t v99 = v98;
              sub_1000EEA20(inited);
              uint64_t v1 = v100;
              uint64_t v3 = v184;
              uint64_t v101 = v174;
              URL.resourceValues(forKeys:)();
              if (v101)
              {
                swift_errorRelease();
                swift_bridgeObjectRelease();
                sub_10002538C((uint64_t)v3, 1, 1, v185);
                uint64_t v174 = 0;
LABEL_52:
                sub_100029584();
                sub_100025628(v123, &qword_10021E670);
LABEL_53:
                sub_10002C344();
                v124();
                uint64_t v125 = (uint8_t *)sub_100021D24();
                os_log_type_t v126 = static os_log_type_t.debug.getter();
                if (sub_100019BAC(v126))
                {
                  uint64_t v127 = sub_100017D90();
                  unint64_t v191 = sub_10001AB54();
                  sub_1000284A4((uint64_t)v191);
                  uint64_t v165 = v125;
                  uint64_t v128 = URL.lastPathComponent.getter();
                  *(void *)(v127 + 4) = sub_10002B160(v128, v129);
                  swift_bridgeObjectRelease();
                  uint64_t v130 = *(void (**)(void))v196;
                  (*(void (**)(uint64_t, uint64_t))v196)(v101, v28);
                  uint64_t v131 = (uint8_t *)v165;
                  _os_log_impl((void *)&_mh_execute_header, v165, (os_log_type_t)v1, "Leaving open session file %s.", (uint8_t *)v127, 0xCu);
                  uint64_t v1 = (uint64_t)v191;
                  swift_arrayDestroy();
                  sub_100017D40();
                  uint64_t v73 = (uint64_t)v189;
                  sub_100017D40();
                  swift_release();

                  ((void (*)(uint64_t, uint64_t))v130)(v201, v28);
                }
                else
                {
                  swift_release();

                  sub_1000288F8();
                  v83(v101, v28);
                  uint64_t v132 = sub_10002B2F4((uint64_t)&v207);
                  ((void (*)(uint64_t))v83)(v132);
                }
                sub_100029918();
LABEL_57:
                uint64_t v27 = (void (*)(uint64_t, char *, uint64_t))v194;
                break;
              }
              uint64_t v174 = 0;
              swift_bridgeObjectRelease();
              uint64_t v1 = v185;
              sub_10002538C((uint64_t)v3, 0, 1, v185);
              sub_1000184F4((uint64_t)v3, 1, v1);
              if (v133) {
                goto LABEL_52;
              }
              (*v168)(v179, v3, v1);
              uint64_t v101 = v170;
              URLResourceValues.creationDate.getter();
              uint64_t v3 = v178;
              sub_1000184F4(v101, 1, (uint64_t)v178);
              if (v133)
              {
                sub_100026350();
                sub_10000E040();
                v134();
                sub_100025628(v101, &qword_10021BB10);
                sub_100029584();
                goto LABEL_53;
              }
              sub_100026350();
              uint64_t v135 = sub_100023D58();
              v136(v135);
              Date.init()();
              Date.timeIntervalSince(_:)();
              double v138 = v137;
              uint64_t v1 = *v167;
              sub_100024400();
              ((void (*)(void))v1)();
              if ((~*(void *)&v138 & 0x7FF0000000000000) == 0)
              {
                __break(1u);
LABEL_82:
                __break(1u);
LABEL_83:
                __break(1u);
              }
              uint64_t v101 = v182;
              if (v138 <= -9.22337204e18) {
                goto LABEL_82;
              }
              uint64_t v3 = v200;
              if (v138 >= 9.22337204e18) {
                goto LABEL_83;
              }
              if ((uint64_t)v138 < 1801)
              {
                uint64_t v148 = sub_100017F50();
                ((void (*)(uint64_t))v1)(v148);
                (*v166)(v179, v185);
                goto LABEL_53;
              }
              uint64_t v139 = v176;
              sub_10002C344();
              v140();
              id v141 = (uint8_t *)sub_100021D24();
              os_log_type_t v142 = static os_log_type_t.debug.getter();
              if (os_log_type_enabled((os_log_t)v141, v142))
              {
                unint64_t v143 = (uint8_t *)sub_100017D90();
                unint64_t v191 = sub_10001AB54();
                uint64_t v206 = (uint64_t)v191;
                *(_DWORD *)unint64_t v143 = v187;
                v164[0] = v143 + 4;
                uint64_t v165 = v141;
                uint64_t v144 = URL.lastPathComponent.getter();
                uint64_t v146 = sub_10002B160(v144, v145);
                sub_1000254BC(v146);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease();
                uint64_t v147 = *(void (**)(void))v196;
                sub_100024400();
                v147();
                id v141 = (uint8_t *)v165;
                _os_log_impl((void *)&_mh_execute_header, v165, v142, "Moving possible orphaned open session file to closed: %s.", v143, 0xCu);
                swift_arrayDestroy();
                sub_100017D40();
                sub_100017D40();
              }
              else
              {
                uint64_t v147 = *(void (**)(void))v196;
                (*(void (**)(uint64_t, uint64_t))v196)(v139, v28);
              }

              uint64_t v149 = v174;
              uint64_t v150 = v177;
              NSFileManager.parsec_renameForStateChange(sessionFile:toState:)((uint64_t)v83, 1u, v177);
              if (!v149)
              {
                uint64_t v174 = 0;
                swift_release();
                sub_100025628(v150, &qword_10021BB20);
                uint64_t v156 = sub_100017F50();
                ((void (*)(uint64_t))v1)(v156);
                sub_100026350();
                sub_10000E040();
                v157();
                sub_100024400();
                v147();
                uint64_t v73 = (uint64_t)v189;
                sub_100029918();
                uint64_t v3 = v200;
                goto LABEL_57;
              }
              unint64_t v191 = v147;
              swift_errorRetain();
              swift_errorRetain();
              uint64_t v3 = sub_100021D24();
              os_log_type_t v151 = static os_log_type_t.error.getter();
              uint64_t v73 = v151;
              if (os_log_type_enabled(v3, v151))
              {
                unint64_t v152 = (uint8_t *)sub_100017D90();
                uint64_t v174 = sub_10001AB54();
                uint64_t v206 = v174;
                uint64_t v165 = v152;
                *(_DWORD *)unint64_t v152 = v187;
                v164[0] = v152 + 4;
                swift_getErrorValue();
                uint64_t v153 = Error.localizedDescription.getter();
                uint64_t v155 = sub_10002B160(v153, v154);
                sub_1000254BC(v155);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease();
                swift_errorRelease();
                swift_errorRelease();
                _os_log_impl((void *)&_mh_execute_header, v3, (os_log_type_t)v73, "error renaming session file %s", (uint8_t *)v165, 0xCu);
                swift_arrayDestroy();
                sub_100017D40();
                sub_100017D40();
              }
              else
              {
                swift_errorRelease();
                swift_errorRelease();
              }

              sub_100025030();
              uint64_t v27 = (void (*)(uint64_t, char *, uint64_t))v194;
              NSFileManager.parsec_removeItemOrLogError(at:message:)();
              swift_release();
              swift_errorRelease();
              uint64_t v158 = sub_100017F50();
              ((void (*)(uint64_t))v1)(v158);
              sub_10000E040();
              v159();
              sub_100024400();
              v160();
              uint64_t v174 = 0;
LABEL_49:
              sub_100029918();
              break;
          }
        }
      }
      else
      {
        sub_10002C344();
        v86();
        uint64_t v87 = sub_100021D24();
        os_log_type_t v88 = static os_log_type_t.debug.getter();
        uint64_t v73 = v88;
        BOOL v89 = os_log_type_enabled(v87, v88);
        uint64_t v3 = (v196 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000);
        if (v89)
        {
          unint64_t v191 = v75;
          uint64_t v90 = v72;
          uint64_t v91 = (void (**)(uint64_t, uint64_t))v196;
          uint64_t v92 = swift_slowAlloc();
          uint64_t v206 = sub_10001AB54();
          *(_DWORD *)uint64_t v92 = v187;
          uint64_t v93 = URL.lastPathComponent.getter();
          *(void *)(v92 + 4) = sub_10002B160(v93, v94);
          swift_bridgeObjectRelease();
          unint64_t v95 = (void (*)(void))*v91;
          (*v91)(v1, v28);
          uint64_t v72 = v90;
          uint64_t v75 = (uint64_t)v191;
          _os_log_impl((void *)&_mh_execute_header, v87, (os_log_type_t)v73, "Unable to parse filename %s into a SessionFilename object.", (uint8_t *)v92, 0xCu);
          swift_arrayDestroy();
          uint64_t v27 = (void (*)(uint64_t, char *, uint64_t))v194;
          sub_100017D40();
          sub_100017D40();
        }
        else
        {
          unint64_t v95 = *(void (**)(void))v196;
          (*(void (**)(uint64_t, uint64_t))v196)(v1, v28);
        }

        uint64_t v102 = v201;
        NSFileManager.parsec_removeItemOrLogError(at:message:)();
        ((void (*)(uint64_t, uint64_t))v95)(v102, v28);
        sub_100025030();
      }
      v75 += v193;
      --v72;
    }
    while (v72);
  }
  sub_1000297EC();
LABEL_78:
  swift_release();
  uint64_t v161 = (void (*)(uint64_t))v195[1];
  uint64_t v162 = sub_10002B2F4((uint64_t)v204);
  v161(v162);
  uint64_t v163 = sub_10002B2F4((uint64_t)&v206);
  v161(v163);
}

void NSFileManager.parsec_removeItemOrLogError(at:message:)()
{
  sub_10000DFE0();
  unint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = type metadata accessor for URL();
  sub_100020C48();
  uint64_t v7 = v6;
  __chkstk_darwin(v8);
  sub_100017DE0();
  URL.standardizedFileURL.getter();
  URL.path.getter();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0, v5);
  sub_100023D58();
  uint64_t v9 = String.utf8CString.getter();
  LODWORD(v5) = unlink((const char *)(v9 + 32));
  swift_release();
  if (v5 == noErr.getter())
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    if (qword_100218C58 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_10002A10C(v10, (uint64_t)qword_100236C50);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 136315650;
      swift_bridgeObjectRetain();
      sub_10001C274(v4, v2, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v13 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v14 = sub_100023D58();
      sub_10001C274(v14, v15, v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v13 + 22) = 1024;
      errno.getter();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%s: at path %s errno: %d)", (uint8_t *)v13, 0x1Cu);
      swift_arrayDestroy();
      sub_100017D40();
      sub_100017D40();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
  }
  sub_10000DFB8();
}

uint64_t NSFileManager.parsec_renameForStateChange(sessionFile:toState:)@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v65 = a3;
  unsigned int v63 = a2;
  uint64_t v64 = a1;
  uint64_t v5 = sub_10002572C(&qword_10021BB20);
  uint64_t v6 = sub_100016544(v5);
  __chkstk_darwin(v6);
  sub_100024A64();
  uint64_t v9 = v7 - v8;
  __chkstk_darwin(v10);
  sub_100021308();
  uint64_t v62 = v11;
  sub_10000E100();
  __chkstk_darwin(v12);
  sub_10002EAD4();
  __chkstk_darwin(v13);
  unint64_t v15 = (char *)&v56 - v14;
  uint64_t v16 = type metadata accessor for URL();
  sub_100020C48();
  uint64_t v18 = v17;
  __chkstk_darwin(v19);
  sub_100024A64();
  __chkstk_darwin(v20);
  sub_100021308();
  uint64_t v61 = v21;
  sub_10000E100();
  uint64_t v23 = __chkstk_darwin(v22);
  uint64_t v25 = (char *)&v56 - v24;
  __chkstk_darwin(v23);
  uint64_t v27 = (char *)&v56 - v26;
  NSFileManager.parsecdSessionFBDirectoryURL.getter();
  sub_10001664C(v4);
  if (v29)
  {
    sub_100025628(v4, &qword_10021BB20);
    sub_100023ED8((uint64_t)v15, 1);
LABEL_6:
    uint64_t v30 = (uint64_t)v15;
    goto LABEL_7;
  }
  uint64_t v57 = v9;
  id v59 = v3;
  uint64_t v60 = v27;
  SessionFilename.filenameString.getter();
  URL.appendingPathComponent(_:)();
  swift_bridgeObjectRelease();
  uint64_t v28 = *(void (**)(void))(v18 + 8);
  sub_1000275A8();
  v28();
  URL.standardizedFileURL.getter();
  uint64_t v58 = v28;
  ((void (*)(char *, uint64_t))v28)(v25, v16);
  sub_100023ED8((uint64_t)v15, 0);
  sub_10001664C((uint64_t)v15);
  if (v29) {
    goto LABEL_6;
  }
  uint64_t v35 = *(void (**)(void))(v18 + 32);
  uint64_t v34 = v18 + 32;
  uint64_t v36 = v60;
  uint64_t v37 = v15;
  uint64_t v38 = v35;
  ((void (*)(char *, char *, uint64_t))v35)(v60, v37, v16);
  uint64_t v39 = (unsigned char *)(v64 + OBJC_IVAR____TtC7parsecd15SessionFilename_state);
  swift_beginAccess();
  char v40 = v63;
  char v41 = sub_1000B97A4(*v39, v63);
  if (v41)
  {
    uint64_t v32 = v65;
    ((void (*)(uint64_t, char *, uint64_t))v38)(v65, v36, v16);
LABEL_12:
    uint64_t v31 = 0;
    return sub_100023ED8(v32, v31);
  }
  uint64_t v42 = v38;
  *uint64_t v39 = v40;
  uint64_t v43 = v57;
  NSFileManager.parsecdSessionFBDirectoryURL.getter();
  sub_10001664C(v43);
  if (v29)
  {
    sub_100025628(v43, &qword_10021BB20);
    uint64_t v45 = v62;
    sub_100023ED8(v62, 1);
    BOOL v44 = v58;
  }
  else
  {
    SessionFilename.filenameString.getter();
    URL.appendingPathComponent(_:)();
    swift_bridgeObjectRelease();
    BOOL v44 = v58;
    ((void (*)(uint64_t, uint64_t))v58)(v43, v16);
    uint64_t v45 = v62;
    URL.standardizedFileURL.getter();
    sub_1000275A8();
    v44();
    sub_100023ED8(v45, 0);
    sub_10001664C(v45);
    if (!v46)
    {
      uint64_t v64 = v34;
      sub_10000E0F4();
      v42();
      URL._bridgeToObjectiveC()(v47);
      unint64_t v49 = v48;
      URL._bridgeToObjectiveC()(v50);
      uint64_t v52 = v51;
      id v66 = 0;
      unsigned int v53 = [v59 moveItemAtURL:v49 toURL:v51 error:&v66];

      if (!v53)
      {
        id v55 = v66;
        _convertNSErrorToError(_:)();

        swift_willThrow();
        sub_1000275A8();
        v44();
        sub_1000275A8();
        return ((uint64_t (*)(void))v44)();
      }
      id v54 = v66;
      sub_1000275A8();
      v44();
      uint64_t v32 = v65;
      sub_10000E0F4();
      v42();
      goto LABEL_12;
    }
  }
  sub_1000275A8();
  v44();
  uint64_t v30 = v45;
LABEL_7:
  sub_100025628(v30, &qword_10021BB20);
  uint64_t v31 = 1;
  uint64_t v32 = v65;
  return sub_100023ED8(v32, v31);
}

void *NSFileManager.parsec_getPrunedSessionFiles(maximum:)(uint64_t a1)
{
  NSFileManager.sessionFiles.getter();
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3 > a1)
  {
    unint64_t v4 = v3 - a1 / 2;
    if (__OFSUB__(v3, a1 / 2))
    {
      __break(1u);
    }
    else
    {
      uint64_t v9 = v2;
      swift_bridgeObjectRetain();
      sub_1000EEC7C(&v9);
      swift_bridgeObjectRelease();
      if ((v4 & 0x8000000000000000) == 0)
      {
        uint64_t v5 = v9;
        if (*(void *)(v9 + 16) >= v4)
        {
          uint64_t v6 = type metadata accessor for URL();
          sub_1000213F4(v6);
          return sub_1000EA560(v5, v5 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)), 0, (2 * v4) | 1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t))sub_10011AA10);
        }
        goto LABEL_10;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
    unint64_t result = (void *)swift_release();
    __break(1u);
    return result;
  }
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

uint64_t sub_1000ED7A8(uint64_t a1, void (*a2)(char *, uint64_t, uint64_t))
{
  uint64_t v61 = a2;
  uint64_t v2 = sub_10002572C(&qword_10021BB10);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  id v59 = (char *)&v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v64 = (char *)&v52 - v5;
  uint64_t v66 = type metadata accessor for Date();
  uint64_t v63 = *(void *)(v66 - 8);
  uint64_t v6 = __chkstk_darwin(v66);
  uint64_t v58 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v62 = (char *)&v52 - v8;
  uint64_t v9 = sub_10002572C(&qword_10021E670);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  uint64_t v12 = (char *)&v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v52 - v13;
  uint64_t v15 = type metadata accessor for URLResourceValues();
  uint64_t v65 = *(void *)(v15 - 8);
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v52 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v52 - v19;
  uint64_t v21 = sub_10002572C(&qword_10021E668);
  uint64_t inited = swift_initStackObject();
  long long v60 = xmmword_1001A2A20;
  *(_OWORD *)(inited + 16) = xmmword_1001A2A20;
  *(void *)(inited + 32) = NSURLCreationDateKey;
  uint64_t v23 = NSURLCreationDateKey;
  sub_1000EEA20(inited);
  uint64_t v24 = v67;
  URL.resourceValues(forKeys:)();
  if (!v24)
  {
    id v55 = v23;
    uint64_t v56 = v21;
    unsigned int v53 = v18;
    uint64_t v57 = v12;
    char v67 = v20;
    uint64_t v25 = v66;
    swift_bridgeObjectRelease();
    sub_10002538C((uint64_t)v14, 0, 1, v15);
    if (sub_100027BA4((uint64_t)v14, 1, v15) == 1) {
      goto LABEL_4;
    }
    uint64_t v54 = 0;
    uint64_t v29 = v65;
    uint64_t v30 = v67;
    uint64_t v52 = *(void (**)(char *, char *, uint64_t))(v65 + 32);
    v52(v67, v14, v15);
    uint64_t v31 = (uint64_t)v64;
    URLResourceValues.creationDate.getter();
    if (sub_100027BA4(v31, 1, v25) == 1)
    {
      (*(void (**)(char *, uint64_t))(v29 + 8))(v30, v15);
      uint64_t v32 = v31;
LABEL_9:
      sub_100025628(v32, &qword_10021BB10);
      char v27 = 1;
      return v27 & 1;
    }
    uint64_t v34 = (char *)(v63 + 32);
    uint64_t v33 = *(void (**)(char *, uint64_t, uint64_t))(v63 + 32);
    v33(v62, v31, v25);
    uint64_t v35 = swift_initStackObject();
    *(_OWORD *)(v35 + 16) = v60;
    uint64_t v36 = v55;
    *(void *)(v35 + 32) = v55;
    uint64_t v37 = v36;
    sub_1000EEA20(v35);
    uint64_t v38 = (uint64_t)v57;
    uint64_t v39 = v54;
    URL.resourceValues(forKeys:)();
    if (v39)
    {
      swift_errorRelease();
      swift_bridgeObjectRelease();
      sub_10002538C(v38, 1, 1, v15);
    }
    else
    {
      uint64_t v61 = v33;
      uint64_t v64 = v34;
      swift_bridgeObjectRelease();
      sub_10002538C(v38, 0, 1, v15);
      if (sub_100027BA4(v38, 1, v15) != 1)
      {
        uint64_t v54 = 0;
        char v41 = v53;
        v52(v53, (char *)v38, v15);
        uint64_t v42 = (uint64_t)v59;
        URLResourceValues.creationDate.getter();
        uint64_t v43 = v25;
        int v44 = sub_100027BA4(v42, 1, v25);
        char v46 = v62;
        uint64_t v45 = v63;
        uint64_t v47 = v67;
        if (v44 != 1)
        {
          unint64_t v49 = v58;
          v61(v58, v42, v43);
          char v27 = static Date.< infix(_:_:)();
          unint64_t v50 = *(void (**)(char *, uint64_t))(v45 + 8);
          v50(v49, v43);
          uint64_t v51 = *(void (**)(char *, uint64_t))(v65 + 8);
          v51(v53, v15);
          v50(v46, v43);
          v51(v47, v15);
          return v27 & 1;
        }
        BOOL v48 = *(void (**)(char *, uint64_t))(v65 + 8);
        v48(v41, v15);
        (*(void (**)(char *, uint64_t))(v45 + 8))(v46, v43);
        v48(v47, v15);
        uint64_t v32 = v42;
        goto LABEL_9;
      }
    }
    char v40 = v67;
    (*(void (**)(char *, uint64_t))(v63 + 8))(v62, v25);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v40, v15);
    uint64_t v26 = v38;
    goto LABEL_5;
  }
  swift_errorRelease();
  swift_bridgeObjectRelease();
  sub_10002538C((uint64_t)v14, 1, 1, v15);
LABEL_4:
  uint64_t v26 = (uint64_t)v14;
LABEL_5:
  sub_100025628(v26, &qword_10021E670);
  char v27 = 1;
  return v27 & 1;
}

Swift::Void __swiftcall NSFileManager.parsec_pruneSessionFiles(maximum:)(Swift::Int maximum)
{
  sub_10000DFE0();
  uint64_t v3 = v2;
  uint64_t v4 = type metadata accessor for URL();
  sub_100020C48();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10002572C(&qword_10021BB20);
  uint64_t v11 = sub_100016544(v10);
  __chkstk_darwin(v11);
  sub_100016550();
  uint64_t v19 = NSFileManager.parsec_getPrunedSessionFiles(maximum:)(v3);
  uint64_t v12 = v19[2];
  if (v12)
  {
    uint64_t v14 = *(void (**)(uint64_t, char *, uint64_t))(v6 + 16);
    uint64_t v13 = v6 + 16;
    uint64_t v20 = v14;
    sub_10002B154();
    uint64_t v16 = (char *)v19 + v15;
    uint64_t v17 = *(void *)(v13 + 56);
    while (1)
    {
      v20(v1, v16, v4);
      sub_100023CA8(v1, 0);
      sub_1000184F4(v1, 1, v4);
      if (v18) {
        break;
      }
      (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v9, v1, v4);
      NSFileManager.parsec_removeItemOrLogError(at:message:)();
      (*(void (**)(char *, uint64_t))(v13 - 8))(v9, v4);
      v16 += v17;
      if (!--v12) {
        goto LABEL_5;
      }
    }
  }
  else
  {
LABEL_5:
    sub_100023CA8(v1, 1);
  }
  swift_bridgeObjectRelease();
  sub_10000DFB8();
}

uint64_t NSFileManager.databaseURL.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_10002572C(&qword_10021BB20);
  uint64_t v4 = sub_100016544(v3);
  __chkstk_darwin(v4);
  sub_100016550();
  NSFileManager.parsecdAssetsDirectoryURL.getter();
  uint64_t v5 = type metadata accessor for URL();
  sub_1000184F4(v1, 1, v5);
  if (v6)
  {
    sub_100025628(v1, &qword_10021BB20);
    uint64_t v8 = 1;
  }
  else
  {
    URL.appendingPathComponent(_:isDirectory:)();
    sub_10000E040();
    v7();
    uint64_t v8 = 0;
  }
  return sub_10002538C(a1, v8, 1, v5);
}

uint64_t sub_1000EE0E0(uint64_t a1)
{
  *(void *)(v1 + qword_10021F4D8) = a1;
  swift_errorRetain();

  return swift_errorRelease();
}

void sub_1000EE124()
{
  if ((v0[81] & 1) == 0)
  {
    uint64_t v1 = &v0[*(void *)(*(void *)v0 + 472)];
    sub_100106A00(*(void *)v1, *((unsigned int *)v1 + 2));
    sub_10003214C();
    swift_bridgeObjectRelease();
    sub_10002572C((uint64_t *)&unk_10021BB00);
    uint64_t v2 = swift_allocObject();
    *(_OWORD *)(v2 + 16) = xmmword_1001A2A20;
    uint64_t v3 = *(void *)v1;
    *(void *)(v2 + 56) = &type metadata for Int;
    *(void *)(v2 + 64) = &protocol witness table for Int;
    *(void *)(v2 + 32) = v3;
    sub_100032150("bytesWritten=%{signpost.description:attribute,public}llu", 56, 2, v2);
    swift_bridgeObjectRelease();
    uint64_t v4 = *(os_unfair_lock_s **)(*(void *)&v0[*(void *)(*(void *)v0 + 152)] + 16);
    swift_retain();
    os_unfair_lock_lock(v4);
    if ((v0[81] & 1) == 0) {
      sub_100015DF0();
    }
    os_unfair_lock_unlock(v4);
    swift_release();
  }
}

void *sub_1000EE24C(uint64_t a1)
{
  if (a1 < 0)
  {
    sub_10001DDF0();
    unint64_t result = (void *)sub_10002647C();
    __break(1u);
  }
  else if (a1)
  {
    unint64_t result = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
    result[2] = a1;
  }
  else
  {
    return _swiftEmptyArrayStorage;
  }
  return result;
}

uint64_t sub_1000EE2C4(uint64_t a1)
{
  return sub_1000EE398(a1, (void (*)(void))&type metadata accessor for Trialpb_TrialExperiment);
}

uint64_t sub_1000EE2DC(uint64_t a1)
{
  return sub_1000EE398(a1, (void (*)(void))&type metadata accessor for URLQueryItem);
}

uint64_t sub_1000EE2F4(uint64_t a1)
{
  if (a1 < 0)
  {
    sub_10001DDF0();
    uint64_t result = sub_10002647C();
    __break(1u);
  }
  else
  {
    if (a1)
    {
      sub_10002572C(&qword_10021E678);
      uint64_t v2 = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
      v2[2] = a1;
    }
    else
    {
      uint64_t v2 = _swiftEmptyArrayStorage;
    }
    uint64_t v3 = sub_10002572C(&qword_10021E678);
    sub_1000213F4(v3);
    return (uint64_t)v2;
  }
  return result;
}

uint64_t sub_1000EE398(uint64_t a1, void (*a2)(void))
{
  if (a1 < 0)
  {
    sub_10001DDF0();
    uint64_t result = sub_10002647C();
    __break(1u);
  }
  else
  {
    if (a1)
    {
      a2(0);
      uint64_t v4 = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
      _OWORD v4[2] = a1;
    }
    else
    {
      uint64_t v4 = _swiftEmptyArrayStorage;
    }
    a2(0);
    sub_10002B154();
    return (uint64_t)v4;
  }
  return result;
}

void sub_1000EE464()
{
  sub_10002F0C8();
  void *v0 = v1;
}

void sub_1000EE484()
{
  sub_100119EC4();
  void *v0 = v1;
}

void sub_1000EE4A4(char a1, uint64_t a2, char a3)
{
  sub_100119FD8(a1, a2, a3, *v3);
  uint64_t *v3 = v4;
}

void sub_1000EE4C4(char a1, int64_t a2, char a3)
{
  sub_10011A090(a1, a2, a3, *v3);
  uint64_t *v3 = v4;
}

void sub_1000EE4E4(char a1, uint64_t a2, char a3)
{
  sub_10011A154(a1, a2, a3, *v3);
  uint64_t *v3 = v4;
}

void sub_1000EE504(char a1, uint64_t a2, char a3)
{
  sub_10011A31C(a1, a2, a3, *v3);
  uint64_t *v3 = v4;
}

void sub_1000EE524(char a1, uint64_t a2, char a3)
{
  sub_10011A364(a1, a2, a3, *v3);
  uint64_t *v3 = v4;
}

void sub_1000EE544()
{
  sub_10011A3AC();
  void *v0 = v1;
}

void sub_1000EE564(char a1, uint64_t a2, char a3)
{
  sub_10011A584(a1, a2, a3, *v3);
  uint64_t *v3 = v4;
}

uint64_t sub_1000EE584(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = _swiftEmptySetSingleton;
    goto LABEL_25;
  }
  sub_10002572C(&qword_10021C5D0);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v3 = (void *)result;
  uint64_t v24 = *(void *)(a1 + 16);
  if (!v24)
  {
LABEL_25:
    swift_bridgeObjectRelease();
    return (uint64_t)v3;
  }
  unint64_t v4 = 0;
  uint64_t v5 = result + 56;
  while (v4 < *(void *)(a1 + 16))
  {
    char v6 = (uint64_t *)(a1 + 32 + 16 * v4);
    uint64_t v8 = *v6;
    uint64_t v7 = v6[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v9 = -1 << *((unsigned char *)v3 + 32);
    unint64_t v10 = result & ~v9;
    unint64_t v11 = v10 >> 6;
    uint64_t v12 = *(void *)(v5 + 8 * (v10 >> 6));
    uint64_t v13 = 1 << v10;
    if (((1 << v10) & v12) != 0)
    {
      uint64_t v14 = v3[6];
      uint64_t v15 = (void *)(v14 + 16 * v10);
      BOOL v16 = *v15 == v8 && v15[1] == v7;
      if (v16 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      {
LABEL_11:
        uint64_t result = swift_bridgeObjectRelease();
        goto LABEL_22;
      }
      uint64_t v17 = ~v9;
      while (1)
      {
        unint64_t v10 = (v10 + 1) & v17;
        unint64_t v11 = v10 >> 6;
        uint64_t v12 = *(void *)(v5 + 8 * (v10 >> 6));
        uint64_t v13 = 1 << v10;
        if ((v12 & (1 << v10)) == 0) {
          break;
        }
        char v18 = (void *)(v14 + 16 * v10);
        if (*v18 != v8 || v18[1] != v7)
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_11;
      }
    }
    *(void *)(v5 + 8 * v11) = v13 | v12;
    uint64_t v20 = (void *)(v3[6] + 16 * v10);
    *uint64_t v20 = v8;
    v20[1] = v7;
    uint64_t v21 = v3[2];
    BOOL v22 = __OFADD__(v21, 1);
    uint64_t v23 = v21 + 1;
    if (v22) {
      goto LABEL_27;
    }
    v3[2] = v23;
LABEL_22:
    if (++v4 == v24) {
      goto LABEL_25;
    }
  }
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

void sub_1000EE754()
{
  sub_10000DFE0();
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for SessionType();
  sub_100020C48();
  uint64_t v33 = v3;
  __chkstk_darwin(v4);
  sub_100024A64();
  __chkstk_darwin(v5);
  uint64_t v37 = (char *)&v28 - v6;
  if (*(void *)(v1 + 16)
    && (sub_10002572C(&qword_10021E688), uint64_t v7 = static _SetStorage.allocate(capacity:)(),
                                         (uint64_t v32 = *(void *)(v1 + 16)) != 0))
  {
    unint64_t v8 = 0;
    sub_10002B154();
    uint64_t v31 = v1 + v9;
    uint64_t v35 = v10 + 16;
    uint64_t v36 = v11;
    uint64_t v12 = (void (**)(uint64_t))(v10 + 8);
    uint64_t v29 = v1;
    uint64_t v30 = (void (**)(uint64_t, char *, uint64_t))(v10 + 32);
    while (v8 < *(void *)(v1 + 16))
    {
      uint64_t v13 = *(void *)(v33 + 72);
      uint64_t v14 = *(void (**)(void))(v33 + 16);
      sub_1000296CC();
      v14();
      sub_1000F0BDC((unint64_t *)&qword_1002197A0, (void (*)(uint64_t))&type metadata accessor for SessionType);
      uint64_t v15 = dispatch thunk of Hashable._rawHashValue(seed:)() & ~(-1 << *(unsigned char *)(v7 + 32));
      sub_10002B04C();
      if ((v18 & v17) != 0)
      {
        unint64_t v34 = v8;
        uint64_t v20 = ~v19;
        while (1)
        {
          sub_1000296CC();
          v14();
          sub_1000F0BDC(&qword_1002197A8, (void (*)(uint64_t))&type metadata accessor for SessionType);
          char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
          BOOL v22 = *v12;
          uint64_t v23 = sub_100023D58();
          v22(v23);
          if (v21) {
            break;
          }
          uint64_t v15 = (v15 + 1) & v20;
          sub_10002B04C();
          if ((v17 & v18) == 0)
          {
            uint64_t v1 = v29;
            unint64_t v8 = v34;
            goto LABEL_10;
          }
        }
        ((void (*)(char *, uint64_t))v22)(v37, v2);
        uint64_t v1 = v29;
        unint64_t v8 = v34;
      }
      else
      {
LABEL_10:
        uint64_t v24 = v37;
        *(void *)(v36 + 8 * v16) = v18 | v17;
        (*v30)(*(void *)(v7 + 48) + v15 * v13, v24, v2);
        uint64_t v25 = *(void *)(v7 + 16);
        BOOL v26 = __OFADD__(v25, 1);
        uint64_t v27 = v25 + 1;
        if (v26) {
          goto LABEL_16;
        }
        *(void *)(v7 + 16) = v27;
      }
      if (++v8 == v32) {
        goto LABEL_14;
      }
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
  else
  {
LABEL_14:
    swift_bridgeObjectRelease();
    sub_10000DFB8();
  }
}

void sub_1000EEA20(uint64_t a1)
{
  uint64_t v1 = a1;
  if (!*(void *)(a1 + 16)
    || (sub_10002572C((uint64_t *)&unk_10021E690),
        uint64_t v2 = static _SetStorage.allocate(capacity:)(),
        uint64_t v3 = v2,
        (uint64_t v32 = *(void *)(v1 + 16)) == 0))
  {
LABEL_24:
    swift_bridgeObjectRelease();
    return;
  }
  unint64_t v4 = 0;
  uint64_t v5 = v2 + 56;
  uint64_t v30 = v1;
  uint64_t v31 = v1 + 32;
  while (v4 < *(void *)(v1 + 16))
  {
    uint64_t v6 = *(void **)(v31 + 8 * v4);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    Hasher.init(_seed:)();
    id v7 = v6;
    String.hash(into:)();
    Swift::Int v8 = Hasher._finalize()();
    swift_bridgeObjectRelease();
    uint64_t v9 = -1 << *(unsigned char *)(v3 + 32);
    unint64_t v10 = v8 & ~v9;
    unint64_t v11 = v10 >> 6;
    uint64_t v12 = *(void *)(v5 + 8 * (v10 >> 6));
    uint64_t v13 = 1 << v10;
    if (((1 << v10) & v12) != 0)
    {
      uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v16 = v15;
      if (v14 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v16 == v17)
      {
LABEL_21:
        swift_bridgeObjectRelease_n();
LABEL_22:

        goto LABEL_23;
      }
      char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v19) {
        goto LABEL_22;
      }
      uint64_t v20 = ~v9;
      while (1)
      {
        unint64_t v10 = (v10 + 1) & v20;
        unint64_t v11 = v10 >> 6;
        uint64_t v12 = *(void *)(v5 + 8 * (v10 >> 6));
        uint64_t v13 = 1 << v10;
        if ((v12 & (1 << v10)) == 0) {
          break;
        }
        uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v23 = v22;
        if (v21 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v23 == v24) {
          goto LABEL_21;
        }
        char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v26) {
          goto LABEL_22;
        }
      }
    }
    *(void *)(v5 + 8 * v11) = v13 | v12;
    *(void *)(*(void *)(v3 + 48) + 8 * v10) = v7;
    uint64_t v27 = *(void *)(v3 + 16);
    BOOL v28 = __OFADD__(v27, 1);
    uint64_t v29 = v27 + 1;
    if (v28) {
      goto LABEL_26;
    }
    *(void *)(v3 + 16) = v29;
LABEL_23:
    ++v4;
    uint64_t v1 = v30;
    if (v4 == v32) {
      goto LABEL_24;
    }
  }
  __break(1u);
LABEL_26:
  __break(1u);
}

void sub_1000EEC7C(uint64_t *a1)
{
  uint64_t v2 = *(void *)(type metadata accessor for URL() - 8);
  uint64_t v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_10011BEA0(v3);
    uint64_t v3 = v4;
  }
  Swift::Int v5 = *(void *)(v3 + 16);
  v6[0] = v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v5;
  sub_1000EED24(v6);
  *a1 = v3;
}

void sub_1000EED24(Swift::Int *a1)
{
  uint64_t v2 = sub_10002572C(&qword_10021BB10);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  uint64_t v181 = (char *)&v171 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  unint64_t v192 = (char *)&v171 - v5;
  uint64_t v196 = type metadata accessor for Date();
  uint64_t v214 = *(void *)(v196 - 8);
  uint64_t v6 = __chkstk_darwin(v196);
  uint64_t v178 = (char *)&v171 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v194 = (char *)&v171 - v8;
  uint64_t v9 = sub_10002572C(&qword_10021E670);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  uint64_t v12 = (char *)&v171 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v201 = (char *)&v171 - v13;
  uint64_t v208 = type metadata accessor for URLResourceValues();
  uint64_t v14 = *(void *)(v208 - 8);
  uint64_t v15 = __chkstk_darwin(v208);
  uint64_t v17 = (char *)&v171 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  unint64_t v19 = (unint64_t)&v171 - v18;
  uint64_t v20 = (void (*)(char *, uint64_t, uint64_t))type metadata accessor for URL();
  uint64_t v187 = *((void *)v20 - 1);
  uint64_t v21 = __chkstk_darwin(v20);
  uint64_t v183 = (char *)&v171 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v211 = (char *)&v171 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v215 = (char *)&v171 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v212 = (char *)&v171 - v28;
  uint64_t v29 = __chkstk_darwin(v27);
  id v175 = (void (*)(char *, uint64_t, uint64_t))((char *)&v171 - v30);
  uint64_t v31 = __chkstk_darwin(v29);
  uint64_t v33 = (char *)&v171 - v32;
  uint64_t v34 = __chkstk_darwin(v31);
  uint64_t v36 = (void (*)(char *, uint64_t, uint64_t))((char *)&v171 - v35);
  __chkstk_darwin(v34);
  uint64_t v176 = (char *)&v171 - v37;
  Swift::Int v38 = a1[1];
  Swift::Int v177 = _minimumMergeRunLength(_:)(v38);
  if (v177 >= v38)
  {
    if (v38 < 0) {
      goto LABEL_160;
    }
    if (v38) {
      sub_1000F00D4(0, v38, 1, a1);
    }
    return;
  }
  uint64_t v172 = sub_1000EE398(v38 / 2, (void (*)(void))&type metadata accessor for URL);
  uint64_t v186 = v39;
  uint64_t v173 = v38;
  if (v38 <= 0)
  {
    char v41 = (void (*)(char *, void (*)(char *, uint64_t, uint64_t)))_swiftEmptyArrayStorage;
    unint64_t v113 = _swiftEmptyArrayStorage[2];
LABEL_120:
    if (v113 >= 2)
    {
      Swift::Int v38 = *a1;
      do
      {
        unint64_t v165 = v113 - 2;
        if (v113 < 2) {
          goto LABEL_154;
        }
        if (!v38) {
          goto LABEL_168;
        }
        int64_t v166 = *((void *)v41 + 2 * v165 + 4);
        unint64_t v19 = *((void *)v41 + 2 * v113 + 3);
        uint64_t v167 = v216;
        sub_1000F0410(v38 + *(void *)(v187 + 72) * v166, v38 + *(void *)(v187 + 72) * *((void *)v41 + 2 * v113 + 2), v38 + *(void *)(v187 + 72) * v19, v186);
        uint64_t v216 = v167;
        if (v167) {
          goto LABEL_137;
        }
        if ((uint64_t)v19 < v166) {
          goto LABEL_155;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_10011B25C((uint64_t)v41);
          char v41 = v169;
        }
        if (v165 >= *((void *)v41 + 2)) {
          goto LABEL_156;
        }
        uint64_t v168 = (int64_t *)((char *)v41 + 16 * v165 + 32);
        *uint64_t v168 = v166;
        v168[1] = v19;
        uint64_t v20 = (void (*)(char *, uint64_t, uint64_t))*((void *)v41 + 2);
        if (v113 > (unint64_t)v20) {
          goto LABEL_157;
        }
        memmove((char *)v41 + 16 * v113 + 16, (char *)v41 + 16 * v113 + 32, 16 * ((void)v20 - v113));
        *((void *)v41 + 2) = (char *)v20 - 1;
        unint64_t v113 = (unint64_t)v20 - 1;
      }
      while ((unint64_t)v20 > 2);
    }
    swift_bridgeObjectRelease();
    if (v173 >= -1) {
      goto LABEL_138;
    }
    __break(1u);
LABEL_135:
    v41((char *)v20, (void (*)(char *, uint64_t, uint64_t))v19);
    v41((char *)v38, (void (*)(char *, uint64_t, uint64_t))v19);
LABEL_137:
    swift_bridgeObjectRelease();
    if (v173 < -1) {
      goto LABEL_162;
    }
LABEL_138:
    *(void *)(v172 + 16) = 0;
    swift_bridgeObjectRelease();
    return;
  }
  unint64_t v171 = v36;
  long long v180 = v33;
  unint64_t v197 = v19;
  uint64_t v179 = v17;
  Swift::Int v40 = 0;
  uint64_t v202 = v187 + 16;
  uint64_t v203 = (void (**)(char *, void (*)(char *, uint64_t, uint64_t)))(v187 + 8);
  uint64_t v213 = (Swift::Int *)(v187 + 32);
  NSURLResourceKey v199 = NSURLCreationDateKey;
  uint64_t v195 = (void (**)(unint64_t, uint64_t, uint64_t))(v14 + 32);
  uint64_t v190 = (void (**)(char *, uint64_t, uint64_t))(v214 + 32);
  uint64_t v188 = (void (**)(char *, uint64_t))(v214 + 8);
  unint64_t v191 = (void (**)(unint64_t, uint64_t))(v14 + 8);
  char v41 = (void (*)(char *, void (*)(char *, uint64_t, uint64_t)))_swiftEmptyArrayStorage;
  long long v205 = xmmword_1001A2A20;
  uint64_t v189 = v12;
  uint64_t v206 = v20;
  uint64_t v200 = a1;
  while (1)
  {
    Swift::Int v42 = v40 + 1;
    Swift::Int v184 = v40;
    if (v40 + 1 >= v38)
    {
      Swift::Int v57 = v177;
      goto LABEL_33;
    }
    Swift::Int v210 = v38;
    uint64_t v43 = (char *)*a1;
    uint64_t v44 = *(void *)(v187 + 72);
    Swift::Int v209 = v40 + 1;
    uint64_t v45 = *(void (**)(char *, char *, unint64_t))(v187 + 16);
    uint64_t v46 = (uint64_t)v176;
    v45(v176, &v43[v44 * v42], (unint64_t)v20);
    uint64_t v198 = v43;
    uint64_t v214 = v44;
    uint64_t v47 = &v43[v44 * v40];
    BOOL v48 = v171;
    v45((char *)v171, v47, (unint64_t)v20);
    uint64_t v49 = v216;
    int v50 = sub_1000ED7A8(v46, v48);
    uint64_t v216 = v49;
    if (v49)
    {
      uint64_t v170 = *v203;
      (*v203)((char *)v48, v20);
      v170((char *)v46, v20);
      goto LABEL_137;
    }
    int v51 = v50;
    uint64_t v174 = v41;
    unint64_t v19 = (unint64_t)v203;
    char v41 = *v203;
    (*v203)((char *)v48, v20);
    v41((char *)v46, v20);
    Swift::Int v52 = v40 + 2;
    Swift::Int v38 = v210;
    Swift::Int v207 = v40 + 2;
    if (v40 + 2 < v210)
    {
      v209 *= v214;
      unsigned int v53 = v198;
      uint64_t v204 = v214 * v52;
      uint64_t v20 = v175;
      while (1)
      {
        Swift::Int v38 = (Swift::Int)v180;
        unint64_t v19 = (unint64_t)v206;
        v45(v180, &v53[v204], (unint64_t)v206);
        v45((char *)v20, &v53[v209], v19);
        uint64_t v54 = v216;
        int v55 = sub_1000ED7A8(v38, v20);
        uint64_t v216 = v54;
        if (v54) {
          goto LABEL_135;
        }
        int v56 = v55;
        v41((char *)v20, (void (*)(char *, uint64_t, uint64_t))v19);
        v41((char *)v38, (void (*)(char *, uint64_t, uint64_t))v19);
        if ((v51 ^ v56)) {
          break;
        }
        v53 += v214;
        ++v207;
        Swift::Int v38 = v210;
        if (v207 >= v210)
        {
          Swift::Int v207 = v210;
          a1 = v200;
          Swift::Int v40 = v184;
          goto LABEL_14;
        }
      }
      a1 = v200;
      Swift::Int v40 = v184;
      Swift::Int v38 = v210;
    }
LABEL_14:
    char v41 = v174;
    Swift::Int v57 = v177;
    if (v51)
    {
      Swift::Int v42 = v207;
      if (v207 < v40) {
        goto LABEL_166;
      }
      if (v40 >= v207)
      {
        uint64_t v20 = v206;
      }
      else
      {
        uint64_t v58 = 0;
        uint64_t v59 = v214 * (v207 - 1);
        uint64_t v60 = v207 * v214;
        Swift::Int v61 = v40;
        uint64_t v62 = v40 * v214;
        do
        {
          if (v61 != v42 + v58 - 1)
          {
            uint64_t v63 = v198;
            if (!v198) {
              goto LABEL_169;
            }
            uint64_t v64 = &v198[v62];
            unint64_t v19 = (unint64_t)&v198[v59];
            uint64_t v65 = v206;
            Swift::Int v209 = *v213;
            ((void (*)(char *, char *, void))v209)(v183, &v198[v62], v206);
            if (v62 < v59 || v64 >= &v63[v60])
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v62 != v59)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            ((void (*)(char *, char *, void))v209)(&v63[v59], v183, v65);
            Swift::Int v42 = v207;
          }
          ++v61;
          --v58;
          v59 -= v214;
          v60 -= v214;
          v62 += v214;
        }
        while (v61 < v42 + v58);
        a1 = v200;
        char v41 = v174;
        uint64_t v20 = v206;
        Swift::Int v57 = v177;
        Swift::Int v40 = v184;
        Swift::Int v38 = v210;
      }
    }
    else
    {
      uint64_t v20 = v206;
      Swift::Int v42 = v207;
    }
LABEL_33:
    if (v42 < v38)
    {
      if (__OFSUB__(v42, v40)) {
        goto LABEL_161;
      }
      if (v42 - v40 < v57) {
        break;
      }
    }
LABEL_66:
    if (v42 < v40) {
      goto LABEL_159;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    Swift::Int v207 = v42;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_10011B190(0, *((void *)v41 + 2) + 1, 1, (char *)v41);
      char v41 = v163;
    }
    unint64_t v112 = *((void *)v41 + 2);
    unint64_t v111 = *((void *)v41 + 3);
    unint64_t v113 = v112 + 1;
    if (v112 >= v111 >> 1)
    {
      sub_10011B190(v111 > 1, v112 + 1, 1, (char *)v41);
      char v41 = v164;
    }
    *((void *)v41 + 2) = v113;
    os_log_type_t v114 = (void *)((char *)v41 + 32);
    uint64_t v115 = (Swift::Int *)((char *)v41 + 16 * v112 + 32);
    Swift::Int v116 = v207;
    *uint64_t v115 = v40;
    v115[1] = v116;
    if (v112)
    {
      while (1)
      {
        unint64_t v117 = v113 - 1;
        if (v113 >= 4)
        {
          uint64_t v122 = &v114[2 * v113];
          uint64_t v123 = *(v122 - 8);
          uint64_t v124 = *(v122 - 7);
          BOOL v128 = __OFSUB__(v124, v123);
          uint64_t v125 = v124 - v123;
          if (v128) {
            goto LABEL_144;
          }
          uint64_t v127 = *(v122 - 6);
          uint64_t v126 = *(v122 - 5);
          BOOL v128 = __OFSUB__(v126, v127);
          uint64_t v120 = v126 - v127;
          char v121 = v128;
          if (v128) {
            goto LABEL_145;
          }
          unint64_t v129 = v113 - 2;
          uint64_t v130 = &v114[2 * v113 - 4];
          uint64_t v132 = *v130;
          uint64_t v131 = v130[1];
          BOOL v128 = __OFSUB__(v131, v132);
          uint64_t v133 = v131 - v132;
          if (v128) {
            goto LABEL_146;
          }
          BOOL v128 = __OFADD__(v120, v133);
          uint64_t v134 = v120 + v133;
          if (v128) {
            goto LABEL_148;
          }
          if (v134 >= v125)
          {
            unint64_t v152 = &v114[2 * v117];
            uint64_t v154 = *v152;
            uint64_t v153 = v152[1];
            BOOL v128 = __OFSUB__(v153, v154);
            uint64_t v155 = v153 - v154;
            if (v128) {
              goto LABEL_158;
            }
            BOOL v145 = v120 < v155;
            goto LABEL_103;
          }
        }
        else
        {
          if (v113 != 3)
          {
            uint64_t v146 = *((void *)v41 + 4);
            uint64_t v147 = *((void *)v41 + 5);
            BOOL v128 = __OFSUB__(v147, v146);
            uint64_t v139 = v147 - v146;
            char v140 = v128;
            goto LABEL_97;
          }
          uint64_t v119 = *((void *)v41 + 4);
          uint64_t v118 = *((void *)v41 + 5);
          BOOL v128 = __OFSUB__(v118, v119);
          uint64_t v120 = v118 - v119;
          char v121 = v128;
        }
        if (v121) {
          goto LABEL_147;
        }
        unint64_t v129 = v113 - 2;
        uint64_t v135 = &v114[2 * v113 - 4];
        uint64_t v137 = *v135;
        uint64_t v136 = v135[1];
        BOOL v138 = __OFSUB__(v136, v137);
        uint64_t v139 = v136 - v137;
        char v140 = v138;
        if (v138) {
          goto LABEL_149;
        }
        id v141 = &v114[2 * v117];
        uint64_t v143 = *v141;
        uint64_t v142 = v141[1];
        BOOL v128 = __OFSUB__(v142, v143);
        uint64_t v144 = v142 - v143;
        if (v128) {
          goto LABEL_151;
        }
        if (__OFADD__(v139, v144)) {
          goto LABEL_153;
        }
        if (v139 + v144 >= v120)
        {
          BOOL v145 = v120 < v144;
LABEL_103:
          if (v145) {
            unint64_t v117 = v129;
          }
          goto LABEL_105;
        }
LABEL_97:
        if (v140) {
          goto LABEL_150;
        }
        uint64_t v148 = &v114[2 * v117];
        uint64_t v150 = *v148;
        uint64_t v149 = v148[1];
        BOOL v128 = __OFSUB__(v149, v150);
        uint64_t v151 = v149 - v150;
        if (v128) {
          goto LABEL_152;
        }
        if (v151 < v139) {
          goto LABEL_114;
        }
LABEL_105:
        unint64_t v156 = v117 - 1;
        if (v117 - 1 >= v113)
        {
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
LABEL_154:
          __break(1u);
LABEL_155:
          __break(1u);
LABEL_156:
          __break(1u);
LABEL_157:
          __break(1u);
LABEL_158:
          __break(1u);
LABEL_159:
          __break(1u);
LABEL_160:
          __break(1u);
LABEL_161:
          __break(1u);
LABEL_162:
          __break(1u);
LABEL_163:
          __break(1u);
          goto LABEL_164;
        }
        if (!*a1) {
          goto LABEL_167;
        }
        int v157 = v41;
        uint64_t v158 = &v114[2 * v156];
        uint64_t v159 = *v158;
        uint64_t v160 = &v114[2 * v117];
        uint64_t v161 = v160[1];
        uint64_t v162 = v216;
        sub_1000F0410(*a1 + *(void *)(v187 + 72) * *v158, *a1 + *(void *)(v187 + 72) * *v160, *a1 + *(void *)(v187 + 72) * v161, v186);
        uint64_t v216 = v162;
        if (v162) {
          goto LABEL_137;
        }
        if (v161 < v159) {
          goto LABEL_141;
        }
        if (v117 > *((void *)v157 + 2)) {
          goto LABEL_142;
        }
        uint64_t *v158 = v159;
        v114[2 * v156 + 1] = v161;
        unint64_t v19 = *((void *)v157 + 2);
        if (v117 >= v19) {
          goto LABEL_143;
        }
        char v41 = v157;
        unint64_t v113 = v19 - 1;
        memmove(&v114[2 * v117], v160 + 2, 16 * (v19 - 1 - v117));
        *((void *)v157 + 2) = v19 - 1;
        uint64_t v20 = v206;
        if (v19 <= 2) {
          goto LABEL_114;
        }
      }
    }
    unint64_t v113 = 1;
LABEL_114:
    Swift::Int v38 = a1[1];
    Swift::Int v40 = v207;
    if (v207 >= v38) {
      goto LABEL_120;
    }
  }
  if (__OFADD__(v40, v57)) {
    goto LABEL_163;
  }
  if (v40 + v57 >= v38) {
    Swift::Int v67 = v38;
  }
  else {
    Swift::Int v67 = v40 + v57;
  }
  if (v67 >= v40)
  {
    if (v42 == v67) {
      goto LABEL_66;
    }
    uint64_t v174 = v41;
    uint64_t v68 = *(void *)(v187 + 72);
    uint64_t v198 = *(char **)(v187 + 16);
    uint64_t v214 = v68 * (v42 - 1);
    uint64_t v204 = v68;
    unint64_t v69 = v42 * v68;
    Swift::Int v182 = v67;
    while (1)
    {
      Swift::Int v207 = v42;
      uint64_t v70 = 0;
      Swift::Int v71 = v40;
      do
      {
        Swift::Int v72 = *a1;
        unint64_t v19 = v69;
        Swift::Int v210 = v69 + v70;
        uint64_t v73 = (void (*)(char *, uint64_t, void))v198;
        ((void (*)(char *, unint64_t, void))v198)(v212, v69 + v70 + v72, v20);
        Swift::Int v209 = v214 + v70;
        v73(v215, v214 + v70 + v72, v20);
        sub_10002572C(&qword_10021E668);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = v205;
        NSURLResourceKey v75 = v199;
        *(void *)(inited + 32) = v199;
        uint64_t v76 = v75;
        sub_1000EEA20(inited);
        uint64_t v77 = (uint64_t)v201;
        uint64_t v78 = v216;
        URL.resourceValues(forKeys:)();
        if (v78)
        {
          swift_errorRelease();
          swift_bridgeObjectRelease();
          sub_10002538C(v77, 1, 1, v208);
          uint64_t v216 = 0;
          a1 = v200;
          uint64_t v79 = v77;
LABEL_48:
          uint64_t v82 = v79;
          goto LABEL_49;
        }
        uint64_t v216 = 0;
        swift_bridgeObjectRelease();
        uint64_t v80 = v208;
        sub_10002538C(v77, 0, 1, v208);
        int v81 = sub_100027BA4(v77, 1, v80);
        uint64_t v79 = v77;
        if (v81 == 1)
        {
          a1 = v200;
          goto LABEL_48;
        }
        unint64_t v87 = v197;
        uint64_t v193 = *v195;
        v193(v197, v79, v80);
        os_log_type_t v88 = v192;
        URLResourceValues.creationDate.getter();
        uint64_t v89 = (uint64_t)v88;
        uint64_t v90 = (uint64_t)v88;
        uint64_t v91 = v196;
        if (sub_100027BA4(v90, 1, v196) == 1)
        {
          (*v191)(v87, v208);
          uint64_t v92 = v89;
          goto LABEL_56;
        }
        uint64_t v93 = *v190;
        (*v190)(v194, v89, v91);
        uint64_t v94 = swift_initStackObject();
        *(_OWORD *)(v94 + 16) = v205;
        *(void *)(v94 + 32) = v76;
        unint64_t v95 = v76;
        sub_1000EEA20(v94);
        uint64_t v96 = (uint64_t)v189;
        uint64_t v97 = v216;
        URL.resourceValues(forKeys:)();
        if (v97)
        {
          swift_errorRelease();
          swift_bridgeObjectRelease();
          uint64_t v98 = v208;
          sub_10002538C(v96, 1, 1, v208);
          uint64_t v216 = 0;
LABEL_60:
          a1 = v200;
          (*v188)(v194, v196);
          (*v191)(v197, v98);
          uint64_t v82 = v96;
LABEL_49:
          sub_100025628(v82, &qword_10021E670);
LABEL_50:
          uint64_t v20 = v206;
          uint64_t v83 = *v203;
          (*v203)(v215, v206);
          v83(v212, v20);
          goto LABEL_51;
        }
        uint64_t v185 = v93;
        uint64_t v216 = 0;
        swift_bridgeObjectRelease();
        uint64_t v98 = v208;
        sub_10002538C(v96, 0, 1, v208);
        if (sub_100027BA4(v96, 1, v98) == 1) {
          goto LABEL_60;
        }
        uint64_t v99 = v179;
        v193((unint64_t)v179, v96, v98);
        uint64_t v100 = (uint64_t)v181;
        URLResourceValues.creationDate.getter();
        if (sub_100027BA4(v100, 1, v91) == 1)
        {
          uint64_t v101 = *v191;
          uint64_t v102 = v99;
          uint64_t v103 = v208;
          (*v191)((unint64_t)v102, v208);
          (*v188)(v194, v91);
          v101(v197, v103);
          uint64_t v92 = v100;
LABEL_56:
          sub_100025628(v92, &qword_10021BB10);
          a1 = v200;
          goto LABEL_50;
        }
        id v104 = v178;
        v185(v178, v100, v91);
        LODWORD(v193) = static Date.< infix(_:_:)();
        uint64_t v105 = *v188;
        (*v188)(v104, v91);
        os_log_type_t v106 = *v191;
        uint64_t v107 = v99;
        uint64_t v108 = v208;
        (*v191)((unint64_t)v107, v208);
        v105(v194, v91);
        v106(v197, v108);
        uint64_t v109 = *v203;
        uint64_t v20 = v206;
        (*v203)(v215, v206);
        v109(v212, v20);
        a1 = v200;
        if ((v193 & 1) == 0) {
          break;
        }
LABEL_51:
        Swift::Int v84 = *a1;
        if (!*a1) {
          goto LABEL_165;
        }
        char v85 = (char *)(v84 + v214 + v70);
        uint64_t v86 = (void (*)(char *, char *, void))*v213;
        ((void (*)(char *, unint64_t, void))*v213)(v211, v84 + v69 + v70, v20);
        swift_arrayInitWithTakeFrontToBack();
        v86(v85, v211, v20);
        v70 -= v204;
        ++v71;
      }
      while (v207 != v71);
      Swift::Int v42 = v207 + 1;
      v214 += v204;
      v69 += v204;
      Swift::Int v40 = v184;
      if (v207 + 1 == v182)
      {
        Swift::Int v42 = v182;
        char v41 = v174;
        goto LABEL_66;
      }
    }
  }
LABEL_164:
  __break(1u);
LABEL_165:
  __break(1u);
LABEL_166:
  __break(1u);
LABEL_167:
  __break(1u);
LABEL_168:
  __break(1u);
LABEL_169:
  __break(1u);
}

uint64_t sub_1000F00D4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = __chkstk_darwin(v10);
  Swift::Int v52 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v49 = (void (*)(char *, uint64_t, uint64_t))((char *)&v40 - v14);
  uint64_t result = __chkstk_darwin(v13);
  uint64_t v41 = a2;
  if (a3 != a2)
  {
    uint64_t v46 = (char *)&v40 - v16;
    unint64_t v19 = *(void (**)(void, void, void))(v17 + 16);
    uint64_t v18 = v17 + 16;
    uint64_t v20 = *(void *)(v18 + 56);
    uint64_t v44 = (void (**)(void (*)(char *, uint64_t, uint64_t), uint64_t))(v18 - 8);
    uint64_t v45 = v19;
    uint64_t v47 = v18;
    int v50 = (uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 16);
    uint64_t v54 = v20 * (a3 - 1);
    Swift::Int v42 = a4;
    uint64_t v43 = v20;
    uint64_t v53 = v20 * a3;
    uint64_t v40 = a1;
    while (2)
    {
      uint64_t v21 = 0;
      uint64_t v22 = a1;
      uint64_t v48 = a3;
      while (1)
      {
        uint64_t v51 = v22;
        uint64_t v23 = *a4;
        uint64_t v24 = v53 + v21 + *a4;
        uint64_t v25 = (uint64_t)v46;
        uint64_t v26 = v45;
        v45(v46, v24, v10);
        uint64_t v27 = v54 + v21 + v23;
        uint64_t v28 = v49;
        v26(v49, v27, v10);
        char v29 = sub_1000ED7A8(v25, v28);
        if (v5)
        {
          uint64_t v39 = *v44;
          (*v44)(v28, v10);
          return ((uint64_t (*)(uint64_t, uint64_t))v39)(v25, v10);
        }
        char v30 = v29;
        uint64_t v31 = v28;
        uint64_t v32 = *v44;
        (*v44)(v31, v10);
        uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v32)(v25, v10);
        if ((v30 & 1) == 0) {
          break;
        }
        uint64_t v33 = v42;
        uint64_t v34 = *v42;
        if (!*v42)
        {
          __break(1u);
          return result;
        }
        uint64_t v35 = v10;
        uint64_t v36 = (char *)(v34 + v54 + v21);
        uint64_t v37 = *v50;
        (*v50)(v52, v34 + v53 + v21, v35);
        swift_arrayInitWithTakeFrontToBack();
        uint64_t result = v37(v36, (uint64_t)v52, v35);
        v21 -= v43;
        uint64_t v22 = v51 + 1;
        uint64_t v38 = v48;
        a4 = v33;
        uint64_t v10 = v35;
        uint64_t v5 = 0;
        if (v48 == v51 + 1) {
          goto LABEL_10;
        }
      }
      uint64_t v38 = v48;
      a4 = v42;
      uint64_t v5 = 0;
LABEL_10:
      a3 = v38 + 1;
      v54 += v43;
      v53 += v43;
      a1 = v40;
      if (a3 != v41) {
        continue;
      }
      break;
    }
  }
  return result;
}

void sub_1000F0410(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v90 = *(void *)(v8 - 8);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (void (**)(void (*)(char *, uint64_t, uint64_t), uint64_t))((char *)&v82 - v11);
  __chkstk_darwin(v10);
  uint64_t v14 = __chkstk_darwin((char *)&v82 - v13);
  uint64_t v18 = *(void *)(v17 + 72);
  if (!v18)
  {
    __break(1u);
LABEL_87:
    __break(1u);
LABEL_88:
    __break(1u);
LABEL_89:
    __break(1u);
    goto LABEL_90;
  }
  int64_t v19 = a2 - a1;
  if (a2 - a1 == 0x8000000000000000 && v18 == -1) {
    goto LABEL_87;
  }
  uint64_t v21 = a2;
  uint64_t v22 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v18 == -1) {
    goto LABEL_88;
  }
  uint64_t v86 = (void (*)(char *, uint64_t, uint64_t))((char *)&v82 - v15);
  unint64_t v87 = v12;
  uint64_t v91 = (void (*)(char *, uint64_t, uint64_t))v14;
  unint64_t v94 = a3;
  uint64_t v24 = v19 / v18;
  uint64_t v25 = v22 / v18;
  uint64_t v89 = v18;
  if (v19 / v18 < v22 / v18)
  {
    unint64_t v26 = v21;
    sub_1001195B8(a1, v19 / v18, a4);
    unint64_t v27 = a4;
    unint64_t v28 = a4 + v24 * v18;
    if (v24 * v18 >= 1 && v26 < v94)
    {
      unint64_t v37 = v26;
      uint64_t v38 = *(void (**)(void))(v90 + 16);
      v90 += 16;
      unint64_t v87 = (void (**)(void (*)(char *, uint64_t, uint64_t), uint64_t))(v90 - 8);
      os_log_type_t v88 = v38;
      uint64_t v39 = (uint64_t)v86;
      uint64_t v95 = v8;
      unint64_t v93 = v28;
      while (1)
      {
        uint64_t v40 = v18;
        unint64_t v41 = v37;
        unint64_t v42 = v27;
        uint64_t v43 = v88;
        ((void (*)(uint64_t))v88)(v39);
        unint64_t v92 = v42;
        uint64_t v44 = v91;
        v43();
        uint64_t v45 = v96;
        char v46 = sub_1000ED7A8(v39, v44);
        uint64_t v96 = v45;
        if (v45) {
          break;
        }
        char v47 = v46;
        uint64_t v48 = *v87;
        (*v87)(v44, v8);
        v48((void (*)(char *, uint64_t, uint64_t))v39, v8);
        if (v47)
        {
          uint64_t v18 = v89;
          if (a1 < v41 || a1 >= v41 + v89)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (a1 != v41)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          unint64_t v37 = v41 + v18;
          unint64_t v27 = v92;
        }
        else
        {
          uint64_t v18 = v89;
          unint64_t v50 = v92 + v89;
          if (a1 < v92 || a1 >= v50)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (a1 != v92)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          unint64_t v27 = v50;
          unint64_t v37 = v41;
        }
        a1 += v18;
        unint64_t v28 = v93;
        if (v27 < v93)
        {
          uint64_t v8 = v95;
          if (v37 < v94) {
            continue;
          }
        }
        goto LABEL_16;
      }
      uint64_t v76 = *v87;
      (*v87)(v44, v8);
      v76((void (*)(char *, uint64_t, uint64_t))v39, v8);
      uint64_t v36 = v92;
      int64_t v77 = v93 - v92;
      if (v40 != -1 || v77 != 0x8000000000000000)
      {
        uint64_t v35 = v77 / v40;
        uint64_t v30 = a1;
        goto LABEL_27;
      }
LABEL_90:
      __break(1u);
      goto LABEL_91;
    }
LABEL_16:
    uint64_t v30 = a1;
    goto LABEL_22;
  }
  uint64_t v86 = v16;
  unint64_t v31 = v21;
  sub_1001195B8(v21, v22 / v18, a4);
  uint64_t v30 = v31;
  unint64_t v27 = a4;
  unint64_t v28 = a4 + v25 * v18;
  if (v25 * v18 < 1 || a1 >= v31)
  {
LABEL_22:
    int64_t v33 = v28 - v27;
    if (v18 != -1 || v33 != 0x8000000000000000)
    {
      uint64_t v35 = v33 / v18;
      uint64_t v36 = v27;
LABEL_27:
      sub_1001195B8(v36, v35, v30);
      return;
    }
    goto LABEL_89;
  }
  uint64_t v52 = -v18;
  uint64_t v53 = *(void (**)(void, void, uint64_t))(v90 + 16);
  v90 += 16;
  Swift::Int v84 = (void (**)(void (*)(char *, uint64_t, uint64_t), uint64_t))(v90 - 8);
  char v85 = v53;
  uint64_t v95 = v8;
  unint64_t v82 = a1;
  uint64_t v83 = -v18;
  unint64_t v92 = a4;
  while (1)
  {
    uint64_t v54 = v27;
    uint64_t v55 = v30;
    unint64_t v93 = v28;
    int v56 = (void (*)(void))(v28 + v52);
    uint64_t v57 = (uint64_t)v87;
    uint64_t v58 = v85;
    v85(v87, v28 + v52, v8);
    uint64_t v59 = v8;
    uint64_t v91 = (void (*)(char *, uint64_t, uint64_t))v55;
    uint64_t v60 = (void (*)(char *, uint64_t, uint64_t))(v55 + v52);
    Swift::Int v61 = v86;
    v58(v86, v60, v59);
    uint64_t v62 = v96;
    char v63 = sub_1000ED7A8(v57, v61);
    uint64_t v96 = v62;
    if (v62) {
      break;
    }
    uint64_t v64 = v52;
    char v65 = v63;
    os_log_type_t v88 = v56;
    uint64_t v66 = (void (*)(char *, uint64_t, uint64_t))v94;
    unint64_t v67 = v94 + v64;
    uint64_t v68 = *v84;
    (*v84)(v61, v59);
    v68((void (*)(char *, uint64_t, uint64_t))v57, v59);
    if (v65)
    {
      BOOL v69 = (unint64_t)v66 < (unint64_t)v91 || v67 >= (unint64_t)v91;
      unint64_t v70 = v67;
      if (v69)
      {
        swift_arrayInitWithTakeFrontToBack();
        uint64_t v91 = v60;
        unint64_t v27 = v92;
        unint64_t v28 = v93;
LABEL_65:
        uint64_t v18 = v89;
        uint64_t v52 = v83;
        goto LABEL_72;
      }
      unint64_t v27 = v92;
      uint64_t v18 = v89;
      uint64_t v52 = v83;
      if (v66 != v91)
      {
        unint64_t v73 = v92;
        swift_arrayInitWithTakeBackToFront();
        unint64_t v27 = v73;
      }
      uint64_t v91 = v60;
      unint64_t v28 = v93;
    }
    else
    {
      BOOL v71 = (unint64_t)v66 < v93 || v67 >= v93;
      unint64_t v70 = v67;
      if (v71)
      {
        Swift::Int v72 = v88;
        swift_arrayInitWithTakeFrontToBack();
        unint64_t v28 = (unint64_t)v72;
        unint64_t v27 = v92;
        goto LABEL_65;
      }
      unint64_t v27 = v92;
      uint64_t v52 = v83;
      uint64_t v74 = v88;
      if (v66 != (void (*)(char *, uint64_t, uint64_t))v93)
      {
        unint64_t v75 = v92;
        swift_arrayInitWithTakeBackToFront();
        unint64_t v27 = v75;
      }
      unint64_t v28 = (unint64_t)v74;
      uint64_t v18 = v89;
    }
LABEL_72:
    if (v28 <= v27)
    {
      uint64_t v30 = (uint64_t)v91;
      goto LABEL_22;
    }
    unint64_t v94 = v70;
    uint64_t v30 = (uint64_t)v91;
    uint64_t v8 = v95;
    if ((unint64_t)v91 <= v82) {
      goto LABEL_22;
    }
  }
  uint64_t v79 = *v84;
  (*v84)(v61, v59);
  v79((void (*)(char *, uint64_t, uint64_t))v57, v59);
  int64_t v80 = v93 - v54;
  if (v89 != -1 || v80 != 0x8000000000000000)
  {
    uint64_t v36 = v54;
    uint64_t v35 = v80 / v89;
    uint64_t v30 = (uint64_t)v91;
    goto LABEL_27;
  }
LABEL_91:
  __break(1u);
}

id sub_1000F0A6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  type metadata accessor for FileAttributeKey(0);
  sub_1000F0BDC((unint64_t *)&qword_100219240, type metadata accessor for FileAttributeKey);
  Class v8 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v9 = [a5 createFileAtPath:a1 contents:isa attributes:v8];

  return v9;
}

id sub_1000F0B48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  type metadata accessor for URLResourceKey(0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v10 = [a5 contentsOfDirectoryAtURL:a1 includingPropertiesForKeys:isa options:a3 error:a4];

  return v10;
}

uint64_t sub_1000F0BDC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000F0C24()
{
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000085EC;
  aBlock[3] = &unk_100200548;
  uint64_t v0 = _Block_copy(aBlock);
  uint64_t v1 = type metadata accessor for DispatchQoS();
  sub_100020C48();
  uint64_t v3 = v2;
  __chkstk_darwin(v4);
  sub_10000DFD0();
  uint64_t v7 = v6 - v5;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  type metadata accessor for DispatchWorkItemFlags();
  sub_100020C48();
  __chkstk_darwin(v8);
  sub_100017DE0();
  sub_10003045C();
  sub_10002572C((uint64_t *)&unk_10021BAF0);
  sub_1000301A0();
  sub_100021314();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v0);
  sub_100023C70();
  v9();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v7, v1);
  return swift_release();
}

void sub_1000F0DF8(uint64_t a1)
{
  uint64_t v3 = v1;
  type metadata accessor for QueryCacheSpan();
  sub_10001C20C(v1 + 16, (uint64_t)aBlock);
  uint64_t v5 = swift_retain();
  uint64_t v6 = sub_100100E1C(v5, 2, aBlock);
  uint64_t v7 = (uint64_t *)(a1 + OBJC_IVAR____TtC7parsecd15CachedResultSet_result);
  unint64_t v8 = *(void *)(a1 + OBJC_IVAR____TtC7parsecd15CachedResultSet_result + 24);
  if (!v8)
  {
    uint64_t v17 = 0;
LABEL_10:
    sub_100100F68(v17, 1);
    goto LABEL_12;
  }
  uint64_t v9 = v7[2];
  swift_bridgeObjectRetain();
  if (String.count.getter() < 1)
  {
    swift_bridgeObjectRelease();
    uint64_t v17 = 1;
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  uint64_t v10 = String.count.getter();
  swift_bridgeObjectRelease();
  if (String.count.getter() >= v10)
  {
    v26[2] = *(void *)(v3 + 88);
    uint64_t v18 = (void *)swift_allocObject();
    v18[2] = a1;
    v18[3] = v3;
    void v18[4] = v6;
    void v18[5] = v9;
    v18[6] = v8;
    void aBlock[4] = (uint64_t)sub_1000F4270;
    aBlock[5] = (uint64_t)v18;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1000085EC;
    aBlock[3] = (uint64_t)&unk_1002005C0;
    int64_t v19 = _Block_copy(aBlock);
    uint64_t v20 = type metadata accessor for DispatchQoS();
    v26[1] = v26;
    sub_100020C48();
    uint64_t v22 = v21;
    __chkstk_darwin(v23);
    sub_100017CD4();
    swift_retain();
    swift_retain();
    swift_retain();
    static DispatchQoS.unspecified.getter();
    type metadata accessor for DispatchWorkItemFlags();
    v26[0] = v26;
    sub_100020C48();
    __chkstk_darwin(v24);
    sub_100021208();
    unint64_t v27 = _swiftEmptyArrayStorage;
    sub_10003045C();
    sub_10002572C((uint64_t *)&unk_10021BAF0);
    sub_1000301A0();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v19);
    swift_release();
    sub_100023C70();
    v25();
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v2, v20);
  }
  else
  {
    sub_100100F68(2, 1);
    if (qword_100218B68 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_10002A10C(v11, (uint64_t)qword_100236A50);
    swift_retain_n();
    swift_bridgeObjectRetain();
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 136643075;
      swift_bridgeObjectRetain();
      unint64_t v27 = (void *)sub_10001C274(v9, v8, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v14 + 12) = 2085;
      uint64_t v15 = *v7;
      unint64_t v16 = v7[1];
      swift_bridgeObjectRetain();
      unint64_t v27 = (void *)sub_10001C274(v15, v16, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "BUG: NOT caching '%{sensitive}s' because input is longer than completed query '%{sensitive}s'", (uint8_t *)v14, 0x16u);
      swift_arrayDestroy();
      sub_100017D40();
      sub_100017D40();
      swift_release();

      return;
    }

    swift_release_n();
    swift_bridgeObjectRelease_n();
  }
LABEL_12:
  swift_release();
}

uint64_t sub_1000F12D4(void *a1, uint64_t a2)
{
  uint64_t v139 = a2;
  uint64_t v137 = type metadata accessor for URLQueryItem();
  sub_100020C48();
  uint64_t v128 = v5;
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v135 = (char *)&v121 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v121 - v10;
  __chkstk_darwin(v9);
  os_log_type_t v13 = (char *)&v121 - v12;
  uint64_t v14 = sub_10002572C((uint64_t *)&unk_10021D010);
  __chkstk_darwin(v14 - 8);
  sub_10000DFD0();
  uint64_t v17 = v16 - v15;
  uint64_t v18 = type metadata accessor for URLComponents();
  sub_100020C48();
  uint64_t v130 = v19;
  uint64_t v21 = __chkstk_darwin(v20);
  uint64_t v23 = (char *)&v121 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  unint64_t v129 = (char *)&v121 - v24;
  uint64_t v25 = sub_10002572C(&qword_10021DC60);
  __chkstk_darwin(v25 - 8);
  sub_10000DFD0();
  uint64_t v28 = v27 - v26;
  uint64_t v29 = sub_10002572C(&qword_10021BB20);
  __chkstk_darwin(v29 - 8);
  sub_100024ADC();
  uint64_t v138 = type metadata accessor for URL();
  sub_100020C48();
  uint64_t v132 = v30;
  __chkstk_darwin(v31);
  sub_10000DFD0();
  uint64_t v131 = v33 - v32;
  uint64_t v34 = sub_1000F40EC(a1);
  if (v34)
  {
    uint64_t v35 = *(void *)(v34 + 16);
    swift_bridgeObjectRelease();
    if (v35) {
      return 0;
    }
  }
  uint64_t v126 = v18;
  type metadata accessor for QueryCacheSpan();
  uint64_t v134 = v2;
  sub_10001C20C(v2 + 16, (uint64_t)&v141);
  uint64_t v37 = swift_retain();
  uint64_t v133 = sub_100100E1C(v37, 1, &v141);
  [a1 scale];
  uint64_t v39 = v38;
  id v40 = [a1 queryString];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  Swift::String v136 = String.lowercased()();
  swift_bridgeObjectRelease();
  sub_100008B84(v139, v28, &qword_10021DC60);
  uint64_t v41 = type metadata accessor for URLRequest();
  if (sub_100027BA4(v28, 1, v41) == 1)
  {
    sub_100025628(v28, &qword_10021DC60);
    sub_10002538C(v3, 1, 1, v138);
LABEL_7:
    uint64_t v44 = &qword_10021BB20;
    uint64_t v45 = v3;
LABEL_8:
    sub_100025628(v45, v44);
    goto LABEL_9;
  }
  URLRequest.url.getter();
  sub_10000E040();
  v42();
  uint64_t v43 = v138;
  if (sub_100027BA4(v3, 1, v138) == 1) {
    goto LABEL_7;
  }
  uint64_t v65 = v132;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v132 + 32))(v131, v3, v43);
  uint64_t v66 = self;
  URL._bridgeToObjectiveC()(v67);
  BOOL v69 = v68;
  id v70 = objc_msgSend(v66, "parsec_componentsWithURL:resolvingAgainstBaseURL:", v68, 0);

  if (!v70)
  {
    sub_10002538C(v17, 1, 1, v126);
    goto LABEL_29;
  }
  static URLComponents._unconditionallyBridgeFromObjectiveC(_:)();

  BOOL v71 = *(void (**)(uint64_t, char *, uint64_t))(v130 + 32);
  Swift::Int v72 = v23;
  uint64_t v73 = v126;
  v71(v17, v72, v126);
  sub_10002538C(v17, 0, 1, v73);
  if (sub_100027BA4(v17, 1, v73) == 1)
  {
LABEL_29:
    uint64_t v87 = sub_1000275B8();
    v88(v87);
    uint64_t v44 = (uint64_t *)&unk_10021D010;
    uint64_t v45 = v17;
    goto LABEL_8;
  }
  v71((uint64_t)v129, (char *)v17, v73);
  uint64_t v74 = URLComponents.queryItems.getter();
  if (v74)
  {
    uint64_t v75 = v74;
    uint64_t v76 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v78 = v77;
    uint64_t v79 = *(void *)(v75 + 16);
    uint64_t v124 = v75;
    if (v79)
    {
      uint64_t v80 = v76;
      uint64_t v127 = *(void (**)(char *, unint64_t, uint64_t))(v128 + 16);
      unint64_t v81 = v75 + ((*(unsigned __int8 *)(v128 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v128 + 80));
      uint64_t v125 = *(void *)(v128 + 72);
      swift_bridgeObjectRetain();
      uint64_t v82 = v137;
      while (1)
      {
        v127(v13, v81, v82);
        if (URLQueryItem.name.getter() == v80 && v83 == v78)
        {
          sub_10002CE04();
          swift_bridgeObjectRelease();
          goto LABEL_34;
        }
        char v85 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v85) {
          break;
        }
        uint64_t v82 = v137;
        sub_10002C364();
        v86();
        v81 += v125;
        if (!--v79)
        {
          swift_bridgeObjectRelease();
          uint64_t v75 = v124;
          swift_bridgeObjectRelease();
          sub_100021408();
          goto LABEL_35;
        }
      }
      sub_10002CE04();
      uint64_t v82 = v137;
LABEL_34:
      uint64_t v122 = URLQueryItem.value.getter();
      uint64_t v123 = v92;
      sub_10002C364();
      v93();
      swift_bridgeObjectRelease();
      uint64_t v75 = v124;
LABEL_35:
      uint64_t v65 = v132;
    }
    else
    {
      swift_bridgeObjectRelease();
      sub_100021408();
      uint64_t v82 = v137;
    }
    uint64_t v94 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v96 = v95;
    uint64_t v97 = *(void *)(v75 + 16);
    if (v97)
    {
      uint64_t v98 = v94;
      uint64_t v127 = *(void (**)(char *, unint64_t, uint64_t))(v128 + 16);
      unint64_t v99 = v75 + ((*(unsigned __int8 *)(v128 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v128 + 80));
      uint64_t v125 = *(void *)(v128 + 72);
      swift_bridgeObjectRetain();
      while (1)
      {
        v127(v11, v99, v82);
        if (URLQueryItem.name.getter() == v98 && v100 == v96)
        {
          sub_10002CE04();
          swift_bridgeObjectRelease();
          goto LABEL_48;
        }
        char v102 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v102) {
          break;
        }
        uint64_t v82 = v137;
        sub_10002C364();
        v103();
        v99 += v125;
        if (!--v97)
        {
          swift_bridgeObjectRelease();
          uint64_t v75 = v124;
          goto LABEL_45;
        }
      }
      sub_10002CE04();
      uint64_t v82 = v137;
LABEL_48:
      uint64_t v127 = (void (*)(char *, unint64_t, uint64_t))URLQueryItem.value.getter();
      uint64_t v47 = v104;
      sub_10002C364();
      v105();
      swift_bridgeObjectRelease();
      uint64_t v75 = v124;
    }
    else
    {
LABEL_45:
      swift_bridgeObjectRelease();
      uint64_t v127 = 0;
      uint64_t v47 = 0;
    }
    uint64_t v106 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v108 = v107;
    uint64_t v109 = *(void *)(v75 + 16);
    uint64_t v110 = v75;
    unint64_t v111 = v135;
    if (v109)
    {
      unint64_t v112 = *(void (**)(char *, unint64_t, uint64_t))(v128 + 16);
      unint64_t v113 = v110 + ((*(unsigned __int8 *)(v128 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v128 + 80));
      uint64_t v128 = *(void *)(v128 + 72);
      swift_bridgeObjectRetain();
      while (1)
      {
        v112(v111, v113, v82);
        if (URLQueryItem.name.getter() == v106 && v114 == v108)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t countAndFlagsBits = v136._countAndFlagsBits;
          object = v136._object;
          goto LABEL_62;
        }
        char v116 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v116) {
          break;
        }
        unint64_t v111 = v135;
        uint64_t v82 = v137;
        sub_10002C364();
        v117();
        v113 += v128;
        if (!--v109)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          uint64_t v135 = 0;
          uint64_t v137 = 0;
          uint64_t countAndFlagsBits = v136._countAndFlagsBits;
          object = v136._object;
          uint64_t v65 = v132;
          goto LABEL_59;
        }
      }
      swift_bridgeObjectRelease();
      uint64_t countAndFlagsBits = v136._countAndFlagsBits;
      object = v136._object;
LABEL_62:
      uint64_t v65 = v132;
      uint64_t v48 = v122;
      uint64_t v135 = (char *)URLQueryItem.value.getter();
      uint64_t v137 = v118;
      sub_10002C364();
      v119();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v135 = 0;
      uint64_t v137 = 0;
      uint64_t countAndFlagsBits = v136._countAndFlagsBits;
      object = v136._object;
LABEL_59:
      uint64_t v48 = v122;
    }
    sub_10000E040();
    v120();
    (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v131, v138);
    uint64_t v49 = v123;
    char v46 = v127;
    goto LABEL_10;
  }
  sub_10000E040();
  v89();
  uint64_t v90 = sub_1000275B8();
  v91(v90);
LABEL_9:
  uint64_t v135 = 0;
  uint64_t v137 = 0;
  char v46 = 0;
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  uint64_t countAndFlagsBits = v136._countAndFlagsBits;
  object = v136._object;
LABEL_10:
  if (qword_100218B68 != -1) {
    swift_once();
  }
  uint64_t v52 = type metadata accessor for Logger();
  sub_10002A10C(v52, (uint64_t)qword_100236A50);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v53 = Logger.logObject.getter();
  os_log_type_t v54 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v53, v54))
  {
    uint64_t v55 = swift_slowAlloc();
    uint64_t v138 = swift_slowAlloc();
    v140[0] = v138;
    *(_DWORD *)uint64_t v55 = 136643331;
    uint64_t v127 = v46;
    swift_bridgeObjectRetain();
    uint64_t v141 = sub_10001C274(countAndFlagsBits, (unint64_t)object, v140);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v55 + 12) = 2080;
    uint64_t v141 = v48;
    uint64_t v142 = v49;
    swift_bridgeObjectRetain();
    sub_10002572C(&qword_10021D050);
    uint64_t v56 = String.init<A>(describing:)();
    uint64_t v57 = v48;
    uint64_t v141 = sub_10001C274(v56, v58, v140);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v55 + 22) = 2085;
    uint64_t v141 = (uint64_t)v127;
    uint64_t v142 = v47;
    swift_bridgeObjectRetain();
    uint64_t v59 = String.init<A>(describing:)();
    uint64_t v141 = sub_10001C274(v59, v60, v140);
    uint64_t countAndFlagsBits = v136._countAndFlagsBits;
    object = v136._object;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    char v46 = v127;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v53, v54, "cache lookup: '%{sensitive}s' qtype %s suggest %{sensitive}s", (uint8_t *)v55, 0x20u);
    swift_arrayDestroy();
    sub_100017D40();
    sub_100017D40();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    uint64_t v61 = swift_bridgeObjectRelease_n();
    uint64_t v57 = v48;
  }
  __chkstk_darwin(v61);
  *(&v121 - 12) = countAndFlagsBits;
  *(&v121 - 11) = (uint64_t)object;
  *(&v121 - 10) = v62;
  *(&v121 - 9) = v39;
  *(&v121 - 8) = v57;
  *(&v121 - 7) = v49;
  *(&v121 - 6) = (uint64_t)v46;
  *(&v121 - 5) = v47;
  uint64_t v63 = v137;
  *(&v121 - 4) = (uint64_t)v135;
  *(&v121 - 3) = v63;
  uint64_t v64 = v133;
  *(&v121 - 2) = v139;
  *(&v121 - 1) = v64;
  sub_10002572C(&qword_10021E7C8);
  OS_dispatch_queue.sync<A>(execute:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return v141;
}

const char *sub_1000F1FF4(char a1)
{
  uint64_t result = "lifetime";
  switch(a1)
  {
    case 1:
      uint64_t result = "cacheAccess";
      break;
    case 2:
      uint64_t result = "cacheWrite";
      break;
    case 3:
      uint64_t result = "resultLifetime";
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1000F206C(unint64_t result)
{
  if (result >= 4) {
    return 4;
  }
  return result;
}

unint64_t sub_1000F207C@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1000F206C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000F20A8()
{
  uint64_t v0 = qword_10021E6A0;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t sub_1000F20E0()
{
  uint64_t v0 = *(void *)aQuerycache_2;
  swift_bridgeObjectRetain();
  return v0;
}

const char *sub_1000F2118()
{
  return sub_1000F1FF4(*v0);
}

uint64_t sub_1000F2138()
{
  *(void *)(v0 + 64) = 0;
  swift_release();
  sub_10001CA50(v0 + 16);
  swift_release();
  swift_release();
  sub_10001CDE0(v0 + 72);

  swift_unknownObjectRelease();
  return v0;
}

uint64_t sub_1000F21A4()
{
  sub_1000F2138();

  return _swift_deallocClassInstance(v0, 104, 7);
}

void sub_1000F21D8()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (uint64_t *)((char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = (void *)v1[11];
  *uint64_t v5 = v6;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  id v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v3 + 8))(v5, v2);
  if (v6)
  {
    uint64_t v8 = v1[5];
    uint64_t v9 = v1[6];
    sub_10001B620(v1 + 2, v8);
    if (!sub_10004A5B8(v8, v9))
    {
      uint64_t v11 = v1[5];
      uint64_t v12 = v1[6];
      sub_10001B620(v1 + 2, v11);
      (*(void (**)(uint64_t, uint64_t))(v12 + 56))(v11, v12);
      sub_1000F2360("query cache became empty");
    }
  }
  else
  {
    __break(1u);
  }
}

void sub_1000F2360(const char *a1)
{
  if (qword_100218B68 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10002A10C(v2, (uint64_t)qword_100236A50);
  oslog = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(oslog, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v3, a1, v4, 2u);
    sub_100017D40();
  }
}

uint64_t sub_1000F2448(void *a1)
{
  uint64_t v3 = v1;
  if (qword_100218B68 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_10002A10C(v5, (uint64_t)qword_100236A50);
  id v6 = a1;
  id v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v23 = v3;
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    aBlock[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315138;
    uint64_t v2 = v9 + 12;
    id v10 = [v6 name];
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v13 = v12;

    uint64_t v24 = (void *)sub_10001C274(v11, v13, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    uint64_t v3 = v23;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "cache clear notification: name = %s", v9, 0xCu);
    swift_arrayDestroy();
    sub_100017D40();
    sub_100017D40();
  }
  else
  {
  }
  uint64_t v23 = *(void *)(v3 + 88);
  void aBlock[4] = (uint64_t)sub_1000F4288;
  aBlock[5] = v3;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1000085EC;
  aBlock[3] = (uint64_t)&unk_100200570;
  uint64_t v14 = _Block_copy(aBlock);
  type metadata accessor for DispatchQoS();
  v22[1] = v22;
  sub_100020C48();
  __chkstk_darwin(v15);
  sub_100021208();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v16 = type metadata accessor for DispatchWorkItemFlags();
  sub_100020C48();
  uint64_t v18 = v17;
  __chkstk_darwin(v19);
  sub_100017DE0();
  uint64_t v24 = _swiftEmptyArrayStorage;
  sub_10003045C();
  sub_10002572C((uint64_t *)&unk_10021BAF0);
  sub_1000301A0();
  sub_100021314();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v14);
  (*(void (**)(uint8_t *, uint64_t))(v18 + 8))(v2, v16);
  sub_100023C70();
  v20();
  return swift_release();
}

uint64_t type metadata accessor for QueryCache()
{
  return self;
}

unsigned char *storeEnumTagSinglePayload for QueryCache.Activity(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000F28FCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for QueryCache.Activity()
{
  return &type metadata for QueryCache.Activity;
}

unint64_t sub_1000F2934(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1000F2964();
  unint64_t result = sub_1000F29B0();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1000F2964()
{
  unint64_t result = qword_10021E788;
  if (!qword_10021E788)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10021E788);
  }
  return result;
}

unint64_t sub_1000F29B0()
{
  unint64_t result = qword_10021E790;
  if (!qword_10021E790)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10021E790);
  }
  return result;
}

unint64_t sub_1000F2A00()
{
  unint64_t result = qword_10021E798;
  if (!qword_10021E798)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10021E798);
  }
  return result;
}

unint64_t sub_1000F2A50()
{
  unint64_t result = qword_10021E7A0;
  if (!qword_10021E7A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10021E7A0);
  }
  return result;
}

uint64_t sub_1000F2A9C(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_1000F41D8(&qword_10021E7C0, a2, (void (*)(uint64_t))type metadata accessor for QueryCache);
  *(void *)(a1 + 8) = result;
  return result;
}

void *sub_1000F2AF4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2;
  uint64_t v8 = type metadata accessor for Date();
  sub_100020C48();
  uint64_t v10 = v9;
  __chkstk_darwin(v11);
  sub_100024ADC();
  uint64_t v12 = type metadata accessor for DispatchPredicate();
  sub_100020C48();
  uint64_t v14 = v13;
  __chkstk_darwin(v15);
  sub_100017CD4();
  uint64_t v16 = (void *)v5[11];
  *unsigned int v4 = v16;
  (*(void (**)(void *, void, uint64_t))(v14 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v12);
  id v17 = v16;
  LOBYTE(v16) = _dispatchPreconditionTest(_:)();
  sub_100023C70();
  uint64_t result = (void *)v18();
  if (v16)
  {
    Date.init()();
    String.count.getter();
    uint64_t v20 = v5 + 2;
    uint64_t v21 = v5[6];
    uint64_t v22 = sub_10001B620(v5 + 2, v5[5]);
    uint64_t v27 = v8;
    __chkstk_darwin(v22);
    (*(void (**)(uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t)))(v21 + 40))(a1, a2, sub_1000F4194);
    uint64_t v24 = v5[5];
    uint64_t v23 = v5[6];
    sub_10001B620(v20, v24);
    uint64_t v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 72);
    uint64_t v26 = swift_bridgeObjectRetain();
    v25(v26, v24, v23);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v3, v27);
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000F2D84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  uint64_t v39 = a8;
  uint64_t v40 = a9;
  uint64_t v41 = a4;
  uint64_t v42 = a7;
  uint64_t v18 = sub_10002572C(&qword_10021BB10);
  __chkstk_darwin(v18 - 8);
  uint64_t v20 = (char *)v38 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for Date();
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v24 = (char *)v38 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38[1] = a3;
  uint64_t v25 = a3 + OBJC_IVAR____TtC7parsecd15CachedResultSet_result;
  uint64_t v26 = (int *)type metadata accessor for CachedResultSet.Result(0);
  sub_100008B84(v25 + v26[6], (uint64_t)v20, &qword_10021BB10);
  if (sub_100027BA4((uint64_t)v20, 1, v21) == 1)
  {
    sub_100025628((uint64_t)v20, &qword_10021BB10);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v24, v20, v21);
    sub_1000F41D8((unint64_t *)&qword_10021E7D0, 255, (void (*)(uint64_t))&type metadata accessor for Date);
    if ((dispatch thunk of static Comparable.< infix(_:_:)() & 1) == 0)
    {
      swift_bridgeObjectRetain();
      sub_100090154(&v43, a1, a2);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v22 + 8))(v24, v21);
      return 1;
    }
    (*(void (**)(char *, uint64_t))(v22 + 8))(v24, v21);
  }
  if (a5 <= 0.0 || *(double *)(v25 + v26[8]) == a5)
  {
    swift_bridgeObjectRetain();
    uint64_t v27 = String.count.getter();
    swift_bridgeObjectRelease();
    if (v27 <= v42)
    {
      uint64_t v28 = (void *)(v25 + v26[11]);
      uint64_t v29 = v28[1];
      if (v29)
      {
        if (!v40) {
          return 1;
        }
        BOOL v30 = *v28 == v39 && v29 == v40;
        if (!v30 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
          return 1;
        }
      }
      else if (v40)
      {
        return 1;
      }
      uint64_t v31 = (void *)(v25 + v26[12]);
      uint64_t v32 = v31[1];
      if (v32)
      {
        if (!a11) {
          return 1;
        }
        BOOL v33 = *v31 == a10 && v32 == a11;
        if (!v33 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
          return 1;
        }
      }
      else if (a11)
      {
        return 1;
      }
      uint64_t v34 = (void *)(v25 + v26[13]);
      uint64_t v35 = v34[1];
      if (v35)
      {
        if (!a13) {
          return 1;
        }
        BOOL v36 = *v34 == a12 && v35 == a13;
        if (!v36 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
          return 1;
        }
      }
      else if (a13)
      {
        return 1;
      }
      swift_retain();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      sub_100030220(*(void *)((*a14 & 0xFFFFFFFFFFFFFF8) + 0x10));
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
  }
  return 1;
}

uint64_t sub_1000F3134@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X7>, uint64_t *a4@<X8>, uint64_t a5, uint64_t a6, uint64_t a7)
{
  id v70 = a4;
  unint64_t v76 = a3;
  uint64_t v9 = sub_10002572C(&qword_10021DC60);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  uint64_t v67 = (uint64_t)&v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v66 = (uint64_t)&v65 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v69 = (uint64_t)&v65 - v15;
  __chkstk_darwin(v14);
  uint64_t v68 = (uint64_t)&v65 - v16;
  uint64_t v17 = String.count.getter();
  unint64_t v18 = (unint64_t)sub_1000F2AF4(a1, a2);
  unint64_t v19 = v18;
  unint64_t v20 = v18 >> 62;
  if (v18 >> 62) {
    goto LABEL_72;
  }
  uint64_t v21 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t result = swift_bridgeObjectRetain();
LABEL_3:
  unint64_t v76 = v20;
  if (v21)
  {
    if (v21 >= 1)
    {
      unint64_t v20 = 0;
      uint64_t v23 = -1;
      while (1)
      {
        if ((v19 & 0xC000000000000001) != 0)
        {
          uint64_t v24 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          uint64_t v24 = *(void *)(v19 + 8 * v20 + 32);
          swift_retain();
        }
        if (*(void *)(v24 + OBJC_IVAR____TtC7parsecd15CachedResultSet_result + 24))
        {
          swift_bridgeObjectRetain();
          uint64_t v25 = String.count.getter();
          swift_bridgeObjectRelease();
          swift_release();
          if (__OFSUB__(v25, v17))
          {
            __break(1u);
LABEL_71:
            __break(1u);
LABEL_72:
            swift_bridgeObjectRetain();
            uint64_t result = _CocoaArrayWrapper.endIndex.getter();
            uint64_t v21 = result;
            goto LABEL_3;
          }
          if (v25 - v17 >= v23) {
            uint64_t v26 = v23;
          }
          else {
            uint64_t v26 = v25 - v17;
          }
          if (v23 == -1) {
            uint64_t v23 = v25 - v17;
          }
          else {
            uint64_t v23 = v26;
          }
        }
        else
        {
          swift_release();
        }
        if (v21 == ++v20) {
          goto LABEL_21;
        }
      }
    }
    __break(1u);
    __break(1u);
LABEL_77:
    __break(1u);
    return result;
  }
  uint64_t v23 = -1;
LABEL_21:
  swift_bridgeObjectRelease();
  unint64_t v79 = (unint64_t)_swiftEmptyArrayStorage;
  if (v76)
  {
    swift_bridgeObjectRetain();
    uint64_t v27 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v27 = *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  sub_1000F402C(v27);
  specialized Array._endMutation()();
  if (v21)
  {
    for (uint64_t i = 0; i != v21; ++i)
    {
      if ((v19 & 0xC000000000000001) != 0)
      {
        uint64_t v29 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v29 = *(void *)(v19 + 8 * i + 32);
        swift_retain();
      }
      unint64_t v20 = *(void *)(v29 + OBJC_IVAR____TtC7parsecd15CachedResultSet_result + 24);
      if (v20)
      {
        swift_bridgeObjectRetain();
        uint64_t v30 = String.count.getter();
        swift_bridgeObjectRelease();
        if (__OFSUB__(v30, v17)) {
          goto LABEL_71;
        }
        if (v30 - v17 == v23)
        {
          swift_retain();
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)((v79 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v79 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
      }
      swift_release();
    }
  }
  swift_bridgeObjectRelease();
  unint64_t v31 = v79;
  if (v79 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v32 = result;
    if (result) {
      goto LABEL_38;
    }
LABEL_74:
    swift_bridgeObjectRelease();
    uint64_t v35 = 0;
    goto LABEL_75;
  }
  uint64_t v32 = *(void *)((v79 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t result = swift_bridgeObjectRetain();
  if (!v32) {
    goto LABEL_74;
  }
LABEL_38:
  if (v32 < 1) {
    goto LABEL_77;
  }
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  uint64_t v65 = a6;
  unint64_t v76 = v31 & 0xC000000000000001;
  float v36 = 0.0;
  *(void *)&long long v33 = 136643331;
  long long v72 = v33;
  BOOL v71 = (char *)&type metadata for Any + 8;
  uint64_t v73 = v32;
  unint64_t v74 = v31;
  do
  {
    if (v76)
    {
      uint64_t v37 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      uint64_t v37 = *(void *)(v31 + 8 * v34 + 32);
      swift_retain();
    }
    uint64_t v38 = (uint64_t *)(v37 + OBJC_IVAR____TtC7parsecd15CachedResultSet_result);
    float v39 = *(float *)((char *)v38 + *(int *)(type metadata accessor for CachedResultSet.Result(0) + 36));
    if (qword_100218B68 != -1) {
      swift_once();
    }
    uint64_t v40 = type metadata accessor for Logger();
    sub_10002A10C(v40, (uint64_t)qword_100236A50);
    swift_retain_n();
    uint64_t v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v41, v42))
    {
      uint64_t v75 = v35;
      uint64_t v43 = swift_slowAlloc();
      v78[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v43 = v72;
      if (v38[3])
      {
        uint64_t v44 = v38[2];
        unint64_t v45 = v38[3];
      }
      else
      {
        unint64_t v45 = 0xE500000000000000;
        uint64_t v44 = 0x296C696E28;
      }
      swift_bridgeObjectRetain();
      *(void *)(v43 + 4) = sub_10001C274(v44, v45, v78);
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v43 + 12) = 2085;
      uint64_t v46 = *v38;
      unint64_t v47 = v38[1];
      swift_bridgeObjectRetain();
      *(void *)(v43 + 14) = sub_10001C274(v46, v47, v78);
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v43 + 22) = 2048;
      *(double *)(v43 + 24) = v39;
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "cache entry prefix: %{sensitive}s input: %{sensitive}s score: %f", (uint8_t *)v43, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      unint64_t v31 = v74;
      uint64_t v35 = v75;
      uint64_t v32 = v73;
      if (!v75) {
        goto LABEL_55;
      }
    }
    else
    {

      swift_release_n();
      if (!v35) {
        goto LABEL_55;
      }
    }
    if (v39 > 0.0 && v36 < v39)
    {
      swift_release();
LABEL_55:
      uint64_t v35 = v37;
      goto LABEL_57;
    }
    swift_release();
    float v39 = v36;
LABEL_57:
    ++v34;
    float v36 = v39;
  }
  while (v32 != v34);
  swift_bridgeObjectRelease();
  if (v35)
  {
    uint64_t v48 = v65;
    uint64_t v49 = v68;
    sub_100008B84(v65, v68, &qword_10021DC60);
    uint64_t v50 = v48;
    uint64_t v51 = v69;
    sub_100008B84(v50, v69, &qword_10021DC60);
    uint64_t v52 = Logger.logObject.getter();
    os_log_type_t v53 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v52, v53))
    {
      uint64_t v54 = swift_slowAlloc();
      v78[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v54 = 136643075;
      uint64_t v55 = v66;
      sub_100008B84(v49, v66, &qword_10021DC60);
      uint64_t v56 = type metadata accessor for URLRequest();
      if (sub_100027BA4(v55, 1, v56) == 1)
      {
        sub_100025628(v55, &qword_10021DC60);
        uint64_t v57 = 0;
        unint64_t v58 = 0xE000000000000000;
      }
      else
      {
        uint64_t v57 = URLRequest.debugDescription.getter();
        unint64_t v58 = v59;
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v56 - 8) + 8))(v55, v56);
      }
      uint64_t v77 = sub_10001C274(v57, v58, v78);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100025628(v68, &qword_10021DC60);
      *(_WORD *)(v54 + 12) = 2085;
      uint64_t v60 = v67;
      sub_100008B84(v69, v67, &qword_10021DC60);
      if (sub_100027BA4(v60, 1, v56) == 1)
      {
        sub_100025628(v60, &qword_10021DC60);
        goto LABEL_68;
      }
      uint64_t v61 = URLRequest.allHTTPHeaderFields.getter();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v56 - 8) + 8))(v60, v56);
      if (v61)
      {
        uint64_t v62 = Dictionary.debugDescription.getter();
        unint64_t v64 = v63;
        swift_bridgeObjectRelease();
      }
      else
      {
LABEL_68:
        unint64_t v64 = 0xE200000000000000;
        uint64_t v62 = 23899;
      }
      uint64_t v77 = sub_10001C274(v62, v64, v78);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100025628(v69, &qword_10021DC60);
      _os_log_impl((void *)&_mh_execute_header, v52, v53, "cache hit for request %{sensitive}s header: %{sensitive}s", (uint8_t *)v54, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100025628(v49, &qword_10021DC60);
      sub_100025628(v51, &qword_10021DC60);
    }
  }
LABEL_75:
  *(void *)(a7 + qword_100236C70) = v35;
  swift_retain_n();
  swift_release();
  *id v70 = v35;
  swift_release();
  return swift_bridgeObjectRelease();
}

void sub_1000F3B3C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v9 = sub_10010B444();
  uint64_t v10 = a2[5];
  uint64_t v11 = a2[6];
  sub_10001B620(a2 + 2, v10);
  if ((*(uint64_t (**)(uint64_t, uint64_t))(v11 + 24))(v10, v11) >= v9)
  {
    if (qword_100218B68 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    sub_10002A10C(v16, (uint64_t)qword_100236A50);
    swift_bridgeObjectRetain_n();
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.info.getter();
    uint64_t v27 = a4;
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = swift_slowAlloc();
      uint64_t v28 = swift_slowAlloc();
      *(_DWORD *)uint64_t v19 = 136643075;
      swift_bridgeObjectRetain();
      sub_10001C274(a4, a5, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v19 + 12) = 2048;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "caching '%{sensitive}s' with cost %lu", (uint8_t *)v19, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v20 = a2[5];
    uint64_t v21 = a2[6];
    sub_10001B620(a2 + 2, v20);
    BOOL v22 = sub_10004A5B8(v20, v21);
    uint64_t v23 = a2[5];
    uint64_t v24 = a2[6];
    sub_10001B620(a2 + 2, v23);
    (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(v24 + 80))(a1, v27, a5, v23, v24);
    sub_10002572C((uint64_t *)&unk_10021BB00);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1001A2A20;
    *(void *)(inited + 56) = &type metadata for UInt;
    *(void *)(inited + 64) = &protocol witness table for UInt;
    *(void *)(inited + 32) = v9;
    sub_10002572C((uint64_t *)&unk_10021E7E0);
    swift_allocObject();
    uint64_t v26 = swift_retain();
    *(void *)(a1 + 16) = sub_100078000(v26, 3, (uint64_t)"cost=%{signpost.description.attribute,public}llu", 48, 2, inited);
    swift_release();
    if (v22) {
      sub_1000F2360("query cache no longer empty");
    }
    sub_100100F24(a1);
  }
  else
  {
    sub_100100F68(v9, 0);
    if (qword_100218B68 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_10002A10C(v12, (uint64_t)qword_100236A50);
    swift_bridgeObjectRetain_n();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = swift_slowAlloc();
      uint64_t v28 = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 136643075;
      swift_bridgeObjectRetain();
      sub_10001C274(a4, a5, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v15 + 12) = 2048;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "NOT caching '%{sensitive}s' with cost %lu", (uint8_t *)v15, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

uint64_t sub_1000F402C(uint64_t a1)
{
  unint64_t v3 = *v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_bridgeObject();
  uint64_t *v1 = v3;
  if ((result & 1) == 0
    || (v3 & 0x8000000000000000) != 0
    || (v3 & 0x4000000000000000) != 0
    || a1 > *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
  {
    if (v3 >> 62)
    {
      swift_bridgeObjectRetain();
      _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t *v1 = result;
  }
  return result;
}

uint64_t sub_1000F40EC(void *a1)
{
  id v1 = [a1 queryItems];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  type metadata accessor for URLQueryItem();
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_1000F414C@<X0>(uint64_t *a1@<X8>)
{
  return sub_1000F3134(*(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 80), a1, *(void *)(v1 + 88), *(void *)(v1 + 96), *(void *)(v1 + 104));
}

uint64_t sub_1000F4194(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000F2D84(a1, a2, a3, *(void *)(v3 + 16), *(double *)(v3 + 32), *(void *)(v3 + 24), *(void *)(v3 + 40), *(void *)(v3 + 48), *(void *)(v3 + 56), *(void *)(v3 + 64), *(void *)(v3 + 72), *(void *)(v3 + 80), *(void *)(v3 + 88), *(void **)(v3 + 96)) & 1;
}

uint64_t sub_1000F41D8(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000F4220()
{
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 56, 7);
}

void sub_1000F4270()
{
  sub_1000F3B3C(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48));
}

uint64_t *sub_1000F428C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1000F435C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000F43D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1000F4450(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000F44DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1000F4558(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1000F45DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000F45F0);
}

uint64_t sub_1000F45F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for Date();
  sub_1000248F0();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    return sub_100027BA4(a1, a2, v6);
  }
  else
  {
    unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v9 >= 0xFFFFFFFF) {
      LODWORD(v9) = -1;
    }
    return (v9 + 1);
  }
}

uint64_t sub_1000F467C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000F4690);
}

void sub_1000F4690(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for Date();
  sub_1000248F0();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    sub_10002538C(a1, a2, a2, v8);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
}

uint64_t type metadata accessor for TopicCacheEntry()
{
  uint64_t result = qword_10021E848;
  if (!qword_10021E848) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000F4760()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1000F47F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for Date();
  sub_100020C48();
  uint64_t v7 = v6;
  uint64_t v9 = __chkstk_darwin(v8);
  float v39 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v40 = (char *)&v34 - v11;
  uint64_t v12 = type metadata accessor for Apple_Parsec_Spotlight_V1alpha_Result();
  sub_100020C48();
  uint64_t v14 = v13;
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *(void *)(a1 + 16);
  if (v18)
  {
    uint64_t v34 = v7;
    uint64_t v35 = v5;
    uint64_t v36 = a2;
    uint64_t v37 = v2;
    uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
    uint64_t v19 = v14 + 16;
    uint64_t v20 = v21;
    uint64_t v22 = a1 + ((*(unsigned __int8 *)(v19 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 64));
    uint64_t v23 = *(void *)(v19 + 56);
    uint64_t v38 = a1;
    swift_bridgeObjectRetain();
    int v24 = 900;
    do
    {
      v20(v17, v22, v12);
      if ((int)Apple_Parsec_Spotlight_V1alpha_Result.maxAgeSeconds.getter() < v24) {
        int v24 = Apple_Parsec_Spotlight_V1alpha_Result.maxAgeSeconds.getter();
      }
      (*(void (**)(char *, uint64_t))(v19 - 8))(v17, v12);
      v22 += v23;
      --v18;
    }
    while (v18);
    uint64_t v25 = v38;
    swift_bridgeObjectRelease();
    if (v24 > 0)
    {
      uint64_t v26 = v39;
      Date.init()();
      uint64_t v27 = v40;
      Date.addingTimeInterval(_:)();
      uint64_t v29 = v34;
      uint64_t v28 = v35;
      (*(void (**)(char *, uint64_t))(v34 + 8))(v26, v35);
      uint64_t v30 = v36;
      (*(void (**)(uint64_t, char *, uint64_t))(v29 + 32))(v36, v27, v28);
      uint64_t result = type metadata accessor for TopicCacheEntry();
      *(void *)(v30 + *(int *)(result + 20)) = v25;
      return result;
    }
    swift_bridgeObjectRelease();
    sub_1000F4A90();
    swift_allocError();
    char v33 = 1;
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_1000F4A90();
    swift_allocError();
    char v33 = 0;
  }
  *uint64_t v32 = v33;
  return swift_willThrow();
}

unint64_t sub_1000F4A90()
{
  unint64_t result = qword_10021E880;
  if (!qword_10021E880)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10021E880);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for TopicCacheEntryError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000F4BA8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TopicCacheEntryError()
{
  return &type metadata for TopicCacheEntryError;
}

unint64_t sub_1000F4BE4()
{
  unint64_t result = qword_10021E888;
  if (!qword_10021E888)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10021E888);
  }
  return result;
}

uint64_t Lock.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  Lock.init()();
  return v0;
}

uint64_t Lock.deinit()
{
  swift_slowDealloc();
  return v0;
}

void Lock.withLock<A>(_:)()
{
  sub_100024AF8();
  Lock.lock()();
  v0();
  Lock.unlock()();
}

void Lock.withLockVoid(_:)()
{
  sub_100024AF8();
  Lock.lock()();
  v0();
  Lock.unlock()();
}

uint64_t ConditionLock.__allocating_init(value:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  ConditionLock.init(value:)(a1);
  return v2;
}

uint64_t ConditionLock.init(value:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)v1;
  uint64_t v5 = *(void *)(v4 + 112);
  *(void *)&v2[v5] = swift_slowAlloc();
  uint64_t v6 = *(void *)(v4 + 80);
  uint64_t v7 = *(void *)(v6 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(&v2[*(void *)(*(void *)v2 + 96)], a1, v6);
  type metadata accessor for Lock();
  uint64_t v8 = swift_allocObject();
  Lock.init()();
  *(void *)&v2[*(void *)(*(void *)v2 + 104)] = v8;
  LODWORD(v8) = pthread_cond_init(*(pthread_cond_t **)&v2[*(void *)(*(void *)v2 + 112)], 0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
  if (!v8) {
    return (uint64_t)v2;
  }
  __break(1u);
  return result;
}

char *ConditionLock.deinit()
{
  uint64_t v1 = *(void *)v0;
  swift_slowDealloc();
  sub_100017E10();
  (*(void (**)(char *))(*(void *)(*(void *)(v1 + 80) - 8) + 8))(&v0[*(void *)(v2 + 96)]);
  swift_release();
  return v0;
}

uint64_t ConditionLock.__deallocating_deinit()
{
  ConditionLock.deinit();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v1, v2);
}

Swift::Void __swiftcall ConditionLock.lock()()
{
}

Swift::Void __swiftcall ConditionLock.unlock()()
{
}

uint64_t sub_1000F5004()
{
  sub_100017E10();
  return v0();
}

void ConditionLock.value.getter(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  ConditionLock.lock()();
  sub_100017E10();
  uint64_t v5 = (char *)v1 + *(void *)(v4 + 96);
  swift_beginAccess();
  (*(void (**)(uint64_t, char *))(*(void *)(*(void *)(v3 + 80) - 8) + 16))(a1, v5);
  ConditionLock.unlock()();
}

uint64_t ConditionLock.lock(whenValue:)()
{
  uint64_t v1 = v0;
  sub_100025AC8();
  v17[1] = v3;
  v17[2] = v2;
  uint64_t v5 = *(void *)(v4 + 80);
  sub_100026AE4();
  uint64_t v7 = v6;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v17 - v9;
  ConditionLock.lock()();
  uint64_t v11 = v0 + *(void *)(*(void *)v0 + 96);
  uint64_t v12 = *(void *)(*(void *)v0 + 112);
  uint64_t v13 = *(void *)(*(void *)v0 + 104);
  swift_beginAccess();
  uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  while (1)
  {
    v14(v10, v11, v5);
    char v15 = sub_100025AE0();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v5);
    if (v15) {
      break;
    }
    uint64_t result = pthread_cond_wait(*(pthread_cond_t **)(v1 + v12), *(pthread_mutex_t **)(*(void *)(v1 + v13) + 16));
    if (result)
    {
      __break(1u);
      return result;
    }
  }
  return result;
}

uint64_t ConditionLock.lock(whenValue:timeoutSeconds:)(uint64_t a1, double a2)
{
  v30[2] = a1;
  sub_100025AC8();
  v30[1] = v4;
  uint64_t v6 = *(void *)(v5 + 80);
  sub_100026AE4();
  uint64_t v8 = v7;
  double v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)v30 - v11;
  if (v10 < 0.0)
  {
    __break(1u);
    goto LABEL_14;
  }
  ConditionLock.lock()();
  double v13 = a2 * 1000000000.0;
  if ((~*(void *)&v13 & 0x7FF0000000000000) == 0)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v13 <= -9.22337204e18)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v13 >= 9.22337204e18)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v35.tv_sec = 0;
  v35.tv_usec = 0;
  gettimeofday(&v35, 0);
  uint64_t v14 = 1000 * v35.tv_usec;
  BOOL v15 = __OFADD__((uint64_t)v13, v14);
  uint64_t v16 = (uint64_t)v13 + v14;
  if (v15)
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
  }
  if (__OFADD__(v35.tv_sec, v16 / 1000000000)) {
    goto LABEL_18;
  }
  v34.tv_sec = v35.tv_sec + v16 / 1000000000;
  v34.tv_nsec = v16 % 1000000000;
  uint64_t v17 = *v2;
  uint64_t v18 = (uint64_t)v2 + *(void *)(*v2 + 96);
  v30[0] = *(void *)(*v2 + 112);
  uint64_t v19 = *(void *)(v17 + 104);
  swift_beginAccess();
  uint64_t v20 = v8 + 16;
  uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  uint64_t v22 = (void (**)(char *, uint64_t))(v20 - 8);
  do
  {
    v21(v12, v18, v6);
    char v23 = sub_100025AE0();
    (*v22)(v12, v6);
    if (v23) {
      return v23 & 1;
    }
    int v24 = pthread_cond_timedwait(*(pthread_cond_t **)((char *)v2 + v30[0]), *(pthread_mutex_t **)(*(uint64_t *)((char *)v2 + v19) + 16), &v34);
  }
  while (!v24);
  if (v24 == 60)
  {
    ConditionLock.unlock()();
    return v23 & 1;
  }
  uint64_t v32 = 0;
  unint64_t v33 = 0xE000000000000000;
  int v26 = v24;
  _StringGuts.grow(_:)(51);
  v27._uint64_t countAndFlagsBits = 0x6520746867756163;
  v27._object = (void *)0xED000020726F7272;
  String.append(_:)(v27);
  int v31 = v26;
  v28._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v28);
  swift_bridgeObjectRelease();
  v29._object = (void *)0x80000001001B7530;
  v29._uint64_t countAndFlagsBits = 0xD000000000000024;
  String.append(_:)(v29);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t ConditionLock.unlock(withValue:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t)v1 + *(void *)(*v1 + 96);
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v3 + 80) - 8) + 24))(v4, a1);
  swift_endAccess();
  ConditionLock.unlock()();
  sub_100017E10();
  uint64_t result = pthread_cond_broadcast(*(pthread_cond_t **)((char *)v1 + *(void *)(v5 + 112)));
  if (result) {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000F5650()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for ConditionLock()
{
  return sub_100040C54();
}

uint64_t sub_1000F5718(uint64_t a1, uint64_t *a2)
{
  uint64_t v37 = a2;
  uint64_t v3 = type metadata accessor for Trialpb_TrialExperiment();
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = *(void *)(a1 + 56);
  uint64_t v35 = a1 + 56;
  uint64_t v10 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & v9;
  int64_t v36 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v41 = a1;
  uint64_t v42 = v7 + 16;
  uint64_t v43 = v7;
  uint64_t v38 = (uint64_t (**)(char *, uint64_t))(v7 + 8);
  uint64_t v39 = v7 + 32;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v14 = 0;
  if (!v12) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v15 = __clz(__rbit64(v12));
  v12 &= v12 - 1;
  for (unint64_t i = v15 | (v14 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v14 << 6))
  {
    uint64_t v20 = v40;
    uint64_t v21 = v43;
    uint64_t v22 = *(void *)(v43 + 72);
    char v23 = *(void (**)(char *, unint64_t, uint64_t))(v43 + 16);
    v23(v40, *(void *)(v41 + 48) + v22 * i, v3);
    (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v6, v20, v3);
    if (Trialpb_TrialExperiment.experimentNamespace.getter() == 0x4145535F49524953 && v24 == 0xEF4142535F484352)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v26 & 1) == 0) {
        goto LABEL_33;
      }
    }
    uint64_t v27 = v3;
    Swift::String v28 = v37;
    uint64_t v29 = *v37;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *Swift::String v28 = v29;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v29 = sub_100065DA8(0, *(void *)(v29 + 16) + 1, 1, v29);
      *uint64_t v37 = v29;
    }
    unint64_t v32 = *(void *)(v29 + 16);
    unint64_t v31 = *(void *)(v29 + 24);
    if (v32 >= v31 >> 1)
    {
      uint64_t v29 = sub_100065DA8(v31 > 1, v32 + 1, 1, v29);
      *uint64_t v37 = v29;
    }
    *(void *)(v29 + 16) = v32 + 1;
    unint64_t v33 = v29
        + ((*(unsigned __int8 *)(v43 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80))
        + v32 * v22;
    uint64_t v3 = v27;
    v23((char *)v33, (unint64_t)v6, v27);
LABEL_33:
    uint64_t result = (*v38)(v6, v3);
    if (v12) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v17 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_37;
    }
    if (v17 >= v36) {
      return swift_release();
    }
    unint64_t v18 = *(void *)(v35 + 8 * v17);
    ++v14;
    if (!v18)
    {
      int64_t v14 = v17 + 1;
      if (v17 + 1 >= v36) {
        return swift_release();
      }
      unint64_t v18 = *(void *)(v35 + 8 * v14);
      if (!v18)
      {
        int64_t v14 = v17 + 2;
        if (v17 + 2 >= v36) {
          return swift_release();
        }
        unint64_t v18 = *(void *)(v35 + 8 * v14);
        if (!v18)
        {
          int64_t v14 = v17 + 3;
          if (v17 + 3 >= v36) {
            return swift_release();
          }
          unint64_t v18 = *(void *)(v35 + 8 * v14);
          if (!v18) {
            break;
          }
        }
      }
    }
LABEL_20:
    unint64_t v12 = (v18 - 1) & v18;
  }
  int64_t v19 = v17 + 4;
  if (v19 >= v36) {
    return swift_release();
  }
  unint64_t v18 = *(void *)(v35 + 8 * v19);
  if (v18)
  {
    int64_t v14 = v19;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v14 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v14 >= v36) {
      return swift_release();
    }
    unint64_t v18 = *(void *)(v35 + 8 * v14);
    ++v19;
    if (v18) {
      goto LABEL_20;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

unint64_t sub_1000F5B10()
{
  unint64_t v0 = sub_100019164();
  unint64_t v1 = v0;
  if (v0 >= 2)
  {
    uint64_t v6 = qword_100218B78;
    swift_retain();
    if (v6 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_10002A10C(v7, (uint64_t)qword_100236A80);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Found state for client identifier", v10, 2u);
      swift_slowDealloc();
    }

    sub_100019154(v1);
  }
  else
  {
    sub_100019154(v0);
    if (qword_100218B78 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_10002A10C(v2, (uint64_t)qword_100236A80);
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Client state fetch failed", v5, 2u);
      swift_slowDealloc();
    }

    return 0;
  }
  return v1;
}

void sub_1000F5CD0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v285 = a3;
  uint64_t v305 = a2;
  uint64_t v308 = type metadata accessor for PegasusContext(0);
  sub_10001DCF8();
  __chkstk_darwin(v6);
  sub_10000E04C();
  sub_10002AC48(v7);
  uint64_t v268 = type metadata accessor for Apple_Parsec_Search_V2_TransportationMode();
  sub_100020C48();
  uint64_t v267 = v8;
  __chkstk_darwin(v9);
  sub_100017D2C();
  sub_100024A74();
  __chkstk_darwin(v10);
  sub_100021308();
  sub_100024A74();
  __chkstk_darwin(v11);
  sub_100024FFC();
  sub_10002AC48(v12);
  uint64_t v13 = type metadata accessor for Apple_Parsec_Search_V2_MarketplaceInfo();
  uint64_t v14 = sub_100016544(v13);
  __chkstk_darwin(v14);
  sub_10000E04C();
  sub_10002AC48(v15);
  uint64_t v259 = type metadata accessor for PegasusClientName();
  sub_100020C48();
  uint64_t v258 = v16;
  __chkstk_darwin(v17);
  sub_10000E04C();
  sub_10001D79C(v18);
  uint64_t v19 = sub_10002572C(&qword_10021C638);
  uint64_t v20 = sub_100016544(v19);
  __chkstk_darwin(v20);
  sub_10000E04C();
  sub_10002AC48(v21);
  uint64_t v271 = type metadata accessor for Trialpb_TrialExperiment();
  sub_100020C48();
  uint64_t v261 = v22;
  __chkstk_darwin(v23);
  sub_10000E04C();
  uint64_t v25 = sub_10002AC48(v24);
  uint64_t v293 = type metadata accessor for SessionTokens(v25);
  sub_10001DCF8();
  uint64_t v27 = __chkstk_darwin(v26);
  uint64_t v29 = (char *)&v257 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  sub_100021308();
  sub_100024A74();
  __chkstk_darwin(v30);
  sub_100021308();
  sub_100024A74();
  __chkstk_darwin(v31);
  sub_100024FFC();
  sub_10001D79C(v32);
  uint64_t v33 = sub_10002572C(&qword_10021E9B0);
  uint64_t v34 = sub_100016544(v33);
  __chkstk_darwin(v34);
  sub_100017D2C();
  sub_100024A74();
  __chkstk_darwin(v35);
  sub_100021308();
  sub_100024A74();
  __chkstk_darwin(v36);
  sub_100024FFC();
  sub_10002AC48(v37);
  uint64_t v296 = type metadata accessor for Apple_Parsec_Search_V2_Subscriptions();
  sub_100020C48();
  uint64_t v290 = v38;
  __chkstk_darwin(v39);
  sub_100017D2C();
  sub_100024A74();
  __chkstk_darwin(v40);
  sub_100021308();
  sub_100024A74();
  __chkstk_darwin(v41);
  sub_100024FFC();
  sub_10001D79C(v42);
  uint64_t v43 = sub_10002572C(&qword_10021E9B8);
  uint64_t v44 = sub_100016544(v43);
  __chkstk_darwin(v44);
  sub_100017D2C();
  sub_100024A74();
  uint64_t v46 = __chkstk_darwin(v45);
  uint64_t v48 = (char *)&v257 - v47;
  __chkstk_darwin(v46);
  sub_100021308();
  sub_100024A74();
  __chkstk_darwin(v49);
  sub_100021308();
  sub_100024A74();
  __chkstk_darwin(v50);
  sub_100024FFC();
  sub_10002AC48(v51);
  uint64_t v304 = type metadata accessor for Apple_Parsec_Search_PegasusQueryContext.HourFormat();
  sub_100020C48();
  uint64_t v302 = v52;
  __chkstk_darwin(v53);
  sub_100017D2C();
  sub_100024A74();
  uint64_t v55 = __chkstk_darwin(v54);
  uint64_t v57 = (char *)&v257 - v56;
  __chkstk_darwin(v55);
  sub_100021308();
  sub_100024A74();
  __chkstk_darwin(v58);
  sub_100021308();
  sub_100024A74();
  __chkstk_darwin(v59);
  sub_100024FFC();
  sub_10001D79C(v60);
  uint64_t v61 = sub_10002572C(&qword_10021E9C0);
  uint64_t v62 = sub_100016544(v61);
  __chkstk_darwin(v62);
  sub_100017D2C();
  sub_100024A74();
  __chkstk_darwin(v63);
  sub_100021308();
  sub_100024A74();
  __chkstk_darwin(v64);
  sub_100021308();
  sub_100024A74();
  uint64_t v66 = __chkstk_darwin(v65);
  uint64_t v68 = (char *)&v257 - v67;
  __chkstk_darwin(v66);
  id v70 = (char *)&v257 - v69;
  uint64_t v300 = type metadata accessor for Apple_Parsec_Search_V2_Location();
  sub_100020C48();
  uint64_t v294 = v71;
  __chkstk_darwin(v72);
  sub_100017D2C();
  sub_100024A74();
  __chkstk_darwin(v73);
  sub_100021308();
  sub_100024A74();
  uint64_t v75 = __chkstk_darwin(v74);
  uint64_t v77 = (char *)&v257 - v76;
  uint64_t v78 = __chkstk_darwin(v75);
  uint64_t v80 = (char *)&v257 - v79;
  __chkstk_darwin(v78);
  sub_100021308();
  sub_100024A74();
  __chkstk_darwin(v81);
  uint64_t v83 = (char *)&v257 - v82;
  type metadata accessor for UUID();
  sub_100020C48();
  uint64_t v298 = v84;
  uint64_t v299 = v85;
  __chkstk_darwin(v84);
  sub_10000E04C();
  uint64_t v297 = v86;
  uint64_t v87 = type metadata accessor for Apple_Parsec_Search_PegasusQueryContext.MeasurementSystem();
  uint64_t v88 = sub_100016544(v87);
  __chkstk_darwin(v88);
  sub_10000E04C();
  uint64_t v303 = v89;
  uint64_t v90 = type metadata accessor for Apple_Parsec_Search_PegasusQueryContext.TemperatureUnit();
  uint64_t v91 = sub_100016544(v90);
  __chkstk_darwin(v91);
  sub_10000E04C();
  uint64_t v301 = v92;
  uint64_t v307 = a4;
  Apple_Parsec_Search_PegasusQueryContext.init()();
  uint64_t v295 = a1;
  switch(a1)
  {
    case 1:
      type metadata accessor for ParsecKeys();
      sub_100018580();
      ParsecKeys.oldSecretKey.getter();
      sub_10002ADCC();
      sub_100017F74();
      static ParsecKeys.shared.getter();
      ParsecKeys.encryptedToken.getter();
      sub_100027130();
      sub_10001DE08();
      id v118 = objc_allocWithZone((Class)PARSessionConfiguration);
      id v119 = sub_1000F9454(0x697261666153, 0xE600000000000000, 0x312F697261666153, 0xE800000000000000);
      sub_100006B58();
      unint64_t v120 = sub_1000F5B10();
      swift_unknownObjectRelease();
      uint64_t v121 = v306;
      uint64_t v122 = (int *)v308;
      if (v120)
      {
        swift_unknownObjectRetain();
        sub_1000E8784();
        swift_unknownObjectRelease();
        sub_100024108();
        uint64_t v124 = *(void *)&v29[v123];
        swift_bridgeObjectRetain();
        sub_1000310E0((uint64_t)v29, (void (*)(void))type metadata accessor for SessionTokens);
        if (v124)
        {
          uint64_t v125 = swift_bridgeObjectRetain();
          sub_10011A690(v125, v126, v127, v128, v129, v130, v131, v132, v257, v258, v259, v260, v261, v262, v263, v264, v265, v266, v267,
            v268,
            v269,
            v270,
            v271,
            v272,
            v273,
            v274);
          uint64_t v134 = v133;
          swift_bridgeObjectRelease();
          v309[0] = v134;
          swift_retain();
          sub_100093EF4(v309);
          swift_bridgeObjectRelease();
          swift_release();
        }
        Apple_Parsec_Search_PegasusQueryContext.trialIdentifiers.setter();
        swift_unknownObjectRetain();
        sub_1000E8660();
        swift_unknownObjectRelease();
        UUID.uuidString.getter();
        sub_10000E040();
        v235();
        Apple_Parsec_Search_PegasusQueryContext.userGuid.setter();
        swift_release();
      }
      sub_100008AC4(v309);
      sub_10002441C();
      Apple_Parsec_Search_PegasusQueryContext.searchOptOut.setter();
      sub_10001CA50((uint64_t)v309);
      uint64_t v236 = sub_1000F8AD4();
      sub_1000284B8(v236, v237);
      Apple_Parsec_Search_PegasusQueryContext.installedAppsSignature.setter();
      if (sub_100020CE8(v122[20])) {
        sub_100027ECC();
      }
      else {
        sub_10002C374();
      }
      uint64_t v238 = v296;
      uint64_t v239 = v278;
      swift_bridgeObjectRetain();
      sub_10000E1AC();
      Apple_Parsec_Search_PegasusQueryContext.countryCode.setter();
      if (!v121[1]) {
        sub_10002C374();
      }
      swift_bridgeObjectRetain();
      sub_10000E1AC();
      Apple_Parsec_Search_PegasusQueryContext.locale.setter();
      if (!v121[12]) {
        sub_10002C374();
      }
      swift_bridgeObjectRetain();
      sub_10000E1AC();
      Apple_Parsec_Search_PegasusQueryContext.effectiveSystemLanguage.setter();
      swift_bridgeObjectRetain();
      Apple_Parsec_Search_PegasusQueryContext.preferredLanguages.setter();
      if (!v121[3]) {
        sub_10002C374();
      }
      swift_bridgeObjectRetain();
      sub_10000E1AC();
      Apple_Parsec_Search_PegasusQueryContext.calendar.setter();
      if (!v121[10]) {
        sub_10002C374();
      }
      swift_bridgeObjectRetain();
      sub_10000E1AC();
      Apple_Parsec_Search_PegasusQueryContext.timeZone.setter();
      sub_10005D200(v121[4], v121[5]);
      Apple_Parsec_Search_PegasusQueryContext.measurementSystem.setter();
      sub_10005D134(v121[16], v121[17]);
      Apple_Parsec_Search_PegasusQueryContext.temperatureUnit.setter();
      uint64_t v240 = v281;
      sub_1000F857C(v281);
      uint64_t v241 = v304;
      sub_1000184F4(v240, 1, v304);
      if (v110)
      {
        (*(void (**)(uint64_t, void, uint64_t))(v302 + 104))(v280, enum case for Apple_Parsec_Search_PegasusQueryContext.HourFormat.unknown(_:), v241);
        sub_100019994(v240, &qword_10021E9B8);
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v302 + 32))(v280, v240, v241);
      }
      sub_10002E91C();
      Apple_Parsec_Search_PegasusQueryContext.hourFormat.setter();
      sub_1000F8740(v239);
      uint64_t v242 = v300;
      sub_1000184F4(v239, 1, v300);
      if (v110)
      {
        sub_100019994(v239, &qword_10021E9C0);
      }
      else
      {
        sub_100025044();
        uint64_t v243 = v263;
        sub_10000E0F4();
        v244();
        sub_10002CE1C();
        sub_100016608();
        v245();
        sub_10002E91C();
        Apple_Parsec_Search_PegasusQueryContext.location.setter();
        (*(void (**)(uint64_t, uint64_t))(v241 + 8))(v243, v242);
      }
      uint64_t v246 = v287;
      if (*((unsigned char *)v121 + v122[36]) != 6)
      {
        sub_1000288EC();
        sub_10005D3A4();
        uint64_t v247 = v267;
        uint64_t v248 = v265;
        uint64_t v249 = v268;
        sub_10000E0F4();
        v250();
        sub_100016608();
        v251();
        sub_10002E91C();
        Apple_Parsec_Search_PegasusQueryContext.transportationMode.setter();
        (*(void (**)(uint64_t, uint64_t))(v247 + 8))(v248, v249);
      }
      uint64_t v252 = *((unsigned __int8 *)v121 + v122[32]);
      if (v252 == 2)
      {
        sub_1000236C8((uint64_t)v121, v246);
LABEL_216:
        uint64_t v252 = *(unsigned __int8 *)(v246 + v122[33]);
        sub_1000310E0(v246, (void (*)(void))type metadata accessor for PegasusContext);
        goto LABEL_218;
      }
      sub_1000236C8((uint64_t)v121, v246);
      if ((v252 & 1) == 0) {
        goto LABEL_216;
      }
      sub_1000310E0(v246, (void (*)(void))type metadata accessor for PegasusContext);
LABEL_218:
      Apple_Parsec_Search_PegasusQueryContext.managedDevice.setter();
      if (v121[7]) {
        uint64_t v252 = v121[6];
      }
      else {
        sub_10002C374();
      }
      swift_bridgeObjectRetain();
      sub_10000E1AC();
      Apple_Parsec_Search_PegasusQueryContext.storeFront.setter();
      sub_1000288EC();
      sub_1000F8630(v253);
      uint64_t v254 = sub_100029494();
      sub_1000184F4(v254, v255, v238);
      if (v110)
      {
        Apple_Parsec_Search_V2_Subscriptions.init()();
        sub_100019994(v252, &qword_10021E9B0);
      }
      else
      {
        sub_100019C28();
        v256(v284, v252, v238);
      }
      sub_10002E91C();
      Apple_Parsec_Search_PegasusQueryContext.subscriptions.setter();
      if (sub_100020CE8(v122[27])) {
        sub_100027ECC();
      }
      else {
        sub_10002C374();
      }
      swift_bridgeObjectRetain();
      sub_10000E1AC();
      Apple_Parsec_Search_PegasusQueryContext.skuRegion.setter();
      if (qword_100218C08 != -1) {
        swift_once();
      }
      Apple_Parsec_Search_PegasusQueryContext.internalBuild.setter();
      Apple_Parsec_Search_PegasusQueryContext.seedBuild.setter();

      return;
    case 2:
      type metadata accessor for ParsecKeys();
      static ParsecKeys.shared.getter();
      ParsecKeys.oldSecretKey.getter();
      swift_release();
      Apple_Parsec_Search_PegasusQueryContext.longSecretKey.setter();
      static ParsecKeys.shared.getter();
      ParsecKeys.encryptedToken.getter();
      swift_release();
      Apple_Parsec_Search_PegasusQueryContext.encryptedAuthToken.setter();
      uint64_t v135 = v308;
      Swift::String v136 = v306;
      if (!*(void *)((char *)v306 + *(int *)(v308 + 80) + 8)) {
        sub_100021D3C();
      }
      uint64_t v188 = v300;
      uint64_t v189 = v275;
      swift_bridgeObjectRetain();
      sub_100028D38();
      Apple_Parsec_Search_PegasusQueryContext.countryCode.setter();
      if (!v136[1]) {
        sub_100021D3C();
      }
      swift_bridgeObjectRetain();
      sub_100028D38();
      Apple_Parsec_Search_PegasusQueryContext.locale.setter();
      swift_bridgeObjectRetain();
      Apple_Parsec_Search_PegasusQueryContext.preferredLanguages.setter();
      if (!v136[7]) {
        sub_100021D3C();
      }
      swift_bridgeObjectRetain();
      sub_100028D38();
      Apple_Parsec_Search_PegasusQueryContext.storeFront.setter();
      if (!v136[10]) {
        sub_100021D3C();
      }
      swift_bridgeObjectRetain();
      sub_100028D38();
      Apple_Parsec_Search_PegasusQueryContext.timeZone.setter();
      if (!*(void *)((char *)v136 + *(int *)(v135 + 108) + 8)) {
        sub_100021D3C();
      }
      swift_bridgeObjectRetain();
      sub_100028D38();
      Apple_Parsec_Search_PegasusQueryContext.skuRegion.setter();
      if (!v136[3]) {
        sub_100021D3C();
      }
      swift_bridgeObjectRetain();
      sub_100028D38();
      Apple_Parsec_Search_PegasusQueryContext.calendar.setter();
      sub_10005D134(v136[16], v136[17]);
      Apple_Parsec_Search_PegasusQueryContext.temperatureUnit.setter();
      sub_10005D200(v136[4], v136[5]);
      Apple_Parsec_Search_PegasusQueryContext.measurementSystem.setter();
      Apple_Parsec_Search_PegasusQueryContext.managedDevice.setter();
      if (qword_100218C08 != -1) {
        swift_once();
      }
      Apple_Parsec_Search_PegasusQueryContext.internalBuild.setter();
      Apple_Parsec_Search_PegasusQueryContext.seedBuild.setter();
      sub_100008AC4(v309);
      sub_10002441C();
      sub_10001CA50((uint64_t)v309);
      Apple_Parsec_Search_PegasusQueryContext.searchOptOut.setter();
      sub_1000F857C(v189);
      uint64_t v190 = sub_100029494();
      uint64_t v191 = v304;
      sub_1000184F4(v190, v192, v304);
      if (v110)
      {
        sub_100028B60();
        v193();
        sub_100019994(v189, &qword_10021E9B8);
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v302 + 32))(v273, v189, v191);
      }
      Apple_Parsec_Search_PegasusQueryContext.hourFormat.setter();
      sub_1000288EC();
      sub_1000F8740(v194);
      uint64_t v195 = sub_100029494();
      sub_1000184F4(v195, v196, v188);
      if (v110)
      {
        sub_100019994(v189, &qword_10021E9C0);
      }
      else
      {
        uint64_t v197 = v294;
        sub_10000E0F4();
        v198();
        sub_100016608();
        v199();
        Apple_Parsec_Search_PegasusQueryContext.location.setter();
        (*(void (**)(char *, uint64_t))(v197 + 8))(v77, v188);
      }
      uint64_t v201 = v298;
      uint64_t v200 = v299;
      uint64_t v202 = v297;
      sub_10007E75C();
      sub_1000E8660();
      swift_unknownObjectRelease();
      UUID.uuidString.getter();
      (*(void (**)(uint64_t, uint64_t))(v200 + 8))(v202, v201);
      Apple_Parsec_Search_PegasusQueryContext.userGuid.setter();
      return;
    case 3:
    case 20:
    case 22:
      sub_10007EAB0();
      uint64_t v93 = sub_100013298();
      swift_release();
      if (v93)
      {
        uint64_t v94 = swift_bridgeObjectRetain();
        sub_10011A690(v94, v95, v96, v97, v98, v99, v100, v101, v257, v258, v259, v260, v261, v262, v263, v264, v265, v266, v267,
          v268,
          v269,
          v270,
          v271,
          v272,
          v273,
          v274);
        uint64_t v103 = v102;
        swift_bridgeObjectRelease();
        v309[0] = v103;
        swift_retain();
        sub_100093EF4(v309);
        uint64_t v104 = v306;
        swift_bridgeObjectRelease();
        swift_release();
      }
      else
      {
        uint64_t v104 = v306;
      }
      Apple_Parsec_Search_PegasusQueryContext.trialIdentifiers.setter();
      type metadata accessor for ParsecKeys();
      sub_100018580();
      ParsecKeys.oldSecretKey.getter();
      sub_10002ADCC();
      Apple_Parsec_Search_PegasusQueryContext.longSecretKey.setter();
      static ParsecKeys.shared.getter();
      ParsecKeys.encryptedToken.getter();
      sub_100027130();
      Apple_Parsec_Search_PegasusQueryContext.encryptedAuthToken.setter();
      uint64_t v107 = v308;
      Apple_Parsec_Search_PegasusQueryContext.hsEnabled.setter();
      if (sub_100020CE8(*(int *)(v107 + 80))) {
        sub_100027ECC();
      }
      else {
        sub_10002C374();
      }
      uint64_t v108 = v302;
      swift_bridgeObjectRetain();
      sub_1000275D0();
      Apple_Parsec_Search_PegasusQueryContext.countryCode.setter();
      if (!v104[1]) {
        sub_10002C374();
      }
      swift_bridgeObjectRetain();
      sub_1000275D0();
      Apple_Parsec_Search_PegasusQueryContext.locale.setter();
      if (sub_100020CE8(*(int *)(v308 + 112))) {
        sub_100027ECC();
      }
      else {
        sub_10002C374();
      }
      swift_bridgeObjectRetain();
      sub_1000275D0();
      Apple_Parsec_Search_PegasusQueryContext.sil.setter();
      sub_10005D134(v104[16], v104[17]);
      Apple_Parsec_Search_PegasusQueryContext.temperatureUnit.setter();
      if (!v104[12]) {
        sub_10002C374();
      }
      swift_bridgeObjectRetain();
      sub_1000275D0();
      Apple_Parsec_Search_PegasusQueryContext.effectiveSystemLanguage.setter();
      sub_10005D200(v104[4], v104[5]);
      Apple_Parsec_Search_PegasusQueryContext.measurementSystem.setter();
      if (qword_100218C08 != -1) {
        swift_once();
      }
      Apple_Parsec_Search_PegasusQueryContext.internalBuild.setter();
      Apple_Parsec_Search_PegasusQueryContext.seedBuild.setter();
      swift_bridgeObjectRetain();
      Apple_Parsec_Search_PegasusQueryContext.preferredLanguages.setter();
      if (!v104[10]) {
        sub_10002C374();
      }
      swift_bridgeObjectRetain();
      sub_1000275D0();
      Apple_Parsec_Search_PegasusQueryContext.timeZone.setter();
      sub_1000F857C((uint64_t)v48);
      uint64_t v109 = v304;
      sub_1000184F4((uint64_t)v48, 1, v304);
      if (v110)
      {
        (*(void (**)(char *, void, uint64_t))(v108 + 104))(v57, enum case for Apple_Parsec_Search_PegasusQueryContext.HourFormat.unknown(_:), v109);
        sub_100019994((uint64_t)v48, &qword_10021E9B8);
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v108 + 32))(v57, v48, v109);
      }
      Apple_Parsec_Search_PegasusQueryContext.hourFormat.setter();
      uint64_t v111 = v308;
      if (!v104[7]) {
        sub_10002C374();
      }
      swift_bridgeObjectRetain();
      sub_1000275D0();
      Apple_Parsec_Search_PegasusQueryContext.storeFront.setter();
      uint64_t v112 = sub_1000F8AD4();
      sub_1000284B8(v112, v113);
      Apple_Parsec_Search_PegasusQueryContext.installedAppsSignature.setter();
      sub_10007EB30();
      sub_10001B620(v309, v309[3]);
      sub_1000B2444();
      sub_10001CA50((uint64_t)v309);
      sub_1000275D0();
      Apple_Parsec_Search_PegasusQueryContext.ampBaselineExperimentMetadata.setter();
      if (sub_100020CE8(*(int *)(v111 + 108))) {
        sub_100027ECC();
      }
      else {
        sub_10002C374();
      }
      swift_bridgeObjectRetain();
      sub_1000275D0();
      Apple_Parsec_Search_PegasusQueryContext.skuRegion.setter();
      static ConfigurationContext.modelNumber.getter();
      Apple_Parsec_Search_PegasusQueryContext.deviceModel.setter();
      uint64_t v114 = ClientType.rawValue.getter();
      if (v114 == ClientType.rawValue.getter())
      {
        sub_100008AC4(v309);
        sub_10002441C();
        sub_10001CA50((uint64_t)v309);
        goto LABEL_32;
      }
      return;
    case 5:
      type metadata accessor for ParsecKeys();
      sub_100018580();
      ParsecKeys.oldSecretKey.getter();
      sub_10002ADCC();
      sub_100017F74();
      static ParsecKeys.shared.getter();
      ParsecKeys.encryptedToken.getter();
      sub_100027130();
      sub_10001DE08();
      sub_100008AC4(v309);
      sub_10002441C();
      sub_10001CA50((uint64_t)v309);
LABEL_32:
      Apple_Parsec_Search_PegasusQueryContext.searchOptOut.setter();
      return;
    case 6:
      char v116 = v306;
      if (*(void *)((char *)v306 + *(int *)(v308 + 80) + 8)) {
        sub_100027ECC();
      }
      else {
        sub_10002C374();
      }
      swift_bridgeObjectRetain();
      sub_10002B934();
      type metadata accessor for ParsecKeys();
      sub_100018580();
      ParsecKeys.oldSecretKey.getter();
      sub_10002ADCC();
      Apple_Parsec_Search_PegasusQueryContext.longSecretKey.setter();
      static ParsecKeys.shared.getter();
      ParsecKeys.encryptedToken.getter();
      sub_100027130();
      sub_1000F9C1C();
      if (!v116[7]) {
        sub_10002C374();
      }
      swift_bridgeObjectRetain();
      sub_10002EBDC();
      swift_bridgeObjectRetain();
      Apple_Parsec_Search_PegasusQueryContext.preferredLanguages.setter();
      if (!v116[1]) {
        sub_10002C374();
      }
      swift_bridgeObjectRetain();
      sub_1000296E0();
      if (!v116[10]) {
        sub_10002C374();
      }
      swift_bridgeObjectRetain();
      sub_100029924();
      if (!v116[12]) {
        sub_10002C374();
      }
      swift_bridgeObjectRetain();
      Apple_Parsec_Search_PegasusQueryContext.effectiveSystemLanguage.setter();
      return;
    case 7:
    case 8:
      type metadata accessor for ParsecKeys();
      sub_100018580();
      ParsecKeys.oldSecretKey.getter();
      sub_10002ADCC();
      sub_100017F74();
      static ParsecKeys.shared.getter();
      ParsecKeys.encryptedToken.getter();
      sub_100027130();
      sub_10001DE08();
      uint64_t v105 = v308;
      uint64_t v106 = v306;
      if (sub_100023EF0(*(int *)(v308 + 80))) {
        sub_100027ECC();
      }
      else {
        sub_10002C374();
      }
      uint64_t v139 = v300;
      swift_bridgeObjectRetain();
      sub_10002EAE8();
      if (v106[1]) {
        sub_10002E9C8();
      }
      else {
        sub_10002C374();
      }
      swift_bridgeObjectRetain();
      sub_100028220();
      swift_bridgeObjectRetain();
      Apple_Parsec_Search_PegasusQueryContext.preferredLanguages.setter();
      if (!v106[7]) {
        sub_10002C374();
      }
      swift_bridgeObjectRetain();
      sub_1000260EC();
      Apple_Parsec_Search_PegasusQueryContext.storeFront.setter();
      if (!v106[10]) {
        sub_10002C374();
      }
      swift_bridgeObjectRetain();
      sub_1000260EC();
      Apple_Parsec_Search_PegasusQueryContext.timeZone.setter();
      if (sub_100023EF0(*(int *)(v105 + 108))) {
        sub_100027ECC();
      }
      else {
        sub_10002C374();
      }
      swift_bridgeObjectRetain();
      sub_1000260EC();
      Apple_Parsec_Search_PegasusQueryContext.skuRegion.setter();
      if (!v106[3]) {
        sub_10002C374();
      }
      swift_bridgeObjectRetain();
      sub_1000260EC();
      Apple_Parsec_Search_PegasusQueryContext.calendar.setter();
      sub_10005D134(v106[16], v106[17]);
      Apple_Parsec_Search_PegasusQueryContext.temperatureUnit.setter();
      uint64_t v140 = v303;
      sub_10005D200(v106[4], v106[5]);
      Apple_Parsec_Search_PegasusQueryContext.measurementSystem.setter();
      Apple_Parsec_Search_PegasusQueryContext.managedDevice.setter();
      if (qword_100218C08 != -1) {
        swift_once();
      }
      Apple_Parsec_Search_PegasusQueryContext.internalBuild.setter();
      Apple_Parsec_Search_PegasusQueryContext.seedBuild.setter();
      sub_10007E75C();
      sub_1000E8660();
      swift_unknownObjectRelease();
      UUID.uuidString.getter();
      sub_100029598();
      sub_10000E040();
      v141();
      sub_1000260EC();
      Apple_Parsec_Search_PegasusQueryContext.userGuid.setter();
      sub_1000F8740((uint64_t)v70);
      sub_1000184F4((uint64_t)v70, 1, v139);
      uint64_t v142 = v291;
      if (v110)
      {
        sub_100019994((uint64_t)v70, &qword_10021E9C0);
      }
      else
      {
        sub_100025044();
        sub_10000E0F4();
        v143();
        sub_10002CE1C();
        sub_100016608();
        v144();
        Apple_Parsec_Search_PegasusQueryContext.location.setter();
        (*(void (**)(char *, uint64_t))(v140 + 8))(v83, v139);
      }
      uint64_t v145 = v296;
      uint64_t v146 = v289;
      uint64_t v147 = v292;
      sub_1000F857C(v292);
      uint64_t v148 = v304;
      sub_1000184F4(v147, 1, v304);
      if (v110)
      {
        sub_100028B60();
        v149();
        sub_100019994(v147, &qword_10021E9B8);
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v302 + 32))(v142, v147, v148);
      }
      Apple_Parsec_Search_PegasusQueryContext.hourFormat.setter();
      sub_1000F8630(v146);
      sub_1000184F4(v146, 1, v145);
      if (v110)
      {
        Apple_Parsec_Search_V2_Subscriptions.init()();
        sub_100019994(v146, &qword_10021E9B0);
      }
      else
      {
        sub_100019C28();
        v150(v288, v146, v145);
      }
      Apple_Parsec_Search_PegasusQueryContext.subscriptions.setter();
      uint64_t v151 = sub_1000F8AD4();
      sub_1000284B8(v151, v152);
      Apple_Parsec_Search_PegasusQueryContext.installedAppsSignature.setter();
      return;
    case 13:
      type metadata accessor for ParsecKeys();
      sub_100018580();
      ParsecKeys.oldSecretKey.getter();
      swift_release();
      Apple_Parsec_Search_PegasusQueryContext.longSecretKey.setter();
      static ParsecKeys.shared.getter();
      ParsecKeys.encryptedToken.getter();
      sub_100027130();
      sub_1000F9C1C();
      uint64_t v115 = v308;
      if (*(void *)((char *)v306 + *(int *)(v308 + 80) + 8)) {
        sub_100027ECC();
      }
      else {
        sub_10002C374();
      }
      uint64_t v153 = v300;
      swift_bridgeObjectRetain();
      sub_10002B934();
      uint64_t v154 = v306;
      if (v306[1]) {
        sub_10002E9C8();
      }
      else {
        sub_10002C374();
      }
      swift_bridgeObjectRetain();
      sub_1000296E0();
      swift_bridgeObjectRetain();
      Apple_Parsec_Search_PegasusQueryContext.preferredLanguages.setter();
      if (!v154[7]) {
        sub_10002C374();
      }
      swift_bridgeObjectRetain();
      sub_10002EBDC();
      if (!v154[10]) {
        sub_10002C374();
      }
      swift_bridgeObjectRetain();
      sub_100029924();
      if (sub_100023EF0(*(int *)(v115 + 108))) {
        sub_100027ECC();
      }
      else {
        sub_10002C374();
      }
      swift_bridgeObjectRetain();
      sub_10001D7D8();
      Apple_Parsec_Search_PegasusQueryContext.skuRegion.setter();
      uint64_t v155 = v306;
      if (!v306[3]) {
        sub_10002C374();
      }
      swift_bridgeObjectRetain();
      sub_10001D7D8();
      Apple_Parsec_Search_PegasusQueryContext.calendar.setter();
      sub_10005D134(v155[16], v155[17]);
      Apple_Parsec_Search_PegasusQueryContext.temperatureUnit.setter();
      sub_10005D200(v155[4], v155[5]);
      Apple_Parsec_Search_PegasusQueryContext.measurementSystem.setter();
      Apple_Parsec_Search_PegasusQueryContext.managedDevice.setter();
      if (qword_100218C08 != -1) {
        swift_once();
      }
      Apple_Parsec_Search_PegasusQueryContext.internalBuild.setter();
      Apple_Parsec_Search_PegasusQueryContext.seedBuild.setter();
      sub_100008AC4(v309);
      uint64_t v156 = sub_10002441C();
      sub_10001CA50((uint64_t)v309);
      Apple_Parsec_Search_PegasusQueryContext.searchOptOut.setter();
      sub_10007E75C();
      sub_1000E8660();
      swift_unknownObjectRelease();
      UUID.uuidString.getter();
      sub_100029598();
      sub_10000E040();
      v157();
      Apple_Parsec_Search_PegasusQueryContext.userGuid.setter();
      sub_1000F8740((uint64_t)v68);
      sub_1000184F4((uint64_t)v68, 1, v153);
      uint64_t v158 = v296;
      uint64_t v159 = v276;
      if (v110)
      {
        sub_100019994((uint64_t)v68, &qword_10021E9C0);
      }
      else
      {
        sub_100025044();
        sub_10000E0F4();
        v160();
        sub_10002CE1C();
        sub_100016608();
        v161();
        Apple_Parsec_Search_PegasusQueryContext.location.setter();
        (*(void (**)(char *, uint64_t))(v156 + 8))(v80, v153);
      }
      uint64_t v162 = v302;
      uint64_t v163 = v286;
      uint64_t v164 = v283;
      uint64_t v165 = v279;
      sub_1000F857C(v279);
      uint64_t v166 = v304;
      sub_1000184F4(v165, 1, v304);
      if (v110)
      {
        (*(void (**)(uint64_t, void, uint64_t))(v162 + 104))(v159, enum case for Apple_Parsec_Search_PegasusQueryContext.HourFormat.unknown(_:), v166);
        sub_100019994(v165, &qword_10021E9B8);
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v162 + 32))(v159, v165, v166);
      }
      Apple_Parsec_Search_PegasusQueryContext.hourFormat.setter();
      sub_1000F8630(v164);
      sub_1000184F4(v164, 1, v158);
      if (v110)
      {
        sub_1000288EC();
        Apple_Parsec_Search_V2_Subscriptions.init()();
        sub_100019994(v164, &qword_10021E9B0);
      }
      else
      {
        sub_100019C28();
        v167(v282, v164, v158);
      }
      Apple_Parsec_Search_PegasusQueryContext.subscriptions.setter();
      uint64_t v168 = sub_1000F8AD4();
      sub_1000284B8(v168, v169);
      Apple_Parsec_Search_PegasusQueryContext.installedAppsSignature.setter();
      id v170 = objc_allocWithZone((Class)PARSessionConfiguration);
      id v171 = sub_1000F9454(0xD000000000000018, 0x80000001001B25C0, 0xD000000000000014, 0x80000001001B7590);
      sub_100006B58();
      unint64_t v172 = sub_1000F5B10();
      swift_unknownObjectRelease();
      if (!v172)
      {

        return;
      }
      swift_unknownObjectRetain();
      swift_release();
      uint64_t v173 = v269;
      sub_1000E8784();
      swift_unknownObjectRelease();
      uint64_t v174 = v270;
      sub_100008A60(v173, v270);
      sub_100024108();
      uint64_t v176 = *(void *)(v174 + v175);
      if (v176)
      {
        uint64_t v177 = v258;
        uint64_t v178 = v257;
        uint64_t v179 = v259;
        (*(void (**)(uint64_t, void, uint64_t))(v258 + 104))(v257, enum case for PegasusClientName.VisualIntelligence(_:), v259);
        swift_bridgeObjectRetain();
        PegasusClientName.rawValue.getter();
        (*(void (**)(uint64_t, uint64_t))(v177 + 8))(v178, v179);
        sub_10005CC04(v176, v163);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1000184F4(v163, 1, v271);
        if (!v110)
        {
          sub_10000E0F4();
          v180();
          sub_10002572C(&qword_10021AC98);
          *(_OWORD *)(swift_allocObject() + 16) = xmmword_1001A2A20;
          sub_100016608();
          v181();
          Apple_Parsec_Search_PegasusQueryContext.trialIdentifiers.setter();
          if (qword_100218B78 != -1) {
            swift_once();
          }
          uint64_t v182 = type metadata accessor for Logger();
          sub_10002A10C(v182, (uint64_t)qword_100236A80);
          uint64_t v183 = Logger.logObject.getter();
          os_log_type_t v184 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v183, v184))
          {
            *(_WORD *)swift_slowAlloc() = 0;
            sub_100024288((void *)&_mh_execute_header, v185, v186, "Found valid trial experiment Identifiers");
            swift_slowDealloc();
          }

          sub_10000E040();
          v187();
LABEL_192:
          sub_1000310E0(v174, (void (*)(void))type metadata accessor for SessionTokens);
          return;
        }
      }
      else
      {
        sub_10002538C(v163, 1, 1, v271);
      }
      sub_100019994(v163, &qword_10021C638);
      if (qword_100218B78 != -1) {
        swift_once();
      }
      uint64_t v230 = type metadata accessor for Logger();
      sub_10002A10C(v230, (uint64_t)qword_100236A80);
      id v231 = Logger.logObject.getter();
      os_log_type_t v232 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v231, v232))
      {
        *(_WORD *)swift_slowAlloc() = 0;
        sub_100024288((void *)&_mh_execute_header, v233, v234, "Could not find trial experiment Identifiers");
        swift_slowDealloc();
      }

      goto LABEL_192;
    case 19:
      type metadata accessor for ParsecKeys();
      sub_100018580();
      ParsecKeys.oldSecretKey.getter();
      sub_10002ADCC();
      sub_100017F74();
      static ParsecKeys.shared.getter();
      ParsecKeys.encryptedToken.getter();
      sub_100027130();
      sub_10001DE08();
      if (v306[1]) {
        sub_100027ECC();
      }
      else {
        sub_10002C374();
      }
      swift_bridgeObjectRetain();
      sub_100028220();
      return;
    case 21:
      type metadata accessor for ParsecKeys();
      sub_100018580();
      ParsecKeys.oldSecretKey.getter();
      sub_10002ADCC();
      sub_100017F74();
      static ParsecKeys.shared.getter();
      ParsecKeys.encryptedToken.getter();
      sub_100027130();
      sub_10001DE08();
      uint64_t v138 = v306;
      if (v306[1]) {
        sub_10002E9C8();
      }
      else {
        sub_10002C374();
      }
      uint64_t v227 = v308;
      swift_bridgeObjectRetain();
      sub_100028220();
      if (sub_100023EF0(*(int *)(v227 + 80))) {
        sub_100027ECC();
      }
      else {
        sub_10002C374();
      }
      swift_bridgeObjectRetain();
      sub_10002EAE8();
      if (!v138[12]) {
        sub_10002C374();
      }
      swift_bridgeObjectRetain();
      sub_1000260EC();
      Apple_Parsec_Search_PegasusQueryContext.effectiveSystemLanguage.setter();
      v309[0] = (uint64_t)_swiftEmptyArrayStorage;
      sub_100008694();
      uint64_t v229 = sub_100013298();
      swift_release();
      if (v229)
      {
        sub_1000F5718(v229, v309);
        swift_bridgeObjectRelease();
      }
      Apple_Parsec_Search_PegasusQueryContext.trialIdentifiers.setter();
      return;
    case 23:
      type metadata accessor for ParsecKeys();
      sub_100018580();
      ParsecKeys.oldSecretKey.getter();
      sub_10002ADCC();
      Apple_Parsec_Search_PegasusQueryContext.longSecretKey.setter();
      static ParsecKeys.shared.getter();
      ParsecKeys.encryptedToken.getter();
      sub_100027130();
      sub_1000F9C1C();
      uint64_t v137 = v306;
      if (*(void *)((char *)v306 + *(int *)(v308 + 80) + 8)) {
        sub_100027ECC();
      }
      else {
        sub_10002C374();
      }
      uint64_t v203 = v305;
      uint64_t v204 = v299;
      uint64_t v205 = v300;
      swift_bridgeObjectRetain();
      sub_10002B934();
      if (!v137[1]) {
        sub_10002C374();
      }
      swift_bridgeObjectRetain();
      sub_1000296E0();
      if (!v137[7]) {
        sub_10002C374();
      }
      swift_bridgeObjectRetain();
      sub_10002EBDC();
      if (!v137[10]) {
        sub_10002C374();
      }
      swift_bridgeObjectRetain();
      sub_100029924();
      if (qword_100218C08 != -1) {
        swift_once();
      }
      Apple_Parsec_Search_PegasusQueryContext.internalBuild.setter();
      if (!v137[12]) {
        sub_10002C374();
      }
      swift_bridgeObjectRetain();
      Apple_Parsec_Search_PegasusQueryContext.effectiveSystemLanguage.setter();
      Apple_Parsec_Search_PegasusQueryContext.managedDevice.setter();
      Apple_Parsec_Search_PegasusQueryContext.seedBuild.setter();
      sub_100008AC4(v309);
      sub_10002441C();
      sub_10001CA50((uint64_t)v309);
      Apple_Parsec_Search_PegasusQueryContext.searchOptOut.setter();
      sub_10007E75C();
      uint64_t v206 = v297;
      sub_1000E8660();
      swift_unknownObjectRelease();
      UUID.uuidString.getter();
      (*(void (**)(uint64_t, uint64_t))(v204 + 8))(v206, v298);
      Apple_Parsec_Search_PegasusQueryContext.userGuid.setter();
      sub_10007E75C();
      uint64_t v207 = v277;
      sub_10003093C(v277);
      swift_unknownObjectRelease();
      sub_100024108();
      uint64_t v209 = *(void *)(v207 + v208);
      swift_bridgeObjectRetain();
      sub_1000310E0(v207, (void (*)(void))type metadata accessor for SessionTokens);
      if (v209)
      {
        uint64_t v210 = swift_bridgeObjectRetain();
        sub_10011A690(v210, v211, v212, v213, v214, v215, v216, v217, v257, v258, v259, v260, v261, v262, v263, v264, v265, v266, v267,
          v268,
          v269,
          v270,
          v271,
          v272,
          v273,
          v274);
        uint64_t v219 = v218;
        swift_bridgeObjectRelease();
        v309[0] = v219;
        swift_retain();
        sub_100093EF4(v309);
        swift_bridgeObjectRelease();
        swift_release();
      }
      Apple_Parsec_Search_PegasusQueryContext.trialIdentifiers.setter();
      uint64_t v220 = sub_1000F8AD4();
      sub_1000284B8(v220, v221);
      Apple_Parsec_Search_PegasusQueryContext.installedAppsSignature.setter();
      if (v137[13]) {
        uint64_t v222 = (void *)v137[13];
      }
      else {
        uint64_t v222 = _swiftEmptyArrayStorage;
      }
      swift_bridgeObjectRetain();
      Apple_Parsec_Search_PegasusQueryContext.preferredLanguages.setter();
      uint64_t v223 = v274;
      sub_1000F8740(v274);
      sub_1000184F4(v223, 1, v205);
      if (v110)
      {
        sub_100019994(v223, &qword_10021E9C0);
      }
      else
      {
        sub_100025044();
        uint64_t v224 = v262;
        sub_10000E0F4();
        v225();
        sub_10002CE1C();
        sub_100016608();
        v226();
        Apple_Parsec_Search_PegasusQueryContext.location.setter();
        ((void (*)(uint64_t, uint64_t))v222[1])(v224, v205);
      }
      if (!v137[19]) {
        sub_10002C374();
      }
      swift_bridgeObjectRetain();
      sub_10001D7D8();
      Apple_Parsec_Search_PegasusQueryContext.region.setter();
      swift_unknownObjectRetain();
      sub_1000288EC();
      sub_1000F8B00(v203, v228);
      Apple_Parsec_Search_PegasusQueryContext.marketplaceInfo.setter();
      return;
    case 26:
      type metadata accessor for ParsecKeys();
      sub_100018580();
      ParsecKeys.oldSecretKey.getter();
      sub_10002ADCC();
      sub_100017F74();
      static ParsecKeys.shared.getter();
      ParsecKeys.encryptedToken.getter();
      sub_100027130();
      sub_10001DE08();
      if (qword_100218C08 != -1) {
        swift_once();
      }
      Apple_Parsec_Search_PegasusQueryContext.internalBuild.setter();
      Apple_Parsec_Search_PegasusQueryContext.seedBuild.setter();
      unint64_t v117 = v306;
      if (sub_100023EF0(*(int *)(v308 + 80))) {
        sub_100027ECC();
      }
      else {
        sub_10002C374();
      }
      swift_bridgeObjectRetain();
      sub_10002EAE8();
      if (v117[1]) {
        sub_10002E9C8();
      }
      else {
        sub_10002C374();
      }
      swift_bridgeObjectRetain();
      sub_100028220();
      swift_bridgeObjectRetain();
      Apple_Parsec_Search_PegasusQueryContext.preferredLanguages.setter();
      return;
    default:
      return;
  }
}

uint64_t sub_1000F857C@<X0>(uint64_t a1@<X8>)
{
  if (*(unsigned char *)(v1 + 64) == 2)
  {
    type metadata accessor for Apple_Parsec_Search_PegasusQueryContext.HourFormat();
    uint64_t v3 = sub_100029494();
  }
  else
  {
    uint64_t v6 = type metadata accessor for Apple_Parsec_Search_PegasusQueryContext.HourFormat();
    sub_10001DCF8();
    sub_100028B60();
    v7();
    uint64_t v3 = a1;
    uint64_t v4 = 0;
    uint64_t v5 = v6;
  }

  return sub_10002538C(v3, v4, 1, v5);
}

uint64_t sub_1000F8630@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for String.Encoding();
  sub_100020C48();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  sub_10000DFD0();
  uint64_t v9 = v8 - v7;
  if (*(void *)(v1 + 120)
    && (static String.Encoding.utf8.getter(),
        String.data(using:allowLossyConversion:)(),
        unint64_t v11 = v10,
        (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v9, v3),
        v11 >> 60 != 15))
  {
    Apple_Parsec_Search_V2_Subscriptions.init()();
    Apple_Parsec_Search_V2_Subscriptions.subscriptionJson.setter();
    uint64_t v12 = 0;
  }
  else
  {
    uint64_t v12 = 1;
  }
  uint64_t v13 = type metadata accessor for Apple_Parsec_Search_V2_Subscriptions();
  return sub_10002538C(a1, v12, 1, v13);
}

uint64_t sub_1000F8740@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Apple_Parsec_Search_V2_RevGeoResolution();
  sub_100020C48();
  uint64_t v6 = v5;
  uint64_t v8 = __chkstk_darwin(v7);
  __chkstk_darwin(v8);
  unint64_t v10 = (char *)&v43 - v9;
  uint64_t v11 = type metadata accessor for Apple_Parsec_Search_V2_Location.Source();
  uint64_t v12 = sub_100016544(v11);
  __chkstk_darwin(v12);
  sub_10000DFD0();
  uint64_t v15 = v14 - v13;
  uint64_t v16 = type metadata accessor for Apple_Parsec_Search_V2_Location();
  sub_100020C48();
  uint64_t v18 = v17;
  __chkstk_darwin(v19);
  sub_10000DFD0();
  uint64_t v22 = v21 - v20;
  uint64_t v23 = *(void **)(v2 + 160);
  if (v23)
  {
    uint64_t v43 = v6;
    uint64_t v44 = v4;
    uint64_t v45 = a1;
    id v24 = v23;
    Apple_Parsec_Search_V2_Location.init()();
    [v24 horizontalAccuracy];
    Apple_Parsec_Search_V2_Location.horizontalAccuracy.setter();
    [v24 coordinate];
    Apple_Parsec_Search_V2_Location.latitude.setter();
    [v24 coordinate];
    Apple_Parsec_Search_V2_Location.longitude.setter();
    sub_1000FD578(v15);
    Apple_Parsec_Search_V2_Location.source.setter();
    uint64_t v47 = &unk_1001FCBE0;
    unint64_t v48 = sub_1000714F0();
    v46[0] = 0;
    char v25 = isFeatureEnabled(_:)();
    sub_10001CA50((uint64_t)v46);
    if ((v25 & 1) != 0 && (uint64_t v26 = *(void **)(v2 + *(int *)(type metadata accessor for PegasusContext(0) + 68))) != 0)
    {
      id v27 = v26;
      Apple_Parsec_Search_V2_RevGeoResolution.init()();
      uint64_t v28 = sub_100013C38(v27, (SEL *)&selRef_country);
      sub_100023CC0(v28, v29);
      Apple_Parsec_Search_V2_RevGeoResolution.country.setter();
      uint64_t v30 = sub_100013C38(v27, (SEL *)&selRef_administrativeArea);
      sub_100023CC0(v30, v31);
      Apple_Parsec_Search_V2_RevGeoResolution.administrativeArea.setter();
      uint64_t v32 = sub_100013C38(v27, (SEL *)&selRef_subAdministrativeArea);
      sub_100023CC0(v32, v33);
      Apple_Parsec_Search_V2_RevGeoResolution.subAdministrativeArea.setter();
      uint64_t v34 = sub_100013C38(v27, (SEL *)&selRef_locality);
      sub_100023CC0(v34, v35);
      Apple_Parsec_Search_V2_RevGeoResolution.locality.setter();
      uint64_t v36 = sub_1000F9AB8(v27);
      if (!v36 || (uint64_t v37 = sub_100087C78(v36), swift_bridgeObjectRelease(), !v37)) {
        swift_bridgeObjectRelease();
      }
      uint64_t v38 = v44;
      Apple_Parsec_Search_V2_RevGeoResolution.formattedAddressLines.setter();
      uint64_t v39 = v43;
      sub_100016608();
      v40();
      Apple_Parsec_Search_V2_Location.revGeoResolution.setter();

      (*(void (**)(char *, uint64_t))(v39 + 8))(v10, v38);
    }
    else
    {
    }
    uint64_t v41 = v45;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 32))(v45, v22, v16);
    return sub_10002538C(v41, 0, 1, v16);
  }
  else
  {
    return sub_10002538C(a1, 1, 1, v16);
  }
}

uint64_t sub_1000F8AD4()
{
  id v0 = sub_10000ACC8();
  if (v1) {
    return sub_1000F8E28((uint64_t)v0, v1);
  }
  else {
    return 0;
  }
}

uint64_t sub_1000F8B00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Apple_Parsec_Search_V2_MarketplaceInfo.Marketplace();
  uint64_t v21 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)v20 - v8;
  Apple_Parsec_Search_V2_MarketplaceInfo.init()();
  swift_unknownObjectRetain();
  sub_100043640((uint64_t)&v25);
  swift_unknownObjectRelease();
  if (v26)
  {
    sub_10001C1AC(&v25, (uint64_t)v27);
    sub_10001B620(v27, v28);
    Apple_Parsec_Search_V2_MarketplaceInfo.isMarketplaceEligible.setter();
    unint64_t v10 = sub_10001B620(v27, v28);
    uint64_t v11 = sub_1000B9970(v10[2]);
    uint64_t v12 = v11[2];
    if (v12)
    {
      v20[2] = a2;
      v20[3] = a1;
      id v24 = (char *)_swiftEmptyArrayStorage;
      sub_1000EE504(0, v12, 0);
      v20[1] = v11;
      uint64_t v13 = (uint64_t)(v11 + 4);
      uint64_t v14 = (void (**)(char *, char *, uint64_t))(v21 + 32);
      do
      {
        sub_10001C20C(v13, (uint64_t)&v25);
        sub_10001C20C((uint64_t)&v25, (uint64_t)v22);
        Apple_Parsec_Search_V2_MarketplaceInfo.Marketplace.init()();
        sub_10001B620(v22, v23);
        swift_bridgeObjectRetain();
        Apple_Parsec_Search_V2_MarketplaceInfo.Marketplace.id.setter();
        if (sub_10001B620(v22, v23)[4])
        {
          swift_bridgeObjectRetain();
          Apple_Parsec_Search_V2_MarketplaceInfo.Marketplace.territory.setter();
        }
        uint64_t v15 = *v14;
        (*v14)(v9, v7, v4);
        sub_10001CA50((uint64_t)v22);
        sub_10001CA50((uint64_t)&v25);
        uint64_t v16 = v24;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1000EE504(0, *((void *)v16 + 2) + 1, 1);
          uint64_t v16 = v24;
        }
        unint64_t v18 = *((void *)v16 + 2);
        unint64_t v17 = *((void *)v16 + 3);
        if (v18 >= v17 >> 1)
        {
          sub_1000EE504(v17 > 1, v18 + 1, 1);
          uint64_t v16 = v24;
        }
        *((void *)v16 + 2) = v18 + 1;
        v15(&v16[((*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80))+ *(void *)(v21 + 72) * v18], v9, v4);
        id v24 = v16;
        v13 += 40;
        --v12;
      }
      while (v12);
    }
    swift_bridgeObjectRelease();
    Apple_Parsec_Search_V2_MarketplaceInfo.supportedMarketplaces.setter();
    swift_unknownObjectRelease();
    return sub_10001CA50((uint64_t)v27);
  }
  else
  {
    swift_unknownObjectRelease();
    return sub_100019994((uint64_t)&v25, &qword_10021C630);
  }
}

uint64_t sub_1000F8E28(uint64_t a1, uint64_t a2)
{
  uint64_t v33 = a1;
  uint64_t v34 = a2;
  *(void *)&long long v37 = a1;
  *((void *)&v37 + 1) = a2;
  swift_bridgeObjectRetain();
  sub_10002572C(&qword_10021E9C8);
  if (swift_dynamicCast())
  {
    sub_10001C1AC(v35, (uint64_t)&v38);
    sub_10001B620(&v38, v40);
    dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();
    swift_bridgeObjectRelease();
    v35[0] = v37;
    sub_10001CA50((uint64_t)&v38);
    return *(void *)&v35[0];
  }
  uint64_t v36 = 0;
  memset(v35, 0, sizeof(v35));
  sub_100019994((uint64_t)v35, &qword_10021E9D0);
  uint64_t v2 = v34;
  if ((v34 & 0x1000000000000000) != 0)
  {
LABEL_61:
    uint64_t v3 = 0;
    unint64_t v5 = 0xF000000000000000;
    if ((v2 & 0x1000000000000000) == 0) {
      goto LABEL_10;
    }
  }
  else
  {
    if ((v34 & 0x2000000000000000) != 0)
    {
      uint64_t v38 = v33;
      uint64_t v39 = v34 & 0xFFFFFFFFFFFFFFLL;
    }
    else if ((v33 & 0x1000000000000000) == 0)
    {
      _StringObject.sharedUTF8.getter();
    }
    uint64_t v3 = Data._Representation.init(_:)();
    unint64_t v5 = v4;
    if (v4 >> 60 != 15)
    {
      swift_bridgeObjectRelease();
      *(void *)&v35[0] = v3;
      *((void *)&v35[0] + 1) = v5;
      return *(void *)&v35[0];
    }
    if ((v34 & 0x1000000000000000) == 0) {
      goto LABEL_10;
    }
  }
  String.UTF8View._foreignCount()();
LABEL_10:
  *(void *)&v35[0] = Data._Representation.init(count:)();
  *((void *)&v35[0] + 1) = v6;
  __chkstk_darwin(*(void *)&v35[0]);
  v28[2] = &v33;
  unint64_t v7 = (unint64_t)sub_1000F95A8((void *(*)(uint64_t *__return_ptr, char *, char *))sub_1000F9B4C, (uint64_t)v28);
  uint64_t v10 = *((void *)&v35[0] + 1) >> 62;
  uint64_t v11 = v7;
  unint64_t v13 = v12;
  unint64_t v14 = v8;
  uint64_t v2 = BYTE14(v35[0]);
  switch(*((void *)&v35[0] + 1) >> 62)
  {
    case 1:
      LODWORD(v15) = DWORD1(v35[0]) - LODWORD(v35[0]);
      if (__OFSUB__(DWORD1(v35[0]), v35[0])) {
        goto LABEL_65;
      }
      uint64_t v15 = (int)v15;
LABEL_16:
      if (v9 != v15)
      {
        if (v10)
        {
          if (v10 == 1) {
            uint64_t v2 = *(uint64_t *)&v35[0] >> 32;
          }
          else {
            uint64_t v2 = *(void *)(*(void *)&v35[0] + 24);
          }
        }
LABEL_53:
        if (v2 < v9)
        {
          __break(1u);
LABEL_65:
          __break(1u);
LABEL_66:
          __break(1u);
        }
        Data._Representation.replaceSubrange(_:with:count:)();
LABEL_55:
        swift_bridgeObjectRelease();
        goto LABEL_56;
      }
LABEL_22:
      if ((v13 & 0x2000000000000000) != 0) {
        unint64_t v19 = HIBYTE(v13) & 0xF;
      }
      else {
        unint64_t v19 = v7 & 0xFFFFFFFFFFFFLL;
      }
      *(void *)((char *)&v37 + 7) = 0;
      *(void *)&long long v37 = 0;
      if (4 * v19 == v8 >> 14) {
        goto LABEL_51;
      }
      unint64_t v29 = v5;
      LOBYTE(v20) = 0;
      uint64_t v21 = (v7 >> 59) & 1;
      if ((v13 & 0x1000000000000000) == 0) {
        LOBYTE(v21) = 1;
      }
      uint64_t v22 = 4 << v21;
      uint64_t v32 = v13 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v30 = v3;
      uint64_t v31 = (v13 & 0xFFFFFFFFFFFFFFFLL) + 32;
      break;
    case 2:
      uint64_t v17 = *(void *)(*(void *)&v35[0] + 16);
      uint64_t v16 = *(void *)(*(void *)&v35[0] + 24);
      BOOL v18 = __OFSUB__(v16, v17);
      uint64_t v15 = v16 - v17;
      if (!v18) {
        goto LABEL_16;
      }
      goto LABEL_66;
    case 3:
      if (!v9) {
        goto LABEL_22;
      }
      uint64_t v2 = 0;
      goto LABEL_53;
    default:
      uint64_t v15 = BYTE14(v35[0]);
      goto LABEL_16;
  }
  do
  {
    unint64_t v23 = v14;
    if ((v14 & 0xC) == v22) {
      unint64_t v23 = sub_1000F94F4(v14, v11, v13);
    }
    unint64_t v24 = v23 >> 16;
    if (v23 >> 16 >= v19)
    {
      __break(1u);
LABEL_59:
      __break(1u);
LABEL_60:
      __break(1u);
      goto LABEL_61;
    }
    if ((v13 & 0x1000000000000000) != 0)
    {
      char v26 = String.UTF8View._foreignSubscript(position:)();
    }
    else if ((v13 & 0x2000000000000000) != 0)
    {
      uint64_t v38 = v11;
      uint64_t v39 = v32;
      char v26 = *((unsigned char *)&v38 + v24);
    }
    else
    {
      uint64_t v25 = v31;
      if ((v11 & 0x1000000000000000) == 0) {
        uint64_t v25 = _StringObject.sharedUTF8.getter();
      }
      char v26 = *(unsigned char *)(v25 + v24);
    }
    if ((v14 & 0xC) == v22)
    {
      unint64_t v14 = sub_1000F94F4(v14, v11, v13);
      if ((v13 & 0x1000000000000000) == 0)
      {
LABEL_40:
        unint64_t v14 = (v14 & 0xFFFFFFFFFFFF0000) + 65540;
        goto LABEL_45;
      }
    }
    else if ((v13 & 0x1000000000000000) == 0)
    {
      goto LABEL_40;
    }
    if (v19 <= v14 >> 16) {
      goto LABEL_60;
    }
    unint64_t v14 = String.UTF8View._foreignIndex(after:)();
LABEL_45:
    *((unsigned char *)&v37 + v20) = v26;
    unsigned int v20 = v20 + 1;
    if ((v20 >> 8)) {
      goto LABEL_59;
    }
    BYTE14(v37) = v20;
    if (v20 == 14)
    {
      uint64_t v38 = v37;
      LODWORD(v39) = DWORD2(v37);
      WORD2(v39) = WORD6(v37);
      Data._Representation.append(contentsOf:)();
      LOBYTE(v20) = 0;
      BYTE14(v37) = 0;
    }
  }
  while (4 * v19 != v14 >> 14);
  uint64_t v3 = v30;
  unint64_t v5 = v29;
  if ((_BYTE)v20)
  {
    uint64_t v38 = v37;
    LODWORD(v39) = DWORD2(v37);
    WORD2(v39) = WORD6(v37);
    Data._Representation.append(contentsOf:)();
    sub_10000A330(v3, v5);
    goto LABEL_55;
  }
LABEL_51:
  swift_bridgeObjectRelease();
  sub_10000A330(v3, v5);
LABEL_56:
  swift_bridgeObjectRelease();
  return *(void *)&v35[0];
}

uint64_t sub_1000F9344(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SHA256Digest();
  uint64_t v8 = v2;
  unint64_t v9 = sub_1000F9BCC();
  sub_10002E5E8(v7);
  uint64_t v3 = *(void *)(v2 - 8);
  sub_100016608();
  v4();
  sub_10001B620(v7, v8);
  dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
  sub_10001CA50((uint64_t)v7);
  return v6;
}

id sub_1000F9454(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a2)
  {
    NSString v6 = 0;
    if (a4) {
      goto LABEL_3;
    }
LABEL_5:
    NSString v7 = 0;
    goto LABEL_6;
  }
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (!a4) {
    goto LABEL_5;
  }
LABEL_3:
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
LABEL_6:
  id v8 = [v4 initWithId:v6 userAgent:v7];

  return v8;
}

uint64_t sub_1000F94F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    uint64_t v6 = String.UTF16View.index(_:offsetBy:)();
    sub_10002B064(v6);
    return v7 | 4;
  }
  else
  {
    uint64_t v3 = String.UTF8View._foreignIndex(_:offsetBy:)();
    sub_10002B064(v3);
    return v4 | 8;
  }
}

void *sub_1000F9550(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v6[0] = a3;
  v6[1] = a4;
  v5[2] = v6;
  return sub_1000F9950((void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_1000F9BAC, (uint64_t)v5, a1, a2);
}

void *sub_1000F95A8(void *(*a1)(uint64_t *__return_ptr, char *, char *), uint64_t a2)
{
  uint64_t v4 = *v2;
  unint64_t v3 = v2[1];
  unint64_t v5 = v2;
  switch(v3 >> 62)
  {
    case 1uLL:
      uint64_t v9 = v3 & 0x3FFFFFFFFFFFFFFFLL;
      *(_OWORD *)uint64_t v2 = xmmword_1001A6140;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v11 = v4 >> 32;
      if (isUniquelyReferenced_nonNull_native) {
        goto LABEL_11;
      }
      if (v11 < (int)v4) {
        goto LABEL_16;
      }
      if (__DataStorage._bytes.getter() && __OFSUB__((int)v4, __DataStorage._offset.getter())) {
        goto LABEL_17;
      }
      type metadata accessor for __DataStorage();
      swift_allocObject();
      uint64_t v13 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
      swift_release();
      uint64_t v9 = v13;
      uint64_t v11 = v4 >> 32;
LABEL_11:
      if (v11 < (int)v4)
      {
        __break(1u);
LABEL_16:
        __break(1u);
LABEL_17:
        __break(1u);
      }
      uint64_t result = sub_1000F99B8((int)v4, v11, a1);
      unint64_t v12 = v9 | 0x4000000000000000;
      *unint64_t v5 = v4;
LABEL_13:
      v5[1] = v12;
      return result;
    case 2uLL:
      *(void *)&long long v14 = *v2;
      *((void *)&v14 + 1) = v3 & 0x3FFFFFFFFFFFFFFFLL;
      Data.LargeSlice.ensureUniqueReference()();
      uint64_t result = sub_1000F99B8(*(void *)(v14 + 16), *(void *)(v14 + 24), a1);
      unint64_t v12 = *((void *)&v14 + 1) | 0x8000000000000000;
      uint64_t *v2 = v14;
      goto LABEL_13;
    case 3uLL:
      *(void *)((char *)&v14 + 7) = 0;
      *(void *)&long long v14 = 0;
      return sub_1000F9A6C((uint64_t)&v14, (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))a1, a2, 0);
    default:
      *(void *)&long long v14 = *v2;
      WORD4(v14) = v3;
      BYTE10(v14) = BYTE2(v3);
      BYTE11(v14) = BYTE3(v3);
      BYTE12(v14) = BYTE4(v3);
      BYTE13(v14) = BYTE5(v3);
      BYTE14(v14) = BYTE6(v3);
      uint64_t result = sub_1000F9A6C((uint64_t)&v14, (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))a1, a2, BYTE6(v3));
      unint64_t v8 = DWORD2(v14) | ((unint64_t)BYTE12(v14) << 32) | ((unint64_t)BYTE13(v14) << 40) | ((unint64_t)BYTE14(v14) << 48);
      uint64_t *v2 = v14;
      v2[1] = v8;
      return result;
  }
}

uint64_t sub_1000F9854@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  if (!result) {
    goto LABEL_4;
  }
  uint64_t v4 = a2 - result;
  if (a2 == result)
  {
    uint64_t result = 0;
LABEL_4:
    unint64_t v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    uint64_t result = Data.InlineData.init(_:)();
    unint64_t v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    uint64_t result = Data.LargeSlice.init(_:)();
    unint64_t v5 = v8 | 0x8000000000000000;
  }
  else
  {
    uint64_t result = Data.InlineSlice.init(_:)();
    unint64_t v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t sub_1000F98CC(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _StringGuts.copyUTF8(into:)();
    if ((v1 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void *sub_1000F9950(void *(*a1)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t v6 = a4 - a3;
    uint64_t v7 = a3;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  uint64_t result = a1(&v9, v7, v6);
  if (!v4) {
    return (void *)v9;
  }
  return result;
}

char *sub_1000F99B8(uint64_t a1, uint64_t a2, void *(*a3)(uint64_t *__return_ptr, char *, char *))
{
  uint64_t result = (char *)__DataStorage._bytes.getter();
  if (!result) {
    goto LABEL_12;
  }
  uint64_t v8 = result;
  uint64_t result = (char *)__DataStorage._offset.getter();
  uint64_t v9 = a1 - (void)result;
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_11;
  }
  BOOL v10 = __OFSUB__(a2, a1);
  uint64_t v11 = a2 - a1;
  if (v10)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  uint64_t v12 = __DataStorage._length.getter();
  if (v12 >= v11) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = v12;
  }
  uint64_t result = (char *)a3(&v14, &v8[v9], &v8[v9 + v13]);
  if (!v3) {
    return (char *)v14;
  }
  return result;
}

void *sub_1000F9A6C(uint64_t a1, void *(*a2)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t result = a2(&v6, a1, a1 + a4);
  if (!v4) {
    return (void *)v6;
  }
  return result;
}

uint64_t sub_1000F9AB8(void *a1)
{
  id v1 = [a1 formattedAddressLines];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

void *sub_1000F9B14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  uint64_t result = sub_1000F9550(a1, a2, *a3, a3[1]);
  if (!v4)
  {
    *a4 = result;
    a4[1] = v7;
    a4[2] = v8;
    a4[3] = v9;
  }
  return result;
}

void *sub_1000F9B4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return sub_1000F9B14(a1, a2, *(uint64_t **)(v3 + 16), a3);
}

uint64_t sub_1000F9B68@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1000F98CC(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_1000F9BAC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1000F9B68(a1, a2);
}

unint64_t sub_1000F9BCC()
{
  unint64_t result = qword_10021DE78;
  if (!qword_10021DE78)
  {
    type metadata accessor for SHA256Digest();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10021DE78);
  }
  return result;
}

uint64_t sub_1000F9C1C()
{
  return Apple_Parsec_Search_PegasusQueryContext.encryptedAuthToken.setter();
}

uint64_t sub_1000F9C38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = v8;
  sub_10002572C(&qword_10021EBC0);
  swift_allocObject();
  swift_retain();
  sub_100030358(a7);
  sub_100030358(a5);
  uint64_t v18 = sub_1000FAE84(a1, a2, a3, a7, a8, a5, a6);
  sub_10002572C(&qword_10021EBC8);
  uint64_t v19 = swift_allocObject();
  *(_DWORD *)(v19 + 24) = 0;
  *(void *)(v19 + 16) = v18;
  *(void *)(v9 + 16) = v19;
  uint64_t v20 = swift_allocObject();
  swift_weakInit();
  uint64_t v21 = (void *)swift_allocObject();
  v21[2] = 0;
  v21[3] = 0;
  v21[4] = v20;
  swift_retain();
  uint64_t v22 = a4;
  sub_1000182C0(a4, (uint64_t)&unk_10021EBD8, (uint64_t)v21);
  unint64_t v23 = *(os_unfair_lock_s **)(v9 + 16);
  unint64_t v24 = v23 + 4;
  uint64_t v25 = v23 + 6;
  os_unfair_lock_lock(v23 + 6);
  sub_1000FD2F0(v24);
  os_unfair_lock_unlock(v25);
  sub_1000332CC(a7);
  sub_1000332CC(a5);
  swift_release();
  swift_release();
  sub_1000255D4(v22, &qword_10021F2D0);
  swift_release();
  return v9;
}

uint64_t sub_1000F9E0C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = v8;
  sub_10002572C(&qword_10021EB88);
  swift_allocObject();
  id v27 = a1;
  sub_100030358(a7);
  sub_100030358(a5);
  uint64_t v18 = sub_1000FB0D4(v27, a2, a3, a7, a8, a5, a6);
  sub_10002572C(&qword_10021EB90);
  uint64_t v19 = swift_allocObject();
  *(_DWORD *)(v19 + 24) = 0;
  *(void *)(v19 + 16) = v18;
  *(void *)(v9 + 16) = v19;
  uint64_t v20 = swift_allocObject();
  swift_weakInit();
  uint64_t v21 = (void *)swift_allocObject();
  v21[2] = 0;
  v21[3] = 0;
  v21[4] = v20;
  swift_retain();
  uint64_t v22 = a4;
  sub_1000182C0(a4, (uint64_t)&unk_10021EBA0, (uint64_t)v21);
  unint64_t v23 = *(os_unfair_lock_s **)(v9 + 16);
  unint64_t v24 = v23 + 4;
  uint64_t v25 = v23 + 6;
  os_unfair_lock_lock(v23 + 6);
  sub_1000FD2F0(v24);
  os_unfair_lock_unlock(v25);
  sub_1000332CC(a7);
  sub_1000332CC(a5);
  swift_release();

  sub_1000255D4(v22, &qword_10021F2D0);
  swift_release();
  return v9;
}

uint64_t sub_1000F9FE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[8] = a4;
  uint64_t v5 = type metadata accessor for ContinuousClock();
  v4[9] = v5;
  v4[10] = *(void *)(v5 - 8);
  v4[11] = swift_task_alloc();
  sub_10002572C(&qword_10021A520);
  v4[12] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for ContinuousClock.Instant();
  v4[13] = v6;
  v4[14] = *(void *)(v6 - 8);
  v4[15] = swift_task_alloc();
  return _swift_task_switch(sub_1000FA12C, 0, 0);
}

void sub_1000FA12C()
{
  sub_100019BA0();
  if (static Task<>.isCancelled.getter())
  {
LABEL_9:
    sub_100025270();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_10000E1BC();
    sub_100025494();
    __asm { BRAA            X1, X16 }
  }
  sub_100018598();
  uint64_t v2 = sub_100023EFC();
  if (!v2)
  {
    sub_10002444C();
LABEL_8:
    sub_1000255D4(*(void *)(v0 + 96), &qword_10021A520);
    goto LABEL_9;
  }
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(v0 + 96);
  sub_100024118();
  swift_release();
  sub_10002CE34();
  sub_10002B178();
  sub_1000FAB84();
  if (v4)
  {
    os_unfair_lock_unlock(v1);
    sub_100025494();
    return;
  }
  sub_10002823C();
  swift_release();
  sub_100024B0C();
  if (v5) {
    goto LABEL_8;
  }
  uint64_t v8 = sub_100025B00();
  v9(v8);
  sub_100017F94();
  uint64_t v10 = swift_task_alloc();
  sub_100020CF4(v10);
  sub_1000FD374(&qword_10021EBA8, (void (*)(uint64_t))&type metadata accessor for ContinuousClock);
  sub_10002DEE0();
  void *v3 = v11;
  v3[1] = sub_1000FA2C4;
  sub_10002A56C();
  sub_100025494();
  static Task<>.sleep<A>(until:tolerance:clock:)();
}

uint64_t sub_1000FA2C4()
{
  sub_100026880();
  uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_10001DD38();
  *char v5 = v4;
  *(void *)(v3 + 136) = v0;
  swift_task_dealloc();
  uint64_t v6 = sub_10002714C();
  v7(v6);
  if (v0) {
    uint64_t v8 = sub_1000FA564;
  }
  else {
    uint64_t v8 = sub_1000FA3BC;
  }
  return _swift_task_switch(v8, 0, 0);
}

void sub_1000FA3BC()
{
  sub_100019BA0();
  uint64_t v2 = sub_1000284C8();
  v3(v2);
  if (static Task<>.isCancelled.getter())
  {
LABEL_9:
    sub_100025270();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_10000E1BC();
    sub_100021D48();
    __asm { BRAA            X1, X16 }
  }
  uint64_t v4 = *(void *)(v0 + 136);
  if (!sub_100023EFC())
  {
    sub_10002444C();
LABEL_8:
    sub_1000255D4(*(void *)(v0 + 96), &qword_10021A520);
    goto LABEL_9;
  }
  sub_100024118();
  swift_release();
  sub_10002CE34();
  sub_1000FAB84();
  if (v4)
  {
    os_unfair_lock_unlock(v1);
    sub_100021D48();
    return;
  }
  sub_10002823C();
  swift_release();
  sub_100024B0C();
  if (v5) {
    goto LABEL_8;
  }
  uint64_t v8 = sub_100025B00();
  v9(v8);
  sub_100017F94();
  uint64_t v10 = swift_task_alloc();
  sub_100020CF4(v10);
  sub_1000FD374(&qword_10021EBA8, (void (*)(uint64_t))&type metadata accessor for ContinuousClock);
  sub_10002DEE0();
  MEMORY[0] = v11;
  MEMORY[8] = sub_1000FA2C4;
  sub_10002A56C();
  sub_100021D48();
  static Task<>.sleep<A>(until:tolerance:clock:)();
}

uint64_t sub_1000FA564()
{
  (*(void (**)(void, void))(v0[14] + 8))(v0[15], v0[13]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_1000FA600(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[8] = a4;
  uint64_t v5 = type metadata accessor for ContinuousClock();
  v4[9] = v5;
  v4[10] = *(void *)(v5 - 8);
  v4[11] = swift_task_alloc();
  sub_10002572C(&qword_10021A520);
  v4[12] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for ContinuousClock.Instant();
  v4[13] = v6;
  v4[14] = *(void *)(v6 - 8);
  v4[15] = swift_task_alloc();
  return _swift_task_switch(sub_1000FA74C, 0, 0);
}

void sub_1000FA74C()
{
  sub_100019BA0();
  if (static Task<>.isCancelled.getter())
  {
LABEL_9:
    sub_100025270();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_10000E1BC();
    sub_100025494();
    __asm { BRAA            X1, X16 }
  }
  sub_100018598();
  uint64_t v2 = sub_100023EFC();
  if (!v2)
  {
    sub_10002444C();
LABEL_8:
    sub_1000255D4(*(void *)(v0 + 96), &qword_10021A520);
    goto LABEL_9;
  }
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(v0 + 96);
  sub_100024118();
  swift_release();
  sub_10002CE34();
  sub_10002B178();
  sub_1000FABC4();
  if (v4)
  {
    os_unfair_lock_unlock(v1);
    sub_100025494();
    return;
  }
  sub_10002823C();
  swift_release();
  sub_100024B0C();
  if (v5) {
    goto LABEL_8;
  }
  uint64_t v8 = sub_100025B00();
  v9(v8);
  sub_100017F94();
  uint64_t v10 = swift_task_alloc();
  sub_100020CF4(v10);
  sub_1000FD374(&qword_10021EBA8, (void (*)(uint64_t))&type metadata accessor for ContinuousClock);
  sub_10002DEE0();
  void *v3 = v11;
  v3[1] = sub_1000FA8E4;
  sub_10002A56C();
  sub_100025494();
  static Task<>.sleep<A>(until:tolerance:clock:)();
}

uint64_t sub_1000FA8E4()
{
  sub_100026880();
  uint64_t v3 = v2;
  uint64_t v4 = *v1;
  sub_10001DD38();
  *char v5 = v4;
  *(void *)(v3 + 136) = v0;
  swift_task_dealloc();
  uint64_t v6 = sub_10002714C();
  v7(v6);
  if (v0) {
    uint64_t v8 = (void (*)())sub_1000FD570;
  }
  else {
    uint64_t v8 = sub_1000FA9DC;
  }
  return _swift_task_switch(v8, 0, 0);
}

void sub_1000FA9DC()
{
  sub_100019BA0();
  uint64_t v2 = sub_1000284C8();
  v3(v2);
  if (static Task<>.isCancelled.getter())
  {
LABEL_9:
    sub_100025270();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_10000E1BC();
    sub_100021D48();
    __asm { BRAA            X1, X16 }
  }
  uint64_t v4 = *(void *)(v0 + 136);
  if (!sub_100023EFC())
  {
    sub_10002444C();
LABEL_8:
    sub_1000255D4(*(void *)(v0 + 96), &qword_10021A520);
    goto LABEL_9;
  }
  sub_100024118();
  swift_release();
  sub_10002CE34();
  sub_1000FABC4();
  if (v4)
  {
    os_unfair_lock_unlock(v1);
    sub_100021D48();
    return;
  }
  sub_10002823C();
  swift_release();
  sub_100024B0C();
  if (v5) {
    goto LABEL_8;
  }
  uint64_t v8 = sub_100025B00();
  v9(v8);
  sub_100017F94();
  uint64_t v10 = swift_task_alloc();
  sub_100020CF4(v10);
  sub_1000FD374(&qword_10021EBA8, (void (*)(uint64_t))&type metadata accessor for ContinuousClock);
  sub_10002DEE0();
  MEMORY[0] = v11;
  MEMORY[8] = sub_1000FA8E4;
  sub_10002A56C();
  sub_100021D48();
  static Task<>.sleep<A>(until:tolerance:clock:)();
}

void sub_1000FAB84()
{
}

void sub_1000FABC4()
{
}

void sub_1000FAC04()
{
  sub_10000DFE0();
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v5 = v4;
  uint64_t v6 = sub_10002572C(&qword_10021A520);
  __chkstk_darwin(v6 - 8);
  sub_10000DFD0();
  uint64_t v9 = v8 - v7;
  uint64_t v10 = type metadata accessor for ContinuousClock.Instant();
  sub_100020C48();
  uint64_t v12 = v11;
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)v25 - v17;
  uint64_t v19 = v3 + qword_10021A470;
  swift_beginAccess();
  sub_1000FD30C(v19, v9);
  if (sub_100027BA4(v9, 1, v10) == 1)
  {
    uint64_t v20 = sub_1000255D4(v9, &qword_10021A520);
LABEL_6:
    v2(v20);
    uint64_t v24 = 1;
    goto LABEL_7;
  }
  v25[0] = v2;
  uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 32);
  v21(v18, v9, v10);
  static ContinuousClock.Instant.now.getter();
  sub_1000FD374(&qword_10021EBB0, (void (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant);
  char v22 = dispatch thunk of static Comparable.< infix(_:_:)();
  unint64_t v23 = *(void (**)(char *, uint64_t))(v12 + 8);
  v23(v15, v10);
  if ((v22 & 1) == 0)
  {
    uint64_t v20 = ((uint64_t (*)(char *, uint64_t))v23)(v18, v10);
    uint64_t v2 = (void (*)(uint64_t))v25[0];
    goto LABEL_6;
  }
  v21((char *)v5, (uint64_t)v18, v10);
  uint64_t v24 = 0;
LABEL_7:
  sub_10002538C(v5, v24, 1, v10);
  sub_10000DFB8();
}

uint64_t sub_1000FAE3C(void *a1, uint64_t a2)
{
  *(void *)(*a1 + qword_10021A490) = a2;
  swift_release();
  return swift_retain();
}

uint64_t sub_1000FAE84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = v7;
  uint64_t v33 = a6;
  uint64_t v34 = a7;
  uint64_t v31 = a4;
  uint64_t v32 = a5;
  uint64_t v12 = type metadata accessor for ContinuousClock.Instant();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10002572C(&qword_10021A520);
  __chkstk_darwin(v16 - 8);
  uint64_t v18 = (char *)&v30 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(v8 + 16) = 0;
  sub_10002538C(v8 + qword_10021A470, 1, 1, v12);
  uint64_t v19 = (void *)(v8 + qword_10021A480);
  *uint64_t v19 = 0;
  v19[1] = 0;
  uint64_t v20 = (void *)(v8 + qword_10021A488);
  *uint64_t v20 = 0;
  v20[1] = 0;
  *(void *)(v8 + qword_10021A490) = 0;
  *(void *)(v8 + 16) = a1;
  swift_retain();
  swift_release();
  uint64_t v21 = (void *)(v8 + qword_10021A478);
  *uint64_t v21 = a2;
  v21[1] = a3;
  static ContinuousClock.Instant.now.getter();
  ContinuousClock.Instant.advanced(by:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  sub_10002538C((uint64_t)v18, 0, 1, v12);
  uint64_t v22 = v8 + qword_10021A470;
  swift_beginAccess();
  sub_1000067F0((uint64_t)v18, v22);
  swift_endAccess();
  unint64_t v23 = (void *)(v8 + qword_10021A480);
  uint64_t v24 = *(void *)(v8 + qword_10021A480);
  uint64_t v25 = v32;
  *unint64_t v23 = v31;
  v23[1] = v25;
  sub_1000332CC(v24);
  char v26 = (void *)(v8 + qword_10021A488);
  uint64_t v27 = *(void *)(v8 + qword_10021A488);
  uint64_t v28 = v34;
  *char v26 = v33;
  v26[1] = v28;
  sub_1000332CC(v27);
  return v8;
}

uint64_t sub_1000FB0D4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = v7;
  uint64_t v35 = a6;
  uint64_t v36 = a7;
  uint64_t v33 = a4;
  uint64_t v34 = a5;
  uint64_t v12 = type metadata accessor for ContinuousClock.Instant();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10002572C(&qword_10021A520);
  __chkstk_darwin(v16 - 8);
  uint64_t v18 = (char *)&v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(v8 + 16) = 0;
  sub_10002538C(v8 + qword_10021A470, 1, 1, v12);
  uint64_t v19 = (void *)(v8 + qword_10021A480);
  *uint64_t v19 = 0;
  v19[1] = 0;
  uint64_t v20 = (void *)(v8 + qword_10021A488);
  *uint64_t v20 = 0;
  v20[1] = 0;
  *(void *)(v8 + qword_10021A490) = 0;
  uint64_t v21 = *(void **)(v8 + 16);
  *(void *)(v8 + 16) = a1;
  id v22 = a1;

  unint64_t v23 = (void *)(v8 + qword_10021A478);
  *unint64_t v23 = a2;
  v23[1] = a3;
  static ContinuousClock.Instant.now.getter();
  ContinuousClock.Instant.advanced(by:)();

  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  sub_10002538C((uint64_t)v18, 0, 1, v12);
  uint64_t v24 = v8 + qword_10021A470;
  swift_beginAccess();
  sub_1000067F0((uint64_t)v18, v24);
  swift_endAccess();
  uint64_t v25 = (void *)(v8 + qword_10021A480);
  uint64_t v26 = *(void *)(v8 + qword_10021A480);
  uint64_t v27 = v34;
  *uint64_t v25 = v33;
  v25[1] = v27;
  sub_1000332CC(v26);
  uint64_t v28 = (void *)(v8 + qword_10021A488);
  uint64_t v29 = *(void *)(v8 + qword_10021A488);
  uint64_t v30 = v36;
  *uint64_t v28 = v35;
  v28[1] = v30;
  sub_1000332CC(v29);
  return v8;
}

void sub_1000FB320()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10002572C(&qword_10021A520);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(void *)(v0 + 16);
  if (v5)
  {
    uint64_t v6 = (uint64_t *)(v0 + qword_10021A480);
    uint64_t v7 = *(void (**)(uint64_t))(v0 + qword_10021A480);
    swift_retain();
    if (v7)
    {
      sub_100030358((uint64_t)v7);
      v7(v5);
      sub_1000332CC((uint64_t)v7);
      uint64_t v8 = *v6;
    }
    else
    {
      uint64_t v8 = 0;
    }
    *uint64_t v6 = 0;
    v6[1] = 0;
    sub_1000332CC(v8);
    *(void *)(v0 + 16) = 0;
    swift_release();
    uint64_t v9 = type metadata accessor for ContinuousClock.Instant();
    sub_10002538C((uint64_t)v4, 1, 1, v9);
    uint64_t v10 = v0 + qword_10021A470;
    swift_beginAccess();
    sub_1000067F0((uint64_t)v4, v10);
    swift_endAccess();
    uint64_t v11 = (uint64_t *)(v1 + qword_10021A488);
    uint64_t v12 = *(void (**)(uint64_t))(v1 + qword_10021A488);
    if (v12)
    {
      uint64_t v13 = swift_retain();
      v12(v13);
      swift_release();
      sub_1000332CC((uint64_t)v12);
    }
    else
    {
      swift_release();
    }
    uint64_t v14 = *v11;
    *uint64_t v11 = 0;
    v11[1] = 0;
    sub_1000332CC(v14);
    *(void *)(v1 + qword_10021A490) = 0;
    swift_release();
  }
}

void sub_1000FB4D0()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10002572C(&qword_10021A520);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(void **)(v0 + 16);
  if (v5)
  {
    uint64_t v6 = (uint64_t *)(v0 + qword_10021A480);
    uint64_t v7 = *(void (**)(void *))(v0 + qword_10021A480);
    id v8 = v5;
    if (v7)
    {
      sub_100030358((uint64_t)v7);
      v7(v5);
      sub_1000332CC((uint64_t)v7);
      uint64_t v9 = *v6;
    }
    else
    {
      uint64_t v9 = 0;
    }
    *uint64_t v6 = 0;
    v6[1] = 0;
    sub_1000332CC(v9);
    uint64_t v10 = *(void **)(v0 + 16);
    *(void *)(v0 + 16) = 0;

    uint64_t v11 = type metadata accessor for ContinuousClock.Instant();
    sub_10002538C((uint64_t)v4, 1, 1, v11);
    uint64_t v12 = v0 + qword_10021A470;
    swift_beginAccess();
    sub_1000067F0((uint64_t)v4, v12);
    swift_endAccess();
    uint64_t v13 = (uint64_t *)(v1 + qword_10021A488);
    uint64_t v14 = *(void (**)(uint64_t))(v1 + qword_10021A488);
    if (v14)
    {
      uint64_t v15 = swift_retain();
      v14(v15);

      sub_1000332CC((uint64_t)v14);
    }
    else
    {
    }
    uint64_t v16 = *v13;
    *uint64_t v13 = 0;
    v13[1] = 0;
    sub_1000332CC(v16);
    *(void *)(v1 + qword_10021A490) = 0;
    swift_release();
  }
}

const char *sub_1000FB670(char a1)
{
  if (!a1) {
    return "lifetime";
  }
  if (a1 == 1) {
    return "contextUpdate";
  }
  return "notBagFetchable";
}

uint64_t sub_1000FB6B4()
{
  uint64_t v0 = qword_10021E9D8;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t sub_1000FB6EC()
{
  uint64_t v0 = *(void *)aContextmanager_5;
  swift_bridgeObjectRetain();
  return v0;
}

const char *sub_1000FB724()
{
  return sub_1000FB670(*v0);
}

void sub_1000FB744()
{
  sub_10000DFE0();
  uint64_t v2 = v1;
  uint64_t v3 = sub_10002572C((uint64_t *)&unk_10021CCF8);
  __chkstk_darwin(v3 - 8);
  sub_10000DFD0();
  uint64_t v55 = (uint8_t *)(v5 - v4);
  uint64_t v6 = type metadata accessor for ContextUpdate(0);
  sub_10001DCF8();
  __chkstk_darwin(v7);
  uint64_t v52 = (uint64_t)v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v48 - v10;
  __chkstk_darwin(v12);
  uint64_t v53 = (uint64_t)v48 - v13;
  uint64_t v14 = type metadata accessor for Notification();
  sub_100020C48();
  uint64_t v16 = v15;
  __chkstk_darwin(v17);
  sub_10000DFD0();
  uint64_t v20 = v19 - v18;
  uint64_t v21 = v0 + OBJC_IVAR____TtC7parsecd14ContextManager_logger;
  id v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16);
  uint64_t v54 = v2;
  v22(v20, v2, v14);
  unint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v23, v24))
  {
    v48[1] = v21;
    uint64_t v25 = swift_slowAlloc();
    uint64_t v49 = v6;
    uint64_t v26 = (uint8_t *)v25;
    uint64_t v27 = swift_slowAlloc();
    uint64_t v51 = v0;
    v58[0] = v27;
    uint64_t v50 = v11;
    *(_DWORD *)uint64_t v26 = 136642819;
    sub_1000FD374(&qword_10021EB78, (void (*)(uint64_t))&type metadata accessor for Notification);
    uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v30 = sub_10001C274(v28, v29, v58);
    sub_10002ED94(v30);
    uint64_t v11 = v50;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v31 = sub_10001666C();
    v32(v31);
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "Processing context update: %{sensitive}s", v26, 0xCu);
    swift_arrayDestroy();
    sub_100017D40();
    uint64_t v6 = v49;
    sub_100017D40();
  }
  else
  {

    uint64_t v34 = sub_10001666C();
    v35(v34);
  }
  uint64_t v33 = (uint64_t)v55;
  uint64_t v36 = Notification.userInfo.getter();
  if (!v36)
  {
    long long v59 = 0u;
    long long v60 = 0u;
    goto LABEL_10;
  }
  uint64_t v37 = v36;
  uint64_t v56 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v57 = v38;
  AnyHashable.init<A>(_:)();
  sub_100039D58((uint64_t)v58, v37, &v59);
  swift_bridgeObjectRelease();
  sub_100039C5C((uint64_t)v58);
  if (!*((void *)&v60 + 1))
  {
LABEL_10:
    sub_1000255D4((uint64_t)&v59, (uint64_t *)&unk_10021BB30);
    sub_10002538C(v33, 1, 1, v6);
    goto LABEL_11;
  }
  int v39 = swift_dynamicCast();
  sub_10002538C(v33, v39 ^ 1u, 1, v6);
  if (sub_100027BA4(v33, 1, v6) == 1)
  {
LABEL_11:
    sub_1000255D4(v33, (uint64_t *)&unk_10021CCF8);
    goto LABEL_12;
  }
  uint64_t v40 = v53;
  sub_1000FD0DC(v33, v53);
  sub_1000FCE34(v40, (uint64_t)v11);
  uint64_t v41 = Logger.logObject.getter();
  os_log_type_t v42 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v41, v42))
  {
    uint64_t v43 = (uint8_t *)swift_slowAlloc();
    v58[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v43 = 136642819;
    uint64_t v55 = v43 + 4;
    sub_1000FCE34((uint64_t)v11, v52);
    uint64_t v44 = String.init<A>(describing:)();
    uint64_t v46 = sub_10001C274(v44, v45, v58);
    sub_10002ED94(v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100031134((uint64_t)v11, (void (*)(void))type metadata accessor for ContextUpdate);
    _os_log_impl((void *)&_mh_execute_header, v41, v42, "Cache context update: %{sensitive}s", v43, 0xCu);
    swift_arrayDestroy();
    sub_100017D40();
    sub_100017D40();
  }
  else
  {

    sub_100031134((uint64_t)v11, (void (*)(void))type metadata accessor for ContextUpdate);
  }
  uint64_t v47 = v53;
  sub_1000FBC9C();
  sub_100031134(v47, (void (*)(void))type metadata accessor for ContextUpdate);
LABEL_12:
  sub_10000DFB8();
}

void sub_1000FBC9C()
{
  sub_10000DFE0();
  uint64_t v2 = v1;
  uint64_t v3 = type metadata accessor for ContextUpdate(0);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  __chkstk_darwin(v3 - 8);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v7 = Strong;
    uint64_t v8 = *(void *)(v0 + 40);
    uint64_t v9 = *(void **)(v0 + OBJC_IVAR____TtC7parsecd14ContextManager_contextAccessQueue);
    sub_1000FCE34(v2, (uint64_t)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
    unint64_t v10 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    uint64_t v11 = (void *)swift_allocObject();
    v11[2] = v7;
    v11[3] = v8;
    v11[4] = v0;
    sub_1000FD0DC((uint64_t)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v11 + v10);
    v31[4] = sub_1000FD140;
    v31[5] = v11;
    v31[0] = _NSConcreteStackBlock;
    v31[1] = 1107296256;
    v31[2] = sub_1000085EC;
    void v31[3] = &unk_1002008F8;
    uint64_t v12 = _Block_copy(v31);
    uint64_t v28 = type metadata accessor for DispatchQoS();
    unint64_t v29 = &v27;
    sub_100020C48();
    uint64_t v14 = v13;
    __chkstk_darwin(v15);
    sub_10000DFD0();
    uint64_t v18 = v17 - v16;
    id v19 = v9;
    swift_unknownObjectRetain();
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v20 = type metadata accessor for DispatchWorkItemFlags();
    uint64_t v27 = (uint64_t)&v27;
    sub_100020C48();
    uint64_t v22 = v21;
    __chkstk_darwin(v23);
    sub_10000DFD0();
    uint64_t v26 = v25 - v24;
    uint64_t v30 = _swiftEmptyArrayStorage;
    sub_10003045C();
    sub_10002572C((uint64_t *)&unk_10021BAF0);
    sub_1000301A0();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v12);
    swift_unknownObjectRelease();

    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v26, v20);
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v18, v28);
    swift_release();
  }
  sub_10000DFB8();
}

uint64_t sub_1000FC070()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0 + OBJC_IVAR____TtC7parsecd14ContextManager_logger;
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "ContextManager is destroyed", v5, 2u);
    sub_100017D40();
  }

  *(void *)(v1 + 24) = 0;
  swift_release();
  swift_release();
  swift_release();
  sub_10001CDE0(v1 + 32);
  swift_release();
  sub_100031134(v1 + OBJC_IVAR____TtC7parsecd14ContextManager_context, (void (*)(void))type metadata accessor for PegasusContext);
  swift_release();
  type metadata accessor for Logger();
  sub_10001DCF8();
  (*(void (**)(uint64_t))(v7 + 8))(v2);

  swift_release();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_1000FC1F4()
{
  sub_1000FC070();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v1, v2);
}

uint64_t sub_1000FC24C()
{
  return type metadata accessor for ContextManager();
}

uint64_t type metadata accessor for ContextManager()
{
  uint64_t result = qword_10021EA58;
  if (!qword_10021EA58) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000FC29C()
{
  uint64_t result = type metadata accessor for PegasusContext(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Logger();
    if (v2 <= 0x3F) {
      return swift_updateClassMetadata2();
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ContextManager.Configuration(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for ContextManager.Configuration(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)uint64_t result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for ContextManager.Configuration()
{
  return &type metadata for ContextManager.Configuration;
}

unsigned char *storeEnumTagSinglePayload for ContextManager.Activity(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000FC4D0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ContextManager.Activity()
{
  return &type metadata for ContextManager.Activity;
}

unint64_t sub_1000FC508(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1000FC538();
  unint64_t result = sub_1000FC584();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1000FC538()
{
  unint64_t result = qword_10021EB38;
  if (!qword_10021EB38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10021EB38);
  }
  return result;
}

unint64_t sub_1000FC584()
{
  unint64_t result = qword_10021EB40;
  if (!qword_10021EB40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10021EB40);
  }
  return result;
}

unint64_t sub_1000FC5D4()
{
  unint64_t result = qword_10021EB48;
  if (!qword_10021EB48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10021EB48);
  }
  return result;
}

unint64_t sub_1000FC624()
{
  unint64_t result = qword_10021EB50;
  if (!qword_10021EB50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10021EB50);
  }
  return result;
}

uint64_t sub_1000FC670(uint64_t a1)
{
  uint64_t result = sub_1000FD374(&qword_10021EB70, (void (*)(uint64_t))type metadata accessor for ContextManager);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000FC6C8(uint64_t a1)
{
  return 1000000000000000000 * a1;
}

uint64_t sub_1000FC6F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v73 = a4;
  uint64_t v6 = type metadata accessor for OSSignpostID();
  uint64_t v70 = *(void *)(v6 - 8);
  uint64_t v71 = v6;
  __chkstk_darwin(v6);
  uint64_t v69 = (char *)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for ContextUpdate(0);
  __chkstk_darwin(v8);
  uint64_t v64 = (uint64_t)&v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = type metadata accessor for PegasusContext(0);
  uint64_t v10 = __chkstk_darwin(v65);
  uint64_t v68 = (uint64_t *)((char *)&v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v67 = (uint64_t)&v59 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v63 = (uint64_t)&v59 - v15;
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v59 - v16;
  sub_100017C74();
  uint64_t v72 = sub_100023568();
  swift_unknownObjectRelease();
  uint64_t v18 = *(os_unfair_lock_s **)(*(void *)(a3 + 48) + 16);
  os_unfair_lock_lock(v18);
  uint64_t v62 = a3;
  sub_10005EB64(a4, (uint64_t)v17);
  os_unfair_lock_unlock(v18);
  sub_10008071C((uint64_t)v17);
  id v60 = self;
  id v19 = [v60 defaultCenter];
  sub_10002572C((uint64_t *)&unk_10021BAE0);
  uint64_t inited = swift_initStackObject();
  long long v59 = xmmword_1001A2A20;
  *(_OWORD *)(inited + 16) = xmmword_1001A2A20;
  uint64_t v78 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v79 = v21;
  AnyHashable.init<A>(_:)();
  uint64_t v66 = v8;
  *(void *)(inited + 96) = v8;
  uint64_t v22 = sub_10002E5E8((uint64_t *)(inited + 72));
  sub_1000FCE34(v73, (uint64_t)v22);
  uint64_t v23 = Dictionary.init(dictionaryLiteral:)();
  sub_10010553C(@"com.apple.parsecd.contextCacheUpdate", 0, v23, v19);

  sub_100017C74();
  uint64_t v24 = (void *)sub_100023568();
  swift_unknownObjectRelease();
  uint64_t v61 = v24;
  if (v24)
  {
    *(void *)(v62 + OBJC_IVAR____TtC7parsecd14ContextManager_notBagFetchableSpan) = 0;
    swift_retain();
    swift_release();
    uint64_t v25 = (void *)v72;
    if (!v72 || (type metadata accessor for BagContext(), (sub_100040E64(v25, v24) & 1) == 0))
    {
      id v26 = [v60 defaultCenter];
      uint64_t v27 = swift_initStackObject();
      *(_OWORD *)(v27 + 16) = v59;
      uint64_t v78 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v79 = v28;
      AnyHashable.init<A>(_:)();
      *(void *)(v27 + 96) = type metadata accessor for BagContext();
      *(void *)(v27 + 72) = v24;
      swift_retain();
      uint64_t v29 = Dictionary.init(dictionaryLiteral:)();
      sub_10010553C(@"PARBagRefreshRequired", 0, v29, v26);
    }
    goto LABEL_5;
  }
  uint64_t v30 = OBJC_IVAR____TtC7parsecd14ContextManager_notBagFetchableSpan;
  uint64_t v31 = v62;
  if (!*(void *)(v62 + OBJC_IVAR____TtC7parsecd14ContextManager_notBagFetchableSpan))
  {
    sub_10002572C(&qword_10021C008);
    swift_allocObject();
    swift_retain();
    sub_10003AD84();
    *(void *)(v31 + v30) = v57;
LABEL_5:
    swift_release();
  }
  sub_10002572C((uint64_t *)&unk_10021BB00);
  uint64_t v32 = swift_initStackObject();
  *(_OWORD *)(v32 + 16) = xmmword_1001A3750;
  sub_1000FCE34(v73, v64);
  uint64_t v33 = String.init<A>(describing:)();
  uint64_t v35 = v34;
  *(void *)(v32 + 56) = &type metadata for String;
  unint64_t v36 = sub_1000303C8();
  *(void *)(v32 + 64) = v36;
  *(void *)(v32 + 32) = v33;
  *(void *)(v32 + 40) = v35;
  uint64_t v37 = v63;
  sub_100023FDC(v63);
  uint64_t v38 = (uint64_t *)(v37 + *(int *)(v65 + 80));
  uint64_t v39 = *v38;
  unint64_t v40 = v38[1];
  swift_bridgeObjectRetain();
  sub_100031134(v37, (void (*)(void))type metadata accessor for PegasusContext);
  *(void *)(v32 + 96) = &type metadata for String;
  *(void *)(v32 + 104) = v36;
  if (v40) {
    uint64_t v41 = v39;
  }
  else {
    uint64_t v41 = 0x296C696E28;
  }
  if (v40) {
    unint64_t v42 = v40;
  }
  else {
    unint64_t v42 = 0xE500000000000000;
  }
  *(void *)(v32 + 72) = v41;
  *(void *)(v32 + 80) = v42;
  uint64_t v43 = v67;
  sub_100023FDC(v67);
  uint64_t v44 = *(void *)(v43 + 88);
  unint64_t v45 = *(void *)(v43 + 96);
  swift_bridgeObjectRetain();
  sub_100031134(v43, (void (*)(void))type metadata accessor for PegasusContext);
  *(void *)(v32 + 136) = &type metadata for String;
  *(void *)(v32 + 144) = v36;
  if (v45) {
    uint64_t v46 = v44;
  }
  else {
    uint64_t v46 = 0x296C696E28;
  }
  if (v45) {
    unint64_t v47 = v45;
  }
  else {
    unint64_t v47 = 0xE500000000000000;
  }
  *(void *)(v32 + 112) = v46;
  *(void *)(v32 + 120) = v47;
  unint64_t v48 = v68;
  sub_100023FDC((uint64_t)v68);
  uint64_t v50 = *v48;
  unint64_t v49 = v48[1];
  swift_bridgeObjectRetain();
  sub_100031134((uint64_t)v48, (void (*)(void))type metadata accessor for PegasusContext);
  *(void *)(v32 + 176) = &type metadata for String;
  *(void *)(v32 + 184) = v36;
  if (v49) {
    uint64_t v51 = v50;
  }
  else {
    uint64_t v51 = 0x296C696E28;
  }
  if (v49) {
    unint64_t v52 = v49;
  }
  else {
    unint64_t v52 = 0xE500000000000000;
  }
  *(void *)(v32 + 152) = v51;
  *(void *)(v32 + 160) = v52;
  sub_10006844C();
  uint64_t v78 = qword_10021E9D8;
  uint64_t v79 = off_10021E9E0;
  uint64_t v76 = 45;
  unint64_t v77 = 0xE100000000000000;
  uint64_t v74 = 95;
  unint64_t v75 = 0xE100000000000000;
  unint64_t v58 = sub_100021100();
  StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  swift_bridgeObjectRetain();
  id v53 = (id)OS_os_log.init(subsystem:category:)();
  uint64_t v54 = (uint64_t)v69;
  OSSignpostID.init(log:)();
  uint64_t v55 = static os_signpost_type_t.event.getter();
  LOBYTE(v58) = 2;
  sub_10001BB64(v55, (uint64_t)v53, (uint64_t)"contextUpdate", 13, 2, v54, (uint64_t)"What=%{signpost.description:attribute,public}s, Country=%{signpost.description:attribute}s, Language=%{signpost.description:attribute}s, Locale=%{signpost.description:attribute}s", 178, v58, v32);

  (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v54, v71);
  swift_release();
  swift_release();
  swift_setDeallocating();
  return sub_1000FD1B4(&qword_10021A328);
}

uint64_t sub_1000FCE34(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ContextUpdate(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000FCE98()
{
  uint64_t v1 = *(void *)(type metadata accessor for ContextUpdate(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  swift_unknownObjectRelease();
  swift_release();
  uint64_t v5 = v0 + v3;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_2;
    case 1u:
    case 4u:
    case 0xAu:
    case 0xBu:
    case 0xCu:
      goto LABEL_2;
    case 2u:

      uint64_t v6 = type metadata accessor for LocationContext(0);
      uint64_t v7 = v5 + *(int *)(v6 + 20);
      uint64_t v8 = type metadata accessor for Date();
      if (!sub_100027BA4(v7, 1, v8)) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
      }

      sub_1000251FC();
      sub_1000251FC();
      sub_1000251FC();
      sub_1000251FC();
      goto LABEL_2;
    case 3u:
      unint64_t v9 = *(void *)(v5 + 8);
      if (v9 >> 60 != 15) {
        sub_1000291B4(*(void *)v5, v9);
      }
      break;
    case 5u:
      swift_bridgeObjectRelease();
LABEL_2:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }

  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_1000FD0DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ContextUpdate(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000FD140()
{
  uint64_t v1 = *(void *)(type metadata accessor for ContextUpdate(0) - 8);
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (uint64_t)v0 + ((*(unsigned __int8 *)(v1 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return sub_1000FC6F8(v2, v3, v4, v5);
}

uint64_t sub_1000FD1A8()
{
  return sub_1000FD1B4(qword_10021EBE0);
}

uint64_t sub_1000FD1B4(uint64_t *a1)
{
  sub_10002572C(a1);
  swift_arrayDestroy();

  return _swift_deallocClassInstance(v1, 32, 7);
}

uint64_t sub_1000FD210()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000FD24C()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_1000FD56C;
  uint64_t v2 = sub_1000260FC();
  return sub_1000FA600(v2, v3, v4, v5);
}

uint64_t sub_1000FD2F0(void *a1)
{
  return sub_1000FAE3C(a1, v1);
}

uint64_t sub_1000FD30C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10002572C(&qword_10021A520);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000FD374(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000FD3C0()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000FD400()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_1000FD4A4;
  uint64_t v2 = sub_1000260FC();
  return sub_1000F9FE0(v2, v3, v4, v5);
}

uint64_t sub_1000FD4A4()
{
  sub_100026880();
  uint64_t v1 = *v0;
  sub_10001DD38();
  void *v2 = v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v1 + 8);
  return v3();
}

uint64_t sub_1000FD578@<X0>(uint64_t a1@<X8>)
{
  unsigned int v3 = [v1 type];
  if (v3 > 0xD) {
    goto LABEL_8;
  }
  if (((1 << v3) & 0x20E) != 0)
  {
    uint64_t v4 = (unsigned int *)&enum case for Apple_Parsec_Search_V2_Location.Source.gps(_:);
    goto LABEL_9;
  }
  if (((1 << v3) & 0x2830) != 0)
  {
    uint64_t v4 = (unsigned int *)&enum case for Apple_Parsec_Search_V2_Location.Source.wiFi(_:);
    goto LABEL_9;
  }
  if (((1 << v3) & 0x1C0) != 0) {
    uint64_t v4 = (unsigned int *)&enum case for Apple_Parsec_Search_V2_Location.Source.cellular(_:);
  }
  else {
LABEL_8:
  }
    uint64_t v4 = (unsigned int *)&enum case for Apple_Parsec_Search_V2_Location.Source.unknown(_:);
LABEL_9:
  uint64_t v5 = *v4;
  uint64_t v6 = type metadata accessor for Apple_Parsec_Search_V2_Location.Source();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 104);

  return v7(a1, v5, v6);
}

void sub_1000FD658(void (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

uint64_t *sub_1000FD670()
{
  uint64_t v1 = *v0;
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = *(void *)(v1 + 80);
  sub_1000FD70C((uint64_t)sub_1000FD928, v2);
  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_1000FD6F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10002538C(a2, 1, 1, a1);
}

uint64_t sub_1000FD70C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2[2];
  void v6[2] = *(void *)(*v2 + 80);
  v6[3] = a1;
  v6[4] = a2;
  uint64_t v4 = type metadata accessor for DeferredSetup.State();
  sub_1000FD9CC((void (*)(uint64_t))sub_1000FD9AC, (uint64_t)v6, v3, v4, (uint64_t)&type metadata for Bool);
  return v7;
}

uint64_t sub_1000FD79C()
{
  sub_1000FD670();

  return _swift_deallocClassInstance(v0, 24, 7);
}

uint64_t type metadata accessor for DeferredSetup()
{
  return sub_100040C54();
}

uint64_t sub_1000FD7E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 8);
}

id sub_1000FD7F4(void *a1, id a2, char a3)
{
  if (a3) {
    return (id)swift_retain();
  }
  else {
    return a1;
  }
}

void sub_1000FD804(uint64_t a1)
{
}

uint64_t sub_1000FD814(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_1000FD7F4(*(void **)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t sub_1000FD860(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_1000FD7F4(*(void **)a2, v4, v5);
  uint64_t v6 = *(void **)a1;
  unsigned __int8 v7 = *(void **)(a1 + 8);
  char v8 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  sub_1000313DC(v6, v7, v8);
  return a1;
}

uint64_t sub_1000FD8B8(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void **)a1;
  char v5 = *(void **)(a1 + 8);
  char v6 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v3;
  sub_1000313DC(v4, v5, v6);
  return a1;
}

uint64_t type metadata accessor for DeferredSetup.State()
{
  return sub_100040C54();
}

uint64_t sub_1000FD918()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000FD928@<X0>(uint64_t a1@<X8>)
{
  return sub_1000FD6F8(*(void *)(v1 + 16), a1);
}

void sub_1000FD930(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  if (*(unsigned char *)(a1 + 16))
  {
    char v5 = 0;
  }
  else
  {
    unsigned __int8 v7 = *(NSObject **)a1;
    char v6 = *(void **)(a1 + 8);
    *(void *)a1 = a2;
    *(void *)(a1 + 8) = a3;
    char v5 = 1;
    *(unsigned char *)(a1 + 16) = 1;
    swift_retain();
    dispatch_group_leave(v7);
    sub_1000313DC(v7, v6, 0);
  }
  *a4 = v5;
}

void sub_1000FD9AC(uint64_t a1@<X0>, char *a2@<X8>)
{
  sub_1000FD930(a1, *(void *)(v2 + 24), *(void *)(v2 + 32), a2);
}

void sub_1000FD9CC(void (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_1000FDA58(a3 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)a3 + 16), (os_unfair_lock_t)(a3 + ((*(unsigned int *)(*(void *)a3 + 48) + 3) & 0x1FFFFFFFCLL)), a1, a2, a4, a5, &v5);
}

void sub_1000FDA58(uint64_t a1, os_unfair_lock_t lock, void (*a3)(uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  os_unfair_lock_lock(lock);
  a3(a1);
  os_unfair_lock_unlock(lock);
  if (v7) {
    *a7 = v7;
  }
}

void sub_1000FDAE0(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_10002572C(&qword_10021BB20);
  __chkstk_darwin(v8 - 8);
  sub_100017CD4();
  uint64_t v9 = type metadata accessor for URL();
  sub_100020C48();
  uint64_t v11 = v10;
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)v41 - v16;
  NSFileManager.parsecdAssetsDirectoryURL.getter();
  if (sub_100027BA4(v4, 1, v9) == 1)
  {
    sub_100019938(v4, &qword_10021BB20);
    if (qword_100218C60 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    id v19 = sub_10001DD88(v18, (uint64_t)qword_10021ECF0);
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      *(_WORD *)sub_100023E24() = 0;
      sub_100018528((void *)&_mh_execute_header, v21, v22, "Couldn't find com.apple.parsecd cache directory");
      sub_100017D40();
    }

    return;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 32))(v17, v4, v9);
  NSString v23 = String._bridgeToObjectiveC()();
  id v24 = [a1 objectForKey:v23];

  if (v24)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    sub_100019938((uint64_t)v42, (uint64_t *)&unk_10021BB30);
    if (a4)
    {
      if (qword_100218C60 != -1) {
        swift_once();
      }
      uint64_t v25 = type metadata accessor for Logger();
      id v26 = sub_10001DD88(v25, (uint64_t)qword_10021ECF0);
      os_log_type_t v27 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v26, v27))
      {
        *(_WORD *)sub_100023E24() = 0;
        sub_100017FB8((void *)&_mh_execute_header, v28, v29, "Found cached app whitelist data, no update required.");
        sub_100017D40();
      }

      (*(void (**)(char *, uint64_t))(v11 + 8))(v17, v9);
      return;
    }
  }
  else
  {
    memset(v42, 0, sizeof(v42));
    sub_100019938((uint64_t)v42, (uint64_t *)&unk_10021BB30);
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  URL.appendingPathComponent(_:)();
  swift_bridgeObjectRelease();
  URL.path.getter();
  NSString v30 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unsigned int v31 = [a2 fileExistsAtPath:v30];

  if (v31)
  {
    sub_100023FA0(0, &qword_10021BEB0);
    id v32 = sub_100009C80(0xD000000000000014, 0x80000001001B4C50, 0);
    id v33 = objc_allocWithZone((Class)type metadata accessor for FlusherClient());
    uint64_t v34 = FlusherClient.init(connection:)(v32);
    (*(void (**)(void, void, void))((swift_isaMask & (uint64_t)v34->isa) + 0x70))(0, 0, 0);
  }
  else
  {
    if (qword_100218C60 != -1) {
      swift_once();
    }
    uint64_t v35 = type metadata accessor for Logger();
    uint64_t v34 = sub_10001DD88(v35, (uint64_t)qword_10021ECF0);
    os_log_type_t v36 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v34, v36))
    {
      uint64_t v37 = (uint8_t *)swift_slowAlloc();
      *(void *)&v42[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v37 = 136315138;
      v41[0] = v37 + 4;
      uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v41[1] = sub_10001C274(v38, v39, (uint64_t *)v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v34, v36, "App whitelist data update required, but no %s file found. Bailing to prevent useless wake of parsec-fbf.", v37, 0xCu);
      swift_arrayDestroy();
      sub_100017D40();
      sub_100017D40();
    }
  }

  unint64_t v40 = *(void (**)(char *, uint64_t))(v11 + 8);
  v40(v15, v9);
  v40(v17, v9);
}

id FlusherClient.__allocating_init(connection:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return FlusherClient.init(connection:)(a1);
}

uint64_t sub_1000FE080()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10004CD40(v0, qword_10021ECF0);
  sub_10002A10C(v0, (uint64_t)qword_10021ECF0);
  return Logger.init(subsystem:category:)();
}

uint64_t FlusherClient.flushSessionEagerly(atURL:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = type metadata accessor for URL();
  sub_100020C48();
  uint64_t v11 = v10;
  __chkstk_darwin(v12);
  sub_100017CD4();
  uint64_t v13 = *(void **)&v3[OBJC_IVAR____TtC7parsecd13FlusherClient_connection];
  unint64_t v42 = sub_1000FE578;
  uint64_t v43 = 0;
  uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
  uint64_t v39 = 1107296256;
  unint64_t v40 = sub_1000FE57C;
  uint64_t v41 = &unk_100200B10;
  uint64_t v14 = _Block_copy(&aBlock);
  id v15 = [v13 remoteObjectProxyWithErrorHandler:v14];
  _Block_release(v14);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  sub_10001C348((uint64_t)v44, (uint64_t)&aBlock);
  sub_10002572C(&qword_10021ED70);
  if (swift_dynamicCast())
  {
    if (qword_100218C60 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    sub_10002A10C(v16, (uint64_t)qword_10021ECF0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v4, a1, v9);
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v36 = a2;
      id v19 = (uint8_t *)swift_slowAlloc();
      uint64_t aBlock = swift_slowAlloc();
      *(_DWORD *)id v19 = 136315138;
      uint64_t v20 = URL.lastPathComponent.getter();
      sub_10001C274(v20, v21, &aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v22 = sub_10002ADE8();
      v23(v22);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Flushing session %s eagerly.", v19, 0xCu);
      swift_arrayDestroy();
      sub_100017D40();
      a2 = v36;
      sub_100017D40();
    }
    else
    {
      uint64_t v28 = sub_10002ADE8();
      v29(v28);
    }

    URL._bridgeToObjectiveC()(v30);
    uint64_t v25 = v31;
    id v32 = (void *)swift_allocObject();
    v32[2] = a2;
    v32[3] = a3;
    v32[4] = v5;
    unint64_t v42 = sub_1000FEBB0;
    uint64_t v43 = v32;
    uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
    uint64_t v39 = 1107296256;
    unint64_t v40 = sub_1000085EC;
    uint64_t v41 = &unk_100200B60;
    id v33 = _Block_copy(&aBlock);
    sub_100030358(a2);
    id v34 = v5;
    swift_release();
    [v37 flushSessionEagerly:v25 completion:v33];
    _Block_release(v33);
    swift_unknownObjectRelease();
  }
  else
  {
    if (qword_100218C60 != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    uint64_t v25 = sub_10001DD88(v24, (uint64_t)qword_10021ECF0);
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      os_log_type_t v27 = (uint8_t *)sub_100023E24();
      *(_WORD *)os_log_type_t v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "FBF proxy didn't conform to expected remote object protocol", v27, 2u);
      sub_100017D40();
    }
  }

  return sub_10001CA50((uint64_t)v44);
}

void sub_1000FE57C(uint64_t a1, void *a2)
{
  id v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

uint64_t sub_1000FE5E4(void (*a1)(void), uint64_t a2, void *a3)
{
  if (qword_100218C60 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_10002A10C(v5, (uint64_t)qword_10021ECF0);
  char v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Eager flush finished", v8, 2u);
    swift_slowDealloc();
  }

  if (a1) {
    a1();
  }
  uint64_t v23 = FlusherClient.invalidationQueue.getter();
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a3;
  void aBlock[4] = sub_1000FEBF8;
  aBlock[5] = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000085EC;
  aBlock[3] = &unk_100200C88;
  uint64_t v10 = _Block_copy(aBlock);
  uint64_t v11 = type metadata accessor for DispatchQoS();
  v22[1] = v22;
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v15 = a3;
  static DispatchQoS.unspecified.getter();
  uint64_t v16 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  id v19 = (char *)v22 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = _swiftEmptyArrayStorage;
  sub_10003045C();
  sub_10002572C((uint64_t *)&unk_10021BAF0);
  sub_1000301A0();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v20 = (void *)v23;
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v10);

  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  return swift_release();
}

void sub_1000FE934()
{
  if (qword_100218C60 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_10002A10C(v0, (uint64_t)qword_10021ECF0);
  swift_errorRetain();
  swift_errorRetain();
  oslog = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    uint64_t v2 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    *(_DWORD *)uint64_t v2 = 136315138;
    swift_getErrorValue();
    uint64_t v3 = Error.localizedDescription.getter();
    sub_10001C274(v3, v4, &v6);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, oslog, v1, "fbf connection closed with error: %s", v2, 0xCu);
    swift_arrayDestroy();
    sub_100017D40();
    sub_100017D40();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
}

void FlusherClient.init()()
{
}

uint64_t sub_1000FEB58()
{
  return (*(uint64_t (**)(void))((swift_isaMask & **v0) + 0x68))();
}

uint64_t sub_1000FEBB0()
{
  return sub_1000FE5E4(*(void (**)(void))(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_1000FEBC0()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000FEC10(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = **(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);

  return v5(a1, a2, v4);
}

uint64_t sub_1000FEC7C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(a1, v2);
}

uint64_t sub_1000FECE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t sub_1000FED44(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t sub_1000FEDA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t sub_1000FEE0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t sub_1000FEE70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000FEE84);
}

uint64_t sub_1000FEE84(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();

  return sub_100027BA4(a1, a2, v4);
}

uint64_t sub_1000FEECC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000FEEE0);
}

uint64_t sub_1000FEEE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();

  return sub_10002538C(a1, a2, a2, v4);
}

uint64_t sub_1000FEF2C()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1000FEFB8()
{
  type metadata accessor for UUID();
  sub_1000FF1A0(&qword_1002197C0, (void (*)(uint64_t))&type metadata accessor for UUID);

  return dispatch thunk of Hashable.hash(into:)();
}

Swift::Int sub_1000FF040()
{
  return Hasher._finalize()();
}

Swift::Int sub_1000FF0D0()
{
  return Hasher._finalize()();
}

uint64_t sub_1000FF158()
{
  return sub_1000FF1A0(qword_10021EE30, (void (*)(uint64_t))type metadata accessor for CancellableStoreKey);
}

uint64_t sub_1000FF1A0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_1000FF1E8()
{
  swift_checkMetadataState();
  if (v0 <= 0x3F)
  {
    sub_10010058C();
    if (v1 <= 0x3F)
    {
      type metadata accessor for Date();
      if (v2 <= 0x3F) {
        swift_initClassMetadata2();
      }
    }
  }
}

uint64_t sub_1000FF328()
{
  sub_100025AC8();
  if ((*(unsigned char *)(v0 + *(void *)(v2 + 120)) & 1) == 0) {
    (*(void (**)(void))(v1 + 400))();
  }
  swift_weakDestroy();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  sub_100017E10();
  sub_10000E004();
  (*(void (**)(void))(v3 + 8))();

  sub_100017E10();
  sub_100025680(v0 + *(void *)(v4 + 136), (uint64_t *)&unk_100219728);
  sub_100017E10();
  type metadata accessor for Date();
  sub_10000E004();
  sub_10000E040();
  v5();
  swift_release();
  return v0;
}

uint64_t sub_1000FF494()
{
  sub_10002A390();
  type metadata accessor for ActivitySpan.ActivityData();
  swift_retain();
  sub_100088368((void (*)(void))sub_100100BE0);
  swift_release();
  static os_log_type_t.error.getter();
  os_log(_:dso:log:type:_:)();
  static os_log_type_t.error.getter();
  sub_10002572C((uint64_t *)&unk_10021BB00);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1001A2A30;
  sub_1000FFAB8();
  uint64_t v1 = StaticString.description.getter();
  uint64_t v3 = v2;
  *(void *)(v0 + 56) = &type metadata for String;
  unint64_t v4 = sub_1000303C8();
  *(void *)(v0 + 64) = v4;
  *(void *)(v0 + 32) = v1;
  *(void *)(v0 + 40) = v3;
  uint64_t v5 = sub_1000FFA60();
  *(void *)(v0 + 96) = &type metadata for String;
  *(void *)(v0 + 104) = v4;
  *(void *)(v0 + 72) = v5;
  *(void *)(v0 + 80) = v6;
  uint64_t v7 = sub_1000FFA08();
  *(void *)(v0 + 136) = &type metadata for String;
  *(void *)(v0 + 144) = v4;
  *(void *)(v0 + 112) = v7;
  *(void *)(v0 + 120) = v8;
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  if ((v20 & 1) == 0)
  {
    static os_log_type_t.error.getter();
    uint64_t v9 = sub_100027164();
    *(_OWORD *)(v9 + 16) = xmmword_1001A2A20;
    uint64_t v10 = StaticString.description.getter();
    *(void *)(v9 + 56) = &type metadata for String;
    *(void *)(v9 + 64) = v4;
    *(void *)(v9 + 32) = v10;
    *(void *)(v9 + 40) = v11;
    sub_100024B34();
    swift_bridgeObjectRelease();
    if (v22)
    {
      swift_bridgeObjectRetain();
      static os_log_type_t.error.getter();
      uint64_t v12 = sub_100027164();
      *(_OWORD *)(v12 + 16) = xmmword_1001A2A20;
      *(void *)(v12 + 56) = sub_10002572C(&qword_10021EF58);
      *(void *)(v12 + 64) = sub_100092CA8((unint64_t *)&unk_10021EF60, &qword_10021EF58);
      *(void *)(v12 + 32) = v22;
      sub_100024B34();
      swift_bridgeObjectRelease();
    }
  }
  if (v21)
  {
    swift_bridgeObjectRetain();
    static os_log_type_t.error.getter();
    uint64_t v13 = sub_100027164();
    *(_OWORD *)(v13 + 16) = xmmword_1001A2A20;
    *(void *)(v13 + 56) = sub_10002572C(&qword_10021EF48);
    *(void *)(v13 + 64) = sub_100092CA8(&qword_10021EF50, &qword_10021EF48);
    *(void *)(v13 + 32) = v21;
    sub_100024B34();
    swift_bridgeObjectRelease();
  }
  if (v23 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v14 = result;
    if (!result) {
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v14 = *(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (!v14) {
      goto LABEL_13;
    }
  }
  if (v14 < 1)
  {
    __break(1u);
    return result;
  }
  uint64_t v16 = 0;
  do
  {
    ++v16;
    swift_unknownObjectRetain();
    static os_log_type_t.error.getter();
    uint64_t v17 = swift_allocObject();
    *(_OWORD *)(v17 + 16) = xmmword_1001A2A20;
    swift_unknownObjectRetain();
    uint64_t v18 = String.init<A>(describing:)();
    *(void *)(v17 + 56) = &type metadata for String;
    *(void *)(v17 + 64) = v4;
    *(void *)(v17 + 32) = v18;
    *(void *)(v17 + 40) = v19;
    os_log(_:dso:log:type:_:)();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
  }
  while (v14 != v16);
LABEL_13:
  swift_bridgeObjectRelease();
  static os_log_type_t.error.getter();
  os_log(_:dso:log:type:_:)();
  if (sub_1000FFB28())
  {
    static os_log_type_t.fault.getter();
    os_log(_:dso:log:type:_:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t sub_1000FF9C0()
{
  sub_100017E10();
  return (*(uint64_t (**)(Swift::Void (__swiftcall *)(), void))(v0 + 408))(_CPStartNetworkSearchFeedback.redactUnused(), 0);
}

uint64_t sub_1000FFA08()
{
  sub_10002A390();
  sub_10002A390();
  return (*(uint64_t (**)(void))(*(void *)(v0 + 88) + 24))();
}

uint64_t sub_1000FFA60()
{
  sub_10002A390();
  sub_10002A390();
  return (*(uint64_t (**)(void))(*(void *)(v0 + 88) + 32))();
}

uint64_t sub_1000FFAB8()
{
  sub_10002A390();
  sub_10002A390();
  return v1(*(void *)(v0 + 80));
}

uint64_t sub_1000FFB28()
{
  sub_10002A390();
  uint64_t v2 = *(void *)(v1 + 80);
  sub_100026B00();
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)v12 - v4;
  sub_10002A390();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v5, v0 + *(void *)(v6 + 112), v2);
  sub_10002572C(&qword_10021EF78);
  if (swift_dynamicCast())
  {
    sub_10001C1AC(v12, (uint64_t)v14);
    uint64_t v8 = v15;
    uint64_t v9 = v16;
    sub_10001B620(v14, v15);
    char v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v8, v9);
    sub_10001CA50((uint64_t)v14);
  }
  else
  {
    uint64_t v13 = 0;
    memset(v12, 0, sizeof(v12));
    sub_100025680((uint64_t)v12, (uint64_t *)&unk_10021EF80);
    char v10 = 0;
  }
  return v10 & 1;
}

uint64_t sub_1000FFC70()
{
  uint64_t v0 = type metadata accessor for Date();
  sub_100026808();
  uint64_t v2 = v1;
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100017E10();
  sub_100016608();
  v6();
  Date.timeIntervalSinceNow.getter();
  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v5, v0);
}

uint64_t sub_1000FFD78()
{
  return String.init<A>(describing:)();
}

uint64_t sub_1000FFDA8(void (*a1)(void))
{
  sub_100017E10();
  uint64_t v4 = *(os_unfair_lock_s **)(*(void *)(v1 + *(void *)(v3 + 152)) + 16);
  swift_retain();
  os_unfair_lock_lock(v4);
  sub_100100868(v1, a1);
  os_unfair_lock_unlock(v4);

  return swift_release();
}

uint64_t sub_1000FFE30()
{
  uint64_t v1 = (uint64_t)v0;
  uint64_t v2 = *v0;
  uint64_t v42 = v2;
  uint64_t v3 = sub_10002572C((uint64_t *)&unk_100219728);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = &v37[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v4);
  uint64_t v8 = &v37[-v7];
  uint64_t v47 = *(void *)(v2 + 80);
  sub_100026808();
  uint64_t v10 = v9;
  uint64_t v12 = __chkstk_darwin(v11);
  __chkstk_darwin(v12);
  uint64_t v40 = *(void *)(v1 + 24);
  uint64_t v41 = (void *)(v1 + 24);
  uint64_t v39 = *(void *)(v1 + 32);
  int v38 = *(unsigned __int8 *)(v1 + 40);
  char v13 = *(unsigned char *)(v1 + 41);
  uint64_t v14 = *(void *)(v1 + 48);
  uint64_t v15 = *(void *)(v1 + 56);
  uint64_t v16 = *(void *)(v1 + 64);
  uint64_t v44 = *(void *)(v1 + 72);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v45 = v16;
  swift_bridgeObjectRetain();
  sub_1001008B8(v14);
  sub_100023E18();
  uint64_t v43 = v10;
  uint64_t v46 = v14;
  if ((v13 & 1) == 0 && v15)
  {
    uint64_t v17 = v47;
    sub_100016608();
    v18();
    sub_100027F04();
    sub_100006858(v1, (uint64_t)v8);
    uint64_t v19 = type metadata accessor for OSSignpostID();
    uint64_t result = sub_100027BA4((uint64_t)v8, 1, v19);
    if (result != 1)
    {
      sub_100023E18();
      uint64_t v22 = *(void *)(v1 + *(void *)(v21 + 128));
      uint64_t v23 = *(void *)(v42 + 88);
      swift_bridgeObjectRetain();
      sub_10010045C((uint64_t)v8, v22, v40, v39, v38, v15, v17, v23);
      swift_bridgeObjectRelease();
      sub_10000E040();
      v24();
      sub_10000E004();
      sub_10000E040();
      v25();
      goto LABEL_7;
    }
LABEL_14:
    __break(1u);
    return result;
  }
  uint64_t v26 = v47;
  sub_100016608();
  v27();
  sub_100027F04();
  sub_100006858(v1, (uint64_t)v6);
  uint64_t v28 = type metadata accessor for OSSignpostID();
  uint64_t result = sub_100027BA4((uint64_t)v6, 1, v28);
  if (result == 1)
  {
    __break(1u);
    goto LABEL_14;
  }
  sub_100023E18();
  sub_1001003CC((uint64_t)v6, *(void *)(v1 + *(void *)(v29 + 128)), v26, *(void *)(v42 + 88));
  sub_10000E040();
  v30();
  sub_10000E004();
  sub_10000E040();
  v31();
LABEL_7:
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v33 = Strong;
    uint64_t v34 = type metadata accessor for ActivitySpan();
    sub_1000BBA00(v1, v33, v34, (uint64_t)&off_100200DC0);
    char v49 = 1;
    *(void *)&v48[14] = 0;
    *(void *)&v48[6] = 0;
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v35 = v41;
    void *v41 = 0;
    v35[1] = 0;
    *((unsigned char *)v35 + 16) = 0;
    *(unsigned char *)(v1 + 41) = v49;
    *(_OWORD *)(v1 + 42) = *(_OWORD *)v48;
    *(void *)(v1 + 56) = *(void *)&v48[14];
    *(void *)(v1 + 64) = _swiftEmptyArrayStorage;
    *(void *)(v1 + 72) = 0;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    sub_100023E18();
    *(unsigned char *)(v1 + *(void *)(v36 + 120)) = 1;
    return swift_weakAssign();
  }
  else
  {
    if (sub_1000FFB28())
    {
      static os_log_type_t.fault.getter();
      os_log(_:dso:log:type:_:)();
    }
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_10010032C(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  sub_100017E10();
  uint64_t v10 = *(os_unfair_lock_s **)(*(void *)(v4 + *(void *)(v9 + 152)) + 16);
  swift_retain();
  os_unfair_lock_lock(v10);
  sub_100100A9C(v4, a1, a2, a3, a4);
  os_unfair_lock_unlock(v10);

  return swift_release();
}

uint64_t sub_1001003CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  static os_signpost_type_t.end.getter();
  (*(void (**)(uint64_t, uint64_t))(a4 + 40))(a3, a4);

  return os_signpost(_:dso:log:name:signpostID:)();
}

void sub_10010045C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16 = static os_signpost_type_t.end.getter();
  uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t))(a8 + 40))(a7, a8);
  LOBYTE(v20) = a5;
  sub_10001BB64(v16, a2, v17, v18, v19, a1, a3, a4, v20, a6);
}

uint64_t sub_10010051C()
{
  sub_1000FF328();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v1, v2);
}

uint64_t type metadata accessor for ActivitySpan()
{
  return sub_100040C54();
}

void sub_10010058C()
{
  if (!qword_10021EEC0[0])
  {
    type metadata accessor for OSSignpostID();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, qword_10021EEC0);
    }
  }
}

uint64_t sub_1001005E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 40);
}

uint64_t sub_1001005EC()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_unknownObjectRelease();
}

uint64_t sub_100100638(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v3;
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  return a1;
}

uint64_t sub_1001006A0(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(_WORD *)(a1 + 16) = *((_WORD *)a2 + 8);
  *(_OWORD *)a1 = v4;
  *(void *)(a1 + 24) = *((void *)a2 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *((void *)a2 + 4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *((void *)a2 + 6);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  return a1;
}

__n128 initializeWithTake for AvroRecordSchema(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_10010075C(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_unknownObjectRelease();
  return a1;
}

uint64_t sub_1001007C4(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 56))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 40);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_100100804(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 40) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for ActivitySpan.ActivityData()
{
  return sub_100040C54();
}

uint64_t sub_100100868(uint64_t result, void (*a2)(void))
{
  if ((*(unsigned char *)(result + *(void *)(*(void *)result + 120)) & 1) == 0)
  {
    a2();
    return sub_1000FFE30();
  }
  return result;
}

void sub_1001008B8(uint64_t a1)
{
  if (sub_100100BE8(a1))
  {
    sub_100017E10();
    static os_log_type_t.debug.getter();
    sub_10002572C((uint64_t *)&unk_10021BB00);
    uint64_t v1 = swift_allocObject();
    *(_OWORD *)(v1 + 16) = xmmword_1001A3830;
    uint64_t v2 = sub_1000FFA60();
    uint64_t v4 = v3;
    *(void *)(v1 + 56) = &type metadata for String;
    unint64_t v5 = sub_1000303C8();
    *(void *)(v1 + 64) = v5;
    *(void *)(v1 + 32) = v2;
    *(void *)(v1 + 40) = v4;
    sub_10002FF38();
    sub_10002CE50();
    uint64_t v6 = Dictionary.description.getter();
    *(void *)(v1 + 96) = &type metadata for String;
    *(void *)(v1 + 104) = v5;
    *(void *)(v1 + 72) = v6;
    *(void *)(v1 + 80) = v7;
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();
    sub_1000FFA08();
    uint64_t v8 = sub_1000FFA60();
    uint64_t v10 = v9;
    swift_bridgeObjectRetain();
    v11._uint64_t countAndFlagsBits = 46;
    v11._object = (void *)0xE100000000000000;
    String.append(_:)(v11);
    swift_bridgeObjectRetain();
    v12._uint64_t countAndFlagsBits = v8;
    v12._object = v10;
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    NSString v13 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    sub_10002CE50();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    AnalyticsSendEvent();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_100100A9C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  *(void *)(a1 + 24) = a2;
  *(void *)(a1 + 32) = a3;
  *(unsigned char *)(a1 + 40) = a4;
  *(unsigned char *)(a1 + 41) = 0;
  *(void *)(a1 + 56) = a5;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100100AE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v2 = *(unsigned char *)(a1 + 40);
  char v3 = *(unsigned char *)(a1 + 41);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v6 = *(void *)(a1 + 72);
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 24);
  *(unsigned char *)(a2 + 16) = v2;
  *(unsigned char *)(a2 + 17) = v3;
  *(void *)(a2 + 24) = v4;
  *(void *)(a2 + 32) = v5;
  *(void *)(a2 + 40) = v7;
  *(void *)(a2 + 48) = v6;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

id sub_100100B64()
{
  return *(id *)(v0 + *(void *)(*(void *)v0 + 128));
}

uint64_t sub_100100B88()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 440))();
}

uint64_t sub_100100BB4()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 400))();
}

uint64_t sub_100100BE0@<X0>(uint64_t a1@<X8>)
{
  return sub_100100AE8(v1, a1);
}

uint64_t sub_100100BE8(uint64_t a1)
{
  sub_100025AC8();
  uint64_t v3 = *(void *)(v2 + 80);
  sub_100026B00();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v27 - v7;
  sub_100016608();
  v9();
  uint64_t DynamicType = swift_getDynamicType();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v3);
  uint64_t v11 = sub_10002E49C(DynamicType);
  uint64_t v13 = 0;
  if (v11 && a1)
  {
    uint64_t v14 = v11;
    uint64_t v15 = v12;
    uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 16);
    swift_bridgeObjectRetain();
    uint64_t v17 = v16(v14, v15);
    uint64_t v19 = v18;
    dispatch thunk of RawRepresentable.rawValue.getter();
    Class isa = UInt._bridgeToObjectiveC()().super.super.isa;
    swift_isUniquelyReferenced_nonNull_native();
    uint64_t v27 = a1;
    sub_100028570((uint64_t)isa, v17, v19);
    uint64_t v21 = v27;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(v14, v15);
    uint64_t v24 = v23;
    sub_1000FFC70();
    Class v25 = Double._bridgeToObjectiveC()().super.super.isa;
    swift_isUniquelyReferenced_nonNull_native();
    uint64_t v28 = v21;
    sub_100028570((uint64_t)v25, v22, v24);
    uint64_t v13 = v28;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v13;
}

uint64_t sub_100100E1C(uint64_t a1, int a2, void *a3)
{
  sub_10002572C((uint64_t *)&unk_10021BB00);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1001A2A20;
  uint64_t v7 = a3[3];
  uint64_t v8 = a3[4];
  sub_10001B620(a3, v7);
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 16))(v7, v8);
  *(void *)(inited + 56) = &type metadata for UInt;
  *(void *)(inited + 64) = &protocol witness table for UInt;
  *(void *)(inited + 32) = v9;
  type metadata accessor for QueryCacheSpan();
  *(void *)(swift_allocObject() + qword_100236C70) = 0;
  uint64_t v10 = sub_100078000(a1, a2, (uint64_t)"currentCost=%{signpost.description.attribute,public}llu", 55, 2, inited);
  sub_10001CA50((uint64_t)a3);
  return v10;
}

uint64_t sub_100100F24(uint64_t a1)
{
  *(void *)(v1 + qword_100236C70) = a1;
  swift_retain();

  return swift_release();
}

uint64_t sub_100100F68(uint64_t a1, char a2)
{
  sub_10002572C((uint64_t *)&unk_10021BB00);
  if (a2)
  {
    uint64_t v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = xmmword_1001A2A20;
    uint64_t v11 = a1;
    uint64_t v8 = String.init<A>(describing:)();
    uint64_t v10 = v9;
    *(void *)(v7 + 56) = &type metadata for String;
    *(void *)(v7 + 64) = sub_1000303C8();
    *(void *)(v7 + 32) = v8;
    *(void *)(v7 + 40) = v10;
    sub_100032150("error=%{signpost.description.attribute,public}s", 47, 2, v7, v11, 1);
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v4 = swift_allocObject();
    *(_OWORD *)(v4 + 16) = xmmword_1001A3830;
    *(void *)(v4 + 56) = &type metadata for String;
    unint64_t v5 = sub_1000303C8();
    *(void *)(v4 + 32) = 0xD000000000000013;
    *(void *)(v4 + 40) = 0x80000001001B7BC0;
    *(void *)(v4 + 96) = &type metadata for UInt;
    *(void *)(v4 + 104) = &protocol witness table for UInt;
    *(void *)(v4 + 64) = v5;
    *(void *)(v4 + 72) = a1;
    sub_100032150("error=%{signpost.description.attribute,public}s, cost=%{signpost.description.attribute,public}llu", 97, 2, v4);
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_1001010C4()
{
  return swift_release();
}

uint64_t sub_1001010D4()
{
  if ((*(unsigned char *)(v0 + 81) & 1) == 0) {
    sub_1001011F8();
  }
  uint64_t v1 = sub_100032148();
  swift_release();
  return v1;
}

uint64_t sub_100101118()
{
  uint64_t v0 = sub_1001010D4();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v1, v2);
}

uint64_t type metadata accessor for QueryCacheSpan()
{
  uint64_t result = qword_10021EFB8;
  if (!qword_10021EFB8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1001011B4()
{
  return swift_initClassMetadata2();
}

uint64_t sub_1001011F8()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)&v0[qword_100236C70];
  if (v2)
  {
    sub_10002572C((uint64_t *)&unk_10021BB00);
    uint64_t v3 = swift_allocObject();
    *(_OWORD *)(v3 + 16) = xmmword_1001A3830;
    uint64_t v4 = sub_10010B444();
    *(void *)(v3 + 56) = &type metadata for UInt;
    *(void *)(v3 + 64) = &protocol witness table for UInt;
    *(void *)(v3 + 32) = v4;
    uint64_t v6 = *(void *)(v2 + OBJC_IVAR____TtC7parsecd15CachedResultSet_result);
    uint64_t v5 = *(void *)(v2 + OBJC_IVAR____TtC7parsecd15CachedResultSet_result + 8);
    *(void *)(v3 + 96) = &type metadata for String;
    *(void *)(v3 + 104) = sub_1000303C8();
    *(void *)(v3 + 72) = v6;
    *(void *)(v3 + 80) = v5;
    swift_retain();
    swift_bridgeObjectRetain();
    sub_100032150("cost=%{signpost.description.attribute,public}llu, input=%{sensitive}s", 69, 2, v3);
    swift_release();
    swift_bridgeObjectRelease();
  }
  uint64_t v7 = *(os_unfair_lock_s **)(*(void *)&v1[*(void *)(*(void *)v1 + 152)] + 16);
  swift_retain();
  os_unfair_lock_lock(v7);
  if ((v1[81] & 1) == 0) {
    sub_1001159F4();
  }
  os_unfair_lock_unlock(v7);

  return swift_release();
}

uint64_t initializeBufferWithCopyOfBuffer for QueryCacheSpan.Error(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)uint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for QueryCacheSpan.Error(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for QueryCacheSpan.Error(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)uint64_t result = 0;
    *(unsigned char *)(result + 8) = 0;
    *(_DWORD *)uint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 9) = v3;
  return result;
}

uint64_t sub_1001013A4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_1001013C0(uint64_t result, int a2)
{
  if (a2)
  {
    *(void *)uint64_t result = (a2 - 1);
    char v2 = 1;
  }
  else
  {
    char v2 = 0;
  }
  *(unsigned char *)(result + 8) = v2;
  return result;
}

ValueMetadata *type metadata accessor for QueryCacheSpan.Error()
{
  return &type metadata for QueryCacheSpan.Error;
}

uint64_t sub_1001013F0(uint64_t a1)
{
  sub_10002141C(a1);
  if (*(void *)(v1 + 16))
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  return swift_task_create();
}

uint64_t sub_1001014E0(uint64_t a1)
{
  sub_10002141C(a1);
  if (*(void *)(v1 + 16))
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  sub_10002572C((uint64_t *)&unk_10021BF20);
  return swift_task_create();
}

void sub_1001015D8()
{
  sub_10002B07C();
  if (v1)
  {
    sub_10002572C(&qword_10021F2E8);
    uint64_t v2 = (void *)sub_1000264A0();
  }
  else
  {
    uint64_t v2 = _swiftEmptyDictionarySingleton;
  }
  uint64_t v30 = v0 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(v0 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(v0 + 64);
  int64_t v29 = (unint64_t)(63 - v3) >> 6;
  uint64_t v6 = v2 + 8;
  swift_bridgeObjectRetain();
  swift_retain();
  int64_t v7 = 0;
  if (!v5) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v8 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  unint64_t v9 = v8 | (v7 << 6);
  while (1)
  {
    uint64_t v16 = (uint64_t *)(*(void *)(v0 + 48) + 16 * v9);
    uint64_t v18 = *v16;
    uint64_t v17 = v16[1];
    sub_10001C348(*(void *)(v0 + 56) + 32 * v9, (uint64_t)v42);
    *(void *)&long long v41 = v18;
    *((void *)&v41 + 1) = v17;
    v39[2] = v41;
    v40[0] = v42[0];
    v40[1] = v42[1];
    *(void *)&v39[0] = v18;
    *((void *)&v39[0] + 1) = v17;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    sub_10003CA28(v40, v34);
    long long v35 = v31;
    long long v36 = v32;
    uint64_t v37 = v33;
    sub_10003CA28(v34, v38);
    long long v31 = v35;
    long long v32 = v36;
    uint64_t v33 = v37;
    sub_10003CA28(v38, v39);
    sub_10003CA28(v39, &v35);
    Swift::Int v19 = AnyHashable._rawHashValue(seed:)(v2[5]);
    uint64_t v20 = -1 << *((unsigned char *)v2 + 32);
    unint64_t v21 = v19 & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~v6[v21 >> 6]) == 0)
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v20) >> 6;
      while (++v22 != v25 || (v24 & 1) == 0)
      {
        BOOL v26 = v22 == v25;
        if (v22 == v25) {
          unint64_t v22 = 0;
        }
        v24 |= v26;
        uint64_t v27 = v6[v22];
        if (v27 != -1)
        {
          unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
          goto LABEL_38;
        }
      }
      __break(1u);
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }
    unint64_t v23 = __clz(__rbit64((-1 << v21) & ~v6[v21 >> 6])) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_38:
    *(void *)((char *)v6 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    uint64_t v28 = v2[6] + 40 * v23;
    *(_OWORD *)uint64_t v28 = v31;
    *(_OWORD *)(v28 + 16) = v32;
    *(void *)(v28 + 32) = v33;
    sub_10003CA28(&v35, (_OWORD *)(v2[7] + 32 * v23));
    ++v2[2];
    if (v5) {
      goto LABEL_8;
    }
LABEL_9:
    if (__OFADD__(v7, 1)) {
      goto LABEL_42;
    }
    if (v7 + 1 >= v29) {
      goto LABEL_40;
    }
    sub_100021D5C();
    if (!v11)
    {
      sub_100020D00();
      if (v12 == v13) {
        goto LABEL_40;
      }
      unint64_t v11 = *(void *)(v30 + 8 * v10);
      if (!v11)
      {
        sub_100020D00();
        if (v12 == v13) {
          goto LABEL_40;
        }
        unint64_t v11 = *(void *)(v30 + 8 * v10);
        if (!v11)
        {
          sub_100020D00();
          if (v12 == v13) {
            goto LABEL_40;
          }
          unint64_t v11 = *(void *)(v30 + 8 * v10);
          if (!v11) {
            break;
          }
        }
      }
    }
LABEL_28:
    unint64_t v5 = (v11 - 1) & v11;
    unint64_t v9 = __clz(__rbit64(v11)) + (v10 << 6);
    int64_t v7 = v10;
  }
  int64_t v15 = v14 + 4;
  if (v15 >= v29)
  {
LABEL_40:
    swift_release();
    sub_100023380();
    return;
  }
  unint64_t v11 = *(void *)(v30 + 8 * v15);
  if (v11)
  {
    int64_t v10 = v15;
    goto LABEL_28;
  }
  while (!__OFADD__(v15, 1))
  {
    sub_100020D00();
    if (v12 == v13) {
      goto LABEL_40;
    }
    sub_100028254();
    if (v11) {
      goto LABEL_28;
    }
  }
LABEL_43:
  __break(1u);
}

void sub_100101974()
{
  sub_10002B07C();
  if (v1)
  {
    sub_10002572C(&qword_10021B160);
    uint64_t v3 = (void *)sub_1000264A0();
  }
  else
  {
    uint64_t v3 = _swiftEmptyDictionarySingleton;
  }
  uint64_t v30 = v0 + 64;
  sub_10002C380();
  uint64_t v29 = v4;
  swift_bridgeObjectRetain();
  uint64_t v5 = 0;
  while (1)
  {
    while (1)
    {
      if (v2)
      {
        sub_100019C38();
        uint64_t v31 = v2;
        uint64_t v7 = v6 | (v5 << 6);
      }
      else
      {
        if (__OFADD__(v5, 1)) {
          goto LABEL_34;
        }
        if (v5 + 1 >= v29)
        {
LABEL_31:
          sub_100023380();
          return;
        }
        sub_100021D5C();
        if (!v8)
        {
          sub_1000254D8();
          if (v10 == v11) {
            goto LABEL_31;
          }
          if (!*(void *)(v30 + 8 * v9))
          {
            sub_1000254D8();
            if (v10 == v11) {
              goto LABEL_31;
            }
            if (!*(void *)(v30 + 8 * v12))
            {
              sub_1000254D8();
              if (v10 == v11) {
                goto LABEL_31;
              }
              if (!*(void *)(v30 + 8 * v13))
              {
                uint64_t v15 = v14 + 4;
                if (v15 >= v29) {
                  goto LABEL_31;
                }
                if (!*(void *)(v30 + 8 * v15))
                {
                  while (!__OFADD__(v15, 1))
                  {
                    sub_1000254D8();
                    if (v10 == v11) {
                      goto LABEL_31;
                    }
                    sub_100028254();
                    if (v16) {
                      goto LABEL_25;
                    }
                  }
                  goto LABEL_35;
                }
              }
            }
          }
        }
LABEL_25:
        sub_10001D7E8();
        uint64_t v31 = v17;
        uint64_t v7 = v19 + (v18 << 6);
        uint64_t v5 = v18;
      }
      uint64_t v20 = (uint64_t *)(*(void *)(v0 + 48) + 16 * v7);
      uint64_t v32 = *v20;
      uint64_t v33 = v20[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_10002B18C();
      unint64_t v21 = (_OWORD *)sub_100028908();
      sub_10003CA28(v21, v34);
      unint64_t v22 = sub_1000287F0(v32, v33);
      if ((v23 & 1) == 0) {
        break;
      }
      sub_100026114();
      sub_10002EDA8();
      char v24 = (_OWORD *)(v3[7] + 32 * v22);
      sub_10001CA50((uint64_t)v24);
      sub_10003CA28(v34, v24);
      uint64_t v2 = v31;
    }
    if (v3[2] >= v3[3]) {
      break;
    }
    sub_100105F7C();
    sub_10002DEF0(v25);
    sub_10003CA28(v34, v26);
    uint64_t v27 = v3[2];
    BOOL v11 = __OFADD__(v27, 1);
    uint64_t v28 = v27 + 1;
    if (v11) {
      goto LABEL_33;
    }
    v3[2] = v28;
    uint64_t v2 = v31;
  }
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
}

void sub_100101BEC()
{
  sub_10002B07C();
  if (v1)
  {
    sub_10002572C(&qword_10021B160);
    uint64_t v3 = (void *)sub_1000264A0();
  }
  else
  {
    uint64_t v3 = _swiftEmptyDictionarySingleton;
  }
  sub_10002C380();
  swift_bridgeObjectRetain();
  uint64_t v4 = 0;
  while (1)
  {
    while (1)
    {
      if (v2)
      {
        sub_100019C38();
        uint64_t v27 = v2;
        uint64_t v6 = v5 | (v4 << 6);
      }
      else
      {
        if (__OFADD__(v4, 1)) {
          goto LABEL_36;
        }
        sub_100024130();
        if (v7 == v8)
        {
LABEL_33:
          sub_100023380();
          return;
        }
        sub_100021D5C();
        if (!v9)
        {
          sub_100024468();
          if (v7 == v8) {
            goto LABEL_33;
          }
          sub_100028D48();
          if (!v10)
          {
            sub_100024468();
            if (v7 == v8) {
              goto LABEL_33;
            }
            sub_100028D48();
            if (!v11)
            {
              sub_100024468();
              if (v7 == v8) {
                goto LABEL_33;
              }
              sub_100028D48();
              if (!v12)
              {
                sub_100024130();
                if (v7 == v8) {
                  goto LABEL_33;
                }
                if (!*(void *)(v0 + 64 + 8 * v13))
                {
                  while (!__OFADD__(v13, 1))
                  {
                    sub_100024468();
                    if (v7 == v8) {
                      goto LABEL_33;
                    }
                    sub_100028254();
                    if (v14) {
                      goto LABEL_27;
                    }
                  }
                  goto LABEL_37;
                }
              }
            }
          }
        }
LABEL_27:
        sub_10001D7E8();
        uint64_t v27 = v15;
        uint64_t v6 = v17 + (v16 << 6);
        uint64_t v4 = v16;
      }
      uint64_t v18 = (uint64_t *)(*(void *)(v0 + 48) + 16 * v6);
      uint64_t v28 = *v18;
      uint64_t v29 = v18[1];
      swift_bridgeObjectRetain();
      sub_10002B18C();
      uint64_t v19 = (_OWORD *)sub_100028908();
      sub_10003CA28(v19, v30);
      unint64_t v20 = sub_1000287F0(v28, v29);
      if ((v21 & 1) == 0) {
        break;
      }
      sub_100026114();
      sub_10002EDA8();
      unint64_t v22 = (_OWORD *)(v3[7] + 32 * v20);
      sub_10001CA50((uint64_t)v22);
      sub_10003CA28(v30, v22);
      uint64_t v2 = v27;
    }
    if (v3[2] >= v3[3]) {
      break;
    }
    sub_100105F7C();
    sub_10002DEF0(v23);
    sub_10003CA28(v30, v24);
    uint64_t v25 = v3[2];
    BOOL v8 = __OFADD__(v25, 1);
    uint64_t v26 = v25 + 1;
    if (v8) {
      goto LABEL_35;
    }
    v3[2] = v26;
    uint64_t v2 = v27;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
}

uint64_t sub_100101E44(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_10002572C(&qword_10021F2E8);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = _swiftEmptyDictionarySingleton;
  }
  uint64_t v27 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v26 = (unint64_t)(63 - v3) >> 6;
  uint64_t v6 = v2 + 8;
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v8 = 0;
  if (!v5) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v9 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  unint64_t v10 = v9 | (v8 << 6);
  while (1)
  {
    uint64_t v15 = (void *)(*(void *)(a1 + 48) + 16 * v10);
    uint64_t v16 = v15[1];
    *(void *)&v36[0] = *v15;
    *((void *)&v36[0] + 1) = v16;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    swift_dynamicCast();
    long long v32 = v28;
    long long v33 = v29;
    uint64_t v34 = v30;
    sub_10003CA28(&v31, v35);
    long long v28 = v32;
    long long v29 = v33;
    uint64_t v30 = v34;
    sub_10003CA28(v35, v36);
    sub_10003CA28(v36, &v32);
    uint64_t result = AnyHashable._rawHashValue(seed:)(v2[5]);
    uint64_t v17 = -1 << *((unsigned char *)v2 + 32);
    unint64_t v18 = result & ~v17;
    unint64_t v19 = v18 >> 6;
    if (((-1 << v18) & ~v6[v18 >> 6]) == 0)
    {
      char v21 = 0;
      unint64_t v22 = (unint64_t)(63 - v17) >> 6;
      while (++v19 != v22 || (v21 & 1) == 0)
      {
        BOOL v23 = v19 == v22;
        if (v19 == v22) {
          unint64_t v19 = 0;
        }
        v21 |= v23;
        uint64_t v24 = v6[v19];
        if (v24 != -1)
        {
          unint64_t v20 = __clz(__rbit64(~v24)) + (v19 << 6);
          goto LABEL_34;
        }
      }
      __break(1u);
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    unint64_t v20 = __clz(__rbit64((-1 << v18) & ~v6[v18 >> 6])) | v18 & 0x7FFFFFFFFFFFFFC0;
LABEL_34:
    *(void *)((char *)v6 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    uint64_t v25 = v2[6] + 40 * v20;
    *(_OWORD *)uint64_t v25 = v28;
    *(_OWORD *)(v25 + 16) = v29;
    *(void *)(v25 + 32) = v30;
    uint64_t result = (uint64_t)sub_10003CA28(&v32, (_OWORD *)(v2[7] + 32 * v20));
    ++v2[2];
    if (v5) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v11 = v8 + 1;
    if (__OFADD__(v8, 1)) {
      goto LABEL_38;
    }
    if (v11 >= v26) {
      goto LABEL_36;
    }
    unint64_t v12 = *(void *)(v27 + 8 * v11);
    int64_t v13 = v8 + 1;
    if (!v12)
    {
      int64_t v13 = v8 + 2;
      if (v8 + 2 >= v26) {
        goto LABEL_36;
      }
      unint64_t v12 = *(void *)(v27 + 8 * v13);
      if (!v12)
      {
        int64_t v13 = v8 + 3;
        if (v8 + 3 >= v26) {
          goto LABEL_36;
        }
        unint64_t v12 = *(void *)(v27 + 8 * v13);
        if (!v12)
        {
          int64_t v13 = v8 + 4;
          if (v8 + 4 >= v26) {
            goto LABEL_36;
          }
          unint64_t v12 = *(void *)(v27 + 8 * v13);
          if (!v12) {
            break;
          }
        }
      }
    }
LABEL_24:
    unint64_t v5 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v13 << 6);
    int64_t v8 = v13;
  }
  int64_t v14 = v8 + 5;
  if (v8 + 5 >= v26)
  {
LABEL_36:
    swift_release();
    sub_100023380();
    return (uint64_t)v2;
  }
  unint64_t v12 = *(void *)(v27 + 8 * v14);
  if (v12)
  {
    int64_t v13 = v8 + 5;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v13 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v13 >= v26) {
      goto LABEL_36;
    }
    unint64_t v12 = *(void *)(v27 + 8 * v13);
    ++v14;
    if (v12) {
      goto LABEL_24;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

void sub_1001021FC()
{
  sub_100027F28();
  sub_100023E18();
  sub_100025288();
  type metadata accessor for Client();
  sub_10002A584();
  (*(void (**)(uint64_t, uint64_t))(v2 + 24))(v0, v1);
  swift_endAccess();
  Lock.unlock()();
}

void sub_10010227C()
{
  sub_100027F28();
  sub_100025B1C();
  uint64_t v2 = *(void **)(v0 + 24);
  *(void *)(v0 + 24) = v1;
  id v3 = v1;

  Lock.unlock()();
}

void sub_1001022C4()
{
  sub_100027F28();
  sub_100023E18();
  sub_100025288();
  sub_100105B98(v1, v0);
  swift_endAccess();
  Lock.unlock()();
}

void sub_100102320(char a1)
{
  Lock.lock()();
  sub_100025B1C();
  *(unsigned char *)(v1 + 24) = a1;
  Lock.unlock()();
}

id sub_100102368()
{
  id v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  uint64_t v1 = (void *)_convertErrorToNSError(_:)();
  id v2 = [v0 initWithError:v1];
  swift_errorRelease();

  return v2;
}

Swift::Int sub_1001023D4()
{
  return SessionDBFeatureFlags.hashValue.getter();
}

uint64_t sub_1001023F0()
{
  if (qword_100218B20 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_10002A10C(v0, (uint64_t)qword_100236978);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    id v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "bag refresh notification", v3, 2u);
    swift_slowDealloc();
  }

  uint64_t v4 = Notification.userInfo.getter();
  if (!v4)
  {
    long long v10 = 0u;
    long long v11 = 0u;
    return sub_1000256D4((uint64_t)&v10, (uint64_t *)&unk_10021BB30);
  }
  uint64_t v5 = v4;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  AnyHashable.init<A>(_:)();
  sub_100039D58((uint64_t)v9, v5, &v10);
  swift_bridgeObjectRelease();
  sub_100039C5C((uint64_t)v9);
  if (!*((void *)&v11 + 1)) {
    return sub_1000256D4((uint64_t)&v10, (uint64_t *)&unk_10021BB30);
  }
  type metadata accessor for BagContext();
  uint64_t result = swift_dynamicCast();
  if (result)
  {
    char v7 = (void *)v9[0];
    int64_t v8 = (void *)sub_100023568();
    if (v8)
    {
      if (sub_100040E64(v7, v8)) {
        sub_100018148(0, 0);
      }
      swift_release();
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_1001026D0()
{
  sub_10001CDE0(v0 + 16);
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_100102708()
{
  uint64_t v0 = sub_1001026D0();

  return _swift_deallocClassInstance(v0, 64, 7);
}

uint64_t sub_100102738()
{
  *(void *)(v1 + 16) = v0;
  return _swift_task_switch(sub_100102758, 0, 0);
}

uint64_t sub_100102758()
{
  sub_10001DD48();
  uint64_t v1 = *(void *)(v0[2] + 32);
  v0[3] = v1;
  if (v1)
  {
    swift_retain();
    os_log_type_t v2 = (void *)swift_task_alloc();
    v0[4] = v2;
    void *v2 = v0;
    v2[1] = sub_100102860;
    return ConfigurationManager.configuration(for:forceFetch:)(8, 1);
  }
  else
  {
    sub_100105B4C();
    sub_100024A30();
    swift_willThrow();
    sub_100017DBC();
    return v3();
  }
}

uint64_t sub_100102860()
{
  sub_100023C50();
  sub_100026880();
  uint64_t v3 = v2;
  sub_100017DB0();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v1;
  *(void *)(v3 + 40) = v5;
  *(void *)(v3 + 48) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v6 = sub_100102A30;
  }
  else
  {
    swift_release();
    uint64_t v6 = sub_100102950;
  }
  return _swift_task_switch(v6, 0, 0);
}

uint64_t sub_100102950()
{
  sub_10001DD48();
  self;
  if (swift_dynamicCastObjCClass())
  {
    uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
    return v1();
  }
  else
  {
    sub_100105B4C();
    sub_100024A30();
    swift_willThrow();
    swift_unknownObjectRelease();
    sub_100017DBC();
    return v3();
  }
}

uint64_t sub_100102A30()
{
  sub_100023C50();
  swift_release();
  sub_100017DBC();
  return v0();
}

uint64_t sub_100102A8C()
{
  sub_100023C50();
  swift_release();
  sub_100017DBC();
  return v0();
}

void sub_100102AE8(char a1, void (*a2)(id), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = sub_10002572C(&qword_10021F2D0);
  uint64_t v11 = sub_100016544(v10);
  __chkstk_darwin(v11);
  int64_t v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v14 = (void *)sub_100016A0C();
  if (!v14) {
    goto LABEL_5;
  }
  id v15 = v14;
  id v22 = v14;
  if ((a1 & 1) == 0)
  {
    sub_100023FA0(0, (unint64_t *)&qword_10021D040);
    char v16 = Config.isDefault.getter();
    id v15 = v22;
    if (v16)
    {

LABEL_5:
      uint64_t v17 = type metadata accessor for TaskPriority();
      sub_10002538C((uint64_t)v13, 1, 1, v17);
      uint64_t v18 = swift_allocObject();
      swift_weakInit();
      unint64_t v19 = (void *)swift_allocObject();
      void v19[2] = 0;
      v19[3] = 0;
      v19[4] = v18;
      void v19[5] = a2;
      v19[6] = a3;
      v19[7] = a4;
      v19[8] = a5;
      swift_retain();
      swift_retain();
      sub_1001013F0((uint64_t)v13);
      swift_release();
      sub_1000256D4((uint64_t)v13, &qword_10021F2D0);
      return;
    }
  }
  a2(v15);
  id v20 = v22;
}

uint64_t sub_100102CAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[8] = a7;
  v8[9] = a8;
  void v8[6] = a5;
  v8[7] = a6;
  v8[5] = a4;
  return _swift_task_switch(sub_100102CD4, 0, 0);
}

uint64_t sub_100102CD4()
{
  sub_10001DD48();
  sub_100017F00();
  uint64_t Strong = swift_weakLoadStrong();
  *(void *)(v0 + 80) = Strong;
  if (Strong)
  {
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 88) = v2;
    void *v2 = v0;
    v2[1] = sub_100102EAC;
    return ConfigurationManager.configuration(for:forceFetch:)(7, 0);
  }
  else
  {
    if (qword_100218B20 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_10002A10C(v3, (uint64_t)qword_100236978);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "config is not type PARBag", v6, 2u);
      sub_100017D40();
    }

    sub_100105B4C();
    uint64_t v7 = sub_100024A30();
    swift_willThrow();
    (*(void (**)(uint64_t))(v0 + 64))(v7);
    swift_errorRelease();
    sub_100017DBC();
    return v8();
  }
}

uint64_t sub_100102EAC()
{
  sub_100023C50();
  sub_100026880();
  uint64_t v3 = v2;
  sub_100017DB0();
  *uint64_t v4 = v3;
  *uint64_t v4 = *v1;
  *(void *)(v3 + 96) = v5;
  *(void *)(v3 + 104) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v6 = sub_10010313C;
  }
  else
  {
    swift_release();
    uint64_t v6 = sub_100102F9C;
  }
  return _swift_task_switch(v6, 0, 0);
}

uint64_t sub_100102F9C()
{
  self;
  uint64_t v1 = swift_dynamicCastObjCClass();
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = *(void (**)(uint64_t))(v0 + 48);
    swift_unknownObjectRetain();
    v3(v2);
    swift_unknownObjectRelease_n();
  }
  else
  {
    if (qword_100218B20 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_10002A10C(v4, (uint64_t)qword_100236978);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "config is not type PARBag", v7, 2u);
      sub_100017D40();
    }

    sub_100105B4C();
    uint64_t v8 = sub_100024A30();
    swift_willThrow();
    swift_unknownObjectRelease();
    (*(void (**)(uint64_t))(v0 + 64))(v8);
    swift_errorRelease();
  }
  sub_100017DBC();
  return v9();
}

uint64_t sub_10010313C()
{
  sub_100023C50();
  swift_release();
  (*(void (**)(void))(v0 + 64))(*(void *)(v0 + 104));
  swift_errorRelease();
  sub_100017DBC();
  return v1();
}

uint64_t sub_1001031B0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for UserAgent();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (swift_unknownObjectWeakLoadStrong())
  {
    if (sub_100023568())
    {
      type metadata accessor for PARNetworkRequestFactory();
      uint64_t inited = swift_initStackObject();
      uint64_t v7 = swift_retain();
      sub_10001E5C0(v7, inited);
      parsecdUserAgent.getter();
      sub_100088944();
      swift_unknownObjectRelease();
      swift_release();
      swift_release();
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      uint64_t v9 = type metadata accessor for URLRequest();
      return sub_10002538C(a1, 0, 1, v9);
    }
    swift_unknownObjectRelease();
  }
  uint64_t v8 = type metadata accessor for URLRequest();

  return sub_10002538C(a1, 1, 1, v8);
}

uint64_t sub_1001033D4()
{
  uint64_t v0 = sub_10002572C(&qword_10021BB20);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v14[-1] - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v14[-1] - v4;
  if (swift_unknownObjectWeakLoadStrong())
  {
    sub_100080A20();
    swift_unknownObjectRelease();
  }
  else
  {
    uint64_t v18 = 0;
    memset(v17, 0, sizeof(v17));
  }
  sub_10002A338((uint64_t)v17, (uint64_t)v14, (uint64_t *)&unk_10021F2F8);
  uint64_t v6 = v15;
  if (v15)
  {
    uint64_t v7 = v16;
    sub_10001B620(v14, v15);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v7);
    sub_10001CA50((uint64_t)v14);
  }
  else
  {
    sub_1000256D4((uint64_t)v14, (uint64_t *)&unk_10021F2F8);
    uint64_t v8 = type metadata accessor for URL();
    sub_10002538C((uint64_t)v5, 1, 1, v8);
  }
  sub_10002A338((uint64_t)v17, (uint64_t)v14, (uint64_t *)&unk_10021F2F8);
  uint64_t v9 = v15;
  if (v15)
  {
    uint64_t v10 = v16;
    sub_10001B620(v14, v15);
    (*(void (**)(uint64_t, uint64_t))(v10 + 16))(v9, v10);
    sub_10001CA50((uint64_t)v14);
  }
  else
  {
    sub_1000256D4((uint64_t)v14, (uint64_t *)&unk_10021F2F8);
    uint64_t v11 = type metadata accessor for URL();
    sub_10002538C((uint64_t)v2, 1, 1, v11);
  }
  LocalCachePaths.init(standard:legacy:)();
  return sub_1000256D4((uint64_t)v17, (uint64_t *)&unk_10021F2F8);
}

void sub_1001035D4(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = v2;
    self;
    uint64_t v4 = swift_dynamicCastObjCClass();
    if (v4)
    {
      uint64_t v5 = (void *)v4;
      if (swift_unknownObjectWeakLoadStrong())
      {
        uint64_t v6 = qword_100218B20;
        swift_unknownObjectRetain();
        if (v6 != -1) {
          swift_once();
        }
        uint64_t v7 = type metadata accessor for Logger();
        sub_10002A10C(v7, (uint64_t)qword_100236978);
        uint64_t v8 = Logger.logObject.getter();
        os_log_type_t v9 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v8, v9))
        {
          uint64_t v10 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v10 = 0;
          _os_log_impl((void *)&_mh_execute_header, v8, v9, "New bag loaded", v10, 2u);
          swift_slowDealloc();
        }

        id v11 = [self defaultCenter];
        sub_10002572C((uint64_t *)&unk_10021BAE0);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_1001A2A20;
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        AnyHashable.init<A>(_:)();
        *(void *)(inited + 96) = sub_100023FA0(0, (unint64_t *)&qword_10021D040);
        *(void *)(inited + 72) = v5;
        swift_unknownObjectRetain();
        uint64_t v13 = Dictionary.init(dictionaryLiteral:)();
        sub_10010553C(@"PARBagChangeNotification", 0, v13, v11);

        if ((Config.isDefault.getter() & 1) == 0)
        {
          int64_t v14 = Logger.logObject.getter();
          os_log_type_t v15 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v14, v15))
          {
            uint64_t v16 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v16 = 0;
            _os_log_impl((void *)&_mh_execute_header, v14, v15, "Broadcasting distributed notification on bag change", v16, 2u);
            swift_slowDealloc();
          }

          id v17 = [self defaultCenter];
          if (qword_100218AD0 != -1) {
            swift_once();
          }
          [v17 postNotificationName:qword_1002368A8 object:0];
        }
        unsigned __int8 v18 = sub_100103A14(v5);
        uint64_t v19 = *(void *)(v3 + 40);
        *(void *)(v3 + 40) = v18 & 1;
        if (v19 != (v18 & 1))
        {
          swift_retain();
          id v20 = Logger.logObject.getter();
          os_log_type_t v21 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v20, v21))
          {
            id v22 = (uint8_t *)swift_slowAlloc();
            *(_DWORD *)id v22 = 134217984;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_release();
            _os_log_impl((void *)&_mh_execute_header, v20, v21, "setting Parsec News Available status to %lu", v22, 0xCu);
            swift_slowDealloc();
          }
          else
          {

            swift_release();
          }
          BOOL v23 = (const char **)&kPARNotifyDisabled;
          if (v18) {
            BOOL v23 = (const char **)&kPARNotifyEnabled;
          }
          notify_post(*v23);
        }
        notify_post(kPARNotifyBagChange);
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
      }
    }
  }
}

id sub_100103A14(void *a1)
{
  sub_100023FA0(0, (unint64_t *)&qword_10021D040);
  if (Config.isDefault.getter()) {
    return 0;
  }
  id v3 = objc_allocWithZone((Class)PARBag);
  id v4 = sub_10001519C(a1, 0x312F7377656ELL, 0xE600000000000000);
  id v2 = [v4 isEnabled];

  return v2;
}

BOOL sub_100103AA4()
{
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong) {
    swift_unknownObjectRelease();
  }
  return Strong != 0;
}

uint64_t sub_100103AE0@<X0>(void *a1@<X8>)
{
  uint64_t v2 = sub_10002572C(&qword_10021BB20);
  __chkstk_darwin(v2 - 8);
  id v4 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for UserAgent();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v28 = v6;
    parsecdUserAgent.getter();
    uint64_t v10 = sub_10007E75C();
    uint64_t v12 = v11;
    URLRequest.url.getter();
    uint64_t v13 = type metadata accessor for URL();
    int v14 = sub_100027BA4((uint64_t)v4, 1, v13);
    uint64_t v29 = v12;
    uint64_t v30 = v5;
    if (v14 == 1)
    {
      sub_1000256D4((uint64_t)v4, &qword_10021BB20);
      uint64_t v15 = 0;
      uint64_t v16 = 0;
    }
    else
    {
      uint64_t v15 = URL.absoluteString.getter();
      uint64_t v16 = v17;
      (*(void (**)(char *, uint64_t))(*(void *)(v13 - 8) + 8))(v4, v13);
    }
    uint64_t v18 = v10;
    uint64_t v19 = v28;
    uint64_t v20 = URLRequest.allHTTPHeaderFields.getter();
    if (v20)
    {
      uint64_t v21 = sub_100101E44(v20);
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v21 = 0;
    }
    id v22 = objc_allocWithZone((Class)SFStartNetworkSearchFeedback);
    id v23 = sub_100104F00(0, 0xE000000000000000, v15, v16, v21, 16, 10);
    sub_100023FA0(0, &qword_10021CD30);
    id v24 = v23;
    id v25 = sub_1000E515C(v24, 0);
    sub_1000148D0();

    a1[3] = &type metadata for ConfigurationController.FeedbackContext;
    swift_unknownObjectRelease();
    *a1 = v24;
    a1[1] = v18;
    uint64_t v26 = v30;
    a1[2] = v29;
    return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v8, v26);
  }
  else
  {
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
  }
  return result;
}

void sub_100103D94(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for UserAgent();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002A338(a2, (uint64_t)v23, (uint64_t *)&unk_10021BB30);
  if (v24)
  {
    if ((swift_dynamicCast() & 1) == 0) {
      return;
    }
    uint64_t v7 = (void *)v22[1];
    uint64_t v8 = URLDataSourceOutput.response.getter();
    if (v8)
    {
      os_log_type_t v9 = (void *)v8;
      self;
      uint64_t v10 = (void *)swift_dynamicCastObjCClass();
      if (v10)
      {
        id v11 = [v10 statusCode];

        id v12 = v7;
        uint64_t v13 = URLDataSourceOutput.data.getter();
        unint64_t v15 = v14;
        uint64_t v16 = Data.count.getter();
        sub_1000291B4(v13, v15);
        uint64_t v17 = URLDataSourceOutput.timingInfo.getter();
        id v18 = objc_allocWithZone((Class)SFEndNetworkSearchFeedback);
        id v19 = sub_100105004(v12, v16, (uint64_t)v11, v17);
        sub_100023FA0(0, &qword_10021CD30);
        id v20 = v19;
        id v21 = sub_1000E515C(v20, 0);
        parsecdUserAgent.getter();
        sub_1000148D0();

        swift_unknownObjectRelease();
        (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
        return;
      }
    }
    swift_unknownObjectRelease();
  }
  else
  {
    sub_1000256D4((uint64_t)v23, (uint64_t *)&unk_10021BB30);
  }
}

uint64_t sub_100103FD8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for UserAgent();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002A338(a2, (uint64_t)v13, (uint64_t *)&unk_10021BB30);
  if (!v14) {
    return sub_1000256D4((uint64_t)v13, (uint64_t *)&unk_10021BB30);
  }
  uint64_t result = swift_dynamicCast();
  if (result)
  {
    uint64_t v8 = (void *)v12[1];
    sub_100023FA0(0, (unint64_t *)&unk_10021BF10);
    swift_errorRetain();
    id v9 = sub_100102368();
    sub_100023FA0(0, &qword_10021CD30);
    id v10 = v9;
    id v11 = sub_1000E515C(v10, 0);
    parsecdUserAgent.getter();
    sub_1000148D0();

    swift_unknownObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  return result;
}

BOOL PARBag.isExpired.getter()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  sub_100024F80();
  Date.init()();
  Date.timeIntervalSince1970.getter();
  double v4 = v3;
  (*(void (**)(void *, uint64_t))(v2 + 8))(v0, v1);
  [v0 expirationDate];
  return v5 < v4;
}

uint64_t PARBag.searchURLString.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10002572C(&qword_10021BB20);
  uint64_t v3 = sub_100016544(v2);
  __chkstk_darwin(v3);
  double v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v7 = __chkstk_darwin(v6);
  id v9 = (char *)&v18 - v8;
  id v10 = objc_msgSend(v1, "searchURL", v7);
  if (v10)
  {
    id v11 = v10;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v12 = type metadata accessor for URL();
    uint64_t v13 = (uint64_t)v5;
    uint64_t v14 = 0;
  }
  else
  {
    uint64_t v12 = type metadata accessor for URL();
    uint64_t v13 = (uint64_t)v5;
    uint64_t v14 = 1;
  }
  sub_10002538C(v13, v14, 1, v12);
  sub_100105644((uint64_t)v5, (uint64_t)v9, &qword_10021BB20);
  type metadata accessor for URL();
  if (sub_100027BA4((uint64_t)v9, 1, v12) == 1)
  {
    sub_1000256D4((uint64_t)v9, &qword_10021BB20);
    return 0;
  }
  else
  {
    uint64_t v15 = URL.absoluteString.getter();
    sub_10000E004();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v9, v12);
  }
  return v15;
}

Swift::OpaquePointer_optional __swiftcall PARBag.rawConfig()()
{
  uint64_t v1 = (void *)sub_1001055D8(v0);
  result.value._rawValue = v1;
  result.is_nil = v2;
  return result;
}

double PARBag.value(forKey:ofType:)@<D0>(uint64_t a1@<X8>)
{
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v1 valueForKey:v3 override:1];

  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  sub_10002572C((uint64_t *)&unk_10021F1D8);
  if (swift_dynamicCast())
  {
    uint64_t ObjectType = swift_getObjectType();
    if ([v7 isKindOfClass:swift_getObjCClassFromMetadata()])
    {
      *(void *)(a1 + 24) = ObjectType;
      *(void *)a1 = v7;
      return result;
    }
    swift_unknownObjectRelease();
  }
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t PARBag.value(forKey:shouldConsiderOverrides:)(uint64_t a1, uint64_t a2, char a3)
{
  NSString v5 = String._bridgeToObjectiveC()();
  id v6 = [v3 valueForKey:v5 override:a3 & 1];

  _bridgeAnyObjectToAny(_:)();

  return swift_unknownObjectRelease();
}

Swift::Bool __swiftcall PARBag.configBool(forKey:)(Swift::String forKey)
{
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [v1 valueForKey:v2 shouldConsiderOverrides:1];

  if (v3)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v7, 0, sizeof(v7));
  }
  sub_100105644((uint64_t)v7, (uint64_t)v8, (uint64_t *)&unk_10021BB30);
  if (v9)
  {
    int v4 = swift_dynamicCast();
    if (v4) {
      LOBYTE(v4) = v6 > 0;
    }
  }
  else
  {
    sub_1000256D4((uint64_t)v8, (uint64_t *)&unk_10021BB30);
    LOBYTE(v4) = 0;
  }
  return v4;
}

id sub_100104AE4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7 = type metadata accessor for URL();
  double v8 = __chkstk_darwin(v7);
  id v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, double))(v11 + 16))(v10, a1, v8);
  objc_allocWithZone((Class)PARBag);
  id v12 = a4;
  swift_bridgeObjectRetain();
  return sub_1001050B0((uint64_t)v10, a3, a4, v13);
}

id sub_100104D38(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v10 = objc_allocWithZone((Class)PARBag);
  sub_100027BCC(a1, a2);
  id v11 = a5;
  swift_bridgeObjectRetain();
  return sub_100105184(a1, a2, a3, a4, a5);
}

id sub_100104EA4()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, "init");
}

id sub_100104F00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  double v8 = v7;
  if (a2)
  {
    NSString v13 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    if (a4) {
      goto LABEL_3;
    }
LABEL_6:
    NSString v14 = 0;
    if (a5) {
      goto LABEL_4;
    }
LABEL_7:
    v15.super.Class isa = 0;
    goto LABEL_8;
  }
  NSString v13 = 0;
  if (!a4) {
    goto LABEL_6;
  }
LABEL_3:
  NSString v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (!a5) {
    goto LABEL_7;
  }
LABEL_4:
  v15.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
LABEL_8:
  id v16 = [v8 initWithInput:v13 url:v14 headers:v15.super.isa triggerEvent:a6 endpoint:a7];

  return v16;
}

id sub_100105004(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSString v5 = v4;
  if (a4)
  {
    v9.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v9.super.Class isa = 0;
  }
  id v10 = [v5 initWithStartSearch:a1 responseSize:a2 statusCode:a3 networkTimingData:v9.super.isa];

  return v10;
}

id sub_1001050B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, void *a3@<X3>, NSURL *a4@<X8>)
{
  NSString v5 = v4;
  URL._bridgeToObjectiveC()(a4);
  id v10 = v9;
  if (a2)
  {
    NSString v11 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v11 = 0;
  }
  id v12 = [v5 initWithURL:v10 userAgent:v11 userDefaults:a3];

  uint64_t v13 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(a1, v13);
  return v12;
}

id sub_100105184(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v6 = v5;
  v11.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
  if (a4)
  {
    NSString v12 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v12 = 0;
  }
  id v13 = [v6 initWithData:v11.super.isa userAgent:v12 userDefaults:a5];

  sub_1000291B4(a1, a2);
  return v13;
}

uint64_t sub_100105238(uint64_t a1, char a2, char a3, char a4, char a5, char a6, char a7)
{
  uint64_t v14 = sub_10002572C(&qword_10021F2D0);
  __chkstk_darwin(v14 - 8);
  id v16 = (char *)&v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10002A338(a1, (uint64_t)v16, &qword_10021F2D0);
  uint64_t v17 = type metadata accessor for TaskPriority();
  if (sub_100027BA4((uint64_t)v16, 1, v17) == 1)
  {
    sub_1000256D4((uint64_t)v16, &qword_10021F2D0);
    uint64_t result = 0;
    if ((a2 & 1) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    unsigned __int8 v19 = TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(*(void *)(v17 - 8) + 8))(v16, v17);
    uint64_t result = v19;
    if ((a2 & 1) == 0)
    {
LABEL_3:
      if (a3) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  result |= 0x100uLL;
  if (a3)
  {
LABEL_4:
    result |= 0x400uLL;
    if ((a4 & 1) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  if ((a4 & 1) == 0)
  {
LABEL_5:
    if ((a5 & 1) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_15:
  result |= 0x800uLL;
  if (a5) {
LABEL_6:
  }
    result |= 0x1000uLL;
LABEL_7:
  if (a6) {
    result |= 0x2000uLL;
  }
  if (a7) {
    return result | 0x4000;
  }
  return result;
}

uint64_t sub_1001053A8()
{
  sub_10001DD48();
  uint64_t v1 = v0;
  uint64_t v7 = (uint64_t (*)(uint64_t))((char *)v2 + *v2);
  uint64_t v3 = swift_task_alloc();
  int v4 = (void *)sub_10002AC58(v3);
  *int v4 = v5;
  v4[1] = sub_100105478;
  return v7(v1);
}

uint64_t sub_100105478()
{
  sub_100023C50();
  sub_100026880();
  uint64_t v1 = *v0;
  sub_100017DB0();
  void *v2 = v1;
  swift_task_dealloc();
  sub_10000E1BC();
  return v3();
}

void sub_10010553C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [a4 postNotificationName:a1 object:a2 userInfo:isa];
}

uint64_t sub_1001055D8(void *a1)
{
  id v1 = [a1 rawBag];
  if (!v1) {
    return 0;
  }
  objc_super v2 = v1;
  uint64_t v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_100105644(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_10002572C(a3);
  sub_10002A584();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, a1);
  return a2;
}

uint64_t type metadata accessor for ConfigurationController()
{
  return self;
}

uint64_t type metadata accessor for PARBagConfigFactory()
{
  return self;
}

uint64_t sub_1001056E4()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10010571C()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100105764(uint64_t a1, int *a2)
{
  *(void *)(v2 + 16) = a1;
  uint64_t v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 24) = v3;
  void *v3 = v2;
  v3[1] = sub_100105844;
  return v5(v2 + 32);
}

uint64_t sub_100105844()
{
  sub_100023C50();
  sub_100026880();
  uint64_t v2 = v1;
  sub_100017DB0();
  void *v3 = v2;
  uint64_t v5 = *(unsigned char **)(v4 + 16);
  uint64_t v6 = *v0;
  sub_100017DB0();
  *uint64_t v7 = v6;
  swift_task_dealloc();
  *uint64_t v5 = *(unsigned char *)(v2 + 32);
  sub_10000E1BC();
  return v8();
}

unint64_t sub_100105920()
{
  unint64_t result = qword_10021F2F0;
  if (!qword_10021F2F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10021F2F0);
  }
  return result;
}

uint64_t sub_10010596C()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_1001059BC()
{
  uint64_t v1 = v0[6];
  uint64_t v2 = v0[7];
  uint64_t v3 = v0[8];
  uint64_t v4 = swift_task_alloc();
  uint64_t v5 = (void *)sub_10002AC58(v4);
  *uint64_t v5 = v6;
  v5[1] = sub_1000179CC;
  uint64_t v7 = sub_100016684();
  return sub_100102CAC(v7, v8, v9, v10, v11, v1, v2, v3);
}

uint64_t sub_100105A7C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100105AB4()
{
  sub_10001DD48();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_10002AC58(v0);
  void *v1 = v2;
  v1[1] = sub_100105F74;
  uint64_t v3 = sub_100018558();
  return v4(v3);
}

unint64_t sub_100105B4C()
{
  unint64_t result = qword_10021F328;
  if (!qword_10021F328)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_10021F328);
  }
  return result;
}

uint64_t sub_100105B98(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10002572C(&qword_10021BF30);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_100105C00()
{
  sub_10001DD48();
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_10002AC58(v0);
  void *v1 = v2;
  v1[1] = sub_100105F74;
  uint64_t v3 = sub_100018558();
  return v4(v3);
}

ValueMetadata *type metadata accessor for ConfigurationController.ConfigError()
{
  return &type metadata for ConfigurationController.ConfigError;
}

unsigned char *_s7parsecd23ConfigurationControllerC11ConfigErrorOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100105D4CLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for BagFetchURL.Error()
{
  return &type metadata for BagFetchURL.Error;
}

uint64_t initializeBufferWithCopyOfBuffer for ConfigurationController.FeedbackContext(uint64_t a1, uint64_t a2)
{
  int v3 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  id v4 = v3;
  swift_unknownObjectRetain();
  return a1;
}

uint64_t destroy for ConfigurationController.FeedbackContext(id *a1)
{
  return swift_unknownObjectRelease();
}

uint64_t assignWithCopy for ConfigurationController.FeedbackContext(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  uint64_t v7 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 16) = v7;
  return a1;
}

uint64_t assignWithTake for ConfigurationController.FeedbackContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_unknownObjectRelease();
  *(void *)(a1 + 16) = v4;
  return a1;
}

ValueMetadata *type metadata accessor for ConfigurationController.FeedbackContext()
{
  return &type metadata for ConfigurationController.FeedbackContext;
}

unint64_t sub_100105ED4()
{
  unint64_t result = qword_10021F350;
  if (!qword_10021F350)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10021F350);
  }
  return result;
}

unint64_t sub_100105F24()
{
  unint64_t result = qword_10021F358;
  if (!qword_10021F358)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10021F358);
  }
  return result;
}

uint64_t sub_100105F90()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t *sub_100106030()
{
  uint64_t v1 = *v0;
  swift_slowDealloc();
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 80) - 8) + 8))((uint64_t)v0 + *(void *)(*v0 + 88));
  return v0;
}

uint64_t sub_1001060CC()
{
  sub_100106030();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v1, v2);
}

uint64_t type metadata accessor for AtomicProperty()
{
  return sub_100040C54();
}

uint64_t sub_10010613C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Dictionary.values.getter();
  type metadata accessor for Dictionary.Values();
  swift_getWitnessTable();
  uint64_t v4 = Array.init<A>(_:)();
  LOBYTE(a3) = sub_1001063FC(v4, a3);
  swift_bridgeObjectRelease();
  return a3 & 1;
}

uint64_t sub_1001061E0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = a1 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_10001C348(v2, (uint64_t)v15);
      sub_10001C348((uint64_t)v15, (uint64_t)v11);
      sub_10002572C(&qword_10021F4A0);
      if (swift_dynamicCast())
      {
        sub_10001C1AC(v9, (uint64_t)&v12);
        uint64_t v3 = *((void *)&v13 + 1);
        uint64_t v4 = v14;
        sub_10001B620(&v12, *((uint64_t *)&v13 + 1));
        char v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v3, v4);
        sub_10001CA50((uint64_t)&v12);
        if ((v5 & 1) == 0) {
          goto LABEL_15;
        }
      }
      else
      {
        uint64_t v10 = 0;
        memset(v9, 0, sizeof(v9));
        sub_100019938((uint64_t)v9, &qword_10021F4A8);
        sub_10001C348((uint64_t)v15, (uint64_t)&v12);
        sub_100023FA0(0, &qword_10021F4B0);
        uint64_t v6 = 0;
        if (swift_dynamicCast())
        {
          uint64_t v6 = *(void *)&v9[0];
        }
        sub_10001C348((uint64_t)v15, (uint64_t)&v12);
        if (v6)
        {
          sub_10001CA50((uint64_t)&v12);
        }
        else
        {
          sub_10003CA28(&v12, v9);
          sub_100023FA0(0, &qword_10021B9B0);
          if ((swift_dynamicCast() & 1) == 0)
          {
LABEL_15:
            swift_bridgeObjectRelease();
            sub_10003CA28(v15, &v12);
            uint64_t v7 = 0;
            goto LABEL_16;
          }
        }
      }
      sub_10001CA50((uint64_t)v15);
      v2 += 32;
      if (!--v1)
      {
        swift_bridgeObjectRelease();
        break;
      }
    }
  }
  long long v12 = 0u;
  long long v13 = 0u;
  uint64_t v7 = 1;
LABEL_16:
  sub_100019938((uint64_t)&v12, (uint64_t *)&unk_10021BB30);
  return v7;
}

BOOL sub_1001063FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = &v10[-v6];
  uint64_t v12 = a1;
  uint64_t v11 = a2;
  type metadata accessor for Array();
  swift_getWitnessTable();
  Sequence.first(where:)();
  BOOL v8 = sub_100027BA4((uint64_t)v7, 1, a2) == 1;
  (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
  return v8;
}

uint64_t sub_100106544(uint64_t a1)
{
  return sub_10010613C(*v1, *(void *)(a1 + 16), *(void *)(a1 + 24));
}

uint64_t sub_100106558(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 - 8);
  __chkstk_darwin(a1);
  uint64_t v6 = (char *)v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v23 - v8;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)v23 - v11;
  double v14 = __chkstk_darwin(v13);
  uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t, double))(v4 + 16);
  v15((char *)v23 - v16, a1, a2, v14);
  sub_10002572C(&qword_10021F4A0);
  if (swift_dynamicCast())
  {
    sub_10001C1AC(v23, (uint64_t)v25);
    uint64_t v17 = v26;
    uint64_t v18 = v27;
    sub_10001B620(v25, v26);
    char v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 8))(v17, v18) ^ 1;
    sub_10001CA50((uint64_t)v25);
  }
  else
  {
    uint64_t v24 = 0;
    memset(v23, 0, sizeof(v23));
    sub_100019938((uint64_t)v23, &qword_10021F4A8);
    ((void (*)(char *, uint64_t, uint64_t))v15)(v12, a1, a2);
    sub_100023FA0(0, &qword_10021F4B0);
    if (swift_dynamicCast())
    {
      id v20 = v25[0];

      ((void (*)(char *, uint64_t, uint64_t))v15)(v9, a1, a2);
      if (v20)
      {
        (*(void (**)(char *, uint64_t))(v4 + 8))(v9, a2);
        char v19 = 0;
        return v19 & 1;
      }
    }
    else
    {
      ((void (*)(char *, uint64_t, uint64_t))v15)(v9, a1, a2);
    }
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v9, a2);
    sub_100023FA0(0, &qword_10021B9B0);
    int v21 = swift_dynamicCast();
    if (v21) {

    }
    char v19 = v21 ^ 1;
  }
  return v19 & 1;
}

BOOL sub_100106840(uint64_t a1)
{
  return sub_1001063FC(*v1, *(void *)(a1 + 16));
}

uint64_t sub_100106850(uint64_t a1)
{
  return sub_100106558(a1, *(void *)(v1 + 16)) & 1;
}

uint64_t sub_100106870()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

unint64_t sub_100106934(unint64_t result)
{
  if (result >= 9) {
    return 9;
  }
  return result;
}

unint64_t sub_100106944@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100106934(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100106970()
{
  uint64_t v0 = qword_10021F4B8;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t sub_1001069A8()
{
  uint64_t v0 = aDiskwrite[0];
  swift_bridgeObjectRetain();
  return v0;
}

const char *sub_1001069E0()
{
  return sub_100029ABC(*v0);
}

uint64_t sub_100106A00(uint64_t a1, uint64_t a2)
{
  sub_10002572C(&qword_10021E000);
  uint64_t inited = (__n128 *)swift_initStackObject();
  sub_100026B18(inited, (__n128)xmmword_1001A3830);
  inited[3].n128_u64[0] = (unint64_t)[objc_allocWithZone((Class)NSNumber) initWithInteger:a1];
  strcpy(&inited[3].n128_i8[8], "feedbackType");
  inited[4].n128_u8[5] = 0;
  inited[4].n128_u16[3] = -5120;
  inited[4].n128_u64[1] = (unint64_t)[objc_allocWithZone((Class)NSNumber) initWithInt:a2];
  sub_10002FF38();
  return Dictionary.init(dictionaryLiteral:)();
}

uint64_t sub_100106AD8()
{
  return sub_100106A00(*(void *)v0, *(unsigned int *)(v0 + 8));
}

uint64_t sub_100106AE4()
{
  uint64_t v1 = *v0;
  swift_errorRelease();
  uint64_t v2 = (uint64_t)v0 + *(void *)(*v0 + 472);
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)(*(void *)(v1 + 448) - 8) + 8);

  return v3(v2);
}

uint64_t type metadata accessor for DiskWriteSpan()
{
  return sub_100040C54();
}

void type metadata accessor for DiskWriteActivity()
{
}

void type metadata accessor for BasicDiskOperationMetrics()
{
}

unint64_t sub_100106BAC(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100106BDC();
  unint64_t result = sub_100106C28();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_100106BDC()
{
  unint64_t result = qword_10021F560;
  if (!qword_10021F560)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10021F560);
  }
  return result;
}

unint64_t sub_100106C28()
{
  unint64_t result = qword_10021F568;
  if (!qword_10021F568)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10021F568);
  }
  return result;
}

unint64_t sub_100106C78()
{
  unint64_t result = qword_10021F570;
  if (!qword_10021F570)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10021F570);
  }
  return result;
}

uint64_t sub_100106CC4(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  *(void *)unint64_t result = v2;
  return result;
}

uint64_t sub_100106CD8(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 12)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_100106CF8(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_DWORD *)(result + 8) = 0;
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 12) = v3;
  return result;
}

void type metadata accessor for FeedbackDiskWriteMetrics()
{
}

uint64_t sub_100106D30(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF8)
  {
    if (a2 + 8 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 8) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 9;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 9;
  int v5 = v6 - 9;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *sub_100106DB8(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *unint64_t result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100106E84);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 8;
        break;
    }
  }
  return result;
}

void type metadata accessor for DiskWriteError()
{
}

unint64_t sub_100106EBC()
{
  unint64_t result = qword_10021F578;
  if (!qword_10021F578)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10021F578);
  }
  return result;
}

void *sub_100106F08(uint64_t a1, uint64_t a2)
{
  uint64_t v17 = 1;
  unsigned int v4 = (void *)swift_allocObject();
  _OWORD v4[2] = &v17;
  v4[3] = a1;
  void v4[4] = a2;
  uint64_t v5 = (void *)swift_allocObject();
  v5[2] = sub_100108798;
  void v5[3] = v4;
  void v16[4] = sub_100017870;
  v16[5] = v5;
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 1107296256;
  v16[2] = sub_100017848;
  v16[3] = &unk_100201778;
  unsigned int v6 = _Block_copy(v16);
  swift_retain();
  swift_release();
  BOOL v7 = (void (*)(void))v6[2];
  uint64_t v8 = v6;
  v7();
  id v9 = 0;
  while (1)
  {

    id v10 = v9;
    _Block_release((const void *)v8);
    uint64_t v8 = sub_100025B50();
    uint64_t v11 = (void *)swift_release();
    if (v8)
    {
      __break(1u);
      goto LABEL_9;
    }
    if (v10)
    {
      id v12 = v10;
      sub_100024B54();
      sub_10004B198();
      uint64_t v13 = swift_allocError();
      sub_10002A5AC(v13, v14);

      sub_1001087B0((id)v17);
      swift_release();
      return v5;
    }
    uint64_t v5 = (void *)v17;
    if (v17 != 1) {
      break;
    }
LABEL_9:
    __break(1u);
    id v9 = objc_begin_catch(v11);
    objc_end_catch();
  }
  swift_release();
  return v5;
}

id sub_1001070EC(uint64_t a1, uint64_t a2)
{
  long long v16 = xmmword_1001A9580;
  char v17 = 0;
  unsigned int v4 = (void *)swift_allocObject();
  _OWORD v4[2] = &v16;
  v4[3] = a1;
  void v4[4] = a2;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = sub_1001085EC;
  *(void *)(v5 + 24) = v4;
  v15[4] = sub_100017874;
  v15[5] = v5;
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 1107296256;
  _OWORD v15[2] = sub_100017848;
  void v15[3] = &unk_100201660;
  unsigned int v6 = _Block_copy(v15);
  swift_retain();
  swift_release();
  BOOL v7 = (void (*)(void))v6[2];
  uint64_t isEscapingClosureAtFileLocation = v6;
  v7();
  id v9 = 0;
  while (1)
  {

    id v10 = v9;
    _Block_release((const void *)isEscapingClosureAtFileLocation);
    uint64_t isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    uint64_t v11 = (void *)swift_release();
    if (isEscapingClosureAtFileLocation)
    {
      __break(1u);
      goto LABEL_9;
    }
    if (v10)
    {
      id v12 = v10;
      Incident.reportTelemetry()();
      sub_10004B198();
      swift_allocError();
      *(void *)uint64_t v13 = v10;
      *(void *)(v13 + 8) = 0;
      *(unsigned char *)(v13 + 16) = 0;
      swift_willThrow();

      sub_10007D7F8(v16, *((uint64_t *)&v16 + 1));
      swift_release();
      return v10;
    }
    if (*((void *)&v16 + 1) != 1) {
      break;
    }
LABEL_9:
    __break(1u);
    id v9 = objc_begin_catch(v11);
    objc_end_catch();
  }
  id v10 = (id)v16;
  swift_release();
  return v10;
}

void sub_100107328(void **a1, void (*a2)(void **__return_ptr))
{
  a2(&v4);
  int v3 = *a1;
  *a1 = v4;

  sub_1001087B0(v3);
}

uint64_t sub_10010737C(uint64_t a1, void (*a2)(void *__return_ptr))
{
  a2(v7);
  uint64_t v3 = v7[0];
  uint64_t v4 = v7[1];
  char v5 = v8;
  uint64_t result = sub_10007D7F8(*(void *)a1, *(void *)(a1 + 8));
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return result;
}

uint64_t sub_1001073D8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(v2 + OBJC_IVAR____TtC7parsecd28StorefrontIdentifierProvider_storefrontIdentifier);
  void *v3 = a1;
  v3[1] = a2;
  swift_bridgeObjectRelease();

  return sub_1001125B4();
}

uint64_t sub_100107418@<X0>(void *a1@<X8>)
{
  if (qword_100218B60 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_10002A10C(v3, (uint64_t)qword_100236A38);
  uint64_t v4 = v1;
  char v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v5, v6))
  {
    BOOL v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    *(_DWORD *)BOOL v7 = 136315138;
    char v8 = (uint64_t *)&v4[OBJC_IVAR____TtC7parsecd28StorefrontIdentifierProvider_storefrontIdentifier];
    if (*(void *)&v4[OBJC_IVAR____TtC7parsecd28StorefrontIdentifierProvider_storefrontIdentifier + 8])
    {
      uint64_t v9 = *v8;
      unint64_t v10 = v8[1];
    }
    else
    {
      unint64_t v10 = 0xE300000000000000;
      uint64_t v9 = 7104878;
    }
    swift_bridgeObjectRetain();
    sub_10001C274(v9, v10, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "updating storefrontIdentifier: %s", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v11 = *(void *)&v4[OBJC_IVAR____TtC7parsecd28StorefrontIdentifierProvider_storefrontIdentifier + 8];
  *a1 = *(void *)&v4[OBJC_IVAR____TtC7parsecd28StorefrontIdentifierProvider_storefrontIdentifier];
  a1[1] = v11;
  type metadata accessor for ContextUpdate(0);
  swift_storeEnumTagMultiPayload();
  return swift_bridgeObjectRetain();
}

uint64_t sub_100107618()
{
  swift_retain();
  uint64_t v0 = sub_1000809C4();
  swift_release();
  return v0;
}

uint64_t sub_100107674()
{
  swift_retain();
  sub_100082354();

  return swift_release();
}

uint64_t sub_1001076DC()
{
  swift_bridgeObjectRetain();
  sub_100107674();
  v16[0] = *(void *)(v0 + OBJC_IVAR____TtC7parsecd28StorefrontIdentifierProvider_queue);
  uint64_t v1 = swift_allocObject();
  swift_unknownObjectWeakInit();
  void aBlock[4] = sub_1001086A0;
  aBlock[5] = v1;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000085EC;
  aBlock[3] = &unk_1002016B0;
  uint64_t v2 = _Block_copy(aBlock);
  uint64_t v3 = type metadata accessor for DispatchQoS();
  sub_100020C48();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  char v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags();
  sub_100020C48();
  uint64_t v11 = v10;
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)v16 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16[1] = _swiftEmptyArrayStorage;
  sub_10003045C();
  sub_10002572C((uint64_t *)&unk_10021BAF0);
  sub_1000301A0();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v2);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v9);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v3);
  swift_release();
  return swift_release();
}

void sub_100107938()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = (char *)Strong;
    if (swift_unknownObjectWeakLoadStrong())
    {
      uint64_t v2 = sub_100107618();
      if (v3)
      {
        uint64_t v5 = v2;
        uint64_t v6 = v3;
        char v7 = v4;
        uint64_t v8 = *(void *)&v1[OBJC_IVAR____TtC7parsecd28StorefrontIdentifierProvider_storefrontIdentifier + 8];
        if (v8
          && (*(void *)&v1[OBJC_IVAR____TtC7parsecd28StorefrontIdentifierProvider_storefrontIdentifier] == v2
            ? (BOOL v9 = v8 == v6)
            : (BOOL v9 = 0),
              v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
        {

          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
          char v10 = v7 & 1;
          swift_bridgeObjectRetain();
          sub_1001073D8(v5, v6);
          id v11 = [self defaultCenter];
          if (qword_100218AB0 != -1) {
            swift_once();
          }
          uint64_t v12 = qword_100236850;
          sub_10002572C((uint64_t *)&unk_10021BAE0);
          uint64_t inited = swift_initStackObject();
          *(_OWORD *)(inited + 16) = xmmword_1001A2A20;
          AnyHashable.init<A>(_:)();
          *(void *)(inited + 96) = &type metadata for StorefrontAccount;
          *(void *)(inited + 72) = v5;
          *(void *)(inited + 80) = v6;
          *(unsigned char *)(inited + 88) = v10;
          uint64_t v14 = Dictionary.init(dictionaryLiteral:)();
          sub_10010553C(v12, 0, v14, v11);

          swift_unknownObjectRelease();
        }
      }
      else
      {

        swift_unknownObjectRelease();
      }
    }
    else
    {
    }
  }
}

void sub_100107B5C()
{
}

id sub_100107B9C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for StorefrontIdentifierProvider();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for StorefrontIdentifierProvider()
{
  return self;
}

void sub_100107C74()
{
  if (swift_unknownObjectWeakLoadStrong())
  {
    id v1 = sub_1001086A8(v0);
    uint64_t v2 = OBJC_IVAR____TtC7parsecd19AppleAccountMonitor_monitoredAccountStore;
    uint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC7parsecd19AppleAccountMonitor_monitoredAccountStore);
    *(void *)(v0 + OBJC_IVAR____TtC7parsecd19AppleAccountMonitor_monitoredAccountStore) = v1;

    char v4 = *(void **)(v0 + v2);
    if (v4)
    {
      uint64_t v5 = swift_allocObject();
      swift_unknownObjectWeakInit();
      void v8[4] = sub_100108744;
      v8[5] = v5;
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 1107296256;
      v8[2] = sub_1001082B0;
      v8[3] = &unk_100201700;
      uint64_t v6 = _Block_copy(v8);
      id v7 = v4;
      swift_release();
      [v7 registerWithCompletion:v6];
      swift_unknownObjectRelease();
      _Block_release(v6);
    }
    else
    {
      swift_unknownObjectRelease();
    }
  }
}

void sub_100107DCC(unint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (!Strong) {
    return;
  }
  uint64_t v5 = (void *)Strong;
  if (a2)
  {
    swift_errorRetain();
    if (qword_100218B60 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_10002A10C(v6, (uint64_t)qword_100236A38);
    swift_errorRetain();
    swift_errorRetain();
    id v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      BOOL v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v15 = swift_slowAlloc();
      *(_DWORD *)BOOL v9 = 136315138;
      swift_errorRetain();
      sub_10002572C(&qword_10021B3C0);
      uint64_t v10 = String.init<A>(describing:)();
      sub_10001C274(v10, v11, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Failed to register for account updates: %s", v9, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
      return;
    }
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();

    goto LABEL_14;
  }
  if (!a1)
  {
LABEL_14:

    return;
  }
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    if (_CocoaArrayWrapper.endIndex.getter()) {
      goto LABEL_10;
    }
LABEL_17:

    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v12 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v12) {
    goto LABEL_17;
  }
LABEL_10:
  sub_100065188(0, (a1 & 0xC000000000000001) == 0, a1);
  if ((a1 & 0xC000000000000001) != 0) {
    id v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    id v13 = *(id *)(a1 + 32);
  }
  uint64_t v14 = v13;
  swift_bridgeObjectRelease();
  sub_100108094((uint64_t)v14);
}

id sub_100108094(uint64_t a1)
{
  v3[2] = a1;
  id result = sub_1001070EC((uint64_t)sub_100108560, (uint64_t)v3);
  if (v2)
  {
    sub_1001076DC();
    return (id)swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1001082B0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  if (a2)
  {
    sub_10010874C();
    uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  swift_retain();
  id v6 = a3;
  v5(v4, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

void sub_100108344()
{
}

id sub_100108354()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v2 = *(void **)&v0[OBJC_IVAR____TtC7parsecd19AppleAccountMonitor_monitoredAccountStore];
  if (v2) {
    [v2 removeDelegate:v0];
  }
  v4.receiver = v0;
  v4.super_class = ObjectType;
  return objc_msgSendSuper2(&v4, "dealloc");
}

uint64_t type metadata accessor for AppleAccountMonitor()
{
  return self;
}

uint64_t getEnumTagSinglePayload for StorefrontAccount(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 17))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for StorefrontAccount(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)id result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 17) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for StorefrontAccount()
{
  return &type metadata for StorefrontAccount;
}

id sub_100108510@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_100108604(a1);
  uint64_t v6 = v5;
  id result = objc_msgSend(a1, "aa_isManagedAppleID");
  *(void *)a2 = v4;
  *(void *)(a2 + 8) = v6;
  *(unsigned char *)(a2 + 16) = (_BYTE)result;
  return result;
}

id sub_100108560@<X0>(uint64_t a1@<X8>)
{
  return sub_100108510(*(void **)(v1 + 16), a1);
}

id sub_100108568(uint64_t a1, uint64_t a2)
{
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v5 = [v2 initWithAccountTypes:isa delegate:a2];

  swift_unknownObjectRelease();
  return v5;
}

uint64_t sub_1001085E0()
{
  return sub_100026898(v0, 40);
}

uint64_t sub_1001085EC()
{
  return sub_10010737C(*(void *)(v0 + 16), *(void (**)(void *__return_ptr))(v0 + 24));
}

uint64_t sub_1001085F8()
{
  return sub_100026898(v0, 32);
}

uint64_t sub_100108604(void *a1)
{
  id v1 = objc_msgSend(a1, "ams_storefront");
  if (!v1) {
    return 0;
  }
  unint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_100108668()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_1001086A0()
{
}

id sub_1001086A8(uint64_t a1)
{
  sub_10002572C(&qword_10021ACF8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1001A2A20;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v3;
  uint64_t v4 = sub_1000EE584(inited);
  objc_allocWithZone((Class)ACMonitoredAccountStore);
  swift_unknownObjectRetain();
  return sub_100108568(v4, a1);
}

void sub_100108744(unint64_t a1, uint64_t a2)
{
}

unint64_t sub_10010874C()
{
  unint64_t result = qword_10021F668;
  if (!qword_10021F668)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10021F668);
  }
  return result;
}

uint64_t sub_10010878C()
{
  return sub_100026898(v0, 40);
}

void sub_100108798()
{
  sub_100107328(*(void ***)(v0 + 16), *(void (**)(void **__return_ptr))(v0 + 24));
}

uint64_t sub_1001087A4()
{
  return sub_100026898(v0, 32);
}

void sub_1001087B0(id a1)
{
  if (a1 != (id)1) {
}
  }

uint64_t sub_1001087C0()
{
  return sub_100026898(v0, 40);
}

uint64_t sub_1001087CC()
{
  return sub_100026898(v0, 32);
}

uint64_t SessionFilename.__allocating_init(fromString:)(uint64_t a1, unint64_t a2)
{
  return SessionFilename.init(fromString:)(a1, a2);
}

parsecd::SessionFilename::SessionFileState_optional __swiftcall SessionFilename.SessionFileState.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001F9E60, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4) {
    return (parsecd::SessionFilename::SessionFileState_optional)4;
  }
  else {
    return (parsecd::SessionFilename::SessionFileState_optional)v3;
  }
}

uint64_t SessionFilename.SessionFileState.rawValue.getter(char a1)
{
  uint64_t result = 1852141679;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x6465736F6C63;
      break;
    case 2:
      uint64_t result = 0x69737365636F7270;
      break;
    case 3:
      uint64_t result = 0x646564616F6C7075;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100108924(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1000B97A4(*a1, *a2);
}

Swift::Int sub_100108930()
{
  return sub_1000B3C6C();
}

uint64_t sub_100108938()
{
  return sub_1000B3E28();
}

Swift::Int sub_100108940()
{
  return sub_1000B3F70();
}

parsecd::SessionFilename::SessionFileState_optional sub_100108948@<W0>(Swift::String *a1@<X0>, parsecd::SessionFilename::SessionFileState_optional *a2@<X8>)
{
  result.value = SessionFilename.SessionFileState.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t sub_100108978@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = SessionFilename.SessionFileState.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t SessionFilename.sessionID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC7parsecd15SessionFilename_sessionID;
  sub_10002845C();
  type metadata accessor for UUID();
  sub_10001DCF8();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 16))(a1, v3);
}

uint64_t SessionFilename.sessionID.setter(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC7parsecd15SessionFilename_sessionID;
  swift_beginAccess();
  type metadata accessor for UUID();
  sub_10001DCF8();
  (*(void (**)(uint64_t, uint64_t))(v4 + 40))(v3, a1);
  return swift_endAccess();
}

uint64_t (*SessionFilename.sessionID.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t SessionFilename.processID.getter()
{
  sub_100024B74();
  return *v0;
}

uint64_t SessionFilename.processID.setter(int a1)
{
  uint64_t v3 = (_DWORD *)(v1 + OBJC_IVAR____TtC7parsecd15SessionFilename_processID);
  uint64_t result = sub_10002A5CC();
  _DWORD *v3 = a1;
  return result;
}

uint64_t (*SessionFilename.processID.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t SessionFilename.state.getter()
{
  sub_100024B74();
  return *v0;
}

uint64_t SessionFilename.state.setter(char a1)
{
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC7parsecd15SessionFilename_state);
  uint64_t result = sub_10002A5CC();
  unsigned char *v3 = a1;
  return result;
}

uint64_t (*SessionFilename.state.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t SessionFilename.uploadPending.getter()
{
  sub_100024B74();
  return *v0;
}

uint64_t SessionFilename.uploadPending.setter(char a1)
{
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC7parsecd15SessionFilename_uploadPending);
  uint64_t result = sub_10002A5CC();
  unsigned char *v3 = a1;
  return result;
}

uint64_t (*SessionFilename.uploadPending.modify())()
{
  return j__swift_endAccess;
}

uint64_t SessionFilename.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  SessionFilename.init()();
  return v0;
}

uint64_t SessionFilename.init()()
{
  UUID.init()();
  uint64_t v1 = OBJC_IVAR____TtC7parsecd15SessionFilename_processID;
  id v2 = [self processInfo];
  unsigned int v3 = [v2 processIdentifier];

  *(_DWORD *)(v0 + v1) = v3;
  *(unsigned char *)(v0 + OBJC_IVAR____TtC7parsecd15SessionFilename_state) = 0;
  *(unsigned char *)(v0 + OBJC_IVAR____TtC7parsecd15SessionFilename_uploadPending) = 0;
  return v0;
}

uint64_t SessionFilename.__allocating_init(fromUserGUID:state:processID:uploadPending:)(uint64_t a1, uint64_t a2, char a3, unint64_t a4, char a5)
{
  return SessionFilename.init(fromUserGUID:state:processID:uploadPending:)(a1, a2, a3, a4 | ((HIDWORD(a4) & 1) << 32), a5);
}

uint64_t SessionFilename.init(fromString:)(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_10002572C((uint64_t *)&unk_10021E620);
  __chkstk_darwin(v6 - 8);
  sub_10000DFD0();
  uint64_t v9 = v8 - v7;
  uint64_t v10 = type metadata accessor for UUID();
  sub_100020C48();
  uint64_t v70 = v11;
  __chkstk_darwin(v12);
  sub_10000DFD0();
  uint64_t v69 = v14 - v13;
  uint64_t v66 = v2 + OBJC_IVAR____TtC7parsecd15SessionFilename_sessionID;
  UUID.init()();
  uint64_t v15 = (unsigned int *)(v2 + OBJC_IVAR____TtC7parsecd15SessionFilename_processID);
  id v16 = [self processInfo];
  unsigned int v17 = [v16 processIdentifier];

  uint64_t v68 = v15;
  *uint64_t v15 = v17;
  uint64_t v65 = (parsecd::SessionFilename::SessionFileState *)(v3 + OBJC_IVAR____TtC7parsecd15SessionFilename_state);
  *(unsigned char *)(v3 + OBJC_IVAR____TtC7parsecd15SessionFilename_state) = 0;
  uint64_t v67 = (Swift::Bool *)(v3 + OBJC_IVAR____TtC7parsecd15SessionFilename_uploadPending);
  *(unsigned char *)(v3 + OBJC_IVAR____TtC7parsecd15SessionFilename_uploadPending) = 0;
  uint64_t v76 = 46;
  uint64_t v77 = 0xE100000000000000;
  uint64_t v74 = &v76;
  swift_bridgeObjectRetain_n();
  uint64_t v18 = sub_10001F318(0x7FFFFFFFFFFFFFFFLL, 1u, sub_100067E7C, (uint64_t)v73, a1, a2);
  swift_bridgeObjectRelease();
  uint64_t v19 = *(void *)(v18 + 16);
  if (v19)
  {
    uint64_t v71 = v9;
    uint64_t v72 = v10;
    uint64_t v76 = (uint64_t)_swiftEmptyArrayStorage;
    sub_1000EE464();
    id v20 = (void *)v76;
    uint64_t v21 = v18 + 56;
    do
    {
      swift_bridgeObjectRetain();
      uint64_t v22 = static String._fromSubstring(_:)();
      uint64_t v24 = v23;
      swift_bridgeObjectRelease();
      uint64_t v76 = (uint64_t)v20;
      unint64_t v25 = v20[2];
      if (v25 >= v20[3] >> 1)
      {
        sub_1000EE464();
        id v20 = (void *)v76;
      }
      v20[2] = v25 + 1;
      uint64_t v26 = &v20[2 * v25];
      v26[4] = v22;
      void v26[5] = v24;
      v21 += 32;
      --v19;
    }
    while (v19);
    swift_bridgeObjectRelease();
    uint64_t v9 = v71;
    uint64_t v10 = v72;
  }
  else
  {
    swift_bridgeObjectRelease();
    id v20 = _swiftEmptyArrayStorage;
  }
  if (v20[2] >= 4uLL)
  {
    sub_100027F44();
    uint64_t result = v20[4];
    BOOL v29 = result == v28 && v20[5] == 0xE700000000000000;
    if (v29 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
      uint64_t v30 = v20[6];
      unint64_t v31 = v20[7];
      uint64_t v32 = HIBYTE(v31) & 0xF;
      uint64_t v33 = v30 & 0xFFFFFFFFFFFFLL;
      if ((v31 & 0x2000000000000000) != 0) {
        uint64_t v34 = HIBYTE(v31) & 0xF;
      }
      else {
        uint64_t v34 = v30 & 0xFFFFFFFFFFFFLL;
      }
      if (v34)
      {
        if ((v31 & 0x1000000000000000) == 0)
        {
          if ((v31 & 0x2000000000000000) == 0)
          {
            if ((v30 & 0x1000000000000000) == 0) {
              goto LABEL_78;
            }
            for (unint64_t i = (unsigned __int8 *)((v31 & 0xFFFFFFFFFFFFFFFLL) + 32);
                  ;
                  unint64_t i = (unsigned __int8 *)_StringObject.sharedUTF8.getter())
            {
              long long v36 = sub_100109794(i, v33, 10);
              char v75 = BYTE4(v36) & 1;
              LOBYTE(v32) = BYTE4(v36) & 1;
              LODWORD(v37) = v36;
LABEL_59:
              if (v32) {
                break;
              }
LABEL_60:
              if (v20[2] >= 3uLL)
              {
                swift_bridgeObjectRetain();
                UUID.init(uuidString:)();
                swift_bridgeObjectRelease();
                if (sub_100027BA4(v9, 1, v10) == 1)
                {
                  swift_release();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  sub_1000BD6F4(v9);
                  return 0;
                }
                uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v70 + 32))(v69, v9, v10);
                if (v20[2] < 4uLL)
                {
                  __break(1u);
                  goto LABEL_81;
                }
                uint64_t v55 = v20[10];
                uint64_t v56 = (void *)v20[11];
                swift_bridgeObjectRetain();
                swift_bridgeObjectRelease();
                v57._uint64_t countAndFlagsBits = v55;
                v57._object = v56;
                v58.parsecd::SessionFilename::SessionFileState value = SessionFilename.SessionFileState.init(rawValue:)(v57).value;
                if (v58.value == parsecd_SessionFilename_SessionFileState_unknownDefault)
                {
                  (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v69, v10);
                  swift_release();
                  goto LABEL_24;
                }
                parsecd::SessionFilename::SessionFileState value = v58.value;
                swift_beginAccess();
                (*(void (**)(uint64_t, uint64_t, uint64_t))(v70 + 24))(v66, v69, v10);
                swift_endAccess();
                sub_10002A5CC();
                unsigned int *v68 = v37;
                sub_10002A5CC();
                *uint64_t v65 = value;
                v60._uint64_t countAndFlagsBits = 0x5064616F6C70752ELL;
                v60._object = (void *)0xEE00676E69646E65;
                Swift::Bool v61 = String.hasSuffix(_:)(v60);
                swift_bridgeObjectRelease();
                (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v69, v10);
                sub_10002A5CC();
                Swift::Bool *v67 = v61;
                return v3;
              }
              __break(1u);
LABEL_78:
              ;
            }
            goto LABEL_74;
          }
          uint64_t v76 = v20[6];
          uint64_t v77 = v31 & 0xFFFFFFFFFFFFFFLL;
          if (v30 == 43)
          {
            if (!v32) {
              goto LABEL_82;
            }
            if (v32 == 1) {
              goto LABEL_79;
            }
            LODWORD(v37) = (BYTE1(v30) - 48);
            if (v37 > 9) {
              goto LABEL_46;
            }
            if (v32 != 2)
            {
              sub_100017FD8();
              if (!v29 & v41) {
                goto LABEL_46;
              }
              LODWORD(v37) = 10 * v37 + v43;
              uint64_t v44 = v42 - 3;
              if (v42 != 3)
              {
                uint64_t v45 = (unsigned __int8 *)&v76 + 3;
                while (1)
                {
                  unsigned int v46 = *v45 - 48;
                  if (v46 > 9) {
                    goto LABEL_46;
                  }
                  uint64_t v47 = 10 * (int)v37;
                  if (v47 != (int)v47) {
                    goto LABEL_46;
                  }
                  LODWORD(v37) = v47 + v46;
                  if (__OFADD__(v47, v46)) {
                    goto LABEL_46;
                  }
                  LOBYTE(v32) = 0;
                  ++v45;
                  if (!--v44) {
                    goto LABEL_59;
                  }
                }
              }
            }
          }
          else
          {
            if (v30 == 45)
            {
              if (v32)
              {
                if (v32 != 1)
                {
                  sub_100017FD8();
                  if (!(!v29 & v41))
                  {
                    if (v38 == 2)
                    {
                      LOBYTE(v32) = 0;
                      LODWORD(v37) = -v40;
                      goto LABEL_59;
                    }
                    if ((BYTE2(v30) - 48) <= 9u)
                    {
                      LODWORD(v37) = -10 * v39 - (BYTE2(v30) - 48);
                      uint64_t v54 = v38 - 3;
                      if (v38 == 3) {
                        goto LABEL_58;
                      }
                      uint64_t v62 = (unsigned __int8 *)&v76 + 3;
                      while (1)
                      {
                        unsigned int v63 = *v62 - 48;
                        if (v63 > 9) {
                          break;
                        }
                        uint64_t v64 = 10 * (int)v37;
                        if (v64 != (int)v64) {
                          break;
                        }
                        LODWORD(v37) = v64 - v63;
                        if (__OFSUB__(v64, v63)) {
                          break;
                        }
                        LOBYTE(v32) = 0;
                        ++v62;
                        if (!--v54) {
                          goto LABEL_59;
                        }
                      }
                    }
                  }
LABEL_46:
                  LODWORD(v37) = 0;
                  LOBYTE(v32) = 1;
                  goto LABEL_59;
                }
LABEL_79:
                LODWORD(v37) = 0;
                goto LABEL_59;
              }
LABEL_81:
              __break(1u);
LABEL_82:
              __break(1u);
              return result;
            }
            if (!v32) {
              goto LABEL_46;
            }
            LODWORD(v37) = (v30 - 48);
            if (v37 > 9) {
              goto LABEL_46;
            }
            if (v32 != 1)
            {
              sub_100017FD8();
              if (!v29 & v41) {
                goto LABEL_46;
              }
              LODWORD(v37) = 10 * v37 + v49;
              uint64_t v50 = v48 - 2;
              if (v48 != 2)
              {
                uint64_t v51 = (unsigned __int8 *)&v76 + 2;
                while (1)
                {
                  unsigned int v52 = *v51 - 48;
                  if (v52 > 9) {
                    goto LABEL_46;
                  }
                  uint64_t v53 = 10 * (int)v37;
                  if (v53 != (int)v53) {
                    goto LABEL_46;
                  }
                  LODWORD(v37) = v53 + v52;
                  if (__OFADD__(v53, v52)) {
                    goto LABEL_46;
                  }
                  LOBYTE(v32) = 0;
                  ++v51;
                  if (!--v50) {
                    goto LABEL_59;
                  }
                }
              }
            }
          }
LABEL_58:
          LOBYTE(v32) = 0;
          goto LABEL_59;
        }
        swift_bridgeObjectRetain();
        uint64_t v37 = sub_1001096AC(v30, v31, 10);
        swift_bridgeObjectRelease();
        if ((v37 & 0x100000000) == 0) {
          goto LABEL_60;
        }
      }
LABEL_74:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      return 0;
    }
  }
  swift_release();
  swift_bridgeObjectRelease();
LABEL_24:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t SessionFilename.deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC7parsecd15SessionFilename_sessionID;
  type metadata accessor for UUID();
  sub_10001DCF8();
  (*(void (**)(uint64_t))(v2 + 8))(v1);
  return v0;
}

void *sub_100109644(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  sub_10002572C(&qword_10021AC58);
  uint64_t v4 = (void *)swift_allocObject();
  size_t v5 = j__malloc_size(v4);
  _OWORD v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_1001096AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = a1;
  uint64_t v14 = a2;
  swift_bridgeObjectRetain();
  uint64_t v5 = String.init<A>(_:)();
  unint64_t v6 = v4;
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v8 = HIBYTE(v6) & 0xF;
    uint64_t v13 = v5;
    uint64_t v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }
  uint64_t v5 = sub_100109A14();
  unint64_t v10 = v9;
  swift_bridgeObjectRelease();
  unint64_t v6 = v10;
  if ((v10 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v5 & 0x1000000000000000) != 0)
  {
    uint64_t v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v7 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  uint64_t v11 = sub_100109794(v7, v8, a3);
  swift_bridgeObjectRelease();
  return v11 | ((((unint64_t)v11 >> 32) & 1) << 32);
}

unsigned __int8 *sub_100109794(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  int v3 = *result;
  if (v3 == 43)
  {
    if (a2 >= 1)
    {
      uint64_t v16 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v17 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v18 = a3 + 55;
        }
        else
        {
          unsigned __int8 v17 = 97;
          unsigned __int8 v18 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v19 = a3 + 48;
        }
        else {
          unsigned __int8 v19 = 58;
        }
        if (result)
        {
          unsigned int v8 = 0;
          id v20 = result + 1;
          do
          {
            unsigned int v21 = *v20;
            if (v21 < 0x30 || v21 >= v19)
            {
              if (v21 < 0x41 || v21 >= v18)
              {
                unsigned int v12 = 0;
                unsigned __int8 v13 = 1;
                if (v21 < 0x61 || v21 >= v17) {
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                }
                char v22 = -87;
              }
              else
              {
                char v22 = -55;
              }
            }
            else
            {
              char v22 = -48;
            }
            uint64_t v23 = (int)v8 * (uint64_t)(int)a3;
            if (v23 != (int)v23) {
              goto LABEL_72;
            }
            unsigned __int8 v24 = v21 + v22;
            unsigned int v8 = v23 + v24;
            if (__OFADD__(v23, v24)) {
              goto LABEL_72;
            }
            ++v20;
            --v16;
          }
          while (v16);
LABEL_48:
          unsigned __int8 v13 = 0;
          unsigned int v12 = v8;
          return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
        }
        goto LABEL_71;
      }
LABEL_72:
      unsigned int v12 = 0;
      unsigned __int8 v13 = 1;
      return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
    }
  }
  else
  {
    if (v3 != 45)
    {
      if (a2)
      {
        unsigned __int8 v25 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v26 = a3 + 55;
        }
        else
        {
          unsigned __int8 v25 = 97;
          unsigned __int8 v26 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v27 = a3 + 48;
        }
        else {
          unsigned __int8 v27 = 58;
        }
        if (result)
        {
          unsigned int v28 = 0;
          do
          {
            unsigned int v29 = *result;
            if (v29 < 0x30 || v29 >= v27)
            {
              if (v29 < 0x41 || v29 >= v26)
              {
                unsigned int v12 = 0;
                unsigned __int8 v13 = 1;
                if (v29 < 0x61 || v29 >= v25) {
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                }
                char v30 = -87;
              }
              else
              {
                char v30 = -55;
              }
            }
            else
            {
              char v30 = -48;
            }
            uint64_t v31 = (int)v28 * (uint64_t)(int)a3;
            if (v31 != (int)v31) {
              goto LABEL_72;
            }
            unsigned __int8 v32 = v29 + v30;
            unsigned int v28 = v31 + v32;
            if (__OFADD__(v31, v32)) {
              goto LABEL_72;
            }
            ++result;
            --a2;
          }
          while (a2);
          unsigned __int8 v13 = 0;
          unsigned int v12 = v28;
          return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
        }
        goto LABEL_71;
      }
      goto LABEL_72;
    }
    if (a2 >= 1)
    {
      uint64_t v4 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v5 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v6 = a3 + 55;
        }
        else
        {
          unsigned __int8 v5 = 97;
          unsigned __int8 v6 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v7 = a3 + 48;
        }
        else {
          unsigned __int8 v7 = 58;
        }
        if (result)
        {
          unsigned int v8 = 0;
          unint64_t v9 = result + 1;
          while (1)
          {
            unsigned int v10 = *v9;
            if (v10 < 0x30 || v10 >= v7)
            {
              if (v10 < 0x41 || v10 >= v6)
              {
                unsigned int v12 = 0;
                unsigned __int8 v13 = 1;
                if (v10 < 0x61 || v10 >= v5) {
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                }
                char v11 = -87;
              }
              else
              {
                char v11 = -55;
              }
            }
            else
            {
              char v11 = -48;
            }
            uint64_t v14 = (int)v8 * (uint64_t)(int)a3;
            if (v14 != (int)v14) {
              goto LABEL_72;
            }
            unsigned __int8 v15 = v10 + v11;
            unsigned int v8 = v14 - v15;
            if (__OFSUB__(v14, v15)) {
              goto LABEL_72;
            }
            ++v9;
            if (!--v4) {
              goto LABEL_48;
            }
          }
        }
LABEL_71:
        unsigned int v12 = 0;
        unsigned __int8 v13 = 0;
        return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
      }
      goto LABEL_72;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100109A14()
{
  unint64_t v0 = sub_100109A80();
  uint64_t v4 = sub_100109AB4(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_100109A80()
{
  return String.subscript.getter();
}

uint64_t sub_100109AB4(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if ((a4 & 0x1000000000000000) != 0)
  {
    uint64_t v9 = sub_100109C0C(a1, a2, a3, a4);
    if (!v9
      || (uint64_t v10 = v9,
          char v11 = sub_100109644(v9, 0),
          unint64_t v12 = sub_100109D0C((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4),
          swift_bridgeObjectRetain(),
          swift_bridgeObjectRelease(),
          v12 == v10))
    {
      uint64_t v13 = static String._uncheckedFromUTF8(_:)();
      swift_release();
      return v13;
    }
    __break(1u);
  }
  else
  {
    if ((a4 & 0x2000000000000000) != 0)
    {
      v14[0] = a3;
      v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
      return static String._uncheckedFromUTF8(_:)();
    }
    if ((a3 & 0x1000000000000000) != 0) {
      goto LABEL_4;
    }
  }
  _StringObject.sharedUTF8.getter();
LABEL_4:

  return static String._uncheckedFromUTF8(_:)();
}

uint64_t sub_100109C0C(uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7 = result;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0) {
    LOBYTE(v8) = 1;
  }
  uint64_t v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    uint64_t result = sub_1000F94F4(result, a3, a4);
    unint64_t v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    uint64_t result = sub_1000F94F4(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0) {
      return (a2 >> 16) - (v7 >> 16);
    }
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  unint64_t v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0) {
    unint64_t v10 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v10 < v7 >> 16)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v10 < a2 >> 16)
  {
LABEL_17:
    __break(1u);
    return result;
  }

  return String.UTF8View._foreignDistance(from:to:)();
}

unint64_t sub_100109D0C(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  uint64_t v9 = (void *)result;
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
    unint64_t v12 = a4;
    uint64_t v11 = 0;
    goto LABEL_35;
  }
  if (a3 < 0) {
    goto LABEL_38;
  }
  unint64_t v10 = a5 >> 14;
  unint64_t v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    uint64_t v11 = 0;
    unint64_t v12 = a4;
LABEL_35:
    *uint64_t v9 = a4;
    v9[1] = a5;
    long long v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  uint64_t v11 = 0;
  uint64_t v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0) {
    LOBYTE(v14) = 1;
  }
  uint64_t v15 = 4 << v14;
  uint64_t v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0) {
    uint64_t v16 = a6 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v23 = v16;
  uint64_t v26 = a3 - 1;
  unint64_t v12 = a4;
  while (1)
  {
    uint64_t result = v12;
    if ((v12 & 0xC) == v15) {
      uint64_t result = sub_1000F94F4(v12, a6, a7);
    }
    if (result >> 14 < v27 || result >> 14 >= v10) {
      break;
    }
    if ((a7 & 0x1000000000000000) != 0)
    {
      uint64_t result = String.UTF8View._foreignSubscript(position:)();
      char v19 = result;
    }
    else
    {
      unint64_t v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        char v19 = *((unsigned char *)v28 + v18);
      }
      else
      {
        uint64_t result = v21;
        if ((a6 & 0x1000000000000000) == 0) {
          uint64_t result = _StringObject.sharedUTF8.getter();
        }
        char v19 = *(unsigned char *)(result + v18);
      }
    }
    if ((v12 & 0xC) == v15)
    {
      uint64_t result = sub_1000F94F4(v12, a6, a7);
      unint64_t v12 = result;
      if ((a7 & 0x1000000000000000) == 0)
      {
LABEL_27:
        unint64_t v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
        goto LABEL_31;
      }
    }
    else if ((a7 & 0x1000000000000000) == 0)
    {
      goto LABEL_27;
    }
    if (v23 <= v12 >> 16) {
      goto LABEL_37;
    }
    unint64_t v12 = String.UTF8View._foreignIndex(after:)();
LABEL_31:
    *(unsigned char *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      uint64_t v11 = a3;
      goto LABEL_35;
    }
    ++v11;
    if (v10 == v12 >> 14) {
      goto LABEL_35;
    }
  }
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

unint64_t sub_100109F14()
{
  unint64_t result = qword_10021F670;
  if (!qword_10021F670)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10021F670);
  }
  return result;
}

uint64_t sub_100109F60()
{
  return type metadata accessor for SessionFilename();
}

uint64_t sub_100109F68()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for SessionFilename.SessionFileState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10010A0E4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SessionFilename.SessionFileState()
{
  return &type metadata for SessionFilename.SessionFileState;
}

uint64_t sub_10010A11C()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10010A154()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10010A168(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + OBJC_IVAR____TtC7parsecd10NullStream__bytesWritten);
  BOOL v4 = __OFADD__(v3, a2);
  uint64_t v5 = v3 + a2;
  if (v4)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v2 + OBJC_IVAR____TtC7parsecd10NullStream__bytesWritten) = v5;
    return a2;
  }
  return result;
}

id sub_10010A1DC()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&v0[OBJC_IVAR____TtC7parsecd10NullStream__bytesWritten] = 0;
  v3.receiver = v0;
  v3.super_class = ObjectType;
  return objc_msgSendSuper2(&v3, "initToMemory");
}

id sub_10010A244(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&v2[OBJC_IVAR____TtC7parsecd10NullStream__bytesWritten] = 0;
  v7.receiver = v2;
  v7.super_class = ObjectType;
  return objc_msgSendSuper2(&v7, "initToBuffer:capacity:", a1, a2);
}

id sub_10010A2D4(uint64_t a1, char a2)
{
  objc_super v3 = v2;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  objc_super v7 = (NSURL *)OBJC_IVAR____TtC7parsecd10NullStream__bytesWritten;
  *(void *)&v3[OBJC_IVAR____TtC7parsecd10NullStream__bytesWritten] = 0;
  URL._bridgeToObjectiveC()(v7);
  uint64_t v9 = v8;
  v15.receiver = v3;
  v15.super_class = ObjectType;
  id v10 = objc_msgSendSuper2(&v15, "initWithURL:append:", v8, a2 & 1);

  uint64_t v11 = type metadata accessor for URL();
  unint64_t v12 = *(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8);
  id v13 = v10;
  v12(a1, v11);
  if (v13) {

  }
  return v13;
}

uint64_t type metadata accessor for NullStream()
{
  return self;
}

void sub_10010A460()
{
  uint64_t v1 = sub_10002572C(&qword_10021BB20);
  __chkstk_darwin(v1 - 8);
  objc_super v3 = (char *)&v26 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for URL();
  sub_100020C48();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  sub_100017DE0();
  if (swift_unknownObjectWeakLoadStrong())
  {
    sub_10003A1F4();
    sub_100039F74();
    uint64_t v8 = URL.lastPathComponent.getter();
    unint64_t v10 = v9;
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0, v4);
    type metadata accessor for SessionFilename();
    swift_allocObject();
    swift_bridgeObjectRetain();
    uint64_t v11 = SessionFilename.init(fromString:)(v8, v10);
    if (v11)
    {
      uint64_t v12 = v11;
      id v13 = (unsigned char *)(v11 + OBJC_IVAR____TtC7parsecd15SessionFilename_state);
      swift_beginAccess();
      switch(*v13)
      {
        case 1:
        case 2:
        case 3:
          uint64_t v18 = 1852141679;
          char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v19) {
            goto LABEL_11;
          }
          if (qword_100218B40 != -1) {
            swift_once();
          }
          uint64_t v21 = type metadata accessor for Logger();
          sub_10002A10C(v21, (uint64_t)qword_1002369D8);
          swift_retain_n();
          swift_bridgeObjectRetain();
          objc_super v15 = Logger.logObject.getter();
          os_log_type_t v22 = static os_log_type_t.error.getter();
          if (!os_log_type_enabled(v15, v22))
          {

            swift_bridgeObjectRelease_n();
            swift_release_n();
            goto LABEL_18;
          }
          uint64_t v23 = swift_slowAlloc();
          uint64_t v27 = swift_slowAlloc();
          uint64_t v30 = v27;
          *(_DWORD *)uint64_t v23 = 136315394;
          swift_bridgeObjectRetain();
          uint64_t v24 = sub_10001C274(v8, v10, &v30);
          sub_10002ADFC(v24);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v23 + 12) = 2080;
          unint64_t v25 = 0xE400000000000000;
          switch(*v13)
          {
            case 1:
              unint64_t v25 = 0xE600000000000000;
              uint64_t v18 = 0x6465736F6C63;
              break;
            case 2:
              uint64_t v18 = 0x69737365636F7270;
              unint64_t v25 = 0xEA0000000000676ELL;
              break;
            case 3:
              unint64_t v25 = 0xE800000000000000;
              uint64_t v18 = 0x646564616F6C7075;
              break;
            default:
              break;
          }
          uint64_t v28 = sub_10001C274(v18, v25, &v30);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v15, v22, "At close time, file %s had unexpected state %s", (uint8_t *)v23, 0x16u);
          swift_arrayDestroy();
          sub_100017D40();
          sub_100017D40();
          swift_release();
          goto LABEL_22;
        default:
          swift_bridgeObjectRelease();
LABEL_11:
          swift_bridgeObjectRelease();
          id v20 = [self defaultManager];
          NSFileManager.parsec_renameForStateChange(sessionFile:toState:)(v12, 1u, (uint64_t)v3);
          swift_unknownObjectRelease();
          swift_release();

          sub_10003CB40((uint64_t)v3);
          break;
      }
    }
    else
    {
      if (qword_100218B40 != -1) {
        swift_once();
      }
      uint64_t v14 = type metadata accessor for Logger();
      sub_10002A10C(v14, (uint64_t)qword_1002369D8);
      swift_bridgeObjectRetain();
      objc_super v15 = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v15, v16))
      {
        unsigned __int8 v17 = (uint8_t *)swift_slowAlloc();
        v29[0] = swift_slowAlloc();
        *(_DWORD *)unsigned __int8 v17 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v30 = sub_10001C274(v8, v10, v29);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v15, v16, "Session file had unexpected name: %s", v17, 0xCu);
        swift_arrayDestroy();
        sub_100017D40();
        sub_100017D40();
LABEL_22:
        swift_unknownObjectRelease();
      }
      else
      {

        swift_bridgeObjectRelease_n();
LABEL_18:
        swift_unknownObjectRelease();
      }
    }
  }
}

uint64_t sub_10010AC0C()
{
  sub_10001CDE0(v0 + 16);

  return _swift_deallocClassInstance(v0, 41, 7);
}

uint64_t type metadata accessor for ParsecPersistentStorage()
{
  return self;
}

uint64_t *sub_10010AC68(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v10 = a2[1];
      *a1 = *a2;
      a1[1] = v10;
      a1[2] = a2[2];
      swift_bridgeObjectRetain();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v11 = *a2;
      swift_errorRetain();
      *a1 = v11;
      uint64_t v12 = *(int *)(sub_10002572C(&qword_10021F8C8) + 48);
      id v13 = (char *)a1 + v12;
      uint64_t v14 = (char *)a2 + v12;
      uint64_t v15 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(a1, a2, *(void *)(v6 + 64));
        return a1;
      }
      uint64_t v8 = a2[1];
      *a1 = *a2;
      a1[1] = v8;
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_10010ADD8(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 2)
  {
LABEL_4:
    return swift_bridgeObjectRelease();
  }
  if (result != 1)
  {
    if (result) {
      return result;
    }
    goto LABEL_4;
  }
  swift_errorRelease();
  uint64_t v3 = a1 + *(int *)(sub_10002572C(&qword_10021F8C8) + 48);
  uint64_t v4 = type metadata accessor for URL();
  int v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);

  return v5(v3, v4);
}

void *sub_10010AE9C(void *a1, void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v8 = a2[1];
    *a1 = *a2;
    a1[1] = v8;
    a1[2] = a2[2];
    swift_bridgeObjectRetain();
  }
  else if (EnumCaseMultiPayload == 1)
  {
    uint64_t v9 = *a2;
    swift_errorRetain();
    *a1 = v9;
    uint64_t v10 = *(int *)(sub_10002572C(&qword_10021F8C8) + 48);
    uint64_t v11 = (char *)a1 + v10;
    uint64_t v12 = (char *)a2 + v10;
    uint64_t v13 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
  }
  else
  {
    if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      return a1;
    }
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    swift_bridgeObjectRetain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *sub_10010AFC8(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10010B114((uint64_t)a1);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      swift_bridgeObjectRetain();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v7 = *a2;
      swift_errorRetain();
      *a1 = v7;
      uint64_t v8 = *(int *)(sub_10002572C(&qword_10021F8C8) + 48);
      uint64_t v9 = (char *)a1 + v8;
      uint64_t v10 = (char *)a2 + v8;
      uint64_t v11 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        return a1;
      }
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_10010B114(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SessionFileCreationError();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *sub_10010B170(void *a1, void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *a1 = *a2;
    uint64_t v6 = *(int *)(sub_10002572C(&qword_10021F8C8) + 48);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *sub_10010B248(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10010B114((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      uint64_t v6 = *(int *)(sub_10002572C(&qword_10021F8C8) + 48);
      uint64_t v7 = (char *)a1 + v6;
      uint64_t v8 = (char *)a2 + v6;
      uint64_t v9 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_10010B330()
{
  uint64_t v3 = &unk_1001A9770;
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    uint64_t v4 = &v2;
    int v5 = &unk_1001A97A0;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t sub_10010B3E0()
{
  sub_10001CDE0(v0 + 16);
  sub_10001CA50(v0 + 32);

  return _swift_deallocClassInstance(v0, 72, 7);
}

uint64_t type metadata accessor for BiomeDatabaseManager()
{
  return self;
}

uint64_t sub_10010B444()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC7parsecd15CachedResultSet_result;
  char v2 = (uint64_t *)(v1 + *(int *)(type metadata accessor for CachedResultSet.Result(0) + 40));
  uint64_t v3 = *v2;
  unint64_t v4 = v2[1];
  uint64_t result = 0;
  switch(v4 >> 62)
  {
    case 1uLL:
      BOOL v6 = __OFSUB__(HIDWORD(v3), v3);
      int v7 = HIDWORD(v3) - v3;
      if (v6)
      {
        __break(1u);
LABEL_9:
        __break(1u);
LABEL_10:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x10010B530);
      }
      uint64_t result = v7;
LABEL_6:
      if (result < 0) {
        goto LABEL_10;
      }
      return result;
    case 2uLL:
      uint64_t v10 = v3 + 16;
      uint64_t v8 = *(void *)(v3 + 16);
      uint64_t v9 = *(void *)(v10 + 8);
      uint64_t result = v9 - v8;
      if (!__OFSUB__(v9, v8)) {
        goto LABEL_6;
      }
      goto LABEL_9;
    case 3uLL:
      return result;
    default:
      return BYTE6(v4);
  }
}

uint64_t sub_10010B540(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_10010B5D0(a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Search_V2_SearchResponse, (void (*)(uint64_t, uint64_t, char *, char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_10010B960);
}

uint64_t sub_10010B588(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_10010B5D0(a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Safari_V1alpha_SafariSearchResponse, (void (*)(uint64_t, uint64_t, char *, char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_10010C40C);
}

uint64_t sub_10010B5D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t (*a9)(void), void (*a10)(uint64_t, uint64_t, char *, char *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v36 = a7;
  uint64_t v37 = a8;
  uint64_t v34 = a5;
  uint64_t v35 = a6;
  uint64_t v31 = a1;
  uint64_t v32 = a2;
  uint64_t v33 = a10;
  uint64_t v13 = a9(0);
  sub_100020C48();
  uint64_t v15 = v14;
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v30 - v17;
  uint64_t v19 = type metadata accessor for URLRequest();
  sub_100020C48();
  uint64_t v21 = v20;
  __chkstk_darwin(v22);
  uint64_t v24 = (char *)&v30 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for CachedResultSet.Result(0);
  uint64_t v26 = sub_100016544(v25);
  __chkstk_darwin(v26);
  sub_100021208();
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v24, a3, v19);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, a4, v13);
  v33(v31, v32, v24, v18, v34, v35, v36, v37);
  sub_100027EC0();
  v27();
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(a3, v19);
  uint64_t v28 = swift_allocObject();
  *(void *)(v28 + 16) = 0;
  sub_100077980(v10, v28 + OBJC_IVAR____TtC7parsecd15CachedResultSet_result);
  return v28;
}

unint64_t sub_10010B7C4(uint64_t a1, uint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    _StringGuts._slowWithCString<A>(_:)();
    swift_bridgeObjectRelease();
    char v6 = v9;
  }
  else
  {
    __chkstk_darwin(a1);
    if ((a2 & 0x2000000000000000) != 0)
    {
      char v6 = (v3 > 0x20u || ((0x100003E01uLL >> v3) & 1) == 0)
        && (int v7 = (unsigned char *)_swift_stdlib_strtof_clocale()) != 0
        && *v7 == 0;
      swift_bridgeObjectRelease();
    }
    else
    {
      if ((v3 & 0x1000000000000000) != 0)
      {
        uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v5 = v3 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v4 = _StringObject.sharedUTF8.getter();
      }
      char v6 = sub_10010EE8C(v4, v5, (void (*)(uint64_t *__return_ptr))sub_10010EF74);
      swift_bridgeObjectRelease();
    }
  }
  return (unint64_t)((v6 & 1) == 0) << 32;
}

uint64_t sub_10010B960@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, unint64_t a6@<X7>, Swift::String *a7@<X8>)
{
  uint64_t v152 = a1;
  uint64_t v157 = type metadata accessor for URLQueryItem();
  sub_100020C48();
  uint64_t v141 = v14;
  __chkstk_darwin(v15);
  sub_100017D2C();
  uint64_t v154 = v16;
  sub_10000E100();
  __chkstk_darwin(v17);
  uint64_t v147 = (uint64_t)v140 - v18;
  sub_10000E100();
  __chkstk_darwin(v19);
  uint64_t v156 = (char *)v140 - v20;
  uint64_t v21 = sub_10002572C((uint64_t *)&unk_10021D010);
  uint64_t v22 = sub_100016544(v21);
  __chkstk_darwin(v22);
  sub_10002CE64(v23, v140[0]);
  uint64_t v146 = type metadata accessor for URLComponents();
  sub_100020C48();
  uint64_t v144 = v24;
  __chkstk_darwin(v25);
  sub_100017D2C();
  uint64_t v143 = v26;
  sub_10000E100();
  uint64_t v28 = __chkstk_darwin(v27);
  sub_100028934(v28, v29, v30, v31, v32, v33, v34, v35, v140[0]);
  uint64_t v36 = sub_10002572C(&qword_10021BB20);
  uint64_t v37 = sub_100016544(v36);
  __chkstk_darwin(v37);
  sub_1000213B0();
  uint64_t v153 = type metadata accessor for URL();
  sub_100020C48();
  uint64_t v151 = v38;
  __chkstk_darwin(v39);
  sub_10000E04C();
  uint64_t v150 = v40;
  Swift::String v41 = String.lowercased()();
  swift_bridgeObjectRelease();
  *a7 = v41;
  Apple_Parsec_Search_V2_SearchResponse.query.getter();
  Swift::String v42 = String.lowercased()();
  swift_bridgeObjectRelease();
  a7[1] = v42;
  uint64_t v155 = a2;
  Apple_Parsec_Search_V2_SearchResponse.completionScore.getter();
  int v44 = v43;
  uint64_t v45 = (int *)type metadata accessor for CachedResultSet.Result(0);
  *(_DWORD *)((char *)&a7->_countAndFlagsBits + v45[9]) = v44;
  unsigned int v46 = (uint64_t *)((char *)&a7->_countAndFlagsBits + v45[7]);
  *unsigned int v46 = a3;
  v46[1] = a4;
  uint64_t v47 = (uint64_t *)((char *)&a7->_countAndFlagsBits + v45[10]);
  *uint64_t v47 = a5;
  v47[1] = a6;
  uint64_t v148 = a5;
  unint64_t v149 = a6;
  sub_100027BCC(a5, a6);
  uint64_t v48 = URLRequest.allHTTPHeaderFields.getter();
  double v49 = 0.0;
  if (v48
    && (uint64_t v50 = v48,
        uint64_t v51 = static String._unconditionallyBridgeFromObjectiveC(_:)(),
        uint64_t v53 = sub_100039E20(v51, v52, v50),
        uint64_t v55 = v54,
        swift_bridgeObjectRelease(),
        swift_bridgeObjectRelease(),
        v55))
  {
    unint64_t v56 = sub_10010B7C4(v53, v55);
    Swift::String v57 = v156;
    uint64_t v58 = v153;
    if ((v56 & 0x100000000) == 0) {
      double v49 = *(float *)&v56;
    }
  }
  else
  {
    Swift::String v57 = v156;
    uint64_t v58 = v153;
  }
  *(double *)((char *)&a7->_countAndFlagsBits + v45[8]) = v49;
  int v59 = Apple_Parsec_Search_V2_SearchResponse.maxAgeSeconds.getter();
  uint64_t v60 = (uint64_t)a7 + v45[6];
  if (v59 < 1)
  {
    uint64_t v61 = 1;
  }
  else
  {
    Apple_Parsec_Search_V2_SearchResponse.maxAgeSeconds.getter();
    Date.init(timeIntervalSinceNow:)();
    uint64_t v61 = 0;
  }
  uint64_t v62 = type metadata accessor for Date();
  sub_10002538C(v60, v61, 1, v62);
  URLRequest.url.getter();
  if (sub_100027BA4(v7, 1, v58) == 1)
  {
    sub_1000291B4(v148, v149);
    type metadata accessor for Apple_Parsec_Search_V2_SearchResponse();
    sub_10000E060();
    sub_10000E040();
    v63();
    type metadata accessor for URLRequest();
    sub_10000E060();
    sub_10000E040();
    v64();
    uint64_t v65 = &qword_10021BB20;
LABEL_25:
    uint64_t result = sub_1000E97F8(v7, v65);
LABEL_26:
    uint64_t v97 = (uint64_t *)((char *)&a7->_countAndFlagsBits + v45[11]);
    *uint64_t v97 = 0;
    v97[1] = 0;
    uint64_t v98 = (uint64_t *)((char *)&a7->_countAndFlagsBits + v45[12]);
    *uint64_t v98 = 0;
    v98[1] = 0;
    uint64_t v99 = (uint64_t *)((char *)&a7->_countAndFlagsBits + v45[13]);
    *uint64_t v99 = 0;
    v99[1] = 0;
    return result;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v151 + 32))(v150, v7, v58);
  uint64_t v66 = self;
  URL._bridgeToObjectiveC()(v67);
  uint64_t v69 = v68;
  id v70 = objc_msgSend(v66, "parsec_componentsWithURL:resolvingAgainstBaseURL:", v68, 0);

  if (!v70)
  {
    uint64_t v7 = v145;
    sub_10002538C(v145, 1, 1, v146);
    goto LABEL_24;
  }
  uint64_t v71 = v143;
  static URLComponents._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v7 = v145;
  uint64_t v72 = *(void (**)(uint64_t, int *, uint64_t))(v144 + 32);
  uint64_t v73 = v71;
  uint64_t v74 = v146;
  v72(v145, v73, v146);
  sub_10002538C(v7, 0, 1, v74);
  if (sub_100027BA4(v7, 1, v74) == 1)
  {
LABEL_24:
    sub_1000291B4(v148, v149);
    type metadata accessor for Apple_Parsec_Search_V2_SearchResponse();
    sub_10000E060();
    sub_10000E040();
    v93();
    type metadata accessor for URLRequest();
    sub_10000E060();
    sub_10000E040();
    v94();
    sub_10000E040();
    v95();
    uint64_t v65 = (uint64_t *)&unk_10021D010;
    goto LABEL_25;
  }
  v72(v142, (int *)v7, v74);
  uint64_t v75 = URLComponents.queryItems.getter();
  if (!v75)
  {
    sub_1000291B4(v148, v149);
    type metadata accessor for Apple_Parsec_Search_V2_SearchResponse();
    sub_10000E060();
    sub_10000E040();
    v100();
    type metadata accessor for URLRequest();
    sub_10000E060();
    sub_10000E040();
    v101();
    sub_10000E040();
    v102();
    sub_10000E040();
    uint64_t result = v103();
    goto LABEL_26;
  }
  uint64_t v76 = v75;
  uint64_t v77 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v79 = v78;
  uint64_t v80 = v76;
  uint64_t v81 = *(void *)(v76 + 16);
  v140[1] = v76;
  if (v81)
  {
    uint64_t v82 = v77;
    uint64_t v83 = v141 + 16;
    uint64_t v145 = *(void *)(v141 + 16);
    sub_10002B154();
    uint64_t v85 = v76 + v84;
    uint64_t v143 = *(int **)(v83 + 56);
    swift_bridgeObjectRetain();
    uint64_t v80 = v157;
    while (1)
    {
      ((void (*)(char *, uint64_t, uint64_t))v145)(v57, v85, v80);
      if (URLQueryItem.name.getter() == v82 && v86 == v79)
      {
        sub_10001DE24();
        swift_bridgeObjectRelease();
        uint64_t v92 = v154;
        goto LABEL_31;
      }
      char v88 = sub_100027184();
      swift_bridgeObjectRelease();
      if (v88) {
        break;
      }
      Swift::String v57 = v156;
      uint64_t v80 = v157;
      sub_100027EC0();
      v89();
      v85 += (uint64_t)v143;
      if (!--v81)
      {
        swift_bridgeObjectRelease();
        sub_10001DE24();
        uint64_t v90 = 0;
        uint64_t v91 = 0;
        uint64_t v92 = v154;
        goto LABEL_32;
      }
    }
    sub_10001DE24();
    uint64_t v92 = v154;
    Swift::String v57 = v156;
LABEL_31:
    uint64_t v80 = (uint64_t)v57;
    uint64_t v90 = URLQueryItem.value.getter();
    uint64_t v91 = v104;
    sub_100027EC0();
    v105();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v90 = 0;
    uint64_t v91 = 0;
    uint64_t v92 = v154;
    uint64_t v81 = v80;
  }
LABEL_32:
  uint64_t v106 = (uint64_t *)((char *)&a7->_countAndFlagsBits + v45[11]);
  uint64_t *v106 = v90;
  v106[1] = v91;
  uint64_t v107 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v109 = v108;
  uint64_t v110 = *(void *)(v81 + 16);
  if (v110)
  {
    uint64_t v91 = v107;
    uint64_t v143 = v45;
    uint64_t v81 = v141 + 16;
    uint64_t v156 = *(char **)(v141 + 16);
    sub_10002B154();
    uint64_t v113 = v111 + v112;
    uint64_t v145 = *(void *)(v81 + 56);
    swift_bridgeObjectRetain();
    uint64_t v114 = v157;
    uint64_t v80 = v147;
    while (1)
    {
      ((void (*)(uint64_t, uint64_t, uint64_t))v156)(v80, v113, v114);
      if (URLQueryItem.name.getter() == v91 && v115 == v109)
      {
        sub_10001DE24();
        swift_bridgeObjectRelease();
        goto LABEL_44;
      }
      char v117 = sub_100027184();
      swift_bridgeObjectRelease();
      if (v117) {
        break;
      }
      uint64_t v80 = v147;
      uint64_t v114 = v157;
      sub_100028214();
      v118();
      v113 += v145;
      --v110;
      uint64_t v92 = v154;
      if (!v110)
      {
        swift_bridgeObjectRelease();
        sub_10001DE24();
        sub_100025074();
        goto LABEL_45;
      }
    }
    sub_10001DE24();
    uint64_t v92 = v154;
LABEL_44:
    uint64_t v80 = URLQueryItem.value.getter();
    uint64_t v91 = v119;
    sub_100028214();
    v120();
    swift_bridgeObjectRelease();
LABEL_45:
    uint64_t v45 = v143;
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_100025074();
  }
  uint64_t v121 = (uint64_t *)((char *)&a7->_countAndFlagsBits + v45[12]);
  *uint64_t v121 = v80;
  v121[1] = v91;
  uint64_t v122 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v124 = v123;
  uint64_t v125 = *(void *)(v81 + 16);
  if (v125)
  {
    uint64_t v91 = v122;
    uint64_t v156 = *(char **)(v141 + 16);
    sub_10002B154();
    uint64_t v127 = v81 + v126;
    uint64_t v147 = *(void *)(v128 + 56);
    swift_bridgeObjectRetain();
    uint64_t v80 = v157;
    while (1)
    {
      ((void (*)(uint64_t, uint64_t, uint64_t))v156)(v92, v127, v80);
      if (URLQueryItem.name.getter() == v91 && v129 == v124)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_59;
      }
      char v131 = sub_100027184();
      swift_bridgeObjectRelease();
      if (v131) {
        break;
      }
      uint64_t v92 = v154;
      uint64_t v80 = v157;
      sub_100028214();
      v132();
      v127 += v147;
      if (!--v125)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        goto LABEL_56;
      }
    }
    swift_bridgeObjectRelease();
LABEL_59:
    uint64_t v80 = URLQueryItem.value.getter();
    uint64_t v91 = v133;
    sub_100028214();
    v134();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_56:
    sub_100025074();
  }
  sub_1000291B4(v148, v149);
  type metadata accessor for Apple_Parsec_Search_V2_SearchResponse();
  sub_10000E060();
  sub_10000E040();
  v135();
  type metadata accessor for URLRequest();
  sub_10000E060();
  sub_10000E040();
  v136();
  sub_10000E040();
  v137();
  sub_10000E040();
  uint64_t result = v138();
  uint64_t v139 = (uint64_t *)((char *)&a7->_countAndFlagsBits + v45[13]);
  *uint64_t v139 = v80;
  v139[1] = v91;
  return result;
}

uint64_t sub_10010C40C@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, unint64_t a6@<X7>, Swift::String *a7@<X8>)
{
  unint64_t v171 = a6;
  uint64_t v172 = a5;
  uint64_t v167 = a3;
  uint64_t v168 = a4;
  uint64_t v169 = a1;
  uint64_t v173 = type metadata accessor for URLQueryItem();
  sub_100020C48();
  uint64_t v153 = v10;
  __chkstk_darwin(v11);
  sub_100017D2C();
  uint64_t v174 = v12;
  sub_10000E100();
  __chkstk_darwin(v13);
  uint64_t v160 = (char *)&v152 - v14;
  sub_10000E100();
  uint64_t v16 = __chkstk_darwin(v15);
  sub_100028934(v16, v17, v18, v19, v20, v21, v22, v23, v152);
  uint64_t v24 = sub_10002572C((uint64_t *)&unk_10021D010);
  uint64_t v25 = sub_100016544(v24);
  __chkstk_darwin(v25);
  sub_10000E04C();
  uint64_t v157 = v26;
  uint64_t v158 = type metadata accessor for URLComponents();
  sub_100020C48();
  uint64_t v156 = v27;
  __chkstk_darwin(v28);
  sub_100017D2C();
  uint64_t v155 = v29;
  sub_10000E100();
  __chkstk_darwin(v30);
  uint64_t v154 = (char *)&v152 - v31;
  uint64_t v32 = sub_10002572C(&qword_10021BB20);
  uint64_t v33 = sub_100016544(v32);
  __chkstk_darwin(v33);
  sub_10000E04C();
  uint64_t v164 = v34;
  uint64_t v170 = type metadata accessor for URL();
  sub_100020C48();
  uint64_t v163 = v35;
  __chkstk_darwin(v36);
  sub_10002CE64(v37, v152);
  type metadata accessor for Google_Protobuf_DoubleValue();
  sub_100020C48();
  uint64_t v165 = v39;
  uint64_t v166 = v38;
  __chkstk_darwin(v38);
  sub_100021208();
  uint64_t v40 = type metadata accessor for Apple_Parsec_Safari_V1alpha_SafariSearchResults();
  sub_100020C48();
  uint64_t v42 = v41;
  __chkstk_darwin(v43);
  sub_100016550();
  Swift::String v44 = String.lowercased()();
  swift_bridgeObjectRelease();
  *a7 = v44;
  Apple_Parsec_Safari_V1alpha_SafariSearchResponse.searchResults.getter();
  Apple_Parsec_Safari_V1alpha_SafariSearchResults.query.getter();
  uint64_t v45 = *(void (**)(uint64_t, uint64_t))(v42 + 8);
  v45(v7, v40);
  Swift::String v46 = String.lowercased()();
  swift_bridgeObjectRelease();
  a7[1] = v46;
  uint64_t v161 = a2;
  Apple_Parsec_Safari_V1alpha_SafariSearchResponse.searchResults.getter();
  Apple_Parsec_Safari_V1alpha_SafariSearchResults.completionScore.getter();
  uint64_t v47 = v40;
  unint64_t v48 = v171;
  v45(v7, v47);
  Google_Protobuf_DoubleValue.value.getter();
  double v50 = v49;
  uint64_t v51 = a7;
  sub_10000E040();
  v52();
  uint64_t v53 = (int *)type metadata accessor for CachedResultSet.Result(0);
  *(float *)&double v50 = v50;
  *(_DWORD *)((char *)&a7->_countAndFlagsBits + v53[9]) = LODWORD(v50);
  uint64_t v54 = (uint64_t *)((char *)&a7->_countAndFlagsBits + v53[7]);
  uint64_t v55 = v168;
  *uint64_t v54 = v167;
  v54[1] = v55;
  unint64_t v56 = (uint64_t *)((char *)&a7->_countAndFlagsBits + v53[10]);
  uint64_t v57 = v172;
  uint64_t *v56 = v172;
  v56[1] = v48;
  sub_100027BCC(v57, v48);
  uint64_t v58 = URLRequest.allHTTPHeaderFields.getter();
  double v59 = 0.0;
  if (v58
    && (uint64_t v60 = v58,
        uint64_t v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(),
        uint64_t v63 = sub_100039E20(v61, v62, v60),
        uint64_t v65 = v64,
        swift_bridgeObjectRelease(),
        swift_bridgeObjectRelease(),
        v65))
  {
    unint64_t v66 = sub_10010B7C4(v63, v65);
    uint64_t v67 = v170;
    uint64_t v68 = v164;
    if ((v66 & 0x100000000) == 0) {
      double v59 = *(float *)&v66;
    }
  }
  else
  {
    uint64_t v67 = v170;
    uint64_t v68 = v164;
  }
  *(double *)((char *)&v51->_countAndFlagsBits + v53[8]) = v59;
  uint64_t v69 = (uint64_t)v51 + v53[6];
  uint64_t v70 = type metadata accessor for Date();
  sub_10002538C(v69, 1, 1, v70);
  URLRequest.url.getter();
  if (sub_100027BA4(v68, 1, v67) == 1)
  {
    sub_100020D0C();
    type metadata accessor for Apple_Parsec_Safari_V1alpha_SafariSearchResponse();
    sub_10000E060();
    sub_10000E040();
    v71();
    type metadata accessor for URLRequest();
    sub_10000E060();
    sub_10000E040();
    v72();
    uint64_t v73 = &qword_10021BB20;
    uint64_t v74 = v68;
LABEL_22:
    uint64_t result = sub_1000E97F8(v74, v73);
LABEL_23:
    uint64_t v108 = (uint64_t *)((char *)&v51->_countAndFlagsBits + v53[11]);
    *uint64_t v108 = 0;
    v108[1] = 0;
    uint64_t v109 = (uint64_t *)((char *)&v51->_countAndFlagsBits + v53[12]);
    *uint64_t v109 = 0;
    v109[1] = 0;
    uint64_t v110 = (uint64_t *)((char *)&v51->_countAndFlagsBits + v53[13]);
    *uint64_t v110 = 0;
    v110[1] = 0;
    return result;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v163 + 32))(v162, v68, v67);
  uint64_t v75 = self;
  URL._bridgeToObjectiveC()(v76);
  uint64_t v78 = v77;
  id v79 = objc_msgSend(v75, "parsec_componentsWithURL:resolvingAgainstBaseURL:", v77, 0);

  if (!v79)
  {
    uint64_t v81 = v157;
    sub_10002538C(v157, 1, 1, v158);
    goto LABEL_21;
  }
  uint64_t v80 = v155;
  static URLComponents._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v81 = v157;
  uint64_t v82 = *(void (**)(uint64_t, uint64_t, uint64_t))(v156 + 32);
  uint64_t v83 = v80;
  uint64_t v84 = v158;
  v82(v157, v83, v158);
  sub_10002538C(v81, 0, 1, v84);
  if (sub_100027BA4(v81, 1, v84) == 1)
  {
LABEL_21:
    sub_100020D0C();
    type metadata accessor for Apple_Parsec_Safari_V1alpha_SafariSearchResponse();
    sub_10000E060();
    sub_10000E040();
    v104();
    type metadata accessor for URLRequest();
    sub_10000E060();
    sub_10000E040();
    v105();
    sub_10000E040();
    v106();
    uint64_t v73 = (uint64_t *)&unk_10021D010;
    uint64_t v74 = v81;
    goto LABEL_22;
  }
  uint64_t v85 = v81;
  uint64_t v86 = v154;
  v82((uint64_t)v154, v85, v84);
  uint64_t v87 = URLComponents.queryItems.getter();
  if (!v87)
  {
    sub_100020D0C();
    type metadata accessor for Apple_Parsec_Safari_V1alpha_SafariSearchResponse();
    sub_10000E060();
    sub_10000E040();
    v111();
    type metadata accessor for URLRequest();
    sub_10000E060();
    sub_10000E040();
    v112();
    sub_10000E040();
    v113();
    sub_10000E040();
    uint64_t result = v114();
    goto LABEL_23;
  }
  uint64_t v88 = v87;
  uint64_t v89 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v91 = v90;
  uint64_t v92 = *(void *)(v88 + 16);
  uint64_t v165 = v51;
  uint64_t v166 = v88;
  if (v92)
  {
    uint64_t v93 = v89;
    uint64_t v94 = v153 + 16;
    uint64_t v168 = *(void *)(v153 + 16);
    sub_10002B154();
    uint64_t v96 = v88 + v95;
    uint64_t v88 = *(void *)(v94 + 56);
    swift_bridgeObjectRetain();
    uint64_t v86 = v159;
    while (1)
    {
      sub_1000185BC();
      v97();
      if (URLQueryItem.name.getter() == v93 && v98 == v91)
      {
        sub_1000254E4();
        swift_bridgeObjectRelease();
        goto LABEL_28;
      }
      char v100 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v100) {
        break;
      }
      uint64_t v86 = v159;
      sub_100016614();
      v101();
      v96 += v88;
      if (!--v92)
      {
        swift_bridgeObjectRelease();
        sub_1000254E4();
        uint64_t v102 = 0;
        uint64_t v103 = 0;
        uint64_t v51 = v165;
        goto LABEL_29;
      }
    }
    sub_1000254E4();
    uint64_t v86 = v159;
LABEL_28:
    uint64_t v102 = URLQueryItem.value.getter();
    uint64_t v103 = v115;
    sub_100016614();
    v116();
    swift_bridgeObjectRelease();
    uint64_t v51 = v165;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v102 = 0;
    uint64_t v103 = 0;
  }
LABEL_29:
  char v117 = (uint64_t *)((char *)&v51->_countAndFlagsBits + v53[11]);
  *char v117 = v102;
  v117[1] = v103;
  uint64_t v118 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v120 = v119;
  uint64_t v121 = *(void *)(v88 + 16);
  if (v121)
  {
    uint64_t v122 = v118;
    uint64_t v123 = *(void *)(v153 + 16);
    unint64_t v124 = v88 + ((*(unsigned __int8 *)(v153 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v153 + 80));
    uint64_t v167 = *(void *)(v153 + 72);
    uint64_t v168 = v123;
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_1000185BC();
      v125();
      if (URLQueryItem.name.getter() == v122 && v126 == v120)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_41;
      }
      char v128 = sub_100027184();
      swift_bridgeObjectRelease();
      if (v128) {
        break;
      }
      uint64_t v88 = v173;
      sub_100016614();
      v129();
      v124 += v167;
      if (!--v121)
      {
        swift_bridgeObjectRelease();
        sub_1000254E4();
        uint64_t v102 = 0;
        uint64_t v86 = 0;
        uint64_t v51 = v165;
        goto LABEL_42;
      }
    }
    swift_bridgeObjectRelease();
LABEL_41:
    uint64_t v102 = URLQueryItem.value.getter();
    uint64_t v86 = v130;
    sub_100016614();
    v131();
    swift_bridgeObjectRelease();
    uint64_t v51 = v165;
    uint64_t v88 = v166;
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_100025074();
  }
LABEL_42:
  uint64_t v132 = (uint64_t *)((char *)&v51->_countAndFlagsBits + v53[12]);
  *uint64_t v132 = v102;
  v132[1] = (uint64_t)v86;
  uint64_t v133 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v135 = v134;
  uint64_t v136 = *(void *)(v88 + 16);
  if (v136)
  {
    uint64_t v137 = v133;
    uint64_t v168 = *(void *)(v153 + 16);
    unint64_t v138 = v88 + ((*(unsigned __int8 *)(v153 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v153 + 80));
    uint64_t v139 = *(void *)(v153 + 72);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_1000185BC();
      v140();
      if (URLQueryItem.name.getter() == v137 && v141 == v135)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1000166A0();
        goto LABEL_54;
      }
      char v143 = sub_100027184();
      swift_bridgeObjectRelease();
      if (v143) {
        break;
      }
      sub_100016614();
      v144();
      v138 += v139;
      if (!--v136)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        uint64_t v102 = 0;
        uint64_t v86 = 0;
        uint64_t v51 = v165;
        sub_1000166A0();
        goto LABEL_55;
      }
    }
    swift_bridgeObjectRelease();
    sub_1000166A0();
LABEL_54:
    uint64_t v102 = URLQueryItem.value.getter();
    uint64_t v86 = v145;
    sub_100016614();
    v146();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v51 = v165;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100025074();
  }
LABEL_55:
  sub_100020D0C();
  type metadata accessor for Apple_Parsec_Safari_V1alpha_SafariSearchResponse();
  sub_10000E060();
  sub_10000E040();
  v147();
  type metadata accessor for URLRequest();
  sub_10000E060();
  sub_10000E040();
  v148();
  sub_10000E040();
  v149();
  sub_10000E040();
  uint64_t result = v150();
  uint64_t v151 = (uint64_t *)((char *)&v51->_countAndFlagsBits + v53[13]);
  *uint64_t v151 = v102;
  v151[1] = (uint64_t)v86;
  return result;
}

uint64_t sub_10010CFC8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7475706E69 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x7972657571 && a2 == 0xE500000000000000;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      BOOL v7 = a1 == 0x6954657269707865 && a2 == 0xEA0000000000656DLL;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else
      {
        BOOL v8 = a1 == 1684632949 && a2 == 0xE400000000000000;
        if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 3;
        }
        else
        {
          BOOL v9 = a1 == 0x656C6163536975 && a2 == 0xE700000000000000;
          if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 4;
          }
          else
          {
            BOOL v10 = a1 == 0x6974656C706D6F63 && a2 == 0xEF65726F63536E6FLL;
            if (v10 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              return 5;
            }
            else
            {
              BOOL v11 = a1 == 1635017060 && a2 == 0xE400000000000000;
              if (v11 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                return 6;
              }
              else
              {
                BOOL v12 = a1 == 0x6570797471 && a2 == 0xE500000000000000;
                if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                {
                  swift_bridgeObjectRelease();
                  return 7;
                }
                else
                {
                  BOOL v13 = a1 == 0x5F74736567677573 && a2 == 0xEF73656972657571;
                  if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                  {
                    swift_bridgeObjectRelease();
                    return 8;
                  }
                  else if (a1 == 0x6D6F436C61636F6CLL && a2 == 0xEF6E6F6974656C70)
                  {
                    swift_bridgeObjectRelease();
                    return 9;
                  }
                  else
                  {
                    char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
                    swift_bridgeObjectRelease();
                    if (v15) {
                      return 9;
                    }
                    else {
                      return 10;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t sub_10010D400()
{
  return 10;
}

uint64_t sub_10010D408(char a1)
{
  uint64_t result = 0x7475706E69;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x7972657571;
      break;
    case 2:
      uint64_t result = 0x6954657269707865;
      break;
    case 3:
      uint64_t result = 1684632949;
      break;
    case 4:
      uint64_t result = 0x656C6163536975;
      break;
    case 5:
      uint64_t result = 0x6974656C706D6F63;
      break;
    case 6:
      uint64_t result = 1635017060;
      break;
    case 7:
      uint64_t result = 0x6570797471;
      break;
    case 8:
      uint64_t result = 0x5F74736567677573;
      break;
    case 9:
      uint64_t result = 0x6D6F436C61636F6CLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10010D548(void *a1)
{
  sub_10002572C(&qword_10021FBC8);
  sub_100020C48();
  __chkstk_darwin(v3);
  sub_100016550();
  sub_10001B620(a1, a1[3]);
  sub_10010ED30();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_100021D68();
  if (!v1)
  {
    sub_100024BAC(1);
    uint64_t v4 = (int *)type metadata accessor for CachedResultSet.Result(0);
    type metadata accessor for Date();
    sub_10010EE08(&qword_10021AA08);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    sub_100023E54(v4[7]);
    sub_100021D68();
    sub_10010EE4C();
    sub_10002B304();
    KeyedEncodingContainer.encode(_:forKey:)();
    sub_100061560();
    sub_10002B304();
    sub_100023E54(v4[11]);
    sub_100024BAC(7);
    sub_100023E54(v4[12]);
    sub_100024BAC(8);
    sub_100023E54(v4[13]);
    sub_100024BAC(9);
  }
  sub_100027EC0();
  return v7(v5, v6);
}

uint64_t sub_10010D7A8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v6 = sub_10002572C(&qword_10021BB10);
  uint64_t v7 = sub_100016544(v6);
  __chkstk_darwin(v7);
  sub_1000213B0();
  sub_10002572C(&qword_10021FBA0);
  sub_100020C48();
  __chkstk_darwin(v8);
  uint64_t v29 = (int *)type metadata accessor for CachedResultSet.Result(0);
  __chkstk_darwin(v29);
  sub_10000E04C();
  uint64_t v28 = v9;
  sub_10001B620(a1, a1[3]);
  sub_10010ED30();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_10001CA50((uint64_t)a1);
  }
  *uint64_t v28 = KeyedDecodingContainer.decode(_:forKey:)();
  v28[1] = v10;
  void v28[2] = sub_10002A5F4(1);
  v28[3] = v11;
  type metadata accessor for Date();
  LOBYTE(v30) = 2;
  sub_10010EE08(&qword_10021FBB0);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  sub_10007D918(v3, (uint64_t)v28 + v29[6]);
  sub_100026140(3);
  uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)();
  BOOL v13 = (uint64_t *)((char *)v28 + v29[7]);
  *BOOL v13 = v12;
  v13[1] = v14;
  sub_10010ED7C();
  sub_10002144C();
  *(uint64_t *)((char *)v28 + v29[8]) = v30;
  sub_100026140(5);
  KeyedDecodingContainer.decode(_:forKey:)();
  *(_DWORD *)((char *)v28 + v29[9]) = v15;
  sub_10010EDBC();
  sub_10002144C();
  *(_OWORD *)((char *)v28 + v29[10]) = v30;
  uint64_t v16 = sub_10002A5F4(7);
  uint64_t v17 = (uint64_t *)((char *)v28 + v29[11]);
  *uint64_t v17 = v16;
  v17[1] = v18;
  uint64_t v19 = sub_10002A5F4(8);
  uint64_t v20 = (uint64_t *)((char *)v28 + v29[12]);
  *uint64_t v20 = v19;
  v20[1] = v21;
  uint64_t v22 = sub_10002A5F4(9);
  uint64_t v24 = v23;
  sub_100027EC0();
  v25();
  uint64_t v26 = (uint64_t *)((char *)v28 + v29[13]);
  *uint64_t v26 = v22;
  v26[1] = v24;
  sub_1000778C0((uint64_t)v28, a2);
  sub_10001CA50((uint64_t)a1);
  return sub_100077924((uint64_t)v28);
}

uint64_t sub_10010DCD4()
{
  return sub_10010D408(*v0);
}

uint64_t sub_10010DCDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10010CFC8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10010DD04@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_10010D400();
  *a1 = result;
  return result;
}

uint64_t sub_10010DD2C(uint64_t a1)
{
  unint64_t v2 = sub_10010ED30();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10010DD68(uint64_t a1)
{
  unint64_t v2 = sub_10010ED30();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10010DDA4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10010D7A8(a1, a2);
}

uint64_t sub_10010DDBC(void *a1)
{
  return sub_10010D548(a1);
}

uint64_t sub_10010DDD4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + OBJC_IVAR____TtC7parsecd15CachedResultSet_result;
  uint64_t v3 = a2 + OBJC_IVAR____TtC7parsecd15CachedResultSet_result;
  BOOL v4 = *(void *)(a1 + OBJC_IVAR____TtC7parsecd15CachedResultSet_result) == *(void *)(a2
                                                                                       + OBJC_IVAR____TtC7parsecd15CachedResultSet_result)
    && *(void *)(a1 + OBJC_IVAR____TtC7parsecd15CachedResultSet_result + 8) == *(void *)(a2
                                                                                           + OBJC_IVAR____TtC7parsecd15CachedResultSet_result
                                                                                           + 8);
  if (!v4)
  {
    _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = sub_10002413C();
    if ((v6 & 1) == 0) {
      return result;
    }
  }
  uint64_t v7 = *(void *)(v2 + 24);
  uint64_t v8 = *(void *)(v3 + 24);
  if (v7)
  {
    if (!v8) {
      return 0;
    }
    if (*(void *)(v2 + 16) != *(void *)(v3 + 16) || v7 != v8)
    {
      _stringCompareWithSmolCheck(_:_:expecting:)();
      uint64_t result = sub_10002413C();
      if ((v10 & 1) == 0) {
        return result;
      }
    }
  }
  else if (v8)
  {
    return 0;
  }
  uint64_t v11 = type metadata accessor for CachedResultSet.Result(0);
  if (*(double *)(v2 + *(int *)(v11 + 32)) != *(double *)(v3 + *(int *)(v11 + 32))) {
    return 0;
  }
  sub_100024474();
  if (v14)
  {
    if (!v12) {
      return 0;
    }
    sub_100028D54(v13);
    if (!v4 || v15 != v16)
    {
      _stringCompareWithSmolCheck(_:_:expecting:)();
      uint64_t result = sub_10002413C();
      if ((v18 & 1) == 0) {
        return result;
      }
    }
  }
  else if (v12)
  {
    return 0;
  }
  sub_100024474();
  if (v21)
  {
    if (v19)
    {
      sub_100028D54(v20);
      if (!v4 || v22 != v23)
      {
        _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t result = sub_10002413C();
        if ((v25 & 1) == 0) {
          return result;
        }
      }
      goto LABEL_36;
    }
    return 0;
  }
  if (v19) {
    return 0;
  }
LABEL_36:
  sub_100024474();
  uint64_t result = (v28 | v26) == 0;
  if (v28 && v26)
  {
    sub_100028D54(v27);
    if (v4 && v29 == v30)
    {
      return 1;
    }
    else
    {
      return _stringCompareWithSmolCheck(_:_:expecting:)();
    }
  }
  return result;
}

uint64_t sub_10010DF4C()
{
  swift_release();
  sub_100077924(v0 + OBJC_IVAR____TtC7parsecd15CachedResultSet_result);
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v1, v2);
}

uint64_t sub_10010DFB8()
{
  return type metadata accessor for CachedResultSet(0);
}

uint64_t type metadata accessor for CachedResultSet(uint64_t a1)
{
  return sub_100027D28(a1, qword_10021FA60);
}

uint64_t sub_10010DFE0()
{
  uint64_t result = type metadata accessor for CachedResultSet.Result(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for CachedResultSet.Result(uint64_t a1)
{
  return sub_100027D28(a1, qword_10021FB48);
}

uint64_t *sub_10010E09C(uint64_t *a1, uint64_t *a2, int *a3)
{
  BOOL v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *BOOL v4 = *a2;
    BOOL v4 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    uint64_t v9 = a3[6];
    char v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for Date();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (sub_100027BA4((uint64_t)v11, 1, v12))
    {
      uint64_t v13 = sub_10002572C(&qword_10021BB10);
      memcpy(v10, v11, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
      sub_10002538C((uint64_t)v10, 0, 1, v12);
    }
    uint64_t v15 = a3[7];
    uint64_t v16 = a3[8];
    uint64_t v17 = (uint64_t *)((char *)v4 + v15);
    char v18 = (uint64_t *)((char *)a2 + v15);
    uint64_t v19 = v18[1];
    *uint64_t v17 = *v18;
    v17[1] = v19;
    *(uint64_t *)((char *)v4 + v16) = *(uint64_t *)((char *)a2 + v16);
    uint64_t v20 = a3[10];
    *(_DWORD *)((char *)v4 + a3[9]) = *(_DWORD *)((char *)a2 + a3[9]);
    uint64_t v21 = (uint64_t *)((char *)v4 + v20);
    uint64_t v22 = *(uint64_t *)((char *)a2 + v20);
    unint64_t v23 = *(uint64_t *)((char *)a2 + v20 + 8);
    swift_bridgeObjectRetain();
    sub_100027BCC(v22, v23);
    *uint64_t v21 = v22;
    v21[1] = v23;
    uint64_t v24 = a3[11];
    uint64_t v25 = a3[12];
    uint64_t v26 = (uint64_t *)((char *)v4 + v24);
    uint64_t v27 = (uint64_t *)((char *)a2 + v24);
    uint64_t v28 = v27[1];
    *uint64_t v26 = *v27;
    v26[1] = v28;
    uint64_t v29 = (uint64_t *)((char *)v4 + v25);
    uint64_t v30 = (uint64_t *)((char *)a2 + v25);
    uint64_t v31 = v30[1];
    void *v29 = *v30;
    v29[1] = v31;
    uint64_t v32 = a3[13];
    uint64_t v33 = (uint64_t *)((char *)v4 + v32);
    uint64_t v34 = (uint64_t *)((char *)a2 + v32);
    uint64_t v35 = v34[1];
    *uint64_t v33 = *v34;
    v33[1] = v35;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_10010E288(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for Date();
  if (!sub_100027BA4(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  swift_bridgeObjectRelease();
  sub_1000291B4(*(void *)(a1 + *(int *)(a2 + 40)), *(void *)(a1 + *(int *)(a2 + 40) + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *sub_10010E378(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  uint64_t v8 = a3[6];
  uint64_t v9 = (char *)a1 + v8;
  char v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for Date();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (sub_100027BA4((uint64_t)v10, 1, v11))
  {
    uint64_t v12 = sub_10002572C(&qword_10021BB10);
    memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    sub_10002538C((uint64_t)v9, 0, 1, v11);
  }
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = (void *)((char *)a1 + v13);
  uint64_t v16 = (void *)((char *)a2 + v13);
  uint64_t v17 = v16[1];
  *uint64_t v15 = *v16;
  v15[1] = v17;
  *(void *)((char *)a1 + v14) = *(void *)((char *)a2 + v14);
  uint64_t v18 = a3[10];
  *(_DWORD *)((char *)a1 + a3[9]) = *(_DWORD *)((char *)a2 + a3[9]);
  uint64_t v19 = (void *)((char *)a1 + v18);
  uint64_t v20 = *(void *)((char *)a2 + v18);
  unint64_t v21 = *(void *)((char *)a2 + v18 + 8);
  swift_bridgeObjectRetain();
  sub_100027BCC(v20, v21);
  *uint64_t v19 = v20;
  v19[1] = v21;
  uint64_t v22 = a3[11];
  uint64_t v23 = a3[12];
  uint64_t v24 = (void *)((char *)a1 + v22);
  uint64_t v25 = (void *)((char *)a2 + v22);
  uint64_t v26 = v25[1];
  *uint64_t v24 = *v25;
  v24[1] = v26;
  uint64_t v27 = (void *)((char *)a1 + v23);
  uint64_t v28 = (void *)((char *)a2 + v23);
  uint64_t v29 = v28[1];
  *uint64_t v27 = *v28;
  v27[1] = v29;
  uint64_t v30 = a3[13];
  uint64_t v31 = (void *)((char *)a1 + v30);
  uint64_t v32 = (void *)((char *)a2 + v30);
  uint64_t v33 = v32[1];
  *uint64_t v31 = *v32;
  v31[1] = v33;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_10010E514(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[6];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  int v10 = sub_100027BA4((uint64_t)v7, 1, v9);
  int v11 = sub_100027BA4((uint64_t)v8, 1, v9);
  if (!v10)
  {
    uint64_t v12 = *(void *)(v9 - 8);
    if (!v11)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v11)
  {
LABEL_6:
    uint64_t v13 = sub_10002572C(&qword_10021BB10);
    memcpy(v7, v8, *(void *)(*(void *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  sub_10002538C((uint64_t)v7, 0, 1, v9);
LABEL_7:
  uint64_t v14 = a3[7];
  uint64_t v15 = (void *)((char *)a1 + v14);
  uint64_t v16 = (void *)((char *)a2 + v14);
  *uint64_t v15 = *v16;
  v15[1] = v16[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  *(_DWORD *)((char *)a1 + a3[9]) = *(_DWORD *)((char *)a2 + a3[9]);
  uint64_t v17 = a3[10];
  uint64_t v18 = (void *)((char *)a1 + v17);
  uint64_t v19 = (void *)((char *)a2 + v17);
  uint64_t v20 = *v19;
  unint64_t v21 = v19[1];
  sub_100027BCC(*v19, v21);
  uint64_t v22 = *v18;
  unint64_t v23 = v18[1];
  *uint64_t v18 = v20;
  v18[1] = v21;
  sub_1000291B4(v22, v23);
  uint64_t v24 = a3[11];
  uint64_t v25 = (void *)((char *)a1 + v24);
  uint64_t v26 = (void *)((char *)a2 + v24);
  *uint64_t v25 = *v26;
  v25[1] = v26[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v27 = a3[12];
  uint64_t v28 = (void *)((char *)a1 + v27);
  uint64_t v29 = (void *)((char *)a2 + v27);
  *uint64_t v28 = *v29;
  v28[1] = v29[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v30 = a3[13];
  uint64_t v31 = (void *)((char *)a1 + v30);
  uint64_t v32 = (void *)((char *)a2 + v30);
  *uint64_t v31 = *v32;
  v31[1] = v32[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *sub_10010E7AC(_OWORD *a1, _OWORD *a2, int *a3)
{
  long long v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[6];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  if (sub_100027BA4((uint64_t)v9, 1, v10))
  {
    uint64_t v11 = sub_10002572C(&qword_10021BB10);
    memcpy(v8, v9, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
    sub_10002538C((uint64_t)v8, 0, 1, v10);
  }
  uint64_t v12 = a3[8];
  *(_OWORD *)((char *)a1 + a3[7]) = *(_OWORD *)((char *)a2 + a3[7]);
  *(void *)((char *)a1 + v12) = *(void *)((char *)a2 + v12);
  uint64_t v13 = a3[10];
  *(_DWORD *)((char *)a1 + a3[9]) = *(_DWORD *)((char *)a2 + a3[9]);
  *(_OWORD *)((char *)a1 + v13) = *(_OWORD *)((char *)a2 + v13);
  uint64_t v14 = a3[12];
  *(_OWORD *)((char *)a1 + a3[11]) = *(_OWORD *)((char *)a2 + a3[11]);
  *(_OWORD *)((char *)a1 + v14) = *(_OWORD *)((char *)a2 + v14);
  *(_OWORD *)((char *)a1 + a3[13]) = *(_OWORD *)((char *)a2 + a3[13]);
  return a1;
}

void *sub_10010E8DC(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a3[6];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for Date();
  int v12 = sub_100027BA4((uint64_t)v9, 1, v11);
  int v13 = sub_100027BA4((uint64_t)v10, 1, v11);
  if (!v12)
  {
    uint64_t v14 = *(void *)(v11 - 8);
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 40))(v9, v10, v11);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v14 + 8))(v9, v11);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    uint64_t v15 = sub_10002572C(&qword_10021BB10);
    memcpy(v9, v10, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
  sub_10002538C((uint64_t)v9, 0, 1, v11);
LABEL_7:
  uint64_t v16 = a3[7];
  uint64_t v17 = (void *)((char *)a1 + v16);
  uint64_t v18 = (void *)((char *)a2 + v16);
  uint64_t v20 = *v18;
  uint64_t v19 = v18[1];
  *uint64_t v17 = v20;
  v17[1] = v19;
  swift_bridgeObjectRelease();
  uint64_t v21 = a3[9];
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  *(_DWORD *)((char *)a1 + v21) = *(_DWORD *)((char *)a2 + v21);
  uint64_t v22 = a3[10];
  uint64_t v23 = *(void *)((char *)a1 + v22);
  unint64_t v24 = *(void *)((char *)a1 + v22 + 8);
  *(_OWORD *)((char *)a1 + v22) = *(_OWORD *)((char *)a2 + v22);
  sub_1000291B4(v23, v24);
  uint64_t v25 = a3[11];
  uint64_t v26 = (void *)((char *)a1 + v25);
  uint64_t v27 = (void *)((char *)a2 + v25);
  uint64_t v29 = *v27;
  uint64_t v28 = v27[1];
  *uint64_t v26 = v29;
  v26[1] = v28;
  swift_bridgeObjectRelease();
  uint64_t v30 = a3[12];
  uint64_t v31 = (void *)((char *)a1 + v30);
  uint64_t v32 = (void *)((char *)a2 + v30);
  uint64_t v34 = *v32;
  uint64_t v33 = v32[1];
  *uint64_t v31 = v34;
  v31[1] = v33;
  swift_bridgeObjectRelease();
  uint64_t v35 = a3[13];
  uint64_t v36 = (void *)((char *)a1 + v35);
  uint64_t v37 = (void *)((char *)a2 + v35);
  uint64_t v39 = *v37;
  uint64_t v38 = v37[1];
  *uint64_t v36 = v39;
  v36[1] = v38;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10010EB00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10010EB14);
}

uint64_t sub_10010EB14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_10002572C(&qword_10021BB10);
    uint64_t v9 = a1 + *(int *)(a3 + 24);
    return sub_100027BA4(v9, a2, v8);
  }
}

uint64_t sub_10010EBA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10010EBB4);
}

uint64_t sub_10010EBB4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_10002572C(&qword_10021BB10);
    uint64_t v8 = v5 + *(int *)(a4 + 24);
    return sub_10002538C(v8, a2, a2, v7);
  }
  return result;
}

void sub_10010EC38()
{
  sub_1000442AC();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_10010ED0C(uint64_t *a1, uint64_t *a2)
{
  return sub_10010DDD4(*a1, *a2) & 1;
}

unint64_t sub_10010ED30()
{
  unint64_t result = qword_10021FBA8;
  if (!qword_10021FBA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10021FBA8);
  }
  return result;
}

unint64_t sub_10010ED7C()
{
  unint64_t result = qword_10021FBB8;
  if (!qword_10021FBB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10021FBB8);
  }
  return result;
}

unint64_t sub_10010EDBC()
{
  unint64_t result = qword_10021FBC0;
  if (!qword_10021FBC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10021FBC0);
  }
  return result;
}

uint64_t sub_10010EE08(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Date();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10010EE4C()
{
  unint64_t result = qword_10021FBD0;
  if (!qword_10021FBD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10021FBD0);
  }
  return result;
}

uint64_t sub_10010EE8C(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr))
{
  if (a1)
  {
    a3(&var2);
    if (!v3) {
      char v4 = var2;
    }
  }
  else
  {
    ((void (*)(uint64_t *__return_ptr, void, void))a3)((uint64_t *)((char *)&var2 + 1), 0, 0);
    if (!v3) {
      char v4 = BYTE1(var2);
    }
  }
  return v4 & 1;
}

unsigned char *sub_10010EEEC@<X0>(unsigned char *result@<X0>, BOOL *a2@<X8>)
{
  unsigned int v3 = *result;
  BOOL v4 = v3 > 0x20;
  uint64_t v5 = (1 << v3) & 0x100003E01;
  BOOL v6 = v4 || v5 == 0;
  BOOL v7 = v6 && (result = (unsigned char *)_swift_stdlib_strtof_clocale()) != 0 && *result == 0;
  *a2 = v7;
  return result;
}

unsigned char *sub_10010EF58@<X0>(unsigned char *a1@<X0>, BOOL *a2@<X8>)
{
  return sub_10010EEEC(a1, a2);
}

void *sub_10010EF74@<X0>(unsigned char *a1@<X8>)
{
  unint64_t result = (*(void *(**)(uint64_t *__return_ptr))(v1 + 16))(&v5);
  if (!v2) {
    *a1 = v5;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for CachedResultSet.Result.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF7)
  {
    if (a2 + 9 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 9) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 10;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xA;
  int v5 = v6 - 10;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for CachedResultSet.Result.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF6)
  {
    unsigned int v6 = ((a2 - 247) >> 8) + 1;
    *unint64_t result = a2 + 9;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10010F10CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 9;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CachedResultSet.Result.CodingKeys()
{
  return &type metadata for CachedResultSet.Result.CodingKeys;
}

unint64_t sub_10010F148()
{
  unint64_t result = qword_10021FBD8;
  if (!qword_10021FBD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10021FBD8);
  }
  return result;
}

unint64_t sub_10010F198()
{
  unint64_t result = qword_10021FBE0;
  if (!qword_10021FBE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10021FBE0);
  }
  return result;
}

unint64_t sub_10010F1E8()
{
  unint64_t result = qword_10021FBE8;
  if (!qword_10021FBE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10021FBE8);
  }
  return result;
}

void sub_10010F234(void *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int v4 = (char *)[a1 integerForKey:@"PARSessionSoftLimitOverride"];
  if ((unint64_t)(v4 - 1) > 0x382)
  {
    *(void *)a2 = 0x4082C00000000000;
    if (qword_100218B38 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_10002A10C(v5, (uint64_t)qword_1002369C0);
    unsigned int v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      *(_DWORD *)swift_slowAlloc() = 134217984;
      sub_100026B34();
      sub_10002C3F4((void *)&_mh_execute_header, v8, v9, "Soft limit override must be between 0 and %lld, defaulting to that value");
      swift_slowDealloc();
    }
  }
  else
  {
    *(double *)a2 = (double)(uint64_t)v4;
  }
  uint64_t v10 = (uint64_t)[a1 integerForKey:@"PARSessionIdleTimeOverride"];
  if (v10 < 1)
  {
    *(void *)(a2 + 8) = 0x4066800000000000;
    if (qword_100218B38 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_10002A10C(v11, (uint64_t)qword_1002369C0);
    int v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      *(_DWORD *)swift_slowAlloc() = 134217984;
      sub_100026B34();
      sub_10002C3F4((void *)&_mh_execute_header, v14, v15, "Idle limit override value must be between 0 and %lld, defaulting to that value.");
      swift_slowDealloc();
    }
  }
  else
  {
    *(double *)(a2 + 8) = (double)v10;
  }
  if (qword_100218C68 != -1) {
    swift_once();
  }
  *(double *)(a2 + 16) = *(double *)&qword_10021FBF0 - *(double *)a2;
  type metadata accessor for ClientSessionTimekeeper();
  static Date.distantFuture.getter();
  sub_10010F4F4();
}

void sub_10010F4D0()
{
  qword_10021FBF0 = 0x408C200000000000;
}

void sub_10010F4E4()
{
  qword_10021FBF8 = 0x405E000000000000;
}

void sub_10010F4F4()
{
  uint64_t v1 = type metadata accessor for ClientSessionTimekeeper();
  uint64_t v2 = __chkstk_darwin(v1 - 8);
  unsigned int v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __chkstk_darwin(v2);
  os_log_type_t v7 = (uint64_t *)((char *)&v14 - v6);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v14 - v8;
  if (qword_100218B38 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  sub_10002A10C(v10, (uint64_t)qword_1002369C0);
  sub_10010F734(v0, (uint64_t)v9);
  sub_10010F734(v0, (uint64_t)v7);
  sub_10010F734(v0, (uint64_t)v4);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 134218496;
    uint64_t v15 = *((void *)v9 + 1);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_10010F798((uint64_t)v9);
    *(_WORD *)(v13 + 12) = 2048;
    uint64_t v15 = *v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_10010F798((uint64_t)v7);
    *(_WORD *)(v13 + 22) = 2048;
    uint64_t v15 = *((void *)v4 + 2);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_10010F798((uint64_t)v4);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Idle Time %f Soft Limit Time %f Max Time %f.", (uint8_t *)v13, 0x20u);
    swift_slowDealloc();
  }
  else
  {
    sub_10010F798((uint64_t)v9);
    sub_10010F798((uint64_t)v7);
    sub_10010F798((uint64_t)v4);
  }
}

uint64_t sub_10010F734(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ClientSessionTimekeeper();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10010F798(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ClientSessionTimekeeper();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t *sub_10010F7F4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    uint64_t *v3 = *a2;
    uint64_t v3 = (uint64_t *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = a2[2];
    uint64_t v5 = *(int *)(a3 + 28);
    uint64_t v6 = (char *)a1 + v5;
    os_log_type_t v7 = (char *)a2 + v5;
    uint64_t v8 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t sub_10010F8C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 28);
  uint64_t v3 = type metadata accessor for Date();
  int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);

  return v4(v2, v3);
}

uint64_t sub_10010F930(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

void *sub_10010F9B4(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

uint64_t sub_10010FA40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t sub_10010FAC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t sub_10010FB48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10010FB5C);
}

uint64_t sub_10010FB5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + *(int *)(a3 + 28);
  uint64_t v5 = type metadata accessor for Date();

  return sub_100027BA4(v4, a2, v5);
}

uint64_t sub_10010FBA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10010FBBC);
}

uint64_t sub_10010FBBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1 + *(int *)(a4 + 28);
  uint64_t v6 = type metadata accessor for Date();

  return sub_10002538C(v5, a2, a2, v6);
}

uint64_t sub_10010FC0C()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_10010FCAC(uint64_t a1)
{
  return sub_10010FF74(a1, type metadata accessor for PegasusContext);
}

uint64_t sub_10010FCC4(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  swift_retain();
  uint64_t v2 = (_DWORD *)sub_100026B54();
  *(void *)(v1 + 24) = v2;
  _DWORD *v2 = 0;
  swift_release();
  return v1;
}

uint64_t sub_10010FD04(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  uint64_t v2 = (_DWORD *)swift_slowAlloc();
  *(void *)(v1 + 24) = v2;
  _DWORD *v2 = 0;
  return v1;
}

uint64_t sub_10010FD34(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(v3 + 16) = a1;
  *(void *)(v3 + 24) = a2;
  *(unsigned char *)(v3 + 32) = a3;
  swift_bridgeObjectRetain();
  uint64_t v4 = (_DWORD *)sub_100026B54();
  *(void *)(v3 + 40) = v4;
  sub_10002C414(v4);
  return v3;
}

uint64_t sub_10010FD74(double a1)
{
  *(double *)(v1 + 16) = a1;
  uint64_t v2 = (_DWORD *)sub_100026B54();
  *(void *)(v1 + 24) = v2;
  _DWORD *v2 = 0;
  return v1;
}

uint64_t sub_10010FD9C(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  swift_bridgeObjectRetain();
  uint64_t v2 = (_DWORD *)sub_100026B54();
  *(void *)(v1 + 24) = v2;
  sub_10002C414(v2);
  return v1;
}

uint64_t sub_10010FDD4(int a1)
{
  *(_DWORD *)(v1 + 16) = a1;
  uint64_t v2 = (_DWORD *)sub_100026B54();
  *(void *)(v1 + 24) = v2;
  _DWORD *v2 = 0;
  return v1;
}

uint64_t sub_10010FDFC(uint64_t a1)
{
  sub_100017E10();
  uint64_t v4 = v1 + *(void *)(v3 + 88);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v4, a1, v5);
  sub_100026B54();
  sub_100017E10();
  *(void *)(v1 + *(void *)(v7 + 96)) = v8;
  *uint64_t v8 = 0;
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
  return v1;
}

void *sub_10010FEE4(uint64_t a1, uint64_t a2)
{
  v2[2] = a1;
  v2[3] = a2;
  swift_bridgeObjectRetain();
  uint64_t v3 = (_DWORD *)sub_100026B54();
  v2[4] = v3;
  sub_10002C414(v3);
  return v2;
}

uint64_t sub_10010FF20(void *a1)
{
  *(void *)(v1 + 16) = a1;
  id v2 = a1;
  uint64_t v3 = (_DWORD *)sub_100026B54();
  *(void *)(v1 + 24) = v3;
  _DWORD *v3 = 0;

  return v1;
}

uint64_t sub_10010FF5C(uint64_t a1)
{
  return sub_10010FF74(a1, type metadata accessor for SessionTokens);
}

uint64_t sub_10010FF74(uint64_t a1, uint64_t (*a2)(void))
{
  sub_100017E10();
  sub_100110C0C(v6, v2 + *(void *)(v5 + 88), a2);
  sub_100026B54();
  sub_100017E10();
  *(void *)(v2 + *(void *)(v7 + 96)) = v8;
  *uint64_t v8 = 0;
  sub_100027CC8(a1, a2);
  return v2;
}

uint64_t sub_10010FFE8()
{
  swift_retain();
  uint64_t v0 = sub_1000807E0();
  swift_release();
  return v0;
}

uint64_t sub_100110024()
{
  swift_retain();
  sub_1000823C4();
  swift_release();

  return sub_1001124AC();
}

void *sub_100110080(void *a1)
{
  uint64_t v2 = v1;
  _OWORD v1[3] = 0;
  swift_unknownObjectWeakInit();
  sub_10002572C(&qword_10021FDA8);
  swift_allocObject();
  v1[5] = sub_10010FD04(0);
  v1[6] = 0;
  v1[4] = a1;
  id v4 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  uint64_t v5 = (void *)swift_allocObject();
  swift_weakInit();
  void aBlock[4] = sub_100110C04;
  aBlock[5] = v5;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_1000085EC;
  aBlock[3] = &unk_100201AD0;
  uint64_t v6 = _Block_copy(aBlock);
  id v7 = a1;
  swift_release();
  aBlock[0] = 0;
  id v8 = [v4 initWithDispatchQueue:v7 didUpdate:v6 error:aBlock];
  _Block_release(v6);
  id v9 = aBlock[0];
  if (v8)
  {
    v2[6] = v8;
    swift_unknownObjectRelease();
    sub_100110550();
  }
  else
  {
    uint64_t v10 = v9;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_release();
    if (qword_100218BA8 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_10002A10C(v11, (uint64_t)qword_100236AC0);
    swift_errorRetain();
    swift_errorRetain();
    os_log_type_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      aBlock[0] = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 136315138;
      swift_errorRetain();
      sub_10002572C(&qword_10021B3C0);
      uint64_t v15 = String.init<A>(describing:)();
      sub_10001C274(v15, v16, (uint64_t *)aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Failed to create privacy proxy %s", v14, 0xCu);
      swift_arrayDestroy();
      sub_100017D40();
      sub_100017D40();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    return 0;
  }
  return v2;
}

uint64_t sub_1001103F8()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_100110550();
    return swift_release();
  }
  return result;
}

uint64_t sub_100110450@<X0>(uint64_t *a1@<X8>)
{
  if (qword_100218B60 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10002A10C(v2, (uint64_t)qword_100236A38);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    *(_WORD *)swift_slowAlloc() = 0;
    sub_100017FB8((void *)&_mh_execute_header, v5, v6, "effective tier");
    sub_100017D40();
  }

  *a1 = sub_10010FFE8();
  type metadata accessor for ContextUpdate(0);

  return swift_storeEnumTagMultiPayload();
}

void sub_100110550()
{
  uint64_t v1 = *(void **)(v0 + 48);
  if (v1)
  {
    uint64_t v2 = qword_100218BA8;
    swift_unknownObjectRetain();
    if (v2 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_10002A10C(v3, (uint64_t)qword_100236AC0);
    os_log_type_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v4, v5))
    {
      *(_WORD *)swift_slowAlloc() = 0;
      sub_100017FB8((void *)&_mh_execute_header, v6, v7, "Updating effective tier");
      sub_100017D40();
    }

    uint64_t v8 = swift_allocObject();
    swift_weakInit();
    v10[4] = sub_100110BFC;
    v10[5] = v8;
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 1107296256;
    v10[2] = sub_100110ABC;
    v10[3] = &unk_100201AA8;
    id v9 = _Block_copy(v10);
    swift_release();
    [v1 getEffectiveTierWithCompletion:v9];
    _Block_release(v9);
    swift_unknownObjectRelease();
  }
}

uint64_t sub_1001106E8(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    os_log_type_t v5 = &off_100218000;
    if (a2)
    {
      swift_errorRetain();
      if (qword_100218BA8 != -1) {
        swift_once();
      }
      uint64_t v6 = type metadata accessor for Logger();
      sub_10002A10C(v6, (uint64_t)qword_100236AC0);
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v7 = Logger.logObject.getter();
      os_log_type_t v8 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v7, v8))
      {
        id v9 = (uint8_t *)swift_slowAlloc();
        uint64_t v20 = swift_slowAlloc();
        *(_DWORD *)id v9 = 136315138;
        swift_errorRetain();
        sub_10002572C(&qword_10021B3C0);
        uint64_t v10 = String.init<A>(describing:)();
        sub_10001C274(v10, v11, &v20);
        os_log_type_t v5 = &off_100218000;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v7, v8, "Failed to get privacy proxy tier: %s", v9, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();
        swift_errorRelease();
      }
      a1 = 0;
    }
    else
    {
      if (qword_100218BA8 != -1) {
        swift_once();
      }
      uint64_t v12 = type metadata accessor for Logger();
      sub_10002A10C(v12, (uint64_t)qword_100236AC0);
      os_log_type_t v13 = Logger.logObject.getter();
      os_log_type_t v14 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v13, v14))
      {
        uint64_t v15 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v15 = 134217984;
        uint64_t v20 = a1;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v13, v14, "Updated effective tier is %lu", v15, 0xCu);
        swift_slowDealloc();
      }
    }
    if (sub_10010FFE8() != a1)
    {
      if (v5[373] != (uint64_t (*)())-1) {
        swift_once();
      }
      uint64_t v16 = type metadata accessor for Logger();
      sub_10002A10C(v16, (uint64_t)qword_100236AC0);
      uint64_t v17 = Logger.logObject.getter();
      os_log_type_t v18 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v17, v18))
      {
        uint64_t v19 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v19 = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, v18, "Notifying about tier change", v19, 2u);
        swift_slowDealloc();
      }

      sub_100110024();
    }
    return swift_release();
  }
  return result;
}

void sub_100110ABC(uint64_t a1, uint64_t a2, void *a3)
{
  os_log_type_t v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  swift_retain();
  id v6 = a3;
  v5(a2, a3);
  swift_release();
}

uint64_t sub_100110B34()
{
  sub_10001CDE0(v0 + 16);

  swift_release();
  swift_unknownObjectRelease();
  return v0;
}

uint64_t sub_100110B6C()
{
  sub_100110B34();

  return _swift_deallocClassInstance(v0, 56, 7);
}

uint64_t type metadata accessor for EffectiveTierProvider()
{
  return self;
}

uint64_t sub_100110BC4()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100110BFC(uint64_t a1, uint64_t a2)
{
  return sub_1001106E8(a1, a2);
}

uint64_t sub_100110C04()
{
  return sub_1001103F8();
}

uint64_t sub_100110C0C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void sub_100110C7C(uint64_t a1)
{
  uint64_t v2 = sub_10002572C(&qword_10021BF30);
  __chkstk_darwin(v2 - 8);
  os_log_type_t v4 = &v31[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v41 = type metadata accessor for UserAgent();
  uint64_t v5 = *(void *)(v41 - 8);
  __chkstk_darwin(v41);
  uint64_t v36 = &v31[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = sub_10002572C(&qword_10021FE60);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = &v31[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v8);
  uint64_t v12 = &v31[-v11];
  sub_10001FC30(a1, v40);
  uint64_t v13 = v40[0];
  int64_t v14 = v40[3];
  unint64_t v15 = v40[4];
  uint64_t v38 = v40[1];
  int64_t v39 = (unint64_t)(v40[2] + 64) >> 6;
  uint64_t v34 = (void (**)(unsigned char *, unsigned char *, uint64_t))(v5 + 32);
  uint64_t v33 = (void (**)(unsigned char *, uint64_t))(v5 + 8);
  swift_bridgeObjectRetain();
  uint64_t v37 = _swiftEmptyArrayStorage;
  long long v32 = xmmword_1001A3830;
  while (1)
  {
    if (v15)
    {
      unint64_t v16 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v17 = v16 | (v14 << 6);
      goto LABEL_20;
    }
    int64_t v18 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v18 >= v39) {
      goto LABEL_27;
    }
    unint64_t v19 = *(void *)(v38 + 8 * v18);
    int64_t v20 = v14 + 1;
    if (!v19)
    {
      int64_t v20 = v14 + 2;
      if (v14 + 2 >= v39) {
        goto LABEL_27;
      }
      unint64_t v19 = *(void *)(v38 + 8 * v20);
      if (!v19)
      {
        int64_t v20 = v14 + 3;
        if (v14 + 3 >= v39) {
          goto LABEL_27;
        }
        unint64_t v19 = *(void *)(v38 + 8 * v20);
        if (!v19)
        {
          int64_t v20 = v14 + 4;
          if (v14 + 4 >= v39) {
            goto LABEL_27;
          }
          unint64_t v19 = *(void *)(v38 + 8 * v20);
          if (!v19)
          {
            int64_t v20 = v14 + 5;
            if (v14 + 5 >= v39) {
              goto LABEL_27;
            }
            unint64_t v19 = *(void *)(v38 + 8 * v20);
            if (!v19)
            {
              int64_t v21 = v14 + 6;
              while (v21 < v39)
              {
                unint64_t v19 = *(void *)(v38 + 8 * v21++);
                if (v19)
                {
                  int64_t v20 = v21 - 1;
                  goto LABEL_19;
                }
              }
LABEL_27:
              swift_release();
              return;
            }
          }
        }
      }
    }
LABEL_19:
    unint64_t v15 = (v19 - 1) & v19;
    unint64_t v17 = __clz(__rbit64(v19)) + (v20 << 6);
    int64_t v14 = v20;
LABEL_20:
    uint64_t v22 = *(void *)(v13 + 48);
    uint64_t v23 = type metadata accessor for SessionType();
    (*(void (**)(unsigned char *, unint64_t, uint64_t))(*(void *)(v23 - 8) + 16))(v12, v22 + *(void *)(*(void *)(v23 - 8) + 72) * v17, v23);
    *(void *)&v12[*(int *)(v7 + 48)] = *(void *)(*(void *)(v13 + 56) + 8 * v17);
    sub_10011240C((uint64_t)v12, (uint64_t)v10);
    swift_retain();
    sub_100032384();
    if (sub_100027BA4((uint64_t)v4, 1, v41) == 1)
    {
      sub_100019938((uint64_t)v4, &qword_10021BF30);
      sub_100019938((uint64_t)v10, &qword_10021FE60);
    }
    else
    {
      (*v34)(v36, v4, v41);
      sub_10002572C(&qword_100219988);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = v32;
      *(void *)(inited + 32) = 0x696669746E656469;
      *(void *)(inited + 40) = 0xEA00000000007265;
      *(void *)(inited + 48) = SessionType.description.getter();
      *(void *)(inited + 56) = v25;
      *(void *)(inited + 64) = 0x746E656761;
      *(void *)(inited + 72) = 0xE500000000000000;
      *(void *)(inited + 80) = UserAgent.fullString.getter();
      *(void *)(inited + 88) = v26;
      uint64_t v35 = Dictionary.init(dictionaryLiteral:)();
      (*v33)(v36, v41);
      sub_100019938((uint64_t)v10, &qword_10021FE60);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_100065DF0();
        uint64_t v37 = v29;
      }
      unint64_t v27 = v37[2];
      if (v27 >= v37[3] >> 1)
      {
        sub_100065DF0();
        uint64_t v37 = v30;
      }
      uint64_t v28 = v37;
      v37[2] = v27 + 1;
      v28[v27 + 4] = v35;
    }
  }
  __break(1u);
}

uint64_t sub_100111180(uint64_t a1)
{
  uint64_t v2 = sub_10002572C(&qword_10021FE60);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v22[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v22[-1] - v6;
  sub_10001FC30(a1, v22);
  uint64_t v8 = v22[0];
  uint64_t v23 = v22[1];
  int64_t v9 = v22[3];
  unint64_t v10 = v22[4];
  int64_t v11 = (unint64_t)(v22[2] + 64) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  if (!v10) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v13 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  unint64_t v14 = v13 | (v9 << 6);
  while (1)
  {
    uint64_t v19 = *(void *)(v8 + 48);
    uint64_t v20 = type metadata accessor for SessionType();
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v20 - 8) + 16))(v7, v19 + *(void *)(*(void *)(v20 - 8) + 72) * v14, v20);
    *(void *)&v7[*(int *)(v2 + 48)] = *(void *)(*(void *)(v8 + 56) + 8 * v14);
    sub_10011240C((uint64_t)v7, (uint64_t)v5);
    if (*(void *)(*(void *)(*(void *)&v5[*(int *)(v2 + 48)] + 64) + 32))
    {
      swift_retain();
      swift_retain();
      sub_1000F0C24();
      swift_release();
    }
    else
    {
      swift_retain();
    }
    uint64_t result = sub_100019938((uint64_t)v5, &qword_10021FE60);
    if (v10) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v15 = v9 + 1;
    if (__OFADD__(v9, 1)) {
      break;
    }
    if (v15 >= v11) {
      return swift_release();
    }
    unint64_t v16 = *(void *)(v23 + 8 * v15);
    int64_t v17 = v9 + 1;
    if (!v16)
    {
      int64_t v17 = v9 + 2;
      if (v9 + 2 >= v11) {
        return swift_release();
      }
      unint64_t v16 = *(void *)(v23 + 8 * v17);
      if (!v16)
      {
        int64_t v17 = v9 + 3;
        if (v9 + 3 >= v11) {
          return swift_release();
        }
        unint64_t v16 = *(void *)(v23 + 8 * v17);
        if (!v16)
        {
          int64_t v17 = v9 + 4;
          if (v9 + 4 >= v11) {
            return swift_release();
          }
          unint64_t v16 = *(void *)(v23 + 8 * v17);
          if (!v16)
          {
            int64_t v17 = v9 + 5;
            if (v9 + 5 >= v11) {
              return swift_release();
            }
            unint64_t v16 = *(void *)(v23 + 8 * v17);
            if (!v16)
            {
              int64_t v18 = v9 + 6;
              while (v18 < v11)
              {
                unint64_t v16 = *(void *)(v23 + 8 * v18++);
                if (v16)
                {
                  int64_t v17 = v18 - 1;
                  goto LABEL_18;
                }
              }
              return swift_release();
            }
          }
        }
      }
    }
LABEL_18:
    unint64_t v10 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v17 << 6);
    int64_t v9 = v17;
  }
  __break(1u);
  return result;
}

uint64_t sub_100111404(uint64_t a1)
{
  uint64_t v2 = sub_10002572C(&qword_10021FE60);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v20[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001FC30(a1, v20);
  uint64_t v5 = v20[0];
  uint64_t v6 = v20[1];
  int64_t v7 = v20[3];
  unint64_t v8 = v20[4];
  int64_t v9 = (unint64_t)(v20[2] + 64) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  if (!v8) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v11 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  unint64_t v12 = v11 | (v7 << 6);
  while (1)
  {
    uint64_t v17 = *(void *)(v5 + 48);
    uint64_t v18 = type metadata accessor for SessionType();
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v18 - 8) + 16))(v4, v17 + *(void *)(*(void *)(v18 - 8) + 72) * v12, v18);
    *(void *)&v4[*(int *)(v2 + 48)] = *(void *)(*(void *)(v5 + 56) + 8 * v12);
    swift_retain();
    swift_unknownObjectRetain();
    sub_1000E6E24(0, 0);
    swift_unknownObjectRelease();
    uint64_t result = sub_100019938((uint64_t)v4, &qword_10021FE60);
    if (v8) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v13 = v7 + 1;
    if (__OFADD__(v7, 1)) {
      break;
    }
    if (v13 >= v9) {
      return swift_release();
    }
    unint64_t v14 = *(void *)(v6 + 8 * v13);
    int64_t v15 = v7 + 1;
    if (!v14)
    {
      int64_t v15 = v7 + 2;
      if (v7 + 2 >= v9) {
        return swift_release();
      }
      unint64_t v14 = *(void *)(v6 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v7 + 3;
        if (v7 + 3 >= v9) {
          return swift_release();
        }
        unint64_t v14 = *(void *)(v6 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v7 + 4;
          if (v7 + 4 >= v9) {
            return swift_release();
          }
          unint64_t v14 = *(void *)(v6 + 8 * v15);
          if (!v14)
          {
            int64_t v15 = v7 + 5;
            if (v7 + 5 >= v9) {
              return swift_release();
            }
            unint64_t v14 = *(void *)(v6 + 8 * v15);
            if (!v14)
            {
              int64_t v16 = v7 + 6;
              while (v16 < v9)
              {
                unint64_t v14 = *(void *)(v6 + 8 * v16++);
                if (v14)
                {
                  int64_t v15 = v16 - 1;
                  goto LABEL_18;
                }
              }
              return swift_release();
            }
          }
        }
      }
    }
LABEL_18:
    unint64_t v8 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
    int64_t v7 = v15;
  }
  __break(1u);
  return result;
}

uint64_t sub_100111624@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v27 = a2;
  uint64_t v3 = sub_10002572C(&qword_10021FE60);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  unint64_t v8 = (char *)&v26 - v7;
  sub_10001FC30(a1, v28);
  uint64_t v9 = v28[0];
  uint64_t v29 = v28[1];
  int64_t v10 = v28[3];
  unint64_t v11 = v28[4];
  int64_t v12 = (unint64_t)(v28[2] + 64) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  if (!v11) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v14 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  unint64_t v15 = v14 | (v10 << 6);
  while (1)
  {
    uint64_t v20 = *(void *)(v9 + 48);
    uint64_t v21 = type metadata accessor for SessionType();
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v21 - 8) + 16))(v8, v20 + *(void *)(*(void *)(v21 - 8) + 72) * v15, v21);
    *(void *)&v8[*(int *)(v3 + 48)] = *(void *)(*(void *)(v9 + 56) + 8 * v15);
    sub_10011240C((uint64_t)v8, (uint64_t)v6);
    int v22 = *(unsigned __int8 *)(*(void *)(*(void *)&v6[*(int *)(v3 + 48)] + 64) + 88);
    swift_retain();
    if (!v22)
    {
      swift_release();
      uint64_t v23 = v27;
      sub_10011240C((uint64_t)v6, v27);
      uint64_t v24 = v23;
      uint64_t v25 = 0;
      return sub_10002538C(v24, v25, 1, v3);
    }
    uint64_t result = sub_100019938((uint64_t)v6, &qword_10021FE60);
    if (v11) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v16 = v10 + 1;
    if (__OFADD__(v10, 1)) {
      break;
    }
    if (v16 >= v12) {
      goto LABEL_23;
    }
    unint64_t v17 = *(void *)(v29 + 8 * v16);
    int64_t v18 = v10 + 1;
    if (!v17)
    {
      int64_t v18 = v10 + 2;
      if (v10 + 2 >= v12) {
        goto LABEL_23;
      }
      unint64_t v17 = *(void *)(v29 + 8 * v18);
      if (!v17)
      {
        int64_t v18 = v10 + 3;
        if (v10 + 3 >= v12) {
          goto LABEL_23;
        }
        unint64_t v17 = *(void *)(v29 + 8 * v18);
        if (!v17)
        {
          int64_t v18 = v10 + 4;
          if (v10 + 4 >= v12) {
            goto LABEL_23;
          }
          unint64_t v17 = *(void *)(v29 + 8 * v18);
          if (!v17)
          {
            int64_t v18 = v10 + 5;
            if (v10 + 5 >= v12) {
              goto LABEL_23;
            }
            unint64_t v17 = *(void *)(v29 + 8 * v18);
            if (!v17)
            {
              int64_t v19 = v10 + 6;
              while (v19 < v12)
              {
                unint64_t v17 = *(void *)(v29 + 8 * v19++);
                if (v17)
                {
                  int64_t v18 = v19 - 1;
                  goto LABEL_18;
                }
              }
LABEL_23:
              swift_release();
              uint64_t v24 = v27;
              uint64_t v25 = 1;
              return sub_10002538C(v24, v25, 1, v3);
            }
          }
        }
      }
    }
LABEL_18:
    unint64_t v11 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v18 << 6);
    int64_t v10 = v18;
  }
  __break(1u);
  return result;
}

uint64_t sub_1001118BC@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v27 = a3;
  uint64_t v31 = a2;
  uint64_t v4 = sub_10002572C(&qword_10021FE60);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v26 - v8;
  sub_10001FC30(a1, v30);
  uint64_t v10 = v30[0];
  int64_t v11 = v30[3];
  unint64_t v12 = v30[4];
  uint64_t v28 = v30[1];
  int64_t v29 = (unint64_t)(v30[2] + 64) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  if (!v12) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v14 = __clz(__rbit64(v12));
  v12 &= v12 - 1;
  unint64_t v15 = v14 | (v11 << 6);
  while (1)
  {
    uint64_t v20 = *(void *)(v10 + 48);
    uint64_t v21 = type metadata accessor for SessionType();
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v21 - 8) + 16))(v9, v20 + *(void *)(*(void *)(v21 - 8) + 72) * v15, v21);
    *(void *)&v9[*(int *)(v4 + 48)] = *(void *)(*(void *)(v10 + 56) + 8 * v15);
    sub_10011240C((uint64_t)v9, (uint64_t)v7);
    uint64_t v22 = *(void *)&v7[*(int *)(v4 + 48)];
    swift_retain();
    if (v31(v22))
    {
      swift_release();
      uint64_t v23 = v27;
      sub_10011240C((uint64_t)v7, v27);
      uint64_t v24 = v23;
      uint64_t v25 = 0;
      return sub_10002538C(v24, v25, 1, v4);
    }
    uint64_t result = sub_100019938((uint64_t)v7, &qword_10021FE60);
    if (v12) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      break;
    }
    if (v16 >= v29) {
      goto LABEL_23;
    }
    unint64_t v17 = *(void *)(v28 + 8 * v16);
    int64_t v18 = v11 + 1;
    if (!v17)
    {
      int64_t v18 = v11 + 2;
      if (v11 + 2 >= v29) {
        goto LABEL_23;
      }
      unint64_t v17 = *(void *)(v28 + 8 * v18);
      if (!v17)
      {
        int64_t v18 = v11 + 3;
        if (v11 + 3 >= v29) {
          goto LABEL_23;
        }
        unint64_t v17 = *(void *)(v28 + 8 * v18);
        if (!v17)
        {
          int64_t v18 = v11 + 4;
          if (v11 + 4 >= v29) {
            goto LABEL_23;
          }
          unint64_t v17 = *(void *)(v28 + 8 * v18);
          if (!v17)
          {
            int64_t v18 = v11 + 5;
            if (v11 + 5 >= v29) {
              goto LABEL_23;
            }
            unint64_t v17 = *(void *)(v28 + 8 * v18);
            if (!v17)
            {
              int64_t v19 = v11 + 6;
              while (v19 < v29)
              {
                unint64_t v17 = *(void *)(v28 + 8 * v19++);
                if (v17)
                {
                  int64_t v18 = v19 - 1;
                  goto LABEL_18;
                }
              }
LABEL_23:
              swift_release();
              uint64_t v24 = v27;
              uint64_t v25 = 1;
              return sub_10002538C(v24, v25, 1, v4);
            }
          }
        }
      }
    }
LABEL_18:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v18 << 6);
    int64_t v11 = v18;
  }
  __break(1u);
  return result;
}

uint64_t sub_100111B7C()
{
  sub_100026B6C(*(os_unfair_lock_s **)(v0 + 32));
  sub_10002C42C();
  sub_100111BC8(v2);
  os_unfair_lock_unlock(v1);
  return v4;
}

uint64_t sub_100111BC8@<X0>(void *a1@<X8>)
{
  uint64_t v2 = swift_bridgeObjectRetain();
  sub_100110C7C(v2);
  uint64_t v4 = v3;
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v4;
  return result;
}

void sub_100111C18()
{
  sub_100026B6C(*(os_unfair_lock_s **)(v0 + 32));
  uint64_t v2 = sub_10002C42C();
  sub_100111C5C(v2);
  os_unfair_lock_unlock(v1);
}

uint64_t sub_100111C5C(uint64_t a1)
{
  return sub_1001121D4(a1, (void (*)(uint64_t))sub_100111180);
}

void sub_100111C88()
{
  sub_100026B6C(*(os_unfair_lock_s **)(v0 + 32));
  uint64_t v2 = (uint64_t *)sub_100025B94();
  sub_100112490(v2);
  os_unfair_lock_unlock(v1);
}

uint64_t sub_100111CD0(uint64_t *a1, uint64_t a2)
{
  uint64_t v34 = a1;
  uint64_t v3 = type metadata accessor for SessionType();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v29 - v8;
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v31 = a2 + 56;
  uint64_t v11 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & v10;
  uint64_t v36 = v4 + 16;
  uint64_t v35 = v4 + 32;
  int64_t v32 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v33 = (uint64_t (**)(char *, uint64_t))(v4 + 8);
  uint64_t v14 = a2;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v16 = 0;
  uint64_t v30 = v4;
  while (1)
  {
    if (v13)
    {
      unint64_t v17 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v18 = v17 | (v16 << 6);
      goto LABEL_17;
    }
    if (__OFADD__(v16++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v16 >= v32) {
      return swift_release();
    }
    unint64_t v20 = *(void *)(v31 + 8 * v16);
    if (!v20) {
      break;
    }
LABEL_16:
    unint64_t v13 = (v20 - 1) & v20;
    unint64_t v18 = __clz(__rbit64(v20)) + (v16 << 6);
LABEL_17:
    (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v9, *(void *)(v14 + 48) + *(void *)(v4 + 72) * v18, v3);
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v7, v9, v3);
    uint64_t v22 = *v34;
    if (*(void *)(*v34 + 16) && (unint64_t v23 = sub_100019A28(), (v24 & 1) != 0))
    {
      uint64_t v25 = *(void *)(*(void *)(v22 + 56) + 8 * v23);
      uint64_t v26 = *v33;
      swift_retain();
      v26(v7, v3);
      uint64_t v27 = *(void *)(v25 + 64);
      swift_unknownObjectRetain();
      swift_release();
      uint64_t v28 = *(void *)(v27 + 32);
      swift_retain();
      uint64_t v4 = v30;
      uint64_t result = swift_unknownObjectRelease();
      if (v28)
      {
        sub_1000F0C24();
        uint64_t result = swift_release();
      }
    }
    else
    {
      uint64_t result = (*v33)(v7, v3);
    }
  }
  int64_t v21 = v16 + 1;
  if (v16 + 1 >= v32) {
    return swift_release();
  }
  unint64_t v20 = *(void *)(v31 + 8 * v21);
  if (v20) {
    goto LABEL_15;
  }
  int64_t v21 = v16 + 2;
  if (v16 + 2 >= v32) {
    return swift_release();
  }
  unint64_t v20 = *(void *)(v31 + 8 * v21);
  if (v20) {
    goto LABEL_15;
  }
  int64_t v21 = v16 + 3;
  if (v16 + 3 >= v32) {
    return swift_release();
  }
  unint64_t v20 = *(void *)(v31 + 8 * v21);
  if (v20)
  {
LABEL_15:
    int64_t v16 = v21;
    goto LABEL_16;
  }
  while (1)
  {
    int64_t v16 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v16 >= v32) {
      return swift_release();
    }
    unint64_t v20 = *(void *)(v31 + 8 * v16);
    ++v21;
    if (v20) {
      goto LABEL_16;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_100111FF0()
{
  sub_100026B6C(*(os_unfair_lock_s **)(v0 + 32));
  sub_10002C42C();
  sub_10011203C(v2);
  os_unfair_lock_unlock(v1);
  return v4;
}

uint64_t sub_10011203C@<X0>(void *a1@<X8>)
{
  uint64_t v2 = sub_10002572C(&qword_10021FE58);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = swift_bridgeObjectRetain();
  sub_100111624(v5, (uint64_t)v4);
  swift_bridgeObjectRelease();
  uint64_t v6 = sub_10002572C(&qword_10021FE60);
  if (sub_100027BA4((uint64_t)v4, 1, v6) == 1)
  {
    uint64_t result = sub_100019938((uint64_t)v4, &qword_10021FE58);
    *a1 = 0;
  }
  else
  {
    *a1 = *(void *)&v4[*(int *)(v6 + 48)];
    uint64_t v8 = type metadata accessor for SessionType();
    return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v8 - 8) + 8))(v4, v8);
  }
  return result;
}

void sub_100112164()
{
  sub_100026B6C(*(os_unfair_lock_s **)(v0 + 32));
  uint64_t v2 = sub_10002C42C();
  sub_1001121A8(v2);
  os_unfair_lock_unlock(v1);
}

uint64_t sub_1001121A8(uint64_t a1)
{
  return sub_1001121D4(a1, (void (*)(uint64_t))sub_100111404);
}

uint64_t sub_1001121D4(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v3 = swift_bridgeObjectRetain();
  a2(v3);
  return swift_bridgeObjectRelease();
}

uint64_t sub_100112218()
{
  sub_100026B6C(*(os_unfair_lock_s **)(v0 + 32));
  sub_100025B94();
  sub_100112474(v2);
  os_unfair_lock_unlock(v1);
  return v4;
}

uint64_t sub_100112268@<X0>(uint64_t (*a1)(uint64_t)@<X1>, void *a2@<X8>)
{
  uint64_t v4 = sub_10002572C(&qword_10021FE58);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = swift_bridgeObjectRetain();
  sub_1001118BC(v7, a1, (uint64_t)v6);
  swift_bridgeObjectRelease();
  uint64_t v8 = sub_10002572C(&qword_10021FE60);
  if (sub_100027BA4((uint64_t)v6, 1, v8) == 1)
  {
    uint64_t result = sub_100019938((uint64_t)v6, &qword_10021FE58);
    *a2 = 0;
  }
  else
  {
    *a2 = *(void *)&v6[*(int *)(v8 + 48)];
    uint64_t v10 = type metadata accessor for SessionType();
    return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v10 - 8) + 8))(v6, v10);
  }
  return result;
}

uint64_t sub_1001123A8()
{
  sub_10001CDE0(v0 + 16);
  swift_release();

  return _swift_deallocClassInstance(v0, 40, 7);
}

uint64_t type metadata accessor for ClientStateManager()
{
  return self;
}

uint64_t sub_10011240C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10002572C(&qword_10021FE60);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100112474@<X0>(void *a1@<X8>)
{
  return sub_100112268(*(uint64_t (**)(uint64_t))(v1 + 16), a1);
}

uint64_t sub_100112490(uint64_t *a1)
{
  return sub_100111CD0(a1, *(void *)(v1 + 16));
}

uint64_t sub_1001124AC()
{
  uint64_t v3 = type metadata accessor for ContextUpdate(0);
  __chkstk_darwin(v3 - 8);
  sub_100025BA4();
  sub_100020C48();
  __chkstk_darwin(v4);
  sub_100016550();
  uint64_t v5 = *(void **)(v1 + 32);
  void *v2 = v5;
  uint64_t v6 = sub_100024BD0();
  v7(v6);
  id v8 = v5;
  _dispatchPreconditionTest(_:)();
  uint64_t v9 = sub_10002A618();
  uint64_t result = v10(v9);
  if (v5)
  {
    uint64_t result = swift_unknownObjectWeakLoadStrong();
    if (result)
    {
      sub_100110450(v0);
      sub_1000FBC9C();
      swift_unknownObjectRelease();
      return sub_1000631C8((uint64_t)v0);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1001125B4()
{
  uint64_t v3 = type metadata accessor for ContextUpdate(0);
  __chkstk_darwin(v3 - 8);
  sub_100025BA4();
  sub_100020C48();
  __chkstk_darwin(v4);
  sub_100016550();
  uint64_t v5 = *(void **)(v1 + OBJC_IVAR____TtC7parsecd28StorefrontIdentifierProvider_queue);
  void *v2 = v5;
  uint64_t v6 = sub_100024BD0();
  v7(v6);
  id v8 = v5;
  _dispatchPreconditionTest(_:)();
  uint64_t v9 = sub_10002A618();
  uint64_t result = v10(v9);
  if (v5)
  {
    uint64_t result = swift_unknownObjectWeakLoadStrong();
    if (result)
    {
      sub_100107418(v0);
      sub_1000FBC9C();
      swift_unknownObjectRelease();
      return sub_1000631C8((uint64_t)v0);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1001126D4()
{
  uint64_t v3 = type metadata accessor for ContextUpdate(0);
  __chkstk_darwin(v3 - 8);
  sub_100025BA4();
  sub_100020C48();
  __chkstk_darwin(v4);
  sub_100016550();
  uint64_t v5 = *(void **)(v1 + 40);
  void *v2 = v5;
  uint64_t v6 = sub_100024BD0();
  v7(v6);
  id v8 = v5;
  _dispatchPreconditionTest(_:)();
  uint64_t v9 = sub_10002A618();
  uint64_t result = v10(v9);
  if (v5)
  {
    uint64_t result = swift_unknownObjectWeakLoadStrong();
    if (result)
    {
      sub_100112D74(v0);
      sub_1000FBC9C();
      swift_unknownObjectRelease();
      return sub_1000631C8((uint64_t)v0);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1001127DC()
{
  uint64_t result = sub_100112800();
  qword_100236CA0 = result;
  *(void *)algn_100236CA8 = v1;
  return result;
}

uint64_t sub_100112800()
{
  uint64_t v0 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v0 - 8);
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  sub_10002572C(&qword_100220090);
  sub_1001136C8();
  uint64_t v1 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v3 = v2;
  swift_release();
  static String.Encoding.utf8.getter();
  uint64_t v5 = String.init(data:encoding:)();
  if (v6)
  {
    uint64_t v4 = v5;
    sub_1000291B4(v1, v3);
  }
  else
  {
    sub_10000A330(v1, v3);
    swift_bridgeObjectRelease();
    return 23899;
  }
  return v4;
}

uint64_t sub_10011294C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x72656469766F7270 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x7475626972747461 && a2 == 0xE900000000000065;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0x657669746361 && a2 == 0xE600000000000000)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v8) {
        return 2;
      }
      else {
        return 3;
      }
    }
  }
}

uint64_t static AvroPrimitiveSchema.long.getter()
{
  return 3;
}

uint64_t sub_100112AA8(char a1)
{
  if (!a1) {
    return 0x72656469766F7270;
  }
  if (a1 == 1) {
    return 0x7475626972747461;
  }
  return 0x657669746361;
}

uint64_t sub_100112B00(void *a1)
{
  uint64_t v4 = sub_10002572C(&qword_1002200A8);
  sub_100020C48();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  sub_100016550();
  sub_10001B620(a1, a1[3]);
  sub_100113940();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    KeyedEncodingContainer.encode(_:forKey:)();
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v2, v4);
}

uint64_t sub_100112C50()
{
  return sub_100112AA8(*v0);
}

uint64_t sub_100112C58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10011294C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100112C80@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = static AvroPrimitiveSchema.long.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100112CA8(uint64_t a1)
{
  unint64_t v2 = sub_100113940();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100112CE4(uint64_t a1)
{
  unint64_t v2 = sub_100113940();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100112D20(void *a1)
{
  return sub_100112B00(a1);
}

uint64_t sub_100112D38(uint64_t a1)
{
  *(void *)(v1 + 24) = 0;
  swift_unknownObjectWeakInit();
  *(unsigned char *)(v1 + 32) = 0;
  *(void *)(v1 + 40) = a1;
  return v1;
}

uint64_t sub_100112D74@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  if (qword_100218B60 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_10002A10C(v4, (uint64_t)qword_100236A38);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "updating subscriptions", v7, 2u);
    swift_slowDealloc();
  }

  if (*(unsigned char *)(v2 + 32) == 1)
  {
    if (qword_100218C78 != -1) {
      swift_once();
    }
    uint64_t v8 = qword_100236CA0;
    uint64_t v9 = swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v9 = 0xE200000000000000;
    uint64_t v8 = 23899;
  }
  *a1 = v8;
  a1[1] = v9;
  type metadata accessor for ContextUpdate(0);

  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_100112EDC(uint64_t a1, char a2)
{
  uint64_t v5 = *(void **)(v2 + 40);
  uint64_t v6 = swift_allocObject();
  swift_weakInit();
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = v6;
  *(void *)(v7 + 24) = a1;
  *(unsigned char *)(v7 + 32) = a2 & 1;
  void aBlock[4] = sub_1001136BC;
  aBlock[5] = v7;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000085EC;
  aBlock[3] = &unk_100201BC0;
  uint64_t v8 = _Block_copy(aBlock);
  v22[0] = type metadata accessor for DispatchQoS();
  sub_100020C48();
  uint64_t v10 = v9;
  __chkstk_darwin(v11);
  unint64_t v13 = (char *)v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v14 = v5;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v15 = type metadata accessor for DispatchWorkItemFlags();
  sub_100020C48();
  uint64_t v17 = v16;
  __chkstk_darwin(v18);
  unint64_t v20 = (char *)v22 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22[1] = _swiftEmptyArrayStorage;
  sub_10003045C();
  sub_10002572C((uint64_t *)&unk_10021BAF0);
  sub_1000301A0();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v8);

  (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v15);
  (*(void (**)(char *, void))(v10 + 8))(v13, v22[0]);
  swift_release();
  return swift_release();
}

uint64_t sub_10011313C(uint64_t a1, uint64_t a2, char a3)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v6 = result;
    if (qword_100218B60 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_10002A10C(v7, (uint64_t)qword_100236A38);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "updating subscriptions", v10, 2u);
      swift_slowDealloc();
    }

    if (a3)
    {
      char v18 = *(unsigned char *)(v6 + 32);
      uint64_t v12 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.info.getter();
      BOOL v20 = os_log_type_enabled(v12, v19);
      if (v18)
      {
        if (v20)
        {
          int64_t v21 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)int64_t v21 = 0;
          _os_log_impl((void *)&_mh_execute_header, v12, v19, "Subscription status went nil", v21, 2u);
          swift_slowDealloc();
        }

        *(unsigned char *)(v6 + 32) = 0;
        goto LABEL_21;
      }
      if (v20)
      {
        unint64_t v23 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v23 = 0;
        os_log_type_t v26 = v19;
        char v24 = "Subscription status is nil";
        uint64_t v25 = v12;
        goto LABEL_26;
      }
    }
    else
    {
      int v11 = *(unsigned __int8 *)(v6 + 32);
      uint64_t v12 = Logger.logObject.getter();
      if ((a2 == 1) != v11)
      {
        os_log_type_t v13 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v12, v13))
        {
          id v14 = (uint8_t *)swift_slowAlloc();
          uint64_t v15 = swift_slowAlloc();
          *(_DWORD *)id v14 = 136315138;
          uint64_t v27 = v15;
          if (a2 == 1) {
            uint64_t v16 = 0x64656C62616E65;
          }
          else {
            uint64_t v16 = 0x64656C6261736964;
          }
          if (a2 == 1) {
            unint64_t v17 = 0xE700000000000000;
          }
          else {
            unint64_t v17 = 0xE800000000000000;
          }
          sub_10001C274(v16, v17, &v27);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v12, v13, "Subscriptions are %s", v14, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }

        *(unsigned char *)(v6 + 32) = a2 == 1;
LABEL_21:
        sub_1001126D4();
        return swift_release();
      }
      os_log_type_t v22 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v12, v22))
      {
        unint64_t v23 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v23 = 0;
        char v24 = "Subscription status did not change";
        uint64_t v25 = v12;
        os_log_type_t v26 = v22;
LABEL_26:
        _os_log_impl((void *)&_mh_execute_header, v25, v26, v24, v23, 2u);
        swift_slowDealloc();
      }
    }

    return swift_release();
  }
  return result;
}

uint64_t type metadata accessor for SubscriptionProvider()
{
  return self;
}

uint64_t sub_1001134F4(uint64_t a1, void *a2)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    if (a2) {
      id v4 = [a2 statusType];
    }
    else {
      id v4 = 0;
    }
    sub_100112EDC((uint64_t)v4, a2 == 0);
    return swift_release();
  }
  return result;
}

uint64_t sub_100113574()
{
  return swift_unknownObjectRelease();
}

uint64_t sub_1001135A4()
{
  if (*(void *)(v0 + 56)) {
    objc_msgSend(*(id *)(v0 + 48), "endObservingSubscriptionStatusWithToken:");
  }
  sub_10001CDE0(v0 + 16);

  swift_unknownObjectRelease();
  return v0;
}

uint64_t sub_1001135F4()
{
  sub_1001135A4();

  return _swift_deallocClassInstance(v0, 64, 7);
}

uint64_t type metadata accessor for FuseSubscriptionProvider()
{
  return self;
}

uint64_t sub_10011364C()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100113684()
{
  swift_release();

  return _swift_deallocObject(v0, 33, 7);
}

uint64_t sub_1001136BC()
{
  return sub_10011313C(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
}

unint64_t sub_1001136C8()
{
  unint64_t result = qword_100220098;
  if (!qword_100220098)
  {
    sub_1000371D4(&qword_100220090);
    sub_10011373C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100220098);
  }
  return result;
}

unint64_t sub_10011373C()
{
  unint64_t result = qword_1002200A0;
  if (!qword_1002200A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002200A0);
  }
  return result;
}

uint64_t initializeWithCopy for SubscriptionProvider.SubscriptionState(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SubscriptionProvider.SubscriptionState(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return a1;
}

__n128 initializeWithTake for SubscriptionProvider.SubscriptionState(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for SubscriptionProvider.SubscriptionState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for SubscriptionProvider.SubscriptionState(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 33))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SubscriptionProvider.SubscriptionState(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 33) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SubscriptionProvider.SubscriptionState()
{
  return &type metadata for SubscriptionProvider.SubscriptionState;
}

unint64_t sub_100113940()
{
  unint64_t result = qword_1002200B0;
  if (!qword_1002200B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002200B0);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for SubscriptionProvider.SubscriptionState.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100113A58);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SubscriptionProvider.SubscriptionState.CodingKeys()
{
  return &type metadata for SubscriptionProvider.SubscriptionState.CodingKeys;
}

unint64_t sub_100113A94()
{
  unint64_t result = qword_1002200B8;
  if (!qword_1002200B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002200B8);
  }
  return result;
}

unint64_t sub_100113AE4()
{
  unint64_t result = qword_1002200C0;
  if (!qword_1002200C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002200C0);
  }
  return result;
}

unint64_t sub_100113B34()
{
  unint64_t result = qword_1002200C8;
  if (!qword_1002200C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002200C8);
  }
  return result;
}

void sub_100113B80(unint64_t a1)
{
  uint64_t v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_100114CE4(v3);
    uint64_t v3 = v6;
  }
  unint64_t v4 = *(void *)(v3 + 16);
  if (v4 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v5 = v4 - 1;
    sub_100119348((char *)(v3 + 24 * a1 + 56), v4 - 1 - a1, (char *)(v3 + 24 * a1 + 32));
    *(void *)(v3 + 16) = v5;
    uint64_t *v1 = v3;
  }
}

uint64_t sub_100113C14(unint64_t a1)
{
  unint64_t v3 = *v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_bridgeObject();
  unint64_t *v1 = v3;
  if (!result || (v3 & 0x8000000000000000) != 0 || (v3 & 0x4000000000000000) != 0)
  {
    uint64_t result = sub_100114CF8(v3);
    unint64_t v3 = result;
    unint64_t *v1 = result;
  }
  uint64_t v5 = v3 & 0xFFFFFFFFFFFFFF8;
  unint64_t v6 = *(void *)(v5 + 16);
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v7 = v6 - 1;
    uint64_t v8 = v6 - 1 - a1;
    uint64_t v9 = v5 + 8 * a1;
    uint64_t v10 = *(void *)(v9 + 32);
    sub_10011955C((char *)(v9 + 40), v8, (char *)(v9 + 32));
    *(void *)(v5 + 16) = v7;
    specialized Array._endMutation()();
    return v10;
  }
  return result;
}

uint64_t sub_100113CA0()
{
  uint64_t v1 = dispatch_group_create();
  dispatch_group_enter(v1);
  sub_10002572C(&qword_1002201D8);
  uint64_t v2 = swift_allocObject();
  *(_DWORD *)(v2 + 36) = 0;
  *(void *)(v2 + 16) = v1;
  *(void *)(v2 + 24) = 0;
  *(unsigned char *)(v2 + 32) = 0;
  *(void *)(v0 + 16) = v2;
  return v0;
}

uint64_t sub_100113CF4()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  uint64_t v2 = (uint64_t)&v1[4];
  unint64_t v3 = v1 + 9;
  os_unfair_lock_lock(v1 + 9);
  sub_100114D74(v2, &v5);
  os_unfair_lock_unlock(v3);
  return v5;
}

uint64_t sub_100113D54(uint64_t a1)
{
  void (*v2)(uint64_t *__return_ptr, uint64_t);
  uint64_t v3;
  uint64_t v5;

  if (*(unsigned char *)(a1 + 16) != 1) {
    return 0;
  }
  uint64_t v2 = *(void (**)(uint64_t *__return_ptr, uint64_t))a1;
  uint64_t v1 = *(void **)(a1 + 8);
  unint64_t v3 = swift_retain();
  v2(&v5, v3);
  sub_1000313DC(v2, v1, 1);
  return v5;
}

uint64_t sub_100113DCC()
{
  swift_retain();
  uint64_t v0 = sub_100113CF4();
  swift_release();
  return v0;
}

void sub_100113E20()
{
  uint64_t v0 = (void *)_convertErrorToNSError(_:)();
  if (qword_100218B50 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10002A10C(v1, (uint64_t)qword_100236A08);
  id v7 = v0;
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 67109378;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 8) = 2112;
    id v6 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v7;

    _os_log_impl((void *)&_mh_execute_header, v2, v3, "new connection from %d (%@)", (uint8_t *)v4, 0x12u);
    sub_10002572C(&qword_100219710);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
}

void sub_100114020(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, int a5)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v9 = (void *)Strong;
    swift_beginAccess();
    uint64_t v10 = swift_unknownObjectWeakLoadStrong();
    if (v10)
    {
      int v11 = (char *)v10;
      if (qword_100218B50 != -1) {
        swift_once();
      }
      uint64_t v12 = type metadata accessor for Logger();
      sub_10002A10C(v12, (uint64_t)qword_100236A08);
      swift_bridgeObjectRetain_n();
      os_log_type_t v13 = Logger.logObject.getter();
      os_log_type_t v14 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v13, v14))
      {
        uint64_t v15 = swift_slowAlloc();
        aBlock[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v15 = 136446466;
        swift_bridgeObjectRetain();
        HIDWORD(v31) = (unint64_t)sub_10001C274(a3, a4, aBlock) >> 32;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v15 + 12) = 1024;
        LODWORD(v31) = a5;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v13, v14, "connection from %{public}s (%d) invalidated", (uint8_t *)v15, 0x12u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      uint64_t v30 = *(void *)&v11[OBJC_IVAR____TtC7parsecd13ParsecService_queue];
      uint64_t v16 = swift_allocObject();
      *(void *)(v16 + 16) = v9;
      *(void *)(v16 + 24) = v11;
      void aBlock[4] = (uint64_t)sub_100114CC8;
      aBlock[5] = v16;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_1000085EC;
      aBlock[3] = (uint64_t)&unk_100201E68;
      unint64_t v17 = _Block_copy(aBlock);
      uint64_t v18 = type metadata accessor for DispatchQoS();
      uint64_t v29 = v27;
      uint64_t v19 = *(void *)(v18 - 8);
      __chkstk_darwin(v18);
      int64_t v21 = (char *)v27 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
      id v22 = v9;
      uint64_t v28 = v11;
      static DispatchQoS.unspecified.getter();
      uint64_t v23 = type metadata accessor for DispatchWorkItemFlags();
      v27[1] = v27;
      uint64_t v24 = *(void *)(v23 - 8);
      __chkstk_darwin(v23);
      os_log_type_t v26 = (char *)v27 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v31 = _swiftEmptyArrayStorage;
      sub_10002FFEC((unint64_t *)&qword_100219260, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_10002572C((uint64_t *)&unk_10021BAF0);
      sub_1000301A0();
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v17);

      (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v23);
      (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);

      swift_release();
    }
    else
    {
    }
  }
}

void sub_1001144C0(uint64_t a1, uint64_t a2)
{
  sub_10009BFD4();
  uint64_t v4 = (unint64_t *)(a2 + OBJC_IVAR____TtC7parsecd13ParsecService_connections);
  swift_beginAccess();
  unint64_t v5 = *v4;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_100114584(a1, v5);
  char v8 = v7;
  swift_bridgeObjectRelease();
  if ((v8 & 1) == 0)
  {
    swift_beginAccess();
    uint64_t v9 = (void *)sub_100113C14(v6);
    swift_endAccess();
  }
  sub_100114710();
}

unint64_t sub_100114584(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    goto LABEL_21;
  }
  uint64_t v3 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v3) {
    return 0;
  }
  while (1)
  {
    sub_100065188(0, (a2 & 0xC000000000000001) == 0, a2);
    id v4 = (a2 & 0xC000000000000001) != 0
       ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
       : *(id *)(a2 + 32);
    unint64_t v5 = v4;
    type metadata accessor for ClientConnection(0);
    char v6 = static NSObject.== infix(_:_:)();

    if (v6) {
      return 0;
    }
    for (uint64_t i = 0; ; ++i)
    {
      unint64_t v7 = i + 1;
      if (__OFADD__(i, 1)) {
        break;
      }
      if (v7 == v3) {
        return 0;
      }
      if ((a2 & 0xC000000000000001) != 0)
      {
        id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if ((v7 & 0x8000000000000000) != 0) {
          goto LABEL_19;
        }
        if (v7 >= *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_20;
        }
        id v9 = *(id *)(a2 + 32 + 8 * v7);
      }
      uint64_t v10 = v9;
      char v11 = static NSObject.== infix(_:_:)();

      if (v11) {
        return v7;
      }
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v3) {
      return 0;
    }
  }
}

void sub_100114710()
{
  uint64_t v1 = (unint64_t *)(v0 + OBJC_IVAR____TtC7parsecd13ParsecService_connections);
  swift_beginAccess();
  unint64_t v2 = *v1;
  if (v2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v3) {
      return;
    }
  }
  else if (*(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    return;
  }
  if (sub_100113DCC())
  {
    id v4 = (void *)sub_10007FBE8();
    id v5 = [v4 configuration];

    id v6 = [v5 URLCache];
    if (v6)
    {
      if (qword_100218B68 != -1) {
        swift_once();
      }
      uint64_t v7 = type metadata accessor for Logger();
      sub_10002A10C(v7, (uint64_t)qword_100236A50);
      char v8 = Logger.logObject.getter();
      os_log_type_t v9 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v8, v9))
      {
        uint64_t v10 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v10 = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, v9, "purging url cache", v10, 2u);
        swift_slowDealloc();
      }

      [v6 _CFURLCache];
      _CFURLCachePurgeMemoryCache();
      swift_unknownObjectRelease();
    }
    else
    {
      swift_unknownObjectRelease();
    }
  }
}

id sub_1001148E4()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&v0[OBJC_IVAR____TtC7parsecd13ParsecService_connections] = _swiftEmptyArrayStorage;
  uint64_t v2 = OBJC_IVAR____TtC7parsecd13ParsecService_queue;
  sub_10005B134();
  uint64_t v3 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v3 - 8);
  sub_10000DFD0();
  id v4 = v0;
  static DispatchQoS.default.getter();
  uint64_t v5 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v5);
  sub_10000DFD0();
  uint64_t v13 = 0;
  sub_10002FFEC((unint64_t *)&qword_10021B3D0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  dispatch thunk of OptionSet.init(rawValue:)();
  type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  sub_100020C48();
  __chkstk_darwin(v6);
  sub_10000DFD0();
  (*(void (**)(uint64_t, void))(v9 + 104))(v8 - v7, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:));
  *(void *)&v0[v2] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v10 = OBJC_IVAR____TtC7parsecd13ParsecService__assembly;
  sub_10002572C(&qword_1002201D0);
  sub_100023CE4();
  *(void *)&v4[v10] = sub_100113CA0();

  v12.receiver = v4;
  v12.super_class = ObjectType;
  return objc_msgSendSuper2(&v12, "init");
}

uint64_t type metadata accessor for ParsecService()
{
  return self;
}

uint64_t sub_100114B98()
{
  return _swift_deallocObject(v0, 20, 7);
}

void sub_100114BA8()
{
}

uint64_t sub_100114BB0()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100114BF8()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100114C30()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 52, 7);
}

void sub_100114C78()
{
  sub_100114020(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(_DWORD *)(v0 + 48));
}

uint64_t sub_100114C88()
{
  return _swift_deallocObject(v0, 32, 7);
}

void sub_100114CC8()
{
  sub_1001144C0(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

void sub_100114CD0(uint64_t a1)
{
}

void sub_100114CE4(uint64_t a1)
{
}

uint64_t sub_100114CF8(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }

  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t sub_100114D74@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_100113D54(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_100114DB0()
{
  sub_100017E10();
  uint64_t v2 = *(os_unfair_lock_s **)(*(void *)(v0 + *(void *)(v1 + 152)) + 16);
  swift_retain();
  os_unfair_lock_lock(v2);
  char v23 = *(unsigned char *)(v0 + 41);
  uint64_t v4 = *(void *)(v0 + 48);
  uint64_t v3 = *(void *)(v0 + 56);
  unint64_t v5 = *(void *)(v0 + 64);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v24 = v5;
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v2);
  swift_release();
  static os_log_type_t.error.getter();
  os_log(_:dso:log:type:_:)();
  static os_log_type_t.error.getter();
  sub_10002572C((uint64_t *)&unk_10021BB00);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1001A2A30;
  sub_10003065C(*(unsigned char *)(v0 + 80));
  uint64_t v7 = StaticString.description.getter();
  uint64_t v9 = v8;
  *(void *)(v6 + 56) = &type metadata for String;
  unint64_t v10 = sub_1000303C8();
  *(void *)(v6 + 32) = v7;
  *(void *)(v6 + 40) = v9;
  unint64_t v11 = v10;
  *(void *)(v6 + 96) = &type metadata for String;
  *(void *)(v6 + 104) = v10;
  *(void *)(v6 + 64) = v10;
  strcpy((char *)(v6 + 72), "resourceAccess");
  *(unsigned char *)(v6 + 87) = -18;
  *(void *)(v6 + 136) = &type metadata for String;
  *(void *)(v6 + 144) = v10;
  *(void *)(v6 + 112) = 0xD000000000000010;
  *(void *)(v6 + 120) = 0x80000001001B0C20;
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  if ((v23 & 1) == 0)
  {
    static os_log_type_t.error.getter();
    uint64_t v12 = sub_10002C214();
    *(_OWORD *)(v12 + 16) = xmmword_1001A2A20;
    uint64_t v13 = StaticString.description.getter();
    *(void *)(v12 + 56) = &type metadata for String;
    *(void *)(v12 + 64) = v11;
    *(void *)(v12 + 32) = v13;
    *(void *)(v12 + 40) = v14;
    sub_10002A634();
    swift_bridgeObjectRelease();
    if (v3)
    {
      swift_bridgeObjectRetain();
      static os_log_type_t.error.getter();
      uint64_t v15 = sub_10002C214();
      *(_OWORD *)(v15 + 16) = xmmword_1001A2A20;
      *(void *)(v15 + 56) = sub_10002572C(&qword_10021EF58);
      *(void *)(v15 + 64) = sub_100092CA8((unint64_t *)&unk_10021EF60, &qword_10021EF58);
      *(void *)(v15 + 32) = v3;
      sub_10002A634();
      swift_bridgeObjectRelease();
    }
  }
  if (v4)
  {
    swift_bridgeObjectRetain();
    static os_log_type_t.error.getter();
    uint64_t v16 = sub_10002C214();
    *(_OWORD *)(v16 + 16) = xmmword_1001A2A20;
    *(void *)(v16 + 56) = sub_10002572C(&qword_10021EF48);
    *(void *)(v16 + 64) = sub_100092CA8(&qword_10021EF50, &qword_10021EF48);
    *(void *)(v16 + 32) = v4;
    sub_10002A634();
    swift_bridgeObjectRelease();
  }
  if (v24 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v17 = result;
  }
  else
  {
    uint64_t v17 = *(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
  }
  if (v17)
  {
    if (v17 < 1)
    {
      __break(1u);
      return result;
    }
    uint64_t v19 = 0;
    do
    {
      ++v19;
      swift_unknownObjectRetain();
      static os_log_type_t.error.getter();
      uint64_t v20 = sub_10002C214();
      *(_OWORD *)(v20 + 16) = xmmword_1001A2A20;
      swift_unknownObjectRetain();
      uint64_t v21 = String.init<A>(describing:)();
      *(void *)(v20 + 56) = &type metadata for String;
      *(void *)(v20 + 64) = v11;
      *(void *)(v20 + 32) = v21;
      *(void *)(v20 + 40) = v22;
      os_log(_:dso:log:type:_:)();
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
    }
    while (v17 != v19);
  }
  swift_bridgeObjectRelease();
  static os_log_type_t.error.getter();
  os_log(_:dso:log:type:_:)();
  if (sub_10011590C())
  {
    static os_log_type_t.fault.getter();
    os_log(_:dso:log:type:_:)();
  }
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1001152C0()
{
  uint64_t v1 = *(os_unfair_lock_s **)(*(void *)(v0 + *(void *)(*(void *)v0 + 152)) + 16);
  swift_retain();
  os_unfair_lock_lock(v1);
  char v22 = *(unsigned char *)(v0 + 41);
  uint64_t v3 = *(void *)(v0 + 48);
  uint64_t v2 = *(void *)(v0 + 56);
  unint64_t v4 = *(void *)(v0 + 64);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v23 = v4;
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v1);
  swift_release();
  static os_log_type_t.error.getter();
  os_log(_:dso:log:type:_:)();
  static os_log_type_t.error.getter();
  sub_10002572C((uint64_t *)&unk_10021BB00);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1001A2A30;
  sub_10003065C(*(unsigned char *)(v0 + 80));
  uint64_t v6 = StaticString.description.getter();
  uint64_t v8 = v7;
  *(void *)(v5 + 56) = &type metadata for String;
  unint64_t v9 = sub_1000303C8();
  *(void *)(v5 + 32) = v6;
  *(void *)(v5 + 40) = v8;
  unint64_t v10 = v9;
  *(void *)(v5 + 96) = &type metadata for String;
  *(void *)(v5 + 104) = v9;
  *(void *)(v5 + 64) = v9;
  strcpy((char *)(v5 + 72), "networkRequest");
  *(unsigned char *)(v5 + 87) = -18;
  *(void *)(v5 + 136) = &type metadata for String;
  *(void *)(v5 + 144) = v9;
  *(void *)(v5 + 112) = 0xD000000000000010;
  *(void *)(v5 + 120) = 0x80000001001B0C20;
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  if ((v22 & 1) == 0)
  {
    static os_log_type_t.error.getter();
    uint64_t v11 = swift_allocObject();
    *(_OWORD *)(v11 + 16) = xmmword_1001A2A20;
    uint64_t v12 = StaticString.description.getter();
    *(void *)(v11 + 56) = &type metadata for String;
    *(void *)(v11 + 64) = v10;
    *(void *)(v11 + 32) = v12;
    *(void *)(v11 + 40) = v13;
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();
    if (v2)
    {
      swift_bridgeObjectRetain();
      static os_log_type_t.error.getter();
      uint64_t v14 = swift_allocObject();
      *(_OWORD *)(v14 + 16) = xmmword_1001A2A20;
      *(void *)(v14 + 56) = sub_10002572C(&qword_10021EF58);
      *(void *)(v14 + 64) = sub_100092CA8((unint64_t *)&unk_10021EF60, &qword_10021EF58);
      *(void *)(v14 + 32) = v2;
      os_log(_:dso:log:type:_:)();
      swift_bridgeObjectRelease();
    }
  }
  if (v3)
  {
    swift_bridgeObjectRetain();
    static os_log_type_t.error.getter();
    uint64_t v15 = swift_allocObject();
    *(_OWORD *)(v15 + 16) = xmmword_1001A2A20;
    *(void *)(v15 + 56) = sub_10002572C(&qword_10021EF48);
    *(void *)(v15 + 64) = sub_100092CA8(&qword_10021EF50, &qword_10021EF48);
    *(void *)(v15 + 32) = v3;
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();
  }
  if (v23 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v16 = result;
  }
  else
  {
    uint64_t v16 = *(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
  }
  if (v16)
  {
    if (v16 < 1)
    {
      __break(1u);
      return result;
    }
    uint64_t v18 = 0;
    do
    {
      ++v18;
      swift_unknownObjectRetain();
      static os_log_type_t.error.getter();
      uint64_t v19 = swift_allocObject();
      *(_OWORD *)(v19 + 16) = xmmword_1001A2A20;
      swift_unknownObjectRetain();
      uint64_t v20 = String.init<A>(describing:)();
      *(void *)(v19 + 56) = &type metadata for String;
      *(void *)(v19 + 64) = v10;
      *(void *)(v19 + 32) = v20;
      *(void *)(v19 + 40) = v21;
      os_log(_:dso:log:type:_:)();
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
    }
    while (v16 != v18);
  }
  swift_bridgeObjectRelease();
  static os_log_type_t.error.getter();
  os_log(_:dso:log:type:_:)();
  if (sub_100115824())
  {
    static os_log_type_t.fault.getter();
    os_log(_:dso:log:type:_:)();
  }
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

BOOL sub_100115824()
{
  char v1 = *(unsigned char *)(v0 + 80);
  v9[3] = &type metadata for ResourceNetworkActivity;
  v9[4] = &off_100201F10;
  LOBYTE(v9[0]) = v1;
  uint64_t v2 = *(char *)sub_10001B620(v9, (uint64_t)&type metadata for ResourceNetworkActivity);
  if (qword_100218C80 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v3 = *(void *)(qword_100236CB0 + 16);
    if (!v3) {
      break;
    }
    uint64_t v4 = 0;
    while (1)
    {
      uint64_t v5 = v4 + 1;
      if (__OFADD__(v4, 1)) {
        break;
      }
      if (qword_1001A9ED0[*(char *)(qword_100236CB0 + 32 + v4)] == qword_1001A9ED0[v2])
      {
        int v6 = *(unsigned __int8 *)(qword_100236CB0 + 32 + v4);
        goto LABEL_9;
      }
      ++v4;
      if (v5 == v3) {
        goto LABEL_7;
      }
    }
    __break(1u);
LABEL_11:
    swift_once();
  }
LABEL_7:
  int v6 = 45;
LABEL_9:
  BOOL v7 = v6 == 45;
  sub_10001CA50((uint64_t)v9);
  return v7;
}

BOOL sub_10011590C()
{
  char v1 = *(unsigned char *)(v0 + 80);
  v9[3] = &type metadata for ResourceAccessActivity;
  v9[4] = &off_1001FCE70;
  LOBYTE(v9[0]) = v1;
  uint64_t v2 = *(char *)sub_10001B620(v9, (uint64_t)&type metadata for ResourceAccessActivity);
  if (qword_100218BC0 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v3 = *(void *)(qword_100236AF8 + 16);
    if (!v3) {
      break;
    }
    uint64_t v4 = 0;
    while (1)
    {
      uint64_t v5 = v4 + 1;
      if (__OFADD__(v4, 1)) {
        break;
      }
      if (qword_1001A9ED0[*(char *)(qword_100236AF8 + 32 + v4)] == qword_1001A9ED0[v2])
      {
        int v6 = *(unsigned __int8 *)(qword_100236AF8 + 32 + v4);
        goto LABEL_9;
      }
      ++v4;
      if (v5 == v3) {
        goto LABEL_7;
      }
    }
    __break(1u);
LABEL_11:
    swift_once();
  }
LABEL_7:
  int v6 = 45;
LABEL_9:
  BOOL v7 = v6 == 45;
  sub_10001CA50((uint64_t)v9);
  return v7;
}

uint64_t sub_1001159F4()
{
  uint64_t v3 = (void *)v0;
  uint64_t v4 = sub_10002572C((uint64_t *)&unk_100219728);
  __chkstk_darwin(v4 - 8);
  sub_100027570();
  __chkstk_darwin(v5);
  sub_100024BEC();
  char v6 = *(unsigned char *)(v0 + 40);
  char v7 = *(unsigned char *)(v0 + 41);
  uint64_t v8 = *(void *)(v0 + 48);
  uint64_t v9 = v3[7];
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v10 = sub_10002DF14();
  sub_1001172C0(v10);
  sub_10002CE84();
  uint64_t v12 = (os_unfair_lock_s *)((char *)v3 + *(void *)(v11 + 136));
  if ((v7 & 1) == 0 && v9)
  {
    sub_100017F00();
    sub_100006858((uint64_t)v12, v1);
    uint64_t v13 = type metadata accessor for OSSignpostID();
    uint64_t result = sub_100027BA4(v1, 1, v13);
    if (result != 1)
    {
      uint64_t v12 = (os_unfair_lock_s *)v3[11];
      swift_bridgeObjectRetain();
      sub_1001171D8(v1, (uint64_t)v12, v25, v24, v6, v9, v8);
      swift_bridgeObjectRelease();
      sub_10000E004();
      goto LABEL_7;
    }
LABEL_15:
    __break(1u);
    return result;
  }
  sub_100017F00();
  sub_100006858((uint64_t)v12, v2);
  uint64_t v15 = type metadata accessor for OSSignpostID();
  uint64_t result = sub_100027BA4(v2, 1, v15);
  if (result == 1)
  {
    __break(1u);
    goto LABEL_15;
  }
  sub_100117114();
  sub_10000E004();
LABEL_7:
  sub_10000E040();
  v16();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v18 = Strong;
    swift_retain();
    String.init<A>(describing:)();
    sub_10000E1CC();
    sub_100021474(v18, v19, v20, v21, (uint64_t)&off_100200DC0);
    os_unfair_lock_unlock(v12);
    swift_bridgeObjectRelease();
    if (swift_unknownObjectWeakLoadStrong())
    {
      uint64_t v22 = *(void *)(v18 + 24);
      swift_getObjectType();
      unint64_t v23 = *(void (**)(void))(v22 + 16);
      swift_retain();
      sub_100025BCC();
      v23();
      swift_release_n();
      swift_unknownObjectRelease();
    }
    else
    {
      swift_release();
    }
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    sub_10002AE14();
    v3[8] = _swiftEmptyArrayStorage;
    v3[9] = 0;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    return sub_1000264BC();
  }
  else
  {
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_100115D40()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10002572C((uint64_t *)&unk_100219728);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  uint64_t v5 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  char v7 = (char *)&v39 - v6;
  uint64_t v9 = v0 + 24;
  uint64_t v8 = *(void *)(v0 + 24);
  uint64_t v10 = *(void *)(v0 + 32);
  char v11 = *(unsigned char *)(v0 + 40);
  char v12 = *(unsigned char *)(v0 + 41);
  uint64_t v13 = (void *)(v0 + 48);
  uint64_t v14 = *(void *)(v0 + 48);
  uint64_t v40 = v8;
  uint64_t v41 = v13;
  uint64_t v15 = *(void *)(v1 + 56);
  uint64_t v16 = *(void *)(v1 + 64);
  uint64_t v42 = *(void *)(v1 + 72);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v43 = v16;
  swift_bridgeObjectRetain();
  uint64_t v44 = v14;
  sub_1001174B8(v14);
  char v17 = *(unsigned char *)(v1 + 80);
  uint64_t v18 = v1 + *(void *)(*(void *)v1 + 136);
  if ((v12 & 1) == 0 && v15)
  {
    swift_beginAccess();
    sub_100006858(v18, (uint64_t)v7);
    uint64_t v19 = type metadata accessor for OSSignpostID();
    uint64_t result = sub_100027BA4((uint64_t)v7, 1, v19);
    if (result != 1)
    {
      uint64_t v21 = *(void *)(v1 + 88);
      swift_bridgeObjectRetain();
      uint64_t v22 = static os_signpost_type_t.end.getter();
      unint64_t v23 = sub_10003065C(v17);
      LOBYTE(v38) = v11;
      sub_10001BB64(v22, v21, (uint64_t)v23, v24, v25, (uint64_t)v7, v40, v10, v38, v15);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(*(void *)(v19 - 8) + 8))(v7, v19);
      goto LABEL_7;
    }
LABEL_17:
    __break(1u);
    return result;
  }
  swift_beginAccess();
  sub_100006858(v18, (uint64_t)v5);
  uint64_t v26 = type metadata accessor for OSSignpostID();
  uint64_t result = sub_100027BA4((uint64_t)v5, 1, v26);
  if (result == 1)
  {
    __break(1u);
    goto LABEL_17;
  }
  static os_signpost_type_t.end.getter();
  sub_10003065C(v17);
  os_signpost(_:dso:log:name:signpostID:)();
  (*(void (**)(char *, uint64_t))(*(void *)(v26 - 8) + 8))(v5, v26);
LABEL_7:
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v28 = Strong;
    uint64_t v45 = v1;
    swift_retain();
    uint64_t v29 = String.init<A>(describing:)();
    uint64_t v31 = v30;
    int64_t v32 = *(os_unfair_lock_s **)(*(void *)(v28 + 32) + 16);
    os_unfair_lock_lock(v32);
    sub_10001621C(v28, v29, v31, v1, (uint64_t)&off_100200DC0);
    os_unfair_lock_unlock(v32);
    swift_bridgeObjectRelease();
    if (swift_unknownObjectWeakLoadStrong())
    {
      uint64_t v33 = *(void *)(v28 + 24);
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v35 = *(void (**)(uint64_t, _UNKNOWN **, uint64_t, uint64_t))(v33 + 16);
      uint64_t v36 = swift_retain();
      v35(v36, &off_100200DC0, ObjectType, v33);
      swift_release_n();
      swift_unknownObjectRelease();
    }
    else
    {
      swift_release();
    }
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    *(void *)uint64_t v9 = 0;
    *(void *)(v9 + 8) = 0;
    *(unsigned char *)(v9 + 16) = 0;
    *(unsigned char *)(v1 + 41) = 1;
    uint64_t v37 = v41;
    void *v41 = 0;
    v37[1] = 0;
    *(void *)(v1 + 64) = _swiftEmptyArrayStorage;
    *(void *)(v1 + 72) = 0;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    *(unsigned char *)(v1 + 81) = 1;
    return swift_weakAssign();
  }
  else
  {
    if (sub_100115824())
    {
      static os_log_type_t.fault.getter();
      os_log(_:dso:log:type:_:)();
    }
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_1001161B0()
{
  if ((*(unsigned char *)(v0 + 81) & 1) == 0) {
    sub_100116E6C();
  }
  uint64_t v1 = sub_1000147BC();
  swift_unknownObjectRelease();
  swift_errorRelease();
  swift_unknownObjectRelease();
  return v1;
}

uint64_t sub_100116238()
{
  static os_log_type_t.error.getter();
  os_log(_:dso:log:type:_:)();
  sub_1001152C0();
  static os_log_type_t.error.getter();
  sub_10002572C((uint64_t *)&unk_10021BB00);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_1001A2A20;
  uint64_t v2 = *(void *)(v0 + *(void *)(*(void *)v0 + 464) + 8);
  swift_unknownObjectRetain();
  sub_10002572C(&qword_10021E020);
  uint64_t v3 = String.init<A>(describing:)();
  uint64_t v5 = v4;
  *(void *)(v1 + 56) = &type metadata for String;
  unint64_t v6 = sub_1000303C8();
  *(void *)(v1 + 64) = v6;
  *(void *)(v1 + 32) = v3;
  *(void *)(v1 + 40) = v5;
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  static os_log_type_t.error.getter();
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1001A2A20;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v32 = v2;
  uint64_t v8 = v2;
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v2 + 16);
  v9(ObjectType, v8);
  sub_10002572C(&qword_10021D568);
  uint64_t v10 = String.init<A>(describing:)();
  *(void *)(v7 + 56) = &type metadata for String;
  *(void *)(v7 + 64) = v6;
  *(void *)(v7 + 32) = v10;
  *(void *)(v7 + 40) = v11;
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  uint64_t v12 = sub_100116768();
  if (v15)
  {
    static os_log_type_t.error.getter();
    uint64_t v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = xmmword_1001A2A20;
    v9(ObjectType, v32);
    uint64_t v25 = String.init<A>(describing:)();
    unint64_t v23 = v6;
    *(void *)(v24 + 56) = &type metadata for String;
    *(void *)(v24 + 64) = v6;
    *(void *)(v24 + 32) = v25;
    *(void *)(v24 + 40) = v26;
    os_log(_:dso:log:type:_:)();
  }
  else
  {
    uint64_t v16 = v13;
    int v17 = v14;
    unint64_t v18 = HIDWORD(v14);
    uint64_t v33 = v12;
    static os_log_type_t.error.getter();
    uint64_t v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = xmmword_1001A2A20;
    *(void *)(v19 + 56) = &type metadata for Int;
    *(void *)(v19 + 64) = &protocol witness table for Int;
    *(void *)(v19 + 32) = v16;
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();
    static os_log_type_t.error.getter();
    uint64_t v20 = swift_allocObject();
    *(_OWORD *)(v20 + 16) = xmmword_1001A2A20;
    *(void *)(v20 + 56) = &type metadata for UInt32;
    *(void *)(v20 + 64) = &protocol witness table for UInt32;
    *(_DWORD *)(v20 + 32) = v18;
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();
    static os_log_type_t.error.getter();
    uint64_t v21 = swift_allocObject();
    *(_OWORD *)(v21 + 16) = xmmword_1001A2A20;
    *(void *)(v21 + 56) = &type metadata for UInt32;
    *(void *)(v21 + 64) = &protocol witness table for UInt32;
    *(_DWORD *)(v21 + 32) = v17;
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();
    static os_log_type_t.error.getter();
    uint64_t v22 = swift_allocObject();
    *(_OWORD *)(v22 + 16) = xmmword_1001A2A20;
    *(void *)(v22 + 56) = &type metadata for Double;
    *(void *)(v22 + 64) = &protocol witness table for Double;
    *(void *)(v22 + 32) = v33;
    os_log(_:dso:log:type:_:)();
    unint64_t v23 = v6;
  }
  swift_bridgeObjectRelease();
  static os_log_type_t.error.getter();
  uint64_t v27 = swift_allocObject();
  *(_OWORD *)(v27 + 16) = xmmword_1001A2A20;
  swift_errorRetain();
  sub_10002572C(&qword_100220510);
  uint64_t v28 = String.init<A>(describing:)();
  *(void *)(v27 + 56) = &type metadata for String;
  *(void *)(v27 + 64) = v23;
  *(void *)(v27 + 32) = v28;
  *(void *)(v27 + 40) = v29;
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  static os_log_type_t.error.getter();
  return os_log(_:dso:log:type:_:)();
}

uint64_t sub_100116768()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)&v0[*(void *)(*(void *)v0 + 464) + 8];
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 16);
  uint64_t v5 = v4(ObjectType, v2);
  if (v5)
  {
    unint64_t v6 = (void *)v5;
    self;
    uint64_t v7 = (void *)swift_dynamicCastObjCClass();
    if (v7)
    {
      [v7 statusCode];
      uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(ObjectType, v2);
      if (!v8)
      {

        *(double *)&uint64_t result = 0.0;
        return result;
      }
      uint64_t v9 = v8;
      *(void *)&long long v23 = 0xD000000000000021;
      *((void *)&v23 + 1) = 0x80000001001B3A50;
      AnyHashable.init<A>(_:)();
      sub_100039D58((uint64_t)v22, v9, &v23);
      sub_100039C5C((uint64_t)v22);
      if (v24) {
        swift_dynamicCast();
      }
      else {
        sub_100025680((uint64_t)&v23, (uint64_t *)&unk_10021BB30);
      }
      *(void *)&long long v23 = 0xD00000000000001DLL;
      *((void *)&v23 + 1) = 0x80000001001B3A30;
      AnyHashable.init<A>(_:)();
      sub_100039D58((uint64_t)v22, v9, &v23);
      sub_100039C5C((uint64_t)v22);
      if (v24) {
        swift_dynamicCast();
      }
      else {
        sub_100025680((uint64_t)&v23, (uint64_t *)&unk_10021BB30);
      }
      AnyHashable.init<A>(_:)();
      sub_100039D58((uint64_t)v22, v9, &v23);
      sub_100039C5C((uint64_t)v22);
      if (v24)
      {
        if (swift_dynamicCast())
        {
          double v21 = -2.31584178e77;
          goto LABEL_26;
        }
      }
      else
      {
        sub_100025680((uint64_t)&v23, (uint64_t *)&unk_10021BB30);
      }
      AnyHashable.init<A>(_:)();
      sub_100039D58((uint64_t)v22, v9, &v23);
      sub_100039C5C((uint64_t)v22);
      if (v24)
      {
        if (swift_dynamicCast())
        {
LABEL_26:
          AnyHashable.init<A>(_:)();
          sub_100039D58((uint64_t)v22, v9, &v23);
          swift_bridgeObjectRelease();

          sub_100039C5C((uint64_t)v22);
          if (v24)
          {
            if (swift_dynamicCast())
            {
              *(double *)&uint64_t result = -2.31584178e77 - v21;
              return result;
            }
          }
          else
          {
            sub_100025680((uint64_t)&v23, (uint64_t *)&unk_10021BB30);
          }
          goto LABEL_32;
        }
      }
      else
      {
        sub_100025680((uint64_t)&v23, (uint64_t *)&unk_10021BB30);
      }
      swift_bridgeObjectRelease();

LABEL_32:
      *(double *)&uint64_t result = 0.0;
      return result;
    }
  }
  sub_10002572C((uint64_t *)&unk_10021BB00);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_1001A2A20;
  v22[0] = v4(ObjectType, v2);
  sub_10002572C(&qword_10021D568);
  uint64_t v11 = String.init<A>(describing:)();
  uint64_t v13 = v12;
  *(void *)(v10 + 56) = &type metadata for String;
  unint64_t v14 = sub_1000303C8();
  *(void *)(v10 + 64) = v14;
  *(void *)(v10 + 32) = v11;
  *(void *)(v10 + 40) = v13;
  sub_10000DB20((uint64_t)"UNIDENTIFIED_RESPONSE_TYPE=%{signpost.description:attribute,public}s", 68, 2, v10);
  swift_bridgeObjectRelease();
  char v15 = *(os_unfair_lock_s **)(*(void *)&v1[*(void *)(*(void *)v1 + 152)] + 16);
  swift_retain();
  swift_retain();
  os_unfair_lock_lock(v15);
  if ((v1[81] & 1) == 0)
  {
    uint64_t v16 = *(void *)&v1[*(void *)(*(void *)v1 + 480)];
    if (v16)
    {
      swift_unknownObjectRetain();
      if (nw_activity_is_activated())
      {
        nw_activity_complete_with_reason();
      }
      else
      {
        static os_log_type_t.info.getter();
        uint64_t v18 = swift_allocObject();
        *(_OWORD *)(v18 + 16) = xmmword_1001A2A20;
        v22[0] = v16;
        swift_unknownObjectRetain();
        sub_10002572C(&qword_10021E008);
        uint64_t v19 = String.init<A>(describing:)();
        *(void *)(v18 + 56) = &type metadata for String;
        *(void *)(v18 + 64) = v14;
        *(void *)(v18 + 32) = v19;
        *(void *)(v18 + 40) = v20;
        os_log(_:dso:log:type:_:)();
        swift_bridgeObjectRelease();
      }
      swift_unknownObjectRelease();
    }
    sub_100115D40();
  }
  os_unfair_lock_unlock(v15);
  swift_release();
  swift_release();
  *(double *)&uint64_t result = 0.0;
  return result;
}

uint64_t sub_100116D84(uint64_t a1, unint64_t a2, double a3)
{
  int v3 = a2;
  unint64_t v6 = HIDWORD(a2);
  sub_10002572C((uint64_t *)&unk_10021BB00);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1001A3750;
  *(void *)(v7 + 56) = &type metadata for Int;
  *(void *)(v7 + 64) = &protocol witness table for Int;
  *(void *)(v7 + 32) = a1;
  *(void *)(v7 + 96) = &type metadata for UInt32;
  *(void *)(v7 + 104) = &protocol witness table for UInt32;
  *(_DWORD *)(v7 + 72) = v3;
  *(void *)(v7 + 136) = &type metadata for UInt32;
  *(void *)(v7 + 144) = &protocol witness table for UInt32;
  *(_DWORD *)(v7 + 112) = v6;
  *(void *)(v7 + 176) = &type metadata for Double;
  *(void *)(v7 + 184) = &protocol witness table for Double;
  *(double *)(v7 + 152) = a3;
  sub_10000DB20((uint64_t)"statusCode=%{signpost.description:attribute,public}d, download=%{signpost.description:attribute}lu, upload=%{signpost.description:attribute}lu, runtime=%{signpost.description:attribute}f", 186, 2, v7);

  return swift_bridgeObjectRelease();
}

void sub_100116E6C()
{
  if ((v0[81] & 1) == 0)
  {
    uint64_t v1 = v0;
    uint64_t v2 = sub_100116768();
    if (v5)
    {
      sub_10002572C((uint64_t *)&unk_10021BB00);
      uint64_t v6 = sub_10002C214();
      *(_OWORD *)(v6 + 16) = xmmword_1001A2A20;
      uint64_t v7 = *(void *)&v0[*(void *)(*(void *)v0 + 464) + 8];
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v7 + 16))(ObjectType, v7);
      sub_10002572C(&qword_10021D568);
      uint64_t v9 = String.init<A>(describing:)();
      uint64_t v11 = v10;
      *(void *)(v6 + 56) = &type metadata for String;
      *(void *)(v6 + 64) = sub_1000303C8();
      *(void *)(v6 + 32) = v9;
      *(void *)(v6 + 40) = v11;
      sub_10000DB20((uint64_t)"UNIDENTIFIED_RESPONSE_TYPE=%{signpost.description:attribute,public}s", 68, 2, v6);
      swift_bridgeObjectRelease();
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, double))(*(void *)v0 + 568))(v3, v4, *(double *)&v2);
    }
    uint64_t v12 = *(os_unfair_lock_s **)(*(void *)&v1[*(void *)(*(void *)v1 + 152)] + 16);
    swift_retain();
    swift_retain();
    os_unfair_lock_lock(v12);
    if ((v1[81] & 1) == 0)
    {
      if (*(void *)&v1[*(void *)(*(void *)v1 + 480)])
      {
        swift_unknownObjectRetain();
        if (nw_activity_is_activated())
        {
          nw_activity_complete_with_reason();
        }
        else
        {
          static os_log_type_t.info.getter();
          sub_10002572C((uint64_t *)&unk_10021BB00);
          uint64_t v13 = sub_10002C214();
          *(_OWORD *)(v13 + 16) = xmmword_1001A2A20;
          swift_unknownObjectRetain();
          sub_10002572C(&qword_10021E008);
          uint64_t v14 = String.init<A>(describing:)();
          uint64_t v16 = v15;
          *(void *)(v13 + 56) = &type metadata for String;
          *(void *)(v13 + 64) = sub_1000303C8();
          *(void *)(v13 + 32) = v14;
          *(void *)(v13 + 40) = v16;
          os_log(_:dso:log:type:_:)();
          swift_bridgeObjectRelease();
        }
        swift_unknownObjectRelease();
      }
      sub_100115D40();
    }
    os_unfair_lock_unlock(v12);
    swift_release();
    swift_release();
  }
}

uint64_t sub_10011710C()
{
  return 45;
}

uint64_t sub_100117114()
{
  static os_signpost_type_t.end.getter();

  return os_signpost(_:dso:log:name:signpostID:)();
}

void sub_1001171D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, char a7)
{
  uint64_t v14 = static os_signpost_type_t.end.getter();
  uint64_t v15 = 8;
  uint64_t v16 = "lifetime";
  switch(a7)
  {
    case 1:
      uint64_t v16 = "cacheAccess";
      uint64_t v15 = 11;
      break;
    case 2:
      uint64_t v16 = "cacheWrite";
      uint64_t v15 = 10;
      break;
    case 3:
      uint64_t v16 = "resultLifetime";
      uint64_t v15 = 14;
      break;
    default:
      break;
  }
  LOBYTE(v17) = a5;
  sub_10001BB64(v14, a2, (uint64_t)v16, v15, 2, a1, a3, a4, v17, a6);
}

void sub_1001172C0(uint64_t a1)
{
  if (sub_10011769C(a1))
  {
    static os_log_type_t.debug.getter();
    sub_10002572C((uint64_t *)&unk_10021BB00);
    uint64_t v1 = swift_allocObject();
    *(_OWORD *)(v1 + 16) = xmmword_1001A3830;
    uint64_t v2 = aQuerycache_2[0];
    uint64_t v3 = aQuerycache_2[1];
    *(void *)(v1 + 56) = &type metadata for String;
    unint64_t v4 = sub_1000303C8();
    *(void *)(v1 + 64) = v4;
    *(void *)(v1 + 32) = v2;
    *(void *)(v1 + 40) = v3;
    sub_10002FF38();
    swift_bridgeObjectRetain();
    uint64_t v5 = Dictionary.description.getter();
    *(void *)(v1 + 96) = &type metadata for String;
    *(void *)(v1 + 104) = v4;
    *(void *)(v1 + 72) = v5;
    *(void *)(v1 + 80) = v6;
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();
    uint64_t v8 = aQuerycache_2[0];
    uint64_t v7 = (void *)aQuerycache_2[1];
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    v9._uint64_t countAndFlagsBits = 46;
    v9._object = (void *)0xE100000000000000;
    String.append(_:)(v9);
    swift_bridgeObjectRetain();
    v10._uint64_t countAndFlagsBits = v8;
    v10._object = v7;
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    NSString v11 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    AnalyticsSendEvent();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
}

void sub_1001174B8(uint64_t a1)
{
  if (sub_1001177F8(a1))
  {
    static os_log_type_t.debug.getter();
    sub_10002572C((uint64_t *)&unk_10021BB00);
    uint64_t v1 = swift_allocObject();
    *(_OWORD *)(v1 + 16) = xmmword_1001A3830;
    *(void *)(v1 + 56) = &type metadata for String;
    unint64_t v2 = sub_1000303C8();
    *(void *)(v1 + 64) = v2;
    strcpy((char *)(v1 + 32), "networkRequest");
    *(unsigned char *)(v1 + 47) = -18;
    sub_10002FF38();
    uint64_t v3 = Dictionary.description.getter();
    *(void *)(v1 + 96) = &type metadata for String;
    *(void *)(v1 + 104) = v2;
    *(void *)(v1 + 72) = v3;
    *(void *)(v1 + 80) = v4;
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();
    v5._uint64_t countAndFlagsBits = 46;
    v5._object = (void *)0xE100000000000000;
    String.append(_:)(v5);
    v6._uint64_t countAndFlagsBits = 0x526B726F7774656ELL;
    v6._object = (void *)0xEE00747365757165;
    String.append(_:)(v6);
    NSString v7 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    AnalyticsSendEvent();
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_10011769C(uint64_t a1)
{
  uint64_t v2 = sub_10002E49C((uint64_t)&type metadata for QueryCache.Activity);
  uint64_t v4 = 0;
  if (v2 && a1)
  {
    uint64_t v5 = v2;
    uint64_t v6 = v3;
    NSString v7 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 16);
    swift_bridgeObjectRetain();
    uint64_t v8 = v7(v5, v6);
    uint64_t v10 = v9;
    Class isa = UInt._bridgeToObjectiveC()().super.super.isa;
    swift_isUniquelyReferenced_nonNull_native();
    sub_100028570((uint64_t)isa, v8, v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v6);
    uint64_t v14 = v13;
    sub_10000A344();
    Class v15 = Double._bridgeToObjectiveC()().super.super.isa;
    swift_isUniquelyReferenced_nonNull_native();
    sub_100028570((uint64_t)v15, v12, v14);
    uint64_t v4 = a1;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v4;
}

uint64_t sub_1001177F8(uint64_t a1)
{
  uint64_t v2 = sub_100006164((uint64_t)&type metadata for ResourceNetworkActivity);
  if (!a1) {
    return 0;
  }
  uint64_t v4 = v2;
  uint64_t v5 = v3;
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 16);
  swift_bridgeObjectRetain();
  uint64_t v7 = v6(v4, v5);
  uint64_t v9 = v8;
  Class isa = UInt._bridgeToObjectiveC()().super.super.isa;
  swift_isUniquelyReferenced_nonNull_native();
  sub_100028570((uint64_t)isa, v7, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v4, v5);
  uint64_t v13 = v12;
  sub_10000A344();
  Class v14 = Double._bridgeToObjectiveC()().super.super.isa;
  swift_isUniquelyReferenced_nonNull_native();
  sub_100028570((uint64_t)v14, v11, v13);
  uint64_t v15 = a1;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v15;
}

void sub_10011795C()
{
  qword_100236CB0 = (uint64_t)&off_1001F9DF0;
}

uint64_t sub_100117970()
{
  return 0x526B726F7774656ELL;
}

uint64_t sub_100117994@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_10011710C();
  *a1 = result;
  return result;
}

uint64_t sub_1001179C0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1000E61D8(*v1);
  *a1 = result;
  return result;
}

uint64_t sub_1001179EC()
{
  uint64_t v1 = v0 + qword_100236CB8;
  type metadata accessor for Client();
  sub_10000E004();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8);

  return v4(v1, v2);
}

uint64_t sub_100117A54()
{
  if ((*(unsigned char *)(v0 + 81) & 1) == 0) {
    sub_100116E6C();
  }
  uint64_t v1 = sub_1001161B0();
  type metadata accessor for Client();
  sub_10000E004();
  sub_10000E040();
  v2();
  return v1;
}

uint64_t sub_100117AC4()
{
  uint64_t v0 = sub_100117A54();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v1, v2);
}

uint64_t type metadata accessor for ResourceAccessNetworkSpan()
{
  uint64_t result = qword_100220218;
  if (!qword_100220218) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100117B60()
{
  uint64_t result = type metadata accessor for Client();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_100117BF8()
{
  static os_log_type_t.error.getter();
  os_log(_:dso:log:type:_:)();
  sub_100116238();
  static os_log_type_t.error.getter();
  sub_10002572C((uint64_t *)&unk_10021BB00);
  uint64_t v0 = sub_10002C214();
  *(_OWORD *)(v0 + 16) = xmmword_1001A2A20;
  uint64_t v1 = Client.name.getter();
  uint64_t v3 = v2;
  *(void *)(v0 + 56) = &type metadata for String;
  unint64_t v4 = sub_1000303C8();
  *(void *)(v0 + 64) = v4;
  *(void *)(v0 + 32) = v1;
  *(void *)(v0 + 40) = v3;
  sub_10001DE3C();
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  static os_log_type_t.error.getter();
  uint64_t v5 = sub_10002C214();
  *(_OWORD *)(v5 + 16) = xmmword_1001A2A20;
  uint64_t v6 = Client.name.getter();
  *(void *)(v5 + 56) = &type metadata for String;
  *(void *)(v5 + 64) = v4;
  *(void *)(v5 + 32) = v6;
  *(void *)(v5 + 40) = v7;
  sub_10001DE3C();
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  static os_log_type_t.error.getter();

  return os_log(_:dso:log:type:_:)();
}

uint64_t sub_100117D7C(uint64_t a1, unint64_t a2, double a3)
{
  uint64_t v6 = sub_1000E3F94(a1, a2, a3);
  Client.type.getter();
  id v7 = [objc_allocWithZone((Class)NSNumber) initWithUnsignedInteger:ClientType.rawValue.getter()];
  swift_isUniquelyReferenced_nonNull_native();
  sub_100028570((uint64_t)v7, 0x726574706F6461, 0xE700000000000000);
  swift_bridgeObjectRelease();
  sub_10000DA94(v6);
  swift_bridgeObjectRelease();

  return sub_100116D84(a1, a2, a3);
}

unsigned char *storeEnumTagSinglePayload for ResourceNetworkActivity(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 44 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 44) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xD4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xD3)
  {
    unsigned int v6 = ((a2 - 212) >> 8) + 1;
    *uint64_t result = a2 + 44;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100117F40);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 44;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ResourceNetworkActivity()
{
  return &type metadata for ResourceNetworkActivity;
}

unint64_t sub_100117F7C()
{
  unint64_t result = qword_1002204B0;
  if (!qword_1002204B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002204B0);
  }
  return result;
}

unint64_t sub_100117FC8(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100117FF8();
  unint64_t result = sub_100118044();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_100117FF8()
{
  unint64_t result = qword_1002204B8;
  if (!qword_1002204B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002204B8);
  }
  return result;
}

unint64_t sub_100118044()
{
  unint64_t result = qword_1002204C0;
  if (!qword_1002204C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002204C0);
  }
  return result;
}

unint64_t sub_100118090(uint64_t a1)
{
  unint64_t result = sub_1001180B8();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1001180B8()
{
  unint64_t result = qword_100220508;
  if (!qword_100220508)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100220508);
  }
  return result;
}

uint64_t NSFileManager.feedbackLoggerCacheDirectoryURL.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_10002572C(&qword_10021BB20);
  __chkstk_darwin(v4 - 8);
  unsigned int v6 = &v23[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = &v23[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v9);
  uint64_t v13 = &v23[-v12];
  id v24 = 0;
  id v14 = [v2 URLForDirectory:13 inDomain:1 appropriateForURL:0 create:0 error:&v24];
  id v15 = v24;
  if (!v14)
  {
    id v21 = v24;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
    sub_10002538C((uint64_t)v6, 1, 1, v7);
    goto LABEL_5;
  }
  uint64_t v16 = v14;
  static URL._unconditionallyBridgeFromObjectiveC(_:)();
  id v17 = v15;

  uint64_t v18 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v8 + 32);
  v18(v6, v11, v7);
  sub_10002538C((uint64_t)v6, 0, 1, v7);
  if (sub_100027BA4((uint64_t)v6, 1, v7) == 1)
  {
LABEL_5:
    sub_10003CB40((uint64_t)v6);
    uint64_t v20 = 1;
    return sub_10002538C(a1, v20, 1, v7);
  }
  v18(v13, v6, v7);
  URL.appendingPathComponent(_:isDirectory:)();
  URL.standardizedFileURL.getter();
  uint64_t v19 = *(void (**)(unsigned char *, uint64_t))(v8 + 8);
  v19(v11, v7);
  v19(v13, v7);
  uint64_t v20 = 0;
  return sub_10002538C(a1, v20, 1, v7);
}

void NSFileManager.forceMoveItem(at:to:)()
{
  uint64_t v1 = v0;
  URL.path.getter();
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unsigned int v3 = [v0 fileExistsAtPath:v2];

  if (v3)
  {
    URL.path.getter();
    NSString v4 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    unsigned int v5 = [v1 fileExistsAtPath:v4];

    if (v5)
    {
      URL._bridgeToObjectiveC()(v6);
      uint64_t v8 = v7;
      id v20 = 0;
      unsigned int v9 = [v1 removeItemAtURL:v7 error:&v20];

      id v10 = v20;
      if (!v9)
      {
LABEL_7:
        id v19 = v10;
        _convertNSErrorToError(_:)();

        swift_willThrow();
        return;
      }
      id v11 = v20;
    }
    URL._bridgeToObjectiveC()(v6);
    uint64_t v13 = v12;
    URL._bridgeToObjectiveC()(v14);
    uint64_t v16 = v15;
    id v20 = 0;
    unsigned int v17 = [v1 moveItemAtURL:v13 toURL:v15 error:&v20];

    id v10 = v20;
    if (v17)
    {
      id v18 = v20;
      return;
    }
    goto LABEL_7;
  }
}

uint64_t *sub_100118564(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for URL();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    unsigned int v9 = *(void **)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + v8) = (uint64_t)v9;
    id v10 = v9;
  }
  return a1;
}

uint64_t sub_100118634(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(void **)(a2 + v7);
  *(void *)(a1 + v7) = v8;
  id v9 = v8;
  return a1;
}

uint64_t sub_1001186B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(void **)(a2 + v7);
  id v9 = *(void **)(a1 + v7);
  *(void *)(a1 + v7) = v8;
  id v10 = v8;

  return a1;
}

uint64_t sub_10011873C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1001187B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(void **)(a1 + v7);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);

  return a1;
}

uint64_t sub_10011883C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100118850);
}

uint64_t sub_100118850(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for URL();
  sub_1000248F0();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    return sub_100027BA4(a1, a2, v6);
  }
  else
  {
    unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v9 >= 0xFFFFFFFF) {
      LODWORD(v9) = -1;
    }
    return (v9 + 1);
  }
}

uint64_t sub_1001188DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001188F0);
}

void sub_1001188F0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for URL();
  sub_1000248F0();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    sub_10002538C(a1, a2, a2, v8);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
}

uint64_t sub_100118978()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_100118A10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 24))
  {
    sub_10003CA28((_OWORD *)a1, v7);
    sub_10003B9DC(v7, a2, a3);
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_100019994(a1, (uint64_t *)&unk_10021BB30);
    uint64_t v6 = sub_10002819C();
    sub_1000BA914(v6);
    swift_bridgeObjectRelease();
    return sub_100019994((uint64_t)v7, (uint64_t *)&unk_10021BB30);
  }
}

void sub_100118AA0()
{
  sub_1000A3D4C();
  uint64_t v3 = sub_10002572C(&qword_10021CED0);
  uint64_t v4 = sub_100016544(v3);
  __chkstk_darwin(v4);
  sub_100016550();
  type metadata accessor for TopicCacheEntry();
  sub_10001DCF8();
  __chkstk_darwin(v5);
  sub_10000DFD0();
  uint64_t v8 = v7 - v6;
  if (sub_100027BA4(v1, 1, v9) == 1)
  {
    sub_100019994(v1, &qword_10021CED0);
    sub_1000BAC3C(v0);

    sub_100019994(v2, &qword_10021CED0);
  }
  else
  {
    sub_1000A5838(v1, v8);
    sub_10003BB40();
  }
}

uint64_t sub_100118BA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000266A4(a1, a2, a3, &qword_10021BB10, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (void (*)(char *, uint64_t, uint64_t))sub_10003BBE4, (void (*)(uint64_t))sub_1000BAE2C);
}

uint64_t sub_100118BF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10002572C((uint64_t *)&unk_10021B9C0);
  uint64_t v5 = sub_100016544(v4);
  __chkstk_darwin(v5);
  sub_10000DFD0();
  uint64_t v8 = v7 - v6;
  swift_bridgeObjectRetain();
  URLQueryItem.init(name:value:)();
  uint64_t v9 = type metadata accessor for URLQueryItem();
  sub_10002538C(v8, 0, 1, v9);
  sub_1000257C8();
  sub_1000266A4(v8, a1, a2, (uint64_t *)&unk_10021B9C0, (uint64_t (*)(uint64_t))&type metadata accessor for URLQueryItem, (void (*)(char *, uint64_t, uint64_t))sub_1000277F8, (void (*)(uint64_t))sub_1000BAB2C);
  return swift_endAccess();
}

BOOL sub_100118D28(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = sub_10002572C((uint64_t *)&unk_10021B9C0);
  uint64_t v7 = sub_100016544(v6);
  __chkstk_darwin(v7);
  sub_10001DDC8();
  sub_100028260();
  if (*(void *)(*(void *)v3 + 16))
  {
    swift_bridgeObjectRetain();
    sub_1000287F0(a1, a2);
    if (v8)
    {
      uint64_t v9 = type metadata accessor for URLQueryItem();
      sub_10001DCF8();
      uint64_t v10 = sub_100028948();
      v11(v10);
      uint64_t v12 = v2;
      uint64_t v13 = 0;
    }
    else
    {
      uint64_t v9 = type metadata accessor for URLQueryItem();
      uint64_t v12 = v2;
      uint64_t v13 = 1;
    }
    sub_1000254FC(v12, v13);
  }
  else
  {
    uint64_t v9 = type metadata accessor for URLQueryItem();
    sub_10002538C(v2, 1, 1, v9);
    swift_bridgeObjectRetain();
  }
  swift_endAccess();
  swift_bridgeObjectRelease();
  type metadata accessor for URLQueryItem();
  BOOL v14 = sub_100027BA4(v2, 1, v9) != 1;
  sub_100019994(v2, (uint64_t *)&unk_10021B9C0);
  return v14;
}

uint64_t sub_100118E90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = v4 + OBJC_IVAR____TtC7parsecd23ParsecURLRequestBuilder_httpHeader;
  swift_beginAccess();
  if (!*(void *)(*(void *)v9 + 16)) {
    goto LABEL_4;
  }
  swift_bridgeObjectRetain();
  sub_1000287F0(a1, a2);
  if ((v10 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_4:
    swift_endAccess();
    sub_1000257C8();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_10003BA44(a3, a4, a1, a2);
  }
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100118F6C()
{
  return type metadata accessor for ParsecURLRequestBuilder();
}

uint64_t sub_100118F74()
{
  uint64_t result = type metadata accessor for URLComponents();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_100119014(uint64_t a1)
{
  uint64_t v3 = sub_10002572C((uint64_t *)&unk_10021B9C0);
  uint64_t v4 = sub_100016544(v3);
  __chkstk_darwin(v4);
  sub_100016550();
  uint64_t v5 = URLQueryItem.name.getter();
  uint64_t v7 = v6;
  uint64_t v8 = type metadata accessor for URLQueryItem();
  sub_10001DCF8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v1, a1, v8);
  sub_10002538C(v1, 0, 1, v8);
  sub_1000257C8();
  sub_1000266A4(v1, v5, v7, (uint64_t *)&unk_10021B9C0, (uint64_t (*)(uint64_t))&type metadata accessor for URLQueryItem, (void (*)(char *, uint64_t, uint64_t))sub_1000277F8, (void (*)(uint64_t))sub_1000BAB2C);
  return swift_endAccess();
}

char *sub_100119158(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_100020C64();
    uint64_t result = (char *)sub_100025BFC();
    __break(1u);
  }
  else if (a3 != result || &result[40 * a2] <= a3)
  {
    return (char *)sub_100025BE0(a3, result);
  }
  return result;
}

char *sub_1001191BC(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[40 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 40 * a2);
  }
  return __src;
}

void sub_100119258(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

char *sub_100119270(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_100020C64();
    uint64_t result = (char *)sub_100025BFC();
    __break(1u);
  }
  else if (a3 != result || &result[32 * a2] <= a3)
  {
    return (char *)sub_100025BE0(a3, result);
  }
  return result;
}

char *sub_1001192D4(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_100020C64();
    uint64_t result = (char *)sub_100025BFC();
    __break(1u);
  }
  else if (a3 != result || &result[4 * a2] <= a3)
  {
    return (char *)sub_100025BE0(a3, result);
  }
  return result;
}

void sub_100119330(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

char *sub_100119348(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_100020C64();
    uint64_t result = (char *)sub_100025BFC();
    __break(1u);
  }
  else if (a3 != result || &result[24 * a2] <= a3)
  {
    return (char *)sub_100025BE0(a3, result);
  }
  return result;
}

void sub_1001193AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_1001193C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

char *sub_1001193DC(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[16 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 16 * a2);
  }
  return __src;
}

void sub_100119470(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_100020C64();
    sub_100025BFC();
    __break(1u);
  }
  else
  {
    sub_10001D7FC();
    if (v5 && (sub_10002572C(&qword_10021E678), sub_10001DCF8(), v3 + *(void *)(v6 + 72) * v2 > v4))
    {
      if (v4 != v3)
      {
        sub_10000E1F0();
        swift_arrayInitWithTakeBackToFront();
      }
    }
    else
    {
      sub_10002572C(&qword_10021E678);
      sub_10000E1F0();
      swift_arrayInitWithTakeFrontToBack();
    }
  }
}

char *sub_10011955C(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_100020C64();
    uint64_t result = (char *)sub_100025BFC();
    __break(1u);
  }
  else if (a3 != result || &result[8 * a2] <= a3)
  {
    return (char *)sub_100025BE0(a3, result);
  }
  return result;
}

void sub_1001195B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_1001195D0(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  if (a2 < 0)
  {
    sub_100020C64();
    sub_100025BFC();
    __break(1u);
  }
  else
  {
    sub_10001D7FC();
    if (v8 && (a4(0), sub_10001DCF8(), v5 + *(void *)(v9 + 72) * v4 > v6))
    {
      if (v6 != v5)
      {
        sub_10000E1F0();
        swift_arrayInitWithTakeBackToFront();
      }
    }
    else
    {
      a4(0);
      sub_10000E1F0();
      swift_arrayInitWithTakeFrontToBack();
    }
  }
}

char *sub_1001196C0(char *__src, size_t __len, char *__dst)
{
  if ((__len & 0x8000000000000000) != 0)
  {
    sub_100020C64();
    __src = (char *)sub_100025BFC();
    __break(1u);
  }
  else if (__dst != __src || &__src[__len] <= __dst)
  {
    return (char *)memmove(__dst, __src, __len);
  }
  return __src;
}

uint64_t sub_100119730(uint64_t a1, uint64_t a2)
{
  return sub_1001199C0(a1, a2);
}

uint64_t sub_100119744(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_100020C64();
    sub_100017E1C();
LABEL_11:
    uint64_t result = sub_10002AE34();
    __break(1u);
    return result;
  }
  sub_100025080();
  if (!v5 & v4) {
    BOOL v6 = v3 > v2;
  }
  else {
    BOOL v6 = 0;
  }
  if (v6)
  {
    sub_100020C64();
    sub_1000242EC();
    goto LABEL_11;
  }
  sub_10002572C(&qword_1002197D0);
  sub_1000264D8();

  return swift_arrayInitWithCopy();
}

uint64_t sub_1001197F4(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    sub_100020C64();
    sub_100017E1C();
LABEL_11:
    uint64_t result = sub_10002AE34();
    __break(1u);
    return result;
  }
  if (a3 + 40 * a2 > a1 && a1 + 40 * a2 > a3)
  {
    sub_100020C64();
    sub_1000242EC();
    goto LABEL_11;
  }

  return swift_arrayInitWithCopy();
}

uint64_t sub_1001198A8(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0 || (a3 + 40 * a2 > a1 ? (BOOL v3 = a1 + 40 * a2 > a3) : (BOOL v3 = 0), v3))
  {
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    sub_10002572C(&qword_1002206A0);
    return swift_arrayInitWithCopy();
  }
  return result;
}

uint64_t sub_1001199AC(uint64_t a1, uint64_t a2)
{
  return sub_1001199C0(a1, a2);
}

uint64_t sub_1001199C0(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_100020C64();
    sub_100017E1C();
LABEL_11:
    uint64_t result = sub_10002AE34();
    __break(1u);
    return result;
  }
  sub_100025080();
  if (!v6 & v5) {
    BOOL v7 = v4 > v2;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7)
  {
    sub_100020C64();
    sub_1000242EC();
    goto LABEL_11;
  }
  sub_100023FA0(0, v3);
  sub_1000264D8();

  return swift_arrayInitWithCopy();
}

uint64_t sub_100119A74(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    sub_100020C64();
    sub_100017E1C();
LABEL_11:
    uint64_t result = sub_10002AE34();
    __break(1u);
    return result;
  }
  sub_1000A3D4C();
  if (v4 + 16 * v3 > v2 && v2 + 16 * v3 > v4)
  {
    sub_100020C64();
    sub_1000242EC();
    goto LABEL_11;
  }
  sub_10002572C(&qword_10021ACF0);
  sub_1000264D8();

  return swift_arrayInitWithCopy();
}

void *sub_100119B34(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000) != 0)
  {
    sub_100020C64();
    sub_100017E1C();
LABEL_11:
    uint64_t result = (void *)sub_10002AE34();
    __break(1u);
    return result;
  }
  if (&__dst[__n] > __src && &__src[__n] > __dst)
  {
    sub_100020C64();
    sub_1000242EC();
    goto LABEL_11;
  }

  return memcpy(__dst, __src, __n);
}

uint64_t sub_100119BDC(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_100119DF0(a1, a2, a3);
}

uint64_t sub_100119BF4(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0 || (a3 + 16 * a2 > a1 ? (BOOL v3 = a1 + 16 * a2 > a3) : (BOOL v3 = 0), v3))
  {
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return swift_arrayInitWithCopy();
  }
  return result;
}

uint64_t sub_100119CD4(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0
    || ((uint64_t v5 = *(void *)(*(void *)(sub_10002572C(&qword_10021E678) - 8) + 72) * a2,
         unint64_t v6 = a3 + v5,
         unint64_t v7 = a1 + v5,
         v6 > a1)
      ? (BOOL v8 = v7 > a3)
      : (BOOL v8 = 0),
        v8))
  {
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return swift_arrayInitWithCopy();
  }
  return result;
}

uint64_t sub_100119DF0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    sub_100020C64();
    sub_100017E1C();
LABEL_11:
    uint64_t result = sub_10002AE34();
    __break(1u);
    return result;
  }
  sub_1000A3D4C();
  v6(0);
  sub_10001DCF8();
  uint64_t v8 = *(void *)(v7 + 72) * v3;
  unint64_t v9 = a3 + v8;
  unint64_t v10 = v4 + v8;
  if (v9 > v4 && v10 > a3)
  {
    sub_100020C64();
    sub_1000242EC();
    goto LABEL_11;
  }
  sub_1000264D8();

  return swift_arrayInitWithCopy();
}

void sub_100119EC4()
{
}

void sub_100119EF8()
{
  sub_10002EBF8();
  if (v6)
  {
    sub_1000212E4();
    if (v8 != v9)
    {
      sub_10002A3A8();
      if (v8)
      {
        __break(1u);
        return;
      }
      sub_1000268F0();
    }
  }
  else
  {
    uint64_t v7 = v4;
  }
  uint64_t v10 = *(void *)(v0 + 16);
  if (v7 <= v10) {
    uint64_t v11 = *(void *)(v0 + 16);
  }
  else {
    uint64_t v11 = v7;
  }
  if (v11)
  {
    sub_10002572C(v5);
    uint64_t v12 = (void *)swift_allocObject();
    size_t v13 = j__malloc_size(v12);
    void v12[2] = v10;
    v12[3] = 2 * ((uint64_t)(v13 - 32) / 40);
  }
  else
  {
    uint64_t v12 = _swiftEmptyArrayStorage;
  }
  BOOL v14 = v12 + 4;
  uint64_t v15 = v0 + 32;
  if (v3)
  {
    v2(v15, v10, v14);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    v1(v15, v10, v14);
  }
  swift_release();
}

void sub_100119FD8(char a1, uint64_t a2, char a3, uint64_t a4)
{
  if (a3)
  {
    sub_1000212E4();
    if (v7 != v8)
    {
      sub_10002A3A8();
      if (v7)
      {
        __break(1u);
        return;
      }
      sub_1000268F0();
    }
  }
  else
  {
    uint64_t v6 = a2;
  }
  uint64_t v9 = *(void *)(a4 + 16);
  if (v6 <= v9) {
    uint64_t v10 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v10 = v6;
  }
  if (v10)
  {
    sub_10002572C(&qword_10021ACE8);
    uint64_t v11 = (char *)sub_10001659C();
    sub_10002760C(v11);
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = v12;
  }
  else
  {
    uint64_t v11 = (char *)&_swiftEmptyArrayStorage;
  }
  size_t v13 = (char *)(a4 + 32);
  if (a1)
  {
    sub_100021610(v13, v9, v11 + 32);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_100119A74((uint64_t)v13, v9);
  }
  swift_release();
}

void sub_10011A090(char a1, int64_t a2, char a3, uint64_t a4)
{
  if (a3)
  {
    sub_1000212E4();
    if (v7 != v8)
    {
      sub_10002A3A8();
      if (v7)
      {
        __break(1u);
        return;
      }
      sub_1000268F0();
    }
  }
  else
  {
    int64_t v6 = a2;
  }
  int64_t v9 = *(void *)(a4 + 16);
  if (v6 <= v9) {
    int64_t v10 = *(void *)(a4 + 16);
  }
  else {
    int64_t v10 = v6;
  }
  if (v10)
  {
    sub_10002572C(&qword_10021AC58);
    uint64_t v11 = (char *)swift_allocObject();
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }
  size_t v13 = v11 + 32;
  BOOL v14 = (char *)(a4 + 32);
  if (a1)
  {
    sub_1001196C0(v14, v9, v13);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_100119B34(v14, v9, v13);
  }
  swift_release();
}

void sub_10011A154(char a1, uint64_t a2, char a3, uint64_t a4)
{
}

void sub_10011A19C(char a1, uint64_t a2, char a3, uint64_t a4, uint64_t *a5, uint64_t (*a6)(void), void (*a7)(void))
{
  if (a3)
  {
    sub_1000212E4();
    if (v12 != v13)
    {
      sub_10002A3A8();
      if (v12)
      {
LABEL_24:
        __break(1u);
        return;
      }
      sub_1000268F0();
    }
  }
  else
  {
    uint64_t v11 = a2;
  }
  uint64_t v14 = *(void *)(a4 + 16);
  if (v11 <= v14) {
    uint64_t v15 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v15 = v11;
  }
  if (!v15)
  {
    id v19 = _swiftEmptyArrayStorage;
    goto LABEL_18;
  }
  sub_10002572C(a5);
  uint64_t v16 = a6(0);
  sub_100024920(v16);
  uint64_t v18 = *(void *)(v17 + 72);
  id v19 = (void *)swift_allocObject();
  j__malloc_size(v19);
  if (!v18)
  {
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  sub_10002B950();
  BOOL v21 = v21 && v18 == -1;
  if (v21) {
    goto LABEL_23;
  }
  void v19[2] = v14;
  v19[3] = 2 * (v20 / v18);
LABEL_18:
  uint64_t v22 = *(void *)(a6(0) - 8);
  unint64_t v23 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  unint64_t v24 = (unint64_t)v19 + v23;
  uint64_t v25 = a4 + v23;
  if (a1)
  {
    sub_1001195D0(v25, v14, v24, a7);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_100119DF0(v25, v14, v24);
  }
  swift_release();
}

void sub_10011A31C(char a1, uint64_t a2, char a3, uint64_t a4)
{
}

void sub_10011A364(char a1, uint64_t a2, char a3, uint64_t a4)
{
}

void sub_10011A3AC()
{
}

size_t sub_10011A3E0(size_t result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_25:
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    char v13 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_10002572C(&qword_100220688);
  uint64_t v10 = *(void *)(sub_10002572C(&qword_10021E678) - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  char v13 = (void *)swift_allocObject();
  uint64_t result = j__malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (result - v12 == 0x8000000000000000 && v11 == -1) {
    goto LABEL_24;
  }
  v13[2] = v8;
  uint64_t v13[3] = 2 * ((uint64_t)(result - v12) / v11);
LABEL_19:
  uint64_t v15 = *(void *)(sub_10002572C(&qword_10021E678) - 8);
  unint64_t v16 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  unint64_t v17 = a4 + v16;
  if (v5)
  {
    sub_100119470(v17, v8);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_100119CD4(v17, v8, (unint64_t)v13 + v16);
  }
  swift_release();
  return (size_t)v13;
}

void sub_10011A584(char a1, uint64_t a2, char a3, uint64_t a4)
{
}

void sub_10011A5CC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v6 = a4 >> 1;
  uint64_t v7 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
LABEL_9:
    __break(1u);
    return;
  }
  if (v7)
  {
    sub_100019C4C();
    if (!(v9 ^ v10 | v8))
    {
      sub_10002572C(&qword_1002192A8);
      uint64_t v11 = (void *)sub_10001659C();
      size_t v12 = j__malloc_size(v11);
      v11[2] = v7;
      v11[3] = (2 * ((uint64_t)(v12 - 32) / 8)) | 1;
    }
    if (v6 != v4)
    {
      sub_1001199C0(v5 + 8 * v4, v7);
      return;
    }
    goto LABEL_9;
  }
}

void sub_10011A690(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  sub_100024488();
  a25 = v27;
  a26 = v29;
  uint64_t v30 = *(void *)(v28 + 16);
  if (!v30) {
    goto LABEL_9;
  }
  uint64_t v31 = v28;
  sub_10002572C(&qword_10021AC98);
  uint64_t v32 = type metadata accessor for Trialpb_TrialExperiment();
  sub_100024920(v32);
  uint64_t v34 = *(void *)(v33 + 72);
  uint64_t v35 = (void *)sub_1000252AC();
  j__malloc_size(v35);
  if (v34)
  {
    sub_10002B950();
    BOOL v37 = v37 && v34 == -1;
    if (!v37)
    {
      _OWORD v35[2] = v30;
      v35[3] = 2 * (v36 / v34);
      sub_10011B270(&a10, (uint64_t)v35 + v26, v30, v31);
      sub_100023F14();
      sub_100017FE8();
      if (!v37) {
        __break(1u);
      }
LABEL_9:
      sub_100017D74();
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void sub_10011A760(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v6 = a4 >> 1;
  uint64_t v7 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
LABEL_10:
    __break(1u);
    return;
  }
  if (v7)
  {
    sub_100019C4C();
    if (v9 ^ v10 | v8)
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
    }
    else
    {
      sub_10002572C(&qword_10021ACF8);
      uint64_t v11 = (void *)sub_10001659C();
      sub_10002760C(v11);
      v11[2] = v7;
      v11[3] = v12;
    }
    if (v6 != v4)
    {
      sub_10002FE88(v5 + 16 * v4, v7, (unint64_t)(v11 + 4));
      return;
    }
    goto LABEL_10;
  }
}

void sub_10011A800()
{
  sub_100024488();
  if (*(void *)(v0 + 16))
  {
    sub_10002572C(&qword_10021ACF8);
    uint64_t v1 = (const void *)sub_10001659C();
    sub_10002760C(v1);
    sub_100024148(v2);
    sub_10011B5B8(v3, v4, v5, v6);
    sub_100020D24();
    sub_100017FE8();
    if (!v7) {
      __break(1u);
    }
  }
  sub_100017D74();
}

void sub_10011A878()
{
  sub_100024488();
  if (*(void *)(v0 + 16))
  {
    sub_10002572C(&qword_100219EF0);
    uint64_t v1 = (const void *)sub_10001659C();
    size_t v2 = j__malloc_size(v1);
    sub_100024148(2 * ((uint64_t)(v2 - 32) / 32));
    sub_10011B7B8(v3, v4, v5, v6);
    sub_100020D24();
    sub_100017FE8();
    if (!v7) {
      __break(1u);
    }
  }
  sub_100017D74();
}

void sub_10011A900(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  sub_100024488();
  a25 = v26;
  a26 = v28;
  uint64_t v29 = *(void *)(v27 + 16);
  if (!v29) {
    goto LABEL_9;
  }
  uint64_t v30 = v27;
  sub_10002572C(&qword_100220688);
  uint64_t v31 = sub_10002572C(&qword_10021E678);
  sub_100024920(v31);
  uint64_t v33 = *(void *)(v32 + 72);
  uint64_t v34 = (void *)sub_1000252AC();
  j__malloc_size(v34);
  if (v33)
  {
    sub_10002B950();
    BOOL v36 = v36 && v33 == -1;
    if (!v36)
    {
      _OWORD v34[2] = v29;
      void v34[3] = 2 * (v35 / v33);
      uint64_t v37 = *(void *)(sub_10002572C(&qword_10021E678) - 8);
      sub_10011B9B8(&a10, (uint64_t)v34 + ((*(unsigned __int8 *)(v37 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80)), v29, v30);
      sub_100023F14();
      sub_100017FE8();
      if (!v36) {
        __break(1u);
      }
LABEL_9:
      sub_100017D74();
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void sub_10011AA10(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v6 = a4 >> 1;
  uint64_t v7 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_15;
  }
  if (v7)
  {
    sub_100019C4C();
    if (v8 ^ v9 | v15)
    {
      char v13 = _swiftEmptyArrayStorage;
LABEL_12:
      if (v6 != v4)
      {
        uint64_t v16 = type metadata accessor for URL();
        sub_100024920(v16);
        sub_100119DF0(v5 + *(void *)(v18 + 72) * v4, v7, (unint64_t)v13+ ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80)));
        return;
      }
      goto LABEL_17;
    }
    sub_10002572C(&qword_1002206B8);
    uint64_t v10 = type metadata accessor for URL();
    sub_100024920(v10);
    uint64_t v12 = *(void *)(v11 + 72);
    char v13 = (void *)swift_allocObject();
    j__malloc_size(v13);
    if (v12)
    {
      sub_10002B950();
      BOOL v15 = v15 && v12 == -1;
      if (!v15)
      {
        v13[2] = v7;
        uint64_t v13[3] = 2 * (v14 / v12);
        goto LABEL_12;
      }
LABEL_16:
      __break(1u);
LABEL_17:
      __break(1u);
      return;
    }
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
}

void sub_10011AB5C(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8 = type metadata accessor for URLQueryItem();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  id v79 = (char *)&v68 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v78 = (char *)&v68 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  __chkstk_darwin(v14);
  uint64_t v18 = *(void *)(v17 + 72);
  if (!v18)
  {
    __break(1u);
LABEL_89:
    __break(1u);
LABEL_90:
    __break(1u);
    goto LABEL_91;
  }
  int64_t v19 = a2 - a1;
  if (a2 - a1 == 0x8000000000000000 && v18 == -1) {
    goto LABEL_89;
  }
  int64_t v21 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v18 == -1) {
    goto LABEL_90;
  }
  uint64_t v74 = (char *)&v68 - v15;
  uint64_t v75 = v16;
  uint64_t v23 = v19 / v18;
  uint64_t v24 = v21 / v18;
  uint64_t v77 = v18;
  if (v19 / v18 >= v21 / v18)
  {
    sub_1001195D0(a2, v21 / v18, a4, (void (*)(void))&type metadata accessor for URLQueryItem);
    unint64_t v25 = a4 + v24 * v18;
    if (v24 * v18 >= 1 && a1 < a2)
    {
      uint64_t v75 = -v18;
      uint64_t v28 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
      uint64_t v76 = v9 + 16;
      uint64_t v71 = (void (**)(char *, uint64_t))(v9 + 8);
      uint64_t v72 = v28;
      unint64_t v69 = a4;
      unint64_t v70 = a1;
      do
      {
        uint64_t v29 = (char *)a3;
        unint64_t v80 = v25;
        uint64_t v30 = v75;
        unint64_t v73 = v25 + v75;
        uint64_t v31 = v72;
        ((void (*)(char *))v72)(v78);
        uint64_t v74 = (char *)a2;
        unint64_t v32 = a2 + v30;
        v31(v79, a2 + v30, v8);
        uint64_t v33 = URLQueryItem.name.getter();
        uint64_t v35 = v34;
        if (v33 == URLQueryItem.name.getter() && v35 == v36) {
          char v38 = 0;
        }
        else {
          char v38 = _stringCompareWithSmolCheck(_:_:expecting:)();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        a3 += v75;
        uint64_t v39 = *v71;
        (*v71)(v79, v8);
        v39(v78, v8);
        if (v38)
        {
          BOOL v40 = v29 < v74 || a3 >= (unint64_t)v74;
          unint64_t v41 = v70;
          if (v40)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v29 != v74)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          a2 = v32;
          a4 = v69;
          uint64_t v18 = v77;
          unint64_t v25 = v80;
        }
        else
        {
          BOOL v42 = (unint64_t)v29 < v80 || a3 >= v80;
          a2 = (unint64_t)v74;
          unint64_t v41 = v70;
          if (v42)
          {
            unint64_t v43 = v73;
            swift_arrayInitWithTakeFrontToBack();
            unint64_t v25 = v43;
            a4 = v69;
            uint64_t v18 = v77;
          }
          else
          {
            uint64_t v18 = v77;
            if (v29 == (char *)v80)
            {
              unint64_t v25 = v73;
            }
            else
            {
              unint64_t v44 = v73;
              swift_arrayInitWithTakeBackToFront();
              unint64_t v25 = v44;
            }
            a4 = v69;
          }
        }
      }
      while (v25 > a4 && a2 > v41);
    }
  }
  else
  {
    sub_1001195D0(a1, v19 / v18, a4, (void (*)(void))&type metadata accessor for URLQueryItem);
    unint64_t v25 = a4 + v23 * v18;
    if (v23 * v18 >= 1 && a2 < a3)
    {
      unint64_t v48 = *(char **)(v9 + 16);
      uint64_t v76 = v9 + 16;
      uint64_t v78 = (char *)(v9 + 8);
      id v79 = v48;
      double v49 = v74;
      uint64_t v50 = v75;
      unint64_t v73 = a3;
      unint64_t v80 = a4 + v23 * v18;
      while (1)
      {
        unint64_t v51 = a2;
        uint64_t v52 = v79;
        ((void (*)(char *, unint64_t, uint64_t))v79)(v49, a2, v8);
        ((void (*)(uint64_t, unint64_t, uint64_t))v52)(v50, a4, v8);
        uint64_t v53 = URLQueryItem.name.getter();
        uint64_t v54 = v8;
        uint64_t v56 = v55;
        if (v53 == URLQueryItem.name.getter() && v56 == v57) {
          break;
        }
        uint64_t v59 = v50;
        char v60 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v61 = *(void (**)(char *, uint64_t))v78;
        (*(void (**)(uint64_t, uint64_t))v78)(v59, v54);
        v61(v49, v54);
        uint64_t v8 = v54;
        if ((v60 & 1) == 0) {
          goto LABEL_69;
        }
        uint64_t v18 = v77;
        unint64_t v62 = v51;
        a2 = v51 + v77;
        if (a1 >= v51 && a1 < a2)
        {
          unint64_t v66 = v73;
          uint64_t v50 = v75;
          if (a1 != v62) {
            swift_arrayInitWithTakeBackToFront();
          }
          unint64_t v25 = v80;
          goto LABEL_79;
        }
        swift_arrayInitWithTakeFrontToBack();
LABEL_78:
        unint64_t v66 = v73;
        unint64_t v25 = v80;
        uint64_t v50 = v75;
LABEL_79:
        a1 += v18;
        if (a4 >= v25 || a2 >= v66) {
          goto LABEL_16;
        }
      }
      swift_bridgeObjectRelease_n();
      uint64_t v64 = *(void (**)(char *, uint64_t))v78;
      (*(void (**)(uint64_t, uint64_t))v78)(v50, v54);
      v64(v49, v54);
      uint64_t v8 = v54;
LABEL_69:
      uint64_t v18 = v77;
      if (a1 < a4 || a1 >= a4 + v77)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a1 != a4)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      a2 = v51;
      a4 += v18;
      goto LABEL_78;
    }
LABEL_16:
    a2 = a1;
  }
  int64_t v46 = v25 - a4;
  if (v18 != -1 || v46 != 0x8000000000000000)
  {
    sub_1001195D0(a4, v46 / v18, a2, (void (*)(void))&type metadata accessor for URLQueryItem);
    return;
  }
LABEL_91:
  __break(1u);
}

void sub_10011B190(char a1, uint64_t a2, char a3, char *a4)
{
  if (a3)
  {
    sub_1000212E4();
    if (v7 != v8)
    {
      sub_10002A3A8();
      if (v7)
      {
        __break(1u);
        return;
      }
      sub_1000268F0();
    }
  }
  else
  {
    uint64_t v6 = a2;
  }
  uint64_t v9 = *((void *)a4 + 2);
  if (v6 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v6;
  }
  if (v10)
  {
    sub_10002572C(&qword_100220680);
    uint64_t v11 = (char *)sub_10001659C();
    sub_10002760C(v11);
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = v12;
  }
  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v13 = v11 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v11 != a4 || &v14[16 * v9] <= v13) {
      memmove(v13, v14, 16 * v9);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v9);
  }
  swift_bridgeObjectRelease();
}

void sub_10011B25C(uint64_t a1)
{
}

uint64_t sub_10011B270(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Trialpb_TrialExperiment();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  BOOL v42 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v10);
  unint64_t v41 = (char *)&v32 - v13;
  uint64_t v43 = a4;
  uint64_t v16 = *(void *)(a4 + 56);
  uint64_t v15 = a4 + 56;
  uint64_t v14 = v16;
  uint64_t v37 = v15;
  uint64_t v17 = -1 << *(unsigned char *)(v15 - 24);
  if (-v17 < 64) {
    uint64_t v18 = ~(-1 << -(char)v17);
  }
  else {
    uint64_t v18 = -1;
  }
  unint64_t v19 = v18 & v14;
  if (!a2)
  {
    int64_t v20 = 0;
    a3 = 0;
LABEL_38:
    uint64_t v31 = v37;
    *a1 = v43;
    a1[1] = v31;
    a1[2] = ~v17;
    a1[3] = v20;
    a1[4] = v19;
    return a3;
  }
  if (!a3)
  {
    int64_t v20 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v34 = -1 << *(unsigned char *)(v15 - 24);
  uint64_t v35 = a1;
  int64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v38 = v9 + 32;
  uint64_t v39 = v9 + 16;
  int64_t v36 = (unint64_t)(63 - v17) >> 6;
  int64_t v33 = v36 - 1;
  uint64_t v40 = a3;
  uint64_t v22 = v41;
  if (!v19) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v23 = __clz(__rbit64(v19));
  v19 &= v19 - 1;
  unint64_t v24 = v23 | (v20 << 6);
  while (1)
  {
    ++v21;
    uint64_t v28 = v42;
    uint64_t v29 = *(void *)(v9 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v42, *(void *)(v43 + 48) + v29 * v24, v8);
    uint64_t v30 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
    v30(v22, v28, v8);
    uint64_t result = ((uint64_t (*)(uint64_t, char *, uint64_t))v30)(a2, v22, v8);
    a3 = v40;
    if (v21 == v40) {
      goto LABEL_37;
    }
    a2 += v29;
    if (v19) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v25 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v25 >= v36) {
      goto LABEL_32;
    }
    unint64_t v26 = *(void *)(v37 + 8 * v25);
    if (!v26) {
      break;
    }
LABEL_18:
    unint64_t v19 = (v26 - 1) & v26;
    unint64_t v24 = __clz(__rbit64(v26)) + (v25 << 6);
    int64_t v20 = v25;
  }
  v20 += 2;
  if (v25 + 1 >= v36)
  {
    unint64_t v19 = 0;
    int64_t v20 = v25;
    goto LABEL_36;
  }
  unint64_t v26 = *(void *)(v37 + 8 * v20);
  if (v26) {
    goto LABEL_14;
  }
  int64_t v27 = v25 + 2;
  if (v25 + 2 >= v36) {
    goto LABEL_32;
  }
  unint64_t v26 = *(void *)(v37 + 8 * v27);
  if (v26) {
    goto LABEL_17;
  }
  int64_t v20 = v25 + 3;
  if (v25 + 3 >= v36)
  {
    unint64_t v19 = 0;
    int64_t v20 = v25 + 2;
    goto LABEL_36;
  }
  unint64_t v26 = *(void *)(v37 + 8 * v20);
  if (v26)
  {
LABEL_14:
    int64_t v25 = v20;
    goto LABEL_18;
  }
  int64_t v27 = v25 + 4;
  if (v25 + 4 >= v36)
  {
LABEL_32:
    unint64_t v19 = 0;
LABEL_36:
    a3 = v21;
LABEL_37:
    uint64_t v17 = v34;
    a1 = v35;
    goto LABEL_38;
  }
  unint64_t v26 = *(void *)(v37 + 8 * v27);
  if (v26)
  {
LABEL_17:
    int64_t v25 = v27;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v25 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v25 >= v36)
    {
      unint64_t v19 = 0;
      int64_t v20 = v33;
      goto LABEL_36;
    }
    unint64_t v26 = *(void *)(v37 + 8 * v25);
    ++v27;
    if (v26) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_10011B5B8(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 56;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    void v5[3] = v12;
    _OWORD v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    int64_t v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    *uint64_t v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    uint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

_OWORD *sub_10011B7B8(_OWORD *result, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v13 = 0;
LABEL_36:
    *uint64_t v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    void v5[3] = v12;
    _OWORD v5[4] = v9;
    return (_OWORD *)v13;
  }
  if (!a3)
  {
    int64_t v12 = 0;
LABEL_33:
    uint64_t v13 = a3;
    goto LABEL_36;
  }
  if (a3 < 0)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  uint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  while (v9)
  {
    unint64_t v15 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    unint64_t v16 = v15 | (v12 << 6);
LABEL_23:
    ++v13;
    sub_10001C348(*(void *)(a4 + 56) + 32 * v16, (uint64_t)v20);
    sub_10003CA28(v20, v21);
    uint64_t result = sub_10003CA28(v21, v11);
    v11 += 2;
    if (v13 == a3) {
      goto LABEL_33;
    }
  }
  int64_t v17 = v12 + 1;
  if (__OFADD__(v12, 1))
  {
    __break(1u);
    goto LABEL_38;
  }
  if (v17 >= v14) {
    goto LABEL_35;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v17);
  if (v18)
  {
LABEL_22:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
    goto LABEL_23;
  }
  int64_t v19 = v12 + 2;
  ++v12;
  if (v17 + 1 >= v14) {
    goto LABEL_35;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_15;
  }
  int64_t v12 = v17 + 1;
  if (v17 + 2 >= v14) {
    goto LABEL_35;
  }
  unint64_t v18 = *(void *)(v6 + 8 * (v17 + 2));
  if (v18)
  {
    v17 += 2;
    goto LABEL_22;
  }
  int64_t v12 = v17 + 2;
  if (v17 + 3 >= v14) {
    goto LABEL_35;
  }
  unint64_t v18 = *(void *)(v6 + 8 * (v17 + 3));
  if (v18)
  {
    v17 += 3;
    goto LABEL_22;
  }
  int64_t v19 = v17 + 4;
  int64_t v12 = v17 + 3;
  if (v17 + 4 >= v14)
  {
LABEL_35:
    unint64_t v9 = 0;
    goto LABEL_36;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_15:
    int64_t v17 = v19;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      int64_t v12 = v14 - 1;
      goto LABEL_35;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_22;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

id sub_10011B9B8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_10002572C(&qword_10021E678);
  uint64_t v37 = *(void *)(v8 - 8);
  uint64_t v38 = v8;
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (int64_t *)((char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  id result = (id)__chkstk_darwin(v9);
  int64_t v14 = (char *)&v31 - v13;
  uint64_t v15 = *(void *)(a4 + 64);
  uint64_t v35 = a4 + 64;
  uint64_t v33 = -1 << *(unsigned char *)(a4 + 32);
  if (-v33 < 64) {
    uint64_t v16 = ~(-1 << -(char)v33);
  }
  else {
    uint64_t v16 = -1;
  }
  unint64_t v17 = v16 & v15;
  if (!a2)
  {
    int64_t v18 = 0;
    a3 = 0;
LABEL_39:
    uint64_t v29 = ~v33;
    uint64_t v30 = v35;
    *a1 = a4;
    a1[1] = v30;
    a1[2] = v29;
    a1[3] = v18;
    a1[4] = v17;
    return (id)a3;
  }
  if (!a3)
  {
    int64_t v18 = 0;
    goto LABEL_39;
  }
  if (a3 < 0) {
    goto LABEL_41;
  }
  uint64_t v32 = a1;
  int64_t v18 = 0;
  uint64_t v19 = 0;
  int64_t v34 = (unint64_t)(63 - v33) >> 6;
  int64_t v31 = v34 - 1;
  uint64_t v36 = a3;
  if (!v17) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v20 = __clz(__rbit64(v17));
  v17 &= v17 - 1;
  unint64_t v21 = v20 | (v18 << 6);
  while (1)
  {
    ++v19;
    uint64_t v25 = *(void *)(a4 + 56);
    unint64_t v26 = *(void **)(*(void *)(a4 + 48) + 8 * v21);
    uint64_t v27 = type metadata accessor for TopicCacheEntry();
    sub_1000A5938(v25 + *(void *)(*(void *)(v27 - 8) + 72) * v21, (uint64_t)v11 + *(int *)(v38 + 48));
    *uint64_t v11 = v26;
    sub_10011BE24((uint64_t)v11, (uint64_t)v14);
    sub_10011BE24((uint64_t)v14, a2);
    a3 = v36;
    if (v19 == v36)
    {
      id v28 = v26;
      goto LABEL_38;
    }
    a2 += *(void *)(v37 + 72);
    id result = v26;
    if (v17) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v22 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v22 >= v34) {
      goto LABEL_33;
    }
    unint64_t v23 = *(void *)(v35 + 8 * v22);
    if (!v23)
    {
      v18 += 2;
      if (v22 + 1 >= v34)
      {
        unint64_t v17 = 0;
        int64_t v18 = v22;
      }
      else
      {
        unint64_t v23 = *(void *)(v35 + 8 * v18);
        if (v23) {
          goto LABEL_14;
        }
        int64_t v24 = v22 + 2;
        if (v22 + 2 >= v34) {
          goto LABEL_33;
        }
        unint64_t v23 = *(void *)(v35 + 8 * v24);
        if (v23)
        {
LABEL_17:
          int64_t v22 = v24;
          goto LABEL_18;
        }
        int64_t v18 = v22 + 3;
        if (v22 + 3 < v34)
        {
          unint64_t v23 = *(void *)(v35 + 8 * v18);
          if (v23)
          {
LABEL_14:
            int64_t v22 = v18;
            goto LABEL_18;
          }
          int64_t v24 = v22 + 4;
          if (v22 + 4 >= v34)
          {
LABEL_33:
            unint64_t v17 = 0;
            goto LABEL_37;
          }
          unint64_t v23 = *(void *)(v35 + 8 * v24);
          if (!v23)
          {
            while (1)
            {
              int64_t v22 = v24 + 1;
              if (__OFADD__(v24, 1)) {
                goto LABEL_42;
              }
              if (v22 >= v34)
              {
                unint64_t v17 = 0;
                int64_t v18 = v31;
                goto LABEL_37;
              }
              unint64_t v23 = *(void *)(v35 + 8 * v22);
              ++v24;
              if (v23) {
                goto LABEL_18;
              }
            }
          }
          goto LABEL_17;
        }
        unint64_t v17 = 0;
        int64_t v18 = v22 + 2;
      }
LABEL_37:
      a3 = v19;
LABEL_38:
      a1 = v32;
      goto LABEL_39;
    }
LABEL_18:
    unint64_t v17 = (v23 - 1) & v23;
    unint64_t v21 = __clz(__rbit64(v23)) + (v22 << 6);
    int64_t v18 = v22;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

void sub_10011BCF4()
{
}

void sub_10011BD4C(uint64_t a1)
{
}

void sub_10011BDB8(uint64_t a1)
{
}

uint64_t sub_10011BE24(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10002572C(&qword_10021E678);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

size_t sub_10011BE8C(uint64_t a1)
{
  return sub_10011A3E0(0, *(void *)(a1 + 16), 0, a1);
}

void sub_10011BEA0(uint64_t a1)
{
}

unsigned char *storeEnumTagSinglePayload for ParsecURLRequestBuilder.URLError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *id result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10011BFD8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *id result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ParsecURLRequestBuilder.URLError()
{
  return &type metadata for ParsecURLRequestBuilder.URLError;
}

unint64_t sub_10011C014()
{
  unint64_t result = qword_1002206C0;
  if (!qword_1002206C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002206C0);
  }
  return result;
}

void PegasusConfigURLProvider.init(fileManager:)(void *a1@<X0>, void *a2@<X8>)
{
  *a2 = a1;
  uint64_t v3 = (uint64_t)a2 + *(int *)(type metadata accessor for PegasusConfigURLProvider() + 20);
  id v4 = a1;
  static PegasusConfigURLProvider.getPegasusConfigCacheDirectoryURL(fileManager:)((uint64_t)v4, v3);
}

uint64_t static PegasusConfigURLProvider.getPegasusConfigCacheDirectoryURL(fileManager:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_10002572C(&qword_10021BB20);
  uint64_t v6 = sub_100016544(v5);
  __chkstk_darwin(v6);
  sub_10000DFD0();
  uint64_t v9 = v8 - v7;
  type metadata accessor for URL();
  sub_100026B88();
  uint64_t v11 = v10;
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  unint64_t v17 = (char *)v32 - v16;
  uint64_t v37 = a1;
  sub_10011C510();
  static PegasusConfigContainerURLProvider.containerURL<A>(using:)();
  sub_100025C20(v9, 0);
  if (sub_100027BA4(v9, 1, v2) == 1)
  {
    sub_10003CB40(v9);
    if (qword_100218C58 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    sub_10002A10C(v18, (uint64_t)qword_100236C50);
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      unint64_t v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Failed to get container URL for pegasus configuration", v21, 2u);
      swift_slowDealloc();
    }

    uint64_t v22 = 1;
  }
  else
  {
    int64_t v24 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 32);
    v24(v17, v9, v2);
    if (qword_100218C58 != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    sub_10002A10C(v25, (uint64_t)qword_100236C50);
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v15, v17, v2);
    unint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v26, v27))
    {
      id v28 = (uint8_t *)swift_slowAlloc();
      uint64_t v34 = swift_slowAlloc();
      uint64_t v37 = v34;
      uint64_t v35 = v24;
      *(_DWORD *)id v28 = 136315138;
      v32[1] = v28 + 4;
      uint64_t v33 = v28;
      sub_100057D54();
      uint64_t v29 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v36 = sub_10001C274(v29, v30, &v37);
      int64_t v24 = v35;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10002A654();
      v31();
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "PegasusConfiguration container URL: %s", v33, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v11 + 8))(v15, v2);
    }

    v24((char *)a2, (uint64_t)v17, v2);
    uint64_t v22 = 0;
  }
  return sub_100025C20(a2, v22);
}

uint64_t type metadata accessor for PegasusConfigURLProvider()
{
  uint64_t result = qword_100220720;
  if (!qword_100220720) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t sub_10011C510()
{
  unint64_t result = qword_10021A2F0;
  if (!qword_10021A2F0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10021A2F0);
  }
  return result;
}

uint64_t PegasusConfigURLProvider.cachedBagURL.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_10002572C(&qword_10021BB20);
  uint64_t v4 = sub_100016544(v3);
  __chkstk_darwin(v4);
  sub_10000DFD0();
  uint64_t v7 = v6 - v5;
  static PegasusConfigContainerURLProvider.configFileName.getter();
  uint64_t v8 = type metadata accessor for PegasusConfigURLProvider();
  sub_10011CA00(v1 + *(int *)(v8 + 20), v7);
  uint64_t v9 = type metadata accessor for URL();
  if (sub_100027BA4(v7, 1, v9) == 1)
  {
    swift_bridgeObjectRelease();
    sub_10003CB40(v7);
    uint64_t v10 = 1;
  }
  else
  {
    URL.appendingPathComponent(_:isDirectory:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v7, v9);
    uint64_t v10 = 0;
  }
  return sub_10002538C(a1, v10, 1, v9);
}

uint64_t PegasusConfigURLProvider.legacyCachedBagURL.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_10002572C(&qword_10021BB20);
  uint64_t v3 = sub_100016544(v2);
  __chkstk_darwin(v3);
  sub_10000DFD0();
  uint64_t v6 = v5 - v4;
  PegasusConfigURLProvider.parsecdAssetsDirectoryURL.getter(v5 - v4);
  uint64_t v7 = type metadata accessor for URL();
  if (sub_100027BA4(v6, 1, v7) == 1)
  {
    sub_10003CB40(v6);
    uint64_t v8 = 1;
  }
  else
  {
    URL.appendingPathComponent(_:isDirectory:)();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
    uint64_t v8 = 0;
  }
  return sub_10002538C(a1, v8, 1, v7);
}

uint64_t PegasusConfigURLProvider.parsecdAssetsDirectoryURL.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4 = sub_10002572C(&qword_10021BB20);
  uint64_t v5 = sub_100016544(v4);
  __chkstk_darwin(v5);
  sub_10000DFD0();
  uint64_t v8 = v7 - v6;
  type metadata accessor for URL();
  sub_100026B88();
  uint64_t v10 = v9;
  __chkstk_darwin(v11);
  uint64_t v13 = &v28[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  double v15 = __chkstk_darwin(v14);
  unint64_t v17 = &v28[-v16];
  uint64_t v18 = *v1;
  id v29 = 0;
  id v19 = objc_msgSend(v18, "URLForDirectory:inDomain:appropriateForURL:create:error:", 13, 1, 0, 0, &v29, v15);
  id v20 = v29;
  if (!v19)
  {
    id v26 = v29;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
    sub_100025C20(v8, 1);
    goto LABEL_5;
  }
  unint64_t v21 = v19;
  static URL._unconditionallyBridgeFromObjectiveC(_:)();
  id v22 = v20;

  unint64_t v23 = *(void (**)(uint64_t, unsigned char *, uint64_t))(v10 + 32);
  v23(v8, v13, v2);
  sub_100025C20(v8, 0);
  if (sub_100027BA4(v8, 1, v2) == 1)
  {
LABEL_5:
    sub_10003CB40(v8);
    uint64_t v25 = 1;
    return sub_100025C20(a1, v25);
  }
  v23((uint64_t)v17, (unsigned char *)v8, v2);
  URL.appendingPathComponent(_:isDirectory:)();
  URL.standardizedFileURL.getter();
  int64_t v24 = *(void (**)(void))(v10 + 8);
  sub_10002A654();
  v24();
  sub_10002A654();
  v24();
  uint64_t v25 = 0;
  return sub_100025C20(a1, v25);
}

uint64_t sub_10011CA00(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10002572C(&qword_10021BB20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void **initializeBufferWithCopyOfBuffer for PegasusConfigURLProvider(void **a1, void **a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = (char *)*a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = (void **)&v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain();
  }
  else
  {
    uint64_t v5 = a1;
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for URL();
    uint64_t v10 = v4;
    if (sub_100027BA4((uint64_t)v8, 1, v9))
    {
      uint64_t v11 = sub_10002572C(&qword_10021BB20);
      memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
      sub_10002538C((uint64_t)v7, 0, 1, v9);
    }
  }
  return v5;
}

uint64_t destroy for PegasusConfigURLProvider(id *a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t)a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t result = sub_100027BA4(v4, 1, v5);
  if (!result)
  {
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
    return v7(v4, v5);
  }
  return result;
}

void **initializeWithCopy for PegasusConfigURLProvider(void **a1, void **a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  *a1 = *a2;
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for URL();
  id v9 = v4;
  if (sub_100027BA4((uint64_t)v7, 1, v8))
  {
    uint64_t v10 = sub_10002572C(&qword_10021BB20);
    memcpy(v6, v7, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
    sub_10002538C((uint64_t)v6, 0, 1, v8);
  }
  return a1;
}

void **assignWithCopy for PegasusConfigURLProvider(void **a1, void **a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *a1;
  *a1 = *a2;
  id v8 = v6;

  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for URL();
  int v13 = sub_100027BA4((uint64_t)v10, 1, v12);
  int v14 = sub_100027BA4((uint64_t)v11, 1, v12);
  if (!v13)
  {
    uint64_t v15 = *(void *)(v12 - 8);
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 24))(v10, v11, v12);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v15 + 8))(v10, v12);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    uint64_t v16 = sub_10002572C(&qword_10021BB20);
    memcpy(v10, v11, *(void *)(*(void *)(v16 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
  sub_10002538C((uint64_t)v10, 0, 1, v12);
  return a1;
}

void *initializeWithTake for PegasusConfigURLProvider(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for URL();
  if (sub_100027BA4((uint64_t)v6, 1, v7))
  {
    uint64_t v8 = sub_10002572C(&qword_10021BB20);
    memcpy(v5, v6, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
    sub_10002538C((uint64_t)v5, 0, 1, v7);
  }
  return a1;
}

void **assignWithTake for PegasusConfigURLProvider(void **a1, void **a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;

  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for URL();
  int v11 = sub_100027BA4((uint64_t)v8, 1, v10);
  int v12 = sub_100027BA4((uint64_t)v9, 1, v10);
  if (!v11)
  {
    uint64_t v13 = *(void *)(v10 - 8);
    if (!v12)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 40))(v8, v9, v10);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v12)
  {
LABEL_6:
    uint64_t v14 = sub_10002572C(&qword_10021BB20);
    memcpy(v8, v9, *(void *)(*(void *)(v14 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  sub_10002538C((uint64_t)v8, 0, 1, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for PegasusConfigURLProvider(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10011D0E8);
}

uint64_t sub_10011D0E8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_10002572C(&qword_10021BB20);
    uint64_t v9 = (uint64_t)a1 + *(int *)(a3 + 20);
    return sub_100027BA4(v9, a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for PegasusConfigURLProvider(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10011D188);
}

void *sub_10011D188(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_10002572C(&qword_10021BB20);
    uint64_t v8 = (uint64_t)v5 + *(int *)(a4 + 20);
    return (void *)sub_10002538C(v8, a2, a2, v7);
  }
  return result;
}

void sub_10011D20C()
{
  sub_10003A254();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void *sub_10011D2A8()
{
  uint64_t v1 = sub_10002572C(&qword_10021E678);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  uint64_t v5 = (void **)((char *)v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v3);
  uint64_t v7 = (void **)((char *)v28 - v6);
  swift_beginAccess();
  uint64_t v8 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain_n();
  sub_10011A900(v8, v9, v10, v11, v12, v13, v14, v15, v28[0], v28[1], var70[0], var70[1], var70[2], var70[3], var70[4], var70[5], var70[6], var70[7], var70[8],
    var70[9],
    var70[10],
    var70[11],
    var70[12],
    var70[13],
    var70[14],
    var70[15]);
  size_t v17 = v16;
  swift_bridgeObjectRelease();
  var70[0] = v17;
  sub_10011D80C(var70);
  swift_bridgeObjectRelease();
  size_t v18 = var70[0];
  uint64_t v19 = *(void *)(var70[0] + 16);
  if (v19)
  {
    var70[0] = (size_t)_swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v20 = v18 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
    uint64_t v21 = *(void *)(v2 + 72);
    do
    {
      sub_10011D8B8(v20, (uint64_t)v7);
      uint64_t v22 = *(int *)(v1 + 48);
      uint64_t v23 = (uint64_t)v5 + v22;
      int64_t v24 = *v7;
      *uint64_t v5 = *v7;
      sub_1000A5938((uint64_t)v7 + v22, (uint64_t)v5 + v22);
      id v25 = v24;
      sub_1000A58DC(v23);
      sub_10011D920((uint64_t)v7);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v20 += v21;
      --v19;
    }
    while (v19);
    size_t v26 = var70[0];
    swift_release();
  }
  else
  {
    swift_release();
    return _swiftEmptyArrayStorage;
  }
  return (void *)v26;
}

BOOL sub_10011D4B8()
{
  sub_100026BE4();
  return *(void *)(v0 + 16) < *(void *)(*(void *)(v0 + 24) + 16);
}

uint64_t sub_10011D4E8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_100026BE4();
  uint64_t v5 = *(void *)(v2 + 24);
  if (*(void *)(v5 + 16))
  {
    id v6 = a1;
    swift_bridgeObjectRetain();
    unint64_t v7 = sub_10003B47C();
    if (v8)
    {
      unint64_t v9 = v7;
      uint64_t v10 = *(void *)(v5 + 56);
      uint64_t v11 = type metadata accessor for TopicCacheEntry();
      sub_1000A5938(v10 + *(void *)(*(void *)(v11 - 8) + 72) * v9, a2);
      uint64_t v12 = a2;
      uint64_t v13 = 0;
      uint64_t v14 = 1;
      uint64_t v15 = v11;
    }
    else
    {
      type metadata accessor for TopicCacheEntry();
      uint64_t v12 = sub_100025A38();
    }
    sub_10002538C(v12, v13, v14, v15);

    return swift_bridgeObjectRelease();
  }
  else
  {
    type metadata accessor for TopicCacheEntry();
    uint64_t v16 = sub_100025A38();
    return sub_10002538C(v16, v17, v18, v19);
  }
}

uint64_t sub_10011D5CC(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_10002572C(&qword_10021CED0);
  __chkstk_darwin(v4 - 8);
  id v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000A5938(a2, (uint64_t)v6);
  uint64_t v7 = type metadata accessor for TopicCacheEntry();
  sub_100026BA8((uint64_t)v6, 0, v8, v7);
  id v9 = a1;
  sub_100118AA0();
  return swift_endAccess();
}

uint64_t sub_10011D684(void *a1)
{
  uint64_t v2 = sub_10002572C(&qword_10021CED0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for TopicCacheEntry();
  sub_100026BA8((uint64_t)v4, 1, v6, v5);
  id v7 = a1;
  sub_100118AA0();
  return swift_endAccess();
}

uint64_t sub_10011D72C()
{
  sub_1000A59EC();
  type metadata accessor for TopicCacheEntry();
  sub_1000A5A2C();
  uint64_t v1 = Dictionary.init(dictionaryLiteral:)();
  swift_beginAccess();
  *(void *)(v0 + 24) = v1;
  return swift_bridgeObjectRelease();
}

uint64_t sub_10011D7B0()
{
  swift_bridgeObjectRelease();

  return _swift_deallocClassInstance(v0, 32, 7);
}

uint64_t type metadata accessor for TopicCacheInMemoryImpl()
{
  return self;
}

void sub_10011D80C(size_t *a1)
{
  uint64_t v2 = *(void *)(sub_10002572C(&qword_10021E678) - 8);
  size_t v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    size_t v3 = sub_10011BE8C(v3);
  }
  uint64_t v4 = *(void *)(v3 + 16);
  v5[0] = v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v5[1] = v4;
  sub_10011D980((int64_t)v5);
  *a1 = v3;
}

uint64_t sub_10011D8B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10002572C(&qword_10021E678);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10011D920(uint64_t a1)
{
  uint64_t v2 = sub_10002572C(&qword_10021E678);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_10011D980(int64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v169 = type metadata accessor for Date();
  uint64_t v4 = *(void *)(v169 - 8);
  uint64_t v5 = __chkstk_darwin(v169);
  uint64_t v168 = (char *)&v149 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v167 = (char *)&v149 - v7;
  uint64_t v173 = sub_10002572C(&qword_10021E678);
  uint64_t v159 = *(void *)(v173 - 8);
  uint64_t v8 = __chkstk_darwin(v173);
  uint64_t v156 = (uint64_t)&v149 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v174 = (uint64_t)&v149 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v166 = (uint64_t *)((char *)&v149 - v13);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v165 = (uint64_t *)((char *)&v149 - v15);
  uint64_t v16 = __chkstk_darwin(v14);
  unint64_t v171 = (uint64_t *)((char *)&v149 - v17);
  __chkstk_darwin(v16);
  uint64_t v170 = (uint64_t *)((char *)&v149 - v18);
  Swift::Int v19 = *(void *)(a1 + 8);
  Swift::Int v20 = _minimumMergeRunLength(_:)(v19);
  if (v20 >= v19)
  {
    if ((v19 & 0x8000000000000000) == 0)
    {
      if (v19) {
        sub_10011E66C(0, v19, 1, (void *)a1);
      }
      return;
    }
    goto LABEL_139;
  }
  Swift::Int v151 = v20;
  uint64_t v150 = sub_1000EE2F4(v19 / 2);
  unint64_t v158 = v21;
  if (v19 <= 0)
  {
LABEL_103:
    uint64_t v23 = (char *)_swiftEmptyArrayStorage;
    unint64_t v89 = _swiftEmptyArrayStorage[2];
LABEL_104:
    if (v89 < 2)
    {
LABEL_115:
      swift_bridgeObjectRelease();
      if (v19 >= -1) {
        goto LABEL_116;
      }
      goto LABEL_143;
    }
    uint64_t v142 = *(void *)a1;
    while (1)
    {
      a1 = v89 - 2;
      if (v89 < 2) {
        break;
      }
      if (!v142) {
        goto LABEL_147;
      }
      uint64_t v143 = (uint64_t)v23;
      uint64_t v144 = *(void *)&v23[16 * a1 + 32];
      uint64_t v145 = *(void *)&v23[16 * v89 + 24];
      sub_10011EA8C(v142 + *(void *)(v159 + 72) * v144, v142 + *(void *)(v159 + 72) * *(void *)&v23[16 * v89 + 16], (void (**)(char *, uint64_t, uint64_t))(v142 + *(void *)(v159 + 72) * v145), v158);
      if (v2) {
        goto LABEL_101;
      }
      if (v145 < v144) {
        goto LABEL_134;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_10011B25C(v143);
        uint64_t v143 = v148;
      }
      if ((unint64_t)a1 >= *(void *)(v143 + 16)) {
        goto LABEL_135;
      }
      uint64_t v146 = (void *)(v143 + 32 + 16 * a1);
      *uint64_t v146 = v144;
      v146[1] = v145;
      unint64_t v147 = *(void *)(v143 + 16);
      if (v89 > v147) {
        goto LABEL_136;
      }
      memmove((void *)(v143 + 32 + 16 * (v89 - 1)), (const void *)(v143 + 32 + 16 * v89), 16 * (v147 - v89));
      uint64_t v23 = (char *)v143;
      *(void *)(v143 + 16) = v147 - 1;
      unint64_t v89 = v147 - 1;
      if (v147 <= 2) {
        goto LABEL_115;
      }
    }
LABEL_133:
    __break(1u);
LABEL_134:
    __break(1u);
LABEL_135:
    __break(1u);
LABEL_136:
    __break(1u);
LABEL_137:
    __break(1u);
LABEL_138:
    __break(1u);
LABEL_139:
    __break(1u);
LABEL_140:
    __break(1u);
LABEL_141:
    __break(1u);
LABEL_142:
    __break(1u);
LABEL_143:
    __break(1u);
LABEL_144:
    __break(1u);
LABEL_145:
    __break(1u);
LABEL_146:
    __break(1u);
LABEL_147:
    __break(1u);
    return;
  }
  Swift::Int v22 = 0;
  uint64_t v163 = (void (**)(char *, uint64_t))(v4 + 8);
  uint64_t v164 = (void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  uint64_t v23 = (char *)_swiftEmptyArrayStorage;
  Swift::Int v24 = v19;
  Swift::Int v152 = v19;
  uint64_t v178 = (uint64_t *)a1;
  while (1)
  {
    Swift::Int v25 = v22;
    Swift::Int v26 = v22 + 1;
    uint64_t v155 = v23;
    Swift::Int v157 = v22;
    if (v22 + 1 < v24)
    {
      uint64_t v27 = *(void *)a1;
      uint64_t v153 = v27;
      Swift::Int v28 = *(void *)(v159 + 72);
      Swift::Int v177 = v28;
      Swift::Int v172 = v22 + 1;
      id v29 = v170;
      sub_10011D8B8(v27 + v28 * v26, (uint64_t)v170);
      unint64_t v30 = v171;
      sub_10011D8B8(v27 + v28 * v25, (uint64_t)v171);
      uint64_t v31 = v173;
      uint64_t v32 = *(int *)(v173 + 48);
      uint64_t v33 = (uint64_t)v165 + v32;
      *uint64_t v165 = *v29;
      sub_1000A5938((uint64_t)v29 + v32, v33);
      uint64_t v34 = *v164;
      uint64_t v35 = v167;
      uint64_t v36 = v169;
      (*v164)(v167, v33, v169);
      sub_1000A58DC(v33);
      uint64_t v37 = *(int *)(v31 + 48);
      uint64_t v38 = (uint64_t)v166 + v37;
      void *v166 = *v30;
      sub_1000A5938((uint64_t)v30 + v37, v38);
      uint64_t v39 = v168;
      uint64_t v175 = v34;
      v34(v168, v38, v36);
      uint64_t v40 = v38;
      Swift::Int v25 = v157;
      sub_1000A58DC(v40);
      LODWORD(v176) = static Date.< infix(_:_:)();
      unint64_t v41 = *v163;
      (*v163)(v39, v36);
      uint64_t v162 = v41;
      v41(v35, v36);
      uint64_t v42 = v153;
      sub_10011D920((uint64_t)v171);
      sub_10011D920((uint64_t)v170);
      Swift::Int v43 = v177;
      Swift::Int v26 = v25 + 2;
      if (v25 + 2 < v24)
      {
        uint64_t v149 = v2;
        uint64_t v160 = v177 * v172;
        uint64_t v154 = v177 * v26;
        Swift::Int v161 = v24;
        while (1)
        {
          Swift::Int v172 = v26;
          unint64_t v44 = v170;
          sub_10011D8B8(v42 + v154, (uint64_t)v170);
          uint64_t v45 = v171;
          sub_10011D8B8(v42 + v160, (uint64_t)v171);
          uint64_t v46 = v173;
          uint64_t v47 = *(int *)(v173 + 48);
          uint64_t v48 = (uint64_t)v165 + v47;
          *uint64_t v165 = *v44;
          sub_1000A5938((uint64_t)v44 + v47, v48);
          double v49 = v167;
          uint64_t v50 = v169;
          unint64_t v51 = v175;
          v175(v167, v48, v169);
          sub_1000A58DC(v48);
          uint64_t v52 = *(int *)(v46 + 48);
          uint64_t v53 = (uint64_t)v166 + v52;
          void *v166 = *v45;
          sub_1000A5938((uint64_t)v45 + v52, v53);
          uint64_t v54 = v168;
          v51(v168, v53, v50);
          sub_1000A58DC(v53);
          LODWORD(v53) = static Date.< infix(_:_:)();
          uint64_t v55 = v162;
          v162(v54, v50);
          v55(v49, v50);
          sub_10011D920((uint64_t)v45);
          sub_10011D920((uint64_t)v44);
          if ((v176 ^ v53)) {
            break;
          }
          Swift::Int v26 = v172 + 1;
          Swift::Int v43 = v177;
          v42 += v177;
          Swift::Int v24 = v161;
          if (v172 + 1 >= v161)
          {
            Swift::Int v26 = v161;
            uint64_t v2 = v149;
            Swift::Int v25 = v157;
            goto LABEL_11;
          }
        }
        uint64_t v2 = v149;
        Swift::Int v26 = v172;
        Swift::Int v25 = v157;
        Swift::Int v24 = v161;
        Swift::Int v43 = v177;
      }
LABEL_11:
      a1 = (int64_t)v178;
      if (v176)
      {
        if (v26 < v25) {
          goto LABEL_140;
        }
        if (v25 < v26)
        {
          Swift::Int v161 = v24;
          uint64_t v56 = 0;
          uint64_t v57 = v43 * (v26 - 1);
          Swift::Int v58 = v26 * v43;
          Swift::Int v59 = v25;
          uint64_t v60 = v25 * v43;
          do
          {
            if (v59 != v26 + v56 - 1)
            {
              uint64_t v61 = v153;
              if (!v153) {
                goto LABEL_146;
              }
              unint64_t v62 = v153 + v60;
              uint64_t v176 = v153 + v57;
              sub_10011BE24(v153 + v60, v156);
              if (v60 < v57 || v62 >= v61 + v58)
              {
                uint64_t v64 = v176;
                swift_arrayInitWithTakeFrontToBack();
              }
              else
              {
                uint64_t v64 = v176;
                if (v60 != v57) {
                  swift_arrayInitWithTakeBackToFront();
                }
              }
              sub_10011BE24(v156, v64);
              Swift::Int v25 = v157;
              Swift::Int v43 = v177;
            }
            ++v59;
            --v56;
            v57 -= v43;
            v58 -= v43;
            v60 += v43;
          }
          while (v59 < v26 + v56);
          a1 = (int64_t)v178;
          Swift::Int v24 = v161;
        }
      }
    }
    if (v26 < v24)
    {
      if (__OFSUB__(v26, v25)) {
        goto LABEL_138;
      }
      if (v26 - v25 < v151)
      {
        if (__OFADD__(v25, v151)) {
          goto LABEL_141;
        }
        if (v25 + v151 >= v24) {
          Swift::Int v65 = v24;
        }
        else {
          Swift::Int v65 = v25 + v151;
        }
        if (v65 < v25) {
          goto LABEL_142;
        }
        if (v26 != v65)
        {
          uint64_t v149 = v2;
          uint64_t v66 = *(void *)(v159 + 72);
          uint64_t v67 = v66 * (v26 - 1);
          uint64_t v160 = v66;
          Swift::Int v68 = v26 * v66;
          uint64_t v154 = v65;
          do
          {
            uint64_t v69 = 0;
            Swift::Int v172 = v26;
            Swift::Int v161 = v68;
            uint64_t v162 = (void (*)(char *, uint64_t))v67;
            while (1)
            {
              Swift::Int v177 = v25;
              uint64_t v70 = *v178;
              uint64_t v176 = v68 + v69;
              uint64_t v71 = v68 + v69 + v70;
              uint64_t v72 = v170;
              sub_10011D8B8(v71, (uint64_t)v170);
              uint64_t v175 = (void (*)(char *, uint64_t, uint64_t))(v67 + v69);
              unint64_t v73 = v171;
              sub_10011D8B8(v67 + v69 + v70, (uint64_t)v171);
              uint64_t v74 = v173;
              uint64_t v75 = *(int *)(v173 + 48);
              uint64_t v76 = (uint64_t)v165 + v75;
              *uint64_t v165 = *v72;
              sub_1000A5938((uint64_t)v72 + v75, v76);
              uint64_t v77 = *v164;
              uint64_t v78 = v167;
              uint64_t v79 = v169;
              (*v164)(v167, v76, v169);
              sub_1000A58DC(v76);
              uint64_t v80 = *(int *)(v74 + 48);
              uint64_t v81 = (uint64_t)v166 + v80;
              void *v166 = *v73;
              sub_1000A5938((uint64_t)v73 + v80, v81);
              uint64_t v82 = v168;
              v77(v168, v81, v79);
              sub_1000A58DC(v81);
              LOBYTE(v81) = static Date.< infix(_:_:)();
              uint64_t v83 = *v163;
              (*v163)(v82, v79);
              v83(v78, v79);
              sub_10011D920((uint64_t)v73);
              sub_10011D920((uint64_t)v72);
              if ((v81 & 1) == 0) {
                break;
              }
              uint64_t v84 = *v178;
              if (!*v178) {
                goto LABEL_144;
              }
              Swift::Int v68 = v161;
              uint64_t v67 = (uint64_t)v162;
              uint64_t v85 = (uint64_t)v162 + v84 + v69;
              sub_10011BE24(v84 + v161 + v69, v174);
              Swift::Int v86 = v172;
              swift_arrayInitWithTakeFrontToBack();
              sub_10011BE24(v174, v85);
              v69 -= v160;
              Swift::Int v25 = v177 + 1;
              if (v86 == v177 + 1) {
                goto LABEL_44;
              }
            }
            Swift::Int v86 = v172;
            Swift::Int v68 = v161;
            uint64_t v67 = (uint64_t)v162;
LABEL_44:
            Swift::Int v26 = v86 + 1;
            v67 += v160;
            v68 += v160;
            Swift::Int v25 = v157;
          }
          while (v26 != v154);
          Swift::Int v26 = v154;
          uint64_t v2 = v149;
          a1 = (int64_t)v178;
        }
      }
    }
    if (v26 < v25) {
      goto LABEL_137;
    }
    if (swift_isUniquelyReferenced_nonNull_native())
    {
      uint64_t v23 = v155;
    }
    else
    {
      sub_10011B190(0, *((void *)v155 + 2) + 1, 1, v155);
      uint64_t v23 = v140;
    }
    unint64_t v88 = *((void *)v23 + 2);
    unint64_t v87 = *((void *)v23 + 3);
    unint64_t v89 = v88 + 1;
    if (v88 >= v87 >> 1)
    {
      sub_10011B190(v87 > 1, v88 + 1, 1, v23);
      uint64_t v23 = v141;
    }
    *((void *)v23 + 2) = v89;
    uint64_t v90 = v23 + 32;
    uint64_t v91 = &v23[16 * v88 + 32];
    *(void *)uint64_t v91 = v25;
    *((void *)v91 + 1) = v26;
    Swift::Int v172 = v26;
    if (v88) {
      break;
    }
    unint64_t v89 = 1;
LABEL_94:
    Swift::Int v24 = *(void *)(a1 + 8);
    Swift::Int v22 = v172;
    Swift::Int v19 = v152;
    if (v172 >= v24) {
      goto LABEL_104;
    }
  }
  while (1)
  {
    unint64_t v92 = v89 - 1;
    if (v89 >= 4)
    {
      uint64_t v97 = &v90[16 * v89];
      uint64_t v98 = *((void *)v97 - 8);
      uint64_t v99 = *((void *)v97 - 7);
      BOOL v103 = __OFSUB__(v99, v98);
      uint64_t v100 = v99 - v98;
      if (v103) {
        goto LABEL_122;
      }
      uint64_t v102 = *((void *)v97 - 6);
      uint64_t v101 = *((void *)v97 - 5);
      BOOL v103 = __OFSUB__(v101, v102);
      uint64_t v95 = v101 - v102;
      char v96 = v103;
      if (v103) {
        goto LABEL_123;
      }
      unint64_t v104 = v89 - 2;
      uint64_t v105 = &v90[16 * v89 - 32];
      uint64_t v107 = *(void *)v105;
      uint64_t v106 = *((void *)v105 + 1);
      BOOL v103 = __OFSUB__(v106, v107);
      uint64_t v108 = v106 - v107;
      if (v103) {
        goto LABEL_124;
      }
      BOOL v103 = __OFADD__(v95, v108);
      uint64_t v109 = v95 + v108;
      if (v103) {
        goto LABEL_126;
      }
      if (v109 >= v100)
      {
        uint64_t v127 = &v90[16 * v92];
        uint64_t v129 = *(void *)v127;
        uint64_t v128 = *((void *)v127 + 1);
        BOOL v103 = __OFSUB__(v128, v129);
        uint64_t v130 = v128 - v129;
        if (v103) {
          goto LABEL_132;
        }
        BOOL v120 = v95 < v130;
        goto LABEL_83;
      }
    }
    else
    {
      if (v89 != 3)
      {
        uint64_t v121 = *((void *)v23 + 4);
        uint64_t v122 = *((void *)v23 + 5);
        BOOL v103 = __OFSUB__(v122, v121);
        uint64_t v114 = v122 - v121;
        char v115 = v103;
        goto LABEL_77;
      }
      uint64_t v94 = *((void *)v23 + 4);
      uint64_t v93 = *((void *)v23 + 5);
      BOOL v103 = __OFSUB__(v93, v94);
      uint64_t v95 = v93 - v94;
      char v96 = v103;
    }
    if (v96) {
      goto LABEL_125;
    }
    unint64_t v104 = v89 - 2;
    uint64_t v110 = &v90[16 * v89 - 32];
    uint64_t v112 = *(void *)v110;
    uint64_t v111 = *((void *)v110 + 1);
    BOOL v113 = __OFSUB__(v111, v112);
    uint64_t v114 = v111 - v112;
    char v115 = v113;
    if (v113) {
      goto LABEL_127;
    }
    char v116 = &v90[16 * v92];
    uint64_t v118 = *(void *)v116;
    uint64_t v117 = *((void *)v116 + 1);
    BOOL v103 = __OFSUB__(v117, v118);
    uint64_t v119 = v117 - v118;
    if (v103) {
      goto LABEL_129;
    }
    if (__OFADD__(v114, v119)) {
      goto LABEL_131;
    }
    if (v114 + v119 >= v95)
    {
      BOOL v120 = v95 < v119;
LABEL_83:
      if (v120) {
        unint64_t v92 = v104;
      }
      goto LABEL_85;
    }
LABEL_77:
    if (v115) {
      goto LABEL_128;
    }
    uint64_t v123 = &v90[16 * v92];
    uint64_t v125 = *(void *)v123;
    uint64_t v124 = *((void *)v123 + 1);
    BOOL v103 = __OFSUB__(v124, v125);
    uint64_t v126 = v124 - v125;
    if (v103) {
      goto LABEL_130;
    }
    if (v126 < v114) {
      goto LABEL_94;
    }
LABEL_85:
    unint64_t v131 = v92 - 1;
    if (v92 - 1 >= v89)
    {
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
      goto LABEL_133;
    }
    uint64_t v132 = *(void *)a1;
    if (!*(void *)a1) {
      goto LABEL_145;
    }
    uint64_t v133 = v23;
    uint64_t v134 = v90;
    uint64_t v135 = (int64_t *)&v90[16 * v131];
    a1 = *v135;
    uint64_t v136 = v134;
    uint64_t v137 = &v134[16 * v92];
    uint64_t v138 = *((void *)v137 + 1);
    sub_10011EA8C(v132 + *(void *)(v159 + 72) * *v135, v132 + *(void *)(v159 + 72) * *(void *)v137, (void (**)(char *, uint64_t, uint64_t))(v132 + *(void *)(v159 + 72) * v138), v158);
    if (v2) {
      break;
    }
    if (v138 < a1) {
      goto LABEL_119;
    }
    if (v92 > *((void *)v133 + 2)) {
      goto LABEL_120;
    }
    int64_t *v135 = a1;
    *(void *)&v136[16 * v131 + 8] = v138;
    unint64_t v139 = *((void *)v133 + 2);
    if (v92 >= v139) {
      goto LABEL_121;
    }
    uint64_t v90 = v136;
    unint64_t v89 = v139 - 1;
    memmove(v137, v137 + 16, 16 * (v139 - 1 - v92));
    uint64_t v23 = v133;
    *((void *)v133 + 2) = v139 - 1;
    a1 = (int64_t)v178;
    if (v139 <= 2) {
      goto LABEL_94;
    }
  }
  Swift::Int v19 = v152;
LABEL_101:
  swift_bridgeObjectRelease();
  if (v19 < -1)
  {
    __break(1u);
    goto LABEL_103;
  }
LABEL_116:
  *(void *)(v150 + 16) = 0;
  swift_bridgeObjectRelease();
}

uint64_t sub_10011E66C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v46 = a1;
  uint64_t v55 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v55 - 8);
  uint64_t v8 = __chkstk_darwin(v55);
  uint64_t v54 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v53 = (char *)&v44 - v10;
  uint64_t v60 = sub_10002572C(&qword_10021E678);
  uint64_t v11 = __chkstk_darwin(v60);
  uint64_t v61 = (uint64_t)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v52 = (uint64_t *)((char *)&v44 - v14);
  uint64_t v15 = __chkstk_darwin(v13);
  unint64_t v51 = (uint64_t *)((char *)&v44 - v16);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v50 = (char *)&v44 - v18;
  uint64_t result = __chkstk_darwin(v17);
  double v49 = (uint64_t *)((char *)&v44 - v21);
  uint64_t v59 = a3;
  uint64_t v45 = a2;
  if (a3 != a2)
  {
    uint64_t v22 = *(void *)(v20 + 72);
    uint64_t v47 = (void (**)(char *, uint64_t))(v7 + 8);
    uint64_t v48 = (void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    uint64_t v23 = v22 * (v59 - 1);
    uint64_t v56 = v22;
    uint64_t v24 = v22 * v59;
    uint64_t v64 = a4;
    Swift::Int v25 = v50;
    Swift::Int v26 = v53;
    uint64_t v27 = v55;
    while (2)
    {
      uint64_t v28 = 0;
      uint64_t v65 = v46;
      uint64_t v57 = v24;
      uint64_t v58 = v23;
      do
      {
        uint64_t v29 = *a4;
        uint64_t v63 = v24 + v28;
        uint64_t v30 = v24 + v28 + v29;
        uint64_t v31 = v49;
        sub_10011D8B8(v30, (uint64_t)v49);
        uint64_t v62 = v23 + v28;
        sub_10011D8B8(v23 + v28 + v29, (uint64_t)v25);
        uint64_t v32 = v60;
        uint64_t v33 = *(int *)(v60 + 48);
        uint64_t v34 = (uint64_t)v51 + v33;
        *unint64_t v51 = *v31;
        sub_1000A5938((uint64_t)v31 + v33, v34);
        uint64_t v35 = *v48;
        (*v48)(v26, v34, v27);
        sub_1000A58DC(v34);
        uint64_t v36 = *(int *)(v32 + 48);
        uint64_t v37 = (uint64_t)v52 + v36;
        *uint64_t v52 = *v25;
        sub_1000A5938((uint64_t)v25 + v36, v37);
        uint64_t v38 = v54;
        v35(v54, v37, v27);
        sub_1000A58DC(v37);
        LOBYTE(v37) = static Date.< infix(_:_:)();
        uint64_t v39 = *v47;
        uint64_t v40 = v38;
        uint64_t v23 = v58;
        (*v47)(v40, v27);
        v39(v26, v27);
        a4 = v64;
        sub_10011D920((uint64_t)v25);
        uint64_t v41 = (uint64_t)v31;
        uint64_t v24 = v57;
        uint64_t result = sub_10011D920(v41);
        if ((v37 & 1) == 0) {
          break;
        }
        uint64_t v42 = *a4;
        if (!*a4)
        {
          __break(1u);
          return result;
        }
        uint64_t v43 = v42 + v23 + v28;
        sub_10011BE24(v42 + v24 + v28, v61);
        swift_arrayInitWithTakeFrontToBack();
        uint64_t result = sub_10011BE24(v61, v43);
        v28 -= v56;
        ++v65;
        a4 = v64;
      }
      while (v59 != v65);
      v23 += v56;
      v24 += v56;
      if (++v59 != v45) {
        continue;
      }
      break;
    }
  }
  return result;
}

void sub_10011EA8C(uint64_t a1, unint64_t a2, void (**a3)(char *, uint64_t, uint64_t), unint64_t a4)
{
  uint64_t v85 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v85 - 8);
  uint64_t v9 = __chkstk_darwin(v85);
  uint64_t v84 = (char *)&v71 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v83 = (char *)&v71 - v11;
  uint64_t v90 = sub_10002572C(&qword_10021E678);
  uint64_t v12 = __chkstk_darwin(v90);
  uint64_t v82 = (uint64_t *)((char *)&v71 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v81 = (uint64_t *)((char *)&v71 - v15);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v80 = (uint64_t *)((char *)&v71 - v17);
  __chkstk_darwin(v16);
  uint64_t v79 = (uint64_t *)((char *)&v71 - v18);
  uint64_t v20 = *(void *)(v19 + 72);
  if (!v20)
  {
    __break(1u);
LABEL_77:
    __break(1u);
LABEL_78:
    __break(1u);
    goto LABEL_79;
  }
  uint64_t v21 = a2 - a1;
  if (a2 - a1 == 0x8000000000000000 && v20 == -1) {
    goto LABEL_77;
  }
  uint64_t v23 = (uint64_t)a3 - a2;
  if ((void (**)(char *, uint64_t, uint64_t))((char *)a3 - a2) == (void (**)(char *, uint64_t, uint64_t))0x8000000000000000
    && v20 == -1)
  {
    goto LABEL_78;
  }
  unint64_t v25 = a1;
  uint64_t v26 = v21 / v20;
  uint64_t v27 = v23 / v20;
  uint64_t v78 = v20;
  if (v21 / v20 >= v23 / v20)
  {
    sub_100119470(a2, v23 / v20);
    uint64_t v29 = (void (**)(char *, uint64_t, uint64_t))(a4 + v27 * v20);
    if (v27 * v20 < 1 || v25 >= a2) {
      goto LABEL_45;
    }
    uint64_t v74 = -v20;
    uint64_t v72 = (void (**)(char *, uint64_t))(v8 + 8);
    unint64_t v73 = (void (**)(char *, uint64_t, uint64_t))(v8 + 16);
    unint64_t v87 = v25;
    unint64_t v88 = a4;
    while (1)
    {
      Swift::Int v86 = v29;
      uint64_t v51 = v74;
      unint64_t v89 = (unint64_t)a3 + v74;
      uint64_t v76 = (void (**)(char *, uint64_t))((char *)v29 + v74);
      uint64_t v77 = a3;
      uint64_t v52 = v79;
      sub_10011D8B8((uint64_t)v29 + v74, (uint64_t)v79);
      unint64_t v75 = a2 + v51;
      uint64_t v53 = v80;
      sub_10011D8B8(a2 + v51, (uint64_t)v80);
      uint64_t v54 = v90;
      uint64_t v55 = *(int *)(v90 + 48);
      uint64_t v56 = (uint64_t)v81 + v55;
      void *v81 = *v52;
      sub_1000A5938((uint64_t)v52 + v55, v56);
      uint64_t v57 = *v73;
      uint64_t v58 = v83;
      uint64_t v59 = (void (**)(char *, uint64_t, uint64_t))a2;
      uint64_t v60 = v85;
      (*v73)(v83, v56, v85);
      sub_1000A58DC(v56);
      uint64_t v61 = *(int *)(v54 + 48);
      uint64_t v62 = (uint64_t)v82 + v61;
      *uint64_t v82 = *v53;
      sub_1000A5938((uint64_t)v53 + v61, v62);
      uint64_t v63 = v84;
      v57(v84, v62, v60);
      sub_1000A58DC(v62);
      LOBYTE(v62) = static Date.< infix(_:_:)();
      uint64_t v64 = *v72;
      (*v72)(v63, v60);
      v64(v58, v60);
      sub_10011D920((uint64_t)v53);
      sub_10011D920((uint64_t)v52);
      if (v62) {
        break;
      }
      a3 = (void (**)(char *, uint64_t, uint64_t))v89;
      BOOL v68 = v77 < v86 || v89 >= (unint64_t)v86;
      a2 = (unint64_t)v59;
      if (!v68)
      {
        unint64_t v67 = v87;
        a4 = v88;
        uint64_t v20 = v78;
        if (v77 == v86)
        {
          uint64_t v29 = (void (**)(char *, uint64_t, uint64_t))v76;
          goto LABEL_70;
        }
        uint64_t v65 = (void (**)(char *, uint64_t, uint64_t))v76;
LABEL_67:
        swift_arrayInitWithTakeBackToFront();
        goto LABEL_69;
      }
      uint64_t v69 = v76;
      swift_arrayInitWithTakeFrontToBack();
      uint64_t v29 = (void (**)(char *, uint64_t, uint64_t))v69;
      unint64_t v67 = v87;
      a4 = v88;
      uint64_t v20 = v78;
LABEL_70:
      if ((unint64_t)v29 <= a4 || a2 <= v67) {
        goto LABEL_45;
      }
    }
    uint64_t v65 = v86;
    a3 = (void (**)(char *, uint64_t, uint64_t))v89;
    if (v77 < v59 || v89 >= (unint64_t)v59)
    {
      a2 = v75;
      swift_arrayInitWithTakeFrontToBack();
      unint64_t v67 = v87;
      a4 = v88;
      uint64_t v20 = v78;
    }
    else
    {
      unint64_t v67 = v87;
      a4 = v88;
      uint64_t v20 = v78;
      if (v77 != v59)
      {
        a2 = v75;
        goto LABEL_67;
      }
      a2 = v75;
    }
LABEL_69:
    uint64_t v29 = v65;
    goto LABEL_70;
  }
  unint64_t v28 = v25;
  sub_100119470(v25, v21 / v20);
  uint64_t v29 = (void (**)(char *, uint64_t, uint64_t))(a4 + v26 * v20);
  if (v26 * v20 >= 1 && a2 < (unint64_t)a3)
  {
    unint64_t v89 = (unint64_t)a3;
    uint64_t v76 = (void (**)(char *, uint64_t))(v8 + 8);
    uint64_t v77 = (void (**)(char *, uint64_t, uint64_t))(v8 + 16);
    Swift::Int v86 = (void (**)(char *, uint64_t, uint64_t))(a4 + v26 * v20);
    uint64_t v31 = v80;
    do
    {
      unint64_t v87 = v28;
      unint64_t v88 = a4;
      uint64_t v32 = v79;
      sub_10011D8B8(a2, (uint64_t)v79);
      sub_10011D8B8(a4, (uint64_t)v31);
      uint64_t v33 = v90;
      uint64_t v34 = *(int *)(v90 + 48);
      uint64_t v35 = (uint64_t)v81 + v34;
      void *v81 = *v32;
      sub_1000A5938((uint64_t)v32 + v34, v35);
      uint64_t v36 = *v77;
      unint64_t v37 = a2;
      uint64_t v38 = v83;
      uint64_t v39 = v85;
      (*v77)(v83, v35, v85);
      sub_1000A58DC(v35);
      uint64_t v40 = *(int *)(v33 + 48);
      uint64_t v41 = (uint64_t)v82 + v40;
      *uint64_t v82 = *v31;
      sub_1000A5938((uint64_t)v31 + v40, v41);
      uint64_t v42 = v84;
      v36(v84, v41, v39);
      sub_1000A58DC(v41);
      LOBYTE(v41) = static Date.< infix(_:_:)();
      uint64_t v43 = *v76;
      (*v76)(v42, v39);
      v43(v38, v39);
      sub_10011D920((uint64_t)v31);
      sub_10011D920((uint64_t)v32);
      if (v41)
      {
        uint64_t v20 = v78;
        a2 = v37 + v78;
        unint64_t v44 = v87;
        a4 = v88;
        if (v87 < v37 || v87 >= a2)
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (v87 != v37)
        {
          swift_arrayInitWithTakeBackToFront();
        }
      }
      else
      {
        uint64_t v20 = v78;
        unint64_t v44 = v87;
        a4 = v88 + v78;
        if (v87 < v88 || v87 >= a4)
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (v87 != v88)
        {
          swift_arrayInitWithTakeBackToFront();
        }
        a2 = v37;
      }
      uint64_t v29 = v86;
      unint64_t v28 = v44 + v20;
    }
    while (a4 < (unint64_t)v86 && a2 < v89);
  }
LABEL_45:
  double v49 = (char *)v29 - a4;
  if (v20 != -1 || v49 != (char *)0x8000000000000000)
  {
    sub_100119470(a4, (uint64_t)v49 / v20);
    return;
  }
LABEL_79:
  __break(1u);
}

uint64_t sub_10011F130(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x7365756C6176 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_10011F1B0()
{
  return 0x7365756C6176;
}

uint64_t sub_10011F1C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, BOOL *a3@<X8>)
{
  uint64_t result = sub_10011F130(a1, a2);
  *a3 = result != 0;
  return result;
}

void sub_10011F1F4(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_10011F200(uint64_t a1)
{
  unint64_t v2 = sub_100121844();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10011F23C(uint64_t a1)
{
  unint64_t v2 = sub_100121844();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t EnumModel.values.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  void *v1 = a1;
  return result;
}

Swift::Void (__swiftcall *SchemaMismatchError.expected.modify())()
{
  return _CPStartNetworkSearchFeedback.redactUnused();
}

uint64_t EnumModel.nextAvailableValue.getter(uint64_t a1)
{
  uint64_t result = sub_10001FC30(a1, &v15);
  int64_t v2 = v18;
  unint64_t v3 = v19;
  int64_t v4 = (unint64_t)(v17 + 64) >> 6;
  uint64_t v5 = 1;
  if (!v19) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v6 = __clz(__rbit64(v3));
  v3 &= v3 - 1;
  unint64_t v7 = v6 | (v2 << 6);
  while (1)
  {
    int v12 = *(_DWORD *)(*(void *)(v15 + 56) + 4 * v7);
    BOOL v13 = __OFADD__(v12, 1);
    int v14 = v12 + 1;
    if (v13) {
      break;
    }
    if (v14 <= (int)v5) {
      uint64_t v5 = v5;
    }
    else {
      uint64_t v5 = v14;
    }
    if (v3) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v8 = v2 + 1;
    if (__OFADD__(v2, 1)) {
      goto LABEL_29;
    }
    if (v8 >= v4) {
      goto LABEL_27;
    }
    unint64_t v9 = *(void *)(v16 + 8 * v8);
    int64_t v10 = v2 + 1;
    if (!v9)
    {
      int64_t v10 = v2 + 2;
      if (v2 + 2 >= v4) {
        goto LABEL_27;
      }
      unint64_t v9 = *(void *)(v16 + 8 * v10);
      if (!v9)
      {
        int64_t v10 = v2 + 3;
        if (v2 + 3 >= v4) {
          goto LABEL_27;
        }
        unint64_t v9 = *(void *)(v16 + 8 * v10);
        if (!v9)
        {
          int64_t v10 = v2 + 4;
          if (v2 + 4 >= v4) {
            goto LABEL_27;
          }
          unint64_t v9 = *(void *)(v16 + 8 * v10);
          if (!v9)
          {
            int64_t v10 = v2 + 5;
            if (v2 + 5 >= v4) {
              goto LABEL_27;
            }
            unint64_t v9 = *(void *)(v16 + 8 * v10);
            if (!v9)
            {
              int64_t v10 = v2 + 6;
              if (v2 + 6 >= v4) {
                goto LABEL_27;
              }
              unint64_t v9 = *(void *)(v16 + 8 * v10);
              if (!v9)
              {
                int64_t v11 = v2 + 7;
                while (v11 < v4)
                {
                  unint64_t v9 = *(void *)(v16 + 8 * v11++);
                  if (v9)
                  {
                    int64_t v10 = v11 - 1;
                    goto LABEL_20;
                  }
                }
LABEL_27:
                swift_bridgeObjectRetain();
                swift_release();
                return v5;
              }
            }
          }
        }
      }
    }
LABEL_20:
    unint64_t v3 = (v9 - 1) & v9;
    unint64_t v7 = __clz(__rbit64(v9)) + (v10 << 6);
    int64_t v2 = v10;
  }
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

uint64_t EnumModel.init(from:)(void *a1)
{
  sub_10002572C(&qword_100220898);
  sub_100020C48();
  __chkstk_darwin(v3);
  sub_100017DC8();
  uint64_t v4 = (uint64_t)sub_10001B620(a1, a1[3]);
  sub_100121844();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    sub_10001CA50((uint64_t)a1);
  }
  else
  {
    sub_10002572C(&qword_1002208A8);
    sub_100121890(&qword_1002208B0);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v4 = v8;
    if (!v8) {
      uint64_t v4 = Dictionary.init(dictionaryLiteral:)();
    }
    uint64_t v6 = sub_100027F58();
    v7(v6);
    sub_10001CA50((uint64_t)a1);
  }
  return v4;
}

uint64_t EnumModel.encode(to:)(void *a1, uint64_t a2)
{
  sub_10002572C(&qword_1002208B8);
  sub_100020C48();
  __chkstk_darwin(v4);
  sub_100017DC8();
  sub_10001B620(a1, a1[3]);
  sub_100121844();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if (*(void *)(a2 + 16))
  {
    sub_10002572C(&qword_1002208A8);
    sub_100121890(&qword_1002208C0);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  uint64_t v5 = sub_100027F58();
  return v6(v5);
}

uint64_t sub_10011F704(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1;
  }
  uint64_t v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v4 = 0;
  uint64_t v5 = result + 64;
  uint64_t v6 = 1 << *(unsigned char *)(result + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(result + 64);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v11 = v10 | (v4 << 6);
      goto LABEL_22;
    }
    int64_t v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v12 >= v9) {
      return 1;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      int64_t v4 = v12 + 1;
      if (v12 + 1 >= v9) {
        return 1;
      }
      unint64_t v13 = *(void *)(v5 + 8 * v4);
      if (!v13)
      {
        int64_t v4 = v12 + 2;
        if (v12 + 2 >= v9) {
          return 1;
        }
        unint64_t v13 = *(void *)(v5 + 8 * v4);
        if (!v13) {
          break;
        }
      }
    }
LABEL_21:
    unint64_t v8 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_22:
    uint64_t v15 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v11);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    int v18 = *(_DWORD *)(*(void *)(v3 + 56) + 4 * v11);
    swift_bridgeObjectRetain();
    unint64_t v19 = sub_1000287F0(v16, v17);
    char v21 = v20;
    uint64_t result = swift_bridgeObjectRelease();
    if ((v21 & 1) == 0 || *(_DWORD *)(*(void *)(a2 + 56) + 4 * v19) != v18) {
      return 0;
    }
  }
  int64_t v14 = v12 + 3;
  if (v14 >= v9) {
    return 1;
  }
  unint64_t v13 = *(void *)(v5 + 8 * v14);
  if (v13)
  {
    int64_t v4 = v14;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v4 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v4 >= v9) {
      return 1;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v4);
    ++v14;
    if (v13) {
      goto LABEL_21;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_10011F89C(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  uint64_t v3 = a1;
  sub_10002A664();
  if (!v39) {
    return 0;
  }
  uint64_t v257 = v3 + 64;
  sub_10002C43C();
  uint64_t v263 = v6 & v5;
  int64_t v258 = (unint64_t)(v7 + 63) >> 6;
  while (2)
  {
    if (v263)
    {
      sub_100028D64();
      uint64_t v263 = v8;
      uint64_t v260 = v9;
      uint64_t v11 = v10 | (v9 << 6);
    }
    else
    {
      int64_t v12 = v4 + 1;
      if (__OFADD__(v4, 1)) {
        goto LABEL_179;
      }
      if (v12 >= v258) {
        return 1;
      }
      if (!*(void *)(v257 + 8 * v12))
      {
        if (v4 + 2 >= v258) {
          return 1;
        }
        if (!*(void *)(v257 + 8 * (v4 + 2)))
        {
          if (v4 + 3 >= v258) {
            return 1;
          }
          if (!*(void *)(v257 + 8 * (v4 + 3)))
          {
            uint64_t v13 = v4 + 4;
            if (v4 + 4 >= v258) {
              return 1;
            }
            if (!*(void *)(v257 + 8 * v13))
            {
              do
              {
                int64_t v14 = v13 + 1;
                if (__OFADD__(v13, 1)) {
                  goto LABEL_183;
                }
                if (v14 >= v258) {
                  return 1;
                }
                ++v13;
              }
              while (!*(void *)(v257 + 8 * v14));
            }
          }
        }
      }
      sub_1000264EC();
      uint64_t v263 = v15;
      uint64_t v260 = v16;
      uint64_t v11 = v17 + (v16 << 6);
    }
    int v18 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v11);
    uint64_t v19 = *v18;
    uint64_t v20 = v18[1];
    uint64_t v21 = *(void *)(v3 + 56) + 24 * v11;
    uint64_t v23 = *(void **)v21;
    uint64_t v22 = *(void *)(v21 + 8);
    int v24 = *(unsigned __int8 *)(v21 + 16);
    swift_bridgeObjectRetain();
    sub_100121AE0(v23, v22, v24);
    unint64_t v25 = sub_1000287F0(v19, v20);
    char v27 = v26;
    swift_bridgeObjectRelease();
    if ((v27 & 1) == 0) {
      goto LABEL_176;
    }
    uint64_t v28 = *(void *)(a2 + 56) + 24 * v25;
    uint64_t v261 = *(void *)(v28 + 8);
    uint64_t v262 = *(void **)v28;
    char v29 = *(unsigned char *)(v28 + 16);
    switch(v29)
    {
      case 1:
        if (v24 != 1) {
          goto LABEL_176;
        }
        BOOL v39 = v262 == v23 && v261 == v22;
        if (v39) {
          goto LABEL_37;
        }
        LOBYTE(v25) = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t v36 = v23;
        uint64_t v37 = v22;
        char v38 = 1;
LABEL_40:
        sub_100121B34(v36, v37, v38);
        uint64_t v4 = v260;
        if ((v25 & 1) == 0) {
          return 0;
        }
        continue;
      case 2:
        if (v24 != 2) {
          goto LABEL_176;
        }
        uint64_t v40 = (char *)v262[2];
        if (v40 != (char *)v23[2])
        {
          LOBYTE(v24) = 2;
          goto LABEL_176;
        }
        if (v40) {
          BOOL v41 = v262 == v23;
        }
        else {
          BOOL v41 = 1;
        }
        if (v41)
        {
LABEL_37:
          sub_100121B34(v23, v22, v29);
          uint64_t v4 = v260;
          continue;
        }
        char v235 = *(unsigned char *)(v28 + 16);
        uint64_t v256 = v23 + 4;
        swift_bridgeObjectRetain();
        unint64_t v44 = 0;
        uint64_t v248 = v3;
LABEL_42:
        if ((unint64_t)v44 >= v23[2])
        {
          __break(1u);
LABEL_179:
          __break(1u);
LABEL_180:
          __break(1u);
LABEL_181:
          __break(1u);
LABEL_182:
          __break(1u);
LABEL_183:
          __break(1u);
LABEL_184:
          __break(1u);
LABEL_185:
          __break(1u);
          JUMPOUT(0x10012079CLL);
        }
        uint64_t v45 = v44++;
        uint64_t v46 = 3 * (void)v45;
        uint64_t v47 = (uint64_t)&v262[3 * (void)v45 + 4];
        uint64_t v48 = *(void **)v47;
        uint64_t v49 = *(void *)(v47 + 8);
        uint64_t v50 = *(unsigned __int8 *)(v47 + 16);
        uint64_t v51 = (void *)v256[v46];
        uint64_t v52 = v256[v46 + 1];
        int v53 = LOBYTE(v256[v46 + 2]);
        switch(v50)
        {
          case 1:
            if (v53 != 1) {
              goto LABEL_175;
            }
            BOOL v60 = v48 == v51 && v49 == v52;
            if (!v60 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
              goto LABEL_175;
            }
            goto LABEL_167;
          case 2:
            if (v53 != 2) {
              goto LABEL_175;
            }
            uint64_t v61 = v48[2];
            if (v61 != v51[2]) {
              goto LABEL_175;
            }
            if (v61) {
              BOOL v62 = v48 == v51;
            }
            else {
              BOOL v62 = 1;
            }
            if (v62) {
              goto LABEL_167;
            }
            uint64_t v254 = v48 + 4;
            uint64_t v252 = v44;
            uint64_t v253 = v51 + 4;
            uint64_t v249 = v256[v46];
            sub_100121AE0(v51, v52, 2);
            os_log_type_t v232 = v48;
            uint64_t v233 = v49;
            uint64_t v63 = (uint64_t)sub_100121AE0(v48, v49, 2);
            uint64_t v69 = v249;
            unint64_t v259 = 0;
            uint64_t v250 = v61;
            uint64_t v238 = v40;
            break;
          case 3:
            if (v53 != 3) {
              goto LABEL_175;
            }
            uint64_t v205 = (void *)v256[v46];
            sub_100121AE0(v205, v256[v46 + 1], 3);
            sub_100121AE0(v48, v49, 3);
            char v206 = sub_10011F89C(v48, v205);
            uint64_t v207 = v52;
            uint64_t v208 = v3;
            uint64_t v209 = v40;
            uint64_t v210 = v44;
            uint64_t v211 = v48;
            char v56 = v206;
            sub_100121B34(v205, v207, 3);
            uint64_t v57 = v211;
            unint64_t v44 = v210;
            uint64_t v40 = v209;
            uint64_t v3 = v208;
            uint64_t v58 = v49;
            char v59 = 3;
            goto LABEL_166;
          default:
            if (LOBYTE(v256[v46 + 2])) {
              goto LABEL_175;
            }
            uint64_t v54 = (void *)v256[v46];
            uint64_t v251 = v44;
            uint64_t v55 = v48;
            char v56 = sub_10002FF38();
            sub_100121AE0(v54, v52, 0);
            sub_10002509C(v55);
            static NSObject.== infix(_:_:)();
            sub_1000166B0();
            unint64_t v44 = v251;
            uint64_t v3 = v248;
            sub_1000252D4();
LABEL_166:
            sub_100121B34(v57, v58, v59);
            if (v56) {
              goto LABEL_167;
            }
            goto LABEL_175;
        }
LABEL_60:
        unint64_t v70 = v259;
        if (v259 >= *(void *)(v69 + 16)) {
          goto LABEL_180;
        }
        ++v259;
        uint64_t v71 = 3 * v70;
        uint64_t v72 = &v254[3 * v70];
        uint64_t v74 = (void *)*v72;
        uint64_t v73 = v72[1];
        uint64_t v75 = *((unsigned __int8 *)v72 + 16);
        uint64_t v77 = (void *)v253[v71];
        uint64_t v76 = v253[v71 + 1];
        int v78 = LOBYTE(v253[v71 + 2]);
        switch(v75)
        {
          case 1:
            if (v78 != 1) {
              goto LABEL_174;
            }
            if (v74 != v77 || v73 != v76)
            {
              uint64_t v63 = _stringCompareWithSmolCheck(_:_:expecting:)();
              uint64_t v69 = v249;
              if ((v63 & 1) == 0) {
                goto LABEL_174;
              }
            }
            goto LABEL_162;
          case 2:
            if (v78 != 2) {
              goto LABEL_174;
            }
            uint64_t v87 = v74[2];
            if (v87 != v77[2]) {
              goto LABEL_174;
            }
            if (v87) {
              BOOL v88 = v74 == v77;
            }
            else {
              BOOL v88 = 1;
            }
            if (v88) {
              goto LABEL_162;
            }
            unint64_t v89 = v74 + 4;
            uint64_t v247 = v77 + 4;
            uint64_t v90 = v73;
            uint64_t v223 = v253[v71 + 1];
            sub_100121AE0(v77, v76, 2);
            uint64_t v225 = v74;
            uint64_t v227 = v90;
            sub_100121AE0(v74, v90, 2);
            unint64_t v91 = 0;
            uint64_t v236 = v87;
            unint64_t v237 = v74 + 4;
            uint64_t v239 = v77;
            break;
          case 3:
            if (v78 != 3) {
              goto LABEL_174;
            }
            NSURLResourceKey v199 = (void *)v253[v71];
            uint64_t v200 = v73;
            uint64_t v201 = v3;
            uint64_t v202 = v40;
            uint64_t v203 = v253[v71 + 1];
            sub_100121AE0(v199, v203, 3);
            sub_100121AE0(v74, v200, 3);
            char v80 = sub_10011F89C(v74, v199);
            uint64_t v204 = v203;
            uint64_t v40 = v202;
            uint64_t v3 = v201;
            sub_100121B34(v199, v204, 3);
            uint64_t v83 = v74;
            uint64_t v84 = v200;
            char v85 = 3;
            goto LABEL_161;
          default:
            if (LOBYTE(v253[v71 + 2])) {
              goto LABEL_174;
            }
            uint64_t v79 = v253[v71 + 1];
            char v80 = sub_10002FF38();
            sub_100121AE0(v77, v79, 0);
            sub_10002509C(v74);
            sub_10001DE50();
            static NSObject.== infix(_:_:)();
            uint64_t v81 = (void *)sub_1000185CC();
            uint64_t v82 = v79;
            uint64_t v40 = v238;
            sub_100121B34(v81, v82, 0);
            sub_1000252D4();
LABEL_161:
            sub_100121B34(v83, v84, v85);
            uint64_t v69 = v249;
            if (v80) {
              goto LABEL_162;
            }
            goto LABEL_174;
        }
LABEL_78:
        if (v91 >= v77[2]) {
          goto LABEL_181;
        }
        sub_100028284();
        uint64_t v100 = &v89[v99];
        uint64_t v102 = (void *)*v100;
        uint64_t v101 = v100[1];
        uint64_t v103 = *((unsigned __int8 *)v100 + 16);
        uint64_t v105 = *(void **)((char *)v247 + v98);
        uint64_t v104 = *(void *)((char *)v247 + v98 + 8);
        int v106 = *((unsigned __int8 *)v247 + v98 + 16);
        switch(v103)
        {
          case 1:
            if (v106 != 1) {
              goto LABEL_173;
            }
            if (v102 != v105 || v101 != v104)
            {
              unint64_t v117 = v91;
              uint64_t v92 = _stringCompareWithSmolCheck(_:_:expecting:)();
              unint64_t v91 = v117;
              if ((v92 & 1) == 0) {
                goto LABEL_173;
              }
            }
            goto LABEL_157;
          case 2:
            if (v106 != 2) {
              goto LABEL_173;
            }
            uint64_t v118 = v102[2];
            if (v118 != v105[2]) {
              goto LABEL_173;
            }
            if (v118) {
              BOOL v119 = v102 == v105;
            }
            else {
              BOOL v119 = 1;
            }
            if (v119) {
              goto LABEL_157;
            }
            uint64_t v244 = v102 + 4;
            unint64_t v246 = v91;
            uint64_t v243 = v105 + 4;
            BOOL v120 = v102;
            uint64_t v121 = v101;
            uint64_t v217 = v104;
            uint64_t v122 = v118;
            sub_100121AE0(v105, v104, 2);
            uint64_t v219 = v120;
            uint64_t v221 = v121;
            sub_100121AE0(v120, v121, 2);
            unint64_t v123 = 0;
            uint64_t v229 = v122;
            break;
          case 3:
            if (v106 != 3) {
              goto LABEL_173;
            }
            uint64_t v195 = v101;
            uint64_t v196 = *(void **)((char *)v247 + v98);
            uint64_t v197 = *(void *)((char *)v247 + v98 + 8);
            unint64_t v245 = v91;
            sub_100121AE0(v196, v197, 3);
            sub_100121AE0(v102, v195, 3);
            sub_10011F89C(v102, v196);
            uint64_t v198 = (void *)sub_1000185CC();
            uint64_t v77 = v239;
            sub_100121B34(v198, v197, 3);
            BOOL v113 = v102;
            uint64_t v114 = v195;
            uint64_t v87 = v236;
            unint64_t v89 = v237;
            char v115 = 3;
            goto LABEL_156;
          default:
            if (*((unsigned char *)v247 + v98 + 16)) {
              goto LABEL_173;
            }
            uint64_t v107 = v101;
            unint64_t v245 = v91;
            sub_10002FF38();
            uint64_t v108 = v102;
            uint64_t v109 = (void *)sub_10001DE50();
            sub_100121AE0(v109, v110, 0);
            sub_100121AE0(v102, v107, 0);
            LOBYTE(v102) = static NSObject.== infix(_:_:)();
            uint64_t v111 = (void *)sub_10001DE50();
            uint64_t v77 = v239;
            sub_100121B34(v111, v112, 0);
            BOOL v113 = v108;
            uint64_t v114 = v107;
            uint64_t v87 = v236;
            unint64_t v89 = v237;
            char v115 = 0;
LABEL_156:
            sub_100121B34(v113, v114, v115);
            unint64_t v91 = v245;
            if (v102) {
              goto LABEL_157;
            }
            goto LABEL_173;
        }
LABEL_96:
        if (v123 >= v105[2]) {
          goto LABEL_182;
        }
        sub_100028284();
        uint64_t v135 = &v244[v134];
        uint64_t v136 = v135[1];
        uint64_t v255 = *v135;
        uint64_t v137 = *((unsigned __int8 *)v135 + 16);
        uint64_t v138 = *(void *)((char *)v243 + v132);
        unint64_t v139 = *(void **)((char *)v243 + v132 + 8);
        int v140 = *((unsigned __int8 *)v243 + v132 + 16);
        switch(v137)
        {
          case 1:
            if (v140 != 1) {
              goto LABEL_172;
            }
            if (v255 != v138 || v136 != (void)v139)
            {
              unint64_t v145 = v123;
              uint64_t v146 = v133;
              uint64_t v124 = _stringCompareWithSmolCheck(_:_:expecting:)();
              uint64_t v133 = v146;
              unint64_t v123 = v145;
              if ((v124 & 1) == 0) {
                goto LABEL_172;
              }
            }
            goto LABEL_119;
          case 2:
            if (v140 != 2) {
              goto LABEL_172;
            }
            uint64_t v147 = *(void *)(v255 + 16);
            if (v147 != *(void *)(v138 + 16)) {
              goto LABEL_172;
            }
            if (v147) {
              BOOL v148 = v255 == v138;
            }
            else {
              BOOL v148 = 1;
            }
            if (v148) {
              goto LABEL_119;
            }
            uint64_t v124 = *(void *)(v255 + 32);
            uint64_t v125 = *(void *)(v255 + 40);
            uint64_t v126 = *(void *)(v138 + 32);
            uint64_t v149 = *(void *)(v138 + 40);
            int v150 = *(unsigned __int8 *)(v138 + 48);
            uint64_t v228 = *(void *)(v255 + 16);
            unint64_t v241 = v123;
            uint64_t v214 = (uint64_t)v105;
            uint64_t v215 = (uint64_t)v139;
            uint64_t v234 = (void *)v138;
            uint64_t v230 = v136;
            switch(*(unsigned char *)(v255 + 48))
            {
              case 1:
                if (v150 != 1) {
                  goto LABEL_172;
                }
                if (v124 != v126 || v125 != v149)
                {
                  uint64_t v124 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  if ((v124 & 1) == 0) {
                    goto LABEL_172;
                  }
                }
                sub_100121AE0((id)v138, (uint64_t)v139, 2);
                uint64_t v164 = (uint64_t)sub_100121AE0((id)v255, v136, 2);
                unint64_t v172 = v228;
                goto LABEL_133;
              case 2:
                if (v150 != 2) {
                  goto LABEL_172;
                }
                uint64_t v173 = (void *)sub_100025C38(v124, v125, v126);
                sub_100121AE0(v173, v174, 2);
                sub_100121AE0(v40, (uint64_t)v105, 2);
                LOBYTE(v136) = sub_10012B180((uint64_t)v40, (uint64_t)v139);
                sub_100121B34(v139, v149, 2);
                Swift::Int v157 = v40;
                uint64_t v158 = (uint64_t)v105;
                char v159 = 2;
                goto LABEL_132;
              case 3:
                if (v150 != 3) {
                  goto LABEL_172;
                }
                uint64_t v175 = (void *)sub_100025C38(v124, v125, v126);
                sub_100121AE0(v175, v176, 3);
                sub_100121AE0(v40, (uint64_t)v105, 3);
                LOBYTE(v136) = sub_10011F89C(v40, v139);
                sub_100121B34(v139, v149, 3);
                Swift::Int v157 = v40;
                uint64_t v158 = (uint64_t)v105;
                char v159 = 3;
                goto LABEL_132;
              default:
                if (*(unsigned char *)(v138 + 48)) {
                  goto LABEL_172;
                }
                Swift::Int v151 = *(void **)(v255 + 32);
                uint64_t v152 = *(void *)(v255 + 40);
                uint64_t v153 = *(void **)(v138 + 32);
                char v154 = sub_10002FF38();
                uint64_t v155 = (void *)v138;
                uint64_t v156 = v136;
                LOBYTE(v136) = v154;
                sub_100121AE0(v155, (uint64_t)v139, 2);
                sub_100121AE0((id)v255, v156, 2);
                sub_100121AE0(v153, v149, 0);
                sub_100121AE0(v151, v152, 0);
                static NSObject.== infix(_:_:)();
                sub_1000166B0();
                Swift::Int v157 = (char *)v151;
                uint64_t v158 = v152;
                char v159 = 0;
LABEL_132:
                sub_100121B34(v157, v158, v159);
                unint64_t v172 = v228;
                if ((v136 & 1) == 0) {
                  goto LABEL_171;
                }
LABEL_133:
                if (v172 == 1) {
                  goto LABEL_153;
                }
                Swift::Int v177 = v234 + 9;
                uint64_t v178 = (unsigned char *)(v255 + 72);
                unint64_t v179 = 1;
                break;
            }
            break;
          case 3:
            if (v140 == 3)
            {
              unint64_t v242 = v123;
              sub_100121AE0(*(id *)((char *)v243 + v132), *(void *)((char *)v243 + v132 + 8), 3);
              sub_100121AE0((id)v255, v136, 3);
              char v160 = sub_10011F89C(v255, v138);
              uint64_t v161 = (uint64_t)v139;
              char v162 = v160;
              sub_100121B34((void *)v138, v161, 3);
              sub_100121B34((void *)v255, v136, 3);
              uint64_t v133 = v229;
              unint64_t v123 = v242;
              if (v162) {
                goto LABEL_119;
              }
            }
            goto LABEL_172;
          default:
            if (*((unsigned char *)v243 + v132 + 16)) {
              goto LABEL_172;
            }
            unint64_t v240 = v123;
            uint64_t v230 = v136;
            unint64_t v231 = sub_10002FF38();
            sub_10002509C((void *)v138);
            sub_100121AE0((id)v255, v136, 0);
            static NSObject.== infix(_:_:)();
            sub_1000185CC();
            sub_1000252D4();
            sub_100121B34(v141, v142, v143);
            sub_100121B34((void *)v255, v136, 0);
            uint64_t v133 = v229;
            unint64_t v123 = v240;
            if ((v231 & 1) == 0) {
              goto LABEL_172;
            }
            goto LABEL_119;
        }
        while (1)
        {
          if (v179 >= v172) {
            goto LABEL_184;
          }
          if (v179 >= v234[2]) {
            goto LABEL_185;
          }
          ++v179;
          long long v180 = (void *)*((void *)v178 - 2);
          uint64_t v181 = *((void *)v178 - 1);
          uint64_t v183 = (void *)*((void *)v177 - 2);
          uint64_t v182 = *((void *)v177 - 1);
          int v184 = *v177;
          switch(*v178)
          {
            case 1:
              if (v184 != 1) {
                goto LABEL_171;
              }
              if (v180 != v183 || v181 != v182)
              {
                uint64_t v136 = v179;
                uint64_t v164 = _stringCompareWithSmolCheck(_:_:expecting:)();
                unint64_t v179 = v136;
                unint64_t v172 = v228;
                if ((v164 & 1) == 0) {
                  goto LABEL_171;
                }
              }
              goto LABEL_152;
            case 2:
              if (v184 != 2) {
                goto LABEL_171;
              }
              unint64_t v231 = v179;
              sub_100121AE0(*((id *)v177 - 2), *((void *)v177 - 1), 2);
              sub_100121AE0(v180, v181, 2);
              sub_10012B180((uint64_t)v180, (uint64_t)v183);
              uint64_t v191 = (void *)sub_1000244A4();
              sub_100121B34(v191, v192, 2);
              uint64_t v187 = v180;
              uint64_t v188 = v181;
              char v189 = 2;
              break;
            case 3:
              if (v184 != 3) {
                goto LABEL_171;
              }
              unint64_t v231 = v179;
              sub_100121AE0(*((id *)v177 - 2), *((void *)v177 - 1), 3);
              sub_100121AE0(v180, v181, 3);
              sub_10011F89C(v180, v183);
              uint64_t v193 = (void *)sub_1000244A4();
              sub_100121B34(v193, v194, 3);
              uint64_t v187 = v180;
              uint64_t v188 = v181;
              char v189 = 3;
              break;
            default:
              if (*v177) {
                goto LABEL_171;
              }
              unint64_t v231 = v179;
              LOBYTE(v136) = sub_10002FF38();
              sub_100121AE0(v183, v182, 0);
              sub_10002509C(v180);
              static NSObject.== infix(_:_:)();
              uint64_t v185 = (void *)sub_1000244A4();
              sub_100121B34(v185, v186, 0);
              sub_1000252D4();
              break;
          }
          sub_100121B34(v187, v188, v189);
          unint64_t v179 = v231;
          unint64_t v172 = v228;
          if ((v136 & 1) == 0) {
            break;
          }
LABEL_152:
          v177 += 24;
          v178 += 24;
          if (v172 == v179)
          {
LABEL_153:
            sub_100027630(v164, v165, v166, v167, v168, v169, v170, v171, v213, v214, v215, v217, (uint64_t)v219, v221, v223, (uint64_t)v225, v227, v228, v229,
              v230,
              v231,
              (uint64_t)v232,
              v233,
              v234);
            uint64_t v40 = v238;
            uint64_t v3 = v248;
            uint64_t v105 = (void *)v214;
            uint64_t v133 = v229;
            unint64_t v123 = v241;
LABEL_119:
            if (v123 != v133) {
              goto LABEL_96;
            }
            sub_10002616C(v124, v125, v126, v127, v128, v129, v130, v131, v213, v214, v215, v217, v219, v221);
            uint64_t v87 = v236;
            unint64_t v89 = v237;
            uint64_t v77 = v239;
            unint64_t v91 = v246;
LABEL_157:
            if (v91 != v87) {
              goto LABEL_78;
            }
            sub_1000271C4(v92, v101, v93, v104, v94, v95, v96, v97, v213, v214, v215, v216, v218, v220, v223, v225, v227);
LABEL_162:
            if (v259 != v250) {
              goto LABEL_60;
            }
            sub_100021490(v63, v73, v64, v76, v65, v66, v67, v68, v213, v214, v215, v216, v218, v220, v222, v224, v226, v228, v229,
              v230,
              v231,
              v232,
              v233);
            unint64_t v44 = v252;
LABEL_167:
            if (v44 == v40)
            {
              sub_100121B34(v262, v261, 2);
              char v29 = v235;
              goto LABEL_37;
            }
            goto LABEL_42;
          }
        }
LABEL_171:
        sub_100027630(v164, v165, v166, v167, v168, v169, v170, v171, v213, v214, v215, v217, (uint64_t)v219, v221, v223, (uint64_t)v225, v227, v228, v229,
          v230,
          v231,
          (uint64_t)v232,
          v233,
          v234);
LABEL_172:
        sub_10002616C(v124, v125, v126, v127, v128, v129, v130, v131, v213, v214, v215, v217, v219, v221);
LABEL_173:
        sub_1000271C4(v92, v101, v93, v104, v94, v95, v96, v97, v213, v214, v215, v216, v218, v220, v223, v225, v227);
LABEL_174:
        sub_100021490(v63, v73, v64, v76, v65, v66, v67, v68, v213, v214, v215, v216, v218, v220, v222, v224, v226, v228, v229,
          v230,
          v231,
          v232,
          v233);
LABEL_175:
        LOBYTE(v24) = 2;
        sub_100121B34(v262, v261, 2);
LABEL_176:
        sub_100121B34(v23, v22, v24);
        return 0;
      case 3:
        if (v24 != 3) {
          goto LABEL_176;
        }
        uint64_t v42 = swift_bridgeObjectRetain();
        sub_10011F89C(v42, v23);
        uint64_t v43 = (void *)sub_1000185CC();
        sub_100121B34(v43, v261, 3);
        uint64_t v36 = v23;
        uint64_t v37 = v22;
        char v38 = 3;
        goto LABEL_40;
      default:
        if (v24) {
          goto LABEL_176;
        }
        sub_10002FF38();
        sub_100121AE0(v262, v261, 0);
        uint64_t v30 = (void *)sub_10002DF24();
        sub_100121AE0(v30, v31, v32);
        LOBYTE(v25) = static NSObject.== infix(_:_:)();
        uint64_t v33 = (void *)sub_10002DF24();
        sub_100121B34(v33, v34, v35);
        sub_100121B34(v262, v261, 0);
        uint64_t v36 = (void *)sub_10002DF24();
        goto LABEL_40;
    }
  }
}

uint64_t sub_10012080C(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  sub_10002A664();
  if (!v43) {
    return 0;
  }
  uint64_t v48 = v3 + 64;
  sub_10002C43C();
  uint64_t v7 = v6 & v5;
  while (1)
  {
    if (v7)
    {
      sub_100028D64();
      uint64_t v51 = v9;
      uint64_t v52 = v10;
      uint64_t v12 = v11 | (v10 << 6);
    }
    else
    {
      if (__OFADD__(v4, 1))
      {
        __break(1u);
        goto LABEL_76;
      }
      sub_100024130();
      if (v14 == v15) {
        return 1;
      }
      if (!*(void *)(v48 + 8 * v13))
      {
        sub_10002AE4C();
        if (v14 == v15) {
          return 1;
        }
        sub_10002B328();
        if (!v16)
        {
          sub_10002AE4C();
          if (v14 == v15) {
            return 1;
          }
          sub_10002B328();
          if (!v17)
          {
            sub_100024130();
            if (v14 == v15) {
              return 1;
            }
            if (!*(void *)(v48 + 8 * v18))
            {
              while (!__OFADD__(v18, 1))
              {
                sub_10002AE4C();
                if (v14 == v15) {
                  return 1;
                }
                uint64_t v18 = v19 + 1;
                if (*(void *)(v48 + 8 * v20)) {
                  goto LABEL_24;
                }
              }
LABEL_76:
              __break(1u);
              JUMPOUT(0x100120C80);
            }
          }
        }
      }
LABEL_24:
      sub_1000264EC();
      uint64_t v51 = v21;
      uint64_t v52 = v22;
      uint64_t v12 = v23 + (v22 << 6);
    }
    int v24 = (uint64_t *)(*(void *)(v8 + 48) + 16 * v12);
    uint64_t v25 = *v24;
    uint64_t v26 = v24[1];
    char v27 = (unsigned __int8 *)(*(void *)(v8 + 56) + 40 * v12);
    uint64_t v28 = *v27;
    uint64_t v30 = *((void *)v27 + 1);
    uint64_t v29 = *((void *)v27 + 2);
    uint64_t v31 = *((void *)v27 + 3);
    int v32 = v27[32];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v33 = sub_1000287F0(v25, v26);
    char v35 = v34;
    swift_bridgeObjectRelease();
    if ((v35 & 1) == 0) {
      goto LABEL_72;
    }
    uint64_t v36 = *(void *)(a2 + 56) + 40 * v33;
    uint64_t v38 = *(void *)(v36 + 8);
    uint64_t v37 = *(void *)(v36 + 16);
    uint64_t v50 = *(void *)(v36 + 24);
    int v49 = *(unsigned __int8 *)(v36 + 32);
    unint64_t v39 = 0xE300000000000000;
    uint64_t v40 = 7630441;
    switch(*(unsigned char *)v36)
    {
      case 1:
        unint64_t v39 = 0xE500000000000000;
        uint64_t v40 = 0x3436746E69;
        break;
      case 2:
        unint64_t v39 = 0xE400000000000000;
        uint64_t v40 = 1953393013;
        break;
      case 3:
        unint64_t v39 = 0xE600000000000000;
        uint64_t v40 = 0x3436746E6975;
        break;
      case 4:
        unint64_t v39 = 0xE500000000000000;
        uint64_t v40 = 0x74616F6C66;
        break;
      case 5:
        unint64_t v39 = 0xE600000000000000;
        uint64_t v40 = 0x656C62756F64;
        break;
      case 6:
        unint64_t v39 = 0xE400000000000000;
        uint64_t v40 = 1819242338;
        break;
      case 7:
        unint64_t v39 = 0xE400000000000000;
        uint64_t v40 = 1836412517;
        break;
      case 8:
        unint64_t v39 = 0xE400000000000000;
        uint64_t v40 = 1635017060;
        break;
      case 9:
        unint64_t v39 = 0xE600000000000000;
        uint64_t v40 = 0x676E69727473;
        break;
      case 0xA:
        unint64_t v39 = 0xE600000000000000;
        uint64_t v40 = 0x616D65686373;
        break;
      default:
        break;
    }
    unint64_t v41 = 0xE300000000000000;
    uint64_t v42 = 7630441;
    switch(v28)
    {
      case 1:
        unint64_t v41 = 0xE500000000000000;
        uint64_t v42 = 0x3436746E69;
        break;
      case 2:
        unint64_t v41 = 0xE400000000000000;
        uint64_t v42 = 1953393013;
        break;
      case 3:
        unint64_t v41 = 0xE600000000000000;
        uint64_t v42 = 0x3436746E6975;
        break;
      case 4:
        unint64_t v41 = 0xE500000000000000;
        uint64_t v42 = 0x74616F6C66;
        break;
      case 5:
        unint64_t v41 = 0xE600000000000000;
        uint64_t v42 = 0x656C62756F64;
        break;
      case 6:
        unint64_t v41 = 0xE400000000000000;
        uint64_t v42 = 1819242338;
        break;
      case 7:
        unint64_t v41 = 0xE400000000000000;
        uint64_t v42 = 1836412517;
        break;
      case 8:
        unint64_t v41 = 0xE400000000000000;
        uint64_t v42 = 1635017060;
        break;
      case 9:
        unint64_t v41 = 0xE600000000000000;
        uint64_t v42 = 0x676E69727473;
        break;
      case 10:
        unint64_t v41 = 0xE600000000000000;
        uint64_t v42 = 0x616D65686373;
        break;
      default:
        break;
    }
    BOOL v43 = v40 == v42 && v39 == v41;
    if (!v43) {
      break;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease_n();
    if (!v37)
    {
LABEL_62:
      if (v29) {
        goto LABEL_72;
      }
      goto LABEL_65;
    }
LABEL_54:
    if (!v29) {
      goto LABEL_72;
    }
    if (v38 != v30 || v37 != v29)
    {
      char v46 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = 0;
      if ((v46 & 1) == 0) {
        return result;
      }
      goto LABEL_66;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_65:
    uint64_t result = 0;
LABEL_66:
    if (v50 == v31)
    {
      uint64_t v7 = v51;
      uint64_t v4 = v52;
      if (((v32 ^ v49) & 1) == 0) {
        continue;
      }
    }
    return result;
  }
  char v44 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v44)
  {
    if (!v37) {
      goto LABEL_62;
    }
    goto LABEL_54;
  }
  swift_bridgeObjectRelease();
LABEL_72:
  swift_bridgeObjectRelease();
  return 0;
}

void sub_100120CD8(uint64_t a1, uint64_t a2)
{
}

void _s11Schematizer10OneOfModelV23__derived_struct_equalsySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return;
  }
  sub_10002A664();
  if (!v5) {
    return;
  }
  uint64_t v6 = 0;
  uint64_t v7 = a1 + 64;
  sub_100024C0C();
  int64_t v9 = v8 >> 6;
  while (1)
  {
    if (v2)
    {
      sub_10002EDC4();
      uint64_t v11 = v10 | (v6 << 6);
      goto LABEL_21;
    }
    uint64_t v12 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v12 >= v9) {
      return;
    }
    ++v6;
    if (!*(void *)(v7 + 8 * v12))
    {
      uint64_t v6 = v12 + 1;
      if (v12 + 1 >= v9) {
        return;
      }
      if (!*(void *)(v7 + 8 * v6))
      {
        uint64_t v6 = v12 + 2;
        if (v12 + 2 >= v9) {
          return;
        }
        if (!*(void *)(v7 + 8 * v6)) {
          break;
        }
      }
    }
LABEL_20:
    sub_10000E204();
    uint64_t v11 = v14 + (v6 << 6);
LABEL_21:
    char v15 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v11);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    uint64_t v18 = *(void *)(*(void *)(a1 + 56) + 8 * v11);
    swift_bridgeObjectRetain();
    unint64_t v19 = sub_1000287F0(v16, v17);
    char v21 = v20;
    swift_bridgeObjectRelease();
    if ((v21 & 1) == 0 || *(void *)(*(void *)(a2 + 56) + 8 * v19) != v18) {
      return;
    }
  }
  uint64_t v13 = v12 + 3;
  if (v13 >= v9) {
    return;
  }
  if (*(void *)(v7 + 8 * v13))
  {
    uint64_t v6 = v13;
    goto LABEL_20;
  }
  while (1)
  {
    uint64_t v6 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v6 >= v9) {
      return;
    }
    ++v13;
    if (*(void *)(v7 + 8 * v6)) {
      goto LABEL_20;
    }
  }
LABEL_26:
  __break(1u);
}

void sub_100120E4C(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return;
  }
  sub_10002A664();
  if (!v4) {
    return;
  }
  uint64_t v36 = v3 + 64;
  sub_10002C43C();
  unint64_t v9 = v8 & v7;
  while (1)
  {
    if (v9)
    {
      unint64_t v10 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      uint64_t v37 = v6;
      unint64_t v11 = v10 | (v6 << 6);
      goto LABEL_26;
    }
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_35;
    }
    sub_100024130();
    if (v13 == v14) {
      return;
    }
    unint64_t v15 = *(void *)(v36 + 8 * v12);
    uint64_t v16 = v12;
    if (!v15)
    {
      sub_10002AE4C();
      if (v13 == v14) {
        return;
      }
      sub_10002B328();
      if (!v15)
      {
        sub_10002AE4C();
        if (v13 == v14) {
          return;
        }
        sub_10002B328();
        if (!v15) {
          break;
        }
      }
    }
LABEL_25:
    unint64_t v9 = (v15 - 1) & v15;
    uint64_t v37 = v16;
    unint64_t v11 = __clz(__rbit64(v15)) + (v16 << 6);
LABEL_26:
    uint64_t v19 = v5;
    char v20 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v11);
    uint64_t v21 = *v20;
    uint64_t v22 = v20[1];
    uint64_t v23 = (uint64_t *)(*(void *)(v5 + 56) + 24 * v11);
    uint64_t v25 = *v23;
    uint64_t v24 = v23[1];
    uint64_t v26 = v23[2];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v27 = sub_1000287F0(v21, v22);
    char v29 = v28;
    swift_bridgeObjectRelease();
    if ((v29 & 1) == 0) {
      goto LABEL_33;
    }
    uint64_t v30 = (uint64_t *)(*(void *)(a2 + 56) + 24 * v27);
    uint64_t v31 = *v30;
    uint64_t v32 = v30[1];
    uint64_t v33 = v30[2];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if ((sub_10011F89C(v31, v25) & 1) == 0 || (sub_10012080C(v32, v24) & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_33:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
    sub_100121104(v33, v26);
    char v35 = v34;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v5 = v19;
    uint64_t v6 = v37;
    if ((v35 & 1) == 0) {
      return;
    }
  }
  sub_100024130();
  if (v13 == v14) {
    return;
  }
  unint64_t v15 = *(void *)(v36 + 8 * v17);
  if (v15)
  {
    uint64_t v16 = v17;
    goto LABEL_25;
  }
  while (!__OFADD__(v17, 1))
  {
    sub_10002AE4C();
    if (v13 == v14) {
      return;
    }
    unint64_t v15 = *(void *)(v36 + 8 * v16);
    uint64_t v17 = v18 + 1;
    if (v15) {
      goto LABEL_25;
    }
  }
LABEL_35:
  __break(1u);
}

void sub_1001210EC(uint64_t a1, uint64_t a2)
{
}

void sub_100121104(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return;
  }
  sub_10002A664();
  if (!v5) {
    return;
  }
  uint64_t v6 = v4;
  uint64_t v7 = 0;
  uint64_t v8 = a1 + 64;
  sub_100024C0C();
  int64_t v23 = v9 >> 6;
  while (1)
  {
    if (v2)
    {
      sub_10002EDC4();
      uint64_t v11 = v10 | (v7 << 6);
      goto LABEL_21;
    }
    uint64_t v12 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v12 >= v23) {
      return;
    }
    ++v7;
    if (!*(void *)(v8 + 8 * v12))
    {
      uint64_t v7 = v12 + 1;
      if (v12 + 1 >= v23) {
        return;
      }
      if (!*(void *)(v8 + 8 * v7))
      {
        uint64_t v7 = v12 + 2;
        if (v12 + 2 >= v23) {
          return;
        }
        if (!*(void *)(v8 + 8 * v7)) {
          break;
        }
      }
    }
LABEL_20:
    sub_10000E204();
    uint64_t v11 = v14 + (v7 << 6);
LABEL_21:
    unint64_t v15 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v11);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    uint64_t v18 = *(void *)(*(void *)(a1 + 56) + 8 * v11);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1000287F0(v16, v17);
    char v20 = v19;
    swift_bridgeObjectRelease();
    if ((v20 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      return;
    }
    uint64_t v21 = swift_bridgeObjectRetain();
    char v22 = v6(v21, v18);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v22 & 1) == 0) {
      return;
    }
  }
  uint64_t v13 = v12 + 3;
  if (v13 >= v23) {
    return;
  }
  if (*(void *)(v8 + 8 * v13))
  {
    uint64_t v7 = v13;
    goto LABEL_20;
  }
  while (1)
  {
    uint64_t v7 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v7 >= v23) {
      return;
    }
    ++v13;
    if (*(void *)(v8 + 8 * v7)) {
      goto LABEL_20;
    }
  }
LABEL_27:
  __break(1u);
}

uint64_t sub_1001212BC@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = EnumModel.init(from:)(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_1001212E8(void *a1)
{
  return EnumModel.encode(to:)(a1, *v1);
}

uint64_t sub_100121304(void *a1, void *a2)
{
  return static EnumModel.__derived_struct_equals(_:_:)(*a1, *a2);
}

uint64_t EnumModel.init(_:)(void *a1)
{
  uint64_t v9 = Dictionary.init(dictionaryLiteral:)();
  sub_10001B620(a1, a1[3]);
  uint64_t v3 = sub_10001DE50();
  uint64_t v5 = v4(v3);
  v8[2] = &v9;
  v8[3] = a1;
  sub_10012149C((uint64_t)sub_1001218F8, (uint64_t)v8, v5);
  swift_bridgeObjectRelease();
  uint64_t v6 = v9;
  if (v1) {
    swift_bridgeObjectRelease();
  }
  sub_10001CA50((uint64_t)a1);
  return v6;
}

uint64_t sub_1001213FC(unsigned int *a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a3[3];
  uint64_t v6 = a3[4];
  sub_10001B620(a3, v5);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v4, v5, v6);
  if (!v3)
  {
    sub_10013A600();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10012149C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v14 = *(void *)(a3 + 16);
  if (v14)
  {
    uint64_t v5 = (uint64_t (*)(int *))result;
    uint64_t v6 = a3 + 32;
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v7 = 0;
    uint64_t v13 = v6;
LABEL_3:
    uint64_t v8 = (int *)(v6 + 8 * v7);
    int v10 = *v8;
    int v9 = v8[1];
    ++v7;
    while (1)
    {
      if (v10 == v9)
      {
        int v11 = 0;
      }
      else
      {
        if (v10 == 0x7FFFFFFF)
        {
          __break(1u);
          return result;
        }
        int v11 = v10 + 1;
      }
      int v15 = v10;
      uint64_t result = v5(&v15);
      if (v4) {
        return swift_bridgeObjectRelease();
      }
      BOOL v12 = v10 == v9;
      int v10 = v11;
      if (v12)
      {
        uint64_t v6 = v13;
        if (v7 != v14) {
          goto LABEL_3;
        }
        return swift_bridgeObjectRelease();
      }
    }
  }
  return result;
}

uint64_t variable initialization expression of SQLiteBaseSchematizer.impl()
{
  type metadata accessor for Schematizer();
  uint64_t v0 = swift_allocObject();
  type metadata accessor for ProtoSchemaStore();
  swift_allocObject();
  *(void *)(v0 + 16) = ProtoSchemaStore.init()();
  *(void *)(v0 + 24) = &protocol witness table for ProtoSchemaStore;
  return v0;
}

uint64_t variable initialization expression of SQLiteBaseSchematizer.queryTimeFrameGuideline()
{
  uint64_t v0 = type metadata accessor for Date();
  sub_100020C48();
  uint64_t v2 = v1;
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v15 - v7;
  static Date.distantPast.getter();
  Date.timeIntervalSince1970.getter();
  double v10 = v9;
  int v11 = *(void (**)(char *, uint64_t))(v2 + 8);
  v11(v8, v0);
  static Date.distantFuture.getter();
  Date.timeIntervalSince1970.getter();
  double v13 = v12;
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v11)(v5, v0);
  if (v10 > v13) {
    __break(1u);
  }
  return result;
}

void variable initialization expression of AvroRecordSchema.namespace()
{
}

uint64_t variable initialization expression of SQLiteBaseSchematizer.functions()
{
  sub_10002572C(&qword_1002208C8);

  return Dictionary.init(dictionaryLiteral:)();
}

void *BiomeTablesProvider.requiredEnums.getter()
{
  return &_swiftEmptyArrayStorage;
}

uint64_t IntegerSet.init()()
{
  type metadata accessor for ClosedRange();

  return static Array._allocateUninitialized(_:)();
}

uint64_t variable initialization expression of SQLiteMessageTypeRegistry.messageIds()
{
  return Dictionary.init(dictionaryLiteral:)();
}

uint64_t variable initialization expression of ProtoSchemaStore.enums()
{
  type metadata accessor for ProtoEnum();

  return Dictionary.init(dictionaryLiteral:)();
}

uint64_t variable initialization expression of ProtoSchemaStore.schemas()
{
  type metadata accessor for ProtoMessageSchema();

  return Dictionary.init(dictionaryLiteral:)();
}

unint64_t sub_100121844()
{
  unint64_t result = qword_1002208A0;
  if (!qword_1002208A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002208A0);
  }
  return result;
}

uint64_t sub_100121890(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1000371D4(&qword_1002208A8);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001218F8(unsigned int *a1)
{
  return sub_1001213FC(a1, *(void *)(v1 + 16), *(void **)(v1 + 24));
}

void type metadata accessor for EnumModel()
{
}

unsigned char *sub_100121920(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1001219BCLL);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void type metadata accessor for EnumModel.CodingKeys()
{
}

unint64_t sub_1001219F4()
{
  unint64_t result = qword_1002208D0;
  if (!qword_1002208D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002208D0);
  }
  return result;
}

unint64_t sub_100121A44()
{
  unint64_t result = qword_1002208D8;
  if (!qword_1002208D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002208D8);
  }
  return result;
}

unint64_t sub_100121A94()
{
  unint64_t result = qword_1002208E0;
  if (!qword_1002208E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002208E0);
  }
  return result;
}

id sub_100121AE0(id result, uint64_t a2, char a3)
{
  switch(a3)
  {
    case 0:
      unint64_t result = result;
      break;
    case 1:
    case 2:
    case 3:
      unint64_t result = (id)swift_bridgeObjectRetain();
      break;
    default:
      return result;
  }
  return result;
}

void sub_100121B34(void *a1, uint64_t a2, char a3)
{
  switch(a3)
  {
    case 0:

      break;
    case 1:
    case 2:
    case 3:
      swift_bridgeObjectRelease();
      break;
    default:
      return;
  }
}

uint64_t sub_100121B88(uint64_t a1, void (*a2)(uint64_t *, void *), uint64_t a3, uint64_t a4)
{
  uint64_t v22 = a1;
  uint64_t v7 = a4 + 56;
  uint64_t v8 = 1 << *(unsigned char *)(a4 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & *(void *)(a4 + 56);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v13 = 0;
  if (!v10) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v14 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (unint64_t i = v14 | (v13 << 6); ; unint64_t i = __clz(__rbit64(v17)) + (v13 << 6))
  {
    char v19 = (void *)(*(void *)(a4 + 48) + 16 * i);
    uint64_t v20 = v19[1];
    v21[0] = *v19;
    v21[1] = v20;
    swift_bridgeObjectRetain();
    a2(&v22, v21);
    if (v4)
    {
      swift_release();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    uint64_t result = swift_bridgeObjectRelease();
    if (v10) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v13++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v13 >= v11) {
      goto LABEL_26;
    }
    unint64_t v17 = *(void *)(v7 + 8 * v13);
    if (!v17) {
      break;
    }
LABEL_17:
    unint64_t v10 = (v17 - 1) & v17;
  }
  int64_t v18 = v13 + 1;
  if (v13 + 1 >= v11) {
    goto LABEL_26;
  }
  unint64_t v17 = *(void *)(v7 + 8 * v18);
  if (v17) {
    goto LABEL_16;
  }
  int64_t v18 = v13 + 2;
  if (v13 + 2 >= v11) {
    goto LABEL_26;
  }
  unint64_t v17 = *(void *)(v7 + 8 * v18);
  if (v17) {
    goto LABEL_16;
  }
  int64_t v18 = v13 + 3;
  if (v13 + 3 >= v11) {
    goto LABEL_26;
  }
  unint64_t v17 = *(void *)(v7 + 8 * v18);
  if (v17) {
    goto LABEL_16;
  }
  int64_t v18 = v13 + 4;
  if (v13 + 4 >= v11)
  {
LABEL_26:
    swift_release();
    return v22;
  }
  unint64_t v17 = *(void *)(v7 + 8 * v18);
  if (v17)
  {
LABEL_16:
    int64_t v13 = v18;
    goto LABEL_17;
  }
  while (1)
  {
    int64_t v13 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v13 >= v11) {
      goto LABEL_26;
    }
    unint64_t v17 = *(void *)(v7 + 8 * v13);
    ++v18;
    if (v17) {
      goto LABEL_17;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_100121D54(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x69747265706F7270 && a2 == 0xEA00000000007365)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_100121DE8()
{
  return 0x69747265706F7270;
}

uint64_t sub_100121E08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100121D54(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_100121E34()
{
  return sub_10005E0E8();
}

uint64_t sub_100121E50@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = static Optional<A>.sqlNullable.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_100121E7C(uint64_t a1)
{
  unint64_t v2 = sub_100122048();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100121EB8(uint64_t a1)
{
  unint64_t v2 = sub_100122048();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t OneOfModel.encode(to:)(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_10002572C(&qword_1002208E8);
  sub_100020C48();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001B620(a1, a1[3]);
  sub_100122048();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v11[1] = a2;
  sub_10002572C(&qword_1002208F8);
  sub_100122210(&qword_100220900);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v4);
}

unint64_t sub_100122048()
{
  unint64_t result = qword_1002208F0;
  if (!qword_1002208F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002208F0);
  }
  return result;
}

void *OneOfModel.init(from:)(void *a1)
{
  uint64_t v3 = sub_10002572C(&qword_100220908);
  sub_100020C48();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10001B620(a1, a1[3]);
  sub_100122048();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    sub_10001CA50((uint64_t)a1);
  }
  else
  {
    sub_10002572C(&qword_1002208F8);
    sub_100122210(&qword_100220910);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v3);
    uint64_t v9 = (void *)v11[1];
    sub_10001CA50((uint64_t)a1);
  }
  return v9;
}

uint64_t sub_100122210(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1000371D4(&qword_1002208F8);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *sub_100122278@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = OneOfModel.init(from:)(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_1001222A4(void *a1)
{
  return OneOfModel.encode(to:)(a1, *v1);
}

uint64_t sub_1001222C0(void *a1, void *a2)
{
  return static OneOfModel.__derived_struct_equals(_:_:)(*a1, *a2);
}

uint64_t OneOfModel.init(_:)(void *a1)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[4];
  sub_10001B620(a1, v2);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 24))(v2, v3);
  uint64_t v5 = Dictionary.init(dictionaryLiteral:)();
  v8[2] = a1;
  uint64_t v6 = sub_100121B88(v5, (void (*)(uint64_t *, void *))sub_100122454, (uint64_t)v8, v4);
  swift_bridgeObjectRelease();
  sub_10001CA50((uint64_t)a1);
  return v6;
}

uint64_t sub_1001223A4(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v6 = a3[3];
  uint64_t v7 = a3[4];
  sub_10001B620(a3, v6);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 40);
  swift_bridgeObjectRetain();
  v8(v5, v4, v6, v7);
  if (!v3) {
    sub_10013A67C();
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_100122454(uint64_t a1, uint64_t *a2)
{
  return sub_1001223A4(a1, a2, *(void **)(v2 + 16));
}

ValueMetadata *type metadata accessor for OneOfModel()
{
  return &type metadata for OneOfModel;
}

unsigned char *storeEnumTagSinglePayload for OneOfModel.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x10012251CLL);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for OneOfModel.CodingKeys()
{
  return &type metadata for OneOfModel.CodingKeys;
}

unint64_t sub_100122558()
{
  unint64_t result = qword_100220918;
  if (!qword_100220918)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100220918);
  }
  return result;
}

unint64_t sub_1001225A8()
{
  unint64_t result = qword_100220920;
  if (!qword_100220920)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100220920);
  }
  return result;
}

unint64_t sub_1001225F8()
{
  unint64_t result = qword_100220928;
  if (!qword_100220928)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100220928);
  }
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> PObjFunction.perform(with:arguments:)(SQLiter::SQLiteContext with, Swift::OpaquePointer arguments)
{
  unint64_t v3 = *((void *)arguments._rawValue + 2);
  if (!v3)
  {
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v5 = (sqlite3_value *)*((void *)arguments._rawValue + 4);
  if (SQLiteArgument.isNull.getter(v5))
  {
    SQLiteContext.setNull()();
    return;
  }
  sub_10012297C();
  if (!v2)
  {
    SQLiteBaseSchematizer.getSQLiteBridge()();
    uint64_t v7 = v6;
    swift_release();
    uint64_t v8 = SQLiteArgument.getData()(v5);
    if (v9 >> 60 == 15)
    {
      sub_100122878();
      swift_allocError();
      *(void *)(v10 + 8) = 0;
      *(void *)(v10 + 16) = 0;
      *(void *)uint64_t v10 = 6;
      *(unsigned char *)(v10 + 24) = 4;
      swift_willThrow();
LABEL_11:
      swift_unknownObjectRelease();
      return;
    }
    if (v3 >= 2)
    {
      uint64_t v11 = v8;
      unint64_t v12 = v9;
      Swift::String v13 = SQLiteArgument.getStringNonNull()();
      if (!v14)
      {
        uint64_t ObjectType = swift_getObjectType();
        (*(void (**)(uint64_t, unint64_t, uint64_t, void *, void *, uint64_t, uint64_t))(v7 + 32))(v11, v12, v13._countAndFlagsBits, v13._object, with.context._rawValue, ObjectType, v7);
        swift_bridgeObjectRelease();
      }
      sub_10000A330(v11, v12);
      goto LABEL_11;
    }
LABEL_14:
    __break(1u);
  }
}

uint64_t PGetTimeWindowStartFunction.__allocating_init(_:)()
{
  return SQLiteSchematizerFunction.init(_:)();
}

uint64_t PGetTimeWindowStartFunction.deinit()
{
  uint64_t v0 = SQLiteBaseFunction.deinit();
  swift_weakDestroy();
  return v0;
}

uint64_t PGetTimeWindowStartFunction.__deallocating_deinit()
{
  uint64_t v0 = SQLiteBaseFunction.deinit();
  swift_weakDestroy();

  return _swift_deallocClassInstance(v0, 48, 7);
}

unint64_t sub_100122878()
{
  unint64_t result = qword_100220930;
  if (!qword_100220930)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100220930);
  }
  return result;
}

uint64_t type metadata accessor for PObjFunction()
{
  return self;
}

uint64_t sub_1001228E8()
{
  return sub_10012297C();
}

uint64_t sub_100122900()
{
  sub_10002C45C();
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong)
  {
    sub_1001229F8();
    swift_allocError();
    sub_100026C04(v1, 0xD000000000000013);
  }
  return Strong;
}