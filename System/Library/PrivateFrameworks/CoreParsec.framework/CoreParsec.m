uint64_t sub_100003EAC(void *a1, int a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t inited;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  void *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;

  v6 = v5;
  *(unsigned char *)(v6 + qword_10021B6C8) = 0;
  v11 = a5 & 1;
  *(void *)(v6 + qword_100236B08) = 0;
  v12 = v6 + qword_100236B10;
  *(void *)v12 = 0;
  *(unsigned char *)(v12 + 8) = 1;
  *(unsigned char *)(v6 + qword_10021B6D0) = 0;
  v13 = v6 + qword_100236B18;
  v14 = type metadata accessor for Client();
  v15 = *(void *)(v14 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v13, a3, v14);
  *(void *)v12 = a4;
  *(unsigned char *)(v12 + 8) = v11;
  sub_10002572C((uint64_t *)&unk_10021BB00);
  if (a5)
  {
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1001A2A20;
    v17 = Client.name.getter();
    v19 = v18;
    *(void *)(inited + 56) = &type metadata for String;
    *(void *)(inited + 64) = sub_1000303C8();
    *(void *)(inited + 32) = v17;
    *(void *)(inited + 40) = v19;
    v20 = "client=%{signpost.description:attribute,public}s";
    v21 = a1;
    v22 = a2;
    v23 = 48;
    v24 = inited;
  }
  else
  {
    v25 = swift_initStackObject();
    *(_OWORD *)(v25 + 16) = xmmword_1001A3830;
    v26 = Client.name.getter();
    v28 = v27;
    *(void *)(v25 + 56) = &type metadata for String;
    v29 = sub_1000303C8();
    *(void *)(v25 + 32) = v26;
    *(void *)(v25 + 40) = v28;
    *(void *)(v25 + 96) = &type metadata for UInt64;
    *(void *)(v25 + 104) = &protocol witness table for UInt64;
    *(void *)(v25 + 64) = v29;
    *(void *)(v25 + 72) = a4;
    v20 = "client=%{signpost.description:attribute,public}s, identifier=%{signpost.description:attribute,public}llu";
    v21 = a1;
    v22 = a2;
    v23 = 104;
    v24 = v25;
  }
  v30 = sub_100016AA0(v21, v22, (uint64_t)v20, v23, 2, v24);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(a3, v14);
  return v30;
}

uint64_t initializeWithCopy for AnyValue(uint64_t a1, uint64_t *a2)
{
  unsigned int v4 = *((unsigned __int8 *)a2 + 57);
  if (v4 >= 0xB) {
    unsigned int v4 = *(_DWORD *)a2 + 11;
  }
  switch(v4)
  {
    case 1u:
      *(_DWORD *)a1 = *(_DWORD *)a2;
      char v5 = 1;
      goto LABEL_13;
    case 2u:
      *(void *)a1 = *a2;
      char v5 = 2;
      goto LABEL_13;
    case 3u:
      *(void *)a1 = *a2;
      char v5 = 3;
      goto LABEL_13;
    case 4u:
      *(_DWORD *)a1 = *(_DWORD *)a2;
      char v5 = 4;
      goto LABEL_13;
    case 5u:
      *(void *)a1 = *a2;
      char v5 = 5;
      goto LABEL_13;
    case 6u:
      *(unsigned char *)a1 = *(unsigned char *)a2;
      char v5 = 6;
      goto LABEL_13;
    case 7u:
      long long v6 = *(_OWORD *)(a2 + 3);
      *(_OWORD *)(a1 + 24) = v6;
      (**(void (***)(uint64_t, uint64_t *))(v6 - 8))(a1, a2);
      uint64_t v7 = a2[5];
      uint64_t v8 = a2[6];
      char v9 = *((unsigned char *)a2 + 56);
      sub_100123500(v7, v8, v9);
      *(void *)(a1 + 40) = v7;
      *(void *)(a1 + 48) = v8;
      *(unsigned char *)(a1 + 56) = v9;
      char v5 = 7;
      goto LABEL_13;
    case 8u:
      uint64_t v13 = a2[1];
      *(void *)a1 = *a2;
      *(void *)(a1 + 8) = v13;
      *(unsigned char *)(a1 + 57) = 8;
      swift_bridgeObjectRetain();
      return a1;
    case 9u:
      uint64_t v11 = *a2;
      unint64_t v10 = a2[1];
      sub_100027BCC(*a2, v10);
      *(void *)a1 = v11;
      *(void *)(a1 + 8) = v10;
      char v5 = 9;
LABEL_13:
      *(unsigned char *)(a1 + 57) = v5;
      break;
    case 0xAu:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(unsigned char *)(a1 + 57) = 10;
      swift_unknownObjectRetain();
      break;
    default:
      *(_DWORD *)a1 = *(_DWORD *)a2;
      *(unsigned char *)(a1 + 57) = 0;
      break;
  }
  return a1;
}

BOOL sub_100004248(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  long long v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v12 - v7;
  if (qword_100218C68 != -1) {
    swift_once();
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, a1, v2);
  Date.init(timeInterval:since:)();
  Date.timeIntervalSinceNow.getter();
  double v10 = v9;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
  return v10 <= 0.0;
}

uint64_t WritableSessionDatabase.addFeedback(_:guid:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = v4[12];
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v9 = sub_100032814(v8, v4, a2, a3);
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = v4[5];
    uint64_t v12 = v4[6];
    sub_10001B620(v4 + 2, v11);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 16))(a1, v10, v11, v12);
    swift_release();
    return 1;
  }
  else
  {
    if (qword_100224320 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_10002A10C(v13, (uint64_t)qword_100236DE0);
    sub_100024F28();
    v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v14, v15))
    {
      swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      uint64_t v16 = sub_1000215EC(4.8149e-34);
      sub_10002CFFC(v16, v17, &v21);
      sub_100018134();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_10002A918();
      sub_1000280A0((void *)&_mh_execute_header, v18, v19, "Attempt to add feedback for missing session with GUID: %s");
      swift_arrayDestroy();
      sub_100017D40();
      sub_100017D40();
    }
    else
    {

      sub_100025FDC();
    }
    return 0;
  }
}

uint64_t sub_10000475C()
{
  v1 = *(os_unfair_lock_s **)(v0 + 16);
  uint64_t v2 = (uint64_t)&v1[4];
  uint64_t v3 = v1 + 9;
  os_unfair_lock_lock(v1 + 9);
  sub_10003141C(v2, &v5);
  os_unfair_lock_unlock(v3);
  return v5;
}

void sub_1000047BC()
{
  v1 = *(os_unfair_lock_s **)(*(void *)(v0 + 32) + 16);
  os_unfair_lock_lock(v1);
  *(void *)(v0 + 24) = os_transaction_create();
  swift_unknownObjectRelease();
  os_unfair_lock_unlock(v1);
}

uint64_t sub_10000480C()
{
  type metadata accessor for PegasusClientName();
  swift_arrayDestroy();

  return _swift_deallocClassInstance(v0, 32, 7);
}

void (*sub_100004888(uint64_t a1))(uint64_t *__return_ptr, uint64_t)
{
  void (*v1)(uint64_t *__return_ptr, uint64_t);
  void *v2;
  uint64_t v3;
  void (*v4)(uint64_t *__return_ptr, uint64_t);
  uint64_t v6;

  v1 = *(void (**)(uint64_t *__return_ptr, uint64_t))a1;
  if (*(unsigned char *)(a1 + 16))
  {
    uint64_t v2 = *(void **)(a1 + 8);
    uint64_t v3 = swift_retain();
    v1(&v6, v3);
    sub_1000313DC(v1, v2, 1);
    return 0;
  }
  else
  {
    uint64_t v4 = v1;
  }
  return v1;
}

uint64_t SessionFeedback.getWrappedPayload()()
{
  uint64_t v1 = type metadata accessor for BiomeSessionWrapper(0);
  uint64_t v2 = v1 - 8;
  __chkstk_darwin(v1);
  sub_10000DFD0();
  uint64_t v5 = v4 - v3;
  uint64_t v6 = v0 + OBJC_IVAR____TtC14SearchFeedback15SessionFeedback_type;
  type metadata accessor for SessionType();
  sub_10001DCF8();
  (*(void (**)(uint64_t, uint64_t))(v7 + 16))(v5, v6);
  swift_beginAccess();
  uint64_t v8 = *(void **)(v0 + 16);
  *(void *)(v5 + *(int *)(v2 + 28)) = v8;
  id v9 = v8;
  uint64_t v10 = sub_10000A034();
  sub_1000329E8(v5);
  return v10;
}

uint64_t sub_100004A0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)v10.val = a1;
  *(void *)&v10.val[2] = a2;
  *(void *)&v10.val[4] = a3;
  *(void *)&v10.val[6] = a4;
  uint64_t v4 = SecTaskCreateWithAuditToken(0, &v10);
  if (v4)
  {
    uint64_t v5 = v4;
    uint32_t CodeSignStatus = SecTaskGetCodeSignStatus(v4);

    int v7 = CodeSignStatus & 1;
    int v8 = (CodeSignStatus >> 18) & 0x100;
  }
  else
  {
    int v8 = 0;
    int v7 = 0;
  }
  return v8 | v7;
}

uint64_t sub_100004A8C()
{
  if ((*(unsigned char *)(v0 + 81) & 1) == 0) {
    sub_100011708();
  }
  uint64_t v1 = sub_100032148();
  swift_release();
  type metadata accessor for Client();
  sub_10000E004();
  sub_10000E040();
  v2();
  return v1;
}

#error "100004B8C: call analysis failed (funcsize=43)"

void sub_100004BC4(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for SessionType();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (void *)*v3;
  unint64_t v13 = sub_100019A28();
  uint64_t v15 = v12[2];
  BOOL v16 = (v14 & 1) == 0;
  Swift::Int v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_10;
  }
  unint64_t v18 = v13;
  char v19 = v14;
  sub_10002572C(&qword_1002263B8);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v17)) {
    goto LABEL_5;
  }
  unint64_t v20 = sub_100019A28();
  if ((v19 & 1) != (v21 & 1))
  {
LABEL_10:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v18 = v20;
LABEL_5:
  v22 = *v4;
  if (v19)
  {
    uint64_t v23 = v22[7];

    *(void *)(v23 + 8 * v18) = a1;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
    sub_10002F26C(v18, (uint64_t)v11, a1, v22);
  }
}

void sub_100004D54(void *a1, uint64_t a2, uint64_t a3)
{
  sub_100032AD8(a2, (uint64_t)v20);
  switch(v22)
  {
    case 1:
      [a1 writeUint32:LODWORD(v20[0]) forTag:a3];
      return;
    case 2:
      [a1 writeInt64:*(void *)&v20[0] forTag:a3];
      return;
    case 3:
      [a1 writeUint64:*(void *)&v20[0] forTag:a3];
      return;
    case 4:
      LODWORD(v6) = v20[0];
      [a1 writeFloat:a3 forTag:v6];
      return;
    case 5:
      [a1 writeDouble:a3 forTag:*(double *)v20];
      return;
    case 6:
      [a1 writeBOOL:LOBYTE(v20[0]) forTag:a3];
      return;
    case 7:
      *(_OWORD *)&v19[9] = *(_OWORD *)&v21[9];
      long long v18 = v20[1];
      *(_OWORD *)char v19 = *(_OWORD *)v21;
      long long v17 = v20[0];
      uint64_t v8 = *(void *)&v21[8];
      if (v21[24])
      {
        unsigned int v9 = *(_DWORD *)&v21[8];
      }
      else
      {
        uint64_t v14 = *(void *)&v19[16];
        uint64_t v15 = *((void *)&v18 + 1);
        uint64_t v16 = *(void *)v19;
        sub_10001B620(&v17, *((uint64_t *)&v18 + 1));
        uint64_t v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 24);
        swift_bridgeObjectRetain();
        unsigned int v9 = v23(v8, v14, v15, v16);
        sub_1001230F4(v8, v14, 0);
        if (v3) {
          goto LABEL_19;
        }
      }
      if ((v9 & 0x80000000) != 0)
      {
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        return;
      }
      [a1 writeUint64:v9 forTag:a3];
LABEL_19:
      sub_100132850((uint64_t)&v17);
      return;
    case 8:
      sub_1000060F0(*(uint64_t *)&v20[0], *((uint64_t *)&v20[0] + 1), a3, a1);
      return;
    case 9:
      long long v7 = v20[0];
      sub_100006090(*(uint64_t *)&v20[0], *((uint64_t *)&v20[0] + 1), a3, a1);
      sub_1000291B4(v7, *((unint64_t *)&v7 + 1));
      return;
    case 10:
      uint64_t v10 = *((void *)&v20[0] + 1);
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 24))(ObjectType, v10);
      sub_10013267C(v12, v13, a3, a1);
      swift_unknownObjectRelease();
      return;
    default:
      [a1 writeInt32:LODWORD(v20[0]) forTag:a3];
      return;
  }
}

uint64_t sub_100004FF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v9 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  sub_10002F0FC(a1, a2, a3, isUniquelyReferenced_nonNull_native);
  *uint64_t v3 = v9;

  return swift_bridgeObjectRelease();
}

uint64_t sub_100005088@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = (uint64_t *)(a1 + OBJC_IVAR____TtC7parsecd15DownloadManager_resources);
  swift_beginAccess();
  uint64_t v3 = *v2;
  uint64_t v42 = *v2 + 64;
  uint64_t v4 = 1 << *(unsigned char *)(*v2 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(*v2 + 64);
  int64_t v43 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v7 = 0;
  while (v6)
  {
    unint64_t v8 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
    unint64_t v9 = v8 | (v7 << 6);
LABEL_20:
    unint64_t v13 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v9);
    uint64_t v15 = *v13;
    uint64_t v14 = v13[1];
    swift_bridgeObjectRetain();
    uint64_t v16 = swift_retain();
    sub_1000AA0B4(v16);
    if (v18)
    {
      uint64_t v19 = v17;
      uint64_t v20 = v18;
      char isUnique = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v21 = sub_1000287F0(v15, v14);
      uint64_t v22 = _swiftEmptyDictionarySingleton[2];
      char v41 = v23;
      BOOL v24 = (v23 & 1) == 0;
      BOOL v25 = __OFADD__(v22, v24);
      Swift::Int v26 = v22 + v24;
      if (v25) {
        goto LABEL_34;
      }
      Swift::Int capacity = v26;
      unint64_t v39 = v21;
      sub_10002572C(&qword_100219750);
      Swift::Bool v27 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUnique, capacity);
      unint64_t v28 = v39;
      if (v27)
      {
        unint64_t v29 = sub_1000287F0(v15, v14);
        if ((v41 & 1) != (v30 & 1)) {
          goto LABEL_36;
        }
        unint64_t v28 = v29;
      }
      if (v41)
      {
        v31 = (void *)(_swiftEmptyDictionarySingleton[7] + 16 * v28);
        swift_bridgeObjectRelease();
        void *v31 = v19;
        v31[1] = v20;
      }
      else
      {
        _swiftEmptyDictionarySingleton[(v28 >> 6) + 8] |= 1 << v28;
        v32 = (uint64_t *)(_swiftEmptyDictionarySingleton[6] + 16 * v28);
        uint64_t *v32 = v15;
        v32[1] = v14;
        v33 = (void *)(_swiftEmptyDictionarySingleton[7] + 16 * v28);
        void *v33 = v19;
        v33[1] = v20;
        uint64_t v34 = _swiftEmptyDictionarySingleton[2];
        BOOL v25 = __OFADD__(v34, 1);
        uint64_t v35 = v34 + 1;
        if (v25) {
          goto LABEL_35;
        }
        _swiftEmptyDictionarySingleton[2] = v35;
        swift_bridgeObjectRetain();
      }
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_release();
    }
  }
  int64_t v10 = v7 + 1;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
    goto LABEL_33;
  }
  if (v10 >= v43) {
    goto LABEL_31;
  }
  unint64_t v11 = *(void *)(v42 + 8 * v10);
  ++v7;
  if (v11) {
    goto LABEL_19;
  }
  int64_t v7 = v10 + 1;
  if (v10 + 1 >= v43) {
    goto LABEL_31;
  }
  unint64_t v11 = *(void *)(v42 + 8 * v7);
  if (v11) {
    goto LABEL_19;
  }
  int64_t v7 = v10 + 2;
  if (v10 + 2 >= v43) {
    goto LABEL_31;
  }
  unint64_t v11 = *(void *)(v42 + 8 * v7);
  if (v11)
  {
LABEL_19:
    unint64_t v6 = (v11 - 1) & v11;
    unint64_t v9 = __clz(__rbit64(v11)) + (v7 << 6);
    goto LABEL_20;
  }
  int64_t v12 = v10 + 3;
  if (v12 >= v43)
  {
LABEL_31:
    uint64_t result = swift_release();
    *a2 = _swiftEmptyDictionarySingleton;
    return result;
  }
  unint64_t v11 = *(void *)(v42 + 8 * v12);
  if (v11)
  {
    int64_t v7 = v12;
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v7 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      break;
    }
    if (v7 >= v43) {
      goto LABEL_31;
    }
    unint64_t v11 = *(void *)(v42 + 8 * v7);
    ++v12;
    if (v11) {
      goto LABEL_19;
    }
  }
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

char *sub_1000053A0(uint64_t a1, uint64_t a2, void *(*a3)(uint64_t *__return_ptr, char *, char *))
{
  uint64_t result = (char *)__DataStorage._bytes.getter();
  if (!result) {
    goto LABEL_12;
  }
  unint64_t v8 = result;
  uint64_t result = (char *)__DataStorage._offset.getter();
  uint64_t v9 = a1 - (void)result;
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_11;
  }
  BOOL v10 = __OFSUB__(a2, a1);
  uint64_t v11 = a2 - a1;
  if (v10)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  uint64_t v12 = __DataStorage._length.getter();
  if (v12 >= v11) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = v12;
  }
  uint64_t result = (char *)a3(&v14, &v8[v9], &v8[v9 + v13]);
  if (!v3) {
    return (char *)v14;
  }
  return result;
}

id FlusherClient.__deallocating_deinit()
{
  [*(id *)&v0[OBJC_IVAR____TtC7parsecd13FlusherClient_connection] invalidate];
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FlusherClient();
  return objc_msgSendSuper2(&v2, "dealloc");
}

void sub_1000054A0(void *a1)
{
  if (!swift_unknownObjectWeakLoadStrong()) {
    return;
  }
  unint64_t v2 = sub_100019060(a1, 0);
  if (v2)
  {
    unint64_t v3 = v2;
    if (v2 == 1)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      sub_10002572C(&qword_100219280);
      inited = (__n128 *)swift_initStackObject();
      uint64_t v5 = sub_100025460(inited, (__n128)xmmword_1001A2A20);
      v5[4].n128_u64[1] = (unint64_t)&type metadata for String;
      sub_100018548((uint64_t)v5, 0xD000000000000010);
      uint64_t v6 = Dictionary.init(dictionaryLiteral:)();
      id v7 = objc_allocWithZone((Class)NSError);
      uint64_t v8 = sub_1000A3D58();
      id v11 = sub_1000B06A0(v8, v9, v10, v6);
      sub_100081124();
      if (qword_100218B38 != -1) {
        swift_once();
      }
      uint64_t v12 = type metadata accessor for Logger();
      uint64_t v13 = sub_10001DD88(v12, (uint64_t)qword_1002369C0);
      os_log_type_t v14 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v13, v14))
      {
        uint64_t v15 = (_WORD *)sub_100023E24();
        sub_10002E8F0(v15);
        sub_100028E84((void *)&_mh_execute_header, v13, v14, "state must not be nil");
        sub_100017D40();
        swift_unknownObjectRelease();
      }
      else
      {

        swift_unknownObjectRelease();
      }

      return;
    }
    sub_100011960();
    sub_100019154(v3);
  }

  swift_unknownObjectRelease();
}

uint64_t type metadata accessor for FlusherClient()
{
  return self;
}

void sub_1000056CC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 16);
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!swift_isUniquelyReferenced_nonNull_native() || v4 + v2 > *(void *)(v3 + 24) >> 1)
  {
    sub_10002F418();
    uint64_t v3 = v6;
  }
  if (!*(void *)(a1 + 16))
  {
    if (!v2) {
      goto LABEL_11;
    }
    goto LABEL_13;
  }
  if ((*(void *)(v3 + 24) >> 1) - *(void *)(v3 + 16) < v2)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  sub_100119A74(a1 + 32, v2);
  if (!v2)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    uint64_t *v1 = v3;
    return;
  }
  uint64_t v7 = *(void *)(v3 + 16);
  BOOL v8 = __OFADD__(v7, v2);
  uint64_t v9 = v7 + v2;
  if (!v8)
  {
    *(void *)(v3 + 16) = v9;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

uint64_t sub_1000057A8(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (v1)
  {
    uint64_t v2 = result;
    int v3 = *(unsigned __int8 *)(result + 32);
    result += 32;
    if (!v3)
    {
LABEL_6:
      uint64_t v7 = static String._fromUTF8Repairing(_:)();
      swift_bridgeObjectRelease();
      return v7;
    }
    uint64_t v4 = 0;
    uint64_t v5 = v1 - 1;
    while (v5 != v4)
    {
      if (!*(unsigned __int8 *)(v2 + 33 + v4++)) {
        goto LABEL_6;
      }
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10000582C()
{
  sub_10002B904();
  swift_retain();
  uint64_t v0 = swift_retain();
  sub_100019B6C(v0, &qword_10021BE88, (uint64_t (*)(void (**)(void), uint64_t))sub_10001C1AC, &qword_10021BE90, &qword_10021BE98);
  swift_release();

  return swift_release();
}

uint64_t sub_1000058B4()
{
  uint64_t v1 = (os_unfair_lock_s *)(*(void *)(v0 + 16) + 24);
  os_unfair_lock_lock(v1);
  sub_100031010(&v3);
  os_unfair_lock_unlock(v1);
  return v3;
}

id sub_100005914(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 == 15)
  {
    Class isa = 0;
  }
  else
  {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    uint64_t v4 = sub_100020CAC();
    sub_10000A330(v4, v5);
  }
  id v6 = [v2 initWithData:isa];

  return v6;
}

void sub_100005984()
{
  sub_10002EBF8();
  if (v6)
  {
    sub_1000212E4();
    if (v8 != v9)
    {
      sub_10002A3A8();
      if (v8)
      {
        __break(1u);
        return;
      }
      sub_1000268F0();
    }
  }
  else
  {
    uint64_t v7 = v4;
  }
  uint64_t v10 = *(void *)(v0 + 16);
  if (v7 <= v10) {
    uint64_t v11 = *(void *)(v0 + 16);
  }
  else {
    uint64_t v11 = v7;
  }
  if (v11)
  {
    sub_10002572C(v5);
    uint64_t v12 = (void *)sub_10001659C();
    sub_10002760C(v12);
    v12[2] = v10;
    v12[3] = v13;
  }
  else
  {
    uint64_t v12 = _swiftEmptyArrayStorage;
  }
  os_log_type_t v14 = v12 + 4;
  uint64_t v15 = v0 + 32;
  if (v3)
  {
    v2(v15, v10, v14);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    v1(v15, v10, v14);
  }
  swift_release();
}

uint64_t sub_100005A44()
{
  uint64_t v1 = (os_unfair_lock_s *)(*(void *)(v0 + 16) + 24);
  os_unfair_lock_lock(v1);
  sub_100030FB8(&v3);
  os_unfair_lock_unlock(v1);
  return v3;
}

uint64_t type metadata accessor for ProtobufPayload()
{
  return self;
}

void sub_100005AC8(uint64_t a1, void *a2)
{
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [a2 setResourceVersions:isa];
}

BOOL sub_100005B40(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  char v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  char v8 = (char *)&v13 - v7;
  if (qword_100218C68 != -1) {
    swift_once();
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, a1, v2);
  Date.init(timeInterval:since:)();
  Date.timeIntervalSinceNow.getter();
  double v10 = v9;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
  double v11 = *(double *)&qword_10021FBF0;
  if (qword_100218C70 != -1) {
    swift_once();
  }
  return v10 <= v11 - *(double *)&qword_10021FBF8;
}

void sub_100005CE8(void *a1)
{
  if (a1)
  {
    sub_100017980();
    id v2 = a1;
    NSFileHandle.write<A>(contentsOf:)();
  }
}

void *sub_100005F1C(void *a1)
{
  uint64_t result = (void *)swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v4 = (uint64_t)result;
    uint64_t v5 = *(void *)(v1 + 24);
    type metadata accessor for LazyFileWriter();
    swift_allocObject();
    return sub_10000B194(v4, v5, a1);
  }
  return result;
}

uint64_t sub_100005F98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for FeedbackFile();
  sub_10001DCF8();
  __chkstk_darwin(v9);
  sub_100016550();
  sub_10000E308();
  sub_100013C98(a3, a4, v5);
  if (v4) {
    return swift_unknownObjectRelease();
  }
  swift_unknownObjectRelease();
  double v11 = *(void **)(v5 + *(int *)(v8 + 20));
  id v12 = v11;
  sub_100007CF0(v5, v11);

  return sub_10003056C(v5, (void (*)(void))type metadata accessor for FeedbackFile);
}

void sub_100006090(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  [a4 writeData:isa forTag:a3];
}

void sub_1000060F0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [a4 writeString:v6 forTag:a3];
}

uint64_t sub_100006164(uint64_t a1)
{
  uint64_t result = swift_conformsToProtocol2();
  if (result) {
    return a1;
  }
  __break(1u);
  return result;
}

uint64_t FlusherClient.invalidationQueue.getter()
{
  sub_100023FA0(0, (unint64_t *)&qword_100219250);
  uint64_t v0 = type metadata accessor for DispatchQoS.QoSClass();
  sub_100020C48();
  uint64_t v2 = v1;
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v5, enum case for DispatchQoS.QoSClass.background(_:), v0);
  uint64_t v6 = static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v0);
  return v6;
}

uint64_t sub_100006290()
{
  id v1 = [v0 codable];
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = PBCodable.containedRedactables.getter();
  }
  else
  {
    uint64_t v3 = _swiftEmptyArrayStorage;
  }
  uint64_t v4 = v3[2];
  if (v4)
  {
    uint64_t v5 = v3 + 5;
    do
    {
      uint64_t v6 = *v5;
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v6 + 16);
      swift_unknownObjectRetain();
      v8(ObjectType, v6);
      swift_unknownObjectRelease();
      v5 += 2;
      --v4;
    }
    while (v4);
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_100006364@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  uint64_t v5 = *(void *)(a1 + 24);
  *a2 = result;
  a2[1] = v5;
  return result;
}

void (*sub_1000063C0())(uint64_t *__return_ptr, uint64_t)
{
  void (*v4)(uint64_t *__return_ptr, uint64_t);
  void (*v5)(uint64_t *__return_ptr, uint64_t);
  uint64_t v6;
  void (*v8[2])(uint64_t *__return_ptr, uint64_t);

  id v1 = *(os_unfair_lock_s **)(v0 + 16);
  uint64_t v2 = (uint64_t)&v1[4];
  uint64_t v3 = v1 + 9;
  os_unfair_lock_lock(v1 + 9);
  sub_1000313EC(v2, v8);
  os_unfair_lock_unlock(v3);
  uint64_t v4 = v8[1];
  if (v8[0])
  {
    uint64_t v5 = v8[0];
    OS_dispatch_group.wait()();
    uint64_t v6 = sub_100113CF4();

    swift_unknownObjectRelease();
    return (void (*)(uint64_t *__return_ptr, uint64_t))v6;
  }
  return v4;
}

uint64_t sub_100006474()
{
  type metadata accessor for UUID();
  sub_100020C48();
  __chkstk_darwin(v1);
  sub_100016500();
  uint64_t v2 = type metadata accessor for SessionTokens(0);
  __chkstk_darwin(v2);
  sub_100017DC8();
  sub_10003093C(v0);
  sub_100016608();
  v3();
  sub_100027C78(v0, (void (*)(void))type metadata accessor for SessionTokens);
  uint64_t v4 = UUID.uuidString.getter();
  sub_10002819C();
  sub_1000283AC();
  v5();
  return v4;
}

uint64_t sub_100006588()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.init(timeIntervalSinceNow:)();
  uint64_t v5 = type metadata accessor for ClientSessionTimekeeper();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v2 + 40))(v0 + *(int *)(v5 + 28), v4, v1);
}

uint64_t sub_10000665C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 < 0)
  {
LABEL_9:
    sub_100020C64();
    sub_100017E1C();
    goto LABEL_11;
  }
  unint64_t v6 = a4 + 16 * a1 + 32;
  unint64_t v7 = a3 + 16 * v5;
  if (v6 >= v7 || v6 + 16 * v5 <= a3)
  {
    sub_10002572C(a5);
    swift_arrayInitWithCopy();
    swift_bridgeObjectRelease();
    return v7;
  }
  sub_100020C64();
  sub_1000242EC();
LABEL_11:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_100006748(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

uint64_t Lock.__deallocating_deinit()
{
  swift_slowDealloc();

  return _swift_deallocClassInstance(v0, 24, 7);
}

uint64_t sub_1000067F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10002572C(&qword_10021A520);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100006858(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10002572C((uint64_t *)&unk_100219728);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_1000068C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + qword_10021F4D8) = 0;
  *(void *)(v3 + *(void *)(*(void *)v3 + 472)) = a3;
  sub_100023790();
}

uint64_t sub_100006928(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = NSData.startIndex.getter();
  uint64_t result = NSData.endIndex.getter();
  if (v4 > a1 || result < a1)
  {
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v7 = NSData.startIndex.getter();
  uint64_t result = NSData.endIndex.getter();
  if (v7 > a2 || result < a2) {
    goto LABEL_12;
  }
  uint64_t result = a2 - a1;
  if (__OFSUB__(a2, a1)) {
LABEL_13:
  }
    __break(1u);
  return result;
}

uint64_t sub_100006998()
{
  swift_retain();
  swift_retain();
  sub_10002AB20();
  sub_100027E58();
  swift_release();
  return v0;
}

uint64_t sub_100006A18(void *a1)
{
  id v1 = [a1 immutableData];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_100006A7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100006B58()
{
  return sub_100027528();
}

uint64_t sub_100006BB8(void *a1)
{
  id v2 = [a1 releaseTag];

  if (!v2) {
    return 0;
  }
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_100006C28()
{
  sub_10002572C(&qword_10021E000);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1001A2A20;
  *(void *)(inited + 32) = 0x746E65696C63;
  *(void *)(inited + 40) = 0xE600000000000000;
  ClientType.rawValue.getter();
  *(NSNumber *)(inited + 48) = UInt._bridgeToObjectiveC()();
  sub_10002FF38();
  return Dictionary.init(dictionaryLiteral:)();
}

uint64_t sub_100006CBC()
{
  id v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchTime();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  static DispatchTime.now()();
  uint64_t v6 = DispatchTime.uptimeNanoseconds.getter();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  double v8 = *v1 * 1000000000.0;
  if ((~*(void *)&v8 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (v8 <= -1.0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (v8 >= 1.84467441e19)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  uint64_t result = v6 + (unint64_t)v8;
  if (!__CFADD__(v6, (unint64_t)v8)) {
    return DispatchTime.init(uptimeNanoseconds:)();
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_100006DF8()
{
  return sub_100027528();
}

uint64_t SessionFeedback.init(session:sessionId:type:creationDate:closingDate:)()
{
  sub_1000277DC();
  uint64_t v6 = v0 + OBJC_IVAR____TtC14SearchFeedback15SessionFeedback_closingDate;
  uint64_t v7 = type metadata accessor for Date();
  sub_10002538C(v6, 1, 1, v7);
  *(void *)(v0 + 16) = v5;
  double v8 = (void *)(v0 + OBJC_IVAR____TtC14SearchFeedback15SessionFeedback_sessionId);
  *double v8 = v4;
  v8[1] = v3;
  uint64_t v9 = v0 + OBJC_IVAR____TtC14SearchFeedback15SessionFeedback_type;
  type metadata accessor for SessionType();
  sub_10001DCF8();
  (*(void (**)(uint64_t, uint64_t))(v10 + 32))(v9, v2);
  sub_10000E004();
  (*(void (**)(void))(v11 + 32))();
  uint64_t v12 = v0 + OBJC_IVAR____TtC14SearchFeedback15SessionFeedback_closingDate;
  swift_beginAccess();
  sub_100032DFC(v1, v12);
  swift_endAccess();
  return v0;
}

uint64_t sub_100006F90(uint64_t a1)
{
  uint64_t v2 = sub_10002572C(&qword_10021F2D0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v6 = result;
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v8 = OBJC_IVAR____TtC7parsecd14ContextManager__parsecSubscriptionManager;
    if (*(void *)(a1 + OBJC_IVAR____TtC7parsecd14ContextManager__parsecSubscriptionManager)
      && (swift_retain(), uint64_t v9 = (void *)sub_100005A44(), swift_release(), v9, v9))
    {
      return swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v10 = Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v10, v11))
      {
        uint64_t v12 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v12 = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "creating ParsecSubscriptionManager", v12, 2u);
        swift_slowDealloc();
      }

      id v13 = objc_allocWithZone((Class)type metadata accessor for ParsecSubscriptionManager());
      swift_unknownObjectRetain();
      swift_retain();
      swift_retain();
      id v14 = sub_100038A80(v6, v7, a1, (uint64_t)&off_100200898);
      uint64_t v15 = sub_1000FC6C8(*(void *)(a1 + OBJC_IVAR____TtC7parsecd14ContextManager_configuration + 8));
      uint64_t v17 = v16;
      uint64_t v18 = type metadata accessor for TaskPriority();
      sub_10002538C((uint64_t)v4, 1, 1, v18);
      sub_10002572C(&qword_10021EB80);
      swift_allocObject();
      uint64_t v19 = sub_1000F9E0C(v14, v15, v17, (uint64_t)v4, 0, 0, 0, 0);
      swift_unknownObjectRelease();
      *(void *)(a1 + v8) = v19;
      return swift_release();
    }
  }
  return result;
}

id sub_1000071E4(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    NSString v3 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v3 = 0;
  }
  id v4 = [v2 initWithSuiteName:v3];

  return v4;
}

void sub_100007248(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(void (**)(void), uint64_t)@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X8>)
{
  id v13 = *(os_unfair_lock_s **)(v6 + 16);
  os_unfair_lock_lock(v13);
  sub_10002AD10();
  sub_100032568(a1, a2, a3, a4, a5, a6);
  swift_endAccess();
  os_unfair_lock_unlock(v13);
}

void sub_1000072DC()
{
  uint64_t v1 = type metadata accessor for UUID();
  sub_100020C48();
  uint64_t v3 = v2;
  __chkstk_darwin(v4);
  sub_100024A64();
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v10 - v6;
  uint64_t v8 = *(os_unfair_lock_s **)(*(void *)(v0 + 32) + 16);
  os_unfair_lock_lock(v8);
  sub_100016608();
  v9();
  swift_beginAccess();
  sub_100009CF8();
  swift_endAccess();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v7, v1);
  os_unfair_lock_unlock(v8);
}

uint64_t sub_1000073FC()
{
  return sub_100027528();
}

uint64_t sub_10000745C(uint64_t a1)
{
  sub_10002572C(&qword_10021E000);
  uint64_t inited = (__n128 *)swift_initStackObject();
  sub_100026B18(inited, (__n128)xmmword_1001A2A20);
  inited[3].n128_u64[0] = (unint64_t)[objc_allocWithZone((Class)NSNumber) initWithInteger:a1];
  sub_10002FF38();
  return Dictionary.init(dictionaryLiteral:)();
}

id sub_1000074EC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  type metadata accessor for FileAttributeKey(0);
  sub_100019B00((unint64_t *)&qword_100219240, type metadata accessor for FileAttributeKey);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v8 = [a4 createFileAtPath:a1 contents:a2 attributes:isa];

  return v8;
}

void *sub_1000075B8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for Client();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  UserAgent.client.getter();
  Client.type.getter();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  uint64_t v7 = ClientType.rawValue.getter();
  id v8 = 0;
  if (v7 != ClientType.rawValue.getter()) {
    return v8;
  }
  uint64_t v9 = sub_100006B58();
  __chkstk_darwin(v9);
  *(&v34 - 2) = a2;
  uint64_t v10 = sub_100112218();
  swift_unknownObjectRelease();
  if (!v10)
  {
    if (qword_100218B38 != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    sub_10002A10C(v21, (uint64_t)qword_1002369C0);
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      BOOL v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)BOOL v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Did not find a matching client state for session to extract experiment metadata", v24, 2u);
      swift_slowDealloc();
    }

    return 0;
  }
  os_log_type_t v11 = (void *)sub_1000BDDD8();
  if (!v11)
  {
LABEL_22:
    swift_release();
    return 0;
  }
  uint64_t v12 = v11;
  uint64_t v13 = sub_100013C38(v11, (SEL *)&selRef_experimentNamespaceId);
  if (!v14) {
    goto LABEL_21;
  }
  uint64_t v15 = v13;
  unint64_t v16 = v14;
  swift_bridgeObjectRelease();
  uint64_t v17 = HIBYTE(v16) & 0xF;
  if ((v16 & 0x2000000000000000) == 0) {
    uint64_t v17 = v15 & 0xFFFFFFFFFFFFLL;
  }
  if (!v17)
  {
LABEL_21:

    goto LABEL_22;
  }
  id v18 = [objc_allocWithZone((Class)_CPExperimentInfo) init];
  if (!v18)
  {
    if (qword_100218B38 != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    sub_10002A10C(v25, (uint64_t)qword_1002369C0);
    Swift::Int v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      unint64_t v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Couldn't initialize ExperimentInfo", v28, 2u);
      swift_slowDealloc();
    }

    goto LABEL_21;
  }
  id v8 = v18;
  sub_100013C38(v12, (SEL *)&selRef_experimentNamespaceId);
  if (v19)
  {
    NSString v20 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v20 = 0;
  }
  [v8 setNamespaceId:v20];

  sub_100013C38(v12, (SEL *)&selRef_experimentId);
  if (v30)
  {
    NSString v31 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v31 = 0;
  }
  [v8 setExperimentId:v31];

  sub_100013C38(v12, (SEL *)&selRef_experimentTreatmentId);
  if (v32)
  {
    NSString v33 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v33 = 0;
  }
  [v8 setTreatmentId:v33];

  objc_msgSend(v8, "setDeploymentId:", objc_msgSend(v12, "experimentDeploymentId"));
  objc_msgSend(v8, "setVersion:", objc_msgSend(v12, "experimentVersion"));
  swift_release();

  return v8;
}

Swift::Int sub_100007A2C()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v0 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return v0;
}

void sub_100007AA0(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v3 = (unint64_t *)(a1 + OBJC_IVAR____TtC7parsecd27DevicePersistentDataManager_cachedData);
  unint64_t v4 = *(void *)(a1 + OBJC_IVAR____TtC7parsecd27DevicePersistentDataManager_cachedData + 16);
  if (v4)
  {
    unint64_t v5 = *v3;
    unint64_t v6 = v3[1];
    swift_bridgeObjectRetain();
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Reading persistent data from cache", v9, 2u);
      swift_slowDealloc();
    }
  }
  else
  {
    unint64_t v5 = sub_1000B4448();
    unint64_t v6 = v10;
    unint64_t v4 = v11;
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v12, v13))
    {
      unint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Read persistent data from store", v14, 2u);
      swift_slowDealloc();
    }

    *uint64_t v3 = v5;
    v3[1] = v6;
    v3[2] = v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  *a2 = v5;
  a2[1] = v6;
  a2[2] = v4;
}

uint64_t sub_100007C24()
{
  sub_10002572C(&qword_10021E000);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1001A3830;
  *(void *)(inited + 32) = 0x746E65696C63;
  *(void *)(inited + 40) = 0xE600000000000000;
  *(void *)(inited + 48) = String._bridgeToObjectiveC()();
  *(void *)(inited + 56) = 1701869940;
  *(void *)(inited + 64) = 0xE400000000000000;
  *(NSNumber *)(inited + 72) = Int32._bridgeToObjectiveC()();
  sub_100023FA0(0, (unint64_t *)&qword_10021EF70);
  return Dictionary.init(dictionaryLiteral:)();
}

uint64_t sub_100007CF0(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_10002572C(&qword_10021BB20);
  uint64_t v5 = sub_100016544(v4);
  uint64_t v6 = __chkstk_darwin(v5);
  os_log_type_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  unint64_t v10 = (char *)&v18 - v9;
  unint64_t v11 = *(void **)(v2 + OBJC_IVAR____TtC7parsecd10FileWriter_fileHandle);
  *(void *)(v2 + OBJC_IVAR____TtC7parsecd10FileWriter_fileHandle) = a2;
  id v12 = a2;

  uint64_t v13 = type metadata accessor for URL();
  sub_10001DCF8();
  uint64_t v14 = sub_10002AFC0();
  v15(v14);
  sub_10002538C((uint64_t)v10, 0, 1, v13);
  sub_100033264((uint64_t)v10, (uint64_t)v8);
  uint64_t v16 = v2 + OBJC_IVAR____TtC7parsecd10FileWriter__fileUrl;
  sub_1000257C8();
  sub_10002B84C((uint64_t)v8, v16, &qword_10021BB20);
  return swift_endAccess();
}

uint64_t static JSONSerializationUtil.data(withJSONObject:options:)(void *a1, uint64_t a2)
{
  uint64_t v5 = self;
  sub_10001B620(a1, a1[3]);
  LODWORD(v5) = [v5 isValidJSONObject:_bridgeAnythingToObjectiveC<A>(_:)()];
  uint64_t v6 = swift_unknownObjectRelease();
  if (v5)
  {
    __chkstk_darwin(v6);
    v12[2] = a1;
    v12[3] = a2;
    uint64_t result = sub_10000C574((uint64_t)sub_1000308F8, (uint64_t)v12, &v13);
    if (!v2) {
      return v13;
    }
  }
  else
  {
    uint64_t v8 = sub_10004A5E8(a1, 1953460082, (void *)0xE400000000000000);
    uint64_t v10 = v9;
    sub_10004AA14();
    swift_allocError();
    *unint64_t v11 = v8;
    v11[1] = v10;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_100007F6C(uint64_t a1)
{
  uint64_t v2 = sub_10002572C(&qword_10021F2D0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v6 = result;
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v8 = OBJC_IVAR____TtC7parsecd14ContextManager__contextProviderInterface;
    if (*(void *)(a1 + OBJC_IVAR____TtC7parsecd14ContextManager__contextProviderInterface)
      && (swift_retain(), uint64_t v9 = sub_1000058B4(), swift_release(), swift_release(), v9))
    {
      return swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v10 = Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v10, v11))
      {
        id v12 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v12 = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "creating ContextProviderInterface", v12, 2u);
        swift_slowDealloc();
      }

      type metadata accessor for ContextProviderInterface();
      swift_allocObject();
      swift_unknownObjectRetain();
      swift_retain();
      uint64_t v13 = sub_100095900(v6, v7);
      sub_100095BB4();
      uint64_t v14 = sub_1000FC6C8(*(void *)(a1 + OBJC_IVAR____TtC7parsecd14ContextManager_configuration));
      uint64_t v16 = v15;
      uint64_t v17 = type metadata accessor for TaskPriority();
      sub_10002538C((uint64_t)v4, 1, 1, v17);
      sub_10002572C(&qword_10021EBB8);
      swift_allocObject();
      uint64_t v18 = sub_1000F9C38(v13, v14, v16, (uint64_t)v4, 0, 0, 0, 0);
      swift_unknownObjectRelease();
      *(void *)(a1 + v8) = v18;
      return swift_release();
    }
  }
  return result;
}

void *PBCodable.containedRedactables.getter()
{
  uint64_t v1 = (void *)v0;
  os_log_type_t v23 = _swiftEmptyArrayStorage;
  PBCodable.containedResults.getter();
  sub_10002F324();
  uint64_t v3 = v2;
  swift_bridgeObjectRelease();
  sub_1000056CC(v3);
  self;
  uint64_t v4 = swift_dynamicCastObjCClass();
  if (v4)
  {
    uint64_t v5 = (void *)v4;
    id v6 = v1;
    if (sub_1000BB0F8(v5, (SEL *)&selRef_sections, &qword_10021D630))
    {
      sub_10002F324();
      uint64_t v8 = v7;
      swift_bridgeObjectRelease();
      sub_1000056CC(v8);
    }
  }
  else
  {
    swift_getObjectType();
    uint64_t v9 = sub_10002E49C(v0);
    if (v9)
    {
      uint64_t v11 = v9;
      uint64_t v12 = v10;
      uint64_t v13 = _swiftEmptyArrayStorage;
      id v14 = v1;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_100025024();
        sub_10002F418();
        uint64_t v13 = v19;
      }
      unint64_t v15 = v13[2];
      unint64_t v16 = v15 + 1;
      if (v15 >= v13[3] >> 1)
      {
        sub_100025024();
        unint64_t v21 = v20;
        sub_10002F418();
        unint64_t v15 = v21;
        uint64_t v13 = v22;
      }
      v13[2] = v16;
      uint64_t v17 = &v13[2 * v15];
      v17[4] = v11;
      v17[5] = v12;
      return v13;
    }
  }
  return v23;
}

uint64_t type metadata accessor for RawPayload()
{
  return self;
}

void sub_100008360(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_100017EC4();
  a19 = v21;
  a20 = v22;
  uint64_t v24 = v23;
  uint64_t v25 = type metadata accessor for SessionType();
  sub_100020C48();
  uint64_t v27 = v26;
  __chkstk_darwin(v28);
  sub_10000DFD0();
  uint64_t v31 = v30 - v29;
  swift_beginAccess();
  uint64_t v32 = *(void *)(v20 + 16);
  if (*(void *)(v32 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v33 = sub_100019A28();
    if (v34)
    {
      *(id *)(*(void *)(v32 + 56) + 8 * v33);
      swift_bridgeObjectRelease();
      goto LABEL_11;
    }
    swift_bridgeObjectRelease();
  }
  if (qword_100224318 != -1) {
    swift_once();
  }
  uint64_t v35 = type metadata accessor for Logger();
  sub_10002A10C(v35, (uint64_t)qword_100236DC8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 16))(v31, v24, v25);
  v36 = Logger.logObject.getter();
  os_log_type_t v37 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v36, v37))
  {
    v38 = (uint8_t *)swift_slowAlloc();
    a10 = swift_slowAlloc();
    *(_DWORD *)v38 = 136315138;
    uint64_t v39 = SessionType.description.getter();
    uint64_t v41 = sub_10001C274(v39, v40, &a10);
    sub_100028074(v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v42 = sub_10002CFE8();
    v43(v42);
    _os_log_impl((void *)&_mh_execute_header, v36, v37, "Feedback store writer is requested without filed session for: %s", v38, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v44 = sub_10002CFE8();
    v45(v44);
  }

  sub_10002DA0C();
LABEL_11:
  sub_100024A18();
}

uint64_t sub_1000085EC(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);

  return swift_release();
}

uint64_t sub_100008630(void *a1)
{
  id v1 = [a1 data];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_100008694()
{
  swift_retain();
  swift_retain();
  sub_10002AB20();
  sub_100027E58();
  swift_release();
  return v0;
}

char *sub_100008714(void *a1)
{
  int v1 = [a1 processIdentifier];
  uint64_t v2 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(void *)(v2 + 16) = 4096;
  bzero((void *)(v2 + 32), 0x1000uLL);
  if (proc_pidpath(v1, (void *)(v2 + 32), 0x1000u) > 0) {
    return (char *)sub_1000057A8(v2);
  }
  int v4 = errno.getter();
  uint64_t result = strerror(v4);
  if (result)
  {
    swift_bridgeObjectRelease();
    uint64_t v6 = String.init(cString:)();
    unint64_t v8 = v7;
    if (qword_100218B50 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_10002A10C(v9, (uint64_t)qword_100236A08);
    swift_bridgeObjectRetain();
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    uint64_t v3 = 0x6E776F6E6B6E753CLL;
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 67109378;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v12 + 8) = 2080;
      swift_bridgeObjectRetain();
      sub_10001C274(v6, v8, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "error getting path for pid [%d] %s", (uint8_t *)v12, 0x12u);
      swift_arrayDestroy();
      sub_100017D40();
      sub_100017D40();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return (char *)v3;
  }
  __break(1u);
  return result;
}

uint64_t sub_10000896C(void *a1, SEL *a2)
{
  id v2 = [a1 *a2];
  if (v2)
  {
    uint64_t v3 = v2;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  return sub_100027EA8();
}

void sub_1000089C8()
{
  sub_100027F28();
  sub_100025B1C();
  *(void *)(v0 + 24) = v1;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  Lock.unlock()();
}

uint64_t sub_100008A18()
{
  uint64_t v0 = sub_10002A1E0();
  swift_release();
  if (!v0)
  {
    uint64_t result = sub_100023568();
    if (!result) {
      return result;
    }
    swift_release();
  }
  return 1;
}

uint64_t sub_100008A60(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SessionTokens(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100008AC4@<X0>(uint64_t *a1@<X8>)
{
  id v2 = objc_allocWithZone((Class)NSUserDefaults);
  sub_10000E090();
  sub_1000071E4(v3, v4);
  sub_100024344();
  uint64_t v5 = type metadata accessor for SearchQueriesDataSharingStatusHelper();
  a1[3] = v5;
  a1[4] = (uint64_t)&off_1001FE988;
  uint64_t v6 = sub_10002E5E8(a1);
  sub_10000E090();
  uint64_t result = Logger.init(subsystem:category:)();
  *(uint64_t *)((char *)v6 + *(int *)(v5 + 20)) = (uint64_t)v2;
  return result;
}

uint64_t sub_100008B84(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_10002572C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100008BE8(char a1)
{
  uint64_t v4 = v1;
  uint64_t v6 = type metadata accessor for SessionTokens(0);
  uint64_t v7 = sub_100016544(v6);
  __chkstk_darwin(v7);
  sub_100024A64();
  uint64_t v10 = v8 - v9;
  __chkstk_darwin(v11);
  sub_1000296AC();
  sub_100020C48();
  __chkstk_darwin(v12);
  sub_100025250(v13, v21);
  uint64_t v14 = sub_10002CDE8();
  v15(v14);
  id v16 = v3;
  _dispatchPreconditionTest(_:)();
  uint64_t v17 = sub_10002758C();
  uint64_t result = v18(v17);
  if (v3)
  {
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    sub_10001319C(Strong, v2);
    sub_100017F00();
    sub_10002D8D8(v2, v10);
    swift_retain();
    sub_100031210();
    swift_release();
    uint64_t result = sub_100027C78(v2, (void (*)(void))type metadata accessor for SessionTokens);
    *(unsigned char *)(v4 + 152) = (a1 & 1) == 0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_100008D58(void *a1, uint64_t a2)
{
  id v4 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) initWithCodable:a1];
  id v5 = v4;
  [v5 setQueryId:a2];

  return v4;
}

uint64_t sub_100008DC8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  sub_100008B84(a6, (uint64_t)&v21, &qword_10021C060);
  if (!v22) {
    return sub_10000D564((uint64_t)&v21, &qword_10021C060);
  }
  sub_10001C1AC(&v21, (uint64_t)v23);
  uint64_t v9 = type metadata accessor for DispatchPredicate();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (void *)((char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = *(void **)(a1 + 256);
  *uint64_t v12 = v13;
  (*(void (**)(void *, void, uint64_t))(v10 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v9);
  id v14 = v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v10 + 8))(v12, v9);
  if (v13)
  {
    uint64_t v16 = v24;
    uint64_t v17 = v25;
    sub_10001B620(v23, v24);
    type metadata accessor for RawPayload();
    sub_100023FA0(0, &qword_100219EB8);
    id v18 = RawPayload.__allocating_init<A>(with:)(a3);
    type metadata accessor for SessionTokens(0);
    uint64_t v19 = UUID.uuidString.getter();
    (*(void (**)(id, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 8))(v18, v19, v20, a5, v16, v17);

    swift_bridgeObjectRelease();
    return sub_10001CA50((uint64_t)v23);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_100009040(uint64_t a1)
{
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = a1;
  v5[4] = sub_100032818;
  v5[5] = v3;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 1107296256;
  v5[2] = sub_10000BB48;
  v5[3] = &unk_100207000;
  id v4 = _Block_copy(v5);
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v4);
}

uint64_t ProtoSchemaStore.messageSchema(withName:)()
{
  sub_1000276B0();
  uint64_t v6 = v5;
  sub_100017F00();
  uint64_t v7 = *(void *)(v1 + 40);
  if (*(void *)(v7 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v8 = sub_1000287F0(v3, v2);
    if (v9)
    {
      uint64_t v10 = *(void *)(*(void *)(v7 + 56) + 8 * v8);
      swift_retain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = type metadata accessor for ProtoMessageSchema();
      v6[3] = result;
      v6[4] = (uint64_t)&off_1002029B0;
      *uint64_t v6 = v10;
      return result;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v29 = v6;
  sub_100017F00();
  uint64_t v12 = *(void *)(v4 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v13 = sub_100024A48();
  uint64_t v15 = sub_100139E54(v13, v14, v12);
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v15)
  {
    uint64_t v20 = type metadata accessor for ProtoMessageSchema();
    swift_allocObject();
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v21 = sub_100024A48();
    uint64_t result = sub_10012C050(v21, v22, v15, v17, v19, v4, v23);
    if (!v0)
    {
      uint64_t v24 = result;
      sub_1000257C8();
      swift_bridgeObjectRetain();
      swift_retain();
      sub_10013A80C();
      swift_endAccess();
      swift_bridgeObjectRelease();
      sub_1000257C8();
      uint64_t v25 = sub_100024A48();
      uint64_t v27 = sub_10013EB58(v25, v26);
      swift_endAccess();
      uint64_t result = sub_10013F060(v27);
      v29[3] = v20;
      v29[4] = (uint64_t)&off_1002029B0;
      *uint64_t v29 = v24;
    }
  }
  else
  {
    sub_1001229F8();
    swift_allocError();
    *(void *)uint64_t v28 = v3;
    *(void *)(v28 + 8) = v2;
    *(unsigned char *)(v28 + 41) = 1;
    swift_bridgeObjectRetain();
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_10000937C(void *a1)
{
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v3 = sub_100010DE0();
    sub_10002572C(&qword_100219720);
    swift_allocObject();
    sub_1000068C0(v3, 1, 0);
    uint64_t result = sub_100008630(a1);
    if (v4 >> 60 == 15)
    {
      __break(1u);
    }
    else
    {
      uint64_t v5 = result;
      unint64_t v6 = v4;
      swift_retain();
      sub_1000170BC();
      int v8 = v7;
      swift_release();
      sub_10000A330(v5, v6);
      if (v8 == 2)
      {
        if (qword_100218B40 != -1) {
          swift_once();
        }
        uint64_t v9 = type metadata accessor for Logger();
        sub_10002A10C(v9, (uint64_t)qword_1002369D8);
        uint64_t v10 = Logger.logObject.getter();
        os_log_type_t v11 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v10, v11))
        {
          uint64_t v12 = (uint8_t *)sub_100023E24();
          *(_WORD *)uint64_t v12 = 0;
          _os_log_impl((void *)&_mh_execute_header, v10, v11, "Could not write session to file.", v12, 2u);
          sub_10002B260();
        }

        sub_10003A1F4();
      }
      swift_unknownObjectRelease();
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_100009534()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for ContinuousClock.Instant();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10002572C(&qword_10021A520);
  __chkstk_darwin(v6 - 8);
  int v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(v1 + 16);
  if (v9)
  {
    swift_retain();
    static ContinuousClock.Instant.now.getter();
    ContinuousClock.Instant.advanced(by:)();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    sub_10002538C((uint64_t)v8, 0, 1, v2);
    uint64_t v10 = v1 + qword_10021A470;
    swift_beginAccess();
    sub_1000067F0((uint64_t)v8, v10);
    swift_endAccess();
  }
  return v9;
}

void sub_100009774(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [a5 setResourceVersions:v6 forKey:v7];
}

uint64_t sub_100009810()
{
  if (!*(void *)(v0 + OBJC_IVAR____TtC7parsecd10FileWriter_fileHandle)) {
    return 2;
  }
  uint64_t v1 = [objc_allocWithZone((Class)PBDataWriter) init];
  if (!v1) {
    return 2;
  }
  uint64_t v2 = v1;
  PBDataWriterWriteSubmessage();
  uint64_t result = sub_100006A18(v2);
  if (v4 >> 60 != 15)
  {
    uint64_t v5 = result;
    unint64_t v6 = v4;
    swift_retain();
    sub_1000170BC();
    uint64_t v8 = v7;
    int v9 = v7;
    swift_release();
    sub_10000A330(v5, v6);
    if (v9 == 2)
    {
      if (qword_100218B40 != -1) {
        swift_once();
      }
      uint64_t v10 = type metadata accessor for Logger();
      sub_10002A10C(v10, (uint64_t)qword_1002369D8);
      os_log_type_t v11 = Logger.logObject.getter();
      os_log_type_t v12 = static os_log_type_t.error.getter();
      if (sub_100017D10(v12))
      {
        uint64_t v13 = (uint8_t *)sub_100023E24();
        *(_WORD *)uint64_t v13 = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, (os_log_type_t)v5, "Error appending data.", v13, 2u);
        swift_slowDealloc();
        uint64_t v14 = v2;
        uint64_t v2 = v11;
      }
      else
      {
        uint64_t v14 = v11;
      }

      uint64_t v8 = 2;
    }

    return v8;
  }
  __break(1u);
  return result;
}

id sub_100009A78(uint64_t a1)
{
  URL._bridgeToObjectiveC()(__stack_chk_guard);
  uint64_t v3 = v2;
  id v12 = 0;
  id v4 = [(id)swift_getObjCClassFromMetadata() fileHandleForWritingToURL:v2 error:&v12];

  id v5 = v12;
  if (v4)
  {
    uint64_t v6 = type metadata accessor for URL();
    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
    id v8 = v5;
    v7(a1, v6);
  }
  else
  {
    id v9 = v12;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    uint64_t v10 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(a1, v10);
  }
  return v4;
}

uint64_t sub_100009BD0(uint64_t a1)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1[7] + 16);
  swift_retain();
  os_unfair_lock_lock(v3);
  sub_10000A884(v1, &v8);
  os_unfair_lock_unlock(v3);
  swift_release();
  if (!(void)v8) {
    return 3;
  }
  uint64_t v4 = *((void *)&v8 + 1);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(a1, ObjectType, v4);
  swift_unknownObjectRelease();
  return v6;
}

id sub_100009C80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v4 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  sub_100020CAC();
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v6 = [v4 initWithMachServiceName:v5 options:a3];

  return v6;
}

void sub_100009CF8()
{
  sub_10000DFE0();
  sub_10002F018();
  type metadata accessor for UUID();
  sub_100020C48();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  sub_100029224();
  sub_100032DB4(&qword_1002197C0, (void (*)(uint64_t))&type metadata accessor for UUID);
  swift_bridgeObjectRetain();
  sub_10002E704();
  sub_10002ED28();
  if (v8)
  {
    sub_10002608C(v7);
    while (1)
    {
      uint64_t v9 = sub_100028430();
      ((void (*)(uint64_t))v1)(v9);
      sub_100032DB4(&qword_10021C5E0, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v1 = sub_100092FC0();
      uint64_t v10 = *v2;
      sub_100025454();
      v10();
      if (v1) {
        break;
      }
      sub_100025428();
      if ((v11 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = v19;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    sub_100025454();
    v10();
    uint64_t v18 = sub_100028324();
    v0(v18);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v1 = *(void *)(v5 + 16);
LABEL_7:
    swift_isUniquelyReferenced_nonNull_native();
    uint64_t v12 = sub_10002E64C();
    ((void (*)(uint64_t))v1)(v12);
    uint64_t v13 = sub_10002977C();
    sub_10002F4FC(v13, v14, v15);
    *uint64_t v3 = v20;
    swift_bridgeObjectRelease();
    uint64_t v16 = sub_10002E784();
    v17(v16);
  }
  sub_10000DFB8();
}

void *sub_100009EAC()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for ContinuousClock.Instant();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10002572C(&qword_10021A520);
  __chkstk_darwin(v6 - 8);
  char v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void **)(v1 + 16);
  if (v9)
  {
    id v10 = v9;
    static ContinuousClock.Instant.now.getter();
    ContinuousClock.Instant.advanced(by:)();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    sub_10002538C((uint64_t)v8, 0, 1, v2);
    uint64_t v11 = v1 + qword_10021A470;
    swift_beginAccess();
    sub_1000067F0((uint64_t)v8, v11);
    swift_endAccess();
  }
  return v9;
}

uint64_t sub_10000A034()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  if (qword_100225CD8)
  {
    uint64_t v4 = (_UNKNOWN **)off_100225CE0;
    uint64_t v5 = qword_100225CD8;
    goto LABEL_3;
  }
  if (qword_100224310 != -1) {
    swift_once();
  }
  uint64_t v9 = qword_100225CC8;
  uint64_t v10 = unk_100225CD0;
  type metadata accessor for ProtoSchemaStore();
  uint64_t v11 = swift_allocObject();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v12 = v9;
  uint64_t v8 = v11;
  uint64_t v13 = ProtoSchemaStore.init(withModel:)(v12, v10);
  if (!v2)
  {
    uint64_t v5 = (uint64_t)v13;
    uint64_t v4 = &protocol witness table for ProtoSchemaStore;
    qword_100225CD8 = (uint64_t)v13;
    off_100225CE0 = &protocol witness table for ProtoSchemaStore;
    swift_retain();
    swift_unknownObjectRelease();
LABEL_3:
    swift_getObjectType();
    uint64_t v6 = (void (*)(uint64_t))v4[5];
    swift_unknownObjectRetain();
    uint64_t v7 = sub_100028088();
    uint64_t v8 = v5;
    v6(v7);
    if (v2)
    {
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v14 = type metadata accessor for ProtobufPayload();
      __chkstk_darwin(v14);
      v23[2] = v3;
      static ProtobufPayload.create(with:constructor:)(v24, (void (*)(void *__return_ptr, void))sub_10001B664, (uint64_t)v23);
      uint64_t v17 = v16;
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 24))(ObjectType, v17);
      uint64_t v21 = v20;
      id v22 = objc_allocWithZone((Class)type metadata accessor for RawPayload());
      uint64_t v8 = (uint64_t)RawPayload.init(with:)(v19, v21);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      sub_10001CA50((uint64_t)v24);
    }
  }
  return v8;
}

uint64_t RawPayload.data.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR___SRRawPayload_data);
  sub_100027BCC(v1, *(void *)(v0 + OBJC_IVAR___SRRawPayload_data + 8));
  return v1;
}

uint64_t sub_10000A330(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_1000291B4(a1, a2);
  }
  return a1;
}

uint64_t sub_10000A344()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100017E10();
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v0 + *(void *)(v5 + 144), v1);
  Date.timeIntervalSinceNow.getter();
  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
}

void sub_10000A474()
{
  sub_10002AFF0();
  uint64_t v3 = v2;
  sub_100028424();
  sub_100017E10();
  uint64_t v5 = *(os_unfair_lock_s **)(v0 + *(void *)(v4 + 96));
  os_unfair_lock_lock(v5);
  sub_100017E10();
  uint64_t v7 = v0 + *(void *)(v6 + 88);
  sub_10002AD10();
  sub_10003118C(v1, v7);
  swift_endAccess();
  os_unfair_lock_unlock(v5);
  sub_10003103C(v1, v3);
  sub_100028890();
}

uint64_t sub_10000A508(void *a1)
{
  id v25 = a1;
  *(void *)&long long v26 = a1;
  sub_1000300A8();
  id v2 = a1;
  sub_10002572C(&qword_10021E9C8);
  if (swift_dynamicCast())
  {
    sub_10001C1AC(v27, (uint64_t)v29);
    sub_10001B620(v29, v29[3]);
    dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();

    v27[0] = v26;
    sub_10001CA50((uint64_t)v29);
    return *(void *)&v27[0];
  }
  uint64_t v28 = 0;
  memset(v27, 0, sizeof(v27));
  sub_100019938((uint64_t)v27, &qword_10021E9D0);
  uint64_t v3 = NSData.startIndex.getter();
  uint64_t v4 = NSData.endIndex.getter();
  sub_100006928(v3, v4);
  *(void *)&v27[0] = Data._Representation.init(count:)();
  *((void *)&v27[0] + 1) = v5;
  __chkstk_darwin(*(void *)&v27[0]);
  v24[2] = &v25;
  uint64_t v6 = sub_100032FC8((void *(*)(uint64_t *__return_ptr, char *, char *))sub_100032EB8, (uint64_t)v24);
  uint64_t v8 = *((void *)&v27[0] + 1) >> 62;
  uint64_t v9 = v6;
  uint64_t v11 = v10;
  uint64_t v12 = BYTE14(v27[0]);
  switch(*((void *)&v27[0] + 1) >> 62)
  {
    case 1:
      LODWORD(v13) = DWORD1(v27[0]) - LODWORD(v27[0]);
      if (__OFSUB__(DWORD1(v27[0]), v27[0])) {
        goto LABEL_34;
      }
      uint64_t v13 = (int)v13;
LABEL_8:
      if (v7 != v13)
      {
        if (v8)
        {
          if (v8 == 1) {
            uint64_t v12 = *(uint64_t *)&v27[0] >> 32;
          }
          else {
            uint64_t v12 = *(void *)(*(void *)&v27[0] + 24);
          }
        }
LABEL_28:
        if (v12 >= v7)
        {
          Data._Representation.replaceSubrange(_:with:count:)();
          goto LABEL_30;
        }
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
LABEL_35:
        __break(1u);
      }
LABEL_14:
      memset(v29, 0, 15);
      if (v11 == NSData.endIndex.getter()) {
        goto LABEL_30;
      }
      LOBYTE(v17) = 0;
      do
      {
        char v18 = NSData.subscript.getter();
        id v19 = v9;
        uint64_t v20 = NSData.startIndex.getter();
        uint64_t v21 = NSData.endIndex.getter();

        if (v11 < v20 || v11 >= v21)
        {
          __break(1u);
LABEL_32:
          __break(1u);
          goto LABEL_33;
        }
        *((unsigned char *)v29 + v17) = v18;
        unsigned int v17 = v17 + 1;
        if ((v17 >> 8)) {
          goto LABEL_32;
        }
        if (v17 == 14)
        {
          *(void *)&long long v26 = v29[0];
          DWORD2(v26) = v29[1];
          WORD6(v26) = WORD2(v29[1]);
          Data._Representation.append(contentsOf:)();
          LOBYTE(v17) = 0;
        }
        ++v11;
      }
      while (v11 != NSData.endIndex.getter());
      if ((_BYTE)v17)
      {
        *(void *)&long long v26 = v29[0];
        DWORD2(v26) = v29[1];
        WORD6(v26) = WORD2(v29[1]);
        Data._Representation.append(contentsOf:)();
      }
LABEL_30:

      return *(void *)&v27[0];
    case 2:
      uint64_t v15 = *(void *)(*(void *)&v27[0] + 16);
      uint64_t v14 = *(void *)(*(void *)&v27[0] + 24);
      BOOL v16 = __OFSUB__(v14, v15);
      uint64_t v13 = v14 - v15;
      if (!v16) {
        goto LABEL_8;
      }
      goto LABEL_35;
    case 3:
      if (!v7) {
        goto LABEL_14;
      }
      uint64_t v12 = 0;
      goto LABEL_28;
    default:
      uint64_t v13 = BYTE14(v27[0]);
      goto LABEL_8;
  }
}

uint64_t sub_10000A884@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for SessionFileCreationError();
  __chkstk_darwin(v4);
  if (!a1[5])
  {
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      uint64_t v7 = Strong;
      uint64_t v8 = a1[3];
      uint64_t v9 = swift_unknownObjectWeakLoadStrong();
      if (v9)
      {
        uint64_t v10 = (void *)v9;
        type metadata accessor for FileWriter();
        uint64_t v11 = swift_allocObject();
        swift_unknownObjectRetain();
        id v12 = v10;
        sub_10000E68C(v7, v8, v12);

        swift_unknownObjectRelease();
        a1[5] = v11;
        a1[6] = &off_1001FAA40;
      }
      swift_unknownObjectRelease();
    }
  }
  *a2 = *(_OWORD *)(a1 + 5);
  return swift_unknownObjectRetain();
}

id sub_10000ACC8()
{
  id v0 = [self standardUserDefaults];
  sub_10000E090();
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 stringForKey:v1];

  if (!v2) {
    return 0;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_1000184E8();

  return v0;
}

void sub_10000AD7C(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = self;
  sub_10001B620(a1, a1[3]);
  id v13 = 0;
  id v7 = [v6 dataWithJSONObject:_bridgeAnythingToObjectiveC<A>(_:)() options:a2 error:&v13];
  swift_unknownObjectRelease();
  id v8 = v13;
  if (v7)
  {
    uint64_t v9 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v11 = v10;

    *a3 = v9;
    a3[1] = v11;
  }
  else
  {
    id v12 = v8;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
}

void sub_10000AE90(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_10002572C(&qword_100219ED0);
  uint64_t v6 = sub_100016544(v5);
  __chkstk_darwin(v6);
  sub_100016500();
  sub_100008B84(a1, v2, &qword_100219ED0);
  uint64_t v7 = type metadata accessor for SessionTokens(0);
  if (sub_100027BA4(v2, 1, v7) == 1)
  {
    uint64_t v8 = swift_unknownObjectRetain();
    sub_10001319C(v8, a2);
    sub_10000D564(v2, &qword_100219ED0);
  }
  else
  {
    uint64_t v9 = sub_10002819C();
    sub_100008A60(v9, v10);
  }
  if (!*(void *)(a2 + *(int *)(v7 + 24)))
  {
    if (qword_100218B38 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_10002A10C(v11, (uint64_t)qword_1002369C0);
    id v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Experiments statuses are not yet updated", v14, 2u);
      sub_100017D40();
    }
  }
}

uint64_t sub_10000B01C()
{
  uint64_t v0 = type metadata accessor for Client();
  sub_100020C48();
  uint64_t v2 = v1;
  __chkstk_darwin(v3);
  sub_10000DFD0();
  uint64_t v6 = v5 - v4;
  UserAgent.client.getter();
  unint64_t v7 = Client.type.getter();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v6, v0);
  if (v7 > 0x1A)
  {
    uint64_t result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
    __break(1u);
    return result;
  }
  if (((1 << v7) & 0x7DE2559) != 0) {
    return 0;
  }
  self;
  uint64_t result = swift_dynamicCastObjCClass();
  if (result)
  {
    uint64_t v9 = (void *)result;
    swift_unknownObjectRetain();
    if ([v9 isOnLockScreen])
    {
      swift_unknownObjectRelease();
    }
    else
    {
      unsigned int v10 = [v9 viewAppearEvent];
      swift_unknownObjectRelease();
      if (v10 < 0x19) {
        return (0x1C00E64u >> v10) & 1;
      }
    }
    return 0;
  }
  return result;
}

void *sub_10000B194(uint64_t a1, uint64_t a2, void *a3)
{
  v3[3] = 0;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  type metadata accessor for Locker();
  v3[5] = 0;
  v3[6] = 0;
  uint64_t v6 = sub_100023CE4();
  unint64_t v7 = (_DWORD *)swift_slowAlloc();
  *(void *)(v6 + 16) = v7;
  *unint64_t v7 = 0;
  v3[7] = v6;
  v3[3] = a2;
  swift_unknownObjectWeakAssign();
  swift_unknownObjectRelease();
  swift_unknownObjectWeakAssign();

  return v3;
}

uint64_t sub_10000B2F0(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = type metadata accessor for Client();
  sub_100020C48();
  uint64_t v8 = v7;
  __chkstk_darwin(v9);
  sub_10000E074();
  uint64_t v10 = type metadata accessor for UserAgent();
  sub_100020C48();
  uint64_t v12 = v11;
  __chkstk_darwin(v13);
  sub_100017DC8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v2, a1, v10);
  if (!a2)
  {
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v2, v10);
    return 0;
  }
  UserAgent.client.getter();
  Client.type.getter();
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v3, v6);
  uint64_t v14 = ClientType.rawValue.getter();
  uint64_t v15 = ClientType.rawValue.getter();
  sub_10002604C();
  v16();
  if (v14 != v15) {
    return 0;
  }
  if (a2 == 2) {
    return 1;
  }
  else {
    return 2;
  }
}

uint64_t sub_10000B45C()
{
  sub_10000B4B4();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v1, v2);
}

uint64_t sub_10000B4B4()
{
  type metadata accessor for URLComponents();
  sub_10001DCF8();
  sub_10000E040();
  v1();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

void sub_10000B52C()
{
  sub_10002B07C();
  if (v1)
  {
    sub_10002572C(&qword_10021F338);
    uint64_t v2 = (void *)sub_1000264A0();
  }
  else
  {
    uint64_t v2 = _swiftEmptyDictionarySingleton;
  }
  uint64_t v3 = -1 << *(unsigned char *)(v0 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(v0 + 64);
  swift_bridgeObjectRetain();
  uint64_t v6 = 0;
  while (1)
  {
    while (1)
    {
      if (v5)
      {
        unint64_t v7 = __clz(__rbit64(v5));
        v5 &= v5 - 1;
        unint64_t v8 = v7 | (v6 << 6);
      }
      else
      {
        if (__OFADD__(v6, 1)) {
          goto LABEL_40;
        }
        sub_100024130();
        if (v9 == v10)
        {
LABEL_37:
          sub_100023380();
          return;
        }
        sub_100021D5C();
        if (!v12)
        {
          sub_100024468();
          if (v9 == v10) {
            goto LABEL_37;
          }
          sub_100028D48();
          if (!v12)
          {
            sub_100024468();
            if (v9 == v10) {
              goto LABEL_37;
            }
            sub_100028D48();
            if (!v12)
            {
              sub_100024468();
              if (v9 == v10) {
                goto LABEL_37;
              }
              sub_100028D48();
              if (!v12)
              {
                sub_100024130();
                if (v9 == v10) {
                  goto LABEL_37;
                }
                unint64_t v12 = *(void *)(v0 + 64 + 8 * v13);
                if (!v12)
                {
                  while (!__OFADD__(v13, 1))
                  {
                    sub_100024468();
                    if (v9 == v10) {
                      goto LABEL_37;
                    }
                    sub_100028254();
                    if (v12) {
                      goto LABEL_31;
                    }
                  }
                  goto LABEL_41;
                }
                uint64_t v11 = v13;
              }
            }
          }
        }
LABEL_31:
        unint64_t v5 = (v12 - 1) & v12;
        unint64_t v8 = __clz(__rbit64(v12)) + (v11 << 6);
        uint64_t v6 = v11;
      }
      uint64_t v14 = (uint64_t *)(*(void *)(v0 + 48) + 16 * v8);
      uint64_t v16 = *v14;
      uint64_t v15 = v14[1];
      unsigned int v17 = *(void **)(*(void *)(v0 + 56) + 8 * v8);
      swift_bridgeObjectRetain();
      id v18 = v17;
      unint64_t v19 = sub_1000287F0(v16, v15);
      unint64_t v20 = v19;
      if ((v21 & 1) == 0) {
        break;
      }
      id v22 = (uint64_t *)(v2[6] + 16 * v19);
      swift_bridgeObjectRelease();
      uint64_t *v22 = v16;
      v22[1] = v15;
      uint64_t v23 = v2[7];

      *(void *)(v23 + 8 * v20) = v18;
    }
    if (v2[2] >= v2[3]) {
      break;
    }
    *(void *)((char *)v2 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v19;
    uint64_t v24 = (uint64_t *)(v2[6] + 16 * v19);
    *uint64_t v24 = v16;
    v24[1] = v15;
    *(void *)(v2[7] + 8 * v19) = v18;
    uint64_t v25 = v2[2];
    BOOL v10 = __OFADD__(v25, 1);
    uint64_t v26 = v25 + 1;
    if (v10) {
      goto LABEL_39;
    }
    v2[2] = v26;
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
}

void sub_10000B788()
{
  sub_10000DFE0();
  uint64_t v3 = v0;
  int v34 = v4;
  uint64_t v5 = type metadata accessor for SessionTokens(0);
  uint64_t v6 = sub_100016544(v5);
  __chkstk_darwin(v6);
  sub_100024A64();
  uint64_t v9 = v7 - v8;
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = &v33[-v12];
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = &v33[-v15];
  uint64_t v17 = __chkstk_darwin(v14);
  unint64_t v19 = &v33[-v18];
  __chkstk_darwin(v17);
  sub_1000296AC();
  sub_100020C48();
  __chkstk_darwin(v20);
  sub_100028CA0();
  char v21 = *(void **)(v3 + 48);
  *uint64_t v2 = v21;
  sub_100023D14();
  v22();
  id v23 = v21;
  LOBYTE(v21) = _dispatchPreconditionTest(_:)();
  sub_1000292E0();
  v24();
  if (v21)
  {
    uint64_t v25 = *(void *)(v3 + 16);
    if (!v25)
    {
      sub_100017F00();
      sub_10001C20C(v3 + 96, (uint64_t)v36);
      sub_10001B620(v36, v37);
      sub_100017F00();
      swift_retain();
      sub_10000EFCC(v9);
      swift_release();
      BOOL v27 = sub_100004248(v9);
      sub_100027C78(v9, (void (*)(void))type metadata accessor for SessionTokens);
      if (v27)
      {
        sub_10001CA50((uint64_t)v36);
        char v28 = v34;
      }
      else
      {
        char v28 = v34;
        if ((v34 & 1) == 0)
        {
          sub_10001CA50((uint64_t)v36);
          goto LABEL_17;
        }
        char v32 = *(unsigned char *)(v3 + 152);
        sub_10001CA50((uint64_t)v36);
        if ((v32 & 1) == 0) {
          goto LABEL_17;
        }
      }
      sub_100008BE8(v28 & 1);
LABEL_17:
      sub_10000DFB8();
      return;
    }
    sub_10002D8D8(v25 + OBJC_IVAR____TtC7parsecd13ClientSession_tokens, (uint64_t)v19);
    sub_100008A60((uint64_t)v19, v1);
    sub_100017F00();
    sub_10001C20C(v3 + 96, (uint64_t)v36);
    sub_10001B620(v36, v37);
    BOOL v26 = sub_100004248(v1);
    sub_10002D8D8(v1, (uint64_t)v16);
    if (v26)
    {
      sub_100027C78((uint64_t)v16, (void (*)(void))type metadata accessor for SessionTokens);
      sub_10001CA50((uint64_t)v36);
    }
    else
    {
      sub_10002D8D8((uint64_t)v16, (uint64_t)v13);
      if ((v34 & 1) == 0)
      {
        sub_100027C78((uint64_t)v13, (void (*)(void))type metadata accessor for SessionTokens);
        sub_100027C78((uint64_t)v16, (void (*)(void))type metadata accessor for SessionTokens);
        sub_10001CA50((uint64_t)v36);
        goto LABEL_16;
      }
      sub_10001C20C(v3 + 96, (uint64_t)v35);
      sub_10001B620(v35, v35[3]);
      BOOL v29 = sub_1000E9108((uint64_t)v13);
      sub_100027C78((uint64_t)v13, (void (*)(void))type metadata accessor for SessionTokens);
      uint64_t v30 = sub_100023D58();
      sub_100027C78(v30, v31);
      sub_10001CA50((uint64_t)v35);
      sub_10001CA50((uint64_t)v36);
      if (!v29) {
        goto LABEL_16;
      }
    }
    sub_1000E7154(5, 0);
LABEL_16:
    sub_100027C78(v1, (void (*)(void))type metadata accessor for SessionTokens);
    goto LABEL_17;
  }
  __break(1u);
}

Class sub_10000BB48(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  uint64_t v3 = v1(v2);
  swift_release();
  if (v3)
  {
    sub_100023FA0(0, (unint64_t *)&qword_10021EF70);
    v4.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v4.super.Class isa = 0;
  }

  return v4.super.isa;
}

uint64_t sub_10000BBE4()
{
  sub_10000BC18();

  return _swift_deallocClassInstance(v0, 88, 7);
}

uint64_t sub_10000BC18()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

void sub_10000BC58(void *a1)
{
  uint64_t v3 = type metadata accessor for Client();
  sub_100020C48();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  sub_100024F80();
  sub_100030034(a1);
  Client.init(_:)();
  uint64_t v7 = Client.name.getter();
  uint64_t v9 = v8;
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v1, v3);
  uint64_t v10 = (void *)kPARFeedbackSessionFileCreationEvent;
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v7;
  *(void *)(v11 + 24) = v9;
  aBlock[4] = sub_100031DBC;
  aBlock[5] = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10000BB48;
  aBlock[3] = &unk_1001FB848;
  uint64_t v12 = _Block_copy(aBlock);
  id v13 = v10;
  swift_release();
  sub_10002819C();
  AnalyticsSendEventLazy();
  _Block_release(v12);
}

void sub_10000BDB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v9 = sub_10002572C(&qword_10021BF30);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100017C74();
  sub_100018148(0, 0);
  uint64_t v12 = (void *)sub_100016A0C();
  swift_unknownObjectRelease();
  if (!v12) {
    goto LABEL_3;
  }
  id v13 = v12;
  uint64_t v14 = UserAgent.fullString.getter();
  uint64_t v16 = v15;
  id v17 = objc_allocWithZone((Class)PARBag);
  id v18 = sub_10001519C(v13, v14, v16);
  LODWORD(v16) = [v18 feedbackEnabled];

  if (v16)
  {
LABEL_3:
    objc_msgSend(a5, "whichContained_Feedback");
    sub_10000B788();
    if (*(unsigned char *)(a4 + 88) == 1)
    {
      uint64_t v37 = a3;
      uint64_t v38 = v5;
      swift_beginAccess();
      uint64_t v19 = *(void *)(a4 + 120);
      uint64_t v20 = sub_10001B620((void *)(a4 + 96), v19);
      uint64_t v21 = *(void *)(v19 - 8);
      __chkstk_darwin(v20);
      id v23 = (char *)&v36 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v21 + 16))(v23);
      type metadata accessor for ClientSessionTimekeeper();
      Date.timeIntervalSinceNow.getter();
      BOOL v25 = v24 <= 0.0;
      (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v19);
      uint64_t v26 = (4 * v25);
      unint64_t v27 = (unint64_t)objc_msgSend(a5, "whichContained_Feedback");
      if (v27 > 0xC)
      {
        a3 = v37;
      }
      else
      {
        a3 = v37;
        if (((1 << v27) & 0x1900) != 0)
        {
          id v28 = [a5 resultEngagementFeedback];
          if (v28
            && (BOOL v29 = v28, v30 = [v28 result], v29, v30))
          {
            unsigned int v31 = [v30 type];

            if (v31 - 15 >= 3) {
              uint64_t v26 = 5;
            }
            else {
              uint64_t v26 = v26;
            }
          }
          else
          {
            uint64_t v26 = 5;
          }
        }
      }
    }
    else
    {
      uint64_t v26 = 0;
    }
    uint64_t v32 = type metadata accessor for UserAgent();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v32 - 8) + 16))(v11, a3, v32);
    sub_10002538C((uint64_t)v11, 0, 1, v32);
    sub_10000FDFC((uint64_t)a5, (uint64_t)v11, v26);
    sub_1000E97F8((uint64_t)v11, &qword_10021BF30);
    uint64_t v33 = a4 + 96;
    swift_beginAccess();
    uint64_t v35 = *(void *)(a4 + 120);
    uint64_t v34 = *(void *)(a4 + 128);
    sub_10002E598(v33, v35);
    (*(void (**)(uint64_t, uint64_t))(v34 + 104))(v35, v34);
    swift_endAccess();
  }
}

id sub_10000C184()
{
  self;
  uint64_t v0 = swift_dynamicCastObjCClass();
  if (!v0) {
    return 0;
  }
  uint64_t v1 = (void *)v0;
  swift_unknownObjectRetain();
  id v2 = [v1 isRefreshDisabled];
  if (v2)
  {
    if (qword_100218B20 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_10002A10C(v3, (uint64_t)qword_100236978);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Bag refresh is disabled", v6, 2u);
      swift_slowDealloc();
    }
  }
  swift_unknownObjectRelease();
  return v2;
}

void sub_10000C2BC()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  os_log_type_t v5 = &v16[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  id v6 = *(id *)(swift_unknownObjectUnownedLoadStrong() + 256);
  swift_unknownObjectRelease();
  *os_log_type_t v5 = v6;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  char v7 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v3 + 8))(v5, v2);
  if (v7)
  {
    uint64_t v8 = OBJC_IVAR____TtC7parsecd13ClientSession_fulfilled;
    if ((*(unsigned char *)(v1 + OBJC_IVAR____TtC7parsecd13ClientSession_fulfilled) & 1) == 0)
    {
      sub_100031DCC();
      uint64_t Strong = (void *)swift_unknownObjectUnownedLoadStrong();
      uint64_t v10 = *(void **)(v1 + OBJC_IVAR____TtC7parsecd13ClientSession_backingStore);
      sub_10003146C(Strong, *(void *)(v1 + 24), v10);
      swift_unknownObjectRelease();
      uint64_t v11 = swift_unknownObjectUnownedLoadStrong();
      uint64_t v12 = *(void *)(v1 + 24);
      uint64_t v13 = v1 + OBJC_IVAR____TtC7parsecd13ClientSession_tokens;
      uint64_t v14 = v1 + OBJC_IVAR____TtC7parsecd13ClientSession_type;
      sub_10001BA80((uint64_t)v16);
      sub_100008DC8(v11, v12, v10, v13, v14, (uint64_t)v16);
      swift_unknownObjectRelease();
      sub_10000D564((uint64_t)v16, &qword_10021C060);
      sub_10000CE44();
      sub_10000BC58(v10);
      *(unsigned char *)(v1 + v8) = 1;
    }
  }
  else
  {
    __break(1u);
  }
}

id sub_10000C4EC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (a4) {
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  }
  else {
    uint64_t ObjCClassFromMetadata = 0;
  }
  id v9 = [v4 initWithStream:v7 config:a3 eventDataClass:ObjCClassFromMetadata];

  return v9;
}

uint64_t sub_10000C574@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v21 = 0;
  long long v20 = xmmword_1001A3D10;
  id v6 = (void *)swift_allocObject();
  v6[2] = &v20;
  v6[3] = a1;
  v6[4] = a2;
  v6[5] = &v21;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = sub_100030BA8;
  *(void *)(v7 + 24) = v6;
  v19[4] = sub_100017874;
  v19[5] = v7;
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 1107296256;
  v19[2] = sub_100017848;
  v19[3] = &unk_1001FBA10;
  uint64_t v8 = _Block_copy(v19);
  swift_retain();
  swift_release();
  id v9 = (void (*)(void))v8[2];
  uint64_t isEscapingClosureAtFileLocation = v8;
  v9();
  id v11 = 0;
  while (1)
  {

    id v12 = v11;
    _Block_release((const void *)isEscapingClosureAtFileLocation);
    uint64_t isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    uint64_t v13 = (void *)swift_release();
    if (isEscapingClosureAtFileLocation)
    {
      __break(1u);
      goto LABEL_11;
    }
    if (v12)
    {
      id v14 = v12;
      Incident.reportTelemetry()();
      sub_10004B198();
      swift_allocError();
      *(void *)uint64_t v15 = v12;
      *(void *)(v15 + 8) = 0;
      *(unsigned char *)(v15 + 16) = 0;
      swift_willThrow();

LABEL_7:
      sub_10000A330(v20, *((unint64_t *)&v20 + 1));
      swift_errorRelease();
      return swift_release();
    }
    if (v21)
    {
      swift_errorRetain();
      swift_willThrow();
      goto LABEL_7;
    }
    uint64_t v17 = *((void *)&v20 + 1);
    if (*((void *)&v20 + 1) >> 60 != 15) {
      break;
    }
LABEL_11:
    __break(1u);
    id v11 = objc_begin_catch(v13);
    objc_end_catch();
  }
  uint64_t v18 = v20;
  uint64_t result = swift_release();
  *a3 = v18;
  a3[1] = v17;
  return result;
}

uint64_t sub_10000C7D0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_10002572C(&qword_10021BB20);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for URL();
  sub_100020C48();
  uint64_t v10 = v9;
  __chkstk_darwin(v11);
  sub_100017DE0();
  if ((static SessionDBFeatureFlags.uploadFromFlag.getter() & 1) != 0
    || (uint64_t Strong = swift_unknownObjectWeakLoadStrong()) == 0)
  {
    type metadata accessor for SessionFileCreationError();
    sub_100019B00(&qword_100219718, (void (*)(uint64_t))type metadata accessor for SessionFileCreationError);
    uint64_t v17 = sub_10002C3D4();
    sub_10002A5E4(v17, v18);
    swift_storeEnumTagMultiPayload();
    return swift_willThrow();
  }
  else
  {
    v21[1] = Strong;
    type metadata accessor for SessionFilename();
    swift_allocObject();
    swift_bridgeObjectRetain();
    char v22 = 1;
    if (SessionFilename.init(fromUserGUID:state:processID:uploadPending:)(a1, a2, 0, 0x100000000, 0))
    {
      id v13 = [self defaultManager];
      NSFileManager.parsecdSessionFBDirectoryURL.getter();

      if (sub_100027BA4((uint64_t)v7, 1, v8) == 1)
      {
        sub_10003CB40((uint64_t)v7);
        type metadata accessor for SessionFileCreationError();
        sub_100019B00(&qword_100219718, (void (*)(uint64_t))type metadata accessor for SessionFileCreationError);
        uint64_t v14 = sub_10002C3D4();
        sub_10002A5E4(v14, v15);
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        swift_unknownObjectRelease();
        return swift_release();
      }
      else
      {
        (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v2, v7, v8);
        SessionFilename.filenameString.getter();
        URL.appendingPathComponent(_:)();
        swift_unknownObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        return (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(v2, v8);
      }
    }
    else
    {
      type metadata accessor for SessionFileCreationError();
      sub_100019B00(&qword_100219718, (void (*)(uint64_t))type metadata accessor for SessionFileCreationError);
      uint64_t v19 = sub_10002C3D4();
      sub_10002A5E4(v19, v20);
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      return swift_unknownObjectRelease();
    }
  }
}

void sub_10000CB40()
{
  sub_10000DFE0();
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = (uint64_t *)type metadata accessor for DispatchPredicate();
    sub_100020C48();
    uint64_t v6 = v5;
    __chkstk_darwin(v7);
    sub_100017DC8();
    uint64_t v8 = *(void **)(swift_unknownObjectUnownedLoadStrong() + 256);
    id v9 = v3;
    id v10 = v8;
    swift_unknownObjectRelease();
    void *v1 = v10;
    (*(void (**)(void *, void, uint64_t *))(v6 + 104))(v1, enum case for DispatchPredicate.onQueue(_:), v4);
    char v11 = _dispatchPreconditionTest(_:)();
    (*(void (**)(void *, uint64_t *))(v6 + 8))(v1, v4);
    if ((v11 & 1) == 0) {
      goto LABEL_26;
    }
    if ((*(unsigned char *)(v0 + OBJC_IVAR____TtC7parsecd13ClientSession_fulfilled) & 1) == 0
      && (id v12 = [v9 codable]) != 0
      && (id v13 = v12, self, v14 = swift_dynamicCastObjCClass(), v13, v14))
    {
      sub_10000DCF0();
      uint64_t v15 = (void *)(v0 + OBJC_IVAR____TtC7parsecd13ClientSession_connectionInvalidationFeedbacks);
      swift_beginAccess();
      v9;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      sub_100030220(*(void *)((*v15 & 0xFFFFFFFFFFFFFF8) + 0x10));
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_endAccess();
    }
    else
    {
      uint64_t v4 = (uint64_t *)(v0 + OBJC_IVAR____TtC7parsecd13ClientSession_connectionInvalidationFeedbacks);
      swift_beginAccess();
      if ((unint64_t)*v4 >> 62) {
        goto LABEL_27;
      }
      if (*(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        do
        {
          uint64_t v16 = *v4;
          id v24 = v9;
          if ((unint64_t)*v4 >> 62)
          {
            sub_1000253D4();
            uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
            if (!v17)
            {
LABEL_21:
              swift_bridgeObjectRelease();
              *uint64_t v4 = (uint64_t)_swiftEmptyArrayStorage;
              swift_bridgeObjectRelease();
              id v9 = v24;
              break;
            }
          }
          else
          {
            uint64_t v17 = *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
            swift_bridgeObjectRetain();
            if (!v17) {
              goto LABEL_21;
            }
          }
          uint64_t v18 = 4;
          while (1)
          {
            id v19 = (v16 & 0xC000000000000001) != 0
                ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
                : *(id *)(v16 + 8 * v18);
            uint64_t v20 = v19;
            id v9 = (id)(v18 - 3);
            if (__OFADD__(v18 - 4, 1)) {
              break;
            }
            char v21 = sub_10000E368(v19);

            ++v18;
            if ((v21 - 1) < 2u || v9 == (id)v17) {
              goto LABEL_21;
            }
          }
          __break(1u);
LABEL_26:
          __break(1u);
LABEL_27:
          sub_1000253D4();
          uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        while (v23);
      }
      sub_10000E368(v9);
    }
  }
  sub_10000DFB8();
}

void sub_10000CE44()
{
  uint64_t v0 = (void *)sub_100013ABC();
  uint64_t v16 = (void *)sub_10002572C(qword_1002199B8);
  aBlock[0] = v0;
  uint64_t v1 = static JSONSerializationUtil.data(withJSONObject:options:)(aBlock, 0);
  unint64_t v3 = v2;
  sub_10001CA50((uint64_t)aBlock);
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v1;
  *(void *)(v4 + 24) = v3;
  uint64_t v5 = self;
  sub_100027BCC(v1, v3);
  NSString v6 = String._bridgeToObjectiveC()();
  uint64_t v17 = sub_100031DC4;
  uint64_t v18 = v4;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_100006748;
  uint64_t v16 = &unk_1001FB898;
  uint64_t v7 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  id v8 = [v5 createForSubmission:v6 metadata:0 options:0 error:aBlock writing:v7];
  _Block_release(v7);

  id v9 = aBlock[0];
  if (v8)
  {

    sub_1000291B4(v1, v3);
    swift_release();
  }
  else
  {
    id v10 = v9;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    if (qword_100218B40 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_10002A10C(v11, (uint64_t)qword_1002369D8);
    id v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Error registering session file with OSAnalytics.", v14, 2u);
      sub_100017D40();
      swift_errorRelease();
      swift_release();

      sub_1000291B4(v1, v3);
    }
    else
    {
      sub_1000291B4(v1, v3);
      swift_release();
      swift_errorRelease();
    }
  }
}

void sub_10000D134(uint64_t a1)
{
  if (sub_10000D930(a1))
  {
    static os_log_type_t.debug.getter();
    sub_10002572C((uint64_t *)&unk_10021BB00);
    uint64_t v1 = swift_allocObject();
    *(_OWORD *)(v1 + 16) = xmmword_1001A3830;
    *(void *)(v1 + 56) = &type metadata for String;
    unint64_t v2 = sub_1000303C8();
    *(void *)(v1 + 64) = v2;
    strcpy((char *)(v1 + 32), "resourceAccess");
    *(unsigned char *)(v1 + 47) = -18;
    sub_10002FF38();
    uint64_t v3 = Dictionary.description.getter();
    *(void *)(v1 + 96) = &type metadata for String;
    *(void *)(v1 + 104) = v2;
    *(void *)(v1 + 72) = v3;
    *(void *)(v1 + 80) = v4;
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();
    v5._countAndFlagsBits = 46;
    v5._object = (void *)0xE100000000000000;
    String.append(_:)(v5);
    v6._countAndFlagsBits = 0x656372756F736572;
    v6._object = (void *)0xEE00737365636341;
    String.append(_:)(v6);
    NSString v7 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    AnalyticsSendEvent();
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_10000D318(uint64_t a1)
{
  unint64_t v2 = v1;
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(v3 + 448);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t result = __chkstk_darwin(a1);
  id v8 = (char *)&v21 - v7;
  if ((v2[81] & 1) == 0)
  {
    id v9 = &v2[*(void *)(v3 + 472)];
    char v22 = *(void (**)(char *, unsigned char *, uint64_t))(v5 + 16);
    v22(v8, v9, v4);
    uint64_t v10 = sub_100025B3C();
    uint64_t v12 = v11(v10);
    os_log_type_t v13 = *(void (**)(uint64_t))(v5 + 8);
    uint64_t v14 = sub_10002A598();
    v13(v14);
    sub_10003214C(v12);
    swift_bridgeObjectRelease();
    sub_10002572C((uint64_t *)&unk_10021BB00);
    uint64_t v15 = swift_allocObject();
    *(_OWORD *)(v15 + 16) = xmmword_1001A2A20;
    v22(v8, v9, v4);
    uint64_t v16 = sub_100025B3C();
    uint64_t v18 = v17(v16);
    uint64_t v19 = sub_10002A598();
    v13(v19);
    *(void *)(v15 + 56) = &type metadata for Int;
    *(void *)(v15 + 64) = &protocol witness table for Int;
    *(void *)(v15 + 32) = v18;
    sub_100032150("bytesWritten=%{signpost.description:attribute,public}llu", 56, 2, v15);
    swift_bridgeObjectRelease();
    uint64_t v20 = *(os_unfair_lock_s **)(*(void *)&v2[*(void *)(*(void *)v2 + 152)] + 16);
    swift_retain();
    os_unfair_lock_lock(v20);
    if ((v2[81] & 1) == 0) {
      sub_100015DF0();
    }
    os_unfair_lock_unlock(v20);
    return swift_release();
  }
  return result;
}

uint64_t sub_10000D564(uint64_t a1, uint64_t *a2)
{
  sub_10002572C(a2);
  sub_10000E060();
  uint64_t v3 = sub_1000253C4();
  v4(v3);
  return a1;
}

uint64_t SessionFilename.filenameString.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  sub_100020C48();
  uint64_t v4 = v3;
  __chkstk_darwin(v5);
  sub_10000DFD0();
  uint64_t v8 = v7 - v6;
  sub_10002572C(&qword_10021ACF8);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_1001A3750;
  sub_100027F44();
  *(void *)(v10 + 32) = v11;
  *(void *)(v10 + 40) = 0xE700000000000000;
  sub_10002845C();
  *(void *)(v9 + 48) = dispatch thunk of CustomStringConvertible.description.getter();
  *(void *)(v9 + 56) = v12;
  uint64_t v13 = v0 + OBJC_IVAR____TtC7parsecd15SessionFilename_sessionID;
  sub_10002845C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v8, v13, v2);
  uint64_t v14 = UUID.uuidString.getter();
  uint64_t v16 = v15;
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v8, v2);
  *(void *)(v9 + 64) = v14;
  *(void *)(v9 + 72) = v16;
  uint64_t v17 = (unsigned char *)(v1 + OBJC_IVAR____TtC7parsecd15SessionFilename_state);
  sub_10002845C();
  unint64_t v18 = 0xE400000000000000;
  uint64_t v19 = 1852141679;
  switch(*v17)
  {
    case 1:
      unint64_t v18 = 0xE600000000000000;
      uint64_t v19 = 0x6465736F6C63;
      break;
    case 2:
      unint64_t v18 = 0xEA0000000000676ELL;
      uint64_t v19 = 0x69737365636F7270;
      break;
    case 3:
      unint64_t v18 = 0xE800000000000000;
      uint64_t v19 = 0x646564616F6C7075;
      break;
    default:
      break;
  }
  *(void *)(v9 + 80) = v19;
  *(void *)(v9 + 88) = v18;
  sub_10002572C(&qword_100219B08);
  sub_100020DBC();
  uint64_t v20 = BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  return v20;
}

uint64_t sub_10000D7D4(uint64_t a1)
{
  uint64_t v2 = sub_100006164((uint64_t)&unk_100201370);
  if (!a1) {
    return 0;
  }
  uint64_t v4 = v2;
  uint64_t v5 = v3;
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 16);
  swift_bridgeObjectRetain();
  uint64_t v7 = v6(v4, v5);
  uint64_t v9 = v8;
  Class isa = UInt._bridgeToObjectiveC()().super.super.isa;
  swift_isUniquelyReferenced_nonNull_native();
  sub_100028570((uint64_t)isa, v7, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v4, v5);
  uint64_t v13 = v12;
  sub_10000A344();
  Class v14 = Double._bridgeToObjectiveC()().super.super.isa;
  swift_isUniquelyReferenced_nonNull_native();
  sub_100028570((uint64_t)v14, v11, v13);
  uint64_t v15 = a1;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t sub_10000D930(uint64_t a1)
{
  uint64_t v2 = sub_100006164((uint64_t)&type metadata for ResourceAccessActivity);
  if (!a1) {
    return 0;
  }
  uint64_t v4 = v2;
  uint64_t v5 = v3;
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 16);
  swift_bridgeObjectRetain();
  uint64_t v7 = v6(v4, v5);
  uint64_t v9 = v8;
  Class isa = UInt._bridgeToObjectiveC()().super.super.isa;
  swift_isUniquelyReferenced_nonNull_native();
  sub_100028570((uint64_t)isa, v7, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v4, v5);
  uint64_t v13 = v12;
  sub_10000A344();
  Class v14 = Double._bridgeToObjectiveC()().super.super.isa;
  swift_isUniquelyReferenced_nonNull_native();
  sub_100028570((uint64_t)v14, v11, v13);
  uint64_t v15 = a1;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t sub_10000DA94(uint64_t a1)
{
  sub_100017E10();
  uint64_t v4 = *(os_unfair_lock_s **)(*(void *)(v1 + *(void *)(v3 + 152)) + 16);
  swift_retain();
  os_unfair_lock_lock(v4);
  *(void *)(v1 + 48) = a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  os_unfair_lock_unlock(v4);

  return swift_release();
}

uint64_t sub_10000DB20(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  sub_100017E10();
  uint64_t v10 = *(os_unfair_lock_s **)(*(void *)(v4 + *(void *)(v9 + 152)) + 16);
  swift_retain();
  os_unfair_lock_lock(v10);
  *(void *)(v4 + 24) = a1;
  *(void *)(v4 + 32) = a2;
  *(unsigned char *)(v4 + 40) = a3;
  *(unsigned char *)(v4 + 41) = 0;
  *(void *)(v4 + 56) = a4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  os_unfair_lock_unlock(v10);

  return swift_release();
}

uint64_t sub_10000DBCC()
{
  sub_10001DD48();
  sub_100026880();
  uint64_t v3 = v2;
  sub_100017DB0();
  *uint64_t v4 = v3;
  uint64_t v5 = *v1;
  sub_100017DB0();
  *uint64_t v6 = v5;
  *(void *)(v3 + 112) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_100102A8C, 0, 0);
  }
  else
  {
    swift_unknownObjectRelease();
    swift_release();
    sub_10000E1BC();
    return v7();
  }
}

void sub_10000DCF0()
{
  sub_10000DFE0();
  uint64_t v4 = v3;
  uint64_t v5 = sub_10002572C((uint64_t *)&unk_10021E630);
  uint64_t v6 = sub_100016544(v5);
  __chkstk_darwin(v6);
  sub_10000E074();
  uint64_t v7 = type metadata accessor for Logger();
  sub_100020C48();
  uint64_t v9 = v8;
  __chkstk_darwin(v10);
  sub_100016500();
  sub_100008B84(v0 + OBJC_IVAR____TtC7parsecd13ClientSession_tailLog, v2, (uint64_t *)&unk_10021E630);
  if (sub_100027BA4(v2, 1, v7) == 1)
  {
    sub_10000D564(v2, (uint64_t *)&unk_10021E630);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v1, v2, v7);
    sub_10004A06C();
    if (v12)
    {
      uint64_t v13 = v11;
      unint64_t v14 = v12;
      swift_retain_n();
      swift_bridgeObjectRetain();
      uint64_t v15 = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v15, v16))
      {
        uint64_t v24 = v13;
        uint64_t v17 = swift_slowAlloc();
        uint64_t v25 = sub_100023E3C();
        *(_DWORD *)uint64_t v17 = 136315394;
        sub_10002CD30();
        sub_10004A48C((unint64_t *)&qword_10021CC60, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v20 = sub_10001C274(v18, v19, &v25);
        sub_1000283E0(v20);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v17 + 12) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v21 = sub_10001C274(v24, v14, &v25);
        sub_1000240B4(v21);
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v15, v16, v4, (uint8_t *)v17, 0x16u);
        sub_100021C60();
        sub_100017D40();
        sub_100017D40();
      }
      else
      {

        swift_bridgeObjectRelease_n();
        swift_release_n();
      }
    }
    uint64_t v22 = sub_10002819C();
    v23(v22);
  }
  sub_10000DFB8();
}

uint64_t sub_10000DFF8()
{
  return *(void *)v0;
}

uint64_t sub_10000E010(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t result = *v10;
  *uint64_t v10 = a10;
  return result;
}

void sub_10000E020(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 176) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_10000E074()
{
  return 0;
}

uint64_t sub_10000E09C()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_10000E0C4()
{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

uint64_t sub_10000E0E0(uint64_t result)
{
  *(void *)(v2 + 16) = v1;
  *(void *)(v2 + 24) = 2 * ((result - 32) / v3);
  return result;
}

uint64_t sub_10000E10C()
{
  return swift_beginAccess();
}

void sub_10000E130(void *a1, NSObject *a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, a2, v4, a4, v5, 2u);
}

uint64_t sub_10000E14C()
{
  return v0;
}

uint64_t sub_10000E164()
{
  return v0;
}

id sub_10000E194(uint64_t a1, const char *a2)
{
  return objc_msgSend(v2, a2, 0);
}

uint64_t sub_10000E1AC()
{
  return v0;
}

uint64_t sub_10000E1BC()
{
  return v0 + 8;
}

void sub_10000E1CC()
{
  uint64_t v2 = *(os_unfair_lock_s **)(*(void *)(v0 + 32) + 16);
  os_unfair_lock_lock(v2);
}

uint64_t sub_10000E1F0()
{
  return v0;
}

void sub_10000E234(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)(a1 + 16) = (a2 - 32) | 0x8000000000000000;
  *(unsigned char *)(a1 + 24) = 0;
}

uint64_t sub_10000E248()
{
  return swift_allocObject();
}

void *sub_10000E260(uint64_t a1, uint64_t a2, uint64_t a3, void *(*a4)(uint64_t *__return_ptr, void *, char *))
{
  return sub_10016E44C(v4, v6, v5, a4);
}

uint64_t sub_10000E284(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_100093A68(v9, v15, v10, v16, v13, v12, v11, v14, a9);
}

uint64_t sub_10000E2BC()
{
  return v0;
}

uint64_t sub_10000E2D4(uint64_t a1, unsigned char *a2)
{
  *a2 = 3;
  return swift_willThrow();
}

uint64_t sub_10000E308()
{
  return sub_100027528();
}

uint64_t sub_10000E368(void *a1)
{
  uint64_t v2 = v1;
  sub_10000C2BC();
  id v4 = [a1 codable];
  if (v4)
  {
    uint64_t v5 = v4;
    id v6 = [v4 timestamp];

    if (!v6)
    {
      id v7 = [a1 codable];
      if (v7)
      {
        uint64_t v8 = v7;
        [v7 setTimestamp:mach_absolute_time()];
      }
    }
  }
  sub_10000DCF0();
  uint64_t Strong = (void *)swift_unknownObjectUnownedLoadStrong();
  if (object_getClass(Strong) != (Class)_TtC7parsecd8Assembly || Strong == 0)
  {
    swift_unknownObjectRelease();
  }
  else
  {
    uint64_t v11 = Strong[2];
    swift_retain();
    swift_unknownObjectRelease();
    if (v11)
    {
      type metadata accessor for SessionTokens(0);
      sub_100069630(a1);
      swift_release();
    }
  }
  sub_100006290();
  sub_10001BA80((uint64_t)v21);
  uint64_t v12 = v22;
  uint64_t v13 = v23;
  sub_10001B620(v21, v22);
  type metadata accessor for RawPayload();
  sub_100023FA0(0, &qword_10021CD30);
  id v14 = a1;
  id v15 = RawPayload.__allocating_init<A>(with:)(v14);
  type metadata accessor for SessionTokens(0);
  uint64_t v16 = UUID.uuidString.getter();
  (*(void (**)(id, uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 16))(v15, v16, v17, v12, v13);

  swift_bridgeObjectRelease();
  sub_10001CA50((uint64_t)v21);
  if (!*(void *)(v2 + 32)) {
    return 3;
  }
  uint64_t v18 = *(void *)(v2 + 40);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(id, uint64_t, uint64_t))(v18 + 16))(v14, ObjectType, v18);
}

uint64_t sub_10000E5B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v7 = *(os_unfair_lock_s **)(a1 + 16);
  os_unfair_lock_lock(v7);
  swift_beginAccess();
  uint64_t v8 = *(void *)(a2 + 104);
  if (*(void *)(v8 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v9 = sub_1000287F0(a3, a4);
    if (v10)
    {
      uint64_t v11 = *(void *)(*(void *)(v8 + 56) + 8 * v9);
      swift_retain();
    }
    else
    {
      uint64_t v11 = 0;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v11 = 0;
  }
  os_unfair_lock_unlock(v7);
  swift_bridgeObjectRelease();
  swift_release();
  return v11;
}

uint64_t sub_10000E68C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = v3;
  *(void *)(v5 + 24) = 0;
  swift_unknownObjectWeakInit();
  type metadata accessor for URL();
  sub_10002947C();
  sub_10002538C(v9, v10, v11, v12);
  *(void *)(v5 + OBJC_IVAR____TtC7parsecd10FileWriter_maxFileSize) = 0x200000;
  *(void *)(v5 + OBJC_IVAR____TtC7parsecd10FileWriter_closingBufferSize) = 0x40000;
  uint64_t v13 = OBJC_IVAR____TtC7parsecd10FileWriter_writeTx;
  *(void *)(v5 + v13) = os_transaction_create();
  *(void *)(v5 + OBJC_IVAR____TtC7parsecd10FileWriter_eventWriteSpan) = 0;
  *(void *)(v5 + OBJC_IVAR____TtC7parsecd10FileWriter_fileHandle) = 0;
  *(void *)(v5 + 24) = a2;
  swift_unknownObjectWeakAssign();
  id v14 = *(void **)(a1 + 256);
  *(void *)(v5 + 32) = v14;
  id v15 = v14;
  sub_100017C74();
  sub_100018148(0, 0);
  uint64_t v16 = (void *)sub_100016A0C();
  swift_unknownObjectRelease();
  if (!v16)
  {
LABEL_4:
    uint64_t v19 = sub_100013C38(a3, (SEL *)&selRef_userGuidString);
    if (v20)
    {
      sub_100005F98(a1, v20, v19, v20);
      swift_bridgeObjectRelease();
      if (!v4)
      {
        sub_10000937C(a3);
        uint64_t v29 = sub_100010DE0();
        sub_10002572C(&qword_100219720);
        swift_allocObject();
        sub_1000068C0(v29, 2, 0);
        uint64_t v31 = v30;
        swift_unknownObjectRelease();

        *(void *)(v5 + OBJC_IVAR____TtC7parsecd10FileWriter_eventWriteSpan) = v31;
        swift_release();
        return v5;
      }
      swift_release();
    }
    else
    {
      swift_release();
      type metadata accessor for SessionFileCreationError();
      sub_100019ABC(&qword_100219718, (void (*)(uint64_t))type metadata accessor for SessionFileCreationError);
      sub_100019B48();
      swift_allocError();
      uint64_t v22 = v21;
      uint64_t v23 = sub_100013C38(a3, (SEL *)&selRef_agent);
      if (v24) {
        uint64_t v25 = v23;
      }
      else {
        uint64_t v25 = 0;
      }
      if (v24) {
        unint64_t v26 = v24;
      }
      else {
        unint64_t v26 = 0xE000000000000000;
      }
      unint64_t v27 = sub_10003C8F8(a3);
      if (v27)
      {
        if (v27 >> 62) {
          uint64_t v28 = _CocoaArrayWrapper.endIndex.getter();
        }
        else {
          uint64_t v28 = *(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v28 = 0;
      }
      uint64_t *v22 = v25;
      v22[1] = v26;
      v22[2] = v28;
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
    }
    swift_unknownObjectRelease();

    return v5;
  }
  NSString v17 = String._bridgeToObjectiveC()();
  unint64_t v18 = (unint64_t)[v16 maximumSizeForFeedbackType:v17];

  if ((v18 & 0x8000000000000000) == 0)
  {
    *(void *)(v5 + OBJC_IVAR____TtC7parsecd10FileWriter_maxFileSize) = v18;
    goto LABEL_4;
  }
  sub_100024270();
  sub_100021C48();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void BiomeDatabaseWriter.addSession(_:sessionId:type:)()
{
  sub_100017EC4();
  uint64_t v3 = v2;
  uint64_t v41 = v4;
  id v6 = v5;
  uint64_t v7 = sub_10002572C(&qword_10021BB10);
  __chkstk_darwin(v7 - 8);
  sub_10000E04C();
  uint64_t v40 = v8;
  uint64_t v9 = type metadata accessor for Date();
  sub_10001DCF8();
  __chkstk_darwin(v10);
  sub_10000E04C();
  uint64_t v38 = v11;
  uint64_t v12 = type metadata accessor for SessionType();
  sub_100020C48();
  uint64_t v14 = v13;
  uint64_t v16 = __chkstk_darwin(v15);
  __chkstk_darwin(v16);
  unint64_t v18 = (uint64_t *)((char *)&v36 - v17);
  id v39 = v6;
  if (sub_10003014C(*(void *)&v6[OBJC_IVAR___SRRawPayload_data], *(void *)&v6[OBJC_IVAR___SRRawPayload_data + 8]))
  {
    sub_10018FF34();
    sub_100024A30();
    *uint64_t v19 = xmmword_1001AF6A0;
LABEL_5:
    swift_willThrow();
    goto LABEL_6;
  }
  uint64_t v36 = v3;
  uint64_t v37 = v0;
  uint64_t v20 = *(void (**)(void))(v14 + 16);
  sub_100024618();
  v20();
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(v14 + 88))(v18, v12) == enum case for SessionType.unknown(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v14 + 96))(v18, v12);
    uint64_t v21 = *v18;
    uint64_t v22 = v18[1];
    sub_10018FF34();
    sub_100024A30();
    *uint64_t v23 = v21;
    v23[1] = v22;
    goto LABEL_5;
  }
  (*(void (**)(uint64_t *, uint64_t))(v14 + 8))(v18, v12);
  sub_10002DA0C();
  if (!v1)
  {

    sub_100024618();
    v20();
    id v25 = v39;
    swift_bridgeObjectRetain();
    Date.init()();
    sub_10002538C(v40, 1, 1, v9);
    type metadata accessor for SessionFeedback(0);
    swift_allocObject();
    SessionFeedback.init(session:sessionId:type:creationDate:closingDate:)();
    uint64_t v26 = v37;
    sub_100010E78();
    uint64_t v28 = v27;
    uint64_t v29 = (void *)SessionFeedback.getWrappedPayload()();
    unsigned int v30 = [v28 writeEventWithEventBody:v29];

    if (v30)
    {
      sub_10001B620((void *)(v26 + 40), *(void *)(v26 + 64));
      uint64_t v31 = SessionType.clientType.getter();
      sub_100009040(v31);
    }
    else
    {
      if (qword_100224318 != -1) {
        swift_once();
      }
      uint64_t v32 = type metadata accessor for Logger();
      sub_10002A10C(v32, (uint64_t)qword_100236DC8);
      uint64_t v33 = Logger.logObject.getter();
      os_log_type_t v34 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v33, v34))
      {
        uint64_t v35 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v35 = 0;
        _os_log_impl((void *)&_mh_execute_header, v33, v34, "Failed to create new biome session", v35, 2u);
        swift_slowDealloc();
      }
    }
  }
LABEL_6:
  sub_100024A18();
}

void *sub_10000EE00@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v5 = v2;
  uint64_t v8 = type metadata accessor for SessionTokens(0);
  uint64_t v9 = sub_100016544(v8);
  __chkstk_darwin(v9);
  sub_100024ADC();
  type metadata accessor for DispatchPredicate();
  sub_100020C48();
  __chkstk_darwin(v10);
  sub_100025250(v11, v20);
  uint64_t v12 = sub_10002CDE8();
  v13(v12);
  id v14 = v4;
  _dispatchPreconditionTest(_:)();
  uint64_t v15 = sub_10002758C();
  uint64_t result = (void *)v16(v15);
  if (v4)
  {
    if (*(unsigned char *)(v5 + 152) != 1) {
      goto LABEL_6;
    }
    if ((a1 & 1) == 0) {
      goto LABEL_5;
    }
    sub_100017F00();
    sub_10001C20C(v5 + 96, (uint64_t)v21);
    sub_10001B620(v21, v21[3]);
    sub_100017F00();
    swift_retain();
    sub_10000EFCC(v3);
    swift_release();
    BOOL v18 = sub_100005B40(v3);
    sub_100027C78(v3, (void (*)(void))type metadata accessor for SessionTokens);
    sub_10001CA50((uint64_t)v21);
    if (v18)
    {
LABEL_5:
      uint64_t Strong = swift_unknownObjectWeakLoadStrong();
      return sub_10001319C(Strong, a2);
    }
    else
    {
LABEL_6:
      sub_100017F00();
      swift_retain();
      sub_10000EFCC(a2);
      swift_release();
      return (void *)sub_100008BE8(0);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_10000EFCC(uint64_t a1@<X8>)
{
}

void sub_10000EFE4(uint64_t a1, void *a2, void *a3)
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (!Strong) {
    return;
  }
  id v6 = (void *)Strong;
  uint64_t v7 = (unint64_t *)(Strong + OBJC_IVAR____TtC7parsecd13ParsecService_connections);
  swift_beginAccess();
  id v8 = a2;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  sub_100030220(*(void *)((*v7 & 0xFFFFFFFFFFFFFF8) + 0x10));
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  swift_endAccess();
  unsigned int v9 = [a3 processIdentifier];
  unint64_t v10 = *v7;
  if (!(v10 >> 62))
  {
    uint64_t v11 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v11) {
      goto LABEL_4;
    }
LABEL_20:

    swift_bridgeObjectRelease();
    return;
  }
LABEL_19:
  swift_bridgeObjectRetain();
  uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
  if (!v11) {
    goto LABEL_20;
  }
LABEL_4:
  if (v11 < 1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v23 = v6;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    id v6 = (void *)(v10 & 0xC000000000000001);
    do
    {
      if (v6) {
        id v14 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v14 = (char *)*(id *)(v10 + 8 * v13 + 32);
      }
      uint64_t v15 = v14;
      id v16 = *(id *)&v14[OBJC_IVAR____TtC7parsecd16ClientConnection_connection];
      unsigned int v17 = [v16 processIdentifier];

      if (v9 == v17 && __OFADD__(v12++, 1))
      {
        __break(1u);
        goto LABEL_19;
      }
      ++v13;
    }
    while (v11 != v13);
    swift_bridgeObjectRelease();
    if (v12 <= 2) {
      goto LABEL_17;
    }
    if (qword_100218B50 == -1) {
      goto LABEL_14;
    }
  }
  swift_once();
LABEL_14:
  uint64_t v19 = type metadata accessor for Logger();
  sub_10002A10C(v19, (uint64_t)qword_100236A08);
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v22 = 134218240;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v22 + 12) = 1024;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "too many connections %ld from pid %d", (uint8_t *)v22, 0x12u);
    swift_slowDealloc();
  }
  else
  {

LABEL_17:
  }
}

uint64_t sub_10000F2C8(void (*a1)(uint64_t), uint64_t a2, void *a3)
{
  if (qword_100218C60 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_10002A10C(v5, (uint64_t)qword_10021ECF0);
  id v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    id v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Whitelist generation queued", v8, 2u);
    swift_slowDealloc();
  }

  if (a1)
  {
    uint64_t v9 = swift_retain();
    a1(v9);
    sub_1000332CC((uint64_t)a1);
  }
  uint64_t v24 = FlusherClient.invalidationQueue.getter();
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a3;
  aBlock[4] = sub_1000312B0;
  aBlock[5] = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000085EC;
  id aBlock[3] = &unk_100200C38;
  uint64_t v11 = _Block_copy(aBlock);
  uint64_t v12 = type metadata accessor for DispatchQoS();
  v23[1] = v23;
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v16 = a3;
  static DispatchQoS.unspecified.getter();
  uint64_t v17 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)v23 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v25 = _swiftEmptyArrayStorage;
  sub_10003045C();
  sub_10002572C((uint64_t *)&unk_10021BAF0);
  sub_1000301A0();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  os_log_type_t v21 = (void *)v24;
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v11);

  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  return swift_release();
}

void sub_10000F62C()
{
  sub_10000DFE0();
  uint64_t v3 = v0;
  LODWORD(v70) = v4;
  type metadata accessor for Client();
  sub_100020C48();
  __chkstk_darwin(v5);
  sub_100028CA0();
  uint64_t v6 = sub_10002572C(&qword_10021BF30);
  uint64_t v7 = sub_100016544(v6);
  __chkstk_darwin(v7);
  sub_100017DC8();
  uint64_t v8 = type metadata accessor for UserAgent();
  sub_100020C48();
  uint64_t v10 = v9;
  __chkstk_darwin(v11);
  sub_10001ED70();
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)v63 - v13;
  sub_10001DAF4((uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__userAgent, (void (*)(uint64_t))sub_10002A280);
  sub_1000184F4(v1, 1, v8);
  if (v15)
  {
    sub_100019994(v1, &qword_10021BF30);
  }
  else
  {
    sub_10000E0F4();
    v16();
    uint64_t Strong = swift_unknownObjectWeakLoadStrong();
    if (Strong)
    {
      uint64_t v18 = Strong;
      uint64_t v19 = (void *)sub_100012824((uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__bag, (uint64_t (*)(uint64_t))sub_100012864);

      if (v19)
      {
        sub_100016614();
        v20();
        swift_unknownObjectRelease();
      }
      else
      {
        if (qword_100218B20 != -1) {
          swift_once();
        }
        uint64_t v21 = type metadata accessor for Logger();
        sub_1000E2174(v21, (uint64_t)qword_100236978);
        sub_100028864();
        sub_100016608();
        v22();
        uint64_t v68 = 0;
        uint64_t v23 = Logger.logObject.getter();
        static os_log_type_t.debug.getter();
        uint64_t v24 = sub_1000E2C20();
        LODWORD(v67) = v25;
        BOOL v26 = os_log_type_enabled(v24, (os_log_type_t)v25);
        uint64_t v69 = v18;
        if (v26)
        {
          v66 = v23;
          unint64_t v27 = (uint8_t *)sub_100017D90();
          *(_DWORD *)unint64_t v27 = 134349056;
          v64 = v27 + 4;
          v65 = v27;
          UserAgent.client.getter();
          Client.type.getter();
          sub_1000E25C4();
          sub_1000283AC();
          v28();
          uint64_t v29 = ClientType.rawValue.getter();
          unsigned int v30 = *(void (**)(void))(v10 + 8);
          sub_100024400();
          v30();
          uint64_t v71 = v29;
          uint64_t v23 = v66;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v23, (os_log_type_t)v67, "Ensuring bag for client: %{public}lu", v65, 0xCu);
          sub_100017D40();
        }
        else
        {
          unsigned int v30 = *(void (**)(void))(v10 + 8);
          ((void (*)(uint64_t, uint64_t))v30)(v2, v8);
        }

        id v31 = [self defaultCenter];
        [v31 addObserver:v3 selector:"bagChangeNotificationWithNotification:" name:@"PARBagChangeNotification" object:0];

        sub_100017C74();
        uint64_t v32 = sub_1000E2CBC();
        sub_100018148(v32, 0);
        uint64_t v33 = (void *)sub_100016A0C();
        swift_unknownObjectRelease();
        if (v33)
        {
          if ((v70 & 1) != 0
            || (sub_100023FA0(0, (unint64_t *)&qword_10021D040), (Config.isDefault.getter() & 1) == 0))
          {
            id v41 = v33;
            uint64_t v42 = UserAgent.fullString.getter();
            uint64_t v44 = v43;
            id v45 = objc_allocWithZone((Class)PARBag);
            id v46 = sub_10001519C(v41, v42, v44);
            sub_1000BFBE8(v46);

            swift_unknownObjectRelease();
            ((void (*)(char *, uint64_t))v30)(v14, v8);
            goto LABEL_22;
          }
        }
        sub_1000C1BD4();
        os_log_type_t v34 = (uint8_t *)type metadata accessor for DispatchTimeInterval();
        v66 = v63;
        sub_100020C48();
        uint64_t v36 = v35;
        __chkstk_darwin(v37);
        sub_10000E04C();
        uint64_t v70 = v38;
        BOOL v39 = sub_1000C1C80();
        v67 = v30;
        if (v39)
        {
          if (qword_100218C48 != -1) {
            swift_once();
          }
          uint64_t v40 = qword_100236BE0;
        }
        else
        {
          if (qword_100218C40 != -1) {
            swift_once();
          }
          uint64_t v40 = qword_100236BC8;
        }
        sub_10002A10C((uint64_t)v34, (uint64_t)v40);
        v64 = v36;
        v65 = v34;
        sub_100016608();
        v47();
        v63[1] = *(void *)(v3 + 32);
        os_log_type_t v48 = type metadata accessor for DispatchTime();
        v63[2] = v63;
        sub_100020C48();
        uint64_t v50 = v49;
        __chkstk_darwin(v51);
        sub_1000E2A04();
        __chkstk_darwin(v52);
        sub_1000E21E8();
        static DispatchTime.now()();
        sub_1000E25C4();
        + infix(_:_:)();
        v53 = *(void (**)(void))(v50 + 8);
        sub_100023C70();
        v53();
        OS_dispatch_semaphore.wait(timeout:)();
        sub_100023C70();
        v53();
        char v54 = static DispatchTimeoutResult.== infix(_:_:)();
        swift_bridgeObjectRetain();
        v55 = Logger.logObject.getter();
        os_log_type_t v56 = static os_log_type_t.debug.getter();
        if (sub_100019BAC(v56))
        {
          uint64_t v57 = 0x73736563637573;
          if (v54) {
            uint64_t v57 = 0x74756F656D6974;
          }
          uint64_t v68 = v57;
          v58 = (uint8_t *)sub_100017D90();
          uint64_t v71 = sub_10001AB54();
          *(_DWORD *)v58 = 136315138;
          swift_bridgeObjectRetain();
          uint64_t v59 = sub_10001C274(v68, 0xE700000000000000, &v71);
          sub_10001ED4C(v59);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v55, v48, "Bag Fetch status after network fetch: %s", v58, 0xCu);
          swift_arrayDestroy();
          sub_100017D40();
          sub_100017D40();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        v60 = v67;
        v61 = (void *)sub_100012824((uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__bag, (uint64_t (*)(uint64_t))sub_100012864);
        swift_unknownObjectRelease();
        sub_10000E040();
        v62();
        sub_100024400();
        v60();
        if (v61) {
      }
        }
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v10 + 8))(v14, v8);
    }
  }
LABEL_22:
  sub_10000DFB8();
}

uint64_t sub_10000FDFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v96 = a3;
  uint64_t v93 = a1;
  type metadata accessor for Requestor();
  sub_100020C48();
  uint64_t v94 = v7;
  uint64_t v95 = v6;
  __chkstk_darwin(v6);
  sub_10002127C();
  uint64_t v8 = type metadata accessor for Client();
  uint64_t v9 = sub_100016544(v8);
  __chkstk_darwin(v9);
  sub_100028CA0();
  uint64_t v10 = sub_10002572C(&qword_10021BF30);
  uint64_t v11 = sub_100016544(v10);
  __chkstk_darwin(v11);
  sub_100017D2C();
  uint64_t v91 = v12;
  __chkstk_darwin(v13);
  char v15 = (char *)&v91 - v14;
  uint64_t v16 = type metadata accessor for UserAgent();
  sub_100020C48();
  uint64_t v97 = v17;
  __chkstk_darwin(v18);
  sub_100017D2C();
  uint64_t v92 = v19;
  __chkstk_darwin(v20);
  v99 = (char *)&v91 - v21;
  uint64_t v22 = type metadata accessor for DispatchPredicate();
  sub_100020C48();
  uint64_t v24 = v23;
  __chkstk_darwin(v25);
  unint64_t v27 = (uint64_t *)((char *)&v91 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  v98 = v3;
  uint64_t v28 = (void *)*((void *)v3 + 6);
  *unint64_t v27 = v28;
  sub_100023D14();
  v29();
  id v30 = v28;
  LOBYTE(v28) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v24 + 8))(v27, v22);
  if ((v28 & 1) == 0)
  {
    __break(1u);
LABEL_60:
    swift_once();
LABEL_23:
    uint64_t v50 = type metadata accessor for Logger();
    sub_10002A10C(v50, (uint64_t)qword_1002369C0);
    uint64_t v37 = Logger.logObject.getter();
    os_log_type_t v51 = static os_log_type_t.debug.getter();
    if (sub_100017D10(v51))
    {
      uint64_t v52 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v52 = 16777472;
      LOBYTE(v101[0]) = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v37, (os_log_type_t)v15, "External event received %hhu", v52, 5u);
      sub_100017D40();
    }
LABEL_25:

LABEL_26:
    uint64_t v53 = sub_1000297D8();
    return v54(v53);
  }
  uint64_t v31 = sub_100023D58();
  sub_100010954(v31, v32);
  uint64_t v33 = v16;
  if (sub_100027BA4((uint64_t)v15, 1, v16) == 1)
  {
    Client.init(_:)();
    sub_100023D14();
    v34();
    UserAgent.init(_:requestor:)();
    sub_1000E97F8((uint64_t)v15, &qword_10021BF30);
    uint64_t v35 = v97;
  }
  else
  {
    uint64_t v35 = v97;
    (*(void (**)(char *, char *, uint64_t))(v97 + 32))(v99, v15, v16);
  }
  LOBYTE(v16) = v96;
  char v15 = v98;
  if (!v98[88])
  {
    if (!(_BYTE)v96)
    {
LABEL_27:
      if (*((void *)v98 + 2))
      {
        swift_unknownObjectRetain();
        sub_10000CB40();
        char v56 = v55;
        swift_unknownObjectRelease();
        switch(v56)
        {
          case 1:
            if (qword_100218B38 != -1) {
              swift_once();
            }
            uint64_t v57 = type metadata accessor for Logger();
            sub_10002A10C(v57, (uint64_t)qword_1002369C0);
            v58 = (void *)Logger.logObject.getter();
            os_log_type_t v59 = static os_log_type_t.debug.getter();
            if (sub_100017D10(v59))
            {
              *(_WORD *)sub_100023E24() = 0;
              sub_1000E9AA8((void *)&_mh_execute_header, v60, v61, "roll session on session file limit pass");
              sub_100017D40();
            }

            uint64_t v48 = sub_1000294A0();
            goto LABEL_21;
          case 2:
            if (qword_100218B38 != -1) {
              swift_once();
            }
            uint64_t v78 = type metadata accessor for Logger();
            sub_10002A10C(v78, (uint64_t)qword_1002369C0);
            v79 = (unsigned char *)Logger.logObject.getter();
            os_log_type_t v80 = static os_log_type_t.debug.getter();
            if (sub_100017D10(v80))
            {
              *(_WORD *)sub_100023E24() = 0;
              sub_1000E9AA8((void *)&_mh_execute_header, v81, v82, "roll session on session file handle close");
              sub_100017D40();
            }

            uint64_t v83 = sub_1000294A0();
            sub_1000E7154(v83, v84);
            goto LABEL_58;
          default:
            goto LABEL_26;
        }
      }
      goto LABEL_26;
    }
    if (v96 != 3)
    {
      if (v96 == 1)
      {
        uint64_t v45 = sub_10002B2E0();
        uint64_t result = v46(v45);
        v15[88] = 1;
        return result;
      }
LABEL_22:
      if (qword_100218B38 == -1) {
        goto LABEL_23;
      }
      goto LABEL_60;
    }
LABEL_20:
    uint64_t v48 = 2;
    uint64_t v49 = 0;
LABEL_21:
    sub_1000E7154(v48, v49);
    goto LABEL_26;
  }
  if (v98[88] == 1)
  {
    switch((char)v96)
    {
      case 0:
        goto LABEL_27;
      case 2:
        sub_1000E7154(4, 0);
        if (qword_100218B38 != -1) {
          swift_once();
        }
        uint64_t v36 = type metadata accessor for Logger();
        sub_10002A10C(v36, (uint64_t)qword_1002369C0);
        swift_retain_n();
        uint64_t v37 = Logger.logObject.getter();
        os_log_type_t v38 = static os_log_type_t.debug.getter();
        if (sub_100019BAC(v38))
        {
          BOOL v39 = (uint8_t *)swift_slowAlloc();
          v101[0] = sub_10001AB54();
          *(_DWORD *)BOOL v39 = 136315138;
          uint64_t v96 = v33;
          uint64_t v40 = *((void *)v15 + 7);
          unint64_t v41 = *((void *)v15 + 8);
          swift_bridgeObjectRetain();
          uint64_t v42 = sub_10001C274(v40, v41, v101);
          sub_10002EBB4(v42);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v37, (os_log_type_t)a2, "flushing because max timer expired %s", v39, 0xCu);
          swift_arrayDestroy();
          sub_100017D40();
          sub_100017D40();

          sub_100027EC0();
          return v43();
        }
        swift_release_n();
        break;
      case 3:
        goto LABEL_20;
      case 4:
        sub_1000E7154(3, 0);
        if (qword_100218B38 != -1) {
          swift_once();
        }
        uint64_t v62 = type metadata accessor for Logger();
        sub_10002A10C(v62, (uint64_t)qword_1002369C0);
        swift_retain();
        v63 = Logger.logObject.getter();
        os_log_type_t v64 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v63, v64))
        {
          uint64_t v65 = swift_slowAlloc();
          uint64_t v102 = sub_10001AB54();
          *(_DWORD *)uint64_t v65 = 134218242;
          sub_100017F00();
          sub_10001B620((void *)v15 + 12, *((void *)v15 + 15));
          uint64_t v96 = v33;
          sub_100026808();
          __chkstk_darwin(v66);
          sub_10001DDC8();
          sub_100016608();
          v67();
          uint64_t v68 = *((void *)v15 + 13);
          sub_100027EC0();
          v69();
          uint64_t v100 = v68;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v65 + 12) = 2080;
          uint64_t v70 = *((void *)v15 + 7);
          unint64_t v71 = *((void *)v15 + 8);
          swift_bridgeObjectRetain();
          uint64_t v100 = sub_10001C274(v70, v71, &v102);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v63, v64, "session flushed because soft limit reached and idle time was beyond %f %s", (uint8_t *)v65, 0x16u);
          swift_arrayDestroy();
          sub_100017D40();
          sub_100017D40();
        }
        else
        {

          swift_release();
        }
        sub_10002D014();
        uint64_t v76 = sub_1000297D8();
        uint64_t result = v77(v76);
        goto LABEL_45;
      case 5:
        if (*((void *)v98 + 2))
        {
          swift_unknownObjectRetain();
          sub_10000CB40();
          char v73 = v72;
          swift_unknownObjectRelease();
        }
        else
        {
          char v73 = 3;
        }
        sub_1000E7154(7, 0);
        if (qword_100218B38 != -1) {
          swift_once();
        }
        uint64_t v85 = type metadata accessor for Logger();
        sub_10002A10C(v85, (uint64_t)qword_1002369C0);
        v86 = Logger.logObject.getter();
        os_log_type_t v87 = static os_log_type_t.debug.getter();
        if (sub_100019BAC(v87))
        {
          v88 = (uint8_t *)sub_100023E24();
          *(_WORD *)v88 = 0;
          _os_log_impl((void *)&_mh_execute_header, v86, (os_log_type_t)a2, "session flushed because soft limit reached and sentinel feedback received", v88, 2u);
          sub_100017D40();
        }

        if (v73 != 2) {
          goto LABEL_26;
        }
        v79 = v98;
LABEL_58:
        sub_10002D014();
        uint64_t v89 = sub_10002B2E0();
        uint64_t result = v90(v89);
        v79[88] = 0;
        return result;
      default:
        goto LABEL_22;
    }
    goto LABEL_25;
  }
  if (v96 == 3) {
    goto LABEL_20;
  }
  if ((_BYTE)v96) {
    goto LABEL_22;
  }
  uint64_t v47 = v91;
  sub_100010954(a2, v91);
  if (sub_100027BA4(v47, 1, v33) == 1)
  {
    Client.init(_:)();
    (*(void (**)(uint64_t, void, uint64_t))(v94 + 104))(v4, enum case for Requestor.parsecd(_:), v95);
    UserAgent.init(_:requestor:)();
    sub_1000E97F8(v47, &qword_10021BF30);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 32))(v92, v47, v33);
  }
  sub_10002D014();
  v74 = *(void (**)(void))(v35 + 8);
  sub_1000283AC();
  v74();
  uint64_t v75 = sub_10002B2E0();
  uint64_t result = ((uint64_t (*)(uint64_t))v74)(v75);
LABEL_45:
  v15[88] = 0;
  return result;
}

uint64_t sub_100010954(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10002572C(&qword_10021BF30);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

id RawPayload.__allocating_init<A>(with:)(void *a1)
{
  id result = [a1 data];
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v7 = v6;

    id v8 = objc_allocWithZone(v1);
    id v9 = RawPayload.init(with:)(v5, v7);

    return v9;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id RawPayload.init(with:)(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  *(_DWORD *)&v2[OBJC_IVAR___SRRawPayload_dataVersion] = 1;
  uint64_t v6 = &v2[OBJC_IVAR___SRRawPayload_data];
  *(void *)uint64_t v6 = a1;
  *((void *)v6 + 1) = a2;
  v8.receiver = v2;
  v8.super_class = ObjectType;
  return objc_msgSendSuper2(&v8, "init");
}

uint64_t FlusherClient.updateWhitelists(_:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  objc_super v8 = *(void **)&v3[OBJC_IVAR____TtC7parsecd13FlusherClient_connection];
  uint64_t v29 = sub_1000FE578;
  id v30 = 0;
  aBlock = _NSConcreteStackBlock;
  uint64_t v26 = 1107296256;
  unint64_t v27 = sub_1000FE57C;
  uint64_t v28 = &unk_100200B88;
  id v9 = _Block_copy(&aBlock);
  id v10 = [v8 remoteObjectProxyWithErrorHandler:v9];
  _Block_release(v9);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  sub_10001C348((uint64_t)v31, (uint64_t)&aBlock);
  sub_10002572C(&qword_10021ED70);
  if (swift_dynamicCast())
  {
    if (qword_100218C60 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    uint64_t v12 = sub_10001DD88(v11, (uint64_t)qword_10021ECF0);
    os_log_type_t v13 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)sub_100023E24();
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Asking FBF to generate App Whitelist signature.", v14, 2u);
      sub_100017D40();
    }

    char v15 = (void *)swift_allocObject();
    v15[2] = a2;
    v15[3] = a3;
    v15[4] = v4;
    uint64_t v29 = sub_1000312CC;
    id v30 = v15;
    aBlock = _NSConcreteStackBlock;
    uint64_t v26 = 1107296256;
    unint64_t v27 = sub_1000085EC;
    uint64_t v28 = &unk_100200BD8;
    uint64_t v16 = _Block_copy(&aBlock);
    sub_100030358(a2);
    id v17 = v4;
    swift_release();
    [v24 updateWhitelists:a1 completion:v16];
    _Block_release(v16);
    swift_unknownObjectRelease();
  }
  else
  {
    if (qword_100218C60 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    uint64_t v19 = sub_10001DD88(v18, (uint64_t)qword_10021ECF0);
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      *(_WORD *)sub_100023E24() = 0;
      sub_100018528((void *)&_mh_execute_header, v21, v22, "FBF proxy didn't conform to expected remote object protocol");
      sub_100017D40();
    }
  }
  return sub_10001CA50((uint64_t)v31);
}

uint64_t sub_100010DE0()
{
  swift_retain();
  uint64_t v0 = sub_100010E1C();
  swift_release();
  return v0;
}

uint64_t sub_100010E1C()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 24);
  os_unfair_lock_lock(v1);
  swift_beginAccess();
  uint64_t v2 = *(void *)(v0 + 16);
  swift_retain();
  os_unfair_lock_unlock(v1);
  return v2;
}

void sub_100010E78()
{
  sub_100017EC4();
  uint64_t v2 = type metadata accessor for BiomeStreamConfig();
  sub_100020C48();
  uint64_t v4 = v3;
  __chkstk_darwin(v5);
  sub_10000DFD0();
  uint64_t v8 = v7 - v6;
  uint64_t v9 = type metadata accessor for FeedbackStreamDescriptor();
  sub_100020C48();
  uint64_t v11 = v10;
  uint64_t v13 = __chkstk_darwin(v12);
  char v15 = (char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  id v17 = (char *)&v46 - v16;
  type metadata accessor for FeedbackStoreConfig();
  sub_100020C48();
  __chkstk_darwin(v18);
  sub_10000DFD0();
  uint64_t v23 = v22 - v21;
  uint64_t v24 = *(void **)(v0 + 24);
  if (!v24)
  {
    uint64_t v52 = v8;
    uint64_t v53 = v20;
    uint64_t v49 = v4;
    uint64_t v50 = v2;
    uint64_t v26 = *(void **)(v0 + 32);
    uint64_t v54 = v19;
    id v55 = v26;
    sub_10002572C(&qword_1002251A0);
    uint64_t v27 = v23;
    unint64_t v28 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    uint64_t v29 = swift_allocObject();
    *(_OWORD *)(v29 + 16) = xmmword_1001A2A20;
    unint64_t v30 = v29 + v28;
    uint64_t v31 = enum case for FeedbackStreamDescriptor.session(_:);
    os_log_type_t v51 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 104);
    v51((char *)v30, enum case for FeedbackStreamDescriptor.session(_:), v9);
    id v32 = v55;
    FeedbackStoreConfig.init(fileManager:streams:)();
    if (v1) {
      goto LABEL_5;
    }
    uint64_t v47 = v0;
    uint64_t v33 = v51;
    v51(v17, v31, v9);
    uint64_t v48 = FeedbackStreamDescriptor.rawValue.getter();
    id v55 = v34;
    uint64_t v35 = v17;
    uint64_t v36 = *(void (**)(char *, uint64_t))(v11 + 8);
    v36(v35, v9);
    v33(v15, v31, v9);
    FeedbackStoreConfig.getConfig(forStream:)();
    v36(v15, v9);
    uint64_t v37 = (void *)BiomeStreamConfig.storeConfig.getter();
    sub_10000E040();
    v38();
    uint64_t v39 = type metadata accessor for RawPayload();
    id v40 = objc_allocWithZone((Class)BMStreamDatastoreWriter);
    id v41 = sub_10000C4EC(v48, (uint64_t)v55, v37, v39);
    if (!v41)
    {
      sub_10018FF34();
      sub_100024A30();
      *uint64_t v45 = xmmword_1001A5AD0;
      swift_willThrow();
      (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v27, v54);
      goto LABEL_5;
    }
    uint64_t v42 = v41;
    sub_10000E040();
    v43();
    uint64_t v44 = *(void **)(v47 + 24);
    *(void *)(v47 + 24) = v42;
    v42;

    uint64_t v24 = 0;
  }
  id v25 = v24;
LABEL_5:
  sub_100024A18();
}

uint64_t sub_1000111F0()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v9 = (char *)&v35 - v8;
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v35 - v10;
  uint64_t v12 = *(void **)&v1[*(int *)(type metadata accessor for SearchQueriesDataSharingStatusHelper() + 20)];
  if (v12)
  {
    id v13 = v12;
    unint64_t v36 = (unint64_t)"URLSessionError(code: ";
    NSString v14 = String._bridgeToObjectiveC()();
    id v40 = [v13 integerForKey:v14];

    char v15 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
    id v38 = (id)(v3 + 16);
    uint64_t v39 = v1;
    uint64_t v37 = v15;
    v15(v11, v1, v2);
    uint64_t v16 = Logger.logObject.getter();
    uint64_t v17 = v2;
    os_log_type_t v18 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v16, v18))
    {
      uint64_t v19 = swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      uint64_t v35 = v17;
      uint64_t v42 = v20;
      *(_DWORD *)uint64_t v19 = 136315395;
      uint64_t v41 = sub_10001C274(0xD000000000000022, 0x80000001001B6870, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v19 + 12) = 2053;
      uint64_t v41 = (uint64_t)v40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v16, v18, "Read %s as %{sensitive}ld", (uint8_t *)v19, 0x16u);
      swift_arrayDestroy();
      sub_100017D40();
      sub_100017D40();

      uint64_t v21 = *(void (**)(char *, uint64_t))(v3 + 8);
      uint64_t v22 = v35;
      v21(v11, v35);
    }
    else
    {

      uint64_t v21 = *(void (**)(char *, uint64_t))(v3 + 8);
      v21(v11, v17);
      uint64_t v22 = v17;
    }
    uint64_t v27 = (uint64_t)v40;
    if (v40 == (id)2)
    {

      return 1;
    }
    if ((unint64_t)v40 > 1)
    {
      v37(v9, v39, v22);
      uint64_t v29 = Logger.logObject.getter();
      os_log_type_t v30 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v29, v30))
      {
        uint64_t v31 = swift_slowAlloc();
        id v38 = v13;
        uint64_t v39 = v9;
        uint64_t v32 = v31;
        uint64_t v33 = swift_slowAlloc();
        uint64_t v41 = v27;
        uint64_t v42 = v33;
        *(_DWORD *)uint64_t v32 = 134545923;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v32 + 12) = 2080;
        uint64_t v41 = sub_10001C274(0xD000000000000022, v36 | 0x8000000000000000, &v42);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v29, v30, "Read an unhandled value %{sensitive}ld for %s", (uint8_t *)v32, 0x16u);
        swift_arrayDestroy();
        sub_100017D40();
        sub_100017D40();

        os_log_type_t v34 = v39;
      }
      else
      {

        os_log_type_t v34 = v9;
      }
      v21(v34, v22);
    }
    else
    {
    }
  }
  else
  {
    uint64_t v23 = v3;
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v6, v1, v2);
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "UserDefaults is nil when reading soo value", v26, 2u);
      sub_100017D40();
    }

    (*(void (**)(char *, uint64_t))(v23 + 8))(v6, v2);
  }
  return 0;
}

void sub_100011708()
{
  if ((*(unsigned char *)(v0 + 81) & 1) == 0)
  {
    uint64_t v1 = v0;
    if (*(void *)(v0 + qword_100236B08))
    {
      swift_retain();
      sub_100116E6C();
      swift_release();
    }
    if ((*(unsigned char *)(v0 + qword_10021B6D0) & 1) == 0)
    {
      sub_10002572C(&qword_10021B9A8);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1001A3830;
      *(void *)(inited + 32) = 0x726574706F6461;
      *(void *)(inited + 40) = 0xE700000000000000;
      Client.type.getter();
      *(void *)(inited + 48) = [objc_allocWithZone((Class)NSNumber) initWithUnsignedInteger:ClientType.rawValue.getter()];
      *(void *)(inited + 56) = 0x656D6F6374756FLL;
      *(void *)(inited + 64) = 0xE700000000000000;
      *(void *)(inited + 72) = [objc_allocWithZone((Class)NSNumber) initWithUnsignedInteger:qword_1001A5368[*(char *)(v0 + qword_10021B6C8)]];
      sub_100023FA0(0, &qword_10021B9B0);
      Dictionary.init(dictionaryLiteral:)();
      sub_10000B52C();
      uint64_t v4 = v3;
      swift_bridgeObjectRelease();
      sub_10003214C(v4);
      swift_bridgeObjectRelease();
    }
    sub_10002572C((uint64_t *)&unk_10021BB00);
    uint64_t v5 = sub_10002C214();
    *(_OWORD *)(v5 + 16) = xmmword_1001A2A20;
    uint64_t v6 = String.init<A>(describing:)();
    uint64_t v8 = v7;
    *(void *)(v5 + 56) = &type metadata for String;
    *(void *)(v5 + 64) = sub_1000303C8();
    *(void *)(v5 + 32) = v6;
    *(void *)(v5 + 40) = v8;
    sub_100032150("outcome=%{signpost.description:attribute,public}s", 49, 2, v5);
    swift_bridgeObjectRelease();
    sub_100023E18();
    uint64_t v10 = *(os_unfair_lock_s **)(*(void *)(v1 + *(void *)(v9 + 152)) + 16);
    swift_retain();
    os_unfair_lock_lock(v10);
    if ((*(unsigned char *)(v1 + 81) & 1) == 0) {
      sub_1000159F4();
    }
    os_unfair_lock_unlock(v10);
    swift_release();
  }
}

void sub_100011960()
{
  sub_10000DFE0();
  id v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = sub_10002572C(&qword_10021BF30);
  uint64_t v7 = sub_100016544(v6);
  __chkstk_darwin(v7);
  uint64_t v8 = sub_100029660();
  sub_100020C48();
  uint64_t v132 = v9;
  __chkstk_darwin(v10);
  sub_100017DC8();
  if (!swift_unknownObjectWeakLoadStrong()) {
    goto LABEL_153;
  }
  sub_100032384();
  if (sub_100027BA4(v1, 1, v8) != 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v132 + 32))(v0, v1, v8);
    sub_10002B910();
    if (Data.count.getter() < 1)
    {
      (*(void (**)(uint64_t, uint64_t))(v132 + 8))(v0, v8);
      goto LABEL_17;
    }
    id v19 = objc_allocWithZone((Class)_CPFeedbackPayload);
    uint64_t v20 = sub_10002B910();
    sub_100027BCC(v20, v21);
    uint64_t v22 = sub_10002B910();
    id v24 = sub_100005914(v22, v23);
    if (!v24)
    {
      uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v35 = v34;
      sub_10002572C(&qword_100219280);
      uint64_t inited = (__n128 *)swift_initStackObject();
      uint64_t v37 = sub_100025460(inited, (__n128)xmmword_1001A2A20);
      v37[4].n128_u64[1] = (unint64_t)&type metadata for String;
      sub_100018548((uint64_t)v37, 0xD000000000000026);
      uint64_t v38 = Dictionary.init(dictionaryLiteral:)();
      id v39 = objc_allocWithZone((Class)NSError);
      id v40 = sub_1000B06A0(v33, v35, 500, v38);
      sub_100081124();
      if (qword_100218B38 != -1) {
        swift_once();
      }
      uint64_t v41 = type metadata accessor for Logger();
      uint64_t v42 = sub_10001DD88(v41, (uint64_t)qword_1002369C0);
      os_log_type_t v43 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v42, v43))
      {
        *(_WORD *)sub_100023E24() = 0;
        sub_1000A3D2C((void *)&_mh_execute_header, v44, v45, "Failed deserializing _CPFeedbackPayload.");
        sub_100017D40();
      }

      swift_unknownObjectRelease();
      goto LABEL_152;
    }
    os_log_type_t v25 = v24;
    uint64_t v26 = (id *)[v24 codable];
    if (!v26)
    {
      if (qword_100218B38 != -1) {
        swift_once();
      }
      uint64_t v46 = type metadata accessor for Logger();
      uint64_t v47 = sub_10001DD88(v46, (uint64_t)qword_1002369C0);
      os_log_type_t v48 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v47, v48))
      {
        *(_WORD *)sub_100023E24() = 0;
        sub_1000A3D2C((void *)&_mh_execute_header, v49, v50, "payload.codable");
        sub_100017D40();
      }
      swift_unknownObjectRelease();

      goto LABEL_152;
    }
    uint64_t v27 = v26;
    uint64_t v130 = (uint64_t)v3;
    uint64_t ObjectType = (void *)swift_getObjectType();
    if (sub_10000B01C())
    {
      sub_1000BDEB8();
      sub_1000073FC();
      sub_100017A90();
      swift_unknownObjectRelease();
    }
    uint64_t v131 = v5;
    id v29 = [v25 type];
    sub_1000240F0();
    uint64_t v31 = &selRef_isEqualToString_;
    switch((int)v29)
    {
      case 0:
      case 1:
      case 2:
      case 4:
      case 5:
      case 6:
      case 9:
      case 10:
      case 11:
      case 13:
      case 15:
      case 17:
      case 18:
      case 19:
      case 21:
      case 22:
      case 25:
      case 27:
      case 30:
      case 31:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 43:
      case 44:
      case 100:
      case 101:
      case 102:
        goto LABEL_140;
      case 3:
        self;
        if (!sub_100024368()) {
          goto LABEL_88;
        }
        sub_1000A3DF8(v27);
        uint64_t v70 = (void *)sub_1000A3DEC();
        if (!sub_1000BB16C(v70)) {
          goto LABEL_101;
        }
        sub_10002ED54();
        if (v72)
        {
          if (!sub_10002547C()) {
            goto LABEL_137;
          }
        }
        else if (!*(void *)(v71 + 16))
        {
          goto LABEL_137;
        }
        uint64_t v73 = sub_100021CB4();
        sub_100065188(v73, v74, v75);
        if (ObjectType) {
          sub_100023D20();
        }
        else {
          id v76 = v27[4];
        }
        sub_1000A3DB4();
        if (!sub_1000A2A0C(ObjectType)) {
          goto LABEL_101;
        }
        sub_10002ED54();
        if (v78)
        {
          if (!sub_10002547C()) {
            goto LABEL_137;
          }
        }
        else if (!*(void *)(v77 + 16))
        {
          goto LABEL_137;
        }
        uint64_t v79 = sub_100021CB4();
        sub_100065188(v79, v80, v81);
        if (ObjectType) {
          id v82 = (id)sub_100023D20();
        }
        else {
          id v82 = v27[4];
        }
        uint64_t v83 = v82;
        v129 = v29;
        swift_bridgeObjectRelease();
        id v84 = [v83 result];

        if (v84)
        {
          id v3 = [v84 queryId];

          goto LABEL_87;
        }

        goto LABEL_138;
      case 7:
        uint64_t v31 = (char **)v27;
        self;
        if (swift_dynamicCastObjCClass()) {
          goto LABEL_70;
        }
        goto LABEL_138;
      case 8:
        self;
        uint64_t v87 = sub_100024368();
        if (!v87) {
          goto LABEL_97;
        }
        v88 = (void *)v87;
        v125 = v27;
        v120 = v27;
        if (!sub_1000BB188(v88))
        {
          id v128 = 0;
          char v126 = 1;
LABEL_100:
          uint64_t v90 = v131;
          goto LABEL_112;
        }
        sub_10002ED54();
        uint64_t v90 = v131;
        if (v91)
        {
          if (sub_10002547C()) {
            goto LABEL_76;
          }
        }
        else if (*(void *)(v89 + 16))
        {
LABEL_76:
          sub_10002B134();
          if (ObjectType) {
            sub_100023D20();
          }
          else {
            id v92 = v27[4];
          }
          sub_1000A3DB4();
          id v128 = [ObjectType queryId];

          char v126 = 0;
          goto LABEL_100;
        }
        swift_bridgeObjectRelease();
        id v128 = 0;
        char v126 = 1;
LABEL_112:
        uint64_t v101 = sub_1000BB188(v88);
        if (v101)
        {
          unint64_t v121 = v101;
          uint64_t v102 = v90 + OBJC_IVAR____TtC7parsecd11ClientState_engagedSuggestionController;
          sub_10002845C();
          sub_1000A2AAC(v102, (uint64_t)&v133);
          if (v134)
          {
            sub_10001C1AC(&v133, (uint64_t)v135);
            id v29 = (id)v121;
            uint64_t v31 = &selRef_isEqualToString_;
            if (v121 >> 62)
            {
              uint64_t v103 = _CocoaArrayWrapper.endIndex.getter();
              if (v103) {
                goto LABEL_116;
              }
            }
            else
            {
              uint64_t v103 = *(void *)((v121 & 0xFFFFFFFFFFFFFF8) + 0x10);
              if (v103)
              {
LABEL_116:
                if (v103 >= 1)
                {
                  uint64_t v104 = 0;
                  uint64_t v123 = v103;
                  do
                  {
                    if ((v121 & 0xC000000000000001) != 0) {
                      id v105 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
                    }
                    else {
                      id v105 = *((id *)v29 + v104 + 4);
                    }
                    v106 = v105;
                    if ([v105 type] == 1)
                    {
                      uint64_t v107 = v137;
                      uint64_t v122 = v136;
                      sub_10001B620(v135, v136);
                      (*(void (**)(void *, void, uint64_t, uint64_t))(v107 + 80))(v106, 0, v122, v107);
                      id v29 = (id)v121;
                    }
                    ++v104;
                  }
                  while (v123 != v104);
                  goto LABEL_124;
                }
                __break(1u);
LABEL_155:
                uint64_t v68 = v29;
                sub_100023D20();
LABEL_53:
                sub_1000A3DEC();
                swift_bridgeObjectRelease();
                id v3 = [v29 queryId];

LABEL_87:
                char v30 = 0;
LABEL_139:
                uint64_t v27 = (id *)v31;
                uint64_t v31 = &selRef_isEqualToString_;
                goto LABEL_140;
              }
            }
LABEL_124:

            swift_bridgeObjectRelease();
            sub_10001CA50((uint64_t)v135);
            uint64_t v27 = v125;
            goto LABEL_36;
          }
          swift_bridgeObjectRelease();

          sub_100019994((uint64_t)&v133, &qword_10021CD08);
        }
        else
        {
        }
LABEL_35:
        uint64_t v31 = &selRef_isEqualToString_;
LABEL_36:
        id v3 = v128;
        char v30 = v126;
LABEL_140:
        BOOL v108 = v30;
        self;
        uint64_t v109 = sub_100024368();
        uint64_t v110 = v130;
        if (v109)
        {
          v111 = (void *)v109;
          uint64_t v127 = v0;
          v112 = v27;
          v113 = v27;
          id v114 = [v111 result];
          BOOL v108 = v114 == 0;
          if (v114)
          {
            v115 = v114;
            id v3 = [v114 v31[133]];
          }
          else
          {
            id v3 = 0;
          }
          sub_10009B9C4((uint64_t)v111, v131);

          uint64_t v110 = v130;
          uint64_t v27 = v112;
          uint64_t v0 = v127;
        }
        if (v108) {
          uint64_t v116 = 0;
        }
        else {
          uint64_t v116 = (uint64_t)v3;
        }
        if (v110) {
          uint64_t v117 = v110;
        }
        else {
          uint64_t v117 = v116;
        }
        sub_100023FA0(0, &qword_10021CD30);
        v118 = v27;
        swift_unknownObjectRetain();
        id v119 = sub_100008D58(v118, v117);
        sub_1000148D0();

        swift_unknownObjectRelease();
        swift_unknownObjectRelease();

LABEL_152:
        (*(void (**)(uint64_t, uint64_t))(v132 + 8))(v0, v8);
        goto LABEL_153;
      case 12:
      case 14:
      case 16:
        unsigned __int8 v32 = [v27 respondsToSelector:"queryId"];
        if (v32) {
          id v128 = [v27 queryId];
        }
        else {
          id v128 = 0;
        }
        char v126 = v32 ^ 1;
        self;
        uint64_t v51 = sub_100024368();
        if (!v51)
        {
          self;
          uint64_t v51 = sub_100024368();
          if (!v51)
          {
            self;
            uint64_t v51 = sub_100024368();
            if (!v51) {
              goto LABEL_36;
            }
          }
        }
        uint64_t v52 = (void *)v51;
        uint64_t v53 = v0;
        uint64_t v54 = v27;
        id v55 = v27;
        if ([v52 triggerEvent] == 23)
        {
          swift_unknownObjectRetain();
          sub_10000896C(v52, (SEL *)&selRef_input);
          sub_1000E6DD0();
          swift_unknownObjectRelease();
        }

        uint64_t v27 = v54;
        uint64_t v0 = v53;
        goto LABEL_35;
      case 20:
        uint64_t v31 = (char **)v27;
        self;
        if (!swift_dynamicCastObjCClass()) {
          goto LABEL_138;
        }
        id v3 = sub_10002B020();
        swift_unknownObjectRetain();
        id v85 = [ObjectType suggestion];
        if (!v85) {
          goto LABEL_98;
        }
        v86 = &selRef_query;
        goto LABEL_93;
      case 23:
        self;
        if (!sub_100024368()) {
          goto LABEL_88;
        }
        sub_1000A3DF8(v27);
        char v56 = (void *)sub_1000A3DEC();
        if (!sub_1000BB188(v56)) {
          goto LABEL_101;
        }
        sub_10002E664();
        if (v58)
        {
          if (sub_10002547C()) {
            goto LABEL_84;
          }
        }
        else if (*(void *)(v57 + 16))
        {
          goto LABEL_84;
        }
        goto LABEL_137;
      case 24:
        self;
        if (!sub_100024368()) {
          goto LABEL_88;
        }
        sub_1000A3DF8(v27);
        os_log_type_t v59 = (void *)sub_1000A3DEC();
        if (!sub_1000BB0DC(v59)) {
          goto LABEL_101;
        }
        sub_10002E664();
        if (v61)
        {
          if (!sub_10002547C()) {
            goto LABEL_137;
          }
        }
        else if (!*(void *)(v60 + 16))
        {
          goto LABEL_137;
        }
        uint64_t v62 = sub_100021CB4();
        sub_100065188(v62, v63, v64);
        if (ObjectType) {
          sub_100023D20();
        }
        else {
          id v65 = v27[4];
        }
        sub_1000A3DB4();
        if (!sub_1000BB0C0(ObjectType)) {
          goto LABEL_101;
        }
        sub_10002ED54();
        if (v67)
        {
          if (!sub_10002547C()) {
            goto LABEL_137;
          }
        }
        else if (!*(void *)(v66 + 16))
        {
          goto LABEL_137;
        }
        sub_10002B134();
        if (ObjectType) {
          goto LABEL_155;
        }
        uint64_t v68 = v29;
        id v69 = v27[4];
        goto LABEL_53;
      case 26:
        self;
        if (!sub_100024368())
        {
LABEL_88:
          sub_1000240F0();
          uint64_t v27 = v97;
          goto LABEL_140;
        }
        id v29 = sub_1000A3DF8(v27);
        id v93 = [v27 section];
        if (v93 && sub_1000BB0C0(v93))
        {
          sub_10002ED54();
          if (v95)
          {
            if (sub_10002547C()) {
              goto LABEL_84;
            }
          }
          else if (*(void *)(v94 + 16))
          {
LABEL_84:
            sub_10002B134();
            if (ObjectType) {
              sub_100023D20();
            }
            else {
              id v96 = v27[4];
            }
            sub_1000A3DB4();
            id v3 = [ObjectType queryId];

            goto LABEL_87;
          }
LABEL_137:

          swift_bridgeObjectRelease();
        }
        else
        {
LABEL_101:
        }
LABEL_138:
        sub_1000240F0();
        goto LABEL_139;
      case 28:
      case 29:
        self;
        uint64_t v98 = sub_100024368();
        if (v98)
        {
          v99 = (void *)v98;
          id v3 = v25;
          uint64_t v100 = v27;
          swift_unknownObjectRetain();
          sub_10000896C(v99, (SEL *)&selRef_input);
          sub_1000E6DD0();

          swift_unknownObjectRelease();
        }
LABEL_97:
        sub_1000240F0();
        goto LABEL_140;
      case 42:
        uint64_t v31 = (char **)v27;
        self;
        if (!swift_dynamicCastObjCClass()) {
          goto LABEL_138;
        }
LABEL_70:
        id v3 = sub_10002B020();
        swift_unknownObjectRetain();
        id v85 = [ObjectType result];
        if (!v85) {
          goto LABEL_98;
        }
        v86 = &selRef_completedQuery;
LABEL_93:
        sub_1000A29A4(v85, (SEL *)v86);
LABEL_98:
        uint64_t v31 = &selRef_isEqualToString_;
        sub_1000E6DD0();

        swift_unknownObjectRelease();
        sub_1000240F0();
        uint64_t v27 = v124;
        goto LABEL_140;
      default:
        type metadata accessor for _CPFeedbackType(0);
        _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
        __break(1u);
        return;
    }
  }
  sub_100019994(v1, &qword_10021BF30);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_10001ED8C();
  sub_10002572C(&qword_100219280);
  uint64_t v11 = swift_initStackObject();
  *(_OWORD *)(v11 + 16) = xmmword_1001A2A20;
  *(void *)(v11 + 32) = 0x6E6F73616572;
  *(void *)(v11 + 40) = 0xE600000000000000;
  *(void *)(v11 + 72) = &type metadata for String;
  strcpy((char *)(v11 + 48), "user agent nil");
  *(unsigned char *)(v11 + 63) = -18;
  Dictionary.init(dictionaryLiteral:)();
  id v12 = objc_allocWithZone((Class)NSError);
  id v13 = sub_1000298D0();
  sub_100081124();
  if (qword_100218B38 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  char v15 = (void *)sub_10001DD88(v14, (uint64_t)qword_1002369C0);
  os_log_type_t v16 = static os_log_type_t.error.getter();
  if (!sub_100019BAC(v16))
  {

LABEL_17:
    swift_unknownObjectRelease();
    goto LABEL_153;
  }
  *(_WORD *)sub_100023E24() = 0;
  sub_100016620((void *)&_mh_execute_header, v17, v18, "user agent must not be nil");
  sub_100017D40();
  swift_unknownObjectRelease();

LABEL_153:
  sub_10000DFB8();
}

uint64_t sub_100012824(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = sub_1000E2B44();
  uint64_t v4 = a2(v3);
  swift_release();
  return v4;
}

void *sub_100012864()
{
  Lock.lock()();
  sub_100017F00();
  uint64_t v1 = *(void **)(v0 + 24);
  id v2 = v1;
  Lock.unlock()();
  return v1;
}

id FlusherClient.init(connection:)(void *a1)
{
  uint64_t v3 = OBJC_IVAR____TtC7parsecd13FlusherClient_connection;
  *(void *)&v1[OBJC_IVAR____TtC7parsecd13FlusherClient_connection] = a1;
  uint64_t v4 = self;
  id v5 = a1;
  uint64_t v6 = v1;
  id v7 = [v4 interfaceWithProtocol:&OBJC_PROTOCOL___FBFDaemonXPC];
  [v5 setRemoteObjectInterface:v7];

  id v8 = *(id *)&v1[v3];
  [v8 resume];

  if (qword_100218C60 != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = sub_10001DD88(v9, (uint64_t)qword_10021ECF0);
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    *(_WORD *)sub_100023E24() = 0;
    sub_100017FB8((void *)&_mh_execute_header, v12, v13, "Initiating new connection to FBF");
    sub_100017D40();
  }

  v16.receiver = v6;
  v16.super_class = (Class)type metadata accessor for FlusherClient();
  id v14 = objc_msgSendSuper2(&v16, "init");

  return v14;
}

void sub_100012A2C(uint64_t a1)
{
  if (sub_10000D7D4(a1))
  {
    static os_log_type_t.debug.getter();
    sub_10002572C((uint64_t *)&unk_10021BB00);
    uint64_t v1 = swift_allocObject();
    *(_OWORD *)(v1 + 16) = xmmword_1001A3830;
    uint64_t v2 = aDiskwrite[0];
    uint64_t v3 = aDiskwrite[1];
    *(void *)(v1 + 56) = &type metadata for String;
    unint64_t v4 = sub_1000303C8();
    *(void *)(v1 + 64) = v4;
    *(void *)(v1 + 32) = v2;
    *(void *)(v1 + 40) = v3;
    sub_10002FF38();
    swift_bridgeObjectRetain();
    uint64_t v5 = Dictionary.description.getter();
    *(void *)(v1 + 96) = &type metadata for String;
    *(void *)(v1 + 104) = v4;
    *(void *)(v1 + 72) = v5;
    *(void *)(v1 + 80) = v6;
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();
    uint64_t v8 = aDiskwrite[0];
    id v7 = (void *)aDiskwrite[1];
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    v9._countAndFlagsBits = 46;
    v9._object = (void *)0xE100000000000000;
    String.append(_:)(v9);
    swift_bridgeObjectRetain();
    v10._countAndFlagsBits = v8;
    v10._object = v7;
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    NSString v11 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    AnalyticsSendEvent();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
}

void sub_100012C24()
{
  sub_10000DFE0();
  uint64_t v3 = v0;
  uint64_t v5 = v4;
  sub_100024344();
  type metadata accessor for Client();
  sub_100020C48();
  __chkstk_darwin(v6);
  sub_100028CA0();
  uint64_t v7 = sub_10002572C(&qword_10021BF30);
  uint64_t v8 = sub_100016544(v7);
  __chkstk_darwin(v8);
  uint64_t v9 = sub_100029660();
  sub_100020C48();
  uint64_t v11 = v10;
  __chkstk_darwin(v12);
  sub_100017DE0();
  unint64_t v13 = sub_100019060(v0, 1);
  if (v13 < 2)
  {
LABEL_2:
    sub_100019154(v13);
    if (!v5) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  sub_100032384();
  if (sub_100027BA4(v2, 1, v9) == 1)
  {
    sub_100019154(v13);
    sub_100019994(v2, &qword_10021BF30);
    if (!v5) {
      goto LABEL_11;
    }
LABEL_10:
    v5(0, 0);
    goto LABEL_11;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32))(v1, v2, v9);
  if (!swift_unknownObjectWeakLoadStrong())
  {
    uint64_t v18 = sub_10000E14C();
    v19(v18);
    goto LABEL_2;
  }
  sub_100012EE4();
  Client.type.getter();
  sub_10002B910();
  sub_100023C70();
  v14();
  uint64_t v15 = ClientType.rawValue.getter();
  if (v15 != ClientType.rawValue.getter())
  {
    v3[OBJC_IVAR____TtC7parsecd16ClientConnection_parClientRequiresStateChangeNotifications] = 1;
    sub_100012EE4();
    Client.type.getter();
    sub_10002B910();
    sub_100023C70();
    v20();
    swift_unknownObjectRetain();
    v3;
    sub_100030358((uint64_t)v5);
    sub_10001CE08();
    sub_100019154(v13);
    uint64_t v21 = sub_10000E14C();
    v22(v21);
    swift_unknownObjectRelease();
    goto LABEL_11;
  }
  uint64_t v16 = sub_10000E14C();
  v17(v16);
  sub_100019154(v13);
  swift_unknownObjectRelease();
  if (v5) {
    goto LABEL_10;
  }
LABEL_11:
  sub_10000DFB8();
}

uint64_t sub_100012EE4()
{
  return sub_10001DAF4((uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__client, (void (*)(uint64_t))sub_10002A150);
}

uint64_t SessionFilename.init(fromUserGUID:state:processID:uploadPending:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5)
{
  uint64_t v6 = sub_10002572C((uint64_t *)&unk_10021E620);
  __chkstk_darwin(v6 - 8);
  sub_10000DFD0();
  uint64_t v9 = v8 - v7;
  uint64_t v10 = type metadata accessor for UUID();
  sub_100020C48();
  uint64_t v12 = v11;
  __chkstk_darwin(v13);
  sub_10000DFD0();
  uint64_t v16 = v15 - v14;
  uint64_t v17 = v5 + OBJC_IVAR____TtC7parsecd15SessionFilename_sessionID;
  UUID.init()();
  uint64_t v18 = (unsigned int *)(v5 + OBJC_IVAR____TtC7parsecd15SessionFilename_processID);
  uint64_t v26 = self;
  id v19 = [v26 processInfo];
  unsigned int v20 = [v19 processIdentifier];

  uint64_t v27 = v18;
  *uint64_t v18 = v20;
  uint64_t v21 = (unsigned char *)(v5 + OBJC_IVAR____TtC7parsecd15SessionFilename_state);
  *(unsigned char *)(v5 + OBJC_IVAR____TtC7parsecd15SessionFilename_state) = 0;
  uint64_t v22 = (unsigned char *)(v5 + OBJC_IVAR____TtC7parsecd15SessionFilename_uploadPending);
  *(unsigned char *)(v5 + OBJC_IVAR____TtC7parsecd15SessionFilename_uploadPending) = 0;
  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  if (sub_100027BA4(v9, 1, v10) == 1)
  {
    swift_release();
    sub_1000BD6F4(v9);
    return 0;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))(v16, v9, v10);
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 24))(v17, v16, v10);
    swift_endAccess();
    unsigned int v23 = a4;
    if ((a4 & 0x100000000) != 0)
    {
      id v24 = [v26 processInfo];
      unsigned int v23 = [v24 processIdentifier];
    }
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v16, v10);
    sub_10002A5CC();
    *uint64_t v27 = v23;
    sub_10002A5CC();
    *uint64_t v21 = a3;
    sub_10002A5CC();
    unsigned char *v22 = a5 & 1;
  }
  return v5;
}

void *sub_10001319C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  Date.init()();
  uint64_t v4 = type metadata accessor for SessionTokens(0);
  id result = (void *)UUID.init()();
  if (a1)
  {
    swift_unknownObjectRetain();
    sub_100008694();
    uint64_t v6 = sub_100013298();
    swift_release();
    if (v6) {
      sub_100088454();
    }
    sub_100006998();
    uint64_t v7 = sub_100013298();
    swift_release();
    if (v7) {
      sub_100088454();
    }
    swift_unknownObjectRelease_n();
    id result = _swiftEmptySetSingleton;
    if (!_swiftEmptySetSingleton[2])
    {
      swift_bridgeObjectRelease();
      id result = 0;
    }
    *(void *)(a2 + *(int *)(v4 + 24)) = result;
  }
  else
  {
    *(void *)(a2 + *(int *)(v4 + 24)) = 0;
  }
  return result;
}

uint64_t sub_100013298()
{
  swift_retain();
  uint64_t v0 = sub_1000132D4();
  swift_release();
  return v0;
}

uint64_t sub_1000132D4()
{
  sub_10001DDB0();
  sub_10002C22C();
  uint64_t v2 = *(void *)(v1 + 16);
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v0);
  return v2;
}

void sub_100013318()
{
  sub_10000DFE0();
  uint64_t v3 = v2;
  uint64_t v61 = v4;
  uint64_t v62 = v5;
  uint64_t v63 = v6;
  uint64_t v60 = *v2;
  type metadata accessor for Client();
  sub_100020C48();
  __chkstk_darwin(v7);
  sub_10000E04C();
  uint64_t v8 = type metadata accessor for UserAgent();
  sub_100020C48();
  uint64_t v10 = v9;
  __chkstk_darwin(v11);
  uint64_t v12 = sub_10002127C();
  uint64_t v13 = type metadata accessor for SessionTokens(v12);
  uint64_t v14 = sub_100016544(v13);
  __chkstk_darwin(v14);
  sub_100017DC8();
  *((unsigned char *)v3 + OBJC_IVAR____TtC7parsecd13ClientSession_fulfilled) = 0;
  *(uint64_t *)((char *)v3 + OBJC_IVAR____TtC7parsecd13ClientSession_connectionInvalidationFeedbacks) = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v15 = (uint64_t)v3 + OBJC_IVAR____TtC7parsecd13ClientSession_tailLog;
  uint64_t v59 = type metadata accessor for Logger();
  sub_10002538C(v15, 1, 1, v59);
  id v16 = [objc_allocWithZone((Class)_CPClientSession) init];
  if (v16)
  {
    uint64_t v17 = v16;
    *(uint64_t *)((char *)v3 + OBJC_IVAR____TtC7parsecd13ClientSession_backingStore) = (uint64_t)v16;
    type metadata accessor for SessionType();
    sub_100016608();
    v18();
    v3[3] = (uint64_t)&off_1001FD220;
    swift_unknownObjectUnownedInit();
    id v19 = v3;
    id v20 = v17;
    sub_10000AE90(v63, v0);
    sub_10002D8D8(v0, (uint64_t)v19 + OBJC_IVAR____TtC7parsecd13ClientSession_tokens);
    uint64_t v58 = v8;
    char v56 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
    v56((char *)v19 + OBJC_IVAR____TtC7parsecd13ClientSession_userAgent, v61, v8);
    uint64_t v21 = sub_10002E9B4();
    sub_10001C4FC(v21, v22, v23, v24);
    uint64_t v25 = sub_10002E9B4();
    sub_1000314E0(v25, v26, v27, v28, v60);
    sub_10000E308();
    id v29 = sub_100005F1C(v20);
    uint64_t v31 = v30;
    swift_unknownObjectRelease();
    v19[4] = (uint64_t)v29;
    v19[5] = v31;
    if (v62)
    {
      uint64_t v55 = v0;
      id v32 = v62;
      sub_10000CB40();
      int v34 = v33;

      if (v34 == 2)
      {
        if (qword_100218B38 != -1) {
          swift_once();
        }
        sub_10002A10C(v59, (uint64_t)qword_1002369C0);
        v56(v1, v61, v58);
        id v35 = v32;
        unint64_t v36 = Logger.logObject.getter();
        os_log_type_t v37 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v36, v37))
        {
          uint64_t v38 = swift_slowAlloc();
          uint64_t v64 = sub_10001AB54();
          *(_DWORD *)uint64_t v38 = 67240450;
          os_log_type_t v57 = v37;
          [v35 type];
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          *(_WORD *)(v38 + 8) = 2082;
          UserAgent.client.getter();
          uint64_t v39 = Client.name.getter();
          unint64_t v41 = v40;
          sub_10000E040();
          v42();
          uint64_t v43 = sub_10001C274(v39, v41, &v64);
          sub_10002EBB4(v43);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          uint64_t v44 = *(void (**)(void))(v10 + 8);
          sub_1000292E0();
          v44();
          _os_log_impl((void *)&_mh_execute_header, v36, v57, "Adding first session feedback %{public}d failed for client: %{public}s", (uint8_t *)v38, 0x12u);
          swift_arrayDestroy();
          sub_100017D40();
          sub_100017D40();

          swift_release();
          sub_1000E97F8(v63, &qword_100219ED0);
          ((void (*)(uint64_t, uint64_t))v44)(v61, v58);
        }
        else
        {

          swift_release();
          uint64_t v53 = *(void (**)(void))(v10 + 8);
          sub_1000292E0();
          v53();

          sub_1000E97F8(v63, &qword_100219ED0);
          ((void (*)(uint64_t, uint64_t))v53)(v61, v58);
        }
      }
      else
      {

        swift_release();
        sub_1000E97F8(v63, &qword_100219ED0);
        sub_100025454();
        v52();
      }
      sub_10000E040();
      v54();
      sub_100027C78(v55, (void (*)(void))type metadata accessor for SessionTokens);
    }
    else
    {

      swift_release();
      sub_1000E97F8(v63, &qword_100219ED0);
      sub_100025454();
      v50();
      sub_10000E040();
      v51();
      sub_100027C78(v0, (void (*)(void))type metadata accessor for SessionTokens);
    }
  }
  else
  {
    if (qword_100218B38 != -1) {
      swift_once();
    }
    sub_10002A10C(v59, (uint64_t)qword_1002369C0);
    uint64_t v45 = Logger.logObject.getter();
    os_log_type_t v46 = static os_log_type_t.fault.getter();
    if (sub_100019BAC(v46))
    {
      uint64_t v47 = (uint8_t *)sub_100023E24();
      *(_WORD *)uint64_t v47 = 0;
      _os_log_impl((void *)&_mh_execute_header, v45, (os_log_type_t)v0, "Failed to create _CPClientSession object", v47, 2u);
      sub_100017D40();
    }
    swift_release();

    sub_1000E97F8(v63, &qword_100219ED0);
    sub_100025454();
    v48();
    type metadata accessor for SessionType();
    sub_10000E060();
    sub_10000E040();
    v49();
    swift_bridgeObjectRelease();
    sub_1000E97F8(v15, (uint64_t *)&unk_10021E630);
    swift_deallocPartialClassInstance();
  }
  sub_10000DFB8();
}

uint64_t sub_100013ABC()
{
  sub_10002572C(&qword_100219280);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1001A3750;
  strcpy((char *)(inited + 32), "session_start");
  *(_WORD *)(inited + 46) = -4864;
  [v0 sessionStart];
  *(void *)(inited + 48) = v2;
  *(void *)(inited + 72) = &type metadata for Double;
  *(void *)(inited + 80) = 0x746E656761;
  *(void *)(inited + 88) = 0xE500000000000000;
  uint64_t v3 = sub_100013C38(v0, (SEL *)&selRef_agent);
  if (v4) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = 0;
  }
  if (v4) {
    unint64_t v6 = v4;
  }
  else {
    unint64_t v6 = 0xE000000000000000;
  }
  *(void *)(inited + 96) = v5;
  *(void *)(inited + 104) = v6;
  *(void *)(inited + 120) = &type metadata for String;
  *(void *)(inited + 128) = 0x6975675F72657375;
  *(void *)(inited + 136) = 0xE900000000000064;
  uint64_t v7 = sub_100013C38(v0, (SEL *)&selRef_userGuidString);
  if (v8) {
    uint64_t v9 = v7;
  }
  else {
    uint64_t v9 = 0;
  }
  if (v8) {
    unint64_t v10 = v8;
  }
  else {
    unint64_t v10 = 0xE000000000000000;
  }
  *(void *)(inited + 144) = v9;
  *(void *)(inited + 152) = v10;
  *(void *)(inited + 168) = &type metadata for String;
  strcpy((char *)(inited + 176), "country_code");
  *(unsigned char *)(inited + 189) = 0;
  *(_WORD *)(inited + 190) = -5120;
  uint64_t v11 = sub_100013C38(v0, (SEL *)&selRef_countryCode);
  *(void *)(inited + 216) = &type metadata for String;
  if (v12) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = 0;
  }
  if (v12) {
    unint64_t v14 = v12;
  }
  else {
    unint64_t v14 = 0xE000000000000000;
  }
  *(void *)(inited + 192) = v13;
  *(void *)(inited + 200) = v14;
  return Dictionary.init(dictionaryLiteral:)();
}

uint64_t sub_100013C38(void *a1, SEL *a2)
{
  id v2 = [a1 *a2];
  if (!v2) {
    return 0;
  }
  uint64_t v3 = v2;
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v4;
}

uint64_t sub_100013C98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v52 = a3;
  uint64_t v6 = type metadata accessor for URL();
  sub_100020C48();
  uint64_t v8 = v7;
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v51 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  unint64_t v14 = (char *)&v45 - v13;
  __chkstk_darwin(v12);
  id v16 = (char *)&v45 - v15;
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v18 = Strong;
    sub_10000C7D0(a1, a2);
    if (v3)
    {
      return swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v48 = v18;
      uint64_t v49 = v6;
      uint64_t v50 = v8;
      id v20 = [self defaultManager];
      URL.path.getter();
      NSString v21 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      sub_10002572C(qword_10021CA78);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1001A2A20;
      *(void *)(inited + 64) = &type metadata for Int;
      *(void *)(inited + 32) = NSFilePosixPermissions;
      *(void *)(inited + 40) = 384;
      type metadata accessor for FileAttributeKey(0);
      sub_100019B00((unint64_t *)&qword_100219240, type metadata accessor for FileAttributeKey);
      uint64_t v23 = NSFilePosixPermissions;
      uint64_t v24 = Dictionary.init(dictionaryLiteral:)();
      unsigned __int8 v25 = sub_1000074EC((uint64_t)v21, 0, v24, v20);

      if (v25)
      {
        sub_10003010C();
        uint64_t v27 = v49;
        uint64_t v26 = v50;
        uint64_t v28 = *(void (**)(void))(v50 + 16);
        sub_100024B98();
        v28();
        id v29 = sub_100009A78((uint64_t)v14);
        uint64_t v33 = qword_100218B40;
        id v34 = v29;
        if (v33 != -1) {
          swift_once();
        }
        uint64_t v35 = type metadata accessor for Logger();
        sub_10002A10C(v35, (uint64_t)qword_1002369D8);
        unint64_t v36 = v51;
        sub_100024B98();
        v28();
        os_log_type_t v37 = Logger.logObject.getter();
        os_log_type_t v38 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v37, v38))
        {
          os_log_t v46 = v37;
          uint64_t v39 = swift_slowAlloc();
          id v47 = v34;
          unint64_t v40 = (uint8_t *)v39;
          uint64_t v45 = swift_slowAlloc();
          uint64_t v54 = v45;
          *(_DWORD *)unint64_t v40 = 136315138;
          uint64_t v41 = URL.lastPathComponent.getter();
          uint64_t v53 = sub_10001C274(v41, v42, &v54);
          uint64_t v26 = v50;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v26 + 8))(v36, v27);
          os_log_t v43 = v46;
          _os_log_impl((void *)&_mh_execute_header, v46, v38, "new session file: %s", v40, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          id v34 = v47;
          swift_slowDealloc();
          swift_unknownObjectRelease();
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v26 + 8))(v36, v27);

          swift_unknownObjectRelease();
        }

        uint64_t v44 = v52;
        (*(void (**)(uint64_t, char *, uint64_t))(v26 + 32))(v52, v16, v27);
        uint64_t result = type metadata accessor for FeedbackFile();
        *(void *)(v44 + *(int *)(result + 20)) = v34;
      }
      else
      {
        type metadata accessor for SessionFileCreationError();
        sub_100019B00(&qword_100219718, (void (*)(uint64_t))type metadata accessor for SessionFileCreationError);
        sub_100025B74();
        uint64_t v31 = v30;
        *uint64_t v30 = URL.path.getter();
        v31[1] = v32;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        swift_unknownObjectRelease();
        return (*(uint64_t (**)(char *, uint64_t))(v50 + 8))(v16, v49);
      }
    }
  }
  else
  {
    type metadata accessor for SessionFileCreationError();
    sub_100019B00(&qword_100219718, (void (*)(uint64_t))type metadata accessor for SessionFileCreationError);
    sub_100025B74();
    swift_storeEnumTagMultiPayload();
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_1000142AC()
{
  unint64_t v14 = v0;
  sub_100017F00();
  if (swift_weakLoadStrong())
  {
    ConfigurationManager.configAccessProvider.getter();
    swift_release();
    swift_getObjectType();
    char v1 = dispatch thunk of ConfigAccessProvider.hasPendingTasks.getter();
    swift_unknownObjectRelease();
    if (v1) {
      goto LABEL_14;
    }
  }
  unint64_t v2 = v0[11];
  if (v2)
  {
    uint64_t v3 = qword_100218B20;
    swift_bridgeObjectRetain();
    if (v3 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_10002A10C(v4, (uint64_t)qword_100236978);
    swift_bridgeObjectRetain();
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = v0[10];
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 136315138;
      swift_bridgeObjectRetain();
      v0[8] = sub_10001C274(v7, v2, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "fetching bag for: %s", v8, 0xCu);
      swift_arrayDestroy();
      sub_100017D40();
      sub_100017D40();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }
  }
  sub_100017F00();
  uint64_t Strong = swift_weakLoadStrong();
  v0[12] = Strong;
  if (!Strong)
  {
LABEL_14:
    sub_10000E1BC();
    return v11();
  }
  else
  {
    uint64_t v10 = (void *)swift_task_alloc();
    v0[13] = v10;
    *uint64_t v10 = v0;
    v10[1] = sub_10000DBCC;
    return ConfigurationManager.configuration(for:forceFetch:)(7, 0);
  }
}

uint64_t sub_100014590@<X0>(uint64_t a1@<X8>)
{
  if (swift_unknownObjectWeakLoadStrong())
  {
    if (sub_1000146F0())
    {
      uint64_t v2 = type metadata accessor for ShouldThrottleConfigFetchResult();
      sub_10002538C(a1, 1, 1, v2);
      return swift_unknownObjectRelease();
    }
    sub_100102320(1);
    swift_unknownObjectRelease();
    uint64_t v4 = enum case for ShouldThrottleConfigFetchResultReason.termsAndConditionsNotAccepted(_:);
  }
  else
  {
    uint64_t v4 = enum case for ShouldThrottleConfigFetchResultReason.noAssembly(_:);
  }
  uint64_t ResultReason = type metadata accessor for ShouldThrottleConfigFetchResultReason();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(ResultReason - 8) + 104))(a1, v4, ResultReason);
  uint64_t v6 = enum case for ShouldThrottleConfigFetchResult.yes(_:);
  uint64_t v7 = type metadata accessor for ShouldThrottleConfigFetchResult();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 104))(a1, v6, v7);

  return sub_10002538C(a1, 0, 1, v7);
}

uint64_t sub_1000146F0()
{
  uint64_t v1 = v0;
  if (sub_100014774()) {
    return 1;
  }
  uint64_t v3 = *(os_unfair_lock_s **)(*(void *)(v0 + 16) + 16);
  swift_retain();
  os_unfair_lock_lock(v3);
  if (*(unsigned char *)(v1 + 24))
  {
    uint64_t v2 = 1;
  }
  else
  {
    int v4 = BYSetupAssistantNeedsToRun();
    uint64_t v2 = v4 ^ 1u;
    *(unsigned char *)(v1 + 24) = v4 ^ 1;
  }
  os_unfair_lock_unlock(v3);
  swift_release();
  return v2;
}

uint64_t sub_100014774()
{
  Lock.lock()();
  sub_100017F00();
  uint64_t v1 = *(unsigned __int8 *)(v0 + 24);
  Lock.unlock()();
  return v1;
}

uint64_t sub_1000147BC()
{
  if (*(unsigned char *)(v0 + 81) != 1) {
    (*(void (**)(void))(*(void *)v0 + 400))();
  }
  swift_weakDestroy();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  sub_100017E10();
  sub_100025680(v0 + *(void *)(v1 + 136), (uint64_t *)&unk_100219728);
  sub_100017E10();
  type metadata accessor for Date();
  sub_10000E004();
  sub_10000E040();
  v2();
  swift_release();
  return v0;
}

void sub_1000148D0()
{
  sub_10000DFE0();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v4 = type metadata accessor for UserAgent();
  sub_100020C48();
  uint64_t v6 = v5;
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v9);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (!Strong)
  {
LABEL_16:
    sub_10000DFB8();
    return;
  }
  uint64_t v11 = Strong;
  if (v3)
  {
    uint64_t v12 = *(uint64_t **)(v0 + 80);
    id v37 = v3;
    uint64_t v13 = os_transaction_create();
    if (v13)
    {
      id v34 = v12;
      uint64_t v36 = v13;
      unint64_t v14 = *(void **)(v11 + 32);
      if (v14)
      {
        id v15 = v37;
        swift_unknownObjectRetain();
        uint64_t v16 = sub_1000E9460(v15);
        if (v17 >> 60 == 15)
        {
          Class isa = 0;
        }
        else
        {
          uint64_t v21 = v16;
          unint64_t v22 = v17;
          Class isa = Data._bridgeToObjectiveC()().super.isa;
          sub_10000A330(v21, v22);
        }
        UserAgent.fullString.getter();
        NSString v23 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v14 didReceiveFeedbackData:isa agent:v23];
        swift_unknownObjectRelease();
      }
      Class isa = *(Class *)(v0 + 48);
      sub_100016608();
      v24();
      unint64_t v25 = (*(unsigned __int8 *)(v6 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
      unint64_t v26 = (v8 + v25 + 7) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v27 = (char *)swift_allocObject();
      *((void *)v27 + 2) = v36;
      *((void *)v27 + 3) = v11;
      *((void *)v27 + 4) = v34;
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(&v27[v25], (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
      *(void *)&v27[v26] = v1;
      *(void *)&v27[(v26 + 15) & 0xFFFFFFFFFFFFFFF8] = v37;
      v39[4] = sub_1000309F0;
      v39[5] = v27;
      v39[0] = _NSConcreteStackBlock;
      v39[1] = 1107296256;
      v39[2] = sub_1000085EC;
      v39[3] = &unk_100200328;
      uint64_t v28 = _Block_copy(v39);
      type metadata accessor for DispatchQoS();
      id v34 = &v33;
      sub_100020C48();
      __chkstk_darwin(v29);
      sub_100017DE0();
      id v37 = v37;
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_retain();
      static DispatchQoS.unspecified.getter();
      type metadata accessor for DispatchWorkItemFlags();
      uint64_t v33 = (uint64_t)&v33;
      sub_100020C48();
      __chkstk_darwin(v30);
      sub_100016500();
      os_log_type_t v38 = _swiftEmptyArrayStorage;
      sub_10003045C();
      sub_10002572C((uint64_t *)&unk_10021BAF0);
      sub_1000301A0();
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v28);
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();

      sub_100027EC0();
      v31();
      sub_1000283AC();
      v32();
      swift_release();
      goto LABEL_16;
    }
    swift_unknownObjectRelease();
    sub_10000DFB8();
  }
  else
  {
    sub_10000DFB8();
    swift_unknownObjectRelease();
  }
}

void sub_100014D04(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(void *, id))
{
  id v9 = [self defaultCenter];
  [v9 addObserver:a5 selector:"bagChangeNotificationWithNotification:" name:@"PARBagChangeNotification" object:0];

  if (a1)
  {
    id v10 = a1;
    uint64_t v11 = sub_10000896C(v10, (SEL *)&selRef_version);
    if (v12) {
      uint64_t v13 = v11;
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v33 = v13;
    if (v12) {
      unint64_t v14 = v12;
    }
    else {
      unint64_t v14 = 0xE000000000000000;
    }
    if (([v10 feedbackEnabled] & 1) == 0)
    {
      if (qword_100218B30 != -1) {
        swift_once();
      }
      uint64_t v15 = type metadata accessor for Logger();
      uint64_t v16 = (void *)sub_10001DD88(v15, (uint64_t)qword_1002369A8);
      os_log_type_t v17 = static os_log_type_t.default.getter();
      if (sub_100017D10(v17))
      {
        uint64_t v18 = (uint8_t *)sub_100017D90();
        *(_DWORD *)uint64_t v18 = 134349056;
        uint64_t v35 = ClientType.rawValue.getter();
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        sub_10002E728();
        _os_log_impl(v19, v20, v21, v22, v18, 0xCu);
        sub_100017D40();
      }
    }
    if (qword_100218B20 != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    sub_10002A10C(v23, (uint64_t)qword_100236978);
    swift_bridgeObjectRetain();
    uint64_t v24 = (void *)Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.default.getter();
    if (sub_100017D10(v25))
    {
      uint64_t v26 = swift_slowAlloc();
      uint64_t v35 = sub_10001AB54();
      *(_DWORD *)uint64_t v26 = 136315394;
      swift_bridgeObjectRetain();
      sub_10001C274(v33, v14, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v26 + 12) = 2050;
      ClientType.rawValue.getter();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_10002E728();
      _os_log_impl(v27, v28, v29, v30, (uint8_t *)v26, 0x16u);
      swift_arrayDestroy();
      sub_100017D40();
      sub_100017D40();

      if (!a6) {
        return;
      }
    }
    else
    {

      swift_bridgeObjectRelease_n();
      if (!a6) {
        return;
      }
    }
    id v32 = sub_100030D6C(a2);
    a6(a1, v32);
    swift_errorRelease();
    return;
  }
  if (a6)
  {
    id v31 = sub_100030D6C(a2);
    a6(0, v31);
    swift_errorRelease();
  }
}

id PARBag.findConfig(forUserAgent:)(uint64_t a1, uint64_t a2)
{
  id v5 = objc_allocWithZone((Class)PARBag);
  swift_bridgeObjectRetain();
  return sub_10001519C(v2, a1, a2);
}

id sub_10001519C(void *a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    NSString v5 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v5 = 0;
  }
  id v6 = [v3 initWithBag:a1 userAgent:v5];

  return v6;
}

Swift::Void __swiftcall NSFileManager.validateCacheSubdirectories()()
{
  type metadata accessor for OSSignpostID();
  sub_100020C48();
  uint64_t v63 = v1;
  uint64_t v64 = v0;
  __chkstk_darwin(v0);
  uint64_t v62 = (char *)v61 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_10002572C(&qword_10021BB20);
  __chkstk_darwin(v3 - 8);
  sub_100024A64();
  uint64_t v6 = v4 - v5;
  uint64_t v8 = __chkstk_darwin(v7);
  id v10 = (char *)v61 - v9;
  __chkstk_darwin(v8);
  unint64_t v12 = (char *)v61 - v11;
  uint64_t v13 = type metadata accessor for URL();
  sub_100020C48();
  uint64_t v15 = v14;
  __chkstk_darwin(v16);
  sub_100024A64();
  uint64_t v65 = v17 - v18;
  uint64_t v20 = __chkstk_darwin(v19);
  unint64_t v22 = (char *)v61 - v21;
  __chkstk_darwin(v20);
  uint64_t v24 = (char *)v61 - v23;
  NSFileManager.parsecdAssetsDirectoryURL.getter();
  if (sub_100027BA4((uint64_t)v12, 1, v13) == 1)
  {
    sub_10003CB40((uint64_t)v12);
    if (qword_100218C58 != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    uint64_t v26 = sub_10001DD88(v25, (uint64_t)qword_100236C50);
    os_log_type_t v27 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v26, v27))
    {
      *(_WORD *)sub_100023E24() = 0;
      sub_100029FC0((void *)&_mh_execute_header, v28, v29, "unable to obtain cache assets directory");
      sub_100017D40();
    }
  }
  else
  {
    sub_10000E0F4();
    v30();
    URL.path.getter();
    NSString v31 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    unsigned __int8 v32 = sub_100027E70();

    if ((v32 & 1) == 0)
    {
      v61[3] = static os_signpost_type_t.event.getter();
      if (qword_100218C50 != -1) {
        swift_once();
      }
      sub_10002572C((uint64_t *)&unk_10021BB00);
      uint64_t v33 = swift_allocObject();
      *(_OWORD *)(v33 + 16) = xmmword_1001A2A20;
      *(void *)(v33 + 56) = &type metadata for String;
      unint64_t v34 = sub_1000303C8();
      sub_100017EF0(v34);
      sub_10002AD8C(v35);
      uint64_t v36 = v62;
      static OSSignpostID.exclusive.getter();
      sub_10002C284();
      sub_100027550();
      os_signpost(_:dso:log:name:signpostID:_:_:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v63 + 8))(v36, v64);
      NSFileManager.createRequiredCacheSubdirectories()();
    }
    (*(void (**)(char *, uint64_t))(v15 + 8))(v24, v13);
  }
  NSFileManager.parsecdCustomFBDirectoryURL.getter();
  if (sub_100027BA4((uint64_t)v10, 1, v13) == 1)
  {
    sub_10003CB40((uint64_t)v10);
    if (qword_100218C58 != -1) {
      swift_once();
    }
    uint64_t v37 = type metadata accessor for Logger();
    os_log_type_t v38 = sub_10001DD88(v37, (uint64_t)qword_100236C50);
    os_log_type_t v39 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v38, v39))
    {
      *(_WORD *)sub_100023E24() = 0;
      sub_100029FC0((void *)&_mh_execute_header, v40, v41, "unable to obtain cache custom feedback directory");
      sub_100017D40();
    }
  }
  else
  {
    sub_10000E0F4();
    v42();
    URL.path.getter();
    NSString v43 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    unsigned __int8 v44 = sub_100027E70();

    if ((v44 & 1) == 0)
    {
      static os_signpost_type_t.event.getter();
      if (qword_100218C50 != -1) {
        swift_once();
      }
      sub_10002572C((uint64_t *)&unk_10021BB00);
      uint64_t v45 = swift_allocObject();
      *(_OWORD *)(v45 + 16) = xmmword_1001A2A20;
      *(void *)(v45 + 56) = &type metadata for String;
      unint64_t v46 = sub_1000303C8();
      sub_100017EF0(v46);
      sub_10002AD8C(v47);
      uint64_t v48 = v62;
      static OSSignpostID.exclusive.getter();
      sub_10002C284();
      sub_100027550();
      os_signpost(_:dso:log:name:signpostID:_:_:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v63 + 8))(v48, v64);
      NSFileManager.createRequiredCacheSubdirectories()();
    }
    (*(void (**)(char *, uint64_t))(v15 + 8))(v22, v13);
  }
  NSFileManager.parsecdSessionFBDirectoryURL.getter();
  if (sub_100027BA4(v6, 1, v13) == 1)
  {
    sub_10003CB40(v6);
    if (qword_100218C58 != -1) {
      swift_once();
    }
    uint64_t v49 = type metadata accessor for Logger();
    uint64_t v50 = sub_10001DD88(v49, (uint64_t)qword_100236C50);
    os_log_type_t v51 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v50, v51))
    {
      *(_WORD *)sub_100023E24() = 0;
      sub_100018528((void *)&_mh_execute_header, v52, v53, "unable to obtain cache session feedback directory");
      sub_100017D40();
    }
  }
  else
  {
    sub_10000E0F4();
    v54();
    URL.path.getter();
    NSString v55 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    unsigned __int8 v56 = sub_100027E70();

    if ((v56 & 1) == 0)
    {
      static os_signpost_type_t.event.getter();
      if (qword_100218C50 != -1) {
        swift_once();
      }
      sub_10002572C((uint64_t *)&unk_10021BB00);
      uint64_t v57 = swift_allocObject();
      *(_OWORD *)(v57 + 16) = xmmword_1001A2A20;
      *(void *)(v57 + 56) = &type metadata for String;
      unint64_t v58 = sub_1000303C8();
      sub_100017EF0(v58);
      sub_10002AD8C(v59);
      uint64_t v60 = v62;
      static OSSignpostID.exclusive.getter();
      sub_10002C284();
      sub_100027550();
      os_signpost(_:dso:log:name:signpostID:_:_:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v63 + 8))(v60, v64);
      NSFileManager.createRequiredCacheSubdirectories()();
    }
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v65, v13);
  }
}

uint64_t sub_1000159F4()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10002572C((uint64_t *)&unk_100219728);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  uint64_t v5 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v38 - v6;
  uint64_t v9 = v0 + 24;
  uint64_t v8 = *(void *)(v0 + 24);
  uint64_t v10 = *(void *)(v0 + 32);
  char v11 = *(unsigned char *)(v0 + 41);
  unint64_t v12 = (void *)(v0 + 48);
  uint64_t v13 = *(void *)(v0 + 48);
  uint64_t v39 = v8;
  uint64_t v40 = v12;
  uint64_t v14 = *(void *)(v1 + 56);
  uint64_t v15 = *(void *)(v1 + 64);
  uint64_t v41 = *(void *)(v1 + 72);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v42 = v15;
  swift_bridgeObjectRetain();
  uint64_t v16 = sub_10002DF14();
  sub_10000D134(v16);
  sub_10002CE84();
  uint64_t v18 = v1 + *(void *)(v17 + 136);
  if ((v11 & 1) == 0 && v14)
  {
    sub_100017F00();
    sub_100006858(v18, (uint64_t)v7);
    uint64_t v19 = type metadata accessor for OSSignpostID();
    uint64_t result = sub_100027BA4((uint64_t)v7, 1, v19);
    if (result != 1)
    {
      swift_bridgeObjectRetain();
      static os_signpost_type_t.end.getter();
      sub_10003065C(v13);
      sub_1000271A4();
      sub_100026158();
      sub_10001BB64(v21, v22, v23, v24, v25, v26, v39, v10, v38, v39);
      swift_bridgeObjectRelease();
      sub_10000E004();
      goto LABEL_7;
    }
LABEL_17:
    __break(1u);
    return result;
  }
  sub_100017F00();
  sub_100006858(v18, (uint64_t)v5);
  uint64_t v27 = type metadata accessor for OSSignpostID();
  uint64_t result = sub_100027BA4((uint64_t)v5, 1, v27);
  if (result == 1)
  {
    __break(1u);
    goto LABEL_17;
  }
  static os_signpost_type_t.end.getter();
  sub_10003065C(v13);
  os_signpost(_:dso:log:name:signpostID:)();
  sub_10000E004();
LABEL_7:
  sub_10000E040();
  v28();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v30 = Strong;
    uint64_t v43 = v1;
    swift_retain();
    String.init<A>(describing:)();
    NSString v31 = *(os_unfair_lock_s **)(*(void *)(v30 + 32) + 16);
    os_unfair_lock_lock(v31);
    sub_100021474(v30, v32, v33, v34, (uint64_t)&off_100200DC0);
    os_unfair_lock_unlock(v31);
    swift_bridgeObjectRelease();
    if (swift_unknownObjectWeakLoadStrong())
    {
      uint64_t v35 = *(void *)(v30 + 24);
      swift_getObjectType();
      uint64_t v36 = *(void (**)(void))(v35 + 16);
      swift_retain();
      sub_100025BCC();
      v36();
      swift_release_n();
      swift_unknownObjectRelease();
    }
    else
    {
      swift_release();
    }
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    *(void *)uint64_t v9 = 0;
    *(void *)(v9 + 8) = 0;
    *(unsigned char *)(v9 + 16) = 0;
    *(unsigned char *)(v1 + 41) = 1;
    uint64_t v37 = v40;
    *uint64_t v40 = 0;
    v37[1] = 0;
    *(void *)(v1 + 64) = _swiftEmptyArrayStorage;
    *(void *)(v1 + 72) = 0;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    return sub_1000264BC();
  }
  else
  {
    if (sub_10011590C())
    {
      static os_log_type_t.fault.getter();
      os_log(_:dso:log:type:_:)();
    }
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_100015DF0()
{
  uint64_t v3 = (void *)v0;
  uint64_t v4 = sub_10002572C((uint64_t *)&unk_100219728);
  __chkstk_darwin(v4 - 8);
  sub_100027570();
  __chkstk_darwin(v5);
  sub_100024BEC();
  char v6 = *(unsigned char *)(v0 + 41);
  uint64_t v7 = *(void *)(v0 + 48);
  uint64_t v8 = v3[7];
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v9 = sub_10002DF14();
  sub_100012A2C(v9);
  sub_10002CE84();
  uint64_t v11 = (uint64_t)v3 + *(void *)(v10 + 136);
  if ((v6 & 1) == 0 && v8)
  {
    sub_100017F00();
    sub_100006858(v11, v1);
    uint64_t v12 = type metadata accessor for OSSignpostID();
    uint64_t result = sub_100027BA4(v1, 1, v12);
    if (result != 1)
    {
      swift_bridgeObjectRetain();
      uint64_t v14 = (os_unfair_lock_s *)static os_signpost_type_t.end.getter();
      sub_100029ABC(v7);
      sub_1000271A4();
      sub_100026158();
      sub_10001BB64(v15, v16, v17, v18, v19, v20, v32, v31, v30, v31);
      swift_bridgeObjectRelease();
      sub_10000E004();
      goto LABEL_7;
    }
LABEL_15:
    __break(1u);
    return result;
  }
  sub_100017F00();
  sub_100006858(v11, v2);
  uint64_t v21 = type metadata accessor for OSSignpostID();
  uint64_t result = sub_100027BA4(v2, 1, v21);
  if (result == 1)
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v14 = (os_unfair_lock_s *)static os_signpost_type_t.end.getter();
  sub_100029ABC(v7);
  os_signpost(_:dso:log:name:signpostID:)();
  sub_10000E004();
LABEL_7:
  sub_10000E040();
  v22();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v24 = Strong;
    swift_retain();
    String.init<A>(describing:)();
    sub_10000E1CC();
    sub_100021474(v24, v25, v26, v27, (uint64_t)&off_100200DC0);
    os_unfair_lock_unlock(v14);
    swift_bridgeObjectRelease();
    if (swift_unknownObjectWeakLoadStrong())
    {
      uint64_t v28 = *(void *)(v24 + 24);
      swift_getObjectType();
      uint64_t v29 = *(void (**)(void))(v28 + 16);
      swift_retain();
      sub_100025BCC();
      v29();
      swift_release_n();
      swift_unknownObjectRelease();
    }
    else
    {
      swift_release();
    }
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    sub_10002AE14();
    v3[8] = _swiftEmptyArrayStorage;
    v3[9] = 0;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    return sub_1000264BC();
  }
  else
  {
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_100016170()
{
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = swift_task_alloc();
  uint64_t v3 = (void *)sub_10002AC58(v2);
  *uint64_t v3 = v4;
  v3[1] = sub_1000179CC;
  uint64_t v5 = sub_100016684();
  return sub_10002E3C0(v5, v6, v7, v8, v9, v1);
}

uint64_t sub_10001621C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  swift_beginAccess();
  uint64_t v10 = sub_100016790(a2, a3);
  swift_endAccess();
  uint64_t result = swift_release();
  if (!v10)
  {
    if (swift_unknownObjectWeakLoadStrong())
    {
      uint64_t v12 = *(void *)(a1 + 24);
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 40))(a4, a5, ObjectType, v12);
      swift_unknownObjectRelease();
    }
    uint64_t v14 = swift_getObjectType();
    uint64_t v15 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a5 + 32))(v14, a5);
    static os_log_type_t.error.getter();
    sub_10002572C((uint64_t *)&unk_10021BB00);
    uint64_t v16 = swift_allocObject();
    *(_OWORD *)(v16 + 16) = xmmword_1001A3830;
    uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 24))(v14, a5);
    uint64_t v19 = v18;
    *(void *)(v16 + 56) = &type metadata for String;
    unint64_t v20 = sub_1000303C8();
    *(void *)(v16 + 64) = v20;
    *(void *)(v16 + 32) = v17;
    *(void *)(v16 + 40) = v19;
    (*(void (**)(uint64_t, uint64_t))(a5 + 40))(v14, a5);
    uint64_t v21 = StaticString.description.getter();
    *(void *)(v16 + 96) = &type metadata for String;
    *(void *)(v16 + 104) = v20;
    *(void *)(v16 + 72) = v21;
    *(void *)(v16 + 80) = v22;
    os_log(_:dso:log:type:_:)();

    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1000163F4(uint64_t a1, uint64_t a2, uint64_t *a3, void (*a4)(void))
{
  uint64_t v7 = v4;
  swift_bridgeObjectRetain();
  uint64_t v8 = sub_100016640();
  unint64_t v10 = sub_1000287F0(v8, v9);
  char v12 = v11;
  swift_bridgeObjectRelease();
  if ((v12 & 1) == 0) {
    return 0;
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_1000243EC();
  Swift::Int v15 = *(void *)(v14 + 24);
  sub_10002572C(a3);
  _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v15);
  swift_bridgeObjectRelease();
  uint64_t v16 = *(void *)(*(void *)(v18 + 56) + 8 * v10);
  a4(0);
  _NativeDictionary._delete(at:)();
  *uint64_t v7 = v18;
  swift_bridgeObjectRelease();
  return v16;
}

uint64_t sub_100016518()
{
  return swift_beginAccess();
}

uint64_t sub_100016544(uint64_t a1)
{
  return a1 - 8;
}

uint64_t sub_100016580()
{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

uint64_t sub_10001659C()
{
  return swift_allocObject();
}

BOOL sub_1000165B4(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_1000165D0()
{
  *(void *)(v0 - 136) = 0;
  return v0 - 136;
}

void sub_1000165EC(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 160) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

void sub_100016620(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

uint64_t sub_100016640()
{
  return v0;
}

uint64_t sub_10001664C(uint64_t a1)
{
  return sub_100027BA4(a1, 1, v1);
}

uint64_t sub_10001666C()
{
  return v0;
}

uint64_t sub_100016684()
{
  return v0;
}

void sub_1000166B0()
{
  sub_100121B34(v0, v1, 0);
}

uint64_t sub_1000166D0()
{
  return *(void *)(v0 - 152);
}

void sub_1000166E4()
{
  sub_100128A68();
}

uint64_t sub_100016708()
{
  return 1;
}

uint64_t sub_100016724@<X0>(char a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,unint64_t a27,char a28,uint64_t a29)
{
  return sub_10016AE48(a26, a27, a19, a28, a24, a16, a29, a20, a1);
}

void sub_10001674C()
{
  *(void *)(v1 + 184) = v0;
  *(void *)(v1 + 240) = v2;
}

void sub_100016770(uint64_t a1)
{
  sub_10017EED0(a1, v4, v3, v2, v1);
}

uint64_t sub_100016790(uint64_t a1, uint64_t a2)
{
  return sub_1000163F4(a1, a2, (uint64_t *)&unk_100219740, (void (*)(void))type metadata accessor for ActivityMonitor.WeakReference);
}

uint64_t sub_1000167B0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SessionType();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (swift_unknownObjectWeakLoadStrong())
  {
    sub_100017C74();
    sub_100018148(0, 0);
    uint64_t v6 = (void *)sub_100016A0C();
    swift_unknownObjectRelease();
    if (v6)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
      if ((*(unsigned int (**)(char *, uint64_t))(v3 + 88))(v5, v2) == enum case for SessionType.spotlight(_:))
      {
        id v7 = [v6 spotlightBiomeFBWritesEnabled];
        swift_unknownObjectRelease();

        return (uint64_t)v7;
      }
      swift_unknownObjectRelease();

      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    }
    else
    {
      swift_unknownObjectRelease();
    }
    return 1;
  }
  if (qword_100218B28 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_10002A10C(v8, (uint64_t)qword_100236990);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v9, v10))
  {
    char v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)char v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Assembly object has died", v11, 2u);
    swift_slowDealloc();
  }

  return 0;
}

uint64_t sub_100016A0C()
{
  if (*(void *)(v0 + 32))
  {
    swift_retain();
    ConfigurationManager.configAccessProvider.getter();
    swift_release();
    swift_getObjectType();
    uint64_t v1 = dispatch thunk of ConfigAccessProvider.currentConfig.getter();
    swift_unknownObjectRelease();
    if (v1)
    {
      self;
      uint64_t result = swift_dynamicCastObjCClass();
      if (result) {
        return result;
      }
      swift_unknownObjectRelease();
    }
  }
  return 0;
}

uint64_t sub_100016AA0(void *a1, int a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  unint64_t v7 = v6;
  uint64_t v53 = a4;
  uint64_t v54 = a6;
  HIDWORD(v51) = a5;
  uint64_t v52 = a3;
  int v57 = a2;
  uint64_t v9 = sub_10002572C((uint64_t *)&unk_100219728);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  uint64_t v56 = (uint64_t)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v50 - v12;
  uint64_t v14 = type metadata accessor for Date();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_weakInit();
  *(void *)(v6 + 24) = 0;
  *(void *)(v6 + 32) = 0;
  *(_WORD *)(v6 + 40) = 256;
  *(void *)(v6 + 48) = 0;
  *(void *)(v6 + 56) = 0;
  *(void *)(v6 + 64) = &_swiftEmptyArrayStorage;
  *(void *)(v6 + 72) = 0;
  *(unsigned char *)(v6 + 81) = 0;
  sub_100023FA0(0, (unint64_t *)&qword_1002192B0);
  unint64_t v60 = 0xD000000000000010;
  unint64_t v61 = 0x80000001001B0C20;
  uint64_t v58 = 45;
  unint64_t v59 = 0xE100000000000000;
  uint64_t v62 = 95;
  unint64_t v63 = 0xE100000000000000;
  unint64_t v49 = sub_100021100();
  StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  *(void *)(v6 + 88) = OS_os_log.init(subsystem:category:)();
  uint64_t v18 = v7 + *(void *)(*(void *)v7 + 136);
  uint64_t v19 = type metadata accessor for OSSignpostID();
  sub_10002538C(v18, 1, 1, v19);
  uint64_t v20 = *(void *)(*(void *)v7 + 152);
  type metadata accessor for Locker();
  uint64_t v21 = swift_allocObject();
  uint64_t v22 = (_DWORD *)swift_slowAlloc();
  *(void *)(v21 + 16) = v22;
  _DWORD *v22 = 0;
  *(void *)(v7 + v20) = v21;
  Date.init()();
  (*(void (**)(unint64_t, char *, uint64_t))(v15 + 32))(v7 + *(void *)(*(void *)v7 + 144), v17, v14);
  swift_weakAssign();
  *(unsigned char *)(v7 + 80) = v57;
  id v23 = *(id *)(v7 + 88);
  swift_retain();
  OSSignpostID.init(log:object:)();
  uint64_t v55 = v19;
  sub_10002538C((uint64_t)v13, 0, 1, v19);
  uint64_t v24 = v7 + *(void *)(*(void *)v7 + 136);
  swift_beginAccess();
  sub_1000327AC((uint64_t)v13, v24);
  swift_endAccess();
  unint64_t v60 = v7;
  swift_retain();
  uint64_t v25 = String.init<A>(describing:)();
  uint64_t v27 = v26;
  uint64_t v28 = *(os_unfair_lock_s **)(a1[4] + 16);
  os_unfair_lock_lock(v28);
  if (swift_unknownObjectWeakLoadStrong())
  {
    uint64_t v50 = v24;
    uint64_t v29 = a1[3];
    swift_beginAccess();
    uint64_t v30 = a1;
    uint64_t v31 = a1[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v32 = sub_100039E78(v25, v27, v31);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    if (v32)
    {
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(unint64_t, _UNKNOWN **, uint64_t, uint64_t))(v29 + 32))(v7, &off_100200DC0, ObjectType, v29);
    }
    swift_unknownObjectRelease();
    a1 = v30;
    uint64_t v24 = v50;
  }
  type metadata accessor for ActivityMonitor.WeakReference();
  uint64_t v34 = swift_allocObject();
  *(void *)(v34 + 24) = 0;
  swift_unknownObjectWeakInit();
  *(void *)(v34 + 24) = &off_100200DC0;
  swift_unknownObjectWeakAssign();
  swift_beginAccess();
  swift_bridgeObjectRetain();
  sub_100030368(v34, v25, v27, v35, v36, v37, v38, v39, v50, v51);
  swift_endAccess();
  swift_bridgeObjectRelease();
  os_unfair_lock_unlock(v28);
  swift_bridgeObjectRelease();
  if (swift_unknownObjectWeakLoadStrong())
  {
    uint64_t v40 = a1[3];
    uint64_t v41 = swift_getObjectType();
    (*(void (**)(unint64_t, _UNKNOWN **, uint64_t, uint64_t))(v40 + 8))(v7, &off_100200DC0, v41, v40);
    swift_release();
    swift_unknownObjectRelease();
  }
  else
  {
    swift_release();
  }
  uint64_t v43 = v55;
  uint64_t v42 = v56;
  sub_100006858(v24, v56);
  uint64_t result = sub_100027BA4(v42, 1, v43);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    id v45 = *(id *)(v7 + 88);
    uint64_t v46 = static os_signpost_type_t.begin.getter();
    uint64_t v47 = sub_10003065C(v57);
    LOBYTE(v49) = BYTE4(v51);
    sub_10001BB64(v46, (uint64_t)v45, (uint64_t)v47, v48, 2, v42, v52, v53, v49, v54);

    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v43 - 8) + 8))(v42, v43);
    sub_100032154();
    swift_release();
    return v7;
  }
  return result;
}

void sub_1000170BC()
{
  sub_10000DFE0();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v8 = type metadata accessor for DispatchPredicate();
  sub_100020C48();
  uint64_t v10 = v9;
  __chkstk_darwin(v11);
  sub_10000DFD0();
  uint64_t v14 = v13 - v12;
  uint64_t v15 = *(void **)(v1 + 32);
  *(void *)(v13 - v12) = v15;
  (*(void (**)(uint64_t, void, uint64_t))(v10 + 104))(v13 - v12, enum case for DispatchPredicate.onQueue(_:), v8);
  id v16 = v15;
  uint64_t v17 = _dispatchPreconditionTest(_:)();
  uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(v14, v8);
  if ((v17 & 1) == 0)
  {
    __break(1u);
    swift_once();
    uint64_t v20 = type metadata accessor for Logger();
    sub_10002A10C(v20, (uint64_t)qword_1002369D8);
    uint64_t v21 = (void *)Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (sub_100017D10(v22))
    {
      *(_WORD *)sub_100023E24() = 0;
      sub_100029FC0((void *)&_mh_execute_header, v23, v24, "Exception thrown while seeking file");
      sub_10002B260();
    }

    if (v3)
    {
      sub_10003CAF4();
      swift_allocError();
      *uint64_t v25 = 2;
      sub_1000EE0DC();
      swift_errorRelease();
    }
    sub_10003A1F4();
LABEL_9:

    goto LABEL_20;
  }
  if (!*(void *)(v1 + OBJC_IVAR____TtC7parsecd10FileWriter_fileHandle))
  {
LABEL_20:
    sub_10000DFB8();
    return;
  }
  __chkstk_darwin(v18);
  v37[2] = v19;
  uint64_t v17 = v19;
  uint64_t v26 = sub_100017664((uint64_t)sub_100017940, (uint64_t)v37);
  uint64_t v27 = Data.count.getter();
  unint64_t v28 = (unint64_t)v26 + v27;
  if (__OFADD__(v26, v27))
  {
    __break(1u);
LABEL_28:
    swift_once();
LABEL_14:
    uint64_t v30 = type metadata accessor for Logger();
    sub_10002A10C(v30, (uint64_t)qword_1002369D8);
    uint64_t v31 = (void *)Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.error.getter();
    if (sub_100017D10(v32))
    {
      *(_WORD *)sub_100023E24() = 0;
      sub_100029FC0((void *)&_mh_execute_header, v33, v34, "File grew too large.");
      sub_10002B260();
    }

    sub_10003A1F4();
    if (v3)
    {
      sub_10003CAF4();
      swift_allocError();
      *uint64_t v35 = 4;
      sub_1000EE0DC();

      swift_errorRelease();
      goto LABEL_20;
    }
    goto LABEL_9;
  }
  uint64_t v29 = OBJC_IVAR____TtC7parsecd10FileWriter_maxFileSize;
  if ((v28 & 0x8000000000000000) == 0 && v28 >= *(void *)(v1 + OBJC_IVAR____TtC7parsecd10FileWriter_maxFileSize))
  {
    if (qword_100218B40 == -1) {
      goto LABEL_14;
    }
    goto LABEL_28;
  }
  v37[7] = v7;
  v37[8] = v5;
  sub_100017980();
  NSFileHandle.write<A>(contentsOf:)();
  if (v3)
  {
    uint64_t v36 = Data.count.getter();

    sub_10001793C(v36);
  }
  else
  {
  }
  if ((v28 & 0x8000000000000000) == 0)
  {
    if (*(void *)(v1 + v29) >= v28) {
      goto LABEL_20;
    }
    __break(1u);
  }
  sub_100024270();
  sub_100021C48();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void *sub_100017664(uint64_t a1, uint64_t a2)
{
  uint64_t v17 = 0;
  char v18 = 1;
  uint64_t v4 = (void *)swift_allocObject();
  v4[2] = &v17;
  v4[3] = a1;
  v4[4] = a2;
  uint64_t v5 = (void *)swift_allocObject();
  v5[2] = sub_1000178CC;
  v5[3] = v4;
  v16[4] = sub_100017870;
  v16[5] = v5;
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 1107296256;
  v16[2] = sub_100017848;
  v16[3] = &unk_1002017F0;
  uint64_t v6 = _Block_copy(v16);
  swift_retain();
  swift_release();
  uint64_t v7 = (void (*)(void))v6[2];
  uint64_t v8 = v6;
  v7();
  id v9 = 0;
  while (1)
  {

    id v10 = v9;
    _Block_release((const void *)v8);
    uint64_t v8 = sub_100025B50();
    uint64_t v11 = (void *)swift_release();
    if (v8)
    {
      __break(1u);
      goto LABEL_9;
    }
    if (v10)
    {
      id v12 = v10;
      sub_100024B54();
      sub_10004B198();
      uint64_t v13 = swift_allocError();
      sub_10002A5AC(v13, v14);
      swift_release();

      return v5;
    }
    if ((v18 & 1) == 0) {
      break;
    }
LABEL_9:
    __break(1u);
    id v9 = objc_begin_catch(v11);
    objc_end_catch();
  }
  uint64_t v5 = v17;
  swift_release();
  return v5;
}

uint64_t sub_100017848(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

uint64_t sub_100017874()
{
  return sub_1000178A4(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_10001787C()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1000178A4(uint64_t (*a1)(void))
{
  return a1();
}

void *sub_1000178CC()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(v0 + 24))(&v3);
  *(void *)uint64_t v1 = v3;
  *(unsigned char *)(v1 + 8) = 0;
  return result;
}

uint64_t sub_100017910(uint64_t result)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 472);
  uint64_t v3 = *(void *)(v1 + v2);
  BOOL v4 = __OFADD__(v3, result);
  uint64_t v5 = v3 + result;
  if (v4) {
    __break(1u);
  }
  else {
    *(void *)(v1 + v2) = v5;
  }
  return result;
}

unint64_t sub_100017940@<X0>(unint64_t *a1@<X8>)
{
  return sub_100017948(*(void **)(v1 + 16), a1);
}

unint64_t sub_100017948@<X0>(void *a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t result = (unint64_t)[a1 seekToEndOfFile];
  if ((result & 0x8000000000000000) != 0) {
    __break(1u);
  }
  else {
    *a2 = result;
  }
  return result;
}

unint64_t sub_100017980()
{
  unint64_t result = qword_1002197F0;
  if (!qword_1002197F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002197F0);
  }
  return result;
}

uint64_t sub_1000179CC()
{
  sub_100023C50();
  sub_100026880();
  uint64_t v1 = *v0;
  sub_100017DB0();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_100017DBC();
  return v3();
}

void sub_100017A90()
{
  sub_10000DFE0();
  type metadata accessor for OSSignpostID();
  sub_100020C48();
  uint64_t v1 = v0;
  __chkstk_darwin(v2);
  sub_10000DFD0();
  static os_signpost_type_t.begin.getter();
  if (qword_100218B90 != -1) {
    swift_once();
  }
  static OSSignpostID.exclusive.getter();
  sub_100027ED8();
  uint64_t v3 = *(void (**)(uint64_t))(v1 + 8);
  uint64_t v4 = sub_1000275E0();
  v3(v4);
  sub_100017C20((void (*)(uint64_t))sub_100007F6C);
  static os_signpost_type_t.end.getter();
  static OSSignpostID.exclusive.getter();
  sub_100027ED8();
  uint64_t v5 = sub_1000275E0();
  v3(v5);
  static os_signpost_type_t.begin.getter();
  static OSSignpostID.exclusive.getter();
  sub_100025054();
  uint64_t v6 = sub_1000275E0();
  v3(v6);
  sub_100017C20((void (*)(uint64_t))sub_100006F90);
  static os_signpost_type_t.end.getter();
  static OSSignpostID.exclusive.getter();
  sub_100025054();
  uint64_t v7 = sub_1000275E0();
  v3(v7);
  sub_10000DFB8();
}

void sub_100017C20(void (*a1)(uint64_t))
{
  uint64_t v3 = *(os_unfair_lock_s **)(*(void *)(v1 + OBJC_IVAR____TtC7parsecd14ContextManager_locker) + 16);
  os_unfair_lock_lock(v3);
  a1(v1);
  os_unfair_lock_unlock(v3);
}

uint64_t sub_100017C74()
{
  return sub_100027528();
}

unint64_t sub_100017CEC()
{
  *(void *)(v0 - 144) = 45;
  *(void *)(v0 - 136) = 0xE100000000000000;
  *(void *)(v0 - 96) = 95;
  *(void *)(v0 - 88) = 0xE100000000000000;
  return sub_100021100();
}

BOOL sub_100017D10(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_100017D40()
{
  return swift_slowDealloc();
}

uint64_t sub_100017D90()
{
  return swift_slowAlloc();
}

uint64_t sub_100017DBC()
{
  return v0 + 8;
}

uint64_t sub_100017DF8()
{
  return v0;
}

uint64_t sub_100017E2C()
{
  return Substring.subscript.getter();
}

uint64_t sub_100017E4C()
{
  return *(void *)(v0 + 56);
}

uint64_t sub_100017E64(uint64_t a1, uint64_t a2)
{
  return sub_10002538C(a1, a2, 1, v2);
}

void sub_100017E7C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void **)(v2 + a2);
  *(void *)(v2 + a2) = a1;
}

uint64_t sub_100017E88()
{
  return swift_release();
}

uint64_t sub_100017EB8()
{
  return v0;
}

uint64_t sub_100017EDC()
{
  return v0;
}

uint64_t sub_100017EF0(uint64_t result)
{
  *(void *)(v1 + 64) = result;
  return result;
}

uint64_t sub_100017F00()
{
  return swift_beginAccess();
}

uint64_t sub_100017F18()
{
  return v0;
}

uint64_t sub_100017F30(uint64_t a1)
{
  return sub_100100328(a1, 68, 2, v1);
}

uint64_t sub_100017F50()
{
  return *(void *)(v0 - 488);
}

uint64_t sub_100017F74()
{
  return Apple_Parsec_Search_PegasusQueryContext.longSecretKey.setter();
}

uint64_t sub_100017F94()
{
  *(void *)(v0 + 48) = 0;
  *(void *)(v0 + 40) = 0;
  *(unsigned char *)(v0 + 56) = v1;
  return ContinuousClock.init()();
}

void sub_100017FB8(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

uint64_t sub_100017FE8()
{
  return sub_100023380();
}

uint64_t sub_100018014()
{
  return swift_beginAccess();
}

void sub_100018030(uint64_t a1@<X8>)
{
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = 2 * (a1 / v1);
}

uint64_t sub_100018064()
{
  return v0;
}

uint64_t sub_100018074()
{
  return v0;
}

id sub_100018088(uint64_t a1, const char *a2)
{
  return objc_msgSend(v2, a2, 0);
}

void sub_1000180A0(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v3 - 152) = (char *)&a2 - a1;
  *(void *)(v3 - 128) = v2;
}

uint64_t sub_1000180E8(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_100093A68(a1, a2, a3, v9, v10, v11, v12, v13, a9);
}

uint64_t sub_10001810C()
{
  return v0;
}

uint64_t sub_100018148(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_10002572C(&qword_10021F2D0);
  uint64_t v6 = sub_100016544(v5);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(v2 + 32)
    || (swift_retain(),
        ConfigurationManager.configAccessProvider.getter(),
        swift_release(),
        swift_getObjectType(),
        char v9 = dispatch thunk of ConfigAccessProvider.hasPendingTasks.getter(),
        uint64_t result = swift_unknownObjectRelease(),
        (v9 & 1) == 0))
  {
    static TaskPriority.high.getter();
    uint64_t v11 = type metadata accessor for TaskPriority();
    sub_10002538C((uint64_t)v8, 0, 1, v11);
    uint64_t v12 = swift_allocObject();
    swift_weakInit();
    uint64_t v13 = (void *)swift_allocObject();
    v13[2] = 0;
    v13[3] = 0;
    v13[4] = v12;
    v13[5] = a1;
    v13[6] = a2;
    swift_bridgeObjectRetain();
    sub_1000182C0((uint64_t)v8, (uint64_t)&unk_10021F2E0, (uint64_t)v13);
    swift_release();
    return sub_1000256D4((uint64_t)v8, &qword_10021F2D0);
  }
  return result;
}

uint64_t sub_1000182C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10002572C(&qword_10021F2D0);
  uint64_t v7 = sub_100016544(v6);
  __chkstk_darwin(v7);
  sub_100024F80();
  sub_10002A338(a1, v3, &qword_10021F2D0);
  uint64_t v8 = type metadata accessor for TaskPriority();
  if (sub_100027BA4(v3, 1, v8) == 1)
  {
    sub_1000256D4(v3, &qword_10021F2D0);
  }
  else
  {
    TaskPriority.rawValue.getter();
    sub_10000E004();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v3, v8);
  }
  if (*(void *)(a3 + 16))
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

id sub_10001844C()
{
  uint64_t v3 = *(const char **)(v1 + 1040);
  return [v0 v3];
}

id sub_100018464()
{
  return v0;
}

uint64_t sub_1000184A8()
{
  return type metadata accessor for PegasusContext(0);
}

uint64_t sub_1000184D0()
{
  return v0;
}

uint64_t sub_1000184F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100027BA4(a1, a2, a3);
}

void sub_100018528(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

uint64_t sub_100018548@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(result + 48) = a2;
  *(void *)(result + 56) = (v2 - 32) | 0x8000000000000000;
  return result;
}

uint64_t sub_100018558()
{
  return v0;
}

uint64_t sub_100018580()
{
  return static ParsecKeys.shared.getter();
}

uint64_t sub_100018598()
{
  return swift_beginAccess();
}

uint64_t sub_1000185CC()
{
  return v0;
}

uint64_t sub_1000185D8()
{
  return v0;
}

uint64_t sub_10001860C()
{
  return dispatch thunk of static Comparable.< infix(_:_:)();
}

uint64_t sub_10001862C(sqlite3 *a1, const char *a2, int a3, uint64_t a4, uint64_t a5, void (__cdecl *a6)(sqlite3_context *, int, sqlite3_value **))
{
  return sqlite3_create_function(a1, a2, a3, 5, 0, a6, 0, 0);
}

uint64_t sub_10001865C(uint64_t a1, unint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v12 = v9[52];
  uint64_t v13 = v9[51];
  uint64_t v14 = v9[50];
  return sub_10016AE48(a1, a2, a3, a4, v10, v12, v13, v14, a9);
}

uint64_t sub_100018684()
{
  return v0;
}

uint64_t sub_100018694(uint64_t a1, void *a2)
{
  void (*v13)(uint64_t *__return_ptr, uint64_t);
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  unsigned int v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  void *v30;
  id v31;
  uint64_t v32;
  void *v33;
  id v34;
  void *v35;
  id v36;
  id v37;
  id v38;
  void *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  unint64_t v63;
  void *v64;
  void v66[3];
  id v67;
  uint64_t v68;
  id v69;
  void **v70;
  unsigned int v71;
  void *v72;
  char *v73;
  unint64_t v74;
  void (*v75)(uint64_t *__return_ptr, uint64_t);
  uint64_t v76;
  uint64_t v77;
  void *v78;
  uint64_t aBlock;
  uint64_t v80;
  void *v81;
  void *v82;
  void (*v83)();
  void *v84;

  uint64_t v4 = type metadata accessor for Client();
  __chkstk_darwin(v4 - 8);
  sub_10000DFD0();
  uint64_t v7 = v6 - v5;
  uint64_t v77 = v2;
  swift_retain();
  char v8 = sub_10000475C();
  swift_release();
  if ((v8 & 1) == 0)
  {
    if (qword_100218B50 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_10002A10C(v9, (uint64_t)qword_100236A08);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "New connection before assembly is ready", v12, 2u);
      sub_100017D40();
    }
  }
  swift_retain();
  uint64_t v13 = sub_1000063C0();
  uint64_t v15 = v14;
  swift_release();
  if (!v13)
  {
    if (qword_100218B50 != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    sub_10002A10C(v26, (uint64_t)qword_100236A08);
    uint64_t v27 = Logger.logObject.getter();
    unint64_t v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Connection failed because assembly is not available", v29, 2u);
      sub_100017D40();
    }

    return 0;
  }
  id v16 = (void *)sub_100010DE0();
  static Client.parsecd.getter();
  type metadata accessor for ResourceAccessSpan();
  swift_allocObject();
  uint64_t v17 = sub_100003EAC(v16, 43, v7, 0, 1);
  if ((sub_10003005C() & 1) == 0 && (sub_1000A4068() & 1) == 0)
  {
    swift_unknownObjectRelease();
    *(unsigned char *)(v17 + qword_10021B6C8) = 77;
    swift_release();
    return 0;
  }
  char v18 = [a2 processIdentifier];
  uint64_t v19 = sub_100008714(a2);
  uint64_t v21 = v20;
  if (qword_100218B50 != -1) {
    swift_once();
  }
  uint64_t v75 = v13;
  id v76 = v17;
  os_log_type_t v22 = type metadata accessor for Logger();
  sub_10002A10C(v22, (uint64_t)qword_100236A08);
  swift_bridgeObjectRetain_n();
  uint64_t v23 = Logger.logObject.getter();
  uint64_t v24 = static os_log_type_t.default.getter();
  uint64_t v73 = v19;
  uint64_t v74 = v21;
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v25 = swift_slowAlloc();
    uint64_t v72 = v15;
    aBlock = swift_slowAlloc();
    *(_DWORD *)uint64_t v25 = 136446466;
    swift_bridgeObjectRetain();
    HIDWORD(v78) = (unint64_t)sub_10001C274((uint64_t)v19, v21, &aBlock) >> 32;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v25 + 12) = 1024;
    LODWORD(v78) = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "new connection from %{public}s (%d)", (uint8_t *)v25, 0x12u);
    swift_arrayDestroy();
    sub_100017D40();
    sub_100017D40();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v71 = v18;
  uint64_t v30 = self;
  uint64_t v31 = [v30 interfaceWithProtocol:&OBJC_PROTOCOL___PARClientXPC];
  [a2 setRemoteObjectInterface:v31];

  os_log_type_t v32 = swift_allocObject();
  *(_DWORD *)(v32 + 16) = v18;
  uint64_t v83 = sub_100114BA8;
  id v84 = (void *)v32;
  aBlock = (uint64_t)_NSConcreteStackBlock;
  uint64_t v80 = 1107296256;
  uint64_t v81 = sub_1000FE57C;
  id v82 = &unk_100201D28;
  uint64_t v33 = _Block_copy(&aBlock);
  swift_release();
  uint64_t v34 = [a2 remoteObjectProxyWithErrorHandler:v33];
  _Block_release(v33);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  sub_10002572C((uint64_t *)&unk_1002201E0);
  if (swift_dynamicCast()) {
    uint64_t v35 = v78;
  }
  else {
    uint64_t v35 = 0;
  }
  uint64_t v72 = v35;
  uint64_t v36 = [v30 interfaceWithProtocol:&OBJC_PROTOCOL____TtP7parsecd20ParsecDaemonProtocol_];
  [a2 setExportedInterface:v36];

  uint64_t v37 = objc_allocWithZone((Class)type metadata accessor for ClientConnection(0));
  swift_unknownObjectRetain();
  uint64_t v38 = a2;
  swift_unknownObjectRetain();
  sub_100019FB8();
  uint64_t v40 = v39;
  [v38 setExportedObject:v39];
  [v38 resume];
  uint64_t v41 = v77;
  *(unsigned char *)(v76 + qword_10021B6C8) = 4;
  uint64_t v68 = *(void *)(v41 + OBJC_IVAR____TtC7parsecd13ParsecService_queue);
  uint64_t v42 = sub_100023CE4();
  swift_unknownObjectWeakInit();
  uint64_t v43 = (void *)swift_allocObject();
  v43[2] = v42;
  v43[3] = v40;
  v43[4] = v38;
  uint64_t v83 = sub_100031264;
  id v84 = v43;
  aBlock = (uint64_t)_NSConcreteStackBlock;
  uint64_t v80 = 1107296256;
  uint64_t v70 = &v81;
  uint64_t v81 = sub_1000085EC;
  id v82 = &unk_100201DA0;
  unsigned __int8 v44 = _Block_copy(&aBlock);
  id v45 = type metadata accessor for DispatchQoS();
  v66[2] = v66;
  sub_100020C48();
  uint64_t v47 = v46;
  __chkstk_darwin(v48);
  sub_10000DFD0();
  uint64_t v51 = v50 - v49;
  id v69 = v38;
  swift_retain();
  uint64_t v67 = v40;
  static DispatchQoS.unspecified.getter();
  uint64_t v52 = type metadata accessor for DispatchWorkItemFlags();
  v66[1] = v66;
  sub_100020C48();
  uint64_t v54 = v53;
  __chkstk_darwin(v55);
  sub_10000DFD0();
  uint64_t v58 = v57 - v56;
  uint64_t v78 = _swiftEmptyArrayStorage;
  sub_10002FFEC((unint64_t *)&qword_100219260, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10002572C((uint64_t *)&unk_10021BAF0);
  sub_1000301A0();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v44);
  (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v58, v52);
  (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v51, v45);
  swift_release();
  swift_release();
  unint64_t v59 = sub_100023CE4();
  swift_unknownObjectWeakInit();
  unint64_t v60 = sub_100023CE4();
  unint64_t v61 = v67;
  swift_unknownObjectWeakInit();
  uint64_t v62 = swift_allocObject();
  *(void *)(v62 + 16) = v60;
  *(void *)(v62 + 24) = v59;
  unint64_t v63 = v74;
  *(void *)(v62 + 32) = v73;
  *(void *)(v62 + 40) = v63;
  *(_DWORD *)(v62 + 48) = v71;
  uint64_t v83 = sub_100114C78;
  id v84 = (void *)v62;
  aBlock = (uint64_t)_NSConcreteStackBlock;
  uint64_t v80 = 1107296256;
  uint64_t v81 = sub_1000085EC;
  id v82 = &unk_100201E18;
  uint64_t v64 = _Block_copy(&aBlock);
  swift_release();
  [v69 setInvalidationHandler:v64];
  swift_unknownObjectRelease();
  swift_release();

  swift_unknownObjectRelease();
  _Block_release(v64);
  return 1;
}

unint64_t sub_100019060(void *a1, char a2)
{
  if (a1)
  {
    id v3 = a1;
    unint64_t v4 = sub_100019164();
    if (v4 >= 2)
    {
      if (a2)
      {
        uint64_t Strong = swift_unknownObjectWeakLoadStrong();
        swift_retain();
        if (Strong)
        {
          sub_1000073FC();
          swift_unknownObjectRelease();
          sub_100017A90();
          swift_unknownObjectRelease();
        }
      }
      else
      {
        swift_retain();
      }
      uint64_t v7 = swift_retain();
      sub_100019EB4(v7);

      sub_100019154(v4);
    }
    else
    {
      sub_100019EB4(0);
    }
    return v4;
  }
  else
  {
    unint64_t result = sub_100098F54();
    if (result <= 1) {
      return 1;
    }
  }
  return result;
}

unint64_t sub_100019154(unint64_t result)
{
  if (result >= 2) {
    return swift_release();
  }
  return result;
}

uint64_t sub_100019164()
{
  sub_100026B6C(*(os_unfair_lock_s **)(v0 + 32));
  uint64_t v2 = (uint64_t *)sub_100025B94();
  sub_1000191B4(v2, v3);
  os_unfair_lock_unlock(v1);
  return v5;
}

uint64_t sub_1000191B4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1000191D0(a1, *(void *)(v2 + 16), *(void **)(v2 + 24), a2);
}

uint64_t sub_1000191D0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v9 = sub_10002572C(&qword_10021BF30);
  __chkstk_darwin(v9 - 8);
  os_log_type_t v11 = (char *)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10002572C(&qword_10021DB68);
  __chkstk_darwin(v12 - 8);
  uint64_t v71 = (char *)&v63 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for SessionType();
  uint64_t v75 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  id v16 = (char *)&v63 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v18 = result;
    uint64_t v72 = v14;
    uint64_t v73 = a4;
    id v69 = *(uint8_t **)(a2 + 24);
    id v19 = [a3 identifier];
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    SessionType.init(withClientIdentifier:)();
    uint64_t v20 = *a1;
    uint64_t v74 = v16;
    uint64_t v21 = sub_1000199E4((uint64_t)v16, v20);
    if ([a3 parsecEnabled] & 1) != 0 || (sub_10001DB68())
    {
      uint64_t v70 = (uint8_t *)a3;
      if (v21)
      {
        uint64_t v22 = v21;
        uint64_t v23 = v72;
        uint64_t v24 = (uint64_t)v74;
        uint64_t v25 = v75;
      }
      else
      {
        if (qword_100218B38 != -1) {
          swift_once();
        }
        uint64_t v66 = a1;
        uint64_t v68 = v4;
        uint64_t v26 = type metadata accessor for Logger();
        sub_10002A10C(v26, (uint64_t)qword_1002369C0);
        id v27 = a3;
        unint64_t v28 = Logger.logObject.getter();
        os_log_type_t v29 = static os_log_type_t.default.getter();
        BOOL v30 = os_log_type_enabled(v28, v29);
        uint64_t v31 = &selRef_isEqualToString_;
        uint64_t v67 = v18;
        if (v30)
        {
          os_log_t v65 = v28;
          os_log_type_t v32 = (uint8_t *)swift_slowAlloc();
          uint64_t v77 = (char *)swift_slowAlloc();
          *(_DWORD *)os_log_type_t v32 = 136315138;
          uint64_t v64 = v32 + 4;
          id v33 = [v27 identifier];
          uint64_t v34 = v27;
          uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          os_log_type_t v36 = v29;
          unint64_t v38 = v37;

          uint64_t v39 = v35;
          id v27 = v34;
          uint64_t v76 = sub_10001C274(v39, v38, (uint64_t *)&v77);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          os_log_t v40 = v65;
          os_log_type_t v41 = v36;
          uint64_t v31 = &selRef_isEqualToString_;
          _os_log_impl((void *)&_mh_execute_header, v65, v41, "starting/enabling session for %s", v32, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        uint64_t v23 = v72;
        uint64_t v24 = (uint64_t)v74;
        id v52 = [v27 v31[111]];
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v25 = v75;
        uint64_t v53 = (uint64_t)v71;
        (*(void (**)(char *, uint64_t, uint64_t))(v75 + 16))(v71, v24, v23);
        sub_10002538C(v53, 0, 1, v23);
        type metadata accessor for ClientState();
        swift_allocObject();
        swift_unknownObjectRetain();
        sub_1000C0704();
        uint64_t v22 = v54;
        uint64_t v55 = swift_retain();
        sub_10003BC04(v55, v24, v56, v57, v58, v59, v60, v61, v63, (uint64_t)v64);
      }
      uint64_t v62 = type metadata accessor for UserAgent();
      sub_10002538C((uint64_t)v11, 1, 1, v62);
      swift_retain();
      sub_10001D864();
      swift_release();
      swift_unknownObjectRelease();
      sub_100019938((uint64_t)v11, &qword_10021BF30);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 8))(v24, v23);
      a4 = v73;
    }
    else
    {
      if (v21)
      {
        swift_retain();
        swift_unknownObjectRetain();
        sub_1000E6E24(0, 0);
        swift_unknownObjectRelease();
        sub_1000BAFBC(v74);
        swift_release();
        uint64_t v42 = v75;
        if (qword_100218B38 != -1) {
          swift_once();
        }
        uint64_t v43 = type metadata accessor for Logger();
        sub_10002A10C(v43, (uint64_t)qword_1002369C0);
        id v44 = a3;
        id v45 = Logger.logObject.getter();
        os_log_type_t v46 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v45, v46))
        {
          uint64_t v47 = (uint8_t *)swift_slowAlloc();
          uint64_t v71 = (char *)swift_slowAlloc();
          uint64_t v77 = v71;
          uint64_t v68 = v4;
          *(_DWORD *)uint64_t v47 = 136315138;
          id v69 = v47 + 4;
          uint64_t v70 = v47;
          id v48 = [v44 identifier];
          uint64_t v49 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v51 = v50;

          uint64_t v76 = sub_10001C274(v49, v51, (uint64_t *)&v77);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v45, v46, "disabling session for %s", v70, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
          swift_unknownObjectRelease();

          swift_release_n();
          uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v75 + 8))(v74, v72);
        }
        else
        {

          swift_unknownObjectRelease();
          swift_release_n();
          uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v74, v72);
        }
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v75 + 8))(v74, v72);
        uint64_t result = swift_unknownObjectRelease();
      }
      uint64_t v22 = 0;
      a4 = v73;
    }
  }
  else
  {
    uint64_t v22 = 1;
  }
  *a4 = v22;
  return result;
}

uint64_t sub_100019938(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_10002572C(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100019994(uint64_t a1, uint64_t *a2)
{
  sub_10002572C(a2);
  sub_10001DCF8();
  sub_10000E040();
  v3();
  return a1;
}

uint64_t sub_1000199E4(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16) && (sub_100019A28(), (v2 & 1) != 0)) {
    return swift_retain();
  }
  else {
    return 0;
  }
}

unint64_t sub_100019A28()
{
  type metadata accessor for SessionType();
  sub_100019ABC((unint64_t *)&qword_1002197A0, (void (*)(uint64_t))&type metadata accessor for SessionType);
  dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v0 = sub_100019B48();

  return sub_100019CF4(v0, v1);
}

uint64_t sub_100019ABC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    sub_100019B48();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100019B00(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100019B48()
{
  return v0;
}

uint64_t sub_100019B54()
{
  return swift_release_n();
}

void sub_100019B6C(uint64_t a1, uint64_t *a2, uint64_t (*a3)(void (**)(void), uint64_t), uint64_t *a4, uint64_t *a5)
{
  sub_100007248(a1, a2, a3, a4, a5, v5);
}

uint64_t sub_100019B84()
{
  return sub_10002464C();
}

BOOL sub_100019BAC(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_100019BE0()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

void sub_100019C04()
{
  uint64_t v2 = *(void *)(v0 + 16) + 1;
  sub_1000EE564(0, v2, 1);
}

void sub_100019C5C(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 296) = (char *)&a2 - a1;
}

uint64_t sub_100019C74()
{
  return sub_100109A14();
}

uint64_t sub_100019C90()
{
  return 7630441;
}

uint64_t sub_100019CA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v18 = *(void *)(v9 + 400);
  return sub_10016AE48(v12, v13, v16, v10, v15, v18, v14, v11, a9);
}

uint64_t sub_100019CDC()
{
  return swift_retain();
}

unint64_t sub_100019CF4(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = a1;
  uint64_t v4 = type metadata accessor for SessionType();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = v2;
  uint64_t v8 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v9 = a2 & ~v8;
  uint64_t v18 = v2 + 64;
  if ((*(void *)(v2 + 64 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9))
  {
    uint64_t v10 = ~v8;
    unint64_t v13 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    uint64_t v12 = v5 + 16;
    uint64_t v11 = v13;
    uint64_t v14 = *(void *)(v12 + 56);
    do
    {
      v11(v7, *(void *)(v20 + 48) + v14 * v9, v4);
      sub_100019ABC(&qword_1002197A8, (void (*)(uint64_t))&type metadata accessor for SessionType);
      char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v12 - 8))(v7, v4);
      if (v15) {
        break;
      }
      unint64_t v9 = (v9 + 1) & v10;
    }
    while (((*(void *)(v18 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  return v9;
}

uint64_t sub_100019EB4(uint64_t a1)
{
  uint64_t v2 = swift_retain();
  uint64_t v3 = sub_100019FB4(v2);
  swift_release();
  if (v3)
  {
    if (a1 && v3 == a1) {
      goto LABEL_7;
    }
    swift_unknownObjectRetain();
    sub_1000E88F8();
    swift_unknownObjectRelease();
  }
  if (a1)
  {
    swift_unknownObjectRetain();
    sub_1000072DC();
    swift_unknownObjectRelease();
  }
LABEL_7:
  swift_retain();
  sub_100019FB0();
  swift_release();
  swift_release();

  return swift_release();
}

void sub_100019FB8()
{
  sub_10000DFE0();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v87 = v6;
  uint64_t v89 = v7;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v8 = type metadata accessor for UUID();
  sub_100020C48();
  uint64_t v10 = v9;
  __chkstk_darwin(v11);
  sub_1000213B0();
  uint64_t v12 = &v0[OBJC_IVAR____TtC7parsecd16ClientConnection_assembly];
  *(void *)&v0[OBJC_IVAR____TtC7parsecd16ClientConnection_assembly + 8] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v13 = OBJC_IVAR____TtC7parsecd16ClientConnection_transactionOpen;
  sub_10002572C((uint64_t *)&unk_10021C030);
  uint64_t v14 = sub_100023CE4();
  char v15 = v0;
  *(void *)(v14 + 16) = sub_10002E4E8(0);
  *(void *)&v0[v13] = v14;
  v15[OBJC_IVAR____TtC7parsecd16ClientConnection_isActiveListener] = 0;
  uint64_t v16 = OBJC_IVAR____TtC7parsecd16ClientConnection_transaction;
  sub_10002572C(&qword_10021CC38);
  swift_allocObject();
  *(void *)&v15[v16] = sub_10001AAE8();
  uint64_t v17 = OBJC_IVAR____TtC7parsecd16ClientConnection_cancellableLock;
  type metadata accessor for Locker();
  uint64_t v18 = sub_100023CE4();
  uint64_t v19 = (_DWORD *)swift_slowAlloc();
  *(void *)(v18 + 16) = v19;
  *uint64_t v19 = 0;
  *(void *)&v15[v17] = v18;
  uint64_t v20 = OBJC_IVAR____TtC7parsecd16ClientConnection_cancellables;
  type metadata accessor for CancellableStoreKey();
  type metadata accessor for AnyCancellable();
  sub_10001AA38(&qword_10021CC40, (void (*)(uint64_t))type metadata accessor for CancellableStoreKey);
  *(void *)&v15[v20] = Dictionary.init(dictionaryLiteral:)();
  v15[OBJC_IVAR____TtC7parsecd16ClientConnection_parClientRequiresStateChangeNotifications] = 0;
  uint64_t v21 = OBJC_IVAR____TtC7parsecd16ClientConnection__lastState;
  sub_10002572C((uint64_t *)&unk_10021CC48);
  swift_allocObject();
  *(void *)&v15[v21] = sub_10001AAE8();
  *((void *)v12 + 1) = v87;
  swift_unknownObjectWeakAssign();
  UUID.init()();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(&v15[OBJC_IVAR____TtC7parsecd16ClientConnection_connectionID], v1, v8);
  uint64_t v22 = sub_100006B58();
  uint64_t v23 = (uint64_t *)&v15[OBJC_IVAR____TtC7parsecd16ClientConnection_clientStateManager];
  *uint64_t v23 = v22;
  v23[1] = v24;
  *(void *)&v15[OBJC_IVAR____TtC7parsecd16ClientConnection_remoteObject] = v5;
  *(void *)&v15[OBJC_IVAR____TtC7parsecd16ClientConnection_connection] = v3;
  sub_100023FA0(0, (unint64_t *)&qword_100219250);
  uint64_t v25 = type metadata accessor for DispatchQoS();
  uint64_t v26 = sub_100016544(v25);
  __chkstk_darwin(v26);
  sub_100017CD4();
  uint64_t v87 = v5;
  swift_unknownObjectRetain();
  id v27 = v3;
  static DispatchQoS.background.getter();
  type metadata accessor for OS_dispatch_queue.Attributes();
  sub_10001DCF8();
  __chkstk_darwin(v28);
  sub_10001DDC8();
  v91[0] = 0;
  sub_1000A1FB8((unint64_t *)&qword_10021B3D0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  dispatch thunk of OptionSet.init(rawValue:)();
  type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  sub_100020C48();
  __chkstk_darwin(v29);
  (*(void (**)(char *, void))(v31 + 104))((char *)&v78 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0), enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:));
  *(void *)&v15[OBJC_IVAR____TtC7parsecd16ClientConnection_backgroundQueue] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  sub_100023FA0(0, &qword_1002192A0);
  uint64_t v32 = type metadata accessor for OS_dispatch_source.TimerFlags();
  sub_100020C48();
  uint64_t v34 = v33;
  __chkstk_darwin(v35);
  sub_100028CA0();
  v91[0] = 0;
  sub_1000A1FB8(&qword_10021CC58, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_source.TimerFlags);
  dispatch thunk of OptionSet.init(rawValue:)();
  uint64_t v36 = static OS_dispatch_source.makeTimerSource(flags:queue:)();
  (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v5, v32);
  *(void *)&v15[OBJC_IVAR____TtC7parsecd16ClientConnection_timer] = v36;

  v92.receiver = v15;
  v92.super_class = ObjectType;
  unint64_t v37 = (char *)objc_msgSendSuper2(&v92, "init");
  unint64_t v38 = *(void **)&v37[OBJC_IVAR____TtC7parsecd16ClientConnection_connection];
  uint64_t v39 = v37;
  [v38 setDelegate:v39];
  id v40 = [self defaultManager];
  NSFileManager.validateCacheSubdirectories()();

  os_log_type_t v41 = self;
  id v42 = [v41 defaultCenter];
  [v42 addObserver:v39 selector:"fileDownloadNotificationWithNotification:" name:@"PARFileDownloadCompletedNotification" object:0];

  id v43 = [v41 defaultCenter];
  [v43 addObserver:v39 selector:"fileDeleteNotificationWithNotification:" name:@"PARFileDeletedNotification" object:0];

  uint64_t v44 = OBJC_IVAR____TtC7parsecd16ClientConnection_timer;
  uint64_t v85 = OBJC_IVAR____TtC7parsecd16ClientConnection_timer;
  swift_getObjectType();
  uint64_t v45 = sub_100023CE4();
  id v82 = v39;
  swift_unknownObjectWeakInit();
  uint64_t v46 = swift_allocObject();
  *(void *)(v46 + 16) = v45;
  *(void *)(v46 + 24) = v27;
  v91[4] = sub_1000A1FB0;
  v91[5] = v46;
  v91[0] = _NSConcreteStackBlock;
  v91[1] = 1107296256;
  v91[2] = sub_1000085EC;
  v91[3] = &unk_1001FDBB8;
  _Block_copy(v91);
  type metadata accessor for DispatchWorkItemFlags();
  sub_10001DCF8();
  __chkstk_darwin(v47);
  sub_10001DDC8();
  uint64_t v90 = &_swiftEmptyArrayStorage;
  sub_1000A1FB8((unint64_t *)&qword_100219260, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  id v86 = v27;
  swift_unknownObjectRetain();
  swift_retain();
  sub_10002572C((uint64_t *)&unk_10021BAF0);
  sub_1000301A0();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  type metadata accessor for DispatchWorkItem();
  swift_allocObject();
  DispatchWorkItem.init(flags:block:)();
  swift_release();
  swift_release();
  OS_dispatch_source.setEventHandler(handler:)();
  swift_unknownObjectRelease();
  swift_release();
  uint64_t v84 = *(void *)&v39[v44];
  uint64_t v83 = swift_getObjectType();
  uint64_t ObjectType = (objc_class *)type metadata accessor for DispatchTime();
  sub_100020C48();
  uint64_t v81 = v48;
  __chkstk_darwin(v49);
  sub_100024A64();
  uint64_t v79 = (char *)(v50 - v51);
  __chkstk_darwin(v52);
  uint64_t v54 = (char *)&v78 - v53;
  static DispatchTime.now()();
  type metadata accessor for DispatchTimeInterval();
  sub_100020C48();
  uint64_t v56 = v55;
  uint64_t v58 = *(void *)(v57 + 64);
  __chkstk_darwin(v59);
  unint64_t v60 = (v58 + 15) & 0xFFFFFFFFFFFFFFF0;
  *(uint64_t *)((char *)&v78 - v60) = 60;
  int v80 = enum case for DispatchTimeInterval.seconds(_:);
  uint64_t v61 = *(void (**)(void))(v56 + 104);
  sub_100029FFC();
  v61();
  + infix(_:_:)();
  uint64_t v62 = *(void (**)(void))(v56 + 8);
  sub_100029244();
  v62();
  uint64_t v63 = *(uint64_t (**)(char *, objc_class *))(v81 + 8);
  uint64_t v64 = v63(v54, ObjectType);
  __chkstk_darwin(v64);
  sub_100029FFC();
  uint64_t v65 = ((uint64_t (*)(void))v61)();
  __chkstk_darwin(v65);
  *(uint64_t *)((char *)&v78 - v60) = 60;
  sub_100029FFC();
  v61();
  uint64_t v66 = v82;
  uint64_t v67 = v79;
  OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)();
  sub_100029244();
  v62();
  sub_100029244();
  v62();
  v63(v67, ObjectType);
  swift_getObjectType();
  swift_unknownObjectRetain();
  OS_dispatch_source.activate()();
  swift_unknownObjectRelease();
  id v68 = sub_10000ACC8();
  if (!v69) {
    goto LABEL_5;
  }
  unint64_t v70 = (unint64_t)v68;
  unint64_t v71 = v69;
  swift_bridgeObjectRelease();
  uint64_t v72 = HIBYTE(v71) & 0xF;
  if ((v71 & 0x2000000000000000) == 0) {
    uint64_t v72 = v70 & 0xFFFFFFFFFFFFLL;
  }
  if (!v72)
  {
LABEL_5:
    sub_100023FA0(0, &qword_10021BEB0);
    id v73 = sub_100009C80(0xD000000000000014, 0x80000001001B4C50, 0);
    id v74 = objc_allocWithZone((Class)type metadata accessor for FlusherClient());
    id v75 = FlusherClient.init(connection:)(v73);
    uint64_t v76 = sub_1000A3CF4();
    v77(v76);
  }
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  sub_10000DFB8();
}

uint64_t sub_10001AA38(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10001AA80()
{
  return v0;
}

void sub_10001AA8C(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  _os_log_impl(a1, a2, a3, a4, v4, 0x16u);
}

void sub_10001AAA4(uint64_t a1@<X8>)
{
  *(unsigned char *)(*(void *)(v2 - 256) + a1) = v1;
  sub_100011708();
}

void sub_10001AABC(uint64_t a1, void *a2)
{
  *a2 = v2;
  a2[1] = 0xD000000000000012;
}

uint64_t sub_10001AAD0()
{
  return swift_allocObject();
}

uint64_t sub_10001AAE8()
{
  sub_10002E860();
  sub_100023CE4();
  *(void *)(v0 + 16) = Lock.init()();
  *(void *)(v0 + 24) = v1;
  return v0;
}

uint64_t static Optional<A>.sqlNullable.getter()
{
  return 1;
}

uint64_t sub_10001AB2C()
{
  return type metadata accessor for ParsecURLRequestBuilder();
}

uint64_t sub_10001AB54()
{
  return swift_slowAlloc();
}

uint64_t sub_10001AB88()
{
  return _StringObject.sharedUTF8.getter();
}

uint64_t sub_10001ABA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  unint64_t v14 = v9[48];
  uint64_t v15 = v9[49];
  uint64_t v16 = v9[51];
  uint64_t v17 = v9[52];
  uint64_t v18 = v9[53];
  return sub_10016AE48(v10, v14, v15, v12, v16, v11, v17, v18, a9);
}

uint64_t sub_10001ABD0()
{
  return v0;
}

uint64_t type metadata accessor for Lock()
{
  return self;
}

uint64_t Lock.init()()
{
  uint64_t v1 = (pthread_mutex_t *)swift_slowAlloc();
  *(void *)(v0 + 16) = v1;
  uint64_t result = pthread_mutex_init(v1, 0);
  if (!result) {
    return v0;
  }
  __break(1u);
  return result;
}

uint64_t WritableSessionDatabase.addSession(_:guid:type:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v9 = v4[10];
  uint64_t v10 = v4[11];
  sub_10001B620(v4 + 7, v9);
  if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 8))(a4, v9, v10))
  {
    uint64_t v11 = v4[12];
    swift_retain();
    swift_bridgeObjectRetain();
    if (!sub_100032814(v11, v4, a2, a3))
    {
      uint64_t v16 = v4[5];
      uint64_t v17 = v4[6];
      sub_10001B620(v4 + 2, v16);
      (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(v17 + 8))(a1, a2, a3, a4, v16, v17);
      uint64_t v18 = *(os_unfair_lock_s **)(v11 + 16);
      os_unfair_lock_lock(v18);
      sub_10002AD10();
      swift_bridgeObjectRetain();
      uint64_t v19 = swift_retain();
      sub_100004FF8(v19, a2, a3);
      swift_endAccess();
      swift_bridgeObjectRelease();
      os_unfair_lock_unlock(v18);
      swift_release();
      return 1;
    }
    if (qword_100224320 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_10002A10C(v12, (uint64_t)qword_100236DE0);
    sub_100024F28();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      v21[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 136315138;
      swift_bridgeObjectRetain();
      sub_10001C274(a2, a3, v21);
      sub_10002E090();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_10002A918();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Session with GUID %s is already added", v15, 0xCu);
      swift_arrayDestroy();
      sub_100017D40();
      sub_100017D40();
    }
    else
    {

      sub_100025FDC();
    }
    swift_release();
  }
  return 0;
}

uint64_t static ProtobufPayload.create(with:constructor:)(void *a1, void (*a2)(void *__return_ptr, void), uint64_t a3)
{
  uint64_t v5 = (uint64_t)v3;
  id v9 = [objc_allocWithZone((Class)PBDataWriter) init];
  if (!v9)
  {
    sub_1001229F8();
    swift_allocError();
    sub_100026C04(v30, 0xD000000000000013);
    return (uint64_t)v3;
  }
  uint64_t v10 = v9;
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  sub_10001B620(a1, v11);
  v34[0] = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 24))(v11, v12);
  swift_bridgeObjectRetain();
  sub_100030224(v34);
  if (!v4)
  {
    swift_bridgeObjectRelease();
    uint64_t v3 = (uint64_t *)v34[0];
    uint64_t v13 = *(void *)(v34[0] + 16);
    if (v13)
    {
      swift_retain();
      unint64_t v37 = v3;
      os_log_type_t v14 = v3 + 5;
      do
      {
        uint64_t v15 = *v14;
        v34[0] = *(v14 - 1);
        v34[1] = v15;
        swift_bridgeObjectRetain();
        sub_10001B3B8(v34, a1, a2, a3, v5, v10);
        v14 += 2;
        swift_bridgeObjectRelease();
        --v13;
      }
      while (v13);
      uint64_t v3 = v37;
      swift_release();
    }
    swift_release();
    id v16 = [v10 data];
    if (v16)
    {
      uint64_t v17 = v16;
      uint64_t v18 = type metadata accessor for ProtobufPayload();
      sub_10001C20C((uint64_t)a1, (uint64_t)v34);
      id v19 = v17;
      uint64_t v20 = sub_10000A508(v19);
      uint64_t v22 = v21;

      uint64_t v23 = v35;
      uint64_t v24 = v36;
      sub_10002E598((uint64_t)v34, v35);
      sub_100026808();
      __chkstk_darwin(v25);
      id v27 = sub_10002C530(v26, v33);
      v28(v27);
      uint64_t v3 = sub_100032CB0((uint64_t)a2, v20, v22, v18, v23, v24);
      sub_10001CA50((uint64_t)v34);
      sub_100032BB0((unint64_t *)&qword_100222A40, v29, (void (*)(uint64_t))type metadata accessor for ProtobufPayload);
    }
    else
    {
      sub_1001229F8();
      swift_allocError();
      sub_100026C04(v31, 0xD000000000000021);
    }
    return (uint64_t)v3;
  }
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

void *sub_10001B3B8(uint64_t *a1, void *a2, void (*a3)(void *__return_ptr, void), uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v9 = *a1;
  uint64_t v10 = a1[1];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[4];
  sub_10001B620(a2, v11);
  uint64_t result = (*(void *(**)(void *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 48))(v23, v9, v10, v11, v12);
  if (!v6)
  {
    uint64_t v14 = v24;
    uint64_t v15 = v25;
    sub_10001B620(v23, v24);
    unint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 32))(v14, v15);
    a3(v20, v23);
    unint64_t v26 = HIDWORD(v16);
    while (1)
    {
      if (v21 == 255)
      {
        sub_100019938((uint64_t)v20, &qword_100221918);
        return (void *)sub_10001CA50((uint64_t)v23);
      }
      sub_10001B978((uint64_t)v20, (uint64_t)v22);
      if ((v16 & 0x8000000000000000) != 0 || v26) {
        break;
      }
      sub_100004D54(a6, (uint64_t)v22, v16);
      uint64_t v17 = v24;
      uint64_t v18 = v25;
      sub_10001B620(v23, v24);
      char v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 16))(v17, v18);
      sub_10001B840((uint64_t)v22);
      if ((v19 & 1) == 0) {
        return (void *)sub_10001CA50((uint64_t)v23);
      }
      a3(v20, v23);
    }
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

void *sub_10001B620(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_10001B664@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10001B680(a1, *(void *)(v2 + 16), a2);
}

uint64_t sub_10001B680@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a1[3];
  uint64_t v5 = a1[4];
  sub_10001B620(a1, v6);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)(v5 + 8) + 8))(v6);
  BOOL v9 = v7 == 0x546E6F6973736573 && v8 == 0xEB00000000657079;
  if (v9 || (uint64_t v10 = v7, v11 = v8, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    swift_bridgeObjectRelease();
    uint64_t result = SessionType.description.getter();
    *(void *)a3 = result;
    *(void *)(a3 + 8) = v13;
    *(unsigned char *)(a3 + 57) = 8;
    return result;
  }
  if (v10 == 0x64616F6C796170 && v11 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v15 & 1) == 0)
    {
      sub_100198B64();
      swift_allocError();
      *unint64_t v16 = 0;
      return swift_willThrow();
    }
  }
  uint64_t v17 = (uint64_t *)(*(void *)(a2 + *(int *)(type metadata accessor for BiomeSessionWrapper(0) + 20))
                  + OBJC_IVAR___SRRawPayload_data);
  uint64_t v18 = *v17;
  unint64_t v19 = v17[1];
  *(void *)a3 = *v17;
  *(void *)(a3 + 8) = v19;
  *(unsigned char *)(a3 + 57) = 9;
  return sub_100027BCC(v18, v19);
}

uint64_t sub_10001B840(uint64_t a1)
{
  return a1;
}

uint64_t destroy for AnyValue(uint64_t result)
{
  uint64_t v1 = result;
  unsigned int v2 = *(unsigned __int8 *)(result + 57);
  if (v2 >= 0xB) {
    unsigned int v2 = *(_DWORD *)result + 11;
  }
  switch(v2)
  {
    case 7u:
      sub_10001CA50(result);
      uint64_t v3 = *(void *)(v1 + 40);
      uint64_t v4 = *(void *)(v1 + 48);
      char v5 = *(unsigned char *)(v1 + 56);
      uint64_t result = sub_1001230F4(v3, v4, v5);
      break;
    case 8u:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    case 9u:
      uint64_t v6 = *(void *)result;
      unint64_t v7 = *(void *)(v1 + 8);
      uint64_t result = sub_1000291B4(v6, v7);
      break;
    case 0xAu:
      uint64_t result = swift_unknownObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10001B978(uint64_t a1, uint64_t a2)
{
  return a2;
}

__n128 initializeWithTake for AnyValue(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 42) = *(_OWORD *)(a2 + 42);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_10001B9F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_10001BDD4(a1, a2, a3);
}

uint64_t sub_10001BA14()
{
  return sub_10001BA44();
}

uint64_t sub_10001BA38()
{
  return *(unsigned __int8 *)(*(void *)v0 + 74);
}

uint64_t sub_10001BA44()
{
  return *(void *)(v0 + 80);
}

uint64_t sub_10001BA4C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_10001BA80@<X0>(uint64_t a1@<X8>)
{
  swift_unknownObjectUnownedLoadStrong();
  uint64_t v2 = sub_10001BAE4();
  sub_10001C20C(v2 + 32, a1);
  swift_unknownObjectRelease();

  return swift_release();
}

uint64_t sub_10001BAE4()
{
  swift_retain();
  swift_retain();
  sub_10002AB20();
  sub_100027E58();
  swift_release();
  return v0;
}

void sub_10001BB64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  switch(*(void *)(a10 + 16))
  {
    case 0:
      sub_10002C2EC();
      os_signpost(_:dso:log:name:signpostID:_:_:)();
      return;
    case 1:
      sub_10002572C((uint64_t *)&unk_10021BB00);
      uint64_t v10 = swift_allocObject();
      *(_OWORD *)(v10 + 16) = xmmword_1001A2A20;
      uint64_t v11 = v10 + 32;
      uint64_t v12 = a10 + 32;
      goto LABEL_8;
    case 2:
      sub_10002572C((uint64_t *)&unk_10021BB00);
      uint64_t v13 = (__n128 *)swift_allocObject();
      sub_100026A6C(v13, (__n128)xmmword_1001A3830);
      uint64_t v11 = (uint64_t)&v13[4].n128_i64[1];
      uint64_t v12 = a10 + 72;
      goto LABEL_8;
    case 3:
      sub_10002572C((uint64_t *)&unk_10021BB00);
      uint64_t v14 = (__n128 *)swift_allocObject();
      sub_100026A6C(v14, (__n128)xmmword_1001A2A30);
      sub_10001C20C(a10 + 72, (uint64_t)&v14[4].n128_i64[1]);
      uint64_t v11 = (uint64_t)&v14[7];
      uint64_t v12 = a10 + 112;
      goto LABEL_8;
    case 4:
      sub_10002572C((uint64_t *)&unk_10021BB00);
      char v15 = (__n128 *)swift_allocObject();
      sub_100026A6C(v15, (__n128)xmmword_1001A3750);
      sub_10001C20C(a10 + 72, (uint64_t)&v15[4].n128_i64[1]);
      sub_10001C20C(a10 + 112, (uint64_t)&v15[7]);
      uint64_t v11 = (uint64_t)&v15[9].n128_i64[1];
      uint64_t v12 = a10 + 152;
      goto LABEL_8;
    case 5:
      sub_10002572C((uint64_t *)&unk_10021BB00);
      unint64_t v16 = (__n128 *)swift_allocObject();
      sub_100026A6C(v16, (__n128)xmmword_1001A4D80);
      sub_10001C20C(a10 + 72, (uint64_t)&v16[4].n128_i64[1]);
      sub_10001C20C(a10 + 112, (uint64_t)&v16[7]);
      sub_10001C20C(a10 + 152, (uint64_t)&v16[9].n128_i64[1]);
      uint64_t v11 = (uint64_t)&v16[12];
      uint64_t v12 = a10 + 192;
LABEL_8:
      sub_10001C20C(v12, v11);
      sub_10002C2EC();
      os_signpost(_:dso:log:name:signpostID:_:_:)();
      swift_bridgeObjectRelease();
      break;
    default:
      return;
  }
}

uint64_t sub_10001BDD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  char v5 = v3;
  sub_100017F00();
  uint64_t v9 = v3[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10001C270(&v35, a1, a2, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v36)
  {
    sub_10001C1AC(&v35, (uint64_t)&v37);
    return sub_10001C1AC(&v37, (uint64_t)a3);
  }
  sub_100019938((uint64_t)&v35, &qword_100221508);
  uint64_t v11 = v5 + 12;
  sub_100017F00();
  uint64_t v12 = v5[12];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100139ED8(a1, a2, v12, (uint64_t)v40);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10012C990((uint64_t)v40, (uint64_t)&v42);
  if ((void)v43 == 1)
  {
    sub_1001229F8();
    swift_allocError();
    uint64_t v14 = v13;
    *(void *)&long long v37 = 0;
    *((void *)&v37 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    *(void *)&long long v37 = 0x2220616D65686353;
    *((void *)&v37 + 1) = 0xE800000000000000;
    uint64_t v15 = v5[2];
    unint64_t v16 = (void *)v5[3];
    swift_bridgeObjectRetain();
    v17._countAndFlagsBits = v15;
    v17._object = v16;
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    v18._object = (void *)0x80000001001B8C50;
    v18._countAndFlagsBits = 0xD000000000000016;
    String.append(_:)(v18);
    v19._countAndFlagsBits = sub_10002A494();
    String.append(_:)(v19);
    v20._countAndFlagsBits = 34;
    v20._object = (void *)0xE100000000000000;
    String.append(_:)(v20);
    uint64_t v21 = *((void *)&v37 + 1);
    *(void *)uint64_t v14 = v37;
    *(void *)(v14 + 8) = v21;
    *(unsigned char *)(v14 + 41) = 4;
    return swift_willThrow();
  }
  long long v45 = v42;
  long long v46 = v43;
  char v47 = v44;
  uint64_t v22 = v5[7];
  if (!v22)
  {
    sub_10012C9F8(v40);
    sub_1001229F8();
    swift_allocError();
    *(_OWORD *)uint64_t v29 = 0u;
    *(_OWORD *)(v29 + 16) = 0u;
    *(_OWORD *)(v29 + 25) = 0u;
    *(unsigned char *)(v29 + 41) = 14;
    return swift_willThrow();
  }
  uint64_t v48 = v5 + 7;
  uint64_t v23 = v5[8];
  uint64_t v24 = type metadata accessor for ProtoProperty();
  swift_allocObject();
  swift_unknownObjectRetain_n();
  swift_bridgeObjectRetain();
  uint64_t v25 = sub_10002A494();
  uint64_t v28 = sub_1001328A4(v25, v26, v27, v22, v23);
  if (v4) {
    return swift_unknownObjectRelease();
  }
  uint64_t v30 = v28;
  uint64_t v38 = v24;
  uint64_t v39 = &off_100202E28;
  *(void *)&long long v37 = v28;
  sub_1000257C8();
  swift_bridgeObjectRetain();
  swift_retain();
  sub_10012B818((uint64_t)&v37, a1, a2, (void (*)(void))sub_10001C1AC, (void (*)(void *, uint64_t, uint64_t))sub_10013A83C, &qword_100221508, (void (*)(void *__return_ptr, uint64_t, uint64_t))sub_10013EDB8);
  swift_endAccess();
  sub_1000257C8();
  uint64_t v31 = sub_10002A494();
  sub_10013EC7C(v31, v32, v33);
  swift_endAccess();
  sub_10012C9F8(v41);
  if (!*(void *)(*v11 + 16))
  {
    uint64_t v34 = v48;
    *uint64_t v48 = 0;
    v34[1] = 0;
    swift_unknownObjectRelease();
  }
  a3[3] = v24;
  a3[4] = (uint64_t)&off_100202E28;
  uint64_t result = swift_unknownObjectRelease();
  *a3 = v30;
  return result;
}

uint64_t sub_10001C1AC(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

double sub_10001C1C4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*(void *)(a3 + 16) && (unint64_t v5 = sub_1000287F0(a1, a2), (v6 & 1) != 0))
  {
    sub_100024CBC(v5);
  }
  else
  {
    *(void *)(a4 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
  }
  return result;
}

uint64_t sub_10001C20C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_10001C274(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_10001C3A4(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_10001C348((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    uint64_t ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_10001C348((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  sub_10001CA50((uint64_t)v12);
  return v7;
}

uint64_t sub_10001C348(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_10001C3A4(void *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0 && __dst && a3 - (uint64_t)__dst > (uint64_t)(HIBYTE(a6) & 0xF))
    {
      __src[0] = a5;
      __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
      sub_100064C24((char *)__src, HIBYTE(a6) & 0xF, __dst);
      UnsafeMutableRawBufferPointer.subscript.setter();
      uint64_t result = 0;
      *a1 = __dst;
      return result;
    }
    goto LABEL_11;
  }
  if ((a6 & 0x1000000000000000) != 0)
  {
LABEL_11:
    uint64_t result = (uint64_t)sub_100064CFC(a5, a6);
    *a1 = v11;
    return result;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
  }
  else
  {
    uint64_t v8 = _StringObject.sharedUTF8.getter();
    if (!v8)
    {
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
  }
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

id sub_10001C4FC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v41 = a4;
  uint64_t v42 = type metadata accessor for Client();
  uint64_t v6 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = (int *)type metadata accessor for PegasusContext(0);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v15 = (char *)&v40 - v14;
  __chkstk_darwin(v13);
  Swift::String v17 = (char *)&v40 - v16;
  uint64_t v40 = a3;
  Date.timeIntervalSince1970.getter();
  [a2 setSessionStart:round(v18)];
  sub_100006DF8();
  uint64_t v19 = sub_100030F14();
  swift_unknownObjectRelease();
  sub_100005AC8(v19, a2);
  sub_100017C74();
  sub_100018148(0, 0);
  Swift::String v20 = (void *)sub_100016A0C();
  swift_unknownObjectRelease();
  if (v20)
  {
    uint64_t v21 = sub_100006BB8(v20);
    if (v22) {
      sub_100009774(v21, v22, 0x6973726556676162, 0xEA00000000006E6FLL, a2);
    }
  }
  [a2 setDuEnabled:DiagnosticLogSubmissionEnabled()];
  sub_10000582C();
  sub_10001B620(v43, v44);
  unint64_t v23 = sub_10001CB0C();
  swift_bridgeObjectRelease();
  if ((v23 & 0x8000000000000000) != 0 || HIDWORD(v23))
  {
    id result = (id)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    sub_10001CA50((uint64_t)v43);
    [a2 setDevicePersistentD20:v23];
    sub_100023FDC((uint64_t)v17);
    uint64_t v24 = *((void *)v17 + 1);
    swift_bridgeObjectRetain();
    sub_100027C78((uint64_t)v17, (void (*)(void))type metadata accessor for PegasusContext);
    if (v24)
    {
      NSString v25 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    else
    {
      NSString v25 = 0;
    }
    uint64_t v26 = v41;
    [a2 setLocale:v25];

    sub_100023FDC((uint64_t)v15);
    uint64_t v27 = *(void *)&v15[v9[20] + 8];
    swift_bridgeObjectRetain();
    sub_100027C78((uint64_t)v15, (void (*)(void))type metadata accessor for PegasusContext);
    if (v27)
    {
      NSString v28 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    else
    {
      NSString v28 = 0;
    }
    uint64_t v29 = v42;
    [a2 setCountryCode:v28];

    type metadata accessor for SessionTokens(0);
    uint64_t v30 = UUID.uuidString.getter();
    sub_10001CAA0(v30, v31, a2, (SEL *)&selRef_setUserGuidString_);
    uint64_t v32 = UserAgent.fullString.getter();
    sub_10001CAA0(v32, v33, a2, (SEL *)&selRef_setAgent_);
    if ([a2 duEnabled])
    {
      sub_100023FDC((uint64_t)v12);
      uint64_t v34 = *(void *)&v12[v9[37]];
      sub_100027C78((uint64_t)v12, (void (*)(void))type metadata accessor for PegasusContext);
      objc_msgSend(a2, "setPrivateRelayStatus:", sub_10000B2F0(v26, v34));
    }
    sub_100008AC4(v43);
    sub_10001B620(v43, v44);
    UserAgent.client.getter();
    uint64_t v35 = Client.name.getter();
    uint64_t v37 = v36;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v29);
    LOBYTE(v35) = sub_10002CA2C(v35, v37);
    swift_bridgeObjectRelease();
    [a2 setSearchOptOut:v35 & 1];
    sub_10001CA50((uint64_t)v43);
    sub_100023FDC((uint64_t)v12);
    uint64_t v38 = v12[v9[31]];
    sub_100027C78((uint64_t)v12, (void (*)(void))type metadata accessor for PegasusContext);
    return [a2 setIsInternalCarry:v38];
  }
  return result;
}

uint64_t sub_10001CA50(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

void sub_10001CAA0(uint64_t a1, uint64_t a2, void *a3, SEL *a4)
{
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  objc_msgSend(a3, *a4, v6);
}

unint64_t sub_10001CB0C()
{
  uint64_t v1 = *(os_unfair_lock_s **)(*(void *)(v0 + OBJC_IVAR____TtC7parsecd27DevicePersistentDataManager_locker) + 16);
  swift_retain();
  swift_retain();
  os_unfair_lock_lock(v1);
  sub_100007AA0(v0, &v3);
  os_unfair_lock_unlock(v1);
  swift_release();
  swift_release();
  return v3;
}

uint64_t sub_10001CB8C()
{
  sub_10001CDE0(v0 + 16);

  return _swift_deallocClassInstance(v0, 32, 7);
}

uint64_t sub_10001CBC4()
{
  sub_10001CBF8();

  return _swift_deallocClassInstance(v0, 944, 7);
}

uint64_t sub_10001CBF8()
{
  sub_10001CDE0(v0 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_10001CDE0(uint64_t a1)
{
  return a1;
}

void sub_10001CE08()
{
  sub_10000DFE0();
  uint64_t v91 = v1;
  uint64_t v100 = v2;
  v99 = v3;
  uint64_t v98 = v4;
  uint64_t v90 = v5;
  uint64_t v97 = v6;
  uint64_t v102 = v7;
  uint64_t v9 = v8;
  uint64_t v95 = sub_10002572C(&qword_10021BF38);
  sub_10001DCF8();
  __chkstk_darwin(v10);
  sub_10000E04C();
  sub_10001D79C(v11);
  uint64_t v12 = sub_10002572C(&qword_10021BF30);
  uint64_t v13 = sub_100016544(v12);
  __chkstk_darwin(v13);
  sub_100017D2C();
  sub_100024A74();
  __chkstk_darwin(v14);
  sub_100021308();
  sub_100024A74();
  __chkstk_darwin(v15);
  sub_100021308();
  sub_100024A74();
  __chkstk_darwin(v16);
  sub_10002EC98();
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v89 - v18;
  uint64_t v20 = type metadata accessor for UserAgent();
  sub_100020C48();
  uint64_t v22 = v21;
  __chkstk_darwin(v23);
  sub_100024A74();
  __chkstk_darwin(v24);
  uint64_t v26 = (void (*)(void *, id))((char *)&v89 - v25);
  type metadata accessor for Client();
  sub_100020C48();
  __chkstk_darwin(v27);
  sub_100028CA0();
  UserAgent.client.getter();
  Client.type.getter();
  sub_100018488();
  v28();
  uint64_t v29 = v26;
  uint64_t v30 = ClientType.rawValue.getter();
  uint64_t v31 = ClientType.rawValue.getter();
  uint64_t v32 = *(void (**)(void (*)(void *, id), uint64_t, uint64_t))(v22 + 16);
  uint64_t v94 = v9;
  v32(v29, v9, v20);
  if (v30 == v31)
  {
    uint64_t v33 = (void *)(v22 + 8);
    sub_1000283AC();
    v34();
    sub_1000E2FAC();
LABEL_3:
    sub_1000E2434();
    goto LABEL_18;
  }
  uint64_t v35 = sub_10002ECB8();
  uint64_t v89 = (void (*)(uint64_t, uint64_t, uint64_t))v32;
  ((void (*)(uint64_t))v32)(v35);
  uint64_t v36 = sub_1000E29A0();
  sub_10002538C(v36, v37, v38, v20);
  sub_10001DAF4((uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__userAgent, (void (*)(uint64_t))sub_10002A280);
  uint64_t v39 = v96;
  uint64_t v40 = v96 + *(int *)(v95 + 48);
  uint64_t v41 = sub_1000E29B0();
  sub_10002B9E8(v41, v42, &qword_10021BF30);
  sub_1000E2994();
  sub_10002B9E8(v43, v44, v45);
  sub_1000184F4(v39, 1, v20);
  if (v47)
  {
    sub_100019994(v0, &qword_10021BF30);
    sub_100019994((uint64_t)v19, &qword_10021BF30);
    uint64_t v33 = (void *)(v22 + 8);
    sub_1000283AC();
    v46();
    sub_1000184F4(v40, 1, v20);
    uint64_t v29 = v99;
    if (v47)
    {
      sub_100019994(v39, &qword_10021BF30);
      goto LABEL_3;
    }
  }
  else
  {
    sub_10002B9E8(v39, v92, &qword_10021BF30);
    sub_1000184F4(v40, 1, v20);
    if (!v47)
    {
      sub_1000E257C();
      sub_1000E2570();
      sub_10000E0F4();
      v58();
      sub_10003233C((unint64_t *)&unk_10021BF40, (void (*)(uint64_t))&type metadata accessor for UserAgent);
      LODWORD(v95) = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v59 = *(void (**)(void))(v22 + 8);
      uint64_t v33 = (void *)(v22 + 8);
      uint64_t v29 = (void (*)(void *, id))v59;
      sub_1000283AC();
      v59();
      sub_100019994(v0, &qword_10021BF30);
      sub_100019994((uint64_t)v19, &qword_10021BF30);
      sub_1000283AC();
      v59();
      sub_1000283AC();
      v59();
      sub_100019994(v39, &qword_10021BF30);
      sub_1000E2FAC();
      sub_1000E2434();
      if (v95) {
        goto LABEL_18;
      }
      goto LABEL_13;
    }
    sub_100019994(v0, &qword_10021BF30);
    sub_100019994((uint64_t)v19, &qword_10021BF30);
    uint64_t v48 = *(void (**)(void))(v22 + 8);
    uint64_t v33 = (void *)(v22 + 8);
    sub_1000283AC();
    v48();
    sub_1000283AC();
    v48();
    sub_1000E2FAC();
  }
  sub_100019994(v39, &qword_10021BF38);
  sub_1000E2434();
LABEL_13:
  uint64_t v49 = v93;
  v89(v93, v94, v20);
  sub_10002538C(v49, 0, 1, v20);
  sub_1000BFD04();
  uint64_t v50 = (void *)sub_100012824((uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__bag, (uint64_t (*)(uint64_t))sub_100012864);
  if (v50)
  {
    id v51 = v50;
    UserAgent.fullString.getter();
    uint64_t v53 = v52;
    id v54 = objc_allocWithZone((Class)PARBag);
    uint64_t v55 = (void *)sub_100027EA8();
    id v57 = sub_10001519C(v55, v56, v53);
    sub_1000BFBE8(v57);
  }
  if (*(void *)(*(void *)(v39 + 64) + 32))
  {
    swift_retain();
    sub_1000F0C24();
    swift_release();
  }
LABEL_18:
  uint64_t v60 = v101;
  sub_10001DAF4((uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__userAgent, (void (*)(uint64_t))sub_10002A280);
  uint64_t v61 = sub_1000E2274();
  int v63 = sub_100027BA4(v61, v62, v20);
  sub_100019994(v60, &qword_10021BF30);
  if (v63 == 1)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_1000E30C8();
    sub_10002572C(&qword_100219280);
    uint64_t inited = (__n128 *)swift_initStackObject();
    uint64_t v65 = sub_10002E6C0(inited, (__n128)xmmword_1001A2A20);
    uint64_t v67 = sub_1000E219C(v65, (uint64_t)&type metadata for String, v66);
    v67[6] = v68;
    v67[7] = v69;
    Dictionary.init(dictionaryLiteral:)();
    id v70 = objc_allocWithZone((Class)NSError);
    id v71 = sub_10002EAAC();
    id v72 = [self defaultCenter];
  }
  else
  {
    sub_10000F62C();
    if (v73)
    {
      uint64_t v74 = sub_100012824((uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__bag, (uint64_t (*)(uint64_t))sub_100012864);
      if (v74)
      {
        id v75 = (void *)v74;
        sub_100023FA0(0, (unint64_t *)&qword_10021D040);
        if ((Config.isDefault.getter() & 1) == 0)
        {
          id v71 = v75;
          sub_100014D04(v75, 0, v97, v90, (uint64_t)v33, v29);
          swift_unknownObjectRelease();

          goto LABEL_29;
        }
      }
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      sub_1000E30C8();
      sub_10002572C(&qword_100219280);
      uint64_t v76 = (__n128 *)swift_initStackObject();
      uint64_t v77 = sub_100025460(v76, (__n128)xmmword_1001A2A20);
      uint64_t v78 = sub_1000E218C((uint64_t)v77, (uint64_t)&type metadata for String);
      sub_100018548(v78, v79 + 11);
      Dictionary.init(dictionaryLiteral:)();
      id v80 = objc_allocWithZone((Class)NSError);
      id v71 = sub_10002EAAC();
      id v72 = [self defaultCenter];
    }
    else
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      sub_1000E30C8();
      sub_10002572C(&qword_100219280);
      uint64_t v81 = (__n128 *)swift_initStackObject();
      id v82 = sub_100025460(v81, (__n128)xmmword_1001A2A20);
      uint64_t v83 = sub_1000E218C((uint64_t)v82, (uint64_t)&type metadata for String);
      sub_100018548(v83, v84);
      Dictionary.init(dictionaryLiteral:)();
      id v85 = objc_allocWithZone((Class)NSError);
      id v71 = sub_10002EAAC();
      id v72 = [self defaultCenter];
    }
  }
  id v86 = v72;
  [v86 addObserver:v33 selector:"bagChangeNotificationWithNotification:" name:@"PARBagChangeNotification" object:0];

  if (v29)
  {
    id v87 = sub_100030D6C((uint64_t)v71);
    v29(0, v87);
    swift_errorRelease();
  }
  swift_unknownObjectRelease();
LABEL_29:

  uint64_t v88 = sub_10002A494();
  sub_1000332CC(v88);
  sub_10000DFB8();
}

uint64_t sub_10001D754()
{
  return v0;
}

uint64_t sub_10001D764()
{
  return v0;
}

uint64_t sub_10001D778()
{
  return v0;
}

uint64_t sub_10001D784()
{
  return swift_slowAlloc();
}

void sub_10001D79C(uint64_t a1@<X8>)
{
  *(void *)(v1 - 256) = a1;
}

uint64_t sub_10001D7C0()
{
  return v0 + v1;
}

uint64_t sub_10001D7D8()
{
  return v0;
}

uint64_t sub_10001D810()
{
  return v0;
}

uint64_t sub_10001D82C(uint64_t a1, unint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_10016AE48(a1, a2, a3, a4, v12, v11, v10, v9, a9);
}

uint64_t sub_10001D84C()
{
  return v0;
}

void sub_10001D864()
{
  sub_10000DFE0();
  unint64_t v3 = v0;
  uint64_t v29 = v4;
  sub_100024344();
  uint64_t v5 = type metadata accessor for Requestor();
  sub_100020C48();
  uint64_t v28 = v6;
  __chkstk_darwin(v7);
  sub_100017DC8();
  uint64_t v8 = sub_10002572C(&qword_10021BF30);
  uint64_t v9 = sub_100016544(v8);
  __chkstk_darwin(v9);
  sub_1000E2A04();
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v28 - v12;
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v28 - v14;
  id v16 = v0;
  sub_10001DC3C(v0);
  sub_10001DAF4((uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__userAgent, (void (*)(uint64_t))sub_10002A280);
  uint64_t v17 = type metadata accessor for UserAgent();
  int v18 = sub_100027BA4((uint64_t)v15, 1, v17);
  sub_100019994((uint64_t)v15, &qword_10021BF30);
  if (v18 == 1 || (sub_10001DB68() & 1) != 0)
  {
    sub_10002B9E8(v29, v2, &qword_10021BF30);
    uint64_t v19 = sub_1000E27AC();
    sub_1000184F4(v19, v20, v17);
    if (v21)
    {
      id v22 = [v16 userAgent];
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      (*(void (**)(uint64_t, void, uint64_t))(v28 + 104))(v1, enum case for Requestor.parsecd(_:), v5);
      sub_1000E2854();
      UserAgent.init(_:requestor:)();
      sub_100019994(v2, &qword_10021BF30);
    }
    else
    {
      sub_10000E004();
      (*(void (**)(char *, uint64_t, uint64_t))(v23 + 32))(v13, v2, v17);
    }
    uint64_t v24 = sub_1000E29A0();
    sub_10002538C(v24, v25, v26, v17);
    sub_1000BFD04();
    sub_1000C0378((uint64_t)v30);
    uint64_t v27 = (uint64_t)v3 + OBJC_IVAR____TtC7parsecd11ClientState_engagedSuggestionController;
    sub_1000257C8();
    sub_1000E0328((uint64_t)v30, v27, &qword_10021CD08);
    swift_endAccess();
  }
  sub_10000DFB8();
}

uint64_t sub_10001DAF4(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v3 = sub_1000E2B44();
  a2(v3);

  return swift_release();
}

uint64_t sub_10001DB48()
{
  return Message.serializedData(partial:)();
}

uint64_t sub_10001DB68()
{
  id v1 = [v0 identifier];
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v4 = v3;

  if (v2 == 0x745F636573726170 && v4 == 0xEB000000006C6F6FLL)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    return v6 & 1;
  }
}

void sub_10001DC3C(void *a1)
{
  id v1 = a1;
  swift_retain();
  sub_10001DCA4();
  swift_release();
}

void sub_10001DCA4()
{
  sub_10002643C();
  sub_10002590C();
  uint64_t v3 = *(void **)(v1 + 16);
  *(void *)(v1 + 16) = v0;
  id v4 = v0;

  os_unfair_lock_unlock(v2);
}

uint64_t sub_10001DD08()
{
  return swift_weakInit();
}

uint64_t sub_10001DD64()
{
  return os_log(_:dso:log:type:_:)();
}

uint64_t sub_10001DD88(uint64_t a1, uint64_t a2)
{
  sub_10002A10C(a1, a2);
  return Logger.logObject.getter();
}

void sub_10001DDB0()
{
  uint64_t v2 = *(os_unfair_lock_s **)(v0 + 24);
  os_unfair_lock_lock(v2);
}

uint64_t sub_10001DDE0()
{
  return 0;
}

uint64_t sub_10001DE08()
{
  return Apple_Parsec_Search_PegasusQueryContext.encryptedAuthToken.setter();
}

uint64_t sub_10001DE24()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_10001DE50()
{
  return v0;
}

uint64_t sub_10001DE5C()
{
  *(void *)(v1 - 88) = v0;
  return type metadata accessor for Array();
}

void sub_10001DE98()
{
  sub_100128A68();
}

uint64_t sub_10001DED0()
{
  return 0;
}

uint64_t sub_10001DEE0()
{
  return v0;
}

uint64_t sub_10001DF04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v15 = v9[17];
  uint64_t v16 = v9[18];
  uint64_t v17 = v9[22];
  uint64_t v18 = v9[19];
  return sub_10016AE48(v10, v11, v15, v12, v16, v17, v18, v13, a9);
}

uint64_t sub_10001DF5C()
{
  return v0;
}

uint64_t sub_10001DF70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v9 = sub_10002572C(&qword_10021BB20);
  uint64_t v10 = sub_100016544(v9);
  __chkstk_darwin(v10);
  sub_1000281C8();
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)v25 - v12;
  if (a3)
  {
    v25[1] = a1;
    uint64_t v14 = self;
    swift_unknownObjectRetain();
    id v15 = [v14 standardUserDefaults];
    NSString v16 = String._bridgeToObjectiveC()();
    id v17 = [v15 stringForKey:v16];

    if (v17)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      URL.init(string:)();
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v18 = type metadata accessor for URL();
      if (sub_100027BA4((uint64_t)v13, 1, v18) != 1)
      {
        sub_10000E004();
        return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v24 + 32))(a4, v13, v18);
      }
      sub_1000256D4((uint64_t)v13, &qword_10021BB20);
    }
    else
    {
      swift_unknownObjectRelease();
    }
  }
  if (a2)
  {
    Swift::String v19 = String.uppercased()();
    if (v19._countAndFlagsBits == 20035 && v19._object == (void *)0xE200000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
    }
  }
  URL.init(string:)();
  swift_bridgeObjectRelease();
  uint64_t v21 = type metadata accessor for URL();
  if (sub_100027BA4(v4, 1, v21) == 1)
  {
    sub_1000256D4(v4, &qword_10021BB20);
    sub_100105920();
    swift_allocError();
    return swift_willThrow();
  }
  else
  {
    sub_10000E004();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 32))(a4, v4, v21);
  }
}

uint64_t sub_10001E260()
{
  uint64_t v0 = type metadata accessor for UserAgent();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for URLRequest();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10002572C(&qword_10021BB20);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (swift_unknownObjectWeakLoadStrong())
  {
    uint64_t v17 = v5;
    uint64_t v18 = v1;
    if (sub_100023568())
    {
      type metadata accessor for PARNetworkRequestFactory();
      uint64_t inited = swift_initStackObject();
      uint64_t v12 = swift_retain();
      sub_10001E5C0(v12, inited);
      parsecdUserAgent.getter();
      sub_10001EA38();
      (*(void (**)(char *, uint64_t))(v18 + 8))(v3, v0);
      swift_release();
      URLRequest.url.getter();
      (*(void (**)(char *, uint64_t))(v17 + 8))(v7, v4);
      uint64_t v13 = type metadata accessor for URL();
      int v14 = sub_100027BA4((uint64_t)v10, 1, v13);
      if (v14 != 1)
      {
        uint64_t v15 = URL.absoluteString.getter();
        swift_unknownObjectRelease();
        swift_release();
        (*(void (**)(char *, uint64_t))(*(void *)(v13 - 8) + 8))(v10, v13);
        return v15;
      }
      swift_unknownObjectRelease();
      swift_release();
      sub_1000256D4((uint64_t)v10, &qword_10021BB20);
    }
    else
    {
      swift_unknownObjectRelease();
    }
  }
  return 0;
}

uint64_t type metadata accessor for PARNetworkRequestFactory()
{
  return self;
}

uint64_t sub_10001E5C0(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 24) = 0;
  swift_unknownObjectWeakInit();
  *(void *)(a2 + 40) = 0xE600000000000000;
  *(void *)(a2 + 48) = 7041900;
  *(void *)(a2 + 56) = 0xE300000000000000;
  *(void *)(a2 + 64) = 7627109;
  *(void *)(a2 + 72) = 0xE300000000000000;
  *(void *)(a2 + 80) = 0x6C616E7265746E69;
  *(void *)(a2 + 88) = 0xE800000000000000;
  *(void *)(a2 + 96) = 1684366707;
  *(void *)(a2 + 104) = 0xE400000000000000;
  *(void *)(a2 + 112) = 0x636F6C5F69726973;
  *(void *)(a2 + 120) = 0xEB00000000656C61;
  *(void *)(a2 + 128) = 0x6C62616E655F7368;
  *(void *)(a2 + 136) = 0xEA00000000006465;
  *(void *)(a2 + 144) = 0x676E6C74616CLL;
  *(void *)(a2 + 152) = 0xE600000000000000;
  *(void *)(a2 + 160) = 113;
  *(void *)(a2 + 168) = 0xE100000000000000;
  *(void *)(a2 + 176) = 0x676E616C71;
  *(void *)(a2 + 184) = 0xE500000000000000;
  *(void *)(a2 + 192) = 0x6F726665726F7473;
  *(void *)(a2 + 200) = 0xEA0000000000746ELL;
  *(void *)(a2 + 208) = 7826298;
  *(void *)(a2 + 216) = 0xE300000000000000;
  *(void *)(a2 + 224) = 0x6574736567677573;
  *(void *)(a2 + 232) = 0xE900000000000064;
  *(void *)(a2 + 240) = 0x746963696C707865;
  *(void *)(a2 + 248) = 0xE800000000000000;
  *(void *)(a2 + 256) = 0x656C61636F6CLL;
  *(void *)(a2 + 264) = 0xE600000000000000;
  *(void *)(a2 + 272) = 0x7261646E656C6163;
  *(void *)(a2 + 280) = 0xE800000000000000;
  *(void *)(a2 + 288) = 6829106;
  *(void *)(a2 + 312) = 0xE300000000000000;
  *(void *)(a2 + 320) = 49;
  *(void *)(a2 + 328) = 0xE100000000000000;
  *(void *)(a2 + 336) = 48;
  *(void *)(a2 + 344) = 0xE100000000000000;
  *(void *)(a2 + 352) = 0x6E6F6973726576;
  *(void *)(a2 + 360) = 0xE700000000000000;
  *(void *)(a2 + 368) = 0x656D695F626BLL;
  *(void *)(a2 + 376) = 0xE600000000000000;
  *(void *)(a2 + 384) = 0x6E69616D6F646CLL;
  *(void *)(a2 + 392) = 0xE700000000000000;
  *(void *)(a2 + 400) = 0x747865746E6F63;
  *(void *)(a2 + 408) = 0xE700000000000000;
  *(void *)(a2 + 416) = 1886217588;
  *(void *)(a2 + 424) = 0xE400000000000000;
  *(void *)(a2 + 432) = 0x676E616C7874636CLL;
  *(void *)(a2 + 440) = 0xE800000000000000;
  *(void *)(a2 + 448) = 0x657079746CLL;
  *(void *)(a2 + 456) = 0xE500000000000000;
  *(void *)(a2 + 464) = 0x746C7561666564;
  *(void *)(a2 + 472) = 0xE700000000000000;
  *(void *)(a2 + 480) = 1953393000;
  *(void *)(a2 + 296) = 0xE300000000000000;
  *(void *)(a2 + 304) = 7104883;
  *(void *)(a2 + 488) = 0xE400000000000000;
  *(void *)(a2 + 496) = 0x746963696C707865;
  *(void *)(a2 + 504) = 0xE800000000000000;
  *(void *)(a2 + 512) = 1701080941;
  *(void *)(a2 + 520) = 0xE400000000000000;
  *(void *)(a2 + 528) = 0x646567616E616DLL;
  *(void *)(a2 + 536) = 0xE700000000000000;
  *(void *)(a2 + 544) = 25443;
  *(void *)(a2 + 552) = 0xE200000000000000;
  *(void *)(a2 + 560) = 0x6E6F7A5F656D6974;
  *(void *)(a2 + 568) = 0xE900000000000065;
  *(void *)(a2 + 576) = 0x6D617473656D6974;
  *(void *)(a2 + 584) = 0xE900000000000070;
  *(void *)(a2 + 592) = 0x746E656761;
  *(void *)(a2 + 600) = 0xE500000000000000;
  *(void *)(a2 + 608) = 1685217635;
  *(void *)(a2 + 616) = 0xE400000000000000;
  *(void *)(a2 + 624) = 7107429;
  *(void *)(a2 + 632) = 0xE300000000000000;
  strcpy((char *)(a2 + 640), "If-None-Match");
  *(_WORD *)(a2 + 654) = -4864;
  *(void *)(a2 + 656) = 2037149295;
  *(void *)(a2 + 664) = 0xE400000000000000;
  *(void *)(a2 + 672) = 0x706F7468746977;
  *(void *)(a2 + 680) = 0xE700000000000000;
  *(void *)(a2 + 688) = 0xD000000000000014;
  *(void *)(a2 + 696) = 0x80000001001B7DF0;
  *(void *)(a2 + 704) = 0x6F74687469777273;
  *(void *)(a2 + 712) = 0xE900000000000070;
  *(void *)(a2 + 720) = 12908;
  *(void *)(a2 + 728) = 0xE200000000000000;
  *(void *)(a2 + 736) = 13164;
  *(void *)(a2 + 744) = 0xE200000000000000;
  *(void *)(a2 + 752) = 7299948;
  *(void *)(a2 + 760) = 0xE300000000000000;
  *(void *)(a2 + 768) = 7562092;
  *(void *)(a2 + 776) = 0xE300000000000000;
  *(void *)(a2 + 784) = 0xD000000000000010;
  *(void *)(a2 + 792) = 0x80000001001B2D70;
  *(void *)(a2 + 800) = 28020;
  *(void *)(a2 + 808) = 0xE200000000000000;
  *(void *)(a2 + 816) = 0x6F6E72657375;
  *(void *)(a2 + 824) = 0xE600000000000000;
  *(void *)(a2 + 832) = 0x7374696E75;
  *(void *)(a2 + 840) = 0xE500000000000000;
  *(void *)(a2 + 848) = 29040;
  *(void *)(a2 + 856) = 0xE200000000000000;
  *(void *)(a2 + 864) = 0x636967616DLL;
  *(void *)(a2 + 872) = 0xE500000000000000;
  *(void *)(a2 + 880) = 0x747065636341;
  *(void *)(a2 + 888) = 0xE600000000000000;
  *(void *)(a2 + 896) = 0xD000000000000016;
  *(void *)(a2 + 904) = 0x80000001001B7E10;
  *(void *)(a2 + 912) = 7370853;
  *(void *)(a2 + 920) = 0xE300000000000000;
  *(void *)(a2 + 928) = 7303027;
  *(void *)(a2 + 936) = 0xE300000000000000;
  *(void *)(a2 + 24) = &off_1001FD220;
  *(void *)(a2 + 32) = 0x6372736F6567;
  swift_unknownObjectWeakAssign();
  swift_release();
  return a2;
}

void sub_10001EA38()
{
  sub_100017EC4();
  uint64_t v41 = v2;
  uint64_t v42 = v0;
  uint64_t v37 = v3;
  uint64_t v38 = v4;
  uint64_t v40 = v5;
  uint64_t v44 = v6;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t v11 = type metadata accessor for PegasusClientName();
  sub_100020C48();
  uint64_t v39 = v12;
  __chkstk_darwin(v13);
  uint64_t v14 = sub_10002AD4C();
  sub_100020C48();
  uint64_t v43 = v15;
  __chkstk_darwin(v16);
  sub_100092F88();
  __chkstk_darwin(v17);
  Swift::String v19 = (char *)v34 - v18;
  uint64_t v21 = v10[2];
  uint64_t v20 = v10[3];
  sub_10001DF70(v21, v20, v8, (uint64_t)v34 - v18);
  if (!v1)
  {
    uint64_t v35 = v0;
    uint64_t v36 = v11;
    uint64_t v44 = v20;
    type metadata accessor for ParsecURLRequestBuilder();
    sub_100016608();
    v22();
    uint64_t v23 = sub_100020670();
    v34[0] = v19;
    v34[1] = v14;
    swift_bridgeObjectRetain();
    uint64_t v24 = v23;
    sub_10001FC6C();
    swift_bridgeObjectRelease();
    uint64_t v25 = v39;
    uint64_t v26 = v35;
    uint64_t v27 = v36;
    sub_100023D14();
    v30(v28, v29);
    PegasusClientName.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v26, v27);
    sub_100023FA0(0, &qword_10021B9B0);
    Dictionary.init(dictionaryLiteral:)();
    sub_100028B14();
    sub_10001EE6C();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10001FD00();
    sub_10001FCB4(v24, v10[6], v10[7]);
    sub_10001EE1C(v24, v10[4], v10[5]);
    sub_10001F994(v24, v21, v44);
    UserAgent.fullString.getter();
    sub_100093080();
    sub_1000205DC();
    swift_bridgeObjectRelease();
    sub_100021764(v41);
    sub_10000E040();
    v33(v31, v32);
    swift_release();
  }
  sub_100024A18();
}

uint64_t sub_10001ED28()
{
  uint64_t v2 = *(void *)(v0 - 112);
  uint64_t v3 = *(void *)(v0 - 104);
  return sub_100118BF0(v2, v3);
}

uint64_t sub_10001ED4C(uint64_t a1)
{
  *(void *)(v1 - 96) = a1;
  return v1 - 96;
}

void sub_10001EDC0()
{
  Hasher._combine(_:)(2uLL);
}

uint64_t sub_10001EDD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_100093A68(v12, v10, v14, v9, v15, v16, v13, v11, a9);
}

uint64_t sub_10001EE08()
{
  return v0;
}

void sub_10001EE1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    sub_100027540();
    if (v3 || (sub_100025238(), !v4))
    {
      if ((sub_10002C24C() & 1) == 0) {
        sub_10002137C();
      }
    }
  }
}

void sub_10001EE6C()
{
  sub_10000DFE0();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t v12 = type metadata accessor for PegasusClientName();
  sub_100020C48();
  uint64_t v14 = v13;
  __chkstk_darwin(v15);
  sub_100021208();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v17 = Strong;
    uint64_t v57 = v12;
    uint64_t v58 = v9;
    uint64_t v59 = v7;
    uint64_t v60 = v5;
    uint64_t v18 = *(void *)(v0 + 864);
    uint64_t v54 = *(void *)(v0 + 872);
    uint64_t v55 = v18;
    uint64_t v56 = v11;
    uint64_t v19 = sub_100020950(v18, v54);
    if (v20) {
      uint64_t v21 = v19;
    }
    else {
      uint64_t v21 = 0;
    }
    if (v20) {
      unint64_t v22 = v20;
    }
    else {
      unint64_t v22 = 0xE000000000000000;
    }
    v61[0] = 44;
    v61[1] = 0xE100000000000000;
    __chkstk_darwin(v19);
    v51[2] = v61;
    swift_bridgeObjectRetain();
    uint64_t v23 = sub_10001F318(0x7FFFFFFFFFFFFFFFLL, 1u, sub_100067E7C, (uint64_t)v51, v21, v22);
    swift_bridgeObjectRelease();
    uint64_t v24 = *(void *)(v23 + 16);
    if (v24)
    {
      uint64_t v52 = v3;
      uint64_t v53 = v17;
      swift_bridgeObjectRetain();
      uint64_t v25 = v23 + 56;
      uint64_t v26 = _swiftEmptyArrayStorage;
      do
      {
        swift_bridgeObjectRetain();
        uint64_t v27 = static String._fromSubstring(_:)();
        uint64_t v29 = v28;
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_100092FDC();
          uint64_t v26 = v33;
        }
        unint64_t v31 = v26[2];
        unint64_t v30 = v26[3];
        if (v31 >= v30 >> 1)
        {
          char v34 = sub_100093098(v30);
          sub_10002114C(v34, v31 + 1, 1, (uint64_t)v26);
          uint64_t v26 = v35;
        }
        v26[2] = v31 + 1;
        uint64_t v32 = &v26[2 * v31];
        v32[4] = v27;
        v32[5] = v29;
        v25 += 32;
        --v24;
      }
      while (v24);
      swift_bridgeObjectRelease();
      uint64_t v3 = v52;
    }
    else
    {
      uint64_t v26 = _swiftEmptyArrayStorage;
    }
    swift_bridgeObjectRelease();
    uint64_t v62 = sub_10001F858((uint64_t)v26);
    uint64_t v36 = v57;
    sub_100023D14();
    v37();
    uint64_t v38 = PegasusClientName.rawValue.getter();
    uint64_t v40 = v39;
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v1, v36);
    if (v38 == v58 && v40 == v59)
    {
      swift_bridgeObjectRelease();
      uint64_t v43 = v60;
      if (!v60) {
        goto LABEL_32;
      }
    }
    else
    {
      char v42 = sub_100025848();
      swift_bridgeObjectRelease();
      uint64_t v43 = v60;
      if ((v42 & 1) == 0 || !v60) {
        goto LABEL_32;
      }
    }
    id v44 = v43;
    NSString v45 = String._bridgeToObjectiveC()();
    unsigned int v46 = [v44 configBoolForKey:v45];

    if (v46)
    {

LABEL_31:
LABEL_32:
      sub_10001F90C((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v50 = sub_10001F9E4(v62, v3);
      swift_bridgeObjectRelease();
      if (*(void *)(v50 + 16))
      {
        v61[0] = v50;
        sub_10002572C(&qword_10021C5C0);
        sub_100092CA8(&qword_10021C5C8, &qword_10021C5C0);
        sub_100021100();
        Sequence<>.joined(separator:)();
        swift_bridgeObjectRelease();
        sub_100118BF0(v55, v54);
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
      }
      else
      {
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
      }
      goto LABEL_35;
    }
    NSString v47 = String._bridgeToObjectiveC()();
    unsigned int v48 = [v44 configBoolForKey:v47];

    if (v48)
    {
    }
    else
    {
      v61[3] = &unk_1001FCBE0;
      _DWORD v61[4] = sub_1000714F0();
      LOBYTE(v61[0]) = 5;
      char v49 = isFeatureEnabled(_:)();
      sub_10001CA50((uint64_t)v61);

      if ((v49 & 1) == 0) {
        goto LABEL_31;
      }
    }
    sub_100090154(v61, 0x6867696C746F7073, 0xEF63707267655F74);

    swift_bridgeObjectRelease();
    goto LABEL_32;
  }
LABEL_35:
  sub_10000DFB8();
}

uint64_t sub_10001F318(uint64_t a1, unsigned __int8 a2, uint64_t (*a3)(void *), uint64_t a4, uint64_t a5, unint64_t a6)
{
  v50[3] = a4;
  if (a1 < 0)
  {
    sub_100020C64();
    goto LABEL_40;
  }
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = _swiftEmptyArrayStorage;
  uint64_t v42 = v10 + 16;
  uint64_t v47 = swift_allocObject();
  *(void *)(v47 + 16) = 15;
  uint64_t v11 = HIBYTE(a6) & 0xF;
  if (!a1 || ((a6 & 0x2000000000000000) != 0 ? (uint64_t v12 = HIBYTE(a6) & 0xF) : (uint64_t v12 = a5 & 0xFFFFFFFFFFFFLL), !v12))
  {
    if ((a6 & 0x2000000000000000) == 0) {
      uint64_t v11 = a5 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v30 = 7;
    if (((a6 >> 60) & ((a5 & 0x800000000000000) == 0)) != 0) {
      uint64_t v30 = 11;
    }
    sub_10001F750(v30 | (v11 << 16), v47, a2 & 1, v10);
    swift_bridgeObjectRelease();
    uint64_t v13 = *(void **)(v10 + 16);
    swift_bridgeObjectRetain();
    swift_release();
LABEL_36:
    swift_release();
    return (uint64_t)v13;
  }
  uint64_t v41 = a1;
  unint64_t v48 = 4 * v12;
  uint64_t v13 = _swiftEmptyArrayStorage;
  unint64_t v14 = 15;
  unint64_t v15 = 15;
  unint64_t v16 = 15;
  while (1)
  {
    v50[0] = String.subscript.getter();
    v50[1] = v17;
    char v18 = a3(v50);
    if (v6)
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (uint64_t)v13;
    }
    char v19 = v18;
    swift_bridgeObjectRelease();
    if ((v19 & 1) == 0)
    {
      unint64_t v14 = String.index(after:)();
      goto LABEL_21;
    }
    int v20 = (v15 >> 14 == v14 >> 14) & a2;
    if (v20 != 1)
    {
      if (v14 >> 14 < v15 >> 14) {
        goto LABEL_38;
      }
      uint64_t v21 = String.subscript.getter();
      uint64_t v43 = v23;
      uint64_t v44 = v22;
      uint64_t v45 = v24;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_100065710();
        uint64_t v13 = v28;
      }
      unint64_t v25 = v13[2];
      if (v25 >= v13[3] >> 1)
      {
        sub_100065710();
        uint64_t v13 = v29;
      }
      v13[2] = v25 + 1;
      uint64_t v26 = &v13[4 * v25];
      v26[4] = v21;
      v26[5] = v45;
      v26[6] = v44;
      v26[7] = v43;
      *(void *)uint64_t v42 = v13;
    }
    uint64_t v27 = String.index(after:)();
    unint64_t v14 = v27;
    *(void *)(v47 + 16) = v27;
    if ((v20 & 1) == 0 && v13[2] == v41) {
      break;
    }
    unint64_t v15 = v27;
    unint64_t v16 = v27;
LABEL_21:
    if (v48 == v14 >> 14) {
      goto LABEL_30;
    }
  }
  unint64_t v16 = v27;
  unint64_t v15 = v27;
LABEL_30:
  if (v48 == v15 >> 14 && (a2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
LABEL_35:
    swift_bridgeObjectRetain();
    swift_release();
    goto LABEL_36;
  }
  if (v48 >= v16 >> 14)
  {
    uint64_t v31 = String.subscript.getter();
    uint64_t v33 = v32;
    uint64_t v35 = v34;
    uint64_t v37 = v36;
    swift_bridgeObjectRelease();
    sub_100067D48();
    uint64_t v38 = *(void *)(*(void *)v42 + 16);
    sub_100067DEC(v38);
    uint64_t v13 = *(void **)v42;
    v13[2] = v38 + 1;
    uint64_t v39 = &v13[4 * v38];
    v39[4] = v31;
    v39[5] = v33;
    void v39[6] = v35;
    v39[7] = v37;
    *(void *)uint64_t v42 = v13;
    goto LABEL_35;
  }
LABEL_38:
  sub_100020C64();
LABEL_40:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10001F750(unint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  unint64_t v4 = *(void *)(a2 + 16) >> 14;
  int v5 = (v4 == a1 >> 14) & a3;
  if (v5 == 1) {
    return v5 ^ 1u;
  }
  if (a1 >> 14 >= v4)
  {
    uint64_t v7 = String.subscript.getter();
    uint64_t v9 = v8;
    uint64_t v11 = v10;
    uint64_t v13 = v12;
    sub_100067D48();
    uint64_t v14 = *(void *)(*(void *)(a4 + 16) + 16);
    sub_100067DEC(v14);
    uint64_t v15 = *(void *)(a4 + 16);
    *(void *)(v15 + 16) = v14 + 1;
    unint64_t v16 = (void *)(v15 + 32 * v14);
    v16[4] = v7;
    v16[5] = v9;
    void v16[6] = v11;
    v16[7] = v13;
    return v5 ^ 1u;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10001F858(uint64_t a1)
{
  uint64_t v2 = Set.init(minimumCapacity:)();
  uint64_t v10 = v2;
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    unint64_t v4 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v5 = *(v4 - 1);
      uint64_t v6 = *v4;
      swift_bridgeObjectRetain();
      sub_100090154(&v9, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
    return v10;
  }
  else
  {
    uint64_t v7 = v2;
    swift_bridgeObjectRelease();
  }
  return v7;
}

uint64_t sub_10001F90C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v3 = *(v2 - 1);
      uint64_t v4 = *v2;
      swift_bridgeObjectRetain();
      sub_100090154(&v6, v3, v4);
      swift_bridgeObjectRelease();
      v2 += 2;
      --v1;
    }
    while (v1);
  }

  return swift_bridgeObjectRelease();
}

void sub_10001F994(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    sub_100027540();
    if (v3 || (sub_100025238(), !v4))
    {
      if ((sub_10002C24C() & 1) == 0) {
        sub_10002137C();
      }
    }
  }
}

uint64_t sub_10001F9E4(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return swift_bridgeObjectRetain();
  }
  __chkstk_darwin(a1);
  swift_bridgeObjectRetain();
  sub_10001FA88(a2, (void (*)(uint64_t, uint64_t, id))sub_100092C54);
  return a1;
}

uint64_t sub_10001FA88(uint64_t a1, void (*a2)(uint64_t, uint64_t, id))
{
  sub_10001FC68(a1, v19);
  uint64_t v3 = v19[0];
  uint64_t v20 = v19[1];
  int64_t v4 = v19[3];
  unint64_t v5 = v19[4];
  int64_t v6 = (unint64_t)(v19[2] + 64) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  if (!v5) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v8 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  unint64_t v9 = v8 | (v4 << 6);
  while (1)
  {
    uint64_t v14 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v9);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    uint64_t v17 = *(void **)(*(void *)(v3 + 56) + 8 * v9);
    swift_bridgeObjectRetain();
    id v18 = v17;
    a2(v15, v16, v18);

    uint64_t result = swift_bridgeObjectRelease();
    if (v5) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v10 = v4 + 1;
    if (__OFADD__(v4, 1)) {
      break;
    }
    if (v10 >= v6) {
      return swift_release();
    }
    unint64_t v11 = *(void *)(v20 + 8 * v10);
    int64_t v12 = v4 + 1;
    if (!v11)
    {
      int64_t v12 = v4 + 2;
      if (v4 + 2 >= v6) {
        return swift_release();
      }
      unint64_t v11 = *(void *)(v20 + 8 * v12);
      if (!v11)
      {
        int64_t v12 = v4 + 3;
        if (v4 + 3 >= v6) {
          return swift_release();
        }
        unint64_t v11 = *(void *)(v20 + 8 * v12);
        if (!v11)
        {
          int64_t v12 = v4 + 4;
          if (v4 + 4 >= v6) {
            return swift_release();
          }
          unint64_t v11 = *(void *)(v20 + 8 * v12);
          if (!v11)
          {
            int64_t v12 = v4 + 5;
            if (v4 + 5 >= v6) {
              return swift_release();
            }
            unint64_t v11 = *(void *)(v20 + 8 * v12);
            if (!v11)
            {
              int64_t v13 = v4 + 6;
              while (v13 < v6)
              {
                unint64_t v11 = *(void *)(v20 + 8 * v13++);
                if (v11)
                {
                  int64_t v12 = v13 - 1;
                  goto LABEL_18;
                }
              }
              return swift_release();
            }
          }
        }
      }
    }
LABEL_18:
    unint64_t v5 = (v11 - 1) & v11;
    unint64_t v9 = __clz(__rbit64(v11)) + (v12 << 6);
    int64_t v4 = v12;
  }
  __break(1u);
  return result;
}

uint64_t sub_10001FC30@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = -1;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  *a2 = a1;
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t result = a1 + 64;
  uint64_t v5 = v6;
  if (-v3 < 64) {
    uint64_t v2 = ~(-1 << -(char)v3);
  }
  a2[1] = result;
  a2[2] = ~v3;
  a2[3] = 0;
  a2[4] = v2 & v5;
  return result;
}

void sub_10001FC6C()
{
  sub_100027540();
  if (v0 || (sub_100025238(), !v1))
  {
    if ((sub_10002C24C() & 1) == 0) {
      sub_10002137C();
    }
  }
}

void sub_10001FCB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    sub_100027540();
    if (v3 || (sub_100025238(), !v4))
    {
      if ((sub_10002C24C() & 1) == 0) {
        sub_10002137C();
      }
    }
  }
}

void sub_10001FD00()
{
  if (swift_unknownObjectWeakLoadStrong())
  {
    id v1 = [self standardUserDefaults];
    swift_unknownObjectRelease();
    uint64_t v0 = sub_10001FDBC();
    if (v0[2]) {
      sub_1000234B4((uint64_t)v0);
    }
    swift_bridgeObjectRelease();
  }
}

void *sub_10001FDBC()
{
  type metadata accessor for URLQueryItem();
  sub_100020C48();
  uint64_t v70 = v1;
  uint64_t v71 = v2;
  __chkstk_darwin(v1);
  id v75 = (char *)v65 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  NSString v4 = String._bridgeToObjectiveC()();
  id v5 = [v0 stringForKey:v4];

  if (!v5) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v8 = v7;

  if (qword_100218B48 != -1) {
    goto LABEL_54;
  }
  while (1)
  {
    uint64_t v9 = type metadata accessor for Logger();
    uint64_t v10 = sub_10002A10C(v9, (uint64_t)qword_1002369F0);
    swift_bridgeObjectRetain_n();
    uint64_t v69 = v10;
    unint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      int64_t v13 = (uint8_t *)swift_slowAlloc();
      v80[0] = swift_slowAlloc();
      *(_DWORD *)int64_t v13 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v79 = sub_10001C274((uint64_t)v6, v8, v80);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "processing debug parameters %s", v13, 0xCu);
      swift_arrayDestroy();
      sub_100017D40();
      sub_100017D40();
    }
    else
    {

      uint64_t v14 = swift_bridgeObjectRelease_n();
    }
    v80[0] = 38;
    v80[1] = 0xE100000000000000;
    __chkstk_darwin(v14);
    uint64_t v64 = v80;
    swift_bridgeObjectRetain();
    uint64_t v15 = sub_10001F318(0x7FFFFFFFFFFFFFFFLL, 1u, sub_100067E7C, (uint64_t)v62, (uint64_t)v6, v8);
    swift_bridgeObjectRelease();
    uint64_t v74 = *(void *)(v15 + 16);
    if (!v74)
    {
      swift_bridgeObjectRelease();
      return _swiftEmptyArrayStorage;
    }
    uint64_t v73 = v15 + 32;
    uint64_t v67 = v71 + 32;
    uint64_t v17 = _swiftEmptyArrayStorage;
    *(void *)&long long v16 = 136315138;
    long long v66 = v16;
    v65[1] = (char *)&type metadata for Any + 8;
    unint64_t v18 = 0;
    uint64_t v68 = v15;
LABEL_8:
    if (v18 < *(void *)(v15 + 16)) {
      break;
    }
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    swift_once();
  }
  uint64_t v76 = v17;
  char v19 = (unint64_t *)(v73 + 32 * v18);
  unint64_t v20 = *v19;
  unint64_t v21 = v19[1];
  unint64_t v22 = (unint64_t)_swiftEmptyArrayStorage;
  if (v21 >> 14 == *v19 >> 14)
  {
LABEL_36:
    if (*(void *)(v22 + 16) == 2)
    {
      swift_bridgeObjectRetain();
      static String._fromSubstring(_:)();
      uint64_t v6 = v52;
      swift_bridgeObjectRelease();
      if (*(void *)(v22 + 16) < 2uLL) {
        goto LABEL_53;
      }
      unint64_t v8 = *(void *)(v22 + 88);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      static String._fromSubstring(_:)();
      swift_bridgeObjectRelease();
      URLQueryItem.init(name:value:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v17 = v76;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v17 = (void *)sub_1000658AC(0, v17[2] + 1, 1, (uint64_t)v17);
      }
      unint64_t v54 = v17[2];
      unint64_t v53 = v17[3];
      uint64_t v6 = (v54 + 1);
      if (v54 >= v53 >> 1) {
        uint64_t v17 = (void *)sub_1000658AC(v53 > 1, v54 + 1, 1, (uint64_t)v17);
      }
      v17[2] = v6;
      (*(void (**)(unint64_t, char *, uint64_t))(v71 + 32))((unint64_t)v17+ ((*(unsigned __int8 *)(v71 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v71 + 80))+ *(void *)(v71 + 72) * v54, v75, v70);
    }
    else
    {
      swift_bridgeObjectRetain();
      uint64_t v6 = Logger.logObject.getter();
      os_log_type_t v55 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v6, v55))
      {
        uint64_t v56 = swift_slowAlloc();
        v80[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v56 = v66;
        swift_bridgeObjectRetain();
        uint64_t v57 = Array.description.getter();
        unint64_t v8 = v58;
        swift_bridgeObjectRelease();
        *(void *)(v56 + 4) = sub_10001C274(v57, v8, v80);
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v6, v55, "invalid query components: %s", (uint8_t *)v56, 0xCu);
        swift_arrayDestroy();
        sub_100017D40();
        sub_100017D40();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      uint64_t v17 = v76;
    }
    if (++v18 == v74)
    {
      swift_bridgeObjectRelease();
      return v17;
    }
    goto LABEL_8;
  }
  unint64_t v77 = v21 >> 14;
  unint64_t v72 = v18;
  unint64_t v23 = v19[3];
  swift_bridgeObjectRetain_n();
  unint64_t v24 = v20;
  unint64_t v25 = v20;
  unint64_t v26 = v20;
  unint64_t v78 = v23;
  do
  {
    sub_100024970();
    if (Substring.subscript.getter() == 61 && v27 == 0xE100000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v29 & 1) == 0)
      {
        unint64_t v8 = v78;
        unint64_t v24 = Substring.index(after:)();
        continue;
      }
    }
    unint64_t v8 = v78;
    if (v25 >> 14 != v24 >> 14)
    {
      if (v24 >> 14 < v25 >> 14) {
        goto LABEL_55;
      }
      uint64_t v30 = sub_100017E2C();
      uint64_t v32 = v31;
      uint64_t v34 = v33;
      uint64_t v36 = v35;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_10002A3C4();
        unint64_t v22 = (unint64_t)v40;
      }
      sub_100027000();
      if (v22 >= v38 >> 1)
      {
        sub_100065710();
        uint64_t v37 = v41;
      }
      v37[2] = v22 + 1;
      uint64_t v39 = &v37[4 * v22];
      unint64_t v22 = (unint64_t)v37;
      v39[4] = v30;
      v39[5] = v32;
      void v39[6] = v34;
      v39[7] = v36;
      unint64_t v8 = v78;
    }
    sub_100024970();
    unint64_t v24 = Substring.index(after:)();
    unint64_t v25 = v24;
    unint64_t v26 = v24;
  }
  while (v77 != v24 >> 14);
  if (v77 == v25 >> 14)
  {
    swift_bridgeObjectRelease();
    uint64_t v15 = v68;
    unint64_t v18 = v72;
LABEL_35:
    swift_bridgeObjectRelease();
    goto LABEL_36;
  }
  uint64_t v15 = v68;
  unint64_t v18 = v72;
  if (v77 >= v26 >> 14)
  {
    uint64_t v42 = sub_100017E2C();
    uint64_t v44 = v43;
    uint64_t v46 = v45;
    uint64_t v48 = v47;
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_10002A3C4();
      unint64_t v22 = (unint64_t)v59;
    }
    sub_100027000();
    if (v22 >= v50 >> 1)
    {
      sub_100065710();
      char v49 = v60;
    }
    v49[2] = v22 + 1;
    id v51 = &v49[4 * v22];
    unint64_t v22 = (unint64_t)v49;
    void v51[4] = v42;
    v51[5] = v44;
    v51[6] = v46;
    v51[7] = v48;
    unint64_t v8 = v78;
    goto LABEL_35;
  }
LABEL_55:
  LODWORD(v64) = 0;
  uint64_t v63 = 754;
  v62[0] = 2;
  uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_1000205DC()
{
  sub_100027540();
  if (v0 || (sub_100025238(), !v1))
  {
    if ((sub_10002C24C() & 1) == 0) {
      sub_10002137C();
    }
  }
}

uint64_t type metadata accessor for ParsecURLRequestBuilder()
{
  uint64_t result = qword_1002205E8;
  if (!qword_1002205E8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100020670()
{
  uint64_t v0 = sub_10002572C((uint64_t *)&unk_10021D010);
  uint64_t v1 = sub_100016544(v0);
  __chkstk_darwin(v1);
  sub_10000DFD0();
  uint64_t v4 = v3 - v2;
  uint64_t v5 = type metadata accessor for URLComponents();
  sub_100020C48();
  uint64_t v7 = v6;
  __chkstk_darwin(v8);
  sub_100024A64();
  uint64_t v11 = v9 - v10;
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)v22 - v13;
  URLComponents.init(url:resolvingAgainstBaseURL:)();
  if (sub_100027BA4(v4, 1, v5) == 1)
  {
    sub_100019994(v4, (uint64_t *)&unk_10021D010);
    sub_100092D2C();
    swift_allocError();
    *uint64_t v15 = 1;
    swift_willThrow();
    type metadata accessor for URL();
    sub_10001DCF8();
    sub_10000E040();
    v16();
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 32))(v14, v4, v5);
    uint64_t v17 = URLComponents.percentEncodedQuery.getter();
    if (v18)
    {
      v22[4] = v17;
      v22[5] = v18;
      v22[2] = 43;
      v22[3] = 0xE100000000000000;
      v22[0] = 3158565;
      v22[1] = 0xE300000000000000;
      sub_100021100();
      StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
      uint64_t v23 = v7;
      swift_bridgeObjectRelease();
      uint64_t v7 = v23;
      URLComponents.percentEncodedQuery.setter();
    }
    sub_100016608();
    v19();
    uint64_t v4 = swift_allocObject();
    sub_100023388(v11);
    type metadata accessor for URL();
    sub_10001DCF8();
    sub_10000E040();
    v20();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v14, v5);
  }
  return v4;
}

uint64_t sub_100020950(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = sub_10002572C((uint64_t *)&unk_10021B9C0);
  uint64_t v7 = sub_100016544(v6);
  __chkstk_darwin(v7);
  sub_10001DDC8();
  sub_100028260();
  if (*(void *)(*(void *)v3 + 16))
  {
    swift_bridgeObjectRetain();
    sub_1000287F0(a1, a2);
    if (v8)
    {
      uint64_t v9 = type metadata accessor for URLQueryItem();
      sub_10001DCF8();
      uint64_t v10 = sub_100028948();
      v11(v10);
      uint64_t v12 = v2;
      uint64_t v13 = 0;
    }
    else
    {
      uint64_t v9 = type metadata accessor for URLQueryItem();
      uint64_t v12 = v2;
      uint64_t v13 = 1;
    }
    sub_10002538C(v12, v13, 1, v9);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v9 = type metadata accessor for URLQueryItem();
    sub_1000254FC(v2, 1);
  }
  type metadata accessor for URLQueryItem();
  if (sub_100027BA4(v2, 1, v9))
  {
    sub_100019994(v2, (uint64_t *)&unk_10021B9C0);
    swift_endAccess();
    return 0;
  }
  else
  {
    uint64_t v14 = URLQueryItem.value.getter();
    sub_100019994(v2, (uint64_t *)&unk_10021B9C0);
    swift_endAccess();
  }
  return v14;
}

uint64_t sub_100020AE4(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for CharacterSet();
  sub_100020C48();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  sub_100016550();
  if (!*(void *)(a1 + 16)) {
    return 0;
  }
  uint64_t v7 = CharacterSet.init(charactersIn:)();
  __chkstk_darwin(v7);
  v10[2] = v1;
  v10[4] = sub_100020E10((void (*)(uint64_t *__return_ptr, uint64_t))sub_100020FAC, (uint64_t)v10, a1);
  sub_10002572C(&qword_100219B08);
  sub_100020DBC();
  uint64_t v8 = BidirectionalCollection<>.joined(separator:)();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v1, v3);
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_100020C8C()
{
  return v0;
}

uint64_t sub_100020CAC()
{
  return v0;
}

void sub_100020CB8()
{
  uint64_t v2 = *(void **)(v0 - 312);
}

uint64_t sub_100020CD0()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_100020CE8@<X0>(uint64_t a1@<X8>)
{
  return *(void *)(v1 + a1 + 8);
}

uint64_t sub_100020CF4(uint64_t result)
{
  *(void *)(v1 + 128) = result;
  return result;
}

uint64_t sub_100020D0C()
{
  uint64_t v3 = *(void *)(v1 - 128);
  return sub_1000291B4(v3, v0);
}

uint64_t sub_100020D24()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_100020D48()
{
  return v0;
}

uint64_t sub_100020D60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(a1, a2, a3, v3, v4);
}

uint64_t sub_100020D7C(uint64_t result)
{
  *(void *)(result + 16) = 0x64726F636572;
  *(void *)(result + 24) = 0xE600000000000000;
  return result;
}

uint64_t sub_100020D94@<X0>(uint64_t a1@<X2>, char a2@<W8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  return sub_10016AE48(v32, v33, a1, a32, a31, a17, a22, a21, a2);
}

unint64_t sub_100020DBC()
{
  unint64_t result = qword_100219B10[0];
  if (!qword_100219B10[0])
  {
    sub_1000371D4(&qword_100219B08);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100219B10);
  }
  return result;
}

void *sub_100020E10(void (*a1)(uint64_t *__return_ptr, uint64_t), uint64_t a2, uint64_t a3)
{
  void (*v20)(uint64_t *__return_ptr, uint64_t);

  unint64_t v20 = a1;
  uint64_t v4 = *(void *)(a3 + 16);
  if (!v4) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v6 = *(void *)(type metadata accessor for URLQueryItem() - 8);
  uint64_t v7 = a3 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  uint64_t v17 = *(void *)(v6 + 72);
  swift_bridgeObjectRetain();
  uint64_t v8 = _swiftEmptyArrayStorage;
  while (1)
  {
    v20(&v18, v7);
    if (v3) {
      break;
    }
    uint64_t v9 = v19;
    if (v19)
    {
      uint64_t v10 = v18;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_10002114C(0, v8[2] + 1, 1, (uint64_t)v8);
        uint64_t v8 = v14;
      }
      unint64_t v12 = v8[2];
      unint64_t v11 = v8[3];
      if (v12 >= v11 >> 1)
      {
        sub_10002114C(v11 > 1, v12 + 1, 1, (uint64_t)v8);
        uint64_t v8 = v15;
      }
      v8[2] = v12 + 1;
      uint64_t v13 = &v8[2 * v12];
      v13[4] = v10;
      v13[5] = v9;
    }
    v7 += v17;
    if (!--v4)
    {
      swift_bridgeObjectRelease();
      return v8;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_100020FAC@<X0>(uint64_t *a1@<X8>)
{
  return sub_100020FC8(a1);
}

uint64_t sub_100020FC8@<X0>(uint64_t *a1@<X8>)
{
  URLQueryItem.name.getter();
  sub_100021100();
  uint64_t v2 = StringProtocol.addingPercentEncoding(withAllowedCharacters:)();
  uint64_t v4 = v3;
  uint64_t result = swift_bridgeObjectRelease();
  if (v4)
  {
    uint64_t result = URLQueryItem.value.getter();
    if (v6)
    {
      uint64_t v7 = StringProtocol.addingPercentEncoding(withAllowedCharacters:)();
      uint64_t v9 = v8;
      uint64_t result = swift_bridgeObjectRelease();
      if (v9)
      {
        swift_bridgeObjectRetain();
        v10._countAndFlagsBits = 61;
        v10._object = (void *)0xE100000000000000;
        String.append(_:)(v10);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        v11._countAndFlagsBits = v7;
        v11._object = v9;
        String.append(_:)(v11);
        swift_bridgeObjectRelease();
        uint64_t result = swift_bridgeObjectRelease();
      }
    }
  }
  *a1 = v2;
  a1[1] = v4;
  return result;
}

unint64_t sub_100021100()
{
  unint64_t result = qword_100219738;
  if (!qword_100219738)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100219738);
  }
  return result;
}

void sub_10002114C(char a1, uint64_t a2, char a3, uint64_t a4)
{
  if (a3)
  {
    sub_1000212E4();
    if (v8 != v9)
    {
      sub_10002A3A8();
      if (v8)
      {
        __break(1u);
        return;
      }
      sub_1000268F0();
    }
  }
  sub_10002A3B4();
  if (v5)
  {
    sub_10002572C(&qword_10021ACF8);
    Swift::String v10 = (char *)sub_10001659C();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v4;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 16);
  }
  else
  {
    Swift::String v10 = (char *)&_swiftEmptyArrayStorage;
  }
  if (a1)
  {
    sub_100021610((char *)(a4 + 32), v4, v10 + 32);
    sub_100024944();
  }
  else
  {
    uint64_t v12 = sub_1000242FC();
    sub_10002166C(v12, v13, v14, v15);
  }
}

uint64_t sub_100021220()
{
  return v0;
}

uint64_t sub_100021234()
{
  return swift_weakLoadStrong();
}

void sub_10002125C(uint64_t a1@<X8>)
{
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + ((v1 + 3) & 0x1FFFFFFFCLL)));
}

uint64_t sub_10002127C()
{
  return 0;
}

uint64_t sub_100021298()
{
  return swift_release_n();
}

void *sub_1000212C0()
{
  return sub_10001B620(v0, v0[3]);
}

unint64_t sub_1000212F4(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000;
}

uint64_t sub_100021314()
{
  return v0 - 136;
}

void sub_100021328(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v5, v6, a4, v4, 2u);
}

uint64_t sub_100021348()
{
  return sub_10002538C(v0, 1, 1, v1);
}

uint64_t sub_10002137C()
{
  return sub_10002464C();
}

uint64_t sub_1000213A4(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

uint64_t sub_1000213F4(uint64_t a1)
{
  return a1 - 8;
}

void sub_100021408()
{
  *(void *)(v0 - 312) = 0;
  *(void *)(v0 - 304) = 0;
}

uint64_t sub_10002141C(uint64_t a1)
{
  return sub_100105238(a1, 0, 0, 0, 1, 0, 0);
}

uint64_t sub_10002144C()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

uint64_t sub_100021474(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_10001621C(a1, v6, v7, v5, a5);
}

void sub_100021490(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  sub_100121B34(v23, v24, 2);
  sub_100121B34(a22, a23, 2);
}

void sub_1000214EC()
{
  *(unsigned char *)(v0 + *v2) = v1;
}

uint64_t sub_100021508()
{
  return dispatch thunk of BinaryInteger.bitWidth.getter(v0, v1);
}

uint64_t sub_100021520()
{
  sub_10015A10C();
  return v0;
}

void *sub_10002154C(uint64_t a1, uint64_t a2, uint64_t a3, void *(*a4)(uint64_t *__return_ptr, void *, char *))
{
  return sub_10016E44C(v5, v6, v4, a4);
}

uint64_t sub_100021570(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_100093A68(v9, v10, v11, v15, v16, v13, v12, v14, a9);
}

uint64_t sub_1000215A8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  char v4 = *(unsigned char *)(a2 + 24);
  uint64_t v5 = *(void *)a2;
  unint64_t v6 = *(void *)(a2 + 8);
  return sub_10016AF60(v5, v6, v3, v4);
}

uint64_t sub_1000215EC(float a1)
{
  float *v1 = a1;
  return swift_bridgeObjectRetain();
}

char *sub_100021610(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_100020C64();
    unint64_t result = (char *)sub_100025BFC();
    __break(1u);
  }
  else if (a3 != result || &result[16 * a2] <= a3)
  {
    return (char *)sub_100025BE0(a3, result);
  }
  return result;
}

uint64_t sub_10002166C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100021764@<X0>(uint64_t a1@<X8>)
{
  v47[6] = a1;
  type metadata accessor for Logger();
  sub_100020C48();
  v47[2] = v6;
  v47[3] = v5;
  __chkstk_darwin(v5);
  sub_10000DFD0();
  v47[1] = v8 - v7;
  uint64_t v9 = sub_10002572C(&qword_10021BB20);
  uint64_t v10 = sub_100016544(v9);
  __chkstk_darwin(v10);
  sub_100027014();
  uint64_t v11 = type metadata accessor for URL();
  sub_100020C48();
  uint64_t v50 = v12;
  __chkstk_darwin(v13);
  sub_100024A64();
  v47[4] = v14 - v15;
  __chkstk_darwin(v16);
  uint64_t v48 = (char *)v47 - v17;
  uint64_t v18 = type metadata accessor for URLComponents();
  sub_100020C48();
  uint64_t v20 = v19;
  __chkstk_darwin(v21);
  sub_100016550();
  unint64_t v22 = (uint64_t *)(v1 + OBJC_IVAR____TtC7parsecd23ParsecURLRequestBuilder_queryItems);
  swift_beginAccess();
  uint64_t v23 = *v22;
  swift_bridgeObjectRetain_n();
  uint64_t v24 = sub_100021E2C(v23);
  swift_bridgeObjectRelease();
  v49[0] = (uint64_t)v24;
  sub_1000222C8(v49);
  if (!v2)
  {
    swift_bridgeObjectRelease();
    uint64_t v25 = v49[0];
    v47[5] = v1;
    sub_100016608();
    v26();
    sub_100020AE4(v25);
    swift_release();
    URLComponents.percentEncodedQuery.setter();
    URLComponents.url.getter();
    uint64_t v27 = sub_10002635C();
    if (sub_100027BA4(v27, v28, v11) == 1)
    {
      sub_100019994(v4, &qword_10021BB20);
      sub_100092D2C();
      swift_allocError();
      *char v29 = 1;
      swift_willThrow();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 8))(v3, v18);
    }
    (*(void (**)(char *, uint64_t, uint64_t))(v50 + 32))(v48, v4, v11);
    uint64_t v30 = URL.scheme.getter();
    if (v31)
    {
      uint64_t v32 = v30;
      uint64_t v33 = v31;
      BOOL v34 = v30 == 1886680168 && v31 == 0xE400000000000000;
      if (v34
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
        || (v32 == 0x7370747468 ? (BOOL v35 = v33 == 0xE500000000000000) : (BOOL v35 = 0), v35))
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        char v36 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v36 & 1) == 0) {
          goto LABEL_15;
        }
      }
      uint64_t v43 = v50;
      uint64_t v44 = v48;
      sub_100016608();
      v45();
      URLRequest.init(url:cachePolicy:timeoutInterval:)();
      swift_beginAccess();
      swift_bridgeObjectRetain();
      URLRequest.allHTTPHeaderFields.setter();
      (*(void (**)(char *, uint64_t))(v43 + 8))(v44, v11);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 8))(v3, v18);
    }
LABEL_15:
    Logger.init()();
    uint64_t v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v39 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v39 = 0;
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "Scheme for url is neither http nor https.", v39, 2u);
      swift_slowDealloc();
    }

    sub_10000E040();
    v40();
    sub_100092D2C();
    swift_allocError();
    *uint64_t v41 = 0;
    swift_willThrow();
    sub_10000E040();
    v42();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 8))(v3, v18);
  }
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_100021C60()
{
  return swift_arrayDestroy();
}

uint64_t sub_100021C80()
{
  return type metadata accessor for DispatchQoS();
}

uint64_t sub_100021CA4()
{
  return v0;
}

uint64_t sub_100021CB4()
{
  return 0;
}

uint64_t sub_100021CC8()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t sub_100021CFC()
{
  return swift_retain();
}

uint64_t sub_100021D24()
{
  return Logger.logObject.getter();
}

uint64_t sub_100021D68()
{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

uint64_t sub_100021D94()
{
  return *(void *)(v0 - 224);
}

uint64_t sub_100021DB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,unint64_t a34,char a35,uint64_t a36)
{
  return sub_100093A68(a33, a34, v39, a35, v36, v38, a36, v37, a9);
}

uint64_t sub_100021DE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_100093A68(a1, v13, v9, v10, v14, v15, v12, v11, a9);
}

uint64_t sub_100021E0C()
{
  return v0;
}

void *sub_100021E2C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_10002572C(&qword_10021AC70);
  uint64_t v3 = *(void *)(type metadata accessor for URLQueryItem() - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (void *)swift_allocObject();
  uint64_t result = (void *)j__malloc_size(v6);
  if (v4)
  {
    if ((void *)((char *)result - v5) != (void *)0x8000000000000000 || v4 != -1)
    {
      v6[2] = v1;
      v6[3] = 2 * ((uint64_t)((uint64_t)result - v5) / v4);
      uint64_t v9 = sub_100021F80(&v10, (uint64_t)v6 + v5, v1, a1);
      swift_bridgeObjectRetain();
      sub_100023380();
      if (v9 == v1) {
        return v6;
      }
      __break(1u);
      return _swiftEmptyArrayStorage;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100021F80(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for URLQueryItem();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v42 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v10);
  uint64_t v41 = (char *)&v32 - v13;
  uint64_t v43 = a4;
  uint64_t v16 = *(void *)(a4 + 64);
  uint64_t v15 = a4 + 64;
  uint64_t v14 = v16;
  uint64_t v37 = v15;
  uint64_t v17 = -1 << *(unsigned char *)(v15 - 32);
  if (-v17 < 64) {
    uint64_t v18 = ~(-1 << -(char)v17);
  }
  else {
    uint64_t v18 = -1;
  }
  unint64_t v19 = v18 & v14;
  if (!a2)
  {
    int64_t v20 = 0;
    a3 = 0;
LABEL_38:
    uint64_t v31 = v37;
    *a1 = v43;
    a1[1] = v31;
    a1[2] = ~v17;
    a1[3] = v20;
    a1[4] = v19;
    return a3;
  }
  if (!a3)
  {
    int64_t v20 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v34 = -1 << *(unsigned char *)(v15 - 32);
  BOOL v35 = a1;
  int64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v38 = v9 + 32;
  uint64_t v39 = v9 + 16;
  int64_t v36 = (unint64_t)(63 - v17) >> 6;
  int64_t v33 = v36 - 1;
  uint64_t v40 = a3;
  unint64_t v22 = v41;
  if (!v19) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v23 = __clz(__rbit64(v19));
  v19 &= v19 - 1;
  unint64_t v24 = v23 | (v20 << 6);
  while (1)
  {
    ++v21;
    uint64_t v28 = v42;
    uint64_t v29 = *(void *)(v9 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v42, *(void *)(v43 + 56) + v29 * v24, v8);
    uint64_t v30 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
    v30(v22, v28, v8);
    uint64_t result = ((uint64_t (*)(uint64_t, char *, uint64_t))v30)(a2, v22, v8);
    a3 = v40;
    if (v21 == v40) {
      goto LABEL_37;
    }
    a2 += v29;
    if (v19) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v25 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v25 >= v36) {
      goto LABEL_32;
    }
    unint64_t v26 = *(void *)(v37 + 8 * v25);
    if (!v26) {
      break;
    }
LABEL_18:
    unint64_t v19 = (v26 - 1) & v26;
    unint64_t v24 = __clz(__rbit64(v26)) + (v25 << 6);
    int64_t v20 = v25;
  }
  v20 += 2;
  if (v25 + 1 >= v36)
  {
    unint64_t v19 = 0;
    int64_t v20 = v25;
    goto LABEL_36;
  }
  unint64_t v26 = *(void *)(v37 + 8 * v20);
  if (v26) {
    goto LABEL_14;
  }
  int64_t v27 = v25 + 2;
  if (v25 + 2 >= v36) {
    goto LABEL_32;
  }
  unint64_t v26 = *(void *)(v37 + 8 * v27);
  if (v26) {
    goto LABEL_17;
  }
  int64_t v20 = v25 + 3;
  if (v25 + 3 >= v36)
  {
    unint64_t v19 = 0;
    int64_t v20 = v25 + 2;
    goto LABEL_36;
  }
  unint64_t v26 = *(void *)(v37 + 8 * v20);
  if (v26)
  {
LABEL_14:
    int64_t v25 = v20;
    goto LABEL_18;
  }
  int64_t v27 = v25 + 4;
  if (v25 + 4 >= v36)
  {
LABEL_32:
    unint64_t v19 = 0;
LABEL_36:
    a3 = v21;
LABEL_37:
    uint64_t v17 = v34;
    a1 = v35;
    goto LABEL_38;
  }
  unint64_t v26 = *(void *)(v37 + 8 * v27);
  if (v26)
  {
LABEL_17:
    int64_t v25 = v27;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v25 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v25 >= v36)
    {
      unint64_t v19 = 0;
      int64_t v20 = v33;
      goto LABEL_36;
    }
    unint64_t v26 = *(void *)(v37 + 8 * v25);
    ++v27;
    if (v26) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

void sub_1000222C8(uint64_t *a1)
{
  uint64_t v2 = *(void *)(type metadata accessor for URLQueryItem() - 8);
  uint64_t v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_10011BDB8(v3);
    uint64_t v3 = v4;
  }
  uint64_t v5 = *(void *)(v3 + 16);
  v6[0] = v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v5;
  sub_100022370(v6);
  *a1 = v3;
}

void sub_100022370(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for URLQueryItem();
  uint64_t v157 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  v152 = (char *)&v143 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v5);
  v166 = (char *)&v143 - v8;
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v143 - v10;
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (char *)&v143 - v13;
  uint64_t v15 = __chkstk_darwin(v12);
  v155 = (char *)&v143 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  v154 = (char *)&v143 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  v150 = (char *)&v143 - v20;
  __chkstk_darwin(v19);
  v149 = (char *)&v143 - v21;
  v170 = a1;
  Swift::Int v22 = a1[1];
  Swift::Int v23 = _minimumMergeRunLength(_:)(v22);
  if (v23 >= v22)
  {
    if (v22 < 0) {
      goto LABEL_155;
    }
    if (v22) {
      sub_100023008(0, v22, 1, v170);
    }
    return;
  }
  Swift::Int v24 = v23;
  uint64_t v145 = sub_1000EE2DC(v22 / 2);
  unint64_t v156 = v25;
  uint64_t v146 = v22;
  if (v22 <= 0) {
    goto LABEL_119;
  }
  Swift::Int v144 = v24;
  uint64_t v162 = v157 + 16;
  v163 = (void (**)(char *, uint64_t))(v157 + 8);
  uint64_t v164 = v4;
  v168 = (void (**)(char *, uint64_t, uint64_t))(v157 + 32);
  unint64_t v26 = (char *)_swiftEmptyArrayStorage;
  uint64_t v27 = 0;
  v159 = v11;
  uint64_t v28 = v22;
  v148 = v14;
  while (1)
  {
    uint64_t v29 = v27;
    if (v27 + 1 >= v28)
    {
      uint64_t v39 = v27 + 1;
      uint64_t v40 = v164;
      uint64_t v41 = v148;
    }
    else
    {
      uint64_t v167 = v28;
      uint64_t v30 = *v170;
      uint64_t v31 = *(void *)(v157 + 72);
      uint64_t v165 = v27 + 1;
      uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t))(v157 + 16);
      uint64_t v33 = v164;
      v32(v149, v30 + v31 * (v27 + 1), v164);
      uint64_t v153 = v29;
      v158 = (char *)v30;
      uint64_t v169 = v31;
      v32(v150, v30 + v31 * v29, v33);
      uint64_t v34 = URLQueryItem.name.getter();
      uint64_t v36 = v35;
      if (v34 == URLQueryItem.name.getter() && v36 == v37) {
        LODWORD(v161) = 0;
      }
      else {
        LODWORD(v161) = _stringCompareWithSmolCheck(_:_:expecting:)();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v40 = v164;
      uint64_t v42 = *v163;
      (*v163)(v150, v164);
      v42(v149, v40);
      uint64_t v39 = v153 + 2;
      uint64_t v28 = v167;
      if (v153 + 2 < v167)
      {
        v147 = v26;
        v165 *= v169;
        uint64_t v43 = v158;
        uint64_t v160 = v169 * v39;
        while (1)
        {
          v32(v154, (uint64_t)&v43[v160], v40);
          v32(v155, (uint64_t)&v43[v165], v40);
          uint64_t v44 = URLQueryItem.name.getter();
          uint64_t v46 = v45;
          BOOL v48 = v44 == URLQueryItem.name.getter() && v46 == v47;
          int v49 = v48 ? 0 : _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v40 = v164;
          v42(v155, v164);
          v42(v154, v40);
          if ((v161 ^ v49)) {
            break;
          }
          ++v39;
          v43 += v169;
          uint64_t v28 = v167;
          if (v39 >= v167)
          {
            uint64_t v39 = v167;
            unint64_t v26 = v147;
            goto LABEL_24;
          }
        }
        unint64_t v26 = v147;
        uint64_t v28 = v167;
      }
LABEL_24:
      uint64_t v41 = v148;
      uint64_t v29 = v153;
      if (v161)
      {
        if (v39 < v153) {
          goto LABEL_156;
        }
        if (v153 < v39)
        {
          v147 = v26;
          uint64_t v50 = 0;
          uint64_t v51 = v169 * (v39 - 1);
          uint64_t v52 = v39 * v169;
          uint64_t v53 = v153;
          uint64_t v54 = v153 * v169;
          uint64_t v165 = v39;
          do
          {
            if (v53 != v39 + v50 - 1)
            {
              os_log_type_t v55 = v158;
              if (!v158) {
                goto LABEL_162;
              }
              uint64_t v56 = &v158[v54];
              uint64_t v160 = (uint64_t)&v158[v51];
              uint64_t v40 = v164;
              v161 = (void (*)(char *, char *, uint64_t))*v168;
              v161(v152, &v158[v54], v164);
              if (v54 < v51 || v56 >= &v55[v52])
              {
                uint64_t v58 = v160;
                swift_arrayInitWithTakeFrontToBack();
              }
              else
              {
                uint64_t v58 = v160;
                if (v54 != v51) {
                  swift_arrayInitWithTakeBackToFront();
                }
              }
              v161((char *)v58, v152, v40);
              uint64_t v39 = v165;
            }
            ++v53;
            --v50;
            v51 -= v169;
            v52 -= v169;
            v54 += v169;
          }
          while (v53 < v39 + v50);
          unint64_t v26 = v147;
          uint64_t v41 = v148;
          uint64_t v29 = v153;
          uint64_t v28 = v167;
        }
      }
    }
    if (v39 < v28)
    {
      if (__OFSUB__(v39, v29)) {
        goto LABEL_154;
      }
      if (v39 - v29 < v144)
      {
        if (__OFADD__(v29, v144)) {
          goto LABEL_157;
        }
        if (v29 + v144 >= v28) {
          uint64_t v59 = v28;
        }
        else {
          uint64_t v59 = v29 + v144;
        }
        if (v59 < v29)
        {
LABEL_158:
          __break(1u);
          goto LABEL_159;
        }
        if (v39 != v59)
        {
          uint64_t v153 = v29;
          v147 = v26;
          uint64_t v143 = v2;
          uint64_t v60 = *(void *)(v157 + 72);
          v158 = *(char **)(v157 + 16);
          uint64_t v61 = v60 * (v39 - 1);
          uint64_t v160 = v60;
          uint64_t v169 = v39 * v60;
          uint64_t v151 = v59;
          do
          {
            uint64_t v62 = 0;
            uint64_t v63 = v153;
            uint64_t v165 = v39;
            v161 = (void (*)(char *, char *, uint64_t))v61;
            while (1)
            {
              uint64_t v167 = v63;
              uint64_t v64 = *v170;
              uint64_t v65 = (void (*)(char *, uint64_t, uint64_t))v158;
              ((void (*)(char *, uint64_t, uint64_t))v158)(v41, v169 + v62 + *v170, v40);
              uint64_t v66 = v61 + v62 + v64;
              uint64_t v67 = v41;
              uint64_t v68 = v159;
              v65(v159, v66, v40);
              uint64_t v69 = URLQueryItem.name.getter();
              uint64_t v71 = v70;
              if (v69 == URLQueryItem.name.getter() && v71 == v72) {
                break;
              }
              char v74 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              id v75 = *v163;
              (*v163)(v68, v40);
              v75(v67, v40);
              uint64_t v41 = v67;
              if ((v74 & 1) == 0) {
                goto LABEL_61;
              }
              uint64_t v76 = *v170;
              uint64_t v61 = (uint64_t)v161;
              if (!*v170) {
                goto LABEL_160;
              }
              unint64_t v77 = (char *)v161 + v76 + v62;
              unint64_t v78 = *v168;
              uint64_t v79 = v164;
              (*v168)(v166, v76 + v169 + v62, v164);
              swift_arrayInitWithTakeFrontToBack();
              v78(v77, (uint64_t)v166, v79);
              v62 -= v160;
              uint64_t v63 = v167 + 1;
              uint64_t v80 = v165;
              uint64_t v40 = v79;
              if (v165 == v167 + 1) {
                goto LABEL_62;
              }
            }
            swift_bridgeObjectRelease_n();
            uint64_t v81 = *v163;
            (*v163)(v68, v40);
            v81(v67, v40);
            uint64_t v41 = v67;
LABEL_61:
            uint64_t v80 = v165;
            uint64_t v61 = (uint64_t)v161;
LABEL_62:
            uint64_t v39 = v80 + 1;
            v61 += v160;
            v169 += v160;
          }
          while (v39 != v151);
          uint64_t v39 = v151;
          uint64_t v2 = v143;
          unint64_t v26 = v147;
          uint64_t v29 = v153;
        }
      }
    }
    if (v39 < v29) {
      goto LABEL_153;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_10011B190(0, *((void *)v26 + 2) + 1, 1, v26);
      unint64_t v26 = v134;
    }
    unint64_t v83 = *((void *)v26 + 2);
    unint64_t v82 = *((void *)v26 + 3);
    unint64_t v84 = v83 + 1;
    uint64_t v165 = v39;
    if (v83 >= v82 >> 1)
    {
      sub_10011B190(v82 > 1, v83 + 1, 1, v26);
      unint64_t v26 = v135;
    }
    *((void *)v26 + 2) = v84;
    id v85 = v26 + 32;
    id v86 = &v26[16 * v83 + 32];
    uint64_t v87 = v165;
    *(void *)id v86 = v29;
    *((void *)v86 + 1) = v87;
    if (v83) {
      break;
    }
    unint64_t v84 = 1;
LABEL_112:
    uint64_t v28 = v170[1];
    uint64_t v27 = v165;
    if (v165 >= v28) {
      goto LABEL_120;
    }
  }
  while (1)
  {
    unint64_t v88 = v84 - 1;
    if (v84 >= 4)
    {
      uint64_t v93 = &v85[2 * v84];
      uint64_t v94 = *(v93 - 8);
      uint64_t v95 = *(v93 - 7);
      BOOL v99 = __OFSUB__(v95, v94);
      uint64_t v96 = v95 - v94;
      if (v99) {
        goto LABEL_138;
      }
      uint64_t v98 = *(v93 - 6);
      uint64_t v97 = *(v93 - 5);
      BOOL v99 = __OFSUB__(v97, v98);
      uint64_t v91 = v97 - v98;
      char v92 = v99;
      if (v99) {
        goto LABEL_139;
      }
      unint64_t v100 = v84 - 2;
      uint64_t v101 = &v85[2 * v84 - 4];
      uint64_t v103 = *v101;
      uint64_t v102 = v101[1];
      BOOL v99 = __OFSUB__(v102, v103);
      uint64_t v104 = v102 - v103;
      if (v99) {
        goto LABEL_140;
      }
      BOOL v99 = __OFADD__(v91, v104);
      uint64_t v105 = v91 + v104;
      if (v99) {
        goto LABEL_142;
      }
      if (v105 >= v96)
      {
        uint64_t v123 = &v85[2 * v88];
        uint64_t v125 = *v123;
        uint64_t v124 = v123[1];
        BOOL v99 = __OFSUB__(v124, v125);
        uint64_t v126 = v124 - v125;
        if (v99) {
          goto LABEL_148;
        }
        BOOL v116 = v91 < v126;
        goto LABEL_101;
      }
    }
    else
    {
      if (v84 != 3)
      {
        uint64_t v117 = *((void *)v26 + 4);
        uint64_t v118 = *((void *)v26 + 5);
        BOOL v99 = __OFSUB__(v118, v117);
        uint64_t v110 = v118 - v117;
        char v111 = v99;
        goto LABEL_95;
      }
      uint64_t v90 = *((void *)v26 + 4);
      uint64_t v89 = *((void *)v26 + 5);
      BOOL v99 = __OFSUB__(v89, v90);
      uint64_t v91 = v89 - v90;
      char v92 = v99;
    }
    if (v92) {
      goto LABEL_141;
    }
    unint64_t v100 = v84 - 2;
    v106 = &v85[2 * v84 - 4];
    uint64_t v108 = *v106;
    uint64_t v107 = v106[1];
    BOOL v109 = __OFSUB__(v107, v108);
    uint64_t v110 = v107 - v108;
    char v111 = v109;
    if (v109) {
      goto LABEL_143;
    }
    v112 = &v85[2 * v88];
    uint64_t v114 = *v112;
    uint64_t v113 = v112[1];
    BOOL v99 = __OFSUB__(v113, v114);
    uint64_t v115 = v113 - v114;
    if (v99) {
      goto LABEL_145;
    }
    if (__OFADD__(v110, v115)) {
      goto LABEL_147;
    }
    if (v110 + v115 >= v91)
    {
      BOOL v116 = v91 < v115;
LABEL_101:
      if (v116) {
        unint64_t v88 = v100;
      }
      goto LABEL_103;
    }
LABEL_95:
    if (v111) {
      goto LABEL_144;
    }
    id v119 = &v85[2 * v88];
    uint64_t v121 = *v119;
    uint64_t v120 = v119[1];
    BOOL v99 = __OFSUB__(v120, v121);
    uint64_t v122 = v120 - v121;
    if (v99) {
      goto LABEL_146;
    }
    if (v122 < v110) {
      goto LABEL_112;
    }
LABEL_103:
    unint64_t v127 = v88 - 1;
    if (v88 - 1 >= v84)
    {
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
LABEL_148:
      __break(1u);
      goto LABEL_149;
    }
    if (!*v170) {
      goto LABEL_161;
    }
    id v128 = v26;
    v129 = &v85[2 * v127];
    uint64_t v130 = *v129;
    uint64_t v131 = &v85[2 * v88];
    uint64_t v132 = v131[1];
    sub_10011AB5C(*v170 + *(void *)(v157 + 72) * *v129, *v170 + *(void *)(v157 + 72) * *v131, *v170 + *(void *)(v157 + 72) * v132, v156);
    if (v2) {
      break;
    }
    if (v132 < v130) {
      goto LABEL_135;
    }
    if (v88 > *((void *)v128 + 2)) {
      goto LABEL_136;
    }
    uint64_t *v129 = v130;
    v85[2 * v127 + 1] = v132;
    unint64_t v133 = *((void *)v128 + 2);
    if (v88 >= v133) {
      goto LABEL_137;
    }
    unint64_t v26 = v128;
    unint64_t v84 = v133 - 1;
    memmove(&v85[2 * v88], v131 + 2, 16 * (v133 - 1 - v88));
    *((void *)v128 + 2) = v133 - 1;
    if (v133 <= 2) {
      goto LABEL_112;
    }
  }
LABEL_117:
  swift_bridgeObjectRelease();
  if (v146 >= -1) {
    goto LABEL_132;
  }
  __break(1u);
LABEL_119:
  unint64_t v26 = (char *)_swiftEmptyArrayStorage;
  unint64_t v84 = _swiftEmptyArrayStorage[2];
LABEL_120:
  if (v84 >= 2)
  {
    uint64_t v136 = *v170;
    while (1)
    {
      unint64_t v137 = v84 - 2;
      if (v84 < 2) {
        break;
      }
      if (!v136) {
        goto LABEL_163;
      }
      uint64_t v138 = *(void *)&v26[16 * v137 + 32];
      uint64_t v139 = *(void *)&v26[16 * v84 + 24];
      sub_10011AB5C(v136 + *(void *)(v157 + 72) * v138, v136 + *(void *)(v157 + 72) * *(void *)&v26[16 * v84 + 16], v136 + *(void *)(v157 + 72) * v139, v156);
      if (v2) {
        goto LABEL_117;
      }
      if (v139 < v138) {
        goto LABEL_150;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_10011B25C((uint64_t)v26);
        unint64_t v26 = v142;
      }
      if (v137 >= *((void *)v26 + 2)) {
        goto LABEL_151;
      }
      v140 = &v26[16 * v137 + 32];
      *(void *)v140 = v138;
      *((void *)v140 + 1) = v139;
      unint64_t v141 = *((void *)v26 + 2);
      if (v84 > v141) {
        goto LABEL_152;
      }
      memmove(&v26[16 * v84 + 16], &v26[16 * v84 + 32], 16 * (v141 - v84));
      *((void *)v26 + 2) = v141 - 1;
      unint64_t v84 = v141 - 1;
      if (v141 <= 2) {
        goto LABEL_131;
      }
    }
LABEL_149:
    __break(1u);
LABEL_150:
    __break(1u);
LABEL_151:
    __break(1u);
LABEL_152:
    __break(1u);
LABEL_153:
    __break(1u);
LABEL_154:
    __break(1u);
LABEL_155:
    __break(1u);
LABEL_156:
    __break(1u);
LABEL_157:
    __break(1u);
    goto LABEL_158;
  }
LABEL_131:
  swift_bridgeObjectRelease();
  if (v146 >= -1)
  {
LABEL_132:
    *(void *)(v145 + 16) = 0;
    swift_bridgeObjectRelease();
    return;
  }
LABEL_159:
  __break(1u);
LABEL_160:
  __break(1u);
LABEL_161:
  __break(1u);
LABEL_162:
  __break(1u);
LABEL_163:
  __break(1u);
}

uint64_t sub_100023008(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v46 = a4;
  uint64_t v36 = a1;
  uint64_t v41 = type metadata accessor for URLQueryItem();
  uint64_t v6 = __chkstk_darwin(v41);
  uint64_t v44 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v34 - v9;
  uint64_t result = __chkstk_darwin(v8);
  uint64_t v14 = (char *)&v34 - v13;
  uint64_t v42 = a3;
  uint64_t v35 = a2;
  if (a3 != a2)
  {
    uint64_t v37 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
    uint64_t v38 = v12 + 16;
    uint64_t v15 = *(void *)(v12 + 72);
    uint64_t v39 = (void (**)(char *, uint64_t))(v12 + 8);
    uint64_t v40 = v15;
    uint64_t v43 = (void (**)(char *, uint64_t, uint64_t))(v12 + 32);
    uint64_t v48 = v15 * (v42 - 1);
    uint64_t v47 = v15 * v42;
    while (2)
    {
      uint64_t v16 = 0;
      uint64_t v17 = v36;
      uint64_t v18 = v41;
      while (1)
      {
        uint64_t v19 = *v46;
        uint64_t v45 = v47 + v16;
        uint64_t v20 = v37;
        v37(v14, v47 + v16 + v19, v18);
        v20(v10, v48 + v16 + v19, v18);
        uint64_t v21 = URLQueryItem.name.getter();
        Swift::Int v22 = v14;
        Swift::Int v23 = v10;
        uint64_t v25 = v24;
        if (v21 == URLQueryItem.name.getter() && v25 == v26) {
          break;
        }
        char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v29 = *v39;
        (*v39)(v23, v18);
        uint64_t result = ((uint64_t (*)(char *, uint64_t))v29)(v22, v18);
        uint64_t v10 = v23;
        uint64_t v14 = v22;
        if (v28)
        {
          uint64_t v30 = *v46;
          if (!*v46)
          {
            __break(1u);
            return result;
          }
          uint64_t v31 = v30 + v48 + v16;
          uint64_t v32 = *v43;
          uint64_t v18 = v41;
          (*v43)(v44, v30 + v47 + v16, v41);
          swift_arrayInitWithTakeFrontToBack();
          uint64_t result = ((uint64_t (*)(uint64_t, char *, uint64_t))v32)(v31, v44, v18);
          v16 -= v40;
          ++v17;
          uint64_t v14 = v22;
          if (v42 != v17) {
            continue;
          }
        }
        goto LABEL_13;
      }
      swift_bridgeObjectRelease_n();
      uint64_t v33 = *v39;
      (*v39)(v23, v18);
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v33)(v22, v18);
      uint64_t v10 = v23;
      uint64_t v14 = v22;
LABEL_13:
      v48 += v40;
      v47 += v40;
      if (++v42 != v35) {
        continue;
      }
      break;
    }
  }
  return result;
}

uint64_t sub_100023380()
{
  return swift_release();
}

uint64_t sub_100023388(uint64_t a1)
{
  uint64_t v3 = OBJC_IVAR____TtC7parsecd23ParsecURLRequestBuilder_queryItems;
  type metadata accessor for URLQueryItem();
  *(void *)(v1 + v3) = Dictionary.init(dictionaryLiteral:)();
  uint64_t v4 = OBJC_IVAR____TtC7parsecd23ParsecURLRequestBuilder_httpHeader;
  *(void *)(v1 + v4) = Dictionary.init(dictionaryLiteral:)();
  uint64_t v5 = type metadata accessor for URLComponents();
  uint64_t v6 = *(void *)(v5 - 8);
  sub_100016608();
  v7();
  uint64_t v8 = URLComponents.queryItems.getter();
  sub_1000234B4(v8);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
  return v1;
}

uint64_t sub_1000234B4(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = *(void *)(result + 16);
    if (v2)
    {
      uint64_t v3 = type metadata accessor for URLQueryItem();
      sub_100024920(v3);
      uint64_t v5 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
      uint64_t v7 = *(void *)(v6 + 72);
      swift_bridgeObjectRetain();
      do
      {
        sub_100119014(v5);
        v5 += v7;
        --v2;
      }
      while (v2);
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t sub_100023568()
{
  uint64_t v1 = type metadata accessor for PegasusContext(0);
  uint64_t v2 = sub_100016544(v1);
  __chkstk_darwin(v2);
  sub_1000281C8();
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v12 - v5;
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v12 - v7;
  if (swift_unknownObjectWeakLoadStrong())
  {
    sub_100023FDC((uint64_t)v6);
    swift_unknownObjectRelease();
    sub_10002372C((uint64_t)v6, (uint64_t)v8);
    type metadata accessor for BagContext();
    sub_1000236C8((uint64_t)v8, (uint64_t)v0);
    uint64_t v9 = sub_10002A954(v0);
    if (v9)
    {
      uint64_t v10 = (uint64_t)v9;
      swift_retain();
      sub_10002A230();
      swift_release();
      sub_100028F88((uint64_t)v8);
      return v10;
    }
    sub_100028F88((uint64_t)v8);
  }
  uint64_t v10 = sub_10002A1E0();
  if (!v10)
  {
    type metadata accessor for BagContext();
    uint64_t v10 = (uint64_t)sub_10004118C();
    if (v10)
    {
      swift_retain();
      sub_10002A230();
      swift_release();
    }
  }
  return v10;
}

uint64_t sub_1000236C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PegasusContext(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002372C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PegasusContext(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_100023790()
{
  sub_10000DFE0();
  uint64_t v56 = v1;
  uint64_t v58 = v3;
  uint64_t v59 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v8 = v0;
  unsigned int v61 = v9;
  uint64_t v10 = sub_10002572C((uint64_t *)&unk_100219728);
  uint64_t v11 = sub_100016544(v10);
  __chkstk_darwin(v11);
  sub_100017D2C();
  uint64_t v57 = v12;
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v56 - v14;
  uint64_t v60 = type metadata accessor for Date();
  sub_100020C48();
  uint64_t v17 = v16;
  __chkstk_darwin(v18);
  sub_10000DFD0();
  uint64_t v21 = v20 - v19;
  swift_weakInit();
  sub_10002425C();
  *(void *)(v0 + 64) = _swiftEmptyArrayStorage;
  *(void *)(v0 + 72) = 0;
  *(unsigned char *)(v0 + 81) = 0;
  uint64_t v22 = sub_100023FA0(0, (unint64_t *)&qword_1002192B0);
  uint64_t v23 = *v5;
  uint64_t v62 = *v7;
  uint64_t v63 = v23;
  sub_100017CEC();
  sub_10002C0F4();
  swift_bridgeObjectRetain();
  uint64_t v24 = v22;
  uint64_t v25 = v59;
  *(void *)(v8 + 88) = OS_os_log.init(subsystem:category:)();
  sub_100023E18();
  uint64_t v26 = sub_10002920C();
  sub_10002538C(v24, 1, 1, v26);
  sub_100023E18();
  uint64_t v28 = *(void *)(v27 + 152);
  type metadata accessor for Locker();
  sub_100023CE4();
  uint64_t v29 = (_DWORD *)sub_1000283B8();
  *(void *)(v24 + 16) = v29;
  *uint64_t v29 = 0;
  *(void *)(v8 + v28) = v24;
  Date.init()();
  sub_100023E18();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 32))(v8 + *(void *)(v30 + 144), v21, v60);
  swift_weakAssign();
  sub_100026018();
  sub_1000292EC();
  sub_100029F24();
  sub_100029390();
  uint64_t v60 = v26;
  sub_10002538C(v31, v32, v33, v26);
  sub_100023E18();
  uint64_t v35 = v8 + *(void *)(v34 + 136);
  sub_1000257C8();
  sub_10002B84C((uint64_t)v15, v35, (uint64_t *)&unk_100219728);
  swift_endAccess();
  sub_100029464();
  uint64_t v36 = String.init<A>(describing:)();
  uint64_t v38 = v37;
  uint64_t v39 = *(os_unfair_lock_s **)(*(void *)(v25 + 32) + 16);
  os_unfair_lock_lock(v39);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v24 = Strong;
    uint64_t v58 = v35;
    sub_100016518();
    uint64_t v41 = *(void *)(v25 + 40);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v42 = sub_100039F30(v36, v38, v41);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    if (v42)
    {
      swift_getObjectType();
      sub_10003CBA0();
      uint64_t v43 = sub_10001D754();
      v44(v43);
    }
    swift_unknownObjectRelease();
    uint64_t v35 = v58;
  }
  type metadata accessor for ActivityMonitor.WeakReference();
  uint64_t v45 = sub_100023CFC();
  sub_10002AC28(v45);
  sub_100029538();
  sub_10002CCE0();
  swift_bridgeObjectRetain();
  sub_1000295FC(v24, v36, v38, (uint64_t)&unk_100219740, v46, v47, v48, v49, (uint64_t)v56, v57);
  swift_endAccess();
  swift_bridgeObjectRelease();
  os_unfair_lock_unlock(v39);
  swift_bridgeObjectRelease();
  if (swift_unknownObjectWeakLoadStrong())
  {
    swift_getObjectType();
    sub_100016534();
    uint64_t v50 = sub_100021220();
    v51(v50);
    swift_release();
    swift_unknownObjectRelease();
  }
  else
  {
    swift_release();
  }
  uint64_t v52 = v57;
  uint64_t v53 = v60;
  sub_10002B8A0(v35, v57, (uint64_t *)&unk_100219728);
  if (sub_100027BA4(v52, 1, v53) == 1)
  {
    __break(1u);
  }
  else
  {
    id v54 = *(id *)(v8 + 88);
    static os_signpost_type_t.begin.getter();
    v56(v61);
    os_signpost(_:dso:log:name:signpostID:)();

    sub_10000E004();
    sub_10000E040();
    v55();
    swift_release();
    sub_100028318();
    sub_10000DFB8();
  }
}

BOOL sub_100023C5C@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

void sub_100023C7C(Swift::String a1)
{
  String.append(_:)(a1);
}

uint64_t sub_100023CA8(uint64_t a1, uint64_t a2)
{
  return sub_10002538C(a1, a2, 1, v2);
}

uint64_t sub_100023CC0(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  return result;
}

uint64_t sub_100023CCC()
{
  return v0;
}

uint64_t sub_100023CE4()
{
  return swift_allocObject();
}

uint64_t sub_100023CFC()
{
  return swift_allocObject();
}

uint64_t sub_100023D20()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)();
}

uint64_t sub_100023D38()
{
  uint64_t v3 = *(void *)(v1 - 464);
  return sub_10001C274(v3, v0, (uint64_t *)(v1 - 136));
}

uint64_t sub_100023D58()
{
  return v0;
}

uint64_t sub_100023D78()
{
  return *(void *)(v0 - 288);
}

uint64_t sub_100023D8C()
{
  return dispatch thunk of static Comparable.< infix(_:_:)();
}

uint64_t sub_100023DB0(uint64_t a1, unint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  return sub_10016AE48(a1, a2, a3, a4, a5, a6, a7, a17, a9);
}

uint64_t sub_100023DCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_10016AE48(v9, v12, v11, v14, v13, v16, v10, v15, a9);
}

uint64_t sub_100023E24()
{
  return swift_slowAlloc();
}

uint64_t sub_100023E3C()
{
  return swift_slowAlloc();
}

uint64_t sub_100023E54@<X0>(uint64_t a1@<X8>)
{
  return *(void *)(v1 + a1);
}

uint64_t sub_100023E60()
{
  return os_signpost(_:dso:log:name:signpostID:)();
}

uint64_t sub_100023E80(uint64_t a1, uint64_t a2)
{
  return sub_100118E90(a1, a2, v3, v2);
}

void *sub_100023E9C()
{
  return malloc(0x28uLL);
}

uint64_t sub_100023EBC@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 - 256) = a1;
  return type metadata accessor for URL();
}

uint64_t sub_100023ED8(uint64_t a1, uint64_t a2)
{
  return sub_10002538C(a1, a2, 1, v2);
}

uint64_t sub_100023EF0@<X0>(uint64_t a1@<X8>)
{
  return *(void *)(v1 + a1 + 8);
}

uint64_t sub_100023EFC()
{
  return swift_weakLoadStrong();
}

uint64_t sub_100023F14()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_100023F38()
{
  return v0;
}

uint64_t sub_100023F50()
{
  return swift_bridgeObjectRelease();
}

void sub_100023F6C()
{
  Hasher._combine(_:)(0);
}

uint64_t sub_100023FA0(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_100023FDC@<X0>(uint64_t a1@<X8>)
{
  swift_retain();
  sub_100024038(a1);

  return swift_release();
}

void sub_100024038(uint64_t a1@<X8>)
{
  sub_100017E10();
  uint64_t v4 = *(os_unfair_lock_s **)(v1 + *(void *)(v3 + 96));
  os_unfair_lock_lock(v4);
  sub_100017E10();
  sub_100025214();
  sub_1000241E4(v1, a1);
  os_unfair_lock_unlock(v4);
}

uint64_t sub_1000240B4(uint64_t a1)
{
  *(void *)(v1 - 96) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_1000240D4(uint64_t a1, unsigned char *a2)
{
  *a2 = 1;
  return swift_willThrow();
}

uint64_t sub_100024118()
{
  return swift_retain();
}

uint64_t sub_10002413C()
{
  return 0;
}

void sub_100024148(uint64_t a1@<X8>)
{
  *(void *)(v2 + 16) = v1;
  *(void *)(v2 + 24) = a1;
}

uint64_t sub_100024170()
{
  return dispatch thunk of BinaryInteger._lowWord.getter(v0, v1);
}

uint64_t sub_10002418C()
{
  return v0;
}

uint64_t sub_1000241A4()
{
  uint64_t v3 = *(void *)(*(void *)(v0 + 480) + 16);
  return sub_10017998C(v3, v1);
}

uint64_t sub_1000241E4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_100024344();
  v4(v3);
  sub_10001DCF8();
  uint64_t v5 = sub_100026078();
  v6(v5);
  return a2;
}

uint64_t type metadata accessor for PegasusContext(uint64_t a1)
{
  return sub_100027D28(a1, qword_10021A8E8);
}

uint64_t sub_100024254()
{
  return swift_slowAlloc();
}

void sub_10002425C()
{
  *(void *)(v0 + 24) = 0;
  *(void *)(v0 + 32) = 0;
  *(_WORD *)(v0 + 40) = 256;
  *(void *)(v0 + 48) = 0;
  *(void *)(v0 + 56) = 0;
}

void sub_100024288(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

uint64_t sub_1000242A8()
{
  return v0;
}

uint64_t sub_1000242D4()
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
}

uint64_t sub_1000242FC()
{
  return 0;
}

uint64_t sub_10002430C@<X0>(uint64_t a1@<X8>)
{
  return v1 + a1;
}

BOOL sub_100024328(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t sub_100024344()
{
  return 0;
}

id sub_100024350()
{
  uint64_t v3 = *(const char **)(v1 + 648);
  return [v0 v3];
}

uint64_t sub_100024368()
{
  return swift_dynamicCastObjCClass();
}

uint64_t sub_1000243A4()
{
  return Hasher.init(_seed:)();
}

uint64_t sub_1000243BC()
{
  return Hasher.init(_seed:)();
}

id sub_1000243D4()
{
  uint64_t v3 = *(void **)(v0 + 8 * v1 + 32);
  return v3;
}

void sub_1000243EC()
{
  *uint64_t v0 = 0x8000000000000000;
}

uint64_t sub_10002441C()
{
  sub_10001B620((void *)(v0 - 128), *(void *)(v0 - 104));
  return sub_1000111F0();
}

uint64_t sub_10002444C()
{
  uint64_t v2 = *(void *)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 104);
  return sub_10002538C(v2, 1, 1, v3);
}

uint64_t sub_1000244A4()
{
  return v0;
}

uint64_t sub_1000244B4()
{
  return v0;
}

uint64_t sub_1000244D8()
{
  return dispatch thunk of static Comparable.<= infix(_:_:)();
}

uint64_t sub_1000244F8(uint64_t a1)
{
  *(void *)(v1 + 24) = a1;
  return sub_1001506BC(v3, v2);
}

uint64_t sub_100024530(uint64_t a1)
{
  *(void *)(v1 - 112) = a1;
  return v1 - 112;
}

uint64_t sub_100024548()
{
  return v0;
}

void *sub_10002455C()
{
  return sub_10001B620((void *)(v0 - 88), *(void *)(v0 - 64));
}

uint64_t sub_100024580(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v16 = *(void *)(v9 + 312);
  uint64_t v17 = *(void *)(v9 + 304);
  return sub_10016AE48(v14, v11, a3, v10, v16, v12, v13, v17, a9);
}

uint64_t sub_1000245B8(uint64_t a1)
{
  sub_10001CA50(v1);
  return a1;
}

uint64_t sub_1000245D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_10001C20C(v9 + 40 * v10 + 32, (uint64_t)&a9);
}

uint64_t sub_1000245F8(uint64_t a1, uint64_t *a2)
{
  return sub_10002572C(a2);
}

void sub_10002462C(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0x16u);
}

uint64_t sub_10002464C()
{
  sub_1000A3D4C();
  uint64_t v3 = sub_10002572C((uint64_t *)&unk_10021B9C0);
  uint64_t v4 = sub_100016544(v3);
  __chkstk_darwin(v4);
  sub_100024A64();
  uint64_t v7 = v5 - v6;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v29 - v9;
  uint64_t v11 = (uint64_t *)(v1 + OBJC_IVAR____TtC7parsecd23ParsecURLRequestBuilder_queryItems);
  swift_beginAccess();
  uint64_t v12 = *v11;
  if (*(void *)(*v11 + 16))
  {
    swift_bridgeObjectRetain();
    uint64_t v13 = sub_10002819C();
    unint64_t v15 = sub_1000287F0(v13, v14);
    if (v16)
    {
      unint64_t v17 = v15;
      uint64_t v18 = *(void *)(v12 + 56);
      uint64_t v19 = type metadata accessor for URLQueryItem();
      sub_10001DCF8();
      (*(void (**)(char *, unint64_t, uint64_t))(v20 + 16))(v10, v18 + *(void *)(v20 + 72) * v17, v19);
      uint64_t v21 = (uint64_t)v10;
      uint64_t v22 = 0;
    }
    else
    {
      uint64_t v19 = type metadata accessor for URLQueryItem();
      uint64_t v21 = sub_10002635C();
    }
    sub_1000254FC(v21, v22);
  }
  else
  {
    uint64_t v19 = type metadata accessor for URLQueryItem();
    uint64_t v23 = sub_10002635C();
    sub_1000254FC(v23, v24);
    swift_bridgeObjectRetain();
  }
  swift_endAccess();
  swift_bridgeObjectRelease();
  type metadata accessor for URLQueryItem();
  uint64_t v25 = sub_10002635C();
  int v27 = sub_100027BA4(v25, v26, v19);
  uint64_t result = sub_100019994((uint64_t)v10, (uint64_t *)&unk_10021B9C0);
  if (v27 == 1)
  {
    swift_bridgeObjectRetain();
    sub_10002819C();
    URLQueryItem.init(name:value:)();
    sub_1000254FC(v7, 0);
    sub_1000257C8();
    sub_1000266A4(v7, v2, v0, (uint64_t *)&unk_10021B9C0, (uint64_t (*)(uint64_t))&type metadata accessor for URLQueryItem, (void (*)(char *, uint64_t, uint64_t))sub_1000277F8, (void (*)(uint64_t))sub_1000BAB2C);
    return swift_endAccess();
  }
  return result;
}

uint64_t static AvroPrimitiveSchema.null.getter()
{
  return 0;
}

uint64_t sub_100024898()
{
  return os_signpost(_:dso:log:name:signpostID:)();
}

uint64_t sub_1000248B0()
{
  return v0;
}

unint64_t sub_1000248C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000287F0(a2, a3);
}

uint64_t sub_1000248E0()
{
  return *(void *)(v0 + 16);
}

uint64_t sub_100024908()
{
  return v0;
}

uint64_t sub_100024920(uint64_t a1)
{
  return a1 - 8;
}

uint64_t sub_100024938()
{
  return v0;
}

uint64_t sub_100024944()
{
  *(void *)(v0 + 16) = 0;
  return swift_bridgeObjectRelease();
}

uint64_t sub_10002495C()
{
  return v0 - 128;
}

uint64_t sub_100024970()
{
  return v0;
}

uint64_t sub_100024998()
{
  return 0;
}

uint64_t sub_1000249B4(uint64_t a1)
{
  *(void *)(v1 - 96) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_1000249DC()
{
  return swift_beginAccess();
}

uint64_t sub_100024A00()
{
  return swift_allocObject();
}

uint64_t sub_100024A30()
{
  return swift_allocError();
}

uint64_t sub_100024A48()
{
  return v0;
}

uint64_t sub_100024A54()
{
  return v0;
}

void sub_100024A74()
{
  *(void *)(v1 - 256) = v0;
}

void *sub_100024A84()
{
  return sub_10001B620((void *)(v0 - 128), *(void *)(v0 - 104));
}

__n128 sub_100024AD0(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, __n128 a15)
{
  __n128 result = a15;
  a1[1] = a15;
  return result;
}

uint64_t sub_100024ADC()
{
  return 0;
}

uint64_t sub_100024B0C()
{
  return sub_100027BA4(v1, 1, v0);
}

uint64_t sub_100024B34()
{
  return os_log(_:dso:log:type:_:)();
}

void sub_100024B54()
{
  Incident.reportTelemetry()();
}

uint64_t sub_100024B74()
{
  return swift_beginAccess();
}

uint64_t sub_100024BAC@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v1 - 96) = a1;
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

uint64_t sub_100024BD0()
{
  return v0;
}

void sub_100024BEC()
{
  uint64_t v2 = *(void *)(v0 + 24);
  *(void *)(v1 - 152) = *(void *)(v0 + 32);
  *(void *)(v1 - 144) = v2;
}

uint64_t sub_100024C30()
{
  return v0;
}

uint64_t sub_100024C48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  return a17;
}

uint64_t sub_100024C78()
{
  return v0;
}

char *sub_100024C98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  return &a10;
}

uint64_t sub_100024CBC(uint64_t a1)
{
  uint64_t v4 = *(void *)(v2 + 56) + 40 * a1;
  return sub_10001C20C(v4, v1);
}

uint64_t sub_100024CDC(uint64_t a1, void *a2)
{
  uint64_t result = *(void *)(v2 - 176);
  *a2 = *(void *)(v2 - 184);
  a2[1] = result;
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

uint64_t sub_100024CF0()
{
  return v0;
}

id sub_100024D14()
{
  uint64_t v3 = *(const char **)(v0 + 424);
  return [v1 v3];
}

uint64_t sub_100024D2C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = (v2 - 32) | 0x8000000000000000;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 3;
  return swift_willThrow();
}

uint64_t sub_100024D58()
{
  return 16;
}

uint64_t sub_100024D64()
{
  return v0;
}

uint64_t sub_100024D70()
{
  return dispatch thunk of static BinaryInteger.isSigned.getter();
}

uint64_t sub_100024D8C()
{
  return swift_arrayDestroy();
}

uint64_t sub_100024DAC()
{
  return swift_retain();
}

uint64_t sub_100024DE4()
{
  return v0;
}

void sub_100024DF8(uint64_t a1, void *a2)
{
  *a2 = v2;
  a2[1] = 0xD000000000000015;
}

uint64_t sub_100024E0C()
{
  return v0;
}

uint64_t sub_100024E24@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 - 40) = a1 & 0x3FFFFFFFFFFFFFFFLL;
  return *(void *)(v1 - 48);
}

uint64_t sub_100024E40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v15 = v9[47];
  uint64_t v16 = v9[53];
  uint64_t v17 = v9[52];
  uint64_t v18 = v9[51];
  return sub_10016AE48(v11, v12, v13, v10, v15, v16, v17, v18, a9);
}

double _s9SwiftAvro0B5ValueVyACSbcfC_0@<D0>(char a1@<W0>, uint64_t a2@<X8>)
{
  *(void *)a2 = a1 & 1;
  double result = 0.0;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 49) = 0u;
  return result;
}

uint64_t sub_100024EB4()
{
  return swift_release_n();
}

uint64_t sub_100024ECC()
{
  return v0;
}

uint64_t sub_100024EE4()
{
  return v0;
}

uint64_t sub_100024EFC()
{
  return v0;
}

uint64_t sub_100024F10@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v1 - 96) = a1;
  return v1 - 96;
}

uint64_t sub_100024F28()
{
  return swift_bridgeObjectRetain_n();
}

void sub_100024F44()
{
  *uint64_t v0 = 0x8000000000000000;
}

uint64_t sub_100024F60()
{
  uint64_t v2 = *(void *)(v0 - 584);
  unint64_t v3 = *(void *)(v0 - 576);
  return sub_10000A330(v2, v3);
}

uint64_t sub_100024F98()
{
  return v0;
}

uint64_t sub_100024FB0(uint64_t a1)
{
  *(void *)(v1 - 96) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_100024FD0()
{
  return 0;
}

uint64_t sub_100024FDC(_DWORD *a1)
{
  *(void *)(v2 + 16) = a1;
  *a1 = 0;
  *(void *)(v1 + v3) = v2;
  return Date.init()();
}

uint64_t sub_100025054()
{
  return os_signpost(_:dso:log:name:signpostID:)();
}

id sub_10002509C(void *a1)
{
  return sub_100121AE0(a1, v1, 0);
}

uint64_t sub_1000250D0(uint64_t a1)
{
  return sub_10002538C(a1, 1, 1, v1);
}

void sub_1000250EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v6 - 104) = a2;
  *(void *)(v6 - 96) = v5;
  *(void *)(v6 - 120) = v4;
  *(void *)(v6 - 136) = *(void *)(*(void *)(a4 + 24) + 8);
}

uint64_t sub_100025114()
{
  return 0x74616F6C66;
}

uint64_t sub_100025128@<X0>(uint64_t a1@<X2>, uint64_t a2@<X6>, uint64_t a3@<X7>, uint64_t a4@<X8>, char a5)
{
  v6[45] = v9;
  v6[46] = v11;
  v6[43] = v8;
  v6[44] = a4;
  return sub_10016AE48(v5, v12, a1, v7, v9, v10, a2, a3, a5);
}

uint64_t sub_100025198()
{
  return v0;
}

uint64_t sub_1000251A8()
{
  return v0;
}

uint64_t sub_1000251DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return sub_100030368(v10, v12, v11, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t sub_1000251FC()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_100025214()
{
  return swift_beginAccess();
}

void sub_100025250(uint64_t a1@<X8>, uint64_t a2)
{
  *(uint64_t *)((char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0)) = *(void *)(v2 + 48);
}

uint64_t sub_100025270()
{
  return swift_task_dealloc();
}

uint64_t sub_100025288()
{
  return swift_beginAccess();
}

uint64_t sub_1000252AC()
{
  return swift_allocObject();
}

uint64_t sub_100025314()
{
  return 0x676E69727473;
}

uint64_t sub_100025328(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v15 = v9[50];
  unint64_t v16 = v9[51];
  uint64_t v17 = v9[54];
  uint64_t v18 = v9[49];
  return sub_10016AE48(v15, v16, v17, v13, v12, v10, v11, v18, a9);
}

uint64_t sub_100025370()
{
  return String.hash(into:)();
}

uint64_t sub_10002538C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

uint64_t sub_1000253C4()
{
  return v0;
}

uint64_t sub_1000253D4()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1000253F4()
{
  return v0;
}

uint64_t sub_10002540C()
{
  return 0x61662E726F727265;
}

__n128 *sub_100025460(__n128 *result, __n128 a2)
{
  result[1] = a2;
  result[2].n128_u64[0] = 0x6E6F73616572;
  result[2].n128_u64[1] = 0xE600000000000000;
  return result;
}

uint64_t sub_10002547C()
{
  return _CocoaArrayWrapper.endIndex.getter();
}

uint64_t sub_1000254BC(uint64_t a1)
{
  *(void *)(v1 - 256) = a1;
  return v1 - 256;
}

uint64_t sub_1000254E4()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000254FC(uint64_t a1, uint64_t a2)
{
  return sub_10002538C(a1, a2, 1, v2);
}

uint64_t sub_10002552C()
{
  return swift_release();
}

uint64_t sub_100025544(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_10002572C(a3);
}

uint64_t sub_100025574(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  return sub_10016AE48(a1, a2, a25, a16, v27, v26, a24, v25, a9);
}

uint64_t sub_1000255A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,char a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,unint64_t a31)
{
  return sub_100093A68(a23, a31, a24, a25, a26, a27, a28, a29, a22);
}

uint64_t sub_1000255D4(uint64_t a1, uint64_t *a2)
{
  sub_10002572C(a2);
  sub_10001DCF8();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t sub_100025628(uint64_t a1, uint64_t *a2)
{
  sub_10002572C(a2);
  sub_10000E040();
  v3();
  return a1;
}

uint64_t sub_100025680(uint64_t a1, uint64_t *a2)
{
  sub_10002572C(a2);
  sub_10000E004();
  sub_10000E040();
  v3();
  return a1;
}

uint64_t sub_1000256D4(uint64_t a1, uint64_t *a2)
{
  sub_10002572C(a2);
  sub_10000E004();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t sub_10002572C(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_100025770()
{
  return static os_signpost_type_t.begin.getter();
}

uint64_t sub_100025794()
{
  return os_signpost(_:dso:log:name:signpostID:)();
}

void sub_1000257AC()
{
  *uint64_t v0 = 0x8000000000000000;
}

uint64_t sub_1000257C8()
{
  return swift_beginAccess();
}

BOOL sub_1000257E0()
{
  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v1 & 1, v0);
}

uint64_t sub_100025800()
{
  return *(void *)(v0 + 16);
}

uint64_t sub_10002581C()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t sub_100025848()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t sub_100025874@<X0>(uint64_t a1@<X0>, char a2@<W8>)
{
  *(unsigned char *)(v3 - 96) = a2;
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a1, v3 - 96, v2);
}

uint64_t sub_1000258AC()
{
  return Apple_Parsec_Spotlight_V1alpha_TopicContext.topic.modify(v0 - 128);
}

uint64_t sub_1000258D4(uint64_t a1, uint64_t *a2)
{
  return sub_10006831C(a1, a2);
}

uint64_t sub_1000258DC(uint64_t a1)
{
  return sub_100027BA4(a1, 1, v1);
}

uint64_t sub_10002590C()
{
  return swift_beginAccess();
}

uint64_t sub_10002592C()
{
  return dispatch thunk of static Equatable.== infix(_:_:)();
}

uint64_t sub_100025950()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t variable initialization expression of ByteBuffer.readerIndex()
{
  return 0;
}

uint64_t sub_100025974()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t sub_100025998(uint64_t a1)
{
  *(void *)(v1 - 112) = a1;
  return v1 - 112;
}

uint64_t sub_1000259C8()
{
  return StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
}

uint64_t sub_1000259EC()
{
  return sub_10002538C(v0, 1, 1, v1);
}

BOOL static SQLiteViewProvider.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t sub_100025A18()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_100025A38()
{
  return v0;
}

uint64_t sub_100025A4C()
{
  return v0;
}

double sub_100025A6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, long long a19)
{
  return sub_100039D58((uint64_t)&a14, v19, &a19);
}

uint64_t sub_100025A88()
{
  return v0;
}

uint64_t sub_100025A9C()
{
  return os_signpost(_:dso:log:name:signpostID:_:_:)();
}

uint64_t sub_100025AE0()
{
  return dispatch thunk of static Equatable.== infix(_:_:)();
}

uint64_t sub_100025B00()
{
  return *(void *)(v0 + 120);
}

uint64_t sub_100025B1C()
{
  return swift_beginAccess();
}

uint64_t sub_100025B3C()
{
  return v0;
}

uint64_t sub_100025B50()
{
  return swift_isEscapingClosureAtFileLocation();
}

uint64_t sub_100025B74()
{
  return swift_allocError();
}

uint64_t sub_100025B94()
{
  return v0;
}

uint64_t sub_100025BA4()
{
  return type metadata accessor for DispatchPredicate();
}

void *sub_100025BE0@<X0>(void *__dst@<X2>, const void *a2@<X8>)
{
  return memmove(__dst, a2, v2);
}

uint64_t sub_100025BFC()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

uint64_t sub_100025C20(uint64_t a1, uint64_t a2)
{
  return sub_10002538C(a1, a2, 1, v2);
}

uint64_t sub_100025C38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = v5;
  sub_100121AE0(v4, v7, 2);
  sub_100121AE0(*(id *)(v6 - 168), v3, 2);
  return a3;
}

uint64_t sub_100025CA4()
{
  return v0;
}

uint64_t sub_100025CCC()
{
  return v0;
}

void sub_100025D00()
{
  SQLiteContext.setString(_:destructor:)(v2, v1, (void (__cdecl **)(void *))1, v0);
}

uint64_t sub_100025D20()
{
  return v0;
}

void sub_100025D34(uint64_t a1, void *a2)
{
  *a2 = *(void *)(v4 - 184);
  a2[1] = v3;
  a2[3] = 0;
  a2[4] = 0;
  a2[2] = v2;
}

uint64_t sub_100025D4C(uint64_t result)
{
  void *v1 = result;
  return result;
}

uint64_t sub_100025D58()
{
  return v0 - 72;
}

uint64_t _s7SQLiter14SQLiteBaseVTabC10ConnectionC14getTableSchemaSSyKF_0()
{
  return 0;
}

uint64_t sub_100025D78(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 6;
  *(unsigned char *)(a2 + 24) = 4;
  return swift_willThrow();
}

uint64_t sub_100025DA0()
{
  return swift_beginAccess();
}

uint64_t sub_100025DC0()
{
  return swift_beginAccess();
}

uint64_t sub_100025DE0()
{
  return SQLiteRow.type(at:)(v0);
}

uint64_t sub_100025E1C()
{
  return v0;
}

uint64_t sub_100025E38(__n128 a1, uint64_t a2, __n128 *a3)
{
  *a3 = a1;
  a3[1].n128_u64[0] = 0;
  a3[1].n128_u8[8] = 3;
  return swift_willThrow();
}

void sub_100025E5C(sqlite3_int64 a1, sqlite3_context *a2)
{
  sqlite3_result_int64(a2, a1);
}

uint64_t sub_100025E94()
{
  return sub_100027BCC(v1, v0);
}

uint64_t sub_100025EAC@<X0>(char a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  return sub_10016AE48(v20, v19, v17, v18, v21, a11, a17, a10, a1);
}

uint64_t sub_100025F14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_100093A68(v10, v16, v13, v11, v14, v9, v12, v15, a9);
}

void sub_100025F4C()
{
  uint64_t v1 = 0x616D65686373202CLL;
  unint64_t v2 = 0xEA0000000000203ALL;
  String.append(_:)(*(Swift::String *)&v1);
}

uint64_t sub_100025F78()
{
  return 0x746E65696C63;
}

uint64_t sub_100025F8C()
{
  return v0;
}

uint64_t sub_100025FBC()
{
  return v0;
}

uint64_t sub_100025FDC()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_100025FF4()
{
  *uint64_t v0 = 0x8000000000000000;
  return v1;
}

id sub_100026018()
{
  *(unsigned char *)(v0 + 80) = *(_DWORD *)(v1 - 148);
  uint64_t v3 = *(void **)(v0 + 88);
  return v3;
}

uint64_t sub_10002605C()
{
  return v0;
}

uint64_t sub_100026078()
{
  return v0;
}

void sub_10002608C(uint64_t a1@<X8>)
{
  *(void *)(v4 - 136) = v2;
  *(void *)(v4 - 128) = v1;
  *(void *)(v4 - 120) = ~a1;
  *(void *)(v4 - 144) = v3;
  uint64_t v5 = v3 + 16;
  *(void *)(v4 - 112) = *(void *)(v5 + 56);
  *(void *)(v4 - 152) = v5 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
}

__n128 *sub_1000260BC(__n128 *result, __n128 a2)
{
  result[1] = a2;
  result[2].n128_u64[0] = 0x6E6F73616572;
  result[2].n128_u64[1] = 0xE600000000000000;
  *(void *)(v2 - 224) = 0;
  *(void *)(v2 - 216) = 0xE000000000000000;
  return result;
}

uint64_t sub_1000260EC()
{
  return v0;
}

uint64_t sub_1000260FC()
{
  return v0;
}

uint64_t sub_100026114()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_100026140@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v1 - 96) = a1;
  return v1 - 96;
}

void sub_10002616C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  sub_100121B34(v14, a12, 2);
  sub_100121B34(a13, a14, 2);
}

uint64_t sub_1000261B4()
{
  return v0;
}

uint64_t sub_1000261D8()
{
  *(void *)(v0 + 24) = v2;
  *(void *)(v0 + 32) = v1;
  return swift_retain();
}

uint64_t sub_1000261F4()
{
  return dispatch thunk of BinaryInteger._lowWord.getter(v0, v1);
}

uint64_t sub_10002620C()
{
  return v0;
}

uint64_t sub_100026220()
{
  return 0x6E61656C6F6F62;
}

void sub_100026238(uint64_t a1@<X8>)
{
  *(void *)(v1 - 40) = a1 & 0x3FFFFFFFFFFFFFFFLL;
}

uint64_t sub_10002624C(uint64_t a1, unint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_100093A68(a1, a2, a3, a4, v11, v10, v9, v12, a9);
}

uint64_t sub_100026280(uint64_t a1, _WORD *a2)
{
  *a2 = 258;
  return swift_willThrow();
}

uint64_t sub_1000262A0()
{
  return swift_allocObject();
}

uint64_t sub_1000262E0(uint64_t a1, unsigned char *a2)
{
  *a2 = 3;
  return swift_willThrow();
}

void sub_100026300()
{
  uint64_t v1 = 0x203A3E4C52553C20;
  unint64_t v2 = 0xE800000000000000;
  String.append(_:)(*(Swift::String *)&v1);
}

uint64_t sub_100026324()
{
  return swift_dynamicCast();
}

uint64_t sub_10002635C()
{
  return v0;
}

uint64_t sub_100026368()
{
  return v0;
}

uint64_t sub_100026388()
{
  return swift_release_n();
}

uint64_t sub_1000263A0(uint64_t a1, unint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v12 = *(void *)(v9 + 232);
  return sub_100093A68(a1, a2, a3, a4, a5, a6, v12, v10, a9);
}

uint64_t sub_1000263C0()
{
  return v0;
}

_WORD *sub_1000263D4(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

uint64_t sub_1000263E0()
{
  return v0;
}

void sub_1000263FC(double a1)
{
  *(double *)(v1 - 120) = a1;
}

uint64_t sub_100026408()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_100026420()
{
  return v0;
}

void sub_10002643C()
{
  unint64_t v2 = *(os_unfair_lock_s **)(v0 + 24);
  os_unfair_lock_lock(v2);
}

uint64_t sub_100026458()
{
  return _NativeDictionary._delete(at:)();
}

uint64_t sub_10002647C()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t sub_1000264A0()
{
  return static _DictionaryStorage.allocate(capacity:)();
}

uint64_t sub_1000264BC()
{
  *(unsigned char *)(v0 + 81) = v1;
  return swift_weakAssign();
}

uint64_t sub_1000264D8()
{
  return v0;
}

uint64_t sub_100026500@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 - 96) = a1;
  return type metadata accessor for ClosedRange();
}

uint64_t sub_100026540()
{
  return sub_10015C798();
}

uint64_t sub_100026588(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_10016AE48(v15, v9, v14, v11, v13, v16, v12, v10, a9);
}

uint64_t sub_1000265C0()
{
  return v0;
}

uint64_t sub_1000265D4()
{
  return sub_10002464C();
}

uint64_t sub_100026610()
{
  return v0;
}

uint64_t sub_10002662C(uint64_t a1)
{
  *(void *)(v1 + 24) = a1;
  return sub_100156FB4(v2, v3);
}

uint64_t sub_10002664C(uint64_t a1, unint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  return sub_10016AE48(a1, a2, a3, a4, a5, v25, a24, v24, a9);
}

uint64_t sub_10002666C()
{
  return v0;
}

uint64_t sub_1000266A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t (*a5)(uint64_t), void (*a6)(char *, uint64_t, uint64_t), void (*a7)(uint64_t))
{
  uint64_t v26 = a6;
  uint64_t v14 = sub_10002572C(a4);
  uint64_t v15 = sub_100016544(v14);
  __chkstk_darwin(v15);
  uint64_t v16 = sub_100027014();
  uint64_t v17 = a5(v16);
  sub_100020C48();
  uint64_t v19 = v18;
  __chkstk_darwin(v20);
  uint64_t v22 = (char *)&v25 - v21;
  if (sub_100027BA4(a1, 1, v17) == 1)
  {
    sub_100019994(a1, a4);
    uint64_t v23 = sub_10002819C();
    a7(v23);
    swift_bridgeObjectRelease();
    return sub_100019994(v7, a4);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v19 + 32))(v22, a1, v17);
    v26(v22, a2, a3);
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_100026820()
{
  return v0;
}

__n128 *sub_100026858(__n128 *result, __n128 a2)
{
  result[1] = a2;
  result[2].n128_u64[0] = 0x437972746E756F63;
  result[2].n128_u64[1] = 0xEB0000000065646FLL;
  return result;
}

uint64_t sub_100026898(uint64_t a1, uint64_t a2)
{
  return _swift_deallocObject(a1, a2, 7);
}

uint64_t sub_1000268A0(uint64_t a1, uint64_t a2)
{
  return sub_10004B3C0(a1, a2);
}

uint64_t sub_1000268A8()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t sub_1000268CC@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v1 - 96) = a1;
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

id sub_100026900(uint64_t a1)
{
  uint64_t v4 = *(const char **)(v1 + 1696);
  return objc_msgSend(v2, v4, a1);
}

uint64_t sub_100026920(uint64_t a1, uint64_t *a2)
{
  return sub_10006831C(a1, a2);
}

void sub_100026928(void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, os_log_t log)
{
  _os_log_impl(a1, log, v10, a4, v11, 2u);
}

uint64_t sub_100026948@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return sub_100118A10(v2 - 128, a1, (a2 - 32) | 0x8000000000000000);
}

uint64_t sub_100026970()
{
  return v0;
}

uint64_t sub_100026988()
{
  return v0;
}

uint64_t sub_10002699C(uint64_t a1)
{
  return sub_1000972FC(a1, v4, v3, v1, v2);
}

uint64_t sub_1000269BC()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_1000269E4()
{
  return String.hash(into:)();
}

void sub_100026A08()
{
  *uint64_t v0 = 0x8000000000000000;
}

uint64_t sub_100026A34()
{
  return swift_dynamicCast();
}

uint64_t sub_100026A54()
{
  return v0;
}

uint64_t sub_100026A6C(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  return sub_10001C20C(v2 + 32, (uint64_t)&a1[2]);
}

void sub_100026AA8()
{
  sub_1000EA1E8(v1, v0, 0);
  sub_1000EA1E8(v1, v0, 0);
}

__n128 *sub_100026B18(__n128 *result, __n128 a2)
{
  result[1] = a2;
  result[2].n128_u64[0] = 0x7365747962;
  result[2].n128_u64[1] = 0xE500000000000000;
  return result;
}

uint64_t sub_100026B34()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_100026B54()
{
  return swift_slowAlloc();
}

void sub_100026B6C(os_unfair_lock_s *a1@<X8>)
{
  os_unfair_lock_lock(a1 + 6);
}

uint64_t sub_100026BA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_10002538C(a1, a2, 1, a4);
  return swift_beginAccess();
}

uint64_t sub_100026BE4()
{
  return swift_beginAccess();
}

uint64_t sub_100026C04@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = (v2 - 32) | 0x8000000000000000;
  *(unsigned char *)(a1 + 41) = 3;
  return swift_willThrow();
}

uint64_t sub_100026C2C()
{
  return v0;
}

uint64_t sub_100026C40()
{
  return v0;
}

void sub_100026C64()
{
  uint64_t v1 = 0x65756C617620;
  unint64_t v2 = 0xE600000000000000;
  String.append(_:)(*(Swift::String *)&v1);
}

uint64_t sub_100026C84(void *a1)
{
  sub_10001B620(a1, v1);
  return v1;
}

uint64_t sub_100026CB8()
{
  return dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)();
}

void sub_100026CE4()
{
  *(unsigned char *)(v2 + *v0) = v1;
}

void *sub_100026CF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100130224(a1, a2, a3, v5, v4, v3);
}

uint64_t sub_100026D14()
{
  return v0;
}

uint64_t sub_100026D4C()
{
  uint64_t v2 = *(void *)(v0 - 80);
  return sub_10002E598(v0 - 104, v2);
}

void sub_100026D68(uint64_t a1@<X8>)
{
  unint64_t v3 = 0xD000000000000011;
  unint64_t v2 = (a1 - 32) | 0x8000000000000000;
  SQLiteContext.setError(message:code:)(*(Swift::String *)&v3, -1);
}

uint64_t sub_100026D90()
{
  *uint64_t v0 = 0x8000000000000000;
  return v1;
}

uint64_t sub_100026DD8()
{
  return swift_beginAccess();
}

uint64_t sub_100026DFC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)a1 = a2;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_WORD *)(a1 + 40) = 3584;
  return swift_willThrow();
}

uint64_t sub_100026E28()
{
  return sub_1000291B4(v0, v1);
}

void sub_100026E40()
{
  sub_100128A68();
}

uint64_t sub_100026E7C()
{
  return swift_retain();
}

uint64_t sub_100026EAC(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 8;
  *(unsigned char *)(a2 + 24) = 4;
  return swift_willThrow();
}

uint64_t sub_100026EEC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = v4;
  *(void *)(a2 + 8) = v2;
  *(void *)(a2 + 16) = v3;
  *(unsigned char *)(a2 + 24) = 0;
  return swift_willThrow();
}

uint64_t sub_100026F10@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a2;
  *(unsigned char *)(a1 + 24) = 4;
  return swift_willThrow();
}

uint64_t sub_100026F34()
{
  uint64_t v3 = *(void *)(*(void *)(v0 + 480) + 16);
  return sub_10017998C(v3, v1);
}

double sub_100026F58@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(unsigned char *)(a1 + 64) = 0;
  return result;
}

double sub_100026F9C()
{
  *(_WORD *)(v0 + 96) = 0;
  double result = 0.0;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 80) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)uint64_t v0 = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  return result;
}

uint64_t sub_100026FD4()
{
  return v0;
}

uint64_t sub_100027014()
{
  return 0;
}

uint64_t sub_100027030@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return sub_100118A10(v2 - 128, a1, (a2 - 32) | 0x8000000000000000);
}

uint64_t sub_10002704C()
{
  return swift_retain_n();
}

uint64_t sub_100027064()
{
  return swift_beginAccess();
}

uint64_t sub_100027088(uint64_t a1)
{
  return sub_10007E3D4(a1, 0, 0);
}

uint64_t sub_1000270A0()
{
  return swift_slowDealloc();
}

uint64_t sub_1000270BC()
{
  return v0;
}

uint64_t sub_1000270D0(uint64_t a1)
{
  return _swift_task_switch(a1, 0, 0);
}

void sub_1000270DC(uint64_t a1@<X8>)
{
  Swift::UInt v3 = *(void *)(v1 + 8 * a1);
  Hasher._combine(_:)(v3);
}

uint64_t sub_1000270F4()
{
  return v0;
}

uint64_t sub_10002710C()
{
  return os_log(_:dso:log:type:_:)();
}

uint64_t sub_100027130()
{
  return swift_release();
}

uint64_t sub_10002714C()
{
  return *(void *)(v0 + 88);
}

uint64_t sub_100027164()
{
  return swift_allocObject();
}

uint64_t sub_100027184()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t sub_1000271A4()
{
  return v0;
}

void sub_1000271C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  sub_100121B34(v17, a15, 2);
  sub_100121B34(a16, a17, 2);
}

__n128 sub_100027208(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __n128 a11)
{
  *(void *)(v12 - 72) = a1;
  __n128 result = a11;
  *char v11 = a11.n128_u32[0];
  return result;
}

uint64_t sub_100027220()
{
  return v0;
}

uint64_t sub_100027240()
{
  return v0;
}

double sub_100027250(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  *(void *)(a19 + 48) = 0;
  double result = 0.0;
  *(_OWORD *)(a19 + 16) = 0u;
  *(_OWORD *)(a19 + 32) = 0u;
  *(_OWORD *)a19 = 0u;
  *(_WORD *)(a19 + 56) = -256;
  return result;
}

uint64_t sub_100027270()
{
  return swift_retain();
}

uint64_t sub_1000272C0(uint64_t a1)
{
  *(void *)(v1 + 24) = a1;
  return v1 + 24;
}

void *sub_1000272DC()
{
  return sub_10001B620(v0, v0[3]);
}

uint64_t sub_10002730C()
{
  return dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)();
}

void *sub_100027330@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return sub_10016CDC8(a1, a2, a3);
}

uint64_t sub_100027348@<X0>(uint64_t a1@<X8>, char a2)
{
  uint64_t v9 = *(void *)(v2 + 360);
  uint64_t v10 = *(void *)(v2 + 296);
  return sub_100093A68(v4, v7, a1, v3, v9, v10, v5, v6, a2);
}

uint64_t sub_100027394(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t v5 = *(void *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 40);
  uint64_t v7 = *(void *)(a2 + 48);
  uint64_t v8 = *(void *)(a2 + 56);
  char v12 = *(unsigned char *)(a2 + 64);
  uint64_t v9 = *(void *)a2;
  unint64_t v10 = *(void *)(a2 + 8);
  return sub_10016AE48(v9, v10, v3, v4, v5, v6, v7, v8, v12);
}

uint64_t sub_1000273FC()
{
  return v0;
}

uint64_t sub_10002740C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, void (*a5)(void))
{
  swift_isUniquelyReferenced_nonNull_native();
  sub_1000257AC();
  sub_10002867C(a1, a2, a3, v11, a4, a5);
  *uint64_t v5 = v13;

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000274A4()
{
  return *v0;
}

uint64_t sub_1000274B0()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t sub_1000274D0()
{
  return v0;
}

uint64_t sub_1000274E8()
{
  return swift_slowAlloc();
}

uint64_t sub_100027510()
{
  return v0;
}

uint64_t sub_100027528()
{
  return v0;
}

uint64_t sub_10002758C()
{
  return v0;
}

uint64_t sub_1000275B8()
{
  return v0;
}

uint64_t sub_1000275D0()
{
  return v0;
}

uint64_t sub_1000275E0()
{
  return v0;
}

uint64_t sub_1000275F4()
{
  return v0;
}

size_t sub_10002760C(const void *a1)
{
  return j__malloc_size(a1);
}

void sub_100027630(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{
  sub_100121B34(a24, a11, 2);
  uint64_t v25 = *(void **)(v24 - 168);
  sub_100121B34(v25, a20, 2);
}

uint64_t sub_10002766C()
{
  return v0;
}

id sub_100027684()
{
  uint64_t v3 = *(const char **)(v1 + 424);
  return [v0 v3];
}

uint64_t sub_10002769C()
{
  return v0;
}

uint64_t sub_1000276C4@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)(a1 + 16) = (a2 - 32) | 0x8000000000000000;
  *(unsigned char *)(a1 + 24) = 0;
  return swift_willThrow();
}

uint64_t sub_1000276E8()
{
  return sub_1000291B4(v1, v0);
}

__n128 sub_100027700@<Q0>(__n128 *a1@<X8>)
{
  return a1[3];
}

uint64_t sub_10002771C()
{
  *(_OWORD *)(v1 - 80) = *v0;
  return sub_10016EC3C(v1 - 80, v1 - 64);
}

uint64_t sub_100027740(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  unint64_t v17 = *(void *)(v15 - 480);
  uint64_t v18 = *(void *)(v15 - 472);
  return sub_10016AE48(v13, v17, v12, v9, v18, v14, v11, v10, a9);
}

uint64_t sub_100027784()
{
  return Hasher.init(_seed:)();
}

uint64_t sub_1000277A8()
{
  return static SQLiteVTab.getTable(forConnection:)();
}

uint64_t sub_1000277C8()
{
  return v0;
}

uint64_t sub_1000277F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10002740C(a1, a2, a3, &qword_100219758, (void (*)(void))&type metadata accessor for URLQueryItem);
}

uint64_t sub_100027818(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  uint64_t v8 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v8;
  uint64_t v9 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v9;
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  uint64_t v10 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v10;
  uint64_t v11 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v11;
  uint64_t v12 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v12;
  uint64_t v13 = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v13;
  uint64_t v14 = *(void *)(a2 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v14;
  uint64_t v15 = a3[16];
  uint64_t v76 = *(void **)(a2 + 160);
  __dst = (void *)(a1 + v15);
  id v75 = (const void *)(a2 + v15);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = v76;
  uint64_t v74 = type metadata accessor for Date();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v16 = v76;
  if (sub_100027BA4((uint64_t)v75, 1, v74))
  {
    uint64_t v17 = sub_10002572C(&qword_10021BB10);
    memcpy(__dst, v75, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v74 - 8) + 16))(__dst, v75, v74);
    sub_10002538C((uint64_t)__dst, 0, 1, v74);
  }
  uint64_t v18 = a3[17];
  uint64_t v19 = a3[18];
  uint64_t v20 = *(void **)(a2 + v18);
  *(void *)(a1 + v18) = v20;
  uint64_t v21 = (void *)(a1 + v19);
  uint64_t v22 = (void *)(a2 + v19);
  uint64_t v23 = v22[1];
  *uint64_t v21 = *v22;
  v21[1] = v23;
  uint64_t v24 = a3[19];
  uint64_t v25 = a3[20];
  uint64_t v26 = (void *)(a1 + v24);
  uint64_t v27 = (void *)(a2 + v24);
  uint64_t v28 = v27[1];
  *uint64_t v26 = *v27;
  v26[1] = v28;
  uint64_t v29 = (void *)(a1 + v25);
  uint64_t v30 = (void *)(a2 + v25);
  uint64_t v31 = v30[1];
  *uint64_t v29 = *v30;
  v29[1] = v31;
  uint64_t v32 = a3[21];
  uint64_t v33 = a3[22];
  uint64_t v34 = (void *)(a1 + v32);
  uint64_t v35 = (void *)(a2 + v32);
  uint64_t v36 = v35[1];
  *uint64_t v34 = *v35;
  v34[1] = v36;
  uint64_t v37 = (void *)(a1 + v33);
  uint64_t v38 = (void *)(a2 + v33);
  uint64_t v39 = v38[1];
  *uint64_t v37 = *v38;
  v37[1] = v39;
  uint64_t v40 = a3[23];
  __dsta = (uint64_t *)(a1 + v40);
  uint64_t v41 = (uint64_t *)(a2 + v40);
  unint64_t v42 = *(void *)(a2 + v40 + 8);
  id v43 = v20;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v42 >> 60 == 15)
  {
    *(_OWORD *)__dsta = *(_OWORD *)v41;
  }
  else
  {
    uint64_t v44 = *v41;
    sub_100027BCC(*v41, v42);
    uint64_t *__dsta = v44;
    __dsta[1] = v42;
  }
  uint64_t v45 = a3[24];
  uint64_t v46 = a3[25];
  uint64_t v47 = (void *)(a1 + v45);
  uint64_t v48 = (void *)(a2 + v45);
  uint64_t v49 = v48[1];
  *uint64_t v47 = *v48;
  v47[1] = v49;
  uint64_t v50 = (void *)(a1 + v46);
  uint64_t v51 = (void *)(a2 + v46);
  uint64_t v52 = v51[1];
  *uint64_t v50 = *v51;
  v50[1] = v52;
  uint64_t v53 = a3[27];
  *(void *)(a1 + a3[26]) = *(void *)(a2 + a3[26]);
  id v54 = (void *)(a1 + v53);
  os_log_type_t v55 = (void *)(a2 + v53);
  uint64_t v56 = v55[1];
  *id v54 = *v55;
  v54[1] = v56;
  uint64_t v57 = a3[28];
  uint64_t v58 = a3[29];
  uint64_t v59 = (void *)(a1 + v57);
  uint64_t v60 = (void *)(a2 + v57);
  uint64_t v61 = v60[1];
  *uint64_t v59 = *v60;
  v59[1] = v61;
  uint64_t v62 = (void *)(a1 + v58);
  uint64_t v63 = (void *)(a2 + v58);
  uint64_t v64 = v63[1];
  *uint64_t v62 = *v63;
  v62[1] = v64;
  uint64_t v65 = a3[31];
  *(unsigned char *)(a1 + a3[30]) = *(unsigned char *)(a2 + a3[30]);
  *(unsigned char *)(a1 + v65) = *(unsigned char *)(a2 + v65);
  uint64_t v66 = a3[33];
  *(unsigned char *)(a1 + a3[32]) = *(unsigned char *)(a2 + a3[32]);
  *(unsigned char *)(a1 + v66) = *(unsigned char *)(a2 + v66);
  uint64_t v67 = a3[34];
  uint64_t v68 = a3[35];
  uint64_t v69 = (void *)(a1 + v67);
  uint64_t v70 = (void *)(a2 + v67);
  uint64_t v71 = v70[1];
  *uint64_t v69 = *v70;
  v69[1] = v71;
  *(unsigned char *)(a1 + v68) = *(unsigned char *)(a2 + v68);
  uint64_t v72 = a3[37];
  *(unsigned char *)(a1 + a3[36]) = *(unsigned char *)(a2 + a3[36]);
  *(void *)(a1 + v72) = *(void *)(a2 + v72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_100027BA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

uint64_t sub_100027BCC(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

uint64_t sub_100027C24(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_10001DCF8();
  sub_10000E040();
  v3();
  return a1;
}

uint64_t sub_100027C78(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_10000E060();
  sub_10000E040();
  v3();
  return a1;
}

uint64_t sub_100027CC8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100027D28(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100027D5C()
{
  return swift_beginAccess();
}

uint64_t sub_100027D84()
{
  type metadata accessor for SessionTokens(0);
  return UUID.uuidString.getter();
}

void sub_100027DC8(uint64_t a1@<X8>)
{
  uint64_t v2 = (void *)(v1 + a1);
  *uint64_t v2 = 0;
  v2[1] = 0;
}

uint64_t sub_100027DD4()
{
  return 0;
}

uint64_t sub_100027DE4()
{
  return v0;
}

uint64_t sub_100027DFC@<X0>(uint64_t a1@<X8>)
{
  return sub_100118A10(v1 - 128, 0xD000000000000019, (a1 - 32) | 0x8000000000000000);
}

uint64_t sub_100027E24(__n128 *a1, __n128 a2)
{
  a1[1] = a2;
  a1[3].n128_u64[1] = v2;
  a1[4].n128_u64[0] = v3;
  a1[2].n128_u64[0] = v5;
  a1[6].n128_u64[0] = v2;
  a1[6].n128_u64[1] = v3;
  a1[4].n128_u64[1] = v6;
  return String.init(format:_:)();
}

uint64_t sub_100027E58()
{
  return swift_release();
}

id sub_100027E70()
{
  uint64_t v4 = *(const char **)(v2 + 1224);
  return objc_msgSend(v0, v4, v1);
}

uint64_t sub_100027E8C()
{
  return v0;
}

uint64_t sub_100027EA8()
{
  return v0;
}

uint64_t sub_100027ED8()
{
  return os_signpost(_:dso:log:name:signpostID:)();
}

uint64_t sub_100027F04()
{
  return swift_beginAccess();
}

void sub_100027F28()
{
  Lock.lock()();
}

uint64_t sub_100027F58()
{
  return v0;
}

uint64_t sub_100027F70()
{
  return v0 + 32;
}

uint64_t sub_100027F7C()
{
  return v0;
}

uint64_t sub_100027FA0()
{
  return swift_allocObject();
}

uint64_t sub_100027FD0(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  return sub_10016AE48(a1, a2, a3, v17, v18, a6, a7, a17, a9);
}

uint64_t sub_100028014(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v16 = v9[39];
  unint64_t v17 = v9[29];
  uint64_t v18 = v9[24];
  return sub_100093A68(v16, v17, v12, v10, v13, v11, v18, v14, a9);
}

uint64_t sub_100028054()
{
  return sub_100192780();
}

uint64_t sub_100028074(uint64_t a1)
{
  *(void *)(v1 - 112) = a1;
  return v1 - 112;
}

uint64_t sub_100028088()
{
  return 0x72657070617257;
}

void sub_1000280A0(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

uint64_t type metadata accessor for SessionTokens(uint64_t a1)
{
  return sub_100027D28(a1, qword_100219E68);
}

uint64_t sub_1000280E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);

  return swift_bridgeObjectRelease();
}

uint64_t sub_10002819C()
{
  return v0;
}

void sub_1000281A8(uint64_t a1)
{
  sub_10010553C(v2, 0, a1, v1);
}

uint64_t sub_1000281E4()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000281FC()
{
  return swift_allocObject();
}

uint64_t sub_100028220()
{
  return Apple_Parsec_Search_PegasusQueryContext.locale.setter();
}

void sub_10002823C()
{
  os_unfair_lock_unlock(v0);
}

uint64_t sub_100028260()
{
  return swift_beginAccess();
}

uint64_t sub_100028298(uint64_t result)
{
  *(void *)(v1 + 32) = result;
  *(void *)uint64_t v1 = 0;
  *(unsigned char *)(v1 + 8) = 1;
  return result;
}

void sub_1000282AC()
{
  *(void *)(v6 - 224) = v3;
  *(void *)(v6 - 216) = v0;
  *(void *)(v6 - 208) = v4;
  *(void *)(v6 - 200) = v5;
  *(void *)(v6 - 176) = v1;
  *(void *)(v6 - 168) = v2;
}

uint64_t sub_1000282D0()
{
  return v0;
}

uint64_t sub_1000282EC()
{
  return Data._Representation.append(contentsOf:)();
}

uint64_t sub_100028304()
{
  return v0;
}

uint64_t sub_100028318()
{
  return v0;
}

uint64_t sub_100028324()
{
  return *(void *)(v0 - 128);
}

uint64_t sub_100028370()
{
  return 1735290732;
}

uint64_t sub_10002837C()
{
  return v0;
}

void sub_100028394()
{
  Hasher._combine(_:)(4uLL);
}

uint64_t sub_1000283B8()
{
  return swift_slowAlloc();
}

uint64_t sub_1000283D4()
{
  return v0;
}

uint64_t sub_1000283E0(uint64_t a1)
{
  *(void *)(v1 - 96) = a1;
  return v1 - 96;
}

uint64_t sub_1000283F8@<X0>(uint64_t a1@<X8>)
{
  return *(void *)(v1 + 8 * a1);
}

uint64_t sub_100028404()
{
  return type metadata accessor for Date();
}

uint64_t sub_100028430()
{
  return v0;
}

uint64_t sub_10002845C()
{
  return swift_beginAccess();
}

uint64_t sub_100028484()
{
  return swift_bridgeObjectRetain();
}

__n128 sub_1000284A4(uint64_t a1)
{
  *(void *)(v2 - 120) = a1;
  __n128 result = *(__n128 *)(v2 - 400);
  _DWORD *v1 = result.n128_u32[0];
  return result;
}

uint64_t sub_1000284B8(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 == 15) {
    return 0;
  }
  return result;
}

uint64_t sub_1000284C8()
{
  return *(void *)(v0 + 120);
}

uint64_t sub_1000284F0()
{
  return v0;
}

uint64_t sub_100028504()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_100028540(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_10016AE48(a1, a2, a3, v10, v13, v12, v9, v11, a9);
}

void sub_100028570(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1000248C4(a1, a2, a3);
  sub_100026834();
  if (v9)
  {
    __break(1u);
    goto LABEL_13;
  }
  unint64_t v10 = v7;
  char v11 = v8;
  sub_10002572C(&qword_100219770);
  if (!sub_1000257E0()) {
    goto LABEL_5;
  }
  unint64_t v12 = sub_1000287F0(a2, a3);
  if ((v11 & 1) != (v13 & 1))
  {
LABEL_13:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v10 = v12;
LABEL_5:
  uint64_t v14 = *v3;
  if (v11)
  {
    uint64_t v15 = *(void *)(v14 + 56);
    uint64_t v16 = *(void **)(v15 + 8 * v10);
    *(void *)(v15 + 8 * v10) = a1;
  }
  else
  {
    sub_100028F38(v10, a2, a3, a1, v14);
    swift_bridgeObjectRetain();
  }
}

uint64_t sub_10002867C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5, void (*a6)(void))
{
  sub_1000248C4(a1, a2, a3);
  sub_100026834();
  if (v15)
  {
    __break(1u);
    goto LABEL_13;
  }
  unint64_t v16 = v13;
  char v17 = v14;
  sub_10002572C(a5);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, (Swift::Int)v6)) {
    goto LABEL_5;
  }
  unint64_t v18 = sub_1000287F0(a2, a3);
  if ((v17 & 1) != (v19 & 1))
  {
LABEL_13:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v16 = v18;
LABEL_5:
  uint64_t v20 = *v6;
  if (v17)
  {
    uint64_t v21 = *(void *)(v20 + 56);
    a6(0);
    sub_10001DCF8();
    uint64_t v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v22 + 40);
    uint64_t v25 = v24;
    uint64_t v26 = v21 + *(void *)(v22 + 72) * v16;
    return v23(v26, a1, v25);
  }
  else
  {
    sub_100028BD4(v16, a2, a3, a1, v20);
    return swift_bridgeObjectRetain();
  }
}

unint64_t sub_1000287F0(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  sub_100028864();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();

  return sub_100028A10(a1, a2, v4);
}

uint64_t sub_100028870()
{
  return Message.jsonString(options:)();
}

uint64_t sub_1000288A4()
{
  return BidirectionalCollection<>.joined(separator:)();
}

uint64_t sub_1000288C8(uint64_t result)
{
  void *v1 = result;
  return result;
}

void sub_1000288DC(uint64_t a1@<X8>)
{
  *(void *)(v1 - 256) = a1;
}

uint64_t sub_100028908()
{
  sub_10003CA28(v0, v1);
  sub_10003CA28(v1, (_OWORD *)(v2 - 120));
  return v2 - 120;
}

void sub_100028934(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v10 - 232) = (char *)&a9 - v9;
}

uint64_t sub_100028948()
{
  return v0;
}

uint64_t sub_100028970()
{
  return v0;
}

uint64_t sub_100028990()
{
  *(unsigned char *)(v0 - 65) = 0;
  return KeyedDecodingContainer.decode(_:forKey:)();
}

uint64_t sub_1000289B4(uint64_t a1, unint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_10016AE48(v12, a2, a3, a4, v9, v11, v13, v10, a9);
}

uint64_t sub_1000289F8()
{
  return swift_retain();
}

unint64_t sub_100028A10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

void sub_100028AF4(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0x16u);
}

uint64_t sub_100028B14()
{
  return v0;
}

uint64_t sub_100028B70()
{
  return (v0 & 0xFFFFFFFFFFFFFFFLL) + 32;
}

uint64_t sub_100028B80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  *(void *)(v10 + 400) = v12;
  return sub_10016AE48(v13, v14, v17, v11, v16, v12, v15, v9, a9);
}

uint64_t sub_100028BD4(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_100028C5C(a1, a2, a3, a4, a5);
  uint64_t v9 = *(void *)(v8 + 56);
  v10(0);
  sub_10001DCF8();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t))(v11 + 32))(v9 + *(void *)(v11 + 72) * a1, a4);
  uint64_t v13 = *(void *)(a5 + 16);
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    *(void *)(a5 + 16) = v15;
  }
  return result;
}

unint64_t sub_100028C5C(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(a5 + 8 * (result >> 6) + 64) |= 1 << result;
  uint64_t v5 = (void *)(*(void *)(a5 + 48) + 16 * result);
  *uint64_t v5 = a2;
  v5[1] = a3;
  return result;
}

uint64_t sub_100028C88()
{
  return swift_unknownObjectWeakLoadStrong();
}

uint64_t sub_100028CB8()
{
  return dispatch thunk of Encoder.container<A>(keyedBy:)();
}

uint64_t sub_100028CD4()
{
  return v0;
}

uint64_t sub_100028CE4()
{
  return swift_allocObject();
}

uint64_t sub_100028CFC()
{
  return os_signpost(_:dso:log:name:signpostID:)();
}

uint64_t sub_100028D28()
{
  return v0;
}

uint64_t sub_100028D38()
{
  return v0;
}

uint64_t sub_100028D54@<X0>(uint64_t a1@<X8>)
{
  return *(void *)a1;
}

uint64_t sub_100028D9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  *(void *)uint64_t v23 = a22;
  *(void *)(v23 + 8) = a23;
  *(unsigned char *)(v23 + 41) = 12;
  return swift_willThrow();
}

uint64_t sub_100028DF4()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

uint64_t sub_100028E20()
{
  return 0;
}

void sub_100028E50()
{
  uint64_t v1 = 41;
  unint64_t v2 = 0xE100000000000000;
  String.append(_:)(*(Swift::String *)&v1);
}

void sub_100028E6C()
{
  sub_100088D64();
}

void sub_100028E84(void *a1, NSObject *a2, os_log_type_t a3, const char *a4)
{
  _os_log_impl(a1, a2, a3, a4, v4, 2u);
}

uint64_t sub_100028E9C()
{
  return swift_unknownObjectRelease();
}

uint64_t sub_100028EB4()
{
  return dispatch thunk of static Comparable.< infix(_:_:)();
}

void sub_100028ED8(uint64_t a1, uint64_t a2)
{
  Swift::UInt v3 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v3);
}

uint64_t sub_100028EF8()
{
  return v0;
}

void sub_100028F20()
{
  Hasher._combine(_:)(2uLL);
}

unint64_t sub_100028F38(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t result = sub_100028C5C(a1, a2, a3, a4, a5);
  *(void *)(*(void *)(v6 + 56) + 8 * result) = v7;
  uint64_t v8 = *(void *)(v6 + 16);
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    *(void *)(v6 + 16) = v10;
  }
  return result;
}

uint64_t type metadata accessor for ActivityMonitor.WeakReference()
{
  return self;
}

uint64_t sub_100028F88(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PegasusContext(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100028FE4(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v4 = a1 + a2[16];
  uint64_t v5 = type metadata accessor for Date();
  if (!sub_100027BA4(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v6 = (uint64_t *)(a1 + a2[23]);
  unint64_t v7 = v6[1];
  if (v7 >> 60 != 15) {
    sub_1000291B4(*v6, v7);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000291B4(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

uint64_t sub_10002920C()
{
  return type metadata accessor for OSSignpostID();
}

uint64_t sub_100029254(void *a1, int a2, uint64_t a3)
{
  return sub_100003EAC(a1, a2, a3, v3, 0);
}

uint64_t sub_100029270()
{
  return sub_10015C798();
}

void sub_1000292C8()
{
  Hasher._combine(_:)(1uLL);
}

uint64_t sub_1000292EC()
{
  return swift_retain();
}

uint64_t sub_100029304()
{
  return v0;
}

uint64_t sub_100029338()
{
  return dispatch thunk of BinaryInteger.init<A>(_:)();
}

uint64_t sub_10002935C()
{
  return v0;
}

uint64_t sub_100029370()
{
  return sub_1001798E8(v0);
}

void sub_100029388(uint64_t a1@<X8>)
{
  *(unsigned char *)(a1 + 64) = v1;
}

uint64_t sub_10002939C()
{
  return v0;
}

void sub_1000293CC(uint64_t a1@<X8>)
{
  *(unsigned char *)(*(void *)(v2 - 280) + a1) = v1;
  sub_100011708();
}

uint64_t sub_1000293E8()
{
  return v0;
}

uint64_t sub_100029414@<X0>(int a1@<W8>)
{
  return (a1 + 1);
}

void *sub_100029444(uint64_t a1)
{
  uint64_t v3 = (void *)(a1 + 16);
  return memcpy(v3, v1, 0x58uLL);
}

uint64_t sub_100029464()
{
  *(void *)(v1 - 120) = v0;
  return swift_retain();
}

uint64_t sub_100029488()
{
  return 0;
}

uint64_t sub_100029494()
{
  return v0;
}

uint64_t sub_1000294A0()
{
  return 6;
}

uint64_t sub_1000294C0()
{
  return dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
}

uint64_t sub_1000294E4()
{
  return dispatch thunk of Decoder.container<A>(keyedBy:)();
}

uint64_t sub_100029508()
{
  return v0;
}

void sub_100029518(uint64_t a1)
{
  sub_10017EED0(a1, v1, v2, v3, v4);
}

uint64_t sub_100029538()
{
  *(void *)(v0 + 24) = v1;
  return swift_unknownObjectWeakAssign();
}

uint64_t sub_100029550()
{
  return 0;
}

void sub_100029560()
{
  sub_1000EE544();
}

uint64_t sub_1000295B8(uint64_t result)
{
  *(void *)(v1 + 32) = result;
  return result;
}

uint64_t sub_1000295D0()
{
  return v0;
}

uint64_t sub_1000295E8()
{
  return v0;
}

uint64_t sub_1000295FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_100025170();
  sub_1000298B0();
  sub_1000257AC();
  sub_10002AFC0();
  sub_1000299A8();
  *uint64_t v10 = a10;
  sub_100026FB4();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100029660()
{
  return type metadata accessor for UserAgent();
}

id sub_100029688()
{
  return v0;
}

uint64_t sub_1000296AC()
{
  return type metadata accessor for DispatchPredicate();
}

uint64_t sub_1000296E0()
{
  return Apple_Parsec_Search_PegasusQueryContext.locale.setter();
}

uint64_t sub_100029734(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v16 = v9[34];
  unint64_t v17 = v9[35];
  uint64_t v18 = v9[50];
  return sub_10016AE48(v16, v17, v11, v12, v18, v14, v10, v13, a9);
}

uint64_t sub_10002976C()
{
  return v0;
}

uint64_t sub_10002977C()
{
  *(void *)(v2 - 88) = *v1;
  void *v1 = 0x8000000000000000;
  return v0;
}

uint64_t sub_1000297A0(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1000297BC()
{
  return v0;
}

uint64_t sub_1000297D8()
{
  return v0;
}

uint64_t sub_1000297EC()
{
  return sub_10002538C(v0, 1, 1, v1);
}

uint64_t sub_10002980C()
{
  return *(void *)(v0 - 312);
}

uint64_t sub_100029838(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_100093A68(a1, a2, a3, v11, v12, v9, v13, v10, a9);
}

uint64_t sub_10002985C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v18 = *(void *)(v9 + 360);
  return sub_10016AE48(v11, v16, v14, v10, v18, v12, v13, v15, a9);
}

uint64_t sub_100029894()
{
  return String.hash(into:)();
}

uint64_t sub_1000298B0()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

id sub_1000298D0()
{
  return sub_1000B06A0(v0, v1, 500, v2);
}

id sub_1000298F8(uint64_t a1)
{
  char v4 = *(const char **)(v1 + 3280);
  return objc_msgSend(v2, v4, a1);
}

uint64_t sub_100029924()
{
  return Apple_Parsec_Search_PegasusQueryContext.timeZone.setter();
}

void sub_100029960()
{
  Hasher._combine(_:)(4uLL);
}

uint64_t sub_100029978()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_100029990()
{
  return v0;
}

void sub_1000299A8()
{
  sub_10000DFE0();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  sub_1000248C4(v7, v5, v3);
  sub_100026834();
  if (v11)
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v12 = v9;
  char v13 = v10;
  sub_10002572C(v2);
  if (!sub_1000257E0()) {
    goto LABEL_5;
  }
  unint64_t v14 = sub_1000287F0(v6, v4);
  if ((v13 & 1) != (v15 & 1))
  {
LABEL_11:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v12 = v14;
LABEL_5:
  if (v13)
  {
    uint64_t v16 = *(void *)(*(void *)v0 + 56);
    swift_release();
    *(void *)(v16 + 8 * v12) = v8;
    sub_10000DFB8();
  }
  else
  {
    sub_100028864();
    sub_100028F38(v17, v18, v19, v8, v20);
    sub_10000DFB8();
    swift_bridgeObjectRetain();
  }
}

uint64_t type metadata accessor for Locker()
{
  return self;
}

{
  return self;
}

const char *sub_100029ABC(char a1)
{
  uint64_t result = "unknown";
  switch(a1)
  {
    case 1:
      uint64_t result = "parsecSession";
      break;
    case 2:
      uint64_t result = "parsecFeedbackEvent";
      break;
    case 3:
      uint64_t result = "customFeedback";
      break;
    case 4:
      uint64_t result = "batchedInstrumentation";
      break;
    case 5:
      uint64_t result = "fileInstrumentation";
      break;
    case 6:
      uint64_t result = "pegasusConfiguration";
      break;
    case 7:
      uint64_t result = "bagResource";
      break;
    case 8:
      uint64_t result = "bag";
      break;
    default:
      return result;
  }
  return result;
}

void sub_100029B70()
{
  sub_10000DFE0();
  if (qword_100218B50 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10002A10C(v1, (uint64_t)qword_100236A08);
  uint64_t v2 = v0;
  uint64_t v3 = (void *)Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (sub_100017D10(v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 67109120;
    unsigned int v34 = [*(id *)&v2[OBJC_IVAR____TtC7parsecd16ClientConnection_connection] processIdentifier];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    sub_10002E728();
    _os_log_impl(v6, v7, v8, v9, v5, 8u);
    sub_100017D40();
  }
  else
  {
  }
  uint64_t v30 = *(void *)&v2[OBJC_IVAR____TtC7parsecd16ClientConnection_timer];
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v33 = type metadata accessor for DispatchTime();
  uint64_t v31 = v26;
  sub_100020C48();
  uint64_t v11 = v10;
  __chkstk_darwin(v12);
  sub_100024A64();
  v26[1] = v26;
  uint64_t v28 = v26;
  __chkstk_darwin(v13);
  static DispatchTime.now()();
  type metadata accessor for DispatchTimeInterval();
  v26[0] = v26;
  sub_100020C48();
  uint64_t v15 = v14;
  uint64_t v32 = v2;
  uint64_t v17 = *(void *)(v16 + 64);
  __chkstk_darwin(v18);
  unint64_t v19 = (v17 + 15) & 0xFFFFFFFFFFFFFFF0;
  *(void *)((char *)v26 - v19) = 60;
  int v27 = enum case for DispatchTimeInterval.seconds(_:);
  uint64_t v20 = *(void (**)(void))(v15 + 104);
  sub_1000293A8();
  v20();
  + infix(_:_:)();
  uint64_t v21 = *(void (**)(void))(v15 + 8);
  sub_100028B20();
  v21();
  uint64_t v22 = *(void (**)(void))(v11 + 8);
  sub_100023C70();
  v22();
  sub_1000A3DA0();
  uint64_t v28 = v26;
  __chkstk_darwin(v23);
  sub_1000293A8();
  uint64_t v24 = ((uint64_t (*)(void))v20)();
  v26[0] = v26;
  __chkstk_darwin(v24);
  *(void *)((char *)v26 - v19) = 60;
  sub_1000293A8();
  v20();
  OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)();
  uint64_t v25 = v32;
  sub_100028B20();
  v21();
  sub_100028B20();
  v21();
  sub_100023C70();
  v22();
  sub_1000A3DA0();
  if ((sub_10002A144(*(unsigned int **)(*(void *)&v25[OBJC_IVAR____TtC7parsecd16ClientConnection_transactionOpen] + 16), *(void *)&v25[OBJC_IVAR____TtC7parsecd16ClientConnection_transactionOpen]) & 1) == 0)
  {
    swift_retain();
    os_transaction_create();
    sub_1000089C8();
    swift_unknownObjectRelease();
    swift_release();
  }
  sub_10000DFB8();
}

uint64_t sub_100029F24()
{
  return OSSignpostID.init(log:object:)();
}

uint64_t sub_100029F68(uint64_t result)
{
  *(void *)(v1 - 160) = result;
  return result;
}

uint64_t sub_100029F7C(uint64_t a1, unint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_10016AE48(a1, a2, a3, a4, v9, a6, v10, a8, a9);
}

void sub_100029FA8()
{
  Hasher._combine(_:)(0);
}

void sub_100029FC0(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

uint64_t sub_100029FE0(uint64_t a1)
{
  return sub_10002538C(a1, 0, 1, v1);
}

void *sub_10002A02C(void *a1)
{
  uint64_t v2 = a1[3];
  return sub_10001B620(a1, v2);
}

uint64_t sub_10002A04C()
{
  sub_100093B94(v0, v2, v1, 6);
  return sub_100093B94(v0, v2, v1, 6);
}

void sub_10002A08C()
{
  Hasher._combine(_:)(3uLL);
}

uint64_t sub_10002A0A4()
{
  return v0;
}

uint64_t sub_10002A10C(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t sub_10002A144@<X0>(unsigned int *a1@<X0>, unsigned int a2@<W8>)
{
  return a2 & 1;
}

void sub_10002A150(uint64_t a1@<X8>)
{
  Lock.lock()();
  sub_100023E18();
  uint64_t v4 = v1 + *(void *)(v3 + 96);
  sub_100017F00();
  type metadata accessor for Client();
  sub_10002A584();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a1, v4);
  Lock.unlock()();
}

uint64_t sub_10002A1E0()
{
  Lock.lock()();
  sub_100017F00();
  uint64_t v1 = *(void *)(v0 + 24);
  swift_retain();
  Lock.unlock()();
  return v1;
}

void sub_10002A230()
{
  sub_100027F28();
  sub_100025B1C();
  *(void *)(v0 + 24) = v1;
  swift_retain();
  swift_release();
  Lock.unlock()();
}

void sub_10002A280(uint64_t a1@<X8>)
{
  Lock.lock()();
  sub_100023E18();
  uint64_t v4 = v1 + *(void *)(v3 + 96);
  sub_100017F00();
  sub_10002A338(v4, a1, &qword_10021BF30);
  Lock.unlock()();
}

uint64_t sub_10002A2F4(uint64_t (*a1)(void))
{
  uint64_t result = a1(*(void *)(v1 + 16));
  if (result) {
    __break(1u);
  }
  return result;
}

Swift::Void __swiftcall Lock.unlock()()
{
}

Swift::Void __swiftcall Lock.lock()()
{
}

uint64_t sub_10002A338(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_10002572C(a3);
  sub_10002A584();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

void sub_10002A3C4()
{
  sub_100065710();
}

uint64_t sub_10002A3E8()
{
  return OS_os_log.init(subsystem:category:)();
}

uint64_t sub_10002A408()
{
  return v0;
}

BOOL sub_10002A424(os_log_type_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_log_t oslog)
{
  return os_log_type_enabled(oslog, a1);
}

uint64_t sub_10002A450()
{
  return swift_slowAlloc();
}

unint64_t sub_10002A46C@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v2 - 120) = v1;
  *(void *)(v2 - 112) = a1;
  *(void *)(v2 - 144) = 45;
  *(void *)(v2 - 136) = 0xE100000000000000;
  *(void *)(v2 - 96) = 95;
  *(void *)(v2 - 88) = 0xE100000000000000;
  return sub_100021100();
}

uint64_t sub_10002A494()
{
  return v0;
}

uint64_t sub_10002A4A0()
{
  return static OSSignpostID.exclusive.getter();
}

uint64_t sub_10002A4BC()
{
  return v0;
}

void sub_10002A4D0()
{
  uint64_t v2 = *v0;
  uint64_t v3 = v0[1];
  *(void *)(v1 - 192) = v2;
  *(void *)(v1 - 184) = v3;
  *(void *)(v1 - 152) = 45;
  *(void *)(v1 - 144) = 0xE100000000000000;
  *(void *)(v1 - 208) = 95;
  *(void *)(v1 - 200) = 0xE100000000000000;
}

void sub_10002A4F0()
{
  Incident.reportTelemetry()();
}

BOOL sub_10002A52C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v10, v11);
}

uint64_t sub_10002A54C()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t sub_10002A56C()
{
  return *(void *)(v0 + 120);
}

uint64_t sub_10002A598()
{
  return v0;
}

uint64_t sub_10002A5AC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = v2;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 0;
  return swift_willThrow();
}

uint64_t sub_10002A5CC()
{
  return swift_beginAccess();
}

uint64_t sub_10002A5E4(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10002A5F4@<X0>(char a1@<W8>)
{
  *(unsigned char *)(v1 - 96) = a1;
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

uint64_t sub_10002A618()
{
  return v0;
}

uint64_t sub_10002A634()
{
  return os_log(_:dso:log:type:_:)();
}

uint64_t sub_10002A674()
{
  return v0;
}

uint64_t sub_10002A694()
{
  return swift_unknownObjectRelease_n();
}

uint64_t sub_10002A6C0()
{
  return v0;
}

uint64_t sub_10002A708()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

void sub_10002A734()
{
  *(void *)(v2 + v0) = v1 + 1;
}

void sub_10002A74C()
{
  *(void *)(v2 + v0) = v1;
}

Swift::Int sub_10002A75C(Swift::String a1)
{
  return SQLiteRow.columnIndex(for:)(a1);
}

uint64_t sub_10002A780()
{
  return swift_beginAccess();
}

__n128 sub_10002A7A0(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_10002A7E0()
{
  return v0 + 24;
}

uint64_t sub_10002A7F4@<X0>(uint64_t a1@<X8>)
{
  return SQLiteDatabase.statement(with:verboseLog:)(0x4B4341424C4C4F52, (void *)0xE90000000000003BLL, 0, a1);
}

uint64_t sub_10002A828@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = *v1;
  uint64_t v3 = v1[1];
  uint64_t v4 = v1[2];
  *a1 = *v1;
  a1[1] = v3;
  a1[2] = v4;
  return result;
}

uint64_t sub_10002A848()
{
  return *(void *)(v0 - 96);
}

uint64_t sub_10002A85C()
{
  return v0;
}

uint64_t sub_10002A890(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  unint64_t v15 = *(void *)(v13 - 328);
  uint64_t v16 = *(void *)(v13 - 360);
  uint64_t v17 = *(void *)(v13 - 320);
  uint64_t v18 = *(void *)(v13 - 312);
  return sub_10016AE48(v10, v15, v16, v17, v18, v9, v12, v11, a9);
}

void sub_10002A8E4(uint64_t a1@<X8>)
{
  *(unsigned char *)(a1 + 64) = 0;
}

uint64_t sub_10002A8EC()
{
  return 0x656C61636F6CLL;
}

uint64_t sub_10002A900()
{
  return v0;
}

uint64_t sub_10002A918()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t type metadata accessor for BagContext()
{
  return self;
}

void *sub_10002A954(unint64_t *a1)
{
  uint64_t v2 = (unint64_t *)((char *)a1 + *(int *)(type metadata accessor for PegasusContext(0) + 80));
  unint64_t v4 = *v2;
  unint64_t v3 = v2[1];
  unint64_t v6 = a1[11];
  unint64_t v5 = a1[12];
  unint64_t v8 = *a1;
  unint64_t v7 = a1[1];
  if (v3 && v5 && v7)
  {
    if (a1[13]) {
      uint64_t v9 = (void *)a1[13];
    }
    else {
      uint64_t v9 = _swiftEmptyArrayStorage;
    }
    unint64_t v10 = a1[19];
    unint64_t v15 = a1[18];
    uint64_t v16 = v9;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100028F88((uint64_t)a1);
    uint64_t result = (void *)swift_allocObject();
    result[2] = v4;
    result[3] = v3;
    result[4] = v6;
    result[5] = v5;
    result[6] = v8;
    result[7] = v7;
    result[8] = v16;
    result[9] = v15;
    result[10] = v10;
  }
  else
  {
    sub_10002572C(&qword_100219B00);
    uint64_t inited = (__n128 *)swift_initStackObject();
    uint64_t v13 = sub_100026858(inited, (__n128)xmmword_1001A2A30);
    v13[3].n128_u64[0] = v4;
    v13[3].n128_u64[1] = v3;
    v13[4].n128_u64[0] = 0xD000000000000017;
    v13[4].n128_u64[1] = 0x80000001001B0CE0;
    v13[5].n128_u64[0] = v6;
    v13[5].n128_u64[1] = v5;
    v13[6].n128_u64[0] = 0xD000000000000010;
    v13[6].n128_u64[1] = 0x80000001001B0D00;
    v13[7].n128_u64[0] = v8;
    v13[7].n128_u64[1] = v7;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_10002572C(&qword_10021D050);
    uint64_t v14 = Dictionary.init(dictionaryLiteral:)();
    sub_100040F38(v14, 0x4373757361676550, 0xEE00747865746E6FLL);
    swift_bridgeObjectRelease();
    sub_100028F88((uint64_t)a1);
    return 0;
  }
  return result;
}

void sub_10002AB20()
{
  void (*v1)(void (*)(uint64_t *__return_ptr, uint64_t *), uint64_t, void);
  void (*v2)(void (*)(uint64_t *__return_ptr, uint64_t *), uint64_t, void);
  uint64_t *v3;
  uint64_t *v4;
  void (*v5)(void);
  void (*v6)(void);
  uint64_t v7;
  uint64_t v8;
  os_unfair_lock_s *v9;

  sub_10002AFF0();
  uint64_t v2 = v1;
  unint64_t v4 = v3;
  unint64_t v6 = v5;
  unint64_t v8 = v7;
  uint64_t v9 = *(os_unfair_lock_s **)(v0 + 16);
  os_unfair_lock_lock(v9);
  sub_10002AD10();
  sub_10002B618(v8, v6, v4, v2);
  swift_endAccess();
  os_unfair_lock_unlock(v9);
  sub_100028890();
}

void sub_10002AB9C()
{
  sub_10002AFF0();
  unint64_t v4 = v3;
  sub_100028424();
  unint64_t v5 = *(os_unfair_lock_s **)(v0 + 16);
  os_unfair_lock_lock(v5);
  sub_10002AD10();
  sub_10002B3EC(v2, v1, v4);
  swift_endAccess();
  os_unfair_lock_unlock(v5);
  sub_100028890();
}

uint64_t sub_10002AC14()
{
  return v0;
}

uint64_t sub_10002AC28(uint64_t a1)
{
  *(void *)(a1 + 24) = 0;
  return swift_unknownObjectWeakInit();
}

uint64_t sub_10002AC48@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 - 256) = a1;
  return 0;
}

uint64_t sub_10002AC58(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

uint64_t sub_10002AC68()
{
  return v0;
}

uint64_t sub_10002AC80()
{
  return OS_dispatch_queue.async(group:qos:flags:execute:)();
}

uint64_t sub_10002ACA4()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t sub_10002ACC0()
{
  return v0 - 96;
}

NSString sub_10002ACD4()
{
  return String._bridgeToObjectiveC()();
}

double sub_10002ACEC()
{
  double result = 0.0;
  *(_OWORD *)(v0 - 128) = 0u;
  *(_OWORD *)(v0 - 112) = 0u;
  return result;
}

uint64_t sub_10002ACF8(uint64_t a1)
{
  *(void *)(v1 - 136) = a1;
  return v1 - 136;
}

uint64_t sub_10002AD10()
{
  return swift_beginAccess();
}

id sub_10002AD30(id a1, SEL a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return objc_msgSend(a1, a2, v5, v6, a5, 0);
}

uint64_t sub_10002AD4C()
{
  return type metadata accessor for URL();
}

uint64_t sub_10002AD74()
{
  return swift_unknownObjectRetain();
}

void sub_10002AD8C(uint64_t a1@<X8>)
{
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = (v1 - 32) | 0x8000000000000000;
}

uint64_t sub_10002AD9C()
{
  return v0;
}

uint64_t sub_10002ADB4@<X0>(uint64_t a1@<X8>)
{
  return a1 + 8 * *(void *)(a1 + 16) + 32;
}

uint64_t sub_10002ADCC()
{
  return swift_release();
}

uint64_t sub_10002ADE8()
{
  return v0;
}

uint64_t sub_10002ADFC(uint64_t a1)
{
  *(void *)(v1 - 120) = a1;
  return v1 - 120;
}

uint64_t sub_10002AE14()
{
  uint64_t result = *(void *)(v0 + 64);
  *(void *)uint64_t v1 = 0;
  *(void *)(v1 + 8) = 0;
  *(unsigned char *)(v1 + 16) = 0;
  *(unsigned char *)(v0 + 41) = 1;
  *uint64_t v2 = 0;
  v2[1] = 0;
  return result;
}

uint64_t sub_10002AE34()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

uint64_t sub_10002AE68()
{
  return v0;
}

unint64_t sub_10002AE88(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(a5 + 8 * (result >> 6) + 64) |= 1 << result;
  uint64_t v5 = (void *)(*(void *)(a5 + 48) + 16 * result);
  *uint64_t v5 = a2;
  v5[1] = a3;
  return result;
}

uint64_t sub_10002AEBC()
{
  return v0;
}

uint64_t sub_10002AEDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(a1, a2, a3, v3, v4);
}

uint64_t sub_10002AEF8(uint64_t a1, unint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_10016AE48(a1, a2, a3, a4, a5, a6, v10, v9, a9);
}

uint64_t sub_10002AF2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_100093A68(v11, v16, v14, v9, v10, v12, v13, v15, a9);
}

uint64_t sub_10002AF5C@<X0>(char a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  return sub_10016AE48(a18, v25, v26, a11, a24, v24, a14, a17, a1);
}

uint64_t sub_10002AFA4(uint64_t a1, unsigned char *a2)
{
  *a2 = 2;
  return swift_willThrow();
}

uint64_t sub_10002AFC0()
{
  return v0;
}

uint64_t sub_10002AFD0()
{
  return sub_10002538C(v1, 1, 1, v0);
}

uint64_t sub_10002B004()
{
  return type metadata accessor for PegasusContext(0);
}

id sub_10002B020()
{
  *(void *)(v0 + 40) = v1;
  return v1;
}

uint64_t sub_10002B040()
{
  return v0;
}

unint64_t sub_10002B064(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFFFFCLL | v1 & 3;
}

uint64_t sub_10002B088()
{
  return 0;
}

uint64_t sub_10002B098(uint64_t a1, unint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_100093A68(a1, a2, a3, a4, a5, a6, v9, v10, a9);
}

void sub_10002B0B0(Swift::String a1)
{
  String.append(_:)(a1);
}

uint64_t sub_10002B0C8()
{
  return swift_beginAccess();
}

uint64_t sub_10002B0E8(__n128 a1)
{
  *(__n128 *)(v1 - 96) = a1;
  return sub_100057E18(v1 - 96);
}

uint64_t sub_10002B100()
{
  return v0 - 96;
}

_WORD *sub_10002B114(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

uint64_t sub_10002B134()
{
  return sub_100065188(0, (v0 & 0xC000000000000001) == 0, v0);
}

uint64_t sub_10002B160(uint64_t a1, unint64_t a2)
{
  return sub_10001C274(a1, a2, (uint64_t *)(v2 - 120));
}

uint64_t sub_10002B178()
{
  return v0;
}

uint64_t sub_10002B18C()
{
  return swift_dynamicCast();
}

uint64_t sub_10002B1AC()
{
  return dispatch thunk of static Comparable.<= infix(_:_:)();
}

uint64_t sub_10002B1D0(uint64_t a1)
{
  return sub_100027BA4(a1, 1, v1);
}

uint64_t sub_10002B1F0(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 8;
  *(unsigned char *)(a2 + 24) = 4;
  return swift_willThrow();
}

uint64_t sub_10002B21C(int a1, int a2, uint64_t a3, Swift::Int a4, uint64_t a5)
{
  return sub_100167280(a1, a2, a3, a4, a5 & 0xFFFFFFFFFFFFLL | 0xD000000000000000);
}

uint64_t sub_10002B224(uint64_t a1, unint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_10016AE48(a1, a2, a3, a4, v10, v11, v12, v9, a9);
}

uint64_t sub_10002B260()
{
  return swift_slowDealloc();
}

uint64_t sub_10002B27C()
{
  return v0;
}

uint64_t sub_10002B294()
{
  return v0;
}

uint64_t sub_10002B2A4(uint64_t a1, uint64_t a2)
{
  return sub_100118E90(v2, v3, a1, a2);
}

void sub_10002B2CC()
{
  *uint64_t v0 = 0x8000000000000000;
}

uint64_t sub_10002B2E0()
{
  return v0;
}

uint64_t sub_10002B2F4@<X0>(uint64_t a1@<X8>)
{
  return *(void *)(a1 - 256);
}

uint64_t sub_10002B304()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

uint64_t sub_10002B334()
{
  return *(void *)(v0 - 264);
}

uint64_t sub_10002B344()
{
  return v0;
}

uint64_t sub_10002B380()
{
  return v0;
}

uint64_t sub_10002B39C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v14 = v9[39];
  unint64_t v15 = v9[29];
  uint64_t v16 = v9[35];
  uint64_t v17 = v9[36];
  uint64_t v18 = v9[37];
  return sub_100093A68(v14, v15, v16, v10, v11, v18, v12, v17, a9);
}

uint64_t sub_10002B3CC()
{
  return sub_10016F9E8(v0, v1 - 168);
}

uint64_t sub_10002B3EC(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  void (*v4)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22[2];

  uint64_t v21 = a1;
  uint64_t v4 = *(void (**)(uint64_t *__return_ptr, uint64_t *))v3;
  uint64_t v5 = *(void *)(v3 + 8);
  if ((*(unsigned char *)(v3 + 16) & 1) == 0)
  {
    unint64_t v8 = v3;
    if (qword_100218AC8 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_10002A10C(v9, (uint64_t)qword_10021A060);
    char v10 = Logger.logObject.getter();
    uint64_t v11 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = swift_slowAlloc();
      v22[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 136446466;
      type metadata accessor for Assembly();
      sub_10002572C(&qword_10021BE08);
      uint64_t v13 = String.init<A>(describing:)();
      sub_10001C274(v13, v14, v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v12 + 12) = 2082;
      sub_10002572C(a2);
      sub_10002572C(a3);
      unint64_t v15 = String.init<A>(describing:)();
      sub_10001C274(v15, v16, v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100028AF4((void *)&_mh_execute_header, v17, v18, "AtomicValue<%{public}s, %{public}s>.init");
      swift_arrayDestroy();
      sub_100017D40();
      sub_100017D40();
    }

    v4(v22, &v21);
    sub_100085E54((uint64_t)v4, v5, 0);
    unint64_t v19 = v22[1];
    *(void *)unint64_t v8 = v22[0];
    *(void *)(v8 + 8) = v19;
    *(unsigned char *)(v8 + 16) = 1;
  }
  return swift_unknownObjectRetain();
}

uint64_t sub_10002B618(uint64_t a1, void (*a2)(void), uint64_t *a3, void (*a4)(void (*)(uint64_t *__return_ptr, uint64_t *), uint64_t, void))
{
  void (*v5)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21;

  uint64_t v20 = a1;
  uint64_t v5 = *(void (**)(uint64_t *__return_ptr, uint64_t *))v4;
  if ((*(unsigned char *)(v4 + 16) & 1) == 0)
  {
    uint64_t v9 = v4;
    char v10 = *(void *)(v4 + 8);
    if (qword_100218AC8 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_10002A10C(v11, (uint64_t)qword_10021A060);
    uint64_t v12 = Logger.logObject.getter();
    uint64_t v13 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 136446466;
      type metadata accessor for Assembly();
      sub_10002572C(&qword_10021BE08);
      unint64_t v15 = String.init<A>(describing:)();
      sub_10001C274(v15, v16, &v21);
      sub_100017EA4();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v14 + 12) = 2082;
      a4 = (void (*)(void (*)(uint64_t *__return_ptr, uint64_t *), uint64_t, void))(v14 + 14);
      a2(0);
      sub_10002572C(a3);
      uint64_t v17 = String.init<A>(describing:)();
      sub_10001C274(v17, v18, &v21);
      sub_10002ED04();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "AtomicValue<%{public}s, %{public}s>.init", (uint8_t *)v14, 0x16u);
      swift_arrayDestroy();
      sub_100017D40();
      sub_100017D40();
    }

    v5(&v21, &v20);
    a4(v5, v10, 0);
    *(void *)uint64_t v9 = v21;
    *(void *)(v9 + 8) = 0;
    *(unsigned char *)(v9 + 16) = 1;
  }
  return swift_retain();
}

uint64_t sub_10002B84C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_10002572C(a3);
  sub_10001DCF8();
  uint64_t v4 = sub_10002B8F4();
  v5(v4);
  return a2;
}

uint64_t sub_10002B8A0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_10002572C(a3);
  sub_10001DCF8();
  uint64_t v4 = sub_10002B8F4();
  v5(v4);
  return a2;
}

uint64_t sub_10002B8F4()
{
  return v0;
}

uint64_t sub_10002B910()
{
  return v0;
}

void sub_10002B91C(uint64_t a1@<X8>)
{
  *(void *)(a1 + 64) |= 1 << v1;
}

uint64_t sub_10002B934()
{
  return Apple_Parsec_Search_PegasusQueryContext.countryCode.setter();
}

uint64_t sub_10002B95C()
{
  return v0;
}

uint64_t sub_10002B974()
{
  return swift_retain();
}

uint64_t sub_10002B998()
{
  return sub_10016AE48(v4, v1, v6, v7, v0, v5, v3, v8, v2);
}

uint64_t sub_10002B9E8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_1000E2B5C(a1, a2, a3);
  sub_10001DCF8();
  sub_10002A020();
  v4();
  return v3;
}

#error "10002BD44: call analysis failed (funcsize=377)"

uint64_t sub_10002C0F4()
{
  return StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
}

uint64_t _s7SQLiter18SQLiteBaseFunctionC4nameSSSgvpfi_0()
{
  return 0;
}

uint64_t sub_10002C138()
{
  sub_10000A330(v1, v0);
  return swift_release();
}

uint64_t sub_10002C17C()
{
  return swift_allocObject();
}

uint64_t sub_10002C198()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_10002C1C0()
{
  return v0 - 128;
}

uint64_t sub_10002C1D4(uint64_t a1, uint64_t *a2)
{
  return sub_10006831C(a1, a2);
}

void sub_10002C1DC(double a1)
{
  *(double *)(v1 - 128) = a1;
}

uint64_t sub_10002C1F0(uint64_t a1)
{
  *(void *)(v2 - 160) = a1;
  _DWORD *v1 = *(_OWORD *)(v2 - 304);
  return swift_bridgeObjectRetain();
}

uint64_t sub_10002C214()
{
  return swift_allocObject();
}

uint64_t sub_10002C22C()
{
  return swift_beginAccess();
}

uint64_t sub_10002C24C()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t sub_10002C26C()
{
  return os_signpost(_:dso:log:name:signpostID:)();
}

unint64_t sub_10002C2A0()
{
  return 0xD000000000000010;
}

uint64_t sub_10002C2B4()
{
  return swift_dynamicCastObjCClass();
}

uint64_t sub_10002C2CC()
{
  return dispatch thunk of static Equatable.== infix(_:_:)();
}

uint64_t sub_10002C2EC()
{
  return v0;
}

id sub_10002C308()
{
  sub_1000EA1D8(v1, v0, 0);
  return sub_1000EA1D8(v1, v0, 0);
}

uint64_t sub_10002C3B0()
{
  return swift_beginAccess();
}

uint64_t sub_10002C3D4()
{
  return swift_allocError();
}

void sub_10002C3F4(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 0xCu);
}

uint64_t sub_10002C414(_DWORD *a1)
{
  *a1 = 0;
  return swift_bridgeObjectRelease();
}

uint64_t sub_10002C42C()
{
  return v0;
}

uint64_t sub_10002C45C()
{
  return swift_beginAccess();
}

uint64_t sub_10002C47C()
{
  return swift_beginAccess();
}

uint64_t sub_10002C4C8()
{
  return swift_allocObject();
}

uint64_t sub_10002C500()
{
  return swift_dynamicCast();
}

char *sub_10002C530@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  return (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

double sub_10002C550()
{
  double result = 0.0;
  *(_OWORD *)(v0 + 8) = 0u;
  *(_OWORD *)(v0 + 24) = 0u;
  return result;
}

uint64_t sub_10002C564()
{
  return v0;
}

uint64_t sub_10002C578()
{
  return v0;
}

uint64_t sub_10002C5B0()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t sub_10002C5D8()
{
  return Dictionary.init(dictionaryLiteral:)();
}

unint64_t sub_10002C5F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000287F0(a2, a3);
}

uint64_t sub_10002C634()
{
  return v0;
}

uint64_t sub_10002C640()
{
  return swift_beginAccess();
}

uint64_t sub_10002C660()
{
  return v0;
}

uint64_t sub_10002C6A4()
{
  return swift_beginAccess();
}

uint64_t sub_10002C6C4()
{
  return swift_getAssociatedTypeWitness();
}

void sub_10002C6DC(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = (v2 - 32) | 0x8000000000000000;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 3;
}

uint64_t sub_10002C6F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10002538C(a2, 1, 1, a1);
}

uint64_t sub_10002C73C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10015FAF8(a1, a2, a3, v6, v3, v4, v5);
}

uint64_t sub_10002C760()
{
  return v0;
}

uint64_t sub_10002C780(uint64_t a1, unint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_10016AE48(a1, a2, a3, a4, a5, v10, v11, v9, a9);
}

uint64_t sub_10002C7E4(uint64_t a1, unint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_100093A68(a1, a2, a3, a4, v12, v11, v10, v9, a9);
}

uint64_t sub_10002C804(uint64_t a1, unint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_10016AE48(a1, a2, a3, a4, a5, v11, v9, v10, a9);
}

void sub_10002C820(uint64_t a1@<X8>)
{
  *(void *)(v1 + 16) = a1;
}

uint64_t sub_10002C82C()
{
  return v0;
}

uint64_t sub_10002C850()
{
  return 0x6B63616264656566;
}

uint64_t sub_10002C878()
{
  return v0;
}

uint64_t sub_10002C88C()
{
  return v0;
}

void sub_10002C8A4(void *a1, unsigned char *a2, uint64_t a3)
{
  id v7 = v3;
  uint64_t v8 = NSData.startIndex.getter();

  uint64_t v23 = a2;
  if (!a2 || !a3) {
    goto LABEL_5;
  }
  if (a3 < 0)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if (v8 == NSData.endIndex.getter())
  {
LABEL_5:
    *a1 = v7;
    a1[1] = v8;
    return;
  }
  char v9 = NSData.subscript.getter();
  id v10 = v7;
  uint64_t v11 = NSData.startIndex.getter();
  uint64_t v12 = NSData.endIndex.getter();

  if (v8 >= v11 && v8 < v12)
  {
    *a2 = v9;
    if (a3 == 1)
    {
      ++v8;
      goto LABEL_5;
    }
    uint64_t v22 = a1;
    uint64_t v14 = 1;
    while (a3 != v14)
    {
      uint64_t v15 = v8 + v14;
      if (v8 + v14 == NSData.endIndex.getter())
      {
        v8 += v14;
        goto LABEL_24;
      }
      char v16 = NSData.subscript.getter();
      id v17 = v10;
      uint64_t v18 = NSData.startIndex.getter();
      uint64_t v19 = NSData.endIndex.getter();

      if (v15 < v18 || v15 >= v19) {
        goto LABEL_26;
      }
      uint64_t v21 = v14 + 1;
      v23[v14] = v16;
      uint64_t v14 = v21;
      if (a3 == v21)
      {
        v8 += v21;
LABEL_24:
        a1 = v22;
        goto LABEL_5;
      }
    }
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
LABEL_28:
  __break(1u);
}

uint64_t sub_10002CA2C(uint64_t a1, uint64_t a2)
{
  sub_10002572C(&qword_10021AD48);
  type metadata accessor for PegasusClientName();
  sub_100020C48();
  uint64_t v5 = v4;
  uint64_t v7 = *(void *)(v6 + 72);
  char v8 = (*(unsigned char *)(v4 + 80) + 32) & ~*(unsigned char *)(v4 + 80);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_1001A4CF0;
  char v10 = v9 + v8;
  uint64_t v11 = *(void (**)(void))(v5 + 104);
  sub_10002440C();
  v11();
  char v12 = v9 + v8 + v7;
  sub_10002440C();
  v11();
  char v13 = v9 + v8 + 2 * v7;
  sub_10002440C();
  v11();
  sub_10002440C();
  v11();
  sub_10002440C();
  v11();
  sub_10002440C();
  v11();
  swift_bridgeObjectRetain();
  if (PegasusClientName.rawValue.getter() == a1 && v14 == a2) {
    goto LABEL_33;
  }
  sub_10002A54C();
  sub_100020CD0();
  if (v10) {
    goto LABEL_34;
  }
  if (PegasusClientName.rawValue.getter() == a1 && v16 == a2) {
    goto LABEL_33;
  }
  sub_10002A54C();
  sub_100020CD0();
  if (v12) {
    goto LABEL_34;
  }
  if (PegasusClientName.rawValue.getter() == a1 && v18 == a2) {
    goto LABEL_33;
  }
  sub_10002A54C();
  sub_100020CD0();
  if (v13) {
    goto LABEL_34;
  }
  if (PegasusClientName.rawValue.getter() == a1 && v20 == a2) {
    goto LABEL_33;
  }
  sub_10002A54C();
  sub_100020CD0();
  if ((v10 + 3 * (_BYTE)v7)) {
    goto LABEL_34;
  }
  if (PegasusClientName.rawValue.getter() == a1 && v22 == a2) {
    goto LABEL_33;
  }
  sub_10002A54C();
  sub_100020CD0();
  if ((v10 + 4 * (_BYTE)v7)) {
    goto LABEL_34;
  }
  if (PegasusClientName.rawValue.getter() == a1 && v24 == a2)
  {
LABEL_33:
    swift_bridgeObjectRelease();
LABEL_34:
    swift_bridgeObjectRelease();
    goto LABEL_35;
  }
  char v26 = sub_10002A54C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v26 & 1) == 0)
  {
    swift_setDeallocating();
    sub_10000480C();
    return 0;
  }
LABEL_35:
  swift_setDeallocating();
  sub_10000480C();

  return sub_1000111F0();
}

uint64_t sub_10002CCE0()
{
  return swift_beginAccess();
}

uint64_t sub_10002CD00()
{
  return swift_dynamicCast();
}

uint64_t sub_10002CD30()
{
  type metadata accessor for SessionTokens(0);
  return type metadata accessor for UUID();
}

uint64_t sub_10002CD64()
{
  return v0;
}

uint64_t sub_10002CD84()
{
  return v0;
}

void sub_10002CD98()
{
  uint64_t v2 = *(os_unfair_lock_s **)(*(void *)(v0 + 32) + 16);
  os_unfair_lock_lock(v2);
}

uint64_t sub_10002CDBC()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)();
}

uint64_t sub_10002CDE8()
{
  return v0;
}

uint64_t sub_10002CE04()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_10002CE1C()
{
  return *(void *)(v0 - 264);
}

void sub_10002CE34()
{
  os_unfair_lock_lock(v0 + 6);
}

uint64_t sub_10002CE50()
{
  return v0;
}

uint64_t sub_10002CE64@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 208) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return 0;
}

uint64_t sub_10002CE94(uint64_t a1, unint64_t a2)
{
  return sub_10001C274(a1, a2, (uint64_t *)(v2 - 72));
}

unint64_t sub_10002CEB8()
{
  return sub_1000287F0(v1, v0);
}

uint64_t sub_10002CEEC()
{
  return dispatch thunk of static Comparable.< infix(_:_:)();
}

uint64_t sub_10002CF10()
{
  return v0;
}

__n128 sub_10002CF24()
{
  return *(__n128 *)v0;
}

uint64_t sub_10002CF3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_100093A68(v13, v12, v9, v11, v15, v14, v10, v16, a9);
}

double sub_10002CF74()
{
  *(void *)uint64_t v0 = v1;
  double result = 0.0;
  *(_OWORD *)(v0 + 8) = 0u;
  *(_OWORD *)(v0 + 24) = 0u;
  *(_OWORD *)(v0 + 40) = 0u;
  *(void *)(v0 + 56) = 0;
  *(unsigned char *)(v0 + 64) = 4;
  return result;
}

uint64_t sub_10002CF98()
{
  type metadata accessor for BaseBiomeTable.BiomeConnection();
  return swift_dynamicCastClass();
}

uint64_t sub_10002CFD0(__n128 a1, uint64_t a2, __n128 *a3)
{
  *a3 = a1;
  return swift_willThrow();
}

uint64_t sub_10002CFE8()
{
  return v0;
}

uint64_t sub_10002CFFC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_10001C274(v4, v3, a3);
}

void sub_10002D014()
{
  sub_10000DFE0();
  unint64_t v3 = v0;
  uint64_t v72 = v4;
  uint64_t v6 = v5;
  uint64_t v7 = sub_10002572C(&qword_100219ED0);
  uint64_t v8 = sub_100016544(v7);
  __chkstk_darwin(v8);
  sub_100024ADC();
  uint64_t v73 = (void *)type metadata accessor for UserAgent();
  sub_100020C48();
  uint64_t v71 = v9;
  __chkstk_darwin(v10);
  uint64_t v68 = v11;
  uint64_t v70 = (char *)v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for SessionType();
  uint64_t v13 = sub_100016544(v12);
  __chkstk_darwin(v13);
  sub_100017DC8();
  uint64_t v14 = type metadata accessor for SessionTokens(0);
  __chkstk_darwin(v14);
  sub_100024A64();
  uint64_t v17 = v15 - v16;
  __chkstk_darwin(v18);
  uint64_t v74 = (uint64_t)v61 - v19;
  type metadata accessor for DispatchPredicate();
  sub_100020C48();
  uint64_t v21 = v20;
  __chkstk_darwin(v22);
  sub_100021208();
  uint64_t v23 = (void *)v0[6];
  *uint64_t v2 = v23;
  sub_100023D14();
  v24();
  id v69 = v23;
  unint64_t v25 = _dispatchPreconditionTest(_:)();
  uint64_t v26 = v21 + 8;
  sub_100027EC0();
  v27();
  if ((v25 & 1) == 0)
  {
    __break(1u);
LABEL_12:
    swift_once();
    goto LABEL_6;
  }
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (!Strong) {
    goto LABEL_10;
  }
  uint64_t v26 = Strong;
  uint64_t v64 = (void *)v17;
  sub_1000047BC();
  uint64_t v17 = v74;
  sub_10000EE00(v6 != 0, v74);
  uint64_t v29 = v0[7];
  uint64_t v2 = (void *)v3[8];
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  uint64_t v63 = (void *)v29;
  SessionType.init(withClientIdentifier:)();
  uint64_t v65 = *(void *)(v71 + 16);
  uint64_t v66 = v71 + 16;
  sub_100016608();
  v30();
  sub_10002D8D8(v17, v1);
  sub_10002538C(v1, 0, 1, v14);
  type metadata accessor for ClientSession(0);
  swift_allocObject();
  id v31 = v6;
  sub_100013318();
  uint64_t v33 = &off_1001FB7F8;
  if (!v32) {
    uint64_t v33 = 0;
  }
  v3[2] = v32;
  v3[3] = v33;
  swift_unknownObjectRelease();
  uint64_t v6 = (void *)sub_100006474();
  unint64_t v25 = v34;
  if (qword_100218B38 != -1) {
    goto LABEL_12;
  }
LABEL_6:
  uint64_t v67 = v26;
  uint64_t v35 = type metadata accessor for Logger();
  sub_10002A10C(v35, (uint64_t)qword_1002369C0);
  uint64_t v36 = v17;
  uint64_t v37 = (uint64_t)v64;
  sub_10002D8D8(v36, (uint64_t)v64);
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  uint64_t v38 = Logger.logObject.getter();
  os_log_type_t v39 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v38, v39))
  {
    uint64_t v40 = sub_10001AB54();
    uint64_t v62 = swift_slowAlloc();
    v76[0] = v62;
    *(_DWORD *)uint64_t v40 = 136315650;
    swift_bridgeObjectRetain();
    uint64_t v77 = sub_10001C274((uint64_t)v6, v25, v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v40 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v77 = sub_10001C274((uint64_t)v63, (unint64_t)v2, v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v40 + 22) = 2048;
    Date.timeIntervalSinceNow.getter();
    uint64_t v77 = v41;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_100027C78(v37, (void (*)(void))type metadata accessor for SessionTokens);
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "new session id %s %s guidStarted: %f", (uint8_t *)v40, 0x20u);
    swift_arrayDestroy();
    sub_100017D40();
    sub_100017D40();
  }
  else
  {
    swift_release_n();
    swift_bridgeObjectRelease_n();
    sub_100027C78(v37, (void (*)(void))type metadata accessor for SessionTokens);
  }

  sub_100017F00();
  sub_10001B620(v3 + 12, v3[15]);
  uint64_t v64 = v61;
  sub_100026808();
  __chkstk_darwin(v42);
  sub_100024F80();
  sub_100016608();
  v43();
  uint64_t v62 = type metadata accessor for DispatchTime();
  uint64_t v63 = v61;
  sub_100020C48();
  v61[1] = v44;
  __chkstk_darwin(v45);
  sub_10000E04C();
  v61[0] = v46;
  sub_100006CBC();
  sub_100025454();
  v47();
  uint64_t v48 = sub_100023CE4();
  swift_weakInit();
  uint64_t v49 = v70;
  uint64_t v50 = v73;
  sub_100016608();
  v51();
  uint64_t v52 = v71;
  unint64_t v53 = (*(unsigned __int8 *)(v71 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v71 + 80);
  id v54 = (char *)swift_allocObject();
  *((void *)v54 + 2) = v48;
  *((void *)v54 + 3) = v6;
  *((void *)v54 + 4) = v25;
  (*(void (**)(char *, char *, void *))(v52 + 32))(&v54[v53], v49, v50);
  v76[4] = (uint64_t)sub_1000E9644;
  v76[5] = (uint64_t)v54;
  v76[0] = (uint64_t)_NSConcreteStackBlock;
  v76[1] = 1107296256;
  v76[2] = (uint64_t)sub_1000085EC;
  v76[3] = (uint64_t)&unk_100200260;
  os_log_type_t v55 = _Block_copy(v76);
  type metadata accessor for DispatchQoS();
  uint64_t v73 = v61;
  sub_100020C48();
  __chkstk_darwin(v56);
  sub_100021CFC();
  static DispatchQoS.unspecified.getter();
  type metadata accessor for DispatchWorkItemFlags();
  uint64_t v72 = v61;
  sub_100020C48();
  __chkstk_darwin(v57);
  sub_100017CD4();
  id v75 = _swiftEmptyArrayStorage;
  sub_10003045C();
  sub_10002572C((uint64_t *)&unk_10021BAF0);
  sub_1000301A0();
  sub_100029324();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
  _Block_release(v55);
  swift_unknownObjectRelease();
  sub_1000283AC();
  v58();
  sub_100025454();
  v59();
  sub_10000E040();
  v60();
  sub_100027C78(v74, (void (*)(void))type metadata accessor for SessionTokens);
  swift_release();
  swift_release();
LABEL_10:
  sub_10000DFB8();
}

uint64_t sub_10002D8D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SessionTokens(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002D93C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRetain();
  return a1;
}

void sub_10002DA0C()
{
  sub_100017EC4();
  uint64_t v2 = v0;
  type metadata accessor for BiomeStreamConfig();
  sub_100020C48();
  __chkstk_darwin(v3);
  sub_10000DFD0();
  type metadata accessor for FeedbackStoreConfig();
  sub_100020C48();
  uint64_t v41 = v5;
  uint64_t v42 = v4;
  __chkstk_darwin(v4);
  sub_10000E04C();
  uint64_t v43 = v6;
  uint64_t v7 = sub_10002572C(&qword_100224500);
  __chkstk_darwin(v7 - 8);
  sub_10000DFD0();
  uint64_t v10 = v9 - v8;
  uint64_t v11 = type metadata accessor for FeedbackStreamDescriptor();
  sub_100020C48();
  uint64_t v13 = v12;
  __chkstk_darwin(v14);
  sub_10000DFD0();
  uint64_t v17 = v16 - v15;
  swift_beginAccess();
  uint64_t v18 = *(void *)(v0 + 16);
  if (*(void *)(v18 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v19 = sub_100019A28();
    if (v20)
    {
      *(id *)(*(void *)(v18 + 56) + 8 * v19);
      swift_bridgeObjectRelease();
      goto LABEL_10;
    }
    swift_bridgeObjectRelease();
  }
  SessionType.biomeStreamDescriptor.getter();
  if (sub_100027BA4(v10, 1, v11) == 1)
  {
    sub_100019994(v10, &qword_100224500);
    sub_10018FF34();
    sub_100024A30();
    *uint64_t v21 = xmmword_1001A9580;
    swift_willThrow();
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32))(v17, v10, v11);
    uint64_t v22 = *(void **)(v2 + 32);
    sub_10002572C(&qword_1002251A0);
    unint64_t v23 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
    uint64_t v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = xmmword_1001A2A20;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v13 + 16))(v24 + v23, v17, v11);
    id v25 = v22;
    FeedbackStoreConfig.init(fileManager:streams:)();
    if (!v1)
    {
      uint64_t v26 = FeedbackStreamDescriptor.rawValue.getter();
      uint64_t v28 = v27;
      FeedbackStoreConfig.getConfig(forStream:)();
      id v31 = (void *)BiomeStreamConfig.storeConfig.getter();
      sub_10000E040();
      v32();
      uint64_t v33 = type metadata accessor for RawPayload();
      id v34 = objc_allocWithZone((Class)BMStreamDatastoreWriter);
      id v35 = sub_10000C4EC(v26, v28, v31, v33);
      if (v35)
      {
        uint64_t v36 = v35;
        swift_beginAccess();
        v36;
        sub_100030374();
        swift_endAccess();
        sub_10000E040();
        v37();
        uint64_t v38 = sub_10002E07C();
        v39(v38);
        goto LABEL_10;
      }
      sub_10018FF34();
      sub_100024A30();
      *uint64_t v40 = xmmword_1001A5AD0;
      swift_willThrow();
      (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v43, v42);
    }
    uint64_t v29 = sub_10002E07C();
    v30(v29);
  }
LABEL_10:
  sub_100024A18();
}

uint64_t sub_10002DE10()
{
  return swift_weakLoadStrong();
}

void sub_10002DE38()
{
  _StringGuts.grow(_:)(16);
}

void sub_10002DE58(uint64_t a1@<X8>)
{
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = 2 * (a1 / v1);
}

uint64_t sub_10002DE68()
{
  return v0;
}

uint64_t sub_10002DE7C(uint64_t result)
{
  *(void *)(v2 - 104) = v1;
  *(void *)(v2 - 128) = result;
  return result;
}

unint64_t sub_10002DE88(float a1)
{
  *uint64_t v2 = a1;
  int v4 = *(_DWORD *)(v1 + 40);
  return sub_1000757AC(v4);
}

uint64_t sub_10002DEA8()
{
  return v0;
}

uint64_t sub_10002DEC4()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

void sub_10002DEF0(uint64_t a1@<X8>)
{
  *(void *)(v2 + a1) |= v1;
  uint64_t v7 = (void *)(*(void *)(v3 + 48) + 16 * v4);
  *uint64_t v7 = v5;
  v7[1] = v6;
}

uint64_t sub_10002DF14()
{
  *(void *)(v1 - 120) = v0;
  return v0;
}

uint64_t sub_10002DF24()
{
  return v0;
}

uint64_t sub_10002DF54()
{
  return v0;
}

uint64_t sub_10002DF6C()
{
  return v0;
}

uint64_t sub_10002DF84()
{
  sub_10015A10C();
  return v0;
}

__n128 sub_10002DFB0()
{
  long long v2 = *(_OWORD *)(v0 + 16);
  *(_OWORD *)uint64_t v1 = *(_OWORD *)v0;
  *(_OWORD *)(v1 + 16) = v2;
  __n128 result = *(__n128 *)(v0 + 25);
  *(__n128 *)(v1 + 25) = result;
  return result;
}

uint64_t sub_10002DFC4@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 - 40) = a1 & 0x3FFFFFFFFFFFFFFFLL;
  return swift_retain();
}

uint64_t sub_10002DFE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_100093A68(v16, v13, v9, v11, v14, v12, v10, v15, a9);
}

uint64_t sub_10002E020(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  *(_OWORD *)(v50 - 240) = *v49;
  return a49;
}

uint64_t sub_10002E044()
{
  return swift_beginAccess();
}

uint64_t sub_10002E064()
{
  return v0;
}

uint64_t sub_10002E07C()
{
  return v0;
}

uint64_t sub_10002E0A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10002E0B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10002E0C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10002E0D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10002E0E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10002E0F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10002E104(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10002E114(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10002E124(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10002E134(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10002E144(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10002E154(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10002E164(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10002E174(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10002E184(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10002E194(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10002E1A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10002E1B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10002E1C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10002E1D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10002E1E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10002E1F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10002E204(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10002E214(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10002E224(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10002E234(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10002E244(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10002E254(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10002E264()
{
  return swift_release();
}

uint64_t sub_10002E26C()
{
  return swift_release();
}

uint64_t sub_10002E274()
{
  return swift_release();
}

uint64_t sub_10002E27C()
{
  return swift_release();
}

uint64_t sub_10002E284()
{
  return swift_release();
}

uint64_t sub_10002E28C()
{
  return swift_release();
}

uint64_t sub_10002E294()
{
  return swift_release();
}

uint64_t sub_10002E29C()
{
  return swift_release();
}

uint64_t sub_10002E2A4()
{
  return swift_release();
}

uint64_t sub_10002E2AC()
{
  return swift_release();
}

uint64_t sub_10002E2B4()
{
  return swift_release();
}

uint64_t sub_10002E2BC()
{
  return swift_release();
}

uint64_t sub_10002E2C4()
{
  return swift_release();
}

uint64_t sub_10002E2CC()
{
  return swift_release();
}

uint64_t sub_10002E2D4()
{
  return swift_release();
}

uint64_t sub_10002E2DC()
{
  return swift_release();
}

uint64_t sub_10002E2E4()
{
  return swift_release();
}

uint64_t sub_10002E2EC()
{
  return swift_release();
}

uint64_t sub_10002E2F4()
{
  return swift_release();
}

uint64_t sub_10002E2FC()
{
  return swift_release();
}

uint64_t sub_10002E304()
{
  return swift_release();
}

uint64_t sub_10002E30C()
{
  return swift_release();
}

uint64_t sub_10002E314()
{
  return swift_release();
}

uint64_t sub_10002E31C()
{
  return swift_release();
}

uint64_t sub_10002E324()
{
  return swift_release();
}

uint64_t sub_10002E32C()
{
  return swift_release();
}

uint64_t sub_10002E334()
{
  return swift_release();
}

uint64_t sub_10002E33C()
{
  return swift_release();
}

unsigned char *initializeBufferWithCopyOfBuffer for EngagedCompletionCacheClient(unsigned char *result, unsigned char *a2)
{
  *__n128 result = *a2;
  return result;
}

void type metadata accessor for FileAttributeKey(uint64_t a1)
{
}

void sub_10002E378(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t sub_10002E3C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[10] = a5;
  v6[11] = a6;
  v6[9] = a4;
  return _swift_task_switch(sub_1000142AC, 0, 0);
}

uint64_t sub_10002E410()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10002E458()
{
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10002E49C(uint64_t a1)
{
  if (swift_conformsToProtocol2()) {
    return a1;
  }
  else {
    return 0;
  }
}

uint64_t sub_10002E4E0(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_10002E4E8(char a1)
{
  __n128 result = malloc_type_malloc(1uLL, 0x100004077774924uLL);
  *__n128 result = a1;
  return result;
}

uint64_t sub_10002E598(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t *sub_10002E5E8(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t sub_10002E64C()
{
  return v0;
}

void sub_10002E664()
{
  *(void *)(v0 + 56) = v1;
}

uint64_t sub_10002E678()
{
  return v0;
}

uint64_t sub_10002E6AC()
{
  return v0;
}

__n128 *sub_10002E6C0(__n128 *result, __n128 a2)
{
  result[1] = a2;
  return result;
}

Swift::Int sub_10002E6D8()
{
  v3._rawValue = *(void **)(v0 + 480);
  *((void *)v3._rawValue + 2) = v1 + 1;
  *((unsigned char *)v3._rawValue + v1 + 32) = 0;
  return ByteBuffer.writeBytes(_:)(v3);
}

uint64_t sub_10002E704()
{
  *(void *)(v1 - 96) = v0;
  return dispatch thunk of Hashable._rawHashValue(seed:)();
}

uint64_t sub_10002E734()
{
  return v0;
}

uint64_t sub_10002E764()
{
  return v0;
}

uint64_t sub_10002E784()
{
  return v0;
}

uint64_t sub_10002E7A0()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_10002E7C0()
{
  return swift_unknownObjectRetain();
}

uint64_t sub_10002E7E8()
{
  return v0;
}

uint64_t sub_10002E7FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_100093A68(v16, v13, v12, v11, v9, v10, v15, v14, a9);
}

uint64_t sub_10002E82C()
{
  return v0;
}

uint64_t sub_10002E838()
{
  return 0;
}

uint64_t sub_10002E854()
{
  return v0;
}

uint64_t sub_10002E860()
{
  return type metadata accessor for Lock();
}

uint64_t sub_10002E87C(uint64_t result)
{
  *(void *)(v1 - 144) = result;
  return result;
}

uint64_t sub_10002E888()
{
  return v0;
}

uint64_t sub_10002E89C()
{
  return dispatch thunk of Decoder.singleValueContainer()();
}

uint64_t sub_10002E8BC()
{
  return v0;
}

uint64_t sub_10002E8E0()
{
  return v0;
}

_WORD *sub_10002E8F0(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

uint64_t sub_10002E8FC()
{
  return AnyHashable.init<A>(_:)();
}

uint64_t sub_10002E91C()
{
  return v0;
}

void sub_10002E928()
{
  *(void *)(v1 - 344) = v0;
}

uint64_t sub_10002E93C()
{
  return v0;
}

uint64_t sub_10002E950()
{
  uint64_t result = v2;
  *(void *)(v1 + 416) = v0;
  return result;
}

uint64_t sub_10002E978()
{
  return 0;
}

uint64_t sub_10002E98C()
{
  return v0;
}

uint64_t sub_10002E998()
{
  return v0;
}

uint64_t sub_10002E9B4()
{
  return v0;
}

uint64_t sub_10002E9D4()
{
  return v0;
}

uint64_t sub_10002EA04()
{
  return v0;
}

uint64_t sub_10002EA1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_100093A68(v11, v10, v14, v13, v16, v15, v12, v9, a9);
}

uint64_t sub_10002EA54()
{
  return v0;
}

uint64_t sub_10002EA6C()
{
  return v0;
}

uint64_t sub_10002EA78()
{
  return v0;
}

uint64_t sub_10002EA94()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

id sub_10002EAAC()
{
  return sub_1000B06A0(v0, v1, 1, v2);
}

uint64_t sub_10002EAE8()
{
  return Apple_Parsec_Search_PegasusQueryContext.countryCode.setter();
}

void sub_10002EB24()
{
  Hasher._combine(_:)(3uLL);
}

uint64_t sub_10002EB3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_100093A68(v16, v13, v15, v11, v14, v12, v10, v9, a9);
}

void sub_10002EB74()
{
  *(void *)uint64_t v0 = v1;
  *(void *)(v0 + 8) = v2;
  *(void *)(v0 + 16) = v3;
  *(void *)(v0 + 24) = v4;
  *(void *)(v0 + 32) = v5;
  *(void *)(v0 + 40) = v6;
  *(void *)(v0 + 48) = v7;
  *(void *)(v0 + 56) = v8;
  *(unsigned char *)(v0 + 64) = v9;
}

id sub_10002EB8C()
{
  return sub_1000B06A0(v0, v1, 99, v2);
}

uint64_t sub_10002EBB4(uint64_t a1)
{
  *(void *)(v1 - 104) = a1;
  return v1 - 104;
}

uint64_t sub_10002EBDC()
{
  return Apple_Parsec_Search_PegasusQueryContext.storeFront.setter();
}

uint64_t sub_10002EC0C()
{
  return v0;
}

uint64_t sub_10002EC28()
{
  return swift_retain();
}

uint64_t sub_10002EC44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v16 = v9[30];
  uint64_t v17 = v9[31];
  uint64_t v18 = v9[38];
  return sub_10016AE48(v13, v10, v14, v12, v11, v16, v17, v18, a9);
}

uint64_t sub_10002EC7C()
{
  return v0;
}

uint64_t sub_10002ECB8()
{
  return v0;
}

void sub_10002ECC4(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

uint64_t sub_10002ECE4()
{
  return v0;
}

uint64_t sub_10002ED04()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

void sub_10002ED28()
{
  *(void *)(v1 - 104) = v0 + 56;
}

BOOL sub_10002ED64(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v10, v11);
}

uint64_t sub_10002ED84()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10002ED94(uint64_t a1)
{
  *(void *)(v1 - 128) = a1;
  return v1 - 128;
}

void sub_10002EDA8()
{
  *uint64_t v0 = v1;
  v0[1] = v2;
}

uint64_t sub_10002EDE8()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_10002EE20()
{
  return 0x656C62756F64;
}

uint64_t sub_10002EE34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v16 = v9[33];
  uint64_t v17 = v9[42];
  uint64_t v18 = v9[29];
  return sub_100093A68(v16, v11, v10, v17, v12, v14, v18, v13, a9);
}

uint64_t sub_10002EE7C(uint64_t a1, unint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_100093A68(a1, a2, a3, a4, a5, v11, v9, v10, a9);
}

uint64_t sub_10002EE98()
{
  return swift_arrayDestroy();
}

uint64_t sub_10002EEC0()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_10002EED8()
{
  return *(void *)(v0 + 456);
}

uint64_t sub_10002EF04()
{
  return v0;
}

uint64_t sub_10002EF10(uint64_t a1, unint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_10016AE48(a1, a2, a3, a4, v10, v9, a7, a8, a9);
}

uint64_t sub_10002EF30()
{
  return type metadata accessor for UserAgent();
}

uint64_t sub_10002EF6C()
{
  return swift_task_dealloc();
}

uint64_t sub_10002EFA4()
{
  return swift_task_dealloc();
}

uint64_t sub_10002EFCC()
{
  return v0;
}

id sub_10002EFDC(uint64_t a1, const char *a2)
{
  uint64_t v4 = *(void **)(v2 - 264);
  return [v4 a2];
}

uint64_t sub_10002EFF4()
{
  uint64_t v3 = *(void *)(*(void *)(v0 + 480) + 16);
  return sub_10017998C(v3, v1);
}

uint64_t sub_10002F018()
{
  return 0;
}

uint64_t sub_10002F02C@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 272) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return type metadata accessor for SessionTokens(0);
}

uint64_t sub_10002F05C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_100093A68(a1, a2, v11, v9, v12, v13, v14, v10, a9);
}

uint64_t sub_10002F084()
{
  return v0;
}

uint64_t sub_10002F090()
{
  return swift_allocObject();
}

uint64_t sub_10002F0A8()
{
  return v0;
}

void sub_10002F0B4()
{
}

void sub_10002F0C8()
{
}

uint64_t sub_10002F0FC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v11 = sub_1000287F0(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v12 & 1) == 0;
  Swift::Int v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v16 = v11;
  char v17 = v12;
  sub_10002572C(&qword_1002263B0);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v15)) {
    goto LABEL_5;
  }
  unint64_t v18 = sub_1000287F0(a2, a3);
  if ((v17 & 1) != (v19 & 1))
  {
LABEL_11:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v16 = v18;
LABEL_5:
  char v20 = *v5;
  if (v17)
  {
    uint64_t v21 = v20[7];
    uint64_t result = swift_release();
    *(void *)(v21 + 8 * v16) = a1;
  }
  else
  {
    sub_10002F224(v16, a2, a3, a1, v20);
    return swift_bridgeObjectRetain();
  }
  return result;
}

unint64_t sub_10002F224(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1 << result;
  uint64_t v5 = (void *)(a5[6] + 16 * result);
  *uint64_t v5 = a2;
  v5[1] = a3;
  *(void *)(a5[7] + 8 * result) = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

uint64_t sub_10002F26C(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for SessionType();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

void sub_10002F324()
{
  sub_1000213D8();
  uint64_t v2 = v1;
  unint64_t v4 = v3;
  if (v3 >> 62)
  {
    sub_100025A18();
    _CocoaArrayWrapper.endIndex.getter();
    sub_1000281E4();
  }
  else
  {
    sub_100018574();
  }
  if (!v0)
  {
LABEL_12:
    sub_10000E178();
    return;
  }
  sub_1000EE4A4(0, v0 & ~(v0 >> 63), 0);
  if ((v0 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = 0;
    do
    {
      if ((v4 & 0xC000000000000001) != 0) {
        uint64_t v6 = sub_10002CDBC();
      }
      else {
        uint64_t v6 = (uint64_t)sub_1000243D4();
      }
      uint64_t v7 = v6;
      unint64_t v9 = _swiftEmptyArrayStorage[2];
      unint64_t v8 = _swiftEmptyArrayStorage[3];
      if (v9 >= v8 >> 1) {
        sub_1000EE4A4(v8 > 1, v9 + 1, 1);
      }
      ++v5;
      _swiftEmptyArrayStorage[2] = v9 + 1;
      uint64_t v10 = (char *)&_swiftEmptyArrayStorage[2 * v9];
      *((void *)v10 + 4) = v7;
      *((void *)v10 + 5) = v2;
    }
    while (v0 != v5);
    goto LABEL_12;
  }
  __break(1u);
}

void sub_10002F418()
{
}

void sub_10002F440()
{
  sub_100026FEC();
  if (v6)
  {
    sub_1000212E4();
    if (v7 != v8)
    {
      sub_10002A3A8();
      if (v7)
      {
        __break(1u);
        return;
      }
      sub_1000268F0();
    }
  }
  sub_10002CD74();
  if (v5)
  {
    sub_10002572C(v9);
    uint64_t v10 = (char *)sub_10001659C();
    size_t v11 = j__malloc_size(v10);
    sub_10002DE58(v11 - 32);
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  if (v3)
  {
    v2(v0 + 32, v4, v10 + 32);
    sub_100024944();
  }
  else
  {
    uint64_t v12 = sub_100027DD4();
    sub_10000665C(v12, v13, v14, v15, v1);
  }
}

uint64_t sub_10002F4FC(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v31 = a1;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = *(void *)(*v3 + 16);
  unint64_t v11 = *(void *)(*v3 + 24);
  uint64_t v28 = v3;
  uint64_t v29 = v7;
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_1000909BC();
  }
  else
  {
    if (v11 > v10)
    {
      sub_1000913C0();
      goto LABEL_12;
    }
    sub_100091C94();
  }
  uint64_t v12 = *v3;
  sub_100032DB4(&qword_1002197C0, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v13 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v14 = -1 << *(unsigned char *)(v12 + 32);
  a2 = v13 & ~v14;
  uint64_t v30 = v12;
  uint64_t v15 = v12 + 56;
  if ((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v16 = ~v14;
    char v19 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v18 = v7 + 16;
    char v17 = v19;
    uint64_t v20 = *(void *)(v18 + 56);
    do
    {
      v17(v9, *(void *)(v30 + 48) + v20 * a2, v6);
      sub_100032DB4(&qword_10021C5E0, (void (*)(uint64_t))&type metadata accessor for UUID);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v18 - 8))(v9, v6);
      if (v21) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v16;
    }
    while (((*(void *)(v15 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v22 = v29;
  uint64_t v23 = *v28;
  *(void *)(v23 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v22 + 32))(*(void *)(v23 + 48) + *(void *)(v22 + 72) * a2, v31, v6);
  uint64_t v25 = *(void *)(v23 + 16);
  BOOL v26 = __OFADD__(v25, 1);
  uint64_t v27 = v25 + 1;
  if (!v26)
  {
    *(void *)(v23 + 16) = v27;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void *sub_10002F7B8(void *(*a1)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t v6 = a4 - a3;
    uint64_t v7 = a3;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  uint64_t result = a1(&v9, v7, v6);
  if (!v4) {
    return (void *)v9;
  }
  return result;
}

void sub_10002F820(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  Swift::Int v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v3) {
        sub_100030290(0, v3, 1, a1);
      }
      return;
    }
    goto LABEL_144;
  }
  Swift::Int v5 = v4;
  unint64_t v100 = sub_1001419BC(v3 / 2);
  uint64_t v101 = v3;
  uint64_t v102 = v6;
  uint64_t v98 = a1;
  if (v3 <= 0)
  {
    uint64_t v103 = (char *)_swiftEmptyArrayStorage;
    unint64_t v32 = _swiftEmptyArrayStorage[2];
LABEL_110:
    if (v32 < 2)
    {
LABEL_121:
      swift_bridgeObjectRelease();
      if (v3 >= -1)
      {
        v100[2] = 0;
        swift_bridgeObjectRelease();
        return;
      }
      goto LABEL_149;
    }
    uint64_t v89 = *v98;
    while (1)
    {
      unint64_t v90 = v32 - 2;
      if (v32 < 2) {
        break;
      }
      if (!v89) {
        goto LABEL_153;
      }
      uint64_t v91 = v103;
      uint64_t v92 = *(void *)&v103[16 * v90 + 32];
      uint64_t v93 = *(void *)&v103[16 * v32 + 24];
      sub_10012D1FC((char *)(v89 + 16 * v92), (char *)(v89 + 16 * *(void *)&v103[16 * v32 + 16]), v89 + 16 * v93, v102);
      if (v1) {
        goto LABEL_106;
      }
      if (v93 < v92) {
        goto LABEL_139;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_10011B25C((uint64_t)v103);
        uint64_t v91 = v96;
      }
      if (v90 >= *((void *)v91 + 2)) {
        goto LABEL_140;
      }
      uint64_t v94 = &v91[16 * v90 + 32];
      *(void *)uint64_t v94 = v92;
      *((void *)v94 + 1) = v93;
      unint64_t v95 = *((void *)v91 + 2);
      if (v32 > v95) {
        goto LABEL_141;
      }
      memmove(&v91[16 * v32 + 16], &v91[16 * v32 + 32], 16 * (v95 - v32));
      uint64_t v103 = v91;
      *((void *)v91 + 2) = v95 - 1;
      unint64_t v32 = v95 - 1;
      Swift::Int v3 = v101;
      if (v95 <= 2) {
        goto LABEL_121;
      }
    }
LABEL_138:
    __break(1u);
LABEL_139:
    __break(1u);
LABEL_140:
    __break(1u);
LABEL_141:
    __break(1u);
LABEL_142:
    __break(1u);
LABEL_143:
    __break(1u);
LABEL_144:
    __break(1u);
LABEL_145:
    __break(1u);
LABEL_146:
    __break(1u);
LABEL_147:
    __break(1u);
LABEL_148:
    __break(1u);
LABEL_149:
    __break(1u);
LABEL_150:
    __break(1u);
LABEL_151:
    __break(1u);
LABEL_152:
    __break(1u);
LABEL_153:
    __break(1u);
    return;
  }
  Swift::Int v99 = v5;
  Swift::Int v7 = 0;
  uint64_t v8 = *a1;
  uint64_t v97 = *a1 + 8;
  uint64_t v103 = (char *)_swiftEmptyArrayStorage;
  while (1)
  {
    Swift::Int v9 = v7++;
    if (v7 >= v3) {
      goto LABEL_32;
    }
    unint64_t v10 = (uint64_t *)(v8 + 16 * v7);
    uint64_t v11 = *v10;
    uint64_t v12 = v10[1];
    uint64_t v13 = (void *)(v8 + 16 * v9);
    if (v11 == *v13 && v12 == v13[1])
    {
      Swift::Int v16 = v9 + 2;
      if (v9 + 2 >= v3) {
        goto LABEL_31;
      }
      int v15 = 0;
LABEL_13:
      char v17 = (void *)(v97 + 16 * v16);
      do
      {
        uint64_t v18 = (void *)(v8 + 16 * v7);
        if (*(v17 - 1) == *v18 && *v17 == v18[1])
        {
          if (v15) {
            goto LABEL_24;
          }
        }
        else if ((v15 ^ _stringCompareWithSmolCheck(_:_:expecting:)()))
        {
          goto LABEL_23;
        }
        v17 += 2;
        Swift::Int v20 = v16 + 1;
        Swift::Int v7 = v16;
        Swift::Int v16 = v20;
      }
      while (v20 < v3);
      Swift::Int v16 = v20;
      goto LABEL_23;
    }
    int v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
    Swift::Int v16 = v9 + 2;
    if (v9 + 2 < v3) {
      goto LABEL_13;
    }
LABEL_23:
    Swift::Int v7 = v16;
    if ((v15 & 1) == 0) {
      goto LABEL_32;
    }
LABEL_24:
    if (v16 < v9) {
      goto LABEL_148;
    }
    if (v9 < v16)
    {
      uint64_t v21 = 16 * v16;
      uint64_t v22 = 16 * v9;
      Swift::Int v23 = v16;
      Swift::Int v24 = v9;
      do
      {
        if (v24 != --v23)
        {
          if (!v8) {
            goto LABEL_152;
          }
          uint64_t v25 = v8 + v21;
          uint64_t v26 = *(void *)(v8 + v22);
          uint64_t v27 = *(void *)(v8 + v22 + 8);
          *(_OWORD *)(v8 + v22) = *(_OWORD *)(v8 + v21 - 16);
          *(void *)(v25 - 16) = v26;
          *(void *)(v25 - 8) = v27;
        }
        ++v24;
        v21 -= 16;
        v22 += 16;
      }
      while (v24 < v23);
    }
LABEL_31:
    Swift::Int v7 = v16;
LABEL_32:
    if (v7 >= v3) {
      goto LABEL_41;
    }
    if (__OFSUB__(v7, v9)) {
      goto LABEL_143;
    }
    if (v7 - v9 >= v99) {
      goto LABEL_41;
    }
    if (__OFADD__(v9, v99)) {
      goto LABEL_146;
    }
    if (v9 + v99 >= v3) {
      Swift::Int v28 = v3;
    }
    else {
      Swift::Int v28 = v9 + v99;
    }
    if (v28 < v9) {
      goto LABEL_147;
    }
    if (v7 == v28)
    {
LABEL_41:
      uint64_t v29 = v103;
    }
    else
    {
      uint64_t v80 = (void *)(v8 + 16 * v7);
      uint64_t v29 = v103;
      do
      {
        uint64_t v81 = (uint64_t *)(v8 + 16 * v7);
        uint64_t v82 = *v81;
        uint64_t v83 = v81[1];
        Swift::Int v84 = v9;
        id v85 = v80;
        do
        {
          BOOL v86 = v82 == *(v85 - 2) && v83 == *(v85 - 1);
          if (v86 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
            break;
          }
          if (!v8) {
            goto LABEL_150;
          }
          uint64_t v82 = *v85;
          uint64_t v83 = v85[1];
          *(_OWORD *)id v85 = *((_OWORD *)v85 - 1);
          *(v85 - 1) = v83;
          *(v85 - 2) = v82;
          v85 -= 2;
          ++v84;
        }
        while (v7 != v84);
        ++v7;
        v80 += 2;
      }
      while (v7 != v28);
      Swift::Int v7 = v28;
    }
    if (v7 < v9) {
      goto LABEL_142;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_10011B190(0, *((void *)v29 + 2) + 1, 1, v29);
      uint64_t v29 = v87;
    }
    unint64_t v31 = *((void *)v29 + 2);
    unint64_t v30 = *((void *)v29 + 3);
    unint64_t v32 = v31 + 1;
    if (v31 >= v30 >> 1)
    {
      sub_10011B190(v30 > 1, v31 + 1, 1, v29);
      uint64_t v29 = v88;
    }
    *((void *)v29 + 2) = v32;
    uint64_t v33 = v29 + 32;
    id v34 = (Swift::Int *)&v29[16 * v31 + 32];
    *id v34 = v9;
    v34[1] = v7;
    uint64_t v103 = v29;
    if (v31) {
      break;
    }
    unint64_t v32 = 1;
LABEL_90:
    Swift::Int v3 = v101;
    if (v7 >= v101) {
      goto LABEL_110;
    }
  }
  while (1)
  {
    unint64_t v35 = v32 - 1;
    if (v32 >= 4)
    {
      uint64_t v40 = &v33[2 * v32];
      uint64_t v41 = *(v40 - 8);
      uint64_t v42 = *(v40 - 7);
      BOOL v46 = __OFSUB__(v42, v41);
      uint64_t v43 = v42 - v41;
      if (v46) {
        goto LABEL_127;
      }
      uint64_t v45 = *(v40 - 6);
      uint64_t v44 = *(v40 - 5);
      BOOL v46 = __OFSUB__(v44, v45);
      uint64_t v38 = v44 - v45;
      char v39 = v46;
      if (v46) {
        goto LABEL_128;
      }
      unint64_t v47 = v32 - 2;
      uint64_t v48 = &v33[2 * v32 - 4];
      uint64_t v50 = *v48;
      uint64_t v49 = v48[1];
      BOOL v46 = __OFSUB__(v49, v50);
      uint64_t v51 = v49 - v50;
      if (v46) {
        goto LABEL_129;
      }
      BOOL v46 = __OFADD__(v38, v51);
      uint64_t v52 = v38 + v51;
      if (v46) {
        goto LABEL_131;
      }
      if (v52 >= v43)
      {
        uint64_t v70 = &v33[2 * v35];
        uint64_t v72 = *v70;
        uint64_t v71 = v70[1];
        BOOL v46 = __OFSUB__(v71, v72);
        uint64_t v73 = v71 - v72;
        if (v46) {
          goto LABEL_137;
        }
        BOOL v63 = v38 < v73;
        goto LABEL_79;
      }
    }
    else
    {
      if (v32 != 3)
      {
        uint64_t v64 = *((void *)v29 + 4);
        uint64_t v65 = *((void *)v29 + 5);
        BOOL v46 = __OFSUB__(v65, v64);
        uint64_t v57 = v65 - v64;
        char v58 = v46;
        goto LABEL_73;
      }
      uint64_t v37 = *((void *)v29 + 4);
      uint64_t v36 = *((void *)v29 + 5);
      BOOL v46 = __OFSUB__(v36, v37);
      uint64_t v38 = v36 - v37;
      char v39 = v46;
    }
    if (v39) {
      goto LABEL_130;
    }
    unint64_t v47 = v32 - 2;
    unint64_t v53 = &v33[2 * v32 - 4];
    uint64_t v55 = *v53;
    uint64_t v54 = v53[1];
    BOOL v56 = __OFSUB__(v54, v55);
    uint64_t v57 = v54 - v55;
    char v58 = v56;
    if (v56) {
      goto LABEL_132;
    }
    uint64_t v59 = &v33[2 * v35];
    uint64_t v61 = *v59;
    uint64_t v60 = v59[1];
    BOOL v46 = __OFSUB__(v60, v61);
    uint64_t v62 = v60 - v61;
    if (v46) {
      goto LABEL_134;
    }
    if (__OFADD__(v57, v62)) {
      goto LABEL_136;
    }
    if (v57 + v62 >= v38)
    {
      BOOL v63 = v38 < v62;
LABEL_79:
      if (v63) {
        unint64_t v35 = v47;
      }
      goto LABEL_81;
    }
LABEL_73:
    if (v58) {
      goto LABEL_133;
    }
    uint64_t v66 = &v33[2 * v35];
    uint64_t v68 = *v66;
    uint64_t v67 = v66[1];
    BOOL v46 = __OFSUB__(v67, v68);
    uint64_t v69 = v67 - v68;
    if (v46) {
      goto LABEL_135;
    }
    if (v69 < v57) {
      goto LABEL_90;
    }
LABEL_81:
    unint64_t v74 = v35 - 1;
    if (v35 - 1 >= v32)
    {
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
      goto LABEL_138;
    }
    if (!v8) {
      goto LABEL_151;
    }
    id v75 = &v33[2 * v74];
    uint64_t v76 = *v75;
    uint64_t v77 = &v33[2 * v35];
    uint64_t v78 = v77[1];
    sub_10012D1FC((char *)(v8 + 16 * *v75), (char *)(v8 + 16 * *v77), v8 + 16 * v78, v102);
    if (v1) {
      break;
    }
    if (v78 < v76) {
      goto LABEL_124;
    }
    if (v35 > *((void *)v103 + 2)) {
      goto LABEL_125;
    }
    *id v75 = v76;
    v33[2 * v74 + 1] = v78;
    unint64_t v79 = *((void *)v103 + 2);
    if (v35 >= v79) {
      goto LABEL_126;
    }
    uint64_t v29 = v103;
    unint64_t v32 = v79 - 1;
    memmove(&v33[2 * v35], v77 + 2, 16 * (v79 - 1 - v35));
    *((void *)v103 + 2) = v79 - 1;
    if (v79 <= 2) {
      goto LABEL_90;
    }
  }
LABEL_106:
  swift_bridgeObjectRelease();
  if (v101 < -1) {
    goto LABEL_145;
  }
  v100[2] = 0;
  swift_bridgeObjectRelease();
}

uint64_t sub_10002FE88(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    sub_100020C64();
    sub_100017E1C();
LABEL_11:
    uint64_t result = sub_10002AE34();
    __break(1u);
    return result;
  }
  if (a3 + 16 * a2 > a1 && a1 + 16 * a2 > a3)
  {
    sub_100020C64();
    sub_1000242EC();
    goto LABEL_11;
  }

  return swift_arrayInitWithCopy();
}

unint64_t sub_10002FF38()
{
  unint64_t result = qword_10021EF70;
  if (!qword_10021EF70)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10021EF70);
  }
  return result;
}

void sub_10002FF78(uint64_t a1, uint64_t a2)
{
  if (a2) {
    _convertErrorToNSError(_:)();
  }
  uint64_t v2 = sub_100027EA8();
  id v5 = v3;
  v4(v2);
}

uint64_t sub_10002FFEC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100030034(void *a1)
{
  return sub_100013C38(a1, (SEL *)&selRef_agent);
}

Swift::Int sub_100030040()
{
  return sub_100007A2C();
}

uint64_t sub_10003005C()
{
  [v0 auditToken];
  unsigned __int16 v1 = sub_100004A0C(v3, v4, v5, v6);
  return v1 & (v1 > 0xFFu);
}

unint64_t sub_1000300A8()
{
  unint64_t result = qword_100221910;
  if (!qword_100221910)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100221910);
  }
  return result;
}

uint64_t sub_1000300E8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

void sub_1000300F0(uint64_t a1, uint64_t a2)
{
}

unint64_t sub_10003010C()
{
  unint64_t result = qword_10021D070;
  if (!qword_10021D070)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10021D070);
  }
  return result;
}

BOOL sub_10003014C(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      uint64_t v3 = (int)a1;
      uint64_t v2 = a1 >> 32;
      break;
    case 2uLL:
      uint64_t v3 = *(void *)(a1 + 16);
      uint64_t v2 = *(void *)(a1 + 24);
      break;
    case 3uLL:
      return v3 == v2;
    default:
      uint64_t v3 = 0;
      uint64_t v2 = BYTE6(a2);
      break;
  }
  return v3 == v2;
}

unint64_t sub_1000301A0()
{
  unint64_t result = qword_100219270;
  if (!qword_100219270)
  {
    sub_1000371D4((uint64_t *)&unk_10021BAF0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100219270);
  }
  return result;
}

uint64_t sub_1000301F4(uint64_t result)
{
  if (result + 1 > *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  return result;
}

void sub_100030224(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_10002F0B4();
    uint64_t v2 = v3;
  }
  uint64_t v4 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v4;
  sub_10002F820(v5);
  *a1 = v2;
}

uint64_t sub_100030290(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v6 = result;
    uint64_t v7 = *a4;
    uint64_t v8 = *a4 + 16 * a3;
    while (2)
    {
      Swift::Int v9 = (uint64_t *)(v7 + 16 * v4);
      unint64_t result = *v9;
      uint64_t v10 = v9[1];
      uint64_t v11 = v6;
      uint64_t v12 = (uint64_t *)v8;
      do
      {
        if (result == *(v12 - 2) && v10 == *(v12 - 1)) {
          break;
        }
        unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if ((result & 1) == 0) {
          break;
        }
        if (!v7)
        {
          __break(1u);
          return result;
        }
        unint64_t result = *v12;
        uint64_t v10 = v12[1];
        *(_OWORD *)uint64_t v12 = *((_OWORD *)v12 - 1);
        *(v12 - 1) = v10;
        *(v12 - 2) = result;
        v12 -= 2;
        ++v11;
      }
      while (v4 != v11);
      ++v4;
      v8 += 16;
      if (v4 != a2) {
        continue;
      }
      break;
    }
  }
  return result;
}

uint64_t sub_100030358(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_100030368(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return sub_1000295FC(a1, a2, a3, (uint64_t)&unk_100219740, a5, a6, a7, a8, a9, a10);
}

uint64_t sub_100030374()
{
  sub_1000274B0();
  uint64_t v1 = sub_100025FF4();
  sub_100004BC4(v1, v2, v3);
  *uint64_t v0 = v5;

  return swift_bridgeObjectRelease();
}

unint64_t sub_1000303C8()
{
  unint64_t result = qword_10021E010;
  if (!qword_10021E010)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10021E010);
  }
  return result;
}

uint64_t sub_100030414(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10003045C()
{
  unint64_t result = qword_100219260;
  if (!qword_100219260)
  {
    type metadata accessor for DispatchWorkItemFlags();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100219260);
  }
  return result;
}

void sub_1000304A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = *(void **)(a1 + *(int *)(a2 + 20));
}

uint64_t type metadata accessor for SearchQueriesDataSharingStatusHelper()
{
  uint64_t result = qword_10021D5D8;
  if (!qword_10021D5D8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10003055C()
{
  return sub_10000745C(*v0);
}

uint64_t sub_100030564()
{
  return *(void *)v0;
}

uint64_t sub_10003056C(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_10001DCF8();
  sub_10000E040();
  v3();
  return a1;
}

uint64_t type metadata accessor for SessionFileCreationError()
{
  uint64_t result = qword_10021F940;
  if (!qword_10021F940) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata accessor for ClientSessionTimekeeper()
{
  uint64_t result = qword_10021FC58;
  if (!qword_10021FC58) {
    return swift_getSingletonMetadata();
  }
  return result;
}

const char *sub_10003065C(char a1)
{
  uint64_t result = "unknown";
  switch(a1)
  {
    case 1:
      uint64_t result = "configuration";
      break;
    case 2:
      uint64_t result = "parsecdSearch";
      break;
    case 3:
      uint64_t result = "parsecdZeroKeyWord";
      break;
    case 4:
      uint64_t result = "parsecdLookup";
      break;
    case 5:
      uint64_t result = "parsecdFlight";
      break;
    case 6:
      uint64_t result = "parsecdMoreResults";
      break;
    case 7:
      uint64_t result = "parsecdCard";
      break;
    case 8:
      uint64_t result = "parsecdWarm";
      break;
    case 9:
      uint64_t result = "bagResourceDownload";
      break;
    case 10:
      uint64_t result = "pegasusKitVisualSearch";
      break;
    case 11:
      uint64_t result = "pegasusKitSiriPersonalization";
      break;
    case 12:
      uint64_t result = "pegasusKitHashtagImages";
      break;
    case 13:
      uint64_t result = "pegasusKitAssistant";
      break;
    case 14:
      uint64_t result = "pegasusKitBagFetchXPC";
      break;
    case 15:
      uint64_t result = "pegasusKitContextFetchXPC";
      break;
    case 16:
      uint64_t result = "pegasusKitLookup";
      break;
    case 17:
      uint64_t result = "pegasusKitSpotlightZKW";
      break;
    case 18:
      uint64_t result = "pegasusKitEngagementSearch";
      break;
    case 19:
      uint64_t result = "engagementCache";
      break;
    case 20:
      uint64_t result = "topicCache";
      break;
    case 21:
      uint64_t result = "pegasusKitIntelligencePlatform";
      break;
    case 22:
      uint64_t result = "pegasusKitIntelligenceFlow";
      break;
    case 23:
      uint64_t result = "pegasusKitSafariAssistantPrefetch";
      break;
    case 24:
      uint64_t result = "pegasusKitSafariAssistantSummarize";
      break;
    case 25:
      uint64_t result = "pegasusKitEncryptedVisualSearch";
      break;
    case 26:
      uint64_t result = "pegasusKitSportsWatchFace";
      break;
    case 27:
      uint64_t result = "pegasusKitLookupSearch";
      break;
    case 28:
      uint64_t result = "pegasusKitEncryptedVisualSearchConfig";
      break;
    case 29:
      uint64_t result = "pegasusKitSafariSearch";
      break;
    case 30:
      uint64_t result = "pegasusKitCameraVisualSearch";
      break;
    case 31:
      uint64_t result = "installedAppWhitelist";
      break;
    case 32:
      uint64_t result = "assetDeliveryPreloadAsset";
      break;
    case 33:
      uint64_t result = "assetDeliveryPrefilterPrefetch";
      break;
    case 34:
      uint64_t result = "assetDeliveryGetPreloadedData";
      break;
    case 35:
      uint64_t result = "assetDeliveryBloomFilter";
      break;
    case 36:
      uint64_t result = "assetDeliveryRetrieveAsset";
      break;
    case 37:
      uint64_t result = "assetDeliveryRedact";
      break;
    case 38:
      uint64_t result = "assetDeliveryFeatureSupported";
      break;
    case 39:
      uint64_t result = "contextFetchAMSTreatments";
      break;
    case 40:
      uint64_t result = "feedbackEnumerator";
      break;
    case 41:
      uint64_t result = "aggregation";
      break;
    case 42:
      uint64_t result = "uploadaggregates";
      break;
    case 43:
      uint64_t result = "clientXPCConnection";
      break;
    case 44:
      uint64_t result = "sbaPlugin";
      break;
    default:
      return result;
  }
  return result;
}

void sub_1000308F8(uint64_t *a1@<X8>)
{
  sub_10000AD7C(*(void **)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_100030914()
{
  return 1701869940;
}

uint64_t sub_100030924()
{
  return 0x6E6F697461727564;
}

uint64_t sub_10003093C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4 = type metadata accessor for SessionTokens(0);
  uint64_t v5 = sub_100016544(v4);
  __chkstk_darwin(v5);
  sub_100016500();
  uint64_t v6 = *(void *)(v1 + 16);
  if (v6)
  {
    sub_10002D8D8(v6 + OBJC_IVAR____TtC7parsecd13ClientSession_tokens, v2);
    uint64_t v7 = sub_10002819C();
    return sub_100008A60(v7, v8);
  }
  else
  {
    sub_100017F00();
    swift_retain();
    sub_10000EFCC(a1);
    return swift_release();
  }
}

void sub_1000309F0()
{
  uint64_t v1 = type metadata accessor for UserAgent();
  sub_100024920(v1);
  sub_100028B48();
  uint64_t v3 = v0[2];
  uint64_t v4 = v0[3];
  uint64_t v5 = v0[4];
  uint64_t v7 = *(void *)((char *)v0 + v6);
  Swift::Int v9 = *(void **)((char *)v0 + v8);

  sub_100030A5C(v3, v4, v5, (uint64_t)v0 + v2, v7, v9);
}

void sub_100030A5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
}

uint64_t type metadata accessor for CancellableStoreKey()
{
  uint64_t result = qword_10021EDF8;
  if (!qword_10021EDF8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100030AE4()
{
  uint64_t v0 = sub_100004A8C();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v1, v2);
}

uint64_t type metadata accessor for ResourceAccessSpan()
{
  uint64_t result = qword_10021B700;
  if (!qword_10021B700) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100030B80(uint64_t a1)
{
  return sub_1000167B0(a1) & 1;
}

uint64_t sub_100030BA8()
{
  return sub_100030BB4(*(uint64_t **)(v0 + 16), *(void (**)(long long *__return_ptr))(v0 + 24));
}

uint64_t sub_100030BB4(uint64_t *a1, void (*a2)(long long *__return_ptr))
{
  a2(&v6);
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  *(_OWORD *)a1 = v6;

  return sub_10000A330(v3, v4);
}

uint64_t sub_100030C48()
{
  return 0x656372756F736572;
}

uint64_t type metadata accessor for ClientConnection(uint64_t a1)
{
  return sub_100027D28(a1, qword_10021CC20);
}

uint64_t SessionFilename.__deallocating_deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC7parsecd15SessionFilename_sessionID;
  type metadata accessor for UUID();
  sub_10001DCF8();
  (*(void (**)(uint64_t))(v2 + 8))(v1);
  uint64_t v3 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v4 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v3, v4);
}

uint64_t type metadata accessor for SessionFilename()
{
  uint64_t result = qword_10021F6A0;
  if (!qword_10021F6A0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

id sub_100030D6C(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  swift_errorRetain();
  uint64_t v1 = (void *)_convertErrorToNSError(_:)();
  id v2 = [v1 userInfo];
  static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  swift_bridgeObjectRetain();
  sub_10011A878();
  uint64_t v4 = v3;
  swift_bridgeObjectRelease();
  char v5 = sub_1001061E0(v4);
  swift_bridgeObjectRelease();
  swift_release();
  id v6 = [v1 domain];
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;

  id v10 = [v1 code];
  if (v5)
  {
    id v11 = [v1 userInfo];
    uint64_t v12 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    uint64_t v12 = 0;
  }
  id v14 = objc_allocWithZone((Class)NSError);
  id v13 = sub_1000B06A0(v7, v9, (uint64_t)v10, v12);
  swift_errorRelease();

  return v13;
}

uint64_t sub_100030EF8@<X0>(void *a1@<X8>)
{
  return sub_100005088(*(void *)(v1 + 16), a1);
}

uint64_t sub_100030F14()
{
  sub_10002572C(&qword_10021ACB0);
  OS_dispatch_queue.sync<A>(execute:)();
  return v1;
}

void *sub_100030F8C()
{
  return sub_100009EAC();
}

void *sub_100030FB8@<X0>(void *a1@<X8>)
{
  uint64_t result = sub_100030F8C();
  if (!v1) {
    *a1 = result;
  }
  return result;
}

uint64_t sub_100030FE4()
{
  return sub_100009534();
}

uint64_t sub_100031010@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100030FE4();
  if (!v1) {
    *a1 = result;
  }
  return result;
}

uint64_t sub_10003103C(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_10001DCF8();
  uint64_t v3 = sub_1000253C4();
  v4(v3);
  return a1;
}

uint64_t sub_10003108C(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_10001DCF8();
  sub_10000E040();
  v3();
  return a1;
}

uint64_t sub_1000310E0(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_10001DCF8();
  sub_10000E040();
  v3();
  return a1;
}

uint64_t sub_100031134(uint64_t a1, void (*a2)(void))
{
  a2(0);
  sub_10001DCF8();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t sub_10003118C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100024344();
  v5(v4);
  sub_10001DCF8();
  (*(void (**)(uint64_t, uint64_t))(v6 + 24))(a2, v2);
  return a2;
}

uint64_t type metadata accessor for LazyFileWriter()
{
  return self;
}

void sub_100031210()
{
}

uint64_t sub_10003123C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100049CE0);
}

uint64_t sub_100031250(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100049C20);
}

void sub_100031264()
{
  sub_10000EFE4(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_100031270@<X0>(uint64_t *a1@<X8>)
{
  return sub_100006364(v1, a1);
}

id sub_1000312B0()
{
  return [*(id *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC7parsecd13FlusherClient_connection) invalidate];
}

uint64_t sub_1000312CC()
{
  return sub_10000F2C8(*(void (**)(uint64_t))(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_1000312D8(uint64_t a1)
{
  uint64_t v2 = *v1;
  if ((*((unsigned char *)v1 + 81) & 1) == 0) {
    sub_10000D318(a1);
  }
  uint64_t v3 = sub_100032148();
  swift_errorRelease();
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v2 + 448) - 8) + 8))(v3 + *(void *)(*(void *)v3 + 472));
  return v3;
}

uint64_t sub_100031388(uint64_t a1)
{
  uint64_t v1 = sub_1000312D8(a1);
  uint64_t v2 = *(unsigned int *)(*(void *)v1 + 48);
  uint64_t v3 = *(unsigned __int16 *)(*(void *)v1 + 52);

  return _swift_deallocClassInstance(v1, v2, v3);
}

void sub_1000313DC(void *a1, id a2, char a3)
{
  if (a3) {
    swift_release();
  }
  else {
}
  }

void (*sub_1000313EC@<X0>(uint64_t a1@<X0>, void (**a2)(uint64_t *__return_ptr, uint64_t)@<X8>))(uint64_t *__return_ptr, uint64_t)
{
  void (*result)(uint64_t *__return_ptr, uint64_t);
  void (*v5)(uint64_t *__return_ptr, uint64_t);
  void (*v6)(uint64_t *__return_ptr, uint64_t);

  uint64_t result = sub_100004888(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t sub_10003141C@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1000300E8(a1);
  if (!v2) {
    *a2 = result & 1;
  }
  return result;
}

uint64_t type metadata accessor for ClientSession(uint64_t a1)
{
  return sub_100027D28(a1, (uint64_t *)&unk_100219D40);
}

__objc2_class *sub_10003146C(void *a1, uint64_t a2, void *a3)
{
  uint64_t result = (__objc2_class *)object_getClass(a1);
  BOOL v6 = result != _TtC7parsecd8Assembly || a1 == 0;
  if (!v6 && a1[2])
  {
    swift_retain();
    sub_1000690B0(a3);
    return (__objc2_class *)swift_release();
  }
  return result;
}

void sub_1000314E0(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v69 = a5;
  uint64_t v71 = a2;
  uint64_t v8 = sub_10002572C(&qword_10021C638);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  id v11 = (char *)&v65 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  id v13 = (char *)&v65 - v12;
  uint64_t v14 = type metadata accessor for Trialpb_TrialExperiment();
  uint64_t v70 = *(void *)(v14 - 8);
  uint64_t v15 = __chkstk_darwin(v14);
  char v17 = (char *)&v65 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  char v19 = (char *)&v65 - v18;
  uint64_t v20 = *(int *)(type metadata accessor for SessionTokens(0) + 24);
  uint64_t v68 = a3;
  uint64_t v21 = *(void *)(a3 + v20);
  if (!v21) {
    goto LABEL_41;
  }
  if (!*(void *)(v21 + 16)) {
    goto LABEL_41;
  }
  sub_100017C74();
  sub_100018148(0, 0);
  uint64_t v22 = (void *)sub_100016A0C();
  swift_unknownObjectRelease();
  if (!v22) {
    goto LABEL_41;
  }
  uint64_t v23 = a4;
  id v24 = v22;
  uint64_t v67 = v23;
  uint64_t v25 = UserAgent.fullString.getter();
  uint64_t v27 = v26;
  id v28 = objc_allocWithZone((Class)PARBag);
  id v66 = v24;
  uint64_t v29 = (_UNKNOWN **)sub_10001519C(v24, v25, v27);
  if (([v29 sessionExperimentMetadataEnabled] & 1) == 0) {
    goto LABEL_38;
  }
  uint64_t v65 = v29;
  UserAgent.fullString.getter();
  sub_10005CC04(v21, (uint64_t)v13);
  swift_bridgeObjectRelease();
  uint64_t v29 = &_s10PegasusAPI41Apple_Parsec_Search_V2_TransportationModeO7drivingyA2CmFWC_ptr;
  if (sub_100027BA4((uint64_t)v13, 1, v14) == 1)
  {
    sub_1000E97F8((uint64_t)v13, &qword_10021C638);
    uint64_t v30 = v70;
    goto LABEL_19;
  }
  uint64_t v31 = v70;
  (*(void (**)(char *, char *, uint64_t))(v70 + 32))(v19, v13, v14);
  id v32 = [objc_allocWithZone((Class)_CPExperimentInfo) init];
  if (!v32)
  {
    (*(void (**)(char *, uint64_t))(v31 + 8))(v19, v14);
    uint64_t v30 = v31;
    goto LABEL_19;
  }
  uint64_t v33 = v32;
  uint64_t v34 = Trialpb_TrialExperiment.experimentNamespace.getter();
  sub_10001CAA0(v34, v35, v33, (SEL *)&selRef_setNamespaceId_);
  uint64_t v36 = Trialpb_TrialExperiment.experimentID.getter();
  sub_10001CAA0(v36, v37, v33, (SEL *)&selRef_setExperimentId_);
  uint64_t v38 = Trialpb_TrialExperiment.treatmentID.getter();
  sub_10001CAA0(v38, v39, v33, (SEL *)&selRef_setTreatmentId_);
  uint64_t v40 = Trialpb_TrialExperiment.deploymentID.getter();
  if (v40 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_52;
  }
  if (v40 > 0x7FFFFFFF)
  {
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  [v33 setDeploymentId:v40];
  uint64_t v41 = Trialpb_TrialExperiment.compatibilityVersion.getter();
  if ((v41 & 0x80000000) != 0)
  {
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  [v33 setVersion:v41];
  uint64_t v42 = v71;
  uint64_t v43 = sub_1000E94D0(v71);
  swift_bridgeObjectRelease();
  if (v43)
  {
    uint64_t v72 = sub_1000E94D0(v42);
    if (v72)
    {
      uint64_t v29 = v33;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v72 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(void *)((v72 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        goto LABEL_14;
      }
      goto LABEL_57;
    }
    [v42 setExperimentInfos:0];

    uint64_t v30 = v70;
    (*(void (**)(char *, uint64_t))(v70 + 8))(v19, v14);
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_10002572C(&qword_1002192A8);
    uint64_t v45 = swift_allocObject();
    *(_OWORD *)(v45 + 16) = xmmword_1001A3820;
    *(void *)(v45 + 32) = v33;
    uint64_t v72 = v45;
    specialized Array._endMutation()();
    sub_1000E9530(v72, v42);
    uint64_t v30 = v70;
    (*(void (**)(char *, uint64_t))(v70 + 8))(v19, v14);
  }
  while (1)
  {
LABEL_19:
    UserAgent.fullString.getter();
    sub_10005CC1C(v21, (uint64_t)v11);
    swift_bridgeObjectRelease();
    if (sub_100027BA4((uint64_t)v11, 1, v14) == 1)
    {
      sub_1000E97F8((uint64_t)v11, &qword_10021C638);
      uint64_t v29 = v65;
      goto LABEL_38;
    }
    (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v17, v11, v14);
    BOOL v46 = (char *)[objc_allocWithZone((Class)_CPExperimentInfo) init];
    uint64_t v29 = v65;
    if (!v46) {
      goto LABEL_32;
    }
    id v11 = v46;
    uint64_t v47 = Trialpb_TrialExperiment.experimentNamespace.getter();
    sub_10001CAA0(v47, v48, v11, (SEL *)&selRef_setNamespaceId_);
    uint64_t v49 = Trialpb_TrialExperiment.experimentID.getter();
    sub_10001CAA0(v49, v50, v11, (SEL *)&selRef_setExperimentId_);
    uint64_t v51 = Trialpb_TrialExperiment.treatmentID.getter();
    sub_10001CAA0(v51, v52, v11, (SEL *)&selRef_setTreatmentId_);
    uint64_t v53 = Trialpb_TrialExperiment.deploymentID.getter();
    if (v53 < (uint64_t)0xFFFFFFFF80000000)
    {
LABEL_54:
      __break(1u);
LABEL_55:
      __break(1u);
      goto LABEL_56;
    }
    char v19 = v71;
    if (v53 > 0x7FFFFFFF) {
      goto LABEL_55;
    }
    [v11 setDeploymentId:v53];
    uint64_t v54 = Trialpb_TrialExperiment.compatibilityVersion.getter();
    if ((v54 & 0x80000000) == 0) {
      break;
    }
LABEL_56:
    __break(1u);
LABEL_57:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
LABEL_14:
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    if (v72)
    {
      sub_1000E96D8();
      v44.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
    }
    else
    {
      v44.super.Class isa = 0;
    }
    [v71 setExperimentInfos:v44.super.isa];

    uint64_t v30 = v70;
    (*(void (**)(char *, uint64_t))(v70 + 8))(v19, v14);
  }
  [v11 setVersion:v54];
  uint64_t v55 = sub_1000E94D0(v19);
  swift_bridgeObjectRelease();
  if (!v55)
  {
    sub_10002572C(&qword_1002192A8);
    uint64_t v58 = swift_allocObject();
    *(_OWORD *)(v58 + 16) = xmmword_1001A3820;
    *(void *)(v58 + 32) = v11;
    uint64_t v72 = v58;
    specialized Array._endMutation()();
    sub_1000E9530(v72, v19);
LABEL_32:
    (*(void (**)(char *, uint64_t))(v30 + 8))(v17, v14);
    goto LABEL_38;
  }
  uint64_t v72 = sub_1000E94D0(v19);
  if (v72)
  {
    BOOL v56 = v11;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((v72 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v72 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    if (v72)
    {
      sub_1000E96D8();
      v57.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
    }
    else
    {
      v57.super.Class isa = 0;
    }
    [v19 setExperimentInfos:v57.super.isa];

    (*(void (**)(char *, uint64_t))(v70 + 8))(v17, v14);
  }
  else
  {
    [v19 setExperimentInfos:0];

    (*(void (**)(char *, uint64_t))(v30 + 8))(v17, v14);
    swift_bridgeObjectRelease();
  }
LABEL_38:
  if ([v29 experimentsCustomFeedbackEnabled]) {
    sub_1000E9718();
  }

  a4 = v67;
LABEL_41:
  uint64_t v59 = sub_1000075B8(a1, a4);
  if (v59)
  {
    uint64_t v60 = v59;
    uint64_t v61 = v71;
    uint64_t v72 = sub_1000E94D0(v71);
    if (v72)
    {
      id v62 = v60;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((v72 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v72 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      if (v72)
      {
        sub_1000E96D8();
        v63.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
      }
      else
      {
        v63.super.Class isa = 0;
      }
      [v61 setExperimentInfos:v63.super.isa];
    }
    else
    {
      [v61 setExperimentInfos:0];
      swift_bridgeObjectRelease();
      sub_10002572C(&qword_1002192A8);
      uint64_t v64 = swift_allocObject();
      *(_OWORD *)(v64 + 16) = xmmword_1001A3820;
      *(void *)(v64 + 32) = v60;
      uint64_t v72 = v64;
      specialized Array._endMutation()();
      sub_1000E9530(v72, v61);
    }
  }
}

uint64_t sub_100031DBC()
{
  return sub_100007C24();
}

void sub_100031DC4(void *a1)
{
}

void sub_100031DCC()
{
  sub_10000DFE0();
  uint64_t v2 = sub_10002572C((uint64_t *)&unk_10021E630);
  uint64_t v3 = sub_100016544(v2);
  __chkstk_darwin(v3);
  sub_100024F80();
  uint64_t v4 = type metadata accessor for Logger();
  sub_100020C48();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  sub_100016500();
  sub_100008B84(v0 + OBJC_IVAR____TtC7parsecd13ClientSession_tailLog, v0, (uint64_t *)&unk_10021E630);
  if (sub_100027BA4(v0, 1, v4) == 1)
  {
    sub_10000D564(v0, (uint64_t *)&unk_10021E630);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v1, v0, v4);
    sub_100049E60();
    if (v9)
    {
      uint64_t v10 = v8;
      unint64_t v11 = v9;
      swift_retain_n();
      swift_bridgeObjectRetain();
      uint64_t v12 = Logger.logObject.getter();
      os_log_type_t v13 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v12, v13))
      {
        uint64_t v21 = v10;
        uint64_t v14 = swift_slowAlloc();
        uint64_t v22 = sub_100023E3C();
        *(_DWORD *)uint64_t v14 = 136315394;
        sub_10002CD30();
        sub_10004A48C((unint64_t *)&qword_10021CC60, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v17 = sub_10001C274(v15, v16, &v22);
        sub_1000283E0(v17);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        sub_100021298();
        swift_bridgeObjectRelease();
        *(_WORD *)(v14 + 12) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v18 = sub_10001C274(v21, v11, &v22);
        sub_1000240B4(v18);
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v12, v13, "%s fulfilled: (%s).", (uint8_t *)v14, 0x16u);
        sub_100021C60();
        sub_100017D40();
        sub_100017D40();
      }
      else
      {

        swift_bridgeObjectRelease_n();
        sub_100021298();
      }
    }
    uint64_t v19 = sub_10002819C();
    v20(v19);
  }
  sub_10000DFB8();
}

void sub_10003208C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = *(void **)(a1 + *(int *)(a2 + 20));
}

uint64_t type metadata accessor for FeedbackFile()
{
  uint64_t result = qword_100220570;
  if (!qword_100220570) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100032154()
{
  uint64_t v1 = v0;
  char v2 = *(unsigned char *)(v0 + 80);
  void v12[3] = &type metadata for ResourceAccessActivity;
  void v12[4] = &off_1001FCE98;
  LOBYTE(v12[0]) = v2;
  uint64_t v3 = *(char *)sub_10001B620(v12, (uint64_t)&type metadata for ResourceAccessActivity);
  if (qword_100218BC8 != -1) {
    goto LABEL_11;
  }
  while (1)
  {
    uint64_t v4 = *(void *)(qword_100236B00 + 16);
    if (!v4) {
      break;
    }
    for (uint64_t i = 0; ; ++i)
    {
      uint64_t v6 = i + 1;
      if (__OFADD__(i, 1)) {
        break;
      }
      if (qword_1001A56D8[*(char *)(qword_100236B00 + 32 + i)] == qword_1001A56D8[v3])
      {
        v7._countAndFlagsBits = 46;
        v7._object = (void *)0xE100000000000000;
        String.append(_:)(v7);
        swift_bridgeObjectRetain();
        v8._countAndFlagsBits = 0x656372756F736572;
        v8._object = (void *)0xEE00737365636341;
        String.append(_:)(v8);
        swift_bridgeObjectRelease();
        sub_10003065C(v2);
        v9._countAndFlagsBits = StaticString.description.getter();
        String.append(_:)(v9);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        v10._countAndFlagsBits = 46;
        v10._object = (void *)0xE100000000000000;
        String.append(_:)(v10);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_retain();
        sub_100078E84(0xD000000000000010, 0x80000001001B0C20, v1);
        swift_bridgeObjectRelease();
        return sub_10001CA50((uint64_t)v12);
      }
      if (v6 == v4) {
        return sub_10001CA50((uint64_t)v12);
      }
    }
    __break(1u);
LABEL_11:
    swift_once();
  }
  return sub_10001CA50((uint64_t)v12);
}

uint64_t sub_10003233C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100032384()
{
  return sub_10001DAF4((uint64_t)&OBJC_IVAR____TtC7parsecd11ClientState__userAgent, (void (*)(uint64_t))sub_10002A280);
}

uint64_t type metadata accessor for FileWriter()
{
  uint64_t result = qword_1002194D8;
  if (!qword_1002194D8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000323F0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_10002572C(a3);
  sub_10001DCF8();
  uint64_t v4 = sub_100026078();
  v5(v4);
  return a2;
}

void *sub_100032440(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (*(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64) <= 0x10uLL) {
    uint64_t v4 = 16;
  }
  else {
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64);
  }
  unsigned int v5 = a2[v4];
  unsigned int v6 = v5 - 2;
  if (v5 >= 2)
  {
    if (v4 <= 3) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = 4;
    }
    switch(v7)
    {
      case 1:
        int v8 = *a2;
        goto LABEL_13;
      case 2:
        int v8 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v8 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v8 = *(_DWORD *)a2;
LABEL_13:
        int v9 = (v8 | (v6 << (8 * v4))) + 2;
        unsigned int v5 = v8 + 2;
        if (v4 < 4) {
          unsigned int v5 = v9;
        }
        break;
      default:
        break;
    }
  }
  if (v5 == 1)
  {
    (*(void (**)(void *))(*(void *)(*(void *)(a3 + 24) - 8) + 16))(a1);
    char v10 = 1;
  }
  else
  {
    uint64_t v11 = *((void *)a2 + 1);
    *a1 = *(void *)a2;
    a1[1] = v11;
    swift_retain();
    char v10 = 0;
  }
  *((unsigned char *)a1 + v4) = v10;
  return a1;
}

uint64_t sub_100032568@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(void (**)(void), uint64_t)@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11 = v6;
  uint64_t v29 = a1;
  sub_1000323F0(v6, (uint64_t)&v27, a2);
  if (v28) {
    return a3(&v27, a6);
  }
  sub_100085FD4(v6, a2);
  uint64_t v14 = v27;
  if (qword_100218AC8 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  sub_10002A10C(v15, (uint64_t)qword_10021A060);
  unint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v25 = v14;
    uint64_t v18 = swift_slowAlloc();
    uint64_t v26 = swift_slowAlloc();
    *(_DWORD *)uint64_t v18 = 136446466;
    type metadata accessor for Assembly();
    sub_10002572C(&qword_10021BE08);
    uint64_t v19 = String.init<A>(describing:)();
    sub_10001C274(v19, v20, &v26);
    sub_100017EA4();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v18 + 12) = 2082;
    sub_10002572C(a4);
    sub_10002572C(a5);
    uint64_t v21 = String.init<A>(describing:)();
    sub_10001C274(v21, v22, &v26);
    sub_10002ED04();
    swift_bridgeObjectRelease();
    sub_100028AF4((void *)&_mh_execute_header, v23, v24, "AtomicValue<%{public}s, %{public}s>.init");
    swift_arrayDestroy();
    sub_100017D40();
    uint64_t v14 = v25;
    sub_100017D40();
  }

  v14(&v29);
  swift_release();
  uint64_t result = sub_10001C20C(a6, v11);
  *(unsigned char *)(v11 + 40) = 1;
  return result;
}

uint64_t sub_1000327AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10002572C((uint64_t *)&unk_100219728);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100032818()
{
  return sub_100006C28();
}

uint64_t sub_100032820()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 144))() & 1;
}

uint64_t sub_100032868()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 152))() & 1;
}

unint64_t sub_1000328B0()
{
  unint64_t result = qword_100224C88;
  if (!qword_100224C88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100224C88);
  }
  return result;
}

const char *SessionDBFeatureFlags.feature.getter()
{
  return "session_db_upload";
}

const char *SessionDBFeatureFlags.domain.getter()
{
  return "parsecd";
}

uint64_t static SessionDBFeatureFlags.uploadFromFlag.getter()
{
  uint64_t v3 = &type metadata for SessionDBFeatureFlags;
  unint64_t v4 = sub_1000328B0();
  char v0 = isFeatureEnabled(_:)();
  sub_10001CA50((uint64_t)v2);
  return v0 & 1;
}

void sub_100032974(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SessionType();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  unsigned int v5 = *(void **)(a1 + *(int *)(a2 + 20));
}

uint64_t sub_1000329E8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for BiomeSessionWrapper(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for BiomeSessionWrapper(uint64_t a1)
{
  return sub_100027D28(a1, qword_100225E68);
}

void sub_100032A64()
{
}

uint64_t sub_100032A88()
{
  return BiomeDatabaseWriter.addFeedback(_:to:)();
}

uint64_t type metadata accessor for SessionFeedback(uint64_t a1)
{
  return sub_100027D28(a1, qword_100225D10);
}

uint64_t sub_100032ACC()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_100032AD8(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t type metadata accessor for ProtoMessageSchema()
{
  return self;
}

uint64_t sub_100032B58()
{
  return ProtoSchemaStore.messageSchema(withName:)();
}

uint64_t ProtobufPayload.__deallocating_deinit()
{
  sub_10001CA50(v0 + 16);
  sub_1000291B4(*(void *)(v0 + 56), *(void *)(v0 + 64));

  return _swift_deallocClassInstance(v0, 72, 7);
}

uint64_t sub_100032BB0(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t ProtobufPayload.payload.getter()
{
  uint64_t v1 = *(void *)(v0 + 56);
  sub_100027BCC(v1, *(void *)(v0 + 64));
  return v1;
}

uint64_t *sub_100032C2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  a4[5] = a5;
  a4[6] = a6;
  uint64_t v11 = sub_10002E5E8(a4 + 2);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32))(v11, a1, a5);
  a4[7] = a2;
  a4[8] = a3;
  return a4;
}

uint64_t *sub_100032CB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  sub_100026808();
  uint64_t v12 = v11;
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ProtobufPayload();
  unint64_t v16 = (uint64_t *)swift_allocObject();
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a1, a5);
  os_log_type_t v17 = sub_100032C2C((uint64_t)v15, a2, a3, v16, a5, a6);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, a5);
  return v17;
}

uint64_t sub_100032DB4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100032DFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10002572C(&qword_10021BB10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void *sub_100032E64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a3;
  v4[2] = &v5;
  return sub_10002F7B8((void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_100032F68, (uint64_t)v4, a1, a2);
}

void *sub_100032EB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return sub_100032ED4(a1, a2, *(uint64_t **)(v3 + 16), a3);
}

void *sub_100032ED4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  uint64_t result = sub_100032E64(a1, a2, *a3);
  if (!v4)
  {
    *a4 = result;
    a4[1] = v7;
    a4[2] = v8;
  }
  return result;
}

uint64_t sub_100032F08(unsigned char *a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  sub_10002C8A4(&v7, a1, a2);
  return v7;
}

uint64_t sub_100032F68@<X0>(unsigned char *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_100032F88(a1, a2, *(void ***)(v3 + 16), a3);
}

uint64_t sub_100032F88@<X0>(unsigned char *a1@<X0>, uint64_t a2@<X1>, void **a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result = sub_100032F08(a1, a2, *a3);
  if (!v4)
  {
    *a4 = result;
    a4[1] = v7;
    a4[2] = v8;
  }
  return result;
}

void *sub_100032FC8(void *(*a1)(uint64_t *__return_ptr, char *, char *), uint64_t a2)
{
  uint64_t v4 = *v2;
  unint64_t v3 = v2[1];
  id v5 = v2;
  switch(v3 >> 62)
  {
    case 1uLL:
      uint64_t v9 = v3 & 0x3FFFFFFFFFFFFFFFLL;
      *(_OWORD *)uint64_t v2 = xmmword_1001A6140;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v11 = v4 >> 32;
      if (isUniquelyReferenced_nonNull_native) {
        goto LABEL_11;
      }
      if (v11 < (int)v4) {
        goto LABEL_16;
      }
      if (__DataStorage._bytes.getter() && __OFSUB__((int)v4, __DataStorage._offset.getter())) {
        goto LABEL_17;
      }
      type metadata accessor for __DataStorage();
      swift_allocObject();
      uint64_t v13 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
      swift_release();
      uint64_t v9 = v13;
      uint64_t v11 = v4 >> 32;
LABEL_11:
      if (v11 < (int)v4)
      {
        __break(1u);
LABEL_16:
        __break(1u);
LABEL_17:
        __break(1u);
      }
      uint64_t result = sub_1000053A0((int)v4, v11, a1);
      unint64_t v12 = v9 | 0x4000000000000000;
      *id v5 = v4;
LABEL_13:
      v5[1] = v12;
      return result;
    case 2uLL:
      *(void *)&long long v14 = *v2;
      *((void *)&v14 + 1) = v3 & 0x3FFFFFFFFFFFFFFFLL;
      Data.LargeSlice.ensureUniqueReference()();
      uint64_t result = sub_1000053A0(*(void *)(v14 + 16), *(void *)(v14 + 24), a1);
      unint64_t v12 = *((void *)&v14 + 1) | 0x8000000000000000;
      *uint64_t v2 = v14;
      goto LABEL_13;
    case 3uLL:
      *(void *)((char *)&v14 + 7) = 0;
      *(void *)&long long v14 = 0;
      return sub_100132630((uint64_t)&v14, (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))a1, a2, 0);
    default:
      *(void *)&long long v14 = *v2;
      WORD4(v14) = v3;
      BYTE10(v14) = BYTE2(v3);
      BYTE11(v14) = BYTE3(v3);
      BYTE12(v14) = BYTE4(v3);
      BYTE13(v14) = BYTE5(v3);
      BYTE14(v14) = BYTE6(v3);
      uint64_t result = sub_100132630((uint64_t)&v14, (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))a1, a2, BYTE6(v3));
      unint64_t v8 = DWORD2(v14) | ((unint64_t)BYTE12(v14) << 32) | ((unint64_t)BYTE13(v14) << 40) | ((unint64_t)BYTE14(v14) << 48);
      *uint64_t v2 = v14;
      v2[1] = v8;
      return result;
  }
}

uint64_t sub_100033264(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10002572C(&qword_10021BB20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000332CC(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

BOOL sub_1000332E0(atomic_uchar *a1, int a2, unsigned __int8 a3)
{
  int v3 = a2;
  atomic_compare_exchange_strong(a1, (unsigned __int8 *)&v3, a3);
  return v3 == a2;
}

uint64_t sub_1000332F4(atomic_uchar *a1, unsigned __int8 a2)
{
  return atomic_fetch_add_explicit(a1, a2, memory_order_relaxed) & 1;
}

uint64_t sub_100033300(atomic_uchar *a1, char a2)
{
  return atomic_fetch_add_explicit(a1, -a2, memory_order_relaxed) & 1;
}

uint64_t sub_100033310(unsigned char *a1)
{
  return *a1 & 1;
}

unsigned char *sub_10003331C(unsigned char *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

void *sub_100033324(uint64_t a1)
{
  uint64_t result = malloc_type_malloc(8uLL, 0x100004000313F17uLL);
  *uint64_t result = a1;
  return result;
}

BOOL sub_100033360(atomic_ullong *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = a2;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, a3);
  return v3 == a2;
}

unint64_t sub_100033374(atomic_ullong *a1, unint64_t a2)
{
  return atomic_fetch_add_explicit(a1, a2, memory_order_relaxed);
}

unint64_t sub_10003337C(atomic_ullong *a1, uint64_t a2)
{
  return atomic_fetch_add_explicit(a1, -a2, memory_order_relaxed);
}

unsigned int *sub_100033388(unsigned int *result)
{
  return result;
}

uint64_t sub_100033390(uint64_t a1)
{
  return *(void *)a1;
}

void *sub_100033398(void *result, uint64_t a2)
{
  *uint64_t result = a2;
  return result;
}

BOOL sub_1000333A0(atomic_uchar *a1, int a2, unsigned __int8 a3)
{
  int v3 = a2;
  atomic_compare_exchange_strong(a1, (unsigned __int8 *)&v3, a3);
  return v3 == a2;
}

uint64_t sub_1000333B4(atomic_uchar *a1, unsigned __int8 a2)
{
  return (char)atomic_fetch_add_explicit(a1, a2, memory_order_relaxed);
}

uint64_t sub_1000333C0(atomic_uchar *a1, char a2)
{
  return (char)atomic_fetch_add_explicit(a1, -a2, memory_order_relaxed);
}

uint64_t sub_1000333D0@<X0>(unsigned int *a1@<X0>, unsigned int a2@<W8>)
{
  return (char)a2;
}

uint64_t sub_1000333DC(char *a1)
{
  return *a1;
}

uint64_t sub_1000333E8(atomic_uchar *a1, unsigned __int8 a2)
{
  return atomic_fetch_add_explicit(a1, a2, memory_order_relaxed);
}

uint64_t sub_1000333F0(atomic_uchar *a1, char a2)
{
  return atomic_fetch_add_explicit(a1, -a2, memory_order_relaxed);
}

unsigned int *sub_1000333FC(unsigned int *result)
{
  return result;
}

_WORD *sub_100033404(__int16 a1)
{
  uint64_t result = malloc_type_malloc(2uLL, 0x1000040BDFB0063uLL);
  *uint64_t result = a1;
  return result;
}

BOOL sub_100033440(atomic_ushort *a1, int a2, unsigned __int16 a3)
{
  int v3 = a2;
  atomic_compare_exchange_strong(a1, (unsigned __int16 *)&v3, a3);
  return v3 == (unsigned __int16)a2;
}

uint64_t sub_100033454(atomic_ushort *a1, unsigned __int16 a2)
{
  return (__int16)atomic_fetch_add_explicit(a1, a2, memory_order_relaxed);
}

uint64_t sub_100033460(atomic_ushort *a1, __int16 a2)
{
  return (__int16)atomic_fetch_add_explicit(a1, -a2, memory_order_relaxed);
}

uint64_t sub_100033470@<X0>(unsigned int *a1@<X0>, unsigned int a2@<W8>)
{
  return (__int16)a2;
}

uint64_t sub_10003347C(__int16 *a1)
{
  return *a1;
}

_WORD *sub_100033488(_WORD *result, __int16 a2)
{
  *uint64_t result = a2;
  return result;
}

BOOL sub_100033490(atomic_ushort *a1, int a2, unsigned __int16 a3)
{
  int v3 = a2;
  atomic_compare_exchange_strong(a1, (unsigned __int16 *)&v3, a3);
  return v3 == a2;
}

uint64_t sub_1000334A4(atomic_ushort *a1, unsigned __int16 a2)
{
  return atomic_fetch_add_explicit(a1, a2, memory_order_relaxed);
}

uint64_t sub_1000334AC(atomic_ushort *a1, __int16 a2)
{
  return atomic_fetch_add_explicit(a1, -a2, memory_order_relaxed);
}

unsigned int *sub_1000334B8(unsigned int *result)
{
  return result;
}

uint64_t sub_1000334C0(unsigned __int16 *a1)
{
  return *a1;
}

_DWORD *sub_1000334C8(int a1)
{
  uint64_t result = malloc_type_malloc(4uLL, 0x100004052888210uLL);
  *uint64_t result = a1;
  return result;
}

BOOL sub_100033504(atomic_uint *a1, int a2, unsigned int a3)
{
  int v3 = a2;
  atomic_compare_exchange_strong(a1, (unsigned int *)&v3, a3);
  return v3 == a2;
}

uint64_t sub_100033518(atomic_uint *a1, unsigned int a2)
{
  return atomic_fetch_add_explicit(a1, a2, memory_order_relaxed);
}

uint64_t sub_100033520(atomic_uint *a1, int a2)
{
  return atomic_fetch_add_explicit(a1, -a2, memory_order_relaxed);
}

unsigned int *sub_10003352C(unsigned int *result)
{
  return result;
}

uint64_t sub_100033534(unsigned int *a1)
{
  return *a1;
}

_DWORD *sub_10003353C(_DWORD *result, int a2)
{
  *uint64_t result = a2;
  return result;
}

void sub_100033788(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000337C4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));

  if (WeakRetained)
  {
    int v3 = *(void (**)(void))(*(void *)(a1 + 32) + 16);
    v3();
  }
}

void sub_10003392C(uint64_t a1, uint64_t a2, void *a3)
{
  id v8 = a3;
  if (v8)
  {
    id v5 = *(void (**)(void))(*(void *)(a1 + 32) + 16);
LABEL_7:
    v5();
    goto LABEL_8;
  }
  if (a2 == 2)
  {
    id v5 = *(void (**)(void))(*(void *)(a1 + 32) + 16);
    goto LABEL_7;
  }
  if (a2 == 1)
  {
    id v5 = *(void (**)(void))(*(void *)(a1 + 32) + 16);
    goto LABEL_7;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = +[NSError errorWithDomain:@"PrivacyProxyUserTierErrorDomain" code:1 userInfo:0];
  (*(void (**)(uint64_t, void, void *))(v6 + 16))(v6, 0, v7);

LABEL_8:
}

int main(int argc, const char **argv, const char **envp)
{
  uint64_t v3 = type metadata accessor for OSSignpostID();
  sub_100026808();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  id v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  static os_signpost_type_t.begin.getter();
  if (qword_100218B80 != -1) {
    swift_once();
  }
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:_:_:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v3);
  type metadata accessor for ServiceState();
  swift_allocObject();
  sub_100033B98();
  dispatch_main();
}

void sub_100033B98()
{
  sub_10000DFE0();
  uint64_t v1 = v0;
  type metadata accessor for OSSignpostID();
  sub_100026808();
  uint64_t v3 = v2;
  __chkstk_darwin(v4);
  sub_100016500();
  *(void *)(v0 + 40) = 0;
  static os_signpost_type_t.begin.getter();
  if (qword_100218B80 != -1) {
    swift_once();
  }
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:_:_:)();
  sub_1000283AC();
  v5();
  signal(15, (void (__cdecl *)(int))sub_100033F74);
  signal(2, (void (__cdecl *)(int))sub_100033F8C);
  id v6 = [objc_allocWithZone((Class)type metadata accessor for ParsecService()) init];
  *(void *)(v0 + 16) = v6;
  sub_100023FA0(0, &qword_100219298);
  id v7 = sub_100033F90();
  *(void *)(v1 + 24) = v7;
  [v7 setDelegate:v6];
  [v7 activate];
  *(void *)(v1 + 32) = sub_100034004();
  sub_100023FA0(0, (unint64_t *)&qword_100219250);
  v18[4] = sub_100037538;
  v18[5] = v1;
  uint64_t v17 = static OS_dispatch_queue.main.getter();
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 1107296256;
  v18[2] = sub_1000085EC;
  v18[3] = &unk_1001FA6A8;
  id v8 = _Block_copy(v18);
  swift_retain();
  swift_release();
  uint64_t v9 = type metadata accessor for DispatchQoS();
  v16[2] = v16;
  sub_100026808();
  uint64_t v11 = v10;
  __chkstk_darwin(v12);
  sub_100021208();
  static DispatchQoS.unspecified.getter();
  type metadata accessor for DispatchWorkItemFlags();
  v16[1] = v16;
  sub_100026808();
  __chkstk_darwin(v13);
  sub_100017CD4();
  v18[0] = _swiftEmptyArrayStorage;
  sub_10002FFEC((unint64_t *)&qword_100219260, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10002572C((uint64_t *)&unk_10021BAF0);
  sub_1000301A0();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  long long v14 = (void *)v17;
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v8);

  sub_1000292E0();
  v15();
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v3 + 8, v9);
  sub_10000DFB8();
}

void sub_100033F78()
{
}

id sub_100033F90()
{
  id v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  NSString v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v2 = [v0 initWithMachServiceName:v1];

  return v2;
}

void **sub_100034004()
{
  uint64_t v0 = type metadata accessor for OSSignpostID();
  sub_100026808();
  uint64_t v2 = v1;
  __chkstk_darwin(v3);
  sub_10000DFD0();
  uint64_t v6 = v5 - v4;
  static os_signpost_type_t.begin.getter();
  if (qword_100218B80 != -1) {
    swift_once();
  }
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  id v7 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  uint64_t v49 = v2 + 8;
  uint64_t v50 = v7;
  v7(v6, v0);
  sub_100023FA0(0, &qword_1002192A0);
  uint64_t v8 = static OS_dispatch_source.makeSignalSource(signal:queue:)();
  uint64_t v46 = static OS_dispatch_source.makeSignalSource(signal:queue:)();
  uint64_t v43 = v8;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v55 = sub_100034670;
  uint64_t v56 = 0;
  aBlock = _NSConcreteStackBlock;
  uint64_t v52 = 1107296256;
  uint64_t v45 = &v53;
  uint64_t v53 = sub_1000085EC;
  uint64_t v54 = &unk_1001FA6D0;
  uint64_t v10 = _Block_copy(&aBlock);
  uint64_t v11 = type metadata accessor for DispatchQoS();
  uint64_t v41 = v35;
  uint64_t v37 = v11;
  sub_100026808();
  uint64_t v36 = v12;
  uint64_t v14 = *(void *)(v13 + 64);
  __chkstk_darwin(v15);
  unint64_t v42 = (v14 + 15) & 0xFFFFFFFFFFFFFFF0;
  unint64_t v16 = (char *)v35 - v42;
  static DispatchQoS.unspecified.getter();
  uint64_t v17 = type metadata accessor for DispatchWorkItemFlags();
  v35[1] = v35;
  uint64_t v39 = v17;
  sub_100026808();
  uint64_t v47 = v6;
  uint64_t v48 = v0;
  uint64_t v19 = v18;
  uint64_t v21 = *(void *)(v20 + 64);
  __chkstk_darwin(v22);
  unint64_t v40 = (v21 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v44 = ObjectType;
  sub_100034684();
  OS_dispatch_source.setEventHandler(qos:flags:handler:)();
  _Block_release(v10);
  uint64_t v38 = *(void *)(v19 + 8);
  sub_1000292E0();
  v23();
  uint64_t v24 = *(void (**)(char *, uint64_t))(v36 + 8);
  v24(v16, v11);
  uint64_t v25 = v46;
  swift_getObjectType();
  uint64_t v55 = sub_10003471C;
  uint64_t v56 = 0;
  aBlock = _NSConcreteStackBlock;
  uint64_t v52 = 1107296256;
  uint64_t v53 = sub_1000085EC;
  uint64_t v54 = &unk_1001FA6F8;
  uint64_t v26 = _Block_copy(&aBlock);
  uint64_t v45 = (uint64_t (**)(uint64_t))v35;
  __chkstk_darwin(v26);
  uint64_t v27 = (char *)v35 - v42;
  uint64_t v28 = static DispatchQoS.unspecified.getter();
  __chkstk_darwin(v28);
  sub_100034684();
  OS_dispatch_source.setEventHandler(qos:flags:handler:)();
  _Block_release(v26);
  sub_1000292E0();
  v29();
  v24(v27, v37);
  uint64_t v30 = v43;
  OS_dispatch_source.resume()();
  OS_dispatch_source.resume()();
  sub_10002572C(&qword_1002192A8);
  uint64_t v31 = swift_allocObject();
  *(_OWORD *)(v31 + 16) = xmmword_1001A2A10;
  *(void *)(v31 + 32) = v30;
  *(void *)(v31 + 40) = v25;
  aBlock = (void **)v31;
  specialized Array._endMutation()();
  id v32 = aBlock;
  static os_signpost_type_t.end.getter();
  uint64_t v33 = v47;
  static OSSignpostID.exclusive.getter();
  sub_100024898();
  v50(v33, v48);
  return v32;
}

uint64_t sub_100034508()
{
  uint64_t v0 = type metadata accessor for OSSignpostID();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = (void (__cdecl *)(int))SIG_IGN.getter();
  signal(15, v4);
  uint64_t v5 = (void (__cdecl *)(int))SIG_IGN.getter();
  signal(2, v5);
  sub_100034E9C();
  static os_signpost_type_t.end.getter();
  if (qword_100218B80 != -1) {
    swift_once();
  }
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

void sub_100034670()
{
}

uint64_t sub_100034684()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

void sub_10003471C()
{
}

void sub_100034730(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for OSSignpostID();
  sub_100026808();
  uint64_t v7 = v6;
  __chkstk_darwin(v8);
  sub_100016500();
  sub_100023FA0(0, (unint64_t *)&qword_1002192B0);
  uint64_t v9 = (void *)static OS_os_log.default.getter();
  static os_log_type_t.debug.getter();
  os_log(_:dso:log:type:_:)();

  static os_signpost_type_t.end.getter();
  if (qword_100218B80 != -1) {
    swift_once();
  }
  sub_10002572C((uint64_t *)&unk_10021BB00);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_1001A2A20;
  *(void *)(v10 + 56) = &type metadata for UInt;
  *(void *)(v10 + 64) = &protocol witness table for UInt;
  *(void *)(v10 + 3sub_100034730((uint64_t)"SIGTERM", 7, 2) = a3;
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:_:_:)();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v3, v5);
  exit(0);
}

void sub_1000348EC()
{
  sub_10000DFE0();
  uint64_t v1 = sub_10002572C(&qword_10021F2D0);
  __chkstk_darwin(v1 - 8);
  sub_100016500();
  type metadata accessor for OSSignpostID();
  sub_100026808();
  uint64_t v3 = v2;
  __chkstk_darwin(v4);
  sub_10000DFD0();
  static os_signpost_type_t.begin.getter();
  if (qword_100218B80 != -1) {
    swift_once();
  }
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  uint64_t v5 = *(void (**)(void))(v3 + 8);
  sub_1000283AC();
  v6();
  uint64_t v7 = dispatch_group_create();
  dispatch_group_enter(v7);
  uint64_t v8 = self;
  id v9 = [v8 standardUserDefaults];
  sub_10006749C();

  id v10 = [v8 standardUserDefaults];
  sub_10002572C(&qword_100219280);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1001A2A30;
  *(void *)(inited + 3sub_100034730((uint64_t)"SIGTERM", 7, 2) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v12;
  *(void *)(inited + 7sub_100034730((uint64_t)"SIGTERM", 7, 2) = &type metadata for UInt32;
  *(_DWORD *)(inited + 48) = 172800;
  *(void *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 88) = v13;
  *(void *)(inited + 120) = &type metadata for Int64;
  *(void *)(inited + 96) = 600;
  *(void *)(inited + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 136) = v14;
  *(void *)(inited + 168) = &type metadata for Int64;
  *(void *)(inited + 144) = 180;
  Dictionary.init(dictionaryLiteral:)();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v10 registerDefaults:isa];

  static os_signpost_type_t.begin.getter();
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  sub_1000283AC();
  v5();
  static TaskPriority.userInitiated.getter();
  uint64_t v16 = type metadata accessor for TaskPriority();
  sub_10002538C(v0, 0, 1, v16);
  uint64_t v17 = (void *)swift_allocObject();
  v17[2] = 0;
  v17[3] = 0;
  v17[4] = v7;
  v7;
  sub_1001013F0(v0);
  swift_release();
  sub_1000374D8(v0);
  static os_signpost_type_t.end.getter();
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  sub_1000283AC();
  v5();
  sub_10000DFB8();
}

uint64_t sub_100034CA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[2] = a4;
  uint64_t v5 = type metadata accessor for OSSignpostID();
  v4[3] = v5;
  void v4[4] = *(void *)(v5 - 8);
  v4[5] = swift_task_alloc();
  return _swift_task_switch(sub_100034D68, 0, 0);
}

uint64_t sub_100034D68()
{
  uint64_t v1 = *(NSObject **)(v0 + 16);
  id v2 = [self defaultManager];
  NSFileManager.createRequiredCacheSubdirectories()();

  dispatch_group_leave(v1);
  static os_signpost_type_t.end.getter();
  if (qword_100218B80 != -1) {
    swift_once();
  }
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  sub_1000283AC();
  v3();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

void sub_100034E9C()
{
  sub_10000DFE0();
  type metadata accessor for OSSignpostID();
  sub_100026808();
  uint64_t v2 = v1;
  __chkstk_darwin(v3);
  sub_100025770();
  if (qword_100218B80 != -1) {
    swift_once();
  }
  static OSSignpostID.exclusive.getter();
  sub_100024898();
  uint64_t v4 = *(void (**)(uint64_t))(v2 + 8);
  uint64_t v5 = sub_1000263C0();
  v4(v5);
  sub_1000348EC();
  uint64_t v7 = v6;
  sub_100035004();
  uint64_t v9 = v8;
  sub_10003559C(v8);
  sub_100035C40();
  *(void *)(v0 + 40) = v9;
  swift_retain();
  swift_release();
  OS_dispatch_group.wait()();

  swift_release();
  static os_signpost_type_t.end.getter();
  static OSSignpostID.exclusive.getter();
  sub_100024898();
  uint64_t v10 = sub_1000263C0();
  v4(v10);
  sub_10000DFB8();
}

void sub_100035004()
{
  sub_10000DFE0();
  uint64_t v2 = type metadata accessor for OSSignpostID();
  sub_100026808();
  uint64_t v4 = v3;
  __chkstk_darwin(v5);
  sub_100021208();
  static os_signpost_type_t.begin.getter();
  if (qword_100218B88 != -1) {
    swift_once();
  }
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  uint64_t v20 = v0;
  uint64_t v21 = v4 + 8;
  uint64_t v22 = v2;
  uint64_t v19 = v6;
  sub_1000292E0();
  v7();
  type metadata accessor for Assembly();
  swift_allocObject();
  uint64_t v8 = sub_10007ECCC();
  *(void *)(swift_allocObject() + 24) = &off_1001FD220;
  swift_unknownObjectWeakInit();
  swift_retain();
  swift_retain();
  sub_100035F18();
  swift_release();
  swift_release();
  swift_release();
  sub_100017C74();
  sub_100018148(0x7473726966206E6FLL, 0xED000064616F6C20);
  swift_unknownObjectRelease();
  uint64_t v9 = swift_allocObject();
  swift_weakInit();
  swift_retain();
  swift_retain();
  if ((sub_1000146F0() & 1) == 0) {
    sub_10006850C((uint64_t)sub_1000371C4, v9);
  }
  swift_release_n();
  swift_release();
  v18[2] = v8[33];
  v24[4] = sub_1000371CC;
  void v24[5] = v8;
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 1107296256;
  v24[2] = sub_1000085EC;
  v24[3] = &unk_1001FA658;
  uint64_t v10 = _Block_copy(v24);
  uint64_t v11 = type metadata accessor for DispatchQoS();
  v18[1] = v18;
  sub_100026808();
  uint64_t v13 = v12;
  __chkstk_darwin(v14);
  sub_100017CD4();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  type metadata accessor for DispatchWorkItemFlags();
  v18[0] = v18;
  sub_100026808();
  __chkstk_darwin(v15);
  sub_10000DFD0();
  uint64_t v23 = _swiftEmptyArrayStorage;
  sub_10002FFEC((unint64_t *)&qword_100219260, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10002572C((uint64_t *)&unk_10021BAF0);
  sub_1000301A0();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v10);
  sub_1000292E0();
  v16();
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v1, v11);
  swift_release();
  static os_signpost_type_t.end.getter();
  uint64_t v17 = v20;
  static OSSignpostID.exclusive.getter();
  sub_100024898();
  v19(v17, v22);
  sub_10000DFB8();
}

uint64_t sub_100035494()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_100017C74();
    swift_release();
    if (sub_100014774()) {
      sub_100018148(0x6F63207075746573, 0xEF646574656C706DLL);
    }
    return swift_unknownObjectRelease();
  }
  return result;
}

void sub_10003552C()
{
  id v0 = [self defaultCenter];
  [v0 postNotificationName:@"PARStartup" object:0];
}

uint64_t sub_10003559C(uint64_t a1)
{
  uint64_t v24 = a1;
  uint64_t v2 = type metadata accessor for OSSignpostID();
  sub_100026808();
  uint64_t v4 = v3;
  __chkstk_darwin(v5);
  sub_100025770();
  if (qword_100218B80 != -1) {
    swift_once();
  }
  static OSSignpostID.exclusive.getter();
  sub_100024898();
  uint64_t v25 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8);
  uint64_t v6 = sub_10002AC14();
  v7(v6);
  sub_100023FA0(0, (unint64_t *)&qword_100219250);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v8 - 8);
  sub_100017CD4();
  static DispatchQoS.default.getter();
  uint64_t v9 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v9);
  sub_10000DFD0();
  aBlock = 0;
  sub_10002FFEC((unint64_t *)&qword_10021B3D0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  dispatch thunk of OptionSet.init(rawValue:)();
  type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v23 = v2;
  sub_100026808();
  __chkstk_darwin(v10);
  (*(void (**)(char *, void))(v12 + 104))((char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:));
  uint64_t v13 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v14 = (const char *)kNSURLSessionLaunchOnDemandNotificationName;
  uint64_t v30 = _CPStartNetworkSearchFeedback.redactUnused();
  uint64_t v31 = 0;
  aBlock = _NSConcreteStackBlock;
  uint64_t v27 = 1107296256;
  uint64_t v28 = sub_1000359F4;
  uint64_t v29 = &unk_1001FA590;
  uint64_t v15 = _Block_copy(&aBlock);
  uint64_t v16 = v13;
  xpc_set_event_stream_handler(v14, v16, v15);
  _Block_release(v15);

  uint64_t v17 = swift_allocObject();
  swift_weakInit();
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = v17;
  *(void *)(v18 + 24) = _xpc_event_key_name;
  uint64_t v30 = sub_100037184;
  uint64_t v31 = v18;
  aBlock = _NSConcreteStackBlock;
  uint64_t v27 = 1107296256;
  uint64_t v28 = sub_1000359F4;
  uint64_t v29 = &unk_1001FA608;
  uint64_t v19 = _Block_copy(&aBlock);
  uint64_t v20 = v16;
  swift_release();
  xpc_set_event_stream_handler("com.apple.notifyd.matching", v20, v19);
  _Block_release(v19);

  static os_signpost_type_t.end.getter();
  static OSSignpostID.exclusive.getter();
  sub_100024898();
  return v25(v1, v23);
}

uint64_t sub_1000359F4(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  uint64_t v2 = swift_unknownObjectRetain();
  v1(v2);
  swift_release();

  return swift_unknownObjectRelease();
}

uint64_t sub_100035A54(void *a1, uint64_t a2, const char *a3)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    string = xpc_dictionary_get_string(a1, a3);
    if (string)
    {
      uint64_t v7 = string;
      if (!strcmp("com.apple.proactive.queries.clearData", string))
      {
        if (qword_100218B68 != -1) {
          swift_once();
        }
        uint64_t v9 = type metadata accessor for Logger();
        sub_10002A10C(v9, (uint64_t)qword_100236A50);
        uint64_t v10 = Logger.logObject.getter();
        os_log_type_t v11 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v10, v11))
        {
          uint64_t v12 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v12 = 0;
          _os_log_impl((void *)&_mh_execute_header, v10, v11, "Received com.apple.proactive.queries.clearData notification: Clearing Spotlight engagement cache", v12, 2u);
          swift_slowDealloc();
        }

        if (!sub_10007E168()) {
          return swift_release();
        }
        sub_100051088(2u);
      }
      else if (!strcmp("com.apple.parsecd.queries.clearData", v7))
      {
        sub_100006B58();
        sub_100111C18();
      }
      else
      {
        if (strcmp("com.apple.purplebuddy.setupexited", v7)) {
          return swift_release();
        }
        sub_100017C74();
        char v8 = sub_100014774();
        swift_unknownObjectRelease();
        if ((v8 & 1) == 0) {
          return swift_release();
        }
        sub_100017C74();
        sub_100018148(0xD000000000000016, 0x80000001001B0850);
      }
      swift_unknownObjectRelease();
    }
    return swift_release();
  }
  return result;
}

void sub_100035C40()
{
  sub_10000DFE0();
  type metadata accessor for OSSignpostID();
  sub_100026808();
  uint64_t v1 = v0;
  __chkstk_darwin(v2);
  sub_100025770();
  if (qword_100218B80 != -1) {
    swift_once();
  }
  static OSSignpostID.exclusive.getter();
  sub_100024898();
  uint64_t v3 = *(void (**)(uint64_t))(v1 + 8);
  uint64_t v4 = sub_10002AC14();
  v3(v4);
  type metadata accessor for FlusherClient();
  id v5 = [self standardUserDefaults];
  id v6 = [self defaultManager];
  id v7 = sub_10000ACC8();
  sub_1000FDAE0(v5, v6, (uint64_t)v7, v8);

  swift_bridgeObjectRelease();
  static os_signpost_type_t.end.getter();
  static OSSignpostID.exclusive.getter();
  sub_100024898();
  uint64_t v9 = sub_10002AC14();
  v3(v9);
  sub_10000DFB8();
}

uint64_t sub_100035DEC()
{
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t sub_100035E24()
{
  sub_100035DEC();

  return _swift_deallocClassInstance(v0, 48, 7);
}

uint64_t sub_100035E58(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = 0;
    uint64_t v3 = (uint64_t *)(a1 + 32);
    do
    {
      uint64_t v5 = *v3++;
      uint64_t v4 = v5;
      if ((v5 & ~v2) == 0) {
        uint64_t v4 = 0;
      }
      v2 |= v4;
      --v1;
    }
    while (v1);
  }
  else
  {
    uint64_t v2 = 0;
  }
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t variable initialization expression of AtomicValue.lock()
{
  return Lock.init()();
}

uint64_t type metadata accessor for ServiceState()
{
  return self;
}

uint64_t variable initialization expression of Lock.mutex()
{
  return sub_100024254();
}

uint64_t variable initialization expression of ConditionLock.cond()
{
  return sub_100024254();
}

uint64_t sub_100035F18()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  uint64_t v2 = (uint64_t)&v1[4];
  uint64_t v3 = v1 + 9;
  os_unfair_lock_lock(v1 + 9);
  sub_1000372D4(v2, &v5);
  os_unfair_lock_unlock(v3);
  return v5;
}

uint64_t sub_100035F7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = *(unsigned __int8 *)(a1 + 16);
  if ((v3 & 1) == 0)
  {
    unsigned __int8 v5 = *(NSObject **)a1;
    uint64_t v4 = *(void **)(a1 + 8);
    *(void *)a1 = a2;
    *(void *)(a1 + 8) = a3;
    *(unsigned char *)(a1 + 16) = 1;
    swift_retain();
    dispatch_group_leave(v5);
    sub_1000313DC(v5, v4, 0);
  }
  return v3 ^ 1u;
}

id variable initialization expression of SessionFilename.processID()
{
  id v0 = [self processInfo];
  id v1 = [v0 processIdentifier];

  return v1;
}

void type metadata accessor for PAREnabledStatus(uint64_t a1)
{
}

__n128 sub_100036054(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 3sub_100034730((uint64_t)"SIGTERM", 7, 2) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_100036068(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_100036088(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 48) = v3;
  return result;
}

void type metadata accessor for _opaque_pthread_cond_t(uint64_t a1)
{
}

__n128 initializeWithTake for AvroRecord(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 3sub_100034730((uint64_t)"SIGTERM", 7, 2) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t sub_1000360E8(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 64)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_100036108(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 64) = v3;
  return result;
}

void type metadata accessor for _opaque_pthread_mutex_t(uint64_t a1)
{
}

void type metadata accessor for _TimingDataOptions(uint64_t a1)
{
}

void type metadata accessor for CLAuthorizationStatus(uint64_t a1)
{
}

void type metadata accessor for TRIDeploymentEnvironment(uint64_t a1)
{
}

uint64_t initializeBufferWithCopyOfBuffer for NotificationBarrier.State(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

void *sub_1000361C8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xD0uLL);
}

uint64_t sub_1000361D0(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 208)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_1000361F0(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 200) = 0;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 15sub_100034730((uint64_t)"SIGTERM", 7, 2) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 7sub_100034730((uint64_t)"SIGTERM", 7, 2) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 208) = v3;
  return result;
}

void type metadata accessor for CC_SHA512state_st(uint64_t a1)
{
}

void type metadata accessor for compression_status(uint64_t a1)
{
}

__n128 initializeWithTake for AppDistEntry(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 3sub_100034730((uint64_t)"SIGTERM", 7, 2) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t sub_10003628C(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 == 1 || !*(unsigned char *)(a1 + 40))
    {
      if (*(void *)a1) {
        int v2 = -1;
      }
      else {
        int v2 = 0;
      }
    }
    else
    {
      int v2 = *(_DWORD *)a1 + 1;
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t sub_1000362C8(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 - 2;
    if (a3 >= 2) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if (a3 >= 2) {
      *(unsigned char *)(result + 40) = 0;
    }
    if (a2) {
      *(void *)__n128 result = 0;
    }
  }
  return result;
}

void type metadata accessor for compression_stream(uint64_t a1)
{
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
}

void type metadata accessor for _CPKnownFeedbackType(uint64_t a1)
{
}

void type metadata accessor for PrivacyProxyUserTier(uint64_t a1)
{
}

void type metadata accessor for URLResourceKey(uint64_t a1)
{
}

void type metadata accessor for FileProtectionType(uint64_t a1)
{
}

uint64_t sub_100036388()
{
  return sub_1000377D4(*v0, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t sub_1000363B8(uint64_t a1, id *a2)
{
  return sub_100037724(a1, a2);
}

uint64_t sub_1000363D0(uint64_t a1, id *a2)
{
  return sub_1000376A4(a1, a2) & 1;
}

uint64_t sub_1000363EC(uint64_t a1, uint64_t a2)
{
  return a2 | a1;
}

uint64_t sub_1000363F4(uint64_t a1, uint64_t a2)
{
  return a2 & a1;
}

uint64_t sub_1000363FC(uint64_t a1, uint64_t a2)
{
  return a2 ^ a1;
}

BOOL sub_100036404(void *a1, uint64_t a2)
{
  uint64_t v3 = *v2 & a2;
  if (v3 != a2) {
    *v2 |= a2;
  }
  *a1 = a2;
  return v3 != a2;
}

uint64_t sub_100036430(uint64_t a1)
{
  uint64_t result = *v1 & a1;
  if (result) {
    *v1 &= ~a1;
  }
  return result;
}

uint64_t sub_100036454(uint64_t a1)
{
  uint64_t v2 = *v1;
  *v1 |= a1;
  return v2 & a1;
}

uint64_t sub_10003646C(uint64_t result)
{
  *v1 |= result;
  return result;
}

uint64_t sub_10003647C(uint64_t result)
{
  *v1 &= result;
  return result;
}

uint64_t sub_10003648C(uint64_t result)
{
  *v1 ^= result;
  return result;
}

uint64_t sub_10003649C(uint64_t a1, uint64_t a2)
{
  return a2 & ~a1;
}

BOOL sub_1000364A4(uint64_t a1, uint64_t a2)
{
  return (a2 & ~a1) == 0;
}

BOOL sub_1000364B0(uint64_t a1, uint64_t a2)
{
  return (a2 & a1) == 0;
}

BOOL sub_1000364BC(uint64_t a1, uint64_t a2)
{
  return (a1 & ~a2) == 0;
}

BOOL sub_1000364C8(uint64_t a1)
{
  return a1 == 0;
}

uint64_t sub_1000364D4(uint64_t result)
{
  *v1 &= ~result;
  return result;
}

BOOL sub_1000364E4(uint64_t *a1, uint64_t *a2)
{
  return static SQLiteViewProvider.== infix(_:_:)(*a1, *a2);
}

void sub_1000364F0()
{
  sub_10000DFF8();
  _CPStartNetworkSearchFeedback.redactUnused()();
  *id v0 = v1;
}

_DWORD *sub_100036518@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(unsigned char *)(a2 + 4) = 0;
  return result;
}

BOOL sub_100036528(int *a1, int *a2)
{
  return sub_1000B9634(*a1, *a2);
}

void *sub_100036534@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_100036540@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_10003659C(*a1);
  *(_DWORD *)a2 = result;
  *(unsigned char *)(a2 + 4) = BYTE4(result) & 1;
  return result;
}

void sub_100036574()
{
  sub_1000274A4();
  _CPStartNetworkSearchFeedback.redactUnused()();
  *id v0 = v1;
}

uint64_t sub_10003659C(uint64_t result)
{
  return result;
}

uint64_t sub_1000365B8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = variable initialization expression of SQLiteBaseFunction.database();
  *a1 = result;
  return result;
}

uint64_t sub_1000365E0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1000363EC(*a1, *v2);
  *a2 = result;
  return result;
}

uint64_t sub_100036610@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1000363F4(*a1, *v2);
  *a2 = result;
  return result;
}

uint64_t sub_100036640@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1000363FC(*a1, *v2);
  *a2 = result;
  return result;
}

BOOL sub_100036670(void *a1, uint64_t *a2)
{
  return sub_100036404(a1, *a2);
}

uint64_t sub_100036678@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_100036430(*a1);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t sub_1000366AC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_100036454(*a1);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t sub_1000366E0(uint64_t *a1)
{
  return sub_10003646C(*a1);
}

uint64_t sub_1000366E8(uint64_t *a1)
{
  return sub_10003647C(*a1);
}

uint64_t sub_1000366F0(uint64_t *a1)
{
  return sub_10003648C(*a1);
}

uint64_t sub_1000366F8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_10003649C(*a1, *v2);
  *a2 = result;
  return result;
}

BOOL sub_100036728(uint64_t *a1)
{
  return sub_1000364A4(*a1, *v1);
}

BOOL sub_100036734(uint64_t *a1)
{
  return sub_1000364B0(*a1, *v1);
}

BOOL sub_100036740(uint64_t *a1)
{
  return sub_1000364BC(*a1, *v1);
}

BOOL sub_10003674C()
{
  return sub_1000364C8(*v0);
}

uint64_t sub_100036754(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return SetAlgebra.init<A>(_:)(a1, a4, a2, a5, a3);
}

uint64_t sub_10003676C(uint64_t *a1)
{
  return sub_1000364D4(*a1);
}

uint64_t sub_100036774(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v4 = a2(v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_1000367B4()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100036808()
{
  return sub_100036774(*v0, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

NSString sub_100036838@<X0>(void *a1@<X8>)
{
  NSString result = sub_10003779C();
  *a1 = result;
  return result;
}

uint64_t sub_100036860()
{
  return sub_100036774(*v0, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t sub_100036890()
{
  return sub_1000367B4();
}

void sub_1000368AC(_DWORD *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_1000368B8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_100035E58(a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000368E0(void *a1, void *a2)
{
  return sub_1000B9640(*a1, *a2);
}

void sub_1000368EC(uint64_t a1@<X8>)
{
  sub_100036920();
  *(void *)a1 = v2;
  *(unsigned char *)(a1 + 8) = v3 & 1;
}

uint64_t sub_10003692C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = j___sSS10FoundationE36_unconditionallyBridgeFromObjectiveCySSSo8NSStringCSgFZ(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100036958(uint64_t a1)
{
  uint64_t v2 = sub_100036B7C(&qword_100219310, type metadata accessor for Name);
  uint64_t v3 = sub_100036B7C(&qword_100219318, type metadata accessor for Name);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

void *sub_100036A14@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

void sub_100036A24(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_100036A30(uint64_t a1)
{
  uint64_t v2 = sub_100036B7C((unint64_t *)&qword_100219240, type metadata accessor for FileAttributeKey);
  uint64_t v3 = sub_100036B7C(&qword_100219248, type metadata accessor for FileAttributeKey);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100036AEC()
{
  return sub_100036B7C(&qword_1002191B8, type metadata accessor for FileAttributeKey);
}

uint64_t sub_100036B34()
{
  return sub_100036B7C(&qword_1002191C0, type metadata accessor for FileAttributeKey);
}

uint64_t sub_100036B7C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100036BC4(uint64_t a1)
{
  uint64_t v2 = sub_100036B7C(&qword_100219230, type metadata accessor for FileProtectionType);
  uint64_t v3 = sub_100036B7C(&qword_100219238, type metadata accessor for FileProtectionType);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100036C80()
{
  return sub_100036B7C(&qword_1002191C8, type metadata accessor for FileProtectionType);
}

uint64_t sub_100036CC8()
{
  return sub_100036B7C(&qword_1002191D0, type metadata accessor for FileProtectionType);
}

uint64_t sub_100036D10@<X0>(void *a1@<X8>)
{
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_100036D58()
{
  uint64_t v1 = sub_10000DFF8();
  uint64_t result = j___sSS10FoundationE36_unconditionallyBridgeFromObjectiveCySSSo8NSStringCSgFZ(v1);
  *id v0 = result;
  v0[1] = v3;
  return result;
}

uint64_t sub_100036D84(uint64_t a1)
{
  uint64_t v2 = sub_100036B7C(&qword_100219220, type metadata accessor for URLResourceKey);
  uint64_t v3 = sub_100036B7C(&qword_100219228, type metadata accessor for URLResourceKey);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100036E40()
{
  return sub_1000377D4(*v0, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t sub_100036E70()
{
  return sub_1000367B4();
}

Swift::Int sub_100036E78()
{
  return sub_100007A2C();
}

uint64_t sub_100036E80()
{
  return sub_10003721C();
}

uint64_t sub_100036E8C()
{
  return sub_100036B7C(&qword_1002191D8, type metadata accessor for FileProtectionType);
}

uint64_t sub_100036ED4()
{
  return sub_100036B7C(&qword_1002191E0, type metadata accessor for URLResourceKey);
}

uint64_t sub_100036F1C()
{
  return sub_100036B7C(&qword_1002191E8, type metadata accessor for URLResourceKey);
}

uint64_t sub_100036F64()
{
  return sub_100036B7C(&qword_1002191F0, type metadata accessor for URLResourceKey);
}

uint64_t sub_100036FAC()
{
  return sub_100036B7C(&qword_1002191F8, type metadata accessor for _TimingDataOptions);
}

uint64_t sub_100036FF4()
{
  return sub_100036B7C(&qword_100219200, type metadata accessor for _TimingDataOptions);
}

uint64_t sub_10003703C()
{
  return sub_100036B7C(&qword_100219208, type metadata accessor for _TimingDataOptions);
}

uint64_t sub_100037084()
{
  return sub_100036B7C(&qword_100219210, type metadata accessor for _TimingDataOptions);
}

uint64_t sub_1000370CC()
{
  return sub_100036B7C(&qword_100219218, type metadata accessor for FileAttributeKey);
}

uint64_t sub_100037114()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10003714C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100037184(void *a1)
{
  return sub_100035A54(a1, *(void *)(v1 + 16), *(const char **)(v1 + 24));
}

uint64_t sub_10003718C()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000371C4()
{
  return sub_100035494();
}

void sub_1000371CC()
{
}

uint64_t sub_1000371D4(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_10003721C()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v2 = v1;
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_1000372A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  uint64_t result = sub_100035F7C(a1, a2, a3);
  if (!v4) {
    *a4 = result & 1;
  }
  return result;
}

uint64_t sub_1000372D4@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  return sub_1000372A4(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t sub_1000372F0()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100037330(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  id v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *id v7 = v2;
  v7[1] = sub_1000373E4;
  return sub_100034CA8(a1, v4, v5, v6);
}

uint64_t sub_1000373E4()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_1000374D8(uint64_t a1)
{
  uint64_t v2 = sub_10002572C(&qword_10021F2D0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100037538()
{
  return sub_100034508();
}

void type metadata accessor for SFResultType(uint64_t a1)
{
}

void type metadata accessor for SFQueryTopicType(uint64_t a1)
{
}

void type metadata accessor for PARReplyType(uint64_t a1)
{
}

void type metadata accessor for _CPFeedbackType(uint64_t a1)
{
}

void type metadata accessor for Name(uint64_t a1)
{
}

void type metadata accessor for DelayedRequestDisposition(uint64_t a1)
{
}

void type metadata accessor for ICMusicSubscriptionStatusType(uint64_t a1)
{
}

uint64_t sub_1000375CC()
{
  return sub_100036B7C(&qword_1002192F8, type metadata accessor for Name);
}

uint64_t sub_100037614()
{
  return sub_100036B7C(&qword_100219300, type metadata accessor for Name);
}

uint64_t sub_10003765C()
{
  return sub_100036B7C(&qword_100219308, type metadata accessor for Name);
}

uint64_t sub_1000376A4(uint64_t a1, id *a2)
{
  char v3 = static String._conditionallyBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_100037724(uint64_t a1, id *a2)
{
  uint64_t result = static String._forceBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return result;
}

NSString sub_10003779C()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v0 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1000377D4(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v4 = a2(v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_10003785C()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  uint64_t v2 = v1 + 4;
  uint64_t v3 = v1 + 12;
  os_unfair_lock_lock(v1 + 12);
  sub_1000378BC(v2, &v5);
  os_unfair_lock_unlock(v3);
  return v5;
}

void *sub_1000378BC@<X0>(void *result@<X0>, void *a2@<X8>)
{
  if (*result)
  {
    uint64_t v3 = (void *)result[3];
    swift_retain();
    id v4 = v3;
    uint64_t result = (void *)swift_release();
  }
  else
  {
    uint64_t v3 = 0;
  }
  *a2 = v3;
  return result;
}

uint64_t (*sub_10003791C())()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  uint64_t v2 = (uint64_t *)&v1[4];
  uint64_t v3 = v1 + 12;
  os_unfair_lock_lock(v1 + 12);
  sub_1000379C8(v2, &v6);
  os_unfair_lock_unlock(v3);
  if (!(void)v6) {
    return 0;
  }
  long long v5 = v6;
  *(_OWORD *)(swift_allocObject() + 16) = v5;
  return sub_1000383DC;
}

uint64_t sub_1000379C8@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    uint64_t v4 = a1[1];
    swift_retain();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v3;
    *(void *)(result + 24) = v4;
    long long v6 = sub_100038414;
  }
  else
  {
    long long v6 = 0;
    uint64_t result = 0;
  }
  *a2 = v6;
  a2[1] = result;
  return result;
}

uint64_t sub_100037A44(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = dispatch_group_create();
  dispatch_group_enter(v9);
  sub_10002572C(&qword_100219420);
  uint64_t v10 = swift_allocObject();
  *(_DWORD *)(v10 + 48) = 0;
  *(void *)(v10 + 16) = a3;
  *(void *)(v10 + 24) = a4;
  *(void *)(v10 + 3sub_100034730((uint64_t)"SIGTERM", 7, 2) = a2;
  *(void *)(v10 + 40) = v9;
  *(void *)(v4 + 16) = v10;
  os_log_type_t v11 = v9;
  swift_retain();
  [a2 addObserver:v4 selector:"handleEvent:" name:a1 object:0];

  swift_release();
  return v4;
}

uint64_t sub_100037B00(uint64_t a1)
{
  uint64_t v2 = sub_10003785C();
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    uint64_t v4 = type metadata accessor for DispatchTime();
    v22[3] = v22;
    sub_100020C48();
    uint64_t v6 = v5;
    uint64_t v8 = __chkstk_darwin(v7);
    uint64_t v10 = (char *)v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
    v22[2] = v22;
    __chkstk_darwin(v8);
    uint64_t v12 = (char *)v22 - v11;
    static DispatchTime.now()();
    uint64_t v13 = type metadata accessor for DispatchTimeInterval();
    v22[1] = v22;
    sub_100020C48();
    uint64_t v15 = v14;
    __chkstk_darwin(v16);
    uint64_t v18 = (void *)((char *)v22 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
    *uint64_t v18 = a1;
    (*(void (**)(void *, void, uint64_t))(v15 + 104))(v18, enum case for DispatchTimeInterval.milliseconds(_:), v13);
    + infix(_:_:)();
    (*(void (**)(void *, uint64_t))(v15 + 8))(v18, v13);
    uint64_t v19 = *(void (**)(char *, uint64_t))(v6 + 8);
    v19(v12, v4);
    OS_dispatch_group.wait(timeout:)();
    v19(v10, v4);
    sub_100037D0C();
    LOBYTE(v1sub_100034730((uint64_t)"SIGTERM", 7, 2) = static DispatchTimeoutResult.== infix(_:_:)();

    char v20 = v12 ^ 1;
  }
  else
  {
    char v20 = 1;
  }
  return v20 & 1;
}

void sub_100037D0C()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  uint64_t v2 = (uint64_t *)&v1[4];
  uint64_t v3 = v1 + 12;
  os_unfair_lock_lock(v1 + 12);
  sub_100038334(v2);
  os_unfair_lock_unlock(v3);
}

uint64_t (*sub_100037D60(uint64_t a1))()
{
  uint64_t result = sub_10003791C();
  if (result)
  {
    uint64_t v3 = (uint64_t)result;
    if (((uint64_t (*)(uint64_t))result)(a1)) {
      sub_100037D0C();
    }
    return (uint64_t (*)())sub_1000332CC(v3);
  }
  return result;
}

void sub_100037ED8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v6 = (void *)a1[2];
    uint64_t v5 = (void *)a1[3];
    uint64_t v7 = a1[1];
    swift_retain();
    id v8 = v6;
    uint64_t v9 = v5;
    sub_100038350(v2, v7, v6, v5);
    swift_release();
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    dispatch_group_leave(v9);
    [v8 removeObserver:a2];
  }
}

uint64_t sub_100037F94()
{
  swift_release();

  return _swift_deallocClassInstance(v0, 24, 7);
}

uint64_t type metadata accessor for NotificationBarrier()
{
  return self;
}

void destroy for NotificationBarrier.State(uint64_t a1)
{
  if (*(void *)a1 >= 0xFFFFFFFFuLL)
  {
    swift_release();

    uint64_t v2 = *(void **)(a1 + 24);
  }
}

uint64_t initializeWithCopy for NotificationBarrier.State(uint64_t a1, uint64_t a2)
{
  if (*(void *)a2 < 0xFFFFFFFFuLL)
  {
    long long v8 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v8;
  }
  else
  {
    uint64_t v3 = *(void *)(a2 + 8);
    uint64_t v4 = *(void **)(a2 + 16);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v3;
    uint64_t v5 = *(void **)(a2 + 24);
    *(void *)(a1 + 16) = v4;
    *(void *)(a1 + 24) = v5;
    swift_retain();
    id v6 = v4;
    id v7 = v5;
  }
  return a1;
}

uint64_t assignWithCopy for NotificationBarrier.State(uint64_t a1, unint64_t *a2)
{
  unint64_t v4 = *a2;
  if (*(void *)a1 < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      unint64_t v12 = a2[1];
      *(void *)a1 = v4;
      *(void *)(a1 + 8) = v12;
      uint64_t v13 = (void *)a2[2];
      *(void *)(a1 + 16) = v13;
      uint64_t v14 = (void *)a2[3];
      *(void *)(a1 + 24) = v14;
      swift_retain();
      id v15 = v13;
      id v16 = v14;
      return a1;
    }
LABEL_7:
    long long v17 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v17;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_release();

    goto LABEL_7;
  }
  unint64_t v5 = a2[1];
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  swift_retain();
  swift_release();
  id v6 = (void *)a2[2];
  id v7 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = v6;
  id v8 = v6;

  uint64_t v9 = (void *)a2[3];
  uint64_t v10 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = v9;
  id v11 = v9;

  return a1;
}

__n128 initializeWithTake for NotificationBarrier.State(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t assignWithTake for NotificationBarrier.State(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 < 0xFFFFFFFFuLL) {
    goto LABEL_5;
  }
  if (*(void *)a2 < 0xFFFFFFFFuLL)
  {
    swift_release();

LABEL_5:
    long long v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    return a1;
  }
  *(void *)a1 = *(void *)a2;
  swift_release();
  unint64_t v4 = *(void **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);

  unint64_t v5 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);

  return a1;
}

uint64_t getEnumTagSinglePayload for NotificationBarrier.State(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 32)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(vsub_100034730((uint64_t)"SIGINT", 6, 3) = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for NotificationBarrier.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)__n128 result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 3sub_100034730((uint64_t)"SIGTERM", 7, 2) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 3sub_100034730((uint64_t)"SIGTERM", 7, 2) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2;
    }
  }
  return result;
}

uint64_t sub_1000382E8(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *sub_100038300(void *result, int a2)
{
  if (a2 < 0)
  {
    uint64_t v2 = a2 ^ 0x80000000;
    result[2] = 0;
    result[3] = 0;
    result[1] = 0;
  }
  else
  {
    if (!a2) {
      return result;
    }
    uint64_t v2 = (a2 - 1);
  }
  *__n128 result = v2;
  return result;
}

ValueMetadata *type metadata accessor for NotificationBarrier.State()
{
  return &type metadata for NotificationBarrier.State;
}

void sub_100038334(uint64_t *a1)
{
  sub_100037ED8(a1, v1);
}

void sub_100038350(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if (a1)
  {
    swift_release();
  }
}

uint64_t sub_1000383A4()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000383DC()
{
  (*(void (**)(uint64_t *__return_ptr))(v0 + 16))(&v2);
  return v2;
}

uint64_t sub_100038414@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 16))();
  *a1 = result & 1;
  return result;
}

NSString sub_10003844C()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_100236850 = (uint64_t)result;
  return result;
}

uint64_t sub_100038484(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + OBJC_IVAR____TtC7parsecd28StorefrontIdentifierProvider_observer + 8) = a2;
  swift_unknownObjectWeakAssign();

  return sub_1001125B4();
}

uint64_t sub_1000384C8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  *(void *)(v3 + 24) = a2;
  swift_unknownObjectWeakAssign();

  return a3();
}

uint64_t sub_100038514()
{
  sub_100023FA0(0, (unint64_t *)&qword_100219250);
  uint64_t v0 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v0 - 8);
  static DispatchQoS.unspecified.getter();
  uint64_t v1 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v1);
  v6[1] = 0;
  sub_100030414((unint64_t *)&qword_10021B3D0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  dispatch thunk of OptionSet.init(rawValue:)();
  uint64_t v2 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  __chkstk_darwin(v2);
  (*(void (**)(char *, void))(v4 + 104))((char *)v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:));
  uint64_t result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  qword_100219428 = result;
  return result;
}

uint64_t sub_1000386F8(uint64_t a1, uint64_t a2)
{
  if (swift_unknownObjectWeakLoadStrong())
  {
    id v4 = [self defaultCenter];
    swift_unknownObjectRelease();
    [v4 addObserver:v2 selector:"bagChangeNotificationWithNotification:" name:@"PARBagChangeNotification" object:0];
  }
  if (qword_100218AB8 != -1) {
    swift_once();
  }
  v18[2] = qword_100219428;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 24) = a2;
  swift_unknownObjectWeakInit();
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v5;
  *(void *)(v6 + 24) = v2;
  aBlock[4] = sub_100039C14;
  aBlock[5] = v6;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000085EC;
  id aBlock[3] = &unk_1001FA958;
  id v7 = _Block_copy(aBlock);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  v18[1] = v18;
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  id v11 = (char *)v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  id v12 = v2;
  static DispatchQoS.unspecified.getter();
  uint64_t v13 = type metadata accessor for DispatchWorkItemFlags();
  v18[0] = v18;
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  id v16 = (char *)v18 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  void v18[3] = _swiftEmptyArrayStorage;
  sub_100030414((unint64_t *)&qword_100219260, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10002572C((uint64_t *)&unk_10021BAF0);
  sub_1000301A0();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v7);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  swift_release();
  return swift_release();
}

id sub_100038A80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  v37.super_class = (Class)swift_getObjectType();
  type metadata accessor for OSSignpostID();
  sub_100020C48();
  uint64_t v7 = v6;
  __chkstk_darwin(v8);
  sub_100021208();
  uint64_t v9 = OBJC_IVAR____TtC7parsecd25ParsecSubscriptionManager_lifetimeSpan;
  *(void *)&v4[OBJC_IVAR____TtC7parsecd25ParsecSubscriptionManager_lifetimeSpan] = 0;
  uint64_t v10 = &v4[OBJC_IVAR____TtC7parsecd25ParsecSubscriptionManager_assembly];
  *(void *)&v4[OBJC_IVAR____TtC7parsecd25ParsecSubscriptionManager_assembly + 8] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v36 = OBJC_IVAR____TtC7parsecd25ParsecSubscriptionManager_effectiveTierProvider;
  *(void *)&v4[OBJC_IVAR____TtC7parsecd25ParsecSubscriptionManager_effectiveTierProvider] = 0;
  v37.receiver = v4;
  static os_signpost_type_t.begin.getter();
  if (qword_100218BA0 != -1) {
    swift_once();
  }
  static OSSignpostID.exclusive.getter();
  sub_100025794();
  id v11 = *(void (**)(uint64_t))(v7 + 8);
  uint64_t v12 = sub_100026820();
  v11(v12);
  sub_10002572C(&qword_100219480);
  swift_allocObject();
  swift_retain();
  sub_10003A41C();
  *(void *)&v4[v9] = v13;
  swift_release();
  static os_signpost_type_t.end.getter();
  static OSSignpostID.exclusive.getter();
  sub_100025794();
  uint64_t v14 = sub_100026820();
  v11(v14);
  *((void *)v10 + 1) = a2;
  swift_unknownObjectWeakAssign();
  static os_signpost_type_t.begin.getter();
  static OSSignpostID.exclusive.getter();
  sub_100025794();
  uint64_t v15 = sub_100026820();
  v11(v15);
  if (qword_100218AB8 != -1) {
    swift_once();
  }
  id v16 = (void *)qword_100219428;
  type metadata accessor for FuseSubscriptionProvider();
  uint64_t v17 = swift_allocObject();
  id v18 = v16;
  uint64_t v19 = swift_unknownObjectRetain();
  *(void *)((char *)v37.receiver + OBJC_IVAR____TtC7parsecd25ParsecSubscriptionManager_fuseProvider) = sub_100039754(v19, v18, v17);
  static os_signpost_type_t.end.getter();
  static OSSignpostID.exclusive.getter();
  sub_100025794();
  uint64_t v20 = sub_100026820();
  v11(v20);
  static os_signpost_type_t.begin.getter();
  static OSSignpostID.exclusive.getter();
  sub_100025794();
  uint64_t v21 = sub_100026820();
  v11(v21);
  uint64_t v22 = (void *)qword_100219428;
  uint64_t v23 = (char *)objc_allocWithZone((Class)type metadata accessor for AppleAccountMonitor());
  swift_unknownObjectRetain();
  *(void *)((char *)v37.receiver + OBJC_IVAR____TtC7parsecd25ParsecSubscriptionManager_storefrontIdentifierProvider) = sub_100039A28(a1, v22, v23);
  static os_signpost_type_t.end.getter();
  static OSSignpostID.exclusive.getter();
  sub_100025794();
  uint64_t v24 = sub_100026820();
  v11(v24);
  static os_signpost_type_t.begin.getter();
  static OSSignpostID.exclusive.getter();
  sub_100025794();
  uint64_t v25 = sub_100026820();
  v11(v25);
  uint64_t v26 = (void *)qword_100219428;
  sub_100023FA0(0, &qword_100219488);
  type metadata accessor for EffectiveTierProvider();
  swift_allocObject();
  *(void *)&v5[v36] = sub_100110080(v26);

  swift_release();
  static os_signpost_type_t.end.getter();
  static OSSignpostID.exclusive.getter();
  sub_1000248B0();
  sub_100025794();
  uint64_t v27 = sub_100026820();
  v11(v27);
  static os_signpost_type_t.begin.getter();
  static OSSignpostID.exclusive.getter();
  sub_1000248B0();
  sub_100025794();
  uint64_t v28 = sub_100026820();
  v11(v28);
  objc_super v40 = v37;
  id v29 = objc_msgSendSuper2(&v40, "init");
  static os_signpost_type_t.end.getter();
  static OSSignpostID.exclusive.getter();
  sub_100025794();
  uint64_t v30 = sub_100026820();
  v11(v30);
  if (a3)
  {
    swift_unknownObjectRetain();
    static os_signpost_type_t.begin.getter();
    static OSSignpostID.exclusive.getter();
    sub_100025794();
    uint64_t v31 = sub_100026820();
    v11(v31);
    sub_1000386F8(a3, a4);
    static os_signpost_type_t.end.getter();
    static OSSignpostID.exclusive.getter();
    sub_100025794();
    swift_unknownObjectRelease();
    swift_release();
    swift_unknownObjectRelease_n();

    uint64_t v32 = sub_100026820();
    v11(v32);
  }
  else
  {

    swift_unknownObjectRelease();
    swift_release();
  }
  return v29;
}

uint64_t sub_100039050(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = *(void *)(a1 + 24);
    sub_1000384C8(result, v6, sub_1001126D4);
    sub_100038484(v5, v6);
    if (*(void *)(a2 + OBJC_IVAR____TtC7parsecd25ParsecSubscriptionManager_effectiveTierProvider))
    {
      swift_retain();
      sub_1000384C8(v5, v6, sub_1001124AC);
      swift_release();
    }
    return swift_unknownObjectRelease();
  }
  return result;
}

id sub_100039138()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&v0[OBJC_IVAR____TtC7parsecd25ParsecSubscriptionManager_lifetimeSpan] = 0;
  swift_release();
  v4.receiver = v0;
  v4.super_class = ObjectType;
  return objc_msgSendSuper2(&v4, "dealloc");
}

uint64_t sub_10003924C(void *a1)
{
  uint64_t result = sub_1000CCB2C(a1);
  if (result)
  {
    uint64_t v3 = result;
    id v19 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v20 = v4;
    AnyHashable.init<A>(_:)();
    sub_100039D58((uint64_t)aBlock, v3, &v21);
    swift_bridgeObjectRelease();
    sub_100039C5C((uint64_t)aBlock);
    if (v22)
    {
      sub_100023FA0(0, (unint64_t *)&qword_10021D040);
      uint64_t result = swift_dynamicCast();
      if (result)
      {

        if (qword_100218AB8 != -1) {
          swift_once();
        }
        v17[3] = qword_100219428;
        uint64_t v5 = swift_allocObject();
        swift_unknownObjectWeakInit();
        aBlock[4] = sub_100039D48;
        aBlock[5] = v5;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = sub_1000085EC;
        id aBlock[3] = &unk_1001FA9F8;
        uint64_t v6 = _Block_copy(aBlock);
        uint64_t v7 = type metadata accessor for DispatchQoS();
        v17[2] = v17;
        sub_100020C48();
        uint64_t v9 = v8;
        __chkstk_darwin(v10);
        sub_100021208();
        swift_retain();
        static DispatchQoS.unspecified.getter();
        uint64_t v11 = type metadata accessor for DispatchWorkItemFlags();
        v17[1] = v17;
        sub_100020C48();
        uint64_t v13 = v12;
        __chkstk_darwin(v14);
        id v16 = (char *)v17 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
        *(void *)&long long v21 = _swiftEmptyArrayStorage;
        sub_100030414((unint64_t *)&qword_100219260, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
        sub_10002572C((uint64_t *)&unk_10021BAF0);
        sub_1000301A0();
        dispatch thunk of SetAlgebra.init<A>(_:)();
        OS_dispatch_queue.async(group:qos:flags:execute:)();
        _Block_release(v6);
        (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v11);
        (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v1, v7);
        swift_release();
        return swift_release();
      }
    }
    else
    {
      return sub_100039CB0((uint64_t)&v21);
    }
  }
  return result;
}

uint64_t sub_10003958C()
{
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v1 = (void *)result;
    swift_retain();

    sub_1001126D4();
    return swift_release();
  }
  return result;
}

void sub_100039664()
{
}

uint64_t type metadata accessor for ParsecSubscriptionManager()
{
  return self;
}

void sub_1000396C8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void (**)(id, void *))(a1 + 32);
  swift_retain();
  id v7 = a2;
  id v6 = a3;
  v5(v7, a3);
  swift_release();
}

uint64_t sub_100039754(uint64_t a1, void *a2, uint64_t a3)
{
  *(void *)(a3 + 56) = 0;
  uint64_t v5 = qword_100218B60;
  swift_retain();
  if (v5 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_10002A10C(v6, (uint64_t)qword_100236A38);
  id v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Registering for subscription updates", v9, 2u);
    swift_slowDealloc();
  }

  uint64_t v10 = self;
  id v11 = [self autoupdatingActiveAccount];
  id v12 = [v10 sharedMonitorForIdentity:v11];

  *(void *)(a3 + 48) = v12;
  swift_release();
  uint64_t v13 = sub_100112D38((uint64_t)a2);
  uint64_t v14 = *(void **)(v13 + 48);
  uint64_t v15 = swift_allocObject();
  swift_weakInit();
  v25[4] = sub_100039C54;
  v25[5] = v15;
  v25[0] = _NSConcreteStackBlock;
  v25[1] = 1107296256;
  void v25[2] = sub_1000396C8;
  v25[3] = &unk_1001FA9A8;
  id v16 = _Block_copy(v25);
  id v17 = a2;
  swift_retain();
  id v18 = v14;
  swift_release();
  id v19 = [v18 beginObservingSubscriptionStatusWithHandler:v16];
  _Block_release(v16);

  *(void *)(v13 + 56) = v19;
  swift_unknownObjectRelease();
  uint64_t v20 = *(void **)(v13 + 48);
  swift_retain();
  id v21 = [v20 subscriptionStatus];
  uint64_t v22 = v21;
  if (v21)
  {
    id v23 = [v21 statusType];
  }
  else
  {
    id v23 = 0;
  }
  sub_100112EDC((uint64_t)v23, v22 == 0);
  swift_release_n();
  swift_release();

  return v13;
}

id sub_100039A28(uint64_t a1, void *a2, char *a3)
{
  *(void *)&a3[OBJC_IVAR____TtC7parsecd19AppleAccountMonitor_monitoredAccountStore] = 0;
  *(void *)&a3[OBJC_IVAR____TtC7parsecd28StorefrontIdentifierProvider_observer + 8] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v5 = &a3[OBJC_IVAR____TtC7parsecd28StorefrontIdentifierProvider_storefrontIdentifier];
  *(void *)uint64_t v5 = 0;
  *((void *)v5 + 1) = 0;
  uint64_t v6 = &a3[OBJC_IVAR____TtC7parsecd28StorefrontIdentifierProvider_assembly];
  *(void *)&a3[OBJC_IVAR____TtC7parsecd28StorefrontIdentifierProvider_assembly + 8] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v7 = OBJC_IVAR____TtC7parsecd28StorefrontIdentifierProvider__pendingUpdate;
  sub_10002572C((uint64_t *)&unk_100219490);
  swift_allocObject();
  swift_retain();
  id v8 = a2;
  uint64_t v9 = a3;
  *(void *)&a3[v7] = sub_10010FD34(0, 0, 0);
  *((void *)v6 + 1) = &off_1001FD220;
  swift_unknownObjectWeakAssign();
  *(void *)&v9[OBJC_IVAR____TtC7parsecd28StorefrontIdentifierProvider_queue] = v8;
  id v10 = v8;

  v14.receiver = v9;
  v14.super_class = (Class)type metadata accessor for StorefrontIdentifierProvider();
  id v11 = objc_msgSendSuper2(&v14, "init");
  swift_release();

  id v12 = v11;
  sub_100107C74();

  swift_release();
  return v12;
}

uint64_t sub_100039B9C()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100039BD4()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100039C14()
{
  return sub_100039050(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100039C1C()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100039C54(uint64_t a1, void *a2)
{
  return sub_1001134F4(a1, a2);
}

uint64_t sub_100039C5C(uint64_t a1)
{
  return a1;
}

uint64_t sub_100039CB0(uint64_t a1)
{
  uint64_t v2 = sub_10002572C((uint64_t *)&unk_10021BB30);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100039D10()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100039D48()
{
  return sub_10003958C();
}

double sub_100039D58@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  if (*(void *)(a2 + 16) && (unint64_t v5 = sub_10003B344(a1), (v6 & 1) != 0))
  {
    uint64_t v7 = *(void *)(a2 + 56) + 32 * v5;
    sub_10001C348(v7, (uint64_t)a3);
  }
  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

double sub_100039DBC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  if (*(void *)(a3 + 16) && (unint64_t v6 = sub_1000287F0(a1, a2), (v7 & 1) != 0))
  {
    uint64_t v8 = *(void *)(a3 + 56) + 32 * v6;
    sub_10001C348(v8, (uint64_t)a4);
  }
  else
  {
    double result = 0.0;
    *a4 = 0u;
    a4[1] = 0u;
  }
  return result;
}

uint64_t sub_100039E20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)(a3 + 16)) {
    return 0;
  }
  unint64_t v4 = sub_1000287F0(a1, a2);
  if ((v5 & 1) == 0) {
    return 0;
  }
  uint64_t v6 = *(void *)(*(void *)(a3 + 56) + 16 * v4);
  swift_bridgeObjectRetain();
  return v6;
}

uint64_t sub_100039E7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*(void *)(a3 + 16) && (unint64_t v6 = sub_1000287F0(a1, a2), (v7 & 1) != 0))
  {
    unint64_t v8 = v6;
    uint64_t v9 = *(void *)(a3 + 56);
    uint64_t v10 = type metadata accessor for Date();
    sub_10001DCF8();
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v11 + 16))(a4, v9 + *(void *)(v11 + 72) * v8, v10);
    sub_100029390();
    uint64_t v15 = v10;
  }
  else
  {
    type metadata accessor for Date();
    sub_10002947C();
  }

  return sub_10002538C(v12, v13, v14, v15);
}

uint64_t sub_100039F30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16) && (sub_1000287F0(a1, a2), (v3 & 1) != 0)) {
    return swift_retain();
  }
  else {
    return 0;
  }
}

uint64_t sub_100039F74()
{
  uint64_t v1 = sub_10002572C(&qword_10021BB20);
  uint64_t v2 = sub_100016544(v1);
  __chkstk_darwin(v2);
  sub_100016550();
  swift_beginAccess();
  sub_100028864();
  sub_10002B8A0(v3, v4, v5);
  uint64_t v6 = type metadata accessor for URL();
  uint64_t result = sub_100027BA4(v0, 1, v6);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    sub_10000E004();
    sub_100028864();
    return v8();
  }
  return result;
}

uint64_t sub_10003A05C()
{
  return swift_retain();
}

uint64_t sub_10003A064()
{
  sub_10003A1F4();
  sub_10001CDE0(v0 + 16);

  sub_10003CB40(v0 + OBJC_IVAR____TtC7parsecd10FileWriter__fileUrl);
  swift_unknownObjectRelease();
  swift_release();

  return v0;
}

uint64_t sub_10003A0D0()
{
  sub_10003A064();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v1, v2);
}

uint64_t sub_10003A128()
{
  return type metadata accessor for FileWriter();
}

void sub_10003A130()
{
  sub_10003A254();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_10003A1F4()
{
  *(void *)(v0 + OBJC_IVAR____TtC7parsecd10FileWriter_eventWriteSpan) = 0;
  swift_release();
  uint64_t v1 = OBJC_IVAR____TtC7parsecd10FileWriter_fileHandle;
  [*(id *)(v0 + OBJC_IVAR____TtC7parsecd10FileWriter_fileHandle) closeFile];
  uint64_t v2 = *(void **)(v0 + v1);
  *(void *)(v0 + v1) = 0;
}

void sub_10003A254()
{
  if (!qword_10021CF20)
  {
    type metadata accessor for URL();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10021CF20);
    }
  }
}

uint64_t sub_10003A2AC()
{
  return sub_10003A05C();
}

void sub_10003A2B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  sub_100025170();
  a16 = v18;
  a17 = v19;
  uint64_t v20 = v17;
  char v22 = v21;
  uint64_t v23 = v17[7];
  if ((v21 & 1) == 0)
  {
    uint64_t v28 = *(os_unfair_lock_s **)(v23 + 16);
    swift_retain();
    os_unfair_lock_lock(v28);
    uint64_t v29 = v17[5];
    uint64_t v25 = v20[6];
    swift_unknownObjectRetain();
    os_unfair_lock_unlock(v28);
    swift_release();
    if (!v29) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  uint64_t v24 = *(os_unfair_lock_s **)(v23 + 16);
  swift_retain();
  os_unfair_lock_lock(v24);
  sub_10000A884(v20, &a9);
  os_unfair_lock_unlock(v24);
  swift_release();
  uint64_t v25 = *((void *)&a9 + 1);
  if ((void)a9)
  {
LABEL_3:
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v27 = *(void (**)(void, uint64_t, uint64_t))(v25 + 24);
    swift_unknownObjectRetain();
    v27(v22 & 1, ObjectType, v25);
    swift_unknownObjectRelease_n();
  }
LABEL_5:
  sub_100026FB4();
}

uint64_t sub_10003A3AC()
{
  sub_10001CDE0(v0 + 16);
  swift_unknownObjectWeakDestroy();
  swift_unknownObjectRelease();
  swift_release();
  return v0;
}

uint64_t sub_10003A3E4()
{
  sub_10003A3AC();

  return _swift_deallocClassInstance(v0, 64, 7);
}

void sub_10003A41C()
{
}

void sub_10003A43C()
{
}

void sub_10003A45C()
{
  sub_10000DFE0();
  uint64_t v60 = v2;
  uint64_t v61 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = v0;
  uint64_t v6 = sub_10002572C((uint64_t *)&unk_100219728);
  uint64_t v7 = sub_100016544(v6);
  __chkstk_darwin(v7);
  sub_100017D2C();
  uint64_t v59 = v8;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v58 - v10;
  uint64_t v12 = type metadata accessor for Date();
  sub_100020C48();
  uint64_t v14 = v13;
  __chkstk_darwin(v15);
  sub_10000DFD0();
  uint64_t v18 = v17 - v16;
  swift_weakInit();
  sub_10002425C();
  *(void *)(v0 + 64) = _swiftEmptyArrayStorage;
  *(void *)(v0 + 7sub_100034730((uint64_t)"SIGTERM", 7, 2) = 0;
  *(unsigned char *)(v0 + 80) = 0;
  uint64_t v19 = sub_100023FA0(0, (unint64_t *)&qword_1002192B0);
  uint64_t v62 = 0xD000000000000010;
  unint64_t v63 = 0x80000001001B0C20;
  sub_100017CEC();
  sub_10002C0F4();
  sub_1000253B4();
  uint64_t v62 = v4(0);
  sub_10002572C(v60);
  String.init<A>(describing:)();
  uint64_t v20 = v61;
  uint64_t v21 = v19;
  *(void *)(v5 + 88) = OS_os_log.init(subsystem:category:)();
  sub_100023E18();
  char v22 = (uint64_t *)sub_10002920C();
  sub_10002947C();
  sub_10002538C(v23, v24, v25, (uint64_t)v22);
  sub_100023E18();
  uint64_t v27 = *(void *)(v26 + 152);
  type metadata accessor for Locker();
  sub_100023CE4();
  uint64_t v28 = (_DWORD *)sub_1000283B8();
  *(void *)(v21 + 16) = v28;
  *uint64_t v28 = 0;
  *(void *)(v5 + v27) = v21;
  Date.init()();
  sub_100023E18();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 32))(v5 + *(void *)(v29 + 144), v18, v12);
  swift_weakAssign();
  id v30 = *(id *)(v5 + 88);
  sub_1000292EC();
  sub_100029F24();
  sub_100029390();
  uint64_t v60 = v22;
  sub_10002538C(v31, v32, v33, (uint64_t)v22);
  sub_100023E18();
  uint64_t v35 = v5 + *(void *)(v34 + 136);
  sub_1000257C8();
  sub_10002B84C((uint64_t)v11, v35, (uint64_t *)&unk_100219728);
  swift_endAccess();
  sub_100029464();
  uint64_t v36 = String.init<A>(describing:)();
  uint64_t v38 = v37;
  uint64_t v39 = *(os_unfair_lock_s **)(*(void *)(v20 + 32) + 16);
  os_unfair_lock_lock(v39);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v21 = Strong;
    uint64_t v58 = v35;
    sub_100016518();
    uint64_t v41 = *(void *)(v20 + 40);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v42 = sub_100039F30(v36, v38, v41);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    if (v42)
    {
      swift_getObjectType();
      sub_10003CBA0();
      uint64_t v43 = sub_10001D754();
      v44(v43);
    }
    swift_unknownObjectRelease();
    uint64_t v35 = v58;
  }
  type metadata accessor for ActivityMonitor.WeakReference();
  uint64_t v45 = sub_100023CFC();
  sub_10002AC28(v45);
  sub_100029538();
  sub_10002CCE0();
  swift_bridgeObjectRetain();
  sub_1000295FC(v21, v36, v38, (uint64_t)&unk_100219740, v46, v47, v48, v49, v56, v57);
  swift_endAccess();
  swift_bridgeObjectRelease();
  os_unfair_lock_unlock(v39);
  swift_bridgeObjectRelease();
  if (swift_unknownObjectWeakLoadStrong())
  {
    swift_getObjectType();
    sub_100016534();
    uint64_t v50 = sub_100021220();
    v51(v50);
    swift_release();
    swift_unknownObjectRelease();
  }
  else
  {
    swift_release();
  }
  uint64_t v52 = v59;
  uint64_t v53 = v60;
  sub_10002B8A0(v35, v59, (uint64_t *)&unk_100219728);
  if (sub_100027BA4(v52, 1, (uint64_t)v53) == 1)
  {
    __break(1u);
  }
  else
  {
    id v54 = *(id *)(v5 + 88);
    static os_signpost_type_t.begin.getter();
    os_signpost(_:dso:log:name:signpostID:)();

    sub_10000E004();
    sub_10000E040();
    v55();
    swift_release();
    sub_100028318();
    sub_10000DFB8();
  }
}

void sub_10003A90C()
{
}

void sub_10003A93C()
{
  sub_10000DFE0();
  uint64_t v3 = v0;
  uint64_t v49 = v4;
  uint64_t v5 = sub_10002572C((uint64_t *)&unk_100219728);
  uint64_t v6 = sub_100016544(v5);
  __chkstk_darwin(v6);
  sub_10000E020(v7, v45);
  __chkstk_darwin(v8);
  uint64_t v47 = sub_10003CBB0();
  sub_100020C48();
  uint64_t v10 = v9;
  __chkstk_darwin(v11);
  sub_10001DD08();
  sub_10002425C();
  *(void *)(v0 + 64) = _swiftEmptyArrayStorage;
  *(void *)(v0 + 7sub_100034730((uint64_t)"SIGTERM", 7, 2) = 0;
  *(unsigned char *)(v0 + 81) = 0;
  uint64_t v12 = sub_100023FA0(0, (unint64_t *)&qword_1002192B0);
  sub_100017CEC();
  sub_10002C0F4();
  sub_1000253B4();
  swift_bridgeObjectRetain();
  uint64_t v13 = v12;
  *(void *)(v3 + 88) = OS_os_log.init(subsystem:category:)();
  sub_100023E18();
  uint64_t v14 = sub_10002920C();
  sub_10002947C();
  sub_10002538C(v15, v16, v17, v14);
  sub_100023E18();
  type metadata accessor for Locker();
  sub_100023CE4();
  uint64_t v18 = (_DWORD *)sub_1000283B8();
  sub_10003CBD0(v18);
  sub_100023E18();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))(v3 + *(void *)(v19 + 144), v1, v47);
  swift_weakAssign();
  sub_100026018();
  sub_1000292EC();
  sub_100029F24();
  sub_100029390();
  sub_10002538C(v20, v21, v22, v14);
  sub_100023E18();
  uint64_t v24 = v3 + *(void *)(v23 + 136);
  sub_1000257C8();
  sub_10002B84C(v2, v24, (uint64_t *)&unk_100219728);
  swift_endAccess();
  sub_100029464();
  uint64_t v25 = String.init<A>(describing:)();
  uint64_t v27 = v26;
  uint64_t v28 = *(os_unfair_lock_s **)(v49[4] + 16);
  os_unfair_lock_lock(v28);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v13 = Strong;
    uint64_t v48 = v14;
    uint64_t v30 = v49[3];
    sub_100016518();
    uint64_t v31 = v49[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v32 = sub_100039F30(v25, v27, v31);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    if (v32)
    {
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, _UNKNOWN **, uint64_t, uint64_t))(v30 + 32))(v3, &off_100200DC0, ObjectType, v30);
    }
    swift_unknownObjectRelease();
    uint64_t v14 = v48;
  }
  type metadata accessor for ActivityMonitor.WeakReference();
  uint64_t v34 = sub_100023CFC();
  sub_10002AC28(v34);
  sub_100029538();
  sub_10002CCE0();
  swift_bridgeObjectRetain();
  sub_1000295FC(v13, v25, v27, (uint64_t)&unk_100219740, v35, v36, v37, v38, v43, v44);
  swift_endAccess();
  swift_bridgeObjectRelease();
  os_unfair_lock_unlock(v28);
  swift_bridgeObjectRelease();
  if (swift_unknownObjectWeakLoadStrong())
  {
    swift_getObjectType();
    sub_100016534();
    uint64_t v39 = sub_100021220();
    v40(v39);
    swift_release();
    swift_unknownObjectRelease();
  }
  else
  {
    swift_release();
  }
  sub_10002B8A0(v24, v46, (uint64_t *)&unk_100219728);
  if (sub_100027BA4(v46, 1, v14) == 1)
  {
    __break(1u);
  }
  else
  {
    id v41 = *(id *)(v3 + 88);
    sub_10003B210();

    sub_10000E004();
    sub_10000E040();
    v42();
    swift_release();
    sub_100028318();
    sub_10000DFB8();
  }
}

void sub_10003AD84()
{
  sub_10000DFE0();
  uint64_t v3 = v0;
  uint64_t v41 = v4;
  uint64_t v5 = sub_10002572C((uint64_t *)&unk_100219728);
  uint64_t v6 = sub_100016544(v5);
  __chkstk_darwin(v6);
  sub_10000E020(v7, v39);
  __chkstk_darwin(v8);
  uint64_t v42 = sub_10003CBB0();
  sub_100020C48();
  uint64_t v10 = v9;
  __chkstk_darwin(v11);
  sub_10001DD08();
  sub_10002425C();
  *(void *)(v0 + 64) = _swiftEmptyArrayStorage;
  *(void *)(v0 + 7sub_100034730((uint64_t)"SIGTERM", 7, 2) = 0;
  *(unsigned char *)(v0 + 81) = 0;
  uint64_t v12 = sub_100023FA0(0, (unint64_t *)&qword_1002192B0);
  sub_100017CEC();
  sub_10002C0F4();
  sub_1000253B4();
  swift_bridgeObjectRetain();
  uint64_t v13 = v12;
  *(void *)(v3 + 88) = OS_os_log.init(subsystem:category:)();
  sub_100023E18();
  uint64_t v14 = sub_10002920C();
  sub_10002538C(v13, 1, 1, v14);
  sub_100023E18();
  type metadata accessor for Locker();
  sub_100023CE4();
  uint64_t v15 = (_DWORD *)sub_1000283B8();
  sub_10003CBD0(v15);
  sub_100023E18();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))(v3 + *(void *)(v16 + 144), v1, v42);
  swift_weakAssign();
  sub_100026018();
  sub_1000292EC();
  sub_100029F24();
  sub_10002538C(v2, 0, 1, v14);
  sub_100023E18();
  uint64_t v18 = v3 + *(void *)(v17 + 136);
  sub_1000257C8();
  sub_10002B84C(v2, v18, (uint64_t *)&unk_100219728);
  swift_endAccess();
  sub_100029464();
  uint64_t v19 = String.init<A>(describing:)();
  uint64_t v21 = v20;
  uint64_t v22 = *(os_unfair_lock_s **)(*(void *)(v41 + 32) + 16);
  os_unfair_lock_lock(v22);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v13 = Strong;
    sub_100016518();
    uint64_t v24 = *(void *)(v41 + 40);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v25 = sub_100039F30(v19, v21, v24);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    if (v25)
    {
      swift_getObjectType();
      sub_10003CBA0();
      uint64_t v26 = sub_10001D754();
      v27(v26);
    }
    swift_unknownObjectRelease();
  }
  type metadata accessor for ActivityMonitor.WeakReference();
  uint64_t v28 = sub_100023CFC();
  sub_10002AC28(v28);
  sub_100029538();
  sub_10002CCE0();
  swift_bridgeObjectRetain();
  sub_1000295FC(v13, v19, v21, (uint64_t)&unk_100219740, v29, v30, v31, v32, v37, v38);
  swift_endAccess();
  swift_bridgeObjectRelease();
  os_unfair_lock_unlock(v22);
  swift_bridgeObjectRelease();
  if (swift_unknownObjectWeakLoadStrong())
  {
    swift_getObjectType();
    sub_100016534();
    uint64_t v33 = sub_100021220();
    v34(v33);
    swift_release();
    swift_unknownObjectRelease();
  }
  else
  {
    swift_release();
  }
  sub_10002B8A0(v18, v40, (uint64_t *)&unk_100219728);
  if (sub_100027BA4(v40, 1, v14) == 1)
  {
    __break(1u);
  }
  else
  {
    id v35 = *(id *)(v3 + 88);
    static os_signpost_type_t.begin.getter();
    os_signpost(_:dso:log:name:signpostID:)();

    sub_10000E004();
    sub_10000E040();
    v36();
    swift_release();
    sub_100028318();
    sub_10000DFB8();
  }
}

uint64_t sub_10003B210()
{
  static os_signpost_type_t.begin.getter();

  return os_signpost(_:dso:log:name:signpostID:)();
}

void sub_10003B2D4(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(void *)(v4 + qword_10021F4D8) = 0;
  uint64_t v5 = v4 + *(void *)(*(void *)v4 + 472);
  *(void *)uint64_t v5 = a3;
  *(_DWORD *)(v5 + 8) = a4;
  sub_100023790();
}

unint64_t sub_10003B344(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));

  return sub_10003B500(a1, v4);
}

unint64_t sub_10003B388()
{
  NSObject._rawHashValue(seed:)(*(void *)(v0 + 40));
  uint64_t v1 = sub_100019B48();

  return sub_10003B5C8(v1, v2);
}

unint64_t sub_10003B3C8(uint64_t a1)
{
  Hasher.init(_seed:)();
  type metadata accessor for UUID();
  sub_100019ABC(&qword_1002197C0, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  Swift::Int v2 = Hasher._finalize()();

  return sub_10003B6D8(a1, v2);
}

unint64_t sub_10003B47C()
{
  NSObject._rawHashValue(seed:)(*(void *)(v0 + 40));
  uint64_t v1 = sub_100019B48();

  return sub_10003B824(v1, v2);
}

unint64_t sub_10003B4BC(uint64_t a1)
{
  uint64_t v2 = static Hasher._hash(seed:_:)();

  return sub_10003B940(a1, v2);
}

unint64_t sub_10003B500(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    do
    {
      sub_10003C9CC(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v8);
      char v6 = static AnyHashable.== infix(_:_:)();
      sub_100039C5C((uint64_t)v8);
      if (v6) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v5;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_10003B5C8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    sub_10002572C(&qword_1002197D0);
    id v6 = *(id *)(*(void *)(v2 + 48) + 8 * i);
    char v7 = static NSObject.== infix(_:_:)();

    if ((v7 & 1) == 0)
    {
      uint64_t v8 = ~v4;
      for (unint64_t i = (i + 1) & v8; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v8)
      {
        id v9 = *(id *)(*(void *)(v2 + 48) + 8 * i);
        char v10 = static NSObject.== infix(_:_:)();

        if (v10) {
          break;
        }
      }
    }
  }
  return i;
}

unint64_t sub_10003B6D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CancellableStoreKey() - 8;
  __chkstk_darwin(v4);
  char v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v9 = a2 & ~v8;
  if ((*(void *)(v2 + 64 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9))
  {
    uint64_t v10 = ~v8;
    uint64_t v11 = *(void *)(v5 + 72);
    do
    {
      sub_10003CA38(*(void *)(v2 + 48) + v11 * v9, (uint64_t)v7);
      char v12 = static UUID.== infix(_:_:)();
      sub_10003056C((uint64_t)v7, (void (*)(void))type metadata accessor for CancellableStoreKey);
      if (v12) {
        break;
      }
      unint64_t v9 = (v9 + 1) & v10;
    }
    while (((*(void *)(v2 + 64 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  return v9;
}

unint64_t sub_10003B824(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    sub_100023FA0(0, (unint64_t *)&qword_100219768);
    id v6 = *(id *)(*(void *)(v2 + 48) + 8 * i);
    char v7 = static NSObject.== infix(_:_:)();

    if ((v7 & 1) == 0)
    {
      uint64_t v8 = ~v4;
      for (unint64_t i = (i + 1) & v8; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v8)
      {
        id v9 = *(id *)(*(void *)(v2 + 48) + 8 * i);
        char v10 = static NSObject.== infix(_:_:)();

        if (v10) {
          break;
        }
      }
    }
  }
  return i;
}

unint64_t sub_10003B940(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

#error "10003BA1C: call analysis failed (funcsize=26)"

#error "10003BA8C: call analysis failed (funcsize=28)"

uint64_t sub_10003BAB4(uint64_t a1, uint64_t a2, double a3)
{
  swift_isUniquelyReferenced_nonNull_native();
  sub_100024F44();
  uint64_t v7 = sub_10003BFF0(a1, a2, v6, a3);
  sub_10000E010(v7, v8, v9, v10, v11, v12, v13, v14, v16, v17);

  return swift_bridgeObjectRelease();
}

uint64_t sub_10003BB28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return sub_10003BC1C(a1, a2, (uint64_t)sub_10003C114, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t sub_10003BB40()
{
  sub_1000274B0();
  uint64_t v0 = sub_100025FF4();
  id v3 = sub_10003C268(v0, v1, v2);
  sub_10000E010((uint64_t)v3, v4, v5, v6, v7, v8, v9, v10, v12, v13);

  return swift_bridgeObjectRelease();
}

uint64_t sub_10003BB8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return sub_1000295FC(a1, a2, a3, (uint64_t)&qword_100219780, a5, a6, a7, a8, a9, a10);
}

uint64_t sub_10003BB98()
{
  sub_1000274B0();
  uint64_t v0 = sub_100025FF4();
  unint64_t v3 = sub_10003C3B8(v0, v1, v2);
  sub_10000E010(v3, v4, v5, v6, v7, v8, v9, v10, v12, v13);

  return swift_bridgeObjectRelease();
}

uint64_t sub_10003BBE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10002740C(a1, a2, a3, &qword_1002197B8, (void (*)(void))&type metadata accessor for Date);
}

uint64_t sub_10003BC04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return sub_10003BC1C(a1, a2, (uint64_t)sub_10003C4C8, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t sub_10003BC1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_100025170();
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  swift_isUniquelyReferenced_nonNull_native();
  sub_100024F44();
  v12(v16, v14);
  *uint64_t v10 = a10;
  sub_100026FB4();
  return swift_bridgeObjectRelease();
}

_OWORD *sub_10003BC90(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v11 = sub_1000287F0(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v12 & 1) == 0;
  Swift::Int v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_13;
  }
  unint64_t v16 = v11;
  char v17 = v12;
  sub_10002572C(&qword_100219778);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v15)) {
    goto LABEL_5;
  }
  unint64_t v18 = sub_1000287F0(a2, a3);
  if ((v17 & 1) != (v19 & 1))
  {
LABEL_13:
    unint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v16 = v18;
LABEL_5:
  uint64_t v20 = *v5;
  if (v17)
  {
    uint64_t v21 = (_OWORD *)(v20[7] + 32 * v16);
    sub_10001CA50((uint64_t)v21);
    return sub_10003CA28(a1, v21);
  }
  else
  {
    sub_10003C658(v16, a2, a3, a1, v20);
    return (_OWORD *)swift_bridgeObjectRetain();
  }
}

void sub_10003BDD0()
{
  sub_100025170();
  uint64_t v1 = v0;
  char v3 = v2;
  uint64_t v5 = v4;
  Swift::Int v6 = *v0;
  uint64_t v20 = v7;
  sub_10003B388();
  sub_100026834();
  if (v10)
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v11 = v8;
  char v12 = v9;
  sub_10002572C(&qword_1002197D8);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(v3 & 1, v6)) {
    goto LABEL_5;
  }
  unint64_t v13 = sub_10003B388();
  if ((v12 & 1) != (v14 & 1))
  {
LABEL_11:
    sub_10002572C(&qword_1002197D0);
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v11 = v13;
LABEL_5:
  Swift::Int v15 = (void *)*v1;
  if (v12)
  {
    uint64_t v16 = v15[7];
    swift_bridgeObjectRelease();
    *(void *)(v16 + 8 * v11) = v5;
    sub_100026FB4();
  }
  else
  {
    sub_10003C6C4(v11, v20, v5, v15);
    sub_100026FB4();
    id v19 = v17;
  }
}

void sub_10003BED4()
{
  sub_10000DFE0();
  uint64_t v1 = v0;
  char v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  Swift::Int v12 = *v0;
  sub_1000287F0(v6, v4);
  sub_100026834();
  if (v15)
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v16 = v13;
  char v17 = v14;
  sub_10002572C(&qword_100219750);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(v3 & 1, v12)) {
    goto LABEL_5;
  }
  unint64_t v18 = sub_1000287F0(v7, v5);
  if ((v17 & 1) != (v19 & 1))
  {
LABEL_11:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v16 = v18;
LABEL_5:
  uint64_t v20 = (void *)*v1;
  if (v17)
  {
    uint64_t v21 = (uint64_t *)(v20[7] + 16 * v16);
    swift_bridgeObjectRelease();
    *uint64_t v21 = v11;
    v21[1] = v9;
    sub_10000DFB8();
  }
  else
  {
    sub_10003C708(v16, v7, v5, v11, v9, v20);
    sub_10000DFB8();
    swift_bridgeObjectRetain();
  }
}

uint64_t sub_10003BFF0(uint64_t a1, uint64_t a2, char a3, double a4)
{
  uint64_t v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v11 = sub_1000287F0(a1, a2);
  uint64_t v13 = v10[2];
  BOOL v14 = (v12 & 1) == 0;
  Swift::Int v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v16 = v11;
  char v17 = v12;
  sub_10002572C(&qword_1002197E0);
  uint64_t result = _NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v15);
  if ((result & 1) == 0) {
    goto LABEL_5;
  }
  uint64_t result = sub_1000287F0(a1, a2);
  if ((v17 & 1) != (v19 & 1))
  {
LABEL_11:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v16 = result;
LABEL_5:
  uint64_t v20 = *v5;
  if (v17)
  {
    *(double *)(v20[7] + 8 * v16) = a4;
  }
  else
  {
    sub_10003C754(v16, a1, a2, v20, a4);
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_10003C114(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for CancellableStoreKey();
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v11 = (void *)*v3;
  unint64_t v12 = sub_10003B3C8(a2);
  uint64_t v14 = v11[2];
  BOOL v15 = (v13 & 1) == 0;
  Swift::Int v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_10;
  }
  unint64_t v17 = v12;
  char v18 = v13;
  sub_10002572C(&qword_1002197C8);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v16)) {
    goto LABEL_5;
  }
  unint64_t v19 = sub_10003B3C8(a2);
  if ((v18 & 1) != (v20 & 1))
  {
LABEL_10:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v17 = v19;
LABEL_5:
  uint64_t v21 = *v4;
  if (v18)
  {
    uint64_t v22 = v21[7];
    uint64_t result = swift_release();
    *(void *)(v22 + 8 * v17) = a1;
  }
  else
  {
    sub_10003CA38(a2, (uint64_t)v10);
    return sub_10003C79C(v17, (uint64_t)v10, a1, v21);
  }
  return result;
}

id sub_10003C268(uint64_t a1, void *a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v7 = (void *)*v3;
  unint64_t v8 = sub_10003B47C();
  uint64_t v10 = v7[2];
  BOOL v11 = (v9 & 1) == 0;
  Swift::Int v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_13;
  }
  unint64_t v13 = v8;
  char v14 = v9;
  sub_10002572C(&qword_100219760);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v12)) {
    goto LABEL_5;
  }
  unint64_t v15 = sub_10003B47C();
  if ((v14 & 1) != (v16 & 1))
  {
LABEL_13:
    sub_100023FA0(0, (unint64_t *)&qword_100219768);
    id result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v13 = v15;
LABEL_5:
  unint64_t v17 = *v4;
  if (v14)
  {
    uint64_t v18 = v17[7];
    uint64_t v19 = v18 + *(void *)(*(void *)(type metadata accessor for TopicCacheEntry() - 8) + 72) * v13;
    return (id)sub_10003C968(a1, v19);
  }
  else
  {
    sub_10003C850(v13, (uint64_t)a2, a1, v17);
    return a2;
  }
}

unint64_t sub_10003C3B8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  unint64_t v8 = (void *)*v3;
  unint64_t v9 = sub_10003B4BC(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v10 & 1) == 0;
  Swift::Int v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v14 = v9;
  char v15 = v10;
  sub_10002572C(&qword_100219788);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v13)) {
    goto LABEL_5;
  }
  unint64_t v16 = sub_10003B4BC(a2);
  if ((v15 & 1) != (v17 & 1))
  {
LABEL_11:
    unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v16;
LABEL_5:
  uint64_t v18 = *v4;
  if (v15)
  {
    uint64_t v19 = v18[7];
    unint64_t result = swift_release();
    *(void *)(v19 + 8 * v14) = a1;
  }
  else
  {
    return sub_10003C6C4(v14, a2, a1, v18);
  }
  return result;
}

uint64_t sub_10003C4C8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for SessionType();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  BOOL v12 = (void *)*v3;
  unint64_t v13 = sub_100019A28();
  uint64_t v15 = v12[2];
  BOOL v16 = (v14 & 1) == 0;
  Swift::Int v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_10;
  }
  unint64_t v18 = v13;
  char v19 = v14;
  sub_10002572C(&qword_1002197B0);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v17)) {
    goto LABEL_5;
  }
  unint64_t v20 = sub_100019A28();
  if ((v19 & 1) != (v21 & 1))
  {
LABEL_10:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v18 = v20;
LABEL_5:
  uint64_t v22 = *v4;
  if (v19)
  {
    uint64_t v23 = v22[7];
    uint64_t result = swift_release();
    *(void *)(v23 + 8 * v18) = a1;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
    return sub_10002F26C(v18, (uint64_t)v11, a1, v22);
  }
  return result;
}

_OWORD *sub_10003C658(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v6 = (void *)(a5[6] + 16 * a1);
  *uint64_t v6 = a2;
  v6[1] = a3;
  uint64_t result = sub_10003CA28(a4, (_OWORD *)(a5[7] + 32 * a1));
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

unint64_t sub_10003C6C4(unint64_t result, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(result >> 6) + 8] |= 1 << result;
  *(void *)(a4[6] + 8 * __swp(result, result) = a2;
  *(void *)(a4[7] + 8 * __swp(result, result) = a3;
  uint64_t v4 = a4[2];
  BOOL v5 = __OFADD__(v4, 1);
  uint64_t v6 = v4 + 1;
  if (v5) {
    __break(1u);
  }
  else {
    a4[2] = v6;
  }
  return result;
}

unint64_t sub_10003C708(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  a6[(result >> 6) + 8] |= 1 << result;
  uint64_t v6 = (void *)(a6[6] + 16 * result);
  *uint64_t v6 = a2;
  v6[1] = a3;
  uint64_t v7 = (void *)(a6[7] + 16 * result);
  *uint64_t v7 = a4;
  v7[1] = a5;
  uint64_t v8 = a6[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a6[2] = v10;
  }
  return result;
}

unint64_t sub_10003C754(unint64_t result, uint64_t a2, uint64_t a3, void *a4, double a5)
{
  a4[(result >> 6) + 8] |= 1 << result;
  BOOL v5 = (void *)(a4[6] + 16 * result);
  *BOOL v5 = a2;
  v5[1] = a3;
  *(double *)(a4[7] + 8 * __swp(result, result) = a5;
  uint64_t v6 = a4[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a4[2] = v8;
  }
  return result;
}

uint64_t sub_10003C79C(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for CancellableStoreKey();
  uint64_t result = sub_10003CA9C(a2, v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, (void (*)(void))type metadata accessor for CancellableStoreKey);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

uint64_t sub_10003C850(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(void *)(a4[6] + 8 * a1) = a2;
  uint64_t v7 = a4[7];
  uint64_t v8 = type metadata accessor for TopicCacheEntry();
  uint64_t result = sub_10003CA9C(a3, v7 + *(void *)(*(void *)(v8 - 8) + 72) * a1, (void (*)(void))type metadata accessor for TopicCacheEntry);
  uint64_t v10 = a4[2];
  BOOL v11 = __OFADD__(v10, 1);
  uint64_t v12 = v10 + 1;
  if (v11) {
    __break(1u);
  }
  else {
    a4[2] = v12;
  }
  return result;
}

uint64_t sub_10003C8F8(void *a1)
{
  id v1 = [a1 feedbacks];
  if (!v1) {
    return 0;
  }
  char v2 = v1;
  sub_100023FA0(0, &qword_10021CD30);
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_10003C968(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TopicCacheEntry();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003C9CC(uint64_t a1, uint64_t a2)
{
  return a2;
}

_OWORD *sub_10003CA28(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_10003CA38(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CancellableStoreKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003CA9C(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_10001DCF8();
  uint64_t v4 = sub_10002B8F4();
  v5(v4);
  return a2;
}

unint64_t sub_10003CAF4()
{
  unint64_t result = qword_1002197E8;
  if (!qword_1002197E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002197E8);
  }
  return result;
}

uint64_t sub_10003CB40(uint64_t a1)
{
  uint64_t v2 = sub_10002572C(&qword_10021BB20);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10003CBB0()
{
  return type metadata accessor for Date();
}

uint64_t sub_10003CBD0(_DWORD *a1)
{
  *(void *)(v2 + 16) = a1;
  *a1 = 0;
  *(void *)(v1 + vsub_100034730((uint64_t)"SIGINT", 6, 3) = v2;
  return Date.init()();
}

uint64_t sub_10003CBF0()
{
  swift_weakInit();
  *(unsigned char *)(v0 + 24) = 0;
  swift_weakAssign();
  swift_release();
  return v0;
}

void *sub_10003CC34()
{
  sub_100026034();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  if (!swift_weakLoadStrong()) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v4 = (void *)sub_1000BDDB8();
  if (!v4) {
    goto LABEL_22;
  }
  BOOL v5 = v4;
  if (([v4 smartHistoryEnabled] & 1) == 0)
  {
    swift_release();

    return _swiftEmptyArrayStorage;
  }
  if (qword_100218B68 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_10002A10C(v6, (uint64_t)qword_100236A50);
  id v7 = v3;
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)sub_100017D90();
    *(_DWORD *)uint64_t v10 = 134217984;
    sub_10001844C();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl((void *)&_mh_execute_header, v8, v9, "request.triggerEvent %lu", v10, 0xCu);
    sub_100017D40();
  }
  else
  {
  }
  if (sub_10001844C() != (id)21 && sub_10001844C() != (id)24 && sub_10001844C() != (id)1)
  {

LABEL_22:
    swift_release();
    return _swiftEmptyArrayStorage;
  }
  id v11 = [v7 queryString];
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v14 = v13;

  if ((uint64_t)[v5 smartHistoryMinimumQueryLength] < 1)
  {
LABEL_17:
    uint64_t v16 = 0;
    goto LABEL_18;
  }
  id v15 = [v5 smartHistoryMinimumQueryLength];
  uint64_t v16 = (uint64_t)v15 - 1;
  if (__OFSUB__(v15, 1))
  {
    __break(1u);
    goto LABEL_17;
  }
LABEL_18:
  if (String.count.getter() < v16)
  {

    swift_release();
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRetain();
  id v17 = v5;
  swift_retain();
  unint64_t v18 = sub_10003E4E0(v7, v17, v1, v12, v14, v17, v1);
  swift_release();

  swift_bridgeObjectRelease();
  return v18;
}

void *sub_10003CEC8(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = v3;
  if (!swift_weakLoadStrong()) {
    return _swiftEmptyArrayStorage;
  }
  if (!sub_100028C88() || (uint64_t v8 = sub_10007E168(), swift_unknownObjectRelease(), !v8))
  {
    swift_release();
    return _swiftEmptyArrayStorage;
  }
  if (a3 >= 0xA) {
    uint64_t v9 = 10;
  }
  else {
    uint64_t v9 = a3;
  }
  uint64_t v10 = sub_10004FF60(a1, a2, *(unsigned char *)(v4 + 24), v9);
  swift_release();
  swift_unknownObjectRelease();
  return (void *)v10;
}

void sub_10003CF84(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5 = v4;
  uint64_t v9 = (int *)type metadata accessor for ECCQuery(0);
  sub_10001DCF8();
  __chkstk_darwin(v10);
  if (sub_100021234())
  {
    if (swift_unknownObjectWeakLoadStrong() && (uint64_t v11 = sub_10007E168(), swift_unknownObjectRelease(), v11))
    {
      char v12 = *(unsigned char *)(v5 + 24);
      uint64_t v13 = 10;
      if (a3 < 0xA) {
        uint64_t v13 = a3;
      }
      *(void *)uint64_t v3 = a1;
      *(void *)(v3 + 8) = a2;
      *(unsigned char *)(v3 + 16) = v12;
      *(void *)(v3 + 24) = v13;
      *(_WORD *)(v3 + 3sub_100034730((uint64_t)"SIGTERM", 7, 2) = 0;
      *(unsigned char *)(v3 + 34) = 1;
      uint64_t v14 = v3 + v9[10];
      swift_bridgeObjectRetain();
      Date.init(timeIntervalSinceNow:)();
      uint64_t v15 = type metadata accessor for Date();
      sub_10002538C(v14, 0, 1, v15);
      *(unsigned char *)(v3 + v9[11]) = 1;
      *(unsigned char *)(v3 + v9[12]) = 1;
      *(unsigned char *)(v3 + v9[13]) = 1;
      sub_100050054();
      swift_release();
      swift_unknownObjectRelease();
      sub_100040614(v3);
    }
    else
    {
      swift_release();
    }
  }
  sub_10000DFB8();
}

void sub_10003D0E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v4;
  uint64_t v9 = (int *)type metadata accessor for ECCQuery(0);
  sub_10001DCF8();
  __chkstk_darwin(v10);
  if (sub_100021234())
  {
    if (swift_unknownObjectWeakLoadStrong() && (uint64_t v11 = sub_10007E168(), swift_unknownObjectRelease(), v11))
    {
      char v12 = *(unsigned char *)(v5 + 24);
      *(void *)uint64_t v3 = a1;
      *(void *)(v3 + 8) = a2;
      *(unsigned char *)(v3 + 16) = v12;
      *(void *)(v3 + 24) = a3;
      *(_WORD *)(v3 + 3sub_100034730((uint64_t)"SIGTERM", 7, 2) = 0;
      *(unsigned char *)(v3 + 34) = 1;
      uint64_t v13 = v3 + v9[10];
      uint64_t v14 = type metadata accessor for Date();
      sub_10002538C(v13, 1, 1, v14);
      *(unsigned char *)(v3 + v9[11]) = 1;
      *(unsigned char *)(v3 + v9[12]) = 0;
      *(unsigned char *)(v3 + v9[13]) = 0;
      swift_bridgeObjectRetain();
      sub_100050054();
      swift_release();
      swift_unknownObjectRelease();
      sub_100040614(v3);
    }
    else
    {
      swift_release();
    }
  }
  sub_10000DFB8();
}

void sub_10003D230()
{
  sub_100026034();
  uint64_t v35 = v2;
  uint64_t v36 = v3;
  uint64_t v4 = v0;
  char v6 = v5;
  uint64_t v8 = v7;
  uint64_t v9 = type metadata accessor for Date();
  sub_100020C48();
  uint64_t v11 = v10;
  __chkstk_darwin(v12);
  if (!sub_10002DE10()) {
    goto LABEL_13;
  }
  if (swift_unknownObjectWeakLoadStrong() && (uint64_t v13 = sub_10007E168(), swift_unknownObjectRelease(), v13))
  {
    uint64_t v14 = (void *)sub_1000BDDB8();
    if (v14)
    {
      uint64_t v30 = v14;
      uint64_t v15 = (uint64_t)[v14 smartHistorySampleThreshold];
      Date.init()();
      Date.timeIntervalSince1970.getter();
      double v17 = v16;
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v1, v9);
      if ((~*(void *)&v17 & 0x7FF0000000000000) != 0)
      {
        if (v17 > -9.22337204e18)
        {
          if (v17 < 9.22337204e18)
          {
            if ((uint64_t)v17 % 100 >= v15
              || (sub_100013C38(v8, (SEL *)&selRef_fbr), !v18)
              || (Data.init(base64Encoded:options:)(), unint64_t v20 = v19, swift_bridgeObjectRelease(), v20 >> 60 == 15))
            {
              swift_release();
              swift_unknownObjectRelease();
LABEL_12:

LABEL_13:
              sub_100017D58();
              return;
            }
            uint64_t v23 = self;
            sub_1000283D4();
            Class isa = Data._bridgeToObjectiveC()().super.isa;
            id v31 = 0;
            id v25 = [v23 JSONObjectWithData:isa options:0 error:&v31];

            id v26 = v31;
            if (!v25)
            {
              uint64_t v29 = v26;
              _convertNSErrorToError(_:)();

              swift_willThrow();
              swift_errorRelease();

              sub_10002C138();
              swift_unknownObjectRelease();
              goto LABEL_13;
            }
            _bridgeAnyObjectToAny(_:)();
            swift_unknownObjectRelease();
            sub_10003CA28(&v32, v34);
            sub_10001C348((uint64_t)v34, (uint64_t)&v32);
            sub_10002572C(qword_1002199B8);
            if (!sub_10002CD00()) {
              goto LABEL_29;
            }
            uint64_t v27 = (uint64_t)v31;
            sub_100039DBC(25452, 0xE200000000000000, (uint64_t)v31, &v32);
            if (v33)
            {
              if (!sub_10002CD00())
              {

                sub_10002C138();
                swift_unknownObjectRelease();
                swift_bridgeObjectRelease();
                goto LABEL_33;
              }
              if ((v31 & 1) == 0)
              {
                sub_10001CA50((uint64_t)v34);
                sub_10002C138();
                swift_unknownObjectRelease();
                swift_bridgeObjectRelease();
                goto LABEL_12;
              }
              sub_100039DBC(113, 0xE100000000000000, v27, &v32);
              swift_bridgeObjectRelease();
              if (v33)
              {
                if (sub_10002CD00())
                {
                  uint64_t v28 = swift_allocObject();
                  *(unsigned char *)(v28 + 16) = v6 & 1;
                  *(void *)(v28 + 24) = v4;
                  swift_retain();
                  sub_1000507BC();

                  sub_10002C138();
                  swift_unknownObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_release();
LABEL_33:
                  sub_10001CA50((uint64_t)v34);
                  goto LABEL_13;
                }
LABEL_29:

                sub_10002C138();
                swift_unknownObjectRelease();
                goto LABEL_33;
              }

              sub_10002C138();
              swift_unknownObjectRelease();
            }
            else
            {

              sub_10002C138();
              swift_unknownObjectRelease();
              swift_bridgeObjectRelease();
            }
            sub_1000255D4((uint64_t)&v32, (uint64_t *)&unk_10021BB30);
            goto LABEL_33;
          }
LABEL_38:
          __break(1u);
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
      goto LABEL_38;
    }
    swift_release();
    sub_100017D58();
    swift_unknownObjectRelease();
  }
  else
  {
    sub_100017D58();
    swift_release();
  }
}

uint64_t sub_10003D708(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v8 = a1;
  id v7 = &type metadata for Int;
  v6[0] = a2 & 1;
  swift_bridgeObjectRetain();
  sub_100118A10((uint64_t)v6, 101, 0xE100000000000000);
  uint64_t v4 = *(unsigned __int8 *)(a3 + 24);
  id v7 = &type metadata for UInt;
  v6[0] = v4;
  sub_100118A10((uint64_t)v6, 99, 0xE100000000000000);
  sub_10003E8AC(v8);

  return swift_bridgeObjectRelease();
}

void sub_10003D7B4(void *a1)
{
  uint64_t v2 = v1;
  if (qword_100218B68 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_10002A10C(v4, (uint64_t)qword_100236A50);
  char v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    id v7 = (uint8_t *)sub_100023E24();
    *(_WORD *)id v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "ECC: received engagement feedback", v7, 2u);
    sub_100017D40();
  }

  if (!swift_weakLoadStrong())
  {
    uint64_t v33 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v33, v11))
    {
      uint64_t v12 = (uint8_t *)sub_100023E24();
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, v11, "ECC: No client state", v12, 2u);
      sub_100017D40();
    }
    goto LABEL_28;
  }
  uint64_t v8 = sub_1000BDDB8();
  if (v8)
  {
    uint64_t v33 = v8;
    if ([v8 smartHistoryEnabled])
    {
      uint64_t v9 = [a1 result];
      if (v9)
      {
        long long v32 = v9;
        sub_10003EC30();
        (*(void (**)(void *))(*(void *)v2 + 264))(a1);
        if (v10)
        {
          if ([v32 typeForPQC] != (id)2) {
            sub_10003D230();
          }
          sub_10003DB60(v32);
          swift_release();

          swift_bridgeObjectRelease();
          return;
        }
        uint64_t v27 = (void *)Logger.logObject.getter();
        os_log_type_t v28 = static os_log_type_t.debug.getter();
        if (sub_100017D10(v28))
        {
          uint64_t v29 = (_WORD *)sub_100023E24();
          sub_1000263D4(v29);
          sub_100024288((void *)&_mh_execute_header, v30, v31, "ECC: failed to resolve suggestion");
          sub_100017D40();
        }

        swift_release();
        id v26 = v32;
        goto LABEL_29;
      }
      uint64_t v18 = (void *)Logger.logObject.getter();
      os_log_type_t v24 = static os_log_type_t.error.getter();
      if (!sub_100017D10(v24)) {
        goto LABEL_27;
      }
      id v25 = (_WORD *)sub_100023E24();
      sub_1000263D4(v25);
      uint64_t v23 = "ECC: result is not set";
    }
    else
    {
      uint64_t v18 = (void *)Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.debug.getter();
      if (!sub_100017D10(v19))
      {
LABEL_27:

        swift_release();
LABEL_28:
        id v26 = v33;
LABEL_29:

        return;
      }
      unint64_t v20 = (_WORD *)sub_100023E24();
      sub_1000263D4(v20);
      uint64_t v23 = "ECC: smart history is disabled";
    }
    sub_100024288((void *)&_mh_execute_header, v21, v22, v23);
    sub_100017D40();
    goto LABEL_27;
  }
  uint64_t v13 = (void *)Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.error.getter();
  if (sub_100017D10(v14))
  {
    uint64_t v15 = (_WORD *)sub_100023E24();
    sub_1000263D4(v15);
    sub_100024288((void *)&_mh_execute_header, v16, v17, "ECC: No bag");
    sub_100017D40();
  }

  swift_release();
}

void sub_10003DB60(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Date();
  sub_100020C48();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  sub_10000DFD0();
  uint64_t v10 = v9 - v8;
  if (((*(uint64_t (**)(void))(*(void *)v1 + 232))() & 1) == 0)
  {
    if (qword_100218B68 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    sub_10002A10C(v16, (uint64_t)qword_100236A50);
    long long v32 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v32, v17)) {
      goto LABEL_20;
    }
    uint64_t v18 = (uint8_t *)sub_100023E24();
    *(_WORD *)uint64_t v18 = 0;
    os_log_type_t v19 = "ECC: disabled";
LABEL_19:
    _os_log_impl((void *)&_mh_execute_header, v32, v17, v19, v18, 2u);
    sub_100017D40();
    goto LABEL_20;
  }
  if (!swift_weakLoadStrong())
  {
    if (qword_100218B68 != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    sub_10002A10C(v23, (uint64_t)qword_100236A50);
    long long v32 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v32, v17)) {
      goto LABEL_20;
    }
    uint64_t v18 = (uint8_t *)sub_100023E24();
    *(_WORD *)uint64_t v18 = 0;
    os_log_type_t v19 = "ECC: No client state";
    goto LABEL_19;
  }
  if (!sub_100028C88() || (uint64_t v11 = sub_10007E168(), swift_unknownObjectRelease(), !v11))
  {
    if (qword_100218B68 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_10002A10C(v20, (uint64_t)qword_100236A50);
    uint64_t v33 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v33, v21))
    {

      sub_10000DFB8();
      swift_release();
      return;
    }
    uint64_t v22 = (uint8_t *)sub_100023E24();
    *(_WORD *)uint64_t v22 = 0;
    _os_log_impl((void *)&_mh_execute_header, v33, v21, "ECC: cache is missing", v22, 2u);
    sub_100017D40();
    swift_release();
LABEL_20:
    sub_10000DFB8();

    return;
  }
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000283D4();
  sub_1000E6DD0();
  swift_unknownObjectRelease();
  if ((*(uint64_t (**)(void *))(*(void *)v1 + 256))(a1))
  {
    unsigned int v31 = [a1 type];
    sub_100013C38(a1, (SEL *)&selRef_userInput);
    sub_100023FA0(0, &qword_1002199B0);
    Date.init()();
    swift_bridgeObjectRetain();
    sub_1000283D4();
    uint64_t v12 = (void *)PAREngagedResult.init(_:searchString:type:engagemementTime:)();
    [v12 setType:v31];
    [v12 setScore:1.0];
    Date.init()();
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v10, v4);
    [v12 setEngagementTime:isa];

    sub_10002572C(&qword_1002192A8);
    uint64_t v14 = swift_allocObject();
    *(_OWORD *)(v14 + 16) = xmmword_1001A3820;
    *(void *)(v14 + 3sub_100034730((uint64_t)"SIGTERM", 7, 2) = v12;
    specialized Array._endMutation()();
    id v15 = v12;
    sub_1000509C8();
    swift_release();
    swift_unknownObjectRelease();

    swift_bridgeObjectRelease();
    sub_10000DFB8();
    return;
  }
  if (qword_100218B68 != -1) {
    swift_once();
  }
  uint64_t v27 = type metadata accessor for Logger();
  sub_10002A10C(v27, (uint64_t)qword_100236A50);
  uint64_t v34 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v34, v28))
  {
    uint64_t v29 = (_WORD *)sub_100023E24();
    sub_1000263D4(v29);
    _os_log_impl((void *)&_mh_execute_header, v34, v28, "ECC: unsupported engagement type", v2, 2u);
    sub_100017D40();
    swift_release();
    swift_unknownObjectRelease();
    goto LABEL_20;
  }

  swift_release();
  sub_10000DFB8();
  swift_unknownObjectRelease();
}

uint64_t sub_10003E130()
{
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    if (sub_100028C88() && (uint64_t v1 = sub_10007E168(), swift_unknownObjectRelease(), v1))
    {
      sub_100050BE0();
      swift_release();
      return swift_unknownObjectRelease();
    }
    else
    {
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_10003E200()
{
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    if (sub_100028C88() && (uint64_t v1 = sub_10007E168(), swift_unknownObjectRelease(), v1))
    {
      sub_100050EA4();
      swift_release();
      return swift_unknownObjectRelease();
    }
    else
    {
      return swift_release();
    }
  }
  return result;
}

void sub_10003E300(uint64_t a1, void (*a2)(void), uint64_t a3)
{
}

void sub_10003E318(uint64_t a1, void (*a2)(void), uint64_t a3)
{
}

void sub_10003E330(uint64_t a1, void (*a2)(void), uint64_t a3, void (*a4)(uint64_t, void, void (*)(void), uint64_t))
{
  uint64_t v6 = v4;
  if (swift_weakLoadStrong())
  {
    if (swift_unknownObjectWeakLoadStrong())
    {
      uint64_t v10 = sub_10007E168();
      swift_unknownObjectRelease();
      if (v10)
      {
        a4(a1, *(unsigned __int8 *)(v6 + 24), a2, a3);
        swift_release();
        swift_unknownObjectRelease();
        return;
      }
    }
    swift_release();
  }
  if (a2)
  {
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v13 = v12;
    sub_10002572C(&qword_100219280);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1001A2A20;
    *(void *)(inited + 3sub_100034730((uint64_t)"SIGTERM", 7, 2) = 0x6E6F73616572;
    *(void *)(inited + 40) = 0xE600000000000000;
    *(void *)(inited + 7sub_100034730((uint64_t)"SIGTERM", 7, 2) = &type metadata for String;
    *(void *)(inited + 48) = 0xD00000000000001DLL;
    *(void *)(inited + 56) = 0x80000001001B0C80;
    uint64_t v15 = Dictionary.init(dictionaryLiteral:)();
    id v16 = objc_allocWithZone((Class)NSError);
    id v17 = sub_1000B06A0(v11, v13, 500, v15);
    a2();
  }
}

void *sub_10003E4E0(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, id a6, uint64_t a7)
{
  id v40 = a2;
  uint64_t v41 = a4;
  uint64_t v11 = sub_10002572C(&qword_10021BF30);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for UserAgent();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  id v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (swift_weakLoadStrong())
  {
    uint64_t v38 = v15;
    id v42 = a6;
    id v18 = [a1 queryString];
    uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v21 = v20;

    sub_100032384();
    int v22 = sub_100027BA4((uint64_t)v13, 1, v14);
    uint64_t v39 = a7;
    uint64_t v37 = v14;
    if (v22 == 1)
    {
      parsecdUserAgent.getter();
      sub_1000255D4((uint64_t)v13, &qword_10021BF30);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v17, v13, v14);
    }
    uint64_t v24 = String.count.getter();
    if (v24 >= (uint64_t)[v40 smartHistoryMinimumQueryLength]) {
      uint64_t v25 = 1;
    }
    else {
      uint64_t v25 = 19;
    }
    id v26 = objc_msgSend(a1, "queryId", v37);
    id v27 = objc_allocWithZone((Class)SFStartLocalSearchFeedback);
    id v28 = sub_100040150(v19, v21, v25, 7, (uint64_t)v26);
    sub_100023FA0(0, &qword_10021CD30);
    swift_unknownObjectRetain();
    id v29 = v28;
    id v30 = sub_1000E515C(v29, (uint64_t)[a1 queryId]);
    sub_1000148D0();
    swift_unknownObjectRelease();

    uint64_t v31 = v41;
    uint64_t v32 = String.count.getter();
    if (v32 >= (uint64_t)[v42 smartHistoryMinimumQueryLength])
    {
      sub_10003CEC8(v31, a5, 1uLL);
      uint64_t v23 = sub_10003FD94();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v23 = _swiftEmptyArrayStorage;
    }
    id v33 = [objc_allocWithZone((Class)SFEndLocalSearchFeedback) initWithStartSearch:v29];
    swift_unknownObjectRetain();
    id v34 = v33;
    id v35 = sub_1000E515C(v34, (uint64_t)[a1 queryId]);
    sub_1000148D0();

    swift_release();
    swift_unknownObjectRelease();

    (*(void (**)(char *, uint64_t))(v38 + 8))(v17, v37);
    swift_bridgeObjectRelease();
    a6 = v42;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v23 = _swiftEmptyArrayStorage;
  }
  swift_release();

  return v23;
}

void sub_10003E8AC(uint64_t a1)
{
  if (*(void *)(a1 + 16) && swift_weakLoadStrong())
  {
    if (sub_100028C88())
    {
      sub_1001015D8();
      uint64_t v2 = v1;
      id v3 = objc_allocWithZone((Class)SFCustomFeedback);
      id v4 = sub_1000401D8(6, v2);
      if (v4)
      {
        id v16 = v4;
        id v5 = [self defaultManager];
        uint64_t v8 = sub_1000B19C4(6);

        uint64_t v9 = sub_1000404D8(v16, (SEL *)&selRef_data);
        if (v10 >> 60 == 15)
        {
          __break(1u);
        }
        else
        {
          uint64_t v11 = v9;
          unint64_t v12 = v10;
          Class isa = Data._bridgeToObjectiveC()().super.isa;
          sub_10000A330(v11, v12);
          [v8 writeData:isa];

          [v8 closeFile];
          swift_release();
          swift_unknownObjectRelease();
          sub_100017D74();
        }
      }
      else
      {
        swift_release();
        sub_100017D74();
        swift_unknownObjectRelease();
      }
    }
    else
    {
      sub_100017D74();
      swift_release();
    }
  }
  else
  {
    sub_100017D74();
  }
}

void sub_10003EC30()
{
  sub_100026034();
  uint64_t v186 = v1;
  uint64_t v187 = v2;
  v172 = v3;
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = sub_100016544(v4);
  __chkstk_darwin(v5);
  sub_10000E04C();
  sub_10002AC48(v6);
  uint64_t v7 = type metadata accessor for Apple_Parsec_Search_V2_Entity.Topic();
  sub_100020C48();
  uint64_t v173 = v8;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v151 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v177 = type metadata accessor for Apple_Parsec_Search_V2_Entity.Category();
  sub_100020C48();
  uint64_t v181 = v12;
  __chkstk_darwin(v13);
  sub_10000E04C();
  sub_10002AC48(v14);
  uint64_t v180 = type metadata accessor for Apple_Parsec_Search_V2_Entity();
  sub_100020C48();
  uint64_t v178 = v15;
  __chkstk_darwin(v16);
  sub_10000E04C();
  sub_10002AC48(v17);
  uint64_t v18 = type metadata accessor for BinaryDecodingOptions();
  uint64_t v19 = sub_100016544(v18);
  __chkstk_darwin(v19);
  sub_10000E04C();
  v182 = v20;
  uint64_t v21 = sub_10002572C(&qword_100219980);
  uint64_t v22 = sub_100016544(v21);
  __chkstk_darwin(v22);
  sub_10000E04C();
  sub_10002AC48(v23);
  uint64_t v171 = type metadata accessor for Apple_Parsec_Search_V2_Result();
  sub_100020C48();
  uint64_t v169 = v24;
  __chkstk_darwin(v25);
  sub_10000E04C();
  sub_10002AC48(v26);
  type metadata accessor for Client();
  sub_100020C48();
  __chkstk_darwin(v27);
  sub_10000DFD0();
  uint64_t v28 = type metadata accessor for UserAgent();
  sub_100020C48();
  uint64_t v30 = v29;
  __chkstk_darwin(v31);
  sub_10000DFD0();
  uint64_t v34 = v33 - v32;
  uint64_t v35 = sub_10002572C(&qword_10021BF30);
  uint64_t v36 = sub_100016544(v35);
  __chkstk_darwin(v36);
  uint64_t v37 = sub_10002DE10();
  if (!v37) {
    goto LABEL_60;
  }
  uint64_t v170 = v7;
  uint64_t v38 = v37;
  sub_100032384();
  if (sub_100027BA4(v0, 1, v28))
  {
    swift_release();
    sub_1000255D4(v0, &qword_10021BF30);
LABEL_60:
    sub_100017D58();
    return;
  }
  uint64_t v155 = v38;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 16))(v34, v0, v28);
  sub_1000255D4(v0, &qword_10021BF30);
  UserAgent.client.getter();
  (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v34, v28);
  uint64_t v152 = Client.name.getter();
  uint64_t v154 = v39;
  uint64_t v40 = sub_10002ECE4();
  v41(v40);
  id v42 = v172;
  uint64_t v43 = sub_1000404D8(v172, (SEL *)&selRef_entityData);
  if (v44 >> 60 == 15)
  {
LABEL_51:
    uint64_t v133 = sub_100013C38(v42, (SEL *)&selRef_userInput);
    if (v134)
    {
      uint64_t v135 = v133;
      uint64_t v136 = v134;
      uint64_t v137 = sub_100013C38(v42, (SEL *)&selRef_completedQuery);
      if (v138)
      {
        uint64_t v139 = v137;
        uint64_t v140 = v138;
        if (String.count.getter() > 0)
        {
          sub_10002572C(&qword_100219988);
          uint64_t inited = swift_initStackObject();
          *(_OWORD *)(inited + 16) = xmmword_1001A3830;
          *(void *)(inited + 3sub_100034730((uint64_t)"SIGTERM", 7, 2) = 0x7475706E69;
          *(void *)(inited + 40) = 0xE500000000000000;
          *(void *)(inited + 48) = v135;
          *(void *)(inited + 56) = v136;
          *(void *)(inited + 64) = 0x7972657571;
          *(void *)(inited + 7sub_100034730((uint64_t)"SIGTERM", 7, 2) = 0xE500000000000000;
          *(void *)(inited + 80) = v139;
          *(void *)(inited + 88) = v140;
          Dictionary.init(dictionaryLiteral:)();
          v185[0] = v152;
          v185[1] = v154;
          sub_100021100();
          uint64_t v142 = StringProtocol.capitalized.getter();
          uint64_t v144 = v143;
          swift_bridgeObjectRelease();
          sub_100101974();
          uint64_t v146 = v145;
          swift_bridgeObjectRelease();
          id v147 = objc_allocWithZone((Class)INIntent);
          id v148 = sub_100040408(v142, v144, 0x656D656761676E45, 0xEA0000000000746ELL, v146);
          sub_100023FA0(0, &qword_100219990);
          id v149 = v148;
          id v150 = sub_10003FD38(v149, 0);
          [v150 donateInteractionWithCompletion:0];

LABEL_59:
          swift_release();
          goto LABEL_60;
        }
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    goto LABEL_59;
  }
  uint64_t v45 = v43;
  unint64_t v46 = v44;
  memset(v185, 0, 40);
  sub_100027BCC(v43, v44);
  BinaryDecodingOptions.init()();
  sub_100040538();
  uint64_t v47 = v183;
  unint64_t v48 = v46;
  uint64_t v49 = v171;
  Message.init(serializedData:extensions:partial:options:)();
  v151[1] = v45;
  v151[2] = v48;
  sub_10002538C(v47, 0, 1, v49);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v169 + 32))(v168, v47, v49);
  uint64_t v163 = *(void *)(Apple_Parsec_Search_V2_Result.entities.getter() + 16);
  if (!v163)
  {
    swift_bridgeObjectRelease();
LABEL_37:
    uint64_t v113 = sub_100013C38(v42, (SEL *)&selRef_identifier);
    if (v114) {
      uint64_t v115 = v113;
    }
    else {
      uint64_t v115 = 0;
    }
    if (v114) {
      uint64_t v116 = v114;
    }
    else {
      uint64_t v116 = 0xE000000000000000;
    }
    uint64_t v117 = v164;
    Date.init()();
    id v118 = objc_allocWithZone((Class)PPSource);
    id v54 = sub_1000402F4(0xD000000000000011, 0x80000001001B08B0, 0, 0, v115, v116, v117);
    swift_bridgeObjectRetain();
    sub_10002572C(&qword_1002197D0);
    sub_10002572C(&qword_1002199A0);
    sub_100040588();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    sub_100013C38(v42, (SEL *)&selRef_userInput);
    NSString v120 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    sub_100013C38(v42, (SEL *)&selRef_completedQuery);
    uint64_t v121 = self;
    NSString v122 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v185[0] = 0;
    unsigned int v123 = [v121 donateParsecNamedEntitiesAndTopics:isa rawQuery:v120 reformulatedQuery:v122 source:v54 error:v185];

    if (v123)
    {
      uint64_t v124 = *(void (**)(uint64_t, uint64_t))(v169 + 8);
      id v125 = (id)v185[0];
      v124(v168, v171);
      sub_100024F60();
    }
    else
    {
      id v126 = (id)v185[0];
      _convertNSErrorToError(_:)();

      swift_willThrow();
      if (qword_100218B68 != -1) {
LABEL_64:
      }
        swift_once();
      uint64_t v127 = type metadata accessor for Logger();
      sub_10002A10C(v127, (uint64_t)qword_100236A50);
      swift_errorRetain();
      swift_errorRetain();
      id v128 = Logger.logObject.getter();
      os_log_type_t v129 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v128, v129))
      {
        uint64_t v130 = (uint8_t *)sub_100017D90();
        v185[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v130 = 136315138;
        swift_getErrorValue();
        uint64_t v131 = Error.localizedDescription.getter();
        uint64_t v184 = sub_10001C274(v131, v132, v185);
        id v42 = v172;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v128, v129, "ECC: donateParsecNamedEntitiesAndTopics error %s", v130, 0xCu);
        swift_arrayDestroy();
        sub_100017D40();
        sub_100017D40();
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
      }
      swift_errorRelease();
      sub_100024F60();
      (*(void (**)(uint64_t, uint64_t))(v169 + 8))(v168, v171);
    }
    swift_bridgeObjectRelease();
    goto LABEL_51;
  }
  uint64_t v157 = v11;
  unint64_t v50 = 0;
  sub_100025184();
  uint64_t v162 = v51 + v52;
  uint64_t v161 = v53 + 16;
  uint64_t v160 = (void (**)(uint64_t, uint64_t))(v181 + 8);
  uint64_t v156 = v173 + 8;
  v158 = (void (**)(uint64_t, uint64_t))(v53 + 8);
  id v54 = _swiftEmptyDictionarySingleton;
  id v42 = (Class *)&_s10PegasusAPI41Apple_Parsec_Search_V2_TransportationModeO7drivingyA2CmFWC_ptr;
  uint64_t v55 = &selRef_isEqualToString_;
  *(void *)&long long v56 = 134217984;
  long long v153 = v56;
  uint64_t v159 = v51;
  uint64_t v181 = v173 + 16;
  while (1)
  {
    if (v50 >= *(void *)(v51 + 16))
    {
      __break(1u);
LABEL_62:
      __break(1u);
LABEL_63:
      __break(1u);
      goto LABEL_64;
    }
    uint64_t v57 = *(void *)(v178 + 72);
    unint64_t v175 = v50;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v178 + 16))(v179, v162 + v57 * v50, v180);
    uint64_t v58 = Apple_Parsec_Search_V2_Entity.name.getter();
    uint64_t v60 = v59;
    uint64_t v61 = v176;
    Apple_Parsec_Search_V2_Entity.category.getter();
    uint64_t v62 = sub_10007DE64();
    (*v160)(v61, v177);
    id v63 = objc_allocWithZone((Class)PPNamedEntity);
    id v64 = sub_100040264(v58, v60, v62);
    Apple_Parsec_Search_V2_Entity.probabilityScore.getter();
    double v66 = v65;
    id v67 = objc_allocWithZone(v42[337]);
    uint64_t v68 = v55[107];
    id v174 = v64;
    id v69 = objc_msgSend(v67, v68, v64, v66);
    uint64_t v70 = Apple_Parsec_Search_V2_Entity.topics.getter();
    uint64_t v71 = *(void *)(v70 + 16);
    if (v71)
    {
      id v166 = v69;
      uint64_t v167 = v54;
      v185[0] = (uint64_t)_swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)();
      sub_100025184();
      uint64_t v165 = v70;
      uint64_t v73 = v70 + v72;
      uint64_t v183 = *(void *)(v74 + 72);
      v182 = *(void (**)(char *, uint64_t, uint64_t))(v74 + 16);
      uint64_t v75 = v170;
      uint64_t v76 = v157;
      do
      {
        v182(v76, v73, v75);
        Apple_Parsec_Search_V2_Entity.Topic.identifier.getter();
        id v77 = objc_allocWithZone((Class)PPTopic);
        NSString v78 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v79 = [v77 initWithTopicIdentifier:v78];

        Apple_Parsec_Search_V2_Entity.Topic.score.getter();
        [objc_allocWithZone((Class)PPScoredItem) initWithItem:v79 score:v80];

        uint64_t v81 = sub_10002ECE4();
        v82(v81);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        v73 += v183;
        --v71;
      }
      while (v71);
      unint64_t v83 = v185[0];
      swift_bridgeObjectRelease();
      id v54 = v167;
      id v42 = (Class *)&_s10PegasusAPI41Apple_Parsec_Search_V2_TransportationModeO7drivingyA2CmFWC_ptr;
      uint64_t v55 = &selRef_isEqualToString_;
      id v69 = v166;
    }
    else
    {
      swift_bridgeObjectRelease();
      unint64_t v83 = (unint64_t)_swiftEmptyArrayStorage;
    }
    if (qword_100218B68 != -1) {
      swift_once();
    }
    uint64_t v84 = type metadata accessor for Logger();
    sub_10002A10C(v84, (uint64_t)qword_100236A50);
    swift_bridgeObjectRetain_n();
    id v85 = Logger.logObject.getter();
    os_log_type_t v86 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v85, v86))
    {
      id v87 = v69;
      uint64_t v88 = sub_100017D90();
      *(_DWORD *)uint64_t v88 = v153;
      if (v83 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v89 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v89 = *(void *)((v83 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      *(void *)(v88 + 4) = v89;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v85, v86, "ECC: scored topics: %ld", (uint8_t *)v88, 0xCu);
      sub_100017D40();

      id v69 = v87;
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    if (v54[2])
    {
      id v90 = v69;
      unint64_t v91 = sub_10003B388();
      if (v92)
      {
        uint64_t v93 = *(void *)(v54[7] + 8 * v91);
        swift_bridgeObjectRetain();

        v185[0] = v93;
        sub_1000B9B8C(v83);
        id v94 = v90;
        swift_isUniquelyReferenced_nonNull_native();
        v185[0] = (uint64_t)v54;
        sub_10003BDD0();
        id v54 = (void *)v185[0];

        goto LABEL_33;
      }
    }
    unint64_t v95 = v55;
    id v96 = v69;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v185[0] = (uint64_t)v54;
    unint64_t v98 = sub_10003B388();
    uint64_t v100 = v54[2];
    BOOL v101 = (v99 & 1) == 0;
    Swift::Int v102 = v100 + v101;
    if (__OFADD__(v100, v101)) {
      goto LABEL_62;
    }
    unint64_t v103 = v98;
    char v104 = v99;
    sub_10002572C(&qword_1002197D8);
    Swift::Bool v105 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v102);
    uint64_t v55 = v95;
    if (v105) {
      break;
    }
LABEL_28:
    id v54 = (void *)v185[0];
    if (v104)
    {
      uint64_t v108 = *(void *)(v185[0] + 56);
      swift_bridgeObjectRelease();
      *(void *)(v108 + 8 * v10sub_100034730((uint64_t)"SIGINT", 6, 3) = v83;
    }
    else
    {
      *(void *)(v185[0] + 8 * (v103 >> 6) + 64) |= 1 << v103;
      *(void *)(v54[6] + 8 * v10sub_100034730((uint64_t)"SIGINT", 6, 3) = v96;
      *(void *)(v54[7] + 8 * v10sub_100034730((uint64_t)"SIGINT", 6, 3) = v83;
      uint64_t v109 = v54[2];
      BOOL v110 = __OFADD__(v109, 1);
      uint64_t v111 = v109 + 1;
      if (v110) {
        goto LABEL_63;
      }
      v54[2] = v111;
      id v112 = v96;
    }

LABEL_33:
    swift_bridgeObjectRelease();
    unint64_t v50 = v175 + 1;
    (*v158)(v179, v180);
    uint64_t v51 = v159;
    if (v50 == v163)
    {
      swift_bridgeObjectRelease();
      id v42 = v172;
      goto LABEL_37;
    }
  }
  unint64_t v106 = sub_10003B388();
  if ((v104 & 1) == (v107 & 1))
  {
    unint64_t v103 = v106;
    goto LABEL_28;
  }
  sub_10002572C(&qword_1002197D0);
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

id sub_10003FD38(void *a1, void *a2)
{
  id v4 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) initWithIntent:a1 response:a2];

  return v4;
}

void *sub_10003FD94()
{
  sub_100026034();
  unint64_t v1 = v0;
  if (!swift_weakLoadStrong()) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v2 = (void *)sub_1000BDDB8();
  if (!v2) {
    goto LABEL_20;
  }
  id v3 = v2;
  if (([v2 smartHistoryEnabled] & 1) == 0) {
    goto LABEL_23;
  }
  if (!(v1 >> 62))
  {
    uint64_t v4 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v4) {
      goto LABEL_6;
    }
LABEL_23:
    swift_release();

    return _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRetain();
  uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v4) {
    goto LABEL_23;
  }
LABEL_6:
  if (v4 < 1)
  {
    __break(1u);
LABEL_26:
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_18;
  }
  swift_bridgeObjectRetain();
  for (uint64_t i = 0; i != v4; ++i)
  {
    if ((v1 & 0xC000000000000001) != 0) {
      id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v6 = *(id *)(v1 + 8 * i + 32);
    }
    uint64_t v7 = v6;
    uint64_t v8 = PAREngagedResult.toServerSuggestion()();

    if (v8)
    {
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      sub_1000283D4();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
  }
  swift_bridgeObjectRelease();
  if ((unint64_t)_swiftEmptyArrayStorage >> 62) {
    goto LABEL_26;
  }
  uint64_t v9 = *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_18:
  if (v9 > 1)
  {
    uint64_t v10 = sub_1000865A8(1, (unint64_t)_swiftEmptyArrayStorage);
    uint64_t v14 = sub_1000EA548(v10, v11, v12, v13);

    swift_release();
    return v14;
  }

LABEL_20:
  swift_release();
  return _swiftEmptyArrayStorage;
}

uint64_t sub_10003FF9C()
{
  swift_weakDestroy();

  return _swift_deallocClassInstance(v0, 25, 7);
}

uint64_t type metadata accessor for BasicEngagedSuggestionController()
{
  return self;
}

void *sub_10003FFF8()
{
  return sub_10003CC34();
}

void sub_10004001C(uint64_t a1, uint64_t a2, unint64_t a3)
{
}

void sub_100040040(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_100040064()
{
  return sub_10003E130();
}

void sub_100040088(uint64_t a1, void (*a2)(void), uint64_t a3)
{
}

void sub_1000400AC(uint64_t a1, void (*a2)(void), uint64_t a3)
{
}

uint64_t sub_1000400D0()
{
  return sub_10003E200();
}

void sub_100040108(void *a1)
{
}

void sub_10004012C()
{
}

id sub_100040150(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v6 = v5;
  if (a2)
  {
    NSString v10 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v10 = 0;
  }
  id v11 = [v6 initWithInput:v10 triggerEvent:a3 indexType:a4 queryId:a5];

  return v11;
}

id sub_1000401D8(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    v4.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v4.super.Class isa = 0;
  }
  id v5 = [v2 initWithType:a1 jsonFeedback:v4.super.isa];

  return v5;
}

id sub_100040264(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v7 = [v3 initWithName:v5 category:a3 language:v6];

  return v7;
}

id sub_1000402F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = v7;
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (a4)
  {
    NSString v12 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v12 = 0;
  }
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  id v15 = [v8 initWithBundleId:v11 groupId:v12 documentId:v13 date:isa];

  uint64_t v16 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(a7, v16);
  return v15;
}

id sub_100040408(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (a5)
  {
    v9.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v9.super.Class isa = 0;
  }
  id v10 = [v5 initWithDomain:v7 verb:v8 parametersByName:v9.super.isa];

  return v10;
}

uint64_t sub_1000404D8(void *a1, SEL *a2)
{
  id v2 = [a1 *a2];
  if (!v2) {
    return 0;
  }
  id v3 = v2;
  uint64_t v4 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

  return v4;
}

unint64_t sub_100040538()
{
  unint64_t result = qword_100219998;
  if (!qword_100219998)
  {
    type metadata accessor for Apple_Parsec_Search_V2_Result();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100219998);
  }
  return result;
}

unint64_t sub_100040588()
{
  unint64_t result = qword_1002199A8;
  if (!qword_1002199A8)
  {
    sub_1000371D4(&qword_1002197D0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002199A8);
  }
  return result;
}

uint64_t sub_1000405D0()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100040608(uint64_t a1)
{
  return sub_10003D708(a1, *(unsigned char *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100040614(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ECCQuery(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t AtomicValue.__allocating_init(_:)()
{
  uint64_t v0 = swift_allocObject();
  AtomicValue.init(_:)();
  return v0;
}

uint64_t AtomicValue.init(_:)()
{
  type metadata accessor for Lock();
  swift_allocObject();
  *(void *)(v0 + 16) = Lock.init()();
  sub_100023E18();
  sub_100026848();
  (*(void (**)(void))(v1 + 32))();
  return v0;
}

void AtomicValue.load()(uint64_t a1@<X8>)
{
  Lock.lock()();
  sub_100023E18();
  uint64_t v4 = v1 + *(void *)(v3 + 96);
  swift_beginAccess();
  sub_100026848();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a1, v4);
  Lock.unlock()();
}

void AtomicValue.store(_:)(uint64_t a1)
{
  Lock.lock()();
  sub_100023E18();
  uint64_t v4 = v1 + *(void *)(v3 + 96);
  swift_beginAccess();
  sub_100026848();
  (*(void (**)(uint64_t, uint64_t))(v5 + 24))(v4, a1);
  swift_endAccess();
  Lock.unlock()();
}

void AtomicValue.store(resultOf:)(void (*a1)(unsigned char *))
{
  uint64_t v3 = *(void *)(*(void *)v1 + 80);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(a1);
  NSString v7 = &v13[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v5);
  NSDictionary v9 = &v13[-v8];
  Lock.lock()();
  sub_100023E18();
  uint64_t v11 = v1 + *(void *)(v10 + 96);
  swift_beginAccess();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v4 + 16))(v7, v11, v3);
  uint64_t v12 = v14;
  a1(v7);
  (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v7, v3);
  if (!v12)
  {
    swift_beginAccess();
    (*(void (**)(uint64_t, unsigned char *, uint64_t))(v4 + 40))(v11, v9, v3);
    swift_endAccess();
  }
  sub_100040A98();
}

void sub_100040A98()
{
}

uint64_t *AtomicValue.deinit()
{
  uint64_t v1 = *v0;
  swift_release();
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 80) - 8) + 8))((uint64_t)v0 + *(void *)(*v0 + 96));
  return v0;
}

uint64_t AtomicValue.__deallocating_deinit()
{
  AtomicValue.deinit();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v1, v2);
}

uint64_t sub_100040B98()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for AtomicValue()
{
  return sub_100040C54();
}

uint64_t sub_100040C54()
{
  return swift_getGenericMetadata();
}

void sub_100040C84(uint64_t a1)
{
  sub_10001FC68(a1, v20);
  uint64_t v1 = v20[0];
  uint64_t v2 = v20[1];
  int64_t v3 = v20[3];
  unint64_t v4 = v20[4];
  int64_t v5 = (unint64_t)(v20[2] + 64) >> 6;
  swift_bridgeObjectRetain();
  uint64_t v6 = _swiftEmptyArrayStorage;
  while (1)
  {
    if (v4)
    {
      unint64_t v7 = __clz(__rbit64(v4));
      v4 &= v4 - 1;
      unint64_t v8 = v7 | (v3 << 6);
      goto LABEL_20;
    }
    int64_t v9 = v3 + 1;
    if (__OFADD__(v3, 1)) {
      break;
    }
    if (v9 >= v5) {
      goto LABEL_26;
    }
    unint64_t v10 = *(void *)(v2 + 8 * v9);
    int64_t v11 = v3 + 1;
    if (!v10)
    {
      int64_t v11 = v3 + 2;
      if (v3 + 2 >= v5) {
        goto LABEL_26;
      }
      unint64_t v10 = *(void *)(v2 + 8 * v11);
      if (!v10)
      {
        int64_t v11 = v3 + 3;
        if (v3 + 3 >= v5) {
          goto LABEL_26;
        }
        unint64_t v10 = *(void *)(v2 + 8 * v11);
        if (!v10)
        {
          int64_t v11 = v3 + 4;
          if (v3 + 4 >= v5) {
            goto LABEL_26;
          }
          unint64_t v10 = *(void *)(v2 + 8 * v11);
          if (!v10)
          {
            int64_t v11 = v3 + 5;
            if (v3 + 5 >= v5) {
              goto LABEL_26;
            }
            unint64_t v10 = *(void *)(v2 + 8 * v11);
            if (!v10)
            {
              int64_t v12 = v3 + 6;
              while (v12 < v5)
              {
                unint64_t v10 = *(void *)(v2 + 8 * v12++);
                if (v10)
                {
                  int64_t v11 = v12 - 1;
                  goto LABEL_19;
                }
              }
LABEL_26:
              swift_release();
              return;
            }
          }
        }
      }
    }
LABEL_19:
    unint64_t v4 = (v10 - 1) & v10;
    unint64_t v8 = __clz(__rbit64(v10)) + (v11 << 6);
    int64_t v3 = v11;
LABEL_20:
    if (!*(void *)(*(void *)(v1 + 56) + 16 * v8 + 8))
    {
      NSString v13 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v8);
      uint64_t v14 = v13[1];
      uint64_t v21 = *v13;
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_10002114C(0, v6[2] + 1, 1, (uint64_t)v6);
        uint64_t v6 = v18;
      }
      unint64_t v16 = v6[2];
      unint64_t v15 = v6[3];
      if (v16 >= v15 >> 1)
      {
        sub_10002114C(v15 > 1, v16 + 1, 1, (uint64_t)v6);
        uint64_t v6 = v19;
      }
      void v6[2] = v16 + 1;
      uint64_t v17 = &v6[2 * v16];
      void v17[4] = v21;
      v17[5] = v14;
    }
  }
  __break(1u);
}

uint64_t sub_100040E64(void *a1, void *a2)
{
  BOOL v4 = a1[2] == a2[2] && a1[3] == a2[3];
  if (v4 || (char v5 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v5 & 1) != 0))
  {
    BOOL v7 = a1[4] == a2[4] && a1[5] == a2[5];
    if (v7 || (char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v8 & 1) != 0))
    {
      if (a1[6] == a2[6] && a1[7] == a2[7])
      {
        return 1;
      }
      else
      {
        return _stringCompareWithSmolCheck(_:_:expecting:)();
      }
    }
  }
  return result;
}

uint64_t sub_100040F14(void **a1, void **a2)
{
  return sub_100040E64(*a1, *a2) & 1;
}

void sub_100040F38(uint64_t a1, uint64_t a2, unint64_t a3)
{
  sub_100040C84(a1);
  v13[0] = v5;
  sub_10002572C(&qword_100219B08);
  sub_100020DBC();
  uint64_t v6 = BidirectionalCollection<>.joined(separator:)();
  unint64_t v8 = v7;
  swift_bridgeObjectRelease();
  if (qword_100218B78 != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  sub_10002A10C(v9, (uint64_t)qword_100236A80);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  unint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = swift_slowAlloc();
    v13[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136315394;
    swift_bridgeObjectRetain();
    sub_10001C274(a2, a3, v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v12 + 1sub_100034730((uint64_t)"SIGTERM", 7, 2) = 2080;
    swift_bridgeObjectRetain();
    sub_10001C274(v6, v8, v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "%s missing properties: %s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
}

void *sub_10004118C()
{
  uint64_t v0 = static DeviceContextUtil.deviceCountryCode()();
  unint64_t v2 = v1;
  uint64_t v4 = static DeviceContextUtil.effectiveSystemLanguage()();
  unint64_t v5 = v3;
  if (v2 && v3)
  {
    uint64_t v6 = static DeviceContextUtil.localeIdentifier()();
    uint64_t v8 = v7;
    uint64_t v9 = static DeviceContextUtil.topPreferredLanguages()();
    uint64_t v10 = static DeviceContextUtil.region.getter();
    uint64_t v12 = v11;
    uint64_t result = (void *)swift_allocObject();
    result[2] = v0;
    result[3] = v2;
    result[4] = v4;
    result[5] = v5;
    result[6] = v6;
    result[7] = v8;
    result[8] = v9;
    result[9] = v10;
    result[10] = v12;
  }
  else
  {
    sub_10002572C(&qword_100219B00);
    uint64_t inited = (__n128 *)swift_initStackObject();
    unint64_t v15 = sub_100026858(inited, (__n128)xmmword_1001A3830);
    v15[3].n128_u64[0] = v0;
    v15[3].n128_u64[1] = v2;
    v15[4].n128_u64[0] = 0xD000000000000017;
    v15[4].n128_u64[1] = 0x80000001001B0CE0;
    v15[5].n128_u64[0] = v4;
    v15[5].n128_u64[1] = v5;
    sub_10002572C(&qword_10021D050);
    uint64_t v16 = Dictionary.init(dictionaryLiteral:)();
    sub_100040F38(v16, 0xD000000000000011, 0x80000001001B0D40);
    swift_bridgeObjectRelease();
    return 0;
  }
  return result;
}

uint64_t Atomic.__allocating_init(value:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  Atomic.init(value:)(a1);
  return v2;
}

uint64_t Atomic.init(value:)(uint64_t a1)
{
  sub_10002A390();
  uint64_t v4 = *(void *)(v3 + 80);
  sub_10002A390();
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(uint64_t (**)(uint64_t))(*(void *)(v5 + 88) + 8))(v4);
  uint64_t v7 = v6(a1);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  *(void *)(v1 + 16) = v7;
  return v1;
}

uint64_t Atomic.compareAndExchange(expected:desired:)(uint64_t a1, uint64_t a2)
{
  sub_10002A390();
  sub_10002A390();
  sub_10002A39C();
  v4();
  uint64_t v5 = sub_1000248E0();
  char v7 = v6(v5, a1, a2);
  swift_release();
  return v7 & 1;
}

uint64_t Atomic.add(_:)()
{
  sub_10002A390();
  sub_10002A390();
  sub_10002A39C();
  v0();
  uint64_t v1 = sub_100025800();
  v2(v1);

  return swift_release();
}

uint64_t Atomic.sub(_:)()
{
  sub_10002A390();
  sub_10002A390();
  sub_10002A39C();
  v0();
  uint64_t v1 = sub_100025800();
  v2(v1);

  return swift_release();
}

uint64_t Atomic.exchange(with:)()
{
  sub_10002A390();
  sub_10002A390();
  sub_10002A39C();
  v0();
  uint64_t v1 = sub_100025800();
  v2(v1);

  return swift_release();
}

uint64_t Atomic.load()()
{
  sub_10002A390();
  sub_10002A390();
  sub_10002A39C();
  uint64_t v2 = (void (*)(void))v1();
  v2(*(void *)(v0 + 16));

  return swift_release();
}

uint64_t Atomic.store(_:)(uint64_t a1)
{
  sub_10002A390();
  sub_10002A390();
  sub_10002A39C();
  v2();
  uint64_t v3 = sub_1000248E0();
  v4(v3, a1);

  return swift_release();
}

uint64_t Atomic.deinit()
{
  sub_10002A390();
  sub_10002A390();
  sub_10002A39C();
  v1();
  uint64_t v2 = sub_1000248E0();
  v3(v2);
  swift_release();
  return v0;
}

uint64_t Atomic.__deallocating_deinit()
{
  Atomic.deinit();

  return _swift_deallocClassInstance(v0, 24, 7);
}

unsigned char *sub_1000417B8(char a1)
{
  return sub_10002E4E8(a1 & 1);
}

uint64_t (**Bool.atomic_create.unsafeMutableAddressor())()
{
  return &static Bool.atomic_create;
}

void static Bool.atomic_create.getter()
{
}

void (__cdecl **Bool.atomic_destroy.unsafeMutableAddressor())(void *)
{
  return &static Bool.atomic_destroy;
}

void static UInt64.atomic_destroy.getter()
{
}

BOOL sub_10004180C(atomic_uchar *a1, char a2, char a3)
{
  return sub_1000332E0(a1, a2 & 1, a3 & 1);
}

uint64_t (**Bool.atomic_compare_and_exchange.unsafeMutableAddressor())()
{
  return &static Bool.atomic_compare_and_exchange;
}

void static Bool.atomic_compare_and_exchange.getter()
{
}

uint64_t sub_100041850(atomic_uchar *a1, char a2)
{
  return sub_1000332F4(a1, a2 & 1);
}

uint64_t (**Bool.atomic_add.unsafeMutableAddressor())()
{
  return &static Bool.atomic_add;
}

void static Bool.atomic_add.getter()
{
}

uint64_t sub_100041890(atomic_uchar *a1, char a2)
{
  return sub_100033300(a1, a2 & 1);
}

uint64_t (**Bool.atomic_sub.unsafeMutableAddressor())()
{
  return &static Bool.atomic_sub;
}

void static Bool.atomic_sub.getter()
{
}

uint64_t sub_1000418D0@<X0>(unsigned int *a1@<X0>, unsigned int a2@<W8>)
{
  return sub_10002A144(a1, a2);
}

uint64_t (**Bool.atomic_exchange.unsafeMutableAddressor())()
{
  return &static Bool.atomic_exchange;
}

void static Bool.atomic_exchange.getter()
{
}

uint64_t sub_100041910(unsigned char *a1)
{
  return sub_100033310(a1);
}

uint64_t (**Bool.atomic_load.unsafeMutableAddressor())()
{
  return &static Bool.atomic_load;
}

void static Bool.atomic_load.getter()
{
}

unsigned char *sub_10004194C(unsigned char *a1, char a2)
{
  return sub_10003331C(a1, a2 & 1);
}

uint64_t (**Bool.atomic_store.unsafeMutableAddressor())()
{
  return &static Bool.atomic_store;
}

void static Bool.atomic_store.getter()
{
}

unsigned char *(*sub_100041978())(char *a1)
{
  return sub_100041994;
}

unsigned char *sub_100041994(char *a1)
{
  return sub_1000417B8(*a1);
}

void (__cdecl *sub_10004199C())(void *)
{
  return j_j__free;
}

BOOL (*sub_1000419B8())(atomic_uchar *a1, char *a2, char *a3)
{
  return sub_1000419D4;
}

BOOL sub_1000419D4(atomic_uchar *a1, char *a2, char *a3)
{
  return sub_10004180C(a1, *a2, *a3);
}

uint64_t (*sub_1000419E0())@<X0>(atomic_uchar *a1@<X0>, char *a2@<X1>, unsigned char *a3@<X8>)
{
  return sub_1000419FC;
}

uint64_t sub_1000419FC@<X0>(atomic_uchar *a1@<X0>, char *a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100041850(a1, *a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_100041A2C@<X0>(atomic_uchar *a1@<X0>, char *a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100041890(a1, *a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_100041A5C@<X0>(unsigned int *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1000418D0(a1, a2);
  *a2 = result & 1;
  return result;
}

uint64_t (*sub_100041A8C())@<X0>(atomic_uchar *a1@<X0>, char *a2@<X1>, unsigned char *a3@<X8>)
{
  return sub_100041A2C;
}

uint64_t (*sub_100041AA8())@<X0>(unsigned int *a1@<X0>, unsigned char *a2@<X8>)
{
  return sub_100041A5C;
}

uint64_t (*sub_100041AC4())@<X0>(unsigned char *a1@<X0>, unsigned char *a2@<X8>)
{
  return sub_100041AE0;
}

uint64_t sub_100041AE0@<X0>(unsigned char *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_100041910(a1);
  *a2 = result & 1;
  return result;
}

unsigned char *(*sub_100041B0C())(unsigned char *a1, char *a2)
{
  return sub_100041B28;
}

unsigned char *sub_100041B28(unsigned char *a1, char *a2)
{
  return sub_10004194C(a1, *a2);
}

unsigned char *sub_100041B30(char a1)
{
  return sub_10002E4E8(a1);
}

uint64_t (**Int8.atomic_create.unsafeMutableAddressor())()
{
  return &static Int8.atomic_create;
}

void static Int8.atomic_create.getter()
{
}

void (__cdecl **Int8.atomic_destroy.unsafeMutableAddressor())(void *)
{
  return &static Int8.atomic_destroy;
}

BOOL sub_100041B68(atomic_uchar *a1, char a2, unsigned __int8 a3)
{
  return sub_1000333A0(a1, a2, a3);
}

uint64_t (**Int8.atomic_compare_and_exchange.unsafeMutableAddressor())()
{
  return &static Int8.atomic_compare_and_exchange;
}

void static Int8.atomic_compare_and_exchange.getter()
{
}

uint64_t sub_100041BAC(atomic_uchar *a1, unsigned __int8 a2)
{
  return sub_1000333B4(a1, a2);
}

uint64_t (**Int8.atomic_add.unsafeMutableAddressor())()
{
  return &static Int8.atomic_add;
}

void static Int8.atomic_add.getter()
{
}

uint64_t sub_100041BEC(atomic_uchar *a1, char a2)
{
  return sub_1000333C0(a1, a2);
}

uint64_t (**Int8.atomic_sub.unsafeMutableAddressor())()
{
  return &static Int8.atomic_sub;
}

void static Int8.atomic_sub.getter()
{
}

uint64_t sub_100041C2C@<X0>(unsigned int *a1@<X0>, unsigned int a2@<W8>)
{
  return sub_1000333D0(a1, a2);
}

uint64_t (**Int8.atomic_exchange.unsafeMutableAddressor())()
{
  return &static Int8.atomic_exchange;
}

void static Int8.atomic_exchange.getter()
{
}

uint64_t sub_100041C6C(char *a1)
{
  return sub_1000333DC(a1);
}

uint64_t (**Int8.atomic_load.unsafeMutableAddressor())()
{
  return &static Int8.atomic_load;
}

void static Int8.atomic_load.getter()
{
}

unsigned char *sub_100041CA8(unsigned char *a1, char a2)
{
  return sub_10003331C(a1, a2);
}

uint64_t (**Int8.atomic_store.unsafeMutableAddressor())()
{
  return &static Int8.atomic_store;
}

void static Int8.atomic_store.getter()
{
}

unsigned char *(*sub_100041CD4())(char *a1)
{
  return sub_100041CF0;
}

unsigned char *sub_100041CF0(char *a1)
{
  return sub_100041B30(*a1);
}

BOOL (*sub_100041CF8())(atomic_uchar *a1, char *a2, unsigned __int8 *a3)
{
  return sub_100041D14;
}

BOOL sub_100041D14(atomic_uchar *a1, char *a2, unsigned __int8 *a3)
{
  return sub_100041B68(a1, *a2, *a3);
}

uint64_t (*sub_100041D20())@<X0>(atomic_uchar *a1@<X0>, unsigned __int8 *a2@<X1>, unsigned char *a3@<X8>)
{
  return sub_100041D3C;
}

uint64_t sub_100041D3C@<X0>(atomic_uchar *a1@<X0>, unsigned __int8 *a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100041BAC(a1, *a2);
  *a3 = result;
  return result;
}

uint64_t sub_100041D68@<X0>(atomic_uchar *a1@<X0>, char *a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100041BEC(a1, *a2);
  *a3 = result;
  return result;
}

uint64_t sub_100041D94@<X0>(unsigned int *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_100041C2C(a1, a2);
  *a2 = result;
  return result;
}

uint64_t (*sub_100041DC0())@<X0>(atomic_uchar *a1@<X0>, char *a2@<X1>, unsigned char *a3@<X8>)
{
  return sub_100041D68;
}

uint64_t (*sub_100041DDC())@<X0>(unsigned int *a1@<X0>, unsigned char *a2@<X8>)
{
  return sub_100041D94;
}

uint64_t (*sub_100041DF8())@<X0>(char *a1@<X0>, unsigned char *a2@<X8>)
{
  return sub_100041E14;
}

uint64_t sub_100041E14@<X0>(char *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_100041C6C(a1);
  *a2 = result;
  return result;
}

unsigned char *(*sub_100041E3C())(unsigned char *a1, char *a2)
{
  return sub_100041E58;
}

unsigned char *sub_100041E58(unsigned char *a1, char *a2)
{
  return sub_100041CA8(a1, *a2);
}

unsigned char *sub_100041E60(char a1)
{
  return sub_10002E4E8(a1);
}

uint64_t (**UInt8.atomic_create.unsafeMutableAddressor())()
{
  return &static UInt8.atomic_create;
}

void static UInt8.atomic_create.getter()
{
}

void (__cdecl **UInt8.atomic_destroy.unsafeMutableAddressor())(void *)
{
  return &static UInt8.atomic_destroy;
}

BOOL sub_100041E98(atomic_uchar *a1, unsigned __int8 a2, unsigned __int8 a3)
{
  return sub_1000332E0(a1, a2, a3);
}

uint64_t (**UInt8.atomic_compare_and_exchange.unsafeMutableAddressor())()
{
  return &static UInt8.atomic_compare_and_exchange;
}

void static UInt8.atomic_compare_and_exchange.getter()
{
}

uint64_t sub_100041EDC(atomic_uchar *a1, unsigned __int8 a2)
{
  return sub_1000333E8(a1, a2);
}

uint64_t (**UInt8.atomic_add.unsafeMutableAddressor())()
{
  return &static UInt8.atomic_add;
}

void static UInt8.atomic_add.getter()
{
}

uint64_t sub_100041F1C(atomic_uchar *a1, char a2)
{
  return sub_1000333F0(a1, a2);
}

uint64_t (**UInt8.atomic_sub.unsafeMutableAddressor())()
{
  return &static UInt8.atomic_sub;
}

void static UInt8.atomic_sub.getter()
{
}

unsigned int *sub_100041F5C(unsigned int *a1)
{
  return sub_1000333FC(a1);
}

uint64_t (**UInt8.atomic_exchange.unsafeMutableAddressor())()
{
  return &static UInt8.atomic_exchange;
}

void static UInt8.atomic_exchange.getter()
{
}

uint64_t sub_100041F9C(unsigned __int8 *a1)
{
  return sub_10002E4E0(a1);
}

uint64_t (**UInt8.atomic_load.unsafeMutableAddressor())()
{
  return &static UInt8.atomic_load;
}

void static UInt8.atomic_load.getter()
{
}

unsigned char *sub_100041FD8(unsigned char *a1, char a2)
{
  return sub_10003331C(a1, a2);
}

uint64_t (**UInt8.atomic_store.unsafeMutableAddressor())()
{
  return &static UInt8.atomic_store;
}

void static UInt8.atomic_store.getter()
{
}

unsigned char *(*sub_100042004())(char *a1)
{
  return sub_100042020;
}

unsigned char *sub_100042020(char *a1)
{
  return sub_100041E60(*a1);
}

BOOL (*sub_100042028())(atomic_uchar *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  return sub_100042044;
}

BOOL sub_100042044(atomic_uchar *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  return sub_100041E98(a1, *a2, *a3);
}

uint64_t (*sub_100042050())@<X0>(atomic_uchar *a1@<X0>, unsigned __int8 *a2@<X1>, unsigned char *a3@<X8>)
{
  return sub_10004206C;
}

uint64_t sub_10004206C@<X0>(atomic_uchar *a1@<X0>, unsigned __int8 *a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100041EDC(a1, *a2);
  *a3 = result;
  return result;
}

uint64_t sub_100042098@<X0>(atomic_uchar *a1@<X0>, char *a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100041F1C(a1, *a2);
  *a3 = result;
  return result;
}

unsigned int *sub_1000420C4@<X0>(unsigned int *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_100041F5C(a1);
  *a2 = (_BYTE)result;
  return result;
}

uint64_t (*sub_1000420F0())@<X0>(atomic_uchar *a1@<X0>, char *a2@<X1>, unsigned char *a3@<X8>)
{
  return sub_100042098;
}

unsigned int *(*sub_10004210C())@<X0>(unsigned int *a1@<X0>, unsigned char *a2@<X8>)
{
  return sub_1000420C4;
}

uint64_t (*sub_100042128())@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X8>)
{
  return sub_100042144;
}

uint64_t sub_100042144@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_100041F9C(a1);
  *a2 = result;
  return result;
}

unsigned char *(*sub_10004216C())(unsigned char *a1, char *a2)
{
  return sub_100042188;
}

unsigned char *sub_100042188(unsigned char *a1, char *a2)
{
  return sub_100041FD8(a1, *a2);
}

_WORD *sub_100042190(__int16 a1)
{
  return sub_100033404(a1);
}

uint64_t (**Int16.atomic_create.unsafeMutableAddressor())()
{
  return &static Int16.atomic_create;
}

void static Int16.atomic_create.getter()
{
}

void (__cdecl **Int16.atomic_destroy.unsafeMutableAddressor())(void *)
{
  return &static Int16.atomic_destroy;
}

BOOL sub_1000421C8(atomic_ushort *a1, __int16 a2, unsigned __int16 a3)
{
  return sub_100033440(a1, a2, a3);
}

uint64_t (**Int16.atomic_compare_and_exchange.unsafeMutableAddressor())()
{
  return &static Int16.atomic_compare_and_exchange;
}

void static Int16.atomic_compare_and_exchange.getter()
{
}

uint64_t sub_10004220C(atomic_ushort *a1, unsigned __int16 a2)
{
  return sub_100033454(a1, a2);
}

uint64_t (**Int16.atomic_add.unsafeMutableAddressor())()
{
  return &static Int16.atomic_add;
}

void static Int16.atomic_add.getter()
{
}

uint64_t sub_10004224C(atomic_ushort *a1, __int16 a2)
{
  return sub_100033460(a1, a2);
}

uint64_t (**Int16.atomic_sub.unsafeMutableAddressor())()
{
  return &static Int16.atomic_sub;
}

void static Int16.atomic_sub.getter()
{
}

uint64_t sub_10004228C@<X0>(unsigned int *a1@<X0>, unsigned int a2@<W8>)
{
  return sub_100033470(a1, a2);
}

uint64_t (**Int16.atomic_exchange.unsafeMutableAddressor())()
{
  return &static Int16.atomic_exchange;
}

void static Int16.atomic_exchange.getter()
{
}

uint64_t sub_1000422CC(__int16 *a1)
{
  return sub_10003347C(a1);
}

uint64_t (**Int16.atomic_load.unsafeMutableAddressor())()
{
  return &static Int16.atomic_load;
}

void static Int16.atomic_load.getter()
{
}

_WORD *sub_100042308(_WORD *a1, __int16 a2)
{
  return sub_100033488(a1, a2);
}

uint64_t (**Int16.atomic_store.unsafeMutableAddressor())()
{
  return &static Int16.atomic_store;
}

void static Int16.atomic_store.getter()
{
}

_WORD *(*sub_100042334())(__int16 *a1)
{
  return sub_100042350;
}

_WORD *sub_100042350(__int16 *a1)
{
  return sub_100042190(*a1);
}

BOOL (*sub_100042358())(atomic_ushort *a1, __int16 *a2, unsigned __int16 *a3)
{
  return sub_100042374;
}

BOOL sub_100042374(atomic_ushort *a1, __int16 *a2, unsigned __int16 *a3)
{
  return sub_1000421C8(a1, *a2, *a3);
}

uint64_t (*sub_100042380())@<X0>(atomic_ushort *a1@<X0>, unsigned __int16 *a2@<X1>, _WORD *a3@<X8>)
{
  return sub_10004239C;
}

uint64_t sub_10004239C@<X0>(atomic_ushort *a1@<X0>, unsigned __int16 *a2@<X1>, _WORD *a3@<X8>)
{
  uint64_t result = sub_10004220C(a1, *a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000423C8@<X0>(atomic_ushort *a1@<X0>, __int16 *a2@<X1>, _WORD *a3@<X8>)
{
  uint64_t result = sub_10004224C(a1, *a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000423F4@<X0>(unsigned int *a1@<X0>, _WORD *a2@<X8>)
{
  uint64_t result = sub_10004228C(a1, a2);
  *a2 = result;
  return result;
}

uint64_t (*sub_100042420())@<X0>(atomic_ushort *a1@<X0>, __int16 *a2@<X1>, _WORD *a3@<X8>)
{
  return sub_1000423C8;
}

uint64_t (*sub_10004243C())@<X0>(unsigned int *a1@<X0>, _WORD *a2@<X8>)
{
  return sub_1000423F4;
}

uint64_t (*sub_100042458())@<X0>(__int16 *a1@<X0>, _WORD *a2@<X8>)
{
  return sub_100042474;
}

uint64_t sub_100042474@<X0>(__int16 *a1@<X0>, _WORD *a2@<X8>)
{
  uint64_t result = sub_1000422CC(a1);
  *a2 = result;
  return result;
}

_WORD *(*sub_10004249C())(_WORD *a1, __int16 *a2)
{
  return sub_1000424B8;
}

_WORD *sub_1000424B8(_WORD *a1, __int16 *a2)
{
  return sub_100042308(a1, *a2);
}

_WORD *sub_1000424C0(__int16 a1)
{
  return sub_100033404(a1);
}

uint64_t (**UInt16.atomic_create.unsafeMutableAddressor())()
{
  return &static UInt16.atomic_create;
}

void static UInt16.atomic_create.getter()
{
}

void (__cdecl **UInt16.atomic_destroy.unsafeMutableAddressor())(void *)
{
  return &static UInt16.atomic_destroy;
}

BOOL sub_1000424F8(atomic_ushort *a1, unsigned __int16 a2, unsigned __int16 a3)
{
  return sub_100033490(a1, a2, a3);
}

uint64_t (**UInt16.atomic_compare_and_exchange.unsafeMutableAddressor())()
{
  return &static UInt16.atomic_compare_and_exchange;
}

void static UInt16.atomic_compare_and_exchange.getter()
{
}

uint64_t sub_10004253C(atomic_ushort *a1, unsigned __int16 a2)
{
  return sub_1000334A4(a1, a2);
}

uint64_t (**UInt16.atomic_add.unsafeMutableAddressor())()
{
  return &static UInt16.atomic_add;
}

void static UInt16.atomic_add.getter()
{
}

uint64_t sub_10004257C(atomic_ushort *a1, __int16 a2)
{
  return sub_1000334AC(a1, a2);
}

uint64_t (**UInt16.atomic_sub.unsafeMutableAddressor())()
{
  return &static UInt16.atomic_sub;
}

void static UInt16.atomic_sub.getter()
{
}

unsigned int *sub_1000425BC(unsigned int *a1)
{
  return sub_1000334B8(a1);
}

uint64_t (**UInt16.atomic_exchange.unsafeMutableAddressor())()
{
  return &static UInt16.atomic_exchange;
}

void static UInt16.atomic_exchange.getter()
{
}

uint64_t sub_1000425FC(unsigned __int16 *a1)
{
  return sub_1000334C0(a1);
}

uint64_t (**UInt16.atomic_load.unsafeMutableAddressor())()
{
  return &static UInt16.atomic_load;
}

void static UInt16.atomic_load.getter()
{
}

_WORD *sub_100042638(_WORD *a1, __int16 a2)
{
  return sub_100033488(a1, a2);
}

uint64_t (**UInt16.atomic_store.unsafeMutableAddressor())()
{
  return &static UInt16.atomic_store;
}

void static UInt16.atomic_store.getter()
{
}

_WORD *(*sub_100042664())(__int16 *a1)
{
  return sub_100042680;
}

_WORD *sub_100042680(__int16 *a1)
{
  return sub_1000424C0(*a1);
}

BOOL (*sub_100042688())(atomic_ushort *a1, unsigned __int16 *a2, unsigned __int16 *a3)
{
  return sub_1000426A4;
}

BOOL sub_1000426A4(atomic_ushort *a1, unsigned __int16 *a2, unsigned __int16 *a3)
{
  return sub_1000424F8(a1, *a2, *a3);
}

uint64_t (*sub_1000426B0())@<X0>(atomic_ushort *a1@<X0>, unsigned __int16 *a2@<X1>, _WORD *a3@<X8>)
{
  return sub_1000426CC;
}

uint64_t sub_1000426CC@<X0>(atomic_ushort *a1@<X0>, unsigned __int16 *a2@<X1>, _WORD *a3@<X8>)
{
  uint64_t result = sub_10004253C(a1, *a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000426F8@<X0>(atomic_ushort *a1@<X0>, __int16 *a2@<X1>, _WORD *a3@<X8>)
{
  uint64_t result = sub_10004257C(a1, *a2);
  *a3 = result;
  return result;
}

unsigned int *sub_100042724@<X0>(unsigned int *a1@<X0>, _WORD *a2@<X8>)
{
  uint64_t result = sub_1000425BC(a1);
  *a2 = (_WORD)result;
  return result;
}

uint64_t (*sub_100042750())@<X0>(atomic_ushort *a1@<X0>, __int16 *a2@<X1>, _WORD *a3@<X8>)
{
  return sub_1000426F8;
}

unsigned int *(*sub_10004276C())@<X0>(unsigned int *a1@<X0>, _WORD *a2@<X8>)
{
  return sub_100042724;
}

uint64_t (*sub_100042788())@<X0>(unsigned __int16 *a1@<X0>, _WORD *a2@<X8>)
{
  return sub_1000427A4;
}

uint64_t sub_1000427A4@<X0>(unsigned __int16 *a1@<X0>, _WORD *a2@<X8>)
{
  uint64_t result = sub_1000425FC(a1);
  *a2 = result;
  return result;
}

_WORD *(*sub_1000427CC())(_WORD *a1, __int16 *a2)
{
  return sub_1000427E8;
}

_WORD *sub_1000427E8(_WORD *a1, __int16 *a2)
{
  return sub_100042638(a1, *a2);
}

uint64_t (**Int32.atomic_create.unsafeMutableAddressor())()
{
  return &static Int32.atomic_create;
}

void static Int32.atomic_create.getter()
{
}

void (__cdecl **Int32.atomic_destroy.unsafeMutableAddressor())(void *)
{
  return &static Int32.atomic_destroy;
}

BOOL sub_100042824(atomic_uint *a1, int a2, unsigned int a3)
{
  return sub_100033504(a1, a2, a3);
}

uint64_t (**Int32.atomic_compare_and_exchange.unsafeMutableAddressor())()
{
  return &static Int32.atomic_compare_and_exchange;
}

void static Int32.atomic_compare_and_exchange.getter()
{
}

uint64_t (**Int32.atomic_add.unsafeMutableAddressor())(atomic_uint *, unsigned int)
{
  return &static Int32.atomic_add;
}

void static Int32.atomic_add.getter()
{
}

uint64_t (**Int32.atomic_sub.unsafeMutableAddressor())(atomic_uint *, int)
{
  return &static Int32.atomic_sub;
}

void static Int32.atomic_sub.getter()
{
}

unsigned int *(**Int32.atomic_exchange.unsafeMutableAddressor())(unsigned int *result)
{
  return &static Int32.atomic_exchange;
}

void static Int32.atomic_exchange.getter()
{
}

uint64_t (**Int32.atomic_load.unsafeMutableAddressor())(unsigned int *)
{
  return &static Int32.atomic_load;
}

void static Int32.atomic_load.getter()
{
}

_DWORD *(**Int32.atomic_store.unsafeMutableAddressor())(_DWORD *result, int)
{
  return &static Int32.atomic_store;
}

void static Int32.atomic_store.getter()
{
}

uint64_t (*sub_100042928())(unsigned int *a1)
{
  return sub_100042944;
}

uint64_t sub_100042944(unsigned int *a1)
{
  return sub_1000427F0(*a1);
}

BOOL (*sub_10004294C())(atomic_uint *a1, int *a2, unsigned int *a3)
{
  return sub_100042968;
}

BOOL sub_100042968(atomic_uint *a1, int *a2, unsigned int *a3)
{
  return sub_100042824(a1, *a2, *a3);
}

uint64_t (*sub_100042974())@<X0>(atomic_uint *a1@<X0>, unsigned int *a2@<X1>, _DWORD *a3@<X8>)
{
  return sub_100042990;
}

uint64_t sub_100042990@<X0>(atomic_uint *a1@<X0>, unsigned int *a2@<X1>, _DWORD *a3@<X8>)
{
  uint64_t result = sub_100042860(a1, *a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000429BC@<X0>(atomic_uint *a1@<X0>, int *a2@<X1>, _DWORD *a3@<X8>)
{
  uint64_t result = sub_100042888(a1, *a2);
  *a3 = result;
  return result;
}

unsigned int *sub_1000429E8@<X0>(unsigned int *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result = sub_1000428B0(a1);
  *a2 = result;
  return result;
}

uint64_t (*sub_100042A14())@<X0>(atomic_uint *a1@<X0>, int *a2@<X1>, _DWORD *a3@<X8>)
{
  return sub_1000429BC;
}

unsigned int *(*sub_100042A30())@<X0>(unsigned int *a1@<X0>, _DWORD *a2@<X8>)
{
  return sub_1000429E8;
}

uint64_t (*sub_100042A4C())@<X0>(unsigned int *a1@<X0>, _DWORD *a2@<X8>)
{
  return sub_100042A68;
}

uint64_t sub_100042A68@<X0>(unsigned int *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result = sub_1000428D8(a1);
  *a2 = result;
  return result;
}

_DWORD *(*sub_100042A90())(_DWORD *a1, int *a2)
{
  return sub_100042AAC;
}

_DWORD *sub_100042AAC(_DWORD *a1, int *a2)
{
  return sub_100042900(a1, *a2);
}

uint64_t (**UInt32.atomic_create.unsafeMutableAddressor())()
{
  return &static UInt32.atomic_create;
}

void static UInt32.atomic_create.getter()
{
}

void (__cdecl **UInt32.atomic_destroy.unsafeMutableAddressor())(void *)
{
  return &static UInt32.atomic_destroy;
}

uint64_t (**UInt32.atomic_compare_and_exchange.unsafeMutableAddressor())()
{
  return &static UInt32.atomic_compare_and_exchange;
}

void static UInt32.atomic_compare_and_exchange.getter()
{
}

uint64_t (**UInt32.atomic_add.unsafeMutableAddressor())(atomic_uint *, unsigned int)
{
  return &static UInt32.atomic_add;
}

void static UInt32.atomic_add.getter()
{
}

uint64_t (**UInt32.atomic_sub.unsafeMutableAddressor())(atomic_uint *, int)
{
  return &static UInt32.atomic_sub;
}

void static UInt32.atomic_sub.getter()
{
}

unsigned int *(**UInt32.atomic_exchange.unsafeMutableAddressor())(unsigned int *result)
{
  return &static UInt32.atomic_exchange;
}

void static UInt32.atomic_exchange.getter()
{
}

uint64_t (**UInt32.atomic_load.unsafeMutableAddressor())(unsigned int *)
{
  return &static UInt32.atomic_load;
}

void static UInt32.atomic_load.getter()
{
}

_DWORD *(**UInt32.atomic_store.unsafeMutableAddressor())(_DWORD *result, int)
{
  return &static UInt32.atomic_store;
}

void static UInt32.atomic_store.getter()
{
}

uint64_t (**Int64.atomic_create.unsafeMutableAddressor())()
{
  return &static Int64.atomic_create;
}

void static Int64.atomic_create.getter()
{
}

void (__cdecl **Int64.atomic_destroy.unsafeMutableAddressor())(void *)
{
  return &static Int64.atomic_destroy;
}

BOOL sub_100042BF0(atomic_ullong *a1, uint64_t a2, unint64_t a3)
{
  return sub_100033360(a1, a2, a3);
}

uint64_t (**Int64.atomic_compare_and_exchange.unsafeMutableAddressor())()
{
  return &static Int64.atomic_compare_and_exchange;
}

void static Int64.atomic_compare_and_exchange.getter()
{
}

unint64_t (**Int64.atomic_add.unsafeMutableAddressor())(atomic_ullong *, unint64_t)
{
  return &static Int64.atomic_add;
}

void static Int64.atomic_add.getter()
{
}

unint64_t (**Int64.atomic_sub.unsafeMutableAddressor())(atomic_ullong *, uint64_t)
{
  return &static Int64.atomic_sub;
}

void static Int64.atomic_sub.getter()
{
}

unsigned int *(**Int64.atomic_exchange.unsafeMutableAddressor())(unsigned int *result)
{
  return &static Int64.atomic_exchange;
}

void static Int64.atomic_exchange.getter()
{
}

uint64_t (**Int64.atomic_load.unsafeMutableAddressor())(uint64_t)
{
  return &static Int64.atomic_load;
}

void static Int64.atomic_load.getter()
{
}

void *(**Int64.atomic_store.unsafeMutableAddressor())(void *result, uint64_t)
{
  return &static Int64.atomic_store;
}

void static Int64.atomic_store.getter()
{
}

uint64_t (*sub_100042CF4())(void *a1)
{
  return sub_100042D10;
}

uint64_t sub_100042D10(void *a1)
{
  return sub_100042BBC(*a1);
}

BOOL (*sub_100042D18())(atomic_ullong *a1, uint64_t *a2, unint64_t *a3)
{
  return sub_100042D34;
}

BOOL sub_100042D34(atomic_ullong *a1, uint64_t *a2, unint64_t *a3)
{
  return sub_100042BF0(a1, *a2, *a3);
}

unint64_t (*sub_100042D40())@<X0>(atomic_ullong *a1@<X0>, unint64_t *a2@<X1>, unint64_t *a3@<X8>)
{
  return sub_100042D5C;
}

unint64_t sub_100042D5C@<X0>(atomic_ullong *a1@<X0>, unint64_t *a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t result = sub_100042C2C(a1, *a2);
  *a3 = result;
  return result;
}

unint64_t sub_100042D88@<X0>(atomic_ullong *a1@<X0>, uint64_t *a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t result = sub_100042C54(a1, *a2);
  *a3 = result;
  return result;
}

unsigned int *sub_100042DB4@<X0>(unsigned int *a1@<X0>, unsigned int **a2@<X8>)
{
  unint64_t result = sub_100042C7C(a1);
  *a2 = result;
  return result;
}

unint64_t (*sub_100042DE0())@<X0>(atomic_ullong *a1@<X0>, uint64_t *a2@<X1>, unint64_t *a3@<X8>)
{
  return sub_100042D88;
}

unsigned int *(*sub_100042DFC())@<X0>(unsigned int *a1@<X0>, unsigned int **a2@<X8>)
{
  return sub_100042DB4;
}

uint64_t (*sub_100042E18())@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100042E34;
}

uint64_t sub_100042E34@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_100042CA4(a1);
  *a2 = result;
  return result;
}

void *(*sub_100042E5C())(void *a1, uint64_t *a2)
{
  return sub_100042E78;
}

void *sub_100042E78(void *a1, uint64_t *a2)
{
  return sub_100042CCC(a1, *a2);
}

uint64_t (**UInt64.atomic_create.unsafeMutableAddressor())()
{
  return &static UInt64.atomic_create;
}

void static UInt64.atomic_create.getter()
{
}

void (__cdecl **UInt64.atomic_destroy.unsafeMutableAddressor())(void *)
{
  return &static UInt64.atomic_destroy;
}

uint64_t (**UInt64.atomic_compare_and_exchange.unsafeMutableAddressor())()
{
  return &static UInt64.atomic_compare_and_exchange;
}

void static UInt64.atomic_compare_and_exchange.getter()
{
}

unint64_t (**UInt64.atomic_add.unsafeMutableAddressor())(atomic_ullong *, unint64_t)
{
  return &static UInt64.atomic_add;
}

void static UInt64.atomic_add.getter()
{
}

unint64_t (**UInt64.atomic_sub.unsafeMutableAddressor())(atomic_ullong *, uint64_t)
{
  return &static UInt64.atomic_sub;
}

void static UInt64.atomic_sub.getter()
{
}

unsigned int *(**UInt64.atomic_exchange.unsafeMutableAddressor())(unsigned int *result)
{
  return &static UInt64.atomic_exchange;
}

void static UInt64.atomic_exchange.getter()
{
}

uint64_t (**UInt64.atomic_load.unsafeMutableAddressor())(uint64_t)
{
  return &static UInt64.atomic_load;
}

void static UInt64.atomic_load.getter()
{
}

void *(**UInt64.atomic_store.unsafeMutableAddressor())(void *result, uint64_t)
{
  return &static UInt64.atomic_store;
}

void static UInt64.atomic_store.getter()
{
}

uint64_t (**Int.atomic_create.unsafeMutableAddressor())()
{
  return &static Int.atomic_create;
}

void static Int.atomic_create.getter()
{
}

void (__cdecl **Int.atomic_destroy.unsafeMutableAddressor())(void *)
{
  return &static Int.atomic_destroy;
}

uint64_t (**Int.atomic_compare_and_exchange.unsafeMutableAddressor())()
{
  return &static Int.atomic_compare_and_exchange;
}

void static Int.atomic_compare_and_exchange.getter()
{
}

unint64_t (**Int.atomic_add.unsafeMutableAddressor())(atomic_ullong *, unint64_t)
{
  return &static Int.atomic_add;
}

void static Int.atomic_add.getter()
{
}

unint64_t (**Int.atomic_sub.unsafeMutableAddressor())(atomic_ullong *, uint64_t)
{
  return &static Int.atomic_sub;
}

void static Int.atomic_sub.getter()
{
}

unsigned int *(**Int.atomic_exchange.unsafeMutableAddressor())(unsigned int *result)
{
  return &static Int.atomic_exchange;
}

void static Int.atomic_exchange.getter()
{
}

uint64_t (**Int.atomic_load.unsafeMutableAddressor())(uint64_t)
{
  return &static Int.atomic_load;
}

void static Int.atomic_load.getter()
{
}

void *(**Int.atomic_store.unsafeMutableAddressor())(void *result, uint64_t)
{
  return &static Int.atomic_store;
}

void static Int.atomic_store.getter()
{
}

uint64_t (**UInt.atomic_create.unsafeMutableAddressor())()
{
  return &static UInt.atomic_create;
}

void static UInt.atomic_create.getter()
{
}

void (__cdecl **UInt.atomic_destroy.unsafeMutableAddressor())(void *)
{
  return &static UInt.atomic_destroy;
}

uint64_t (**UInt.atomic_compare_and_exchange.unsafeMutableAddressor())()
{
  return &static UInt.atomic_compare_and_exchange;
}

void static UInt.atomic_compare_and_exchange.getter()
{
}

unint64_t (**UInt.atomic_add.unsafeMutableAddressor())(atomic_ullong *, unint64_t)
{
  return &static UInt.atomic_add;
}

void static UInt.atomic_add.getter()
{
}

unint64_t (**UInt.atomic_sub.unsafeMutableAddressor())(atomic_ullong *, uint64_t)
{
  return &static UInt.atomic_sub;
}

void static UInt.atomic_sub.getter()
{
}

unsigned int *(**UInt.atomic_exchange.unsafeMutableAddressor())(unsigned int *result)
{
  return &static UInt.atomic_exchange;
}

void static UInt.atomic_exchange.getter()
{
}

uint64_t (**UInt.atomic_load.unsafeMutableAddressor())(uint64_t)
{
  return &static UInt.atomic_load;
}

void static UInt.atomic_load.getter()
{
}

void *(**UInt.atomic_store.unsafeMutableAddressor())(void *result, uint64_t)
{
  return &static UInt.atomic_store;
}

void static UInt.atomic_store.getter()
{
}

uint64_t sub_100043198()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for Atomic()
{
  return sub_100040C54();
}

id sub_1000431F8()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v2 = type metadata accessor for ManagedAppState();
  uint64_t v3 = v2 - 8;
  __chkstk_darwin(v2);
  uint64_t v5 = (id *)((char *)&v11.receiver - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  *(void *)&v0[OBJC_IVAR____TtC7parsecd31DeviceManagedAppContextProvider_assembly + 8] = 0;
  swift_unknownObjectWeakInit();
  v5[1] = 0;
  uint64_t v5[2] = 0;
  *uint64_t v5 = 0;
  uint64_t v6 = (uint64_t)v5 + *(int *)(v3 + 28);
  uint64_t v7 = type metadata accessor for Date();
  sub_10002538C(v6, 1, 1, v7);
  *(void *)((char *)v5 + *(int *)(v3 + 32)) = 0;
  sub_10002572C(&qword_100219D00);
  uint64_t v8 = swift_allocObject();
  *(_DWORD *)(v8 + ((*(unsigned int *)(*(void *)v8 + 48) + 3) & 0x1FFFFFFFCLL)) = 0;
  sub_100047F90((uint64_t)v5, v8 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v8 + 16));
  uint64_t v9 = v0;
  sub_100047FF4((uint64_t)v5);
  *(void *)&v9[OBJC_IVAR____TtC7parsecd31DeviceManagedAppContextProvider_cache] = v8;

  v11.receiver = v9;
  v11.super_class = ObjectType;
  return objc_msgSendSuper2(&v11, "init");
}

void sub_1000433C8()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = (void *)Strong;
    sub_10004341C();
  }
}

void sub_10004341C()
{
  sub_10002C168();
  uint64_t v3 = v2 + *(void *)(class metadata base offset for ManagedBuffer + v1 + 16);
  sub_10002125C(v2);
  sub_100047F74(v3);
  os_unfair_lock_unlock(v0);
}

uint64_t sub_1000434EC(uint64_t a1)
{
  uint64_t result = type metadata accessor for ManagedAppState();
  uint64_t v3 = *(int *)(result + 24);
  if (!*(void *)(a1 + v3))
  {
    uint64_t result = sub_10004353C();
    *(void *)(a1 + vsub_100034730((uint64_t)"SIGINT", 6, 3) = result;
  }
  return result;
}

uint64_t sub_10004353C()
{
  uint64_t v0 = sub_10002572C(&qword_10021F2D0);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v8 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for TaskPriority();
  sub_10002538C((uint64_t)v2, 1, 1, v3);
  uint64_t v4 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v5 = (void *)swift_allocObject();
  uint64_t v5[2] = 0;
  v5[3] = 0;
  v5[4] = v4;
  uint64_t v6 = sub_1001013F0((uint64_t)v2);
  sub_100019938((uint64_t)v2, &qword_10021F2D0);
  return v6;
}

void sub_100043640(uint64_t a1@<X8>)
{
  sub_10002C168();
  uint64_t v5 = (uint64_t *)(v4 + *(void *)(class metadata base offset for ManagedBuffer + v3 + 16));
  sub_10002125C(v4);
  sub_100046E0C(v5, a1);
  os_unfair_lock_unlock(v1);
}

uint64_t sub_1000436C0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  if (*a1)
  {
    *(void *)(a2 + 24) = &type metadata for AppDistContext;
    *(void *)(a2 + 3sub_100034730((uint64_t)"SIGTERM", 7, 2) = &off_1001FB5C0;
    *(void *)a2 = v3;
    *(unsigned char *)(a2 + 8) = v4 & 1;
    *(void *)(a2 + 16) = v5;
  }
  else
  {
    uint64_t v7 = *(int *)(type metadata accessor for ManagedAppState() + 24);
    if (!*(uint64_t *)((char *)a1 + v7)) {
      *(uint64_t *)((char *)a1 + v7) = sub_10004353C();
    }
    *(void *)(a2 + 3sub_100034730((uint64_t)"SIGTERM", 7, 2) = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return sub_100046E28(v3);
}

id RawPayload.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for DeviceManagedAppContextProvider()
{
  return self;
}

void *sub_10004381C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v7 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    if (*a2)
    {
      *(void *)a1 = *a2;
      *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
      *(void *)(a1 + 16) = a2[2];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(void *)(a1 + 16) = a2[2];
    }
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)v4 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for Date();
    if (sub_100027BA4((uint64_t)v10, 1, v11))
    {
      uint64_t v12 = sub_10002572C(&qword_10021BB10);
      memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
      sub_10002538C((uint64_t)v9, 0, 1, v11);
    }
    *(void *)((char *)v4 + *(int *)(a3 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 24));
  }
  swift_retain();
  return v4;
}

uint64_t sub_100043994(void *a1, uint64_t a2)
{
  if (*a1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v4 = (uint64_t)a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for Date();
  if (!sub_100027BA4(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }

  return swift_release();
}

uint64_t sub_100043A44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)a2)
  {
    *(void *)a1 = *(void *)a2;
    *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
  }
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for Date();
  if (sub_100027BA4((uint64_t)v8, 1, v9))
  {
    uint64_t v10 = sub_10002572C(&qword_10021BB10);
    memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
    sub_10002538C((uint64_t)v7, 0, 1, v9);
  }
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  swift_retain();
  return a1;
}

uint64_t sub_100043B70(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *a2;
  if (v6)
  {
    if (v7)
    {
      *(void *)a1 = v7;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
      *(void *)(a1 + 16) = a2[2];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_100043D8C(a1);
      uint64_t v8 = a2[2];
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(void *)(a1 + 16) = v8;
    }
  }
  else if (v7)
  {
    *(void *)a1 = v7;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    *(void *)(a1 + 16) = a2[2];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v9 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = a2[2];
    *(_OWORD *)a1 = v9;
  }
  uint64_t v10 = *(int *)(a3 + 20);
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for Date();
  int v14 = sub_100027BA4((uint64_t)v11, 1, v13);
  int v15 = sub_100027BA4((uint64_t)v12, 1, v13);
  if (!v14)
  {
    uint64_t v16 = *(void *)(v13 - 8);
    if (!v15)
    {
      (*(void (**)(void *, char *, uint64_t))(v16 + 24))(v11, v12, v13);
      goto LABEL_14;
    }
    (*(void (**)(void *, uint64_t))(v16 + 8))(v11, v13);
    goto LABEL_13;
  }
  if (v15)
  {
LABEL_13:
    uint64_t v17 = sub_10002572C(&qword_10021BB10);
    memcpy(v11, v12, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_14;
  }
  (*(void (**)(void *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
  sub_10002538C((uint64_t)v11, 0, 1, v13);
LABEL_14:
  *(void *)(a1 + *(int *)(a3 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 24));
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_100043D8C(uint64_t a1)
{
  return a1;
}

uint64_t sub_100043DBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for Date();
  if (sub_100027BA4((uint64_t)v8, 1, v9))
  {
    uint64_t v10 = sub_10002572C(&qword_10021BB10);
    memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
    sub_10002538C((uint64_t)v7, 0, 1, v9);
  }
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_100043EB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)a1)
  {
    if (*(void *)a2)
    {
      *(void *)a1 = *(void *)a2;
      swift_bridgeObjectRelease();
      *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_100043D8C(a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
LABEL_6:
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for Date();
  int v10 = sub_100027BA4((uint64_t)v7, 1, v9);
  int v11 = sub_100027BA4((uint64_t)v8, 1, v9);
  if (!v10)
  {
    uint64_t v12 = *(void *)(v9 - 8);
    if (!v11)
    {
      (*(void (**)(void *, const void *, uint64_t))(v12 + 40))(v7, v8, v9);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v12 + 8))(v7, v9);
    goto LABEL_11;
  }
  if (v11)
  {
LABEL_11:
    uint64_t v13 = sub_10002572C(&qword_10021BB10);
    memcpy(v7, v8, *(void *)(*(void *)(v13 - 8) + 64));
    goto LABEL_12;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  sub_10002538C((uint64_t)v7, 0, 1, v9);
LABEL_12:
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  swift_release();
  return a1;
}

uint64_t sub_100044080(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100044094);
}

uint64_t sub_100044094(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 2147483646)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }
  else
  {
    uint64_t v9 = sub_10002572C(&qword_10021BB10);
    uint64_t v10 = (uint64_t)a1 + *(int *)(a3 + 20);
    return sub_100027BA4(v10, a2, v9);
  }
}

uint64_t sub_10004412C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100044140);
}

void *sub_100044140(void *result, uint64_t a2, int a3, uint64_t a4)
{
  int v5 = result;
  if (a3 == 2147483646)
  {
    *uint64_t result = a2;
  }
  else
  {
    uint64_t v7 = sub_10002572C(&qword_10021BB10);
    uint64_t v8 = (uint64_t)v5 + *(int *)(a4 + 20);
    return (void *)sub_10002538C(v8, a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for ManagedAppState()
{
  uint64_t result = qword_100219C30;
  if (!qword_100219C30) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_10004420C()
{
  sub_1000442AC();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_1000442AC()
{
  if (!qword_10021BA70)
  {
    type metadata accessor for Date();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10021BA70);
    }
  }
}

uint64_t destroy for AppDistContext()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t _s7parsecd14AppDistContextVwCP_0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AppDistContext(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for AppDistContext(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for AppDistContext(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AppDistContext(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 24))
    {
      LODWORD(vsub_100034730((uint64_t)"SIGTERM", 7, 2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(vsub_100034730((uint64_t)"SIGTERM", 7, 2) = -1;
      }
    }
  }
  else
  {
    LODWORD(vsub_100034730((uint64_t)"SIGTERM", 7, 2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AppDistContext(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AppDistContext()
{
  return &type metadata for AppDistContext;
}

uint64_t sub_1000444E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 40) = a4;
  return _swift_task_switch(sub_100044508, 0, 0);
}

uint64_t sub_100044508()
{
  sub_100023C50();
  sub_100027D5C();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  *(void *)(v0 + 48) = Strong;
  if (Strong)
  {
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 56) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_1000445D4;
    return sub_100044778();
  }
  else
  {
    sub_100017DBC();
    return v4();
  }
}

uint64_t sub_1000445D4()
{
  sub_100023C50();
  sub_100026880();
  uint64_t v1 = *v0;
  sub_10001DD38();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_100026FC8();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_10004469C()
{
  sub_10001DD48();
  sub_10002C168();
  uint64_t v3 = v2 + *(void *)(class metadata base offset for ManagedBuffer + v1 + 16);
  uint64_t v4 = (os_unfair_lock_s *)(v2 + ((*(unsigned int *)(v1 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v4);
  sub_100047020(v3);
  uint64_t v5 = *(void **)(v0 + 48);
  os_unfair_lock_unlock(v4);

  sub_100017DBC();
  return v6();
}

uint64_t sub_100044778()
{
  v1[3] = v0;
  v1[4] = swift_getObjectType();
  sub_10002572C(&qword_10021F2D0);
  v1[5] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for Date();
  v1[6] = v2;
  v1[7] = *(void *)(v2 - 8);
  v1[8] = swift_task_alloc();
  return _swift_task_switch(sub_100044874, 0, 0);
}

uint64_t sub_100044874()
{
  sub_100023C50();
  static Date.now.getter();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 7sub_100034730((uint64_t)"SIGTERM", 7, 2) = v1;
  void *v1 = v0;
  v1[1] = sub_100044908;
  return sub_100044E50();
}

uint64_t sub_100044908()
{
  sub_10001DD48();
  char v3 = v2;
  sub_100026880();
  uint64_t v5 = v4;
  sub_100017DB0();
  *uint64_t v6 = v5;
  *uint64_t v6 = *v1;
  *(void *)(v5 + 80) = v7;
  *(void *)(v5 + 88) = v8;
  *(void *)(v5 + 96) = v0;
  swift_task_dealloc();
  if (!v0) {
    *(unsigned char *)(v5 + 104) = v3 & 1;
  }
  sub_100026FC8();
  return _swift_task_switch(v9, v10, v11);
}

void sub_100044A08()
{
  uint64_t v20 = v0;
  char v1 = *(unsigned char *)(v0 + 104);
  uint64_t v3 = *(void *)(v0 + 88);
  uint64_t v2 = *(void *)(v0 + 96);
  uint64_t v4 = *(void *)(v0 + 80);
  uint64_t v5 = *(void *)(v0 + 64);
  uint64_t v6 = *(void *)(*(void *)(v0 + 24) + OBJC_IVAR____TtC7parsecd31DeviceManagedAppContextProvider_cache);
  uint64_t v7 = swift_task_alloc();
  *(void *)(v7 + 16) = v4;
  *(unsigned char *)(v7 + 24) = v1;
  *(void *)(v7 + 3sub_100034730((uint64_t)"SIGTERM", 7, 2) = v3;
  *(void *)(v7 + 40) = v5;
  uint64_t v8 = (os_unfair_lock_s *)(v6 + ((*(unsigned int *)(*(void *)v6 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v8);
  sub_100047068(v19);
  os_unfair_lock_unlock(v8);
  if (!v2)
  {
    char v9 = v19[0];
    swift_task_dealloc();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v11 = *(void *)(v0 + 56);
    uint64_t v10 = *(void *)(v0 + 64);
    uint64_t v12 = *(void *)(v0 + 48);
    if (v9)
    {
      uint64_t v14 = *(void *)(v0 + 32);
      uint64_t v13 = *(void *)(v0 + 40);
      uint64_t v15 = type metadata accessor for TaskPriority();
      sub_10002538C(v13, 1, 1, v15);
      uint64_t v16 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v17 = (void *)swift_allocObject();
      v17[2] = 0;
      v17[3] = 0;
      void v17[4] = v16;
      v17[5] = v14;
      sub_1001013F0(v13);
      swift_release();
      sub_100019938(v13, &qword_10021F2D0);
    }
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
    swift_task_dealloc();
    swift_task_dealloc();
    sub_100017DBC();
    v18();
  }
}

uint64_t sub_100044C24()
{
  if (qword_100218B28 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_10002A10C(v1, (uint64_t)qword_100236990);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138412290;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    v0[2] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Failed to get managed app headers: %@", v4, 0xCu);
    sub_10002572C(&qword_100219710);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  (*(void (**)(void, void))(v0[7] + 8))(v0[8], v0[6]);
  swift_task_dealloc();
  swift_task_dealloc();
  sub_100017DBC();
  return v7();
}

uint64_t sub_100044E50()
{
  *(void *)(v1 + 24) = v0;
  return _swift_task_switch(sub_100044E70, 0, 0);
}

uint64_t sub_100044E70()
{
  uint64_t v1 = Dictionary.init(dictionaryLiteral:)();
  swift_bridgeObjectRetain();
  char v2 = sub_100045EA0();
  *(unsigned char *)(v0 + 7sub_100034730((uint64_t)"SIGTERM", 7, 2) = v2 & 1;
  swift_bridgeObjectRelease();
  if (v2)
  {
    _StringGuts.grow(_:)(19);
    swift_bridgeObjectRelease();
    swift_isUniquelyReferenced_nonNull_native();
    sub_10003BED4();
    *(void *)(v0 + 3sub_100034730((uint64_t)"SIGTERM", 7, 2) = v1;
    swift_bridgeObjectRelease();
    os_log_type_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 40) = v3;
    *os_log_type_t v3 = v0;
    v3[1] = sub_100045044;
    return static AppDistributor.distributorPriorityList.getter();
  }
  else
  {
    sub_10002CD20();
    return v4(v1);
  }
}

uint64_t sub_100045044()
{
  sub_100023C50();
  sub_100026880();
  sub_100017DB0();
  *char v2 = v1;
  *char v2 = *v0;
  *(void *)(v1 + 48) = v3;
  swift_task_dealloc();
  sub_100026FC8();
  return _swift_task_switch(v4, v5, v6);
}

uint64_t sub_100045114()
{
  sub_100023C50();
  if (*(void *)(*(void *)(v0 + 48) + 16) < 2uLL)
  {
    swift_bridgeObjectRelease();
    sub_10002CD20();
    return v4();
  }
  else
  {
    uint64_t v1 = (void *)swift_task_alloc();
    *(void *)(v0 + 56) = v1;
    void *v1 = v0;
    v1[1] = sub_1000451F8;
    uint64_t v2 = *(void *)(v0 + 48);
    return sub_100045B0C(v2);
  }
}

uint64_t sub_1000451F8()
{
  sub_100023C50();
  sub_100026880();
  sub_100017DB0();
  *uint64_t v2 = v1;
  uint64_t v3 = *v0;
  sub_10001DD38();
  *uint64_t v4 = v3;
  *(void *)(v6 + 64) = v5;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  sub_100026FC8();
  return _swift_task_switch(v7, v8, v9);
}

uint64_t sub_1000452E0()
{
  uint64_t v29 = v0;
  uint64_t v1 = v0[8];
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = _swiftEmptyArrayStorage;
  if (v2)
  {
    sub_1000EE464();
    uint64_t v3 = v27;
    uint64_t v4 = (void **)(v1 + 64);
    do
    {
      uint64_t v6 = (uint64_t)*(v4 - 4);
      uint64_t v5 = *(v4 - 3);
      uint64_t v8 = (uint64_t)*(v4 - 1);
      uint64_t v7 = *v4;
      v28._countAndFlagsBits = 0x223A22646922;
      v28._object = (void *)0xE600000000000000;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v9._countAndFlagsBits = v6;
      v9._object = v5;
      String.append(_:)(v9);
      v10._countAndFlagsBits = 34;
      v10._object = (void *)0xE100000000000000;
      String.append(_:)(v10);
      v11._countAndFlagsBits = 0x223A22646922;
      v11._object = (void *)0xE600000000000000;
      String.append(_:)(v11);
      swift_bridgeObjectRelease();
      if (v7)
      {
        v12._countAndFlagsBits = 44;
        v12._object = (void *)0xE100000000000000;
        String.append(_:)(v12);
        sub_10002DE38();
        swift_bridgeObjectRelease();
        strcpy((char *)&v28, "\"territory\":\"");
        HIWORD(v28._object) = -4864;
        v13._countAndFlagsBits = v8;
        v13._object = v7;
        String.append(_:)(v13);
        v14._countAndFlagsBits = 34;
        v14._object = (void *)0xE100000000000000;
        String.append(_:)(v14);
        String.append(_:)(v28);
        swift_bridgeObjectRelease();
      }
      v15._countAndFlagsBits = 125;
      v15._object = (void *)0xE100000000000000;
      String.append(_:)(v15);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v16 = v27[2];
      if (v16 >= v27[3] >> 1) {
        sub_1000EE464();
      }
      v4 += 5;
      long long v27[2] = v16 + 1;
      uint64_t v17 = &v27[2 * v16];
      void v17[4] = 123;
      v17[5] = 0xE100000000000000;
      --v2;
    }
    while (v2);
    uint64_t v0 = v26;
  }
  uint64_t v18 = v0[4];
  v0[2] = v3;
  sub_10002572C(&qword_100219B08);
  sub_100020DBC();
  uint64_t v19 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v21 = v20;
  swift_bridgeObjectRelease();
  sub_10002DE38();
  swift_bridgeObjectRelease();
  v28._object = (void *)0xE100000000000000;
  v22._countAndFlagsBits = v19;
  v22._object = v21;
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  v23._countAndFlagsBits = 93;
  v23._object = (void *)0xE100000000000000;
  String.append(_:)(v23);
  swift_isUniquelyReferenced_nonNull_native();
  sub_10003BED4();
  swift_bridgeObjectRelease();
  sub_10002CD20();
  return v24(v18);
}

void sub_1000455CC(uint64_t a1@<X1>, int a2@<W2>, void *a3@<X3>, uint64_t a4@<X4>, char *a5@<X8>)
{
  if (sub_100045760(a1, a2, a3, a4))
  {
    if (qword_100218B28 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_10002A10C(v6, (uint64_t)qword_100236990);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v7, v8))
    {
      Swift::String v9 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)Swift::String v9 = 134217984;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Got managed app headers count=%ld", v9, 0xCu);
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    char v10 = 1;
  }
  else
  {
    char v10 = 0;
  }
  *a5 = v10;
}

uint64_t sub_100045760(uint64_t a1, int a2, void *a3, uint64_t a4)
{
  uint64_t v24 = a3;
  uint64_t v8 = sub_10002572C(&qword_10021BB10);
  __chkstk_darwin(v8 - 8);
  char v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  Swift::String v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = (uint64_t)v4 + *(int *)(type metadata accessor for ManagedAppState() + 20);
  sub_100008B84(v15, (uint64_t)v10, &qword_10021BB10);
  if (sub_100027BA4((uint64_t)v10, 1, v11) == 1)
  {
    sub_100019938((uint64_t)v10, &qword_10021BB10);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v10, v11);
    char v16 = static Date.> infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    if (v16) {
      return 0;
    }
  }
  sub_100019938(v15, &qword_10021BB10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v15, a4, v11);
  sub_10002538C(v15, 0, 1, v11);
  uint64_t v18 = *v4;
  uint64_t v17 = v4[1];
  uint64_t v19 = (void *)v4[2];
  *uint64_t v4 = a1;
  v4[1] = a2 & 1;
  uint64_t v20 = v24;
  v4[2] = (uint64_t)v24;
  if (v18)
  {
    if ((v17 ^ a2))
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return 1;
    }
    if (v17)
    {
      char v21 = sub_10004687C(v19, v20);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v21 & 1) == 0) {
        return 1;
      }
    }
    else
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return 0;
}

uint64_t sub_100045A14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 40) = a4;
  return _swift_task_switch(sub_100045A34, 0, 0);
}

uint64_t sub_100045A34()
{
  sub_100023C50();
  sub_100027D5C();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = (void *)Strong;
    uint64_t v2 = swift_unknownObjectWeakLoadStrong();

    if (v2)
    {
      sub_100006B58();
      if (qword_100218AC0 != -1) {
        swift_once();
      }
      sub_100111C88();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
    }
  }
  sub_100017DBC();
  return v3();
}

uint64_t sub_100045B0C(uint64_t a1)
{
  *(void *)(v1 + 24) = a1;
  return _swift_task_switch(sub_100045B2C, 0, 0);
}

uint64_t sub_100045B2C()
{
  sub_10001DD48();
  uint64_t v1 = v0[3];
  if (*(void *)(v1 + 16))
  {
    uint64_t v2 = swift_task_alloc();
    v0[4] = v2;
    *(void *)(v2 + 16) = v1;
    uint64_t v3 = sub_10002572C(&qword_100219CC8);
    uint64_t v4 = (void *)swift_task_alloc();
    v0[5] = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_100045C70;
    return withTaskGroup<A, B>(of:returning:isolation:body:)(v0 + 2, &type metadata for AppDistEntry, v3, 0, 0, &unk_100219CC0, v2, &type metadata for AppDistEntry);
  }
  else
  {
    uint64_t v5 = (uint64_t (*)(void *))v0[1];
    return v5(_swiftEmptyArrayStorage);
  }
}

uint64_t sub_100045C70()
{
  sub_100023C50();
  sub_100026880();
  uint64_t v1 = *v0;
  sub_10001DD38();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_task_dealloc();
  sub_100026FC8();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_100045D54()
{
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 16));
}

void sub_100045D6C()
{
  sub_10002572C(&qword_100219CA8);
  uint64_t v0 = type metadata accessor for SessionType();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = *(void *)(v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1001A2A30;
  unint64_t v5 = v4 + v3;
  uint64_t v6 = *(void (**)(unint64_t, void, uint64_t))(v1 + 104);
  v6(v5, enum case for SessionType.spotlight(_:), v0);
  v6(v5 + v2, enum case for SessionType.safari(_:), v0);
  v6(v5 + 2 * v2, enum case for SessionType.lookup(_:), v0);
  sub_1000EE754();
  qword_100219B98 = v7;
}

uint64_t sub_100045EA0()
{
  int domain_answer = os_eligibility_get_domain_answer();
  if (domain_answer == noErr.getter())
  {
    char v1 = 0;
  }
  else
  {
    sub_100047F28();
    swift_allocError();
    *uint64_t v2 = domain_answer;
    swift_willThrow();
  }
  return v1 & 1;
}

uint64_t sub_100045F60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[15] = a2;
  v3[16] = a3;
  v3[14] = a1;
  uint64_t v4 = sub_10002572C(&qword_100219CD0);
  v3[17] = v4;
  v3[18] = *(void *)(v4 - 8);
  v3[19] = swift_task_alloc();
  sub_10002572C(&qword_10021F2D0);
  v3[20] = swift_task_alloc();
  v3[21] = swift_task_alloc();
  return _swift_task_switch(sub_100046068, 0, 0);
}

uint64_t sub_100046068()
{
  uint64_t v1 = *(void *)(v0 + 128);
  uint64_t v21 = *(void *)(v1 + 16);
  if (v21)
  {
    uint64_t v2 = type metadata accessor for TaskPriority();
    swift_bridgeObjectRetain();
    uint64_t v3 = 0;
    uint64_t v4 = (uint64_t *)(v1 + 40);
    uint64_t v20 = v2;
    do
    {
      uint64_t v6 = *(void *)(v0 + 160);
      uint64_t v5 = *(void *)(v0 + 168);
      uint64_t v7 = *(v4 - 1);
      uint64_t v8 = *v4;
      sub_10002538C(v5, 1, 1, v2);
      uint64_t v9 = (void *)swift_allocObject();
      v9[2] = 0;
      v9[3] = 0;
      v9[4] = v7;
      v9[5] = v8;
      v9[6] = v3;
      sub_100008B84(v5, v6, &qword_10021F2D0);
      LODWORD(v6) = sub_100027BA4(v6, 1, v2);
      swift_bridgeObjectRetain();
      uint64_t v10 = *(void *)(v0 + 160);
      if (v6 == 1)
      {
        sub_100019938(*(void *)(v0 + 160), &qword_10021F2D0);
      }
      else
      {
        TaskPriority.rawValue.getter();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v10, v2);
      }
      if (v9[2])
      {
        swift_getObjectType();
        swift_unknownObjectRetain();
        uint64_t v11 = dispatch thunk of Actor.unownedExecutor.getter();
        uint64_t v13 = v12;
        swift_unknownObjectRelease();
      }
      else
      {
        uint64_t v11 = 0;
        uint64_t v13 = 0;
      }
      uint64_t v14 = **(void **)(v0 + 120);
      uint64_t v15 = swift_allocObject();
      *(void *)(v15 + 16) = &unk_100219CE8;
      *(void *)(v15 + 24) = v9;
      uint64_t v16 = v13 | v11;
      if (v13 | v11)
      {
        uint64_t v16 = v0 + 56;
        *(void *)(v0 + 56) = 0;
        *(void *)(v0 + 64) = 0;
        *(void *)(v0 + 7sub_100034730((uint64_t)"SIGTERM", 7, 2) = v11;
        *(void *)(v0 + 80) = v13;
      }
      uint64_t v2 = v20;
      ++v3;
      uint64_t v17 = *(void *)(v0 + 168);
      *(void *)(v0 + 88) = 1;
      *(void *)(v0 + 96) = v16;
      *(void *)(v0 + 104) = v14;
      swift_task_create();
      swift_release();
      sub_100019938(v17, &qword_10021F2D0);
      v4 += 2;
    }
    while (v21 != v3);
    swift_bridgeObjectRelease();
  }
  TaskGroup.makeAsyncIterator()();
  *(void *)(v0 + 176) = _swiftEmptyArrayStorage;
  uint64_t v18 = (void *)swift_task_alloc();
  *(void *)(v0 + 184) = v18;
  *uint64_t v18 = v0;
  v18[1] = sub_10004636C;
  sub_100026FC8();
  return TaskGroup.Iterator.next(isolation:)();
}

uint64_t sub_10004636C()
{
  sub_100023C50();
  sub_100026880();
  uint64_t v1 = *v0;
  sub_10001DD38();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_100026FC8();
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_100046434()
{
  uint64_t v18 = v0;
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = *(void *)(v0 + 176);
  if (v2)
  {
    long long v16 = *(_OWORD *)(v0 + 32);
    uint64_t v4 = *(void *)(v0 + 48);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v6 = *(void *)(v0 + 176);
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_100065650(0, *(void *)(v6 + 16) + 1, 1, v6);
      uint64_t v6 = v13;
    }
    unint64_t v8 = *(void *)(v6 + 16);
    unint64_t v7 = *(void *)(v6 + 24);
    if (v8 >= v7 >> 1)
    {
      sub_100065650(v7 > 1, v8 + 1, 1, v6);
      uint64_t v6 = v14;
    }
    *(void *)(v6 + 16) = v8 + 1;
    uint64_t v9 = v6 + 40 * v8;
    *(void *)(v9 + 3sub_100034730((uint64_t)"SIGTERM", 7, 2) = v1;
    *(void *)(v9 + 40) = v2;
    *(_OWORD *)(v9 + 48) = v16;
    *(void *)(v9 + 64) = v4;
    *(void *)(v0 + 176) = v6;
    uint64_t v10 = (void *)swift_task_alloc();
    *(void *)(v0 + 184) = v10;
    *uint64_t v10 = v0;
    v10[1] = sub_10004636C;
    sub_100026FC8();
    return TaskGroup.Iterator.next(isolation:)();
  }
  else
  {
    (*(void (**)(void, void))(*(void *)(v0 + 144) + 8))(*(void *)(v0 + 152), *(void *)(v0 + 136));
    uint64_t v17 = v3;
    swift_bridgeObjectRetain();
    sub_10004722C(&v17);
    uint64_t v11 = *(void **)(v0 + 112);
    swift_bridgeObjectRelease();
    *uint64_t v11 = v17;
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    sub_100017DBC();
    return v12();
  }
}

uint64_t sub_100046650(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[4] = a5;
  v6[5] = a6;
  void v6[2] = a1;
  void v6[3] = a4;
  type metadata accessor for AppLibrary();
  uint64_t v9 = (void *)swift_task_alloc();
  v6[6] = v9;
  *uint64_t v9 = v6;
  v9[1] = sub_100046710;
  return static AppLibrary.getSearchTerritory(for:)(a4, a5);
}

uint64_t sub_100046710()
{
  sub_100023C50();
  sub_100026880();
  sub_100017DB0();
  *uint64_t v2 = v1;
  *uint64_t v2 = *v0;
  *(void *)(v1 + 56) = v3;
  *(void *)(v1 + 64) = v4;
  swift_task_dealloc();
  sub_100026FC8();
  return _swift_task_switch(v5, v6, v7);
}

uint64_t sub_1000467E0()
{
  sub_10001DD48();
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = *(void *)(v0 + 16);
  long long v4 = *(_OWORD *)(v0 + 56);
  *(void *)uint64_t v3 = *(void *)(v0 + 24);
  *(void *)(v3 + 8) = v1;
  *(void *)(v3 + 16) = v2;
  *(_OWORD *)(v3 + 24) = v4;
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  swift_bridgeObjectRetain();
  return v6();
}

uint64_t sub_100046858(uint64_t a1, int a2, void *a3, uint64_t a4, int a5, void *a6)
{
  if (a2 & 1) != 0 && (a5) {
    return sub_10004687C(a3, a6);
  }
  else {
    return (a2 ^ a5 ^ 1) & 1;
  }
}

uint64_t sub_10004687C(void *a1, void *a2)
{
  unint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  uint64_t result = a1[4];
  uint64_t v6 = a1[6];
  uint64_t v7 = a2[6];
  if (result == a2[4] && a1[5] == a2[5])
  {
    if (v6 == v7) {
      goto LABEL_12;
    }
    return 0;
  }
  char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
  uint64_t result = 0;
  if ((v9 & 1) == 0 || v6 != v7) {
    return result;
  }
LABEL_12:
  if (v2 == 1) {
    return 1;
  }
  uint64_t v10 = a2 + 11;
  uint64_t v11 = a1 + 11;
  unint64_t v12 = 1;
  while (v12 < v2)
  {
    uint64_t v13 = *v11;
    uint64_t v14 = *v10;
    if (*(v11 - 2) == *(v10 - 2) && *(v11 - 1) == *(v10 - 1))
    {
      if (v13 != v14) {
        return 0;
      }
    }
    else
    {
      char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
      uint64_t result = 0;
      if ((v16 & 1) == 0 || v13 != v14) {
        return result;
      }
    }
    ++v12;
    v10 += 5;
    v11 += 5;
    uint64_t result = 1;
    if (v2 == v12) {
      return result;
    }
  }
  __break(1u);
  return result;
}

BOOL sub_10004699C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  if (*(unsigned __int8 *)(a1 + 32) != *(unsigned __int8 *)(a2 + 32)) {
    return 0;
  }
  if (v2 == 1) {
    return 1;
  }
  uint64_t v4 = v2 - 2;
  uint64_t v5 = (unsigned __int8 *)(a1 + 33);
  uint64_t v6 = (unsigned __int8 *)(a2 + 33);
  do
  {
    int v8 = *v5++;
    int v7 = v8;
    int v10 = *v6++;
    int v9 = v10;
    BOOL v12 = v4-- != 0;
    BOOL result = v7 == v9;
  }
  while (v7 == v9 && v12);
  return result;
}

uint64_t sub_100046A10(uint64_t a1, uint64_t a2)
{
  return sub_100046858(*(void *)a1, *(unsigned __int8 *)(a1 + 8), *(void **)(a1 + 16), *(void *)a2, *(unsigned __int8 *)(a2 + 8), *(void **)(a2 + 16));
}

unint64_t sub_100046A38()
{
  unint64_t result = qword_100219C70;
  if (!qword_100219C70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_100219C70);
  }
  return result;
}

void sub_100046A84()
{
  String.hash(into:)();
  Hasher._combine(_:)(*(void *)(v0 + 16));
}

BOOL sub_100046AB8(void *a1, void *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1]) {
    return a1[2] == a2[2];
  }
  char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  BOOL result = 0;
  if (v5) {
    return a1[2] == a2[2];
  }
  return result;
}

Swift::Int sub_100046B18()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Hasher._combine(_:)(*(void *)(v0 + 16));
  return Hasher._finalize()();
}

Swift::Int sub_100046B68()
{
  return sub_100046B18();
}

void sub_100046BA4()
{
}

Swift::Int sub_100046BE0()
{
  Swift::UInt v1 = *(void *)(v0 + 16);
  Hasher.init(_seed:)();
  String.hash(into:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL sub_100046C40(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  uint64_t v6 = *(void *)(a1 + 32);
  long long v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  uint64_t v8 = *(void *)(a2 + 32);
  return sub_100046AB8(v5, v7);
}

BOOL sub_100046C8C(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 16) < *(void *)(a2 + 16);
}

BOOL sub_100046CA0(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  uint64_t v6 = *(void *)(a1 + 32);
  long long v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  uint64_t v8 = *(void *)(a2 + 32);
  return sub_100046C8C((uint64_t)v5, (uint64_t)v7);
}

BOOL sub_100046CEC(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  uint64_t v6 = *(void *)(a1 + 32);
  long long v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  uint64_t v8 = *(void *)(a2 + 32);
  return sub_100046D38((uint64_t)v5, (uint64_t)v7);
}

BOOL sub_100046D38(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16) >= *(void *)(a1 + 16);
}

BOOL sub_100046D4C(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  uint64_t v6 = *(void *)(a1 + 32);
  long long v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  uint64_t v8 = *(void *)(a2 + 32);
  return sub_100046D98((uint64_t)v5, (uint64_t)v7);
}

BOOL sub_100046D98(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 16) >= *(void *)(a2 + 16);
}

BOOL sub_100046DAC(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  uint64_t v6 = *(void *)(a1 + 32);
  long long v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  uint64_t v8 = *(void *)(a2 + 32);
  return sub_100046DF8((uint64_t)v5, (uint64_t)v7);
}

BOOL sub_100046DF8(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 16) < *(void *)(a1 + 16);
}

uint64_t sub_100046E0C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000436C0(a1, a2);
}

uint64_t sub_100046E28(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_100046E68()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100046EA0()
{
  return sub_100047094(40);
}

uint64_t sub_100046EA8()
{
  sub_10001DD48();
  uint64_t v2 = v1;
  uint64_t v3 = v0[2];
  uint64_t v4 = v0[3];
  uint64_t v5 = v0[4];
  uint64_t v6 = swift_task_alloc();
  int v7 = (void *)sub_10002AC58(v6);
  *int v7 = v8;
  v7[1] = sub_100046F50;
  return sub_1000444E8(v2, v3, v4, v5);
}

uint64_t sub_100046F50()
{
  sub_100023C50();
  sub_100026880();
  uint64_t v1 = *v0;
  sub_10001DD38();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  sub_100017DBC();
  return v3();
}

uint64_t sub_100047020(uint64_t a1)
{
  uint64_t v2 = *(int *)(type metadata accessor for ManagedAppState() + 24);
  uint64_t result = swift_release();
  *(void *)(a1 + vsub_100034730((uint64_t)"SIGTERM", 7, 2) = 0;
  return result;
}

void sub_100047068(char *a1@<X8>)
{
  sub_1000455CC(*(void *)(v1 + 16), *(unsigned __int8 *)(v1 + 24), *(void **)(v1 + 32), *(void *)(v1 + 40), a1);
}

uint64_t sub_10004708C()
{
  return sub_100047094(48);
}

uint64_t sub_100047094(uint64_t a1)
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v1, a1, 7);
}

uint64_t sub_1000470E0()
{
  uint64_t v0 = swift_task_alloc();
  uint64_t v1 = (void *)sub_10002AC58(v0);
  void *v1 = v2;
  v1[1] = sub_100048298;
  uint64_t v3 = sub_1000242A8();
  return sub_100045A14(v3, v4, v5, v6);
}

uint64_t sub_100047188()
{
  sub_10001DD48();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v0 + 16);
  uint64_t v6 = swift_task_alloc();
  int v7 = (void *)sub_10002AC58(v6);
  *int v7 = v8;
  v7[1] = sub_100048298;
  return sub_100045F60(v4, v2, v5);
}

void sub_10004722C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_10011BCF4();
    uint64_t v2 = v3;
  }
  uint64_t v4 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v4;
  sub_100047298(v5);
  *a1 = v2;
}

void sub_100047298(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  Swift::Int v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v3) {
        sub_1000478F4(0, v3, 1, a1);
      }
      return;
    }
    goto LABEL_125;
  }
  Swift::Int v5 = v4;
  uint64_t v100 = a1;
  BOOL v101 = sub_1000EE24C(v3 / 2);
  uint64_t v103 = v3;
  char v104 = v6;
  if (v3 <= 0)
  {
    Swift::Bool v105 = (char *)_swiftEmptyArrayStorage;
    unint64_t v32 = _swiftEmptyArrayStorage[2];
LABEL_91:
    if (v32 < 2)
    {
LABEL_102:
      swift_bridgeObjectRelease();
      if (v103 >= -1)
      {
        v101[2] = 0;
        swift_bridgeObjectRelease();
        return;
      }
      goto LABEL_130;
    }
    uint64_t v92 = *v100;
    while (1)
    {
      unint64_t v93 = v32 - 2;
      if (v32 < 2) {
        break;
      }
      if (!v92) {
        goto LABEL_134;
      }
      id v94 = v105;
      uint64_t v95 = *(void *)&v105[16 * v93 + 32];
      uint64_t v96 = *(void *)&v105[16 * v32 + 24];
      sub_10004797C((char *)(v92 + 40 * v95), (char *)(v92 + 40 * *(void *)&v105[16 * v32 + 16]), v92 + 40 * v96, v104);
      if (v1) {
        goto LABEL_87;
      }
      if (v96 < v95) {
        goto LABEL_120;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_10011B25C((uint64_t)v105);
        id v94 = v99;
      }
      if (v93 >= *((void *)v94 + 2)) {
        goto LABEL_121;
      }
      uint64_t v97 = &v94[16 * v93 + 32];
      *(void *)uint64_t v97 = v95;
      *((void *)v97 + 1) = v96;
      unint64_t v98 = *((void *)v94 + 2);
      if (v32 > v98) {
        goto LABEL_122;
      }
      memmove(&v94[16 * v32 + 16], &v94[16 * v32 + 32], 16 * (v98 - v32));
      Swift::Bool v105 = v94;
      *((void *)v94 + sub_100034730((uint64_t)"SIGTERM", 7, 2) = v98 - 1;
      unint64_t v32 = v98 - 1;
      if (v98 <= 2) {
        goto LABEL_102;
      }
    }
LABEL_119:
    __break(1u);
LABEL_120:
    __break(1u);
LABEL_121:
    __break(1u);
LABEL_122:
    __break(1u);
LABEL_123:
    __break(1u);
LABEL_124:
    __break(1u);
LABEL_125:
    __break(1u);
LABEL_126:
    __break(1u);
LABEL_127:
    __break(1u);
LABEL_128:
    __break(1u);
LABEL_129:
    __break(1u);
LABEL_130:
    __break(1u);
LABEL_131:
    __break(1u);
LABEL_132:
    __break(1u);
LABEL_133:
    __break(1u);
LABEL_134:
    __break(1u);
    return;
  }
  Swift::Int v7 = 0;
  uint64_t v8 = *a1;
  Swift::Bool v105 = (char *)_swiftEmptyArrayStorage;
  Swift::Int v102 = v5;
  while (1)
  {
    Swift::Int v9 = v7++;
    if (v7 < v3)
    {
      uint64_t v10 = *(void *)(v8 + 40 * v7 + 16);
      uint64_t v11 = *(void *)(v8 + 40 * v9 + 16);
      Swift::Int v7 = v9 + 2;
      if (v9 + 2 < v3)
      {
        BOOL v12 = (uint64_t *)(v8 + 96 + 40 * v9);
        uint64_t v13 = v10;
        while (1)
        {
          uint64_t v15 = *v12;
          v12 += 5;
          uint64_t v14 = v15;
          if (v10 < v11 == v15 >= v13) {
            break;
          }
          ++v7;
          uint64_t v13 = v14;
          if (v7 >= v3)
          {
            Swift::Int v7 = v3;
            break;
          }
        }
      }
      if (v10 < v11)
      {
        if (v7 < v9) {
          goto LABEL_127;
        }
        if (v9 < v7)
        {
          uint64_t v16 = 40 * v7;
          uint64_t v17 = 40 * v9;
          Swift::Int v18 = v7;
          Swift::Int v19 = v9;
          do
          {
            if (v19 != --v18)
            {
              if (!v8) {
                goto LABEL_133;
              }
              uint64_t v20 = v8 + v17;
              uint64_t v21 = v8 + v16;
              uint64_t v22 = *(void *)(v8 + v17);
              uint64_t v23 = *(void *)(v8 + v17 + 8);
              uint64_t v24 = *(void *)(v8 + v17 + 32);
              long long v25 = *(_OWORD *)(v8 + v17 + 16);
              uint64_t v26 = *(void *)(v8 + v16 - 8);
              long long v27 = *(_OWORD *)(v8 + v16 - 24);
              *(_OWORD *)uint64_t v20 = *(_OWORD *)(v8 + v16 - 40);
              *(_OWORD *)(v20 + 16) = v27;
              *(void *)(v20 + 3sub_100034730((uint64_t)"SIGTERM", 7, 2) = v26;
              *(void *)(v21 - 40) = v22;
              *(void *)(v21 - 3sub_100034730((uint64_t)"SIGTERM", 7, 2) = v23;
              *(_OWORD *)(v21 - 24) = v25;
              *(void *)(v21 - 8) = v24;
            }
            ++v19;
            v16 -= 40;
            v17 += 40;
          }
          while (v19 < v18);
        }
      }
    }
    if (v7 >= v3) {
      goto LABEL_26;
    }
    if (__OFSUB__(v7, v9)) {
      goto LABEL_124;
    }
    if (v7 - v9 >= v5) {
      goto LABEL_26;
    }
    Swift::Int v28 = v9 + v5;
    if (__OFADD__(v9, v5)) {
      goto LABEL_128;
    }
    if (v28 >= v3) {
      Swift::Int v28 = v3;
    }
    if (v28 < v9) {
      goto LABEL_129;
    }
    if (v7 == v28)
    {
LABEL_26:
      uint64_t v29 = v105;
    }
    else
    {
      uint64_t v80 = v8 + 24 + 40 * v7;
      uint64_t v29 = v105;
      do
      {
        uint64_t v81 = *(void *)(v8 + 40 * v7 + 16);
        Swift::Int v82 = v9;
        uint64_t v83 = v80;
        do
        {
          if (v81 >= *(void *)(v83 - 48)) {
            break;
          }
          if (!v8) {
            goto LABEL_131;
          }
          uint64_t v84 = v83 - 24;
          uint64_t v85 = *(void *)(v83 - 32);
          long long v87 = *(_OWORD *)(v83 - 64);
          long long v86 = *(_OWORD *)(v83 - 48);
          *(_OWORD *)(v83 - 40) = *(_OWORD *)v83;
          v83 -= 40;
          uint64_t v88 = *(void *)(v83 + 16);
          uint64_t v89 = *(void *)(v83 + 24);
          *(_OWORD *)uint64_t v84 = v87;
          *(_OWORD *)(v84 + 16) = v86;
          *(void *)(v84 + 3sub_100034730((uint64_t)"SIGTERM", 7, 2) = v85;
          *(void *)(v83 - 24) = v88;
          *(void *)(v83 - 16) = v89;
          *(void *)(v83 - 8) = v81;
          ++v82;
        }
        while (v7 != v82);
        ++v7;
        v80 += 40;
      }
      while (v7 != v28);
      Swift::Int v7 = v28;
    }
    if (v7 < v9) {
      goto LABEL_123;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_10011B190(0, *((void *)v29 + 2) + 1, 1, v29);
      uint64_t v29 = v90;
    }
    unint64_t v31 = *((void *)v29 + 2);
    unint64_t v30 = *((void *)v29 + 3);
    unint64_t v32 = v31 + 1;
    if (v31 >= v30 >> 1)
    {
      sub_10011B190(v30 > 1, v31 + 1, 1, v29);
      uint64_t v29 = v91;
    }
    *((void *)v29 + sub_100034730((uint64_t)"SIGTERM", 7, 2) = v32;
    uint64_t v33 = v29 + 32;
    uint64_t v34 = (Swift::Int *)&v29[16 * v31 + 32];
    *uint64_t v34 = v9;
    v34[1] = v7;
    Swift::Bool v105 = v29;
    if (v31) {
      break;
    }
    unint64_t v32 = 1;
LABEL_75:
    Swift::Int v5 = v102;
    Swift::Int v3 = v103;
    if (v7 >= v103) {
      goto LABEL_91;
    }
  }
  while (1)
  {
    unint64_t v35 = v32 - 1;
    if (v32 >= 4)
    {
      uint64_t v40 = &v33[2 * v32];
      uint64_t v41 = *(v40 - 8);
      uint64_t v42 = *(v40 - 7);
      BOOL v46 = __OFSUB__(v42, v41);
      uint64_t v43 = v42 - v41;
      if (v46) {
        goto LABEL_108;
      }
      uint64_t v45 = *(v40 - 6);
      uint64_t v44 = *(v40 - 5);
      BOOL v46 = __OFSUB__(v44, v45);
      uint64_t v38 = v44 - v45;
      char v39 = v46;
      if (v46) {
        goto LABEL_109;
      }
      unint64_t v47 = v32 - 2;
      unint64_t v48 = &v33[2 * v32 - 4];
      uint64_t v50 = *v48;
      uint64_t v49 = v48[1];
      BOOL v46 = __OFSUB__(v49, v50);
      uint64_t v51 = v49 - v50;
      if (v46) {
        goto LABEL_110;
      }
      BOOL v46 = __OFADD__(v38, v51);
      uint64_t v52 = v38 + v51;
      if (v46) {
        goto LABEL_112;
      }
      if (v52 >= v43)
      {
        uint64_t v70 = &v33[2 * v35];
        uint64_t v72 = *v70;
        uint64_t v71 = v70[1];
        BOOL v46 = __OFSUB__(v71, v72);
        uint64_t v73 = v71 - v72;
        if (v46) {
          goto LABEL_118;
        }
        BOOL v63 = v38 < v73;
        goto LABEL_64;
      }
    }
    else
    {
      if (v32 != 3)
      {
        uint64_t v64 = *((void *)v29 + 4);
        uint64_t v65 = *((void *)v29 + 5);
        BOOL v46 = __OFSUB__(v65, v64);
        uint64_t v57 = v65 - v64;
        char v58 = v46;
        goto LABEL_58;
      }
      uint64_t v37 = *((void *)v29 + 4);
      uint64_t v36 = *((void *)v29 + 5);
      BOOL v46 = __OFSUB__(v36, v37);
      uint64_t v38 = v36 - v37;
      char v39 = v46;
    }
    if (v39) {
      goto LABEL_111;
    }
    unint64_t v47 = v32 - 2;
    uint64_t v53 = &v33[2 * v32 - 4];
    uint64_t v55 = *v53;
    uint64_t v54 = v53[1];
    BOOL v56 = __OFSUB__(v54, v55);
    uint64_t v57 = v54 - v55;
    char v58 = v56;
    if (v56) {
      goto LABEL_113;
    }
    uint64_t v59 = &v33[2 * v35];
    uint64_t v61 = *v59;
    uint64_t v60 = v59[1];
    BOOL v46 = __OFSUB__(v60, v61);
    uint64_t v62 = v60 - v61;
    if (v46) {
      goto LABEL_115;
    }
    if (__OFADD__(v57, v62)) {
      goto LABEL_117;
    }
    if (v57 + v62 >= v38)
    {
      BOOL v63 = v38 < v62;
LABEL_64:
      if (v63) {
        unint64_t v35 = v47;
      }
      goto LABEL_66;
    }
LABEL_58:
    if (v58) {
      goto LABEL_114;
    }
    double v66 = &v33[2 * v35];
    uint64_t v68 = *v66;
    uint64_t v67 = v66[1];
    BOOL v46 = __OFSUB__(v67, v68);
    uint64_t v69 = v67 - v68;
    if (v46) {
      goto LABEL_116;
    }
    if (v69 < v57) {
      goto LABEL_75;
    }
LABEL_66:
    unint64_t v74 = v35 - 1;
    if (v35 - 1 >= v32)
    {
      __break(1u);
LABEL_105:
      __break(1u);
LABEL_106:
      __break(1u);
LABEL_107:
      __break(1u);
LABEL_108:
      __break(1u);
LABEL_109:
      __break(1u);
LABEL_110:
      __break(1u);
LABEL_111:
      __break(1u);
LABEL_112:
      __break(1u);
LABEL_113:
      __break(1u);
LABEL_114:
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
LABEL_118:
      __break(1u);
      goto LABEL_119;
    }
    if (!v8) {
      goto LABEL_132;
    }
    uint64_t v75 = &v33[2 * v74];
    uint64_t v76 = *v75;
    id v77 = &v33[2 * v35];
    uint64_t v78 = v77[1];
    sub_10004797C((char *)(v8 + 40 * *v75), (char *)(v8 + 40 * *v77), v8 + 40 * v78, v104);
    if (v1) {
      break;
    }
    if (v78 < v76) {
      goto LABEL_105;
    }
    if (v35 > *((void *)v105 + 2)) {
      goto LABEL_106;
    }
    *uint64_t v75 = v76;
    v33[2 * v74 + 1] = v78;
    unint64_t v79 = *((void *)v105 + 2);
    if (v35 >= v79) {
      goto LABEL_107;
    }
    uint64_t v29 = v105;
    unint64_t v32 = v79 - 1;
    memmove(&v33[2 * v35], v77 + 2, 16 * (v79 - 1 - v35));
    *((void *)v105 + sub_100034730((uint64_t)"SIGTERM", 7, 2) = v79 - 1;
    if (v79 <= 2) {
      goto LABEL_75;
    }
  }
LABEL_87:
  swift_bridgeObjectRelease();
  if (v103 < -1) {
    goto LABEL_126;
  }
  v101[2] = 0;
  swift_bridgeObjectRelease();
}

uint64_t sub_1000478F4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = *a4;
    uint64_t v5 = *a4 + 40 * a3 + 24;
    while (2)
    {
      uint64_t v6 = *(void *)(v4 + 40 * a3 + 16);
      uint64_t v7 = result;
      uint64_t v8 = v5;
      do
      {
        if (v6 >= *(void *)(v8 - 48)) {
          break;
        }
        if (!v4)
        {
          __break(1u);
          return result;
        }
        uint64_t v9 = v8 - 24;
        uint64_t v10 = *(void *)(v8 - 32);
        long long v12 = *(_OWORD *)(v8 - 64);
        long long v11 = *(_OWORD *)(v8 - 48);
        *(_OWORD *)(v8 - 40) = *(_OWORD *)v8;
        v8 -= 40;
        uint64_t v13 = *(void *)(v8 + 16);
        uint64_t v14 = *(void *)(v8 + 24);
        *(_OWORD *)uint64_t v9 = v12;
        *(_OWORD *)(v9 + 16) = v11;
        *(void *)(v9 + 3sub_100034730((uint64_t)"SIGTERM", 7, 2) = v10;
        *(void *)(v8 - 24) = v13;
        *(void *)(v8 - 16) = v14;
        *(void *)(v8 - 8) = v6;
        ++v7;
      }
      while (a3 != v7);
      ++a3;
      v5 += 40;
      if (a3 != a2) {
        continue;
      }
      break;
    }
  }
  return result;
}

uint64_t sub_10004797C(char *a1, char *a2, unint64_t a3, char *a4)
{
  uint64_t v4 = a4;
  uint64_t v6 = a2;
  uint64_t v7 = a1;
  uint64_t v8 = a2 - a1;
  uint64_t v9 = (a2 - a1) / 40;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = (uint64_t)(a3 - (void)a2) / 40;
  if (v9 >= v11)
  {
    sub_100119158(a2, (uint64_t)(a3 - (void)a2) / 40, a4);
    long long v12 = &v4[40 * v11];
    if (v7 >= v6 || v10 < 40) {
      goto LABEL_41;
    }
    unint64_t v20 = a3 - 40;
    while (1)
    {
      uint64_t v21 = (char *)(v20 + 40);
      if (*((void *)v12 - 3) >= *((void *)v6 - 3))
      {
        uint64_t v22 = v12 - 40;
        BOOL v24 = v21 != v12 || v20 >= (unint64_t)v12;
        v12 -= 40;
        if (!v24) {
          goto LABEL_37;
        }
      }
      else
      {
        uint64_t v22 = v6 - 40;
        BOOL v23 = v21 != v6 || v20 >= (unint64_t)v6;
        v6 -= 40;
        if (!v23) {
          goto LABEL_37;
        }
      }
      long long v25 = *(_OWORD *)v22;
      long long v26 = *((_OWORD *)v22 + 1);
      *(void *)(v20 + 3sub_100034730((uint64_t)"SIGTERM", 7, 2) = *((void *)v22 + 4);
      *(_OWORD *)unint64_t v20 = v25;
      *(_OWORD *)(v20 + 16) = v26;
LABEL_37:
      v20 -= 40;
      if (v6 <= v7 || v12 <= v4) {
        goto LABEL_41;
      }
    }
  }
  sub_100119158(a1, (a2 - a1) / 40, a4);
  long long v12 = &v4[40 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 40)
  {
    do
    {
      if (*((void *)v6 + 2) >= *((void *)v4 + 2))
      {
        BOOL v13 = v7 == v4;
        uint64_t v14 = v4;
        v4 += 40;
        if (v13 && v7 < v4) {
          goto LABEL_16;
        }
      }
      else
      {
        BOOL v13 = v7 == v6;
        uint64_t v14 = v6;
        v6 += 40;
        if (v13 && v7 < v6) {
          goto LABEL_16;
        }
      }
      long long v17 = *(_OWORD *)v14;
      long long v18 = *((_OWORD *)v14 + 1);
      *((void *)v7 + 4) = *((void *)v14 + 4);
      *(_OWORD *)uint64_t v7 = v17;
      *((_OWORD *)v7 + 1) = v18;
LABEL_16:
      v7 += 40;
    }
    while (v4 < v12 && (unint64_t)v6 < a3);
  }
  uint64_t v6 = v7;
LABEL_41:
  sub_100119158(v4, (v12 - v4) / 40, v6);
  return 1;
}

uint64_t sub_100047B20(uint64_t a1, int *a2)
{
  *(void *)(v2 + 56) = a1;
  uint64_t v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  Swift::Int v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 64) = v3;
  *Swift::Int v3 = v2;
  v3[1] = sub_100047C00;
  return v5(v2 + 16);
}

uint64_t sub_100047C00()
{
  sub_10001DD48();
  uint64_t v1 = (void *)*v0;
  uint64_t v2 = (void *)*v0;
  sub_10001DD38();
  *Swift::Int v3 = v2;
  uint64_t v4 = v1[7];
  uint64_t v5 = (void *)*v0;
  *Swift::Int v3 = *v0;
  swift_task_dealloc();
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[6];
  long long v8 = *((_OWORD *)v2 + 2);
  *(void *)uint64_t v4 = v1[2];
  *(void *)(v4 + 8) = v6;
  *(_OWORD *)(v4 + 16) = v8;
  *(void *)(v4 + 3sub_100034730((uint64_t)"SIGTERM", 7, 2) = v7;
  uint64_t v9 = (uint64_t (*)(void))v5[1];
  return v9();
}

uint64_t sub_100047D54()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100047D94()
{
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = swift_task_alloc();
  uint64_t v4 = (void *)sub_10002AC58(v3);
  *uint64_t v4 = v5;
  v4[1] = sub_100048298;
  uint64_t v6 = sub_1000242A8();
  return sub_100046650(v6, v7, v8, v9, v1, v2);
}

uint64_t sub_100047E44()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100047E7C()
{
  sub_10001DD48();
  uint64_t v2 = v1;
  uint64_t v3 = *(int **)(v0 + 16);
  uint64_t v4 = swift_task_alloc();
  uint64_t v5 = (void *)sub_10002AC58(v4);
  *uint64_t v5 = v6;
  v5[1] = sub_100046F50;
  uint64_t v7 = (uint64_t (*)(uint64_t, int *))((char *)&dword_100219CE0 + dword_100219CE0);
  return v7(v2, v3);
}

unint64_t sub_100047F28()
{
  unint64_t result = qword_100219CF8;
  if (!qword_100219CF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100219CF8);
  }
  return result;
}

uint64_t sub_100047F74(uint64_t a1)
{
  return sub_1000434EC(a1);
}

uint64_t sub_100047F90(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ManagedAppState();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100047FF4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ManagedAppState();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_DWORD *initializeBufferWithCopyOfBuffer for OSEligibilityError(_DWORD *result, _DWORD *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for OSEligibilityError(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 4)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for OSEligibilityError(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_DWORD *)unint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 4) = v3;
  return result;
}

ValueMetadata *type metadata accessor for OSEligibilityError()
{
  return &type metadata for OSEligibilityError;
}

uint64_t destroy for AppDistEntry()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AppDistEntry(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 3sub_100034730((uint64_t)"SIGTERM", 7, 2) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for AppDistEntry(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for AppDistEntry(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 3sub_100034730((uint64_t)"SIGTERM", 7, 2) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AppDistEntry(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 40))
    {
      LODWORD(vsub_100034730((uint64_t)"SIGTERM", 7, 2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(vsub_100034730((uint64_t)"SIGTERM", 7, 2) = -1;
      }
    }
  }
  else
  {
    LODWORD(vsub_100034730((uint64_t)"SIGTERM", 7, 2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AppDistEntry(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AppDistEntry()
{
  return &type metadata for AppDistEntry;
}

uint64_t sub_10004829C()
{
  type metadata accessor for SessionTokens(0);

  return static UUID.== infix(_:_:)();
}

BOOL sub_1000482E8()
{
  type metadata accessor for Client();
  sub_100020C48();
  uint64_t v1 = v0;
  uint64_t v3 = __chkstk_darwin(v2);
  __chkstk_darwin(v3);
  sub_100012EE4();
  Client.type.getter();
  uint64_t v4 = *(void (**)(void))(v1 + 8);
  sub_10002604C();
  v4();
  UserAgent.client.getter();
  Client.type.getter();
  sub_10002604C();
  v4();
  uint64_t v5 = ClientType.rawValue.getter();
  return v5 == ClientType.rawValue.getter();
}

uint64_t sub_1000483FC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_100027D84();
  uint64_t v4 = v3;
  swift_bridgeObjectRetain();
  uint64_t result = sub_100093174(v2, v4, (uint64_t)v11);
  uint64_t v6 = v11[1];
  uint64_t v7 = v11[2];
  uint64_t v8 = v11[3];
  long long v9 = v12;
  long long v10 = v13;
  *(void *)a1 = v11[0];
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = v7;
  *(void *)(a1 + 24) = v8;
  *(_OWORD *)(a1 + 3sub_100034730((uint64_t)"SIGTERM", 7, 2) = v9;
  *(_OWORD *)(a1 + 48) = v10;
  return result;
}

void sub_1000487DC()
{
  sub_10000DFE0();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v4 = (os_log_t *)type metadata accessor for Client();
  sub_100020C48();
  id v68 = v5;
  __chkstk_darwin(v6);
  sub_100017DC8();
  uint64_t v7 = type metadata accessor for DispatchPredicate();
  sub_100020C48();
  uint64_t v9 = v8;
  __chkstk_darwin(v10);
  long long v12 = (os_log_t *)((char *)&v63 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v13 = *(id *)(swift_unknownObjectUnownedLoadStrong() + 256);
  swift_unknownObjectRelease();
  *long long v12 = v13;
  (*(void (**)(void *, void, uint64_t))(v9 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v7);
  char v14 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v9 + 8))(v12, v7);
  if ((v14 & 1) == 0)
  {
    __break(1u);
LABEL_20:
    swift_once();
    goto LABEL_7;
  }
  uint64_t v67 = v4;
  int v15 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC7parsecd13ClientSession_fulfilled);
  uint64_t v4 = (os_log_t *)_swiftEmptyArrayStorage;
  uint64_t v66 = v1 + 16;
  if (v15 == 1)
  {
    id v16 = [objc_allocWithZone((Class)_CPSessionEndFeedback) init];
    if (v16)
    {
      long long v17 = v16;
      [v16 setReason:v3];
      id v18 = objc_allocWithZone((Class)_CPFeedbackPayload);
      Swift::Int v19 = v17;
      id v20 = [v18 initWithCodable:v19];
      [v20 setQueryId:0];

      id v13 = (id)(v1 + OBJC_IVAR____TtC7parsecd13ClientSession_userAgent);
      sub_10000CB40();
      LOBYTE(v17) = v21;

      if (v17 == 2)
      {
        if (qword_100218B38 != -1) {
          swift_once();
        }
        uint64_t v51 = type metadata accessor for Logger();
        sub_10002A10C(v51, (uint64_t)qword_1002369C0);
        swift_retain_n();
        uint64_t v52 = Logger.logObject.getter();
        os_log_type_t v53 = static os_log_type_t.fault.getter();
        int v54 = v53;
        if (os_log_type_enabled(v52, v53))
        {
          uint64_t v55 = swift_slowAlloc();
          uint64_t v65 = (os_log_t *)sub_100023E3C();
          v70[0] = (uint64_t)v65;
          *(_DWORD *)uint64_t v55 = 67240706;
          LODWORD(v74) = v3;
          int v64 = v54;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v55 + 8) = 2082;
          os_log_t v63 = v52;
          uint64_t v56 = sub_100027D84();
          uint64_t v74 = sub_10001C274(v56, v57, v70);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          sub_100019B54();
          swift_bridgeObjectRelease();
          *(_WORD *)(v55 + 18) = 2082;
          UserAgent.client.getter();
          uint64_t v58 = Client.name.getter();
          id v13 = v59;
          uint64_t v60 = sub_100024F98();
          v61(v60);
          uint64_t v74 = sub_10001C274(v58, (unint64_t)v13, v70);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          sub_100019B54();
          swift_bridgeObjectRelease();
          os_log_t v62 = v63;
          _os_log_impl((void *)&_mh_execute_header, v63, (os_log_type_t)v64, "SessionEndFeedback %{public}d not written for session: %{public}s client: %{public}s", (uint8_t *)v55, 0x1Cu);
          swift_arrayDestroy();
          sub_100017D40();
          uint64_t v4 = (os_log_t *)_swiftEmptyArrayStorage;
          sub_100017D40();

          goto LABEL_10;
        }

        swift_release_n();
      }
      goto LABEL_5;
    }
  }
  uint64_t v22 = (void *)(v1 + OBJC_IVAR____TtC7parsecd13ClientSession_connectionInvalidationFeedbacks);
  sub_10002B0C8();
  void *v22 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRelease();
  if (qword_100218B38 != -1) {
    goto LABEL_20;
  }
LABEL_7:
  uint64_t v23 = type metadata accessor for Logger();
  sub_10002A10C(v23, (uint64_t)qword_1002369C0);
  swift_retain_n();
  Swift::Int v19 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v19, v24))
  {

    swift_release_n();
    goto LABEL_10;
  }
  uint64_t v25 = swift_slowAlloc();
  id v13 = (id)sub_100023E3C();
  v70[0] = (uint64_t)v13;
  *(_DWORD *)uint64_t v25 = 136315394;
  uint64_t v26 = sub_100027D84();
  uint64_t v69 = sub_10001C274(v26, v27, v70);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  sub_100019B54();
  swift_bridgeObjectRelease();
  *(_WORD *)(v25 + 1sub_100034730((uint64_t)"SIGTERM", 7, 2) = 2080;
  UserAgent.client.getter();
  uint64_t v28 = Client.name.getter();
  unint64_t v30 = v29;
  uint64_t v31 = sub_100024F98();
  v32(v31);
  uint64_t v69 = sub_10001C274(v28, v30, v70);
  uint64_t v4 = (os_log_t *)_swiftEmptyArrayStorage;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  sub_100019B54();
  swift_bridgeObjectRelease();
  _os_log_impl((void *)&_mh_execute_header, v19, v24, "Skipped unfulfilled session %s of client: %s", (uint8_t *)v25, 0x16u);
  swift_arrayDestroy();
  sub_100017D40();
  sub_100017D40();
LABEL_5:

LABEL_10:
  sub_10001BA80((uint64_t)v70);
  uint64_t v33 = v72;
  sub_10001B620(v70, (uint64_t)v71);
  uint64_t v34 = sub_100027D84();
  (*((void (**)(uint64_t))v33 + 3))(v34);
  swift_bridgeObjectRelease();
  sub_10001CA50((uint64_t)v70);
  if (*(void *)(v1 + 32))
  {
    uint64_t v35 = *(void *)(v1 + 40);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v37 = sub_10007E35C(ObjectType, v35);
    if (v37)
    {
      uint64_t v38 = v37;
      swift_unknownObjectUnownedLoadStrong();
      sub_10000E308();
      swift_unknownObjectRelease();
      sub_10010A460();
      swift_unknownObjectRelease();
      id v68 = *(id *)(swift_unknownObjectUnownedLoadStrong() + 256);
      swift_unknownObjectRelease();
      uint64_t v39 = swift_allocObject();
      *(void *)(v39 + 16) = v1;
      *(void *)(v39 + 24) = v38;
      uint64_t v72 = sub_10004A50C;
      uint64_t v73 = v39;
      v70[0] = (uint64_t)_NSConcreteStackBlock;
      v70[1] = 1107296256;
      v70[2] = (uint64_t)sub_1000085EC;
      uint64_t v71 = &unk_1001FB8E8;
      uint64_t v40 = _Block_copy(v70);
      uint64_t v66 = type metadata accessor for DispatchQoS();
      uint64_t v67 = &v63;
      sub_100020C48();
      uint64_t v42 = v41;
      __chkstk_darwin(v43);
      uint64_t v45 = (char *)&v63 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
      swift_retain();
      swift_retain();
      static DispatchQoS.unspecified.getter();
      uint64_t v46 = type metadata accessor for DispatchWorkItemFlags();
      uint64_t v65 = &v63;
      sub_100020C48();
      uint64_t v48 = v47;
      __chkstk_darwin(v49);
      sub_100028CA0();
      uint64_t v69 = (uint64_t)v4;
      sub_10003045C();
      sub_10002572C((uint64_t *)&unk_10021BAF0);
      sub_1000301A0();
      dispatch thunk of SetAlgebra.init<A>(_:)();
      uint64_t v50 = v68;
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v40);
      swift_release();

      (*(void (**)(id, uint64_t))(v48 + 8))(v13, v46);
      (*(void (**)(char *, uint64_t))(v42 + 8))(v45, v66);
      swift_release();
    }
  }
  sub_100049408();
  sub_10000DFB8();
}

void sub_100049090()
{
  sub_10000DFE0();
  uint64_t v0 = type metadata accessor for URL();
  sub_100020C48();
  uint64_t v2 = v1;
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)v24 - v6;
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)v24 - v8;
  swift_unknownObjectUnownedLoadStrong();
  unint64_t v10 = (unint64_t)sub_10007EC40();
  swift_unknownObjectRelease();
  uint32_t v11 = arc4random_uniform(0x64u);
  if ((v10 & 0x8000000000000000) != 0 || HIDWORD(v10))
  {
    sub_100020C64();
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    if (v11 < v10)
    {
      sub_100039F74();
      uint64_t v12 = URL.lastPathComponent.getter();
      unint64_t v14 = v13;
      type metadata accessor for SessionFilename();
      swift_allocObject();
      uint64_t v15 = SessionFilename.init(fromString:)(v12, v14);
      if (v15)
      {
        id v16 = (unsigned char *)(v15 + OBJC_IVAR____TtC7parsecd15SessionFilename_state);
        sub_10002B0C8();
        *id v16 = 1;
        swift_retain();
        URL.deletingLastPathComponent()();
        SessionFilename.filenameString.getter();
        URL.appendingPathComponent(_:)();
        swift_bridgeObjectRelease();
        long long v17 = *(void (**)(void))(v2 + 8);
        sub_10001DD54();
        v17();
        swift_unknownObjectUnownedLoadStrong();
        sub_10008149C(v24);
        swift_unknownObjectRelease();
        uint64_t v18 = v25;
        uint64_t v19 = v26;
        sub_10001B620(v24, v25);
        (*(void (**)(char *, void, void, uint64_t, uint64_t))(v19 + 8))(v7, 0, 0, v18, v19);
        swift_release_n();
        sub_10001DD54();
        v17();
        sub_10001DD54();
        v17();
        sub_10001CA50((uint64_t)v24);
      }
      else
      {
        if (qword_100218B38 != -1) {
          swift_once();
        }
        uint64_t v20 = type metadata accessor for Logger();
        sub_10002A10C(v20, (uint64_t)qword_1002369C0);
        char v21 = Logger.logObject.getter();
        os_log_type_t v22 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v21, v22))
        {
          uint64_t v23 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v23 = 0;
          _os_log_impl((void *)&_mh_execute_header, v21, v22, "Coin toss said to flush eagerly but had to bail.", v23, 2u);
          sub_100017D40();
        }

        (*(void (**)(char *, uint64_t))(v2 + 8))(v9, v0);
      }
    }
    sub_10000DFB8();
  }
}

void sub_100049408()
{
  sub_10000DFE0();
  uint64_t v1 = sub_10002572C((uint64_t *)&unk_10021E630);
  uint64_t v2 = sub_100016544(v1);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100008B84(v0 + OBJC_IVAR____TtC7parsecd13ClientSession_tailLog, (uint64_t)v4, (uint64_t *)&unk_10021E630);
  uint64_t v5 = type metadata accessor for Logger();
  if (sub_100027BA4((uint64_t)v4, 1, v5) == 1)
  {
    sub_10000D564((uint64_t)v4, (uint64_t *)&unk_10021E630);
  }
  else
  {
    swift_retain_n();
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v9 = swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 136315138;
      uint64_t v13 = v9;
      v12[1] = v8 + 4;
      sub_10002CD30();
      sub_10004A48C((unint64_t *)&qword_10021CC60, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v10 = dispatch thunk of CustomStringConvertible.description.getter();
      v12[2] = sub_10001C274(v10, v11, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_100021298();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "%s complete.", v8, 0xCu);
      swift_arrayDestroy();
      sub_100017D40();
      sub_100017D40();
    }
    else
    {
      sub_100021298();
    }

    (*(void (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }
  sub_10000DFB8();
}

uint64_t sub_100049658()
{
  sub_10004A534(v0 + 16);
  swift_unknownObjectRelease();
  sub_10004A55C(v0 + OBJC_IVAR____TtC7parsecd13ClientSession_tokens);
  type metadata accessor for SessionType();
  sub_10000E060();
  uint64_t v1 = sub_1000253C4();
  v2(v1);
  type metadata accessor for UserAgent();
  sub_10000E060();
  uint64_t v3 = sub_1000253C4();
  v4(v3);

  swift_bridgeObjectRelease();
  sub_10000D564(v0 + OBJC_IVAR____TtC7parsecd13ClientSession_tailLog, (uint64_t *)&unk_10021E630);
  return v0;
}

uint64_t sub_100049730()
{
  sub_100049658();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v1, v2);
}

uint64_t sub_100049788()
{
  return type metadata accessor for ClientSession(0);
}

void sub_100049790()
{
  type metadata accessor for SessionTokens(319);
  if (v0 <= 0x3F)
  {
    type metadata accessor for SessionType();
    if (v1 <= 0x3F)
    {
      type metadata accessor for UserAgent();
      if (v2 <= 0x3F)
      {
        sub_100049908();
        if (v3 <= 0x3F) {
          swift_updateClassMetadata2();
        }
      }
    }
  }
}

void sub_100049908()
{
  if (!qword_100219D50)
  {
    type metadata accessor for Logger();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100219D50);
    }
  }
}

uint64_t *sub_100049960(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 24));
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_100049A80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_100049B4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100049C20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for Date();
  sub_1000248F0();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1;
LABEL_5:
    return sub_100027BA4(v9, a2, v8);
  }
  type metadata accessor for UUID();
  sub_1000248F0();
  if (*(_DWORD *)(v11 + 84) == a2)
  {
    uint64_t v8 = v10;
    uint64_t v9 = a1 + *(int *)(a3 + 20);
    goto LABEL_5;
  }
  unint64_t v13 = *(void *)(a1 + *(int *)(a3 + 24));
  if (v13 >= 0xFFFFFFFF) {
    LODWORD(v1sub_100034730((uint64_t)"SIGINT", 6, 3) = -1;
  }
  int v14 = v13 - 1;
  if (v14 < 0) {
    int v14 = -1;
  }
  return (v14 + 1);
}

void sub_100049CE0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for Date();
  sub_1000248F0();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = a1;
  }
  else
  {
    type metadata accessor for UUID();
    sub_1000248F0();
    if (*(_DWORD *)(v13 + 84) != a3)
    {
      *(void *)(a1 + *(int *)(a4 + 24)) = a2;
      return;
    }
    uint64_t v10 = v12;
    uint64_t v11 = a1 + *(int *)(a4 + 20);
  }

  sub_10002538C(v11, a2, a2, v10);
}

uint64_t sub_100049D90()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for UUID();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

void sub_100049E60()
{
  sub_10000DFE0();
  type metadata accessor for JSONEncodingOptions();
  sub_100020C48();
  __chkstk_darwin(v1);
  sub_100016550();
  uint64_t v2 = sub_10002572C(&qword_100219EC0);
  uint64_t v3 = sub_100016544(v2);
  __chkstk_darwin(v3);
  sub_10002127C();
  uint64_t v4 = type metadata accessor for Apple_Parsec_Feedback_V2_ClientSession();
  sub_100020C48();
  __chkstk_darwin(v5);
  id v6 = sub_100018464();
  sub_10004A278(v6, (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Feedback_V2_ClientSession, &qword_100219EC8, (void (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_ClientSession, v0);
  if (sub_100027BA4(v0, 1, v4) == 1)
  {
    sub_10000D564(v0, &qword_100219EC0);
  }
  else
  {
    uint64_t v7 = sub_1000263E0();
    v8(v7);
    JSONEncodingOptions.init()();
    sub_10004A48C(&qword_100219EC8, (void (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_ClientSession);
    sub_100028870();
    uint64_t v9 = sub_10002AC68();
    v10(v9);
    uint64_t v11 = sub_100026FD4();
    v12(v11);
  }
  sub_10000DFB8();
}

void sub_10004A06C()
{
  sub_10000DFE0();
  type metadata accessor for JSONEncodingOptions();
  sub_100020C48();
  __chkstk_darwin(v1);
  sub_100016550();
  uint64_t v2 = sub_10002572C(&qword_100219EA8);
  uint64_t v3 = sub_100016544(v2);
  __chkstk_darwin(v3);
  sub_10002127C();
  uint64_t v4 = type metadata accessor for Apple_Parsec_Feedback_V2_FeedbackPayload();
  sub_100020C48();
  __chkstk_darwin(v5);
  id v6 = sub_100018464();
  sub_10004A278(v6, (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Feedback_V2_FeedbackPayload, &qword_100219EB0, (void (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_FeedbackPayload, v0);
  if (sub_100027BA4(v0, 1, v4) == 1)
  {
    sub_10000D564(v0, &qword_100219EA8);
  }
  else
  {
    uint64_t v7 = sub_1000263E0();
    v8(v7);
    JSONEncodingOptions.init()();
    sub_10004A48C(&qword_100219EB0, (void (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_FeedbackPayload);
    sub_100028870();
    uint64_t v9 = sub_10002AC68();
    v10(v9);
    uint64_t v11 = sub_100026FD4();
    v12(v11);
  }
  sub_10000DFB8();
}

void sub_10004A278(void *a1@<X0>, uint64_t (*a2)(void)@<X1>, unint64_t *a3@<X2>, void (*a4)(uint64_t)@<X3>, uint64_t a5@<X8>)
{
  unint64_t v29 = a4;
  uint64_t v25 = a3;
  uint64_t v9 = type metadata accessor for BinaryDecodingOptions();
  uint64_t v10 = sub_100016544(v9);
  __chkstk_darwin(v10);
  sub_100028CA0();
  uint64_t v11 = a2(0);
  sub_100020C48();
  uint64_t v13 = v12;
  __chkstk_darwin(v14);
  id v16 = (char *)&v22 - v15;
  id v17 = [a1 data];
  if (v17)
  {
    uint64_t v18 = v17;
    uint64_t v23 = v13;
    uint64_t v24 = a5;
    static Data._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v28 = 0;
    long long v26 = 0u;
    long long v27 = 0u;
    BinaryDecodingOptions.init()();
    sub_10004A48C(v25, v29);
    Message.init(serializedData:extensions:partial:options:)();

    if (v5) {
      return;
    }
    uint64_t v19 = v24;
    (*(void (**)(uint64_t, char *, uint64_t))(v23 + 32))(v24, v16, v11);
    uint64_t v20 = v19;
    uint64_t v21 = 0;
  }
  else
  {

    uint64_t v20 = a5;
    uint64_t v21 = 1;
  }
  sub_10002538C(v20, v21, 1, v11);
}

uint64_t sub_10004A42C()
{
  swift_bridgeObjectRelease();
  uint64_t v0 = sub_100025198();

  return _swift_deallocObject(v0, v1, v2);
}

uint64_t sub_10004A45C()
{
  sub_1000291B4(*(void *)(v0 + 16), *(void *)(v0 + 24));
  uint64_t v1 = sub_100025198();

  return _swift_deallocObject(v1, v2, v3);
}

uint64_t sub_10004A48C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10004A4D4()
{
  swift_release();
  swift_release();
  uint64_t v0 = sub_100025198();

  return _swift_deallocObject(v0, v1, v2);
}

void sub_10004A50C()
{
}

uint64_t sub_10004A534(uint64_t a1)
{
  return a1;
}

uint64_t sub_10004A55C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SessionTokens(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

BOOL sub_10004A5B8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))() == 0;
}

uint64_t sub_10004A5E8(void *a1, uint64_t a2, void *a3)
{
  uint64_t v33 = 0;
  unint64_t v34 = 0xE000000000000000;
  sub_10001C348((uint64_t)a1, (uint64_t)v32);
  sub_10002572C(qword_1002199B8);
  uint64_t v6 = swift_dynamicCast();
  if (v6)
  {
    __chkstk_darwin(v6);
    sub_10004ACEC(v31, (void (*)(uint64_t, uint64_t, unsigned char *))sub_10004B1E4);
    swift_bridgeObjectRelease();
    return v33;
  }
  sub_10001C348((uint64_t)a1, (uint64_t)v32);
  sub_10002572C(&qword_100219EE0);
  if (swift_dynamicCast())
  {
    uint64_t v7 = *(void *)(v31 + 16);
    if (v7)
    {
      uint64_t v8 = 0;
      uint64_t v9 = v31 + 32;
      do
      {
        sub_10001C348(v9, (uint64_t)v32);
        v10._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v10);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        v11._uint64_t countAndFlagsBits = 46;
        v11._object = (void *)0xE100000000000000;
        String.append(_:)(v11);
        swift_bridgeObjectRelease();
        uint64_t v12 = sub_10004A5E8(v32, a2, a3);
        unint64_t v14 = v13;
        swift_bridgeObjectRelease();
        sub_10001CA50((uint64_t)v32);
        uint64_t v15 = HIBYTE(v14) & 0xF;
        if ((v14 & 0x2000000000000000) == 0) {
          uint64_t v15 = v12 & 0xFFFFFFFFFFFFLL;
        }
        if (v15)
        {
          uint64_t v16 = v33 & 0xFFFFFFFFFFFFLL;
          if ((v34 & 0x2000000000000000) != 0) {
            uint64_t v16 = HIBYTE(v34) & 0xF;
          }
          BOOL v17 = v16 == 0;
          uint64_t v18 = 10;
          if (v17)
          {
            uint64_t v18 = 0;
            uint64_t v19 = (void *)0xE000000000000000;
          }
          else
          {
            uint64_t v19 = (void *)0xE100000000000000;
          }
          v32[0]._uint64_t countAndFlagsBits = v18;
          v32[0]._object = v19;
          swift_bridgeObjectRetain();
          v20._uint64_t countAndFlagsBits = v12;
          v20._object = (void *)v14;
          String.append(_:)(v20);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          String.append(_:)(v32[0]);
        }
        ++v8;
        swift_bridgeObjectRelease();
        v9 += 32;
      }
      while (v7 != v8);
    }
    goto LABEL_19;
  }
  sub_10001C348((uint64_t)a1, (uint64_t)v32);
  sub_10002572C(&qword_100219EE8);
  if (swift_dynamicCast())
  {
    swift_bridgeObjectRetain();
    sub_10004AE9C(v31, a2, (uint64_t)a3, &v33);
LABEL_19:
    swift_bridgeObjectRelease();
    return v33;
  }
  uint64_t v22 = self;
  sub_10002572C(&qword_100219EF0);
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_1001A2A20;
  sub_10001C348((uint64_t)a1, v23 + 32);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  LOBYTE(v2sub_100034730((uint64_t)"SIGTERM", 7, 2) = [(id)v22 isValidJSONObject:isa];

  if ((v22 & 1) == 0)
  {
    v32[0]._uint64_t countAndFlagsBits = 0;
    v32[0]._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(46);
    swift_bridgeObjectRelease();
    v32[0]._uint64_t countAndFlagsBits = 0x6F207463656A624FLL;
    v32[0]._object = (void *)0xEF20657079742066;
    sub_10001B620(a1, a1[3]);
    swift_getDynamicType();
    sub_10002572C(&qword_100219EF8);
    v25._uint64_t countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
    v26._uint64_t countAndFlagsBits = 544497952;
    v26._object = (void *)0xE400000000000000;
    String.append(_:)(v26);
    v27._uint64_t countAndFlagsBits = a2;
    v27._object = a3;
    String.append(_:)(v27);
    v28._object = (void *)0x80000001001B0F20;
    v28._uint64_t countAndFlagsBits = 0xD000000000000017;
    String.append(_:)(v28);
    uint64_t countAndFlagsBits = v32[0]._countAndFlagsBits;
    object = v32[0]._object;
    swift_bridgeObjectRelease();
    uint64_t v33 = countAndFlagsBits;
    unint64_t v34 = (unint64_t)object;
  }
  return v33;
}

unint64_t sub_10004AA14()
{
  unint64_t result = qword_100219ED8;
  if (!qword_100219ED8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100219ED8);
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for JSONSerializationUtilError(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for StorefrontAccount()
{
  return swift_bridgeObjectRelease();
}

void *assignWithCopy for JSONSerializationUtilError(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for JSONSerializationUtilError(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

void *assignWithTake for JSONSerializationUtilError(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for JSONSerializationUtilError(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 16))
    {
      LODWORD(vsub_100034730((uint64_t)"SIGTERM", 7, 2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(vsub_100034730((uint64_t)"SIGTERM", 7, 2) = -1;
      }
    }
  }
  else
  {
    LODWORD(vsub_100034730((uint64_t)"SIGTERM", 7, 2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for JSONSerializationUtilError(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for JSONSerializationUtilError()
{
  return &type metadata for JSONSerializationUtilError;
}

ValueMetadata *type metadata accessor for JSONSerializationUtil()
{
  return &type metadata for JSONSerializationUtil;
}

uint64_t sub_10004ABB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  String.append(_:)(*(Swift::String *)&a1);
  swift_bridgeObjectRetain();
  v10._uint64_t countAndFlagsBits = 46;
  v10._object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  uint64_t v11 = sub_10004A5E8(a3, a4, a5);
  unint64_t v13 = v12;
  swift_bridgeObjectRelease();
  uint64_t v14 = HIBYTE(v13) & 0xF;
  if ((v13 & 0x2000000000000000) == 0) {
    uint64_t v14 = v11 & 0xFFFFFFFFFFFFLL;
  }
  if (v14)
  {
    unint64_t v15 = a6[1];
    uint64_t v16 = *a6 & 0xFFFFFFFFFFFFLL;
    if ((v15 & 0x2000000000000000) != 0) {
      uint64_t v16 = HIBYTE(v15) & 0xF;
    }
    BOOL v17 = v16 == 0;
    uint64_t v18 = 10;
    if (v17)
    {
      uint64_t v18 = 0;
      uint64_t v19 = (void *)0xE000000000000000;
    }
    else
    {
      uint64_t v19 = (void *)0xE100000000000000;
    }
    uint64_t v23 = v18;
    swift_bridgeObjectRetain();
    v20._uint64_t countAndFlagsBits = v11;
    v20._object = (void *)v13;
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v21._uint64_t countAndFlagsBits = v23;
    v21._object = v19;
    String.append(_:)(v21);
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_10004ACEC(uint64_t a1, void (*a2)(uint64_t, uint64_t, unsigned char *))
{
  sub_10001FC68(a1, v19);
  uint64_t v3 = v19[0];
  uint64_t v20 = v19[1];
  int64_t v4 = v19[3];
  unint64_t v5 = v19[4];
  int64_t v6 = (unint64_t)(v19[2] + 64) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  if (!v5) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v8 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  unint64_t v9 = v8 | (v4 << 6);
  while (1)
  {
    uint64_t v14 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v9);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    sub_10001C348(*(void *)(v3 + 56) + 32 * v9, (uint64_t)v18);
    v17[0] = v15;
    v17[1] = v16;
    swift_bridgeObjectRetain();
    a2(v15, v16, v18);
    uint64_t result = sub_10004B1F0((uint64_t)v17);
    if (v5) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v10 = v4 + 1;
    if (__OFADD__(v4, 1)) {
      break;
    }
    if (v10 >= v6) {
      return swift_release();
    }
    unint64_t v11 = *(void *)(v20 + 8 * v10);
    int64_t v12 = v4 + 1;
    if (!v11)
    {
      int64_t v12 = v4 + 2;
      if (v4 + 2 >= v6) {
        return swift_release();
      }
      unint64_t v11 = *(void *)(v20 + 8 * v12);
      if (!v11)
      {
        int64_t v12 = v4 + 3;
        if (v4 + 3 >= v6) {
          return swift_release();
        }
        unint64_t v11 = *(void *)(v20 + 8 * v12);
        if (!v11)
        {
          int64_t v12 = v4 + 4;
          if (v4 + 4 >= v6) {
            return swift_release();
          }
          unint64_t v11 = *(void *)(v20 + 8 * v12);
          if (!v11)
          {
            int64_t v12 = v4 + 5;
            if (v4 + 5 >= v6) {
              return swift_release();
            }
            unint64_t v11 = *(void *)(v20 + 8 * v12);
            if (!v11)
            {
              int64_t v13 = v4 + 6;
              while (v13 < v6)
              {
                unint64_t v11 = *(void *)(v20 + 8 * v13++);
                if (v11)
                {
                  int64_t v12 = v13 - 1;
                  goto LABEL_18;
                }
              }
              return swift_release();
            }
          }
        }
      }
    }
LABEL_18:
    unint64_t v5 = (v11 - 1) & v11;
    unint64_t v9 = __clz(__rbit64(v11)) + (v12 << 6);
    int64_t v4 = v12;
  }
  __break(1u);
  return result;
}

uint64_t sub_10004AE9C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(a1 + 56);
  int64_t v28 = (unint64_t)(v6 + 63) >> 6;
  uint64_t v36 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v10 = 0;
  if (!v8) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v11 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (unint64_t i = v11 | (v10 << 6); ; unint64_t i = __clz(__rbit64(v14)) + (v10 << 6))
  {
    sub_10003C9CC(*(void *)(v36 + 48) + 40 * i, (uint64_t)v34);
    v32[0] = v34[0];
    v32[1] = v34[1];
    uint64_t v33 = v35;
    uint64_t v31 = &type metadata for AnyHashable;
    v30._uint64_t countAndFlagsBits = swift_allocObject();
    sub_10003C9CC((uint64_t)v32, v30._countAndFlagsBits + 16);
    swift_bridgeObjectRetain();
    v16._uint64_t countAndFlagsBits = 0xD000000000000010;
    v16._object = (void *)0x80000001001B0F40;
    String.append(_:)(v16);
    uint64_t v17 = sub_10004A5E8(&v30, a2, a3);
    unint64_t v19 = v18;
    swift_bridgeObjectRelease();
    sub_10001CA50((uint64_t)&v30);
    uint64_t v20 = HIBYTE(v19) & 0xF;
    if ((v19 & 0x2000000000000000) == 0) {
      uint64_t v20 = v17 & 0xFFFFFFFFFFFFLL;
    }
    if (v20)
    {
      unint64_t v21 = a4[1];
      uint64_t v22 = *a4 & 0xFFFFFFFFFFFFLL;
      if ((v21 & 0x2000000000000000) != 0) {
        uint64_t v22 = HIBYTE(v21) & 0xF;
      }
      BOOL v23 = v22 == 0;
      uint64_t v24 = 10;
      if (v23)
      {
        uint64_t v24 = 0;
        Swift::String v25 = (void *)0xE000000000000000;
      }
      else
      {
        Swift::String v25 = (void *)0xE100000000000000;
      }
      v30._uint64_t countAndFlagsBits = v24;
      v30._object = v25;
      swift_bridgeObjectRetain();
      v26._uint64_t countAndFlagsBits = v17;
      v26._object = (void *)v19;
      String.append(_:)(v26);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      String.append(_:)(v30);
    }
    swift_bridgeObjectRelease();
    uint64_t result = sub_100039C5C((uint64_t)v32);
    if (v8) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v13 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_34;
    }
    if (v13 >= v28) {
      goto LABEL_32;
    }
    unint64_t v14 = *(void *)(v27 + 8 * v13);
    ++v10;
    if (!v14)
    {
      int64_t v10 = v13 + 1;
      if (v13 + 1 >= v28) {
        goto LABEL_32;
      }
      unint64_t v14 = *(void *)(v27 + 8 * v10);
      if (!v14)
      {
        int64_t v10 = v13 + 2;
        if (v13 + 2 >= v28) {
          goto LABEL_32;
        }
        unint64_t v14 = *(void *)(v27 + 8 * v10);
        if (!v14)
        {
          int64_t v10 = v13 + 3;
          if (v13 + 3 >= v28) {
            goto LABEL_32;
          }
          unint64_t v14 = *(void *)(v27 + 8 * v10);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_20:
    unint64_t v8 = (v14 - 1) & v14;
  }
  int64_t v15 = v13 + 4;
  if (v15 >= v28)
  {
LABEL_32:
    swift_bridgeObjectRelease();
    return swift_release();
  }
  unint64_t v14 = *(void *)(v27 + 8 * v15);
  if (v14)
  {
    int64_t v10 = v15;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v10 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v10 >= v28) {
      goto LABEL_32;
    }
    unint64_t v14 = *(void *)(v27 + 8 * v10);
    ++v15;
    if (v14) {
      goto LABEL_20;
    }
  }
LABEL_34:
  __break(1u);
  return result;
}

uint64_t sub_10004B180()
{
  return sub_100026898(v0, 48);
}

uint64_t sub_10004B18C()
{
  return sub_100026898(v0, 32);
}

unint64_t sub_10004B198()
{
  unint64_t result = qword_10021F660;
  if (!qword_10021F660)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10021F660);
  }
  return result;
}

uint64_t sub_10004B1E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10004ABB8(a1, a2, a3, *(void *)(v3 + 16), *(void *)(v3 + 24), *(void **)(v3 + 32));
}

uint64_t sub_10004B1F0(uint64_t a1)
{
  uint64_t v2 = sub_10002572C(&qword_100219F00);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10004B250()
{
  sub_10001CA50(v0 + 16);

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10004B28C()
{
  return sub_1000268A0(0xD00000000000001BLL, 0x80000001001B1120);
}

void *sub_10004B2C4()
{
  id v0 = objc_allocWithZone((Class)NSUserDefaults);
  sub_10000E090();
  uint64_t v3 = sub_1000071E4(v1, v2);
  if (v3)
  {
    sub_10000E090();
    NSString v4 = String._bridgeToObjectiveC()();
    id v5 = [v3 stringForKey:v4];

    if (v5)
    {
      uint64_t v3 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

uint64_t sub_10004B38C()
{
  return sub_1000268A0(0xD000000000000016, 0x80000001001B10A0);
}

uint64_t sub_10004B3C0(uint64_t a1, uint64_t a2)
{
  id v4 = objc_allocWithZone((Class)NSUserDefaults);
  id v5 = sub_1000071E4(a1, a2);
  if (!v5) {
    return 2;
  }
  uint64_t v6 = v5;
  NSString v7 = String._bridgeToObjectiveC()();
  id v8 = [v6 BOOLForKey:v7];

  return (uint64_t)v8;
}

uint64_t sub_10004B458(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(v2 + 20) = 0;
  *(_DWORD *)(v2 + 16) = 0;
  *(_DWORD *)(v2 + 24) = 0;
  *(void *)(v2 + 3sub_100034730((uint64_t)"SIGTERM", 7, 2) = 0;
  *(void *)(v2 + 40) = 0;
  *(unsigned char *)(v2 + 48) = 2;
  *(void *)(v2 + 64) = 0;
  swift_unknownObjectWeakInit();
  *(void *)(v2 + 64) = a2;
  swift_unknownObjectWeakAssign();
  id v4 = sub_10004B2C4();
  uint64_t v6 = v5;
  char v7 = sub_10004B38C();
  *(void *)(v2 + 3sub_100034730((uint64_t)"SIGTERM", 7, 2) = v4;
  *(void *)(v2 + 40) = v6;
  *(unsigned char *)(v2 + 48) = v7;
  swift_bridgeObjectRelease();
  id v8 = [self defaultCenter];
  sub_10002572C((uint64_t *)&unk_10021BAE0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1001A2A20;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  AnyHashable.init<A>(_:)();
  *(void *)(inited + 96) = type metadata accessor for ContextUpdate(0);
  int64_t v10 = sub_10002E5E8((uint64_t *)(inited + 72));
  uint64_t v11 = *(void *)(v2 + 40);
  char v12 = *(unsigned char *)(v2 + 48);
  *int64_t v10 = *(void *)(v2 + 32);
  v10[1] = v11;
  *((unsigned char *)v10 + 16) = v12;
  swift_storeEnumTagMultiPayload();
  swift_bridgeObjectRetain();
  uint64_t v13 = Dictionary.init(dictionaryLiteral:)();
  sub_10010553C(@"com.apple.parsecd.contextUpdate", 0, v13, v8);

  uint64_t v14 = sub_10002C17C();
  swift_weakInit();
  swift_beginAccess();
  swift_retain();
  sub_10000E090();
  sub_100080B4C(0xD000000000000029, v15, (int *)(v2 + 16), (uint64_t)sub_10004BDB0, v14);
  swift_endAccess();
  swift_release_n();
  uint64_t v16 = sub_10002C17C();
  swift_weakInit();
  swift_beginAccess();
  swift_retain();
  sub_10000E090();
  sub_100080B4C(v17, v18, (int *)(v2 + 20), (uint64_t)sub_10004BDB8, v16);
  swift_endAccess();
  swift_release_n();
  uint64_t v19 = sub_10002C17C();
  swift_weakInit();
  swift_beginAccess();
  swift_retain();
  sub_10000E090();
  sub_100080B4C(0xD000000000000029, v20, (int *)(v2 + 24), (uint64_t)sub_10004BDC0, v19);
  swift_endAccess();
  swift_release_n();
  swift_unknownObjectRelease();
  return v2;
}

uint64_t sub_10004B790()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = result;
    *(void *)(result + 3sub_100034730((uint64_t)"SIGTERM", 7, 2) = sub_10004B2C4();
    *(void *)(v1 + 40) = v2;
    swift_bridgeObjectRelease();
    if (swift_unknownObjectWeakLoadStrong())
    {
      id v3 = [self defaultCenter];
      swift_unknownObjectRelease();
      sub_10002572C((uint64_t *)&unk_10021BAE0);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1001A2A20;
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      AnyHashable.init<A>(_:)();
      *(void *)(inited + 96) = type metadata accessor for ContextUpdate(0);
      uint64_t v5 = sub_10002E5E8((uint64_t *)(inited + 72));
      uint64_t v6 = *(void *)(v1 + 40);
      char v7 = *(unsigned char *)(v1 + 48);
      *uint64_t v5 = *(void *)(v1 + 32);
      v5[1] = v6;
      *((unsigned char *)v5 + 16) = v7;
      swift_storeEnumTagMultiPayload();
      swift_bridgeObjectRetain();
      uint64_t v8 = Dictionary.init(dictionaryLiteral:)();
      sub_10010553C(@"com.apple.parsecd.contextUpdate", 0, v8, v3);
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_10004B924()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v3 = *(void *)(result + 32);
    uint64_t v2 = *(void *)(result + 40);
    swift_bridgeObjectRetain();
    char v4 = sub_10004B38C();
    *(void *)(v1 + 3sub_100034730((uint64_t)"SIGTERM", 7, 2) = v3;
    *(void *)(v1 + 40) = v2;
    *(unsigned char *)(v1 + 48) = v4;
    swift_bridgeObjectRelease();
    if (swift_unknownObjectWeakLoadStrong())
    {
      id v5 = [self defaultCenter];
      swift_unknownObjectRelease();
      sub_10002572C((uint64_t *)&unk_10021BAE0);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1001A2A20;
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      AnyHashable.init<A>(_:)();
      *(void *)(inited + 96) = type metadata accessor for ContextUpdate(0);
      char v7 = sub_10002E5E8((uint64_t *)(inited + 72));
      uint64_t v8 = *(void *)(v1 + 40);
      char v9 = *(unsigned char *)(v1 + 48);
      *char v7 = *(void *)(v1 + 32);
      v7[1] = v8;
      *((unsigned char *)v7 + 16) = v9;
      swift_storeEnumTagMultiPayload();
      swift_bridgeObjectRetain();
      uint64_t v10 = Dictionary.init(dictionaryLiteral:)();
      sub_10010553C(@"com.apple.parsecd.contextUpdate", 0, v10, v5);
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_10004BAC8()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = result;
    if (sub_10004B28C())
    {
      uint64_t v3 = sub_10004B2C4();
      uint64_t v5 = v4;
      char v2 = sub_10004B38C();
      *(void *)(v1 + 3sub_100034730((uint64_t)"SIGTERM", 7, 2) = v3;
      *(void *)(v1 + 40) = v5;
    }
    else
    {
      *(void *)(v1 + 3sub_100034730((uint64_t)"SIGTERM", 7, 2) = 0;
      *(void *)(v1 + 40) = 0;
      char v2 = 2;
    }
    *(unsigned char *)(v1 + 48) = v2;
    swift_bridgeObjectRelease();
    if (swift_unknownObjectWeakLoadStrong())
    {
      id v6 = [self defaultCenter];
      swift_unknownObjectRelease();
      sub_10002572C((uint64_t *)&unk_10021BAE0);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1001A2A20;
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      AnyHashable.init<A>(_:)();
      *(void *)(inited + 96) = type metadata accessor for ContextUpdate(0);
      uint64_t v8 = sub_10002E5E8((uint64_t *)(inited + 72));
      uint64_t v9 = *(void *)(v1 + 40);
      char v10 = *(unsigned char *)(v1 + 48);
      *uint64_t v8 = *(void *)(v1 + 32);
      v8[1] = v9;
      *((unsigned char *)v8 + 16) = v10;
      swift_storeEnumTagMultiPayload();
      swift_bridgeObjectRetain();
      uint64_t v11 = Dictionary.init(dictionaryLiteral:)();
      sub_10010553C(@"com.apple.parsecd.contextUpdate", 0, v11, v6);
    }
    return swift_release();
  }
  return result;
}

_DWORD *sub_10004BC84()
{
  swift_beginAccess();
  int v1 = v0[4];
  if (v1 != -1) {
    notify_cancel(v1);
  }
  swift_beginAccess();
  int v2 = v0[5];
  if (v2 != -1) {
    notify_cancel(v2);
  }
  swift_beginAccess();
  int v3 = v0[6];
  if (v3 != -1) {
    notify_cancel(v3);
  }
  swift_bridgeObjectRelease();
  sub_10001CDE0((uint64_t)(v0 + 14));
  return v0;
}

uint64_t sub_10004BD20()
{
  sub_10004BC84();

  return _swift_deallocClassInstance(v0, 72, 7);
}

uint64_t type metadata accessor for SiriSettingsManager()
{
  return self;
}

uint64_t sub_10004BD78()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10004BDB0()
{
  return sub_10004B790();
}

uint64_t sub_10004BDB8()
{
  return sub_10004B924();
}

uint64_t sub_10004BDC0()
{
  return sub_10004BAC8();
}

uint64_t sub_10004BDC8()
{
  uint64_t result = type metadata accessor for AtomicLazy.Inner();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_10004BE6C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10004CD40(v0, qword_10021A060);
  sub_10002A10C(v0, (uint64_t)qword_10021A060);
  return Logger.init()();
}

uint64_t sub_10004BEB8()
{
  swift_slowDealloc();
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 104);
  uint64_t v2 = type metadata accessor for AtomicLazy.Inner();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t sub_10004BF6C()
{
  sub_10004BEB8();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v1, v2);
}

uint64_t type metadata accessor for AtomicLazy()
{
  return sub_100040C54();
}

uint64_t type metadata accessor for AtomicLazy.Inner()
{
  return sub_100040C54();
}

uint64_t sub_10004BFF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 24);
}

uint64_t sub_10004BFFC()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

void *sub_10004C098(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  int v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  if (*(void *)(v4 + 64) <= 0x10uLL) {
    uint64_t v5 = 16;
  }
  else {
    uint64_t v5 = *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64);
  }
  int v6 = *(_DWORD *)(v4 + 80);
  if ((v6 & 0x1000F8) != 0 || (unint64_t)(v5 + 1) > 0x18)
  {
    uint64_t v8 = *(void *)a2;
    *int v3 = *(void *)a2;
    int v3 = (void *)(v8 + ((unsigned __int16)((v6 & 0xF8) + 23) & (unsigned __int16)~(v6 & 0xF8) & 0x1F8));
LABEL_24:
    swift_retain();
    return v3;
  }
  unsigned int v9 = a2[v5];
  unsigned int v10 = v9 - 2;
  if (v9 >= 2)
  {
    if (v5 <= 3) {
      uint64_t v11 = v5;
    }
    else {
      uint64_t v11 = 4;
    }
    switch(v11)
    {
      case 1:
        int v12 = *a2;
        goto LABEL_19;
      case 2:
        int v12 = *(unsigned __int16 *)a2;
        goto LABEL_19;
      case 3:
        int v12 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_19;
      case 4:
        int v12 = *(_DWORD *)a2;
LABEL_19:
        int v13 = (v12 | (v10 << (8 * v5))) + 2;
        unsigned int v9 = v12 + 2;
        if (v5 < 4) {
          unsigned int v9 = v13;
        }
        break;
      default:
        break;
    }
  }
  if (v9 != 1)
  {
    uint64_t v14 = *((void *)a2 + 1);
    *int v3 = *(void *)a2;
    v3[1] = v14;
    *((unsigned char *)v3 + v5) = 0;
    goto LABEL_24;
  }
  (*(void (**)(void *))(v4 + 16))(a1);
  *((unsigned char *)v3 + v5) = 1;
  return v3;
}

uint64_t sub_10004C210(unsigned __int8 *a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 24) - 8) + 64);
  if (v2 <= 0x10) {
    unint64_t v2 = 16;
  }
  unsigned int v3 = a1[v2];
  unsigned int v4 = v3 - 2;
  if (v3 >= 2)
  {
    if (v2 <= 3) {
      uint64_t v5 = v2;
    }
    else {
      uint64_t v5 = 4;
    }
    switch(v5)
    {
      case 1:
        int v6 = *a1;
        goto LABEL_12;
      case 2:
        int v6 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v6 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v6 = *(_DWORD *)a1;
LABEL_12:
        int v7 = (v6 | (v4 << (8 * v2))) + 2;
        unsigned int v3 = v6 + 2;
        if (v2 < 4) {
          unsigned int v3 = v7;
        }
        break;
      default:
        break;
    }
  }
  if (v3 == 1) {
    return (*(uint64_t (**)(void))(*(void *)(*(void *)(a2 + 24) - 8) + 8))();
  }
  else {
    return swift_release();
  }
}

unsigned __int8 *sub_10004C324(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 24);
    uint64_t v6 = *(void *)(v5 - 8);
    if (*(void *)(v6 + 64) <= 0x10uLL) {
      uint64_t v7 = 16;
    }
    else {
      uint64_t v7 = *(void *)(v6 + 64);
    }
    unsigned int v8 = a1[v7];
    unsigned int v9 = v8 - 2;
    if (v8 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v10 = v7;
      }
      else {
        uint64_t v10 = 4;
      }
      switch(v10)
      {
        case 1:
          int v11 = *a1;
          goto LABEL_14;
        case 2:
          int v11 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v11 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v11 = *(_DWORD *)a1;
LABEL_14:
          int v12 = (v11 | (v9 << (8 * v7))) + 2;
          unsigned int v8 = v11 + 2;
          if (v7 < 4) {
            unsigned int v8 = v12;
          }
          break;
        default:
          break;
      }
    }
    if (v8 == 1) {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
    }
    else {
      swift_release();
    }
    unsigned int v13 = a2[v7];
    unsigned int v14 = v13 - 2;
    if (v13 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v15 = v7;
      }
      else {
        uint64_t v15 = 4;
      }
      switch(v15)
      {
        case 1:
          int v16 = *a2;
          goto LABEL_28;
        case 2:
          int v16 = *(unsigned __int16 *)a2;
          goto LABEL_28;
        case 3:
          int v16 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_28;
        case 4:
          int v16 = *(_DWORD *)a2;
LABEL_28:
          int v17 = (v16 | (v14 << (8 * v7))) + 2;
          unsigned int v13 = v16 + 2;
          if (v7 < 4) {
            unsigned int v13 = v17;
          }
          break;
        default:
          break;
      }
    }
    if (v13 == 1)
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
      a1[v7] = 1;
    }
    else
    {
      uint64_t v18 = *((void *)a2 + 1);
      *(void *)a1 = *(void *)a2;
      *((void *)a1 + 1) = v18;
      a1[v7] = 0;
      swift_retain();
    }
  }
  return a1;
}

_OWORD *sub_10004C540(_OWORD *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (*(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64) <= 0x10uLL) {
    uint64_t v4 = 16;
  }
  else {
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64);
  }
  unsigned int v5 = a2[v4];
  unsigned int v6 = v5 - 2;
  if (v5 >= 2)
  {
    if (v4 <= 3) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = 4;
    }
    switch(v7)
    {
      case 1:
        int v8 = *a2;
        goto LABEL_13;
      case 2:
        int v8 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v8 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v8 = *(_DWORD *)a2;
LABEL_13:
        int v9 = (v8 | (v6 << (8 * v4))) + 2;
        unsigned int v5 = v8 + 2;
        if (v4 < 4) {
          unsigned int v5 = v9;
        }
        break;
      default:
        break;
    }
  }
  if (v5 == 1)
  {
    (*(void (**)(_OWORD *))(*(void *)(*(void *)(a3 + 24) - 8) + 32))(a1);
    char v10 = 1;
  }
  else
  {
    char v10 = 0;
    *a1 = *(_OWORD *)a2;
  }
  *((unsigned char *)a1 + v4) = v10;
  return a1;
}

unsigned __int8 *sub_10004C678(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 24);
    uint64_t v6 = *(void *)(v5 - 8);
    if (*(void *)(v6 + 64) <= 0x10uLL) {
      uint64_t v7 = 16;
    }
    else {
      uint64_t v7 = *(void *)(v6 + 64);
    }
    unsigned int v8 = a1[v7];
    unsigned int v9 = v8 - 2;
    if (v8 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v10 = v7;
      }
      else {
        uint64_t v10 = 4;
      }
      switch(v10)
      {
        case 1:
          int v11 = *a1;
          goto LABEL_14;
        case 2:
          int v11 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v11 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v11 = *(_DWORD *)a1;
LABEL_14:
          int v12 = (v11 | (v9 << (8 * v7))) + 2;
          unsigned int v8 = v11 + 2;
          if (v7 < 4) {
            unsigned int v8 = v12;
          }
          break;
        default:
          break;
      }
    }
    if (v8 == 1) {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
    }
    else {
      swift_release();
    }
    unsigned int v13 = a2[v7];
    unsigned int v14 = v13 - 2;
    if (v13 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v15 = v7;
      }
      else {
        uint64_t v15 = 4;
      }
      switch(v15)
      {
        case 1:
          int v16 = *a2;
          goto LABEL_28;
        case 2:
          int v16 = *(unsigned __int16 *)a2;
          goto LABEL_28;
        case 3:
          int v16 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_28;
        case 4:
          int v16 = *(_DWORD *)a2;
LABEL_28:
          int v17 = (v16 | (v14 << (8 * v7))) + 2;
          unsigned int v13 = v16 + 2;
          if (v7 < 4) {
            unsigned int v13 = v17;
          }
          break;
        default:
          break;
      }
    }
    if (v13 == 1)
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v5);
      char v18 = 1;
    }
    else
    {
      char v18 = 0;
      *(_OWORD *)a1 = *(_OWORD *)a2;
    }
    a1[v7] = v18;
  }
  return a1;
}

uint64_t sub_10004C890(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v4 = 16;
  if (*(void *)(v3 + 64) > 0x10uLL) {
    uint64_t v4 = *(void *)(v3 + 64);
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_22;
  }
  uint64_t v5 = v4 + 1;
  char v6 = 8 * (v4 + 1);
  if ((v4 + 1) <= 3)
  {
    unsigned int v9 = ((a2 + ~(-1 << v6) - 254) >> v6) + 1;
    if (HIWORD(v9))
    {
      int v7 = *(_DWORD *)((char *)a1 + v5);
      if (!v7) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v9 > 0xFF)
    {
      int v7 = *(unsigned __int16 *)((char *)a1 + v5);
      if (!*(unsigned __int16 *)((char *)a1 + v5)) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v9 < 2)
    {
LABEL_22:
      unsigned int v11 = *((unsigned __int8 *)a1 + v4);
      if (v11 >= 2) {
        return (v11 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v7 = *((unsigned __int8 *)a1 + v5);
  if (!*((unsigned char *)a1 + v5)) {
    goto LABEL_22;
  }
LABEL_14:
  int v10 = (v7 - 1) << v6;
  if (v5 > 3) {
    int v10 = 0;
  }
  if (v5)
  {
    if (v5 > 3) {
      LODWORD(v5) = 4;
    }
    switch((int)v5)
    {
      case 2:
        LODWORD(v5) = *a1;
        break;
      case 3:
        LODWORD(v5) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v5) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v5) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v5 | v10) + 255;
}

void sub_10004C9C4(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64);
  if (v5 <= 0x10) {
    unint64_t v5 = 16;
  }
  size_t v6 = v5 + 1;
  char v7 = 8 * (v5 + 1);
  if (a3 < 0xFF)
  {
    int v8 = 0;
  }
  else if (v6 <= 3)
  {
    unsigned int v11 = ((a3 + ~(-1 << v7) - 254) >> v7) + 1;
    if (HIWORD(v11))
    {
      int v8 = 4;
    }
    else if (v11 >= 0x100)
    {
      int v8 = 2;
    }
    else
    {
      int v8 = v11 > 1;
    }
  }
  else
  {
    int v8 = 1;
  }
  if (a2 > 0xFE)
  {
    unsigned int v9 = a2 - 255;
    if (v6 < 4)
    {
      int v10 = (v9 >> v7) + 1;
      if (v5 != -1)
      {
        int v12 = v9 & ~(-1 << v7);
        bzero(a1, v6);
        if (v6 == 3)
        {
          *(_WORD *)a1 = v12;
          a1[2] = BYTE2(v12);
        }
        else if (v6 == 2)
        {
          *(_WORD *)a1 = v12;
        }
        else
        {
          *a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v5 + 1);
      *(_DWORD *)a1 = v9;
      int v10 = 1;
    }
    switch(v8)
    {
      case 1:
        a1[v6] = v10;
        break;
      case 2:
        *(_WORD *)&a1[v6] = v10;
        break;
      case 3:
LABEL_34:
        __break(1u);
        JUMPOUT(0x10004CB88);
      case 4:
        *(_DWORD *)&a1[v6] = v10;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v8)
    {
      case 1:
        a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      case 2:
        *(_WORD *)&a1[v6] = 0;
        goto LABEL_22;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      default:
LABEL_22:
        if (a2) {
LABEL_23:
        }
          a1[v5] = -(char)a2;
        break;
    }
  }
}

uint64_t sub_10004CBB0(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a2 + 24) - 8);
  uint64_t v3 = 16;
  if (*(void *)(v2 + 64) > 0x10uLL) {
    uint64_t v3 = *(void *)(v2 + 64);
  }
  uint64_t v4 = a1[v3];
  int v5 = v4 - 2;
  if (v4 >= 2)
  {
    if (v3 <= 3) {
      uint64_t v6 = v3;
    }
    else {
      uint64_t v6 = 4;
    }
    switch(v6)
    {
      case 1:
        int v7 = *a1;
        goto LABEL_12;
      case 2:
        int v7 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v7 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v7 = *(_DWORD *)a1;
LABEL_12:
        unsigned int v8 = (v7 | (v5 << (8 * v3))) + 2;
        LODWORD(v4) = v7 + 2;
        if (v3 >= 4) {
          uint64_t v4 = v4;
        }
        else {
          uint64_t v4 = v8;
        }
        break;
      default:
        return v4;
    }
  }
  return v4;
}

void sub_10004CC68(unsigned char *a1, unsigned int a2, uint64_t a3)
{
  if (*(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64) <= 0x10uLL) {
    size_t v4 = 16;
  }
  else {
    size_t v4 = *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64);
  }
  if (a2 > 1)
  {
    unsigned int v5 = a2 - 2;
    if (v4 < 4)
    {
      unsigned int v6 = v5 >> (8 * v4);
      int v7 = v5 & ~(-1 << (8 * v4));
      a1[v4] = v6 + 2;
      bzero(a1, v4);
      if (v4 == 3)
      {
        *(_WORD *)a1 = v7;
        a1[2] = BYTE2(v7);
      }
      else if (v4 == 2)
      {
        *(_WORD *)a1 = v7;
      }
      else
      {
        *a1 = v7;
      }
    }
    else
    {
      a1[v4] = 2;
      bzero(a1, v4);
      *(_DWORD *)a1 = v5;
    }
  }
  else
  {
    a1[v4] = a2;
  }
}

uint64_t *sub_10004CD40(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

id sub_10004CDD8()
{
  return *(id *)(v0 + OBJC_IVAR____TtC7parsecd22CompressedOutputStream_outputStream);
}

uint64_t sub_10004CE0C()
{
  return *(void *)(v0 + OBJC_IVAR____TtC7parsecd22CompressedOutputStream__uncompressedBytesWritten);
}

uint64_t sub_10004CE40()
{
  return *(void *)(v0 + OBJC_IVAR____TtC7parsecd22CompressedOutputStream__compressedBytesWritten);
}

id sub_10004CE50()
{
  id v1 = [self outputStreamToMemory];
  id v2 = [v0 initWithOutputStream:v1];

  return v2;
}

char *sub_10004CED4(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return sub_10004CF08(a1);
}

char *sub_10004CF08(void *a1)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  *(_DWORD *)&v1[OBJC_IVAR____TtC7parsecd22CompressedOutputStream_status] = 0;
  size_t v4 = v1;
  uint64_t v5 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(void *)(v5 + 16) = 4096;
  bzero((void *)(v5 + 32), 0x1000uLL);
  unsigned int v6 = (uint64_t *)&v4[OBJC_IVAR____TtC7parsecd22CompressedOutputStream_destBuffer];
  *(void *)&v4[OBJC_IVAR____TtC7parsecd22CompressedOutputStream_destBuffer] = v5;
  bzero(&v4[OBJC_IVAR____TtC7parsecd22CompressedOutputStream_shaContext], 0xD0uLL);
  uint64_t v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
  *(void *)(v7 + 16) = 64;
  *(_OWORD *)(v7 + 3sub_100034730((uint64_t)"SIGTERM", 7, 2) = 0u;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  *(_OWORD *)(v7 + 80) = 0u;
  *(void *)&v4[OBJC_IVAR____TtC7parsecd22CompressedOutputStream_digest] = v7;
  *(void *)&v4[OBJC_IVAR____TtC7parsecd22CompressedOutputStream__uncompressedBytesWritten] = 0;
  *(void *)&v4[OBJC_IVAR____TtC7parsecd22CompressedOutputStream__compressedBytesWritten] = 0;
  *(void *)&v4[OBJC_IVAR____TtC7parsecd22CompressedOutputStream_outputStream] = a1;
  sub_1000257C8();
  uint64_t v8 = *v6;
  id v9 = a1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *unsigned int v6 = v8;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    sub_100114CD0(v8);
    uint64_t v8 = v17;
  }
  *unsigned int v6 = v8;
  swift_endAccess();
  unsigned int v11 = &v4[OBJC_IVAR____TtC7parsecd22CompressedOutputStream_stream];
  *(void *)unsigned int v11 = v8 + 32;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + sub_100034730((uint64_t)"SIGINT", 6, 3) = 0;
  *((void *)v11 + 4) = 0;
  *((void *)v11 + sub_100034730((uint64_t)"SIGTERM", 7, 2) = v8 + 32;

  v18.receiver = v4;
  v18.super_class = ObjectType;
  int v12 = (char *)objc_msgSendSuper2(&v18, "initToBuffer:capacity:", v8 + 32, 4096);
  unsigned int v13 = (compression_stream *)&v12[OBJC_IVAR____TtC7parsecd22CompressedOutputStream_stream];
  sub_1000257C8();
  unsigned int v14 = v12;
  LODWORD(v1sub_100034730((uint64_t)"SIGINT", 6, 3) = compression_stream_init(v13, COMPRESSION_STREAM_ENCODE, COMPRESSION_ZLIB);
  swift_endAccess();
  *(_DWORD *)&v14[OBJC_IVAR____TtC7parsecd22CompressedOutputStream_status] = v13;
  uint64_t v15 = (CC_SHA512_CTX *)&v14[OBJC_IVAR____TtC7parsecd22CompressedOutputStream_shaContext];
  sub_1000257C8();
  CC_SHA512_Init(v15);
  swift_endAccess();

  return v14;
}

uint64_t sub_10004D18C()
{
  id v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC7parsecd22CompressedOutputStream_digest);
  swift_beginAccess();
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain();
    sub_1000EE464();
    uint64_t v4 = 0;
    do
    {
      char v5 = *(unsigned char *)(v2 + v4 + 32);
      sub_10002572C((uint64_t *)&unk_10021BB00);
      uint64_t v6 = swift_allocObject();
      *(_OWORD *)(v6 + 16) = xmmword_1001A2A20;
      *(void *)(v6 + 56) = &type metadata for UInt8;
      *(void *)(v6 + 64) = &protocol witness table for UInt8;
      *(unsigned char *)(v6 + 3sub_100034730((uint64_t)"SIGTERM", 7, 2) = v5;
      uint64_t v7 = String.init(format:_:)();
      uint64_t v9 = v8;
      unint64_t v10 = _swiftEmptyArrayStorage[2];
      if (v10 >= _swiftEmptyArrayStorage[3] >> 1) {
        sub_1000EE464();
      }
      ++v4;
      _swiftEmptyArrayStorage[2] = v10 + 1;
      unsigned int v11 = &_swiftEmptyArrayStorage[2 * v10];
      void v11[4] = v7;
      v11[5] = v9;
    }
    while (v3 != v4);
    swift_bridgeObjectRelease();
  }
  sub_10002572C(&qword_100219B08);
  sub_100020DBC();
  uint64_t v12 = BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t sub_10004D334(const uint8_t *a1, size_t a2)
{
  uint64_t v3 = OBJC_IVAR____TtC7parsecd22CompressedOutputStream_status;
  if (*(_DWORD *)(v2 + OBJC_IVAR____TtC7parsecd22CompressedOutputStream_status)) {
    return -1;
  }
  uint64_t v7 = (compression_stream *)(v2 + OBJC_IVAR____TtC7parsecd22CompressedOutputStream_stream);
  swift_beginAccess();
  v7->src_ptr = a1;
  v7->size_t src_size = a2;
  uint64_t v8 = (CC_SHA512_CTX **)(v2 + OBJC_IVAR____TtC7parsecd22CompressedOutputStream_destBuffer);
  sub_1000257C8();
  uint64_t v9 = *v8;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v8 = v9;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_24:
    sub_100114CD0((uint64_t)v9);
    uint64_t v9 = v25;
  }
  v7->dst_ptr = (uint8_t *)&v9->hash[2];
  *uint64_t v8 = v9;
  swift_endAccess();
  v7->size_t dst_size = 4096;
  if ((a2 & 0x8000000000000000) == 0 && !HIDWORD(a2))
  {
    uint64_t v9 = (CC_SHA512_CTX *)(v2 + OBJC_IVAR____TtC7parsecd22CompressedOutputStream_shaContext);
    uint64_t v11 = OBJC_IVAR____TtC7parsecd22CompressedOutputStream__compressedBytesWritten;
    uint64_t v12 = OBJC_IVAR____TtC7parsecd22CompressedOutputStream_outputStream;
    do
    {
      sub_1000257C8();
      CC_SHA512_Update(v9, a1, a2);
      swift_endAccess();
      sub_1000257C8();
      compression_status v13 = compression_stream_process(v7, 0);
      swift_endAccess();
      *(_DWORD *)(v2 + vsub_100034730((uint64_t)"SIGINT", 6, 3) = v13;
      if (v13) {
        break;
      }
      size_t dst_size = v7->dst_size;
      if (dst_size != 4096)
      {
        uint64_t v15 = 4096 - dst_size;
        if (__OFSUB__(4096, dst_size))
        {
          __break(1u);
LABEL_23:
          __break(1u);
          goto LABEL_24;
        }
        if (v15 >= 1)
        {
          uint64_t v16 = *(void *)(v2 + v11);
          BOOL v17 = __OFADD__(v16, v15);
          uint64_t v18 = v16 + v15;
          if (v17) {
            goto LABEL_23;
          }
          *(void *)(v2 + v11) = v18;
        }
        objc_msgSend(*(id *)(v2 + v12), "write:maxLength:", &(*v8)->hash[2]);
        sub_1000257C8();
        uint64_t v19 = (uint64_t)*v8;
        char v20 = swift_isUniquelyReferenced_nonNull_native();
        *uint64_t v8 = (CC_SHA512_CTX *)v19;
        if ((v20 & 1) == 0)
        {
          sub_100114CD0(v19);
          uint64_t v19 = v21;
        }
        v7->dst_ptr = (uint8_t *)(v19 + 32);
        *uint64_t v8 = (CC_SHA512_CTX *)v19;
        swift_endAccess();
        v7->size_t dst_size = 4096;
        if (*(_DWORD *)(v2 + v3)) {
          break;
        }
      }
    }
    while (v7->src_size);
    size_t src_size = v7->src_size;
    uint64_t result = a2 - src_size;
    if (__OFSUB__(a2, src_size))
    {
      __break(1u);
    }
    else
    {
      if (result < 1) {
        return result;
      }
      uint64_t v23 = *(void *)(v2 + OBJC_IVAR____TtC7parsecd22CompressedOutputStream__uncompressedBytesWritten);
      BOOL v17 = __OFADD__(v23, result);
      uint64_t v24 = v23 + result;
      if (!v17)
      {
        *(void *)(v2 + OBJC_IVAR____TtC7parsecd22CompressedOutputStream__uncompressedBytesWritten) = v24;
        return result;
      }
    }
    __break(1u);
  }
  sub_100020C64();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10004D658()
{
  unsigned int v1 = *(_DWORD *)(v0 + OBJC_IVAR____TtC7parsecd22CompressedOutputStream_status) + 1;
  if (v1 > 2) {
    return 0;
  }
  else {
    return *(void *)&asc_1001A3EA0[8 * v1];
  }
}

id sub_10004D6EC()
{
  if (*(_DWORD *)(v0 + OBJC_IVAR____TtC7parsecd22CompressedOutputStream_status) != -1) {
    return 0;
  }
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v4 = v3;
  id v5 = objc_allocWithZone((Class)NSError);
  return sub_1000B06A0(v2, v4, 0, 0);
}

id sub_10004D764()
{
  return [*(id *)(v0 + OBJC_IVAR____TtC7parsecd22CompressedOutputStream_outputStream) open];
}

id sub_10004D7C4()
{
  unsigned int v1 = (compression_stream *)(v0 + OBJC_IVAR____TtC7parsecd22CompressedOutputStream_stream);
  uint64_t v2 = (uint64_t *)(v0 + OBJC_IVAR____TtC7parsecd22CompressedOutputStream_destBuffer);
  uint64_t v3 = OBJC_IVAR____TtC7parsecd22CompressedOutputStream_status;
  swift_beginAccess();
  do
  {
    v1->size_t src_size = 0;
    sub_1000257C8();
    uint64_t v4 = *v2;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v2 = v4;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_100114CD0(v4);
      uint64_t v4 = v19;
      *uint64_t v2 = v19;
    }
    sub_1000257C8();
    v1->dst_ptr = (uint8_t *)(v4 + 32);
    *uint64_t v2 = v4;
    swift_endAccess();
    v1->size_t dst_size = 4096;
    compression_status v6 = compression_stream_process(v1, 1);
    swift_endAccess();
    *(_DWORD *)(v0 + vsub_100034730((uint64_t)"SIGINT", 6, 3) = v6;
    swift_unknownObjectUnownedInit();
    sub_1000257C8();
    uint64_t v7 = *v2;
    char v8 = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v2 = v7;
    if ((v8 & 1) == 0)
    {
      sub_100114CD0(v7);
      uint64_t v7 = v20;
      *uint64_t v2 = v20;
    }
    uint64_t Strong = (char *)swift_unknownObjectUnownedLoadStrong();
    unint64_t v10 = &Strong[OBJC_IVAR____TtC7parsecd22CompressedOutputStream_stream];
    swift_beginAccess();
    uint64_t v11 = *(void *)v10;

    uint64_t v12 = v11 - (v7 + 32);
    if (v12 >= 1)
    {
      compression_status v13 = (char *)swift_unknownObjectUnownedLoadStrong();
      uint64_t v14 = *(void *)&v13[OBJC_IVAR____TtC7parsecd22CompressedOutputStream__compressedBytesWritten];
      BOOL v15 = __OFADD__(v14, v12);
      uint64_t v16 = v14 + v12;
      if (v15)
      {
        __break(1u);
        goto LABEL_13;
      }
      *(void *)&v13[OBJC_IVAR____TtC7parsecd22CompressedOutputStream__compressedBytesWritten] = v16;
    }
    BOOL v17 = (char *)swift_unknownObjectUnownedLoadStrong();
    id v18 = *(id *)&v17[OBJC_IVAR____TtC7parsecd22CompressedOutputStream_outputStream];

    [v18 write:v7 + 32 maxLength:v12];
    *uint64_t v2 = v7;
    swift_endAccess();

    swift_unknownObjectUnownedDestroy();
  }
  while (!*(_DWORD *)(v0 + v3));
  uint64_t v2 = (uint64_t *)(v0 + OBJC_IVAR____TtC7parsecd22CompressedOutputStream_digest);
  sub_1000257C8();
  uint64_t v7 = *v2;
  char v21 = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v2 = v7;
  if (v21) {
    goto LABEL_11;
  }
LABEL_13:
  sub_100114CD0(v7);
  uint64_t v7 = v24;
  *uint64_t v2 = v24;
LABEL_11:
  uint64_t v22 = (CC_SHA512_CTX *)(v0 + OBJC_IVAR____TtC7parsecd22CompressedOutputStream_shaContext);
  sub_1000257C8();
  CC_SHA512_Final((unsigned __int8 *)(v7 + 32), v22);
  swift_endAccess();
  *uint64_t v2 = v7;
  swift_endAccess();
  sub_1000257C8();
  compression_stream_destroy(v1);
  swift_endAccess();
  return [*(id *)(v0 + OBJC_IVAR____TtC7parsecd22CompressedOutputStream_outputStream) close];
}

void sub_10004DABC()
{
}

void sub_10004DAFC()
{
}

void sub_10004DB3C()
{
}

uint64_t type metadata accessor for CompressedOutputStream()
{
  return self;
}

uint64_t EngagedCompletionCacheClient.rawValue.getter(uint64_t result)
{
  return result;
}

uint64_t sub_10004DC5C(char a1)
{
  type metadata accessor for PegasusClientName();
  sub_100020C48();
  __chkstk_darwin(v3);
  sub_100024F80();
  if (a1)
  {
    if (a1 == 1) {
      id v5 = (unsigned int *)&enum case for PegasusClientName.Safari(_:);
    }
    else {
      id v5 = (unsigned int *)&enum case for PegasusClientName.Spotlight(_:);
    }
    (*(void (**)(uint64_t, void))(v4 + 104))(v1, *v5);
    return Client.init(_:)();
  }
  else
  {
    return static Client.unknown.getter();
  }
}

parsecd::EngagedCompletionCacheClient_optional __swiftcall EngagedCompletionCacheClient.init(rawValue:)(Swift::UInt rawValue)
{
  if (rawValue >= 3) {
    LOBYTE(rawValue) = 3;
  }
  return (parsecd::EngagedCompletionCacheClient_optional)rawValue;
}

BOOL sub_10004DD4C(char *a1, char *a2)
{
  return static SQLiteBaseVTab.Style.__derived_enum_equals(_:_:)(*a1, *a2);
}

unint64_t sub_10004DD5C()
{
  unint64_t result = qword_10021A1E0;
  if (!qword_10021A1E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10021A1E0);
  }
  return result;
}

uint64_t sub_10004DDA8()
{
  return sub_1000B3A4C(*v0);
}

uint64_t sub_10004DDB0(uint64_t a1)
{
  return j___s7SQLiter14SQLiteBaseVTabC5StyleO4hash4intoys6HasherVz_tF(a1, *v1);
}

uint64_t sub_10004DDB8(uint64_t a1)
{
  return sub_1000B3F6C(a1, *v1);
}

void SessionDBFeatureFlags.hash(into:)()
{
}

Swift::Int SessionDBFeatureFlags.hashValue.getter()
{
  return Hasher._finalize()();
}

parsecd::EngagedCompletionCacheClient_optional sub_10004DE2C@<W0>(Swift::UInt *a1@<X0>, parsecd::EngagedCompletionCacheClient_optional *a2@<X8>)
{
  result.value = EngagedCompletionCacheClient.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t sub_10004DE58@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EngagedCompletionCacheClient.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

void type metadata accessor for EngagedCompletionCacheClient()
{
}

Swift::Int sub_10004DEA0()
{
  return Hasher._finalize()();
}

uint64_t sub_10004DEE0()
{
  uint64_t v20 = type metadata accessor for URL();
  sub_100020C48();
  uint64_t v19 = v2;
  uint64_t v4 = __chkstk_darwin(v3);
  compression_status v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  char v8 = (char *)&v16 - v7;
  uint64_t v9 = self;
  id v10 = [v9 defaultManager];
  sub_10004E248(v10, (uint64_t)v8);
  if (v1)
  {

    swift_unknownObjectRelease();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v6, v8, v20);
    id v18 = [self defaultCenter];
    id v17 = [v9 defaultManager];
    sub_100017C74();
    uint64_t v11 = (void *)sub_100016A0C();
    swift_unknownObjectRelease();
    uint64_t v12 = sub_100010DE0();
    uint64_t v0 = swift_allocObject();
    sub_10004E420(v6, v18, v17, v11, v12);
    swift_unknownObjectRelease();

    uint64_t v14 = sub_1000251A8();
    v15(v14);
  }
  return v0;
}

unint64_t sub_10004E0DC()
{
  uint64_t v0 = type metadata accessor for Date();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.init()();
  Date.timeIntervalSinceReferenceDate.getter();
  double v5 = v4;
  unint64_t result = (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  if ((~*(void *)&v5 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v5 <= -1.0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v5 < 1.84467441e19) {
    return (unint64_t)v5;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_10004E1E8()
{
  uint64_t result = Date.timeIntervalSinceReferenceDate.getter();
  if ((~*(void *)&v1 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v1 <= -1.0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v1 < 1.84467441e19) {
    return (unint64_t)v1;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_10004E248@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)v14 - v10;
  v14[1] = a1;
  sub_100023FA0(0, (unint64_t *)&qword_10021A2F0);
  uint64_t result = static PegasusConfigContainerURLProvider.containerURL<A>(using:)();
  if (!v2)
  {
    URL.appendingPathComponent(_:)();
    compression_status v13 = *(void (**)(char *, uint64_t))(v6 + 8);
    v13(v9, v5);
    sub_10004F0CC((uint64_t)v11);
    URL.appendingPathComponent(_:)();
    sub_10004F65C(a1, a2);
    return ((uint64_t (*)(char *, uint64_t))v13)(v11, v5);
  }
  return result;
}

uint64_t sub_10004E420(char *a1, void *a2, void *a3, void *a4, uint64_t a5)
{
  uint64_t v73 = a5;
  id v55 = a4;
  uint64_t v71 = a1;
  id v72 = a3;
  id v69 = a2;
  sub_1000242C0();
  v54[1] = v6;
  type metadata accessor for URL();
  sub_100020C48();
  uint64_t v75 = v8;
  uint64_t v76 = v7;
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v67 = (char *)v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v74 = (char *)v54 - v11;
  sub_10002572C(&qword_10021A2D8);
  swift_allocObject();
  *(void *)(v5 + 16) = sub_10010FD74(2592000.0);
  uint64_t v70 = sub_100023FA0(0, (unint64_t *)&qword_100219250);
  uint64_t v12 = type metadata accessor for DispatchQoS();
  uint64_t v65 = *(void *)(*(void *)(v12 - 8) + 64);
  __chkstk_darwin(v12 - 8);
  unint64_t v66 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v58 = (char *)v54 - v66;
  static DispatchQoS.userInitiated.getter();
  uint64_t v62 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v14 = *(void *)(v62 - 8);
  uint64_t v63 = *(void *)(v14 + 64);
  __chkstk_darwin(v62);
  int v64 = (char *)((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  unsigned int v61 = enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:);
  uint64_t v60 = *(void (**)(int64_t))(v14 + 104);
  v60((char *)v54 - v64);
  type metadata accessor for OS_dispatch_queue.Attributes();
  sub_10001DCF8();
  uint64_t v17 = *(void *)(v16 + 64);
  __chkstk_darwin(v18);
  unint64_t v59 = (v17 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v78 = (char *)_swiftEmptyArrayStorage;
  uint64_t v57 = sub_10002FFEC((unint64_t *)&qword_10021BFF0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  uint64_t v56 = sub_10002572C(&qword_10021A2E0);
  sub_100057EEC((unint64_t *)&qword_10021C000, &qword_10021A2E0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  sub_10000E090();
  uint64_t v19 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(void *)(v5 + 3sub_100034730((uint64_t)"SIGTERM", 7, 2) = v19;
  __chkstk_darwin(v19);
  uint64_t v20 = static DispatchQoS.userInitiated.getter();
  __chkstk_darwin(v20);
  uint64_t v21 = ((uint64_t (*)(int64_t, void, uint64_t))v60)((char *)v54 - v64, v61, v62);
  __chkstk_darwin(v21);
  uint64_t v78 = (char *)_swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  sub_10000E090();
  uint64_t v22 = v76;
  *(void *)(v5 + 40) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  type metadata accessor for Locker();
  uint64_t v23 = swift_allocObject();
  uint64_t v24 = (_DWORD *)swift_slowAlloc();
  *(void *)(v23 + 16) = v24;
  *uint64_t v24 = 0;
  *(void *)(v5 + 48) = v23;
  id v25 = [objc_allocWithZone((Class)PARSmartSearchV1Parameters) init];
  id v26 = [objc_allocWithZone((Class)PARSmartSearchV2Parameters) init];
  *(void *)(v5 + 56) = v25;
  *(void *)(v5 + 64) = v26;
  *(_OWORD *)(v5 + 7sub_100034730((uint64_t)"SIGTERM", 7, 2) = xmmword_1001A3F10;
  *(void *)(v5 + 24) = v73;
  uint64_t v70 = v5;
  uint64_t v27 = *(void (**)(void))(v75 + 16);
  unint64_t v66 = v5 + OBJC_IVAR____TtC7parsecd25EngagedCompletionSQLCache_dbURL;
  int64_t v28 = v71;
  sub_100018498();
  v27();
  swift_retain();
  unint64_t v29 = v28;
  URL.path.getter();
  NSString v30 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unsigned int v31 = [v72 fileExistsAtPath:v30];

  if (qword_100218B68 != -1) {
    swift_once();
  }
  uint64_t v32 = type metadata accessor for Logger();
  sub_10002A10C(v32, (uint64_t)qword_100236A50);
  os_log_type_t v33 = static os_log_type_t.default.getter();
  sub_100018498();
  v27();
  unint64_t v34 = Logger.logObject.getter();
  os_log_type_t v35 = v33;
  BOOL v36 = os_log_type_enabled(v34, v33);
  LODWORD(v65) = v31;
  if (v36)
  {
    uint64_t v37 = swift_slowAlloc();
    int v64 = (char *)swift_slowAlloc();
    uint64_t v78 = v64;
    *(_DWORD *)uint64_t v37 = 136315394;
    if (v31) {
      uint64_t v38 = 0x697865206E65706FLL;
    }
    else {
      uint64_t v38 = 0x6E20657461657263;
    }
    if (v31) {
      unint64_t v39 = 0xED0000676E697473;
    }
    else {
      unint64_t v39 = 0xEA00000000007765;
    }
    uint64_t v77 = sub_10001C274(v38, v39, (uint64_t *)&v78);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v37 + 1sub_100034730((uint64_t)"SIGTERM", 7, 2) = 2080;
    sub_100057D54();
    uint64_t v40 = v27;
    uint64_t v41 = v74;
    uint64_t v42 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v77 = sub_10001C274(v42, v43, (uint64_t *)&v78);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v44 = *(void (**)(char *, uint64_t))(v75 + 8);
    uint64_t v45 = v41;
    uint64_t v27 = v40;
    v44(v45, v76);
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "ECC will %s DB at %s.", (uint8_t *)v37, 0x16u);
    swift_arrayDestroy();
    unint64_t v29 = v71;
    swift_slowDealloc();
    uint64_t v22 = v76;
    swift_slowDealloc();
  }
  else
  {
    uint64_t v44 = *(void (**)(char *, uint64_t))(v75 + 8);
    v44(v74, v22);
  }

  uint64_t v46 = (uint64_t)v67;
  sub_100018498();
  v27();
  type metadata accessor for SQLiteDatabase();
  swift_allocObject();
  uint64_t v47 = v68;
  uint64_t v48 = SQLiteDatabase.init(_:readOnly:requiresAuthentication:)(v46, 0, 0);
  id v49 = v69;
  if (v47)
  {

    swift_release();
    v44(v29, v22);
    uint64_t v50 = v70;
    swift_release();
    swift_release();

    swift_release();
    uint64_t v51 = *(void **)(v50 + 56);

    v44((char *)v66, v22);
    swift_deallocPartialClassInstance();
  }
  else
  {
    uint64_t v50 = v70;
    *(void *)(v70 + OBJC_IVAR____TtC7parsecd25EngagedCompletionSQLCache_database) = v48;
    sub_10004ED5C(v65 ^ 1);
    [v49 addObserver:v50 selector:"bagChangeNotificationWithNotification:" name:@"PARBagChangeNotification" object:0];
    if (v55)
    {
      id v52 = v55;
      sub_10004EDD0(v52);
      sub_10004EEF8(v52);

      swift_release();
    }
    else
    {

      swift_release();
    }
    v44(v29, v22);
  }
  return v50;
}

uint64_t sub_10004ED5C(char a1)
{
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC7parsecd25EngagedCompletionSQLCache_database);
  v4[16] = a1;
  return (*(uint64_t (**)(void *(*)(), unsigned char *))(*(void *)v2 + 192))(sub_100057DA4, v4);
}

void sub_10004EDD0(void *a1)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1[6] + 16);
  os_unfair_lock_lock(v3);
  id v4 = objc_allocWithZone((Class)PARSmartSearchV1Parameters);
  id v5 = a1;
  id v6 = [v4 initFromBag:v5];
  id v7 = [objc_allocWithZone((Class)PARSmartSearchV2Parameters) initFromBag:v5];

  unint64_t v8 = (unint64_t)[v5 smartHistoryMaxRows];
  if ((v8 & 0x8000000000000000) != 0
    || (unint64_t v9 = v8, v10 = (unint64_t)[v5 smartHistoryTimeout], (v10 & 0x8000000000000000) != 0))
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t v12 = (void *)v1[7];
    uint64_t v11 = (void *)v1[8];
    v1[7] = v6;
    v1[8] = v7;
    v1[9] = v9;
    v1[10] = v10;

    os_unfair_lock_unlock(v3);
  }
}

id sub_10004EEF8(void *a1)
{
  id result = [a1 zkwRecentsExpiration];
  if (result)
  {
    uint64_t v2 = result;
    [result doubleValue];
    double v4 = v3;

    swift_retain();
    sub_100082184(v4);
    return (id)swift_release();
  }
  return result;
}

void sub_10004EF84(void *a1)
{
  uint64_t v1 = sub_1000CCB2C(a1);
  if (!v1)
  {
    long long v5 = 0u;
    long long v6 = 0u;
    goto LABEL_6;
  }
  uint64_t v2 = v1;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  AnyHashable.init<A>(_:)();
  sub_100039D58((uint64_t)v4, v2, &v5);
  swift_bridgeObjectRelease();
  sub_100039C5C((uint64_t)v4);
  if (!*((void *)&v6 + 1))
  {
LABEL_6:
    sub_1000255D4((uint64_t)&v5, (uint64_t *)&unk_10021BB30);
    return;
  }
  sub_100023FA0(0, (unint64_t *)&qword_10021D040);
  if (swift_dynamicCast())
  {
    double v3 = v4[0];
    sub_10004EDD0(v4[0]);
    sub_10004EEF8(v3);
  }
}

void sub_10004F0CC(uint64_t a1)
{
  double v3 = v2;
  double v4 = v1;
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  unint64_t v10 = (char *)v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)v39 - v11;
  char v45 = 0;
  URL.path.getter();
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v43 = v4;
  unsigned int v14 = [v4 fileExistsAtPath:v13 isDirectory:&v45];

  if (v14)
  {
    if (v45) {
      return;
    }
    uint64_t v42 = v10;
    if (qword_100218B68 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_10002A10C(v15, (uint64_t)qword_100236A50);
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v12, a1, v6);
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      uint64_t v40 = (void *)swift_slowAlloc();
      id v46 = v40;
      uint64_t v41 = v7;
      *(_DWORD *)uint64_t v18 = 136315138;
      v39[1] = v18 + 4;
      sub_100057D54();
      uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v44 = sub_10001C274(v19, v20, (uint64_t *)&v46);
      double v3 = v2;
      uint64_t v7 = v41;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "ECC expected a directory but found a regular file at %s.", v18, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
    }

    URL._bridgeToObjectiveC()(v21);
    uint64_t v23 = v22;
    id v46 = 0;
    unsigned int v24 = [v43 removeItemAtURL:v22 error:&v46];

    id v25 = v46;
    unint64_t v10 = v42;
    if (!v24) {
      goto LABEL_17;
    }
    id v26 = v46;
  }
  if (qword_100218B68 != -1) {
    swift_once();
  }
  uint64_t v27 = type metadata accessor for Logger();
  sub_10002A10C(v27, (uint64_t)qword_100236A50);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, a1, v6);
  int64_t v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v28, v29))
  {
    NSString v30 = v10;
    unsigned int v31 = (uint8_t *)swift_slowAlloc();
    uint64_t v32 = (void *)swift_slowAlloc();
    uint64_t v42 = v3;
    id v46 = v32;
    uint64_t v41 = a1;
    *(_DWORD *)unsigned int v31 = 136315138;
    uint64_t v40 = v31 + 4;
    sub_100057D54();
    uint64_t v33 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v44 = sub_10001C274(v33, v34, (uint64_t *)&v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v30, v6);
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "ECC creating db dir at path %s", v31, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }

  URL.path.getter();
  NSString v35 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v46 = 0;
  unsigned int v36 = [v43 createDirectoryAtPath:v35 withIntermediateDirectories:1 attributes:0 error:&v46];

  id v25 = v46;
  if (v36)
  {
    id v37 = v46;
    return;
  }
LABEL_17:
  id v38 = v25;
  _convertNSErrorToError(_:)();

  swift_willThrow();
}

uint64_t sub_10004F65C(void *a1, uint64_t a2)
{
  uint64_t v45 = a2;
  uint64_t v3 = sub_10002572C(&qword_10021BB20);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)v43 - v7;
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  NSString v13 = (char *)v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)v43 - v14;
  NSFileManager.parsecdAssetsDirectoryURL.getter();
  if (sub_100027BA4((uint64_t)v6, 1, v9) == 1)
  {
    sub_1000255D4((uint64_t)v6, &qword_10021BB20);
    sub_10002538C((uint64_t)v8, 1, 1, v9);
LABEL_4:
    sub_1000255D4((uint64_t)v8, &qword_10021BB20);
    sub_100057E60();
    swift_allocError();
    return swift_willThrow();
  }
  URL.appendingPathComponent(_:)();
  uint64_t v44 = *(void (**)(char *, uint64_t))(v10 + 8);
  v44(v6, v9);
  sub_10002538C((uint64_t)v8, 0, 1, v9);
  if (sub_100027BA4((uint64_t)v8, 1, v9) == 1) {
    goto LABEL_4;
  }
  v43[1] = v10 + 8;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v15, v8, v9);
  URL.appendingPathComponent(_:)();
  URL.path(percentEncoded:)(1);
  NSString v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unsigned __int8 v18 = [a1 fileExistsAtPath:v17];

  URL.path(percentEncoded:)(1);
  NSString v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unsigned int v20 = [a1 fileExistsAtPath:v19];

  if (v18)
  {
    if (!v20)
    {
LABEL_9:
      if (qword_100218B68 != -1) {
        swift_once();
      }
      uint64_t v26 = type metadata accessor for Logger();
      sub_10002A10C(v26, (uint64_t)qword_100236A50);
      uint64_t v27 = Logger.logObject.getter();
      os_log_type_t v28 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v27, v28))
      {
        os_log_type_t v29 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v29 = 0;
        _os_log_impl((void *)&_mh_execute_header, v27, v28, "ECC migration not needed.", v29, 2u);
        swift_slowDealloc();
      }

      goto LABEL_19;
    }
    URL.path(percentEncoded:)(1);
    NSString v22 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v46 = 0;
    unsigned int v23 = [a1 removeItemAtPath:v22 error:&v46];

    id v24 = v46;
    if (v23)
    {
      id v25 = v46;
      goto LABEL_9;
    }
    goto LABEL_18;
  }
  if (v20)
  {
    URL._bridgeToObjectiveC()(v21);
    unsigned int v31 = v30;
    URL._bridgeToObjectiveC()(v32);
    unint64_t v34 = v33;
    id v46 = 0;
    unsigned int v35 = [a1 copyItemAtURL:v31 toURL:v33 error:&v46];

    id v24 = v46;
    if (!v35) {
      goto LABEL_18;
    }
    id v36 = v46;
    URL.path(percentEncoded:)(1);
    NSString v37 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v46 = 0;
    unsigned int v38 = [a1 removeItemAtPath:v37 error:&v46];

    id v24 = v46;
    if (!v38)
    {
LABEL_18:
      id v40 = v24;
      _convertNSErrorToError(_:)();

      swift_willThrow();
      goto LABEL_19;
    }
    id v39 = v46;
  }
LABEL_19:
  uint64_t v41 = v13;
  uint64_t v42 = (uint64_t (*)(char *, uint64_t))v44;
  v44(v41, v9);
  return v42(v15, v9);
}

uint64_t sub_10004FB8C()
{
  swift_release();
  swift_release();

  swift_release();
  uint64_t v1 = *(void **)(v0 + 56);

  uint64_t v2 = v0 + OBJC_IVAR____TtC7parsecd25EngagedCompletionSQLCache_dbURL;
  type metadata accessor for URL();
  sub_10001DCF8();
  (*(void (**)(uint64_t))(v3 + 8))(v2);
  swift_release();
  return v0;
}

uint64_t sub_10004FC2C()
{
  sub_10004FB8C();
  sub_1000242C0();
  uint64_t v2 = *(unsigned int *)(v1 + 48);
  uint64_t v3 = *(unsigned __int16 *)(v1 + 52);

  return _swift_deallocClassInstance(v0, v2, v3);
}

uint64_t sub_10004FC64()
{
  return type metadata accessor for EngagedCompletionSQLCache(0);
}

uint64_t type metadata accessor for EngagedCompletionSQLCache(uint64_t a1)
{
  return sub_100027D28(a1, qword_10021A218);
}

uint64_t sub_10004FC8C()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

void sub_10004FD48(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
}

uint64_t sub_10004FD84(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  id v5 = v3;
  id v6 = v4;
  return a1;
}

uint64_t sub_10004FDC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  uint64_t v7 = *(void **)(a2 + 8);
  uint64_t v8 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v7;
  id v9 = v7;

  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  return a1;
}

uint64_t sub_10004FE28(uint64_t a1, _OWORD *a2)
{
  uint64_t v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  *(_OWORD *)(a1 + 16) = a2[1];
  return a1;
}

uint64_t getEnumTagSinglePayload for SQLiteAttributedMessage(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 32))
    {
      LODWORD(vsub_100034730((uint64_t)"SIGTERM", 7, 2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(vsub_100034730((uint64_t)"SIGTERM", 7, 2) = -1;
      }
    }
  }
  else
  {
    LODWORD(vsub_100034730((uint64_t)"SIGTERM", 7, 2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SQLiteAttributedMessage(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 3sub_100034730((uint64_t)"SIGTERM", 7, 2) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 3sub_100034730((uint64_t)"SIGTERM", 7, 2) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for EngagedCompletionSQLCache.Params()
{
}

void sub_10004FEFC(void *a1, void *a2)
{
  id v5 = *(os_unfair_lock_s **)(v2[6] + 16);
  os_unfair_lock_lock(v5);
  id v6 = (void *)v2[7];
  uint64_t v7 = (void *)v2[8];
  v2[7] = a1;
  v2[8] = a2;
  id v8 = a1;
  id v9 = a2;

  os_unfair_lock_unlock(v5);
}

uint64_t sub_10004FF60(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v9 = type metadata accessor for ECCQuery(0);
  uint64_t v10 = (int *)(v9 - 8);
  __chkstk_darwin(v9);
  sub_100017DE0();
  *(void *)uint64_t v4 = a1;
  *(void *)(v4 + 8) = a2;
  *(unsigned char *)(v4 + 16) = a3;
  *(void *)(v4 + 24) = a4;
  *(_WORD *)(v4 + 3sub_100034730((uint64_t)"SIGTERM", 7, 2) = 1;
  *(unsigned char *)(v4 + 34) = 0;
  uint64_t v11 = v4 + v10[12];
  uint64_t v12 = type metadata accessor for Date();
  sub_10002538C(v11, 1, 1, v12);
  *(unsigned char *)(v4 + v10[13]) = 0;
  *(unsigned char *)(v4 + v10[14]) = 1;
  *(unsigned char *)(v4 + v10[15]) = 1;
  swift_bridgeObjectRetain();
  sub_100050054();
  uint64_t v14 = v13;
  sub_100040614(v4);
  return v14;
}

void sub_100050054()
{
  sub_10000DFE0();
  uint64_t v3 = v2;
  uint64_t v4 = type metadata accessor for ECCQuery(0);
  uint64_t v5 = sub_100024920(v4);
  uint64_t v71 = v6;
  id v8 = *(NSObject **)(v7 + 64);
  uint64_t v9 = __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v59 - (((unint64_t)&v8[1].isa + 7) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v59 - v11;
  uint64_t v13 = type metadata accessor for DispatchPredicate();
  sub_100020C48();
  uint64_t v15 = v14;
  __chkstk_darwin(v16);
  sub_100020C78();
  NSString v17 = (void *)v0[4];
  void *v1 = v17;
  (*(void (**)(void *, void, uint64_t))(v15 + 104))(v1, enum case for DispatchPredicate.notOnQueue(_:), v13);
  id v18 = v17;
  uint64_t v19 = _dispatchPreconditionTest(_:)();
  uint64_t v20 = v15 + 8;
  sub_100018488();
  uint64_t v22 = v21();
  if ((v19 & 1) == 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (*(unsigned char *)(v3 + 32) == 1)
  {
    unsigned int v61 = (uint64_t *)((char *)&v59 - (((unint64_t)&v8[1].isa + 7) & 0xFFFFFFFFFFFFFFF0));
    uint64_t v23 = swift_allocObject();
    uint64_t v70 = (uint64_t *)v23;
    *(void *)(v23 + 16) = _swiftEmptyArrayStorage;
    uint64_t v62 = v23 + 16;
    id v24 = *(os_unfair_lock_s **)(v0[6] + 16);
    swift_retain();
    os_unfair_lock_lock(v24);
    id v25 = (void *)v0[7];
    uint64_t v26 = (void *)v0[8];
    uint64_t v69 = v0[10];
    id v27 = v25;
    id v28 = v26;
    os_unfair_lock_unlock(v24);

    swift_release();
    dispatch_group_t v29 = dispatch_group_create();
    dispatch_group_t v63 = v29;
    uint64_t v66 = type metadata accessor for DispatchQoS();
    uint64_t v67 = &v59;
    sub_100020C48();
    id v64 = v18;
    uint64_t v31 = v30;
    __chkstk_darwin(v32);
    sub_100021208();
    uint64_t v68 = v29;
    static DispatchQoS.userInitiated.getter();
    uint64_t v33 = type metadata accessor for DispatchWorkItemFlags();
    uint64_t v65 = &v59;
    sub_100020C48();
    uint64_t v34 = v3;
    uint64_t v36 = v35;
    __chkstk_darwin(v37);
    sub_100017DC8();
    static DispatchWorkItemFlags.assignCurrentContext.getter();
    uint64_t v60 = v34;
    sub_100058370(v34, (uint64_t)v12);
    unint64_t v38 = (*((unsigned __int8 *)v71 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v71 + 80);
    uint64_t v39 = swift_allocObject();
    id v40 = v70;
    *(void *)(v39 + 16) = v70;
    *(void *)(v39 + 24) = v0;
    sub_1000584E8((uint64_t)v12, v39 + v38);
    v73[4] = (uint64_t)sub_10005854C;
    v73[5] = v39;
    v73[0] = (uint64_t)_NSConcreteStackBlock;
    v73[1] = 1107296256;
    v73[2] = (uint64_t)sub_1000085EC;
    v73[3] = (uint64_t)&unk_1001FC020;
    uint64_t v12 = (char *)_Block_copy(v73);
    swift_retain();
    swift_retain();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v12);
    id v8 = v68;

    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v20, v33);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v10, v66);
    swift_release();
    uint64_t v3 = type metadata accessor for DispatchTime();
    uint64_t v71 = &v59;
    sub_100020C48();
    uint64_t v42 = v41;
    __chkstk_darwin(v43);
    sub_100016568();
    __chkstk_darwin(v44);
    id v46 = (char *)&v59 - v45;
    static DispatchTime.now()();
    uint64_t v47 = type metadata accessor for DispatchTimeInterval();
    sub_100020C48();
    uint64_t v19 = v48;
    __chkstk_darwin(v49);
    sub_100020C78();
    if ((v69 & 0x8000000000000000) == 0)
    {
      *id v40 = v69;
      (*(void (**)(uint64_t *, void, uint64_t))(v19 + 104))(v40, enum case for DispatchTimeInterval.milliseconds(_:), v47);
      + infix(_:_:)();
      uint64_t v50 = sub_1000253F4();
      v51(v50);
      uint64_t v19 = *(void *)(v42 + 8);
      ((void (*)(char *, uint64_t))v19)(v46, v3);
      OS_dispatch_group.wait(timeout:)();
      if ((static DispatchTimeoutResult.== infix(_:_:)() & 1) == 0)
      {
        ((void (*)(char *, uint64_t))v19)(v12, v3);

LABEL_12:
        swift_beginAccess();
        swift_bridgeObjectRetain();
        swift_release();
        goto LABEL_13;
      }
      if (qword_100218B68 == -1)
      {
LABEL_6:
        uint64_t v52 = type metadata accessor for Logger();
        sub_10002A10C(v52, (uint64_t)qword_100236A50);
        os_log_type_t v53 = v61;
        sub_100058370(v60, (uint64_t)v61);
        int v54 = Logger.logObject.getter();
        os_log_type_t v55 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v54, v55))
        {
          uint64_t v56 = swift_slowAlloc();
          uint64_t v67 = (uint64_t *)swift_slowAlloc();
          v73[0] = (uint64_t)v67;
          *(_DWORD *)uint64_t v56 = 136643075;
          uint64_t v66 = v56 + 4;
          uint64_t v57 = *v53;
          unint64_t v58 = v53[1];
          swift_bridgeObjectRetain();
          uint64_t v72 = sub_10001C274(v57, v58, v73);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_100040614((uint64_t)v53);
          *(_WORD *)(v56 + 1sub_100034730((uint64_t)"SIGTERM", 7, 2) = 2048;
          uint64_t v72 = v69;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v54, v55, "ECC search timed out for input %{sensitive}s timeout value %lu", (uint8_t *)v56, 0x16u);
          swift_arrayDestroy();
          sub_100017D40();
          sub_100017D40();
        }
        else
        {

          sub_100040614((uint64_t)v53);
        }
        ((void (*)(char *, uint64_t))v19)(v12, v3);
        goto LABEL_12;
      }
LABEL_16:
      swift_once();
      goto LABEL_6;
    }
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  __chkstk_darwin(v22);
  *(&v59 - sub_100034730((uint64_t)"SIGTERM", 7, 2) = (uint64_t)v0;
  *(&v59 - 1) = v3;
  sub_10002572C(&qword_10021A318);
  OS_dispatch_queue.sync<A>(execute:)();
LABEL_13:
  sub_10000DFB8();
}

void sub_1000507BC()
{
  sub_10000DFE0();
  unint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  char v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t v12 = *v1;
  uint64_t v13 = swift_allocObject();
  *(unsigned char *)(v13 + 16) = v7;
  *(void *)(v13 + 24) = v11;
  *(void *)(v13 + 3sub_100034730((uint64_t)"SIGTERM", 7, 2) = v9;
  *(void *)(v13 + 40) = v1;
  *(void *)(v13 + 48) = v5;
  *(void *)(v13 + 56) = v3;
  *(void *)(v13 + 64) = v12;
  v20[4] = sub_1000582C4;
  void v20[5] = v13;
  v20[0] = _NSConcreteStackBlock;
  sub_1000263FC(COERCE_DOUBLE(1107296256));
  _OWORD v20[2] = sub_1000085EC;
  v20[3] = &unk_1001FBFA8;
  _Block_copy(v20);
  sub_100021C80();
  sub_100020C48();
  __chkstk_darwin(v14);
  sub_10000E09C();
  swift_retain();
  sub_100030358(v5);
  static DispatchQoS.unspecified.getter();
  type metadata accessor for DispatchWorkItemFlags();
  sub_100020C48();
  __chkstk_darwin(v15);
  sub_100017DE0();
  sub_10002FFEC((unint64_t *)&qword_100219260, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10002572C((uint64_t *)&unk_10021BAF0);
  sub_100057EEC((unint64_t *)&qword_100219270, (uint64_t *)&unk_10021BAF0);
  sub_10002581C();
  sub_10002AC80();
  _Block_release(v11);
  uint64_t v16 = sub_100017DF8();
  v17(v16);
  uint64_t v18 = sub_100024908();
  v19(v18);
  swift_release();
  sub_10000DFB8();
}

void sub_1000509C8()
{
}

void sub_1000509F0()
{
}

void sub_100050A18()
{
  sub_10000DFE0();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = v0;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  char v11 = v10;
  uint64_t v13 = v12;
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = v13;
  *(void *)(v14 + 24) = v5;
  *(unsigned char *)(v14 + 3sub_100034730((uint64_t)"SIGTERM", 7, 2) = v11;
  *(void *)(v14 + 40) = v9;
  *(void *)(v14 + 48) = v7;
  v21[4] = v4;
  void v21[5] = v14;
  v21[0] = _NSConcreteStackBlock;
  sub_1000263FC(COERCE_DOUBLE(1107296256));
  void v21[2] = sub_1000085EC;
  uint64_t v21[3] = v2;
  _Block_copy(v21);
  sub_100021C80();
  sub_100020C48();
  __chkstk_darwin(v15);
  sub_10000E09C();
  swift_retain();
  sub_100030358(v9);
  static DispatchQoS.unspecified.getter();
  type metadata accessor for DispatchWorkItemFlags();
  sub_100020C48();
  __chkstk_darwin(v16);
  sub_100017DE0();
  sub_10002FFEC((unint64_t *)&qword_100219260, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10002572C((uint64_t *)&unk_10021BAF0);
  sub_100057EEC((unint64_t *)&qword_100219270, (uint64_t *)&unk_10021BAF0);
  sub_10002581C();
  sub_10002AC80();
  _Block_release(v4);
  uint64_t v17 = sub_100017DF8();
  v18(v17);
  uint64_t v19 = sub_100024908();
  v20(v19);
  swift_release();
  sub_10000DFB8();
}

void sub_100050BE0()
{
  sub_10000DFE0();
  int v30 = v1;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = (const void *)type metadata accessor for Date();
  sub_100020C48();
  uint64_t v8 = v7;
  uint64_t v10 = *(void *)(v9 + 64);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v13 = &v29[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v12);
  uint64_t v15 = &v29[-v14];
  uint64_t v31 = *(void *)(v0 + 32);
  uint64_t v16 = *(void (**)(unsigned char *, uint64_t, const void *))(v8 + 16);
  v16(&v29[-v14], v5, v6);
  v16(v13, v3, v6);
  uint64_t v17 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v18 = (v17 + 24) & ~v17;
  uint64_t v19 = (v10 + v17 + v18) & ~v17;
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = v0;
  uint64_t v21 = v20 + v18;
  uint64_t v22 = *(void (**)(uint64_t, unsigned char *, const void *))(v8 + 32);
  v22(v21, v15, v6);
  v22(v20 + v19, v13, v6);
  *(unsigned char *)(v20 + v19 + v10) = v30;
  unsigned char v33[4] = sub_100058200;
  v33[5] = v20;
  v33[0] = _NSConcreteStackBlock;
  sub_1000263FC(COERCE_DOUBLE(1107296256));
  v33[2] = sub_1000085EC;
  v33[3] = &unk_1001FBF58;
  _Block_copy(v33);
  sub_100021C80();
  sub_100020C48();
  __chkstk_darwin(v23);
  sub_100017DC8();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  type metadata accessor for DispatchWorkItemFlags();
  sub_100020C48();
  __chkstk_darwin(v24);
  sub_100017DE0();
  uint64_t v32 = _swiftEmptyArrayStorage;
  sub_10002FFEC((unint64_t *)&qword_100219260, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10002572C((uint64_t *)&unk_10021BAF0);
  sub_100057EEC((unint64_t *)&qword_100219270, (uint64_t *)&unk_10021BAF0);
  sub_10002581C();
  sub_10002AC80();
  _Block_release(v6);
  uint64_t v25 = sub_100017DF8();
  v26(v25);
  uint64_t v27 = sub_100024908();
  v28(v27);
  swift_release();
  sub_10000DFB8();
}

void sub_100050EA4()
{
  sub_10000DFE0();
  uint64_t v1 = v0;
  char v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v10 = swift_allocObject();
  *(_DWORD *)(v10 + 16) = v5;
  *(unsigned char *)(v10 + 20) = BYTE4(v5) & 1;
  *(void *)(v10 + 24) = v1;
  *(unsigned char *)(v10 + 3sub_100034730((uint64_t)"SIGTERM", 7, 2) = v3;
  *(void *)(v10 + 40) = v9;
  *(void *)(v10 + 48) = v7;
  void v17[4] = sub_100058114;
  v17[5] = v10;
  v17[0] = _NSConcreteStackBlock;
  sub_1000263FC(COERCE_DOUBLE(1107296256));
  void v17[2] = sub_1000085EC;
  v17[3] = &unk_1001FBF08;
  _Block_copy(v17);
  sub_100021C80();
  sub_100020C48();
  __chkstk_darwin(v11);
  sub_100017DC8();
  swift_retain();
  swift_bridgeObjectRetain();
  static DispatchQoS.unspecified.getter();
  type metadata accessor for DispatchWorkItemFlags();
  sub_100020C48();
  __chkstk_darwin(v12);
  sub_100017DE0();
  sub_10002FFEC((unint64_t *)&qword_100219260, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10002572C((uint64_t *)&unk_10021BAF0);
  sub_100057EEC((unint64_t *)&qword_100219270, (uint64_t *)&unk_10021BAF0);
  sub_10002581C();
  sub_10002AC80();
  _Block_release(v5);
  uint64_t v13 = sub_100017DF8();
  v14(v13);
  uint64_t v15 = sub_100024908();
  v16(v15);
  swift_release();
  sub_10000DFB8();
}

uint64_t sub_100051088(unsigned __int8 a1)
{
  *(void *)&long long v9 = 0xE000000000000000;
  _StringGuts.grow(_:)(59);
  sub_10000E090();
  v2._uint64_t countAndFlagsBits = 0xD000000000000038;
  String.append(_:)(v2);
  *(void *)&long long v10 = a1;
  v3._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  object = v3._object;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v5._uint64_t countAndFlagsBits = 59;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  sub_100017E10();
  sub_100027DB4();
  v6();
  if (object)
  {
    swift_errorRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    SQLiteStatement.execute()();
    if (v8) {
      swift_errorRelease();
    }
    swift_release();
    long long v10 = v9;
    return sub_100057E18((uint64_t)&v10);
  }
}

void *sub_1000511B8(char a1)
{
  if (qword_100218B68 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10002A10C(v2, (uint64_t)qword_100236A50);
  Swift::String v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    Swift::String v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)Swift::String v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "ECC database opened.", v5, 2u);
    swift_slowDealloc();
  }

  if (a1)
  {
    os_log_type_t v6 = static os_log_type_t.default.getter();
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = v6;
    if (os_log_type_enabled(v7, v6))
    {
      long long v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)long long v9 = 0;
      long long v10 = "ECC creating schema for new db";
LABEL_15:
      _os_log_impl((void *)&_mh_execute_header, v7, v8, v10, v9, 2u);
      swift_slowDealloc();
      goto LABEL_16;
    }
    goto LABEL_16;
  }
  uint64_t result = (void *)sub_1000515E8();
  if (!(_BYTE)result) {
    return result;
  }
  if (result != 1)
  {
    os_log_type_t v15 = static os_log_type_t.default.getter();
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = v15;
    if (os_log_type_enabled(v7, v15))
    {
      long long v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)long long v9 = 0;
      long long v10 = "ECC recovering schema from old version";
      goto LABEL_15;
    }
LABEL_16:

    return (void *)sub_100051428();
  }
  os_log_type_t v12 = static os_log_type_t.default.getter();
  uint64_t v13 = Logger.logObject.getter();
  if (os_log_type_enabled(v13, v12))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v12, "ECC upgrading schema", v14, 2u);
    swift_slowDealloc();
  }

  return sub_100051918();
}

uint64_t sub_100051428()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v10 = 0;
  Swift::String v3 = v0[4];
  uint64_t v4 = v2;
  Swift::String v5 = (void *)swift_allocObject();
  uint64_t v5[2] = v1;
  v5[3] = &v10;
  v5[4] = v4;
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = sub_100057DFC;
  *(void *)(v6 + 24) = v5;
  aBlock[4] = sub_100017874;
  aBlock[5] = v6;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100017848;
  id aBlock[3] = &unk_1001FBD78;
  uint64_t v7 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v3, v7);
  _Block_release(v7);
  LOBYTE(vsub_100034730((uint64_t)"SIGINT", 6, 3) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v3)
  {
    __break(1u);
  }
  else
  {
    if (v10)
    {
      swift_errorRetain();
      swift_willThrow();
      swift_errorRelease();
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_1000515E8()
{
  (*(void (**)(uint64_t *__return_ptr, unint64_t, unint64_t, void))(**(void **)(v0 + OBJC_IVAR____TtC7parsecd25EngagedCompletionSQLCache_database)
                                                                                            + 176))(&v4, 0xD00000000000003BLL, 0x80000001001B1840, 0);
  SQLiteStatement.expectAtMostOneRow()(&v6);
  swift_release();
  long long v9 = v5;
  uint64_t v1 = sub_100057E18((uint64_t)&v9);
  __chkstk_darwin(v1);
  SQLiteStatement.reduce<A>(_:handleRow:)();
  swift_release();
  long long v8 = v7;
  sub_100057E18((uint64_t)&v8);
  return v3;
}

void *sub_100051918()
{
  void *(*v2)(uint64_t *__return_ptr, unint64_t, unint64_t, void);
  void *result;
  uint64_t v4;
  long long *v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;
  uint64_t v10;
  long long v11;
  uint64_t v12;
  long long v13;
  long long v14;
  long long v15;
  long long v16;
  long long v17;

  uint64_t v2 = *(void *(**)(uint64_t *__return_ptr, unint64_t, unint64_t, void))(**(void **)(v0 + OBJC_IVAR____TtC7parsecd25EngagedCompletionSQLCache_database) + 176);
  uint64_t result = v2(&v10, 0xD00000000000004FLL, 0x80000001001B17B0, 0);
  if (!v1)
  {
    SQLiteStatement.execute()();
    swift_release();
    if (v4)
    {
      uint64_t v17 = v11;
      long long v5 = &v17;
    }
    else
    {
      uint64_t v16 = v11;
      sub_100057E18((uint64_t)&v16);
      _StringGuts.grow(_:)(65);
      v6._object = (void *)0x80000001001B1800;
      v6._uint64_t countAndFlagsBits = 0xD00000000000003DLL;
      String.append(_:)(v6);
      v7._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v7);
      swift_bridgeObjectRelease();
      v8._uint64_t countAndFlagsBits = 15145;
      v8._object = (void *)0xE200000000000000;
      String.append(_:)(v8);
      v2(&v12, 0, 0xE000000000000000, 0);
      swift_bridgeObjectRelease();
      SQLiteStatement.execute()();
      swift_release();
      if (v9)
      {
        os_log_type_t v15 = v13;
        long long v5 = &v15;
      }
      else
      {
        uint64_t v14 = v13;
        long long v5 = &v14;
      }
    }
    return (void *)sub_100057E18((uint64_t)v5);
  }
  return result;
}

BOOL static SQLiteBaseVTab.Style.__derived_enum_equals(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void SQLiteBaseVTab.Style.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int SQLiteBaseVTab.Style.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

Swift::Int sub_100051B84()
{
  return SQLiteBaseVTab.Style.hashValue.getter(*v0);
}

void sub_100051B8C(uint64_t a1)
{
  SQLiteBaseVTab.Style.hash(into:)(a1, *v1);
}

Swift::Int sub_100051B94()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_100051BD8@<X0>(char *a1@<X8>)
{
  uint64_t result = SQLiteRow.get<A>(at:type:)();
  if (!v1)
  {
    if (v5 == 8)
    {
      char v4 = 1;
    }
    else
    {
      if (v5 == 9)
      {
        *a1 = 0;
        return result;
      }
      char v4 = 2;
    }
    *a1 = v4;
  }
  return result;
}

uint64_t sub_100051C4C(uint64_t a1, void *a2)
{
  void (*v8)(uint64_t *__return_ptr, unint64_t, unint64_t, void);
  uint64_t v9;
  long long v10;
  long long *v11;
  os_log_type_t v12;
  NSObject *v13;
  uint8_t *v14;
  uint64_t v15;
  unint64_t v16;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  uint64_t v21;
  uint64_t v22;
  long long v23;
  uint64_t v24;
  long long v25;
  uint64_t v26;
  long long v27;
  uint64_t v28;
  long long v29;
  uint64_t v30;
  long long v31;
  uint64_t v32;
  long long v33;
  uint64_t v34;
  long long v35;
  uint64_t v36;
  long long v37;
  uint64_t v38;
  long long v39;
  unsigned char v40[48];
  long long v41;
  long long v42;
  long long v43;
  long long v44;
  long long v45;
  long long v46;
  long long v47;
  long long v48;
  long long v49;
  long long v50;

  if (qword_100218B68 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_10002A10C(v4, (uint64_t)qword_100236A50);
  os_log_type_t v5 = static os_log_type_t.default.getter();
  uint64_t v6 = Logger.logObject.getter();
  if (os_log_type_enabled(v6, v5))
  {
    long long v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)long long v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v5, "ECC creating db schema", v7, 2u);
    swift_slowDealloc();
  }

  long long v8 = *(void (**)(uint64_t *__return_ptr, unint64_t, unint64_t, void))(**(void **)(a1 + OBJC_IVAR____TtC7parsecd25EngagedCompletionSQLCache_database)
                                                                                                + 176);
  v8(&v22, 0xD000000000000017, 0x80000001001B1490, 0);
  SQLiteStatement.execute()();
  if (v9)
  {
    swift_release();
    uint64_t v10 = v23;
LABEL_7:
    *(_OWORD *)id v40 = v10;
    uint64_t v11 = (long long *)v40;
    goto LABEL_8;
  }
  swift_release();
  uint64_t v50 = v23;
  sub_100057E18((uint64_t)&v50);
  v8(&v24, 0xD000000000000035, 0x80000001001B14B0, 0);
  SQLiteStatement.execute()();
  if (v9)
  {
    swift_release();
    uint64_t v10 = v25;
    goto LABEL_7;
  }
  swift_release();
  uint64_t v49 = v25;
  sub_100057E18((uint64_t)&v49);
  v8(&v26, 0xD00000000000004FLL, 0x80000001001B14F0, 0);
  SQLiteStatement.execute()();
  if (v9)
  {
    swift_release();
    uint64_t v10 = v27;
    goto LABEL_7;
  }
  swift_release();
  uint64_t v48 = v27;
  sub_100057E18((uint64_t)&v48);
  v8(&v28, 0xD000000000000031, 0x80000001001B1540, 0);
  SQLiteStatement.execute()();
  if (v9)
  {
    swift_release();
    uint64_t v10 = v29;
    goto LABEL_7;
  }
  swift_release();
  uint64_t v47 = v29;
  sub_100057E18((uint64_t)&v47);
  v8(&v30, 0xD0000000000000FELL, 0x80000001001B1580, 0);
  SQLiteStatement.execute()();
  if (v9)
  {
    swift_release();
    uint64_t v10 = v31;
    goto LABEL_7;
  }
  swift_release();
  id v46 = v31;
  sub_100057E18((uint64_t)&v46);
  v8(&v32, 0xD000000000000026, 0x80000001001B1680, 0);
  SQLiteStatement.execute()();
  if (v9)
  {
    swift_release();
    uint64_t v10 = v33;
    goto LABEL_7;
  }
  swift_release();
  uint64_t v45 = v33;
  sub_100057E18((uint64_t)&v45);
  v8(&v34, 0xD00000000000004BLL, 0x80000001001B16B0, 0);
  SQLiteStatement.execute()();
  if (v9)
  {
    swift_release();
    uint64_t v10 = v35;
    goto LABEL_7;
  }
  swift_release();
  uint64_t v44 = v35;
  sub_100057E18((uint64_t)&v44);
  v8(&v36, 0xD000000000000020, 0x80000001001B1700, 0);
  SQLiteStatement.execute()();
  if (v9)
  {
    swift_release();
    uint64_t v10 = v37;
    goto LABEL_7;
  }
  swift_release();
  uint64_t v43 = v37;
  sub_100057E18((uint64_t)&v43);
  v8(&v38, 0xD00000000000003FLL, 0x80000001001B1730, 0);
  SQLiteStatement.execute()();
  if (v9)
  {
    swift_release();
    uint64_t v10 = v39;
    goto LABEL_7;
  }
  swift_release();
  uint64_t v42 = v39;
  sub_100057E18((uint64_t)&v42);
  *(void *)id v40 = 0;
  *(void *)&v40[8] = 0xE000000000000000;
  _StringGuts.grow(_:)(56);
  v18._uint64_t countAndFlagsBits = 0xD000000000000034;
  v18._object = (void *)0x80000001001B1770;
  String.append(_:)(v18);
  *(void *)&uint64_t v41 = 9;
  v19._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v20._uint64_t countAndFlagsBits = 15145;
  v20._object = (void *)0xE200000000000000;
  String.append(_:)(v20);
  v8((uint64_t *)v40, *(void *)v40, *(void *)&v40[8], 0);
  swift_bridgeObjectRelease();
  SQLiteStatement.execute()();
  if (!v9)
  {
    swift_release();
    uint64_t v41 = *(_OWORD *)&v40[8];
    return sub_100057E18((uint64_t)&v41);
  }
  swift_release();
  uint64_t v41 = *(_OWORD *)&v40[8];
  uint64_t v11 = &v41;
LABEL_8:
  sub_100057E18((uint64_t)v11);
  os_log_type_t v12 = static os_log_type_t.default.getter();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v13 = Logger.logObject.getter();
  if (os_log_type_enabled(v13, v12))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 136315138;
    swift_errorRetain();
    sub_10002572C(&qword_10021B3C0);
    os_log_type_t v15 = String.init<A>(describing:)();
    sub_10001C274(v15, v16, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, v12, "ECC error creating db schema: %s", v14, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  *a2 = v9;
  return swift_errorRelease();
}

unint64_t sub_10005235C(unint64_t a1, unsigned __int8 a2)
{
  unint64_t result = sub_1000523C4(a2);
  if ((result & 0x8000000000000000) == 0 && result >= a1)
  {
    return sub_1000525F8(a1, a2);
  }
  return result;
}

uint64_t sub_1000523C4(unsigned __int8 a1)
{
  uint64_t v8 = 0;
  *(void *)&long long v9 = 0xE000000000000000;
  _StringGuts.grow(_:)(68);
  v3._object = (void *)0x80000001001B1A80;
  v3._uint64_t countAndFlagsBits = 0xD000000000000041;
  String.append(_:)(v3);
  *(void *)&long long v10 = a1;
  v4._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._uint64_t countAndFlagsBits = 59;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  (*(void (**)(uint64_t *__return_ptr, void, unint64_t, void))(**(void **)(v1
                                                                                                + OBJC_IVAR____TtC7parsecd25EngagedCompletionSQLCache_database)
                                                                                  + 176))(&v8, 0, 0xE000000000000000, 0);
  swift_bridgeObjectRelease();
  SQLiteStatement.singleRow<A>(_:)((uint64_t)&type metadata for Int, (uint64_t)&v7);
  swift_release();
  long long v10 = v9;
  sub_100057E18((uint64_t)&v10);
  return v7;
}

uint64_t sub_1000525F8(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v20 = *(void *)(v5 - 8);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  long long v10 = (char *)&v19 - v9;
  uint64_t v22 = 0;
  *(void *)&long long v23 = 0xE000000000000000;
  _StringGuts.grow(_:)(124);
  v11._uint64_t countAndFlagsBits = 0xD000000000000048;
  v11._object = (void *)0x80000001001B1A00;
  String.append(_:)(v11);
  *(void *)&long long v24 = a2;
  v12._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._object = (void *)0x80000001001B1A50;
  v13._uint64_t countAndFlagsBits = 0xD00000000000002ELL;
  String.append(_:)(v13);
  *(void *)&long long v24 = a1;
  v14._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._uint64_t countAndFlagsBits = 15136;
  v15._object = (void *)0xE200000000000000;
  String.append(_:)(v15);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, void, void))(**(void **)(v2
                                                                                       + OBJC_IVAR____TtC7parsecd25EngagedCompletionSQLCache_database)
                                                                         + 176))(&v22, v22, v23, 0);
  swift_bridgeObjectRelease();
  uint64_t v16 = v20;
  SQLiteStatement.singleRow<A>(_:)((uint64_t)&type metadata for Int64, (uint64_t)&v21);
  swift_release();
  long long v24 = v23;
  sub_100057E18((uint64_t)&v24);
  static Date.distantPast.getter();
  Date.init(timeIntervalSinceReferenceDate:)();
  sub_1000528FC();
  uint64_t v17 = *(void (**)(char *, uint64_t))(v16 + 8);
  v17(v8, v5);
  return ((uint64_t (*)(char *, uint64_t))v17)(v10, v5);
}

uint64_t sub_1000528C8()
{
  return SQLiteRow.get<A>(at:type:)();
}

void sub_1000528FC()
{
  sub_10000DFE0();
  uint64_t v58 = v2;
  uint64_t v62 = v3;
  uint64_t v60 = v4;
  uint64_t v5 = type metadata accessor for Date();
  sub_100020C48();
  uint64_t v63 = v6;
  __chkstk_darwin(v7);
  sub_100016568();
  uint64_t v9 = __chkstk_darwin(v8);
  Swift::String v11 = (char *)&v57 - v10;
  __chkstk_darwin(v9);
  Swift::String v13 = (char *)&v57 - v12;
  uint64_t v14 = type metadata accessor for DispatchPredicate();
  sub_100020C48();
  uint64_t v16 = v15;
  __chkstk_darwin(v17);
  sub_10000DFD0();
  uint64_t v20 = (char *)(v19 - v18);
  uint64_t v59 = v0;
  uint64_t v21 = *(void **)(v0 + 32);
  *(void *)(v19 - v18) = v21;
  (*(void (**)(uint64_t, void, uint64_t))(v16 + 104))(v19 - v18, enum case for DispatchPredicate.onQueue(_:), v14);
  id v22 = v21;
  char v23 = _dispatchPreconditionTest(_:)();
  uint64_t v25 = *(void (**)(char *, uint64_t))(v16 + 8);
  unint64_t v24 = v16 + 8;
  v25(v20, v14);
  if ((v23 & 1) == 0)
  {
    __break(1u);
LABEL_27:
    swift_once();
LABEL_17:
    uint64_t v35 = type metadata accessor for Logger();
    sub_10002A10C(v35, (uint64_t)qword_100236A50);
    os_log_type_t v36 = static os_log_type_t.default.getter();
    uint64_t v37 = Logger.logObject.getter();
    if (os_log_type_enabled(v37, v36))
    {
      uint64_t v38 = swift_slowAlloc();
      uint64_t v39 = swift_slowAlloc();
      uint64_t v60 = v20;
      uint64_t v64 = v39;
      *(_DWORD *)uint64_t v38 = 136315394;
      unint64_t v66 = v24;
      uint64_t v40 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v42 = sub_10001C274(v40, v41, &v64);
      sub_100024FB0(v42);
      swift_bridgeObjectRelease();
      *(_WORD *)(v38 + 1sub_100034730((uint64_t)"SIGTERM", 7, 2) = 2080;
      unint64_t v66 = v5;
      uint64_t v43 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v45 = sub_10001C274(v43, v44, &v64);
      sub_100024FB0(v45);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v37, v36, "ECC clearing completions from %s to %s", (uint8_t *)v38, 0x16u);
      swift_arrayDestroy();
      sub_100017D40();
      sub_100017D40();
    }

    uint64_t v64 = 0;
    v65.n128_u64[0] = 0xE000000000000000;
    _StringGuts.grow(_:)(111);
    sub_10000E090();
    String.append(_:)(v46);
    unint64_t v66 = v24;
    v47._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v47);
    swift_bridgeObjectRelease();
    sub_10000E090();
    v48._uint64_t countAndFlagsBits = 0xD000000000000018;
    String.append(_:)(v48);
    unint64_t v66 = v5;
    v49._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v49);
    swift_bridgeObjectRelease();
    v50._uint64_t countAndFlagsBits = 0x696C6320444E4120;
    v50._object = (void *)0xEF203D3D20746E65;
    String.append(_:)(v50);
    unint64_t v66 = v58;
    v51._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    object = v51._object;
    String.append(_:)(v51);
    swift_bridgeObjectRelease();
    v53._uint64_t countAndFlagsBits = 59;
    v53._object = (void *)0xE100000000000000;
    String.append(_:)(v53);
    sub_100017E10();
    sub_100027DB4();
    v54();
    if (object)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      SQLiteStatement.execute()();
      if (!v55)
      {
        swift_release();
        sub_10002B0E8(v65);
        goto LABEL_24;
      }
      swift_release();
      sub_10002B0E8(v65);
    }
    swift_errorRelease();
LABEL_24:
    uint64_t v56 = *(void (**)(void))(v63 + 8);
    sub_1000212B0();
    v56();
    sub_1000212B0();
    v56();
    sub_10000DFB8();
    return;
  }
  uint64_t v26 = *(void (**)(char *, char *, uint64_t))(v63 + 16);
  v26(v13, v60, v5);
  uint64_t v61 = v5;
  v26(v11, v62, v5);
  uint64_t v20 = v11;
  if (static Date.== infix(_:_:)())
  {
    Date.addingTimeInterval(_:)();
    uint64_t v27 = v63;
    id v28 = *(void (**)(void))(v63 + 8);
    uint64_t v29 = v61;
    sub_1000212B0();
    v28();
    int v30 = *(void (**)(char *, uint64_t, uint64_t))(v27 + 32);
    v30(v13, v1, v29);
    Date.addingTimeInterval(_:)();
    sub_1000212B0();
    v28();
    v30(v20, v1, v29);
  }
  Date.timeIntervalSinceReferenceDate.getter();
  if (v31 > 0.0)
  {
    Date.timeIntervalSinceReferenceDate.getter();
    if ((~*(void *)&v32 & 0x7FF0000000000000) != 0)
    {
      if (v32 > -1.0)
      {
        if (v32 < 1.84467441e19)
        {
          unint64_t v24 = (unint64_t)v32;
          goto LABEL_10;
        }
LABEL_30:
        __break(1u);
LABEL_31:
        __break(1u);
        goto LABEL_32;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_30;
  }
  unint64_t v24 = 0;
LABEL_10:
  Date.timeIntervalSinceReferenceDate.getter();
  if (v33 <= 0.0)
  {
    uint64_t v5 = 0;
LABEL_16:
    uint64_t v62 = v13;
    if (qword_100218B68 == -1) {
      goto LABEL_17;
    }
    goto LABEL_27;
  }
  Date.timeIntervalSinceReferenceDate.getter();
  if ((~*(void *)&v34 & 0x7FF0000000000000) == 0) {
    goto LABEL_31;
  }
  if (v34 <= -1.0)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  if (v34 < 1.84467441e19)
  {
    uint64_t v5 = (unint64_t)v34;
    goto LABEL_16;
  }
LABEL_33:
  __break(1u);
}

uint64_t sub_100052F38()
{
  return SQLiteRow.get<A>(at:type:)();
}

void sub_100052F6C(void *a1, unint64_t a2)
{
  void (*v63)(uint64_t *__return_ptr, unint64_t, unint64_t, uint64_t);
  unint64_t v64;
  id v65;
  id v66;
  NSObject *v67;
  os_log_type_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unsigned int v72;
  signed int v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  os_log_type_t v77;
  void *v78;
  id v79;
  NSObject *v80;
  os_log_type_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  id v89;
  id v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  char *v96;
  NSObject *v97;
  unint64_t v98;
  uint64_t v99;
  os_log_t v100;
  long long v101;
  void *v102;
  _UNKNOWN **v103;
  uint64_t v104;
  uint64_t v105[2];
  uint64_t v106;
  long long v107;
  unsigned char v108[48];
  unsigned char v109[48];
  unsigned char v110[48];
  unsigned char v111[48];
  unsigned char v112[48];
  uint64_t v113;
  uint64_t v114;
  long long v115;
  unint64_t v116;
  long long v117;
  void *v118;
  _UNKNOWN **v119;
  long long v120;
  long long v121;
  long long v122;
  long long v123;
  long long v124;
  long long v125;
  long long v126;
  long long v127;
  uint64_t vars8;

  Swift::String v3 = v2;
  unint64_t v98 = a2;
  uint64_t v95 = *v2;
  uint64_t v5 = sub_10002572C(&qword_10021BB10);
  __chkstk_darwin(v5 - 8);
  uint64_t v100 = (os_log_t)((char *)&v85 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v97 = ((char *)&v85 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v96 = (char *)&v85 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v85 - v14;
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v85 - v16;
  if (qword_100218B68 != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  uint64_t v19 = sub_10002A10C(v18, (uint64_t)qword_100236A50);
  os_log_type_t v20 = static os_log_type_t.default.getter();
  uint64_t v21 = Logger.logObject.getter();
  if (os_log_type_enabled(v21, v20))
  {
    id v22 = (uint8_t *)swift_slowAlloc();
    char v99 = (uint64_t)v15;
    *(_WORD *)id v22 = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, v20, "ECC: adding engagement", v22, 2u);
    uint64_t v15 = (char *)v99;
    swift_slowDealloc();
  }

  uint64_t v23 = sub_100013C38(a1, (SEL *)&selRef_title);
  char v99 = v24;
  if (!v24)
  {
    uint64_t v100 = (os_log_t)Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v100, v45))
    {
      Swift::String v46 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)Swift::String v46 = 0;
      _os_log_impl((void *)&_mh_execute_header, v100, v45, "ECC: suggestion string is missing", v46, 2u);
      swift_slowDealloc();
    }
    os_log_t v47 = v100;

    return;
  }
  uint64_t v25 = v23;
  uint64_t v26 = sub_100013C38(a1, (SEL *)&selRef_searchString);
  if (!v27)
  {
    unint64_t v48 = v99;
    swift_bridgeObjectRetain();
    Swift::String v49 = Logger.logObject.getter();
    os_log_type_t v50 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v49, v50))
    {
      Swift::String v51 = (uint8_t *)swift_slowAlloc();
      uint64_t v116 = swift_slowAlloc();
      *(_DWORD *)Swift::String v51 = 136642819;
      swift_bridgeObjectRetain();
      uint64_t v114 = sub_10001C274(v25, v48, (uint64_t *)&v116);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v49, v50, "ECC: search string is missing for: %{sensitive}s", v51, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return;
    }

    goto LABEL_40;
  }
  unint64_t v93 = v25;
  id v94 = a1;
  long long v87 = v26;
  uint64_t v92 = v27;
  id v28 = *(os_unfair_lock_s **)(v3[6] + 16);
  swift_retain();
  os_unfair_lock_lock(v28);
  uint64_t v29 = (void *)v3[7];
  int v30 = (void *)v3[8];
  unint64_t v91 = v3[9];
  id v90 = v29;
  uint64_t v89 = v30;
  os_unfair_lock_unlock(v28);
  swift_release();
  os_log_type_t v31 = static os_log_type_t.default.getter();
  double v32 = Logger.logObject.getter();
  if (os_log_type_enabled(v32, v31))
  {
    double v33 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)double v33 = 0;
    _os_log_impl((void *)&_mh_execute_header, v32, v31, "ECC: deleting engagements older than 30 days", v33, 2u);
    swift_slowDealloc();
  }

  static Date.distantPast.getter();
  double v34 = v96;
  Date.init()();
  Date.addingTimeInterval(_:)();
  long long v86 = v8;
  os_log_type_t v36 = (void *)(v8 + 8);
  uint64_t v35 = *(unsigned char **)(v8 + 8);
  ((void (*)(char *, uint64_t))v35)(v34, v7);
  unint64_t v37 = v98;
  sub_1000528FC();
  ((void (*)(char *, uint64_t))v35)(v15, v7);
  uint64_t v96 = v35;
  ((void (*)(char *, uint64_t))v35)(v17, v7);
  if (v91) {
    unint64_t v38 = v91;
  }
  else {
    unint64_t v38 = 10000;
  }
  sub_10005235C(v38, v37);
  id v39 = [v94 engagementTime];
  uint64_t v88 = v19;
  if (v39)
  {
    uint64_t v40 = v39;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v35 = (unsigned char *)(v86 + 32);
    unint64_t v41 = *(void (**)(os_log_t, char *, uint64_t))(v86 + 32);
    uint64_t v42 = v17;
    os_log_t v43 = v100;
    v41(v100, v42, v7);
    sub_10002538C((uint64_t)v43, 0, 1, v7);
    if (sub_100027BA4((uint64_t)v43, 1, v7) != 1)
    {
      unint64_t v44 = (unint64_t)v97;
      v41(v97, (char *)v100, v7);
      goto LABEL_24;
    }
  }
  else
  {
    sub_10002538C((uint64_t)v100, 1, 1, v7);
  }
  unint64_t v44 = (unint64_t)v97;
  Date.init()();
  sub_1000255D4((uint64_t)v100, &qword_10021BB10);
LABEL_24:
  Date.timeIntervalSinceReferenceDate.getter();
  double v53 = v52;
  ((void (*)(unint64_t, uint64_t))v96)(v44, v7);
  unint64_t v54 = v99;
  if ((~*(void *)&v53 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_42;
  }
  if (v53 <= -1.0)
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  if (v53 >= 1.84467441e19)
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  uint64_t v55 = v93;
  uint64_t v56 = sub_1000548AC();
  uint64_t v58 = v57;
  uint64_t v59 = sub_100057F74(v94);
  if (v60 >> 60 == 15) {
    uint64_t v61 = 0;
  }
  else {
    uint64_t v61 = v59;
  }
  uint64_t v100 = v61;
  if (v60 >> 60 == 15) {
    unint64_t v62 = 0xC000000000000000;
  }
  else {
    unint64_t v62 = v60;
  }
  uint64_t v63 = *(void (**)(uint64_t *__return_ptr, unint64_t, unint64_t, uint64_t))(**(void **)((char *)v3 + OBJC_IVAR____TtC7parsecd25EngagedCompletionSQLCache_database)
                                                                                                  + 176);
  Swift::String v3 = 0;
  v63(&v106, 0xD0000000000000ADLL, 0x80000001001B1950, 1);
  uint64_t v97 = v62;
  id v118 = &type metadata for String;
  id v119 = &protocol witness table for String;
  uint64_t v116 = v55;
  *(void *)&uint64_t v117 = v54;
  swift_bridgeObjectRetain();
  SQLiteStatement.bind(_:at:)(&v116, 1, (uint64_t)v108);
  uint64_t v64 = v92;
  uint64_t v35 = v108;
  swift_release();
  uint64_t v127 = v107;
  sub_100057E18((uint64_t)&v127);
  sub_10001CA50((uint64_t)&v116);
  id v118 = &type metadata for String;
  id v119 = &protocol witness table for String;
  uint64_t v116 = v87;
  *(void *)&uint64_t v117 = v64;
  swift_bridgeObjectRetain();
  SQLiteStatement.bind(_:at:)(&v116, 2, (uint64_t)v109);
  swift_release();
  id v126 = *(_OWORD *)&v108[8];
  sub_100057E18((uint64_t)&v126);
  sub_10001CA50((uint64_t)&v116);
  id v118 = &type metadata for Int64;
  id v119 = &protocol witness table for Int64;
  if (((unint64_t)v53 & 0x8000000000000000) == 0)
  {
    uint64_t v116 = (unint64_t)v53;
    SQLiteStatement.bind(_:at:)(&v116, 3, (uint64_t)v110);
    swift_release();
    id v125 = *(_OWORD *)&v109[8];
    sub_100057E18((uint64_t)&v125);
    sub_10001CA50((uint64_t)&v116);
    uint64_t v73 = [v94 type];
    id v119 = &protocol witness table for Int;
    id v118 = &type metadata for Int;
    uint64_t v116 = v73;
    SQLiteStatement.bind(_:at:)(&v116, 4, (uint64_t)v111);
    swift_release();
    uint64_t v124 = *(_OWORD *)&v110[8];
    sub_100057E18((uint64_t)&v124);
    sub_10001CA50((uint64_t)&v116);
    id v119 = &protocol witness table for Int;
    id v118 = &type metadata for Int;
    uint64_t v74 = v98;
    uint64_t v116 = v98;
    SQLiteStatement.bind(_:at:)(&v116, 5, (uint64_t)v112);
    uint64_t v96 = (char *)v74;
    swift_release();
    unsigned int v123 = *(_OWORD *)&v111[8];
    sub_100057E18((uint64_t)&v123);
    sub_10001CA50((uint64_t)&v116);
    id v118 = &type metadata for String;
    id v119 = &protocol witness table for String;
    uint64_t v116 = v56;
    *(void *)&uint64_t v117 = v58;
    SQLiteStatement.bind(_:at:)(&v116, 6, (uint64_t)&v113);
    unint64_t v37 = v92;
    unint64_t v54 = v99;
    swift_release();
    NSString v122 = *(_OWORD *)&v112[8];
    sub_100057E18((uint64_t)&v122);
    sub_10001CA50((uint64_t)&v116);
    os_log_type_t v36 = v94;
    [v94 score];
    id v118 = &type metadata for Double;
    id v119 = &protocol witness table for Double;
    uint64_t v116 = v75;
    SQLiteStatement.bind(_:at:)(&v116, 7, (uint64_t)&v114);
    unint64_t v44 = (unint64_t)v97;
LABEL_44:
    swift_release();
    uint64_t v121 = *(_OWORD *)(v35 + 248);
    sub_100057E18((uint64_t)&v121);
    sub_10001CA50((uint64_t)&v116);
    Swift::Int v102 = &type metadata for Data;
    uint64_t v103 = &protocol witness table for Data;
    *(void *)&BOOL v101 = v100;
    *((void *)&v101 + 1) = v44;
    sub_100027BCC((uint64_t)v100, v44);
    SQLiteStatement.bind(_:at:)(&v101, 8, (uint64_t)&v116);
    if (v3)
    {
      swift_release();
      NSString v120 = v115;
      sub_100057E18((uint64_t)&v120);
      sub_10001CA50((uint64_t)&v101);
LABEL_37:
      __n128 v65 = v36;
      swift_errorRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v66 = v65;
      swift_errorRetain();
      uint64_t v67 = Logger.logObject.getter();
      uint64_t v68 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v67, v68))
      {
        uint64_t v69 = swift_slowAlloc();
        char v99 = swift_slowAlloc();
        v105[0] = v99;
        *(_DWORD *)uint64_t v69 = 136643843;
        swift_bridgeObjectRetain();
        char v104 = sub_10001C274(v93, v54, v105);
        uint64_t v97 = v44;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v69 + 1sub_100034730((uint64_t)"SIGTERM", 7, 2) = 2080;
        swift_getErrorValue();
        uint64_t v70 = Error.localizedDescription.getter();
        char v104 = sub_10001C274(v70, v71, v105);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        *(_WORD *)(v69 + 2sub_100034730((uint64_t)"SIGTERM", 7, 2) = 2085;
        swift_bridgeObjectRetain();
        char v104 = sub_10001C274(v87, v37, v105);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v69 + 3sub_100034730((uint64_t)"SIGTERM", 7, 2) = 1024;
        uint64_t v72 = [v66 type];

        LODWORD(v104) = v72;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        *(_WORD *)(v69 + 38) = 2048;
        char v104 = v98;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v67, v68, "ECC completion %{sensitive}s in not added because of error: %s input %{sensitive}s type %d client %lu", (uint8_t *)v69, 0x30u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        sub_1000291B4((uint64_t)v100, (unint64_t)v97);
        swift_errorRelease();
        return;
      }

      sub_1000291B4((uint64_t)v100, v44);
      swift_errorRelease();
      swift_bridgeObjectRelease_n();
      swift_errorRelease();
      swift_errorRelease();

      goto LABEL_40;
    }
    swift_release();
    NSString v120 = v115;
    sub_100057E18((uint64_t)&v120);
    sub_10001CA50((uint64_t)&v101);
    SQLiteStatement.execute()();
    if (v76)
    {
      swift_release();
      BOOL v101 = v117;
      sub_100057E18((uint64_t)&v101);
      unint64_t v37 = v92;
      unint64_t v54 = v99;
      unint64_t v44 = (unint64_t)v97;
      os_log_type_t v36 = v94;
      goto LABEL_37;
    }
    swift_release();
    BOOL v101 = v117;
    sub_100057E18((uint64_t)&v101);
    uint64_t v77 = static os_log_type_t.default.getter();
    uint64_t v78 = v94;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v79 = v78;
    uint64_t v80 = Logger.logObject.getter();
    uint64_t v81 = v77;
    if (os_log_type_enabled(v80, v77))
    {
      Swift::Int v82 = swift_slowAlloc();
      v105[0] = swift_slowAlloc();
      *(_DWORD *)Swift::Int v82 = 136643587;
      uint64_t v83 = v99;
      swift_bridgeObjectRetain();
      char v104 = sub_10001C274(v93, v83, v105);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v82 + 1sub_100034730((uint64_t)"SIGTERM", 7, 2) = 2085;
      uint64_t v84 = v92;
      swift_bridgeObjectRetain();
      char v104 = sub_10001C274(v87, v84, v105);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v82 + 2sub_100034730((uint64_t)"SIGTERM", 7, 2) = 1024;
      LODWORD(v84) = [v79 type];

      LODWORD(v104) = v84;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      *(_WORD *)(v82 + 28) = 2048;
      char v104 = (uint64_t)v96;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v80, v81, "ECC completion added %{sensitive}s input %{sensitive}s type %d client %lu", (uint8_t *)v82, 0x26u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_1000291B4((uint64_t)v100, (unint64_t)v97);
      return;
    }

    sub_1000291B4((uint64_t)v100, (unint64_t)v97);
    swift_bridgeObjectRelease_n();
LABEL_40:
    swift_bridgeObjectRelease_n();
    return;
  }
  __break(1u);
}

void sub_100054068(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void (*a21)(id, uint64_t))
{
  sub_10000DFE0();
  uint64_t v55 = v22;
  uint64_t v56 = v23;
  uint64_t v25 = v24;
  uint64_t v57 = v26;
  uint64_t v28 = v27;
  uint64_t v30 = v29;
  uint64_t v32 = v31;
  unint64_t v33 = v21;
  if (v21 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v34 = _CocoaArrayWrapper.endIndex.getter();
    if (!v34) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v34 = *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v34) {
      goto LABEL_9;
    }
  }
  if (v34 < 1)
  {
    __break(1u);
    return;
  }
  for (uint64_t i = 0; i != v34; ++i)
  {
    if ((v33 & 0xC000000000000001) != 0) {
      id v36 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v36 = *(id *)(v33 + 8 * i + 32);
    }
    unint64_t v37 = v36;
    a21(v36, v30);
  }
LABEL_9:
  swift_bridgeObjectRelease();
  if (v28)
  {
    uint64_t v38 = v28;
    uint64_t v54 = *(void *)(v32 + 40);
    uint64_t v39 = swift_allocObject();
    uint64_t v40 = v57;
    *(void *)(v39 + 16) = v28;
    *(void *)(v39 + 24) = v40;
    v59[4] = v55;
    v59[5] = v39;
    v59[0] = _NSConcreteStackBlock;
    sub_1000263FC(COERCE_DOUBLE(1107296256));
    v59[2] = sub_1000085EC;
    v59[3] = v56;
    unint64_t v41 = _Block_copy(v59);
    uint64_t v55 = type metadata accessor for DispatchQoS();
    uint64_t v56 = v52;
    sub_100020C48();
    uint64_t v53 = v38;
    uint64_t v43 = v42;
    __chkstk_darwin(v44);
    sub_100017DE0();
    swift_retain_n();
    static DispatchQoS.unspecified.getter();
    uint64_t v45 = type metadata accessor for DispatchWorkItemFlags();
    v52[1] = v52;
    sub_100020C48();
    uint64_t v47 = v46;
    __chkstk_darwin(v48);
    sub_10000DFD0();
    uint64_t v51 = v50 - v49;
    uint64_t v58 = _swiftEmptyArrayStorage;
    sub_10002FFEC((unint64_t *)&qword_100219260, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10002572C((uint64_t *)&unk_10021BAF0);
    sub_100057EEC((unint64_t *)&qword_100219270, (uint64_t *)&unk_10021BAF0);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v41);
    sub_1000332CC(v53);
    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v51, v45);
    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v25, v55);
    swift_release();
  }
  sub_10000DFB8();
}

void sub_100054364()
{
  sub_10000DFE0();
  uint64_t v1 = v0;
  unsigned __int8 v3 = v2;
  uint64_t v5 = v4;
  if (qword_100218B68 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_10002A10C(v6, (uint64_t)qword_100236A50);
  os_log_type_t v7 = static os_log_type_t.default.getter();
  uint64_t v8 = Logger.logObject.getter();
  if (os_log_type_enabled(v8, v7))
  {
    uint64_t v9 = (uint8_t *)sub_100023E24();
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v7, "ECC: removing engagement", v9, 2u);
    sub_100017D40();
  }

  uint64_t v10 = sub_100013C38(v5, (SEL *)&selRef_title);
  if (v11)
  {
    uint64_t v12 = v10;
    uint64_t v13 = v11;
    uint64_t v14 = sub_100057F74(v5);
    if (v15 >> 60 == 15)
    {
      os_log_type_t v16 = static os_log_type_t.default.getter();
      uint64_t v17 = Logger.logObject.getter();
      if (os_log_type_enabled(v17, v16))
      {
        uint64_t v18 = (uint8_t *)sub_100023E24();
        *(_WORD *)uint64_t v18 = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, v16, "ECC: engagement does not have local data", v18, 2u);
        sub_100017D40();
      }

      sub_100017E10();
      sub_100027DB4();
      v19();
      if (v1)
      {
        swift_errorRelease();
        sub_10000DFB8();
        swift_bridgeObjectRelease();
        return;
      }
      sub_10002572C(&qword_10021A300);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1001A2A30;
      *(void *)(inited + 56) = &type metadata for Int;
      *(void *)(inited + 64) = &protocol witness table for Int;
      *(void *)(inited + 3sub_100034730((uint64_t)"SIGTERM", 7, 2) = v3;
      *(void *)(inited + 96) = &type metadata for String;
      *(void *)(inited + 104) = &protocol witness table for String;
      *(void *)(inited + 7sub_100034730((uint64_t)"SIGTERM", 7, 2) = v12;
      *(void *)(inited + 80) = v13;
      signed int v35 = [v5 type];
      *(void *)(inited + 136) = &type metadata for Int;
      *(void *)(inited + 144) = &protocol witness table for Int;
      *(void *)(inited + 11sub_100034730((uint64_t)"SIGTERM", 7, 2) = v35;
      SQLiteStatement.bind(_:)(inited);
      swift_setDeallocating();
      sub_1000FD1A8();
      swift_release();
      sub_10002B0E8(v40);
      SQLiteStatement.execute()();
      if (v37) {
        swift_errorRelease();
      }
LABEL_31:
      swift_release();
      long long v42 = v41;
      sub_100057E18((uint64_t)&v42);
      sub_10000DFB8();
      return;
    }
    uint64_t v25 = v14;
    unint64_t v26 = v15;
    swift_bridgeObjectRelease();
    os_log_type_t v27 = static os_log_type_t.default.getter();
    uint64_t v28 = Logger.logObject.getter();
    if (os_log_type_enabled(v28, v27))
    {
      uint64_t v29 = (uint8_t *)sub_100023E24();
      *(_WORD *)uint64_t v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v27, "ECC: engagement has local data", v29, 2u);
      sub_100017D40();
    }

    sub_100017E10();
    sub_100027DB4();
    v30();
    if (!v1)
    {
      sub_10002572C(&qword_10021A300);
      uint64_t v36 = swift_initStackObject();
      *(_OWORD *)(v36 + 16) = xmmword_1001A3830;
      *(void *)(v36 + 56) = &type metadata for Int;
      *(void *)(v36 + 64) = &protocol witness table for Int;
      *(void *)(v36 + 3sub_100034730((uint64_t)"SIGTERM", 7, 2) = v3;
      *(void *)(v36 + 96) = &type metadata for Data;
      *(void *)(v36 + 104) = &protocol witness table for Data;
      *(void *)(v36 + 7sub_100034730((uint64_t)"SIGTERM", 7, 2) = v25;
      *(void *)(v36 + 80) = v26;
      sub_100027BCC(v25, v26);
      SQLiteStatement.bind(_:)(v36);
      swift_setDeallocating();
      sub_1000FD1A8();
      swift_release();
      sub_10002B0E8(v40);
      SQLiteStatement.execute()();
      if (v38) {
        swift_errorRelease();
      }
      sub_10000A330(v25, v26);
      goto LABEL_31;
    }
    swift_errorRelease();
    sub_10000DFB8();
    sub_10000A330(v31, v32);
  }
  else
  {
    oslog = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v21))
    {
      uint64_t v22 = (uint8_t *)sub_100023E24();
      *(_WORD *)uint64_t v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v21, "ECC: suggestion string is missing", v22, 2u);
      sub_100017D40();
    }
    sub_10000DFB8();
  }
}

uint64_t sub_1000548AC()
{
  uint64_t v0 = sub_10002572C(&qword_10021A308);
  __chkstk_darwin(v0 - 8);
  sub_10000DFD0();
  uint64_t v3 = v2 - v1;
  uint64_t v4 = sub_1000253F4();
  if (sub_100057BE0(v4, v5))
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    sub_1000253F4();
    String.lowercased()();
    static Locale.current.getter();
    uint64_t v6 = type metadata accessor for Locale();
    sub_10002538C(v3, 0, 1, v6);
    sub_100021100();
    StringProtocol.folding(options:locale:)();
    sub_1000255D4(v3, &qword_10021A308);
    swift_bridgeObjectRelease();
    StringProtocol.decomposedStringWithCompatibilityMapping.getter();
    swift_bridgeObjectRelease();
  }
  return sub_1000253F4();
}

uint64_t sub_1000549E0(uint64_t a1, void *a2)
{
  uint64_t v59 = a1;
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10005562C();
  unint64_t v60 = v8;
  uint64_t v61 = v7;
  uint64_t v64 = 0;
  unint64_t v65 = 0xE000000000000000;
  _StringGuts.grow(_:)(746);
  v9._uint64_t countAndFlagsBits = 0xD000000000000092;
  v9._object = (void *)0x80000001001B2180;
  String.append(_:)(v9);
  Date.init(timeIntervalSinceNow:)();
  uint64_t v10 = sub_10004E1E8();
  uint64_t v11 = *(void (**)(char *, uint64_t))(v4 + 8);
  uint64_t v58 = v4 + 8;
  v11(v6, v3);
  unint64_t v63 = v10;
  v12._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._uint64_t countAndFlagsBits = 0xD000000000000016;
  v13._object = (void *)0x80000001001B2220;
  String.append(_:)(v13);
  id v55 = a2;
  [a2 weightLast1hour];
  Double.write<A>(to:)();
  v14._object = (void *)0x80000001001B2240;
  unint64_t v62 = (void *)0x80000001001B2240;
  v14._uint64_t countAndFlagsBits = 0xD000000000000024;
  uint64_t v57 = 0xD000000000000024;
  String.append(_:)(v14);
  Date.init(timeIntervalSinceNow:)();
  uint64_t v15 = sub_10004E1E8();
  uint64_t v56 = v3;
  v11(v6, v3);
  unint64_t v63 = v15;
  v16._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  v17._uint64_t countAndFlagsBits = 0xD000000000000016;
  v17._object = (void *)0x80000001001B2220;
  String.append(_:)(v17);
  [a2 weightLast1day];
  Double.write<A>(to:)();
  v18._uint64_t countAndFlagsBits = 0xD000000000000024;
  uint64_t v19 = v62;
  v18._object = v62;
  String.append(_:)(v18);
  Date.init(timeIntervalSinceNow:)();
  uint64_t v20 = sub_10004E1E8();
  v11(v6, v3);
  unint64_t v63 = v20;
  v21._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  v22._uint64_t countAndFlagsBits = 0xD000000000000016;
  v22._object = (void *)0x80000001001B2220;
  String.append(_:)(v22);
  id v23 = v55;
  [v55 weightLast1week];
  Double.write<A>(to:)();
  uint64_t v24 = v57;
  v25._uint64_t countAndFlagsBits = v57;
  v25._object = v19;
  String.append(_:)(v25);
  Date.init(timeIntervalSinceNow:)();
  uint64_t v26 = sub_10004E1E8();
  uint64_t v27 = v56;
  v11(v6, v56);
  unint64_t v63 = v26;
  v28._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v28);
  swift_bridgeObjectRelease();
  v29._uint64_t countAndFlagsBits = 0xD000000000000016;
  v29._object = (void *)0x80000001001B2220;
  String.append(_:)(v29);
  [v23 weightLast1month];
  Double.write<A>(to:)();
  v30._uint64_t countAndFlagsBits = v24;
  v30._object = v62;
  String.append(_:)(v30);
  Date.init(timeIntervalSinceNow:)();
  uint64_t v31 = sub_10004E1E8();
  v11(v6, v27);
  unint64_t v63 = v31;
  v32._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v32);
  swift_bridgeObjectRelease();
  v33._uint64_t countAndFlagsBits = 0xD000000000000016;
  v33._object = (void *)0x80000001001B2220;
  String.append(_:)(v33);
  [v23 weightAll];
  Double.write<A>(to:)();
  v34._uint64_t countAndFlagsBits = 0xD000000000000032;
  v34._object = (void *)0x80000001001B2270;
  String.append(_:)(v34);
  [v23 weightMostRecent];
  Double.write<A>(to:)();
  v35._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
  v35._object = (void *)0x80000001001B22B0;
  String.append(_:)(v35);
  unint64_t v63 = sub_10004E0DC();
  v36._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v36);
  swift_bridgeObjectRelease();
  v37._uint64_t countAndFlagsBits = 0xD0000000000000B0;
  v37._object = (void *)0x80000001001B22D0;
  String.append(_:)(v37);
  uint64_t v38 = v59;
  unint64_t v63 = *(unsigned __int8 *)(v59 + 16);
  v39._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v39);
  swift_bridgeObjectRelease();
  v40._uint64_t countAndFlagsBits = 0xD000000000000014;
  v40._object = (void *)0x80000001001B2390;
  String.append(_:)(v40);
  if (*(unsigned char *)(v38 + 33)) {
    uint64_t v41 = 0x65707974202CLL;
  }
  else {
    uint64_t v41 = 0;
  }
  if (*(unsigned char *)(v38 + 33)) {
    unint64_t v42 = 0xE600000000000000;
  }
  else {
    unint64_t v42 = 0xE000000000000000;
  }
  unint64_t v43 = v42;
  String.append(_:)(*(Swift::String *)&v41);
  swift_bridgeObjectRelease();
  v44._uint64_t countAndFlagsBits = 32;
  v44._object = (void *)0xE100000000000000;
  String.append(_:)(v44);
  if (*(unsigned char *)(v38 + 34)) {
    uint64_t v45 = 0x5F6369706F74202CLL;
  }
  else {
    uint64_t v45 = 0;
  }
  if (*(unsigned char *)(v38 + 34)) {
    unint64_t v46 = 0xEC00000061746164;
  }
  else {
    unint64_t v46 = 0xE000000000000000;
  }
  unint64_t v47 = v46;
  String.append(_:)(*(Swift::String *)&v45);
  swift_bridgeObjectRelease();
  v48._uint64_t countAndFlagsBits = 10;
  v48._object = (void *)0xE100000000000000;
  String.append(_:)(v48);
  v49._uint64_t countAndFlagsBits = v61;
  v49._object = v60;
  String.append(_:)(v49);
  swift_bridgeObjectRelease();
  v50._uint64_t countAndFlagsBits = 0xD000000000000025;
  v50._object = (void *)0x80000001001B23B0;
  String.append(_:)(v50);
  unint64_t v63 = *(void *)(v38 + 24);
  v51._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v51);
  swift_bridgeObjectRelease();
  v52._uint64_t countAndFlagsBits = 59;
  v52._object = (void *)0xE100000000000000;
  String.append(_:)(v52);
  return v64;
}

uint64_t sub_1000550CC(uint64_t a1, id a2)
{
  [a2 paramV];
  if (v4 > 0.0) {
    [a2 paramV];
  }
  [a2 windowBucket];
  if (v5 > 0.0) {
    [a2 windowBucket];
  }
  sub_10005562C();
  uint64_t v37 = v6;
  uint64_t v8 = v7;
  _StringGuts.grow(_:)(692);
  v9._uint64_t countAndFlagsBits = 0xD00000000000007ALL;
  v9._object = (void *)0x80000001001B1E90;
  String.append(_:)(v9);
  [a2 paramK];
  Double.write<A>(to:)();
  v10._uint64_t countAndFlagsBits = 0xD000000000000012;
  v10._object = (void *)0x80000001001B1F10;
  String.append(_:)(v10);
  [a2 paramK];
  Double.write<A>(to:)();
  v11._uint64_t countAndFlagsBits = 2108704;
  v11._object = (void *)0xE300000000000000;
  String.append(_:)(v11);
  [a2 paramA];
  Double.write<A>(to:)();
  v12._uint64_t countAndFlagsBits = 0xD000000000000027;
  v12._object = (void *)0x80000001001B1F30;
  String.append(_:)(v12);
  [a2 paramC];
  Double.write<A>(to:)();
  v13._uint64_t countAndFlagsBits = 0xD000000000000013;
  v13._object = (void *)0x80000001001B1F60;
  String.append(_:)(v13);
  [a2 paramQ];
  Double.write<A>(to:)();
  v14._object = (void *)0x80000001001B1F80;
  v14._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
  String.append(_:)(v14);
  [a2 paramB];
  Double.write<A>(to:)();
  v15._uint64_t countAndFlagsBits = 0xD000000000000031;
  v15._object = (void *)0x80000001001B1FA0;
  String.append(_:)(v15);
  sub_10004E0DC();
  v16._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  v17._uint64_t countAndFlagsBits = 539959337;
  v17._object = (void *)0xE400000000000000;
  String.append(_:)(v17);
  Double.write<A>(to:)();
  v18._object = (void *)0x80000001001B1FE0;
  v18._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
  String.append(_:)(v18);
  [a2 paramM];
  Double.write<A>(to:)();
  v19._uint64_t countAndFlagsBits = 0xD00000000000003ALL;
  v19._object = (void *)0x80000001001B2000;
  String.append(_:)(v19);
  Double.write<A>(to:)();
  v20._uint64_t countAndFlagsBits = 0xD0000000000000C5;
  v20._object = (void *)0x80000001001B2040;
  String.append(_:)(v20);
  v21._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  v22._object = (void *)0x80000001001B1E40;
  v22._uint64_t countAndFlagsBits = 0xD000000000000018;
  String.append(_:)(v22);
  if (*(unsigned char *)(a1 + 33)) {
    uint64_t v23 = 0x65707974202CLL;
  }
  else {
    uint64_t v23 = 0;
  }
  if (*(unsigned char *)(a1 + 33)) {
    unint64_t v24 = 0xE600000000000000;
  }
  else {
    unint64_t v24 = 0xE000000000000000;
  }
  unint64_t v25 = v24;
  String.append(_:)(*(Swift::String *)&v23);
  swift_bridgeObjectRelease();
  v26._uint64_t countAndFlagsBits = 32;
  v26._object = (void *)0xE100000000000000;
  String.append(_:)(v26);
  if (*(unsigned char *)(a1 + 34)) {
    uint64_t v27 = 0x5F6369706F74202CLL;
  }
  else {
    uint64_t v27 = 0;
  }
  if (*(unsigned char *)(a1 + 34)) {
    unint64_t v28 = 0xEC00000061746164;
  }
  else {
    unint64_t v28 = 0xE000000000000000;
  }
  unint64_t v29 = v28;
  String.append(_:)(*(Swift::String *)&v27);
  swift_bridgeObjectRelease();
  v30._object = (void *)0x80000001001B2110;
  v30._uint64_t countAndFlagsBits = 0xD000000000000018;
  String.append(_:)(v30);
  [a2 minCount];
  v31._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v31);
  swift_bridgeObjectRelease();
  v32._uint64_t countAndFlagsBits = v37;
  v32._object = v8;
  String.append(_:)(v32);
  swift_bridgeObjectRelease();
  v33._uint64_t countAndFlagsBits = 0xD00000000000002DLL;
  v33._object = (void *)0x80000001001B2130;
  String.append(_:)(v33);
  v34._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v34);
  swift_bridgeObjectRelease();
  v35._uint64_t countAndFlagsBits = 59;
  v35._object = (void *)0xE100000000000000;
  String.append(_:)(v35);
  return 0;
}

void sub_10005562C()
{
  sub_10000DFE0();
  Swift::Int v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = sub_10002572C(&qword_10021BB10);
  __chkstk_darwin(v6 - 8);
  sub_100024F80();
  uint64_t v7 = type metadata accessor for Date();
  sub_100020C48();
  uint64_t v9 = v8;
  __chkstk_darwin(v10);
  sub_100021208();
  uint64_t v11 = type metadata accessor for ECCQuery(0);
  sub_100058624(v5 + *(int *)(v11 + 40), v0);
  if (sub_100027BA4(v0, 1, v7) == 1)
  {
    sub_1000255D4(v0, &qword_10021BB10);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v1, v0, v7);
    _StringGuts.grow(_:)(v3);
    swift_bridgeObjectRelease();
    sub_10004E1E8();
    v12._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v1, v7);
  }
  sub_10000DFB8();
}

uint64_t sub_1000557D8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = 0;
  unint64_t v33 = 0xE000000000000000;
  _StringGuts.grow(_:)(206);
  v6._uint64_t countAndFlagsBits = 0xD0000000000000CCLL;
  v6._object = (void *)0x80000001001B1D40;
  String.append(_:)(v6);
  v31._uint64_t countAndFlagsBits = *(unsigned __int8 *)(a1 + 16);
  v7._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  uint64_t v8 = type metadata accessor for ECCQuery(0);
  if (*(unsigned char *)(a1 + *(int *)(v8 + 52)) != 1) {
    goto LABEL_11;
  }
  swift_retain();
  sub_10008085C();
  swift_release();
  Date.init(timeIntervalSinceNow:)();
  if (qword_100218B68 != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  sub_10002A10C(v9, (uint64_t)qword_100236A50);
  os_log_type_t v10 = static os_log_type_t.default.getter();
  swift_retain();
  uint64_t v11 = Logger.logObject.getter();
  BOOL v12 = os_log_type_enabled(v11, v10);
  uint64_t v29 = v3;
  if (v12)
  {
    Swift::String v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v28 = v2;
    *(_DWORD *)Swift::String v13 = 134217984;
    swift_retain();
    uint64_t v14 = sub_10008085C();
    swift_release();
    v31._uint64_t countAndFlagsBits = v14;
    uint64_t v2 = v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v11, v10, "ZKW current cache expiration is: %f", v13, 0xCu);
    swift_slowDealloc();
  }
  else
  {

    swift_release();
  }
  v31._uint64_t countAndFlagsBits = 0;
  v31._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  v31._uint64_t countAndFlagsBits = 0xD000000000000020;
  v31._object = (void *)0x80000001001B1E60;
  uint64_t result = Date.timeIntervalSinceReferenceDate.getter();
  if ((~*(void *)&v16 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_27;
  }
  if (v16 <= -1.0)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if (v16 >= 1.84467441e19)
  {
LABEL_28:
    __break(1u);
    return result;
  }
  unint64_t v30 = (unint64_t)v16;
  v17._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  String.append(_:)(v31);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v29 + 8))(v5, v2);
LABEL_11:
  if (*(unsigned char *)(a1 + *(int *)(v8 + 48)) == 1)
  {
    v31._uint64_t countAndFlagsBits = 0;
    v31._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(29);
    swift_bridgeObjectRelease();
    v31._uint64_t countAndFlagsBits = 0xD000000000000018;
    v31._object = (void *)0x80000001001B1E40;
    if (*(unsigned char *)(a1 + 33)) {
      uint64_t v18 = 0x65707974202CLL;
    }
    else {
      uint64_t v18 = 0;
    }
    if (*(unsigned char *)(a1 + 33)) {
      unint64_t v19 = 0xE600000000000000;
    }
    else {
      unint64_t v19 = 0xE000000000000000;
    }
    unint64_t v20 = v19;
    String.append(_:)(*(Swift::String *)&v18);
    swift_bridgeObjectRelease();
    v21._uint64_t countAndFlagsBits = 32;
    v21._object = (void *)0xE100000000000000;
    String.append(_:)(v21);
    if (*(unsigned char *)(a1 + 34)) {
      uint64_t v22 = 0x5F6369706F74202CLL;
    }
    else {
      uint64_t v22 = 0;
    }
    if (*(unsigned char *)(a1 + 34)) {
      unint64_t v23 = 0xEC00000061746164;
    }
    else {
      unint64_t v23 = 0xE000000000000000;
    }
    unint64_t v24 = v23;
    String.append(_:)(*(Swift::String *)&v22);
    swift_bridgeObjectRelease();
    String.append(_:)(v31);
    swift_bridgeObjectRelease();
  }
  v31._uint64_t countAndFlagsBits = 0;
  v31._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(48);
  swift_bridgeObjectRelease();
  v31._uint64_t countAndFlagsBits = 0xD00000000000002DLL;
  v31._object = (void *)0x80000001001B1E10;
  unint64_t v30 = *(void *)(a1 + 24);
  v25._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  v26._uint64_t countAndFlagsBits = 59;
  v26._object = (void *)0xE100000000000000;
  String.append(_:)(v26);
  String.append(_:)(v31);
  swift_bridgeObjectRelease();
  return v32;
}

uint64_t sub_100055CD0(uint64_t a1)
{
  uint64_t v3 = v1;
  id v5 = *v1;
  uint64_t v6 = type metadata accessor for Client();
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchPredicate();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  BOOL v12 = (uint64_t *)((char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v13 = v3[4];
  *BOOL v12 = v13;
  (*(void (**)(void *, void, uint64_t))(v10 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v9);
  id v14 = v13;
  LOBYTE(v1sub_100034730((uint64_t)"SIGINT", 6, 3) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v10 + 8))(v12, v9);
  if ((v13 & 1) == 0)
  {
    __break(1u);
LABEL_16:
    swift_once();
    goto LABEL_8;
  }
  id v54 = v5;
  Swift::String v15 = (os_unfair_lock_s *)*((void *)v3[6] + 2);
  swift_retain();
  os_unfair_lock_lock(v15);
  id v16 = v3[8];
  id v17 = v3[7];
  id v18 = v16;
  os_unfair_lock_unlock(v15);
  swift_release();
  unint64_t v19 = v3[3];
  char v20 = *(unsigned char *)(a1 + 16);
  id v5 = v17;
  id v2 = v18;
  swift_retain();
  sub_10004DC5C(v20);
  type metadata accessor for ResourceAccessSpan();
  swift_allocObject();
  uint64_t v53 = sub_100003EAC(v19, 19, (uint64_t)v8, 0, 1);
  if (*(unsigned char *)(a1 + *(int *)(type metadata accessor for ECCQuery(0) + 44)) == 1)
  {
    uint64_t v21 = sub_1000557D8(a1);
  }
  else if ([v2 enabled])
  {
    uint64_t v21 = sub_1000550CC(a1, v2);
  }
  else
  {
    uint64_t v21 = sub_1000549E0(a1, v5);
  }
  uint64_t v58 = v21;
  unint64_t v59 = v22;
  if (qword_100218B68 != -1) {
    goto LABEL_16;
  }
LABEL_8:
  uint64_t v23 = type metadata accessor for Logger();
  uint64_t v24 = sub_10002A10C(v23, (uint64_t)qword_100236A50);
  os_log_type_t v25 = static os_log_type_t.default.getter();
  unint64_t v26 = v59;
  uint64_t v51 = v58;
  swift_bridgeObjectRetain_n();
  uint64_t v52 = v24;
  uint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = v25;
  BOOL v29 = os_log_type_enabled(v27, v25);
  id v55 = v2;
  id v56 = v5;
  if (v29)
  {
    unint64_t v30 = (uint8_t *)swift_slowAlloc();
    uint64_t v62 = swift_slowAlloc();
    *(_DWORD *)unint64_t v30 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v60 = sub_10001C274(v51, v26, &v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "ECC completionsForInput: %s", v30, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v31 = a1;
  uint64_t v32 = *(void *)a1;
  uint64_t v33 = *(void *)(a1 + 8);
  uint64_t v34 = sub_1000548AC();
  uint64_t v36 = v35;
  uint64_t v51 = sub_10005655C();
  id v54 = v37;
  swift_bridgeObjectRetain();
  uint64_t v50 = sub_10005655C();
  uint64_t v39 = v38;
  swift_bridgeObjectRelease();
  uint64_t v40 = *(uint64_t *)((char *)v3 + OBJC_IVAR____TtC7parsecd25EngagedCompletionSQLCache_database);
  swift_beginAccess();
  (*(void (**)(uint64_t *__return_ptr, uint64_t, unint64_t, void))(*(void *)v40 + 176))(&v60, v58, v59, 0);
  uint64_t v49 = v31;
  swift_bridgeObjectRelease();
  sub_10002572C(&qword_10021A300);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1001A3750;
  *(void *)(inited + 56) = &type metadata for String;
  *(void *)(inited + 64) = &protocol witness table for String;
  *(void *)(inited + 3sub_100034730((uint64_t)"SIGTERM", 7, 2) = v32;
  *(void *)(inited + 40) = v33;
  *(void *)(inited + 96) = &type metadata for String;
  *(void *)(inited + 104) = &protocol witness table for String;
  *(void *)(inited + 7sub_100034730((uint64_t)"SIGTERM", 7, 2) = v50;
  *(void *)(inited + 80) = v39;
  *(void *)(inited + 136) = &type metadata for String;
  *(void *)(inited + 144) = &protocol witness table for String;
  *(void *)(inited + 11sub_100034730((uint64_t)"SIGTERM", 7, 2) = v34;
  *(void *)(inited + 120) = v36;
  *(void *)(inited + 176) = &type metadata for String;
  *(void *)(inited + 184) = &protocol witness table for String;
  id v42 = v54;
  *(void *)(inited + 15sub_100034730((uint64_t)"SIGTERM", 7, 2) = v51;
  *(void *)(inited + 160) = v42;
  swift_bridgeObjectRetain();
  SQLiteStatement.bind(_:)(inited);
  swift_setDeallocating();
  sub_1000FD1A8();
  swift_release();
  long long v64 = v61;
  uint64_t v43 = sub_100057E18((uint64_t)&v64);
  __chkstk_darwin(v43);
  uint64_t v45 = v55;
  Swift::String v44 = v56;
  *(&v49 - 4) = v49;
  *(&v49 - sub_100034730((uint64_t)"SIGINT", 6, 3) = (uint64_t)v44;
  *(&v49 - sub_100034730((uint64_t)"SIGTERM", 7, 2) = (uint64_t)v45;
  sub_100023FA0(0, &qword_1002199B0);
  uint64_t v47 = SQLiteStatement.compactMap<A>(_:)();
  swift_release();
  v57[0] = v63;
  sub_100057E18((uint64_t)v57);
  if ([v45 enabled]) {
    char v48 = 58;
  }
  else {
    char v48 = 57;
  }
  *(unsigned char *)(v53 + qword_10021B6C8) = v48;
  sub_100011708();
  swift_release();

  return v47;
}

uint64_t sub_10005655C()
{
  swift_bridgeObjectRetain();
  uint64_t v1 = String.init<A>(_:)();
  String.append<A>(contentsOf:)();
  return v1;
}

void sub_1000565DC(unsigned char *a1@<X1>, void *a2@<X2>, double a3@<X3>, void *a4@<X8>)
{
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  id v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  SQLiteRow.get<A>(at:type:)();
  if (!v4)
  {
    id v45 = a2;
    unint64_t v14 = v49;
    if (!v49)
    {
      Swift::String v15 = 0;
LABEL_7:
      *a4 = v15;
      return;
    }
    uint64_t v44 = v11;
    Swift::String v15 = a1;
    double v16 = a3;
    double v17 = v48;
    SQLiteRow.get<A>(at:type:)();
    id v42 = a4;
    uint64_t v43 = *(void *)&v17;
    if (*(uint64_t *)&v48 < (uint64_t)0xFFFFFFFF80000000)
    {
      __break(1u);
    }
    else if (*(uint64_t *)&v48 <= 0x7FFFFFFF)
    {
      double v17 = v16;
      SQLiteRow.get<A>(at:type:)();
      id v18 = v15;
      double v19 = v48;
      SQLiteRow.get<A>(at:type:)();
      SQLiteRow.get<A>(at:type:)();
      if (v49 >> 60 == 15) {
        uint64_t v20 = 0;
      }
      else {
        uint64_t v20 = *(void *)&v48;
      }
      unint64_t v21 = 0xC000000000000000;
      if (v49 >> 60 != 15) {
        unint64_t v21 = v49;
      }
      uint64_t v40 = v20;
      unint64_t v41 = v21;
      uint64_t v39 = sub_100023FA0(0, &qword_1002199B0);
      swift_bridgeObjectRetain_n();
      Date.init()();
      unint64_t v22 = (void *)PAREngagedResult.init(_:searchString:type:engagemementTime:)();
      [v22 setScore:v19];
      if (!sub_10003014C(v40, v41)) {
        sub_10005868C(v40, v41, v22);
      }
      Date.init(timeIntervalSinceReferenceDate:)();
      Swift::String v15 = v22;
      Class isa = Date._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v44 + 8))(v13, v10);
      [v15 setEngagementTime:isa];

      if (v18[*(int *)(type metadata accessor for ECCQuery(0) + 44)])
      {
        sub_1000291B4(v40, v41);
        swift_bridgeObjectRelease();
LABEL_18:
        a4 = v42;
        goto LABEL_7;
      }
      SQLiteRow.get<A>(at:type:)();
      SQLiteRow.get<A>(at:type:)();
      double v5 = v48;
      if (qword_100218B68 == -1)
      {
LABEL_20:
        uint64_t v24 = type metadata accessor for Logger();
        uint64_t v25 = sub_10002A10C(v24, (uint64_t)qword_100236A50);
        os_log_type_t v26 = static os_log_type_t.default.getter();
        swift_bridgeObjectRetain();
        uint64_t v44 = v25;
        uint64_t v27 = Logger.logObject.getter();
        os_log_type_t v28 = v26;
        if (os_log_type_enabled(v27, v26))
        {
          uint64_t v29 = swift_slowAlloc();
          double v48 = COERCE_DOUBLE(swift_slowAlloc());
          *(_DWORD *)uint64_t v29 = 136643075;
          swift_bridgeObjectRetain();
          uint64_t v46 = sub_10001C274(v43, v14, (uint64_t *)&v48);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v29 + 1sub_100034730((uint64_t)"SIGTERM", 7, 2) = 2048;
          swift_beginAccess();
          double v47 = v50;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v27, v28, "ECC completion found: %{sensitive}s %f", (uint8_t *)v29, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        a4 = v42;
        swift_beginAccess();
        double v30 = v50;
        id v31 = v45;
        [v45 weightMinThresholdToSend];
        if (v32 <= v30)
        {
          if ([*(id *)&v17 enableCount] && v5 > 0.0) {
            double v30 = v5 * 100.0 + v30 / v5;
          }
          [v15 setFreshnessScore:v30];
          sub_1000291B4(v40, v41);
          goto LABEL_7;
        }
        os_log_type_t v33 = static os_log_type_t.default.getter();
        id v34 = v31;
        uint64_t v35 = Logger.logObject.getter();
        if (os_log_type_enabled(v35, v33))
        {
          uint64_t v36 = v15;
          uint64_t v37 = swift_slowAlloc();
          *(_DWORD *)uint64_t v37 = 134218240;
          double v47 = v50;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v37 + 1sub_100034730((uint64_t)"SIGTERM", 7, 2) = 2048;
          [v34 weightMinThresholdToSend];
          double v47 = v38;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          _os_log_impl((void *)&_mh_execute_header, v35, v33, "ECC completion freshness score < MinThresholdToSend, %f < %f, dropping", (uint8_t *)v37, 0x16u);
          swift_slowDealloc();

          sub_1000291B4(v40, v41);
        }
        else
        {
          sub_1000291B4(v40, v41);
        }
        Swift::String v15 = 0;
        goto LABEL_18;
      }
LABEL_34:
      swift_once();
      goto LABEL_20;
    }
    __break(1u);
    goto LABEL_34;
  }
}

uint64_t sub_100056CEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = sub_100055CD0(a3);
  swift_beginAccess();
  *(void *)(a1 + 16) = v4;
  return swift_bridgeObjectRelease();
}

uint64_t sub_100056D50(int a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5)
{
  (*(void (**)(uint64_t *__return_ptr, unint64_t, unint64_t, uint64_t))(**(void **)(a2 + OBJC_IVAR____TtC7parsecd25EngagedCompletionSQLCache_database)
                                                                                             + 176))(&v12, 0xD000000000000059, 0x80000001001B18A0, 1);
  sub_10002572C(&qword_10021A300);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1001A2A30;
  *(void *)(inited + 56) = &type metadata for Int;
  *(void *)(inited + 64) = &protocol witness table for Int;
  *(void *)(inited + 3sub_100034730((uint64_t)"SIGTERM", 7, 2) = a3;
  *(void *)(inited + 96) = &type metadata for String;
  *(void *)(inited + 104) = &protocol witness table for String;
  *(void *)(inited + 7sub_100034730((uint64_t)"SIGTERM", 7, 2) = a4;
  *(void *)(inited + 80) = a5;
  *(void *)(inited + 136) = &type metadata for Int;
  *(void *)(inited + 144) = &protocol witness table for Int;
  *(void *)(inited + 11sub_100034730((uint64_t)"SIGTERM", 7, 2) = a1;
  swift_bridgeObjectRetain();
  SQLiteStatement.bind(_:)(inited);
  swift_setDeallocating();
  sub_1000FD1A8();
  swift_release();
  long long v16 = v13;
  sub_100057E18((uint64_t)&v16);
  SQLiteStatement.execute()();
  if (v10) {
    swift_errorRelease();
  }
  swift_release();
  long long v15 = v14;
  return sub_100057E18((uint64_t)&v15);
}

uint64_t sub_100057010(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v48 = a6;
  uint64_t v49 = a1;
  uint64_t v52 = a3;
  uint64_t v53 = a5;
  uint64_t v50 = a4;
  uint64_t v51 = a2;
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = 0;
  *(void *)&long long v64 = 0xE000000000000000;
  _StringGuts.grow(_:)(365);
  v10._uint64_t countAndFlagsBits = 0xD000000000000048;
  v10._object = (void *)0x80000001001B1B90;
  String.append(_:)(v10);
  Date.init(timeIntervalSinceNow:)();
  uint64_t v11 = sub_10004E1E8();
  uint64_t v12 = *(void (**)(char *, uint64_t))(v7 + 8);
  v12(v9, v6);
  v62[0] = v11;
  v13._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._object = (void *)0x80000001001B1BE0;
  v14._uint64_t countAndFlagsBits = 0xD000000000000021;
  String.append(_:)(v14);
  Date.init(timeIntervalSinceNow:)();
  uint64_t v15 = sub_10004E1E8();
  v12(v9, v6);
  v62[0] = v15;
  v16._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  v17._uint64_t countAndFlagsBits = 0xD000000000000022;
  v17._object = (void *)0x80000001001B1C10;
  String.append(_:)(v17);
  Date.init(timeIntervalSinceNow:)();
  uint64_t v18 = sub_10004E1E8();
  v12(v9, v6);
  v62[0] = v18;
  v19._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v20._object = (void *)0x80000001001B1C40;
  v20._uint64_t countAndFlagsBits = 0xD000000000000021;
  String.append(_:)(v20);
  Date.init(timeIntervalSinceNow:)();
  uint64_t v21 = sub_10004E1E8();
  v12(v9, v6);
  v62[0] = v21;
  v22._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  v23._object = (void *)0x80000001001B1C70;
  v23._uint64_t countAndFlagsBits = 0xD000000000000021;
  String.append(_:)(v23);
  Date.init(timeIntervalSinceNow:)();
  uint64_t v24 = sub_10004E1E8();
  v12(v9, v6);
  v62[0] = v24;
  v25._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  v26._uint64_t countAndFlagsBits = 0xD00000000000007FLL;
  v26._object = (void *)0x80000001001B1CA0;
  String.append(_:)(v26);
  v62[0] = v49;
  v27._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v27);
  swift_bridgeObjectRelease();
  v28._uint64_t countAndFlagsBits = 0xD000000000000015;
  v28._object = (void *)0x80000001001B1D20;
  String.append(_:)(v28);
  uint64_t v29 = v63;
  uint64_t v30 = v64;
  uint64_t v31 = sub_1000548AC();
  uint64_t v33 = v32;
  uint64_t v34 = sub_10005655C();
  uint64_t v36 = v35;
  uint64_t v37 = sub_10005655C();
  uint64_t v39 = v38;
  uint64_t v49 = Dictionary.init(dictionaryLiteral:)();
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, void))(**(void **)(v50
                                                                                        + OBJC_IVAR____TtC7parsecd25EngagedCompletionSQLCache_database)
                                                                          + 176))(&v58, v29, v30, 0);
  uint64_t v46 = v39;
  uint64_t v47 = v33;
  uint64_t v50 = v36;
  swift_bridgeObjectRelease();
  unint64_t v65 = &type metadata for String;
  unint64_t v66 = &protocol witness table for String;
  uint64_t v63 = v51;
  *(void *)&long long v64 = v52;
  swift_bridgeObjectRetain();
  SQLiteStatement.bind(_:at:)(&v63, 1, (uint64_t)v60);
  swift_release();
  long long v70 = v59;
  sub_100057E18((uint64_t)&v70);
  sub_10001CA50((uint64_t)&v63);
  unint64_t v65 = &type metadata for String;
  unint64_t v66 = &protocol witness table for String;
  uint64_t v63 = v37;
  *(void *)&long long v64 = v46;
  SQLiteStatement.bind(_:at:)(&v63, 2, (uint64_t)v61);
  uint64_t v40 = v50;
  uint64_t v41 = v47;
  swift_release();
  long long v69 = *(_OWORD *)&v60[8];
  sub_100057E18((uint64_t)&v69);
  sub_10001CA50((uint64_t)&v63);
  unint64_t v65 = &type metadata for String;
  unint64_t v66 = &protocol witness table for String;
  uint64_t v63 = v31;
  *(void *)&long long v64 = v41;
  SQLiteStatement.bind(_:at:)(&v63, 3, (uint64_t)v62);
  id v45 = v53;
  swift_release();
  long long v68 = *(_OWORD *)&v61[8];
  sub_100057E18((uint64_t)&v68);
  sub_10001CA50((uint64_t)&v63);
  id v55 = &type metadata for String;
  id v56 = &protocol witness table for String;
  *(void *)&long long v54 = v34;
  *((void *)&v54 + 1) = v40;
  SQLiteStatement.bind(_:at:)(&v54, 4, (uint64_t)&v63);
  swift_release();
  long long v67 = *(_OWORD *)&v62[1];
  sub_100057E18((uint64_t)&v67);
  sub_10001CA50((uint64_t)&v54);
  uint64_t v57 = v49;
  swift_bridgeObjectRetain();
  sub_10002572C(&qword_10021A310);
  SQLiteStatement.reduce<A>(into:handleRow:)();
  swift_bridgeObjectRelease_n();
  swift_release();
  long long v54 = v64;
  sub_100057E18((uint64_t)&v54);
  if (!v45) {
    return swift_bridgeObjectRelease();
  }
  swift_retain();
  sub_100101BEC();
  uint64_t v43 = v42;
  swift_bridgeObjectRelease();
  v45(v43);
  swift_bridgeObjectRelease();
  return sub_1000332CC((uint64_t)v45);
}

uint64_t sub_10005797C()
{
  uint64_t result = SQLiteRow.get<A>(at:type:)();
  if (!v0)
  {
    unint64_t v2 = v11;
    if (v11)
    {
      uint64_t v3 = *(void *)&v10;
      SQLiteRow.get<A>(at:type:)();
      double v4 = v10;
      if (qword_100218B68 != -1) {
        swift_once();
      }
      uint64_t v5 = type metadata accessor for Logger();
      sub_10002A10C(v5, (uint64_t)qword_100236A50);
      os_log_type_t v6 = static os_log_type_t.default.getter();
      swift_bridgeObjectRetain_n();
      uint64_t v7 = Logger.logObject.getter();
      os_log_type_t v8 = v6;
      if (os_log_type_enabled(v7, v6))
      {
        uint64_t v9 = swift_slowAlloc();
        double v10 = COERCE_DOUBLE(swift_slowAlloc());
        *(_DWORD *)uint64_t v9 = 136315394;
        swift_bridgeObjectRetain();
        sub_10001C274(v3, v2, (uint64_t *)&v10);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v9 + 1sub_100034730((uint64_t)"SIGTERM", 7, 2) = 2048;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v7, v8, "ECC feature: %s %f", (uint8_t *)v9, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      sub_10003BAB4(v3, v2, v4);
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t sub_100057BE0(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v2) {
    return 0;
  }
  swift_bridgeObjectRetain();
  uint64_t v5 = 0;
  uint64_t v6 = 1;
  while (1)
  {
    if ((a2 & 0x1000000000000000) != 0)
    {
      unsigned int v7 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
    }
    else
    {
      if ((a2 & 0x2000000000000000) == 0 && (a1 & 0x1000000000000000) == 0) {
        _StringObject.sharedUTF8.getter();
      }
      unsigned int v7 = _decodeScalar(_:startingAt:)();
    }
    BOOL v9 = v7 - 12032 < 0xE0 || (v7 - 19968) >> 4 < 0x51B;
    if (v7 >> 7 == 93) {
      BOOL v9 = 1;
    }
    if (v7 != 12539 && v7 - 12448 < 0x60) {
      break;
    }
    if (v7 - 65382 < 0x3A) {
      BOOL v9 = 1;
    }
    if (v9 || v7 - 12352 < 0x60) {
      goto LABEL_26;
    }
    v5 += v8;
    if (v5 >= v2)
    {
      uint64_t v6 = 0;
      goto LABEL_26;
    }
  }
  uint64_t v6 = 1;
LABEL_26:
  swift_bridgeObjectRelease();
  return v6;
}

unint64_t sub_100057D54()
{
  unint64_t result = qword_10021A2E8;
  if (!qword_10021A2E8)
  {
    type metadata accessor for URL();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10021A2E8);
  }
  return result;
}

void *sub_100057DA4()
{
  return sub_1000511B8(*(unsigned char *)(v0 + 16));
}

uint64_t sub_100057DC4()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100057DFC()
{
  return sub_100051C4C(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_100057E08()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100057E18(uint64_t a1)
{
  return a1;
}

uint64_t sub_100057E44@<X0>(char *a1@<X8>)
{
  return sub_100051BD8(a1);
}

unint64_t sub_100057E60()
{
  unint64_t result = qword_10021A2F8;
  if (!qword_10021A2F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10021A2F8);
  }
  return result;
}

uint64_t sub_100057EB0()
{
  return sub_100058068(&unk_1001FBE00, sub_100059490, &unk_1001FBE18, sub_100054364);
}

uint64_t sub_100057EEC(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1000371D4(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100057F3C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100057F74(void *a1)
{
  id v1 = [a1 encodedNormalizedTopic];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_100057FDC()
{
  swift_bridgeObjectRelease();
  swift_release();
  if (*(void *)(v0 + 40)) {
    swift_release();
  }

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10005802C()
{
  return sub_100058068(&unk_1001FBEA0, sub_1000580A8, &unk_1001FBEB8, sub_100052F6C);
}

#error "100058098: call analysis failed (funcsize=16)"

uint64_t sub_1000580A8()
{
  return (*(uint64_t (**)(void))(v0 + 16))(0);
}

uint64_t sub_1000580D4()
{
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100058114()
{
  return sub_100056D50(*(_DWORD *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48));
}

uint64_t sub_100058140()
{
  type metadata accessor for Date();
  sub_100020C48();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v6 = v5 | 7;
  uint64_t v7 = *(void *)(v4 + 64) + ((*(void *)(v4 + 64) + v5 + ((v5 + 24) & ~v5)) & ~v5) + 1;
  swift_release();
  uint64_t v8 = *(void (**)(void))(v2 + 8);
  sub_100018488();
  v8();
  sub_100018488();
  v8();

  return _swift_deallocObject(v0, v7, v6);
}

void sub_100058200()
{
  uint64_t v0 = type metadata accessor for Date();
  sub_100024920(v0);
  sub_1000528FC();
}

uint64_t sub_100058274()
{
  swift_bridgeObjectRelease();
  swift_release();
  if (*(void *)(v0 + 48)) {
    swift_release();
  }

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_1000582C4()
{
  return sub_100057010(*(unsigned __int8 *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void (**)(uint64_t))(v0 + 48), *(void *)(v0 + 56));
}

uint64_t type metadata accessor for ECCQuery(uint64_t a1)
{
  return sub_100027D28(a1, qword_10021A388);
}

uint64_t sub_1000582F8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100055CD0(*(void *)(v1 + 24));
  *a1 = result;
  return result;
}

uint64_t sub_100058338()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100058370(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ECCQuery(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000583D4()
{
  uint64_t v1 = (int *)(type metadata accessor for ECCQuery(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = *(void *)(*(void *)v1 + 64);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v5 = v0 + v3 + v1[12];
  uint64_t v6 = type metadata accessor for Date();
  if (!sub_100027BA4(v5, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  }

  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_1000584E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ECCQuery(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10005854C()
{
  uint64_t v1 = *(void *)(type metadata accessor for ECCQuery(0) - 8);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return sub_100056CEC(v2, v3, v4);
}

unint64_t sub_1000585B0()
{
  unint64_t result = qword_10021A320;
  if (!qword_10021A320)
  {
    sub_100023FA0(255, (unint64_t *)&unk_10021D060);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10021A320);
  }
  return result;
}

void sub_100058604(void *a1@<X8>)
{
  sub_1000565DC(*(unsigned char **)(v1 + 16), *(void **)(v1 + 24), *(double *)(v1 + 32), a1);
}

uint64_t sub_100058624(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10002572C(&qword_10021BB10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_10005868C(uint64_t a1, uint64_t a2, void *a3)
{
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  [a3 setEncodedNormalizedTopic:isa];
}

void *sub_1000586E4(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    uint64_t v8 = a2[1];
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    *(void *)(a1 + 24) = a2[3];
    *(unsigned char *)(a1 + 3sub_100034730((uint64_t)"SIGTERM", 7, 2) = *((unsigned char *)a2 + 32);
    *(_WORD *)(a1 + 3sub_100034730((uint64_t)"SIGINT", 6, 3) = *(_WORD *)((char *)a2 + 33);
    uint64_t v9 = a3[10];
    double v10 = (void *)(a1 + v9);
    unint64_t v11 = (char *)a2 + v9;
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v8;
    uint64_t v12 = type metadata accessor for Date();
    swift_bridgeObjectRetain();
    if (sub_100027BA4((uint64_t)v11, 1, v12))
    {
      uint64_t v13 = sub_10002572C(&qword_10021BB10);
      memcpy(v10, v11, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
      sub_10002538C((uint64_t)v10, 0, 1, v12);
    }
    uint64_t v15 = a3[12];
    *((unsigned char *)v4 + a3[11]) = *((unsigned char *)a2 + a3[11]);
    *((unsigned char *)v4 + v15) = *((unsigned char *)a2 + v15);
    *((unsigned char *)v4 + a3[13]) = *((unsigned char *)a2 + a3[13]);
  }
  return v4;
}

uint64_t sub_10005886C(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 40);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t result = sub_100027BA4(v4, 1, v5);
  if (!result)
  {
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
    return v7(v4, v5);
  }
  return result;
}

uint64_t sub_100058908(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
  *(void *)(a1 + 24) = a2[3];
  *(unsigned char *)(a1 + 3sub_100034730((uint64_t)"SIGTERM", 7, 2) = *((unsigned char *)a2 + 32);
  *(_WORD *)(a1 + 3sub_100034730((uint64_t)"SIGINT", 6, 3) = *(_WORD *)((char *)a2 + 33);
  uint64_t v8 = a3[10];
  uint64_t v9 = (void *)(a1 + v8);
  double v10 = (char *)a2 + v8;
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  uint64_t v11 = type metadata accessor for Date();
  swift_bridgeObjectRetain();
  if (sub_100027BA4((uint64_t)v10, 1, v11))
  {
    uint64_t v12 = sub_10002572C(&qword_10021BB10);
    memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    sub_10002538C((uint64_t)v9, 0, 1, v11);
  }
  uint64_t v13 = a3[12];
  *(unsigned char *)(a1 + a3[11]) = *((unsigned char *)a2 + a3[11]);
  *(unsigned char *)(a1 + v1sub_100034730((uint64_t)"SIGINT", 6, 3) = *((unsigned char *)a2 + v13);
  *(unsigned char *)(a1 + a3[13]) = *((unsigned char *)a2 + a3[13]);
  return a1;
}

uint64_t sub_100058A40(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 3sub_100034730((uint64_t)"SIGTERM", 7, 2) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 3sub_100034730((uint64_t)"SIGINT", 6, 3) = *(unsigned char *)(a2 + 33);
  *(unsigned char *)(a1 + 34) = *(unsigned char *)(a2 + 34);
  uint64_t v6 = a3[10];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for Date();
  int v10 = sub_100027BA4((uint64_t)v7, 1, v9);
  int v11 = sub_100027BA4((uint64_t)v8, 1, v9);
  if (!v10)
  {
    uint64_t v12 = *(void *)(v9 - 8);
    if (!v11)
    {
      (*(void (**)(void *, const void *, uint64_t))(v12 + 24))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v12 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v11)
  {
LABEL_6:
    uint64_t v13 = sub_10002572C(&qword_10021BB10);
    memcpy(v7, v8, *(void *)(*(void *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  sub_10002538C((uint64_t)v7, 0, 1, v9);
LABEL_7:
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  *(unsigned char *)(a1 + a3[12]) = *(unsigned char *)(a2 + a3[12]);
  *(unsigned char *)(a1 + a3[13]) = *(unsigned char *)(a2 + a3[13]);
  return a1;
}

uint64_t sub_100058C14(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 3sub_100034730((uint64_t)"SIGTERM", 7, 2) = *(unsigned char *)(a2 + 32);
  *(_WORD *)(a1 + 3sub_100034730((uint64_t)"SIGINT", 6, 3) = *(_WORD *)(a2 + 33);
  uint64_t v6 = a3[10];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for Date();
  if (sub_100027BA4((uint64_t)v8, 1, v9))
  {
    uint64_t v10 = sub_10002572C(&qword_10021BB10);
    memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
    sub_10002538C((uint64_t)v7, 0, 1, v9);
  }
  uint64_t v11 = a3[12];
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  *(unsigned char *)(a1 + v11) = *(unsigned char *)(a2 + v11);
  *(unsigned char *)(a1 + a3[13]) = *(unsigned char *)(a2 + a3[13]);
  return a1;
}

uint64_t sub_100058D3C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 3sub_100034730((uint64_t)"SIGTERM", 7, 2) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 3sub_100034730((uint64_t)"SIGINT", 6, 3) = *(unsigned char *)(a2 + 33);
  uint64_t v7 = a3[10];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  *(unsigned char *)(a1 + 34) = *(unsigned char *)(a2 + 34);
  uint64_t v10 = type metadata accessor for Date();
  int v11 = sub_100027BA4((uint64_t)v8, 1, v10);
  int v12 = sub_100027BA4((uint64_t)v9, 1, v10);
  if (!v11)
  {
    uint64_t v13 = *(void *)(v10 - 8);
    if (!v12)
    {
      (*(void (**)(void *, const void *, uint64_t))(v13 + 40))(v8, v9, v10);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v13 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v12)
  {
LABEL_6:
    uint64_t v14 = sub_10002572C(&qword_10021BB10);
    memcpy(v8, v9, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  sub_10002538C((uint64_t)v8, 0, 1, v10);
LABEL_7:
  uint64_t v15 = a3[12];
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  *(unsigned char *)(a1 + v15) = *(unsigned char *)(a2 + v15);
  *(unsigned char *)(a1 + a3[13]) = *(unsigned char *)(a2 + a3[13]);
  return a1;
}

uint64_t sub_100058EFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100058F10);
}

uint64_t sub_100058F10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_10002572C(&qword_10021BB10);
    uint64_t v9 = a1 + *(int *)(a3 + 40);
    return sub_100027BA4(v9, a2, v8);
  }
}

uint64_t sub_100058F9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100058FB0);
}

uint64_t sub_100058FB0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_10002572C(&qword_10021BB10);
    uint64_t v8 = v5 + *(int *)(a4 + 40);
    return sub_10002538C(v8, a2, a2, v7);
  }
  return result;
}

void sub_100059034()
{
  sub_1000442AC();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t getEnumTagSinglePayload for CountryCodeSourceDevice(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *sub_100059148(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1000591E4);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void type metadata accessor for EngagedCompletionCacheError()
{
}

uint64_t getEnumTagSinglePayload for ClientSessionState(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFE)
  {
    if (a2 + 2 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 2) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 3;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v5 = v6 - 3;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *_s7parsecd28EngagedCompletionCacheClientOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10005936CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EngagedCompletionSQLCache.SchemaState()
{
  return &type metadata for EngagedCompletionSQLCache.SchemaState;
}

unint64_t sub_1000593A8()
{
  unint64_t result = qword_10021A3E0;
  if (!qword_10021A3E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10021A3E0);
  }
  return result;
}

unint64_t sub_1000593F8()
{
  unint64_t result = qword_10021A3E8[0];
  if (!qword_10021A3E8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10021A3E8);
  }
  return result;
}

uint64_t sub_100059494()
{
  return swift_initClassMetadata2();
}

void *sub_1000594DC()
{
  uint64_t v1 = v0[2];
  uint64_t v5[2] = *(void *)(*v0 + 80);
  uint64_t v2 = type metadata accessor for TimedReference.State();
  uint64_t v3 = sub_10002572C((uint64_t *)&unk_10021BF20);
  sub_1000FD658((void (*)(uint64_t))sub_100059890, (uint64_t)v5, v1, v2, v3);
  swift_release();
  return v0;
}

void *sub_100059578@<X0>(void *result@<X0>, BOOL *a2@<X8>)
{
  uint64_t v3 = *(void *)(*result + qword_10021A490);
  if (v3)
  {
    swift_retain();
    sub_10002572C(&qword_10021B3C0);
    Task.cancel()();
    unint64_t result = (void *)swift_release();
  }
  *a2 = v3 == 0;
  return result;
}

uint64_t sub_100059604()
{
  sub_1000594DC();

  return _swift_deallocClassInstance(v0, 24, 7);
}

uint64_t type metadata accessor for TimedReference()
{
  return sub_100040C54();
}

void sub_100059650()
{
  sub_1000597D8();
  if (v0 <= 0x3F) {
    swift_initClassMetadata2();
  }
}

uint64_t sub_100059704()
{
  swift_unknownObjectRelease();
  sub_100059830(v0 + qword_10021A470);
  sub_1000332CC(*(void *)(v0 + qword_10021A480));
  sub_1000332CC(*(void *)(v0 + qword_10021A488));
  swift_release();
  return v0;
}

uint64_t sub_10005976C()
{
  uint64_t v0 = sub_100059704();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v1, v2);
}

uint64_t type metadata accessor for TimedReference.State()
{
  return sub_100040C54();
}

void sub_1000597D8()
{
  if (!qword_10021A518)
  {
    type metadata accessor for ContinuousClock.Instant();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10021A518);
    }
  }
}

uint64_t sub_100059830(uint64_t a1)
{
  uint64_t v2 = sub_10002572C(&qword_10021A520);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *sub_100059890@<X0>(void *a1@<X0>, BOOL *a2@<X8>)
{
  return sub_100059578(a1, a2);
}

uint64_t sub_1000598AC(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  if (a1 == 0xD000000000000019)
  {
    sub_100025864();
    if (v6) {
      return 6;
    }
  }
  if (sub_1000268A8()) {
    return 6;
  }
  if (a1 == 0xD000000000000020)
  {
    sub_100025864();
    if (v6) {
      return 6;
    }
  }
  if (sub_1000268A8()) {
    return 6;
  }
  if (a1 == 0xD00000000000001DLL)
  {
    sub_100025864();
    if (v6) {
      return 6;
    }
  }
  if (sub_1000268A8()) {
    return 6;
  }
  if (a1 == 0xD000000000000027)
  {
    sub_100025864();
    if (v6) {
      return 6;
    }
  }
  if (sub_1000268A8()) {
    return 6;
  }
  if (a1 == 0xD000000000000011)
  {
    sub_100025864();
    if (v6) {
      return 7;
    }
  }
  if (sub_1000268A8()) {
    return 7;
  }
  if (a1 == 0xD00000000000001BLL)
  {
    sub_100025864();
    if (v6) {
      return 3;
    }
  }
  if (sub_1000268A8()) {
    return 3;
  }
  if (a1 == 0xD00000000000001ELL)
  {
    sub_100025864();
    if (v6) {
      return 3;
    }
  }
  if (sub_1000268A8()) {
    return 3;
  }
  if (a1 == 0xD000000000000016)
  {
    sub_100025864();
    if (v6) {
      return 1;
    }
  }
  if (sub_1000268A8()) {
    return 1;
  }
  if (a1 == 0xD000000000000010)
  {
    sub_100025864();
    if (v6) {
      return 1;
    }
  }
  sub_10000E090();
  if (sub_100025848()) {
    return 1;
  }
  if (a1 == 0xD000000000000018)
  {
    sub_100025864();
    if (v6) {
      return 13;
    }
  }
  char v5 = sub_1000268A8();
  BOOL v6 = a2 == 0x80000001001B25E0 && a1 == 0xD000000000000010;
  uint64_t result = 13;
  if (v6 || (v5 & 1) != 0) {
    return result;
  }
  if (sub_100025848()) {
    return 13;
  }
  if (a1 == 0xD000000000000022)
  {
    sub_100025864();
    if (v6) {
      return 13;
    }
  }
  if (sub_1000268A8()) {
    return 13;
  }
  if (a1 == 0xD000000000000013)
  {
    sub_100025864();
    if (v6) {
      return 5;
    }
  }
  if (sub_1000268A8()) {
    return 5;
  }
  if (a1 == 0xD000000000000012)
  {
    sub_100025864();
    if (v6) {
      return 5;
    }
  }
  if (sub_1000268A8()) {
    return 5;
  }
  if (a1 == 0xD00000000000003DLL)
  {
    sub_100025864();
    if (v6) {
      return 5;
    }
  }
  if (sub_1000268A8()) {
    return 5;
  }
  if (a1 == 0xD000000000000034)
  {
    sub_100025864();
    if (v6) {
      return 19;
    }
  }
  if (sub_1000268A8()) {
    return 19;
  }
  if (a1 == 0xD000000000000041)
  {
    sub_100025864();
    if (v6) {
      return 19;
    }
  }
  if (sub_1000268A8()) {
    return 19;
  }
  if (a1 == 0xD00000000000001ALL)
  {
    sub_100025864();
    if (v6) {
      return 20;
    }
  }
  if (sub_1000268A8()) {
    return 20;
  }
  if (a1 == 0xD000000000000028)
  {
    sub_100025864();
    if (v6) {
      return 20;
    }
  }
  if (sub_1000268A8()) {
    return 20;
  }
  if (a1 == 0xD00000000000002CLL)
  {
    sub_100025864();
    if (v6) {
      return 20;
    }
  }
  if (sub_1000268A8()) {
    return 20;
  }
  uint64_t result = sub_100059C3C(a1, a2);
  if (v7) {
    return 0;
  }
  return result;
}

uint64_t sub_100059C3C(uint64_t a1, uint64_t a2)
{
  if (qword_100218C08 != -1) {
    swift_once();
  }
  if (byte_100236B90 != 1) {
    return 0;
  }
  if (a1 == 0xD000000000000014)
  {
    sub_100025864();
    if (v7) {
      return 8;
    }
  }
  if (sub_1000268A8()) {
    return 8;
  }
  if (a1 == 0xD000000000000013)
  {
    sub_100025864();
    if (v7) {
      return 13;
    }
  }
  if (sub_1000268A8()) {
    return 13;
  }
  if (a1 == 0xD000000000000012)
  {
    sub_100025864();
    if (v7) {
      return 13;
    }
  }
  if (sub_1000268A8()) {
    return 13;
  }
  if (a1 == 0xD000000000000029)
  {
    sub_100025864();
    if (v7) {
      return 13;
    }
  }
  if (sub_1000268A8()) {
    return 13;
  }
  if (a1 == 0xD00000000000001DLL)
  {
    sub_100025864();
    if (v7) {
      return 13;
    }
  }
  sub_10000E090();
  if (sub_100025848()) {
    return 13;
  }
  if (a1 == 0xD000000000000021)
  {
    sub_100025864();
    if (v7) {
      return 13;
    }
  }
  sub_10000E090();
  uint64_t v16 = v5;
  if (sub_100025848()) {
    return 13;
  }
  if (a1 == 0xD000000000000018)
  {
    sub_100025864();
    if (v7) {
      return 13;
    }
  }
  sub_10000E090();
  char v6 = sub_100025848();
  BOOL v7 = a1 == 0xD00000000000001DLL && a2 == 0x80000001001B28C0;
  char v8 = v7;
  uint64_t result = 13;
  if (v6 & 1) != 0 || (v8) {
    return result;
  }
  char v9 = sub_100025848();
  BOOL v10 = a1 == 0xD000000000000018 && a2 == 0x80000001001B28E0;
  BOOL v11 = v10;
  uint64_t result = 13;
  if ((v9 & 1) != 0 || v11) {
    return result;
  }
  if (sub_100025848()) {
    return 13;
  }
  if (a1 == 0x2E6770762E6D6F63 && a2 == 0xED00007265766F52) {
    return 13;
  }
  if (sub_100025848()) {
    return 13;
  }
  if (a1 == 0xD000000000000010)
  {
    sub_100025864();
    if (v7) {
      return 13;
    }
  }
  if (sub_1000268A8()) {
    return 13;
  }
  if (a1 == 0xD00000000000001ELL)
  {
    sub_100025864();
    if (v7) {
      return 13;
    }
  }
  if (sub_1000268A8()) {
    return 13;
  }
  if (a1 == 0xD000000000000026)
  {
    sub_100025864();
    if (v7) {
      return 5;
    }
  }
  if (sub_1000268A8()) {
    return 5;
  }
  if (a1 == 0xD000000000000023)
  {
    sub_100025864();
    if (v7) {
      return 5;
    }
  }
  if (sub_1000268A8()) {
    return 5;
  }
  if (a1 == 0xD000000000000025)
  {
    sub_100025864();
    if (v7) {
      return 19;
    }
  }
  if (sub_1000268A8()) {
    return 19;
  }
  if (a1 == 0xD00000000000001CLL)
  {
    sub_100025864();
    if (v7) {
      return 20;
    }
  }
  char v13 = sub_1000268A8();
  BOOL v15 = a1 == v16 && a2 == 0x80000001001B29F0;
  uint64_t result = 20;
  if ((v13 & 1) == 0 && !v15)
  {
    if (sub_100025848()) {
      return 20;
    }
    else {
      return 0;
    }
  }
  return result;
}

void sub_10005A010(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  BOOL v7 = (uint64_t *)((char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  char v8 = *(void **)(v2 + 40);
  *BOOL v7 = v8;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  id v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v5 + 8))(v7, v4);
  if ((v8 & 1) == 0)
  {
    __break(1u);
LABEL_11:
    swift_once();
    goto LABEL_5;
  }
  if (*(unsigned char *)(v2 + 32) == (a1 & 1) || !swift_unknownObjectWeakLoadStrong()) {
    return;
  }
  if (qword_100218B78 != -1) {
    goto LABEL_11;
  }
LABEL_5:
  uint64_t v10 = type metadata accessor for Logger();
  sub_10002A10C(v10, (uint64_t)qword_100236A80);
  swift_retain();
  BOOL v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    char v13 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)char v13 = 67109120;
    LODWORD(v19) = *(unsigned __int8 *)(v2 + 32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "new managed status = %{BOOL}d", v13, 8u);
    swift_slowDealloc();
  }
  else
  {

    swift_release();
  }
  id v14 = [self defaultCenter];
  sub_10002572C((uint64_t *)&unk_10021BAE0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1001A2A20;
  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v20 = v16;
  AnyHashable.init<A>(_:)();
  *(void *)(inited + 96) = type metadata accessor for ContextUpdate(0);
  *(unsigned char *)sub_10002E5E8((uint64_t *)(inited + 72)) = *(unsigned char *)(v2 + 32);
  swift_storeEnumTagMultiPayload();
  uint64_t v17 = Dictionary.init(dictionaryLiteral:)();
  sub_10010553C(@"com.apple.parsecd.contextUpdate", 0, v17, v14);
  swift_unknownObjectRelease();
}

void sub_10005A348(char a1)
{
  char v2 = *(unsigned char *)(v1 + 32);
  *(unsigned char *)(v1 + 3sub_100034730((uint64_t)"SIGTERM", 7, 2) = a1;
  sub_10005A010(v2);
}

uint64_t sub_10005A358(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_10002572C(&qword_10021A5E0);
  __chkstk_darwin(v6 - 8);
  sub_10000DFD0();
  uint64_t v9 = v8 - v7;
  *(void *)(v3 + 24) = 0;
  swift_unknownObjectWeakInit();
  *(_WORD *)(v3 + 3sub_100034730((uint64_t)"SIGTERM", 7, 2) = 0;
  *(void *)(v3 + 24) = a2;
  swift_unknownObjectWeakAssign();
  sub_10005B134();
  type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  sub_100020C48();
  __chkstk_darwin(v10);
  sub_10000DFD0();
  (*(void (**)(uint64_t, void))(v13 + 104))(v12 - v11, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:));
  uint64_t v14 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v14 - 8);
  sub_100017DE0();
  static DispatchQoS.unspecified.getter();
  uint64_t v15 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v15);
  sub_10000DFD0();
  sub_10002FFEC((unint64_t *)&qword_10021BFF0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10002572C(&qword_10021A2E0);
  sub_100057EEC((unint64_t *)&qword_10021C000, &qword_10021A2E0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  *(void *)(v3 + 40) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v16 = self;
  id v17 = [v16 defaultCenter];
  uint64_t v18 = qword_100218AB0;
  swift_retain();
  if (v18 != -1) {
    swift_once();
  }
  objc_msgSend(v17, "addObserver:selector:name:object:", v3, "accountsDidChange:", qword_100236850, 0, a1, _swiftEmptyArrayStorage);

  swift_release();
  id v19 = [v16 defaultCenter];
  [v19 addObserver:v3 selector:"updateDeviceRestrictions:" name:MCEffectiveSettingsChangedNotification object:0];

  uint64_t v20 = type metadata accessor for Notification();
  sub_10002538C(v9, 1, 1, v20);
  sub_10005A6B8();
  swift_unknownObjectRelease();
  sub_100019938(v9, &qword_10021A5E0);
  return v3;
}

uint64_t sub_10005A6B8()
{
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000085EC;
  id aBlock[3] = &unk_1001FC2E0;
  unint64_t v0 = _Block_copy(aBlock);
  type metadata accessor for DispatchQoS();
  sub_100020C48();
  __chkstk_darwin(v1);
  sub_100017DC8();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  type metadata accessor for DispatchWorkItemFlags();
  sub_100020C48();
  __chkstk_darwin(v2);
  sub_100017DE0();
  sub_10002FFEC((unint64_t *)&qword_100219260, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10002572C((uint64_t *)&unk_10021BAF0);
  sub_100057EEC((unint64_t *)&qword_100219270, (uint64_t *)&unk_10021BAF0);
  sub_10002581C();
  sub_10002AC80();
  _Block_release(v0);
  uint64_t v3 = sub_100017DF8();
  v4(v3);
  uint64_t v5 = sub_100024908();
  v6(v5);
  return swift_release();
}

uint64_t sub_10005A870(uint64_t a1)
{
  uint64_t v2 = sub_10002572C(&qword_10021A5E0);
  __chkstk_darwin(v2 - 8);
  sub_10000DFD0();
  uint64_t v5 = v4 - v3;
  sub_10005A6B8();
  sub_10005B1D8(a1, v5);
  uint64_t v6 = type metadata accessor for Notification();
  if (sub_100027BA4(v5, 1, v6) == 1)
  {
    uint64_t v7 = &qword_10021A5E0;
    uint64_t v8 = (long long *)v5;
    return sub_100019938((uint64_t)v8, v7);
  }
  uint64_t v10 = Notification.userInfo.getter();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  if (v10)
  {
    AnyHashable.init<A>(_:)();
    sub_100039D58((uint64_t)v12, v10, &v13);
    swift_bridgeObjectRelease();
    sub_100039C5C((uint64_t)v12);
    if (!v14)
    {
      uint64_t v7 = (uint64_t *)&unk_10021BB30;
      uint64_t v8 = &v13;
      return sub_100019938((uint64_t)v8, v7);
    }
    uint64_t result = swift_dynamicCast();
    if (result)
    {
      sub_10005AA20(0x756F636341524150, 0xEA0000000000746ELL, v11);
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t sub_10005AA20(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = v4;
  *(void *)(v8 + 24) = a1;
  *(void *)(v8 + 3sub_100034730((uint64_t)"SIGTERM", 7, 2) = a2;
  *(unsigned char *)(v8 + 40) = a3;
  void aBlock[4] = sub_10005B280;
  aBlock[5] = v8;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000085EC;
  id aBlock[3] = &unk_1001FC330;
  uint64_t v9 = _Block_copy(aBlock);
  type metadata accessor for DispatchQoS();
  sub_100020C48();
  __chkstk_darwin(v10);
  sub_100017DC8();
  swift_retain();
  swift_bridgeObjectRetain();
  static DispatchQoS.unspecified.getter();
  type metadata accessor for DispatchWorkItemFlags();
  sub_100020C48();
  __chkstk_darwin(v11);
  sub_100017DE0();
  sub_10002FFEC((unint64_t *)&qword_100219260, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10002572C((uint64_t *)&unk_10021BAF0);
  sub_100057EEC((unint64_t *)&qword_100219270, (uint64_t *)&unk_10021BAF0);
  sub_10002581C();
  sub_10002AC80();
  _Block_release(v9);
  uint64_t v12 = sub_100017DF8();
  v13(v12);
  uint64_t v14 = sub_100024908();
  v15(v14);
  return swift_release();
}

void sub_10005ACF0(uint64_t a1)
{
  id v2 = [self sharedConnection];
  if (!v2) {
    return;
  }
  id v15 = v2;
  if (swift_unknownObjectWeakLoadStrong())
  {
    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    if (sub_10005B17C(v3, v4, v15) == 2 || ([v15 isiTunesAllowed] & 1) == 0)
    {
      if ((*(unsigned char *)(a1 + 33) & 1) == 0)
      {
        uint64_t v7 = (char *)(a1 + 33);
        char v6 = 1;
        goto LABEL_13;
      }
    }
    else
    {
      unsigned int v5 = [v15 isAppInstallationAllowed];
      if (v5 == *(unsigned __int8 *)(a1 + 33))
      {
        char v6 = v5 ^ 1;
        uint64_t v7 = (char *)(a1 + 33);
LABEL_13:
        if (qword_100218B78 != -1) {
          swift_once();
        }
        uint64_t v8 = type metadata accessor for Logger();
        sub_10002A10C(v8, (uint64_t)qword_100236A80);
        uint64_t v9 = Logger.logObject.getter();
        os_log_type_t v10 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v9, v10))
        {
          uint64_t v11 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)uint64_t v11 = 134217984;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v9, v10, "new device restricted status = %ld", v11, 0xCu);
          swift_slowDealloc();
        }

        *uint64_t v7 = v6;
        id v12 = [self defaultCenter];
        sub_10002572C((uint64_t *)&unk_10021BAE0);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_1001A2A20;
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        AnyHashable.init<A>(_:)();
        *(void *)(inited + 96) = type metadata accessor for ContextUpdate(0);
        *(unsigned char *)sub_10002E5E8((uint64_t *)(inited + 72)) = *v7;
        swift_storeEnumTagMultiPayload();
        uint64_t v14 = Dictionary.init(dictionaryLiteral:)();
        sub_10010553C(@"com.apple.parsecd.contextUpdate", 0, v14, v12);

        swift_unknownObjectRelease();
        return;
      }
    }
    swift_unknownObjectRelease();
  }
}

uint64_t sub_10005B0D0()
{
  sub_10001CDE0(v0 + 16);

  return _swift_deallocClassInstance(v0, 48, 7);
}

uint64_t type metadata accessor for DeviceRestrictionsManager()
{
  return self;
}

unint64_t sub_10005B134()
{
  unint64_t result = qword_100219250;
  if (!qword_100219250)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100219250);
  }
  return result;
}

void sub_10005B174()
{
  sub_10005ACF0(v0);
}

id sub_10005B17C(uint64_t a1, uint64_t a2, void *a3)
{
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v5 = [a3 effectiveBoolValueForSetting:v4];

  return v5;
}

uint64_t sub_10005B1D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10002572C(&qword_10021A5E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10005B240()
{
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 41, 7);
}

void sub_10005B280()
{
  sub_10005A348(*(unsigned char *)(v0 + 40));
}

uint64_t sub_10005B2B4()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = (void *)sub_100024938();
    sub_10005B6B8(v1);
    return swift_release();
  }
  return result;
}

void sub_10005B310()
{
  if (qword_100218B50 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_10002A10C(v0, (uint64_t)qword_100236A08);
  sub_100024938();
  swift_errorRetain();
  swift_errorRetain();
  oslog = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    id v2 = (uint8_t *)swift_slowAlloc();
    uint64_t v3 = (void *)swift_slowAlloc();
    *(_DWORD *)id v2 = 138412290;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v3 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, oslog, v1, "VisibilityManager.performWithBag failed with: %@", v2, 0xCu);
    sub_10002572C(&qword_100219710);
    swift_arrayDestroy();
    sub_100017D40();
    sub_100017D40();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
}

void sub_10005B4D8()
{
  uint64_t v0 = Notification.userInfo.getter();
  if (!v0)
  {
    long long v4 = 0u;
    long long v5 = 0u;
    goto LABEL_6;
  }
  uint64_t v1 = v0;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  AnyHashable.init<A>(_:)();
  sub_100039D58((uint64_t)v3, v1, &v4);
  swift_bridgeObjectRelease();
  sub_100039C5C((uint64_t)v3);
  if (!*((void *)&v5 + 1))
  {
LABEL_6:
    sub_100019938((uint64_t)&v4, (uint64_t *)&unk_10021BB30);
    return;
  }
  sub_10005CA00();
  if (swift_dynamicCast())
  {
    id v2 = v3[0];
    sub_10005B6B8(v3[0]);
  }
}

uint64_t sub_10005B6B8(void *a1)
{
  uint64_t v2 = sub_10002572C(&qword_10021F2D0);
  __chkstk_darwin(v2 - 8);
  sub_10000DFD0();
  uint64_t v5 = v4 - v3;
  static TaskPriority.high.getter();
  uint64_t v6 = type metadata accessor for TaskPriority();
  sub_10002538C(v5, 0, 1, v6);
  uint64_t v7 = swift_allocObject();
  swift_weakInit();
  uint64_t v8 = (void *)swift_allocObject();
  v8[2] = 0;
  v8[3] = 0;
  v8[4] = v7;
  v8[5] = a1;
  id v9 = a1;
  sub_1001014E0(v5);
  swift_release();
  return sub_100019938(v5, &qword_10021F2D0);
}

uint64_t sub_10005B7D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void v5[6] = a4;
  v5[7] = a5;
  void v5[5] = a1;
  return _swift_task_switch(sub_10005B7F4, 0, 0);
}

uint64_t sub_10005B7F4()
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  *(void *)(v0 + 64) = Strong;
  if (Strong)
  {
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 7sub_100034730((uint64_t)"SIGTERM", 7, 2) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_10005B8F4;
    uint64_t v3 = *(void *)(v0 + 56);
    return sub_10005BA10(v3);
  }
  else
  {
    **(unsigned char **)(v0 + 40) = 1;
    uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
    return v5();
  }
}

uint64_t sub_10005B8F4()
{
  sub_100026880();
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_10005B9E8, 0, 0);
}

uint64_t sub_10005B9E8()
{
  **(unsigned char **)(v0 + 40) = *(void *)(v0 + 64) == 0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10005BA10(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return _swift_task_switch(sub_10005BA30, 0, 0);
}

uint64_t sub_10005BA30()
{
  uint64_t v1 = *(void **)(v0 + 16);
  os_transaction_create();
  uint64_t v2 = sub_100024938();
  sub_10005BAD0(v2, v1);
  swift_unknownObjectRelease();
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

void sub_10005BAD0(uint64_t a1, void *a2)
{
  uint64_t v3 = [self sharedConnection];
  if (v3)
  {
    uint64_t v4 = v3;
    sub_10005C238(a2, v3);
    sub_10005BBF8(a2, v4);
  }
  else
  {
    if (qword_100218B50 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_10002A10C(v5, (uint64_t)qword_100236A08);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v6, "failed to establish profile connection", v7, 2u);
      swift_slowDealloc();
    }
  }
}

void sub_10005BBF8(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for PegasusClientName();
  sub_100020C48();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  sub_10000DFD0();
  uint64_t v10 = v9 - v8;
  (*(void (**)(uint64_t, void, uint64_t))(v6 + 104))(v9 - v8, enum case for PegasusClientName.Messages(_:), v4);
  id v11 = a1;
  uint64_t v12 = PegasusClientName.rawValue.getter();
  uint64_t v14 = v13;
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v10, v4);
  id v15 = objc_allocWithZone((Class)PARBag);
  uint64_t v16 = (void *)sub_100024938();
  id v17 = sub_10001519C(v16, v12, v14);
  if (![v17 isEnabled])
  {
    id v18 = [objc_allocWithZone((Class)NSMutableDictionary) init];
    uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v21 = v20;
    sub_10002572C(&qword_100219EF0);
    uint64_t v22 = swift_allocObject();
    *(_OWORD *)(v22 + 16) = xmmword_1001A2A20;
    uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(v22 + 56) = &type metadata for String;
    *(void *)(v22 + 3sub_100034730((uint64_t)"SIGTERM", 7, 2) = v23;
    *(void *)(v22 + 40) = v24;
    sub_10005C758(v19, v21, v22, v18);
    id v40 = 0;
    id v25 = v18;
    static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)();
  }
  uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v28 = v27;
  uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v40 = 0;
  unsigned __int8 v31 = sub_10005C684(0, v26, v28, v29, v30, 0, 0, 0, 0, (uint64_t)&v40, a2);

  if (v31)
  {
    id v32 = v40;
  }
  else
  {
    id v33 = v40;
    swift_bridgeObjectRelease();
    _convertNSErrorToError(_:)();

    swift_willThrow();
    if (qword_100218B50 != -1) {
      swift_once();
    }
    uint64_t v34 = type metadata accessor for Logger();
    sub_10002A10C(v34, (uint64_t)qword_100236A08);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v37 = (uint8_t *)swift_slowAlloc();
      uint64_t v38 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v37 = 138412290;
      uint64_t v39 = (void *)_convertErrorToNSError(_:)();
      id v40 = v39;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v38 = v39;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "error setting MC restrictions: %@", v37, 0xCu);
      sub_10002572C(&qword_100219710);
      swift_arrayDestroy();
      sub_100017D40();
      sub_100017D40();

      swift_errorRelease();
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
}

void sub_10005C238(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for Requestor();
  sub_100020C48();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  sub_10000DFD0();
  uint64_t v10 = v9 - v8;
  uint64_t v11 = type metadata accessor for UserAgent();
  sub_100020C48();
  uint64_t v13 = v12;
  __chkstk_darwin(v14);
  sub_10000DFD0();
  uint64_t v17 = v16 - v15;
  (*(void (**)(uint64_t, void, uint64_t))(v6 + 104))(v10, enum case for Requestor.parsecd(_:), v4);
  id v18 = a1;
  UserAgent.init(_:requestor:)();
  uint64_t v19 = UserAgent.fullString.getter();
  uint64_t v21 = v20;
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v17, v11);
  id v22 = objc_allocWithZone((Class)PARBag);
  id v23 = sub_10001519C(v18, v19, v21);
  LOBYTE(v18) = [v23 isEnabled];
  uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_10005C608((char)v18, v24, v25, a2);
  if (qword_100218B50 != -1) {
    swift_once();
  }
  uint64_t v26 = type metadata accessor for Logger();
  sub_10002A10C(v26, (uint64_t)qword_100236A08);
  id v27 = v23;
  uint64_t v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v28, v29))
  {
    uint64_t v30 = swift_slowAlloc();
    uint64_t v38 = swift_slowAlloc();
    *(_DWORD *)uint64_t v30 = 136315394;
    uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v37 = sub_10001C274(v31, v32, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v30 + 1sub_100034730((uint64_t)"SIGTERM", 7, 2) = 2080;
    unsigned int v33 = objc_msgSend(v27, "isEnabled", v37, v38);
    BOOL v34 = v33 == 0;
    if (v33) {
      uint64_t v35 = 1702195828;
    }
    else {
      uint64_t v35 = 0x65736C6166;
    }
    if (v34) {
      unint64_t v36 = 0xE500000000000000;
    }
    else {
      unint64_t v36 = 0xE400000000000000;
    }
    sub_10001C274(v35, v36, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "set effective visibility setting for %s to %s", (uint8_t *)v30, 0x16u);
    swift_arrayDestroy();
    sub_100017D40();
    sub_100017D40();
  }
  else
  {
  }
}

uint64_t sub_10005C5A4()
{
  sub_10001CDE0(v0 + 16);
  swift_bridgeObjectRelease();

  return _swift_deallocClassInstance(v0, 48, 7);
}

uint64_t type metadata accessor for VisibilityManager()
{
  return self;
}

void sub_10005C608(char a1, uint64_t a2, uint64_t a3, void *a4)
{
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [a4 setBoolValue:a1 & 1 forSetting:v6];
}

id sub_10005C684(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  NSString v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v16 = [a11 applyRestrictionDictionary:a1 clientType:v14 clientUUID:v15 localizedClientDescription:a6 localizedWarningMessage:a7 outRestrictionChanged:a8 outEffectiveSettingsChanged:a9 outError:a10];

  return v16;
}

void sub_10005C758(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [a4 MCSetUnionRestriction:v5 values:isa];
}

uint64_t sub_10005C7F0()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10005C828()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10005C870(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_10005C930;
  return sub_10005B7D0(a1, v4, v5, v7, v6);
}

uint64_t sub_10005C930()
{
  sub_100026880();
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

unint64_t sub_10005CA00()
{
  unint64_t result = qword_10021D040;
  if (!qword_10021D040)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10021D040);
  }
  return result;
}

uint64_t sub_10005CA40()
{
  uint64_t result = sub_10003CBF0();
  *(unsigned char *)(result + 24) = 2;
  return result;
}

uint64_t type metadata accessor for SpotlightEngagedSuggestionController()
{
  return self;
}

NSString sub_10005CA84()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_1002368A8 = (uint64_t)result;
  return result;
}

uint64_t sub_10005CABC@<X0>(uint64_t a1@<X8>)
{
  *(_OWORD *)(a1 + 3sub_100034730((uint64_t)"SIGTERM", 7, 2) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 64) = 2;
  uint64_t v2 = (int *)type metadata accessor for PegasusContext(0);
  *(_OWORD *)(a1 + 7sub_100034730((uint64_t)"SIGTERM", 7, 2) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 15sub_100034730((uint64_t)"SIGTERM", 7, 2) = 0u;
  uint64_t v3 = a1 + v2[16];
  uint64_t v4 = type metadata accessor for Date();
  sub_10002538C(v3, 1, 1, v4);
  *(void *)(a1 + v2[17]) = 0;
  sub_100027DC8(v2[18]);
  sub_100027DC8(v2[19]);
  sub_100027DC8(v2[20]);
  sub_100027DC8(v2[21]);
  sub_100027DC8(v2[22]);
  *(_OWORD *)(a1 + v2[23]) = xmmword_1001A3D10;
  sub_100027DC8(v2[24]);
  sub_100027DC8(v2[25]);
  *(void *)(a1 + v2[26]) = 0;
  uint64_t v5 = v2[27];
  uint64_t v6 = (void *)(a1 + v2[28]);
  *uint64_t v6 = 0;
  v6[1] = 0;
  uint64_t v7 = (void *)(a1 + v2[29]);
  *uint64_t v7 = 0;
  v7[1] = 0;
  *(unsigned char *)(a1 + v2[30]) = 2;
  *(unsigned char *)(a1 + v2[32]) = 2;
  uint64_t v8 = (uint64_t *)(a1 + v5);
  *(unsigned char *)(a1 + v2[33]) = 2;
  sub_100027DC8(v2[34]);
  *(unsigned char *)(a1 + v2[35]) = 2;
  *(unsigned char *)(a1 + v2[36]) = 6;
  *(void *)(a1 + v2[37]) = 0;
  uint64_t result = static ConfigurationContext.regionCode.getter();
  *uint64_t v8 = result;
  v8[1] = v10;
  *(unsigned char *)(a1 + v2[31]) = 0;
  return result;
}

uint64_t sub_10005CC04@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return sub_10005CC34(a1, (uint64_t (*)(uint64_t))&SessionType.serverExperimentNamespace.getter, a2);
}

uint64_t sub_10005CC1C@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return sub_10005CC34(a1, (uint64_t (*)(uint64_t))&SessionType.deviceExperimentNamespace.getter, a2);
}

uint64_t sub_10005CC34@<X0>(uint64_t a1@<X2>, uint64_t (*a2)(uint64_t)@<X3>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for SessionType();
  sub_100020C48();
  uint64_t v8 = v7;
  __chkstk_darwin(v9);
  sub_10000DFD0();
  uint64_t v12 = v11 - v10;
  swift_bridgeObjectRetain();
  uint64_t v13 = SessionType.init(withClientIdentifier:)();
  uint64_t v14 = a2(v13);
  uint64_t v16 = v15;
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v12, v6);
  if (v16)
  {
    swift_bridgeObjectRetain();
    sub_10005CD5C(a1, v14, v16, a3);
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v18 = type metadata accessor for Trialpb_TrialExperiment();
    return sub_10002538C(a3, 1, 1, v18);
  }
}

void sub_10005CD5C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v43 = a4;
  type metadata accessor for Trialpb_TrialExperiment();
  sub_100020C48();
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v48 = (char *)&v42 - v13;
  uint64_t v49 = v12;
  uint64_t v14 = *(void *)(a1 + 56);
  uint64_t v44 = a1 + 56;
  uint64_t v15 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v16 = -1;
  if (v15 < 64) {
    uint64_t v16 = ~(-1 << v15);
  }
  unint64_t v17 = v16 & v14;
  uint64_t v47 = v12 + 16;
  uint64_t v50 = v12 + 32;
  int64_t v45 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v46 = (void (**)(char *, uint64_t))(v12 + 8);
  uint64_t v51 = a1;
  uint64_t v18 = v11;
  swift_bridgeObjectRetain();
  int64_t j = 0;
  if (!v17) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v20 = __clz(__rbit64(v17));
  v17 &= v17 - 1;
  for (unint64_t i = v20 | (j << 6); ; unint64_t i = __clz(__rbit64(v23)) + (j << 6))
  {
    unint64_t v32 = v48;
    uint64_t v31 = v49;
    (*(void (**)(char *, unint64_t, uint64_t))(v49 + 16))(v48, *(void *)(v51 + 48) + *(void *)(v49 + 72) * i, v18);
    unsigned int v33 = *(void (**)(char *, char *, uint64_t))(v31 + 32);
    v33(v10, v32, v18);
    if (Trialpb_TrialExperiment.experimentNamespace.getter() == a2 && v34 == a3)
    {
      swift_release();
      swift_bridgeObjectRelease();
LABEL_33:
      uint64_t v39 = v43;
      v33((char *)v43, v10, v18);
      uint64_t v40 = 0;
      uint64_t v41 = v18;
LABEL_35:
      sub_10002538C(v39, v40, 1, v41);
      swift_bridgeObjectRelease();
      return;
    }
    uint64_t v36 = a2;
    uint64_t v37 = a3;
    char v38 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v38)
    {
      swift_release();
      goto LABEL_33;
    }
    (*v46)(v10, v18);
    a3 = v37;
    a2 = v36;
    if (v17) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v22 = j + 1;
    if (__OFADD__(j, 1)) {
      break;
    }
    if (v22 >= v45) {
      goto LABEL_34;
    }
    unint64_t v23 = *(void *)(v44 + 8 * v22);
    ++j;
    if (v23) {
      goto LABEL_23;
    }
    int64_t j = v22 + 1;
    sub_100021C98();
    if (v24 == v25) {
      goto LABEL_34;
    }
    sub_100025400();
    if (v23) {
      goto LABEL_23;
    }
    int64_t j = v26 + 2;
    sub_100021C98();
    if (v24 == v25) {
      goto LABEL_34;
    }
    sub_100025400();
    if (v23) {
      goto LABEL_23;
    }
    int64_t j = v27 + 3;
    sub_100021C98();
    if (v24 == v25) {
      goto LABEL_34;
    }
    sub_100025400();
    if (v23) {
      goto LABEL_23;
    }
    int64_t v29 = v28 + 4;
    if (v29 >= v45)
    {
LABEL_34:
      swift_release();
      uint64_t v40 = 1;
      uint64_t v41 = v18;
      uint64_t v39 = v43;
      goto LABEL_35;
    }
    unint64_t v23 = *(void *)(v44 + 8 * v29);
    for (j = v29; !v23; int64_t v29 = v30 + 1)
    {
      int64_t j = v29 + 1;
      if (__OFADD__(v29, 1)) {
        goto LABEL_37;
      }
      sub_100021C98();
      if (v24 == v25) {
        goto LABEL_34;
      }
      sub_100025400();
    }
LABEL_23:
    unint64_t v17 = (v23 - 1) & v23;
  }
  __break(1u);
LABEL_37:
  __break(1u);
}

uint64_t sub_10005D094@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (a1 == 2 || a1 == 1) {
    goto LABEL_8;
  }
  if (a1)
  {
    *a2 = a1;
LABEL_8:
    sub_100024FD0();
  }
  type metadata accessor for Apple_Parsec_Feedback_V2_LookupSelectionType();
  sub_10001DCF8();
  uint64_t v2 = sub_10002CD64();

  return v3(v2);
}

uint64_t sub_10005D134(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    BOOL v4 = a1 == 67 && a2 == 0xE100000000000000;
    if (!v4 && (sub_10002ACA4() & 1) == 0 && (a1 != 70 || a2 != 0xE100000000000000)) {
      sub_10002ACA4();
    }
  }
  sub_100024FD0();
  type metadata accessor for Apple_Parsec_Search_PegasusQueryContext.TemperatureUnit();
  sub_10001DCF8();
  uint64_t v6 = sub_10002CD64();

  return v7(v6);
}

uint64_t sub_10005D200(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    BOOL v4 = a1 == 21333 && a2 == 0xE200000000000000;
    if (!v4 && (sub_10002ACA4() & 1) == 0)
    {
      BOOL v5 = a1 == 19285 && a2 == 0xE200000000000000;
      if (!v5 && (sub_10002ACA4() & 1) == 0 && (a1 != 18771 || a2 != 0xE200000000000000)) {
        sub_10002ACA4();
      }
    }
  }
  sub_100024FD0();
  type metadata accessor for Apple_Parsec_Search_PegasusQueryContext.MeasurementSystem();
  sub_10001DCF8();
  uint64_t v7 = sub_10002CD64();

  return v8(v7);
}

uint64_t sub_10005D300(unint64_t a1)
{
  if (a1 >= 7) {
    return 6;
  }
  else {
    return (0x5040302010006uLL >> (8 * a1));
  }
}

uint64_t sub_10005D328(unsigned __int8 a1)
{
  return a1 + 1;
}

Swift::Int sub_10005D334()
{
  return sub_1000B3A50(*v0);
}

void sub_10005D33C(uint64_t a1)
{
  sub_1000B3DAC(a1, *v1);
}

Swift::Int sub_10005D344()
{
  return sub_1000B4024();
}

uint64_t sub_10005D34C@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_10005D300(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10005D378@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10005D328(*v1);
  *a1 = result;
  return result;
}

uint64_t sub_10005D3A4()
{
  sub_100024FD0();
  type metadata accessor for Apple_Parsec_Search_V2_TransportationMode();
  sub_10001DCF8();
  uint64_t v0 = sub_10002CD64();

  return v1(v0);
}

uint64_t sub_10005D47C(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000010 && a2 == 0x80000001001B0D00
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x80000001001B2B80 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x80000001001B2BA0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000001001B2BC0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000001001B2BE0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001001B2C00 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x80000001001B0CE0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000001001B0D20 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001001B2C20 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else
  {
    BOOL v5 = a1 == 0x74696E55706D6574 && a2 == 0xE900000000000073;
    if (v5 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 9;
    }
    else
    {
      BOOL v6 = a1 == 0x6E6F69676572 && a2 == 0xE600000000000000;
      if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 10;
      }
      else
      {
        BOOL v7 = a1 == 0x7461636F4C6F6567 && a2 == 0xEB000000006E6F69;
        if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 11;
        }
        else
        {
          BOOL v8 = a1 == 0x7461636F4C6F6567 && a2 == 0xEE006567416E6F69;
          if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 12;
          }
          else
          {
            BOOL v9 = a1 == 0x6563616C506F6567 && a2 == 0xEC0000006B72616DLL;
            if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              return 13;
            }
            else if (a1 == 0xD000000000000011 && a2 == 0x80000001001B2C40 {
                   || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            }
            {
              swift_bridgeObjectRelease();
              return 14;
            }
            else if (a1 == 0xD000000000000011 && a2 == 0x80000001001B2C60 {
                   || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            }
            {
              swift_bridgeObjectRelease();
              return 15;
            }
            else if (a1 == 0xD000000000000014 && a2 == 0x80000001001B0CC0 {
                   || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            }
            {
              swift_bridgeObjectRelease();
              return 16;
            }
            else if (a1 == 0xD00000000000001ALL && a2 == 0x80000001001B2C80 {
                   || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            }
            {
              swift_bridgeObjectRelease();
              return 17;
            }
            else if (a1 == 0xD000000000000020 && a2 == 0x80000001001B2CA0 {
                   || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            }
            {
              swift_bridgeObjectRelease();
              return 18;
            }
            else if (a1 == 0xD000000000000011 && a2 == 0x80000001001B2CD0 {
                   || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            }
            {
              swift_bridgeObjectRelease();
              return 19;
            }
            else if (a1 == 0xD000000000000017 && a2 == 0x80000001001B2CF0 {
                   || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            }
            {
              swift_bridgeObjectRelease();
              return 20;
            }
            else if (a1 == 0xD00000000000001BLL && a2 == 0x80000001001B2D10 {
                   || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            }
            {
              swift_bridgeObjectRelease();
              return 21;
            }
            else if (a1 == 0xD00000000000001BLL && a2 == 0x80000001001B2D30 {
                   || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            }
            {
              swift_bridgeObjectRelease();
              return 22;
            }
            else
            {
              BOOL v10 = a1 == 0x6F436E6F69676572 && a2 == 0xEA00000000006564;
              if (v10 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                return 23;
              }
              else if (a1 == 0xD000000000000013 && a2 == 0x80000001001B2D50 {
                     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              }
              {
                swift_bridgeObjectRelease();
                return 24;
              }
              else
              {
                BOOL v11 = a1 == 0x7469617274726F70 && a2 == 0xEF6E6F6973726556;
                if (v11 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                {
                  swift_bridgeObjectRelease();
                  return 25;
                }
                else if (a1 == 0xD000000000000010 && a2 == 0x80000001001B2D70 {
                       || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                }
                {
                  swift_bridgeObjectRelease();
                  return 26;
                }
                else if (a1 == 0xD000000000000015 && a2 == 0x80000001001B2D90 {
                       || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                }
                {
                  swift_bridgeObjectRelease();
                  return 27;
                }
                else if (a1 == 0xD000000000000010 && a2 == 0x80000001001B2A50 {
                       || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                }
                {
                  swift_bridgeObjectRelease();
                  return 28;
                }
                else if (a1 == 0xD000000000000010 && a2 == 0x80000001001B2A70 {
                       || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                }
                {
                  swift_bridgeObjectRelease();
                  return 29;
                }
                else if (a1 == 0xD000000000000014 && a2 == 0x80000001001B2DB0 {
                       || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                }
                {
                  swift_bridgeObjectRelease();
                  return 30;
                }
                else
                {
                  BOOL v12 = a1 == 0x4569726953796568 && a2 == 0xEE0064656C62616ELL;
                  if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                  {
                    swift_bridgeObjectRelease();
                    return 31;
                  }
                  else if (a1 == 0xD000000000000012 && a2 == 0x80000001001B2DD0 {
                         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                  }
                  {
                    swift_bridgeObjectRelease();
                    return 32;
                  }
                  else if (a1 == 0xD00000000000001DLL && a2 == 0x80000001001B2DF0)
                  {
                    swift_bridgeObjectRelease();
                    return 33;
                  }
                  else
                  {
                    char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
                    swift_bridgeObjectRelease();
                    if (v13) {
                      return 33;
                    }
                    else {
                      return 34;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t sub_10005E0E0()
{
  return 34;
}

uint64_t sub_10005E0E8()
{
  return 0;
}

uint64_t sub_10005E0F4(char a1)
{
  uint64_t result = 0xD000000000000010;
  switch(a1)
  {
    case 1:
      uint64_t result = 0xD000000000000018;
      break;
    case 2:
      uint64_t result = 0xD000000000000017;
      break;
    case 3:
      uint64_t result = 0xD000000000000014;
      break;
    case 4:
      uint64_t result = 0xD000000000000012;
      break;
    case 5:
      uint64_t result = 0xD000000000000011;
      break;
    case 6:
      uint64_t result = 0xD000000000000017;
      break;
    case 7:
      uint64_t result = 0xD000000000000012;
      break;
    case 9:
      uint64_t v3 = 0x6E55706D6574;
      goto LABEL_25;
    case 10:
      uint64_t result = 0x6E6F69676572;
      break;
    case 11:
    case 12:
      uint64_t result = 0x7461636F4C6F6567;
      break;
    case 13:
      uint64_t result = 0x6563616C506F6567;
      break;
    case 14:
      uint64_t result = 0xD000000000000011;
      break;
    case 15:
      uint64_t result = 0xD000000000000011;
      break;
    case 16:
      uint64_t result = 0xD000000000000014;
      break;
    case 17:
      uint64_t result = 0xD00000000000001ALL;
      break;
    case 18:
      uint64_t result = 0xD000000000000020;
      break;
    case 19:
      uint64_t result = 0xD000000000000011;
      break;
    case 20:
      uint64_t result = 0xD000000000000017;
      break;
    case 21:
      uint64_t result = 0xD00000000000001BLL;
      break;
    case 22:
      uint64_t result = 0xD00000000000001BLL;
      break;
    case 23:
      uint64_t result = 0x6F436E6F69676572;
      break;
    case 24:
      uint64_t result = 0xD000000000000013;
      break;
    case 25:
      uint64_t v3 = 0x617274726F70;
LABEL_25:
      uint64_t result = v3 & 0xFFFFFFFFFFFFLL | 0x7469000000000000;
      break;
    case 27:
      uint64_t result = 0xD000000000000015;
      break;
    case 30:
      uint64_t result = 0xD000000000000014;
      break;
    case 31:
      uint64_t result = 0x4569726953796568;
      break;
    case 32:
      uint64_t result = 0xD000000000000012;
      break;
    case 33:
      uint64_t result = 0xD00000000000001DLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10005E428()
{
  return sub_10005E0F4(*v0);
}

uint64_t sub_10005E430@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10005D47C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10005E458()
{
  return sub_10005E0E8();
}

uint64_t sub_10005E478@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_10005E0E0();
  *a1 = result;
  return result;
}

uint64_t sub_10005E4A0(uint64_t a1)
{
  unint64_t v2 = sub_10006141C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10005E4DC(uint64_t a1)
{
  unint64_t v2 = sub_10006141C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10005E518()
{
  uint64_t v3 = sub_10002572C(&qword_10021A9E0);
  sub_100020C48();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  sub_100017DC8();
  sub_1000212C0();
  sub_10006141C();
  sub_100028CB8();
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v1)
  {
    sub_1000268CC(1);
    sub_1000268CC(2);
    sub_1000268CC(3);
    sub_100025874(*(unsigned __int8 *)(v0 + 64), 4);
    sub_1000268CC(5);
    sub_1000268CC(6);
    sub_10002572C(&qword_100219B08);
    sub_100061468();
    sub_10002B100();
    sub_1000242D4();
    sub_1000268CC(8);
    sub_1000268CC(9);
    sub_1000268CC(10);
    sub_100023FA0(0, &qword_10021A9F8);
    sub_10006151C(&qword_10021AA00, &qword_10021A9F8);
    sub_10002ACC0();
    sub_1000242D4();
    BOOL v8 = (int *)type metadata accessor for PegasusContext(0);
    type metadata accessor for Date();
    sub_1000614D4(&qword_10021AA08, (void (*)(uint64_t))&type metadata accessor for Date);
    sub_1000242D4();
    sub_100023FA0(0, &qword_10021AA10);
    sub_10006151C(&qword_10021AA18, &qword_10021AA10);
    sub_10002ACC0();
    sub_1000242D4();
    sub_100023E54(v8[18]);
    sub_1000268CC(14);
    sub_100023E54(v8[19]);
    sub_1000268CC(15);
    sub_100023E54(v8[20]);
    sub_1000268CC(16);
    sub_100023E54(v8[21]);
    sub_1000268CC(17);
    sub_100023E54(v8[22]);
    sub_1000268CC(18);
    sub_100061560();
    sub_1000242D4();
    sub_100023E54(v8[24]);
    sub_1000268CC(20);
    sub_100023E54(v8[25]);
    sub_1000268CC(21);
    sub_10002B100();
    sub_1000242D4();
    sub_100023E54(v8[27]);
    sub_1000268CC(23);
    sub_100023E54(v8[28]);
    sub_1000268CC(24);
    sub_100023E54(v8[29]);
    sub_1000268CC(25);
    sub_100025874(*(unsigned __int8 *)(v0 + v8[30]), 26);
    KeyedEncodingContainer.encode(_:forKey:)();
    sub_100025874(*(unsigned __int8 *)(v0 + v8[32]), 28);
    sub_100025874(*(unsigned __int8 *)(v0 + v8[33]), 29);
    sub_100023E54(v8[34]);
    sub_1000268CC(30);
    sub_100025874(*(unsigned __int8 *)(v0 + v8[35]), 31);
    sub_1000615AC();
    sub_1000242D4();
    type metadata accessor for PrivacyProxyUserTier(0);
    sub_1000614D4(&qword_10021AA30, type metadata accessor for PrivacyProxyUserTier);
    sub_10002ACC0();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v2, v3);
}

uint64_t sub_10005EB4C()
{
  return sub_10005E518();
}

uint64_t sub_10005EB64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  BOOL v7 = (int *)type metadata accessor for LocationContext(0);
  sub_10001DCF8();
  __chkstk_darwin(v8);
  BOOL v10 = (void *)((char *)__dst - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for ContextUpdate(0);
  sub_10001DCF8();
  __chkstk_darwin(v11);
  sub_100017DC8();
  sub_100061638(a1, v3, (void (*)(void))type metadata accessor for ContextUpdate);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v27 = *(void *)v3;
      uint64_t v28 = *(void *)(v3 + 8);
      swift_bridgeObjectRelease();
      *(void *)(v2 + 7sub_100034730((uint64_t)"SIGTERM", 7, 2) = v27;
      *(void *)(v2 + 80) = v28;
      return sub_100061638(v2, a2, (void (*)(void))type metadata accessor for PegasusContext);
    case 2u:
      sub_100061698(v3, (uint64_t)v10);
      uint64_t v29 = *v10;

      *(void *)(v2 + 160) = v29;
      uint64_t v30 = (uint64_t)v10 + v7[5];
      uint64_t v31 = (int *)type metadata accessor for PegasusContext(0);
      sub_100032DFC(v30, v2 + v31[16]);
      uint64_t v32 = *(uint64_t *)((char *)v10 + v7[6]);
      uint64_t v33 = v31[17];

      *(void *)(v2 + v3sub_100034730((uint64_t)"SIGINT", 6, 3) = v32;
      sub_10002ECF8();
      sub_100026408();
      *uint64_t v4 = v32;
      v4[1] = v33;
      sub_10002ECF8();
      sub_100026408();
      *uint64_t v4 = v32;
      v4[1] = v33;
      sub_10002ECF8();
      sub_100026408();
      *uint64_t v4 = v32;
      v4[1] = v33;
      sub_10002ECF8();
      sub_100026408();
      *uint64_t v4 = v32;
      v4[1] = v33;
      uint64_t v34 = *(uint64_t *)((char *)v10 + v7[11]);
      uint64_t v35 = v31[26];
      swift_bridgeObjectRelease();
      *(void *)(v2 + v35) = v34;
      return sub_100061638(v2, a2, (void (*)(void))type metadata accessor for PegasusContext);
    case 3u:
      uint64_t v36 = *(void *)v3;
      uint64_t v37 = *(void *)(v3 + 8);
      uint64_t v38 = v2 + *(int *)(type metadata accessor for PegasusContext(0) + 92);
      sub_10000A330(*(void *)v38, *(void *)(v38 + 8));
      *(void *)uint64_t v38 = v36;
      *(void *)(v38 + 8) = v37;
      return sub_100061638(v2, a2, (void (*)(void))type metadata accessor for PegasusContext);
    case 4u:
      uint64_t v40 = *(void *)v3;
      uint64_t v39 = *(void *)(v3 + 8);
      char v41 = *(unsigned char *)(v3 + 16);
      uint64_t v42 = (int *)type metadata accessor for PegasusContext(0);
      uint64_t v43 = (void *)(v2 + v42[20]);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *uint64_t v43 = v40;
      v43[1] = v39;
      uint64_t v44 = sub_10007DA50(v41);
      uint64_t v46 = v45;
      uint64_t v47 = (uint64_t *)(v2 + v42[21]);
      swift_bridgeObjectRelease();
      *uint64_t v47 = v44;
      v47[1] = v46;
      swift_bridgeObjectRelease();
      uint64_t v48 = (_OWORD *)(v2 + v42[22]);
      swift_bridgeObjectRelease();
      *uint64_t v48 = xmmword_1001A43B0;
      return sub_100061638(v2, a2, (void (*)(void))type metadata accessor for PegasusContext);
    case 5u:
      uint64_t v49 = *(void *)v3;
      uint64_t v50 = *(void *)(v3 + 8);
      uint64_t v52 = *(void *)(v3 + 16);
      uint64_t v51 = *(void *)(v3 + 24);
      uint64_t v53 = type metadata accessor for PegasusContext(0);
      sub_100026408();
      *uint64_t v4 = v49;
      v4[1] = v50;
      long long v54 = (void *)(v2 + *(int *)(v53 + 116));
      swift_bridgeObjectRelease();
      *long long v54 = v52;
      v54[1] = v51;
      return sub_100061638(v2, a2, (void (*)(void))type metadata accessor for PegasusContext);
    case 6u:
      uint64_t v55 = *(int *)(sub_1000184A8() + 120);
      goto LABEL_17;
    case 7u:
      uint64_t v55 = *(int *)(sub_1000184A8() + 128);
      goto LABEL_17;
    case 8u:
      uint64_t v55 = *(int *)(sub_1000184A8() + 132);
      goto LABEL_17;
    case 9u:
      uint64_t v55 = *(int *)(sub_1000184A8() + 144);
      goto LABEL_17;
    case 0xAu:
      uint64_t v56 = *(void *)v3;
      uint64_t v57 = *(void *)(v3 + 8);
      swift_bridgeObjectRelease();
      *(void *)(v2 + 11sub_100034730((uint64_t)"SIGTERM", 7, 2) = v56;
      *(void *)(v2 + 120) = v57;
      return sub_100061638(v2, a2, (void (*)(void))type metadata accessor for PegasusContext);
    case 0xBu:
      uint64_t v58 = *(void *)v3;
      uint64_t v59 = *(void *)(v3 + 8);
      swift_bridgeObjectRelease();
      *(void *)(v2 + 48) = v58;
      *(void *)(v2 + 56) = v59;
      return sub_100061638(v2, a2, (void (*)(void))type metadata accessor for PegasusContext);
    case 0xCu:
      uint64_t v60 = *(void *)v3;
      uint64_t v61 = *(void *)(v3 + 8);
      char v62 = *(unsigned char *)(v3 + 16);
      uint64_t v63 = type metadata accessor for PegasusContext(0);
      long long v64 = (void *)(v2 + *(int *)(v63 + 136));
      swift_bridgeObjectRelease();
      void *v64 = v60;
      v64[1] = v61;
      *(unsigned char *)(v2 + *(int *)(v63 + 140)) = v62;
      return sub_100061638(v2, a2, (void (*)(void))type metadata accessor for PegasusContext);
    case 0xDu:
      uint64_t v65 = *(void *)v3;
      *(void *)(v2 + *(int *)(type metadata accessor for PegasusContext(0) + 148)) = v65;
      return sub_100061638(v2, a2, (void (*)(void))type metadata accessor for PegasusContext);
    case 0xEu:
      uint64_t v55 = *(int *)(sub_1000184A8() + 124);
LABEL_17:
      *(unsigned char *)(v2 + v55) = (_BYTE)v7;
      break;
    default:
      memcpy(__dst, (const void *)v3, sizeof(__dst));
      uint64_t v13 = __dst[0];
      uint64_t v12 = __dst[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)uint64_t v2 = v13;
      *(void *)(v2 + 8) = v12;
      uint64_t v15 = __dst[2];
      uint64_t v14 = __dst[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(v2 + 16) = v15;
      *(void *)(v2 + 24) = v14;
      uint64_t v17 = __dst[4];
      uint64_t v16 = __dst[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(v2 + 3sub_100034730((uint64_t)"SIGTERM", 7, 2) = v17;
      *(void *)(v2 + 40) = v16;
      *(unsigned char *)(v2 + 64) = __dst[6];
      uint64_t v19 = __dst[7];
      uint64_t v18 = __dst[8];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(v2 + 7sub_100034730((uint64_t)"SIGTERM", 7, 2) = v19;
      *(void *)(v2 + 80) = v18;
      uint64_t v21 = __dst[9];
      uint64_t v20 = __dst[10];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(v2 + 88) = v21;
      *(void *)(v2 + 96) = v20;
      uint64_t v22 = __dst[11];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(v2 + 104) = v22;
      uint64_t v24 = __dst[12];
      uint64_t v23 = __dst[13];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(v2 + 128) = v24;
      *(void *)(v2 + 136) = v23;
      uint64_t v26 = __dst[14];
      uint64_t v25 = __dst[15];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      sub_1000616FC((uint64_t)__dst);
      *(void *)(v2 + 144) = v26;
      *(void *)(v2 + 15sub_100034730((uint64_t)"SIGTERM", 7, 2) = v25;
      break;
  }
  return sub_100061638(v2, a2, (void (*)(void))type metadata accessor for PegasusContext);
}

unint64_t sub_10005F034(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001F9F58, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 5) {
    return 5;
  }
  else {
    return v3;
  }
}

uint64_t sub_10005F084(char a1)
{
  return sub_1000283F8(a1);
}

uint64_t sub_10005F094(char *a1, char *a2)
{
  return sub_1000B97A8(*a1, *a2);
}

Swift::Int sub_10005F0A0()
{
  return sub_1000B3A94(*v0);
}

uint64_t sub_10005F0A8()
{
  return sub_1000B3EE8();
}

Swift::Int sub_10005F0B0()
{
  return sub_1000B3F28();
}

unint64_t sub_10005F0B8@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10005F034(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10005F0E8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10005F084(*v1);
  *a1 = result;
  a1[1] = 0xE100000000000000;
  return result;
}

uint64_t sub_10005F118()
{
  return sub_10005F084(*v0);
}

uint64_t sub_10005F138@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_10005F080(a1);
  *a2 = result;
  return result;
}

void sub_10005F160(unsigned char *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_10005F16C(uint64_t a1)
{
  unint64_t v2 = sub_10005F390();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10005F1A8(uint64_t a1)
{
  unint64_t v2 = sub_10005F390();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t Trialpb_TrialExperiment.encode(to:)()
{
  sub_10002572C(&qword_10021A868);
  sub_100020C48();
  __chkstk_darwin(v1);
  sub_1000212C0();
  sub_10005F390();
  sub_100028CB8();
  Trialpb_TrialExperiment.experimentNamespace.getter();
  sub_100016580();
  if (v0)
  {
    uint64_t v2 = sub_1000274D0();
    v3(v2);
    return swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    Trialpb_TrialExperiment.experimentID.getter();
    sub_100016580();
    swift_bridgeObjectRelease();
    Trialpb_TrialExperiment.treatmentID.getter();
    sub_100016580();
    swift_bridgeObjectRelease();
    Trialpb_TrialExperiment.deploymentID.getter();
    KeyedEncodingContainer.encode(_:forKey:)();
    Trialpb_TrialExperiment.compatibilityVersion.getter();
    KeyedEncodingContainer.encode(_:forKey:)();
    uint64_t v4 = sub_1000274D0();
    return v5(v4);
  }
}

unint64_t sub_10005F390()
{
  unint64_t result = qword_10021A870;
  if (!qword_10021A870)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10021A870);
  }
  return result;
}

uint64_t sub_10005F3DC()
{
  return Trialpb_TrialExperiment.encode(to:)();
}

uint64_t Trialpb_TrialExperiment.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_10002572C(&qword_10021A878);
  sub_100020C48();
  __chkstk_darwin(v4);
  sub_10000DFD0();
  uint64_t v5 = type metadata accessor for Trialpb_TrialExperiment();
  sub_100020C48();
  uint64_t v7 = v6;
  __chkstk_darwin(v8);
  sub_10000DFD0();
  uint64_t v11 = v10 - v9;
  Trialpb_TrialExperiment.init()();
  sub_10001B620(a1, a1[3]);
  sub_10005F390();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v11, v5);
  }
  else
  {
    sub_10000E0C4();
    Trialpb_TrialExperiment.experimentNamespace.setter();
    sub_10000E0C4();
    Trialpb_TrialExperiment.experimentID.setter();
    sub_10000E0C4();
    Trialpb_TrialExperiment.treatmentID.setter();
    KeyedDecodingContainer.decode(_:forKey:)();
    Trialpb_TrialExperiment.deploymentID.setter();
    KeyedDecodingContainer.decode(_:forKey:)();
    Trialpb_TrialExperiment.compatibilityVersion.setter();
    uint64_t v13 = sub_10002B27C();
    v14(v13);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(a2, v11, v5);
  }
  return sub_10001CA50((uint64_t)a1);
}

uint64_t sub_10005F654(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001F9FF0, v2);
  swift_bridgeObjectRelease();
  if (v3 == 1) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = 2;
  }
  if (v3) {
    return v4;
  }
  else {
    return 0;
  }
}

uint64_t sub_10005F6AC(char a1)
{
  if (a1) {
    return 0x64757469676E6F6CLL;
  }
  else {
    return 0x656475746974616CLL;
  }
}

uint64_t sub_10005F6E8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return Trialpb_TrialExperiment.init(from:)(a1, a2);
}

uint64_t sub_10005F700(char *a1, char *a2)
{
  return sub_1000B96C0(*a1, *a2);
}

Swift::Int sub_10005F70C()
{
  return sub_1000B3ADC();
}

uint64_t sub_10005F714()
{
  return sub_1000B3CAC();
}

Swift::Int sub_10005F71C()
{
  return sub_1000B4160();
}

uint64_t sub_10005F724@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_10005F654(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10005F754@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10005F6AC(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10005F780()
{
  return sub_10005F6AC(*v0);
}

uint64_t sub_10005F788@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_10005F6A8(a1);
  *a2 = result;
  return result;
}

void sub_10005F7B0(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_10005F7BC(uint64_t a1)
{
  unint64_t v2 = sub_10005F958();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10005F7F8(uint64_t a1)
{
  unint64_t v2 = sub_10005F958();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t CLLocation.encode(to:)()
{
  sub_10002572C(&qword_10021A880);
  sub_100020C48();
  __chkstk_darwin(v2);
  sub_1000212C0();
  sub_10005F958();
  sub_100028CB8();
  [v0 coordinate];
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    [v0 coordinate];
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  uint64_t v3 = sub_1000274D0();
  return v4(v3);
}

unint64_t sub_10005F958()
{
  unint64_t result = qword_10021A888;
  if (!qword_10021A888)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10021A888);
  }
  return result;
}

uint64_t sub_10005F9A4()
{
  return CLLocation.encode(to:)();
}

uint64_t sub_10005F9C8()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_10005FA18()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t getEnumTagSinglePayload for CountryCodeSource(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFB)
  {
    if (a2 + 5 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 5) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 6;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v5 = v6 - 6;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *sub_10005FB20(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10005FBECLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

void type metadata accessor for TransportationMode()
{
}

void *sub_10005FC20(uint64_t a1, uint64_t *a2, int *a3)
{
  unsigned int v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *unsigned int v4 = *a2;
    unsigned int v4 = (void *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    uint64_t v8 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v8;
    uint64_t v9 = a2[5];
    *(void *)(a1 + 3sub_100034730((uint64_t)"SIGTERM", 7, 2) = a2[4];
    *(void *)(a1 + 40) = v9;
    uint64_t v10 = a2[7];
    *(void *)(a1 + 48) = a2[6];
    *(void *)(a1 + 56) = v10;
    *(unsigned char *)(a1 + 64) = *((unsigned char *)a2 + 64);
    uint64_t v11 = a2[10];
    *(void *)(a1 + 7sub_100034730((uint64_t)"SIGTERM", 7, 2) = a2[9];
    *(void *)(a1 + 80) = v11;
    uint64_t v12 = a2[12];
    *(void *)(a1 + 88) = a2[11];
    *(void *)(a1 + 96) = v12;
    uint64_t v13 = a2[14];
    *(void *)(a1 + 104) = a2[13];
    *(void *)(a1 + 11sub_100034730((uint64_t)"SIGTERM", 7, 2) = v13;
    uint64_t v14 = a2[16];
    *(void *)(a1 + 120) = a2[15];
    *(void *)(a1 + 128) = v14;
    uint64_t v15 = a2[18];
    *(void *)(a1 + 136) = a2[17];
    *(void *)(a1 + 144) = v15;
    uint64_t v16 = a3[16];
    uint64_t v78 = (void *)a2[20];
    __dst = (void *)(a1 + v16);
    uint64_t v77 = (char *)a2 + v16;
    *(void *)(a1 + 15sub_100034730((uint64_t)"SIGTERM", 7, 2) = a2[19];
    *(void *)(a1 + 160) = v78;
    uint64_t v76 = type metadata accessor for Date();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v17 = v78;
    if (sub_100027BA4((uint64_t)v77, 1, v76))
    {
      uint64_t v18 = sub_10002572C(&qword_10021BB10);
      memcpy(__dst, v77, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(*(void *)(v76 - 8) + 16))(__dst, v77, v76);
      sub_10002538C((uint64_t)__dst, 0, 1, v76);
    }
    uint64_t v20 = a3[17];
    uint64_t v21 = a3[18];
    uint64_t v22 = *(void **)((char *)a2 + v20);
    *(void *)((char *)v4 + v20) = v22;
    uint64_t v23 = (void *)((char *)v4 + v21);
    uint64_t v24 = (uint64_t *)((char *)a2 + v21);
    uint64_t v25 = v24[1];
    *uint64_t v23 = *v24;
    v23[1] = v25;
    uint64_t v26 = a3[19];
    uint64_t v27 = a3[20];
    uint64_t v28 = (void *)((char *)v4 + v26);
    uint64_t v29 = (uint64_t *)((char *)a2 + v26);
    uint64_t v30 = v29[1];
    *uint64_t v28 = *v29;
    v28[1] = v30;
    uint64_t v31 = (void *)((char *)v4 + v27);
    uint64_t v32 = (uint64_t *)((char *)a2 + v27);
    uint64_t v33 = v32[1];
    void *v31 = *v32;
    v31[1] = v33;
    uint64_t v34 = a3[21];
    uint64_t v35 = a3[22];
    uint64_t v36 = (void *)((char *)v4 + v34);
    uint64_t v37 = (uint64_t *)((char *)a2 + v34);
    uint64_t v38 = v37[1];
    void *v36 = *v37;
    v36[1] = v38;
    uint64_t v39 = (void *)((char *)v4 + v35);
    uint64_t v40 = (uint64_t *)((char *)a2 + v35);
    uint64_t v41 = v40[1];
    *uint64_t v39 = *v40;
    v39[1] = v41;
    uint64_t v42 = a3[23];
    __dsta = (void *)((char *)v4 + v42);
    uint64_t v43 = (uint64_t *)((char *)a2 + v42);
    unint64_t v44 = *(uint64_t *)((char *)a2 + v42 + 8);
    id v45 = v22;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v44 >> 60 == 15)
    {
      *(_OWORD *)__dsta = *(_OWORD *)v43;
    }
    else
    {
      uint64_t v46 = *v43;
      sub_100027BCC(*v43, v44);
      uint64_t *__dsta = v46;
      __dsta[1] = v44;
    }
    uint64_t v47 = a3[24];
    uint64_t v48 = a3[25];
    uint64_t v49 = (void *)((char *)v4 + v47);
    uint64_t v50 = (uint64_t *)((char *)a2 + v47);
    uint64_t v51 = v50[1];
    *uint64_t v49 = *v50;
    v49[1] = v51;
    uint64_t v52 = (void *)((char *)v4 + v48);
    uint64_t v53 = (uint64_t *)((char *)a2 + v48);
    uint64_t v54 = v53[1];
    *uint64_t v52 = *v53;
    v52[1] = v54;
    uint64_t v55 = a3[27];
    *(void *)((char *)v4 + a3[26]) = *(uint64_t *)((char *)a2 + a3[26]);
    uint64_t v56 = (void *)((char *)v4 + v55);
    uint64_t v57 = (uint64_t *)((char *)a2 + v55);
    uint64_t v58 = v57[1];
    *uint64_t v56 = *v57;
    v56[1] = v58;
    uint64_t v59 = a3[28];
    uint64_t v60 = a3[29];
    uint64_t v61 = (void *)((char *)v4 + v59);
    char v62 = (uint64_t *)((char *)a2 + v59);
    uint64_t v63 = v62[1];
    void *v61 = *v62;
    v61[1] = v63;
    long long v64 = (void *)((char *)v4 + v60);
    uint64_t v65 = (uint64_t *)((char *)a2 + v60);
    uint64_t v66 = v65[1];
    void *v64 = *v65;
    v64[1] = v66;
    uint64_t v67 = a3[31];
    *((unsigned char *)v4 + a3[30]) = *((unsigned char *)a2 + a3[30]);
    *((unsigned char *)v4 + v67) = *((unsigned char *)a2 + v67);
    uint64_t v68 = a3[33];
    *((unsigned char *)v4 + a3[32]) = *((unsigned char *)a2 + a3[32]);
    *((unsigned char *)v4 + v68) = *((unsigned char *)a2 + v68);
    uint64_t v69 = a3[34];
    uint64_t v70 = a3[35];
    uint64_t v71 = (void *)((char *)v4 + v69);
    uint64_t v72 = (uint64_t *)((char *)a2 + v69);
    uint64_t v73 = v72[1];
    *uint64_t v71 = *v72;
    v71[1] = v73;
    *((unsigned char *)v4 + v70) = *((unsigned char *)a2 + v70);
    uint64_t v74 = a3[37];
    *((unsigned char *)v4 + a3[36]) = *((unsigned char *)a2 + a3[36]);
    *(void *)((char *)v4 + v74) = *(uint64_t *)((char *)a2 + v74);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_10005FFFC(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 3sub_100034730((uint64_t)"SIGTERM", 7, 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 7sub_100034730((uint64_t)"SIGTERM", 7, 2) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 11sub_100034730((uint64_t)"SIGTERM", 7, 2) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 15sub_100034730((uint64_t)"SIGTERM", 7, 2) = *(void *)(a2 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unsigned int v6 = *(void **)(a1 + 160);
  uint64_t v7 = *(void **)(a2 + 160);
  *(void *)(a1 + 160) = v7;
  id v8 = v7;

  uint64_t v9 = a3[16];
  uint64_t v10 = (void *)(a1 + v9);
  uint64_t v11 = (const void *)(a2 + v9);
  uint64_t v12 = type metadata accessor for Date();
  int v13 = sub_100027BA4((uint64_t)v10, 1, v12);
  int v14 = sub_100027BA4((uint64_t)v11, 1, v12);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
      sub_10002538C((uint64_t)v10, 0, 1, v12);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v15 = *(void *)(v12 - 8);
  if (v14)
  {
    (*(void (**)(void *, uint64_t))(v15 + 8))(v10, v12);
LABEL_6:
    uint64_t v16 = sub_10002572C(&qword_10021BB10);
    memcpy(v10, v11, *(void *)(*(void *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(v15 + 24))(v10, v11, v12);
LABEL_7:
  uint64_t v17 = a3[17];
  uint64_t v18 = *(void **)(a1 + v17);
  uint64_t v19 = *(void **)(a2 + v17);
  *(void *)(a1 + v17) = v19;
  id v20 = v19;

  uint64_t v21 = a3[18];
  uint64_t v22 = (void *)(a1 + v21);
  uint64_t v23 = (void *)(a2 + v21);
  void *v22 = *v23;
  v22[1] = v23[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v24 = a3[19];
  uint64_t v25 = (void *)(a1 + v24);
  uint64_t v26 = (void *)(a2 + v24);
  *uint64_t v25 = *v26;
  v25[1] = v26[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v27 = a3[20];
  uint64_t v28 = (void *)(a1 + v27);
  uint64_t v29 = (void *)(a2 + v27);
  *uint64_t v28 = *v29;
  v28[1] = v29[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v30 = a3[21];
  uint64_t v31 = (void *)(a1 + v30);
  uint64_t v32 = (void *)(a2 + v30);
  void *v31 = *v32;
  v31[1] = v32[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v33 = a3[22];
  uint64_t v34 = (void *)(a1 + v33);
  uint64_t v35 = (void *)(a2 + v33);
  *uint64_t v34 = *v35;
  v34[1] = v35[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v36 = a3[23];
  uint64_t v37 = (uint64_t *)(a1 + v36);
  uint64_t v38 = (uint64_t *)(a2 + v36);
  unint64_t v39 = *(void *)(a2 + v36 + 8);
  if (*(void *)(a1 + v36 + 8) >> 60 != 15)
  {
    if (v39 >> 60 != 15)
    {
      uint64_t v41 = *v38;
      sub_100027BCC(v41, v39);
      uint64_t v42 = *v37;
      unint64_t v43 = v37[1];
      *uint64_t v37 = v41;
      v37[1] = v39;
      sub_1000291B4(v42, v43);
      goto LABEL_14;
    }
    sub_1000605A4((uint64_t)v37);
    goto LABEL_12;
  }
  if (v39 >> 60 == 15)
  {
LABEL_12:
    *(_OWORD *)uint64_t v37 = *(_OWORD *)v38;
    goto LABEL_14;
  }
  uint64_t v40 = *v38;
  sub_100027BCC(v40, v39);
  *uint64_t v37 = v40;
  v37[1] = v39;
LABEL_14:
  uint64_t v44 = a3[24];
  id v45 = (void *)(a1 + v44);
  uint64_t v46 = (void *)(a2 + v44);
  *id v45 = *v46;
  v45[1] = v46[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v47 = a3[25];
  uint64_t v48 = (void *)(a1 + v47);
  uint64_t v49 = (void *)(a2 + v47);
  *uint64_t v48 = *v49;
  v48[1] = v49[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[26]) = *(void *)(a2 + a3[26]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v50 = a3[27];
  uint64_t v51 = (void *)(a1 + v50);
  uint64_t v52 = (void *)(a2 + v50);
  *uint64_t v51 = *v52;
  v51[1] = v52[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v53 = a3[28];
  uint64_t v54 = (void *)(a1 + v53);
  uint64_t v55 = (void *)(a2 + v53);
  *uint64_t v54 = *v55;
  v54[1] = v55[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v56 = a3[29];
  uint64_t v57 = (void *)(a1 + v56);
  uint64_t v58 = (void *)(a2 + v56);
  *uint64_t v57 = *v58;
  v57[1] = v58[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + a3[30]) = *(unsigned char *)(a2 + a3[30]);
  *(unsigned char *)(a1 + a3[31]) = *(unsigned char *)(a2 + a3[31]);
  *(unsigned char *)(a1 + a3[32]) = *(unsigned char *)(a2 + a3[32]);
  *(unsigned char *)(a1 + a3[33]) = *(unsigned char *)(a2 + a3[33]);
  uint64_t v59 = a3[34];
  uint64_t v60 = (void *)(a1 + v59);
  uint64_t v61 = (void *)(a2 + v59);
  *uint64_t v60 = *v61;
  v60[1] = v61[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + a3[35]) = *(unsigned char *)(a2 + a3[35]);
  *(unsigned char *)(a1 + a3[36]) = *(unsigned char *)(a2 + a3[36]);
  *(void *)(a1 + a3[37]) = *(void *)(a2 + a3[37]);
  return a1;
}

uint64_t sub_1000605A4(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000605F8(uint64_t a1, uint64_t a2, int *a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  long long v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 3sub_100034730((uint64_t)"SIGTERM", 7, 2) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(_OWORD *)(a1 + 7sub_100034730((uint64_t)"SIGTERM", 7, 2) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  long long v8 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 11sub_100034730((uint64_t)"SIGTERM", 7, 2) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v8;
  long long v9 = *(_OWORD *)(a2 + 144);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  uint64_t v10 = a3[16];
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (const void *)(a2 + v10);
  *(_OWORD *)(a1 + 144) = v9;
  uint64_t v13 = type metadata accessor for Date();
  if (sub_100027BA4((uint64_t)v12, 1, v13))
  {
    uint64_t v14 = sub_10002572C(&qword_10021BB10);
    memcpy(v11, v12, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
    sub_10002538C((uint64_t)v11, 0, 1, v13);
  }
  uint64_t v15 = a3[18];
  *(void *)(a1 + a3[17]) = *(void *)(a2 + a3[17]);
  *(_OWORD *)(a1 + v15) = *(_OWORD *)(a2 + v15);
  uint64_t v16 = a3[20];
  *(_OWORD *)(a1 + a3[19]) = *(_OWORD *)(a2 + a3[19]);
  *(_OWORD *)(a1 + v16) = *(_OWORD *)(a2 + v16);
  uint64_t v17 = a3[22];
  *(_OWORD *)(a1 + a3[21]) = *(_OWORD *)(a2 + a3[21]);
  *(_OWORD *)(a1 + v17) = *(_OWORD *)(a2 + v17);
  uint64_t v18 = a3[24];
  *(_OWORD *)(a1 + a3[23]) = *(_OWORD *)(a2 + a3[23]);
  *(_OWORD *)(a1 + v18) = *(_OWORD *)(a2 + v18);
  uint64_t v19 = a3[26];
  *(_OWORD *)(a1 + a3[25]) = *(_OWORD *)(a2 + a3[25]);
  *(void *)(a1 + v19) = *(void *)(a2 + v19);
  uint64_t v20 = a3[28];
  *(_OWORD *)(a1 + a3[27]) = *(_OWORD *)(a2 + a3[27]);
  *(_OWORD *)(a1 + v20) = *(_OWORD *)(a2 + v20);
  uint64_t v21 = a3[30];
  *(_OWORD *)(a1 + a3[29]) = *(_OWORD *)(a2 + a3[29]);
  *(unsigned char *)(a1 + v21) = *(unsigned char *)(a2 + v21);
  uint64_t v22 = a3[32];
  *(unsigned char *)(a1 + a3[31]) = *(unsigned char *)(a2 + a3[31]);
  *(unsigned char *)(a1 + v2sub_100034730((uint64_t)"SIGTERM", 7, 2) = *(unsigned char *)(a2 + v22);
  uint64_t v23 = a3[34];
  *(unsigned char *)(a1 + a3[33]) = *(unsigned char *)(a2 + a3[33]);
  *(_OWORD *)(a1 + v2sub_100034730((uint64_t)"SIGINT", 6, 3) = *(_OWORD *)(a2 + v23);
  uint64_t v24 = a3[36];
  *(unsigned char *)(a1 + a3[35]) = *(unsigned char *)(a2 + a3[35]);
  *(unsigned char *)(a1 + v24) = *(unsigned char *)(a2 + v24);
  *(void *)(a1 + a3[37]) = *(void *)(a2 + a3[37]);
  return a1;
}

uint64_t sub_1000607F4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 40);
  *(void *)(a1 + 3sub_100034730((uint64_t)"SIGTERM", 7, 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v9;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  uint64_t v10 = *(void *)(a2 + 80);
  *(void *)(a1 + 7sub_100034730((uint64_t)"SIGTERM", 7, 2) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v11;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void *)(a2 + 120);
  *(void *)(a1 + 11sub_100034730((uint64_t)"SIGTERM", 7, 2) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v12;
  swift_bridgeObjectRelease();
  uint64_t v13 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v13;
  swift_bridgeObjectRelease();
  uint64_t v14 = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 15sub_100034730((uint64_t)"SIGTERM", 7, 2) = v14;
  swift_bridgeObjectRelease();
  uint64_t v15 = *(void **)(a1 + 160);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);

  uint64_t v16 = a3[16];
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (const void *)(a2 + v16);
  uint64_t v19 = type metadata accessor for Date();
  int v20 = sub_100027BA4((uint64_t)v17, 1, v19);
  int v21 = sub_100027BA4((uint64_t)v18, 1, v19);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v19 - 8) + 32))(v17, v18, v19);
      sub_10002538C((uint64_t)v17, 0, 1, v19);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v22 = *(void *)(v19 - 8);
  if (v21)
  {
    (*(void (**)(void *, uint64_t))(v22 + 8))(v17, v19);
LABEL_6:
    uint64_t v23 = sub_10002572C(&qword_10021BB10);
    memcpy(v17, v18, *(void *)(*(void *)(v23 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(v22 + 40))(v17, v18, v19);
LABEL_7:
  uint64_t v24 = a3[17];
  uint64_t v25 = *(void **)(a1 + v24);
  *(void *)(a1 + v24) = *(void *)(a2 + v24);

  uint64_t v26 = a3[18];
  uint64_t v27 = (void *)(a1 + v26);
  uint64_t v28 = (uint64_t *)(a2 + v26);
  uint64_t v30 = *v28;
  uint64_t v29 = v28[1];
  *uint64_t v27 = v30;
  v27[1] = v29;
  swift_bridgeObjectRelease();
  uint64_t v31 = a3[19];
  uint64_t v32 = (void *)(a1 + v31);
  uint64_t v33 = (uint64_t *)(a2 + v31);
  uint64_t v35 = *v33;
  uint64_t v34 = v33[1];
  void *v32 = v35;
  v32[1] = v34;
  swift_bridgeObjectRelease();
  uint64_t v36 = a3[20];
  uint64_t v37 = (void *)(a1 + v36);
  uint64_t v38 = (uint64_t *)(a2 + v36);
  uint64_t v40 = *v38;
  uint64_t v39 = v38[1];
  *uint64_t v37 = v40;
  v37[1] = v39;
  swift_bridgeObjectRelease();
  uint64_t v41 = a3[21];
  uint64_t v42 = (void *)(a1 + v41);
  unint64_t v43 = (uint64_t *)(a2 + v41);
  uint64_t v45 = *v43;
  uint64_t v44 = v43[1];
  *uint64_t v42 = v45;
  v42[1] = v44;
  swift_bridgeObjectRelease();
  uint64_t v46 = a3[22];
  uint64_t v47 = (void *)(a1 + v46);
  uint64_t v48 = (uint64_t *)(a2 + v46);
  uint64_t v50 = *v48;
  uint64_t v49 = v48[1];
  *uint64_t v47 = v50;
  v47[1] = v49;
  swift_bridgeObjectRelease();
  uint64_t v51 = a3[23];
  uint64_t v52 = (uint64_t *)(a1 + v51);
  uint64_t v53 = (uint64_t *)(a2 + v51);
  unint64_t v54 = *(void *)(a1 + v51 + 8);
  if (v54 >> 60 != 15)
  {
    unint64_t v55 = v53[1];
    if (v55 >> 60 != 15)
    {
      uint64_t v56 = *v52;
      *uint64_t v52 = *v53;
      v52[1] = v55;
      sub_1000291B4(v56, v54);
      goto LABEL_12;
    }
    sub_1000605A4((uint64_t)v52);
  }
  *(_OWORD *)uint64_t v52 = *(_OWORD *)v53;
LABEL_12:
  uint64_t v57 = a3[24];
  uint64_t v58 = (void *)(a1 + v57);
  uint64_t v59 = (uint64_t *)(a2 + v57);
  uint64_t v61 = *v59;
  uint64_t v60 = v59[1];
  void *v58 = v61;
  v58[1] = v60;
  swift_bridgeObjectRelease();
  uint64_t v62 = a3[25];
  uint64_t v63 = (void *)(a1 + v62);
  long long v64 = (uint64_t *)(a2 + v62);
  uint64_t v66 = *v64;
  uint64_t v65 = v64[1];
  void *v63 = v66;
  v63[1] = v65;
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[26]) = *(void *)(a2 + a3[26]);
  swift_bridgeObjectRelease();
  uint64_t v67 = a3[27];
  uint64_t v68 = (void *)(a1 + v67);
  uint64_t v69 = (uint64_t *)(a2 + v67);
  uint64_t v71 = *v69;
  uint64_t v70 = v69[1];
  *uint64_t v68 = v71;
  v68[1] = v70;
  swift_bridgeObjectRelease();
  uint64_t v72 = a3[28];
  uint64_t v73 = (void *)(a1 + v72);
  uint64_t v74 = (uint64_t *)(a2 + v72);
  uint64_t v76 = *v74;
  uint64_t v75 = v74[1];
  *uint64_t v73 = v76;
  v73[1] = v75;
  swift_bridgeObjectRelease();
  uint64_t v77 = a3[29];
  uint64_t v78 = (void *)(a1 + v77);
  unint64_t v79 = (uint64_t *)(a2 + v77);
  uint64_t v81 = *v79;
  uint64_t v80 = v79[1];
  *uint64_t v78 = v81;
  v78[1] = v80;
  swift_bridgeObjectRelease();
  uint64_t v82 = a3[31];
  *(unsigned char *)(a1 + a3[30]) = *(unsigned char *)(a2 + a3[30]);
  *(unsigned char *)(a1 + v8sub_100034730((uint64_t)"SIGTERM", 7, 2) = *(unsigned char *)(a2 + v82);
  uint64_t v83 = a3[33];
  *(unsigned char *)(a1 + a3[32]) = *(unsigned char *)(a2 + a3[32]);
  *(unsigned char *)(a1 + v8sub_100034730((uint64_t)"SIGINT", 6, 3) = *(unsigned char *)(a2 + v83);
  uint64_t v84 = a3[34];
  uint64_t v85 = (void *)(a1 + v84);
  long long v86 = (uint64_t *)(a2 + v84);
  uint64_t v88 = *v86;
  uint64_t v87 = v86[1];
  *uint64_t v85 = v88;
  v85[1] = v87;
  swift_bridgeObjectRelease();
  uint64_t v89 = a3[36];
  *(unsigned char *)(a1 + a3[35]) = *(unsigned char *)(a2 + a3[35]);
  *(unsigned char *)(a1 + v89) = *(unsigned char *)(a2 + v89);
  *(void *)(a1 + a3[37]) = *(void *)(a2 + a3[37]);
  return a1;
}

uint64_t sub_100060C08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100060C1C);
}

uint64_t sub_100060C1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 2147483646)
  {
    sub_1000251C0();
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_10002572C(&qword_10021BB10);
    uint64_t v9 = a1 + *(int *)(a3 + 64);
    return sub_100027BA4(v9, a2, v8);
  }
}

uint64_t sub_100060CA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100060CB4);
}

uint64_t sub_100060CB4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 2147483646)
  {
    *(void *)(result + 8) = a2;
  }
  else
  {
    uint64_t v7 = sub_10002572C(&qword_10021BB10);
    uint64_t v8 = v5 + *(int *)(a4 + 64);
    return sub_10002538C(v8, a2, a2, v7);
  }
  return result;
}

void sub_100060D38()
{
  sub_1000442AC();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

__n128 initializeWithTake for StorefrontAccount(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

void type metadata accessor for SiriSettingsContext()
{
}

uint64_t getEnumTagSinglePayload for PARNetworkRequestFactory.NetworkRequestError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFF)
  {
    if (a2 + 1 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 1) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 2;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v5 = v6 - 2;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *sub_100060F0C(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100060FD8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *sub_100061000(unsigned char *result, char a2)
{
  *__n128 result = a2 & 1;
  return result;
}

void _s10CodingKeysOMa()
{
}

uint64_t getEnumTagSinglePayload for DevicePersistentDataManager.Activity(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFC)
  {
    if (a2 + 4 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 4) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 5;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v5 = v6 - 5;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *sub_1000610A0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *__n128 result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10006116CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 4;
        break;
    }
  }
  return result;
}

void _s10CodingKeysOMa_0()
{
}

unint64_t sub_1000611A4()
{
  unint64_t result = qword_10021A9A0;
  if (!qword_10021A9A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10021A9A0);
  }
  return result;
}

unint64_t sub_1000611F4()
{
  unint64_t result = qword_10021A9A8;
  if (!qword_10021A9A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10021A9A8);
  }
  return result;
}

unint64_t sub_100061244()
{
  unint64_t result = qword_10021A9B0;
  if (!qword_10021A9B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10021A9B0);
  }
  return result;
}

unint64_t sub_100061294()
{
  unint64_t result = qword_10021A9B8;
  if (!qword_10021A9B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10021A9B8);
  }
  return result;
}

unint64_t sub_1000612E4()
{
  unint64_t result = qword_10021A9C0;
  if (!qword_10021A9C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10021A9C0);
  }
  return result;
}

unint64_t sub_100061334()
{
  unint64_t result = qword_10021A9C8;
  if (!qword_10021A9C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10021A9C8);
  }
  return result;
}

unint64_t sub_100061384()
{
  unint64_t result = qword_10021A9D0;
  if (!qword_10021A9D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10021A9D0);
  }
  return result;
}

unint64_t sub_1000613D0()
{
  unint64_t result = qword_10021A9D8;
  if (!qword_10021A9D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10021A9D8);
  }
  return result;
}

unint64_t sub_10006141C()
{
  unint64_t result = qword_10021A9E8;
  if (!qword_10021A9E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10021A9E8);
  }
  return result;
}

unint64_t sub_100061468()
{
  unint64_t result = qword_10021A9F0;
  if (!qword_10021A9F0)
  {
    sub_1000371D4(&qword_100219B08);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10021A9F0);
  }
  return result;
}

uint64_t sub_1000614D4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10006151C(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100023FA0(255, a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100061560()
{
  unint64_t result = qword_10021AA20;
  if (!qword_10021AA20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10021AA20);
  }
  return result;
}

unint64_t sub_1000615AC()
{
  unint64_t result = qword_10021AA28;
  if (!qword_10021AA28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10021AA28);
  }
  return result;
}

uint64_t type metadata accessor for LocationContext(uint64_t a1)
{
  return sub_100027D28(a1, qword_10021AA98);
}

uint64_t type metadata accessor for ContextUpdate(uint64_t a1)
{
  return sub_100027D28(a1, qword_10021AB58);
}

uint64_t sub_100061638(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  sub_10001DCF8();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

uint64_t sub_100061698(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LocationContext(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000616FC(uint64_t a1)
{
  return a1;
}

void **sub_100061790(void **a1, void **a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = (char *)*a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    BOOL v7 = (void **)&v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain();
  }
  else
  {
    BOOL v7 = a1;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for Date();
    uint64_t v12 = v4;
    if (sub_100027BA4((uint64_t)v10, 1, v11))
    {
      uint64_t v13 = sub_10002572C(&qword_10021BB10);
      memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
      sub_10002538C((uint64_t)v9, 0, 1, v11);
    }
    uint64_t v14 = a3[6];
    uint64_t v15 = a3[7];
    uint64_t v16 = *(void **)((char *)a2 + v14);
    *(void **)((char *)v7 + v14) = v16;
    uint64_t v17 = (void **)((char *)v7 + v15);
    uint64_t v18 = (void **)((char *)a2 + v15);
    uint64_t v19 = v18[1];
    *uint64_t v17 = *v18;
    v17[1] = v19;
    uint64_t v20 = a3[8];
    uint64_t v21 = a3[9];
    uint64_t v22 = (void **)((char *)v7 + v20);
    uint64_t v23 = (void **)((char *)a2 + v20);
    uint64_t v24 = v23[1];
    void *v22 = *v23;
    v22[1] = v24;
    uint64_t v25 = (void **)((char *)v7 + v21);
    uint64_t v26 = (void **)((char *)a2 + v21);
    uint64_t v27 = v26[1];
    *uint64_t v25 = *v26;
    v25[1] = v27;
    uint64_t v28 = a3[10];
    uint64_t v29 = a3[11];
    uint64_t v30 = (void **)((char *)v7 + v28);
    uint64_t v31 = (void **)((char *)a2 + v28);
    uint64_t v32 = v31[1];
    *uint64_t v30 = *v31;
    v30[1] = v32;
    *(void **)((char *)v7 + v29) = *(void **)((char *)a2 + v29);
    id v33 = v16;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v7;
}

uint64_t sub_100061958(id *a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t)a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for Date();
  if (!sub_100027BA4(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void **sub_100061A48(void **a1, void **a2, int *a3)
{
  unsigned int v6 = *a2;
  *a1 = *a2;
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  id v11 = v6;
  if (sub_100027BA4((uint64_t)v9, 1, v10))
  {
    uint64_t v12 = sub_10002572C(&qword_10021BB10);
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    sub_10002538C((uint64_t)v8, 0, 1, v10);
  }
  uint64_t v13 = a3[6];
  uint64_t v14 = a3[7];
  uint64_t v15 = *(void **)((char *)a2 + v13);
  *(void **)((char *)a1 + v1sub_100034730((uint64_t)"SIGINT", 6, 3) = v15;
  uint64_t v16 = (void **)((char *)a1 + v14);
  uint64_t v17 = (void **)((char *)a2 + v14);
  uint64_t v18 = v17[1];
  *uint64_t v16 = *v17;
  v16[1] = v18;
  uint64_t v19 = a3[8];
  uint64_t v20 = a3[9];
  uint64_t v21 = (void **)((char *)a1 + v19);
  uint64_t v22 = (void **)((char *)a2 + v19);
  uint64_t v23 = v22[1];
  *uint64_t v21 = *v22;
  v21[1] = v23;
  uint64_t v24 = (void **)((char *)a1 + v20);
  uint64_t v25 = (void **)((char *)a2 + v20);
  uint64_t v26 = v25[1];
  *uint64_t v24 = *v25;
  v24[1] = v26;
  uint64_t v27 = a3[10];
  uint64_t v28 = a3[11];
  uint64_t v29 = (void **)((char *)a1 + v27);
  uint64_t v30 = (void **)((char *)a2 + v27);
  uint64_t v31 = v30[1];
  *uint64_t v29 = *v30;
  v29[1] = v31;
  *(void **)((char *)a1 + v28) = *(void **)((char *)a2 + v28);
  id v32 = v15;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void **sub_100061BC4(void **a1, void **a2, int *a3)
{
  unsigned int v6 = *a1;
  uint64_t v7 = *a2;
  *a1 = *a2;
  id v8 = v7;

  uint64_t v9 = a3[5];
  uint64_t v10 = (char *)a1 + v9;
  id v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for Date();
  int v13 = sub_100027BA4((uint64_t)v10, 1, v12);
  int v14 = sub_100027BA4((uint64_t)v11, 1, v12);
  if (!v13)
  {
    uint64_t v15 = *(void *)(v12 - 8);
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 24))(v10, v11, v12);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v15 + 8))(v10, v12);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    uint64_t v16 = sub_10002572C(&qword_10021BB10);
    memcpy(v10, v11, *(void *)(*(void *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
  sub_10002538C((uint64_t)v10, 0, 1, v12);
LABEL_7:
  uint64_t v17 = a3[6];
  uint64_t v18 = *(void **)((char *)a1 + v17);
  uint64_t v19 = *(void **)((char *)a2 + v17);
  *(void **)((char *)a1 + v17) = v19;
  id v20 = v19;

  uint64_t v21 = a3[7];
  uint64_t v22 = (void **)((char *)a1 + v21);
  uint64_t v23 = (void **)((char *)a2 + v21);
  void *v22 = *v23;
  v22[1] = v23[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v24 = a3[8];
  uint64_t v25 = (void **)((char *)a1 + v24);
  uint64_t v26 = (void **)((char *)a2 + v24);
  *uint64_t v25 = *v26;
  v25[1] = v26[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v27 = a3[9];
  uint64_t v28 = (void **)((char *)a1 + v27);
  uint64_t v29 = (void **)((char *)a2 + v27);
  *uint64_t v28 = *v29;
  v28[1] = v29[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v30 = a3[10];
  uint64_t v31 = (void **)((char *)a1 + v30);
  id v32 = (void **)((char *)a2 + v30);
  void *v31 = *v32;
  v31[1] = v32[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void **)((char *)a1 + a3[11]) = *(void **)((char *)a2 + a3[11]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *sub_100061E24(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  id v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  if (sub_100027BA4((uint64_t)v8, 1, v9))
  {
    uint64_t v10 = sub_10002572C(&qword_10021BB10);
    memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
    sub_10002538C((uint64_t)v7, 0, 1, v9);
  }
  uint64_t v11 = a3[7];
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  *(_OWORD *)((char *)a1 + v11) = *(_OWORD *)((char *)a2 + v11);
  uint64_t v12 = a3[9];
  *(_OWORD *)((char *)a1 + a3[8]) = *(_OWORD *)((char *)a2 + a3[8]);
  *(_OWORD *)((char *)a1 + v1sub_100034730((uint64_t)"SIGTERM", 7, 2) = *(_OWORD *)((char *)a2 + v12);
  uint64_t v13 = a3[11];
  *(_OWORD *)((char *)a1 + a3[10]) = *(_OWORD *)((char *)a2 + a3[10]);
  *(void *)((char *)a1 + v1sub_100034730((uint64_t)"SIGINT", 6, 3) = *(void *)((char *)a2 + v13);
  return a1;
}

void **sub_100061F48(void **a1, void **a2, int *a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;

  uint64_t v7 = a3[5];
  id v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  int v11 = sub_100027BA4((uint64_t)v8, 1, v10);
  int v12 = sub_100027BA4((uint64_t)v9, 1, v10);
  if (!v11)
  {
    uint64_t v13 = *(void *)(v10 - 8);
    if (!v12)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 40))(v8, v9, v10);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v12)
  {
LABEL_6:
    uint64_t v14 = sub_10002572C(&qword_10021BB10);
    memcpy(v8, v9, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  sub_10002538C((uint64_t)v8, 0, 1, v10);
LABEL_7:
  uint64_t v15 = a3[6];
  uint64_t v16 = *(void **)((char *)a1 + v15);
  *(void **)((char *)a1 + v15) = *(void **)((char *)a2 + v15);

  uint64_t v17 = a3[7];
  uint64_t v18 = (void **)((char *)a1 + v17);
  uint64_t v19 = (uint64_t *)((char *)a2 + v17);
  uint64_t v21 = *v19;
  uint64_t v20 = v19[1];
  *uint64_t v18 = v21;
  v18[1] = v20;
  swift_bridgeObjectRelease();
  uint64_t v22 = a3[8];
  uint64_t v23 = (void **)((char *)a1 + v22);
  uint64_t v24 = (uint64_t *)((char *)a2 + v22);
  uint64_t v26 = *v24;
  uint64_t v25 = v24[1];
  *uint64_t v23 = v26;
  v23[1] = v25;
  swift_bridgeObjectRelease();
  uint64_t v27 = a3[9];
  uint64_t v28 = (void **)((char *)a1 + v27);
  uint64_t v29 = (uint64_t *)((char *)a2 + v27);
  uint64_t v31 = *v29;
  uint64_t v30 = v29[1];
  *uint64_t v28 = v31;
  v28[1] = v30;
  swift_bridgeObjectRelease();
  uint64_t v32 = a3[10];
  id v33 = (void **)((char *)a1 + v32);
  uint64_t v34 = (uint64_t *)((char *)a2 + v32);
  uint64_t v36 = *v34;
  uint64_t v35 = v34[1];
  void *v33 = v36;
  v33[1] = v35;
  swift_bridgeObjectRelease();
  *(void **)((char *)a1 + a3[11]) = *(void **)((char *)a2 + a3[11]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100062158(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10006216C);
}

uint64_t sub_10006216C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10002572C(&qword_10021BB10);
  sub_1000248F0();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + *(int *)(a3 + 20);
    return sub_100027BA4(v9, a2, v8);
  }
  else
  {
    unint64_t v11 = *(void *)(a1 + *(int *)(a3 + 28) + 8);
    if (v11 >= 0xFFFFFFFF) {
      LODWORD(v11) = -1;
    }
    return (v11 + 1);
  }
}

uint64_t sub_100062204(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100062218);
}

void sub_100062218(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  sub_10002572C(&qword_10021BB10);
  sub_1000248F0();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a4 + 20);
    sub_10002538C(v11, a2, a2, v10);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 28) + 8) = (a2 - 1);
  }
}

void sub_1000622AC()
{
  sub_1000442AC();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t *sub_100062364(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v7 = a2[1];
        *a1 = *a2;
        a1[1] = v7;
        uint64_t v8 = a2[3];
        a1[2] = a2[2];
        a1[3] = v8;
        uint64_t v9 = a2[5];
        a1[4] = a2[4];
        a1[5] = v9;
        *((unsigned char *)a1 + 48) = *((unsigned char *)a2 + 48);
        uint64_t v10 = a2[8];
        a1[7] = a2[7];
        a1[8] = v10;
        uint64_t v11 = a2[10];
        a1[9] = a2[9];
        a1[10] = v11;
        uint64_t v12 = a2[12];
        a1[11] = a2[11];
        a1[12] = v12;
        uint64_t v13 = a2[14];
        a1[13] = a2[13];
        a1[14] = v13;
        a1[15] = a2[15];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_16;
      case 1u:
      case 0xAu:
      case 0xBu:
        uint64_t v28 = a2[1];
        *a1 = *a2;
        a1[1] = v28;
        swift_bridgeObjectRetain();
        goto LABEL_16;
      case 2u:
        uint64_t v15 = (void *)*a2;
        *a1 = *a2;
        uint64_t v16 = (int *)type metadata accessor for LocationContext(0);
        uint64_t v17 = v16[5];
        uint64_t v18 = (char *)a1 + v17;
        uint64_t v19 = (char *)a2 + v17;
        uint64_t v20 = type metadata accessor for Date();
        id v21 = v15;
        if (sub_100027BA4((uint64_t)v19, 1, v20))
        {
          uint64_t v22 = sub_10002572C(&qword_10021BB10);
          memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16))(v18, v19, v20);
          sub_10002538C((uint64_t)v18, 0, 1, v20);
        }
        uint64_t v30 = v16[6];
        uint64_t v31 = *(void **)((char *)a2 + v30);
        *(uint64_t *)((char *)a1 + v30) = (uint64_t)v31;
        uint64_t v32 = v16[7];
        id v33 = (uint64_t *)((char *)a1 + v32);
        uint64_t v34 = (uint64_t *)((char *)a2 + v32);
        uint64_t v35 = v34[1];
        void *v33 = *v34;
        v33[1] = v35;
        uint64_t v36 = v16[8];
        uint64_t v37 = (uint64_t *)((char *)a1 + v36);
        uint64_t v38 = (uint64_t *)((char *)a2 + v36);
        uint64_t v39 = v38[1];
        *uint64_t v37 = *v38;
        v37[1] = v39;
        uint64_t v40 = v16[9];
        uint64_t v41 = (uint64_t *)((char *)a1 + v40);
        uint64_t v42 = (uint64_t *)((char *)a2 + v40);
        uint64_t v43 = v42[1];
        *uint64_t v41 = *v42;
        v41[1] = v43;
        uint64_t v44 = v16[10];
        uint64_t v45 = (uint64_t *)((char *)a1 + v44);
        uint64_t v46 = (uint64_t *)((char *)a2 + v44);
        uint64_t v47 = v46[1];
        *uint64_t v45 = *v46;
        v45[1] = v47;
        *(uint64_t *)((char *)a1 + v16[11]) = *(uint64_t *)((char *)a2 + v16[11]);
        id v48 = v31;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_16;
      case 3u:
        unint64_t v23 = a2[1];
        if (v23 >> 60 == 15)
        {
          *(_OWORD *)a1 = *(_OWORD *)a2;
        }
        else
        {
          uint64_t v29 = *a2;
          sub_100027BCC(v29, v23);
          *a1 = v29;
          a1[1] = v23;
        }
        goto LABEL_16;
      case 4u:
      case 0xCu:
        uint64_t v24 = a2[1];
        *a1 = *a2;
        a1[1] = v24;
        *((unsigned char *)a1 + 16) = *((unsigned char *)a2 + 16);
        swift_bridgeObjectRetain();
        goto LABEL_16;
      case 5u:
        uint64_t v25 = a2[1];
        *a1 = *a2;
        a1[1] = v25;
        uint64_t v26 = a2[2];
        uint64_t v27 = a2[3];
        a1[2] = v26;
        a1[3] = v27;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
LABEL_16:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(v6 + 64));
        break;
    }
  }
  return a1;
}

uint64_t sub_100062780(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_2;
    case 1:
    case 4:
    case 10:
    case 11:
    case 12:
      goto LABEL_2;
    case 2:

      uint64_t v3 = type metadata accessor for LocationContext(0);
      uint64_t v4 = a1 + *(int *)(v3 + 20);
      uint64_t v5 = type metadata accessor for Date();
      if (!sub_100027BA4(v4, 1, v5)) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_2;
    case 3:
      unint64_t v6 = *(void *)(a1 + 8);
      if (v6 >> 60 != 15)
      {
        id v7 = *(id *)a1;
        return sub_1000291B4((uint64_t)v7, v6);
      }
      return result;
    case 5:
      swift_bridgeObjectRelease();
LABEL_2:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t *sub_100062978(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v6 = a2[1];
      *a1 = *a2;
      a1[1] = v6;
      uint64_t v7 = a2[3];
      a1[2] = a2[2];
      a1[3] = v7;
      uint64_t v8 = a2[5];
      a1[4] = a2[4];
      a1[5] = v8;
      *((unsigned char *)a1 + 48) = *((unsigned char *)a2 + 48);
      uint64_t v9 = a2[8];
      a1[7] = a2[7];
      a1[8] = v9;
      uint64_t v10 = a2[10];
      a1[9] = a2[9];
      a1[10] = v10;
      uint64_t v11 = a2[12];
      a1[11] = a2[11];
      a1[12] = v11;
      uint64_t v12 = a2[14];
      a1[13] = a2[13];
      a1[14] = v12;
      a1[15] = a2[15];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_14;
    case 1u:
    case 0xAu:
    case 0xBu:
      uint64_t v26 = a2[1];
      *a1 = *a2;
      a1[1] = v26;
      swift_bridgeObjectRetain();
      goto LABEL_14;
    case 2u:
      uint64_t v13 = (void *)*a2;
      *a1 = *a2;
      uint64_t v14 = (int *)type metadata accessor for LocationContext(0);
      uint64_t v15 = v14[5];
      uint64_t v16 = (char *)a1 + v15;
      uint64_t v17 = (char *)a2 + v15;
      uint64_t v18 = type metadata accessor for Date();
      id v19 = v13;
      if (sub_100027BA4((uint64_t)v17, 1, v18))
      {
        uint64_t v20 = sub_10002572C(&qword_10021BB10);
        memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
        sub_10002538C((uint64_t)v16, 0, 1, v18);
      }
      uint64_t v28 = v14[6];
      uint64_t v29 = *(void **)((char *)a2 + v28);
      *(uint64_t *)((char *)a1 + v28) = (uint64_t)v29;
      uint64_t v30 = v14[7];
      uint64_t v31 = (uint64_t *)((char *)a1 + v30);
      uint64_t v32 = (uint64_t *)((char *)a2 + v30);
      uint64_t v33 = v32[1];
      void *v31 = *v32;
      v31[1] = v33;
      uint64_t v34 = v14[8];
      uint64_t v35 = (uint64_t *)((char *)a1 + v34);
      uint64_t v36 = (uint64_t *)((char *)a2 + v34);
      uint64_t v37 = v36[1];
      *uint64_t v35 = *v36;
      v35[1] = v37;
      uint64_t v38 = v14[9];
      uint64_t v39 = (uint64_t *)((char *)a1 + v38);
      uint64_t v40 = (uint64_t *)((char *)a2 + v38);
      uint64_t v41 = v40[1];
      *uint64_t v39 = *v40;
      v39[1] = v41;
      uint64_t v42 = v14[10];
      uint64_t v43 = (uint64_t *)((char *)a1 + v42);
      uint64_t v44 = (uint64_t *)((char *)a2 + v42);
      uint64_t v45 = v44[1];
      *uint64_t v43 = *v44;
      v43[1] = v45;
      *(uint64_t *)((char *)a1 + v14[11]) = *(uint64_t *)((char *)a2 + v14[11]);
      id v46 = v29;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_14;
    case 3u:
      unint64_t v21 = a2[1];
      if (v21 >> 60 == 15)
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
      }
      else
      {
        uint64_t v27 = *a2;
        sub_100027BCC(v27, v21);
        *a1 = v27;
        a1[1] = v21;
      }
      goto LABEL_14;
    case 4u:
    case 0xCu:
      uint64_t v22 = a2[1];
      *a1 = *a2;
      a1[1] = v22;
      *((unsigned char *)a1 + 16) = *((unsigned char *)a2 + 16);
      swift_bridgeObjectRetain();
      goto LABEL_14;
    case 5u:
      uint64_t v23 = a2[1];
      *a1 = *a2;
      a1[1] = v23;
      uint64_t v24 = a2[2];
      uint64_t v25 = a2[3];
      a1[2] = v24;
      a1[3] = v25;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
LABEL_14:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

uint64_t *sub_100062D50(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1000631C8((uint64_t)a1);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        a1[4] = a2[4];
        a1[5] = a2[5];
        *((unsigned char *)a1 + 48) = *((unsigned char *)a2 + 48);
        a1[7] = a2[7];
        a1[8] = a2[8];
        a1[9] = a2[9];
        a1[10] = a2[10];
        a1[11] = a2[11];
        a1[12] = a2[12];
        a1[13] = a2[13];
        a1[14] = a2[14];
        a1[15] = a2[15];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_15;
      case 1u:
      case 0xAu:
      case 0xBu:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        goto LABEL_15;
      case 2u:
        uint64_t v6 = (void *)*a2;
        *a1 = *a2;
        uint64_t v7 = (int *)type metadata accessor for LocationContext(0);
        uint64_t v8 = v7[5];
        uint64_t v9 = (char *)a1 + v8;
        uint64_t v10 = (char *)a2 + v8;
        uint64_t v11 = type metadata accessor for Date();
        id v12 = v6;
        if (sub_100027BA4((uint64_t)v10, 1, v11))
        {
          uint64_t v13 = sub_10002572C(&qword_10021BB10);
          memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
          sub_10002538C((uint64_t)v9, 0, 1, v11);
        }
        uint64_t v16 = v7[6];
        uint64_t v17 = *(void **)((char *)a2 + v16);
        *(uint64_t *)((char *)a1 + v16) = (uint64_t)v17;
        uint64_t v18 = v7[7];
        id v19 = (uint64_t *)((char *)a1 + v18);
        uint64_t v20 = (uint64_t *)((char *)a2 + v18);
        *id v19 = *v20;
        v19[1] = v20[1];
        uint64_t v21 = v7[8];
        uint64_t v22 = (uint64_t *)((char *)a1 + v21);
        uint64_t v23 = (uint64_t *)((char *)a2 + v21);
        void *v22 = *v23;
        v22[1] = v23[1];
        uint64_t v24 = v7[9];
        uint64_t v25 = (uint64_t *)((char *)a1 + v24);
        uint64_t v26 = (uint64_t *)((char *)a2 + v24);
        *uint64_t v25 = *v26;
        v25[1] = v26[1];
        uint64_t v27 = v7[10];
        uint64_t v28 = (uint64_t *)((char *)a1 + v27);
        uint64_t v29 = (uint64_t *)((char *)a2 + v27);
        *uint64_t v28 = *v29;
        v28[1] = v29[1];
        *(uint64_t *)((char *)a1 + v7[11]) = *(uint64_t *)((char *)a2 + v7[11]);
        id v30 = v17;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_15;
      case 3u:
        unint64_t v14 = a2[1];
        if (v14 >> 60 == 15)
        {
          *(_OWORD *)a1 = *(_OWORD *)a2;
        }
        else
        {
          uint64_t v15 = *a2;
          sub_100027BCC(v15, v14);
          *a1 = v15;
          a1[1] = v14;
        }
        goto LABEL_15;
      case 4u:
      case 0xCu:
        *a1 = *a2;
        a1[1] = a2[1];
        *((unsigned char *)a1 + 16) = *((unsigned char *)a2 + 16);
        swift_bridgeObjectRetain();
        goto LABEL_15;
      case 5u:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
LABEL_15:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t sub_1000631C8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ContextUpdate(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *sub_100063224(void *a1, void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    *a1 = *a2;
    uint64_t v6 = (int *)type metadata accessor for LocationContext(0);
    uint64_t v7 = v6[5];
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for Date();
    if (sub_100027BA4((uint64_t)v9, 1, v10))
    {
      uint64_t v11 = sub_10002572C(&qword_10021BB10);
      memcpy(v8, v9, *(void *)(*(void *)(v11 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
      sub_10002538C((uint64_t)v8, 0, 1, v10);
    }
    *(void *)((char *)a1 + v6[6]) = *(void *)((char *)a2 + v6[6]);
    *(_OWORD *)((char *)a1 + v6[7]) = *(_OWORD *)((char *)a2 + v6[7]);
    *(_OWORD *)((char *)a1 + v6[8]) = *(_OWORD *)((char *)a2 + v6[8]);
    *(_OWORD *)((char *)a1 + v6[9]) = *(_OWORD *)((char *)a2 + v6[9]);
    *(_OWORD *)((char *)a1 + v6[10]) = *(_OWORD *)((char *)a2 + v6[10]);
    *(void *)((char *)a1 + v6[11]) = *(void *)((char *)a2 + v6[11]);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *sub_1000633B0(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1000631C8((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      *a1 = *a2;
      uint64_t v6 = (int *)type metadata accessor for LocationContext(0);
      uint64_t v7 = v6[5];
      uint64_t v8 = (char *)a1 + v7;
      uint64_t v9 = (char *)a2 + v7;
      uint64_t v10 = type metadata accessor for Date();
      if (sub_100027BA4((uint64_t)v9, 1, v10))
      {
        uint64_t v11 = sub_10002572C(&qword_10021BB10);
        memcpy(v8, v9, *(void *)(*(void *)(v11 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
        sub_10002538C((uint64_t)v8, 0, 1, v10);
      }
      *(void *)((char *)a1 + v6[6]) = *(void *)((char *)a2 + v6[6]);
      *(_OWORD *)((char *)a1 + v6[7]) = *(_OWORD *)((char *)a2 + v6[7]);
      *(_OWORD *)((char *)a1 + v6[8]) = *(_OWORD *)((char *)a2 + v6[8]);
      *(_OWORD *)((char *)a1 + v6[9]) = *(_OWORD *)((char *)a2 + v6[9]);
      *(_OWORD *)((char *)a1 + v6[10]) = *(_OWORD *)((char *)a2 + v6[10]);
      *(void *)((char *)a1 + v6[11]) = *(void *)((char *)a2 + v6[11]);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_100063558()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_100063568()
{
  uint64_t result = type metadata accessor for LocationContext(319);
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for PegasusContext.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xDF)
  {
    if (a2 + 33 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 33) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 34;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x22;
  int v5 = v6 - 34;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for PegasusContext.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 33 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 33) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xDF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xDE)
  {
    unsigned int v6 = ((a2 - 223) >> 8) + 1;
    *uint64_t result = a2 + 33;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000637ACLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 33;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PegasusContext.CodingKeys()
{
  return &type metadata for PegasusContext.CodingKeys;
}

unint64_t sub_1000637E8()
{
  unint64_t result = qword_10021AB90;
  if (!qword_10021AB90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10021AB90);
  }
  return result;
}

unint64_t sub_100063838()
{
  unint64_t result = qword_10021AB98;
  if (!qword_10021AB98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10021AB98);
  }
  return result;
}

unint64_t sub_100063888()
{
  unint64_t result = qword_10021ABA0[0];
  if (!qword_10021ABA0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10021ABA0);
  }
  return result;
}

uint64_t destroy for SubscriptionProvider.SubscriptionState()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *sub_100063910(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_100063950(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *sub_1000639C0(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s9SwiftAvro9AvroArrayVwet_0(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 32))
    {
      LODWORD(vsub_100034730((uint64_t)"SIGTERM", 7, 2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(vsub_100034730((uint64_t)"SIGTERM", 7, 2) = -1;
      }
    }
  }
  else
  {
    LODWORD(vsub_100034730((uint64_t)"SIGTERM", 7, 2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_100063A48(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 3sub_100034730((uint64_t)"SIGTERM", 7, 2) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 3sub_100034730((uint64_t)"SIGTERM", 7, 2) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for SilhouetteContext()
{
}

uint64_t _s7parsecd17StorefrontAccountVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for StorefrontAccount(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for StorefrontAccount(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t sub_100063B64(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 17)) {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }
    else {
      sub_1000251C0();
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t sub_100063BAC(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

void type metadata accessor for CountryCodeContext()
{
}

void type metadata accessor for TimeZoneContext()
{
}

uint64_t sub_100063C18()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100063C84(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 3sub_100034730((uint64_t)"SIGTERM", 7, 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v6;
  uint64_t v7 = *(void *)(a2 + 80);
  *(void *)(a1 + 7sub_100034730((uint64_t)"SIGTERM", 7, 2) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v7;
  uint64_t v8 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v8;
  uint64_t v9 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 11sub_100034730((uint64_t)"SIGTERM", 7, 2) = v9;
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_100063D44(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 3sub_100034730((uint64_t)"SIGTERM", 7, 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 7sub_100034730((uint64_t)"SIGTERM", 7, 2) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 11sub_100034730((uint64_t)"SIGTERM", 7, 2) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *sub_100063E74(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x80uLL);
}

uint64_t sub_100063E7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 3sub_100034730((uint64_t)"SIGTERM", 7, 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v7 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v7;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 7sub_100034730((uint64_t)"SIGTERM", 7, 2) = *(void *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 120);
  *(void *)(a1 + 11sub_100034730((uint64_t)"SIGTERM", 7, 2) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v9;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100063F2C(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 128))
    {
      LODWORD(vsub_100034730((uint64_t)"SIGTERM", 7, 2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(vsub_100034730((uint64_t)"SIGTERM", 7, 2) = -1;
      }
    }
  }
  else
  {
    LODWORD(vsub_100034730((uint64_t)"SIGTERM", 7, 2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_100063F6C(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 7sub_100034730((uint64_t)"SIGTERM", 7, 2) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 128) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 128) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for LocalContext()
{
}

uint64_t sub_100063FDC()
{
  return swift_initClassMetadata2();
}

uint64_t sub_10006402C()
{
  swift_unknownObjectWeakDestroy();
  swift_release();
  return v0;
}

uint64_t sub_100064054()
{
  sub_10006402C();

  return _swift_deallocClassInstance(v0, 32, 7);
}

uint64_t type metadata accessor for ReferenceTracker()
{
  return sub_100040C54();
}

uint64_t sub_1000640A0()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10004CD40(v0, qword_1002368B0);
  sub_10002A10C(v0, (uint64_t)qword_1002368B0);
  return Logger.init(subsystem:category:)();
}

void sub_100064114()
{
  qword_1002368C8 = (uint64_t)&off_1001FA040;
}

uint64_t static ClientName.extractClientNameFromUserAgent(_:allowAbbreviation:)(uint64_t a1, unint64_t a2, char a3)
{
  if (!a2) {
    return a1;
  }
  String.lowercased()();
  id v6 = objc_allocWithZone((Class)NSRegularExpression);
  id v7 = sub_100064B48(0xD000000000000016, 0x80000001001B2E10, 0);
  if (!v7)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  id v8 = v7;
  NSString v9 = String._bridgeToObjectiveC()();
  id v10 = objc_msgSend(v8, "matchesInString:options:range:", v9, 0, 0, String.count.getter());

  sub_100065148();
  unint64_t v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v11 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v12 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v12 > 0)
  {
    if ((v11 & 0xC000000000000001) != 0)
    {
      id v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      goto LABEL_9;
    }
    if (*(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      id v13 = *(id *)(v11 + 32);
LABEL_9:
      unint64_t v14 = v13;
      swift_bridgeObjectRelease();
      [v14 rangeAtIndex:3];

      Range<>.init(_:in:)();
      if ((v15 & 1) == 0)
      {
        String.subscript.getter();
        swift_bridgeObjectRelease();
        uint64_t v16 = static String._fromSubstring(_:)();
        uint64_t v18 = v17;
        swift_bridgeObjectRelease();
        uint64_t v19 = static ClientName.extractClientNameFromString(_:)(v16, v18);
        uint64_t v21 = v20;
        swift_bridgeObjectRelease();

        if (v21) {
          return v19;
        }
        else {
          return 0x64636573726170;
        }
      }
      swift_bridgeObjectRelease();
      goto LABEL_28;
    }
    __break(1u);
    goto LABEL_36;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (qword_100218AD8 != -1) {
LABEL_36:
  }
    swift_once();
  uint64_t v22 = type metadata accessor for Logger();
  sub_10002A10C(v22, (uint64_t)qword_1002368B0);
  swift_bridgeObjectRetain_n();
  uint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v25 = (uint8_t *)swift_slowAlloc();
    v33[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v25 = 136315138;
    swift_bridgeObjectRetain();
    sub_10001C274(a1, a2, v33);
    sub_100025898();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "Couldn't find a match for regex in userAgent: %s", v25, 0xCu);
    swift_arrayDestroy();
    sub_100017D40();
    sub_100017D40();

    if ((a3 & 1) == 0) {
      goto LABEL_28;
    }
  }
  else
  {

    swift_bridgeObjectRelease_n();
    if ((a3 & 1) == 0)
    {
LABEL_28:

      return 0;
    }
  }
  uint64_t v26 = static ClientName.extractClientNameFromString(_:)(a1, a2);
  if (v27) {
    a1 = v26;
  }
  else {
    a1 = 0x64636573726170;
  }
  if (v27) {
    unint64_t v28 = v27;
  }
  else {
    unint64_t v28 = 0xE700000000000000;
  }
  swift_bridgeObjectRetain_n();
  uint64_t v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v29, v30))
  {
    uint64_t v31 = (uint8_t *)swift_slowAlloc();
    v33[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v31 = 136315138;
    swift_bridgeObjectRetain();
    sub_10001C274(a1, v28, v33);
    sub_10002C198();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "Allows matching abbreviated user agent. ClientName: %s", v31, 0xCu);
    swift_arrayDestroy();
    sub_100017D40();
    sub_100017D40();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }

  return a1;
}

uint64_t static ClientName.extractClientNameFromString(_:)(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    String.lowercased()();
    if (qword_100218AE0 != -1) {
      swift_once();
    }
    uint64_t v3 = qword_1002368C8;
    uint64_t v4 = *(void *)(qword_1002368C8 + 16);
    if (v4)
    {
      swift_bridgeObjectRetain();
      sub_100021100();
      uint64_t v5 = v3 + 40;
      while (1)
      {
        a1 = *(void *)(v5 - 8);
        swift_bridgeObjectRetain();
        if (StringProtocol.contains<A>(_:)()) {
          break;
        }
        v5 += 16;
        swift_bridgeObjectRelease();
        if (!--v4)
        {
          swift_bridgeObjectRelease();
          goto LABEL_9;
        }
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
LABEL_9:
      sub_100021100();
      char v6 = StringProtocol.contains<A>(_:)();
      swift_bridgeObjectRelease();
      if (v6) {
        return 0x64636573726170;
      }
      else {
        return 0;
      }
    }
  }
  return a1;
}

id FlusherClient.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return [v1 init];
}

id ClientName.init()()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ClientName();
  return objc_msgSendSuper2(&v2, "init");
}

id ClientName.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ClientName();
  return objc_msgSendSuper2(&v2, "dealloc");
}

id sub_100064B48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v10 = 0;
  id v6 = [v3 initWithPattern:v5 options:a3 error:&v10];

  if (v6)
  {
    id v7 = v10;
  }
  else
  {
    id v8 = v10;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v6;
}

void *sub_100064C24(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000) != 0 || (&__dst[__n] > __src ? (BOOL v3 = &__src[__n] > __dst) : (BOOL v3 = 0), v3))
  {
    unint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return memcpy(__dst, __src, __n);
  }
  return result;
}

void *sub_100064CFC(uint64_t a1, unint64_t a2)
{
  objc_super v2 = sub_100064D94(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    objc_super v2 = sub_100064F08(0, v2[2] + 1, 1, (uint64_t)v2);
  }
  unint64_t v4 = v2[2];
  unint64_t v3 = v2[3];
  if (v4 >= v3 >> 1) {
    objc_super v2 = sub_100064F08((char *)(v3 > 1), v4 + 1, 1, (uint64_t)v2);
  }
  v2[2] = v4 + 1;
  *((unsigned char *)v2 + v4 + 3sub_100034730((uint64_t)"SIGTERM", 7, 2) = 0;
  return v2;
}

void *sub_100064D94(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0)
  {
    Swift::Int v2 = String.UTF8View._foreignCount()();
    if (v2) {
      goto LABEL_6;
    }
    return &_swiftEmptyArrayStorage;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    Swift::Int v2 = HIBYTE(a2) & 0xF;
  }
  else {
    Swift::Int v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
LABEL_6:
  unint64_t v3 = sub_100109644(v2, 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    unint64_t v4 = v3;
    uint64_t v5 = _StringGuts.copyUTF8(into:)();
    if ((v6 & 1) != 0 || v5 != v2) {
      goto LABEL_14;
    }
    return v4;
  }
  _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
LABEL_14:
  unint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_100064F08(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    int64_t v9 = *(void *)(a4 + 16);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_10002572C(&qword_10021AC58);
    id v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + sub_100034730((uint64_t)"SIGTERM", 7, 2) = v8;
    *((void *)v10 + sub_100034730((uint64_t)"SIGINT", 6, 3) = 2 * v11 - 64;
  }
  else
  {
    id v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  id v13 = (char *)(a4 + 32);
  if (v5)
  {
    sub_1000650B8(v13, v8, v12);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_100064FE0(v13, v8, v12);
  }
  swift_bridgeObjectRelease();
  return v10;
}

void *sub_100064FE0(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000) != 0 || (&__dst[__n] > __src ? (BOOL v3 = &__src[__n] > __dst) : (BOOL v3 = 0), v3))
  {
    unint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return memcpy(__dst, __src, __n);
  }
  return result;
}

char *sub_1000650B8(char *__src, size_t __len, char *__dst)
{
  if ((__len & 0x8000000000000000) != 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[__len] <= __dst)
  {
    return (char *)memmove(__dst, __src, __len);
  }
  return __src;
}

unint64_t sub_100065148()
{
  unint64_t result = qword_10021AC28;
  if (!qword_10021AC28)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10021AC28);
  }
  return result;
}

uint64_t type metadata accessor for ClientName()
{
  return self;
}

unint64_t sub_1000651B0(unint64_t result, char a2, uint64_t a3)
{
  if (a2)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > result)
    {
      return result;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1000651D4()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_100065234()
{
  return RawRepresentable<>.encode(to:)();
}

char *static _CPKnownFeedbackType.allCases.getter()
{
  uint64_t v0 = sub_100065764(0, 1, 1, (uint64_t)_swiftEmptyArrayStorage);
  uint64_t v1 = 0;
  unint64_t v2 = *((void *)v0 + 2);
  do
  {
    unint64_t v3 = *((void *)v0 + 3);
    if (v2 >= v3 >> 1) {
      uint64_t v0 = sub_100065764((char *)(v3 > 1), v2 + 1, 1, (uint64_t)v0);
    }
    *((void *)v0 + sub_100034730((uint64_t)"SIGTERM", 7, 2) = v2 + 1;
    *(_DWORD *)&v0[4 * v2++ + 32] = v1++;
  }
  while (v1 != 19);
  return v0;
}

char *sub_10006531C@<X0>(char **a1@<X8>)
{
  unint64_t result = static _CPKnownFeedbackType.allCases.getter();
  *a1 = result;
  return result;
}

void *static _CPKnownFeedbackType.allCustomFeedbackDirectories.getter()
{
  uint64_t v0 = &_swiftEmptyArrayStorage;
  uint64_t v1 = 1;
  do
  {
    switch((int)v1)
    {
      case 1:
        unint64_t v2 = @"SafariAutoFill";
        goto LABEL_18;
      case 2:
        unint64_t v2 = @"Crowdsourcing";
        goto LABEL_18;
      case 3:
        unint64_t v2 = @"SpotlightResultFeatures";
        goto LABEL_18;
      case 4:
        unint64_t v2 = @"SafariAutoPlay";
        goto LABEL_18;
      case 5:
        unint64_t v2 = @"Trystero";
        goto LABEL_18;
      case 6:
        unint64_t v2 = @"EngagedCompletionFeatures";
        goto LABEL_18;
      case 7:
        unint64_t v2 = @"ProactiveEventTracker";
        goto LABEL_18;
      case 8:
        unint64_t v2 = @"PhiDES";
        goto LABEL_18;
      case 9:
        unint64_t v2 = @"DuetExpert";
        goto LABEL_18;
      case 10:
        unint64_t v2 = @"UserReport";
        goto LABEL_18;
      case 11:
        unint64_t v2 = @"Usage";
        goto LABEL_18;
      case 12:
        unint64_t v2 = @"FeedbackV2";
        goto LABEL_18;
      case 13:
        unint64_t v2 = @"FeedbackV2PB";
        goto LABEL_18;
      case 14:
        unint64_t v2 = @"ProactiveEventTrackerAggregated";
LABEL_18:
        unint64_t v4 = v2;
        unint64_t v3 = v2;
        break;
      case 15:
        uint64_t v12 = @"Handwashing";
        unint64_t v3 = @"Handwashing";
        break;
      case 16:
        id v13 = @"Experiments";
        unint64_t v3 = @"Experiments";
        break;
      case 17:
        unint64_t v14 = @"FeatureQuality";
        unint64_t v3 = @"FeatureQuality";
        break;
      case 18:
        char v15 = @"OnDeviceAnalytics";
        unint64_t v3 = @"OnDeviceAnalytics";
        break;
      default:
        unint64_t v3 = +[NSString stringWithFormat:@"(unknown: %i)", v1];
        break;
    }
    char v5 = v3;
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;

    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_10002114C(0, v0[2] + 1, 1, (uint64_t)v0);
      uint64_t v0 = v16;
    }
    unint64_t v10 = v0[2];
    unint64_t v9 = v0[3];
    if (v10 >= v9 >> 1)
    {
      sub_10002114C(v9 > 1, v10 + 1, 1, (uint64_t)v0);
      uint64_t v0 = v17;
    }
    uint64_t v1 = (v1 + 1);
    v0[2] = v10 + 1;
    size_t v11 = (char *)&v0[2 * v10];
    *((void *)v11 + 4) = v6;
    *((void *)v11 + 5) = v8;
  }
  while (v1 != 19);
  return v0;
}

Swift::Bool __swiftcall _CPKnownFeedbackType.isProtobuf()()
{
  return (v0 & 0xFFFFFFFE) == 10;
}

uint64_t _CPResultType.isSuggestion.getter(unsigned int a1)
{
  return (a1 < 0x16) & (0x238000u >> a1);
}

uint64_t _CPBundleIdentifier.isSuggestion.getter(unsigned int a1)
{
  uint64_t result = 1;
  if (a1 > 0x3D || ((1 << a1) & 0x2044300140C08800) == 0)
  {
    unsigned int v3 = a1 - 86;
    if (v3 > 0x15 || ((1 << v3) & 0x230001) == 0) {
      return 0;
    }
  }
  return result;
}

void sub_100065650(char a1, uint64_t a2, char a3, uint64_t a4)
{
  if (a3)
  {
    sub_1000212E4();
    if (v8 != v9)
    {
      sub_10002A3A8();
      if (v8)
      {
        __break(1u);
        return;
      }
      sub_1000268F0();
    }
  }
  sub_10002A3B4();
  if (v5)
  {
    sub_10002572C(&qword_10021ACA0);
    unint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    sub_10000E0E0(v11);
  }
  else
  {
    unint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  if (a1)
  {
    sub_100119158((char *)(a4 + 32), v4, v10 + 32);
    sub_100024944();
  }
  else
  {
    uint64_t v12 = sub_1000242FC();
    sub_100065FD4(v12, v13, v14, v15);
  }
}

void sub_100065710()
{
}

void sub_100065744(char a1, uint64_t a2, char a3, uint64_t a4)
{
}

char *sub_100065764(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10002572C(&qword_10021AD00);
    unint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + sub_100034730((uint64_t)"SIGTERM", 7, 2) = v8;
    *((void *)v10 + sub_100034730((uint64_t)"SIGINT", 6, 3) = 2 * ((uint64_t)(v11 - 32) / 4);
  }
  else
  {
    unint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  if (v5)
  {
    sub_1001192D4((char *)(a4 + 32), v8, v12);
    *(void *)(a4 + 16) = 0;
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1000661CC(0, v8, v12, a4);
  }
  return v10;
}

unint64_t sub_100065858()
{
  unint64_t result = qword_10021AC60;
  if (!qword_10021AC60)
  {
    sub_1000371D4(&qword_10021AC68);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10021AC60);
  }
  return result;
}

uint64_t sub_1000658AC(char a1, uint64_t a2, char a3, uint64_t a4)
{
  return sub_100065AEC(a1, a2, a3, a4, &qword_10021AC70, (uint64_t (*)(void))&type metadata accessor for URLQueryItem, (uint64_t (*)(void))&type metadata accessor for URLQueryItem, (void (*)(unint64_t, uint64_t, unint64_t))sub_100119330);
}

void sub_1000658F4(char a1, uint64_t a2, char a3, uint64_t a4)
{
  if (a3)
  {
    sub_1000212E4();
    if (v8 != v9)
    {
      sub_10002A3A8();
      if (v8)
      {
        __break(1u);
        return;
      }
      sub_1000268F0();
    }
  }
  sub_10002A3B4();
  if (v5)
  {
    sub_10002572C(&qword_10021ACD8);
    unint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    sub_10000E0E0(v11);
  }
  else
  {
    unint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  if (a1)
  {
    sub_100119348((char *)(a4 + 32), v4, v10 + 32);
    sub_100024944();
  }
  else
  {
    uint64_t v12 = sub_1000242FC();
    sub_1000662C0(v12, v13, v14, v15);
  }
}

void sub_1000659B4()
{
}

void sub_1000659E8()
{
  sub_100026FEC();
  if (v6)
  {
    sub_1000212E4();
    if (v7 != v8)
    {
      sub_10002A3A8();
      if (v7)
      {
        __break(1u);
        return;
      }
      sub_1000268F0();
    }
  }
  sub_10002CD74();
  if (v5)
  {
    sub_10002572C(v9);
    unint64_t v10 = (void *)sub_10001659C();
    size_t v11 = j__malloc_size(v10);
    sub_10002DE58(v11 - 32);
  }
  else
  {
    unint64_t v10 = _swiftEmptyArrayStorage;
  }
  if (v3)
  {
    v2(v0 + 32, v4, v10 + 4);
    sub_100024944();
  }
  else
  {
    uint64_t v12 = sub_100027DD4();
    v1(v12);
  }
}

uint64_t sub_100065AA4(char a1, uint64_t a2, char a3, uint64_t a4)
{
  return sub_100065AEC(a1, a2, a3, a4, &qword_10021ACC8, (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Spotlight_V1alpha_Result, (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Spotlight_V1alpha_Result, (void (*)(unint64_t, uint64_t, unint64_t))sub_1001193AC);
}

uint64_t sub_100065AEC(char a1, uint64_t a2, char a3, uint64_t a4, uint64_t *a5, uint64_t (*a6)(void), uint64_t (*a7)(void), void (*a8)(unint64_t, uint64_t, unint64_t))
{
  if (a3)
  {
    sub_1000212E4();
    if (v14 != v15)
    {
      sub_10002A3A8();
      if (v14)
      {
        __break(1u);
        goto LABEL_23;
      }
      sub_1000268F0();
    }
  }
  else
  {
    uint64_t v13 = a2;
  }
  uint64_t v16 = *(void *)(a4 + 16);
  if (v13 <= v16) {
    uint64_t v17 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v17 = v13;
  }
  if (!v17)
  {
    uint64_t v21 = _swiftEmptyArrayStorage;
    goto LABEL_18;
  }
  sub_10002572C(a5);
  uint64_t v18 = *(void *)(a6(0) - 8);
  uint64_t v19 = *(void *)(v18 + 72);
  unint64_t v20 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  uint64_t v21 = (void *)swift_allocObject();
  size_t v22 = j__malloc_size(v21);
  if (!v19 || (v22 - v20 == 0x8000000000000000 ? (BOOL v23 = v19 == -1) : (BOOL v23 = 0), v23))
  {
LABEL_23:
    sub_100020C64();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  void v21[2] = v16;
  uint64_t v21[3] = 2 * ((uint64_t)(v22 - v20) / v19);
LABEL_18:
  uint64_t v24 = *(void *)(a6(0) - 8);
  unint64_t v25 = (*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
  unint64_t v26 = (unint64_t)v21 + v25;
  if (a1)
  {
    a8(a4 + v25, v16, v26);
    sub_100024944();
  }
  else
  {
    sub_1000665EC(0, v16, v26, a4, a7);
  }
  return (uint64_t)v21;
}

uint64_t sub_100065D04(char a1, uint64_t a2, char a3, uint64_t a4)
{
  return sub_100065AEC(a1, a2, a3, a4, &qword_10021ACD0, (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Spotlight_V1alpha_ZkwSuggestResponse.Section, (uint64_t (*)(void))&type metadata accessor for Apple_Parsec_Spotlight_V1alpha_ZkwSuggestResponse.Section, (void (*)(unint64_t, uint64_t, unint64_t))sub_1001193C4);
}

void sub_100065D4C()
{
}

void sub_100065D74()
{
}

uint64_t sub_100065DA8(char a1, uint64_t a2, char a3, uint64_t a4)
{
  return sub_100065AEC(a1, a2, a3, a4, &qword_10021AC98, (uint64_t (*)(void))&type metadata accessor for Trialpb_TrialExperiment, (uint64_t (*)(void))&type metadata accessor for Trialpb_TrialExperiment, (void (*)(unint64_t, uint64_t, unint64_t))sub_100119258);
}

void sub_100065DF0()
{
}

void sub_100065E24()
{
  sub_100026FEC();
  if (v6)
  {
    sub_1000212E4();
    if (v7 != v8)
    {
      sub_10002A3A8();
      if (v7)
      {
        __break(1u);
        return;
      }
      sub_1000268F0();
    }
  }
  sub_10002CD74();
  if (v5)
  {
    sub_10002572C(v9);
    unint64_t v10 = (void *)sub_10001659C();
    size_t v11 = j__malloc_size(v10);
    sub_10002DE58(v11 - 32);
  }
  else
  {
    unint64_t v10 = _swiftEmptyArrayStorage;
  }
  if (v3)
  {
    v2(v0 + 32, v4, v10 + 4);
    sub_100024944();
  }
  else
  {
    uint64_t v12 = sub_100027DD4();
    v1(v12);
  }
}

void sub_100065EE0(char a1, uint64_t a2, char a3, uint64_t a4)
{
}

void sub_100065F00(char a1, uint64_t a2, char a3, uint64_t a4, uint64_t *a5, void (*a6)(uint64_t, uint64_t, char *))
{
  if (a3)
  {
    sub_1000212E4();
    if (v10 != v11)
    {
      sub_10002A3A8();
      if (v10)
      {
        __break(1u);
        return;
      }
      sub_1000268F0();
    }
  }
  else
  {
    uint64_t v9 = a2;
  }
  uint64_t v12 = *(void *)(a4 + 16);
  if (v9 <= v12) {
    uint64_t v13 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v13 = v9;
  }
  if (v13)
  {
    sub_10002572C(a5);
    char v14 = (char *)swift_allocObject();
    size_t v15 = j__malloc_size(v14);
    *((void *)v14 + sub_100034730((uint64_t)"SIGTERM", 7, 2) = v12;
    *((void *)v14 + sub_100034730((uint64_t)"SIGINT", 6, 3) = 2 * v15 - 64;
  }
  else
  {
    char v14 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v16 = v14 + 32;
  if (a1)
  {
    a6(a4 + 32, v12, v16);
    sub_100024944();
  }
  else
  {
    sub_100066840(0, v12, v16, a4);
  }
}

uint64_t sub_100065FD4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000660D4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_1000661CC(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 4 * a1 + 32);
    unint64_t v6 = &__dst[4 * v4];
    if (v5 >= v6 || &v5[4 * v4] <= __dst)
    {
      memcpy(__dst, v5, 4 * v4);
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000662C0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000663C0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      sub_10002572C(&qword_10021ACC0);
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000664D8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 8 * a1 + 32;
    unint64_t v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      type metadata accessor for Name(0);
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000665EC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 < 0)
  {
LABEL_9:
    sub_100020C64();
    sub_100017E1C();
    goto LABEL_11;
  }
  uint64_t v9 = *(void *)(a5(0) - 8);
  uint64_t v10 = a4 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  uint64_t v11 = *(void *)(v9 + 72);
  unint64_t v12 = v10 + v11 * a1;
  unint64_t v13 = a3 + v11 * v5;
  if (v12 >= v13 || v12 + v11 * v5 <= a3)
  {
    swift_arrayInitWithCopy();
    swift_bridgeObjectRelease();
    return v13;
  }
  sub_100020C64();
  sub_1000242EC();
LABEL_11:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100066728(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 8 * a1 + 32;
    unint64_t v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      sub_10002572C(&qword_10021ACB0);
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_100066840(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if ((v4 & 0x8000000000000000) != 0)
  {
LABEL_9:
    sub_100020C64();
    sub_100017E1C();
    goto LABEL_11;
  }
  unint64_t v5 = (char *)(a4 + a1 + 32);
  unint64_t v6 = &__dst[v4];
  if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
  {
    memcpy(__dst, v5, v4);
    swift_bridgeObjectRelease();
    return v6;
  }
  sub_100020C64();
  sub_1000242EC();
LABEL_11:
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t sub_100066908()
{
  unint64_t result = qword_10021ACE0;
  if (!qword_10021ACE0)
  {
    type metadata accessor for _CPKnownFeedbackType(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10021ACE0);
  }
  return result;
}

uint64_t sub_100066958@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  switch(a1)
  {
    case 0:
    case 7:
      char v3 = (unsigned int *)&enum case for Apple_Parsec_Spotlight_V1alpha_TopicType.generic(_:);
      break;
    case 1:
      char v3 = (unsigned int *)&enum case for Apple_Parsec_Spotlight_V1alpha_TopicType.media(_:);
      break;
    case 2:
      char v3 = (unsigned int *)&enum case for Apple_Parsec_Spotlight_V1alpha_TopicType.entity(_:);
      break;
    case 3:
      char v3 = (unsigned int *)&enum case for Apple_Parsec_Spotlight_V1alpha_TopicType.sports(_:);
      break;
    case 4:
      char v3 = (unsigned int *)&enum case for Apple_Parsec_Spotlight_V1alpha_TopicType.weather(_:);
      break;
    case 5:
      char v3 = (unsigned int *)&enum case for Apple_Parsec_Spotlight_V1alpha_TopicType.flight(_:);
      break;
    case 6:
      char v3 = (unsigned int *)&enum case for Apple_Parsec_Spotlight_V1alpha_TopicType.relatedPoi(_:);
      break;
    case 8:
      char v3 = (unsigned int *)&enum case for Apple_Parsec_Spotlight_V1alpha_TopicType.webPunchout(_:);
      break;
    default:
      type metadata accessor for SFQueryTopicType(0);
      _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
      __break(1u);
      JUMPOUT(0x100066A7CLL);
  }
  uint64_t v4 = *v3;
  uint64_t v5 = type metadata accessor for Apple_Parsec_Spotlight_V1alpha_TopicType();
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 104);

  return v6(a2, v4, v5);
}

void sub_100066AA0()
{
  uint64_t v1 = v0;
  type metadata accessor for Apple_Parsec_Spotlight_V1alpha_Topic.WeatherDetail();
  sub_100020C48();
  uint64_t v56 = v3;
  uint64_t v57 = v2;
  __chkstk_darwin(v2);
  sub_100017D2C();
  uint64_t v55 = v4;
  __chkstk_darwin(v5);
  unint64_t v54 = (char *)&v54 - v6;
  type metadata accessor for Date();
  sub_100020C48();
  uint64_t v62 = v8;
  uint64_t v63 = v7;
  __chkstk_darwin(v7);
  uint64_t v61 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Apple_Parsec_Spotlight_V1alpha_Topic.FlightDetail();
  sub_100020C48();
  uint64_t v59 = v11;
  uint64_t v60 = v10;
  __chkstk_darwin(v10);
  sub_100017D2C();
  uint64_t v58 = v12;
  __chkstk_darwin(v13);
  size_t v15 = (char *)&v54 - v14;
  uint64_t v16 = type metadata accessor for Apple_Parsec_Spotlight_V1alpha_TopicType();
  __chkstk_darwin(v16 - 8);
  uint64_t v18 = (char *)&v54 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  Apple_Parsec_Spotlight_V1alpha_TopicContext.init()();
  id v19 = [v0 topic];
  id v20 = [v19 query];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v21 = (void (*)(uint64_t))sub_1000258AC();
  Apple_Parsec_Spotlight_V1alpha_Topic.query.setter();
  uint64_t v22 = sub_10002C1C0();
  v21(v22);
  id v23 = [v1 topic];
  LODWORD(v21) = [v23 queryType];

  sub_100066958((int)v21, (uint64_t)v18);
  uint64_t v24 = (void (*)(uint64_t))sub_1000258AC();
  Apple_Parsec_Spotlight_V1alpha_Topic.type.setter();
  uint64_t v25 = sub_10002C1C0();
  v24(v25);
  id v26 = [v1 contextId];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  Apple_Parsec_Spotlight_V1alpha_TopicContext.contextID.setter();
  id v27 = [v1 topic];
  id v28 = [v27 identifier];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v29 = (void (*)(uint64_t))sub_1000258AC();
  Apple_Parsec_Spotlight_V1alpha_Topic.id.setter();
  uint64_t v30 = sub_10002C1C0();
  v29(v30);
  id v31 = [v1 topic];
  self;
  uint64_t v32 = swift_dynamicCastObjCClass();
  if (v32)
  {
    uint64_t v33 = (void *)v32;
    id v34 = v31;
    Apple_Parsec_Spotlight_V1alpha_Topic.FlightDetail.init()();
    id v35 = [v33 date];
    uint64_t v36 = v61;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    Date.timeIntervalSince1970.getter();
    double v38 = v37;
    (*(void (**)(char *, uint64_t))(v62 + 8))(v36, v63);
    if ((~*(void *)&v38 & 0x7FF0000000000000) != 0)
    {
      if (v38 > -1.0)
      {
        if (v38 < 1.84467441e19)
        {
          Apple_Parsec_Spotlight_V1alpha_Topic.FlightDetail.timestamp.setter();
          uint64_t v39 = v59;
          uint64_t v40 = v60;
          (*(void (**)(uint64_t, char *, uint64_t))(v59 + 16))(v58, v15, v60);
          uint64_t v41 = (void (*)(uint64_t))sub_1000258AC();
          Apple_Parsec_Spotlight_V1alpha_Topic.flight.setter();
          uint64_t v42 = sub_10002495C();
          v41(v42);

          (*(void (**)(char *, uint64_t))(v39 + 8))(v15, v40);
          return;
        }
        goto LABEL_11;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_11:
    __break(1u);
    return;
  }
  uint64_t v43 = v54;
  uint64_t v44 = v55;
  uint64_t v46 = v56;
  uint64_t v45 = v57;
  self;
  uint64_t v47 = swift_dynamicCastObjCClass();
  if (v47)
  {
    id v48 = (void *)v47;
    id v49 = v31;
    Apple_Parsec_Spotlight_V1alpha_Topic.WeatherDetail.init()();
    id v50 = [v48 location];
    [v50 lat];

    Apple_Parsec_Spotlight_V1alpha_Topic.WeatherDetail.lat.setter();
    id v51 = [v48 location];
    [v51 lng];

    Apple_Parsec_Spotlight_V1alpha_Topic.WeatherDetail.long.setter();
    (*(void (**)(uint64_t, char *, uint64_t))(v46 + 16))(v44, v43, v45);
    uint64_t v52 = (void (*)(uint64_t))sub_1000258AC();
    Apple_Parsec_Spotlight_V1alpha_Topic.weather.setter();
    uint64_t v53 = sub_10002495C();
    v52(v53);

    (*(void (**)(char *, uint64_t))(v46 + 8))(v43, v45);
  }
  else
  {
  }
}

void sub_100067024(uint64_t a1, __int16 a2)
{
  char v2 = HIBYTE(a2);
  Hasher._combine(_:)(a2 & 1);
  Hasher._combine(_:)(v2 & 1);
}

BOOL sub_100067058(int a1, unsigned int a2)
{
  return ((a1 ^ a2 | ((a1 ^ a2) >> 8)) & 1) == 0;
}

Swift::Int sub_10006706C(__int16 a1)
{
  return Hasher._finalize()();
}

Swift::Int sub_1000670C0()
{
  if (v0[1]) {
    __int16 v1 = 256;
  }
  else {
    __int16 v1 = 0;
  }
  return sub_10006706C(v1 | *v0);
}

void sub_1000670DC(uint64_t a1)
{
  if (v1[1]) {
    __int16 v2 = 256;
  }
  else {
    __int16 v2 = 0;
  }
  sub_100067024(a1, v2 | *v1);
}

Swift::Int sub_1000670F8()
{
  Swift::UInt8 v1 = *v0;
  Swift::UInt8 v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

BOOL sub_100067154(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (a1[1]) {
    int v2 = 256;
  }
  else {
    int v2 = 0;
  }
  int v3 = v2 | *a1;
  if (a2[1]) {
    int v4 = 256;
  }
  else {
    int v4 = 0;
  }
  return sub_100067058(v3, v4 | *a2);
}

uint64_t sub_100067184(__int16 a1)
{
  _StringGuts.grow(_:)(38);
  swift_bridgeObjectRelease();
  strcpy((char *)v10, "isCodeSigned: ");
  HIBYTE(v10[1]) = -18;
  if (a1) {
    uint64_t v2 = 1702195828;
  }
  else {
    uint64_t v2 = 0x65736C6166;
  }
  if (a1) {
    unint64_t v3 = 0xE400000000000000;
  }
  else {
    unint64_t v3 = 0xE500000000000000;
  }
  unint64_t v4 = v3;
  String.append(_:)(*(Swift::String *)&v2);
  swift_bridgeObjectRelease();
  v5._object = (void *)0x80000001001B3250;
  v5._uint64_t countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v5);
  if ((a1 & 0x100) != 0) {
    uint64_t v6 = 1702195828;
  }
  else {
    uint64_t v6 = 0x65736C6166;
  }
  if ((a1 & 0x100) != 0) {
    unint64_t v7 = 0xE400000000000000;
  }
  else {
    unint64_t v7 = 0xE500000000000000;
  }
  unint64_t v8 = v7;
  String.append(_:)(*(Swift::String *)&v6);
  swift_bridgeObjectRelease();
  return v10[0];
}

uint64_t sub_100067284()
{
  if (v0[1]) {
    __int16 v1 = 256;
  }
  else {
    __int16 v1 = 0;
  }
  return sub_100067184(v1 | *v0);
}

_WORD *initializeBufferWithCopyOfBuffer for RemoteConnectorIdentity(_WORD *result, _WORD *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for RemoteConnectorIdentity(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFF)
  {
    if (a2 + 65281 <= 0xFFFEFFFF) {
      int v2 = 2;
    }
    else {
      int v2 = 4;
    }
    if (a2 + 65281 < 0xFF0000) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = *((unsigned __int8 *)a1 + 2);
      if (!*((unsigned char *)a1 + 2)) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 16)) - 65282;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *(unsigned __int8 *)a1;
  BOOL v7 = v6 >= 2;
  int v5 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for RemoteConnectorIdentity(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a3 + 65281 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 65281 < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 16) + 1;
    *(_WORD *)unint64_t result = a2 - 255;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + sub_100034730((uint64_t)"SIGTERM", 7, 2) = v6;
        break;
      case 2:
        *(_WORD *)(result + sub_100034730((uint64_t)"SIGTERM", 7, 2) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100067414);
      case 4:
        *(_DWORD *)(result + sub_100034730((uint64_t)"SIGTERM", 7, 2) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + sub_100034730((uint64_t)"SIGTERM", 7, 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + sub_100034730((uint64_t)"SIGTERM", 7, 2) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + sub_100034730((uint64_t)"SIGTERM", 7, 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *(unsigned char *)unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RemoteConnectorIdentity()
{
  return &type metadata for RemoteConnectorIdentity;
}

unint64_t sub_100067450()
{
  unint64_t result = qword_10021AD08;
  if (!qword_10021AD08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10021AD08);
  }
  return result;
}

void sub_10006749C()
{
  __int16 v1 = v0;
  uint64_t v2 = type metadata accessor for PegasusClientName();
  sub_100020C48();
  uint64_t v4 = v3;
  __chkstk_darwin(v5);
  BOOL v7 = (char *)v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  NSString v8 = String._bridgeToObjectiveC()();
  id v9 = [v1 integerForKey:v8];

  switch((unint64_t)v9)
  {
    case 2uLL:
    case 3uLL:
    case 4uLL:
      NSString v22 = String._bridgeToObjectiveC()();
      [v1 removeObjectForKey:v22];

      break;
    case 5uLL:
      break;
    default:
      uint64_t v40 = v7;
      v36[2] = "parsecd.UserDefaultsManager";
      double v37 = v1;
      sub_10002572C(&qword_10021AD48);
      uint64_t v10 = *(void *)(v4 + 72);
      unint64_t v11 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
      uint64_t v12 = 6;
      uint64_t v13 = swift_allocObject();
      *(_OWORD *)(v13 + 16) = xmmword_1001A4CF0;
      v36[1] = v13;
      unint64_t v14 = v13 + v11;
      size_t v15 = *(void (**)(void))(v4 + 104);
      sub_1000258C4();
      v15();
      sub_1000258C4();
      v15();
      sub_1000258C4();
      v15();
      sub_1000258C4();
      v15();
      sub_1000258C4();
      v15();
      uint64_t v39 = v10;
      sub_1000258C4();
      v15();
      uint64_t v42 = _swiftEmptyArrayStorage;
      sub_1000EE464();
      uint64_t v17 = *(void (**)(char *, unint64_t, uint64_t))(v4 + 16);
      uint64_t v16 = v4 + 16;
      double v38 = v17;
      uint64_t v41 = v2;
      do
      {
        uint64_t v18 = v40;
        v38(v40, v14, v2);
        PegasusClientName.rawValue.getter();
        Swift::String v19 = String.lowercased()();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v16 - 8))(v18, v2);
        id v20 = v42;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1000EE464();
          id v20 = v42;
        }
        unint64_t v21 = v20[2];
        if (v21 >= v20[3] >> 1)
        {
          sub_1000EE464();
          id v20 = v42;
        }
        _OWORD v20[2] = v21 + 1;
        *(Swift::String *)&v20[2 * v21 + 4] = v19;
        v14 += v39;
        --v12;
        uint64_t v2 = v41;
      }
      while (v12);
      swift_setDeallocating();
      sub_10000480C();
      uint64_t v23 = v20[2];
      __int16 v1 = v37;
      if (v23)
      {
        swift_retain();
        uint64_t v24 = (void **)(v20 + 5);
        do
        {
          uint64_t v25 = (uint64_t)*(v24 - 1);
          id v26 = *v24;
          uint64_t v42 = (void *)0xD000000000000017;
          unint64_t v43 = 0x80000001001B3380;
          swift_bridgeObjectRetain();
          v27._uint64_t countAndFlagsBits = v25;
          v27._object = v26;
          String.append(_:)(v27);
          NSString v28 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          [v1 removeObjectForKey:v28];
          swift_bridgeObjectRelease();

          v24 += 2;
          --v23;
        }
        while (v23);
        swift_release();
      }
      swift_release();
      NSString v29 = String._bridgeToObjectiveC()();
      [v1 removeObjectForKey:v29];

      NSString v30 = sub_10002ACD4();
      sub_100026900((uint64_t)v30);

      NSString v31 = sub_10002ACD4();
      sub_100026900((uint64_t)v31);

      NSString v32 = String._bridgeToObjectiveC()();
      sub_100026900((uint64_t)v32);

      NSString v33 = sub_10002ACD4();
      sub_100026900((uint64_t)v33);

      NSString v34 = sub_10002ACD4();
      sub_100026900((uint64_t)v34);

      break;
  }
  NSString v35 = String._bridgeToObjectiveC()();
  [v1 setInteger:5 forKey:v35];
}

id sub_1000679E8(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&v2[OBJC_IVAR____TtC7parsecd19UserDefaultsManager_assembly + 8] = 0;
  *(void *)(swift_unknownObjectWeakInit() + 8) = a2;
  swift_unknownObjectWeakAssign();
  uint64_t v5 = self;
  uint64_t v6 = v2;
  id v7 = [v5 standardUserDefaults];
  *(void *)&v6[OBJC_IVAR____TtC7parsecd19UserDefaultsManager_userDefaults] = v7;

  v10.receiver = v6;
  v10.super_class = ObjectType;
  id v8 = objc_msgSendSuper2(&v10, "init");
  _CFPreferencesSetBackupDisabled();
  sub_100067B04();

  swift_unknownObjectRelease();
  return v8;
}

void sub_100067B04()
{
  if (swift_unknownObjectWeakLoadStrong())
  {
    __int16 v1 = *(void **)(v0 + OBJC_IVAR____TtC7parsecd19UserDefaultsManager_userDefaults);
    NSString v2 = String._bridgeToObjectiveC()();
    unsigned __int8 v3 = [v1 BOOLForKey:v2];

    id v4 = [self defaultCenter];
    sub_10002572C((uint64_t *)&unk_10021BAE0);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1001A2A20;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    AnyHashable.init<A>(_:)();
    *(void *)(inited + 96) = type metadata accessor for ContextUpdate(0);
    *(unsigned char *)sub_10002E5E8((uint64_t *)(inited + 72)) = v3;
    swift_storeEnumTagMultiPayload();
    uint64_t v6 = Dictionary.init(dictionaryLiteral:)();
    sub_10010553C(@"com.apple.parsecd.contextUpdate", 0, v6, v4);
    swift_unknownObjectRelease();
  }
}

void sub_100067C98()
{
}

uint64_t type metadata accessor for UserDefaultsManager()
{
  return self;
}

uint64_t sub_100067D48()
{
  return sub_100067D90((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100065710);
}

uint64_t sub_100067D60()
{
  return sub_100067D90((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1000658F4);
}

uint64_t sub_100067D78()
{
  return sub_100067D90((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100065D4C);
}

uint64_t sub_100067D90(uint64_t (*a1)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v3 = *v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  uint64_t *v1 = v3;
  if (!result)
  {
    uint64_t result = a1(result, *(void *)(v3 + 16) + 1, 1, v3);
    uint64_t *v1 = result;
  }
  return result;
}

uint64_t sub_100067DEC(uint64_t a1)
{
  return sub_100067E34(a1, (uint64_t (*)(BOOL))sub_100065710);
}

uint64_t sub_100067E04(uint64_t a1)
{
  return sub_100067E34(a1, (uint64_t (*)(BOOL))sub_1000658F4);
}

uint64_t sub_100067E1C(uint64_t a1)
{
  return sub_100067E34(a1, (uint64_t (*)(BOOL))sub_100065D4C);
}

uint64_t sub_100067E34(uint64_t result, uint64_t (*a2)(BOOL))
{
  unint64_t v3 = *(void *)(*(void *)v2 + 24);
  if (result + 1 > (uint64_t)(v3 >> 1))
  {
    uint64_t result = a2(v3 > 1);
    *(void *)uint64_t v2 = result;
  }
  return result;
}

uint64_t sub_100067E7C(uint64_t *a1)
{
  return sub_1000881B0(a1, *(uint64_t **)(v1 + 16)) & 1;
}

uint64_t sub_100067E9C(uint64_t a1)
{
  return sub_1000258D4(a1, qword_1002368D0);
}

uint64_t sub_100067EC4(uint64_t a1)
{
  return sub_10006831C(a1, qword_1002368E8);
}

uint64_t sub_100067EEC(uint64_t a1)
{
  return sub_1000258D4(a1, qword_100236900);
}

uint64_t sub_100067F14(uint64_t a1)
{
  return sub_1000258D4(a1, qword_100236918);
}

uint64_t sub_100067F3C(uint64_t a1)
{
  return sub_100026920(a1, qword_100236930);
}

uint64_t sub_100067F5C(uint64_t a1)
{
  return sub_100026920(a1, qword_100236948);
}

uint64_t sub_100067F7C(uint64_t a1)
{
  return sub_10006831C(a1, qword_100236960);
}

uint64_t sub_100067FA4(uint64_t a1)
{
  return sub_10006831C(a1, qword_100236978);
}

uint64_t sub_100067FC8(uint64_t a1)
{
  return sub_10006831C(a1, qword_100236990);
}

uint64_t sub_100067FE4(uint64_t a1)
{
  return sub_10006831C(a1, qword_1002369A8);
}

uint64_t sub_100068010(uint64_t a1)
{
  return sub_10002C1D4(a1, qword_1002369C0);
}

uint64_t sub_100068038(uint64_t a1)
{
  return sub_100026920(a1, qword_1002369D8);
}

uint64_t sub_100068058(uint64_t a1)
{
  return sub_10002C1D4(a1, qword_1002369F0);
}

uint64_t sub_100068080(uint64_t a1)
{
  return sub_100026920(a1, qword_100236A08);
}

uint64_t sub_1000680A0(uint64_t a1)
{
  return sub_100026920(a1, qword_100236A20);
}

uint64_t sub_1000680C0(uint64_t a1)
{
  return sub_100026920(a1, qword_100236A38);
}

uint64_t sub_1000680E0(uint64_t a1)
{
  return sub_10002C1D4(a1, qword_100236A50);
}

uint64_t sub_100068108(uint64_t a1)
{
  return sub_10006831C(a1, qword_100236A68);
}

uint64_t sub_100068134(uint64_t a1)
{
  return sub_10002C1D4(a1, qword_100236A80);
}

uint64_t sub_10006815C()
{
  sub_10006844C();
  sub_10000E090();
  uint64_t result = OS_os_log.init(subsystem:category:)();
  qword_100236A98 = result;
  return result;
}

uint64_t sub_1000681B8()
{
  sub_10006844C();
  sub_10000E090();
  uint64_t result = OS_os_log.init(subsystem:category:)();
  qword_100236AA0 = result;
  return result;
}

uint64_t sub_100068218()
{
  sub_10006844C();
  sub_100024988();
  sub_10000E090();
  uint64_t result = sub_10002A3E8();
  qword_100236AA8 = result;
  return result;
}

uint64_t sub_100068264()
{
  sub_10006844C();
  sub_100024988();
  sub_10000E090();
  uint64_t result = sub_10002A3E8();
  qword_100236AB0 = result;
  return result;
}

uint64_t sub_1000682B0()
{
  sub_10006844C();
  sub_100024988();
  sub_10000E090();
  uint64_t result = sub_10002A3E8();
  qword_100236AB8 = result;
  return result;
}

uint64_t sub_1000682FC(uint64_t a1)
{
  return sub_100026920(a1, qword_100236AC0);
}

uint64_t sub_10006831C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = type metadata accessor for Logger();
  sub_10004CD40(v3, a2);
  sub_10002A10C(v3, (uint64_t)a2);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_100068394()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10004CD40(v0, qword_100236AD8);
  sub_10002A10C(v0, (uint64_t)qword_100236AD8);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_100068418()
{
  return _swift_deallocClassInstance(v0, 16, 7);
}

uint64_t type metadata accessor for ParsecLogger()
{
  return self;
}

unint64_t sub_10006844C()
{
  unint64_t result = qword_1002192B0;
  if (!qword_1002192B0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1002192B0);
  }
  return result;
}

uint64_t sub_10006848C()
{
  uint64_t v1 = v0;
  type metadata accessor for Locker();
  uint64_t v2 = swift_allocObject();
  uint64_t v3 = (_DWORD *)swift_slowAlloc();
  *(void *)(v2 + 16) = v3;
  *uint64_t v3 = 0;
  *(void *)(v1 + 16) = v2;
  *(unsigned char *)(v1 + 24) = 0;
  sub_10002572C(&qword_10021AE98);
  swift_allocObject();
  *(void *)(v1 + 3sub_100034730((uint64_t)"SIGTERM", 7, 2) = sub_100098C18(0);
  return v1;
}

BOOL sub_10006850C(uint64_t a1, uint64_t a2)
{
  int out_token = 0;
  if (!BYSetupAssistantFinishedDarwinNotification) {
    __break(1u);
  }
  uint64_t v4 = v2;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_10005B134();
  uint64_t v6 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  id v9 = (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, enum case for DispatchQoS.QoSClass.default(_:), v6);
  objc_super v10 = static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  unint64_t v11 = (void *)swift_allocObject();
  v11[2] = v4;
  v11[3] = a1;
  void v11[4] = a2;
  void aBlock[4] = sub_100068A90;
  aBlock[5] = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10007E308;
  id aBlock[3] = &unk_1001FCA08;
  uint64_t v12 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  uint64_t v13 = String.utf8CString.getter();
  swift_bridgeObjectRelease();
  uint32_t v14 = notify_register_dispatch((const char *)(v13 + 32), &out_token, v10, v12);
  swift_release();
  _Block_release(v12);

  if (qword_100218B20 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  sub_10002A10C(v15, (uint64_t)qword_100236978);
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v18 = 67109120;
    LODWORD(aBlock[0]) = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "notifyWhenUserIsSetup: start status=%u", v18, 8u);
    swift_slowDealloc();
  }

  return v14 == 0;
}

void sub_100068848(void (*a1)(void))
{
  uint64_t v3 = *(void *)(v1 + 32);
  Lock.lock()();
  swift_beginAccess();
  if (*(unsigned char *)(v3 + 24))
  {
    Lock.unlock()();
  }
  else
  {
    *(unsigned char *)(v3 + 24) = 1;
    Lock.unlock()();
    a1();
  }
}

uint64_t sub_1000688D0()
{
  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_1000688F8()
{
  sub_1000688D0();

  return _swift_deallocClassInstance(v0, 40, 7);
}

uint64_t type metadata accessor for DeviceSetupStatus()
{
  return self;
}

void sub_100068950(int a1, uint64_t a2, void (*a3)(void))
{
  notify_cancel(a1);
  if (qword_100218B20 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_10002A10C(v4, (uint64_t)qword_100236978);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "notifyWhenUserIsSetup: completed", v7, 2u);
    swift_slowDealloc();
  }

  sub_100068848(a3);
}

uint64_t sub_100068A50()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_100068A90(int a1)
{
  sub_100068950(a1, *(void *)(v1 + 16), *(void (**)(void))(v1 + 24));
}

uint64_t sub_100068A9C(void *a1)
{
  void (*v25)(uint64_t *__return_ptr, unint64_t, unint64_t, void);
  uint64_t v26;
  long long *v27;
  void (*v28)(unsigned char *__return_ptr, unint64_t, unint64_t, void);
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint8_t *v38;
  uint64_t v39;
  void (*v40)(uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  long long v46;
  unsigned char v47[24];
  void *v48;
  unint64_t v49;
  long long v50;
  long long v51;

  uint64_t v2 = v1;
  uint64_t v4 = sub_10002572C(&qword_10021BB20);
  uint64_t v5 = sub_100016544(v4);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  objc_super v10 = (char *)&v38 - v9;
  uint64_t v11 = type metadata accessor for URL();
  sub_100020C48();
  uint64_t v13 = v12;
  uint64_t v15 = __chkstk_darwin(v14);
  os_log_type_t v17 = (char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  Swift::String v19 = (char *)&v38 - v18;
  id v48 = &unk_1001FCBE0;
  id v49 = sub_1000714F0();
  v47[0] = 1;
  char v20 = isFeatureEnabled(_:)();
  sub_10001CA50((uint64_t)v47);
  if (v20)
  {
    NSFileManager.parsecdSessionFBDirectoryURL.getter();
    if (sub_100027BA4((uint64_t)v8, 1, v11) == 1)
    {
      sub_100019938((uint64_t)v8, &qword_10021BB20);
      sub_10002538C((uint64_t)v10, 1, 1, v11);
LABEL_6:

      sub_100019938((uint64_t)v10, &qword_10021BB20);
      goto LABEL_7;
    }
    URL.appendingPathComponent(_:)();
    unint64_t v21 = *(void (**)(char *, uint64_t))(v13 + 8);
    v21(v8, v11);
    sub_10002538C((uint64_t)v10, 0, 1, v11);
    if (sub_100027BA4((uint64_t)v10, 1, v11) == 1) {
      goto LABEL_6;
    }
    uint64_t v42 = v13 + 8;
    sub_10000E0F4();
    v23();
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v17, v19, v11);
    type metadata accessor for SQLiteDatabase();
    swift_allocObject();
    uint64_t v24 = SQLiteDatabase.init(_:readOnly:requiresAuthentication:)((uint64_t)v17, 0, 0);
    uint64_t v41 = 0;
    *(void *)(v2 + 16) = v24;
    uint64_t v25 = *(void (**)(uint64_t *__return_ptr, unint64_t, unint64_t, void))(*(void *)v24 + 176);
    swift_retain();
    v25(&v45, 0xD00000000000006BLL, 0x80000001001B36E0, 0);
    swift_release();
    SQLiteStatement.execute()();
    if (v26)
    {
      swift_release();
      *(_OWORD *)uint64_t v47 = v46;
      Swift::String v27 = (long long *)v47;
    }
    else
    {
      swift_release();
      id v51 = v46;
      sub_100057E18((uint64_t)&v51);
      NSString v28 = *(void (**)(unsigned char *__return_ptr, unint64_t, unint64_t, void))(**(void **)(v2 + 16) + 176);
      swift_retain();
      v28(v47, 0xD0000000000000A6, 0x80000001001B3750, 0);
      swift_release();
      SQLiteStatement.execute()();
      if (!v36)
      {
        swift_release();
        id v50 = *(_OWORD *)&v47[8];
        sub_100057E18((uint64_t)&v50);

        double v37 = sub_10002DE68();
        ((void (*)(uint64_t))v21)(v37);
        return v2;
      }
      swift_release();
      id v50 = *(_OWORD *)&v47[8];
      Swift::String v27 = &v50;
    }
    sub_100057E18((uint64_t)v27);
    uint64_t v40 = (void (*)(uint64_t))v21;
    if (qword_100218B30 != -1) {
      swift_once();
    }
    NSString v29 = type metadata accessor for Logger();
    sub_10002A10C(v29, (uint64_t)qword_1002369A8);
    swift_errorRetain();
    swift_errorRetain();
    NSString v30 = Logger.logObject.getter();
    NSString v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      NSString v32 = (uint8_t *)sub_1000274E8();
      uint64_t v39 = swift_slowAlloc();
      uint64_t v44 = v39;
      *(_DWORD *)NSString v32 = 136315138;
      double v38 = v32 + 4;
      swift_getErrorValue();
      NSString v33 = Error.localizedDescription.getter();
      unint64_t v43 = sub_10001C274(v33, v34, &v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "error creating feedback db: %s", v32, 0xCu);
      swift_arrayDestroy();
      sub_100017D40();
      sub_100017D40();
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
    }
    swift_errorRelease();
    NSString v35 = sub_10002DE68();
    v40(v35);
    if (!v41)
    {
      swift_release();
      return 0;
    }
  }
  else
  {
  }
LABEL_7:
  type metadata accessor for ExperimentalFeedbackDatabase();
  swift_deallocPartialClassInstance();
  return 0;
}

uint64_t sub_1000690B0(void *a1)
{
  type metadata accessor for JSONEncodingOptions();
  sub_100020C48();
  __chkstk_darwin(v3);
  sub_100027014();
  uint64_t v4 = type metadata accessor for BinaryDecodingOptions();
  uint64_t v5 = sub_100016544(v4);
  __chkstk_darwin(v5);
  sub_10000DFD0();
  uint64_t v6 = sub_10002572C(&qword_100219EC0);
  uint64_t v7 = sub_100016544(v6);
  __chkstk_darwin(v7);
  sub_100024998();
  uint64_t v8 = type metadata accessor for Apple_Parsec_Feedback_V2_ClientSession();
  sub_100020C48();
  uint64_t v10 = v9;
  __chkstk_darwin(v11);
  sub_10000E04C();
  uint64_t v31 = v12;
  uint64_t result = sub_100008630(a1);
  if (v14 >> 60 == 15)
  {
    __break(1u);
  }
  else
  {
    uint64_t v35 = 0;
    memset(v34, 0, sizeof(v34));
    BinaryDecodingOptions.init()();
    sub_1000714A8(&qword_100219EC8, (void (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_ClientSession);
    Message.init(serializedData:extensions:partial:options:)();
    sub_10002538C(v1, 0, 1, v8);
    sub_10000E0F4();
    v15();
    JSONEncodingOptions.init()();
    uint64_t v16 = Message.jsonString(options:)();
    uint64_t v18 = v17;
    uint64_t v19 = sub_10002A408();
    v20(v19);
    unint64_t v21 = sub_1000212F4(49);
    v22(v21);
    sub_10002572C(&qword_10021A300);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1001A2A20;
    *(void *)(inited + 56) = &type metadata for String;
    *(void *)(inited + 64) = &protocol witness table for String;
    *(void *)(inited + 3sub_100034730((uint64_t)"SIGTERM", 7, 2) = v16;
    *(void *)(inited + 40) = v18;
    SQLiteStatement.bind(_:)(inited);
    swift_setDeallocating();
    sub_1000FD1A8();
    swift_release();
    long long v37 = v33;
    sub_100057E18((uint64_t)&v37);
    SQLiteStatement.execute()();
    if (v24)
    {
      swift_release();
      long long v36 = *(_OWORD *)((char *)v34 + 8);
      sub_100057E18((uint64_t)&v36);
      if (qword_100218B30 != -1) {
        swift_once();
      }
      uint64_t v25 = type metadata accessor for Logger();
      sub_10002A10C(v25, (uint64_t)qword_1002369A8);
      swift_errorRetain();
      swift_errorRetain();
      id v26 = Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v26, v27))
      {
        NSString v28 = (uint8_t *)sub_1000274E8();
        v32[0] = swift_slowAlloc();
        *(_DWORD *)NSString v28 = 136315138;
        swift_getErrorValue();
        uint64_t v29 = Error.localizedDescription.getter();
        sub_10001C274(v29, v30, v32);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v26, v27, "error inserting to sess table: %s", v28, 0xCu);
        swift_arrayDestroy();
        sub_100017D40();
        sub_100017D40();

        swift_errorRelease();
        return (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(v31, v8);
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
        swift_errorRelease();
        return (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(v31, v8);
      }
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v31, v8);
      swift_release();
      long long v36 = *(_OWORD *)((char *)v34 + 8);
      return sub_100057E18((uint64_t)&v36);
    }
  }
  return result;
}

uint64_t sub_100069630(void *a1)
{
  uint64_t v3 = sub_10002572C((uint64_t *)&unk_10021DC20);
  uint64_t v4 = sub_100016544(v3);
  __chkstk_darwin(v4);
  sub_100024998();
  uint64_t v65 = type metadata accessor for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback();
  sub_100020C48();
  __chkstk_darwin(v5);
  sub_10000E04C();
  uint64_t v62 = v6;
  uint64_t v7 = type metadata accessor for BinaryDecodingOptions();
  uint64_t v8 = sub_100016544(v7);
  __chkstk_darwin(v8);
  sub_10000DFD0();
  uint64_t v9 = sub_10002572C(&qword_100219EA8);
  uint64_t v10 = sub_100016544(v9);
  __chkstk_darwin(v10);
  sub_100027014();
  uint64_t v66 = type metadata accessor for Apple_Parsec_Feedback_V2_FeedbackPayload();
  sub_100020C48();
  uint64_t v63 = v11;
  __chkstk_darwin(v12);
  sub_10000E04C();
  uint64_t v64 = v13;
  uint64_t v14 = type metadata accessor for Client();
  sub_100020C48();
  uint64_t v16 = v15;
  __chkstk_darwin(v17);
  sub_10000DFD0();
  uint64_t v20 = v19 - v18;
  UserAgent.client.getter();
  uint64_t v21 = Client.name.getter();
  uint64_t v23 = v22;
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v20, v14);
  if (v21 == static Client.unknownClientName.getter() && v23 == v24) {
    return swift_bridgeObjectRelease_n();
  }
  char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v26) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v27 = sub_100008630(a1);
  if (v28 >> 60 == 15) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v30 = v27;
  unint64_t v31 = v28;
  uint64_t v71 = 0;
  memset(v70, 0, sizeof(v70));
  sub_100027BCC(v27, v28);
  BinaryDecodingOptions.init()();
  sub_1000714A8(&qword_100219EB0, (void (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_FeedbackPayload);
  Message.init(serializedData:extensions:partial:options:)();
  sub_10002538C(v1, 0, 1, v66);
  sub_10000E0F4();
  v32();
  Apple_Parsec_Feedback_V2_FeedbackPayload.containedFeedback.getter();
  if (sub_100027BA4(v2, 1, v65) == 1)
  {
    uint64_t v33 = sub_100027DE4();
    v34(v33);
    sub_10000A330(v30, v31);
    swift_bridgeObjectRelease();
    return sub_100019938(v2, (uint64_t *)&unk_10021DC20);
  }
  sub_10000E0F4();
  v35();
  uint64_t v36 = sub_100069D88(v62);
  uint64_t v38 = v37;
  uint64_t v59 = v36;
  uint64_t v60 = v39;
  uint64_t v61 = v40;
  unint64_t v41 = sub_1000212F4(60);
  v42(v41);
  sub_10002572C(&qword_10021A300);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1001A4D80;
  *(void *)(inited + 56) = &type metadata for String;
  *(void *)(inited + 64) = &protocol witness table for String;
  *(void *)(inited + 3sub_100034730((uint64_t)"SIGTERM", 7, 2) = v21;
  *(void *)(inited + 40) = v23;
  uint64_t v56 = UUID.uuidString.getter();
  *(void *)(inited + 96) = &type metadata for String;
  *(void *)(inited + 104) = &protocol witness table for String;
  *(void *)(inited + 7sub_100034730((uint64_t)"SIGTERM", 7, 2) = v56;
  *(void *)(inited + 80) = v57;
  uint64_t result = (uint64_t)[a1 queryId];
  *(void *)(inited + 136) = &type metadata for Int64;
  *(void *)(inited + 144) = &protocol witness table for Int64;
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    *(void *)(inited + 11sub_100034730((uint64_t)"SIGTERM", 7, 2) = result;
    *(void *)(inited + 176) = &type metadata for String;
    *(void *)(inited + 184) = &protocol witness table for String;
    *(void *)(inited + 15sub_100034730((uint64_t)"SIGTERM", 7, 2) = v59;
    *(void *)(inited + 160) = v38;
    *(void *)(inited + 216) = &type metadata for String;
    *(void *)(inited + 224) = &protocol witness table for String;
    *(void *)(inited + 19sub_100034730((uint64_t)"SIGTERM", 7, 2) = v60;
    *(void *)(inited + 200) = v61;
    SQLiteStatement.bind(_:)(inited);
    swift_setDeallocating();
    sub_1000FD1A8();
    swift_release();
    long long v73 = v69;
    sub_100057E18((uint64_t)&v73);
    SQLiteStatement.execute()();
    if (v58)
    {
      swift_release();
      long long v72 = *(_OWORD *)((char *)v70 + 8);
      sub_100057E18((uint64_t)&v72);
      if (qword_100218B30 != -1) {
        swift_once();
      }
      uint64_t v43 = type metadata accessor for Logger();
      sub_10002A10C(v43, (uint64_t)qword_1002369A8);
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v44 = Logger.logObject.getter();
      os_log_type_t v45 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v44, v45))
      {
        uint64_t v46 = (uint8_t *)sub_1000274E8();
        uint64_t v68 = swift_slowAlloc();
        *(_DWORD *)uint64_t v46 = 136315138;
        swift_getErrorValue();
        uint64_t v47 = Error.localizedDescription.getter();
        sub_10001C274(v47, v48, &v68);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v44, v45, "error inserting to log table: %s", v46, 0xCu);
        swift_arrayDestroy();
        sub_100017D40();
        sub_100017D40();

        swift_errorRelease();
        sub_10000A330(v30, v31);
        uint64_t v49 = sub_100017E4C();
        v50(v49);
        return (*(uint64_t (**)(uint64_t, uint64_t))(v63 + 8))(v64, v66);
      }

      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    else
    {
      swift_release();
      long long v72 = *(_OWORD *)((char *)v70 + 8);
      sub_100057E18((uint64_t)&v72);
    }
    sub_10000A330(v30, v31);
    uint64_t v51 = sub_100017E4C();
    v52(v51);
    uint64_t v53 = sub_100027DE4();
    return v54(v53);
  }
  return result;
}

uint64_t sub_100069D88(uint64_t a1)
{
  uint64_t v760 = a1;
  uint64_t v664 = type metadata accessor for Apple_Parsec_Feedback_V2_ExperimentTriggeredFeedback();
  uint64_t v639 = *(void *)(v664 - 8);
  __chkstk_darwin(v664);
  v663 = (char *)&v584 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v662 = type metadata accessor for Apple_Parsec_Feedback_V2_DynamicButtonVisibilityFeedback();
  uint64_t v638 = *(void *)(v662 - 8);
  __chkstk_darwin(v662);
  v661 = (char *)&v584 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v660 = type metadata accessor for Apple_Parsec_Feedback_V2_CommandEngagementFeedback();
  uint64_t v637 = *(void *)(v660 - 8);
  __chkstk_darwin(v660);
  v659 = (char *)&v584 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v658 = type metadata accessor for Apple_Parsec_Feedback_V2_ClientTimingFeedback();
  uint64_t v636 = *(void *)(v658 - 8);
  __chkstk_darwin(v658);
  v657 = (char *)&v584 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v656 = type metadata accessor for Apple_Parsec_Feedback_V2_CBAEngagementFeedback();
  uint64_t v635 = *(void *)(v656 - 8);
  __chkstk_darwin(v656);
  v655 = (char *)&v584 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v654 = type metadata accessor for Apple_Parsec_Feedback_V2_CacheHitFeedback();
  uint64_t v634 = *(void *)(v654 - 8);
  __chkstk_darwin(v654);
  v653 = (char *)&v584 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v652 = type metadata accessor for Apple_Parsec_Feedback_V2_SkipSearchFeedback();
  uint64_t v633 = *(void *)(v652 - 8);
  __chkstk_darwin(v652);
  v651 = (char *)&v584 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v650 = type metadata accessor for Apple_Parsec_Feedback_V2_CardViewAppearFeedback();
  uint64_t v632 = *(void *)(v650 - 8);
  __chkstk_darwin(v650);
  v649 = (char *)&v584 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v648 = type metadata accessor for Apple_Parsec_Feedback_V2_SessionEndFeedback();
  uint64_t v631 = *(void *)(v648 - 8);
  __chkstk_darwin(v648);
  v647 = (char *)&v584 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v646 = type metadata accessor for Apple_Parsec_Feedback_V2_CardSectionEngagementFeedback();
  uint64_t v630 = *(void *)(v646 - 8);
  __chkstk_darwin(v646);
  v645 = (char *)&v584 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v644 = type metadata accessor for Apple_Parsec_Feedback_V2_ConnectionInvalidatedFeedback();
  uint64_t v629 = *(void *)(v644 - 8);
  __chkstk_darwin(v644);
  v643 = (char *)&v584 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v642 = type metadata accessor for Apple_Parsec_Feedback_V2_LookupHintRelevancyFeedback();
  uint64_t v628 = *(void *)(v642 - 8);
  __chkstk_darwin(v642);
  v641 = (char *)&v584 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v640 = type metadata accessor for Apple_Parsec_Feedback_V2_ResultGradingFeedback();
  uint64_t v627 = *(void *)(v640 - 8);
  __chkstk_darwin(v640);
  v715 = (char *)&v584 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v714 = type metadata accessor for Apple_Parsec_Feedback_V2_SessionMissingSuggestionsFeedback();
  uint64_t v626 = *(void *)(v714 - 8);
  __chkstk_darwin(v714);
  v713 = (char *)&v584 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v712 = type metadata accessor for Apple_Parsec_Feedback_V2_SessionMissingResultsFeedback();
  uint64_t v625 = *(void *)(v712 - 8);
  __chkstk_darwin(v712);
  v711 = (char *)&v584 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v710 = type metadata accessor for Apple_Parsec_Feedback_V2_DidGoToSearchFeedback();
  uint64_t v624 = *(void *)(v710 - 8);
  __chkstk_darwin(v710);
  v709 = (char *)&v584 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v623 = type metadata accessor for Apple_Parsec_Feedback_V2_DidGoToSiteFeedback();
  uint64_t v622 = *(void *)(v623 - 8);
  __chkstk_darwin(v623);
  v621 = (char *)&v584 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v620 = type metadata accessor for Apple_Parsec_Feedback_V2_VisibleSectionHeaderFeedback();
  uint64_t v619 = *(void *)(v620 - 8);
  __chkstk_darwin(v620);
  v618 = (char *)&v584 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v617 = type metadata accessor for Apple_Parsec_Feedback_V2_SectionEngagementFeedback();
  uint64_t v616 = *(void *)(v617 - 8);
  __chkstk_darwin(v617);
  v615 = (char *)&v584 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v614 = type metadata accessor for Apple_Parsec_Feedback_V2_ClearInputFeedback();
  uint64_t v613 = *(void *)(v614 - 8);
  __chkstk_darwin(v614);
  v612 = (char *)&v584 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v611 = type metadata accessor for Apple_Parsec_Feedback_V2_LateSectionsAppendedFeedback();
  uint64_t v610 = *(void *)(v611 - 8);
  __chkstk_darwin(v611);
  v609 = (char *)&v584 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v608 = type metadata accessor for Apple_Parsec_Feedback_V2_ResultsReceivedAfterTimeoutFeedback();
  uint64_t v607 = *(void *)(v608 - 8);
  __chkstk_darwin(v608);
  v606 = (char *)&v584 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v668 = type metadata accessor for Apple_Parsec_Feedback_V2_VisibleSuggestionsFeedback();
  uint64_t v667 = *(void *)(v668 - 8);
  __chkstk_darwin(v668);
  v666 = (char *)&v584 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v672 = type metadata accessor for Apple_Parsec_Feedback_V2_CardViewDisappearFeedback();
  uint64_t v671 = *(void *)(v672 - 8);
  __chkstk_darwin(v672);
  v670 = (char *)&v584 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v676 = type metadata accessor for Apple_Parsec_Feedback_V2_SuggestionEngagementFeedback();
  uint64_t v675 = *(void *)(v676 - 8);
  __chkstk_darwin(v676);
  v674 = (char *)&v584 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v680 = type metadata accessor for Apple_Parsec_Feedback_V2_CustomFeedback();
  uint64_t v679 = *(void *)(v680 - 8);
  __chkstk_darwin(v680);
  v678 = (char *)&v584 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v684 = type metadata accessor for Apple_Parsec_Feedback_V2_ErrorFeedback();
  uint64_t v683 = *(void *)(v684 - 8);
  __chkstk_darwin(v684);
  v682 = (char *)&v584 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v688 = type metadata accessor for Apple_Parsec_Feedback_V2_EndLocalSearchFeedback();
  uint64_t v687 = *(void *)(v688 - 8);
  __chkstk_darwin(v688);
  v686 = (char *)&v584 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t started = type metadata accessor for Apple_Parsec_Feedback_V2_StartLocalSearchFeedback();
  uint64_t v691 = *(void *)(started - 8);
  __chkstk_darwin(started);
  v690 = (char *)&v584 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v696 = type metadata accessor for Apple_Parsec_Feedback_V2_EndNetworkSearchFeedback();
  uint64_t v695 = *(void *)(v696 - 8);
  __chkstk_darwin(v696);
  v694 = (char *)&v584 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v700 = type metadata accessor for Apple_Parsec_Feedback_V2_StartNetworkSearchFeedback();
  uint64_t v699 = *(void *)(v700 - 8);
  __chkstk_darwin(v700);
  v698 = (char *)&v584 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v708 = type metadata accessor for Apple_Parsec_Feedback_V2_EndSearchFeedback();
  uint64_t v707 = *(void *)(v708 - 8);
  __chkstk_darwin(v708);
  v706 = (char *)&v584 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v705 = type metadata accessor for Apple_Parsec_Feedback_V2_StartSearchFeedback();
  uint64_t v704 = *(void *)(v705 - 8);
  __chkstk_darwin(v705);
  v703 = (char *)&v584 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v719 = type metadata accessor for Apple_Parsec_Feedback_V2_StoreCardSectionEngagementFeedback();
  uint64_t v718 = *(void *)(v719 - 8);
  __chkstk_darwin(v719);
  v717 = (char *)&v584 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v723 = type metadata accessor for Apple_Parsec_Feedback_V2_MapsCardSectionEngagementFeedback();
  uint64_t v722 = *(void *)(v723 - 8);
  __chkstk_darwin(v723);
  v721 = (char *)&v584 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v727 = type metadata accessor for Apple_Parsec_Feedback_V2_CardSectionFeedback();
  uint64_t v726 = *(void *)(v727 - 8);
  __chkstk_darwin(v727);
  v725 = (char *)&v584 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v734 = type metadata accessor for Apple_Parsec_Feedback_V2_VisibleResultsFeedback();
  uint64_t v730 = *(void *)(v734 - 8);
  __chkstk_darwin(v734);
  v729 = (char *)&v584 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v737 = type metadata accessor for Apple_Parsec_Feedback_V2_ResultEngagementFeedback();
  uint64_t v733 = *(void *)(v737 - 8);
  __chkstk_darwin(v737);
  v732 = (char *)&v584 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v742 = type metadata accessor for Apple_Parsec_Feedback_V2_ResultFeedback();
  uint64_t v736 = *(void *)(v742 - 8);
  __chkstk_darwin(v742);
  v741 = (char *)&v584 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v746 = type metadata accessor for Apple_Parsec_Feedback_V2_ResultRankingFeedback();
  uint64_t v740 = *(void *)(v746 - 8);
  __chkstk_darwin(v746);
  v739 = (char *)&v584 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v750 = type metadata accessor for Apple_Parsec_Feedback_V2_SectionRankingFeedback();
  uint64_t v745 = *(void *)(v750 - 8);
  __chkstk_darwin(v750);
  v744 = (char *)&v584 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v754 = type metadata accessor for Apple_Parsec_Feedback_V2_RankingFeedback();
  uint64_t v749 = *(void *)(v754 - 8);
  __chkstk_darwin(v754);
  v748 = (char *)&v584 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = type metadata accessor for Apple_Parsec_Feedback_V2_SearchViewDisappearFeedback();
  uint64_t v752 = *(void *)(v43 - 8);
  uint64_t v753 = v43;
  __chkstk_darwin(v43);
  v751 = (char *)&v584 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = type metadata accessor for Apple_Parsec_Feedback_V2_SearchViewAppearFeedback();
  uint64_t v756 = *(void *)(v45 - 8);
  uint64_t v757 = v45;
  __chkstk_darwin(v45);
  v755 = (char *)&v584 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = type metadata accessor for JSONEncodingOptions();
  uint64_t v48 = *(void *)(v47 - 8);
  uint64_t v758 = v47;
  uint64_t v759 = v48;
  uint64_t v49 = __chkstk_darwin(v47);
  v605 = (char *)&v584 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = __chkstk_darwin(v49);
  v604 = (char *)&v584 - v52;
  uint64_t v53 = __chkstk_darwin(v51);
  v603 = (char *)&v584 - v54;
  uint64_t v55 = __chkstk_darwin(v53);
  v602 = (char *)&v584 - v56;
  uint64_t v57 = __chkstk_darwin(v55);
  v601 = (char *)&v584 - v58;
  uint64_t v59 = __chkstk_darwin(v57);
  v600 = (char *)&v584 - v60;
  uint64_t v61 = __chkstk_darwin(v59);
  v599 = (char *)&v584 - v62;
  uint64_t v63 = __chkstk_darwin(v61);
  v598 = (char *)&v584 - v64;
  uint64_t v65 = __chkstk_darwin(v63);
  v597 = (char *)&v584 - v66;
  uint64_t v67 = __chkstk_darwin(v65);
  v596 = (char *)&v584 - v68;
  uint64_t v69 = __chkstk_darwin(v67);
  v595 = (char *)&v584 - v70;
  uint64_t v71 = __chkstk_darwin(v69);
  v594 = (char *)&v584 - v72;
  uint64_t v73 = __chkstk_darwin(v71);
  v593 = (char *)&v584 - v74;
  uint64_t v75 = __chkstk_darwin(v73);
  v592 = (char *)&v584 - v76;
  uint64_t v77 = __chkstk_darwin(v75);
  v591 = (char *)&v584 - v78;
  uint64_t v79 = __chkstk_darwin(v77);
  v590 = (char *)&v584 - v80;
  uint64_t v81 = __chkstk_darwin(v79);
  v589 = (char *)&v584 - v82;
  uint64_t v83 = __chkstk_darwin(v81);
  v588 = (char *)&v584 - v84;
  uint64_t v85 = __chkstk_darwin(v83);
  v587 = (char *)&v584 - v86;
  uint64_t v87 = __chkstk_darwin(v85);
  v586 = (char *)&v584 - v88;
  uint64_t v89 = __chkstk_darwin(v87);
  v585 = (char *)&v584 - v90;
  uint64_t v91 = __chkstk_darwin(v89);
  v584 = (char *)&v584 - v92;
  uint64_t v93 = __chkstk_darwin(v91);
  v665 = (char *)&v584 - v94;
  uint64_t v95 = __chkstk_darwin(v93);
  v669 = (char *)&v584 - v96;
  uint64_t v97 = __chkstk_darwin(v95);
  v673 = (char *)&v584 - v98;
  uint64_t v99 = __chkstk_darwin(v97);
  v677 = (char *)&v584 - v100;
  uint64_t v101 = __chkstk_darwin(v99);
  v681 = (char *)&v584 - v102;
  uint64_t v103 = __chkstk_darwin(v101);
  v685 = (char *)&v584 - v104;
  uint64_t v105 = __chkstk_darwin(v103);
  v689 = (char *)&v584 - v106;
  uint64_t v107 = __chkstk_darwin(v105);
  v693 = (char *)&v584 - v108;
  uint64_t v109 = __chkstk_darwin(v107);
  v697 = (char *)&v584 - v110;
  uint64_t v111 = __chkstk_darwin(v109);
  v702 = (char *)&v584 - v112;
  uint64_t v113 = __chkstk_darwin(v111);
  v701 = (char *)&v584 - v114;
  uint64_t v115 = __chkstk_darwin(v113);
  v716 = (char *)&v584 - v116;
  uint64_t v117 = __chkstk_darwin(v115);
  v720 = (char *)&v584 - v118;
  uint64_t v119 = __chkstk_darwin(v117);
  v724 = (char *)&v584 - v120;
  uint64_t v121 = __chkstk_darwin(v119);
  v728 = (char *)&v584 - v122;
  uint64_t v123 = __chkstk_darwin(v121);
  v731 = (char *)&v584 - v124;
  uint64_t v125 = __chkstk_darwin(v123);
  v735 = (char *)&v584 - v126;
  uint64_t v127 = __chkstk_darwin(v125);
  v738 = (char *)&v584 - v128;
  uint64_t v129 = __chkstk_darwin(v127);
  v743 = (char *)&v584 - v130;
  uint64_t v131 = __chkstk_darwin(v129);
  v747 = (char *)&v584 - v132;
  uint64_t v133 = __chkstk_darwin(v131);
  uint64_t v135 = (char *)&v584 - v134;
  uint64_t v136 = __chkstk_darwin(v133);
  uint64_t v138 = (char *)&v584 - v137;
  __chkstk_darwin(v136);
  uint64_t v140 = (char *)&v584 - v139;
  uint64_t v141 = type metadata accessor for Apple_Parsec_Feedback_V2_Feedback();
  uint64_t v142 = *(void *)(v141 - 8);
  __chkstk_darwin(v141);
  uint64_t v144 = (char *)&v584 - ((v143 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v145 = type metadata accessor for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback();
  uint64_t v146 = *(void *)(v145 - 8);
  __chkstk_darwin(v145);
  id v148 = (char *)&v584 - ((v147 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v146 + 16))(v148, v760, v145);
  int v149 = (*(uint64_t (**)(char *, uint64_t))(v146 + 88))(v148, v145);
  if (v149 != enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.feedback(_:))
  {
    uint64_t v159 = v145;
    uint64_t v160 = v146;
    uint64_t v161 = v148;
    if (v149 == enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.searchViewAppearFeedback(_:))
    {
      (*(void (**)(char *, uint64_t))(v146 + 96))(v148, v145);
      uint64_t v163 = v755;
      uint64_t v162 = v756;
      uint64_t v164 = v757;
      (*(void (**)(char *, char *, uint64_t))(v756 + 32))(v755, v148, v757);
      uint64_t v165 = static Apple_Parsec_Feedback_V2_SearchViewAppearFeedback.protoMessageName.getter();
      unint64_t v167 = v166;
      uint64_t v761 = 46;
      unint64_t v762 = 0xE100000000000000;
      __chkstk_darwin(v165);
      *(&v584 - sub_100034730((uint64_t)"SIGTERM", 7, 2) = (char *)&v761;
      swift_bridgeObjectRetain();
      uint64_t v168 = v165;
      unint64_t v169 = v763;
      uint64_t v170 = sub_10001F318(0x7FFFFFFFFFFFFFFFLL, 1u, sub_10007153C, (uint64_t)(&v584 - 4), v168, v167);
      swift_bridgeObjectRelease();
      uint64_t v760 = sub_100071444(v170);
      unint64_t v763 = v171;
      uint64_t v750 = v172;
      unint64_t v152 = v173;
      swift_bridgeObjectRelease();
      JSONEncodingOptions.init()();
      sub_1000714A8(&qword_10021B0A8, (void (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_SearchViewAppearFeedback);
      Message.jsonString(options:)();
      if (v169)
      {
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v759 + 8))(v138, v758);
        (*(void (**)(char *, uint64_t))(v162 + 8))(v163, v164);
        return v152;
      }
      (*(void (**)(char *, uint64_t))(v759 + 8))(v138, v758);
      (*(void (**)(char *, uint64_t))(v162 + 8))(v163, v164);
      unint64_t v158 = v152;
      goto LABEL_23;
    }
    id v174 = v148;
    if (v149 == enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.searchViewDisappearFeedback(_:))
    {
      (*(void (**)(char *, uint64_t))(v146 + 96))(v148, v145);
      unint64_t v175 = v751;
      uint64_t v176 = v752;
      uint64_t v177 = v753;
      (*(void (**)(char *, char *, uint64_t))(v752 + 32))(v751, v148, v753);
      uint64_t v178 = static Apple_Parsec_Feedback_V2_SearchViewDisappearFeedback.protoMessageName.getter();
      unint64_t v180 = v179;
      uint64_t v761 = 46;
      unint64_t v762 = 0xE100000000000000;
      __chkstk_darwin(v178);
      *(&v584 - sub_100034730((uint64_t)"SIGTERM", 7, 2) = (char *)&v761;
      swift_bridgeObjectRetain();
      uint64_t v181 = v178;
      unint64_t v182 = v763;
      uint64_t v183 = sub_10001F318(0x7FFFFFFFFFFFFFFFLL, 1u, sub_10007153C, (uint64_t)(&v584 - 4), v181, v180);
      swift_bridgeObjectRelease();
      uint64_t v760 = sub_100071444(v183);
      unint64_t v763 = v184;
      uint64_t v750 = v185;
      unint64_t v152 = v186;
      swift_bridgeObjectRelease();
      JSONEncodingOptions.init()();
      sub_1000714A8(&qword_10021B0A0, (void (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_SearchViewDisappearFeedback);
      Message.jsonString(options:)();
      if (v182)
      {
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v759 + 8))(v135, v758);
        (*(void (**)(char *, uint64_t))(v176 + 8))(v175, v177);
        return v152;
      }
      (*(void (**)(char *, uint64_t))(v759 + 8))(v135, v758);
      (*(void (**)(char *, uint64_t))(v176 + 8))(v175, v177);
      unint64_t v158 = v152;
      goto LABEL_23;
    }
    if (v149 == enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.rankingFeedback(_:))
    {
      (*(void (**)(char *, uint64_t))(v146 + 96))(v148, v145);
      v188 = v748;
      uint64_t v187 = v749;
      (*(void (**)(char *, char *, uint64_t))(v749 + 32))(v748, v148, v754);
      uint64_t v189 = static Apple_Parsec_Feedback_V2_RankingFeedback.protoMessageName.getter();
      unint64_t v191 = v190;
      uint64_t v761 = 46;
      unint64_t v762 = 0xE100000000000000;
      __chkstk_darwin(v189);
      *(&v584 - sub_100034730((uint64_t)"SIGTERM", 7, 2) = (char *)&v761;
      swift_bridgeObjectRetain();
      uint64_t v192 = v189;
      unint64_t v193 = v763;
      uint64_t v194 = sub_10001F318(0x7FFFFFFFFFFFFFFFLL, 1u, sub_10007153C, (uint64_t)(&v584 - 4), v192, v191);
      swift_bridgeObjectRelease();
      sub_100071444(v194);
      unint64_t v763 = v195;
      uint64_t v750 = v196;
      unint64_t v158 = v197;
      swift_bridgeObjectRelease();
      v198 = v747;
      JSONEncodingOptions.init()();
      sub_1000714A8(&qword_10021B098, (void (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_RankingFeedback);
      unint64_t v152 = (unint64_t)v188;
      Message.jsonString(options:)();
      if (v193)
      {
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v759 + 8))(v198, v758);
        (*(void (**)(char *, uint64_t))(v187 + 8))(v188, v754);
        return v152;
      }
      (*(void (**)(char *, uint64_t))(v759 + 8))(v198, v758);
      (*(void (**)(char *, uint64_t))(v187 + 8))(v188, v754);
      goto LABEL_23;
    }
    if (v149 == enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.sectionRankingFeedback(_:))
    {
      (*(void (**)(char *, uint64_t))(v146 + 96))(v148, v145);
      v200 = v744;
      uint64_t v199 = v745;
      (*(void (**)(char *, char *, uint64_t))(v745 + 32))(v744, v148, v750);
      uint64_t v201 = static Apple_Parsec_Feedback_V2_SectionRankingFeedback.protoMessageName.getter();
      unint64_t v203 = v202;
      uint64_t v761 = 46;
      unint64_t v762 = 0xE100000000000000;
      __chkstk_darwin(v201);
      *(&v584 - sub_100034730((uint64_t)"SIGTERM", 7, 2) = (char *)&v761;
      swift_bridgeObjectRetain();
      uint64_t v204 = v201;
      unint64_t v205 = v763;
      uint64_t v206 = sub_10001F318(0x7FFFFFFFFFFFFFFFLL, 1u, sub_10007153C, (uint64_t)(&v584 - 4), v204, v203);
      swift_bridgeObjectRelease();
      uint64_t v760 = sub_100071444(v206);
      unint64_t v763 = v207;
      unint64_t v158 = v208;
      swift_bridgeObjectRelease();
      v209 = v743;
      JSONEncodingOptions.init()();
      sub_1000714A8(&qword_10021B090, (void (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_SectionRankingFeedback);
      unint64_t v152 = (unint64_t)v200;
      Message.jsonString(options:)();
      if (v205)
      {
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v759 + 8))(v209, v758);
        (*(void (**)(char *, uint64_t))(v199 + 8))(v200, v750);
        return v152;
      }
      (*(void (**)(char *, uint64_t))(v759 + 8))(v209, v758);
      (*(void (**)(char *, uint64_t))(v199 + 8))(v200, v750);
      goto LABEL_23;
    }
    if (v149 == enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.resultRankingFeedback(_:))
    {
      (*(void (**)(char *, uint64_t))(v146 + 96))(v148, v145);
      uint64_t v210 = v740;
      v211 = v739;
      (*(void (**)(char *, char *, uint64_t))(v740 + 32))(v739, v148, v746);
      uint64_t v212 = static Apple_Parsec_Feedback_V2_ResultRankingFeedback.protoMessageName.getter();
      unint64_t v214 = v213;
      uint64_t v761 = 46;
      unint64_t v762 = 0xE100000000000000;
      __chkstk_darwin(v212);
      *(&v584 - sub_100034730((uint64_t)"SIGTERM", 7, 2) = (char *)&v761;
      swift_bridgeObjectRetain();
      uint64_t v215 = v212;
      unint64_t v216 = v763;
      uint64_t v217 = sub_10001F318(0x7FFFFFFFFFFFFFFFLL, 1u, sub_10007153C, (uint64_t)(&v584 - 4), v215, v214);
      swift_bridgeObjectRelease();
      uint64_t v760 = sub_100071444(v217);
      unint64_t v763 = v218;
      unint64_t v158 = v219;
      swift_bridgeObjectRelease();
      v220 = v738;
      JSONEncodingOptions.init()();
      sub_1000714A8(&qword_10021B088, (void (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_ResultRankingFeedback);
      unint64_t v152 = (unint64_t)v211;
      Message.jsonString(options:)();
      if (v216)
      {
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v759 + 8))(v220, v758);
        (*(void (**)(char *, uint64_t))(v210 + 8))(v211, v746);
        return v152;
      }
      (*(void (**)(char *, uint64_t))(v759 + 8))(v220, v758);
      (*(void (**)(char *, uint64_t))(v210 + 8))(v211, v746);
      goto LABEL_23;
    }
    if (v149 == enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.resultFeedback(_:))
    {
      (*(void (**)(char *, uint64_t))(v146 + 96))(v148, v145);
      uint64_t v222 = v736;
      (*(void (**)(char *, char *, uint64_t))(v736 + 32))(v741, v148, v742);
      uint64_t v223 = static Apple_Parsec_Feedback_V2_ResultFeedback.protoMessageName.getter();
      unint64_t v225 = v224;
      uint64_t v761 = 46;
      unint64_t v762 = 0xE100000000000000;
      __chkstk_darwin(v223);
      *(&v584 - sub_100034730((uint64_t)"SIGTERM", 7, 2) = (char *)&v761;
      swift_bridgeObjectRetain();
      uint64_t v226 = v223;
      unint64_t v227 = v763;
      uint64_t v228 = sub_10001F318(0x7FFFFFFFFFFFFFFFLL, 1u, sub_10007153C, (uint64_t)(&v584 - 4), v226, v225);
      swift_bridgeObjectRelease();
      sub_100071444(v228);
      unint64_t v763 = v229;
      unint64_t v158 = v230;
      swift_bridgeObjectRelease();
      unint64_t v152 = (unint64_t)v735;
      JSONEncodingOptions.init()();
      sub_1000714A8(&qword_10021B080, (void (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_ResultFeedback);
      Message.jsonString(options:)();
      if (v227)
      {
        swift_bridgeObjectRelease();
        (*(void (**)(unint64_t, uint64_t))(v759 + 8))(v152, v758);
        (*(void (**)(char *, uint64_t))(v222 + 8))(v741, v742);
        return v152;
      }
      (*(void (**)(unint64_t, uint64_t))(v759 + 8))(v152, v758);
      (*(void (**)(char *, uint64_t))(v222 + 8))(v741, v742);
      goto LABEL_23;
    }
    unint64_t v231 = v763;
    if (v149 == enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.resultEngagementFeedback(_:))
    {
      (*(void (**)(char *, uint64_t))(v160 + 96))(v148, v145);
      uint64_t v232 = v733;
      v233 = v732;
      (*(void (**)(char *, char *, uint64_t))(v733 + 32))(v732, v148, v737);
      uint64_t v234 = static Apple_Parsec_Feedback_V2_ResultEngagementFeedback.protoMessageName.getter();
      unint64_t v236 = v235;
      uint64_t v761 = 46;
      unint64_t v762 = 0xE100000000000000;
      __chkstk_darwin(v234);
      *(&v584 - sub_100034730((uint64_t)"SIGTERM", 7, 2) = (char *)&v761;
      swift_bridgeObjectRetain();
      uint64_t v237 = sub_10001F318(0x7FFFFFFFFFFFFFFFLL, 1u, sub_10007153C, (uint64_t)(&v584 - 4), v234, v236);
      swift_bridgeObjectRelease();
      uint64_t v760 = sub_100071444(v237);
      unint64_t v763 = v238;
      unint64_t v158 = v239;
      swift_bridgeObjectRelease();
      unint64_t v152 = (unint64_t)v731;
      JSONEncodingOptions.init()();
      sub_1000714A8(&qword_10021B078, (void (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_ResultEngagementFeedback);
      Message.jsonString(options:)();
      if (v231)
      {
        swift_bridgeObjectRelease();
        (*(void (**)(unint64_t, uint64_t))(v759 + 8))(v152, v758);
        v240 = *(void (**)(unint64_t, uint64_t))(v232 + 8);
        unint64_t v241 = (unint64_t)v233;
        v242 = &v765;
LABEL_38:
        uint64_t v251 = *(v242 - 32);
        goto LABEL_53;
      }
      (*(void (**)(unint64_t, uint64_t))(v759 + 8))(v152, v758);
      v264 = *(void (**)(char *, void))(v232 + 8);
      v265 = v233;
      v266 = &v765;
    }
    else
    {
      if (v149 != enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.visibleResultsFeedback(_:))
      {
        if (v149 == enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.cardSectionFeedback(_:))
        {
          (*(void (**)(char *, uint64_t))(v160 + 96))(v148, v145);
          uint64_t v252 = v726;
          v253 = v725;
          uint64_t v254 = v727;
          (*(void (**)(char *, char *, uint64_t))(v726 + 32))(v725, v148, v727);
          uint64_t v255 = static Apple_Parsec_Feedback_V2_CardSectionFeedback.protoMessageName.getter();
          unint64_t v257 = v256;
          uint64_t v761 = 46;
          unint64_t v762 = 0xE100000000000000;
          __chkstk_darwin(v255);
          *(&v584 - sub_100034730((uint64_t)"SIGTERM", 7, 2) = (char *)&v761;
          swift_bridgeObjectRetain();
          uint64_t v258 = sub_10001F318(0x7FFFFFFFFFFFFFFFLL, 1u, sub_10007153C, (uint64_t)(&v584 - 4), v255, v257);
          unint64_t v152 = (unint64_t)v253;
          swift_bridgeObjectRelease();
          uint64_t v760 = sub_100071444(v258);
          unint64_t v763 = v259;
          uint64_t v757 = v260;
          swift_bridgeObjectRelease();
          v261 = v724;
          JSONEncodingOptions.init()();
          v262 = (unint64_t *)&unk_10021B068;
          v263 = &type metadata accessor for Apple_Parsec_Feedback_V2_CardSectionFeedback;
        }
        else if (v149 == enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.mapsCardSectionEngagementFeedback(_:))
        {
          (*(void (**)(char *, uint64_t))(v160 + 96))(v148, v145);
          uint64_t v252 = v722;
          v267 = v721;
          uint64_t v254 = v723;
          (*(void (**)(char *, char *, uint64_t))(v722 + 32))(v721, v148, v723);
          uint64_t v268 = static Apple_Parsec_Feedback_V2_MapsCardSectionEngagementFeedback.protoMessageName.getter();
          unint64_t v270 = v269;
          uint64_t v761 = 46;
          unint64_t v762 = 0xE100000000000000;
          __chkstk_darwin(v268);
          *(&v584 - sub_100034730((uint64_t)"SIGTERM", 7, 2) = (char *)&v761;
          swift_bridgeObjectRetain();
          uint64_t v271 = sub_10001F318(0x7FFFFFFFFFFFFFFFLL, 1u, sub_10007153C, (uint64_t)(&v584 - 4), v268, v270);
          unint64_t v152 = (unint64_t)v267;
          swift_bridgeObjectRelease();
          uint64_t v760 = sub_100071444(v271);
          unint64_t v763 = v272;
          uint64_t v757 = v273;
          swift_bridgeObjectRelease();
          v261 = v720;
          JSONEncodingOptions.init()();
          v262 = (unint64_t *)&unk_10021B060;
          v263 = &type metadata accessor for Apple_Parsec_Feedback_V2_MapsCardSectionEngagementFeedback;
        }
        else if (v149 == enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.storeCardSectionEngagementFeedback(_:))
        {
          (*(void (**)(char *, uint64_t))(v160 + 96))(v148, v145);
          uint64_t v252 = v718;
          v274 = v717;
          uint64_t v254 = v719;
          (*(void (**)(char *, char *, uint64_t))(v718 + 32))(v717, v148, v719);
          uint64_t v275 = static Apple_Parsec_Feedback_V2_StoreCardSectionEngagementFeedback.protoMessageName.getter();
          unint64_t v277 = v276;
          uint64_t v761 = 46;
          unint64_t v762 = 0xE100000000000000;
          __chkstk_darwin(v275);
          *(&v584 - sub_100034730((uint64_t)"SIGTERM", 7, 2) = (char *)&v761;
          swift_bridgeObjectRetain();
          uint64_t v278 = sub_10001F318(0x7FFFFFFFFFFFFFFFLL, 1u, sub_10007153C, (uint64_t)(&v584 - 4), v275, v277);
          unint64_t v152 = (unint64_t)v274;
          swift_bridgeObjectRelease();
          uint64_t v760 = sub_100071444(v278);
          unint64_t v763 = v279;
          uint64_t v757 = v280;
          swift_bridgeObjectRelease();
          v261 = v716;
          JSONEncodingOptions.init()();
          v262 = (unint64_t *)&unk_10021B058;
          v263 = &type metadata accessor for Apple_Parsec_Feedback_V2_StoreCardSectionEngagementFeedback;
        }
        else
        {
          if (v149 != enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.startSearchFeedback(_:))
          {
            v288 = v709;
            uint64_t v289 = v710;
            v290 = v711;
            unint64_t v291 = v712;
            unint64_t v152 = (unint64_t)v713;
            uint64_t v292 = v714;
            v293 = v715;
            if (v149 == enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.endSearchFeedback(_:))
            {
              (*(void (**)(char *, uint64_t))(v160 + 96))(v161, v159);
              (*(void (**)(char *, char *, uint64_t))(v707 + 32))(v706, v174, v708);
              uint64_t v294 = static Apple_Parsec_Feedback_V2_EndSearchFeedback.protoMessageName.getter();
              unint64_t v296 = v295;
              uint64_t v761 = 46;
              unint64_t v762 = 0xE100000000000000;
              __chkstk_darwin(v294);
              *(&v584 - sub_100034730((uint64_t)"SIGTERM", 7, 2) = (char *)&v761;
              swift_bridgeObjectRetain();
              uint64_t v297 = v294;
              unint64_t v298 = v763;
              uint64_t v299 = sub_10001F318(0x7FFFFFFFFFFFFFFFLL, 1u, sub_10007153C, (uint64_t)(&v584 - 4), v297, v296);
              swift_bridgeObjectRelease();
              uint64_t v760 = sub_100071444(v299);
              unint64_t v152 = v300;
              unint64_t v158 = v301;
              swift_bridgeObjectRelease();
              JSONEncodingOptions.init()();
              sub_1000714A8(&qword_10021B048, (void (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_EndSearchFeedback);
              Message.jsonString(options:)();
              if (!v298)
              {
                (*(void (**)(char *, uint64_t))(v759 + 8))(v702, v758);
                (*(void (**)(char *, uint64_t))(v707 + 8))(v706, v708);
                goto LABEL_23;
              }
              swift_bridgeObjectRelease();
              (*(void (**)(char *, uint64_t))(v759 + 8))(v702, v758);
              v302 = *(void (**)(char *, void))(v707 + 8);
              v303 = v706;
              p_uint64_t started = &v740;
            }
            else if (v149 == enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.startNetworkSearchFeedback(_:))
            {
              v305 = v161;
              (*(void (**)(char *, uint64_t))(v160 + 96))(v161, v159);
              (*(void (**)(char *, char *, uint64_t))(v699 + 32))(v698, v305, v700);
              uint64_t v306 = static Apple_Parsec_Feedback_V2_StartNetworkSearchFeedback.protoMessageName.getter();
              unint64_t v308 = v307;
              uint64_t v761 = 46;
              unint64_t v762 = 0xE100000000000000;
              __chkstk_darwin(v306);
              *(&v584 - sub_100034730((uint64_t)"SIGTERM", 7, 2) = (char *)&v761;
              swift_bridgeObjectRetain();
              uint64_t v309 = v306;
              unint64_t v310 = v763;
              uint64_t v311 = sub_10001F318(0x7FFFFFFFFFFFFFFFLL, 1u, sub_10007153C, (uint64_t)(&v584 - 4), v309, v308);
              swift_bridgeObjectRelease();
              uint64_t v760 = sub_100071444(v311);
              unint64_t v152 = v312;
              unint64_t v158 = v313;
              swift_bridgeObjectRelease();
              JSONEncodingOptions.init()();
              sub_1000714A8(&qword_10021B040, (void (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_StartNetworkSearchFeedback);
              Message.jsonString(options:)();
              if (!v310)
              {
                (*(void (**)(char *, uint64_t))(v759 + 8))(v697, v758);
                (*(void (**)(char *, uint64_t))(v699 + 8))(v698, v700);
                goto LABEL_23;
              }
              swift_bridgeObjectRelease();
              (*(void (**)(char *, uint64_t))(v759 + 8))(v697, v758);
              v302 = *(void (**)(char *, void))(v699 + 8);
              v303 = v698;
              p_uint64_t started = (uint64_t *)&v732;
            }
            else if (v149 == enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.endNetworkSearchFeedback(_:))
            {
              v314 = v161;
              (*(void (**)(char *, uint64_t))(v160 + 96))(v161, v159);
              (*(void (**)(char *, char *, uint64_t))(v695 + 32))(v694, v314, v696);
              uint64_t v315 = static Apple_Parsec_Feedback_V2_EndNetworkSearchFeedback.protoMessageName.getter();
              unint64_t v317 = v316;
              uint64_t v761 = 46;
              unint64_t v762 = 0xE100000000000000;
              __chkstk_darwin(v315);
              *(&v584 - sub_100034730((uint64_t)"SIGTERM", 7, 2) = (char *)&v761;
              swift_bridgeObjectRetain();
              uint64_t v318 = v315;
              unint64_t v319 = v763;
              uint64_t v320 = sub_10001F318(0x7FFFFFFFFFFFFFFFLL, 1u, sub_10007153C, (uint64_t)(&v584 - 4), v318, v317);
              swift_bridgeObjectRelease();
              uint64_t v760 = sub_100071444(v320);
              unint64_t v152 = v321;
              unint64_t v158 = v322;
              swift_bridgeObjectRelease();
              JSONEncodingOptions.init()();
              sub_1000714A8(&qword_10021B038, (void (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_EndNetworkSearchFeedback);
              Message.jsonString(options:)();
              if (!v319)
              {
                (*(void (**)(char *, uint64_t))(v759 + 8))(v693, v758);
                (*(void (**)(char *, uint64_t))(v695 + 8))(v694, v696);
                goto LABEL_23;
              }
              swift_bridgeObjectRelease();
              (*(void (**)(char *, uint64_t))(v759 + 8))(v693, v758);
              v302 = *(void (**)(char *, void))(v695 + 8);
              v303 = v694;
              p_uint64_t started = (uint64_t *)&v728;
            }
            else if (v149 == enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.startLocalSearchFeedback(_:))
            {
              v323 = v161;
              (*(void (**)(char *, uint64_t))(v160 + 96))(v161, v159);
              (*(void (**)(char *, char *, uint64_t))(v691 + 32))(v690, v323, started);
              uint64_t v324 = static Apple_Parsec_Feedback_V2_StartLocalSearchFeedback.protoMessageName.getter();
              unint64_t v326 = v325;
              uint64_t v761 = 46;
              unint64_t v762 = 0xE100000000000000;
              __chkstk_darwin(v324);
              *(&v584 - sub_100034730((uint64_t)"SIGTERM", 7, 2) = (char *)&v761;
              swift_bridgeObjectRetain();
              uint64_t v327 = v324;
              unint64_t v328 = v763;
              uint64_t v329 = sub_10001F318(0x7FFFFFFFFFFFFFFFLL, 1u, sub_10007153C, (uint64_t)(&v584 - 4), v327, v326);
              swift_bridgeObjectRelease();
              uint64_t v760 = sub_100071444(v329);
              unint64_t v152 = v330;
              unint64_t v158 = v331;
              swift_bridgeObjectRelease();
              JSONEncodingOptions.init()();
              sub_1000714A8(&qword_10021B030, (void (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_StartLocalSearchFeedback);
              Message.jsonString(options:)();
              if (!v328)
              {
                (*(void (**)(char *, uint64_t))(v759 + 8))(v689, v758);
                (*(void (**)(char *, uint64_t))(v691 + 8))(v690, started);
                goto LABEL_23;
              }
              swift_bridgeObjectRelease();
              (*(void (**)(char *, uint64_t))(v759 + 8))(v689, v758);
              v302 = *(void (**)(char *, void))(v691 + 8);
              v303 = v690;
              p_uint64_t started = (uint64_t *)&v724;
            }
            else if (v149 == enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.endLocalSearchFeedback(_:))
            {
              v332 = v161;
              (*(void (**)(char *, uint64_t))(v160 + 96))(v161, v159);
              (*(void (**)(char *, char *, uint64_t))(v687 + 32))(v686, v332, v688);
              uint64_t v333 = static Apple_Parsec_Feedback_V2_EndLocalSearchFeedback.protoMessageName.getter();
              unint64_t v335 = v334;
              uint64_t v761 = 46;
              unint64_t v762 = 0xE100000000000000;
              __chkstk_darwin(v333);
              *(&v584 - sub_100034730((uint64_t)"SIGTERM", 7, 2) = (char *)&v761;
              swift_bridgeObjectRetain();
              uint64_t v336 = v333;
              unint64_t v337 = v763;
              uint64_t v338 = sub_10001F318(0x7FFFFFFFFFFFFFFFLL, 1u, sub_10007153C, (uint64_t)(&v584 - 4), v336, v335);
              swift_bridgeObjectRelease();
              uint64_t v760 = sub_100071444(v338);
              unint64_t v152 = v339;
              unint64_t v158 = v340;
              swift_bridgeObjectRelease();
              JSONEncodingOptions.init()();
              sub_1000714A8(&qword_10021B028, (void (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_EndLocalSearchFeedback);
              Message.jsonString(options:)();
              if (!v337)
              {
                (*(void (**)(char *, uint64_t))(v759 + 8))(v685, v758);
                (*(void (**)(char *, uint64_t))(v687 + 8))(v686, v688);
                goto LABEL_23;
              }
              swift_bridgeObjectRelease();
              (*(void (**)(char *, uint64_t))(v759 + 8))(v685, v758);
              v302 = *(void (**)(char *, void))(v687 + 8);
              v303 = v686;
              p_uint64_t started = (uint64_t *)&v720;
            }
            else if (v149 == enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.errorFeedback(_:))
            {
              v341 = v161;
              (*(void (**)(char *, uint64_t))(v160 + 96))(v161, v159);
              (*(void (**)(char *, char *, uint64_t))(v683 + 32))(v682, v341, v684);
              uint64_t v342 = static Apple_Parsec_Feedback_V2_ErrorFeedback.protoMessageName.getter();
              unint64_t v344 = v343;
              uint64_t v761 = 46;
              unint64_t v762 = 0xE100000000000000;
              __chkstk_darwin(v342);
              *(&v584 - sub_100034730((uint64_t)"SIGTERM", 7, 2) = (char *)&v761;
              swift_bridgeObjectRetain();
              uint64_t v345 = v342;
              unint64_t v346 = v763;
              uint64_t v347 = sub_10001F318(0x7FFFFFFFFFFFFFFFLL, 1u, sub_10007153C, (uint64_t)(&v584 - 4), v345, v344);
              swift_bridgeObjectRelease();
              uint64_t v760 = sub_100071444(v347);
              unint64_t v152 = v348;
              unint64_t v158 = v349;
              swift_bridgeObjectRelease();
              JSONEncodingOptions.init()();
              sub_1000714A8(&qword_10021B020, (void (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_ErrorFeedback);
              Message.jsonString(options:)();
              if (!v346)
              {
                (*(void (**)(char *, uint64_t))(v759 + 8))(v681, v758);
                (*(void (**)(char *, uint64_t))(v683 + 8))(v682, v684);
                goto LABEL_23;
              }
              swift_bridgeObjectRelease();
              (*(void (**)(char *, uint64_t))(v759 + 8))(v681, v758);
              v302 = *(void (**)(char *, void))(v683 + 8);
              v303 = v682;
              p_uint64_t started = (uint64_t *)&v716;
            }
            else if (v149 == enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.customFeedback(_:))
            {
              v350 = v161;
              (*(void (**)(char *, uint64_t))(v160 + 96))(v161, v159);
              (*(void (**)(char *, char *, uint64_t))(v679 + 32))(v678, v350, v680);
              uint64_t v351 = static Apple_Parsec_Feedback_V2_CustomFeedback.protoMessageName.getter();
              unint64_t v353 = v352;
              uint64_t v761 = 46;
              unint64_t v762 = 0xE100000000000000;
              __chkstk_darwin(v351);
              *(&v584 - sub_100034730((uint64_t)"SIGTERM", 7, 2) = (char *)&v761;
              swift_bridgeObjectRetain();
              uint64_t v354 = v351;
              unint64_t v355 = v763;
              uint64_t v356 = sub_10001F318(0x7FFFFFFFFFFFFFFFLL, 1u, sub_10007153C, (uint64_t)(&v584 - 4), v354, v353);
              swift_bridgeObjectRelease();
              uint64_t v760 = sub_100071444(v356);
              unint64_t v152 = v357;
              unint64_t v158 = v358;
              swift_bridgeObjectRelease();
              JSONEncodingOptions.init()();
              sub_1000714A8(&qword_10021B018, (void (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_CustomFeedback);
              Message.jsonString(options:)();
              if (!v355)
              {
                (*(void (**)(char *, uint64_t))(v759 + 8))(v677, v758);
                (*(void (**)(char *, uint64_t))(v679 + 8))(v678, v680);
                goto LABEL_23;
              }
              swift_bridgeObjectRelease();
              (*(void (**)(char *, uint64_t))(v759 + 8))(v677, v758);
              v302 = *(void (**)(char *, void))(v679 + 8);
              v303 = v678;
              p_uint64_t started = &v712;
            }
            else if (v149 == enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.suggestionEngagementFeedback(_:))
            {
              v359 = v161;
              (*(void (**)(char *, uint64_t))(v160 + 96))(v161, v159);
              (*(void (**)(char *, char *, uint64_t))(v675 + 32))(v674, v359, v676);
              uint64_t v360 = static Apple_Parsec_Feedback_V2_SuggestionEngagementFeedback.protoMessageName.getter();
              unint64_t v362 = v361;
              uint64_t v761 = 46;
              unint64_t v762 = 0xE100000000000000;
              __chkstk_darwin(v360);
              *(&v584 - sub_100034730((uint64_t)"SIGTERM", 7, 2) = (char *)&v761;
              swift_bridgeObjectRetain();
              uint64_t v363 = v360;
              unint64_t v364 = v763;
              uint64_t v365 = sub_10001F318(0x7FFFFFFFFFFFFFFFLL, 1u, sub_10007153C, (uint64_t)(&v584 - 4), v363, v362);
              swift_bridgeObjectRelease();
              uint64_t v760 = sub_100071444(v365);
              unint64_t v152 = v366;
              unint64_t v158 = v367;
              swift_bridgeObjectRelease();
              JSONEncodingOptions.init()();
              sub_1000714A8(&qword_10021B010, (void (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_SuggestionEngagementFeedback);
              Message.jsonString(options:)();
              if (!v364)
              {
                (*(void (**)(char *, uint64_t))(v759 + 8))(v673, v758);
                (*(void (**)(char *, uint64_t))(v675 + 8))(v674, v676);
                goto LABEL_23;
              }
              swift_bridgeObjectRelease();
              (*(void (**)(char *, uint64_t))(v759 + 8))(v673, v758);
              v302 = *(void (**)(char *, void))(v675 + 8);
              v303 = v674;
              p_uint64_t started = &v708;
            }
            else if (v149 == enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.cardViewDisappearFeedback(_:))
            {
              v368 = v161;
              (*(void (**)(char *, uint64_t))(v160 + 96))(v161, v159);
              (*(void (**)(char *, char *, uint64_t))(v671 + 32))(v670, v368, v672);
              uint64_t v369 = static Apple_Parsec_Feedback_V2_CardViewDisappearFeedback.protoMessageName.getter();
              unint64_t v371 = v370;
              uint64_t v761 = 46;
              unint64_t v762 = 0xE100000000000000;
              __chkstk_darwin(v369);
              *(&v584 - sub_100034730((uint64_t)"SIGTERM", 7, 2) = (char *)&v761;
              swift_bridgeObjectRetain();
              uint64_t v372 = v369;
              unint64_t v373 = v763;
              uint64_t v374 = sub_10001F318(0x7FFFFFFFFFFFFFFFLL, 1u, sub_10007153C, (uint64_t)(&v584 - 4), v372, v371);
              swift_bridgeObjectRelease();
              uint64_t v760 = sub_100071444(v374);
              unint64_t v152 = v375;
              unint64_t v158 = v376;
              swift_bridgeObjectRelease();
              JSONEncodingOptions.init()();
              sub_1000714A8(&qword_10021B008, (void (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_CardViewDisappearFeedback);
              Message.jsonString(options:)();
              if (!v373)
              {
                (*(void (**)(char *, uint64_t))(v759 + 8))(v669, v758);
                (*(void (**)(char *, uint64_t))(v671 + 8))(v670, v672);
                goto LABEL_23;
              }
              swift_bridgeObjectRelease();
              (*(void (**)(char *, uint64_t))(v759 + 8))(v669, v758);
              v302 = *(void (**)(char *, void))(v671 + 8);
              v303 = v670;
              p_uint64_t started = &v704;
            }
            else if (v149 == enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.visibleSuggestionsFeedback(_:))
            {
              v377 = v161;
              (*(void (**)(char *, uint64_t))(v160 + 96))(v161, v159);
              (*(void (**)(char *, char *, uint64_t))(v667 + 32))(v666, v377, v668);
              uint64_t v378 = static Apple_Parsec_Feedback_V2_VisibleSuggestionsFeedback.protoMessageName.getter();
              unint64_t v380 = v379;
              uint64_t v761 = 46;
              unint64_t v762 = 0xE100000000000000;
              __chkstk_darwin(v378);
              *(&v584 - sub_100034730((uint64_t)"SIGTERM", 7, 2) = (char *)&v761;
              swift_bridgeObjectRetain();
              uint64_t v381 = v378;
              unint64_t v382 = v763;
              uint64_t v383 = sub_10001F318(0x7FFFFFFFFFFFFFFFLL, 1u, sub_10007153C, (uint64_t)(&v584 - 4), v381, v380);
              swift_bridgeObjectRelease();
              uint64_t v760 = sub_100071444(v383);
              unint64_t v152 = v384;
              unint64_t v158 = v385;
              swift_bridgeObjectRelease();
              JSONEncodingOptions.init()();
              sub_1000714A8(&qword_10021B000, (void (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_VisibleSuggestionsFeedback);
              Message.jsonString(options:)();
              if (!v382)
              {
                (*(void (**)(char *, uint64_t))(v759 + 8))(v665, v758);
                (*(void (**)(char *, uint64_t))(v667 + 8))(v666, v668);
                goto LABEL_23;
              }
              swift_bridgeObjectRelease();
              (*(void (**)(char *, uint64_t))(v759 + 8))(v665, v758);
              v302 = *(void (**)(char *, void))(v667 + 8);
              v303 = v666;
              p_uint64_t started = &v700;
            }
            else if (v149 == enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.resultsReceivedAfterTimeoutFeedback(_:))
            {
              v386 = v161;
              (*(void (**)(char *, uint64_t))(v160 + 96))(v161, v159);
              (*(void (**)(char *, char *, uint64_t))(v607 + 32))(v606, v386, v608);
              uint64_t v387 = static Apple_Parsec_Feedback_V2_ResultsReceivedAfterTimeoutFeedback.protoMessageName.getter();
              unint64_t v389 = v388;
              uint64_t v761 = 46;
              unint64_t v762 = 0xE100000000000000;
              __chkstk_darwin(v387);
              *(&v584 - sub_100034730((uint64_t)"SIGTERM", 7, 2) = (char *)&v761;
              swift_bridgeObjectRetain();
              uint64_t v390 = v387;
              unint64_t v391 = v763;
              uint64_t v392 = sub_10001F318(0x7FFFFFFFFFFFFFFFLL, 1u, sub_10007153C, (uint64_t)(&v584 - 4), v390, v389);
              swift_bridgeObjectRelease();
              uint64_t v760 = sub_100071444(v392);
              unint64_t v152 = v393;
              unint64_t v158 = v394;
              swift_bridgeObjectRelease();
              JSONEncodingOptions.init()();
              sub_1000714A8(&qword_10021AFF8, (void (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_ResultsReceivedAfterTimeoutFeedback);
              Message.jsonString(options:)();
              if (!v391)
              {
                (*(void (**)(char *, uint64_t))(v759 + 8))(v584, v758);
                (*(void (**)(char *, uint64_t))(v607 + 8))(v606, v608);
                goto LABEL_23;
              }
              swift_bridgeObjectRelease();
              (*(void (**)(char *, uint64_t))(v759 + 8))(v584, v758);
              v302 = *(void (**)(char *, void))(v607 + 8);
              v303 = v606;
              p_uint64_t started = &v640;
            }
            else if (v149 == enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.lateSectionsAppendedFeedback(_:))
            {
              v395 = v161;
              (*(void (**)(char *, uint64_t))(v160 + 96))(v161, v159);
              (*(void (**)(char *, char *, uint64_t))(v610 + 32))(v609, v395, v611);
              uint64_t v396 = static Apple_Parsec_Feedback_V2_LateSectionsAppendedFeedback.protoMessageName.getter();
              unint64_t v398 = v397;
              uint64_t v761 = 46;
              unint64_t v762 = 0xE100000000000000;
              __chkstk_darwin(v396);
              *(&v584 - sub_100034730((uint64_t)"SIGTERM", 7, 2) = (char *)&v761;
              swift_bridgeObjectRetain();
              uint64_t v399 = v396;
              unint64_t v400 = v763;
              uint64_t v401 = sub_10001F318(0x7FFFFFFFFFFFFFFFLL, 1u, sub_10007153C, (uint64_t)(&v584 - 4), v399, v398);
              swift_bridgeObjectRelease();
              uint64_t v760 = sub_100071444(v401);
              unint64_t v152 = v402;
              unint64_t v158 = v403;
              swift_bridgeObjectRelease();
              JSONEncodingOptions.init()();
              sub_1000714A8(&qword_10021AFF0, (void (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_LateSectionsAppendedFeedback);
              Message.jsonString(options:)();
              if (!v400)
              {
                (*(void (**)(char *, uint64_t))(v759 + 8))(v585, v758);
                (*(void (**)(char *, uint64_t))(v610 + 8))(v609, v611);
                goto LABEL_23;
              }
              swift_bridgeObjectRelease();
              (*(void (**)(char *, uint64_t))(v759 + 8))(v585, v758);
              v302 = *(void (**)(char *, void))(v610 + 8);
              v303 = v609;
              p_uint64_t started = (uint64_t *)&v643;
            }
            else if (v149 == enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.clearInputFeedback_p(_:))
            {
              v404 = v161;
              (*(void (**)(char *, uint64_t))(v160 + 96))(v161, v159);
              (*(void (**)(char *, char *, uint64_t))(v613 + 32))(v612, v404, v614);
              uint64_t v405 = static Apple_Parsec_Feedback_V2_ClearInputFeedback.protoMessageName.getter();
              unint64_t v407 = v406;
              uint64_t v761 = 46;
              unint64_t v762 = 0xE100000000000000;
              __chkstk_darwin(v405);
              *(&v584 - sub_100034730((uint64_t)"SIGTERM", 7, 2) = (char *)&v761;
              swift_bridgeObjectRetain();
              uint64_t v408 = v405;
              unint64_t v409 = v763;
              uint64_t v410 = sub_10001F318(0x7FFFFFFFFFFFFFFFLL, 1u, sub_10007153C, (uint64_t)(&v584 - 4), v408, v407);
              swift_bridgeObjectRelease();
              uint64_t v760 = sub_100071444(v410);
              unint64_t v152 = v411;
              unint64_t v158 = v412;
              swift_bridgeObjectRelease();
              JSONEncodingOptions.init()();
              sub_1000714A8(&qword_10021AFE8, (void (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_ClearInputFeedback);
              Message.jsonString(options:)();
              if (!v409)
              {
                (*(void (**)(char *, uint64_t))(v759 + 8))(v586, v758);
                (*(void (**)(char *, uint64_t))(v613 + 8))(v612, v614);
                goto LABEL_23;
              }
              swift_bridgeObjectRelease();
              (*(void (**)(char *, uint64_t))(v759 + 8))(v586, v758);
              v302 = *(void (**)(char *, void))(v613 + 8);
              v303 = v612;
              p_uint64_t started = &v646;
            }
            else if (v149 == enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.sectionEngagementFeedback(_:))
            {
              v413 = v161;
              (*(void (**)(char *, uint64_t))(v160 + 96))(v161, v159);
              (*(void (**)(char *, char *, uint64_t))(v616 + 32))(v615, v413, v617);
              uint64_t v414 = static Apple_Parsec_Feedback_V2_SectionEngagementFeedback.protoMessageName.getter();
              unint64_t v416 = v415;
              uint64_t v761 = 46;
              unint64_t v762 = 0xE100000000000000;
              __chkstk_darwin(v414);
              *(&v584 - sub_100034730((uint64_t)"SIGTERM", 7, 2) = (char *)&v761;
              swift_bridgeObjectRetain();
              uint64_t v417 = v414;
              unint64_t v418 = v763;
              uint64_t v419 = sub_10001F318(0x7FFFFFFFFFFFFFFFLL, 1u, sub_10007153C, (uint64_t)(&v584 - 4), v417, v416);
              swift_bridgeObjectRelease();
              uint64_t v760 = sub_100071444(v419);
              unint64_t v152 = v420;
              unint64_t v158 = v421;
              swift_bridgeObjectRelease();
              JSONEncodingOptions.init()();
              sub_1000714A8(&qword_10021AFE0, (void (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_SectionEngagementFeedback);
              Message.jsonString(options:)();
              if (!v418)
              {
                (*(void (**)(char *, uint64_t))(v759 + 8))(v587, v758);
                (*(void (**)(char *, uint64_t))(v616 + 8))(v615, v617);
                goto LABEL_23;
              }
              swift_bridgeObjectRelease();
              (*(void (**)(char *, uint64_t))(v759 + 8))(v587, v758);
              v302 = *(void (**)(char *, void))(v616 + 8);
              v303 = v615;
              p_uint64_t started = (uint64_t *)&v649;
            }
            else if (v149 == enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.visibleSectionHeaderFeedback(_:))
            {
              v422 = v161;
              (*(void (**)(char *, uint64_t))(v160 + 96))(v161, v159);
              (*(void (**)(char *, char *, uint64_t))(v619 + 32))(v618, v422, v620);
              uint64_t v423 = static Apple_Parsec_Feedback_V2_VisibleSectionHeaderFeedback.protoMessageName.getter();
              unint64_t v425 = v424;
              uint64_t v761 = 46;
              unint64_t v762 = 0xE100000000000000;
              __chkstk_darwin(v423);
              *(&v584 - sub_100034730((uint64_t)"SIGTERM", 7, 2) = (char *)&v761;
              swift_bridgeObjectRetain();
              uint64_t v426 = v423;
              unint64_t v427 = v763;
              uint64_t v428 = sub_10001F318(0x7FFFFFFFFFFFFFFFLL, 1u, sub_10007153C, (uint64_t)(&v584 - 4), v426, v425);
              swift_bridgeObjectRelease();
              uint64_t v760 = sub_100071444(v428);
              unint64_t v152 = v429;
              unint64_t v158 = v430;
              swift_bridgeObjectRelease();
              JSONEncodingOptions.init()();
              sub_1000714A8(&qword_10021AFD8, (void (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_VisibleSectionHeaderFeedback);
              Message.jsonString(options:)();
              if (!v427)
              {
                (*(void (**)(char *, uint64_t))(v759 + 8))(v588, v758);
                (*(void (**)(char *, uint64_t))(v619 + 8))(v618, v620);
                goto LABEL_23;
              }
              swift_bridgeObjectRelease();
              (*(void (**)(char *, uint64_t))(v759 + 8))(v588, v758);
              v302 = *(void (**)(char *, void))(v619 + 8);
              v303 = v618;
              p_uint64_t started = &v652;
            }
            else if (v149 == enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.didGoToSiteFeedback(_:))
            {
              v431 = v161;
              (*(void (**)(char *, uint64_t))(v160 + 96))(v161, v159);
              (*(void (**)(char *, char *, uint64_t))(v622 + 32))(v621, v431, v623);
              uint64_t v432 = static Apple_Parsec_Feedback_V2_DidGoToSiteFeedback.protoMessageName.getter();
              unint64_t v434 = v433;
              uint64_t v761 = 46;
              unint64_t v762 = 0xE100000000000000;
              __chkstk_darwin(v432);
              *(&v584 - sub_100034730((uint64_t)"SIGTERM", 7, 2) = (char *)&v761;
              swift_bridgeObjectRetain();
              uint64_t v435 = v432;
              unint64_t v436 = v763;
              uint64_t v437 = sub_10001F318(0x7FFFFFFFFFFFFFFFLL, 1u, sub_10007153C, (uint64_t)(&v584 - 4), v435, v434);
              swift_bridgeObjectRelease();
              uint64_t v760 = sub_100071444(v437);
              unint64_t v152 = v438;
              unint64_t v158 = v439;
              swift_bridgeObjectRelease();
              JSONEncodingOptions.init()();
              sub_1000714A8(&qword_10021AFD0, (void (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_DidGoToSiteFeedback);
              Message.jsonString(options:)();
              if (!v436)
              {
                (*(void (**)(char *, uint64_t))(v759 + 8))(v589, v758);
                (*(void (**)(char *, uint64_t))(v622 + 8))(v621, v623);
                goto LABEL_23;
              }
              swift_bridgeObjectRelease();
              (*(void (**)(char *, uint64_t))(v759 + 8))(v589, v758);
              v302 = *(void (**)(char *, void))(v622 + 8);
              v303 = v621;
              p_uint64_t started = (uint64_t *)&v655;
            }
            else
            {
              if (v149 == enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.didGoToSearchFeedback(_:))
              {
                v440 = v161;
                (*(void (**)(char *, uint64_t))(v160 + 96))(v161, v159);
                (*(void (**)(char *, char *, uint64_t))(v624 + 32))(v288, v440, v289);
                uint64_t v441 = static Apple_Parsec_Feedback_V2_DidGoToSearchFeedback.protoMessageName.getter();
                unint64_t v443 = v442;
                uint64_t v761 = 46;
                unint64_t v762 = 0xE100000000000000;
                __chkstk_darwin(v441);
                *(&v584 - sub_100034730((uint64_t)"SIGTERM", 7, 2) = (char *)&v761;
                swift_bridgeObjectRetain();
                uint64_t v444 = v441;
                unint64_t v445 = v763;
                uint64_t v446 = sub_10001F318(0x7FFFFFFFFFFFFFFFLL, 1u, sub_10007153C, (uint64_t)(&v584 - 4), v444, v443);
                swift_bridgeObjectRelease();
                uint64_t v760 = sub_100071444(v446);
                unint64_t v158 = v447;
                swift_bridgeObjectRelease();
                JSONEncodingOptions.init()();
                sub_1000714A8(&qword_10021AFC8, (void (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_DidGoToSearchFeedback);
                Message.jsonString(options:)();
                unint64_t v152 = v445;
                if (v445)
                {
                  swift_bridgeObjectRelease();
                  (*(void (**)(char *, uint64_t))(v759 + 8))(v590, v758);
                  (*(void (**)(char *, uint64_t))(v624 + 8))(v288, v289);
                  return v152;
                }
                (*(void (**)(char *, uint64_t))(v759 + 8))(v590, v758);
                (*(void (**)(char *, uint64_t))(v624 + 8))(v288, v289);
                goto LABEL_23;
              }
              if (v149 == enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.sessionMissingResultsFeedback(_:))
              {
                v448 = v161;
                (*(void (**)(char *, uint64_t))(v160 + 96))(v161, v159);
                v449 = v448;
                unint64_t v152 = v291;
                (*(void (**)(char *, char *, unint64_t))(v625 + 32))(v290, v449, v291);
                uint64_t v450 = static Apple_Parsec_Feedback_V2_SessionMissingResultsFeedback.protoMessageName.getter();
                unint64_t v452 = v451;
                uint64_t v761 = 46;
                unint64_t v762 = 0xE100000000000000;
                __chkstk_darwin(v450);
                *(&v584 - sub_100034730((uint64_t)"SIGTERM", 7, 2) = (char *)&v761;
                swift_bridgeObjectRetain();
                uint64_t v453 = v450;
                unint64_t v454 = v763;
                uint64_t v455 = sub_10001F318(0x7FFFFFFFFFFFFFFFLL, 1u, sub_10007153C, (uint64_t)(&v584 - 4), v453, v452);
                swift_bridgeObjectRelease();
                uint64_t v760 = sub_100071444(v455);
                unint64_t v763 = v456;
                unint64_t v158 = v457;
                swift_bridgeObjectRelease();
                JSONEncodingOptions.init()();
                sub_1000714A8(&qword_10021AFC0, (void (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_SessionMissingResultsFeedback);
                Message.jsonString(options:)();
                if (v454)
                {
                  swift_bridgeObjectRelease();
                  (*(void (**)(char *, uint64_t))(v759 + 8))(v591, v758);
                  (*(void (**)(char *, unint64_t))(v625 + 8))(v290, v291);
                  return v152;
                }
                (*(void (**)(char *, uint64_t))(v759 + 8))(v591, v758);
                (*(void (**)(char *, unint64_t))(v625 + 8))(v290, v291);
                goto LABEL_23;
              }
              if (v149 == enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.sessionMissingSuggestionsFeedback(_:))
              {
                v458 = v161;
                (*(void (**)(char *, uint64_t))(v160 + 96))(v161, v159);
                (*(void (**)(unint64_t, char *, uint64_t))(v626 + 32))(v152, v458, v292);
                uint64_t v459 = static Apple_Parsec_Feedback_V2_SessionMissingSuggestionsFeedback.protoMessageName.getter();
                unint64_t v461 = v460;
                uint64_t v761 = 46;
                unint64_t v762 = 0xE100000000000000;
                __chkstk_darwin(v459);
                *(&v584 - sub_100034730((uint64_t)"SIGTERM", 7, 2) = (char *)&v761;
                swift_bridgeObjectRetain();
                uint64_t v462 = v459;
                unint64_t v463 = v763;
                uint64_t v464 = sub_10001F318(0x7FFFFFFFFFFFFFFFLL, 1u, sub_10007153C, (uint64_t)(&v584 - 4), v462, v461);
                swift_bridgeObjectRelease();
                uint64_t v760 = sub_100071444(v464);
                unint64_t v158 = v465;
                swift_bridgeObjectRelease();
                JSONEncodingOptions.init()();
                sub_1000714A8(&qword_10021AFB8, (void (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_SessionMissingSuggestionsFeedback);
                Message.jsonString(options:)();
                if (v463)
                {
                  swift_bridgeObjectRelease();
                  (*(void (**)(char *, uint64_t))(v759 + 8))(v592, v758);
                  (*(void (**)(unint64_t, uint64_t))(v626 + 8))(v152, v292);
                  return v152;
                }
                (*(void (**)(char *, uint64_t))(v759 + 8))(v592, v758);
                (*(void (**)(unint64_t, uint64_t))(v626 + 8))(v152, v292);
                goto LABEL_23;
              }
              if (v149 == enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.resultGradingFeedback(_:))
              {
                v466 = v161;
                (*(void (**)(char *, uint64_t))(v160 + 96))(v161, v159);
                v467 = v466;
                unint64_t v152 = v640;
                (*(void (**)(char *, char *, uint64_t))(v627 + 32))(v293, v467, v640);
                uint64_t v468 = static Apple_Parsec_Feedback_V2_ResultGradingFeedback.protoMessageName.getter();
                unint64_t v470 = v469;
                uint64_t v761 = 46;
                unint64_t v762 = 0xE100000000000000;
                __chkstk_darwin(v468);
                *(&v584 - sub_100034730((uint64_t)"SIGTERM", 7, 2) = (char *)&v761;
                swift_bridgeObjectRetain();
                uint64_t v471 = v468;
                unint64_t v472 = v763;
                uint64_t v473 = sub_10001F318(0x7FFFFFFFFFFFFFFFLL, 1u, sub_10007153C, (uint64_t)(&v584 - 4), v471, v470);
                swift_bridgeObjectRelease();
                uint64_t v760 = sub_100071444(v473);
                unint64_t v475 = v474;
                swift_bridgeObjectRelease();
                JSONEncodingOptions.init()();
                sub_1000714A8(&qword_10021AFB0, (void (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_ResultGradingFeedback);
                Message.jsonString(options:)();
                if (!v472)
                {
                  (*(void (**)(char *, uint64_t))(v759 + 8))(v593, v758);
                  (*(void (**)(char *, uint64_t))(v627 + 8))(v293, v640);
                  unint64_t v158 = v475;
                  goto LABEL_23;
                }
                swift_bridgeObjectRelease();
                (*(void (**)(char *, uint64_t))(v759 + 8))(v593, v758);
                v302 = *(void (**)(char *, void))(v627 + 8);
                v303 = v293;
                p_uint64_t started = &v672;
              }
              else if (v149 == enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.lookupHintRelevancyFeedback(_:))
              {
                v476 = v161;
                (*(void (**)(char *, uint64_t))(v160 + 96))(v161, v159);
                v477 = v476;
                unint64_t v152 = v642;
                (*(void (**)(char *, char *, uint64_t))(v628 + 32))(v641, v477, v642);
                uint64_t v478 = static Apple_Parsec_Feedback_V2_LookupHintRelevancyFeedback.protoMessageName.getter();
                unint64_t v480 = v479;
                uint64_t v761 = 46;
                unint64_t v762 = 0xE100000000000000;
                __chkstk_darwin(v478);
                *(&v584 - sub_100034730((uint64_t)"SIGTERM", 7, 2) = (char *)&v761;
                swift_bridgeObjectRetain();
                uint64_t v481 = v478;
                unint64_t v482 = v763;
                uint64_t v483 = sub_10001F318(0x7FFFFFFFFFFFFFFFLL, 1u, sub_10007153C, (uint64_t)(&v584 - 4), v481, v480);
                swift_bridgeObjectRelease();
                sub_100071444(v483);
                unint64_t v158 = v484;
                swift_bridgeObjectRelease();
                JSONEncodingOptions.init()();
                sub_1000714A8(&qword_10021AFA8, (void (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_LookupHintRelevancyFeedback);
                Message.jsonString(options:)();
                if (!v482)
                {
                  (*(void (**)(char *, uint64_t))(v759 + 8))(v594, v758);
                  (*(void (**)(char *, uint64_t))(v628 + 8))(v641, v642);
                  goto LABEL_23;
                }
                swift_bridgeObjectRelease();
                (*(void (**)(char *, uint64_t))(v759 + 8))(v594, v758);
                v302 = *(void (**)(char *, void))(v628 + 8);
                v303 = v641;
                p_uint64_t started = (uint64_t *)&v674;
              }
              else if (v149 == enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.connectionInvalidatedFeedback(_:))
              {
                v485 = v161;
                (*(void (**)(char *, uint64_t))(v160 + 96))(v161, v159);
                v486 = v485;
                unint64_t v152 = v644;
                (*(void (**)(char *, char *, uint64_t))(v629 + 32))(v643, v486, v644);
                uint64_t v487 = static Apple_Parsec_Feedback_V2_ConnectionInvalidatedFeedback.protoMessageName.getter();
                unint64_t v489 = v488;
                uint64_t v761 = 46;
                unint64_t v762 = 0xE100000000000000;
                __chkstk_darwin(v487);
                *(&v584 - sub_100034730((uint64_t)"SIGTERM", 7, 2) = (char *)&v761;
                swift_bridgeObjectRetain();
                uint64_t v490 = v487;
                unint64_t v491 = v763;
                uint64_t v492 = sub_10001F318(0x7FFFFFFFFFFFFFFFLL, 1u, sub_10007153C, (uint64_t)(&v584 - 4), v490, v489);
                swift_bridgeObjectRelease();
                sub_100071444(v492);
                unint64_t v158 = v493;
                swift_bridgeObjectRelease();
                JSONEncodingOptions.init()();
                sub_1000714A8(&qword_10021AFA0, (void (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_ConnectionInvalidatedFeedback);
                Message.jsonString(options:)();
                if (!v491)
                {
                  (*(void (**)(char *, uint64_t))(v759 + 8))(v595, v758);
                  (*(void (**)(char *, uint64_t))(v629 + 8))(v643, v644);
                  goto LABEL_23;
                }
                swift_bridgeObjectRelease();
                (*(void (**)(char *, uint64_t))(v759 + 8))(v595, v758);
                v302 = *(void (**)(char *, void))(v629 + 8);
                v303 = v643;
                p_uint64_t started = &v676;
              }
              else if (v149 == enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.cardSectionEngagementFeedback(_:))
              {
                v494 = v161;
                (*(void (**)(char *, uint64_t))(v160 + 96))(v161, v159);
                v495 = v494;
                unint64_t v152 = v646;
                (*(void (**)(char *, char *, uint64_t))(v630 + 32))(v645, v495, v646);
                uint64_t v496 = static Apple_Parsec_Feedback_V2_CardSectionEngagementFeedback.protoMessageName.getter();
                unint64_t v498 = v497;
                uint64_t v761 = 46;
                unint64_t v762 = 0xE100000000000000;
                __chkstk_darwin(v496);
                *(&v584 - sub_100034730((uint64_t)"SIGTERM", 7, 2) = (char *)&v761;
                swift_bridgeObjectRetain();
                uint64_t v499 = v496;
                unint64_t v500 = v763;
                uint64_t v501 = sub_10001F318(0x7FFFFFFFFFFFFFFFLL, 1u, sub_10007153C, (uint64_t)(&v584 - 4), v499, v498);
                swift_bridgeObjectRelease();
                sub_100071444(v501);
                unint64_t v158 = v502;
                swift_bridgeObjectRelease();
                JSONEncodingOptions.init()();
                sub_1000714A8(&qword_10021AF98, (void (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_CardSectionEngagementFeedback);
                Message.jsonString(options:)();
                if (!v500)
                {
                  (*(void (**)(char *, uint64_t))(v759 + 8))(v596, v758);
                  (*(void (**)(char *, uint64_t))(v630 + 8))(v645, v646);
                  goto LABEL_23;
                }
                swift_bridgeObjectRelease();
                (*(void (**)(char *, uint64_t))(v759 + 8))(v596, v758);
                v302 = *(void (**)(char *, void))(v630 + 8);
                v303 = v645;
                p_uint64_t started = (uint64_t *)&v678;
              }
              else if (v149 == enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.sessionEndFeedback(_:))
              {
                v503 = v161;
                (*(void (**)(char *, uint64_t))(v160 + 96))(v161, v159);
                v504 = v503;
                unint64_t v152 = v648;
                (*(void (**)(char *, char *, uint64_t))(v631 + 32))(v647, v504, v648);
                uint64_t v505 = static Apple_Parsec_Feedback_V2_SessionEndFeedback.protoMessageName.getter();
                unint64_t v507 = v506;
                uint64_t v761 = 46;
                unint64_t v762 = 0xE100000000000000;
                __chkstk_darwin(v505);
                *(&v584 - sub_100034730((uint64_t)"SIGTERM", 7, 2) = (char *)&v761;
                swift_bridgeObjectRetain();
                uint64_t v508 = v505;
                unint64_t v509 = v763;
                uint64_t v510 = sub_10001F318(0x7FFFFFFFFFFFFFFFLL, 1u, sub_10007153C, (uint64_t)(&v584 - 4), v508, v507);
                swift_bridgeObjectRelease();
                sub_100071444(v510);
                unint64_t v158 = v511;
                swift_bridgeObjectRelease();
                JSONEncodingOptions.init()();
                sub_1000714A8(&qword_10021AF90, (void (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_SessionEndFeedback);
                Message.jsonString(options:)();
                if (!v509)
                {
                  (*(void (**)(char *, uint64_t))(v759 + 8))(v597, v758);
                  (*(void (**)(char *, uint64_t))(v631 + 8))(v647, v648);
                  goto LABEL_23;
                }
                swift_bridgeObjectRelease();
                (*(void (**)(char *, uint64_t))(v759 + 8))(v597, v758);
                v302 = *(void (**)(char *, void))(v631 + 8);
                v303 = v647;
                p_uint64_t started = &v680;
              }
              else if (v149 == enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.cardViewAppearFeedback(_:))
              {
                v512 = v161;
                (*(void (**)(char *, uint64_t))(v160 + 96))(v161, v159);
                v513 = v512;
                unint64_t v152 = v650;
                (*(void (**)(char *, char *, uint64_t))(v632 + 32))(v649, v513, v650);
                uint64_t v514 = static Apple_Parsec_Feedback_V2_CardViewAppearFeedback.protoMessageName.getter();
                unint64_t v516 = v515;
                uint64_t v761 = 46;
                unint64_t v762 = 0xE100000000000000;
                __chkstk_darwin(v514);
                *(&v584 - sub_100034730((uint64_t)"SIGTERM", 7, 2) = (char *)&v761;
                swift_bridgeObjectRetain();
                uint64_t v517 = v514;
                unint64_t v518 = v763;
                uint64_t v519 = sub_10001F318(0x7FFFFFFFFFFFFFFFLL, 1u, sub_10007153C, (uint64_t)(&v584 - 4), v517, v516);
                swift_bridgeObjectRelease();
                sub_100071444(v519);
                unint64_t v158 = v520;
                swift_bridgeObjectRelease();
                JSONEncodingOptions.init()();
                sub_1000714A8(&qword_10021AF88, (void (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_CardViewAppearFeedback);
                Message.jsonString(options:)();
                if (!v518)
                {
                  (*(void (**)(char *, uint64_t))(v759 + 8))(v598, v758);
                  (*(void (**)(char *, uint64_t))(v632 + 8))(v649, v650);
                  goto LABEL_23;
                }
                swift_bridgeObjectRelease();
                (*(void (**)(char *, uint64_t))(v759 + 8))(v598, v758);
                v302 = *(void (**)(char *, void))(v632 + 8);
                v303 = v649;
                p_uint64_t started = (uint64_t *)&v682;
              }
              else if (v149 == enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.skipSearchFeedback(_:))
              {
                v521 = v161;
                (*(void (**)(char *, uint64_t))(v160 + 96))(v161, v159);
                v522 = v521;
                unint64_t v152 = v652;
                (*(void (**)(char *, char *, uint64_t))(v633 + 32))(v651, v522, v652);
                uint64_t v523 = static Apple_Parsec_Feedback_V2_SkipSearchFeedback.protoMessageName.getter();
                unint64_t v525 = v524;
                uint64_t v761 = 46;
                unint64_t v762 = 0xE100000000000000;
                __chkstk_darwin(v523);
                *(&v584 - sub_100034730((uint64_t)"SIGTERM", 7, 2) = (char *)&v761;
                swift_bridgeObjectRetain();
                uint64_t v526 = v523;
                unint64_t v527 = v763;
                uint64_t v528 = sub_10001F318(0x7FFFFFFFFFFFFFFFLL, 1u, sub_10007153C, (uint64_t)(&v584 - 4), v526, v525);
                swift_bridgeObjectRelease();
                sub_100071444(v528);
                unint64_t v158 = v529;
                swift_bridgeObjectRelease();
                JSONEncodingOptions.init()();
                sub_1000714A8(&qword_10021AF80, (void (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_SkipSearchFeedback);
                Message.jsonString(options:)();
                if (!v527)
                {
                  (*(void (**)(char *, uint64_t))(v759 + 8))(v599, v758);
                  (*(void (**)(char *, uint64_t))(v633 + 8))(v651, v652);
                  goto LABEL_23;
                }
                swift_bridgeObjectRelease();
                (*(void (**)(char *, uint64_t))(v759 + 8))(v599, v758);
                v302 = *(void (**)(char *, void))(v633 + 8);
                v303 = v651;
                p_uint64_t started = &v684;
              }
              else if (v149 == enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.cacheHitFeedback(_:))
              {
                v530 = v161;
                (*(void (**)(char *, uint64_t))(v160 + 96))(v161, v159);
                v531 = v530;
                unint64_t v152 = v654;
                (*(void (**)(char *, char *, uint64_t))(v634 + 32))(v653, v531, v654);
                uint64_t v532 = static Apple_Parsec_Feedback_V2_CacheHitFeedback.protoMessageName.getter();
                unint64_t v534 = v533;
                uint64_t v761 = 46;
                unint64_t v762 = 0xE100000000000000;
                __chkstk_darwin(v532);
                *(&v584 - sub_100034730((uint64_t)"SIGTERM", 7, 2) = (char *)&v761;
                swift_bridgeObjectRetain();
                uint64_t v535 = v532;
                unint64_t v536 = v763;
                uint64_t v537 = sub_10001F318(0x7FFFFFFFFFFFFFFFLL, 1u, sub_10007153C, (uint64_t)(&v584 - 4), v535, v534);
                swift_bridgeObjectRelease();
                sub_100071444(v537);
                unint64_t v158 = v538;
                swift_bridgeObjectRelease();
                JSONEncodingOptions.init()();
                sub_1000714A8(&qword_10021AF78, (void (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_CacheHitFeedback);
                Message.jsonString(options:)();
                if (!v536)
                {
                  (*(void (**)(char *, uint64_t))(v759 + 8))(v600, v758);
                  (*(void (**)(char *, uint64_t))(v634 + 8))(v653, v654);
                  goto LABEL_23;
                }
                swift_bridgeObjectRelease();
                (*(void (**)(char *, uint64_t))(v759 + 8))(v600, v758);
                v302 = *(void (**)(char *, void))(v634 + 8);
                v303 = v653;
                p_uint64_t started = (uint64_t *)&v686;
              }
              else if (v149 == enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.cbaEngagementFeedback(_:))
              {
                v539 = v161;
                (*(void (**)(char *, uint64_t))(v160 + 96))(v161, v159);
                v540 = v539;
                unint64_t v152 = v656;
                (*(void (**)(char *, char *, uint64_t))(v635 + 32))(v655, v540, v656);
                uint64_t v541 = static Apple_Parsec_Feedback_V2_CBAEngagementFeedback.protoMessageName.getter();
                unint64_t v543 = v542;
                uint64_t v761 = 46;
                unint64_t v762 = 0xE100000000000000;
                __chkstk_darwin(v541);
                *(&v584 - sub_100034730((uint64_t)"SIGTERM", 7, 2) = (char *)&v761;
                swift_bridgeObjectRetain();
                uint64_t v544 = v541;
                unint64_t v545 = v763;
                uint64_t v546 = sub_10001F318(0x7FFFFFFFFFFFFFFFLL, 1u, sub_10007153C, (uint64_t)(&v584 - 4), v544, v543);
                swift_bridgeObjectRelease();
                sub_100071444(v546);
                unint64_t v158 = v547;
                swift_bridgeObjectRelease();
                JSONEncodingOptions.init()();
                sub_1000714A8(&qword_10021AF70, (void (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_CBAEngagementFeedback);
                Message.jsonString(options:)();
                if (!v545)
                {
                  (*(void (**)(char *, uint64_t))(v759 + 8))(v601, v758);
                  (*(void (**)(char *, uint64_t))(v635 + 8))(v655, v656);
                  goto LABEL_23;
                }
                swift_bridgeObjectRelease();
                (*(void (**)(char *, uint64_t))(v759 + 8))(v601, v758);
                v302 = *(void (**)(char *, void))(v635 + 8);
                v303 = v655;
                p_uint64_t started = &v688;
              }
              else if (v149 == enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.clientTimingFeedback(_:))
              {
                v548 = v161;
                (*(void (**)(char *, uint64_t))(v160 + 96))(v161, v159);
                v549 = v548;
                unint64_t v152 = v658;
                (*(void (**)(char *, char *, uint64_t))(v636 + 32))(v657, v549, v658);
                uint64_t v550 = static Apple_Parsec_Feedback_V2_ClientTimingFeedback.protoMessageName.getter();
                unint64_t v552 = v551;
                uint64_t v761 = 46;
                unint64_t v762 = 0xE100000000000000;
                __chkstk_darwin(v550);
                *(&v584 - sub_100034730((uint64_t)"SIGTERM", 7, 2) = (char *)&v761;
                swift_bridgeObjectRetain();
                uint64_t v553 = v550;
                unint64_t v554 = v763;
                uint64_t v555 = sub_10001F318(0x7FFFFFFFFFFFFFFFLL, 1u, sub_10007153C, (uint64_t)(&v584 - 4), v553, v552);
                swift_bridgeObjectRelease();
                sub_100071444(v555);
                unint64_t v158 = v556;
                swift_bridgeObjectRelease();
                JSONEncodingOptions.init()();
                sub_1000714A8(&qword_10021AF68, (void (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_ClientTimingFeedback);
                Message.jsonString(options:)();
                if (!v554)
                {
                  (*(void (**)(char *, uint64_t))(v759 + 8))(v602, v758);
                  (*(void (**)(char *, uint64_t))(v636 + 8))(v657, v658);
                  goto LABEL_23;
                }
                swift_bridgeObjectRelease();
                (*(void (**)(char *, uint64_t))(v759 + 8))(v602, v758);
                v302 = *(void (**)(char *, void))(v636 + 8);
                v303 = v657;
                p_uint64_t started = (uint64_t *)&v690;
              }
              else if (v149 == enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.commandEngagementFeedback(_:))
              {
                v557 = v161;
                (*(void (**)(char *, uint64_t))(v160 + 96))(v161, v159);
                v558 = v557;
                unint64_t v152 = v660;
                (*(void (**)(char *, char *, uint64_t))(v637 + 32))(v659, v558, v660);
                uint64_t v559 = static Apple_Parsec_Feedback_V2_CommandEngagementFeedback.protoMessageName.getter();
                unint64_t v561 = v560;
                uint64_t v761 = 46;
                unint64_t v762 = 0xE100000000000000;
                __chkstk_darwin(v559);
                *(&v584 - sub_100034730((uint64_t)"SIGTERM", 7, 2) = (char *)&v761;
                swift_bridgeObjectRetain();
                uint64_t v562 = v559;
                unint64_t v563 = v763;
                uint64_t v564 = sub_10001F318(0x7FFFFFFFFFFFFFFFLL, 1u, sub_10007153C, (uint64_t)(&v584 - 4), v562, v561);
                swift_bridgeObjectRelease();
                sub_100071444(v564);
                unint64_t v158 = v565;
                swift_bridgeObjectRelease();
                JSONEncodingOptions.init()();
                sub_1000714A8(&qword_10021AF60, (void (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_CommandEngagementFeedback);
                Message.jsonString(options:)();
                if (!v563)
                {
                  (*(void (**)(char *, uint64_t))(v759 + 8))(v603, v758);
                  (*(void (**)(char *, uint64_t))(v637 + 8))(v659, v660);
                  goto LABEL_23;
                }
                swift_bridgeObjectRelease();
                (*(void (**)(char *, uint64_t))(v759 + 8))(v603, v758);
                v302 = *(void (**)(char *, void))(v637 + 8);
                v303 = v659;
                p_uint64_t started = &started;
              }
              else if (v149 == enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.dynamicButtonVisibilityFeedback(_:))
              {
                v566 = v161;
                (*(void (**)(char *, uint64_t))(v160 + 96))(v161, v159);
                v567 = v566;
                unint64_t v152 = v662;
                (*(void (**)(char *, char *, uint64_t))(v638 + 32))(v661, v567, v662);
                uint64_t v568 = static Apple_Parsec_Feedback_V2_DynamicButtonVisibilityFeedback.protoMessageName.getter();
                unint64_t v570 = v569;
                uint64_t v761 = 46;
                unint64_t v762 = 0xE100000000000000;
                __chkstk_darwin(v568);
                *(&v584 - sub_100034730((uint64_t)"SIGTERM", 7, 2) = (char *)&v761;
                swift_bridgeObjectRetain();
                uint64_t v571 = v568;
                unint64_t v572 = v763;
                uint64_t v573 = sub_10001F318(0x7FFFFFFFFFFFFFFFLL, 1u, sub_10007153C, (uint64_t)(&v584 - 4), v571, v570);
                swift_bridgeObjectRelease();
                sub_100071444(v573);
                unint64_t v158 = v574;
                swift_bridgeObjectRelease();
                JSONEncodingOptions.init()();
                sub_1000714A8(&qword_10021AF58, (void (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_DynamicButtonVisibilityFeedback);
                Message.jsonString(options:)();
                if (!v572)
                {
                  (*(void (**)(char *, uint64_t))(v759 + 8))(v604, v758);
                  (*(void (**)(char *, uint64_t))(v638 + 8))(v661, v662);
                  goto LABEL_23;
                }
                swift_bridgeObjectRelease();
                (*(void (**)(char *, uint64_t))(v759 + 8))(v604, v758);
                v302 = *(void (**)(char *, void))(v638 + 8);
                v303 = v661;
                p_uint64_t started = (uint64_t *)&v694;
              }
              else
              {
                if (v149 != enum case for Apple_Parsec_Feedback_V2_FeedbackPayload.OneOf_ContainedFeedback.experimentTriggeredFeedback(_:))
                {
                  unint64_t v152 = 0x6E776F6E6B6E75;
                  (*(void (**)(char *, uint64_t))(v160 + 8))(v161, v159);
                  return v152;
                }
                v575 = v161;
                (*(void (**)(char *, uint64_t))(v160 + 96))(v161, v159);
                v576 = v575;
                unint64_t v152 = v664;
                (*(void (**)(char *, char *, uint64_t))(v639 + 32))(v663, v576, v664);
                uint64_t v577 = static Apple_Parsec_Feedback_V2_ExperimentTriggeredFeedback.protoMessageName.getter();
                unint64_t v579 = v578;
                uint64_t v761 = 46;
                unint64_t v762 = 0xE100000000000000;
                __chkstk_darwin(v577);
                *(&v584 - sub_100034730((uint64_t)"SIGTERM", 7, 2) = (char *)&v761;
                swift_bridgeObjectRetain();
                uint64_t v580 = v577;
                unint64_t v581 = v763;
                uint64_t v582 = sub_10001F318(0x7FFFFFFFFFFFFFFFLL, 1u, sub_100067E7C, (uint64_t)(&v584 - 4), v580, v579);
                swift_bridgeObjectRelease();
                sub_100071444(v582);
                unint64_t v158 = v583;
                swift_bridgeObjectRelease();
                JSONEncodingOptions.init()();
                sub_1000714A8(&qword_10021AF50, (void (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_ExperimentTriggeredFeedback);
                Message.jsonString(options:)();
                if (!v581)
                {
                  (*(void (**)(char *, uint64_t))(v759 + 8))(v605, v758);
                  (*(void (**)(char *, uint64_t))(v639 + 8))(v663, v664);
                  goto LABEL_23;
                }
                swift_bridgeObjectRelease();
                (*(void (**)(char *, uint64_t))(v759 + 8))(v605, v758);
                v302 = *(void (**)(char *, void))(v639 + 8);
                v303 = v663;
                p_uint64_t started = &v696;
              }
            }
            v302(v303, *(p_started - 32));
            return v152;
          }
          (*(void (**)(char *, uint64_t))(v160 + 96))(v148, v145);
          uint64_t v252 = v704;
          v281 = v703;
          uint64_t v254 = v705;
          (*(void (**)(char *, char *, uint64_t))(v704 + 32))(v703, v148, v705);
          uint64_t v282 = static Apple_Parsec_Feedback_V2_StartSearchFeedback.protoMessageName.getter();
          unint64_t v284 = v283;
          uint64_t v761 = 46;
          unint64_t v762 = 0xE100000000000000;
          __chkstk_darwin(v282);
          *(&v584 - sub_100034730((uint64_t)"SIGTERM", 7, 2) = (char *)&v761;
          swift_bridgeObjectRetain();
          uint64_t v285 = sub_10001F318(0x7FFFFFFFFFFFFFFFLL, 1u, sub_10007153C, (uint64_t)(&v584 - 4), v282, v284);
          unint64_t v152 = (unint64_t)v281;
          swift_bridgeObjectRelease();
          uint64_t v760 = sub_100071444(v285);
          unint64_t v763 = v286;
          uint64_t v757 = v287;
          swift_bridgeObjectRelease();
          v261 = v701;
          JSONEncodingOptions.init()();
          v262 = (unint64_t *)&unk_10021B050;
          v263 = &type metadata accessor for Apple_Parsec_Feedback_V2_StartSearchFeedback;
        }
        sub_1000714A8(v262, (void (*)(uint64_t))v263);
        Message.jsonString(options:)();
        if (!v231)
        {
          (*(void (**)(char *, uint64_t))(v759 + 8))(v261, v758);
          (*(void (**)(unint64_t, uint64_t))(v252 + 8))(v152, v254);
          unint64_t v158 = v757;
          goto LABEL_23;
        }
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v759 + 8))(v261, v758);
        v240 = *(void (**)(unint64_t, uint64_t))(v252 + 8);
        unint64_t v241 = v152;
        uint64_t v251 = v254;
LABEL_53:
        v240(v241, v251);
        return v152;
      }
      (*(void (**)(char *, uint64_t))(v160 + 96))(v148, v145);
      uint64_t v243 = v730;
      v244 = v729;
      (*(void (**)(char *, char *, uint64_t))(v730 + 32))(v729, v148, v734);
      uint64_t v245 = static Apple_Parsec_Feedback_V2_VisibleResultsFeedback.protoMessageName.getter();
      unint64_t v247 = v246;
      uint64_t v761 = 46;
      unint64_t v762 = 0xE100000000000000;
      __chkstk_darwin(v245);
      *(&v584 - sub_100034730((uint64_t)"SIGTERM", 7, 2) = (char *)&v761;
      swift_bridgeObjectRetain();
      uint64_t v248 = sub_10001F318(0x7FFFFFFFFFFFFFFFLL, 1u, sub_10007153C, (uint64_t)(&v584 - 4), v245, v247);
      swift_bridgeObjectRelease();
      uint64_t v760 = sub_100071444(v248);
      unint64_t v763 = v249;
      unint64_t v158 = v250;
      swift_bridgeObjectRelease();
      unint64_t v152 = (unint64_t)v728;
      JSONEncodingOptions.init()();
      sub_1000714A8(&qword_10021B070, (void (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_VisibleResultsFeedback);
      Message.jsonString(options:)();
      if (v231)
      {
        swift_bridgeObjectRelease();
        (*(void (**)(unint64_t, uint64_t))(v759 + 8))(v152, v758);
        v240 = *(void (**)(unint64_t, uint64_t))(v243 + 8);
        unint64_t v241 = (unint64_t)v244;
        v242 = &v764;
        goto LABEL_38;
      }
      (*(void (**)(unint64_t, uint64_t))(v759 + 8))(v152, v758);
      v264 = *(void (**)(char *, void))(v243 + 8);
      v265 = v244;
      v266 = &v764;
    }
    v264(v265, *(v266 - 32));
    goto LABEL_23;
  }
  (*(void (**)(char *, uint64_t))(v146 + 96))(v148, v145);
  (*(void (**)(char *, char *, uint64_t))(v142 + 32))(v144, v148, v141);
  uint64_t v150 = static Apple_Parsec_Feedback_V2_Feedback.protoMessageName.getter();
  unint64_t v152 = v151;
  uint64_t v761 = 46;
  unint64_t v762 = 0xE100000000000000;
  __chkstk_darwin(v150);
  *(&v584 - sub_100034730((uint64_t)"SIGTERM", 7, 2) = (char *)&v761;
  swift_bridgeObjectRetain();
  uint64_t v153 = v150;
  unint64_t v154 = v763;
  uint64_t v155 = sub_10001F318(0x7FFFFFFFFFFFFFFFLL, 1u, sub_10007153C, (uint64_t)(&v584 - 4), v153, v152);
  swift_bridgeObjectRelease();
  uint64_t v760 = sub_100071444(v155);
  unint64_t v763 = v156;
  unint64_t v158 = v157;
  swift_bridgeObjectRelease();
  JSONEncodingOptions.init()();
  sub_1000714A8(&qword_10021B0B0, (void (*)(uint64_t))&type metadata accessor for Apple_Parsec_Feedback_V2_Feedback);
  Message.jsonString(options:)();
  if (v154)
  {
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v759 + 8))(v140, v758);
    (*(void (**)(char *, uint64_t))(v142 + 8))(v144, v141);
    return v152;
  }
  (*(void (**)(char *, uint64_t))(v759 + 8))(v140, v758);
  (*(void (**)(char *, uint64_t))(v142 + 8))(v144, v141);
LABEL_23:
  if (!v158) {
    return 0x6E776F6E6B6E75;
  }
  unint64_t v152 = static String._fromSubstring(_:)();
  swift_bridgeObjectRelease();
  return v152;
}

uint64_t type metadata accessor for ExperimentalFeedbackDatabase()
{
  return self;
}

uint64_t sub_100071444(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 32 * v1);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_1000714A8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000714F0()
{
  unint64_t result = qword_10021B0B8;
  if (!qword_10021B0B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10021B0B8);
  }
  return result;
}

uint64_t sub_10007153C(uint64_t *a1)
{
  return sub_100067E7C(a1) & 1;
}

char *sub_100071558(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  objc_allocWithZone((Class)APSConnection);
  uint64_t v11 = v5;
  id v12 = a5;
  id v13 = sub_100071D04(a1, a2, a3, a4, a5);
  if (v13)
  {
    id v14 = v13;
    sub_100071E14((uint64_t)&off_1001FA150, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)_swiftEmptyArrayStorage, (uint64_t)_swiftEmptyArrayStorage, v13);
  }
  else
  {
    if (qword_100218B50 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_10002A10C(v15, (uint64_t)qword_100236A08);
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)sub_100023E24();
      *(_WORD *)uint64_t v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Failed to inititialize APSConnection.", v18, 2u);
      sub_100017D40();
    }

    id v14 = 0;
  }
  *(void *)&v11[OBJC_IVAR____TtC7parsecd34CloudNotificationChannelConnection_apsConnection] = v14;

  v25.receiver = v11;
  v25.super_class = (Class)type metadata accessor for CloudNotificationChannelConnection();
  uint64_t v19 = (char *)objc_msgSendSuper2(&v25, "init");
  uint64_t v20 = v19;
  uint64_t v21 = *(void **)&v19[OBJC_IVAR____TtC7parsecd34CloudNotificationChannelConnection_apsConnection];
  if (v21)
  {
    uint64_t v22 = v19;
    id v23 = v21;
    [v23 setDelegate:v22];
  }
  return v20;
}

void sub_100071728(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void **)(v4 + OBJC_IVAR____TtC7parsecd34CloudNotificationChannelConnection_apsConnection);
  if (v5)
  {
    id v10 = objc_allocWithZone((Class)PKPublicChannel);
    id v11 = v5;
    swift_bridgeObjectRetain();
    id v12 = sub_100071DB0(a1, a2);
    sub_100071F08((uint64_t)v12, a3, a4, v11);
  }
  else
  {
    sub_100071FE8();
    swift_allocError();
    swift_willThrow();
  }
}

void sub_1000717F8(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3 >> 60 == 15)
  {
    if (qword_100218B50 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_10002A10C(v3, (uint64_t)qword_100236A08);
    osloga = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.error.getter();
    if (sub_10002A424(v4, v5, v6, v7, v8, v9, v10, v11, v23, osloga))
    {
      *(_WORD *)sub_100023E24() = 0;
      sub_100026928((void *)&_mh_execute_header, v12, v13, "Received null public token on token callback.", v14, v15, v16, v17, v24, oslog);
      sub_100017D40();
    }
  }
  else
  {
    sub_100027BCC(a2, a3);
    if (qword_100218B50 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_10002A10C(v20, (uint64_t)qword_100236A08);
    oslog = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(oslog, v21))
    {
      uint64_t v22 = (uint8_t *)sub_100023E24();
      *(_WORD *)uint64_t v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v21, "Received cloud channels connection token", v22, 2u);
      sub_100017D40();
    }
    sub_10000A330(a2, a3);
  }
}

void sub_100071A34(uint64_t a1, void *a2)
{
  if (a2)
  {
    id v36 = a2;
    uint64_t v2 = sub_100071F70(v36);
    if (v2)
    {
      unint64_t v3 = sub_100072158(v2);
      swift_bridgeObjectRelease();
      if (v3)
      {

        swift_bridgeObjectRelease();
        return;
      }
    }
    if (qword_100218B50 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_10002A10C(v4, (uint64_t)qword_100236A08);
    uint64_t v40 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (!sub_10002A424(v5, v6, v7, v8, v9, v10, v11, v12, (uint64_t)v36, v40))
    {

      uint64_t v34 = v37;
      goto LABEL_17;
    }
    *(_WORD *)sub_100023E24() = 0;
    sub_100026928((void *)&_mh_execute_header, v13, v14, "Received invalid APNS message.", v15, v16, v17, v18, (uint64_t)v37, v41);
    sub_100017D40();
  }
  else
  {
    if (qword_100218B50 != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    sub_10002A10C(v19, (uint64_t)qword_100236A08);
    uint64_t v43 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (sub_10002A424(v20, v21, v22, v23, v24, v25, v26, v27, (uint64_t)v35, v43))
    {
      *(_WORD *)sub_100023E24() = 0;
      sub_100026928((void *)&_mh_execute_header, v28, v29, "Received null APNs message.", v30, v31, v32, v33, (uint64_t)v39, v42);
      sub_100017D40();
    }
  }
  uint64_t v34 = v42;
LABEL_17:
}

void sub_100071C5C()
{
}

id sub_100071C9C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CloudNotificationChannelConnection();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for CloudNotificationChannelConnection()
{
  return self;
}

id sub_100071D04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (!a2)
  {
    NSString v8 = 0;
    if (a4) {
      goto LABEL_3;
    }
LABEL_5:
    NSString v9 = 0;
    goto LABEL_6;
  }
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (!a4) {
    goto LABEL_5;
  }
LABEL_3:
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
LABEL_6:
  id v10 = [v5 initWithEnvironmentName:v8 namedDelegatePort:v9 queue:a5];

  return v10;
}

id sub_100071DB0(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    NSString v3 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v3 = 0;
  }
  id v4 = [v2 initWithChannelID:v3];

  return v4;
}

void sub_100071E14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  Class v7 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  Class v8 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  Class v9 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [a5 setEnabledTopics:isa ignoredTopics:v7 opportunisticTopics:v8 nonWakingTopics:v9];
}

void sub_100071F08(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  NSString v6 = String._bridgeToObjectiveC()();
  [a4 subscribeToChannel:a1 forTopic:v6];
}

uint64_t sub_100071F70(void *a1)
{
  id v2 = [a1 userInfo];

  if (!v2) {
    return 0;
  }
  uint64_t v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

unint64_t sub_100071FE8()
{
  unint64_t result = qword_10021B150;
  if (!qword_10021B150)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10021B150);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for CloudNotificationChannelError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1000720D0);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for CloudNotificationChannelError()
{
  return &type metadata for CloudNotificationChannelError;
}

unint64_t sub_10007210C()
{
  unint64_t result = qword_10021B158;
  if (!qword_10021B158)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10021B158);
  }
  return result;
}

unint64_t sub_100072158(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_10002572C(&qword_10021B160);
    id v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    id v2 = _swiftEmptyDictionarySingleton;
  }
  sub_10001FC68(a1, v41);
  uint64_t v3 = v41[0];
  uint64_t v4 = v41[3];
  int64_t v29 = (unint64_t)(v41[2] + 64) >> 6;
  uint64_t v30 = v41[1];
  unint64_t v5 = v41[4];
  NSString v6 = &__src[40];
  Class v7 = &__dst[40];
  Class v8 = &v35;
  Class v9 = &v37;
  unint64_t result = swift_bridgeObjectRetain();
  if (!v5) {
    goto LABEL_6;
  }
LABEL_5:
  uint64_t v31 = (v5 - 1) & v5;
  int64_t v32 = v4;
  for (unint64_t i = __clz(__rbit64(v5)) | (v4 << 6); ; unint64_t i = __clz(__rbit64(v13)) + (v14 << 6))
  {
    sub_10003C9CC(*(void *)(v3 + 48) + 40 * i, (uint64_t)__src);
    sub_10001C348(*(void *)(v3 + 56) + 32 * i, (uint64_t)v6);
    memcpy(__dst, __src, sizeof(__dst));
    sub_10003C9CC((uint64_t)__dst, (uint64_t)v34);
    if (!swift_dynamicCast())
    {
      sub_100019938((uint64_t)__dst, &qword_10021B168);
      swift_bridgeObjectRelease();
      sub_10002CD84();
      sub_100023380();
      swift_release();
      return 0;
    }
    sub_10001C348((uint64_t)v7, (uint64_t)v34);
    sub_100019938((uint64_t)__dst, &qword_10021B168);
    sub_10003CA28(v34, v8);
    long long v36 = v33;
    sub_10003CA28(v8, v9);
    long long v16 = v36;
    sub_10003CA28(v9, v38);
    sub_10003CA28(v38, &v36);
    unint64_t result = sub_1000287F0(v16, *((uint64_t *)&v16 + 1));
    unint64_t v17 = result;
    if (v18)
    {
      uint64_t v19 = v9;
      os_log_type_t v20 = v8;
      int v21 = v7;
      uint64_t v22 = v3;
      int v23 = v6;
      int v24 = (_OWORD *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      *int v24 = v16;
      NSString v6 = v23;
      uint64_t v3 = v22;
      Class v7 = v21;
      Class v8 = v20;
      Class v9 = v19;
      int v25 = (_OWORD *)(v2[7] + 32 * v17);
      sub_10001CA50((uint64_t)v25);
      unint64_t result = (unint64_t)sub_10003CA28(&v36, v25);
      goto LABEL_28;
    }
    if (v2[2] >= v2[3]) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_OWORD *)(v2[6] + 16 * __swp(result, result) = v16;
    unint64_t result = (unint64_t)sub_10003CA28(&v36, (_OWORD *)(v2[7] + 32 * result));
    uint64_t v26 = v2[2];
    BOOL v27 = __OFADD__(v26, 1);
    uint64_t v28 = v26 + 1;
    if (v27) {
      goto LABEL_34;
    }
    v2[2] = v28;
LABEL_28:
    unint64_t v5 = v31;
    uint64_t v4 = v32;
    if (v31) {
      goto LABEL_5;
    }
LABEL_6:
    int64_t v12 = v4 + 1;
    if (__OFADD__(v4, 1)) {
      goto LABEL_35;
    }
    if (v12 >= v29) {
      goto LABEL_31;
    }
    unint64_t v13 = *(void *)(v30 + 8 * v12);
    int64_t v14 = v4 + 1;
    if (!v13)
    {
      int64_t v14 = v4 + 2;
      if (v4 + 2 >= v29) {
        goto LABEL_31;
      }
      unint64_t v13 = *(void *)(v30 + 8 * v14);
      if (!v13)
      {
        int64_t v14 = v4 + 3;
        if (v4 + 3 >= v29) {
          goto LABEL_31;
        }
        unint64_t v13 = *(void *)(v30 + 8 * v14);
        if (!v13)
        {
          int64_t v14 = v4 + 4;
          if (v4 + 4 >= v29) {
            goto LABEL_31;
          }
          unint64_t v13 = *(void *)(v30 + 8 * v14);
          if (!v13)
          {
            int64_t v14 = v4 + 5;
            if (v4 + 5 >= v29) {
              goto LABEL_31;
            }
            unint64_t v13 = *(void *)(v30 + 8 * v14);
            if (!v13)
            {
              int64_t v15 = v4 + 6;
              while (v15 < v29)
              {
                unint64_t v13 = *(void *)(v30 + 8 * v15++);
                if (v13)
                {
                  int64_t v14 = v15 - 1;
                  goto LABEL_21;
                }
              }
LABEL_31:
              sub_10002CD84();
              sub_100023380();
              return (unint64_t)v2;
            }
          }
        }
      }
    }
LABEL_21:
    uint64_t v31 = (v13 - 1) & v13;
    int64_t v32 = v14;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
  return result;
}

char *sub_100072508()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10002572C((uint64_t *)&unk_10021E620);
  __chkstk_darwin(v2 - 8);
  sub_100017D2C();
  uint64_t v176 = v3;
  sub_10000E100();
  __chkstk_darwin(v4);
  uint64_t v194 = (char *)&v176 - v5;
  uint64_t v6 = sub_10002572C(&qword_10021BB10);
  __chkstk_darwin(v6 - 8);
  sub_100017D2C();
  uint64_t v184 = v7;
  sub_10000E100();
  __chkstk_darwin(v8);
  sub_100021308();
  uint64_t v189 = v9;
  sub_10000E100();
  __chkstk_darwin(v10);
  sub_100021308();
  uint64_t v188 = v11;
  sub_10000E100();
  __chkstk_darwin(v12);
  sub_100021308();
  uint64_t v183 = v13;
  sub_10000E100();
  __chkstk_darwin(v14);
  sub_100021308();
  uint64_t v182 = v15;
  sub_10000E100();
  __chkstk_darwin(v16);
  sub_100021308();
  uint64_t v187 = v17;
  sub_10000E100();
  __chkstk_darwin(v18);
  sub_100021308();
  uint64_t v180 = v19;
  sub_10000E100();
  __chkstk_darwin(v20);
  sub_100021308();
  uint64_t v181 = v21;
  sub_10000E100();
  __chkstk_darwin(v22);
  sub_100021308();
  uint64_t v179 = v23;
  sub_10000E100();
  __chkstk_darwin(v24);
  sub_100021308();
  uint64_t v186 = v25;
  sub_10000E100();
  __chkstk_darwin(v26);
  sub_100021308();
  uint64_t v177 = v27;
  sub_10000E100();
  __chkstk_darwin(v28);
  sub_100021308();
  uint64_t v178 = v29;
  sub_10000E100();
  __chkstk_darwin(v30);
  sub_100021308();
  uint64_t v192 = v31;
  sub_10000E100();
  __chkstk_darwin(v32);
  sub_100021308();
  uint64_t v193 = v33;
  sub_10000E100();
  __chkstk_darwin(v34);
  sub_100021308();
  uint64_t v190 = v35;
  sub_10000E100();
  __chkstk_darwin(v36);
  sub_100021308();
  uint64_t v191 = v37;
  sub_10000E100();
  uint64_t v39 = __chkstk_darwin(v38);
  uint64_t v41 = (char *)&v176 - v40;
  uint64_t v42 = __chkstk_darwin(v39);
  uint64_t v44 = (char *)&v176 - v43;
  uint64_t v45 = __chkstk_darwin(v42);
  uint64_t v47 = (char *)&v176 - v46;
  uint64_t v48 = __chkstk_darwin(v45);
  uint64_t v50 = (char *)&v176 - v49;
  uint64_t v51 = __chkstk_darwin(v48);
  uint64_t v53 = (char *)&v176 - v52;
  uint64_t v54 = __chkstk_darwin(v51);
  uint64_t v56 = (char *)&v176 - v55;
  uint64_t v57 = __chkstk_darwin(v54);
  uint64_t v59 = (char *)&v176 - v58;
  __chkstk_darwin(v57);
  uint64_t v61 = (char *)&v176 - v60;
  uint64_t v199 = _swiftEmptyDictionarySingleton;
  id v62 = [v1 requestStartDate];
  if (v62)
  {
    uint64_t v63 = v62;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v64 = type metadata accessor for Date();
    uint64_t v65 = (uint64_t)v59;
    uint64_t v66 = 0;
  }
  else
  {
    uint64_t v64 = type metadata accessor for Date();
    uint64_t v65 = (uint64_t)v59;
    uint64_t v66 = 1;
  }
  sub_100017E64(v65, v66);
  sub_100073704((uint64_t)v59, (uint64_t)v61, &qword_10021BB10);
  type metadata accessor for Date();
  if (sub_100027BA4((uint64_t)v61, 1, v64) == 1)
  {
    sub_100019938((uint64_t)v61, &qword_10021BB10);
    sub_10002ACEC();
  }
  else
  {
    Date.timeIntervalSinceReferenceDate.getter();
    v198 = &type metadata for Double;
    sub_10002C1DC(v67);
    sub_100027504();
    v68();
  }
  unint64_t v185 = (unint64_t)"ificationChannelConnection";
  sub_100118A10((uint64_t)&v196, 0xD00000000000002CLL, 0x80000001001B3880);
  id v69 = [v1 requestStartDate];
  if (v69)
  {
    uint64_t v70 = v69;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v71 = 0;
  }
  else
  {
    uint64_t v71 = 1;
  }
  sub_100017E64((uint64_t)v53, v71);
  sub_100073704((uint64_t)v53, (uint64_t)v56, &qword_10021BB10);
  sub_1000258DC((uint64_t)v56);
  if (v72)
  {
    sub_100019938((uint64_t)v56, &qword_10021BB10);
    sub_10002ACEC();
  }
  else
  {
    Date.timeIntervalSinceReferenceDate.getter();
    v198 = &type metadata for Double;
    sub_10002C1DC(v73);
    sub_100027504();
    v74();
  }
  sub_100026948(0xD00000000000001BLL, (uint64_t)"_kCFNTimingDataRequestStart");
  id v75 = [v1 requestStartDate];
  uint64_t v76 = v191;
  if (v75)
  {
    uint64_t v77 = v75;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v78 = 0;
  }
  else
  {
    uint64_t v78 = 1;
  }
  sub_100017E64((uint64_t)v47, v78);
  sub_100073704((uint64_t)v47, (uint64_t)v50, &qword_10021BB10);
  sub_1000258DC((uint64_t)v50);
  if (v72)
  {
    sub_100019938((uint64_t)v50, &qword_10021BB10);
    sub_10002ACEC();
  }
  else
  {
    Date.timeIntervalSinceReferenceDate.getter();
    v198 = &type metadata for Double;
    sub_10002C1DC(v79);
    sub_100027504();
    v80();
  }
  uint64_t v81 = (uint64_t)v194;
  sub_100026948(0xD00000000000001DLL, (uint64_t)"_kCFNTimingDataTimingDataInit");
  id v82 = [v1 requestEndDate];
  if (v82)
  {
    uint64_t v83 = v82;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v84 = 0;
  }
  else
  {
    uint64_t v84 = 1;
  }
  sub_100017E64((uint64_t)v41, v84);
  sub_100073704((uint64_t)v41, (uint64_t)v44, &qword_10021BB10);
  sub_1000258DC((uint64_t)v44);
  if (v72)
  {
    sub_100019938((uint64_t)v44, &qword_10021BB10);
    sub_10002ACEC();
  }
  else
  {
    Date.timeIntervalSinceReferenceDate.getter();
    v198 = &type metadata for Double;
    sub_10002C1DC(v85);
    sub_100027504();
    v86();
  }
  uint64_t v87 = v193;
  sub_100027DFC((uint64_t)"_kCFNTimingDataRequestEnd");
  id v88 = [v1 responseStartDate];
  uint64_t v89 = v192;
  if (v88)
  {
    uint64_t v90 = v88;
    uint64_t v91 = v190;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v92 = v91;
    uint64_t v93 = 0;
  }
  else
  {
    uint64_t v93 = 1;
    uint64_t v92 = v190;
  }
  sub_100017E64(v92, v93);
  sub_100073704(v92, v76, &qword_10021BB10);
  sub_1000258DC(v76);
  if (v72)
  {
    sub_100019938(v76, &qword_10021BB10);
    sub_10002ACEC();
  }
  else
  {
    Date.timeIntervalSinceReferenceDate.getter();
    v198 = &type metadata for Double;
    sub_10002C1DC(v94);
    sub_100027504();
    v95();
  }
  sub_100026948(0xD00000000000001CLL, (uint64_t)"_kCFNTimingDataResponseStart");
  id v96 = [v1 responseEndDate];
  if (v96)
  {
    uint64_t v97 = v96;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v98 = 0;
  }
  else
  {
    uint64_t v98 = 1;
  }
  sub_100017E64(v89, v98);
  sub_100073704(v89, v87, &qword_10021BB10);
  sub_1000258DC(v87);
  if (v72)
  {
    sub_100019938(v87, &qword_10021BB10);
    sub_10002ACEC();
  }
  else
  {
    Date.timeIntervalSinceReferenceDate.getter();
    v198 = &type metadata for Double;
    sub_10002C1DC(v99);
    sub_100027504();
    v100();
  }
  sub_100026948(0xD00000000000001ALL, (uint64_t)"_kCFNTimingDataResponseEnd");
  unsigned __int8 v101 = [v1 isReusedConnection];
  v198 = &type metadata for Bool;
  LOBYTE(v196) = v101;
  sub_100027030(0xD00000000000001FLL, (uint64_t)"_kCFNTimingDataConnectionReused");
  sub_10002DE7C((uint64_t)[v1 countOfRequestHeaderBytesSent]);
  sub_100027030(0xD000000000000020, (uint64_t)"_kCFNTimingDataRequestHeaderSize");
  sub_10002DE7C((uint64_t)[v1 countOfResponseHeaderBytesReceived]);
  sub_100027030(0xD000000000000021, (uint64_t)"_kCFNTimingDataResponseHeaderSize");
  sub_10002DE7C((uint64_t)[v1 countOfResponseBodyBytesReceived]);
  sub_100027030(0xD000000000000028, (uint64_t)"_kCFNTimingDataResponseBodyBytesReceived");
  sub_10002DE7C((uint64_t)[v1 countOfResponseBodyBytesAfterDecoding]);
  sub_100027030(0xD000000000000027, (uint64_t)"_kCFNTimingDataResponseBodyBytesDecoded");
  id v102 = [v1 countOfRequestBodyBytesSent];
  unint64_t result = (char *)[v1 countOfRequestHeaderBytesSent];
  if (__OFADD__(v102, result))
  {
    __break(1u);
    goto LABEL_92;
  }
  v198 = &type metadata for Int64;
  uint64_t v196 = &result[(void)v102];
  sub_100026948(0xD00000000000001DLL, (uint64_t)"_kCFNTimingDataTotalBytesSent");
  id v104 = [v1 countOfResponseBodyBytesReceived];
  unint64_t result = (char *)[v1 countOfResponseHeaderBytesReceived];
  if (__OFADD__(v104, result))
  {
LABEL_92:
    __break(1u);
    return result;
  }
  v198 = &type metadata for Int64;
  uint64_t v196 = &result[(void)v104];
  sub_100026948(0xD000000000000021, (uint64_t)"_kCFNTimingDataTotalBytesReceived");
  uint64_t v105 = sub_100013C38(v1, (SEL *)&selRef__interfaceName);
  if (v106)
  {
    v198 = &type metadata for String;
    uint64_t v196 = (char *)v105;
    uint64_t v197 = v106;
  }
  else
  {
    sub_10002ACEC();
  }
  uint64_t v107 = v183;
  uint64_t v108 = v184;
  uint64_t v109 = v181;
  uint64_t v110 = v178;
  sub_100118A10((uint64_t)&v196, 0xD00000000000002CLL, v185 | 0x8000000000000000);
  unsigned __int8 v111 = [v1 _connectionRace];
  v198 = &type metadata for Bool;
  LOBYTE(v196) = v111;
  sub_100027030(0xD000000000000027, (uint64_t)"_kCFNTimingDataConnectionStopTimeCounts");
  id v112 = [v1 _connectionIdentifier];
  if (v112)
  {
    uint64_t v113 = v112;
    uint64_t v114 = v176;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v115 = v114;
    uint64_t v116 = type metadata accessor for UUID();
    uint64_t v117 = v115;
    uint64_t v118 = 0;
  }
  else
  {
    uint64_t v116 = type metadata accessor for UUID();
    uint64_t v115 = v176;
    uint64_t v117 = v176;
    uint64_t v118 = 1;
  }
  sub_10002538C(v117, v118, 1, v116);
  sub_100073704(v115, v81, (uint64_t *)&unk_10021E620);
  type metadata accessor for UUID();
  if (sub_100027BA4(v81, 1, v116) == 1)
  {
    sub_100019938(v81, (uint64_t *)&unk_10021E620);
    sub_10002ACEC();
  }
  else
  {
    uint64_t v119 = UUID.uuidString.getter();
    v198 = &type metadata for String;
    uint64_t v196 = (char *)v119;
    uint64_t v197 = v120;
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v116 - 8) + 8))(v81, v116);
  }
  uint64_t v121 = v189;
  sub_100026948(0xD00000000000001DLL, (uint64_t)"_kCFNTimingDataConnectionUUID");
  unsigned int v122 = [v1 _redirected];
  v198 = &type metadata for UInt32;
  LODWORD(v196) = v122;
  sub_100027030(0xD00000000000001CLL, (uint64_t)"_kCFNTimingDataRedirectCount");
  id v123 = [v1 connectStartDate];
  if (v123)
  {
    uint64_t v124 = v123;
    uint64_t v125 = v177;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v126 = v125;
    uint64_t v127 = 0;
  }
  else
  {
    uint64_t v127 = 1;
    uint64_t v126 = v177;
  }
  sub_100017E64(v126, v127);
  sub_100073704(v126, v110, &qword_10021BB10);
  sub_1000258DC(v110);
  if (v72)
  {
    sub_100019938(v110, &qword_10021BB10);
    sub_10002ACEC();
  }
  else
  {
    Date.timeIntervalSinceReferenceDate.getter();
    v198 = &type metadata for Double;
    sub_10002C1DC(v128);
    sub_100027504();
    v129();
  }
  sub_100026948(0xD00000000000001BLL, (uint64_t)"_kCFNTimingDataConnectStart");
  id v130 = [v1 connectEndDate];
  if (v130)
  {
    uint64_t v131 = v130;
    uint64_t v132 = v179;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v133 = v132;
    uint64_t v134 = 0;
  }
  else
  {
    uint64_t v134 = 1;
    uint64_t v133 = v179;
  }
  uint64_t v135 = v108;
  sub_100017E64(v133, v134);
  uint64_t v136 = v133;
  uint64_t v137 = v186;
  sub_100073704(v136, v186, &qword_10021BB10);
  sub_1000258DC(v137);
  uint64_t v138 = v188;
  if (v72)
  {
    sub_100019938(v137, &qword_10021BB10);
    sub_10002ACEC();
  }
  else
  {
    Date.timeIntervalSinceReferenceDate.getter();
    v198 = &type metadata for Double;
    sub_10002C1DC(v139);
    sub_100027504();
    v140();
  }
  sub_100027DFC((uint64_t)"_kCFNTimingDataConnectEnd");
  id v141 = [v1 domainLookupStartDate];
  if (v141)
  {
    uint64_t v142 = v141;
    uint64_t v143 = v180;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v144 = v143;
    uint64_t v145 = 0;
  }
  else
  {
    uint64_t v145 = 1;
    uint64_t v144 = v180;
  }
  sub_100017E64(v144, v145);
  sub_100073704(v144, v109, &qword_10021BB10);
  sub_1000258DC(v109);
  if (v72)
  {
    sub_100019938(v109, &qword_10021BB10);
    sub_10002ACEC();
  }
  else
  {
    Date.timeIntervalSinceReferenceDate.getter();
    v198 = &type metadata for Double;
    sub_10002C1DC(v146);
    sub_100027504();
    v147();
  }
  sub_100026948(0xD000000000000020, (uint64_t)"_kCFNTimingDataDomainLookupStart");
  id v148 = [v1 domainLookupEndDate];
  if (v148)
  {
    int v149 = v148;
    uint64_t v150 = v182;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v151 = v150;
    uint64_t v152 = 0;
  }
  else
  {
    uint64_t v152 = 1;
    uint64_t v151 = v182;
  }
  sub_100017E64(v151, v152);
  uint64_t v153 = v151;
  uint64_t v154 = v187;
  sub_100073704(v153, v187, &qword_10021BB10);
  sub_1000258DC(v154);
  if (v72)
  {
    sub_100019938(v154, &qword_10021BB10);
    sub_10002ACEC();
  }
  else
  {
    Date.timeIntervalSinceReferenceDate.getter();
    v198 = &type metadata for Double;
    sub_10002C1DC(v155);
    sub_100027504();
    v156();
  }
  sub_100026948(0xD00000000000001ELL, (uint64_t)"_kCFNTimingDataDomainLookupEnd");
  id v157 = [v1 fetchStartDate];
  if (v157)
  {
    unint64_t v158 = v157;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v159 = 0;
  }
  else
  {
    uint64_t v159 = 1;
  }
  sub_100017E64(v138, v159);
  sub_100073704(v138, v107, &qword_10021BB10);
  sub_1000258DC(v107);
  if (v72)
  {
    sub_100019938(v107, &qword_10021BB10);
    sub_10002ACEC();
  }
  else
  {
    Date.timeIntervalSinceReferenceDate.getter();
    v198 = &type metadata for Double;
    sub_10002C1DC(v160);
    sub_100027504();
    v161();
  }
  sub_100027DFC((uint64_t)"_kCFNTimingDataFetchStart");
  id v162 = [v1 secureConnectionStartDate];
  if (v162)
  {
    uint64_t v163 = v162;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v164 = 0;
  }
  else
  {
    uint64_t v164 = 1;
  }
  sub_100017E64(v135, v164);
  sub_100073704(v135, v121, &qword_10021BB10);
  sub_1000258DC(v121);
  if (v72)
  {
    sub_100019938(v121, &qword_10021BB10);
    sub_10002ACEC();
  }
  else
  {
    Date.timeIntervalSinceReferenceDate.getter();
    v198 = &type metadata for Double;
    sub_10002C1DC(v165);
    sub_100027504();
    v166();
  }
  sub_100026948(0xD000000000000024, (uint64_t)"_kCFNTimingDataSecureConnectionStart");
  uint64_t v167 = sub_100013C38(v1, (SEL *)&selRef_networkProtocolName);
  if (v168)
  {
    v198 = &type metadata for String;
    uint64_t v196 = (char *)v167;
    uint64_t v197 = v168;
  }
  else
  {
    sub_10002ACEC();
  }
  sub_100027030(0xD000000000000022, (uint64_t)"_kCFNTimingDataNetworkProtocolName");
  uint64_t v169 = NSURLSessionTaskTransactionMetrics.remotePort.getter();
  if ((v170 & 1) == 0)
  {
    uint64_t v171 = v169;
    uint64_t v172 = sub_100013C38(v1, (SEL *)&selRef_remoteAddress);
    if (v173)
    {
      uint64_t v196 = (char *)v172;
      uint64_t v197 = v173;
      v174._uint64_t countAndFlagsBits = 58;
      v174._object = (void *)0xE100000000000000;
      String.append(_:)(v174);
      uint64_t v195 = v171;
      v175._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v175);
      swift_bridgeObjectRelease();
      v198 = &type metadata for String;
      sub_100026948(0xD000000000000024, (uint64_t)"_kCFNTimingDataConnectionPeerAddress");
    }
  }
  return (char *)v199;
}

char *sub_100073614()
{
  uint64_t v1 = sub_100073698(v0);
  if (v1)
  {
    unint64_t v2 = sub_100072158(v1);
    swift_bridgeObjectRelease();
    if (v2) {
      return (char *)v2;
    }
  }
  id v4 = [v0 _incompleteCurrentTaskTransactionMetrics];
  uint64_t v5 = sub_100072508();
  swift_bridgeObjectRelease();

  return v5;
}

uint64_t sub_100073698(void *a1)
{
  id v1 = [a1 _timingData];
  if (!v1) {
    return 0;
  }
  unint64_t v2 = v1;
  uint64_t v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_100073704(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_10002572C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void sub_100073768()
{
}

uint64_t sub_100073820(char a1)
{
  return qword_1001A50D0[a1];
}

unint64_t sub_100073840(unsigned __int8 a1)
{
  if (((1 << a1) & 0xB0) != 0) {
    unint64_t v1 = 0xD000000000000017;
  }
  else {
    unint64_t v1 = 0;
  }
  if (a1 <= 7u) {
    return v1;
  }
  else {
    return 0;
  }
}

uint64_t sub_100073884()
{
  return sub_100073820(*v0);
}

unint64_t sub_10007388C()
{
  return sub_100073840(*v0);
}

const char *sub_100073894()
{
  return "parsecd";
}

void sub_1000738A8()
{
}

unsigned char *sub_1000738C8(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100073964);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void type metadata accessor for SpotlightUIFeatureFlag()
{
}

uint64_t getEnumTagSinglePayload for SearchSessionTableColumn(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF9)
  {
    if (a2 + 7 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 7) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 8;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 8;
  int v5 = v6 - 8;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *sub_100073A20(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *unint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100073AECLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

void type metadata accessor for ParsecFeatureFlag()
{
}

unint64_t sub_100073B20(uint64_t a1)
{
  unint64_t result = sub_1000714F0();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100073B4C()
{
  unint64_t result = qword_10021B170;
  if (!qword_10021B170)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10021B170);
  }
  return result;
}

unint64_t sub_100073B98()
{
  return 0xD00000000000001DLL;
}

unint64_t sub_100073BB4()
{
  return 0xD00000000000001DLL;
}

const char *sub_100073BD4()
{
  return "SpotlightUI";
}

const char *sub_100073BE8()
{
  return "SnippetModernization";
}

unint64_t sub_100073C00()
{
  unint64_t result = qword_10021B178;
  if (!qword_10021B178)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10021B178);
  }
  return result;
}

unint64_t sub_100073C4C(uint64_t a1)
{
  unint64_t result = sub_100073C74();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100073C74()
{
  unint64_t result = qword_10021B180;
  if (!qword_10021B180)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10021B180);
  }
  return result;
}

uint64_t sub_100073CC0(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t))
{
  sub_10001FC68(a1, v19);
  uint64_t v3 = v19[0];
  uint64_t v4 = v19[1];
  int64_t v5 = v19[3];
  unint64_t v6 = v19[4];
  int64_t v7 = (unint64_t)(v19[2] + 64) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  if (!v6) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v9 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  unint64_t v10 = v9 | (v5 << 6);
  while (1)
  {
    uint64_t v15 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v10);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    uint64_t v18 = *(unsigned int *)(*(void *)(v3 + 56) + 4 * v10);
    swift_bridgeObjectRetain();
    a2(v16, v17, v18);
    uint64_t result = swift_bridgeObjectRelease();
    if (v6) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v11 = v5 + 1;
    if (__OFADD__(v5, 1)) {
      break;
    }
    if (v11 >= v7) {
      return swift_release();
    }
    unint64_t v12 = *(void *)(v4 + 8 * v11);
    int64_t v13 = v5 + 1;
    if (!v12)
    {
      int64_t v13 = v5 + 2;
      if (v5 + 2 >= v7) {
        return swift_release();
      }
      unint64_t v12 = *(void *)(v4 + 8 * v13);
      if (!v12)
      {
        int64_t v13 = v5 + 3;
        if (v5 + 3 >= v7) {
          return swift_release();
        }
        unint64_t v12 = *(void *)(v4 + 8 * v13);
        if (!v12)
        {
          int64_t v13 = v5 + 4;
          if (v5 + 4 >= v7) {
            return swift_release();
          }
          unint64_t v12 = *(void *)(v4 + 8 * v13);
          if (!v12)
          {
            int64_t v13 = v5 + 5;
            if (v5 + 5 >= v7) {
              return swift_release();
            }
            unint64_t v12 = *(void *)(v4 + 8 * v13);
            if (!v12)
            {
              int64_t v14 = v5 + 6;
              while (v14 < v7)
              {
                unint64_t v12 = *(void *)(v4 + 8 * v14++);
                if (v12)
                {
                  int64_t v13 = v14 - 1;
                  goto LABEL_18;
                }
              }
              return swift_release();
            }
          }
        }
      }
    }
LABEL_18:
    unint64_t v6 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v13 << 6);
    int64_t v5 = v13;
  }
  __break(1u);
  return result;
}

uint64_t sub_100073E38(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v92 = a2;
  uint64_t v93 = a5;
  uint64_t v90 = a4;
  uint64_t v8 = sub_10002572C((uint64_t *)&unk_10021E630);
  uint64_t v9 = sub_100024920(v8);
  uint64_t v89 = v10;
  uint64_t v12 = *(void *)(v11 + 64);
  uint64_t v13 = __chkstk_darwin(v9);
  uint64_t v85 = (uint64_t)v78 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v80 = (uint64_t)v78 - v15;
  __chkstk_darwin(v14);
  uint64_t v88 = (uint64_t)v78 - v16;
  *(void *)(v5 + 16) = _swiftEmptyDictionarySingleton;
  uint64_t v84 = (void *)(v5 + 16);
  v78[0] = v5;
  sub_100074E44(a3, v5 + OBJC_IVAR____TtC7parsecd21NotificationsListener_logger);
  uint64_t v17 = sub_10001F858(a1);
  int64_t v19 = 0;
  uint64_t v20 = *(void *)(v17 + 56);
  uint64_t v82 = v17 + 56;
  uint64_t v91 = v17;
  uint64_t v21 = 1 << *(unsigned char *)(v17 + 32);
  uint64_t v22 = -1;
  if (v21 < 64) {
    uint64_t v22 = ~(-1 << v21);
  }
  unint64_t v23 = v22 & v20;
  int64_t v83 = (unint64_t)(v21 + 63) >> 6;
  uint64_t v86 = v97;
  uint64_t v87 = v12 + 7;
  *(void *)&long long v18 = 136315394;
  long long v79 = v18;
  v78[1] = (char *)&type metadata for Any + 8;
  uint64_t v81 = a3;
  while (1)
  {
    while (1)
    {
      if (v23)
      {
        unint64_t v24 = __clz(__rbit64(v23));
        v23 &= v23 - 1;
        unint64_t v25 = v24 | (v19 << 6);
      }
      else
      {
        int64_t v26 = v19 + 1;
        if (__OFADD__(v19, 1))
        {
          __break(1u);
LABEL_47:
          __break(1u);
LABEL_48:
          __break(1u);
LABEL_49:
          __break(1u);
        }
        if (v26 >= v83) {
          goto LABEL_45;
        }
        unint64_t v27 = *(void *)(v82 + 8 * v26);
        ++v19;
        if (!v27)
        {
          int64_t v19 = v26 + 1;
          sub_1000258FC();
          if (v28 == v29) {
            goto LABEL_45;
          }
          sub_10002A440();
          if (!v27)
          {
            int64_t v19 = v30 + 2;
            sub_1000258FC();
            if (v28 == v29) {
              goto LABEL_45;
            }
            sub_10002A440();
            if (!v27)
            {
              int64_t v32 = v31 + 3;
              if (v32 >= v83)
              {
LABEL_45:

                swift_release();
                sub_100074EAC(a3);
                swift_release();
                return v78[0];
              }
              unint64_t v27 = *(void *)(v82 + 8 * v32);
              if (!v27)
              {
                while (1)
                {
                  int64_t v19 = v32 + 1;
                  if (__OFADD__(v32, 1)) {
                    goto LABEL_49;
                  }
                  sub_1000258FC();
                  if (v28 == v29) {
                    goto LABEL_45;
                  }
                  sub_10002A440();
                  int64_t v32 = v33 + 1;
                  if (v27) {
                    goto LABEL_22;
                  }
                }
              }
              int64_t v19 = v32;
            }
          }
        }
LABEL_22:
        unint64_t v23 = (v27 - 1) & v27;
        unint64_t v25 = __clz(__rbit64(v27)) + (v19 << 6);
      }
      uint64_t v34 = (uint64_t *)(*(void *)(v91 + 48) + 16 * v25);
      uint64_t v35 = *v34;
      unint64_t v36 = v34[1];
      int out_token = -1;
      uint64_t v37 = v88;
      sub_100074E44(a3, v88);
      unint64_t v38 = (*(unsigned __int8 *)(v89 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v89 + 80);
      unint64_t v39 = (v87 + v38) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v40 = swift_allocObject();
      sub_100075010(v37, v40 + v38);
      uint64_t v41 = (uint64_t *)(v40 + v39);
      *uint64_t v41 = v35;
      v41[1] = v36;
      uint64_t v42 = (void *)(v40 + ((v39 + 23) & 0xFFFFFFFFFFFFFFF8));
      uint64_t v43 = v93;
      *uint64_t v42 = v90;
      v42[1] = v43;
      v97[2] = sub_100075078;
      v97[3] = v40;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      v97[0] = sub_10007E308;
      v97[1] = &unk_1001FCC98;
      uint64_t v44 = _Block_copy(aBlock);
      swift_bridgeObjectRetain_n();
      uint64_t v45 = v92;
      swift_retain();
      swift_release();
      uint64_t v46 = (const char *)(String.utf8CString.getter() + 32);
      swift_beginAccess();
      uint32_t v47 = notify_register_dispatch(v46, &out_token, v45, v44);
      swift_endAccess();
      swift_release();
      _Block_release(v44);

      if (!v47) {
        break;
      }
      uint64_t v48 = v85;
      sub_100074E44(a3, v85);
      uint64_t v49 = type metadata accessor for Logger();
      if (sub_100027BA4(v48, 1, v49) == 1)
      {
        swift_bridgeObjectRelease();
        sub_100074EAC(v48);
      }
      else
      {
        swift_bridgeObjectRetain();
        uint64_t v64 = Logger.logObject.getter();
        os_log_type_t v65 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v64, v65))
        {
          uint64_t v66 = swift_slowAlloc();
          uint64_t v67 = swift_slowAlloc();
          sub_10002C1F0(v67);
          *(void *)(v66 + 4) = sub_10001C274(v35, v36, aBlock);
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v66 + 1sub_100034730((uint64_t)"SIGTERM", 7, 2) = 1024;
          *(_DWORD *)(v66 + 14) = v47;
          _os_log_impl((void *)&_mh_execute_header, v64, v65, "Failed to subscribe to notifications for %s - Result: %u", (uint8_t *)v66, 0x12u);
          swift_arrayDestroy();
          a3 = v81;
          sub_100017D40();
          uint64_t v48 = v85;
          sub_100017D40();
        }
        else
        {
          swift_bridgeObjectRelease_n();
        }

        (*(void (**)(uint64_t, uint64_t))(*(void *)(v49 - 8) + 8))(v48, v49);
      }
    }
    int v50 = out_token;
    uint64_t v51 = v84;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    double v94 = (void *)*v51;
    uint64_t v53 = v94;
    *uint64_t v51 = 0x8000000000000000;
    unint64_t v54 = sub_1000287F0(v35, v36);
    uint64_t v56 = v53[2];
    BOOL v57 = (v55 & 1) == 0;
    Swift::Int v58 = v56 + v57;
    if (__OFADD__(v56, v57)) {
      goto LABEL_47;
    }
    unint64_t v59 = v54;
    char v60 = v55;
    sub_10002572C(&qword_10021B268);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v58)) {
      break;
    }
LABEL_30:
    uint64_t v63 = v94;
    if (v60)
    {
      *(_DWORD *)(v94[7] + 4 * v59) = v50;
    }
    else
    {
      v94[(v59 >> 6) + 8] |= 1 << v59;
      uint64_t v68 = (uint64_t *)(v63[6] + 16 * v59);
      *uint64_t v68 = v35;
      v68[1] = v36;
      *(_DWORD *)(v63[7] + 4 * v59) = v50;
      uint64_t v69 = v63[2];
      BOOL v29 = __OFADD__(v69, 1);
      uint64_t v70 = v69 + 1;
      if (v29) {
        goto LABEL_48;
      }
      v63[2] = v70;
      swift_bridgeObjectRetain();
    }
    *uint64_t v84 = v63;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();
    a3 = v81;
    uint64_t v71 = v80;
    sub_100074E44(v81, v80);
    uint64_t v72 = type metadata accessor for Logger();
    if (sub_100027BA4(v71, 1, v72) == 1)
    {
      swift_bridgeObjectRelease();
      sub_100074EAC(v71);
    }
    else
    {
      swift_bridgeObjectRetain();
      double v73 = Logger.logObject.getter();
      os_log_type_t v74 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v73, v74))
      {
        uint64_t v75 = swift_slowAlloc();
        uint64_t v76 = swift_slowAlloc();
        sub_10002C1F0(v76);
        *(void *)(v75 + 4) = sub_10001C274(v35, v36, aBlock);
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v75 + 1sub_100034730((uint64_t)"SIGTERM", 7, 2) = 1024;
        *(_DWORD *)(v75 + 14) = out_token;
        _os_log_impl((void *)&_mh_execute_header, v73, v74, "Successfully subscribed to notifications for %s [token %d]", (uint8_t *)v75, 0x12u);
        swift_arrayDestroy();
        uint64_t v71 = v80;
        sub_100017D40();
        sub_100017D40();
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }

      (*(void (**)(uint64_t, uint64_t))(*(void *)(v72 - 8) + 8))(v71, v72);
    }
  }
  unint64_t v61 = sub_1000287F0(v35, v36);
  if ((v60 & 1) == (v62 & 1))
  {
    unint64_t v59 = v61;
    goto LABEL_30;
  }
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_100074698(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t (*a5)(uint64_t, unint64_t, uint64_t))
{
  uint64_t v10 = sub_10002572C((uint64_t *)&unk_10021E630);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100074E44(a2, (uint64_t)v12);
  uint64_t v13 = type metadata accessor for Logger();
  if (sub_100027BA4((uint64_t)v12, 1, v13) == 1)
  {
    sub_100074EAC((uint64_t)v12);
  }
  else
  {
    swift_bridgeObjectRetain_n();
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = swift_slowAlloc();
      uint64_t v20 = a3;
      uint64_t v17 = v16;
      uint64_t v19 = swift_slowAlloc();
      uint64_t v22 = v19;
      *(_DWORD *)uint64_t v17 = 136315394;
      swift_bridgeObjectRetain();
      uint64_t v21 = sub_10001C274(v20, a4, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v17 + 1sub_100034730((uint64_t)"SIGTERM", 7, 2) = 1024;
      LODWORD(v21) = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Received notification for %s [token %d]", (uint8_t *)v17, 0x12u);
      swift_arrayDestroy();
      swift_slowDealloc();
      a3 = v20;
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    (*(void (**)(char *, uint64_t))(*(void *)(v13 - 8) + 8))(v12, v13);
  }
  return a5(a3, a4, a1);
}

uint64_t sub_100074918(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = sub_10002572C((uint64_t *)&unk_10021E630);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100074E44(a3, (uint64_t)v12);
  type metadata accessor for NotificationsListener();
  uint64_t v13 = swift_allocObject();
  sub_100073E38(a1, a2, (uint64_t)v12, a4, a5);
  sub_100074EAC(a3);
  return v13;
}

uint64_t sub_1000749F8()
{
  swift_beginAccess();
  uint64_t v1 = swift_bridgeObjectRetain();
  sub_100073CC0(v1, (void (*)(uint64_t, uint64_t, uint64_t))sub_100075108);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100074EAC(v0 + OBJC_IVAR____TtC7parsecd21NotificationsListener_logger);
  return v0;
}

uint64_t sub_100074A88(uint64_t a1, unint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = sub_10002572C((uint64_t *)&unk_10021E630);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint32_t v11 = notify_cancel(a3);
  sub_100074E44(a4 + OBJC_IVAR____TtC7parsecd21NotificationsListener_logger, (uint64_t)v10);
  uint64_t v12 = type metadata accessor for Logger();
  if (sub_100027BA4((uint64_t)v10, 1, v12) == 1) {
    return sub_100074EAC((uint64_t)v10);
  }
  swift_bridgeObjectRetain_n();
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 136315650;
    uint32_t v18 = v11;
    swift_bridgeObjectRetain();
    uint64_t v19 = sub_10001C274(a1, a2, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v16 + 1sub_100034730((uint64_t)"SIGTERM", 7, 2) = 1024;
    LODWORD(v19) = a3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v16 + 18) = 1024;
    LODWORD(v19) = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Canceled notifications for %s [token: %d] - Result: %u", (uint8_t *)v16, 0x18u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v12 - 8) + 8))(v10, v12);
}

uint64_t sub_100074CFC()
{
  sub_1000749F8();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v1, v2);
}

uint64_t sub_100074D54()
{
  return type metadata accessor for NotificationsListener();
}

uint64_t type metadata accessor for NotificationsListener()
{
  uint64_t result = qword_10021B1B8;
  if (!qword_10021B1B8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100074DA4()
{
  sub_100049908();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t sub_100074E44(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10002572C((uint64_t *)&unk_10021E630);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100074EAC(uint64_t a1)
{
  uint64_t v2 = sub_10002572C((uint64_t *)&unk_10021E630);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100074F0C()
{
  uint64_t v1 = sub_10002572C((uint64_t *)&unk_10021E630);
  sub_100024920(v1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = type metadata accessor for Logger();
  if (!sub_100027BA4(v0 + v4, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v0 + v4, v7);
  }
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, ((((v6 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16, v3 | 7);
}

uint64_t sub_100075010(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10002572C((uint64_t *)&unk_10021E630);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100075078(uint64_t a1)
{
  uint64_t v3 = sub_10002572C((uint64_t *)&unk_10021E630);
  sub_100024920(v3);
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  unint64_t v8 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v9 = (*(void *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v10 = *(void *)(v1 + v9);
  unint64_t v11 = *(void *)(v1 + v9 + 8);
  uint64_t v12 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t))(v1 + ((v9 + 23) & 0xFFFFFFFFFFFFFFF8));

  return sub_100074698(a1, v1 + v8, v10, v11, v12);
}

uint64_t sub_100075108(uint64_t a1, unint64_t a2, int a3)
{
  return sub_100074A88(a1, a2, a3, v3);
}

uint64_t sub_100075110()
{
  swift_retain();
  sub_1000821C8();

  return swift_release();
}

uint64_t sub_100075158()
{
  sub_100023FA0(0, (unint64_t *)&qword_100219250);
  uint64_t v0 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v0 - 8);
  static DispatchQoS.userInitiated.getter();
  uint64_t v1 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v1);
  v6[1] = 0;
  sub_100030414((unint64_t *)&qword_10021B3D0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  dispatch thunk of OptionSet.init(rawValue:)();
  uint64_t v2 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  __chkstk_darwin(v2);
  (*(void (**)(char *, void))(v4 + 104))((char *)v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:));
  uint64_t result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  qword_100236AF0 = result;
  return result;
}

uint64_t sub_10007533C()
{
  sub_1000761BC();
  swift_release();
  sub_10001CDE0(v0 + 24);
  swift_unknownObjectRelease();
  sub_100019154(*(void *)(v0 + 56));
  return v0;
}

uint64_t sub_100075378()
{
  sub_10007533C();

  return _swift_deallocClassInstance(v0, 64, 7);
}

uint64_t type metadata accessor for TrialExperimentsProvider()
{
  return self;
}

void sub_1000753D0()
{
  sub_10000DFE0();
  if (qword_100218B78 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10002A10C(v2, (uint64_t)qword_100236A80);
  sub_10002704C();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = swift_slowAlloc();
    v24[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315394;
    unint64_t v6 = sub_1000757AC(*(_DWORD *)(v0 + 40));
    unint64_t v23 = (void *)sub_10001C274(v6, v7, v24);
    uint64_t v1 = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_100019B54();
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 1sub_100034730((uint64_t)"SIGTERM", 7, 2) = 2080;
    if (qword_100218BB8 != -1) {
      swift_once();
    }
    uint64_t v8 = OS_dispatch_queue.label.getter();
    unint64_t v23 = (void *)sub_10001C274(v8, v9, v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%s Queueing call to performUpdateExperiments on queue %s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    sub_100017D40();
    sub_100017D40();
  }
  else
  {

    sub_100019B54();
  }
  if (qword_100218BB8 != -1) {
    swift_once();
  }
  v22[2] = qword_100236AF0;
  v24[4] = (uint64_t)sub_100076EF8;
  void v24[5] = v0;
  v24[0] = (uint64_t)_NSConcreteStackBlock;
  v24[1] = 1107296256;
  v24[2] = (uint64_t)sub_1000085EC;
  void v24[3] = (uint64_t)&unk_1001FCDC8;
  uint64_t v10 = _Block_copy(v24);
  uint64_t v11 = type metadata accessor for DispatchQoS();
  v22[1] = v22;
  sub_100020C48();
  uint64_t v13 = v12;
  __chkstk_darwin(v14);
  sub_10000DFD0();
  uint64_t v17 = v16 - v15;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v18 = type metadata accessor for DispatchWorkItemFlags();
  sub_100020C48();
  uint64_t v20 = v19;
  __chkstk_darwin(v21);
  sub_100017DE0();
  unint64_t v23 = _swiftEmptyArrayStorage;
  sub_100030414((unint64_t *)&qword_100219260, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10002572C((uint64_t *)&unk_10021BAF0);
  sub_1000301A0();
  sub_100021314();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v10);
  (*(void (**)(uint64_t *, uint64_t))(v20 + 8))(v1, v18);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v17, v11);
  swift_release();
  sub_10000DFB8();
}

unint64_t sub_1000757AC(int a1)
{
  uint64_t v1 = (void *)0xE600000000000000;
  unint64_t v2 = 0x656369766544;
  switch(a1)
  {
    case 0:
      break;
    case 1:
      uint64_t v1 = (void *)0xEE006E6F69747563;
      unint64_t v2 = 0x6578452069726953;
      break;
    case 2:
      uint64_t v1 = (void *)0xEB00000000686372;
      unint64_t v2 = 0x6165532069726953;
      break;
    case 3:
      unint64_t v2 = 0xD000000000000015;
      uint64_t v1 = (void *)0x80000001001B3EB0;
      break;
    default:
      type metadata accessor for TRIDeploymentEnvironment(0);
      unint64_t v2 = String.init<A>(describing:)();
      uint64_t v1 = v3;
      break;
  }
  _StringGuts.grow(_:)(23);
  swift_bridgeObjectRelease();
  v4._uint64_t countAndFlagsBits = v2;
  v4._object = v1;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._uint64_t countAndFlagsBits = 93;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  return 0xD000000000000014;
}

void sub_100075904()
{
  sub_10000DFE0();
  uint64_t v1 = v0;
  uint64_t v2 = sub_10002572C((uint64_t *)&unk_10021E630);
  __chkstk_darwin(v2 - 8);
  sub_10000DFD0();
  Swift::String v5 = (uint8_t *)(v4 - v3);
  uint64_t v6 = *(void *)(v0 + 56);
  if (v6)
  {
    if (v6 == 1)
    {
      if (qword_100218B78 != -1) {
        swift_once();
      }
      uint64_t v7 = type metadata accessor for Logger();
      sub_10002A10C(v7, (uint64_t)qword_100236A80);
      sub_10002704C();
      uint64_t v8 = Logger.logObject.getter();
      os_log_type_t v9 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v8, v9))
      {
        sub_100017D90();
        uint64_t v29 = sub_10002A450();
        unint64_t v10 = sub_10002DE88(4.8149e-34);
        uint64_t v12 = sub_10001C274(v10, v11, &v29);
        sub_1000249B4(v12);
        sub_100019B54();
        swift_bridgeObjectRelease();
        uint64_t v13 = "%s Experiments already updated. Skipping...";
LABEL_15:
        _os_log_impl((void *)&_mh_execute_header, v8, v9, v13, v5, 0xCu);
        swift_arrayDestroy();
        sub_100017D40();
        sub_100017D40();

        goto LABEL_21;
      }
    }
    else
    {
      if (qword_100218B78 != -1) {
        swift_once();
      }
      uint64_t v21 = type metadata accessor for Logger();
      sub_10002A10C(v21, (uint64_t)qword_100236A80);
      sub_10002704C();
      uint64_t v8 = Logger.logObject.getter();
      os_log_type_t v9 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v8, v9))
      {
        sub_100017D90();
        uint64_t v29 = sub_10002A450();
        unint64_t v22 = sub_10002DE88(4.8149e-34);
        uint64_t v24 = sub_10001C274(v22, v23, &v29);
        sub_1000249B4(v24);
        sub_100019B54();
        swift_bridgeObjectRelease();
        goto LABEL_15;
      }
    }

    sub_100019B54();
    goto LABEL_21;
  }
  if (qword_100218B78 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  uint64_t v15 = sub_10002A10C(v14, (uint64_t)qword_100236A80);
  sub_10002704C();
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)sub_100017D90();
    uint64_t v29 = swift_slowAlloc();
    *(_DWORD *)uint64_t v18 = 136315138;
    unint64_t v19 = sub_1000757AC(*(_DWORD *)(v0 + 40));
    sub_10001C274(v19, v20, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_100019B54();
    swift_bridgeObjectRelease();
    swift_arrayDestroy();
    sub_100017D40();
    sub_100017D40();
  }
  else
  {

    sub_100019B54();
  }
  type metadata accessor for NotificationsListener();
  if (qword_100218BB8 != -1) {
    swift_once();
  }
  unint64_t v25 = (void *)qword_100236AF0;
  (*(void (**)(uint8_t *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(v5, v15, v14);
  sub_10002538C((uint64_t)v5, 0, 1, v14);
  uint64_t v26 = swift_allocObject();
  swift_weakInit();
  uint64_t v27 = sub_100074918((uint64_t)&off_1001FA180, v25, (uint64_t)v5, (uint64_t)sub_100076EF0, v26);
  unint64_t v28 = *(void *)(v1 + 56);
  *(void *)(v1 + 56) = v27;
  sub_100019154(v28);
LABEL_21:
  sub_10000DFB8();
}

uint64_t sub_100075D8C()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_100076238();
    return swift_release();
  }
  return result;
}

void sub_100075DE4()
{
  sub_10000DFE0();
  uint64_t v2 = *v0;
  if (qword_100218BB8 != -1) {
    swift_once();
  }
  v16[2] = qword_100236AF0;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = v0;
  *(void *)(v3 + 24) = v2;
  void v17[4] = sub_100076EA8;
  v17[5] = v3;
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 1107296256;
  void v17[2] = sub_1000085EC;
  v17[3] = &unk_1001FCD78;
  uint64_t v4 = _Block_copy(v17);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  v16[1] = v16;
  sub_100020C48();
  uint64_t v7 = v6;
  __chkstk_darwin(v8);
  sub_10000DFD0();
  uint64_t v11 = v10 - v9;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v12 = type metadata accessor for DispatchWorkItemFlags();
  sub_100020C48();
  uint64_t v14 = v13;
  __chkstk_darwin(v15);
  sub_100017DE0();
  void v16[3] = _swiftEmptyArrayStorage;
  sub_100030414((unint64_t *)&qword_100219260, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10002572C((uint64_t *)&unk_10021BAF0);
  sub_1000301A0();
  sub_100021314();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v4);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v1, v12);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v11, v5);
  swift_release();
  sub_10000DFB8();
}

uint64_t sub_100076054(uint64_t a1)
{
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v3 = *(unsigned int *)(a1 + 40);
    if (qword_100218BB8 != -1) {
      swift_once();
    }
    uint64_t v4 = qword_100236AF0;
    uint64_t v5 = swift_allocObject();
    swift_weakInit();
    swift_retain();
    id v6 = sub_1000BCCD4(v3, v4, (uint64_t)sub_100076EE8, v5);
    swift_release_n();
    swift_unknownObjectRelease();
    *(void *)(a1 + 48) = v6;
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_100076164()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_100076238();
    return swift_release();
  }
  return result;
}

uint64_t sub_1000761BC()
{
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    if (*(void *)(v0 + 48))
    {
      uint64_t v2 = swift_unknownObjectRetain();
      sub_1000BCDE0(v2);
      swift_unknownObjectRelease();
    }
    return swift_unknownObjectRelease();
  }
  return result;
}

void sub_100076238()
{
  sub_10000DFE0();
  uint64_t v2 = v0;
  if (swift_unknownObjectWeakLoadStrong())
  {
    if (qword_100218B78 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_10002A10C(v3, (uint64_t)qword_100236A80);
    sub_10002704C();
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.info.getter();
    id v6 = &unk_1001A3000;
    if (os_log_type_enabled(v4, v5))
    {
      sub_100017D90();
      unint64_t v19 = (void *)sub_10002A450();
      *(_DWORD *)uint64_t v1 = 136315138;
      unint64_t v7 = sub_1000757AC(*(_DWORD *)(v2 + 40));
      uint64_t v9 = sub_10001C274(v7, v8, (uint64_t *)&v19);
      sub_10002ACF8(v9);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_100019B54();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "%s Updating trial experiments...", v1, 0xCu);
      id v6 = (void *)&unk_1001A3000;
      swift_arrayDestroy();
      sub_100017D40();
      sub_100017D40();
    }
    else
    {

      uint64_t v10 = sub_100019B54();
    }
    unint64_t v19 = _swiftEmptySetSingleton;
    uint64_t v11 = *(unsigned int *)(v2 + 40);
    __chkstk_darwin(v10);
    void v17[2] = &v19;
    sub_1000BCABC(v11, (uint64_t)sub_100076B44, (uint64_t)v17);
    swift_bridgeObjectRetain();
    sub_100075110();
    sub_10002704C();
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v12, v13))
    {
      sub_100017D90();
      uint64_t v18 = sub_10002A450();
      MEMORY[0] = v6[232];
      unint64_t v14 = sub_1000757AC(v11);
      void v17[4] = sub_10001C274(v14, v15, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_100019B54();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "%s Successfully updated trial experiments.", 0, 0xCu);
      swift_arrayDestroy();
      sub_100017D40();
      sub_100017D40();
      swift_unknownObjectRelease();
    }
    else
    {

      swift_unknownObjectRelease();
      sub_100019B54();
    }
    unint64_t v16 = *(void *)(v2 + 56);
    *(void *)(v2 + 56) = 1;
    sub_100019154(v16);
    swift_bridgeObjectRelease();
  }
  sub_10000DFB8();
}

uint64_t *initializeBufferWithCopyOfBuffer for TrialExperimentsProvider.TrialExperimentsUpdateStatus(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if ((unint64_t)*a2 >= 0xFFFFFFFF) {
    uint64_t v3 = swift_retain();
  }
  *a1 = v3;
  return a1;
}

unint64_t destroy for TrialExperimentsProvider.TrialExperimentsUpdateStatus(unint64_t *a1)
{
  unint64_t result = *a1;
  if (result >= 0xFFFFFFFF) {
    return swift_release();
  }
  return result;
}

unint64_t *assignWithCopy for TrialExperimentsProvider.TrialExperimentsUpdateStatus(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  unint64_t v4 = *a2;
  if (v3 < 0xFFFFFFFF)
  {
    *a1 = v4;
    if (v4 >= 0xFFFFFFFF) {
      swift_retain();
    }
  }
  else if (v4 < 0xFFFFFFFF)
  {
    swift_release();
    *a1 = *a2;
  }
  else
  {
    *a1 = v4;
    swift_retain();
    swift_release();
  }
  return a1;
}

void *initializeWithTake for TrialExperimentsProvider.TrialExperimentsUpdateStatus(void *result, void *a2)
{
  *unint64_t result = *a2;
  return result;
}

unint64_t *assignWithTake for TrialExperimentsProvider.TrialExperimentsUpdateStatus(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  if (*a1 < 0xFFFFFFFF) {
    goto LABEL_6;
  }
  if (v3 < 0xFFFFFFFF)
  {
    swift_release();
LABEL_6:
    *a1 = v3;
    return a1;
  }
  *a1 = v3;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for TrialExperimentsProvider.TrialExperimentsUpdateStatus(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFE && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(vsub_100034730((uint64_t)"SIGINT", 6, 3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 1;
  if (v4 >= 3) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for TrialExperimentsProvider.TrialExperimentsUpdateStatus(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)unint64_t result = 0;
    *(_DWORD *)unint64_t result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2 + 1;
    }
  }
  return result;
}

void *sub_100076904(void *result, int a2)
{
  if (a2 < 0)
  {
    unsigned int v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2) {
      return result;
    }
    unsigned int v2 = a2 - 1;
  }
  *unint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for TrialExperimentsProvider.TrialExperimentsUpdateStatus()
{
  return &type metadata for TrialExperimentsProvider.TrialExperimentsUpdateStatus;
}

uint64_t sub_100076934(void *a1)
{
  uint64_t v2 = type metadata accessor for Trialpb_TrialExperiment();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  __chkstk_darwin(v4);
  id v6 = (char *)&v14 - v5;
  id v7 = [a1 namespaces];
  sub_100023FA0(0, &qword_10021B3C8);
  unint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v8 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v13) {
      goto LABEL_3;
    }
  }
  else if (*(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_3:
    sub_100065188(0, (v8 & 0xC000000000000001) == 0, v8);
    if ((v8 & 0xC000000000000001) != 0) {
      id v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v9 = *(id *)(v8 + 32);
    }
    uint64_t v10 = v9;
    swift_bridgeObjectRelease();
    id v11 = v10;
    sub_100076B4C(v11, a1);
    sub_10008FFA0();

    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_100076B44(void *a1)
{
  return sub_100076934(a1);
}

void sub_100076B4C(void *a1, void *a2)
{
  Trialpb_TrialExperiment.init()();
  id v3 = [a1 name];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  Trialpb_TrialExperiment.experimentNamespace.setter();
  id v4 = [a2 experimentId];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  Trialpb_TrialExperiment.experimentID.setter();
  id v5 = [a2 treatmentId];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  Trialpb_TrialExperiment.treatmentID.setter();
  [a2 deploymentId];
  Trialpb_TrialExperiment.deploymentID.setter();
  [a1 compatibilityVersion];
  Trialpb_TrialExperiment.compatibilityVersion.setter();
}

BOOL sub_100076C7C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 - 8);
  __chkstk_darwin(a1);
  id v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v5, a1);
  if (_getErrorEmbeddedNSError<A>(_:)())
  {
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, a1);
  }
  else
  {
    swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v2 + 32))(v6, v4, a1);
  }
  id v7 = (void *)_convertErrorToNSError(_:)();
  swift_errorRelease();
  id v8 = [v7 domain];
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v11 = v10;

  if (v9 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v11 == v12)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v14 & 1) == 0)
    {

      return 0;
    }
  }
  id v16 = [v7 code];

  return v16 == (id)5;
}

uint64_t sub_100076E70()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100076EA8()
{
  return sub_100076054(*(void *)(v0 + 16));
}

uint64_t sub_100076EB0()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100076EE8()
{
  return sub_100076164();
}

uint64_t sub_100076EF0()
{
  return sub_100075D8C();
}

uint64_t sub_100076F00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = swift_beginAccess();
  uint64_t v7 = *(void *)(v3 + 40);
  uint64_t v8 = *(void *)(v7 + 16);
  if (v8)
  {
    unint64_t v9 = 0;
    for (unint64_t i = (void *)(v7 + 40); *(i - 1) != a2 || *i != a3; i += 3)
    {
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if (result) {
        break;
      }
      if (v8 == ++v9) {
        return result;
      }
    }
    swift_beginAccess();
    sub_100113B80(v9);
    swift_endAccess();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100076FD4()
{
  swift_beginAccess();
  *(void *)(v0 + 40) = _swiftEmptyArrayStorage;
  return swift_bridgeObjectRelease();
}

unint64_t sub_100077018(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t result = sub_10010B444();
  unint64_t v7 = result + 1024;
  if (result >= 0xFFFFFFFFFFFFFC00)
  {
    __break(1u);
  }
  else
  {
    swift_beginAccess();
    swift_bridgeObjectRetain();
    sub_100067D60();
    uint64_t v8 = *(void *)(*(void *)(v3 + 40) + 16);
    sub_100067E04(v8);
    uint64_t v9 = *(void *)(v3 + 40);
    *(void *)(v9 + 16) = v8 + 1;
    uint64_t v10 = (void *)(v9 + 24 * v8);
    v10[4] = a2;
    v10[5] = a3;
    void v10[6] = v7;
    return swift_endAccess();
  }
  return result;
}

uint64_t sub_1000770C4(uint64_t result)
{
  if (result < 0)
  {
LABEL_9:
    __break(1u);
  }
  else
  {
    uint64_t v2 = result;
    unint64_t result = swift_beginAccess();
    for (uint64_t i = *(void *)(v1 + 40); *(void *)(i + 16) && v2 >= 1; uint64_t i = *(void *)(v1 + 40))
    {
      uint64_t v4 = *(void *)(i + 48);
      swift_bridgeObjectRetain();
      sub_1000E45A4();
      unint64_t result = swift_bridgeObjectRelease();
      if (v4 < 0)
      {
        __break(1u);
        goto LABEL_9;
      }
      v2 -= v4;
    }
  }
  return result;
}

void *sub_100077168()
{
  unint64_t result = v0;
  v0[4] = 0;
  v0[5] = &_swiftEmptyArrayStorage;
  v0[2] = 0;
  v0[3] = 0;
  return result;
}

uint64_t sub_100077180()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_100077188()
{
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1000771B0()
{
  sub_100077188();

  return _swift_deallocClassInstance(v0, 48, 7);
}

uint64_t type metadata accessor for QCCritbitOptimized()
{
  return self;
}

uint64_t sub_100077208()
{
  uint64_t v0 = sub_100077500((SEL *)&selRef_compressedDataUsingAlgorithm_error_);
  sub_1000E4684(v0);

  return swift_release();
}

void sub_100077370()
{
}

uint64_t sub_1000773AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v7 = sub_100077500((SEL *)&selRef_decompressedDataUsingAlgorithm_error_);
  LOBYTE(a4) = a4(a1, a2, v7);
  swift_release();
  return a4 & 1;
}

uint64_t sub_100077500(SEL *a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = type metadata accessor for CachedResultSet.Result(0);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v23 - v8;
  uint64_t v10 = (uint64_t)v1 + OBJC_IVAR____TtC7parsecd15CachedResultSet_result;
  sub_1000778C0(v10, (uint64_t)&v23 - v8);
  uint64_t v11 = (uint64_t *)(v10 + *(int *)(v4 + 40));
  uint64_t v12 = *v11;
  unint64_t v13 = v11[1];
  sub_100027BCC(*v11, v13);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_1000291B4(v12, v13);
  id v23 = 0;
  id v15 = objc_msgSend(isa, *a1, 1, &v23);

  if (v15)
  {
    id v16 = v23;
    uint64_t v17 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v19 = v18;

    unint64_t v20 = &v9[*(int *)(v4 + 40)];
    sub_1000291B4(*(void *)v20, *((void *)v20 + 1));
    *(void *)unint64_t v20 = v17;
    *((void *)v20 + 1) = v19;
    sub_1000778C0((uint64_t)v9, (uint64_t)v7);
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = 0;
    sub_100077980((uint64_t)v7, v3 + OBJC_IVAR____TtC7parsecd15CachedResultSet_result);
  }
  else
  {
    id v21 = v23;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  sub_100077924((uint64_t)v9);
  return v3;
}

uint64_t type metadata accessor for QCCritbitCompressed()
{
  return self;
}

void *sub_100077758(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for QCCritbitOptimized.HistoryItem(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  return a1;
}

void *assignWithTake for QCCritbitOptimized.HistoryItem(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  return a1;
}

uint64_t getEnumTagSinglePayload for QCCritbitOptimized.HistoryItem(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 24))
    {
      LODWORD(vsub_100034730((uint64_t)"SIGTERM", 7, 2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(vsub_100034730((uint64_t)"SIGTERM", 7, 2) = -1;
      }
    }
  }
  else
  {
    LODWORD(vsub_100034730((uint64_t)"SIGTERM", 7, 2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for QCCritbitOptimized.HistoryItem(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for QCCritbitOptimized.HistoryItem()
{
  return &type metadata for QCCritbitOptimized.HistoryItem;
}

uint64_t sub_1000778B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000773AC(a1, a2, a3, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16));
}

uint64_t sub_1000778C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CachedResultSet.Result(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100077924(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CachedResultSet.Result(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100077980(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CachedResultSet.Result(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1000779E4()
{
  qword_100236AF8 = (uint64_t)&off_1001F9DC8;
}

void sub_1000779F8()
{
  qword_100236B00 = (uint64_t)&off_1001F9F30;
}

unint64_t sub_100077AC0()
{
  return 0xD000000000000010;
}

uint64_t sub_100077ADC()
{
  return 0x656372756F736572;
}

const char *sub_100077B00()
{
  return sub_10003065C(*v0);
}

uint64_t sub_100077B20(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v8 = v6;
  uint64_t v58 = a4;
  uint64_t v59 = a6;
  HIDWORD(v56) = a5;
  uint64_t v57 = a3;
  int v62 = a2;
  uint64_t v10 = sub_10002572C((uint64_t *)&unk_100219728);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  uint64_t v61 = (uint64_t)&v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v13 = sub_100028404();
  sub_100020C48();
  uint64_t v15 = v14;
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v55 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = (os_unfair_lock_s *)(v6 + 16);
  swift_weakInit();
  sub_10002425C();
  *(void *)(v6 + 64) = _swiftEmptyArrayStorage;
  *(void *)(v6 + 7sub_100034730((uint64_t)"SIGTERM", 7, 2) = 0;
  *(unsigned char *)(v6 + 81) = 0;
  sub_100023FA0(0, (unint64_t *)&qword_1002192B0);
  sub_10002A46C(0x80000001001B0C20);
  sub_10002C0F4();
  *(void *)(v6 + 88) = OS_os_log.init(subsystem:category:)();
  sub_100023E18();
  uint64_t v21 = v6 + *(void *)(v20 + 136);
  uint64_t v22 = type metadata accessor for OSSignpostID();
  sub_10002538C(v21, 1, 1, v22);
  sub_100023E18();
  uint64_t v24 = *(void *)(v23 + 152);
  type metadata accessor for Locker();
  swift_allocObject();
  unint64_t v25 = (_DWORD *)sub_1000283B8();
  *(void *)(v21 + 16) = v25;
  *unint64_t v25 = 0;
  *(void *)(v8 + v24) = v21;
  Date.init()();
  sub_100023E18();
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(v8 + *(void *)(v26 + 144), v18, v13);
  swift_weakAssign();
  uint64_t v27 = sub_100026018();
  swift_retain();
  OSSignpostID.init(log:object:)();
  uint64_t v60 = v22;
  sub_10002538C(v7, 0, 1, v22);
  sub_100023E18();
  uint64_t v29 = v8 + *(void *)(v28 + 136);
  swift_beginAccess();
  sub_1000327AC(v7, v29);
  swift_endAccess();
  uint64_t v63 = v8;
  swift_retain();
  String.init<A>(describing:)();
  sub_10002CD98();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v27 = (void *)Strong;
    uint64_t v55 = v29;
    sub_1000249DC();
    uint64_t v31 = *(void *)(a1 + 40);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v32 = sub_100039E78(v22, v7, v31);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    if (v32)
    {
      swift_getObjectType();
      sub_1000184C0();
      uint64_t v33 = sub_100028CD4();
      v34(v33);
    }
    swift_unknownObjectRelease();
    uint64_t v29 = v55;
  }
  type metadata accessor for ActivityMonitor.WeakReference();
  uint64_t v35 = swift_allocObject();
  sub_10002AC28(v35);
  v27[3] = &off_100200DC0;
  swift_unknownObjectWeakAssign();
  sub_100027064();
  uint64_t v36 = swift_bridgeObjectRetain();
  sub_1000251DC(v36, v37, v38, v39, v40, v41, v42, v43, v55, v56);
  swift_endAccess();
  swift_bridgeObjectRelease();
  os_unfair_lock_unlock(v19);
  swift_bridgeObjectRelease();
  if (swift_unknownObjectWeakLoadStrong())
  {
    swift_getObjectType();
    sub_100016534();
    uint64_t v44 = sub_100021220();
    v45(v44);
    swift_release();
    swift_unknownObjectRelease();
  }
  else
  {
    swift_release();
  }
  uint64_t v47 = v60;
  uint64_t v46 = v61;
  sub_100006858(v29, v61);
  uint64_t result = sub_100027BA4(v46, 1, v47);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    id v49 = *(id *)(v8 + 88);
    uint64_t v50 = static os_signpost_type_t.begin.getter();
    uint64_t v51 = sub_10003065C(v62);
    LOBYTE(v54) = BYTE4(v56);
    sub_10001BB64(v50, (uint64_t)v49, (uint64_t)v51, v52, 2, v46, v57, v58, v54, v59);

    swift_bridgeObjectRelease();
    sub_10000E004();
    sub_10000E040();
    v53();
    swift_release();
    return v8;
  }
  return result;
}

uint64_t sub_100078000(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v51 = a6;
  int v50 = a5;
  uint64_t v48 = a3;
  uint64_t v49 = a4;
  int v55 = a2;
  uint64_t v53 = a1;
  uint64_t v8 = sub_10002572C((uint64_t *)&unk_100219728);
  __chkstk_darwin(v8 - 8);
  sub_10000E020(v9, v46);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v46 - v11;
  uint64_t v54 = type metadata accessor for Date();
  sub_100020C48();
  uint64_t v14 = v13;
  __chkstk_darwin(v15);
  sub_100016550();
  swift_weakInit();
  sub_10002425C();
  *(void *)(v6 + 64) = _swiftEmptyArrayStorage;
  *(void *)(v6 + 7sub_100034730((uint64_t)"SIGTERM", 7, 2) = 0;
  *(unsigned char *)(v6 + 81) = 0;
  sub_100023FA0(0, (unint64_t *)&qword_1002192B0);
  sub_10002A46C((uint64_t)off_10021E6A8);
  sub_10002C0F4();
  swift_bridgeObjectRetain();
  uint64_t v16 = v53;
  *(void *)(v6 + 88) = OS_os_log.init(subsystem:category:)();
  sub_100023E18();
  uint64_t v18 = v6 + *(void *)(v17 + 136);
  uint64_t v19 = type metadata accessor for OSSignpostID();
  sub_10002538C(v18, 1, 1, v19);
  sub_100023E18();
  type metadata accessor for Locker();
  swift_allocObject();
  uint64_t v20 = (_DWORD *)sub_1000283B8();
  sub_100024FDC(v20);
  sub_100023E18();
  uint64_t v22 = sub_10002430C(*(void *)(v21 + 144));
  v23(v22);
  swift_weakAssign();
  uint64_t v24 = sub_100026018();
  swift_retain();
  OSSignpostID.init(log:object:)();
  sub_10002538C((uint64_t)v12, 0, 1, v19);
  sub_100023E18();
  sub_10000E10C();
  sub_1000327AC((uint64_t)v12, v14);
  swift_endAccess();
  uint64_t v56 = v7;
  swift_retain();
  uint64_t v25 = String.init<A>(describing:)();
  uint64_t v27 = v26;
  uint64_t v28 = *(os_unfair_lock_s **)(*(void *)(v16 + 32) + 16);
  os_unfair_lock_lock(v28);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v24 = (void *)Strong;
    uint64_t v47 = v14;
    uint64_t v54 = v19;
    sub_1000249DC();
    uint64_t v30 = *(void *)(v16 + 40);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v31 = sub_100039E78(v25, v27, v30);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    if (v31)
    {
      swift_getObjectType();
      sub_1000184C0();
      uint64_t v32 = sub_100028CD4();
      v33(v32);
    }
    swift_unknownObjectRelease();
    uint64_t v19 = v54;
    uint64_t v14 = v47;
  }
  type metadata accessor for ActivityMonitor.WeakReference();
  uint64_t v34 = swift_allocObject();
  sub_10002AC28(v34);
  void v24[3] = &off_100200DC0;
  swift_unknownObjectWeakAssign();
  sub_100027064();
  swift_bridgeObjectRetain();
  sub_100030368((uint64_t)v24, v25, v27, v35, v36, v37, v38, v39, v46, v47);
  swift_endAccess();
  swift_bridgeObjectRelease();
  os_unfair_lock_unlock(v28);
  swift_bridgeObjectRelease();
  if (swift_unknownObjectWeakLoadStrong())
  {
    swift_getObjectType();
    sub_100016534();
    uint64_t v40 = sub_100021220();
    v41(v40);
    swift_release();
    swift_unknownObjectRelease();
  }
  else
  {
    swift_release();
  }
  uint64_t v42 = v52;
  sub_100006858(v14, v52);
  uint64_t result = sub_100027BA4(v42, 1, v19);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    id v44 = *(id *)(v7 + 88);
    sub_100078D60(v42, (uint64_t)v44, v48, v49, v50, v51, v55);

    swift_bridgeObjectRelease();
    sub_10000E004();
    sub_10000E040();
    v45();
    swift_release();
    return v7;
  }
  return result;
}

uint64_t sub_100078494(uint64_t a1, char a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  uint64_t v9 = v6;
  uint64_t v10 = sub_10002572C((uint64_t *)&unk_100219728);
  __chkstk_darwin(v10 - 8);
  sub_10000E020(v11, v49);
  __chkstk_darwin(v12);
  sub_100028404();
  sub_100020C48();
  uint64_t v14 = v13;
  __chkstk_darwin(v15);
  sub_100016550();
  swift_weakInit();
  sub_10002425C();
  *(void *)(v6 + 64) = _swiftEmptyArrayStorage;
  *(void *)(v6 + 7sub_100034730((uint64_t)"SIGTERM", 7, 2) = 0;
  *(unsigned char *)(v6 + 81) = 0;
  sub_100023FA0(0, (unint64_t *)&qword_1002192B0);
  sub_10002A46C((uint64_t)off_10021E9E0);
  sub_10002C0F4();
  uint64_t v17 = v16;
  swift_bridgeObjectRetain();
  *(void *)(v6 + 88) = OS_os_log.init(subsystem:category:)();
  sub_100023E18();
  uint64_t v19 = v6 + *(void *)(v18 + 136);
  uint64_t v20 = type metadata accessor for OSSignpostID();
  sub_10002538C(v19, 1, 1, v20);
  sub_100023E18();
  type metadata accessor for Locker();
  swift_allocObject();
  uint64_t v21 = (_DWORD *)sub_1000283B8();
  sub_100024FDC(v21);
  sub_100023E18();
  uint64_t v23 = sub_10002430C(*(void *)(v22 + 144));
  v24(v23);
  swift_weakAssign();
  uint64_t v25 = sub_100026018();
  swift_retain();
  OSSignpostID.init(log:object:)();
  sub_10002538C(v8, 0, 1, v20);
  sub_100023E18();
  sub_10000E10C();
  sub_1000327AC(v8, v14);
  swift_endAccess();
  swift_retain();
  String.init<A>(describing:)();
  sub_10002CD98();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v25 = (void *)Strong;
    uint64_t v51 = v14;
    sub_1000249DC();
    uint64_t v27 = *(void *)(a1 + 40);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v28 = sub_100039E78(v17, v8, v27);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    if (v28)
    {
      swift_getObjectType();
      sub_1000184C0();
      uint64_t v29 = sub_100028CD4();
      v30(v29);
    }
    swift_unknownObjectRelease();
  }
  type metadata accessor for ActivityMonitor.WeakReference();
  uint64_t v31 = swift_allocObject();
  sub_10002AC28(v31);
  v25[3] = &off_100200DC0;
  swift_unknownObjectWeakAssign();
  sub_100027064();
  uint64_t v32 = swift_bridgeObjectRetain();
  sub_1000251DC(v32, v33, v34, v35, v36, v37, v38, v39, v50, v51);
  swift_endAccess();
  swift_bridgeObjectRelease();
  os_unfair_lock_unlock(v7);
  swift_bridgeObjectRelease();
  if (swift_unknownObjectWeakLoadStrong())
  {
    swift_getObjectType();
    sub_100016534();
    uint64_t v40 = sub_100021220();
    v41(v40);
    swift_release();
    swift_unknownObjectRelease();
  }
  else
  {
    swift_release();
  }
  sub_100006858(v14, v56);
  uint64_t result = sub_100027BA4(v56, 1, v20);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    id v43 = *(id *)(v9 + 88);
    uint64_t v44 = static os_signpost_type_t.begin.getter();
    if (a2)
    {
      if (a2 == 1)
      {
        uint64_t v45 = "contextUpdate";
        uint64_t v46 = 13;
      }
      else
      {
        uint64_t v45 = "notBagFetchable";
        uint64_t v46 = 15;
      }
    }
    else
    {
      uint64_t v45 = "lifetime";
      uint64_t v46 = 8;
    }
    LOBYTE(v48) = a5;
    sub_10001BB64(v44, (uint64_t)v43, (uint64_t)v45, v46, 2, v56, a3, a4, v48, a6);

    swift_bridgeObjectRelease();
    sub_10000E004();
    sub_10000E040();
    v47();
    swift_release();
    return v9;
  }
  return result;
}

uint64_t sub_100078944()
{
  swift_release();
  uint64_t v1 = v0 + qword_100236B18;
  type metadata accessor for Client();
  sub_10000E004();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8);

  return v4(v1, v2);
}

uint64_t sub_1000789BC()
{
  uint64_t result = type metadata accessor for Client();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_100078A74()
{
  static os_log_type_t.error.getter();
  os_log(_:dso:log:type:_:)();
  sub_100114DB0();
  static os_log_type_t.error.getter();
  sub_10002572C((uint64_t *)&unk_10021BB00);
  uint64_t v1 = sub_10002C214();
  *(_OWORD *)(v1 + 16) = xmmword_1001A2A20;
  uint64_t v2 = String.init<A>(describing:)();
  uint64_t v4 = v3;
  *(void *)(v1 + 56) = &type metadata for String;
  unint64_t v5 = sub_1000303C8();
  *(void *)(v1 + 64) = v5;
  *(void *)(v1 + 3sub_100034730((uint64_t)"SIGTERM", 7, 2) = v2;
  *(void *)(v1 + 40) = v4;
  sub_10001DD64();
  swift_bridgeObjectRelease();
  static os_log_type_t.error.getter();
  uint64_t v6 = sub_10002C214();
  *(_OWORD *)(v6 + 16) = xmmword_1001A2A20;
  sub_10002572C(&qword_10021B9B8);
  uint64_t v7 = String.init<A>(describing:)();
  *(void *)(v6 + 56) = &type metadata for String;
  *(void *)(v6 + 64) = v5;
  *(void *)(v6 + 3sub_100034730((uint64_t)"SIGTERM", 7, 2) = v7;
  *(void *)(v6 + 40) = v8;
  sub_10001DD64();
  swift_bridgeObjectRelease();
  static os_log_type_t.error.getter();
  uint64_t v9 = sub_10002C214();
  uint64_t v10 = *(void *)(v0 + qword_100236B08);
  *(_OWORD *)(v9 + 16) = xmmword_1001A2A20;
  BOOL v11 = v10 == 0;
  uint64_t v12 = 7562617;
  if (v11) {
    uint64_t v12 = 28526;
  }
  unint64_t v13 = 0xE300000000000000;
  *(void *)(v9 + 56) = &type metadata for String;
  *(void *)(v9 + 64) = v5;
  if (v11) {
    unint64_t v13 = 0xE200000000000000;
  }
  *(void *)(v9 + 3sub_100034730((uint64_t)"SIGTERM", 7, 2) = v12;
  *(void *)(v9 + 40) = v13;
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  static os_log_type_t.error.getter();
  return os_log(_:dso:log:type:_:)();
}

unint64_t sub_100078C98(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100078CC8();
  unint64_t result = sub_100078D14();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_100078CC8()
{
  unint64_t result = qword_10021B998;
  if (!qword_10021B998)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10021B998);
  }
  return result;
}

unint64_t sub_100078D14()
{
  unint64_t result = qword_10021B9A0;
  if (!qword_10021B9A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10021B9A0);
  }
  return result;
}

void sub_100078D60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, char a7)
{
  uint64_t v14 = static os_signpost_type_t.begin.getter();
  uint64_t v15 = 8;
  uint64_t v16 = "lifetime";
  switch(a7)
  {
    case 1:
      uint64_t v16 = "cacheAccess";
      uint64_t v15 = 11;
      break;
    case 2:
      uint64_t v16 = "cacheWrite";
      uint64_t v15 = 10;
      break;
    case 3:
      uint64_t v16 = "resultLifetime";
      uint64_t v15 = 14;
      break;
    default:
      break;
  }
  LOBYTE(v17) = a5;
  sub_10001BB64(v14, a2, (uint64_t)v16, v15, 2, a1, a3, a4, v17, a6);
}

uint64_t sub_100078E48(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 7sub_100034730((uint64_t)"SIGTERM", 7, 2) = os_transaction_create();
  return swift_unknownObjectRelease();
}

uint64_t sub_100078E84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    _StringGuts._slowWithCString<A>(_:)();
    return swift_release();
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((a1 & 0x1000000000000000) != 0)
    {
      uint64_t v5 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
      uint64_t v6 = a1 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      uint64_t v5 = _StringObject.sharedUTF8.getter();
    }
    sub_100078FBC(v5, v6, (uint64_t (*)(void))sub_100078FA0);
    return swift_release();
  }
  *(void *)(a3 + 7sub_100034730((uint64_t)"SIGTERM", 7, 2) = os_transaction_create();
  swift_release();
  return swift_unknownObjectRelease();
}

uint64_t sub_100078FA0(uint64_t a1)
{
  return sub_100078E48(a1, v1);
}

uint64_t sub_100078FBC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

uint64_t sub_100078FE4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = sub_10002572C((uint64_t *)&unk_10021B9C0);
  __chkstk_darwin(v2 - 8);
  sub_10000DFD0();
  uint64_t v5 = v4 - v3;
  uint64_t v6 = sub_10002572C((uint64_t *)&unk_10021D010);
  __chkstk_darwin(v6 - 8);
  sub_10000DFD0();
  uint64_t v9 = v8 - v7;
  uint64_t v10 = type metadata accessor for URLComponents();
  sub_100020C48();
  uint64_t v12 = v11;
  __chkstk_darwin(v13);
  sub_10000DFD0();
  uint64_t v16 = v15 - v14;
  uint64_t v17 = sub_10002572C(&qword_10021BB20);
  __chkstk_darwin(v17 - 8);
  sub_10000DFD0();
  uint64_t v20 = v19 - v18;
  uint64_t v21 = type metadata accessor for URL();
  sub_100020C48();
  uint64_t v23 = v22;
  __chkstk_darwin(v24);
  sub_10000DFD0();
  uint64_t v27 = v26 - v25;
  URLRequest.url.getter();
  if (sub_100027BA4(v20, 1, v21) == 1)
  {
    uint64_t v28 = &qword_10021BB20;
    uint64_t v29 = v20;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 32))(v27, v20, v21);
    URLComponents.init(url:resolvingAgainstBaseURL:)();
    if (sub_100027BA4(v9, 1, v10) == 1)
    {
      uint64_t v30 = sub_100026970();
      v31(v30);
      uint64_t v28 = (uint64_t *)&unk_10021D010;
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))(v16, v9, v10);
      uint64_t v34 = URLComponents.queryItems.getter();
      if (!v34 || (uint64_t v35 = v34, swift_bridgeObjectRetain(), (v36 = sub_100079338(v35, a1, a2)) == 0))
      {
        uint64_t v42 = sub_100027510();
        v43(v42);
        uint64_t v44 = sub_100026970();
        v45(v44);
        return 0;
      }
      uint64_t v9 = v5;
      sub_1000BDDF8(v36, v5);
      swift_bridgeObjectRelease();
      uint64_t v37 = type metadata accessor for URLQueryItem();
      if (sub_100027BA4(v5, 1, v37) != 1)
      {
        uint64_t v32 = URLQueryItem.value.getter();
        uint64_t v46 = sub_100027510();
        v47(v46);
        uint64_t v48 = sub_100026970();
        v49(v48);
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v37 - 8) + 8))(v5, v37);
        return v32;
      }
      uint64_t v38 = sub_100027510();
      v39(v38);
      uint64_t v40 = sub_100026970();
      v41(v40);
      uint64_t v28 = (uint64_t *)&unk_10021B9C0;
    }
    uint64_t v29 = v9;
  }
  sub_100019938(v29, v28);
  return 0;
}

uint64_t sub_100079338(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v34 = type metadata accessor for URLQueryItem();
  uint64_t v7 = __chkstk_darwin(v34);
  uint64_t v33 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v7);
  uint64_t v12 = (char *)&v25 - v11;
  uint64_t v13 = _swiftEmptyArrayStorage;
  uint64_t v35 = _swiftEmptyArrayStorage;
  uint64_t v31 = *(void *)(a1 + 16);
  if (!v31)
  {
LABEL_18:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (uint64_t)v13;
  }
  unint64_t v14 = 0;
  uint64_t v28 = a1;
  uint64_t v29 = v10 + 16;
  uint64_t v25 = v3;
  uint64_t v26 = (uint64_t (**)(char *, uint64_t))(v10 + 8);
  uint64_t v32 = (void (**)(char *, char *, uint64_t))(v10 + 32);
  uint64_t v27 = a2;
  uint64_t v30 = v10;
  while (v14 < *(void *)(a1 + 16))
  {
    unint64_t v15 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    uint64_t v16 = *(void *)(v10 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v10 + 16))(v12, a1 + v15 + v16 * v14, v34);
    if (URLQueryItem.name.getter() == a2 && v17 == a3)
    {
      swift_bridgeObjectRelease();
LABEL_11:
      uint64_t v20 = a3;
      uint64_t v21 = *v32;
      (*v32)(v33, v12, v34);
      uint64_t v22 = v35;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000EE4E4(0, v22[2] + 1, 1);
        uint64_t v22 = v35;
      }
      unint64_t v24 = v22[2];
      unint64_t v23 = v22[3];
      if (v24 >= v23 >> 1)
      {
        sub_1000EE4E4(v23 > 1, v24 + 1, 1);
        uint64_t v22 = v35;
      }
      v22[2] = v24 + 1;
      uint64_t result = ((uint64_t (*)(char *, char *, uint64_t))v21)((char *)v22 + v15 + v24 * v16, v33, v34);
      uint64_t v35 = v22;
      a3 = v20;
      a2 = v27;
      a1 = v28;
      goto LABEL_16;
    }
    char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v19) {
      goto LABEL_11;
    }
    uint64_t result = (*v26)(v12, v34);
LABEL_16:
    ++v14;
    uint64_t v10 = v30;
    if (v31 == v14)
    {
      uint64_t v13 = v35;
      goto LABEL_18;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1000795E8(uint64_t a1)
{
  [v1 setDelegate:a1];

  return swift_unknownObjectRelease();
}

id sub_100079634()
{
  return [v0 requestLocation];
}

void sub_100079644(uint64_t a1)
{
}

void sub_100079650(uint64_t a1)
{
}

void sub_10007965C(uint64_t a1)
{
}

uint64_t sub_100079668(uint64_t a1, uint64_t a2)
{
  return sub_10007968C(a1, a2, &OBJC_IVAR____TtC7parsecd15LocationManager_geoLocationLatLng);
}

uint64_t sub_100079674(uint64_t a1, uint64_t a2)
{
  return sub_10007968C(a1, a2, &OBJC_IVAR____TtC7parsecd15LocationManager_geoLocationSource);
}

uint64_t sub_100079680(uint64_t a1, uint64_t a2)
{
  return sub_10007968C(a1, a2, &OBJC_IVAR____TtC7parsecd15LocationManager_lookupGeoLocationLatLng);
}

uint64_t sub_10007968C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = (void *)(v3 + *a3);
  *uint64_t v4 = a1;
  v4[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000796A4()
{
  swift_retain();
  uint64_t v0 = sub_1000808A0();
  swift_release();
  return v0;
}

uint64_t sub_1000796E8(int a1)
{
  swift_retain();
  sub_100082224(a1);

  return swift_release();
}

uint64_t sub_100079738()
{
  if (!swift_unknownObjectWeakLoadStrong()) {
    return 0;
  }
  sub_100017C74();
  swift_unknownObjectRelease();
  sub_100018148(0, 0);
  uint64_t v0 = (void *)sub_100016A0C();
  swift_unknownObjectRelease();
  if (!v0) {
    return 0;
  }

  return sub_10007D80C(v0);
}

uint64_t sub_1000797D0(char a1)
{
  uint64_t result = 7565415;
  switch(a1)
  {
    case 1:
      uint64_t result = 1819043171;
      break;
    case 2:
      uint64_t result = 1768319351;
      break;
    case 3:
      uint64_t result = 0x6E776F6E6B6E75;
      break;
    case 4:
      uint64_t result = 0x6F6E676162;
      break;
    case 5:
      uint64_t result = 0x6F6E2E72657375;
      break;
    case 6:
      uint64_t result = 2003790963;
      break;
    case 7:
      uint64_t result = 0x6E692E726F727265;
      break;
    case 8:
      uint64_t result = sub_10002540C();
      break;
    case 9:
      uint64_t result = 0x6E752E726F727265;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1000798F4()
{
  swift_retain();
  sub_1000808DC();

  return swift_release();
}

uint64_t sub_100079944(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Date();
  sub_100020C48();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  sub_100016550();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v1, a1, v3);
  swift_retain();
  sub_100082270();
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(a1, v3);
}

uint64_t sub_100079A14()
{
  type metadata accessor for DispatchPredicate();
  sub_100020C48();
  __chkstk_darwin(v2);
  sub_100016500();
  uint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC7parsecd15LocationManager_updateQueue);
  void *v1 = v3;
  sub_100023D14();
  v4();
  id v5 = v3;
  _dispatchPreconditionTest(_:)();
  uint64_t v6 = sub_100026420();
  uint64_t result = v7(v6);
  if (v3) {
    return sub_100079ADC();
  }
  __break(1u);
  return result;
}

BOOL sub_100079ADC()
{
  uint64_t v1 = type metadata accessor for Date();
  sub_100020C48();
  uint64_t v3 = v2;
  __chkstk_darwin(v4);
  sub_100016500();
  if (sub_1000796A4() - 3 > 1) {
    return 0;
  }
  sub_1000798F4();
  Date.timeIntervalSinceNow.getter();
  double v6 = v5;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0, v1);
  return fabs(v6) >= 60.0;
}

void sub_100079BA4()
{
}

id sub_100079BC8()
{
  uint64_t v1 = *(NSObject **)&v0[OBJC_IVAR____TtC7parsecd15LocationManager_updateQueue];
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = v0;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = sub_10007DA00;
  *(void *)(v3 + 24) = v2;
  void aBlock[4] = sub_100017874;
  aBlock[5] = v3;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  uint64_t aBlock[2] = sub_100017848;
  id aBlock[3] = &unk_1001FD0C8;
  uint64_t v4 = _Block_copy(aBlock);
  double v5 = v0;
  swift_retain();
  swift_release();
  dispatch_sync(v1, v4);
  _Block_release(v4);
  LOBYTE(v1) = swift_isEscapingClosureAtFileLocation();
  id result = (id)swift_release();
  if (v1)
  {
    __break(1u);
  }
  else
  {
    swift_release();
    v7.receiver = v5;
    v7.super_class = (Class)type metadata accessor for LocationManager();
    return objc_msgSendSuper2(&v7, "dealloc");
  }
  return result;
}

uint64_t sub_100079E68()
{
  return type metadata accessor for LocationManager();
}

uint64_t type metadata accessor for LocationManager()
{
  uint64_t result = qword_10021BA60;
  if (!qword_10021BA60) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100079EB8()
{
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  sub_100020C48();
  uint64_t v4 = v3;
  __chkstk_darwin(v5);
  sub_100016550();
  double v6 = *(void **)&v0[OBJC_IVAR____TtC7parsecd15LocationManager_updateQueue];
  void *v1 = v6;
  sub_100023D14();
  v7();
  id v8 = v6;
  char v9 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v4 + 8))(v1, v2);
  if ((v9 & 1) == 0)
  {
    __break(1u);
LABEL_11:
    swift_once();
    goto LABEL_6;
  }
  uint64_t v10 = &v0[OBJC_IVAR____TtC7parsecd15LocationManager_locationService];
  if (*(void *)&v0[OBJC_IVAR____TtC7parsecd15LocationManager_locationService]) {
    return;
  }
  objc_allocWithZone((Class)CLLocationManager);
  id v11 = v8;
  uint64_t v12 = v0;
  id v13 = sub_10007D690(0xD000000000000034, 0x80000001001B4770, (uint64_t)v0, v8);
  if (v13)
  {
    unint64_t v14 = v13;
    [v13 setDynamicAccuracyReductionEnabled:1];
    [v14 setDesiredAccuracy:kCLLocationAccuracyKilometer];
    *(void *)uint64_t v10 = v14;
    *((void *)v10 + 1) = &off_1001FCF10;
    swift_unknownObjectRelease();
    return;
  }
  if (qword_100218B78 != -1) {
    goto LABEL_11;
  }
LABEL_6:
  uint64_t v15 = type metadata accessor for Logger();
  uint64_t v16 = sub_10001DD88(v15, (uint64_t)qword_100236A80);
  os_log_type_t v17 = static os_log_type_t.error.getter();
  if (sub_1000165B4(v17))
  {
    uint64_t v18 = (_WORD *)sub_100023E24();
    sub_10002B114(v18);
    sub_10000E130((void *)&_mh_execute_header, v16, v19, "Exception initializing CLLocationManager");
    sub_100017D40();
  }
}

uint64_t sub_10007A0B0()
{
  type metadata accessor for DispatchPredicate();
  sub_100020C48();
  __chkstk_darwin(v2);
  sub_100016500();
  uint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC7parsecd15LocationManager_updateQueue);
  void *v1 = v3;
  sub_100023D14();
  v4();
  id v5 = v3;
  _dispatchPreconditionTest(_:)();
  uint64_t v6 = sub_100026420();
  uint64_t result = v7(v6);
  if (v3)
  {
    char v9 = (void *)(v0 + OBJC_IVAR____TtC7parsecd15LocationManager_locationService);
    if (*(void *)(v0 + OBJC_IVAR____TtC7parsecd15LocationManager_locationService))
    {
      uint64_t v10 = v9[1];
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v12 = *(void (**)(void, uint64_t, uint64_t))(v10 + 16);
      swift_unknownObjectRetain();
      v12(0, ObjectType, v10);
      swift_unknownObjectRelease();
    }
    *char v9 = 0;
    v9[1] = 0;
    return swift_unknownObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_10007A1D8()
{
  sub_10000DFE0();
  uint64_t v1 = Notification.userInfo.getter();
  if (!v1)
  {
    long long v20 = 0u;
    long long v21 = 0u;
    goto LABEL_5;
  }
  uint64_t v2 = v1;
  void v19[6] = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v19[7] = v3;
  AnyHashable.init<A>(_:)();
  sub_100039D58((uint64_t)v19, v2, &v20);
  swift_bridgeObjectRelease();
  sub_100039C5C((uint64_t)v19);
  if (!*((void *)&v21 + 1))
  {
LABEL_5:
    sub_1000255D4((uint64_t)&v20, (uint64_t *)&unk_10021BB30);
    goto LABEL_6;
  }
  sub_1000255D4((uint64_t)&v20, (uint64_t *)&unk_10021BB30);
  void v18[3] = *(void *)(v0 + OBJC_IVAR____TtC7parsecd15LocationManager_updateQueue);
  uint64_t v4 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v19[4] = sub_10007D9F8;
  void v19[5] = v4;
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 1107296256;
  v19[2] = sub_1000085EC;
  v19[3] = &unk_1001FD050;
  id v5 = _Block_copy(v19);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  v18[2] = v18;
  sub_100020C48();
  uint64_t v8 = v7;
  __chkstk_darwin(v9);
  id v11 = (char *)v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v12 = type metadata accessor for DispatchWorkItemFlags();
  v18[1] = v18;
  sub_100020C48();
  uint64_t v14 = v13;
  __chkstk_darwin(v15);
  os_log_type_t v17 = (char *)v18 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v20 = _swiftEmptyArrayStorage;
  sub_10003045C();
  sub_10002572C((uint64_t *)&unk_10021BAF0);
  sub_1000301A0();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v5);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v12);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v6);
  swift_release();
  swift_release();
LABEL_6:
  sub_10000DFB8();
}

void sub_10007A4B8()
{
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    uint64_t v1 = (char *)Strong;
    uint64_t v2 = sub_100079738();
    if (!v2)
    {
LABEL_7:

      return;
    }
    uint64_t v3 = *(void *)(v2 + 16);
    swift_bridgeObjectRelease();
    if (v3)
    {
      uint64_t v4 = *(void **)&v1[OBJC_IVAR____TtC7parsecd15LocationManager_lastGeoLocationUpdate];
      if (v4)
      {
        id v5 = v4;
        sub_10007A708(v5);
      }
      sub_100079EB8();
      sub_10007A974();
      goto LABEL_7;
    }
    sub_10007A0B0();
    sub_10002572C((uint64_t *)&unk_10021BB00);
    uint64_t v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_1001A3830;
    *(void *)(v6 + 56) = &type metadata for String;
    unint64_t v7 = sub_1000303C8();
    *(void *)(v6 + 3sub_100034730((uint64_t)"SIGTERM", 7, 2) = 0x6F6E676162;
    *(void *)(v6 + 40) = 0xE500000000000000;
    *(void *)(v6 + 96) = &type metadata for String;
    *(void *)(v6 + 104) = v7;
    *(void *)(v6 + 64) = v7;
    *(void *)(v6 + 7sub_100034730((uint64_t)"SIGTERM", 7, 2) = 7105633;
    *(void *)(v6 + 80) = 0xE300000000000000;
    uint64_t v8 = String.init(format:_:)();
    sub_10007A5E8(v8, v9);

    swift_bridgeObjectRelease();
  }
}

uint64_t sub_10007A5E8(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = type metadata accessor for DispatchPredicate();
  sub_100020C48();
  uint64_t v8 = v7;
  __chkstk_darwin(v9);
  sub_100017DC8();
  uint64_t v10 = *(void **)(v2 + OBJC_IVAR____TtC7parsecd15LocationManager_updateQueue);
  *uint64_t v3 = v10;
  sub_100023D14();
  v11();
  id v12 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v8 + 8))(v3, v6);
  if (v10)
  {
    sub_100079644(0);
    sub_10007965C(0);
    sub_100079680(0, 0xE000000000000000);
    sub_100079668(0, 0xE000000000000000);
    swift_bridgeObjectRetain();
    return sub_100079674(a1, a2);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10007A708(void *a1)
{
  type metadata accessor for DispatchPredicate();
  sub_100020C48();
  id v5 = v4;
  __chkstk_darwin(v6);
  sub_100016550();
  uint64_t v7 = *(void **)(v1 + OBJC_IVAR____TtC7parsecd15LocationManager_updateQueue);
  *uint64_t v2 = v7;
  sub_100023D14();
  v8();
  id v9 = v7;
  _dispatchPreconditionTest(_:)();
  uint64_t v10 = sub_10002605C();
  v11(v10);
  if ((v7 & 1) == 0)
  {
    __break(1u);
LABEL_13:
    swift_once();
    goto LABEL_9;
  }
  id v5 = &selRef_isEqualToString_;
  unsigned int v12 = [a1 type] - 1;
  if (v12 > 0xC) {
    LOBYTE(vsub_100034730((uint64_t)"SIGTERM", 7, 2) = 3;
  }
  else {
    LOBYTE(vsub_100034730((uint64_t)"SIGTERM", 7, 2) = byte_1001A5938[v12];
  }
  uint64_t v13 = sub_100079738();
  if (v13)
  {
    uint64_t v14 = v13;
    uint64_t v15 = sub_1000797D0((char)v2);
    LOBYTE(vsub_100034730((uint64_t)"SIGTERM", 7, 2) = v16;
    char v17 = sub_1000887FC(v15, v16, v14);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v17) {
      return sub_10007C360(a1);
    }
  }
  if (qword_100218B78 != -1) {
    goto LABEL_13;
  }
LABEL_9:
  uint64_t v19 = type metadata accessor for Logger();
  long long v20 = sub_10001DD88(v19, (uint64_t)qword_100236A80);
  os_log_type_t v21 = static os_log_type_t.debug.getter();
  if (sub_100024328(v21))
  {
    uint64_t v22 = (uint8_t *)sub_100023E24();
    *(_WORD *)uint64_t v22 = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, (os_log_type_t)v2, "LocationManager discarded update from a disallowed source.", v22, 2u);
    sub_100017D40();
  }

  sub_10002572C((uint64_t *)&unk_10021BB00);
  uint64_t v23 = sub_100028CE4();
  *(_OWORD *)(v23 + 16) = xmmword_1001A3830;
  *(void *)(v23 + 56) = &type metadata for String;
  *(void *)(v23 + 64) = sub_1000303C8();
  *(void *)(v23 + 3sub_100034730((uint64_t)"SIGTERM", 7, 2) = 0x6F6E676162;
  *(void *)(v23 + 40) = 0xE500000000000000;
  unsigned int v24 = [a1 v5[121]];
  *(void *)(v23 + 96) = &type metadata for UInt32;
  *(void *)(v23 + 104) = &protocol witness table for UInt32;
  *(_DWORD *)(v23 + 7sub_100034730((uint64_t)"SIGTERM", 7, 2) = v24;
  uint64_t v25 = String.init(format:_:)();
  sub_10007A5E8(v25, v26);
  return swift_bridgeObjectRelease();
}

void sub_10007A974()
{
  sub_10000DFE0();
  char v4 = v3;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v0;
  *(unsigned char *)(v5 + 24) = v4;
  void v16[4] = sub_10007D90C;
  v16[5] = v5;
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 1107296256;
  v16[2] = sub_1000085EC;
  void v16[3] = &unk_1001FCFB0;
  uint64_t v6 = _Block_copy(v16);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  sub_100020C48();
  uint64_t v9 = v8;
  __chkstk_darwin(v10);
  sub_100017DC8();
  id v11 = v0;
  static DispatchQoS.unspecified.getter();
  uint64_t v12 = type metadata accessor for DispatchWorkItemFlags();
  sub_100020C48();
  uint64_t v14 = v13;
  __chkstk_darwin(v15);
  sub_100017DE0();
  sub_10003045C();
  sub_10002572C((uint64_t *)&unk_10021BAF0);
  sub_1000301A0();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v6);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v2, v12);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v1, v7);
  swift_release();
  sub_10000DFB8();
}

void sub_10007AC4C()
{
  sub_10000DFE0();
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  sub_100020C48();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  sub_100016500();
  static DispatchWorkItemFlags.barrier.getter();
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = v0;
  v14[4] = sub_10007D9B8;
  v14[5] = v7;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 1107296256;
  void v14[2] = sub_1000085EC;
  v14[3] = &unk_1001FD000;
  uint64_t v8 = _Block_copy(v14);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  sub_100020C48();
  uint64_t v11 = v10;
  __chkstk_darwin(v12);
  sub_100017DE0();
  id v13 = v0;
  static DispatchQoS.unspecified.getter();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v8);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v2, v9);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v1, v3);
  swift_release();
  sub_10000DFB8();
}

void *sub_10007ADF4(uint64_t a1)
{
  uint64_t result = *(void **)(a1 + OBJC_IVAR____TtC7parsecd15LocationManager_geoLocation);
  if (result)
  {
    [result coordinate];
    uint64_t v3 = v2;
    uint64_t v5 = v4;
    sub_10002572C((uint64_t *)&unk_10021BB00);
    uint64_t v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_1001A3830;
    *(void *)(v6 + 56) = &type metadata for Double;
    *(void *)(v6 + 64) = &protocol witness table for Double;
    *(void *)(v6 + 3sub_100034730((uint64_t)"SIGTERM", 7, 2) = v3;
    *(void *)(v6 + 96) = &type metadata for Double;
    *(void *)(v6 + 104) = &protocol witness table for Double;
    *(void *)(v6 + 7sub_100034730((uint64_t)"SIGTERM", 7, 2) = v5;
    uint64_t v7 = String.init(format:_:)();
    return (void *)sub_100079680(v7, v8);
  }
  return result;
}

uint64_t sub_10007AF84()
{
  uint64_t v0 = sub_100106F08((uint64_t)sub_10007B11C, 0);
  uint64_t v2 = v0;
  if (v0)
  {
    uint64_t v6 = sub_10007D870(v0);
    if (v7 >> 60 != 15)
    {
      uint64_t v13 = v6;

      return v13;
    }
    if (qword_100218B78 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    uint64_t v9 = (void *)sub_10001DD88(v8, (uint64_t)qword_100236A80);
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (sub_100017D10(v10))
    {
      *(_WORD *)sub_100023E24() = 0;
      sub_100024288((void *)&_mh_execute_header, v11, v12, "nil ClientMetadata received from GEOMapService");
      sub_100017D40();
    }
  }
  else
  {
    if (qword_100218B78 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    uint64_t v2 = sub_10001DD88(v1, (uint64_t)qword_100236A80);
    os_log_type_t v3 = static os_log_type_t.error.getter();
    if (sub_1000165B4(v3))
    {
      uint64_t v4 = (_WORD *)sub_100023E24();
      sub_10002B114(v4);
      sub_10000E130((void *)&_mh_execute_header, v2, v5, "GEOServices returned nil GEOMapService");
      sub_100017D40();
    }
  }

  return 0;
}

id sub_10007B11C@<X0>(void *a1@<X8>)
{
  id result = [self sharedService];
  *a1 = result;
  return result;
}

uint64_t sub_10007B160()
{
  uint64_t result = sub_10007AF84();
  if (v1 >> 60 != 15)
  {
    uint64_t v2 = result;
    unint64_t v3 = v1;
    if (swift_unknownObjectWeakLoadStrong())
    {
      id v4 = [self defaultCenter];
      sub_10002572C((uint64_t *)&unk_10021BAE0);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1001A2A20;
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      AnyHashable.init<A>(_:)();
      *(void *)(inited + 96) = type metadata accessor for ContextUpdate(0);
      uint64_t v6 = sub_10002E5E8((uint64_t *)(inited + 72));
      *uint64_t v6 = v2;
      v6[1] = v3;
      swift_storeEnumTagMultiPayload();
      sub_100027BCC(v2, v3);
      uint64_t v7 = Dictionary.init(dictionaryLiteral:)();
      sub_1000281A8(v7);
      swift_unknownObjectRelease();

      return sub_10000A330(v2, v3);
    }
    else
    {
      return sub_10000A330(v2, v3);
    }
  }
  return result;
}

uint64_t sub_10007B318()
{
  id v0 = [self sharedConfiguration];
  if (v0)
  {
    unint64_t v1 = v0;
    int v11 = 1;
    id v2 = [v0 countryCodeWithSource:&v11 updatedAtTime:0];
    if (v2)
    {
      unint64_t v3 = v2;
      uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    else
    {

      uint64_t v4 = 0;
    }
    sub_10007DB08(v11);
  }
  else
  {
    if (qword_100218B78 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    uint64_t v6 = sub_10001DD88(v5, (uint64_t)qword_100236A80);
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (sub_1000165B4(v7))
    {
      uint64_t v8 = (_WORD *)sub_100023E24();
      sub_10002B114(v8);
      sub_10000E130((void *)&_mh_execute_header, v6, v9, "nil GEOCountryConfiguration received from GEOServices");
      sub_100017D40();
    }

    return 0;
  }
  return v4;
}

void sub_10007B494()
{
  sub_10000DFE0();
  uint64_t v0 = type metadata accessor for PegasusContext(0);
  sub_10001DCF8();
  uint64_t v2 = __chkstk_darwin(v1);
  uint64_t v4 = (char *)v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  uint64_t v6 = (char *)v41 - v5;
  if (!swift_unknownObjectWeakLoadStrong()) {
    goto LABEL_34;
  }
  uint64_t v7 = sub_10007B318();
  if (v8 != 1)
  {
    uint64_t v16 = v7;
    uint64_t v17 = v8;
    char v18 = v9;
    sub_100023FDC((uint64_t)v6);
    uint64_t v19 = &v6[*(int *)(v0 + 80)];
    uint64_t v21 = *(void *)v19;
    uint64_t v20 = *((void *)v19 + 1);
    swift_bridgeObjectRetain();
    sub_100028F88((uint64_t)v6);
    if (v20)
    {
      if (!v17) {
        goto LABEL_31;
      }
      if (v21 == v16 && v20 == v17)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v23 & 1) == 0) {
          goto LABEL_32;
        }
      }
    }
    else if (v17)
    {
      goto LABEL_32;
    }
    sub_100023FDC((uint64_t)v4);
    uint64_t v25 = &v4[*(int *)(v0 + 84)];
    uint64_t v27 = *(void *)v25;
    uint64_t v26 = *((void *)v25 + 1);
    swift_bridgeObjectRetain();
    sub_100028F88((uint64_t)v4);
    uint64_t v28 = sub_10007DA50(v18);
    if (v26)
    {
      if (v27 == v28 && v26 == v29)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_36:
        sub_10007D7F8(v16, v17);
        if (qword_100218B78 != -1) {
          swift_once();
        }
        uint64_t v37 = type metadata accessor for Logger();
        id v32 = (id)sub_10001DD88(v37, (uint64_t)qword_100236A80);
        os_log_type_t v38 = static os_log_type_t.default.getter();
        if (!sub_100017D10(v38))
        {

          swift_unknownObjectRelease();
          goto LABEL_34;
        }
        *(_WORD *)sub_100023E24() = 0;
        sub_100024288((void *)&_mh_execute_header, v39, v40, "received redundant CountryCode update");
        sub_100017D40();
LABEL_33:
        swift_unknownObjectRelease();

LABEL_34:
        sub_10000DFB8();
        return;
      }
      char v31 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v31) {
        goto LABEL_36;
      }
LABEL_32:
      id v32 = [self defaultCenter];
      sub_10002572C((uint64_t *)&unk_10021BAE0);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1001A2A20;
      v41[1] = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v41[2] = v34;
      AnyHashable.init<A>(_:)();
      *(void *)(inited + 96) = type metadata accessor for ContextUpdate(0);
      uint64_t v35 = sub_10002E5E8((uint64_t *)(inited + 72));
      *uint64_t v35 = v16;
      v35[1] = v17;
      *((unsigned char *)v35 + 16) = v18;
      swift_storeEnumTagMultiPayload();
      uint64_t v36 = Dictionary.init(dictionaryLiteral:)();
      sub_10010553C(@"com.apple.parsecd.contextUpdate", 0, v36, v32);
      goto LABEL_33;
    }
LABEL_31:
    swift_bridgeObjectRelease();
    goto LABEL_32;
  }
  if (qword_100218B78 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  v41[0] = sub_10001DD88(v10, (uint64_t)qword_100236A80);
  os_log_type_t v11 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v41[0], v11))
  {
    uint64_t v12 = (_WORD *)sub_100023E24();
    sub_10002B114(v12);
    sub_10000E130((void *)&_mh_execute_header, v41[0], v13, "Could not fetch CC from GEOServices");
    sub_100017D40();
    swift_unknownObjectRelease();
    sub_10000DFB8();
  }
  else
  {

    sub_10000DFB8();
    swift_unknownObjectRelease();
  }
}

uint64_t sub_10007B910(void *a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  uint64_t v8 = sub_10002572C(&qword_10021A5E0);
  uint64_t v9 = sub_100016544(v8);
  __chkstk_darwin(v9);
  sub_100016500();
  if (a3)
  {
    static Notification._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v10 = type metadata accessor for Notification();
    uint64_t v11 = 0;
  }
  else
  {
    uint64_t v10 = type metadata accessor for Notification();
    uint64_t v11 = 1;
  }
  sub_10002538C(v4, v11, 1, v10);
  id v12 = a1;
  a4();

  return sub_1000255D4(v4, &qword_10021A5E0);
}

uint64_t sub_10007B9DC()
{
  uint64_t v1 = sub_10002572C(&qword_10021A5E0);
  uint64_t v2 = sub_100016544(v1);
  __chkstk_darwin(v2);
  sub_100016500();
  type metadata accessor for Notification();
  sub_100021348();
  sub_10007B160();
  sub_1000255D4(v0, &qword_10021A5E0);
  sub_100021348();
  sub_10007B494();
  return sub_1000255D4(v0, &qword_10021A5E0);
}

uint64_t sub_10007BA70()
{
  uint64_t v1 = sub_10002572C(&qword_10021BB20);
  uint64_t v2 = sub_100016544(v1);
  __chkstk_darwin(v2);
  sub_100017DC8();
  uint64_t v3 = type metadata accessor for URL();
  sub_100020C48();
  uint64_t v5 = v4;
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = &v28[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v7);
  uint64_t v11 = &v28[-v10];
  id v12 = objc_allocWithZone((Class)LSApplicationRecord);
  id v13 = sub_10007D71C(0x6C7070612E6D6F63, 0xEE007377656E2E65, 0);
  id v14 = [v13 URL];

  static URL._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v15 = *(void (**)(uint64_t, unsigned char *, uint64_t))(v5 + 32);
  v15(v0, v9, v3);
  sub_10002538C(v0, 0, 1, v3);
  if (sub_100027BA4(v0, 1, v3) == 1)
  {
    sub_1000255D4(v0, &qword_10021BB20);
  }
  else
  {
    v15((uint64_t)v11, (unsigned char *)v0, v3);
    sub_100023FA0(0, &qword_10021BB28);
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v5 + 16))(v9, v11, v3);
    id v18 = sub_10007BD74((uint64_t)v9);
    if (v18)
    {
      uint64_t v19 = v18;
      id v16 = [self authorizationStatusForBundle:v18];

      uint64_t v20 = sub_1000184D0();
      v21(v20);
      return (uint64_t)v16;
    }
    if (qword_100218B78 != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    char v23 = sub_10001DD88(v22, (uint64_t)qword_100236A80);
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (sub_100017D10(v24))
    {
      uint64_t v25 = (uint8_t *)sub_100023E24();
      *(_WORD *)uint64_t v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, (os_log_type_t)v15, "excption initializing news bundle", v25, 2u);
      sub_100017D40();
    }

    uint64_t v26 = sub_1000184D0();
    v27(v26);
  }
  return 2;
}

id sub_10007BD74(uint64_t a1)
{
  id v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  URL._bridgeToObjectiveC()(v3);
  uint64_t v5 = v4;
  id v6 = [v2 initWithURL:v4];

  uint64_t v7 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(a1, v7);
  return v6;
}

void sub_10007BE10(uint64_t a1, char a2)
{
  if (sub_100079A14())
  {
    if (qword_100218B78 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_10002A10C(v4, (uint64_t)qword_100236A80);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = 0xD000000000000010;
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v14 = swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 136315138;
      unint64_t v9 = 0x80000001001B4730;
      switch(a2)
      {
        case 1:
          uint64_t v7 = 0xD000000000000015;
          unint64_t v9 = 0x80000001001B4710;
          break;
        case 2:
          unint64_t v9 = 0xEB00000000646567;
          uint64_t v7 = 0x6E61686320676162;
          break;
        case 3:
          unint64_t v9 = 0xE700000000000000;
          uint64_t v7 = 0x676E6974736574;
          break;
        default:
          break;
      }
      sub_10001C274(v7, v9, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Requesting new Location, reason: %s", v8, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    if (!*(void *)(a1 + OBJC_IVAR____TtC7parsecd15LocationManager_geoLocation))
    {
      BOOL v10 = *(void *)(a1 + OBJC_IVAR____TtC7parsecd15LocationManager_geoLocationSource) == 0x6E692E726F727265
         && *(void *)(a1 + OBJC_IVAR____TtC7parsecd15LocationManager_geoLocationSource + 8) == 0xEA00000000007469;
      if (v10 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        sub_10007A5E8(2003790963, 0xE400000000000000);
      }
    }
    if (*(void *)(a1 + OBJC_IVAR____TtC7parsecd15LocationManager_locationService))
    {
      uint64_t v11 = *(void *)(a1 + OBJC_IVAR____TtC7parsecd15LocationManager_locationService + 8);
      uint64_t ObjectType = swift_getObjectType();
      id v13 = *(void (**)(uint64_t, uint64_t))(v11 + 32);
      swift_unknownObjectRetain();
      v13(ObjectType, v11);
      swift_unknownObjectRelease();
    }
  }
}

void sub_10007C0F4()
{
  sub_10000DFE0();
  uint64_t v3 = v2;
  uint64_t v4 = sub_10002572C(&qword_10021BB10);
  uint64_t v5 = sub_100016544(v4);
  __chkstk_darwin(v5);
  sub_100016500();
  os_log_type_t v6 = *(void **)(v0 + OBJC_IVAR____TtC7parsecd15LocationManager_geoLocation);
  uint64_t v7 = v0 + OBJC_IVAR____TtC7parsecd15LocationManager_geoLocationAge;
  swift_beginAccess();
  sub_100058624(v7, v1);
  uint64_t v8 = *(void **)(v0 + OBJC_IVAR____TtC7parsecd15LocationManager_geoPlacemark);
  uint64_t v9 = *(void *)(v0 + OBJC_IVAR____TtC7parsecd15LocationManager_geoLocationLatLng + 8);
  uint64_t v10 = *(void *)(v0 + OBJC_IVAR____TtC7parsecd15LocationManager_geoLocationSource + 8);
  uint64_t v25 = *(void *)(v0 + OBJC_IVAR____TtC7parsecd15LocationManager_geoLocationSource);
  uint64_t v26 = *(void *)(v0 + OBJC_IVAR____TtC7parsecd15LocationManager_geoLocationLatLng);
  uint64_t v11 = *(void *)(v0 + OBJC_IVAR____TtC7parsecd15LocationManager_lookupGeoLocationLatLng + 8);
  uint64_t v24 = *(void *)(v0 + OBJC_IVAR____TtC7parsecd15LocationManager_lookupGeoLocationLatLng);
  id v12 = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v13 = v6;
  sub_1000796A4();
  uint64_t v23 = sub_10007C290();
  uint64_t v15 = v14;
  uint64_t v16 = sub_100079738();
  if (v16) {
    uint64_t v17 = (void *)v16;
  }
  else {
    uint64_t v17 = _swiftEmptyArrayStorage;
  }
  *uint64_t v3 = v6;
  id v18 = (int *)type metadata accessor for LocationContext(0);
  sub_10007D918(v1, (uint64_t)v3 + v18[5]);
  *(void *)((char *)v3 + v18[6]) = v8;
  uint64_t v19 = (void *)((char *)v3 + v18[7]);
  *uint64_t v19 = v26;
  v19[1] = v9;
  uint64_t v20 = (void *)((char *)v3 + v18[8]);
  *uint64_t v20 = v25;
  v20[1] = v10;
  uint64_t v21 = (void *)((char *)v3 + v18[9]);
  *uint64_t v21 = v24;
  v21[1] = v11;
  uint64_t v22 = (void *)((char *)v3 + v18[10]);
  uint64_t *v22 = v23;
  v22[1] = v15;
  *(void *)((char *)v3 + v18[11]) = v17;
  sub_10000DFB8();
}

uint64_t sub_10007C290()
{
  return 0x726F727265;
}

BOOL sub_10007C350(int a1)
{
  return (a1 - 3) < 2;
}

uint64_t sub_10007C360(void *a1)
{
  uint64_t v5 = v1;
  uint64_t v67 = type metadata accessor for Date();
  sub_10001DCF8();
  __chkstk_darwin(v7);
  sub_100017DC8();
  uint64_t v8 = sub_10002572C(&qword_10021BB10);
  uint64_t v9 = sub_100016544(v8);
  __chkstk_darwin(v9);
  sub_100017DE0();
  uint64_t v10 = type metadata accessor for DispatchPredicate();
  sub_100020C48();
  uint64_t v12 = v11;
  __chkstk_darwin(v13);
  sub_100016500();
  uint64_t v14 = *(void **)(v5 + OBJC_IVAR____TtC7parsecd15LocationManager_updateQueue);
  *id v2 = v14;
  sub_100023D14();
  v15();
  id v16 = v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v12 + 8))(v2, v10);
  if (v14)
  {
    if (qword_100218B78 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v17 = type metadata accessor for Logger();
  sub_10002A10C(v17, (uint64_t)qword_100236A80);
  id v18 = a1;
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    uint64_t v69 = swift_slowAlloc();
    *(_DWORD *)uint64_t v21 = 136642819;
    sub_10002572C(&qword_10021BB18);
    uint64_t v22 = Optional.debugDescription.getter();
    uint64_t v68 = sub_10001C274(v22, v23, &v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Setting new location %{sensitive}s", v21, 0xCu);
    swift_arrayDestroy();
    sub_100017D40();
    sub_100017D40();
  }
  else
  {
  }
  id v24 = v18;
  sub_100079644((uint64_t)a1);
  if (!a1) {
    __break(1u);
  }
  id v25 = [v24 timestamp];
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  sub_10002538C(v4, 0, 1, v67);
  uint64_t v26 = v5 + OBJC_IVAR____TtC7parsecd15LocationManager_geoLocationAge;
  swift_beginAccess();
  sub_100032DFC(v4, v26);
  swift_endAccess();
  Date.init()();
  sub_100079944(v3);
  uint64_t v27 = *(void **)(v5 + OBJC_IVAR____TtC7parsecd15LocationManager_geoLocation);
  if (v27)
  {
    [v27 coordinate];
    double v29 = v28;
    double v31 = v30;
    sub_10002572C((uint64_t *)&unk_10021BB00);
    uint64_t v32 = sub_100028CE4();
    *(_OWORD *)(v32 + 16) = xmmword_1001A3830;
    unsigned int v33 = [v24 type] - 1;
    if (v33 > 0xC) {
      char v34 = 3;
    }
    else {
      char v34 = byte_1001A5938[v33];
    }
    uint64_t v35 = sub_1000797D0(v34);
    uint64_t v37 = v36;
    *(void *)(v32 + 56) = &type metadata for String;
    *(void *)(v32 + 64) = sub_1000303C8();
    *(void *)(v32 + 3sub_100034730((uint64_t)"SIGTERM", 7, 2) = v35;
    *(void *)(v32 + 40) = v37;
    [v24 horizontalAccuracy];
    *(void *)(v32 + 96) = &type metadata for Double;
    *(void *)(v32 + 104) = &protocol witness table for Double;
    *(void *)(v32 + 7sub_100034730((uint64_t)"SIGTERM", 7, 2) = v38;
    uint64_t v39 = String.init(format:_:)();
    sub_100079674(v39, v40);
    if (objc_msgSend(self, "isLocationShiftRequiredForCoordinate:", v29, v31))
    {
      id v41 = [objc_allocWithZone((Class)GEOLocationShifter) init];
      uint64_t v69 = 0;
      double v70 = 0.0;
      uint64_t v68 = 0;
      unsigned int v42 = objc_msgSend(v41, "shiftCoordinate:accuracy:shiftedCoordinate:shiftedAccuracy:", &v69, &v68, v29, v31, 0.0);
      id v43 = (void *)Logger.logObject.getter();
      if (v42)
      {
        os_log_type_t v44 = static os_log_type_t.debug.getter();
        if (sub_100024328(v44))
        {
          *(_WORD *)sub_100023E24() = 0;
          sub_100021328((void *)&_mh_execute_header, v45, v46, "Shifted coordinates on location update");
          sub_100017D40();
        }

        sub_100079644((uint64_t)[objc_allocWithZone((Class)CLLocation) initWithLatitude:*(double *)&v69 longitude:v70]);
        uint64_t v47 = (__n128 *)sub_100028CE4();
        uint64_t v48 = sub_100027E24(v47, (__n128)xmmword_1001A3830);
        sub_100079668(v48, v49);
      }
      else
      {
        os_log_type_t v57 = static os_log_type_t.error.getter();
        if (sub_100024328(v57))
        {
          *(_WORD *)sub_100023E24() = 0;
          sub_100021328((void *)&_mh_execute_header, v58, v59, "ShiftCoordinate failed to shift coordinates");
          sub_100017D40();
        }
      }
    }
    else
    {
      uint64_t v50 = (void *)Logger.logObject.getter();
      os_log_type_t v51 = static os_log_type_t.debug.getter();
      if (sub_100024328(v51))
      {
        *(_WORD *)sub_100023E24() = 0;
        sub_100021328((void *)&_mh_execute_header, v52, v53, "isLocationShiftRequired returned false. Location shifting not required!");
        sub_100017D40();
      }

      uint64_t v54 = sub_100028CE4();
      *(_OWORD *)(v54 + 16) = xmmword_1001A3830;
      *(void *)(v54 + 56) = &type metadata for Double;
      *(void *)(v54 + 64) = &protocol witness table for Double;
      *(double *)(v54 + 3sub_100034730((uint64_t)"SIGTERM", 7, 2) = v29;
      *(void *)(v54 + 96) = &type metadata for Double;
      *(void *)(v54 + 104) = &protocol witness table for Double;
      *(double *)(v54 + 7sub_100034730((uint64_t)"SIGTERM", 7, 2) = v31;
      uint64_t v55 = String.init(format:_:)();
      sub_100079668(v55, v56);
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v60 = String.count.getter();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v60)
  {
    [v24 coordinate];
    CLLocationCoordinate2DMake(trunc(v62), trunc(v63));
    sub_10002572C((uint64_t *)&unk_10021BB00);
    uint64_t v64 = (__n128 *)sub_100028CE4();
    uint64_t v65 = sub_100027E24(v64, (__n128)xmmword_1001A3830);
    return sub_100079680(v65, v66);
  }
  return result;
}

void sub_10007CA2C()
{
  sub_10000DFE0();
  unint64_t v3 = v2;
  type metadata accessor for DispatchPredicate();
  sub_100020C48();
  __chkstk_darwin(v4);
  sub_100016550();
  uint64_t v5 = *(void **)(v0 + OBJC_IVAR____TtC7parsecd15LocationManager_updateQueue);
  void *v1 = v5;
  sub_100023D14();
  v6();
  id v7 = v5;
  _dispatchPreconditionTest(_:)();
  uint64_t v8 = sub_10002605C();
  v9(v8);
  if (v5)
  {
    if (qword_100218B78 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v10 = type metadata accessor for Logger();
  os_log_type_t v11 = sub_10002A10C(v10, (uint64_t)qword_100236A80);
  swift_bridgeObjectRetain_n();
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  unint64_t v14 = v3 >> 62;
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 134217984;
    if (v14)
    {
      swift_bridgeObjectRetain();
      _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "LocationManager got an update of %ld locations.", v15, 0xCu);
    sub_100017D40();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  if (!v14)
  {
    uint64_t v16 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v16) {
      goto LABEL_10;
    }
LABEL_22:
    swift_bridgeObjectRelease();
    goto LABEL_23;
  }
  swift_bridgeObjectRetain();
  uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
  if (!v16) {
    goto LABEL_22;
  }
LABEL_10:
  BOOL v17 = __OFSUB__(v16, 1);
  uint64_t v18 = v16 - 1;
  if (v17)
  {
    __break(1u);
    goto LABEL_25;
  }
  sub_100065188(v18, (v3 & 0xC000000000000001) == 0, v3);
  if ((v3 & 0xC000000000000001) != 0)
  {
LABEL_25:
    id v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_13;
  }
  id v19 = *(id *)(v3 + 8 * v18 + 32);
LABEL_13:
  os_log_type_t v20 = v19;
  swift_bridgeObjectRelease();
  [v20 horizontalAccuracy];
  if (v21 >= 0.0 && swift_unknownObjectWeakLoadStrong())
  {
    id v22 = v20;
    sub_100079650((uint64_t)v20);
    sub_10007A708(v22);
    unint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.debug.getter();
    if (sub_100024328(v24))
    {
      id v25 = (uint8_t *)sub_100023E24();
      *(_WORD *)id v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v11, "Posting PARContextUpdate for locationState", v25, 2u);
      sub_100017D40();
    }

    id v26 = [self defaultCenter];
    sub_10002572C((uint64_t *)&unk_10021BAE0);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1001A2A20;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    AnyHashable.init<A>(_:)();
    *(void *)(inited + 96) = type metadata accessor for ContextUpdate(0);
    sub_10002E5E8((uint64_t *)(inited + 72));
    sub_10007C0F4();
    swift_storeEnumTagMultiPayload();
    uint64_t v28 = Dictionary.init(dictionaryLiteral:)();
    sub_10010553C(@"com.apple.parsecd.contextUpdate", 0, v28, v26);

    swift_unknownObjectRelease();
  }
  else
  {
  }
LABEL_23:
  sub_10000DFB8();
}

void sub_10007CE78()
{
}

void sub_10007CEB8()
{
  sub_1000442AC();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_10007CF94()
{
}

void sub_10007D028(uint64_t a1, int a2)
{
  uint64_t v5 = type metadata accessor for DispatchPredicate();
  sub_100020C48();
  uint64_t v7 = v6;
  __chkstk_darwin(v8);
  sub_100016550();
  uint64_t v9 = *(void **)(v2 + OBJC_IVAR____TtC7parsecd15LocationManager_updateQueue);
  *unint64_t v3 = v9;
  sub_100023D14();
  v10();
  id v11 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v7 + 8))(v3, v5);
  if (v9)
  {
    if (swift_unknownObjectWeakLoadStrong())
    {
      unsigned int v12 = [self locationServicesEnabled];
      sub_1000796E8(a2);
      if (v12 && (a2 - 3) < 2) {
        sub_10007A974();
      }
      else {
        sub_10007A5E8(0x6F6E2E72657375, 0xE700000000000000);
      }
      id v13 = [self defaultCenter];
      sub_10002572C((uint64_t *)&unk_10021BAE0);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1001A2A20;
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      AnyHashable.init<A>(_:)();
      *(void *)(inited + 96) = type metadata accessor for ContextUpdate(0);
      sub_10002E5E8((uint64_t *)(inited + 72));
      sub_10007C0F4();
      swift_storeEnumTagMultiPayload();
      uint64_t v15 = Dictionary.init(dictionaryLiteral:)();
      sub_10010553C(@"com.apple.parsecd.contextUpdate", 0, v15, v13);
      swift_unknownObjectRelease();
    }
  }
  else
  {
    __break(1u);
  }
}

void sub_10007D2E8()
{
  sub_10000DFE0();
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  sub_100020C48();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  sub_100016500();
  uint64_t v7 = *(void **)(v2 + OBJC_IVAR____TtC7parsecd15LocationManager_updateQueue);
  void *v1 = v7;
  sub_100023D14();
  v8();
  id v9 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v5 + 8))(v1, v3);
  if ((v7 & 1) == 0)
  {
    __break(1u);
LABEL_10:
    swift_once();
    goto LABEL_4;
  }
  if (!swift_unknownObjectWeakLoadStrong()) {
    goto LABEL_8;
  }
  if (qword_100218B78 != -1) {
    goto LABEL_10;
  }
LABEL_4:
  uint64_t v10 = type metadata accessor for Logger();
  sub_10002A10C(v10, (uint64_t)qword_100236A80);
  swift_errorRetain();
  id v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v11, v12))
  {
    id v13 = (uint8_t *)swift_slowAlloc();
    unint64_t v14 = (void *)swift_slowAlloc();
    *(_DWORD *)id v13 = 138412290;
    uint64_t v20 = _convertErrorToNSError(_:)();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v14 = v20;
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Location determination failed with error %@", v13, 0xCu);
    sub_10002572C(&qword_100219710);
    swift_arrayDestroy();
    sub_100017D40();
    sub_100017D40();
  }
  else
  {
    swift_errorRelease();
  }

  uint64_t v15 = sub_10002540C();
  sub_10007A5E8(v15, v16);
  id v17 = [self defaultCenter];
  sub_10002572C((uint64_t *)&unk_10021BAE0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1001A2A20;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  AnyHashable.init<A>(_:)();
  *(void *)(inited + 96) = type metadata accessor for ContextUpdate(0);
  sub_10002E5E8((uint64_t *)(inited + 72));
  sub_10007C0F4();
  swift_storeEnumTagMultiPayload();
  uint64_t v19 = Dictionary.init(dictionaryLiteral:)();
  sub_1000281A8(v19);
  swift_unknownObjectRelease();

LABEL_8:
  sub_10000DFB8();
}

id sub_10007D690(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5 = v4;
  if (a2)
  {
    NSString v8 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }
  else
  {
    NSString v8 = 0;
  }
  id v9 = [v5 initWithEffectiveBundlePath:v8 delegate:a3 onQueue:a4];

  swift_unknownObjectRelease();
  return v9;
}

id sub_10007D71C(uint64_t a1, uint64_t a2, char a3)
{
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v10 = 0;
  id v6 = [v3 initWithBundleIdentifier:v5 allowPlaceholder:a3 & 1 error:&v10];

  if (v6)
  {
    id v7 = v10;
  }
  else
  {
    id v8 = v10;
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v6;
}

uint64_t sub_10007D7F8(uint64_t a1, uint64_t a2)
{
  if (a2 != 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10007D80C(void *a1)
{
  id v2 = [a1 supportedGeoLocationSources];

  if (!v2) {
    return 0;
  }
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_10007D870(void *a1)
{
  id v1 = [a1 serializedClientMetadataForParsec];
  if (!v1) {
    return 0;
  }
  id v2 = v1;
  uint64_t v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_10007D8D4()
{
  return _swift_deallocObject(v0, 25, 7);
}

void sub_10007D90C()
{
  sub_10007BE10(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
}

uint64_t sub_10007D918(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10002572C(&qword_10021BB10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10007D980()
{
  return _swift_deallocObject(v0, 24, 7);
}

void *sub_10007D9B8()
{
  return sub_10007ADF4(*(void *)(v0 + 16));
}

uint64_t sub_10007D9C0()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_10007D9F8()
{
}

uint64_t sub_10007DA00()
{
  return sub_10007A0B0();
}

uint64_t sub_10007DA24()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10007DA50(char a1)
{
  uint64_t result = 1701736302;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x6E776F6E6B6E75;
      break;
    case 2:
      uint64_t result = 0x656469727265766FLL;
      break;
    case 3:
      uint64_t result = 0x656C61636F6C736ELL;
      break;
    case 4:
      uint64_t result = 0x50496F6567;
      break;
    case 5:
      uint64_t result = 6513517;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10007DB08(uint64_t result)
{
  if (result >= 6) {
    return 6;
  }
  else {
    return result;
  }
}

uint64_t sub_10007DB18(uint64_t result)
{
  return result;
}

BOOL sub_10007DB20(int a1)
{
  return a1 != 256;
}

unsigned char *storeEnumTagSinglePayload for CountryCodeSourceDevice(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x10007DBC8);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for CountryCodeSourceDevice()
{
  return &type metadata for CountryCodeSourceDevice;
}

unsigned char *storeEnumTagSinglePayload for CountryCodeSource(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10007DCCCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CountryCodeSource()
{
  return &type metadata for CountryCodeSource;
}

Swift::Int sub_10007DD04()
{
  return sub_1000B3AE8(*v0);
}

void sub_10007DD0C(uint64_t a1)
{
  sub_1000B3E00(a1, *v1);
}

Swift::Int sub_10007DD14()
{
  return sub_1000B3FAC();
}

uint64_t sub_10007DD1C@<X0>(unsigned int *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_10007DB08(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10007DD48@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result = sub_10007DB18(*v1);
  *a1 = result;
  return result;
}

unint64_t sub_10007DD78()
{
  unint64_t result = qword_10021BB40;
  if (!qword_10021BB40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10021BB40);
  }
  return result;
}

BOOL sub_10007DDD4@<W0>(int *a1@<X0>, unsigned char *a2@<X8>)
{
  BOOL result = sub_10007DB20(*a1);
  *a2 = result;
  return result;
}

void sub_10007DE08(_DWORD *a1@<X8>)
{
  *a1 = 256;
}

unint64_t sub_10007DE18()
{
  unint64_t result = qword_10021BB48;
  if (!qword_10021BB48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10021BB48);
  }
  return result;
}

uint64_t sub_10007DE64()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Apple_Parsec_Search_V2_Entity.Category();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (uint64_t *)((char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v3 + 16))(v5, v1, v2);
  int v6 = (*(uint64_t (**)(uint64_t *, uint64_t))(v3 + 88))(v5, v2);
  if (v6 == enum case for Apple_Parsec_Search_V2_Entity.Category.UNRECOGNIZED(_:))
  {
    id v7 = *(void (**)(uint64_t *, uint64_t))(v3 + 96);
    v3 += 96;
    v7(v5, v2);
    uint64_t result = *v5;
    if ((*v5 & 0x8000000000000000) == 0) {
      return result;
    }
    int v6 = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  if (v6 == enum case for Apple_Parsec_Search_V2_Entity.Category.namedEntityCategoryUnknown(_:)) {
    return 0;
  }
  if (v6 == enum case for Apple_Parsec_Search_V2_Entity.Category.namedEntityCategoryPerson(_:)) {
    return 1;
  }
  if (v6 == enum case for Apple_Parsec_Search_V2_Entity.Category.namedEntityCategoryOrganization(_:)) {
    return 2;
  }
  if (v6 == enum case for Apple_Parsec_Search_V2_Entity.Category.namedEntityCategoryLocation(_:)) {
    return 3;
  }
  if (v6 == enum case for Apple_Parsec_Search_V2_Entity.Category.namedEntityCategoryRestaurant(_:)) {
    return 4;
  }
  if (v6 == enum case for Apple_Parsec_Search_V2_Entity.Category.namedEntityCategoryActivityLocation(_:)) {
    return 5;
  }
  if (v6 == enum case for Apple_Parsec_Search_V2_Entity.Category.namedEntityCategoryMedia(_:)) {
    return 6;
  }
  if (v6 == enum case for Apple_Parsec_Search_V2_Entity.Category.namedEntityCategoryArtist(_:)) {
    return 7;
  }
  if (v6 == enum case for Apple_Parsec_Search_V2_Entity.Category.namedEntityCategoryStreetAddress(_:)) {
    return 8;
  }
  if (v6 == enum case for Apple_Parsec_Search_V2_Entity.Category.namedEntityCategoryCity(_:)) {
    return 9;
  }
  if (v6 == enum case for Apple_Parsec_Search_V2_Entity.Category.namedEntityCategoryState(_:)) {
    return 10;
  }
  if (v6 == enum case for Apple_Parsec_Search_V2_Entity.Category.namedEntityCategoryCountry(_:)) {
    return 11;
  }
  if (v6 == enum case for Apple_Parsec_Search_V2_Entity.Category.namedEntityCategoryFullAddress(_:)) {
    return 12;
  }
  if (v6 != enum case for Apple_Parsec_Search_V2_Entity.Category.namedEntityCategoryTouristAttraction(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v3 + 8))(v5, v2);
    return 0;
  }
  return 13;
}

uint64_t sub_10007E168()
{
  type metadata accessor for OSSignpostID();
  sub_100026808();
  uint64_t v2 = v1;
  __chkstk_darwin(v3);
  sub_10000DFD0();
  static os_signpost_type_t.begin.getter();
  if (qword_100218B88 != -1) {
    swift_once();
  }
  static OSSignpostID.exclusive.getter();
  sub_100023E60();
  uint64_t v4 = *(void (**)(uint64_t))(v2 + 8);
  uint64_t v5 = sub_10001D764();
  v4(v5);
  int v6 = *(os_unfair_lock_s **)(v0[14] + 16);
  swift_retain();
  swift_retain();
  os_unfair_lock_lock(v6);
  uint64_t v7 = v0[12];
  if (!v7)
  {
    v0[12] = sub_100083CC4();
    v0[13] = v8;
    swift_unknownObjectRelease();
    uint64_t v7 = v0[12];
  }
  swift_unknownObjectRetain();
  os_unfair_lock_unlock(v6);
  swift_release();
  swift_release();
  static os_signpost_type_t.end.getter();
  static OSSignpostID.exclusive.getter();
  sub_100023E60();
  uint64_t v9 = sub_10001D764();
  v4(v9);
  return v7;
}

uint64_t sub_10007E308(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);

  return swift_release();
}

uint64_t sub_10007E35C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(a2 + 24))(0, a1, a2);
}

uint64_t sub_10007E380(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = (_DWORD *)swift_slowAlloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = 0;
  sub_100085EFC(a1, v2 + 24, a2);
  return v2;
}

uint64_t sub_10007E3D4(uint64_t a1, uint64_t a2, char a3)
{
  sub_100028424();
  uint64_t v7 = (_DWORD *)swift_slowAlloc();
  *uint64_t v7 = 0;
  *(void *)(v3 + 16) = v7;
  *(void *)(v3 + 24) = v5;
  *(void *)(v3 + 3sub_100034730((uint64_t)"SIGTERM", 7, 2) = v4;
  *(unsigned char *)(v3 + 40) = a3 & 1;
  return v3;
}

void (*sub_10007E424(uint64_t a1))(id *__return_ptr, void *)
{
  void (*v4)(id *__return_ptr, void *);

  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 16);
  os_unfair_lock_lock(v3);
  swift_beginAccess();
  uint64_t v4 = sub_10007E498(a1);
  swift_endAccess();
  os_unfair_lock_unlock(v3);
  return v4;
}

void (*sub_10007E498(uint64_t a1))(id *__return_ptr, void *)
{
  void (*v2)(id *__return_ptr, void *);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void (*v14)(id *__return_ptr, uint64_t *);
  uint64_t v15;
  id v16;
  uint64_t vars8;

  uint64_t v15 = a1;
  uint64_t v2 = *(void (**)(id *__return_ptr, void *))v1;
  if ((*(unsigned char *)(v1 + 16) & 1) == 0)
  {
    uint64_t v3 = v1;
    unint64_t v14 = *(void (**)(id *__return_ptr, uint64_t *))v1;
    uint64_t v4 = *(void *)(v1 + 8);
    if (qword_100218AC8 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_10002A10C(v5, (uint64_t)qword_10021A060);
    int v6 = Logger.logObject.getter();
    uint64_t v7 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = swift_slowAlloc();
      uint64_t v16 = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 136446466;
      type metadata accessor for Assembly();
      sub_10002572C(&qword_10021BE08);
      uint64_t v9 = String.init<A>(describing:)();
      sub_10001C274(v9, v10, (uint64_t *)&v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v8 + 1sub_100034730((uint64_t)"SIGTERM", 7, 2) = 2082;
      sub_100023FA0(0, &qword_10021BE58);
      sub_10002572C(&qword_10021BE60);
      id v11 = String.init<A>(describing:)();
      sub_10001C274(v11, v12, (uint64_t *)&v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "AtomicValue<%{public}s, %{public}s>.init", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    v14(&v16, &v15);
    sub_100083C5C(v14, v4, 0);
    uint64_t v2 = (void (*)(id *__return_ptr, void *))v16;
    *(void *)uint64_t v3 = v16;
    *(void *)(v3 + 8) = 0;
    *(unsigned char *)(v3 + 16) = 1;
  }

  return v2;
}

uint64_t sub_10007E6FC()
{
  return sub_100027528();
}

uint64_t sub_10007E75C()
{
  sub_100006B58();
  uint64_t v1 = sub_100111FF0();
  swift_unknownObjectRelease();
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 64);
    swift_unknownObjectRetain();
  }
  else
  {
    uint64_t v3 = *(void *)(v0 + 72);
    swift_retain();
    swift_retain();
    uint64_t v2 = v3;
    sub_10002AB9C();
    sub_1000184E8();
    swift_release();
  }
  swift_release();
  return v2;
}

uint64_t sub_10007E7FC()
{
  return sub_100027528();
}

void sub_10007E85C(uint64_t a1@<X8>)
{
  id v2 = [self standardUserDefaults];
  sub_10000E090();
  NSString v3 = String._bridgeToObjectiveC()();
  unsigned int v4 = [v2 BOOLForKey:v3];

  if (v4)
  {
    *(void *)(a1 + 3sub_100034730((uint64_t)"SIGTERM", 7, 2) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  else
  {
    sub_10007E924(a1);
  }
}

uint64_t sub_10007E924@<X0>(uint64_t a1@<X8>)
{
  swift_beginAccess();
  sub_1000323F0(v1 + 120, (uint64_t)&v8, &qword_10021DE00);
  if (!v9)
  {
    sub_100085FD4((uint64_t)&v8, &qword_10021DE00);
    id v3 = [self defaultCenter];
    sub_100010DE0();
    sub_100024344();
    uint64_t v4 = type metadata accessor for TopicCacheController();
    swift_allocObject();
    uint64_t v5 = sub_1000A4088(v3, v1);
    uint64_t v9 = v4;
    id v10 = &off_1001FDFD8;
    *(void *)&long long v8 = v5;
    sub_10001C20C((uint64_t)&v8, (uint64_t)v7);
    swift_beginAccess();
    sub_1000849C8((uint64_t)v7, v1 + 120);
    swift_endAccess();
  }
  return sub_10001C1AC(&v8, a1);
}

uint64_t sub_10007EA44()
{
  if (*(void *)(v0 + 168))
  {
    uint64_t v1 = *(void *)(v0 + 168);
  }
  else
  {
    type metadata accessor for TrialAllocationStatusProvider();
    uint64_t v1 = swift_allocObject();
    *(void *)(v0 + 168) = v1;
    *(void *)(v0 + 176) = &off_1001FEBB8;
    swift_retain();
  }
  swift_unknownObjectRetain();
  return v1;
}

uint64_t sub_10007EAB0()
{
  swift_retain();
  swift_retain();
  sub_10002AB20();
  sub_100027E58();
  swift_release();
  return v0;
}

uint64_t sub_10007EB30()
{
  sub_10002B904();
  swift_retain();
  uint64_t v0 = swift_retain();
  sub_100019B6C(v0, &qword_10021BEF0, (uint64_t (*)(void (**)(void), uint64_t))sub_10001C1AC, &qword_10021BEF8, (uint64_t *)&unk_10021BF00);
  swift_release();

  return swift_release();
}

uint64_t sub_10007EBB8()
{
  sub_10002B904();
  swift_retain();
  uint64_t v0 = swift_retain();
  sub_100019B6C(v0, &qword_10021BED8, (uint64_t (*)(void (**)(void), uint64_t))sub_10001C1AC, &qword_10021BEE0, &qword_10021BEE8);
  swift_release();

  return swift_release();
}

id sub_10007EC40()
{
  sub_100017C74();
  sub_100018148(0, 0);
  uint64_t v0 = (void *)sub_100016A0C();
  swift_unknownObjectRelease();
  if (!v0) {
    return 0;
  }
  id v1 = [v0 eagerFeedbackSamplingPercentage];

  if (!v1) {
    return 0;
  }
  id v2 = [v1 integerValue];

  return v2;
}

void *sub_10007ECCC()
{
  id v1 = v0;
  type metadata accessor for OSSignpostID();
  sub_100026808();
  uint64_t v76 = v3;
  uint64_t v77 = v2;
  __chkstk_darwin(v2);
  sub_10000DFD0();
  uint64_t v75 = v5 - v4;
  uint64_t v73 = type metadata accessor for PegasusContext(0) - 8;
  uint64_t v6 = __chkstk_darwin(v73);
  uint64_t v74 = (uint64_t)v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v72 = (void *)((char *)v69 - v8);
  v0[2] = 0;
  sub_10002572C(&qword_10021BF50);
  sub_100024A00();
  v0[3] = sub_100027088((uint64_t)sub_100082404);
  v0[4] = 0;
  sub_10002572C(&qword_10021BF58);
  sub_100024A00();
  v0[5] = sub_100027088((uint64_t)sub_100082474);
  sub_10002572C(&qword_10021BF60);
  sub_100024A00();
  v0[6] = sub_100027088((uint64_t)sub_100082644);
  sub_10002572C(&qword_10021BF68);
  sub_100024A00();
  v0[7] = sub_100027088((uint64_t)sub_100082814);
  sub_10002572C(&qword_10021BF70);
  sub_100024A00();
  v0[8] = sub_100027088((uint64_t)sub_1000829DC);
  sub_10002572C(&qword_10021BF78);
  sub_100024A00();
  v0[9] = sub_100027088((uint64_t)sub_100082C50);
  sub_10002572C(&qword_10021BF80);
  sub_100024A00();
  v0[10] = sub_100027088((uint64_t)sub_100082E48);
  sub_10002572C(&qword_10021BF88);
  sub_100024A00();
  v0[11] = sub_100027088((uint64_t)sub_100083034);
  type metadata accessor for Locker();
  v0[12] = 0;
  v0[13] = 0;
  uint64_t v9 = swift_allocObject();
  id v10 = (_DWORD *)swift_slowAlloc();
  *(void *)(v9 + 16) = v10;
  *id v10 = 0;
  v1[14] = v9;
  *(_OWORD *)(v1 + 15) = 0u;
  *(_OWORD *)(v1 + 17) = 0u;
  v1[19] = 0;
  aBlock = sub_100083204;
  uint64_t v90 = 0;
  LOBYTE(v94) = 0;
  sub_10002572C(&qword_10021BF90);
  sub_1000262A0();
  uint64_t v11 = sub_10007E380((uint64_t)&aBlock, &qword_10021BE88);
  v1[21] = 0;
  v1[22] = 0;
  v1[20] = v11;
  sub_10002572C(&qword_10021BF98);
  sub_100024A00();
  v1[23] = sub_100027088((uint64_t)sub_100083298);
  sub_100024A00();
  v1[24] = sub_100027088((uint64_t)sub_1000834DC);
  sub_100024A00();
  v1[25] = sub_100027088((uint64_t)sub_100083720);
  v1[26] = [objc_allocWithZone((Class)type metadata accessor for DeviceManagedAppContextProvider()) init];
  v1[27] = &off_1001FB5E0;
  aBlock = sub_100083960;
  uint64_t v90 = 0;
  LOBYTE(v94) = 0;
  sub_10002572C(&qword_10021BFA0);
  sub_1000262A0();
  v1[28] = sub_10007E380((uint64_t)&aBlock, &qword_10021BEF0);
  aBlock = sub_100083B54;
  uint64_t v90 = 0;
  LOBYTE(v94) = 0;
  sub_10002572C(&qword_10021BFA8);
  sub_1000262A0();
  v1[29] = sub_10007E380((uint64_t)&aBlock, &qword_10021BED8);
  *((unsigned char *)v1 + 240) = 1;
  uint64_t v87 = v1;
  type metadata accessor for DeviceSetupStatus();
  swift_allocObject();
  v1[31] = sub_10006848C();
  uint64_t v12 = sub_100023FA0(0, (unint64_t *)&qword_100219250);
  uint64_t v71 = type metadata accessor for DispatchQoS();
  sub_100026808();
  uint64_t v70 = v13;
  uint64_t v15 = *(void *)(v14 + 64);
  __chkstk_darwin(v16);
  uint64_t v86 = v15;
  static DispatchQoS.utility.getter();
  uint64_t v17 = type metadata accessor for OS_dispatch_queue.Attributes();
  sub_10001DCF8();
  uint64_t v19 = *(void *)(v18 + 64);
  __chkstk_darwin(v20);
  unint64_t v82 = (v19 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v83 = v19;
  aBlock = 0;
  uint64_t v81 = sub_100085E64((unint64_t *)&qword_10021B3D0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  dispatch thunk of OptionSet.init(rawValue:)();
  uint64_t v84 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  sub_100026808();
  uint64_t v22 = *(void *)(v21 + 64);
  __chkstk_darwin(v23);
  v69[2] = v22;
  unint64_t v80 = (v22 + 15) & 0xFFFFFFFFFFFFFFF0;
  unsigned int v79 = enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:);
  uint64_t v78 = *(void (**)(char *))(v24 + 104);
  uint64_t v85 = v24 + 104;
  v78((char *)v69 - v80);
  sub_10000E090();
  v69[3] = v12;
  uint64_t v25 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  v87[32] = v25;
  __chkstk_darwin(v25);
  sub_100021368();
  uint64_t v26 = static DispatchQoS.background.getter();
  __chkstk_darwin(v26);
  sub_1000165D0();
  *(void *)(v27 - 256) = v17;
  uint64_t v28 = dispatch thunk of OptionSet.init(rawValue:)();
  __chkstk_darwin(v28);
  unint64_t v29 = v80;
  uint64_t v30 = v79;
  double v31 = (void (*)(char *, uint64_t, uint64_t))v78;
  ((void (*)(char *, void, uint64_t))v78)((char *)v69 - v80, v79, v84);
  sub_10000E090();
  sub_10002B120();
  uint64_t v32 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  v87[33] = v32;
  __chkstk_darwin(v32);
  sub_100021368();
  uint64_t v33 = static DispatchQoS.userInitiated.getter();
  __chkstk_darwin(v33);
  sub_1000165D0();
  uint64_t v34 = dispatch thunk of OptionSet.init(rawValue:)();
  __chkstk_darwin(v34);
  uint64_t v35 = (char *)v69 - v29;
  uint64_t v36 = v84;
  v31(v35, v30, v84);
  sub_10002B120();
  uint64_t v37 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v38 = v87;
  v87[34] = v37;
  __chkstk_darwin(v37);
  sub_100021368();
  uint64_t v39 = static DispatchQoS.userInteractive.getter();
  __chkstk_darwin(v39);
  aBlock = 0;
  uint64_t v40 = dispatch thunk of OptionSet.init(rawValue:)();
  __chkstk_darwin(v40);
  ((void (*)(char *, void, uint64_t))v78)((char *)v69 - v80, v79, v36);
  v38[35] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  v38[36] = 135;
  uint64_t v41 = sub_10002572C(&qword_10021BFB0);
  sub_100024A00();
  v38[37] = sub_100027088((uint64_t)sub_10007FC38);
  sub_100024A00();
  v38[38] = sub_100027088((uint64_t)sub_10007FFB4);
  sub_100024A00();
  v38[39] = sub_100027088((uint64_t)sub_100080218);
  sub_10002572C(&qword_10021BFB8);
  uint64_t v42 = sub_100024A00();
  v38[40] = sub_100027088((uint64_t)sub_100080544);
  id v43 = v72;
  sub_10005CABC((uint64_t)v72);
  static DeviceContextUtil.deviceCountryCode()();
  sub_1000184E8();
  os_log_type_t v44 = (uint64_t *)((char *)v43 + *(int *)(v73 + 88));
  swift_bridgeObjectRelease();
  *os_log_type_t v44 = v42;
  v44[1] = v41;
  static DeviceContextUtil.effectiveSystemLanguage()();
  sub_1000184E8();
  swift_bridgeObjectRelease();
  v43[11] = v42;
  v43[12] = v41;
  static DeviceContextUtil.localeIdentifier()();
  sub_1000184E8();
  swift_bridgeObjectRelease();
  *id v43 = v42;
  v43[1] = v41;
  uint64_t v45 = static DeviceContextUtil.topPreferredLanguages()();
  swift_bridgeObjectRelease();
  v43[13] = v45;
  static DeviceContextUtil.region.getter();
  sub_1000184E8();
  swift_bridgeObjectRelease();
  v43[18] = v45;
  v43[19] = v41;
  uint64_t v46 = (uint64_t)v43;
  uint64_t v47 = (uint64_t)v43;
  uint64_t v48 = v74;
  sub_1000241E4(v46, v74);
  sub_10002572C(&qword_10021BFC0);
  swift_allocObject();
  uint64_t v49 = sub_10010FCAC(v48);
  sub_10003103C(v47, (void (*)(void))type metadata accessor for PegasusContext);
  v38[41] = v49;
  type metadata accessor for ActivityMonitor();
  swift_allocObject();
  sub_1000BB5F8(0, 0);
  sub_10002572C(&qword_10021BFC8);
  swift_allocObject();
  uint64_t v50 = sub_10002B294();
  v38[42] = sub_10010FCC4(v50);
  aBlock = sub_100080AA8;
  uint64_t v90 = 0;
  LOBYTE(v94) = 0;
  sub_10002572C((uint64_t *)&unk_10021BFD0);
  sub_1000262A0();
  v38[43] = sub_10007E380((uint64_t)&aBlock, &qword_10021BE40);
  uint64_t v51 = type metadata accessor for Assembly.Clock();
  uint64_t v52 = swift_allocObject();
  v38[47] = v51;
  v38[48] = &off_1001FD210;
  v38[44] = v52;
  sub_1000073FC();
  swift_unknownObjectRelease();
  sub_10007EB30();
  sub_10001CA50((uint64_t)&aBlock);
  sub_100008694();
  swift_release();
  sub_10007EAB0();
  swift_release();
  sub_100006998();
  swift_release();
  sub_100017C74();
  swift_unknownObjectRelease();
  sub_10007E6FC();
  swift_unknownObjectRelease();
  sub_100006DF8();
  swift_unknownObjectRelease();
  sub_100006B58();
  swift_unknownObjectRelease();
  sub_10000E308();
  swift_unknownObjectRelease();
  sub_10007E7FC();
  swift_unknownObjectRelease();
  uint64_t v85 = v38[33];
  uint64_t v53 = swift_allocObject();
  swift_weakInit();
  uint64_t v93 = sub_100084A60;
  uint64_t v94 = v53;
  aBlock = _NSConcreteStackBlock;
  uint64_t v90 = 1107296256;
  uint64_t v91 = sub_1000085EC;
  id v92 = &unk_1001FD490;
  uint64_t v54 = _Block_copy(&aBlock);
  __chkstk_darwin(v54);
  uint64_t v55 = (char *)v69 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v56 = type metadata accessor for DispatchWorkItemFlags();
  sub_100026808();
  uint64_t v58 = v57;
  __chkstk_darwin(v59);
  sub_10000DFD0();
  uint64_t v62 = v61 - v60;
  uint64_t v88 = _swiftEmptyArrayStorage;
  sub_100085E64((unint64_t *)&qword_100219260, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10002572C((uint64_t *)&unk_10021BAF0);
  sub_100057EEC((unint64_t *)&qword_100219270, (uint64_t *)&unk_10021BAF0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v54);
  (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v62, v56);
  (*(void (**)(char *, uint64_t))(v70 + 8))(v55, v71);
  swift_release();
  swift_release();
  swift_retain();
  swift_retain();
  sub_10002AB9C();
  sub_100027E58();
  swift_release();
  swift_unknownObjectRelease();
  static os_signpost_type_t.begin.getter();
  if (qword_100218B88 != -1) {
    swift_once();
  }
  static OSSignpostID.exclusive.getter();
  sub_100028CFC();
  double v63 = *(void (**)(uint64_t))(v76 + 8);
  uint64_t v64 = sub_100020C8C();
  v63(v64);
  id v65 = [self defaultManager];
  sub_100024344();
  type metadata accessor for ExperimentalFeedbackDatabase();
  swift_allocObject();
  uint64_t v66 = (void *)sub_10002B294();
  _OWORD v38[2] = sub_100068A9C(v66);
  swift_release();
  static os_signpost_type_t.end.getter();
  static OSSignpostID.exclusive.getter();
  sub_100028CFC();
  uint64_t v67 = sub_100020C8C();
  v63(v67);
  return v38;
}

uint64_t sub_10007FB28()
{
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    sub_10007E168();
    swift_release();
    swift_unknownObjectRelease();
  }
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = *(void *)(result + 208);
    swift_unknownObjectRetain();
    uint64_t v2 = swift_retain();
    sub_100085A2C(v2, v1);
    swift_unknownObjectRelease();
    return swift_release_n();
  }
  return result;
}

uint64_t sub_10007FBE8()
{
  swift_retain();
  uint64_t v1 = swift_retain();
  sub_10007E424(v1);
  sub_100027E58();
  swift_release();
  return v0;
}

void sub_10007FC38(void *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = [self ephemeralSessionConfiguration];
  objc_msgSend(v6, "set_expiredDNSBehavior:", 1);
  objc_msgSend(v6, "set_allowsTCPFastOpen:", 1);
  objc_msgSend(v6, "set_allowsTLSSessionTickets:", 1);
  objc_msgSend(v6, "set_timingDataOptions:", 135);
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_10001CAA0(v7, v8, v6, (SEL *)&selRef_set_tlsTrustPinningPolicyName_);
  objc_msgSend(v6, "set_usesNWLoader:", 1);
  objc_msgSend(v6, "set_disableAPWakeOnIdleConnections:", 1);
  [v6 setMultipathServiceType:1];
  objc_msgSend(v6, "set_allowsHTTP3:", 1);
  objc_msgSend(v6, "set_allowsTLSSessionResumption:", 1);
  sub_100017C74();
  uint64_t v9 = (void *)sub_100016A0C();
  swift_unknownObjectRelease();
  if (v9)
  {
    id v10 = [v9 enablesL4S];
  }
  else
  {
    id v10 = 0;
  }
  objc_msgSend(v6, "set_enablesL4S:", v10);
  id v11 = [self sessionWithConfiguration:v6];
  uint64_t v22 = 0;
  uint64_t v23 = 0xE000000000000000;
  _StringGuts.grow(_:)(40);
  swift_bridgeObjectRelease();
  uint64_t v22 = 0xD000000000000020;
  uint64_t v23 = 0x80000001001B4E70;
  unsigned int v12 = [v6 _enablesL4S];
  BOOL v13 = v12 == 0;
  if (v12) {
    uint64_t v14 = 1702195828;
  }
  else {
    uint64_t v14 = 0x65736C6166;
  }
  if (v13) {
    unint64_t v15 = 0xE500000000000000;
  }
  else {
    unint64_t v15 = 0xE400000000000000;
  }
  unint64_t v16 = v15;
  String.append(_:)(*(Swift::String *)&v14);
  swift_bridgeObjectRelease();
  v17._uint64_t countAndFlagsBits = 539828265;
  v17._object = (void *)0xE400000000000000;
  String.append(_:)(v17);
  UUID.init()();
  uint64_t v18 = UUID.uuidString.getter();
  uint64_t v20 = v19;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v21._uint64_t countAndFlagsBits = v18;
  v21._object = v20;
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  sub_10001CAA0(v22, v23, v11, (SEL *)&selRef_setSessionDescription_);

  *a1 = v11;
}

uint64_t sub_10007FF64()
{
  swift_retain();
  uint64_t v1 = swift_retain();
  sub_10007E424(v1);
  sub_100027E58();
  swift_release();
  return v0;
}

void sub_10007FFB4(void *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = [self ephemeralSessionConfiguration];
  objc_msgSend(v6, "set_timingDataOptions:", 135);
  [v6 setWaitsForConnectivity:1];
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_10001CAA0(v7, v8, v6, (SEL *)&selRef_set_tlsTrustPinningPolicyName_);
  objc_msgSend(v6, "set_usesNWLoader:", 1);
  objc_msgSend(v6, "set_disableAPWakeOnIdleConnections:", 1);
  id v9 = [self sessionWithConfiguration:v6];
  uint64_t v14 = 0;
  uint64_t v15 = 0xE000000000000000;
  _StringGuts.grow(_:)(28);
  swift_bridgeObjectRelease();
  uint64_t v14 = 0xD00000000000001ALL;
  uint64_t v15 = 0x80000001001B4E50;
  UUID.init()();
  uint64_t v10 = UUID.uuidString.getter();
  unsigned int v12 = v11;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v13._uint64_t countAndFlagsBits = v10;
  v13._object = v12;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  sub_10001CAA0(v14, v15, v9, (SEL *)&selRef_setSessionDescription_);

  *a1 = v9;
}

uint64_t sub_1000801C8()
{
  swift_retain();
  uint64_t v1 = swift_retain();
  sub_10007E424(v1);
  sub_100027E58();
  swift_release();
  return v0;
}

void sub_100080218(void *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = self;
  NSString v7 = String._bridgeToObjectiveC()();
  id v8 = [v6 backgroundSessionConfigurationWithIdentifier:v7];

  [v8 setHTTPCookieStorage:0];
  [v8 setURLCache:0];
  [v8 setDiscretionary:1];
  objc_msgSend(v8, "set_sessionSendsLaunchOnDemandEvents:", 1);
  objc_msgSend(v8, "set_allowsExpensiveAccess:", 0);
  [v8 setNetworkServiceType:3];
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_10001CAA0(v9, v10, v8, (SEL *)&selRef_set_tlsTrustPinningPolicyName_);
  objc_msgSend(v8, "set_usesNWLoader:", 1);
  objc_msgSend(v8, "set_disableAPWakeOnIdleConnections:", 1);
  sub_100023FA0(0, &qword_10021BE58);
  id v11 = v8;
  uint64_t v12 = sub_100006DF8();
  id v13 = sub_1000804D4(v11, v12, 0);
  uint64_t v18 = 0;
  uint64_t v19 = 0xE000000000000000;
  _StringGuts.grow(_:)(33);
  swift_bridgeObjectRelease();
  uint64_t v18 = 0xD00000000000001FLL;
  uint64_t v19 = 0x80000001001B4E30;
  UUID.init()();
  uint64_t v14 = UUID.uuidString.getter();
  unint64_t v16 = v15;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v17._uint64_t countAndFlagsBits = v14;
  v17._object = v16;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  sub_10001CAA0(v18, v19, v13, (SEL *)&selRef_setSessionDescription_);

  *a1 = v13;
}

id sub_1000804D4(void *a1, uint64_t a2, void *a3)
{
  id v5 = [(id)swift_getObjCClassFromMetadata() sessionWithConfiguration:a1 delegate:a2 delegateQueue:a3];

  swift_unknownObjectRelease();
  return v5;
}

uint64_t sub_100080544@<X0>(void *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for OSSignpostID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  id v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  static os_signpost_type_t.begin.getter();
  if (qword_100218B88 != -1) {
    swift_once();
  }
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  id v6 = *(void (**)(char *, uint64_t))(v3 + 8);
  v6(v5, v2);
  type metadata accessor for ContextManager();
  NSString v7 = (void *)swift_allocObject();
  uint64_t v8 = swift_retain();
  *a1 = sub_100083EDC(v8, 60, (void (*)(char *, uint64_t))0x384, v7);
  a1[1] = &off_1002008C0;
  static os_signpost_type_t.end.getter();
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  return ((uint64_t (*)(char *, uint64_t))v6)(v5, v2);
}

uint64_t sub_10008071C(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for PegasusContext(0);
  __chkstk_darwin(v3 - 8);
  sub_100016500();
  sub_1000241E4(a1, v1);
  swift_retain();
  sub_10000A474();
  swift_release();
  return sub_10003103C(a1, (void (*)(void))type metadata accessor for PegasusContext);
}

uint64_t sub_1000807E0()
{
  sub_10001DDB0();
  sub_10002C22C();
  uint64_t v2 = *(void *)(v1 + 16);
  os_unfair_lock_unlock(v0);
  return v2;
}

void *sub_10008081C()
{
  sub_10001DDB0();
  sub_10002C22C();
  uint64_t v2 = *(void **)(v1 + 16);
  id v3 = v2;
  os_unfair_lock_unlock(v0);
  return v2;
}

double sub_10008085C()
{
  sub_10001DDB0();
  sub_10002C22C();
  double v2 = *(double *)(v1 + 16);
  os_unfair_lock_unlock(v0);
  return v2;
}

uint64_t sub_1000808A0()
{
  sub_10001DDB0();
  sub_10002C22C();
  uint64_t v2 = *(unsigned int *)(v1 + 16);
  os_unfair_lock_unlock(v0);
  return v2;
}

void sub_1000808DC()
{
  sub_100017E10();
  uint64_t v2 = *(os_unfair_lock_s **)(v0 + *(void *)(v1 + 96));
  os_unfair_lock_lock(v2);
  sub_100017E10();
  sub_100025214();
  type metadata accessor for Date();
  sub_10001DCF8();
  uint64_t v3 = sub_100026078();
  v4(v3);
  os_unfair_lock_unlock(v2);
}

uint64_t sub_10008096C()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 32);
  os_unfair_lock_lock(v1);
  sub_10002C22C();
  uint64_t v2 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v1);
  return v2;
}

uint64_t sub_1000809C4()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 40);
  os_unfair_lock_lock(v1);
  sub_10002C22C();
  swift_bridgeObjectRetain();
  os_unfair_lock_unlock(v1);
  return sub_100027528();
}

uint64_t sub_100080A20()
{
  sub_10002B904();
  swift_retain();
  uint64_t v0 = swift_retain();
  sub_100019B6C(v0, &qword_10021BE40, (uint64_t (*)(void (**)(void), uint64_t))sub_10001C1AC, &qword_10021BE48, &qword_10021BE50);
  swift_release();

  return swift_release();
}

void sub_100080AA8(uint64_t *a1@<X8>)
{
  id v2 = [self defaultManager];
  uint64_t v3 = type metadata accessor for PegasusConfigURLProvider();
  a1[3] = v3;
  a1[4] = (uint64_t)&protocol witness table for PegasusConfigURLProvider;
  uint64_t v4 = sub_10002E5E8(a1);
  *uint64_t v4 = (uint64_t)v2;
  uint64_t v5 = (uint64_t)v4 + *(int *)(v3 + 20);
  id v6 = v2;
  static PegasusConfigURLProvider.getPegasusConfigCacheDirectoryURL(fileManager:)((uint64_t)v6, v5);
}

uint64_t sub_100080B4C(uint64_t a1, unint64_t a2, int *a3, uint64_t a4, uint64_t a5)
{
  id v11 = *(NSObject **)(v5 + 272);
  uint64_t v12 = (void *)swift_allocObject();
  v12[2] = a1;
  void v12[3] = a2;
  void v12[4] = a4;
  void v12[5] = a5;
  void aBlock[4] = (uint64_t)sub_100083CB8;
  aBlock[5] = (uint64_t)v12;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  uint64_t aBlock[2] = (uint64_t)sub_10007E308;
  id aBlock[3] = (uint64_t)&unk_1001FD418;
  id v13 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  uint64_t v14 = String.utf8CString.getter();
  uint64_t v15 = notify_register_dispatch((const char *)(v14 + 32), a3, v11, v13);
  swift_release();
  _Block_release(v13);
  if (v15)
  {
    if (qword_100218B78 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    sub_10002A10C(v16, (uint64_t)qword_100236A80);
    swift_bridgeObjectRetain_n();
    Swift::String v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v19 = 136315394;
      swift_bridgeObjectRetain();
      sub_10001C274(a1, a2, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v19 + 1sub_100034730((uint64_t)"SIGTERM", 7, 2) = 1024;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Unable to register for %s notifications: %u", (uint8_t *)v19, 0x12u);
      swift_arrayDestroy();
      sub_100017D40();
      sub_100017D40();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
  return v15;
}

uint64_t sub_100080DE8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t (*a4)(uint64_t))
{
  if (qword_100218B78 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_10002A10C(v8, (uint64_t)qword_100236A80);
  swift_bridgeObjectRetain_n();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    id v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    *(_DWORD *)id v11 = 136315138;
    swift_bridgeObjectRetain();
    sub_10001C274(a2, a3, &v13);
    a1 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Received %s notification", v11, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  return a4(a1);
}

void sub_100080FCC()
{
  sub_100024344();
  uint64_t v2 = type metadata accessor for UserAgent();
  sub_100026808();
  uint64_t v4 = v3;
  __chkstk_darwin(v5);
  sub_100016500();
  id v6 = objc_allocWithZone((Class)_CPErrorFeedback);
  id v7 = v0;
  id v10 = sub_100083BF8((uint64_t)v0);
  id v8 = [objc_allocWithZone((Class)_CPFeedbackPayload) initWithCodable:v10];
  [v8 setQueryId:0];
  if (v8)
  {
    sub_10007E75C();
    id v9 = v8;
    parsecdUserAgent.getter();
    sub_1000148D0();

    swift_unknownObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v2);
  }
  else
  {
  }
}

void sub_100081124()
{
  sub_100023FA0(0, (unint64_t *)&unk_10021BF10);
  swift_errorRetain();
  id v0 = sub_100102368();
  sub_100023FA0(0, &qword_10021CD30);
  id v1 = v0;
  id v2 = sub_1000E515C(v1, 0);
  sub_10002572C((uint64_t *)&unk_10021BF20);
  OS_dispatch_queue.sync<A>(execute:)();
}

void sub_10008120C(void *a1@<X1>, BOOL *a2@<X8>)
{
  uint64_t v4 = sub_10002572C(&qword_100219ED0);
  __chkstk_darwin(v4 - 8);
  id v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UserAgent();
  __chkstk_darwin(v7 - 8);
  uint64_t v8 = type metadata accessor for SessionType();
  __chkstk_darwin(v8);
  (*(void (**)(char *, void))(v10 + 104))((char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), enum case for SessionType.parsecd(_:));
  parsecdUserAgent.getter();
  uint64_t v11 = type metadata accessor for SessionTokens(0);
  sub_10002538C((uint64_t)v6, 1, 1, v11);
  type metadata accessor for ClientSession(0);
  swift_allocObject();
  id v12 = a1;
  swift_retain();
  sub_100013318();
  uint64_t v14 = v13;
  if (v13)
  {
    sub_1000487DC();
    swift_release();
  }
  *a2 = v14 == 0;
}

uint64_t sub_100081400()
{
  swift_retain();
  swift_retain();
  sub_10002AB9C();
  sub_100027E58();
  swift_release();
  sub_1000E6E24(0, 0);
  swift_unknownObjectRelease();
  sub_100006B58();
  sub_100112164();

  return swift_unknownObjectRelease();
}

id sub_10008149C@<X0>(void *a1@<X8>)
{
  sub_100023FA0(0, &qword_10021BEB0);
  sub_10000E090();
  sub_100009C80(0xD000000000000014, v2, 0);
  sub_100024344();
  uint64_t v3 = (objc_class *)type metadata accessor for FlusherClient();
  id v4 = objc_allocWithZone(v3);
  uint64_t v5 = (void *)sub_10002B294();
  id result = FlusherClient.init(connection:)(v5);
  a1[3] = v3;
  a1[4] = &off_100200C00;
  *a1 = result;
  return result;
}

uint64_t sub_100081524()
{
  swift_retain();
  swift_retain();
  sub_10002AB9C();
  uint64_t v1 = v0;
  swift_release();
  swift_release();
  uint64_t v2 = sub_100027528();
  uint64_t v4 = sub_1000815C0(v2, v3, v1);
  swift_unknownObjectRelease();
  return v4;
}

uint64_t sub_1000815C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10002572C(&qword_10021BF30);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for SessionLookupKey();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  uint64_t v12 = __chkstk_darwin(v9 - 8);
  uint64_t v13 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v15 = (uint64_t)&v22 - v14;
  sub_1000241E4(a1, (uint64_t)&v22 - v14);
  sub_1000241E4(v15, (uint64_t)v13);
  unint64_t v16 = (*(unsigned __int8 *)(v10 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v17 = swift_allocObject();
  sub_100085EAC(v15, v17 + v16);
  parsecdUserAgent.getter();
  uint64_t v18 = type metadata accessor for UserAgent();
  sub_10002538C((uint64_t)v8, 0, 1, v18);
  LOBYTE(v15) = sub_100081A24(a2, a3, (uint64_t)v8, (uint64_t)v13);
  sub_100085FD4((uint64_t)v8, &qword_10021BF30);
  sub_10003103C((uint64_t)v13, (void (*)(void))type metadata accessor for SessionLookupKey);
  if (v15)
  {
    swift_release();
    swift_unknownObjectRetain();
  }
  else
  {
    uint64_t v19 = sub_100006B58();
    __chkstk_darwin(v19);
    *(&v22 - sub_100034730((uint64_t)"SIGTERM", 7, 2) = (uint64_t)sub_10008493C;
    *(&v22 - 1) = v17;
    uint64_t v20 = sub_100112218();
    swift_release();
    swift_unknownObjectRelease();
    if (v20)
    {
      a2 = *(void *)(v20 + 64);
      swift_unknownObjectRetain();
      swift_release();
    }
    else
    {
      return 0;
    }
  }
  return a2;
}

id *sub_100081878()
{
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  sub_100085FD4((uint64_t)(v0 + 15), &qword_10021DE00);
  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_10001CA50((uint64_t)(v0 + 44));
  return v0;
}

uint64_t sub_1000819A8()
{
  sub_100081878();

  return _swift_deallocClassInstance(v0, 392, 7);
}

uint64_t type metadata accessor for Assembly()
{
  return self;
}

uint64_t type metadata accessor for Assembly.Clock()
{
  return self;
}

uint64_t sub_100081A24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v55 = (char *)a4;
  uint64_t v53 = a3;
  uint64_t v51 = a1;
  uint64_t v52 = sub_10002572C(&qword_10021BF38);
  __chkstk_darwin(v52);
  uint64_t v54 = (uint64_t)&v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10002572C(&qword_10021BF30);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  uint64_t v49 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v47 - v8;
  uint64_t v56 = type metadata accessor for UserAgent();
  uint64_t v50 = *(void *)(v56 - 8);
  uint64_t v10 = __chkstk_darwin(v56);
  uint64_t v12 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v47 - v13;
  uint64_t v48 = type metadata accessor for SessionTokens(0);
  __chkstk_darwin(v48);
  unint64_t v16 = (char *)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for UUID();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = __chkstk_darwin(v17);
  Swift::String v21 = (char *)&v47 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v47 - v22;
  uint64_t v24 = type metadata accessor for SessionLookupKey();
  __chkstk_darwin(v24);
  uint64_t v26 = (char *)&v47 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000241E4((uint64_t)v55, (uint64_t)v26);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v23, v26, v17);
    sub_10003093C((uint64_t)v16);
    (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v21, &v16[*(int *)(v48 + 20)], v17);
    sub_10003103C((uint64_t)v16, (void (*)(void))type metadata accessor for SessionTokens);
    char v38 = static UUID.== infix(_:_:)();
    uint64_t v39 = *(void (**)(char *, uint64_t))(v18 + 8);
    v39(v21, v17);
    v39(v23, v17);
    return v38 & 1;
  }
  uint64_t v55 = v12;
  uint64_t v27 = (uint64_t)v49;
  uint64_t v28 = v50;
  unint64_t v29 = *(void (**)(char *, char *, uint64_t))(v50 + 32);
  uint64_t v30 = v26;
  uint64_t v31 = v56;
  v29(v14, v30, v56);
  (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v9, v14, v31);
  sub_10002538C((uint64_t)v9, 0, 1, v31);
  uint64_t v32 = v54;
  uint64_t v33 = v54 + *(int *)(v52 + 48);
  sub_1000323F0(v53, v54, &qword_10021BF30);
  sub_1000323F0((uint64_t)v9, v33, &qword_10021BF30);
  int v34 = sub_100027BA4(v32, 1, v31);
  uint64_t v35 = v28;
  uint64_t v36 = v14;
  if (v34 != 1)
  {
    sub_1000323F0(v32, v27, &qword_10021BF30);
    if (sub_100027BA4(v33, 1, v56) != 1)
    {
      uint64_t v43 = (uint64_t)v55;
      uint64_t v44 = v56;
      v29(v55, (char *)v33, v56);
      sub_100085F54((unint64_t *)&unk_10021BF40, (void (*)(uint64_t))&type metadata accessor for UserAgent);
      char v38 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v45 = *(void (**)(uint64_t, uint64_t))(v35 + 8);
      v45(v43, v44);
      sub_100085FD4((uint64_t)v9, &qword_10021BF30);
      v45((uint64_t)v36, v44);
      v45(v27, v44);
      sub_100085FD4(v32, &qword_10021BF30);
      return v38 & 1;
    }
    sub_100085FD4((uint64_t)v9, &qword_10021BF30);
    uint64_t v40 = *(void (**)(char *, uint64_t))(v35 + 8);
    uint64_t v41 = v14;
    uint64_t v42 = v56;
    v40(v41, v56);
    v40((char *)v27, v42);
    goto LABEL_8;
  }
  sub_100085FD4((uint64_t)v9, &qword_10021BF30);
  uint64_t v37 = v56;
  (*(void (**)(char *, uint64_t))(v35 + 8))(v14, v56);
  if (sub_100027BA4(v33, 1, v37) != 1)
  {
LABEL_8:
    sub_100085FD4(v32, &qword_10021BF38);
    char v38 = 0;
    return v38 & 1;
  }
  sub_100085FD4(v32, &qword_10021BF30);
  char v38 = 1;
  return v38 & 1;
}

uint64_t sub_100082040(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, char *))
{
  uint64_t v4 = sub_10002572C(&qword_10021BF30);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v8 = *(void *)(a1 + 72);
  swift_unknownObjectRetain();
  sub_100032384();
  char v9 = a2(v7, v8, v6);
  swift_unknownObjectRelease();
  sub_100085FD4((uint64_t)v6, &qword_10021BF30);
  return v9 & 1;
}

void sub_100082118()
{
  sub_10002AFF0();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = (os_unfair_lock_s *)v0[4];
  os_unfair_lock_lock(v5);
  sub_10002590C();
  v0[2] = v4;
  v0[3] = v2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  os_unfair_lock_unlock(v5);
  swift_bridgeObjectRelease();
  sub_100028890();
}

void sub_100082184(double a1)
{
  sub_10001DDB0();
  sub_10002590C();
  *(double *)(v2 + 16) = a1;
  os_unfair_lock_unlock(v1);
}

uint64_t sub_1000821C8()
{
  sub_10002643C();
  sub_10002590C();
  *(void *)(v1 + 16) = v0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  os_unfair_lock_unlock(v2);
  return swift_bridgeObjectRelease();
}

void sub_100082224(int a1)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 24);
  os_unfair_lock_lock(v3);
  sub_10002590C();
  *(_DWORD *)(v1 + 16) = a1;
  os_unfair_lock_unlock(v3);
}

void sub_100082270()
{
  sub_10002AFF0();
  uint64_t v2 = v1;
  sub_100017E10();
  uint64_t v4 = *(os_unfair_lock_s **)(v0 + *(void *)(v3 + 96));
  os_unfair_lock_lock(v4);
  sub_100017E10();
  uint64_t v6 = v0 + *(void *)(v5 + 88);
  sub_10002AD10();
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 24))(v6, v2, v7);
  swift_endAccess();
  os_unfair_lock_unlock(v4);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v2, v7);
  sub_100028890();
}

void sub_100082354()
{
  sub_10002AFF0();
  char v4 = v3;
  sub_100028424();
  uint64_t v5 = *(os_unfair_lock_s **)(v0 + 40);
  os_unfair_lock_lock(v5);
  sub_10002590C();
  *(void *)(v0 + 16) = v2;
  *(void *)(v0 + 24) = v1;
  *(unsigned char *)(v0 + 3sub_100034730((uint64_t)"SIGTERM", 7, 2) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  os_unfair_lock_unlock(v5);
  swift_bridgeObjectRelease();
  sub_100028890();
}

void sub_1000823C4()
{
  sub_10002643C();
  sub_10002590C();
  *(void *)(v1 + 16) = v0;
  os_unfair_lock_unlock(v2);
}

uint64_t sub_100082404@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for BiomeDatabaseManager();
  memset(v5, 0, sizeof(v5));
  uint64_t v6 = 0;
  uint64_t v2 = swift_allocObject();
  uint64_t v3 = swift_retain();
  uint64_t result = sub_100084A68(v3, (uint64_t)v5, v2);
  *a1 = result;
  return result;
}

uint64_t sub_100082474@<X0>(char **a1@<X8>)
{
  uint64_t v2 = type metadata accessor for OSSignpostID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  static os_signpost_type_t.begin.getter();
  if (qword_100218B88 != -1) {
    swift_once();
  }
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  uint64_t v6 = *(void (**)(char *, uint64_t))(v3 + 8);
  v6(v5, v2);
  uint64_t v7 = (char *)objc_allocWithZone((Class)type metadata accessor for LocationManager());
  uint64_t v8 = swift_retain();
  *a1 = sub_100084BE8(v8, 0, 0, v7);
  a1[1] = (char *)&off_1001FCF48;
  static os_signpost_type_t.end.getter();
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  return ((uint64_t (*)(char *, uint64_t))v6)(v5, v2);
}

uint64_t sub_100082644@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for OSSignpostID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  static os_signpost_type_t.begin.getter();
  if (qword_100218B88 != -1) {
    swift_once();
  }
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  uint64_t v6 = *(void (**)(char *, uint64_t))(v3 + 8);
  v6(v5, v2);
  type metadata accessor for ConfigurationController();
  uint64_t v7 = swift_allocObject();
  uint64_t v8 = swift_retain();
  *a1 = sub_1000852A4(v8, v7);
  a1[1] = (uint64_t)&off_100200EA0;
  static os_signpost_type_t.end.getter();
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  return ((uint64_t (*)(char *, uint64_t))v6)(v5, v2);
}

uint64_t sub_100082814@<X0>(id *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for OSSignpostID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  static os_signpost_type_t.begin.getter();
  if (qword_100218B88 != -1) {
    swift_once();
  }
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  uint64_t v6 = *(void (**)(char *, uint64_t))(v3 + 8);
  v6(v5, v2);
  uint64_t v7 = (char *)objc_allocWithZone((Class)type metadata accessor for DownloadManager());
  uint64_t v8 = swift_retain();
  *a1 = sub_1000854E8(v8, v7);
  a1[1] = &off_1001FE040;
  static os_signpost_type_t.end.getter();
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  return ((uint64_t (*)(char *, uint64_t))v6)(v5, v2);
}

uint64_t sub_1000829DC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for OSSignpostID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  static os_signpost_type_t.begin.getter();
  if (qword_100218B88 != -1) {
    swift_once();
  }
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  uint64_t v6 = *(void (**)(char *, uint64_t))(v3 + 8);
  v6(v5, v2);
  type metadata accessor for ClientStateManager();
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 24) = 0;
  swift_unknownObjectWeakInit();
  *(void *)(v7 + 24) = &off_1001FD220;
  swift_unknownObjectWeakAssign();
  type metadata accessor for SessionType();
  type metadata accessor for ClientState();
  sub_100085F54((unint64_t *)&qword_1002197A0, (void (*)(uint64_t))&type metadata accessor for SessionType);
  uint64_t v8 = Dictionary.init(dictionaryLiteral:)();
  sub_10002572C(&qword_10021C028);
  uint64_t v9 = swift_allocObject();
  *(_DWORD *)(v9 + 24) = 0;
  *(void *)(v9 + 16) = v8;
  *(void *)(v7 + 3sub_100034730((uint64_t)"SIGTERM", 7, 2) = v9;
  *a1 = v7;
  a1[1] = (uint64_t)&off_100201AF8;
  static os_signpost_type_t.end.getter();
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  return ((uint64_t (*)(char *, uint64_t))v6)(v5, v2);
}

uint64_t sub_100082C50@<X0>(void *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for OSSignpostID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  static os_signpost_type_t.begin.getter();
  if (qword_100218B88 != -1) {
    swift_once();
  }
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  uint64_t v6 = *(void (**)(char *, uint64_t))(v3 + 8);
  v6(v5, v2);
  type metadata accessor for ClientSessionManager();
  memset(v9, 0, sizeof(v9));
  uint64_t v10 = 0;
  swift_allocObject();
  swift_retain();
  sub_1000DF83C();
  *a1 = v7;
  a1[1] = &off_1002000D0;
  static os_signpost_type_t.end.getter();
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  return ((uint64_t (*)(char *, uint64_t))v6)(v5, v2);
}

uint64_t sub_100082E48@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for OSSignpostID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  static os_signpost_type_t.begin.getter();
  if (qword_100218B88 != -1) {
    swift_once();
  }
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  uint64_t v6 = *(void (**)(char *, uint64_t))(v3 + 8);
  v6(v5, v2);
  type metadata accessor for ParsecPersistentStorage();
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 24) = 0;
  swift_unknownObjectWeakInit();
  *(unsigned char *)(v7 + 40) = 1;
  *(void *)(v7 + 24) = &off_1001FD220;
  *(void *)(v7 + 3sub_100034730((uint64_t)"SIGTERM", 7, 2) = 0;
  swift_unknownObjectWeakAssign();
  *a1 = v7;
  a1[1] = (uint64_t)&off_1002018F8;
  static os_signpost_type_t.end.getter();
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  return ((uint64_t (*)(char *, uint64_t))v6)(v5, v2);
}

uint64_t sub_100083034@<X0>(void *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for OSSignpostID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  static os_signpost_type_t.begin.getter();
  if (qword_100218B88 != -1) {
    swift_once();
  }
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  uint64_t v6 = *(void (**)(char *, uint64_t))(v3 + 8);
  v6(v5, v2);
  type metadata accessor for VisibilityManager();
  uint64_t v7 = (void *)swift_allocObject();
  uint64_t v8 = swift_retain();
  *a1 = sub_100085838(v8, v7);
  a1[1] = &off_1001FC358;
  static os_signpost_type_t.end.getter();
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  return ((uint64_t (*)(char *, uint64_t))v6)(v5, v2);
}

uint64_t sub_100083204@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = sub_100010DE0();
  id v3 = [self defaultManager];
  uint64_t v4 = type metadata accessor for DevicePersistentDataManager();
  swift_allocObject();
  uint64_t result = sub_1000B436C(v2, (uint64_t)v3);
  a1[3] = v4;
  a1[4] = (uint64_t)&off_1001FE578;
  *a1 = result;
  return result;
}

uint64_t sub_100083298@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for OSSignpostID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  static os_signpost_type_t.begin.getter();
  if (qword_100218B88 != -1) {
    swift_once();
  }
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  uint64_t v6 = *(void (**)(char *, uint64_t))(v3 + 8);
  v6(v5, v2);
  type metadata accessor for TrialExperimentsProvider();
  uint64_t v7 = swift_allocObject();
  sub_10002572C((uint64_t *)&unk_10021C018);
  swift_allocObject();
  swift_retain();
  *(void *)(v7 + 16) = sub_10010FD9C(0);
  *(void *)(v7 + 3sub_100034730((uint64_t)"SIGTERM", 7, 2) = 0;
  swift_unknownObjectWeakInit();
  *(void *)(v7 + 48) = 0;
  *(void *)(v7 + 56) = 0;
  sub_10007EA44();
  *(void *)(v7 + 3sub_100034730((uint64_t)"SIGTERM", 7, 2) = v8;
  swift_unknownObjectWeakAssign();
  swift_unknownObjectRelease();
  *(_DWORD *)(v7 + 40) = 2;
  sub_100075DE4();
  sub_1000753D0();
  swift_release();
  *a1 = v7;
  static os_signpost_type_t.end.getter();
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  return ((uint64_t (*)(char *, uint64_t))v6)(v5, v2);
}

uint64_t sub_1000834DC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for OSSignpostID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  static os_signpost_type_t.begin.getter();
  if (qword_100218B88 != -1) {
    swift_once();
  }
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  uint64_t v6 = *(void (**)(char *, uint64_t))(v3 + 8);
  v6(v5, v2);
  type metadata accessor for TrialExperimentsProvider();
  uint64_t v7 = swift_allocObject();
  sub_10002572C((uint64_t *)&unk_10021C018);
  swift_allocObject();
  swift_retain();
  *(void *)(v7 + 16) = sub_10010FD9C(0);
  *(void *)(v7 + 3sub_100034730((uint64_t)"SIGTERM", 7, 2) = 0;
  swift_unknownObjectWeakInit();
  *(void *)(v7 + 48) = 0;
  *(void *)(v7 + 56) = 0;
  sub_10007EA44();
  *(void *)(v7 + 3sub_100034730((uint64_t)"SIGTERM", 7, 2) = v8;
  swift_unknownObjectWeakAssign();
  swift_unknownObjectRelease();
  *(_DWORD *)(v7 + 40) = 3;
  sub_100075DE4();
  sub_1000753D0();
  swift_release();
  *a1 = v7;
  static os_signpost_type_t.end.getter();
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  return ((uint64_t (*)(char *, uint64_t))v6)(v5, v2);
}

uint64_t sub_100083720@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for OSSignpostID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  static os_signpost_type_t.begin.getter();
  if (qword_100218B88 != -1) {
    swift_once();
  }
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  uint64_t v6 = *(void (**)(char *, uint64_t))(v3 + 8);
  v6(v5, v2);
  type metadata accessor for TrialExperimentsProvider();
  uint64_t v7 = swift_allocObject();
  sub_10002572C((uint64_t *)&unk_10021C018);
  swift_allocObject();
  swift_retain();
  *(void *)(v7 + 16) = sub_10010FD9C(0);
  *(void *)(v7 + 3sub_100034730((uint64_t)"SIGTERM", 7, 2) = 0;
  swift_unknownObjectWeakInit();
  *(void *)(v7 + 48) = 0;
  *(void *)(v7 + 56) = 0;
  sub_10007EA44();
  *(void *)(v7 + 3sub_100034730((uint64_t)"SIGTERM", 7, 2) = v8;
  swift_unknownObjectWeakAssign();
  swift_unknownObjectRelease();
  *(_DWORD *)(v7 + 40) = 0;
  sub_100075DE4();
  sub_1000753D0();
  swift_release();
  *a1 = v7;
  static os_signpost_type_t.end.getter();
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  return ((uint64_t (*)(char *, uint64_t))v6)(v5, v2);
}

uint64_t sub_100083960@<X0>(void *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for OSSignpostID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  static os_signpost_type_t.begin.getter();
  if (qword_100218B88 != -1) {
    swift_once();
  }
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  uint64_t v6 = *(void (**)(char *, uint64_t))(v3 + 8);
  v6(v5, v2);
  uint64_t v7 = type metadata accessor for AMSBaselineTreatmentProvider();
  uint64_t v8 = (void *)swift_allocObject();
  uint64_t v9 = swift_retain();
  uint64_t v10 = sub_10008598C(v9, 0x65735F6563696F76, 0xEC00000068637261, v8);
  a1[3] = v7;
  a1[4] = &off_1001FE4A8;
  *a1 = v10;
  static os_signpost_type_t.end.getter();
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  return ((uint64_t (*)(char *, uint64_t))v6)(v5, v2);
}

char *sub_100083B54@<X0>(uint64_t *a1@<X0>, char **a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;
  uint64_t v7 = *(void **)(v3 + 264);
  uint64_t v8 = (objc_class *)type metadata accessor for CloudNotificationChannelConnection();
  id v9 = objc_allocWithZone(v8);
  uint64_t result = sub_100071558(v4, v6, 0xD000000000000011, 0x80000001001B08B0, v7);
  a2[3] = (char *)v8;
  a2[4] = (char *)&off_1001FCA30;
  *a2 = result;
  return result;
}

id sub_100083BF8(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = (void *)_convertErrorToNSError(_:)();
    swift_errorRelease();
  }
  else
  {
    uint64_t v2 = 0;
  }
  id v3 = [v1 initWithError:v2];

  return v3;
}

void sub_100083C5C(void *a1, uint64_t a2, char a3)
{
  if (a3) {

  }
  else {
    swift_release();
  }
}

uint64_t sub_100083C6C()
{
  return swift_release();
}

uint64_t sub_100083C78()
{
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100083CB8(uint64_t a1)
{
  return sub_100080DE8(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(uint64_t (**)(uint64_t))(v1 + 32));
}

uint64_t sub_100083CC4()
{
  return sub_10004DEE0();
}

void sub_100083EC0(BOOL *a1@<X8>)
{
  sub_10008120C(*(void **)(v1 + 24), a1);
}

void *sub_100083EDC(uint64_t a1, uint64_t a2, void (*a3)(char *, uint64_t), void *a4)
{
  uint64_t v45 = a2;
  uint64_t v46 = a3;
  uint64_t v50 = a1;
  uint64_t v5 = type metadata accessor for PegasusContext(0);
  __chkstk_darwin(v5 - 8);
  uint64_t v47 = (uint64_t)v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for OSSignpostID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v48 = v7;
  uint64_t v49 = v8;
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  a4[3] = 0;
  a4[5] = 0;
  uint64_t v44 = a4 + 4;
  swift_unknownObjectWeakInit();
  type metadata accessor for Locker();
  uint64_t v11 = swift_allocObject();
  uint64_t v12 = (_DWORD *)swift_slowAlloc();
  *(void *)(v11 + 16) = v12;
  *uint64_t v12 = 0;
  a4[6] = v11;
  uint64_t v13 = OBJC_IVAR____TtC7parsecd14ContextManager_locker;
  uint64_t v14 = swift_allocObject();
  uint64_t v15 = (_DWORD *)swift_slowAlloc();
  *(void *)(v14 + 16) = v15;
  *uint64_t v15 = 0;
  *(void *)((char *)a4 + v1sub_100034730((uint64_t)"SIGINT", 6, 3) = v14;
  unint64_t v16 = (char *)a4 + OBJC_IVAR____TtC7parsecd14ContextManager_logger;
  if (qword_100218B78 != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  uint64_t v18 = sub_10002A10C(v17, (uint64_t)qword_100236A80);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v17 - 8) + 16))(v16, v18, v17);
  uint64_t v43 = OBJC_IVAR____TtC7parsecd14ContextManager_contextAccessQueue;
  v42[3] = sub_100023FA0(0, (unint64_t *)&qword_100219250);
  uint64_t v19 = type metadata accessor for DispatchQoS();
  v42[4] = v42;
  __chkstk_darwin(v19 - 8);
  static DispatchQoS.userInteractive.getter();
  uint64_t v20 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  v42[2] = v42;
  __chkstk_darwin(v20);
  (*(void (**)(char *, void))(v22 + 104))((char *)v42 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0), enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:));
  uint64_t v23 = type metadata accessor for OS_dispatch_queue.Attributes();
  v42[1] = v42;
  __chkstk_darwin(v23);
  uint64_t v51 = _swiftEmptyArrayStorage;
  sub_100085E64((unint64_t *)&qword_10021BFF0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10002572C(&qword_10021A2E0);
  sub_100057EEC((unint64_t *)&qword_10021C000, &qword_10021A2E0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  *(void *)((char *)a4 + v4sub_100034730((uint64_t)"SIGINT", 6, 3) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(void *)((char *)a4 + OBJC_IVAR____TtC7parsecd14ContextManager__parsecSubscriptionManager) = 0;
  *(void *)((char *)a4 + OBJC_IVAR____TtC7parsecd14ContextManager__contextProviderInterface) = 0;
  *(void *)((char *)a4 + OBJC_IVAR____TtC7parsecd14ContextManager_notBagFetchableSpan) = 0;
  uint64_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v26 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v26 = 0;
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "ContextManager is created", v26, 2u);
    swift_slowDealloc();
  }

  a4[2] = sub_100010DE0();
  static os_signpost_type_t.begin.getter();
  if (qword_100218B90 != -1) {
    swift_once();
  }
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  uint64_t v27 = v48;
  uint64_t v28 = v49 + 8;
  unint64_t v29 = *(void (**)(char *, uint64_t))(v49 + 8);
  v29(v10, v48);
  sub_10002572C(&qword_10021C008);
  swift_allocObject();
  uint64_t v30 = swift_retain();
  a4[3] = sub_100078494(v30, 0, (uint64_t)"enableTelemetry=YES", 19, 2, (uint64_t)_swiftEmptyArrayStorage);
  swift_release();
  static os_signpost_type_t.end.getter();
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  v29(v10, v27);
  static os_signpost_type_t.begin.getter();
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  v29(v10, v27);
  uint64_t v31 = (void *)((char *)a4 + OBJC_IVAR____TtC7parsecd14ContextManager_configuration);
  uint64_t v32 = v46;
  void *v31 = v45;
  v31[1] = v32;
  static os_signpost_type_t.end.getter();
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  uint64_t v49 = v28;
  uint64_t v46 = v29;
  v29(v10, v27);
  a4[5] = &off_1001FD220;
  swift_unknownObjectWeakAssign();
  uint64_t v33 = v47;
  sub_100023FDC(v47);
  sub_100085EAC(v33, (uint64_t)a4 + OBJC_IVAR____TtC7parsecd14ContextManager_context);
  sub_100017C74();
  LOBYTE(v3sub_100034730((uint64_t)"SIGINT", 6, 3) = sub_100008A18();
  swift_unknownObjectRelease();
  if ((v33 & 1) == 0)
  {
    swift_allocObject();
    uint64_t v34 = swift_retain();
    *(void *)((char *)a4 + OBJC_IVAR____TtC7parsecd14ContextManager_notBagFetchableSpan) = sub_100078494(v34, 2, (uint64_t)"enableTelemetry=YES", 19, 2, (uint64_t)_swiftEmptyArrayStorage);
    swift_release();
  }
  uint64_t v35 = Logger.logObject.getter();
  os_log_type_t v36 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v35, v36))
  {
    uint64_t v37 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v37 = 0;
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "Setting up listener for context updates", v37, 2u);
    swift_slowDealloc();
  }

  id v38 = [self defaultCenter];
  [v38 addObserver:a4 selector:"updateContext:" name:@"com.apple.parsecd.contextUpdate" object:0];

  static os_signpost_type_t.begin.getter();
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  uint64_t v39 = v48;
  uint64_t v40 = v46;
  v46(v10, v48);
  sub_100017A90();
  static os_signpost_type_t.end.getter();
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  swift_release();
  v40(v10, v39);
  return a4;
}

uint64_t type metadata accessor for SessionLookupKey()
{
  uint64_t result = qword_10021C0D8;
  if (!qword_10021C0D8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100084850()
{
  uint64_t v1 = *(void *)(type metadata accessor for SessionLookupKey() - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 64);
  if (swift_getEnumCaseMultiPayload() == 1) {
    type metadata accessor for UserAgent();
  }
  else {
    type metadata accessor for UUID();
  }
  sub_10001DCF8();
  uint64_t v4 = sub_1000253C4();
  v5(v4);

  return _swift_deallocObject(v0, ((v2 + 16) & ~v2) + v3, v2 | 7);
}

uint64_t sub_10008493C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100028424();
  uint64_t v7 = *(void *)(type metadata accessor for SessionLookupKey() - 8);
  uint64_t v8 = v3 + ((*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));

  return sub_100081A24(v5, v4, a3, v8);
}

uint64_t sub_1000849C0(uint64_t a1)
{
  return sub_100082040(a1, *(uint64_t (**)(uint64_t, uint64_t, char *))(v1 + 16));
}

uint64_t sub_1000849C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10002572C(&qword_10021DE00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100084A30()
{
  swift_weakDestroy();
  uint64_t v0 = sub_100021CA4();

  return _swift_deallocObject(v0, v1, v2);
}

uint64_t sub_100084A60()
{
  return sub_10007FB28();
}

uint64_t sub_100084A68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a3 + 24) = 0;
  swift_unknownObjectWeakInit();
  *(void *)(a3 + 24) = &off_1001FD220;
  swift_unknownObjectWeakAssign();
  sub_1000323F0(a2, (uint64_t)&v11, &qword_10021C060);
  if (v12)
  {
    swift_release();
    sub_100085FD4(a2, &qword_10021C060);
    sub_10001C1AC(&v11, (uint64_t)&v13);
  }
  else
  {
    uint64_t v5 = type metadata accessor for WritableSessionDatabase();
    id v6 = [self defaultManager];
    uint64_t v7 = type metadata accessor for BiomeStreamsLedger();
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 24) = 0;
    swift_unknownObjectWeakInit();
    *(void *)(v8 + 24) = &off_1001FD220;
    swift_unknownObjectWeakAssign();
    uint64_t v14 = v7;
    uint64_t v15 = &off_1001FEA88;
    *(void *)&long long v13 = v8;
    uint64_t v9 = WritableSessionDatabase.__allocating_init(fileManager:ledger:)(v6, (uint64_t)&v13);
    uint64_t v14 = v5;
    uint64_t v15 = &protocol witness table for WritableSessionDatabase;
    swift_release();
    *(void *)&long long v13 = v9;
    sub_100085FD4(a2, &qword_10021C060);
    sub_100085FD4((uint64_t)&v11, &qword_10021C060);
  }
  sub_10001C1AC(&v13, a3 + 32);
  return a3;
}

char *sub_100084BE8(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v51 = a3;
  uint64_t v53 = a2;
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v49 - v11;
  long long v13 = &a4[OBJC_IVAR____TtC7parsecd15LocationManager_assembly];
  *(void *)&a4[OBJC_IVAR____TtC7parsecd15LocationManager_assembly + 8] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v14 = &a4[OBJC_IVAR____TtC7parsecd15LocationManager_locationService];
  *(void *)uint64_t v14 = 0;
  *((void *)v14 + 1) = 0;
  uint64_t v15 = OBJC_IVAR____TtC7parsecd15LocationManager_geoCoder;
  id v16 = objc_allocWithZone((Class)CLGeocoder);
  uint64_t v17 = a4;
  *(void *)&a4[v15] = [v16 init];
  *(void *)&v17[OBJC_IVAR____TtC7parsecd15LocationManager_geoLocation] = 0;
  *(void *)&v17[OBJC_IVAR____TtC7parsecd15LocationManager_lastGeoLocationUpdate] = 0;
  *(void *)&v17[OBJC_IVAR____TtC7parsecd15LocationManager_geoPlacemark] = 0;
  uint64_t v18 = &v17[OBJC_IVAR____TtC7parsecd15LocationManager_geoLocationLatLng];
  *(void *)uint64_t v18 = 0;
  *((void *)v18 + 1) = 0xE000000000000000;
  sub_10002538C((uint64_t)&v17[OBJC_IVAR____TtC7parsecd15LocationManager_geoLocationAge], 1, 1, v6);
  uint64_t v19 = &v17[OBJC_IVAR____TtC7parsecd15LocationManager_geoLocationSource];
  *(void *)uint64_t v19 = 0;
  *((void *)v19 + 1) = 0xE000000000000000;
  uint64_t v20 = &v17[OBJC_IVAR____TtC7parsecd15LocationManager_geoClientMetadata];
  *(void *)uint64_t v20 = 0;
  *((void *)v20 + 1) = 0xE000000000000000;
  uint64_t v21 = &v17[OBJC_IVAR____TtC7parsecd15LocationManager_lookupGeoLocationLatLng];
  *(void *)uint64_t v21 = 0;
  *((void *)v21 + 1) = 0xE000000000000000;
  uint64_t v22 = OBJC_IVAR____TtC7parsecd15LocationManager__locationAuthorizationStatus;
  sub_10002572C(&qword_10021C050);
  swift_allocObject();
  *(void *)&v17[v22] = sub_10010FDD4(2);
  uint64_t v23 = OBJC_IVAR____TtC7parsecd15LocationManager__lastLocationUpdateDate;
  static Date.distantPast.getter();
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v12, v6);
  sub_10002572C(&qword_10021C058);
  swift_allocObject();
  uint64_t v24 = sub_10010FDFC((uint64_t)v10);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
  *(void *)&v17[v23] = v24;
  *((void *)v13 + 1) = &off_1001FD220;
  uint64_t v52 = a1;
  swift_unknownObjectWeakAssign();
  os_log_type_t v25 = *(void **)(a1 + 272);
  *(void *)&v17[OBJC_IVAR____TtC7parsecd15LocationManager_updateQueue] = v25;
  id v26 = v25;

  uint64_t v27 = (objc_class *)type metadata accessor for LocationManager();
  v56.receiver = v17;
  v56.super_class = v27;
  uint64_t v28 = (char *)objc_msgSendSuper2(&v56, "init");
  unint64_t v29 = &v28[OBJC_IVAR____TtC7parsecd15LocationManager_geoLocationSource];
  *(void *)unint64_t v29 = 0x6E692E726F727265;
  *((void *)v29 + 1) = 0xEA00000000007469;
  uint64_t v30 = v28;
  swift_bridgeObjectRelease();
  uint64_t v31 = &v30[OBJC_IVAR____TtC7parsecd15LocationManager_locationService];
  uint64_t v32 = v51;
  *(void *)uint64_t v31 = v53;
  *((void *)v31 + 1) = v32;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  uint64_t v33 = self;
  id v34 = [v33 defaultCenter];
  [v34 addObserver:v30 selector:"bagChangeNotification:" name:@"PARBagChangeNotification" object:0];

  id v35 = [v33 defaultCenter];
  [v35 addObserver:v30 selector:"updateMapsClientMetadata:" name:GEOMapServiceSerializedClientMetadataForParsecDidInvalidateNotificationName object:0];

  id v36 = [v33 defaultCenter];
  [v36 addObserver:v30 selector:"updateCountryCode:" name:GEOCountryConfigurationCountryCodeDidChangeNotification object:0];

  id v37 = [v33 defaultCenter];
  [v37 addObserver:v30 selector:"performedSearchNotification:" name:@"com.apple.parsecd.performedSearch" object:0];

  uint64_t v51 = *(void *)&v30[OBJC_IVAR____TtC7parsecd15LocationManager_updateQueue];
  uint64_t v38 = swift_allocObject();
  *(void *)(v38 + 16) = v30;
  void aBlock[4] = sub_100085FCC;
  aBlock[5] = v38;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  uint64_t aBlock[2] = sub_1000085EC;
  id aBlock[3] = &unk_1001FD558;
  uint64_t v39 = _Block_copy(aBlock);
  uint64_t v50 = type metadata accessor for DispatchQoS();
  uint64_t v40 = *(void *)(v50 - 8);
  __chkstk_darwin(v50);
  uint64_t v42 = (char *)&v49 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = v30;
  static DispatchQoS.unspecified.getter();
  uint64_t v44 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v45 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  uint64_t v47 = (char *)&v49 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = _swiftEmptyArrayStorage;
  sub_100085E64((unint64_t *)&qword_100219260, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10002572C((uint64_t *)&unk_10021BAF0);
  sub_100057EEC((unint64_t *)&qword_100219270, (uint64_t *)&unk_10021BAF0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();

  _Block_release(v39);
  swift_release();
  swift_unknownObjectRelease();
  (*(void (**)(char *, uint64_t))(v45 + 8))(v47, v44);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v42, v50);
  swift_release();
  return v43;
}

uint64_t sub_1000852A4(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 24) = 0;
  swift_unknownObjectWeakInit();
  *(_OWORD *)(a2 + 3sub_100034730((uint64_t)"SIGTERM", 7, 2) = xmmword_1001A5AD0;
  sub_10002572C(&qword_10021AE98);
  swift_allocObject();
  *(void *)(a2 + 48) = sub_100098C18(0);
  sub_10002572C(&qword_10021C040);
  swift_allocObject();
  *(void *)(a2 + 56) = sub_100098D4C();
  *(void *)(a2 + 24) = &off_1001FD220;
  swift_unknownObjectWeakAssign();
  id v3 = [self standardUserDefaults];
  [objc_allocWithZone((Class)type metadata accessor for PARBagConfigFactory()) init];
  sub_10007FF64();
  sub_100023FA0(0, &qword_10021BE58);
  sub_100085F54(&qword_10021C048, (void (*)(uint64_t))type metadata accessor for ConfigurationController);
  type metadata accessor for ConfigurationManager();
  swift_allocObject();
  swift_retain();
  *(void *)(a2 + 3sub_100034730((uint64_t)"SIGTERM", 7, 2) = ConfigurationManager.init(defaults:context:configFactory:urlDataSource:delegate:)();
  swift_release();
  id v4 = [self defaultCenter];
  swift_retain();
  [v4 addObserver:a2 selector:"handleRefreshNotificationWithNotification:" name:@"PARBagRefreshRequired" object:0];

  swift_release();
  swift_release();
  return a2;
}

id sub_1000854E8(uint64_t a1, char *a2)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  id v4 = &a2[OBJC_IVAR____TtC7parsecd15DownloadManager_assembly];
  *(void *)&a2[OBJC_IVAR____TtC7parsecd15DownloadManager_assembly + 8] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v5 = OBJC_IVAR____TtC7parsecd15DownloadManager_hasStarted;
  sub_10002572C((uint64_t *)&unk_10021C030);
  uint64_t v6 = swift_allocObject();
  uint64_t v7 = a2;
  *(void *)(v6 + 16) = sub_10002E4E8(0);
  *(void *)&a2[v5] = v6;
  *(void *)&v7[OBJC_IVAR____TtC7parsecd15DownloadManager_resources] = _swiftEmptyDictionarySingleton;
  *(void *)&v7[OBJC_IVAR____TtC7parsecd15DownloadManager_spans] = _swiftEmptyDictionarySingleton;
  *((void *)v4 + 1) = &off_1001FD220;
  swift_unknownObjectWeakAssign();
  sub_100023FA0(0, (unint64_t *)&qword_100219250);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v8 - 8);
  static DispatchQoS.background.getter();
  uint64_t v9 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v9);
  uint64_t v21 = 0;
  sub_100085E64((unint64_t *)&qword_10021B3D0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  dispatch thunk of OptionSet.init(rawValue:)();
  uint64_t v10 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  __chkstk_darwin(v10);
  (*(void (**)(char *, void))(v12 + 104))((char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:));
  *(void *)&v7[OBJC_IVAR____TtC7parsecd15DownloadManager_queue] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();

  v20.receiver = v7;
  v20.super_class = ObjectType;
  id v13 = objc_msgSendSuper2(&v20, "init");
  uint64_t v14 = self;
  id v15 = v13;
  id v16 = [v14 defaultCenter];
  id v17 = v15;
  [v16 addObserver:v17 selector:"bagChangeNotificationWithNotification:" name:@"PARBagChangeNotification" object:0];

  swift_release();
  return v17;
}

void *sub_100085838(uint64_t a1, void *a2)
{
  a2[3] = 0;
  swift_unknownObjectWeakInit();
  a2[4] = 0xD000000000000074;
  a2[5] = 0x80000001001B4F70;
  a2[3] = &off_1001FD220;
  swift_unknownObjectWeakAssign();
  id v3 = [self defaultCenter];
  [v3 addObserver:a2 selector:"bagChangeNotification:" name:@"PARBagChangeNotification" object:0];
  sub_100017C74();
  uint64_t v4 = swift_allocObject();
  swift_weakInit();
  swift_retain();
  sub_100102AE8(1, (void (*)(id))sub_100085F4C, v4, (uint64_t)sub_10005B310, 0);

  swift_unknownObjectRelease();
  swift_release_n();
  swift_release();
  return a2;
}

void *sub_10008598C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  sub_10002572C(&qword_10021C010);
  swift_allocObject();
  uint64_t v8 = sub_10010FEE4(0, 0);
  a4[3] = a3;
  a4[4] = a1;
  a4[5] = &off_1001FD220;
  a4[6] = v8;
  a4[2] = a2;
  swift_unknownObjectRetain();
  sub_1000B267C(1, 0, 0);
  swift_release();
  return a4;
}

uint64_t sub_100085A2C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for OSSignpostID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  static os_signpost_type_t.begin.getter();
  if (qword_100218B88 != -1) {
    swift_once();
  }
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  uint64_t v7 = *(void (**)(char *, uint64_t))(v4 + 8);
  v7(v6, v3);
  *(void *)(a2 + OBJC_IVAR____TtC7parsecd31DeviceManagedAppContextProvider_assembly + 8) = &off_1001FD220;
  swift_unknownObjectWeakAssign();
  id v8 = [self defaultCenter];
  uint64_t v9 = (void *)static AppDistributor.AppDistributorsOrTrustedDevelopersChangedNotification.getter();
  [v8 addObserver:a2 selector:"onAppDistUpdateWithNotification:" name:v9 object:0];

  sub_100023FA0(0, (unint64_t *)&qword_100219250);
  int out_token = 0;
  uint64_t v10 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  id v13 = (char *)aBlock - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v11 + 104))(v13, enum case for DispatchQoS.QoSClass.background(_:), v10);
  uint64_t v14 = static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  uint64_t v15 = swift_allocObject();
  swift_unknownObjectWeakInit();
  void aBlock[4] = sub_100085E4C;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  uint64_t aBlock[2] = sub_10007E308;
  id aBlock[3] = &unk_1001FD4E0;
  id v16 = _Block_copy(aBlock);
  swift_release();
  notify_register_dispatch("com.apple.os-eligibility-domain.change.search-marketplaces", &out_token, v14, v16);
  _Block_release(v16);

  sub_10004341C();
  static os_signpost_type_t.end.getter();
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  return ((uint64_t (*)(char *, uint64_t))v7)(v6, v3);
}

uint64_t sub_100085E1C()
{
  swift_unknownObjectWeakDestroy();
  uint64_t v0 = sub_100021CA4();

  return _swift_deallocObject(v0, v1, v2);
}

void sub_100085E4C()
{
}

uint64_t sub_100085E54(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_unknownObjectRelease();
  }
  else {
    return swift_release();
  }
}

uint64_t sub_100085E64(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100085EAC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_100024344();
  v4(v3);
  sub_10001DCF8();
  uint64_t v5 = sub_10002A0A4();
  v6(v5);
  return a2;
}

uint64_t sub_100085EFC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_10002572C(a3);
  sub_10001DCF8();
  uint64_t v4 = sub_10002A0A4();
  v5(v4);
  return a2;
}

uint64_t sub_100085F4C()
{
  return sub_10005B2B4();
}

uint64_t sub_100085F54(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100085F9C()
{
  uint64_t v1 = sub_100021CA4();

  return _swift_deallocObject(v1, v2, v3);
}

void sub_100085FCC()
{
}

uint64_t sub_100085FD4(uint64_t a1, uint64_t *a2)
{
  sub_10002572C(a2);
  sub_10001DCF8();
  uint64_t v3 = sub_1000253C4();
  v4(v3);
  return a1;
}

uint64_t *sub_100086020(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1) {
      uint64_t v6 = type metadata accessor for UserAgent();
    }
    else {
      uint64_t v6 = type metadata accessor for UUID();
    }
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_100086150(uint64_t a1)
{
  if (swift_getEnumCaseMultiPayload() == 1) {
    uint64_t v2 = type metadata accessor for UserAgent();
  }
  else {
    uint64_t v2 = type metadata accessor for UUID();
  }
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(a1, v2);
}

uint64_t sub_1000861CC(uint64_t a1, uint64_t a2)
{
  if (swift_getEnumCaseMultiPayload() == 1) {
    uint64_t v4 = type metadata accessor for UserAgent();
  }
  else {
    uint64_t v4 = type metadata accessor for UUID();
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2);
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_100086278(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_10003103C(a1, (void (*)(void))type metadata accessor for SessionLookupKey);
    if (swift_getEnumCaseMultiPayload() == 1) {
      uint64_t v4 = type metadata accessor for UserAgent();
    }
    else {
      uint64_t v4 = type metadata accessor for UUID();
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_100086348(uint64_t a1, uint64_t a2)
{
  if (swift_getEnumCaseMultiPayload() == 1) {
    uint64_t v4 = type metadata accessor for UserAgent();
  }
  else {
    uint64_t v4 = type metadata accessor for UUID();
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2);
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_1000863F4(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_10003103C(a1, (void (*)(void))type metadata accessor for SessionLookupKey);
    if (swift_getEnumCaseMultiPayload() == 1) {
      uint64_t v4 = type metadata accessor for UserAgent();
    }
    else {
      uint64_t v4 = type metadata accessor for UUID();
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_1000864C4()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for UserAgent();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t sub_1000865A8(uint64_t a1, unint64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    unint64_t v2 = a2;
    uint64_t v3 = a1;
    unint64_t v4 = a2 >> 62;
    if (!(a2 >> 62))
    {
      uint64_t v5 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_4;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
LABEL_4:
  uint64_t result = sub_100088164(0, v3, v5);
  if (v7) {
    uint64_t v8 = v5;
  }
  else {
    uint64_t v8 = result;
  }
  if (v8 < 0)
  {
    __break(1u);
    goto LABEL_24;
  }
  if (v4)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (v10 < 0)
    {
LABEL_25:
      __break(1u);
      return result;
    }
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v9 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v9 < v8)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if ((v2 & 0xC000000000000001) != 0 && v8)
  {
    sub_100088328();
    Swift::Int v11 = 0;
    do
    {
      Swift::Int v12 = v11 + 1;
      _ArrayBuffer._typeCheckSlowPath(_:)(v11);
      Swift::Int v11 = v12;
    }
    while (v8 != v12);
  }
  if (!v4) {
    return v2 & 0xFFFFFFFFFFFFFF8;
  }
  swift_bridgeObjectRetain();
  uint64_t v13 = _CocoaArrayWrapper.subscript.getter();
  swift_bridgeObjectRelease_n();
  return v13;
}

uint64_t sub_100086748(uint64_t result)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    String.index(_:offsetBy:limitedBy:)();
    uint64_t v1 = String.subscript.getter();
    swift_bridgeObjectRelease();
    return v1;
  }
  return result;
}

id sub_100086808()
{
  id result = (id)kCFLocaleTemperatureUnitPreferencesChangedNotification;
  if (kCFLocaleTemperatureUnitPreferencesChangedNotification)
  {
    qword_100236B28 = kCFLocaleTemperatureUnitPreferencesChangedNotification;
    return kCFLocaleTemperatureUnitPreferencesChangedNotification;
  }
  else
  {
    __break(1u);
  }
  return result;
}

NSString sub_100086828()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_100236B30 = (uint64_t)result;
  return result;
}

uint64_t sub_100086860(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_10002572C(&qword_10021A5E0);
  __chkstk_darwin(v5 - 8);
  sub_100016500();
  *(void *)(v2 + 24) = 0;
  swift_unknownObjectWeakInit();
  *(void *)(v2 + 40) = 0xE200000000000000;
  *(void *)(v2 + 48) = 19285;
  *(void *)(v2 + 56) = 0xE200000000000000;
  *(void *)(v2 + 64) = 18771;
  *(void *)(v2 + 7sub_100034730((uint64_t)"SIGTERM", 7, 2) = 0xE200000000000000;
  *(_DWORD *)(v2 + 80) = -1;
  *(void *)(v2 + 24) = a2;
  *(void *)(v2 + 3sub_100034730((uint64_t)"SIGTERM", 7, 2) = 21333;
  swift_unknownObjectWeakAssign();
  id v6 = [self defaultCenter];
  sub_10002AD30(v6, "addObserver:selector:name:object:", v7, v8, (uint64_t)NSCurrentLocaleDidChangeNotification);

  id v9 = sub_100024350();
  uint64_t v10 = qword_100218BD0;
  swift_retain();
  if (v10 != -1) {
    swift_once();
  }
  sub_10002AD30(v9, "addObserver:selector:name:object:", v11, v12, qword_100236B28);

  swift_release();
  id v13 = sub_100024350();
  [v13 addObserver:v2 selector:"updateTimeZone:" name:NSSystemTimeZoneDidChangeNotification object:0];

  id v14 = sub_100024350();
  uint64_t v15 = qword_100218BD8;
  swift_retain();
  if (v15 != -1) {
    swift_once();
  }
  [v14 addObserver:v2 selector:"updateTimeZone:" name:qword_100236B30 object:0];

  swift_release();
  id v16 = sub_100024350();
  sub_10002AD30(v16, "addObserver:selector:name:object:", v17, v18, qword_100236B30);

  type metadata accessor for Notification();
  sub_100021348();
  sub_100086AEC();
  sub_100025628(v3, &qword_10021A5E0);
  sub_100021348();
  sub_100087A30();
  swift_unknownObjectRelease();
  sub_100025628(v3, &qword_10021A5E0);
  return v2;
}

uint64_t sub_100086AEC()
{
  uint64_t v1 = type metadata accessor for Locale.Language();
  sub_100020C48();
  uint64_t v3 = v2;
  __chkstk_darwin(v4);
  sub_10000E04C();
  uint64_t v152 = v5;
  uint64_t v6 = sub_10002572C(&qword_10021C290);
  __chkstk_darwin(v6 - 8);
  sub_10000E04C();
  unint64_t v154 = v7;
  uint64_t v156 = type metadata accessor for Locale.MeasurementSystem();
  sub_100020C48();
  uint64_t v150 = v8;
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v151 = (char *)&v134 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  info = (char *)&v134 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  int v149 = (char *)&v134 - v15;
  __chkstk_darwin(v14);
  id v157 = (char *)&v134 - v16;
  type metadata accessor for Calendar.Identifier();
  sub_100020C48();
  unint64_t v147 = v18;
  uint64_t v148 = v17;
  __chkstk_darwin(v17);
  type metadata accessor for Calendar();
  sub_100020C48();
  id v146 = v19;
  __chkstk_darwin(v20);
  sub_100021208();
  uint64_t v21 = type metadata accessor for Locale();
  sub_100020C48();
  uint64_t v23 = v22;
  __chkstk_darwin(v24);
  id v26 = (char *)&v134 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  CFStringRef v145 = v0;
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v141 = v3;
    uint64_t v142 = v1;
    uint64_t v144 = result;
    if (qword_100218B78 != -1) {
      swift_once();
    }
    uint64_t v28 = type metadata accessor for Logger();
    uint64_t v155 = sub_10002A10C(v28, (uint64_t)qword_100236A80);
    unint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.info.getter();
    BOOL v31 = sub_100017D10(v30);
    unint64_t v158 = v26;
    if (v31)
    {
      uint64_t v32 = (uint8_t *)sub_100023E24();
      *(_WORD *)uint64_t v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, (os_log_type_t)v3, "Updating locale", v32, 2u);
      id v26 = v158;
      swift_slowDealloc();
    }

    uint64_t v33 = self;
    id v34 = [v33 currentLocale];
    static Locale._unconditionallyBridgeFromObjectiveC(_:)();

    id v35 = (void *)static Locale.preferredLanguages.getter();
    if (v35[2])
    {
      uint64_t v143 = v23;
      uint64_t v37 = v35[4];
      unint64_t v36 = v35[5];
      swift_bridgeObjectRetain();
      uint64_t v38 = swift_bridgeObjectRelease();
      uint64_t v160 = 45;
      unint64_t v161 = 0xE100000000000000;
      __chkstk_darwin(v38);
      *(&v134 - sub_100034730((uint64_t)"SIGTERM", 7, 2) = (os_log_t)&v160;
      sub_100088000(sub_100067E7C, (uint64_t)&(&v134)[-4], v37, v36);
      if ((v39 & 1) == 0)
      {
        uint64_t v138 = v21;
        String.subscript.getter();
        swift_bridgeObjectRelease();
        uint64_t v139 = static String._fromSubstring(_:)();
        unint64_t v135 = v40;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_15;
      }
      swift_bridgeObjectRelease();
      uint64_t v23 = v143;
      id v26 = v158;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    uint64_t v41 = sub_100088108(v33);
    if (v41 && (uint64_t v42 = sub_100087C78(v41), swift_bridgeObjectRelease(), v42))
    {
      uint64_t v143 = v23;
      uint64_t v138 = v21;
      uint64_t v43 = self;
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v45 = [v43 preferredLocalizationsFromArray:isa];

      uint64_t v46 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();
      if (v46[2])
      {
        unint64_t v47 = v46[5];
        uint64_t v139 = v46[4];
        unint64_t v135 = v47;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_15:
        uint64_t v140 = Locale.identifier.getter();
        unint64_t v136 = v48;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        Locale.calendar.getter();
        Calendar.identifier.getter();
        sub_10000E040();
        v49();
        uint64_t v50 = Locale.localizedString(for:)();
        unint64_t v52 = v51;
        sub_10000E040();
        v53();
        uint64_t v54 = v156;
        uint64_t v137 = v33;
        if (v52)
        {
          unint64_t v147 = v52;
          uint64_t v148 = v50;
          swift_bridgeObjectRelease();
          uint64_t v55 = v150;
        }
        else
        {
          uint64_t v61 = (void *)Logger.logObject.getter();
          os_log_type_t v62 = static os_log_type_t.error.getter();
          BOOL v63 = sub_100017D10(v62);
          uint64_t v55 = v150;
          if (v63)
          {
            uint64_t v64 = (_WORD *)sub_100023E24();
            sub_1000263D4(v64);
            sub_100024288((void *)&_mh_execute_header, v65, v66, "error getting localeCalendarIdentifier from NSLocale");
            sub_1000270A0();
          }

          unint64_t v147 = 0xE000000000000000;
          swift_bridgeObjectRelease();
          uint64_t v148 = 0;
        }
        uint64_t v67 = v157;
        Locale.measurementSystem.getter();
        uint64_t v68 = v149;
        uint64_t v69 = v67;
        uint64_t v70 = (void (*)(char *, char *, uint64_t))v55[2];
        v70(v149, v69, v54);
        uint64_t v71 = Logger.logObject.getter();
        os_log_type_t v72 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v71, v72))
        {
          uint64_t v73 = swift_slowAlloc();
          uint64_t v150 = v70;
          uint64_t v74 = (uint8_t *)v73;
          id v146 = (id)swift_slowAlloc();
          uint64_t v160 = (uint64_t)v146;
          *(_DWORD *)uint64_t v74 = 136315138;
          os_log_t v134 = v71;
          ((void (*)(char *, char *, uint64_t))v150)(info, v68, v54);
          sub_100017EB8();
          uint64_t v75 = String.init<A>(describing:)();
          v159[0] = sub_10001C274(v75, v76, &v160);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          uint64_t v54 = v156;
          swift_bridgeObjectRelease();
          unint64_t v77 = (unint64_t)(v55 + 1);
          uint64_t v78 = (void (*)(char *, uint64_t))v55[1];
          uint64_t v79 = v77 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
          v78(v68, v54);
          uint64_t v71 = v134;
          _os_log_impl((void *)&_mh_execute_header, v134, v72, "Processing measurement System: %s", v74, 0xCu);
          swift_arrayDestroy();
          unint64_t v80 = (void (*)(uint64_t))v78;
          swift_slowDealloc();
          uint64_t v70 = (void (*)(char *, char *, uint64_t))v150;
          swift_slowDealloc();
        }
        else
        {
          unint64_t v80 = (void (*)(uint64_t))v55[1];
          uint64_t v79 = (unint64_t)(v55 + 1) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
          uint64_t v82 = sub_100017EB8();
          v80(v82);
        }

        uint64_t v81 = v154;
        uint64_t v83 = v151;
        v70(v151, v157, v54);
        static Locale.MeasurementSystem.metric.getter();
        sub_1000881DC();
        char v84 = sub_10002592C();
        uint64_t v85 = sub_100017EB8();
        v80(v85);
        uint64_t v150 = v80;
        if (v84)
        {
          ((void (*)(char *, uint64_t))v80)(v83, v54);
          data = v145[2].isa;
          info = (char *)v145[2].info;
          swift_bridgeObjectRetain();
        }
        else
        {
          static Locale.MeasurementSystem.us.getter();
          char v87 = sub_10002592C();
          uint64_t v88 = sub_100017EB8();
          v80(v88);
          if (v87)
          {
            ((void (*)(char *, uint64_t))v80)(v83, v54);
            data = v145[1].isa;
            info = (char *)v145[1].info;
            swift_bridgeObjectRetain();
          }
          else
          {
            static Locale.MeasurementSystem.uk.getter();
            char v89 = sub_10002592C();
            uint64_t v90 = sub_100017EB8();
            v80(v90);
            ((void (*)(char *, uint64_t))v80)(v83, v54);
            if ((v89 & 1) == 0)
            {
              uint64_t v127 = (void *)Logger.logObject.getter();
              os_log_type_t v128 = static os_log_type_t.error.getter();
              BOOL v129 = sub_100017D10(v128);
              uint64_t v91 = v137;
              if (v129)
              {
                id v130 = (_WORD *)sub_100023E24();
                sub_1000263D4(v130);
                sub_100024288((void *)&_mh_execute_header, v131, v132, "Found an unidentifiable measurementSystem, requests will not have a valid system set");
                sub_1000270A0();
              }

              data = 0;
              info = (char *)0xE000000000000000;
LABEL_34:
              swift_bridgeObjectRelease();
              id v92 = [v91 preferredLanguages];
              uint64_t v93 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

              if (*(void *)(v93 + 16) < 4uLL)
              {
                id v96 = (char *)v93;
                uint64_t v97 = v141;
              }
              else
              {
                type metadata accessor for __ContiguousArrayStorageBase();
                swift_unknownObjectRetain_n();
                uint64_t v94 = (void *)swift_dynamicCastClass();
                if (!v94)
                {
                  swift_bridgeObjectRelease();
                  uint64_t v94 = _swiftEmptyArrayStorage;
                }
                uint64_t v95 = v94[2];
                swift_release();
                if (v95 == 3)
                {
                  id v96 = (char *)swift_dynamicCastClass();
                  swift_bridgeObjectRelease();
                  uint64_t v97 = v141;
                  if (v96) {
                    goto LABEL_42;
                  }
                  id v96 = (char *)_swiftEmptyArrayStorage;
                }
                else
                {
                  swift_bridgeObjectRelease();
                  sub_10011A760(v93, v93 + 32, 0, 7uLL);
                  id v96 = v133;
                  uint64_t v97 = v141;
                }
                swift_bridgeObjectRelease();
              }
LABEL_42:
              uint64_t v151 = v96;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRelease();
              uint64_t v98 = v152;
              Locale.language.getter();
              Locale.Language.region.getter();
              (*(void (**)(uint64_t, uint64_t))(v97 + 8))(v98, v142);
              uint64_t v99 = type metadata accessor for Locale.Region();
              if (sub_100027BA4(v81, 1, v99) == 1)
              {
                sub_100025628(v81, &qword_10021C290);
                uint64_t v155 = 0;
                uint64_t v100 = 0;
              }
              else
              {
                uint64_t v155 = Locale.Region.identifier.getter();
                uint64_t v100 = v101;
                (*(void (**)(uint64_t, uint64_t))(*(void *)(v99 - 8) + 8))(v81, v99);
              }
              uint64_t v152 = v100;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRelease();
              Class v102 = Locale._bridgeToObjectiveC()().super.isa;
              id v103 = [(objc_class *)v102 objectForKey:NSLocaleTemperatureUnit];

              if (v103)
              {
                _bridgeAnyObjectToAny(_:)();
                swift_unknownObjectRelease();
              }
              else
              {
                memset(v159, 0, 32);
              }
              sub_10008822C((uint64_t)v159, (uint64_t)&v160);
              int v149 = (char *)v79;
              if (v163)
              {
                if (swift_dynamicCast())
                {
                  sub_100086748(1);
                  uint64_t v104 = static String._fromSubstring(_:)();
                  unint64_t v154 = v105;
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
LABEL_53:
                  unsigned __int8 v106 = sub_100087DC0() & 1;
                  LODWORD(v141) = v106;
                  id v146 = [self defaultCenter];
                  CFStringRef v145 = @"com.apple.parsecd.contextUpdate";
                  sub_10002572C((uint64_t *)&unk_10021BAE0);
                  uint64_t inited = swift_initStackObject();
                  *(_OWORD *)(inited + 16) = xmmword_1001A2A20;
                  uint64_t v160 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                  unint64_t v161 = v108;
                  AnyHashable.init<A>(_:)();
                  *(void *)(inited + 96) = type metadata accessor for ContextUpdate(0);
                  uint64_t v109 = sub_10002E5E8((uint64_t *)(inited + 72));
                  unint64_t v110 = v136;
                  v159[0] = v140;
                  v159[1] = v136;
                  unint64_t v111 = v147;
                  v159[2] = v148;
                  v159[3] = v147;
                  id v112 = info;
                  v159[4] = data;
                  v159[5] = info;
                  LOBYTE(v159[6]) = v106;
                  v159[7] = 0;
                  v159[8] = 0xE000000000000000;
                  uint64_t v137 = data;
                  unint64_t v113 = v135;
                  v159[9] = v139;
                  v159[10] = v135;
                  uint64_t v114 = v151;
                  v159[11] = v151;
                  v159[12] = v104;
                  uint64_t v142 = v104;
                  v159[13] = v154;
                  v159[14] = v155;
                  uint64_t v115 = v152;
                  v159[15] = v152;
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  sub_100088294((uint64_t)v159);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  memcpy(v109, v159, 0x80uLL);
                  swift_storeEnumTagMultiPayload();
                  uint64_t v116 = Dictionary.init(dictionaryLiteral:)();
                  uint64_t v117 = v146;
                  sub_10010553C((uint64_t)v145, 0, v116, v146);
                  swift_unknownObjectRelease();

                  ((void (*)(char *, uint64_t))v150)(v157, v156);
                  sub_10000E040();
                  v118();
                  uint64_t v160 = v140;
                  unint64_t v161 = v110;
                  uint64_t v162 = v148;
                  unint64_t v163 = v111;
                  uint64_t v164 = v137;
                  unint64_t v165 = (unint64_t)v112;
                  char v166 = v141;
                  *(_DWORD *)uint64_t v167 = v177[0];
                  *(_DWORD *)&v167[3] = *(_DWORD *)((char *)v177 + 3);
                  uint64_t v168 = 0;
                  unint64_t v169 = 0xE000000000000000;
                  uint64_t v170 = v139;
                  unint64_t v171 = v113;
                  uint64_t v172 = v114;
                  uint64_t v173 = v142;
                  unint64_t v174 = v154;
                  uint64_t v175 = v155;
                  uint64_t v176 = v115;
                  return sub_1000616FC((uint64_t)&v160);
                }
              }
              else
              {
                sub_100025628((uint64_t)&v160, (uint64_t *)&unk_10021BB30);
              }
              unint64_t v154 = 0xE000000000000000;
              swift_bridgeObjectRelease();
              uint64_t v104 = 0;
              goto LABEL_53;
            }
            data = v145[1].data;
            info = (char *)v145[1].length;
            swift_bridgeObjectRetain();
          }
        }
        uint64_t v91 = v137;
        goto LABEL_34;
      }
      swift_bridgeObjectRelease();
      uint64_t v119 = (void *)Logger.logObject.getter();
      os_log_type_t v120 = static os_log_type_t.error.getter();
      BOOL v121 = sub_100017D10(v120);
      uint64_t v122 = v138;
      uint64_t v123 = v143;
      if (v121)
      {
        uint64_t v124 = (_WORD *)sub_100023E24();
        sub_1000263D4(v124);
        sub_100024288((void *)&_mh_execute_header, v125, v126, "error getting effectiveSystemLanguage from NSLocale");
        sub_1000270A0();
      }

      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v123 + 8))(v26, v122);
    }
    else
    {
      objc_super v56 = (void *)Logger.logObject.getter();
      os_log_type_t v57 = static os_log_type_t.error.getter();
      if (sub_100017D10(v57))
      {
        uint64_t v58 = (_WORD *)sub_100023E24();
        sub_1000263D4(v58);
        sub_100024288((void *)&_mh_execute_header, v59, v60, "error getting system languages from NSLocale");
        sub_1000270A0();
      }

      swift_unknownObjectRelease();
      (*(void (**)(char *, uint64_t))(v23 + 8))(v26, v21);
    }
    uint64_t v160 = 0;
    unint64_t v161 = 0xE000000000000000;
    uint64_t v162 = 0;
    unint64_t v163 = 0xE000000000000000;
    uint64_t v164 = 0;
    unint64_t v165 = 0xE000000000000000;
    char v166 = 0;
    *(_DWORD *)uint64_t v167 = v177[0];
    *(_DWORD *)&v167[3] = *(_DWORD *)((char *)v177 + 3);
    uint64_t v168 = 0;
    unint64_t v169 = 0xE000000000000000;
    uint64_t v170 = 0;
    unint64_t v171 = 0xE000000000000000;
    uint64_t v172 = _swiftEmptyArrayStorage;
    uint64_t v173 = 0;
    uint64_t v175 = 0;
    uint64_t v176 = 0;
    unint64_t v174 = 0xE000000000000000;
    return sub_1000616FC((uint64_t)&v160);
  }
  return result;
}

void sub_100087A30()
{
  uint64_t v1 = type metadata accessor for TimeZone();
  sub_100020C48();
  uint64_t v3 = v2;
  __chkstk_darwin(v4);
  sub_100021208();
  if (swift_unknownObjectWeakLoadStrong())
  {
    static TimeZone.current.getter();
    uint64_t v5 = TimeZone.identifier.getter();
    uint64_t v7 = v6;
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0, v1);
    id v8 = [self defaultCenter];
    sub_10002572C((uint64_t *)&unk_10021BAE0);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1001A2A20;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    AnyHashable.init<A>(_:)();
    *(void *)(inited + 96) = type metadata accessor for ContextUpdate(0);
    uint64_t v10 = sub_10002E5E8((uint64_t *)(inited + 72));
    *uint64_t v10 = v5;
    v10[1] = v7;
    swift_storeEnumTagMultiPayload();
    uint64_t v11 = Dictionary.init(dictionaryLiteral:)();
    sub_10010553C(@"com.apple.parsecd.contextUpdate", 0, v11, v8);
    swift_unknownObjectRelease();
  }
}

uint64_t sub_100087BE4()
{
  int v1 = *(_DWORD *)(v0 + 80);
  if (v1 != -1) {
    notify_cancel(v1);
  }
  sub_10001CDE0(v0 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_100087C2C()
{
  sub_100087BE4();

  return _swift_deallocClassInstance(v0, 84, 7);
}

void *sub_100087C78(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v11 = _swiftEmptyArrayStorage;
  sub_1000EE464();
  uint64_t v3 = _swiftEmptyArrayStorage;
  if (v2)
  {
    for (uint64_t i = a1 + 32; ; i += 32)
    {
      sub_10001C348(i, (uint64_t)v10);
      if (!swift_dynamicCast()) {
        break;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000EE464();
        uint64_t v3 = v11;
      }
      unint64_t v5 = v3[2];
      if (v5 >= v3[3] >> 1)
      {
        sub_1000EE464();
        uint64_t v3 = v11;
      }
      v3[2] = v5 + 1;
      uint64_t v6 = &v3[2 * v5];
      v6[4] = v8;
      v6[5] = v9;
      if (!--v2) {
        return v3;
      }
    }
    swift_release();
    swift_bridgeObjectRelease();
    return 0;
  }
  return v3;
}

uint64_t sub_100087DC0()
{
  uint64_t v1 = type metadata accessor for Locale.HourCycle();
  sub_100020C48();
  uint64_t v3 = v2;
  __chkstk_darwin(v4);
  sub_100016500();
  Locale.hourCycle.getter();
  int v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 88))(v0, v1);
  BOOL v6 = v5 == enum case for Locale.HourCycle.zeroToEleven(_:) || v5 == enum case for Locale.HourCycle.oneToTwelve(_:);
  uint64_t v7 = !v6;
  if (v6) {
    return v7;
  }
  if (v5 == enum case for Locale.HourCycle.zeroToTwentyThree(_:)
    || v5 == enum case for Locale.HourCycle.oneToTwentyFour(_:))
  {
    return v7;
  }
  uint64_t result = _diagnoseUnexpectedEnumCase<A>(type:)();
  __break(1u);
  return result;
}

uint64_t sub_100087EC4(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v7 = sub_10002572C(&qword_10021A5E0);
  __chkstk_darwin(v7 - 8);
  sub_100016500();
  if (a3)
  {
    static Notification._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = type metadata accessor for Notification();
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v8 = type metadata accessor for Notification();
    uint64_t v9 = 1;
  }
  sub_10002538C(v4, v9, 1, v8);
  uint64_t v10 = swift_retain();
  a4(v10);
  swift_release();
  return sub_100025628(v4, &qword_10021A5E0);
}

uint64_t type metadata accessor for LocalStateManager()
{
  return self;
}

uint64_t sub_100087FBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 == a3 && a2 == a4) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)() & 1;
  }
}

unint64_t sub_100088000(uint64_t (*a1)(void *), uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0) {
    uint64_t v5 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (!v5) {
    return 0;
  }
  while (1)
  {
    unint64_t v7 = String.index(before:)();
    v12[0] = String.subscript.getter();
    v12[1] = v8;
    char v9 = a1(v12);
    if (v4) {
      break;
    }
    char v10 = v9;
    swift_bridgeObjectRelease();
    if (v10) {
      return v7;
    }
    if (v7 < 0x4000) {
      return 0;
    }
  }
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t sub_100088108(void *a1)
{
  id v1 = [a1 systemLanguages];
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t sub_100088164(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3 - result;
  if (__OFSUB__(a3, result))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    return result;
  }
  if (a2 < 1)
  {
    if (v3 <= 0 && v3 > a2) {
      return 0;
    }
  }
  else if ((v3 & 0x8000000000000000) == 0 && v3 < (unint64_t)a2)
  {
    return 0;
  }
  BOOL v5 = __OFADD__(result, a2);
  result += a2;
  if (v5) {
    goto LABEL_14;
  }
  return result;
}

uint64_t sub_1000881B0(uint64_t *a1, uint64_t *a2)
{
  return sub_100087FBC(*a1, a1[1], *a2, a2[1]) & 1;
}

unint64_t sub_1000881DC()
{
  unint64_t result = qword_10021C298;
  if (!qword_10021C298)
  {
    type metadata accessor for Locale.MeasurementSystem();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10021C298);
  }
  return result;
}

uint64_t sub_10008822C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10002572C((uint64_t *)&unk_10021BB30);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100088294(uint64_t a1)
{
  return a1;
}

unint64_t sub_100088328()
{
  unint64_t result = qword_10021DD50;
  if (!qword_10021DD50)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10021DD50);
  }
  return result;
}

void sub_100088368(void (*a1)(void))
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 16);
  os_unfair_lock_lock(v3);
  a1();
  os_unfair_lock_unlock(v3);
}

uint64_t sub_1000883C8()
{
  sub_100043640((uint64_t)v2);
  if (v3)
  {
    uint64_t v0 = *sub_10001B620(v2, v3);
    swift_bridgeObjectRetain();
    sub_10001CA50((uint64_t)v2);
  }
  else
  {
    sub_100019994((uint64_t)v2, &qword_10021C630);
    return Dictionary.init(dictionaryLiteral:)();
  }
  return v0;
}

void sub_100088454()
{
  sub_10000DFE0();
  uint64_t v4 = v3;
  uint64_t v5 = type metadata accessor for Trialpb_TrialExperiment();
  sub_100020C48();
  uint64_t v7 = v6;
  __chkstk_darwin(v8);
  sub_10001850C();
  __chkstk_darwin(v9);
  sub_100093140();
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v26 - v11;
  uint64_t v13 = 0;
  uint64_t v29 = v4;
  sub_1000262B8();
  uint64_t v26 = v4 + 56;
  uint64_t v27 = v14;
  uint64_t v28 = v7 + 16;
  if (!v2) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v15 = __clz(__rbit64(v2));
  v2 &= v2 - 1;
  for (unint64_t i = v15 | (v13 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v13 << 6))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v12, *(void *)(v29 + 48) + *(void *)(v7 + 72) * i, v5);
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v0, v12, v5);
    sub_100024A48();
    sub_10008FFA0();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v1, v5);
    if (v2) {
      goto LABEL_2;
    }
LABEL_3:
    uint64_t v17 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v17 >= v27) {
      goto LABEL_25;
    }
    unint64_t v18 = *(void *)(v26 + 8 * v17);
    ++v13;
    if (!v18)
    {
      uint64_t v13 = v17 + 1;
      sub_10009310C();
      if (v19 == v20) {
        goto LABEL_25;
      }
      sub_100093100();
      if (!v18)
      {
        uint64_t v13 = v21 + 2;
        sub_10009310C();
        if (v19 == v20) {
          goto LABEL_25;
        }
        sub_100093100();
        if (!v18)
        {
          uint64_t v13 = v22 + 3;
          sub_10009310C();
          if (v19 == v20) {
            goto LABEL_25;
          }
          sub_100093100();
          if (!v18) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v2 = (v18 - 1) & v18;
  }
  uint64_t v24 = v23 + 4;
  if (v24 >= v27)
  {
LABEL_25:
    swift_release();
    sub_10000DFB8();
    return;
  }
  unint64_t v18 = *(void *)(v26 + 8 * v24);
  if (v18)
  {
    uint64_t v13 = v24;
    goto LABEL_22;
  }
  while (1)
  {
    uint64_t v13 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    sub_10009310C();
    if (v19 == v20) {
      goto LABEL_25;
    }
    sub_100093100();
    uint64_t v24 = v25 + 1;
    if (v18) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
}

void sub_100088674(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    unint64_t v7 = 0;
    uint64_t v8 = a1 + 40;
    uint64_t v17 = a1 + 40;
    do
    {
      uint64_t v9 = (uint64_t *)(v8 + 16 * v7);
      unint64_t v10 = v7;
      while (1)
      {
        if (v10 >= *(void *)(a1 + 16))
        {
          __break(1u);
          return;
        }
        uint64_t v11 = *(v9 - 1);
        uint64_t v12 = *v9;
        BOOL v13 = v11 == a2 && v12 == a3;
        if (!v13 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
          break;
        }
        ++v10;
        v9 += 2;
        if (v5 == v10) {
          goto LABEL_17;
        }
      }
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        sub_1000EE464();
      }
      unint64_t v14 = _swiftEmptyArrayStorage[2];
      unint64_t v15 = v14 + 1;
      if (v14 >= _swiftEmptyArrayStorage[3] >> 1)
      {
        sub_1000EE464();
        unint64_t v15 = v14 + 1;
      }
      unint64_t v7 = v10 + 1;
      _swiftEmptyArrayStorage[2] = v15;
      uint64_t v16 = &_swiftEmptyArrayStorage[2 * v14];
      void v16[4] = v11;
      v16[5] = v12;
      uint64_t v8 = v17;
    }
    while (v5 - 1 != v10);
  }
LABEL_17:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

uint64_t sub_1000887FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  if (!v5) {
    return 0;
  }
  sub_100021398();
  if (*(void *)(v7 + 32) == v4 && *(void *)(v7 + 40) == v3) {
    return 1;
  }
  uint64_t result = sub_100025848();
  if (result) {
    return 1;
  }
  if (v5 == 1) {
    return 0;
  }
  unint64_t v10 = (void *)(a3 + 56);
  for (uint64_t i = 1; ; ++i)
  {
    uint64_t v12 = i + 1;
    if (__OFADD__(i, 1)) {
      break;
    }
    BOOL v13 = *(v10 - 1) == v4 && *v10 == v3;
    if (v13 || (sub_100025848() & 1) != 0) {
      return 1;
    }
    uint64_t result = 0;
    v10 += 2;
    if (v12 == v5) {
      return result;
    }
  }
  __break(1u);
  return result;
}

BOOL static Endianness.__derived_enum_equals(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void Endianness.hash(into:)(uint64_t a1, char a2)
{
}

Swift::Int Endianness.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

BOOL sub_100088928(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static Endianness.__derived_enum_equals(_:_:)(*a1, *a2);
}

Swift::Int sub_100088934()
{
  return Endianness.hashValue.getter(*v0);
}

void sub_10008893C(uint64_t a1)
{
  Endianness.hash(into:)(a1, *v1);
}

void sub_100088944()
{
  sub_100017EC4();
  uint64_t v36 = v2;
  uint64_t v37 = v0;
  uint64_t v32 = v3;
  uint64_t v33 = v4;
  uint64_t v39 = v5;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v35 = v10;
  type metadata accessor for PegasusClientName();
  sub_100020C48();
  uint64_t v34 = v11;
  __chkstk_darwin(v12);
  uint64_t v13 = sub_10002AD4C();
  sub_100020C48();
  uint64_t v38 = v14;
  __chkstk_darwin(v15);
  sub_100092F88();
  __chkstk_darwin(v16);
  unint64_t v18 = (char *)&v28 - v17;
  uint64_t v19 = *(void *)(v9 + 16);
  uint64_t v20 = *(void *)(v9 + 24);
  sub_10001DF70(v19, v20, v7, (uint64_t)&v28 - v17);
  if (!v1)
  {
    uint64_t v30 = v0;
    uint64_t v31 = v9;
    uint64_t v39 = v20;
    type metadata accessor for ParsecURLRequestBuilder();
    sub_100016608();
    v21();
    uint64_t v22 = sub_100020670();
    uint64_t v28 = v18;
    uint64_t v29 = v13;
    swift_bridgeObjectRetain();
    sub_10001FC6C();
    swift_bridgeObjectRelease();
    sub_100088C90();
    sub_100023D14();
    v23();
    PegasusClientName.rawValue.getter();
    sub_10002E854();
    sub_1000283AC();
    v24();
    sub_100023FA0(0, &qword_10021B9B0);
    Dictionary.init(dictionaryLiteral:)();
    sub_10001EE6C();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10001FD00();
    uint64_t v25 = v31;
    sub_10001FCB4(v22, *(void *)(v31 + 48), *(void *)(v31 + 56));
    sub_10001EE1C(v22, *(void *)(v25 + 32), *(void *)(v25 + 40));
    sub_100028E6C();
    sub_10001F994(v22, v19, v39);
    sub_100089204();
    UserAgent.fullString.getter();
    uint64_t v26 = sub_100093080();
    sub_100089274(v26, v27);
    swift_bridgeObjectRelease();
    sub_100021764(v35);
    URLRequest.cachePolicy.setter();
    swift_release();
    (*(void (**)(char *, uint64_t))(v38 + 8))(v28, v29);
  }
  sub_100024A18();
}

uint64_t sub_100088C90()
{
  type metadata accessor for ParsecKeys();
  static ParsecKeys.shared.getter();
  ParsecKeys.oldSecretKey.getter();
  swift_release();
  sub_100029304();
  sub_10002464C();
  swift_bridgeObjectRelease();
  static ParsecKeys.shared.getter();
  ParsecKeys.encryptedToken.getter();
  swift_release();
  sub_1000930D0();
  sub_10002464C();

  return swift_bridgeObjectRelease();
}

void sub_100088D64()
{
  sub_10000DFE0();
  unint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v10 = type metadata accessor for String.Encoding();
  uint64_t v11 = sub_100016544(v10);
  __chkstk_darwin(v11);
  sub_100017CD4();
  if (v9) {
    uint64_t v12 = v9;
  }
  else {
    uint64_t v12 = _swiftEmptyArrayStorage;
  }
  uint64_t v41 = v12;
  if (!v1) {
    goto LABEL_18;
  }
  uint64_t v13 = HIBYTE(v1) & 0xF;
  if ((v1 & 0x2000000000000000) == 0) {
    uint64_t v13 = v3 & 0xFFFFFFFFFFFFLL;
  }
  if (!v13)
  {
LABEL_18:
    swift_bridgeObjectRetain();
    goto LABEL_29;
  }
  uint64_t v38 = (void *)v3;
  uint64_t v39 = v1;
  sub_100021100();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if ((StringProtocol.contains<A>(_:)() & 1) == 0
    || (v38 = (void *)v3, uint64_t v39 = v1, (StringProtocol.contains<A>(_:)() & 1) == 0))
  {
    if (v5)
    {
      uint64_t v38 = (void *)v3;
      uint64_t v39 = v1;
      swift_bridgeObjectRetain();
      v14._uint64_t countAndFlagsBits = 45;
      v14._object = (void *)0xE100000000000000;
      String.append(_:)(v14);
      v15._uint64_t countAndFlagsBits = v7;
      v15._object = v5;
      String.append(_:)(v15);
      swift_bridgeObjectRelease();
    }
  }
  uint64_t v16 = v12[2];
  if (v16)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v17 = v12 + 5;
    while (1)
    {
      uint64_t v19 = *(v17 - 1);
      uint64_t v18 = *v17;
      uint64_t v38 = (void *)v19;
      uint64_t v39 = v18;
      swift_bridgeObjectRetain();
      if (StringProtocol.contains<A>(_:)()) {
        break;
      }
      v17 += 2;
      swift_bridgeObjectRelease();
      if (!--v16)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_17;
      }
    }
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRetain();
    uint64_t v22 = swift_bridgeObjectRetain();
    sub_100088674(v22, v19, v18);
    uint64_t v24 = v23;
    swift_bridgeObjectRelease();
    uint64_t v41 = (void *)v24;
    uint64_t v20 = v19;
    uint64_t v21 = v18;
  }
  else
  {
LABEL_17:
    swift_bridgeObjectRetain();
    uint64_t v20 = v3;
    uint64_t v21 = v1;
  }
  sub_100092040(0, 0, v20, v21);
  uint64_t v12 = v41;
  if (v41[2] >= 4uLL)
  {
    type metadata accessor for __ContiguousArrayStorageBase();
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain_n();
    uint64_t v25 = (void *)swift_dynamicCastClass();
    if (!v25)
    {
      swift_bridgeObjectRelease();
      uint64_t v25 = _swiftEmptyArrayStorage;
    }
    uint64_t v26 = v25[2];
    swift_release();
    if (v26 == 3)
    {
      uint64_t v27 = (void *)swift_dynamicCastClass();
      swift_bridgeObjectRelease_n();
      if (v27)
      {
LABEL_27:
        swift_bridgeObjectRelease();
        uint64_t v41 = v27;
        uint64_t v12 = v27;
        goto LABEL_29;
      }
      uint64_t v27 = _swiftEmptyArrayStorage;
    }
    else
    {
      swift_bridgeObjectRelease();
      sub_10011A760((uint64_t)v41, (uint64_t)(v41 + 4), 0, 7uLL);
      uint64_t v27 = v37;
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    goto LABEL_27;
  }
  swift_bridgeObjectRelease();
LABEL_29:
  if (v12[2])
  {
    uint64_t v40 = sub_10002572C(&qword_100219B08);
    uint64_t v38 = v12;
    swift_bridgeObjectRetain();
    uint64_t v28 = static JSONSerializationUtil.data(withJSONObject:options:)(&v38, 0);
    unint64_t v30 = v29;
    sub_10001CA50((uint64_t)&v38);
    static String.Encoding.utf8.getter();
    uint64_t v31 = String.init(data:encoding:)();
    if (v32)
    {
      uint64_t v33 = v31;
      uint64_t v34 = v32;
      uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      sub_100118E90(v35, v36, v33, v34);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    sub_1000291B4(v28, v30);
  }
  swift_bridgeObjectRelease();
  sub_10000DFB8();
}

uint64_t sub_100089204()
{
  if (qword_100218C08 != -1) {
    uint64_t result = swift_once();
  }
  if (byte_100236B90 == 1) {
    return sub_10002464C();
  }
  return result;
}

void sub_100089274(uint64_t a1, uint64_t a2)
{
  if (a2 || (sub_100025238(), !v2))
  {
    if ((sub_10002C24C() & 1) == 0)
    {
      uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      sub_100023E80(v3, v4);
      swift_bridgeObjectRelease();
    }
  }
}

#error "100089364: call analysis failed (funcsize=49)"

void sub_1000893B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_100017EC4();
  a19 = v20;
  a20 = v21;
  uint64_t v23 = v22;
  uint64_t v24 = sub_10002572C(&qword_10021BB20);
  uint64_t v25 = sub_100016544(v24);
  __chkstk_darwin(v25);
  uint64_t v27 = (char *)&a9 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = type metadata accessor for URL();
  sub_100020C48();
  uint64_t v30 = __chkstk_darwin(v29);
  __chkstk_darwin(v30);
  sub_100013C38(v23, (SEL *)&selRef_replaySearchURL);
  if (!v31) {
    goto LABEL_5;
  }
  URL.init(string:)();
  swift_bridgeObjectRelease();
  sub_1000184F4((uint64_t)v27, 1, v28);
  if (v32)
  {
    sub_100019994((uint64_t)v27, &qword_10021BB20);
LABEL_5:
    sub_100092D2C();
    uint64_t v33 = sub_100024A30();
    sub_1000240D4(v33, v34);
    goto LABEL_6;
  }
  sub_10002DEA8();
  sub_10000E0F4();
  v35();
  sub_100016608();
  v36();
  URLRequest.init(url:cachePolicy:timeoutInterval:)();
  sub_100092A34(v23);
  URLRequest.allHTTPHeaderFields.setter();
  uint64_t v37 = sub_100024A48();
  v38(v37);
LABEL_6:
  sub_100024A18();
}

void sub_100089584()
{
  sub_100017EC4();
  uint64_t v167 = v1;
  uint64_t v168 = v2;
  uint64_t v159 = v3;
  uint64_t v160 = (void *)v4;
  uint64_t v164 = v6;
  uint64_t v165 = v5;
  uint64_t v8 = v7;
  uint64_t v175 = v9;
  uint64_t v10 = sub_10002572C(&qword_10021C620);
  uint64_t v11 = sub_100016544(v10);
  __chkstk_darwin(v11);
  uint64_t v158 = (uint64_t)&v152 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000E100();
  __chkstk_darwin(v13);
  sub_100024FFC();
  uint64_t v163 = v14;
  uint64_t v161 = type metadata accessor for PegasusContext(0);
  sub_10001DCF8();
  __chkstk_darwin(v15);
  sub_100092FA4(v16, (uint64_t)v152);
  uint64_t v17 = sub_10002572C(&qword_10021BB20);
  uint64_t v18 = sub_100016544(v17);
  __chkstk_darwin(v18);
  sub_100017D2C();
  uint64_t v172 = v19;
  sub_10000E100();
  uint64_t v21 = __chkstk_darwin(v20);
  uint64_t v23 = (char *)&v152 - v22;
  __chkstk_darwin(v21);
  sub_100024FFC();
  uint64_t v173 = v24;
  uint64_t v25 = type metadata accessor for URL();
  sub_100020C48();
  uint64_t v27 = v26;
  __chkstk_darwin(v28);
  sub_100017D2C();
  uint64_t v166 = v29;
  sub_10000E100();
  __chkstk_darwin(v30);
  char v32 = (char *)&v152 - v31;
  uint64_t v33 = type metadata accessor for PegasusClientName();
  sub_100020C48();
  uint64_t v35 = v34;
  __chkstk_darwin(v36);
  sub_100024F80();
  uint64_t v174 = v0;
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (Strong)
  {
    id v157 = v32;
    uint64_t v170 = v27;
    uint64_t v171 = Strong;
    uint64_t v169 = v25;
    uint64_t v38 = v8;
    uint64_t v39 = sub_100013C38(v8, (SEL *)&selRef_clientName);
    uint64_t v41 = v40;
    HIDWORD(v154) = enum case for PegasusClientName.Spotlight(_:);
    sub_100023D14();
    v42();
    uint64_t v43 = PegasusClientName.rawValue.getter();
    uint64_t v45 = v44;
    uint64_t v155 = v35;
    uint64_t v156 = v33;
    uint64_t v152 = *(void (**)(uint64_t, uint64_t))(v35 + 8);
    v152(v0, v33);
    uint64_t v153 = v35 + 8;
    if (v41)
    {
      BOOL v46 = v39 == v43 && v41 == v45;
      if (v46)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        char v47 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v47 & 1) == 0) {
          goto LABEL_15;
        }
      }
      if ((char *)[v175 triggerEvent] - 24 <= (char *)0xFFFFFFFFFFFFFFFDLL)
      {
        uint64_t v49 = (uint64_t)v38;
        id v50 = [v38 uncommittedSearchURL];
        if (v50)
        {
          unint64_t v51 = v50;
          static URL._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v52 = 0;
        }
        else
        {
          uint64_t v52 = 1;
        }
        uint64_t v56 = v169;
        uint64_t v57 = v173;
        uint64_t v58 = (void *)v174;
        sub_10002538C((uint64_t)v23, v52, 1, v169);
LABEL_21:
        sub_100033264((uint64_t)v23, v57);
        sub_1000184F4(v57, 1, v56);
        if (v46)
        {
          sub_100019994(v57, &qword_10021BB20);
          sub_100092D78();
          sub_100024A30();
          *uint64_t v59 = 1;
          swift_willThrow();
LABEL_61:
          swift_unknownObjectRelease();
          goto LABEL_62;
        }
        sub_10000E0F4();
        v60();
        sub_10008A384();
        type metadata accessor for ParsecURLRequestBuilder();
        sub_100093000();
        sub_100016608();
        v61();
        uint64_t v62 = v167;
        uint64_t v63 = sub_100020670();
        if (v62)
        {
          sub_10002A494();
          sub_100016614();
          v64();
          goto LABEL_61;
        }
        uint64_t v65 = v63;
        uint64_t v174 = v49;
        uint64_t v66 = v58[20];
        uint64_t v67 = v58[21];
        id v68 = [v175 queryString];
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v172 = (char *)v66;
        uint64_t v173 = v67;
        sub_100118BF0(v66, v67);
        swift_bridgeObjectRelease();
        if ([v175 type] == (id)1)
        {
          uint64_t v69 = v58[87];
          swift_bridgeObjectRetain();
        }
        else
        {
          uint64_t v69 = 0;
        }
        uint64_t v70 = v160;
        uint64_t v71 = (void *)v174;
        os_log_type_t v72 = (char *)[v175 triggerEvent];
        if ((unint64_t)(v72 - 22) < 2 || v72 == (char *)8 || v72 == (char *)24) {
          goto LABEL_34;
        }
        if (v72 == (char *)21)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)();
          sub_10002464C();
          swift_bridgeObjectRelease();
        }
        else if (v72 == (char *)10)
        {
LABEL_34:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          goto LABEL_35;
        }
        if (!v69)
        {
LABEL_36:
          uint64_t v75 = sub_1000F40EC(v175);
          sub_1000234B4(v75);
          swift_bridgeObjectRelease();
          sub_10001FD00();
          sub_100088C90();
          sub_100013C38(v71, (SEL *)&selRef_clientName);
          sub_10008A424();
          swift_bridgeObjectRelease();
          sub_100092BD8(v175, (SEL *)&selRef_topics);
          uint64_t v76 = sub_100093040();
          sub_10008A458(v76, v77);
          swift_bridgeObjectRelease();
          sub_10008A570();
          uint64_t v174 = type metadata accessor for SessionTokens(0);
          sub_10008A600();
          sub_1000CCC08(v175);
          if (v78)
          {
            sub_10002464C();
            swift_bridgeObjectRelease();
          }
          sub_100013C38(v71, (SEL *)&selRef_clientName);
          sub_100092F7C();
          if (v70) {
            sub_100092BD8(v70, (SEL *)&selRef_overrideFeatureFlags);
          }
          uint64_t v79 = v168;
          sub_100093040();
          sub_10001EE6C();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_100013C38(v71, (SEL *)&selRef_clientName);
          sub_100027534();
          sub_10008A864();
          swift_bridgeObjectRelease();
          sub_10008A90C();
          sub_100013C38(v71, (SEL *)&selRef_clientName);
          sub_100027534();
          if (v46) {
            uint64_t v86 = 0xE000000000000000;
          }
          else {
            uint64_t v86 = v80;
          }
          sub_10008A9E4(v65, v85, v86, v171, v81, v82, v83, v84, (uint64_t)v152, v153, v154, v155, v156, (uint64_t)v157, v158, v159, (uint64_t)v160, v161, v162,
            v163);
          swift_bridgeObjectRelease();
          uint64_t v87 = sub_10002F084();
          sub_10001F994(v87, v88, v89);
          uint64_t v90 = v162;
          sub_1000236C8(v79, v162);
          uint64_t v91 = (void *)sub_10002EA6C();
          sub_100013C38(v91, v92);
          sub_10009304C();
          sub_10008ACB8();
          swift_bridgeObjectRelease();
          sub_100028F88(v90);
          uint64_t v93 = sub_10002F084();
          sub_10001FCB4(v93, v94, v95);
          sub_10001EE1C(v65, *(void *)(v79 + 88), *(void *)(v79 + 96));
          sub_100028E6C();
          sub_1000CCC14(v175);
          sub_100027534();
          sub_10008B170();
          swift_bridgeObjectRelease();
          uint64_t v96 = sub_10002DEA8();
          sub_10008B1B8(v96, v97);
          uint64_t v98 = sub_10002DEA8();
          sub_10008B210(v98, v99);
          uint64_t v100 = sub_10002DEA8();
          sub_10008B26C(v100, v101);
          uint64_t v102 = sub_10002DEA8();
          sub_10008B2C8(v102, v103);
          uint64_t v104 = sub_10002DEA8();
          sub_10008B320(v104, v105);
          sub_100013C38(v175, (SEL *)&selRef_l2version);
          sub_100092F7C();
          if (v46) {
            uint64_t v107 = 0xE000000000000000;
          }
          else {
            uint64_t v107 = v106;
          }
          sub_100013C38(v175, (SEL *)&selRef_l3version);
          uint64_t v108 = sub_100093040();
          sub_10008B358(v108, v109, v107, v110);
          uint64_t v111 = v168;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_10009304C();
          sub_10008B3FC();
          uint64_t v112 = sub_10002DEA8();
          sub_10008B6AC(v112, v113);
          sub_100013C38(v71, (SEL *)&selRef_clientName);
          uint64_t v114 = v163;
          PegasusClientName.init(rawValue:)();
          sub_1000184F4(v114, 1, v156);
          uint64_t v115 = v164;
          if (v46) {
            goto LABEL_49;
          }
          sub_100092DC4();
          uint64_t v116 = sub_10002E854();
          int v118 = v117(v116);
          if (v118 == HIDWORD(v154))
          {
            uint64_t v119 = sub_10002DEA8();
            sub_10008B7E0(v119, v120);
LABEL_49:
            sub_100019994(v114, &qword_10021C620);
LABEL_50:
            sub_100093030();
            sub_10008B8D0();
            sub_10002DEA8();
            sub_10008B938();
            sub_10002DEA8();
            sub_10008B9A0();
            goto LABEL_51;
          }
          if (v118 == enum case for PegasusClientName.Siri(_:))
          {
            sub_100093030();
            sub_10008B874();
          }
          else if (v118 != enum case for PegasusClientName.Messages(_:))
          {
            if (v118 != enum case for PegasusClientName.News(_:))
            {
              uint64_t v151 = sub_10002E854();
              ((void (*)(uint64_t))v152)(v151);
              goto LABEL_49;
            }
            sub_10007E6FC();
            int v149 = sub_10007BA70();
            BOOL v150 = sub_10007C350(v149);
            swift_unknownObjectRelease();
            sub_100019994(v114, &qword_10021C620);
            if (v150) {
              goto LABEL_50;
            }
            sub_10002F084();
            sub_10008BA1C();
LABEL_51:
            sub_100093030();
            sub_10008BA50();
            uint64_t v121 = sub_10002DEA8();
            sub_10008BAAC(v121, v122);
            uint64_t v123 = sub_10002DEA8();
            sub_10008BB04(v123, v124);
            sub_10008BB8C();
            sub_10009304C();
            sub_10008BC14();
            sub_100013C38(v71, (SEL *)&selRef_userAgent);
            sub_100027534();
            sub_100089274(v65, v125);
            swift_bridgeObjectRelease();
            sub_10008BCAC(v65, v111, (uint64_t)v71);
            [v175 scale];
            *(float *)&double v126 = v126;
            sub_10008BD74(*(float *)&v126);
            sub_10002F084();
            sub_100089204();
            sub_100013C38(v71, (SEL *)&selRef_clientName);
            uint64_t v128 = v127;
            uint64_t v129 = sub_10002DEA8();
            sub_10008BE08(v129, v130, v131, v128);
            swift_bridgeObjectRelease();
            [v175 exp];
            sub_10008BEFC(v65, v71);
            id v132 = [v175 queryCommand];
            if (!v132)
            {
LABEL_60:
              sub_100021764(v115);
              [v71 timeoutIntervalForRequest];
              URLRequest.timeoutInterval.setter();
              [v71 assumesHTTP3Capable];
              URLRequest.assumesHTTP3Capable.setter();
              swift_unknownObjectRelease();
              swift_release();
              sub_10000E040();
              v148();
              goto LABEL_62;
            }
            uint64_t v133 = v132;
            self;
            uint64_t v134 = swift_dynamicCastObjCClass();
            if (v134)
            {
              unint64_t v135 = (void *)v134;
              id v136 = v133;
              sub_1000CCC2C(v135);
              sub_10001ED28();
              swift_bridgeObjectRelease();
              uint64_t v137 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v139 = v138;
              [v135 entityType];
              swift_bridgeObjectRetain();
              sub_100118BF0(v137, v139);
              swift_bridgeObjectRelease();
              uint64_t v115 = v164;
              swift_bridgeObjectRelease();
              uint64_t v140 = sub_100024A48();
              sub_10008BF8C(v140, v141);
            }
            else
            {
              self;
              uint64_t v142 = swift_dynamicCastObjCClass();
              if (!v142)
              {
LABEL_59:

                goto LABEL_60;
              }
              uint64_t v143 = (void *)v142;
              id v144 = v133;
              sub_1000CCC20(v143);
              sub_10001ED28();
              swift_bridgeObjectRelease();
              uint64_t v145 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v147 = v146;
              [v143 querySource];
              swift_bridgeObjectRetain();
              sub_100118BF0(v145, v147);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }

            goto LABEL_59;
          }
          sub_100019994(v114, &qword_10021C620);
          goto LABEL_51;
        }
LABEL_35:
        uint64_t v73 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        sub_100118BF0(v73, v74);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_36;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
LABEL_15:
    uint64_t v49 = (uint64_t)v38;
    id v53 = [v38 searchURL];
    if (v53)
    {
      uint64_t v54 = v53;
      uint64_t v23 = v172;
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v55 = 0;
      uint64_t v56 = v169;
    }
    else
    {
      uint64_t v55 = 1;
      uint64_t v56 = v169;
      uint64_t v23 = v172;
    }
    uint64_t v57 = v173;
    sub_10002538C((uint64_t)v23, v55, 1, v56);
    uint64_t v58 = (void *)v174;
    goto LABEL_21;
  }
  sub_100092D78();
  sub_100024A30();
  *unint64_t v48 = 0;
  swift_willThrow();
LABEL_62:
  sub_100024A18();
}

void sub_10008A384()
{
  if (swift_unknownObjectWeakLoadStrong())
  {
    id v0 = [self defaultCenter];
    [v0 postNotificationName:@"com.apple.parsecd.performedSearch" object:0];
    swift_unknownObjectRelease();
  }
}

uint64_t sub_10008A424()
{
  return sub_10002464C();
}

void sub_10008A458(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for String.Encoding();
  uint64_t v4 = sub_100016544(v3);
  __chkstk_darwin(v4);
  sub_10001DDC8();
  if (*(void *)(a2 + 16))
  {
    v11[3] = sub_10002572C(&qword_10021C640);
    v11[0] = a2;
    swift_bridgeObjectRetain();
    static JSONSerializationUtil.data(withJSONObject:options:)(v11, 0);
    sub_10001CA50((uint64_t)v11);
    static String.Encoding.utf8.getter();
    String.init(data:encoding:)();
    uint64_t v6 = v5;
    uint64_t v7 = sub_100029304();
    sub_1000291B4(v7, v8);
    if (v6)
    {
      uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      sub_100023E80(v9, v10);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
}

uint64_t sub_10008A570()
{
  type metadata accessor for PegasusContext(0);
  sub_10002464C();

  return swift_bridgeObjectRelease();
}

void sub_10008A600()
{
  sub_10000DFE0();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v8 = sub_10002572C(&qword_10021C638);
  uint64_t v9 = sub_100016544(v8);
  __chkstk_darwin(v9);
  sub_10002E838();
  uint64_t v10 = type metadata accessor for Trialpb_TrialExperiment();
  sub_100020C48();
  uint64_t v12 = v11;
  __chkstk_darwin(v13);
  sub_100017DC8();
  if (![v5 sessionExperimentMetadataEnabled]) {
    goto LABEL_10;
  }
  sub_100013C38(v7, (SEL *)&selRef_clientShortName);
  if (!v14) {
    goto LABEL_10;
  }
  if (!v3)
  {
    swift_bridgeObjectRelease();
    sub_10002947C();
    sub_10002538C(v26, v27, v28, v10);
    goto LABEL_9;
  }
  sub_10005CC04(v3, v0);
  swift_bridgeObjectRelease();
  uint64_t v15 = sub_100092F70();
  if (sub_100027BA4(v15, v16, v10) == 1)
  {
LABEL_9:
    sub_100019994(v0, &qword_10021C638);
    goto LABEL_10;
  }
  sub_10000E0F4();
  v17();
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_10002E69C();
  uint64_t v18 = Trialpb_TrialExperiment.treatmentID.getter();
  sub_10002B2A4(v18, v19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_10002E69C();
  uint64_t v20 = Trialpb_TrialExperiment.experimentID.getter();
  sub_10002B2A4(v20, v21);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_10002E69C();
  uint64_t v22 = Trialpb_TrialExperiment.experimentNamespace.getter();
  sub_10002B2A4(v22, v23);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_10002464C();
  swift_bridgeObjectRelease();
  sub_100013C38(v7, (SEL *)&selRef_treatmentId);
  uint64_t v25 = v24;
  swift_bridgeObjectRelease();
  if (v25)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_10002464C();
    swift_bridgeObjectRelease();
  }
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v1, v10);
LABEL_10:
  sub_10000DFB8();
}

uint64_t sub_10008A864()
{
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    sub_100008AC4(v4);
    sub_10001B620(v4, v4[3]);
    uint64_t v1 = sub_100024A48();
    char v3 = sub_10002CA2C(v1, v2);
    sub_10001CA50((uint64_t)v4);
    if (v3) {
      sub_10002464C();
    }
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_10008A90C()
{
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    id v1 = sub_10000ACC8();
    if (v2)
    {
      uint64_t v3 = (uint64_t)v1;
      uint64_t v4 = v2;
      uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      sub_100118E90(v5, v6, v3, v4);
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    else
    {
      return swift_unknownObjectRelease();
    }
  }
  return result;
}

void sub_10008A9E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_10000DFE0();
  a19 = v20;
  a20 = v21;
  uint64_t v22 = sub_10002572C(&qword_10021C620);
  uint64_t v23 = sub_100016544(v22);
  __chkstk_darwin(v23);
  sub_100029F3C();
  __chkstk_darwin(v24);
  uint64_t v26 = (char *)&a9 - v25;
  swift_bridgeObjectRetain();
  sub_100024A48();
  PegasusClientName.init(rawValue:)();
  uint64_t v27 = type metadata accessor for PegasusClientName();
  if (sub_100027BA4((uint64_t)v26, 1, v27) == 1)
  {
LABEL_30:
    sub_100019994((uint64_t)v26, &qword_10021C620);
LABEL_32:
    sub_10000DFB8();
    return;
  }
  sub_100092DC4();
  uint64_t v28 = sub_100029304();
  int v30 = v29(v28);
  if (v30 != enum case for PegasusClientName.Safari(_:)
    && v30 != enum case for PegasusClientName.Spotlight(_:)
    && v30 != enum case for PegasusClientName.Lookup(_:))
  {
    uint64_t v48 = sub_100029304();
    v49(v48);
    goto LABEL_30;
  }
  sub_100019994((uint64_t)v26, &qword_10021C620);
  swift_unknownObjectRetain();
  uint64_t v33 = sub_1000883C8();
  swift_unknownObjectRelease();
  int64_t v34 = 0;
  uint64_t v35 = v33 + 64;
  uint64_t v36 = 1 << *(unsigned char *)(v33 + 32);
  uint64_t v37 = -1;
  if (v36 < 64) {
    uint64_t v37 = ~(-1 << v36);
  }
  uint64_t v38 = v37 & *(void *)(v33 + 64);
  int64_t v39 = (unint64_t)(v36 + 63) >> 6;
  if (!v38) {
    goto LABEL_14;
  }
LABEL_13:
  sub_100093058();
  while (1)
  {
    uint64_t v43 = (uint64_t *)(*(void *)(v33 + 56) + 16 * v40);
    uint64_t v44 = *v43;
    uint64_t v45 = v43[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v46 = sub_10002E854();
    sub_100118E90(v46, v47, v44, v45);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v38) {
      goto LABEL_13;
    }
LABEL_14:
    int64_t v41 = v34 + 1;
    if (__OFADD__(v34, 1))
    {
      __break(1u);
      goto LABEL_34;
    }
    if (v41 >= v39) {
      goto LABEL_31;
    }
    ++v34;
    if (!*(void *)(v35 + 8 * v41))
    {
      int64_t v34 = v41 + 1;
      if (v41 + 1 >= v39) {
        goto LABEL_31;
      }
      if (!*(void *)(v35 + 8 * v34))
      {
        int64_t v34 = v41 + 2;
        if (v41 + 2 >= v39) {
          goto LABEL_31;
        }
        if (!*(void *)(v35 + 8 * v34)) {
          break;
        }
      }
    }
LABEL_27:
    sub_10002A0B8();
  }
  int64_t v42 = v41 + 3;
  if (v42 >= v39)
  {
LABEL_31:
    swift_release();
    goto LABEL_32;
  }
  if (*(void *)(v35 + 8 * v42))
  {
    int64_t v34 = v42;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v34 = v42 + 1;
    if (__OFADD__(v42, 1)) {
      break;
    }
    if (v34 >= v39) {
      goto LABEL_31;
    }
    ++v42;
    if (*(void *)(v35 + 8 * v34)) {
      goto LABEL_27;
    }
  }
LABEL_34:
  __break(1u);
}

void sub_10008ACB8()
{
  sub_10000DFE0();
  uint64_t v2 = v1;
  uint64_t v66 = v3;
  uint64_t v58 = v4;
  uint64_t v62 = v5;
  uint64_t v6 = sub_10002572C(&qword_10021BB10);
  uint64_t v7 = sub_100016544(v6);
  __chkstk_darwin(v7);
  sub_1000165EC(v8, v57);
  uint64_t v65 = type metadata accessor for Date();
  sub_100020C48();
  uint64_t v60 = v9;
  __chkstk_darwin(v10);
  sub_10000E020(v11, v57);
  __chkstk_darwin(v12);
  uint64_t v64 = (char *)&v57 - v13;
  sub_10000E100();
  __chkstk_darwin(v14);
  uint64_t v63 = (char *)&v57 - v15;
  sub_10000E100();
  __chkstk_darwin(v16);
  sub_100024FFC();
  uint64_t v61 = v17;
  uint64_t v18 = type metadata accessor for PegasusClientName();
  sub_100020C48();
  uint64_t v20 = v19;
  __chkstk_darwin(v21);
  sub_100029F3C();
  __chkstk_darwin(v22);
  uint64_t v23 = *(void (**)(char *, void, uint64_t))(v20 + 104);
  v23((char *)&v57 - v24, enum case for PegasusClientName.Safari(_:), v18);
  uint64_t v25 = PegasusClientName.rawValue.getter();
  uint64_t v27 = v26;
  uint64_t v28 = *(void (**)(void))(v20 + 8);
  sub_1000283AC();
  v28();
  if (v25 == v66 && v27 == v2) {
    goto LABEL_12;
  }
  char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v30) {
    goto LABEL_13;
  }
  v23(v0, enum case for PegasusClientName.Spotlight(_:), v18);
  uint64_t v31 = PegasusClientName.rawValue.getter();
  uint64_t v33 = v32;
  sub_1000930DC();
  sub_1000283AC();
  v28();
  if (v31 == v66 && v33 == v2)
  {
LABEL_12:
    swift_bridgeObjectRelease();
  }
  else
  {
    char v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v35 & 1) == 0) {
      goto LABEL_26;
    }
  }
LABEL_13:
  uint64_t v36 = (uint64_t *)(v58 + *(int *)(type metadata accessor for PegasusContext(0) + 84));
  uint64_t v37 = v36[1];
  if (v37)
  {
    uint64_t v38 = *v36;
    uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v41 = v40;
    uint64_t v67 = v38;
    uint64_t v68 = v37;
    swift_bridgeObjectRetain();
    uint64_t v42 = String.init<A>(_:)();
    sub_100118E90(v39, v41, v42, v43);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v44 = v61;
  static Date.now.getter();
  uint64_t v45 = v63;
  static Date.- infix(_:_:)();
  uint64_t v46 = v64;
  static Date.- infix(_:_:)();
  uint64_t v47 = v59;
  sub_100092DC4();
  uint64_t v48 = v65;
  if (sub_100027BA4(v47, 1, v65) != 1)
  {
    uint64_t v50 = v60;
    sub_10000E0F4();
    v51();
    if (static Date.< infix(_:_:)())
    {
      uint64_t v52 = 0xE400000000000000;
      uint64_t v53 = 1919431742;
    }
    else if (static Date.< infix(_:_:)())
    {
      uint64_t v52 = 0xE700000000000000;
      uint64_t v53 = 0x7268342D6D3531;
    }
    else
    {
      if ((static Date.< infix(_:_:)() & 1) == 0)
      {
        uint64_t v49 = *(void (**)(uint64_t))(v50 + 8);
        uint64_t v56 = sub_1000930D0();
        v49(v56);
        ((void (*)(char *, uint64_t))v49)(v46, v48);
        goto LABEL_25;
      }
      uint64_t v52 = 0xE400000000000000;
      uint64_t v53 = 1832202556;
    }
    uint64_t v49 = *(void (**)(uint64_t))(v50 + 8);
    ((void (*)(uint64_t, uint64_t))v49)(v57, v48);
    uint64_t v54 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_100118E90(v54, v55, v53, v52);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    ((void (*)(char *, uint64_t))v49)(v46, v48);
    goto LABEL_25;
  }
  sub_100019994(v47, &qword_10021BB10);
  uint64_t v49 = *(void (**)(uint64_t))(v60 + 8);
  ((void (*)(char *, uint64_t))v49)(v46, v48);
LABEL_25:
  ((void (*)(char *, uint64_t))v49)(v45, v48);
  ((void (*)(uint64_t, uint64_t))v49)(v44, v48);
LABEL_26:
  sub_10000DFB8();
}

void sub_10008B170()
{
  sub_100027540();
  if (v0 || (sub_100025238(), !v1))
  {
    if ((sub_10002C24C() & 1) == 0) {
      sub_10002137C();
    }
  }
}

void sub_10008B1B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 24);
  if (v2)
  {
    if (*(void *)(a2 + 16)) {
      BOOL v3 = 0;
    }
    else {
      BOOL v3 = v2 == 0xE000000000000000;
    }
    if (!v3 && (sub_10002C24C() & 1) == 0) {
      sub_100019B84();
    }
  }
}

void sub_10008B210(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 80);
  if (v2)
  {
    if (*(void *)(a2 + 72)) {
      BOOL v3 = 0;
    }
    else {
      BOOL v3 = v2 == 0xE000000000000000;
    }
    if (!v3 && (sub_10002C24C() & 1) == 0) {
      sub_100019B84();
    }
  }
}

void sub_10008B26C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  if (v2)
  {
    if (*(void *)(a2 + 32)) {
      BOOL v3 = 0;
    }
    else {
      BOOL v3 = v2 == 0xE000000000000000;
    }
    if (!v3 && (sub_10002C24C() & 1) == 0) {
      sub_100019B84();
    }
  }
}

void sub_10008B2C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 136);
  if (v2)
  {
    if (*(void *)(a2 + 128)) {
      BOOL v3 = 0;
    }
    else {
      BOOL v3 = v2 == 0xE000000000000000;
    }
    if (!v3 && (sub_10002C24C() & 1) == 0) {
      sub_100019B84();
    }
  }
}

uint64_t sub_10008B320(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 64)) {
    return sub_10002464C();
  }
  return result;
}

void sub_10008B358(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((a2 || a3 != 0xE000000000000000) && (sub_100025950() & 1) == 0) {
    sub_10002464C();
  }
  if (a4 || (sub_100025238(), !v5))
  {
    if ((sub_10002C24C() & 1) == 0) {
      sub_10002464C();
    }
  }
}

void sub_10008B3FC()
{
  sub_10000DFE0();
  uint64_t v2 = v1;
  uint64_t v3 = sub_10002572C(&qword_10021DD60);
  uint64_t v4 = sub_100016544(v3);
  __chkstk_darwin(v4);
  sub_10002E838();
  uint64_t v5 = type metadata accessor for Apple_Parsec_Search_LocalCompletionInfo();
  sub_100020C48();
  __chkstk_darwin(v6);
  sub_100017DC8();
  if (!swift_unknownObjectWeakLoadStrong()
    || (id v7 = [self standardUserDefaults],
        NSString v8 = String._bridgeToObjectiveC()(),
        unsigned __int8 v9 = [v7 BOOLForKey:v8],
        v7,
        v8,
        swift_unknownObjectRelease(),
        (v9 & 1) == 0))
  {
    sub_10008EFB0(v2, v0);
    uint64_t v10 = sub_100092F70();
    if (sub_100027BA4(v10, v11, v5) == 1)
    {
      sub_100019994(v0, &qword_10021DD60);
    }
    else
    {
      sub_100020CA0();
      v12();
      Apple_Parsec_Search_LocalCompletionInfo.completions.getter();
      sub_10002572C(&qword_100219B08);
      sub_100092CA8(qword_100219B10, &qword_100219B08);
      sub_1000288A4();
      swift_bridgeObjectRelease();
      Apple_Parsec_Search_LocalCompletionInfo.origins.getter();
      sub_1000288A4();
      swift_bridgeObjectRelease();
      Apple_Parsec_Search_LocalCompletionInfo.scores.getter();
      sub_1000288A4();
      swift_bridgeObjectRelease();
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      sub_10002464C();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_10002464C();
      swift_bridgeObjectRelease();
      sub_10002464C();
      swift_bridgeObjectRelease();
      uint64_t v13 = sub_10002A494();
      v14(v13);
    }
  }
  sub_10000DFB8();
}

uint64_t sub_10008B6AC(uint64_t a1, uint64_t a2)
{
  uint64_t result = type metadata accessor for PegasusContext(0);
  uint64_t v4 = (uint64_t *)(a2 + *(int *)(result + 92));
  unint64_t v5 = v4[1];
  if (v5 >> 60 != 15)
  {
    uint64_t v6 = *v4;
    switch(v5 >> 62)
    {
      case 1uLL:
        uint64_t v7 = (int)v6;
        uint64_t v8 = v6 >> 32;
        goto LABEL_7;
      case 2uLL:
        uint64_t v7 = *(void *)(v6 + 16);
        uint64_t v8 = *(void *)(v6 + 24);
LABEL_7:
        if (v7 == v8) {
          return result;
        }
        sub_100027BCC(v6, v5);
LABEL_10:
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        object = Data.base64EncodedString(options:)(0)._object;
        uint64_t v10 = sub_100029304();
        sub_100118E90(v10, v11, v12, (uint64_t)object);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_11:
        uint64_t result = sub_10000A330(v6, v5);
        break;
      case 3uLL:
        goto LABEL_11;
      default:
        if ((v5 & 0xFF000000000000) == 0) {
          goto LABEL_11;
        }
        goto LABEL_10;
    }
  }
  return result;
}

uint64_t sub_10008B7E0(uint64_t a1, uint64_t a2)
{
  uint64_t result = type metadata accessor for PegasusContext(0);
  uint64_t v4 = (uint64_t *)(a2 + *(int *)(result + 112));
  unint64_t v5 = v4[1];
  if (v5)
  {
    uint64_t v6 = *v4;
    uint64_t v7 = HIBYTE(v5) & 0xF;
    if ((v5 & 0x2000000000000000) == 0) {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFLL;
    }
    if (v7)
    {
      uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      sub_100023E80(v8, v9);
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t sub_10008B874()
{
  uint64_t result = sub_10002B004();
  uint64_t v2 = (uint64_t *)(v0 + *(int *)(result + 112));
  unint64_t v3 = v2[1];
  if (v3)
  {
    uint64_t v4 = *v2;
    uint64_t v5 = HIBYTE(v3) & 0xF;
    if ((v3 & 0x2000000000000000) == 0) {
      uint64_t v5 = v4 & 0xFFFFFFFFFFFFLL;
    }
    if (v5) {
      return sub_10002464C();
    }
  }
  return result;
}

uint64_t sub_10008B8D0()
{
  uint64_t result = sub_10002B004();
  uint64_t v2 = (void *)(v0 + *(int *)(result + 72));
  uint64_t v3 = v2[1];
  if (v3)
  {
    if (*v2) {
      BOOL v4 = 0;
    }
    else {
      BOOL v4 = v3 == 0xE000000000000000;
    }
    if (!v4)
    {
      uint64_t result = sub_100025950();
      if ((result & 1) == 0) {
        return sub_1000930A4();
      }
    }
  }
  return result;
}

uint64_t sub_10008B938()
{
  uint64_t result = sub_10002B004();
  uint64_t v2 = (void *)(v0 + *(int *)(result + 76));
  uint64_t v3 = v2[1];
  if (v3)
  {
    if (*v2) {
      BOOL v4 = 0;
    }
    else {
      BOOL v4 = v3 == 0xE000000000000000;
    }
    if (!v4)
    {
      uint64_t result = sub_100025950();
      if ((result & 1) == 0) {
        return sub_1000930A4();
      }
    }
  }
  return result;
}

uint64_t sub_10008B9A0()
{
  uint64_t result = sub_10002B004();
  if (*(unsigned char *)(v0 + *(int *)(result + 144)) != 6)
  {
    dispatch thunk of CustomStringConvertible.description.getter();
    sub_1000265D4();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10008BA1C()
{
  return sub_10002464C();
}

uint64_t sub_10008BA50()
{
  uint64_t result = sub_10002B004();
  char v2 = *(unsigned char *)(v0 + *(int *)(result + 128));
  int v3 = *(unsigned __int8 *)(v0 + *(int *)(result + 132));
  if (v3 != 2) {
    v2 |= v3;
  }
  if (v2) {
    return sub_10002464C();
  }
  return result;
}

void sub_10008BAAC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 56);
  if (v2)
  {
    if (*(void *)(a2 + 48)) {
      BOOL v3 = 0;
    }
    else {
      BOOL v3 = v2 == 0xE000000000000000;
    }
    if (!v3 && (sub_10002C24C() & 1) == 0) {
      sub_100019B84();
    }
  }
}

void sub_10008BB04(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 120);
  if (v2)
  {
    BOOL v3 = !*(void *)(a2 + 112) && v2 == 0xE000000000000000;
    if (!v3 && (sub_10002C24C() & 1) == 0)
    {
      uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      sub_100023E80(v4, v5);
      swift_bridgeObjectRelease();
    }
  }
}

uint64_t sub_10008BB8C()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v2 = v1;
  uint64_t v3 = UUID.description.getter();
  sub_100118E90(v0, v2, v3, v4);
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10008BC14()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v1 = v0;
  uint64_t v2 = sub_100029304();
  sub_100118E90(v2, v3, v4, v1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void sub_10008BCAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a3) {
    return;
  }
  sub_100021398();
  id v15 = v4;
  uint64_t v5 = sub_100092B80(v15);
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = (uint64_t *)(v3 + *(int *)(type metadata accessor for PegasusContext(0) + 108));
    uint64_t v8 = v7[1];
    if (!v8)
    {
LABEL_6:
      swift_bridgeObjectRelease();
      goto LABEL_7;
    }
    uint64_t v9 = *v7;
    uint64_t v10 = sub_1000930D0();
    char v12 = sub_1000887FC(v10, v11, v6);
    swift_bridgeObjectRelease();
    if (v12)
    {
      uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      sub_100118E90(v13, v14, v9, v8);
      goto LABEL_6;
    }
  }
LABEL_7:
}

void sub_10008BD74(float a1)
{
  if (a1 > 0.0)
  {
    uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v4 = v3;
    uint64_t v5 = Float.description.getter();
    sub_100118E90(v2, v4, v5, v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
}

void sub_10008BE08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    BOOL v5 = a3 == 0x6867696C746F7073 && a4 == 0xE900000000000074;
    if (v5 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      uint64_t v6 = type metadata accessor for PegasusContext(0);
      uint64_t v7 = (void *)(a2 + *(int *)(v6 + 136));
      uint64_t v8 = v7[1];
      if (v8)
      {
        if (*v7) {
          BOOL v9 = 0;
        }
        else {
          BOOL v9 = v8 == 0xE000000000000000;
        }
        if (!v9)
        {
          uint64_t v10 = v6;
          if ((sub_100025950() & 1) == 0)
          {
            sub_10002464C();
            if (*(unsigned char *)(a2 + *(int *)(v10 + 140))) {
              sub_10002464C();
            }
          }
        }
      }
    }
  }
}

id sub_10008BEFC(int a1, id a2)
{
  id result = [a2 exp];
  if (result)
  {
    dispatch thunk of CustomStringConvertible.description.getter();
    sub_100029304();
    sub_1000930A4();
    return (id)swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10008BF8C(uint64_t a1, void *a2)
{
  uint64_t result = sub_1000A2998(a2);
  if (v3)
  {
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    sub_100023E80(v4, v5);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_10008C008()
{
  sub_100017EC4();
  uint64_t v4 = v3;
  uint64_t v100 = v5;
  uint64_t v101 = v6;
  uint64_t v8 = v7;
  uint64_t v97 = type metadata accessor for PegasusClientName();
  sub_100020C48();
  uint64_t v98 = v9;
  __chkstk_darwin(v10);
  sub_10000E04C();
  uint64_t v92 = v11;
  uint64_t v94 = sub_10002572C(&qword_10021C648);
  sub_10001DCF8();
  __chkstk_darwin(v12);
  sub_1000165EC(v13, v89);
  uint64_t v14 = sub_10002572C(&qword_10021C620);
  uint64_t v15 = sub_100016544(v14);
  __chkstk_darwin(v15);
  sub_10000E020(v16, v90);
  __chkstk_darwin(v17);
  sub_100029F3C();
  __chkstk_darwin(v18);
  sub_100024FFC();
  uint64_t v99 = v19;
  uint64_t v20 = sub_10002572C(&qword_10021BB20);
  uint64_t v21 = sub_100016544(v20);
  __chkstk_darwin(v21);
  uint64_t v22 = sub_10002AD4C();
  sub_100020C48();
  uint64_t v24 = v23;
  __chkstk_darwin(v25);
  sub_10001ED70();
  __chkstk_darwin(v26);
  sub_100093140();
  __chkstk_darwin(v27);
  sub_100024FFC();
  uint64_t v102 = v4;
  id v28 = [v4 searchURL];
  if (!v28)
  {
    sub_10002947C();
    sub_10002538C(v39, v40, v41, v22);
    goto LABEL_6;
  }
  uint64_t v29 = v28;
  uint64_t v91 = v8;
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  char v30 = *(void (**)(void))(v24 + 32);
  sub_100020CA0();
  v30();
  uint64_t v31 = sub_10002E8E0();
  sub_10002538C(v31, v32, v33, v22);
  uint64_t v34 = sub_100092F70();
  sub_1000184F4(v34, v35, v22);
  if (v73)
  {
LABEL_6:
    sub_100019994(v0, &qword_10021BB20);
    sub_100092D78();
    uint64_t v42 = sub_100024A30();
    sub_1000240D4(v42, v43);
    goto LABEL_7;
  }
  sub_100093040();
  sub_100020CA0();
  v30();
  sub_10008A384();
  type metadata accessor for ParsecURLRequestBuilder();
  sub_100093000();
  sub_10002E98C();
  sub_100016608();
  v36();
  uint64_t v37 = sub_100020670();
  if (v1)
  {
    sub_100016614();
    v38();
    goto LABEL_7;
  }
  uint64_t v44 = v37;
  uint64_t v45 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  sub_100118BF0(v45, v46);
  swift_bridgeObjectRelease();
  uint64_t v47 = sub_1000F40EC(v101);
  sub_1000234B4(v47);
  swift_bridgeObjectRelease();
  sub_10001FD00();
  sub_100088C90();
  sub_100013C38(v102, (SEL *)&selRef_clientName);
  sub_100023FA0(0, &qword_10021B9B0);
  Dictionary.init(dictionaryLiteral:)();
  sub_10001EE6C();
  swift_bridgeObjectRelease();
  uint64_t v48 = v0;
  swift_bridgeObjectRelease();
  uint64_t v49 = type metadata accessor for PegasusContext(0);
  uint64_t v50 = v100;
  sub_10001F994(v44, *(uint64_t *)((char *)v100 + *(int *)(v49 + 80)), *(uint64_t *)((char *)v100 + *(int *)(v49 + 80) + 8));
  sub_10001FCB4(v44, *v50, v50[1]);
  sub_10001EE1C(v44, v50[11], v50[12]);
  sub_100028E6C();
  sub_1000CCC14(v101);
  sub_100027534();
  sub_100093070();
  sub_10008B170();
  swift_bridgeObjectRelease();
  uint64_t v51 = sub_10002E98C();
  sub_10008B1B8(v51, v52);
  uint64_t v53 = sub_10002E98C();
  sub_10008B210(v53, v54);
  uint64_t v55 = sub_10002E98C();
  sub_10008B26C(v55, v56);
  uint64_t v57 = sub_10002E98C();
  sub_10008B2C8(v57, v58);
  uint64_t v59 = sub_10002E98C();
  sub_10008B320(v59, v60);
  uint64_t v61 = sub_10002E98C();
  sub_10008B6AC(v61, v62);
  sub_100013C38(v102, (SEL *)&selRef_clientName);
  PegasusClientName.init(rawValue:)();
  sub_100023D14();
  v63();
  uint64_t v64 = sub_10002E8E0();
  sub_10002538C(v64, v65, v66, v97);
  uint64_t v67 = (void *)v96;
  uint64_t v68 = v96 + *(int *)(v94 + 48);
  sub_100092DC4();
  sub_100092DC4();
  sub_1000184F4(v96, 1, v97);
  if (v73)
  {
    uint64_t v69 = sub_10001D778();
    sub_100019994(v69, v70);
    sub_100019994(v99, &qword_10021C620);
    sub_1000184F4(v68, 1, v97);
    if (v73)
    {
      sub_100019994(v96, &qword_10021C620);
      sub_100093118();
      goto LABEL_18;
    }
  }
  else
  {
    uint64_t v48 = v2;
    sub_100092DC4();
    uint64_t v71 = sub_100092F70();
    sub_1000184F4(v71, v72, v97);
    if (!v73)
    {
      sub_10000E0F4();
      v85();
      sub_100032DB4(&qword_10021C650, (void (*)(uint64_t))&type metadata accessor for PegasusClientName);
      sub_10002A494();
      char v95 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v86 = *(void (**)(uint64_t, uint64_t))(v98 + 8);
      v86(v92, v97);
      sub_100019994(v2, &qword_10021C620);
      sub_100019994(v99, &qword_10021C620);
      v86(v93, v97);
      uint64_t v87 = sub_10009304C();
      sub_100019994(v87, v88);
      uint64_t v67 = v102;
      uint64_t v48 = 0;
      if (v95) {
        goto LABEL_18;
      }
      goto LABEL_17;
    }
    sub_100019994(v2, &qword_10021C620);
    sub_100019994(v99, &qword_10021C620);
    (*(void (**)(uint64_t, uint64_t))(v98 + 8))(v93, v97);
  }
  sub_100019994(v96, &qword_10021C648);
  sub_100093118();
LABEL_17:
  sub_10002EA6C();
  sub_10008B8D0();
  sub_10002EA6C();
  sub_10008B938();
  sub_10002EA6C();
  sub_10008B9A0();
LABEL_18:
  sub_100013C38(v67, (SEL *)&selRef_clientName);
  sub_100027534();
  sub_100093070();
  sub_10008A864();
  swift_bridgeObjectRelease();
  sub_10002EA6C();
  sub_10008BA50();
  uint64_t v74 = sub_10002EA6C();
  sub_10008BAAC(v74, v75);
  uint64_t v76 = sub_10002EA6C();
  sub_10008BB04(v76, v77);
  type metadata accessor for SessionTokens(0);
  sub_10008A600();
  sub_10008BB8C();
  sub_10008BC14();
  sub_100013C38(v67, (SEL *)&selRef_userAgent);
  sub_100027534();
  uint64_t v78 = sub_100093070();
  sub_100089274(v78, v79);
  swift_bridgeObjectRelease();
  uint64_t v80 = sub_10002EA6C();
  sub_10008BCAC(v80, v81, (uint64_t)v67);
  [v101 scale];
  *(float *)&double v82 = v82;
  sub_10008BD74(*(float *)&v82);
  sub_100089204();
  sub_100021764(v91);
  if (v48)
  {
    sub_10000E040();
    v83();
    swift_release();
  }
  else
  {
    [v67 timeoutIntervalForRequest];
    URLRequest.timeoutInterval.setter();
    [v67 assumesHTTP3Capable];
    URLRequest.assumesHTTP3Capable.setter();
    swift_release();
    sub_10000E040();
    v84();
  }
LABEL_7:
  sub_100024A18();
}

void sub_10008C850()
{
  sub_100017EC4();
  uint64_t v64 = v1;
  uint64_t v67 = v5;
  uint64_t v68 = v6;
  uint64_t v71 = v7;
  uint64_t v9 = v8;
  uint64_t v66 = v10;
  uint64_t v69 = v11;
  uint64_t v63 = type metadata accessor for PegasusClientName();
  sub_100020C48();
  uint64_t v70 = v12;
  __chkstk_darwin(v13);
  sub_1000165EC(v14, v57[0]);
  uint64_t v65 = sub_10002572C(&qword_10021C648);
  sub_10001DCF8();
  __chkstk_darwin(v15);
  sub_10001DDC8();
  uint64_t v16 = sub_10002572C(&qword_10021C620);
  uint64_t v17 = sub_100016544(v16);
  __chkstk_darwin(v17);
  sub_10001850C();
  __chkstk_darwin(v18);
  sub_100029F3C();
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)v57 - v20;
  uint64_t v22 = type metadata accessor for URL();
  uint64_t v23 = sub_100016544(v22);
  __chkstk_darwin(v23);
  sub_10001AB2C();
  uint64_t v24 = v9;
  id v25 = [v9 moreResultsURL];
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v26 = sub_100020670();
  if (v2) {
    goto LABEL_18;
  }
  uint64_t v27 = v26;
  uint64_t v60 = v3;
  uint64_t v61 = v21;
  v57[1] = v4;
  uint64_t v58 = v0;
  uint64_t v28 = v63;
  uint64_t v59 = 0;
  uint64_t v62 = v24;
  if (!sub_100118D28(*(void *)(v64 + 144), *(void *)(v64 + 152))) {
    sub_10008A384();
  }
  uint64_t v29 = sub_1000F40EC(v62);
  sub_1000234B4(v29);
  swift_bridgeObjectRelease();
  sub_10001FD00();
  sub_100088C90();
  sub_100013C38(v71, (SEL *)&selRef_clientName);
  sub_100092F7C();
  sub_100023FA0(0, &qword_10021B9B0);
  Dictionary.init(dictionaryLiteral:)();
  sub_1000930E8();
  sub_10001EE6C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  char v30 = v66;
  sub_10001FCB4(v27, *v66, v66[1]);
  sub_10001EE1C(v27, v30[11], v30[12]);
  sub_100028E6C();
  uint64_t v31 = sub_1000283D4();
  sub_10008B210(v31, v32);
  sub_100013C38(v71, (SEL *)&selRef_clientName);
  PegasusClientName.init(rawValue:)();
  uint64_t v33 = v60;
  sub_100023D14();
  v34();
  sub_10002538C(v33, 0, 1, v28);
  uint64_t v35 = v58;
  uint64_t v36 = v58 + *(int *)(v65 + 48);
  sub_100092DC4();
  sub_100093040();
  sub_100092DC4();
  sub_1000184F4(v35, 1, v28);
  if (!v41)
  {
    sub_100092DC4();
    sub_1000184F4(v36, 1, v28);
    if (!v41)
    {
      uint64_t v43 = v70;
      sub_10000E0F4();
      v44();
      sub_100032DB4(&qword_10021C650, (void (*)(uint64_t))&type metadata accessor for PegasusClientName);
      sub_1000930DC();
      LODWORD(v65) = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v45 = v43;
      uint64_t v46 = v35;
      uint64_t v47 = *(void (**)(void))(v45 + 8);
      sub_100025454();
      v47();
      sub_100019994(v60, &qword_10021C620);
      sub_100019994((uint64_t)v61, &qword_10021C620);
      sub_10001D778();
      sub_100025454();
      v47();
      sub_100019994(v46, &qword_10021C620);
      uint64_t v39 = v71;
      uint64_t v40 = v62;
      if (v65) {
        goto LABEL_15;
      }
      goto LABEL_14;
    }
    sub_100019994(v60, &qword_10021C620);
    sub_100019994((uint64_t)v61, &qword_10021C620);
    sub_1000930D0();
    sub_10000E040();
    v42();
    uint64_t v39 = v71;
    uint64_t v40 = v62;
LABEL_12:
    sub_100019994(v35, &qword_10021C648);
LABEL_14:
    sub_1000283D4();
    sub_10008B8D0();
    sub_1000283D4();
    sub_10008B938();
    sub_1000283D4();
    sub_10008B9A0();
    goto LABEL_15;
  }
  sub_100019994(v33, &qword_10021C620);
  uint64_t v37 = sub_1000930DC();
  sub_100019994(v37, v38);
  sub_1000184F4(v36, 1, v28);
  uint64_t v39 = v71;
  uint64_t v40 = v62;
  if (!v41) {
    goto LABEL_12;
  }
  sub_100019994(v35, &qword_10021C620);
LABEL_15:
  sub_100013C38(v39, (SEL *)&selRef_clientName);
  sub_100027534();
  sub_10008A864();
  swift_bridgeObjectRelease();
  sub_1000283D4();
  sub_10008BA50();
  uint64_t v48 = sub_1000283D4();
  sub_10008BAAC(v48, v49);
  uint64_t v50 = sub_1000283D4();
  sub_10008BB04(v50, v51);
  type metadata accessor for SessionTokens(0);
  sub_10008A600();
  sub_10008A90C();
  sub_10008BB8C();
  sub_10008BC14();
  sub_100013C38(v39, (SEL *)&selRef_userAgent);
  sub_100027534();
  sub_100089274(v27, v52);
  swift_bridgeObjectRelease();
  uint64_t v53 = sub_1000283D4();
  sub_10008BCAC(v53, v54, (uint64_t)v39);
  [v40 scale];
  *(float *)&double v55 = v55;
  sub_10008BD74(*(float *)&v55);
  sub_100089204();
  uint64_t v56 = v59;
  sub_100021764(v69);
  if (!v56)
  {
    [v39 timeoutIntervalForRequest];
    URLRequest.timeoutInterval.setter();
    [v39 assumesHTTP3Capable];
    URLRequest.assumesHTTP3Capable.setter();
  }
  swift_release();
LABEL_18:
  sub_100024A18();
}

#error "10008D50C: call analysis failed (funcsize=427)"

void sub_10008D5B8()
{
  sub_100027540();
  if (v0 || (sub_100025238(), !v1))
  {
    if ((sub_10002C24C() & 1) == 0) {
      sub_10002137C();
    }
  }
}

uint64_t sub_10008D600(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result = sub_10008EBA0(a2, a3);
  if (v4)
  {
    sub_1000930A4();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10008D66C()
{
  sub_10008ECF8();
  sub_1000265D4();

  return swift_bridgeObjectRelease();
}

void sub_10008D6C0()
{
  sub_100017EC4();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v27 = v7;
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = sub_100016544(v8);
  __chkstk_darwin(v9);
  sub_10001AB2C();
  id v10 = [v4 cardURL];
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v11 = sub_100020670();
  if (!v0)
  {
    uint64_t v12 = v11;
    uint64_t v13 = sub_1000F40EC(v4);
    sub_1000234B4(v13);
    swift_bridgeObjectRelease();
    sub_10001FD00();
    sub_100088C90();
    uint64_t v14 = type metadata accessor for PegasusContext(0);
    sub_10001F994(v12, *(uint64_t *)((char *)v6 + *(int *)(v14 + 80)), *(uint64_t *)((char *)v6 + *(int *)(v14 + 80) + 8));
    sub_10001FCB4(v12, *v6, v6[1]);
    sub_10001EE1C(v12, v6[11], v6[12]);
    sub_100028E6C();
    uint64_t v15 = sub_100028B14();
    sub_10008B210(v15, v16);
    uint64_t v17 = sub_100028B14();
    sub_10008B6AC(v17, v18);
    sub_100028B14();
    sub_10008B8D0();
    sub_100028B14();
    sub_10008B938();
    sub_100028B14();
    sub_10008B9A0();
    uint64_t v19 = sub_100028B14();
    sub_10008BAAC(v19, v20);
    uint64_t v21 = sub_100028B14();
    sub_10008BB04(v21, v22);
    type metadata accessor for SessionTokens(0);
    sub_10008A600();
    sub_10008A90C();
    sub_10008BB8C();
    sub_10008BC14();
    sub_100013C38(v2, (SEL *)&selRef_userAgent);
    sub_100027534();
    sub_100089274(v12, v23);
    swift_bridgeObjectRelease();
    uint64_t v24 = sub_100028B14();
    sub_10008BCAC(v24, v25, (uint64_t)v2);
    [v4 scale];
    *(float *)&double v26 = v26;
    sub_10008BD74(*(float *)&v26);
    sub_100089204();
    sub_100013C38(v2, (SEL *)&selRef_clientName);
    sub_100027534();
    sub_10008A864();
    swift_bridgeObjectRelease();
    sub_100021764(v27);
    [v2 timeoutIntervalForRequest];
    URLRequest.timeoutInterval.setter();
    [v2 assumesHTTP3Capable];
    URLRequest.assumesHTTP3Capable.setter();
    swift_release();
  }
  sub_100024A18();
}

void sub_10008D968()
{
  sub_100017EC4();
  uint64_t v107 = v1;
  uint64_t v108 = v0;
  uint64_t v102 = v3;
  uint64_t v103 = v2;
  uint64_t v95 = v4;
  uint64_t v6 = v5;
  uint64_t v105 = v7;
  uint64_t v101 = v8;
  type metadata accessor for URLRequest();
  sub_100020C48();
  uint64_t v90 = v10;
  uint64_t v91 = v9;
  __chkstk_darwin(v9);
  sub_10000E04C();
  uint64_t v96 = v11;
  uint64_t v12 = sub_10002572C(&qword_10021BB10);
  uint64_t v13 = sub_100016544(v12);
  __chkstk_darwin(v13);
  sub_100092FA4(v14, v89);
  uint64_t v98 = type metadata accessor for Date();
  sub_100020C48();
  uint64_t v94 = v15;
  __chkstk_darwin(v16);
  uint64_t v93 = (char *)&v89 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000E100();
  __chkstk_darwin(v18);
  sub_100024FFC();
  uint64_t v92 = v19;
  uint64_t v20 = sub_10002572C(&qword_10021BB20);
  uint64_t v21 = sub_100016544(v20);
  __chkstk_darwin(v21);
  sub_10000E04C();
  uint64_t v104 = v22;
  uint64_t v106 = type metadata accessor for URL();
  sub_100020C48();
  uint64_t v100 = v23;
  __chkstk_darwin(v24);
  sub_10000E020(v25, v89);
  __chkstk_darwin(v26);
  sub_100093020();
  __chkstk_darwin(v27);
  sub_100024FFC();
  uint64_t v99 = v28;
  uint64_t v29 = type metadata accessor for PegasusClientName();
  sub_100020C48();
  uint64_t v31 = v30;
  __chkstk_darwin(v32);
  sub_100024F80();
  uint64_t v33 = v6;
  uint64_t v34 = sub_100013C38(v6, (SEL *)&selRef_clientName);
  uint64_t v36 = v35;
  sub_100023D14();
  v37();
  uint64_t v38 = PegasusClientName.rawValue.getter();
  uint64_t v40 = v39;
  (*(void (**)(void *, uint64_t))(v31 + 8))(v0, v29);
  if (v36)
  {
    BOOL v41 = v34 == v38 && v36 == v40;
    if (v41)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_14:
      sub_10008E290();
      goto LABEL_17;
    }
    sub_10009304C();
    char v42 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v43 = v33;
    if (v42) {
      goto LABEL_14;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v43 = v33;
  }
  id v44 = [v43 flightURL];
  if (!v44)
  {
    uint64_t v47 = v104;
    sub_10002947C();
    sub_10002538C(v54, v55, v56, v106);
    goto LABEL_16;
  }
  uint64_t v45 = v44;
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v46 = *(void (**)(void))(v100 + 32);
  uint64_t v47 = v104;
  sub_1000930DC();
  uint64_t v48 = v106;
  sub_100020CA0();
  v46();
  sub_100029FE0(v47);
  sub_1000184F4(v47, 1, v48);
  if (v41)
  {
LABEL_16:
    sub_100019994(v47, &qword_10021BB20);
    sub_100092D78();
    uint64_t v57 = sub_100024A30();
    sub_1000240D4(v57, v58);
    goto LABEL_17;
  }
  sub_100020CA0();
  v46();
  uint64_t v49 = v108;
  sub_10008A384();
  type metadata accessor for ParsecURLRequestBuilder();
  sub_100016608();
  v50();
  uint64_t v51 = v107;
  uint64_t v52 = sub_100020670();
  if (v51)
  {
    sub_1000283AC();
    v53();
LABEL_17:
    sub_100024A18();
    return;
  }
  uint64_t v59 = v49[20];
  uint64_t v107 = v49[21];
  uint64_t v60 = v52;
  uint64_t v61 = v105;
  id v62 = [v105 flightQuery];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v63 = v60;
  sub_100118BF0(v59, v107);
  swift_bridgeObjectRelease();
  id v64 = [v61 date];
  if (!v64)
  {
    uint64_t v67 = v97;
    sub_10002947C();
    sub_10002538C(v73, v74, v75, v76);
    goto LABEL_25;
  }
  uint64_t v65 = v64;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v66 = *(void (**)(void))(v94 + 32);
  uint64_t v67 = v97;
  uint64_t v68 = v98;
  sub_100020CA0();
  v66();
  sub_100029FE0(v67);
  sub_1000184F4(v67, 1, v68);
  if (v41)
  {
LABEL_25:
    sub_100019994(v67, &qword_10021BB10);
    goto LABEL_26;
  }
  sub_100020CA0();
  v66();
  uint64_t v69 = v49[72];
  uint64_t v70 = v49[73];
  Date.timeIntervalSince1970.getter();
  if ((~*(void *)&v71 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_28;
  }
  if (v71 <= -9.22337204e18)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (v71 < 9.22337204e18)
  {
    dispatch thunk of CustomStringConvertible.description.getter();
    sub_100118BF0(v69, v70);
    swift_bridgeObjectRelease();
    sub_10000E040();
    v72();
LABEL_26:
    uint64_t v77 = v105;
    uint64_t v78 = sub_1000F40EC(v105);
    uint64_t v79 = v63;
    sub_1000234B4(v78);
    swift_bridgeObjectRelease();
    sub_10001FD00();
    sub_100088C90();
    sub_100013C38(v43, (SEL *)&selRef_clientName);
    sub_100092F7C();
    sub_100023FA0(0, &qword_10021B9B0);
    Dictionary.init(dictionaryLiteral:)();
    sub_10001EE6C();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v80 = type metadata accessor for PegasusContext(0);
    uint64_t v81 = v103;
    sub_10001F994(v79, *(uint64_t *)((char *)v103 + *(int *)(v80 + 80)), *(uint64_t *)((char *)v103 + *(int *)(v80 + 80) + 8));
    sub_10001FCB4(v79, *v81, v81[1]);
    sub_10001EE1C(v79, v81[11], v81[12]);
    sub_100028E6C();
    sub_1000CCC14(v77);
    sub_100027534();
    sub_10008B170();
    swift_bridgeObjectRelease();
    uint64_t v82 = sub_1000930F4();
    sub_10008B6AC(v82, v83);
    sub_1000930F4();
    sub_10008B8D0();
    sub_1000930F4();
    sub_10008B938();
    sub_1000930F4();
    sub_10008B9A0();
    sub_100013C38(v43, (SEL *)&selRef_clientName);
    sub_100027534();
    sub_10008A864();
    swift_bridgeObjectRelease();
    type metadata accessor for SessionTokens(0);
    sub_10008BB8C();
    sub_10008BC14();
    sub_100013C38(v43, (SEL *)&selRef_userAgent);
    sub_100027534();
    sub_100089274(v79, v84);
    swift_bridgeObjectRelease();
    sub_10008BCAC(v79, (uint64_t)v81, (uint64_t)v43);
    [v77 scale];
    *(float *)&double v85 = v85;
    sub_10008BD74(*(float *)&v85);
    sub_10008A90C();
    sub_10008A600();
    sub_100089204();
    sub_100118E90(v49[110], v49[111], v49[112], v49[113]);
    id v86 = [v77 appBundleId];
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    sub_10002464C();
    swift_bridgeObjectRelease();
    uint64_t v87 = v96;
    sub_100021764(v96);
    [v43 timeoutIntervalForRequest];
    URLRequest.timeoutInterval.setter();
    [v43 assumesHTTP3Capable];
    URLRequest.assumesHTTP3Capable.setter();
    swift_release();
    sub_10000E040();
    v88();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v90 + 32))(v101, v87, v91);
    goto LABEL_17;
  }
LABEL_29:
  __break(1u);
}

void sub_10008E290()
{
  sub_100017EC4();
  id v77 = v3;
  uint64_t v78 = v1;
  uint64_t v80 = (uint64_t *)v0;
  uint64_t v73 = v4;
  uint64_t v74 = v5;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v10 = sub_10002572C(&qword_10021BB10);
  uint64_t v11 = sub_100016544(v10);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v76 = type metadata accessor for Date();
  sub_100020C48();
  uint64_t v72 = v14;
  __chkstk_darwin(v15);
  sub_100093020();
  __chkstk_darwin(v16);
  sub_100024FFC();
  double v71 = v17;
  uint64_t v18 = sub_10002572C(&qword_10021BB20);
  uint64_t v19 = sub_100016544(v18);
  __chkstk_darwin(v19);
  uint64_t v20 = sub_10002AD4C();
  sub_100020C48();
  uint64_t v22 = v21;
  __chkstk_darwin(v23);
  sub_10001850C();
  uint64_t v25 = __chkstk_darwin(v24);
  __chkstk_darwin(v25);
  sub_100024FFC();
  uint64_t v79 = v26;
  uint64_t v75 = v7;
  id v27 = [v7 flightURL];
  if (!v27)
  {
    sub_10002947C();
    sub_10002538C(v41, v42, v43, v20);
    goto LABEL_6;
  }
  uint64_t v28 = v27;
  uint64_t v70 = v9;
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v29 = *(void (**)(void))(v22 + 32);
  sub_100020CA0();
  v29();
  uint64_t v30 = sub_10002E8E0();
  sub_10002538C(v30, v31, v32, v20);
  uint64_t v33 = sub_100092F70();
  sub_1000184F4(v33, v34, v20);
  if (v35)
  {
LABEL_6:
    sub_100019994(v0, &qword_10021BB20);
    sub_100092D78();
    uint64_t v44 = sub_100024A30();
    sub_1000240D4(v44, v45);
    goto LABEL_7;
  }
  sub_1000930E8();
  sub_100020CA0();
  v29();
  uint64_t v36 = v80;
  sub_10008A384();
  type metadata accessor for ParsecURLRequestBuilder();
  sub_100093000();
  sub_100016608();
  v37();
  uint64_t v38 = v78;
  uint64_t v39 = sub_100020670();
  if (v38)
  {
    sub_100016614();
    v40();
LABEL_7:
    sub_100024A18();
    return;
  }
  uint64_t v78 = v36[20];
  uint64_t v46 = v36[21];
  v68[1] = v22;
  uint64_t v69 = v46;
  id v47 = v77;
  uint64_t v48 = v39;
  id v49 = [v77 flightQuery];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  sub_100118BF0(v78, v69);
  swift_bridgeObjectRelease();
  id v50 = [v47 date];
  if (!v50)
  {
    sub_10002947C();
    sub_10002538C(v59, v60, v61, v76);
    goto LABEL_15;
  }
  uint64_t v51 = v50;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v52 = *(void (**)(char *, uint64_t, uint64_t))(v72 + 32);
  uint64_t v53 = v76;
  v52(v13, v2, v76);
  sub_100029FE0((uint64_t)v13);
  sub_1000184F4((uint64_t)v13, 1, v53);
  if (v35)
  {
LABEL_15:
    sub_100019994((uint64_t)v13, &qword_10021BB10);
    uint64_t v57 = v75;
    goto LABEL_16;
  }
  v52(v71, (uint64_t)v13, v53);
  uint64_t v54 = v80[72];
  uint64_t v55 = v80[73];
  Date.timeIntervalSince1970.getter();
  if ((~*(void *)&v56 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v57 = v75;
  if (v56 <= -9.22337204e18)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (v56 < 9.22337204e18)
  {
    dispatch thunk of CustomStringConvertible.description.getter();
    sub_100118BF0(v54, v55);
    swift_bridgeObjectRelease();
    sub_10000E040();
    v58();
LABEL_16:
    id v62 = v80;
    sub_10001FD00();
    sub_100088C90();
    sub_100013C38(v57, (SEL *)&selRef_clientName);
    sub_100092F7C();
    sub_100023FA0(0, &qword_10021B9B0);
    Dictionary.init(dictionaryLiteral:)();
    sub_10001EE6C();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v63 = type metadata accessor for PegasusContext(0);
    id v64 = v73;
    sub_10001F994(v48, *(uint64_t *)((char *)v73 + *(int *)(v63 + 80)), *(uint64_t *)((char *)v73 + *(int *)(v63 + 80) + 8));
    sub_10001FCB4(v48, *v64, v64[1]);
    sub_10001EE1C(v48, v64[11], v64[12]);
    sub_100028E6C();
    sub_10008BC14();
    sub_100013C38(v57, (SEL *)&selRef_userAgent);
    sub_100027534();
    sub_100089274(v48, v65);
    swift_bridgeObjectRelease();
    sub_100089204();
    sub_100118E90(v62[110], v62[111], v62[112], v62[113]);
    id v66 = [v77 appBundleId];
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    sub_10002464C();
    swift_bridgeObjectRelease();
    sub_100021764(v70);
    [v57 timeoutIntervalForRequest];
    URLRequest.timeoutInterval.setter();
    [v57 assumesHTTP3Capable];
    URLRequest.assumesHTTP3Capable.setter();
    swift_release();
    sub_10000E040();
    v67();
    goto LABEL_7;
  }
LABEL_19:
  __break(1u);
}

void sub_10008E920()
{
  sub_100017EC4();
  uint64_t v17 = v2;
  uint64_t v15 = v3;
  uint64_t v4 = type metadata accessor for Requestor();
  sub_100020C48();
  uint64_t v16 = v5;
  __chkstk_darwin(v6);
  sub_100021208();
  type metadata accessor for UserAgent();
  sub_100020C48();
  __chkstk_darwin(v7);
  sub_10001DDC8();
  type metadata accessor for URL();
  sub_100020C48();
  __chkstk_darwin(v8);
  sub_100017DC8();
  type metadata accessor for ParsecURLRequestBuilder();
  uint64_t v9 = sub_10002A494();
  v10(v9);
  sub_100020670();
  if (!v0)
  {
    sub_100088C90();
    (*(void (**)(uint64_t, void, uint64_t))(v16 + 104))(v1, enum case for Requestor.parsecd(_:), v4);
    UserAgent.init(_:requestor:)();
    UserAgent.fullString.getter();
    sub_10000E040();
    v11();
    uint64_t v12 = sub_1000930E8();
    sub_100089274(v12, v13);
    swift_bridgeObjectRelease();
    if (v17) {
      sub_10008EB48();
    }
    sub_100089204();
    sub_100021764(v15);
    uint64_t v14 = type metadata accessor for URLRequest();
    sub_10002538C(v15, 0, 1, v14);
    swift_release();
  }
  sub_100024A18();
}

void sub_10008EB48()
{
  sub_100027540();
  if (v3 || (sub_100025238(), !v4))
  {
    if ((sub_10002C24C() & 1) == 0) {
      sub_100118E90(*(void *)(v1 + 640), *(void *)(v1 + 648), v2, v0);
    }
  }
}

uint64_t sub_10008EBA0(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v2) {
    return 0;
  }
  sub_100021398();
  uint64_t v3 = self;
  NSString v4 = String._bridgeToObjectiveC()();
  id v5 = [v3 dominantLanguageForString:v4];

  if (!v5)
  {
LABEL_11:
    uint64_t v10 = (__CFString *)String._bridgeToObjectiveC()();
    swift_bridgeObjectRetain();
    sub_10001D778();
    CFIndex v11 = String.UTF16View.count.getter();
    swift_bridgeObjectRelease();
    v14.location = 0;
    v14.length = v11;
    uint64_t v12 = (__CFString *)CFStringTokenizerCopyBestStringLanguage(v10, v14);

    if (v12)
    {
      uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();

      return v6;
    }
    return 0;
  }
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;

  BOOL v9 = v6 == 6581877 && v8 == 0xE300000000000000;
  if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  return v6;
}

uint64_t sub_10008ECF8()
{
  return sub_10001D778();
}

uint64_t sub_10008ED64(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a4 + 16);
  if (v4)
  {
    uint64_t v6 = result;
    swift_bridgeObjectRetain();
    while (String.init(cString:)() != v6 || v7 != a2)
    {
      char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v9) {
        goto LABEL_11;
      }
      if (!--v4) {
        return swift_bridgeObjectRelease();
      }
    }
    swift_bridgeObjectRelease();
LABEL_11:
    swift_bridgeObjectRelease();
    uint64_t v26 = &unk_1001FCB50;
    unint64_t v27 = sub_100092C5C();
    sub_10001C1AC(&v25, (uint64_t)v28);
    uint64_t v10 = (void *)PARFeatureFlagOverrideDisable;
    sub_100023FA0(0, &qword_10021B9B0);
    id v11 = v10;
    char v12 = static NSObject.== infix(_:_:)();

    if (v12)
    {
      uint64_t v13 = v29;
      uint64_t v14 = v30;
      sub_10001B620(v28, v29);
      uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 24))(v13, v14);
      if (v16)
      {
        sub_100092158(v15, v16);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      uint64_t v17 = v29;
      uint64_t v18 = v30;
      sub_10001B620(v28, v29);
      uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 32))(v17, v18);
      if (!v20) {
        return sub_10001CA50((uint64_t)v28);
      }
    }
    else
    {
      id v21 = PARFeatureFlagOverrideEnable;
      char v22 = static NSObject.== infix(_:_:)();

      if ((v22 & 1) == 0) {
        return sub_10001CA50((uint64_t)v28);
      }
      uint64_t v23 = v29;
      uint64_t v24 = v30;
      sub_10001B620(v28, v29);
      uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 24))(v23, v24);
      if (!v20) {
        return sub_10001CA50((uint64_t)v28);
      }
    }
    sub_100090154(&v25, v19, v20);
    swift_bridgeObjectRelease();
    return sub_10001CA50((uint64_t)v28);
  }
  return result;
}

uint64_t sub_10008EFB0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v152 = type metadata accessor for Apple_Parsec_Search_LocalCompletionInfo();
  sub_100020C48();
  uint64_t v150 = v5;
  __chkstk_darwin(v6);
  sub_10000E04C();
  uint64_t v149 = v7;
  Apple_Parsec_Search_LocalCompletionInfo.init()();
  uint64_t v167 = _swiftEmptySetSingleton;
  unint64_t v166 = (unint64_t)_swiftEmptyArrayStorage;
  unint64_t v8 = (unint64_t)&selRef_isEqualToString_;
  uint64_t v153 = a1;
  id v9 = [a1 engagedSuggestion];
  if (!v9) {
    goto LABEL_4;
  }
  uint64_t v10 = (uint64_t)v9;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  unint64_t v2 = *(void *)((v166 & 0xFFFFFFFFFFFFFF8) + 0x10);
  int64_t v11 = *(void *)((v166 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v2 < (unint64_t)v11 >> 1) {
    goto LABEL_3;
  }
LABEL_102:
  sub_100093098(v11);
  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
LABEL_3:
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();

LABEL_4:
  id v12 = [v153 *(SEL *)(v8 + 2512)];
  if (v12)
  {
    uint64_t v13 = sub_100092B08(v12);
    if (v13) {
      sub_1000B9D6C(v13, v14, v15, v16, v17, v18, v19, v20, v148, v149);
    }
  }
  uint64_t v21 = sub_100092A98(v153);
  if (v21) {
    sub_1000B9D6C(v21, v22, v23, v24, v25, v26, v27, v28, v148, v149);
  }
  uint64_t v29 = sub_1000CCB98(v153);
  if (v29) {
    sub_1000B9D6C(v29, v30, v31, v32, v33, v34, v35, v36, v148, v149);
  }
  uint64_t v37 = v166;
  if (v166 >> 62) {
    goto LABEL_44;
  }
  uint64_t v10 = *(void *)((v166 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v10)
  {
    while (1)
    {
      if (v10 < 1)
      {
        __break(1u);
LABEL_104:
        swift_once();
        goto LABEL_94;
      }
      uint64_t v38 = 0;
      unint64_t v39 = v37 & 0xC000000000000001;
      uint64_t v40 = _swiftEmptyDictionarySingleton;
      uint64_t v161 = v10;
      uint64_t v163 = v37;
      unint64_t v159 = v37 & 0xC000000000000001;
      while (1)
      {
        if (v39)
        {
          sub_1000930E8();
          id v41 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          id v41 = *(id *)(v37 + 8 * v38 + 32);
        }
        uint64_t v42 = v41;
        uint64_t v43 = sub_100013C38(v41, (SEL *)&selRef_suggestion);
        if (v44) {
          break;
        }

LABEL_40:
        if (v10 == ++v38)
        {
          swift_bridgeObjectRelease();
          id v77 = v167;
          goto LABEL_46;
        }
      }
      unint64_t v8 = v43;
      unint64_t v2 = v44;
      sub_10008FB4C();
      if (!v46) {
        break;
      }
      uint64_t v47 = v45;
      Swift::Int v3 = v46;
      sub_10002572C((uint64_t *)&unk_10021BB00);
      uint64_t v48 = swift_allocObject();
      *(_OWORD *)(v48 + 16) = xmmword_1001A2A20;
      [v42 score];
      uint64_t v50 = v49;
      *(void *)(v48 + 56) = &type metadata for CGFloat;
      *(void *)(v48 + 64) = sub_100092CEC();
      *(void *)(v48 + 3sub_100034730((uint64_t)"SIGTERM", 7, 2) = v50;
      uint64_t v51 = String.init(format:_:)();
      uint64_t v53 = v52;
      swift_bridgeObjectRetain();
      sub_100090154(v165, v8, v2);
      swift_bridgeObjectRelease();
      if (v40[2])
      {
        swift_bridgeObjectRetain();
        unint64_t v54 = sub_1000287F0(v8, v2);
        if (v55)
        {
          uint64_t v56 = *(void *)(v40[7] + 8 * v54);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease_n();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_100029550();
            sub_1000659B4();
            uint64_t v56 = v75;
          }
          unint64_t v8 = *(void *)(v56 + 16);
          unint64_t v57 = *(void *)(v56 + 24);
          unint64_t v2 = v8 + 1;
          if (v8 >= v57 >> 1)
          {
            sub_100023C5C(v57);
            sub_1000659B4();
            uint64_t v56 = v76;
          }
          *(void *)(v56 + 16) = v2;
          uint64_t v58 = (void *)(v56 + 32 * v8);
          v58[4] = v47;
          v58[5] = v3;
          v58[6] = v51;
          v58[7] = v53;
          swift_bridgeObjectRelease();

LABEL_39:
          uint64_t v10 = v161;
          uint64_t v37 = v163;
          unint64_t v39 = v159;
          goto LABEL_40;
        }
        swift_bridgeObjectRelease();
      }
      sub_10002572C(&qword_10021ACB8);
      uint64_t v37 = (uint64_t)v40;
      uint64_t v59 = swift_allocObject();
      *(_OWORD *)(v59 + 16) = xmmword_1001A2A20;
      *(void *)(v59 + 3sub_100034730((uint64_t)"SIGTERM", 7, 2) = v47;
      *(void *)(v59 + 40) = v3;
      *(void *)(v59 + 48) = v51;
      *(void *)(v59 + 56) = v53;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v165[0] = v37;
      unint64_t v61 = sub_1000287F0(v8, v2);
      uint64_t v63 = *(void *)(v37 + 16);
      BOOL v64 = (v62 & 1) == 0;
      Swift::Int v3 = v63 + v64;
      if (!__OFADD__(v63, v64))
      {
        unint64_t v65 = v61;
        char v66 = v62;
        sub_10002572C(&qword_10021C610);
        uint64_t v37 = (uint64_t)v165;
        if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v3))
        {
          uint64_t v37 = v165[0];
          unint64_t v67 = sub_1000287F0(v8, v2);
          if ((v66 & 1) != (v68 & 1))
          {
            uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            __break(1u);
            return result;
          }
          unint64_t v65 = v67;
        }
        uint64_t v69 = (void *)v165[0];
        if (v66)
        {
          uint64_t v70 = *(void *)(v165[0] + 56);
          swift_bridgeObjectRelease();
          *(void *)(v70 + 8 * v65) = v59;
          uint64_t v40 = v69;
        }
        else
        {
          *(void *)(v165[0] + 8 * (v65 >> 6) + 64) |= 1 << v65;
          double v71 = (unint64_t *)(v69[6] + 16 * v65);
          *double v71 = v8;
          v71[1] = v2;
          *(void *)(v69[7] + 8 * v65) = v59;
          uint64_t v72 = v69[2];
          BOOL v73 = __OFADD__(v72, 1);
          uint64_t v74 = v72 + 1;
          if (v73) {
            goto LABEL_43;
          }
          uint64_t v40 = v69;
          v69[2] = v74;
          swift_bridgeObjectRetain();
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_39;
      }
      __break(1u);
LABEL_43:
      __break(1u);
LABEL_44:
      swift_bridgeObjectRetain();
      uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v10) {
        goto LABEL_45;
      }
    }

    swift_bridgeObjectRelease();
    goto LABEL_40;
  }
LABEL_45:
  swift_bridgeObjectRelease();
  uint64_t v40 = _swiftEmptyDictionarySingleton;
  id v77 = _swiftEmptySetSingleton;
LABEL_46:
  if (!v77[2])
  {
    swift_bridgeObjectRelease();
    if (qword_100218B48 != -1) {
      swift_once();
    }
    uint64_t v137 = type metadata accessor for Logger();
    sub_10002A10C(v137, (uint64_t)qword_1002369F0);
    uint64_t v138 = Logger.logObject.getter();
    os_log_type_t v139 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v138, v139))
    {
      *(_WORD *)swift_slowAlloc() = 0;
      sub_100018528((void *)&_mh_execute_header, v140, v141, "No ECC suggestions to add to request");
      sub_100017D40();
    }
    goto LABEL_97;
  }
  uint64_t v154 = v77 + 7;
  sub_1000262B8();
  int64_t v155 = v78;
  swift_bridgeObjectRetain();
  int64_t v79 = 0;
  uint64_t v80 = _swiftEmptyArrayStorage;
  uint64_t v81 = _swiftEmptyArrayStorage;
  uint64_t v156 = v77;
  id v157 = v40;
  if (v3)
  {
LABEL_48:
    sub_100093058();
    goto LABEL_63;
  }
  while (1)
  {
    int64_t v11 = v79 + 1;
    if (__OFADD__(v79, 1))
    {
      __break(1u);
      goto LABEL_101;
    }
    if (v11 >= v155) {
      goto LABEL_99;
    }
    ++v79;
    if (!v154[v11])
    {
      int64_t v79 = v11 + 1;
      if (v11 + 1 >= v155) {
        goto LABEL_99;
      }
      if (!v154[v79])
      {
        int64_t v79 = v11 + 2;
        if (v11 + 2 >= v155) {
          goto LABEL_99;
        }
        if (!v154[v79])
        {
          v11 += 3;
          if (v11 >= v155)
          {
LABEL_99:
            swift_release();
            sub_10011A800();
            swift_bridgeObjectRelease();
            Apple_Parsec_Search_LocalCompletionInfo.completions.setter();
            Apple_Parsec_Search_LocalCompletionInfo.scores.setter();
            Apple_Parsec_Search_LocalCompletionInfo.origins.setter();

            swift_bridgeObjectRelease();
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v150 + 32))(a2, v149, v152);
            uint64_t v146 = 0;
            return sub_10002538C(a2, v146, 1, v152);
          }
          if (v154[v11])
          {
            int64_t v79 = v11;
            goto LABEL_62;
          }
          while (1)
          {
            int64_t v79 = v11 + 1;
            if (__OFADD__(v11, 1)) {
              break;
            }
            if (v79 >= v155) {
              goto LABEL_99;
            }
            ++v11;
            if (v154[v79]) {
              goto LABEL_62;
            }
          }
LABEL_101:
          __break(1u);
          goto LABEL_102;
        }
      }
    }
LABEL_62:
    sub_10002A0B8();
LABEL_63:
    uint64_t v83 = (unint64_t *)(v77[6] + 16 * v82);
    unint64_t v8 = *v83;
    unint64_t v2 = v83[1];
    uint64_t v84 = v40[2];
    swift_bridgeObjectRetain();
    if (!v84) {
      goto LABEL_93;
    }
    swift_bridgeObjectRetain();
    unint64_t v85 = sub_1000287F0(v8, v2);
    if ((v86 & 1) == 0) {
      break;
    }
    Swift::Int v158 = v3;
    int64_t v160 = v79;
    uint64_t v162 = (uint64_t)v80;
    uint64_t v164 = (uint64_t)v81;
    uint64_t v87 = *(void *)(v40[7] + 8 * v85);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease_n();
    uint64_t v88 = *(void *)(v87 + 16);
    if (v88)
    {
      uint64_t v89 = (uint64_t *)(v87 + 56);
      uint64_t v90 = _swiftEmptyArrayStorage;
      uint64_t v91 = _swiftEmptyArrayStorage;
      do
      {
        uint64_t v93 = *(v89 - 3);
        uint64_t v92 = *(v89 - 2);
        uint64_t v95 = *(v89 - 1);
        uint64_t v94 = *v89;
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_100092FDC();
          uint64_t v91 = v102;
        }
        unint64_t v97 = v91[2];
        unint64_t v96 = v91[3];
        if (v97 >= v96 >> 1)
        {
          char v103 = sub_100093098(v96);
          sub_10002114C(v103, v97 + 1, 1, (uint64_t)v91);
          uint64_t v91 = v104;
        }
        v91[2] = v97 + 1;
        uint64_t v98 = &v91[2 * v97];
        v98[4] = v95;
        v98[5] = v94;
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          char v105 = sub_100029550();
          sub_10002114C(v105, v106, v107, (uint64_t)v90);
          uint64_t v90 = v108;
        }
        unint64_t v100 = v90[2];
        unint64_t v99 = v90[3];
        if (v100 >= v99 >> 1)
        {
          char v109 = sub_100093098(v99);
          sub_10002114C(v109, v100 + 1, 1, (uint64_t)v90);
          uint64_t v90 = v110;
        }
        v89 += 4;
        v90[2] = v100 + 1;
        uint64_t v101 = &v90[2 * v100];
        v101[4] = v93;
        v101[5] = v92;
        --v88;
      }
      while (v88);
    }
    else
    {
      uint64_t v90 = _swiftEmptyArrayStorage;
      uint64_t v91 = _swiftEmptyArrayStorage;
    }
    swift_bridgeObjectRelease();
    v165[0] = (uint64_t)v90;
    sub_10002572C(&qword_100219B08);
    sub_100092CA8(qword_100219B10, &qword_100219B08);
    uint64_t v111 = sub_100093154();
    uint64_t v113 = v112;
    swift_bridgeObjectRelease();
    v165[0] = (uint64_t)v91;
    uint64_t v114 = sub_100093154();
    unint64_t v8 = v115;
    swift_bridgeObjectRelease();
    uint64_t v80 = (void *)v162;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      char v121 = sub_100029550();
      sub_10002114C(v121, v122, v123, v162);
      uint64_t v80 = v124;
    }
    id v77 = v156;
    Swift::Int v3 = v158;
    unint64_t v117 = v80[2];
    unint64_t v116 = v80[3];
    if (v117 >= v116 >> 1)
    {
      char v125 = sub_100023C5C(v116);
      sub_10002114C(v125, v126, v127, (uint64_t)v80);
      uint64_t v80 = v128;
    }
    int64_t v79 = v160;
    v80[2] = v117 + 1;
    int v118 = &v80[2 * v117];
    v118[4] = v111;
    v118[5] = v113;
    uint64_t v81 = (void *)v164;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      char v129 = sub_100029550();
      sub_10002114C(v129, v130, v131, v164);
      uint64_t v81 = v132;
    }
    uint64_t v40 = v157;
    uint64_t v10 = v81[2];
    unint64_t v119 = v81[3];
    unint64_t v2 = v10 + 1;
    if (v10 >= v119 >> 1)
    {
      char v133 = sub_100023C5C(v119);
      sub_10002114C(v133, v134, v135, (uint64_t)v81);
      uint64_t v81 = v136;
    }
    v81[2] = v2;
    uint64_t v120 = &v81[2 * v10];
    v120[4] = v114;
    v120[5] = v8;
    if (v158) {
      goto LABEL_48;
    }
  }
  swift_bridgeObjectRelease();
LABEL_93:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (qword_100218B48 != -1) {
    goto LABEL_104;
  }
LABEL_94:
  uint64_t v142 = type metadata accessor for Logger();
  sub_10002A10C(v142, (uint64_t)qword_1002369F0);
  swift_bridgeObjectRetain();
  uint64_t v138 = Logger.logObject.getter();
  os_log_type_t v143 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v138, v143))
  {
    id v144 = (uint8_t *)swift_slowAlloc();
    v165[0] = swift_slowAlloc();
    *(_DWORD *)id v144 = 136315138;
    swift_bridgeObjectRetain();
    v165[2] = sub_10001C274(v8, v2, v165);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v138, v143, "Can't add ECC suggestion to request, no suggestions for: %s", v144, 0xCu);
    swift_arrayDestroy();
    sub_100017D40();
    sub_100017D40();
    swift_release();
  }
  else
  {
    swift_release();
    swift_bridgeObjectRelease_n();
  }
LABEL_97:

  sub_10000E040();
  v145();
  swift_bridgeObjectRelease();
  uint64_t v146 = 1;
  return sub_10002538C(a2, v146, 1, v152);
}

void sub_10008FB4C()
{
  sub_10000DFE0();
  unint64_t v2 = v1;
  uint64_t v3 = type metadata accessor for Logger();
  sub_100020C48();
  __chkstk_darwin(v4);
  sub_100024F80();
  if ([v2 type] == 5)
  {
    sub_100013C38(v2, (SEL *)&selRef_topicIdentifier);
    id v0 = v5;
    swift_bridgeObjectRelease();
    if (!v0)
    {
      if (qword_100218B48 != -1) {
        swift_once();
      }
      sub_10002A10C(v3, (uint64_t)qword_1002369F0);
      sub_100016608();
      v6();
      id v0 = v2;
      uint64_t v7 = Logger.logObject.getter();
      os_log_type_t v8 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v7, v8))
      {
        os_log_type_t v21 = v8;
        uint64_t v9 = swift_slowAlloc();
        uint64_t v22 = swift_slowAlloc();
        *(_DWORD *)uint64_t v9 = 136315650;
        uint64_t v10 = sub_100013C38(v0, (SEL *)&selRef_suggestion);
        if (!v11)
        {
LABEL_18:

          __break(1u);
          JUMPOUT(0x10008FF60);
        }
        sub_10001C274(v10, v11, &v22);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v9 + 1sub_100034730((uint64_t)"SIGTERM", 7, 2) = 1024;
        [v0 type];

        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v9 + 18) = 2080;
        uint64_t v12 = sub_100013C38(v0, (SEL *)&selRef_topicIdentifier);
        if (v13)
        {
          unint64_t v14 = v13;
        }
        else
        {
          uint64_t v12 = 7104878;
          unint64_t v14 = 0xE300000000000000;
        }
        sub_10001C274(v12, v14, &v22);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v7, v21, "Can't extract ECC suggestion and source for %s, invalid type (%d) or topic (%s)", (uint8_t *)v9, 0x1Cu);
        swift_arrayDestroy();
        sub_100017D40();
        sub_100017D40();
      }
      else
      {
      }
      sub_10001D778();
      sub_100016614();
      v20();
      goto LABEL_16;
    }
  }
  switch([v2 type])
  {
    case 5u:
      sub_10002572C((uint64_t *)&unk_10021BB00);
      uint64_t v15 = swift_allocObject();
      *(_OWORD *)(v15 + 16) = xmmword_1001A2A20;
      uint64_t v16 = sub_100013C38(v2, (SEL *)&selRef_topicIdentifier);
      if (!v17)
      {
        __break(1u);
        goto LABEL_18;
      }
      uint64_t v18 = v16;
      uint64_t v19 = v17;
      *(void *)(v15 + 56) = &type metadata for String;
      *(void *)(v15 + 64) = sub_1000303C8();
      *(void *)(v15 + 3sub_100034730((uint64_t)"SIGTERM", 7, 2) = v18;
      *(void *)(v15 + 40) = v19;
      String.init(format:_:)();
LABEL_16:
      sub_10000DFB8();
      return;
    default:
      goto LABEL_16;
  }
}

uint64_t sub_10008FF84(uint64_t result, uint64_t a2, void *a3)
{
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    for (; a2; --a2)
      *a3++ = result;
  }
  return result;
}

void sub_10008FFA0()
{
  sub_10000DFE0();
  sub_10002F018();
  type metadata accessor for Trialpb_TrialExperiment();
  sub_100020C48();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  sub_100029224();
  sub_100032DB4(&qword_10021C5F0, (void (*)(uint64_t))&type metadata accessor for Trialpb_TrialExperiment);
  swift_bridgeObjectRetain();
  sub_10002E704();
  sub_10002ED28();
  if (v8)
  {
    sub_10002608C(v7);
    while (1)
    {
      uint64_t v9 = sub_100028430();
      ((void (*)(uint64_t))v1)(v9);
      sub_100032DB4(&qword_10021C5F8, (void (*)(uint64_t))&type metadata accessor for Trialpb_TrialExperiment);
      uint64_t v1 = sub_100092FC0();
      uint64_t v10 = *v2;
      sub_100025454();
      v10();
      if (v1) {
        break;
      }
      sub_100025428();
      if ((v11 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = v19;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    sub_100025454();
    v10();
    uint64_t v18 = sub_100028324();
    v0(v18);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v1 = *(void *)(v5 + 16);
LABEL_7:
    swift_isUniquelyReferenced_nonNull_native();
    uint64_t v12 = sub_10002E64C();
    ((void (*)(uint64_t))v1)(v12);
    uint64_t v13 = sub_10002977C();
    sub_100090DB4(v13, v14, v15);
    *uint64_t v3 = v20;
    swift_bridgeObjectRelease();
    uint64_t v16 = sub_10002E784();
    v17(v16);
  }
  sub_10000DFB8();
}

uint64_t sub_100090154(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  sub_10009312C();
  if (v11)
  {
    uint64_t v12 = *(void *)(v7 + 48);
    uint64_t v13 = (void *)(v12 + 16 * v10);
    BOOL v14 = *v13 == a2 && v13[1] == a3;
    if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      char v15 = (void *)(*(void *)(*v3 + 48) + 16 * v10);
      uint64_t v16 = v15[1];
      *a1 = *v15;
      a1[1] = v16;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v18 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v18;
      sub_10009312C();
      if ((v19 & 1) == 0) {
        break;
      }
      uint64_t v20 = (void *)(v12 + 16 * v10);
      BOOL v21 = *v20 == a2 && v20[1] == a3;
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v25 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  Swift::Int v23 = sub_10002A494();
  sub_100091070(v23, v24, v10, isUniquelyReferenced_nonNull_native);
  *uint64_t v3 = v25;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_1000902E8()
{
  uint64_t v1 = v0;
  uint64_t v42 = type metadata accessor for Trialpb_TrialExperiment();
  uint64_t v2 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  id v41 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *v0;
  sub_10002572C(&qword_10021C600);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v8 = *(void *)(v4 + 56);
    uint64_t v37 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & v8;
    uint64_t v35 = v0;
    int64_t v36 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v39 = v2;
    uint64_t v11 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    uint64_t v38 = v6;
    BOOL v14 = v41;
    uint64_t v15 = v42;
    if (!v10) {
      goto LABEL_7;
    }
LABEL_6:
    unint64_t v16 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    int64_t v40 = v13;
    for (unint64_t i = v16 | (v13 << 6); ; unint64_t i = __clz(__rbit64(v19)) + (v20 << 6))
    {
      uint64_t v22 = v4;
      uint64_t v23 = *(void *)(v4 + 48);
      uint64_t v24 = *(void *)(v39 + 72);
      uint64_t v25 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 32);
      v25(v14, v23 + v24 * i, v15);
      uint64_t v6 = v38;
      sub_100032DB4(&qword_10021C5F0, (void (*)(uint64_t))&type metadata accessor for Trialpb_TrialExperiment);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v26 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v27 = result & ~v26;
      unint64_t v28 = v27 >> 6;
      if (((-1 << v27) & ~*(void *)(v11 + 8 * (v27 >> 6))) == 0)
      {
        char v30 = 0;
        unint64_t v31 = (unint64_t)(63 - v26) >> 6;
        while (++v28 != v31 || (v30 & 1) == 0)
        {
          BOOL v32 = v28 == v31;
          if (v28 == v31) {
            unint64_t v28 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v11 + 8 * v28);
          if (v33 != -1)
          {
            unint64_t v29 = __clz(__rbit64(~v33)) + (v28 << 6);
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        return result;
      }
      unint64_t v29 = __clz(__rbit64((-1 << v27) & ~*(void *)(v11 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
      *(void *)(v11 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v29;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v25)(*(void *)(v6 + 48) + v29 * v24, v41, v42);
      ++*(void *)(v6 + 16);
      uint64_t v4 = v22;
      int64_t v13 = v40;
      if (v10) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v18 = v13 + 1;
      if (__OFADD__(v13, 1)) {
        goto LABEL_38;
      }
      if (v18 >= v36) {
        goto LABEL_32;
      }
      unint64_t v19 = v37[v18];
      int64_t v20 = v13 + 1;
      if (!v19)
      {
        int64_t v20 = v13 + 2;
        if (v13 + 2 >= v36) {
          goto LABEL_32;
        }
        unint64_t v19 = v37[v20];
        if (!v19)
        {
          int64_t v20 = v13 + 3;
          if (v13 + 3 >= v36) {
            goto LABEL_32;
          }
          unint64_t v19 = v37[v20];
          if (!v19)
          {
            uint64_t v21 = v13 + 4;
            if (v13 + 4 >= v36)
            {
LABEL_32:
              swift_release();
              uint64_t v1 = v35;
              uint64_t v34 = 1 << *(unsigned char *)(v4 + 32);
              if (v34 > 63) {
                sub_10008FF84(0, (unint64_t)(v34 + 63) >> 6, v37);
              }
              else {
                *uint64_t v37 = -1 << v34;
              }
              *(void *)(v4 + 16) = 0;
              break;
            }
            unint64_t v19 = v37[v21];
            if (!v19)
            {
              while (1)
              {
                int64_t v20 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_39;
                }
                if (v20 >= v36) {
                  goto LABEL_32;
                }
                unint64_t v19 = v37[v20];
                ++v21;
                if (v19) {
                  goto LABEL_20;
                }
              }
            }
            int64_t v20 = v13 + 4;
          }
        }
      }
LABEL_20:
      unint64_t v10 = (v19 - 1) & v19;
      int64_t v40 = v20;
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v6;
  return result;
}

uint64_t sub_1000906E0()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_10002572C(&qword_10021C5D0);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    char v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    if (!v7) {
      goto LABEL_7;
    }
LABEL_6:
    unint64_t v12 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    for (unint64_t i = v12 | (v11 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v11 << 6))
    {
      uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * i);
      uint64_t v18 = *v17;
      uint64_t v19 = v17[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v21 = result & ~v20;
      unint64_t v22 = v21 >> 6;
      if (((-1 << v21) & ~*(void *)(v9 + 8 * (v21 >> 6))) == 0)
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v20) >> 6;
        while (++v22 != v25 || (v24 & 1) == 0)
        {
          BOOL v26 = v22 == v25;
          if (v22 == v25) {
            unint64_t v22 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v9 + 8 * v22);
          if (v27 != -1)
          {
            unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        return result;
      }
      unint64_t v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v9 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
      *(void *)(v9 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
      unint64_t v28 = (void *)(*(void *)(v4 + 48) + 16 * v23);
      *unint64_t v28 = v18;
      v28[1] = v19;
      ++*(void *)(v4 + 16);
      if (v7) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v14 = v11 + 1;
      if (__OFADD__(v11, 1)) {
        goto LABEL_38;
      }
      if (v14 >= v8) {
        goto LABEL_32;
      }
      unint64_t v15 = v30[v14];
      ++v11;
      if (!v15)
      {
        int64_t v11 = v14 + 1;
        if (v14 + 1 >= v8) {
          goto LABEL_32;
        }
        unint64_t v15 = v30[v11];
        if (!v15)
        {
          int64_t v11 = v14 + 2;
          if (v14 + 2 >= v8) {
            goto LABEL_32;
          }
          unint64_t v15 = v30[v11];
          if (!v15)
          {
            int64_t v16 = v14 + 3;
            if (v16 >= v8)
            {
LABEL_32:
              swift_release();
              uint64_t v1 = v0;
              uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
              if (v29 > 63) {
                sub_10008FF84(0, (unint64_t)(v29 + 63) >> 6, v30);
              }
              else {
                *char v30 = -1 << v29;
              }
              *(void *)(v2 + 16) = 0;
              break;
            }
            unint64_t v15 = v30[v16];
            if (!v15)
            {
              while (1)
              {
                int64_t v11 = v16 + 1;
                if (__OFADD__(v16, 1)) {
                  goto LABEL_39;
                }
                if (v11 >= v8) {
                  goto LABEL_32;
                }
                unint64_t v15 = v30[v11];
                ++v16;
                if (v15) {
                  goto LABEL_20;
                }
              }
            }
            int64_t v11 = v16;
          }
        }
      }
LABEL_20:
      unint64_t v7 = (v15 - 1) & v15;
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

uint64_t sub_1000909BC()
{
  uint64_t v1 = v0;
  uint64_t v42 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  id v41 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *v0;
  sub_10002572C(&qword_10021C5E8);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v8 = *(void *)(v4 + 56);
    uint64_t v37 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & v8;
    uint64_t v35 = v0;
    int64_t v36 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v39 = v2;
    uint64_t v11 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    uint64_t v38 = v6;
    int64_t v14 = v41;
    uint64_t v15 = v42;
    if (!v10) {
      goto LABEL_7;
    }
LABEL_6:
    unint64_t v16 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    int64_t v40 = v13;
    for (unint64_t i = v16 | (v13 << 6); ; unint64_t i = __clz(__rbit64(v19)) + (v20 << 6))
    {
      uint64_t v22 = v4;
      uint64_t v23 = *(void *)(v4 + 48);
      uint64_t v24 = *(void *)(v39 + 72);
      unint64_t v25 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 32);
      v25(v14, v23 + v24 * i, v15);
      uint64_t v6 = v38;
      sub_100032DB4(&qword_1002197C0, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v26 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v27 = result & ~v26;
      unint64_t v28 = v27 >> 6;
      if (((-1 << v27) & ~*(void *)(v11 + 8 * (v27 >> 6))) == 0)
      {
        char v30 = 0;
        unint64_t v31 = (unint64_t)(63 - v26) >> 6;
        while (++v28 != v31 || (v30 & 1) == 0)
        {
          BOOL v32 = v28 == v31;
          if (v28 == v31) {
            unint64_t v28 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v11 + 8 * v28);
          if (v33 != -1)
          {
            unint64_t v29 = __clz(__rbit64(~v33)) + (v28 << 6);
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        return result;
      }
      unint64_t v29 = __clz(__rbit64((-1 << v27) & ~*(void *)(v11 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
      *(void *)(v11 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v29;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v25)(*(void *)(v6 + 48) + v29 * v24, v41, v42);
      ++*(void *)(v6 + 16);
      uint64_t v4 = v22;
      int64_t v13 = v40;
      if (v10) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v18 = v13 + 1;
      if (__OFADD__(v13, 1)) {
        goto LABEL_38;
      }
      if (v18 >= v36) {
        goto LABEL_32;
      }
      unint64_t v19 = v37[v18];
      int64_t v20 = v13 + 1;
      if (!v19)
      {
        int64_t v20 = v13 + 2;
        if (v13 + 2 >= v36) {
          goto LABEL_32;
        }
        unint64_t v19 = v37[v20];
        if (!v19)
        {
          int64_t v20 = v13 + 3;
          if (v13 + 3 >= v36) {
            goto LABEL_32;
          }
          unint64_t v19 = v37[v20];
          if (!v19)
          {
            uint64_t v21 = v13 + 4;
            if (v13 + 4 >= v36)
            {
LABEL_32:
              swift_release();
              uint64_t v1 = v35;
              uint64_t v34 = 1 << *(unsigned char *)(v4 + 32);
              if (v34 > 63) {
                sub_10008FF84(0, (unint64_t)(v34 + 63) >> 6, v37);
              }
              else {
                *uint64_t v37 = -1 << v34;
              }
              *(void *)(v4 + 16) = 0;
              break;
            }
            unint64_t v19 = v37[v21];
            if (!v19)
            {
              while (1)
              {
                int64_t v20 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_39;
                }
                if (v20 >= v36) {
                  goto LABEL_32;
                }
                unint64_t v19 = v37[v20];
                ++v21;
                if (v19) {
                  goto LABEL_20;
                }
              }
            }
            int64_t v20 = v13 + 4;
          }
        }
      }
LABEL_20:
      unint64_t v10 = (v19 - 1) & v19;
      int64_t v40 = v20;
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v6;
  return result;
}

uint64_t sub_100090DB4(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v31 = a1;
  uint64_t v6 = type metadata accessor for Trialpb_TrialExperiment();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = *(void *)(*v3 + 16);
  unint64_t v11 = *(void *)(*v3 + 24);
  unint64_t v28 = v3;
  uint64_t v29 = v7;
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_1000902E8();
  }
  else
  {
    if (v11 > v10)
    {
      sub_1000913C0();
      goto LABEL_12;
    }
    sub_10009163C();
  }
  uint64_t v12 = *v3;
  sub_100032DB4(&qword_10021C5F0, (void (*)(uint64_t))&type metadata accessor for Trialpb_TrialExperiment);
  uint64_t v13 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v14 = -1 << *(unsigned char *)(v12 + 32);
  a2 = v13 & ~v14;
  uint64_t v30 = v12;
  uint64_t v15 = v12 + 56;
  if ((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v16 = ~v14;
    unint64_t v19 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v18 = v7 + 16;
    uint64_t v17 = v19;
    uint64_t v20 = *(void *)(v18 + 56);
    do
    {
      v17(v9, *(void *)(v30 + 48) + v20 * a2, v6);
      sub_100032DB4(&qword_10021C5F8, (void (*)(uint64_t))&type metadata accessor for Trialpb_TrialExperiment);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v18 - 8))(v9, v6);
      if (v21) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v16;
    }
    while (((*(void *)(v15 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v22 = v29;
  uint64_t v23 = *v28;
  *(void *)(v23 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v22 + 32))(*(void *)(v23 + 48) + *(void *)(v22 + 72) * a2, v31, v6);
  uint64_t v25 = *(void *)(v23 + 16);
  BOOL v26 = __OFADD__(v25, 1);
  uint64_t v27 = v25 + 1;
  if (!v26)
  {
    *(void *)(v23 + 16) = v27;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

Swift::Int sub_100091070(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  Swift::Int v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    sub_1000906E0();
  }
  else
  {
    if (v10 > v9)
    {
      uint64_t result = (Swift::Int)sub_10009120C();
      goto LABEL_22;
    }
    sub_1000919E8();
  }
  uint64_t v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  uint64_t result = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    uint64_t v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        uint64_t v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  char v21 = (Swift::Int *)(*(void *)(v20 + 48) + 16 * a3);
  *char v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}