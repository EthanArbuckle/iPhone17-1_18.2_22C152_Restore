uint64_t sub_10012297C()
{
  uint64_t Strong;
  uint64_t v1;

  sub_10002C45C();
  Strong = swift_weakLoadStrong();
  if (!Strong)
  {
    sub_1001229F8();
    swift_allocError();
    sub_100026C04(v1, 0xD000000000000013);
  }
  return Strong;
}

unint64_t sub_1001229F8()
{
  unint64_t result = qword_100220A70;
  if (!qword_100220A70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100220A70);
  }
  return result;
}

uint64_t static SQLiteViewProvider.name.getter()
{
  return String.init<A>(describing:)();
}

uint64_t SQLiteViewProvider.name.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t SQLiteViewProvider.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a2, a3);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t Array<A>.reloadAll(with:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v17 = result;
  uint64_t v5 = *(void *)(a3 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain();
    for (i = (uint64_t *)(a3 + 40); ; i += 2)
    {
      uint64_t v8 = *i;
      uint64_t ObjectType = swift_getObjectType();
      v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 48);
      swift_unknownObjectRetain();
      uint64_t v19 = ObjectType;
      v10(v17, a2, ObjectType, v8);
      if (v4)
      {
        uint64_t v22 = v4;
        swift_errorRetain();
        sub_10002572C(&qword_10021B3C0);
        if (!swift_dynamicCast() || v21)
        {
          swift_bridgeObjectRelease();
          swift_errorRelease();
          swift_willThrow();
          return swift_unknownObjectRelease();
        }
        swift_errorRelease();
        if (qword_100220860 != -1) {
          swift_once();
        }
        uint64_t v11 = type metadata accessor for Logger();
        sub_10002A10C(v11, (uint64_t)qword_100236CC8);
        swift_unknownObjectRetain_n();
        v12 = Logger.logObject.getter();
        os_log_type_t v13 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v12, v13))
        {
          uint64_t v14 = swift_slowAlloc();
          uint64_t v20 = swift_slowAlloc();
          *(_DWORD *)uint64_t v14 = 136315138;
          uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 16))(v19, v8);
          *(void *)(v14 + 4) = sub_10001C274(v15, v16, &v20);
          swift_unknownObjectRelease_n();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v12, v13, "Schema file does not meet \"%s\" view provider requirements", (uint8_t *)v14, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
          swift_unknownObjectRelease();
        }
        else
        {

          swift_unknownObjectRelease_n();
        }
        swift_errorRelease();
        uint64_t v4 = 0;
      }
      else
      {
        swift_unknownObjectRelease();
      }
      if (!--v5) {
        return swift_bridgeObjectRelease();
      }
    }
  }
  return result;
}

uint64_t Array<A>.teardownAll()(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (v1)
  {
    v2 = (uint64_t *)(swift_bridgeObjectRetain() + 40);
    do
    {
      uint64_t v3 = *v2;
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v3 + 40);
      swift_unknownObjectRetain();
      v5(ObjectType, v3);
      swift_unknownObjectRelease();
      v2 += 2;
      --v1;
    }
    while (v1);
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_100122E9C()
{
  unint64_t result = qword_100220A78;
  if (!qword_100220A78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100220A78);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for SQLiteViewProviderError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100122FB4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SQLiteViewProviderError()
{
  return &type metadata for SQLiteViewProviderError;
}

uint64_t EnumValue.type.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10001C20C(v1, a1);
}

uint64_t EnumValue.init(intValue:type:)@<X0>(unsigned int a1@<W0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 40) = a1;
  *(void *)(a3 + 48) = 0;
  *(unsigned char *)(a3 + 56) = 1;
  return sub_10001C1AC(a2, a3);
}

uint64_t EnumValue.init(stringValue:type:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)(a4 + 40) = a1;
  *(void *)(a4 + 48) = a2;
  *(unsigned char *)(a4 + 56) = 0;
  return sub_10001C1AC(a3, a4);
}

Swift::Int32 __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> EnumValue.asInteger()()
{
  uint64_t v1 = *(void *)(v0 + 40);
  if (*(unsigned char *)(v0 + 56))
  {
    return *(void *)(v0 + 40);
  }
  else
  {
    uint64_t v2 = *(void *)(v0 + 48);
    uint64_t v3 = *(void *)(v0 + 32);
    sub_10001B620((void *)v0, *(void *)(v0 + 24));
    unsigned int v4 = *(uint64_t (**)(void))(v3 + 24);
    swift_bridgeObjectRetain();
    sub_100025C90();
    LODWORD(v0) = v4();
    sub_1001230F4(v1, v2, 0);
  }
  return v0;
}

uint64_t sub_1001230F4(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) == 0) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

Swift::String __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> EnumValue.asString()()
{
  uint64_t v2 = v0;
  uint64_t v3 = *(void *)(v0 + 40);
  if (*(unsigned char *)(v2 + 56))
  {
    uint64_t v4 = *(void *)(v2 + 24);
    uint64_t v5 = *(void *)(v2 + 32);
    sub_10001B620((void *)v2, v4);
    uint64_t v6 = sub_100026C2C();
    uint64_t v8 = v7(v6, v4, v5);
    if (!v1)
    {
      uint64_t v3 = v8;
      uint64_t v4 = v9;
    }
  }
  else
  {
    uint64_t v4 = *(void *)(v2 + 48);
    swift_bridgeObjectRetain();
  }
  uint64_t v10 = v3;
  uint64_t v11 = (void *)v4;
  result._object = v11;
  result._countAndFlagsBits = v10;
  return result;
}

uint64_t static EnumValue.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 24);
  sub_10001B620((void *)a1, v4);
  sub_100025C7C();
  uint64_t v6 = v5(v4);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(a2 + 24);
  sub_10001B620((void *)a2, v9);
  sub_100025C7C();
  if (v6 == v10(v9) && v8 == v11)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = 0;
    if ((v13 & 1) == 0) {
      return result;
    }
  }
  uint64_t v15 = *(void *)(a1 + 40);
  uint64_t v16 = *(void *)(a2 + 40);
  uint64_t v17 = *(void *)(a2 + 48);
  char v18 = *(unsigned char *)(a2 + 56);
  if (*(unsigned char *)(a1 + 56))
  {
    if (*(unsigned char *)(a2 + 56))
    {
      return v15 == v16;
    }
    else
    {
      uint64_t v23 = *(void *)(a2 + 24);
      uint64_t v24 = *(void *)(a2 + 32);
      sub_10001B620((void *)a2, v23);
      v25 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 24);
      swift_bridgeObjectRetain();
      int v26 = v25(v16, v17, v23, v24);
      sub_1001230F4(v16, v17, 0);
      return v26 == v15;
    }
  }
  uint64_t v20 = *(void *)(a1 + 48);
  if (v18)
  {
    uint64_t v21 = *(void *)(a1 + 32);
    sub_10001B620((void *)a1, *(void *)(a1 + 24));
    uint64_t v22 = *(uint64_t (**)(void))(v21 + 24);
    swift_bridgeObjectRetain();
    sub_100025C90();
    int v28 = v22();
    sub_1001230F4(v15, v20, 0);
    return v28 == v16;
  }
  if (v15 == v16 && v20 == v17) {
    return 1;
  }

  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t EnumValue.encode(to:)(void *a1)
{
  sub_10001B620(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  if ((*(unsigned char *)(v1 + 56) & 1) == 0)
  {
    swift_bridgeObjectRetain();
LABEL_5:
    sub_10002E598((uint64_t)v8, v9);
    dispatch thunk of SingleValueEncodingContainer.encode(_:)();
    swift_bridgeObjectRelease();
    return sub_10001CA50((uint64_t)v8);
  }
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t v4 = *(void *)(v1 + 32);
  sub_10001B620((void *)v1, v3);
  uint64_t v5 = sub_100026C2C();
  v6(v5, v3, v4);
  if (!v2) {
    goto LABEL_5;
  }
  return sub_10001CA50((uint64_t)v8);
}

uint64_t sub_1001234E8(void *a1)
{
  return EnumValue.encode(to:)(a1);
}

uint64_t sub_100123500(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) == 0) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for EnumValue(uint64_t a1)
{
  sub_10001CA50(a1);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 48);
  char v4 = *(unsigned char *)(a1 + 56);

  return sub_1001230F4(v2, v3, v4);
}

uint64_t initializeWithCopy for EnumValue(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  uint64_t v5 = *(void *)(v2 + 40);
  uint64_t v6 = *(void *)(v2 + 48);
  LOBYTE(v2) = *(unsigned char *)(v2 + 56);
  sub_100123500(v5, v6, v2);
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 48) = v6;
  *(unsigned char *)(a1 + 56) = v2;
  return a1;
}

uint64_t assignWithCopy for EnumValue(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = a2;
  sub_100123630((uint64_t *)a1, a2);
  uint64_t v4 = v2[5];
  uint64_t v5 = v2[6];
  LOBYTE(v2) = *((unsigned char *)v2 + 56);
  sub_100123500(v4, v5, (char)v2);
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = *(void *)(a1 + 48);
  char v8 = *(unsigned char *)(a1 + 56);
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 48) = v5;
  *(unsigned char *)(a1 + 56) = (_BYTE)v2;
  sub_1001230F4(v6, v7, v8);
  return a1;
}

uint64_t *sub_100123630(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        uint64_t result = (uint64_t *)swift_release();
        *uint64_t v3 = v12;
      }
      else
      {
        uint64_t v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *uint64_t result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          *uint64_t v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

__n128 initializeWithTake for EnumValue(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for EnumValue(uint64_t a1, uint64_t a2)
{
  sub_10001CA50(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  char v5 = *(unsigned char *)(a2 + 56);
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = *(void *)(a1 + 48);
  char v8 = *(unsigned char *)(a1 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = v5;
  sub_1001230F4(v6, v7, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for EnumValue(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 57))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for EnumValue(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 56) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 57) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 57) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EnumValue()
{
  return &type metadata for EnumValue;
}

uint64_t destroy for EnumValue.Container(uint64_t a1)
{
  return sub_1001230F4(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t _s11Schematizer9EnumValueV9ContainerOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_100123500(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for EnumValue.Container(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_100123500(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  char v8 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  sub_1001230F4(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for EnumValue.Container(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  char v6 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v3;
  sub_1001230F4(v4, v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for EnumValue.Container()
{
  return &type metadata for EnumValue.Container;
}

uint64_t sub_100123A84@<X0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess();
  *a2 = *(_OWORD *)(v3 + 16);
  return swift_unknownObjectRetain();
}

uint64_t sub_100123AD4(_OWORD *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  swift_beginAccess();
  *(_OWORD *)(v3 + 16) = *a1;
  swift_unknownObjectRetain();
  return swift_unknownObjectRelease();
}

uint64_t Schematizer.schemaStore.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t Schematizer.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  type metadata accessor for ProtoSchemaStore();
  swift_allocObject();
  *(void *)(v0 + 16) = ProtoSchemaStore.init()();
  *(void *)(v0 + 24) = &protocol witness table for ProtoSchemaStore;
  return v0;
}

uint64_t Schematizer.init()()
{
  type metadata accessor for ProtoSchemaStore();
  swift_allocObject();
  *(void *)(v0 + 16) = ProtoSchemaStore.init()();
  *(void *)(v0 + 24) = &protocol witness table for ProtoSchemaStore;
  return v0;
}

uint64_t Schematizer.__allocating_init(withModel:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  Schematizer.init(withModel:)(a1, a2);
  return v4;
}

uint64_t Schematizer.init(withModel:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  type metadata accessor for ProtoSchemaStore();
  swift_allocObject();
  uint64_t v7 = ProtoSchemaStore.init(withModel:)(a1, a2);
  if (v3)
  {
    type metadata accessor for Schematizer();
    swift_deallocPartialClassInstance();
  }
  else
  {
    *(void *)(v4 + 16) = v7;
    *(void *)(v4 + 24) = &protocol witness table for ProtoSchemaStore;
  }
  return v4;
}

uint64_t Schematizer.__allocating_init(withSchemaStore:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  *(void *)(result + 24) = a2;
  return result;
}

uint64_t Schematizer.init(withSchemaStore:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return v2;
}

uint64_t Schematizer.interpret(payload:with:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  void (*v10)(void *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t);
  void v13[5];
  unint64_t v14;

  uint64_t v14 = a2;
  swift_beginAccess();
  uint64_t v8 = *(void *)(v4 + 24);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v10 = *(void (**)(void *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 40);
  swift_unknownObjectRetain();
  v10(v13, a3, a4, ObjectType, v8);
  swift_unknownObjectRelease();
  if (!v5)
  {
    type metadata accessor for ProtobufPayload();
    uint64_t v8 = static ProtobufPayload.create(with:payload:)((uint64_t)v13, a1, v14);
    sub_10001CA50((uint64_t)v13);
  }
  return v8;
}

uint64_t Schematizer.enum(withName:)()
{
  sub_10002C47C();
  uint64_t v1 = *(void *)(v0 + 24);
  swift_getObjectType();
  uint64_t v2 = *(void (**)(uint64_t))(v1 + 48);
  swift_unknownObjectRetain();
  uint64_t v3 = sub_100026C40();
  v2(v3);
  return swift_unknownObjectRelease();
}

uint64_t Schematizer.messageSchema(withName:)()
{
  sub_10002C47C();
  uint64_t v1 = *(void *)(v0 + 24);
  swift_getObjectType();
  uint64_t v2 = *(void (**)(uint64_t))(v1 + 40);
  swift_unknownObjectRetain();
  uint64_t v3 = sub_100026C40();
  v2(v3);
  return swift_unknownObjectRelease();
}

uint64_t Schematizer.deinit()
{
  swift_unknownObjectRelease();
  return v0;
}

uint64_t Schematizer.__deallocating_deinit()
{
  swift_unknownObjectRelease();

  return _swift_deallocClassInstance(v0, 32, 7);
}

uint64_t type metadata accessor for Schematizer()
{
  return self;
}

uint64_t sub_100123FF4(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1701869940 && a2 == 0xE400000000000000;
  if (v2 || (sub_100025848() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x656D614E65707974 && a2 == 0xE800000000000000;
    if (v6 || (sub_100025848() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      BOOL v7 = a1 == 6775156 && a2 == 0xE300000000000000;
      if (v7 || (sub_100025848() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else if (a1 == 0x7461657065527369 && a2 == 0xEA00000000006465)
      {
        swift_bridgeObjectRelease();
        return 3;
      }
      else
      {
        char v9 = sub_100025848();
        swift_bridgeObjectRelease();
        if (v9) {
          return 3;
        }
        else {
          return 4;
        }
      }
    }
  }
}

uint64_t sub_100124160(char a1)
{
  uint64_t result = 1701869940;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x656D614E65707974;
      break;
    case 2:
      uint64_t result = 6775156;
      break;
    case 3:
      uint64_t result = 0x7461657065527369;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1001241E8()
{
  return sub_100124160(*v0);
}

uint64_t sub_1001241F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100123FF4(a1, a2);
  *a3 = result;
  return result;
}

void sub_100124218(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_100124224(uint64_t a1)
{
  unint64_t v2 = sub_100124514();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100124260(uint64_t a1)
{
  unint64_t v2 = sub_100124514();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t PropertyModel.type.getter()
{
  return *v0;
}

uint64_t PropertyModel.typeName.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ByteBufferView.startIndex.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t PropertyModel.isRepeated.getter()
{
  return *(unsigned __int8 *)(v0 + 32);
}

void __swiftcall PropertyModel.init(type:typeName:tag:isRepeated:)(Schematizer::PropertyModel *__return_ptr retstr, Schematizer::TypeModel type, Swift::String_optional typeName, Swift::Int tag, Swift::Bool isRepeated)
{
  retstr->type = type;
  retstr->typeName = typeName;
  retstr->tag = tag;
  retstr->isRepeated = isRepeated;
}

uint64_t PropertyModel.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_10002572C(&qword_100220B60);
  sub_100020C48();
  __chkstk_darwin(v5);
  sub_10001B620(a1, a1[3]);
  sub_100124514();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return sub_10001CA50((uint64_t)a1);
  }
  sub_100124560();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  sub_1000271F8();
  uint64_t v6 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v8 = v7;
  uint64_t v14 = v6;
  swift_bridgeObjectRetain();
  sub_1000271F8();
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  sub_1000271F8();
  char v10 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v11 = sub_100024C30();
  v12(v11);
  sub_10001CA50((uint64_t)a1);
  uint64_t result = swift_bridgeObjectRelease();
  *(unsigned char *)a2 = v15;
  *(void *)(a2 + 8) = v14;
  *(void *)(a2 + 16) = v8;
  *(void *)(a2 + 24) = v9;
  *(unsigned char *)(a2 + 32) = v10 & 1;
  return result;
}

unint64_t sub_100124514()
{
  unint64_t result = qword_100220B68;
  if (!qword_100220B68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100220B68);
  }
  return result;
}

unint64_t sub_100124560()
{
  unint64_t result = qword_100220B70;
  if (!qword_100220B70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100220B70);
  }
  return result;
}

uint64_t PropertyModel.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10002572C(&qword_100220B78);
  sub_100020C48();
  uint64_t v7 = v6;
  __chkstk_darwin(v8);
  char v10 = &v12[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10001B620(a1, a1[3]);
  sub_100124514();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v12[15] = *v3;
  v12[14] = 0;
  sub_100124740();
  sub_10002AE58();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    v12[13] = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v12[12] = 2;
    sub_10002AE58();
    KeyedEncodingContainer.encode(_:forKey:)();
    if (v3[32] == 1)
    {
      v12[11] = 3;
      sub_10002AE58();
      KeyedEncodingContainer.encode(_:forKey:)();
    }
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v7 + 8))(v10, v5);
}

unint64_t sub_100124740()
{
  unint64_t result = qword_100220B80;
  if (!qword_100220B80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100220B80);
  }
  return result;
}

uint64_t static PropertyModel.__derived_struct_equals(_:_:)(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2 = 7630441;
  uint64_t v3 = *a1;
  unint64_t v4 = 0xE300000000000000;
  uint64_t v7 = 7630441;
  switch(v3)
  {
    case 1:
      unint64_t v4 = 0xE500000000000000;
      uint64_t v7 = 0x3436746E69;
      break;
    case 2:
      unint64_t v4 = 0xE400000000000000;
      uint64_t v7 = 1953393013;
      break;
    case 3:
      unint64_t v4 = 0xE600000000000000;
      uint64_t v7 = 0x3436746E6975;
      break;
    case 4:
      unint64_t v4 = 0xE500000000000000;
      uint64_t v7 = 0x74616F6C66;
      break;
    case 5:
      unint64_t v4 = 0xE600000000000000;
      uint64_t v7 = 0x656C62756F64;
      break;
    case 6:
      unint64_t v4 = 0xE400000000000000;
      uint64_t v7 = 1819242338;
      break;
    case 7:
      unint64_t v4 = 0xE400000000000000;
      uint64_t v7 = 1836412517;
      break;
    case 8:
      unint64_t v4 = 0xE400000000000000;
      uint64_t v7 = 1635017060;
      break;
    case 9:
      unint64_t v4 = 0xE600000000000000;
      uint64_t v7 = 0x676E69727473;
      break;
    case 10:
      unint64_t v4 = 0xE600000000000000;
      uint64_t v7 = 0x616D65686373;
      break;
    default:
      break;
  }
  unint64_t v8 = 0xE300000000000000;
  switch(*(unsigned char *)a2)
  {
    case 1:
      unint64_t v8 = 0xE500000000000000;
      uint64_t v2 = 0x3436746E69;
      break;
    case 2:
      unint64_t v8 = 0xE400000000000000;
      uint64_t v2 = 1953393013;
      break;
    case 3:
      unint64_t v8 = 0xE600000000000000;
      uint64_t v2 = 0x3436746E6975;
      break;
    case 4:
      unint64_t v8 = 0xE500000000000000;
      uint64_t v2 = 0x74616F6C66;
      break;
    case 5:
      unint64_t v8 = 0xE600000000000000;
      uint64_t v2 = 0x656C62756F64;
      break;
    case 6:
      unint64_t v8 = 0xE400000000000000;
      uint64_t v2 = 1819242338;
      break;
    case 7:
      unint64_t v8 = 0xE400000000000000;
      uint64_t v2 = 1836412517;
      break;
    case 8:
      unint64_t v8 = 0xE400000000000000;
      uint64_t v2 = 1635017060;
      break;
    case 9:
      unint64_t v8 = 0xE600000000000000;
      uint64_t v2 = 0x676E69727473;
      break;
    case 0xA:
      unint64_t v8 = 0xE600000000000000;
      uint64_t v2 = 0x616D65686373;
      break;
    default:
      break;
  }
  if (v7 == v2 && v4 == v8)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    char v11 = 0;
    if ((v10 & 1) == 0) {
      return v11 & 1;
    }
  }
  uint64_t v12 = *((void *)a1 + 2);
  uint64_t v13 = *(void *)(a2 + 16);
  if (!v12)
  {
    if (v13) {
      goto LABEL_41;
    }
    goto LABEL_39;
  }
  if (!v13) {
    goto LABEL_41;
  }
  BOOL v14 = *((void *)a1 + 1) == *(void *)(a2 + 8) && v12 == v13;
  if (v14 || (v15 = _stringCompareWithSmolCheck(_:_:expecting:)(), char v11 = 0, (v15 & 1) != 0))
  {
LABEL_39:
    if (*((void *)a1 + 3) == *(void *)(a2 + 24))
    {
      char v11 = ((a1[32] & 1) == 0) ^ *(unsigned char *)(a2 + 32);
      return v11 & 1;
    }
LABEL_41:
    char v11 = 0;
  }
  return v11 & 1;
}

double sub_100124A94@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  PropertyModel.init(from:)(a1, (uint64_t)v6);
  if (!v2)
  {
    double result = *(double *)v6;
    long long v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(unsigned char *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t sub_100124ADC(void *a1)
{
  return PropertyModel.encode(to:)(a1);
}

uint64_t PropertyModel.init(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  sub_10001B620(a1, v6);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v7 + 40))(v35, v6, v7);
  if (v2) {
    return sub_10001CA50((uint64_t)a1);
  }
  sub_100124DBC((uint64_t)v35, (uint64_t)&v30);
  if (v34)
  {
    if (v34 == 1)
    {
      sub_10001C1AC(&v30, (uint64_t)v28);
      sub_10001B620(v28, v29);
      uint64_t v8 = sub_10002A674();
      uint64_t v3 = v9(v8);
      uint64_t v6 = v10;
      sub_10001CA50((uint64_t)v28);
      char v11 = 10;
    }
    else if (v32 | v33 | (unint64_t)v30 | v31 | *((void *)&v30 + 1))
    {
      uint64_t v15 = v32 | v33 | v31 | *((void *)&v30 + 1);
      if ((void)v30 != 1 || v15)
      {
        if ((void)v30 != 2 || v15)
        {
          if ((void)v30 != 3 || v15)
          {
            if ((void)v30 != 4 || v15)
            {
              if ((void)v30 != 5 || v15)
              {
                if ((void)v30 != 6 || v15)
                {
                  sub_10002C4A8();
                  if (v17) {
                    BOOL v18 = 0;
                  }
                  else {
                    BOOL v18 = v16 == 7;
                  }
                  if (v18) {
                    char v11 = 9;
                  }
                  else {
                    char v11 = 8;
                  }
                }
                else
                {
                  sub_10002C4A8();
                  char v11 = 6;
                }
              }
              else
              {
                sub_10002C4A8();
                char v11 = 5;
              }
            }
            else
            {
              sub_10002C4A8();
              char v11 = 4;
            }
          }
          else
          {
            sub_10002C4A8();
            char v11 = 3;
          }
        }
        else
        {
          sub_10002C4A8();
          char v11 = 1;
        }
      }
      else
      {
        sub_10002C4A8();
        char v11 = 2;
      }
    }
    else
    {
      char v11 = 0;
      sub_10002C4A8();
    }
  }
  else
  {
    sub_10001C1AC(&v30, (uint64_t)v28);
    sub_10001B620(v28, v29);
    uint64_t v12 = sub_10002A674();
    uint64_t v3 = v13(v12);
    uint64_t v6 = v14;
    sub_10001CA50((uint64_t)v28);
    char v11 = 7;
  }
  uint64_t v19 = a1[3];
  uint64_t v20 = a1[4];
  sub_10001B620(a1, v19);
  uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 32))(v19, v20);
  uint64_t v36 = v6;
  uint64_t v22 = v3;
  uint64_t v23 = a1[3];
  uint64_t v24 = a1[4];
  sub_10001B620(a1, v23);
  char v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 16))(v23, v24);
  sub_100124E18((uint64_t)v35);
  uint64_t result = sub_10001CA50((uint64_t)a1);
  *(unsigned char *)a2 = v11;
  uint64_t v27 = v36;
  *(void *)(a2 + 8) = v22;
  *(void *)(a2 + 16) = v27;
  *(void *)(a2 + 24) = v21;
  *(unsigned char *)(a2 + 32) = v25 & 1;
  return result;
}

uint64_t sub_100124DBC(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100124E18(uint64_t a1)
{
  return a1;
}

uint64_t initializeWithCopy for PropertyModel(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PropertyModel(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return a1;
}

uint64_t assignWithTake for PropertyModel(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for PropertyModel(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 33))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      unint64_t v3 = *(void *)(a1 + 16);
      if (v3 >= 0xFFFFFFFF) {
        LODWORD(v3) = -1;
      }
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PropertyModel(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PropertyModel()
{
  return &type metadata for PropertyModel;
}

unsigned char *storeEnumTagSinglePayload for PropertyModel.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001250F4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PropertyModel.CodingKeys()
{
  return &type metadata for PropertyModel.CodingKeys;
}

unint64_t sub_100125130()
{
  unint64_t result = qword_100220B88;
  if (!qword_100220B88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100220B88);
  }
  return result;
}

unint64_t sub_100125180()
{
  unint64_t result = qword_100220B90;
  if (!qword_100220B90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100220B90);
  }
  return result;
}

unint64_t sub_1001251D0()
{
  unint64_t result = qword_100220B98;
  if (!qword_100220B98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100220B98);
  }
  return result;
}

void sub_10012521C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v20 = _swiftEmptyArrayStorage;
  sub_10001FC68(a3, v19);
  uint64_t v6 = v19[0];
  uint64_t v7 = v19[1];
  int64_t v8 = v19[3];
  unint64_t v9 = v19[4];
  int64_t v10 = (unint64_t)(v19[2] + 64) >> 6;
  swift_bridgeObjectRetain_n();
  swift_retain();
  if (!v9) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v11 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v12 = v11 | (v8 << 6);
  while (1)
  {
    sub_100148340(*(unsigned int *)(*(void *)(v6 + 56) + 4 * v12));
    if (v9) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1)) {
      break;
    }
    if (v13 >= v10) {
      goto LABEL_23;
    }
    unint64_t v14 = *(void *)(v7 + 8 * v13);
    int64_t v15 = v8 + 1;
    if (!v14)
    {
      int64_t v15 = v8 + 2;
      if (v8 + 2 >= v10) {
        goto LABEL_23;
      }
      unint64_t v14 = *(void *)(v7 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v8 + 3;
        if (v8 + 3 >= v10) {
          goto LABEL_23;
        }
        unint64_t v14 = *(void *)(v7 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v8 + 4;
          if (v8 + 4 >= v10) {
            goto LABEL_23;
          }
          unint64_t v14 = *(void *)(v7 + 8 * v15);
          if (!v14)
          {
            int64_t v15 = v8 + 5;
            if (v8 + 5 >= v10) {
              goto LABEL_23;
            }
            unint64_t v14 = *(void *)(v7 + 8 * v15);
            if (!v14)
            {
              int64_t v15 = v8 + 6;
              if (v8 + 6 >= v10) {
                goto LABEL_23;
              }
              unint64_t v14 = *(void *)(v7 + 8 * v15);
              if (!v14)
              {
                int64_t v16 = v8 + 7;
                while (v16 < v10)
                {
                  unint64_t v14 = *(void *)(v7 + 8 * v16++);
                  if (v14)
                  {
                    int64_t v15 = v16 - 1;
                    goto LABEL_20;
                  }
                }
LABEL_23:
                swift_bridgeObjectRelease();
                swift_release();
                uint64_t v17 = v20;
                v3[4] = a3;
                v3[5] = v17;
                swift_release();
                v3[2] = a1;
                v3[3] = a2;
                return;
              }
            }
          }
        }
      }
    }
LABEL_20:
    unint64_t v9 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
    int64_t v8 = v15;
  }
  __break(1u);
}

uint64_t *sub_1001253C8(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void *)(v2 + 32);
  if (!*(void *)(v6 + 16)) {
    goto LABEL_5;
  }
  swift_bridgeObjectRetain();
  unint64_t v7 = sub_1000287F0(a1, (uint64_t)a2);
  if ((v8 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    sub_1001229F8();
    swift_allocError();
    uint64_t v11 = v10;
    _StringGuts.grow(_:)(18);
    swift_bridgeObjectRelease();
    sub_10002C4B4();
    uint64_t v21 = v12;
    uint64_t v22 = v13;
    uint64_t v14 = *(void *)(v3 + 16);
    int64_t v15 = *(void **)(v3 + 24);
    swift_bridgeObjectRetain();
    v16._countAndFlagsBits = v14;
    v16._object = v15;
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    v17._countAndFlagsBits = 8236;
    v17._object = (void *)0xE200000000000000;
    String.append(_:)(v17);
    v18._countAndFlagsBits = a1;
    v18._object = a2;
    String.append(_:)(v18);
    unint64_t v9 = &v21;
    sub_100026C64();
    uint64_t v19 = v22;
    *(void *)uint64_t v11 = v21;
    *(void *)(v11 + 8) = v19;
    *(unsigned char *)(v11 + 41) = 5;
    swift_willThrow();
    return v9;
  }
  unint64_t v9 = (uint64_t *)*(unsigned int *)(*(void *)(v6 + 56) + 4 * v7);
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t sub_100125500(int a1)
{
  uint64_t result = sub_10001FC68(v1[4], &v24);
  int64_t v4 = v27;
  unint64_t v5 = v28;
  int64_t v6 = (unint64_t)(v26 + 64) >> 6;
  while (1)
  {
    if (v5)
    {
      unint64_t v7 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v8 = v7 | (v4 << 6);
      goto LABEL_22;
    }
    int64_t v9 = v4 + 1;
    if (__OFADD__(v4, 1)) {
      break;
    }
    if (v9 >= v6) {
      goto LABEL_24;
    }
    unint64_t v10 = *(void *)(v25 + 8 * v9);
    int64_t v11 = v4 + 1;
    if (!v10)
    {
      int64_t v11 = v4 + 2;
      if (v4 + 2 >= v6) {
        goto LABEL_24;
      }
      unint64_t v10 = *(void *)(v25 + 8 * v11);
      if (!v10)
      {
        int64_t v11 = v4 + 3;
        if (v4 + 3 >= v6) {
          goto LABEL_24;
        }
        unint64_t v10 = *(void *)(v25 + 8 * v11);
        if (!v10)
        {
          int64_t v11 = v4 + 4;
          if (v4 + 4 >= v6) {
            goto LABEL_24;
          }
          unint64_t v10 = *(void *)(v25 + 8 * v11);
          if (!v10)
          {
            int64_t v11 = v4 + 5;
            if (v4 + 5 >= v6) {
              goto LABEL_24;
            }
            unint64_t v10 = *(void *)(v25 + 8 * v11);
            if (!v10)
            {
              int64_t v11 = v4 + 6;
              if (v4 + 6 >= v6) {
                goto LABEL_24;
              }
              unint64_t v10 = *(void *)(v25 + 8 * v11);
              if (!v10)
              {
                int64_t v12 = v4 + 7;
                while (v12 < v6)
                {
                  unint64_t v10 = *(void *)(v25 + 8 * v12++);
                  if (v10)
                  {
                    int64_t v11 = v12 - 1;
                    goto LABEL_21;
                  }
                }
LABEL_24:
                swift_bridgeObjectRetain();
                swift_release();
                sub_1001229F8();
                swift_allocError();
                uint64_t v15 = v14;
                _StringGuts.grow(_:)(18);
                swift_bridgeObjectRelease();
                sub_10002C4B4();
                uint64_t v22 = v16;
                uint64_t v23 = v17;
                uint64_t v18 = v1[2];
                uint64_t v13 = (void *)v1[3];
                swift_bridgeObjectRetain();
                v19._countAndFlagsBits = v18;
                v19._object = v13;
                String.append(_:)(v19);
                swift_bridgeObjectRelease();
                v20._countAndFlagsBits = 8236;
                v20._object = (void *)0xE200000000000000;
                String.append(_:)(v20);
                int v29 = a1;
                v21._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
                String.append(_:)(v21);
                swift_bridgeObjectRelease();
                sub_100026C64();
                *(void *)uint64_t v15 = v22;
                *(void *)(v15 + 8) = v23;
                *(unsigned char *)(v15 + 41) = 5;
                swift_willThrow();
                return (uint64_t)v13;
              }
            }
          }
        }
      }
    }
LABEL_21:
    unint64_t v5 = (v10 - 1) & v10;
    unint64_t v8 = __clz(__rbit64(v10)) + (v11 << 6);
    int64_t v4 = v11;
LABEL_22:
    if (*(_DWORD *)(*(void *)(v24 + 56) + 4 * v8) == a1)
    {
      uint64_t v13 = *(void **)(*(void *)(v24 + 48) + 16 * v8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_release();
      return (uint64_t)v13;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100125758()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100125788()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1001257B8()
{
  sub_100125788();

  return _swift_deallocClassInstance(v0, 48, 7);
}

uint64_t type metadata accessor for ProtoEnum()
{
  return self;
}

uint64_t *sub_100125810(uint64_t a1, void *a2)
{
  return sub_1001253C8(a1, a2);
}

uint64_t sub_100125834(int a1)
{
  return sub_100125500(a1);
}

uint64_t sub_100125858()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10004CD40(v0, qword_100236CC8);
  sub_10002A10C(v0, (uint64_t)qword_100236CC8);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_1001258D0()
{
  return swift_weakAssign();
}

void *sub_1001258DC()
{
  if (swift_weakLoadStrong())
  {
    uint64_t v0 = SQLiteBaseSchematizer.getSQLiteBridge()();
    swift_release();
  }
  else
  {
    sub_1001274DC();
    swift_allocError();
    *uint64_t v1 = 0;
    swift_willThrow();
  }
  return v0;
}

double sub_100125974()
{
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v2 = Strong;
    swift_beginAccess();
    double v0 = *(double *)(v2 + 32);
    swift_release();
  }
  else
  {
    sub_1001274DC();
    swift_allocError();
    *uint64_t v3 = 0;
    swift_willThrow();
  }
  return v0;
}

uint64_t sub_100125A10()
{
  swift_weakDestroy();

  return _swift_deallocClassInstance(v0, 24, 7);
}

void *sub_100125A4C()
{
  return sub_1001258DC();
}

double sub_100125A64()
{
  return sub_100125974();
}

uint64_t ProtoSchemaStore.allSchemaNames.getter()
{
  return swift_bridgeObjectRetain();
}

double SQLiteBaseSchematizer.queryTimeFrameGuideline.getter()
{
  sub_100018014();
  return *(double *)(v0 + 32);
}

uint64_t SQLiteBaseSchematizer.queryTimeFrameGuideline.setter(double a1, double a2)
{
  uint64_t result = swift_beginAccess();
  *(double *)(v2 + 32) = a1;
  *(double *)(v2 + 40) = a2;
  return result;
}

uint64_t (*SQLiteBaseSchematizer.queryTimeFrameGuideline.modify())()
{
  return j__swift_endAccess;
}

uint64_t sub_100125B3C()
{
  sub_10002572C(&qword_100220EF0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1001AA890;
  *(void *)(inited + 32) = 0x6D756E655F70;
  *(void *)(inited + 40) = 0xE600000000000000;
  *(void *)(inited + 48) = type metadata accessor for PEnumFunction();
  *(void *)(inited + 56) = &protocol witness table for SQLiteSchematizerFunction;
  *(void *)(inited + 64) = 0x6A626F5F70;
  *(void *)(inited + 72) = 0xE500000000000000;
  *(void *)(inited + 80) = type metadata accessor for PObjFunction();
  *(void *)(inited + 88) = &protocol witness table for SQLiteSchematizerFunction;
  *(void *)(inited + 96) = 0x7465675F70;
  *(void *)(inited + 104) = 0xE500000000000000;
  *(void *)(inited + 112) = type metadata accessor for PGetFunction();
  *(void *)(inited + 120) = &protocol witness table for SQLiteSchematizerFunction;
  *(void *)(inited + 128) = 0x6E616D7465675F70;
  *(void *)(inited + 136) = 0xE900000000000079;
  *(void *)(inited + 144) = sub_10002572C(&qword_100220EF8);
  *(void *)(inited + 152) = &protocol witness table for SQLiteSchematizerTableFunction<A>;
  *(void *)(inited + 160) = 0x666F656E6F5F70;
  *(void *)(inited + 168) = 0xE700000000000000;
  *(void *)(inited + 176) = type metadata accessor for POneOfFunction();
  *(void *)(inited + 184) = &protocol witness table for SQLiteSchematizerFunction;
  *(void *)(inited + 192) = 0x6E6F736A5F70;
  *(void *)(inited + 200) = 0xE600000000000000;
  *(void *)(inited + 208) = type metadata accessor for PJSONFunction();
  *(void *)(inited + 216) = &protocol witness table for SQLiteSchematizerFunction;
  *(void *)(inited + 224) = 0x616F6C7961705F70;
  *(void *)(inited + 232) = 0xE900000000000064;
  *(void *)(inited + 240) = type metadata accessor for PPayloadFunction();
  *(void *)(inited + 248) = &protocol witness table for SQLiteSchematizerFunction;
  strcpy((char *)(inited + 256), "p_message_name");
  *(unsigned char *)(inited + 271) = -18;
  *(void *)(inited + 272) = type metadata accessor for PMessageNameFunction();
  *(void *)(inited + 280) = &protocol witness table for SQLiteSchematizerFunction;
  *(void *)(inited + 288) = 0x7465675F6270;
  *(void *)(inited + 296) = 0xE600000000000000;
  *(void *)(inited + 304) = type metadata accessor for PBGetFunction();
  *(void *)(inited + 312) = &protocol witness table for SQLiteSchematizerFunction;
  *(void *)(inited + 320) = 0x74737269665F6270;
  *(void *)(inited + 328) = 0xEA0000000000666FLL;
  *(void *)(inited + 336) = type metadata accessor for PBFirstOfFunction();
  *(void *)(inited + 344) = &protocol witness table for SQLiteSchematizerFunction;
  *(void *)(inited + 352) = 0x65646F6365645F70;
  *(void *)(inited + 360) = 0xEF3436657361625FLL;
  *(void *)(inited + 368) = type metadata accessor for PBase64DecodeFunction();
  *(void *)(inited + 376) = &protocol witness table for SQLiteSchematizerFunction;
  *(void *)(inited + 384) = 0xD000000000000017;
  *(void *)(inited + 392) = 0x80000001001B89C0;
  *(void *)(inited + 400) = type metadata accessor for PSetTimeWindowFunction();
  *(void *)(inited + 408) = &protocol witness table for SQLiteSchematizerFunction;
  *(void *)(inited + 416) = 0xD000000000000019;
  *(void *)(inited + 424) = 0x80000001001B89E0;
  *(void *)(inited + 432) = type metadata accessor for PGetTimeWindowStartFunction();
  *(void *)(inited + 440) = &protocol witness table for SQLiteSchematizerFunction;
  *(void *)(inited + 448) = 0xD000000000000017;
  *(void *)(inited + 456) = 0x80000001001B8A00;
  *(void *)(inited + 464) = type metadata accessor for PGetTimeWindowEndFunction();
  *(void *)(inited + 472) = &protocol witness table for SQLiteSchematizerFunction;
  sub_10002572C(&qword_100220F00);
  uint64_t result = Dictionary.init(dictionaryLiteral:)();
  qword_100236CE0 = result;
  return result;
}

uint64_t SQLiteBaseSchematizer.functions.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SQLiteBaseSchematizer.functions.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 64) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*SQLiteBaseSchematizer.functions.modify())()
{
  return j_j__swift_endAccess;
}

uint64_t SQLiteBaseSchematizer.__allocating_init(schemaStore:viewProviders:)()
{
  sub_10002C4C8();
  uint64_t v1 = sub_10002766C();
  SQLiteBaseSchematizer.init(schemaStore:viewProviders:)(v1, v2, v3);
  return v0;
}

uint64_t SQLiteBaseSchematizer.init(schemaStore:viewProviders:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v28 = a1;
  uint64_t v29 = a3;
  uint64_t v27 = a2;
  uint64_t v4 = type metadata accessor for Date();
  sub_100020C48();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  int64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  int64_t v12 = (char *)&v26 - v11;
  type metadata accessor for Schematizer();
  uint64_t v13 = sub_100023CFC();
  type metadata accessor for ProtoSchemaStore();
  swift_allocObject();
  *(void *)(v13 + 16) = ProtoSchemaStore.init()();
  *(void *)(v13 + 24) = &protocol witness table for ProtoSchemaStore;
  *(void *)(v3 + 16) = v13;
  static Date.distantPast.getter();
  Date.timeIntervalSince1970.getter();
  double v15 = v14;
  uint64_t v16 = *(void (**)(char *, uint64_t))(v6 + 8);
  v16(v12, v4);
  static Date.distantFuture.getter();
  Date.timeIntervalSince1970.getter();
  double v18 = v17;
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v16)(v9, v4);
  if (v15 > v18)
  {
    __break(1u);
  }
  else
  {
    *(double *)(v3 + 32) = v15;
    *(double *)(v3 + 40) = v18;
    *(void *)(v3 + 48) = 0;
    *(void *)(v3 + 56) = 0;
    sub_10002572C(&qword_1002208C8);
    *(void *)(v3 + 64) = Dictionary.init(dictionaryLiteral:)();
    uint64_t v20 = v28;
    if (v28)
    {
      uint64_t v21 = sub_100023CFC();
      uint64_t v22 = v27;
      *(void *)(v21 + 16) = v20;
      *(void *)(v21 + 24) = v22;
      *(void *)(v3 + 16) = v21;
      swift_unknownObjectRetain();
    }
    else
    {
      uint64_t v23 = sub_100023CFC();
      swift_allocObject();
      *(void *)(v23 + 16) = ProtoSchemaStore.init()();
      *(void *)(v23 + 24) = &protocol witness table for ProtoSchemaStore;
      *(void *)(v3 + 16) = v23;
    }
    uint64_t v24 = swift_release();
    *(void *)(v3 + 24) = v29;
    uint64_t v25 = v30;
    (*(void (**)(uint64_t))(*(void *)v3 + 272))(v24);
    if (v25) {
      swift_release();
    }
    swift_unknownObjectRelease();
    return v3;
  }
  return result;
}

uint64_t SQLiteBaseSchematizer.__allocating_init(schemaStoreModel:viewProviders:)()
{
  sub_10002C4C8();
  uint64_t v1 = sub_10002766C();
  SQLiteBaseSchematizer.init(schemaStoreModel:viewProviders:)(v1, v2, v3);
  return v0;
}

uint64_t SQLiteBaseSchematizer.init(schemaStoreModel:viewProviders:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v24[0] = a2;
  uint64_t v25 = a3;
  uint64_t v5 = type metadata accessor for Date();
  sub_100020C48();
  uint64_t v7 = v6;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)v24 - v12;
  type metadata accessor for Schematizer();
  uint64_t v14 = sub_100023CFC();
  type metadata accessor for ProtoSchemaStore();
  swift_allocObject();
  *(void *)(v14 + 16) = ProtoSchemaStore.init()();
  *(void *)(v14 + 24) = &protocol witness table for ProtoSchemaStore;
  *(void *)(v3 + 16) = v14;
  static Date.distantPast.getter();
  Date.timeIntervalSince1970.getter();
  double v16 = v15;
  double v17 = *(void (**)(char *, uint64_t))(v7 + 8);
  v17(v13, v5);
  static Date.distantFuture.getter();
  Date.timeIntervalSince1970.getter();
  double v19 = v18;
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v17)(v10, v5);
  if (v16 > v19)
  {
    __break(1u);
  }
  else
  {
    *(double *)(v3 + 32) = v16;
    *(double *)(v3 + 40) = v19;
    *(void *)(v3 + 48) = 0;
    *(void *)(v3 + 56) = 0;
    sub_10002572C(&qword_1002208C8);
    *(void *)(v3 + 64) = Dictionary.init(dictionaryLiteral:)();
    sub_100023CFC();
    uint64_t v21 = v24[1];
    uint64_t v22 = Schematizer.init(withModel:)(a1, v24[0]);
    if (v21)
    {
      swift_bridgeObjectRelease();
      swift_release();
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      type metadata accessor for SQLiteBaseSchematizer();
      swift_deallocPartialClassInstance();
    }
    else
    {
      *(void *)(v3 + 16) = v22;
      uint64_t v23 = swift_release();
      *(void *)(v3 + 24) = v25;
      (*(void (**)(uint64_t))(*(void *)v3 + 272))(v23);
    }
    return v3;
  }
  return result;
}

Swift::Void __swiftcall SQLiteBaseSchematizer.ensureFunctions()()
{
  uint64_t v1 = v0;
  swift_beginAccess();
  if (!*(void *)(*(void *)(v0 + 64) + 16))
  {
    if (qword_100220868 == -1) {
      goto LABEL_3;
    }
LABEL_27:
    swift_once();
LABEL_3:
    uint64_t v2 = qword_100236CE0;
    uint64_t v22 = qword_100236CE0 + 64;
    uint64_t v3 = 1 << *(unsigned char *)(qword_100236CE0 + 32);
    uint64_t v4 = -1;
    if (v3 < 64) {
      uint64_t v4 = ~(-1 << v3);
    }
    unint64_t v5 = v4 & *(void *)(qword_100236CE0 + 64);
    int64_t v23 = (unint64_t)(v3 + 63) >> 6;
    swift_bridgeObjectRetain();
    int64_t v6 = 0;
    if (v5)
    {
LABEL_6:
      unint64_t v7 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v8 = v7 | (v6 << 6);
      goto LABEL_21;
    }
    while (1)
    {
      int64_t v9 = v6 + 1;
      if (__OFADD__(v6, 1))
      {
        __break(1u);
LABEL_26:
        __break(1u);
        goto LABEL_27;
      }
      if (v9 >= v23) {
        goto LABEL_23;
      }
      unint64_t v10 = *(void *)(v22 + 8 * v9);
      ++v6;
      if (!v10)
      {
        int64_t v6 = v9 + 1;
        if (v9 + 1 >= v23) {
          goto LABEL_23;
        }
        unint64_t v10 = *(void *)(v22 + 8 * v6);
        if (!v10)
        {
          int64_t v6 = v9 + 2;
          if (v9 + 2 >= v23) {
            goto LABEL_23;
          }
          unint64_t v10 = *(void *)(v22 + 8 * v6);
          if (!v10)
          {
            int64_t v11 = v9 + 3;
            if (v11 >= v23)
            {
LABEL_23:
              swift_release();
              return;
            }
            unint64_t v10 = *(void *)(v22 + 8 * v11);
            if (!v10)
            {
              while (1)
              {
                int64_t v6 = v11 + 1;
                if (__OFADD__(v11, 1)) {
                  goto LABEL_26;
                }
                if (v6 >= v23) {
                  goto LABEL_23;
                }
                unint64_t v10 = *(void *)(v22 + 8 * v6);
                ++v11;
                if (v10) {
                  goto LABEL_20;
                }
              }
            }
            int64_t v6 = v11;
          }
        }
      }
LABEL_20:
      unint64_t v5 = (v10 - 1) & v10;
      unint64_t v8 = __clz(__rbit64(v10)) + (v6 << 6);
LABEL_21:
      uint64_t v12 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v8);
      uint64_t v13 = *v12;
      uint64_t v14 = v12[1];
      double v15 = (uint64_t *)(*(void *)(v2 + 56) + 16 * v8);
      uint64_t v16 = *v15;
      uint64_t v17 = v15[1];
      double v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 24);
      swift_bridgeObjectRetain();
      uint64_t v19 = swift_retain();
      uint64_t v20 = v18(v19, v16, v17);
      sub_1000257C8();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v24 = *(void *)(v1 + 64);
      *(void *)(v1 + 64) = 0x8000000000000000;
      sub_100127370(v20, v13, v14, isUniquelyReferenced_nonNull_native, &v24, v16, v17);
      *(void *)(v1 + 64) = v24;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_endAccess();
      if (v5) {
        goto LABEL_6;
      }
    }
  }
}

uint64_t SQLiteBaseSchematizer.deinit()
{
  (*(void (**)(void))(*(void *)v0 + 240))();
  swift_release();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t SQLiteBaseSchematizer.__deallocating_deinit()
{
  SQLiteBaseSchematizer.deinit();

  return _swift_deallocClassInstance(v0, 72, 7);
}

Swift::Void __swiftcall SQLiteBaseSchematizer.teardown()()
{
  type metadata accessor for Schematizer();
  uint64_t v1 = swift_allocObject();
  type metadata accessor for ProtoSchemaStore();
  swift_allocObject();
  *(void *)(v1 + 16) = ProtoSchemaStore.init()();
  *(void *)(v1 + 24) = &protocol witness table for ProtoSchemaStore;
  *(void *)(v0 + 16) = v1;
  swift_release();
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = (uint64_t *)(v2 + 40);
    do
    {
      uint64_t v5 = *v4;
      uint64_t ObjectType = swift_getObjectType();
      unint64_t v7 = *(void (**)(uint64_t, uint64_t))(v5 + 40);
      swift_unknownObjectRetain();
      v7(ObjectType, v5);
      swift_unknownObjectRelease();
      v4 += 2;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
  }
  sub_1000257C8();
  sub_10002572C(&qword_100220C70);
  Dictionary._Variant.removeAll(keepingCapacity:)(0);
  swift_endAccess();
}

uint64_t static SQLiteBaseSchematizer.createEnvironment()()
{
  type metadata accessor for SQLiteBaseSchematizer.Environment();
  uint64_t v0 = swift_allocObject();
  swift_weakInit();
  return v0;
}

uint64_t SQLiteBaseSchematizer.getSchemaStore()()
{
  return swift_unknownObjectRetain();
}

void *SQLiteBaseSchematizer.getSQLiteBridge()()
{
  uint64_t v1 = v0;
  if (*(void *)(v0 + 48))
  {
    uint64_t v2 = *(void **)(v0 + 48);
  }
  else
  {
    uint64_t v3 = SQLiteBaseSchematizer.getSchemaStore()();
    uint64_t v5 = v4;
    type metadata accessor for SQLiteMessageInBlobBridge();
    swift_allocObject();
    uint64_t v2 = sub_10013A00C(v3, v5);
    *(void *)(v1 + 48) = v2;
    *(void *)(v1 + 56) = &off_100202CC8;
    swift_retain();
    swift_unknownObjectRelease();
  }
  swift_unknownObjectRetain();
  return v2;
}

Schematizer::SchemaStoreModel __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SQLiteBaseSchematizer.getSchemaStoreModel()()
{
  SQLiteBaseSchematizer.getSchemaStore()();
  uint64_t v2 = v1;
  uint64_t ObjectType = swift_getObjectType();
  v2[7](ObjectType, v2);
  sub_1000244B4();
  swift_unknownObjectRelease();
  uint64_t v4 = v0;
  uint64_t v5 = v2;
  result.enums._rawValue = v5;
  result.schemas._rawValue = v4;
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SQLiteBaseSchematizer.reloadViewProviders()()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = SQLiteBaseSchematizer.getSchemaStore()();
  Array<A>.reloadAll(with:)(v2, v3, v1);
  swift_unknownObjectRelease();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SQLiteBaseSchematizer.reconfigure(withSchemaStoreModel:)(Schematizer::SchemaStoreModel withSchemaStoreModel)
{
  uint64_t v3 = v1;
  rawValue = withSchemaStoreModel.enums._rawValue;
  uint64_t v5 = withSchemaStoreModel.schemas._rawValue;
  type metadata accessor for Schematizer();
  sub_100023CFC();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v6 = Schematizer.init(withModel:)((uint64_t)v5, (uint64_t)rawValue);
  if (!v2)
  {
    v3[2] = v6;
    swift_release();
    v3[6] = 0;
    v3[7] = 0;
    uint64_t v7 = swift_unknownObjectRelease();
    (*(void (**)(uint64_t))(*v3 + 272))(v7);
  }
}

uint64_t SQLiteBaseSchematizer.reconfigure(withSchemaStore:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Schematizer();
  uint64_t v5 = sub_100023CFC();
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  v2[2] = v5;
  swift_unknownObjectRetain();
  swift_release();
  v2[6] = 0;
  v2[7] = 0;
  uint64_t v6 = swift_unknownObjectRelease();
  return (*(uint64_t (**)(uint64_t))(*v2 + 272))(v6);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SQLiteBaseSchematizer.configureEventViews(for:withSchemaUpdate:)(Swift::OpaquePointer a1, Swift::Bool withSchemaUpdate)
{
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(*(void *)(v2 + 24) + 16);
  if (v5)
  {
    uint64_t v71 = swift_bridgeObjectRetain();
    uint64_t v6 = (uint64_t *)(v71 + 40);
    *(void *)&long long v7 = 136315138;
    long long v77 = v7;
    v74 = (char *)&type metadata for Any + 8;
    *(void *)&long long v7 = 136315394;
    long long v78 = v7;
    while (1)
    {
      uint64_t v8 = *v6;
      if (!withSchemaUpdate) {
        break;
      }
      uint64_t ObjectType = swift_getObjectType();
      unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 24);
      swift_unknownObjectRetain();
      if (v10(ObjectType, v8)) {
        goto LABEL_7;
      }
      swift_unknownObjectRelease();
LABEL_22:
      v6 += 2;
      if (!--v5)
      {
        swift_bridgeObjectRelease();
        return;
      }
    }
    swift_unknownObjectRetain();
LABEL_7:
    uint64_t v11 = swift_getObjectType();
    (*(void (**)(void *, uint64_t, uint64_t))(v8 + 56))(a1._rawValue, v11, v8);
    if (!v4)
    {
      uint64_t v82 = v11;
      if (qword_100220860 != -1) {
        swift_once();
      }
      uint64_t v22 = type metadata accessor for Logger();
      sub_10002A10C(v22, (uint64_t)qword_100236CC8);
      swift_unknownObjectRetain_n();
      int64_t v23 = Logger.logObject.getter();
      os_log_type_t v24 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v23, v24))
      {
        uint64_t v25 = swift_slowAlloc();
        os_log_t log = (os_log_t)swift_slowAlloc();
        sub_100027208((uint64_t)log, v26, v27, v28, v29, v30, v31, v32, v71, (uint64_t)v74, v33);
        uint64_t v42 = sub_100024C48(v34, v35, v36, v37, v38, v39, v40, v41, v72, v75, v77, *((uint64_t *)&v77 + 1), v78, *((uint64_t *)&v78 + 1), v79, (uint64_t)log, v82);
        uint64_t v44 = v43(v42);
        *(void *)(v25 + 4) = sub_10002CE94(v44, v45);
        sub_10002A694();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v23, v24, "Database configured with \"%s\" event provider", (uint8_t *)v25, 0xCu);
        swift_arrayDestroy();
        sub_100017D40();
        sub_100017D40();
        swift_unknownObjectRelease();
      }
      else
      {

        swift_unknownObjectRelease_n();
      }
      goto LABEL_22;
    }
    swift_errorRetain();
    uint64_t v12 = sub_10002572C(&qword_10021B3C0);
    if ((swift_dynamicCast() & 1) != 0 && !v86)
    {
      uint64_t v83 = v11;
      if (qword_100220860 != -1) {
        swift_once();
      }
      uint64_t v46 = type metadata accessor for Logger();
      sub_10002A10C(v46, (uint64_t)qword_100236CC8);
      swift_unknownObjectRetain_n();
      v47 = Logger.logObject.getter();
      os_log_type_t v48 = static os_log_type_t.info.getter();
      if (!os_log_type_enabled(v47, v48))
      {
        swift_unknownObjectRelease();
        swift_errorRelease();

        sub_10002A694();
        goto LABEL_20;
      }
      uint64_t v49 = swift_slowAlloc();
      uint64_t v50 = swift_slowAlloc();
      sub_100027208(v50, v51, v52, v53, v54, v55, v56, v57, v71, (uint64_t)v74, v58);
      uint64_t v67 = sub_100024C48(v59, v60, v61, v62, v63, v64, v65, v66, v73, v76, v77, *((uint64_t *)&v77 + 1), v78, *((uint64_t *)&v78 + 1), v79, (uint64_t)v47, v83);
      uint64_t v69 = v68(v67);
      *(void *)(v49 + 4) = sub_10002CE94(v69, v70);
      sub_10002A694();
      swift_bridgeObjectRelease();
      uint64_t v14 = loga;
      _os_log_impl((void *)&_mh_execute_header, loga, v48, "Database does not meet \"%s\" view provider requirements", (uint8_t *)v49, 0xCu);
      swift_arrayDestroy();
      sub_100017D40();
    }
    else
    {
      if (qword_100220860 != -1) {
        swift_once();
      }
      uint64_t v13 = type metadata accessor for Logger();
      sub_10002A10C(v13, (uint64_t)qword_100236CC8);
      swift_unknownObjectRetain();
      swift_errorRetain();
      swift_unknownObjectRetain();
      swift_errorRetain();
      uint64_t v14 = Logger.logObject.getter();
      os_log_type_t v15 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v14, v15))
      {
        swift_unknownObjectRelease();
        swift_errorRelease();
        sub_10002A694();
        swift_errorRelease();
        swift_errorRelease();

        goto LABEL_20;
      }
      uint64_t v79 = v12;
      uint64_t v16 = v11;
      uint64_t v17 = swift_slowAlloc();
      swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = v78;
      uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 16))(v16, v8);
      *(void *)(v17 + 4) = sub_10002CE94(v18, v19);
      sub_10002A694();
      swift_bridgeObjectRelease();
      *(_WORD *)(v17 + 12) = 2080;
      char v86 = v4;
      swift_errorRetain();
      uint64_t v20 = String.init<A>(describing:)();
      *(void *)(v17 + 14) = sub_10002CE94(v20, v21);
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Failed to configure database with \"%s\" event provider: %s", (uint8_t *)v17, 0x16u);
      swift_arrayDestroy();
      sub_100017D40();
    }
    sub_100017D40();
    swift_unknownObjectRelease();

    swift_errorRelease();
LABEL_20:
    uint64_t v4 = 0;
    goto LABEL_22;
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SQLiteBaseSchematizer.createFunctions(for:)(Swift::OpaquePointer a1)
{
  uint64_t v3 = v1;
  SQLiteBaseSchematizer.ensureFunctions()();
  type metadata accessor for SQLiteDatabase();
  swift_allocObject();
  uint64_t v5 = SQLiteDatabase.init(connection:)((uint64_t)a1._rawValue);
  if (!v2)
  {
    uint64_t v6 = v5;
    swift_beginAccess();
    uint64_t v7 = *(void *)(v3 + 64);
    swift_bridgeObjectRetain();
    Dictionary<>.registerAll(on:)(v6, v7);
    uint64_t v8 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t))(*(void *)v6 + 144))(v8);
    swift_release();
  }
}

uint64_t SQLiteBaseSchematizer.interpret(_:with:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return a4;
}

uint64_t SQLiteBaseSchematizer.enum(withName:)(uint64_t a1, uint64_t a2)
{
  return sub_1001272B8(a1, a2, (void (*)(uint64_t, uint64_t))Schematizer.enum(withName:));
}

uint64_t SQLiteBaseSchematizer.messageSchema(withName:)(uint64_t a1, uint64_t a2)
{
  return sub_1001272B8(a1, a2, (void (*)(uint64_t, uint64_t))Schematizer.messageSchema(withName:));
}

uint64_t sub_1001272B8(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t))
{
  return swift_release();
}

uint64_t SQLiteBaseSchematizer.hookPerform(function:block:)(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t type metadata accessor for SQLiteBaseSchematizer()
{
  return self;
}

uint64_t sub_100127370(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = (void *)*a5;
  unint64_t v15 = sub_1000287F0(a2, a3);
  uint64_t v17 = v14[2];
  BOOL v18 = (v16 & 1) == 0;
  Swift::Int v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v20 = v15;
  char v21 = v16;
  sub_10002572C(&qword_100220EE8);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v19)) {
    goto LABEL_5;
  }
  unint64_t v22 = sub_1000287F0(a2, a3);
  if ((v21 & 1) != (v23 & 1))
  {
LABEL_11:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v20 = v22;
LABEL_5:
  os_log_type_t v24 = (void *)*a5;
  if (v21)
  {
    uint64_t v25 = (uint64_t *)(v24[7] + 16 * v20);
    uint64_t result = swift_unknownObjectRelease();
    *uint64_t v25 = a1;
    v25[1] = a7;
  }
  else
  {
    sub_100127528(v20, a2, a3, a1, v24, a6, a7);
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t type metadata accessor for SQLiteBaseSchematizer.Environment()
{
  return self;
}

unint64_t sub_1001274DC()
{
  unint64_t result = qword_100220EE0;
  if (!qword_100220EE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100220EE0);
  }
  return result;
}

unint64_t sub_100127528(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  a5[(result >> 6) + 8] |= 1 << result;
  uint64_t v7 = (void *)(a5[6] + 16 * result);
  *uint64_t v7 = a2;
  v7[1] = a3;
  uint64_t v8 = (void *)(a5[7] + 16 * result);
  *uint64_t v8 = a4;
  v8[1] = a7;
  uint64_t v9 = a5[2];
  BOOL v10 = __OFADD__(v9, 1);
  uint64_t v11 = v9 + 1;
  if (v10) {
    __break(1u);
  }
  else {
    a5[2] = v11;
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for SQLiteSchematizerError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100127640);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SQLiteSchematizerError()
{
  return &type metadata for SQLiteSchematizerError;
}

unint64_t sub_10012767C()
{
  unint64_t result = qword_100220F08;
  if (!qword_100220F08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100220F08);
  }
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> PBFirstOfFunction.perform(with:arguments:)(SQLiter::SQLiteContext with, Swift::OpaquePointer arguments)
{
  unint64_t v3 = *((void *)arguments._rawValue + 2);
  if (!v3)
  {
    __break(1u);
LABEL_83:
    __break(1u);
LABEL_84:
    __break(1u);
LABEL_85:
    __break(1u);
LABEL_86:
    __break(1u);
LABEL_87:
    __break(1u);
    goto LABEL_88;
  }
  uint64_t v4 = SQLiteArgument.getUnsafeData()(*((sqlite3_value **)arguments._rawValue + 4));
  if (v5 >> 60 == 15)
  {
    sub_100122878();
    swift_allocError();
    *(void *)(v6 + 8) = 0;
    *(void *)(v6 + 16) = 0;
    *(void *)uint64_t v6 = 6;
    *(unsigned char *)(v6 + 24) = 4;
    swift_willThrow();
    return;
  }
  if (v3 < 2) {
    goto LABEL_83;
  }
  uint64_t v7 = v4;
  unint64_t v8 = v5;
  uint64_t v53 = v2;
  Swift::String v9 = SQLiteArgument.getStringNonNull()();
  if (v10)
  {
LABEL_9:
    uint64_t v14 = v7;
LABEL_10:
    sub_10000A330(v14, v8);
    return;
  }
  if (v3 < 3) {
    goto LABEL_86;
  }
  LOBYTE(v11) = v9._object;
  Swift::String v12 = SQLiteArgument.getStringNonNull()();
  if (v13)
  {
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  uint64_t v47 = v7;
  Swift::String v48 = v9;
  uint64_t v51 = 46;
  unint64_t v52 = 0xE100000000000000;
  sub_100021100();
  uint64_t v15 = StringProtocol.components<A>(separatedBy:)();
  swift_bridgeObjectRelease();
  uint64_t v16 = *(void *)(v15 + 16);
  if (v16)
  {
    uint64_t v17 = v15 + 32;
    swift_bridgeObjectRetain();
    uint64_t v18 = 0;
    Swift::Int v19 = _swiftEmptyArrayStorage;
    while (1)
    {
      unint64_t v20 = (uint64_t *)(v17 + 16 * v18);
      uint64_t v22 = *v20;
      unint64_t v21 = v20[1];
      uint64_t v23 = HIBYTE(v21) & 0xF;
      uint64_t v24 = v22 & 0xFFFFFFFFFFFFLL;
      if ((v21 & 0x2000000000000000) != 0 ? HIBYTE(v21) & 0xF : v22 & 0xFFFFFFFFFFFFLL) {
        break;
      }
LABEL_53:
      if (++v18 == v16)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_76;
      }
    }
    if ((v21 & 0x1000000000000000) != 0)
    {
      swift_bridgeObjectRetain();
      uint64_t v27 = (uint64_t)sub_10012927C(v22, v21, 10);
      LOBYTE(v11) = v38;
      swift_bridgeObjectRelease();
      goto LABEL_47;
    }
    if ((v21 & 0x2000000000000000) == 0)
    {
      if ((v22 & 0x1000000000000000) != 0) {
        uint64_t v26 = (unsigned __int8 *)((v21 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else {
        uint64_t v26 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
      }
      uint64_t v27 = (uint64_t)sub_100129388(v26, v24, 10);
      LOBYTE(v11) = v28 & 1;
LABEL_47:
      if ((v11 & 1) == 0)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1001288CC(0, v19[2] + 1, 1, (uint64_t)v19, &qword_100221080, (void (*)(void, uint64_t, void *, uint64_t))sub_100128DA8, (void (*)(uint64_t, uint64_t, void *))sub_1001492FC);
          Swift::Int v19 = v39;
        }
        unint64_t v11 = v19[2];
        unint64_t v33 = v19[3];
        if (v11 >= v33 >> 1)
        {
          sub_1001288CC(v33 > 1, v11 + 1, 1, (uint64_t)v19, &qword_100221080, (void (*)(void, uint64_t, void *, uint64_t))sub_100128DA8, (void (*)(uint64_t, uint64_t, void *))sub_1001492FC);
          Swift::Int v19 = v40;
        }
        v19[2] = v11 + 1;
        v19[v11 + 4] = v27;
      }
      goto LABEL_53;
    }
    v48._countAndFlagsBits = v22;
    v48._object = (void *)(v21 & 0xFFFFFFFFFFFFFFLL);
    if (v22 == 43)
    {
      if (!v23) {
        goto LABEL_85;
      }
      if (v23 == 1 || (BYTE1(v22) - 48) > 9u) {
        goto LABEL_44;
      }
      uint64_t v27 = (BYTE1(v22) - 48);
      if (v23 == 2) {
        goto LABEL_46;
      }
      if ((BYTE2(v22) - 48) <= 9u)
      {
        uint64_t v27 = 10 * (BYTE1(v22) - 48) + (BYTE2(v22) - 48);
        if (v23 != 3)
        {
          while (1)
          {
            sub_1000244C8();
            if (!v30 & v29) {
              goto LABEL_44;
            }
            sub_100024C60();
            if (!v30) {
              goto LABEL_44;
            }
            uint64_t v27 = v32 + v31;
            if (__OFADD__(v32, v31)) {
              goto LABEL_44;
            }
            sub_10002DF34();
            if (v30) {
              goto LABEL_47;
            }
          }
        }
        goto LABEL_46;
      }
    }
    else
    {
      if (v22 == 45)
      {
        if (!v23) {
          goto LABEL_84;
        }
        if (v23 == 1 || (BYTE1(v22) - 48) > 9u) {
          goto LABEL_44;
        }
        if (v23 == 2)
        {
          LOBYTE(v11) = 0;
          uint64_t v27 = -(uint64_t)(BYTE1(v22) - 48);
          goto LABEL_47;
        }
        if ((BYTE2(v22) - 48) > 9u) {
          goto LABEL_44;
        }
        uint64_t v27 = -10 * (BYTE1(v22) - 48) - (BYTE2(v22) - 48);
        if (v23 != 3)
        {
          while (1)
          {
            sub_1000244C8();
            if (!v30 & v29) {
              goto LABEL_44;
            }
            sub_100024C60();
            if (!v30) {
              goto LABEL_44;
            }
            uint64_t v27 = v37 - v36;
            if (__OFSUB__(v37, v36)) {
              goto LABEL_44;
            }
            sub_10002DF34();
            if (v30) {
              goto LABEL_47;
            }
          }
        }
LABEL_46:
        LOBYTE(v11) = 0;
        goto LABEL_47;
      }
      if (v23 && (v22 - 48) <= 9u)
      {
        uint64_t v27 = (v22 - 48);
        if (v23 == 1) {
          goto LABEL_46;
        }
        if ((BYTE1(v22) - 48) <= 9u)
        {
          uint64_t v27 = 10 * (v22 - 48) + (BYTE1(v22) - 48);
          if (v23 != 2)
          {
            while (1)
            {
              sub_1000244C8();
              if (!v30 & v29) {
                goto LABEL_44;
              }
              sub_100024C60();
              if (!v30) {
                goto LABEL_44;
              }
              uint64_t v27 = v35 + v34;
              if (__OFADD__(v35, v34)) {
                goto LABEL_44;
              }
              sub_10002DF34();
              if (v30) {
                goto LABEL_47;
              }
            }
          }
          goto LABEL_46;
        }
      }
    }
LABEL_44:
    uint64_t v27 = 0;
    LOBYTE(v11) = 1;
    goto LABEL_47;
  }
  swift_bridgeObjectRelease();
  Swift::Int v19 = _swiftEmptyArrayStorage;
LABEL_76:
  sub_1001228E8();
  SQLiteBaseSchematizer.enum(withName:)(v12._countAndFlagsBits, (uint64_t)v12._object);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v41 = v49;
  uint64_t v42 = v50;
  sub_10001B620(&v48, v49);
  uint64_t v43 = (*(uint64_t (**)(uint64_t, uint64_t))(v42 + 16))(v41, v42);
  sub_10001CA50((uint64_t)&v48);
  uint64_t v44 = sub_100127D1C(v43, v47, v8, (uint64_t)v19);
  char v46 = v45;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v46)
  {
    SQLiteContext.setNull()();
    goto LABEL_81;
  }
  if (v44 < (uint64_t)0xFFFFFFFF80000000) {
    goto LABEL_87;
  }
  if (v44 <= 0x7FFFFFFF)
  {
    SQLiteContext.setInt32(_:)(v44);
LABEL_81:
    uint64_t v14 = v47;
    goto LABEL_10;
  }
LABEL_88:
  __break(1u);
}

uint64_t sub_100127D1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (qword_100220890 != -1) {
    swift_once();
  }
  unint64_t v5 = (void *)qword_100223308;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  [v5 updateData:isa];

  uint64_t v7 = (char *)qword_100223308;
  [(id)qword_100223308 seekToOffset:0];
  uint64_t v8 = *(void *)(a4 + 16);
  uint64_t v9 = Data.count.getter();
  if (v9 < 0)
  {
LABEL_72:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  uint64_t v10 = (char *)v9;
  if (v8)
  {
    uint64_t v11 = 0;
    uint64_t v12 = a4 + 32;
    uint64_t v49 = v12;
    do
    {
      uint64_t v50 = v11;
      uint64_t v13 = *(void *)(v12 + 8 * v11);
      unint64_t v14 = (unint64_t)[v7 position];
      if ((v14 & 0x8000000000000000) == 0 && v14 >= (unint64_t)v10) {
        goto LABEL_42;
      }
      LOBYTE(v15) = 0;
      unsigned int v16 = 0;
      uint64_t v17 = 0;
      while (1)
      {
        while (1)
        {
          unint64_t v18 = *(void *)&v7[OBJC_IVAR___PBDataReader__pos];
          if (v18 == -1 || v18 >= *(void *)&v7[OBJC_IVAR___PBDataReader__length])
          {
            char v20 = 0;
            v7[OBJC_IVAR___PBDataReader__error] = 1;
          }
          else
          {
            unint64_t v19 = v18 + 1;
            char v20 = *(unsigned char *)(*(void *)&v7[OBJC_IVAR___PBDataReader__bytes] + v18);
            *(void *)&v7[OBJC_IVAR___PBDataReader__pos] = v19;
          }
          v17 |= (unint64_t)(v20 & 0x7F) << v15;
          if ((v20 & 0x80) == 0) {
            break;
          }
          LOBYTE(v15) = v15 + 7;
          if (v16++ >= 9)
          {
            unint64_t v21 = 0;
            goto LABEL_20;
          }
        }
        unint64_t v21 = v7[OBJC_IVAR___PBDataReader__error] ? 0 : v17;
LABEL_20:
        uint64_t v15 = v21 & 7;
        if (v13 == (v21 >> 3)) {
          break;
        }
        PBReaderSkipValueWithTag();
        unint64_t v23 = (unint64_t)[v7 position];
        unsigned int v16 = 0;
        uint64_t v15 = 0;
        uint64_t v17 = 0;
        if ((v23 & 0x8000000000000000) == 0)
        {
          uint64_t v17 = 0;
          if (v23 >= (unint64_t)v10) {
            goto LABEL_43;
          }
        }
      }
      if (v15 != 2)
      {
        sub_1001229F8();
        swift_allocError();
        uint64_t v47 = v46;
        _StringGuts.grow(_:)(38);
        swift_bridgeObjectRelease();
        v48._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v48);
        swift_bridgeObjectRelease();
        *(void *)uint64_t v47 = 0xD000000000000024;
        *(void *)(v47 + 8) = 0x80000001001B8A70;
        *(unsigned char *)(v47 + 41) = 12;
        swift_willThrow();
        [(id)qword_100223308 updateData:0];
        return v15;
      }
      char v24 = 0;
      unsigned int v25 = 0;
      uint64_t v26 = 0;
      uint64_t v12 = v49;
      while (1)
      {
        unint64_t v27 = *(void *)&v7[OBJC_IVAR___PBDataReader__pos];
        if (v27 == -1 || v27 >= *(void *)&v7[OBJC_IVAR___PBDataReader__length])
        {
          char v29 = 0;
          v7[OBJC_IVAR___PBDataReader__error] = 1;
        }
        else
        {
          unint64_t v28 = v27 + 1;
          char v29 = *(unsigned char *)(*(void *)&v7[OBJC_IVAR___PBDataReader__bytes] + v27);
          *(void *)&v7[OBJC_IVAR___PBDataReader__pos] = v28;
        }
        v26 |= (unint64_t)(v29 & 0x7F) << v24;
        if ((v29 & 0x80) == 0) {
          break;
        }
        v24 += 7;
        BOOL v44 = v25++ > 8;
        if (v44)
        {
          uint64_t v30 = 0;
          goto LABEL_38;
        }
      }
      if (v7[OBJC_IVAR___PBDataReader__error]) {
        uint64_t v30 = 0;
      }
      else {
        uint64_t v30 = v26;
      }
      if (v30 < 0) {
        goto LABEL_72;
      }
LABEL_38:
      unint64_t v31 = (unint64_t)[v7 position];
      if ((v31 & 0x8000000000000000) != 0) {
        goto LABEL_72;
      }
      uint64_t v11 = v50 + 1;
      uint64_t v10 = (char *)(v31 + v30);
    }
    while (v50 + 1 != v8);
  }
  unint64_t v32 = (unint64_t)[v7 position];
  if ((v32 & 0x8000000000000000) == 0 && v32 >= (unint64_t)v10)
  {
LABEL_42:
    uint64_t v15 = 0;
    goto LABEL_43;
  }
  LOBYTE(v15) = 0;
  unsigned int v34 = 0;
  unint64_t v35 = 0;
  while (1)
  {
    while (1)
    {
      unint64_t v36 = *(void *)&v7[OBJC_IVAR___PBDataReader__pos];
      if (v36 == -1 || v36 >= *(void *)&v7[OBJC_IVAR___PBDataReader__length])
      {
        char v38 = 0;
        v7[OBJC_IVAR___PBDataReader__error] = 1;
      }
      else
      {
        unint64_t v37 = v36 + 1;
        char v38 = *(unsigned char *)(*(void *)&v7[OBJC_IVAR___PBDataReader__bytes] + v36);
        *(void *)&v7[OBJC_IVAR___PBDataReader__pos] = v37;
      }
      v35 |= (unint64_t)(v38 & 0x7F) << v15;
      if ((v38 & 0x80) == 0) {
        break;
      }
      LOBYTE(v15) = v15 + 7;
      BOOL v44 = v34++ > 8;
      if (v44)
      {
        LODWORD(v40) = 0;
        LODWORD(v41) = 0;
        goto LABEL_59;
      }
    }
    if (v7[OBJC_IVAR___PBDataReader__error]) {
      unint64_t v39 = 0;
    }
    else {
      unint64_t v39 = v35;
    }
    unint64_t v40 = v39 >> 3;
    if (((v39 >> 3) & 0x80000000) != 0) {
      __break(1u);
    }
    unint64_t v41 = v39 >> 3;
LABEL_59:
    uint64_t v42 = *(void *)(a1 + 16);
    if (v42) {
      break;
    }
LABEL_67:
    PBReaderSkipValueWithTag();
    unint64_t v45 = (unint64_t)[v7 position];
    unsigned int v34 = 0;
    uint64_t v15 = 0;
    unint64_t v35 = 0;
    if ((v45 & 0x8000000000000000) == 0)
    {
      unint64_t v35 = 0;
      if (v45 >= (unint64_t)v10) {
        goto LABEL_43;
      }
    }
  }
  uint64_t v43 = (_DWORD *)(a1 + 36);
  while (1)
  {
    BOOL v44 = *(v43 - 1) > (int)v40 || *v43 < (int)v40;
    if (!v44) {
      break;
    }
    v43 += 2;
    if (!--v42) {
      goto LABEL_67;
    }
  }
  uint64_t v15 = v41;
LABEL_43:
  [v7 updateData:0];
  return v15;
}

uint64_t sub_1001282A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (qword_100220890 != -1) {
    swift_once();
  }
  unint64_t v5 = (void *)qword_100223308;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  [v5 updateData:isa];

  uint64_t v7 = (unsigned char *)qword_100223308;
  [(id)qword_100223308 seekToOffset:0];
  uint64_t v8 = *(void *)(a4 + 16);
  uint64_t v9 = Data.count.getter();
  if (v9 < 0)
  {
LABEL_65:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  uint64_t v10 = (char *)v9;
  if (v8)
  {
    uint64_t v11 = 0;
    uint64_t v12 = a4 + 32;
    uint64_t v47 = v12;
    do
    {
      uint64_t v48 = v11;
      uint64_t v13 = *(void *)(v12 + 8 * v11);
      unint64_t v14 = (unint64_t)sub_100027684();
      if ((v14 & 0x8000000000000000) == 0 && v14 >= (unint64_t)v10) {
        goto LABEL_40;
      }
      LOBYTE(v15) = 0;
      unsigned int v16 = 0;
      uint64_t v17 = 0;
      while (1)
      {
        do
        {
          unint64_t v18 = *(void *)&v7[OBJC_IVAR___PBDataReader__pos];
          if (v18 == -1 || v18 >= *(void *)&v7[OBJC_IVAR___PBDataReader__length])
          {
            char v20 = 0;
            v7[OBJC_IVAR___PBDataReader__error] = 1;
          }
          else
          {
            unint64_t v19 = v18 + 1;
            char v20 = *(unsigned char *)(*(void *)&v7[OBJC_IVAR___PBDataReader__bytes] + v18);
            *(void *)&v7[OBJC_IVAR___PBDataReader__pos] = v19;
          }
          v17 |= (unint64_t)(v20 & 0x7F) << v15;
          if ((v20 & 0x80) == 0)
          {
            sub_1000214C8();
            goto LABEL_18;
          }
          LOBYTE(v15) = v15 + 7;
          BOOL v22 = v16++ >= 9;
        }
        while (!v22);
        unint64_t v21 = 0;
LABEL_18:
        uint64_t v15 = v21 & 7;
        if (v13 == (v21 >> 3)) {
          break;
        }
        PBReaderSkipValueWithTag();
        unint64_t v23 = (unint64_t)sub_100027684();
        unsigned int v16 = 0;
        uint64_t v15 = 0;
        uint64_t v17 = 0;
        if ((v23 & 0x8000000000000000) == 0)
        {
          uint64_t v17 = 0;
          if (v23 >= (unint64_t)v10) {
            goto LABEL_41;
          }
        }
      }
      if (v15 != 2)
      {
        sub_1001229F8();
        swift_allocError();
        uint64_t v45 = v44;
        _StringGuts.grow(_:)(38);
        swift_bridgeObjectRelease();
        v46._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v46);
        swift_bridgeObjectRelease();
        *(void *)uint64_t v45 = 0xD000000000000024;
        *(void *)(v45 + 8) = 0x80000001001B8A70;
        *(unsigned char *)(v45 + 41) = 12;
        swift_willThrow();
        [(id)qword_100223308 updateData:0];
        return v15;
      }
      char v24 = 0;
      unsigned int v25 = 0;
      uint64_t v26 = 0;
      uint64_t v12 = v47;
      while (1)
      {
        unint64_t v27 = *(void *)&v7[OBJC_IVAR___PBDataReader__pos];
        if (v27 == -1 || v27 >= *(void *)&v7[OBJC_IVAR___PBDataReader__length])
        {
          char v29 = 0;
          v7[OBJC_IVAR___PBDataReader__error] = 1;
        }
        else
        {
          unint64_t v28 = v27 + 1;
          char v29 = *(unsigned char *)(*(void *)&v7[OBJC_IVAR___PBDataReader__bytes] + v27);
          *(void *)&v7[OBJC_IVAR___PBDataReader__pos] = v28;
        }
        v26 |= (unint64_t)(v29 & 0x7F) << v24;
        if ((v29 & 0x80) == 0) {
          break;
        }
        v24 += 7;
        BOOL v42 = v25++ > 8;
        if (v42)
        {
          uint64_t v30 = 0;
          goto LABEL_36;
        }
      }
      if (v7[OBJC_IVAR___PBDataReader__error]) {
        uint64_t v30 = 0;
      }
      else {
        uint64_t v30 = v26;
      }
      if (v30 < 0) {
        goto LABEL_65;
      }
LABEL_36:
      unint64_t v31 = (unint64_t)sub_100027684();
      if ((v31 & 0x8000000000000000) != 0) {
        goto LABEL_65;
      }
      uint64_t v11 = v48 + 1;
      uint64_t v10 = (char *)(v31 + v30);
    }
    while (v48 + 1 != v8);
  }
  unint64_t v32 = (unint64_t)sub_100027684();
  if ((v32 & 0x8000000000000000) == 0 && v32 >= (unint64_t)v10)
  {
LABEL_40:
    uint64_t v15 = 0;
    goto LABEL_41;
  }
  LOBYTE(v15) = 0;
  unsigned int v34 = 0;
  uint64_t v35 = 0;
  while (1)
  {
    do
    {
      unint64_t v36 = *(void *)&v7[OBJC_IVAR___PBDataReader__pos];
      if (v36 == -1 || v36 >= *(void *)&v7[OBJC_IVAR___PBDataReader__length])
      {
        char v38 = 0;
        v7[OBJC_IVAR___PBDataReader__error] = 1;
      }
      else
      {
        unint64_t v37 = v36 + 1;
        char v38 = *(unsigned char *)(*(void *)&v7[OBJC_IVAR___PBDataReader__bytes] + v36);
        *(void *)&v7[OBJC_IVAR___PBDataReader__pos] = v37;
      }
      v35 |= (unint64_t)(v38 & 0x7F) << v15;
      if ((v38 & 0x80) == 0)
      {
        sub_1000214C8();
        goto LABEL_53;
      }
      LOBYTE(v15) = v15 + 7;
      BOOL v22 = v34++ >= 9;
    }
    while (!v22);
    unint64_t v39 = 0;
LABEL_53:
    uint64_t v40 = *(void *)(a1 + 16);
    if (v40) {
      break;
    }
LABEL_61:
    PBReaderSkipValueWithTag();
    unint64_t v43 = (unint64_t)sub_100027684();
    unsigned int v34 = 0;
    uint64_t v15 = 0;
    uint64_t v35 = 0;
    if ((v43 & 0x8000000000000000) == 0)
    {
      uint64_t v35 = 0;
      if (v43 >= (unint64_t)v10) {
        goto LABEL_41;
      }
    }
  }
  uint64_t v15 = (v39 >> 3);
  unint64_t v41 = (uint64_t *)(a1 + 40);
  while (1)
  {
    BOOL v42 = *(v41 - 1) > v15 || *v41 < v15;
    if (!v42) {
      break;
    }
    v41 += 2;
    if (!--v40) {
      goto LABEL_61;
    }
  }
LABEL_41:
  [v7 updateData:0];
  return v15;
}

void sub_1001287E0()
{
  sub_10002CEAC();
  if (v2)
  {
    sub_1000212E4();
    if (v3 != v4)
    {
      sub_10002A3A8();
      if (v3)
      {
        __break(1u);
        return;
      }
      sub_1000268F0();
    }
  }
  sub_10002A3B4();
  if (v1)
  {
    sub_10002572C(&qword_100221070);
    unint64_t v5 = (const void *)swift_allocObject();
    size_t v6 = j__malloc_size(v5);
    sub_10000E0E0(v6);
  }
  if (v0)
  {
    uint64_t v7 = (char *)sub_100027F70();
    sub_10014929C(v7, v8, v9);
    sub_100024944();
  }
  else
  {
    uint64_t v10 = sub_1000242FC();
    sub_100128C88(v10, v11, v12, v13);
  }
}

void sub_100128898(char a1, uint64_t a2, char a3, uint64_t a4)
{
}

void sub_1001288CC(char a1, uint64_t a2, char a3, uint64_t a4, uint64_t *a5, void (*a6)(void, uint64_t, void *, uint64_t), void (*a7)(uint64_t, uint64_t, void *))
{
  if (a3)
  {
    sub_1000212E4();
    if (v12 != v13)
    {
      sub_10002A3A8();
      if (v12)
      {
        __break(1u);
        return;
      }
      sub_1000268F0();
    }
  }
  else
  {
    uint64_t v11 = a2;
  }
  uint64_t v14 = *(void *)(a4 + 16);
  if (v11 <= v14) {
    uint64_t v15 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v15 = v11;
  }
  if (v15)
  {
    sub_10002572C(a5);
    unsigned int v16 = (void *)swift_allocObject();
    size_t v17 = j__malloc_size(v16);
    v16[2] = v14;
    v16[3] = 2 * ((uint64_t)(v17 - 32) / 8);
  }
  else
  {
    unsigned int v16 = _swiftEmptyArrayStorage;
  }
  unint64_t v18 = v16 + 4;
  if (a1)
  {
    a7(a4 + 32, v14, v18);
    sub_100024944();
  }
  else
  {
    a6(0, v14, v18, a4);
  }
}

void sub_1001289B4()
{
  sub_10002CEAC();
  if (v2)
  {
    sub_1000212E4();
    if (v3 != v4)
    {
      sub_10002A3A8();
      if (v3)
      {
        __break(1u);
        return;
      }
      sub_1000268F0();
    }
  }
  sub_10002A3B4();
  if (v1)
  {
    sub_10002572C(&qword_100221048);
    unint64_t v5 = (const void *)swift_allocObject();
    size_t v6 = j__malloc_size(v5);
    sub_100018030(v6 - 32);
  }
  if (v0)
  {
    uint64_t v7 = (char *)sub_100027F70();
    sub_1001493B0(v7, v8, v9);
    sub_100024944();
  }
  else
  {
    uint64_t v10 = sub_1000242FC();
    sub_100128E9C(v10, v11, v12, v13);
  }
}

void sub_100128A68()
{
  sub_10002CEAC();
  if (v2)
  {
    sub_1000212E4();
    if (v3 != v4)
    {
      sub_10002A3A8();
      if (v3)
      {
        __break(1u);
        return;
      }
      sub_1000268F0();
    }
  }
  sub_10002A3B4();
  if (v1)
  {
    sub_10002572C(&qword_100221050);
    unint64_t v5 = (const void *)swift_allocObject();
    size_t v6 = j__malloc_size(v5);
    sub_10000E0E0(v6);
  }
  if (v0)
  {
    uint64_t v7 = sub_100027F70();
    sub_1001493AC(v7);
    sub_100024944();
  }
  else
  {
    uint64_t v8 = sub_1000242FC();
    sub_100128F90(v8, v9, v10, v11);
  }
}

void sub_100128B20()
{
  sub_10002CEAC();
  if (v2)
  {
    sub_1000212E4();
    if (v3 != v4)
    {
      sub_10002A3A8();
      if (v3)
      {
        __break(1u);
        return;
      }
      sub_1000268F0();
    }
  }
  sub_10002A3B4();
  if (v1)
  {
    sub_10002572C(&qword_100221068);
    unint64_t v5 = (const void *)swift_allocObject();
    size_t v6 = j__malloc_size(v5);
    sub_100018030(v6 - 32);
  }
  if (v0)
  {
    uint64_t v7 = (char *)sub_100027F70();
    sub_100149354(v7, v8, v9);
    sub_100024944();
  }
  else
  {
    uint64_t v10 = sub_1000242FC();
    sub_10012908C(v10, v11, v12, v13);
  }
}

void sub_100128BD4()
{
  sub_10002CEAC();
  if (v2)
  {
    sub_1000212E4();
    if (v3 != v4)
    {
      sub_10002A3A8();
      if (v3)
      {
        __break(1u);
        return;
      }
      sub_1000268F0();
    }
  }
  sub_10002A3B4();
  if (v1)
  {
    sub_10002572C(&qword_100221060);
    unint64_t v5 = (const void *)swift_allocObject();
    size_t v6 = j__malloc_size(v5);
    sub_100018030(v6 - 32);
  }
  if (v0)
  {
    uint64_t v7 = (char *)sub_100027F70();
    sub_100149464(v7, v8, v9);
    sub_100024944();
  }
  else
  {
    uint64_t v10 = sub_1000242FC();
    sub_100129184(v10, v11, v12, v13);
  }
}

uint64_t sub_100128C88(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      sub_10002572C(&qword_100221078);
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_100128DA8(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 8 * a1 + 32);
    unint64_t v6 = &__dst[8 * v4];
    if (v5 >= v6 || &v5[8 * v4] <= __dst)
    {
      memcpy(__dst, v5, 8 * v4);
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_100128E9C(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 16 * a1 + 32);
    unint64_t v6 = &__dst[16 * v4];
    if (v5 >= v6 || &v5[16 * v4] <= __dst)
    {
      memcpy(__dst, v5, 16 * v4);
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_100128F90(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 24 * a1 + 32);
    uint64_t v6 = 3 * v4;
    uint64_t v7 = &__dst[8 * v6];
    if (v5 >= v7 || &v5[8 * v6] <= __dst)
    {
      memcpy(__dst, v5, 8 * v6);
      swift_bridgeObjectRelease();
      return v7;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10012908C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100129184(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + (a1 << 6) + 32;
    unint64_t v6 = a3 + (v4 << 6);
    if (v5 >= v6 || v5 + (v4 << 6) <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unsigned __int8 *sub_10012927C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = a1;
  uint64_t v14 = a2;
  swift_bridgeObjectRetain();
  uint64_t v5 = String.init<A>(_:)();
  unint64_t v6 = v4;
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v8 = HIBYTE(v6) & 0xF;
    uint64_t v13 = v5;
    uint64_t v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }
  uint64_t v5 = sub_100109A14();
  unint64_t v10 = v9;
  swift_bridgeObjectRelease();
  unint64_t v6 = v10;
  if ((v10 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v5 & 0x1000000000000000) != 0)
  {
    uint64_t v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v7 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  uint64_t v11 = sub_100129388(v7, v8, a3);
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t type metadata accessor for PBFirstOfFunction()
{
  return self;
}

unsigned __int8 *sub_100129388(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  int v4 = *result;
  if (v4 == 43)
  {
    if (a2 >= 1)
    {
      uint64_t v15 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v16 = a3 + 48;
        unsigned __int8 v17 = a3 + 55;
        unsigned __int8 v18 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v16 = 58;
        }
        else
        {
          unsigned __int8 v18 = 97;
          unsigned __int8 v17 = 65;
        }
        if (result)
        {
          uint64_t v9 = 0;
          unint64_t v19 = result + 1;
          do
          {
            unsigned int v20 = *v19;
            if (v20 < 0x30 || v20 >= v16)
            {
              if (v20 < 0x41 || v20 >= v17)
              {
                uint64_t v13 = 0;
                if (v20 < 0x61 || v20 >= v18) {
                  return (unsigned __int8 *)v13;
                }
                char v21 = -87;
              }
              else
              {
                char v21 = -55;
              }
            }
            else
            {
              char v21 = -48;
            }
            uint64_t v22 = v9 * a3;
            if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
              return 0;
            }
            uint64_t v9 = v22 + (v20 + v21);
            if (__OFADD__(v22, (v20 + v21))) {
              return 0;
            }
            ++v19;
            --v15;
          }
          while (v15);
          return (unsigned __int8 *)v9;
        }
        return 0;
      }
      return 0;
    }
  }
  else
  {
    if (v4 != 45)
    {
      if (a2)
      {
        unsigned __int8 v23 = a3 + 48;
        unsigned __int8 v24 = a3 + 55;
        unsigned __int8 v25 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v23 = 58;
        }
        else
        {
          unsigned __int8 v25 = 97;
          unsigned __int8 v24 = 65;
        }
        if (result)
        {
          uint64_t v26 = 0;
          do
          {
            unsigned int v27 = *result;
            if (v27 < 0x30 || v27 >= v23)
            {
              if (v27 < 0x41 || v27 >= v24)
              {
                uint64_t v13 = 0;
                if (v27 < 0x61 || v27 >= v25) {
                  return (unsigned __int8 *)v13;
                }
                char v28 = -87;
              }
              else
              {
                char v28 = -55;
              }
            }
            else
            {
              char v28 = -48;
            }
            uint64_t v29 = v26 * a3;
            if ((unsigned __int128)(v26 * (__int128)a3) >> 64 != (v26 * a3) >> 63) {
              return 0;
            }
            uint64_t v26 = v29 + (v27 + v28);
            if (__OFADD__(v29, (v27 + v28))) {
              return 0;
            }
            ++result;
            --v3;
          }
          while (v3);
          return (unsigned __int8 *)(v29 + (v27 + v28));
        }
        return 0;
      }
      return 0;
    }
    if (a2 >= 1)
    {
      uint64_t v5 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v6 = a3 + 48;
        unsigned __int8 v7 = a3 + 55;
        unsigned __int8 v8 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v6 = 58;
        }
        else
        {
          unsigned __int8 v8 = 97;
          unsigned __int8 v7 = 65;
        }
        if (result)
        {
          uint64_t v9 = 0;
          for (i = result + 1; ; ++i)
          {
            unsigned int v11 = *i;
            if (v11 < 0x30 || v11 >= v6)
            {
              if (v11 < 0x41 || v11 >= v7)
              {
                uint64_t v13 = 0;
                if (v11 < 0x61 || v11 >= v8) {
                  return (unsigned __int8 *)v13;
                }
                char v12 = -87;
              }
              else
              {
                char v12 = -55;
              }
            }
            else
            {
              char v12 = -48;
            }
            uint64_t v14 = v9 * a3;
            if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
              return 0;
            }
            uint64_t v9 = v14 - (v11 + v12);
            if (__OFSUB__(v14, (v11 + v12))) {
              return 0;
            }
            if (!--v5) {
              return (unsigned __int8 *)v9;
            }
          }
        }
        return 0;
      }
      return 0;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> PGetTimeWindowEndFunction.perform(with:arguments:)(SQLiter::SQLiteContext with, Swift::OpaquePointer arguments)
{
  uint64_t v3 = sub_1001228E8();
  if (!v2)
  {
    uint64_t v4 = v3;
    swift_beginAccess();
    Swift::Double v5 = *(double *)(v4 + 40);
    swift_release();
    SQLiteContext.setDouble(_:)(v5);
  }
}

uint64_t type metadata accessor for PGetTimeWindowEndFunction()
{
  return self;
}

ValueMetadata *type metadata accessor for AnyKey()
{
  return &type metadata for AnyKey;
}

uint64_t sub_1001296B0()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

void sub_1001296E0(void *a1@<X8>)
{
  _CPStartNetworkSearchFeedback.redactUnused()();
  *a1 = v2;
  a1[1] = v3;
}

void sub_100129708(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t sub_100129710(uint64_t a1)
{
  unint64_t v2 = sub_100129828();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10012974C(uint64_t a1)
{
  unint64_t v2 = sub_100129828();

  return CodingKey.debugDescription.getter(a1, v2);
}

unint64_t sub_10012978C()
{
  unint64_t result = qword_1002211C0;
  if (!qword_1002211C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002211C0);
  }
  return result;
}

unint64_t sub_1001297DC()
{
  unint64_t result = qword_1002211C8;
  if (!qword_1002211C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002211C8);
  }
  return result;
}

unint64_t sub_100129828()
{
  unint64_t result = qword_1002211D0;
  if (!qword_1002211D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002211D0);
  }
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> PMessageNameFunction.perform(with:arguments:)(SQLiter::SQLiteContext with, Swift::OpaquePointer arguments)
{
  if (*((void *)arguments._rawValue + 2))
  {
    uint64_t v4 = (sqlite3_value *)*((void *)arguments._rawValue + 4);
    if (SQLiteArgument.isNull.getter(v4))
    {
      SQLiteContext.setNull()();
    }
    else
    {
      sub_1001228E8();
      if (!v2)
      {
        SQLiteBaseSchematizer.getSQLiteBridge()();
        uint64_t v6 = v5;
        swift_release();
        uint64_t ObjectType = swift_getObjectType();
        (*(void (**)(sqlite3_value *, uint64_t, uint64_t))(v6 + 24))(v4, ObjectType, v6);
        uint64_t v9 = v8;
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        uint64_t v10 = swift_getObjectType();
        (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v9 + 16))(v16, v10, v9);
        swift_unknownObjectRelease();
        uint64_t v12 = v17;
        uint64_t v11 = v18;
        sub_10001B620(v16, v17);
        uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)(v11 + 8) + 8))(v12);
        uint64_t v15 = v14;
        sub_10001CA50((uint64_t)v16);
        SQLiteContext.setString(_:destructor:)(v13, v15, (void (__cdecl **)(void *))1, (sqlite3_context *)with.context._rawValue);
        swift_bridgeObjectRelease();
      }
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t type metadata accessor for PMessageNameFunction()
{
  return self;
}

uint64_t static ValueType.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  sub_100124DBC(a1, (uint64_t)&v26);
  sub_100124DBC(a2, (uint64_t)&v28);
  if (!v27)
  {
    sub_100124DBC((uint64_t)&v26, (uint64_t)v25);
    if (!v31) {
      goto LABEL_4;
    }
    goto LABEL_10;
  }
  if (v27 != 1)
  {
    sub_10002A6AC();
    if (v17)
    {
      uint64_t v18 = v16 | v14 | v15;
      if (v13 != 1 || v18)
      {
        if (v13 != 2 || v18)
        {
          if (v13 != 3 || v18)
          {
            if (v13 != 4 || v18)
            {
              if (v13 != 5 || v18)
              {
                if (v13 != 6 || v18)
                {
                  if (v13 != 7 || v18)
                  {
                    sub_10002C4F4();
                    if (!v11 || v28 != 8) {
                      goto LABEL_11;
                    }
                  }
                  else
                  {
                    sub_10002C4F4();
                    if (!v11 || v28 != 7) {
                      goto LABEL_11;
                    }
                  }
                }
                else
                {
                  sub_10002C4F4();
                  if (!v11 || v28 != 6) {
                    goto LABEL_11;
                  }
                }
              }
              else
              {
                sub_10002C4F4();
                if (!v11 || v28 != 5) {
                  goto LABEL_11;
                }
              }
            }
            else
            {
              sub_10002C4F4();
              if (!v11 || v28 != 4) {
                goto LABEL_11;
              }
            }
          }
          else
          {
            sub_10002C4F4();
            if (!v11 || v28 != 3) {
              goto LABEL_11;
            }
          }
        }
        else
        {
          sub_10002C4F4();
          if (!v11 || v28 != 2) {
            goto LABEL_11;
          }
        }
      }
      else
      {
        sub_10002C4F4();
        if (!v11 || v28 != 1) {
          goto LABEL_11;
        }
      }
      int8x16_t v20 = vorrq_s8(v29, v30);
      if (vorr_s8(*(int8x8_t *)v20.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v20, v20, 8uLL)))
      {
LABEL_11:
        sub_100129D08((uint64_t)&v26);
        char v12 = 0;
        return v12 & 1;
      }
    }
    else
    {
      sub_10002C4F4();
      if (!v11) {
        goto LABEL_11;
      }
      int8x16_t v19 = vorrq_s8(v29, v30);
      if (*(void *)&vorr_s8(*(int8x8_t *)v19.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL)) | v28) {
        goto LABEL_11;
      }
    }
    sub_100124E18((uint64_t)&v26);
    char v12 = 1;
    return v12 & 1;
  }
  sub_100124DBC((uint64_t)&v26, (uint64_t)v25);
  if (v31 != 1)
  {
LABEL_10:
    sub_10001CA50((uint64_t)v25);
    goto LABEL_11;
  }
LABEL_4:
  sub_10001C1AC(v25, (uint64_t)v24);
  sub_10001C1AC((long long *)&v28, (uint64_t)v22);
  uint64_t v3 = sub_100026C84(v24);
  uint64_t v5 = v4(v3);
  uint64_t v7 = v6;
  uint64_t v8 = v23;
  sub_10001B620(v22, v23);
  sub_100025C7C();
  BOOL v11 = v5 == v9(v8) && v7 == v10;
  if (v11) {
    char v12 = 1;
  }
  else {
    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001CA50((uint64_t)v22);
  sub_10001CA50((uint64_t)v24);
  sub_100124E18((uint64_t)&v26);
  return v12 & 1;
}

uint64_t sub_100129D08(uint64_t a1)
{
  uint64_t v2 = sub_10002572C(&qword_100221310);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t ValueType.description.getter()
{
  sub_100124DBC(v0, (uint64_t)&v24);
  if (!v25)
  {
    sub_10001C1AC(&v24, (uint64_t)v22);
    _StringGuts.grow(_:)(38);
    uint64_t v6 = v23;
    sub_10001B620(v22, v23);
    sub_100025C7C();
    uint64_t v8 = v7(v6);
    swift_bridgeObjectRelease();
    uint64_t v21 = v8;
    v9._countAndFlagsBits = 0xD000000000000021;
    v9._object = (void *)0x80000001001B8B20;
    String.append(_:)(v9);
    uint64_t v10 = sub_100026C84(v22);
    v12._countAndFlagsBits = v11(v10);
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    uint64_t v4 = 41;
    unint64_t v5 = 0xE100000000000000;
    goto LABEL_5;
  }
  if (v25 == 1)
  {
    sub_10001C1AC(&v24, (uint64_t)v22);
    _StringGuts.grow(_:)(20);
    swift_bridgeObjectRelease();
    uint64_t v21 = 0x206567617373656DLL;
    uint64_t v1 = sub_100026C84(v22);
    v3._countAndFlagsBits = v2(v1);
    String.append(_:)(v3);
    swift_bridgeObjectRelease();
    uint64_t v4 = 0x616D6568637320;
    unint64_t v5 = 0xE700000000000000;
LABEL_5:
    String.append(_:)(*(Swift::String *)&v4);
    unint64_t v13 = v21;
    sub_10001CA50((uint64_t)v22);
    return v13;
  }
  unint64_t v13 = 0xD000000000000011;
  sub_10002A6AC();
  if (v18)
  {
    uint64_t v19 = v17 | v15 | v16;
    if (v14 != 1 || v19)
    {
      if (v14 != 2 || v19)
      {
        if (v14 != 3 || v19)
        {
          if (v14 != 4 || v19)
          {
            if (v14 != 5 || v19)
            {
              if (v14 != 6 || v19)
              {
                if (v14 == 7 && v19 == 0) {
                  return 0x7274732074786574;
                }
                else {
                  return 0x64207972616E6962;
                }
              }
              else
              {
                return 0x6E61656C6F6F62;
              }
            }
            else
            {
              return 0xD000000000000015;
            }
          }
          else
          {
            return 0x676E6974616F6C66;
          }
        }
        else
        {
          return 0xD000000000000013;
        }
      }
    }
    else
    {
      return 0xD000000000000013;
    }
  }
  return v13;
}

uint64_t destroy for ValueType(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 40);
  if (v1 >= 2) {
    unsigned int v1 = *(_DWORD *)a1 + 2;
  }
  if (v1 <= 1) {
    return sub_10001CA50(a1);
  }
  return a1;
}

uint64_t initializeWithCopy for ValueType(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(unsigned __int8 *)(a2 + 40);
  if (v3 >= 2) {
    unsigned int v3 = *(_DWORD *)a2 + 2;
  }
  if (v3 == 1)
  {
    long long v5 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v5;
    (**(void (***)(uint64_t))(v5 - 8))(a1);
    *(unsigned char *)(a1 + 40) = 1;
  }
  else if (v3)
  {
    long long v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v4;
    (**(void (***)(uint64_t))(v4 - 8))(a1);
    *(unsigned char *)(a1 + 40) = 0;
  }
  return a1;
}

uint64_t assignWithCopy for ValueType(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 <= 1) {
      sub_10001CA50(a1);
    }
    unsigned int v5 = *((unsigned __int8 *)a2 + 40);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      uint64_t v7 = *((void *)a2 + 3);
      *(void *)(a1 + 24) = v7;
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      (**(void (***)(uint64_t, long long *))(v7 - 8))(a1, a2);
      *(unsigned char *)(a1 + 40) = 1;
    }
    else if (v5)
    {
      long long v8 = *a2;
      long long v9 = a2[1];
      *(_OWORD *)(a1 + 25) = *(long long *)((char *)a2 + 25);
      *(_OWORD *)a1 = v8;
      *(_OWORD *)(a1 + 16) = v9;
    }
    else
    {
      uint64_t v6 = *((void *)a2 + 3);
      *(void *)(a1 + 24) = v6;
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      (**(void (***)(uint64_t, long long *))(v6 - 8))(a1, a2);
      *(unsigned char *)(a1 + 40) = 0;
    }
  }
  return a1;
}

__n128 initializeWithTake for ValueType(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for ValueType(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 <= 1) {
      sub_10001CA50(a1);
    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      long long v7 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v7;
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(unsigned char *)(a1 + 40) = 1;
    }
    else
    {
      long long v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v6;
      if (v5)
      {
        *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
      }
      else
      {
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        *(unsigned char *)(a1 + 40) = 0;
      }
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for ValueType(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 41)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 >= 3) {
    return (v3 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for ValueType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 25) = 0u;
    *(_OWORD *)__n128 result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)__n128 result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 41) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 40) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_10012A3C0(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 *)(a1 + 40);
  if (result >= 2) {
    return (*(_DWORD *)a1 + 2);
  }
  return result;
}

uint64_t sub_10012A3DC(uint64_t result, unsigned int a2)
{
  if (a2 > 1)
  {
    *(void *)(result + 32) = 0;
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)uint64_t result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(unsigned char *)(result + 40) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ValueType()
{
  return &type metadata for ValueType;
}

void destroy for AnyOption(uint64_t a1)
{
}

uint64_t _s11Schematizer9AnyOptionOwCP_0(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_100121AE0(*(id *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for AnyOption(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_100121AE0(*(id *)a2, v4, v5);
  long long v6 = *(void **)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  char v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  sub_100121B34(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for AnyOption(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  sub_100121B34(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for AnyOption(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFD && *(unsigned char *)(a1 + 17))
    {
      int v2 = *(_DWORD *)a1 + 252;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
      if (v3 <= 3) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AnyOption(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 253;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_10012A598(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for AnyOption()
{
  return &type metadata for AnyOption;
}

void *sub_10012A5B0@<X0>(void *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  switch(a3)
  {
    case 1:
      a4[3] = (uint64_t)&type metadata for String;
      *a4 = (uint64_t)a1;
      a4[1] = a2;
      uint64_t result = (void *)swift_bridgeObjectRetain();
      break;
    case 2:
      int64_t v6 = a1[2];
      uint64_t v7 = _swiftEmptyArrayStorage;
      if (v6)
      {
        uint64_t v22 = _swiftEmptyArrayStorage;
        sub_10014A088(0, v6, 0);
        uint64_t v7 = _swiftEmptyArrayStorage;
        char v8 = a1 + 6;
        do
        {
          long long v9 = (void *)sub_100025CA4();
          sub_100121AE0(v9, v10, v11);
          uint64_t v12 = sub_100025CA4();
          sub_10012A5B0(v12);
          unint64_t v13 = (void *)sub_100025CA4();
          sub_100121B34(v13, v14, v15);
          uint64_t v22 = v7;
          unint64_t v17 = v7[2];
          unint64_t v16 = v7[3];
          if (v17 >= v16 >> 1)
          {
            sub_10014A088((char *)(v16 > 1), v17 + 1, 1);
            uint64_t v7 = v22;
          }
          v8 += 3;
          v7[2] = v17 + 1;
          sub_10003CA28(&v21, &v7[4 * v17 + 4]);
          --v6;
        }
        while (v6);
      }
      uint64_t result = (void *)sub_10002572C(&qword_100219EE0);
      a4[3] = (uint64_t)result;
      *a4 = (uint64_t)v7;
      break;
    case 3:
      uint64_t v18 = sub_10012B37C();
      uint64_t result = (void *)sub_10002572C(qword_1002199B8);
      a4[3] = (uint64_t)result;
      *a4 = v18;
      break;
    default:
      a4[3] = sub_100023FA0(0, &qword_10021B9B0);
      *a4 = (uint64_t)a1;
      uint64_t result = a1;
      break;
  }
  return result;
}

uint64_t sub_10012A7A4(uint64_t a1)
{
  int v2 = (void *)a1;
  sub_10001C348(a1, (uint64_t)v24);
  sub_100023FA0(0, &qword_10021B9B0);
  if (sub_10002C500() || sub_10002C500())
  {
    sub_10001CA50((uint64_t)v2);
  }
  else
  {
    sub_10002572C(&qword_100219EE0);
    if (swift_dynamicCast())
    {
      uint64_t v3 = v25;
      int64_t v4 = *(void *)(v25 + 16);
      if (v4)
      {
        uint64_t v20 = (uint64_t)v2;
        uint64_t v23 = _swiftEmptyArrayStorage;
        sub_10014A0A8(0, v4, 0);
        uint64_t v5 = v3 + 32;
        while (1)
        {
          sub_10001C348(v5, (uint64_t)v22);
          sub_10001C348((uint64_t)v22, (uint64_t)v21);
          uint64_t v6 = sub_10012A7A4(v21);
          uint64_t v8 = v7;
          char v10 = v9;
          sub_10001CA50((uint64_t)v22);
          if (v1) {
            break;
          }
          char v11 = v23;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_10014A0A8(0, v11[2] + 1, 1);
            char v11 = v23;
          }
          unint64_t v13 = v11[2];
          unint64_t v12 = v11[3];
          if (v13 >= v12 >> 1)
          {
            sub_10014A0A8((void *)(v12 > 1), v13 + 1, 1);
            char v11 = v23;
          }
          v11[2] = v13 + 1;
          uint64_t v14 = &v11[3 * v13];
          v14[4] = v6;
          v14[5] = v8;
          *((unsigned char *)v14 + 48) = v10;
          v5 += 32;
          if (!--v4)
          {
            int v2 = (void *)v20;
            goto LABEL_18;
          }
        }
        swift_release();
        sub_10001CA50(v20);
        swift_bridgeObjectRelease();
      }
      else
      {
LABEL_18:
        sub_10001CA50((uint64_t)v2);
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      sub_10002572C(qword_1002199B8);
      if (sub_10002C500())
      {
        sub_10012B5BC(v22[0]);
        sub_10001CA50((uint64_t)v2);
        swift_bridgeObjectRelease();
      }
      else
      {
        sub_1001229F8();
        swift_allocError();
        uint64_t v16 = v15;
        _StringGuts.grow(_:)(16);
        swift_bridgeObjectRelease();
        strcpy((char *)v22, "invalid type: ");
        HIBYTE(v22[1]) = -18;
        sub_10001B620(v2, v2[3]);
        v21[0] = swift_getDynamicType();
        sub_10002572C(&qword_100219EF8);
        v17._countAndFlagsBits = String.init<A>(describing:)();
        String.append(_:)(v17);
        swift_bridgeObjectRelease();
        uint64_t v18 = v22[1];
        *(void *)uint64_t v16 = v22[0];
        *(void *)(v16 + 8) = v18;
        *(unsigned char *)(v16 + 41) = 3;
        swift_willThrow();
        sub_10001CA50((uint64_t)v2);
      }
    }
  }
  sub_10001CA50((uint64_t)v24);
  return sub_100025CA4();
}

id sub_10012AAFC(void *a1)
{
  sub_10001B620(a1, a1[3]);
  sub_100024C78();
  dispatch thunk of Decoder.singleValueContainer()();
  if (v2)
  {
    sub_10001CA50((uint64_t)a1);
  }
  else
  {
    sub_10001B620(v5, v5[3]);
    sub_100024C78();
    id v1 = [objc_allocWithZone((Class)NSNumber) initWithLongLong:dispatch thunk of SingleValueDecodingContainer.decode(_:)()];
    sub_10001CA50((uint64_t)v5);
    sub_10001CA50((uint64_t)a1);
  }
  return v1;
}

void sub_10012ACB8(uint64_t a1, void *a2, uint64_t a3, char a4)
{
  switch(a4)
  {
    case 1:
      String.encode(to:)();
      break;
    case 2:
      sub_10012B134();
      Array<A>.encode(to:)();
      break;
    case 3:
      sub_10012B134();
      Dictionary<>.encode(to:)();
      break;
    default:
      [a2 longLongValue];
      Int64.encode(to:)();
      sub_100121B34(a2, a3, 0);
      break;
  }
}

uint64_t sub_10012ADD4(void *a1, uint64_t a2, char a3, void *a4, uint64_t a5, char a6)
{
  switch(a3)
  {
    case 1:
      if (a6 != 1) {
        goto LABEL_20;
      }
      if (a1 == a4 && a2 == a5)
      {
        uint64_t result = 1;
      }
      else
      {
        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      }
      break;
    case 2:
      if (a6 != 2) {
        goto LABEL_20;
      }
      uint64_t result = sub_10012B180((uint64_t)a1, (uint64_t)a4);
      break;
    case 3:
      if (a6 != 3) {
        goto LABEL_20;
      }
      uint64_t result = sub_10011F89C((uint64_t)a1, (uint64_t)a4);
      break;
    default:
      if (a6)
      {
LABEL_20:
        uint64_t result = 0;
      }
      else
      {
        sub_100023FA0(0, (unint64_t *)&qword_10021EF70);
        sub_100121AE0(a1, a2, 0);
        sub_100121AE0(a4, a5, 0);
        char v10 = static NSObject.== infix(_:_:)();
        sub_100121B34(a4, a5, 0);
        sub_100121B34(a1, a2, 0);
        uint64_t result = v10 & 1;
      }
      break;
  }
  return result;
}

id sub_10012AF8C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id result = sub_10012AAFC(a1);
  if (!v2)
  {
    *(void *)a2 = result;
    *(void *)(a2 + 8) = v5;
    *(unsigned char *)(a2 + 16) = v6;
  }
  return result;
}

void sub_10012AFBC(uint64_t a1)
{
  sub_10012ACB8(a1, *(void **)v1, *(void *)(v1 + 8), *(unsigned char *)(v1 + 16));
}

uint64_t sub_10012AFDC(uint64_t a1, uint64_t a2)
{
  return sub_10012ADD4(*(void **)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16), *(void **)a2, *(void *)(a2 + 8), *(unsigned char *)(a2 + 16));
}

unint64_t sub_10012AFF8()
{
  unint64_t result = qword_100221320;
  if (!qword_100221320)
  {
    sub_1000371D4(&qword_100221318);
    sub_10012B06C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100221320);
  }
  return result;
}

unint64_t sub_10012B06C()
{
  unint64_t result = qword_100221328;
  if (!qword_100221328)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100221328);
  }
  return result;
}

unint64_t sub_10012B0B8()
{
  unint64_t result = qword_100221338;
  if (!qword_100221338)
  {
    sub_1000371D4(&qword_100221330);
    sub_10012B06C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100221338);
  }
  return result;
}

unint64_t sub_10012B134()
{
  unint64_t result = qword_100221340;
  if (!qword_100221340)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100221340);
  }
  return result;
}

uint64_t sub_10012B180(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3 == *(void *)(a2 + 16))
  {
    if (!v3 || a1 == a2) {
      return 1;
    }
    int64_t v4 = (unsigned __int8 *)(a2 + 48);
    uint64_t v5 = (unsigned __int8 *)(a1 + 48);
    while (1)
    {
      uint64_t v7 = (void *)*((void *)v5 - 2);
      uint64_t v6 = *((void *)v5 - 1);
      char v9 = (void *)*((void *)v4 - 2);
      uint64_t v8 = *((void *)v4 - 1);
      int v11 = *v4;
      v4 += 24;
      int v10 = v11;
      int v12 = *v5;
      v5 += 24;
      switch(v12)
      {
        case 1:
          if (v10 != 1) {
            return 0;
          }
          BOOL v18 = v7 == v9 && v6 == v8;
          if (!v18 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
            return 0;
          }
          goto LABEL_20;
        case 2:
          if (v10 != 2) {
            return 0;
          }
          sub_100121AE0(v9, v8, 2);
          sub_100121AE0(v7, v6, 2);
          sub_10012B180(v7, v9);
          uint64_t v19 = (void *)sub_10002A6C0();
          sub_100121B34(v19, v20, 2);
          uint64_t v15 = v7;
          uint64_t v16 = v6;
          char v17 = 2;
          break;
        case 3:
          if (v10 != 3) {
            return 0;
          }
          sub_100121AE0(v9, v8, 3);
          sub_100121AE0(v7, v6, 3);
          sub_10011F89C(v7, v9);
          long long v21 = (void *)sub_10002A6C0();
          sub_100121B34(v21, v22, 3);
          uint64_t v15 = v7;
          uint64_t v16 = v6;
          char v17 = 3;
          break;
        default:
          if (v10) {
            return 0;
          }
          char v2 = sub_100023FA0(0, (unint64_t *)&qword_10021EF70);
          sub_100121AE0(v9, v8, 0);
          sub_100121AE0(v7, v6, 0);
          static NSObject.== infix(_:_:)();
          unint64_t v13 = (void *)sub_10002A6C0();
          sub_100121B34(v13, v14, 0);
          uint64_t v15 = v7;
          uint64_t v16 = v6;
          char v17 = 0;
          break;
      }
      sub_100121B34(v15, v16, v17);
      if ((v2 & 1) == 0) {
        break;
      }
LABEL_20:
      if (!--v3) {
        return 1;
      }
    }
  }
  return 0;
}

uint64_t sub_10012B37C(uint64_t a1)
{
  sub_10002572C(&qword_10021B160);
  uint64_t result = static _DictionaryStorage.copy(original:)();
  uint64_t v3 = (void *)result;
  int64_t v4 = 0;
  uint64_t v31 = a1;
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v6 = a1 + 64;
  uint64_t v5 = v7;
  uint64_t v8 = 1 << *(unsigned char *)(v6 - 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & v5;
  uint64_t v27 = v6;
  int64_t v28 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v29 = result + 64;
  if ((v9 & v5) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v11 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (unint64_t i = v11 | (v4 << 6); ; unint64_t i = __clz(__rbit64(v14)) + (v4 << 6))
  {
    uint64_t v16 = (uint64_t *)(*(void *)(v31 + 48) + 16 * i);
    uint64_t v18 = *v16;
    uint64_t v17 = v16[1];
    uint64_t v19 = *(void *)(v31 + 56) + 24 * i;
    uint64_t v20 = *(void **)v19;
    uint64_t v21 = *(void *)(v19 + 8);
    char v22 = *(unsigned char *)(v19 + 16);
    swift_bridgeObjectRetain();
    sub_100121AE0(v20, v21, v22);
    sub_10012A5B0(v20, v21, v22, v30);
    sub_100121B34(v20, v21, v22);
    *(void *)(v29 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    uint64_t v23 = (void *)(v3[6] + 16 * i);
    *uint64_t v23 = v18;
    v23[1] = v17;
    uint64_t result = (uint64_t)sub_10003CA28(v30, (_OWORD *)(v3[7] + 32 * i));
    uint64_t v24 = v3[2];
    BOOL v25 = __OFADD__(v24, 1);
    uint64_t v26 = v24 + 1;
    if (v25)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v3[2] = v26;
    if (v10) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v13 = v4 + 1;
    if (__OFADD__(v4, 1)) {
      goto LABEL_24;
    }
    if (v13 >= v28) {
      return (uint64_t)v3;
    }
    unint64_t v14 = *(void *)(v27 + 8 * v13);
    ++v4;
    if (!v14)
    {
      int64_t v4 = v13 + 1;
      if (v13 + 1 >= v28) {
        return (uint64_t)v3;
      }
      unint64_t v14 = *(void *)(v27 + 8 * v4);
      if (!v14)
      {
        int64_t v4 = v13 + 2;
        if (v13 + 2 >= v28) {
          return (uint64_t)v3;
        }
        unint64_t v14 = *(void *)(v27 + 8 * v4);
        if (!v14) {
          break;
        }
      }
    }
LABEL_18:
    unint64_t v10 = (v14 - 1) & v14;
  }
  int64_t v15 = v13 + 3;
  if (v15 >= v28) {
    return (uint64_t)v3;
  }
  unint64_t v14 = *(void *)(v27 + 8 * v15);
  if (v14)
  {
    int64_t v4 = v15;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v4 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v4 >= v28) {
      return (uint64_t)v3;
    }
    unint64_t v14 = *(void *)(v27 + 8 * v4);
    ++v15;
    if (v14) {
      goto LABEL_18;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_10012B5BC(uint64_t a1)
{
  sub_10002572C(&qword_100221348);
  uint64_t result = static _DictionaryStorage.copy(original:)();
  int64_t v4 = 0;
  uint64_t v31 = a1;
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v28 = a1 + 64;
  uint64_t v6 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & v5;
  int64_t v29 = (unint64_t)(v6 + 63) >> 6;
  uint64_t v30 = result + 64;
  uint64_t v34 = result;
  if ((v7 & v5) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v9 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (unint64_t i = v9 | (v4 << 6); ; unint64_t i = __clz(__rbit64(v12)) + (v4 << 6))
  {
    unint64_t v14 = (uint64_t *)(*(void *)(v31 + 48) + 16 * i);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    sub_10001C348(*(void *)(v31 + 56) + 32 * i, (uint64_t)v33);
    sub_10001C348((uint64_t)v33, (uint64_t)v32);
    swift_bridgeObjectRetain();
    uint64_t v17 = sub_10012A7A4((uint64_t)v32);
    if (v1)
    {
      swift_bridgeObjectRelease();
      uint64_t v27 = v34;
      swift_release();
      sub_10001CA50((uint64_t)v33);
      return v27;
    }
    uint64_t v20 = v17;
    uint64_t v21 = v18;
    char v22 = v19;
    sub_10001CA50((uint64_t)v33);
    *(void *)(v30 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    uint64_t result = v34;
    uint64_t v23 = (void *)(*(void *)(v34 + 48) + 16 * i);
    *uint64_t v23 = v15;
    v23[1] = v16;
    uint64_t v24 = *(void *)(result + 56) + 24 * i;
    *(void *)uint64_t v24 = v20;
    *(void *)(v24 + 8) = v21;
    *(unsigned char *)(v24 + 16) = v22;
    uint64_t v25 = *(void *)(result + 16);
    BOOL v11 = __OFADD__(v25, 1);
    uint64_t v26 = v25 + 1;
    if (v11)
    {
      __break(1u);
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    *(void *)(result + 16) = v26;
    if (v8) {
      goto LABEL_4;
    }
LABEL_5:
    BOOL v11 = __OFADD__(v4++, 1);
    if (v11) {
      goto LABEL_27;
    }
    if (v4 >= v29) {
      return result;
    }
    unint64_t v12 = *(void *)(v28 + 8 * v4);
    if (!v12) {
      break;
    }
LABEL_15:
    unint64_t v8 = (v12 - 1) & v12;
  }
  int64_t v13 = v4 + 1;
  if (v4 + 1 >= v29) {
    return result;
  }
  unint64_t v12 = *(void *)(v28 + 8 * v13);
  if (v12) {
    goto LABEL_14;
  }
  int64_t v13 = v4 + 2;
  if (v4 + 2 >= v29) {
    return result;
  }
  unint64_t v12 = *(void *)(v28 + 8 * v13);
  if (v12) {
    goto LABEL_14;
  }
  int64_t v13 = v4 + 3;
  if (v4 + 3 >= v29) {
    return result;
  }
  unint64_t v12 = *(void *)(v28 + 8 * v13);
  if (v12)
  {
LABEL_14:
    int64_t v4 = v13;
    goto LABEL_15;
  }
  while (1)
  {
    int64_t v4 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v4 >= v29) {
      return result;
    }
    unint64_t v12 = *(void *)(v28 + 8 * v4);
    ++v13;
    if (v12) {
      goto LABEL_15;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_10012B818(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void), void (*a5)(void *, uint64_t, uint64_t), uint64_t *a6, void (*a7)(void *__return_ptr, uint64_t, uint64_t))
{
  if (*(void *)(a1 + 24))
  {
    a4();
    a5(v13, a2, a3);
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_100019938(a1, a6);
    a7(v13, a2, a3);
    swift_bridgeObjectRelease();
    return sub_100019938((uint64_t)v13, a6);
  }
}

uint64_t sub_10012B8C4(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (uint64_t)_swiftEmptyArrayStorage;
  }
  sub_10014A068(0, v1, 0);
  uint64_t result = sub_10012D56C(a1);
  if ((result & 0x8000000000000000) == 0)
  {
    unint64_t v5 = result;
    if (result < 1 << *(unsigned char *)(a1 + 32))
    {
      uint64_t v6 = a1 + 64;
      while ((*(void *)(v6 + 8 * (v5 >> 6)) & (1 << v5)) != 0)
      {
        if (v4 != *(_DWORD *)(a1 + 36)) {
          goto LABEL_18;
        }
        int64_t v14 = v1;
        int v15 = v4;
        uint64_t v7 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v5);
        uint64_t v8 = v7[1];
        uint64_t v16 = *v7;
        uint64_t v9 = *(void *)(a1 + 56) + 40 * v5;
        uint64_t v10 = *(void *)(v9 + 16);
        uint64_t v19 = *(void *)(v9 + 24);
        uint64_t v20 = *(void *)(v9 + 8);
        char v17 = *(unsigned char *)v9;
        char v18 = *(unsigned char *)(v9 + 32);
        unint64_t v12 = _swiftEmptyArrayStorage[2];
        unint64_t v11 = _swiftEmptyArrayStorage[3];
        swift_bridgeObjectRetain();
        uint64_t result = swift_bridgeObjectRetain();
        if (v12 >= v11 >> 1) {
          uint64_t result = (uint64_t)sub_10014A068((char *)(v11 > 1), v12 + 1, 1);
        }
        _swiftEmptyArrayStorage[2] = v12 + 1;
        int64_t v13 = &_swiftEmptyArrayStorage[7 * v12];
        v13[4] = v16;
        void v13[5] = v8;
        *((unsigned char *)v13 + 48) = v17;
        v13[7] = v20;
        v13[8] = v10;
        v13[9] = v19;
        *((unsigned char *)v13 + 80) = v18;
        if ((uint64_t)v5 >= -(-1 << *(unsigned char *)(a1 + 32))) {
          goto LABEL_19;
        }
        uint64_t v6 = a1 + 64;
        if ((*(void *)(a1 + 64 + 8 * (v5 >> 6)) & (1 << v5)) == 0) {
          goto LABEL_20;
        }
        if (v15 != *(_DWORD *)(a1 + 36)) {
          goto LABEL_21;
        }
        uint64_t result = _HashTable.occupiedBucket(after:)();
        --v1;
        if (v14 == 1) {
          return (uint64_t)_swiftEmptyArrayStorage;
        }
        unint64_t v5 = result;
        if ((result & 0x8000000000000000) == 0)
        {
          int v4 = *(_DWORD *)(a1 + 36);
          if (result < 1 << *(unsigned char *)(a1 + 32)) {
            continue;
          }
        }
        goto LABEL_22;
      }
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      __break(1u);
    }
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t sub_10012BAD0()
{
  char v2 = *(void **)(v0 + 80);
  if (v2)
  {
    swift_bridgeObjectRetain();
    return (uint64_t)v2;
  }
  sub_10012BF04();
  if (v1) {
    return (uint64_t)v2;
  }
  sub_100017F00();
  uint64_t v35 = v0;
  uint64_t v3 = *(void *)(v0 + 72);
  swift_bridgeObjectRetain();
  sub_10002572C(&qword_100221518);
  char v2 = (void *)Dictionary.init(dictionaryLiteral:)();
  sub_10001FC68(v3, v49);
  uint64_t v38 = v49[0];
  int64_t v39 = v49[3];
  unint64_t v4 = v49[4];
  uint64_t v36 = v49[1];
  int64_t v37 = (unint64_t)(v49[2] + 64) >> 6;
  swift_bridgeObjectRetain();
  if (!v4) {
    goto LABEL_6;
  }
LABEL_5:
  unint64_t v5 = __clz(__rbit64(v4));
  v4 &= v4 - 1;
  unint64_t v6 = v5 | (v39 << 6);
  while (1)
  {
    int64_t v13 = (uint64_t *)(*(void *)(v38 + 48) + 16 * v6);
    uint64_t v15 = *v13;
    uint64_t v14 = v13[1];
    sub_10001C20C(*(void *)(v38 + 56) + 40 * v6, (uint64_t)&v46);
    *(void *)&long long v45 = v15;
    *((void *)&v45 + 1) = v14;
    v43[0] = v46;
    v43[1] = v47;
    long long v42 = v45;
    uint64_t v16 = v48;
    uint64_t v44 = v48;
    sub_10001B620(v43, *((uint64_t *)&v47 + 1));
    char v17 = *(uint64_t (**)(uint64_t))(v16 + 32);
    swift_bridgeObjectRetain();
    uint64_t v18 = sub_10002A494();
    uint64_t v19 = v17(v18);
    *(_OWORD *)&v40[5] = v42;
    sub_10001C20C((uint64_t)v43, (uint64_t)v41);
    sub_10001C1AC(v41, (uint64_t)v40);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v50 = v2;
    unint64_t v21 = sub_10003B4BC(v19);
    uint64_t v23 = v2[2];
    BOOL v24 = (v22 & 1) == 0;
    Swift::Int v25 = v23 + v24;
    if (__OFADD__(v23, v24)) {
      break;
    }
    unint64_t v26 = v21;
    char v27 = v22;
    sub_10002572C(&qword_100221528);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v25))
    {
      unint64_t v28 = sub_10003B4BC(v19);
      if ((v27 & 1) != (v29 & 1)) {
        goto LABEL_44;
      }
      unint64_t v26 = v28;
    }
    char v2 = v50;
    if (v27)
    {
      uint64_t v30 = v50[7] + 40 * v26;
      sub_10001CA50(v30);
      sub_10001C1AC((long long *)v40, v30);
    }
    else
    {
      v50[(v26 >> 6) + 8] |= 1 << v26;
      *(void *)(v2[6] + 8 * v26) = v19;
      sub_10001C1AC((long long *)v40, v2[7] + 40 * v26);
      uint64_t v31 = v2[2];
      BOOL v10 = __OFADD__(v31, 1);
      uint64_t v32 = v31 + 1;
      if (v10) {
        goto LABEL_42;
      }
      v2[2] = v32;
    }
    swift_bridgeObjectRelease();
    sub_100019938((uint64_t)&v42, &qword_100221520);
    if (v4) {
      goto LABEL_5;
    }
LABEL_6:
    int64_t v7 = v39 + 1;
    if (__OFADD__(v39, 1)) {
      goto LABEL_43;
    }
    if (v7 >= v37) {
      goto LABEL_40;
    }
    unint64_t v8 = *(void *)(v36 + 8 * v7);
    if (!v8)
    {
      sub_10002A6D0();
      if (v9 == v10) {
        goto LABEL_40;
      }
      sub_100025CB4();
      if (v8) {
        goto LABEL_21;
      }
      sub_10002A6D0();
      if (v9 == v10) {
        goto LABEL_40;
      }
      sub_100025CB4();
      if (v8) {
        goto LABEL_21;
      }
      sub_10002A6D0();
      if (v9 == v10) {
        goto LABEL_40;
      }
      sub_100025CB4();
      if (v8) {
        goto LABEL_21;
      }
      sub_10002A6D0();
      if (v9 == v10) {
        goto LABEL_40;
      }
      sub_100025CB4();
      if (v8)
      {
LABEL_21:
        int64_t v7 = v11;
      }
      else
      {
        int64_t v7 = v12 + 5;
        if (v7 >= v37) {
          goto LABEL_40;
        }
        unint64_t v8 = *(void *)(v36 + 8 * v7);
        if (!v8)
        {
          int64_t v33 = v39 + 7;
          while (v33 < v37)
          {
            unint64_t v8 = *(void *)(v36 + 8 * v33++);
            if (v8)
            {
              int64_t v7 = v33 - 1;
              goto LABEL_22;
            }
          }
LABEL_40:
          swift_release();
          swift_bridgeObjectRelease();
          *(void *)(v35 + 80) = v2;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          return (uint64_t)v2;
        }
      }
    }
LABEL_22:
    unint64_t v4 = (v8 - 1) & v8;
    unint64_t v6 = __clz(__rbit64(v8)) + (v7 << 6);
    int64_t v39 = v7;
  }
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_10012BF04()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0 + 96;
  for (uint64_t result = sub_100017F00(); ; uint64_t result = swift_bridgeObjectRelease())
  {
    unint64_t v5 = *(void **)v3;
    unint64_t v6 = *(void *)(*(void *)v3 + 64);
    char v7 = *(unsigned char *)(*(void *)v3 + 32);
    uint64_t v8 = 1 << v7;
    if (v6)
    {
      uint64_t v9 = 0;
      goto LABEL_14;
    }
    unsigned int v10 = v7 & 0x3F;
    if (v10 < 7) {
      return result;
    }
    unint64_t v6 = v5[9];
    if (v6)
    {
      uint64_t v9 = 1;
      goto LABEL_14;
    }
    if (v10 < 8) {
      return result;
    }
    unint64_t v6 = v5[10];
    if (!v6) {
      break;
    }
    uint64_t v9 = 2;
LABEL_14:
    unint64_t v12 = __clz(__rbit64(v6));
    uint64_t v13 = v12 + (v9 << 6);
    if (v13 == v8) {
      return result;
    }
    if (v13 < 0 || v13 >= v8)
    {
      __break(1u);
LABEL_23:
      __break(1u);
      return result;
    }
    if (((*(void *)(*(void *)v3 + 64 + (((unint64_t)v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v12) & 1) == 0) {
      goto LABEL_23;
    }
    uint64_t v14 = (uint64_t *)(v5[6] + 16 * v13);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    swift_bridgeObjectRetain();
    sub_10001BDD4(v15, v16, v17);
    if (v2) {
      return swift_bridgeObjectRelease();
    }
    sub_10001CA50((uint64_t)v17);
  }
  uint64_t v11 = 11;
  while (v11 - 8 < (unint64_t)(v8 + 63) >> 6)
  {
    unint64_t v6 = v5[v11++];
    if (v6)
    {
      uint64_t v9 = v11 - 9;
      goto LABEL_14;
    }
  }
  return result;
}

uint64_t sub_10012C050(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9 = v7;
  v7[7] = 0;
  v7[8] = 0;
  swift_retain();
  sub_10002572C(&qword_100221518);
  v7[9] = Dictionary.init(dictionaryLiteral:)();
  v7[10] = 0;
  sub_10002572C(&qword_100221530);
  v7[11] = Dictionary.init(dictionaryLiteral:)();
  uint64_t v13 = swift_bridgeObjectRetain();
  uint64_t v14 = (void *)sub_10012B8C4(v13);
  swift_bridgeObjectRelease();
  uint64_t v49 = v14;
  swift_bridgeObjectRetain();
  sub_10012CA44((uint64_t *)&v49, (uint64_t (*)(uint64_t))sub_10012D558, (uint64_t (*)(void *))sub_10012CAC8);
  if (v8)
  {
LABEL_33:
    uint64_t result = swift_release();
    __break(1u);
    return result;
  }
  uint64_t v43 = a7;
  swift_bridgeObjectRelease();
  uint64_t v15 = v49;
  uint64_t v16 = v49[2];
  uint64_t v44 = a4;
  long long v45 = v9;
  if (v16)
  {
    uint64_t v47 = a5;
    uint64_t v49 = _swiftEmptyArrayStorage;
    sub_1000EE464();
    char v17 = v49;
    uint64_t v18 = v15 + 5;
    do
    {
      uint64_t v20 = *(v18 - 1);
      uint64_t v19 = *v18;
      uint64_t v49 = v17;
      unint64_t v22 = v17[2];
      unint64_t v21 = v17[3];
      swift_bridgeObjectRetain();
      if (v22 >= v21 >> 1)
      {
        sub_1000EE464();
        char v17 = v49;
      }
      v18 += 7;
      v17[2] = v22 + 1;
      uint64_t v23 = &v17[2 * v22];
      v23[4] = v20;
      v23[5] = v19;
      --v16;
    }
    while (v16);
    swift_release();
    a4 = v44;
    uint64_t v9 = v45;
    a5 = v47;
  }
  else
  {
    swift_release();
    char v17 = _swiftEmptyArrayStorage;
  }
  v9[5] = v17;
  v9[12] = a4;
  uint64_t v24 = *(void *)(a5 + 16);
  if (v24)
  {
    uint64_t v49 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1000EE464();
    Swift::Int v25 = v49;
    uint64_t v26 = sub_10012D56C(a5);
    if (v26 < 0 || (unint64_t v28 = v26, v26 >= 1 << *(unsigned char *)(a5 + 32)))
    {
LABEL_27:
      __break(1u);
    }
    else
    {
      int v29 = v27;
      uint64_t v30 = a5 + 64;
      while ((*(void *)(v30 + 8 * (v28 >> 6)) & (1 << v28)) != 0)
      {
        if (v29 != *(_DWORD *)(a5 + 36)) {
          goto LABEL_29;
        }
        uint64_t v31 = (uint64_t *)(*(void *)(a5 + 48) + 16 * v28);
        uint64_t v46 = v24;
        uint64_t v48 = *v31;
        uint64_t v32 = v31[1];
        uint64_t v49 = v25;
        unint64_t v34 = v25[2];
        unint64_t v33 = v25[3];
        swift_bridgeObjectRetain();
        if (v34 >= v33 >> 1)
        {
          sub_1000EE464();
          Swift::Int v25 = v49;
        }
        v25[2] = v34 + 1;
        uint64_t v35 = &v25[2 * v34];
        v35[4] = v48;
        v35[5] = v32;
        if ((uint64_t)v28 >= -(-1 << *(unsigned char *)(a5 + 32))) {
          goto LABEL_30;
        }
        uint64_t v30 = a5 + 64;
        if ((*(void *)(a5 + 64 + 8 * (v28 >> 6)) & (1 << v28)) == 0) {
          goto LABEL_31;
        }
        if (v29 != *(_DWORD *)(a5 + 36)) {
          goto LABEL_32;
        }
        uint64_t v36 = _HashTable.occupiedBucket(after:)();
        uint64_t v24 = v46 - 1;
        if (v46 == 1)
        {
          swift_bridgeObjectRelease();
          uint64_t v9 = v45;
          goto LABEL_26;
        }
        unint64_t v28 = v36;
        if ((v36 & 0x8000000000000000) == 0)
        {
          int v29 = *(_DWORD *)(a5 + 36);
          if (v36 < 1 << *(unsigned char *)(a5 + 32)) {
            continue;
          }
        }
        goto LABEL_27;
      }
    }
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  swift_bridgeObjectRetain();
  Swift::Int v25 = _swiftEmptyArrayStorage;
LABEL_26:
  uint64_t v49 = v25;
  swift_bridgeObjectRetain();
  sub_10012CA44((uint64_t *)&v49, (uint64_t (*)(uint64_t))sub_10002F0B4, (uint64_t (*)(void *))sub_10002F820);
  swift_bridgeObjectRelease();
  v9[6] = v49;
  v9[13] = a5;
  swift_bridgeObjectRetain();
  uint64_t v37 = sub_10012B37C(a3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v9[4] = v37;
  swift_release();
  v9[2] = a1;
  v9[3] = a2;
  v9[7] = a6;
  v9[8] = v43;
  swift_unknownObjectRelease();
  return (uint64_t)v9;
}

void sub_10012C4BC(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  sub_100017F00();
  uint64_t v8 = *(void *)(v3 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v9 = sub_100024A48();
  sub_10001C270(v11, v9, v10, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v23)
  {
    sub_10001C1AC(&v22, (uint64_t)&v24);
    sub_10001C1AC(&v24, (uint64_t)a3);
  }
  else
  {
    sub_100019938((uint64_t)&v22, &qword_100221500);
    sub_100017F00();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v12 = sub_100024A48();
    uint64_t v13 = sub_100139ED4(v12);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v13)
    {
      uint64_t v14 = type metadata accessor for ProtoOneOf();
      swift_allocObject();
      swift_bridgeObjectRetain();
      uint64_t v15 = sub_100024A48();
      sub_100148C24(v15, v16, v13);
      if (!v4)
      {
        uint64_t v18 = v17;
        uint64_t v25 = v14;
        uint64_t v26 = &off_1002038C0;
        *(void *)&long long v24 = v17;
        sub_1000257C8();
        swift_bridgeObjectRetain();
        swift_retain();
        sub_10012B818((uint64_t)&v24, a1, a2, (void (*)(void))sub_10001C1AC, (void (*)(void *, uint64_t, uint64_t))sub_10013A854, &qword_100221500, (void (*)(void *__return_ptr, uint64_t, uint64_t))sub_10013EEF8);
        swift_endAccess();
        sub_1000257C8();
        uint64_t v19 = sub_100024A48();
        sub_10013EDE0(v19, v20);
        swift_endAccess();
        swift_bridgeObjectRelease();
        a3[3] = v14;
        a3[4] = &off_1002038C0;
        *a3 = v18;
      }
    }
    else
    {
      sub_1001229F8();
      swift_allocError();
      *(void *)uint64_t v21 = 7;
      *(_OWORD *)(v21 + 8) = 0u;
      *(_OWORD *)(v21 + 24) = 0u;
      *(_WORD *)(v21 + 40) = 3584;
      swift_willThrow();
    }
  }
}

void *sub_10012C72C(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ProtobufPayload();
  unint64_t v5 = (void *)swift_allocObject();
  v5[5] = type metadata accessor for ProtoMessageSchema();
  v5[6] = &off_1002029B0;
  v5[2] = v2;
  v5[7] = a1;
  v5[8] = a2;
  sub_10012C940();
  swift_retain();
  uint64_t v6 = sub_10002A494();
  sub_100027BCC(v6, v7);
  return v5;
}

uint64_t sub_10012C7B8()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10012C820()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_10012C888()
{
  sub_10012C820();

  return _swift_deallocClassInstance(v0, 112, 7);
}

uint64_t sub_10012C8BC()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_10012C8C8()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_10012C8D4()
{
  return sub_10012BAD0();
}

void sub_10012C8F8(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
}

void *sub_10012C91C(uint64_t a1, uint64_t a2)
{
  return sub_10012C72C(a1, a2);
}

unint64_t sub_10012C940()
{
  unint64_t result = qword_100222A40;
  if (!qword_100222A40)
  {
    type metadata accessor for ProtobufPayload();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100222A40);
  }
  return result;
}

uint64_t sub_10012C990(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10002572C(&qword_100221510);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t *sub_10012C9F8(uint64_t *a1)
{
  return a1;
}

uint64_t sub_10012CA30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 != 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10012CA44(uint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(void *))
{
  uint64_t v6 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v6 = a2(v6);
  }
  uint64_t v7 = *(void *)(v6 + 16);
  v9[0] = v6 + 32;
  v9[1] = v7;
  uint64_t result = a3(v9);
  *a1 = v6;
  return result;
}

void sub_10012CAC8(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  Swift::Int v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v3) {
        sub_10012D160(0, v3, 1, a1);
      }
      return;
    }
    goto LABEL_124;
  }
  Swift::Int v5 = v4;
  uint64_t v114 = v1;
  v109 = sub_100141A34(v3 / 2);
  __dst = v6;
  uint64_t v111 = v3;
  v107 = a1;
  if (v3 <= 0)
  {
    uint64_t v9 = (char *)_swiftEmptyArrayStorage;
    unint64_t v46 = _swiftEmptyArrayStorage[2];
LABEL_90:
    v96 = v9;
    if (v46 < 2)
    {
LABEL_101:
      swift_bridgeObjectRelease();
      if (v111 >= -1)
      {
        v109[2] = 0;
        swift_bridgeObjectRelease();
        return;
      }
      goto LABEL_129;
    }
    uint64_t v97 = *v107;
    while (1)
    {
      unint64_t v98 = v46 - 2;
      if (v46 < 2) {
        break;
      }
      if (!v97) {
        goto LABEL_133;
      }
      uint64_t v99 = (uint64_t)v96;
      uint64_t v100 = v96[2 * v98 + 4];
      uint64_t v101 = v96[2 * v46 + 3];
      sub_10012D3A4((char *)(v97 + 56 * v100), (char *)(v97 + 56 * v96[2 * v46 + 2]), v97 + 56 * v101, __dst);
      if (v114) {
        goto LABEL_86;
      }
      if (v101 < v100) {
        goto LABEL_119;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_10011B25C(v99);
        uint64_t v99 = v104;
      }
      if (v98 >= *(void *)(v99 + 16)) {
        goto LABEL_120;
      }
      v102 = (void *)(v99 + 32 + 16 * v98);
      void *v102 = v100;
      v102[1] = v101;
      unint64_t v103 = *(void *)(v99 + 16);
      if (v46 > v103) {
        goto LABEL_121;
      }
      memmove((void *)(v99 + 32 + 16 * (v46 - 1)), (const void *)(v99 + 32 + 16 * v46), 16 * (v103 - v46));
      v96 = (void *)v99;
      *(void *)(v99 + 16) = v103 - 1;
      unint64_t v46 = v103 - 1;
      if (v103 <= 2) {
        goto LABEL_101;
      }
    }
LABEL_118:
    __break(1u);
LABEL_119:
    __break(1u);
LABEL_120:
    __break(1u);
LABEL_121:
    __break(1u);
LABEL_122:
    __break(1u);
LABEL_123:
    __break(1u);
LABEL_124:
    __break(1u);
LABEL_125:
    __break(1u);
LABEL_126:
    __break(1u);
LABEL_127:
    __break(1u);
LABEL_128:
    __break(1u);
LABEL_129:
    __break(1u);
LABEL_130:
    __break(1u);
LABEL_131:
    __break(1u);
LABEL_132:
    __break(1u);
LABEL_133:
    __break(1u);
    return;
  }
  Swift::Int v7 = 0;
  uint64_t v8 = *a1;
  uint64_t v108 = *a1 + 40;
  uint64_t v105 = *a1 - 56;
  uint64_t v106 = *a1 + 96;
  uint64_t v9 = (char *)_swiftEmptyArrayStorage;
  Swift::Int v110 = v5;
  uint64_t v112 = v8;
  while (1)
  {
    Swift::Int v10 = v7++;
    if (v7 < v3)
    {
      uint64_t v11 = *(void *)(v108 + 56 * v7);
      uint64_t v12 = *(void *)(v108 + 56 * v10);
      Swift::Int v7 = v10 + 2;
      if (v10 + 2 < v3)
      {
        uint64_t v13 = (void *)(v106 + 56 * v10);
        uint64_t v14 = v13;
        while (1)
        {
          uint64_t v15 = v14[7];
          v14 += 7;
          if (v11 < v12 == v15 >= *v13) {
            break;
          }
          ++v7;
          uint64_t v13 = v14;
          if (v7 >= v3)
          {
            Swift::Int v7 = v3;
            break;
          }
        }
      }
      if (v11 < v12)
      {
        if (v7 < v10) {
          goto LABEL_126;
        }
        if (v10 < v7)
        {
          uint64_t v16 = 56 * v7;
          Swift::Int v17 = v7;
          Swift::Int v18 = v10;
          uint64_t v19 = 56 * v10;
          do
          {
            if (v18 != --v17)
            {
              if (!v8) {
                goto LABEL_132;
              }
              uint64_t v20 = v8 + v19;
              uint64_t v21 = v8 + v16;
              uint64_t v22 = *(void *)(v8 + v19);
              uint64_t v23 = *(void *)(v8 + v19 + 8);
              char v24 = *(unsigned char *)(v8 + v19 + 16);
              uint64_t v25 = *(void *)(v8 + v19 + 40);
              char v26 = *(unsigned char *)(v8 + v19 + 48);
              long long v27 = *(_OWORD *)(v8 + v19 + 24);
              long long v28 = *(_OWORD *)(v8 + v16 - 40);
              long long v29 = *(_OWORD *)(v8 + v16 - 24);
              long long v30 = *(_OWORD *)(v8 + v16 - 56);
              *(void *)(v20 + 48) = *(void *)(v8 + v16 - 8);
              *(_OWORD *)(v20 + 16) = v28;
              *(_OWORD *)(v20 + 32) = v29;
              *(_OWORD *)uint64_t v20 = v30;
              *(void *)(v21 - 56) = v22;
              *(void *)(v21 - 48) = v23;
              *(unsigned char *)(v21 - 40) = v24;
              *(_OWORD *)(v21 - 32) = v27;
              *(void *)(v21 - 16) = v25;
              *(unsigned char *)(v21 - 8) = v26;
            }
            ++v18;
            v16 -= 56;
            v19 += 56;
          }
          while (v18 < v17);
        }
      }
    }
    if (v7 < v3)
    {
      if (__OFSUB__(v7, v10)) {
        goto LABEL_123;
      }
      if (v7 - v10 < v5)
      {
        Swift::Int v31 = v10 + v5;
        if (__OFADD__(v10, v5)) {
          goto LABEL_127;
        }
        if (v31 >= v3) {
          Swift::Int v31 = v3;
        }
        if (v31 < v10) {
          goto LABEL_128;
        }
        if (v7 != v31)
        {
          uint64_t v32 = v105 + 56 * v7;
          do
          {
            Swift::Int v33 = v10;
            uint64_t v34 = v32;
            do
            {
              uint64_t v35 = *(void *)(v34 + 96);
              if (v35 >= *(void *)(v34 + 40)) {
                break;
              }
              if (!v8) {
                goto LABEL_130;
              }
              uint64_t v36 = v34 + 56;
              uint64_t v38 = *(void *)(v34 + 56);
              uint64_t v37 = *(void *)(v34 + 64);
              char v39 = *(unsigned char *)(v34 + 72);
              char v40 = *(unsigned char *)(v34 + 104);
              long long v41 = *(_OWORD *)(v34 + 80);
              long long v42 = *(_OWORD *)(v34 + 16);
              uint64_t v43 = *(void *)(v34 + 48);
              *(_OWORD *)(v34 + 56) = *(_OWORD *)v34;
              *(_OWORD *)(v34 + 72) = v42;
              *(_OWORD *)(v34 + 88) = *(_OWORD *)(v34 + 32);
              *(void *)uint64_t v34 = v38;
              *(void *)(v34 + 8) = v37;
              *(unsigned char *)(v34 + 16) = v39;
              *(_OWORD *)(v34 + 24) = v41;
              *(void *)(v34 + 40) = v35;
              *(unsigned char *)(v34 + 48) = v40;
              v34 -= 56;
              ++v33;
              *(void *)(v36 + 48) = v43;
            }
            while (v7 != v33);
            ++v7;
            v32 += 56;
          }
          while (v7 != v31);
          Swift::Int v7 = v31;
        }
      }
    }
    if (v7 < v10) {
      goto LABEL_122;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_10011B190(0, *((void *)v9 + 2) + 1, 1, v9);
      uint64_t v9 = v94;
    }
    unint64_t v45 = *((void *)v9 + 2);
    unint64_t v44 = *((void *)v9 + 3);
    unint64_t v46 = v45 + 1;
    uint64_t v8 = v112;
    if (v45 >= v44 >> 1)
    {
      sub_10011B190(v44 > 1, v45 + 1, 1, v9);
      uint64_t v8 = v112;
      uint64_t v9 = v95;
    }
    *((void *)v9 + 2) = v46;
    uint64_t v47 = v9 + 32;
    uint64_t v48 = &v9[16 * v45 + 32];
    *(void *)uint64_t v48 = v10;
    *((void *)v48 + 1) = v7;
    if (v45) {
      break;
    }
    unint64_t v46 = 1;
LABEL_81:
    Swift::Int v5 = v110;
    Swift::Int v3 = v111;
    if (v7 >= v111) {
      goto LABEL_90;
    }
  }
  while (1)
  {
    unint64_t v49 = v46 - 1;
    if (v46 >= 4)
    {
      uint64_t v54 = &v47[2 * v46];
      uint64_t v55 = *(v54 - 8);
      uint64_t v56 = *(v54 - 7);
      BOOL v60 = __OFSUB__(v56, v55);
      uint64_t v57 = v56 - v55;
      if (v60) {
        goto LABEL_107;
      }
      uint64_t v59 = *(v54 - 6);
      uint64_t v58 = *(v54 - 5);
      BOOL v60 = __OFSUB__(v58, v59);
      uint64_t v52 = v58 - v59;
      char v53 = v60;
      if (v60) {
        goto LABEL_108;
      }
      unint64_t v61 = v46 - 2;
      uint64_t v62 = &v47[2 * v46 - 4];
      uint64_t v64 = *v62;
      uint64_t v63 = v62[1];
      BOOL v60 = __OFSUB__(v63, v64);
      uint64_t v65 = v63 - v64;
      if (v60) {
        goto LABEL_109;
      }
      BOOL v60 = __OFADD__(v52, v65);
      uint64_t v66 = v52 + v65;
      if (v60) {
        goto LABEL_111;
      }
      if (v66 >= v57)
      {
        v84 = &v47[2 * v49];
        uint64_t v86 = *v84;
        uint64_t v85 = v84[1];
        BOOL v60 = __OFSUB__(v85, v86);
        uint64_t v87 = v85 - v86;
        if (v60) {
          goto LABEL_117;
        }
        BOOL v77 = v52 < v87;
        goto LABEL_70;
      }
    }
    else
    {
      if (v46 != 3)
      {
        uint64_t v78 = *((void *)v9 + 4);
        uint64_t v79 = *((void *)v9 + 5);
        BOOL v60 = __OFSUB__(v79, v78);
        uint64_t v71 = v79 - v78;
        char v72 = v60;
        goto LABEL_64;
      }
      uint64_t v51 = *((void *)v9 + 4);
      uint64_t v50 = *((void *)v9 + 5);
      BOOL v60 = __OFSUB__(v50, v51);
      uint64_t v52 = v50 - v51;
      char v53 = v60;
    }
    if (v53) {
      goto LABEL_110;
    }
    unint64_t v61 = v46 - 2;
    uint64_t v67 = &v47[2 * v46 - 4];
    uint64_t v69 = *v67;
    uint64_t v68 = v67[1];
    BOOL v70 = __OFSUB__(v68, v69);
    uint64_t v71 = v68 - v69;
    char v72 = v70;
    if (v70) {
      goto LABEL_112;
    }
    uint64_t v73 = &v47[2 * v49];
    uint64_t v75 = *v73;
    uint64_t v74 = v73[1];
    BOOL v60 = __OFSUB__(v74, v75);
    uint64_t v76 = v74 - v75;
    if (v60) {
      goto LABEL_114;
    }
    if (__OFADD__(v71, v76)) {
      goto LABEL_116;
    }
    if (v71 + v76 >= v52)
    {
      BOOL v77 = v52 < v76;
LABEL_70:
      if (v77) {
        unint64_t v49 = v61;
      }
      goto LABEL_72;
    }
LABEL_64:
    if (v72) {
      goto LABEL_113;
    }
    v80 = &v47[2 * v49];
    uint64_t v82 = *v80;
    uint64_t v81 = v80[1];
    BOOL v60 = __OFSUB__(v81, v82);
    uint64_t v83 = v81 - v82;
    if (v60) {
      goto LABEL_115;
    }
    if (v83 < v71) {
      goto LABEL_81;
    }
LABEL_72:
    unint64_t v88 = v49 - 1;
    if (v49 - 1 >= v46)
    {
      __break(1u);
LABEL_104:
      __break(1u);
LABEL_105:
      __break(1u);
LABEL_106:
      __break(1u);
LABEL_107:
      __break(1u);
LABEL_108:
      __break(1u);
LABEL_109:
      __break(1u);
LABEL_110:
      __break(1u);
LABEL_111:
      __break(1u);
LABEL_112:
      __break(1u);
LABEL_113:
      __break(1u);
LABEL_114:
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
      goto LABEL_118;
    }
    if (!v8) {
      goto LABEL_131;
    }
    v89 = &v47[2 * v88];
    uint64_t v90 = *v89;
    v91 = &v47[2 * v49];
    uint64_t v92 = v91[1];
    sub_10012D3A4((char *)(v8 + 56 * *v89), (char *)(v8 + 56 * *v91), v8 + 56 * v92, __dst);
    if (v114) {
      break;
    }
    if (v92 < v90) {
      goto LABEL_104;
    }
    if (v49 > *((void *)v9 + 2)) {
      goto LABEL_105;
    }
    uint64_t *v89 = v90;
    v47[2 * v88 + 1] = v92;
    unint64_t v93 = *((void *)v9 + 2);
    if (v49 >= v93) {
      goto LABEL_106;
    }
    unint64_t v46 = v93 - 1;
    memmove(&v47[2 * v49], v91 + 2, 16 * (v93 - 1 - v49));
    *((void *)v9 + 2) = v93 - 1;
    uint64_t v8 = v112;
    if (v93 <= 2) {
      goto LABEL_81;
    }
  }
LABEL_86:
  swift_bridgeObjectRelease();
  if (v111 < -1) {
    goto LABEL_125;
  }
  v109[2] = 0;
  swift_bridgeObjectRelease();
}

uint64_t sub_10012D160(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = *a4;
    uint64_t v5 = *a4 + 56 * a3 - 56;
    while (2)
    {
      uint64_t v6 = result;
      uint64_t v7 = v5;
      do
      {
        uint64_t v8 = *(void *)(v7 + 96);
        if (v8 >= *(void *)(v7 + 40)) {
          break;
        }
        if (!v4)
        {
          __break(1u);
          return result;
        }
        uint64_t v9 = v7 + 56;
        uint64_t v11 = *(void *)(v7 + 56);
        uint64_t v10 = *(void *)(v7 + 64);
        char v12 = *(unsigned char *)(v7 + 72);
        char v13 = *(unsigned char *)(v7 + 104);
        long long v14 = *(_OWORD *)(v7 + 80);
        long long v15 = *(_OWORD *)(v7 + 16);
        uint64_t v16 = *(void *)(v7 + 48);
        *(_OWORD *)(v7 + 56) = *(_OWORD *)v7;
        *(_OWORD *)(v7 + 72) = v15;
        *(_OWORD *)(v7 + 88) = *(_OWORD *)(v7 + 32);
        *(void *)uint64_t v7 = v11;
        *(void *)(v7 + 8) = v10;
        *(unsigned char *)(v7 + 16) = v12;
        *(_OWORD *)(v7 + 24) = v14;
        *(void *)(v7 + 40) = v8;
        *(unsigned char *)(v7 + 48) = v13;
        v7 -= 56;
        ++v6;
        *(void *)(v9 + 48) = v16;
      }
      while (a3 != v6);
      ++a3;
      v5 += 56;
      if (a3 != a2) {
        continue;
      }
      break;
    }
  }
  return result;
}

uint64_t sub_10012D1FC(char *a1, char *a2, unint64_t a3, char *a4)
{
  uint64_t v4 = a4;
  uint64_t v6 = a2;
  uint64_t v7 = a1;
  uint64_t v8 = a2 - a1;
  uint64_t v9 = (a2 - a1) / 16;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = (uint64_t)(a3 - (void)a2) / 16;
  if (v9 >= v11)
  {
    sub_100021610(a2, (uint64_t)(a3 - (void)a2) / 16, a4);
    unint64_t v12 = (unint64_t)&v4[16 * v11];
    if (v7 >= v6 || v10 < 16) {
      goto LABEL_47;
    }
    Swift::Int v18 = (char *)(a3 - 16);
    while (1)
    {
      uint64_t v19 = v18 + 16;
      uint64_t v20 = (char *)(v12 - 16);
      BOOL v21 = *(void *)(v12 - 16) == *((void *)v6 - 2) && *(void *)(v12 - 8) == *((void *)v6 - 1);
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        BOOL v23 = v19 != (char *)v12 || (unint64_t)v18 >= v12;
        v12 -= 16;
        if (!v23) {
          goto LABEL_43;
        }
      }
      else
      {
        BOOL v22 = v19 != v6 || v18 >= v6;
        uint64_t v20 = v6 - 16;
        v6 -= 16;
        if (!v22) {
          goto LABEL_43;
        }
      }
      *(_OWORD *)Swift::Int v18 = *(_OWORD *)v20;
LABEL_43:
      v18 -= 16;
      if (v6 <= v7 || v12 <= (unint64_t)v4) {
        goto LABEL_47;
      }
    }
  }
  sub_100021610(a1, (a2 - a1) / 16, a4);
  unint64_t v12 = (unint64_t)&v4[16 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 16)
  {
    while (1)
    {
      BOOL v14 = *(void *)v6 == *(void *)v4 && *((void *)v6 + 1) == *((void *)v4 + 1);
      if (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        break;
      }
      long long v15 = v4;
      BOOL v14 = v7 == v4;
      v4 += 16;
      if (!v14) {
        goto LABEL_15;
      }
LABEL_16:
      v7 += 16;
      if ((unint64_t)v4 >= v12 || (unint64_t)v6 >= a3) {
        goto LABEL_21;
      }
    }
    long long v15 = v6;
    BOOL v14 = v7 == v6;
    v6 += 16;
    if (v14) {
      goto LABEL_16;
    }
LABEL_15:
    *(_OWORD *)uint64_t v7 = *(_OWORD *)v15;
    goto LABEL_16;
  }
LABEL_21:
  uint64_t v6 = v7;
LABEL_47:
  sub_100021610(v4, (uint64_t)(v12 - (void)v4) / 16, v6);
  return 1;
}

uint64_t sub_10012D3A4(char *__src, char *a2, unint64_t a3, char *__dst)
{
  uint64_t v4 = __dst;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = (a2 - __src) / 56;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = (uint64_t)(a3 - (void)a2) / 56;
  if (v9 >= v11)
  {
    sub_100149228(a2, (uint64_t)(a3 - (void)a2) / 56, __dst);
    unint64_t v12 = &v4[56 * v11];
    if (v7 >= v6 || v10 < 56) {
      goto LABEL_41;
    }
    unint64_t v21 = a3 - 56;
    while (1)
    {
      BOOL v22 = (char *)(v21 + 56);
      if (*((void *)v12 - 2) >= *((void *)v6 - 2))
      {
        BOOL v23 = v12 - 56;
        BOOL v25 = v22 != v12 || v21 >= (unint64_t)v12;
        v12 -= 56;
        if (!v25) {
          goto LABEL_37;
        }
      }
      else
      {
        BOOL v23 = v6 - 56;
        BOOL v24 = v22 != v6 || v21 >= (unint64_t)v6;
        v6 -= 56;
        if (!v24) {
          goto LABEL_37;
        }
      }
      long long v26 = *(_OWORD *)v23;
      long long v27 = *((_OWORD *)v23 + 1);
      long long v28 = *((_OWORD *)v23 + 2);
      *(void *)(v21 + 48) = *((void *)v23 + 6);
      *(_OWORD *)(v21 + 16) = v27;
      *(_OWORD *)(v21 + 32) = v28;
      *(_OWORD *)unint64_t v21 = v26;
LABEL_37:
      v21 -= 56;
      if (v6 <= v7 || v12 <= v4) {
        goto LABEL_41;
      }
    }
  }
  sub_100149228(__src, (a2 - __src) / 56, __dst);
  unint64_t v12 = &v4[56 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 56)
  {
    do
    {
      if (*((void *)v6 + 5) >= *((void *)v4 + 5))
      {
        BOOL v13 = v7 == v4;
        BOOL v14 = v4;
        v4 += 56;
        if (v13 && v7 < v4) {
          goto LABEL_16;
        }
      }
      else
      {
        BOOL v13 = v7 == v6;
        BOOL v14 = v6;
        v6 += 56;
        if (v13 && v7 < v6) {
          goto LABEL_16;
        }
      }
      long long v17 = *(_OWORD *)v14;
      long long v18 = *((_OWORD *)v14 + 1);
      long long v19 = *((_OWORD *)v14 + 2);
      *((void *)v7 + 6) = *((void *)v14 + 6);
      *((_OWORD *)v7 + 1) = v18;
      *((_OWORD *)v7 + 2) = v19;
      *(_OWORD *)uint64_t v7 = v17;
LABEL_16:
      v7 += 56;
    }
    while (v4 < v12 && (unint64_t)v6 < a3);
  }
  uint64_t v6 = v7;
LABEL_41:
  sub_100149228(v4, (v12 - v4) / 56, v6);
  return 1;
}

char *sub_10012D558(uint64_t a1)
{
  return sub_10014A0C8(0, *(void *)(a1 + 16), 0, a1);
}

uint64_t sub_10012D56C(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  uint64_t v2 = 64;
  for (uint64_t i = 10; i - 8 < (unint64_t)(v3 + 63) >> 6; ++i)
  {
    unint64_t v1 = *(void *)(a1 + 8 * i);
    v2 += 64;
    if (v1) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> PJSONFunction.perform(with:arguments:)(SQLiter::SQLiteContext with, Swift::OpaquePointer arguments)
{
  if (*((void *)arguments._rawValue + 2))
  {
    uint64_t v4 = (sqlite3_value *)*((void *)arguments._rawValue + 4);
    if (SQLiteArgument.isNull.getter(v4))
    {
      SQLiteContext.setNull()();
    }
    else
    {
      sub_1001228E8();
      if (!v2)
      {
        SQLiteBaseSchematizer.getSQLiteBridge()();
        uint64_t v6 = v5;
        swift_release();
        uint64_t ObjectType = swift_getObjectType();
        uint64_t v8 = (*(uint64_t (**)(sqlite3_value *, uint64_t, uint64_t))(v6 + 24))(v4, ObjectType, v6);
        uint64_t v10 = v9;
        uint64_t v12 = v11;
        uint64_t v14 = v13;
        swift_unknownObjectRelease();
        sub_1001352A4((uint64_t)with.context._rawValue, v8, v10, v12, v14);
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
      }
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t type metadata accessor for PJSONFunction()
{
  return self;
}

uint64_t TagPathAndType.tagPath.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t TagPathAndType.type.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100124DBC(v1 + 8, a1);
}

uint64_t TagPathAndType.type.setter(uint64_t a1)
{
  return sub_10012D748(a1, v1 + 8);
}

uint64_t sub_10012D748(uint64_t a1, uint64_t a2)
{
  return a2;
}

Swift::Void (__swiftcall *SchemaMismatchError.actual.modify())()
{
  return _CPStartNetworkSearchFeedback.redactUnused();
}

uint64_t TagPathAndType.init(tagPath:type:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = a1;
  return sub_10012D7D4(a2, (uint64_t)(a3 + 1));
}

uint64_t sub_10012D7D4(uint64_t a1, uint64_t a2)
{
  return a2;
}

ValueMetadata *type metadata accessor for TagPathComponent()
{
  return &type metadata for TagPathComponent;
}

uint64_t destroy for TagPathAndType(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  if (*(unsigned __int8 *)(a1 + 48) <= 1u)
  {
    return sub_10001CA50(a1 + 8);
  }
  return result;
}

uint64_t initializeWithCopy for TagPathAndType(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = (_OWORD *)(a1 + 8);
  uint64_t v5 = (_OWORD *)(a2 + 8);
  int v6 = *(unsigned __int8 *)(a2 + 48);
  swift_bridgeObjectRetain();
  if (v6 == 1)
  {
    long long v8 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 32) = v8;
    (**(void (***)(uint64_t, _OWORD *))(v8 - 8))(a1 + 8, v5);
    *(unsigned char *)(a1 + 48) = 1;
  }
  else if (v6)
  {
    long long v9 = v5[1];
    *uint64_t v4 = *v5;
    *(_OWORD *)(a1 + 24) = v9;
    *(_OWORD *)(a1 + 33) = *(_OWORD *)((char *)v5 + 25);
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 32) = v7;
    (**(void (***)(uint64_t, _OWORD *))(v7 - 8))(a1 + 8, v5);
    *(unsigned char *)(a1 + 48) = 0;
  }
  return a1;
}

uint64_t assignWithCopy for TagPathAndType(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (long long *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  uint64_t v5 = (_OWORD *)(a1 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    sub_100124E18(a1 + 8);
    if (*(unsigned char *)(a2 + 48) == 1)
    {
      uint64_t v7 = *(void *)(a2 + 32);
      *(void *)(a1 + 32) = v7;
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      (**(void (***)(uint64_t, long long *))(v7 - 8))(a1 + 8, v4);
      *(unsigned char *)(a1 + 48) = 1;
    }
    else if (*(unsigned char *)(a2 + 48))
    {
      long long v8 = *v4;
      long long v9 = v4[1];
      *(_OWORD *)(a1 + 33) = *(long long *)((char *)v4 + 25);
      *uint64_t v5 = v8;
      *(_OWORD *)(a1 + 24) = v9;
    }
    else
    {
      uint64_t v6 = *(void *)(a2 + 32);
      *(void *)(a1 + 32) = v6;
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      (**(void (***)(uint64_t, long long *))(v6 - 8))(a1 + 8, v4);
      *(unsigned char *)(a1 + 48) = 0;
    }
  }
  return a1;
}

__n128 initializeWithTake for TagPathAndType(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for TagPathAndType(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    sub_100124E18(a1 + 8);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 33) = *(_OWORD *)(a2 + 33);
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for TagPathAndType(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 49))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TagPathAndType(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 48) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 49) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 49) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TagPathAndType()
{
  return &type metadata for TagPathAndType;
}

uint64_t destroy for SchemaError(uint64_t result)
{
  unsigned int v1 = *(unsigned __int8 *)(result + 41);
  if (v1 >= 0xE) {
    unsigned int v1 = *(_DWORD *)result + 14;
  }
  switch(v1)
  {
    case 0u:
    case 1u:
    case 2u:
    case 3u:
    case 4u:
    case 5u:
    case 0xCu:
    case 0xDu:
      __n128 result = swift_bridgeObjectRelease();
      break;
    case 6u:
      unsigned int v2 = *(unsigned __int8 *)(result + 40);
      if (v2 >= 2) {
        unsigned int v2 = *(_DWORD *)result + 2;
      }
      if (v2 <= 1) {
        goto LABEL_8;
      }
      break;
    case 7u:
      unsigned int v3 = *(unsigned __int8 *)(result + 40);
      if (v3 >= 2) {
        unsigned int v3 = *(_DWORD *)result + 2;
      }
      if (v3 <= 1) {
        goto LABEL_8;
      }
      break;
    case 8u:
      unsigned int v4 = *(unsigned __int8 *)(result + 40);
      if (v4 >= 2) {
        unsigned int v4 = *(_DWORD *)result + 2;
      }
      if (v4 <= 1) {
        goto LABEL_8;
      }
      break;
    case 9u:
      unsigned int v5 = *(unsigned __int8 *)(result + 40);
      if (v5 >= 2) {
        unsigned int v5 = *(_DWORD *)result + 2;
      }
      if (v5 <= 1) {
        goto LABEL_8;
      }
      break;
    case 0xAu:
      unsigned int v6 = *(unsigned __int8 *)(result + 40);
      if (v6 >= 2) {
        unsigned int v6 = *(_DWORD *)result + 2;
      }
      if (v6 <= 1) {
        goto LABEL_8;
      }
      break;
    case 0xBu:
      unsigned int v7 = *(unsigned __int8 *)(result + 40);
      if (v7 >= 2) {
        unsigned int v7 = *(_DWORD *)result + 2;
      }
      if (v7 <= 1) {
LABEL_8:
      }
        __n128 result = sub_10001CA50(result);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t initializeWithCopy for SchemaError(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(unsigned __int8 *)(a2 + 41);
  if (v3 >= 0xE) {
    unsigned int v3 = *(_DWORD *)a2 + 14;
  }
  switch(v3)
  {
    case 0u:
      uint64_t v4 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v4;
      *(unsigned char *)(a1 + 41) = 0;
      goto LABEL_43;
    case 1u:
      uint64_t v5 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v5;
      char v6 = 1;
      goto LABEL_42;
    case 2u:
      uint64_t v7 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v7;
      char v6 = 2;
      goto LABEL_42;
    case 3u:
      uint64_t v8 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v8;
      char v6 = 3;
      goto LABEL_42;
    case 4u:
      uint64_t v9 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v9;
      char v6 = 4;
      goto LABEL_42;
    case 5u:
      uint64_t v10 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v10;
      char v6 = 5;
      goto LABEL_42;
    case 6u:
      unsigned int v11 = *(unsigned __int8 *)(a2 + 40);
      if (v11 >= 2) {
        unsigned int v11 = *(_DWORD *)a2 + 2;
      }
      if (v11 == 1)
      {
        long long v26 = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 24) = v26;
        (**(void (***)(uint64_t))(v26 - 8))(a1);
        *(unsigned char *)(a1 + 40) = 1;
      }
      else if (v11)
      {
        long long v27 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v27;
        *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
      }
      else
      {
        long long v12 = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 24) = v12;
        (**(void (***)(uint64_t))(v12 - 8))(a1);
        *(unsigned char *)(a1 + 40) = 0;
      }
      char v28 = 6;
      goto LABEL_63;
    case 7u:
      unsigned int v13 = *(unsigned __int8 *)(a2 + 40);
      if (v13 >= 2) {
        unsigned int v13 = *(_DWORD *)a2 + 2;
      }
      if (v13 == 1)
      {
        long long v29 = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 24) = v29;
        (**(void (***)(uint64_t))(v29 - 8))(a1);
        *(unsigned char *)(a1 + 40) = 1;
      }
      else if (v13)
      {
        long long v30 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v30;
        *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
      }
      else
      {
        long long v14 = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 24) = v14;
        (**(void (***)(uint64_t))(v14 - 8))(a1);
        *(unsigned char *)(a1 + 40) = 0;
      }
      char v28 = 7;
      goto LABEL_63;
    case 8u:
      unsigned int v15 = *(unsigned __int8 *)(a2 + 40);
      if (v15 >= 2) {
        unsigned int v15 = *(_DWORD *)a2 + 2;
      }
      if (v15 == 1)
      {
        long long v31 = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 24) = v31;
        (**(void (***)(uint64_t))(v31 - 8))(a1);
        *(unsigned char *)(a1 + 40) = 1;
      }
      else if (v15)
      {
        long long v38 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v38;
        *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
      }
      else
      {
        long long v16 = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 24) = v16;
        (**(void (***)(uint64_t))(v16 - 8))(a1);
        *(unsigned char *)(a1 + 40) = 0;
      }
      char v28 = 8;
      goto LABEL_63;
    case 9u:
      unsigned int v17 = *(unsigned __int8 *)(a2 + 40);
      if (v17 >= 2) {
        unsigned int v17 = *(_DWORD *)a2 + 2;
      }
      if (v17 == 1)
      {
        long long v32 = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 24) = v32;
        (**(void (***)(uint64_t))(v32 - 8))(a1);
        *(unsigned char *)(a1 + 40) = 1;
      }
      else if (v17)
      {
        long long v33 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v33;
        *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
      }
      else
      {
        long long v18 = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 24) = v18;
        (**(void (***)(uint64_t))(v18 - 8))(a1);
        *(unsigned char *)(a1 + 40) = 0;
      }
      char v28 = 9;
      goto LABEL_63;
    case 0xAu:
      unsigned int v19 = *(unsigned __int8 *)(a2 + 40);
      if (v19 >= 2) {
        unsigned int v19 = *(_DWORD *)a2 + 2;
      }
      if (v19 == 1)
      {
        long long v34 = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 24) = v34;
        (**(void (***)(uint64_t))(v34 - 8))(a1);
        *(unsigned char *)(a1 + 40) = 1;
      }
      else if (v19)
      {
        long long v35 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v35;
        *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
      }
      else
      {
        long long v20 = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 24) = v20;
        (**(void (***)(uint64_t))(v20 - 8))(a1);
        *(unsigned char *)(a1 + 40) = 0;
      }
      char v28 = 10;
      goto LABEL_63;
    case 0xBu:
      unsigned int v21 = *(unsigned __int8 *)(a2 + 40);
      if (v21 >= 2) {
        unsigned int v21 = *(_DWORD *)a2 + 2;
      }
      if (v21 == 1)
      {
        long long v36 = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 24) = v36;
        (**(void (***)(uint64_t))(v36 - 8))(a1);
        *(unsigned char *)(a1 + 40) = 1;
      }
      else if (v21)
      {
        long long v37 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v37;
        *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
      }
      else
      {
        long long v22 = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 24) = v22;
        (**(void (***)(uint64_t))(v22 - 8))(a1);
        *(unsigned char *)(a1 + 40) = 0;
      }
      char v28 = 11;
LABEL_63:
      *(unsigned char *)(a1 + 41) = v28;
      return a1;
    case 0xCu:
      uint64_t v23 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v23;
      char v6 = 12;
      goto LABEL_42;
    case 0xDu:
      uint64_t v24 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v24;
      char v6 = 13;
LABEL_42:
      *(unsigned char *)(a1 + 41) = v6;
LABEL_43:
      swift_bridgeObjectRetain();
      break;
    default:
      long long v25 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v25;
      *(_OWORD *)(a1 + 26) = *(_OWORD *)(a2 + 26);
      break;
  }
  return a1;
}

uint64_t assignWithCopy for SchemaError(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 41);
    if (v4 >= 0xE) {
      unsigned int v4 = *(_DWORD *)a1 + 14;
    }
    switch(v4)
    {
      case 0u:
      case 1u:
      case 2u:
      case 3u:
      case 4u:
      case 5u:
      case 0xCu:
      case 0xDu:
        swift_bridgeObjectRelease();
        break;
      case 6u:
      case 7u:
      case 8u:
      case 9u:
      case 0xAu:
      case 0xBu:
        unsigned int v5 = *(unsigned __int8 *)(a1 + 40);
        if (v5 >= 2) {
          unsigned int v5 = *(_DWORD *)a1 + 2;
        }
        if (v5 <= 1) {
          sub_10001CA50(a1);
        }
        break;
      default:
        break;
    }
    unsigned int v6 = *((unsigned __int8 *)a2 + 41);
    if (v6 >= 0xE) {
      unsigned int v6 = *(_DWORD *)a2 + 14;
    }
    switch(v6)
    {
      case 0u:
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *((void *)a2 + 1);
        *(unsigned char *)(a1 + 41) = 0;
        goto LABEL_52;
      case 1u:
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *((void *)a2 + 1);
        char v7 = 1;
        goto LABEL_51;
      case 2u:
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *((void *)a2 + 1);
        char v7 = 2;
        goto LABEL_51;
      case 3u:
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *((void *)a2 + 1);
        char v7 = 3;
        goto LABEL_51;
      case 4u:
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *((void *)a2 + 1);
        char v7 = 4;
        goto LABEL_51;
      case 5u:
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *((void *)a2 + 1);
        char v7 = 5;
        goto LABEL_51;
      case 6u:
        unsigned int v8 = *((unsigned __int8 *)a2 + 40);
        if (v8 >= 2) {
          unsigned int v8 = *(_DWORD *)a2 + 2;
        }
        if (v8 == 1)
        {
          uint64_t v22 = *((void *)a2 + 3);
          *(void *)(a1 + 24) = v22;
          *(void *)(a1 + 32) = *((void *)a2 + 4);
          (**(void (***)(uint64_t, long long *))(v22 - 8))(a1, a2);
          *(unsigned char *)(a1 + 40) = 1;
        }
        else if (v8)
        {
          long long v23 = *a2;
          long long v24 = a2[1];
          *(_OWORD *)(a1 + 25) = *(long long *)((char *)a2 + 25);
          *(_OWORD *)a1 = v23;
          *(_OWORD *)(a1 + 16) = v24;
        }
        else
        {
          uint64_t v9 = *((void *)a2 + 3);
          *(void *)(a1 + 24) = v9;
          *(void *)(a1 + 32) = *((void *)a2 + 4);
          (**(void (***)(uint64_t, long long *))(v9 - 8))(a1, a2);
          *(unsigned char *)(a1 + 40) = 0;
        }
        char v25 = 6;
        goto LABEL_72;
      case 7u:
        unsigned int v10 = *((unsigned __int8 *)a2 + 40);
        if (v10 >= 2) {
          unsigned int v10 = *(_DWORD *)a2 + 2;
        }
        if (v10 == 1)
        {
          uint64_t v26 = *((void *)a2 + 3);
          *(void *)(a1 + 24) = v26;
          *(void *)(a1 + 32) = *((void *)a2 + 4);
          (**(void (***)(uint64_t, long long *))(v26 - 8))(a1, a2);
          *(unsigned char *)(a1 + 40) = 1;
        }
        else if (v10)
        {
          long long v27 = *a2;
          long long v28 = a2[1];
          *(_OWORD *)(a1 + 25) = *(long long *)((char *)a2 + 25);
          *(_OWORD *)a1 = v27;
          *(_OWORD *)(a1 + 16) = v28;
        }
        else
        {
          uint64_t v11 = *((void *)a2 + 3);
          *(void *)(a1 + 24) = v11;
          *(void *)(a1 + 32) = *((void *)a2 + 4);
          (**(void (***)(uint64_t, long long *))(v11 - 8))(a1, a2);
          *(unsigned char *)(a1 + 40) = 0;
        }
        char v25 = 7;
        goto LABEL_72;
      case 8u:
        unsigned int v12 = *((unsigned __int8 *)a2 + 40);
        if (v12 >= 2) {
          unsigned int v12 = *(_DWORD *)a2 + 2;
        }
        if (v12 == 1)
        {
          uint64_t v29 = *((void *)a2 + 3);
          *(void *)(a1 + 24) = v29;
          *(void *)(a1 + 32) = *((void *)a2 + 4);
          (**(void (***)(uint64_t, long long *))(v29 - 8))(a1, a2);
          *(unsigned char *)(a1 + 40) = 1;
        }
        else if (v12)
        {
          long long v39 = *a2;
          long long v40 = a2[1];
          *(_OWORD *)(a1 + 25) = *(long long *)((char *)a2 + 25);
          *(_OWORD *)a1 = v39;
          *(_OWORD *)(a1 + 16) = v40;
        }
        else
        {
          uint64_t v13 = *((void *)a2 + 3);
          *(void *)(a1 + 24) = v13;
          *(void *)(a1 + 32) = *((void *)a2 + 4);
          (**(void (***)(uint64_t, long long *))(v13 - 8))(a1, a2);
          *(unsigned char *)(a1 + 40) = 0;
        }
        char v25 = 8;
        goto LABEL_72;
      case 9u:
        unsigned int v14 = *((unsigned __int8 *)a2 + 40);
        if (v14 >= 2) {
          unsigned int v14 = *(_DWORD *)a2 + 2;
        }
        if (v14 == 1)
        {
          uint64_t v30 = *((void *)a2 + 3);
          *(void *)(a1 + 24) = v30;
          *(void *)(a1 + 32) = *((void *)a2 + 4);
          (**(void (***)(uint64_t, long long *))(v30 - 8))(a1, a2);
          *(unsigned char *)(a1 + 40) = 1;
        }
        else if (v14)
        {
          long long v31 = *a2;
          long long v32 = a2[1];
          *(_OWORD *)(a1 + 25) = *(long long *)((char *)a2 + 25);
          *(_OWORD *)a1 = v31;
          *(_OWORD *)(a1 + 16) = v32;
        }
        else
        {
          uint64_t v15 = *((void *)a2 + 3);
          *(void *)(a1 + 24) = v15;
          *(void *)(a1 + 32) = *((void *)a2 + 4);
          (**(void (***)(uint64_t, long long *))(v15 - 8))(a1, a2);
          *(unsigned char *)(a1 + 40) = 0;
        }
        char v25 = 9;
        goto LABEL_72;
      case 0xAu:
        unsigned int v16 = *((unsigned __int8 *)a2 + 40);
        if (v16 >= 2) {
          unsigned int v16 = *(_DWORD *)a2 + 2;
        }
        if (v16 == 1)
        {
          uint64_t v33 = *((void *)a2 + 3);
          *(void *)(a1 + 24) = v33;
          *(void *)(a1 + 32) = *((void *)a2 + 4);
          (**(void (***)(uint64_t, long long *))(v33 - 8))(a1, a2);
          *(unsigned char *)(a1 + 40) = 1;
        }
        else if (v16)
        {
          long long v34 = *a2;
          long long v35 = a2[1];
          *(_OWORD *)(a1 + 25) = *(long long *)((char *)a2 + 25);
          *(_OWORD *)a1 = v34;
          *(_OWORD *)(a1 + 16) = v35;
        }
        else
        {
          uint64_t v17 = *((void *)a2 + 3);
          *(void *)(a1 + 24) = v17;
          *(void *)(a1 + 32) = *((void *)a2 + 4);
          (**(void (***)(uint64_t, long long *))(v17 - 8))(a1, a2);
          *(unsigned char *)(a1 + 40) = 0;
        }
        char v25 = 10;
        goto LABEL_72;
      case 0xBu:
        unsigned int v18 = *((unsigned __int8 *)a2 + 40);
        if (v18 >= 2) {
          unsigned int v18 = *(_DWORD *)a2 + 2;
        }
        if (v18 == 1)
        {
          uint64_t v36 = *((void *)a2 + 3);
          *(void *)(a1 + 24) = v36;
          *(void *)(a1 + 32) = *((void *)a2 + 4);
          (**(void (***)(uint64_t, long long *))(v36 - 8))(a1, a2);
          *(unsigned char *)(a1 + 40) = 1;
        }
        else if (v18)
        {
          long long v37 = *a2;
          long long v38 = a2[1];
          *(_OWORD *)(a1 + 25) = *(long long *)((char *)a2 + 25);
          *(_OWORD *)a1 = v37;
          *(_OWORD *)(a1 + 16) = v38;
        }
        else
        {
          uint64_t v19 = *((void *)a2 + 3);
          *(void *)(a1 + 24) = v19;
          *(void *)(a1 + 32) = *((void *)a2 + 4);
          (**(void (***)(uint64_t, long long *))(v19 - 8))(a1, a2);
          *(unsigned char *)(a1 + 40) = 0;
        }
        char v25 = 11;
LABEL_72:
        *(unsigned char *)(a1 + 41) = v25;
        return a1;
      case 0xCu:
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *((void *)a2 + 1);
        char v7 = 12;
        goto LABEL_51;
      case 0xDu:
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *((void *)a2 + 1);
        char v7 = 13;
LABEL_51:
        *(unsigned char *)(a1 + 41) = v7;
LABEL_52:
        swift_bridgeObjectRetain();
        break;
      default:
        long long v20 = *a2;
        long long v21 = a2[1];
        *(_OWORD *)(a1 + 26) = *(long long *)((char *)a2 + 26);
        *(_OWORD *)a1 = v20;
        *(_OWORD *)(a1 + 16) = v21;
        break;
    }
  }
  return a1;
}

__n128 initializeWithTake for SchemaError(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 26) = *(_OWORD *)(a2 + 26);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for SchemaError(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 41);
    if (v4 >= 0xE) {
      unsigned int v4 = *(_DWORD *)a1 + 14;
    }
    switch(v4)
    {
      case 0u:
      case 1u:
      case 2u:
      case 3u:
      case 4u:
      case 5u:
      case 0xCu:
      case 0xDu:
        swift_bridgeObjectRelease();
        break;
      case 6u:
      case 7u:
      case 8u:
      case 9u:
      case 0xAu:
      case 0xBu:
        unsigned int v5 = *(unsigned __int8 *)(a1 + 40);
        if (v5 >= 2) {
          unsigned int v5 = *(_DWORD *)a1 + 2;
        }
        if (v5 <= 1) {
          sub_10001CA50(a1);
        }
        break;
      default:
        break;
    }
    unsigned int v6 = *(unsigned __int8 *)(a2 + 41);
    if (v6 >= 0xE) {
      unsigned int v6 = *(_DWORD *)a2 + 14;
    }
    switch(v6)
    {
      case 0u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(unsigned char *)(a1 + 41) = 0;
        return a1;
      case 1u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        char v7 = 1;
        goto LABEL_70;
      case 2u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        char v7 = 2;
        goto LABEL_70;
      case 3u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        char v7 = 3;
        goto LABEL_70;
      case 4u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        char v7 = 4;
        goto LABEL_70;
      case 5u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        char v7 = 5;
        goto LABEL_70;
      case 6u:
        unsigned int v8 = *(unsigned __int8 *)(a2 + 40);
        if (v8 >= 2) {
          unsigned int v8 = *(_DWORD *)a2 + 2;
        }
        if (v8 == 1)
        {
          long long v21 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v21;
          *(void *)(a1 + 32) = *(void *)(a2 + 32);
          *(unsigned char *)(a1 + 40) = 1;
        }
        else
        {
          long long v9 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v9;
          if (v8)
          {
            *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
          }
          else
          {
            *(void *)(a1 + 32) = *(void *)(a2 + 32);
            *(unsigned char *)(a1 + 40) = 0;
          }
        }
        char v7 = 6;
        goto LABEL_70;
      case 7u:
        unsigned int v10 = *(unsigned __int8 *)(a2 + 40);
        if (v10 >= 2) {
          unsigned int v10 = *(_DWORD *)a2 + 2;
        }
        if (v10 == 1)
        {
          long long v22 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v22;
          *(void *)(a1 + 32) = *(void *)(a2 + 32);
          *(unsigned char *)(a1 + 40) = 1;
        }
        else
        {
          long long v11 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v11;
          if (v10)
          {
            *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
          }
          else
          {
            *(void *)(a1 + 32) = *(void *)(a2 + 32);
            *(unsigned char *)(a1 + 40) = 0;
          }
        }
        char v7 = 7;
        goto LABEL_70;
      case 8u:
        unsigned int v12 = *(unsigned __int8 *)(a2 + 40);
        if (v12 >= 2) {
          unsigned int v12 = *(_DWORD *)a2 + 2;
        }
        if (v12 == 1)
        {
          long long v23 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v23;
          *(void *)(a1 + 32) = *(void *)(a2 + 32);
          *(unsigned char *)(a1 + 40) = 1;
        }
        else
        {
          long long v13 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v13;
          if (v12)
          {
            *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
          }
          else
          {
            *(void *)(a1 + 32) = *(void *)(a2 + 32);
            *(unsigned char *)(a1 + 40) = 0;
          }
        }
        char v7 = 8;
        goto LABEL_70;
      case 9u:
        unsigned int v14 = *(unsigned __int8 *)(a2 + 40);
        if (v14 >= 2) {
          unsigned int v14 = *(_DWORD *)a2 + 2;
        }
        if (v14 == 1)
        {
          long long v24 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v24;
          *(void *)(a1 + 32) = *(void *)(a2 + 32);
          *(unsigned char *)(a1 + 40) = 1;
        }
        else
        {
          long long v15 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v15;
          if (v14)
          {
            *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
          }
          else
          {
            *(void *)(a1 + 32) = *(void *)(a2 + 32);
            *(unsigned char *)(a1 + 40) = 0;
          }
        }
        char v7 = 9;
        goto LABEL_70;
      case 0xAu:
        unsigned int v16 = *(unsigned __int8 *)(a2 + 40);
        if (v16 >= 2) {
          unsigned int v16 = *(_DWORD *)a2 + 2;
        }
        if (v16 == 1)
        {
          long long v25 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v25;
          *(void *)(a1 + 32) = *(void *)(a2 + 32);
          *(unsigned char *)(a1 + 40) = 1;
        }
        else
        {
          long long v17 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v17;
          if (v16)
          {
            *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
          }
          else
          {
            *(void *)(a1 + 32) = *(void *)(a2 + 32);
            *(unsigned char *)(a1 + 40) = 0;
          }
        }
        char v7 = 10;
        goto LABEL_70;
      case 0xBu:
        unsigned int v18 = *(unsigned __int8 *)(a2 + 40);
        if (v18 >= 2) {
          unsigned int v18 = *(_DWORD *)a2 + 2;
        }
        if (v18 == 1)
        {
          long long v26 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v26;
          *(void *)(a1 + 32) = *(void *)(a2 + 32);
          *(unsigned char *)(a1 + 40) = 1;
        }
        else
        {
          long long v19 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v19;
          if (v18)
          {
            *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
          }
          else
          {
            *(void *)(a1 + 32) = *(void *)(a2 + 32);
            *(unsigned char *)(a1 + 40) = 0;
          }
        }
        char v7 = 11;
        goto LABEL_70;
      case 0xCu:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        char v7 = 12;
        goto LABEL_70;
      case 0xDu:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        char v7 = 13;
LABEL_70:
        *(unsigned char *)(a1 + 41) = v7;
        break;
      default:
        long long v20 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v20;
        *(_OWORD *)(a1 + 26) = *(_OWORD *)(a2 + 26);
        break;
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for SchemaError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xF2 && *(unsigned char *)(a1 + 42)) {
    return (*(_DWORD *)a1 + 242);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 41);
  if (v3 >= 0xF) {
    return (v3 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for SchemaError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF1)
  {
    *(_OWORD *)(result + 26) = 0u;
    *(_OWORD *)__n128 result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)__n128 result = a2 - 242;
    if (a3 >= 0xF2) {
      *(unsigned char *)(result + 42) = 1;
    }
  }
  else
  {
    if (a3 >= 0xF2) {
      *(unsigned char *)(result + 42) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 41) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_10012EEC4(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 *)(a1 + 41);
  if (result >= 0xE) {
    return (*(_DWORD *)a1 + 14);
  }
  return result;
}

uint64_t sub_10012EEE0(uint64_t result, unsigned int a2)
{
  if (a2 > 0xD)
  {
    *(_OWORD *)(result + 25) = 0u;
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)uint64_t result = a2 - 14;
    LOBYTE(a2) = 14;
  }
  *(unsigned char *)(result + 41) = a2;
  return result;
}

ValueMetadata *type metadata accessor for SchemaError()
{
  return &type metadata for SchemaError;
}

uint64_t sub_10012EF18(uint64_t result)
{
  if (result >= 6u) {
    return 6;
  }
  else {
    return result;
  }
}

Swift::Int sub_10012EF2C()
{
  return sub_100147A98(*v0);
}

Swift::Int sub_10012EF34(uint64_t a1)
{
  return sub_100147D84(a1, *v1);
}

uint64_t sub_10012EF3C@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_10012EF18(*a1);
  *a2 = result;
  return result;
}

void sub_10012EF68(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5 = v3;
  LOBYTE(v6) = a2;
  sub_100124DBC(v5, (uint64_t)&v104);
  if (v108)
  {
    if (v108 == 1)
    {
      sub_10001C1AC(&v104, (uint64_t)v101);
      uint64_t v9 = v102;
      uint64_t v10 = v103;
      sub_10001B620(v101, v102);
      id v11 = (id)PBReaderReadData();
      if (v11)
      {
        unsigned int v12 = v11;
        uint64_t v13 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v15 = v14;

        uint64_t v16 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v10 + 64))(v13, v15, v9, v10);
        if (v4)
        {
          sub_1000291B4(v13, v15);
        }
        else
        {
          uint64_t v36 = v16;
          uint64_t v37 = v17;
          sub_1000291B4(v13, v15);
          *(void *)a3 = v36;
          *(void *)(a3 + 8) = v37;
          *(unsigned char *)(a3 + 57) = 10;
        }
        sub_10001CA50((uint64_t)v101);
        return;
      }
      __break(1u);
      goto LABEL_129;
    }
    unsigned int v6 = v6;
    if (v106 | v107 | (unint64_t)v104 | v105 | *((void *)&v104 + 1))
    {
      uint64_t v29 = v106 | v107 | v105 | *((void *)&v104 + 1);
      if ((void)v104 != 1 || v29)
      {
        if ((void)v104 == 2 && !v29)
        {
          sub_10002A6DC();
          long long v38 = (int *)&OBJC_IVAR___PBDataReader__pos;
          long long v39 = (int *)&OBJC_IVAR___PBDataReader__length;
          long long v40 = (int *)&OBJC_IVAR___PBDataReader__bytes;
          while (1)
          {
            uint64_t v41 = *v38;
            uint64_t v42 = *(void *)(a1 + v41);
            unint64_t v43 = v42 + 1;
            if (v42 == -1 || v43 > *(void *)(a1 + *v39))
            {
              sub_100026CE4();
            }
            else
            {
              LOBYTE(v42) = *(unsigned char *)(*(void *)(a1 + *v40) + v42);
              *(void *)(a1 + v41) = v43;
            }
            if ((v42 & 0x80) == 0) {
              break;
            }
            sub_100024C8C();
            if (v44 >= 9)
            {
              uint64_t v45 = 0;
              goto LABEL_58;
            }
          }
          sub_10002C520();
          if (!v93) {
            uint64_t v45 = 0;
          }
LABEL_58:
          *(void *)a3 = v45;
          char v60 = 2;
          goto LABEL_127;
        }
        if ((void)v104 != 3 || v29)
        {
          if ((void)v104 != 4 || v29)
          {
            if ((void)v104 != 5 || v29)
            {
              if ((void)v104 != 6 || v29)
              {
                if ((void)v104 != 7 || v29)
                {
                  id v94 = (id)PBReaderReadData();
                  if (!v94)
                  {
LABEL_130:
                    __break(1u);
                    return;
                  }
                  v95 = v94;
                  uint64_t v96 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
                  uint64_t v98 = v97;

                  *(void *)a3 = v96;
                  *(void *)(a3 + 8) = v98;
                  char v60 = 9;
                }
                else
                {
                  id v86 = (id)PBReaderReadString();
                  if (!v86)
                  {
LABEL_129:
                    __break(1u);
                    goto LABEL_130;
                  }
                  uint64_t v87 = v86;
                  uint64_t v88 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                  uint64_t v90 = v89;

                  *(void *)a3 = v88;
                  *(void *)(a3 + 8) = v90;
                  char v60 = 8;
                }
              }
              else
              {
                sub_10002A6DC();
                char v72 = (int *)&OBJC_IVAR___PBDataReader__pos;
                uint64_t v73 = (int *)&OBJC_IVAR___PBDataReader__length;
                uint64_t v74 = (int *)&OBJC_IVAR___PBDataReader__bytes;
                while (1)
                {
                  uint64_t v75 = *v72;
                  uint64_t v76 = *(void *)(a1 + v75);
                  unint64_t v77 = v76 + 1;
                  if (v76 == -1 || v77 > *(void *)(a1 + *v73))
                  {
                    sub_100026CE4();
                  }
                  else
                  {
                    LOBYTE(v76) = *(unsigned char *)(*(void *)(a1 + *v74) + v76);
                    *(void *)(a1 + v75) = v77;
                  }
                  if ((v76 & 0x80) == 0) {
                    break;
                  }
                  sub_100024C8C();
                  if (v78 >= 9)
                  {
                    char v79 = 0;
                    goto LABEL_121;
                  }
                }
                sub_10002C520();
                BOOL v93 = !v93 || v92 == 0;
                char v79 = !v93;
LABEL_121:
                *(unsigned char *)a3 = v79;
                char v60 = 6;
              }
            }
            else
            {
              if (*(void *)(a1 + OBJC_IVAR___PBDataReader__pos) > 0xFFFFFFFFFFFFFFF7
                || (sub_100025CC0(), !v93 && v33))
              {
                *(unsigned char *)(a1 + OBJC_IVAR___PBDataReader__error) = 1;
                uint64_t v99 = 0;
              }
              else
              {
                uint64_t v99 = *(void *)(*(void *)(a1 + OBJC_IVAR___PBDataReader__bytes) + v70);
                *(void *)(a1 + v69) = v71;
              }
              *(void *)a3 = v99;
              char v60 = 5;
            }
          }
          else
          {
            if (*(void *)(a1 + OBJC_IVAR___PBDataReader__pos) > 0xFFFFFFFFFFFFFFFBLL
              || (sub_100025CC0(), !v93 && v33))
            {
              *(unsigned char *)(a1 + OBJC_IVAR___PBDataReader__error) = 1;
              int v91 = 0;
            }
            else
            {
              int v91 = *(_DWORD *)(*(void *)(a1 + OBJC_IVAR___PBDataReader__bytes) + v62);
              *(void *)(a1 + v61) = v63;
            }
            *(_DWORD *)a3 = v91;
            char v60 = 4;
          }
LABEL_127:
          *(unsigned char *)(a3 + 57) = v60;
          return;
        }
        if (v6 - 2 >= 4)
        {
          if (v6 == 1)
          {
            if (*(void *)(a1 + OBJC_IVAR___PBDataReader__pos) > 0xFFFFFFFFFFFFFFF7
              || (sub_100025CC0(), !v93 && v33))
            {
              uint64_t v100 = 0;
              *(unsigned char *)(a1 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              uint64_t v100 = *(void *)(*(void *)(a1 + OBJC_IVAR___PBDataReader__bytes) + v47);
              *(void *)(a1 + v46) = v48;
            }
            *(void *)a3 = v100;
          }
          else
          {
            char v81 = 0;
            uint64_t v82 = 0;
            while (1)
            {
              uint64_t v83 = *(void *)(a1 + OBJC_IVAR___PBDataReader__pos);
              unint64_t v84 = v83 + 1;
              if (v83 == -1 || v84 > *(void *)(a1 + OBJC_IVAR___PBDataReader__length))
              {
                char v85 = 0;
                *(unsigned char *)(a1 + OBJC_IVAR___PBDataReader__error) = 1;
              }
              else
              {
                char v85 = *(unsigned char *)(*(void *)(a1 + OBJC_IVAR___PBDataReader__bytes) + v83);
                *(void *)(a1 + OBJC_IVAR___PBDataReader__pos) = v84;
              }
              v82 |= (unint64_t)(v85 & 0x7F) << v81;
              if ((v85 & 0x80) == 0) {
                break;
              }
              v81 += 7;
              BOOL v33 = v6++ >= 9;
              if (v33)
              {
                uint64_t v82 = 0;
                goto LABEL_114;
              }
            }
            if (*(unsigned char *)(a1 + OBJC_IVAR___PBDataReader__error)) {
              uint64_t v82 = 0;
            }
LABEL_114:
            *(void *)a3 = v82;
          }
          char v60 = 3;
          goto LABEL_127;
        }
      }
      else if (v6 - 1 >= 4)
      {
        if (v6 == 5)
        {
          if (*(void *)(a1 + OBJC_IVAR___PBDataReader__pos) > 0xFFFFFFFFFFFFFFFBLL || (sub_100025CC0(), !v93 && v33))
          {
            int v80 = 0;
            *(unsigned char *)(a1 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            int v80 = *(_DWORD *)(*(void *)(a1 + OBJC_IVAR___PBDataReader__bytes) + v31);
            *(void *)(a1 + v30) = v32;
          }
          *(_DWORD *)a3 = v80;
        }
        else
        {
          char v64 = 0;
          uint64_t v65 = 0;
          while (1)
          {
            uint64_t v66 = *(void *)(a1 + OBJC_IVAR___PBDataReader__pos);
            unint64_t v67 = v66 + 1;
            if (v66 == -1 || v67 > *(void *)(a1 + OBJC_IVAR___PBDataReader__length))
            {
              char v68 = 0;
              *(unsigned char *)(a1 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              char v68 = *(unsigned char *)(*(void *)(a1 + OBJC_IVAR___PBDataReader__bytes) + v66);
              *(void *)(a1 + OBJC_IVAR___PBDataReader__pos) = v67;
            }
            v65 |= (unint64_t)(v68 & 0x7F) << v64;
            if ((v68 & 0x80) == 0) {
              break;
            }
            v64 += 7;
            BOOL v33 = v6++ >= 9;
            if (v33)
            {
              LODWORD(v65) = 0;
              goto LABEL_85;
            }
          }
          if (*(unsigned char *)(a1 + OBJC_IVAR___PBDataReader__error)) {
            LODWORD(v65) = 0;
          }
LABEL_85:
          *(_DWORD *)a3 = v65;
        }
        char v60 = 1;
        goto LABEL_127;
      }
LABEL_27:
      sub_10012F7AC();
      swift_allocError();
      uint64_t v35 = v34;
      sub_100124DBC(v5, v34);
      *(unsigned char *)(v35 + 41) = v6;
      swift_willThrow();
      return;
    }
    if ((_BYTE)v6) {
      goto LABEL_27;
    }
    sub_10002A6DC();
    unint64_t v49 = (int *)&OBJC_IVAR___PBDataReader__pos;
    uint64_t v50 = (int *)&OBJC_IVAR___PBDataReader__error;
    char v51 = 1;
    uint64_t v52 = (int *)&OBJC_IVAR___PBDataReader__length;
    char v53 = (int *)&OBJC_IVAR___PBDataReader__bytes;
    while (1)
    {
      uint64_t v54 = *v49;
      uint64_t v55 = *(void *)(a1 + v54);
      unint64_t v56 = v55 + 1;
      if (v55 == -1 || v56 > *(void *)(a1 + *v52))
      {
        char v57 = 0;
        *(unsigned char *)(a1 + *v50) = v51;
      }
      else
      {
        char v57 = *(unsigned char *)(*(void *)(a1 + *v53) + v55);
        *(void *)(a1 + v54) = v56;
      }
      if ((v57 & 0x80) == 0) {
        break;
      }
      sub_100024C8C();
      if (v58 >= 9)
      {
        int v59 = 0;
        goto LABEL_67;
      }
    }
    sub_10002C520();
    if (!v93) {
      int v59 = 0;
    }
LABEL_67:
    *(_DWORD *)a3 = v59;
    *(unsigned char *)(a3 + 57) = 0;
  }
  else
  {
    sub_10001C1AC(&v104, a3);
    sub_10002A6DC();
    long long v20 = (int *)&OBJC_IVAR___PBDataReader__pos;
    long long v21 = (int *)&OBJC_IVAR___PBDataReader__error;
    long long v22 = (int *)&OBJC_IVAR___PBDataReader__length;
    long long v23 = (int *)&OBJC_IVAR___PBDataReader__bytes;
    while (1)
    {
      uint64_t v24 = *v20;
      uint64_t v25 = *(void *)(a1 + v24);
      unint64_t v26 = v25 + 1;
      if (v25 == -1 || v26 > *(void *)(a1 + *v22))
      {
        sub_100026CE4();
      }
      else
      {
        LOBYTE(v25) = *(unsigned char *)(*(void *)(a1 + *v23) + v25);
        *(void *)(a1 + v24) = v26;
      }
      unint64_t v27 = ((unint64_t)(v25 & 0x7F) << v19) | v18;
      if ((v25 & 0x80) == 0) {
        break;
      }
      sub_100024C8C();
      if (v28 >= 9)
      {
        unint64_t v27 = 0;
        goto LABEL_25;
      }
    }
    unint64_t v27 = v27;
    if (*(unsigned char *)(a1 + *v21)) {
      unint64_t v27 = 0;
    }
LABEL_25:
    *(void *)(a3 + 40) = v27;
    *(void *)(a3 + 48) = 0;
    *(_WORD *)(a3 + 56) = 1793;
  }
}

unint64_t sub_10012F7AC()
{
  unint64_t result = qword_100221670;
  if (!qword_100221670)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100221670);
  }
  return result;
}

uint64_t destroy for ValueTypeError(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 40) <= 1u) {
    return sub_10001CA50(a1);
  }
  return a1;
}

uint64_t initializeWithCopy for ValueTypeError(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 40) == 1)
  {
    long long v5 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v5;
    (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1, a2);
    *(unsigned char *)(a1 + 40) = 1;
  }
  else if (*(unsigned char *)(a2 + 40))
  {
    long long v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v4;
    (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1, a2);
    *(unsigned char *)(a1 + 40) = 0;
  }
  *(unsigned char *)(a1 + 41) = *(unsigned char *)(a2 + 41);
  return a1;
}

uint64_t assignWithCopy for ValueTypeError(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    sub_100124E18(a1);
    if (*((unsigned char *)a2 + 40) == 1)
    {
      uint64_t v5 = *((void *)a2 + 3);
      *(void *)(a1 + 24) = v5;
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      (**(void (***)(uint64_t, long long *))(v5 - 8))(a1, a2);
      *(unsigned char *)(a1 + 40) = 1;
    }
    else if (*((unsigned char *)a2 + 40))
    {
      long long v6 = *a2;
      long long v7 = a2[1];
      *(_OWORD *)(a1 + 25) = *(long long *)((char *)a2 + 25);
      *(_OWORD *)a1 = v6;
      *(_OWORD *)(a1 + 16) = v7;
    }
    else
    {
      uint64_t v4 = *((void *)a2 + 3);
      *(void *)(a1 + 24) = v4;
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      (**(void (***)(uint64_t, long long *))(v4 - 8))(a1, a2);
      *(unsigned char *)(a1 + 40) = 0;
    }
  }
  *(unsigned char *)(a1 + 41) = *((unsigned char *)a2 + 41);
  return a1;
}

uint64_t assignWithTake for ValueTypeError(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_100124E18(a1);
    long long v4 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v4;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  }
  *(unsigned char *)(a1 + 41) = *(unsigned char *)(a2 + 41);
  return a1;
}

uint64_t getEnumTagSinglePayload for ValueTypeError(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFE && *(unsigned char *)(a1 + 42))
    {
      int v2 = *(_DWORD *)a1 + 253;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 40);
      if (v3 <= 2) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ValueTypeError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 40) = 0;
    *(void *)unint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 42) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 42) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 40) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ValueTypeError()
{
  return &type metadata for ValueTypeError;
}

unsigned char *storeEnumTagSinglePayload for ProtoWireType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10012FB98);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ProtoWireType()
{
  return &type metadata for ProtoWireType;
}

unint64_t sub_10012FBD4()
{
  unint64_t result = qword_100221678;
  if (!qword_100221678)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100221678);
  }
  return result;
}

void sub_10012FC20(uint64_t a1, unint64_t a2, Swift::String forSchemaName, sqlite3_context *a4)
{
  Swift::UInt32 v7 = SQLiteMessageTypeRegistry.id(forSchemaName:)(forSchemaName);
  uint64_t v9 = v8;
  if (v8) {
    goto LABEL_2;
  }
  Swift::UInt32 v11 = v7;
  uint64_t v12 = Data.count.getter();
  uint64_t v13 = v12 + 4;
  if (__OFADD__(v12, 4))
  {
    __break(1u);
    goto LABEL_19;
  }
  if (v13 < (uint64_t)0xFFFFFFFF80000000)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (v13 > 0x7FFFFFFF)
  {
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    JUMPOUT(0x10012FE90);
  }
  unint64_t v14 = sqlite3_malloc((int)v12 + 4);
  if (!v14)
  {
    sub_10013051C();
    uint64_t v9 = swift_allocError();
    *char v19 = 3;
    swift_willThrow();
LABEL_2:
    uint64_t v23 = v9;
    uint64_t v10 = sub_10002572C(&qword_10021B3C0);
    SQLiteContext.setError<A>(_:message:code:)((uint64_t)&v23, 0xD000000000000014, 0x80000001001B8D10, -1, a4, v10);
    swift_errorRelease();
    return;
  }
  unint64_t v15 = v14;
  switch(a2 >> 62)
  {
    case 1uLL:
      if (a1 >> 32 < (int)a1) {
        goto LABEL_21;
      }
      sub_100027BCC(a1, a2);
      long long v20 = (char *)sub_100026CF4((int)a1, a1 >> 32, a2 & 0x3FFFFFFFFFFFFFFFLL);
      break;
    case 2uLL:
      uint64_t v21 = *(void *)(a1 + 16);
      uint64_t v22 = *(void *)(a1 + 24);
      sub_100027BCC(a1, a2);
      swift_retain();
      swift_retain();
      long long v20 = (char *)sub_100026CF4(v21, v22, a2 & 0x3FFFFFFFFFFFFFFFLL);
      swift_release();
      swift_release();
      break;
    case 3uLL:
      uint64_t v18 = 0;
      uint64_t v17 = 0;
      int v16 = 0;
      goto LABEL_14;
    default:
      int v16 = BYTE6(a2);
      uint64_t v17 = a2 & 0xFFFFFFFFFFFFLL;
      uint64_t v18 = a1;
LABEL_14:
      long long v20 = (char *)sub_1001303F0(v18, v17, v16, v15, a1, a2);
      break;
  }
  *(_DWORD *)&v20[Data.count.getter()] = v11;

  SQLiteContext.setBuffer(_:ofSize:destructor:)((uint64_t)v15, v13, (void (__cdecl **)(void *))2, a4);
}

uint64_t sub_10012FEA0(sqlite3_value *a1)
{
  uint64_t result = SQLiteArgument.withUnsafeBytes<A>(_:)((uint64_t (*)(const void *, uint64_t))sub_100130208, v1, a1);
  if (!v2) {
    return v4;
  }
  return result;
}

void sub_10012FEF8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v9 = type metadata accessor for Data.Deallocator();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v26[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (a1)
  {
    if (__OFSUB__(a2, 4))
    {
      __break(1u);
    }
    else
    {
      sub_10013A398(*(_DWORD *)(a1 + a2 - 4), (uint64_t)v29);
      if (!v4)
      {
        uint64_t v30 = type metadata accessor for ProtobufPayload();
        sub_10001C20C((uint64_t)v29, (uint64_t)v26);
        (*(void (**)(unsigned char *, void, uint64_t))(v10 + 104))(v12, enum case for Data.Deallocator.none(_:), v9);
        uint64_t v13 = Data.init(bytesNoCopy:count:deallocator:)();
        uint64_t v15 = v14;
        sub_10001CA50((uint64_t)v29);
        uint64_t v16 = v27;
        uint64_t v17 = v28;
        uint64_t v18 = sub_10002E598((uint64_t)v26, v27);
        double v19 = __chkstk_darwin(v18);
        uint64_t v21 = &v26[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
        (*(void (**)(unsigned char *, double))(v22 + 16))(v21, v19);
        uint64_t v23 = sub_100032CB0((uint64_t)v21, v13, v15, v30, v16, v17);
        sub_10001CA50((uint64_t)v26);
        unint64_t v24 = sub_10012C940();
        *a4 = a3;
        a4[1] = &off_100202CC8;
        a4[2] = v23;
        a4[3] = v24;
        swift_retain();
      }
    }
  }
  else
  {
    sub_1001229F8();
    swift_allocError();
    *(void *)uint64_t v25 = 0xD000000000000031;
    *(void *)(v25 + 8) = 0x80000001001B8CD0;
    *(unsigned char *)(v25 + 41) = 3;
    swift_willThrow();
  }
}

uint64_t sub_100130184()
{
  uint64_t v0 = SQLiteMessageTypeRegistry.deinit();

  return _swift_deallocClassInstance(v0, 48, 7);
}

uint64_t type metadata accessor for SQLiteMessageInBlobBridge()
{
  return self;
}

uint64_t sub_1001301D8(sqlite3_value *a1)
{
  uint64_t result = sub_10012FEA0(a1);
  if (v1) {
    return v3;
  }
  return result;
}

void sub_100130208(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  sub_10012FEF8(a1, a2, v3, a3);
}

void *sub_100130224(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, unint64_t a6)
{
  uint64_t v10 = __DataStorage._bytes.getter();
  if (v10)
  {
    uint64_t v11 = v10;
    uint64_t v12 = __DataStorage._offset.getter();
    if (__OFSUB__(a1, v12))
    {
      __break(1u);
LABEL_13:
      __break(1u);
LABEL_14:
      __break(1u);
LABEL_15:
      __break(1u);
      JUMPOUT(0x10013031CLL);
    }
    uint64_t v13 = (const void *)(v11 + a1 - v12);
  }
  else
  {
    uint64_t v13 = 0;
  }
  __DataStorage._length.getter();
  size_t v14 = 0;
  switch(a6 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a5), a5)) {
        goto LABEL_13;
      }
      size_t v14 = HIDWORD(a5) - (int)a5;
LABEL_10:
      memcpy(a4, v13, v14);
      if (!a4) {
        goto LABEL_15;
      }
      sub_1000291B4(a5, a6);
      return a4;
    case 2uLL:
      uint64_t v16 = *(void *)(a5 + 16);
      uint64_t v15 = *(void *)(a5 + 24);
      size_t v14 = v15 - v16;
      if (!__OFSUB__(v15, v16)) {
        goto LABEL_10;
      }
      goto LABEL_14;
    case 3uLL:
      goto LABEL_10;
    default:
      size_t v14 = BYTE6(a6);
      goto LABEL_10;
  }
}

void *sub_10013032C(void *__src, int a2, int a3, void *__dst, uint64_t a5, unint64_t a6)
{
  size_t v9 = 0;
  switch(a6 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a5), a5))
      {
        __break(1u);
LABEL_9:
        __break(1u);
LABEL_10:
        __break(1u);
        JUMPOUT(0x1001303E0);
      }
      size_t v9 = HIDWORD(a5) - (int)a5;
LABEL_6:
      memcpy(__dst, __src, v9);
      if (!__dst) {
        goto LABEL_10;
      }
      sub_1000291B4(a5, a6);
      return __dst;
    case 2uLL:
      uint64_t v11 = *(void *)(a5 + 16);
      uint64_t v10 = *(void *)(a5 + 24);
      size_t v9 = v10 - v11;
      if (!__OFSUB__(v10, v11)) {
        goto LABEL_6;
      }
      goto LABEL_9;
    case 3uLL:
      goto LABEL_6;
    default:
      size_t v9 = BYTE6(a6);
      goto LABEL_6;
  }
}

void *sub_1001303F0(uint64_t a1, uint64_t a2, int a3, void *a4, uint64_t a5, unint64_t a6)
{
  uint64_t __src = a1;
  __int16 v13 = a2;
  char v14 = BYTE2(a2);
  char v15 = BYTE3(a2);
  char v16 = BYTE4(a2);
  char v17 = BYTE5(a2);
  sub_100027BCC(a5, a6);
  uint64_t v10 = sub_10013032C(&__src, (int)&v18, a3, a4, a5, a6);
  sub_1000291B4(a5, a6);
  return v10;
}

unint64_t sub_10013051C()
{
  unint64_t result = qword_1002217B0;
  if (!qword_1002217B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002217B0);
  }
  return result;
}

uint64_t sub_100130568()
{
  return CharacterSet.contains(_:)() & 1;
}

uint64_t CharacterSet.init(stringLiteral:)()
{
  CharacterSet.init(charactersIn:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1001305D4()
{
  return sub_100130654(&qword_1002217B8);
}

void *sub_100130608()
{
  return &protocol witness table for String;
}

uint64_t sub_100130614()
{
  return CharacterSet.init(stringLiteral:)();
}

uint64_t sub_100130620()
{
  return sub_100130654(&qword_1002217C0);
}

uint64_t sub_100130654(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for CharacterSet();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *sub_100130698()
{
  return &protocol witness table for String;
}

void *sub_1001306A4()
{
  return &protocol witness table for String;
}

uint64_t static ProtobufPayload.create(with:payload:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  sub_10001C20C(a1, (uint64_t)v8);
  type metadata accessor for ProtobufPayload();
  uint64_t v5 = swift_allocObject();
  sub_10001C1AC(v8, v5 + 16);
  *(void *)(v5 + 56) = a2;
  *(void *)(v5 + 64) = a3;
  sub_100032BB0((unint64_t *)&qword_100222A40, v6, (void (*)(uint64_t))type metadata accessor for ProtobufPayload);
  sub_100027BCC(a2, a3);
  return v5;
}

uint64_t ProtobufPayload.__allocating_init(with:payload:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001307FC(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100032CB0);
}

uint64_t ProtobufPayload.messageSchema.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10001C20C(v1 + 16, a1);
}

uint64_t ProtobufPayload.init(with:payload:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001307FC(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100032C2C);
}

uint64_t sub_1001307FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v10 = *(void *)(a1 + 24);
  uint64_t v11 = *(void *)(a1 + 32);
  sub_10002E598(a1, v10);
  sub_100026808();
  __chkstk_darwin(v12);
  char v14 = sub_10002C530(v13, v18);
  v15(v14);
  uint64_t v16 = a4(v5, a2, a3, v4, v10, v11);
  sub_10001CA50(a1);
  return v16;
}

uint64_t *ProtobufPayload.__allocating_init(with:from:payload:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8 = v6;
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 40))(v24, a1, a2, ObjectType, a4);
  if (v7)
  {
    sub_1000291B4(a5, a6);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    uint64_t v16 = v25;
    uint64_t v17 = v26;
    sub_10002E598((uint64_t)v24, v25);
    sub_100026808();
    __chkstk_darwin(v18);
    uint64_t v20 = sub_10002C530(v19, v23);
    v21(v20);
    a3 = sub_100032CB0(a4, a5, a6, v8, v16, v17);
    sub_10001CA50((uint64_t)v24);
  }
  return a3;
}

uint64_t ProtobufPayload.value(forKey:)()
{
  sub_10001B620((void *)(v0 + 16), *(void *)(v0 + 40));
  sub_100018040();
  uint64_t result = v2();
  if (!v1)
  {
    uint64_t v11 = sub_100024C98(result, v4, v5, v6, v7, v8, v9, v10, v12, v13[0]);
    ProtobufPayload.value(forProperty:)(v11);
    return sub_10001CA50((uint64_t)v13);
  }
  return result;
}

uint64_t ProtobufPayload.value(forKeypath:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v8 = *(void *)(v3 + 56);
  uint64_t v9 = *(void *)(v3 + 64);
  sub_10001C20C(v3 + 16, (uint64_t)v11);
  v11[40] = 1;
  sub_100142AB0(a1, a2, (uint64_t)v11, v12);
  uint64_t result = sub_100124E18((uint64_t)v11);
  if (!v4)
  {
    static ProtoTagPathHelper.extractValue(from:pathAndType:)(v8, v9, (uint64_t)v12, a3);
    return sub_1001326F8((uint64_t)v12);
  }
  return result;
}

uint64_t ProtobufPayload.value(forProperty:)(void *a1)
{
  sub_10001B620(a1, a1[3]);
  uint64_t v3 = sub_10002AE68();
  uint64_t result = v4(v3);
  if (!v1)
  {
    sub_10001B620(a1, a1[3]);
    uint64_t v6 = sub_10002AE68();
    uint64_t v8 = v7(v6);
    sub_10002572C(&qword_100221050);
    uint64_t v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_1001A2A20;
    *(void *)(v9 + 32) = v8;
    *(void *)(v9 + 40) = 0;
    *(unsigned char *)(v9 + 48) = 0;
    sub_100124DBC((uint64_t)v16, (uint64_t)&v15);
    uint64_t v14 = v9;
    uint64_t v10 = sub_10002769C();
    static ProtoTagPathHelper.extractValue(from:pathAndType:)(v10, v11, v12, v13);
    sub_1001326F8((uint64_t)&v14);
    return sub_100124E18((uint64_t)v16);
  }
  return result;
}

void *ProtobufPayload.forEachValue(ofKey:block:)(uint64_t a1, uint64_t a2, void (*a3)(unsigned char *))
{
  uint64_t v5 = v3;
  uint64_t v9 = v5[5];
  uint64_t v10 = v5[6];
  sub_10001B620(v5 + 2, v9);
  uint64_t result = (*(void *(**)(void *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 48))(v12, a1, a2, v9, v10);
  if (!v4)
  {
    static ProtoTagPathHelper.extractValues(from:property:block:)(v5[7], v5[8], v12, a3);
    return (void *)sub_10001CA50((uint64_t)v12);
  }
  return result;
}

uint64_t ProtobufPayload.forEachValue(ofProperty:block:)(void *a1, void (*a2)(unsigned char *))
{
  return static ProtoTagPathHelper.extractValues(from:property:block:)(*(void *)(v2 + 56), *(void *)(v2 + 64), a1, a2);
}

uint64_t ProtobufPayload.forEachValue(matchingPath:handler:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = static PropertyPathUtil.parse(_:)(a1, a2);
  if (v3) {
    return swift_errorRelease();
  }
  uint64_t v7 = v4;
  uint64_t v8 = sub_100032BB0((unint64_t *)&qword_100222A40, v5, (void (*)(uint64_t))type metadata accessor for ProtobufPayload);
  sub_100130E34(v2, v8, v7);
  return swift_bridgeObjectRelease();
}

uint64_t sub_100130E34(uint64_t a1, uint64_t a2, void *a3)
{
  void (*v7)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  void (*v10)(long long *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  double v14;
  uint64_t v15;
  void v16[3];
  uint64_t v17;
  uint64_t v18;
  long long v19;
  long long v20;
  uint64_t v21;
  unsigned char v22[48];
  uint64_t v23;

  if (a3[2])
  {
    uint64_t v5 = a3[4];
    uint64_t v4 = a3[5];
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v7 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(a2 + 16);
    swift_bridgeObjectRetain();
    v7(v16, ObjectType, a2);
    uint64_t v9 = v17;
    uint64_t v8 = v18;
    sub_10001B620(v16, v17);
    uint64_t v15 = a2;
    uint64_t v10 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 48);
    swift_bridgeObjectRetain();
    uint64_t v11 = v23;
    v10(&v19, v5, v4, v9, v8);
    if (v11)
    {
      swift_errorRelease();
      swift_bridgeObjectRelease();
      sub_10001CA50((uint64_t)v16);
      uint64_t v19 = 0u;
      uint64_t v20 = 0u;
      uint64_t v21 = 0;
LABEL_4:
      swift_bridgeObjectRelease();
      return sub_100019938((uint64_t)&v19, &qword_100221508);
    }
    swift_bridgeObjectRelease();
    sub_10001CA50((uint64_t)v16);
    if (!*((void *)&v20 + 1)) {
      goto LABEL_4;
    }
    uint64_t v13 = sub_10001C1AC(&v19, (uint64_t)v22);
    *(void *)&uint64_t v19 = 0;
    uint64_t v14 = __chkstk_darwin(v13);
    (*(void (**)(unsigned char *, uint64_t (*)(uint64_t), double))(v15 + 72))(v22, sub_100132814, v14);
    sub_10001CA50((uint64_t)v22);
    return swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100131080(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, char a7, uint64_t (*a8)(void), uint64_t a9, uint64_t a10)
{
  uint64_t v11 = v10;
  if ((a6 & 1) == 0)
  {
    uint64_t v14 = *a2;
    if (*a2 != a5)
    {
LABEL_17:
      if (!__OFADD__(v14++, 1)) {
        goto LABEL_26;
      }
      __break(1u);
      goto LABEL_20;
    }
  }
  if (a7)
  {
    uint64_t result = a8();
    uint64_t v14 = *a2 + 1;
    BOOL v15 = __OFADD__(*a2, 1);
    if (!v10) {
      goto LABEL_23;
    }
    if (!v15) {
      goto LABEL_26;
    }
    __break(1u);
  }
  sub_100032AD8(result, (uint64_t)v26);
  if (v27 != 10)
  {
LABEL_20:
    uint64_t result = sub_10001B840((uint64_t)v26);
    uint64_t v14 = *a2 + 1;
    if (!__OFADD__(*a2, 1)) {
      goto LABEL_26;
    }
    __break(1u);
LABEL_23:
    if (v15)
    {
      __break(1u);
      goto LABEL_25;
    }
LABEL_26:
    *a2 = v14;
    return result;
  }
  uint64_t v16 = v26[0];
  uint64_t v28 = v26[1];
  uint64_t v17 = sub_1001311F0(1, a10);
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  unint64_t v23 = v22;
  swift_bridgeObjectRetain();
  unint64_t v24 = sub_10013125C(v17, v19, v21, v23);
  sub_100130E34(v16, v28, v24, a8, a9);
  swift_unknownObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v14 = *a2 + 1;
  BOOL v15 = __OFADD__(*a2, 1);
  if (v11)
  {
    if (!v15) {
      goto LABEL_26;
    }
    __break(1u);
    goto LABEL_17;
  }
LABEL_25:
  if (!v15) {
    goto LABEL_26;
  }
  __break(1u);
  return result;
}

uint64_t sub_1001311F0(uint64_t result, uint64_t a2)
{
  if (result < 0)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t result = sub_100088164(0, result, v3);
  if (v4) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = result;
  }
  if (v3 < v5) {
    goto LABEL_9;
  }
  if ((v5 & 0x8000000000000000) == 0) {
    return a2;
  }
LABEL_10:
  __break(1u);
  return result;
}

void *sub_10013125C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if ((a4 & 1) == 0) {
    goto LABEL_2;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  uint64_t v9 = (void *)swift_dynamicCastClass();
  if (!v9)
  {
    swift_unknownObjectRelease();
    uint64_t v9 = _swiftEmptyArrayStorage;
  }
  uint64_t v10 = v9[2];
  swift_release();
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v10 != (a4 >> 1) - a3)
  {
LABEL_11:
    swift_unknownObjectRelease();
LABEL_2:
    uint64_t v8 = sub_100132560(a1, a2, a3, a4);
    goto LABEL_9;
  }
  uint64_t v8 = (void *)swift_dynamicCastClass();
  if (!v8)
  {
    swift_unknownObjectRelease();
    uint64_t v8 = _swiftEmptyArrayStorage;
  }
LABEL_9:
  swift_unknownObjectRelease();
  return v8;
}

uint64_t ProtobufPayload.forEachValue(_:)(void (*a1)(void *, long long *))
{
  uint64_t v4 = v1[7];
  uint64_t v5 = v1[8];
  uint64_t v6 = v1[5];
  uint64_t v7 = v1[6];
  sub_10001B620(v1 + 2, v6);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 40))(v6, v7);
  if (!v2)
  {
    uint64_t v9 = result;
    swift_bridgeObjectRetain();
    sub_10014441C(v4, v5, v9, a1);
    return swift_bridgeObjectRelease();
  }
  return result;
}

void *ProtobufPayload.getArray(matchingPath:)(uint64_t a1, unint64_t a2)
{
  return _swiftEmptyArrayStorage;
}

uint64_t sub_100131448(uint64_t a1, uint64_t *a2)
{
  sub_10013A4FC();
  uint64_t v4 = *(void *)(*a2 + 16);
  sub_10013A5A0(v4);
  uint64_t v5 = *a2;
  *(void *)(v5 + 16) = v4 + 1;
  return sub_100032AD8(a1, v5 + (v4 << 6) + 32);
}

uint64_t ProtobufPayload.value(forOneofName:)()
{
  sub_10001B620((void *)(v0 + 16), *(void *)(v0 + 40));
  uint64_t v2 = sub_100025CCC();
  uint64_t result = v3(v2);
  if (!v1)
  {
    uint64_t v12 = sub_100024C98(result, v5, v6, v7, v8, v9, v10, v11, v14, v15[0]);
    ProtobufPayload.value(forOneof:)(v12, v13);
    return sub_10001CA50((uint64_t)v15);
  }
  return result;
}

uint64_t ProtobufPayload.value(forOneof:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_10001B620(a1, a1[3]);
  uint64_t v4 = sub_100027220();
  uint64_t v6 = v5(v4);
  sub_1001315B0(v6, (void *)(v2 + 16), (uint64_t)_swiftEmptyArrayStorage, a2);
  return swift_bridgeObjectRelease();
}

id sub_1001315B0@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  if (qword_100220890 != -1) {
    swift_once();
  }
  uint64_t v5 = (void *)qword_100223308;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  [v5 updateData:isa];

  uint64_t v7 = (char *)qword_100223308;
  [(id)qword_100223308 seekToOffset:0];
  uint64_t v8 = *(void *)(a3 + 16);
  uint64_t v9 = Data.count.getter();
  if ((v9 & 0x8000000000000000) == 0)
  {
    uint64_t v10 = (char *)v9;
    if (v8)
    {
      uint64_t v11 = 0;
      uint64_t v12 = a3 + 32;
      uint64_t v66 = a3 + 32;
      do
      {
        uint64_t v67 = v11;
        uint64_t v13 = *(void *)(v12 + 8 * v11);
        unint64_t v14 = (unint64_t)[v7 position];
        if ((v14 & 0x8000000000000000) == 0 && v14 >= (unint64_t)v10) {
          goto LABEL_42;
        }
        char v15 = 0;
        unsigned int v16 = 0;
        uint64_t v17 = 0;
        while (1)
        {
          while (1)
          {
            unint64_t v18 = *(void *)&v7[OBJC_IVAR___PBDataReader__pos];
            if (v18 == -1 || v18 >= *(void *)&v7[OBJC_IVAR___PBDataReader__length])
            {
              char v20 = 0;
              v7[OBJC_IVAR___PBDataReader__error] = 1;
            }
            else
            {
              unint64_t v19 = v18 + 1;
              char v20 = *(unsigned char *)(*(void *)&v7[OBJC_IVAR___PBDataReader__bytes] + v18);
              *(void *)&v7[OBJC_IVAR___PBDataReader__pos] = v19;
            }
            v17 |= (unint64_t)(v20 & 0x7F) << v15;
            if ((v20 & 0x80) == 0) {
              break;
            }
            v15 += 7;
            BOOL v22 = v16++ >= 9;
            if (v22)
            {
              unint64_t v21 = 0;
              goto LABEL_20;
            }
          }
          unint64_t v21 = v7[OBJC_IVAR___PBDataReader__error] ? 0 : v17;
LABEL_20:
          int v23 = v21 & 7;
          if (v13 == (v21 >> 3)) {
            break;
          }
          PBReaderSkipValueWithTag();
          unint64_t v24 = (unint64_t)[v7 position];
          unsigned int v16 = 0;
          char v15 = 0;
          uint64_t v17 = 0;
          if ((v24 & 0x8000000000000000) == 0)
          {
            uint64_t v17 = 0;
            if (v24 >= (unint64_t)v10) {
              goto LABEL_42;
            }
          }
        }
        if (v23 != 2)
        {
          sub_1001229F8();
          swift_allocError();
          uint64_t v50 = v61;
          _StringGuts.grow(_:)(38);
          swift_bridgeObjectRelease();
          *(void *)&long long v72 = 0xD000000000000024;
          *((void *)&v72 + 1) = 0x80000001001B8A70;
          LOBYTE(v71[0]) = v23;
LABEL_68:
          v51._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v51);
          swift_bridgeObjectRelease();
          uint64_t v52 = *((void *)&v72 + 1);
          *(void *)uint64_t v50 = v72;
          *(void *)(v50 + 8) = v52;
          char v53 = 12;
          goto LABEL_69;
        }
        char v25 = 0;
        unsigned int v26 = 0;
        uint64_t v27 = 0;
        while (1)
        {
          unint64_t v28 = *(void *)&v7[OBJC_IVAR___PBDataReader__pos];
          if (v28 == -1 || v28 >= *(void *)&v7[OBJC_IVAR___PBDataReader__length])
          {
            char v30 = 0;
            v7[OBJC_IVAR___PBDataReader__error] = 1;
          }
          else
          {
            unint64_t v29 = v28 + 1;
            char v30 = *(unsigned char *)(*(void *)&v7[OBJC_IVAR___PBDataReader__bytes] + v28);
            *(void *)&v7[OBJC_IVAR___PBDataReader__pos] = v29;
          }
          v27 |= (unint64_t)(v30 & 0x7F) << v25;
          if ((v30 & 0x80) == 0) {
            break;
          }
          v25 += 7;
          BOOL v46 = v26++ > 8;
          if (v46)
          {
            uint64_t v31 = 0;
            goto LABEL_38;
          }
        }
        if (v7[OBJC_IVAR___PBDataReader__error]) {
          uint64_t v31 = 0;
        }
        else {
          uint64_t v31 = v27;
        }
        if (v31 < 0) {
          goto LABEL_77;
        }
LABEL_38:
        unint64_t v32 = (unint64_t)[v7 position];
        if ((v32 & 0x8000000000000000) != 0) {
          goto LABEL_77;
        }
        uint64_t v11 = v67 + 1;
        uint64_t v10 = (char *)(v32 + v31);
        uint64_t v12 = v66;
      }
      while (v67 + 1 != v8);
    }
    unint64_t v33 = (unint64_t)[v7 position];
    if ((v33 & 0x8000000000000000) == 0 && v33 >= (unint64_t)v10)
    {
LABEL_42:
      *(_WORD *)(a4 + 96) = 0;
      *(_OWORD *)(a4 + 64) = 0u;
      *(_OWORD *)(a4 + 80) = 0u;
      *(_OWORD *)(a4 + 32) = 0u;
      *(_OWORD *)(a4 + 48) = 0u;
      *(_OWORD *)a4 = 0u;
      *(_OWORD *)(a4 + 16) = 0u;
      return [v7 updateData:0];
    }
    char v35 = 0;
    unsigned int v36 = 0;
    unint64_t v37 = 0;
    while (1)
    {
      while (1)
      {
        unint64_t v38 = *(void *)&v7[OBJC_IVAR___PBDataReader__pos];
        if (v38 == -1 || v38 >= *(void *)&v7[OBJC_IVAR___PBDataReader__length])
        {
          char v40 = 0;
          v7[OBJC_IVAR___PBDataReader__error] = 1;
        }
        else
        {
          unint64_t v39 = v38 + 1;
          char v40 = *(unsigned char *)(*(void *)&v7[OBJC_IVAR___PBDataReader__bytes] + v38);
          *(void *)&v7[OBJC_IVAR___PBDataReader__pos] = v39;
        }
        v37 |= (unint64_t)(v40 & 0x7F) << v35;
        if (v40 < 0) {
          break;
        }
        if (v7[OBJC_IVAR___PBDataReader__error]) {
          unint64_t v41 = 0;
        }
        else {
          unint64_t v41 = v37;
        }
LABEL_55:
        char v42 = v41 & 7;
        uint64_t v43 = *(void *)(a1 + 16);
        if (v43)
        {
          uint64_t v44 = (v41 >> 3);
          uint64_t v45 = (uint64_t *)(a1 + 40);
          while (1)
          {
            BOOL v46 = *(v45 - 1) > v44 || *v45 < v44;
            if (!v46) {
              break;
            }
            v45 += 2;
            if (!--v43) {
              goto LABEL_63;
            }
          }
          char v48 = sub_10012EF18(v41 & 7);
          if (v48 == 6)
          {
            sub_1001229F8();
            swift_allocError();
            uint64_t v50 = v49;
            _StringGuts.grow(_:)(21);
            swift_bridgeObjectRelease();
            *(void *)&long long v72 = 0xD000000000000013;
            *((void *)&v72 + 1) = 0x80000001001B8DD0;
            LOBYTE(v71[0]) = v42;
            goto LABEL_68;
          }
          char v55 = v48;
          uint64_t v56 = a2[3];
          uint64_t v57 = a2[4];
          sub_10001B620(a2, v56);
          uint64_t v58 = (*(uint64_t (**)(uint64_t, uint64_t))(v57 + 40))(v56, v57);
          if (v70) {
            return [v7 updateData:0];
          }
          sub_100139FC4(v44, v58, (uint64_t)&v72);
          swift_bridgeObjectRelease();
          if (v73)
          {
            sub_10001C1AC(&v72, (uint64_t)v75);
            sub_10001C20C((uint64_t)v75, (uint64_t)v74);
            uint64_t v59 = v76;
            uint64_t v60 = v77;
            sub_10001B620(v75, v76);
            (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v60 + 40))(v71, v59, v60);
            sub_10012EF68(qword_100223308, v55, (uint64_t)&v72);
            sub_100124E18((uint64_t)v71);
            sub_10001C1AC(v74, a4);
            sub_10001B978((uint64_t)&v72, a4 + 40);
            sub_10001CA50((uint64_t)v75);
            uint64_t v54 = (void *)qword_100223308;
            return [v54 updateData:0];
          }
          sub_100019938((uint64_t)&v72, &qword_100221508);
          sub_1001229F8();
          swift_allocError();
          uint64_t v50 = v62;
          *(void *)&long long v72 = 0x6761742068746957;
          *((void *)&v72 + 1) = 0xE900000000000020;
          v71[0] = v44;
          v63._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v63);
          swift_bridgeObjectRelease();
          uint64_t v64 = *((void *)&v72 + 1);
          *(void *)uint64_t v50 = v72;
          *(void *)(v50 + 8) = v64;
          char v53 = 4;
LABEL_69:
          *(unsigned char *)(v50 + 41) = v53;
          swift_willThrow();
          uint64_t v54 = (void *)qword_100223308;
          return [v54 updateData:0];
        }
LABEL_63:
        PBReaderSkipValueWithTag();
        unint64_t v47 = (unint64_t)[v7 position];
        unsigned int v36 = 0;
        char v35 = 0;
        unint64_t v37 = 0;
        if ((v47 & 0x8000000000000000) == 0)
        {
          unint64_t v37 = 0;
          if (v47 >= (unint64_t)v10) {
            goto LABEL_42;
          }
        }
      }
      v35 += 7;
      BOOL v22 = v36++ >= 9;
      if (v22)
      {
        unint64_t v41 = 0;
        goto LABEL_55;
      }
    }
  }
LABEL_77:
  id result = (id)_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

Swift::String_optional __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ProtobufPayload.propertyName(forOneofName:)(Swift::String forOneofName)
{
  uint64_t v3 = v1;
  object = forOneofName._object;
  uint64_t countAndFlagsBits = forOneofName._countAndFlagsBits;
  uint64_t v6 = v3[5];
  uint64_t v7 = v3[6];
  uint64_t v8 = sub_10001B620(v3 + 2, v6);
  uint64_t v9 = object;
  uint64_t v10 = (uint64_t)v8;
  (*(void (**)(void *__return_ptr, uint64_t, void *, uint64_t, uint64_t))(v7 + 56))(v15, countAndFlagsBits, v9, v6, v7);
  if (!v2)
  {
    uint64_t v10 = ProtobufPayload.propertyName(forOneof:)(v15);
    uint64_t v3 = v11;
    sub_10001CA50((uint64_t)v15);
  }
  uint64_t v12 = v10;
  uint64_t v13 = v3;
  result.value._object = v13;
  result.value._uint64_t countAndFlagsBits = v12;
  return result;
}

uint64_t ProtobufPayload.propertyName(forOneof:)(void *a1)
{
  sub_10001B620(a1, a1[3]);
  uint64_t v4 = sub_100027220();
  uint64_t v6 = v5(v4);
  uint64_t v7 = sub_1001282A8(v6, *(void *)(v1 + 56), *(void *)(v1 + 64), (uint64_t)_swiftEmptyArrayStorage);
  char v9 = v8;
  uint64_t result = swift_bridgeObjectRelease();
  if (!v2)
  {
    if (v9)
    {
      return 0;
    }
    else
    {
      uint64_t v11 = a1[3];
      uint64_t v12 = a1[4];
      sub_10001B620(a1, v11);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))(v7, v11, v12);
    }
  }
  return result;
}

uint64_t ProtobufPayload.property(forOneofName:)()
{
  sub_10001B620((void *)(v0 + 16), *(void *)(v0 + 40));
  uint64_t v2 = sub_100025CCC();
  uint64_t result = v3(v2);
  if (!v1)
  {
    uint64_t v12 = sub_100024C98(result, v5, v6, v7, v8, v9, v10, v11, v14, v15[0]);
    ProtobufPayload.property(forOneof:)(v12, v13);
    return sub_10001CA50((uint64_t)v15);
  }
  return result;
}

uint64_t ProtobufPayload.property(forOneof:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = ProtobufPayload.propertyName(forOneof:)(a1);
  if (!v3)
  {
    if (v6)
    {
      sub_10001B620((void *)(v2 + 16), *(void *)(v2 + 40));
      sub_10002769C();
      sub_100018040();
      v7();
      return swift_bridgeObjectRelease();
    }
    else
    {
      *(void *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
    }
  }
  return result;
}

Swift::String __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ProtobufPayload.asJSON()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for JSONEncoder.OutputFormatting();
  __chkstk_darwin(v5);
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  sub_10002572C(&qword_1002217C8);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1001A3830;
  static JSONEncoder.OutputFormatting.prettyPrinted.getter();
  static JSONEncoder.OutputFormatting.sortedKeys.getter();
  uint64_t v19 = v6;
  sub_100032BB0(&qword_1002217D0, 255, (void (*)(uint64_t))&type metadata accessor for JSONEncoder.OutputFormatting);
  sub_10002572C(&qword_1002217D8);
  sub_100132768();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  dispatch thunk of JSONEncoder.outputFormatting.setter();
  uint64_t v19 = v1;
  type metadata accessor for ProtobufPayload();
  sub_100032BB0(&qword_1002217E8, v7, (void (*)(uint64_t))type metadata accessor for ProtobufPayload);
  uint64_t v8 = v18[1];
  uint64_t v9 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  if (!v8)
  {
    uint64_t v11 = v9;
    unint64_t v12 = v10;
    static String.Encoding.utf8.getter();
    uint64_t v4 = (char *)String.init(data:encoding:)();
    uint64_t v5 = v13;
    sub_1000291B4(v11, v12);
    if (!v5)
    {
      sub_1001229F8();
      swift_allocError();
      sub_100026C04(v16, 0xD000000000000017);
    }
  }
  swift_release();
  uint64_t v14 = (uint64_t)v4;
  char v15 = (void *)v5;
  result._object = v15;
  result._uint64_t countAndFlagsBits = v14;
  return result;
}

uint64_t ProtobufPayload.deinit()
{
  sub_10001CA50(v0 + 16);
  sub_1000291B4(*(void *)(v0 + 56), *(void *)(v0 + 64));
  return v0;
}

uint64_t sub_100132368(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return static ProtobufPayload.create(with:payload:)(a1, a2, a3);
}

uint64_t sub_100132380(void *a1, void (*a2)(void *__return_ptr, void), uint64_t a3)
{
  return static ProtobufPayload.create(with:constructor:)(a1, a2, a3);
}

uint64_t sub_100132398(void *a1)
{
  return ProtobufPayload.value(forProperty:)(a1);
}

uint64_t sub_1001323B0()
{
  return ProtobufPayload.value(forKey:)();
}

uint64_t sub_1001323C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return ProtobufPayload.value(forKeypath:)(a1, a2, a3);
}

uint64_t sub_1001323E0(void *a1, void (*a2)(unsigned char *))
{
  return ProtobufPayload.forEachValue(ofProperty:block:)(a1, a2);
}

void *sub_1001323F8(uint64_t a1, uint64_t a2, void (*a3)(unsigned char *))
{
  return ProtobufPayload.forEachValue(ofKey:block:)(a1, a2, a3);
}

uint64_t sub_100132410(uint64_t a1, unint64_t a2)
{
  return ProtobufPayload.forEachValue(matchingPath:handler:)(a1, a2);
}

uint64_t sub_100132428(void (*a1)(void *, long long *))
{
  return ProtobufPayload.forEachValue(_:)(a1);
}

void *sub_100132440(uint64_t a1, unint64_t a2)
{
  return ProtobufPayload.getArray(matchingPath:)(a1, a2);
}

uint64_t sub_100132458(void *a1)
{
  return ProtobufPayload.propertyName(forOneof:)(a1);
}

uint64_t sub_100132470(uint64_t a1, uint64_t a2)
{
  return ProtobufPayload.propertyName(forOneofName:)(*(Swift::String *)&a1).value._countAndFlagsBits;
}

uint64_t sub_100132488@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return ProtobufPayload.value(forOneof:)(a1, a2);
}

uint64_t sub_1001324A0()
{
  return ProtobufPayload.value(forOneofName:)();
}

uint64_t sub_1001324B8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return ProtobufPayload.property(forOneof:)(a1, a2);
}

uint64_t sub_1001324D0()
{
  return ProtobufPayload.property(forOneofName:)();
}

uint64_t sub_1001324E8()
{
  return ProtobufPayload.asJSON()()._countAndFlagsBits;
}

uint64_t sub_100132500(void *a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return SchematizedPayload.encode(to:)(a1, a2, WitnessTable);
}

void *sub_100132560(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v5)
  {
    if (v5 <= 0)
    {
      uint64_t v8 = _swiftEmptyArrayStorage;
    }
    else
    {
      sub_10002572C(&qword_100221068);
      uint64_t v8 = (void *)swift_allocObject();
      size_t v9 = j__malloc_size(v8);
      long long v8[2] = v5;
      v8[3] = 2 * ((uint64_t)(v9 - 32) / 32);
    }
    if (v4 != a3)
    {
      sub_100149EF0(a2 + 32 * a3, v5, (unint64_t)(v8 + 4));
      return v8;
    }
LABEL_11:
    __break(1u);
    JUMPOUT(0x100132620);
  }
  return _swiftEmptyArrayStorage;
}

void *sub_100132630(uint64_t a1, void *(*a2)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t a3, uint64_t a4)
{
  Swift::String result = a2(&v6, a1, a1 + a4);
  if (!v4) {
    return (void *)v6;
  }
  return result;
}

void sub_10013267C(uint64_t a1, unint64_t a2, uint64_t a3, void *a4)
{
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_1000291B4(a1, a2);
  [a4 writeData:isa forTag:a3];
}

uint64_t sub_1001326F8(uint64_t a1)
{
  return a1;
}

uint64_t sub_10013274C(uint64_t a1)
{
  return sub_100131448(a1, *(uint64_t **)(v1 + 16));
}

unint64_t sub_100132768()
{
  unint64_t result = qword_1002217E0;
  if (!qword_1002217E0)
  {
    sub_1000371D4(&qword_1002217D8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002217E0);
  }
  return result;
}

uint64_t sub_1001327BC(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100032BB0(&qword_1002217E8, a2, (void (*)(uint64_t))type metadata accessor for ProtobufPayload);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100132814(uint64_t a1)
{
  return sub_100131080(a1, *(uint64_t **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(unsigned char *)(v1 + 48), *(unsigned char *)(v1 + 49), *(uint64_t (**)(void))(v1 + 56), *(void *)(v1 + 64), *(void *)(v1 + 72));
}

uint64_t sub_100132850(uint64_t a1)
{
  return a1;
}

uint64_t sub_1001328A4(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5)
{
  *(unsigned char *)(v5 + 88) = 1;
  *(unsigned char *)(v5 + 74) = a3[32];
  *(void *)(v5 + 80) = *((void *)a3 + 3);
  char v9 = *a3;
  sub_10013352C((uint64_t)(a3 + 8), (uint64_t)v14);
  v11[0] = v9;
  sub_10013352C((uint64_t)v14, (uint64_t)v12);
  v12[3] = a5;
  swift_unknownObjectWeakInit();
  swift_retain();
  swift_unknownObjectRelease();
  char v13 = 0;
  sub_1001334BC((uint64_t)v11, v5 + 32);
  swift_release();
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  return v5;
}

uint64_t sub_10013296C@<X0>(uint64_t a1@<X8>)
{
  swift_beginAccess();
  sub_10013341C(v1 + 32, (uint64_t)v29);
  if (v29[41] == 1)
  {
    uint64_t v3 = v29;
  }
  else
  {
    sub_100133454((uint64_t)v29, (uint64_t)v25);
    switch(v25[0])
    {
      case 1:
        sub_10013348C((uint64_t)v25);
        sub_10002C550();
        char v24 = v4;
        goto LABEL_12;
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 8:
      case 9:
        sub_10013348C((uint64_t)v25);
        sub_10002C550();
        goto LABEL_11;
      case 7:
        if (!v27 || (uint64_t v5 = v26, !swift_unknownObjectWeakLoadStrong()))
        {
          sub_1001229F8();
          swift_allocError();
          uint64_t v17 = 10;
          goto LABEL_22;
        }
        uint64_t v6 = v28;
        swift_getObjectType();
        uint64_t v7 = v5;
        uint64_t v8 = *(void (**)(uint64_t))(v6 + 48);
        swift_bridgeObjectRetain();
        uint64_t v9 = sub_100026D14();
        v8(v9);
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = sub_10013348C((uint64_t)v25);
        if (v7) {
          return result;
        }
        char v20 = 0;
        goto LABEL_19;
      case 0xA:
        if (!v27 || (uint64_t v11 = v26, !swift_unknownObjectWeakLoadStrong()))
        {
          sub_1001229F8();
          swift_allocError();
          uint64_t v17 = 9;
LABEL_22:
          *(void *)uint64_t v16 = v17;
          *(_OWORD *)(v16 + 8) = 0u;
          *(_OWORD *)(v16 + 24) = 0u;
          *(_WORD *)(v16 + 40) = 3584;
          swift_willThrow();
          return sub_10013348C((uint64_t)v25);
        }
        uint64_t v12 = v28;
        swift_getObjectType();
        uint64_t v13 = v11;
        uint64_t v14 = *(void (**)(uint64_t))(v12 + 40);
        swift_bridgeObjectRetain();
        uint64_t v15 = sub_100026D14();
        v14(v15);
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = sub_10013348C((uint64_t)v25);
        if (v13) {
          return result;
        }
        char v20 = 1;
LABEL_19:
        sub_10012D7D4((uint64_t)v19, (uint64_t)v22);
LABEL_12:
        sub_100124DBC((uint64_t)v22, (uint64_t)v19);
        char v21 = 1;
        sub_1001334BC((uint64_t)v19, (uint64_t)v18);
        swift_beginAccess();
        sub_1001334F4((uint64_t)v18, v1 + 32);
        swift_endAccess();
        uint64_t v3 = v22;
        break;
      default:
        sub_10013348C((uint64_t)v25);
        memset(v22, 0, sizeof(v22));
        uint64_t v23 = 0;
LABEL_11:
        char v24 = 2;
        goto LABEL_12;
    }
  }
  return sub_10012D7D4((uint64_t)v3, a1);
}

uint64_t sub_100132CC4()
{
  return sub_1001333EC(v0 + 32);
}

uint64_t sub_100132CCC()
{
  swift_bridgeObjectRelease();
  sub_1001333EC(v0 + 32);

  return _swift_deallocClassInstance(v0, 89, 7);
}

uint64_t type metadata accessor for ProtoProperty()
{
  return self;
}

uint64_t destroy for ProtoProperty.ProtoPropertyInfo(uint64_t result)
{
  unsigned int v1 = *(unsigned __int8 *)(result + 41);
  if (v1 >= 2) {
    unsigned int v1 = *(_DWORD *)result + 2;
  }
  if (v1 == 1)
  {
    unsigned int v2 = *(unsigned __int8 *)(result + 40);
    if (v2 >= 2) {
      unsigned int v2 = *(_DWORD *)result + 2;
    }
    if (v2 <= 1)
    {
      return sub_10001CA50(result);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    return swift_unknownObjectWeakDestroy();
  }
  return result;
}

uint64_t initializeWithCopy for ProtoProperty.ProtoPropertyInfo(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(unsigned __int8 *)(a2 + 41);
  if (v4 >= 2) {
    unsigned int v4 = *(_DWORD *)a2 + 2;
  }
  if (v4 == 1)
  {
    unsigned int v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      long long v9 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v9;
      (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1, a2);
      char v8 = 1;
      *(unsigned char *)(a1 + 40) = 1;
    }
    else
    {
      if (v5)
      {
        long long v10 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v10;
        *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
      }
      else
      {
        long long v6 = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 24) = v6;
        (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1, a2);
        *(unsigned char *)(a1 + 40) = 0;
      }
      char v8 = 1;
    }
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    uint64_t v7 = *(void *)(a2 + 16);
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    *(void *)(a1 + 16) = v7;
    swift_bridgeObjectRetain();
    swift_unknownObjectWeakCopyInit();
    char v8 = 0;
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
  }
  *(unsigned char *)(a1 + 41) = v8;
  return a1;
}

uint64_t assignWithCopy for ProtoProperty.ProtoPropertyInfo(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 41);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 == 1)
    {
      unsigned int v5 = *(unsigned __int8 *)(a1 + 40);
      if (v5 >= 2) {
        unsigned int v5 = *(_DWORD *)a1 + 2;
      }
      if (v5 <= 1) {
        sub_10001CA50(a1);
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_unknownObjectWeakDestroy();
    }
    unsigned int v6 = *((unsigned __int8 *)a2 + 41);
    if (v6 >= 2) {
      unsigned int v6 = *(_DWORD *)a2 + 2;
    }
    if (v6 == 1)
    {
      unsigned int v7 = *((unsigned __int8 *)a2 + 40);
      if (v7 >= 2) {
        unsigned int v7 = *(_DWORD *)a2 + 2;
      }
      if (v7 == 1)
      {
        uint64_t v10 = *((void *)a2 + 3);
        *(void *)(a1 + 24) = v10;
        *(void *)(a1 + 32) = *((void *)a2 + 4);
        (**(void (***)(uint64_t, long long *))(v10 - 8))(a1, a2);
        char v9 = 1;
        *(unsigned char *)(a1 + 40) = 1;
      }
      else
      {
        if (v7)
        {
          long long v11 = *a2;
          long long v12 = a2[1];
          *(_OWORD *)(a1 + 25) = *(long long *)((char *)a2 + 25);
          *(_OWORD *)a1 = v11;
          *(_OWORD *)(a1 + 16) = v12;
        }
        else
        {
          uint64_t v8 = *((void *)a2 + 3);
          *(void *)(a1 + 24) = v8;
          *(void *)(a1 + 32) = *((void *)a2 + 4);
          (**(void (***)(uint64_t, long long *))(v8 - 8))(a1, a2);
          *(unsigned char *)(a1 + 40) = 0;
        }
        char v9 = 1;
      }
    }
    else
    {
      *(unsigned char *)a1 = *(unsigned char *)a2;
      *(void *)(a1 + 8) = *((void *)a2 + 1);
      *(void *)(a1 + 16) = *((void *)a2 + 2);
      swift_bridgeObjectRetain();
      swift_unknownObjectWeakCopyInit();
      char v9 = 0;
      *(void *)(a1 + 32) = *((void *)a2 + 4);
    }
    *(unsigned char *)(a1 + 41) = v9;
  }
  return a1;
}

uint64_t initializeWithTake for ProtoProperty.ProtoPropertyInfo(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(unsigned __int8 *)(a2 + 41);
  if (v4 >= 2) {
    unsigned int v4 = *(_DWORD *)a2 + 2;
  }
  if (v4 == 1)
  {
    unsigned int v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      long long v8 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v8;
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      char v7 = 1;
      *(unsigned char *)(a1 + 40) = 1;
    }
    else
    {
      long long v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v6;
      if (v5)
      {
        *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
      }
      else
      {
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        *(unsigned char *)(a1 + 40) = 0;
      }
      char v7 = 1;
    }
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    swift_unknownObjectWeakTakeInit();
    char v7 = 0;
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
  }
  *(unsigned char *)(a1 + 41) = v7;
  return a1;
}

uint64_t assignWithTake for ProtoProperty.ProtoPropertyInfo(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 41);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 == 1)
    {
      unsigned int v5 = *(unsigned __int8 *)(a1 + 40);
      if (v5 >= 2) {
        unsigned int v5 = *(_DWORD *)a1 + 2;
      }
      if (v5 <= 1) {
        sub_10001CA50(a1);
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_unknownObjectWeakDestroy();
    }
    unsigned int v6 = *(unsigned __int8 *)(a2 + 41);
    if (v6 >= 2) {
      unsigned int v6 = *(_DWORD *)a2 + 2;
    }
    if (v6 == 1)
    {
      unsigned int v7 = *(unsigned __int8 *)(a2 + 40);
      if (v7 >= 2) {
        unsigned int v7 = *(_DWORD *)a2 + 2;
      }
      if (v7 == 1)
      {
        long long v10 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v10;
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        char v9 = 1;
        *(unsigned char *)(a1 + 40) = 1;
      }
      else
      {
        long long v8 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v8;
        if (v7)
        {
          *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
        }
        else
        {
          *(void *)(a1 + 32) = *(void *)(a2 + 32);
          *(unsigned char *)(a1 + 40) = 0;
        }
        char v9 = 1;
      }
    }
    else
    {
      *(unsigned char *)a1 = *(unsigned char *)a2;
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      swift_unknownObjectWeakTakeInit();
      char v9 = 0;
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
    }
    *(unsigned char *)(a1 + 41) = v9;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for ProtoProperty.ProtoPropertyInfo(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 42)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 41);
  if (v3 >= 2) {
    return (v3 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for ProtoProperty.ProtoPropertyInfo(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 26) = 0u;
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 42) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 42) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 41) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_100133374(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 *)(a1 + 41);
  if (result >= 2) {
    return (*(_DWORD *)a1 + 2);
  }
  return result;
}

uint64_t sub_100133390(uint64_t result, unsigned int a2)
{
  if (a2 > 1)
  {
    *(_OWORD *)(result + 25) = 0u;
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)uint64_t result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(unsigned char *)(result + 41) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ProtoProperty.ProtoPropertyInfo()
{
  return &type metadata for ProtoProperty.ProtoPropertyInfo;
}

uint64_t sub_1001333C8@<X0>(uint64_t a1@<X8>)
{
  return sub_10013296C(a1);
}

uint64_t sub_1001333EC(uint64_t a1)
{
  return a1;
}

uint64_t sub_10013341C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100133454(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10013348C(uint64_t a1)
{
  return a1;
}

uint64_t sub_1001334BC(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1001334F4(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10013352C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10002572C(&qword_10021D050);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t destroy for ProtoProperty.Config()
{
  swift_bridgeObjectRelease();

  return swift_unknownObjectWeakDestroy();
}

uint64_t initializeWithCopy for ProtoProperty.Config(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRetain();
  swift_unknownObjectWeakCopyInit();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

uint64_t assignWithCopy for ProtoProperty.Config(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_unknownObjectWeakCopyAssign();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

uint64_t initializeWithTake for ProtoProperty.Config(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_unknownObjectWeakTakeInit();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

uint64_t assignWithTake for ProtoProperty.Config(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  swift_unknownObjectWeakTakeAssign();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for ProtoProperty.Config(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 40))
    {
      int v2 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else if ((*(void *)(a1 + 32) & 0xF000000000000007) != 0)
    {
      int v2 = *(_DWORD *)(a1 + 24) & 0x7FFFFFFF;
    }
    else
    {
      int v2 = -1;
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ProtoProperty.Config(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      *(void *)(result + 32) = 1;
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ProtoProperty.Config()
{
  return &type metadata for ProtoProperty.Config;
}

ValueMetadata *PGetManyColumn.columnType.getter(char a1)
{
  unsigned int v1 = (ValueMetadata *)&type metadata for String;
  switch(a1)
  {
    case 1:
    case 2:
      unsigned int v1 = (ValueMetadata *)&type metadata for Data;
      sub_100133864();
      break;
    case 3:
    case 4:
      return v1;
    default:
      unsigned int v1 = &type metadata for SQLiteUndefined;
      sub_1001338B0();
      break;
  }
  return v1;
}

unint64_t sub_100133864()
{
  unint64_t result = qword_100221A18;
  if (!qword_100221A18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100221A18);
  }
  return result;
}

unint64_t sub_1001338B0()
{
  unint64_t result = qword_100221A20;
  if (!qword_100221A20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100221A20);
  }
  return result;
}

BOOL PGetManyColumn.hidden.getter(char a1)
{
  return a1 != 0;
}

Schematizer::PGetManyColumn_optional __swiftcall PGetManyColumn.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1002020F0, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 5) {
    return (Schematizer::PGetManyColumn_optional)5;
  }
  else {
    return (Schematizer::PGetManyColumn_optional)v3;
  }
}

_UNKNOWN **static PGetManyColumn.allCases.getter()
{
  return &off_100202188;
}

uint64_t PGetManyColumn.rawValue.getter(char a1)
{
  uint64_t result = 0x65756C6176;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x7463656A626FLL;
      break;
    case 2:
      uint64_t result = 0x64616F6C796170;
      break;
    case 3:
      uint64_t result = 0x614E616D65686373;
      break;
    case 4:
      uint64_t result = 0x79747265706F7270;
      break;
    default:
      return result;
  }
  return result;
}

BOOL sub_100133A14(uint64_t a1, char *a2, uint64_t a3)
{
  unint64_t v6 = sub_1001348D8();

  return static SQLiteColumnDescribing.== infix(_:_:)(a1, a2, a3, v6);
}

Swift::Int sub_100133A68()
{
  return sub_100147AE0(*v0);
}

uint64_t sub_100133A70()
{
  return sub_100147C9C();
}

Swift::Int sub_100133A78(uint64_t a1)
{
  return sub_100147DC8(a1, *v1);
}

Schematizer::PGetManyColumn_optional sub_100133A80@<W0>(Swift::String *a1@<X0>, Schematizer::PGetManyColumn_optional *a2@<X8>)
{
  result.value = PGetManyColumn.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t sub_100133AB0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = PGetManyColumn.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

BOOL sub_100133ADC()
{
  return PGetManyColumn.hidden.getter(*v0);
}

void sub_100133AE4(void *a1@<X8>)
{
  *a1 = &off_100202188;
}

ValueMetadata *sub_100133AF4()
{
  return PGetManyColumn.columnType.getter(*v0);
}

uint64_t sub_100133AFC()
{
  return sub_100133B04(*v0);
}

uint64_t sub_100133B04(char a1)
{
  uint64_t result = 0x65756C6176;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x7463656A626FLL;
      break;
    case 2:
      uint64_t result = 0x64616F6C796170;
      break;
    case 3:
      uint64_t result = 0x614E616D65686373;
      break;
    case 4:
      uint64_t result = 0x79747265706F7270;
      break;
    default:
      return result;
  }
  return result;
}

BOOL sub_100133BB8(void *a1, uint64_t a2, uint64_t a3)
{
  return SQLiteColumnDescribing.isValid(_:)(a1, a2, a3);
}

void sub_100133BD4()
{
}

uint64_t PGetManyConnection.__allocating_init(_:argc:argv:)(uint64_t a1, int a2, uint64_t a3)
{
  return PGetManyConnection.init(_:argc:argv:)(a1, a2, a3);
}

uint64_t PGetManyConnection.init(_:argc:argv:)(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5 = v3;
  sub_10002572C(&qword_100220EF8);
  uint64_t v8 = swift_dynamicCastClass();
  if (!v8)
  {
    sub_100133E08();
    sub_100024A30();
    *long long v10 = xmmword_1001A9580;
    swift_willThrow();
    goto LABEL_6;
  }
  uint64_t v9 = v8;
  swift_retain();
  swift_retain();
  sub_100122900();
  if (v4)
  {
    swift_release();
    swift_release();
LABEL_6:
    swift_release();
    swift_deallocPartialClassInstance();
    return v5;
  }
  long long v12 = SQLiteBaseSchematizer.getSQLiteBridge()();
  uint64_t v14 = v13;
  swift_release();
  *(void *)(v5 + 40) = v12;
  *(void *)(v5 + 48) = v14;
  swift_release();
  uint64_t v5 = SQLiteBaseVTab.Connection.init(_:argc:argv:)(v9, a2, a3);
  swift_release();
  return v5;
}

unint64_t sub_100133E08()
{
  unint64_t result = qword_100221A28;
  if (!qword_100221A28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100221A28);
  }
  return result;
}

uint64_t PGetManyConnection.bestIndex(_:)(uint64_t result)
{
  uint64_t v1 = *(int *)result;
  if ((v1 & 0x80000000) != 0)
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
    return result;
  }
  if (v1)
  {
    uint64_t v2 = 0;
    int v3 = 0;
    uint64_t v4 = *(void *)(result + 8);
    uint64_t v5 = (unsigned char *)(v4 + 5);
    while (v4)
    {
      uint64_t v6 = *(int *)(v5 - 5);
      if ((int)v6 > 4) {
        return 19;
      }
      if ((v6 & 0x80000000) != 0)
      {
        __break(1u);
LABEL_20:
        __break(1u);
        goto LABEL_21;
      }
      if (*((unsigned char *)&off_1002021B0 + v6 + 32))
      {
        uint64_t v7 = 19;
        if (!*v5 || *(v5 - 1) != 2) {
          return v7;
        }
        if (__OFADD__(v3++, 1)) {
          goto LABEL_20;
        }
        uint64_t v9 = *(void *)(result + 32);
        if (!v9) {
          goto LABEL_23;
        }
        uint64_t v10 = v9 + v2;
        *(_DWORD *)uint64_t v10 = v3;
        *(unsigned char *)(v10 + 4) = 1;
      }
      v2 += 8;
      v5 += 12;
      if (!--v1) {
        goto LABEL_16;
      }
    }
    goto LABEL_22;
  }
  int v3 = 0;
LABEL_16:
  *(void *)(result + 64) = 0;
  *(void *)(result + 72) = 1;
  return (v3 & 0xFFFFFFFE) != 2;
}

uint64_t sub_100133F28()
{
  return swift_unknownObjectRelease();
}

uint64_t PGetManyConnection.deinit()
{
  swift_bridgeObjectRelease();
  swift_weakDestroy();
  swift_unknownObjectRelease();
  return v0;
}

uint64_t PGetManyConnection.__deallocating_deinit()
{
  PGetManyConnection.deinit();

  return _swift_deallocClassInstance(v0, 56, 7);
}

uint64_t sub_100133F94(uint64_t a1)
{
  return sub_100133FE0(a1);
}

uint64_t sub_100133FE0(uint64_t a1)
{
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(void *)(v1 + 80) = _swiftEmptyArrayStorage;
  if (*(_UNKNOWN ****)a1 == &type metadata for PGetManyConnection)
  {
    *(_OWORD *)(v1 + 64) = *(_OWORD *)(a1 + 40);
    swift_unknownObjectRetain();
    return SQLiteBaseVTab.Cursor.init(_:)();
  }
  else
  {
    sub_100133E08();
    sub_100024A30();
    _OWORD *v2 = xmmword_1001A9580;
    swift_willThrow();
    swift_release();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for PGetManyCursor(0);
    return swift_deallocPartialClassInstance();
  }
}

uint64_t sub_1001340D8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4 == 3)
  {
    Swift::String v12 = SQLiteArgument.getStringNonNull()();
    uint64_t result = v12._countAndFlagsBits;
    if (!v13)
    {
      object = v1[4]._object;
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v16 = (uint64_t (*)(uint64_t, void *))object[1];
      swift_unknownObjectRetain();
      uint64_t v17 = (uint64_t *)v16(ObjectType, object);
      uint64_t v19 = v18;
      swift_unknownObjectRelease();
      uint64_t v20 = SQLiteArgument.getData()(*(sqlite3_value **)(a1 + 32));
      if (v21 >> 60 == 15)
      {
        sub_100122878();
        sub_100024A30();
        *(void *)(v22 + 8) = 0;
        *(void *)(v22 + 16) = 0;
        *(void *)uint64_t v22 = 6;
        *(unsigned char *)(v22 + 24) = 4;
        swift_willThrow();
        swift_bridgeObjectRelease();
        return swift_unknownObjectRelease();
      }
      uint64_t v24 = v20;
      unint64_t v25 = v21;
      type metadata accessor for ProtobufPayload();
      uint64_t v26 = ProtobufPayload.__allocating_init(with:from:payload:)(v12._countAndFlagsBits, (uint64_t)v12._object, v17, v19, v24, v25);
      unint64_t v27 = sub_10012C940();
      v2[2]._uint64_t countAndFlagsBits = (uint64_t)v26;
      v2[2]._object = (void *)v27;
      swift_unknownObjectRelease();
      Swift::String v28 = SQLiteArgument.getStringNonNull()();
      uint64_t result = v28._countAndFlagsBits;
      if (!v29)
      {
        v2[3] = v28;
        return swift_bridgeObjectRelease();
      }
    }
  }
  else if (v4 == 2)
  {
    Swift::String v6 = SQLiteArgument.getStringNonNull()();
    uint64_t result = v6._countAndFlagsBits;
    if (!v7)
    {
      uint64_t v8 = swift_getObjectType();
      uint64_t v9 = v1[4]._object;
      uint64_t v10 = *(void *)(a1 + 32);
      long long v11 = (void (*)(uint64_t, uint64_t, void *))v9[3];
      swift_unknownObjectRetain();
      v11(v10, v8, v9);
      uint64_t v31 = v30;
      unint64_t v33 = v32;
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      v1[2]._uint64_t countAndFlagsBits = v31;
      v1[2]._object = v33;
      swift_unknownObjectRelease();
      v1[3] = v6;
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    sub_100133E08();
    sub_100024A30();
    *uint64_t v23 = 0;
    v23[1] = 0;
    return swift_willThrow();
  }
  return result;
}

uint64_t PGetManyCursor.filter(idxNum:idxStr:arguments:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = SQLiteBaseVTab.Cursor.filter(idxNum:idxStr:arguments:)();
  if (!v4 && !result)
  {
    sub_1001340D8(a3);
    if (v3[4] && (uint64_t v7 = v3[7]) != 0)
    {
      uint64_t v9 = v3[5];
      uint64_t v8 = v3[6];
      uint64_t ObjectType = swift_getObjectType();
      long long v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 104);
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v12 = v11(v8, v7, ObjectType, v9);
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      v3[10] = v12;
      swift_bridgeObjectRelease();
      return 0;
    }
    else
    {
      sub_100133E08();
      sub_100024A30();
      *uint64_t v13 = 0xD000000000000012;
      v13[1] = 0x80000001001B8E60;
      return swift_willThrow();
    }
  }
  return result;
}

Swift::Int64 __swiftcall PGetManyCursor.rowCount()()
{
  return *(void *)(*(void *)(v0 + 80) + 16);
}

Swift::Int32 __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> PGetManyCursor.setValue(forColumn:on:)(Swift::String forColumn, SQLiter::SQLiteContext on)
{
  object = forColumn._object;
  uint64_t countAndFlagsBits = forColumn._countAndFlagsBits;
  unint64_t v6 = SQLiteDatabase.unsafeConnection()();
  swift_bridgeObjectRetain();
  v7._uint64_t countAndFlagsBits = countAndFlagsBits;
  v7._object = object;
  int value = PGetManyColumn.init(rawValue:)(v7).value;
  if (value == 5) {
    return 1;
  }
  uint64_t v9 = v2[4];
  if (!v9) {
    return 1;
  }
  uint64_t v10 = v2[5];
  switch(value)
  {
    case 1:
      uint64_t v16 = v2[9];
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v18 = *(void (**)(uint64_t, uint64_t, void *, uint64_t, uint64_t))(v16 + 16);
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      v18(v9, v10, on.context._rawValue, ObjectType, v16);
      swift_unknownObjectRelease();
      goto LABEL_12;
    case 2:
      swift_getObjectType();
      uint64_t v19 = *(uint64_t (**)(uint64_t))(v10 + 24);
      swift_unknownObjectRetain();
      uint64_t v20 = sub_10002C564();
      uint64_t v21 = v19(v20);
      unint64_t v23 = v22;
      SQLiteContext.setData(_:destructor:)(v21, v22, (void (__cdecl **)(void *))1, (sqlite3_context *)on.context._rawValue);
      swift_unknownObjectRelease();
      sub_1000291B4(v21, v23);
      return 0;
    case 3:
      swift_getObjectType();
      uint64_t v24 = *(void (**)(uint64_t))(v10 + 16);
      swift_unknownObjectRetain();
      uint64_t v25 = sub_10002C564();
      v24(v25);
      uint64_t v27 = v33;
      uint64_t v26 = v34;
      sub_10001B620(v32, v33);
      uint64_t v28 = (*(uint64_t (**)(uint64_t))(*(void *)(v26 + 8) + 8))(v27);
      SQLiteContext.setString(_:destructor:)(v28, v29, (void (__cdecl **)(void *))1, (sqlite3_context *)on.context._rawValue);
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      sub_10001CA50((uint64_t)v32);
      return 0;
    case 4:
      uint64_t v31 = v2[6];
      uint64_t v30 = v2[7];
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      SQLiteContext.setString(_:destructor:)(v31, v30, (void (__cdecl **)(void *))1, (sqlite3_context *)on.context._rawValue);
      swift_bridgeObjectRelease();
      goto LABEL_12;
    default:
      uint64_t v11 = v2[9];
      uint64_t v12 = swift_getObjectType();
      if ((v6 & 0x8000000000000000) != 0)
      {
        __break(1u);
        goto LABEL_15;
      }
      uint64_t v13 = v2[10];
      if (v6 >= *(void *)(v13 + 16))
      {
LABEL_15:
        __break(1u);
        JUMPOUT(0x100134728);
      }
      uint64_t v14 = v12;
      sub_100032AD8(v13 + (v6 << 6) + 32, (uint64_t)v32);
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      sub_100139BFC((uint64_t)v32, (sqlite3_context *)on.context._rawValue, v14, v11);
      sub_10013473C((uint64_t)v32);
      swift_unknownObjectRelease();
LABEL_12:
      swift_unknownObjectRelease();
      return 0;
  }
}

uint64_t sub_10013473C(uint64_t a1)
{
  uint64_t v2 = sub_10002572C(&qword_100221918);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10013479C()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t PGetManyCursor.deinit()
{
  swift_weakDestroy();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t PGetManyCursor.__deallocating_deinit()
{
  PGetManyCursor.deinit();

  return _swift_deallocClassInstance(v0, 88, 7);
}

unint64_t sub_100134854()
{
  unint64_t result = qword_100221A30;
  if (!qword_100221A30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100221A30);
  }
  return result;
}

unint64_t sub_1001348A0(void *a1)
{
  a1[1] = sub_1001348D8();
  a1[2] = sub_100134924();
  unint64_t result = sub_100134970();
  a1[3] = result;
  return result;
}

unint64_t sub_1001348D8()
{
  unint64_t result = qword_100221A38;
  if (!qword_100221A38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100221A38);
  }
  return result;
}

unint64_t sub_100134924()
{
  unint64_t result = qword_100221A40;
  if (!qword_100221A40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100221A40);
  }
  return result;
}

unint64_t sub_100134970()
{
  unint64_t result = qword_100221A48;
  if (!qword_100221A48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100221A48);
  }
  return result;
}

unint64_t sub_1001349C0()
{
  unint64_t result = qword_100221A50;
  if (!qword_100221A50)
  {
    sub_1000371D4(&qword_100221A58);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100221A50);
  }
  return result;
}

unint64_t sub_100134A14(uint64_t a1)
{
  unint64_t result = sub_100134854();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_100134A40()
{
  unint64_t result = qword_100221A60;
  if (!qword_100221A60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100221A60);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for PGetManyColumn(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100134B58);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

void type metadata accessor for PGetManyColumn()
{
}

void type metadata accessor for PGetManyConfig()
{
}

uint64_t type metadata accessor for PGetManyConnection(uint64_t a1)
{
  return sub_100027D28(a1, qword_100221AB8);
}

uint64_t sub_100134BB8()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for PGetManyCursor(uint64_t a1)
{
  return sub_100027D28(a1, qword_100221BD0);
}

uint64_t sub_100134C1C()
{
  return swift_initClassMetadata2();
}

unint64_t sub_100134C7C(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 8);
  if (result >= 0xFFFFFFFF) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100134C94(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v3;
    swift_bridgeObjectRetain();
  }
  return a1;
}

void *sub_100134CE0(void *a1, void *a2)
{
  unint64_t v4 = a2[1];
  if (a1[1] < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100134D84(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8) < 0xFFFFFFFFuLL) {
    goto LABEL_5;
  }
  unint64_t v4 = *(void *)(a2 + 8);
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100134DE8(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFE && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 1;
  if (v4 >= 3) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t sub_100134E3C(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)unint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)unint64_t result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2 + 1;
    }
  }
  return result;
}

uint64_t sub_100134E98(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *sub_100134EB0(void *result, int a2)
{
  if (a2 < 0)
  {
    *unint64_t result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

void type metadata accessor for PGetManyError()
{
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> PPayloadFunction.perform(with:arguments:)(SQLiter::SQLiteContext with, Swift::OpaquePointer arguments)
{
  sub_1001228E8();
  if (!v2)
  {
    SQLiteBaseSchematizer.getSQLiteBridge()();
    uint64_t v6 = v5;
    swift_release();
    if (*((void *)arguments._rawValue + 2))
    {
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(void, uint64_t, uint64_t))(v6 + 24))(*((void *)arguments._rawValue + 4), ObjectType, v6);
      uint64_t v9 = v8;
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      uint64_t v10 = swift_getObjectType();
      uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 24))(v10, v9);
      unint64_t v13 = v12;
      SQLiteContext.setData(_:destructor:)(v11, v12, (void (__cdecl **)(void *))1, (sqlite3_context *)with.context._rawValue);
      sub_1000291B4(v11, v13);
      swift_unknownObjectRelease();
    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t type metadata accessor for PPayloadFunction()
{
  return self;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> PSetTimeWindowFunction.perform(with:arguments:)(SQLiter::SQLiteContext with, Swift::OpaquePointer arguments)
{
  uint64_t v3 = *((void *)arguments._rawValue + 2);
  if (!v3)
  {
    __break(1u);
    goto LABEL_10;
  }
  double v4 = SQLiteArgument.getDouble()();
  if (v3 == 1)
  {
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    return;
  }
  double v5 = v4;
  double v6 = SQLiteArgument.getDouble()();
  if (v5 >= v6)
  {
    sub_1001229F8();
    swift_allocError();
    *(void *)uint64_t v10 = 0xD000000000000028;
    *(void *)(v10 + 8) = 0x80000001001B8F10;
    *(unsigned char *)(v10 + 41) = 0;
    swift_willThrow();
  }
  else
  {
    double v7 = v6;
    uint64_t v8 = sub_1001228E8();
    if (!v2)
    {
      if (v5 <= v7)
      {
        uint64_t v9 = v8;
        swift_beginAccess();
        *(double *)(v9 + 32) = v5;
        *(double *)(v9 + 40) = v7;
        swift_release();
        SQLiteContext.setBool(_:)(1);
        return;
      }
      goto LABEL_11;
    }
  }
}

uint64_t type metadata accessor for PSetTimeWindowFunction()
{
  return self;
}

uint64_t destroy for SQLiteAttributedMessage()
{
  swift_unknownObjectRelease();

  return swift_unknownObjectRelease();
}

_OWORD *initializeWithCopy for SQLiteAttributedMessage(_OWORD *a1, _OWORD *a2)
{
  long long v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return a1;
}

void *assignWithCopy for SQLiteAttributedMessage(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = v4;
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[3] = v5;
  return a1;
}

_OWORD *assignWithTake for SQLiteAttributedMessage(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_unknownObjectRelease();
  a1[1] = a2[1];
  return a1;
}

ValueMetadata *type metadata accessor for SQLiteAttributedMessage()
{
  return &type metadata for SQLiteAttributedMessage;
}

uint64_t sub_1001352A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t ObjectType = swift_getObjectType();
  double v7 = *(void (**)(uint64_t, uint64_t))(a5 + 160);
  swift_unknownObjectRetain();
  v7(ObjectType, a5);
  swift_unknownObjectRelease();
  sub_100025D00();
  sub_100026D34();
  return swift_bridgeObjectRelease();
}

void sub_1001353A8(uint64_t a1, uint64_t a2, sqlite3_context *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void (*v15)(void *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  void v17[10];

  v17[0] = a1;
  v17[1] = a2;
  v17[8] = 64;
  v17[9] = 0xE100000000000000;
  sub_100021100();
  if (StringProtocol.contains<A>(_:)())
  {
    v13._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
    v13._object = (void *)0x80000001001B8FA0;
    SQLiteContext.setError(message:code:)(v13, -1);
  }
  else
  {
    uint64_t v16 = a4;
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v15 = *(void (**)(void *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(a7 + 64);
    swift_unknownObjectRetain();
    v15(v17, a1, a2, ObjectType, a7);
    swift_unknownObjectRelease();
    sub_100135604(a3, v16, a5);
    sub_10013473C((uint64_t)v17);
  }
}

void sub_100135604(sqlite3_context *a1, uint64_t a2, uint64_t a3)
{
  sub_100135A7C(v3, (uint64_t)v7);
  if (v7[57] == 255)
  {
    sub_10013473C((uint64_t)v7);
    SQLiteContext.setNull()();
  }
  else
  {
    sub_10001B978((uint64_t)v7, (uint64_t)v8);
    sub_1001357B8(a1, a2, a3);
    sub_10001B840((uint64_t)v8);
  }
}

uint64_t sub_1001356A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a7 + 120);
  swift_unknownObjectRetain();
  v11(a1, a2, ObjectType, a7);
  swift_unknownObjectRelease();
  sub_100025D00();
  sub_100026D34();
  return swift_bridgeObjectRelease();
}

void sub_1001357B8(sqlite3_context *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  sub_100032AD8(v5, (uint64_t)v35);
  switch(v38)
  {
    case 1:
      SQLiteContext.setUInt32(_:)(v35[0]);
      return;
    case 2:
      SQLiteContext.setInt64(_:)(*(Swift::Int64 *)v35);
      return;
    case 3:
      SQLiteContext.setUInt64(_:)(*(Swift::UInt64 *)v35);
      return;
    case 4:
      SQLiteContext.setFloat(_:)(*(Swift::Float *)v35);
      return;
    case 5:
      SQLiteContext.setDouble(_:)(*(Swift::Double *)v35);
      return;
    case 6:
      SQLiteContext.setBool(_:)(v35[0]);
      return;
    case 7:
      *(_OWORD *)&v34[9] = *(_OWORD *)&v37[9];
      long long v33 = v36;
      *(_OWORD *)uint64_t v34 = *(_OWORD *)v37;
      long long v32 = *(_OWORD *)v35;
      uint64_t v9 = *(void *)&v37[8];
      if (v37[24])
      {
        uint64_t v10 = *((void *)&v33 + 1);
        uint64_t v11 = *(void *)v34;
        sub_10001B620(&v32, *((uint64_t *)&v33 + 1));
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32))(v9, v10, v11);
        if (v4) {
          goto LABEL_19;
        }
      }
      else
      {
        swift_bridgeObjectRetain();
      }
      uint64_t v24 = sub_10002C578();
      SQLiteContext.setString(_:destructor:)(v24, v25, v26, v27);
      swift_bridgeObjectRelease();
LABEL_19:
      sub_100132850((uint64_t)&v32);
      return;
    case 8:
      SQLiteContext.setString(_:destructor:)(*(uint64_t *)v35, *(uint64_t *)&v35[2], (void (__cdecl **)(void *))1, a1);
      swift_bridgeObjectRelease();
      return;
    case 9:
      uint64_t v12 = *(void *)v35;
      unint64_t v13 = *(void *)&v35[2];
      sub_100027BCC(*(uint64_t *)v35, *(unint64_t *)&v35[2]);
      uint64_t v14 = sub_10002C578();
      SQLiteContext.setData(_:destructor:)(v14, v15, v16, v17);
      sub_1000291B4(v12, v13);
      uint64_t v18 = v12;
      unint64_t v19 = v13;
      goto LABEL_21;
    case 10:
      uint64_t v20 = *(void *)v35;
      uint64_t v21 = *(void *)&v35[2];
      if (a2)
      {
        uint64_t ObjectType = swift_getObjectType();
        unint64_t v23 = *(void (**)(uint64_t, uint64_t, sqlite3_context *, uint64_t, uint64_t))(a3 + 16);
        swift_unknownObjectRetain();
        v23(v20, v21, a1, ObjectType, a3);
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
      }
      else
      {
        uint64_t v28 = swift_getObjectType();
        uint64_t v29 = (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 24))(v28, v21);
        unint64_t v31 = v30;
        SQLiteContext.setData(_:destructor:)(v29, v30, (void (__cdecl **)(void *))1, a1);
        swift_unknownObjectRelease();
        uint64_t v18 = v29;
        unint64_t v19 = v31;
LABEL_21:
        sub_1000291B4(v18, v19);
      }
      return;
    default:
      SQLiteContext.setInt32(_:)(v35[0]);
      return;
  }
}

uint64_t sub_100135A7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10002572C(&qword_100221918);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t IntegerSet.forEach(_:)(void (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v73 = a1;
  uint64_t v74 = a2;
  sub_100026808();
  uint64_t v69 = v6;
  __chkstk_darwin(v7);
  sub_100017D2C();
  uint64_t v72 = v8;
  sub_10000E100();
  __chkstk_darwin(v9);
  sub_100021308();
  uint64_t v71 = v10;
  sub_10000E100();
  __chkstk_darwin(v11);
  sub_100024FFC();
  uint64_t v70 = v12;
  uint64_t v14 = *(void *)(*(void *)(v13 + 8) + 32);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v76 = type metadata accessor for ClosedRange<>.Index();
  sub_100026808();
  char v68 = v16;
  __chkstk_darwin(v17);
  sub_100024A64();
  uint64_t v20 = v18 - v19;
  __chkstk_darwin(v21);
  sub_100024FFC();
  uint64_t v81 = v22;
  uint64_t v23 = type metadata accessor for ClosedRange();
  uint64_t v82 = AssociatedConformanceWitness;
  uint64_t v83 = v14;
  uint64_t v86 = v14;
  uint64_t v87 = AssociatedConformanceWitness;
  swift_getWitnessTable();
  uint64_t v24 = type metadata accessor for IndexingIterator();
  sub_100026808();
  uint64_t v26 = v25;
  __chkstk_darwin(v27);
  Swift::String v63 = (char *)v60 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000E100();
  __chkstk_darwin(v29);
  sub_100024FFC();
  uint64_t v84 = v30;
  sub_100026808();
  uint64_t v32 = v31;
  sub_10002E928();
  __chkstk_darwin(v33);
  sub_100019C5C(v34, v60[0]);
  swift_bridgeObjectRetain();
  Swift::Int v35 = Array.startIndex.getter();
  Swift::Int after = v35;
  if (v35 == Array.endIndex.getter()) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v64 = v24;
  v60[2] = v32;
  v60[5] = v32 + 8;
  uint64_t v75 = (uint64_t *)(v68 + 4);
  v60[4] = v26 + 32;
  char v79 = (void (**)(void))(v68 + 1);
  v68 += 2;
  uint64_t v66 = (void (**)(void))(v69 + 32);
  uint64_t v67 = v69 + 8;
  v60[3] = v26 + 8;
  uint64_t v61 = a3;
  v60[0] = v32 + 16;
  uint64_t v77 = v23;
  uint64_t v65 = v20;
  uint64_t v78 = a4;
  while (2)
  {
    Swift::Bool IsNativeType = Array._hoistableIsNativeTypeChecked()();
    Array._checkSubscript(_:wasNativeTypeChecked:)();
    if (IsNativeType)
    {
      sub_100025184();
      Swift::Int v39 = a3 + v37 + *(void *)(v38 + 72) * v35;
      char v40 = *(void (**)(void))(v38 + 16);
      ((void (*)(uint64_t, Swift::Int, uint64_t))v40)(v62, v39, v23);
      goto LABEL_5;
    }
    uint64_t result = _ArrayBuffer._getElementSlowPath(_:)();
    if (v60[1] == 8)
    {
      uint64_t v85 = result;
      char v40 = *(void (**)(void))v60[0];
      sub_100016608();
      v40();
      swift_unknownObjectRelease();
LABEL_5:
      swift_bridgeObjectRetain();
      Array.formIndex(after:)(&after);
      swift_bridgeObjectRelease();
      uint64_t v41 = sub_100023D78();
      ((void (*)(uint64_t))v40)(v41);
      ClosedRange<>.startIndex.getter();
      sub_10000E040();
      v42();
      uint64_t v43 = v64;
      uint64_t v69 = *v75;
      sub_10000E0F4();
      v44();
      sub_100026350();
      uint64_t v45 = v84;
      sub_100021CF0();
      v46();
      uint64_t v47 = v45 + *(int *)(v43 + 36);
      while (1)
      {
        ClosedRange<>.endIndex.getter();
        char v48 = static ClosedRange<>.Index.== infix(_:_:)();
        uint64_t v49 = *v79;
        uint64_t v50 = v76;
        sub_100024400();
        v49();
        if (v48) {
          break;
        }
        (*v68)(v20, v47, v50);
        uint64_t result = sub_100027BA4(v20, 1, a4);
        if (result == 1)
        {
          __break(1u);
          goto LABEL_17;
        }
        uint64_t v52 = *v66;
        sub_1000295AC();
        v52();
        sub_1000295AC();
        v52();
        ClosedRange<>.index(after:)();
        sub_100024400();
        v49();
        sub_10000E0F4();
        v53();
        uint64_t v54 = v72;
        a4 = v78;
        sub_1000295AC();
        v52();
        uint64_t v55 = v80;
        v73(v54);
        uint64_t v80 = v55;
        if (v55)
        {
          sub_10000E040();
          v58();
          sub_10000E040();
          v59();
          return swift_bridgeObjectRelease();
        }
        sub_10000E040();
        v56();
        uint64_t v20 = v65;
        uint64_t v23 = v77;
      }
      sub_10000E040();
      v57();
      Swift::Int v35 = after;
      a3 = v61;
      if (v35 != Array.endIndex.getter()) {
        continue;
      }
      return swift_bridgeObjectRelease();
    }
    break;
  }
LABEL_17:
  __break(1u);
  return result;
}

void IntegerSet.add(_:)()
{
  sub_10000DFE0();
  uint64_t v2 = v1;
  uint64_t v164 = v3;
  unint64_t v4 = *(void *)(v1 + 16);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  sub_10000E004();
  __chkstk_darwin(v6);
  sub_100024A64();
  uint64_t v9 = v7 - v8;
  __chkstk_darwin(v10);
  sub_100024FFC();
  uint64_t v156 = v11;
  unint64_t v148 = *(void *)(v2 + 24);
  uint64_t v12 = *(void *)(v148 + 8);
  uint64_t v150 = *(void *)(v12 + 24);
  unint64_t v153 = *(void *)(v150 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_10000E004();
  sub_1000294B4();
  __chkstk_darwin(v13);
  v151 = (char *)v135 - v14;
  uint64_t v152 = v12;
  uint64_t v15 = *(void *)(*(void *)(v12 + 32) + 8);
  uint64_t v16 = type metadata accessor for ClosedRange();
  sub_100026808();
  uint64_t v163 = v17;
  __chkstk_darwin(v18);
  sub_100017D2C();
  v144 = v19;
  sub_10000E100();
  __chkstk_darwin(v20);
  sub_100021308();
  uint64_t v145 = v21;
  sub_10000E100();
  __chkstk_darwin(v22);
  sub_100021308();
  uint64_t v158 = v23;
  sub_10000E100();
  __chkstk_darwin(v24);
  sub_100024FFC();
  uint64_t v162 = v25;
  sub_100026808();
  uint64_t v161 = v26;
  __chkstk_darwin(v27);
  sub_100017D2C();
  uint64_t v149 = v28;
  sub_10000E100();
  __chkstk_darwin(v29);
  sub_100021308();
  v155 = v30;
  sub_10000E100();
  __chkstk_darwin(v31);
  sub_100021308();
  uint64_t v154 = v32;
  sub_10000E100();
  __chkstk_darwin(v33);
  sub_100024FFC();
  uint64_t v146 = v34;
  unint64_t v35 = *v0;
  unint64_t v167 = *v0;
  uint64_t v36 = type metadata accessor for Array();
  swift_getWitnessTable();
  uint64_t v37 = Collection.isEmpty.getter();
  uint64_t v165 = v16;
  uint64_t v157 = v36;
  uint64_t v159 = TupleTypeMetadata2;
  v160 = (uint64_t *)v0;
  if (v37)
  {
    if (dispatch thunk of static Comparable.<= infix(_:_:)())
    {
      uint64_t v38 = v161;
      Swift::Int v39 = *(void (**)(void))(v161 + 16);
      sub_10002C58C();
      v39();
      sub_10002C58C();
      v39();
      sub_10002C58C();
      v39();
      sub_10002C58C();
      v39();
      char v40 = *(void (**)(void))(v38 + 32);
      sub_100028D78();
      v40();
      uint64_t v41 = *(void (**)(void))(v38 + 8);
      sub_10002A6E8();
      v41();
      sub_100023F38();
      sub_100028D78();
      v40();
      sub_100028D78();
      v40();
      sub_100028D78();
      v40();
      sub_10002A6E8();
      v41();
      sub_100021CF0();
      v42();
LABEL_4:
      Array.append(_:)();
LABEL_30:
      sub_10000DFB8();
      return;
    }
    __break(1u);
    goto LABEL_32;
  }
  uint64_t v143 = v15;
  uint64_t v142 = v9;
  unint64_t v166 = v35;
  __chkstk_darwin(v37);
  unint64_t v43 = v148;
  v135[-4] = v4;
  v135[-3] = v43;
  v135[-2] = v164;
  swift_bridgeObjectRetain();
  Collection.firstIndex(where:)();
  swift_bridgeObjectRelease();
  if (v168)
  {
    unint64_t v148 = v4;
    swift_bridgeObjectRetain();
    uint64_t v44 = v165;
    uint64_t v45 = Array.count.getter();
    swift_bridgeObjectRelease();
    uint64_t v47 = v161;
    uint64_t v46 = v162;
    if (__OFSUB__(v45, 1))
    {
LABEL_32:
      __break(1u);
      goto LABEL_33;
    }
    Array.subscript.getter();
    char v48 = *(void (**)(void))(v47 + 16);
    unint64_t v49 = v148;
    uint64_t v146 = v47 + 16;
    v144 = v48;
    sub_100016608();
    v50();
    v141 = *(void (**)(void))(v163 + 8);
    ((void (*)(uint64_t, uint64_t))v141)(v46, v44);
    swift_getAssociatedConformanceWitness();
    dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
    dispatch thunk of static AdditiveArithmetic.+ infix(_:_:)();
    uint64_t v51 = v47 + 8;
    uint64_t v52 = *(void (**)(void))(v47 + 8);
    sub_100028B20();
    v52();
    sub_100028B20();
    v52();
    sub_100028960();
    uint64_t v53 = v164;
    char v54 = dispatch thunk of static Equatable.== infix(_:_:)();
    sub_100028B20();
    v52();
    if ((v54 & 1) == 0)
    {
      if (sub_10002B1AC())
      {
        v95 = v144;
        ((void (*)(uint64_t, uint64_t, unint64_t))v144)(v156, v53, v49);
        sub_1000214DC();
        v95();
        sub_10002980C();
        sub_1000214DC();
        v95();
        sub_1000214DC();
        v95();
        uint64_t v96 = *(void (**)(void))(v161 + 32);
        sub_10002EDD8();
        v96();
        sub_100028B20();
        v52();
        sub_100023F38();
        sub_10002EDD8();
        v96();
        sub_10002EDD8();
        v96();
        sub_10002EDD8();
        v96();
        sub_100028B20();
        v52();
        sub_100021CF0();
        v97();
        goto LABEL_4;
      }
      goto LABEL_37;
    }
    swift_bridgeObjectRetain();
    uint64_t v55 = Array.count.getter();
    swift_bridgeObjectRelease();
    uint64_t v56 = v159;
    if (__OFSUB__(v55, 1)) {
      goto LABEL_34;
    }
    unint64_t v153 = v55 - 1;
    swift_bridgeObjectRetain();
    uint64_t v57 = Array.count.getter();
    swift_bridgeObjectRelease();
    if (__OFSUB__(v57, 1))
    {
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }
    uint64_t v152 = v51;
    v155 = (void (*)(uint64_t, unint64_t))v52;
    uint64_t v58 = v158;
    uint64_t v59 = v165;
    Array.subscript.getter();
    unint64_t v60 = v148;
    uint64_t v61 = v144;
    ((void (*)(uint64_t, uint64_t, unint64_t))v144)(v154, v58, v148);
    ((void (*)(uint64_t, uint64_t))v141)(v58, v59);
    if ((sub_10002B1AC() & 1) == 0)
    {
LABEL_36:
      __break(1u);
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
    uint64_t v62 = *(void (**)(void))(v161 + 32);
    sub_1000295AC();
    v62();
    sub_100025A60();
    v61();
    uint64_t v63 = v142;
    uint64_t v64 = v142 + *(int *)(v56 + 48);
    sub_1000214DC();
    v61();
    sub_1000214DC();
    v61();
    sub_1000284E0();
    v62();
    v155(v64, v60);
    sub_1000284E0();
    v62();
    sub_1000284E0();
    v62();
    sub_1000284E0();
    v62();
    v155(v63, v60);
    sub_1000166D0();
    sub_10000E0F4();
    v65();
    uint64_t v66 = v160;
    Array._makeMutableAndUnique()();
    sub_1001380D0(v153, *v66);
LABEL_25:
    sub_100029940();
    v117();
    goto LABEL_30;
  }
  unint64_t v67 = v167;
  uint64_t v68 = v161;
  uint64_t v70 = v161 + 16;
  uint64_t v69 = *(void (**)(void))(v161 + 16);
  sub_100024160();
  v69();
  uint64_t v71 = v162;
  unint64_t v148 = v67;
  v141 = v69;
  if (!v67)
  {
    uint64_t v78 = *(void (**)(void))(v68 + 8);
    uint64_t v98 = (v68 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    sub_100024400();
    v78();
LABEL_22:
    sub_10002B334();
    Array.subscript.getter();
    uint64_t v99 = v155;
    sub_100024160();
    v69();
    sub_10002E9D4();
    uint64_t AssociatedTypeWitness = v100;
    uint64_t v146 = v101;
    sub_100024400();
    v102();
    swift_getAssociatedConformanceWitness();
    dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
    uint64_t v103 = v149;
    sub_1000185D8();
    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
    uint64_t v104 = v154;
    dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
    ((void (*)(uint64_t, unint64_t))v78)(v103, v4);
    ((void (*)(void, unint64_t))v78)(v99, v4);
    sub_100028960();
    char v105 = dispatch thunk of static Equatable.== infix(_:_:)();
    v140 = v78;
    ((void (*)(uint64_t, unint64_t))v78)(v104, v4);
    if ((v105 & 1) == 0)
    {
      v155 = (void (*)(uint64_t, unint64_t))v98;
      v118 = v141;
      if (sub_1000244D8())
      {
        uint64_t v119 = v156 + *(int *)(v159 + 48);
        sub_100025A60();
        v118();
        uint64_t v154 = v119;
        sub_10002C58C();
        v118();
        sub_10002980C();
        sub_10002C58C();
        v118();
        sub_10002C58C();
        v118();
        v120 = *(void (**)(void))(v161 + 32);
        sub_100024CAC();
        v120();
        v121 = v140;
        ((void (*)(unint64_t, unint64_t))v140)(v4, v4);
        sub_100024CAC();
        v120();
        sub_100024CAC();
        v120();
        sub_100024CAC();
        v120();
        ((void (*)(void (*)(void), unint64_t))v121)(v118, v4);
        sub_100021CF0();
        v122();
        Array.insert(_:at:)();
        goto LABEL_30;
      }
      goto LABEL_39;
    }
    sub_1000296FC();
    uint64_t v106 = v158;
    sub_10002B334();
    Array.subscript.getter();
    sub_10013819C();
    char v108 = *(void (**)(void))(v107 - 256);
    sub_100025A60();
    v108();
    sub_100024400();
    v109();
    if ((sub_1000244D8() & 1) == 0)
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }
    sub_1000250B4();
    sub_10002C58C();
    v108();
    Swift::Int v110 = *(void (**)(void))(v161 + 32);
    ((void (*)(uint64_t, unint64_t, unint64_t))v110)(v106, v4, v4);
    uint64_t v111 = *((int *)v78 + 12);
    uint64_t v112 = v142;
    uint64_t v113 = v142 + v111;
    sub_10002C58C();
    v108();
    sub_10002C58C();
    v108();
    sub_100023D78();
    sub_1000261A4();
    v110();
    uint64_t v114 = v140;
    ((void (*)(uint64_t, unint64_t))v140)(v113, v4);
    sub_100020D48();
    sub_1000261A4();
    v110();
    sub_1000261A4();
    v110();
    sub_1000261A4();
    v110();
    ((void (*)(uint64_t, unint64_t))v114)(v112, v4);
    sub_1000166D0();
    sub_10000E0F4();
    v115();
    v116 = v160;
    Array._makeMutableAndUnique()();
    sub_1001380D0(v148, *v116);
    sub_1000252E0();
    goto LABEL_25;
  }
  if (__OFSUB__(v67, 1))
  {
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  unint64_t v136 = v67 - 1;
  Array.subscript.getter();
  sub_100024160();
  v69();
  sub_10002E9D4();
  uint64_t v138 = v72;
  v137 = v73;
  sub_100024400();
  v74();
  swift_getAssociatedConformanceWitness();
  uint64_t v139 = v70;
  sub_100025514();
  *(void *)(v76 - 256) = v75;
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
  sub_1000185D8();
  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
  uint64_t v77 = v154;
  v135[1] = *(void *)(v150 + 8);
  dispatch thunk of static AdditiveArithmetic.+ infix(_:_:)();
  uint64_t v80 = *(void (**)(void))(v68 + 8);
  char v79 = (void (*)(uint64_t, unint64_t))(v68 + 8);
  uint64_t v78 = v80;
  sub_10002A6E8();
  v80();
  sub_10002A6E8();
  v80();
  sub_100028960();
  v135[0] = v81;
  char v82 = dispatch thunk of static Equatable.== infix(_:_:)();
  sub_10002A6E8();
  v80();
  sub_10002A6E8();
  v80();
  if ((v82 & 1) == 0)
  {
    uint64_t v98 = (unint64_t)v79 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    uint64_t v69 = v141;
    goto LABEL_22;
  }
  sub_1000296FC();
  sub_10002B334();
  Array.subscript.getter();
  ((void (*)(void (*)(uint64_t, unint64_t), uint64_t, unint64_t))v141)(v155, v71, v4);
  uint64_t v83 = v137;
  sub_100024400();
  v83();
  sub_100025514();
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
  sub_1000185D8();
  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
  sub_10002A6E8();
  v78();
  sub_10002A6E8();
  v78();
  LODWORD(v153) = dispatch thunk of static Equatable.== infix(_:_:)();
  sub_10002A6E8();
  v78();
  sub_1000296FC();
  Array.subscript.getter();
  sub_100025A60();
  v84();
  sub_100024400();
  v83();
  v140 = v78;
  if (v153)
  {
    sub_1000296FC();
    sub_10002B334();
    Array.subscript.getter();
    sub_10013819C();
    sub_100025A60();
    v85();
    sub_100024400();
    v86();
    if (sub_1000244D8())
    {
      sub_1000250B4();
      uint64_t v87 = *(void (**)(void))(v161 + 32);
      sub_100018054();
      v87();
      sub_100018054();
      v87();
      uint64_t v88 = v142 + *((int *)v78 + 12);
      uint64_t v89 = v141;
      sub_100025A60();
      v89();
      sub_10002C58C();
      v89();
      sub_100018054();
      v87();
      uint64_t v90 = v140;
      ((void (*)(uint64_t, unint64_t))v140)(v88, v4);
      sub_100020D48();
      sub_100018054();
      v87();
      sub_100018054();
      v87();
      sub_100018054();
      v87();
      sub_10002A6E8();
      v90();
      sub_1000166D0();
      sub_10000E0F4();
      v91();
      uint64_t v92 = v160;
      Array._makeMutableAndUnique()();
      sub_1001380D0(v136, *v92);
      sub_1000252E0();
      sub_100029940();
      v93();
      Array.remove(at:)();
      sub_100024400();
      v94();
      goto LABEL_30;
    }
    goto LABEL_40;
  }
  v155 = v79;
  v123 = v141;
  if (sub_1000244D8())
  {
    uint64_t v124 = v156 + *(int *)(v159 + 48);
    v125 = *(void (**)(void))(v161 + 32);
    ((void (*)(uint64_t, uint64_t, unint64_t))v125)(v156, v77, v4);
    uint64_t v158 = v124;
    sub_100025A60();
    v123();
    sub_10002C58C();
    v123();
    sub_10002C58C();
    v123();
    sub_100024CAC();
    v125();
    sub_10002EB04();
    v126();
    sub_100024CAC();
    v125();
    sub_100024CAC();
    v125();
    uint64_t v127 = v165;
    sub_100024CAC();
    v125();
    sub_10002EB04();
    v128();
    uint64_t v130 = v162;
    uint64_t v129 = v163;
    sub_10000E0F4();
    v131();
    v132 = v160;
    Array._makeMutableAndUnique()();
    uint64_t v133 = *v132;
    unint64_t v134 = v136;
    sub_1001380D0(v136, v133);
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v129 + 40))(v133+ ((*(unsigned __int8 *)(v129 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v129 + 80))+ *(void *)(v129 + 72) * v134, v130, v127);
    goto LABEL_30;
  }
LABEL_41:
  __break(1u);
}

void IntegerSet.lowerBound.getter()
{
  sub_10000DFE0();
  uint64_t v1 = sub_100026500(v0);
  type metadata accessor for Optional();
  sub_100026808();
  sub_1000294B4();
  __chkstk_darwin(v2);
  unint64_t v4 = (char *)&v12 - v3;
  sub_100026808();
  __chkstk_darwin(v5);
  sub_10001DE5C();
  swift_getWitnessTable();
  sub_1000293E8();
  Collection.first.getter();
  if (sub_100027BA4((uint64_t)v4, 1, v1) == 1)
  {
    uint64_t v6 = sub_10002B95C();
    v7(v6);
    sub_1001381B0();
    dispatch thunk of static FixedWidthInteger.max.getter();
  }
  else
  {
    sub_100016608();
    v8();
    sub_10000E004();
    sub_10000E040();
    v9();
    uint64_t v10 = sub_100138184();
    v11(v10);
  }
  sub_10000DFB8();
}

void IntegerSet.upperBound.getter()
{
  sub_10000DFE0();
  uint64_t v1 = sub_100026500(v0);
  type metadata accessor for Optional();
  sub_100026808();
  sub_1000294B4();
  __chkstk_darwin(v2);
  unint64_t v4 = (char *)&v12 - v3;
  sub_100026808();
  __chkstk_darwin(v5);
  sub_10001DE5C();
  swift_getWitnessTable();
  sub_1000293E8();
  BidirectionalCollection.last.getter();
  if (sub_100027BA4((uint64_t)v4, 1, v1) == 1)
  {
    uint64_t v6 = sub_10002B95C();
    v7(v6);
    sub_1001381B0();
    dispatch thunk of static FixedWidthInteger.min.getter();
  }
  else
  {
    sub_100016608();
    v8();
    sub_10000E004();
    sub_10000E040();
    v9();
    uint64_t v10 = sub_100138184();
    v11(v10);
  }
  sub_10000DFB8();
}

BOOL IntegerSet.contains(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for ClosedRange();
  uint64_t v9 = type metadata accessor for Optional();
  sub_100026808();
  uint64_t v11 = v10;
  sub_1000294B4();
  __chkstk_darwin(v12);
  uint64_t v14 = &v17[-v13];
  uint64_t v21 = a2;
  uint64_t v18 = a3;
  uint64_t v19 = a4;
  uint64_t v20 = a1;
  type metadata accessor for Array();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  Sequence.first(where:)();
  swift_bridgeObjectRelease();
  BOOL v15 = sub_100027BA4((uint64_t)v14, 1, v8) != 1;
  (*(void (**)(unsigned char *, uint64_t))(v11 + 8))(v14, v9);
  return v15;
}

uint64_t sub_1001379CC()
{
  return ClosedRange.contains(_:)() & 1;
}

uint64_t sub_100137A30()
{
  return dispatch thunk of static Comparable.< infix(_:_:)() & 1;
}

void IntegerSet.forEach(_:)()
{
  sub_10000DFE0();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v74 = v4;
  uint64_t v75 = v5;
  sub_100026808();
  uint64_t v7 = v6;
  __chkstk_darwin(v8);
  sub_100017D2C();
  uint64_t v73 = v9;
  sub_10000E100();
  __chkstk_darwin(v10);
  sub_100024FFC();
  uint64_t v72 = v11;
  Swift::Int v13 = *(void *)(*(void *)(v12 + 8) + 32);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v15 = type metadata accessor for ClosedRange<>.Index();
  sub_100026808();
  uint64_t v17 = v16;
  __chkstk_darwin(v18);
  sub_100024A64();
  uint64_t v21 = v19 - v20;
  __chkstk_darwin(v22);
  sub_100024FFC();
  uint64_t v82 = v23;
  uint64_t v24 = type metadata accessor for ClosedRange();
  uint64_t v83 = AssociatedConformanceWitness;
  Swift::Int v84 = v13;
  v88[1] = v13;
  v88[2] = AssociatedConformanceWitness;
  swift_getWitnessTable();
  uint64_t v68 = type metadata accessor for IndexingIterator();
  sub_100026808();
  uint64_t v26 = v25;
  __chkstk_darwin(v27);
  uint64_t v66 = (char *)v60 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000E100();
  __chkstk_darwin(v29);
  sub_100024FFC();
  uint64_t v79 = v30;
  sub_100026808();
  uint64_t v67 = v31;
  sub_10002E928();
  __chkstk_darwin(v32);
  sub_100019C5C(v33, v60[0]);
  swift_bridgeObjectRetain();
  uint64_t v34 = Array.startIndex.getter();
  v88[0] = v34;
  uint64_t v85 = v24;
  if (v34 == Array.endIndex.getter())
  {
LABEL_2:
    swift_bridgeObjectRelease();
    sub_10000DFB8();
    return;
  }
  uint64_t v64 = (void (**)(void))(v67 + 16);
  uint64_t v63 = v67 + 8;
  uint64_t v78 = (uint64_t *)(v17 + 32);
  uint64_t v62 = v26 + 32;
  uint64_t v77 = (void (**)(void))(v17 + 8);
  uint64_t v70 = (void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32);
  uint64_t v71 = (void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16);
  uint64_t v69 = v7 + 8;
  v60[2] = v26 + 8;
  uint64_t v61 = v3;
  uint64_t v81 = v1;
  while (2)
  {
    Swift::Bool IsNativeType = Array._hoistableIsNativeTypeChecked()();
    Array._checkSubscript(_:wasNativeTypeChecked:)();
    if (IsNativeType)
    {
      sub_100025184();
      uint64_t v38 = v3 + v36 + *(void *)(v37 + 72) * v34;
      Swift::Int v39 = *(void (**)(void))(v37 + 16);
      uint64_t v40 = v65;
      ((void (*)(uint64_t, uint64_t, uint64_t))v39)(v65, v38, v85);
      goto LABEL_6;
    }
    uint64_t v58 = _ArrayBuffer._getElementSlowPath(_:)();
    if (v60[1] == 8)
    {
      uint64_t v87 = v58;
      Swift::Int v39 = *v64;
      uint64_t v59 = v65;
      sub_100016608();
      v39();
      uint64_t v40 = v59;
      swift_unknownObjectRelease();
LABEL_6:
      swift_bridgeObjectRetain();
      uint64_t v41 = v85;
      Array.formIndex(after:)(v88);
      swift_bridgeObjectRelease();
      ((void (*)(char *, uint64_t, uint64_t))v39)(v66, v40, v41);
      ClosedRange<>.startIndex.getter();
      sub_100026350();
      sub_10000E040();
      v42();
      uint64_t v43 = v68;
      uint64_t v76 = *v78;
      sub_10000E0F4();
      v44();
      sub_100026350();
      uint64_t v45 = v79;
      sub_100021CF0();
      v46();
      uint64_t v86 = v45 + *(int *)(v43 + 36);
      uint64_t v47 = v81;
      char v48 = v77;
      while (1)
      {
        ClosedRange<>.endIndex.getter();
        char v49 = static ClosedRange<>.Index.== infix(_:_:)();
        uint64_t v50 = *v48;
        sub_100024400();
        v50();
        if (v49) {
          break;
        }
        (*v71)(v21, v86, v15);
        if (sub_100027BA4(v21, 1, v47) == 1)
        {
          __break(1u);
          goto LABEL_15;
        }
        uint64_t v51 = *v70;
        uint64_t v80 = v50;
        uint64_t v52 = v73;
        v51(v73, v21, v47);
        uint64_t v53 = v72;
        v51(v72, v52, v81);
        uint64_t v54 = v86;
        ClosedRange<>.index(after:)();
        char v48 = v77;
        ((void (*)(uint64_t, uint64_t))v80)(v54, v15);
        sub_10000E0F4();
        v55();
        v74(v53);
        uint64_t v47 = v81;
        sub_10000E040();
        v56();
      }
      sub_100026350();
      sub_10000E040();
      v57();
      uint64_t v34 = v88[0];
      uint64_t v3 = v61;
      if (v34 != Array.endIndex.getter()) {
        continue;
      }
      goto LABEL_2;
    }
    break;
  }
LABEL_15:
  __break(1u);
}

uint64_t sub_1001380D0(unint64_t a1, uint64_t a2)
{
  uint64_t result = _swift_isClassOrObjCExistentialType();
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return result;
  }
  uint64_t v5 = a2 & 0xFFFFFFFFFFFFFF8;
  if ((result & 1) == 0) {
    uint64_t v5 = a2;
  }
  if (*(void *)(v5 + 16) <= a1) {
    goto LABEL_7;
  }
  return result;
}

uint64_t sub_100138124()
{
  return sub_100137A30() & 1;
}

uint64_t sub_100138148()
{
  return sub_1001379CC() & 1;
}

uint64_t type metadata accessor for IntegerSet()
{
  return sub_100040C54();
}

uint64_t sub_100138184()
{
  return *(void *)(v0 - 96);
}

uint64_t sub_10013819C()
{
  return v0;
}

uint64_t sub_1001381B0()
{
  return v0;
}

uint64_t sub_1001381C4(uint64_t a1)
{
  sub_10001FC68(a1, v18);
  uint64_t v2 = v18[0];
  uint64_t v3 = v18[1];
  int64_t v4 = v18[3];
  unint64_t v5 = v18[4];
  int64_t v6 = (unint64_t)(v18[2] + 64) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  if (!v5) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v8 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  unint64_t v9 = v8 | (v4 << 6);
  while (1)
  {
    Swift::Int v13 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v9);
    uint64_t v14 = v13[1];
    uint64_t v15 = *(void *)(*(void *)(v2 + 56) + 8 * v9);
    v17[0] = *v13;
    v17[1] = v14;
    v17[2] = v15;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100138AD4(v17);
    if (v1)
    {
      swift_release();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if (v5) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v10 = v4 + 1;
    if (__OFADD__(v4, 1)) {
      break;
    }
    if (v10 >= v6) {
      return swift_release();
    }
    unint64_t v11 = *(void *)(v3 + 8 * v10);
    if (!v11)
    {
      int64_t v12 = v4 + 2;
      if (v4 + 2 >= v6) {
        return swift_release();
      }
      unint64_t v11 = *(void *)(v3 + 8 * v12);
      if (v11) {
        goto LABEL_12;
      }
      int64_t v12 = v4 + 3;
      if (v4 + 3 >= v6) {
        return swift_release();
      }
      unint64_t v11 = *(void *)(v3 + 8 * v12);
      if (v11) {
        goto LABEL_12;
      }
      int64_t v12 = v4 + 4;
      if (v4 + 4 >= v6) {
        return swift_release();
      }
      unint64_t v11 = *(void *)(v3 + 8 * v12);
      if (v11)
      {
LABEL_12:
        int64_t v10 = v12;
      }
      else
      {
        int64_t v10 = v4 + 5;
        if (v4 + 5 >= v6) {
          return swift_release();
        }
        unint64_t v11 = *(void *)(v3 + 8 * v10);
        if (!v11)
        {
          int64_t v16 = v4 + 6;
          while (v16 < v6)
          {
            unint64_t v11 = *(void *)(v3 + 8 * v16++);
            if (v11)
            {
              int64_t v10 = v16 - 1;
              goto LABEL_13;
            }
          }
          return swift_release();
        }
      }
    }
LABEL_13:
    unint64_t v5 = (v11 - 1) & v11;
    unint64_t v9 = __clz(__rbit64(v11)) + (v10 << 6);
    int64_t v4 = v10;
  }
  __break(1u);
  return result;
}

uint64_t SchematizedPayload.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10002572C(&qword_100222048);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001B620(a1, a1[3]);
  sub_100129828();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_10002572C(&qword_100222050);
  uint64_t v17 = Dictionary.init(dictionaryLiteral:)();
  uint64_t v15 = &v17;
  int64_t v16 = v9;
  uint64_t v10 = v13[1];
  (*(void (**)(uint64_t (*)(void *, uint64_t), char *, uint64_t, uint64_t))(a3 + 96))(sub_100138AB8, v14, a2, a3);
  if (v10)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v11 = swift_bridgeObjectRetain();
    sub_1001381C4(v11);
    swift_bridgeObjectRelease_n();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_100138554(void *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  sub_10001B620(a1, v7);
  LOBYTE(v8) = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 16))(v7, v8);
  uint64_t v10 = a1[3];
  uint64_t v9 = a1[4];
  sub_10001B620(a1, v10);
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)(v9 + 8) + 8))(v10);
  if (v8)
  {
    uint64_t v13 = sub_100139F80(v11, v12, *a3);
    swift_bridgeObjectRelease();
    if (v13) {
      uint64_t v14 = (void *)v13;
    }
    else {
      uint64_t v14 = _swiftEmptyArrayStorage;
    }
    sub_100032AD8(a2, (uint64_t)&v39);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_100128BD4();
      uint64_t v14 = v37;
    }
    unint64_t v15 = v14[2];
    if (v15 >= v14[3] >> 1)
    {
      sub_100128BD4();
      uint64_t v14 = v38;
    }
    v14[2] = v15 + 1;
    sub_10001B978((uint64_t)&v39, (uint64_t)&v14[8 * v15 + 4]);
    uint64_t v17 = a1[3];
    uint64_t v16 = a1[4];
    sub_10001B620(a1, v17);
    (*(void (**)(uint64_t))(*(void *)(v16 + 8) + 8))(v17);
    sub_10013A944();
    return swift_bridgeObjectRelease();
  }
  uint64_t v39 = v11;
  unint64_t v40 = v12;
  sub_10002572C(&qword_100222048);
  sub_100138EEC();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v3) {
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  if (qword_100220860 != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  sub_10002A10C(v18, (uint64_t)qword_100236CC8);
  sub_10001C20C((uint64_t)a1, (uint64_t)&v39);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = swift_slowAlloc();
    uint64_t v44 = swift_slowAlloc();
    *(_DWORD *)uint64_t v21 = 136315394;
    uint64_t v23 = v41;
    uint64_t v22 = v42;
    sub_10001B620(&v39, v41);
    uint64_t v24 = (*(uint64_t (**)(uint64_t))(*(void *)(v22 + 8) + 8))(v23);
    uint64_t v43 = sub_10001C274(v24, v25, &v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10001CA50((uint64_t)&v39);
    *(_WORD *)(v21 + 12) = 2080;
    uint64_t v43 = v3;
    swift_errorRetain();
    sub_10002572C(&qword_10021B3C0);
    uint64_t v26 = String.init<A>(describing:)();
    uint64_t v43 = sub_10001C274(v26, v27, &v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Sch: Error encoding %s: %s", (uint8_t *)v21, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_10001CA50((uint64_t)&v39);
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v39 = 0;
  unint64_t v40 = 0xE000000000000000;
  _StringGuts.grow(_:)(26);
  swift_bridgeObjectRelease();
  uint64_t v39 = 0xD000000000000014;
  unint64_t v40 = 0x80000001001B9020;
  uint64_t v30 = a1[3];
  uint64_t v29 = a1[4];
  sub_10001B620(a1, v30);
  v31._uint64_t countAndFlagsBits = (*(uint64_t (**)(uint64_t))(*(void *)(v29 + 8) + 8))(v30);
  String.append(_:)(v31);
  swift_bridgeObjectRelease();
  v32._uint64_t countAndFlagsBits = 8250;
  v32._object = (void *)0xE200000000000000;
  String.append(_:)(v32);
  uint64_t v44 = v3;
  swift_errorRetain();
  sub_10002572C(&qword_10021B3C0);
  v33._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v33);
  swift_bridgeObjectRelease();
  uint64_t v35 = a1[3];
  uint64_t v34 = a1[4];
  sub_10001B620(a1, v35);
  uint64_t v39 = (*(uint64_t (**)(uint64_t))(*(void *)(v34 + 8) + 8))(v35);
  unint64_t v40 = v36;
  KeyedEncodingContainer.encode(_:forKey:)();
  swift_bridgeObjectRelease();
  swift_errorRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100138AB8(void *a1, uint64_t a2)
{
  return sub_100138554(a1, a2, *(uint64_t **)(v2 + 16));
}

uint64_t sub_100138AD4(uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = (void *)a1[1];
  uint64_t v15 = *a1;
  unint64_t v16 = (unint64_t)v2;
  sub_10002572C(&qword_100222048);
  sub_10002572C(&qword_100222050);
  sub_100138E78();
  uint64_t result = KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (v1)
  {
    if (qword_100220860 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_10002A10C(v5, (uint64_t)qword_100236CC8);
    swift_bridgeObjectRetain();
    swift_errorRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_errorRetain();
    swift_bridgeObjectRetain();
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = swift_slowAlloc();
      uint64_t v9 = swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 136315394;
      uint64_t v15 = v9;
      swift_bridgeObjectRetain();
      uint64_t v17 = sub_10001C274(v3, (unint64_t)v2, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v8 + 12) = 2080;
      uint64_t v17 = v1;
      swift_errorRetain();
      sub_10002572C(&qword_10021B3C0);
      uint64_t v10 = String.init<A>(describing:)();
      uint64_t v17 = sub_10001C274(v10, v11, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Sch: Error encoding %s: %s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_errorRelease();
      swift_errorRelease();
    }

    uint64_t v15 = 0;
    unint64_t v16 = 0xE000000000000000;
    _StringGuts.grow(_:)(26);
    swift_bridgeObjectRelease();
    uint64_t v15 = 0xD000000000000014;
    unint64_t v16 = 0x80000001001B9020;
    v12._uint64_t countAndFlagsBits = v3;
    v12._object = v2;
    String.append(_:)(v12);
    v13._uint64_t countAndFlagsBits = 8250;
    v13._object = (void *)0xE200000000000000;
    String.append(_:)(v13);
    uint64_t v17 = v1;
    swift_errorRetain();
    sub_10002572C(&qword_10021B3C0);
    v14._uint64_t countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    uint64_t v15 = v3;
    unint64_t v16 = (unint64_t)v2;
    swift_bridgeObjectRetain();
    KeyedEncodingContainer.encode(_:forKey:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_100138E78()
{
  unint64_t result = qword_100222058;
  if (!qword_100222058)
  {
    sub_1000371D4(&qword_100222050);
    sub_100138EEC();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100222058);
  }
  return result;
}

unint64_t sub_100138EEC()
{
  unint64_t result = qword_100222060;
  if (!qword_100222060)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100222060);
  }
  return result;
}

uint64_t AnyValue.encode(to:)(void *a1)
{
  sub_10001B620(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  sub_100032AD8(v1, (uint64_t)v7);
  switch(v9)
  {
    case 1:
      sub_100026D4C();
      sub_10002C59C();
      dispatch thunk of SingleValueEncodingContainer.encode(_:)();
      break;
    case 2:
      sub_100026D4C();
      sub_10002C59C();
      dispatch thunk of SingleValueEncodingContainer.encode(_:)();
      break;
    case 3:
      sub_100026D4C();
      sub_10002C59C();
      dispatch thunk of SingleValueEncodingContainer.encode(_:)();
      break;
    case 4:
      sub_100026D4C();
      sub_100025D20();
      dispatch thunk of SingleValueEncodingContainer.encode(_:)();
      break;
    case 5:
      sub_100026D4C();
      sub_100025D20();
      dispatch thunk of SingleValueEncodingContainer.encode(_:)();
      break;
    case 6:
      sub_100026D4C();
      sub_10002C59C();
      dispatch thunk of SingleValueEncodingContainer.encode(_:)();
      break;
    case 7:
      v5[0] = v7[0];
      v5[1] = v7[1];
      v6[0] = *(_OWORD *)v8;
      *(_OWORD *)((char *)v6 + 9) = *(_OWORD *)&v8[9];
      sub_100026D4C();
      sub_100139208();
      dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)();
      sub_100132850((uint64_t)v5);
      break;
    case 8:
      sub_10002E598((uint64_t)v10, v11);
      dispatch thunk of SingleValueEncodingContainer.encode(_:)();
      swift_bridgeObjectRelease();
      break;
    case 9:
      long long v3 = v7[0];
      v5[0] = v7[0];
      sub_10002E598((uint64_t)v10, v11);
      sub_100061560();
      dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)();
      sub_1000291B4(v3, *((unint64_t *)&v3 + 1));
      break;
    case 10:
      uint64_t v4 = *(void *)&v7[0];
      swift_getObjectType();
      *(void *)&v5[0] = v4;
      sub_10002E598((uint64_t)v10, v11);
      dispatch thunk of SingleValueEncodingContainer.encode<A>(_:)();
      swift_unknownObjectRelease();
      break;
    default:
      sub_100026D4C();
      sub_10002C59C();
      dispatch thunk of SingleValueEncodingContainer.encode(_:)();
      break;
  }
  return sub_10001CA50((uint64_t)v10);
}

unint64_t sub_100139208()
{
  unint64_t result = qword_100222068;
  if (!qword_100222068)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100222068);
  }
  return result;
}

uint64_t sub_100139254(void *a1)
{
  return AnyValue.encode(to:)(a1);
}

uint64_t assignWithCopy for AnyValue(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 57);
    if (v4 >= 0xB) {
      unsigned int v4 = *(_DWORD *)a1 + 11;
    }
    switch(v4)
    {
      case 7u:
        sub_10001CA50(a1);
        sub_1001230F4(*(void *)(a1 + 40), *(void *)(a1 + 48), *(unsigned char *)(a1 + 56));
        break;
      case 8u:
        swift_bridgeObjectRelease();
        break;
      case 9u:
        sub_1000291B4(*(void *)a1, *(void *)(a1 + 8));
        break;
      case 0xAu:
        swift_unknownObjectRelease();
        break;
      default:
        break;
    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 57);
    if (v5 >= 0xB) {
      unsigned int v5 = *(_DWORD *)a2 + 11;
    }
    switch(v5)
    {
      case 1u:
        *(_DWORD *)a1 = *(_DWORD *)a2;
        char v6 = 1;
        goto LABEL_20;
      case 2u:
        *(void *)a1 = *(void *)a2;
        char v6 = 2;
        goto LABEL_20;
      case 3u:
        *(void *)a1 = *(void *)a2;
        char v6 = 3;
        goto LABEL_20;
      case 4u:
        *(_DWORD *)a1 = *(_DWORD *)a2;
        char v6 = 4;
        goto LABEL_20;
      case 5u:
        *(void *)a1 = *(void *)a2;
        char v6 = 5;
        goto LABEL_20;
      case 6u:
        *(unsigned char *)a1 = *(unsigned char *)a2;
        char v6 = 6;
        goto LABEL_20;
      case 7u:
        uint64_t v7 = *(void *)(a2 + 24);
        *(void *)(a1 + 24) = v7;
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1, a2);
        uint64_t v8 = *(void *)(a2 + 40);
        uint64_t v9 = *(void *)(a2 + 48);
        char v10 = *(unsigned char *)(a2 + 56);
        sub_100123500(v8, v9, v10);
        *(void *)(a1 + 40) = v8;
        *(void *)(a1 + 48) = v9;
        *(unsigned char *)(a1 + 56) = v10;
        char v6 = 7;
        goto LABEL_20;
      case 8u:
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        *(unsigned char *)(a1 + 57) = 8;
        swift_bridgeObjectRetain();
        return a1;
      case 9u:
        uint64_t v12 = *(void *)a2;
        unint64_t v11 = *(void *)(a2 + 8);
        sub_100027BCC(v12, v11);
        *(void *)a1 = v12;
        *(void *)(a1 + 8) = v11;
        char v6 = 9;
LABEL_20:
        *(unsigned char *)(a1 + 57) = v6;
        break;
      case 0xAu:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(unsigned char *)(a1 + 57) = 10;
        swift_unknownObjectRetain();
        break;
      default:
        *(_DWORD *)a1 = *(_DWORD *)a2;
        *(unsigned char *)(a1 + 57) = 0;
        break;
    }
  }
  return a1;
}

uint64_t assignWithTake for AnyValue(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 57);
    if (v4 >= 0xB) {
      unsigned int v4 = *(_DWORD *)a1 + 11;
    }
    switch(v4)
    {
      case 7u:
        sub_10001CA50(a1);
        sub_1001230F4(*(void *)(a1 + 40), *(void *)(a1 + 48), *(unsigned char *)(a1 + 56));
        break;
      case 8u:
        swift_bridgeObjectRelease();
        break;
      case 9u:
        sub_1000291B4(*(void *)a1, *(void *)(a1 + 8));
        break;
      case 0xAu:
        swift_unknownObjectRelease();
        break;
      default:
        break;
    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 57);
    if (v5 >= 0xB) {
      unsigned int v5 = *(_DWORD *)a2 + 11;
    }
    switch(v5)
    {
      case 1u:
        *(_DWORD *)a1 = *(_DWORD *)a2;
        char v6 = 1;
        break;
      case 2u:
        *(void *)a1 = *(void *)a2;
        char v6 = 2;
        break;
      case 3u:
        *(void *)a1 = *(void *)a2;
        char v6 = 3;
        break;
      case 4u:
        *(_DWORD *)a1 = *(_DWORD *)a2;
        char v6 = 4;
        break;
      case 5u:
        *(void *)a1 = *(void *)a2;
        char v6 = 5;
        break;
      case 6u:
        *(unsigned char *)a1 = *(unsigned char *)a2;
        char v6 = 6;
        break;
      case 7u:
        long long v7 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v7;
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
        char v6 = 7;
        break;
      case 8u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        char v6 = 8;
        break;
      case 9u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        char v6 = 9;
        break;
      case 0xAu:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        char v6 = 10;
        break;
      default:
        char v6 = 0;
        *(_DWORD *)a1 = *(_DWORD *)a2;
        break;
    }
    *(unsigned char *)(a1 + 57) = v6;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for AnyValue(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xF6 && *(unsigned char *)(a1 + 58)) {
    return (*(_DWORD *)a1 + 246);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 57);
  if (v3 >= 0xB) {
    return (v3 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for AnyValue(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF5)
  {
    *(_OWORD *)(result + 42) = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)unint64_t result = 0u;
    *(_DWORD *)unint64_t result = a2 - 246;
    if (a3 >= 0xF6) {
      *(unsigned char *)(result + 58) = 1;
    }
  }
  else
  {
    if (a3 >= 0xF6) {
      *(unsigned char *)(result + 58) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 57) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1001397B0(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 *)(a1 + 57);
  if (result >= 0xB) {
    return (*(_DWORD *)a1 + 11);
  }
  return result;
}

uint64_t sub_1001397CC(uint64_t result, unsigned int a2)
{
  if (a2 > 0xA)
  {
    *(_OWORD *)(result + 41) = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)uint64_t result = 0u;
    *(_DWORD *)uint64_t result = a2 - 11;
    LOBYTE(a2) = 11;
  }
  *(unsigned char *)(result + 57) = a2;
  return result;
}

ValueMetadata *type metadata accessor for AnyValue()
{
  return &type metadata for AnyValue;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> PEnumFunction.perform(with:arguments:)(SQLiter::SQLiteContext with, Swift::OpaquePointer arguments)
{
  if (*((void *)arguments._rawValue + 2) < 2uLL)
  {
    __break(1u);
  }
  else
  {
    Swift::String v4 = SQLiteArgument.getStringNonNull()();
    if (!v5)
    {
      sub_1001228E8();
      SQLiteBaseSchematizer.enum(withName:)(v4._countAndFlagsBits, (uint64_t)v4._object);
      swift_release();
      swift_bridgeObjectRelease();
      sub_10001C1AC(&v17, (uint64_t)v18);
      char v6 = (sqlite3_value *)*((void *)arguments._rawValue + 4);
      if (SQLiteArgument.isText.getter(*((sqlite3_value **)arguments._rawValue + 4)))
      {
        Swift::String v7 = SQLiteArgument.getStringNonNull()();
        if (!v8)
        {
          uint64_t v9 = v19;
          uint64_t v10 = v20;
          sub_10001B620(v18, v19);
          Swift::Int32 v16 = (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(v10 + 24))(v7._countAndFlagsBits, v7._object, v9, v10);
          swift_bridgeObjectRelease();
          SQLiteContext.setInt32(_:)(v16);
        }
      }
      else if (SQLiteArgument.isInteger.getter(v6))
      {
        uint64_t v11 = SQLiteArgument.getInt32()();
        uint64_t v12 = v19;
        uint64_t v13 = v20;
        sub_10001B620(v18, v19);
        uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 32))(v11, v12, v13);
        SQLiteContext.setString(_:destructor:)(v14, v15, (void (__cdecl **)(void *))1, (sqlite3_context *)with.context._rawValue);
        swift_bridgeObjectRelease();
      }
      sub_10001CA50((uint64_t)v18);
    }
  }
}

uint64_t sub_100139A44(uint64_t a1)
{
  uint64_t v2 = sub_10002572C(&qword_100222070);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for PEnumFunction()
{
  return self;
}

uint64_t sub_100139AC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100139AD4(a1, a2, a3, a4, (uint64_t)&off_100202CB8);
}

uint64_t sub_100139AD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 24))(ObjectType, a2);
  unint64_t v12 = v11;
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(a2 + 16))(v18, ObjectType, a2);
  uint64_t v14 = v19;
  uint64_t v13 = v20;
  sub_10001B620(v18, v19);
  uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)(v13 + 8) + 8))(v14);
  (*(void (**)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a5 + 8) + 32))(v10, v12, v15, v16, a3, a4);
  sub_1000291B4(v10, v12);
  swift_bridgeObjectRelease();
  return sub_10001CA50((uint64_t)v18);
}

void sub_100139BFC(uint64_t a1, sqlite3_context *a2, uint64_t a3, uint64_t a4)
{
  sub_100135A7C(a1, (uint64_t)v7);
  if (v7[57] == 255)
  {
    sub_10013473C((uint64_t)v7);
    SQLiteContext.setNull()();
  }
  else
  {
    sub_10001B978((uint64_t)v7, (uint64_t)v8);
    sub_1001357B8(a2, v4, a4);
    sub_10001B840((uint64_t)v8);
  }
}

uint64_t sub_100139C98(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(a7 + 16))(v18, a3, a4, a6, a7);
  sub_10001C20C((uint64_t)v18, (uint64_t)v17);
  type metadata accessor for ProtobufPayload();
  uint64_t v12 = swift_allocObject();
  sub_10001C1AC(v17, v12 + 16);
  *(void *)(v12 + 56) = a1;
  *(void *)(v12 + 64) = a2;
  unint64_t v13 = sub_10012C940();
  uint64_t v14 = *(void *)(a7 + 8);
  uint64_t v15 = *(void (**)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(v14 + 16);
  sub_100027BCC(a1, a2);
  v15(v12, v13, a5, a6, v14);
  swift_release();
  return sub_10001CA50((uint64_t)v18);
}

uint64_t sub_100139DF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100139AD4(a1, a2, a3, a4, (uint64_t)&off_100203250);
}

uint64_t sub_100139E00(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_100139C98(a1, a2, a3, a4, a5, a6, (uint64_t)&off_100203538);
}

uint64_t sub_100139E0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16) && (unint64_t v4 = sub_1000287F0(a1, a2), (v5 & 1) != 0)) {
    return *(void *)(*(void *)(a3 + 56) + 8 * v4);
  }
  else {
    return 0;
  }
}

uint64_t sub_100139E54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)(a3 + 16)) {
    return 0;
  }
  unint64_t v4 = sub_1000287F0(a1, a2);
  if ((v5 & 1) == 0) {
    return 0;
  }
  uint64_t v6 = *(void *)(*(void *)(a3 + 56) + 24 * v4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v6;
}

uint64_t sub_100139ED8@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  long long v5 = xmmword_1001AB3A0;
  if (*(void *)(a3 + 16))
  {
    long long v12 = xmmword_1001AB3A0;
    uint64_t result = sub_1000287F0(result, a2);
    if (v7)
    {
      uint64_t v8 = (unsigned __int8 *)(*(void *)(a3 + 56) + 40 * result);
      uint64_t v9 = *v8;
      uint64_t v10 = *((void *)v8 + 1);
      long long v12 = *((_OWORD *)v8 + 1);
      unsigned __int8 v11 = v8[32];
      uint64_t result = swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      unsigned __int8 v11 = 0;
    }
    long long v5 = v12;
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    unsigned __int8 v11 = 0;
  }
  *(void *)a4 = v9;
  *(void *)(a4 + 8) = v10;
  *(_OWORD *)(a4 + 16) = v5;
  *(unsigned char *)(a4 + 32) = v11;
  return result;
}

uint64_t sub_100139F80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16) && (sub_1000287F0(a1, a2), (v3 & 1) != 0)) {
    return swift_bridgeObjectRetain();
  }
  else {
    return 0;
  }
}

double sub_100139FC4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*(void *)(a2 + 16) && (unint64_t v4 = sub_10003B4BC(a1), (v5 & 1) != 0))
  {
    sub_100024CBC(v4);
  }
  else
  {
    *(void *)(a3 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  return result;
}

void *sub_10013A00C(uint64_t a1, uint64_t a2)
{
  v2[2] = _swiftEmptyArrayStorage;
  v2[3] = Dictionary.init(dictionaryLiteral:)();
  v2[4] = a1;
  v2[5] = a2;
  return v2;
}

uint64_t SQLiteMessageTypeRegistry.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return v0;
}

uint64_t sub_10013A09C()
{
  return 0x7FFFFFFFLL;
}

Swift::UInt32 __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SQLiteMessageTypeRegistry.id(forSchemaName:)(Swift::String forSchemaName)
{
  char v3 = v1;
  uint64_t v4 = *v1;
  swift_beginAccess();
  uint64_t v5 = v3[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v6 = sub_10002A494();
  unint64_t v8 = sub_100139E0C(v6, v7, v5);
  char v10 = v9;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v10)
  {
    uint64_t v11 = swift_beginAccess();
    unint64_t v8 = *(void *)(v3[2] + 16);
    if ((uint64_t)v8 >= (*(uint64_t (**)(uint64_t))(v4 + 104))(v11))
    {
      sub_10013051C();
      swift_allocError();
      *uint64_t v18 = 0;
      swift_willThrow();
    }
    else
    {
      uint64_t v20 = v3 + 2;
      unint64_t v22 = v8;
      uint64_t v12 = v3[5];
      swift_getObjectType();
      unint64_t v8 = *(void *)(v12 + 40);
      swift_unknownObjectRetain();
      uint64_t v13 = sub_10002A494();
      ((void (*)(uint64_t))v8)(v13);
      swift_unknownObjectRelease();
      if (!v2)
      {
        unint64_t v8 = v22;
        swift_beginAccess();
        swift_bridgeObjectRetain();
        sub_10013A95C();
        swift_endAccess();
        swift_bridgeObjectRelease();
        swift_beginAccess();
        sub_10013A514((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1001287E0);
        uint64_t v14 = *(void *)(*v20 + 16);
        uint64_t v15 = sub_10002A494();
        sub_10013A5B8(v15, v16);
        uint64_t v17 = *v20;
        *(void *)(v17 + 16) = v14 + 1;
        sub_10001C20C((uint64_t)v21, v17 + 40 * v14 + 32);
        swift_endAccess();
        if (v8 >= 0xFFFFFFFF) {
          goto LABEL_4;
        }
        sub_10001CA50((uint64_t)v21);
        LODWORD(v8) = v8 + 1;
      }
    }
    return v8;
  }
  if ((v8 & 0x8000000000000000) != 0)
  {
    sub_100020C64();
    goto LABEL_12;
  }
  if (!HIDWORD(v8)) {
    return v8;
  }
LABEL_4:
  sub_100020C64();
LABEL_12:
  Swift::UInt32 result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10013A398@<X0>(unsigned int a1@<W0>, uint64_t a2@<X8>)
{
  if (!a1)
  {
    sub_10013051C();
    swift_allocError();
    char v7 = 2;
    goto LABEL_5;
  }
  swift_beginAccess();
  uint64_t v5 = *(void *)(v2 + 16);
  if (*(void *)(v5 + 16) < (unint64_t)a1)
  {
    sub_10013051C();
    swift_allocError();
    char v7 = 1;
LABEL_5:
    *uint64_t v6 = v7;
    return swift_willThrow();
  }
  return sub_10001C20C(v5 + 40 * (a1 - 1) + 32, a2);
}

uint64_t sub_10013A470()
{
  return swift_unknownObjectRetain();
}

uint64_t SQLiteMessageTypeRegistry.__deallocating_deinit()
{
  SQLiteMessageTypeRegistry.deinit();

  return _swift_deallocClassInstance(v0, 48, 7);
}

uint64_t sub_10013A4CC()
{
  return sub_10013A514((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100128898);
}

uint64_t sub_10013A4E4()
{
  return sub_10013A514((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1001289B4);
}

uint64_t sub_10013A4FC()
{
  return sub_10013A514((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100128BD4);
}

uint64_t sub_10013A514(uint64_t (*a1)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v3 = *v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v1 = v3;
  if (!result)
  {
    uint64_t result = a1(result, *(void *)(v3 + 16) + 1, 1, v3);
    *uint64_t v1 = result;
  }
  return result;
}

uint64_t sub_10013A570(uint64_t a1)
{
  return sub_10013A5B8(a1, (uint64_t (*)(BOOL))sub_100128898);
}

uint64_t sub_10013A588(uint64_t a1)
{
  return sub_10013A5B8(a1, (uint64_t (*)(BOOL))sub_1001289B4);
}

uint64_t sub_10013A5A0(uint64_t a1)
{
  return sub_10013A5B8(a1, (uint64_t (*)(BOOL))sub_100128BD4);
}

uint64_t sub_10013A5B8(uint64_t result, uint64_t (*a2)(BOOL))
{
  unint64_t v3 = *(void *)(*(void *)v2 + 24);
  if (result + 1 > (uint64_t)(v3 >> 1))
  {
    uint64_t result = a2(v3 > 1);
    *(void *)uint64_t v2 = result;
  }
  return result;
}

uint64_t sub_10013A600()
{
  swift_isUniquelyReferenced_nonNull_native();
  sub_1000257AC();
  sub_100141E24();
  *uint64_t v0 = v2;

  return swift_bridgeObjectRelease();
}

uint64_t sub_10013A67C()
{
  return sub_10013A95C();
}

uint64_t type metadata accessor for SQLiteMessageTypeRegistry()
{
  return self;
}

unsigned char *storeEnumTagSinglePayload for SQLiteMessageTypeRegistry.Error(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10013A784);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SQLiteMessageTypeRegistry.Error()
{
  return &type metadata for SQLiteMessageTypeRegistry.Error;
}

unint64_t sub_10013A7C0()
{
  unint64_t result = qword_1002222D0;
  if (!qword_1002222D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002222D0);
  }
  return result;
}

uint64_t sub_10013A80C()
{
  return sub_10013A95C();
}

uint64_t sub_10013A824()
{
  return sub_10013A95C();
}

uint64_t sub_10013A83C()
{
  return sub_10013A86C();
}

uint64_t sub_10013A854()
{
  return sub_10013A86C();
}

uint64_t sub_10013A86C()
{
  sub_10002C5B0();
  uint64_t v2 = sub_100026D90();
  v0(v2);
  *uint64_t v1 = v4;

  return swift_bridgeObjectRelease();
}

uint64_t sub_10013A8CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_isUniquelyReferenced_nonNull_native();
  sub_1000257AC();
  uint64_t v5 = sub_10002A494();
  sub_100142328(v5, v6, a3);
  *int v3 = v8;

  return swift_bridgeObjectRelease();
}

uint64_t sub_10013A944()
{
  return sub_10013A95C();
}

uint64_t sub_10013A95C()
{
  sub_10002C5B0();
  uint64_t v2 = sub_100026D90();
  v0(v2);
  *uint64_t v1 = v4;

  return swift_bridgeObjectRelease();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> POneOfFunction.perform(with:arguments:)(SQLiter::SQLiteContext with, Swift::OpaquePointer arguments)
{
  unint64_t v3 = *((void *)arguments._rawValue + 2);
  if (!v3)
  {
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v5 = (sqlite3_value *)*((void *)arguments._rawValue + 4);
  if (SQLiteArgument.isNull.getter(v5))
  {
    SQLiteContext.setNull()();
    return;
  }
  sub_1001228E8();
  if (!v2)
  {
    SQLiteBaseSchematizer.getSQLiteBridge()();
    uint64_t v7 = v6;
    swift_release();
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v9 = (*(uint64_t (**)(sqlite3_value *, uint64_t, uint64_t))(v7 + 24))(v5, ObjectType, v7);
    uint64_t v11 = v10;
    uint64_t v13 = v12;
    uint64_t v15 = v14;
    swift_unknownObjectRelease();
    if (v3 >= 2)
    {
      Swift::String v16 = SQLiteArgument.getStringNonNull()();
      if (v17)
      {
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
      }
      else
      {
        sub_1001356A4(v16._countAndFlagsBits, (uint64_t)v16._object, (uint64_t)with.context._rawValue, v9, v11, v13, v15);
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
      }
      return;
    }
LABEL_11:
    __break(1u);
  }
}

uint64_t type metadata accessor for POneOfFunction()
{
  return self;
}

uint64_t sub_10013AB48()
{
  return 255;
}

void sub_10013AB50(uint64_t a1, unint64_t a2, uint64_t a3, void *a4, sqlite3_context *a5)
{
  SQLiteContext.setData(_:destructor:)(a1, a2, (void (__cdecl **)(void *))1, a5);
  v8._uint64_t countAndFlagsBits = a3;
  v8._object = a4;
  Swift::UInt32 v9 = SQLiteMessageTypeRegistry.id(forSchemaName:)(v8);
  if (v10)
  {
    uint64_t v12 = v10;
    uint64_t v11 = sub_10002572C(&qword_10021B3C0);
    SQLiteContext.setError<A>(_:message:code:)((uint64_t)&v12, 0xD000000000000014, 0x80000001001B8D10, -1, a5, v11);
    swift_errorRelease();
  }
  else
  {
    SQLiteContext.setSubtype(_:)(v9);
  }
}

uint64_t sub_10013AC1C(sqlite3_value *a1)
{
  unsigned int v4 = SQLiteArgument.subtype.getter(a1);
  sub_10013A398(v4, (uint64_t)v12);
  if (!v2)
  {
    uint64_t v5 = SQLiteArgument.getUnsafeData()(a1);
    if (v6 >> 60 == 15)
    {
      sub_100122878();
      swift_allocError();
      *(void *)(v7 + 8) = 0;
      *(void *)(v7 + 16) = 0;
      *(void *)uint64_t v7 = 6;
      *(unsigned char *)(v7 + 24) = 4;
      swift_willThrow();
      sub_10001CA50((uint64_t)v12);
    }
    else
    {
      uint64_t v8 = v5;
      unint64_t v9 = v6;
      type metadata accessor for ProtobufPayload();
      uint64_t v10 = swift_allocObject();
      sub_10001C1AC(v12, v10 + 16);
      *(void *)(v10 + 56) = v8;
      *(void *)(v10 + 64) = v9;
      sub_10012C940();
      swift_retain();
    }
  }
  return v1;
}

uint64_t type metadata accessor for SQLiteMessageAsSubtypeBridge()
{
  return self;
}

uint64_t sub_10013AD4C(sqlite3_value *a1)
{
  uint64_t result = sub_10013AC1C(a1);
  if (v1) {
    return v3;
  }
  return result;
}

uint64_t Dictionary<>.registerAll(on:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v24 = a2 + 64;
  sub_100026DB8();
  unint64_t v7 = v6 & v5;
  int64_t v25 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v26 = v9;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v11 = 0;
  if (!v7) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v12 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  for (unint64_t i = v12 | (v11 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v11 << 6))
  {
    uint64_t v17 = (uint64_t *)(*(void *)(v26 + 48) + 16 * i);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    uint64_t v20 = (uint64_t *)(*(void *)(v26 + 56) + 16 * i);
    uint64_t v21 = *v20;
    uint64_t v22 = *(void *)(v20[1] + 8);
    uint64_t v23 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 152);
    swift_unknownObjectRetain_n();
    swift_bridgeObjectRetain();
    v23(v21, v22, v18, v19);
    if (v3)
    {
      swift_release();
      swift_bridgeObjectRelease();
      return swift_unknownObjectRelease_n();
    }
    swift_bridgeObjectRelease();
    uint64_t result = swift_unknownObjectRelease_n();
    if (v7) {
      goto LABEL_2;
    }
LABEL_3:
    if (__OFADD__(v11++, 1))
    {
      __break(1u);
      goto LABEL_24;
    }
    if (v11 >= v25) {
      return swift_release();
    }
    unint64_t v15 = *(void *)(v24 + 8 * v11);
    if (!v15) {
      break;
    }
LABEL_13:
    unint64_t v7 = (v15 - 1) & v15;
  }
  int64_t v16 = v11 + 1;
  if (v11 + 1 >= v25) {
    return swift_release();
  }
  unint64_t v15 = *(void *)(v24 + 8 * v16);
  if (v15) {
    goto LABEL_12;
  }
  int64_t v16 = v11 + 2;
  if (v11 + 2 >= v25) {
    return swift_release();
  }
  unint64_t v15 = *(void *)(v24 + 8 * v16);
  if (v15) {
    goto LABEL_12;
  }
  int64_t v16 = v11 + 3;
  if (v11 + 3 >= v25) {
    return swift_release();
  }
  unint64_t v15 = *(void *)(v24 + 8 * v16);
  if (v15)
  {
LABEL_12:
    int64_t v11 = v16;
    goto LABEL_13;
  }
  while (1)
  {
    int64_t v11 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v11 >= v25) {
      return swift_release();
    }
    unint64_t v15 = *(void *)(v24 + 8 * v11);
    ++v16;
    if (v15) {
      goto LABEL_13;
    }
  }
LABEL_24:
  __break(1u);
  return result;
}

uint64_t Dictionary<>.unregisterAll(from:)(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = a2 + 64;
  sub_100026DB8();
  unint64_t v6 = v5 & v4;
  int64_t v19 = (unint64_t)(v7 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v9 = 0;
  if (!v6) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v10 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  for (unint64_t i = v10 | (v9 << 6); ; unint64_t i = __clz(__rbit64(v13)) + (v9 << 6))
  {
    uint64_t v15 = *(void *)(*(void *)(a2 + 56) + 16 * i + 8);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 32);
    swift_unknownObjectRetain();
    v17(a1, ObjectType, v15);
    uint64_t result = swift_unknownObjectRelease();
    if (v6) {
      goto LABEL_2;
    }
LABEL_3:
    if (__OFADD__(v9++, 1))
    {
      __break(1u);
LABEL_24:
      __break(1u);
      return result;
    }
    if (v9 >= v19) {
      goto LABEL_20;
    }
    unint64_t v13 = *(void *)(v18 + 8 * v9);
    if (!v13) {
      break;
    }
LABEL_13:
    unint64_t v6 = (v13 - 1) & v13;
  }
  int64_t v14 = v9 + 1;
  if (v9 + 1 >= v19) {
    goto LABEL_20;
  }
  unint64_t v13 = *(void *)(v18 + 8 * v14);
  if (v13) {
    goto LABEL_12;
  }
  int64_t v14 = v9 + 2;
  if (v9 + 2 >= v19) {
    goto LABEL_20;
  }
  unint64_t v13 = *(void *)(v18 + 8 * v14);
  if (v13)
  {
LABEL_12:
    int64_t v9 = v14;
    goto LABEL_13;
  }
  int64_t v14 = v9 + 3;
  if (v9 + 3 < v19)
  {
    unint64_t v13 = *(void *)(v18 + 8 * v14);
    if (!v13)
    {
      while (1)
      {
        int64_t v9 = v14 + 1;
        if (__OFADD__(v14, 1)) {
          goto LABEL_24;
        }
        if (v9 >= v19) {
          goto LABEL_20;
        }
        unint64_t v13 = *(void *)(v18 + 8 * v9);
        ++v14;
        if (v13) {
          goto LABEL_13;
        }
      }
    }
    goto LABEL_12;
  }
LABEL_20:

  return swift_release();
}

uint64_t sub_10013B150()
{
  if ([v0 isAtEnd]) {
    return 0;
  }
  id v2 = [v0 string];
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  NSScanner.currentIndex.getter();
  uint64_t v1 = String.subscript.getter();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_10013B1E8(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_10013B150();
  uint64_t v7 = v6;
  if (v6)
  {
    if (v5 == a1 && v6 == a2)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      uint64_t v7 = 0;
      if ((v9 & 1) == 0) {
        return v7;
      }
    }
    id v10 = [v2 string];
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    NSScanner.currentIndex.getter();
    uint64_t v7 = 1;
    String.index(_:offsetBy:)();
    swift_bridgeObjectRelease();
    NSScanner.currentIndex.setter();
  }
  return v7;
}

uint64_t sub_10013B2C0(uint64_t (*a1)(void *), uint64_t a2, uint64_t a3, unint64_t a4)
{
  long long v17[3] = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) != 0) {
    uint64_t v5 = HIBYTE(a4) & 0xF;
  }
  else {
    uint64_t v5 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v5)
  {
    uint64_t v16 = a4 & 0xFFFFFFFFFFFFFFLL;
    swift_bridgeObjectRetain();
    uint64_t v9 = 0;
    while (1)
    {
      if ((a4 & 0x1000000000000000) != 0)
      {
        int v10 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)();
      }
      else
      {
        if ((a4 & 0x2000000000000000) != 0)
        {
          v17[0] = a3;
          v17[1] = v16;
        }
        else if ((a3 & 0x1000000000000000) == 0)
        {
          _StringObject.sharedUTF8.getter();
        }
        int v10 = _decodeScalar(_:startingAt:)();
      }
      uint64_t v12 = v11;
      LODWORD(v17[0]) = v10;
      char v13 = a1(v17);
      if (v4)
      {
        swift_bridgeObjectRelease();
        return v14 & 1;
      }
      if ((v13 & 1) == 0) {
        break;
      }
      v9 += v12;
      if (v9 >= v5)
      {
        swift_bridgeObjectRelease();
        goto LABEL_17;
      }
    }
    swift_bridgeObjectRelease();
    char v14 = 0;
  }
  else
  {
LABEL_17:
    char v14 = 1;
  }
  return v14 & 1;
}

void *static PropertyPathUtil.parse(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v68 = type metadata accessor for NSScanner.NumberRepresentation();
  sub_100020C48();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  uint64_t v67 = (char *)&v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CharacterSet();
  sub_100020C48();
  uint64_t v10 = v9;
  __chkstk_darwin(v11);
  char v13 = (char *)&v60 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v14 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v14)
  {
    sub_10013C1E4();
    sub_100024A30();
    *(_OWORD *)uint64_t v41 = 0u;
    *(_OWORD *)(v41 + 16) = 0u;
    *(void *)(v41 + 32) = 0;
    *(unsigned char *)(v41 + 40) = 6;
    swift_willThrow();
    return v5;
  }
  sub_10013BAC0();
  swift_bridgeObjectRetain();
  uint64_t v61 = a1;
  unint64_t v62 = a2;
  id v15 = sub_10013BA4C();
  [v15 setCharactersToBeSkipped:0];
  uint64_t v71 = (uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 16);
  uint64_t v73 = (void (**)(char *, uint64_t))(v10 + 8);
  uint64_t v65 = (void (**)(char *, uint64_t))(v5 + 1);
  uint64_t v66 = (void (**)(char *, void, uint64_t))(v5 + 13);
  uint64_t v5 = _swiftEmptyArrayStorage;
  unsigned int v64 = enum case for NSScanner.NumberRepresentation.decimal(_:);
  while (1)
  {
    uint64_t v16 = NSScanner.currentIndex.getter();
    if (qword_100220878 != -1) {
      swift_once();
    }
    sub_10002A10C(v8, (uint64_t)qword_100222558);
    uint64_t v17 = NSScanner.scanCharacters(from:)();
    if (!v18)
    {
      swift_bridgeObjectRelease();
      sub_10013C1E4();
      uint64_t v42 = sub_100024A30();
      sub_100024CDC(v42, v43);
      *(void *)(v44 + 16) = v16;
      *(unsigned char *)(v44 + 40) = 0;
      goto LABEL_31;
    }
    uint64_t v19 = v18;
    uint64_t v72 = v17;
    uint64_t v20 = String.subscript.getter();
    unint64_t v22 = v21;
    if (qword_100220870 != -1) {
      swift_once();
    }
    uint64_t v23 = sub_10002A10C(v8, (uint64_t)qword_100222540);
    uint64_t v24 = (*v71)(v13, v23, v8);
    __chkstk_darwin(v24);
    *(&v60 - 2) = (uint64_t)v13;
    swift_bridgeObjectRetain();
    uint64_t v25 = v74;
    char v26 = sub_10013B2C0((uint64_t (*)(void *))sub_10013C230, (uint64_t)(&v60 - 4), v20, v22);
    uint64_t v74 = v25;
    swift_bridgeObjectRelease_n();
    unint64_t v27 = *v73;
    (*v73)(v13, v8);
    if ((v26 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      sub_10013C1E4();
      sub_100024A30();
      *(void *)uint64_t v45 = v72;
      *(void *)(v45 + 8) = v19;
      unint64_t v46 = v62;
      *(void *)(v45 + 16) = v61;
      *(void *)(v45 + 24) = v46;
      *(void *)(v45 + 32) = v16;
      char v47 = 1;
      goto LABEL_30;
    }
    int v28 = sub_10013B1E8(91, 0xE100000000000000);
    char v29 = v28;
    if ((v28 & 1) == 0)
    {
      uint64_t v33 = 0;
      goto LABEL_17;
    }
    int v69 = v28;
    uint64_t v70 = v5;
    static CharacterSet.whitespaces.getter();
    NSScanner.scanCharacters(from:)();
    swift_bridgeObjectRelease();
    uint64_t v5 = v13;
    uint64_t v30 = v8;
    v27(v13, v8);
    uint64_t v63 = NSScanner.currentIndex.getter();
    Swift::String v31 = v67;
    uint64_t v32 = v68;
    (*v66)(v67, v64, v68);
    uint64_t v33 = NSScanner.scanInt(representation:)();
    char v35 = v34;
    (*v65)(v31, v32);
    if (v35)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_10013C1E4();
      uint64_t v50 = sub_100024A30();
      sub_100024CDC(v50, v51);
      *(void *)(v45 + 16) = v63;
      char v47 = 2;
      goto LABEL_30;
    }
    if (v33 < 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_10013C1E4();
      sub_100024A30();
      uint64_t v53 = v61;
      unint64_t v52 = v62;
      *(void *)uint64_t v45 = v33;
      *(void *)(v45 + 8) = v53;
      uint64_t v54 = v63;
      *(void *)(v45 + 16) = v52;
      *(void *)(v45 + 24) = v54;
      *(void *)(v45 + 32) = 0;
      char v47 = 3;
LABEL_30:
      *(unsigned char *)(v45 + 40) = v47;
LABEL_31:
      swift_bridgeObjectRetain();
      goto LABEL_33;
    }
    char v13 = (char *)v5;
    static CharacterSet.whitespaces.getter();
    NSScanner.scanCharacters(from:)();
    swift_bridgeObjectRelease();
    uint64_t v8 = v30;
    v27((char *)v5, v30);
    char v36 = sub_10013B1E8(93, 0xE100000000000000);
    uint64_t v5 = v70;
    char v29 = v69;
    if ((v36 & 1) == 0) {
      break;
    }
LABEL_17:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_100128B20();
      uint64_t v5 = v39;
    }
    unint64_t v37 = v5[2];
    if (v37 >= v5[3] >> 1)
    {
      sub_100128B20();
      uint64_t v5 = v40;
    }
    _OWORD v5[2] = v37 + 1;
    uint64_t v38 = &v5[4 * v37];
    v38[4] = v72;
    v38[5] = v19;
    v38[6] = v33;
    *((unsigned char *)v38 + 56) = (v29 ^ 1) & 1;
    if ([v15 isAtEnd])
    {

      return v5;
    }
    if ((sub_10013B1E8(46, 0xE100000000000000) & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      uint64_t v5 = NSScanner.currentIndex.getter();
      sub_10013C1E4();
      uint64_t v48 = sub_100024A30();
      sub_100025D34(v48, v49);
      char v58 = 5;
      goto LABEL_32;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v5 = NSScanner.currentIndex.getter();
  sub_10013C1E4();
  uint64_t v55 = sub_100024A30();
  sub_100025D34(v55, v56);
  char v58 = 4;
LABEL_32:
  *(unsigned char *)(v57 + 40) = v58;
LABEL_33:
  swift_willThrow();

  return v5;
}

id sub_10013BA4C()
{
  id v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  NSString v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v2 = [v0 initWithString:v1];

  return v2;
}

unint64_t sub_10013BAC0()
{
  unint64_t result = qword_100222570;
  if (!qword_100222570)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100222570);
  }
  return result;
}

uint64_t PropertyPathUtil.Error.errorDescription.getter()
{
  sub_10002572C(&qword_100222580);
  *(void *)&long long v31 = String.init<A>(describing:)();
  *((void *)&v31 + 1) = v1;
  v2._uint64_t countAndFlagsBits = 0x203A726F72724520;
  v2._object = (void *)0xE800000000000000;
  String.append(_:)(v2);
  uint64_t v3 = v31;
  sub_10013C250(v0, &v31);
  switch(v35)
  {
    case 1:
      Swift::String v10 = (Swift::String)v31;
      uint64_t v11 = (uint64_t)v32;
      uint64_t v12 = v33;
      uint64_t v13 = v34;
      sub_10002A6F8();
      _StringGuts.grow(_:)(62);
      v14._uint64_t countAndFlagsBits = 0xD00000000000003BLL;
      v14._object = (void *)0x80000001001B9220;
      String.append(_:)(v14);
      String.append(_:)(v10);
      v15._uint64_t countAndFlagsBits = 41;
      v15._object = (void *)0xE100000000000000;
      String.append(_:)(v15);
      uint64_t v16 = sub_10013BE14(v28, v30, v11, v12, v13, v3);
      swift_bridgeObjectRelease();
      goto LABEL_10;
    case 2:
      uint64_t v5 = (void *)*((void *)&v31 + 1);
      uint64_t v4 = v31;
      uint64_t v6 = (uint64_t)v32;
      unint64_t v8 = 0x20676E697373694DLL;
      uint64_t v17 = (void *)0xED00007865646E69;
      goto LABEL_9;
    case 3:
      uint64_t v18 = *((void *)&v31 + 1);
      uint64_t v19 = v32;
      uint64_t v20 = (uint64_t)v33;
      sub_10002A6F8();
      _StringGuts.grow(_:)(35);
      swift_bridgeObjectRelease();
      sub_10002AE7C();
      uint64_t v29 = v21 + 15;
      v22._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v22);
      swift_bridgeObjectRelease();
      v23._uint64_t countAndFlagsBits = 41;
      v23._object = (void *)0xE100000000000000;
      String.append(_:)(v23);
      uint64_t v16 = sub_10013BE14(v29, (void *)0x80000001001B91D0, v18, v19, v20, v3);
      swift_bridgeObjectRelease();
      goto LABEL_10;
    case 4:
      sub_10002AE7C();
      unint64_t v8 = v24 | 6;
      uint64_t v9 = "Missing closing bracket";
      goto LABEL_7;
    case 5:
      uint64_t v5 = (void *)*((void *)&v31 + 1);
      uint64_t v4 = v31;
      uint64_t v6 = (uint64_t)v32;
      uint64_t v17 = (void *)0x80000001001B9190;
      unint64_t v8 = 0xD000000000000011;
      goto LABEL_9;
    case 6:
      sub_10002A6F8();
      _StringGuts.grow(_:)(30);
      swift_bridgeObjectRelease();
      sub_10002AE7C();
      v27._uint64_t countAndFlagsBits = v26 + 11;
      v27._object = (void *)0x80000001001B9260;
      String.append(_:)(v27);
      return v3;
    default:
      sub_10002AE7C();
      unint64_t v8 = v7 | 4;
      uint64_t v9 = "Missing property name";
LABEL_7:
      uint64_t v17 = (void *)((unint64_t)(v9 - 32) | 0x8000000000000000);
LABEL_9:
      uint64_t v16 = sub_10013BE14(v8, v17, v4, v5, v6, v3);
LABEL_10:
      swift_bridgeObjectRelease();
      return v16;
  }
}

uint64_t sub_10013BE14(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  Swift::Int v11 = String.distance(from:to:)();
  v12._uint64_t countAndFlagsBits = 32;
  v12._object = (void *)0xE100000000000000;
  Swift::String v19 = String.init(repeating:count:)(v12, v11);
  swift_bridgeObjectRetain();
  v13._uint64_t countAndFlagsBits = 0x6572654820A987E2;
  v13._object = (void *)0xA800000000000000;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v14._uint64_t countAndFlagsBits = a1;
  v14._object = a2;
  String.append(_:)(v14);
  v15._uint64_t countAndFlagsBits = 10;
  v15._object = (void *)0xE100000000000000;
  String.append(_:)(v15);
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v16._uint64_t countAndFlagsBits = 10;
  v16._object = (void *)0xE100000000000000;
  String.append(_:)(v16);
  v17._uint64_t countAndFlagsBits = a3;
  v17._object = a4;
  String.append(_:)(v17);
  return a6;
}

uint64_t sub_10013BF2C()
{
  sub_10013C250(v0, v2);
  return PropertyPathUtil.Error.errorDescription.getter();
}

uint64_t sub_10013BF70()
{
  uint64_t v0 = type metadata accessor for CharacterSet();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v10 - v5;
  sub_10004CD40(v7, qword_100222540);
  sub_10002A10C(v0, (uint64_t)qword_100222540);
  static CharacterSet.letters.getter();
  CharacterSet.init(charactersIn:)();
  CharacterSet.union(_:)();
  unint64_t v8 = *(void (**)(char *, uint64_t))(v1 + 8);
  v8(v3, v0);
  return ((uint64_t (*)(char *, uint64_t))v8)(v6, v0);
}

uint64_t sub_10013C0A8()
{
  uint64_t v0 = type metadata accessor for CharacterSet();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10004CD40(v4, qword_100222558);
  sub_10002A10C(v0, (uint64_t)qword_100222558);
  if (qword_100220870 != -1) {
    swift_once();
  }
  sub_10002A10C(v0, (uint64_t)qword_100222540);
  static CharacterSet.decimalDigits.getter();
  CharacterSet.union(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

unint64_t sub_10013C1E4()
{
  unint64_t result = qword_100222578;
  if (!qword_100222578)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100222578);
  }
  return result;
}

uint64_t sub_10013C230()
{
  return sub_100130568() & 1;
}

_OWORD *sub_10013C250(long long *a1, _OWORD *a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(_OWORD *)((char *)a2 + 25) = *(long long *)((char *)a1 + 25);
  *a2 = v2;
  a2[1] = v3;
  return a2;
}

uint64_t initializeWithCopy for PropertyPathElement(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PropertyPathElement(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = v4;
  return a1;
}

__n128 initializeWithTake for AvroPrimitive(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for PropertyPathElement(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for PropertyPathElement(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 25))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PropertyPathElement(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 25) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for PropertyPathElement()
{
}

void type metadata accessor for PropertyPathUtil()
{
}

uint64_t sub_10013C404(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 a6)
{
  if (a6 <= 5u)
  {
    if (((1 << a6) & 0x35) == 0 && a6 == 1) {
      swift_bridgeObjectRetain();
    }
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for PropertyPathUtil.Error(uint64_t a1)
{
  return sub_10013C494(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
}

uint64_t sub_10013C494(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 a6)
{
  if (a6 <= 5u)
  {
    if (((1 << a6) & 0x35) == 0 && a6 == 1) {
      swift_bridgeObjectRelease();
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for PropertyPathUtil.Error(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  unsigned __int8 v8 = *(unsigned char *)(a2 + 40);
  sub_10013C404(*(void *)a2, v4, v5, v6, v7, v8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(unsigned char *)(a1 + 40) = v8;
  return a1;
}

uint64_t assignWithCopy for PropertyPathUtil.Error(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  unsigned __int8 v8 = *(unsigned char *)(a2 + 40);
  sub_10013C404(*(void *)a2, v4, v5, v6, v7, v8);
  uint64_t v9 = *(void *)a1;
  uint64_t v10 = *(void *)(a1 + 8);
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v12 = *(void *)(a1 + 24);
  uint64_t v13 = *(void *)(a1 + 32);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  unsigned __int8 v14 = *(unsigned char *)(a1 + 40);
  *(unsigned char *)(a1 + 40) = v8;
  sub_10013C494(v9, v10, v11, v12, v13, v14);
  return a1;
}

uint64_t assignWithTake for PropertyPathUtil.Error(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32);
  char v4 = *(unsigned char *)(a2 + 40);
  uint64_t v5 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  long long v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
  *(void *)(a1 + 32) = v3;
  unsigned __int8 v11 = *(unsigned char *)(a1 + 40);
  *(unsigned char *)(a1 + 40) = v4;
  sub_10013C494(v5, v7, v6, v8, v9, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for PropertyPathUtil.Error(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFA && *(unsigned char *)(a1 + 41))
    {
      int v2 = *(_DWORD *)a1 + 249;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 40);
      if (v3 <= 6) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PropertyPathUtil.Error(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF9)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 40) = 0;
    *(void *)uint64_t result = a2 - 250;
    if (a3 >= 0xFA) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFA) {
      *(unsigned char *)(result + 41) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 40) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_10013C6F4(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 40) <= 5u) {
    return *(unsigned __int8 *)(a1 + 40);
  }
  else {
    return (*(_DWORD *)a1 + 6);
  }
}

uint64_t sub_10013C70C(uint64_t result, unsigned int a2)
{
  if (a2 >= 6)
  {
    *(void *)uint64_t result = a2 - 6;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    LOBYTE(a2) = 6;
  }
  *(unsigned char *)(result + 40) = a2;
  return result;
}

void type metadata accessor for PropertyPathUtil.Error()
{
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> PGetTimeWindowStartFunction.perform(with:arguments:)(SQLiter::SQLiteContext with, Swift::OpaquePointer arguments)
{
  uint64_t v3 = sub_1001228E8();
  if (!v2)
  {
    uint64_t v4 = v3;
    swift_beginAccess();
    Swift::Double v5 = *(double *)(v4 + 32);
    swift_release();
    SQLiteContext.setDouble(_:)(v5);
  }
}

uint64_t type metadata accessor for PGetTimeWindowStartFunction()
{
  return self;
}

uint64_t SQLiteSchematizerTableFunction.schematizer.getter()
{
  return swift_weakLoadStrong();
}

uint64_t SQLiteSchematizerTableFunction.schematizer.setter()
{
  return swift_release();
}

void (*SQLiteSchematizerTableFunction.schematizer.modify(void *a1))(void **a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  swift_beginAccess();
  v3[3] = swift_weakLoadStrong();
  return sub_10013C8EC;
}

void sub_10013C8EC(void **a1, char a2)
{
  uint64_t v3 = *a1;
  swift_weakAssign();
  if (a2)
  {
    swift_release();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_release();
  }

  free(v3);
}

uint64_t SQLiteSchematizerTableFunction.__allocating_init(_:)()
{
  return SQLiteSchematizerTableFunction.init(_:)();
}

uint64_t SQLiteSchematizerTableFunction.init(_:)()
{
  swift_weakInit();
  swift_beginAccess();
  swift_weakAssign();
  uint64_t v0 = SQLiteVTab.init(style:)(2);
  swift_release();
  return v0;
}

void SQLiteSchematizerTableFunction.__allocating_init(style:)()
{
}

void SQLiteSchematizerTableFunction.init(style:)()
{
}

uint64_t sub_10013CA6C()
{
  return swift_weakDestroy();
}

uint64_t SQLiteSchematizerTableFunction.deinit()
{
  uint64_t v0 = SQLiteVTab.deinit();
  swift_weakDestroy();
  return v0;
}

uint64_t SQLiteSchematizerTableFunction.__deallocating_deinit()
{
  uint64_t v0 = SQLiteSchematizerTableFunction.deinit();

  return _swift_deallocClassInstance(v0, 56, 7);
}

uint64_t sub_10013CAD8()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for SQLiteSchematizerTableFunction()
{
  return sub_100040C54();
}

uint64_t SQLiteSchematizerFunction.init(_:)()
{
  return SQLiteBaseFunction.init()();
}

void SQLiteSchematizerFunction.init()()
{
}

uint64_t SQLiteSchematizerFunction.options.getter()
{
  return 2049;
}

void SQLiteSchematizerFunction.hookPerform(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = sub_1001228E8();
  if (!v3)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 336))(v2, a1, a2);
    swift_release();
  }
}

uint64_t SQLiteSchematizerFunction.schematizer.getter()
{
  return swift_weakLoadStrong();
}

uint64_t SQLiteSchematizerFunction.schematizer.setter()
{
  return swift_release();
}

void (*SQLiteSchematizerFunction.schematizer.modify(void *a1))(void **a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  swift_beginAccess();
  v3[3] = swift_weakLoadStrong();
  return sub_10013CD80;
}

void sub_10013CD80(void **a1, char a2)
{
  uint64_t v3 = *a1;
  swift_weakAssign();
  if (a2)
  {
    swift_release();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_release();
  }

  free(v3);
}

uint64_t sub_10013CE00()
{
  return swift_weakDestroy();
}

uint64_t sub_10013CE08()
{
  return (*(uint64_t (**)(void))(v0 + 240))();
}

uint64_t sub_10013CE1C()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t type metadata accessor for SQLiteSchematizerFunction()
{
  return self;
}

uint64_t sub_10013CE78(uint64_t a1, uint64_t a2)
{
  sub_10001FC68(a2, v27);
  uint64_t v22 = v27[0];
  uint64_t v20 = v27[1];
  int64_t v28 = v27[3];
  unint64_t v4 = v27[4];
  int64_t v21 = (unint64_t)(v27[2] + 64) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  if (!v4) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v6 = __clz(__rbit64(v4));
  v4 &= v4 - 1;
  unint64_t v7 = v6 | (v28 << 6);
  while (1)
  {
    unsigned __int8 v11 = (uint64_t *)(*(void *)(v22 + 48) + 16 * v7);
    uint64_t v13 = *v11;
    uint64_t v12 = v11[1];
    swift_bridgeObjectRetain();
    sub_10012C4BC(v13, v12, v24);
    if (v2)
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_10001C20C((uint64_t)v24, (uint64_t)v23);
    swift_bridgeObjectRetain();
    uint64_t v14 = OneOfModel.init(_:)(v23);
    swift_isUniquelyReferenced_nonNull_native();
    v23[0] = a1;
    sub_100142268(v14, v13, v12);
    uint64_t v15 = v23[0];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v16 = v25;
    uint64_t v17 = v26;
    sub_10001B620(v24, v25);
    uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 24))(v16, v17);
    swift_retain();
    sub_10013DE08(v18);
    swift_bridgeObjectRelease();
    sub_10001CA50((uint64_t)v24);
    uint64_t result = swift_bridgeObjectRelease();
    a1 = v15;
    if (v4) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v8 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v8 >= v21) {
      goto LABEL_25;
    }
    unint64_t v9 = *(void *)(v20 + 8 * v8);
    if (!v9)
    {
      int64_t v10 = v28 + 2;
      if (v28 + 2 >= v21) {
        goto LABEL_25;
      }
      unint64_t v9 = *(void *)(v20 + 8 * v10);
      if (v9) {
        goto LABEL_12;
      }
      int64_t v10 = v28 + 3;
      if (v28 + 3 >= v21) {
        goto LABEL_25;
      }
      unint64_t v9 = *(void *)(v20 + 8 * v10);
      if (v9) {
        goto LABEL_12;
      }
      int64_t v10 = v28 + 4;
      if (v28 + 4 >= v21) {
        goto LABEL_25;
      }
      unint64_t v9 = *(void *)(v20 + 8 * v10);
      if (v9)
      {
LABEL_12:
        int64_t v8 = v10;
      }
      else
      {
        int64_t v8 = v28 + 5;
        if (v28 + 5 >= v21) {
          goto LABEL_25;
        }
        unint64_t v9 = *(void *)(v20 + 8 * v8);
        if (!v9)
        {
          int64_t v19 = v28 + 6;
          while (v19 < v21)
          {
            unint64_t v9 = *(void *)(v20 + 8 * v19++);
            if (v9)
            {
              int64_t v8 = v19 - 1;
              goto LABEL_13;
            }
          }
LABEL_25:
          swift_release();
          swift_release();
          return a1;
        }
      }
    }
LABEL_13:
    unint64_t v4 = (v9 - 1) & v9;
    unint64_t v7 = __clz(__rbit64(v9)) + (v8 << 6);
    int64_t v28 = v8;
  }
  __break(1u);
  return result;
}

uint64_t sub_10013D17C(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  sub_10001FC68(a2, v38);
  uint64_t v36 = v38[0];
  uint64_t v34 = v38[1];
  int64_t v42 = v38[3];
  unint64_t v5 = v38[4];
  int64_t v35 = (unint64_t)(v38[2] + 64) >> 6;
  swift_bridgeObjectRetain();
  if (!v5) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v6 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  unint64_t v7 = v6 | (v42 << 6);
  while (1)
  {
    unsigned __int8 v11 = (uint64_t *)(*(void *)(v36 + 48) + 16 * v7);
    uint64_t v13 = *v11;
    uint64_t v12 = v11[1];
    swift_bridgeObjectRetain_n();
    sub_10001BDD4(v13, v12, v37);
    if (v3)
    {
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (uint64_t)a1;
    }
    PropertyModel.init(_:)(v37, (uint64_t)&v39);
    uint64_t v3 = 0;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v37[0] = (uint64_t)a1;
    unint64_t v15 = sub_1000287F0(v13, v12);
    uint64_t v17 = a1[2];
    BOOL v18 = (v16 & 1) == 0;
    Swift::Int v19 = v17 + v18;
    if (__OFADD__(v17, v18)) {
      break;
    }
    unint64_t v20 = v15;
    char v21 = v16;
    sub_10002572C(&qword_1002229F8);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v19))
    {
      unint64_t v22 = sub_1000287F0(v13, v12);
      if ((v21 & 1) != (v23 & 1)) {
        goto LABEL_37;
      }
      unint64_t v20 = v22;
    }
    a1 = (void *)v37[0];
    if (v21)
    {
      uint64_t v24 = *(void *)(v37[0] + 56) + 40 * v20;
      swift_bridgeObjectRelease();
      long long v25 = v40;
      *(_OWORD *)uint64_t v24 = v39;
      *(_OWORD *)(v24 + 16) = v25;
      *(unsigned char *)(v24 + 32) = v41;
    }
    else
    {
      *(void *)(v37[0] + 8 * (v20 >> 6) + 64) |= 1 << v20;
      uint64_t v26 = (uint64_t *)(a1[6] + 16 * v20);
      *uint64_t v26 = v13;
      v26[1] = v12;
      uint64_t v27 = a1[7] + 40 * v20;
      long long v28 = v40;
      *(_OWORD *)uint64_t v27 = v39;
      *(_OWORD *)(v27 + 16) = v28;
      *(unsigned char *)(v27 + 32) = v41;
      uint64_t v29 = a1[2];
      BOOL v30 = __OFADD__(v29, 1);
      uint64_t v31 = v29 + 1;
      if (v30) {
        goto LABEL_35;
      }
      a1[2] = v31;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    if (v5) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v8 = v42 + 1;
    if (__OFADD__(v42, 1)) {
      goto LABEL_36;
    }
    if (v8 >= v35) {
      goto LABEL_32;
    }
    unint64_t v9 = *(void *)(v34 + 8 * v8);
    if (!v9)
    {
      int64_t v10 = v42 + 2;
      if (v42 + 2 >= v35) {
        goto LABEL_32;
      }
      unint64_t v9 = *(void *)(v34 + 8 * v10);
      if (v9) {
        goto LABEL_12;
      }
      int64_t v10 = v42 + 3;
      if (v42 + 3 >= v35) {
        goto LABEL_32;
      }
      unint64_t v9 = *(void *)(v34 + 8 * v10);
      if (v9) {
        goto LABEL_12;
      }
      int64_t v10 = v42 + 4;
      if (v42 + 4 >= v35) {
        goto LABEL_32;
      }
      unint64_t v9 = *(void *)(v34 + 8 * v10);
      if (v9)
      {
LABEL_12:
        int64_t v8 = v10;
      }
      else
      {
        int64_t v8 = v42 + 5;
        if (v42 + 5 >= v35) {
          goto LABEL_32;
        }
        unint64_t v9 = *(void *)(v34 + 8 * v8);
        if (!v9)
        {
          int64_t v32 = v42 + 6;
          while (v32 < v35)
          {
            unint64_t v9 = *(void *)(v34 + 8 * v32++);
            if (v9)
            {
              int64_t v8 = v32 - 1;
              goto LABEL_13;
            }
          }
LABEL_32:
          swift_release();
          swift_release();
          return (uint64_t)a1;
        }
      }
    }
LABEL_13:
    unint64_t v5 = (v9 - 1) & v9;
    unint64_t v7 = __clz(__rbit64(v9)) + (v8 << 6);
    int64_t v42 = v8;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_10013D4F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  sub_10001FC68(a2, v35);
  uint64_t v7 = v35[0];
  int64_t v8 = v35[3];
  unint64_t v9 = v35[4];
  uint64_t v33 = v35[1];
  int64_t v34 = (unint64_t)(v35[2] + 64) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  while (1)
  {
    if (v9)
    {
      unint64_t v11 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v12 = v11 | (v8 << 6);
      goto LABEL_15;
    }
    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1)) {
      break;
    }
    if (v13 >= v34) {
      goto LABEL_25;
    }
    unint64_t v14 = *(void *)(v33 + 8 * v13);
    if (!v14)
    {
      int64_t v15 = v8 + 2;
      if (v8 + 2 >= v34) {
        goto LABEL_25;
      }
      unint64_t v14 = *(void *)(v33 + 8 * v15);
      if (v14) {
        goto LABEL_13;
      }
      int64_t v15 = v8 + 3;
      if (v8 + 3 >= v34) {
        goto LABEL_25;
      }
      unint64_t v14 = *(void *)(v33 + 8 * v15);
      if (v14) {
        goto LABEL_13;
      }
      int64_t v15 = v8 + 4;
      if (v8 + 4 >= v34) {
        goto LABEL_25;
      }
      unint64_t v14 = *(void *)(v33 + 8 * v15);
      if (v14)
      {
LABEL_13:
        int64_t v13 = v15;
      }
      else
      {
        int64_t v13 = v8 + 5;
        if (v8 + 5 >= v34) {
          goto LABEL_25;
        }
        unint64_t v14 = *(void *)(v33 + 8 * v13);
        if (!v14)
        {
          int64_t v28 = v8 + 6;
          while (v28 < v34)
          {
            unint64_t v14 = *(void *)(v33 + 8 * v28++);
            if (v14)
            {
              int64_t v13 = v28 - 1;
              goto LABEL_14;
            }
          }
LABEL_25:
          swift_release();
          swift_release();
          return a1;
        }
      }
    }
LABEL_14:
    unint64_t v9 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v13 << 6);
    int64_t v8 = v13;
LABEL_15:
    char v16 = (uint64_t *)(*(void *)(v7 + 48) + 16 * v12);
    uint64_t v18 = *v16;
    uint64_t v17 = v16[1];
    swift_bridgeObjectRetain();
    ProtoSchemaStore.messageSchema(withName:)();
    if (v4)
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_10002572C(&qword_100221078);
    type metadata accessor for ProtoMessageSchema();
    if (swift_dynamicCast())
    {
      uint64_t v19 = v35[7];
      swift_bridgeObjectRetain();
      uint64_t v32 = v19;
      swift_retain();
      uint64_t v30 = a3;
      uint64_t v20 = swift_bridgeObjectRetain();
      uint64_t v21 = sub_10012B5BC(v20);
      swift_bridgeObjectRelease();
      swift_beginAccess();
      uint64_t v22 = *(void *)(v19 + 88);
      uint64_t v31 = v21;
      swift_retain();
      swift_bridgeObjectRetain();
      uint64_t v23 = Dictionary.init(dictionaryLiteral:)();
      swift_retain();
      uint64_t v24 = sub_10013CE78(v23, v22);
      swift_bridgeObjectRelease();
      swift_beginAccess();
      uint64_t v25 = *(void *)(v32 + 72);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v26 = (void *)Dictionary.init(dictionaryLiteral:)();
      swift_retain();
      uint64_t v29 = sub_10013D17C(v26, v25);
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      sub_1001424BC(v31, v29, v24, v18, v17, isUniquelyReferenced_nonNull_native);
      swift_release();
      swift_bridgeObjectRelease_n();
      uint64_t result = swift_bridgeObjectRelease();
      a3 = v30;
    }
    else
    {
      uint64_t result = swift_bridgeObjectRelease();
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10013D964(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v42 = a3;
  sub_10001FC68(a2, v48);
  uint64_t v39 = v48[1];
  int64_t v43 = v48[3];
  unint64_t v6 = v48[4];
  int64_t v40 = (unint64_t)(v48[2] + 64) >> 6;
  uint64_t v41 = v48[0];
  swift_bridgeObjectRetain();
  if (!v6) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v7 = __clz(__rbit64(v6));
  uint64_t v8 = (v6 - 1) & v6;
  unint64_t v9 = v7 | (v43 << 6);
  while (1)
  {
    int64_t v13 = (uint64_t *)(*(void *)(v41 + 48) + 16 * v9);
    uint64_t v15 = *v13;
    uint64_t v14 = v13[1];
    swift_bridgeObjectRetain_n();
    ProtoSchemaStore.enum(withName:)();
    if (v4)
    {
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (uint64_t)a1;
    }
    uint64_t v49 = Dictionary.init(dictionaryLiteral:)();
    uint64_t v16 = v46;
    uint64_t v17 = v47;
    sub_10001B620(v45, v46);
    uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 16))(v16, v17);
    __chkstk_darwin(v18);
    v38[2] = &v49;
    v38[3] = v45;
    sub_10012149C((uint64_t)sub_1001218F8, (uint64_t)v38, v18);
    uint64_t v44 = 0;
    unint64_t v19 = v8;
    swift_bridgeObjectRelease();
    uint64_t v20 = v49;
    sub_10001CA50((uint64_t)v45);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v45[0] = a1;
    unint64_t v22 = sub_1000287F0(v15, v14);
    uint64_t v24 = a1[2];
    BOOL v25 = (v23 & 1) == 0;
    Swift::Int v26 = v24 + v25;
    if (__OFADD__(v24, v25)) {
      break;
    }
    unint64_t v27 = v22;
    char v28 = v23;
    sub_10002572C(&qword_100222A20);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v26))
    {
      unint64_t v29 = sub_1000287F0(v15, v14);
      if ((v28 & 1) != (v30 & 1)) {
        goto LABEL_37;
      }
      unint64_t v27 = v29;
    }
    a1 = (void *)v45[0];
    if (v28)
    {
      uint64_t v31 = *(void *)(v45[0] + 56);
      swift_bridgeObjectRelease();
      *(void *)(v31 + 8 * v27) = v20;
    }
    else
    {
      *(void *)(v45[0] + 8 * (v27 >> 6) + 64) |= 1 << v27;
      uint64_t v32 = (uint64_t *)(a1[6] + 16 * v27);
      *uint64_t v32 = v15;
      v32[1] = v14;
      *(void *)(a1[7] + 8 * v27) = v20;
      uint64_t v33 = a1[2];
      BOOL v34 = __OFADD__(v33, 1);
      uint64_t v35 = v33 + 1;
      if (v34) {
        goto LABEL_35;
      }
      a1[2] = v35;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    unint64_t v6 = v19;
    uint64_t v4 = v44;
    if (v6) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v10 = v43 + 1;
    if (__OFADD__(v43, 1)) {
      goto LABEL_36;
    }
    if (v10 >= v40) {
      goto LABEL_32;
    }
    unint64_t v11 = *(void *)(v39 + 8 * v10);
    if (!v11)
    {
      int64_t v12 = v43 + 2;
      if (v43 + 2 >= v40) {
        goto LABEL_32;
      }
      unint64_t v11 = *(void *)(v39 + 8 * v12);
      if (v11) {
        goto LABEL_12;
      }
      int64_t v12 = v43 + 3;
      if (v43 + 3 >= v40) {
        goto LABEL_32;
      }
      unint64_t v11 = *(void *)(v39 + 8 * v12);
      if (v11) {
        goto LABEL_12;
      }
      int64_t v12 = v43 + 4;
      if (v43 + 4 >= v40) {
        goto LABEL_32;
      }
      unint64_t v11 = *(void *)(v39 + 8 * v12);
      if (v11)
      {
LABEL_12:
        int64_t v10 = v12;
      }
      else
      {
        int64_t v10 = v43 + 5;
        if (v43 + 5 >= v40) {
          goto LABEL_32;
        }
        unint64_t v11 = *(void *)(v39 + 8 * v10);
        if (!v11)
        {
          int64_t v36 = v43 + 6;
          while (v36 < v40)
          {
            unint64_t v11 = *(void *)(v39 + 8 * v36++);
            if (v11)
            {
              int64_t v10 = v36 - 1;
              goto LABEL_13;
            }
          }
LABEL_32:
          swift_release();
          swift_release();
          return (uint64_t)a1;
        }
      }
    }
LABEL_13:
    uint64_t v8 = (v11 - 1) & v11;
    unint64_t v9 = __clz(__rbit64(v11)) + (v10 << 6);
    int64_t v43 = v10;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t ProtoSchemaStore.__allocating_init()()
{
  sub_100018064();
  uint64_t v0 = swift_allocObject();
  ProtoSchemaStore.init()();
  return v0;
}

uint64_t ProtoSchemaStore.__allocating_init(withModel:)(uint64_t a1, uint64_t a2)
{
  sub_100018064();
  uint64_t v4 = swift_allocObject();
  ProtoSchemaStore.init(withModel:)(a1, a2);
  return v4;
}

uint64_t sub_10013DE08(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = a1 + 56;
  uint64_t v5 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(a1 + 56);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v10 = 0;
  if (!v7) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v11 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  for (unint64_t i = v11 | (v10 << 6); ; unint64_t i = __clz(__rbit64(v14)) + (v10 << 6))
  {
    uint64_t v16 = (uint64_t *)(*(void *)(a1 + 48) + 16 * i);
    uint64_t v17 = *v16;
    uint64_t v18 = v16[1];
    swift_bridgeObjectRetain();
    sub_10001BDD4(v17, v18, v20);
    if (v2)
    {
      swift_release();
      swift_release();
      return swift_bridgeObjectRelease();
    }
    sub_10001CA50((uint64_t)v20);
    uint64_t result = swift_bridgeObjectRelease();
    if (v7) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v10++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v10 >= v8) {
      goto LABEL_26;
    }
    unint64_t v14 = *(void *)(v4 + 8 * v10);
    if (!v14)
    {
      int64_t v15 = v10 + 1;
      if (v10 + 1 >= v8) {
        goto LABEL_26;
      }
      unint64_t v14 = *(void *)(v4 + 8 * v15);
      if (v14) {
        goto LABEL_14;
      }
      int64_t v15 = v10 + 2;
      if (v10 + 2 >= v8) {
        goto LABEL_26;
      }
      unint64_t v14 = *(void *)(v4 + 8 * v15);
      if (v14) {
        goto LABEL_14;
      }
      int64_t v15 = v10 + 3;
      if (v10 + 3 >= v8) {
        goto LABEL_26;
      }
      unint64_t v14 = *(void *)(v4 + 8 * v15);
      if (v14)
      {
LABEL_14:
        int64_t v10 = v15;
        goto LABEL_15;
      }
      int64_t v19 = v10 + 4;
      if (v10 + 4 >= v8)
      {
LABEL_26:
        swift_release();
        return swift_release();
      }
      unint64_t v14 = *(void *)(v4 + 8 * v19);
      v10 += 4;
      if (!v14) {
        break;
      }
    }
LABEL_15:
    unint64_t v7 = (v14 - 1) & v14;
  }
  while (1)
  {
    int64_t v10 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v10 >= v8) {
      goto LABEL_26;
    }
    unint64_t v14 = *(void *)(v4 + 8 * v10);
    ++v19;
    if (v14) {
      goto LABEL_15;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t ProtoSchemaStore.allEnumNames.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ProtoSchemaStore.__allocating_init(withURL:)()
{
  type metadata accessor for JSONDecoder();
  uint64_t v1 = swift_allocObject();
  JSONDecoder.init()();
  uint64_t v2 = Data.init(contentsOf:options:)();
  if (!v0)
  {
    uint64_t v6 = v2;
    unint64_t v7 = v3;
    sub_10013E2C8();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    sub_1000291B4(v6, v7);
    type metadata accessor for ProtoSchemaStore();
    uint64_t v1 = swift_allocObject();
    ProtoSchemaStore.init(withModel:)(v9, v10);
  }
  type metadata accessor for URL();
  sub_10000E060();
  uint64_t v4 = sub_100027240();
  v5(v4);
  swift_release();
  return v1;
}

void *ProtoSchemaStore.init()()
{
  type metadata accessor for ProtoEnum();
  v0[4] = sub_10002C5D8();
  type metadata accessor for ProtoMessageSchema();
  v0[5] = sub_10002C5D8();
  v0[2] = _swiftEmptySetSingleton;
  v0[3] = _swiftEmptySetSingleton;
  v0[6] = sub_10002C5D8();
  v0[7] = sub_10002C5D8();
  return v0;
}

void *ProtoSchemaStore.init(withModel:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ProtoEnum();
  v2[4] = Dictionary.init(dictionaryLiteral:)();
  type metadata accessor for ProtoMessageSchema();
  v2[5] = Dictionary.init(dictionaryLiteral:)();
  uint64_t v5 = swift_bridgeObjectRetain();
  v2[2] = sub_10013E350(v5, (void *(*)(void *__return_ptr, uint64_t))sub_10001FC68);
  uint64_t v6 = swift_bridgeObjectRetain();
  _OWORD v2[3] = sub_10013E350(v6, (void *(*)(void *__return_ptr, uint64_t))sub_10001FC68);
  v2[6] = a2;
  v2[7] = a1;
  return v2;
}

unint64_t sub_10013E2C8()
{
  unint64_t result = qword_100222878;
  if (!qword_100222878)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100222878);
  }
  return result;
}

uint64_t type metadata accessor for ProtoSchemaStore()
{
  return self;
}

void *sub_10013E338(uint64_t a1)
{
  return sub_10013E350(a1, (void *(*)(void *__return_ptr, uint64_t))sub_10001FC68);
}

void *sub_10013E350(uint64_t a1, void *(*a2)(void *__return_ptr, uint64_t))
{
  uint64_t v20 = Set.init(minimumCapacity:)();
  unint64_t result = a2(v21, a1);
  uint64_t v5 = v21[0];
  uint64_t v6 = v21[1];
  int64_t v7 = v21[3];
  unint64_t v8 = v22;
  int64_t v9 = (unint64_t)(v21[2] + 64) >> 6;
  if (!v22) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v10 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  unint64_t v11 = v10 | (v7 << 6);
  while (1)
  {
    uint64_t v16 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v11);
    uint64_t v17 = *v16;
    uint64_t v18 = v16[1];
    swift_bridgeObjectRetain();
    sub_100090154(&v19, v17, v18);
    unint64_t result = (void *)swift_bridgeObjectRelease();
    if (v8) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v12 = v7 + 1;
    if (__OFADD__(v7, 1)) {
      break;
    }
    if (v12 >= v9) {
      goto LABEL_21;
    }
    unint64_t v13 = *(void *)(v6 + 8 * v12);
    int64_t v14 = v7 + 1;
    if (!v13)
    {
      int64_t v14 = v7 + 2;
      if (v7 + 2 >= v9) {
        goto LABEL_21;
      }
      unint64_t v13 = *(void *)(v6 + 8 * v14);
      if (!v13)
      {
        int64_t v14 = v7 + 3;
        if (v7 + 3 >= v9) {
          goto LABEL_21;
        }
        unint64_t v13 = *(void *)(v6 + 8 * v14);
        if (!v13)
        {
          int64_t v14 = v7 + 4;
          if (v7 + 4 >= v9) {
            goto LABEL_21;
          }
          unint64_t v13 = *(void *)(v6 + 8 * v14);
          if (!v13)
          {
            int64_t v14 = v7 + 5;
            if (v7 + 5 >= v9) {
              goto LABEL_21;
            }
            unint64_t v13 = *(void *)(v6 + 8 * v14);
            if (!v13)
            {
              int64_t v15 = v7 + 6;
              while (v15 < v9)
              {
                unint64_t v13 = *(void *)(v6 + 8 * v15++);
                if (v13)
                {
                  int64_t v14 = v15 - 1;
                  goto LABEL_18;
                }
              }
LABEL_21:
              swift_release();
              return (void *)v20;
            }
          }
        }
      }
    }
LABEL_18:
    unint64_t v8 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v14 << 6);
    int64_t v7 = v14;
  }
  __break(1u);
  return result;
}

void ProtoSchemaStore.enum(withName:)()
{
  sub_1000276B0();
  uint64_t v5 = v4;
  sub_100017F00();
  uint64_t v6 = *(void *)(v1 + 32);
  if (*(void *)(v6 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v7 = sub_1000287F0(v3, v2);
    if (v8)
    {
      uint64_t v9 = *(void *)(*(void *)(v6 + 56) + 8 * v7);
      swift_retain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v5[3] = type metadata accessor for ProtoEnum();
      void v5[4] = &off_100202738;
      *uint64_t v5 = v9;
      return;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  sub_100017F00();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v10 = sub_100024A48();
  uint64_t v11 = sub_100139ED4(v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v11)
  {
    uint64_t v12 = type metadata accessor for ProtoEnum();
    swift_allocObject();
    swift_bridgeObjectRetain();
    uint64_t v13 = sub_100024A48();
    sub_10012521C(v13, v14, v11);
    if (!v0)
    {
      uint64_t v16 = v15;
      sub_1000257C8();
      swift_bridgeObjectRetain();
      swift_retain();
      sub_10013A824();
      swift_endAccess();
      swift_bridgeObjectRelease();
      sub_1000257C8();
      uint64_t v17 = sub_100024A48();
      sub_10013EDF4(v17, v18, v19);
      swift_endAccess();
      swift_bridgeObjectRelease();
      v5[3] = v12;
      void v5[4] = &off_100202738;
      *uint64_t v5 = v16;
    }
  }
  else
  {
    sub_1001229F8();
    swift_allocError();
    *(void *)uint64_t v20 = v3;
    *(void *)(v20 + 8) = v2;
    *(unsigned char *)(v20 + 41) = 2;
    swift_bridgeObjectRetain();
    swift_willThrow();
  }
}

unint64_t ProtoSchemaStore.description.getter()
{
  _StringGuts.grow(_:)(28);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v0._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 0xD00000000000001ALL;
}

Schematizer::SchemaStoreModel __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ProtoSchemaStore.asModel()()
{
  uint64_t v0 = swift_unknownObjectRetain();
  uint64_t v1 = (void *)SchemaStoreModel.init(_:)(v0, (uint64_t)&protocol witness table for ProtoSchemaStore);
  result.enums._rawValue = v2;
  result.schemas._rawValue = v1;
  return result;
}

Schematizer::SchemaStoreModel __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ProtoSchemaStore.engagedElementsModel()()
{
  sub_100017F00();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v2 = Dictionary.init(dictionaryLiteral:)();
  swift_retain();
  uint64_t v3 = sub_100027F7C();
  uint64_t v6 = sub_10013D4F0(v3, v4, v5);
  if (v2)
  {
    swift_release();
  }
  else
  {
    uint64_t v0 = (void *)v6;
    swift_bridgeObjectRelease();
    sub_100017F00();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v7 = Dictionary.init(dictionaryLiteral:)();
    swift_retain();
    char v8 = (void *)sub_100027F7C();
    uint64_t v11 = sub_10013D964(v8, v9, v10);
    if (!v7)
    {
      uint64_t v1 = (void *)v11;
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
LABEL_6:
  uint64_t v12 = v0;
  uint64_t v13 = v1;
  result.enums._rawValue = v13;
  result.schemas._rawValue = v12;
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ProtoSchemaStore.merge(with:)(Schematizer::SchemaStoreModel with)
{
  sub_1000257C8();
  uint64_t v2 = swift_bridgeObjectRetain();
  sub_10013F7A0(v2, (uint64_t)sub_10014010C, 0, (uint64_t *)(v1 + 48), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))sub_10013FAE4);
  swift_endAccess();
  sub_1000257C8();
  uint64_t v3 = swift_bridgeObjectRetain();
  sub_10013F7A0(v3, (uint64_t)sub_10013FCFC, 0, (uint64_t *)(v1 + 56), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))sub_10013F83C);
  swift_endAccess();
}

uint64_t ProtoSchemaStore.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t ProtoSchemaStore.__deallocating_deinit()
{
  ProtoSchemaStore.deinit();
  uint64_t v0 = sub_100018064();

  return _swift_deallocClassInstance(v0, v1, v2);
}

uint64_t sub_10013EAA4()
{
  return ProtoSchemaStore.__allocating_init(withURL:)();
}

uint64_t sub_10013EABC(uint64_t a1, uint64_t a2)
{
  return ProtoSchemaStore.__allocating_init(withModel:)(a1, a2);
}

void sub_10013EAD4()
{
}

void *sub_10013EAEC()
{
  return ProtoSchemaStore.asModel()().schemas._rawValue;
}

void *sub_10013EB04()
{
  return ProtoSchemaStore.engagedElementsModel()().schemas._rawValue;
}

void sub_10013EB1C(uint64_t a1, uint64_t a2)
{
}

unint64_t sub_10013EB34()
{
  return ProtoSchemaStore.description.getter();
}

uint64_t sub_10013EB58(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_1000287F0(a1, a2);
  LOBYTE(a2) = v7;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0) {
    return 0;
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v13 = *v3;
  uint64_t v9 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  Swift::Int v10 = *(void *)(v9 + 24);
  sub_10002572C(&qword_100222A10);
  _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v10);
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(*(void *)(v13 + 56) + 24 * v6);
  _NativeDictionary._delete(at:)();
  *uint64_t v3 = v13;
  swift_bridgeObjectRelease();
  return v11;
}

void sub_10013EC7C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_1000287F0(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if (a2)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v19 = *v4;
    uint64_t v11 = *v4;
    *uint64_t v4 = 0x8000000000000000;
    Swift::Int v12 = *(void *)(v11 + 24);
    sub_10002572C(&qword_1002229F8);
    _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v12);
    swift_bridgeObjectRelease();
    uint64_t v13 = (unsigned __int8 *)(*(void *)(v19 + 56) + 40 * v8);
    uint64_t v14 = *v13;
    uint64_t v15 = *((void *)v13 + 1);
    uint64_t v16 = *((void *)v13 + 2);
    uint64_t v17 = *((void *)v13 + 3);
    unsigned __int8 v18 = v13[32];
    _NativeDictionary._delete(at:)();
    *uint64_t v4 = v19;
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v17 = 0;
    unsigned __int8 v18 = 0;
    uint64_t v16 = 1;
  }
  *(void *)a3 = v14;
  *(void *)(a3 + 8) = v15;
  *(void *)(a3 + 16) = v16;
  *(void *)(a3 + 24) = v17;
  *(unsigned char *)(a3 + 32) = v18;
  sub_10000E178();
}

void sub_10013EDB8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
}

uint64_t sub_10013EDE0(uint64_t a1, uint64_t a2)
{
  return sub_10013EDF4(a1, a2, &qword_1002229E8);
}

uint64_t sub_10013EDF4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_1000287F0(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0) {
    return 0;
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_1000243EC();
  Swift::Int v12 = *(void *)(v11 + 24);
  sub_10002572C(a3);
  _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v12);
  swift_bridgeObjectRelease();
  uint64_t v13 = *(void *)(*(void *)(v15 + 56) + 8 * v8);
  _NativeDictionary._delete(at:)();
  *uint64_t v5 = v15;
  swift_bridgeObjectRelease();
  return v13;
}

void sub_10013EEF8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
}

void sub_10013EF20(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void (*a4)(unint64_t, uint64_t)@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X8>)
{
  Swift::Int v10 = v6;
  swift_bridgeObjectRetain();
  unint64_t v14 = sub_1000287F0(a1, a2);
  LOBYTE(a2) = v15;
  swift_bridgeObjectRelease();
  if (a2)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_1000243EC();
    Swift::Int v18 = *(void *)(v17 + 24);
    sub_10002572C(a3);
    _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v18);
    swift_bridgeObjectRelease();
    a4(*(void *)(v20 + 56) + 40 * v14, a6);
    sub_10002572C(a5);
    _NativeDictionary._delete(at:)();
    *Swift::Int v10 = v20;
    sub_10000E178();
    swift_bridgeObjectRelease();
  }
  else
  {
    *(void *)(a6 + 32) = 0;
    *(_OWORD *)a6 = 0u;
    *(_OWORD *)(a6 + 16) = 0u;
    sub_10000E178();
  }
}

uint64_t sub_10013F060(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_10013F0AC(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10002572C(&qword_100222A18);
  char v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    int64_t v36 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    int64_t v35 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    if (!v10) {
      goto LABEL_7;
    }
LABEL_6:
    unint64_t v14 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    for (unint64_t i = v14 | (v13 << 6); ; unint64_t i = __clz(__rbit64(v17)) + (v13 << 6))
    {
      uint64_t v19 = (uint64_t *)(*(void *)(v5 + 48) + 16 * i);
      uint64_t v21 = *v19;
      uint64_t v20 = v19[1];
      uint64_t v22 = *(void *)(v5 + 56) + 24 * i;
      long long v38 = *(_OWORD *)v22;
      uint64_t v23 = *(void *)(v22 + 16);
      if ((v37 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v24 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v25 = result & ~v24;
      unint64_t v26 = v25 >> 6;
      if (((-1 << v25) & ~*(void *)(v11 + 8 * (v25 >> 6))) == 0)
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v24) >> 6;
        while (++v26 != v29 || (v28 & 1) == 0)
        {
          BOOL v30 = v26 == v29;
          if (v26 == v29) {
            unint64_t v26 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v11 + 8 * v26);
          if (v31 != -1)
          {
            unint64_t v27 = __clz(__rbit64(~v31)) + (v26 << 6);
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        return result;
      }
      unint64_t v27 = __clz(__rbit64((-1 << v25) & ~*(void *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
      *(void *)(v11 + ((v27 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v27;
      uint64_t v32 = (void *)(*(void *)(v7 + 48) + 16 * v27);
      *uint64_t v32 = v21;
      v32[1] = v20;
      uint64_t v33 = *(void *)(v7 + 56) + 24 * v27;
      *(_OWORD *)uint64_t v33 = v38;
      *(void *)(v33 + 16) = v23;
      ++*(void *)(v7 + 16);
      if (v10) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v16 = v13 + 1;
      if (__OFADD__(v13, 1)) {
        goto LABEL_39;
      }
      if (v16 >= v35) {
        goto LABEL_32;
      }
      unint64_t v17 = v36[v16];
      ++v13;
      if (!v17)
      {
        int64_t v13 = v16 + 1;
        if (v16 + 1 >= v35) {
          goto LABEL_32;
        }
        unint64_t v17 = v36[v13];
        if (!v17)
        {
          int64_t v18 = v16 + 2;
          if (v18 >= v35)
          {
LABEL_32:
            swift_release();
            uint64_t v3 = v2;
            if (v37)
            {
              uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
              if (v34 >= 64) {
                sub_10008FF84(0, (unint64_t)(v34 + 63) >> 6, v36);
              }
              else {
                *int64_t v36 = -1 << v34;
              }
              *(void *)(v5 + 16) = 0;
            }
            break;
          }
          unint64_t v17 = v36[v18];
          if (!v17)
          {
            while (1)
            {
              int64_t v13 = v18 + 1;
              if (__OFADD__(v18, 1)) {
                goto LABEL_40;
              }
              if (v13 >= v35) {
                goto LABEL_32;
              }
              unint64_t v17 = v36[v13];
              ++v18;
              if (v17) {
                goto LABEL_18;
              }
            }
          }
          int64_t v13 = v18;
        }
      }
LABEL_18:
      unint64_t v10 = (v17 - 1) & v17;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_10013F3DC(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_10002572C(&qword_100222A28);
  char v36 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_39;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v34 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  if (!v10) {
    goto LABEL_7;
  }
LABEL_6:
  unint64_t v14 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (unint64_t i = v14 | (v13 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v13 << 6))
  {
    uint64_t v20 = (uint64_t *)(*(void *)(v5 + 48) + 16 * i);
    uint64_t v22 = *v20;
    uint64_t v21 = v20[1];
    uint64_t v23 = *(void *)(*(void *)(v5 + 56) + 8 * i);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v24 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v25 = result & ~v24;
    unint64_t v26 = v25 >> 6;
    if (((-1 << v25) & ~*(void *)(v11 + 8 * (v25 >> 6))) == 0)
    {
      char v28 = 0;
      unint64_t v29 = (unint64_t)(63 - v24) >> 6;
      while (++v26 != v29 || (v28 & 1) == 0)
      {
        BOOL v30 = v26 == v29;
        if (v26 == v29) {
          unint64_t v26 = 0;
        }
        v28 |= v30;
        uint64_t v31 = *(void *)(v11 + 8 * v26);
        if (v31 != -1)
        {
          unint64_t v27 = __clz(__rbit64(~v31)) + (v26 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    unint64_t v27 = __clz(__rbit64((-1 << v25) & ~*(void *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(void *)(v11 + ((v27 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v27;
    uint64_t v32 = (void *)(*(void *)(v7 + 48) + 16 * v27);
    *uint64_t v32 = v22;
    v32[1] = v21;
    *(void *)(*(void *)(v7 + 56) + 8 * v27) = v23;
    ++*(void *)(v7 + 16);
    if (v10) {
      goto LABEL_6;
    }
LABEL_7:
    int64_t v16 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      goto LABEL_41;
    }
    if (v16 >= v34)
    {
      swift_release();
      unint64_t v17 = (void *)(v5 + 64);
      goto LABEL_34;
    }
    unint64_t v17 = (void *)(v5 + 64);
    unint64_t v18 = *(void *)(v35 + 8 * v16);
    ++v13;
    if (!v18)
    {
      int64_t v13 = v16 + 1;
      if (v16 + 1 >= v34) {
        goto LABEL_32;
      }
      unint64_t v18 = *(void *)(v35 + 8 * v13);
      if (!v18) {
        break;
      }
    }
LABEL_18:
    unint64_t v10 = (v18 - 1) & v18;
  }
  int64_t v19 = v16 + 2;
  if (v19 < v34)
  {
    unint64_t v18 = *(void *)(v35 + 8 * v19);
    if (!v18)
    {
      while (1)
      {
        int64_t v13 = v19 + 1;
        if (__OFADD__(v19, 1)) {
          goto LABEL_42;
        }
        if (v13 >= v34) {
          goto LABEL_32;
        }
        unint64_t v18 = *(void *)(v35 + 8 * v13);
        ++v19;
        if (v18) {
          goto LABEL_18;
        }
      }
    }
    int64_t v13 = v19;
    goto LABEL_18;
  }
LABEL_32:
  swift_release();
LABEL_34:
  if (v36)
  {
    uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
    if (v33 >= 64) {
      sub_10008FF84(0, (unint64_t)(v33 + 63) >> 6, v17);
    }
    else {
      *unint64_t v17 = -1 << v33;
    }
    *(void *)(v5 + 16) = 0;
  }
LABEL_39:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_10013F6E4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *a1 = a4;
  a1[1] = a5;
  a1[2] = a6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a2;
}

uint64_t sub_10013F754(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *a1 = a4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a2;
}

uint64_t sub_10013F7A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, void (*a5)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))
{
  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v12 = *a4;
  *a4 = 0x8000000000000000;
  a5(a1, a2, a3, isUniquelyReferenced_nonNull_native, &v12);
  *a4 = v12;
  return swift_bridgeObjectRelease();
}

uint64_t sub_10013F83C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  uint64_t v46 = a5;
  sub_10013FD4C(a1, a2, a3, v41);
  long long v37 = v41[0];
  long long v38 = v41[1];
  long long v39 = v41[2];
  uint64_t v40 = v42;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_10013FD88((uint64_t)v43);
  sub_100140150((uint64_t)v43, (uint64_t)&v32);
  sub_100140150((uint64_t)v43, (uint64_t)v44);
  if (v45)
  {
    while (1)
    {
      uint64_t v6 = v32;
      uint64_t v7 = v33;
      uint64_t v8 = v34;
      uint64_t v9 = v35;
      uint64_t v10 = v36;
      uint64_t v11 = (void *)*v46;
      unint64_t v13 = sub_1000287F0(v32, v33);
      uint64_t v14 = v11[2];
      BOOL v15 = (v12 & 1) == 0;
      uint64_t v16 = v14 + v15;
      if (__OFADD__(v14, v15)) {
        break;
      }
      char v17 = v12;
      if (v11[3] >= v16)
      {
        if ((a4 & 1) == 0)
        {
          sub_10002572C(&qword_100222A10);
          _NativeDictionary.copy()();
        }
      }
      else
      {
        sub_10013F0AC(v16, a4 & 1);
        unint64_t v18 = sub_1000287F0(v6, v7);
        if ((v17 & 1) != (v19 & 1)) {
          goto LABEL_16;
        }
        unint64_t v13 = v18;
      }
      uint64_t v20 = (void *)*v46;
      if (v17)
      {
        uint64_t v21 = (uint64_t *)(v20[7] + 24 * v13);
        uint64_t v22 = v21[1];
        uint64_t v31 = *v21;
        uint64_t v23 = v21[2];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v24 = (void *)(v20[7] + 24 * v13);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *uint64_t v24 = v31;
        v24[1] = v22;
        uint64_t v24[2] = v23;
      }
      else
      {
        v20[(v13 >> 6) + 8] |= 1 << v13;
        unint64_t v25 = (uint64_t *)(v20[6] + 16 * v13);
        *unint64_t v25 = v6;
        v25[1] = v7;
        unint64_t v26 = (void *)(v20[7] + 24 * v13);
        *unint64_t v26 = v8;
        v26[1] = v9;
        v26[2] = v10;
        uint64_t v27 = v20[2];
        BOOL v28 = __OFADD__(v27, 1);
        uint64_t v29 = v27 + 1;
        if (v28) {
          goto LABEL_15;
        }
        v20[2] = v29;
      }
      sub_10013FD88((uint64_t)v43);
      sub_100140150((uint64_t)v43, (uint64_t)&v32);
      sub_100140150((uint64_t)v43, (uint64_t)v44);
      a4 = 1;
      if (!v45) {
        goto LABEL_13;
      }
    }
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  else
  {
LABEL_13:
    swift_bridgeObjectRelease();
    swift_release();
    sub_100023380();
    return swift_release();
  }
  return result;
}

uint64_t sub_10013FAE4(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  sub_10013FD4C(a1, a2, a3, &v32);
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v7 = sub_10013FF74();
  if (v8)
  {
    uint64_t v10 = v7;
    uint64_t v11 = v8;
    uint64_t v12 = v9;
    while (1)
    {
      unint64_t v13 = (void *)*a5;
      unint64_t v15 = sub_1000287F0(v10, v11);
      uint64_t v16 = v13[2];
      BOOL v17 = (v14 & 1) == 0;
      uint64_t v18 = v16 + v17;
      if (__OFADD__(v16, v17)) {
        break;
      }
      char v19 = v14;
      if (v13[3] >= v18)
      {
        if ((a4 & 1) == 0)
        {
          sub_10002572C(&qword_100222A20);
          _NativeDictionary.copy()();
        }
      }
      else
      {
        sub_10013F3DC(v18, a4 & 1);
        unint64_t v20 = sub_1000287F0(v10, v11);
        if ((v19 & 1) != (v21 & 1)) {
          goto LABEL_17;
        }
        unint64_t v15 = v20;
      }
      uint64_t v22 = (void *)*a5;
      if (v19)
      {
        uint64_t v23 = *(void *)(v22[7] + 8 * v15);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v24 = v22[7];
        swift_bridgeObjectRelease();
        *(void *)(v24 + 8 * v15) = v23;
      }
      else
      {
        v22[(v15 >> 6) + 8] |= 1 << v15;
        unint64_t v25 = (uint64_t *)(v22[6] + 16 * v15);
        *unint64_t v25 = v10;
        v25[1] = v11;
        *(void *)(v22[7] + 8 * v15) = v12;
        uint64_t v26 = v22[2];
        BOOL v27 = __OFADD__(v26, 1);
        uint64_t v28 = v26 + 1;
        if (v27) {
          goto LABEL_16;
        }
        _OWORD v22[2] = v28;
      }
      uint64_t v10 = sub_10013FF74();
      uint64_t v11 = v29;
      uint64_t v12 = v30;
      a4 = 1;
      if (!v29) {
        goto LABEL_14;
      }
    }
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  else
  {
LABEL_14:
    swift_bridgeObjectRelease();
    swift_release();
    sub_100023380();
    return swift_release();
  }
  return result;
}

__n128 sub_10013FCFC@<Q0>(uint64_t *a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v3 = sub_10013F6E4(&v7, *a1, a1[1], a1[2], a1[3], a1[4]);
  unint64_t v4 = v8;
  __n128 result = v7;
  a2->n128_u64[0] = v3;
  a2->n128_u64[1] = v6;
  a2[1] = result;
  a2[2].n128_u64[0] = v4;
  return result;
}

uint64_t sub_10013FD4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v4 = -1 << *(unsigned char *)(a1 + 32);
  *a4 = a1;
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t result = a1 + 64;
  uint64_t v6 = v7;
  a4[1] = result;
  a4[2] = ~v4;
  if (-v4 < 64) {
    uint64_t v8 = ~(-1 << -(char)v4);
  }
  else {
    uint64_t v8 = -1;
  }
  a4[3] = 0;
  a4[4] = v8 & v6;
  a4[5] = a2;
  a4[6] = a3;
  return result;
}

uint64_t sub_10013FD88@<X0>(uint64_t a1@<X8>)
{
  void (*v16)(uint64_t *__return_ptr, void *);
  uint64_t result;
  uint64_t v18;
  long long v19;
  long long v20;
  int64_t v21;
  int64_t v22;
  uint64_t v23;
  unint64_t v24;
  int64_t v25;
  int64_t v26;
  uint64_t v27;
  long long v28;
  long long v29;
  void v30[5];

  uint64_t v3 = *v1;
  int64_t v5 = v1[3];
  unint64_t v4 = v1[4];
  int64_t v6 = v5;
  if (v4)
  {
    uint64_t v7 = (v4 - 1) & v4;
    unint64_t v8 = __clz(__rbit64(v4)) | (v5 << 6);
LABEL_3:
    uint64_t v9 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v8);
    uint64_t v10 = *v9;
    uint64_t v11 = v9[1];
    uint64_t v12 = (uint64_t *)(*(void *)(v3 + 56) + 24 * v8);
    uint64_t v13 = *v12;
    uint64_t v14 = v12[1];
    uint64_t v15 = v12[2];
    v1[3] = v6;
    v1[4] = v7;
    uint64_t v16 = (void (*)(uint64_t *__return_ptr, void *))v1[5];
    v30[0] = v10;
    v30[1] = v11;
    v30[2] = v13;
    v30[3] = v14;
    uint64_t v30[4] = v15;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v16(&v27, v30);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v18 = v27;
    char v19 = v28;
    unint64_t v20 = v29;
LABEL_23:
    *(void *)a1 = v18;
    *(_OWORD *)(a1 + 8) = v19;
    *(_OWORD *)(a1 + 24) = v20;
    return result;
  }
  char v21 = v5 + 1;
  if (!__OFADD__(v5, 1))
  {
    uint64_t v22 = (unint64_t)(v1[2] + 64) >> 6;
    if (v21 < v22)
    {
      uint64_t v23 = v1[1];
      uint64_t v24 = *(void *)(v23 + 8 * v21);
      if (v24)
      {
LABEL_7:
        uint64_t v7 = (v24 - 1) & v24;
        unint64_t v8 = __clz(__rbit64(v24)) + (v21 << 6);
        int64_t v6 = v21;
        goto LABEL_3;
      }
      unint64_t v25 = v5 + 2;
      int64_t v6 = v5 + 1;
      if (v5 + 2 < v22)
      {
        uint64_t v24 = *(void *)(v23 + 8 * v25);
        if (v24)
        {
LABEL_10:
          char v21 = v25;
          goto LABEL_7;
        }
        int64_t v6 = v5 + 2;
        if (v5 + 3 < v22)
        {
          uint64_t v24 = *(void *)(v23 + 8 * (v5 + 3));
          if (v24)
          {
            char v21 = v5 + 3;
            goto LABEL_7;
          }
          unint64_t v25 = v5 + 4;
          int64_t v6 = v5 + 3;
          if (v5 + 4 < v22)
          {
            uint64_t v24 = *(void *)(v23 + 8 * v25);
            if (v24) {
              goto LABEL_10;
            }
            char v21 = v5 + 5;
            int64_t v6 = v5 + 4;
            if (v5 + 5 < v22)
            {
              uint64_t v24 = *(void *)(v23 + 8 * v21);
              if (v24) {
                goto LABEL_7;
              }
              int64_t v6 = v22 - 1;
              uint64_t v26 = v5 + 6;
              while (v26 < v22)
              {
                uint64_t v24 = *(void *)(v23 + 8 * v26++);
                if (v24)
                {
                  char v21 = v26 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    uint64_t v18 = 0;
    v1[3] = v6;
    v1[4] = 0;
    char v19 = 0uLL;
    unint64_t v20 = 0uLL;
    goto LABEL_23;
  }
  __break(1u);
  return result;
}

uint64_t sub_10013FF74()
{
  void (*v11)(uint64_t *__return_ptr, void *);
  uint64_t result;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  uint64_t v19;
  void v20[3];

  uint64_t v1 = *v0;
  int64_t v3 = v0[3];
  unint64_t v2 = v0[4];
  int64_t v4 = v3;
  if (v2)
  {
    uint64_t v5 = (v2 - 1) & v2;
    unint64_t v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
    uint64_t v7 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v6);
    uint64_t v8 = *v7;
    uint64_t v9 = v7[1];
    uint64_t v10 = *(void *)(*(void *)(v1 + 56) + 8 * v6);
    v0[3] = v4;
    v0[4] = v5;
    uint64_t v11 = (void (*)(uint64_t *__return_ptr, void *))v0[5];
    v20[0] = v8;
    v20[1] = v9;
    v20[2] = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11(&v19, v20);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v19;
  }
  uint64_t v13 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t v14 = (unint64_t)(v0[2] + 64) >> 6;
    if (v13 < v14)
    {
      uint64_t v15 = v0[1];
      uint64_t v16 = *(void *)(v15 + 8 * v13);
      if (v16)
      {
LABEL_7:
        uint64_t v5 = (v16 - 1) & v16;
        unint64_t v6 = __clz(__rbit64(v16)) + (v13 << 6);
        int64_t v4 = v13;
        goto LABEL_3;
      }
      BOOL v17 = v3 + 2;
      int64_t v4 = v3 + 1;
      if (v3 + 2 < v14)
      {
        uint64_t v16 = *(void *)(v15 + 8 * v17);
        if (v16)
        {
LABEL_10:
          uint64_t v13 = v17;
          goto LABEL_7;
        }
        int64_t v4 = v3 + 2;
        if (v3 + 3 < v14)
        {
          uint64_t v16 = *(void *)(v15 + 8 * (v3 + 3));
          if (v16)
          {
            uint64_t v13 = v3 + 3;
            goto LABEL_7;
          }
          BOOL v17 = v3 + 4;
          int64_t v4 = v3 + 3;
          if (v3 + 4 < v14)
          {
            uint64_t v16 = *(void *)(v15 + 8 * v17);
            if (v16) {
              goto LABEL_10;
            }
            uint64_t v13 = v3 + 5;
            int64_t v4 = v3 + 4;
            if (v3 + 5 < v14)
            {
              uint64_t v16 = *(void *)(v15 + 8 * v13);
              if (v16) {
                goto LABEL_7;
              }
              int64_t v4 = v14 - 1;
              uint64_t v18 = v3 + 6;
              while (v18 < v14)
              {
                uint64_t v16 = *(void *)(v15 + 8 * v18++);
                if (v16)
                {
                  uint64_t v13 = v18 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    uint64_t result = 0;
    v0[3] = v4;
    v0[4] = 0;
  }
  return result;
}

uint64_t sub_10014010C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_10013F754(&v6, *a1, a1[1], a1[2]);
  uint64_t v4 = v6;
  *a2 = result;
  a2[1] = v5;
  a2[2] = v4;
  return result;
}

uint64_t sub_100140150(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10002572C(&qword_100222A08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

id static RawPayload.event(with:dataVersion:)(uint64_t a1, unint64_t a2)
{
  id v5 = objc_allocWithZone(v2);
  sub_100027BCC(a1, a2);
  return RawPayload.init(with:)(a1, a2);
}

id RawPayload.__allocating_init(with:)(uint64_t a1, uint64_t a2)
{
  id v5 = objc_allocWithZone(v2);
  return RawPayload.init(with:)(a1, a2);
}

uint64_t *RawPayload.schemitized(with:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for ProtobufPayload();
  sub_10001C20C(a1, (uint64_t)v16);
  uint64_t v4 = *(void *)(v1 + OBJC_IVAR___SRRawPayload_data);
  unint64_t v5 = *(void *)(v1 + OBJC_IVAR___SRRawPayload_data + 8);
  uint64_t v6 = v17;
  uint64_t v7 = v18;
  uint64_t v8 = sub_10002E598((uint64_t)v16, v17);
  double v9 = __chkstk_darwin(v8);
  uint64_t v11 = &v16[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  (*(void (**)(unsigned char *, double))(v12 + 16))(v11, v9);
  uint64_t v13 = sub_100032CB0((uint64_t)v11, v4, v5, v3, v6, v7);
  sub_100027BCC(v4, v5);
  sub_10001CA50((uint64_t)v16);
  sub_10012C940();
  return v13;
}

void RawPayload.init()()
{
}

uint64_t sub_10014044C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(v2 + 24);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 40);
  swift_unknownObjectRetain();
  v7(a1, a2, ObjectType, v5);
  return swift_unknownObjectRelease();
}

void sub_1001404F0(uint64_t a1, uint64_t a2, sqlite3_context *a3)
{
  uint64_t v6 = (uint64_t *)sqlite3_malloc(8);
  if (v6)
  {
    uint64_t v7 = v6;
    type metadata accessor for SQLiteMessagePointerInBlobBridge.Wrapper();
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 16) = a1;
    *(void *)(v8 + 24) = a2;
    *uint64_t v7 = v8;
    swift_unknownObjectRetain();
    SQLiteContext.setBuffer(_:ofSize:destructor:)((uint64_t)v7, 8, (void (__cdecl **)(void *))sub_1001405C8, a3);
  }
  else
  {
    __break(1u);
  }
}

void sub_100140584(void *a1)
{
  if (a1)
  {
    swift_release();
    sqlite3_free(a1);
  }
}

uint64_t sub_1001405CC(sqlite3_value *a1)
{
  uint64_t result = SQLiteArgument.withUnsafeBytes<A>(_:)((uint64_t (*)(const void *, uint64_t))sub_1001407C0, v1, a1);
  if (!v2) {
    return v4;
  }
  return result;
}

uint64_t sub_100140624@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (a1)
  {
    swift_unknownObjectRetain();
    swift_getObjectType();
    sub_100135A74();
    *a2 = v3;
    a2[1] = v4;
    a2[2] = v5;
    a2[3] = v6;
    return swift_retain();
  }
  else
  {
    sub_1001229F8();
    swift_allocError();
    *(void *)uint64_t v8 = 0xD000000000000031;
    *(void *)(v8 + 8) = 0x80000001001B8CD0;
    *(unsigned char *)(v8 + 41) = 3;
    return swift_willThrow();
  }
}

uint64_t type metadata accessor for SQLiteMessagePointerInBlobBridge()
{
  return self;
}

uint64_t type metadata accessor for SQLiteMessagePointerInBlobBridge.Wrapper()
{
  return self;
}

uint64_t sub_10014073C(uint64_t a1, uint64_t a2)
{
  return sub_10014044C(a1, a2);
}

uint64_t sub_100140754()
{
  return swift_unknownObjectRetain();
}

void sub_10014077C(uint64_t a1, uint64_t a2, sqlite3_context *a3)
{
}

uint64_t sub_100140794(sqlite3_value *a1)
{
  uint64_t result = sub_1001405CC(a1);
  if (v1) {
    return v3;
  }
  return result;
}

uint64_t sub_1001407C0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_100140624(a1, a2);
}

uint64_t sub_1001407DC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x736E6F6974706FLL && a2 == 0xE700000000000000;
  if (v2 || (sub_100025848() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x69747265706F7270 && a2 == 0xEA00000000007365;
    if (v6 || (sub_100025848() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0x73664F656E6FLL && a2 == 0xE600000000000000)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      char v8 = sub_100025848();
      swift_bridgeObjectRelease();
      if (v8) {
        return 2;
      }
      else {
        return 3;
      }
    }
  }
}

uint64_t sub_10014090C(char a1)
{
  if (!a1) {
    return 0x736E6F6974706FLL;
  }
  if (a1 == 1) {
    return 0x69747265706F7270;
  }
  return 0x73664F656E6FLL;
}

uint64_t sub_100140964()
{
  return sub_10014090C(*v0);
}

uint64_t sub_10014096C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1001407DC(a1, a2);
  *a3 = result;
  return result;
}

void sub_100140994(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_1001409A0(uint64_t a1)
{
  unint64_t v2 = sub_100141AB4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001409DC(uint64_t a1)
{
  unint64_t v2 = sub_100141AB4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t MessageSchemaModel.properties.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MessageSchemaModel.properties.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 8) = a1;
  return result;
}

uint64_t MessageSchemaModel.oneOfs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MessageSchemaModel.oneOfs.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 16) = a1;
  return result;
}

Swift::Void (__swiftcall *AvroMapSchema.values.modify())()
{
  return _CPStartNetworkSearchFeedback.redactUnused();
}

uint64_t MessageSchemaModel.init(from:)(void *a1)
{
  sub_10002572C(&qword_100222C40);
  sub_100026B88();
  __chkstk_darwin(v3);
  uint64_t v4 = a1[3];
  sub_10001B620(a1, v4);
  sub_100141AB4();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    sub_10001CA50((uint64_t)a1);
  }
  else
  {
    sub_10002572C(&qword_100221330);
    sub_100141B4C((unint64_t *)&qword_100221338, &qword_100221330, (void (*)(void))sub_10012B06C);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v4 = v8;
    if (!v8) {
      uint64_t v4 = Dictionary.init(dictionaryLiteral:)();
    }
    sub_10002572C(&qword_100222C50);
    sub_100141B4C(&qword_100222C58, &qword_100222C50, (void (*)(void))sub_100141B00);
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    if (!v8) {
      Dictionary.init(dictionaryLiteral:)();
    }
    sub_10002572C(&qword_100222C68);
    sub_100141B4C(&qword_100222C70, &qword_100222C68, (void (*)(void))sub_100141BCC);
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    if (!v8) {
      Dictionary.init(dictionaryLiteral:)();
    }
    uint64_t v6 = sub_100027510();
    v7(v6);
    swift_bridgeObjectRetain();
    sub_10001CA50((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v4;
}

Schematizer::MessageSchemaModel __swiftcall MessageSchemaModel.init(properties:oneOfs:)(Swift::OpaquePointer_optional properties, Swift::OpaquePointer_optional oneOfs)
{
  uint64_t v2 = *(void *)&properties.is_nil;
  uint64_t rawValue = (uint64_t)properties.value._rawValue;
  uint64_t v4 = Dictionary.init(dictionaryLiteral:)();
  if (!rawValue)
  {
    uint64_t rawValue = Dictionary.init(dictionaryLiteral:)();
    if (v2) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v2 = Dictionary.init(dictionaryLiteral:)();
    goto LABEL_3;
  }
  if (!v2) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v5 = (void *)v4;
  uint64_t v6 = (void *)rawValue;
  uint64_t v7 = (void *)v2;
  result.oneOfs._uint64_t rawValue = v7;
  result.properties._uint64_t rawValue = v6;
  result.options._uint64_t rawValue = v5;
  return result;
}

uint64_t MessageSchemaModel.encode(to:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v15 = a4;
  sub_10002572C(&qword_100222C80);
  sub_100026B88();
  uint64_t v10 = v9;
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001B620(a1, a1[3]);
  sub_100141AB4();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if (!*(void *)(a2 + 16)
    || (v17 = a2, char v16 = 0, sub_10002572C(&qword_100221330), sub_100141C18(), sub_10002A708(), !v4))
  {
    if (!*(void *)(a3 + 16)
      || (v17 = a3, char v16 = 1, sub_10002572C(&qword_100222C50), sub_100141C94(), sub_10002A708(), !v4))
    {
      if (*(void *)(v15 + 16))
      {
        uint64_t v17 = v15;
        char v16 = 2;
        sub_10002572C(&qword_100222C68);
        sub_100141D5C();
        sub_10002A708();
      }
    }
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v5);
}

void static MessageSchemaModel.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (sub_10011F89C(a1, a4) & 1) != 0 && (sub_10012080C(a2, a5))
  {
    sub_100120CD8(a3, a6);
  }
}

uint64_t sub_1001410EC@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = MessageSchemaModel.init(from:)(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t sub_10014111C(void *a1)
{
  return MessageSchemaModel.encode(to:)(a1, *v1, v1[1], v1[2]);
}

void sub_10014113C(uint64_t *a1, uint64_t *a2)
{
}

uint64_t MessageSchemaModel.init(_:dontCopy:)(void *a1, char a2)
{
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  sub_10001B620(a1, v5);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 16))(v5, v6);
  uint64_t v8 = sub_10012B5BC(v7);
  swift_bridgeObjectRelease();
  if (!v2)
  {
    uint64_t v29 = a1;
    if (a2)
    {
      swift_retain();
      uint64_t v9 = Dictionary.init(dictionaryLiteral:)();
    }
    else
    {
      uint64_t v10 = a1[3];
      uint64_t v11 = a1[4];
      sub_10001B620(a1, v10);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t))(v11 + 24);
      swift_retain();
      uint64_t v13 = v12(v10, v11);
      uint64_t v9 = Dictionary.init(dictionaryLiteral:)();
      uint64_t v14 = *(void *)(v13 + 16);
      if (v14)
      {
        uint64_t v28 = v8;
        swift_bridgeObjectRetain();
        uint64_t v27 = v13;
        uint64_t v31 = v14;
        uint64_t v30 = v13 + 40;
        uint64_t v8 = a1[4];
        sub_10001B620(a1, a1[3]);
        uint64_t v15 = *(void (**)(uint64_t))(v8 + 48);
        swift_bridgeObjectRetain_n();
        uint64_t v16 = sub_1000261B4();
        v15(v16);
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_10001CA50((uint64_t)v29);
        goto LABEL_11;
      }
      swift_bridgeObjectRelease();
    }
    uint64_t v17 = a1[3];
    uint64_t v18 = a1[4];
    sub_10001B620(a1, v17);
    uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 32))(v17, v18);
    uint64_t v20 = Dictionary.init(dictionaryLiteral:)();
    uint64_t v21 = *(void *)(v19 + 16);
    if (!v21)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_10001CA50((uint64_t)a1);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      return v8;
    }
    uint64_t v27 = v9;
    uint64_t v28 = v8;
    swift_bridgeObjectRetain();
    uint64_t v26 = v19;
    uint64_t v30 = v21;
    uint64_t v31 = v20;
    uint64_t v8 = a1[3];
    uint64_t v22 = a1[4];
    sub_10001B620(a1, v8);
    uint64_t v23 = *(void (**)(uint64_t))(v22 + 56);
    swift_bridgeObjectRetain_n();
    uint64_t v24 = sub_1000261B4();
    v23(v24);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10001CA50((uint64_t)v29);
    swift_bridgeObjectRelease();
LABEL_11:
    swift_release();
    return v8;
  }
  sub_10001CA50((uint64_t)a1);
  return v8;
}

Swift::Void __swiftcall MessageSchemaModel.add(property:withName:)(Schematizer::PropertyModel *property, Swift::String withName)
{
  object = withName._object;
  uint64_t countAndFlagsBits = withName._countAndFlagsBits;
  swift_bridgeObjectRetain();
  sub_100142720((uint64_t)property);
  sub_10013A8CC((uint64_t)property, countAndFlagsBits, (uint64_t)object);

  swift_bridgeObjectRelease();
}

Swift::Bool __swiftcall MessageSchemaModel.hasProperty(_:)(Swift::String a1)
{
  if (*(void *)(v1 + 16))
  {
    object = a1._object;
    uint64_t countAndFlagsBits = a1._countAndFlagsBits;
    swift_bridgeObjectRetain();
    sub_1000287F0(countAndFlagsBits, (uint64_t)object);
    char v5 = v4;
    swift_bridgeObjectRelease();
  }
  else
  {
    char v5 = 0;
  }
  return v5 & 1;
}

uint64_t MessageSchemaModel.nextAvailableTag.getter(uint64_t a1, uint64_t a2)
{
  sub_10001FC68(a2, v18);
  uint64_t v2 = v18[0];
  uint64_t v3 = v18[1];
  int64_t v4 = v18[3];
  unint64_t v5 = v18[4];
  int64_t v6 = (unint64_t)(v18[2] + 64) >> 6;
  uint64_t result = swift_bridgeObjectRetain_n();
  uint64_t v8 = 1;
  if (!v5) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v9 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  unint64_t v10 = v9 | (v4 << 6);
  while (1)
  {
    uint64_t v15 = *(void *)(*(void *)(v2 + 56) + 40 * v10 + 24);
    BOOL v16 = __OFADD__(v15, 1);
    uint64_t v17 = v15 + 1;
    if (v16) {
      break;
    }
    if (v17 > v8) {
      uint64_t v8 = v17;
    }
    if (v5) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v11 = v4 + 1;
    if (__OFADD__(v4, 1)) {
      goto LABEL_28;
    }
    if (v11 >= v6) {
      goto LABEL_26;
    }
    unint64_t v12 = *(void *)(v3 + 8 * v11);
    int64_t v13 = v4 + 1;
    if (!v12)
    {
      int64_t v13 = v4 + 2;
      if (v4 + 2 >= v6) {
        goto LABEL_26;
      }
      unint64_t v12 = *(void *)(v3 + 8 * v13);
      if (!v12)
      {
        int64_t v13 = v4 + 3;
        if (v4 + 3 >= v6) {
          goto LABEL_26;
        }
        unint64_t v12 = *(void *)(v3 + 8 * v13);
        if (!v12)
        {
          int64_t v13 = v4 + 4;
          if (v4 + 4 >= v6) {
            goto LABEL_26;
          }
          unint64_t v12 = *(void *)(v3 + 8 * v13);
          if (!v12)
          {
            int64_t v13 = v4 + 5;
            if (v4 + 5 >= v6) {
              goto LABEL_26;
            }
            unint64_t v12 = *(void *)(v3 + 8 * v13);
            if (!v12)
            {
              int64_t v13 = v4 + 6;
              if (v4 + 6 >= v6) {
                goto LABEL_26;
              }
              unint64_t v12 = *(void *)(v3 + 8 * v13);
              if (!v12)
              {
                int64_t v14 = v4 + 7;
                while (v14 < v6)
                {
                  unint64_t v12 = *(void *)(v3 + 8 * v14++);
                  if (v12)
                  {
                    int64_t v13 = v14 - 1;
                    goto LABEL_20;
                  }
                }
LABEL_26:
                swift_bridgeObjectRelease();
                swift_release();
                return v8;
              }
            }
          }
        }
      }
    }
LABEL_20:
    unint64_t v5 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v13 << 6);
    int64_t v4 = v13;
  }
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1001419BC(uint64_t a1)
{
  if (a1 < 0)
  {
    sub_10001DDF0();
    uint64_t result = (void *)sub_10002647C();
    __break(1u);
  }
  else if (a1)
  {
    uint64_t result = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
    result[2] = a1;
  }
  else
  {
    return _swiftEmptyArrayStorage;
  }
  return result;
}

void *sub_100141A34(uint64_t a1)
{
  if (a1 < 0)
  {
    sub_10001DDF0();
    uint64_t result = (void *)sub_10002647C();
    __break(1u);
  }
  else if (a1)
  {
    sub_10002572C(&qword_100222CC8);
    uint64_t result = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
    result[2] = a1;
  }
  else
  {
    return _swiftEmptyArrayStorage;
  }
  return result;
}

unint64_t sub_100141AB4()
{
  unint64_t result = qword_100222C48;
  if (!qword_100222C48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100222C48);
  }
  return result;
}

unint64_t sub_100141B00()
{
  unint64_t result = qword_100222C60;
  if (!qword_100222C60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100222C60);
  }
  return result;
}

uint64_t sub_100141B4C(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1000371D4(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100141BCC()
{
  unint64_t result = qword_100222C78;
  if (!qword_100222C78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100222C78);
  }
  return result;
}

unint64_t sub_100141C18()
{
  unint64_t result = qword_100222C88;
  if (!qword_100222C88)
  {
    sub_1000371D4(&qword_100221330);
    sub_10012B134();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100222C88);
  }
  return result;
}

unint64_t sub_100141C94()
{
  unint64_t result = qword_100222C90;
  if (!qword_100222C90)
  {
    sub_1000371D4(&qword_100222C50);
    sub_100141D10();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100222C90);
  }
  return result;
}

unint64_t sub_100141D10()
{
  unint64_t result = qword_100222C98;
  if (!qword_100222C98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100222C98);
  }
  return result;
}

unint64_t sub_100141D5C()
{
  unint64_t result = qword_100222CA0;
  if (!qword_100222CA0)
  {
    sub_1000371D4(&qword_100222C68);
    sub_100141DD8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100222CA0);
  }
  return result;
}

unint64_t sub_100141DD8()
{
  unint64_t result = qword_100222CA8;
  if (!qword_100222CA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100222CA8);
  }
  return result;
}

void sub_100141E24()
{
  sub_100028D88();
  int v4 = v3;
  sub_1000248C4(v3, v5, v6);
  sub_100026834();
  if (v9)
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v10 = v7;
  char v11 = v8;
  sub_10002572C(&qword_10021B268);
  if (!sub_1000257E0()) {
    goto LABEL_5;
  }
  unint64_t v12 = sub_1000287F0(v1, v0);
  if ((v11 & 1) != (v13 & 1))
  {
LABEL_11:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v10 = v12;
LABEL_5:
  int64_t v14 = *v2;
  if (v11)
  {
    *(_DWORD *)(v14[7] + 4 * v10) = v4;
    sub_100024390();
  }
  else
  {
    sub_100142604(v10, v1, v0, v4, v14);
    sub_100024390();
    swift_bridgeObjectRetain();
  }
}

void sub_100141F08()
{
  sub_100028D88();
  uint64_t v4 = v3;
  sub_1000248C4(v3, v5, v6);
  sub_100026834();
  if (v9)
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v10 = v7;
  char v11 = v8;
  sub_10002572C(&qword_100222CE8);
  if (!sub_1000257E0()) {
    goto LABEL_5;
  }
  unint64_t v12 = sub_1000287F0(v1, v0);
  if ((v11 & 1) != (v13 & 1))
  {
LABEL_11:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v10 = v12;
LABEL_5:
  int64_t v14 = *v2;
  if (v11)
  {
    *(void *)(v14[7] + 8 * v10) = v4;
    sub_100024390();
  }
  else
  {
    sub_10002F224(v10, v1, v0, v4, v14);
    sub_100024390();
    swift_bridgeObjectRetain();
  }
}

void sub_100141FEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_100141FF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_100142004(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  sub_10002C5F4(a1, a2, a3);
  sub_100026834();
  if (v10)
  {
    __break(1u);
LABEL_12:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  sub_10001DE8C();
  sub_10002572C(a5);
  if (sub_1000257E0())
  {
    sub_10002CEB8();
    sub_100027F90();
    if (!v12) {
      goto LABEL_12;
    }
    uint64_t v7 = v11;
  }
  if (v8)
  {
    uint64_t v13 = *(void *)(*(void *)v6 + 56);
    swift_release();
    *(void *)(v13 + 8 * v7) = v5;
    sub_10000DFB8();
  }
  else
  {
    unint64_t v14 = sub_100018074();
    sub_10002F224(v14, v15, v16, v17, v18);
    sub_10000DFB8();
    swift_bridgeObjectRetain();
  }
}

uint64_t sub_1001420C8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_100142110(a1, a2, a3, a4, &qword_100222A00, (uint64_t (*)(uint64_t, uint64_t))sub_10001C1AC);
}

uint64_t sub_1001420EC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_100142110(a1, a2, a3, a4, &qword_1002229F0, (uint64_t (*)(uint64_t, uint64_t))sub_10001C1AC);
}

uint64_t sub_100142110(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5, uint64_t (*a6)(uint64_t, uint64_t))
{
  sub_1000248C4(a1, a2, a3);
  sub_100026834();
  if (v14)
  {
    __break(1u);
    goto LABEL_13;
  }
  unint64_t v15 = v12;
  char v16 = v13;
  sub_10002572C(a5);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, (Swift::Int)v6)) {
    goto LABEL_5;
  }
  unint64_t v17 = sub_1000287F0(a2, a3);
  if ((v16 & 1) != (v18 & 1))
  {
LABEL_13:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v15 = v17;
LABEL_5:
  uint64_t v19 = *v6;
  if (v16)
  {
    uint64_t v20 = *(void *)(v19 + 56) + 40 * v15;
    sub_10001CA50(v20);
    return a6(a1, v20);
  }
  else
  {
    sub_10014264C(v15, a2, a3, a1, v19);
    return swift_bridgeObjectRetain();
  }
}

void sub_100142268(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10002C5F4(a1, a2, a3);
  sub_100026834();
  if (v7)
  {
    __break(1u);
LABEL_12:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  sub_10001DE8C();
  sub_10002572C(&qword_1002229E8);
  if (sub_1000257E0())
  {
    sub_10002CEB8();
    sub_100027F90();
    if (!v9) {
      goto LABEL_12;
    }
    uint64_t v5 = v8;
  }
  if (v6)
  {
    uint64_t v10 = *(void *)(*(void *)v4 + 56);
    swift_bridgeObjectRelease();
    *(void *)(v10 + 8 * v5) = v3;
    sub_100024390();
  }
  else
  {
    unint64_t v11 = sub_100018074();
    sub_10002F224(v11, v12, v13, v14, v15);
    sub_100024390();
    swift_bridgeObjectRetain();
  }
}

void sub_100142328(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10002C5F4(a1, a2, a3);
  sub_100026834();
  if (v7)
  {
    __break(1u);
LABEL_12:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  sub_10001DE8C();
  sub_10002572C(&qword_1002229F8);
  if (sub_1000257E0())
  {
    sub_10002CEB8();
    sub_100027F90();
    if (!v9) {
      goto LABEL_12;
    }
    uint64_t v5 = v8;
  }
  if (v6)
  {
    uint64_t v10 = *(void *)(*(void *)v4 + 56) + 40 * v5;
    swift_bridgeObjectRelease();
    long long v11 = *(_OWORD *)(v3 + 16);
    *(_OWORD *)uint64_t v10 = *(_OWORD *)v3;
    *(_OWORD *)(v10 + 16) = v11;
    *(unsigned char *)(v10 + 32) = *(unsigned char *)(v3 + 32);
    sub_100024390();
  }
  else
  {
    unint64_t v12 = sub_100018074();
    sub_100142694(v12, v13, v14, v15, v16);
    sub_100024390();
    swift_bridgeObjectRetain();
  }
}

void sub_1001423FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10002C5F4(a1, a2, a3);
  sub_100026834();
  if (v7)
  {
    __break(1u);
LABEL_12:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  sub_10001DE8C();
  sub_10002572C(&qword_100222CE0);
  if (sub_1000257E0())
  {
    sub_10002CEB8();
    sub_100027F90();
    if (!v9) {
      goto LABEL_12;
    }
    uint64_t v5 = v8;
  }
  if (v6)
  {
    uint64_t v10 = *(void *)(*(void *)v4 + 56);
    swift_bridgeObjectRelease();
    *(void *)(v10 + 8 * v5) = v3;
    sub_100024390();
  }
  else
  {
    unint64_t v11 = sub_100018074();
    sub_10002F224(v11, v12, v13, v14, v15);
    sub_100024390();
    swift_bridgeObjectRetain();
  }
}

void sub_1001424BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  char v7 = v6;
  Swift::Int v14 = *v6;
  sub_1000287F0(a4, a5);
  sub_100026834();
  if (v17)
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v18 = v15;
  char v19 = v16;
  sub_10002572C(&qword_100222A10);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a6 & 1, v14)) {
    goto LABEL_5;
  }
  unint64_t v20 = sub_1000287F0(a4, a5);
  if ((v19 & 1) != (v21 & 1))
  {
LABEL_11:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v18 = v20;
LABEL_5:
  uint64_t v22 = (void *)*v7;
  if (v19)
  {
    uint64_t v23 = (uint64_t *)(v22[7] + 24 * v18);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *uint64_t v23 = a1;
    v23[1] = a2;
    v23[2] = a3;
    sub_10000DFB8();
  }
  else
  {
    sub_1001426CC(v18, a4, a5, a1, a2, a3, v22);
    sub_10000DFB8();
    swift_bridgeObjectRetain();
  }
}

unint64_t sub_100142604(unint64_t result, uint64_t a2, uint64_t a3, int a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1 << result;
  uint64_t v5 = (void *)(a5[6] + 16 * result);
  *uint64_t v5 = a2;
  v5[1] = a3;
  *(_DWORD *)(a5[7] + 4 * result) = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

uint64_t sub_10014264C(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6 = sub_10002AE88(a1, a2, a3, a4, a5);
  uint64_t result = v10(v9, v7 + v6 * v8);
  uint64_t v12 = *(void *)(a5 + 16);
  BOOL v13 = __OFADD__(v12, 1);
  uint64_t v14 = v12 + 1;
  if (v13) {
    __break(1u);
  }
  else {
    *(void *)(a5 + 16) = v14;
  }
  return result;
}

unint64_t sub_100142694(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t result = sub_10002AE88(a1, a2, a3, a4, a5);
  uint64_t v9 = v7 + result * v8;
  long long v11 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
  *(_OWORD *)(v9 + 16) = v11;
  *(unsigned char *)(v9 + 32) = *(unsigned char *)(v10 + 32);
  uint64_t v12 = *(void *)(v6 + 16);
  BOOL v13 = __OFADD__(v12, 1);
  uint64_t v14 = v12 + 1;
  if (v13) {
    __break(1u);
  }
  else {
    *(void *)(v6 + 16) = v14;
  }
  return result;
}

unint64_t sub_1001426CC(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  a7[(result >> 6) + 8] |= 1 << result;
  uint64_t v7 = (void *)(a7[6] + 16 * result);
  *uint64_t v7 = a2;
  v7[1] = a3;
  uint64_t v8 = (void *)(a7[7] + 24 * result);
  *uint64_t v8 = a4;
  v8[1] = a5;
  long long v8[2] = a6;
  uint64_t v9 = a7[2];
  BOOL v10 = __OFADD__(v9, 1);
  uint64_t v11 = v9 + 1;
  if (v10) {
    __break(1u);
  }
  else {
    a7[2] = v11;
  }
  return result;
}

uint64_t sub_100142720(uint64_t a1)
{
  return a1;
}

uint64_t destroy for MessageSchemaModel()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *_s11Schematizer18MessageSchemaModelVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for MessageSchemaModel(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for MessageSchemaModel(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for MessageSchemaModel()
{
  return &type metadata for MessageSchemaModel;
}

unsigned char *storeEnumTagSinglePayload for MessageSchemaModel.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100142988);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MessageSchemaModel.CodingKeys()
{
  return &type metadata for MessageSchemaModel.CodingKeys;
}

unint64_t sub_1001429C4()
{
  unint64_t result = qword_100222CB0;
  if (!qword_100222CB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100222CB0);
  }
  return result;
}

unint64_t sub_100142A14()
{
  unint64_t result = qword_100222CB8;
  if (!qword_100222CB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100222CB8);
  }
  return result;
}

unint64_t sub_100142A64()
{
  unint64_t result = qword_100222CC0;
  if (!qword_100222CC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100222CC0);
  }
  return result;
}

uint64_t sub_100142AB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = v4;
  v84[0] = a1;
  v84[1] = a2;
  *(void *)&v79[0] = 64;
  *((void *)&v79[0] + 1) = 0xE100000000000000;
  sub_100021100();
  if (StringProtocol.contains<A>(_:)())
  {
    sub_1001229F8();
    sub_100024A30();
    return sub_100026DFC(v10, 17);
  }
  uint64_t v72 = a4;
  sub_100124DBC(a3, (uint64_t)v84);
  *(void *)&v79[0] = a1;
  *((void *)&v79[0] + 1) = a2;
  v81[0] = 46;
  v81[1] = 0xE100000000000000;
  uint64_t v12 = StringProtocol.components<A>(separatedBy:)();
  uint64_t v13 = *(void *)(v12 + 16);
  if (!v13)
  {
    unint64_t v15 = _swiftEmptyArrayStorage;
LABEL_30:
    swift_bridgeObjectRelease();
    uint64_t result = sub_10012D7D4((uint64_t)v84, (uint64_t)(v72 + 1));
    *uint64_t v72 = v15;
    return result;
  }
  uint64_t v14 = (unint64_t *)(v12 + 40);
  unint64_t v15 = _swiftEmptyArrayStorage;
  while (1)
  {
    uint64_t v17 = *(v14 - 1);
    unint64_t v16 = *v14;
    sub_100124DBC((uint64_t)v84, (uint64_t)v79);
    if (v80 != 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_100124E18((uint64_t)v79);
      sub_1001229F8();
      sub_100024A30();
      sub_100026DFC(v68, 16);
      return sub_100124E18((uint64_t)v84);
    }
    sub_10001C1AC(v79, (uint64_t)v81);
    swift_bridgeObjectRetain();
    unint64_t v18 = sub_100143CCC(93, 0xE100000000000000, v17, v16);
    int v85 = v19;
    if ((v19 & 1) == 0) {
      break;
    }
    uint64_t v41 = v82;
    uint64_t v42 = v83;
    sub_10001B620(v81, v82);
    (*(void (**)(long long *__return_ptr, uint64_t, unint64_t, uint64_t, uint64_t))(v42 + 48))(v79, v17, v16, v41, v42);
    if (v5)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_35;
    }
    swift_bridgeObjectRelease();
    sub_10001C1AC(v79, (uint64_t)v76);
    sub_10001B620(v76, v77);
    uint64_t v43 = sub_10002AEBC();
    if (v44(v43))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1001229F8();
      sub_100024A30();
      uint64_t v71 = 13;
      goto LABEL_41;
    }
    uint64_t v45 = v77;
    uint64_t v46 = v78;
    sub_10001B620(v76, v77);
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v46 + 40))(v79, v45, v46);
    sub_100124E18((uint64_t)v84);
    sub_10012D7D4((uint64_t)v79, (uint64_t)v84);
    sub_10001B620(v76, v77);
    uint64_t v5 = 0;
    uint64_t v47 = sub_100024CF0();
    uint64_t v49 = v48(v47);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_1000166E4();
      unint64_t v15 = v64;
    }
    unint64_t v50 = v15[2];
    unint64_t v51 = v50 + 1;
    if (v50 >= v15[3] >> 1)
    {
      sub_10001DE98();
      unint64_t v15 = v65;
    }
    long long v39 = 0;
LABEL_27:
    v15[2] = v51;
    uint64_t v63 = &v15[3 * v50];
    v63[4] = v49;
    v63[5] = v39;
    v14 += 2;
    *((unsigned char *)v63 + 48) = (v85 & 1) == 0;
    sub_10001CA50((uint64_t)v76);
    sub_10001CA50((uint64_t)v81);
    if (!--v13) {
      goto LABEL_30;
    }
  }
  unint64_t v20 = v18;
  sub_100143CCC(91, 0xE100000000000000, v17, v16);
  if (v21)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1001229F8();
    sub_100024A30();
    sub_100026DFC(v69, 15);
    goto LABEL_36;
  }
  unint64_t v74 = v20;
  uint64_t v73 = v13;
  swift_bridgeObjectRetain();
  String.subscript.getter();
  swift_bridgeObjectRelease();
  uint64_t v75 = v5;
  uint64_t v23 = v82;
  uint64_t v22 = v83;
  sub_10001B620(v81, v82);
  uint64_t v24 = static String._fromSubstring(_:)();
  uint64_t v26 = v25;
  swift_bridgeObjectRelease();
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 48))(v79, v24, v26, v23, v22);
  if (v75)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_35:
    swift_bridgeObjectRelease();
LABEL_36:
    sub_100124E18((uint64_t)v84);
    return sub_10001CA50((uint64_t)v81);
  }
  swift_bridgeObjectRelease();
  sub_10001C1AC(v79, (uint64_t)v76);
  sub_10001B620(v76, v77);
  uint64_t v27 = sub_10002AEBC();
  if ((v28(v27) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1001229F8();
    sub_100024A30();
    uint64_t v71 = 14;
    goto LABEL_41;
  }
  if (v74 >> 14 >= (unint64_t)String.index(after:)() >> 14)
  {
    uint64_t v29 = String.subscript.getter();
    unint64_t v31 = v30;
    swift_bridgeObjectRelease();
    if (!((v29 ^ v31) >> 14)) {
      goto LABEL_44;
    }
    uint64_t v32 = sub_10002B344();
    uint64_t v37 = sub_100144A28(v32, v33, v34, v35, v36);
    if ((v38 & 0x100) != 0)
    {
      uint64_t v52 = sub_10002B344();
      long long v39 = sub_100144660(v52, v53, v54, v55, v56);
      char v58 = v57;
      swift_bridgeObjectRelease();
      if (v58)
      {
LABEL_39:
        swift_bridgeObjectRelease();
        goto LABEL_40;
      }
    }
    else
    {
      long long v39 = (unsigned __int8 *)v37;
      char v40 = v38;
      swift_bridgeObjectRelease();
      if (v40) {
        goto LABEL_39;
      }
    }
    uint64_t v59 = v77;
    uint64_t v60 = v78;
    sub_10001B620(v76, v77);
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v60 + 40))(v79, v59, v60);
    sub_100124E18((uint64_t)v84);
    sub_10012D7D4((uint64_t)v79, (uint64_t)v84);
    sub_10001B620(v76, v77);
    uint64_t v5 = 0;
    uint64_t v61 = sub_100024CF0();
    uint64_t v49 = v62(v61);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_1000166E4();
      unint64_t v15 = v66;
    }
    uint64_t v13 = v73;
    unint64_t v50 = v15[2];
    unint64_t v51 = v50 + 1;
    if (v50 >= v15[3] >> 1)
    {
      sub_10001DE98();
      unint64_t v15 = v67;
    }
    goto LABEL_27;
  }
  __break(1u);
LABEL_44:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_40:
  swift_bridgeObjectRelease();
  sub_1001229F8();
  sub_100024A30();
  uint64_t v71 = 15;
LABEL_41:
  sub_100026DFC(v70, v71);
  sub_100124E18((uint64_t)v84);
  sub_10001CA50((uint64_t)v76);
  return sub_10001CA50((uint64_t)v81);
}

void static ProtoTagPathHelper.extractValue(from:pathAndType:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4 = *(void *)a3;
  if (!*(void *)(*(void *)a3 + 16))
  {
LABEL_58:
    sub_1001229F8();
    sub_100024A30();
    *(void *)uint64_t v46 = 0x2064696C61766E69;
    *(void *)(v46 + 8) = 0xEF68746170676174;
    *(unsigned char *)(v46 + 41) = 12;
    swift_willThrow();
    return;
  }
  uint64_t v83 = a3;
  uint64_t v89 = a4;
  uint64_t v5 = sub_100143AE4(a1, a2);
  uint64_t v87 = *(void *)(v4 + 16);
  unint64_t v90 = Data.count.getter();
  if ((v90 & 0x8000000000000000) == 0)
  {
    if (!*(void *)(v4 + 16)) {
      goto LABEL_57;
    }
    unint64_t v6 = 0;
    uint64_t v7 = v4 + 32;
    uint64_t v85 = v4 + 32;
    uint64_t v86 = v4;
    while (1)
    {
      unint64_t v8 = v7 + 24 * v6;
      uint64_t v9 = *(void *)v8;
      if ((*(unsigned char *)(v8 + 16) & 1) == 0)
      {
        unint64_t v25 = (unint64_t)[v5 position];
        if ((v25 & 0x8000000000000000) == 0 && v25 >= v90)
        {
LABEL_62:
          sub_100027250(v25, v26, v27, v28, v29, v30, v31, v32, v79, v80, v81, v82, v83, v84, v85, v86, v87, v88, v89);
          id v53 = sub_100018088(v52, "seekToOffset:");
          sub_100018088((uint64_t)v53, "updateData:");
          sub_10002C624();
          if (!v51) {
            goto LABEL_63;
          }
          __break(1u);
          goto LABEL_77;
        }
        while (1)
        {
          sub_1000261C8();
          if (v19 || (sub_100026530(), v20)) {
            sub_1000214EC();
          }
          else {
            sub_10002A734();
          }
          unint64_t v37 = ((unint64_t)(v36 & 0x7F) << v33) | v35;
          if (v36 < 0)
          {
            if (v34 < 9) {
              continue;
            }
            unint64_t v38 = 0;
          }
          else if (*((unsigned char *)v5 + OBJC_IVAR___PBDataReader__error))
          {
            unint64_t v38 = 0;
          }
          else
          {
            unint64_t v38 = v37;
          }
          uint64_t v24 = v38 & 7;
          if (v9 == (v38 >> 3)) {
            goto LABEL_40;
          }
          PBReaderSkipValueWithTag();
          unint64_t v25 = (unint64_t)[v5 position];
          if ((v25 & 0x8000000000000000) == 0 && v25 >= v90) {
            goto LABEL_62;
          }
        }
      }
      uint64_t v84 = v6;
      uint64_t v10 = *(void *)(v8 + 8);
      while (1)
      {
        unint64_t v11 = (unint64_t)[v5 position];
        if ((v11 & 0x8000000000000000) == 0 && v11 >= v90)
        {
          sub_100027250(v11, v12, v13, v14, v15, v16, v17, v18, v79, v80, v81, v82, v83, v84, v85, v86, v87, v88, v89);
          id v48 = sub_100018088(v47, "seekToOffset:");
          sub_100018088((uint64_t)v48, "updateData:");
          sub_10002C624();
          if (!v51) {
            goto LABEL_63;
          }
          __break(1u);
          goto LABEL_62;
        }
        sub_1000185EC();
        while (1)
        {
          sub_1000261C8();
          if (v19 || (sub_100026530(), v20)) {
            sub_1000214EC();
          }
          else {
            sub_10002A734();
          }
          sub_10002DF44();
          if ((v23 & 0x80) == 0) {
            break;
          }
          if (v22 >= 9)
          {
            unint64_t v21 = 0;
            goto LABEL_19;
          }
        }
        if (*((unsigned char *)v5 + OBJC_IVAR___PBDataReader__error)) {
          unint64_t v21 = 0;
        }
LABEL_19:
        uint64_t v24 = v21 & 7;
        if (v9 == (v21 >> 3)) {
          break;
        }
LABEL_22:
        PBReaderSkipValueWithTag();
      }
      if (v10) {
        break;
      }
      unint64_t v6 = v84;
LABEL_40:
      char v39 = sub_10012EF18(v24);
      if (v39 == 6)
      {
        sub_1001229F8();
        sub_100024A30();
        sub_10002CED4();
        _StringGuts.grow(_:)(22);
        swift_bridgeObjectRelease();
        HIBYTE(v91) = v24;
        v54._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v54);
        uint64_t v55 = swift_bridgeObjectRelease();
        uint64_t v63 = sub_100028D9C(v55, v56, v57, v58, v59, v60, v61, v62, v79, v80, v81, v82, v83, v84, v85, v86, v87, v88, v89,
                v90,
                v91,
                0xD000000000000014,
                0x80000001001B9520);
        id v64 = sub_100018088(v63, "seekToOffset:");
        sub_100018088((uint64_t)v64, "updateData:");
        sub_10002C624();
        if (!v51) {
          goto LABEL_63;
        }
        __break(1u);
LABEL_67:
        sub_10012EF68((uint64_t)v5, v40, v89);
        uint64_t v49 = &selRef_releaseTag;
        if (v88)
        {
          id v66 = sub_100018088(v65, "seekToOffset:");
          sub_100018088((uint64_t)v66, "updateData:");
          sub_10002C624();
          if (!v51) {
            goto LABEL_63;
          }
          __break(1u);
LABEL_71:
          sub_1001229F8();
          sub_100024A30();
          sub_10002CED4();
          _StringGuts.grow(_:)(38);
          swift_bridgeObjectRelease();
          HIBYTE(v91) = v24;
          v67._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v67);
          uint64_t v68 = swift_bridgeObjectRelease();
          uint64_t v76 = sub_100028D9C(v68, v69, v70, v71, v72, v73, v74, v75, v79, v80, v81, v82, v83, v84, v85, v86, v87, v88, v89,
                  v90,
                  v91,
                  0xD000000000000024,
                  0x80000001001B8A70);
          id v77 = sub_100018088(v76, "seekToOffset:");
          sub_100018088((uint64_t)v77, "updateData:");
          sub_10002C624();
          if (!v51)
          {
LABEL_63:
            v49[414] = v50;

            return;
          }
          __break(1u);
        }
        id v78 = sub_100018088(v65, v49[54]);
        sub_100018088((uint64_t)v78, "updateData:");
        sub_10002C624();
        if (!v51) {
          goto LABEL_63;
        }
LABEL_77:
        __break(1u);
      }
      char v40 = v39;
      if (++v6 == v87) {
        goto LABEL_67;
      }
      if (v39 != 2) {
        goto LABEL_71;
      }
      sub_1000185EC();
      while (1)
      {
        sub_1000261C8();
        if (v19 || (sub_100026530(), v20)) {
          sub_1000214EC();
        }
        else {
          sub_10002A734();
        }
        sub_10002DF44();
        if ((v43 & 0x80) == 0) {
          break;
        }
        if (v42 > 8)
        {
          uint64_t v44 = 0;
          goto LABEL_55;
        }
      }
      if (*((unsigned char *)v5 + OBJC_IVAR___PBDataReader__error)) {
        uint64_t v44 = 0;
      }
      else {
        uint64_t v44 = v41;
      }
      if (v44 < 0) {
        goto LABEL_78;
      }
LABEL_55:
      unint64_t v45 = (unint64_t)[v5 position];
      if ((v45 & 0x8000000000000000) != 0) {
        goto LABEL_78;
      }
      unint64_t v90 = v45 + v44;
      uint64_t v7 = v85;
      if (v6 >= *(void *)(v86 + 16))
      {
LABEL_57:
        __break(1u);
        goto LABEL_58;
      }
    }
    --v10;
    goto LABEL_22;
  }
LABEL_78:
  sub_100024270();
  sub_100025974();
  __break(1u);
}

uint64_t static ProtoTagPathHelper.extractValues(from:property:block:)(uint64_t a1, uint64_t a2, void *a3, void (*a4)(unsigned char *))
{
  sub_10001B620(a3, a3[3]);
  uint64_t v9 = sub_1000284F0();
  uint64_t result = v10(v9);
  if (!v4)
  {
    sub_10001B620(a3, a3[3]);
    uint64_t v12 = sub_1000284F0();
    uint64_t v23 = v13(v12);
    uint64_t v15 = a3[3];
    uint64_t v14 = a3[4];
    sub_10001B620(a3, v15);
    uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 16))(v15, v14);
    if (v16)
    {
      __chkstk_darwin(v16);
      sub_100143F1C(a1, a2, v23, (void (*)(char *, unint64_t))sub_100143EFC);
      return sub_100124E18((uint64_t)v22);
    }
    else
    {
      sub_10002572C(&qword_100221050);
      uint64_t v17 = swift_allocObject();
      *(_OWORD *)(v17 + 16) = xmmword_1001A2A20;
      *(void *)(v17 + 32) = v23;
      *(void *)(v17 + 40) = 0;
      *(unsigned char *)(v17 + 48) = 0;
      sub_100124DBC((uint64_t)v22, (uint64_t)&v19);
      uint64_t v18 = v17;
      static ProtoTagPathHelper.extractValue(from:pathAndType:)(a1, a2, (uint64_t)&v18, (uint64_t)v20);
      sub_1001326F8((uint64_t)&v18);
      if (v20[57] == 255)
      {
        sub_100124E18((uint64_t)v22);
        return sub_100019938((uint64_t)v20, &qword_100221918);
      }
      else
      {
        sub_10001B978((uint64_t)v20, (uint64_t)v21);
        a4(v21);
        sub_10001B840((uint64_t)v21);
        return sub_100124E18((uint64_t)v22);
      }
    }
  }
  return result;
}

uint64_t static ProtoTagPathHelper.extractAllValues(from:schema:block:)(uint64_t a1, uint64_t a2, void *a3, void (*a4)(void *, long long *))
{
  uint64_t v8 = a3[3];
  uint64_t v9 = a3[4];
  sub_10001B620(a3, v8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 40))(v8, v9);
  if (!v4)
  {
    uint64_t v11 = result;
    swift_bridgeObjectRetain();
    sub_10014441C(a1, a2, v11, a4);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100143A64()
{
  sub_10002572C(&qword_1002192A8);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1001A3820;
  *(void *)(v0 + 32) = [objc_allocWithZone((Class)PBDataReader) init];
  uint64_t result = specialized Array._endMutation()();
  qword_100222CF8 = v0;
  return result;
}

void *sub_100143AE4(uint64_t a1, uint64_t a2)
{
  if (__OFADD__(qword_100222CF0, 1))
  {
    __break(1u);
LABEL_16:
    id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_14;
  }
  uint64_t v2 = a2;
  uint64_t v3 = a1;
  ++qword_100222CF0;
  while (1)
  {
    if (qword_100220880 != -1) {
      swift_once();
    }
    swift_beginAccess();
    if ((unint64_t)qword_100222CF8 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v4 = *(void *)((qword_100222CF8 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    unint64_t v5 = qword_100222CF0;
    if (qword_100222CF0 < v4) {
      break;
    }
    [objc_allocWithZone((Class)PBDataReader) init];
    swift_beginAccess();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((qword_100222CF8 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((qword_100222CF8 & 0xFFFFFFFFFFFFFF8)
                                                                                  + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_endAccess();
  }
  swift_beginAccess();
  uint64_t v6 = qword_100222CF8;
  sub_1000651B0(v5, (qword_100222CF8 & 0xC000000000000001) == 0, qword_100222CF8);
  if ((v6 & 0xC000000000000001) != 0) {
    goto LABEL_16;
  }
  id v7 = *(id *)(v6 + 8 * v5 + 32);
LABEL_14:
  uint64_t v8 = v7;
  swift_endAccess();
  sub_1001449D0(v3, v2, v8);
  return v8;
}

unint64_t sub_100143CCC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0) {
    uint64_t v4 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (!v4) {
    return 0;
  }
  uint64_t v7 = 4 * v4;
  unint64_t v8 = 15;
  while (String.subscript.getter() != a1 || v9 != a2)
  {
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v11) {
      return v8;
    }
    unint64_t v8 = String.index(after:)();
    if (v7 == v8 >> 14) {
      return 0;
    }
  }
  swift_bridgeObjectRelease();
  return v8;
}

void sub_100143DB4(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *))
{
  char v5 = a2;
  char v7 = sub_10012EF18(a2);
  if (v7 == 6)
  {
    sub_1001229F8();
    swift_allocError();
    uint64_t v9 = v8;
    _StringGuts.grow(_:)(22);
    swift_bridgeObjectRelease();
    char v12 = v5;
    v10._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    *(void *)uint64_t v9 = 0xD000000000000014;
    *(void *)(v9 + 8) = 0x80000001001B9520;
    *(unsigned char *)(v9 + 41) = 12;
    swift_willThrow();
  }
  else
  {
    sub_10012EF68(a1, v7, (uint64_t)&v11);
    if (!v3)
    {
      a3(&v11);
      sub_10001B840((uint64_t)&v11);
    }
  }
}

void sub_100143EFC(uint64_t a1, uint64_t a2)
{
  sub_100143DB4(a1, a2, *(void (**)(uint64_t *))(v2 + 16));
}

void sub_100143F1C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(char *, unint64_t))
{
  char v7 = (char *)sub_100143AE4(a1, a2);
  uint64_t v8 = Data.count.getter();
  if ((v8 & 0x8000000000000000) == 0)
  {
    unint64_t v9 = v8;
    unint64_t v10 = (unint64_t)[v7 position];
    if ((v10 & 0x8000000000000000) == 0 && v10 >= v9)
    {
LABEL_22:
      [v7 seekToOffset:0];
      [v7 updateData:0];
      uint64_t v20 = qword_100222CF0 - 1;
      if (!__OFSUB__(qword_100222CF0, 1)) {
        goto LABEL_23;
      }
      goto LABEL_27;
    }
    char v11 = 0;
    unsigned int v12 = 0;
    unint64_t v13 = 0;
    while (1)
    {
      while (1)
      {
        unint64_t v14 = *(void *)&v7[OBJC_IVAR___PBDataReader__pos];
        if (v14 == -1 || v14 >= *(void *)&v7[OBJC_IVAR___PBDataReader__length])
        {
          char v16 = 0;
          v7[OBJC_IVAR___PBDataReader__error] = 1;
        }
        else
        {
          unint64_t v15 = v14 + 1;
          char v16 = *(unsigned char *)(*(void *)&v7[OBJC_IVAR___PBDataReader__bytes] + v14);
          *(void *)&v7[OBJC_IVAR___PBDataReader__pos] = v15;
        }
        v13 |= (unint64_t)(v16 & 0x7F) << v11;
        if (v16 < 0) {
          break;
        }
        if (v7[OBJC_IVAR___PBDataReader__error]) {
          unint64_t v17 = 0;
        }
        else {
          unint64_t v17 = v13;
        }
LABEL_16:
        if (a3 == (v17 >> 3))
        {
          a4(v7, v17 & 7);
          if (v4)
          {
            [v7 seekToOffset:0];
            [v7 updateData:0];
            uint64_t v20 = qword_100222CF0 - 1;
            if (!__OFSUB__(qword_100222CF0, 1))
            {
LABEL_23:
              qword_100222CF0 = v20;

              return;
            }
            __break(1u);
LABEL_27:
            __break(1u);
          }
        }
        else
        {
          PBReaderSkipValueWithTag();
        }
        unint64_t v19 = (unint64_t)[v7 position];
        unsigned int v12 = 0;
        char v11 = 0;
        unint64_t v13 = 0;
        if ((v19 & 0x8000000000000000) == 0)
        {
          unint64_t v13 = 0;
          if (v19 >= v9) {
            goto LABEL_22;
          }
        }
      }
      v11 += 7;
      if (v12++ >= 9)
      {
        unint64_t v17 = 0;
        goto LABEL_16;
      }
    }
  }
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t sub_1001441B4(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, void (*a5)(void *, long long *))
{
  sub_100139FC4(a2, a4, (uint64_t)&v22);
  if (v23)
  {
    sub_10001C1AC(&v22, (uint64_t)v26);
    uint64_t v10 = v27;
    uint64_t v11 = v28;
    sub_10001B620(v26, v27);
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v11 + 40))(v25, v10, v11);
    if (!v5)
    {
      char v12 = sub_10012EF18(a1);
      if (v12 == 6)
      {
        sub_1001229F8();
        swift_allocError();
        uint64_t v14 = v13;
        *(void *)&long long v22 = 0;
        *((void *)&v22 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(22);
        swift_bridgeObjectRelease();
        *(void *)&long long v22 = 0xD000000000000014;
        *((void *)&v22 + 1) = 0x80000001001B9520;
        char v24 = a1;
        v15._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v15);
        swift_bridgeObjectRelease();
        uint64_t v16 = *((void *)&v22 + 1);
        *(void *)uint64_t v14 = v22;
        *(void *)(v14 + 8) = v16;
        *(unsigned char *)(v14 + 41) = 12;
        swift_willThrow();
      }
      else
      {
        sub_10012EF68(a3, v12, (uint64_t)&v22);
        a5(v26, &v22);
        sub_10001B840((uint64_t)&v22);
      }
      sub_100124E18((uint64_t)v25);
    }
    return sub_10001CA50((uint64_t)v26);
  }
  else
  {
    sub_100019938((uint64_t)&v22, &qword_100221508);
    sub_1001229F8();
    swift_allocError();
    uint64_t v18 = v17;
    *(void *)&long long v22 = 0x6761742068746977;
    *((void *)&v22 + 1) = 0xE900000000000020;
    LODWORD(v25[0]) = a2;
    v19._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    uint64_t v20 = *((void *)&v22 + 1);
    *(void *)uint64_t v18 = v22;
    *(void *)(v18 + 8) = v20;
    *(unsigned char *)(v18 + 41) = 4;
    return swift_willThrow();
  }
}

void sub_10014441C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void *, long long *))
{
  uint64_t v6 = (char *)sub_100143AE4(a1, a2);
  unint64_t v15 = Data.count.getter();
  if ((v15 & 0x8000000000000000) != 0)
  {
    swift_bridgeObjectRelease();
    sub_100024270();
    sub_100025974();
    __break(1u);
  }
  else
  {
    while (1)
    {
      unint64_t v7 = (unint64_t)[v6 position];
      if ((v7 & 0x8000000000000000) == 0 && v7 >= v15) {
        break;
      }
      sub_1000185EC();
      while (1)
      {
        unint64_t v8 = *(void *)&v6[OBJC_IVAR___PBDataReader__pos];
        if (v8 == -1 || v8 >= *(void *)&v6[OBJC_IVAR___PBDataReader__length]) {
          v6[OBJC_IVAR___PBDataReader__error] = 1;
        }
        else {
          *(void *)&v6[OBJC_IVAR___PBDataReader__pos] = v8 + 1;
        }
        sub_10002DF44();
        if ((v11 & 0x80) == 0) {
          break;
        }
        if (v10 >= 9)
        {
          unint64_t v9 = 0;
          goto LABEL_14;
        }
      }
      if (v6[OBJC_IVAR___PBDataReader__error]) {
        unint64_t v9 = 0;
      }
LABEL_14:
      sub_1001441B4(v9 & 7, v9 >> 3, (uint64_t)v6, a3, a4);
      if (v4)
      {
        [v6 seekToOffset:0];
        [v6 updateData:0];
        sub_10002C624();
        if (!v14) {
          goto LABEL_19;
        }
        __break(1u);
        break;
      }
    }
    [v6 seekToOffset:0];
    [v6 updateData:0];
    sub_10002C624();
    if (v14) {
      __break(1u);
    }
LABEL_19:
    *(void *)(v12 + 3312) = v13;
    swift_bridgeObjectRelease();
  }
}

ValueMetadata *type metadata accessor for ProtoTagPathHelper()
{
  return &type metadata for ProtoTagPathHelper;
}

unsigned __int8 *sub_100144660(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int64_t a5)
{
  uint64_t v15 = a1;
  uint64_t v16 = a2;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  sub_100144B04();
  swift_bridgeObjectRetain();
  uint64_t v7 = String.init<A>(_:)();
  unint64_t v8 = v6;
  if ((v6 & 0x1000000000000000) == 0)
  {
    if ((v6 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v10 = HIBYTE(v8) & 0xF;
    uint64_t v15 = v7;
    uint64_t v16 = v8 & 0xFFFFFFFFFFFFFFLL;
    unint64_t v9 = (unsigned __int8 *)&v15;
    goto LABEL_7;
  }
  uint64_t v7 = sub_100109A14();
  unint64_t v12 = v11;
  swift_bridgeObjectRelease();
  unint64_t v8 = v12;
  if ((v12 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v7 & 0x1000000000000000) != 0)
  {
    unint64_t v9 = (unsigned __int8 *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v10 = v7 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    unint64_t v9 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  uint64_t v13 = sub_100144754(v9, v10, a5);
  swift_bridgeObjectRelease();
  return v13;
}

unsigned __int8 *sub_100144754(unsigned __int8 *result, uint64_t a2, int64_t a3)
{
  uint64_t v3 = a2;
  int v4 = *result;
  if (v4 == 43)
  {
    if (a2 >= 1)
    {
      uint64_t v17 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v18 = a3 + 48;
        unsigned __int8 v19 = a3 + 55;
        unsigned __int8 v20 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v18 = 58;
        }
        else
        {
          unsigned __int8 v20 = 97;
          unsigned __int8 v19 = 65;
        }
        if (result)
        {
          unint64_t v9 = 0;
          unint64_t v21 = result + 1;
          do
          {
            unsigned int v22 = *v21;
            if (v22 < 0x30 || v22 >= v18)
            {
              if (v22 < 0x41 || v22 >= v19)
              {
                uint64_t v13 = 0;
                if (v22 < 0x61 || v22 >= v20) {
                  return (unsigned __int8 *)v13;
                }
                char v23 = -87;
              }
              else
              {
                char v23 = -55;
              }
            }
            else
            {
              char v23 = -48;
            }
            if (!is_mul_ok(v9, a3)) {
              return 0;
            }
            unint64_t v24 = v9 * a3;
            unsigned __int8 v25 = v22 + v23;
            BOOL v16 = __CFADD__(v24, v25);
            unint64_t v9 = v24 + v25;
            if (v16) {
              return 0;
            }
            ++v21;
            --v17;
          }
          while (v17);
          return (unsigned __int8 *)v9;
        }
        return 0;
      }
      return 0;
    }
  }
  else
  {
    if (v4 != 45)
    {
      if (a2)
      {
        unsigned __int8 v26 = a3 + 48;
        unsigned __int8 v27 = a3 + 55;
        unsigned __int8 v28 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v26 = 58;
        }
        else
        {
          unsigned __int8 v28 = 97;
          unsigned __int8 v27 = 65;
        }
        if (result)
        {
          unint64_t v29 = 0;
          do
          {
            unsigned int v30 = *result;
            if (v30 < 0x30 || v30 >= v26)
            {
              if (v30 < 0x41 || v30 >= v27)
              {
                uint64_t v13 = 0;
                if (v30 < 0x61 || v30 >= v28) {
                  return (unsigned __int8 *)v13;
                }
                char v31 = -87;
              }
              else
              {
                char v31 = -55;
              }
            }
            else
            {
              char v31 = -48;
            }
            if (!is_mul_ok(v29, a3)) {
              return 0;
            }
            unint64_t v32 = v29 * a3;
            unsigned __int8 v33 = v30 + v31;
            BOOL v16 = __CFADD__(v32, v33);
            unint64_t v29 = v32 + v33;
            if (v16) {
              return 0;
            }
            ++result;
            --v3;
          }
          while (v3);
          return (unsigned __int8 *)v29;
        }
        return 0;
      }
      return 0;
    }
    if (a2 >= 1)
    {
      uint64_t v5 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v6 = a3 + 48;
        unsigned __int8 v7 = a3 + 55;
        unsigned __int8 v8 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v6 = 58;
        }
        else
        {
          unsigned __int8 v8 = 97;
          unsigned __int8 v7 = 65;
        }
        if (result)
        {
          unint64_t v9 = 0;
          for (unint64_t i = result + 1; ; ++i)
          {
            unsigned int v11 = *i;
            if (v11 < 0x30 || v11 >= v6)
            {
              if (v11 < 0x41 || v11 >= v7)
              {
                uint64_t v13 = 0;
                if (v11 < 0x61 || v11 >= v8) {
                  return (unsigned __int8 *)v13;
                }
                char v12 = -87;
              }
              else
              {
                char v12 = -55;
              }
            }
            else
            {
              char v12 = -48;
            }
            if (!is_mul_ok(v9, a3)) {
              return 0;
            }
            unint64_t v14 = v9 * a3;
            unsigned __int8 v15 = v11 + v12;
            BOOL v16 = v14 >= v15;
            unint64_t v9 = v14 - v15;
            if (!v16) {
              return 0;
            }
            if (!--v5) {
              return (unsigned __int8 *)v9;
            }
          }
        }
        return 0;
      }
      return 0;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

void sub_1001449D0(uint64_t a1, uint64_t a2, void *a3)
{
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  [a3 updateData:isa];
}

uint64_t sub_100144A28(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, int64_t a5)
{
  if ((a4 & 0x1000000000000000) != 0)
  {
    uint64_t result = 0;
    goto LABEL_8;
  }
  if ((a4 & 0x2000000000000000) != 0)
  {
    uint64_t v12 = HIBYTE(a4) & 0xF;
    v15[0] = a3;
    v15[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    unsigned int v11 = v15;
  }
  else if ((a3 & 0x1000000000000000) != 0)
  {
    unsigned int v11 = (void *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v12 = a3 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    unsigned int v11 = (void *)_StringObject.sharedUTF8.getter();
  }
  uint64_t result = sub_100144B50((uint64_t)v11, v12, a1, a2, a3, a4, a5);
  if (!v5)
  {
    char v16 = v14 & 1;
LABEL_8:
    LOBYTE(v15[0]) = (a4 & 0x1000000000000000) != 0;
  }
  return result;
}

unint64_t sub_100144B04()
{
  unint64_t result = qword_100222D00;
  if (!qword_100222D00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100222D00);
  }
  return result;
}

uint64_t sub_100144B50(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, int64_t a7)
{
  unint64_t v11 = a3;
  uint64_t v12 = result;
  uint64_t v13 = (a5 >> 59) & 1;
  if ((a6 & 0x1000000000000000) == 0) {
    LOBYTE(v13) = 1;
  }
  uint64_t v14 = 4 << v13;
  uint64_t v15 = a3 & 0xC;
  unint64_t v16 = a3;
  if (v15 == 4 << v13)
  {
    unint64_t result = sub_1000F94F4(a3, a5, a6);
    unint64_t v16 = result;
  }
  uint64_t v17 = HIBYTE(a6) & 0xF;
  if ((a6 & 0x1000000000000000) != 0)
  {
    unint64_t v19 = a5 & 0xFFFFFFFFFFFFLL;
    if ((a6 & 0x2000000000000000) != 0) {
      unint64_t v19 = HIBYTE(a6) & 0xF;
    }
    if (v19 < v16 >> 16) {
      goto LABEL_97;
    }
    unint64_t result = String.UTF8View._foreignDistance(from:to:)();
    uint64_t v18 = result;
    uint64_t v17 = HIBYTE(a6) & 0xF;
  }
  else
  {
    uint64_t v18 = v16 >> 16;
  }
  if (v15 == v14)
  {
    uint64_t v20 = v17;
    unint64_t result = sub_1000F94F4(v11, a5, a6);
    uint64_t v17 = v20;
    unint64_t v11 = result;
  }
  if ((a4 & 0xC) == v14)
  {
    uint64_t v21 = a4;
    uint64_t v22 = v17;
    unint64_t result = sub_1000F94F4(v21, a5, a6);
    uint64_t v17 = v22;
    a4 = result;
    if ((a6 & 0x1000000000000000) == 0) {
      goto LABEL_11;
    }
  }
  else if ((a6 & 0x1000000000000000) == 0)
  {
LABEL_11:
    unint64_t result = (a4 >> 16) - (v11 >> 16);
    goto LABEL_22;
  }
  unint64_t v23 = a5 & 0xFFFFFFFFFFFFLL;
  if ((a6 & 0x2000000000000000) != 0) {
    unint64_t v23 = v17;
  }
  if (v23 < v11 >> 16) {
    goto LABEL_93;
  }
  if (v23 < a4 >> 16)
  {
LABEL_94:
    __break(1u);
    goto LABEL_95;
  }
  unint64_t result = String.UTF8View._foreignDistance(from:to:)();
LABEL_22:
  uint64_t v24 = v18 + result;
  if (__OFADD__(v18, result))
  {
    __break(1u);
    goto LABEL_92;
  }
  if (v24 < v18)
  {
LABEL_92:
    __break(1u);
LABEL_93:
    __break(1u);
    goto LABEL_94;
  }
  unsigned __int8 v25 = (unsigned __int8 *)(v12 + v18);
  if (!v12) {
    unsigned __int8 v25 = 0;
  }
  int v26 = *v25;
  if (v26 == 43)
  {
    if (result >= 1)
    {
      if (result != 1)
      {
        unsigned __int8 v39 = a7 + 48;
        unsigned __int8 v40 = a7 + 55;
        unsigned __int8 v41 = a7 + 87;
        if (a7 > 10)
        {
          unsigned __int8 v39 = 58;
        }
        else
        {
          unsigned __int8 v41 = 97;
          unsigned __int8 v40 = 65;
        }
        if (v25)
        {
          unint64_t v30 = 0;
          unsigned int v42 = v25 + 1;
          uint64_t v43 = result - 1;
          do
          {
            unsigned int v44 = *v42;
            if (v44 < 0x30 || v44 >= v39)
            {
              if (v44 < 0x41 || v44 >= v40)
              {
                uint64_t v35 = 0;
                if (v44 < 0x61 || v44 >= v41) {
                  return v35;
                }
                char v45 = -87;
              }
              else
              {
                char v45 = -55;
              }
            }
            else
            {
              char v45 = -48;
            }
            if (!is_mul_ok(v30, a7)) {
              return 0;
            }
            unint64_t v46 = v30 * a7;
            unsigned __int8 v47 = v44 + v45;
            BOOL v38 = __CFADD__(v46, v47);
            unint64_t v30 = v46 + v47;
            if (v38) {
              return 0;
            }
            ++v42;
            --v43;
          }
          while (v43);
          return v30;
        }
        return 0;
      }
      return 0;
    }
    goto LABEL_96;
  }
  if (v26 != 45)
  {
    if (v24 != v18)
    {
      unsigned __int8 v48 = a7 + 48;
      unsigned __int8 v49 = a7 + 55;
      unsigned __int8 v50 = a7 + 87;
      if (a7 > 10)
      {
        unsigned __int8 v48 = 58;
      }
      else
      {
        unsigned __int8 v50 = 97;
        unsigned __int8 v49 = 65;
      }
      if (v25)
      {
        unint64_t v30 = 0;
        while (1)
        {
          unsigned int v51 = *v25;
          if (v51 < 0x30 || v51 >= v48)
          {
            if (v51 < 0x41 || v51 >= v49)
            {
              uint64_t v35 = 0;
              if (v51 < 0x61 || v51 >= v50) {
                return v35;
              }
              char v52 = -87;
            }
            else
            {
              char v52 = -55;
            }
          }
          else
          {
            char v52 = -48;
          }
          if (!is_mul_ok(v30, a7)) {
            return 0;
          }
          unint64_t v53 = v30 * a7;
          unsigned __int8 v54 = v51 + v52;
          BOOL v38 = __CFADD__(v53, v54);
          unint64_t v30 = v53 + v54;
          if (v38) {
            return 0;
          }
          ++v25;
          if (!--result) {
            return v30;
          }
        }
      }
      return 0;
    }
    return 0;
  }
  if (result >= 1)
  {
    if (result != 1)
    {
      unsigned __int8 v27 = a7 + 48;
      unsigned __int8 v28 = a7 + 55;
      unsigned __int8 v29 = a7 + 87;
      if (a7 > 10)
      {
        unsigned __int8 v27 = 58;
      }
      else
      {
        unsigned __int8 v29 = 97;
        unsigned __int8 v28 = 65;
      }
      if (v25)
      {
        unint64_t v30 = 0;
        char v31 = v25 + 1;
        uint64_t v32 = result - 1;
        while (1)
        {
          unsigned int v33 = *v31;
          if (v33 < 0x30 || v33 >= v27)
          {
            if (v33 < 0x41 || v33 >= v28)
            {
              uint64_t v35 = 0;
              if (v33 < 0x61 || v33 >= v29) {
                return v35;
              }
              char v34 = -87;
            }
            else
            {
              char v34 = -55;
            }
          }
          else
          {
            char v34 = -48;
          }
          if (!is_mul_ok(v30, a7)) {
            return 0;
          }
          unint64_t v36 = v30 * a7;
          unsigned __int8 v37 = v33 + v34;
          BOOL v38 = v36 >= v37;
          unint64_t v30 = v36 - v37;
          if (!v38) {
            return 0;
          }
          ++v31;
          if (!--v32) {
            return v30;
          }
        }
      }
      return 0;
    }
    return 0;
  }
LABEL_95:
  __break(1u);
LABEL_96:
  __break(1u);
LABEL_97:
  __break(1u);
  return result;
}

uint64_t PBase64DecodeFunction.parametersCount.getter()
{
  return 0xFFFFFFFFLL;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> PBase64DecodeFunction.perform(with:arguments:)(SQLiter::SQLiteContext with, Swift::OpaquePointer arguments)
{
  uint64_t v5 = sub_10002572C(&qword_100222D08);
  __chkstk_darwin(v5 - 8);
  unsigned __int8 v7 = (char *)v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v8);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)v42 - v12;
  uint64_t v14 = *((void *)arguments._rawValue + 2);
  if ((unint64_t)(v14 - 1) > 1)
  {
    v45._uint64_t countAndFlagsBits = 0;
    v45._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(31);
    swift_bridgeObjectRelease();
    v21._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
    v21._object = (void *)0x80000001001B9540;
    SQLiteContext.setError(message:code:)(v21, -1);
  }
  else
  {
    uint64_t v43 = v11;
    uint64_t v44 = v10;
    uint64_t rawValue = (sqlite3_context *)with.context._rawValue;
    uint64_t v15 = (sqlite3_value *)*((void *)arguments._rawValue + 4);
    uint64_t v16 = SQLiteArgument.getBase64EncodedData()(v15);
    if (v17 >> 60 == 15)
    {
      uint64_t v18 = SQLiteArgument.getData()(v15);
      unint64_t v20 = v19;
      SQLiteContext.setData(_:destructor:)(v18, v19, (void (__cdecl **)(void *))1, rawValue);
      sub_10000A330(v18, v20);
    }
    else
    {
      uint64_t v22 = v16;
      unint64_t v23 = v17;
      v42[0] = v8;
      v42[1] = v2;
      static String.Encoding.utf8.getter();
      sub_10002C634();
      String.init(data:encoding:)();
      if (v24)
      {
        while (1)
        {
          uint64_t v25 = Data.init(base64Encoded:options:)();
          unint64_t v27 = v26;
          swift_bridgeObjectRelease();
          if (v27 >> 60 == 15) {
            break;
          }
          switch(v27 >> 62)
          {
            case 1uLL:
              uint64_t v28 = (int)v25;
              uint64_t v29 = v25 >> 32;
              goto LABEL_12;
            case 2uLL:
              uint64_t v28 = *(void *)(v25 + 16);
              uint64_t v29 = *(void *)(v25 + 24);
LABEL_12:
              if (v28 != v29) {
                goto LABEL_13;
              }
              goto LABEL_15;
            case 3uLL:
              goto LABEL_15;
            default:
              if ((v27 & 0xFF000000000000) == 0)
              {
LABEL_15:
                sub_10000A330(v25, v27);
                goto LABEL_16;
              }
LABEL_13:
              uint64_t v30 = sub_10002C634();
              sub_1000291B4(v30, v31);
              static String.Encoding.utf8.getter();
              String.init(data:encoding:)();
              unint64_t v23 = v27;
              uint64_t v22 = v25;
              if (!v32) {
                goto LABEL_17;
              }
              break;
          }
        }
      }
LABEL_16:
      uint64_t v25 = v22;
      unint64_t v27 = v23;
LABEL_17:
      if (v14 == 2)
      {
        SQLiteArgument.getStringNonNull()();
        if (v33)
        {
          sub_100026E28();
        }
        else
        {
          swift_bridgeObjectRetain();
          sub_10002C634();
          sub_100145420(v34);
          uint64_t v35 = v42[0];
          if (sub_100027BA4((uint64_t)v7, 1, v42[0]) == 1)
          {
            sub_1001454F0((uint64_t)v7);
            v45._uint64_t countAndFlagsBits = 0;
            v45._object = (void *)0xE000000000000000;
            _StringGuts.grow(_:)(23);
            swift_bridgeObjectRelease();
            v45._uint64_t countAndFlagsBits = 0xD000000000000011;
            v45._object = (void *)0x80000001001B9570;
            v36._uint64_t countAndFlagsBits = sub_10002C634();
            String.append(_:)(v36);
            swift_bridgeObjectRelease();
            v37._object = (void *)0x80000001001B9590;
            v37._uint64_t countAndFlagsBits = 0xD000000000000011;
            String.append(_:)(v37);
            SQLiteContext.setError(message:code:)(v45, -1);
            sub_100026E28();
            swift_bridgeObjectRelease();
          }
          else
          {
            swift_bridgeObjectRelease();
            uint64_t v39 = v43;
            uint64_t v38 = v44;
            (*(void (**)(uint64_t, char *, uint64_t))(v44 + 32))(v43, v7, v35);
            (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v13, v39, v35);
            uint64_t v40 = String.init(data:encoding:)();
            if (v41)
            {
              SQLiteContext.setString(_:destructor:)(v40, v41, (void (__cdecl **)(void *))1, rawValue);
              swift_bridgeObjectRelease();
            }
            else
            {
              SQLiteContext.setNull()();
            }
            sub_100026E28();
            (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v39, v35);
          }
        }
      }
      else
      {
        sub_100027BCC(v25, v27);
        SQLiteContext.setData(_:destructor:)(v25, v27, (void (__cdecl **)(void *))1, rawValue);
        sub_100026E28();
        sub_100026E28();
      }
    }
  }
}

uint64_t sub_100145420@<X0>(uint64_t a1@<X8>)
{
  Swift::String v2 = String.lowercased()();
  swift_bridgeObjectRelease();
  if (v2._countAndFlagsBits == 946238581 && v2._object == (void *)0xE400000000000000)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v4 & 1) == 0)
    {
      uint64_t v5 = 1;
      goto LABEL_9;
    }
  }
  static String.Encoding.utf8.getter();
  uint64_t v5 = 0;
LABEL_9:
  uint64_t v6 = type metadata accessor for String.Encoding();

  return sub_10002538C(a1, v5, 1, v6);
}

uint64_t sub_1001454F0(uint64_t a1)
{
  uint64_t v2 = sub_10002572C(&qword_100222D08);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for PBase64DecodeFunction()
{
  return self;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> PBGetFunction.perform(with:arguments:)(SQLiter::SQLiteContext with, Swift::OpaquePointer arguments)
{
  unint64_t v3 = *((void *)arguments._rawValue + 2);
  if (!v3)
  {
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  uint64_t v6 = SQLiteArgument.getUnsafeData()(*((sqlite3_value **)arguments._rawValue + 4));
  if (v7 >> 60 == 15)
  {
    sub_100122878();
    swift_allocError();
    *(void *)(v8 + 8) = 0;
    *(void *)(v8 + 16) = 0;
    *(void *)uint64_t v8 = 6;
    *(unsigned char *)(v8 + 24) = 4;
    swift_willThrow();
    return;
  }
  if (v3 < 2) {
    goto LABEL_49;
  }
  uint64_t v9 = v6;
  unint64_t v10 = v7;
  uint64_t v11 = sqlite3_value_text(*((sqlite3_value **)arguments._rawValue + 5));
  if (!v11)
  {
    sub_1001229F8();
    swift_allocError();
    *(void *)uint64_t v36 = 0xD000000000000024;
    *(void *)(v36 + 8) = 0x80000001001B95E0;
    *(unsigned char *)(v36 + 41) = 0;
    swift_willThrow();
    sub_10000A330(v9, v10);
    return;
  }
  uint64_t v12 = v11;
  uint64_t rawValue = (sqlite3_value **)arguments._rawValue;
  unint64_t v41 = v3;
  Swift::String v37 = (sqlite3_context *)with.context._rawValue;
  uint64_t v38 = v9;
  unint64_t v39 = v10;
  LOBYTE(v13) = *v11;
  if (!*v11) {
    goto LABEL_41;
  }
  unint64_t v14 = 0;
  char v15 = 0;
  uint64_t v16 = (uint64_t *)(v2 + 48);
  while (v13 < 0x30u)
  {
    if ((v15 & (v14 != 0)) == 0) {
      goto LABEL_41;
    }
    unint64_t v17 = 0;
LABEL_11:
    if ((v14 & 0x8000000000000000) != 0)
    {
LABEL_47:
      __break(1u);
      goto LABEL_48;
    }
    sub_10002C640();
    uint64_t v18 = *v16;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v16 = v18;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_100026E40();
      sub_100025D4C(v29);
    }
    unint64_t v20 = *(void *)(v18 + 16);
    if (v20 >= *(void *)(v18 + 24) >> 1)
    {
      sub_100128A68();
      sub_100025D4C(v30);
    }
    *(void *)(v18 + 16) = v20 + 1;
    uint64_t v21 = v18 + 24 * v20;
    *(void *)(v21 + 32) = v14;
    *(void *)(v21 + 40) = v17;
    *(unsigned char *)(v21 + 48) = 1;
    swift_endAccess();
    if (!(_BYTE)v13) {
      goto LABEL_41;
    }
    char v15 = 0;
LABEL_18:
    int v22 = *++v12;
    LOBYTE(v13) = v22;
    if (!v22) {
      goto LABEL_41;
    }
  }
  if (v13 > 0x39u)
  {
    if (v13 == 105)
    {
      unint64_t v14 = 0;
      char v15 = 1;
      goto LABEL_18;
    }
    if ((v15 & (v14 != 0)) == 0) {
      goto LABEL_41;
    }
    unint64_t v17 = 0;
    LOBYTE(v13) = 1;
    goto LABEL_11;
  }
  unint64_t v17 = 0;
  do
  {
    if (!is_mul_ok(v17, 0xAuLL))
    {
      __break(1u);
LABEL_46:
      __break(1u);
      goto LABEL_47;
    }
    BOOL v23 = __CFADD__(10 * v17, (v13 - 48));
    unint64_t v17 = 10 * v17 + (v13 - 48);
    if (v23) {
      goto LABEL_46;
    }
    int v24 = *++v12;
    int v13 = v24;
  }
  while ((v24 - 58) > 0xF5u);
  if (v13 == 105)
  {
    char v15 = 1;
    unint64_t v14 = v17;
    goto LABEL_18;
  }
  if ((v15 & 1) == 0)
  {
    if (!v17) {
      goto LABEL_41;
    }
    if ((v17 & 0x8000000000000000) != 0) {
      goto LABEL_51;
    }
    sub_10002C640();
    uint64_t v25 = *v16;
    char v26 = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v16 = v25;
    if ((v26 & 1) == 0)
    {
      sub_100026E40();
      sub_100025D4C(v31);
    }
    unint64_t v27 = *(void *)(v25 + 16);
    if (v27 >= *(void *)(v25 + 24) >> 1)
    {
      sub_100128A68();
      sub_100025D4C(v32);
    }
    *(void *)(v25 + 16) = v27 + 1;
    uint64_t v28 = v25 + 24 * v27;
    *(void *)(v28 + 32) = v17;
    *(void *)(v28 + 40) = 0;
    *(unsigned char *)(v28 + 48) = 0;
    swift_endAccess();
    char v15 = 0;
    if (!v13) {
      goto LABEL_41;
    }
    goto LABEL_18;
  }
  if (v14) {
    goto LABEL_11;
  }
LABEL_41:
  if (v41 < 3)
  {
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  uint64_t v33 = sqlite3_value_text(rawValue[6]);
  if (v33)
  {
    char v34 = *v33;
    swift_beginAccess();
    uint64_t v35 = *(void *)(v2 + 48);
    swift_bridgeObjectRetain();
    sub_100149774(v37, v38, v39, v35, v34);
    swift_bridgeObjectRelease();
    *(void *)(v2 + 48) = _swiftEmptyArrayStorage;
    swift_bridgeObjectRelease();
    sub_10000A330(v38, v39);
    return;
  }
LABEL_52:
  __break(1u);
}

uint64_t PBGetFunction.__allocating_init(_:)()
{
  *(void *)(swift_allocObject() + 48) = _swiftEmptyArrayStorage;
  return SQLiteSchematizerFunction.init(_:)();
}

uint64_t PBGetFunction.init(_:)()
{
  *(void *)(v0 + 48) = _swiftEmptyArrayStorage;
  return SQLiteSchematizerFunction.init(_:)();
}

uint64_t sub_10014599C()
{
  return swift_bridgeObjectRelease();
}

uint64_t PBGetFunction.deinit()
{
  uint64_t v0 = SQLiteBaseFunction.deinit();
  swift_weakDestroy();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t PBGetFunction.__deallocating_deinit()
{
  uint64_t v0 = PBGetFunction.deinit();

  return _swift_deallocClassInstance(v0, 56, 7);
}

uint64_t type metadata accessor for PBGetFunction()
{
  return self;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> PGetFunction.perform(with:arguments:)(SQLiter::SQLiteContext with, Swift::OpaquePointer arguments)
{
  unint64_t v3 = *((void *)arguments._rawValue + 2);
  if (!v3)
  {
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v5 = (sqlite3_value *)*((void *)arguments._rawValue + 4);
  if (SQLiteArgument.isNull.getter(v5))
  {
    SQLiteContext.setNull()();
    return;
  }
  sub_1001228E8();
  if (!v2)
  {
    SQLiteBaseSchematizer.getSQLiteBridge()();
    uint64_t v7 = v6;
    swift_release();
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v9 = (*(uint64_t (**)(sqlite3_value *, uint64_t, uint64_t))(v7 + 24))(v5, ObjectType, v7);
    uint64_t v11 = v10;
    uint64_t v13 = v12;
    uint64_t v15 = v14;
    swift_unknownObjectRelease();
    if (v3 >= 2)
    {
      Swift::String v16 = SQLiteArgument.getStringNonNull()();
      if (v17)
      {
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
      }
      else
      {
        sub_1001353A8(v16._countAndFlagsBits, (uint64_t)v16._object, (sqlite3_context *)with.context._rawValue, v9, v11, v13, v15);
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
      }
      return;
    }
LABEL_11:
    __break(1u);
  }
}

uint64_t type metadata accessor for PGetFunction()
{
  return self;
}

uint64_t sub_100145BB8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void (*v19)(void *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v25;
  char v26;
  uint64_t v27;
  BOOL v28;
  Swift::Int v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  char v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t result;
  uint64_t v40;
  int64_t v41;
  int64_t v44;
  uint64_t v45;
  void v46[5];
  uint64_t v47;

  uint64_t v5 = v4;
  uint64_t v40 = a2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(a2 + 56);
  unint64_t v41 = (unint64_t)(v7 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v10 = 0;
  if (!v9) {
    goto LABEL_5;
  }
LABEL_4:
  unsigned __int8 v47 = (v9 - 1) & v9;
  for (unint64_t i = __clz(__rbit64(v9)) | (v10 << 6); ; unint64_t i = __clz(__rbit64(v13)) + (v10 << 6))
  {
    uint64_t v15 = (uint64_t *)(*(void *)(a2 + 48) + 16 * i);
    uint64_t v17 = *v15;
    uint64_t v16 = v15[1];
    uint64_t ObjectType = swift_getObjectType();
    unint64_t v19 = *(void (**)(void *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 40);
    swift_bridgeObjectRetain_n();
    v19(v46, v17, v16, ObjectType, a4);
    if (v5)
    {
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (uint64_t)a1;
    }
    unint64_t v20 = MessageSchemaModel.init(_:dontCopy:)(v46, 0);
    int v22 = v21;
    Swift::String v45 = v23;
    uint64_t v44 = v10;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v46[0] = a1;
    uint64_t v25 = sub_1000287F0(v17, v16);
    unint64_t v27 = a1[2];
    uint64_t v28 = (v26 & 1) == 0;
    uint64_t v29 = v27 + v28;
    if (__OFADD__(v27, v28)) {
      break;
    }
    uint64_t v30 = v25;
    uint64_t v31 = v26;
    sub_10002572C(&qword_100222A10);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v29))
    {
      uint64_t v32 = sub_1000287F0(v17, v16);
      if ((v31 & 1) != (v33 & 1)) {
        goto LABEL_40;
      }
      uint64_t v30 = v32;
    }
    a1 = (void *)v46[0];
    if (v31)
    {
      char v34 = (uint64_t *)(*(void *)(v46[0] + 56) + 24 * v30);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *char v34 = v20;
      v34[1] = v22;
      v34[2] = v45;
    }
    else
    {
      *(void *)(v46[0] + 8 * (v30 >> 6) + 64) |= 1 << v30;
      uint64_t v35 = (uint64_t *)(a1[6] + 16 * v30);
      *uint64_t v35 = v17;
      v35[1] = v16;
      uint64_t v36 = (uint64_t *)(a1[7] + 24 * v30);
      *uint64_t v36 = v20;
      v36[1] = v22;
      v36[2] = v45;
      Swift::String v37 = a1[2];
      BOOL v12 = __OFADD__(v37, 1);
      uint64_t v38 = v37 + 1;
      if (v12) {
        goto LABEL_37;
      }
      a1[2] = v38;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    int64_t v10 = v44;
    uint64_t v5 = 0;
    unint64_t v9 = v47;
    if (v47) {
      goto LABEL_4;
    }
LABEL_5:
    BOOL v12 = __OFADD__(v10++, 1);
    if (v12) {
      goto LABEL_38;
    }
    if (v10 >= v41) {
      goto LABEL_34;
    }
    unint64_t v13 = *(void *)(v40 + 8 * v10);
    if (!v13)
    {
      int64_t v14 = v10 + 1;
      if (v10 + 1 >= v41) {
        goto LABEL_34;
      }
      unint64_t v13 = *(void *)(v40 + 8 * v14);
      if (v13) {
        goto LABEL_16;
      }
      int64_t v14 = v10 + 2;
      if (v10 + 2 >= v41) {
        goto LABEL_34;
      }
      unint64_t v13 = *(void *)(v40 + 8 * v14);
      if (v13) {
        goto LABEL_16;
      }
      int64_t v14 = v10 + 3;
      if (v10 + 3 >= v41) {
        goto LABEL_34;
      }
      unint64_t v13 = *(void *)(v40 + 8 * v14);
      if (v13)
      {
LABEL_16:
        int64_t v10 = v14;
        goto LABEL_17;
      }
      int64_t v14 = v10 + 4;
      if (v10 + 4 < v41)
      {
        unint64_t v13 = *(void *)(v40 + 8 * v14);
        if (!v13)
        {
          while (1)
          {
            int64_t v10 = v14 + 1;
            if (__OFADD__(v14, 1)) {
              goto LABEL_39;
            }
            if (v10 >= v41) {
              goto LABEL_34;
            }
            unint64_t v13 = *(void *)(v40 + 8 * v10);
            ++v14;
            if (v13) {
              goto LABEL_17;
            }
          }
        }
        goto LABEL_16;
      }
LABEL_34:
      swift_release();
      swift_unknownObjectRelease();
      return (uint64_t)a1;
    }
LABEL_17:
    unsigned __int8 v47 = (v13 - 1) & v13;
  }
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_100145F74(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void (*v21)(void *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v28;
  char v29;
  uint64_t v30;
  BOOL v31;
  Swift::Int v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  void v42[5];
  uint64_t v43;
  int64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void v51[3];
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  uint64_t v5 = v4;
  unsigned __int8 v47 = a2;
  unsigned __int8 v48 = a3;
  uint64_t v7 = *(void *)(a2 + 56);
  uint64_t v43 = a2 + 56;
  uint64_t v8 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & v7;
  unint64_t v46 = a4;
  uint64_t v44 = (unint64_t)(v8 + 63) >> 6;
  Swift::String v45 = a4 + 48;
  swift_bridgeObjectRetain();
  int64_t v11 = 0;
  if (!v10) {
    goto LABEL_5;
  }
LABEL_4:
  unsigned __int8 v50 = (v10 - 1) & v10;
  for (unint64_t i = __clz(__rbit64(v10)) | (v11 << 6); ; unint64_t i = __clz(__rbit64(v14)) + (v11 << 6))
  {
    uint64_t v16 = (uint64_t *)(*(void *)(v47 + 48) + 16 * i);
    uint64_t v18 = *v16;
    uint64_t v17 = v16[1];
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v20 = v46;
    uint64_t v21 = *(void (**)(void *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v46 + 48);
    swift_bridgeObjectRetain_n();
    v21(v51, v18, v17, ObjectType, v20);
    if (v5)
    {
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (uint64_t)a1;
    }
    unsigned __int8 v54 = Dictionary.init(dictionaryLiteral:)();
    int v22 = v52;
    BOOL v23 = v53;
    sub_10001B620(v51, v52);
    int v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 16))(v22, v23);
    __chkstk_darwin(v24);
    uint64_t v42[2] = &v54;
    v42[3] = v51;
    sub_10012149C((uint64_t)sub_1001218F8, (uint64_t)v42, v24);
    unsigned __int8 v49 = 0;
    uint64_t v25 = v11;
    swift_bridgeObjectRelease();
    char v26 = v54;
    sub_10001CA50((uint64_t)v51);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v51[0] = a1;
    uint64_t v28 = sub_1000287F0(v18, v17);
    uint64_t v30 = a1[2];
    uint64_t v31 = (v29 & 1) == 0;
    uint64_t v32 = v30 + v31;
    if (__OFADD__(v30, v31)) {
      break;
    }
    uint64_t v33 = v28;
    char v34 = v29;
    sub_10002572C(&qword_100222A20);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v32))
    {
      uint64_t v35 = sub_1000287F0(v18, v17);
      if ((v34 & 1) != (v36 & 1)) {
        goto LABEL_40;
      }
      uint64_t v33 = v35;
    }
    a1 = (void *)v51[0];
    if (v34)
    {
      Swift::String v37 = *(void *)(v51[0] + 56);
      swift_bridgeObjectRelease();
      *(void *)(v37 + 8 * v33) = v26;
    }
    else
    {
      *(void *)(v51[0] + 8 * (v33 >> 6) + 64) |= 1 << v33;
      uint64_t v38 = (uint64_t *)(a1[6] + 16 * v33);
      *uint64_t v38 = v18;
      v38[1] = v17;
      *(void *)(a1[7] + 8 * v33) = v26;
      unint64_t v39 = a1[2];
      BOOL v13 = __OFADD__(v39, 1);
      uint64_t v40 = v39 + 1;
      if (v13) {
        goto LABEL_37;
      }
      a1[2] = v40;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    int64_t v11 = v25;
    uint64_t v5 = v49;
    unint64_t v10 = v50;
    if (v50) {
      goto LABEL_4;
    }
LABEL_5:
    BOOL v13 = __OFADD__(v11++, 1);
    if (v13) {
      goto LABEL_38;
    }
    if (v11 >= v44) {
      goto LABEL_34;
    }
    unint64_t v14 = *(void *)(v43 + 8 * v11);
    if (!v14)
    {
      int64_t v15 = v11 + 1;
      if (v11 + 1 >= v44) {
        goto LABEL_34;
      }
      unint64_t v14 = *(void *)(v43 + 8 * v15);
      if (v14) {
        goto LABEL_16;
      }
      int64_t v15 = v11 + 2;
      if (v11 + 2 >= v44) {
        goto LABEL_34;
      }
      unint64_t v14 = *(void *)(v43 + 8 * v15);
      if (v14) {
        goto LABEL_16;
      }
      int64_t v15 = v11 + 3;
      if (v11 + 3 >= v44) {
        goto LABEL_34;
      }
      unint64_t v14 = *(void *)(v43 + 8 * v15);
      if (v14)
      {
LABEL_16:
        int64_t v11 = v15;
        goto LABEL_17;
      }
      int64_t v15 = v11 + 4;
      if (v11 + 4 < v44)
      {
        unint64_t v14 = *(void *)(v43 + 8 * v15);
        if (!v14)
        {
          while (1)
          {
            int64_t v11 = v15 + 1;
            if (__OFADD__(v15, 1)) {
              goto LABEL_39;
            }
            if (v11 >= v44) {
              goto LABEL_34;
            }
            unint64_t v14 = *(void *)(v43 + 8 * v11);
            ++v15;
            if (v14) {
              goto LABEL_17;
            }
          }
        }
        goto LABEL_16;
      }
LABEL_34:
      swift_release();
      swift_unknownObjectRelease();
      return (uint64_t)a1;
    }
LABEL_17:
    unsigned __int8 v50 = (v14 - 1) & v14;
  }
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t *SchemaStoreModel.emptyStore.unsafeMutableAddressor()
{
  if (qword_100220888 != -1) {
    swift_once();
  }
  return &static SchemaStoreModel.emptyStore;
}

uint64_t SchemaStoreModel.init(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 8))(ObjectType, a2);
  uint64_t v9 = (void *)Dictionary.init(dictionaryLiteral:)();
  swift_unknownObjectRetain();
  uint64_t v10 = sub_100145BB8(v9, v8, a1, a2);
  if (!v4)
  {
    uint64_t v3 = v10;
    swift_bridgeObjectRelease();
    int64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 16);
    swift_bridgeObjectRetain();
    uint64_t v12 = v11(ObjectType, a2);
    BOOL v13 = (void *)Dictionary.init(dictionaryLiteral:)();
    swift_unknownObjectRetain();
    sub_100145F74(v13, v12, a1, a2);
    swift_bridgeObjectRelease();
  }
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_1001465A0()
{
  uint64_t v0 = Dictionary.init(dictionaryLiteral:)();
  uint64_t result = Dictionary.init(dictionaryLiteral:)();
  static SchemaStoreModel.emptyStore = v0;
  unk_100236CF0 = result;
  return result;
}

uint64_t static SchemaStoreModel.emptyStore.getter()
{
  if (qword_100220888 != -1) {
    swift_once();
  }
  uint64_t v0 = static SchemaStoreModel.emptyStore;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t sub_10014668C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x73616D65686373 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x736D756E65 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_100146774(char a1)
{
  if (a1) {
    return 0x736D756E65;
  }
  else {
    return 0x73616D65686373;
  }
}

uint64_t sub_1001467A8()
{
  return sub_100146774(*v0);
}

uint64_t sub_1001467B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10014668C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001467D8(uint64_t a1)
{
  unint64_t v2 = sub_100146AE8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100146814(uint64_t a1)
{
  unint64_t v2 = sub_100146AE8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t SchemaStoreModel.init(from:)(void *a1)
{
  sub_10002572C(&qword_1002230D8);
  sub_100020C48();
  __chkstk_darwin(v3);
  uint64_t v4 = a1[3];
  sub_10001B620(a1, v4);
  sub_100146AE8();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    sub_10001CA50((uint64_t)a1);
  }
  else
  {
    sub_10002572C(&qword_1002230E8);
    sub_100146B80(&qword_1002230F0, &qword_1002230E8, (void (*)(void))sub_100146B34);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v4 = v8;
    if (!v8) {
      uint64_t v4 = Dictionary.init(dictionaryLiteral:)();
    }
    sub_10002572C(&qword_100223100);
    sub_100146B80(&qword_100223108, &qword_100223100, (void (*)(void))sub_100146C00);
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    if (!v8) {
      Dictionary.init(dictionaryLiteral:)();
    }
    uint64_t v6 = sub_10002C660();
    v7(v6);
    swift_bridgeObjectRetain();
    sub_10001CA50((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v4;
}

unint64_t sub_100146AE8()
{
  unint64_t result = qword_1002230E0;
  if (!qword_1002230E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002230E0);
  }
  return result;
}

unint64_t sub_100146B34()
{
  unint64_t result = qword_1002230F8;
  if (!qword_1002230F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002230F8);
  }
  return result;
}

uint64_t sub_100146B80(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1000371D4(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100146C00()
{
  unint64_t result = qword_100223110;
  if (!qword_100223110)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100223110);
  }
  return result;
}

uint64_t SchemaStoreModel.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = sub_10002572C(&qword_100223118);
  sub_100020C48();
  uint64_t v9 = v8;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001B620(a1, a1[3]);
  sub_100146AE8();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if (!*(void *)(a2 + 16)
    || (uint64_t v16 = a2,
        char v15 = 0,
        sub_10002572C(&qword_1002230E8),
        sub_100146E10(&qword_100223120, &qword_1002230E8, (void (*)(void))sub_100146E90),
        sub_100025D58(),
        KeyedEncodingContainer.encode<A>(_:forKey:)(),
        !v3))
  {
    if (*(void *)(a3 + 16))
    {
      uint64_t v16 = a3;
      char v15 = 1;
      sub_10002572C(&qword_100223100);
      sub_100146E10(&qword_100223130, &qword_100223100, (void (*)(void))sub_100146EDC);
      sub_100025D58();
      KeyedEncodingContainer.encode<A>(_:forKey:)();
    }
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v7);
}

uint64_t sub_100146E10(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1000371D4(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100146E90()
{
  unint64_t result = qword_100223128;
  if (!qword_100223128)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100223128);
  }
  return result;
}

unint64_t sub_100146EDC()
{
  unint64_t result = qword_100223138;
  if (!qword_100223138)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100223138);
  }
  return result;
}

void static SchemaStoreModel.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_100120E4C(a1, a3);
  if (v6)
  {
    sub_1001210EC(a2, a4);
  }
}

uint64_t sub_100146F80@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = SchemaStoreModel.init(from:)(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_100146FAC(void *a1)
{
  return SchemaStoreModel.encode(to:)(a1, *v1, v1[1]);
}

void sub_100146FC8(uint64_t *a1, uint64_t *a2)
{
}

uint64_t destroy for SchemaStoreModel()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *_s11Schematizer16SchemaStoreModelVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for SchemaStoreModel(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for SchemaStoreModel(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for SchemaStoreModel()
{
  return &type metadata for SchemaStoreModel;
}

unsigned char *storeEnumTagSinglePayload for SchemaStoreModel.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001471D0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SchemaStoreModel.CodingKeys()
{
  return &type metadata for SchemaStoreModel.CodingKeys;
}

unint64_t sub_10014720C()
{
  unint64_t result = qword_100223140;
  if (!qword_100223140)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100223140);
  }
  return result;
}

unint64_t sub_10014725C()
{
  unint64_t result = qword_100223148;
  if (!qword_100223148)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100223148);
  }
  return result;
}

unint64_t sub_1001472AC()
{
  unint64_t result = qword_100223150;
  if (!qword_100223150)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100223150);
  }
  return result;
}

uint64_t OneOfValue.value.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100032AD8(v1 + 40, a1);
}

uint64_t destroy for OneOfValue(uint64_t a1)
{
  sub_10001CA50(a1);
  uint64_t result = a1 + 40;
  switch(*(unsigned char *)(a1 + 97))
  {
    case 7:
      sub_10001CA50(result);
      uint64_t v3 = *(void *)(a1 + 80);
      uint64_t v4 = *(void *)(a1 + 88);
      char v5 = *(unsigned char *)(a1 + 96);
      uint64_t result = sub_1001230F4(v3, v4, v5);
      break;
    case 8:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    case 9:
      uint64_t v6 = *(void *)(a1 + 40);
      unint64_t v7 = *(void *)(a1 + 48);
      uint64_t result = sub_1000291B4(v6, v7);
      break;
    case 0xA:
      uint64_t result = swift_unknownObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t initializeWithCopy for OneOfValue(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  char v5 = (_OWORD *)(a1 + 40);
  uint64_t v6 = (_OWORD *)(a2 + 40);
  switch(*(unsigned char *)(a2 + 97))
  {
    case 7:
      long long v7 = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 64) = v7;
      (**(void (***)(_OWORD *, _OWORD *))(v7 - 8))(v5, v6);
      uint64_t v8 = *(void *)(a2 + 80);
      uint64_t v9 = *(void *)(a2 + 88);
      char v10 = *(unsigned char *)(a2 + 96);
      sub_100123500(v8, v9, v10);
      *(void *)(a1 + 80) = v8;
      *(void *)(a1 + 88) = v9;
      *(unsigned char *)(a1 + 96) = v10;
      char v11 = 7;
      goto LABEL_6;
    case 8:
      uint64_t v13 = *(void *)(a2 + 48);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(void *)(a1 + 48) = v13;
      *(unsigned char *)(a1 + 97) = 8;
      swift_bridgeObjectRetain();
      break;
    case 9:
      uint64_t v15 = *(void *)(a2 + 40);
      unint64_t v14 = *(void *)(a2 + 48);
      sub_100027BCC(v15, v14);
      *(void *)(a1 + 40) = v15;
      *(void *)(a1 + 48) = v14;
      char v11 = 9;
LABEL_6:
      *(unsigned char *)(a1 + 97) = v11;
      break;
    case 0xA:
      *(_OWORD *)(a1 + 40) = *v6;
      *(unsigned char *)(a1 + 97) = 10;
      swift_unknownObjectRetain();
      break;
    default:
      long long v12 = *(_OWORD *)(a2 + 56);
      *char v5 = *v6;
      *(_OWORD *)(a1 + 56) = v12;
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
      *(_OWORD *)(a1 + 82) = *(_OWORD *)(a2 + 82);
      break;
  }
  return a1;
}

uint64_t assignWithCopy for OneOfValue(uint64_t a1, uint64_t a2)
{
  sub_100123630((uint64_t *)a1, (uint64_t *)a2);
  if (a1 != a2)
  {
    long long v4 = (_OWORD *)(a2 + 40);
    sub_10001B840(a1 + 40);
    switch(*(unsigned char *)(a2 + 97))
    {
      case 7:
        uint64_t v5 = *(void *)(a2 + 64);
        *(void *)(a1 + 64) = v5;
        *(void *)(a1 + 72) = *(void *)(a2 + 72);
        (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 40, a2 + 40);
        uint64_t v6 = *(void *)(a2 + 80);
        uint64_t v7 = *(void *)(a2 + 88);
        char v8 = *(unsigned char *)(a2 + 96);
        sub_100123500(v6, v7, v8);
        *(void *)(a1 + 80) = v6;
        *(void *)(a1 + 88) = v7;
        *(unsigned char *)(a1 + 96) = v8;
        char v9 = 7;
        goto LABEL_7;
      case 8:
        *(void *)(a1 + 40) = *(void *)(a2 + 40);
        *(void *)(a1 + 48) = *(void *)(a2 + 48);
        *(unsigned char *)(a1 + 97) = 8;
        swift_bridgeObjectRetain();
        break;
      case 9:
        uint64_t v14 = *(void *)(a2 + 40);
        unint64_t v13 = *(void *)(a2 + 48);
        sub_100027BCC(v14, v13);
        *(void *)(a1 + 40) = v14;
        *(void *)(a1 + 48) = v13;
        char v9 = 9;
LABEL_7:
        *(unsigned char *)(a1 + 97) = v9;
        break;
      case 0xA:
        *(_OWORD *)(a1 + 40) = *v4;
        *(unsigned char *)(a1 + 97) = 10;
        swift_unknownObjectRetain();
        break;
      default:
        long long v10 = *v4;
        long long v11 = *(_OWORD *)(a2 + 56);
        long long v12 = *(_OWORD *)(a2 + 72);
        *(_OWORD *)(a1 + 82) = *(_OWORD *)(a2 + 82);
        *(_OWORD *)(a1 + 56) = v11;
        *(_OWORD *)(a1 + 72) = v12;
        *(_OWORD *)(a1 + 40) = v10;
        break;
    }
  }
  return a1;
}

void *initializeWithTake for OneOfValue(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x62uLL);
}

uint64_t assignWithTake for OneOfValue(uint64_t a1, uint64_t a2)
{
  sub_10001CA50(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  if (a1 != a2)
  {
    sub_10001B840(a1 + 40);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 82) = *(_OWORD *)(a2 + 82);
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for OneOfValue(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 98))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OneOfValue(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 96) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 98) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 98) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OneOfValue()
{
  return &type metadata for OneOfValue;
}

uint64_t type metadata accessor for ProtoEntity()
{
  return self;
}

uint64_t sub_100147814(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 7630441;
  unint64_t v3 = 0xE300000000000000;
  uint64_t v4 = a1;
  uint64_t v5 = 7630441;
  switch(v4)
  {
    case 1:
      unint64_t v3 = 0xE500000000000000;
      uint64_t v5 = 0x3436746E69;
      break;
    case 2:
      unint64_t v3 = 0xE400000000000000;
      uint64_t v5 = 1953393013;
      break;
    case 3:
      unint64_t v3 = 0xE600000000000000;
      uint64_t v5 = 0x3436746E6975;
      break;
    case 4:
      unint64_t v3 = 0xE500000000000000;
      uint64_t v5 = 0x74616F6C66;
      break;
    case 5:
      unint64_t v3 = 0xE600000000000000;
      uint64_t v5 = 0x656C62756F64;
      break;
    case 6:
      unint64_t v3 = 0xE400000000000000;
      uint64_t v5 = 1819242338;
      break;
    case 7:
      unint64_t v3 = 0xE400000000000000;
      uint64_t v5 = 1836412517;
      break;
    case 8:
      unint64_t v3 = 0xE400000000000000;
      uint64_t v5 = 1635017060;
      break;
    case 9:
      unint64_t v3 = 0xE600000000000000;
      uint64_t v5 = 0x676E69727473;
      break;
    case 10:
      unint64_t v3 = 0xE600000000000000;
      uint64_t v5 = 0x616D65686373;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE300000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xE500000000000000;
      uint64_t v2 = 0x3436746E69;
      break;
    case 2:
      unint64_t v6 = 0xE400000000000000;
      uint64_t v2 = 1953393013;
      break;
    case 3:
      unint64_t v6 = 0xE600000000000000;
      uint64_t v2 = 0x3436746E6975;
      break;
    case 4:
      unint64_t v6 = 0xE500000000000000;
      uint64_t v2 = 0x74616F6C66;
      break;
    case 5:
      unint64_t v6 = 0xE600000000000000;
      uint64_t v2 = 0x656C62756F64;
      break;
    case 6:
      unint64_t v6 = 0xE400000000000000;
      uint64_t v2 = 1819242338;
      break;
    case 7:
      unint64_t v6 = 0xE400000000000000;
      uint64_t v2 = 1836412517;
      break;
    case 8:
      unint64_t v6 = 0xE400000000000000;
      uint64_t v2 = 1635017060;
      break;
    case 9:
      unint64_t v6 = 0xE600000000000000;
      uint64_t v2 = 0x676E69727473;
      break;
    case 10:
      unint64_t v6 = 0xE600000000000000;
      uint64_t v2 = 0x616D65686373;
      break;
    default:
      break;
  }
  if (v5 == v2 && v3 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int sub_100147A98(Swift::UInt8 a1)
{
  return Hasher._finalize()();
}

Swift::Int sub_100147AE0(uint64_t a1)
{
  return sub_100147AF8(a1, (void (*)(uint64_t))PGetManyColumn.rawValue.getter);
}

Swift::Int sub_100147AF8(uint64_t a1, void (*a2)(uint64_t))
{
  return Hasher._finalize()();
}

uint64_t sub_100147B50()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100147C9C()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100147D84(uint64_t a1, Swift::UInt8 a2)
{
  return Hasher._finalize()();
}

Swift::Int sub_100147DC8(uint64_t a1, uint64_t a2)
{
  return sub_100147DE0(a1, a2, (void (*)(uint64_t))PGetManyColumn.rawValue.getter);
}

Swift::Int sub_100147DE0(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  return Hasher._finalize()();
}

Schematizer::TypeModel_optional __swiftcall TypeModel.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1002021D8, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0xB) {
    return (Schematizer::TypeModel_optional)11;
  }
  else {
    return (Schematizer::TypeModel_optional)v3;
  }
}

uint64_t TypeModel.rawValue.getter(char a1)
{
  uint64_t result = 7630441;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x3436746E69;
      break;
    case 2:
      uint64_t result = 1953393013;
      break;
    case 3:
      uint64_t result = 0x3436746E6975;
      break;
    case 4:
      uint64_t result = 0x74616F6C66;
      break;
    case 5:
      uint64_t result = 0x656C62756F64;
      break;
    case 6:
      uint64_t result = 1819242338;
      break;
    case 7:
      uint64_t result = 1836412517;
      break;
    case 8:
      uint64_t result = 1635017060;
      break;
    case 9:
      uint64_t result = 0x676E69727473;
      break;
    case 10:
      uint64_t result = 0x616D65686373;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100147F98(unsigned __int8 *a1, char *a2)
{
  return sub_100147814(*a1, *a2);
}

unint64_t sub_100147FA8()
{
  unint64_t result = qword_100223200;
  if (!qword_100223200)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100223200);
  }
  return result;
}

Swift::Int sub_100147FF4()
{
  return sub_100147AF8(*v0, (void (*)(uint64_t))TypeModel.rawValue.getter);
}

uint64_t sub_100148024()
{
  return sub_100147B50();
}

Swift::Int sub_10014802C(uint64_t a1)
{
  return sub_100147DE0(a1, *v1, (void (*)(uint64_t))TypeModel.rawValue.getter);
}

Schematizer::TypeModel_optional sub_10014805C@<W0>(Swift::String *a1@<X0>, Schematizer::TypeModel_optional *a2@<X8>)
{
  result.int value = TypeModel.init(rawValue:)(*a1).value;
  a2->int value = result.value;
  return result;
}

uint64_t sub_10014808C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = TypeModel.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1001480B8()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_100148118()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t getEnumTagSinglePayload for TypeModel(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF6)
  {
    if (a2 + 10 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 10) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 11;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xB;
  int v5 = v6 - 11;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for TypeModel(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 10 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 10) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF6) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF5)
  {
    unsigned int v6 = ((a2 - 246) >> 8) + 1;
    *uint64_t result = a2 + 10;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001482BCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 10;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TypeModel()
{
  return &type metadata for TypeModel;
}

unint64_t sub_1001482F4()
{
  unint64_t result = qword_100223208;
  if (!qword_100223208)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100223208);
  }
  return result;
}

void sub_100148340(uint64_t a1)
{
  int v37 = a1;
  uint64_t v3 = *v1;
  if (!*(void *)(*v1 + 16))
  {
    unsigned int v17 = a1;
    sub_10013A4CC();
    uint64_t v18 = *(void *)(*v1 + 16);
    sub_10013A570(v18);
    uint64_t v19 = *v1;
    *(void *)(v19 + 16) = v18 + 1;
    uint64_t v20 = (int32x2_t *)(v19 + 8 * v18);
    int32x2_t v21 = vdup_n_s32(v17);
    goto LABEL_25;
  }
  unint64_t v4 = (unint64_t)&v36;
  __chkstk_darwin(a1);
  v35[2] = &v37;
  swift_bridgeObjectRetain();
  unint64_t v5 = sub_1001489FC((uint64_t (*)(uint64_t *))sub_100149754, (uint64_t)v35, v3);
  uint64_t v7 = v6;
  swift_bridgeObjectRelease();
  if (v7)
  {
    unint64_t v5 = *v1;
    unint64_t v4 = *(void *)(*v1 + 16);
    if (v4)
    {
      uint64_t v7 = v4 - 1;
      unint64_t v22 = v5 + 8 * (v4 - 1);
      int v23 = *(_DWORD *)(v22 + 36);
      LODWORD(v3) = v23 + 1;
      if (!__OFADD__(v23, 1))
      {
        unsigned int v24 = v37;
        if (v3 == v37)
        {
          int v2 = *(_DWORD *)(v22 + 32);
          if ((int)v3 >= v2)
          {
            if (swift_isUniquelyReferenced_nonNull_native())
            {
LABEL_22:
              if (v4 <= *(void *)(v5 + 16))
              {
                unint64_t v25 = v5 + 8 * v7;
                *(_DWORD *)(v25 + 32) = v2;
                *(_DWORD *)(v25 + 36) = v3;
                *uint64_t v1 = v5;
                return;
              }
              __break(1u);
              goto LABEL_54;
            }
LABEL_52:
            sub_1001496BC(v5);
            unint64_t v5 = v31;
            goto LABEL_22;
          }
LABEL_51:
          __break(1u);
          goto LABEL_52;
        }
        sub_10013A4CC();
        uint64_t v26 = *(void *)(*v1 + 16);
        sub_10013A570(v26);
        uint64_t v19 = *v1;
        *(void *)(v19 + 16) = v26 + 1;
        uint64_t v20 = (int32x2_t *)(v19 + 8 * v26);
        int32x2_t v21 = vdup_n_s32(v24);
LABEL_25:
        v20[4] = v21;
        *uint64_t v1 = v19;
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_44;
  }
  LODWORD(v3) = v37;
  if (!v5)
  {
    uint64_t v7 = *v1;
    unint64_t v8 = *(void *)(*v1 + 16);
    goto LABEL_28;
  }
  unint64_t v4 = v5 - 1;
  if (__OFSUB__(v5, 1))
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  if ((v4 & 0x8000000000000000) != 0)
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  uint64_t v7 = *v1;
  unint64_t v8 = *(void *)(*v1 + 16);
  if (v4 >= v8)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  uint64_t v9 = v7 + 32;
  long long v10 = (int *)(v7 + 32 + 8 * v4);
  int v11 = v10[1];
  BOOL v12 = __OFADD__(v11, 1);
  int v13 = v11 + 1;
  if (v12)
  {
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  if (v13 != v37)
  {
    if ((v5 & 0x8000000000000000) == 0)
    {
LABEL_28:
      if (v5 < v8)
      {
        int v27 = *(_DWORD *)(v7 + 32 + 8 * v5);
        BOOL v12 = __OFSUB__(v27, 1);
        int v28 = v27 - 1;
        if (!v12)
        {
          if (v28 != v37)
          {
            sub_1001494BC(v5, v5, v37 | ((unint64_t)v37 << 32));
            return;
          }
          unint64_t v4 = *(unsigned int *)(v7 + 32 + 8 * v5 + 4);
          if ((int)v4 >= v37)
          {
            if (swift_isUniquelyReferenced_nonNull_native())
            {
LABEL_33:
              if (v5 < *(void *)(v7 + 16))
              {
                unint64_t v29 = v7 + 8 * v5;
                *(_DWORD *)(v29 + 32) = v3;
                *(_DWORD *)(v29 + 36) = v4;
                goto LABEL_40;
              }
              __break(1u);
              goto LABEL_57;
            }
LABEL_55:
            sub_1001496BC(v7);
            uint64_t v7 = v32;
            goto LABEL_33;
          }
LABEL_54:
          __break(1u);
          goto LABEL_55;
        }
        goto LABEL_46;
      }
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      goto LABEL_47;
    }
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  if (v5 >= v8)
  {
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
  int v14 = *(_DWORD *)(v9 + 8 * v5);
  BOOL v12 = __OFSUB__(v14, 1);
  int v15 = v14 - 1;
  if (v12)
  {
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
  int v2 = *v10;
  if (v15 == v37)
  {
    LODWORD(v3) = *(_DWORD *)(v9 + 8 * v5 + 4);
    if ((int)v3 >= v2)
    {
      if (swift_isUniquelyReferenced_nonNull_native())
      {
LABEL_14:
        if (v4 < *(void *)(v7 + 16))
        {
          uint64_t v16 = v7 + 8 * v4;
          *(_DWORD *)(v16 + 32) = v2;
          *(_DWORD *)(v16 + 36) = v3;
          *uint64_t v1 = v7;
          sub_100148B1C(v5);
          return;
        }
        __break(1u);
        goto LABEL_62;
      }
LABEL_60:
      sub_1001496BC(v7);
      uint64_t v7 = v33;
      goto LABEL_14;
    }
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  if (v37 < v2)
  {
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
LABEL_63:
    sub_1001496BC(v7);
    uint64_t v7 = v34;
  }
  if (v4 >= *(void *)(v7 + 16))
  {
    __break(1u);
    return;
  }
  uint64_t v30 = v7 + 8 * v4;
  *(_DWORD *)(v30 + 32) = v2;
  *(_DWORD *)(v30 + 36) = v3;
LABEL_40:
  *uint64_t v1 = v7;
}

void sub_100148690(unint64_t a1)
{
  uint64_t v37 = a1;
  uint64_t v3 = *v1;
  if (!*(void *)(*v1 + 16))
  {
    sub_10013A4E4();
    uint64_t v18 = *(void *)(*v1 + 16);
    sub_10013A588(v18);
    uint64_t v19 = *v1;
    *(void *)(v19 + 16) = v18 + 1;
    uint64_t v20 = (int64x2_t *)(v19 + 16 * v18);
    int64x2_t v21 = vdupq_n_s64(a1);
    goto LABEL_25;
  }
  unint64_t v4 = (unint64_t)&v36;
  __chkstk_darwin(a1);
  v35[2] = &v37;
  swift_bridgeObjectRetain();
  unint64_t v5 = sub_100148A88((uint64_t (*)(long long *))sub_100149734, (uint64_t)v35, v3);
  unint64_t v7 = v6;
  swift_bridgeObjectRelease();
  if (v7)
  {
    unint64_t v5 = *v1;
    unint64_t v4 = *(void *)(*v1 + 16);
    if (v4)
    {
      unint64_t v7 = v4 - 1;
      unint64_t v22 = v5 + 16 * (v4 - 1);
      uint64_t v23 = *(void *)(v22 + 40);
      uint64_t v3 = v23 + 1;
      if (!__OFADD__(v23, 1))
      {
        unint64_t v24 = v37;
        if (v3 == v37)
        {
          uint64_t v2 = *(void *)(v22 + 32);
          if (v3 >= v2)
          {
            if (swift_isUniquelyReferenced_nonNull_native())
            {
LABEL_22:
              if (v4 <= *(void *)(v5 + 16))
              {
                unint64_t v25 = v5 + 16 * v7;
                *(void *)(v25 + 32) = v2;
                *(void *)(v25 + 40) = v3;
                *uint64_t v1 = v5;
                return;
              }
              __break(1u);
              goto LABEL_54;
            }
LABEL_52:
            sub_1001496D0();
            unint64_t v5 = v31;
            goto LABEL_22;
          }
LABEL_51:
          __break(1u);
          goto LABEL_52;
        }
        sub_10013A4E4();
        uint64_t v26 = *(void *)(*v1 + 16);
        sub_10013A588(v26);
        uint64_t v19 = *v1;
        *(void *)(v19 + 16) = v26 + 1;
        uint64_t v20 = (int64x2_t *)(v19 + 16 * v26);
        int64x2_t v21 = vdupq_n_s64(v24);
LABEL_25:
        v20[2] = v21;
        *uint64_t v1 = v19;
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_44;
  }
  uint64_t v3 = v37;
  if (!v5)
  {
    unint64_t v7 = *v1;
    unint64_t v8 = *(void *)(*v1 + 16);
    goto LABEL_28;
  }
  unint64_t v4 = v5 - 1;
  if (__OFSUB__(v5, 1))
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  if ((v4 & 0x8000000000000000) != 0)
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  unint64_t v7 = *v1;
  unint64_t v8 = *(void *)(*v1 + 16);
  if (v4 >= v8)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  unint64_t v9 = v7 + 32;
  long long v10 = (uint64_t *)(v7 + 32 + 16 * v4);
  uint64_t v11 = v10[1];
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12)
  {
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  if (v13 != v37)
  {
    if ((v5 & 0x8000000000000000) == 0)
    {
LABEL_28:
      if (v5 < v8)
      {
        uint64_t v27 = *(void *)(v7 + 32 + 16 * v5);
        BOOL v12 = __OFSUB__(v27, 1);
        uint64_t v28 = v27 - 1;
        if (!v12)
        {
          if (v28 != v37)
          {
            sub_1001495B8(v5, v5, v37, v37);
            return;
          }
          unint64_t v4 = *(void *)(v7 + 32 + 16 * v5 + 8);
          if ((uint64_t)v4 >= v37)
          {
            if (swift_isUniquelyReferenced_nonNull_native())
            {
LABEL_33:
              if (v5 < *(void *)(v7 + 16))
              {
                unint64_t v29 = v7 + 16 * v5;
                *(void *)(v29 + 32) = v3;
                *(void *)(v29 + 40) = v4;
                goto LABEL_40;
              }
              __break(1u);
              goto LABEL_57;
            }
LABEL_55:
            sub_1001496D0();
            unint64_t v7 = v32;
            goto LABEL_33;
          }
LABEL_54:
          __break(1u);
          goto LABEL_55;
        }
        goto LABEL_46;
      }
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      goto LABEL_47;
    }
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  if (v5 >= v8)
  {
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
  uint64_t v14 = *(void *)(v9 + 16 * v5);
  BOOL v12 = __OFSUB__(v14, 1);
  uint64_t v15 = v14 - 1;
  if (v12)
  {
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
  uint64_t v2 = *v10;
  if (v15 == v37)
  {
    uint64_t v3 = *(void *)(v9 + 16 * v5 + 8);
    if (v3 >= v2)
    {
      if (swift_isUniquelyReferenced_nonNull_native())
      {
LABEL_14:
        if (v4 < *(void *)(v7 + 16))
        {
          unint64_t v16 = v7 + 16 * v4;
          *(void *)(v16 + 32) = v2;
          *(void *)(v16 + 40) = v3;
          *uint64_t v1 = v7;
          sub_100148B98(v5);
          return;
        }
        __break(1u);
        goto LABEL_62;
      }
LABEL_60:
      sub_1001496D0();
      unint64_t v7 = v33;
      goto LABEL_14;
    }
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  if (v37 < v2)
  {
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
LABEL_63:
    sub_1001496D0();
    unint64_t v7 = v34;
  }
  if (v4 >= *(void *)(v7 + 16))
  {
    __break(1u);
    return;
  }
  unint64_t v30 = v7 + 16 * v4;
  *(void *)(v30 + 32) = v2;
  *(void *)(v30 + 40) = v3;
LABEL_40:
  *uint64_t v1 = v7;
}

BOOL sub_1001489E4(int a1, int a2)
{
  return a1 > a2;
}

BOOL sub_1001489F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3 < a1;
}

uint64_t sub_1001489FC(uint64_t (*a1)(uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  if (!v4) {
    return 0;
  }
  uint64_t v6 = 0;
  uint64_t v7 = a3 + 32;
  while (1)
  {
    uint64_t v10 = *(void *)(v7 + 8 * v6);
    char v8 = a1(&v10);
    if (v3 || (v8 & 1) != 0) {
      break;
    }
    if (v4 == ++v6) {
      return 0;
    }
  }
  return v6;
}

uint64_t sub_100148A88(uint64_t (*a1)(long long *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  if (!v4) {
    return 0;
  }
  uint64_t v6 = 0;
  uint64_t v7 = a3 + 32;
  while (1)
  {
    long long v10 = *(_OWORD *)(v7 + 16 * v6);
    char v8 = a1(&v10);
    if (v3 || (v8 & 1) != 0) {
      break;
    }
    if (v4 == ++v6) {
      return 0;
    }
  }
  return v6;
}

void sub_100148B1C(unint64_t a1)
{
  uint64_t v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_1001496BC(v3);
    uint64_t v3 = v6;
  }
  unint64_t v4 = *(void *)(v3 + 16);
  if (v4 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v5 = v4 - 1;
    sub_1001492FC((char *)(v3 + 8 * a1 + 40), v4 - 1 - a1, (char *)(v3 + 8 * a1 + 32));
    *(void *)(v3 + 16) = v5;
    *uint64_t v1 = v3;
  }
}

void sub_100148B98(unint64_t a1)
{
  uint64_t v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_1001496D0();
    uint64_t v3 = v6;
  }
  unint64_t v4 = *(void *)(v3 + 16);
  if (v4 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v5 = v4 - 1;
    sub_1001493B0((char *)(v3 + 16 * a1 + 48), v4 - 1 - a1, (char *)(v3 + 16 * a1 + 32));
    *(void *)(v3 + 16) = v5;
    *uint64_t v1 = v3;
  }
}

void sub_100148C24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[4] = a3;
  swift_bridgeObjectRetain_n();
  swift_retain();
  v3[5] = sub_10013E338(a3);
  uint64_t v19 = _swiftEmptyArrayStorage;
  sub_10001FC68(a3, v18);
  uint64_t v6 = v18[0];
  uint64_t v7 = v18[1];
  int64_t v8 = v18[3];
  unint64_t v9 = v18[4];
  int64_t v10 = (unint64_t)(v18[2] + 64) >> 6;
  swift_bridgeObjectRetain();
  if (!v9) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v11 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v12 = v11 | (v8 << 6);
  while (1)
  {
    sub_100148690(*(void *)(*(void *)(v6 + 56) + 8 * v12));
    if (v9) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1)) {
      break;
    }
    if (v13 >= v10) {
      goto LABEL_23;
    }
    unint64_t v14 = *(void *)(v7 + 8 * v13);
    int64_t v15 = v8 + 1;
    if (!v14)
    {
      int64_t v15 = v8 + 2;
      if (v8 + 2 >= v10) {
        goto LABEL_23;
      }
      unint64_t v14 = *(void *)(v7 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v8 + 3;
        if (v8 + 3 >= v10) {
          goto LABEL_23;
        }
        unint64_t v14 = *(void *)(v7 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v8 + 4;
          if (v8 + 4 >= v10) {
            goto LABEL_23;
          }
          unint64_t v14 = *(void *)(v7 + 8 * v15);
          if (!v14)
          {
            int64_t v15 = v8 + 5;
            if (v8 + 5 >= v10) {
              goto LABEL_23;
            }
            unint64_t v14 = *(void *)(v7 + 8 * v15);
            if (!v14)
            {
              int64_t v15 = v8 + 6;
              if (v8 + 6 >= v10) {
                goto LABEL_23;
              }
              unint64_t v14 = *(void *)(v7 + 8 * v15);
              if (!v14)
              {
                int64_t v16 = v8 + 7;
                while (v16 < v10)
                {
                  unint64_t v14 = *(void *)(v7 + 8 * v16++);
                  if (v14)
                  {
                    int64_t v15 = v16 - 1;
                    goto LABEL_20;
                  }
                }
LABEL_23:
                swift_bridgeObjectRelease();
                swift_release();
                v3[6] = v19;
                swift_release();
                v3[2] = a1;
                v3[3] = a2;
                return;
              }
            }
          }
        }
      }
    }
LABEL_20:
    unint64_t v9 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
    int64_t v8 = v15;
  }
  __break(1u);
}

unint64_t *sub_100148DE8(uint64_t a1, void *a2)
{
  uint64_t v5 = *(void *)(v2 + 32);
  if (!*(void *)(v5 + 16)) {
    goto LABEL_5;
  }
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_1000287F0(a1, (uint64_t)a2);
  if ((v7 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    sub_1001229F8();
    swift_allocError();
    uint64_t v10 = v9;
    _StringGuts.grow(_:)(29);
    swift_bridgeObjectRelease();
    unint64_t v14 = 0xD00000000000001BLL;
    unint64_t v15 = 0x80000001001B9700;
    int64_t v8 = &v14;
    v11._uint64_t countAndFlagsBits = a1;
    v11._object = a2;
    String.append(_:)(v11);
    unint64_t v12 = v15;
    *(void *)uint64_t v10 = v14;
    *(void *)(v10 + 8) = v12;
    *(unsigned char *)(v10 + 41) = 4;
    swift_willThrow();
    return v8;
  }
  int64_t v8 = *(unint64_t **)(*(void *)(v5 + 56) + 8 * v6);
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_100148EF4(uint64_t a1)
{
  uint64_t result = sub_10001FC68(*(void *)(v1 + 32), &v16);
  int64_t v4 = v19;
  unint64_t v5 = v20;
  int64_t v6 = (unint64_t)(v18 + 64) >> 6;
  while (1)
  {
    if (v5)
    {
      unint64_t v7 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v8 = v7 | (v4 << 6);
      goto LABEL_22;
    }
    int64_t v9 = v4 + 1;
    if (__OFADD__(v4, 1)) {
      break;
    }
    if (v9 >= v6) {
      goto LABEL_24;
    }
    unint64_t v10 = *(void *)(v17 + 8 * v9);
    int64_t v11 = v4 + 1;
    if (!v10)
    {
      int64_t v11 = v4 + 2;
      if (v4 + 2 >= v6) {
        goto LABEL_24;
      }
      unint64_t v10 = *(void *)(v17 + 8 * v11);
      if (!v10)
      {
        int64_t v11 = v4 + 3;
        if (v4 + 3 >= v6) {
          goto LABEL_24;
        }
        unint64_t v10 = *(void *)(v17 + 8 * v11);
        if (!v10)
        {
          int64_t v11 = v4 + 4;
          if (v4 + 4 >= v6) {
            goto LABEL_24;
          }
          unint64_t v10 = *(void *)(v17 + 8 * v11);
          if (!v10)
          {
            int64_t v11 = v4 + 5;
            if (v4 + 5 >= v6) {
              goto LABEL_24;
            }
            unint64_t v10 = *(void *)(v17 + 8 * v11);
            if (!v10)
            {
              int64_t v11 = v4 + 6;
              if (v4 + 6 >= v6) {
                goto LABEL_24;
              }
              unint64_t v10 = *(void *)(v17 + 8 * v11);
              if (!v10)
              {
                int64_t v12 = v4 + 7;
                while (v12 < v6)
                {
                  unint64_t v10 = *(void *)(v17 + 8 * v12++);
                  if (v10)
                  {
                    int64_t v11 = v12 - 1;
                    goto LABEL_21;
                  }
                }
LABEL_24:
                swift_bridgeObjectRetain();
                swift_release();
                sub_1001229F8();
                swift_allocError();
                uint64_t v13 = v14;
                _StringGuts.grow(_:)(28);
                swift_bridgeObjectRelease();
                v15._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
                String.append(_:)(v15);
                swift_bridgeObjectRelease();
                *(void *)uint64_t v13 = 0xD00000000000001ALL;
                *(void *)(v13 + 8) = 0x80000001001B96E0;
                *(unsigned char *)(v13 + 41) = 4;
                swift_willThrow();
                return v13;
              }
            }
          }
        }
      }
    }
LABEL_21:
    unint64_t v5 = (v10 - 1) & v10;
    unint64_t v8 = __clz(__rbit64(v10)) + (v11 << 6);
    int64_t v4 = v11;
LABEL_22:
    if (*(void *)(*(void *)(v16 + 56) + 8 * v8) == a1)
    {
      uint64_t v13 = *(void *)(*(void *)(v16 + 48) + 16 * v8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_release();
      return v13;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100149118()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100149150()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_100149188()
{
  sub_100149150();

  return _swift_deallocClassInstance(v0, 56, 7);
}

uint64_t type metadata accessor for ProtoOneOf()
{
  return self;
}

uint64_t sub_1001491E0(uint64_t a1)
{
  return sub_100148EF4(a1);
}

unint64_t *sub_100149204(uint64_t a1, void *a2)
{
  return sub_100148DE8(a1, a2);
}

char *sub_100149228(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    sub_100026E64();
    uint64_t __src = (char *)sub_100025BFC();
    __break(1u);
  }
  else if (__dst != __src || &__src[56 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 56 * a2);
  }
  return __src;
}

char *sub_10014929C(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_100026E64();
    uint64_t result = (char *)sub_100025BFC();
    __break(1u);
  }
  else if (a3 != result || &result[40 * a2] <= a3)
  {
    return (char *)sub_100025BE0(a3, result);
  }
  return result;
}

char *sub_1001492FC(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_100026E64();
    uint64_t result = (char *)sub_100025BFC();
    __break(1u);
  }
  else if (a3 != result || &result[8 * a2] <= a3)
  {
    return (char *)sub_100025BE0(a3, result);
  }
  return result;
}

char *sub_100149354(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_100026E64();
    uint64_t result = (char *)sub_100025BFC();
    __break(1u);
  }
  else if (a3 != result || &result[32 * a2] <= a3)
  {
    return (char *)sub_100025BE0(a3, result);
  }
  return result;
}

char *sub_1001493B0(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_100026E64();
    uint64_t result = (char *)sub_100025BFC();
    __break(1u);
  }
  else if (a3 != result || &result[16 * a2] <= a3)
  {
    return (char *)sub_100025BE0(a3, result);
  }
  return result;
}

char *sub_100149408(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_100026E64();
    uint64_t result = (char *)sub_100025BFC();
    __break(1u);
  }
  else if (a3 != result || &result[24 * a2] <= a3)
  {
    return (char *)sub_100025BE0(a3, result);
  }
  return result;
}

char *sub_100149464(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    sub_100026E64();
    uint64_t result = (char *)sub_100025BFC();
    __break(1u);
  }
  else if (a3 != result || &result[64 * a2] <= a3)
  {
    return (char *)sub_100025BE0(a3, result);
  }
  return result;
}

void sub_1001494BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v5 = *v3;
  uint64_t v6 = *(void *)(*v3 + 16);
  if (v6 < a2)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v10 > *(void *)(v5 + 24) >> 1)
  {
    if (v6 <= v10) {
      uint64_t v13 = v6 + v9;
    }
    else {
      uint64_t v13 = v6;
    }
    sub_100128898(isUniquelyReferenced_nonNull_native, v13, 1, v5);
    uint64_t v5 = v14;
  }
  uint64_t v15 = v5 + 32 + 8 * a1;
  if (!v9) {
    goto LABEL_16;
  }
  uint64_t v16 = *(void *)(v5 + 16);
  if (__OFSUB__(v16, a2)) {
    goto LABEL_22;
  }
  sub_1001492FC((char *)(v5 + 32 + 8 * a2), v16 - a2, (char *)(v15 + 8));
  uint64_t v17 = *(void *)(v5 + 16);
  BOOL v18 = __OFADD__(v17, v9);
  uint64_t v19 = v17 + v9;
  if (!v18)
  {
    *(void *)(v5 + 16) = v19;
LABEL_16:
    *(void *)uint64_t v15 = a3;
    *uint64_t v3 = v5;
    return;
  }
LABEL_23:
  __break(1u);
}

void sub_1001495B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v6 = *v4;
  uint64_t v7 = *(void *)(*v4 + 16);
  if (v7 < a2)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v9 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v10 = 1 - v9;
  if (__OFSUB__(1, v9))
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (__OFADD__(v7, v10))
  {
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (!swift_isUniquelyReferenced_nonNull_native() || v7 + v10 > *(void *)(v6 + 24) >> 1)
  {
    sub_1001289B4();
    uint64_t v6 = v13;
  }
  uint64_t v14 = v6 + 32 + 16 * a1;
  if (!v10) {
    goto LABEL_13;
  }
  uint64_t v15 = *(void *)(v6 + 16);
  if (__OFSUB__(v15, a2)) {
    goto LABEL_19;
  }
  sub_1001493B0((char *)(v6 + 32 + 16 * a2), v15 - a2, (char *)(v14 + 16));
  uint64_t v16 = *(void *)(v6 + 16);
  BOOL v17 = __OFADD__(v16, v10);
  uint64_t v18 = v16 + v10;
  if (!v17)
  {
    *(void *)(v6 + 16) = v18;
LABEL_13:
    *(void *)uint64_t v14 = a3;
    *(void *)(v14 + 8) = a4;
    *int64_t v4 = v6;
    return;
  }
LABEL_20:
  __break(1u);
}

void sub_1001496BC(uint64_t a1)
{
}

void sub_1001496D0()
{
}

BOOL sub_1001496E4(void *a1, int *a2)
{
  return sub_1001489E4(*a1, *a2);
}

BOOL sub_100149708(uint64_t *a1, uint64_t *a2)
{
  return sub_1001489F0(*a1, a1[1], *a2);
}

BOOL sub_100149734(uint64_t *a1)
{
  return sub_100149708(a1, *(uint64_t **)(v1 + 16));
}

BOOL sub_100149754(void *a1)
{
  return sub_1001496E4(a1, *(int **)(v1 + 16));
}

void sub_100149774(sqlite3_context *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  sub_100149854(a5, (uint64_t)&v10);
  if (v11[32] == 255)
  {
    sub_100019938((uint64_t)&v10, &qword_1002232E8);
    v9._object = (void *)0x80000001001B9720;
    v9._uint64_t countAndFlagsBits = 0xD000000000000017;
    SQLiteContext.setError(message:code:)(v9, -1);
  }
  else
  {
    sub_10012D7D4((uint64_t)&v10, (uint64_t)v12);
    sub_100124DBC((uint64_t)v12, (uint64_t)v11);
    uint64_t v10 = a4;
    swift_bridgeObjectRetain();
    sub_100149924(a1, a2, a3, (uint64_t)&v10);
    sub_1001326F8((uint64_t)&v10);
    sub_100124E18((uint64_t)v12);
  }
}

double sub_100149854@<D0>(char a1@<W0>, uint64_t a2@<X8>)
{
  switch(a1)
  {
    case 'I':
      uint64_t v2 = 2;
LABEL_15:
      *(void *)int64_t v4 = v2;
      memset(&v4[8], 0, 32);
      goto LABEL_16;
    case 'U':
      uint64_t v2 = 3;
      goto LABEL_15;
    case 'b':
      uint64_t v2 = 8;
      goto LABEL_15;
    case 'd':
      uint64_t v2 = 5;
      goto LABEL_15;
    case 'u':
      uint64_t v2 = 1;
      goto LABEL_15;
    case 't':
      uint64_t v2 = 7;
      goto LABEL_15;
  }
  if (a1 != 105)
  {
    *(void *)(a2 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(unsigned char *)(a2 + 40) = -1;
    return result;
  }
  memset(v4, 0, sizeof(v4));
LABEL_16:
  char v5 = 2;
  sub_10012D7D4((uint64_t)v4, a2);
  return result;
}

uint64_t sub_100149924(sqlite3_context *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  static ProtoTagPathHelper.extractValue(from:pathAndType:)(a2, a3, a4, (uint64_t)&v6);
  sub_100135604(a1, 0, 0);
  return sub_100019938((uint64_t)&v6, &qword_100221918);
}

uint64_t sub_100149C20(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0 || (a3 + 56 * a2 > a1 ? (BOOL v3 = a1 + 56 * a2 > a3) : (BOOL v3 = 0), v3))
  {
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    sub_10002572C(&qword_100222CC8);
    return swift_arrayInitWithCopy();
  }
  return result;
}

uint64_t sub_100149D28(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0 || (a3 + 32 * a2 > a1 ? (BOOL v3 = a1 + 32 * a2 > a3) : (BOOL v3 = 0), v3))
  {
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return swift_arrayInitWithCopy();
  }
  return result;
}

uint64_t sub_100149E0C(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0 || (a3 + 24 * a2 > a1 ? (BOOL v3 = a1 + 24 * a2 > a3) : (BOOL v3 = 0), v3))
  {
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return swift_arrayInitWithCopy();
  }
  return result;
}

uint64_t sub_100149EF0(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0 || (a3 + 32 * a2 > a1 ? (BOOL v3 = a1 + 32 * a2 > a3) : (BOOL v3 = 0), v3))
  {
    sub_100020C64();
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return swift_arrayInitWithCopy();
  }
  return result;
}

uint64_t sub_100149FB8(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10014A014(uint64_t a1)
{
  return a1;
}

char *sub_10014A068(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_10014A0C8(a1, a2, a3, *v3);
  *BOOL v3 = (uint64_t)result;
  return result;
}

char *sub_10014A088(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_10014A1B4(a1, a2, a3, *v3);
  *BOOL v3 = (uint64_t)result;
  return result;
}

void *sub_10014A0A8(void *a1, int64_t a2, char a3)
{
  uint64_t result = sub_10014A298(a1, a2, a3, *v3);
  *BOOL v3 = (uint64_t)result;
  return result;
}

char *sub_10014A0C8(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10002572C(&qword_100223300);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 56);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  int64_t v12 = v10 + 32;
  uint64_t v13 = (char *)(a4 + 32);
  if (v5)
  {
    sub_100149228(v13, v8, v12);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_100149C20((unint64_t)v13, v8, (unint64_t)v12);
  }
  swift_release();
  return v10;
}

char *sub_10014A1B4(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10002572C(&qword_100219EF0);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 32);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  int64_t v12 = v10 + 32;
  uint64_t v13 = (char *)(a4 + 32);
  if (v5)
  {
    sub_100149354(v13, v8, v12);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_100149D28((unint64_t)v13, v8, (unint64_t)v12);
  }
  swift_release();
  return v10;
}

void *sub_10014A298(void *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10002572C(&qword_1002232F8);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
  }
  unint64_t v12 = a4 + 32;
  if (v5)
  {
    sub_1001493AC(v12);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_100149E0C(v12, v8, (unint64_t)(v10 + 4));
  }
  swift_release();
  return v10;
}

uint64_t static ProtoFirstOfHelper.getFirst<A>(ofTags:fromData:atTagPath:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  sub_100026808();
  uint64_t v52 = v8;
  __chkstk_darwin(v9);
  sub_10000E04C();
  uint64_t v56 = v10;
  if (qword_100220890 != -1) {
    swift_once();
  }
  size_t v11 = (void *)qword_100223308;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  [v11 updateData:isa];

  uint64_t v13 = (char *)qword_100223308;
  [(id)qword_100223308 seekToOffset:0];
  uint64_t v14 = *(void *)(a4 + 16);
  uint64_t v15 = Data.count.getter();
  if (v15 < 0)
  {
LABEL_64:
    sub_10002C678();
    uint64_t result = sub_100025974();
    __break(1u);
    return result;
  }
  uint64_t v16 = (char *)v15;
  if (!v14)
  {
LABEL_40:
    unint64_t v39 = (unint64_t)[v13 position];
    if ((v39 & 0x8000000000000000) == 0 && v39 >= (unint64_t)v16)
    {
      unint64_t object = 0;
      goto LABEL_61;
    }
    sub_10014B250();
    LOBYTE(object) = 0;
    unsigned int v40 = 0;
    unint64_t v41 = 0;
    unint64_t v53 = (void (**)(uint64_t, uint64_t))(v52 + 8);
    while (1)
    {
      while (1)
      {
        unint64_t v42 = *(void *)&v13[OBJC_IVAR___PBDataReader__pos];
        if (v42 == -1 || v42 >= *(void *)&v13[OBJC_IVAR___PBDataReader__length])
        {
          char v44 = 0;
          v13[OBJC_IVAR___PBDataReader__error] = 1;
        }
        else
        {
          unint64_t v43 = v42 + 1;
          char v44 = *(unsigned char *)(*(void *)&v13[OBJC_IVAR___PBDataReader__bytes] + v42);
          *(void *)&v13[OBJC_IVAR___PBDataReader__pos] = v43;
        }
        v41 |= (unint64_t)(v44 & 0x7F) << object;
        if (v44 < 0) {
          break;
        }
        if (v13[OBJC_IVAR___PBDataReader__error]) {
          unint64_t v45 = 0;
        }
        else {
          unint64_t v45 = v41;
        }
LABEL_55:
        dispatch thunk of BinaryInteger.init<A>(_:)();
        BOOL v46 = IntegerSet.contains(_:)(v56, a1, a5, a6);
        (*v53)(v56, a5);
        if (v46)
        {
          unint64_t object = (v45 >> 3);
          goto LABEL_61;
        }
        PBReaderSkipValueWithTag();
        unint64_t v47 = (unint64_t)[v13 position];
        unsigned int v40 = 0;
        unint64_t object = 0;
        unint64_t v41 = 0;
        if ((v47 & 0x8000000000000000) == 0)
        {
          unint64_t v41 = 0;
          if (v47 >= (unint64_t)v16) {
            goto LABEL_61;
          }
        }
      }
      LOBYTE(object) = object + 7;
      BOOL v28 = v40++ >= 9;
      if (v28)
      {
        unint64_t v45 = 0;
        goto LABEL_55;
      }
    }
  }
  uint64_t v17 = 0;
  uint64_t v18 = a4 + 32;
  uint64_t v54 = v18;
  while (1)
  {
    uint64_t v55 = v17;
    uint64_t v19 = *(void *)(v18 + 8 * v17);
    unint64_t v20 = (unint64_t)[v13 position];
    if ((v20 & 0x8000000000000000) == 0 && v20 >= (unint64_t)v16) {
      break;
    }
    LOBYTE(object) = 0;
    unsigned int v22 = 0;
    uint64_t v23 = 0;
    while (1)
    {
      while (1)
      {
        unint64_t v24 = *(void *)&v13[OBJC_IVAR___PBDataReader__pos];
        if (v24 == -1 || v24 >= *(void *)&v13[OBJC_IVAR___PBDataReader__length])
        {
          char v26 = 0;
          v13[OBJC_IVAR___PBDataReader__error] = 1;
        }
        else
        {
          unint64_t v25 = v24 + 1;
          char v26 = *(unsigned char *)(*(void *)&v13[OBJC_IVAR___PBDataReader__bytes] + v24);
          *(void *)&v13[OBJC_IVAR___PBDataReader__pos] = v25;
        }
        v23 |= (unint64_t)(v26 & 0x7F) << object;
        if ((v26 & 0x80) == 0) {
          break;
        }
        LOBYTE(object) = object + 7;
        BOOL v28 = v22++ >= 9;
        if (v28)
        {
          unint64_t v27 = 0;
          goto LABEL_20;
        }
      }
      unint64_t v27 = v13[OBJC_IVAR___PBDataReader__error] ? 0 : v23;
LABEL_20:
      if (v19 == (v27 >> 3)) {
        break;
      }
      PBReaderSkipValueWithTag();
      unint64_t v29 = (unint64_t)[v13 position];
      unsigned int v22 = 0;
      unint64_t object = 0;
      uint64_t v23 = 0;
      if ((v29 & 0x8000000000000000) == 0)
      {
        uint64_t v23 = 0;
        if (v29 >= (unint64_t)v16) {
          goto LABEL_61;
        }
      }
    }
    if ((v27 & 7) != 2)
    {
      sub_1001229F8();
      sub_100024A30();
      uint64_t v50 = v49;
      _StringGuts.grow(_:)(38);
      swift_bridgeObjectRelease();
      v51._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t object = (unint64_t)v51._object;
      String.append(_:)(v51);
      swift_bridgeObjectRelease();
      *(void *)uint64_t v50 = 0xD000000000000024;
      *(void *)(v50 + 8) = 0x80000001001B8A70;
      *(unsigned char *)(v50 + 41) = 12;
      swift_willThrow();
      [(id)qword_100223308 updateData:0];
      return object;
    }
    char v30 = 0;
    unsigned int v31 = 0;
    uint64_t v32 = 0;
    while (1)
    {
      unint64_t v33 = *(void *)&v13[OBJC_IVAR___PBDataReader__pos];
      if (v33 == -1 || v33 >= *(void *)&v13[OBJC_IVAR___PBDataReader__length])
      {
        char v35 = 0;
        v13[OBJC_IVAR___PBDataReader__error] = 1;
      }
      else
      {
        unint64_t v34 = v33 + 1;
        char v35 = *(unsigned char *)(*(void *)&v13[OBJC_IVAR___PBDataReader__bytes] + v33);
        *(void *)&v13[OBJC_IVAR___PBDataReader__pos] = v34;
      }
      v32 |= (unint64_t)(v35 & 0x7F) << v30;
      if ((v35 & 0x80) == 0) {
        break;
      }
      v30 += 7;
      if (v31++ > 8)
      {
        uint64_t v37 = 0;
        goto LABEL_38;
      }
    }
    if (v13[OBJC_IVAR___PBDataReader__error]) {
      uint64_t v37 = 0;
    }
    else {
      uint64_t v37 = v32;
    }
    if (v37 < 0) {
      goto LABEL_64;
    }
LABEL_38:
    unint64_t v38 = (unint64_t)[v13 position];
    if ((v38 & 0x8000000000000000) != 0) {
      goto LABEL_64;
    }
    uint64_t v17 = v55 + 1;
    uint64_t v16 = (char *)(v38 + v37);
    uint64_t v18 = v54;
    if (v55 + 1 == v14) {
      goto LABEL_40;
    }
  }
  unint64_t object = 0;
LABEL_61:
  [(id)qword_100223308 updateData:0];
  return object;
}

id static ProtoFirstOfHelper.getOneOfValue<A>(ofTags:messageSchema:fromData:atTagPath:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  sub_100026808();
  uint64_t v70 = v9;
  __chkstk_darwin(v10);
  sub_10000E04C();
  uint64_t v74 = v11;
  if (qword_100220890 != -1) {
    swift_once();
  }
  unint64_t v12 = (void *)qword_100223308;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  [v12 updateData:isa];

  uint64_t v14 = (unsigned char *)qword_100223308;
  [(id)qword_100223308 seekToOffset:0];
  uint64_t v15 = *(void *)(a3 + 16);
  uint64_t v16 = Data.count.getter();
  if (v16 < 0)
  {
LABEL_68:
    sub_10002C678();
    id result = (id)sub_100025974();
    __break(1u);
    return result;
  }
  uint64_t v17 = (char *)v16;
  if (v15)
  {
    uint64_t v18 = 0;
    uint64_t v19 = a3 + 32;
    uint64_t v73 = v15;
    uint64_t v72 = a3 + 32;
    do
    {
      uint64_t v20 = *(void *)(v19 + 8 * v18);
      unint64_t v21 = (unint64_t)sub_100024D14();
      if ((v21 & 0x8000000000000000) == 0 && v21 >= (unint64_t)v17) {
        goto LABEL_57;
      }
      char v22 = 0;
      unsigned int v23 = 0;
      uint64_t v24 = 0;
      while (1)
      {
        while (1)
        {
          unint64_t v25 = *(void *)&v14[OBJC_IVAR___PBDataReader__pos];
          if (v25 == -1 || v25 >= *(void *)&v14[OBJC_IVAR___PBDataReader__length])
          {
            char v26 = 0;
            v14[OBJC_IVAR___PBDataReader__error] = 1;
          }
          else
          {
            sub_10002A74C();
          }
          v24 |= (unint64_t)(v26 & 0x7F) << v22;
          if ((v26 & 0x80) == 0) {
            break;
          }
          v22 += 7;
          BOOL v28 = v23++ >= 9;
          if (v28)
          {
            unint64_t v27 = 0;
            goto LABEL_20;
          }
        }
        unint64_t v27 = v14[OBJC_IVAR___PBDataReader__error] ? 0 : v24;
LABEL_20:
        int v29 = v27 & 7;
        if (v20 == (v27 >> 3)) {
          break;
        }
        PBReaderSkipValueWithTag();
        unint64_t v30 = (unint64_t)sub_100024D14();
        unsigned int v23 = 0;
        char v22 = 0;
        uint64_t v24 = 0;
        if ((v30 & 0x8000000000000000) == 0)
        {
          uint64_t v24 = 0;
          if (v30 >= (unint64_t)v17) {
            goto LABEL_57;
          }
        }
      }
      if (v29 != 2)
      {
        sub_1001229F8();
        sub_100024A30();
        uint64_t v63 = v62;
        _StringGuts.grow(_:)(38);
        swift_bridgeObjectRelease();
        *(void *)&long long v78 = 0xD000000000000024;
        *((void *)&v78 + 1) = 0x80000001001B8A70;
        LOBYTE(v77[0]) = v29;
        v64._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v64);
        swift_bridgeObjectRelease();
        *(void *)uint64_t v63 = 0xD000000000000024;
        *(void *)(v63 + 8) = 0x80000001001B8A70;
        *(unsigned char *)(v63 + 41) = 12;
        goto LABEL_66;
      }
      char v31 = 0;
      unsigned int v32 = 0;
      uint64_t v33 = 0;
      while (1)
      {
        unint64_t v34 = *(void *)&v14[OBJC_IVAR___PBDataReader__pos];
        if (v34 == -1 || v34 >= *(void *)&v14[OBJC_IVAR___PBDataReader__length])
        {
          char v35 = 0;
          v14[OBJC_IVAR___PBDataReader__error] = 1;
        }
        else
        {
          sub_10002A74C();
        }
        v33 |= (unint64_t)(v35 & 0x7F) << v31;
        if ((v35 & 0x80) == 0) {
          break;
        }
        v31 += 7;
        if (v32++ > 8)
        {
          uint64_t v37 = 0;
          goto LABEL_38;
        }
      }
      if (v14[OBJC_IVAR___PBDataReader__error]) {
        uint64_t v37 = 0;
      }
      else {
        uint64_t v37 = v33;
      }
      if (v37 < 0) {
        goto LABEL_68;
      }
LABEL_38:
      unint64_t v38 = (unint64_t)sub_100024D14();
      if ((v38 & 0x8000000000000000) != 0) {
        goto LABEL_68;
      }
      ++v18;
      uint64_t v17 = (char *)(v38 + v37);
      uint64_t v19 = v72;
    }
    while (v18 != v73);
  }
  unint64_t v39 = (unint64_t)sub_100024D14();
  if ((v39 & 0x8000000000000000) == 0 && v39 >= (unint64_t)v17)
  {
LABEL_57:
    *(_WORD *)(a6 + 96) = 0;
    *(_OWORD *)(a6 + 64) = 0u;
    *(_OWORD *)(a6 + 80) = 0u;
    *(_OWORD *)(a6 + 32) = 0u;
    *(_OWORD *)(a6 + 48) = 0u;
    *(_OWORD *)a6 = 0u;
    *(_OWORD *)(a6 + 16) = 0u;
    return [(id)qword_100223308 updateData:0];
  }
  sub_10014B250();
  char v40 = 0;
  unsigned int v41 = 0;
  uint64_t v42 = 0;
  uint64_t v71 = (void (**)(uint64_t, uint64_t))(v70 + 8);
  while (1)
  {
    while (1)
    {
      unint64_t v43 = *(void *)&v14[OBJC_IVAR___PBDataReader__pos];
      if (v43 == -1 || v43 >= *(void *)&v14[OBJC_IVAR___PBDataReader__length])
      {
        char v44 = 0;
        v14[OBJC_IVAR___PBDataReader__error] = 1;
      }
      else
      {
        sub_10002A74C();
      }
      v42 |= (unint64_t)(v44 & 0x7F) << v40;
      if ((v44 & 0x80) == 0) {
        break;
      }
      v40 += 7;
      BOOL v28 = v41++ >= 9;
      if (v28)
      {
        unint64_t v45 = 0;
        goto LABEL_54;
      }
    }
    unint64_t v45 = v14[OBJC_IVAR___PBDataReader__error] ? 0 : v42;
LABEL_54:
    char v46 = v45 & 7;
    LODWORD(v78) = v45 >> 3;
    dispatch thunk of BinaryInteger.init<A>(_:)();
    BOOL v47 = IntegerSet.contains(_:)(v74, a1, a4, a5);
    (*v71)(v74, a4);
    if (v47) {
      break;
    }
    PBReaderSkipValueWithTag();
    unint64_t v48 = (unint64_t)[v14 position];
    unsigned int v41 = 0;
    char v40 = 0;
    uint64_t v42 = 0;
    if ((v48 & 0x8000000000000000) == 0)
    {
      uint64_t v42 = 0;
      if (v48 >= (unint64_t)v17) {
        goto LABEL_57;
      }
    }
  }
  char v50 = sub_10012EF18(v45 & 7);
  if (v50 == 6)
  {
    sub_1001229F8();
    sub_100024A30();
    uint64_t v52 = v51;
    _StringGuts.grow(_:)(21);
    swift_bridgeObjectRelease();
    *(void *)&long long v78 = 0xD000000000000013;
    *((void *)&v78 + 1) = 0x80000001001B8DD0;
    LOBYTE(v77[0]) = v46;
    v53._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v53);
    swift_bridgeObjectRelease();
    *(void *)uint64_t v52 = 0xD000000000000013;
    *(void *)(v52 + 8) = 0x80000001001B8DD0;
    char v54 = 12;
    goto LABEL_61;
  }
  char v55 = v50;
  uint64_t v56 = a2[3];
  uint64_t v57 = a2[4];
  sub_10001B620(a2, v56);
  uint64_t v58 = (*(uint64_t (**)(uint64_t, uint64_t))(v57 + 40))(v56, v57);
  if (!v6)
  {
    uint64_t v59 = (v45 >> 3);
    sub_100139FC4(v59, v58, (uint64_t)&v78);
    swift_bridgeObjectRelease();
    if (v79)
    {
      sub_10001C1AC(&v78, (uint64_t)v81);
      sub_10001C20C((uint64_t)v81, (uint64_t)v80);
      uint64_t v60 = v82;
      uint64_t v61 = v83;
      sub_10001B620(v81, v82);
      (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v61 + 40))(v77, v60, v61);
      sub_10012EF68(qword_100223308, v55, (uint64_t)&v78);
      sub_100124E18((uint64_t)v77);
      sub_10001C1AC(v80, a6);
      sub_10001B978((uint64_t)&v78, a6 + 40);
      sub_10001CA50((uint64_t)v81);
      return [(id)qword_100223308 updateData:0];
    }
    sub_10014B29C((uint64_t)&v78);
    sub_1001229F8();
    sub_100024A30();
    uint64_t v52 = v65;
    *(void *)&long long v78 = 0x6761742068746957;
    *((void *)&v78 + 1) = 0xE900000000000020;
    v77[0] = v59;
    v66._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v66);
    swift_bridgeObjectRelease();
    uint64_t v67 = *((void *)&v78 + 1);
    *(void *)uint64_t v52 = v78;
    *(void *)(v52 + 8) = v67;
    char v54 = 4;
LABEL_61:
    *(unsigned char *)(v52 + 41) = v54;
LABEL_66:
    swift_willThrow();
  }
  return [(id)qword_100223308 updateData:0];
}

id sub_10014B21C()
{
  id result = [objc_allocWithZone((Class)PBDataReader) init];
  qword_100223308 = (uint64_t)result;
  return result;
}

unint64_t sub_10014B250()
{
  unint64_t result = qword_100223310;
  if (!qword_100223310)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100223310);
  }
  return result;
}

uint64_t sub_10014B29C(uint64_t a1)
{
  uint64_t v2 = sub_10002572C(&qword_100221508);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

ValueMetadata *type metadata accessor for ProtoFirstOfHelper()
{
  return &type metadata for ProtoFirstOfHelper;
}

void sub_10014B30C()
{
  qword_100236CF8 = -1;
}

uint64_t sub_10014B31C()
{
  uint64_t v0 = type metadata accessor for CharacterSet();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  BOOL v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v10 - v5;
  sub_10004CD40(v7, qword_100236D00);
  sub_10002A10C(v0, (uint64_t)qword_100236D00);
  static CharacterSet.alphanumerics.getter();
  CharacterSet.init(charactersIn:)();
  CharacterSet.union(_:)();
  uint64_t v8 = *(void (**)(char *, uint64_t))(v1 + 8);
  v8(v3, v0);
  return ((uint64_t (*)(char *, uint64_t))v8)(v6, v0);
}

void *sub_10014B458(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xC0uLL);
}

uint64_t sub_10014B460(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 192))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      unint64_t v3 = *(void *)(a1 + 8);
      if (v3 >= 0xFFFFFFFF) {
        LODWORD(v3) = -1;
      }
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t sub_10014B4B4(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 184) = 0;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 192) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 192) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

void type metadata accessor for sqlite3_module(uint64_t a1)
{
}

void type metadata accessor for sqlite3_vtab_cursor(uint64_t a1)
{
}

void *sub_10014B560(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x60uLL);
}

uint64_t sub_10014B568(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 96)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10014B588(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 96) = v3;
  return result;
}

void type metadata accessor for sqlite3_index_info(uint64_t a1)
{
}

uint64_t sub_10014B5E0(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10014B600(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 24) = v3;
  return result;
}

void type metadata accessor for sqlite3_vtab(uint64_t a1)
{
}

void *sub_10014B640(void *result, void *a2)
{
  *unint64_t result = *a2;
  return result;
}

void type metadata accessor for sqlite3_index_constraint_usage(uint64_t a1)
{
}

uint64_t sub_10014B660(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10014B680(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 8) = v3;
  return result;
}

void type metadata accessor for sqlite3_index_orderby(uint64_t a1)
{
}

uint64_t sub_10014B6BC(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  *(void *)unint64_t result = v2;
  return result;
}

void type metadata accessor for sqlite3_index_constraint(uint64_t a1)
{
}

void SQLiteBaseFunction.database.setter()
{
}

sqlite3_stmt *Bool.init(with:column:)(uint64_t a1, uint64_t a2)
{
  unint64_t result = (sqlite3_stmt *)sub_10015C798();
  if (v2)
  {
    swift_release();
    return (sqlite3_stmt *)v5;
  }
  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (a2 <= 0x7FFFFFFF)
  {
    int v6 = sqlite3_column_int(result, a2);
    swift_release();
    return (sqlite3_stmt *)(v6 != 0);
  }
  __break(1u);
  return result;
}

sqlite3_stmt *sub_10014B788@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  unint64_t result = Bool.init(with:column:)(a1, a2);
  if (!v3) {
    *a3 = result & 1;
  }
  return result;
}

sqlite3_stmt *Float.init(with:column:)(uint64_t a1, uint64_t a2)
{
  unint64_t result = (sqlite3_stmt *)sub_10015C798();
  if (v2) {
    return (sqlite3_stmt *)swift_release();
  }
  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (a2 <= 0x7FFFFFFF)
  {
    sqlite3_column_double(result, a2);
    return (sqlite3_stmt *)swift_release();
  }
  __break(1u);
  return result;
}

sqlite3_stmt *sub_10014B840@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  unint64_t result = Float.init(with:column:)(a1, a2);
  if (!v3) {
    *a3 = v6;
  }
  return result;
}

sqlite3_stmt *Double.init(with:column:)(uint64_t a1, uint64_t a2)
{
  unint64_t result = (sqlite3_stmt *)sub_10015C798();
  if (v2) {
    return (sqlite3_stmt *)swift_release();
  }
  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (a2 <= 0x7FFFFFFF)
  {
    sqlite3_column_double(result, a2);
    return (sqlite3_stmt *)swift_release();
  }
  __break(1u);
  return result;
}

sqlite3_stmt *sub_10014B8E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t result = Double.init(with:column:)(a1, a2);
  if (!v3) {
    *a3 = v6;
  }
  return result;
}

uint64_t RawRepresentable<>.init(with:column:)@<X0>(char *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v42 = a1;
  uint64_t v37 = a5;
  uint64_t v8 = type metadata accessor for Optional();
  sub_100020C48();
  uint64_t v38 = v9;
  __chkstk_darwin(v10);
  char v40 = (char *)&v37 - v11;
  uint64_t v39 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_100020C48();
  uint64_t v41 = v13;
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v37 - v18;
  uint64_t v20 = *(void (**)(uint64_t, char *, uint64_t, uint64_t))(a4 + 8);
  uint64_t v21 = swift_retain();
  char v22 = v19;
  uint64_t v23 = v45;
  uint64_t v45 = AssociatedTypeWitness;
  v20(v21, v42, AssociatedTypeWitness, a4);
  if (v23) {
    return swift_release();
  }
  uint64_t v25 = v38;
  uint64_t v26 = v41;
  unint64_t v27 = *(void (**)(char *, char *, uint64_t))(v41 + 16);
  uint64_t v42 = v22;
  v27(v16, v22, v45);
  uint64_t v28 = (uint64_t)v40;
  dispatch thunk of RawRepresentable.init(rawValue:)();
  if (sub_100027BA4(v28, 1, a2) == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v28, v8);
    uint64_t v43 = 0;
    unint64_t v44 = 0xE000000000000000;
    _StringGuts.grow(_:)(45);
    v29._unint64_t object = (void *)0x80000001001B97A0;
    v29._uint64_t countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v29);
    v30._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v30);
    swift_bridgeObjectRelease();
    v31._uint64_t countAndFlagsBits = 0xD000000000000018;
    v31._unint64_t object = (void *)0x80000001001B97C0;
    String.append(_:)(v31);
    unsigned int v32 = v42;
    uint64_t v33 = v45;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    uint64_t v34 = v43;
    unint64_t v35 = v44;
    sub_100122878();
    swift_allocError();
    *(void *)uint64_t v36 = v34;
    *(void *)(v36 + 8) = v35;
    *(void *)(v36 + 16) = 0;
    *(unsigned char *)(v36 + 24) = 3;
    swift_willThrow();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v32, v33);
  }
  else
  {
    swift_release();
    (*(void (**)(char *, uint64_t))(v26 + 8))(v42, v45);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(v37, v28, a2);
  }
}

Swift::Int __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SQLiteRow.getColumnCount()()
{
  Swift::Int result = sub_10015C798();
  if (!v0) {
    return sqlite3_column_count((sqlite3_stmt *)result);
  }
  return result;
}

Swift::String_optional __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SQLiteRow.columnName(for:)(Swift::Int a1)
{
  uint64_t v3 = (sqlite3_stmt *)sub_10015C798();
  if (!v1)
  {
    if (a1 < (uint64_t)0xFFFFFFFF80000000)
    {
      __break(1u);
    }
    else if (a1 <= 0x7FFFFFFF)
    {
      uint64_t v3 = (sqlite3_stmt *)sqlite3_column_name(v3, a1);
      if (v3) {
        uint64_t v3 = (sqlite3_stmt *)String.init(cString:)();
      }
      else {
        uint64_t v4 = 0;
      }
      goto LABEL_10;
    }
    __break(1u);
  }
LABEL_10:
  result.value._unint64_t object = v4;
  result.value._uint64_t countAndFlagsBits = (uint64_t)v3;
  return result;
}

Swift::Int __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SQLiteRow.columnIndex(for:)(Swift::String a1)
{
  unint64_t object = a1._object;
  uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  BOOL v5 = (sqlite3_stmt *)sub_10015C798();
  if (v1) {
    return v2;
  }
  Swift::Int result = sqlite3_column_count(v5);
  if ((result & 0x80000000) == 0)
  {
    uint64_t v7 = (int)result;
    if (result)
    {
      Swift::Int v2 = 0;
      while (v7 != v2)
      {
        uint64_t v8 = (sqlite3_stmt *)sub_10015C798();
        Swift::Int result = (Swift::Int)sqlite3_column_name(v8, v2);
        if (result)
        {
          if (String.init(cString:)() == countAndFlagsBits && v9 == object)
          {
            swift_bridgeObjectRelease();
            return v2;
          }
          char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
          Swift::Int result = swift_bridgeObjectRelease();
          if (v11) {
            return v2;
          }
        }
        if (v7 == ++v2) {
          goto LABEL_13;
        }
      }
      __break(1u);
      goto LABEL_17;
    }
LABEL_13:
    sub_100122878();
    sub_100024A30();
    *(void *)uint64_t v12 = countAndFlagsBits;
    *(void *)(v12 + 8) = object;
    *(void *)(v12 + 16) = 0;
    *(unsigned char *)(v12 + 24) = 1;
    swift_bridgeObjectRetain();
    swift_willThrow();
    return v2;
  }
LABEL_17:
  __break(1u);
  return result;
}

SQLiter::SQLiteDataType __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SQLiteRow.type(at:)(Swift::Int at)
{
  uint64_t v3 = (sqlite3_stmt *)sub_10015C798();
  if (v1) {
    return (char)v3;
  }
  if (at < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (at > 0x7FFFFFFF)
  {
LABEL_8:
    __break(1u);
    return (char)v3;
  }
  Swift::Int32 v4 = sqlite3_column_type(v3, at);
  LOBYTE(v3) = SQLiteDataType.init(rawValue:)(v4);
  if (v3 == 5)
  {
    _StringGuts.grow(_:)(21);
    swift_bridgeObjectRelease();
    v5._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v5);
    swift_bridgeObjectRelease();
    sub_100122878();
    sub_100024A30();
    *(void *)uint64_t v6 = 0xD000000000000013;
    *(void *)(v6 + 8) = 0x80000001001B97E0;
    *(void *)(v6 + 16) = 0;
    *(unsigned char *)(v6 + 24) = 3;
    LOBYTE(v3) = swift_willThrow();
  }
  return (char)v3;
}

SQLiter::SQLiteDataType __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SQLiteRow.type(for:)(Swift::String a1)
{
  Swift::Int v1 = SQLiteRow.columnIndex(for:)(a1);
  if (!v2) {
    LOBYTE(v1) = SQLiteRow.type(at:)(v1);
  }
  return (char)v1;
}

uint64_t SQLiteRow.get<A>(at:type:)()
{
  sub_100026E7C();
  sub_10002C694();
  return v0();
}

{
  uint64_t (*v0)(void);

  sub_100026E7C();
  sub_10002C694();
  return v0();
}

Swift::Int SQLiteRow.get<A>(from:type:)(Swift::String a1)
{
  Swift::Int result = sub_10002A75C(a1);
  if (!v1)
  {
    sub_100027270();
    sub_10002C694();
    return v2();
  }
  return result;
}

{
  uint64_t v1;
  uint64_t (*v2)(void);
  Swift::Int result;

  Swift::Int result = sub_10002A75C(a1);
  if (!v1)
  {
    sub_100027270();
    sub_10002C694();
    return v2();
  }
  return result;
}

uint64_t SQLiteRow.getNonNull<A>(at:type:)(Swift::Int a1)
{
  uint64_t result = SQLiteRow.type(at:)(a1);
  if (!v2)
  {
    if (result == 4)
    {
      sub_100122878();
      uint64_t v3 = sub_100024A30();
      return sub_100025D78(v3, v4);
    }
    else
    {
      return SQLiteRow.get<A>(at:type:)();
    }
  }
  return result;
}

uint64_t SQLiteRow.getNonNull<A>(at:type:)@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v12 - v7;
  uint64_t result = SQLiteRow.get<A>(at:type:)();
  if (!v2)
  {
    if (sub_100027BA4((uint64_t)v8, 1, a1) == 1)
    {
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      sub_100122878();
      uint64_t v10 = sub_100024A30();
      return sub_100025D78(v10, v11);
    }
    else
    {
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(a1 - 8) + 32))(a2, v8, a1);
    }
  }
  return result;
}

Swift::Int SQLiteRow.getNonNull<A>(from:type:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_10014C424(a1, a2, a3, a4, a5, a6, SQLiteRow.getNonNull<A>(at:type:));
}

{
  return sub_10014C424(a1, a2, a3, a4, a5, a6, (uint64_t (*)(Swift::Int))SQLiteRow.getNonNull<A>(at:type:));
}

uint64_t SQLiteRow.getNullable<A>(at:type:)@<X0>(Swift::Int a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t result = SQLiteRow.type(at:)(a1);
  if (!v9)
  {
    if (result == 4)
    {
      uint64_t v10 = a4;
      uint64_t v11 = 1;
    }
    else
    {
      uint64_t v12 = *(void (**)(uint64_t, Swift::Int, uint64_t, uint64_t))(a3 + 8);
      uint64_t v13 = swift_retain();
      v12(v13, a1, a2, a3);
      uint64_t v10 = a4;
      uint64_t v11 = 0;
    }
    return sub_10002538C(v10, v11, 1, a2);
  }
  return result;
}

Swift::Int SQLiteRow.getNullable<A>(from:type:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_10014C424(a1, a2, a3, a4, a5, a6, (uint64_t (*)(Swift::Int))SQLiteRow.getNullable<A>(at:type:));
}

Swift::Int sub_10014C424(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(Swift::Int))
{
  Swift::Int result = SQLiteRow.columnIndex(for:)(*(Swift::String *)&a1);
  if (!v9) {
    return a7(result);
  }
  return result;
}

uint64_t SQLiteRow.forEachColumn(_:)(void (*a1)(uint64_t, uint64_t, uint64_t))
{
  uint64_t result = sub_10015C798();
  if (!v1)
  {
    uint64_t result = sqlite3_column_count((sqlite3_stmt *)result);
    if ((result & 0x80000000) == 0)
    {
      uint64_t v4 = (int)result;
      if (!result) {
        return result;
      }
      uint64_t v5 = 0;
      while (v4 != v5)
      {
        uint64_t v6 = (sqlite3_stmt *)sub_10015C798();
        uint64_t result = (uint64_t)sqlite3_column_name(v6, v5);
        if (result)
        {
          uint64_t v7 = String.init(cString:)();
          a1(v5, v7, v8);
          uint64_t result = swift_bridgeObjectRelease();
        }
        if (v4 == ++v5) {
          return result;
        }
      }
      __break(1u);
    }
    __break(1u);
  }
  return result;
}

ValueMetadata *type metadata accessor for SQLiteRow()
{
  return &type metadata for SQLiteRow;
}

char *SQLiteUndefined.sqlColumnType.unsafeMutableAddressor()
{
  return &static SQLiteUndefined.sqlColumnType;
}

uint64_t static SQLiteUndefined.sqlColumnType.getter()
{
  return static SQLiteUndefined.sqlColumnType;
}

uint64_t static SQLiteUndefined.sqlColumnType.setter(char a1)
{
  uint64_t result = sub_10002A780();
  static SQLiteUndefined.sqlColumnType = a1;
  return result;
}

uint64_t (*static SQLiteUndefined.sqlColumnType.modify())()
{
  return j_j__swift_endAccess;
}

char *SQLiteUndefined.sqlNullable.unsafeMutableAddressor()
{
  return &static SQLiteUndefined.sqlNullable;
}

uint64_t static SQLiteUndefined.sqlNullable.getter()
{
  return static SQLiteUndefined.sqlNullable;
}

uint64_t static SQLiteUndefined.sqlNullable.setter(char a1)
{
  uint64_t result = sub_10002A780();
  static SQLiteUndefined.sqlNullable = a1;
  return result;
}

uint64_t (*static SQLiteUndefined.sqlNullable.modify())()
{
  return j__swift_endAccess;
}

SQLiter::SQLiteDataType __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SQLiteUndefined.getSQLDataType()()
{
  sub_100122878();
  swift_allocError();
  return sub_100024D2C(v0, 0xD00000000000003ALL);
}

double SQLiteUndefined.unwrapIfOptional()@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t static SQLiteUndefined.create(from:at:nullable:)()
{
  sub_100122878();
  swift_allocError();
  return sub_100024D2C(v0, 0xD000000000000024);
}

uint64_t SQLiteUndefined.bind(to:at:)()
{
  sub_100122878();
  swift_allocError();
  return sub_100024D2C(v0, 0xD00000000000002FLL);
}

unint64_t static SQLiteUndefined.create(from:)@<X0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 24) = &type metadata for SQLiteUndefined;
  unint64_t result = sub_1001338B0();
  *(void *)(a1 + 32) = result;
  return result;
}

Swift::Int SQLiteUndefined.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t sub_10014C880()
{
  return static SQLiteUndefined.sqlColumnType;
}

uint64_t sub_10014C8C4()
{
  return static SQLiteUndefined.sqlNullable;
}

uint64_t sub_10014C908()
{
  return SQLiteUndefined.getSQLDataType()();
}

uint64_t sub_10014C924()
{
  return static SQLiteUndefined.create(from:at:nullable:)();
}

unint64_t sub_10014C940@<X0>(uint64_t a1@<X8>)
{
  return static SQLiteUndefined.create(from:)(a1);
}

uint64_t sub_10014C958()
{
  return SQLiteUndefined.bind(to:at:)();
}

Swift::Int sub_10014C974()
{
  return Hasher._finalize()();
}

unint64_t sub_10014C9A8(uint64_t a1)
{
  unint64_t result = sub_10014C9D0();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_10014C9D0()
{
  unint64_t result = qword_100223370;
  if (!qword_100223370)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100223370);
  }
  return result;
}

unint64_t sub_10014CA20()
{
  unint64_t result = qword_100223378;
  if (!qword_100223378)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100223378);
  }
  return result;
}

ValueMetadata *type metadata accessor for SQLiteUndefined()
{
  return &type metadata for SQLiteUndefined;
}

uint64_t static SQLiteError.__derived_enum_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  switch(a4)
  {
    case 1:
      if (a8 == 1) {
        goto LABEL_14;
      }
      return 0;
    case 2:
      if (a8 != 2) {
        return 0;
      }
      goto LABEL_14;
    case 3:
      if (a8 != 3) {
        return 0;
      }
LABEL_14:
      if (a1 != a5 || a2 != a6) {
        return _stringCompareWithSmolCheck(_:_:expecting:)();
      }
      return 1;
    case 4:
      uint64_t v11 = a3 | a2;
      if (a3 | a2 | a1)
      {
        if (a1 != 1 || v11)
        {
          if (a1 != 2 || v11)
          {
            if (a1 != 3 || v11)
            {
              if (a1 != 4 || v11)
              {
                if (a1 != 5 || v11)
                {
                  if (a1 != 6 || v11)
                  {
                    if (a1 != 7 || v11)
                    {
                      if (a1 != 8 || v11)
                      {
                        if (a1 != 9 || v11)
                        {
                          if (a1 != 10 || v11)
                          {
                            if (a8 != 4 || a5 != 11) {
                              return 0;
                            }
                          }
                          else if (a8 != 4 || a5 != 10)
                          {
                            return 0;
                          }
                        }
                        else if (a8 != 4 || a5 != 9)
                        {
                          return 0;
                        }
                      }
                      else if (a8 != 4 || a5 != 8)
                      {
                        return 0;
                      }
                    }
                    else if (a8 != 4 || a5 != 7)
                    {
                      return 0;
                    }
                  }
                  else if (a8 != 4 || a5 != 6)
                  {
                    return 0;
                  }
                }
                else if (a8 != 4 || a5 != 5)
                {
                  return 0;
                }
              }
              else if (a8 != 4 || a5 != 4)
              {
                return 0;
              }
            }
            else if (a8 != 4 || a5 != 3)
            {
              return 0;
            }
          }
          else if (a8 != 4 || a5 != 2)
          {
            return 0;
          }
        }
        else if (a8 != 4 || a5 != 1)
        {
          return 0;
        }
        if (!(a7 | a6)) {
          return 1;
        }
      }
      else if (a8 == 4 && !(a7 | a6 | a5))
      {
        return 1;
      }
      return 0;
    default:
      if (a8 || a1 != a5) {
        return 0;
      }
      if (a2 == a6 && a3 == a7) {
        return 1;
      }
      return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

uint64_t sub_10014CCBC(uint64_t a1, uint64_t a2)
{
  return static SQLiteError.__derived_enum_equals(_:_:)(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(unsigned char *)(a1 + 24), *(void *)a2, *(void *)(a2 + 8), *(void *)(a2 + 16), *(unsigned char *)(a2 + 24));
}

uint64_t sub_10014CCE0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  switch(a4)
  {
    case 0:
    case 1:
    case 2:
    case 3:
      uint64_t result = swift_bridgeObjectRetain();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t destroy for SQLiteError(uint64_t a1)
{
  return sub_10014CD44(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(unsigned char *)(a1 + 24));
}

uint64_t sub_10014CD44(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  switch(a4)
  {
    case 0:
    case 1:
    case 2:
    case 3:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t initializeWithCopy for SQLiteError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(unsigned char *)(a2 + 24);
  sub_10014CCE0(*(void *)a2, v4, v5, v6);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithCopy for SQLiteError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(unsigned char *)(a2 + 24);
  sub_10014CCE0(*(void *)a2, v4, v5, v6);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  char v10 = *(unsigned char *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v6;
  sub_10014CD44(v7, v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for SQLiteError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  char v4 = *(unsigned char *)(a2 + 24);
  uint64_t v5 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v3;
  char v8 = *(unsigned char *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v4;
  sub_10014CD44(v5, v7, v6, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for SQLiteError(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFC && *(unsigned char *)(a1 + 25))
    {
      int v2 = *(_DWORD *)a1 + 251;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
      if (v3 <= 4) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SQLiteError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)uint64_t result = a2 - 252;
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 25) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 24) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_10014CF3C(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 24) <= 3u) {
    return *(unsigned __int8 *)(a1 + 24);
  }
  else {
    return (*(_DWORD *)a1 + 4);
  }
}

uint64_t sub_10014CF54(uint64_t result, unsigned int a2)
{
  uint64_t v2 = a2 - 4;
  if (a2 >= 4)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    LOBYTE(a2) = 4;
    *(void *)uint64_t result = v2;
  }
  *(unsigned char *)(result + 24) = a2;
  return result;
}

ValueMetadata *type metadata accessor for SQLiteError()
{
  return &type metadata for SQLiteError;
}

uint64_t static SQLiteVTabColumnSchema.allHidden.getter()
{
  return sub_10014D018();
}

uint64_t sub_10014CFA0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, unsigned char *a3@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(a2 + a1 - 8) + 32))(*(void *)(a2 + a1 - 16));
  *a3 = result & 1;
  return result;
}

uint64_t static SQLiteVTabColumnSchema.allVisible.getter()
{
  return sub_10014D018();
}

uint64_t sub_10014D018()
{
  dispatch thunk of static CaseIterable.allCases.getter();
  swift_getKeyPath();
  type metadata accessor for Array();
  swift_getWitnessTable();
  uint64_t v0 = _ArrayProtocol.filter(_:)();
  swift_release();
  return v0;
}

BOOL SQLiteVTabColumnSchema.visible.getter(uint64_t a1, uint64_t a2)
{
  return ((*(uint64_t (**)(void))(a2 + 32))() & 1) == 0;
}

BOOL sub_10014D110@<W0>(uint64_t a1@<X1>, uint64_t a2@<X2>, unsigned char *a3@<X8>)
{
  BOOL result = SQLiteVTabColumnSchema.visible.getter(*(void *)(a2 + a1 - 16), *(void *)(a2 + a1 - 8));
  *a3 = result;
  return result;
}

uint64_t sub_10014D154()
{
  swift_getAtKeyPath();
  return v1;
}

uint64_t SQLiteVTab.getConnectionClass()()
{
  return sub_10002C6C4();
}

uint64_t SQLiteVTab.__allocating_init(style:)(char a1)
{
  return SQLiteBaseVTab.init(style:)(a1);
}

uint64_t SQLiteVTab.__deallocating_deinit()
{
  uint64_t v0 = SQLiteBaseVTab.deinit();

  return _swift_deallocClassInstance(v0, 41, 7);
}

uint64_t static SQLiteVTab.getTable(forConnection:)()
{
  sub_100025DC0();
  if (swift_weakLoadStrong())
  {
    uint64_t result = swift_dynamicCastClass();
    if (result) {
      return result;
    }
    swift_release();
  }
  sub_10014D2C8();
  swift_allocError();
  *(_DWORD *)uint64_t v1 = 0;
  *(unsigned char *)(v1 + 4) = 1;
  return swift_willThrow();
}

unint64_t sub_10014D2C8()
{
  unint64_t result = qword_100223380[0];
  if (!qword_100223380[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100223380);
  }
  return result;
}

uint64_t static SQLiteVTab.getConnection(forCursor:)()
{
  sub_100025DC0();
  if (swift_weakLoadStrong())
  {
    swift_getAssociatedTypeWitness();
    uint64_t result = swift_dynamicCastClass();
    if (result) {
      return result;
    }
    swift_release();
  }
  sub_10014D2C8();
  swift_allocError();
  *(_DWORD *)uint64_t v1 = 1;
  *(unsigned char *)(v1 + 4) = 1;
  return swift_willThrow();
}

uint64_t static SQLiteVTab.getTable(forCursor:)()
{
  static SQLiteVTab.getConnection(forCursor:)();
  if (!v1)
  {
    uint64_t v0 = static SQLiteVTab.getTable(forConnection:)();
    swift_release();
  }
  return v0;
}

uint64_t SQLiteVTab.BaseConnection.getCursorClass()()
{
  return sub_10002C6C4();
}

Swift::String __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SQLiteVTab.BaseConnection.getTableSchema()()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 184);
  uint64_t v2 = *(void *)(*(void *)v0 + 176);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  dispatch thunk of static CaseIterable.allCases.getter();
  void v13[5] = v14;
  void v13[2] = v2;
  v13[3] = v1;
  uint64_t v3 = type metadata accessor for Array();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v6 = sub_10015A288((void (*)(char *, uint64_t))sub_10014DD00, (uint64_t)v13, v3, (uint64_t)&type metadata for String, (uint64_t)&type metadata for Never, WitnessTable, (uint64_t)&protocol witness table for Never, v5);
  swift_bridgeObjectRelease();
  uint64_t v14 = v6;
  sub_10002572C(&qword_100219B08);
  sub_100020DBC();
  uint64_t v7 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v9 = v8;
  swift_bridgeObjectRelease();
  uint64_t v10 = v7;
  uint64_t v11 = v9;
  result._unint64_t object = v11;
  result._uint64_t countAndFlagsBits = v10;
  return result;
}

uint64_t sub_10014D5E8@<X0>(void *a1@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  dispatch thunk of RawRepresentable.rawValue.getter();
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v4._uint64_t countAndFlagsBits = 32;
  v4._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  (*(void (**)(uint64_t))(*(void *)(AssociatedConformanceWitness + 8) + 24))(AssociatedTypeWitness);
  (*(void (**)(void))(v5 + 24))();
  _print_unlocked<A, B>(_:_:)();
  char v6 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(AssociatedTypeWitness, AssociatedConformanceWitness);
  BOOL v7 = (v6 & 1) == 0;
  if (v6) {
    uint64_t v8 = 0x4E454444494820;
  }
  else {
    uint64_t v8 = 0;
  }
  if (v7) {
    unint64_t v9 = 0xE000000000000000;
  }
  else {
    unint64_t v9 = 0xE700000000000000;
  }
  unint64_t v10 = v9;
  String.append(_:)(*(Swift::String *)&v8);
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  return result;
}

Swift::String __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SQLiteVTab.BaseConnection.columnName(atIndex:)(Swift::Int32 atIndex)
{
  Swift::Int32 v24 = atIndex;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v2 = type metadata accessor for Optional();
  sub_100026808();
  uint64_t v4 = v3;
  __chkstk_darwin(v5);
  BOOL v7 = (char *)&v23 - v6;
  sub_100026808();
  uint64_t v9 = v8;
  __chkstk_darwin(v10);
  Swift::String v12 = (char *)&v23 - v11;
  int v13 = v24;
  uint64_t v14 = *(void *)(swift_getAssociatedConformanceWitness() + 8);
  uint64_t v15 = AssociatedTypeWitness;
  SQLiteColumnDescribing<>.init(index:)(v13, AssociatedTypeWitness, (uint64_t)v7);
  if (sub_100027BA4((uint64_t)v7, 1, AssociatedTypeWitness) == 1)
  {
    uint64_t v17 = *(void (**)(char *, uint64_t))(v4 + 8);
    uint64_t v16 = (void *)(v4 + 8);
    v17(v7, v2);
    sub_10014D2C8();
    swift_allocError();
    *(_DWORD *)uint64_t v18 = v13;
    *(unsigned char *)(v18 + 4) = 0;
    swift_willThrow();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v12, v7, AssociatedTypeWitness);
    uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 32))(AssociatedTypeWitness, v14);
    uint64_t v16 = v19;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, AssociatedTypeWitness);
  }
  uint64_t v20 = v15;
  uint64_t v21 = v16;
  result._unint64_t object = v21;
  result._uint64_t countAndFlagsBits = v20;
  return result;
}

uint64_t SQLiteVTab.BaseConnection.__allocating_init(_:argc:argv:)(uint64_t a1, int a2, uint64_t a3)
{
  return SQLiteBaseVTab.Connection.init(_:argc:argv:)(a1, a2, a3);
}

uint64_t SQLiteVTab.BaseConnection.init(_:argc:argv:)(uint64_t a1, int a2, uint64_t a3)
{
  return SQLiteBaseVTab.Connection.init(_:argc:argv:)(a1, a2, a3);
}

uint64_t SQLiteBaseVTab.Connection.deinit()
{
  swift_bridgeObjectRelease();
  swift_weakDestroy();
  return v0;
}

uint64_t SQLiteVTab.BaseConnection.__deallocating_deinit()
{
  SQLiteBaseVTab.Connection.deinit();

  return _swift_deallocClassInstance(v0, 40, 7);
}

uint64_t SQLiteVTab.BaseCursor.__allocating_init(_:)()
{
  return SQLiteBaseVTab.Cursor.init(_:)();
}

uint64_t SQLiteVTab.BaseCursor.init(_:)()
{
  return SQLiteBaseVTab.Cursor.init(_:)();
}

uint64_t SQLiteBaseVTab.Cursor.deinit()
{
  swift_weakDestroy();
  return v0;
}

uint64_t SQLiteBaseVTab.Cursor.__deallocating_deinit()
{
  swift_weakDestroy();

  return _swift_deallocClassInstance(v0, 32, 7);
}

uint64_t initializeBufferWithCopyOfBuffer for SQLiteVTabError(uint64_t result, int *a2)
{
  int v2 = *a2;
  *(unsigned char *)(result + 4) = *((unsigned char *)a2 + 4);
  *(_DWORD *)Swift::String result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for SQLiteVTabError(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 5)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for SQLiteVTabError(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(unsigned char *)(result + 4) = 0;
    *(_DWORD *)Swift::String result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 5) = v3;
  return result;
}

uint64_t sub_10014DBC4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 4)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_10014DBE0(uint64_t result, int a2)
{
  if (a2)
  {
    *(_DWORD *)Swift::String result = a2 - 1;
    char v2 = 1;
  }
  else
  {
    char v2 = 0;
  }
  *(unsigned char *)(result + 4) = v2;
  return result;
}

ValueMetadata *type metadata accessor for SQLiteVTabError()
{
  return &type metadata for SQLiteVTabError;
}

uint64_t sub_10014DC10()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for SQLiteVTab()
{
  return sub_100040C54();
}

uint64_t sub_10014DC60()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for SQLiteVTab.BaseConnection()
{
  return sub_100040C54();
}

uint64_t sub_10014DCB0()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for SQLiteVTab.BaseCursor()
{
  return sub_100040C54();
}

uint64_t sub_10014DD00@<X0>(void *a1@<X8>)
{
  return sub_10014D5E8(a1);
}

uint64_t sub_10014DD20()
{
  return sub_10014D154() & 1;
}

uint64_t sub_10014DD3C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10004CD40(v0, qword_100236D18);
  sub_10002A10C(v0, (uint64_t)qword_100236D18);
  return Logger.init(subsystem:category:)();
}

uint64_t type metadata accessor for SQLiteLogger()
{
  return self;
}

uint64_t static SQLiteType.sqlNull.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  a2[3] = type metadata accessor for Optional();
  a2[4] = swift_getWitnessTable();
  uint64_t v4 = sub_10002E5E8(a2);
  return sub_10002538C((uint64_t)v4, 1, 1, a1);
}

uint64_t static SQLiteType.getSQLNonNullDataType()(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(a2 + 24))();
  uint64_t result = sub_100016708();
  switch(v3)
  {
    case 1:
      uint64_t result = 2;
      break;
    case 2:
    case 3:
    case 4:
    case 5:
    case 9:
      uint64_t result = 0;
      break;
    case 6:
    case 7:
    case 8:
      uint64_t result = 3;
      break;
    case 10:
      sub_100122878();
      sub_100024A30();
      sub_1000185FC();
      uint64_t result = sub_100024D2C(v4, v5);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t SQLiteType.isEqualTo(sqlValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  v40[1] = a3;
  uint64_t v44 = a1;
  sub_100026808();
  uint64_t v7 = v6;
  __chkstk_darwin(v8);
  sub_10000DFD0();
  v40[0] = v10 - v9;
  uint64_t v11 = type metadata accessor for Optional();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  sub_100026808();
  uint64_t v41 = v13;
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)v40 - v15;
  sub_100026808();
  uint64_t v18 = v17;
  __chkstk_darwin(v19);
  uint64_t v45 = (char *)v40 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v23 = (char *)v40 - v22;
  double v25 = __chkstk_darwin(v24);
  unint64_t v27 = (char *)v40 - v26;
  uint64_t v43 = v7;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))((char *)v40 - v26, v4, a2, v25);
  sub_10002538C((uint64_t)v27, 0, 1, a2);
  sub_10001C20C(v44, (uint64_t)v46);
  sub_10002572C(&qword_1002235A0);
  int v28 = swift_dynamicCast();
  sub_10002538C((uint64_t)v23, v28 ^ 1u, 1, a2);
  uint64_t v42 = TupleTypeMetadata2;
  uint64_t v29 = (uint64_t)&v16[*(int *)(TupleTypeMetadata2 + 48)];
  uint64_t v44 = v18;
  Swift::String v31 = (void (*)(uint64_t))(v18 + 16);
  Swift::String v30 = *(void (**)(void))(v18 + 16);
  sub_10002B35C();
  v30();
  sub_10002B35C();
  v30();
  sub_10002B1D0((uint64_t)v16);
  if (!v34)
  {
    sub_10002B35C();
    v30();
    sub_10002B1D0(v29);
    if (!v34)
    {
      uint64_t v36 = v43;
      Swift::String v31 = (void (*)(uint64_t))v40[0];
      (*(void (**)(void, uint64_t, uint64_t))(v43 + 32))(v40[0], v29, a2);
      char v33 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v37 = *(void (**)(void (*)(uint64_t), uint64_t))(v36 + 8);
      v37(v31, a2);
      uint64_t v38 = sub_10002DF54();
      v31(v38);
      v37((void (*)(uint64_t))v45, a2);
      ((void (*)(char *, uint64_t))v31)(v16, v11);
      goto LABEL_10;
    }
    uint64_t v35 = sub_10002DF54();
    v31(v35);
    (*(void (**)(char *, uint64_t))(v43 + 8))(v45, a2);
LABEL_9:
    (*(void (**)(char *, uint64_t))(v41 + 8))(v16, v42);
    char v33 = 0;
    goto LABEL_10;
  }
  uint64_t v32 = sub_10002DF54();
  v31(v32);
  sub_10002B1D0(v29);
  if (!v34) {
    goto LABEL_9;
  }
  ((void (*)(char *, uint64_t))v31)(v16, v11);
  char v33 = 1;
LABEL_10:
  ((void (*)(char *, uint64_t))v31)(v23, v11);
  return v33 & 1;
}

void static SQLiteSafeType<>.create(from:at:nullable:)()
{
  sub_100017EC4();
  uint64_t v2 = v0;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  Swift::Int v9 = v1;
  uint64_t v11 = v10;
  if (v12)
  {
    SQLiteRow.type(at:)(v1);
    uint64_t v2 = v13;
    if (v13) {
      goto LABEL_8;
    }
    sub_100028DC0();
    if (v14)
    {
      v11[3] = type metadata accessor for Optional();
      v11[4] = swift_getWitnessTable();
      uint64_t v15 = sub_10002E5E8(v11);
      sub_1000250D0((uint64_t)v15);
      goto LABEL_8;
    }
  }
  uint64_t v16 = *(void (**)(uint64_t, Swift::Int, uint64_t, uint64_t))(v6 + 8);
  v11[3] = v8;
  v11[4] = v4;
  sub_10002E5E8(v11);
  uint64_t v17 = swift_retain();
  v16(v17, v9, v8, v6);
  if (v2) {
    sub_10014E3C0((uint64_t)v11);
  }
LABEL_8:
  sub_100024A18();
}

uint64_t sub_10014E3C0(uint64_t result)
{
  if ((*(_DWORD *)(*(void *)(*(void *)(result + 24) - 8) + 80) & 0x20000) != 0) {
    return swift_slowDealloc();
  }
  return result;
}

uint64_t SQLiteSafeType<>.getSQLDataType()()
{
  sub_10001DEBC();
  v0();
  uint64_t result = sub_100016708();
  switch(v2)
  {
    case 1:
      uint64_t result = 2;
      break;
    case 2:
    case 3:
    case 4:
    case 5:
    case 9:
      uint64_t result = 0;
      break;
    case 6:
    case 7:
    case 8:
      uint64_t result = 3;
      break;
    case 10:
      sub_100122878();
      sub_100024A30();
      sub_1000185FC();
      uint64_t result = sub_100024D2C(v3, v4);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t SQLiteSafeType<>.unwrapIfOptional()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  a3[3] = a1;
  a3[4] = a2;
  uint64_t v5 = sub_10002E5E8(a3);
  uint64_t v6 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16);

  return v6(v5, v3, a1);
}

void static SQLiteUnsafeType<>.create(from:at:nullable:)()
{
  sub_100017EC4();
  uint64_t v2 = v1;
  uint64_t v27 = v3;
  uint64_t v5 = v4;
  int v26 = v6;
  uint64_t v8 = v7;
  double v25 = v9;
  uint64_t v10 = type metadata accessor for Optional();
  sub_100026808();
  uint64_t v24 = v11;
  __chkstk_darwin(v12);
  char v14 = (char *)&v24 - v13;
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 8);
  uint64_t v16 = swift_retain();
  v15(v16, v8, v5, v2);
  if (!v0)
  {
    uint64_t v18 = v24;
    uint64_t v17 = v25;
    char v19 = v26;
    uint64_t v20 = v27;
    if (sub_100027BA4((uint64_t)v14, 1, v5) == 1)
    {
      (*(void (**)(char *, uint64_t))(v18 + 8))(v14, v10);
      if (v19)
      {
        long long v17[3] = v10;
        void v17[4] = swift_getWitnessTable();
        uint64_t v21 = sub_10002E5E8(v17);
        sub_1000250D0((uint64_t)v21);
      }
      else
      {
        sub_100122878();
        sub_100024A30();
        *(void *)(v23 + 8) = 0;
        *(void *)(v23 + 16) = 0;
        *(void *)uint64_t v23 = 6;
        *(unsigned char *)(v23 + 24) = 4;
        swift_willThrow();
      }
    }
    else
    {
      long long v17[3] = v5;
      void v17[4] = v20;
      uint64_t v22 = sub_10002E5E8(v17);
      (*(void (**)(uint64_t *, char *, uint64_t))(*(void *)(v5 - 8) + 32))(v22, v14, v5);
    }
  }
  sub_100024A18();
}

uint64_t SQLiteUnsafeType<>.getSQLDataType()()
{
  sub_10001DEBC();
  v0();
  uint64_t result = sub_100016708();
  switch(v2)
  {
    case 1:
      uint64_t result = 2;
      break;
    case 2:
    case 3:
    case 4:
    case 5:
    case 9:
      uint64_t result = 0;
      break;
    case 6:
    case 7:
    case 8:
      uint64_t result = 3;
      break;
    case 10:
      sub_100122878();
      sub_100024A30();
      sub_1000185FC();
      uint64_t result = sub_100024D2C(v3, v4);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t SQLiteUnsafeType<>.unwrapIfOptional()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  a3[3] = a1;
  a3[4] = a2;
  uint64_t v5 = sub_10002E5E8(a3);
  int v6 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16);

  return v6(v5, v3, a1);
}

uint64_t static Bool.sqlColumnType.getter()
{
  return 9;
}

uint64_t static Bool.create(from:)@<X0>(uint64_t a1@<X8>)
{
  Swift::String v2 = String.lowercased()();
  Swift::Bool value = Bool.init(_:)(v2).value;
  *(void *)(a1 + 24) = sub_10002572C(&qword_1002235A8);
  uint64_t result = sub_1001506BC(&qword_1002235B0, &qword_1002235A8);
  *(void *)(a1 + 32) = result;
  *(unsigned char *)a1 = value;
  return result;
}

uint64_t sub_10014E8AC@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v4 = *v3;
  *(void *)(a3 + 24) = result;
  *(void *)(a3 + 32) = a2;
  *(unsigned char *)a3 = v4;
  return result;
}

uint64_t sub_10014E8BC@<X0>(Swift::Int at@<X1>, char a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v8 = v5;
  if ((a2 & 1) == 0) {
    goto LABEL_5;
  }
  uint64_t result = SQLiteRow.type(at:)(at);
  uint64_t v8 = v12;
  if (v12) {
    return result;
  }
  if (result == 4)
  {
    *(void *)(a5 + 24) = sub_10002572C(&qword_1002235A8);
    uint64_t result = sub_1001506BC(&qword_1002235B0, &qword_1002235A8);
    *(void *)(a5 + 32) = result;
    char v13 = 2;
  }
  else
  {
LABEL_5:
    *(void *)(a5 + 24) = a3;
    *(void *)(a5 + 32) = a4;
    uint64_t v14 = swift_retain();
    uint64_t result = (uint64_t)Bool.init(with:column:)(v14, at);
    if (v8) {
      return sub_10014E3C0(a5);
    }
    char v13 = result & 1;
  }
  *(unsigned char *)a5 = v13;
  return result;
}

uint64_t static Float.sqlColumnType.getter()
{
  return 6;
}

uint64_t static Float.create(from:)()
{
  sub_10002EDE8();
  unint64_t v3 = sub_10010B7C4(v0, v1);
  *(void *)(v2 + 24) = sub_10002572C(&qword_1002235B8);
  uint64_t result = sub_1001506BC(&qword_1002235C0, &qword_1002235B8);
  *(void *)(v2 + 32) = result;
  *(_DWORD *)uint64_t v2 = v3;
  *(unsigned char *)(v2 + 4) = BYTE4(v3) & 1;
  return result;
}

float sub_10014EA18@<S0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  float result = *v3;
  *(void *)(a3 + 24) = a1;
  *(void *)(a3 + 32) = a2;
  *(float *)a3 = result;
  return result;
}

uint64_t sub_10014EA28@<X0>(Swift::Int at@<X1>, char a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v8 = v5;
  if ((a2 & 1) == 0) {
    goto LABEL_5;
  }
  uint64_t result = SQLiteRow.type(at:)(at);
  uint64_t v8 = v12;
  if (v12) {
    return result;
  }
  if (result == 4)
  {
    *(void *)(a5 + 24) = sub_10002572C(&qword_1002235B8);
    uint64_t result = sub_1001506BC(&qword_1002235C0, &qword_1002235B8);
    *(void *)(a5 + 32) = result;
    *(_DWORD *)a5 = 0;
    *(unsigned char *)(a5 + 4) = 1;
  }
  else
  {
LABEL_5:
    *(void *)(a5 + 24) = a3;
    *(void *)(a5 + 32) = a4;
    uint64_t v13 = swift_retain();
    uint64_t result = (uint64_t)Float.init(with:column:)(v13, at);
    if (v8) {
      return sub_10014E3C0(a5);
    }
    else {
      *(_DWORD *)a5 = v14;
    }
  }
  return result;
}

uint64_t sub_10014EB08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  swift_bridgeObjectRetain();
  unint64_t v6 = sub_10010B7C4(a1, a2);
  *(void *)(a3 + 24) = sub_10002572C(&qword_1002235B8);
  uint64_t result = sub_1001506BC(&qword_1002235C0, &qword_1002235B8);
  *(void *)(a3 + 32) = result;
  *(_DWORD *)a3 = v6;
  *(unsigned char *)(a3 + 4) = BYTE4(v6) & 1;
  return result;
}

uint64_t static Double.sqlColumnType.getter()
{
  return 7;
}

uint64_t static Double.create(from:)()
{
  sub_10002EDE8();
  uint64_t v3 = sub_10014EC20(v0, v1);
  char v5 = v4;
  *(void *)(v2 + 24) = sub_10002572C(&qword_1002235C8);
  uint64_t result = sub_1001506BC(&qword_1002235D0, &qword_1002235C8);
  *(void *)(v2 + 32) = result;
  *(void *)uint64_t v2 = v3;
  *(unsigned char *)(v2 + 8) = v5 & 1;
  return result;
}

uint64_t sub_10014EC20(uint64_t a1, uint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    _StringGuts._slowWithCString<A>(_:)();
    swift_bridgeObjectRelease();
    char v6 = v9;
  }
  else
  {
    __chkstk_darwin(a1);
    if ((a2 & 0x2000000000000000) != 0)
    {
      char v6 = (v3 > 0x20u || ((0x100003E01uLL >> v3) & 1) == 0)
        && (uint64_t v7 = (unsigned char *)_swift_stdlib_strtod_clocale()) != 0
        && *v7 == 0;
      swift_bridgeObjectRelease();
    }
    else
    {
      if ((v3 & 0x1000000000000000) != 0)
      {
        uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v5 = v3 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v4 = _StringObject.sharedUTF8.getter();
      }
      char v6 = sub_10010EE8C(v4, v5, (void (*)(uint64_t *__return_ptr))sub_1001507C0);
      swift_bridgeObjectRelease();
    }
  }
  if (v6) {
    return 0;
  }
  else {
    return 0;
  }
}

double sub_10014EDB0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double result = *v3;
  *(void *)(a3 + 24) = a1;
  *(void *)(a3 + 32) = a2;
  *(double *)a3 = result;
  return result;
}

uint64_t sub_10014EDC0@<X0>(Swift::Int at@<X1>, char a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v8 = v5;
  if (a2)
  {
    uint64_t result = SQLiteRow.type(at:)(at);
    uint64_t v8 = v12;
    if (v12) {
      return result;
    }
    if (result == 4)
    {
      *(void *)(a5 + 24) = sub_10002572C(&qword_1002235C8);
      uint64_t result = sub_1001506BC(&qword_1002235D0, &qword_1002235C8);
      *(void *)(a5 + 32) = result;
      *(void *)a5 = 0;
      *(unsigned char *)(a5 + 8) = 1;
      return result;
    }
  }
  *(void *)(a5 + 24) = a3;
  *(void *)(a5 + 32) = a4;
  swift_retain();
  uint64_t result = sub_10015C798();
  if (v8)
  {
    swift_release();
    return sub_10014E3C0(a5);
  }
  if (at < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_12;
  }
  if (at > 0x7FFFFFFF)
  {
LABEL_12:
    __break(1u);
    return result;
  }
  double v13 = sqlite3_column_double((sqlite3_stmt *)result, at);
  uint64_t result = swift_release();
  *(double *)a5 = v13;
  return result;
}

uint64_t sub_10014EEE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  swift_bridgeObjectRetain();
  uint64_t v6 = sub_10014EC20(a1, a2);
  char v8 = v7;
  *(void *)(a3 + 24) = sub_10002572C(&qword_1002235C8);
  uint64_t result = sub_1001506BC(&qword_1002235D0, &qword_1002235C8);
  *(void *)(a3 + 32) = result;
  *(void *)a3 = v6;
  *(unsigned char *)(a3 + 8) = v8 & 1;
  return result;
}

uint64_t static String.create(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  a3[3] = &type metadata for String;
  a3[4] = &protocol witness table for String;
  *a3 = a1;
  a3[1] = a2;
  return swift_bridgeObjectRetain();
}

uint64_t sub_10014EFAC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *v3;
  uint64_t v4 = v3[1];
  a3[3] = a1;
  a3[4] = a2;
  *a3 = v5;
  a3[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t sub_10014EFC0@<X0>(uint64_t a1@<X1>, char a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t *a5@<X8>)
{
  uint64_t v11 = swift_retain();
  uint64_t result = (uint64_t)String.init(with:column:)(v11, a1);
  if (!v5)
  {
    if (v13)
    {
      a5[3] = a3;
      a5[4] = a4;
      *a5 = result;
      a5[1] = v13;
    }
    else if (a2)
    {
      a5[3] = sub_10002572C(&qword_10021D050);
      uint64_t result = sub_1001506BC((unint64_t *)&qword_100223688, &qword_10021D050);
      a5[4] = result;
      *a5 = 0;
      a5[1] = 0;
    }
    else
    {
      sub_100122878();
      swift_allocError();
      *(void *)(v14 + 8) = 0;
      *(void *)(v14 + 16) = 0;
      *(void *)uint64_t v14 = 6;
      *(unsigned char *)(v14 + 24) = 4;
      return swift_willThrow();
    }
  }
  return result;
}

uint64_t sub_10014F0A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  a5[3] = a3;
  a5[4] = a4;
  *a5 = a1;
  a5[1] = a2;
  return swift_bridgeObjectRetain();
}

unint64_t static Data.create(from:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = Data.init(base64Encoded:options:)();
  uint64_t v4 = v3;
  a1[3] = sub_10002572C(&qword_1002235D8);
  unint64_t result = sub_10014F120();
  a1[4] = result;
  *a1 = v2;
  a1[1] = v4;
  return result;
}

unint64_t sub_10014F120()
{
  unint64_t result = qword_1002235E0;
  if (!qword_1002235E0)
  {
    sub_1000371D4(&qword_1002235D8);
    sub_100133864();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002235E0);
  }
  return result;
}

uint64_t sub_10014F194@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = *v3;
  unint64_t v5 = v3[1];
  a3[3] = a1;
  a3[4] = a2;
  *a3 = v4;
  a3[1] = v5;
  return sub_100027BCC(v4, v5);
}

uint64_t sub_10014F1AC@<X0>(uint64_t a1@<X1>, char a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v11 = swift_retain();
  uint64_t result = (uint64_t)Data.init(with:column:)(v11, a1);
  if (!v5)
  {
    if (v13 >> 60 == 15)
    {
      if (a2)
      {
        *(void *)(a5 + 24) = sub_10002572C(&qword_1002235D8);
        uint64_t result = sub_10014F120();
        *(void *)(a5 + 32) = result;
        *(_OWORD *)a5 = xmmword_1001A3D10;
      }
      else
      {
        sub_100122878();
        swift_allocError();
        *(void *)(v14 + 8) = 0;
        *(void *)(v14 + 16) = 0;
        *(void *)uint64_t v14 = 6;
        *(unsigned char *)(v14 + 24) = 4;
        return swift_willThrow();
      }
    }
    else
    {
      *(void *)(a5 + 24) = a3;
      *(void *)(a5 + 32) = a4;
      *(void *)a5 = result;
      *(void *)(a5 + 8) = v13;
    }
  }
  return result;
}

uint64_t static Optional<A>.sqlColumnType.getter()
{
  sub_10001DEBC();
  return v0();
}

uint64_t static Optional<A>.create(from:at:nullable:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 56))();
}

uint64_t static Optional<A>.create(from:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v5 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v5 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v5) {
    return (*(uint64_t (**)(void))(a3 + 64))();
  }
  a4[3] = type metadata accessor for Optional();
  a4[4] = swift_getWitnessTable();
  char v7 = sub_10002E5E8(a4);
  return sub_1000250D0((uint64_t)v7);
}

uint64_t Optional<A>.getSQLDataType()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  sub_100026B00();
  uint64_t v5 = v4;
  __chkstk_darwin(v6);
  char v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100026B00();
  double v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, double))(v13 + 16))(v12, v14, v10);
  if (sub_100027BA4((uint64_t)v12, 1, v3) == 1) {
    return 4;
  }
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v8, v12, v3);
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 40))(v3, a2);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v3);
  return v15;
}

uint64_t Optional<A>.unwrapIfOptional()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 16);
  sub_100026808();
  uint64_t v7 = v6;
  __chkstk_darwin(v8);
  sub_10000DFD0();
  uint64_t v11 = v10 - v9;
  sub_100026808();
  __chkstk_darwin(v12);
  sub_10000DFD0();
  uint64_t v15 = v14 - v13;
  (*(void (**)(uint64_t, uint64_t))(v16 + 16))(v14 - v13, v17);
  uint64_t result = sub_100027BA4(v15, 1, v5);
  if (result == 1)
  {
    *(void *)(a3 + 32) = 0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v11, v15, v5);
    (*(void (**)(uint64_t, uint64_t))(a2 + 48))(v5, a2);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v11, v5);
  }
  return result;
}

uint64_t sub_10014F678(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(a2 - 8) + 24))();
}

uint64_t sub_10014F6B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a2 - 8);
  uint64_t v4 = *(void *)(v2 - 8);
  __chkstk_darwin(a1);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, double))(v11 + 16))(v10, v12, v8);
  if (sub_100027BA4((uint64_t)v10, 1, v2) == 1) {
    return 4;
  }
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v10, v2);
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 40))(v2, v3);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v2);
  return v13;
}

uint64_t sub_10014F874@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a2 - 8);
  uint64_t v6 = *(void *)(v4 - 8);
  __chkstk_darwin(a1);
  double v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, double))(v13 + 16))(v12, v14, v10);
  uint64_t result = sub_100027BA4((uint64_t)v12, 1, v4);
  if (result == 1)
  {
    *(void *)(a3 + 32) = 0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v12, v4);
    (*(void (**)(uint64_t, uint64_t))(v5 + 48))(v4, v5);
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v4);
  }
  return result;
}

uint64_t sub_10014FA2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(*(void *)(a5 - 8) + 56))();
}

uint64_t sub_10014FA68@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v6 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v6 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v6) {
    return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 64))();
  }
  a5[3] = a3;
  a5[4] = a4;
  double v8 = sub_10002E5E8(a5);
  return sub_10002538C((uint64_t)v8, 1, 1, *(void *)(a3 + 16));
}

uint64_t static RawRepresentable<>.sqlColumnType.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

unint64_t sub_10014FB40(uint64_t a1)
{
  unint64_t result = sub_10014FB68();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_10014FB68()
{
  unint64_t result = qword_1002235E8;
  if (!qword_1002235E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002235E8);
  }
  return result;
}

uint64_t sub_10014FBB4(uint64_t a1)
{
  *(void *)(a1 + 8) = swift_getWitnessTable();
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 16) = result;
  return result;
}

void sub_10014FC40()
{
  sub_100026540();
  if (v0) {
    goto LABEL_7;
  }
  sub_10000E218();
  if (v2 == v3)
  {
    sub_1000214FC();
    if (!(v2 ^ v3 | v5)) {
      goto LABEL_12;
    }
    if (sqlite3_column_int(v4, v1) < -128)
    {
      sub_100122878();
      uint64_t v6 = sub_100024A30();
      sub_100026EAC(v6, v7);
LABEL_7:
      swift_release();
LABEL_8:
      sub_100024D64();
      return;
    }
    sub_10002552C();
    if (v1 <= 127) {
      goto LABEL_8;
    }
    __break(1u);
  }
  __break(1u);
LABEL_12:
  __break(1u);
}

void sub_10014FCCC()
{
  sub_100026540();
  if (v0) {
    goto LABEL_7;
  }
  sub_10000E218();
  if (v2 == v3)
  {
    sub_1000214FC();
    if (!(v2 ^ v3 | v5)) {
      goto LABEL_12;
    }
    if (sqlite3_column_int(v4, v1) < -32768)
    {
      sub_100122878();
      uint64_t v6 = sub_100024A30();
      sub_100026EAC(v6, v7);
LABEL_7:
      swift_release();
LABEL_8:
      sub_100024D64();
      return;
    }
    sub_10002552C();
    if (v1 < 0x8000) {
      goto LABEL_8;
    }
    __break(1u);
  }
  __break(1u);
LABEL_12:
  __break(1u);
}

void sub_10014FD58()
{
  sub_100026540();
  if (v0) {
    goto LABEL_6;
  }
  sub_10000E218();
  if (v2 == v3)
  {
    sub_1000214FC();
    if (!(v2 ^ v3 | v5)) {
      goto LABEL_8;
    }
    sqlite3_column_int(v4, v1);
LABEL_6:
    swift_release();
    return;
  }
  __break(1u);
LABEL_8:
  __break(1u);
}

uint64_t sub_10014FDBC()
{
  sub_100026540();
  if (v0) {
    goto LABEL_7;
  }
  sub_10000E218();
  if (v2 != v3)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  sub_1000214FC();
  if (!(v2 ^ v3 | v5)) {
    goto LABEL_10;
  }
  unsigned int v6 = sqlite3_column_int(v4, v1);
  if ((v6 & 0x80000000) != 0)
  {
    sub_100122878();
    uint64_t v8 = sub_100024A30();
    sub_100026EAC(v8, v9);
    goto LABEL_7;
  }
  if (v6 < 0x100)
  {
LABEL_7:
    swift_release();
    return sub_100024D64();
  }
LABEL_11:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_10014FEA0()
{
  sub_100026540();
  if (v0) {
    goto LABEL_2;
  }
  sub_10000E218();
  if (v2 != v3)
  {
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  sub_1000214FC();
  if (!(v2 ^ v3 | v5)) {
    goto LABEL_11;
  }
  if (sqlite3_column_int(v4, v1) < 0)
  {
    sub_100122878();
    uint64_t v6 = sub_100024A30();
    sub_100026EAC(v6, v7);
LABEL_2:
    swift_release();
LABEL_8:
    sub_100024D64();
    return;
  }
  sub_10002552C();
  if (!HIWORD(v1)) {
    goto LABEL_8;
  }
LABEL_12:
  __break(1u);
}

void sub_10014FF30()
{
  sub_100026540();
  if (v0) {
    goto LABEL_2;
  }
  sub_10000E218();
  if (v2 != v3)
  {
    __break(1u);
  }
  else
  {
    sub_1000214FC();
    if (v2 ^ v3 | v5)
    {
      if ((sqlite3_column_int(v4, v1) & 0x80000000) == 0)
      {
        sub_10002552C();
        goto LABEL_8;
      }
      sub_100122878();
      uint64_t v6 = sub_100024A30();
      sub_100026EAC(v6, v7);
LABEL_2:
      swift_release();
LABEL_8:
      sub_100024D64();
      return;
    }
  }
  __break(1u);
}

void sub_10014FFB4()
{
}

void sub_100150000()
{
}

void sub_10015004C()
{
  sub_100017EC4();
  sub_10002A7AC();
  if (v4)
  {
    sub_100025DE0();
    if (v1) {
      goto LABEL_9;
    }
    sub_100028DC0();
    if (v5)
    {
      uint64_t v6 = sub_10002572C(v3);
      *(void *)(v0 + 32) = sub_1000244F8(v6);
      *(_WORD *)uint64_t v0 = 256;
      goto LABEL_9;
    }
  }
  sub_1000261D8();
  sub_100021D88();
  char v7 = v2();
  if (v1) {
    sub_10014E3C0(v0);
  }
  else {
    *(unsigned char *)uint64_t v0 = v7;
  }
LABEL_9:
  sub_100024A18();
}

uint64_t sub_1001500DC@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int16 v4 = *v3;
  *(void *)(a3 + 24) = result;
  *(void *)(a3 + 32) = a2;
  *(_WORD *)a3 = v4;
  return result;
}

void sub_1001500EC()
{
}

void sub_100150138()
{
}

void sub_100150184()
{
  sub_100017EC4();
  sub_10002A7AC();
  if (v4)
  {
    sub_100025DE0();
    if (v1) {
      goto LABEL_9;
    }
    sub_100028DC0();
    if (v5)
    {
      uint64_t v6 = sub_10002572C(v3);
      *(void *)(v0 + 32) = sub_1000244F8(v6);
      *(_WORD *)uint64_t v0 = 0;
      *(unsigned char *)(v0 + 2) = 1;
      goto LABEL_9;
    }
  }
  sub_1000261D8();
  sub_100021D88();
  __int16 v7 = v2();
  if (v1) {
    sub_10014E3C0(v0);
  }
  else {
    *(_WORD *)uint64_t v0 = v7;
  }
LABEL_9:
  sub_100024A18();
}

uint64_t sub_100150218@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4 = *v3;
  *(void *)(a3 + 24) = result;
  *(void *)(a3 + 32) = a2;
  *(_DWORD *)a3 = v4;
  return result;
}

void sub_100150228()
{
}

void sub_100150274()
{
}

void sub_1001502C0()
{
  sub_100017EC4();
  sub_10002A7AC();
  if (v4)
  {
    sub_100025DE0();
    if (v1) {
      goto LABEL_9;
    }
    sub_100028DC0();
    if (v5)
    {
      uint64_t v6 = sub_10002572C(v3);
      *(void *)(v0 + 32) = sub_1000244F8(v6);
      *(_DWORD *)uint64_t v0 = 0;
      *(unsigned char *)(v0 + 4) = 1;
      goto LABEL_9;
    }
  }
  sub_1000261D8();
  sub_100021D88();
  int v7 = v2();
  if (v1) {
    sub_10014E3C0(v0);
  }
  else {
    *(_DWORD *)uint64_t v0 = v7;
  }
LABEL_9:
  sub_100024A18();
}

void sub_100150354()
{
  sub_100026540();
  if (v0) {
    goto LABEL_6;
  }
  sub_10000E218();
  if (v2 == v3)
  {
    sub_1000214FC();
    if (!(v2 ^ v3 | v5)) {
      goto LABEL_8;
    }
    sqlite3_column_int64(v4, v1);
LABEL_6:
    swift_release();
    return;
  }
  __break(1u);
LABEL_8:
  __break(1u);
}

void sub_1001503B8()
{
}

void sub_1001503D0()
{
  sub_100026540();
  if (v0) {
    goto LABEL_7;
  }
  sub_10000E218();
  if (v2 == v3)
  {
    sub_1000214FC();
    if (!(v2 ^ v3 | v5)) {
      goto LABEL_9;
    }
    if (sqlite3_column_int64(v4, v1) < 0)
    {
      sub_100122878();
      uint64_t v6 = sub_100024A30();
      sub_100026EAC(v6, v7);
    }
LABEL_7:
    swift_release();
    return;
  }
  __break(1u);
LABEL_9:
  __break(1u);
}

void sub_100150460()
{
}

void sub_1001504AC()
{
}

void sub_1001504DC()
{
  sub_100017EC4();
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v8 = v0;
  double v10 = v9;
  if (v11)
  {
    uint64_t v12 = v3;
    uint64_t v13 = v2;
    SQLiteRow.type(at:)(v1);
    uint64_t v8 = v14;
    if (v14) {
      goto LABEL_9;
    }
    sub_100028DC0();
    if (v15)
    {
      v10[3] = sub_10002572C(v13);
      uint64_t v16 = sub_1001506BC(v12, v13);
      sub_100028298(v16);
      goto LABEL_9;
    }
  }
  v10[3] = v7;
  v10[4] = v5;
  swift_retain();
  sub_1001503D0();
  if (v8) {
    sub_10014E3C0((uint64_t)v10);
  }
  else {
    *double v10 = v17;
  }
LABEL_9:
  sub_100024A18();
}

uint64_t sub_1001505A8@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *v3;
  a3[3] = result;
  a3[4] = a2;
  *a3 = v4;
  return result;
}

void sub_1001505B8()
{
}

void sub_100150604()
{
  sub_100017EC4();
  sub_10002A7AC();
  if (v4)
  {
    sub_100025DE0();
    if (v1) {
      goto LABEL_9;
    }
    sub_100028DC0();
    if (v5)
    {
      uint64_t v6 = sub_10002572C(v3);
      uint64_t v7 = sub_1000244F8(v6);
      sub_100028298(v7);
      goto LABEL_9;
    }
  }
  sub_1000261D8();
  sub_100021D88();
  uint64_t v8 = v2();
  if (v1) {
    sub_10014E3C0((uint64_t)v0);
  }
  else {
    *uint64_t v0 = v8;
  }
LABEL_9:
  sub_100024A18();
}

void sub_10015068C()
{
}

uint64_t sub_1001506BC(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1000371D4(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *sub_100150720@<X0>(unsigned char *result@<X0>, uint64_t (*a2)(void)@<X2>, BOOL *a3@<X8>)
{
  unsigned int v4 = *result;
  BOOL v5 = v4 > 0x20;
  uint64_t v6 = (1 << v4) & 0x100003E01;
  BOOL v7 = v5 || v6 == 0;
  v8 = v7 && (uint64_t result = (unsigned char *)a2()) != 0 && *result == 0;
  *a3 = v8;
  return result;
}

unsigned char *sub_100150790@<X0>(unsigned char *a1@<X0>, BOOL *a2@<X8>)
{
  return sub_100150720(a1, (uint64_t (*)(void))&__swift_stdlib_strtod_clocale, a2);
}

void *sub_1001507C0@<X0>(unsigned char *a1@<X8>)
{
  return sub_10010EF74(a1);
}

void sub_1001507EC()
{
}

uint64_t static AvroPrimitiveSchema.float.getter()
{
  return 4;
}

uint64_t static AvroPrimitiveSchema.double.getter()
{
  return 5;
}

uint64_t sub_100150814@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 24) = sub_10002572C(&qword_100223678);
  uint64_t result = sub_100156FB4(&qword_100223680, &qword_100223678);
  *(void *)(a3 + 32) = result;
  uint64_t v7 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v7 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v7)
  {
    uint64_t result = sub_100153034(a1, a2, 10);
    if ((result & 0x10000) != 0)
    {
      swift_bridgeObjectRetain();
      unsigned int v8 = sub_1001552E8();
      uint64_t result = swift_bridgeObjectRelease();
    }
    else
    {
      unsigned int v8 = result;
    }
    int v9 = (v8 >> 8) & 1;
    if (v9) {
      char v10 = 0;
    }
    else {
      char v10 = v8;
    }
  }
  else
  {
    char v10 = 0;
    LOBYTE(v9) = 1;
  }
  *(unsigned char *)a3 = v10;
  *(unsigned char *)(a3 + 1) = v9;
  return result;
}

uint64_t sub_100150914@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 24) = sub_10002572C(&qword_100223658);
  uint64_t result = sub_100156FB4(&qword_100223660, &qword_100223658);
  *(void *)(a3 + 32) = result;
  uint64_t v7 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v7 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v7)
  {
    uint64_t result = sub_1001538A4(a1, a2, 10);
    int v8 = result;
    if ((result & 0x1000000) != 0)
    {
      swift_bridgeObjectRetain();
      int v8 = sub_100155C1C();
      uint64_t result = swift_bridgeObjectRelease();
    }
    unsigned int v9 = (v8 & 0x10000u) >> 16;
    if ((v8 & 0x10000) != 0) {
      __int16 v10 = 0;
    }
    else {
      __int16 v10 = v8;
    }
  }
  else
  {
    __int16 v10 = 0;
    LOBYTE(v9) = 1;
  }
  *(_WORD *)a3 = v10;
  *(unsigned char *)(a3 + 2) = v9 & 1;
  return result;
}

uint64_t sub_100150A14@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 24) = sub_10002572C(&qword_100223638);
  uint64_t result = sub_100156FB4(&qword_100223640, &qword_100223638);
  *(void *)(a3 + 32) = result;
  uint64_t v7 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v7 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v7)
  {
    uint64_t result = sub_100154114(a1, a2, 10);
    uint64_t v8 = result;
    if ((result & 0x10000000000) != 0)
    {
      swift_bridgeObjectRetain();
      uint64_t v8 = sub_1001564E0();
      uint64_t result = swift_bridgeObjectRelease();
    }
    unint64_t v9 = (v8 & (unint64_t)&_mh_execute_header) >> 32;
    if ((v8 & (unint64_t)&_mh_execute_header) != 0) {
      int v10 = 0;
    }
    else {
      int v10 = v8;
    }
  }
  else
  {
    int v10 = 0;
    LOBYTE(v9) = 1;
  }
  *(_DWORD *)a3 = v10;
  *(unsigned char *)(a3 + 4) = v9 & 1;
  return result;
}

uint64_t sub_100150B14@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 24) = sub_10002572C(&qword_100223668);
  uint64_t result = sub_100156FB4(&qword_100223670, &qword_100223668);
  *(void *)(a3 + 32) = result;
  uint64_t v7 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v7 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v7)
  {
    uint64_t result = sub_100154D44(a1, a2, 10);
    if ((result & 0x10000) != 0)
    {
      swift_bridgeObjectRetain();
      unsigned int v8 = sub_1001552E8();
      uint64_t result = swift_bridgeObjectRelease();
    }
    else
    {
      unsigned int v8 = result;
    }
    int v9 = (v8 >> 8) & 1;
    if (v9) {
      char v10 = 0;
    }
    else {
      char v10 = v8;
    }
  }
  else
  {
    char v10 = 0;
    LOBYTE(v9) = 1;
  }
  *(unsigned char *)a3 = v10;
  *(unsigned char *)(a3 + 1) = v9;
  return result;
}

uint64_t sub_100150C14@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 24) = sub_10002572C(&qword_100223648);
  uint64_t result = sub_100156FB4(&qword_100223650, &qword_100223648);
  *(void *)(a3 + 32) = result;
  uint64_t v7 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v7 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v7)
  {
    uint64_t result = sub_100155678(a1, a2, 10);
    int v8 = result;
    if ((result & 0x1000000) != 0)
    {
      swift_bridgeObjectRetain();
      int v8 = sub_100155C1C();
      uint64_t result = swift_bridgeObjectRelease();
    }
    unsigned int v9 = (v8 & 0x10000u) >> 16;
    if ((v8 & 0x10000) != 0) {
      __int16 v10 = 0;
    }
    else {
      __int16 v10 = v8;
    }
  }
  else
  {
    __int16 v10 = 0;
    LOBYTE(v9) = 1;
  }
  *(_WORD *)a3 = v10;
  *(unsigned char *)(a3 + 2) = v9 & 1;
  return result;
}

uint64_t sub_100150D14@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 24) = sub_10002572C(&qword_100223628);
  uint64_t result = sub_100156FB4(&qword_100223630, &qword_100223628);
  *(void *)(a3 + 32) = result;
  uint64_t v7 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v7 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v7)
  {
    uint64_t result = sub_100155FA4(a1, a2, 10);
    uint64_t v8 = result;
    if ((result & 0x10000000000) != 0)
    {
      swift_bridgeObjectRetain();
      uint64_t v8 = sub_1001564E0();
      uint64_t result = swift_bridgeObjectRelease();
    }
    unint64_t v9 = (v8 & (unint64_t)&_mh_execute_header) >> 32;
    if ((v8 & (unint64_t)&_mh_execute_header) != 0) {
      int v10 = 0;
    }
    else {
      int v10 = v8;
    }
  }
  else
  {
    int v10 = 0;
    LOBYTE(v9) = 1;
  }
  *(_DWORD *)a3 = v10;
  *(unsigned char *)(a3 + 4) = v9 & 1;
  return result;
}

uint64_t static SQLiteInteger64.create(from:)@<X0>(uint64_t *a1@<X8>)
{
  return sub_100150FAC(a1);
}

void sub_100150E2C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = sub_100025544(a1, a2, a3);
  uint64_t v5 = sub_10002662C(v4);
  sub_1000295B8(v5);
  if (v6)
  {
    uint64_t v7 = sub_10002E888();
    sub_100154650(v7, v8, v9);
    if ((v11 & 0x100) != 0)
    {
      swift_bridgeObjectRetain();
      uint64_t v12 = sub_100156CE0();
      char v15 = v14;
      swift_bridgeObjectRelease();
      int v13 = v15 & 1;
    }
    else
    {
      uint64_t v12 = v10;
      int v13 = v11 & 1;
    }
    if (v13) {
      uint64_t v16 = 0;
    }
    else {
      uint64_t v16 = v12;
    }
  }
  else
  {
    uint64_t v16 = 0;
    LOBYTE(v13) = 1;
  }
  *(void *)uint64_t v3 = v16;
  *(unsigned char *)(v3 + 8) = v13;
}

void sub_100150EEC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = sub_100025544(a1, a2, a3);
  uint64_t v5 = sub_10002662C(v4);
  sub_1000295B8(v5);
  if (v6)
  {
    uint64_t v7 = sub_10002E888();
    sub_100156850(v7, v8, v9);
    if ((v11 & 0x100) != 0)
    {
      swift_bridgeObjectRetain();
      uint64_t v12 = sub_100156CE0();
      char v15 = v14;
      swift_bridgeObjectRelease();
      int v13 = v15 & 1;
    }
    else
    {
      uint64_t v12 = v10;
      int v13 = v11 & 1;
    }
    if (v13) {
      uint64_t v16 = 0;
    }
    else {
      uint64_t v16 = v12;
    }
  }
  else
  {
    uint64_t v16 = 0;
    LOBYTE(v13) = 1;
  }
  *(void *)uint64_t v3 = v16;
  *(unsigned char *)(v3 + 8) = v13;
}

uint64_t sub_100150FAC@<X0>(uint64_t *a1@<X8>)
{
  a1[3] = type metadata accessor for Optional();
  a1[4] = swift_getWitnessTable();
  sub_10002E5E8(a1);
  swift_bridgeObjectRetain();
  return dispatch thunk of LosslessStringConvertible.init(_:)();
}

void sub_100151070(unsigned char *a1@<X8>)
{
  sub_10014FC40();
  if (!v1) {
    *a1 = v3;
  }
}

void SQLiteInteger32.init(with:column:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  sub_100017EC4();
  a20 = v25;
  a21 = v26;
  sub_100027290();
  uint64_t v28 = v27;
  __chkstk_darwin(v29);
  sub_100157048();
  __chkstk_darwin(v30);
  sub_10002EE0C();
  __chkstk_darwin(v31);
  uint64_t v32 = (sqlite3_stmt *)sub_10015C798();
  if (v21) {
    goto LABEL_16;
  }
  uint64_t v49 = v28;
  if (v23 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (v23 <= 0x7FFFFFFF)
  {
    int v33 = sqlite3_column_int(v32, v23);
    uint64_t v34 = *(void *)(v24 + 24);
    if (v22 == &type metadata for Int32) {
      goto LABEL_15;
    }
    sub_10015710C();
    dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v35 = sub_1001570EC();
    if (v34)
    {
      if (v35 > 32)
      {
        int v50 = v33;
        unint64_t v36 = sub_100152A9C();
        sub_100020D60((uint64_t)&v50, (uint64_t)&type metadata for Int32, v36);
        char v37 = sub_100023D8C();
        uint64_t v38 = *(void (**)(void))(v49 + 8);
        sub_10002C6CC();
        v38();
        sub_10002C6CC();
        v38();
LABEL_14:
        if ((v37 & 1) == 0) {
          goto LABEL_15;
        }
        goto LABEL_19;
      }
    }
    else if (v35 > 31)
    {
      a11 = v33;
      uint64_t v42 = sub_100026368();
      v43(v42);
      if (v33 < 0)
      {
        char v46 = *(void (**)(void))(v49 + 8);
        sub_10002C6CC();
        v46();
        sub_10002C6CC();
        v46();
        goto LABEL_19;
      }
      unint64_t v44 = sub_100152A9C();
      sub_100020D60((uint64_t)&a11, (uint64_t)&type metadata for Int32, v44);
      char v37 = sub_10001860C();
      uint64_t v45 = *(void (**)(void))(v49 + 8);
      sub_100026558();
      v45();
      sub_100026558();
      v45();
      sub_100026558();
      v45();
      goto LABEL_14;
    }
    int v39 = sub_100024170();
    uint64_t v40 = sub_10002DF6C();
    v41(v40);
    if (v33 >= v39)
    {
LABEL_15:
      sub_100152A9C();
      sub_100029338();
LABEL_16:
      swift_release();
LABEL_17:
      sub_10001EDB4();
      sub_100024A18();
      return;
    }
LABEL_19:
    sub_100122878();
    uint64_t v47 = sub_100024A30();
    sub_10002B1F0(v47, v48);
    swift_release();
    goto LABEL_17;
  }
  __break(1u);
}

uint64_t sub_100151350(uint64_t a1, uint64_t a2)
{
  return sub_10015136C(a1, a2, *v2);
}

uint64_t sub_10015136C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = sub_10015C798();
  if (!v3)
  {
    if (a2 < (uint64_t)0xFFFFFFFF80000000)
    {
      __break(1u);
    }
    else if (a2 <= 0x7FFFFFFF)
    {
      uint64_t result = sqlite3_bind_int((sqlite3_stmt *)result, a2, a3);
      if (result)
      {
        uint64_t v7 = result;
        sub_100122878();
        swift_allocError();
        *(void *)uint64_t v8 = v7;
        *(void *)(v8 + 8) = 0xD000000000000012;
        *(void *)(v8 + 16) = 0x80000001001B9920;
        *(unsigned char *)(v8 + 24) = 0;
        return swift_willThrow();
      }
      return result;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_10015142C(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result = sub_10015C798();
  if (!v3)
  {
    if (a2 < (uint64_t)0xFFFFFFFF80000000)
    {
      __break(1u);
    }
    else if (a2 <= 0x7FFFFFFF)
    {
      uint64_t result = sqlite3_bind_int((sqlite3_stmt *)result, a2, a3);
      if (result)
      {
        uint64_t v7 = result;
        sub_100122878();
        swift_allocError();
        *(void *)uint64_t v8 = v7;
        *(void *)(v8 + 8) = 0xD000000000000012;
        *(void *)(v8 + 16) = 0x80000001001B9920;
        *(unsigned char *)(v8 + 24) = 0;
        return swift_willThrow();
      }
      return result;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1001514EC(uint64_t a1, uint64_t a2, __int16 a3)
{
  uint64_t result = sub_10015C798();
  if (!v3)
  {
    if (a2 < (uint64_t)0xFFFFFFFF80000000)
    {
      __break(1u);
    }
    else if (a2 <= 0x7FFFFFFF)
    {
      uint64_t result = sqlite3_bind_int((sqlite3_stmt *)result, a2, a3);
      if (result)
      {
        uint64_t v7 = result;
        sub_100122878();
        swift_allocError();
        *(void *)uint64_t v8 = v7;
        *(void *)(v8 + 8) = 0xD000000000000012;
        *(void *)(v8 + 16) = 0x80000001001B9920;
        *(unsigned char *)(v8 + 24) = 0;
        return swift_willThrow();
      }
      return result;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1001515AC(uint64_t a1, uint64_t a2, unsigned __int16 a3)
{
  uint64_t result = sub_10015C798();
  if (!v3)
  {
    if (a2 < (uint64_t)0xFFFFFFFF80000000)
    {
      __break(1u);
    }
    else if (a2 <= 0x7FFFFFFF)
    {
      uint64_t result = sqlite3_bind_int((sqlite3_stmt *)result, a2, a3);
      if (result)
      {
        uint64_t v7 = result;
        sub_100122878();
        swift_allocError();
        *(void *)uint64_t v8 = v7;
        *(void *)(v8 + 8) = 0xD000000000000012;
        *(void *)(v8 + 16) = 0x80000001001B9920;
        *(unsigned char *)(v8 + 24) = 0;
        return swift_willThrow();
      }
      return result;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_10015166C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result = sub_10015C798();
  if (!v3)
  {
    if (a2 < (uint64_t)0xFFFFFFFF80000000)
    {
      __break(1u);
    }
    else if (a2 <= 0x7FFFFFFF)
    {
      uint64_t result = sqlite3_bind_int((sqlite3_stmt *)result, a2, a3);
      if (result)
      {
        uint64_t v7 = result;
        sub_100122878();
        swift_allocError();
        *(void *)uint64_t v8 = v7;
        *(void *)(v8 + 8) = 0xD000000000000012;
        *(void *)(v8 + 16) = 0x80000001001B9920;
        *(unsigned char *)(v8 + 24) = 0;
        return swift_willThrow();
      }
      return result;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_10015172C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result = sub_10015C798();
  if (!v3)
  {
    if (a2 < (uint64_t)0xFFFFFFFF80000000)
    {
      __break(1u);
    }
    else if (a2 <= 0x7FFFFFFF)
    {
      if ((a3 & 0x80000000) == 0)
      {
        uint64_t result = sqlite3_bind_int((sqlite3_stmt *)result, a2, a3);
        if (result)
        {
          uint64_t v7 = result;
          sub_100122878();
          swift_allocError();
          *(void *)uint64_t v8 = v7;
          *(void *)(v8 + 8) = 0xD000000000000012;
          *(void *)(v8 + 16) = 0x80000001001B9920;
          *(unsigned char *)(v8 + 24) = 0;
          return swift_willThrow();
        }
        return result;
      }
LABEL_10:
      __break(1u);
      return result;
    }
    __break(1u);
    goto LABEL_10;
  }
  return result;
}

void SQLiteInteger32.bind(to:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  sub_100017EC4();
  a20 = v24;
  a21 = v25;
  sub_1000250EC(v26, v27, v28, v29);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v31 = sub_100029F68(AssociatedTypeWitness);
  __chkstk_darwin(v31);
  sub_1000180A0(v32, v81);
  uint64_t v85 = v33;
  __chkstk_darwin(v34);
  sub_10002E9E8();
  __chkstk_darwin(v35);
  sub_10015716C();
  __chkstk_darwin(v36);
  sub_100157158();
  __chkstk_darwin(v37);
  sub_10002EC98();
  __chkstk_darwin(v38);
  sub_10002EE0C();
  __chkstk_darwin(v39);
  sub_100157180();
  __chkstk_darwin(v40);
  sub_100157048();
  __chkstk_darwin(v41);
  sub_100029270();
  if (v21) {
    goto LABEL_25;
  }
  sub_1000282AC();
  if (v45 != v46)
  {
    __break(1u);
    goto LABEL_40;
  }
  if (v44 > 0x7FFFFFFF)
  {
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  uint64_t v83 = v42;
  uint64_t v47 = *(void (**)(void))(v85 + 16);
  uint64_t v48 = v43;
  sub_100016718();
  v47();
  char v49 = sub_100024D70();
  sub_100016718();
  v47();
  if ((v49 & 1) == 0)
  {
    uint64_t v53 = sub_100157194();
    goto LABEL_11;
  }
  uint64_t v50 = sub_100021508();
  uint64_t v22 = *(void (**)(void))(v85 + 8);
  sub_10002C6CC();
  v22();
  if (v50 <= 32) {
    goto LABEL_12;
  }
  sub_10002A7C8();
  v51();
  signed int v87 = 0x80000000;
  if (sub_100024D70())
  {
    if (sub_100021508() >= 32)
    {
      unint64_t v74 = sub_100152A9C();
      sub_10002AEDC((uint64_t)&v87, (uint64_t)&type metadata for Int32, v74);
      sub_100157070();
      uint64_t v75 = sub_10001D810();
      ((void (*)(uint64_t))v22)(v75);
      sub_10002C6CC();
      v22();
      if (v82) {
        goto LABEL_43;
      }
    }
    else
    {
      signed int v52 = sub_1000261F4();
      sub_100025E08();
      v22();
      if (v87 > v52) {
        goto LABEL_43;
      }
    }
LABEL_12:
    uint64_t v54 = sub_100021508();
    sub_10002A7C8();
    v55();
    if (v54 < 33)
    {
      uint64_t v56 = sub_100021508();
      sub_100024400();
      v22();
      if (v56 != 32 || (sub_100024D70() & 1) != 0) {
        goto LABEL_23;
      }
    }
    else
    {
      sub_100024400();
      v22();
    }
    sub_10002A7C8();
    v57();
    a11 = 0x7FFFFFFF;
    char v58 = sub_100024D70();
    uint64_t v59 = sub_100021508();
    if (v58)
    {
      if (v59 > 32)
      {
        unint64_t v60 = sub_100152A9C();
        sub_10002AEDC((uint64_t)&a11, (uint64_t)&type metadata for Int32, v60);
        char v61 = sub_10001860C();
        sub_10000E224();
        v22();
        goto LABEL_22;
      }
    }
    else if (v59 > 31)
    {
      a10 = 0x7FFFFFFF;
      uint64_t v62 = sub_10002EC0C();
      v63(v62);
      unint64_t v64 = sub_100152A9C();
      sub_10002AEDC((uint64_t)&a10, (uint64_t)&type metadata for Int32, v64);
      char v61 = sub_100028EB4();
      sub_10000E224();
      v22();
LABEL_22:
      sub_10000E224();
      v22();
      if ((v61 & 1) == 0)
      {
LABEL_23:
        int v65 = sub_1000261F4();
        ((void (*)(uint64_t, uint64_t))v22)(v23, v48);
        if (sqlite3_bind_int(v83, v86, v65))
        {
          sub_100122878();
          uint64_t v66 = sub_100024A30();
          sub_10001AABC(v66, v67);
          sub_1000276C4(v68, (uint64_t)"Failed to bind Int");
        }
LABEL_25:
        sub_10001EDB4();
        sub_100024A18();
        return;
      }
      goto LABEL_41;
    }
    sub_1000261F4();
    sub_100024400();
    v22();
    goto LABEL_23;
  }
  char v69 = sub_100024D70();
  uint64_t v70 = sub_100021508();
  if ((v69 & 1) == 0)
  {
    if (v70 < 32)
    {
      signed int v76 = sub_1000261F4();
      sub_100025E08();
      v22();
      if (v87 > v76) {
        goto LABEL_43;
      }
      goto LABEL_12;
    }
    uint64_t v53 = v82;
LABEL_11:
    ((void (*)(uint64_t))v22)(v53);
    goto LABEL_12;
  }
  if (v70 > 32)
  {
    unint64_t v71 = sub_100152A9C();
    sub_10002AEDC((uint64_t)&v87, (uint64_t)&type metadata for Int32, v71);
    sub_10002CEEC();
    uint64_t v72 = sub_100028970();
    ((void (*)(uint64_t))v22)(v72);
    uint64_t v73 = sub_100157138();
    ((void (*)(uint64_t))v22)(v73);
    if (v82) {
      goto LABEL_43;
    }
    goto LABEL_12;
  }
  sub_1001570CC();
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
  sub_1000294C0();
  char v84 = sub_10002CEEC();
  sub_100025E08();
  v22();
  uint64_t v77 = sub_100021D94();
  v78(v77);
  if ((v84 & 1) == 0)
  {
    signed int v79 = sub_1000261F4();
    sub_100025E08();
    v22();
    if (v87 > v79) {
      goto LABEL_43;
    }
    goto LABEL_12;
  }
LABEL_42:
  uint64_t v80 = sub_10002E764();
  ((void (*)(uint64_t))v22)(v80);
LABEL_43:
  __break(1u);
}

uint64_t sub_100151D94@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100150814(a1, a2, a3);
}

uint64_t sub_100151DAC@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_10014FDBC();
  if (!v1) {
    *a1 = result;
  }
  return result;
}

uint64_t sub_100151DD8(uint64_t a1, uint64_t a2)
{
  return sub_10015142C(a1, a2, *v2);
}

uint64_t sub_100151DF8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100150B14(a1, a2, a3);
}

void sub_100151E10(_WORD *a1@<X8>)
{
  sub_10014FCCC();
  if (!v1) {
    *a1 = v3;
  }
}

uint64_t sub_100151E3C(uint64_t a1, uint64_t a2)
{
  return sub_1001514EC(a1, a2, *v2);
}

uint64_t sub_100151E58@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100150914(a1, a2, a3);
}

void sub_100151E70(_WORD *a1@<X8>)
{
  sub_10014FEA0();
  if (!v1) {
    *a1 = v3;
  }
}

uint64_t sub_100151E9C(uint64_t a1, uint64_t a2)
{
  return sub_1001515AC(a1, a2, *v2);
}

uint64_t sub_100151EB8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100150C14(a1, a2, a3);
}

void sub_100151ED0(_DWORD *a1@<X8>)
{
  sub_10014FD58();
  if (!v1) {
    *a1 = v3;
  }
}

uint64_t sub_100151EFC(uint64_t a1, uint64_t a2)
{
  return sub_10015166C(a1, a2, *v2);
}

uint64_t sub_100151F18@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100150A14(a1, a2, a3);
}

void sub_100151F30(_DWORD *a1@<X8>)
{
  sub_10014FF30();
  if (!v1) {
    *a1 = v3;
  }
}

uint64_t sub_100151F5C(uint64_t a1, uint64_t a2)
{
  return sub_10015172C(a1, a2, *v2);
}

uint64_t sub_100151F78@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100150D14(a1, a2, a3);
}

void sub_100151F90(void *a1@<X8>)
{
  sub_1001507EC();
  if (!v1) {
    *a1 = v3;
  }
}

void SQLiteInteger64.init(with:column:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, sqlite3_int64 a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_100017EC4();
  a19 = v24;
  a20 = v25;
  sub_100027290();
  uint64_t v27 = v26;
  __chkstk_darwin(v28);
  sub_100157048();
  __chkstk_darwin(v29);
  sub_10002EE0C();
  __chkstk_darwin(v30);
  uint64_t v31 = (sqlite3_stmt *)sub_10015C798();
  if (v20) {
    goto LABEL_16;
  }
  uint64_t v48 = v27;
  if (v22 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (v22 <= 0x7FFFFFFF)
  {
    sqlite3_int64 v32 = sqlite3_column_int64(v31, v22);
    uint64_t v33 = *(void *)(v23 + 24);
    if (v21 == &type metadata for Int64) {
      goto LABEL_15;
    }
    sub_10015710C();
    dispatch thunk of static BinaryInteger.isSigned.getter();
    uint64_t v34 = sub_1001570EC();
    if (v33)
    {
      if (v34 > 64)
      {
        a10 = v32;
        unint64_t v35 = sub_100152AE8();
        sub_100020D60((uint64_t)&a10, (uint64_t)&type metadata for Int64, v35);
        char v36 = sub_100023D8C();
        uint64_t v37 = *(void (**)(void))(v48 + 8);
        sub_10002C6CC();
        v37();
        sub_10002C6CC();
        v37();
LABEL_14:
        if ((v36 & 1) == 0) {
          goto LABEL_15;
        }
        goto LABEL_19;
      }
    }
    else if (v34 > 63)
    {
      a10 = v32;
      uint64_t v41 = sub_100026368();
      v42(v41);
      if (v32 < 0)
      {
        char v45 = *(void (**)(void))(v48 + 8);
        sub_10002C6CC();
        v45();
        sub_10002C6CC();
        v45();
        goto LABEL_19;
      }
      unint64_t v43 = sub_100152AE8();
      sub_100020D60((uint64_t)&a10, (uint64_t)&type metadata for Int64, v43);
      char v36 = sub_10001860C();
      uint64_t v44 = *(void (**)(void))(v48 + 8);
      sub_100026558();
      v44();
      sub_100026558();
      v44();
      sub_100026558();
      v44();
      goto LABEL_14;
    }
    uint64_t v38 = sub_100024170();
    uint64_t v39 = sub_10002DF6C();
    v40(v39);
    if (v32 >= v38)
    {
LABEL_15:
      a10 = v32;
      sub_100152AE8();
      sub_100029338();
LABEL_16:
      swift_release();
LABEL_17:
      sub_10001EDB4();
      sub_100024A18();
      return;
    }
LABEL_19:
    sub_100122878();
    uint64_t v46 = sub_100024A30();
    sub_10002B1F0(v46, v47);
    swift_release();
    goto LABEL_17;
  }
  __break(1u);
}

uint64_t sub_100152270(uint64_t a1, uint64_t a2, sqlite3_int64 a3)
{
  uint64_t result = sub_10015C798();
  if (!v3)
  {
    if (a2 < (uint64_t)0xFFFFFFFF80000000)
    {
      __break(1u);
    }
    else if (a2 <= 0x7FFFFFFF)
    {
      uint64_t result = sqlite3_bind_int64((sqlite3_stmt *)result, a2, a3);
      if (result)
      {
        sub_100122878();
        uint64_t v7 = sub_100024A30();
        sub_100157094(v7, v8);
        return sub_1000276C4(v9, (uint64_t)"Failed to bind Int");
      }
      return result;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_100152308(uint64_t a1, uint64_t a2, sqlite3_int64 a3)
{
  uint64_t result = sub_10015C798();
  if (!v3)
  {
    if (a2 < (uint64_t)0xFFFFFFFF80000000)
    {
      __break(1u);
    }
    else if (a2 <= 0x7FFFFFFF)
    {
      if ((a3 & 0x8000000000000000) == 0)
      {
        uint64_t result = sqlite3_bind_int64((sqlite3_stmt *)result, a2, a3);
        if (result)
        {
          sub_100122878();
          uint64_t v7 = sub_100024A30();
          sub_100157094(v7, v8);
          return sub_1000276C4(v9, (uint64_t)"Failed to bind Int");
        }
        return result;
      }
LABEL_10:
      __break(1u);
      return result;
    }
    __break(1u);
    goto LABEL_10;
  }
  return result;
}

void SQLiteInteger64.bind(to:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_100017EC4();
  a19 = v23;
  a20 = v24;
  sub_1000250EC(v25, v26, v27, v28);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v30 = sub_100029F68(AssociatedTypeWitness);
  __chkstk_darwin(v30);
  sub_1000180A0(v31, v82);
  uint64_t v86 = v32;
  __chkstk_darwin(v33);
  sub_10002E9E8();
  __chkstk_darwin(v34);
  sub_10015716C();
  __chkstk_darwin(v35);
  sub_100157158();
  __chkstk_darwin(v36);
  sub_10002EC98();
  __chkstk_darwin(v37);
  sub_10002EE0C();
  __chkstk_darwin(v38);
  sub_100157180();
  __chkstk_darwin(v39);
  sub_100157048();
  __chkstk_darwin(v40);
  sub_100029270();
  if (v20) {
    goto LABEL_25;
  }
  sub_1000282AC();
  if (v44 != v45)
  {
    __break(1u);
    goto LABEL_40;
  }
  if (v43 > 0x7FFFFFFF)
  {
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  uint64_t v46 = v22;
  char v84 = v41;
  uint64_t v47 = *(void (**)(void))(v86 + 16);
  uint64_t v48 = v42;
  sub_100016718();
  v47();
  char v49 = sub_100024D70();
  sub_100016718();
  v47();
  if ((v49 & 1) == 0)
  {
    uint64_t v53 = sub_100157194();
    goto LABEL_11;
  }
  uint64_t v50 = sub_100021508();
  uint64_t v21 = *(void (**)(void))(v86 + 8);
  sub_10002C6CC();
  v21();
  if (v50 <= 64) {
    goto LABEL_12;
  }
  sub_10002A7C8();
  v51();
  a10 = 0x8000000000000000;
  if (sub_100024D70())
  {
    if (sub_100021508() >= 64)
    {
      unint64_t v74 = sub_100152AE8();
      sub_10002AEDC((uint64_t)&a10, (uint64_t)&type metadata for Int64, v74);
      sub_100157070();
      uint64_t v75 = sub_10001D810();
      ((void (*)(uint64_t))v21)(v75);
      sub_10002C6CC();
      v21();
      if (v83) {
        goto LABEL_43;
      }
    }
    else
    {
      uint64_t v52 = sub_1000261F4();
      sub_100025E08();
      v21();
      if (v52 < a10) {
        goto LABEL_43;
      }
    }
LABEL_12:
    uint64_t v54 = sub_100021508();
    sub_10002A7C8();
    v55();
    if (v54 < 65)
    {
      uint64_t v56 = sub_100021508();
      sub_100024400();
      v21();
      if (v56 != 64 || (sub_100024D70() & 1) != 0) {
        goto LABEL_23;
      }
    }
    else
    {
      sub_100024400();
      v21();
    }
    sub_10002A7C8();
    v57();
    a10 = 0x7FFFFFFFFFFFFFFFLL;
    char v58 = sub_100024D70();
    uint64_t v59 = sub_100021508();
    if (v58)
    {
      if (v59 > 64)
      {
        unint64_t v60 = sub_100152AE8();
        sub_10002AEDC((uint64_t)&a10, (uint64_t)&type metadata for Int64, v60);
        char v61 = sub_10001860C();
        sub_10000E224();
        v21();
        goto LABEL_22;
      }
    }
    else if (v59 > 63)
    {
      uint64_t v88 = 0x7FFFFFFFFFFFFFFFLL;
      uint64_t v62 = sub_10002EC0C();
      v63(v62);
      unint64_t v64 = sub_100152AE8();
      sub_10002AEDC((uint64_t)&v88, (uint64_t)&type metadata for Int64, v64);
      char v61 = sub_100028EB4();
      sub_10000E224();
      v21();
LABEL_22:
      sub_10000E224();
      v21();
      if ((v61 & 1) == 0)
      {
LABEL_23:
        sqlite3_int64 v65 = sub_1000261F4();
        ((void (*)(uint64_t, uint64_t))v21)(v46, v48);
        if (sqlite3_bind_int64(v84, v87, v65))
        {
          sub_100122878();
          uint64_t v66 = sub_100024A30();
          sub_10001AABC(v66, v67);
          sub_1000276C4(v68, (uint64_t)"Failed to bind Int");
        }
LABEL_25:
        sub_10001EDB4();
        sub_100024A18();
        return;
      }
      goto LABEL_41;
    }
    sub_1000261F4();
    sub_100024400();
    v21();
    goto LABEL_23;
  }
  char v69 = sub_100024D70();
  uint64_t v70 = sub_100021508();
  if ((v69 & 1) == 0)
  {
    if (v70 < 64)
    {
      uint64_t v76 = sub_1000261F4();
      sub_100025E08();
      v21();
      if (v76 < a10) {
        goto LABEL_43;
      }
      goto LABEL_12;
    }
    uint64_t v53 = v83;
LABEL_11:
    ((void (*)(uint64_t))v21)(v53);
    goto LABEL_12;
  }
  if (v70 > 64)
  {
    unint64_t v71 = sub_100152AE8();
    sub_10002AEDC((uint64_t)&a10, (uint64_t)&type metadata for Int64, v71);
    sub_10002CEEC();
    uint64_t v72 = sub_100028970();
    ((void (*)(uint64_t))v21)(v72);
    uint64_t v73 = sub_100157138();
    ((void (*)(uint64_t))v21)(v73);
    if (v83) {
      goto LABEL_43;
    }
    goto LABEL_12;
  }
  sub_1001570CC();
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
  sub_1000294C0();
  char v85 = sub_10002CEEC();
  sub_100025E08();
  v21();
  uint64_t v77 = sub_100021D94();
  v78(v77);
  if ((v85 & 1) == 0)
  {
    int64_t v79 = a10;
    uint64_t v80 = sub_1000261F4();
    sub_100025E08();
    v21();
    if (v80 < v79) {
      goto LABEL_43;
    }
    goto LABEL_12;
  }
LABEL_42:
  uint64_t v81 = sub_10002E764();
  ((void (*)(uint64_t))v21)(v81);
LABEL_43:
  __break(1u);
}

void sub_100152948(uint64_t a1, uint64_t a2)
{
}

void sub_100152978(void *a1@<X8>)
{
  sub_1001503B8();
  if (!v1) {
    *a1 = v3;
  }
}

void sub_1001529A8(uint64_t a1, uint64_t a2)
{
}

void sub_1001529D8(void *a1@<X8>)
{
  sub_100150354();
  if (!v1) {
    *a1 = v3;
  }
}

uint64_t sub_100152A04(uint64_t a1, uint64_t a2)
{
  return sub_100152270(a1, a2, *v2);
}

void sub_100152A20(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100152A50(uint64_t a1, uint64_t a2)
{
  return sub_100152308(a1, a2, *v2);
}

void sub_100152A6C(uint64_t a1, uint64_t a2)
{
}

unint64_t sub_100152A9C()
{
  unint64_t result = qword_100223690;
  if (!qword_100223690)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100223690);
  }
  return result;
}

unint64_t sub_100152AE8()
{
  unint64_t result = qword_100223698;
  if (!qword_100223698)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100223698);
  }
  return result;
}

unint64_t sub_100152B34(uint64_t a1)
{
  unint64_t result = sub_100152B5C();
  *(void *)(a1 + 24) = result;
  return result;
}

unint64_t sub_100152B5C()
{
  unint64_t result = qword_1002236A0;
  if (!qword_1002236A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002236A0);
  }
  return result;
}

unint64_t sub_100152BA8(uint64_t a1)
{
  unint64_t result = sub_100152BD0();
  *(void *)(a1 + 24) = result;
  return result;
}

unint64_t sub_100152BD0()
{
  unint64_t result = qword_1002236A8;
  if (!qword_1002236A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002236A8);
  }
  return result;
}

unint64_t sub_100152C1C(uint64_t a1)
{
  unint64_t result = sub_100152C44();
  *(void *)(a1 + 24) = result;
  return result;
}

unint64_t sub_100152C44()
{
  unint64_t result = qword_1002236B0;
  if (!qword_1002236B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002236B0);
  }
  return result;
}

unint64_t sub_100152C90(uint64_t a1)
{
  unint64_t result = sub_100152CB8();
  *(void *)(a1 + 24) = result;
  return result;
}

unint64_t sub_100152CB8()
{
  unint64_t result = qword_1002236B8;
  if (!qword_1002236B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002236B8);
  }
  return result;
}

unint64_t sub_100152D04(uint64_t a1)
{
  unint64_t result = sub_100152D2C();
  *(void *)(a1 + 24) = result;
  return result;
}

unint64_t sub_100152D2C()
{
  unint64_t result = qword_1002236C0;
  if (!qword_1002236C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002236C0);
  }
  return result;
}

unint64_t sub_100152D78(uint64_t a1)
{
  unint64_t result = sub_100152DA0();
  *(void *)(a1 + 24) = result;
  return result;
}

unint64_t sub_100152DA0()
{
  unint64_t result = qword_1002236C8;
  if (!qword_1002236C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002236C8);
  }
  return result;
}

unint64_t sub_100152DEC(uint64_t a1)
{
  unint64_t result = sub_100152E14();
  *(void *)(a1 + 24) = result;
  return result;
}

unint64_t sub_100152E14()
{
  unint64_t result = qword_1002236D0;
  if (!qword_1002236D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002236D0);
  }
  return result;
}

unint64_t sub_100152E60(uint64_t a1)
{
  unint64_t result = sub_100152E88();
  *(void *)(a1 + 24) = result;
  return result;
}

unint64_t sub_100152E88()
{
  unint64_t result = qword_1002236D8;
  if (!qword_1002236D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002236D8);
  }
  return result;
}

unint64_t sub_100152ED4(uint64_t a1)
{
  unint64_t result = sub_100152EFC();
  *(void *)(a1 + 24) = result;
  return result;
}

unint64_t sub_100152EFC()
{
  unint64_t result = qword_1002236E0;
  if (!qword_1002236E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002236E0);
  }
  return result;
}

unint64_t sub_100152F48(uint64_t a1)
{
  unint64_t result = sub_100152F70();
  *(void *)(a1 + 24) = result;
  return result;
}

unint64_t sub_100152F70()
{
  unint64_t result = qword_1002236E8;
  if (!qword_1002236E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002236E8);
  }
  return result;
}

void sub_100152FBC()
{
  sub_100157058();
  sub_100028DCC();
  if ((v2 & 0x1000000000000000) == 0)
  {
    if ((v2 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    sub_10002B36C();
    goto LABEL_7;
  }
  sub_100019C74();
  sub_100023F50();
  sub_10015712C();
  if ((v2 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v1 & 0x1000000000000000) != 0) {
    sub_100028B70();
  }
  else {
    sub_10001AB88();
  }
LABEL_7:
  sub_10002E7DC();
  v0();
  sub_1000293FC();
}

uint64_t sub_100153034(uint64_t result, unint64_t a2, uint64_t a3)
{
  if ((a2 & 0x1000000000000000) != 0)
  {
    unsigned __int8 v16 = 0;
    unsigned __int8 v66 = 0;
    goto LABEL_145;
  }
  uint64_t v5 = result;
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((result & 0x1000000000000000) != 0)
    {
      unint64_t result = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
      uint64_t v6 = v5 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      unint64_t result = _StringObject.sharedUTF8.getter();
    }
    int v7 = *(unsigned __int8 *)result;
    if (v7 == 43)
    {
      if (v6 >= 1)
      {
        uint64_t v31 = v6 - 1;
        if (v6 != 1)
        {
          unsigned __int8 v32 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v33 = a3 + 55;
          }
          else
          {
            unsigned __int8 v32 = 97;
            unsigned __int8 v33 = 65;
          }
          if (a3 <= 10) {
            unsigned __int8 v34 = a3 + 48;
          }
          else {
            unsigned __int8 v34 = 58;
          }
          if (result)
          {
            LOBYTE(v12) = 0;
            uint64_t v35 = (unsigned __int8 *)(result + 1);
            do
            {
              unsigned int v36 = *v35;
              if (v36 < 0x30 || v36 >= v34)
              {
                if (v36 < 0x41 || v36 >= v33)
                {
                  unsigned __int8 v16 = 0;
                  char v17 = 1;
                  if (v36 < 0x61 || v36 >= v32) {
                    goto LABEL_144;
                  }
                  char v37 = -87;
                }
                else
                {
                  char v37 = -55;
                }
              }
              else
              {
                char v37 = -48;
              }
              int v38 = (char)v12 * (char)a3;
              char v39 = v38;
              if ((char)v38 != v38) {
                goto LABEL_143;
              }
              int v12 = (char)v38 + (char)(v36 + v37);
              if ((char)(v39 + v36 + v37) != v12) {
                goto LABEL_143;
              }
              ++v35;
              --v31;
            }
            while (v31);
LABEL_76:
            char v17 = 0;
            unsigned __int8 v16 = v12;
            goto LABEL_144;
          }
          goto LABEL_99;
        }
LABEL_143:
        unsigned __int8 v16 = 0;
        char v17 = 1;
        goto LABEL_144;
      }
      goto LABEL_150;
    }
    if (v7 != 45)
    {
      if (v6)
      {
        unsigned __int8 v40 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v41 = a3 + 55;
        }
        else
        {
          unsigned __int8 v40 = 97;
          unsigned __int8 v41 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v42 = a3 + 48;
        }
        else {
          unsigned __int8 v42 = 58;
        }
        if (result)
        {
          LOBYTE(v43) = 0;
          do
          {
            unsigned int v44 = *(unsigned __int8 *)result;
            if (v44 < 0x30 || v44 >= v42)
            {
              if (v44 < 0x41 || v44 >= v41)
              {
                unsigned __int8 v16 = 0;
                char v17 = 1;
                if (v44 < 0x61 || v44 >= v40) {
                  goto LABEL_144;
                }
                char v45 = -87;
              }
              else
              {
                char v45 = -55;
              }
            }
            else
            {
              char v45 = -48;
            }
            int v46 = (char)v43 * (char)a3;
            char v47 = v46;
            if ((char)v46 != v46) {
              goto LABEL_143;
            }
            int v43 = (char)v46 + (char)(v44 + v45);
            if ((char)(v47 + v44 + v45) != v43) {
              goto LABEL_143;
            }
            ++result;
            --v6;
          }
          while (v6);
          char v17 = 0;
          unsigned __int8 v16 = v43;
          goto LABEL_144;
        }
        goto LABEL_99;
      }
      goto LABEL_143;
    }
    if (v6 >= 1)
    {
      uint64_t v8 = v6 - 1;
      if (v6 != 1)
      {
        unsigned __int8 v9 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v10 = a3 + 55;
        }
        else
        {
          unsigned __int8 v9 = 97;
          unsigned __int8 v10 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v11 = a3 + 48;
        }
        else {
          unsigned __int8 v11 = 58;
        }
        if (result)
        {
          LOBYTE(v12) = 0;
          int v13 = (unsigned __int8 *)(result + 1);
          while (1)
          {
            unsigned int v14 = *v13;
            if (v14 < 0x30 || v14 >= v11)
            {
              if (v14 < 0x41 || v14 >= v10)
              {
                unsigned __int8 v16 = 0;
                char v17 = 1;
                if (v14 < 0x61 || v14 >= v9) {
                  goto LABEL_144;
                }
                char v15 = -87;
              }
              else
              {
                char v15 = -55;
              }
            }
            else
            {
              char v15 = -48;
            }
            int v18 = (char)v12 * (char)a3;
            char v19 = v18;
            if ((char)v18 != v18) {
              goto LABEL_143;
            }
            int v12 = (char)v18 - (char)(v14 + v15);
            if ((char)(v19 - (v14 + v15)) != v12) {
              goto LABEL_143;
            }
            ++v13;
            if (!--v8) {
              goto LABEL_76;
            }
          }
        }
LABEL_99:
        unsigned __int8 v16 = 0;
        char v17 = 0;
LABEL_144:
        unsigned __int8 v66 = v17;
LABEL_145:
        LOBYTE(v65[0]) = (a2 & 0x1000000000000000) != 0;
        return v16 | (v66 << 8) | (LOBYTE(v65[0]) << 16);
      }
      goto LABEL_143;
    }
    __break(1u);
LABEL_149:
    __break(1u);
LABEL_150:
    __break(1u);
    goto LABEL_151;
  }
  uint64_t v20 = HIBYTE(a2) & 0xF;
  v65[0] = result;
  v65[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  if (result != 43)
  {
    if (result != 45)
    {
      if (v20)
      {
        LOBYTE(v22) = 0;
        unsigned __int8 v57 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v58 = a3 + 55;
        }
        else
        {
          unsigned __int8 v57 = 97;
          unsigned __int8 v58 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v59 = a3 + 48;
        }
        else {
          unsigned __int8 v59 = 58;
        }
        unint64_t v60 = (unsigned __int8 *)v65;
        while (1)
        {
          unsigned int v61 = *v60;
          if (v61 < 0x30 || v61 >= v59)
          {
            if (v61 < 0x41 || v61 >= v58)
            {
              unsigned __int8 v16 = 0;
              char v17 = 1;
              if (v61 < 0x61 || v61 >= v57) {
                goto LABEL_144;
              }
              char v62 = -87;
            }
            else
            {
              char v62 = -55;
            }
          }
          else
          {
            char v62 = -48;
          }
          int v63 = (char)v22 * (char)a3;
          char v64 = v63;
          if ((char)v63 != v63) {
            goto LABEL_143;
          }
          int v22 = (char)v63 + (char)(v61 + v62);
          if ((char)(v64 + v61 + v62) != v22) {
            goto LABEL_143;
          }
          ++v60;
          if (!--v20) {
            goto LABEL_142;
          }
        }
      }
      goto LABEL_143;
    }
    if (v20)
    {
      uint64_t v21 = v20 - 1;
      if (v21)
      {
        LOBYTE(v22) = 0;
        unsigned __int8 v23 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v24 = a3 + 55;
        }
        else
        {
          unsigned __int8 v23 = 97;
          unsigned __int8 v24 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v25 = a3 + 48;
        }
        else {
          unsigned __int8 v25 = 58;
        }
        uint64_t v26 = (unsigned __int8 *)v65 + 1;
        while (1)
        {
          unsigned int v27 = *v26;
          if (v27 < 0x30 || v27 >= v25)
          {
            if (v27 < 0x41 || v27 >= v24)
            {
              unsigned __int8 v16 = 0;
              char v17 = 1;
              if (v27 < 0x61 || v27 >= v23) {
                goto LABEL_144;
              }
              char v28 = -87;
            }
            else
            {
              char v28 = -55;
            }
          }
          else
          {
            char v28 = -48;
          }
          int v29 = (char)v22 * (char)a3;
          char v30 = v29;
          if ((char)v29 != v29) {
            goto LABEL_143;
          }
          int v22 = (char)v29 - (char)(v27 + v28);
          if ((char)(v30 - (v27 + v28)) != v22) {
            goto LABEL_143;
          }
          ++v26;
          if (!--v21) {
            goto LABEL_142;
          }
        }
      }
      goto LABEL_143;
    }
    goto LABEL_149;
  }
  if (v20)
  {
    uint64_t v48 = v20 - 1;
    if (v48)
    {
      LOBYTE(v22) = 0;
      unsigned __int8 v49 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v50 = a3 + 55;
      }
      else
      {
        unsigned __int8 v49 = 97;
        unsigned __int8 v50 = 65;
      }
      if (a3 <= 10) {
        unsigned __int8 v51 = a3 + 48;
      }
      else {
        unsigned __int8 v51 = 58;
      }
      uint64_t v52 = (unsigned __int8 *)v65 + 1;
      do
      {
        unsigned int v53 = *v52;
        if (v53 < 0x30 || v53 >= v51)
        {
          if (v53 < 0x41 || v53 >= v50)
          {
            unsigned __int8 v16 = 0;
            char v17 = 1;
            if (v53 < 0x61 || v53 >= v49) {
              goto LABEL_144;
            }
            char v54 = -87;
          }
          else
          {
            char v54 = -55;
          }
        }
        else
        {
          char v54 = -48;
        }
        int v55 = (char)v22 * (char)a3;
        char v56 = v55;
        if ((char)v55 != v55) {
          goto LABEL_143;
        }
        int v22 = (char)v55 + (char)(v53 + v54);
        if ((char)(v56 + v53 + v54) != v22) {
          goto LABEL_143;
        }
        ++v52;
        --v48;
      }
      while (v48);
LABEL_142:
      char v17 = 0;
      unsigned __int8 v16 = v22;
      goto LABEL_144;
    }
    goto LABEL_143;
  }
LABEL_151:
  __break(1u);
  return result;
}

unsigned __int8 *sub_1001535F0(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  int v3 = *result;
  if (v3 == 43)
  {
    if (a2 >= 1)
    {
      uint64_t v16 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v17 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v18 = a3 + 55;
        }
        else
        {
          unsigned __int8 v17 = 97;
          unsigned __int8 v18 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v19 = a3 + 48;
        }
        else {
          unsigned __int8 v19 = 58;
        }
        if (result)
        {
          LOBYTE(v8) = 0;
          uint64_t v20 = result + 1;
          do
          {
            unsigned int v21 = *v20;
            if (v21 < 0x30 || v21 >= v19)
            {
              if (v21 < 0x41 || v21 >= v18)
              {
                unsigned __int8 v12 = 0;
                int v13 = 1;
                if (v21 < 0x61 || v21 >= v17) {
                  return (unsigned __int8 *)(v12 | (v13 << 8));
                }
                char v22 = -87;
              }
              else
              {
                char v22 = -55;
              }
            }
            else
            {
              char v22 = -48;
            }
            int v23 = (char)v8 * (char)a3;
            char v24 = v23;
            if ((char)v23 != v23) {
              goto LABEL_72;
            }
            int v8 = (char)v23 + (char)(v21 + v22);
            if ((char)(v24 + v21 + v22) != v8) {
              goto LABEL_72;
            }
            ++v20;
            --v16;
          }
          while (v16);
LABEL_48:
          int v13 = 0;
          unsigned __int8 v12 = v8;
          return (unsigned __int8 *)(v12 | (v13 << 8));
        }
        goto LABEL_71;
      }
LABEL_72:
      unsigned __int8 v12 = 0;
      int v13 = 1;
      return (unsigned __int8 *)(v12 | (v13 << 8));
    }
  }
  else
  {
    if (v3 != 45)
    {
      if (a2)
      {
        unsigned __int8 v25 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v26 = a3 + 55;
        }
        else
        {
          unsigned __int8 v25 = 97;
          unsigned __int8 v26 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v27 = a3 + 48;
        }
        else {
          unsigned __int8 v27 = 58;
        }
        if (result)
        {
          LOBYTE(v28) = 0;
          do
          {
            unsigned int v29 = *result;
            if (v29 < 0x30 || v29 >= v27)
            {
              if (v29 < 0x41 || v29 >= v26)
              {
                unsigned __int8 v12 = 0;
                int v13 = 1;
                if (v29 < 0x61 || v29 >= v25) {
                  return (unsigned __int8 *)(v12 | (v13 << 8));
                }
                char v30 = -87;
              }
              else
              {
                char v30 = -55;
              }
            }
            else
            {
              char v30 = -48;
            }
            int v31 = (char)v28 * (char)a3;
            char v32 = v31;
            if ((char)v31 != v31) {
              goto LABEL_72;
            }
            int v28 = (char)v31 + (char)(v29 + v30);
            if ((char)(v32 + v29 + v30) != v28) {
              goto LABEL_72;
            }
            ++result;
            --a2;
          }
          while (a2);
          int v13 = 0;
          unsigned __int8 v12 = v28;
          return (unsigned __int8 *)(v12 | (v13 << 8));
        }
        goto LABEL_71;
      }
      goto LABEL_72;
    }
    if (a2 >= 1)
    {
      uint64_t v4 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v5 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v6 = a3 + 55;
        }
        else
        {
          unsigned __int8 v5 = 97;
          unsigned __int8 v6 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v7 = a3 + 48;
        }
        else {
          unsigned __int8 v7 = 58;
        }
        if (result)
        {
          LOBYTE(v8) = 0;
          unsigned __int8 v9 = result + 1;
          while (1)
          {
            unsigned int v10 = *v9;
            if (v10 < 0x30 || v10 >= v7)
            {
              if (v10 < 0x41 || v10 >= v6)
              {
                unsigned __int8 v12 = 0;
                int v13 = 1;
                if (v10 < 0x61 || v10 >= v5) {
                  return (unsigned __int8 *)(v12 | (v13 << 8));
                }
                char v11 = -87;
              }
              else
              {
                char v11 = -55;
              }
            }
            else
            {
              char v11 = -48;
            }
            int v14 = (char)v8 * (char)a3;
            char v15 = v14;
            if ((char)v14 != v14) {
              goto LABEL_72;
            }
            int v8 = (char)v14 - (char)(v10 + v11);
            if ((char)(v15 - (v10 + v11)) != v8) {
              goto LABEL_72;
            }
            ++v9;
            if (!--v4) {
              goto LABEL_48;
            }
          }
        }
LABEL_71:
        unsigned __int8 v12 = 0;
        int v13 = 0;
        return (unsigned __int8 *)(v12 | (v13 << 8));
      }
      goto LABEL_72;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1001538A4(uint64_t result, unint64_t a2, uint64_t a3)
{
  if ((a2 & 0x1000000000000000) != 0)
  {
    unsigned __int16 v16 = 0;
    unsigned __int8 v66 = 0;
    goto LABEL_145;
  }
  uint64_t v5 = result;
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((result & 0x1000000000000000) != 0)
    {
      unint64_t result = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
      uint64_t v6 = v5 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      unint64_t result = _StringObject.sharedUTF8.getter();
    }
    int v7 = *(unsigned __int8 *)result;
    if (v7 == 43)
    {
      if (v6 >= 1)
      {
        uint64_t v31 = v6 - 1;
        if (v6 != 1)
        {
          unsigned __int8 v32 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v33 = a3 + 55;
          }
          else
          {
            unsigned __int8 v32 = 97;
            unsigned __int8 v33 = 65;
          }
          if (a3 <= 10) {
            unsigned __int8 v34 = a3 + 48;
          }
          else {
            unsigned __int8 v34 = 58;
          }
          if (result)
          {
            LOWORD(v12) = 0;
            uint64_t v35 = (unsigned __int8 *)(result + 1);
            do
            {
              unsigned int v36 = *v35;
              if (v36 < 0x30 || v36 >= v34)
              {
                if (v36 < 0x41 || v36 >= v33)
                {
                  unsigned __int16 v16 = 0;
                  char v17 = 1;
                  if (v36 < 0x61 || v36 >= v32) {
                    goto LABEL_144;
                  }
                  char v37 = -87;
                }
                else
                {
                  char v37 = -55;
                }
              }
              else
              {
                char v37 = -48;
              }
              int v38 = (__int16)v12 * (__int16)a3;
              __int16 v39 = v38;
              if ((__int16)v38 != v38) {
                goto LABEL_143;
              }
              int v12 = (__int16)v38 + (v36 + v37);
              if ((__int16)(v39 + (v36 + v37)) != v12) {
                goto LABEL_143;
              }
              ++v35;
              --v31;
            }
            while (v31);
LABEL_76:
            char v17 = 0;
            unsigned __int16 v16 = v12;
            goto LABEL_144;
          }
          goto LABEL_99;
        }
LABEL_143:
        unsigned __int16 v16 = 0;
        char v17 = 1;
        goto LABEL_144;
      }
      goto LABEL_150;
    }
    if (v7 != 45)
    {
      if (v6)
      {
        unsigned __int8 v40 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v41 = a3 + 55;
        }
        else
        {
          unsigned __int8 v40 = 97;
          unsigned __int8 v41 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v42 = a3 + 48;
        }
        else {
          unsigned __int8 v42 = 58;
        }
        if (result)
        {
          LOWORD(v43) = 0;
          do
          {
            unsigned int v44 = *(unsigned __int8 *)result;
            if (v44 < 0x30 || v44 >= v42)
            {
              if (v44 < 0x41 || v44 >= v41)
              {
                unsigned __int16 v16 = 0;
                char v17 = 1;
                if (v44 < 0x61 || v44 >= v40) {
                  goto LABEL_144;
                }
                char v45 = -87;
              }
              else
              {
                char v45 = -55;
              }
            }
            else
            {
              char v45 = -48;
            }
            int v46 = (__int16)v43 * (__int16)a3;
            __int16 v47 = v46;
            if ((__int16)v46 != v46) {
              goto LABEL_143;
            }
            int v43 = (__int16)v46 + (v44 + v45);
            if ((__int16)(v47 + (v44 + v45)) != v43) {
              goto LABEL_143;
            }
            ++result;
            --v6;
          }
          while (v6);
          char v17 = 0;
          unsigned __int16 v16 = v43;
          goto LABEL_144;
        }
        goto LABEL_99;
      }
      goto LABEL_143;
    }
    if (v6 >= 1)
    {
      uint64_t v8 = v6 - 1;
      if (v6 != 1)
      {
        unsigned __int8 v9 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v10 = a3 + 55;
        }
        else
        {
          unsigned __int8 v9 = 97;
          unsigned __int8 v10 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v11 = a3 + 48;
        }
        else {
          unsigned __int8 v11 = 58;
        }
        if (result)
        {
          LOWORD(v12) = 0;
          int v13 = (unsigned __int8 *)(result + 1);
          while (1)
          {
            unsigned int v14 = *v13;
            if (v14 < 0x30 || v14 >= v11)
            {
              if (v14 < 0x41 || v14 >= v10)
              {
                unsigned __int16 v16 = 0;
                char v17 = 1;
                if (v14 < 0x61 || v14 >= v9) {
                  goto LABEL_144;
                }
                char v15 = -87;
              }
              else
              {
                char v15 = -55;
              }
            }
            else
            {
              char v15 = -48;
            }
            int v18 = (__int16)v12 * (__int16)a3;
            __int16 v19 = v18;
            if ((__int16)v18 != v18) {
              goto LABEL_143;
            }
            int v12 = (__int16)v18 - (v14 + v15);
            if ((__int16)(v19 - (v14 + v15)) != v12) {
              goto LABEL_143;
            }
            ++v13;
            if (!--v8) {
              goto LABEL_76;
            }
          }
        }
LABEL_99:
        unsigned __int16 v16 = 0;
        char v17 = 0;
LABEL_144:
        unsigned __int8 v66 = v17;
LABEL_145:
        LOBYTE(v65[0]) = (a2 & 0x1000000000000000) != 0;
        return v16 | (v66 << 16) | (LOBYTE(v65[0]) << 24);
      }
      goto LABEL_143;
    }
    __break(1u);
LABEL_149:
    __break(1u);
LABEL_150:
    __break(1u);
    goto LABEL_151;
  }
  uint64_t v20 = HIBYTE(a2) & 0xF;
  v65[0] = result;
  v65[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  if (result != 43)
  {
    if (result != 45)
    {
      if (v20)
      {
        LOWORD(v22) = 0;
        unsigned __int8 v57 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v58 = a3 + 55;
        }
        else
        {
          unsigned __int8 v57 = 97;
          unsigned __int8 v58 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v59 = a3 + 48;
        }
        else {
          unsigned __int8 v59 = 58;
        }
        unint64_t v60 = (unsigned __int8 *)v65;
        while (1)
        {
          unsigned int v61 = *v60;
          if (v61 < 0x30 || v61 >= v59)
          {
            if (v61 < 0x41 || v61 >= v58)
            {
              unsigned __int16 v16 = 0;
              char v17 = 1;
              if (v61 < 0x61 || v61 >= v57) {
                goto LABEL_144;
              }
              char v62 = -87;
            }
            else
            {
              char v62 = -55;
            }
          }
          else
          {
            char v62 = -48;
          }
          int v63 = (__int16)v22 * (__int16)a3;
          __int16 v64 = v63;
          if ((__int16)v63 != v63) {
            goto LABEL_143;
          }
          int v22 = (__int16)v63 + (v61 + v62);
          if ((__int16)(v64 + (v61 + v62)) != v22) {
            goto LABEL_143;
          }
          ++v60;
          if (!--v20) {
            goto LABEL_142;
          }
        }
      }
      goto LABEL_143;
    }
    if (v20)
    {
      uint64_t v21 = v20 - 1;
      if (v21)
      {
        LOWORD(v22) = 0;
        unsigned __int8 v23 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v24 = a3 + 55;
        }
        else
        {
          unsigned __int8 v23 = 97;
          unsigned __int8 v24 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v25 = a3 + 48;
        }
        else {
          unsigned __int8 v25 = 58;
        }
        unsigned __int8 v26 = (unsigned __int8 *)v65 + 1;
        while (1)
        {
          unsigned int v27 = *v26;
          if (v27 < 0x30 || v27 >= v25)
          {
            if (v27 < 0x41 || v27 >= v24)
            {
              unsigned __int16 v16 = 0;
              char v17 = 1;
              if (v27 < 0x61 || v27 >= v23) {
                goto LABEL_144;
              }
              char v28 = -87;
            }
            else
            {
              char v28 = -55;
            }
          }
          else
          {
            char v28 = -48;
          }
          int v29 = (__int16)v22 * (__int16)a3;
          __int16 v30 = v29;
          if ((__int16)v29 != v29) {
            goto LABEL_143;
          }
          int v22 = (__int16)v29 - (v27 + v28);
          if ((__int16)(v30 - (v27 + v28)) != v22) {
            goto LABEL_143;
          }
          ++v26;
          if (!--v21) {
            goto LABEL_142;
          }
        }
      }
      goto LABEL_143;
    }
    goto LABEL_149;
  }
  if (v20)
  {
    uint64_t v48 = v20 - 1;
    if (v48)
    {
      LOWORD(v22) = 0;
      unsigned __int8 v49 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v50 = a3 + 55;
      }
      else
      {
        unsigned __int8 v49 = 97;
        unsigned __int8 v50 = 65;
      }
      if (a3 <= 10) {
        unsigned __int8 v51 = a3 + 48;
      }
      else {
        unsigned __int8 v51 = 58;
      }
      uint64_t v52 = (unsigned __int8 *)v65 + 1;
      do
      {
        unsigned int v53 = *v52;
        if (v53 < 0x30 || v53 >= v51)
        {
          if (v53 < 0x41 || v53 >= v50)
          {
            unsigned __int16 v16 = 0;
            char v17 = 1;
            if (v53 < 0x61 || v53 >= v49) {
              goto LABEL_144;
            }
            char v54 = -87;
          }
          else
          {
            char v54 = -55;
          }
        }
        else
        {
          char v54 = -48;
        }
        int v55 = (__int16)v22 * (__int16)a3;
        __int16 v56 = v55;
        if ((__int16)v55 != v55) {
          goto LABEL_143;
        }
        int v22 = (__int16)v55 + (v53 + v54);
        if ((__int16)(v56 + (v53 + v54)) != v22) {
          goto LABEL_143;
        }
        ++v52;
        --v48;
      }
      while (v48);
LABEL_142:
      char v17 = 0;
      unsigned __int16 v16 = v22;
      goto LABEL_144;
    }
    goto LABEL_143;
  }
LABEL_151:
  __break(1u);
  return result;
}

unsigned __int8 *sub_100153E60(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  int v3 = *result;
  if (v3 == 43)
  {
    if (a2 >= 1)
    {
      uint64_t v16 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v17 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v18 = a3 + 55;
        }
        else
        {
          unsigned __int8 v17 = 97;
          unsigned __int8 v18 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v19 = a3 + 48;
        }
        else {
          unsigned __int8 v19 = 58;
        }
        if (result)
        {
          LOWORD(v8) = 0;
          uint64_t v20 = result + 1;
          do
          {
            unsigned int v21 = *v20;
            if (v21 < 0x30 || v21 >= v19)
            {
              if (v21 < 0x41 || v21 >= v18)
              {
                unsigned __int16 v12 = 0;
                int v13 = 1;
                if (v21 < 0x61 || v21 >= v17) {
                  return (unsigned __int8 *)(v12 | (v13 << 16));
                }
                char v22 = -87;
              }
              else
              {
                char v22 = -55;
              }
            }
            else
            {
              char v22 = -48;
            }
            int v23 = (__int16)v8 * (__int16)a3;
            __int16 v24 = v23;
            if ((__int16)v23 != v23) {
              goto LABEL_72;
            }
            int v8 = (__int16)v23 + (v21 + v22);
            if ((__int16)(v24 + (v21 + v22)) != v8) {
              goto LABEL_72;
            }
            ++v20;
            --v16;
          }
          while (v16);
LABEL_48:
          int v13 = 0;
          unsigned __int16 v12 = v8;
          return (unsigned __int8 *)(v12 | (v13 << 16));
        }
        goto LABEL_71;
      }
LABEL_72:
      unsigned __int16 v12 = 0;
      int v13 = 1;
      return (unsigned __int8 *)(v12 | (v13 << 16));
    }
  }
  else
  {
    if (v3 != 45)
    {
      if (a2)
      {
        unsigned __int8 v25 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v26 = a3 + 55;
        }
        else
        {
          unsigned __int8 v25 = 97;
          unsigned __int8 v26 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v27 = a3 + 48;
        }
        else {
          unsigned __int8 v27 = 58;
        }
        if (result)
        {
          LOWORD(v28) = 0;
          do
          {
            unsigned int v29 = *result;
            if (v29 < 0x30 || v29 >= v27)
            {
              if (v29 < 0x41 || v29 >= v26)
              {
                unsigned __int16 v12 = 0;
                int v13 = 1;
                if (v29 < 0x61 || v29 >= v25) {
                  return (unsigned __int8 *)(v12 | (v13 << 16));
                }
                char v30 = -87;
              }
              else
              {
                char v30 = -55;
              }
            }
            else
            {
              char v30 = -48;
            }
            int v31 = (__int16)v28 * (__int16)a3;
            __int16 v32 = v31;
            if ((__int16)v31 != v31) {
              goto LABEL_72;
            }
            int v28 = (__int16)v31 + (v29 + v30);
            if ((__int16)(v32 + (v29 + v30)) != v28) {
              goto LABEL_72;
            }
            ++result;
            --a2;
          }
          while (a2);
          int v13 = 0;
          unsigned __int16 v12 = v28;
          return (unsigned __int8 *)(v12 | (v13 << 16));
        }
        goto LABEL_71;
      }
      goto LABEL_72;
    }
    if (a2 >= 1)
    {
      uint64_t v4 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v5 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v6 = a3 + 55;
        }
        else
        {
          unsigned __int8 v5 = 97;
          unsigned __int8 v6 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v7 = a3 + 48;
        }
        else {
          unsigned __int8 v7 = 58;
        }
        if (result)
        {
          LOWORD(v8) = 0;
          unsigned __int8 v9 = result + 1;
          while (1)
          {
            unsigned int v10 = *v9;
            if (v10 < 0x30 || v10 >= v7)
            {
              if (v10 < 0x41 || v10 >= v6)
              {
                unsigned __int16 v12 = 0;
                int v13 = 1;
                if (v10 < 0x61 || v10 >= v5) {
                  return (unsigned __int8 *)(v12 | (v13 << 16));
                }
                char v11 = -87;
              }
              else
              {
                char v11 = -55;
              }
            }
            else
            {
              char v11 = -48;
            }
            int v14 = (__int16)v8 * (__int16)a3;
            __int16 v15 = v14;
            if ((__int16)v14 != v14) {
              goto LABEL_72;
            }
            int v8 = (__int16)v14 - (v10 + v11);
            if ((__int16)(v15 - (v10 + v11)) != v8) {
              goto LABEL_72;
            }
            ++v9;
            if (!--v4) {
              goto LABEL_48;
            }
          }
        }
LABEL_71:
        unsigned __int16 v12 = 0;
        int v13 = 0;
        return (unsigned __int8 *)(v12 | (v13 << 16));
      }
      goto LABEL_72;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100154114(uint64_t result, unint64_t a2, uint64_t a3)
{
  if ((a2 & 0x1000000000000000) != 0)
  {
    unsigned int v16 = 0;
    unsigned __int8 v66 = 0;
    return v16 | ((unint64_t)v66 << 32) | (((a2 >> 60) & 1) << 40);
  }
  uint64_t v5 = result;
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((result & 0x1000000000000000) != 0)
    {
      unint64_t result = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
      uint64_t v6 = v5 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      unint64_t result = _StringObject.sharedUTF8.getter();
    }
    int v7 = *(unsigned __int8 *)result;
    if (v7 == 43)
    {
      if (v6 >= 1)
      {
        uint64_t v31 = v6 - 1;
        if (v6 != 1)
        {
          unsigned __int8 v32 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v33 = a3 + 55;
          }
          else
          {
            unsigned __int8 v32 = 97;
            unsigned __int8 v33 = 65;
          }
          if (a3 <= 10) {
            unsigned __int8 v34 = a3 + 48;
          }
          else {
            unsigned __int8 v34 = 58;
          }
          if (result)
          {
            unsigned int v12 = 0;
            uint64_t v35 = (unsigned __int8 *)(result + 1);
            do
            {
              unsigned int v36 = *v35;
              if (v36 < 0x30 || v36 >= v34)
              {
                if (v36 < 0x41 || v36 >= v33)
                {
                  unsigned int v16 = 0;
                  char v17 = 1;
                  if (v36 < 0x61 || v36 >= v32) {
                    goto LABEL_144;
                  }
                  char v37 = -87;
                }
                else
                {
                  char v37 = -55;
                }
              }
              else
              {
                char v37 = -48;
              }
              uint64_t v38 = (int)v12 * (uint64_t)(int)a3;
              if (v38 != (int)v38) {
                goto LABEL_143;
              }
              unsigned __int8 v39 = v36 + v37;
              unsigned int v12 = v38 + v39;
              if (__OFADD__(v38, v39)) {
                goto LABEL_143;
              }
              ++v35;
              --v31;
            }
            while (v31);
LABEL_76:
            char v17 = 0;
            unsigned int v16 = v12;
            goto LABEL_144;
          }
          goto LABEL_99;
        }
LABEL_143:
        unsigned int v16 = 0;
        char v17 = 1;
        goto LABEL_144;
      }
      goto LABEL_150;
    }
    if (v7 != 45)
    {
      if (v6)
      {
        unsigned __int8 v40 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v41 = a3 + 55;
        }
        else
        {
          unsigned __int8 v40 = 97;
          unsigned __int8 v41 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v42 = a3 + 48;
        }
        else {
          unsigned __int8 v42 = 58;
        }
        if (result)
        {
          unsigned int v43 = 0;
          do
          {
            unsigned int v44 = *(unsigned __int8 *)result;
            if (v44 < 0x30 || v44 >= v42)
            {
              if (v44 < 0x41 || v44 >= v41)
              {
                unsigned int v16 = 0;
                char v17 = 1;
                if (v44 < 0x61 || v44 >= v40) {
                  goto LABEL_144;
                }
                char v45 = -87;
              }
              else
              {
                char v45 = -55;
              }
            }
            else
            {
              char v45 = -48;
            }
            uint64_t v46 = (int)v43 * (uint64_t)(int)a3;
            if (v46 != (int)v46) {
              goto LABEL_143;
            }
            unsigned __int8 v47 = v44 + v45;
            unsigned int v43 = v46 + v47;
            if (__OFADD__(v46, v47)) {
              goto LABEL_143;
            }
            ++result;
            --v6;
          }
          while (v6);
          char v17 = 0;
          unsigned int v16 = v43;
          goto LABEL_144;
        }
        goto LABEL_99;
      }
      goto LABEL_143;
    }
    if (v6 >= 1)
    {
      uint64_t v8 = v6 - 1;
      if (v6 != 1)
      {
        unsigned __int8 v9 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v10 = a3 + 55;
        }
        else
        {
          unsigned __int8 v9 = 97;
          unsigned __int8 v10 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v11 = a3 + 48;
        }
        else {
          unsigned __int8 v11 = 58;
        }
        if (result)
        {
          unsigned int v12 = 0;
          int v13 = (unsigned __int8 *)(result + 1);
          while (1)
          {
            unsigned int v14 = *v13;
            if (v14 < 0x30 || v14 >= v11)
            {
              if (v14 < 0x41 || v14 >= v10)
              {
                unsigned int v16 = 0;
                char v17 = 1;
                if (v14 < 0x61 || v14 >= v9) {
                  goto LABEL_144;
                }
                char v15 = -87;
              }
              else
              {
                char v15 = -55;
              }
            }
            else
            {
              char v15 = -48;
            }
            uint64_t v18 = (int)v12 * (uint64_t)(int)a3;
            if (v18 != (int)v18) {
              goto LABEL_143;
            }
            unsigned __int8 v19 = v14 + v15;
            unsigned int v12 = v18 - v19;
            if (__OFSUB__(v18, v19)) {
              goto LABEL_143;
            }
            ++v13;
            if (!--v8) {
              goto LABEL_76;
            }
          }
        }
LABEL_99:
        unsigned int v16 = 0;
        char v17 = 0;
LABEL_144:
        unsigned __int8 v66 = v17;
        return v16 | ((unint64_t)v66 << 32) | (((a2 >> 60) & 1) << 40);
      }
      goto LABEL_143;
    }
    __break(1u);
LABEL_149:
    __break(1u);
LABEL_150:
    __break(1u);
    goto LABEL_151;
  }
  uint64_t v20 = HIBYTE(a2) & 0xF;
  v65[0] = result;
  v65[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  if (result != 43)
  {
    if (result != 45)
    {
      if (v20)
      {
        unsigned int v22 = 0;
        unsigned __int8 v57 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v58 = a3 + 55;
        }
        else
        {
          unsigned __int8 v57 = 97;
          unsigned __int8 v58 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v59 = a3 + 48;
        }
        else {
          unsigned __int8 v59 = 58;
        }
        unint64_t v60 = (unsigned __int8 *)v65;
        while (1)
        {
          unsigned int v61 = *v60;
          if (v61 < 0x30 || v61 >= v59)
          {
            if (v61 < 0x41 || v61 >= v58)
            {
              unsigned int v16 = 0;
              char v17 = 1;
              if (v61 < 0x61 || v61 >= v57) {
                goto LABEL_144;
              }
              char v62 = -87;
            }
            else
            {
              char v62 = -55;
            }
          }
          else
          {
            char v62 = -48;
          }
          uint64_t v63 = (int)v22 * (uint64_t)(int)a3;
          if (v63 != (int)v63) {
            goto LABEL_143;
          }
          unsigned __int8 v64 = v61 + v62;
          unsigned int v22 = v63 + v64;
          if (__OFADD__(v63, v64)) {
            goto LABEL_143;
          }
          ++v60;
          if (!--v20) {
            goto LABEL_142;
          }
        }
      }
      goto LABEL_143;
    }
    if (v20)
    {
      uint64_t v21 = v20 - 1;
      if (v21)
      {
        unsigned int v22 = 0;
        unsigned __int8 v23 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v24 = a3 + 55;
        }
        else
        {
          unsigned __int8 v23 = 97;
          unsigned __int8 v24 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v25 = a3 + 48;
        }
        else {
          unsigned __int8 v25 = 58;
        }
        unsigned __int8 v26 = (unsigned __int8 *)v65 + 1;
        while (1)
        {
          unsigned int v27 = *v26;
          if (v27 < 0x30 || v27 >= v25)
          {
            if (v27 < 0x41 || v27 >= v24)
            {
              unsigned int v16 = 0;
              char v17 = 1;
              if (v27 < 0x61 || v27 >= v23) {
                goto LABEL_144;
              }
              char v28 = -87;
            }
            else
            {
              char v28 = -55;
            }
          }
          else
          {
            char v28 = -48;
          }
          uint64_t v29 = (int)v22 * (uint64_t)(int)a3;
          if (v29 != (int)v29) {
            goto LABEL_143;
          }
          unsigned __int8 v30 = v27 + v28;
          unsigned int v22 = v29 - v30;
          if (__OFSUB__(v29, v30)) {
            goto LABEL_143;
          }
          ++v26;
          if (!--v21) {
            goto LABEL_142;
          }
        }
      }
      goto LABEL_143;
    }
    goto LABEL_149;
  }
  if (v20)
  {
    uint64_t v48 = v20 - 1;
    if (v48)
    {
      unsigned int v22 = 0;
      unsigned __int8 v49 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v50 = a3 + 55;
      }
      else
      {
        unsigned __int8 v49 = 97;
        unsigned __int8 v50 = 65;
      }
      if (a3 <= 10) {
        unsigned __int8 v51 = a3 + 48;
      }
      else {
        unsigned __int8 v51 = 58;
      }
      uint64_t v52 = (unsigned __int8 *)v65 + 1;
      do
      {
        unsigned int v53 = *v52;
        if (v53 < 0x30 || v53 >= v51)
        {
          if (v53 < 0x41 || v53 >= v50)
          {
            unsigned int v16 = 0;
            char v17 = 1;
            if (v53 < 0x61 || v53 >= v49) {
              goto LABEL_144;
            }
            char v54 = -87;
          }
          else
          {
            char v54 = -55;
          }
        }
        else
        {
          char v54 = -48;
        }
        uint64_t v55 = (int)v22 * (uint64_t)(int)a3;
        if (v55 != (int)v55) {
          goto LABEL_143;
        }
        unsigned __int8 v56 = v53 + v54;
        unsigned int v22 = v55 + v56;
        if (__OFADD__(v55, v56)) {
          goto LABEL_143;
        }
        ++v52;
        --v48;
      }
      while (v48);
LABEL_142:
      char v17 = 0;
      unsigned int v16 = v22;
      goto LABEL_144;
    }
    goto LABEL_143;
  }
LABEL_151:
  __break(1u);
  return result;
}

void sub_100154650(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a2 & 0x1000000000000000) != 0)
  {
LABEL_130:
    sub_100029708();
    return;
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((a1 & 0x1000000000000000) != 0)
    {
      uint64_t v4 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v5 = a1 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      uint64_t v4 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
    }
    int v6 = *v4;
    if (v6 == 43)
    {
      if (v5 >= 1)
      {
        if (v5 != 1)
        {
          sub_100026ED8();
          if (v23)
          {
            sub_1001570C0();
            while (1)
            {
              sub_1001570A8();
              if (v12 && v27 < v25)
              {
                char v28 = -48;
              }
              else if (v27 < 0x41 || v27 >= v24)
              {
                sub_10002B088();
                if (!v12 || v27 >= v29) {
                  goto LABEL_130;
                }
                char v28 = -87;
              }
              else
              {
                char v28 = -55;
              }
              if ((unsigned __int128)(v26 * (__int128)a3) >> 64 == (v26 * a3) >> 63
                && !__OFADD__(v26 * a3, (v27 + v28)))
              {
                sub_1001570B4();
                if (!v30) {
                  continue;
                }
              }
              goto LABEL_130;
            }
          }
        }
        goto LABEL_130;
      }
      goto LABEL_135;
    }
    if (v6 != 45)
    {
      if (v5)
      {
        sub_100029820();
        if (v31 ^ v32 | v30) {
          unsigned __int8 v36 = v38;
        }
        if (v31 ^ v32 | v30) {
          unsigned __int8 v37 = 65;
        }
        unsigned __int8 v39 = v31 ^ v32 | v30 ? v35 : 58;
        if (v34)
        {
          uint64_t v40 = 0;
          while (1)
          {
            unsigned int v41 = *v34;
            if (v41 < 0x30 || v41 >= v39)
            {
              if (v41 < 0x41 || v41 >= v37)
              {
                if (v41 < 0x61 || v41 >= v36) {
                  goto LABEL_130;
                }
                char v42 = -87;
              }
              else
              {
                char v42 = -55;
              }
            }
            else
            {
              char v42 = -48;
            }
            uint64_t v43 = v40 * a3;
            if ((unsigned __int128)(v40 * (__int128)a3) >> 64 == (v40 * a3) >> 63)
            {
              unsigned __int8 v44 = v41 + v42;
              uint64_t v40 = v43 + v44;
              if (!__OFADD__(v43, v44))
              {
                ++v34;
                if (--v33) {
                  continue;
                }
              }
            }
            goto LABEL_130;
          }
        }
      }
      goto LABEL_130;
    }
    if (v5 >= 1)
    {
      if (v5 != 1)
      {
        sub_100026ED8();
        if (v7)
        {
          sub_1001570C0();
          while (1)
          {
            sub_1001570A8();
            if (v12 && v11 < v9)
            {
              char v13 = -48;
            }
            else if (v11 < 0x41 || v11 >= v8)
            {
              sub_10002B088();
              if (!v12 || v11 >= v14) {
                goto LABEL_130;
              }
              char v13 = -87;
            }
            else
            {
              char v13 = -55;
            }
            if ((unsigned __int128)(v10 * (__int128)a3) >> 64 == (v10 * a3) >> 63
              && !__OFSUB__(v10 * a3, (v11 + v13)))
            {
              sub_1001570B4();
              if (!v30) {
                continue;
              }
            }
            goto LABEL_130;
          }
        }
      }
      goto LABEL_130;
    }
    __break(1u);
LABEL_134:
    __break(1u);
LABEL_135:
    __break(1u);
    goto LABEL_136;
  }
  sub_100028358();
  if (!v30)
  {
    if (v15 != 45)
    {
      if (v16)
      {
        sub_100026ED8();
        while (1)
        {
          sub_10002EB18();
          if (v12 && v54 < v53)
          {
            char v55 = -48;
          }
          else if (v54 < 0x41 || v54 >= v52)
          {
            sub_10001DED0();
            if (!v12 || v54 >= v56) {
              goto LABEL_130;
            }
            char v55 = -87;
          }
          else
          {
            char v55 = -55;
          }
          if ((unsigned __int128)(v51 * (__int128)a3) >> 64 == (v51 * a3) >> 63
            && !__OFADD__(v51 * a3, (v54 + v55)))
          {
            sub_100029954();
            if (!v30) {
              continue;
            }
          }
          goto LABEL_130;
        }
      }
      goto LABEL_130;
    }
    if (v16)
    {
      if (v16 != 1)
      {
        sub_100026ED8();
        sub_10015714C();
        while (1)
        {
          sub_10002EB18();
          if (v12 && v20 < v19)
          {
            char v21 = -48;
          }
          else if (v20 < 0x41 || v20 >= v18)
          {
            sub_10001DED0();
            if (!v12 || v20 >= v22) {
              goto LABEL_130;
            }
            char v21 = -87;
          }
          else
          {
            char v21 = -55;
          }
          if ((unsigned __int128)(v17 * (__int128)a3) >> 64 == (v17 * a3) >> 63
            && !__OFSUB__(v17 * a3, (v20 + v21)))
          {
            sub_100029954();
            if (!v30) {
              continue;
            }
          }
          goto LABEL_130;
        }
      }
      goto LABEL_130;
    }
    goto LABEL_134;
  }
  if (v16)
  {
    if (v16 != 1)
    {
      sub_100026ED8();
      sub_10015714C();
      while (1)
      {
        sub_10002EB18();
        if (v12 && v48 < v47)
        {
          char v49 = -48;
        }
        else if (v48 < 0x41 || v48 >= v46)
        {
          sub_10001DED0();
          if (!v12 || v48 >= v50) {
            goto LABEL_130;
          }
          char v49 = -87;
        }
        else
        {
          char v49 = -55;
        }
        if ((unsigned __int128)(v45 * (__int128)a3) >> 64 == (v45 * a3) >> 63
          && !__OFADD__(v45 * a3, (v48 + v49)))
        {
          sub_100029954();
          if (!v30) {
            continue;
          }
        }
        goto LABEL_130;
      }
    }
    goto LABEL_130;
  }
LABEL_136:
  __break(1u);
}

unsigned __int8 *sub_100154AE0(unsigned __int8 *result, uint64_t a2)
{
  int v2 = *result;
  if (v2 == 43)
  {
    if (a2 >= 1)
    {
      if (a2 != 1)
      {
        sub_1000252FC();
        if (v20 ^ v21 | v19) {
          unsigned __int8 v25 = v28;
        }
        if (v20 ^ v21 | v19) {
          unsigned __int8 v26 = 65;
        }
        if (!(v20 ^ v21 | v19)) {
          unsigned __int8 v27 = 58;
        }
        if (v22)
        {
          uint64_t v13 = 0;
          unsigned __int8 v29 = (unsigned __int8 *)(v22 + 1);
          do
          {
            unsigned int v30 = *v29;
            if (v30 < 0x30 || v30 >= v27)
            {
              if (v30 < 0x41 || v30 >= v26)
              {
                uint64_t v17 = 0;
                if (v30 < 0x61 || v30 >= v25) {
                  return (unsigned __int8 *)v17;
                }
                char v31 = -87;
              }
              else
              {
                char v31 = -55;
              }
            }
            else
            {
              char v31 = -48;
            }
            uint64_t v32 = v13 * v23;
            if ((unsigned __int128)(v13 * (__int128)v23) >> 64 != (v13 * v23) >> 63) {
              return 0;
            }
            uint64_t v13 = v32 + (v30 + v31);
            if (__OFADD__(v32, (v30 + v31))) {
              return 0;
            }
            ++v29;
            --v24;
          }
          while (v24);
          return (unsigned __int8 *)v13;
        }
        return 0;
      }
      return 0;
    }
  }
  else
  {
    if (v2 != 45)
    {
      if (a2)
      {
        sub_1000252FC();
        if (v34 ^ v35 | v33) {
          unsigned __int8 v39 = v42;
        }
        if (v34 ^ v35 | v33) {
          unsigned __int8 v40 = 65;
        }
        if (!(v34 ^ v35 | v33)) {
          unsigned __int8 v41 = 58;
        }
        if (v36)
        {
          uint64_t v43 = 0;
          do
          {
            unsigned int v44 = *v36;
            if (v44 < 0x30 || v44 >= v41)
            {
              if (v44 < 0x41 || v44 >= v40)
              {
                uint64_t v17 = 0;
                if (v44 < 0x61 || v44 >= v39) {
                  return (unsigned __int8 *)v17;
                }
                char v45 = -87;
              }
              else
              {
                char v45 = -55;
              }
            }
            else
            {
              char v45 = -48;
            }
            uint64_t v46 = v43 * v37;
            if ((unsigned __int128)(v43 * (__int128)v37) >> 64 != (v43 * v37) >> 63) {
              return 0;
            }
            uint64_t v43 = v46 + (v44 + v45);
            if (__OFADD__(v46, (v44 + v45))) {
              return 0;
            }
            ++v36;
            --v38;
          }
          while (v38);
          return (unsigned __int8 *)(v46 + (v44 + v45));
        }
        return 0;
      }
      return 0;
    }
    if (a2 >= 1)
    {
      if (a2 != 1)
      {
        sub_1000252FC();
        if (v4 ^ v5 | v3) {
          unsigned __int8 v9 = v12;
        }
        if (v4 ^ v5 | v3) {
          unsigned __int8 v10 = 65;
        }
        if (!(v4 ^ v5 | v3)) {
          unsigned __int8 v11 = 58;
        }
        if (v6)
        {
          uint64_t v13 = 0;
          for (unint64_t i = (unsigned __int8 *)(v6 + 1); ; ++i)
          {
            unsigned int v15 = *i;
            if (v15 < 0x30 || v15 >= v11)
            {
              if (v15 < 0x41 || v15 >= v10)
              {
                uint64_t v17 = 0;
                if (v15 < 0x61 || v15 >= v9) {
                  return (unsigned __int8 *)v17;
                }
                char v16 = -87;
              }
              else
              {
                char v16 = -55;
              }
            }
            else
            {
              char v16 = -48;
            }
            uint64_t v18 = v13 * v7;
            if ((unsigned __int128)(v13 * (__int128)v7) >> 64 != (v13 * v7) >> 63) {
              return 0;
            }
            uint64_t v13 = v18 - (v15 + v16);
            if (__OFSUB__(v18, (v15 + v16))) {
              return 0;
            }
            if (!--v8) {
              return (unsigned __int8 *)v13;
            }
          }
        }
        return 0;
      }
      return 0;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100154D44(uint64_t result, unint64_t a2, uint64_t a3)
{
  if ((a2 & 0x1000000000000000) != 0)
  {
    unsigned __int8 v16 = 0;
    unsigned __int8 v54 = 0;
    goto LABEL_145;
  }
  uint64_t v5 = result;
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((result & 0x1000000000000000) != 0)
    {
      unint64_t result = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
      uint64_t v6 = v5 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      unint64_t result = _StringObject.sharedUTF8.getter();
    }
    int v7 = *(unsigned __int8 *)result;
    if (v7 == 43)
    {
      if (v6 >= 1)
      {
        uint64_t v27 = v6 - 1;
        if (v6 != 1)
        {
          unsigned __int8 v28 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v29 = a3 + 55;
          }
          else
          {
            unsigned __int8 v28 = 97;
            unsigned __int8 v29 = 65;
          }
          if (a3 <= 10) {
            unsigned __int8 v30 = a3 + 48;
          }
          else {
            unsigned __int8 v30 = 58;
          }
          if (result)
          {
            LOBYTE(v12) = 0;
            char v31 = (unsigned __int8 *)(result + 1);
            do
            {
              unsigned int v32 = *v31;
              if (v32 < 0x30 || v32 >= v30)
              {
                if (v32 < 0x41 || v32 >= v29)
                {
                  unsigned __int8 v16 = 0;
                  char v17 = 1;
                  if (v32 < 0x61 || v32 >= v28) {
                    goto LABEL_144;
                  }
                  char v33 = -87;
                }
                else
                {
                  char v33 = -55;
                }
              }
              else
              {
                char v33 = -48;
              }
              if (((v12 * (unsigned __int16)a3) & 0xFF00) != 0) {
                goto LABEL_143;
              }
              unsigned int v12 = (v12 * a3) + (v32 + v33);
              if ((v12 >> 8)) {
                goto LABEL_143;
              }
              ++v31;
              --v27;
            }
            while (v27);
LABEL_76:
            char v17 = 0;
            unsigned __int8 v16 = v12;
            goto LABEL_144;
          }
          goto LABEL_99;
        }
LABEL_143:
        unsigned __int8 v16 = 0;
        char v17 = 1;
        goto LABEL_144;
      }
      goto LABEL_150;
    }
    if (v7 != 45)
    {
      if (v6)
      {
        unsigned __int8 v34 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v35 = a3 + 55;
        }
        else
        {
          unsigned __int8 v34 = 97;
          unsigned __int8 v35 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v36 = a3 + 48;
        }
        else {
          unsigned __int8 v36 = 58;
        }
        if (result)
        {
          LOBYTE(v37) = 0;
          do
          {
            unsigned int v38 = *(unsigned __int8 *)result;
            if (v38 < 0x30 || v38 >= v36)
            {
              if (v38 < 0x41 || v38 >= v35)
              {
                unsigned __int8 v16 = 0;
                char v17 = 1;
                if (v38 < 0x61 || v38 >= v34) {
                  goto LABEL_144;
                }
                char v39 = -87;
              }
              else
              {
                char v39 = -55;
              }
            }
            else
            {
              char v39 = -48;
            }
            if (((v37 * (unsigned __int16)a3) & 0xFF00) != 0) {
              goto LABEL_143;
            }
            unsigned int v37 = (v37 * a3) + (v38 + v39);
            if ((v37 >> 8)) {
              goto LABEL_143;
            }
            ++result;
            --v6;
          }
          while (v6);
          char v17 = 0;
          unsigned __int8 v16 = v37;
          goto LABEL_144;
        }
        goto LABEL_99;
      }
      goto LABEL_143;
    }
    if (v6 >= 1)
    {
      uint64_t v8 = v6 - 1;
      if (v6 != 1)
      {
        unsigned __int8 v9 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v10 = a3 + 55;
        }
        else
        {
          unsigned __int8 v9 = 97;
          unsigned __int8 v10 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v11 = a3 + 48;
        }
        else {
          unsigned __int8 v11 = 58;
        }
        if (result)
        {
          LOBYTE(v12) = 0;
          uint64_t v13 = (unsigned __int8 *)(result + 1);
          while (1)
          {
            unsigned int v14 = *v13;
            if (v14 < 0x30 || v14 >= v11)
            {
              if (v14 < 0x41 || v14 >= v10)
              {
                unsigned __int8 v16 = 0;
                char v17 = 1;
                if (v14 < 0x61 || v14 >= v9) {
                  goto LABEL_144;
                }
                char v15 = -87;
              }
              else
              {
                char v15 = -55;
              }
            }
            else
            {
              char v15 = -48;
            }
            if (((v12 * (unsigned __int16)a3) & 0xFF00) != 0) {
              goto LABEL_143;
            }
            unsigned int v12 = (v12 * a3) - (v14 + v15);
            if ((v12 & 0xFFFFFF00) != 0) {
              goto LABEL_143;
            }
            ++v13;
            if (!--v8) {
              goto LABEL_76;
            }
          }
        }
LABEL_99:
        unsigned __int8 v16 = 0;
        char v17 = 0;
LABEL_144:
        unsigned __int8 v54 = v17;
LABEL_145:
        LOBYTE(v53[0]) = (a2 & 0x1000000000000000) != 0;
        return v16 | (v54 << 8) | (LOBYTE(v53[0]) << 16);
      }
      goto LABEL_143;
    }
    __break(1u);
LABEL_149:
    __break(1u);
LABEL_150:
    __break(1u);
    goto LABEL_151;
  }
  uint64_t v18 = HIBYTE(a2) & 0xF;
  v53[0] = result;
  v53[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  if (result != 43)
  {
    if (result != 45)
    {
      if (v18)
      {
        LOBYTE(v20) = 0;
        unsigned __int8 v47 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v48 = a3 + 55;
        }
        else
        {
          unsigned __int8 v47 = 97;
          unsigned __int8 v48 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v49 = a3 + 48;
        }
        else {
          unsigned __int8 v49 = 58;
        }
        unsigned __int8 v50 = (unsigned __int8 *)v53;
        while (1)
        {
          unsigned int v51 = *v50;
          if (v51 < 0x30 || v51 >= v49)
          {
            if (v51 < 0x41 || v51 >= v48)
            {
              unsigned __int8 v16 = 0;
              char v17 = 1;
              if (v51 < 0x61 || v51 >= v47) {
                goto LABEL_144;
              }
              char v52 = -87;
            }
            else
            {
              char v52 = -55;
            }
          }
          else
          {
            char v52 = -48;
          }
          if (((v20 * (unsigned __int16)a3) & 0xFF00) != 0) {
            goto LABEL_143;
          }
          unsigned int v20 = (v20 * a3) + (v51 + v52);
          if ((v20 >> 8)) {
            goto LABEL_143;
          }
          ++v50;
          if (!--v18) {
            goto LABEL_142;
          }
        }
      }
      goto LABEL_143;
    }
    if (v18)
    {
      uint64_t v19 = v18 - 1;
      if (v19)
      {
        LOBYTE(v20) = 0;
        unsigned __int8 v21 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v22 = a3 + 55;
        }
        else
        {
          unsigned __int8 v21 = 97;
          unsigned __int8 v22 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v23 = a3 + 48;
        }
        else {
          unsigned __int8 v23 = 58;
        }
        uint64_t v24 = (unsigned __int8 *)v53 + 1;
        while (1)
        {
          unsigned int v25 = *v24;
          if (v25 < 0x30 || v25 >= v23)
          {
            if (v25 < 0x41 || v25 >= v22)
            {
              unsigned __int8 v16 = 0;
              char v17 = 1;
              if (v25 < 0x61 || v25 >= v21) {
                goto LABEL_144;
              }
              char v26 = -87;
            }
            else
            {
              char v26 = -55;
            }
          }
          else
          {
            char v26 = -48;
          }
          if (((v20 * (unsigned __int16)a3) & 0xFF00) != 0) {
            goto LABEL_143;
          }
          unsigned int v20 = (v20 * a3) - (v25 + v26);
          if ((v20 & 0xFFFFFF00) != 0) {
            goto LABEL_143;
          }
          ++v24;
          if (!--v19) {
            goto LABEL_142;
          }
        }
      }
      goto LABEL_143;
    }
    goto LABEL_149;
  }
  if (v18)
  {
    uint64_t v40 = v18 - 1;
    if (v40)
    {
      LOBYTE(v20) = 0;
      unsigned __int8 v41 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v42 = a3 + 55;
      }
      else
      {
        unsigned __int8 v41 = 97;
        unsigned __int8 v42 = 65;
      }
      if (a3 <= 10) {
        unsigned __int8 v43 = a3 + 48;
      }
      else {
        unsigned __int8 v43 = 58;
      }
      unsigned int v44 = (unsigned __int8 *)v53 + 1;
      do
      {
        unsigned int v45 = *v44;
        if (v45 < 0x30 || v45 >= v43)
        {
          if (v45 < 0x41 || v45 >= v42)
          {
            unsigned __int8 v16 = 0;
            char v17 = 1;
            if (v45 < 0x61 || v45 >= v41) {
              goto LABEL_144;
            }
            char v46 = -87;
          }
          else
          {
            char v46 = -55;
          }
        }
        else
        {
          char v46 = -48;
        }
        if (((v20 * (unsigned __int16)a3) & 0xFF00) != 0) {
          goto LABEL_143;
        }
        unsigned int v20 = (v20 * a3) + (v45 + v46);
        if ((v20 >> 8)) {
          goto LABEL_143;
        }
        ++v44;
        --v40;
      }
      while (v40);
LABEL_142:
      char v17 = 0;
      unsigned __int8 v16 = v20;
      goto LABEL_144;
    }
    goto LABEL_143;
  }
LABEL_151:
  __break(1u);
  return result;
}

uint64_t sub_1001552E8()
{
  sub_100028504();
  String.init<A>(_:)();
  sub_100024518();
  sub_100155350();
  __int16 v1 = v0;
  swift_bridgeObjectRelease();
  return v1 & 0x1FF;
}

void sub_100155350()
{
  sub_100157058();
  sub_100028DCC();
  if ((v2 & 0x1000000000000000) == 0)
  {
    if ((v2 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    sub_10002B36C();
    goto LABEL_7;
  }
  sub_100019C74();
  sub_100023F50();
  sub_10015712C();
  if ((v2 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v1 & 0x1000000000000000) != 0) {
    sub_100028B70();
  }
  else {
    sub_10001AB88();
  }
LABEL_7:
  sub_10002E7DC();
  v0();
  sub_1000293FC();
}

unsigned __int8 *sub_1001553D0(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  int v3 = *result;
  if (v3 == 43)
  {
    if (a2 >= 1)
    {
      uint64_t v14 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v15 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v16 = a3 + 55;
        }
        else
        {
          unsigned __int8 v15 = 97;
          unsigned __int8 v16 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v17 = a3 + 48;
        }
        else {
          unsigned __int8 v17 = 58;
        }
        if (result)
        {
          LOBYTE(v8) = 0;
          uint64_t v18 = result + 1;
          do
          {
            unsigned int v19 = *v18;
            if (v19 < 0x30 || v19 >= v17)
            {
              if (v19 < 0x41 || v19 >= v16)
              {
                unsigned __int8 v12 = 0;
                int v13 = 1;
                if (v19 < 0x61 || v19 >= v15) {
                  return (unsigned __int8 *)(v12 | (v13 << 8));
                }
                char v20 = -87;
              }
              else
              {
                char v20 = -55;
              }
            }
            else
            {
              char v20 = -48;
            }
            if (((v8 * (unsigned __int16)a3) & 0xFF00) != 0) {
              goto LABEL_72;
            }
            unsigned int v8 = (v8 * a3) + (v19 + v20);
            if ((v8 >> 8)) {
              goto LABEL_72;
            }
            ++v18;
            --v14;
          }
          while (v14);
LABEL_48:
          int v13 = 0;
          unsigned __int8 v12 = v8;
          return (unsigned __int8 *)(v12 | (v13 << 8));
        }
        goto LABEL_71;
      }
LABEL_72:
      unsigned __int8 v12 = 0;
      int v13 = 1;
      return (unsigned __int8 *)(v12 | (v13 << 8));
    }
  }
  else
  {
    if (v3 != 45)
    {
      if (a2)
      {
        unsigned __int8 v21 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v22 = a3 + 55;
        }
        else
        {
          unsigned __int8 v21 = 97;
          unsigned __int8 v22 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v23 = a3 + 48;
        }
        else {
          unsigned __int8 v23 = 58;
        }
        if (result)
        {
          LOBYTE(v24) = 0;
          do
          {
            unsigned int v25 = *result;
            if (v25 < 0x30 || v25 >= v23)
            {
              if (v25 < 0x41 || v25 >= v22)
              {
                unsigned __int8 v12 = 0;
                int v13 = 1;
                if (v25 < 0x61 || v25 >= v21) {
                  return (unsigned __int8 *)(v12 | (v13 << 8));
                }
                char v26 = -87;
              }
              else
              {
                char v26 = -55;
              }
            }
            else
            {
              char v26 = -48;
            }
            if (((v24 * (unsigned __int16)a3) & 0xFF00) != 0) {
              goto LABEL_72;
            }
            unsigned int v24 = (v24 * a3) + (v25 + v26);
            if ((v24 >> 8)) {
              goto LABEL_72;
            }
            ++result;
            --a2;
          }
          while (a2);
          int v13 = 0;
          unsigned __int8 v12 = v24;
          return (unsigned __int8 *)(v12 | (v13 << 8));
        }
        goto LABEL_71;
      }
      goto LABEL_72;
    }
    if (a2 >= 1)
    {
      uint64_t v4 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v5 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v6 = a3 + 55;
        }
        else
        {
          unsigned __int8 v5 = 97;
          unsigned __int8 v6 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v7 = a3 + 48;
        }
        else {
          unsigned __int8 v7 = 58;
        }
        if (result)
        {
          LOBYTE(v8) = 0;
          unsigned __int8 v9 = result + 1;
          while (1)
          {
            unsigned int v10 = *v9;
            if (v10 < 0x30 || v10 >= v7)
            {
              if (v10 < 0x41 || v10 >= v6)
              {
                unsigned __int8 v12 = 0;
                int v13 = 1;
                if (v10 < 0x61 || v10 >= v5) {
                  return (unsigned __int8 *)(v12 | (v13 << 8));
                }
                char v11 = -87;
              }
              else
              {
                char v11 = -55;
              }
            }
            else
            {
              char v11 = -48;
            }
            if (((v8 * (unsigned __int16)a3) & 0xFF00) != 0) {
              goto LABEL_72;
            }
            unsigned int v8 = (v8 * a3) - (v10 + v11);
            if ((v8 & 0xFFFFFF00) != 0) {
              goto LABEL_72;
            }
            ++v9;
            if (!--v4) {
              goto LABEL_48;
            }
          }
        }
LABEL_71:
        unsigned __int8 v12 = 0;
        int v13 = 0;
        return (unsigned __int8 *)(v12 | (v13 << 8));
      }
      goto LABEL_72;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100155678(uint64_t result, unint64_t a2, uint64_t a3)
{
  if ((a2 & 0x1000000000000000) != 0)
  {
    unsigned __int16 v16 = 0;
    unsigned __int8 v54 = 0;
    goto LABEL_145;
  }
  uint64_t v5 = result;
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((result & 0x1000000000000000) != 0)
    {
      unint64_t result = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
      uint64_t v6 = v5 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      unint64_t result = _StringObject.sharedUTF8.getter();
    }
    int v7 = *(unsigned __int8 *)result;
    if (v7 == 43)
    {
      if (v6 >= 1)
      {
        uint64_t v27 = v6 - 1;
        if (v6 != 1)
        {
          unsigned __int8 v28 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v29 = a3 + 55;
          }
          else
          {
            unsigned __int8 v28 = 97;
            unsigned __int8 v29 = 65;
          }
          if (a3 <= 10) {
            unsigned __int8 v30 = a3 + 48;
          }
          else {
            unsigned __int8 v30 = 58;
          }
          if (result)
          {
            LOWORD(v12) = 0;
            char v31 = (unsigned __int8 *)(result + 1);
            do
            {
              unsigned int v32 = *v31;
              if (v32 < 0x30 || v32 >= v30)
              {
                if (v32 < 0x41 || v32 >= v29)
                {
                  unsigned __int16 v16 = 0;
                  char v17 = 1;
                  if (v32 < 0x61 || v32 >= v28) {
                    goto LABEL_144;
                  }
                  char v33 = -87;
                }
                else
                {
                  char v33 = -55;
                }
              }
              else
              {
                char v33 = -48;
              }
              if ((((unsigned __int16)v12 * (unsigned __int16)a3) & 0xFFFF0000) != 0) {
                goto LABEL_143;
              }
              int v12 = (unsigned __int16)(v12 * a3) + (v32 + v33);
              if ((v12 & 0x10000) != 0) {
                goto LABEL_143;
              }
              ++v31;
              --v27;
            }
            while (v27);
LABEL_76:
            char v17 = 0;
            unsigned __int16 v16 = v12;
            goto LABEL_144;
          }
          goto LABEL_99;
        }
LABEL_143:
        unsigned __int16 v16 = 0;
        char v17 = 1;
        goto LABEL_144;
      }
      goto LABEL_150;
    }
    if (v7 != 45)
    {
      if (v6)
      {
        unsigned __int8 v34 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v35 = a3 + 55;
        }
        else
        {
          unsigned __int8 v34 = 97;
          unsigned __int8 v35 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v36 = a3 + 48;
        }
        else {
          unsigned __int8 v36 = 58;
        }
        if (result)
        {
          LOWORD(v37) = 0;
          do
          {
            unsigned int v38 = *(unsigned __int8 *)result;
            if (v38 < 0x30 || v38 >= v36)
            {
              if (v38 < 0x41 || v38 >= v35)
              {
                unsigned __int16 v16 = 0;
                char v17 = 1;
                if (v38 < 0x61 || v38 >= v34) {
                  goto LABEL_144;
                }
                char v39 = -87;
              }
              else
              {
                char v39 = -55;
              }
            }
            else
            {
              char v39 = -48;
            }
            if ((((unsigned __int16)v37 * (unsigned __int16)a3) & 0xFFFF0000) != 0) {
              goto LABEL_143;
            }
            int v37 = (unsigned __int16)(v37 * a3) + (v38 + v39);
            if ((v37 & 0x10000) != 0) {
              goto LABEL_143;
            }
            ++result;
            --v6;
          }
          while (v6);
          char v17 = 0;
          unsigned __int16 v16 = v37;
          goto LABEL_144;
        }
        goto LABEL_99;
      }
      goto LABEL_143;
    }
    if (v6 >= 1)
    {
      uint64_t v8 = v6 - 1;
      if (v6 != 1)
      {
        unsigned __int8 v9 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v10 = a3 + 55;
        }
        else
        {
          unsigned __int8 v9 = 97;
          unsigned __int8 v10 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v11 = a3 + 48;
        }
        else {
          unsigned __int8 v11 = 58;
        }
        if (result)
        {
          LOWORD(v12) = 0;
          int v13 = (unsigned __int8 *)(result + 1);
          while (1)
          {
            unsigned int v14 = *v13;
            if (v14 < 0x30 || v14 >= v11)
            {
              if (v14 < 0x41 || v14 >= v10)
              {
                unsigned __int16 v16 = 0;
                char v17 = 1;
                if (v14 < 0x61 || v14 >= v9) {
                  goto LABEL_144;
                }
                char v15 = -87;
              }
              else
              {
                char v15 = -55;
              }
            }
            else
            {
              char v15 = -48;
            }
            if ((((unsigned __int16)v12 * (unsigned __int16)a3) & 0xFFFF0000) != 0) {
              goto LABEL_143;
            }
            int v12 = (unsigned __int16)(v12 * a3) - (v14 + v15);
            if ((v12 & 0xFFFF0000) != 0) {
              goto LABEL_143;
            }
            ++v13;
            if (!--v8) {
              goto LABEL_76;
            }
          }
        }
LABEL_99:
        unsigned __int16 v16 = 0;
        char v17 = 0;
LABEL_144:
        unsigned __int8 v54 = v17;
LABEL_145:
        LOBYTE(v53[0]) = (a2 & 0x1000000000000000) != 0;
        return v16 | (v54 << 16) | (LOBYTE(v53[0]) << 24);
      }
      goto LABEL_143;
    }
    __break(1u);
LABEL_149:
    __break(1u);
LABEL_150:
    __break(1u);
    goto LABEL_151;
  }
  uint64_t v18 = HIBYTE(a2) & 0xF;
  v53[0] = result;
  v53[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  if (result != 43)
  {
    if (result != 45)
    {
      if (v18)
      {
        LOWORD(v20) = 0;
        unsigned __int8 v47 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v48 = a3 + 55;
        }
        else
        {
          unsigned __int8 v47 = 97;
          unsigned __int8 v48 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v49 = a3 + 48;
        }
        else {
          unsigned __int8 v49 = 58;
        }
        unsigned __int8 v50 = (unsigned __int8 *)v53;
        while (1)
        {
          unsigned int v51 = *v50;
          if (v51 < 0x30 || v51 >= v49)
          {
            if (v51 < 0x41 || v51 >= v48)
            {
              unsigned __int16 v16 = 0;
              char v17 = 1;
              if (v51 < 0x61 || v51 >= v47) {
                goto LABEL_144;
              }
              char v52 = -87;
            }
            else
            {
              char v52 = -55;
            }
          }
          else
          {
            char v52 = -48;
          }
          if ((((unsigned __int16)v20 * (unsigned __int16)a3) & 0xFFFF0000) != 0) {
            goto LABEL_143;
          }
          int v20 = (unsigned __int16)(v20 * a3) + (v51 + v52);
          if ((v20 & 0x10000) != 0) {
            goto LABEL_143;
          }
          ++v50;
          if (!--v18) {
            goto LABEL_142;
          }
        }
      }
      goto LABEL_143;
    }
    if (v18)
    {
      uint64_t v19 = v18 - 1;
      if (v19)
      {
        LOWORD(v20) = 0;
        unsigned __int8 v21 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v22 = a3 + 55;
        }
        else
        {
          unsigned __int8 v21 = 97;
          unsigned __int8 v22 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v23 = a3 + 48;
        }
        else {
          unsigned __int8 v23 = 58;
        }
        unsigned int v24 = (unsigned __int8 *)v53 + 1;
        while (1)
        {
          unsigned int v25 = *v24;
          if (v25 < 0x30 || v25 >= v23)
          {
            if (v25 < 0x41 || v25 >= v22)
            {
              unsigned __int16 v16 = 0;
              char v17 = 1;
              if (v25 < 0x61 || v25 >= v21) {
                goto LABEL_144;
              }
              char v26 = -87;
            }
            else
            {
              char v26 = -55;
            }
          }
          else
          {
            char v26 = -48;
          }
          if ((((unsigned __int16)v20 * (unsigned __int16)a3) & 0xFFFF0000) != 0) {
            goto LABEL_143;
          }
          int v20 = (unsigned __int16)(v20 * a3) - (v25 + v26);
          if ((v20 & 0xFFFF0000) != 0) {
            goto LABEL_143;
          }
          ++v24;
          if (!--v19) {
            goto LABEL_142;
          }
        }
      }
      goto LABEL_143;
    }
    goto LABEL_149;
  }
  if (v18)
  {
    uint64_t v40 = v18 - 1;
    if (v40)
    {
      LOWORD(v20) = 0;
      unsigned __int8 v41 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v42 = a3 + 55;
      }
      else
      {
        unsigned __int8 v41 = 97;
        unsigned __int8 v42 = 65;
      }
      if (a3 <= 10) {
        unsigned __int8 v43 = a3 + 48;
      }
      else {
        unsigned __int8 v43 = 58;
      }
      unsigned int v44 = (unsigned __int8 *)v53 + 1;
      do
      {
        unsigned int v45 = *v44;
        if (v45 < 0x30 || v45 >= v43)
        {
          if (v45 < 0x41 || v45 >= v42)
          {
            unsigned __int16 v16 = 0;
            char v17 = 1;
            if (v45 < 0x61 || v45 >= v41) {
              goto LABEL_144;
            }
            char v46 = -87;
          }
          else
          {
            char v46 = -55;
          }
        }
        else
        {
          char v46 = -48;
        }
        if ((((unsigned __int16)v20 * (unsigned __int16)a3) & 0xFFFF0000) != 0) {
          goto LABEL_143;
        }
        int v20 = (unsigned __int16)(v20 * a3) + (v45 + v46);
        if ((v20 & 0x10000) != 0) {
          goto LABEL_143;
        }
        ++v44;
        --v40;
      }
      while (v40);
LABEL_142:
      char v17 = 0;
      unsigned __int16 v16 = v20;
      goto LABEL_144;
    }
    goto LABEL_143;
  }
LABEL_151:
  __break(1u);
  return result;
}

uint64_t sub_100155C1C()
{
  sub_100028504();
  String.init<A>(_:)();
  sub_100024518();
  sub_100155C84();
  int v1 = v0;
  swift_bridgeObjectRelease();
  return v1 & 0x1FFFF;
}

void sub_100155C84()
{
  sub_100157058();
  sub_100028DCC();
  if ((v2 & 0x1000000000000000) == 0)
  {
    if ((v2 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    sub_10002B36C();
    goto LABEL_7;
  }
  sub_100019C74();
  sub_100023F50();
  sub_10015712C();
  if ((v2 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v1 & 0x1000000000000000) != 0) {
    sub_100028B70();
  }
  else {
    sub_10001AB88();
  }
LABEL_7:
  sub_10002E7DC();
  v0();
  sub_1000293FC();
}

unsigned __int8 *sub_100155CFC(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  int v3 = *result;
  if (v3 == 43)
  {
    if (a2 >= 1)
    {
      uint64_t v14 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v15 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v16 = a3 + 55;
        }
        else
        {
          unsigned __int8 v15 = 97;
          unsigned __int8 v16 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v17 = a3 + 48;
        }
        else {
          unsigned __int8 v17 = 58;
        }
        if (result)
        {
          LOWORD(v8) = 0;
          uint64_t v18 = result + 1;
          do
          {
            unsigned int v19 = *v18;
            if (v19 < 0x30 || v19 >= v17)
            {
              if (v19 < 0x41 || v19 >= v16)
              {
                unsigned __int16 v12 = 0;
                int v13 = 1;
                if (v19 < 0x61 || v19 >= v15) {
                  return (unsigned __int8 *)(v12 | (v13 << 16));
                }
                char v20 = -87;
              }
              else
              {
                char v20 = -55;
              }
            }
            else
            {
              char v20 = -48;
            }
            if ((((unsigned __int16)v8 * (unsigned __int16)a3) & 0xFFFF0000) != 0) {
              goto LABEL_72;
            }
            int v8 = (unsigned __int16)(v8 * a3) + (v19 + v20);
            if ((v8 & 0x10000) != 0) {
              goto LABEL_72;
            }
            ++v18;
            --v14;
          }
          while (v14);
LABEL_48:
          int v13 = 0;
          unsigned __int16 v12 = v8;
          return (unsigned __int8 *)(v12 | (v13 << 16));
        }
        goto LABEL_71;
      }
LABEL_72:
      unsigned __int16 v12 = 0;
      int v13 = 1;
      return (unsigned __int8 *)(v12 | (v13 << 16));
    }
  }
  else
  {
    if (v3 != 45)
    {
      if (a2)
      {
        unsigned __int8 v21 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v22 = a3 + 55;
        }
        else
        {
          unsigned __int8 v21 = 97;
          unsigned __int8 v22 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v23 = a3 + 48;
        }
        else {
          unsigned __int8 v23 = 58;
        }
        if (result)
        {
          LOWORD(v24) = 0;
          do
          {
            unsigned int v25 = *result;
            if (v25 < 0x30 || v25 >= v23)
            {
              if (v25 < 0x41 || v25 >= v22)
              {
                unsigned __int16 v12 = 0;
                int v13 = 1;
                if (v25 < 0x61 || v25 >= v21) {
                  return (unsigned __int8 *)(v12 | (v13 << 16));
                }
                char v26 = -87;
              }
              else
              {
                char v26 = -55;
              }
            }
            else
            {
              char v26 = -48;
            }
            if ((((unsigned __int16)v24 * (unsigned __int16)a3) & 0xFFFF0000) != 0) {
              goto LABEL_72;
            }
            int v24 = (unsigned __int16)(v24 * a3) + (v25 + v26);
            if ((v24 & 0x10000) != 0) {
              goto LABEL_72;
            }
            ++result;
            --a2;
          }
          while (a2);
          int v13 = 0;
          unsigned __int16 v12 = v24;
          return (unsigned __int8 *)(v12 | (v13 << 16));
        }
        goto LABEL_71;
      }
      goto LABEL_72;
    }
    if (a2 >= 1)
    {
      uint64_t v4 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v5 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v6 = a3 + 55;
        }
        else
        {
          unsigned __int8 v5 = 97;
          unsigned __int8 v6 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v7 = a3 + 48;
        }
        else {
          unsigned __int8 v7 = 58;
        }
        if (result)
        {
          LOWORD(v8) = 0;
          unsigned __int8 v9 = result + 1;
          while (1)
          {
            unsigned int v10 = *v9;
            if (v10 < 0x30 || v10 >= v7)
            {
              if (v10 < 0x41 || v10 >= v6)
              {
                unsigned __int16 v12 = 0;
                int v13 = 1;
                if (v10 < 0x61 || v10 >= v5) {
                  return (unsigned __int8 *)(v12 | (v13 << 16));
                }
                char v11 = -87;
              }
              else
              {
                char v11 = -55;
              }
            }
            else
            {
              char v11 = -48;
            }
            if ((((unsigned __int16)v8 * (unsigned __int16)a3) & 0xFFFF0000) != 0) {
              goto LABEL_72;
            }
            int v8 = (unsigned __int16)(v8 * a3) - (v10 + v11);
            if ((v8 & 0xFFFF0000) != 0) {
              goto LABEL_72;
            }
            ++v9;
            if (!--v4) {
              goto LABEL_48;
            }
          }
        }
LABEL_71:
        unsigned __int16 v12 = 0;
        int v13 = 0;
        return (unsigned __int8 *)(v12 | (v13 << 16));
      }
      goto LABEL_72;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100155FA4(uint64_t result, unint64_t a2, uint64_t a3)
{
  if ((a2 & 0x1000000000000000) != 0)
  {
    unsigned int v16 = 0;
    unsigned __int8 v66 = 0;
    return v16 | ((unint64_t)v66 << 32) | (((a2 >> 60) & 1) << 40);
  }
  uint64_t v5 = result;
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((result & 0x1000000000000000) != 0)
    {
      unint64_t result = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
      uint64_t v6 = v5 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      unint64_t result = _StringObject.sharedUTF8.getter();
    }
    int v7 = *(unsigned __int8 *)result;
    if (v7 == 43)
    {
      if (v6 >= 1)
      {
        uint64_t v31 = v6 - 1;
        if (v6 != 1)
        {
          unsigned __int8 v32 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v33 = a3 + 55;
          }
          else
          {
            unsigned __int8 v32 = 97;
            unsigned __int8 v33 = 65;
          }
          if (a3 <= 10) {
            unsigned __int8 v34 = a3 + 48;
          }
          else {
            unsigned __int8 v34 = 58;
          }
          if (result)
          {
            unsigned int v12 = 0;
            unsigned __int8 v35 = (unsigned __int8 *)(result + 1);
            do
            {
              unsigned int v36 = *v35;
              if (v36 < 0x30 || v36 >= v34)
              {
                if (v36 < 0x41 || v36 >= v33)
                {
                  unsigned int v16 = 0;
                  char v17 = 1;
                  if (v36 < 0x61 || v36 >= v32) {
                    goto LABEL_144;
                  }
                  char v37 = -87;
                }
                else
                {
                  char v37 = -55;
                }
              }
              else
              {
                char v37 = -48;
              }
              unint64_t v38 = v12 * (unint64_t)a3;
              if ((v38 & 0xFFFFFFFF00000000) != 0) {
                goto LABEL_143;
              }
              unsigned __int8 v39 = v36 + v37;
              unsigned int v12 = v38 + v39;
              if (__CFADD__(v38, v39)) {
                goto LABEL_143;
              }
              ++v35;
              --v31;
            }
            while (v31);
LABEL_76:
            char v17 = 0;
            unsigned int v16 = v12;
            goto LABEL_144;
          }
          goto LABEL_99;
        }
LABEL_143:
        unsigned int v16 = 0;
        char v17 = 1;
        goto LABEL_144;
      }
      goto LABEL_150;
    }
    if (v7 != 45)
    {
      if (v6)
      {
        unsigned __int8 v40 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v41 = a3 + 55;
        }
        else
        {
          unsigned __int8 v40 = 97;
          unsigned __int8 v41 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v42 = a3 + 48;
        }
        else {
          unsigned __int8 v42 = 58;
        }
        if (result)
        {
          unsigned int v43 = 0;
          do
          {
            unsigned int v44 = *(unsigned __int8 *)result;
            if (v44 < 0x30 || v44 >= v42)
            {
              if (v44 < 0x41 || v44 >= v41)
              {
                unsigned int v16 = 0;
                char v17 = 1;
                if (v44 < 0x61 || v44 >= v40) {
                  goto LABEL_144;
                }
                char v45 = -87;
              }
              else
              {
                char v45 = -55;
              }
            }
            else
            {
              char v45 = -48;
            }
            unint64_t v46 = v43 * (unint64_t)a3;
            if ((v46 & 0xFFFFFFFF00000000) != 0) {
              goto LABEL_143;
            }
            unsigned __int8 v47 = v44 + v45;
            unsigned int v43 = v46 + v47;
            if (__CFADD__(v46, v47)) {
              goto LABEL_143;
            }
            ++result;
            --v6;
          }
          while (v6);
          char v17 = 0;
          unsigned int v16 = v43;
          goto LABEL_144;
        }
        goto LABEL_99;
      }
      goto LABEL_143;
    }
    if (v6 >= 1)
    {
      uint64_t v8 = v6 - 1;
      if (v6 != 1)
      {
        unsigned __int8 v9 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v10 = a3 + 55;
        }
        else
        {
          unsigned __int8 v9 = 97;
          unsigned __int8 v10 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v11 = a3 + 48;
        }
        else {
          unsigned __int8 v11 = 58;
        }
        if (result)
        {
          unsigned int v12 = 0;
          int v13 = (unsigned __int8 *)(result + 1);
          while (1)
          {
            unsigned int v14 = *v13;
            if (v14 < 0x30 || v14 >= v11)
            {
              if (v14 < 0x41 || v14 >= v10)
              {
                unsigned int v16 = 0;
                char v17 = 1;
                if (v14 < 0x61 || v14 >= v9) {
                  goto LABEL_144;
                }
                char v15 = -87;
              }
              else
              {
                char v15 = -55;
              }
            }
            else
            {
              char v15 = -48;
            }
            unint64_t v18 = v12 * (unint64_t)a3;
            if ((v18 & 0xFFFFFFFF00000000) != 0) {
              goto LABEL_143;
            }
            unsigned __int8 v19 = v14 + v15;
            unsigned int v12 = v18 - v19;
            if (v18 < v19) {
              goto LABEL_143;
            }
            ++v13;
            if (!--v8) {
              goto LABEL_76;
            }
          }
        }
LABEL_99:
        unsigned int v16 = 0;
        char v17 = 0;
LABEL_144:
        unsigned __int8 v66 = v17;
        return v16 | ((unint64_t)v66 << 32) | (((a2 >> 60) & 1) << 40);
      }
      goto LABEL_143;
    }
    __break(1u);
LABEL_149:
    __break(1u);
LABEL_150:
    __break(1u);
    goto LABEL_151;
  }
  uint64_t v20 = HIBYTE(a2) & 0xF;
  v65[0] = result;
  v65[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  if (result != 43)
  {
    if (result != 45)
    {
      if (v20)
      {
        unsigned int v22 = 0;
        unsigned __int8 v57 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v58 = a3 + 55;
        }
        else
        {
          unsigned __int8 v57 = 97;
          unsigned __int8 v58 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v59 = a3 + 48;
        }
        else {
          unsigned __int8 v59 = 58;
        }
        unint64_t v60 = (unsigned __int8 *)v65;
        while (1)
        {
          unsigned int v61 = *v60;
          if (v61 < 0x30 || v61 >= v59)
          {
            if (v61 < 0x41 || v61 >= v58)
            {
              unsigned int v16 = 0;
              char v17 = 1;
              if (v61 < 0x61 || v61 >= v57) {
                goto LABEL_144;
              }
              char v62 = -87;
            }
            else
            {
              char v62 = -55;
            }
          }
          else
          {
            char v62 = -48;
          }
          unint64_t v63 = v22 * (unint64_t)a3;
          if ((v63 & 0xFFFFFFFF00000000) != 0) {
            goto LABEL_143;
          }
          unsigned __int8 v64 = v61 + v62;
          unsigned int v22 = v63 + v64;
          if (__CFADD__(v63, v64)) {
            goto LABEL_143;
          }
          ++v60;
          if (!--v20) {
            goto LABEL_142;
          }
        }
      }
      goto LABEL_143;
    }
    if (v20)
    {
      uint64_t v21 = v20 - 1;
      if (v21)
      {
        unsigned int v22 = 0;
        unsigned __int8 v23 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v24 = a3 + 55;
        }
        else
        {
          unsigned __int8 v23 = 97;
          unsigned __int8 v24 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v25 = a3 + 48;
        }
        else {
          unsigned __int8 v25 = 58;
        }
        char v26 = (unsigned __int8 *)v65 + 1;
        while (1)
        {
          unsigned int v27 = *v26;
          if (v27 < 0x30 || v27 >= v25)
          {
            if (v27 < 0x41 || v27 >= v24)
            {
              unsigned int v16 = 0;
              char v17 = 1;
              if (v27 < 0x61 || v27 >= v23) {
                goto LABEL_144;
              }
              char v28 = -87;
            }
            else
            {
              char v28 = -55;
            }
          }
          else
          {
            char v28 = -48;
          }
          unint64_t v29 = v22 * (unint64_t)a3;
          if ((v29 & 0xFFFFFFFF00000000) != 0) {
            goto LABEL_143;
          }
          unsigned __int8 v30 = v27 + v28;
          unsigned int v22 = v29 - v30;
          if (v29 < v30) {
            goto LABEL_143;
          }
          ++v26;
          if (!--v21) {
            goto LABEL_142;
          }
        }
      }
      goto LABEL_143;
    }
    goto LABEL_149;
  }
  if (v20)
  {
    uint64_t v48 = v20 - 1;
    if (v48)
    {
      unsigned int v22 = 0;
      unsigned __int8 v49 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v50 = a3 + 55;
      }
      else
      {
        unsigned __int8 v49 = 97;
        unsigned __int8 v50 = 65;
      }
      if (a3 <= 10) {
        unsigned __int8 v51 = a3 + 48;
      }
      else {
        unsigned __int8 v51 = 58;
      }
      char v52 = (unsigned __int8 *)v65 + 1;
      do
      {
        unsigned int v53 = *v52;
        if (v53 < 0x30 || v53 >= v51)
        {
          if (v53 < 0x41 || v53 >= v50)
          {
            unsigned int v16 = 0;
            char v17 = 1;
            if (v53 < 0x61 || v53 >= v49) {
              goto LABEL_144;
            }
            char v54 = -87;
          }
          else
          {
            char v54 = -55;
          }
        }
        else
        {
          char v54 = -48;
        }
        unint64_t v55 = v22 * (unint64_t)a3;
        if ((v55 & 0xFFFFFFFF00000000) != 0) {
          goto LABEL_143;
        }
        unsigned __int8 v56 = v53 + v54;
        unsigned int v22 = v55 + v56;
        if (__CFADD__(v55, v56)) {
          goto LABEL_143;
        }
        ++v52;
        --v48;
      }
      while (v48);
LABEL_142:
      char v17 = 0;
      unsigned int v16 = v22;
      goto LABEL_144;
    }
    goto LABEL_143;
  }
LABEL_151:
  __break(1u);
  return result;
}

uint64_t sub_1001564E0()
{
  sub_100028504();
  String.init<A>(_:)();
  sub_100024518();
  sub_100156550();
  unint64_t v1 = v0;
  swift_bridgeObjectRelease();
  return v1 | ((HIDWORD(v1) & 1) << 32);
}

void sub_100156550()
{
  sub_100157058();
  sub_100028DCC();
  if ((v2 & 0x1000000000000000) == 0)
  {
    if ((v2 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    sub_10002B36C();
    goto LABEL_7;
  }
  sub_100019C74();
  sub_100023F50();
  sub_10015712C();
  if ((v2 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v1 & 0x1000000000000000) != 0) {
    sub_100028B70();
  }
  else {
    sub_10001AB88();
  }
LABEL_7:
  sub_10002E7DC();
  v0();
  sub_1000293FC();
}

unsigned __int8 *sub_1001565D0(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  int v3 = *result;
  if (v3 == 43)
  {
    if (a2 >= 1)
    {
      uint64_t v16 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v17 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v18 = a3 + 55;
        }
        else
        {
          unsigned __int8 v17 = 97;
          unsigned __int8 v18 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v19 = a3 + 48;
        }
        else {
          unsigned __int8 v19 = 58;
        }
        if (result)
        {
          unsigned int v8 = 0;
          uint64_t v20 = result + 1;
          do
          {
            unsigned int v21 = *v20;
            if (v21 < 0x30 || v21 >= v19)
            {
              if (v21 < 0x41 || v21 >= v18)
              {
                unsigned int v12 = 0;
                unsigned __int8 v13 = 1;
                if (v21 < 0x61 || v21 >= v17) {
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                }
                char v22 = -87;
              }
              else
              {
                char v22 = -55;
              }
            }
            else
            {
              char v22 = -48;
            }
            unint64_t v23 = v8 * (unint64_t)a3;
            if ((v23 & 0xFFFFFFFF00000000) != 0) {
              goto LABEL_72;
            }
            unsigned __int8 v24 = v21 + v22;
            unsigned int v8 = v23 + v24;
            if (__CFADD__(v23, v24)) {
              goto LABEL_72;
            }
            ++v20;
            --v16;
          }
          while (v16);
LABEL_48:
          unsigned __int8 v13 = 0;
          unsigned int v12 = v8;
          return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
        }
        goto LABEL_71;
      }
LABEL_72:
      unsigned int v12 = 0;
      unsigned __int8 v13 = 1;
      return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
    }
  }
  else
  {
    if (v3 != 45)
    {
      if (a2)
      {
        unsigned __int8 v25 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v26 = a3 + 55;
        }
        else
        {
          unsigned __int8 v25 = 97;
          unsigned __int8 v26 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v27 = a3 + 48;
        }
        else {
          unsigned __int8 v27 = 58;
        }
        if (result)
        {
          unsigned int v28 = 0;
          do
          {
            unsigned int v29 = *result;
            if (v29 < 0x30 || v29 >= v27)
            {
              if (v29 < 0x41 || v29 >= v26)
              {
                unsigned int v12 = 0;
                unsigned __int8 v13 = 1;
                if (v29 < 0x61 || v29 >= v25) {
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                }
                char v30 = -87;
              }
              else
              {
                char v30 = -55;
              }
            }
            else
            {
              char v30 = -48;
            }
            unint64_t v31 = v28 * (unint64_t)a3;
            if ((v31 & 0xFFFFFFFF00000000) != 0) {
              goto LABEL_72;
            }
            unsigned __int8 v32 = v29 + v30;
            unsigned int v28 = v31 + v32;
            if (__CFADD__(v31, v32)) {
              goto LABEL_72;
            }
            ++result;
            --a2;
          }
          while (a2);
          unsigned __int8 v13 = 0;
          unsigned int v12 = v28;
          return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
        }
        goto LABEL_71;
      }
      goto LABEL_72;
    }
    if (a2 >= 1)
    {
      uint64_t v4 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v5 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v6 = a3 + 55;
        }
        else
        {
          unsigned __int8 v5 = 97;
          unsigned __int8 v6 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v7 = a3 + 48;
        }
        else {
          unsigned __int8 v7 = 58;
        }
        if (result)
        {
          unsigned int v8 = 0;
          unsigned __int8 v9 = result + 1;
          while (1)
          {
            unsigned int v10 = *v9;
            if (v10 < 0x30 || v10 >= v7)
            {
              if (v10 < 0x41 || v10 >= v6)
              {
                unsigned int v12 = 0;
                unsigned __int8 v13 = 1;
                if (v10 < 0x61 || v10 >= v5) {
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                }
                char v11 = -87;
              }
              else
              {
                char v11 = -55;
              }
            }
            else
            {
              char v11 = -48;
            }
            unint64_t v14 = v8 * (unint64_t)a3;
            if ((v14 & 0xFFFFFFFF00000000) != 0) {
              goto LABEL_72;
            }
            unsigned __int8 v15 = v10 + v11;
            unsigned int v8 = v14 - v15;
            if (v14 < v15) {
              goto LABEL_72;
            }
            ++v9;
            if (!--v4) {
              goto LABEL_48;
            }
          }
        }
LABEL_71:
        unsigned int v12 = 0;
        unsigned __int8 v13 = 0;
        return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
      }
      goto LABEL_72;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

void sub_100156850(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if ((a2 & 0x1000000000000000) != 0)
  {
LABEL_130:
    sub_100029708();
    return;
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((a1 & 0x1000000000000000) != 0)
    {
      uint64_t v4 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      uint64_t v5 = a1 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      uint64_t v4 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
    }
    int v6 = *v4;
    if (v6 == 43)
    {
      if (v5 >= 1)
      {
        if (v5 != 1)
        {
          sub_100026ED8();
          if (v23)
          {
            sub_1001570C0();
            while (1)
            {
              sub_1001570A8();
              if (v12 && v27 < v25)
              {
                char v28 = -48;
              }
              else if (v27 < 0x41 || v27 >= v24)
              {
                sub_10002B088();
                if (!v12 || v27 >= v29) {
                  goto LABEL_130;
                }
                char v28 = -87;
              }
              else
              {
                char v28 = -55;
              }
              if (is_mul_ok(v26, a3) && !__CFADD__(v26 * a3, (v27 + v28)))
              {
                sub_1001570B4();
                if (!v30) {
                  continue;
                }
              }
              goto LABEL_130;
            }
          }
        }
        goto LABEL_130;
      }
      goto LABEL_135;
    }
    if (v6 != 45)
    {
      if (v5)
      {
        sub_100029820();
        if (v31 ^ v32 | v30) {
          unsigned __int8 v36 = v38;
        }
        if (v31 ^ v32 | v30) {
          unsigned __int8 v37 = 65;
        }
        unsigned __int8 v39 = v31 ^ v32 | v30 ? v35 : 58;
        if (v34)
        {
          unint64_t v40 = 0;
          while (1)
          {
            unsigned int v41 = *v34;
            if (v41 < 0x30 || v41 >= v39)
            {
              if (v41 < 0x41 || v41 >= v37)
              {
                if (v41 < 0x61 || v41 >= v36) {
                  goto LABEL_130;
                }
                char v42 = -87;
              }
              else
              {
                char v42 = -55;
              }
            }
            else
            {
              char v42 = -48;
            }
            if (is_mul_ok(v40, a3))
            {
              unint64_t v43 = v40 * a3;
              unsigned __int8 v44 = v41 + v42;
              BOOL v12 = __CFADD__(v43, v44);
              unint64_t v40 = v43 + v44;
              if (!v12)
              {
                ++v34;
                if (--v33) {
                  continue;
                }
              }
            }
            goto LABEL_130;
          }
        }
      }
      goto LABEL_130;
    }
    if (v5 >= 1)
    {
      if (v5 != 1)
      {
        sub_100026ED8();
        if (v7)
        {
          sub_1001570C0();
          while (1)
          {
            sub_1001570A8();
            if (v12 && v11 < v9)
            {
              char v13 = -48;
            }
            else if (v11 < 0x41 || v11 >= v8)
            {
              sub_10002B088();
              if (!v12 || v11 >= v14) {
                goto LABEL_130;
              }
              char v13 = -87;
            }
            else
            {
              char v13 = -55;
            }
            if (is_mul_ok(v10, a3) && v10 * a3 >= (v11 + v13))
            {
              sub_1001570B4();
              if (!v30) {
                continue;
              }
            }
            goto LABEL_130;
          }
        }
      }
      goto LABEL_130;
    }
    __break(1u);
LABEL_134:
    __break(1u);
LABEL_135:
    __break(1u);
    goto LABEL_136;
  }
  sub_100028358();
  if (!v30)
  {
    if (v15 != 45)
    {
      if (v16)
      {
        sub_100026ED8();
        while (1)
        {
          sub_10002EB18();
          if (v12 && v54 < v53)
          {
            char v55 = -48;
          }
          else if (v54 < 0x41 || v54 >= v52)
          {
            sub_10001DED0();
            if (!v12 || v54 >= v56) {
              goto LABEL_130;
            }
            char v55 = -87;
          }
          else
          {
            char v55 = -55;
          }
          if (is_mul_ok(v51, a3) && !__CFADD__(v51 * a3, (v54 + v55)))
          {
            sub_100029954();
            if (!v30) {
              continue;
            }
          }
          goto LABEL_130;
        }
      }
      goto LABEL_130;
    }
    if (v16)
    {
      if (v16 != 1)
      {
        sub_100026ED8();
        sub_10015714C();
        while (1)
        {
          sub_10002EB18();
          if (v12 && v20 < v19)
          {
            char v21 = -48;
          }
          else if (v20 < 0x41 || v20 >= v18)
          {
            sub_10001DED0();
            if (!v12 || v20 >= v22) {
              goto LABEL_130;
            }
            char v21 = -87;
          }
          else
          {
            char v21 = -55;
          }
          if (is_mul_ok(v17, a3) && v17 * a3 >= (v20 + v21))
          {
            sub_100029954();
            if (!v30) {
              continue;
            }
          }
          goto LABEL_130;
        }
      }
      goto LABEL_130;
    }
    goto LABEL_134;
  }
  if (v16)
  {
    if (v16 != 1)
    {
      sub_100026ED8();
      sub_10015714C();
      while (1)
      {
        sub_10002EB18();
        if (v12 && v48 < v47)
        {
          char v49 = -48;
        }
        else if (v48 < 0x41 || v48 >= v46)
        {
          sub_10001DED0();
          if (!v12 || v48 >= v50) {
            goto LABEL_130;
          }
          char v49 = -87;
        }
        else
        {
          char v49 = -55;
        }
        if (is_mul_ok(v45, a3) && !__CFADD__(v45 * a3, (v48 + v49)))
        {
          sub_100029954();
          if (!v30) {
            continue;
          }
        }
        goto LABEL_130;
      }
    }
    goto LABEL_130;
  }
LABEL_136:
  __break(1u);
}

uint64_t sub_100156CE0()
{
  sub_100028504();
  String.init<A>(_:)();
  sub_100024518();
  sub_100152FBC();
  uint64_t v1 = v0;
  swift_bridgeObjectRelease();
  return v1;
}

unsigned __int8 *sub_100156D50(unsigned __int8 *result, uint64_t a2)
{
  int v2 = *result;
  if (v2 == 43)
  {
    if (a2 >= 1)
    {
      if (a2 != 1)
      {
        sub_1000252FC();
        if (v22 ^ v23 | v21) {
          unsigned __int8 v27 = v30;
        }
        if (v22 ^ v23 | v21) {
          unsigned __int8 v28 = 65;
        }
        if (!(v22 ^ v23 | v21)) {
          unsigned __int8 v29 = 58;
        }
        if (v24)
        {
          unint64_t v13 = 0;
          char v31 = (unsigned __int8 *)(v24 + 1);
          do
          {
            unsigned int v32 = *v31;
            if (v32 < 0x30 || v32 >= v29)
            {
              if (v32 < 0x41 || v32 >= v28)
              {
                uint64_t v17 = 0;
                if (v32 < 0x61 || v32 >= v27) {
                  return (unsigned __int8 *)v17;
                }
                char v33 = -87;
              }
              else
              {
                char v33 = -55;
              }
            }
            else
            {
              char v33 = -48;
            }
            if (!is_mul_ok(v13, v25)) {
              return 0;
            }
            unint64_t v34 = v13 * v25;
            unsigned __int8 v35 = v32 + v33;
            BOOL v20 = __CFADD__(v34, v35);
            unint64_t v13 = v34 + v35;
            if (v20) {
              return 0;
            }
            ++v31;
            --v26;
          }
          while (v26);
          return (unsigned __int8 *)v13;
        }
        return 0;
      }
      return 0;
    }
  }
  else
  {
    if (v2 != 45)
    {
      if (a2)
      {
        sub_1000252FC();
        if (v37 ^ v38 | v36) {
          unsigned __int8 v42 = v45;
        }
        if (v37 ^ v38 | v36) {
          unsigned __int8 v43 = 65;
        }
        if (!(v37 ^ v38 | v36)) {
          unsigned __int8 v44 = 58;
        }
        if (v39)
        {
          unint64_t v46 = 0;
          do
          {
            unsigned int v47 = *v39;
            if (v47 < 0x30 || v47 >= v44)
            {
              if (v47 < 0x41 || v47 >= v43)
              {
                uint64_t v17 = 0;
                if (v47 < 0x61 || v47 >= v42) {
                  return (unsigned __int8 *)v17;
                }
                char v48 = -87;
              }
              else
              {
                char v48 = -55;
              }
            }
            else
            {
              char v48 = -48;
            }
            if (!is_mul_ok(v46, v40)) {
              return 0;
            }
            unint64_t v49 = v46 * v40;
            unsigned __int8 v50 = v47 + v48;
            BOOL v20 = __CFADD__(v49, v50);
            unint64_t v46 = v49 + v50;
            if (v20) {
              return 0;
            }
            ++v39;
            --v41;
          }
          while (v41);
          return (unsigned __int8 *)v46;
        }
        return 0;
      }
      return 0;
    }
    if (a2 >= 1)
    {
      if (a2 != 1)
      {
        sub_1000252FC();
        if (v4 ^ v5 | v3) {
          unsigned __int8 v9 = v12;
        }
        if (v4 ^ v5 | v3) {
          unsigned __int8 v10 = 65;
        }
        if (!(v4 ^ v5 | v3)) {
          unsigned __int8 v11 = 58;
        }
        if (v6)
        {
          unint64_t v13 = 0;
          for (unint64_t i = (unsigned __int8 *)(v6 + 1); ; ++i)
          {
            unsigned int v15 = *i;
            if (v15 < 0x30 || v15 >= v11)
            {
              if (v15 < 0x41 || v15 >= v10)
              {
                uint64_t v17 = 0;
                if (v15 < 0x61 || v15 >= v9) {
                  return (unsigned __int8 *)v17;
                }
                char v16 = -87;
              }
              else
              {
                char v16 = -55;
              }
            }
            else
            {
              char v16 = -48;
            }
            if (!is_mul_ok(v13, v7)) {
              return 0;
            }
            unint64_t v18 = v13 * v7;
            unsigned __int8 v19 = v15 + v16;
            BOOL v20 = v18 >= v19;
            unint64_t v13 = v18 - v19;
            if (!v20) {
              return 0;
            }
            if (!--v8) {
              return (unsigned __int8 *)v13;
            }
          }
        }
        return 0;
      }
      return 0;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100156FB4(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1000371D4(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100157018(uint64_t a1, uint64_t a2)
{
  return sub_100152A04(a1, a2);
}

uint64_t sub_100157030(uint64_t a1, uint64_t a2)
{
  return sub_100152A50(a1, a2);
}

uint64_t sub_100157070()
{
  return dispatch thunk of static Comparable.< infix(_:_:)();
}

void sub_100157094(uint64_t a1, void *a2)
{
  *a2 = v2;
  a2[1] = 0xD000000000000012;
}

uint64_t sub_1001570CC()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t sub_1001570EC()
{
  return dispatch thunk of BinaryInteger.bitWidth.getter(v0, v1);
}

uint64_t sub_10015710C()
{
  return dispatch thunk of static FixedWidthInteger.min.getter();
}

void sub_10015712C()
{
  *uint64_t v1 = v0;
  v1[1] = v2;
}

uint64_t sub_100157138()
{
  return v0;
}

uint64_t sub_100157194()
{
  return v0;
}

uint64_t sub_1001571A8@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess();
  uint64_t v4 = *(void *)(v3 + 32);
  *a2 = *(void *)(v3 + 24);
  a2[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1001571F4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v4 = *a2;
  swift_beginAccess();
  *(void *)(v4 + 24) = v3;
  *(void *)(v4 + 32) = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t SQLiteBaseFunction.name.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SQLiteBaseFunction.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  SQLiteBaseFunction.init()();
  return v0;
}

uint64_t SQLiteBaseFunction.init()()
{
  swift_weakInit();
  *(void *)(v0 + 24) = 0;
  *(void *)(v0 + 32) = 0;
  return v0;
}

uint64_t SQLiteBaseFunction.hookPerform(_:)(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t SQLiteBaseFunction.register(_:database:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(sqlite3 **)(a3 + 16);
  if (v4)
  {
    uint64_t v6 = result;
    swift_beginAccess();
    v3[3] = v6;
    v3[4] = a2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    sub_100017E10();
    int v8 = (*(uint64_t (**)(void))(v7 + 152))();
    sub_100017E10();
    int v10 = (*(uint64_t (**)(void))(v9 + 160))();
    unsigned __int8 v11 = (const char *)(String.utf8CString.getter() + 32);
    swift_retain();
    function_uint64_t v2 = sqlite3_create_function_v2(v4, v11, v8, v10, v3, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))sub_1001576C8, 0, 0, (void (__cdecl *)(void *))sub_1001577D8);
    uint64_t result = swift_release();
    if (function_v2)
    {
      _StringGuts.grow(_:)(31);
      swift_bridgeObjectRelease();
      v13._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v13);
      swift_bridgeObjectRelease();
      v14._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
      v14._unint64_t object = (void *)0x80000001001B9940;
      SQLiteDatabase.logAndReturnSQLErrorMessage(_:)(v14);
      swift_bridgeObjectRelease();
      sub_100122878();
      uint64_t v15 = swift_allocError();
      return sub_100026EEC(v15, v16);
    }
  }
  return result;
}

void sub_10015750C(sqlite3_context *a1)
{
  if (a1)
  {
    if (sqlite3_user_data(a1))
    {
      uint64_t v2 = swift_retain();
      double v3 = __chkstk_darwin(v2);
      (*(void (**)(uint64_t (*)(), double))(*(void *)v4 + 176))(sub_100157EF8, v3);
      swift_release();
    }
    else
    {
      sqlite3_result_error(a1, "Cannot bind to function instance.", -1);
    }
  }
}

uint64_t sub_100157644(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t result = Array<A>.init(_:argc:)(a3, a4);
  if (!v4)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 168))(a2, result);
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_1001576CC(uint64_t a1)
{
  if (a1)
  {
    swift_release();
  }
  else
  {
    if (qword_100223328 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    sub_10002A10C(v1, (uint64_t)qword_100236D18);
    osos_log_t log = Logger.logObject.getter();
    os_log_type_t v2 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(oslog, v2))
    {
      double v3 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)double v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v2, "Missing function object", v3, 2u);
      swift_slowDealloc();
    }
  }
}

uint64_t SQLiteBaseFunction.unregister(database:)(uint64_t result)
{
  os_log_type_t v2 = *(sqlite3 **)(result + 16);
  if (v2)
  {
    sub_10002A7E0();
    uint64_t result = swift_beginAccess();
    if (*(void *)(v1 + 32))
    {
      sub_100017E10();
      uint64_t v4 = *(uint64_t (**)(uint64_t))(v3 + 152);
      uint64_t v5 = swift_bridgeObjectRetain();
      int v6 = v4(v5);
      sub_100017E10();
      int v8 = (*(uint64_t (**)(void))(v7 + 160))();
      uint64_t v9 = String.utf8CString.getter();
      swift_bridgeObjectRelease();
      int function = sqlite3_create_function(v2, (const char *)(v9 + 32), v6, v8, 0, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))j___sSo29_CPStartNetworkSearchFeedbackC7parsecdE12redactUnusedyyF, 0, 0);
      uint64_t result = swift_release();
      if (function)
      {
        _StringGuts.grow(_:)(34);
        swift_bridgeObjectRelease();
        v11._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v11);
        swift_bridgeObjectRelease();
        v12._uint64_t countAndFlagsBits = 0xD000000000000020;
        v12._unint64_t object = (void *)0x80000001001B9960;
        SQLiteDatabase.logAndReturnSQLErrorMessage(_:)(v12);
        swift_bridgeObjectRelease();
        sub_100122878();
        uint64_t v13 = swift_allocError();
        return sub_100026EEC(v13, v14);
      }
    }
  }
  return result;
}

uint64_t SQLiteBaseFunction.deinit()
{
  uint64_t v1 = v0;
  sub_10002A7E0();
  swift_beginAccess();
  unint64_t v2 = *(void *)(v0 + 32);
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + 24);
    uint64_t v4 = qword_100223328;
    swift_bridgeObjectRetain();
    if (v4 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_10002A10C(v5, (uint64_t)qword_100236D18);
    swift_bridgeObjectRetain();
    int v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v6, v7))
    {

      swift_bridgeObjectRelease_n();
      goto LABEL_13;
    }
    int v8 = (uint8_t *)swift_slowAlloc();
    v13[0] = swift_slowAlloc();
    *(_DWORD *)int v8 = 136315138;
    swift_bridgeObjectRetain();
    sub_10001C274(v3, v2, v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Destroying %s function", v8, 0xCu);
    swift_arrayDestroy();
    sub_100017D40();
  }
  else
  {
    if (qword_100223328 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_10002A10C(v9, (uint64_t)qword_100236D18);
    int v6 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v6, v10)) {
      goto LABEL_11;
    }
    Swift::String v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)Swift::String v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v10, "Destroying unregistered function", v11, 2u);
  }
  sub_100017D40();
LABEL_11:

LABEL_13:
  swift_weakDestroy();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t SQLiteBaseFunction.__deallocating_deinit()
{
  SQLiteBaseFunction.deinit();

  return _swift_deallocClassInstance(v0, 40, 7);
}

Swift::Void __swiftcall SQLiteBaseFunction.receivedParameter(_:index:)(Swift::OpaquePointer _, Swift::Int index)
{
  uint64_t v3 = v2;
  if (qword_100223328 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_10002A10C(v4, (uint64_t)qword_100236D18);
  swift_retain_n();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315650;
    swift_beginAccess();
    if (*(void *)(v3 + 32))
    {
      uint64_t v8 = *(void *)(v3 + 24);
      unint64_t v9 = *(void *)(v3 + 32);
    }
    else
    {
      unint64_t v9 = 0xE90000000000003ELL;
      uint64_t v8 = 0x6E776F6E6B6E753CLL;
    }
    swift_bridgeObjectRetain();
    sub_10001C274(v8, v9, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2048;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v7 + 22) = 2080;
    uint64_t v10 = String.init<A>(describing:)();
    sub_10001C274(v10, v11, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Function %s received %ld parameter: %s", (uint8_t *)v7, 0x20u);
    swift_arrayDestroy();
    sub_100017D40();
    sub_100017D40();
  }
  else
  {

    swift_release_n();
  }
}

uint64_t sub_100157E94()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t type metadata accessor for SQLiteBaseFunction()
{
  return self;
}

uint64_t sub_100157EF8()
{
  return sub_100157644(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(_DWORD *)(v0 + 40));
}

uint64_t sub_100157F1C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, sqlite3_context *a5)
{
  if (String.count.getter())
  {
    swift_bridgeObjectRetain();
    v7._uint64_t countAndFlagsBits = 8238;
    v7._unint64_t object = (void *)0xE200000000000000;
    String.append(_:)(v7);
  }
  swift_errorRetain();
  sub_10002572C(&qword_10021B3C0);
  v8._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v9._uint64_t countAndFlagsBits = 0x203A726F727245;
  v9._unint64_t object = (void *)0xE700000000000000;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = String.utf8CString.getter();
  swift_bridgeObjectRelease();
  sqlite3_result_error(a5, (const char *)(v10 + 32), a4);
  return swift_release();
}

uint64_t SQLiteDatabase.unsafeConnection()()
{
  return *(void *)(v0 + 16);
}

uint64_t sub_100158060()
{
  uint64_t result = sqlite3_threadsafe();
  if (result != 2)
  {
    sub_100122878();
    sub_100024A30();
    *(void *)(v1 + 8) = 0;
    *(void *)(v1 + 16) = 0;
    *(void *)uint64_t v1 = 1;
    *(unsigned char *)(v1 + 24) = 4;
    return swift_willThrow();
  }
  return result;
}

uint8_t *static SQLiteDatabase.openInMemoryConnection()()
{
  sub_100158060();
  if (!v0)
  {
    ppDb = 0;
    uint64_t v2 = (uint8_t *)sqlite3_open(":memory:", &ppDb);
    if (v2)
    {
      uint64_t v1 = v2;
      if (qword_100223328 != -1) {
        swift_once();
      }
      uint64_t v3 = type metadata accessor for Logger();
      sub_10002A10C(v3, (uint64_t)qword_100236D18);
      uint64_t v4 = Logger.logObject.getter();
      os_log_type_t v5 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v4, v5))
      {
        os_log_type_t v6 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)os_log_type_t v6 = 67109120;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v4, v5, "Error %d occurred while opening in-memory db connection", v6, 8u);
        sub_100017D40();
      }

      sub_100122878();
      sub_100024A30();
      *Swift::String v7 = v1;
      v7[1] = 0xD000000000000026;
      sub_10000E234((uint64_t)v7, (uint64_t)"Failed to open in-memory db connection");
LABEL_8:
      swift_willThrow();
      return v1;
    }
    uint64_t v1 = (uint8_t *)ppDb;
    if (!ppDb)
    {
      if (qword_100223328 != -1) {
        swift_once();
      }
      uint64_t v14 = type metadata accessor for Logger();
      sub_10002A10C(v14, (uint64_t)qword_100236D18);
      uint64_t v15 = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v15, v16))
      {
        uint64_t v1 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v1 = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, v16, "Failed to open in-memory db connection", v1, 2u);
        sub_100017D40();
      }

      sub_100122878();
      sub_100024A30();
      sub_10002C6DC(v17, 0xD000000000000026);
      goto LABEL_8;
    }
    if (qword_100223328 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_10002A10C(v9, (uint64_t)qword_100236D18);
    uint64_t v10 = (void *)Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.debug.getter();
    if (sub_100019BAC(v11))
    {
      *(_WORD *)swift_slowAlloc() = 0;
      sub_100016620((void *)&_mh_execute_header, v12, v13, "In-memory db connection opened");
      sub_100017D40();
    }
  }
  return v1;
}

uint8_t *static SQLiteDatabase.openConnection(_:readOnly:requiresAuthentication:)(uint64_t a1, char a2, char a3)
{
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  os_log_type_t v11 = (uint8_t *)v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (char *)v53 - v13;
  __chkstk_darwin(v12);
  os_log_type_t v16 = (char *)v53 - v15;
  sub_100158060();
  if (!v3)
  {
    uint64_t v55 = v7;
    if (a3) {
      int v17 = 3145728;
    }
    else {
      int v17 = 0;
    }
    if (a2) {
      int v18 = 65537;
    }
    else {
      int v18 = 65542;
    }
    int v19 = v18 | v17;
    ppDb = 0;
    URL.path.getter();
    uint64_t v20 = String.utf8CString.getter();
    swift_bridgeObjectRelease();
    unsigned int v21 = sqlite3_open_v2((const char *)(v20 + 32), &ppDb, v19, 0);
    swift_release();
    if (v21)
    {
      if (qword_100223328 != -1) {
        swift_once();
      }
      uint64_t v22 = type metadata accessor for Logger();
      sub_10002A10C(v22, (uint64_t)qword_100236D18);
      (*(void (**)(uint8_t *, uint64_t, uint64_t))(v8 + 16))(v11, a1, v55);
      char v23 = Logger.logObject.getter();
      os_log_type_t v24 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v23, v24))
      {
        uint64_t v25 = swift_slowAlloc();
        uint64_t v54 = sub_10001AB54();
        uint64_t v57 = v54;
        *(_DWORD *)uint64_t v25 = 67109378;
        LODWORD(v56) = v21;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v25 + 8) = 2080;
        uint64_t v26 = URL.path.getter();
        uint64_t v28 = sub_10001C274(v26, v27, &v57);
        sub_100024530(v28);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v29 = sub_10001DEE0();
        v30(v29);
        _os_log_impl((void *)&_mh_execute_header, v23, v24, "Error %d occurred while opening db connection: %s", (uint8_t *)v25, 0x12u);
        sub_100024D8C();
        sub_100017D40();
        sub_100017D40();
      }
      else
      {
        uint64_t v38 = sub_10001DEE0();
        v39(v38);
      }

      if (ppDb) {
        sub_100158A34(ppDb);
      }
      sub_100122878();
      sub_100024A30();
      *unint64_t v40 = v21;
      v40[1] = 0xD00000000000001CLL;
      sub_10000E234((uint64_t)v40, (uint64_t)"Failed to open db connection");
LABEL_22:
      swift_willThrow();
      return v11;
    }
    os_log_type_t v11 = (uint8_t *)ppDb;
    if (!ppDb)
    {
      if (qword_100223328 != -1) {
        swift_once();
      }
      uint64_t v42 = type metadata accessor for Logger();
      sub_10002A10C(v42, (uint64_t)qword_100236D18);
      (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v14, a1, v55);
      unsigned __int8 v43 = Logger.logObject.getter();
      os_log_type_t v44 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v43, v44))
      {
        os_log_type_t v11 = (uint8_t *)sub_100017D90();
        uint64_t v54 = sub_10001AB54();
        uint64_t v57 = v54;
        *(_DWORD *)os_log_type_t v11 = 136315138;
        uint64_t v45 = URL.path.getter();
        uint64_t v47 = sub_10001C274(v45, v46, &v57);
        sub_100024530(v47);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v48 = sub_10002620C();
        v49(v48);
        _os_log_impl((void *)&_mh_execute_header, v43, v44, "Failed to open db connection with no error: %s", v11, 0xCu);
        sub_100024D8C();
        sub_100017D40();
        sub_100017D40();
      }
      else
      {
        uint64_t v50 = sub_10002620C();
        v51(v50);
      }

      sub_100122878();
      sub_100024A30();
      sub_10002C6DC(v52, 0xD00000000000002ALL);
      goto LABEL_22;
    }
    if (qword_100223328 != -1) {
      swift_once();
    }
    uint64_t v31 = type metadata accessor for Logger();
    sub_10002A10C(v31, (uint64_t)qword_100236D18);
    uint64_t v32 = v55;
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v16, a1, v55);
    char v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v33, v34))
    {
      unsigned __int8 v35 = (uint8_t *)sub_100017D90();
      uint64_t v54 = sub_10001AB54();
      uint64_t v57 = v54;
      *(_DWORD *)unsigned __int8 v35 = 136315138;
      v53[1] = v35 + 4;
      uint64_t v36 = URL.path.getter();
      uint64_t v56 = sub_10001C274(v36, v37, &v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v16, v55);
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "DB connection opened %s", v35, 0xCu);
      sub_100024D8C();
      sub_100017D40();
      sub_100017D40();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v8 + 8))(v16, v32);
    }
  }
  return v11;
}

void sub_100158A34(sqlite3 *a1)
{
  if (sqlite3_close_v2(a1))
  {
    if (qword_100223328 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    sub_10002A10C(v1, (uint64_t)qword_100236D18);
    osos_log_t log = Logger.logObject.getter();
    os_log_type_t v2 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v2))
    {
      uint64_t v3 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v3 = 67240192;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, oslog, v2, "Close db connection failed with code %{public}d", v3, 8u);
      swift_slowDealloc();
    }
    else
    {
    }
  }
}

uint64_t SQLiteDatabase.__allocating_init()()
{
  uint64_t v0 = sub_100027FA0();
  SQLiteDatabase.init()();
  return v0;
}

uint64_t SQLiteDatabase.init()()
{
  uint64_t v2 = v0;
  *(void *)(v0 + 16) = 0;
  uint64_t v3 = static SQLiteDatabase.openInMemoryConnection()();
  if (v1)
  {
    swift_release();
  }
  else
  {
    *(void *)(v0 + 16) = v3;
    SQLiteDatabase.registerMathFunctions()((uint64_t)v3, v4, v5, v6, v7);
    swift_release();
    if (qword_100223328 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_10002A10C(v8, (uint64_t)qword_100236D18);
    uint64_t v9 = (void *)Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.debug.getter();
    if (sub_100019BAC(v10))
    {
      *(_WORD *)swift_slowAlloc() = 0;
      sub_100016620((void *)&_mh_execute_header, v11, v12, "In-memory db connection opened");
      sub_100017D40();
    }
  }
  return v2;
}

uint64_t SQLiteDatabase.__allocating_init(_:readOnly:requiresAuthentication:)(uint64_t a1, char a2, char a3)
{
  uint64_t v6 = sub_100027FA0();
  SQLiteDatabase.init(_:readOnly:requiresAuthentication:)(a1, a2, a3);
  return v6;
}

uint64_t SQLiteDatabase.init(_:readOnly:requiresAuthentication:)(uint64_t a1, char a2, char a3)
{
  *(void *)(v3 + 16) = 0;
  uint64_t v6 = static SQLiteDatabase.openConnection(_:readOnly:requiresAuthentication:)(a1, a2, a3);
  if (!v4)
  {
    *(void *)(v3 + 16) = v6;
    SQLiteDatabase.registerMathFunctions()((uint64_t)v6, v7, v8, v9, v10);
  }
  swift_release();
  type metadata accessor for URL();
  sub_10000E060();
  (*(void (**)(uint64_t))(v11 + 8))(a1);
  return v3;
}

uint64_t SQLiteDatabase.__allocating_init(connection:)(uint64_t a1)
{
  uint64_t v2 = sub_100027FA0();
  SQLiteDatabase.init(connection:)(a1);
  return v2;
}

uint64_t SQLiteDatabase.init(connection:)(uint64_t a1)
{
  uint64_t v3 = v1;
  *(void *)(v1 + 16) = 0;
  if (a1)
  {
    *(void *)(v1 + 16) = a1;
  }
  else
  {
    if (qword_100223328 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_10002A10C(v4, (uint64_t)qword_100236D18);
    swift_retain();
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (sub_100019BAC(v6))
    {
      uint64_t v7 = (uint8_t *)sub_100017D90();
      uint64_t v12 = sub_10001AB54();
      *(_DWORD *)uint64_t v7 = 136315138;
      type metadata accessor for SQLiteDatabase();
      swift_retain();
      uint64_t v8 = String.init<A>(describing:)();
      sub_10001C274(v8, v9, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v5, v2, "Can't create %s from a nil connection", v7, 0xCu);
      swift_arrayDestroy();
      sub_100017D40();
      sub_100017D40();
    }
    else
    {

      swift_release_n();
    }
    sub_100122878();
    sub_100024A30();
    sub_10002C6DC(v10, 0xD00000000000002BLL);
    swift_willThrow();
  }
  return v3;
}

uint64_t SQLiteDatabase.deinit()
{
  SQLiteDatabase.close()();
  return v0;
}

uint64_t SQLiteDatabase.__deallocating_deinit()
{
  SQLiteDatabase.close()();

  return _swift_deallocClassInstance(v0, 24, 7);
}

uint64_t SQLiteDatabase.detachConnection()()
{
  uint64_t result = *(void *)(v0 + 16);
  *(void *)(v0 + 16) = 0;
  return result;
}

uint64_t SQLiteDatabase.register(_:withName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a2 + 8))(a3, a4, v4, ObjectType, a2);
}

Swift::Void __swiftcall SQLiteDatabase.close()()
{
  uint64_t v1 = *(sqlite3 **)(v0 + 16);
  if (v1)
  {
    sub_100158A34(v1);
    *(void *)(v0 + 16) = 0;
  }
}

Swift::Bool __swiftcall SQLiteDatabase.isOpen()()
{
  return *(void *)(v0 + 16) != 0;
}

uint64_t SQLiteDatabase.statement(with:verboseLog:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v7 = *(sqlite3 **)(v4 + 16);
  if (v7)
  {
    ppStmt = 0;
    uint64_t v11 = String.utf8CString.getter();
    unsigned int v12 = sqlite3_prepare_v2(v7, (const char *)(v11 + 32), -1, &ppStmt, 0);
    swift_release();
    uint64_t v13 = ppStmt;
    if (ppStmt && !v12)
    {
      type metadata accessor for SQLiteStatement.Context();
      swift_allocObject();
      swift_retain();
      swift_bridgeObjectRetain();
      uint64_t result = Schematizer.init(withSchemaStore:)(v5, (uint64_t)v13);
      *(void *)a4 = result;
      *(void *)(a4 + 8) = a1;
      *(void *)(a4 + 16) = a2;
      *(_OWORD *)(a4 + 24) = xmmword_1001AC4C0;
      *(unsigned char *)(a4 + 40) = a3 & 1;
      return result;
    }
    _StringGuts.grow(_:)(46);
    swift_bridgeObjectRelease();
    v16._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    v17._uint64_t countAndFlagsBits = 8236;
    v17._unint64_t object = (void *)0xE200000000000000;
    String.append(_:)(v17);
    v18._uint64_t countAndFlagsBits = a1;
    v18._unint64_t object = a2;
    String.append(_:)(v18);
    v19._uint64_t countAndFlagsBits = 0xD000000000000028;
    v19._unint64_t object = (void *)0x80000001001B9AD0;
    Swift::String v20 = SQLiteDatabase.logAndReturnSQLErrorMessage(_:)(v19);
    swift_bridgeObjectRelease();
    sub_100122878();
    sub_100024A30();
    *(void *)uint64_t v21 = v12;
    *(Swift::String *)(v21 + 8) = v20;
    *(unsigned char *)(v21 + 24) = 0;
  }
  else
  {
    sub_100122878();
    sub_100024A30();
    *(void *)(v15 + 8) = 0;
    *(void *)(v15 + 16) = 0;
    *(void *)uint64_t v15 = 0;
    *(unsigned char *)(v15 + 24) = 4;
  }
  return swift_willThrow();
}

uint64_t SQLiteDatabase.transaction(_:)(void (*a1)(uint64_t))
{
  uint64_t result = SQLiteDatabase.statement(with:verboseLog:)(0xD000000000000012, (void *)0x80000001001B9B00, 0, (uint64_t)v6);
  if (!v1)
  {
    __chkstk_darwin(result);
    sub_10015D3BC((uint64_t)v6, (void (*)(uint64_t))sub_10015A0F0);
    swift_release();
    long long v9 = *(_OWORD *)&v6[8];
    uint64_t v4 = sub_100057E18((uint64_t)&v9);
    a1(v4);
    uint64_t v5 = SQLiteDatabase.statement(with:verboseLog:)(0x3B54494D4D4F43, (void *)0xE700000000000000, 0, (uint64_t)v7);
    __chkstk_darwin(v5);
    sub_100028DE0();
    sub_10015D3BC((uint64_t)v7, (void (*)(uint64_t))sub_10015A270);
    swift_release();
    long long v8 = *(_OWORD *)&v7[8];
    return sub_100057E18((uint64_t)&v8);
  }
  return result;
}

Swift::String __swiftcall SQLiteDatabase.logAndReturnSQLErrorMessage(_:)(Swift::String a1)
{
  os_log_type_t v2 = *(sqlite3 **)(v1 + 16);
  if (v2)
  {
    Swift::String v19 = a1;
    swift_bridgeObjectRetain();
    if (sqlite3_errmsg(v2))
    {
      uint64_t v3 = String.init(cString:)();
      unint64_t v5 = v4;
      uint64_t v6 = HIBYTE(v4) & 0xF;
      if ((v4 & 0x2000000000000000) == 0) {
        uint64_t v6 = v3 & 0xFFFFFFFFFFFFLL;
      }
      if (!v6)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = 0xD000000000000019;
        unint64_t v5 = 0x80000001001B9B60;
      }
      v18[0] = 8236;
      v18[1] = 0xE200000000000000;
      unint64_t v7 = v5;
      String.append(_:)(*(Swift::String *)&v3);
      swift_bridgeObjectRelease();
      v8._uint64_t countAndFlagsBits = 8236;
      v8._unint64_t object = (void *)0xE200000000000000;
      String.append(_:)(v8);
      swift_bridgeObjectRelease();
    }
    if (qword_100223328 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_10002A10C(v9, (uint64_t)qword_100236D18);
    uint64_t countAndFlagsBits = v19._countAndFlagsBits;
    unint64_t object = v19._object;
    swift_bridgeObjectRetain_n();
    unsigned int v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      v18[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 136315138;
      swift_bridgeObjectRetain();
      sub_10001C274(countAndFlagsBits, (unint64_t)object, v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "%s", v14, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    swift_beginAccess();
    unint64_t v15 = v19._countAndFlagsBits;
    Swift::String v16 = v19._object;
  }
  else
  {
    String.append(_:)(a1);
    unint64_t v15 = 0xD000000000000014;
    Swift::String v16 = (void *)0x80000001001B9B40;
  }
  result._unint64_t object = v16;
  result._uint64_t countAndFlagsBits = v15;
  return result;
}

uint64_t SQLiteDatabase.registerMathFunctions()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = v5;
  if (sub_10001862C(*(sqlite3 **)(v5 + 16), "power", 2, a4, a5, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))sub_100159FAC))
  {
    sub_100026568();
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    v10._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    v11._uint64_t countAndFlagsBits = 0xD000000000000021;
    v11._unint64_t object = (void *)0x80000001001B9B80;
    Swift::String v12 = SQLiteDatabase.logAndReturnSQLErrorMessage(_:)(v11);
    uint64_t countAndFlagsBits = v12._countAndFlagsBits;
    unint64_t object = v12._object;
    swift_bridgeObjectRelease();
    sub_100122878();
    sub_100024A30();
    *(void *)uint64_t v15 = v6;
  }
  else
  {
    if (!sub_10001862C(*(sqlite3 **)(v5 + 16), "exp", 1, v8, v9, (void (__cdecl *)(sqlite3_context *, int, sqlite3_value **))sub_10015A0C8))
    {
      swift_retain();
      return v7;
    }
    sub_100026568();
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    v16._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    v17._uint64_t countAndFlagsBits = 0xD00000000000001FLL;
    v17._unint64_t object = (void *)0x80000001001B9BB0;
    Swift::String v18 = SQLiteDatabase.logAndReturnSQLErrorMessage(_:)(v17);
    uint64_t countAndFlagsBits = v18._countAndFlagsBits;
    unint64_t object = v18._object;
    swift_bridgeObjectRelease();
    sub_100122878();
    sub_100024A30();
    *(void *)uint64_t v15 = 0;
  }
  *(void *)(v15 + 8) = countAndFlagsBits;
  *(void *)(v15 + 16) = object;
  *(unsigned char *)(v15 + 24) = 0;
  swift_willThrow();
  return v7;
}

void sub_100159E3C(sqlite3_context *a1, int a2, uint64_t a3)
{
  if (!a1) {
    return;
  }
  uint64_t v4 = Array<A>.init(_:argc:)(a3, a2);
  uint64_t v5 = v4;
  if (!*(void *)(v4 + 16))
  {
    __break(1u);
    goto LABEL_16;
  }
  unsigned int v6 = *(sqlite3_value **)(v4 + 32);
  if (sqlite3_value_type(v6) != 2 && sqlite3_value_type(v6) != 1) {
    goto LABEL_11;
  }
  if (*(void *)(v5 + 16) < 2uLL)
  {
LABEL_16:
    __break(1u);
    return;
  }
  uint64_t v7 = *(sqlite3_value **)(v5 + 40);
  if (sqlite3_value_type(v7) != 2 && sqlite3_value_type(v7) != 1)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    double v11 = 0.0;
    goto LABEL_12;
  }
  double v8 = sqlite3_value_double(*(sqlite3_value **)(v5 + 32));
  uint64_t v9 = *(sqlite3_value **)(v5 + 40);
  swift_bridgeObjectRelease();
  double v10 = sqlite3_value_double(v9);
  double v11 = pow(v8, v10);
LABEL_12:

  sqlite3_result_double(a1, v11);
}

void sub_100159FB0(sqlite3_context *a1, int a2, uint64_t a3)
{
  if (a1)
  {
    uint64_t v4 = Array<A>.init(_:argc:)(a3, a2);
    uint64_t v5 = v4;
    if (*(void *)(v4 + 16))
    {
      unsigned int v6 = *(sqlite3_value **)(v4 + 32);
      if (sqlite3_value_type(v6) == 2 || sqlite3_value_type(v6) == 1)
      {
        uint64_t v7 = *(sqlite3_value **)(v5 + 32);
        swift_bridgeObjectRelease();
        double v8 = sqlite3_value_double(v7);
        double v9 = exp(v8);
      }
      else
      {
        swift_bridgeObjectRelease();
        double v9 = 0.0;
      }
      sqlite3_result_double(a1, v9);
    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t type metadata accessor for SQLiteDatabase()
{
  return self;
}

uint64_t sub_10015A0F0(uint64_t a1)
{
  return sub_10015CD70(a1, *(void *)(v1 + 16));
}

uint64_t sub_10015A10C()
{
  return swift_bridgeObjectRelease();
}

unint64_t sub_10015A114()
{
  unint64_t result = qword_100223800;
  if (!qword_100223800)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100223800);
  }
  return result;
}

uint64_t destroy for SQLiteDatabase.TransactionError()
{
  return sub_10015A10C();
}

uint64_t _s7SQLiter14SQLiteDatabaseC16TransactionErrorOwCP_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  char v5 = *((unsigned char *)a2 + 16);
  MessageSchemaModel.properties.getter();
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for SQLiteDatabase.TransactionError(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  char v5 = *((unsigned char *)a2 + 16);
  MessageSchemaModel.properties.getter();
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  sub_10015A10C();
  return a1;
}

uint64_t assignWithTake for SQLiteDatabase.TransactionError(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v3;
  sub_10015A10C();
  return a1;
}

ValueMetadata *type metadata accessor for SQLiteDatabase.TransactionError()
{
  return &type metadata for SQLiteDatabase.TransactionError;
}

uint64_t sub_10015A270(uint64_t a1)
{
  return sub_10015A0F0(a1);
}

uint64_t sub_10015A288(void (*a1)(char *, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v44 = a5;
  uint64_t v45 = a8;
  unint64_t v51 = a1;
  uint64_t v52 = a2;
  sub_100026808();
  uint64_t v43 = v9;
  __chkstk_darwin(v10);
  sub_10000E04C();
  uint64_t v53 = v11;
  swift_getAssociatedTypeWitness();
  sub_100026808();
  uint64_t v54 = v12;
  __chkstk_darwin(v13);
  uint64_t v47 = (char *)&v39 - v14;
  __chkstk_darwin(v15);
  sub_10000E04C();
  uint64_t v48 = v16;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_100026808();
  uint64_t v46 = v18;
  __chkstk_darwin(v19);
  uint64_t v42 = (char *)&v39 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  char v23 = (char *)&v39 - v22;
  uint64_t v24 = dispatch thunk of Collection.count.getter();
  if (!v24) {
    return static Array._allocateUninitialized(_:)();
  }
  Swift::Int v25 = v24;
  uint64_t v40 = AssociatedTypeWitness;
  uint64_t v57 = ContiguousArray.init()();
  uint64_t v49 = type metadata accessor for ContiguousArray();
  ContiguousArray.reserveCapacity(_:)(v25);
  uint64_t v41 = v23;
  uint64_t result = dispatch thunk of Collection.startIndex.getter();
  if (v25 < 0)
  {
    __break(1u);
  }
  else
  {
    unint64_t v27 = (void (**)(char *))(v54 + 16);
    uint64_t v50 = v54 + 8;
    uint64_t v54 = a6;
    uint64_t v28 = v47;
    uint64_t v29 = v41;
    while (1)
    {
      unsigned __int8 v30 = (void (*)(char *, void))dispatch thunk of Collection.subscript.read();
      (*v27)(v28);
      v30(v56, 0);
      uint64_t v31 = v55;
      v51(v28, v53);
      if (v31) {
        break;
      }
      uint64_t v55 = 0;
      uint64_t v32 = sub_100025E1C();
      v33(v32);
      ContiguousArray.append(_:)();
      dispatch thunk of Collection.formIndex(after:)();
      if (!--v25)
      {
        uint64_t v34 = v46;
        unsigned __int8 v35 = v42;
        uint64_t v36 = v40;
        (*(void (**)(char *, char *, uint64_t))(v46 + 32))(v42, v29, v40);
        _expectEnd<A>(of:is:)();
        (*(void (**)(char *, uint64_t))(v34 + 8))(v35, v36);
        return v57;
      }
    }
    uint64_t v37 = sub_100025E1C();
    v38(v37);
    (*(void (**)(char *, uint64_t))(v46 + 8))(v29, v40);
    swift_release();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v43 + 32))(v45, v53, v44);
  }
  return result;
}

uint64_t SQLiteStatement.nextRowValue<A>()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = SQLiteStatement.nextRow()();
  if (!v3)
  {
    if (result)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(a2 + 8))(result, a1, a2);
      uint64_t v8 = a3;
      uint64_t v9 = 0;
    }
    else
    {
      uint64_t v8 = a3;
      uint64_t v9 = 1;
    }
    return sub_10002538C(v8, v9, 1, a1);
  }
  return result;
}

uint64_t SQLiteStatement.singleRowIfAny<A>()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_10002C6F8(a1, a2);
  sub_100024DAC();
  swift_bridgeObjectRetain();
  sub_10015D3BC((uint64_t)v6, (void (*)(uint64_t))sub_10015B2EC);
  swift_bridgeObjectRelease();
  if (!v3) {
    return swift_release();
  }
  swift_release();
  type metadata accessor for Optional();
  sub_10000E060();
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(v2);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned char v6[48];

  sub_10002C6F8(a1, a2);
  sub_100024DAC();
  swift_bridgeObjectRetain();
  sub_10015D3BC((uint64_t)v6, (void (*)(uint64_t))sub_10015B30C);
  swift_bridgeObjectRelease();
  if (!v3) {
    return swift_release();
  }
  swift_release();
  type metadata accessor for Optional();
  sub_10000E060();
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(v2);
}

uint64_t sub_10015A7B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v15 = a2;
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v14 - v9;
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a4 + 8);
  uint64_t v12 = swift_retain();
  uint64_t result = v11(v12, a3, a4);
  if (!v4)
  {
    sub_10002538C((uint64_t)v10, 0, 1, a3);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 40))(v15, v10, v7);
  }
  return result;
}

uint64_t sub_10015A9B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v15 = a2;
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v14 - v9;
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a4 + 8);
  uint64_t v12 = swift_retain();
  uint64_t result = v11(v12, a3, a4);
  if (!v4) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 40))(v15, v10, v7);
  }
  return result;
}

uint64_t SQLiteStatement.singleRow<A>()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_10015AB28(a1, a2, (uint64_t (*)(uint64_t, uint64_t, double))SQLiteStatement.singleRowIfAny<A>(), a3);
}

{
  return sub_10015AB28(a1, a2, (uint64_t (*)(uint64_t, uint64_t, double))SQLiteStatement.singleRowIfAny<A>(), a3);
}

uint64_t sub_10015AB28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, double)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v24 = a4;
  uint64_t v8 = type metadata accessor for Optional();
  sub_100026808();
  uint64_t v10 = v9;
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v15 = __chkstk_darwin(v14);
  Swift::String v17 = (char *)&v23 - v16;
  uint64_t result = a3(a1, a2, v15);
  if (!v4)
  {
    uint64_t v19 = v24;
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, v17, v8);
    int v20 = sub_100027BA4((uint64_t)v13, 1, a1);
    uint64_t v21 = *(void (**)(void))(v10 + 8);
    if (v20 == 1)
    {
      sub_100018488();
      v21();
      sub_100122878();
      swift_allocError();
      *(void *)(v22 + 8) = 0;
      *(void *)(v22 + 16) = 0;
      *(void *)uint64_t v22 = 5;
      *(unsigned char *)(v22 + 24) = 4;
      swift_willThrow();
      sub_100018488();
      return ((uint64_t (*)(void))v21)();
    }
    else
    {
      sub_100018488();
      v21();
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(a1 - 8) + 32))(v19, v13, a1);
    }
  }
  return result;
}

uint64_t SQLiteStatement.rows<A>()()
{
  return sub_10015AE24();
}

uint64_t sub_10015AD1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __chkstk_darwin(a1);
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 8);
  swift_retain();
  uint64_t result = v9(a2, a3, a4);
  if (!v4)
  {
    type metadata accessor for Array();
    return Array.append(_:)();
  }
  return result;
}

uint64_t SQLiteStatement.compactRows<A>()()
{
  return sub_10015AE24();
}

uint64_t sub_10015AE24()
{
  static Array._allocateUninitialized(_:)();
  type metadata accessor for Array();
  SQLiteStatement.reduce<A>(into:handleRow:)();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v0) {
    return v2;
  }
  return result;
}

uint64_t sub_10015AEB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v24 = a1;
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v23 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v21 - v7;
  uint64_t v22 = *(void *)(a3 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v21 - v13;
  double v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a4 + 8);
  uint64_t v16 = swift_retain();
  uint64_t v17 = v25;
  uint64_t result = v15(v16, a3, a4);
  if (!v17)
  {
    uint64_t v19 = v22;
    uint64_t v20 = v23;
    if (sub_100027BA4((uint64_t)v8, 1, a3) == 1)
    {
      return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v8, v6);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v14, v8, a3);
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v11, v14, a3);
      type metadata accessor for Array();
      Array.append(_:)();
      return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v14, a3);
    }
  }
  return result;
}

uint64_t Array<A>.init(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = a1;
  uint64_t v8 = (sqlite3_stmt *)sub_10015C798();
  if (v3)
  {
    swift_release();
    return v7;
  }
  uint64_t result = sqlite3_column_count(v8);
  if ((result & 0x80000000) == 0)
  {
    v14[1] = 0;
    v14[2] = result;
    __chkstk_darwin(result);
    void v13[2] = a2;
    v13[3] = a3;
    uint64_t v13[4] = a1;
    uint64_t v10 = sub_10002572C(&qword_100223920);
    uint64_t v11 = sub_10002572C(&qword_10021B3C0);
    unint64_t v12 = sub_10015B388();
    uint64_t v7 = sub_10015A288((void (*)(char *, uint64_t))sub_10015B364, (uint64_t)v13, v10, a2, v11, v12, (uint64_t)&protocol self-conformance witness table for Error, (uint64_t)v14);
    swift_release();
    return v7;
  }
  __break(1u);
  return result;
}

uint64_t sub_10015B230(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v10 = *a1;
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 8);
  swift_retain();
  uint64_t result = v11(a2, v10, a3, a4);
  if (v5) {
    *a5 = v5;
  }
  return result;
}

uint64_t sub_10015B2B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result = Array<A>.init(with:)(a1, *(void *)(a2 + 16), *(void *)(a3 - 8));
  if (!v4) {
    *a4 = result;
  }
  return result;
}

uint64_t sub_10015B2EC(uint64_t a1)
{
  return sub_10015A7B0(a1, v1[4], v1[2], v1[3]);
}

uint64_t sub_10015B30C(uint64_t a1)
{
  return sub_10015A9B0(a1, v1[4], v1[2], v1[3]);
}

uint64_t sub_10015B32C(uint64_t a1, uint64_t a2)
{
  return sub_10015AD1C(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_10015B348(uint64_t a1, uint64_t a2)
{
  return sub_10015AEB8(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_10015B364(uint64_t *a1, void *a2)
{
  return sub_10015B230(a1, v2[4], v2[2], v2[3], a2);
}

unint64_t sub_10015B388()
{
  unint64_t result = qword_100223928;
  if (!qword_100223928)
  {
    sub_1000371D4(&qword_100223920);
    sub_10015B404();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100223928);
  }
  return result;
}

unint64_t sub_10015B404()
{
  unint64_t result = qword_100223930;
  if (!qword_100223930)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100223930);
  }
  return result;
}

uint64_t Array<A>.init(_:argc:)(uint64_t a1, int a2)
{
  if (!a1)
  {
    sub_100122878();
    uint64_t v8 = sub_100024A30();
    sub_100025E38((__n128)xmmword_1001AC590, v8, v9);
    return (uint64_t)v2;
  }
  if ((a2 & 0x80000000) == 0)
  {
    uint64_t v3 = a2;
    if (a2)
    {
      uint64_t v5 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      uint64_t v2 = (void *)v5;
      uint64_t v6 = 0;
      *(void *)(v5 + 16) = v3;
      while (v3 != v6)
      {
        uint64_t v7 = *(void *)(a1 + 8 * v6);
        if (!v7)
        {
          sub_100122878();
          uint64_t v10 = sub_100024A30();
          sub_100025E38((__n128)xmmword_1001AC580, v10, v11);
          v2[2] = 0;
          swift_bridgeObjectRelease();
          return (uint64_t)v2;
        }
        *(void *)(v5 + 8 * v6++ + 32) = v7;
        if (v3 == v6) {
          goto LABEL_11;
        }
      }
      __break(1u);
      goto LABEL_15;
    }
    uint64_t v2 = _swiftEmptyArrayStorage;
LABEL_11:
    v2[2] = v3;
    return (uint64_t)v2;
  }
LABEL_15:
  sub_100020C64();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

BOOL SQLiteArgument.isFloatingPoint.getter(sqlite3_value *a1)
{
  return sqlite3_value_type(a1) == 2 || sqlite3_value_type(a1) == 1;
}

uint64_t SQLiteArgument.init(_:)(uint64_t result)
{
  if (!result)
  {
    sub_100122878();
    uint64_t v1 = sub_100024A30();
    return sub_100025E38((__n128)xmmword_1001AC580, v1, v2);
  }
  return result;
}

BOOL SQLiteArgument.isNull.getter(sqlite3_value *a1)
{
  return sqlite3_value_type(a1) == 5;
}

BOOL SQLiteArgument.isText.getter(sqlite3_value *a1)
{
  return sqlite3_value_type(a1) == 3;
}

BOOL SQLiteArgument.isBlob.getter(sqlite3_value *a1)
{
  return sqlite3_value_type(a1) == 4 || sqlite3_value_type(a1) == 3;
}

BOOL SQLiteArgument.isInteger.getter(sqlite3_value *a1)
{
  return sqlite3_value_type(a1) == 1;
}

Swift::Int __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SQLiteArgument.getInt()()
{
  return sqlite3_value_int64(v0);
}

Swift::UInt64 __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SQLiteArgument.getUInt64()()
{
  return sub_10015B91C(v0);
}

Swift::Int8 __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SQLiteArgument.getInt8()()
{
  int v1 = sqlite3_value_int(v0);
  if (v1 >= -128)
  {
    if (v1 > 127) {
      __break(1u);
    }
  }
  else
  {
    sub_100122878();
    sub_100024A30();
    LOBYTE(v1) = sub_100026F10(v2, 8);
  }
  return v1;
}

Swift::UInt8 __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SQLiteArgument.getUInt8()()
{
  unsigned int v1 = sqlite3_value_int(v0);
  if ((v1 & 0x80000000) != 0) {
    goto LABEL_4;
  }
  if (v1 >= 0x100)
  {
    sub_100020C64();
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_4:
    sub_100122878();
    sub_100024A30();
    LOBYTE(v1) = sub_100026F10(v2, 8);
  }
  return v1;
}

Swift::Int16 __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SQLiteArgument.getInt16()()
{
  int v1 = sqlite3_value_int(v0);
  if (v1 >= -32768)
  {
    if (v1 >= 0x8000) {
      __break(1u);
    }
  }
  else
  {
    sub_100122878();
    sub_100024A30();
    LOWORD(v1) = sub_100026F10(v2, 8);
  }
  return v1;
}

Swift::UInt16 __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SQLiteArgument.getUInt16()()
{
  unsigned int v1 = sqlite3_value_int(v0);
  if ((v1 & 0x80000000) != 0) {
    goto LABEL_4;
  }
  if (HIWORD(v1))
  {
    __break(1u);
LABEL_4:
    sub_100122878();
    sub_100024A30();
    LOWORD(v1) = sub_100026F10(v2, 8);
  }
  return v1;
}

Swift::UInt32 __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SQLiteArgument.getUInt32()()
{
  Swift::UInt32 v1 = sqlite3_value_int(v0);
  if ((v1 & 0x80000000) != 0)
  {
    sub_100122878();
    sub_100024A30();
    sub_100026F10(v2, 8);
  }
  return v1;
}

sqlite3_int64 sub_10015B91C(sqlite3_value *a1)
{
  sqlite3_int64 v1 = sqlite3_value_int64(a1);
  if (v1 < 0)
  {
    sub_100122878();
    sub_100024A30();
    sub_100026F10(v2, 8);
  }
  return v1;
}

Swift::Bool __swiftcall SQLiteArgument.getBool()()
{
  return sqlite3_value_int(v0) != 0;
}

Swift::Float __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SQLiteArgument.getFloat()()
{
  double v1 = sqlite3_value_double(v0);
  if (v1 < 3.40282347e38 || v1 > -3.40282347e38) {
    return v1;
  }
  sub_100122878();
  sub_100024A30();
  sub_100026F10(v2, 8);
  return result;
}

uint64_t SQLiteArgument.withUnsafeBytes<A>(_:)(uint64_t (*a1)(const void *, uint64_t), int a2, sqlite3_value *a3)
{
  uint64_t v5 = sqlite3_value_blob(a3);
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = sqlite3_value_bytes(a3);
    uint64_t v5 = v6;
  }
  else
  {
    uint64_t v7 = 0;
  }
  return a1(v5, v7);
}

uint64_t SQLiteArgument.getData()(sqlite3_value *a1)
{
  if (sqlite3_value_blob(a1))
  {
    sqlite3_value_bytes(a1);
    return Data.init(bytes:count:)();
  }
  else
  {
    sqlite3_value_type(a1);
    return 0;
  }
}

uint64_t SQLiteArgument.getUnsafeData()(sqlite3_value *a1)
{
  uint64_t v2 = type metadata accessor for Data.Deallocator();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (sqlite3_value_blob(a1))
  {
    sqlite3_value_bytes(a1);
    (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for Data.Deallocator.none(_:), v2);
    return Data.init(bytesNoCopy:count:deallocator:)();
  }
  else
  {
    sqlite3_value_type(a1);
    return 0;
  }
}

uint64_t SQLiteArgument.getDataNonNull()(uint64_t a1)
{
  return sub_10015BC58(a1, (uint64_t (*)(void))SQLiteArgument.getData());
}

uint64_t SQLiteArgument.getUnsafeDataNonNull()(uint64_t a1)
{
  return sub_10015BC58(a1, (uint64_t (*)(void))SQLiteArgument.getUnsafeData());
}

uint64_t sub_10015BC58(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v2 = a2();
  if (v3 >> 60 == 15)
  {
    sub_100122878();
    sub_100024A30();
    sub_100026F10(v4, 6);
  }
  return v2;
}

Swift::String_optional __swiftcall SQLiteArgument.getString()()
{
  uint64_t v1 = (uint64_t)sqlite3_value_text(v0);
  if (v1) {
    uint64_t v1 = String.init(cString:)();
  }
  else {
    uint64_t v2 = 0;
  }
  result.value._unint64_t object = v2;
  result.value._uint64_t countAndFlagsBits = v1;
  return result;
}

Swift::String __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SQLiteArgument.getStringNonNull()()
{
  if (sqlite3_value_text(v0))
  {
    uint64_t v1 = String.init(cString:)();
  }
  else
  {
    sub_100122878();
    sub_100024A30();
    uint64_t v1 = sub_100026F10(v3, 6);
  }
  result._unint64_t object = v2;
  result._uint64_t countAndFlagsBits = v1;
  return result;
}

uint64_t SQLiteArgument.getBase64EncodedData()(sqlite3_value *a1)
{
  if (sqlite3_value_type(a1) != 4 && sqlite3_value_type(a1) != 3) {
    return 0;
  }
  if (!sqlite3_value_text(a1)) {
    return 0;
  }
  String.init(cString:)();
  uint64_t v2 = Data.init(base64Encoded:options:)();
  unint64_t v4 = v3;
  swift_bridgeObjectRelease();
  if (v4 >> 60 == 15) {
    return 0;
  }
  return v2;
}

uint64_t getEnumTagSinglePayload for SQLiteArgument(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 == 1 || !*(unsigned char *)(a1 + 8))
    {
      if (*(void *)a1) {
        int v2 = -1;
      }
      else {
        int v2 = 0;
      }
    }
    else
    {
      int v2 = *(_DWORD *)a1 + 1;
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SQLiteArgument(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(void *)Swift::String result = a2 - 2;
    if (a3 >= 2) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 2) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)Swift::String result = 0;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SQLiteArgument()
{
  return &type metadata for SQLiteArgument;
}

SQLiter::SQLiteDataType_optional __swiftcall SQLiteDataType.init(rawValue:)(Swift::Int32 rawValue)
{
  if (rawValue >= 6) {
    return (SQLiter::SQLiteDataType_optional)5;
  }
  else {
    return (SQLiter::SQLiteDataType_optional)(0x40201030005uLL >> (8 * rawValue));
  }
}

uint64_t SQLiteDataType.rawValue.getter(char a1)
{
  return dword_1001AC678[a1];
}

BOOL sub_10015BE90(char *a1, char *a2)
{
  return sub_10015E30C(*a1, *a2);
}

unint64_t sub_10015BEA0()
{
  unint64_t result = qword_100223938;
  if (!qword_100223938)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100223938);
  }
  return result;
}

Swift::Int sub_10015BEEC()
{
  return sub_10015E330(*v0);
}

void sub_10015BEF4(uint64_t a1)
{
  sub_10015E540(a1, *v1);
}

Swift::Int sub_10015BEFC(uint64_t a1)
{
  return sub_10015E574(a1, *v1);
}

SQLiter::SQLiteDataType_optional sub_10015BF04@<W0>(Swift::Int32 *a1@<X0>, SQLiter::SQLiteDataType_optional *a2@<X8>)
{
  result.Swift::Bool value = SQLiteDataType.init(rawValue:)(*a1).value;
  a2->Swift::Bool value = result.value;
  return result;
}

uint64_t sub_10015BF30@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result = SQLiteDataType.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

unsigned char *storeEnumTagSinglePayload for SQLiteDataType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10015C028);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SQLiteDataType()
{
  return &type metadata for SQLiteDataType;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> String.ensureValidSQLNameCharacters()()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = type metadata accessor for CharacterSet();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11[0] = v3;
  v11[1] = v2;
  if (qword_100223320 != -1) {
    swift_once();
  }
  sub_10002A10C(v4, (uint64_t)qword_100236D00);
  CharacterSet.inverted.getter();
  sub_100021100();
  StringProtocol.rangeOfCharacter(from:options:range:)();
  char v9 = v8;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if ((v9 & 1) == 0)
  {
    sub_100122878();
    swift_allocError();
    *(void *)(v10 + 8) = 0;
    *(void *)(v10 + 16) = 0;
    *(void *)uint64_t v10 = 10;
    *(unsigned char *)(v10 + 24) = 4;
    swift_willThrow();
  }
}

void sub_10015C1F4()
{
}

uint64_t SQLiteStatement.forEach(_:)(void (*a1)(uint64_t))
{
  return sub_10015D3BC(v1, a1);
}

double SQLiteStatement.init(database:statement:sqlString:verboseLog:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  type metadata accessor for SQLiteStatement.Context();
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a1;
  *(void *)(v12 + 24) = a2;
  *(void *)a6 = v12;
  *(void *)(a6 + 8) = a3;
  *(void *)(a6 + 16) = a4;
  double result = 0.0;
  *(_OWORD *)(a6 + 24) = xmmword_1001AC4C0;
  *(unsigned char *)(a6 + 40) = a5;
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SQLiteStatement.execute()()
{
  sub_10015D3BC(v0, (void (*)(uint64_t))sub_10015A0F0);
}

uint64_t SQLiteStatement.nextRow()()
{
  uint64_t v2 = *v0;
  uint64_t v3 = (sqlite3_stmt *)sub_10015C798();
  if (!v1)
  {
    int v5 = sqlite3_step(v3);
    if (v5 == 100)
    {
      swift_retain();
    }
    else
    {
      unsigned int v6 = v5;
      if (v5 == 101)
      {
        if (v0[5])
        {
          if (qword_100223328 != -1) {
            swift_once();
          }
          uint64_t v7 = type metadata accessor for Logger();
          sub_10002A10C(v7, (uint64_t)qword_100236D18);
          uint64_t v9 = v0[1];
          unint64_t v8 = v0[2];
          swift_retain_n();
          swift_bridgeObjectRetain_n();
          uint64_t v10 = Logger.logObject.getter();
          os_log_type_t v11 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v10, v11))
          {
            uint64_t v19 = v9;
            uint64_t v12 = (uint8_t *)swift_slowAlloc();
            v20[0] = swift_slowAlloc();
            *(_DWORD *)uint64_t v12 = 136315138;
            swift_bridgeObjectRetain();
            v20[3] = sub_10001C274(v19, v8, v20);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            sub_100021298();
            swift_bridgeObjectRelease_n();
            _os_log_impl((void *)&_mh_execute_header, v10, v11, "SQL statement executed: %s", v12, 0xCu);
            swift_arrayDestroy();
            sub_100017D40();
            sub_100017D40();
          }
          else
          {

            swift_bridgeObjectRelease_n();
            sub_100021298();
          }
        }
        return 0;
      }
      else
      {
        sub_10015C72C();
        _StringGuts.grow(_:)(39);
        swift_bridgeObjectRelease();
        v20[0] = 0xD000000000000025;
        v20[1] = 0x80000001001B9C10;
        uint64_t v14 = v0[1];
        uint64_t v13 = (void *)v0[2];
        swift_bridgeObjectRetain();
        v15._uint64_t countAndFlagsBits = v14;
        v15._unint64_t object = v13;
        String.append(_:)(v15);
        swift_bridgeObjectRelease();
        v16._uint64_t countAndFlagsBits = 0xD000000000000025;
        v16._unint64_t object = (void *)0x80000001001B9C10;
        Swift::String v17 = SQLiteDatabase.logAndReturnSQLErrorMessage(_:)(v16);
        swift_release();
        swift_bridgeObjectRelease();
        uint64_t v2 = v6;
        sub_100122878();
        sub_100024A30();
        *(void *)uint64_t v18 = v6;
        *(Swift::String *)(v18 + 8) = v17;
        *(unsigned char *)(v18 + 24) = 0;
        swift_willThrow();
      }
    }
  }
  return v2;
}

uint64_t SQLiteStatement.expectAtMostOneRow()@<X0>(uint64_t *a1@<X8>)
{
  sub_10002A828(a1);
  *(_OWORD *)(v1 + 24) = xmmword_1001A9580;
  *(unsigned char *)(v1 + 40) = 0;
  swift_retain();

  return swift_bridgeObjectRetain();
}

uint64_t SQLiteStatement.reduce<A>(into:handleRow:)()
{
  sub_100026808();
  uint64_t v2 = sub_10002CF10();
  v3(v2);
  uint64_t result = sub_10015D3BC(v0, (void (*)(uint64_t))sub_10015DCAC);
  if (v1)
  {
    uint64_t v5 = sub_100024548();
    return v6(v5);
  }
  return result;
}

uint64_t sub_10015C6CC()
{
  uint64_t v1 = *(sqlite3_stmt **)(v0 + 24);
  if (v1) {
    sqlite3_finalize(v1);
  }
  swift_release();
  return v0;
}

uint64_t sub_10015C6F8()
{
  sub_10015C6CC();

  return _swift_deallocClassInstance(v0, 32, 7);
}

uint64_t sub_10015C72C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  if (v1 && *(void *)(v1 + 16)) {
    return swift_retain();
  }
  sub_100122878();
  sub_100024A30();
  *(void *)(v3 + 8) = 0;
  *(void *)(v3 + 16) = 0;
  *(void *)uint64_t v3 = 4;
  *(unsigned char *)(v3 + 24) = 4;
  return swift_willThrow();
}

uint64_t sub_10015C798()
{
  uint64_t v1 = *(void *)(v0 + 16);
  if (!v1 || !*(void *)(v1 + 16))
  {
    sub_100122878();
    sub_100024A30();
    uint64_t v4 = 4;
LABEL_7:
    *(void *)uint64_t v3 = v4;
    *(void *)(v3 + 8) = 0;
    *(void *)(v3 + 16) = 0;
    *(unsigned char *)(v3 + 24) = 4;
    return swift_willThrow();
  }
  uint64_t result = *(void *)(v0 + 24);
  if (!result)
  {
    sub_100122878();
    sub_100024A30();
    uint64_t v4 = 3;
    goto LABEL_7;
  }
  return result;
}

__n128 SQLiteStatement.bind(_:at:)@<Q0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = v3;
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  sub_10001B620(a1, v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 8))(v5, a2, v8, v9);
  if (!v4)
  {
    long long v12 = *(_OWORD *)(v5 + 8);
    swift_retain();
    sub_10015DCE0((uint64_t)&v12);
    long long v11 = *(_OWORD *)(v5 + 16);
    *(_OWORD *)a3 = *(_OWORD *)v5;
    *(_OWORD *)(a3 + 16) = v11;
    __n128 result = *(__n128 *)(v5 + 25);
    *(__n128 *)(a3 + 25) = result;
  }
  return result;
}

void SQLiteStatement.bind(_:withName:)()
{
  uint64_t v2 = v0;
  sub_100027FBC();
  uint64_t v3 = sub_10015C798();
  if (!v1)
  {
    uint64_t v4 = (sqlite3_stmt *)v3;
    uint64_t v5 = String.utf8CString.getter();
    LODWORD(v4) = sqlite3_bind_parameter_index(v4, (const char *)(v5 + 32));
    swift_release();
    if (v4)
    {
      sub_1000272DC();
      sub_100024DD0();
      v6();
      long long v8 = *(_OWORD *)(v2 + 8);
      swift_retain();
      sub_10015DCE0((uint64_t)&v8);
      sub_10002DFB0();
    }
    else
    {
      sub_100122878();
      sub_100024A30();
      sub_100026F10(v7, 9);
    }
  }
}

uint64_t SQLiteStatement.bindIfAny(_:withName:)()
{
  uint64_t v3 = v0;
  sub_100027FBC();
  uint64_t v4 = *v0;
  uint64_t result = sub_10015C798();
  if (!v1)
  {
    unsigned int v6 = (sqlite3_stmt *)result;
    uint64_t v7 = String.utf8CString.getter();
    LODWORD(v6) = sqlite3_bind_parameter_index(v6, (const char *)(v7 + 32));
    swift_release();
    if (v6)
    {
      sub_1000272DC();
      sub_100024DD0();
      v8();
    }
    uint64_t v9 = v3[1];
    uint64_t v10 = swift_bridgeObjectRetain();
    char v11 = *((unsigned char *)v3 + 40);
    *(void *)uint64_t v2 = v4;
    *(void *)(v2 + 8) = v9;
    *(void *)(v2 + 16) = v10;
    *(_OWORD *)(v2 + 24) = *(_OWORD *)(v3 + 3);
    *(unsigned char *)(v2 + 40) = v11;
    return swift_retain();
  }
  return result;
}

double SQLiteStatement.bind(_:)@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  SQLiteStatement.bind(_:)(a1);
  if (!v2)
  {
    *a2 = v5;
    a2[1] = *(_OWORD *)v6;
    double result = *(double *)&v6[9];
    *(_OWORD *)((char *)a2 + 25) = *(_OWORD *)&v6[9];
  }
  return result;
}

void SQLiteStatement.bind(_:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = 0;
    for (unint64_t i = (void *)(a1 + 32); ; i += 5)
    {
      ++v4;
      sub_10001B620(i, i[3]);
      sub_100024DD0();
      v6();
      if (v2) {
        break;
      }
      if (v3 == v4)
      {
        long long v8 = *(_OWORD *)(v1 + 8);
        swift_retain();
        sub_10015DCE0((uint64_t)&v8);
        sub_10002DFB0();
        return;
      }
    }
  }
  else
  {
    sub_100122878();
    sub_100024A30();
    sub_100026F10(v7, 7);
  }
}

sqlite3_stmt *SQLiteStatement.reset()@<X0>(_OWORD *a1@<X8>)
{
  double result = (sqlite3_stmt *)sub_10015C798();
  if (!v2)
  {
    long long v5 = result;
    int v6 = sqlite3_reset(result);
    if (v6)
    {
      unsigned int v7 = v6;
      if (qword_100223328 != -1) {
        swift_once();
      }
      uint64_t v8 = type metadata accessor for Logger();
      sub_10002A10C(v8, (uint64_t)qword_100236D18);
      uint64_t v9 = Logger.logObject.getter();
      os_log_type_t v10 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v9, v10))
      {
        char v11 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)char v11 = 67109120;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v9, v10, "Failed to reset a statement with error: %d", v11, 8u);
        sub_100017D40();
      }

      sub_100122878();
      sub_100024A30();
      void *v12 = v7;
      v12[1] = 0xD000000000000010;
      return (sqlite3_stmt *)sub_1000276C4((uint64_t)v12, (uint64_t)"Failed to reset.");
    }
    else
    {
      sqlite3_clear_bindings(v5);
      long long v14 = *(_OWORD *)((char *)v1 + 8);
      swift_retain();
      double result = (sqlite3_stmt *)sub_10015DCE0((uint64_t)&v14);
      long long v13 = v1[1];
      *a1 = *v1;
      a1[1] = v13;
      *(_OWORD *)((char *)a1 + 25) = *(_OWORD *)((char *)v1 + 25);
    }
  }
  return result;
}

uint64_t sub_10015CD70(uint64_t a1, uint64_t a2)
{
  if (qword_100223328 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_10002A10C(v3, (uint64_t)qword_100236D18);
  uint64_t v4 = *(void *)(a2 + 8);
  unint64_t v5 = *(void *)(a2 + 16);
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  int v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315138;
    swift_bridgeObjectRetain();
    sub_10001C274(v4, v5, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_100021298();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Unexpected result: %s", v8, 0xCu);
    swift_arrayDestroy();
    sub_100017D40();
    sub_100017D40();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    sub_100021298();
  }
  sub_100122878();
  sub_100024A30();
  *uint64_t v9 = xmmword_1001AC6C0;
  return sub_1000276C4((uint64_t)v9, (uint64_t)"Unexpected result. SQLITE_DONE is expected.");
}

double SQLiteStatement.executeAndReset()@<D0>(_OWORD *a1@<X8>)
{
  sub_10015D3BC(v1, (void (*)(uint64_t))sub_10015A270);
  if (!v2)
  {
    SQLiteStatement.reset()(&v6);
    long long v5 = v7[0];
    *a1 = v6;
    a1[1] = v5;
    double result = *(double *)((char *)v7 + 9);
    *(_OWORD *)((char *)a1 + 25) = *(_OWORD *)((char *)v7 + 9);
  }
  return result;
}

uint64_t SQLiteStatement.singleRowIfAny<A>(_:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  sub_10002538C(a2, 1, 1, a1);
  uint64_t v5 = v2[1];
  uint64_t v6 = v2[2];
  v9[0] = *v2;
  v9[1] = v5;
  void v9[2] = v6;
  long long v10 = xmmword_1001A9580;
  char v11 = 0;
  swift_retain();
  swift_bridgeObjectRetain();
  sub_10015D3BC((uint64_t)v9, (void (*)(uint64_t))sub_10015DD0C);
  swift_bridgeObjectRelease();
  if (!v3) {
    return swift_release();
  }
  swift_release();
  uint64_t v7 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(a2, v7);
}

uint64_t sub_10015D0F0(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  long long v13 = (char *)&v15 - v12;
  uint64_t result = a3(a1);
  if (!v5)
  {
    sub_10002538C((uint64_t)v13, 0, 1, a5);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 40))(a2, v13, v10);
  }
  return result;
}

uint64_t SQLiteStatement.singleRow<A>(_:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t v19 = a2;
  uint64_t v4 = type metadata accessor for Optional();
  sub_100026808();
  uint64_t v6 = v5;
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v18 - v11;
  uint64_t result = SQLiteStatement.singleRowIfAny<A>(_:)(a1, (uint64_t)&v18 - v11);
  if (!v2)
  {
    uint64_t v14 = v19;
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v10, v12, v4);
    int v15 = sub_100027BA4((uint64_t)v10, 1, a1);
    Swift::String v16 = *(void (**)(void))(v6 + 8);
    if (v15 == 1)
    {
      sub_100018488();
      v16();
      sub_100122878();
      sub_100024A30();
      sub_100026F10(v17, 5);
      sub_100018488();
      return ((uint64_t (*)(void))v16)();
    }
    else
    {
      sub_100018488();
      v16();
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(a1 - 8) + 32))(v14, v10, a1);
    }
  }
  return result;
}

uint64_t sub_10015D3BC(uint64_t a1, void (*a2)(uint64_t))
{
  unint64_t v5 = *(void *)(a1 + 32);
  uint64_t result = SQLiteStatement.nextRow()();
  if (!v2)
  {
    uint64_t v7 = result;
    unint64_t v8 = v5;
    while (v7)
    {
      if (!v8)
      {
        sub_100122878();
        sub_100024A30();
        sub_100026F10(v10, 2);
        return swift_release();
      }
      a2(v7);
      swift_release();
      --v8;
      uint64_t result = SQLiteStatement.nextRow()();
      uint64_t v7 = result;
    }
    if (v5 < v8)
    {
      __break(1u);
    }
    else if (v5 - v8 < *(void *)(a1 + 24))
    {
      sub_100122878();
      sub_100024A30();
      return sub_100026F10(v9, 5);
    }
  }
  return result;
}

uint64_t type metadata accessor for SQLiteStatement.Context()
{
  return self;
}

uint64_t SQLiteStatement.iterate(_:)(uint64_t (*a1)(uint64_t))
{
  uint64_t v3 = v1;
  unint64_t v5 = *(void *)(v1 + 32);
  unint64_t v6 = v5;
  do
  {
    uint64_t result = SQLiteStatement.nextRow()();
    if (v2) {
      break;
    }
    if (!result)
    {
      if (v5 < v6)
      {
        __break(1u);
      }
      else if (v5 - v6 < *(void *)(v3 + 24))
      {
        sub_100122878();
        sub_100024A30();
        return sub_100026F10(v9, 5);
      }
      return result;
    }
    if (!v6)
    {
      sub_100122878();
      sub_100024A30();
      sub_100026F10(v10, 2);
      return swift_release();
    }
    char v8 = a1(result);
    uint64_t result = swift_release();
    --v6;
  }
  while ((v8 & 1) != 0);
  return result;
}

uint64_t SQLiteStatement.reduce<A>(_:handleRow:)()
{
  sub_100026808();
  uint64_t v2 = sub_10002CF10();
  v3(v2);
  uint64_t result = sub_10015D3BC(v0, (void (*)(uint64_t))sub_10015DD2C);
  if (v1)
  {
    uint64_t v5 = sub_100024548();
    return v6(v5);
  }
  return result;
}

uint64_t sub_10015D6C4(uint64_t a1, uint64_t a2, void (*a3)(char *, uint64_t), uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *(void *)(a5 - 8);
  uint64_t v11 = ((uint64_t (*)(void))__chkstk_darwin)();
  long long v13 = (char *)v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  int v15 = (char *)v17 - v14;
  (*(void (**)(char *))(v10 + 16))(v13);
  a3(v13, a1);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, a5);
  if (!v5) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 40))(a2, v15, a5);
  }
  return result;
}

uint64_t SQLiteStatement.map<A>(_:)()
{
  return SQLiteStatement.compactMap<A>(_:)();
}

uint64_t sub_10015D860@<X0>(uint64_t (*a1)(void)@<X1>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t result = a1();
  if (!v3) {
    return sub_10002538C(a3, 0, 1, a2);
  }
  return result;
}

uint64_t SQLiteStatement.compactMap<A>(_:)()
{
  uint64_t v3 = static Array._allocateUninitialized(_:)();
  sub_10015D3BC(v0, (void (*)(uint64_t))sub_10015DD6C);
  if (v1) {
    swift_bridgeObjectRelease();
  }
  return v3;
}

uint64_t sub_10015D958(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3, uint64_t a4, uint64_t a5)
{
  v21[1] = a4;
  uint64_t v8 = type metadata accessor for Optional();
  v21[0] = *(void *)(v8 - 8);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)v21 - v10;
  uint64_t v12 = *(void *)(a5 - 8);
  uint64_t v13 = __chkstk_darwin(v9);
  int v15 = (char *)v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)v21 - v16;
  uint64_t v18 = v21[3];
  uint64_t result = a2(a1);
  if (!v18)
  {
    uint64_t v20 = v21[0];
    if (sub_100027BA4((uint64_t)v11, 1, a5) == 1)
    {
      return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v11, v8);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v17, v11, a5);
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v17, a5);
      type metadata accessor for Array();
      Array.append(_:)();
      return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v17, a5);
    }
  }
  return result;
}

uint64_t SQLiteStatement.expectRows()@<X0>(uint64_t *a1@<X8>)
{
  sub_10002A828(a1);
  *(_OWORD *)(v1 + 24) = xmmword_1001AC6D0;
  *(unsigned char *)(v1 + 40) = 0;
  swift_retain();

  return swift_bridgeObjectRetain();
}

uint64_t SQLiteStatement.expect(minRows:maxRows:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3[1];
  uint64_t v5 = v3[2];
  *(void *)a3 = *v3;
  *(void *)(a3 + 8) = v4;
  *(void *)(a3 + 16) = v5;
  *(void *)(a3 + 24) = a1;
  *(void *)(a3 + 32) = a2;
  *(unsigned char *)(a3 + 40) = 0;
  swift_retain();

  return swift_bridgeObjectRetain();
}

uint64_t SQLiteStatement.dontExpectRows()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1[1];
  uint64_t v3 = v1[2];
  *(void *)a1 = *v1;
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 40) = 0;
  swift_retain();

  return swift_bridgeObjectRetain();
}

uint64_t SQLiteStatement.expectOneRow()@<X0>(uint64_t *a1@<X8>)
{
  sub_10002A828(a1);
  *(int64x2_t *)(v1 + 24) = vdupq_n_s64(1uLL);
  *(unsigned char *)(v1 + 40) = 0;
  swift_retain();

  return swift_bridgeObjectRetain();
}

uint64_t sub_10015DCAC(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(v1 + 24))(*(void *)(v1 + 40), a1);
}

uint64_t sub_10015DCE0(uint64_t a1)
{
  return a1;
}

uint64_t sub_10015DD0C(uint64_t a1)
{
  return sub_10015D0F0(a1, *(void *)(v1 + 24), *(uint64_t (**)(uint64_t))(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 16));
}

uint64_t sub_10015DD2C(uint64_t a1)
{
  return sub_10015D6C4(a1, *(void *)(v1 + 24), *(void (**)(char *, uint64_t))(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 16));
}

uint64_t sub_10015DD4C@<X0>(uint64_t a1@<X8>)
{
  return sub_10015D860(*(uint64_t (**)(void))(v1 + 24), *(void *)(v1 + 16), a1);
}

uint64_t sub_10015DD6C(uint64_t a1)
{
  return sub_10015D958(a1, *(uint64_t (**)(uint64_t))(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 16));
}

uint64_t destroy for SQLiteStatement()
{
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SQLiteStatement(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SQLiteStatement(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

uint64_t assignWithTake for SQLiteStatement(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for SQLiteStatement(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 41))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SQLiteStatement(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 40) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 41) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SQLiteStatement()
{
  return &type metadata for SQLiteStatement;
}

SQLiter::SQLiteDataType __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SQLiteColumnType.getDataType()()
{
  char v1 = v0;
  SQLiter::SQLiteDataType result = SQLiter_SQLiteDataType_text;
  switch(v1)
  {
    case 1:
      SQLiter::SQLiteDataType result = SQLiter_SQLiteDataType_blob;
      break;
    case 2:
    case 3:
    case 4:
    case 5:
    case 9:
      SQLiter::SQLiteDataType result = SQLiter_SQLiteDataType_integer;
      break;
    case 6:
    case 7:
    case 8:
      SQLiter::SQLiteDataType result = SQLiter_SQLiteDataType_float;
      break;
    case 10:
      sub_100122878();
      swift_allocError();
      *(void *)uint64_t v3 = 0xD00000000000003ELL;
      *(void *)(v3 + 8) = 0x80000001001B98E0;
      *(void *)(v3 + 16) = 0;
      *(unsigned char *)(v3 + 24) = 3;
      SQLiter::SQLiteDataType result = swift_willThrow();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10015E070(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 1415071060;
  unint64_t v3 = 0xE400000000000000;
  uint64_t v4 = a1;
  uint64_t v5 = 1415071060;
  switch(v4)
  {
    case 1:
      uint64_t v5 = 1112493122;
      break;
    case 2:
      unint64_t v3 = 0xE500000000000000;
      uint64_t v5 = 0x3233544E49;
      break;
    case 3:
      unint64_t v3 = 0xE500000000000000;
      uint64_t v5 = 0x3436544E49;
      break;
    case 4:
      unint64_t v3 = 0xE600000000000000;
      uint64_t v5 = 0x3233544E4955;
      break;
    case 5:
      unint64_t v3 = 0xE600000000000000;
      uint64_t v5 = 0x3436544E4955;
      break;
    case 6:
      unint64_t v3 = 0xE500000000000000;
      uint64_t v5 = 0x54414F4C46;
      break;
    case 7:
      unint64_t v3 = 0xE600000000000000;
      uint64_t v5 = 0x454C42554F44;
      break;
    case 8:
      unint64_t v3 = 0xE800000000000000;
      uint64_t v5 = 0x454D495445544144;
      break;
    case 9:
      unint64_t v3 = 0xE700000000000000;
      uint64_t v5 = 0x4E41454C4F4F42;
      break;
    case 10:
      unint64_t v3 = 0xE300000000000000;
      uint64_t v5 = 5852737;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE400000000000000;
  switch(a2)
  {
    case 1:
      uint64_t v2 = 1112493122;
      break;
    case 2:
      unint64_t v6 = 0xE500000000000000;
      uint64_t v2 = 0x3233544E49;
      break;
    case 3:
      unint64_t v6 = 0xE500000000000000;
      uint64_t v2 = 0x3436544E49;
      break;
    case 4:
      unint64_t v6 = 0xE600000000000000;
      uint64_t v2 = 0x3233544E4955;
      break;
    case 5:
      unint64_t v6 = 0xE600000000000000;
      uint64_t v2 = 0x3436544E4955;
      break;
    case 6:
      unint64_t v6 = 0xE500000000000000;
      uint64_t v2 = 0x54414F4C46;
      break;
    case 7:
      unint64_t v6 = 0xE600000000000000;
      uint64_t v2 = 0x454C42554F44;
      break;
    case 8:
      unint64_t v6 = 0xE800000000000000;
      uint64_t v2 = 0x454D495445544144;
      break;
    case 9:
      unint64_t v6 = 0xE700000000000000;
      uint64_t v2 = 0x4E41454C4F4F42;
      break;
    case 10:
      unint64_t v6 = 0xE300000000000000;
      uint64_t v2 = 5852737;
      break;
    default:
      break;
  }
  if (v5 == v2 && v3 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

BOOL sub_10015E30C(char a1, char a2)
{
  return dword_1001AC7D4[a1] == dword_1001AC7D4[a2];
}

Swift::Int sub_10015E330(char a1)
{
  return Hasher._finalize()();
}

Swift::Int sub_10015E384(char a1)
{
  return Hasher._finalize()();
}

uint64_t sub_10015E3E8()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

void sub_10015E540(uint64_t a1, char a2)
{
}

Swift::Int sub_10015E574(uint64_t a1, char a2)
{
  return Hasher._finalize()();
}

Swift::Int sub_10015E5C4(uint64_t a1, char a2)
{
  return Hasher._finalize()();
}

ValueMetadata *SQLiteColumnType.defaultNativeType.getter(char a1)
{
  char v1 = (ValueMetadata *)&type metadata for String;
  switch(a1)
  {
    case 1:
      char v1 = (ValueMetadata *)&type metadata for Data;
      sub_100133864();
      break;
    case 2:
      char v1 = (ValueMetadata *)&type metadata for Int32;
      break;
    case 3:
      char v1 = (ValueMetadata *)&type metadata for Int64;
      break;
    case 4:
      char v1 = (ValueMetadata *)&type metadata for UInt32;
      break;
    case 5:
      char v1 = (ValueMetadata *)&type metadata for UInt64;
      break;
    case 6:
      char v1 = (ValueMetadata *)&type metadata for Float;
      break;
    case 7:
    case 8:
      char v1 = (ValueMetadata *)&type metadata for Double;
      break;
    case 9:
      char v1 = (ValueMetadata *)&type metadata for Bool;
      break;
    case 10:
      char v1 = &type metadata for SQLiteUndefined;
      sub_1001338B0();
      break;
    default:
      return v1;
  }
  return v1;
}

SQLiter::SQLiteColumnType_optional __swiftcall SQLiteColumnType.init(rawValue:)(Swift::String rawValue)
{
  unint64_t object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._unint64_t object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100203988, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0xB) {
    return (SQLiter::SQLiteColumnType_optional)11;
  }
  else {
    return (SQLiter::SQLiteColumnType_optional)v3;
  }
}

uint64_t SQLiteColumnType.rawValue.getter(char a1)
{
  uint64_t result = 1415071060;
  switch(a1)
  {
    case 1:
      uint64_t result = 1112493122;
      break;
    case 2:
      uint64_t result = 0x3233544E49;
      break;
    case 3:
      uint64_t result = 0x3436544E49;
      break;
    case 4:
      uint64_t result = 0x3233544E4955;
      break;
    case 5:
      uint64_t result = 0x3436544E4955;
      break;
    case 6:
      uint64_t result = 0x54414F4C46;
      break;
    case 7:
      uint64_t result = 0x454C42554F44;
      break;
    case 8:
      uint64_t result = 0x454D495445544144;
      break;
    case 9:
      uint64_t result = 0x4E41454C4F4F42;
      break;
    case 10:
      uint64_t result = 5852737;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10015E8C0(unsigned __int8 *a1, char *a2)
{
  return sub_10015E070(*a1, *a2);
}

unint64_t sub_10015E8D0()
{
  unint64_t result = qword_100223A28;
  if (!qword_100223A28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100223A28);
  }
  return result;
}

Swift::Int sub_10015E91C()
{
  return sub_10015E384(*v0);
}

uint64_t sub_10015E924()
{
  return sub_10015E3E8();
}

Swift::Int sub_10015E92C(uint64_t a1)
{
  return sub_10015E5C4(a1, *v1);
}

SQLiter::SQLiteColumnType_optional sub_10015E934@<W0>(Swift::String *a1@<X0>, SQLiter::SQLiteColumnType_optional *a2@<X8>)
{
  result.Swift::Bool value = SQLiteColumnType.init(rawValue:)(*a1).value;
  a2->Swift::Bool value = result.value;
  return result;
}

uint64_t sub_10015E964@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = SQLiteColumnType.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unsigned char *storeEnumTagSinglePayload for SQLiteColumnType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 10 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 10) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF6) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF5)
  {
    unsigned int v6 = ((a2 - 246) >> 8) + 1;
    *uint64_t result = a2 + 10;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10015EA5CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 10;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SQLiteColumnType()
{
  return &type metadata for SQLiteColumnType;
}

sqlite3_stmt *String.init(with:column:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = (sqlite3_stmt *)sub_10015C798();
  if (v2)
  {
    swift_release();
    return (sqlite3_stmt *)a2;
  }
  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (a2 <= 0x7FFFFFFF)
  {
    if (sqlite3_column_text(result, a2))
    {
      a2 = String.init(cString:)();
      swift_release();
    }
    else
    {
      swift_release();
      return 0;
    }
    return (sqlite3_stmt *)a2;
  }
  __break(1u);
  return result;
}

uint64_t sub_10015EB38@<X0>(uint64_t *a1@<X8>)
{
  return sub_10015EC88((uint64_t (*)(void))String.init(with:column:), a1);
}

sqlite3_stmt *Data.init(with:column:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = (sqlite3_stmt *)sub_10015C798();
  if (v2)
  {
    swift_release();
    return (sqlite3_stmt *)a2;
  }
  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (a2 <= 0x7FFFFFFF)
  {
    uint64_t v5 = result;
    if (sqlite3_column_blob(result, a2))
    {
      sqlite3_column_bytes(v5, a2);
      a2 = Data.init(bytes:count:)();
      swift_release();
    }
    else
    {
      SQLiteRow.type(at:)(a2);
      swift_release();
      if (!v6) {
        return 0;
      }
    }
    return (sqlite3_stmt *)a2;
  }
  __break(1u);
  return result;
}

uint64_t sub_10015EC5C@<X0>(uint64_t *a1@<X8>)
{
  return sub_10015EC88((uint64_t (*)(void))Data.init(with:column:), a1);
}

uint64_t sub_10015EC88@<X0>(uint64_t (*a1)(void)@<X4>, uint64_t *a2@<X8>)
{
  uint64_t result = a1();
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t RawRepresentable<>.init(with:column:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v57 = a1;
  uint64_t v53 = a5;
  type metadata accessor for Optional();
  sub_100026808();
  uint64_t v49 = v9;
  uint64_t v50 = v8;
  __chkstk_darwin(v8);
  uint64_t v52 = (char *)&v48 - v10;
  uint64_t v51 = a3;
  uint64_t v56 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v12 = type metadata accessor for Optional();
  sub_100026808();
  uint64_t v55 = v13;
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v48 - v15;
  sub_100026808();
  uint64_t v54 = v17;
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v48 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v23 = (char *)&v48 - v22;
  uint64_t v24 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 8);
  uint64_t v25 = swift_retain();
  uint64_t v26 = v60;
  uint64_t v60 = AssociatedTypeWitness;
  v24(v25, v57, AssociatedTypeWitness, a4);
  if (v26) {
    return swift_release();
  }
  uint64_t v28 = v20;
  uint64_t v29 = v12;
  uint64_t v30 = v54;
  uint64_t v31 = v55;
  uint64_t v32 = v56;
  if (sub_100027BA4((uint64_t)v16, 1, v60) == 1)
  {
    swift_release();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v16, v29);
    uint64_t v33 = 1;
    uint64_t v34 = v32;
    uint64_t v35 = v53;
  }
  else
  {
    uint64_t v36 = v23;
    uint64_t v37 = v60;
    (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v23, v16, v60);
    (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v28, v23, v37);
    uint64_t v38 = (uint64_t)v52;
    uint64_t v39 = v36;
    uint64_t v34 = v32;
    dispatch thunk of RawRepresentable.init(rawValue:)();
    if (sub_100027BA4(v38, 1, v32) == 1)
    {
      (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v38, v50);
      uint64_t v58 = 0;
      unint64_t v59 = 0xE000000000000000;
      _StringGuts.grow(_:)(45);
      v40._unint64_t object = (void *)0x80000001001B97A0;
      uint64_t v41 = v30;
      v40._uint64_t countAndFlagsBits = 0xD000000000000011;
      String.append(_:)(v40);
      v42._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
      String.append(_:)(v42);
      swift_bridgeObjectRelease();
      v43._uint64_t countAndFlagsBits = 0xD000000000000018;
      v43._unint64_t object = (void *)0x80000001001B97C0;
      String.append(_:)(v43);
      uint64_t v44 = v60;
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      uint64_t v45 = v58;
      unint64_t v46 = v59;
      sub_100122878();
      swift_allocError();
      *(void *)uint64_t v47 = v45;
      *(void *)(v47 + 8) = v46;
      *(void *)(v47 + 16) = 0;
      *(unsigned char *)(v47 + 24) = 3;
      swift_willThrow();
      swift_release();
      return (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v39, v44);
    }
    swift_release();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v36, v60);
    uint64_t v35 = v53;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 32))(v53, v38, v32);
    uint64_t v33 = 0;
  }
  return sub_10002538C(v35, v33, 1, v34);
}

Swift::Void __swiftcall SQLiteContext.setError(message:code:)(Swift::String message, Swift::Int32 code)
{
  int v3 = v2;
  uint64_t v5 = String.utf8CString.getter();
  sqlite3_result_error(v3, (const char *)(v5 + 32), code);

  swift_release();
}

uint64_t SQLiteContext.setError<A>(_:message:code:)(uint64_t a1, uint64_t a2, unint64_t a3, int a4, sqlite3_context *a5, uint64_t a6)
{
  uint64_t v12 = *(void *)(a6 - 8);
  __chkstk_darwin(a1);
  uint64_t v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (String.count.getter())
  {
    uint64_t v24 = a2;
    unint64_t v25 = a3;
    swift_bridgeObjectRetain();
    v15._uint64_t countAndFlagsBits = 8238;
    v15._unint64_t object = (void *)0xE200000000000000;
    String.append(_:)(v15);
    uint64_t v17 = v24;
    unint64_t v16 = v25;
  }
  else
  {
    uint64_t v17 = 0;
    unint64_t v16 = 0xE000000000000000;
  }
  uint64_t v24 = 0x203A726F727245;
  unint64_t v25 = 0xE700000000000000;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, a6);
  v18._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  uint64_t v19 = v24;
  uint64_t v20 = (void *)v25;
  uint64_t v24 = v17;
  unint64_t v25 = v16;
  swift_bridgeObjectRetain();
  v21._uint64_t countAndFlagsBits = v19;
  v21._unint64_t object = v20;
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v22 = String.utf8CString.getter();
  swift_bridgeObjectRelease();
  sqlite3_result_error(a5, (const char *)(v22 + 32), a4);
  return swift_release();
}

void (__cdecl **SQLiteDestructor.value.getter(void (__cdecl **result)(void *)))(void *)
{
  if (result)
  {
    if (result == (void (__cdecl **)(void *))1)
    {
      if (qword_100223318 != -1) {
        swift_once();
      }
      return (void (__cdecl **)(void *))qword_100236CF8;
    }
    else if (result == (void (__cdecl **)(void *))2)
    {
      return &_sqlite3_free;
    }
  }
  return result;
}

Swift::Void __swiftcall SQLiteContext.setSubtype(_:)(Swift::UInt32 a1)
{
  sqlite3_result_subtype(v1, a1);
}

Swift::Void __swiftcall SQLiteContext.setInt32(_:)(Swift::Int32 a1)
{
  sqlite3_result_int(v1, a1);
}

Swift::Void __swiftcall SQLiteContext.setInt64(_:)(Swift::Int64 a1)
{
  sqlite3_result_int64(v1, a1);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SQLiteContext.setInt(_:)(Swift::Int a1)
{
  sub_100025E5C(a1, v1);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SQLiteContext.setUInt64(_:)(Swift::UInt64 a1)
{
  sub_10015F4F4(a1, v1);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SQLiteContext.setInt8(_:)(Swift::Int8 a1)
{
  sub_10002A83C();
  sqlite3_result_int(v2, v1);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SQLiteContext.setUInt8(_:)(Swift::UInt8 a1)
{
  sub_10002A83C();
  sqlite3_result_int(v2, v1);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SQLiteContext.setInt16(_:)(Swift::Int16 a1)
{
  sub_10002A83C();
  sqlite3_result_int(v2, v1);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SQLiteContext.setUInt16(_:)(Swift::UInt16 a1)
{
  sub_10002A83C();
  sqlite3_result_int(v2, v1);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SQLiteContext.setUInt32(_:)(Swift::UInt32 a1)
{
  if ((a1 & 0x80000000) != 0)
  {
    sub_100122878();
    uint64_t v2 = swift_allocError();
    sub_100026EAC(v2, v3);
  }
  else
  {
    sqlite3_result_int(v1, a1);
  }
}

void sub_10015F4F4(sqlite3_int64 a1, sqlite3_context *a2)
{
  if (a1 < 0)
  {
    sub_100122878();
    uint64_t v2 = swift_allocError();
    sub_100026EAC(v2, v3);
  }
  else
  {
    sub_100025E5C(a1, a2);
  }
}

Swift::Void __swiftcall SQLiteContext.setBool(_:)(Swift::Bool a1)
{
  sqlite3_result_int(v1, a1);
}

Swift::Void __swiftcall SQLiteContext.setFloat(_:)(Swift::Float a1)
{
  sqlite3_result_double(v1, a1);
}

void SQLiteContext.setString(_:destructor:)(uint64_t a1, uint64_t a2, void (__cdecl **a3)(void *), sqlite3_context *a4)
{
  if (a2)
  {
    sub_10015F630(a1, a2, a4, a3);
  }
  else
  {
    sqlite3_result_null(a4);
  }
}

void sub_10015F5AC(const char *a1, sqlite3_context *a2, void (__cdecl **a3)(void *))
{
  int64_t v6 = strlen(a1);
  if (v6 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else
  {
    int v7 = v6;
    if (v6 <= 0x7FFFFFFF)
    {
      uint64_t v8 = SQLiteDestructor.value.getter(a3);
      sqlite3_result_text(a2, a1, v7, (void (__cdecl *)(void *))v8);
      return;
    }
  }
  __break(1u);
}

void sub_10015F630(uint64_t a1, uint64_t a2, sqlite3_context *a3, void (__cdecl **a4)(void *))
{
  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    _StringGuts._slowWithCString<A>(_:)();
  }
  else
  {
    if ((a2 & 0x2000000000000000) != 0)
    {
      v7[0] = a1;
      v7[1] = a2 & 0xFFFFFFFFFFFFFFLL;
      int64_t v6 = (const char *)v7;
    }
    else if ((a1 & 0x1000000000000000) != 0)
    {
      int64_t v6 = (const char *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else
    {
      int64_t v6 = (const char *)_StringObject.sharedUTF8.getter();
    }
    sub_10015F5AC(v6, a3, a4);
  }
}

void SQLiteContext.setData(_:destructor:)(uint64_t a1, unint64_t a2, void (__cdecl **a3)(void *), sqlite3_context *a4)
{
  if (a2 >> 60 == 15)
  {
    sqlite3_result_null(a4);
  }
  else
  {
    uint64_t v6 = a1;
    switch(a2 >> 62)
    {
      case 1uLL:
        sub_1000B8F00(a1, a2);
        sub_1000B8F00(v6, a2);
        if (v6 >> 32 < (int)v6)
        {
          __break(1u);
LABEL_18:
          sub_10000A330(v6, a2);
          swift_release();
          swift_release();
          __break(1u);
          JUMPOUT(0x10015F908);
        }
        sub_1000B8F00(v6, a2);
        sub_10002C73C((int)v6, v6 >> 32, a2 & 0x3FFFFFFFFFFFFFFFLL);
        goto LABEL_13;
      case 2uLL:
        sub_1000B8F00(a1, a2);
        sub_1000B8F00(v6, a2);
        uint64_t v8 = *(void *)(v6 + 16);
        uint64_t v9 = *(void *)(v6 + 24);
        sub_1000B8F00(v6, a2);
        swift_retain();
        swift_retain();
        sub_10002C73C(v8, v9, a2 & 0x3FFFFFFFFFFFFFFFLL);
        if (a3) {
          goto LABEL_18;
        }
        swift_release();
        swift_release();
LABEL_13:
        sub_10000A330(v6, a2);
        break;
      case 3uLL:
        a1 = 0;
        uint64_t v7 = 0;
        goto LABEL_10;
      default:
        uint64_t v7 = a2 & 0xFFFFFFFFFFFFFFLL;
LABEL_10:
        sub_10015F9EC(a1, v7, a4, v6, a2, a3);
        sub_10000A330(v6, a2);
        sub_10000A330(v6, a2);
        sub_1000291B4(v6, a2);
        break;
    }
    sub_1000291B4(v6, a2);
  }
}

void SQLiteContext.setBuffer(_:ofSize:destructor:)(uint64_t a1, uint64_t a2, void (__cdecl **a3)(void *), sqlite3_context *a4)
{
  int v6 = a2;
  if (a2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (a2 > 0x7FFFFFFF)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  a2 = a1;
  if (!a3)
  {
    uint64_t v7 = 0;
    goto LABEL_11;
  }
  if (a3 == (void (__cdecl **)(void *))1)
  {
    uint64_t v10 = v4;
    uint64_t v11 = v5;
    uint64_t v4 = &v10;
    if (qword_100223318 == -1)
    {
LABEL_10:
      uint64_t v7 = (void (__cdecl **)(void *))qword_100236CF8;
      uint64_t v5 = v11;
      goto LABEL_11;
    }
LABEL_16:
    *(v4 - 1) = a2;
    uint64_t v8 = a4;
    int v9 = v6;
    swift_once();
    a2 = *(v4 - 1);
    a4 = v8;
    int v6 = v9;
    goto LABEL_10;
  }
  if (a3 == (void (__cdecl **)(void *))2) {
    uint64_t v7 = &_sqlite3_free;
  }
  else {
    uint64_t v7 = a3;
  }
LABEL_11:
  sqlite3_result_blob(a4, (const void *)a2, v6, (void (__cdecl *)(void *))v7);
}

uint64_t sub_10015F9EC(uint64_t a1, uint64_t a2, sqlite3_context *a3, uint64_t a4, unint64_t a5, void (__cdecl **a6)(void *))
{
  uint64_t v12 = a1;
  __int16 v13 = a2;
  char v14 = BYTE2(a2);
  char v15 = BYTE3(a2);
  char v16 = BYTE4(a2);
  char v17 = BYTE5(a2);
  uint64_t v10 = Data.count.getter();
  SQLiteContext.setBuffer(_:ofSize:destructor:)((uint64_t)&v12, v10, a6, a3);
  return sub_1000291B4(a4, a5);
}

uint64_t sub_10015FAF8(uint64_t a1, uint64_t a2, uint64_t a3, sqlite3_context *a4, uint64_t a5, unint64_t a6, void (__cdecl **a7)(void *))
{
  uint64_t v12 = __DataStorage._bytes.getter();
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
      __break(1u);
      return result;
    }
    uint64_t v15 = v13 + a1 - result;
  }
  else
  {
    uint64_t v15 = 0;
  }
  __DataStorage._length.getter();
  if (v15)
  {
    uint64_t v16 = Data.count.getter();
    SQLiteContext.setBuffer(_:ofSize:destructor:)(v15, v16, a7, a4);
  }
  else
  {
    sqlite3_result_null(a4);
  }
  return sub_1000291B4(a5, a6);
}

uint64_t getEnumTagSinglePayload for SQLiteDestructor(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFD && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 2147483645);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 2;
  if (v4 >= 4) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for SQLiteDestructor(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFD)
  {
    *(void *)uint64_t result = 0;
    *(_DWORD *)uint64_t result = a2 - 2147483645;
    if (a3 >= 0x7FFFFFFD) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFD) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2 + 2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SQLiteDestructor()
{
  return &type metadata for SQLiteDestructor;
}

ValueMetadata *type metadata accessor for SQLiteContext()
{
  return &type metadata for SQLiteContext;
}

void sub_10015FC80(const char *a1)
{
  sub_10015F5AC(a1, *(sqlite3_context **)(v1 + 16), *(void (__cdecl ***)(void *))(v1 + 24));
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SQLiteSchemaDescribing.ensureValidSQLNameCharacters()()
{
  uint64_t v2 = (*(uint64_t (**)(void))(v0 + 16))();
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    uint64_t v4 = v2 + 32;
    do
    {
      sub_10001C20C(v4, (uint64_t)v7);
      uint64_t v6 = v8;
      uint64_t v5 = v9;
      sub_10001B620(v7, v8);
      (*(void (**)(uint64_t))(*(void *)(v5 + 8) + 8))(v6);
      sub_10001CA50((uint64_t)v7);
      if (v1) {
        break;
      }
      v4 += 40;
      --v3;
    }
    while (v3);
  }
  swift_bridgeObjectRelease();
}

uint64_t SQLiteSchema.columns.getter()
{
  dispatch thunk of static CaseIterable.allCases.getter();
  sub_10002572C(qword_100223A30);
  uint64_t v0 = _arrayForceCast<A, B>(_:)();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_10015FDC4()
{
  return SQLiteSchema.columns.getter();
}

void sub_10015FDD4()
{
}

uint64_t sub_10015FDF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_allocateGenericValueMetadata(a1, a2, a3, 32);
}

uint64_t type metadata accessor for SQLiteSchema()
{
  return swift_getGenericMetadata();
}

uint64_t SQLiteBaseVTab.init(style:)(char a1)
{
  *(void *)(v1 + 16) = 0;
  *(void *)(v1 + 24) = 0;
  *(unsigned char *)(v1 + 40) = a1;
  uint64_t v2 = swift_slowAlloc();
  *(void *)(v1 + 32) = v2;
  int v3 = (*(uint64_t (**)(void))(*(void *)v1 + 312))();
  uint64_t v4 = SQLiteBaseVTab.xCreate()();
  if (*(unsigned __int8 *)(v1 + 40) >= 2u) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = sub_100160F4C;
  }
  *(_DWORD *)uint64_t v2 = v3;
  *(void *)(v2 + 8) = v4;
  *(void *)(v2 + 16) = sub_100161B9C;
  *(void *)(v2 + 24) = sub_100160E80;
  *(void *)(v2 + 32) = sub_100160F4C;
  *(void *)(v2 + 40) = v5;
  *(void *)(v2 + 48) = sub_100160FF4;
  *(void *)(v2 + 56) = sub_100161098;
  *(void *)(v2 + 64) = sub_1001611A4;
  *(void *)(v2 + 72) = sub_100161264;
  *(void *)(v2 + 80) = sub_100161324;
  *(void *)(v2 + 88) = sub_100161404;
  *(void *)(v2 + 96) = sub_1001614D8;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 152) = 0u;
  *(_OWORD *)(v2 + 168) = 0u;
  *(void *)(v2 + 184) = 0;
  return v1;
}

uint64_t SQLiteBaseVTab.deinit()
{
  uint64_t v1 = v0;
  swift_slowDealloc();
  if (qword_100223328 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_10002A10C(v2, (uint64_t)qword_100236D18);
  swift_retain_n();
  int v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    sub_100017F00();
    if (*(void *)(v1 + 24))
    {
      uint64_t v6 = *(void *)(v1 + 16);
      unint64_t v7 = *(void *)(v1 + 24);
    }
    else
    {
      unint64_t v7 = 0x80000001001B9CD0;
      uint64_t v6 = 0xD000000000000010;
    }
    swift_bridgeObjectRetain();
    sub_10001C274(v6, v7, &v9);
    sub_100025898();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Destroying vtable module with name %s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t SQLiteBaseVTab.moduleName.getter()
{
  sub_100017F00();
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t (*SQLiteBaseVTab.xCreate()())(sqlite3 *, uint64_t, uint64_t, uint64_t, char **, uint64_t)
{
  uint64_t v1 = sub_100160D64;
  if (*(unsigned char *)(v0 + 40))
  {
    if (*(unsigned char *)(v0 + 40) == 1) {
      return sub_100161B9C;
    }
    else {
      return 0;
    }
  }
  return v1;
}

uint64_t (*SQLiteBaseVTab.xDestroy()())()
{
  if (*(unsigned __int8 *)(v0 + 40) >= 2u) {
    return 0;
  }
  else {
    return sub_100160F4C;
  }
}

uint64_t SQLiteBaseVTab.register(_:database:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  os_log_type_t v4 = v3;
  swift_beginAccess();
  v4[2] = a1;
  v4[3] = a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v8 = *(sqlite3 **)(a3 + 16);
  uint64_t v9 = (const sqlite3_module *)v4[4];
  uint64_t v10 = (const char *)(String.utf8CString.getter() + 32);
  swift_retain();
  LODWORD(v4) = sqlite3_create_module_v2(v8, v10, v9, v4, (void (__cdecl *)(void *))sub_100161528);
  uint64_t result = swift_release();
  if (v4)
  {
    sub_100122878();
    sub_100024A30();
    *(void *)uint64_t v12 = a1;
    *(void *)(v12 + 8) = a2;
    *(void *)(v12 + 16) = 0;
    *(unsigned char *)(v12 + 24) = 2;
    swift_bridgeObjectRetain();
    return swift_willThrow();
  }
  return result;
}

uint64_t SQLiteBaseVTab.connect(db:argc:argv:outVTab:outError:)(sqlite3 *a1, uint64_t a2, uint64_t a3, char **a4)
{
  uint64_t v8 = (char *)sqlite3_malloc(32);
  if (v8)
  {
    uint64_t v9 = v8;
    sub_100017E10();
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))((*(uint64_t (**)(void))(v10 + 320))() + 120);
    uint64_t v12 = swift_retain();
    uint64_t v13 = (void *)v11(v12, a2, a3);
    _StringGuts.grow(_:)(54);
    uint64_t __src = 0;
    unint64_t v25 = 0xE000000000000000;
    v14._unint64_t object = (void *)0x80000001001B9DE0;
    v14._uint64_t countAndFlagsBits = 0xD000000000000019;
    String.append(_:)(v14);
    uint64_t v15 = v13[2];
    uint64_t v16 = (void *)v13[3];
    swift_bridgeObjectRetain();
    v17._uint64_t countAndFlagsBits = v15;
    v17._unint64_t object = v16;
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    v18._uint64_t countAndFlagsBits = 0x20202020200A2820;
    v18._unint64_t object = (void *)0xEF20202020202020;
    String.append(_:)(v18);
    v19._uint64_t countAndFlagsBits = (*(uint64_t (**)(void))(*v13 + 152))();
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    v21._uint64_t countAndFlagsBits = 0x202020202020200ALL;
    v21._unint64_t object = (void *)0xEA00000000002920;
    String.append(_:)(v21);
    uint64_t v22 = String.utf8CString.getter();
    swift_bridgeObjectRelease();
    int v23 = sqlite3_declare_vtab(a1, (const char *)(v22 + 32));
    swift_release();
    if (!v23)
    {
      uint64_t __src = 0;
      LODWORD(v25) = 0;
      uint64_t v26 = 0;
      unint64_t v27 = v13;
      sub_100161560((char *)&__src, 1, v9);
      uint64_t result = 0;
      *a4 = v9;
      return result;
    }
    swift_release();
  }
  return 1;
}

uint64_t SQLiteBaseVTab.disconnect(_:)(void *a1)
{
  return 0;
}

uint64_t SQLiteBaseVTab.open(_:for:)(char **a1)
{
  uint64_t v2 = (char *)sqlite3_malloc(16);
  if (!v2) {
    return 1;
  }
  int v3 = v2;
  sub_100017E10();
  uint64_t v5 = *(uint64_t (**)(uint64_t))((*(uint64_t (**)(void))(v4 + 160))() + 144);
  uint64_t v6 = swift_retain();
  __src[0] = 0;
  __src[1] = v5(v6);
  sub_10016163C((char *)__src, 1, v3);
  uint64_t result = 0;
  *a1 = v3;
  return result;
}

uint64_t SQLiteBaseVTab.close(_:for:)(void *a1)
{
  if (a1[1]) {
    swift_release();
  }
  sqlite3_free(a1);
  return 0;
}

uint64_t SQLiteBaseVTab.filter(_:for:idxNum:idxStr:arguments:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!*(void *)(a1 + 8)) {
    return 1;
  }
  sub_100017E10();
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 152);
  swift_retain();
  uint64_t v10 = v9(a3, a4, a5);
  swift_release();
  return v10;
}

uint64_t SQLiteBaseVTab.next(_:for:)(uint64_t a1)
{
  if (!*(void *)(a1 + 8)) {
    return 1;
  }
  sub_100017E10();
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v1 + 160);
  uint64_t v3 = swift_retain();
  uint64_t v4 = v2(v3);
  swift_release();
  return v4;
}

BOOL SQLiteBaseVTab.eof(_:for:)(uint64_t a1)
{
  uint64_t v1 = 1;
  if (*(void *)(a1 + 8))
  {
    sub_100017E10();
    uint64_t v3 = *(uint64_t (**)(uint64_t))(v2 + 168);
    uint64_t v4 = swift_retain();
    LOBYTE(v3) = v3(v4);
    swift_release();
    return (v3 & 1) == 0;
  }
  return v1;
}

uint64_t SQLiteBaseVTab.column(_:for:context:columnIndex:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (!v4) {
    return 1;
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 144))(a4);
  uint64_t v8 = v7;
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 184);
  swift_retain();
  uint64_t v10 = v9(v6, v8, a3);
  swift_bridgeObjectRelease();
  swift_release();
  return v10;
}

uint64_t SQLiteBaseVTab.rowid(_:for:outRowid:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  if (!*(void *)(a1 + 8)) {
    return 1;
  }
  sub_100017E10();
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v4 + 176);
  uint64_t v6 = swift_retain();
  uint64_t v7 = v5(v6);
  swift_release();
  uint64_t result = 0;
  *a3 = v7;
  return result;
}

uint64_t SQLiteBaseVTab.Connection.init(_:argc:argv:)(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v6 - 8);
  swift_weakInit();
  if (a2 < 3)
  {
    sub_100122878();
    sub_100024A30();
    *(void *)uint64_t v7 = 0xD00000000000001CLL;
    uint64_t v8 = "Invalid number of parameters";
LABEL_8:
    unint64_t v11 = (unint64_t)(v8 - 32) | 0x8000000000000000;
    goto LABEL_9;
  }
  if (!*(void *)(a3 + 16))
  {
    sub_100122878();
    sub_100024A30();
    *(void *)uint64_t v7 = 0x7463657078656E55;
    unint64_t v11 = 0xEE006C696E206465;
LABEL_9:
    *(void *)(v7 + 8) = v11;
    *(void *)(v7 + 16) = 0;
    *(unsigned char *)(v7 + 24) = 3;
    swift_willThrow();
    swift_release();
    swift_weakDestroy();
    type metadata accessor for SQLiteBaseVTab.Connection();
    swift_deallocPartialClassInstance();
    return v3;
  }
  static String.Encoding.utf8.getter();
  uint64_t v9 = String.init(cString:encoding:)();
  if (!v10)
  {
    sub_100122878();
    sub_100024A30();
    *(void *)uint64_t v7 = 0xD000000000000014;
    uint64_t v8 = "Cannot create string";
    goto LABEL_8;
  }
  *(void *)(v3 + 16) = v9;
  *(void *)(v3 + 24) = v10;
  swift_beginAccess();
  swift_weakAssign();
  swift_release();
  return v3;
}

uint64_t SQLiteBaseVTab.Connection.table.getter()
{
  return swift_weakLoadStrong();
}

uint64_t SQLiteBaseVTab.Cursor.init(_:)()
{
  *(void *)(v0 + 16) = 0;
  swift_weakInit();
  swift_beginAccess();
  swift_weakAssign();
  swift_release();
  return v0;
}

uint64_t SQLiteBaseVTab.Cursor.connection.getter()
{
  return swift_weakLoadStrong();
}

uint64_t SQLiteBaseVTab.Cursor.filter(idxNum:idxStr:arguments:)()
{
  *(void *)(v0 + 16) = 0;
  return static AvroPrimitiveSchema.null.getter();
}

Swift::Int32 __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SQLiteBaseVTab.Cursor.next()()
{
  uint64_t v1 = *(void *)(v0 + 16);
  BOOL v2 = __OFADD__(v1, 1);
  uint64_t v3 = v1 + 1;
  if (v2)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v0 + 16) = v3;
    return static AvroPrimitiveSchema.null.getter();
  }
  return result;
}

Swift::Bool __swiftcall SQLiteBaseVTab.Cursor.hasMoreRows()()
{
  uint64_t v1 = *(void *)(v0 + 16);
  sub_100017E10();
  return v1 < (*(uint64_t (**)(void))(v2 + 192))();
}

uint64_t sub_100160CB8@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess();
  uint64_t v4 = *(void *)(v3 + 24);
  *a2 = *(void *)(v3 + 16);
  a2[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t sub_100160D04(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v4 = *a2;
  swift_beginAccess();
  *(void *)(v4 + 16) = v3;
  *(void *)(v4 + 24) = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100160D64(sqlite3 *a1, uint64_t a2, uint64_t a3, uint64_t a4, char **a5, uint64_t a6)
{
  return sub_100160D7C(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_100160D7C(sqlite3 *a1, uint64_t a2, uint64_t a3, uint64_t a4, char **a5, uint64_t a6)
{
  if (!a1 || !a2 || !a5 || !a4 || !a6) {
    return 1;
  }
  swift_retain();
  uint64_t v10 = SQLiteBaseVTab.connect(db:argc:argv:outVTab:outError:)(a1, a3, a4, a5);
  swift_release();
  return v10;
}

uint64_t sub_100160E04(uint64_t a1, uint64_t a2)
{
  if (!a1 || !a2) {
    return 1;
  }
  uint64_t v3 = *(uint64_t (**)(uint64_t))(**(void **)(a1 + 24) + 128);
  swift_retain();
  uint64_t v4 = v3(a2);
  swift_release();
  return v4;
}

uint64_t sub_100160E84(void **a1)
{
  if (!a1) {
    return 1;
  }
  uint64_t v2 = *(void (**)(uint64_t))(*a1[3] + 136);
  uint64_t v3 = swift_retain();
  v2(v3);
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    SQLiteBaseVTab.disconnect(_:)(a1);
    swift_release();
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v4 = 1;
  }
  swift_release();
  return v4;
}

uint64_t sub_100160F50(uint64_t a1, char **a2)
{
  uint64_t v2 = 1;
  if (a1 && a2)
  {
    swift_retain();
    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      uint64_t v2 = SQLiteBaseVTab.open(_:for:)(a2);
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      return 1;
    }
  }
  return v2;
}

uint64_t sub_100160FF8(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (void *)result;
    if (!*(void *)result)
    {
      __break(1u);
      return result;
    }
    swift_retain();
    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      SQLiteBaseVTab.close(_:for:)(v1);
      swift_release();
      swift_release();
      return 0;
    }
    swift_release();
  }
  return 1;
}

uint64_t sub_10016109C(void *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  if (!a1) {
    return 1;
  }
  uint64_t v9 = Array<A>.init(_:argc:)(a5, a4);
  if (*a1)
  {
    unint64_t v11 = (void *)result;
    swift_retain();
    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      uint64_t v8 = SQLiteBaseVTab.filter(_:for:idxNum:idxStr:arguments:)((uint64_t)a1, v12, a2, a3, v9);
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      uint64_t v8 = 1;
    }
    swift_bridgeObjectRelease();
    return v8;
  }
  __break(1u);
  return result;
}

uint64_t sub_1001611A8(void *a1)
{
  if (!a1) {
    return 1;
  }
  if (*a1)
  {
    uint64_t v3 = (void *)result;
    swift_retain();
    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      uint64_t v4 = SQLiteBaseVTab.next(_:for:)((uint64_t)a1);
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      uint64_t v4 = 1;
    }
    return v4;
  }
  __break(1u);
  return result;
}

uint64_t sub_100161268(void *a1)
{
  if (!a1) {
    return 1;
  }
  if (*a1)
  {
    uint64_t v3 = (void *)result;
    swift_retain();
    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      BOOL v4 = SQLiteBaseVTab.eof(_:for:)((uint64_t)a1);
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      BOOL v4 = 1;
    }
    return v4;
  }
  __break(1u);
  return result;
}

uint64_t sub_100161328(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a1 || !a2) {
    return 1;
  }
  if (*(void *)a1)
  {
    uint64_t v7 = (void *)result;
    uint64_t v8 = *(void *)(*(void *)a1 + 24);
    swift_retain();
    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      uint64_t v9 = SQLiteBaseVTab.column(_:for:context:columnIndex:)(a1, v8, a2, a3);
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      uint64_t v9 = 1;
    }
    return v9;
  }
  __break(1u);
  return result;
}

uint64_t sub_100161408(void *a1, uint64_t *a2)
{
  if (!a1 || !a2) {
    return 1;
  }
  if (*a1)
  {
    uint64_t v5 = (void *)result;
    swift_retain();
    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      uint64_t v7 = SQLiteBaseVTab.rowid(_:for:outRowid:)((uint64_t)a1, v6, a2);
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      uint64_t v7 = 1;
    }
    return v7;
  }
  __break(1u);
  return result;
}

uint64_t SQLiteBaseVTab.__allocating_init(style:)(char a1)
{
  uint64_t v2 = swift_allocObject();
  SQLiteBaseVTab.init(style:)(a1);
  return v2;
}

uint64_t sub_10016151C(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t SQLiteBaseVTab.__deallocating_deinit()
{
  SQLiteBaseVTab.deinit();

  return _swift_deallocClassInstance(v0, 41, 7);
}

void *sub_100161560(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0 || (&__dst[32 * a2] > __src ? (BOOL v3 = &__src[32 * a2] > __dst) : (BOOL v3 = 0), v3))
  {
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return memcpy(__dst, __src, 32 * a2);
  }
  return result;
}

void *sub_10016163C(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0 || (&__dst[16 * a2] > __src ? (BOOL v3 = &__src[16 * a2] > __dst) : (BOOL v3 = 0), v3))
  {
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return memcpy(__dst, __src, 16 * a2);
  }
  return result;
}

uint64_t SQLiteBaseVTab.Connection.tableName.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_10016174C@<X0>(uint64_t *a1@<X8>)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  *a1 = result;
  return result;
}

uint64_t sub_10016179C()
{
  return swift_weakAssign();
}

uint64_t SQLiteBaseVTab.Connection.__allocating_init(_:argc:argv:)(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject();
  SQLiteBaseVTab.Connection.init(_:argc:argv:)(a1, a2, a3);
  return v6;
}

uint64_t SQLiteBaseVTab.Connection.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_weakDestroy();

  return _swift_deallocClassInstance(v0, 40, 7);
}

uint64_t sub_10016189C@<X0>(uint64_t *a1@<X8>)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  *a1 = result;
  return result;
}

uint64_t sub_1001618EC()
{
  return swift_weakAssign();
}

uint64_t SQLiteBaseVTab.Cursor.__allocating_init(_:)()
{
  uint64_t v0 = swift_allocObject();
  SQLiteBaseVTab.Cursor.init(_:)();
  return v0;
}

uint64_t sub_10016198C()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t type metadata accessor for SQLiteBaseVTab.Connection()
{
  return self;
}

unint64_t sub_1001619EC()
{
  unint64_t result = qword_100223AB8;
  if (!qword_100223AB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100223AB8);
  }
  return result;
}

uint64_t type metadata accessor for SQLiteBaseVTab()
{
  return self;
}

unsigned char *storeEnumTagSinglePayload for SQLiteBaseVTab.Style(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100161B40);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SQLiteBaseVTab.Style()
{
  return &type metadata for SQLiteBaseVTab.Style;
}

uint64_t type metadata accessor for SQLiteBaseVTab.Cursor()
{
  return self;
}

uint64_t SQLiteColumnDescribing<>.init(index:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  dispatch thunk of static CaseIterable.allCases.getter();
  if (Array.count.getter() <= a1)
  {
    uint64_t v6 = 1;
  }
  else
  {
    Array.subscript.getter();
    uint64_t v6 = 0;
  }
  swift_bridgeObjectRelease();
  return sub_10002538C(a3, v6, 1, a2);
}

uint64_t SQLiteColumnDescribing.nullable.getter(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(a2 + 24))();
  return (*(uint64_t (**)(void))(v2 + 32))() & 1;
}

BOOL SQLiteColumnDescribing.isValid(_:)(void *a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(uint64_t, uint64_t))(a3 + 24))(a2, a3);
  sub_100025E7C();
  char v7 = v6();
  uint64_t v8 = 1;
  char v9 = 1;
  char v10 = 0;
  BOOL v11 = 0;
  char v12 = 0;
  switch(v7)
  {
    case 1:
      char v10 = 0;
      char v9 = 0;
      char v12 = 0;
      BOOL v11 = 1;
      uint64_t v8 = 2;
      goto LABEL_5;
    case 2:
    case 3:
    case 4:
    case 5:
    case 9:
      char v10 = 0;
      BOOL v11 = 0;
      char v9 = 0;
      uint64_t v8 = 0;
      char v12 = 1;
      goto LABEL_5;
    case 6:
    case 7:
    case 8:
      BOOL v11 = 0;
      char v9 = 0;
      char v12 = 0;
      char v10 = 1;
      uint64_t v8 = 3;
      goto LABEL_5;
    case 10:
LABEL_15:
      sub_100122878();
      swift_allocError();
      *(void *)uint64_t v19 = 0xD00000000000003ELL;
      *(void *)(v19 + 8) = 0x80000001001B98E0;
      *(void *)(v19 + 16) = 0;
      *(unsigned char *)(v19 + 24) = 3;
      swift_willThrow();
      return v11;
    default:
LABEL_5:
      char v20 = v12;
      char v21 = v9;
      uint64_t v13 = a1[3];
      uint64_t v14 = a1[4];
      sub_10001B620(a1, v13);
      char v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 40))(v13, v14);
      if (!v3)
      {
        int v16 = 1;
        switch(v15)
        {
          case 1:
            int v16 = 3;
            goto LABEL_10;
          case 2:
            int v16 = 4;
            goto LABEL_10;
          case 3:
            int v16 = 2;
            goto LABEL_10;
          case 4:
            if (SQLiteColumnDescribing.nullable.getter(a2, a3))
            {
              sub_10001B620(a1, a1[3]);
              swift_getDynamicType();
              sub_100025E7C();
              switch(v18())
              {
                case 1u:
                  return v11;
                case 2u:
                case 3u:
                case 4u:
                case 5u:
                case 9u:
                  BOOL v11 = v20;
                  break;
                case 6u:
                case 7u:
                case 8u:
                  BOOL v11 = v10;
                  break;
                case 0xAu:
                  goto LABEL_15;
                default:
                  BOOL v11 = v21;
                  break;
              }
            }
            else
            {
              return 0;
            }
            return v11;
          default:
LABEL_10:
            BOOL v11 = v16 == dword_1001AC9E0[v8];
            break;
        }
      }
      return v11;
  }
}

BOOL static SQLiteColumnDescribing.== infix(_:_:)(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  sub_100026808();
  uint64_t v8 = v7;
  __chkstk_darwin(v9);
  v37[2] = (char *)v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v12 = __chkstk_darwin(v11);
  uint64_t v14 = (char *)v37 - v13;
  int v16 = (void (*)(uint64_t))(v15 + 32);
  Swift::String v17 = *(uint64_t (**)(uint64_t, uint64_t, double))(v15 + 32);
  v37[1] = v18;
  uint64_t v20 = v17(v19, v15, v12);
  uint64_t v22 = v21;
  v37[3] = a2;
  uint64_t v23 = sub_100024DE4();
  if (v20 == ((uint64_t (*)(uint64_t))v17)(v23) && v22 == v24)
  {
    swift_bridgeObjectRelease_n();
    uint64_t v30 = sub_10002C760();
    v16(v30);
    uint64_t v31 = sub_10002A848();
    v16(v31);
  }
  else
  {
    char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v27 = sub_10002C760();
    v16(v27);
    uint64_t v28 = sub_10002A848();
    v16(v28);
    BOOL v29 = 0;
    if ((v26 & 1) == 0) {
      goto LABEL_9;
    }
  }
  uint64_t v32 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 24);
  uint64_t v33 = v32(a3, a4);
  uint64_t v34 = sub_100024DE4();
  BOOL v29 = v33 == ((uint64_t (*)(uint64_t))v32)(v34);
LABEL_9:
  uint64_t v35 = *(void (**)(char *, uint64_t))(v8 + 8);
  v35(a2, a3);
  v35(v14, a3);
  return v29;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SQLiteColumnDescribing.ensureValidSQLNameCharacters()()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = type metadata accessor for CharacterSet();
  sub_100026808();
  uint64_t v6 = v5;
  double v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15[0] = (*(uint64_t (**)(uint64_t, uint64_t, double))(v2 + 32))(v3, v2, v8);
  v15[1] = v11;
  if (qword_100223320 != -1) {
    swift_once();
  }
  sub_10002A10C(v4, (uint64_t)qword_100236D00);
  CharacterSet.inverted.getter();
  sub_100021100();
  StringProtocol.rangeOfCharacter(from:options:range:)();
  char v13 = v12;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v10, v4);
  if ((v13 & 1) == 0)
  {
    sub_100122878();
    swift_allocError();
    *(void *)(v14 + 8) = 0;
    *(void *)(v14 + 16) = 0;
    *(void *)uint64_t v14 = 10;
    *(unsigned char *)(v14 + 24) = 4;
    swift_willThrow();
  }
  swift_bridgeObjectRelease();
}

uint64_t SQLiteColumnDescribing<>.columnName.getter()
{
  dispatch thunk of RawRepresentable.rawValue.getter();
  return v1;
}

uint64_t SQLiteColumnDescribing<>.getColumnIndex()()
{
  dispatch thunk of static CaseIterable.allCases.getter();
  type metadata accessor for Array();
  swift_getWitnessTable();
  Collection<>.firstIndex(of:)();
  swift_bridgeObjectRelease();
  if (v3)
  {
    dispatch thunk of RawRepresentable.rawValue.getter();
    sub_100122878();
    swift_allocError();
    *(void *)uint64_t v0 = v2;
    *(void *)(v0 + 8) = v3;
    *(void *)(v0 + 16) = 0;
    *(unsigned char *)(v0 + 24) = 1;
    return swift_willThrow();
  }
  uint64_t result = v2;
  if (v2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (v2 > 0x7FFFFFFF) {
LABEL_7:
  }
    __break(1u);
  return result;
}

void Bool.bind(to:at:)(uint64_t a1, int a2, char a3)
{
  sub_10015C798();
  if (!v3)
  {
    sub_10000E218();
    if (v6 != v7)
    {
      __break(1u);
LABEL_9:
      __break(1u);
      return;
    }
    sub_1000214FC();
    if (!(v6 ^ v7 | v9)) {
      goto LABEL_9;
    }
    unsigned int v10 = sqlite3_bind_int(v8, a2, a3 & 1);
    if (v10)
    {
      uint64_t v11 = v10;
      sub_100122878();
      sub_100024A30();
      void *v12 = v11;
      v12[1] = 0xD000000000000012;
      sub_1000276C4((uint64_t)v12, (uint64_t)"Failed to bind Int");
    }
  }
}

void sub_1001624DC(uint64_t a1, int a2)
{
  Bool.bind(to:at:)(a1, a2, *v2);
}

void Float.bind(to:at:)(float a1, uint64_t a2, int a3)
{
  sub_10015C798();
  if (!v3)
  {
    sub_10000E218();
    if (v6 != v7)
    {
      __break(1u);
LABEL_9:
      __break(1u);
      return;
    }
    sub_1000214FC();
    if (!(v6 ^ v7 | v9)) {
      goto LABEL_9;
    }
    if (sqlite3_bind_double(v8, a3, a1))
    {
      sub_100122878();
      uint64_t v10 = sub_100024A30();
      sub_100024DF8(v10, v11);
      sub_1000276C4(v12, (uint64_t)"Failed to bind Double");
    }
  }
}

void sub_100162590(uint64_t a1, int a2)
{
  Float.bind(to:at:)(*v2, a1, a2);
}

void Double.bind(to:at:)(double a1, uint64_t a2, int a3)
{
  sub_10015C798();
  if (!v3)
  {
    sub_10000E218();
    if (v6 != v7)
    {
      __break(1u);
LABEL_9:
      __break(1u);
      return;
    }
    sub_1000214FC();
    if (!(v6 ^ v7 | v9)) {
      goto LABEL_9;
    }
    if (sqlite3_bind_double(v8, a3, a1))
    {
      sub_100122878();
      uint64_t v10 = sub_100024A30();
      sub_100024DF8(v10, v11);
      sub_1000276C4(v12, (uint64_t)"Failed to bind Double");
    }
  }
}

void sub_100162644(uint64_t a1, int a2)
{
  Double.bind(to:at:)(*v2, a1, a2);
}

void String.bind(to:at:)()
{
  sub_100017EC4();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  int v7 = v6;
  char v9 = v8;
  uint64_t v10 = type metadata accessor for String.Encoding();
  sub_100026808();
  uint64_t v12 = v11;
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *v9;
  sub_10015C798();
  if (v0) {
    goto LABEL_11;
  }
  sub_10000E218();
  if (v17 != v18)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  sub_1000214FC();
  if (!(v17 ^ v18 | v20)) {
    goto LABEL_13;
  }
  uint64_t v1 = v19;
  v26[0] = v5;
  v26[1] = v3;
  static String.Encoding.utf8.getter();
  sub_100021100();
  uint64_t v16 = StringProtocol.cString(using:)();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v10);
  if (qword_100223318 != -1) {
LABEL_14:
  }
    swift_once();
  if (v16) {
    uint64_t v21 = (const char *)(v16 + 32);
  }
  else {
    uint64_t v21 = 0;
  }
  int v22 = sqlite3_bind_text(v1, v7, v21, -1, (void (__cdecl *)(void *))qword_100236CF8);
  swift_bridgeObjectRelease();
  if (v22)
  {
    sub_100122878();
    uint64_t v23 = sub_100024A30();
    sub_100024DF8(v23, v24);
    sub_1000276C4(v25, (uint64_t)"Failed to bind String");
  }
LABEL_11:
  sub_100024A18();
}

void sub_100162800()
{
}

uint64_t Data.bind(to:at:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  long long v23 = *(_OWORD *)(a1 + 8);
  swift_retain();
  sub_10015DCE0((uint64_t)&v23);
  swift_retain();
  sub_10015DCE0((uint64_t)&v23);
  switch(a4 >> 62)
  {
    case 1uLL:
      sub_100025E94();
      sub_100025E94();
      if (a3 >> 32 < (int)a3)
      {
        __break(1u);
        JUMPOUT(0x100162A98);
      }
      sub_100025E94();
      sub_10015DCE0((uint64_t)&v23);
      swift_retain();
      sub_10015DCE0((uint64_t)&v23);
      sub_100025E94();
      swift_retain();
      sub_100025E94();
      sub_100163118((int)a3, a3 >> 32, a4 & 0x3FFFFFFFFFFFFFFFLL, (sqlite3_stmt **)a1, a2, a3, a4);
      goto LABEL_6;
    case 2uLL:
      sub_100025E94();
      sub_100025E94();
      sub_10015DCE0((uint64_t)&v23);
      sub_100025E94();
      swift_retain();
      sub_10015DCE0((uint64_t)&v23);
      sub_100025E94();
      swift_retain();
      sub_100025E94();
      swift_retain();
      swift_retain();
      sub_1000180CC();
      sub_100163118(v15, v16, v17, v18, v19, v20, v21);
      swift_release();
      swift_release();
LABEL_6:
      sub_1000276E8();
      break;
    case 3uLL:
      sub_10015DCE0((uint64_t)&v23);
      swift_retain();
      sub_10015DCE0((uint64_t)&v23);
      swift_retain();
      sub_100025E94();
      sub_100163220(0, 0, 0, a1, a2, a3, a4);
      sub_1000276E8();
      break;
    default:
      sub_10015DCE0((uint64_t)&v23);
      swift_retain();
      sub_10015DCE0((uint64_t)&v23);
      swift_retain();
      sub_100025E94();
      sub_1000180CC();
      sub_100163220(v8, v9, v10, v11, v12, v13, v14);
      sub_1000276E8();
      break;
  }
  swift_release();
  sub_100057E18((uint64_t)&v23);
  sub_1000276E8();
  swift_release();
  sub_100057E18((uint64_t)&v23);
  sub_1000276E8();
  swift_release();
  sub_100057E18((uint64_t)&v23);
  return sub_1000276E8();
}

uint64_t sub_100162AA8(const void *a1, uint64_t a2, sqlite3_stmt **a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v10 = *a3;
  uint64_t result = sub_10015C798();
  if (!v6)
  {
    if (a4 < (uint64_t)0xFFFFFFFF80000000)
    {
      __break(1u);
    }
    else if (a4 <= 0x7FFFFFFF)
    {
      uint64_t v10 = (sqlite3_stmt *)result;
      uint64_t v12 = Data.count.getter();
      if (v12 >= (uint64_t)0xFFFFFFFF80000000)
      {
        a6 = v12;
        if (v12 <= 0x7FFFFFFF)
        {
          if (qword_100223318 == -1) {
            goto LABEL_7;
          }
          goto LABEL_14;
        }
LABEL_13:
        __break(1u);
LABEL_14:
        swift_once();
LABEL_7:
        uint64_t result = sqlite3_bind_blob(v10, a4, a1, a6, (void (__cdecl *)(void *))qword_100236CF8);
        if (result)
        {
          uint64_t v13 = result;
          sub_100122878();
          swift_allocError();
          *(void *)uint64_t v14 = v13;
          *(void *)(v14 + 8) = 0xD000000000000013;
          *(void *)(v14 + 16) = 0x80000001001B9E40;
          *(unsigned char *)(v14 + 24) = 0;
          return swift_willThrow();
        }
        return result;
      }
LABEL_12:
      __break(1u);
      goto LABEL_13;
    }
    __break(1u);
    goto LABEL_12;
  }
  return result;
}

uint64_t sub_100162BEC(uint64_t a1, uint64_t a2)
{
  return Data.bind(to:at:)(a1, a2, *(void *)v2, *(void *)(v2 + 8));
}

void Array<A>.bind(to:at:)()
{
  sub_100017EC4();
  uint64_t v18 = v1;
  uint64_t v3 = v2;
  uint64_t v16 = v4;
  uint64_t v17 = v5;
  sub_100026808();
  uint64_t v7 = v6;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = Array.count.getter();
  if ((v11 & 0x8000000000000000) == 0)
  {
    uint64_t v12 = v11;
    if (!v11)
    {
LABEL_8:
      sub_100024A18();
      return;
    }
    uint64_t v13 = 0;
    uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 8);
    uint64_t v15 = (void (**)(char *, uint64_t))(v7 + 8);
    while (v12 != v13)
    {
      Array.subscript.getter();
      if (__OFADD__(v13, v17)) {
        goto LABEL_10;
      }
      v14(v16, v13 + v17, v3, v18);
      (*v15)(v10, v3);
      if (!v0 && v12 != ++v13) {
        continue;
      }
      goto LABEL_8;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  __break(1u);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  sub_100017EC4();
  uint64_t v11 = v3;
  uint64_t v4 = *(void *)(v2 + 16);
  if (v4)
  {
    uint64_t v5 = v1;
    uint64_t v6 = 0;
    uint64_t v7 = (void *)(v2 + 32);
    while (v4 != v6)
    {
      uint64_t v8 = v7[3];
      uint64_t v9 = v7[4];
      sub_10001B620(v7, v8);
      if (__OFADD__(v6, v11)) {
        goto LABEL_10;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 8))(v5, v6 + v11, v8, v9);
      if (!v0)
      {
        v7 += 5;
        if (v4 - 1 != v6++) {
          continue;
        }
      }
      goto LABEL_8;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
LABEL_8:
    sub_100024A18();
  }
}

void sub_100162D40()
{
}

void Optional<A>.bind(to:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_100017EC4();
  a19 = v21;
  a20 = v22;
  a10 = v20;
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  uint64_t v30 = v29;
  sub_100026B00();
  uint64_t v32 = v31;
  __chkstk_darwin(v33);
  uint64_t v35 = (char *)&a9 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = *(void *)(v36 + 16);
  sub_100026B00();
  uint64_t v39 = v38;
  double v41 = __chkstk_darwin(v40);
  Swift::String v43 = (char *)&a9 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, double))(v32 + 16))(v35, v44, v41);
  if (sub_100027BA4((uint64_t)v35, 1, v37) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v43, v35, v37);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 8))(v30, v28, v37, v24);
    (*(void (**)(char *, uint64_t))(v39 + 8))(v43, v37);
    goto LABEL_8;
  }
  (*(void (**)(char *, uint64_t))(v32 + 8))(v35, v26);
  uint64_t v45 = a10;
  sub_10015C798();
  if (v45)
  {
LABEL_8:
    sub_100024A18();
    return;
  }
  sub_10000E218();
  if (v46 == v47)
  {
    sub_1000214FC();
    if (!(v46 ^ v47 | v49)) {
      goto LABEL_10;
    }
    sqlite3_bind_null(v48, v28);
    goto LABEL_8;
  }
  __break(1u);
LABEL_10:
  __break(1u);
}

#error "100163004: call analysis failed (funcsize=7)"

void RawRepresentable<>.bind(to:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_100017EC4();
  a19 = v21;
  a20 = v22;
  a10 = v20;
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  sub_100026808();
  uint64_t v31 = v30;
  __chkstk_darwin(v32);
  uint64_t v34 = (char *)&a9 - v33;
  dispatch thunk of RawRepresentable.rawValue.getter();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 8))(v28, v26, AssociatedTypeWitness, v24);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v34, AssociatedTypeWitness);
  sub_100024A18();
}

uint64_t sub_100163118(uint64_t a1, uint64_t a2, uint64_t a3, sqlite3_stmt **a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v14 = (char *)result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_16:
      __break(1u);
      return result;
    }
    v14 += a1 - result;
  }
  BOOL v15 = __OFSUB__(a2, a1);
  uint64_t v16 = a2 - a1;
  if (v15)
  {
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v17 = __DataStorage._length.getter();
  if (v17 >= v16) {
    uint64_t v18 = v16;
  }
  else {
    uint64_t v18 = v17;
  }
  uint64_t v19 = &v14[v18];
  if (v14) {
    uint64_t v20 = (uint64_t)v19;
  }
  else {
    uint64_t v20 = 0;
  }
  sub_100162AA8(v14, v20, a4, a5, a6, a7);
  uint64_t v21 = (long long *)(a4 + 1);
  swift_release();
  if (v25)
  {
    long long v24 = *v21;
    uint64_t v22 = &v24;
  }
  else
  {
    long long v23 = *v21;
    uint64_t v22 = &v23;
  }
  sub_100057E18((uint64_t)v22);
  return sub_1000291B4(a6, a7);
}

uint64_t sub_100163220(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  long long v19 = *(_OWORD *)(a4 + 8);
  uint64_t v13 = a1;
  __int16 v14 = a2;
  char v15 = BYTE2(a2);
  char v16 = BYTE3(a2);
  char v17 = BYTE4(a2);
  char v18 = BYTE5(a2);
  uint64_t v11 = (char *)&v13 + a3;
  swift_retain();
  sub_10015DCE0((uint64_t)&v19);
  sub_100162AA8(&v13, (uint64_t)v11, (sqlite3_stmt **)a4, a5, a6, a7);
  swift_release();
  sub_100057E18((uint64_t)&v19);
  swift_release();
  sub_100057E18((uint64_t)&v19);
  return sub_1000291B4(a6, a7);
}

uint64_t sub_100163384(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x8000000000000000) == 0)
  {
    unint64_t v3 = AvroValue.schema.getter();
    char v4 = _s9SwiftAvro0B6SchemaV23__derived_struct_equalsySbAC_ACtFZ_0(a2, v3);
LABEL_3:
    swift_release();
    return v4 & 1;
  }
  uint64_t v6 = *(void *)((a2 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
  unint64_t v7 = AvroValue.schema.getter();
  char v8 = _s9SwiftAvro0B6SchemaV23__derived_struct_equalsySbAC_ACtFZ_0(a2, v7);
  swift_release();
  if (v8)
  {
    char v4 = 1;
    return v4 & 1;
  }
  swift_bridgeObjectRetain();
  unint64_t v9 = AvroValue.schema.getter();
  uint64_t v10 = *(void *)(v6 + 16);
  if (!v10)
  {
    swift_bridgeObjectRelease();
LABEL_17:
    char v4 = 0;
    goto LABEL_3;
  }
  unint64_t v11 = *(void *)(v6 + 32);
  swift_retain();
  swift_bridgeObjectRetain();
  LOBYTE(v11) = _s9SwiftAvro0B6SchemaV23__derived_struct_equalsySbAC_ACtFZ_0(v11, v9);
  uint64_t result = swift_release();
  if (v11)
  {
LABEL_9:
    swift_bridgeObjectRelease_n();
    char v4 = 1;
    goto LABEL_3;
  }
  if (v10 == 1)
  {
LABEL_16:
    swift_bridgeObjectRelease_n();
    goto LABEL_17;
  }
  uint64_t v12 = 5;
  while (1)
  {
    uint64_t v13 = v12 - 3;
    if (__OFADD__(v12 - 4, 1)) {
      break;
    }
    unint64_t v14 = *(void *)(v6 + 8 * v12);
    swift_retain();
    LOBYTE(v14) = _s9SwiftAvro0B6SchemaV23__derived_struct_equalsySbAC_ACtFZ_0(v14, v9);
    uint64_t result = swift_release();
    if (v14) {
      goto LABEL_9;
    }
    ++v12;
    if (v13 == v10) {
      goto LABEL_16;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1001634F4@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v5 = a1 >> 61;
  switch(a1 >> 61)
  {
    case 1uLL:
      sub_10016B1D8();
      swift_bridgeObjectRetain();
      Swift::String_optional v7 = (Swift::String_optional)0;
      uint64_t result = (uint64_t)_swiftEmptyArrayStorage;
      goto LABEL_6;
    case 2uLL:
      sub_10016B1D8();
      swift_bridgeObjectRetain();
      uint64_t result = Dictionary.init(dictionaryLiteral:)();
      Swift::String_optional v7 = (Swift::String_optional)0;
LABEL_6:
      long long v9 = 0uLL;
      break;
    case 3uLL:
      Swift::String v10 = *(Swift::String *)((a1 & 0x1FFFFFFFFFFFFFFFLL) + 0x20);
      schema.Swift::String type = *(Swift::String *)((a1 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
      schema.Swift::String name = v10;
      schema.namespace = *(Swift::String_optional *)((a1 & 0x1FFFFFFFFFFFFFFFLL) + 0x30);
      schema.fields._uint64_t rawValue = *(void **)((a1 & 0x1FFFFFFFFFFFFFFFLL) + 0x40);
      sub_100093F9C((uint64_t)&schema);
      AvroRecord.init(schema:)(&v19, &schema);
      uint64_t countAndFlagsBits = v19.schema.type._countAndFlagsBits;
      unint64_t object = (unint64_t)v19.schema.type._object;
      uint64_t v4 = v19.schema.name._countAndFlagsBits;
      uint64_t result = (uint64_t)v19.schema.name._object;
      Swift::String_optional v7 = v19.schema.namespace;
      long long v9 = *(_OWORD *)&v19.schema.fields._rawValue;
      break;
    case 4uLL:
      uint64_t v11 = *(void *)((a1 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
      if (!*(void *)(v11 + 16))
      {
        __break(1u);
        JUMPOUT(0x10016376CLL);
      }
      uint64_t v12 = *(void *)(v11 + 32);
      swift_retain();
      swift_bridgeObjectRetain();
      sub_1001634F4(&v19, v12);
      Swift::String name = v19.schema.name;
      Swift::String type = v19.schema.type;
      Swift::String_optional v16 = v19.schema.namespace;
      uint64_t rawValue = v19.schema.fields._rawValue;
      unint64_t v14 = v19.fields._rawValue;
      char v15 = v20;
      swift_release();
      uint64_t countAndFlagsBits = swift_allocObject();
      unint64_t object = 0;
      uint64_t v4 = 0;
      uint64_t result = 0;
      *(void *)(countAndFlagsBits + 16) = v11;
      *(Swift::String *)(countAndFlagsBits + 24) = type;
      *(Swift::String *)(countAndFlagsBits + 40) = name;
      *(Swift::String_optional *)(countAndFlagsBits + 56) = v16;
      *(void *)(countAndFlagsBits + 72) = rawValue;
      *(void *)(countAndFlagsBits + 80) = v14;
      *(unsigned char *)(countAndFlagsBits + 88) = v15;
      Swift::String_optional v7 = (Swift::String_optional)0;
      long long v9 = 0uLL;
      *(void *)(countAndFlagsBits + 96) = 0;
      break;
    default:
      uint64_t v4 = *(unsigned __int8 *)(a1 + 16);
      Swift::String_optional v7 = (Swift::String_optional)0;
      uint64_t result = 7;
      uint64_t countAndFlagsBits = v4;
      unint64_t object = v4;
      long long v9 = 0uLL;
      switch(v4)
      {
        case 1:
          unint64_t object = 0;
          uint64_t v4 = 0;
          uint64_t result = 0;
          uint64_t countAndFlagsBits = 1;
          break;
        case 2:
          sub_10001864C();
          uint64_t result = 1;
          break;
        case 3:
          sub_10001864C();
          uint64_t result = 2;
          break;
        case 4:
          sub_10001864C();
          uint64_t result = 3;
          break;
        case 5:
          sub_10001864C();
          uint64_t result = 4;
          break;
        case 6:
          uint64_t countAndFlagsBits = 0;
          uint64_t v4 = 0;
          unint64_t object = 0xE000000000000000;
          uint64_t result = 5;
          break;
        case 7:
          unint64_t object = 0;
          uint64_t v4 = 0;
          uint64_t countAndFlagsBits = (uint64_t)_swiftEmptyArrayStorage;
          uint64_t result = 6;
          break;
        default:
          goto LABEL_10;
      }
      break;
  }
LABEL_10:
  *(void *)a2 = countAndFlagsBits;
  *(void *)(a2 + 8) = object;
  *(void *)(a2 + 16) = v4;
  *(void *)(a2 + 24) = result;
  *(Swift::String_optional *)(a2 + 32) = v7;
  *(_OWORD *)(a2 + 48) = v9;
  *(unsigned char *)(a2 + 64) = v5;
  return result;
}

uint64_t sub_1001637A0()
{
  uint64_t result = sub_10000E248();
  *(unsigned char *)(result + 16) = 0;
  static AvroSchema.null = result;
  return result;
}

void *AvroPrimitiveSchema.null.unsafeMutableAddressor()
{
  return &static AvroPrimitiveSchema.null;
}

uint64_t *AvroSchema.null.unsafeMutableAddressor()
{
  if (qword_100223E48 != -1) {
    swift_once();
  }
  return &static AvroSchema.null;
}

uint64_t static AvroSchema.null.getter()
{
  return sub_100163D3C(&qword_100223E48, &static AvroSchema.null);
}

uint64_t sub_100163848()
{
  uint64_t result = swift_allocObject();
  *(unsigned char *)(result + 16) = 1;
  static AvroSchema.BOOLean = result;
  return result;
}

void *AvroPrimitiveSchema.BOOLean.unsafeMutableAddressor()
{
  return &static AvroPrimitiveSchema.BOOLean;
}

uint64_t *AvroSchema.BOOLean.unsafeMutableAddressor()
{
  if (qword_100223E50 != -1) {
    swift_once();
  }
  return &static AvroSchema.BOOLean;
}

uint64_t static AvroSchema.BOOLean.getter()
{
  return sub_100163D3C(&qword_100223E50, &static AvroSchema.BOOLean);
}

uint64_t sub_1001638FC()
{
  uint64_t result = swift_allocObject();
  *(unsigned char *)(result + 16) = 2;
  static AvroSchema.int = result;
  return result;
}

void *AvroPrimitiveSchema.int.unsafeMutableAddressor()
{
  return &static AvroPrimitiveSchema.int;
}

uint64_t *AvroSchema.int.unsafeMutableAddressor()
{
  if (qword_100223E58 != -1) {
    swift_once();
  }
  return &static AvroSchema.int;
}

uint64_t static AvroSchema.int.getter()
{
  return sub_100163D3C(&qword_100223E58, &static AvroSchema.int);
}

uint64_t sub_1001639B0()
{
  uint64_t result = swift_allocObject();
  *(unsigned char *)(result + 16) = 3;
  static AvroSchema.long = result;
  return result;
}

void *AvroPrimitiveSchema.long.unsafeMutableAddressor()
{
  return &static AvroPrimitiveSchema.long;
}

uint64_t *AvroSchema.long.unsafeMutableAddressor()
{
  if (qword_100223E60 != -1) {
    swift_once();
  }
  return &static AvroSchema.long;
}

uint64_t static AvroSchema.long.getter()
{
  return sub_100163D3C(&qword_100223E60, &static AvroSchema.long);
}

uint64_t sub_100163A64()
{
  uint64_t result = swift_allocObject();
  *(unsigned char *)(result + 16) = 4;
  static AvroSchema.float = result;
  return result;
}

void *AvroPrimitiveSchema.float.unsafeMutableAddressor()
{
  return &static AvroPrimitiveSchema.float;
}

uint64_t *AvroSchema.float.unsafeMutableAddressor()
{
  if (qword_100223E68 != -1) {
    swift_once();
  }
  return &static AvroSchema.float;
}

uint64_t static AvroSchema.float.getter()
{
  return sub_100163D3C(&qword_100223E68, &static AvroSchema.float);
}

uint64_t sub_100163B18()
{
  uint64_t result = swift_allocObject();
  *(unsigned char *)(result + 16) = 5;
  static AvroSchema.double = result;
  return result;
}

void *AvroPrimitiveSchema.double.unsafeMutableAddressor()
{
  return &static AvroPrimitiveSchema.double;
}

uint64_t *AvroSchema.double.unsafeMutableAddressor()
{
  if (qword_100223E70 != -1) {
    swift_once();
  }
  return &static AvroSchema.double;
}

uint64_t static AvroSchema.double.getter()
{
  return sub_100163D3C(&qword_100223E70, &static AvroSchema.double);
}

uint64_t sub_100163BCC()
{
  uint64_t result = swift_allocObject();
  *(unsigned char *)(result + 16) = 6;
  static AvroSchema.string = result;
  return result;
}

void *AvroPrimitiveSchema.string.unsafeMutableAddressor()
{
  return &static AvroPrimitiveSchema.string;
}

uint64_t *AvroSchema.string.unsafeMutableAddressor()
{
  if (qword_100223E78 != -1) {
    swift_once();
  }
  return &static AvroSchema.string;
}

uint64_t static AvroSchema.string.getter()
{
  return sub_100163D3C(&qword_100223E78, &static AvroSchema.string);
}

uint64_t sub_100163C80()
{
  uint64_t result = swift_allocObject();
  *(unsigned char *)(result + 16) = 7;
  static AvroSchema.bytes = result;
  return result;
}

void *AvroPrimitiveSchema.bytes.unsafeMutableAddressor()
{
  return &static AvroPrimitiveSchema.bytes;
}

uint64_t *AvroSchema.bytes.unsafeMutableAddressor()
{
  if (qword_100223E80 != -1) {
    swift_once();
  }
  return &static AvroSchema.bytes;
}

uint64_t static AvroSchema.bytes.getter()
{
  return sub_100163D3C(&qword_100223E80, &static AvroSchema.bytes);
}

uint64_t sub_100163D3C(void *a1, uint64_t *a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v3 = *a2;
  swift_retain();
  return v3;
}

uint64_t static AvroSchema.array(itemSchema:)(uint64_t a1)
{
  uint64_t v2 = sub_10001AAD0();
  *(void *)(v2 + 16) = 0x7961727261;
  *(void *)(v2 + 24) = 0xE500000000000000;
  *(void *)(v2 + 32) = a1;
  uint64_t v3 = v2 | 0x2000000000000000;
  swift_retain();
  return v3;
}

uint64_t AvroArraySchema.init(items:)()
{
  return 0x7961727261;
}

uint64_t static AvroSchema.array(schema:)()
{
  sub_10001DEF4();
  uint64_t v3 = sub_10001AAD0();
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  *(void *)(v3 + 32) = v0;
  uint64_t v4 = v3 | 0x2000000000000000;
  swift_retain();
  swift_bridgeObjectRetain();
  return v4;
}

uint64_t static AvroSchema.map(valueSchema:)(uint64_t a1)
{
  uint64_t v2 = sub_10001AAD0();
  *(void *)(v2 + 16) = 7364973;
  *(void *)(v2 + 24) = 0xE300000000000000;
  *(void *)(v2 + 32) = a1;
  uint64_t v3 = v2 | 0x4000000000000000;
  swift_retain();
  return v3;
}

uint64_t AvroMapSchema.init(values:)()
{
  return 7364973;
}

uint64_t static AvroSchema.map(schema:)()
{
  sub_10001DEF4();
  uint64_t v3 = sub_10001AAD0();
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  *(void *)(v3 + 32) = v0;
  uint64_t v4 = v3 | 0x4000000000000000;
  swift_retain();
  swift_bridgeObjectRetain();
  return v4;
}

uint64_t static AvroSchema.record(name:fields:)()
{
  sub_10001DEF4();
  uint64_t v3 = swift_allocObject();
  uint64_t v4 = sub_100020D7C(v3);
  *(void *)(v4 + 32) = v2;
  *(void *)(v4 + 40) = v1;
  *(void *)(v4 + 48) = 0;
  *(void *)(v4 + 56) = 0;
  uint64_t v5 = v4 | 0x6000000000000000;
  *(void *)(v4 + 64) = v0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v5;
}

void __swiftcall AvroRecordSchema.init(name:fields:)(SwiftAvro::AvroRecordSchema *__return_ptr retstr, Swift::String name, Swift::OpaquePointer fields)
{
  retstr->type._uint64_t countAndFlagsBits = 0x64726F636572;
  retstr->type._unint64_t object = (void *)0xE600000000000000;
  retstr->Swift::String name = name;
  retstr->namespace.value._uint64_t countAndFlagsBits = 0;
  retstr->namespace.value._unint64_t object = 0;
  retstr->fields = fields;
}

uint64_t static AvroSchema.record(name:namespace:fields:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = swift_allocObject();
  uint64_t v11 = sub_100020D7C(v10);
  *(void *)(v11 + 32) = a1;
  *(void *)(v11 + 40) = a2;
  *(void *)(v11 + 48) = a3;
  *(void *)(v11 + 56) = a4;
  uint64_t v12 = v11 | 0x6000000000000000;
  *(void *)(v11 + 64) = a5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v12;
}

void __swiftcall AvroRecordSchema.init(name:namespace:fields:)(SwiftAvro::AvroRecordSchema *__return_ptr retstr, Swift::String name, Swift::String a3, Swift::OpaquePointer fields)
{
  retstr->type._uint64_t countAndFlagsBits = 0x64726F636572;
  retstr->type._unint64_t object = (void *)0xE600000000000000;
  retstr->Swift::String name = name;
  retstr->namespace.Swift::Bool value = a3;
  retstr->fields = fields;
}

uint64_t static AvroSchema.record(schema:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  long long v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v2 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v2 + 32) = v3;
  *(_OWORD *)(v2 + 48) = *(_OWORD *)(a1 + 32);
  *(void *)(v2 + 64) = *(void *)(a1 + 48);
  uint64_t v4 = v2 | 0x6000000000000000;
  sub_100093F9C(a1);
  return v4;
}

unint64_t static AvroSchema.union(of:)(unint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (v1)
  {
    unint64_t v2 = result;
    uint64_t v3 = 0;
    while (*(void *)(result + 8 * v3 + 32) >> 61 != 4)
    {
      if (v1 == ++v3)
      {
        uint64_t v4 = swift_allocObject();
        *(void *)(v4 + 16) = v2;
        unint64_t v5 = v4 | 0x8000000000000000;
        swift_bridgeObjectRetain();
        return v5;
      }
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

SwiftAvro::AvroUnionSchema __swiftcall AvroUnionSchema.init(of:)(SwiftAvro::AvroUnionSchema of)
{
  uint64_t v1 = *((void *)of.schemas._rawValue + 2);
  if (v1)
  {
    uint64_t v2 = 0;
    while (*((void *)of.schemas._rawValue + v2 + 4) >> 61 != 4)
    {
      if (v1 == ++v2) {
        return of;
      }
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return of;
}

unint64_t static AvroSchema.union(schema:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = a1;
  unint64_t v3 = v2 | 0x8000000000000000;
  swift_bridgeObjectRetain();
  return v3;
}

uint64_t AvroSchema.init(for:)()
{
  uint64_t result = sub_10000E248();
  *(unsigned char *)(result + 16) = 1;
  return result;
}

{
  uint64_t result;

  uint64_t result = sub_10000E248();
  *(unsigned char *)(result + 16) = 2;
  return result;
}

{
  uint64_t result;

  uint64_t result = sub_10000E248();
  *(unsigned char *)(result + 16) = 3;
  return result;
}

{
  uint64_t result;

  uint64_t result = sub_10000E248();
  *(unsigned char *)(result + 16) = 4;
  return result;
}

{
  uint64_t result;

  uint64_t result = sub_10000E248();
  *(unsigned char *)(result + 16) = 5;
  return result;
}

{
  uint64_t result;

  uint64_t result = sub_10000E248();
  *(unsigned char *)(result + 16) = 6;
  return result;
}

{
  uint64_t result;

  uint64_t result = sub_10000E248();
  *(unsigned char *)(result + 16) = 7;
  return result;
}

uint64_t sub_1001642A4(uint64_t a1, unint64_t a2)
{
  switch(a2 >> 61)
  {
    case 1uLL:
      Swift::UInt v4 = 1;
      goto LABEL_5;
    case 2uLL:
      Swift::UInt v4 = 2;
LABEL_5:
      Hasher._combine(_:)(v4);
      swift_retain();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_retain();
      uint64_t v5 = sub_10016B218();
      sub_1001642A4(v5, v6);
      swift_bridgeObjectRelease();
      return sub_100026388();
    case 3uLL:
      sub_100027700((__n128 *)(a2 & 0x1FFFFFFFFFFFFFFFLL));
      sub_10002EB24();
      return AvroRecordSchema.hash(into:)();
    case 4uLL:
      uint64_t v8 = *(void *)((a2 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
      sub_100029960();
      swift_bridgeObjectRetain();
      sub_100168790(a1, v8);
      goto LABEL_9;
    default:
      char v3 = *(unsigned char *)(a2 + 16);
      sub_100023F6C();
      sub_100167368(v3);
      String.hash(into:)();
LABEL_9:
      return swift_bridgeObjectRelease();
  }
}

uint64_t _s9SwiftAvro0B6SchemaV23__derived_struct_equalsySbAC_ACtFZ_0(unint64_t a1, unint64_t a2)
{
  switch(a1 >> 61)
  {
    case 1uLL:
      if (a2 >> 61 == 1) {
        goto LABEL_11;
      }
      return 0;
    case 2uLL:
      if (a2 >> 61 != 2) {
        return 0;
      }
LABEL_11:
      uint64_t v10 = *(void *)((a1 & 0x1FFFFFFFFFFFFFFFLL) + 0x20);
      uint64_t v11 = *(void *)((a2 & 0x1FFFFFFFFFFFFFFFLL) + 0x20);
      BOOL v12 = *(void *)((a1 & 0x1FFFFFFFFFFFFFFFLL) + 0x10) == *(void *)((a2 & 0x1FFFFFFFFFFFFFFFLL) + 0x10)
         && *(void *)((a1 & 0x1FFFFFFFFFFFFFFFLL) + 0x18) == *(void *)((a2 & 0x1FFFFFFFFFFFFFFFLL) + 0x18);
      if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        return 0;
      }
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      char v13 = _s9SwiftAvro0B6SchemaV23__derived_struct_equalsySbAC_ACtFZ_0(v10, v11);
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      return (v13 & 1) != 0;
    case 3uLL:
      if (a2 >> 61 != 3) {
        return 0;
      }
      uint64_t v14 = *(void *)((a1 & 0x1FFFFFFFFFFFFFFFLL) + 0x20);
      uint64_t v15 = *(void *)((a1 & 0x1FFFFFFFFFFFFFFFLL) + 0x28);
      uint64_t v17 = *(void *)((a1 & 0x1FFFFFFFFFFFFFFFLL) + 0x30);
      uint64_t v16 = *(void *)((a1 & 0x1FFFFFFFFFFFFFFFLL) + 0x38);
      uint64_t v18 = *(void *)((a2 & 0x1FFFFFFFFFFFFFFFLL) + 0x20);
      uint64_t v19 = *(void *)((a2 & 0x1FFFFFFFFFFFFFFFLL) + 0x28);
      uint64_t v21 = *(void *)((a2 & 0x1FFFFFFFFFFFFFFFLL) + 0x30);
      uint64_t v20 = *(void *)((a2 & 0x1FFFFFFFFFFFFFFFLL) + 0x38);
      BOOL v22 = *(void *)((a1 & 0x1FFFFFFFFFFFFFFFLL) + 0x10) == *(void *)((a2 & 0x1FFFFFFFFFFFFFFFLL) + 0x10)
         && *(void *)((a1 & 0x1FFFFFFFFFFFFFFFLL) + 0x18) == *(void *)((a2 & 0x1FFFFFFFFFFFFFFFLL) + 0x18);
      if (!v22 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        return 0;
      }
      BOOL v23 = v14 == v18 && v15 == v19;
      if (!v23 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        return 0;
      }
      if (v16)
      {
        if (!v20) {
          return 0;
        }
        BOOL v24 = v17 == v21 && v16 == v20;
        if (!v24 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
          return 0;
        }
      }
      else if (v20)
      {
        return 0;
      }
      uint64_t v27 = sub_100027EA8();
      return (sub_100165DBC(v27, v28) & 1) != 0;
    case 4uLL:
      if (a2 >> 61 != 4) {
        return 0;
      }
      uint64_t v25 = *(void *)((a1 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
      uint64_t v26 = *(void *)((a2 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
      return _s9SwiftAvro0B11UnionSchemaV23__derived_struct_equalsySbAC_ACtFZ_0(v25, v26);
    default:
      if (a2 >> 61) {
        return 0;
      }
      char v2 = *(unsigned char *)(a2 + 16);
      uint64_t v3 = sub_100167368(*(unsigned char *)(a1 + 16));
      uint64_t v5 = v4;
      if (v3 == sub_100167368(v2) && v5 == v6)
      {
        swift_bridgeObjectRelease_n();
        return 1;
      }
      else
      {
        char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v8 & 1;
      }
  }
}

uint64_t sub_1001646CC()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_10016471C()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100164754()
{
  return _swift_deallocObject(v0, 17, 7);
}

Swift::Int sub_100164764(unint64_t a1)
{
  sub_1000243A4();
  sub_1001642A4((uint64_t)v3, a1);
  return Hasher._finalize()();
}

Swift::Int sub_1001647A4()
{
  return sub_100164764(*v0);
}

uint64_t sub_1001647AC(uint64_t a1)
{
  return sub_1001642A4(a1, *v1);
}

Swift::Int sub_1001647B4()
{
  unint64_t v1 = *v0;
  Hasher.init(_seed:)();
  sub_1001642A4((uint64_t)v3, v1);
  return Hasher._finalize()();
}

uint64_t sub_1001647F8(unint64_t *a1, unint64_t *a2)
{
  return _s9SwiftAvro0B6SchemaV23__derived_struct_equalsySbAC_ACtFZ_0(*a1, *a2);
}

uint64_t AvroSchema.hash(into:)()
{
  sub_100021398();
  swift_retain();
  uint64_t v0 = sub_10001D778();
  sub_1001642A4(v0, v1);

  return swift_release();
}

Swift::Int AvroSchema.hashValue.getter(unint64_t a1)
{
  sub_1000243A4();
  swift_retain();
  sub_1001642A4((uint64_t)v3, a1);
  swift_release();
  return Hasher._finalize()();
}

Swift::Int sub_1001648A8()
{
  return AvroSchema.hashValue.getter(*v0);
}

uint64_t sub_1001648B0()
{
  return AvroSchema.hash(into:)();
}

Swift::Int sub_1001648B8()
{
  unint64_t v1 = *v0;
  Hasher.init(_seed:)();
  swift_retain();
  sub_1001642A4((uint64_t)v3, v1);
  swift_release();
  return Hasher._finalize()();
}

uint64_t sub_100164910(void *a1, void *a2)
{
  return static AvroSchema.__derived_struct_equals(_:_:)(*a1, *a2);
}

uint64_t AvroSchema.encode(to:)(void *a1, unint64_t a2)
{
  switch(a2 >> 61)
  {
    case 1uLL:
      sub_10002B974();
      swift_bridgeObjectRetain();
      uint64_t v4 = (void *)sub_10002EA04();
      AvroArraySchema.encode(to:)(v4, v5, v6, v7);
      goto LABEL_5;
    case 2uLL:
      sub_10002B974();
      swift_bridgeObjectRetain();
      char v8 = (void *)sub_10002EA04();
      AvroMapSchema.encode(to:)(v8, v9, v10, v11);
LABEL_5:
      swift_release();
      uint64_t result = swift_bridgeObjectRelease();
      break;
    case 3uLL:
      sub_100027700((__n128 *)(a2 & 0x1FFFFFFFFFFFFFFFLL));
      uint64_t result = AvroRecordSchema.encode(to:)(a1);
      break;
    case 4uLL:
      sub_100164DCC();
      uint64_t result = Array<A>.encode(to:)();
      break;
    default:
      uint64_t result = AvroPrimitiveSchema.encode(to:)(a1, *(unsigned char *)(a2 + 16));
      break;
  }
  return result;
}

uint64_t AvroPrimitiveSchema.encode(to:)(void *a1, char a2)
{
  sub_10002572C(&qword_100223E98);
  sub_100020C48();
  __chkstk_darwin(v4);
  sub_100017DC8();
  sub_10001B620(a1, a1[3]);
  sub_100164E18();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_10016765C(a2);
  KeyedEncodingContainer.encode(_:forKey:)();
  sub_100027EC0();
  v5();
  return swift_bridgeObjectRelease();
}

uint64_t AvroArraySchema.encode(to:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100165F80(a1, a2, a3, a4, &qword_100223EA8, (void (*)(void))sub_1001676DC);
}

uint64_t AvroMapSchema.encode(to:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100165F80(a1, a2, a3, a4, &qword_100223EB8, (void (*)(void))sub_100167728);
}

uint64_t AvroRecordSchema.encode(to:)(void *a1)
{
  sub_10002572C(&qword_100223EC8);
  sub_100020C48();
  __chkstk_darwin(v3);
  sub_100016550();
  sub_10001B620(a1, a1[3]);
  sub_100167774();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    KeyedEncodingContainer.encode(_:forKey:)();
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    sub_10002572C(&qword_100223ED8);
    sub_100169B58(&qword_100223EE0, &qword_100223ED8, (void (*)(void))sub_1001677C0);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  sub_100027EC0();
  return v4();
}

uint64_t AvroUnionSchema.encode(to:)()
{
  return Array<A>.encode(to:)();
}

unint64_t sub_100164DCC()
{
  unint64_t result = qword_100223E90;
  if (!qword_100223E90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100223E90);
  }
  return result;
}

unint64_t sub_100164E18()
{
  unint64_t result = qword_100223EA0;
  if (!qword_100223EA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100223EA0);
  }
  return result;
}

uint64_t sub_100164E64(void *a1)
{
  return AvroSchema.encode(to:)(a1, *v1);
}

uint64_t AvroSchema.init(from:)(void *a1)
{
  sub_10002A02C(a1);
  sub_10002E89C();
  if (!v3)
  {
    sub_10001B620(v6, v6[3]);
    sub_10016780C();
    dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)();
    uint64_t v2 = swift_allocObject();
    *(unsigned char *)(v2 + 16) = v5;
    sub_10001CA50((uint64_t)v6);
  }
  sub_10001CA50(v1);
  return v2;
}

uint64_t sub_1001650D4@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = AvroSchema.init(from:)(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t AvroSchema.description.getter(unint64_t a1)
{
  switch(a1 >> 61)
  {
    case 1uLL:
      sub_10016B1F8();
      int v2 = swift_bridgeObjectRetain();
      AvroArraySchema.description.getter(v2, v3, v1);
      goto LABEL_5;
    case 2uLL:
      sub_10016B1F8();
      int v4 = swift_bridgeObjectRetain();
      AvroMapSchema.description.getter(v4, v5, v1);
LABEL_5:
      swift_release();
      swift_bridgeObjectRelease();
      return sub_10002E854();
    case 3uLL:
      sub_100027700((__n128 *)(a1 & 0x1FFFFFFFFFFFFFFFLL));
      sub_100093F9C((uint64_t)v7);
      AvroRecordSchema.description.getter();
      sub_100168730((uint64_t)v7);
      return sub_100027EA8();
    case 4uLL:
      swift_bridgeObjectRetain();
      Array.description.getter();
      swift_bridgeObjectRelease();
      return sub_10001AA80();
    default:
      v7[0] = *(unsigned char *)(a1 + 16);
      String.init<A>(describing:)();
      return sub_100027EA8();
  }
}

uint64_t sub_100165234()
{
  return AvroSchema.description.getter(*v0);
}

uint64_t variable initialization expression of AvroRecordSchema.type()
{
  return 0x64726F636572;
}

uint64_t AvroRecordSchema.type.getter()
{
  return sub_100027EA8();
}

uint64_t AvroRecordSchema.name.getter()
{
  return sub_100027EA8();
}

uint64_t AvroRecordSchema.name.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t AvroRecordSchema.namespace.getter()
{
  return sub_100027EA8();
}

uint64_t AvroRecordSchema.namespace.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = a2;
  return result;
}

Swift::Void (__swiftcall *AvroRecordSchema.namespace.modify())()
{
  return _CPStartNetworkSearchFeedback.redactUnused();
}

uint64_t AvroRecordSchema.fields.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AvroRecordSchema.fields.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 48) = a1;
  return result;
}

Swift::Void (__swiftcall *AvroRecordSchema.fields.modify())()
{
  return _CPStartNetworkSearchFeedback.redactUnused();
}

uint64_t sub_1001653B8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1701869940 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 1701667182 && a2 == 0xE400000000000000;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      BOOL v7 = a1 == 0x63617073656D616ELL && a2 == 0xE900000000000065;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else if (a1 == 0x73646C656966 && a2 == 0xE600000000000000)
      {
        swift_bridgeObjectRelease();
        return 3;
      }
      else
      {
        char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v9) {
          return 3;
        }
        else {
          return 4;
        }
      }
    }
  }
}

uint64_t sub_100165554(char a1)
{
  uint64_t result = 1701869940;
  switch(a1)
  {
    case 1:
      uint64_t result = 1701667182;
      break;
    case 2:
      uint64_t result = 0x63617073656D616ELL;
      break;
    case 3:
      uint64_t result = 0x73646C656966;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1001655D4()
{
  return sub_100165554(*v0);
}

uint64_t sub_1001655DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1001653B8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100165604@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = static AvroPrimitiveSchema.float.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10016562C(uint64_t a1)
{
  unint64_t v2 = sub_100167774();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100165668(uint64_t a1)
{
  unint64_t v2 = sub_100167774();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t InternalError.description.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  void *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t AvroRecordSchema.Field.init(name:type:optional:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100021398();
  if (v4)
  {
    sub_10002572C(&qword_100223F18);
    uint64_t v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = xmmword_1001A3830;
    if (qword_100223E48 != -1) {
      swift_once();
    }
    *(void *)(v5 + 32) = static AvroSchema.null;
    *(void *)(v5 + 40) = a3;
    uint64_t v6 = swift_allocObject();
    AvroUnionSchema.init(of:)((Swift::OpaquePointer)v5);
    *(void *)(v6 + 16) = v5;
    swift_retain();
  }
  return sub_10001D778();
}

uint64_t sub_1001657B0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1701667182 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1701869940 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_100165888(char a1)
{
  if (a1) {
    return 1701869940;
  }
  else {
    return 1701667182;
  }
}

uint64_t sub_1001658AC()
{
  return sub_100165888(*v0);
}

uint64_t sub_1001658B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1001657B0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001658DC(uint64_t a1)
{
  unint64_t v2 = sub_100169A28();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100165918(uint64_t a1)
{
  unint64_t v2 = sub_100169A28();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100165964(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return sub_100166ABC(a1, a2, a3, a4, (uint64_t (*)(void, void, void, void, void, void))static AvroMapSchema.__derived_struct_equals(_:_:));
}

uint64_t AvroRecordSchema.hash(into:)()
{
  swift_bridgeObjectRetain();
  sub_10016B1BC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_10016B1BC();
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 40))
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    sub_10002E854();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  swift_bridgeObjectRetain();
  uint64_t v1 = sub_10001D778();
  sub_100169998(v1, v2);

  return swift_bridgeObjectRelease();
}

uint64_t static AvroRecordSchema.__derived_struct_equals(_:_:)()
{
  sub_100021398();
  BOOL v3 = *v2 == *v0 && v1[1] == v0[1];
  if (!v3 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  BOOL v4 = v1[2] == v0[2] && v1[3] == v0[3];
  if (!v4 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  uint64_t v5 = v1[5];
  uint64_t v6 = v0[5];
  if (v5)
  {
    if (v6)
    {
      BOOL v7 = v1[4] == v0[4] && v5 == v6;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_18;
      }
    }
    return 0;
  }
  if (v6) {
    return 0;
  }
LABEL_18:
  uint64_t v8 = v1[6];
  uint64_t v9 = v0[6];

  return sub_100165DBC(v8, v9);
}

uint64_t sub_100165AFC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 == *(void *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
    {
      char v22 = 1;
    }
    else
    {
      uint64_t v3 = v2 - 1;
      uint64_t v4 = a1 + 48;
      uint64_t v5 = a2 + 48;
      do
      {
        uint64_t v34 = v3;
        char v6 = *(unsigned char *)(v4 + 48);
        uint64_t v8 = *(void *)(v4 + 32);
        uint64_t v7 = *(void *)(v4 + 40);
        uint64_t v10 = *(void *)(v4 + 16);
        uint64_t v9 = *(void *)(v4 + 24);
        uint64_t v12 = *(void *)v4;
        uint64_t v11 = *(void *)(v4 + 8);
        unint64_t v13 = *(void *)(v4 - 8);
        uint64_t v14 = *(void *)(v5 - 16);
        unint64_t v15 = *(void *)(v5 - 8);
        uint64_t v16 = *(void *)v5;
        uint64_t v24 = *(void *)(v5 + 8);
        uint64_t v25 = *(void *)(v4 - 16);
        uint64_t v18 = *(void *)(v5 + 16);
        uint64_t v17 = *(void *)(v5 + 24);
        uint64_t v19 = *(void *)(v5 + 32);
        uint64_t v20 = *(void *)(v5 + 40);
        char v21 = *(unsigned char *)(v5 + 48);
        v35[0] = v25;
        v35[1] = v13;
        unint64_t v26 = v13;
        uint64_t v27 = v12;
        v35[2] = v12;
        v35[3] = v11;
        char v28 = v11;
        uint64_t v29 = v10;
        void v35[4] = v10;
        v35[5] = v9;
        uint64_t v30 = v9;
        uint64_t v31 = v8;
        void v35[6] = v8;
        v35[7] = v7;
        uint64_t v33 = v7;
        char v32 = v6;
        char v36 = v6;
        v37[0] = v14;
        v37[1] = v15;
        v37[2] = v16;
        v37[3] = v24;
        void v37[4] = v18;
        uint64_t v37[5] = v17;
        v37[6] = v19;
        v37[7] = v20;
        char v38 = v21;
        sub_10016AE48(v25, v13, v12, v11, v10, v9, v8, v7, v6);
        sub_10016AE48(v14, v15, v16, v24, v18, v17, v19, v20, v21);
        char v22 = sub_10017BD58(v35, v37);
        sub_100093A68(v14, v15, v16, v24, v18, v17, v19, v20, v21);
        sub_100093A68(v25, v26, v27, v28, v29, v30, v31, v33, v32);
        uint64_t v3 = v34 - 1;
        if ((v22 & 1) == 0) {
          break;
        }
        v4 += 72;
        v5 += 72;
      }
      while (v34);
    }
  }
  else
  {
    char v22 = 0;
  }
  return v22 & 1;
}

uint64_t _s9SwiftAvro0B11UnionSchemaV23__derived_struct_equalsySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v4) {
    return 1;
  }
  sub_100021398();
  if (v5 == v6) {
    return 1;
  }
  uint64_t v7 = *(void *)(v3 + 32);
  uint64_t v8 = *(void *)(v2 + 32);
  swift_retain();
  swift_retain();
  LOBYTE(v7) = _s9SwiftAvro0B6SchemaV23__derived_struct_equalsySbAC_ACtFZ_0(v7, v8);
  swift_release();
  swift_release();
  if ((v7 & 1) == 0) {
    return 0;
  }
  uint64_t v9 = v3 + 40;
  uint64_t v10 = v2 + 40;
  uint64_t v11 = v4 - 1;
  do
  {
    BOOL v12 = v11 == 0;
    if (!v11) {
      break;
    }
    v9 += 8;
    v10 += 8;
    swift_retain();
    swift_retain();
    uint64_t v13 = sub_10001AA80();
    char v15 = _s9SwiftAvro0B6SchemaV23__derived_struct_equalsySbAC_ACtFZ_0(v13, v14);
    swift_release();
    swift_release();
    --v11;
  }
  while ((v15 & 1) != 0);
  return v12;
}

uint64_t sub_100165DBC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 == *(void *)(a2 + 16))
  {
    if (!v2 || a1 == a2) {
      return 1;
    }
    uint64_t v3 = (uint64_t *)(a2 + 48);
    for (unint64_t i = (uint64_t *)(a1 + 48); ; i += 3)
    {
      uint64_t v5 = *i;
      uint64_t v6 = *v3;
      BOOL v7 = *(i - 2) == *(v3 - 2) && *(i - 1) == *(v3 - 1);
      if (!v7 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        break;
      }
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_bridgeObjectRetain();
      char v8 = _s9SwiftAvro0B6SchemaV23__derived_struct_equalsySbAC_ACtFZ_0(v5, v6);
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      if ((v8 & 1) == 0) {
        break;
      }
      v3 += 3;
      if (!--v2) {
        return 1;
      }
    }
  }
  return 0;
}

Swift::Int AvroRecordSchema.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int sub_100165F04()
{
  return Hasher._finalize()();
}

uint64_t AvroRecordSchema.Field.encode(to:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100165F80(a1, a2, a3, a4, &qword_100223F20, (void (*)(void))sub_100169A28);
}

uint64_t sub_100165F80(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, void (*a6)(void))
{
  uint64_t v9 = sub_10002572C(a5);
  sub_100020C48();
  uint64_t v11 = v10;
  __chkstk_darwin(v12);
  sub_100016550();
  sub_10001B620(a1, a1[3]);
  a6();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v14)
  {
    sub_100164DCC();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(v6, v9);
}

void AvroRecordSchema.Field.init(from:)()
{
  sub_100029294();
  sub_10002572C(&qword_100223F30);
  sub_100020C48();
  __chkstk_darwin(v2);
  sub_10001B620(v0, v0[3]);
  sub_100169A28();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    sub_10001CA50((uint64_t)v0);
  }
  else
  {
    KeyedDecodingContainer.decode(_:forKey:)();
    sub_100169A74();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    sub_100027EC0();
    v3();
    sub_10002EC28();
    sub_10001CA50((uint64_t)v0);
    swift_release();
    swift_bridgeObjectRelease();
  }
  sub_100029724();
}

uint64_t sub_1001662A8@<X0>(uint64_t *a1@<X8>)
{
  return sub_100167210((uint64_t (*)(void))AvroRecordSchema.Field.init(from:), a1);
}

uint64_t sub_1001662D4(void *a1)
{
  return AvroRecordSchema.Field.encode(to:)(a1, *v1, v1[1], v1[2]);
}

uint64_t AvroRecordSchema.init(from:)()
{
  sub_100029294();
  uint64_t v3 = v2;
  sub_10002572C(&qword_100223F40);
  sub_100020C48();
  __chkstk_darwin(v4);
  uint64_t v5 = (void *)sub_10016B218();
  sub_10001B620(v5, v6);
  sub_100167774();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    sub_10001CA50(v0);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v7 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v9 = v8;
    uint64_t v22 = v7;
    swift_bridgeObjectRetain();
    uint64_t v10 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v12 = v11;
    uint64_t v20 = v10;
    char v21 = v3;
    swift_bridgeObjectRetain();
    uint64_t v13 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v15 = v14;
    uint64_t v19 = v13;
    sub_10002572C(&qword_100223ED8);
    sub_100169B58(&qword_100223F48, &qword_100223ED8, (void (*)(void))sub_100169AC0);
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v16 = sub_100024E0C();
    v17(v16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10001CA50(v0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    *char v21 = v22;
    v21[1] = v9;
    v21[2] = v20;
    v21[3] = v12;
    void v21[4] = v19;
    v21[5] = v15;
    v21[6] = v23;
  }
  return result;
}

double sub_10016661C@<D0>(uint64_t a1@<X8>)
{
  AvroRecordSchema.init(from:)();
  if (!v1)
  {
    *(_OWORD *)a1 = v4;
    *(_OWORD *)(a1 + 16) = v5;
    double result = *(double *)&v6;
    *(_OWORD *)(a1 + 32) = v6;
    *(void *)(a1 + 48) = v7;
  }
  return result;
}

uint64_t sub_10016666C(void *a1)
{
  return AvroRecordSchema.encode(to:)(a1);
}

uint64_t AvroRecordSchema.Field.description.getter(uint64_t a1, void *a2, unint64_t a3)
{
  swift_bridgeObjectRetain();
  v6._uint64_t countAndFlagsBits = a1;
  v6._unint64_t object = a2;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._uint64_t countAndFlagsBits = 8250;
  v7._unint64_t object = (void *)0xE200000000000000;
  String.append(_:)(v7);
  swift_retain();
  v8._uint64_t countAndFlagsBits = AvroSchema.description.getter(a3);
  String.append(_:)(v8);
  swift_release();
  swift_bridgeObjectRelease();
  v9._uint64_t countAndFlagsBits = 125;
  v9._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v9);
  return 123;
}

uint64_t sub_10016673C()
{
  return AvroRecordSchema.Field.description.getter(*(void *)v0, *(void **)(v0 + 8), *(void *)(v0 + 16));
}

unint64_t AvroRecordSchema.description.getter()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void **)(v0 + 24);
  swift_bridgeObjectRetain();
  v3._uint64_t countAndFlagsBits = v1;
  v3._unint64_t object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._uint64_t countAndFlagsBits = 0x73646C656966202CLL;
  v4._unint64_t object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v4);
  swift_bridgeObjectRetain();
  v5._uint64_t countAndFlagsBits = Array.description.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v6._uint64_t countAndFlagsBits = 41;
  v6._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  return 0xD000000000000013;
}

uint64_t variable initialization expression of AvroArraySchema.type()
{
  return 0x7961727261;
}

uint64_t AvroArraySchema.type.getter()
{
  return sub_10001D778();
}

uint64_t AvroArraySchema.items.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t AvroArraySchema.items.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *(void *)(v1 + 16) = a1;
  return result;
}

uint64_t sub_1001668DC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1701869940 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x736D657469 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1001669B4(char a1)
{
  if (a1) {
    return 0x736D657469;
  }
  else {
    return 1701869940;
  }
}

Swift::Int sub_1001669E0()
{
  return sub_100166D90(*v0);
}

uint64_t sub_1001669FC()
{
  return sub_1001669B4(*v0);
}

uint64_t sub_100166A04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1001668DC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100166A2C(uint64_t a1)
{
  unint64_t v2 = sub_1001676DC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100166A68(uint64_t a1)
{
  unint64_t v2 = sub_1001676DC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100166AA4()
{
  return AvroMapSchema.hashValue.getter(*v0, v0[1], v0[2]);
}

uint64_t sub_100166AB0(uint64_t a1)
{
  return AvroMapSchema.hash(into:)(a1, *v1, v1[1], v1[2]);
}

uint64_t sub_100166ABC(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, void, void, void, void, void))
{
  return a5(*a1, a1[1], a1[2], *a2, a2[1], a2[2]);
}

void AvroArraySchema.init(from:)()
{
  sub_100029294();
  sub_10002572C(&qword_100223F58);
  sub_100020C48();
  __chkstk_darwin(v2);
  sub_10001B620(v0, v0[3]);
  sub_1001676DC();
  sub_1000294E4();
  if (!v1)
  {
    sub_100028990();
    unint64_t v3 = sub_10016B224();
    swift_bridgeObjectRetain();
    sub_100028DF4();
    if (!v3)
    {
      uint64_t v6 = sub_10002A85C();
      v7(v6);
      sub_10002EC28();
      sub_10001CA50((uint64_t)v0);
      swift_release();
      swift_bridgeObjectRelease();
      goto LABEL_4;
    }
    uint64_t v4 = sub_10002A85C();
    v5(v4);
    swift_bridgeObjectRelease();
  }
  sub_10001CA50((uint64_t)v0);
  swift_bridgeObjectRelease();
LABEL_4:
  sub_100029724();
}

uint64_t sub_100166C38@<X0>(uint64_t *a1@<X8>)
{
  return sub_100167210((uint64_t (*)(void))AvroArraySchema.init(from:), a1);
}

uint64_t sub_100166C64(void *a1)
{
  return AvroArraySchema.encode(to:)(a1, *v1, v1[1], v1[2]);
}

uint64_t AvroArraySchema.description.getter(int a1, int a2, uint64_t a3)
{
  return sub_10002B21C(a1, a2, a3, 22, 19);
}

uint64_t sub_100166CA0(int a1, int a2)
{
  return AvroArraySchema.description.getter(a1, a2, *(void *)(v2 + 16));
}

uint64_t variable initialization expression of AvroMapSchema.type()
{
  return 7364973;
}

uint64_t sub_100166CB8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1701869940 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7365756C6176 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

Swift::Int sub_100166D90(char a1)
{
  return Hasher._finalize()();
}

uint64_t sub_100166DD0(char a1)
{
  if (a1) {
    return 0x7365756C6176;
  }
  else {
    return 1701869940;
  }
}

uint64_t sub_100166DFC()
{
  return sub_100166DD0(*v0);
}

uint64_t sub_100166E04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100166CB8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100166E2C(uint64_t a1)
{
  unint64_t v2 = sub_100167728();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100166E68(uint64_t a1)
{
  unint64_t v2 = sub_100167728();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t _s9SwiftAvro0B9MapSchemaV4hash4intoys6HasherVz_tF_0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_retain();
  sub_1001642A4(a1, a4);

  return swift_release();
}

uint64_t _s9SwiftAvro0B9MapSchemaV23__derived_struct_equalsySbAC_ACtFZ_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  BOOL v5 = a1 == a4 && a2 == a5;
  if (!v5 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  unint64_t v6 = sub_10001D778();

  return _s9SwiftAvro0B6SchemaV23__derived_struct_equalsySbAC_ACtFZ_0(v6, v7);
}

Swift::Int _s9SwiftAvro0B9MapSchemaV9hashValueSivg_0()
{
  sub_10001DEF4();
  sub_1000243A4();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_retain();
  sub_1001642A4((uint64_t)v2, v0);
  swift_release();
  return Hasher._finalize()();
}

Swift::Int sub_100167008()
{
  unint64_t v1 = *(void *)(v0 + 16);
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_retain();
  sub_1001642A4((uint64_t)v3, v1);
  swift_release();
  return Hasher._finalize()();
}

void AvroMapSchema.init(from:)()
{
  sub_100029294();
  sub_10002572C(&qword_100223F60);
  sub_100020C48();
  __chkstk_darwin(v2);
  sub_10001B620(v0, v0[3]);
  sub_100167728();
  sub_1000294E4();
  if (!v1)
  {
    sub_100028990();
    unint64_t v3 = sub_10016B224();
    swift_bridgeObjectRetain();
    sub_100028DF4();
    if (!v3)
    {
      uint64_t v6 = sub_10002A85C();
      v7(v6);
      sub_10002EC28();
      sub_10001CA50((uint64_t)v0);
      swift_release();
      swift_bridgeObjectRelease();
      goto LABEL_4;
    }
    uint64_t v4 = sub_10002A85C();
    v5(v4);
    swift_bridgeObjectRelease();
  }
  sub_10001CA50((uint64_t)v0);
  swift_bridgeObjectRelease();
LABEL_4:
  sub_100029724();
}

uint64_t sub_1001671E4@<X0>(uint64_t *a1@<X8>)
{
  return sub_100167210((uint64_t (*)(void))AvroMapSchema.init(from:), a1);
}

uint64_t sub_100167210@<X0>(uint64_t (*a1)(void)@<X3>, uint64_t *a2@<X8>)
{
  uint64_t result = a1();
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t sub_100167244(void *a1)
{
  return AvroMapSchema.encode(to:)(a1, *v1, v1[1], v1[2]);
}

uint64_t AvroMapSchema.description.getter(int a1, int a2, uint64_t a3)
{
  return sub_10002B21C(a1, a2, a3, 21, 18);
}

uint64_t sub_100167280(int a1, int a2, uint64_t a3, Swift::Int a4, uint64_t a5)
{
  _StringGuts.grow(_:)(a4);
  swift_bridgeObjectRelease();
  swift_retain();
  v7._uint64_t countAndFlagsBits = AvroSchema.description.getter(a3);
  String.append(_:)(v7);
  swift_release();
  swift_bridgeObjectRelease();
  v8._uint64_t countAndFlagsBits = 41;
  v8._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  return a5;
}

unint64_t sub_10016731C(Swift::String string)
{
  unint64_t object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._unint64_t object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100205008, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 8) {
    return 8;
  }
  else {
    return v3;
  }
}

uint64_t sub_100167368(char a1)
{
  uint64_t result = 1819047278;
  switch(a1)
  {
    case 1:
      uint64_t result = sub_100026220();
      break;
    case 2:
      uint64_t result = sub_100019C90();
      break;
    case 3:
      uint64_t result = sub_100028370();
      break;
    case 4:
      uint64_t result = sub_100025114();
      break;
    case 5:
      uint64_t result = sub_10002EE20();
      break;
    case 6:
      uint64_t result = sub_100025314();
      break;
    case 7:
      uint64_t result = 0x7365747962;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1001673E8(int a1, int a2)
{
  return AvroMapSchema.description.getter(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_1001673F0(unsigned __int8 *a1, char *a2)
{
  return sub_1001673FC(*a1, *a2);
}

uint64_t sub_1001673FC(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 1819047278;
  unint64_t v3 = 0xE400000000000000;
  uint64_t v4 = a1;
  uint64_t v5 = 1819047278;
  switch(v4)
  {
    case 1:
      unint64_t v3 = 0xE700000000000000;
      uint64_t v5 = 0x6E61656C6F6F62;
      break;
    case 2:
      unint64_t v3 = 0xE300000000000000;
      uint64_t v5 = 7630441;
      break;
    case 3:
      uint64_t v5 = 1735290732;
      break;
    case 4:
      unint64_t v3 = 0xE500000000000000;
      uint64_t v5 = 0x74616F6C66;
      break;
    case 5:
      unint64_t v3 = 0xE600000000000000;
      uint64_t v5 = 0x656C62756F64;
      break;
    case 6:
      unint64_t v3 = 0xE600000000000000;
      uint64_t v5 = 0x676E69727473;
      break;
    case 7:
      unint64_t v3 = 0xE500000000000000;
      uint64_t v5 = 0x7365747962;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE400000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xE700000000000000;
      uint64_t v2 = 0x6E61656C6F6F62;
      break;
    case 2:
      unint64_t v6 = 0xE300000000000000;
      uint64_t v2 = 7630441;
      break;
    case 3:
      uint64_t v2 = 1735290732;
      break;
    case 4:
      unint64_t v6 = 0xE500000000000000;
      uint64_t v2 = 0x74616F6C66;
      break;
    case 5:
      unint64_t v6 = 0xE600000000000000;
      uint64_t v2 = 0x656C62756F64;
      break;
    case 6:
      unint64_t v6 = 0xE600000000000000;
      uint64_t v2 = 0x676E69727473;
      break;
    case 7:
      unint64_t v6 = 0xE500000000000000;
      uint64_t v2 = 0x7365747962;
      break;
    default:
      break;
  }
  if (v5 == v2 && v3 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

unint64_t sub_100167600@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10016731C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100167630@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100167368(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10016765C(char a1)
{
  uint64_t result = 1819047278;
  switch(a1)
  {
    case 1:
      uint64_t result = sub_100026220();
      break;
    case 2:
      uint64_t result = sub_100019C90();
      break;
    case 3:
      uint64_t result = sub_100028370();
      break;
    case 4:
      uint64_t result = sub_100025114();
      break;
    case 5:
      uint64_t result = sub_10002EE20();
      break;
    case 6:
      uint64_t result = sub_100025314();
      break;
    case 7:
      uint64_t result = 0x7365747962;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1001676DC()
{
  unint64_t result = qword_100223EB0;
  if (!qword_100223EB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100223EB0);
  }
  return result;
}

unint64_t sub_100167728()
{
  unint64_t result = qword_100223EC0;
  if (!qword_100223EC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100223EC0);
  }
  return result;
}

unint64_t sub_100167774()
{
  unint64_t result = qword_100223ED0;
  if (!qword_100223ED0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100223ED0);
  }
  return result;
}

unint64_t sub_1001677C0()
{
  unint64_t result = qword_100223EE8;
  if (!qword_100223EE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100223EE8);
  }
  return result;
}

unint64_t sub_10016780C()
{
  unint64_t result = qword_100223EF0;
  if (!qword_100223EF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100223EF0);
  }
  return result;
}

unint64_t sub_100167858()
{
  unint64_t result = qword_100223EF8;
  if (!qword_100223EF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100223EF8);
  }
  return result;
}

unint64_t sub_1001678A4()
{
  unint64_t result = qword_100223F00;
  if (!qword_100223F00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100223F00);
  }
  return result;
}

unint64_t sub_1001678F0()
{
  unint64_t result = qword_100223F08;
  if (!qword_100223F08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100223F08);
  }
  return result;
}

unint64_t sub_10016793C()
{
  unint64_t result = qword_100223F10;
  if (!qword_100223F10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100223F10);
  }
  return result;
}

Swift::Int sub_100167988()
{
  return sub_100167990(*v0);
}

Swift::Int sub_100167990(char a1)
{
  return Hasher._finalize()();
}

uint64_t sub_1001679F4()
{
  return sub_1001679FC();
}

uint64_t sub_1001679FC()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100167B08(uint64_t a1)
{
  return sub_100167B10(a1, *v1);
}

Swift::Int sub_100167B10(uint64_t a1, char a2)
{
  return Hasher._finalize()();
}

uint64_t AvroPrimitiveSchema.hash(into:)()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t static AvroPrimitiveSchema.__derived_struct_equals(_:_:)(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 1819047278;
  unint64_t v3 = 0xE400000000000000;
  uint64_t v4 = a1;
  uint64_t v5 = 1819047278;
  switch(v4)
  {
    case 1:
      unint64_t v3 = 0xE700000000000000;
      uint64_t v5 = 0x6E61656C6F6F62;
      break;
    case 2:
      unint64_t v3 = 0xE300000000000000;
      uint64_t v5 = 7630441;
      break;
    case 3:
      uint64_t v5 = 1735290732;
      break;
    case 4:
      unint64_t v3 = 0xE500000000000000;
      uint64_t v5 = 0x74616F6C66;
      break;
    case 5:
      unint64_t v3 = 0xE600000000000000;
      uint64_t v5 = 0x656C62756F64;
      break;
    case 6:
      unint64_t v3 = 0xE600000000000000;
      uint64_t v5 = 0x676E69727473;
      break;
    case 7:
      unint64_t v3 = 0xE500000000000000;
      uint64_t v5 = 0x7365747962;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE400000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xE700000000000000;
      uint64_t v2 = 0x6E61656C6F6F62;
      break;
    case 2:
      unint64_t v6 = 0xE300000000000000;
      uint64_t v2 = 7630441;
      break;
    case 3:
      uint64_t v2 = 1735290732;
      break;
    case 4:
      unint64_t v6 = 0xE500000000000000;
      uint64_t v2 = 0x74616F6C66;
      break;
    case 5:
      unint64_t v6 = 0xE600000000000000;
      uint64_t v2 = 0x656C62756F64;
      break;
    case 6:
      unint64_t v6 = 0xE600000000000000;
      uint64_t v2 = 0x676E69727473;
      break;
    case 7:
      unint64_t v6 = 0xE500000000000000;
      uint64_t v2 = 0x7365747962;
      break;
    default:
      break;
  }
  if (v5 == v2 && v3 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int AvroPrimitiveSchema.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

Swift::Int sub_100167EDC()
{
  return AvroPrimitiveSchema.hashValue.getter(*v0);
}

uint64_t sub_100167EE4()
{
  return AvroPrimitiveSchema.hash(into:)();
}

Swift::Int sub_100167EEC()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_100167368(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_100167F4C(unsigned __int8 *a1, char *a2)
{
  return static AvroPrimitiveSchema.__derived_struct_equals(_:_:)(*a1, *a2);
}

uint64_t sub_100167F58()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_100167FB8()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_100168008(uint64_t a1, uint64_t a2)
{
  if (a1 == 1701869940 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

Swift::Int sub_100168080()
{
  return Hasher._finalize()();
}

uint64_t sub_1001680C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, BOOL *a3@<X8>)
{
  uint64_t result = sub_100168008(a1, a2);
  *a3 = result != 0;
  return result;
}

uint64_t sub_1001680F0(uint64_t a1)
{
  unint64_t v2 = sub_100164E18();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10016812C(uint64_t a1)
{
  unint64_t v2 = sub_100164E18();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100168168(void *a1)
{
  return AvroPrimitiveSchema.encode(to:)(a1, *v1);
}

uint64_t AvroPrimitiveSchema.init(from:)(void *a1)
{
  uint64_t v4 = sub_10002572C(&qword_100223F68);
  sub_100020C48();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  sub_100017DC8();
  sub_10001B620(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (v1)
  {
    sub_10001B620(a1, a1[3]);
    sub_100164E18();
    dispatch thunk of Decoder.container<A>(keyedBy:)();
    sub_100169B0C();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v2, v4);
    swift_errorRelease();
    uint64_t v8 = LOBYTE(v10[0]);
  }
  else
  {
    sub_10001B620(v10, v10[3]);
    sub_100169B0C();
    dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)();
    uint64_t v8 = v11;
    sub_10001CA50((uint64_t)v10);
  }
  sub_10001CA50((uint64_t)a1);
  return v8;
}

uint64_t sub_100168370@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = AvroPrimitiveSchema.init(from:)(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t AvroPrimitiveSchema.description.getter()
{
  return String.init<A>(describing:)();
}

uint64_t sub_1001683CC()
{
  return AvroPrimitiveSchema.description.getter();
}

void AvroUnionSchema.hash(into:)()
{
  sub_100021398();
  Swift::UInt v1 = *(void *)(v0 + 16);
  Hasher._combine(_:)(v1);
  if (v1)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = 0;
    do
    {
      ++v2;
      swift_retain();
      uint64_t v3 = sub_10002E854();
      sub_1001642A4(v3, v4);
      swift_release();
    }
    while (v1 != v2);
    swift_bridgeObjectRelease();
  }
}

Swift::Int AvroUnionSchema.hashValue.getter(uint64_t a1)
{
  sub_1000243A4();
  swift_bridgeObjectRetain();
  sub_100168790((uint64_t)v3, a1);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Swift::Int sub_1001684CC()
{
  return AvroUnionSchema.hashValue.getter(*v0);
}

void sub_1001684D4()
{
}

Swift::Int sub_1001684DC()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Swift::UInt v2 = *(void *)(v1 + 16);
  Hasher._combine(_:)(v2);
  if (v2)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = 0;
    do
    {
      unint64_t v4 = *(void *)(v1 + 8 * v3++ + 32);
      swift_retain();
      sub_1001642A4((uint64_t)v6, v4);
      swift_release();
    }
    while (v2 != v3);
    swift_bridgeObjectRelease();
  }
  return Hasher._finalize()();
}

uint64_t sub_100168580(void *a1, void *a2)
{
  return static AvroUnionSchema.__derived_struct_equals(_:_:)(*a1, *a2);
}

uint64_t sub_10016858C()
{
  return AvroUnionSchema.encode(to:)();
}

uint64_t AvroUnionSchema.init(from:)(void *a1)
{
  sub_10002A02C(a1);
  sub_10002E89C();
  if (!v3)
  {
    sub_10001B620(v5, v5[3]);
    sub_10002572C(&qword_100223F78);
    sub_100169B58(&qword_100223F80, &qword_100223F78, (void (*)(void))sub_100169A74);
    dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)();
    uint64_t v2 = v5[6];
    sub_10001CA50((uint64_t)v5);
  }
  sub_10001CA50(v1);
  return v2;
}

uint64_t sub_1001686B0@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = AvroUnionSchema.init(from:)(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t AvroUnionSchema.description.getter()
{
  return sub_10001AA80();
}

uint64_t sub_100168728()
{
  return AvroUnionSchema.description.getter();
}

uint64_t sub_100168730(uint64_t a1)
{
  return a1;
}

uint64_t variable initialization expression of ByteBuffer.data()
{
  return 0;
}

void sub_100168790(uint64_t a1, uint64_t a2)
{
  sub_100028ED8(a1, a2);
  if (v2)
  {
    uint64_t v4 = v3 + 32;
    do
    {
      v4 += 8;
      swift_retain();
      uint64_t v5 = sub_10001AA80();
      sub_1001642A4(v5, v6);
      swift_release();
      --v2;
    }
    while (v2);
  }
}

void sub_1001687F0(uint64_t a1, uint64_t a2)
{
  Swift::UInt v5 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v5);
  uint64_t v315 = v5;
  if (v5)
  {
    uint64_t v320 = 0;
    uint64_t v314 = a2 + 32;
    do
    {
      uint64_t v6 = v314 + 72 * v320;
      unint64_t v7 = *(void *)(v6 + 16);
      uint64_t v322 = *(void *)v6;
      unint64_t v323 = *(void *)(v6 + 8);
      uint64_t v324 = *(void *)(v6 + 24);
      uint64_t v8 = *(void *)(v6 + 40);
      uint64_t v9 = *(void *)(v6 + 56);
      uint64_t v325 = *(void *)(v6 + 48);
      uint64_t v319 = *(void *)(v6 + 32);
      uint64_t v321 = v320 + 1;
      unint64_t v10 = *(unsigned __int8 *)(v6 + 64);
      switch(*(unsigned char *)(v6 + 64))
      {
        case 1:
          sub_10016B244();
          LOBYTE(v2) = v324;
          uint64_t v12 = v325;
          uint64_t v316 = v10;
          uint64_t v13 = v322;
          unint64_t v10 = v323;
          uint64_t v48 = sub_1000282D0();
          uint64_t v15 = v8;
          sub_10002C780(v48, v49, v50, v51, v319, v52, v53, v54, v229);
          swift_retain();
          swift_bridgeObjectRetain();
          uint64_t v55 = sub_1000282D0();
          sub_10002C780(v55, v56, v57, v58, v319, v59, v60, v61, v232);
          swift_bridgeObjectRetain();
          swift_retain();
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_retain();
          sub_1001642A4(a1, v7);
          swift_bridgeObjectRelease();
          sub_100026388();
          swift_bridgeObjectRetain();
          sub_1001687F0(a1, v324);
          uint64_t v29 = v319;
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          char v30 = 1;
          goto LABEL_12;
        case 2:
          sub_10001EDC0();
          LOBYTE(v2) = v324;
          uint64_t v12 = v325;
          uint64_t v316 = v10;
          uint64_t v13 = v322;
          unint64_t v10 = v323;
          uint64_t v14 = sub_10002B380();
          uint64_t v15 = v8;
          sub_10002C780(v14, v16, v17, v18, v319, v19, v20, v21, v229);
          swift_retain();
          swift_bridgeObjectRetain();
          uint64_t v22 = sub_10002B380();
          sub_10002C780(v22, v23, v24, v25, v319, v26, v27, v28, v230);
          swift_bridgeObjectRetain();
          swift_retain();
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_retain();
          sub_1001642A4(a1, v7);
          swift_bridgeObjectRelease();
          sub_100026388();
          swift_bridgeObjectRetain();
          sub_100180220(a1, v324);
          uint64_t v29 = v319;
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          char v30 = 2;
LABEL_12:
          unint64_t v62 = v10;
          LOBYTE(v10) = v316;
          uint64_t v63 = sub_100093A68(v13, v62, v7, v2, v29, v15, v12, v9, v30);
          break;
        case 3:
          uint64_t v318 = *(unsigned __int8 *)(v6 + 64);
          sub_10002EB24();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v71 = sub_10002E93C();
          sub_10016AE48(v71, v72, v73, v74, v319, v8, v325, v9, 3);
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          sub_10016B218();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          if (v8)
          {
            Hasher._combine(_:)(1u);
            swift_bridgeObjectRetain();
            String.hash(into:)();
            swift_bridgeObjectRelease();
          }
          else
          {
            Hasher._combine(_:)(0);
          }
          Hasher._combine(_:)(*(void *)(v325 + 16));
          uint64_t v87 = *(void *)(v325 + 16);
          if (v87)
          {
            uint64_t v310 = v7;
            uint64_t v88 = (unint64_t *)(swift_bridgeObjectRetain() + 48);
            do
            {
              unint64_t v89 = *v88;
              v88 += 3;
              swift_retain();
              swift_bridgeObjectRetain();
              sub_100027EA8();
              String.hash(into:)();
              swift_retain();
              sub_1001642A4(a1, v89);
              swift_bridgeObjectRelease();
              swift_release_n();
              --v87;
            }
            while (v87);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease_n();
          }
          else
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          swift_bridgeObjectRetain();
          sub_1001687F0(a1, v9);
          uint64_t v90 = swift_bridgeObjectRelease();
          uint64_t v63 = sub_100021DB8(v90, v91, v92, v93, v94, v95, v96, v97, 3, v237, v242, v248, v254, v261, v267, v272, v278, v283, v286,
                  v289,
                  v292,
                  v295,
                  v298,
                  v302,
                  v306,
                  v310,
                  v9,
                  v314,
                  v315,
                  v318,
                  v319,
                  v321,
                  v322,
                  v323,
                  v324,
                  v325);
LABEL_26:
          LOBYTE(v10) = v316;
          break;
        case 4:
          uint64_t v311 = *(void *)(v6 + 16);
          uint64_t v313 = *(void *)(v6 + 56);
          uint64_t v317 = *(unsigned __int8 *)(v6 + 64);
          uint64_t v32 = *(void *)(v322 + 16);
          uint64_t v31 = *(void *)(v322 + 24);
          unint64_t v33 = *(void *)(v322 + 32);
          uint64_t v307 = *(void *)(v322 + 40);
          uint64_t v34 = *(void *)(v322 + 56);
          uint64_t v273 = *(void *)(v322 + 48);
          uint64_t v35 = *(void *)(v322 + 64);
          uint64_t v299 = *(void *)(v6 + 40);
          uint64_t v303 = *(void *)(v322 + 72);
          uint64_t v36 = *(void *)(v322 + 80);
          uint64_t v37 = *(unsigned __int8 *)(v322 + 88);
          uint64_t v262 = *(void *)(v322 + 96);
          sub_100029960();
          Hasher._combine(_:)(*(void *)(v32 + 16));
          uint64_t v38 = *(void *)(v32 + 16);
          if (v38)
          {
            sub_100016724(4, v229, v237, v242, v248, v254, v262, v267, v273, v36, v35, v33, v34, v37, v31, v299, v303, v307, v311,
              v313,
              v314,
              v315,
              v317,
              v319,
              v321,
              v322,
              v323,
              v324,
              v325);
            swift_bridgeObjectRetain();
            sub_100025574(v31, v33, v39, v40, v41, v42, v43, v44, v37, v238, v243, v249, v255, v263, v268, v274, v279, v284, v287,
              v290,
              v293,
              v296,
              v300,
              v304,
              v308);
            swift_bridgeObjectRetain();
            uint64_t v45 = 0;
            do
            {
              ++v45;
              swift_retain();
              uint64_t v46 = sub_100027EA8();
              sub_1001642A4(v46, v47);
              swift_release();
            }
            while (v38 != v45);
            swift_bridgeObjectRelease();
          }
          else
          {
            sub_100016724(4, v229, v237, v242, v248, v254, v262, v267, v273, v36, v35, v33, v34, v37, v31, v299, v303, v307, v311,
              v313,
              v314,
              v315,
              v317,
              v319,
              v321,
              v322,
              v323,
              v324,
              v325);
            swift_bridgeObjectRetain();
            sub_100025574(v31, v288, v75, v76, v77, v78, v79, v80, v37, v239, v244, v250, v256, v264, v269, v275, v280, v285, v288,
              v291,
              v294,
              v297,
              v301,
              v305,
              v309);
          }
          uint64_t v81 = v289;
          uint64_t v267 = v32;
          switch(v292)
          {
            case 1:
              sub_10016B244();
              swift_retain();
              unint64_t v98 = v286;
              uint64_t v99 = v289;
              swift_bridgeObjectRetain();
              sub_100025EAC(1, v231, v237, v242, v248, v254, v261, v32, v272, v278, v283, v286, v289, v292, v295, v298, v302);
              swift_bridgeObjectRetain();
              swift_retain();
              swift_bridgeObjectRetain();
              String.hash(into:)();
              swift_retain();
              sub_1001642A4(a1, v306);
              swift_bridgeObjectRelease();
              sub_100026388();
              swift_bridgeObjectRetain();
              sub_1001687F0(a1, v31);
              goto LABEL_29;
            case 2:
              sub_10001EDC0();
              swift_retain();
              unint64_t v98 = v286;
              uint64_t v99 = v289;
              swift_bridgeObjectRetain();
              sub_100025EAC(2, v231, v237, v242, v248, v254, v261, v32, v272, v278, v283, v286, v289, v292, v295, v298, v302);
              swift_bridgeObjectRetain();
              swift_retain();
              swift_bridgeObjectRetain();
              String.hash(into:)();
              swift_retain();
              sub_1001642A4(a1, v306);
              swift_bridgeObjectRelease();
              sub_100026388();
              swift_bridgeObjectRetain();
              sub_100180220(a1, v31);
LABEL_29:
              swift_release();
              unint64_t v100 = v98;
              swift_bridgeObjectRelease();
              uint64_t v81 = v99;
              swift_bridgeObjectRelease_n();
              uint64_t v101 = v306;
              goto LABEL_82;
            case 3:
              sub_10002EB24();
              sub_10016AE48(v295, v286, v306, v31, v289, v283, v302, v278, 3);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain_n();
              swift_bridgeObjectRetain();
              String.hash(into:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRetain();
              String.hash(into:)();
              swift_bridgeObjectRelease();
              if (v283)
              {
                Hasher._combine(_:)(1u);
                swift_bridgeObjectRetain();
                String.hash(into:)();
                swift_bridgeObjectRelease();
              }
              else
              {
                Hasher._combine(_:)(0);
              }
              Swift::UInt v126 = *(void *)(v302 + 16);
              Hasher._combine(_:)(v126);
              if (v126)
              {
                swift_bridgeObjectRetain();
                uint64_t v127 = (unint64_t *)(v302 + 48);
                do
                {
                  unint64_t v128 = *v127;
                  v127 += 3;
                  swift_retain();
                  swift_bridgeObjectRetain();
                  sub_100027EA8();
                  String.hash(into:)();
                  swift_retain();
                  sub_1001642A4(a1, v128);
                  swift_bridgeObjectRelease();
                  swift_release_n();
                  --v126;
                }
                while (v126);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease_n();
              }
              else
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
              }
              swift_bridgeObjectRetain();
              uint64_t v129 = sub_100027EA8();
              sub_1001687F0(v129, v130);
              swift_bridgeObjectRelease();
              unint64_t v100 = v286;
              Swift::UInt v131 = v261;
              uint64_t v81 = v295;
              uint64_t v101 = v306;
              goto LABEL_83;
            case 4:
              memcpy(__dst, (const void *)(v295 + 16), sizeof(__dst));
              sub_100029960();
              unint64_t v100 = v286;
              sub_100027FD0(v295, v286, v306, v102, v103, v283, v302, v104, 4, v237, v242, v248, v254, v261, v32, v272, v278);
              sub_10016AFAC((uint64_t)__dst);
              AvroUnion.hash(into:)(a1);
              sub_10016B03C((uint64_t)__dst);
              uint64_t v101 = v306;
              goto LABEL_82;
            default:
              sub_100023F6C();
              switch((char)v31)
              {
                case 1:
                  sub_10001EDC0();
                  Swift::UInt32 v156 = v295;
                  goto LABEL_72;
                case 2:
                  sub_10002EB24();
                  Swift::UInt64 v157 = v295;
                  goto LABEL_76;
                case 3:
                  sub_100029960();
                  if ((v295 & 0x7FFFFF) == 0 && (v295 & 0x7F800000) == 0) {
                    Swift::UInt32 v156 = 0;
                  }
                  else {
                    Swift::UInt32 v156 = v295;
                  }
LABEL_72:
                  Hasher._combine(_:)(v156);
                  goto LABEL_81;
                case 4:
                  Hasher._combine(_:)(5uLL);
                  if ((v295 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
                    Swift::UInt64 v157 = v295;
                  }
                  else {
                    Swift::UInt64 v157 = 0;
                  }
LABEL_76:
                  Hasher._combine(_:)(v157);
                  goto LABEL_81;
                case 5:
                  Hasher._combine(_:)(6uLL);
                  uint64_t v159 = sub_1000295D0();
                  sub_100027FD0(v159, v286, v306, v160, v161, v283, v302, v162, v231, v237, v242, v248, v254, v261, v32, v272, v278);
                  unint64_t v100 = v286;
                  String.hash(into:)();
                  uint64_t v101 = v306;
                  break;
                case 6:
                  Hasher._combine(_:)(7uLL);
                  if (((v286 >> 60) & 3) != 0)
                  {
                    unint64_t v163 = v286 & 0xCFFFFFFFFFFFFFFFLL;
                    uint64_t v164 = sub_1000295D0();
                    unint64_t v166 = v165;
                    sub_10016AE48(v164, v165, v306, v31, v167, v168, v302, v278, v231);
                    sub_100027BCC(v295, v286 & 0xCFFFFFFFFFFFFFFFLL);
                    uint64_t v169 = v295;
                  }
                  else
                  {
                    uint64_t v202 = sub_10002572C(&qword_10021C9E8);
                    uint64_t v329 = v202;
                    unint64_t v330 = sub_10016B0CC();
                    v328[0] = v295;
                    v203 = sub_10001B620(v328, v202);
                    uint64_t v204 = *v203;
                    size_t v205 = *(void *)(*v203 + 16);
                    if (v205)
                    {
                      if (v205 <= 0xE)
                      {
                        memset(v326, 0, sizeof(v326));
                        char v327 = v205;
                        memcpy(v326, (const void *)(v204 + 32), v205);
                        uint64_t v169 = *(void *)v326;
                        sub_100028524();
                        uint64_t v259 = v221 | (v220 << 48);
                        uint64_t v222 = sub_1000295D0();
                        unint64_t v163 = v283;
                        sub_100023DB0(v222, v286, v306, v31, v289, v283, v302, v223, v231, v237, v242, v248, v259, v261, v267, v272, v278);
                        uint64_t v224 = v38;
                        unint64_t v166 = v286;
                        sub_10002664C(v224, v286, v306, v31, v289, v225, v226, v227, 0, v241, v247, v253, v260, v266, v271, v277, v282, v283, v286,
                          v289,
                          v292,
                          v295,
                          v298,
                          v302);
                      }
                      else
                      {
                        uint64_t v251 = v204 + 32;
                        type metadata accessor for __DataStorage();
                        uint64_t v245 = swift_allocObject();
                        uint64_t v206 = sub_1000295D0();
                        uint64_t v257 = v205;
                        unint64_t v207 = v283;
                        sub_100023DB0(v206, v286, v306, v31, v289, v283, v302, v208, v231, v237, v245, v251, v257, v261, v267, v272, v278);
                        uint64_t v209 = v38;
                        unint64_t v166 = v286;
                        sub_10002664C(v209, v286, v306, v31, v289, v210, v211, v212, 0, v240, v246, v252, v258, v265, v270, v276, v281, v283, v286,
                          v289,
                          v292,
                          v295,
                          v298,
                          v302);
                        uint64_t v213 = __DataStorage.init(bytes:length:)();
                        uint64_t v214 = v213;
                        if (v207 >= 0x7FFFFFFF)
                        {
                          type metadata accessor for Data.RangeReference();
                          uint64_t v169 = swift_allocObject();
                          *(void *)(v169 + 16) = 0;
                          *(void *)(v169 + 24) = v207;
                          unint64_t v163 = v214 | 0x8000000000000000;
                        }
                        else
                        {
                          uint64_t v169 = v207 << 32;
                          unint64_t v163 = v213 | 0x4000000000000000;
                        }
                      }
                    }
                    else
                    {
                      uint64_t v217 = sub_1000295D0();
                      sub_100023DB0(v217, v286, v306, v31, v289, v283, v302, v218, v231, v237, v242, v248, v254, v261, v267, v272, v278);
                      uint64_t v219 = v38;
                      unint64_t v166 = v286;
                      sub_10016AE48(v219, v286, v306, v31, v289, v283, v302, v295, 0);
                      uint64_t v169 = 0;
                      unint64_t v163 = 0xC000000000000000;
                    }
                    sub_10001CA50((uint64_t)v328);
                  }
                  Swift::UInt v228 = Data.hashValue.getter();
                  sub_1000291B4(v169, v163);
                  Hasher._combine(_:)(v228);
                  unint64_t v100 = v166;
                  uint64_t v101 = v306;
                  Swift::UInt v131 = v261;
                  uint64_t v81 = v295;
                  goto LABEL_83;
                case 7:
                  sub_100023F6C();
                  goto LABEL_81;
                default:
                  sub_10016B244();
                  Hasher._combine(_:)(v295 & 1);
LABEL_81:
                  unint64_t v100 = v286;
                  uint64_t v101 = v306;
                  uint64_t v81 = v295;
                  break;
              }
LABEL_82:
              Swift::UInt v131 = v261;
LABEL_83:
              uint64_t v170 = v81;
              uint64_t v2 = v101;
              sub_100029838(v170, v100, v101, v82, v83, v84, v85, v86, v292);
              Hasher._combine(_:)(v131);
              swift_bridgeObjectRelease();
              uint64_t v63 = sub_100029838(v295, v100, v2, v171, v172, v173, v174, v175, v292);
              LOBYTE(v10) = v316;
              break;
          }
          break;
        default:
          sub_100023F6C();
          switch((char)v324)
          {
            case 1:
              sub_10001EDC0();
              uint64_t v11 = v322;
              Swift::UInt32 v106 = v322;
              goto LABEL_45;
            case 2:
              sub_10002EB24();
              uint64_t v11 = v322;
              Swift::UInt64 v105 = v322;
              goto LABEL_37;
            case 3:
              sub_100029960();
              uint64_t v11 = v322;
              if ((v322 & 0x7FFFFF) == 0 && (v322 & 0x7F800000) == 0) {
                Swift::UInt32 v106 = 0;
              }
              else {
                Swift::UInt32 v106 = v322;
              }
LABEL_45:
              Hasher._combine(_:)(v106);
              goto LABEL_46;
            case 4:
              Hasher._combine(_:)(5uLL);
              uint64_t v11 = v322;
              if ((v322 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
                Swift::UInt64 v105 = v322;
              }
              else {
                Swift::UInt64 v105 = 0;
              }
LABEL_37:
              Hasher._combine(_:)(v105);
              goto LABEL_46;
            case 5:
              Hasher._combine(_:)(6uLL);
              uint64_t v298 = v8;
              sub_10016AE48(v322, v323, v7, v324, v319, v8, v325, v9, 0);
              sub_10016B218();
              uint64_t v63 = String.hash(into:)();
              goto LABEL_84;
            case 6:
              Hasher._combine(_:)(7uLL);
              uint64_t v316 = v10;
              if (((v323 >> 60) & 3) != 0)
              {
                uint64_t v109 = v8;
                unint64_t v110 = v323 & 0xCFFFFFFFFFFFFFFFLL;
                uint64_t v111 = sub_10002418C();
                uint64_t v112 = v319;
                sub_10002AEF8(v111, v113, v114, v115, v319, v8, v116, v117, 0);
                uint64_t v118 = sub_100023CCC();
                sub_10002AEF8(v118, v119, v120, v121, v319, v8, v122, v123, v233);
                sub_100027BCC(v322, v323 & 0xCFFFFFFFFFFFFFFFLL);
                uint64_t v124 = v7;
                uint64_t v125 = v322;
              }
              else
              {
                uint64_t v132 = sub_10002572C(&qword_10021C9E8);
                uint64_t v329 = v132;
                unint64_t v330 = sub_10016B0CC();
                v328[0] = v322;
                uint64_t v133 = sub_10001B620(v328, v132);
                uint64_t v136 = *v133;
                size_t v137 = *(void *)(*v133 + 16);
                if (v137)
                {
                  uint64_t v298 = v8;
                  if (v137 <= 0xE)
                  {
                    memset(v326, 0, sizeof(v326));
                    char v327 = v137;
                    memcpy(v326, (const void *)(v136 + 32), v137);
                    uint64_t v310 = v7;
                    uint64_t v125 = *(void *)v326;
                    sub_100028524();
                    unint64_t v110 = v185 | (v186 << 48);
                    sub_10002C780(v322, v323, v187, v324, v319, v188, v189, v190, 0);
                    uint64_t v191 = sub_10002E7E8();
                    sub_10002C780(v191, v192, v193, v324, v319, v194, v195, v196, v235);
                    uint64_t v197 = sub_10002E7E8();
                    uint64_t v124 = v198;
                    uint64_t v112 = v319;
                    uint64_t v109 = v298;
                    sub_10002AEF8(v197, v199, v198, v324, v319, v298, v200, v201, v236);
                  }
                  else
                  {
                    type metadata accessor for __DataStorage();
                    uint64_t v302 = swift_allocObject();
                    unint64_t v306 = v137;
                    uint64_t v138 = sub_10002418C();
                    uint64_t v109 = v319;
                    uint64_t v112 = v8;
                    sub_10002C780(v138, v139, v140, v141, v319, v142, v143, v144, 0);
                    uint64_t v145 = sub_100023CCC();
                    sub_10002C780(v145, v146, v147, v148, v319, v149, v150, v151, v234);
                    uint64_t v124 = v7;
                    sub_100029F7C(v322, v323, v7, v2, v152, v298, v153, v9, 0);
                    uint64_t v154 = __DataStorage.init(bytes:length:)();
                    uint64_t v155 = v154;
                    if (v137 >= 0x7FFFFFFF)
                    {
                      type metadata accessor for Data.RangeReference();
                      uint64_t v125 = swift_allocObject();
                      *(void *)(v125 + 16) = 0;
                      *(void *)(v125 + 24) = v137;
                      unint64_t v110 = v155 | 0x8000000000000000;
                    }
                    else
                    {
                      uint64_t v125 = v137 << 32;
                      unint64_t v110 = v154 | 0x4000000000000000;
                    }
                  }
                }
                else
                {
                  uint64_t v112 = v324;
                  uint64_t v109 = v319;
                  sub_10002AEF8(v322, v323, v7, v324, v319, v8, v134, v135, 0);
                  uint64_t v176 = sub_10002E93C();
                  sub_10002AEF8(v176, v177, v178, v179, v319, v8, v180, v181, 0);
                  uint64_t v182 = v8;
                  uint64_t v124 = v7;
                  sub_100029F7C(v322, v323, v7, v324, v183, v182, v184, v9, 0);
                  uint64_t v125 = 0;
                  unint64_t v110 = 0xC000000000000000;
                }
                sub_10001CA50((uint64_t)v328);
                LOBYTE(v2) = v324;
              }
              uint64_t v215 = v9;
              Swift::UInt v216 = Data.hashValue.getter();
              sub_1000291B4(v125, v110);
              Hasher._combine(_:)(v216);
              uint64_t v63 = sub_100093A68(v322, v323, v124, v2, v112, v109, v325, v215, 0);
              goto LABEL_26;
            case 7:
              sub_100023F6C();
              uint64_t v108 = v322;
              goto LABEL_47;
            default:
              sub_10016B244();
              uint64_t v11 = v322;
              Hasher._combine(_:)(v322 & 1);
LABEL_46:
              uint64_t v108 = v11;
LABEL_47:
              uint64_t v63 = sub_100093A68(v108, v323, v7, v324, v319, v8, v325, v9, 0);
              break;
          }
          break;
      }
LABEL_84:
      sub_100021DB8(v63, v64, v65, v66, v67, v68, v69, v70, v10, v237, v242, v248, v254, v261, v267, v272, v278, v283, v286,
        v289,
        v292,
        v295,
        v298,
        v302,
        v306,
        v310,
        v312,
        v314,
        v315,
        v316,
        v319,
        v321,
        v322,
        v323,
        v324,
        v325);
    }
    while (v320 != v315);
  }
}

void sub_100169998(uint64_t a1, uint64_t a2)
{
  sub_100028ED8(a1, a2);
  if (v2)
  {
    Swift::UInt v5 = (uint64_t *)(v4 + 48);
    do
    {
      uint64_t v6 = *v5;
      v5 += 3;
      swift_retain();
      swift_bridgeObjectRetain();
      sub_10016B1BC();
      swift_retain();
      sub_1001642A4(v3, v6);
      swift_bridgeObjectRelease();
      swift_release_n();
      --v2;
    }
    while (v2);
  }
}

unint64_t sub_100169A28()
{
  unint64_t result = qword_100223F28;
  if (!qword_100223F28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100223F28);
  }
  return result;
}

unint64_t sub_100169A74()
{
  unint64_t result = qword_100223F38;
  if (!qword_100223F38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100223F38);
  }
  return result;
}

unint64_t sub_100169AC0()
{
  unint64_t result = qword_100223F50;
  if (!qword_100223F50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100223F50);
  }
  return result;
}

unint64_t sub_100169B0C()
{
  unint64_t result = qword_100223F70;
  if (!qword_100223F70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100223F70);
  }
  return result;
}

uint64_t sub_100169B58(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1000371D4(a2);
    a3();
    sub_10002E854();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100169BC4()
{
  unint64_t result = qword_100223F88;
  if (!qword_100223F88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100223F88);
  }
  return result;
}

unint64_t sub_100169C14()
{
  unint64_t result = qword_100223F90;
  if (!qword_100223F90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100223F90);
  }
  return result;
}

unint64_t sub_100169C64()
{
  unint64_t result = qword_100223F98;
  if (!qword_100223F98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100223F98);
  }
  return result;
}

unint64_t sub_100169CB4()
{
  unint64_t result = qword_100223FA0;
  if (!qword_100223FA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100223FA0);
  }
  return result;
}

unint64_t sub_100169D04()
{
  unint64_t result = qword_100223FA8;
  if (!qword_100223FA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100223FA8);
  }
  return result;
}

unint64_t sub_100169D54()
{
  unint64_t result = qword_100223FB0;
  if (!qword_100223FB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100223FB0);
  }
  return result;
}

unint64_t sub_100169DA4()
{
  unint64_t result = qword_100223FB8;
  if (!qword_100223FB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100223FB8);
  }
  return result;
}

void type metadata accessor for AvroSchema()
{
}

uint64_t destroy for AvroRecordSchema()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for AvroRecordSchema(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for AvroRecordSchema(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for AvroRecordSchema(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AvroRecordSchema(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 56))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AvroRecordSchema(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for AvroRecordSchema()
{
}

void type metadata accessor for AvroRecordSchema.Field()
{
}

void type metadata accessor for AvroArraySchema()
{
}

uint64_t _s9SwiftAvro16AvroRecordSchemaV5FieldVwxx_0()
{
  swift_bridgeObjectRelease();

  return swift_release();
}

void *_s9SwiftAvro15AvroArraySchemaVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t _s9SwiftAvro16AvroRecordSchemaV5FieldVwca_0()
{
  sub_100021398();
  *uint64_t v3 = *v2;
  *(void *)(v1 + 8) = v2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v1 + 16) = *(void *)(v0 + 16);
  swift_retain();
  swift_release();
  return v1;
}

void *_s9SwiftAvro15AvroArraySchemaVwta_0()
{
  sub_100021398();
  uint64_t v3 = v2[1];
  *uint64_t v1 = *v2;
  v1[1] = v3;
  swift_bridgeObjectRelease();
  v1[2] = *(void *)(v0 + 16);
  swift_release();
  return v1;
}

void type metadata accessor for AvroMapSchema()
{
}

void type metadata accessor for AvroPrimitiveSchema()
{
}

void type metadata accessor for AvroUnionSchema()
{
}

void *_s9SwiftAvro10AvroSchemaVwCP_0(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  return a1;
}

uint64_t _s9SwiftAvro10AvroSchemaVwxx_0()
{
  return swift_release();
}

void *_s9SwiftAvro10AvroSchemaVwca_0(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  return a1;
}

void *_s9SwiftAvro10AvroSchemaVwta_0(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t _s9SwiftAvro10AvroSchemaVwet_0(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7C && *(unsigned char *)(a1 + 8)) {
      return sub_100029414(*(_DWORD *)a1 + 123);
    }
    unsigned int v3 = (((*(void *)a1 >> 57) >> 4) | (8 * ((*(void *)a1 >> 57) & 8 | *(void *)a1 & 7))) ^ 0x7F;
    if (v3 >= 0x7B) {
      return sub_100029414(-1);
    }
  }
  else
  {
    unsigned int v3 = -1;
  }
  return sub_100029414(v3);
}

uint64_t _s9SwiftAvro10AvroSchemaVwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7B)
  {
    *(void *)unint64_t result = a2 - 124;
    if (a3 >= 0x7C) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7C) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 3) & 0xF | (16 * (-a2 & 0x7F));
      *(void *)unint64_t result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t sub_10016A368(void *a1)
{
  return *a1 >> 61;
}

void *sub_10016A374(void *result)
{
  *result &= 0x1FFFFFFFFFFFFFFFuLL;
  return result;
}

uint64_t *sub_10016A384(uint64_t *result, uint64_t a2)
{
  *unint64_t result = *result & 0xFFFFFFFFFFFFFF8 | (a2 << 61);
  return result;
}

void type metadata accessor for AvroSchema._Schema()
{
}

ValueMetadata *type metadata accessor for AvroRecordSchema.Field.CodingKeys()
{
  return &type metadata for AvroRecordSchema.Field.CodingKeys;
}

uint64_t _s9SwiftAvro19AvroPrimitiveSchemaVwet_0(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return sub_100029414(-1);
  }
  if (a2 < 0xF9) {
    goto LABEL_17;
  }
  if (a2 + 7 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 7) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return sub_100029414((*a1 | (v4 << 8)) - 8);
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return sub_100029414((*a1 | (v4 << 8)) - 8);
    }
    int v4 = a1[1];
    if (a1[1]) {
      return sub_100029414((*a1 | (v4 << 8)) - 8);
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 8;
  int v8 = v6 - 8;
  if (!v7) {
    int v8 = -1;
  }
  return sub_100029414(v8);
}

unsigned char *_s9SwiftAvro19AvroPrimitiveSchemaVwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *unint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10016A50CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

void type metadata accessor for AvroPrimitiveSchema.Primitive()
{
}

unsigned char *storeEnumTagSinglePayload for AvroRecordSchema.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10016A60CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AvroRecordSchema.CodingKeys()
{
  return &type metadata for AvroRecordSchema.CodingKeys;
}

ValueMetadata *type metadata accessor for AvroMapSchema.CodingKeys()
{
  return &type metadata for AvroMapSchema.CodingKeys;
}

uint64_t _s9SwiftAvro16AvroRecordSchemaV5FieldV10CodingKeysOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return sub_100029414(-1);
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return sub_100029414((*a1 | (v4 << 8)) - 2);
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return sub_100029414((*a1 | (v4 << 8)) - 2);
    }
    int v4 = a1[1];
    if (a1[1]) {
      return sub_100029414((*a1 | (v4 << 8)) - 2);
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return sub_100029414(v8);
}

unsigned char *_s9SwiftAvro16AvroRecordSchemaV5FieldV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10016A7A4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AvroArraySchema.CodingKeys()
{
  return &type metadata for AvroArraySchema.CodingKeys;
}

unsigned char *sub_10016A7DC(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x10016A878);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void type metadata accessor for AvroPrimitiveSchema.CodingKeys()
{
}

unint64_t sub_10016A8B0()
{
  unint64_t result = qword_100223FC0;
  if (!qword_100223FC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100223FC0);
  }
  return result;
}

unint64_t sub_10016A900()
{
  unint64_t result = qword_100223FC8;
  if (!qword_100223FC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100223FC8);
  }
  return result;
}

unint64_t sub_10016A950()
{
  unint64_t result = qword_100223FD0;
  if (!qword_100223FD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100223FD0);
  }
  return result;
}

unint64_t sub_10016A9A0()
{
  unint64_t result = qword_100223FD8;
  if (!qword_100223FD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100223FD8);
  }
  return result;
}

unint64_t sub_10016A9F0()
{
  unint64_t result = qword_100223FE0;
  if (!qword_100223FE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100223FE0);
  }
  return result;
}

unint64_t sub_10016AA40()
{
  unint64_t result = qword_100223FE8;
  if (!qword_100223FE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100223FE8);
  }
  return result;
}

unint64_t sub_10016AA90()
{
  unint64_t result = qword_100223FF0;
  if (!qword_100223FF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100223FF0);
  }
  return result;
}

unint64_t sub_10016AAE0()
{
  unint64_t result = qword_100223FF8;
  if (!qword_100223FF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100223FF8);
  }
  return result;
}

unint64_t sub_10016AB30()
{
  unint64_t result = qword_100224000;
  if (!qword_100224000)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100224000);
  }
  return result;
}

unint64_t sub_10016AB80()
{
  unint64_t result = qword_100224008;
  if (!qword_100224008)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100224008);
  }
  return result;
}

unint64_t sub_10016ABD0()
{
  unint64_t result = qword_100224010;
  if (!qword_100224010)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100224010);
  }
  return result;
}

unint64_t sub_10016AC20()
{
  unint64_t result = qword_100224018;
  if (!qword_100224018)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100224018);
  }
  return result;
}

unint64_t sub_10016AC70()
{
  unint64_t result = qword_100224020;
  if (!qword_100224020)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100224020);
  }
  return result;
}

unint64_t sub_10016ACC0()
{
  unint64_t result = qword_100224028;
  if (!qword_100224028)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100224028);
  }
  return result;
}

unint64_t sub_10016AD10()
{
  unint64_t result = qword_100224030;
  if (!qword_100224030)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100224030);
  }
  return result;
}

unint64_t sub_10016AD60()
{
  unint64_t result = qword_100224038;
  if (!qword_100224038)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100224038);
  }
  return result;
}

unint64_t sub_10016ADB0()
{
  unint64_t result = qword_100224040;
  if (!qword_100224040)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100224040);
  }
  return result;
}

unint64_t sub_10016ADFC()
{
  unint64_t result = qword_100224048;
  if (!qword_100224048)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100224048);
  }
  return result;
}

uint64_t sub_10016AE48(uint64_t result, unint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  switch(a9)
  {
    case 0:
      unint64_t result = sub_10016AF60(result, a2, a3, a4);
      break;
    case 1:
    case 2:
      swift_retain();
      swift_bridgeObjectRetain();
      goto LABEL_7;
    case 3:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
LABEL_7:
      unint64_t result = swift_bridgeObjectRetain();
      break;
    case 4:
      unint64_t result = swift_retain();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10016AF60(uint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  if (a4 == 6) {
    return sub_10016AF84(result, a2);
  }
  if (a4 == 5) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_10016AF84(uint64_t result, unint64_t a2)
{
  uint64_t v2 = (a2 >> 60) & 3;
  if (v2 == 2 || v2 == 1) {
    return sub_100027BCC(result, a2 & 0xCFFFFFFFFFFFFFFFLL);
  }
  if (!v2) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_10016AFAC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 56);
  uint64_t v9 = *(void *)(a1 + 64);
  char v10 = *(unsigned char *)(a1 + 72);
  swift_bridgeObjectRetain();
  sub_10016AE48(v2, v3, v4, v5, v6, v7, v8, v9, v10);
  return a1;
}

uint64_t sub_10016B03C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 56);
  uint64_t v9 = *(void *)(a1 + 64);
  char v10 = *(unsigned char *)(a1 + 72);
  swift_bridgeObjectRelease();
  sub_100093A68(v2, v3, v4, v5, v6, v7, v8, v9, v10);
  return a1;
}

unint64_t sub_10016B0CC()
{
  unint64_t result = qword_100224050;
  if (!qword_100224050)
  {
    sub_1000371D4(&qword_10021C9E8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100224050);
  }
  return result;
}

uint64_t sub_10016B120()
{
  swift_bridgeObjectRelease();
  sub_100093A68(*(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(unsigned char *)(v0 + 88));

  return _swift_deallocObject(v0, 104, 7);
}

uint64_t sub_10016B1BC()
{
  return String.hash(into:)();
}

uint64_t sub_10016B1D8()
{
  return swift_retain();
}

uint64_t sub_10016B1F8()
{
  return swift_retain();
}

uint64_t sub_10016B218()
{
  return v0;
}

unint64_t sub_10016B224()
{
  *(unsigned char *)(v0 - 81) = 1;
  return sub_100169A74();
}

void sub_10016B244()
{
  Hasher._combine(_:)(1uLL);
}

BOOL sub_10016B25C()
{
  return *(void *)(v0 + 24) == *(void *)(v0 + 32);
}

uint64_t ByteBuffer.init()()
{
  return 0;
}

Swift::Int __swiftcall ByteBuffer.writeBytes(_:)(Swift::OpaquePointer a1)
{
  if (!*((void *)a1._rawValue + 2)) {
    return 0;
  }
  Data._Representation.append(contentsOf:)();
  return *((void *)a1._rawValue + 2);
}

void sub_10016B2BC()
{
  static Endianness.host = 1;
}

char *Endianness.host.unsafeMutableAddressor()
{
  if (qword_100223E88 != -1) {
    swift_once();
  }
  return &static Endianness.host;
}

uint64_t static Endianness.host.getter()
{
  if (qword_100223E88 != -1) {
    swift_once();
  }
  return static Endianness.host;
}

uint64_t ByteBuffer.data.getter(uint64_t a1, unint64_t a2)
{
  return a1;
}

uint64_t ByteBuffer.readerIndex.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

double ByteBuffer.readableBytesView.getter@<D0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  ByteBufferView.init(_:)(a1, a2, a3, v9);
  sub_100027BCC(a1, a2);
  double result = *(double *)v9;
  long long v8 = v9[1];
  *(_OWORD *)a4 = v9[0];
  *(_OWORD *)(a4 + 16) = v8;
  *(void *)(a4 + 32) = v10;
  return result;
}

uint64_t ByteBufferView.init(_:)@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v4 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v4) = HIDWORD(result) - result;
      if (__OFSUB__(HIDWORD(result), result)) {
        goto LABEL_18;
      }
      uint64_t v4 = (int)v4;
LABEL_6:
      if (v4 < a3)
      {
        __break(1u);
LABEL_16:
        __break(1u);
LABEL_17:
        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
LABEL_21:
        __break(1u);
        JUMPOUT(0x10016B4E0);
      }
      if (a3 < 0) {
        goto LABEL_16;
      }
      uint64_t v8 = 0;
      switch(a2 >> 62)
      {
        case 1uLL:
          if (__OFSUB__(HIDWORD(result), result)) {
            goto LABEL_20;
          }
          uint64_t v8 = HIDWORD(result) - (int)result;
LABEL_13:
          if (v8 < v4) {
            goto LABEL_17;
          }
          *a4 = result;
          a4[1] = a2;
          a4[2] = a3;
          a4[3] = a3;
          a4[4] = v4;
          return result;
        case 2uLL:
          uint64_t v10 = *(void *)(result + 16);
          uint64_t v9 = *(void *)(result + 24);
          uint64_t v8 = v9 - v10;
          if (!__OFSUB__(v9, v10)) {
            goto LABEL_13;
          }
          goto LABEL_21;
        case 3uLL:
          goto LABEL_13;
        default:
          uint64_t v8 = BYTE6(a2);
          goto LABEL_13;
      }
    case 2uLL:
      uint64_t v6 = *(void *)(result + 16);
      uint64_t v5 = *(void *)(result + 24);
      BOOL v7 = __OFSUB__(v5, v6);
      uint64_t v4 = v5 - v6;
      if (!v7) {
        goto LABEL_6;
      }
      goto LABEL_19;
    case 3uLL:
      goto LABEL_6;
    default:
      uint64_t v4 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t ByteBuffer.count.getter(uint64_t a1, unint64_t a2)
{
  uint64_t result = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      BOOL v4 = __OFSUB__(HIDWORD(a1), a1);
      int v5 = HIDWORD(a1) - a1;
      if (v4)
      {
        __break(1u);
LABEL_8:
        __break(1u);
        JUMPOUT(0x10016B560);
      }
      return v5;
    case 2uLL:
      uint64_t v8 = a1 + 16;
      uint64_t v6 = *(void *)(a1 + 16);
      uint64_t v7 = *(void *)(v8 + 8);
      uint64_t result = v7 - v6;
      if (!__OFSUB__(v7, v6)) {
        return result;
      }
      goto LABEL_8;
    case 3uLL:
      return result;
    default:
      return BYTE6(a2);
  }
}

uint64_t ByteBuffer._toEndianness<A>(value:endianness:)(uint64_t a1, char a2)
{
  if (a2) {
    return dispatch thunk of FixedWidthInteger.littleEndian.getter();
  }
  else {
    return dispatch thunk of FixedWidthInteger.bigEndian.getter();
  }
}

uint64_t sub_10016B5AC(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v3) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_9;
      }
      uint64_t v3 = (int)v3;
LABEL_6:
      uint64_t result = v3 - a3;
      if (__OFSUB__(v3, a3))
      {
        __break(1u);
LABEL_9:
        __break(1u);
LABEL_10:
        __break(1u);
        JUMPOUT(0x10016B614);
      }
      return result;
    case 2uLL:
      uint64_t v5 = *(void *)(a1 + 16);
      uint64_t v4 = *(void *)(a1 + 24);
      BOOL v6 = __OFSUB__(v4, v5);
      uint64_t v3 = v4 - v5;
      if (!v6) {
        goto LABEL_6;
      }
      goto LABEL_10;
    case 3uLL:
      goto LABEL_6;
    default:
      uint64_t v3 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t ByteBuffer.init(bytes:)(uint64_t a1)
{
  if (*(void *)(a1 + 16)) {
    Data._Representation.append(contentsOf:)();
  }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t ByteBuffer.readInteger<A>(endianness:as:)@<X0>(void *a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for Optional();
  sub_100026808();
  uint64_t v7 = v6;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v19 - v9;
  uint64_t v11 = *(void *)(v2 + 16);
  ByteBuffer.getInteger<A>(at:endianness:as:)(v11, v11, a1, (uint64_t)&v19 - v9);
  if (sub_100027BA4((uint64_t)v10, 1, (uint64_t)a1) == 1)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v5);
    uint64_t v12 = a2;
    uint64_t v13 = 1;
    return sub_10002538C(v12, v13, 1, (uint64_t)a1);
  }
  uint64_t v14 = *(a1 - 1) + 32;
  uint64_t result = (*(uint64_t (**)(uint64_t, char *, void *))v14)(a2, v10, a1);
  uint64_t v16 = *(void *)(v14 + 32);
  BOOL v17 = __OFADD__(v11, v16);
  uint64_t v18 = v11 + v16;
  if (!v17)
  {
    *(void *)(v2 + 16) = v18;
    uint64_t v12 = a2;
    uint64_t v13 = 0;
    return sub_10002538C(v12, v13, 1, (uint64_t)a1);
  }
  __break(1u);
  return result;
}

uint64_t sub_10016B810(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  if (a1 >= a5)
  {
    if (a1 == 0x7FFFFFFFFFFFFFFFLL)
    {
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      __break(1u);
    }
    switch(a4 >> 62)
    {
      case 1uLL:
        if ((int)a3 > a3 >> 32) {
          goto LABEL_18;
        }
        sub_100027BCC(a3, a4);
        uint64_t v14 = __DataStorage._bytes.getter();
        if (!v14) {
          goto LABEL_10;
        }
        uint64_t v15 = __DataStorage._offset.getter();
        if (__OFSUB__((int)a3, v15)) {
          goto LABEL_19;
        }
        v14 += (int)a3 - v15;
LABEL_10:
        __DataStorage._length.getter();
        int v7 = *(unsigned __int8 *)(v14 + a1);
        sub_1000291B4(a3, a4);
        break;
      case 2uLL:
        uint64_t v16 = *(void *)(a3 + 16);
        swift_retain();
        swift_retain();
        uint64_t v17 = __DataStorage._bytes.getter();
        if (!v17) {
          goto LABEL_14;
        }
        uint64_t v18 = __DataStorage._offset.getter();
        if (__OFSUB__(v16, v18)) {
          goto LABEL_20;
        }
        v17 += v16 - v18;
LABEL_14:
        __DataStorage._length.getter();
        int v7 = *(unsigned __int8 *)(v17 + a1);
        swift_release();
        swift_release();
        return v7 | ((a1 < a5) << 8);
      case 3uLL:
        memset(v20, 0, 14);
        int v7 = *((unsigned __int8 *)v20 + a1);
        return v7 | ((a1 < a5) << 8);
      default:
        LOBYTE(v20[0]) = a3;
        sub_100028008();
        BYTE3(v20[0]) = v10;
        BYTE4(v20[0]) = v11;
        sub_10002C79C();
        BYTE5(v20[1]) = v12;
        int v7 = *(unsigned __int8 *)(v13 + a1);
        return v7 | ((a1 < a5) << 8);
    }
  }
  else
  {
    int v7 = 0;
  }
  return v7 | ((a1 < a5) << 8);
}

void sub_10016B9DC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int __dst, char a11, char a12, char a13, char a14, __int16 a15, char a16, uint64_t a17, int a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  sub_100024488();
  a31 = v32;
  a32 = v36;
  if (v33 >= v37)
  {
    uint64_t v39 = v33;
    uint64_t v40 = v33 + 4;
    if (__OFADD__(v33, 4))
    {
      __break(1u);
LABEL_25:
      __break(1u);
LABEL_26:
      __break(1u);
LABEL_27:
      __break(1u);
LABEL_28:
      __break(1u);
    }
    unint64_t v41 = v35;
    uint64_t v42 = v34;
    switch(v35 >> 62)
    {
      case 1uLL:
        if ((int)v34 > v34 >> 32) {
          goto LABEL_25;
        }
        sub_100027BCC(v34, v35);
        uint64_t v44 = __DataStorage._bytes.getter();
        if (!v44) {
          goto LABEL_10;
        }
        uint64_t v45 = __DataStorage._offset.getter();
        if (__OFSUB__((int)v42, v45)) {
          goto LABEL_27;
        }
        v44 += (int)v42 - v45;
LABEL_10:
        __DataStorage._length.getter();
        __dst = 0;
        if (v44) {
          memcpy(&__dst, (const void *)(v44 + v39), v40 - v39);
        }
        sub_1000291B4(v42, v41);
        break;
      case 2uLL:
        uint64_t v46 = *(void *)(v34 + 16);
        uint64_t v47 = *(void *)(v34 + 24);
        swift_retain();
        swift_retain();
        uint64_t v48 = __DataStorage._bytes.getter();
        if (!v48) {
          goto LABEL_15;
        }
        uint64_t v49 = __DataStorage._offset.getter();
        if (__OFSUB__(v46, v49)) {
          goto LABEL_28;
        }
        v48 += v46 - v49;
LABEL_15:
        if (__OFSUB__(v47, v46)) {
          goto LABEL_26;
        }
        __DataStorage._length.getter();
        __dst = 0;
        if (v48) {
          memcpy(&__dst, (const void *)(v48 + v39), v40 - v39);
        }
        swift_release();
        swift_release();
        break;
      case 3uLL:
        sub_10002A874();
        goto LABEL_19;
      default:
        LOBYTE(__dst) = v34;
        sub_100028008();
        HIBYTE(__dst) = v43;
        a11 = BYTE4(v42);
        a12 = BYTE5(v42);
        a13 = BYTE6(v42);
        a14 = HIBYTE(v42);
        a15 = v41;
        a16 = BYTE2(v41);
        sub_100025EF4();
LABEL_19:
        sub_10002AF10();
        sub_10016EE68(v50, v51, v52, v53, v54, v55, v56, v57, v58);
        char v38 = a19;
        goto LABEL_23;
    }
    char v38 = 0;
  }
  else
  {
    char v38 = 1;
  }
LABEL_23:
  LOBYTE(__dst) = v38;
  sub_100017D74();
}

void sub_10016BC48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  sub_100024488();
  a24 = v25;
  a25 = v29;
  if (v26 >= v30)
  {
    uint64_t v31 = v26;
    uint64_t v32 = v26 + 8;
    if (__OFADD__(v26, 8))
    {
      __break(1u);
LABEL_23:
      __break(1u);
LABEL_24:
      __break(1u);
LABEL_25:
      __break(1u);
LABEL_26:
      __break(1u);
    }
    unint64_t v33 = v28;
    uint64_t v34 = v27;
    switch(v28 >> 62)
    {
      case 1uLL:
        if ((int)v27 > v27 >> 32) {
          goto LABEL_23;
        }
        sub_100027BCC(v27, v28);
        uint64_t v37 = __DataStorage._bytes.getter();
        if (!v37) {
          goto LABEL_9;
        }
        uint64_t v38 = __DataStorage._offset.getter();
        if (__OFSUB__((int)v34, v38)) {
          goto LABEL_25;
        }
        v37 += (int)v34 - v38;
LABEL_9:
        __DataStorage._length.getter();
        *(void *)&a9 = 0;
        if (v37) {
          memcpy(&a9, (const void *)(v37 + v31), v32 - v31);
        }
        sub_1000291B4(v34, v33);
        break;
      case 2uLL:
        uint64_t v39 = *(void *)(v27 + 16);
        uint64_t v40 = *(void *)(v27 + 24);
        swift_retain();
        swift_retain();
        uint64_t v41 = __DataStorage._bytes.getter();
        if (!v41) {
          goto LABEL_14;
        }
        uint64_t v42 = __DataStorage._offset.getter();
        if (__OFSUB__(v39, v42)) {
          goto LABEL_26;
        }
        v41 += v39 - v42;
LABEL_14:
        if (__OFSUB__(v40, v39)) {
          goto LABEL_24;
        }
        __DataStorage._length.getter();
        *(void *)&a9 = 0;
        if (v41) {
          memcpy(&a9, (const void *)(v41 + v31), v32 - v31);
        }
        swift_release();
        swift_release();
        break;
      case 3uLL:
        *(void *)((char *)&a9 + 6) = 0;
        *(void *)&a9 = 0;
        goto LABEL_18;
      default:
        *(void *)&a9 = v27;
        BYTE8(a9) = v28;
        sub_100028008();
        BYTE11(a9) = v35;
        BYTE12(a9) = v36;
        BYTE13(a9) = BYTE5(v33);
LABEL_18:
        sub_10002AF10();
        sub_10016EEA0(v43, v44, v45, v46, v47, v48, v49, v50, v51);
        break;
    }
  }
  sub_100017D74();
}

uint64_t ByteBuffer.getInteger<A>(at:endianness:as:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X5>, void *a3@<X6>, uint64_t a4@<X8>)
{
  uint64_t v5 = *(void *)(*(a3 - 1) + 64);
  if (result < a2 || v5 < 0)
  {
    return sub_10002538C(a4, 1, 1, (uint64_t)a3);
  }
  else if (__OFADD__(result, v5))
  {
    __break(1u);
  }
  else if (a3 == (void *)&type metadata for UInt8)
  {
    __chkstk_darwin(result);
    ByteBuffer.withUnsafeBytes<A>(_:)();
    return sub_10002538C(a4, 0, 1, (uint64_t)&type metadata for UInt8);
  }
  else
  {
    __chkstk_darwin(result);
    type metadata accessor for Optional();
    return ByteBuffer.withUnsafeBytes<A>(_:)();
  }
  return result;
}

Swift::Void __swiftcall ByteBuffer.moveReaderIndex(forwardBy:)(Swift::Int forwardBy)
{
  uint64_t v2 = *(void *)(v1 + 16);
  BOOL v3 = __OFADD__(v2, forwardBy);
  Swift::Int v4 = v2 + forwardBy;
  if (v3) {
    __break(1u);
  }
  else {
    *(void *)(v1 + 16) = v4;
  }
}

Swift::String_optional __swiftcall ByteBuffer.readString(length:)(Swift::Int length)
{
  if (length < 0)
  {
    uint64_t v9 = 0;
    char v10 = 0;
  }
  else
  {
    if (__OFADD__(v1[2], length))
    {
      __break(1u);
      goto LABEL_23;
    }
    uint64_t v3 = *v1;
    unint64_t v4 = v1[1];
    switch(v4 >> 62)
    {
      case 1uLL:
        uint64_t v26 = (uint64_t)&v26;
        if (v3 >> 32 < (int)v3) {
          goto LABEL_24;
        }
        sub_100027BCC(v3, v4);
        uint64_t v11 = __DataStorage._bytes.getter();
        if (!v11) {
          goto LABEL_10;
        }
        uint64_t v12 = __DataStorage._offset.getter();
        if (__OFSUB__((int)v3, v12)) {
          goto LABEL_26;
        }
        v11 += (int)v3 - v12;
LABEL_10:
        __DataStorage._length.getter();
        sub_10002657C();
        sub_100027330(v11, v13, v14);
        sub_1000291B4(v3, v4);
        long long v15 = v35;
        break;
      case 2uLL:
        uint64_t v16 = *(void *)(v3 + 16);
        uint64_t v17 = *(void *)(v3 + 24);
        swift_retain();
        swift_retain();
        uint64_t v18 = __DataStorage._bytes.getter();
        if (!v18) {
          goto LABEL_14;
        }
        uint64_t v19 = __DataStorage._offset.getter();
        if (__OFSUB__(v16, v19)) {
          goto LABEL_27;
        }
        v18 += v16 - v19;
LABEL_14:
        if (__OFSUB__(v17, v16)) {
          goto LABEL_25;
        }
        __DataStorage._length.getter();
        sub_10002657C();
        sub_100027330(v18, v20, v21);
        swift_release();
        swift_release();
        long long v15 = v35;
        break;
      case 3uLL:
        sub_10002A874();
        goto LABEL_17;
      default:
        char v27 = *v1;
        sub_100028008();
        char v28 = v5;
        char v29 = BYTE4(v3);
        char v30 = BYTE5(v3);
        char v31 = BYTE6(v3);
        char v32 = HIBYTE(v3);
        __int16 v33 = v4;
        char v34 = BYTE2(v4);
        sub_100025EF4();
LABEL_17:
        sub_100027330(v6, v7, v8);
        long long v15 = v35;
        break;
    }
    char v10 = (void *)*((void *)&v15 + 1);
    uint64_t v9 = v15;
    if (*((void *)&v15 + 1))
    {
      uint64_t v22 = v1[2];
      BOOL v23 = __OFADD__(v22, length);
      uint64_t v24 = v22 + length;
      if (!v23)
      {
        v1[2] = v24;
        goto LABEL_28;
      }
LABEL_23:
      __break(1u);
LABEL_24:
      __break(1u);
LABEL_25:
      __break(1u);
LABEL_26:
      __break(1u);
LABEL_27:
      __break(1u);
    }
  }
LABEL_28:
  result.value._unint64_t object = v10;
  result.value._uint64_t countAndFlagsBits = v9;
  return result;
}

Swift::String_optional __swiftcall ByteBuffer.getString(at:length:)(Swift::Int at, Swift::Int length)
{
  uint64_t v6 = 0;
  if (at < v4)
  {
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v8 = 0;
    if ((length & 0x8000000000000000) == 0)
    {
      if (__OFADD__(at, length))
      {
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
      }
      unint64_t v9 = v3;
      uint64_t v10 = v2;
      switch(v3 >> 62)
      {
        case 1uLL:
          if (v2 >> 32 < (int)v2) {
            goto LABEL_23;
          }
          sub_100027BCC(v2, v3);
          uint64_t v14 = __DataStorage._bytes.getter();
          if (!v14) {
            goto LABEL_11;
          }
          uint64_t v15 = __DataStorage._offset.getter();
          if (__OFSUB__((int)v10, v15)) {
            goto LABEL_25;
          }
          v14 += (int)v10 - v15;
LABEL_11:
          __DataStorage._length.getter();
          sub_10002657C();
          sub_100027330(v14, v16, v17);
          sub_1000291B4(v10, v9);
          break;
        case 2uLL:
          uint64_t v18 = *(void *)(v2 + 16);
          uint64_t v19 = *(void *)(v2 + 24);
          swift_retain();
          swift_retain();
          uint64_t v20 = __DataStorage._bytes.getter();
          if (!v20) {
            goto LABEL_15;
          }
          uint64_t v21 = __DataStorage._offset.getter();
          if (__OFSUB__(v18, v21)) {
            goto LABEL_26;
          }
          v20 += v18 - v21;
LABEL_15:
          if (__OFSUB__(v19, v18)) {
            goto LABEL_24;
          }
          __DataStorage._length.getter();
          sub_10002657C();
          sub_100027330(v20, v22, v23);
          swift_release();
          swift_release();
          break;
        case 3uLL:
          sub_10002A874();
          goto LABEL_19;
        default:
          sub_100028008();
          sub_100025EF4();
LABEL_19:
          sub_100027330(v11, v12, v13);
          long long v24 = v26;
          goto LABEL_20;
      }
      long long v24 = v26;
LABEL_20:
      uint64_t v8 = (void *)*((void *)&v24 + 1);
      uint64_t v6 = v24;
    }
  }
  result.value._unint64_t object = v8;
  result.value._uint64_t countAndFlagsBits = v6;
  return result;
}

Swift::OpaquePointer_optional __swiftcall ByteBuffer.readBytes(length:)(Swift::Int length)
{
  if (length < 0)
  {
    uint64_t v12 = 0;
  }
  else
  {
    uint64_t v4 = v2[2];
    Swift::Int v5 = v4 + length;
    if (__OFADD__(v4, length))
    {
      __break(1u);
LABEL_33:
      __break(1u);
LABEL_34:
      __break(1u);
LABEL_35:
      __break(1u);
LABEL_36:
      __break(1u);
    }
    uint64_t v6 = *v2;
    unint64_t v7 = v2[1];
    switch(v7 >> 62)
    {
      case 1uLL:
        if ((int)v6 > v6 >> 32) {
          goto LABEL_34;
        }
        sub_100027BCC(*v2, v2[1]);
        uint64_t v13 = __DataStorage._bytes.getter();
        if (!v13) {
          goto LABEL_10;
        }
        uint64_t v14 = __DataStorage._offset.getter();
        if (__OFSUB__((int)v6, v14)) {
          goto LABEL_35;
        }
        v13 += (int)v6 - v14;
LABEL_10:
        __DataStorage._length.getter();
        if (v13) {
          uint64_t v15 = (const void *)(v13 + v4);
        }
        else {
          uint64_t v15 = 0;
        }
        if (v13) {
          int64_t v16 = v5 - v4;
        }
        else {
          int64_t v16 = 0;
        }
        uint64_t v12 = sub_10016E760(v15, v16);
        sub_1000291B4(v6, v7);
LABEL_29:
        uint64_t v22 = v2[2];
        BOOL v23 = __OFADD__(v22, length);
        uint64_t v24 = v22 + length;
        if (v23) {
          goto LABEL_33;
        }
        v2[2] = v24;
        break;
      case 2uLL:
        uint64_t v17 = *(void *)(v6 + 16);
        swift_retain();
        swift_retain();
        uint64_t v18 = __DataStorage._bytes.getter();
        if (!v18) {
          goto LABEL_20;
        }
        uint64_t v19 = __DataStorage._offset.getter();
        if (__OFSUB__(v17, v19)) {
          goto LABEL_36;
        }
        v18 += v17 - v19;
LABEL_20:
        __DataStorage._length.getter();
        if (v18) {
          uint64_t v20 = (const void *)(v18 + v4);
        }
        else {
          uint64_t v20 = 0;
        }
        if (v18) {
          int64_t v21 = v5 - v4;
        }
        else {
          int64_t v21 = 0;
        }
        uint64_t v12 = sub_10016E760(v20, v21);
        swift_release();
        swift_release();
        goto LABEL_29;
      case 3uLL:
        unint64_t v9 = (char *)v26 + v4;
        int64_t v10 = v5 - v4;
        memset(v26, 0, 14);
        goto LABEL_28;
      default:
        LOWORD(v26[0]) = *v2;
        BYTE2(v26[0]) = BYTE2(v6);
        BYTE3(v26[0]) = BYTE3(v6);
        BYTE4(v26[0]) = BYTE4(v6);
        sub_10002C79C();
        unint64_t v9 = (char *)(v8 + v4);
        int64_t v10 = v5 - v4;
        BYTE5(v26[1]) = v11;
LABEL_28:
        uint64_t v12 = sub_10016E760(v9, v10);
        goto LABEL_29;
    }
  }
  uint64_t v25 = v12;
  result.value._uint64_t rawValue = v25;
  result.is_nil = v1;
  return result;
}

Swift::OpaquePointer_optional __swiftcall ByteBuffer.getBytes(at:length:)(Swift::Int at, Swift::Int length)
{
  Swift::Int v5 = 0;
  if (at >= v4 && (length & 0x8000000000000000) == 0)
  {
    Swift::Int v7 = at + length;
    if (__OFADD__(at, length))
    {
      __break(1u);
LABEL_30:
      __break(1u);
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
    }
    unint64_t v8 = v3;
    uint64_t v9 = v2;
    switch(v3 >> 62)
    {
      case 1uLL:
        if ((int)v2 > v2 >> 32) {
          goto LABEL_30;
        }
        sub_100027BCC(v2, v3);
        uint64_t v10 = __DataStorage._bytes.getter();
        if (!v10) {
          goto LABEL_10;
        }
        uint64_t v11 = __DataStorage._offset.getter();
        if (__OFSUB__((int)v9, v11)) {
          goto LABEL_31;
        }
        v10 += (int)v9 - v11;
LABEL_10:
        __DataStorage._length.getter();
        if (v10) {
          uint64_t v12 = (const void *)(v10 + at);
        }
        else {
          uint64_t v12 = 0;
        }
        if (v10) {
          int64_t v13 = v7 - at;
        }
        else {
          int64_t v13 = 0;
        }
        Swift::Int v5 = sub_10016E760(v12, v13);
        sub_1000291B4(v9, v8);
        break;
      case 2uLL:
        uint64_t v14 = *(void *)(v2 + 16);
        swift_retain();
        swift_retain();
        uint64_t v15 = __DataStorage._bytes.getter();
        if (!v15) {
          goto LABEL_20;
        }
        uint64_t v16 = __DataStorage._offset.getter();
        if (__OFSUB__(v14, v16)) {
          goto LABEL_32;
        }
        v15 += v14 - v16;
LABEL_20:
        __DataStorage._length.getter();
        if (v15) {
          uint64_t v17 = (const void *)(v15 + at);
        }
        else {
          uint64_t v17 = 0;
        }
        if (v15) {
          int64_t v18 = v7 - at;
        }
        else {
          int64_t v18 = 0;
        }
        Swift::Int v5 = sub_10016E760(v17, v18);
        swift_release();
        swift_release();
        break;
      case 3uLL:
        memset(v20, 0, 14);
        Swift::Int v5 = sub_10016E760((char *)v20 + at, length);
        break;
      default:
        v20[0] = v2;
        LOWORD(v20[1]) = v3;
        BYTE2(v20[1]) = BYTE2(v3);
        BYTE3(v20[1]) = BYTE3(v3);
        BYTE4(v20[1]) = BYTE4(v3);
        BYTE5(v20[1]) = BYTE5(v3);
        Swift::Int v5 = sub_10016E760((char *)v20 + at, length);
        break;
    }
  }
  uint64_t v19 = v5;
  result.is_nil = length;
  result.value._uint64_t rawValue = v19;
  return result;
}

uint64_t ByteBuffer.withUnsafeBytes<A>(_:)()
{
  return Data.withUnsafeBytes<A>(_:)();
}

uint64_t sub_10016CA34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  int __dst = 0;
  if (a1)
  {
    memcpy(&__dst, (const void *)(a1 + a3), a4 - a3);
    LODWORD(v9) = __dst;
  }
  else
  {
    LODWORD(v9) = 0;
  }
  unsigned int v10 = bswap32(v9);
  if (a8) {
    return v9;
  }
  else {
    return v10;
  }
}

unint64_t sub_10016CACC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  unint64_t v12 = 0;
  if (a1)
  {
    memcpy(&v12, (const void *)(a1 + a3), a4 - a3);
    unint64_t v9 = v12;
  }
  else
  {
    unint64_t v9 = 0;
  }
  unint64_t v10 = bswap64(v9);
  if (a8) {
    return v9;
  }
  else {
    return v10;
  }
}

uint64_t sub_10016CB5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W7>, uint64_t a6@<X8>, uint64_t a7)
{
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v15 = a1;
  uint64_t v16 = a2;
  int v19 = a5 & 1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v9 = *(void *)(a7 - 8);
  __chkstk_darwin(v10);
  unint64_t v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedConformanceWitness();
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
  uint64_t v21 = v15;
  uint64_t v22 = v16;
  uint64_t v23 = v17;
  uint64_t v24 = v18;
  sub_10016D23C((uint64_t)v12, (uint64_t)sub_10016F6DC, (uint64_t)v20, a7, (uint64_t)&type metadata for Never, (uint64_t)&type metadata for () + 8, (uint64_t)&protocol witness table for Never, v13);
  ByteBuffer._toEndianness<A>(value:endianness:)((uint64_t)v12, v19);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, a7);
  return sub_10002538C(a6, 0, 1, a7);
}

void *sub_10016CDC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  Swift::OpaquePointer_optional result = sub_10016EADC(a1, a2, (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_10016F6BC);
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t ByteBuffer.writeImmutableBuffer(_:)(uint64_t a1, unint64_t a2)
{
  Data.append(_:)();
  uint64_t result = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_8:
        __break(1u);
        JUMPOUT(0x10016CEBCLL);
      }
      return HIDWORD(a1) - (int)a1;
    case 2uLL:
      uint64_t v6 = *(void *)(a1 + 16);
      uint64_t v5 = *(void *)(a1 + 24);
      uint64_t result = v5 - v6;
      if (!__OFSUB__(v5, v6)) {
        return result;
      }
      goto LABEL_8;
    case 3uLL:
      return result;
    default:
      return BYTE6(a2);
  }
}

uint64_t ByteBuffer.writeData(_:)(uint64_t a1, unint64_t a2)
{
  Data.append(_:)();
  uint64_t result = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_8:
        __break(1u);
        JUMPOUT(0x10016CF54);
      }
      return HIDWORD(a1) - (int)a1;
    case 2uLL:
      uint64_t v6 = *(void *)(a1 + 16);
      uint64_t v5 = *(void *)(a1 + 24);
      uint64_t result = v5 - v6;
      if (!__OFSUB__(v5, v6)) {
        return result;
      }
      goto LABEL_8;
    case 3uLL:
      return result;
    default:
      return BYTE6(a2);
  }
}

uint64_t sub_10016CF64(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

Swift::Int __swiftcall ByteBuffer.writeString(_:)(Swift::String a1)
{
  uint64_t v1 = type metadata accessor for String.Encoding();
  sub_100026808();
  uint64_t v3 = v2;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  static String.Encoding.utf8.getter();
  uint64_t v7 = String.data(using:allowLossyConversion:)();
  unint64_t v9 = v8;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v1);
  if (v9 >> 60 == 15)
  {
    uint64_t v7 = 0;
    unint64_t v9 = 0xC000000000000000;
  }
  Swift::Int v10 = ByteBuffer.writeData(_:)(v7, v9);
  sub_1000291B4(v7, v9);
  return v10;
}

uint64_t ByteBuffer.writeInteger<A>(_:endianness:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100026808();
  uint64_t v7 = v6;
  char v9 = v8 & 1;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *v3;
  unint64_t v14 = v3[1];
  sub_100027BCC(*v3, v14);
  ByteBuffer._toEndianness<A>(value:endianness:)(a1, v9);
  sub_1000291B4(v13, v14);
  int v19 = v3;
  sub_10016D23C((uint64_t)v12, (uint64_t)sub_10016EB58, (uint64_t)v18, a3, (uint64_t)&type metadata for Never, (uint64_t)&type metadata for Int, (uint64_t)&protocol witness table for Never, v15);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v12, a3);
  return v17[1];
}

uint64_t sub_10016D1D4@<X0>(unsigned char *a1@<X0>, unsigned char *a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = sub_100179B9C(a1, a2);
  if (v4[2])
  {
    Data._Representation.append(contentsOf:)();
    uint64_t v5 = v4[2];
  }
  else
  {
    uint64_t v5 = 0;
  }
  uint64_t result = swift_release();
  *a3 = v5;
  return result;
}

uint64_t sub_10016D23C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = *(void *)(a5 - 8);
  uint64_t v12 = __chkstk_darwin(a1);
  unint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = v16(v12, v12 + *(void *)(*(void *)(v15 - 8) + 64), v14);
  if (v8) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a8, v14, a5);
  }
  return result;
}

Swift::Void __swiftcall ByteBuffer.moveReaderIndex(to:)(Swift::Int to)
{
  *(void *)(v1 + 16) = to;
}

void ByteBuffer.hash(into:)(uint64_t a1, uint64_t a2, unint64_t a3, Swift::UInt a4)
{
}

uint64_t static ByteBuffer.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return static Data.== infix(_:_:)() & (a3 == a6);
}

Swift::Int ByteBuffer.hashValue.getter(uint64_t a1, unint64_t a2, Swift::UInt a3)
{
  return Hasher._finalize()();
}

Swift::Int sub_10016D45C()
{
  return ByteBuffer.hashValue.getter(*(void *)v0, *(void *)(v0 + 8), *(void *)(v0 + 16));
}

void sub_10016D468(uint64_t a1)
{
  ByteBuffer.hash(into:)(a1, *(void *)v1, *(void *)(v1 + 8), *(void *)(v1 + 16));
}

Swift::Int sub_10016D474()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  Swift::UInt v3 = v0[2];
  Hasher.init(_seed:)();
  sub_100027BCC(v1, v2);
  Data.hash(into:)();
  sub_1000291B4(v1, v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

uint64_t sub_10016D4EC(uint64_t *a1, uint64_t *a2)
{
  return static ByteBuffer.__derived_struct_equals(_:_:)(*a1, a1[1], a1[2], *a2, a2[1], a2[2]);
}

uint64_t ByteBufferView._buffer.getter()
{
  uint64_t v1 = *(void *)v0;
  sub_100027BCC(*(void *)v0, *(void *)(v0 + 8));
  return v1;
}

uint64_t ByteBufferView._buffer.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_1000291B4(*v3, v3[1]);
  *Swift::UInt v3 = a1;
  v3[1] = a2;
  v3[2] = a3;
  return result;
}

uint64_t ByteBufferView._range.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t ByteBufferView._range.setter(uint64_t result, uint64_t a2)
{
  *(void *)(v2 + 24) = result;
  *(void *)(v2 + 32) = a2;
  return result;
}

Swift::Void (__swiftcall *ByteBufferView._range.modify())()
{
  return _CPStartNetworkSearchFeedback.redactUnused();
}

uint64_t ByteBufferView.init(buffer:range:)@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  if (a4 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    JUMPOUT(0x10016D638);
  }
  uint64_t v6 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v6) = HIDWORD(result) - result;
      if (__OFSUB__(HIDWORD(result), result)) {
        goto LABEL_11;
      }
      uint64_t v6 = (int)v6;
LABEL_7:
      if (v6 < a5) {
        goto LABEL_10;
      }
      *a6 = result;
      a6[1] = a2;
      a6[2] = a3;
      a6[3] = a4;
      a6[4] = a5;
      return result;
    case 2uLL:
      uint64_t v8 = *(void *)(result + 16);
      uint64_t v7 = *(void *)(result + 24);
      BOOL v9 = __OFSUB__(v7, v8);
      uint64_t v6 = v7 - v8;
      if (!v9) {
        goto LABEL_7;
      }
      goto LABEL_12;
    case 3uLL:
      goto LABEL_7;
    default:
      uint64_t v6 = BYTE6(a2);
      goto LABEL_7;
  }
}

uint64_t ByteBufferView.withUnsafeBytes<A>(_:)()
{
  return ByteBuffer.withUnsafeBytes<A>(_:)();
}

char *sub_10016D690(char *result, uint64_t a2, void *(*a3)(uint64_t *__return_ptr, char *, char *), uint64_t a4, uint64_t a5)
{
  if (!result) {
    goto LABEL_7;
  }
  uint64_t v6 = *(void *)(a5 + 24);
  uint64_t v7 = *(void *)(a5 + 32);
  BOOL v8 = __OFSUB__(v7, v6);
  uint64_t v9 = v7 - v6;
  if (v8)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return result;
  }
  uint64_t result = (char *)a3(&v10, &result[v6], &result[v6 + v9]);
  if (!v5) {
    return (char *)v10;
  }
  return result;
}

uint64_t sub_10016D6F4(uint64_t result, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t), uint64_t a4, uint64_t a5)
{
  if (result)
  {
    uint64_t v5 = *(void *)(a5 + 24);
    uint64_t v6 = *(void *)(a5 + 32);
    BOOL v7 = __OFSUB__(v6, v5);
    uint64_t v8 = v6 - v5;
    if (!v7) {
      return a3(result + v5, result + v5 + v8);
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t ByteBufferView.endIndex.getter()
{
  return *(void *)(v0 + 32);
}

Swift::Int __swiftcall ByteBufferView.index(after:)(Swift::Int after)
{
  BOOL v1 = __OFADD__(after, 1);
  Swift::Int result = after + 1;
  if (v1) {
    __break(1u);
  }
  return result;
}

uint64_t ByteBufferView.subscript.getter(uint64_t result)
{
  if (v1[3] > result || v1[4] <= result)
  {
    __break(1u);
    goto LABEL_8;
  }
  Swift::Int result = sub_10016B810(result, 0, *v1, v1[1], v1[2]);
  if ((result & 0x100) != 0) {
LABEL_8:
  }
    __break(1u);
  return result;
}

uint64_t ByteBufferView.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (a1 < 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    JUMPOUT(0x10016D85CLL);
  }
  uint64_t v4 = *v3;
  unint64_t v5 = v3[1];
  uint64_t v6 = v3[2];
  uint64_t v10 = 0;
  switch(v5 >> 62)
  {
    case 1uLL:
      LODWORD(v10) = HIDWORD(v4) - v4;
      if (__OFSUB__(HIDWORD(v4), v4)) {
        goto LABEL_11;
      }
      uint64_t v10 = (int)v10;
LABEL_7:
      if (v10 < a2) {
        goto LABEL_10;
      }
      uint64_t result = sub_10016EB98((uint64_t)v3);
      *a3 = v4;
      a3[1] = v5;
      a3[2] = v6;
      a3[3] = a1;
      a3[4] = a2;
      return result;
    case 2uLL:
      uint64_t v12 = *(void *)(v4 + 16);
      uint64_t v11 = *(void *)(v4 + 24);
      BOOL v13 = __OFSUB__(v11, v12);
      uint64_t v10 = v11 - v12;
      if (!v13) {
        goto LABEL_7;
      }
      goto LABEL_12;
    case 3uLL:
      goto LABEL_7;
    default:
      uint64_t v10 = BYTE6(v5);
      goto LABEL_7;
  }
}

uint64_t ByteBufferView.withContiguousStorageIfAvailable<A>(_:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t result = ByteBufferView.withUnsafeBytes<A>(_:)();
  if (!v2) {
    return sub_10002538C(a2, 0, 1, a1);
  }
  return result;
}

Swift::Int_optional_optional __swiftcall ByteBufferView._customIndexOfEquatableElement(_:)(Swift::UInt8 a1)
{
  sub_10002771C();
  sub_10016EC3C((uint64_t)v21, (uint64_t)v22);
  switch(v23 >> 62)
  {
    case 1uLL:
      sub_100026238(v23);
      if (v6 != v7)
      {
        __break(1u);
        JUMPOUT(0x10016DA40);
      }
      uint64_t v8 = sub_10016EB98(v1);
      uint64_t v11 = sub_10002154C(v8, v9, v10, (void *(*)(uint64_t *__return_ptr, void *, char *))sub_10016EC1C);
      char v13 = v12;
      sub_10016EC98(v1);
      break;
    case 2uLL:
      sub_10002DFC4(v23);
      uint64_t v14 = swift_retain();
      uint64_t v11 = sub_10000E260(v14, v15, v16, (void *(*)(uint64_t *__return_ptr, void *, char *))sub_10016EC1C);
      char v13 = v17;
      swift_release();
      swift_release();
      break;
    case 3uLL:
      uint64_t v2 = sub_100028E20();
      goto LABEL_7;
    default:
      uint64_t v2 = sub_100024E24(v23);
      unint64_t v5 = sub_10016EC1C;
LABEL_7:
      uint64_t v11 = sub_10016E50C(v2, v3, v4, (void *(*)(uint64_t *__return_ptr, uint64_t *, char *))v5);
      char v13 = v18;
      break;
  }
  Swift::Bool v19 = v13 & 1;
  Swift::Int v20 = (Swift::Int)v11;
  result.value.Swift::Bool value = v20;
  result.value.is_nil = v19;
  return result;
}

uint64_t sub_10016DA50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t result = sub_10017B198(a3, a1, a2);
  if ((v8 & 1) == 0 && (uint64_t v9 = *(void *)(a4 + 24), v10 = __OFADD__(result, v9), result += v9, v10))
  {
    __break(1u);
  }
  else
  {
    *(void *)a5 = result;
    *(unsigned char *)(a5 + 8) = v8 & 1;
  }
  return result;
}

Swift::Int_optional_optional __swiftcall ByteBufferView._customLastIndexOfEquatableElement(_:)(Swift::UInt8 a1)
{
  sub_10002771C();
  sub_10016EC3C((uint64_t)v21, (uint64_t)v22);
  switch(v23 >> 62)
  {
    case 1uLL:
      sub_100026238(v23);
      if (v6 != v7)
      {
        __break(1u);
        JUMPOUT(0x10016DC14);
      }
      uint64_t v8 = sub_10016EB98(v1);
      uint64_t v11 = sub_10002154C(v8, v9, v10, (void *(*)(uint64_t *__return_ptr, void *, char *))sub_10016F714);
      char v13 = v12;
      sub_10016EC98(v1);
      break;
    case 2uLL:
      sub_10002DFC4(v23);
      uint64_t v14 = swift_retain();
      uint64_t v11 = sub_10000E260(v14, v15, v16, (void *(*)(uint64_t *__return_ptr, void *, char *))sub_10016F714);
      char v13 = v17;
      swift_release();
      swift_release();
      break;
    case 3uLL:
      uint64_t v2 = sub_100028E20();
      goto LABEL_7;
    default:
      uint64_t v2 = sub_100024E24(v23);
      unint64_t v5 = sub_10016F714;
LABEL_7:
      uint64_t v11 = sub_10016E50C(v2, v3, v4, (void *(*)(uint64_t *__return_ptr, uint64_t *, char *))v5);
      char v13 = v18;
      break;
  }
  Swift::Bool v19 = v13 & 1;
  Swift::Int v20 = (Swift::Int)v11;
  result.value.Swift::Bool value = v20;
  result.value.is_nil = v19;
  return result;
}

uint64_t sub_10016DC24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  char v12 = a3;
  void v11[2] = &v12;
  uint64_t result = sub_10016E5F0((uint64_t)sub_10016F69C, (uint64_t)v11, a1, a2);
  if ((v8 & 1) == 0 && (uint64_t v9 = *(void *)(a4 + 24), v10 = __OFADD__(result, v9), result += v9, v10))
  {
    __break(1u);
  }
  else
  {
    *(void *)a5 = result;
    *(unsigned char *)(a5 + 8) = v8 & 1;
  }
  return result;
}

uint64_t sub_10016DCA4(uint64_t a1, uint64_t a2)
{
  BOOL v3 = __OFADD__(a1, a2);
  uint64_t result = a1 + a2;
  if (v3)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }
  if (result < *(void *)(v2 + 24) || *(void *)(v2 + 32) < result) {
    goto LABEL_8;
  }
  return result;
}

uint64_t sub_10016DCCC(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(v3 + 24);
  uint64_t v5 = *(void *)(v3 + 32);
  if (v5 < a3 || v4 > a3 || v4 > result || v5 < result)
  {
    __break(1u);
    goto LABEL_28;
  }
  uint64_t v9 = a3 - result;
  if (__OFSUB__(a3, result))
  {
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
    return result;
  }
  if (a2 < 1)
  {
    if (v9 <= 0 && v9 > a2) {
      return 0;
    }
  }
  else if ((v9 & 0x8000000000000000) == 0 && v9 < (unint64_t)a2)
  {
    return 0;
  }
  BOOL v11 = __OFADD__(result, a2);
  result += a2;
  if (v11) {
    goto LABEL_29;
  }
  if (result < v4 || v5 < result) {
    goto LABEL_30;
  }
  return result;
}

uint64_t sub_10016DD44(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + 24);
  uint64_t v4 = *(void *)(v2 + 32);
  if (v4 < a2 || v3 > a2 || v3 > result || v4 < result)
  {
    __break(1u);
    goto LABEL_14;
  }
  BOOL v8 = __OFSUB__(a2, result);
  uint64_t result = a2 - result;
  if (v8) {
LABEL_14:
  }
    __break(1u);
  return result;
}

uint64_t sub_10016DD70@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_10016DDB8(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10016DDB8(uint64_t a1)
{
  BOOL v2 = __OFSUB__(a1, 1);
  uint64_t result = a1 - 1;
  if (v2)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    return result;
  }
  if (result < *(void *)(v1 + 24) || result >= *(void *)(v1 + 32)) {
    goto LABEL_9;
  }
  return result;
}

uint64_t *sub_10016DDDC(uint64_t *result)
{
  uint64_t v2 = *result - 1;
  if (__OFSUB__(*result, 1))
  {
    __break(1u);
  }
  else if (v2 < *(void *)(v1 + 32) && v2 >= *(void *)(v1 + 24))
  {
    *uint64_t result = v2;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t sub_10016DE08@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = sub_10016DCA4(*a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10016DE50(uint64_t *a1, uint64_t *a2)
{
  return sub_10016DD44(*a1, *a2);
}

uint64_t sub_10016DE94@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = ByteBufferView.startIndex.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10016DEBC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = ByteBufferView.endIndex.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10016DEE4(unsigned char *a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (*a2 >= v2[3] && result < v2[4])
  {
    uint64_t result = sub_10016B810(result, 0, *v2, v2[1], v2[2]);
    if ((result & 0x100) == 0)
    {
      *a1 = result;
      return (uint64_t)_CPStartNetworkSearchFeedback.redactUnused();
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

double sub_10016DF54@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  long long v6 = v2[1];
  long long v11 = *v2;
  long long v12 = v6;
  uint64_t v13 = *((void *)v2 + 4);
  ByteBufferView.subscript.getter(v5, v4, v9);
  double result = *(double *)v9;
  long long v8 = v9[1];
  *(_OWORD *)a2 = v9[0];
  *(_OWORD *)(a2 + 16) = v8;
  *(void *)(a2 + 32) = v10;
  return result;
}

uint64_t sub_10016DFB4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10016DFF8();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_10016DFF8()
{
  uint64_t result = *(void *)(v0 + 24);
  if (*(void *)(v0 + 32) < result) {
    __break(1u);
  }
  return result;
}

BOOL sub_10016E00C()
{
  return sub_10016B25C();
}

uint64_t sub_10016E04C@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10016E07C(a1, (uint64_t (*)(void))ByteBufferView._customIndexOfEquatableElement(_:), a2);
}

uint64_t sub_10016E064@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10016E07C(a1, (uint64_t (*)(void))ByteBufferView._customLastIndexOfEquatableElement(_:), a2);
}

uint64_t sub_10016E07C@<X0>(unsigned __int8 *a1@<X0>, uint64_t (*a2)(void)@<X3>, uint64_t a3@<X8>)
{
  uint64_t result = a2(*a1);
  *(void *)a3 = result;
  *(unsigned char *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 9) = v6 & 1;
  return result;
}

uint64_t sub_10016E0D4@<X0>(uint64_t a1@<X8>)
{
  sub_10002CF24();
  uint64_t result = sub_10016DCCC(v2, v3, v4);
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v6 & 1;
  return result;
}

uint64_t sub_10016E118(uint64_t *a1, uint64_t *a2)
{
  return sub_10016E160(*a1, *a2, a2[1]);
}

uint64_t sub_10016E160(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result >= a2)
  {
    BOOL v4 = __OFSUB__(result, a3);
    BOOL v3 = result - a3 < 0;
  }
  else
  {
    BOOL v4 = 0;
    BOOL v3 = 0;
  }
  if (v3 == v4) {
    __break(1u);
  }
  return result;
}

uint64_t sub_10016E174(uint64_t *a1, uint64_t *a2)
{
  return sub_10016E1BC(*a1, *a2, a2[1]);
}

uint64_t sub_10016E1BC(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result < a2 || a3 < result) {
    __break(1u);
  }
  return result;
}

uint64_t sub_10016E1D0(uint64_t *a1, uint64_t *a2)
{
  return sub_10016E21C(*a1, a1[1], *a2, a2[1]);
}

uint64_t sub_10016E21C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result < a3 || a4 < a2) {
    __break(1u);
  }
  return result;
}

Swift::Int sub_10016E230@<X0>(Swift::Int *a1@<X0>, Swift::Int *a2@<X8>)
{
  Swift::Int result = ByteBufferView.index(after:)(*a1);
  *a2 = result;
  return result;
}

void *sub_10016E25C(void *result)
{
  if (__OFADD__(*result, 1)) {
    __break(1u);
  }
  else {
    ++*result;
  }
  return result;
}

__n128 sub_10016E274@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(void *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(v1 + 24);
  *(__n128 *)(a1 + 24) = result;
  *(void *)(a1 + 40) = result.n128_u64[0];
  return result;
}

uint64_t sub_10016E294()
{
  return sub_10016E2D0();
}

uint64_t sub_10016E2D0()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t result = v2 - v1;
  if (v2 < v1)
  {
    __break(1u);
    goto LABEL_5;
  }
  if (__OFSUB__(v2, v1)) {
LABEL_5:
  }
    __break(1u);
  return result;
}

void *sub_10016E2EC()
{
  return sub_10016E318();
}

void *sub_10016E318()
{
  uint64_t v1 = sub_10016E690(v0);
  sub_10016EC98((uint64_t)v0);
  return v1;
}

uint64_t sub_10016E34C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_10016E388(a1, a2, a3, a4, a5);
}

uint64_t sub_10016E38C@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return ByteBufferView.withContiguousStorageIfAvailable<A>(_:)(a1, a2);
}

uint64_t sub_10016E3C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_10016CB5C(a1, a2, *(void *)(v3 + 32), *(void *)(v3 + 40), *(unsigned char *)(v3 + 72), a3, *(void *)(v3 + 16));
}

uint64_t sub_10016E400()
{
  return swift_dynamicCast();
}

void *sub_10016E44C(uint64_t a1, uint64_t a2, uint64_t a3, void *(*a4)(uint64_t *__return_ptr, void *, char *))
{
  uint64_t result = (void *)__DataStorage._bytes.getter();
  uint64_t v9 = result;
  if (result)
  {
    uint64_t result = (void *)__DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    uint64_t v9 = (void *)((char *)v9 + a1 - (void)result);
  }
  BOOL v10 = __OFSUB__(a2, a1);
  uint64_t v11 = a2 - a1;
  if (v10)
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v12 = __DataStorage._length.getter();
  if (v12 >= v11) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = v12;
  }
  uint64_t v14 = (char *)v9 + v13;
  if (v9) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = 0;
  }
  uint64_t result = a4(&v16, v9, v15);
  if (!v4) {
    return (void *)v16;
  }
  return result;
}

void *sub_10016E50C(uint64_t a1, uint64_t a2, uint64_t a3, void *(*a4)(uint64_t *__return_ptr, uint64_t *, char *))
{
  uint64_t v6 = a1;
  __int16 v7 = a2;
  char v8 = BYTE2(a2);
  char v9 = BYTE3(a2);
  char v10 = BYTE4(a2);
  char v11 = BYTE5(a2);
  uint64_t result = a4(&v12, &v6, (char *)&v6 + a3);
  if (!v4) {
    return (void *)v12;
  }
  return result;
}

uint64_t sub_10016E5F0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    return 0;
  }
  uint64_t v6 = a4 - a3;
  if (a4 == a3)
  {
    return 0;
  }
  else
  {
    __int16 v7 = (uint64_t (*)(char *))result;
    uint64_t v8 = a4 - a3;
    while (!__OFSUB__(v8--, 1))
    {
      if (v8 < 0 || v8 >= v6) {
        goto LABEL_15;
      }
      char v10 = *(unsigned char *)(a3 + v8);
      uint64_t result = v7(&v10);
      if (v4 || (result & 1) != 0 || !v8) {
        return v8;
      }
    }
    __break(1u);
LABEL_15:
    __break(1u);
  }
  return result;
}

void *sub_10016E690(void *result)
{
  uint64_t v1 = result[3];
  uint64_t v2 = result[4];
  uint64_t v3 = v2 - v1;
  if (v2 < v1)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (__OFSUB__(v2, v1))
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (!v3) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v4 = (uint64_t)result;
  if (v3 <= 0)
  {
    char v5 = _swiftEmptyArrayStorage;
  }
  else
  {
    sub_10002572C(&qword_10021AC58);
    char v5 = (void *)swift_allocObject();
    size_t v6 = j__malloc_size(v5);
    _OWORD v5[2] = v3;
    v5[3] = 2 * v6 - 64;
  }
  sub_10016EB98(v4);
  uint64_t v7 = sub_10016E7F0((uint64_t)v8, (uint64_t)(v5 + 4), v3);
  uint64_t result = (void *)sub_1000291B4(v8[0], v8[1]);
  if (v7 == v3) {
    return v5;
  }
LABEL_12:
  __break(1u);
  return result;
}

void *sub_10016E760(const void *a1, int64_t a2)
{
  if (!a2) {
    return _swiftEmptyArrayStorage;
  }
  if (a2 <= 0)
  {
    uint64_t v4 = _swiftEmptyArrayStorage;
  }
  else
  {
    sub_10002572C(&qword_10021AC58);
    uint64_t v4 = (void *)swift_allocObject();
    size_t v5 = j__malloc_size(v4);
    v4[2] = a2;
    v4[3] = 2 * v5 - 64;
  }
  memcpy(v4 + 4, a1, a2);
  return v4;
}

uint64_t sub_10016E7F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v4;
  long long v31 = *(_OWORD *)v4;
  uint64_t v6 = *(void *)(v4 + 16);
  uint64_t v8 = *(void *)(v5 + 24);
  uint64_t v7 = *(void *)(v5 + 32);
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
LABEL_6:
    uint64_t v9 = *(void *)(v5 + 24);
    goto LABEL_7;
  }
  if (a3 < 0) {
LABEL_41:
  }
    __break(1u);
  if (v7 == v8)
  {
LABEL_5:
    a3 = 0;
    goto LABEL_6;
  }
  uint64_t v11 = a2;
  uint64_t v26 = a1;
  uint64_t v27 = a3;
  long long v34 = *(_OWORD *)v5;
  sub_10016EC3C((uint64_t)&v34, (uint64_t)v35);
  uint64_t v25 = v7 - v8;
  if (v7 > v8)
  {
    uint64_t v3 = 0;
    uint64_t v30 = v6;
    uint64_t v32 = v8 - v7 + 1;
    uint64_t v28 = v11;
    uint64_t v29 = v7;
    while (v8 >= v6)
    {
      uint64_t v12 = v8 + v3 + 1;
      sub_10016EC3C((uint64_t)v35, (uint64_t)&v36);
      switch(*((void *)&v36 + 1) >> 62)
      {
        case 1:
          *((void *)&v36 + 1) &= 0x3FFFFFFFFFFFFFFFuLL;
          uint64_t v13 = (int)v36;
          if (SDWORD1(v36) < (int)v36) {
            goto LABEL_38;
          }
          sub_10016EB98(v5);
          uint64_t v14 = __DataStorage._bytes.getter();
          if (v14)
          {
            uint64_t v15 = v14;
            uint64_t v16 = __DataStorage._offset.getter();
            if (__OFSUB__(v13, v16)) {
              goto LABEL_40;
            }
            uint64_t v17 = v15 + v13 - v16;
          }
          else
          {
            uint64_t v17 = 0;
          }
          __DataStorage._length.getter();
          char v23 = *(unsigned char *)(v17 + v8 + v3);
          sub_10016EC98(v5);
          goto LABEL_26;
        case 2:
          *((void *)&v36 + 1) &= 0x3FFFFFFFFFFFFFFFuLL;
          uint64_t v18 = *(void *)(v36 + 16);
          swift_retain();
          swift_retain();
          uint64_t v19 = __DataStorage._bytes.getter();
          if (v19)
          {
            uint64_t v20 = v19;
            uint64_t v21 = __DataStorage._offset.getter();
            if (__OFSUB__(v18, v21)) {
              goto LABEL_39;
            }
            uint64_t v22 = v20 + v18 - v21;
          }
          else
          {
            uint64_t v22 = 0;
          }
          __DataStorage._length.getter();
          char v23 = *(unsigned char *)(v22 + v8 + v3);
          swift_release();
          swift_release();
LABEL_26:
          uint64_t v7 = v29;
          uint64_t v6 = v30;
          uint64_t v11 = v28;
LABEL_27:
          *(unsigned char *)(v11 + v3) = v23;
          if (v27 - 1 == v3) {
            goto LABEL_34;
          }
          if (!(v32 + v3))
          {
            uint64_t v9 = v7;
            a3 = v25;
            goto LABEL_36;
          }
          ++v3;
          if (v12 < v8 || v12 >= v7) {
            goto LABEL_33;
          }
          break;
        case 3:
          memset(v33, 0, 14);
          goto LABEL_21;
        default:
          *((void *)&v36 + 1) &= 0x3FFFFFFFFFFFFFFFuLL;
          v33[0] = v36;
          *(void *)((char *)v33 + 6) = *(void *)((char *)&v36 + 6);
LABEL_21:
          char v23 = *((unsigned char *)v33 + v8 + v3);
          goto LABEL_27;
      }
    }
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
LABEL_33:
  __break(1u);
LABEL_34:
  uint64_t v9 = v8 + v3 + 1;
  a3 = v27;
LABEL_36:
  a1 = v26;
LABEL_7:
  *(_OWORD *)a1 = v31;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v8;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v9;
  return a3;
}

char *sub_10016EAA8@<X0>(char *a1@<X0>, uint64_t a2@<X1>, void *(*a3)(uint64_t *__return_ptr, char *, char *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t result = sub_10016D690(a1, a2, a3, a4, a5);
  if (!v6)
  {
    *(void *)a6 = result;
    *(unsigned char *)(a6 + 8) = v9 & 1;
  }
  return result;
}

void *sub_10016EADC(uint64_t a1, uint64_t a2, void *(*a3)(uint64_t *__return_ptr, uint64_t, uint64_t))
{
  if (a1) {
    uint64_t v4 = a2 - a1;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t result = a3(&v6, a1, v4);
  if (!v3) {
    return (void *)v6;
  }
  return result;
}

uint64_t sub_10016EB30()
{
  return (*(uint64_t (**)(void))(v0 + 24))();
}

uint64_t sub_10016EB58@<X0>(unsigned char *a1@<X0>, unsigned char *a2@<X1>, void *a3@<X8>)
{
  return sub_10016D1D4(a1, a2, a3);
}

uint64_t sub_10016EB78(uint64_t a1, uint64_t a2)
{
  return sub_10016D6F4(a1, a2, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40));
}

uint64_t sub_10016EB98(uint64_t a1)
{
  return a1;
}

uint64_t sub_10016EBC8(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v3 = a2 - a1;
  }
  else {
    uint64_t v3 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 24))(a1, v3);
}

uint64_t sub_10016EBFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_10016DA50(a1, a2, *(unsigned char *)(v3 + 16), *(void *)(v3 + 24), a3);
}

char *sub_10016EC1C@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_10016EAA8(a1, a2, *(void *(**)(uint64_t *__return_ptr, char *, char *))(v3 + 16), *(void *)(v3 + 24), *(void *)(v3 + 32), a3);
}

uint64_t sub_10016EC3C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10016EC98(uint64_t a1)
{
  return a1;
}

void *sub_10016ECC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *(*a7)(uint64_t *__return_ptr, uint64_t, void *))
{
  uint64_t v14 = sub_10016EDD0(0, a3, a5, a6);
  uint64_t result = (void *)sub_10016EDD0(a3, a4, a5, a6);
  if (__OFADD__(v14, result))
  {
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v16 = result;
  if ((uint64_t)result + v14 < v14)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  if (a1) {
    uint64_t v17 = a1 + v14;
  }
  else {
    uint64_t v17 = 0;
  }
  uint64_t result = a7(&v18, v17, v16);
  if (!v7) {
    return (void *)v18;
  }
  return result;
}

uint64_t sub_10016ED98@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static String._fromUTF8Repairing(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_10016EDD0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4 - a3;
  if (!a3) {
    uint64_t v4 = 0;
  }
  if (result < 0 || v4 < result)
  {
    __break(1u);
  }
  else if ((a2 & 0x8000000000000000) == 0 && v4 >= a2)
  {
    return a2 - result;
  }
  __break(1u);
  return result;
}

void *sub_10016EE04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *(*a4)(uint64_t *__return_ptr, uint64_t, void *)@<X3>, void *a5@<X8>)
{
  uint64_t result = sub_10016ECC8(a1, a2, *a3, a3[1], a3[2], a3[3], a4);
  if (!v5)
  {
    *a5 = result;
    a5[1] = v8;
  }
  return result;
}

BOOL sub_10016EE44(char *a1, char *a2)
{
  return static SQLiteBaseVTab.Style.__derived_enum_equals(_:_:)(*a1, *a2);
}

uint64_t sub_10016EE68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>)
{
  uint64_t result = sub_10016CA34(a1, a2, a3, a4, a5, a6, a7, a8 & 1);
  if (!v9)
  {
    *(_DWORD *)a9 = result;
    *(unsigned char *)(a9 + 4) = BYTE4(result) & 1;
  }
  return result;
}

unint64_t sub_10016EEA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>)
{
  unint64_t result = sub_10016CACC(a1, a2, a3, a4, a5, a6, a7, a8 & 1);
  if (!v9)
  {
    *(void *)a9 = result;
    *(unsigned char *)(a9 + 8) = v12 & 1;
  }
  return result;
}

uint64_t sub_10016EED8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_10016DC24(a1, a2, *(unsigned char *)(v3 + 16), *(void *)(v3 + 24), a3);
}

unint64_t sub_10016EEFC()
{
  unint64_t result = qword_100224058;
  if (!qword_100224058)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100224058);
  }
  return result;
}

unint64_t sub_10016EF4C()
{
  unint64_t result = qword_100224060;
  if (!qword_100224060)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100224060);
  }
  return result;
}

unint64_t sub_10016EF9C()
{
  unint64_t result = qword_100224068;
  if (!qword_100224068)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100224068);
  }
  return result;
}

uint64_t sub_10016EFE8()
{
  return sub_10016F180(&qword_100224070);
}

unint64_t sub_10016F020()
{
  unint64_t result = qword_100224078;
  if (!qword_100224078)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100224078);
  }
  return result;
}

unint64_t sub_10016F070()
{
  unint64_t result = qword_100224080;
  if (!qword_100224080)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100224080);
  }
  return result;
}

uint64_t sub_10016F0BC()
{
  return sub_10016F180(&qword_100224088);
}

unint64_t sub_10016F0F4()
{
  unint64_t result = qword_100224090;
  if (!qword_100224090)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100224090);
  }
  return result;
}

void *sub_10016F140()
{
  return &protocol witness table for Int;
}

uint64_t sub_10016F14C()
{
  return sub_10016F180((unint64_t *)&qword_100223928);
}

uint64_t sub_10016F180(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1000371D4(&qword_100223920);
    sub_10015B404();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10016F1F8()
{
  unint64_t result = qword_100224098;
  if (!qword_100224098)
  {
    sub_1000371D4(&qword_1002240A0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100224098);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for Endianness(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10016F318);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void type metadata accessor for Endianness()
{
}

uint64_t destroy for ByteBuffer(uint64_t a1)
{
  return sub_1000291B4(*(void *)a1, *(void *)(a1 + 8));
}

uint64_t *_s9SwiftAvro10ByteBufferVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_100027BCC(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  a1[2] = a2[2];
  return a1;
}

uint64_t *assignWithCopy for ByteBuffer(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_100027BCC(*a2, v5);
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_1000291B4(v6, v7);
  a1[2] = a2[2];
  return a1;
}

uint64_t *assignWithTake for ByteBuffer(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_1000291B4(v4, v5);
  a1[2] = *(void *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for ByteBuffer(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xD && *(unsigned char *)(a1 + 24))
    {
      unsigned int v2 = *(_DWORD *)a1 + 12;
    }
    else
    {
      unsigned int v2 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
      if (v2 >= 0xC) {
        unsigned int v2 = -1;
      }
    }
  }
  else
  {
    unsigned int v2 = -1;
  }
  return v2 + 1;
}

uint64_t storeEnumTagSinglePayload for ByteBuffer(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)unint64_t result = a2 - 13;
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2)
    {
      *(void *)unint64_t result = 0;
      *(void *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

void type metadata accessor for ByteBuffer()
{
}

uint64_t initializeWithCopy for ByteBufferView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  sub_100027BCC(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  return a1;
}

uint64_t *assignWithCopy for ByteBufferView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_100027BCC(*a2, v5);
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_1000291B4(v6, v7);
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  return a1;
}

uint64_t assignWithTake for ByteBufferView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_1000291B4(v4, v5);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for ByteBufferView(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xD && *(unsigned char *)(a1 + 40))
    {
      unsigned int v2 = *(_DWORD *)a1 + 12;
    }
    else
    {
      unsigned int v2 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
      if (v2 >= 0xC) {
        unsigned int v2 = -1;
      }
    }
  }
  else
  {
    unsigned int v2 = -1;
  }
  return v2 + 1;
}

uint64_t storeEnumTagSinglePayload for ByteBufferView(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)unint64_t result = a2 - 13;
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 40) = 0;
    }
    if (a2)
    {
      *(void *)unint64_t result = 0;
      *(void *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

void type metadata accessor for ByteBufferView()
{
}

BOOL sub_10016F69C(char *a1)
{
  return sub_10016EE44(a1, *(char **)(v1 + 16));
}

void *sub_10016F6BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return sub_10016EE04(a1, a2, *(uint64_t **)(v3 + 16), *(void *(**)(uint64_t *__return_ptr, uint64_t, void *))(v3 + 24), a3);
}

void *sub_10016F6DC(void *result)
{
  uint64_t v2 = v1[2];
  if (v2) {
    uint64_t v3 = (const void *)(v2 + v1[4]);
  }
  else {
    uint64_t v3 = 0;
  }
  if (result && v3)
  {
    if (v2) {
      uint64_t v4 = v2 + v1[5];
    }
    else {
      uint64_t v4 = 0;
    }
    return memmove(result, v3, v4 - (void)v3);
  }
  return result;
}

char *sub_10016F714@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_10016EC1C(a1, a2, a3);
}

Swift::Int ByteBuffer.writeAvroValue(_:)(uint64_t a1)
{
  sub_10016F9E8(a1, (uint64_t)v41);
  sub_10016F9E8((uint64_t)v41, (uint64_t)&v44);
  switch(v45)
  {
    case 1:
      sub_100177900(a1, (void (*)(void, void, void, void, void, void, void, void, char))sub_10016AE48);
      ByteBuffer.writeAvroArray(_:)();
      goto LABEL_5;
    case 2:
      sub_100177900(a1, (void (*)(void, void, void, void, void, void, void, void, char))sub_10016AE48);
      ByteBuffer.writeAvroMap(_:)();
LABEL_5:
      Swift::Int v8 = v7;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      return v8;
    case 3:
      SwiftAvro::AvroRecord v42 = v44;
      sub_100177900(a1, (void (*)(void, void, void, void, void, void, void, void, char))sub_10016AE48);
      Swift::Int v6 = ByteBuffer.writeAvroRecord(_:)(&v42);
      goto LABEL_7;
    case 4:
      long long v34 = *(void **)(v44.schema.type._countAndFlagsBits + 32);
      uint64_t v35 = *(void *)(v44.schema.type._countAndFlagsBits + 24);
      uint64_t v40 = *(void *)(v44.schema.type._countAndFlagsBits + 40);
      uint64_t v9 = *(void *)(v44.schema.type._countAndFlagsBits + 56);
      char v10 = *(void **)(v44.schema.type._countAndFlagsBits + 64);
      uint64_t v11 = *(void **)(v44.schema.type._countAndFlagsBits + 72);
      long long v36 = *(void **)(v44.schema.type._countAndFlagsBits + 80);
      uint64_t v37 = *(void **)(v44.schema.type._countAndFlagsBits + 48);
      char v12 = *(unsigned char *)(v44.schema.type._countAndFlagsBits + 88);
      sub_10017A40C();
      unint64_t v38 = v13;
      sub_100177900(a1, (void (*)(void, void, void, void, void, void, void, void, char))sub_10016AE48);
      swift_bridgeObjectRetain();
      sub_10017A70C();
      sub_10017A3CC();
      sub_10016AE48(v14, v15, v16, v17, v18, v19, v20, v21, v12);
      uint64_t v22 = sub_1001777D8(v38);
      Swift::Int v39 = ByteBuffer.writeBytes(_:)((Swift::OpaquePointer)v22);
      swift_bridgeObjectRelease();
      v42.schema.type._uint64_t countAndFlagsBits = v35;
      v42.schema.type._char object = v34;
      v42.schema.name._uint64_t countAndFlagsBits = v40;
      v42.schema.name._char object = v37;
      v42.schema.namespace.value._uint64_t countAndFlagsBits = v9;
      v42.schema.namespace.value._char object = v10;
      v42.schema.fields._uint64_t rawValue = v11;
      v42.fields._uint64_t rawValue = v36;
      char v43 = v12;
      uint64_t v23 = ByteBuffer.writeAvroValue(_:)(&v42);
      swift_bridgeObjectRelease();
      sub_10017A3CC();
      sub_100093A68(v24, v25, v26, v27, v28, v29, v30, v31, v12);
      sub_100177900(a1, (void (*)(void, void, void, void, void, void, void, void, char))sub_100093A68);
      BOOL v32 = __OFADD__(v39, v23);
      Swift::Int v8 = v39 + v23;
      if (v32)
      {
        __break(1u);
        JUMPOUT(0x10016F9D4);
      }
      return v8;
    default:
      char object = (char)v44.schema.name._object;
      sub_100177900(a1, (void (*)(void, void, void, void, void, void, void, void, char))sub_10016AE48);
      uint64_t v3 = sub_10002EFCC();
      Swift::Int v6 = ByteBuffer.writeAvroPrimitive(_:)(v3, v4, v5, object);
LABEL_7:
      Swift::Int v8 = v6;
      sub_100177900(a1, (void (*)(void, void, void, void, void, void, void, void, char))sub_100093A68);
      return v8;
  }
}

uint64_t sub_10016F9E8(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10016FA44(unsigned char *a1)
{
  uint64_t v2 = sub_100109644(1, 0);
  *((unsigned char *)v2 + 32) = *a1;
  if (v2[2])
  {
    Data._Representation.append(contentsOf:)();
    uint64_t v3 = v2[2];
  }
  else
  {
    uint64_t v3 = 0;
  }
  swift_release();
  return v3;
}

uint64_t sub_10016FAB8(_DWORD *a1)
{
  uint64_t v2 = sub_100109644(4, 0);
  *((_DWORD *)v2 + 8) = *a1;
  if (v2[2])
  {
    Data._Representation.append(contentsOf:)();
    uint64_t v3 = v2[2];
  }
  else
  {
    uint64_t v3 = 0;
  }
  swift_release();
  return v3;
}

uint64_t sub_10016FB2C(void *a1)
{
  uint64_t v2 = sub_100109644(8, 0);
  v2[4] = *a1;
  if (v2[2])
  {
    Data._Representation.append(contentsOf:)();
    uint64_t v3 = v2[2];
  }
  else
  {
    uint64_t v3 = 0;
  }
  swift_release();
  return v3;
}

uint64_t ByteBuffer.writeAvroPrimitive(_:)(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v6 = a1;
  Swift::Int v7 = 0;
  switch(a4)
  {
    case 1:
      uint64_t v9 = sub_1001776B0((2 * a1) ^ ((int)a1 >> 31));
      goto LABEL_5;
    case 2:
      uint64_t v9 = sub_1001777D8((2 * a1) ^ (a1 >> 63));
LABEL_5:
      Swift::Int v10 = ByteBuffer.writeBytes(_:)((Swift::OpaquePointer)v9);
      swift_bridgeObjectRelease();
      return v10;
    case 3:
      LODWORD(v33) = a1;
      return sub_10016FAB8(&v33);
    case 4:
      uint64_t v33 = a1;
      return sub_10016FB2C(&v33);
    case 5:
      uint64_t v12 = sub_10017A844();
      sub_10016AF60(v12, v13, v14, v15);
      v16._uint64_t countAndFlagsBits = v6;
      v16._char object = (void *)a2;
      Swift::Int v17 = ByteBuffer.writeAvroString(_:)(v16);
      uint64_t v18 = sub_10017A844();
      sub_100093B94(v18, v19, v20, v21);
      return v17;
    case 6:
      uint64_t v22 = (a2 >> 60) & 3;
      if (!v22) {
        goto LABEL_17;
      }
      v23._uint64_t rawValue = (void *)(a2 & 0xCFFFFFFFFFFFFFFFLL);
      if (v22 != 1) {
        goto LABEL_20;
      }
      uint64_t v24 = sub_10016B5AC(a1, a2 & 0xCFFFFFFFFFFFFFFFLL, a3);
      unint64_t v25 = (2 * v24) ^ (v24 >> 63);
      sub_10017A7F8(v6);
      uint64_t v26 = sub_1001777D8(v25);
      ByteBuffer.writeBytes(_:)((Swift::OpaquePointer)v26);
      swift_bridgeObjectRelease();
      ByteBuffer.writeImmutableBuffer(_:)(v6, a2 & 0xCFFFFFFFFFFFFFFFLL);
      sub_10002A04C();
      if (v27)
      {
        __break(1u);
LABEL_17:
        unint64_t v28 = 2 * *(void *)(v6 + 16);
        sub_10016AF60(v6, a2, a3, 6);
        v23._uint64_t rawValue = sub_1001777D8(v28);
        Swift::Int v29 = ByteBuffer.writeBytes(_:)(v23);
        swift_bridgeObjectRelease();
        Swift::Int v30 = ByteBuffer.writeBytes(_:)((Swift::OpaquePointer)v6);
        a1 = sub_100093B94(v6, a2, a3, 6);
        Swift::Int v7 = v29 + v30;
        if (__OFADD__(v29, v30))
        {
          __break(1u);
LABEL_20:
          sub_10017A7F8(a1);
          uint64_t v31 = Data.count.getter();
          BOOL v32 = sub_10017A0EC(v31);
          ByteBuffer.writeBytes(_:)((Swift::OpaquePointer)v32);
          swift_bridgeObjectRelease();
          ByteBuffer.writeData(_:)(v6, (unint64_t)v23._rawValue);
          sub_10002A04C();
          if (v27) {
            __break(1u);
          }
        }
      }
      return v7;
    case 7:
      return v7;
    default:
      LOBYTE(v33) = a1 & 1;
      return sub_10016FA44(&v33);
  }
}

void ByteBuffer.writeAvroArray(_:)()
{
  sub_10000DFE0();
  uint64_t v2 = v1;
  type metadata accessor for String.Encoding();
  sub_100020C48();
  uint64_t v4 = v3;
  __chkstk_darwin(v5);
  sub_10000E04C();
  v480 = v9;
  uint64_t v10 = *(void *)(v2 + 16);
  if (!v10)
  {
    sub_100179F14(v6, v7, v8, (uint64_t)_swiftEmptyArrayStorage);
    Swift::Int v12 = v454;
    unint64_t v20 = *(void *)(v454 + 16);
    unint64_t v115 = *(void *)(v454 + 24);
    uint64_t v4 = v20 + 1;
    if (v20 < v115 >> 1)
    {
LABEL_144:
      *(void *)(v12 + 16) = v4;
      *(unsigned char *)(v12 + v20 + 32) = 0;
      ByteBuffer.writeBytes(_:)((Swift::OpaquePointer)v12);
      sub_100029978();
      goto LABEL_145;
    }
LABEL_152:
    char v457 = sub_100093098(v115);
    sub_100065744(v457, v4, 1, v12);
    Swift::Int v12 = v458;
    goto LABEL_144;
  }
  uint64_t v11 = sub_1001777D8(2 * v10);
  v525 = v0;
  Swift::Int v12 = ByteBuffer.writeBytes(_:)((Swift::OpaquePointer)v11);
  swift_bridgeObjectRelease();
  uint64_t v524 = v2 + 32;
  swift_bridgeObjectRetain();
  uint64_t v13 = 0;
  uint64_t v14 = 72;
  uint64_t v523 = v10;
  while (2)
  {
    uint64_t v15 = v524 + v13 * v14;
    unint64_t v16 = *(void *)v15;
    unint64_t v17 = *(void *)(v15 + 8);
    uint64_t v18 = *(void *)(v15 + 16);
    unint64_t v19 = *(void **)(v15 + 24);
    unint64_t v20 = *(void *)(v15 + 32);
    char v21 = *(void **)(v15 + 40);
    uint64_t v22 = *(void **)(v15 + 48);
    Swift::OpaquePointer v23 = *(void **)(v15 + 56);
    ++v13;
    uint64_t v24 = *(unsigned __int8 *)(v15 + 64);
    switch(v24)
    {
      case 1:
        uint64_t v31 = sub_100025128(v18, (uint64_t)v22, (uint64_t)v23, v24, v462);
        uint64_t v39 = sub_10002985C(v31, v32, v33, v34, v35, v36, v37, v38, v463);
        uint64_t v40 = ByteBuffer.writeAvroArray(_:)(v39);
        goto LABEL_8;
      case 2:
        uint64_t v41 = sub_100025128(v18, (uint64_t)v22, (uint64_t)v23, v24, v462);
        sub_10002985C(v41, v42, v43, v44, v45, v46, v47, v48, v464);
        ByteBuffer.writeAvroMap(_:)();
LABEL_8:
        uint64_t v25 = v40;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        uint64_t v13 = v529;
        char v21 = (void *)v20;
        uint64_t v14 = 72;
        LOBYTE(v24) = (_BYTE)v527;
        unint64_t v20 = v528;
        Swift::Int v12 = v526;
        goto LABEL_58;
      case 3:
        v530.schema.type._uint64_t countAndFlagsBits = v16;
        v530.schema.type._char object = (void *)v17;
        v530.schema.name._uint64_t countAndFlagsBits = v18;
        v530.schema.name._char object = v19;
        v530.schema.namespace.value._uint64_t countAndFlagsBits = v20;
        v530.schema.namespace.value._char object = v21;
        v530.schema.fields._uint64_t rawValue = v22;
        v530.fields._uint64_t rawValue = v23;
        LOBYTE(v527) = v24;
        sub_10017A018();
        sub_10017A1BC();
        uint64_t v529 = v13;
        sub_10002EF94();
        sub_10016AE48(v49, v50, v51, v52, v53, v54, v55, v56, v462);
        uint64_t v4 = v17;
        Swift::Int v57 = ByteBuffer.writeAvroRecord(_:)(&v530);
        LOBYTE(v24) = (_BYTE)v527;
        uint64_t v14 = 72;
        uint64_t v25 = v57;
LABEL_58:
        char v459 = v24;
        sub_10017A1BC();
        sub_10002EF94();
        sub_100093A68(v166, v167, v168, v169, v170, v171, v172, v173, v459);
        goto LABEL_59;
      case 4:
        uint64_t v529 = v13;
        uint64_t v495 = *(void *)(v16 + 24);
        Swift::Int v526 = v12;
        v527 = *(void **)(v16 + 32);
        long long v502 = *(_OWORD *)(v16 + 40);
        uint64_t v503 = *(void *)(v16 + 56);
        v500 = *(void **)(v16 + 64);
        v501 = *(void **)(v16 + 72);
        uint64_t v513 = (uint64_t)v21;
        v516 = *(void **)(v16 + 80);
        Swift::Int v491 = *(unsigned __int8 *)(v16 + 88);
        unint64_t v58 = (2 * *(void *)(v16 + 96)) ^ (*(uint64_t *)(v16 + 96) >> 63);
        uint64_t v59 = v20;
        unint64_t v60 = v17;
        LOBYTE(v17) = v58 & 0x7F;
        sub_10002559C();
        uint64_t v62 = v61;
        uint64_t v64 = v63;
        uint64_t v4 = v65;
        uint64_t v67 = v66;
        sub_10016AE48(v65, v60, v61, (char)v19, v59, v68, v66, v63, v462);
        sub_10002559C();
        uint64_t v519 = v4;
        uint64_t v505 = v62;
        uint64_t v508 = v64;
        uint64_t v69 = v62;
        Swift::Int v12 = v491;
        char v493 = (char)v19;
        char v70 = (char)v19;
        uint64_t v528 = v59;
        uint64_t v71 = v67;
        sub_10016AE48(v4, v60, v69, v70, v59, v513, v67, v64, v472);
        swift_bridgeObjectRetain();
        sub_10016AE48(v495, (unint64_t)v527, v502, SBYTE8(v502), v503, (uint64_t)v500, (uint64_t)v501, (uint64_t)v516, v491);
        if (v58 >= 0x80)
        {
          sub_100065744(0, 1, 1, (uint64_t)_swiftEmptyArrayStorage);
          unint64_t v72 = v95;
          unint64_t v96 = v95[2];
          do
          {
            unint64_t v97 = v72[3];
            if (v96 >= v97 >> 1)
            {
              char v100 = sub_100093098(v97);
              sub_100065744(v100, v96 + 1, 1, (uint64_t)v72);
              unint64_t v72 = v101;
            }
            char v98 = v17 | 0x80;
            unint64_t v17 = (v58 >> 7) & 0x7F;
            unint64_t v99 = v58 >> 14;
            v58 >>= 7;
            v72[2] = v96 + 1;
            *((unsigned char *)v72 + v96++ + 32) = v98;
          }
          while (v99);
        }
        else
        {
          unint64_t v72 = _swiftEmptyArrayStorage;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_100065744(0, v72[2] + 1, 1, (uint64_t)v72);
          unint64_t v72 = v442;
        }
        uint64_t v14 = v495;
        unint64_t v74 = v72[2];
        unint64_t v73 = v72[3];
        uint64_t v489 = v71;
        if (v74 >= v73 >> 1)
        {
          char v443 = sub_100093098(v73);
          sub_100065744(v443, v74 + 1, 1, (uint64_t)v72);
          unint64_t v72 = v444;
        }
        v72[2] = v74 + 1;
        *((unsigned char *)v72 + v74 + 32) = v17;
        Data._Representation.append(contentsOf:)();
        unint64_t v488 = v72[2];
        uint64_t v75 = swift_bridgeObjectRelease();
        unint64_t v83 = *((void *)&v502 + 1);
        uint64_t v13 = v503;
        uint64_t v84 = v502;
        switch(v491)
        {
          case 1:
            uint64_t v102 = sub_10002EC44(v75, v76, v77, v78, v79, v80, v81, v82, v473);
            uint64_t v103 = ByteBuffer.writeAvroArray(_:)(v102);
            goto LABEL_25;
          case 2:
            sub_10002EC44(v75, v76, v77, v78, v79, v80, v81, v82, v473);
            ByteBuffer.writeAvroMap(_:)();
LABEL_25:
            unint64_t v92 = (unint64_t)v527;
            Swift::Int v496 = v103;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_release();
            goto LABEL_28;
          case 3:
            v531.schema.type._uint64_t countAndFlagsBits = v495;
            v531.schema.type._char object = v527;
            v531.schema.Swift::String name = (Swift::String)v502;
            unint64_t v60 = (unint64_t)v500;
            Swift::Int v12 = (Swift::Int)v501;
            v531.schema.namespace.value._uint64_t countAndFlagsBits = v503;
            v531.schema.namespace.value._char object = v500;
            uint64_t v4 = (uint64_t)v516;
            v531.schema.fields._uint64_t rawValue = v501;
            v531.fields._uint64_t rawValue = v516;
            sub_10016AE48(v495, (unint64_t)v527, v502, SBYTE8(v502), v503, (uint64_t)v500, (uint64_t)v501, (uint64_t)v516, 3);
            unint64_t v92 = (unint64_t)v527;
            Swift::Int v496 = ByteBuffer.writeAvroRecord(_:)(&v531);
            char v472 = 3;
            unint64_t v83 = *((void *)&v502 + 1);
            uint64_t v84 = v502;
            uint64_t v13 = v503;
            goto LABEL_27;
          case 4:
            uint64_t v482 = *(void *)(v495 + 24);
            uint64_t v116 = *(void *)(v495 + 40);
            v492 = *(void **)(v495 + 32);
            uint64_t v117 = *(void *)(v495 + 56);
            uint64_t v118 = *(void **)(v495 + 72);
            v486 = *(void **)(v495 + 48);
            v487 = *(void **)(v495 + 64);
            unint64_t v119 = *(void **)(v495 + 80);
            uint64_t v120 = *(unsigned __int8 *)(v495 + 88);
            unint64_t v121 = (2 * *(void *)(v495 + 96)) ^ (*(uint64_t *)(v495 + 96) >> 63);
            sub_10002559C();
            sub_10016AE48(v495, (unint64_t)v527, v122, v123, v124, (uint64_t)v500, (uint64_t)v501, (uint64_t)v516, v473);
            swift_bridgeObjectRetain();
            uint64_t v483 = v116;
            uint64_t v484 = v117;
            uint64_t v125 = v116;
            uint64_t v126 = (uint64_t)v487;
            sub_10016AE48(v482, (unint64_t)v492, v125, (char)v486, v117, (uint64_t)v487, (uint64_t)v118, (uint64_t)v119, v120);
            sub_1001777D8(v121);
            sub_10017A2B8();
            if (v127)
            {
              Data._Representation.append(contentsOf:)();
              uint64_t v481 = *(void *)(v121 + 16);
            }
            else
            {
              uint64_t v481 = 0;
            }
            uint64_t v153 = swift_bridgeObjectRelease();
            unint64_t v161 = (unint64_t)v492;
            uint64_t v162 = v482;
            switch(v120)
            {
              case 1:
                uint64_t v201 = sub_10001DF04(v153, v154, v155, v156, v157, v158, v159, v160, 1);
                uint64_t v202 = ByteBuffer.writeAvroArray(_:)(v201);
                goto LABEL_76;
              case 2:
                sub_10002E778();
                sub_10001DF04(v203, v204, v205, v206, v207, v208, v209, v210, v475);
                ByteBuffer.writeAvroMap(_:)();
LABEL_76:
                uint64_t v163 = (uint64_t)v487;
                uint64_t v126 = (uint64_t)v487;
                Swift::Int v497 = v202;
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_release();
                goto LABEL_79;
              case 3:
                v532.schema.type._uint64_t countAndFlagsBits = v482;
                v532.schema.type._char object = v492;
                v532.schema.name._uint64_t countAndFlagsBits = v483;
                v532.schema.name._char object = v486;
                v532.schema.namespace.value._uint64_t countAndFlagsBits = v484;
                v532.schema.namespace.value._char object = v487;
                v532.schema.fields._uint64_t rawValue = v118;
                v532.fields._uint64_t rawValue = v119;
                sub_10017A018();
                sub_10016AE48(v482, (unint64_t)v492, v483, (char)v486, v484, (uint64_t)v487, (uint64_t)v118, (uint64_t)v119, v475);
                uint64_t v163 = v483;
                Swift::Int v497 = ByteBuffer.writeAvroRecord(_:)(&v532);
                sub_10017A018();
                uint64_t v162 = v484;
                unint64_t v161 = (unint64_t)v492;
                goto LABEL_78;
              case 4:
                unint64_t v479 = *(void *)(v482 + 32);
                uint64_t v485 = *(void *)(v482 + 40);
                uint64_t v232 = *(void *)(v482 + 56);
                uint64_t v476 = *(void *)(v482 + 48);
                uint64_t v233 = *(void *)(v482 + 64);
                uint64_t v234 = *(void *)(v482 + 72);
                uint64_t v235 = *(void *)(v482 + 80);
                uint64_t v236 = *(void *)(v482 + 24);
                char v237 = *(unsigned char *)(v482 + 88);
                unint64_t v238 = (2 * *(void *)(v482 + 96)) ^ (*(uint64_t *)(v482 + 96) >> 63);
                uint64_t v239 = sub_10017A00C();
                uint64_t v473 = v240;
                sub_10016AE48(v239, v241, v483, v242, v484, v243, (uint64_t)v118, v240, v475);
                swift_bridgeObjectRetain();
                char v472 = v232;
                sub_10016AE48(v236, v479, v485, v476, v232, v233, v234, v235, v237);
                sub_1001777D8(v238);
                sub_10017A0E0();
                if (v244) {
                  sub_100179ED4();
                }
                swift_bridgeObjectRelease();
                v533[0] = v236;
                v533[1] = v479;
                v533[2] = v485;
                v533[3] = v476;
                v533[4] = v232;
                v533[5] = v233;
                v533[6] = v234;
                v533[7] = v235;
                char v534 = v237;
                uint64_t v474 = ByteBuffer.writeAvroValue(_:)(v533);
                swift_bridgeObjectRelease();
                sub_100093A68(v236, v479, v485, v476, v232, v233, v234, v235, v237);
                sub_10002559C();
                sub_100093A68(v482, (unint64_t)v492, v483, (char)v486, v484, (uint64_t)v487, (uint64_t)v118, v473, v235);
                swift_bridgeObjectRelease();
                sub_10002C7E4(v482, (unint64_t)v492, v483, (char)v486, v269, v270, v271, v272, 4);
                sub_100029F9C();
                uint64_t v4 = (uint64_t)v516;
                sub_100093A68(v495, (unint64_t)v527, v502, SBYTE8(v502), v503, (uint64_t)v500, (uint64_t)v501, (uint64_t)v516, v478);
                swift_bridgeObjectRelease();
                sub_100179F30(v495, (unint64_t)v527, v502, SBYTE8(v502), v503, (uint64_t)v500, v273, v274, 4);
                uint64_t v14 = 4;
                uint64_t v275 = sub_10017A504();
                char v21 = (void *)v508;
                Swift::Int v12 = v528;
                unint64_t v20 = v513;
                sub_100093A68(v275, v276, v505, v493, v528, v513, v489, v508, 4);
                sub_100093A68((uint64_t)v516, *((unint64_t *)&v502 + 1), v505, v493, v528, v513, v489, v508, 4);
                if (__OFADD__(v475, v474)) {
                  goto LABEL_157;
                }
                uint64_t v13 = v529;
                sub_10017A424();
                uint64_t v230 = v481;
                break;
              default:
                sub_10001DF04(v153, v154, v155, v156, v157, v158, v159, v160, 0);
                uint64_t v163 = (uint64_t)v487;
                uint64_t v126 = (uint64_t)v487;
                Swift::Int v497 = ByteBuffer.writeAvroPrimitive(_:)(v482, (unint64_t)v492, (uint64_t)v487, (char)v486);
                LOBYTE(v473) = 0;
LABEL_78:
                sub_10002B098(v482, v161, v163, (char)v486, v162, v126, v164, v165, v477);
                swift_bridgeObjectRelease();
LABEL_79:
                sub_10002B098(v482, v161, v163, (char)v486, v162, v126, v211, v212, v120);
                uint64_t v213 = v14;
                uint64_t v214 = v14;
                uint64_t v14 = (uint64_t)v527;
                uint64_t v13 = *((void *)&v502 + 1);
                Swift::Int v12 = (Swift::Int)v501;
                sub_100093A68(v213, (unint64_t)v527, v502, SBYTE8(v502), v503, (uint64_t)v500, (uint64_t)v501, (uint64_t)v516, 4);
                swift_bridgeObjectRelease();
                sub_100179F30(v214, (unint64_t)v527, v502, SBYTE8(v502), v503, (uint64_t)v500, v215, v216, 4);
                uint64_t v4 = v519;
                sub_10017A0C4();
                unint64_t v20 = v513;
                char v21 = (void *)v489;
                uint64_t v222 = sub_100093A68(v217, v218, v219, v220, v221, v513, v489, (uint64_t)v527, 4);
                sub_10002AF2C(v222, v223, v224, v225, v226, v227, v228, v229, 4);
                sub_10001ED60();
                uint64_t v230 = v481;
                Swift::Int v231 = v497;
                break;
            }
            BOOL v174 = __OFADD__(v230, v231);
            Swift::Int v114 = v230 + v231;
            if (!v174) {
              goto LABEL_29;
            }
            goto LABEL_148;
          default:
            uint64_t v85 = sub_10017A330();
            unint64_t v60 = (unint64_t)v500;
            Swift::Int v12 = (Swift::Int)v501;
            uint64_t v4 = (uint64_t)v516;
            sub_10016AE48(v85, v86, v87, v88, v503, (uint64_t)v500, (uint64_t)v501, (uint64_t)v516, v473);
            sub_10017A664();
            unint64_t v92 = (unint64_t)v527;
            Swift::Int v496 = ByteBuffer.writeAvroPrimitive(_:)(v89, v90, v91, SBYTE8(v502));
            LOBYTE(v473) = 0;
LABEL_27:
            sub_100179F30(v14, v92, v84, v83, v13, v60, v93, v94, v472);
            swift_bridgeObjectRelease();
LABEL_28:
            sub_100093A68(v14, v92, v84, v83, v13, v60, v12, (uint64_t)v516, v491);
            sub_10017A504();
            sub_10017A0C4();
            unint64_t v20 = v513;
            char v21 = (void *)v489;
            sub_100093A68(v104, v105, v106, v107, v108, v513, v489, v14, 4);
            sub_1000180E8(v4, v83, v13, v109, v110, v111, v112, v113, 4);
            sub_10001ED60();
            Swift::Int v114 = v496;
LABEL_29:
            unint64_t v115 = v488;
            uint64_t v25 = v488 + v114;
            if (!__OFADD__(v488, v114)) {
              goto LABEL_59;
            }
            goto LABEL_147;
        }
      default:
        uint64_t v25 = 0;
        switch((char)v19)
        {
          case 1:
            Swift::Int v526 = v12;
            LOBYTE(v527) = v24;
            sub_10017A718();
            uint64_t v4 = v128;
            sub_1001776B0((2 * v128) ^ ((int)v128 >> 31));
            sub_10017A0E0();
            if (v129)
            {
              Data._Representation.append(contentsOf:)();
              uint64_t v25 = *(void *)(v13 + 16);
            }
            else
            {
              uint64_t v25 = 0;
            }
            goto LABEL_57;
          case 2:
            LOBYTE(v527) = v24;
            uint64_t v4 = v12;
            sub_10017A718();
            sub_1001777D8((2 * v130) ^ (v130 >> 63));
            sub_10017A0E0();
            if (v131)
            {
              sub_100179ED4();
              uint64_t v25 = *(void *)(v13 + 16);
            }
            else
            {
              uint64_t v25 = 0;
            }
LABEL_57:
            swift_bridgeObjectRelease();
            sub_10017A1C8();
            LOBYTE(v24) = (_BYTE)v527;
            goto LABEL_58;
          case 3:
            sub_10017A1F0(&qword_10021AC58, v18, (uint64_t)v23, v24);
            uint64_t v132 = (const void *)swift_allocObject();
            sub_100179F7C(v132);
            *(void *)(v13 + 16) = 4;
            *(void *)(v13 + 24) = v133;
            *(_DWORD *)(v13 + 32) = v17;
            goto LABEL_40;
          case 4:
            sub_10017A1F0(&qword_10021AC58, v18, (uint64_t)v23, v24);
            uint64_t v134 = (const void *)swift_allocObject();
            sub_100179F7C(v134);
            *(void *)(v13 + 16) = 8;
            *(void *)(v13 + 24) = v135;
            *(void *)(v13 + 32) = v17;
LABEL_40:
            Data._Representation.append(contentsOf:)();
            uint64_t v25 = *(void *)(v13 + 16);
            uint64_t v13 = v14;
            char v21 = (void *)v20;
            unint64_t v20 = v12;
            Swift::Int v12 = v4;
            swift_release();
            LOBYTE(v24) = (_BYTE)v527;
            uint64_t v14 = 72;
            goto LABEL_58;
          case 5:
            uint64_t v529 = v13;
            if ((v17 & 0x1000000000000000) != 0)
            {
              sub_10017A1BC();
              v445 = v19;
              unint64_t v446 = v17;
              unint64_t v448 = v447;
              Swift::Int v136 = String.UTF8View._foreignCount()();
              unint64_t v16 = v448;
              unint64_t v17 = v446;
              unint64_t v19 = v445;
            }
            else if ((v17 & 0x2000000000000000) != 0)
            {
              Swift::Int v136 = HIBYTE(v17) & 0xF;
            }
            else
            {
              Swift::Int v136 = v16 & 0xFFFFFFFFFFFFLL;
            }
            unint64_t v137 = (2 * v136) ^ (v136 >> 63);
            uint64_t v520 = v16;
            sub_10017A1BC();
            uint64_t v506 = v138;
            uint64_t v509 = v139;
            uint64_t v4 = (uint64_t)v19;
            sub_10002EF94();
            uint64_t v141 = v140;
            sub_10016AE48(v142, v143, v144, v145, v146, v147, v140, v148, 0);
            sub_1001777D8(v137);
            sub_10017A2B8();
            uint64_t v514 = (uint64_t)v21;
            if (v149)
            {
              Data._Representation.append(contentsOf:)();
              uint64_t v528 = *(void *)(v137 + 16);
            }
            else
            {
              uint64_t v528 = 0;
            }
            swift_bridgeObjectRelease();
            char v21 = v480;
            static String.Encoding.utf8.getter();
            unint64_t v498 = v17;
            uint64_t v175 = String.data(using:allowLossyConversion:)();
            unint64_t v177 = v176;
            sub_10000E040();
            v178();
            if (v177 >> 60 == 15) {
              unint64_t v179 = 0;
            }
            else {
              unint64_t v179 = v175;
            }
            if (v177 >> 60 == 15) {
              unint64_t v177 = 0xC000000000000000;
            }
            Data.append(_:)();
            uint64_t v13 = v529;
            switch(v177 >> 62)
            {
              case 1uLL:
                char v21 = (void *)HIDWORD(v179);
                uint64_t v245 = sub_10017A740();
                sub_10002B39C(v245, v246, v247, v248, v249, v250, v251, v252, v462);
                LODWORD(v115) = HIDWORD(v179) - v179;
                if (__OFSUB__(HIDWORD(v179), v179)) {
                  goto LABEL_158;
                }
                unint64_t v115 = (int)v115;
                break;
              case 2uLL:
                uint64_t v4 = v20;
                unint64_t v20 = (unint64_t)v19;
                uint64_t v253 = *(void *)(v179 + 16);
                char v21 = *(void **)(v179 + 24);
                sub_10017A740();
                sub_100093A68(v520, v498, v506, (char)v19, v4, v514, v141, v509, 0);
                unint64_t v115 = (unint64_t)v21 - v253;
                if (__OFSUB__(v21, v253)) {
                  goto LABEL_159;
                }
                uint64_t v13 = v529;
                break;
              case 3uLL:
                uint64_t v254 = sub_10017A740();
                sub_10002B39C(v254, v255, v256, v257, v258, v259, v260, v261, v462);
                sub_10017A778();
                break;
              default:
                uint64_t v180 = sub_10017A740();
                sub_10002B39C(v180, v181, v182, v183, v184, v185, v186, v187, v462);
                unint64_t v115 = BYTE6(v177);
                break;
            }
            uint64_t v14 = 72;
            uint64_t v25 = v528 + v115;
            if (!__OFADD__(v528, v115)) {
              goto LABEL_59;
            }
            goto LABEL_151;
          case 6:
            uint64_t v150 = (v17 >> 60) & 3;
            uint64_t v529 = v13;
            uint64_t v515 = (uint64_t)v21;
            Swift::Int v526 = v12;
            v494 = v19;
            if (v150)
            {
              unint64_t v151 = v17 >> 62;
              uint64_t v4 = BYTE6(v17);
              unint64_t v504 = HIDWORD(v16);
              uint64_t v507 = v18;
              LODWORD(v527) = v17 >> 62;
              if (v150 != 1)
              {
                uint64_t v490 = (uint64_t)v22;
                Swift::Int v499 = v17;
                uint64_t v200 = 0;
                unint64_t v521 = v16;
                uint64_t v511 = (uint64_t)v23;
                switch(v151)
                {
                  case 1uLL:
                    uint64_t v517 = BYTE6(v17);
                    uint64_t v304 = v18;
                    unint64_t v19 = v23;
                    if (__OFSUB__(HIDWORD(v16), v16)) {
                      goto LABEL_162;
                    }
                    uint64_t v200 = HIDWORD(v16) - (int)v16;
LABEL_115:
                    uint64_t v307 = sub_10017A5F4();
                    Swift::Int v12 = v20;
                    sub_10016AE48(v307, v17, v304, (char)v494, v20, v515, v490, (uint64_t)v19, v462);
                    uint64_t v308 = sub_10002666C();
                    sub_10016AE48(v308, v309, v310, v311, v312, v313, v490, (uint64_t)v19, v465);
                    uint64_t v314 = sub_10002666C();
                    sub_10016AE48(v314, v315, v316, v317, v318, v319, v490, (uint64_t)v19, v466);
                    uint64_t v13 = v529;
                    uint64_t v4 = v517;
LABEL_116:
                    unint64_t v320 = v13;
                    sub_1001777D8((2 * v200) ^ (v200 >> 63));
                    sub_10017A0E0();
                    if (v321)
                    {
                      sub_100179ED4();
                      uint64_t v528 = *(void *)(v13 + 16);
                    }
                    else
                    {
                      uint64_t v528 = 0;
                      unint64_t v19 = v525;
                    }
                    char v21 = (void *)v515;
                    uint64_t v322 = v20;
                    swift_bridgeObjectRelease();
                    uint64_t v323 = Data.append(_:)();
                    uint64_t v13 = v507;
                    uint64_t v14 = v511;
                    unint64_t v20 = (unint64_t)v494;
                    switch((int)v527)
                    {
                      case 1:
                        uint64_t v340 = sub_100028014(v323, v324, v325, v326, v327, v328, v329, v330, 0);
                        uint64_t v348 = sub_100025F14(v340, v341, v342, v343, v344, v345, v346, v347, v468);
                        sub_100025F14(v348, v349, v350, v351, v352, v353, v354, v355, v469);
                        if (__OFSUB__(v504, v4)) {
                          goto LABEL_164;
                        }
                        uint64_t v4 = (int)v504 - (int)v4;
LABEL_126:
                        sub_10001ED60();
                        break;
                      case 2:
                        v527 = *(void **)(v521 + 24);
                        uint64_t v518 = *(void *)(v521 + 16);
                        sub_10017A5F4();
                        Swift::Int v12 = v499;
                        sub_10002A0F8();
                        char v21 = (void *)v490;
                        sub_100093A68(v356, v357, v358, v359, v360, v515, v490, v511, v472);
                        sub_10002A0F8();
                        uint64_t v14 = v515;
                        sub_100093A68(v361, v362, v363, v364, v365, v515, v490, v511, 0);
                        sub_10002A0F8();
                        sub_100093A68(v366, v367, v368, v369, v370, v515, v490, v511, 0);
                        sub_10017A784();
                        uint64_t v4 = v371 - v518;
                        if (__OFSUB__(v371, v518)) {
                          goto LABEL_165;
                        }
                        uint64_t v13 = v320;
                        sub_10017A424();
                        break;
                      case 3:
                        uint64_t v372 = sub_100028014(v323, v324, v325, v326, v327, v328, v329, v330, 0);
                        uint64_t v380 = sub_100025F14(v372, v373, v374, v375, v376, v377, v378, v379, v470);
                        sub_100025F14(v380, v381, v382, v383, v384, v385, v386, v387, v471);
                        uint64_t v4 = 0;
                        goto LABEL_126;
                      default:
                        uint64_t v331 = sub_100028014(v323, v324, v325, v326, v327, v328, v329, v330, 0);
                        sub_100025F14(v331, v332, v333, v334, v335, v336, v337, v338, v467);
                        uint64_t v339 = sub_10017A5F4();
                        sub_100093A68(v339, v320, v507, (char)v494, v322, (uint64_t)v19, v515, v511, v472);
                        goto LABEL_126;
                    }
                    unint64_t v115 = v528;
                    uint64_t v25 = v528 + v4;
                    if (!__OFADD__(v528, v4)) {
                      goto LABEL_59;
                    }
                    goto LABEL_155;
                  case 2uLL:
                    uint64_t v517 = BYTE6(v17);
                    uint64_t v306 = *(void *)(v16 + 16);
                    uint64_t v305 = *(void *)(v16 + 24);
                    uint64_t v200 = v305 - v306;
                    uint64_t v304 = v18;
                    unint64_t v19 = v23;
                    if (!__OFSUB__(v305, v306)) {
                      goto LABEL_115;
                    }
                    goto LABEL_163;
                  case 3uLL:
                    goto LABEL_116;
                  default:
                    uint64_t v200 = BYTE6(v17);
                    goto LABEL_116;
                }
              }
              uint64_t v152 = 0;
              uint64_t v528 = v20;
              switch(v151)
              {
                case 1uLL:
                  uint64_t v277 = v20;
                  if (__OFSUB__(HIDWORD(v16), v16)) {
                    goto LABEL_160;
                  }
                  uint64_t v278 = v13;
                  uint64_t v152 = HIDWORD(v16) - (int)v16;
                  break;
                case 2uLL:
                  uint64_t v280 = *(void *)(v16 + 16);
                  uint64_t v279 = *(void *)(v16 + 24);
                  uint64_t v152 = v279 - v280;
                  uint64_t v277 = v20;
                  if (__OFSUB__(v279, v280)) {
                    goto LABEL_161;
                  }
                  uint64_t v278 = v13;
                  break;
                case 3uLL:
                  goto LABEL_106;
                default:
                  uint64_t v152 = BYTE6(v17);
                  goto LABEL_106;
              }
              uint64_t v281 = v18;
              char v282 = (char)v19;
              uint64_t v283 = v23;
              sub_10016AE48(v16, v17, v18, v282, v277, v515, (uint64_t)v22, (uint64_t)v23, 0);
              uint64_t v18 = v281;
              Swift::OpaquePointer v23 = v283;
              unint64_t v19 = v494;
              uint64_t v13 = v278;
LABEL_106:
              if (__OFSUB__(v152, v18)) {
                goto LABEL_154;
              }
              uint64_t v4 = (uint64_t)v19;
              uint64_t v14 = (uint64_t)v23;
              unint64_t v20 = v13;
              uint64_t v13 = (2 * (v152 - v18)) ^ ((v152 - v18) >> 63);
              uint64_t v284 = sub_10017A1BC();
              uint64_t v286 = v285;
              sub_10016AF60(v284, v287, v288, 6);
              char v21 = (void *)v286;
              sub_100027BCC(v286, v17 & 0xCFFFFFFFFFFFFFFFLL);
              sub_1001777D8(v13);
              sub_10017A2B8();
              if (v289)
              {
                Data._Representation.append(contentsOf:)();
                uint64_t v512 = *(void *)(v13 + 16);
              }
              else
              {
                uint64_t v512 = 0;
              }
              swift_bridgeObjectRelease();
              Data.append(_:)();
              switch((int)v527)
              {
                case 1:
                  uint64_t v388 = sub_100027348(v507, v462);
                  uint64_t v396 = sub_10002AF2C(v388, v389, v390, v391, v392, v393, v394, v395, 0);
                  sub_10002AF2C(v396, v397, v398, v399, v400, v401, v402, v403, 0);
                  if (__OFSUB__(v504, v4)) {
                    goto LABEL_166;
                  }
                  sub_10001ED60();
                  break;
                case 2:
                  Swift::Int v12 = v528;
                  uint64_t v4 = v286;
                  v527 = *(void **)(v286 + 24);
                  unint64_t v522 = *(void *)(v286 + 16);
                  char v21 = (void *)v507;
                  sub_10017A1E4();
                  sub_100093A68(v404, v405, v406, v407, v408, v409, v410, v14, 0);
                  uint64_t v411 = sub_10017A458();
                  uint64_t v14 = (uint64_t)v494;
                  sub_10017A240(v411, v412, v413, v414, v415, v416, v417, v418, v460);
                  uint64_t v419 = sub_10017A458();
                  sub_10017A240(v419, v420, v421, v422, v423, v424, v425, v426, v461);
                  sub_10017A784();
                  if (__OFSUB__(v427, v522)) {
                    goto LABEL_167;
                  }
                  uint64_t v13 = v20;
LABEL_135:
                  sub_10017A424();
                  break;
                case 3:
                  uint64_t v428 = sub_100027348(v507, v462);
                  sub_10002AF2C(v428, v429, v430, v431, v432, v433, v434, v435, 0);
                  uint64_t v436 = v13;
                  uint64_t v13 = v529;
                  sub_1000180E8(v4, v17, v436, v437, v438, v439, v440, v441, 0);
                  sub_10017A778();
                  goto LABEL_135;
                default:
                  uint64_t v290 = sub_100027348(v507, v462);
                  sub_10002AF2C(v290, v291, v292, v293, v294, v295, v296, v297, 0);
                  uint64_t v298 = v13;
                  uint64_t v13 = v529;
                  sub_1000180E8(v4, v17, v298, v299, v300, v301, v302, v303, 0);
                  sub_10017A424();
                  unint64_t v115 = BYTE6(v17);
                  break;
              }
              uint64_t v25 = v512 + v115;
              if (__OFADD__(v512, v115)) {
                goto LABEL_156;
              }
            }
            else
            {
              unint64_t v188 = 2 * *(void *)(v16 + 16);
              uint64_t v189 = sub_10017A1BC();
              uint64_t v190 = v20;
              unint64_t v191 = v17;
              uint64_t v193 = v192;
              uint64_t v528 = v190;
              uint64_t v14 = v194;
              uint64_t v510 = v195;
              uint64_t v197 = v196;
              sub_10016AE48(v189, v198, v192, (char)v19, v190, (uint64_t)v21, v194, v195, 0);
              sub_10016AF60(v197, v191, v193, 6);
              sub_1001777D8(v188);
              sub_10017A0E0();
              if (v199)
              {
                sub_100179ED4();
                v527 = *(void **)(v188 + 16);
              }
              else
              {
                LOBYTE(v527) = 0;
              }
              swift_bridgeObjectRelease();
              uint64_t v262 = v197;
              if (*(void *)(v197 + 16))
              {
                Data._Representation.append(contentsOf:)();
                uint64_t v262 = v197;
                uint64_t v263 = *(void *)(v197 + 16);
              }
              else
              {
                uint64_t v263 = 0;
              }
              unint64_t v264 = v191;
              char v21 = v19;
              Swift::Int v12 = v528;
              unint64_t v20 = v515;
              uint64_t v4 = v262;
              sub_100093A68(v262, v264, v193, (char)v19, v528, v515, v14, v510, 0);
              sub_10017A5F4();
              sub_10017A4F8();
              sub_100093A68(v265, v266, v267, (char)v19, v528, v515, v14, v510, v462);
              sub_10017A784();
              uint64_t v25 = v268 + v263;
              if (__OFADD__(v268, v263))
              {
                __break(1u);
LABEL_154:
                __break(1u);
LABEL_155:
                __break(1u);
LABEL_156:
                __break(1u);
LABEL_157:
                __break(1u);
LABEL_158:
                __break(1u);
LABEL_159:
                __break(1u);
LABEL_160:
                __break(1u);
LABEL_161:
                __break(1u);
LABEL_162:
                __break(1u);
LABEL_163:
                __break(1u);
LABEL_164:
                __break(1u);
LABEL_165:
                __break(1u);
LABEL_166:
                __break(1u);
LABEL_167:
                __break(1u);
              }
              uint64_t v13 = v529;
              sub_10017A424();
            }
LABEL_59:
            BOOL v174 = __OFADD__(v12, v25);
            v12 += v25;
            if (!v174)
            {
              if (v13 == v523)
              {
                uint64_t v449 = swift_bridgeObjectRelease();
                sub_100179F14(v449, v450, v451, (uint64_t)_swiftEmptyArrayStorage);
                uint64_t v4 = v452;
                char v21 = *(void **)(v452 + 16);
                unint64_t v115 = *(void *)(v452 + 24);
                unint64_t v20 = (unint64_t)v21 + 1;
                if ((unint64_t)v21 >= v115 >> 1) {
                  goto LABEL_149;
                }
                goto LABEL_141;
              }
              continue;
            }
            __break(1u);
LABEL_147:
            __break(1u);
LABEL_148:
            __break(1u);
LABEL_149:
            char v455 = sub_100093098(v115);
            sub_100065744(v455, v20, 1, v4);
            uint64_t v4 = v456;
LABEL_141:
            *(void *)(v4 + 16) = v20;
            *((unsigned char *)v21 + v4 + 32) = 0;
            Swift::Int v453 = ByteBuffer.writeBytes(_:)((Swift::OpaquePointer)v4);
            swift_bridgeObjectRelease();
            if (__OFADD__(v12, v453))
            {
              __break(1u);
LABEL_151:
              __break(1u);
              goto LABEL_152;
            }
LABEL_145:
            sub_10000DFB8();
            return;
          case 7:
            goto LABEL_58;
          default:
            uint64_t v26 = v21;
            char v27 = v16 & 1;
            uint64_t v4 = v24;
            sub_10002572C(&qword_10021AC58);
            uint64_t v28 = v13;
            uint64_t v29 = swift_allocObject();
            size_t v30 = j__malloc_size((const void *)v29);
            *(void *)(v29 + 16) = 1;
            *(void *)(v29 + 24) = 2 * v30 - 64;
            *(unsigned char *)(v29 + 32) = v27;
            char v21 = v26;
            Data._Representation.append(contentsOf:)();
            uint64_t v25 = *(void *)(v29 + 16);
            uint64_t v13 = v28;
            swift_release();
            LOBYTE(v24) = v4;
            uint64_t v14 = 72;
            goto LABEL_58;
        }
    }
  }
}

void ByteBuffer.writeAvroMap(_:)()
{
  sub_10000DFE0();
  uint64_t v4 = v3;
  type metadata accessor for String.Encoding();
  sub_100020C48();
  __chkstk_darwin(v5);
  sub_10000E04C();
  uint64_t v189 = v4;
  uint64_t v9 = *(void *)(v4 + 16);
  Swift::Int v197 = v0;
  if (!v9) {
    goto LABEL_82;
  }
  uint64_t v10 = sub_1001777D8(2 * v9);
  Swift::Int v11 = ByteBuffer.writeBytes(_:)((Swift::OpaquePointer)v10);
  swift_bridgeObjectRelease();
  uint64_t v187 = v189 + 64;
  uint64_t v12 = 1 << *(unsigned char *)(v189 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v189 + 64);
  int64_t v188 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v15 = (void *)v11;
  swift_bridgeObjectRetain();
  int64_t v16 = 0;
  while (2)
  {
    if (v14)
    {
      uint64_t v192 = (v14 - 1) & v14;
      int64_t v193 = v16;
      unint64_t v17 = __clz(__rbit64(v14)) | (v16 << 6);
      Swift::Int v18 = v197;
      goto LABEL_24;
    }
    int64_t v19 = v16 + 1;
    Swift::Int v18 = v197;
    if (__OFADD__(v16, 1))
    {
LABEL_89:
      __break(1u);
LABEL_90:
      __break(1u);
LABEL_91:
      __break(1u);
LABEL_92:
      __break(1u);
LABEL_93:
      __break(1u);
LABEL_94:
      __break(1u);
      goto LABEL_95;
    }
    if (v19 < v188)
    {
      unint64_t v20 = *(void *)(v187 + 8 * v19);
      int64_t v21 = v16 + 1;
      if (!v20)
      {
        sub_10017A3FC();
        if (v22 == v23) {
          break;
        }
        sub_10017A37C();
        if (!v20)
        {
          sub_10017A3FC();
          if (v22 == v23) {
            break;
          }
          sub_10017A37C();
          if (!v20)
          {
            int64_t v19 = v24 + 3;
            if (v19 >= v188) {
              break;
            }
            unint64_t v20 = *(void *)(v187 + 8 * v19);
            if (!v20)
            {
              while (!__OFADD__(v19, 1))
              {
                sub_10017A3FC();
                if (v22 == v23) {
                  goto LABEL_78;
                }
                sub_10017A37C();
                int64_t v19 = v25 + 1;
                if (v20) {
                  goto LABEL_23;
                }
              }
              goto LABEL_93;
            }
            int64_t v21 = v19;
          }
        }
      }
LABEL_23:
      uint64_t v192 = (v20 - 1) & v20;
      int64_t v193 = v21;
      unint64_t v17 = __clz(__rbit64(v20)) + (v21 << 6);
LABEL_24:
      uint64_t v26 = (uint64_t *)(*(void *)(v189 + 48) + 16 * v17);
      uint64_t v28 = *v26;
      unint64_t v27 = v26[1];
      sub_10017A69C();
      uint64_t v1 = *(void **)v29;
      unint64_t v198 = *(void **)(v29 + 8);
      Swift::Int v30 = *(void *)(v29 + 16);
      uint64_t v199 = *(void **)(v29 + 24);
      long long v200 = *(_OWORD *)(v29 + 32);
      uint64_t v32 = *(void *)(v29 + 48);
      uint64_t v31 = *(void *)(v29 + 56);
      uint64_t v201 = *(unsigned __int8 *)(v29 + 64);
      if ((v27 & 0x1000000000000000) != 0)
      {
        Swift::Int v33 = String.UTF8View._foreignCount()();
      }
      else if ((v27 & 0x2000000000000000) != 0)
      {
        Swift::Int v33 = HIBYTE(v27) & 0xF;
      }
      else
      {
        Swift::Int v33 = v28 & 0xFFFFFFFFFFFFLL;
      }
      unint64_t v34 = (2 * v33) ^ (v33 >> 63);
      swift_bridgeObjectRetain();
      sub_10017A160();
      sub_10017A63C();
      sub_10016AE48(v35, v36, v37, v38, v39, *((uint64_t *)&v200 + 1), v32, v31, v169);
      uint64_t v40 = sub_1001777D8(v34);
      uint64_t v196 = v31;
      uint64_t v195 = v32;
      if (v40[2])
      {
        Data._Representation.append(contentsOf:)();
        uint64_t v41 = v40[2];
      }
      else
      {
        uint64_t v41 = 0;
      }
      swift_bridgeObjectRelease();
      static String.Encoding.utf8.getter();
      uint64_t v42 = String.data(using:allowLossyConversion:)();
      unint64_t v44 = v43;
      sub_10000E040();
      v45();
      if (v44 >> 60 == 15) {
        unint64_t v46 = 0;
      }
      else {
        unint64_t v46 = v42;
      }
      if (v44 >> 60 == 15) {
        unint64_t v47 = 0xC000000000000000;
      }
      else {
        unint64_t v47 = v44;
      }
      Data.append(_:)();
      switch(v47 >> 62)
      {
        case 1uLL:
          unint64_t v44 = HIDWORD(v46);
          sub_10017A670();
          swift_bridgeObjectRelease();
          int64_t v19 = (HIDWORD(v46) - v46);
          if (__OFSUB__(HIDWORD(v46), v46)) {
            goto LABEL_90;
          }
          goto LABEL_43;
        case 2uLL:
          Swift::Int v18 = v30;
          uint64_t v48 = v15;
          uint64_t v49 = *(void *)(v46 + 16);
          unint64_t v44 = *(void *)(v46 + 24);
          sub_10017A670();
          swift_bridgeObjectRelease();
          int64_t v19 = v44 - v49;
          if (__OFSUB__(v44, v49)) {
            goto LABEL_91;
          }
          uint64_t v15 = v48;
          sub_10017A5E0();
          Swift::Int v30 = v18;
LABEL_44:
          BOOL v23 = __OFADD__(v41, v58);
          int64_t v19 = v41 + v58;
          if (!v23)
          {
            uint64_t v194 = v30;
            unint64_t v191 = v15;
            int64_t v190 = v19;
            switch(v201)
            {
              case 1:
                sub_1000295DC();
                sub_10002A890(v69, v70, v71, v72, v73, v74, v75, v76, v172);
                sub_10017A7B8();
                uint64_t v78 = ByteBuffer.writeAvroArray(_:)(v77);
                goto LABEL_49;
              case 2:
                sub_10002E778();
                sub_10002A890(v79, v80, v81, v82, v83, v84, v85, v86, v172);
                sub_10017A7B8();
                uint64_t v78 = ByteBuffer.writeAvroMap(_:)(v87);
LABEL_49:
                uint64_t v68 = v78;
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                uint64_t v88 = swift_release();
                goto LABEL_52;
              case 3:
                uint64_t v96 = (uint64_t)v1;
                v203.schema.type._uint64_t countAndFlagsBits = (uint64_t)v1;
                unint64_t v2 = (unint64_t)v198;
                v203.schema.type._char object = v198;
                v203.schema.name._uint64_t countAndFlagsBits = v194;
                uint64_t v1 = v199;
                v203.schema.name._char object = v199;
                v203.schema.namespace = (Swift::String_optional)v200;
                v203.schema.fields._uint64_t rawValue = (void *)v44;
                v203.fields._uint64_t rawValue = (void *)v47;
                sub_10016AE48(v96, (unint64_t)v198, v194, (char)v199, v200, *((uint64_t *)&v200 + 1), v44, v47, 3);
                Swift::Int v18 = v197;
                Swift::Int v60 = ByteBuffer.writeAvroRecord(_:)(&v203);
                uint64_t v68 = v60;
                char v170 = 3;
                goto LABEL_51;
              case 4:
                unint64_t v97 = v1;
                uint64_t v98 = v1[3];
                char v100 = (void *)v1[4];
                uint64_t v99 = v1[5];
                uint64_t v102 = (void *)v1[6];
                uint64_t v101 = v1[7];
                uint64_t v103 = v97[8];
                uint64_t v186 = (void *)v97[10];
                uint64_t v104 = *((unsigned __int8 *)v97 + 88);
                sub_10017A40C();
                unint64_t v181 = v105;
                sub_10002559C();
                uint64_t v183 = v106;
                sub_10017A63C();
                uint64_t v107 = v47;
                uint64_t v109 = v108;
                sub_10016AE48(v110, v111, v112, v113, v114, v115, v44, v107, v172);
                swift_bridgeObjectRetain();
                unint64_t v184 = (unint64_t)v100;
                uint64_t v185 = (void *)v103;
                sub_10016AE48(v98, (unint64_t)v100, v99, (char)v102, v101, v103, (uint64_t)v109, (uint64_t)v186, v104);
                sub_1001777D8(v181);
                sub_10017A2C8();
                if (v116)
                {
                  Data._Representation.append(contentsOf:)();
                  uint64_t v117 = v100[2];
                }
                else
                {
                  uint64_t v117 = 0;
                }
                uint64_t v118 = swift_bridgeObjectRelease();
                uint64_t v126 = v98;
                uint64_t v182 = v117;
                switch(v104)
                {
                  case 1:
                    uint64_t v127 = *((void *)&v200 + 1);
                    sub_100027740(v118, v119, v120, v121, v122, v123, v124, v125, 1);
                    sub_10017A790();
                    uint64_t v136 = ByteBuffer.writeAvroArray(_:)(v135);
                    goto LABEL_64;
                  case 2:
                    uint64_t v127 = *((void *)&v200 + 1);
                    sub_100027740(v118, v119, v120, v121, v122, v123, v124, v125, 2);
                    sub_10017A790();
                    uint64_t v136 = ByteBuffer.writeAvroMap(_:)(v137);
LABEL_64:
                    Swift::Int v18 = v136;
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    uint64_t v138 = swift_release();
                    goto LABEL_67;
                  case 3:
                    v204.schema.type._uint64_t countAndFlagsBits = v98;
                    v204.schema.type._char object = v100;
                    v204.schema.name._uint64_t countAndFlagsBits = v99;
                    v204.schema.name._char object = v102;
                    v204.schema.namespace.value._uint64_t countAndFlagsBits = v101;
                    v204.schema.namespace.value._char object = v185;
                    v204.schema.fields._uint64_t rawValue = v109;
                    v204.fields._uint64_t rawValue = v186;
                    sub_10016AE48(v98, (unint64_t)v100, v99, (char)v102, v101, (uint64_t)v185, (uint64_t)v109, (uint64_t)v186, 3);
                    Swift::Int v18 = ByteBuffer.writeAvroRecord(_:)(&v204);
                    uint64_t v127 = *((void *)&v200 + 1);
                    sub_10001EDD8(v18, v146, v147, v148, v149, v150, v151, v152, 3);
                    goto LABEL_66;
                  case 4:
                    uint64_t v180 = *(void *)(v98 + 24);
                    unint64_t v153 = *(void *)(v98 + 32);
                    uint64_t v178 = *(void *)(v98 + 40);
                    uint64_t v202 = *(void *)(v98 + 56);
                    uint64_t v154 = *(void *)(v98 + 72);
                    uint64_t v179 = *(void *)(v98 + 64);
                    uint64_t v172 = *(void *)(v98 + 80);
                    char v155 = *(unsigned char *)(v98 + 88);
                    unint64_t v173 = (2 * *(void *)(v126 + 96)) ^ (*(uint64_t *)(v126 + 96) >> 63);
                    sub_10002559C();
                    uint64_t v157 = v156;
                    uint64_t v177 = v158;
                    sub_10016AE48(v126, v184, v99, v159, v101, (uint64_t)v185, v158, (uint64_t)v186, v175);
                    swift_bridgeObjectRetain();
                    sub_10016AE48(v180, v153, v178, v157, v202, v179, v154, v172, v155);
                    sub_1001777D8(v173);
                    sub_10017A0E0();
                    if (v160)
                    {
                      Data._Representation.append(contentsOf:)();
                      int64_t v171 = *(void *)(v157 + 16);
                    }
                    else
                    {
                      int64_t v171 = 0;
                    }
                    swift_bridgeObjectRelease();
                    v205[0] = v180;
                    v205[1] = v153;
                    v205[2] = v178;
                    v205[3] = v157;
                    uint64_t v206 = v202;
                    v207[0] = v179;
                    v207[1] = v154;
                    v207[2] = v172;
                    char v208 = v176;
                    uint64_t v174 = ByteBuffer.writeAvroValue(_:)(v205);
                    swift_bridgeObjectRelease();
                    sub_100093A68(v180, v153, v178, v157, v202, v179, v154, v172, v176);
                    unint64_t v2 = v184;
                    sub_100093A68(v126, v184, v99, (char)v102, v101, (uint64_t)v185, v177, (uint64_t)v186, 4);
                    swift_bridgeObjectRelease();
                    uint64_t v161 = sub_10017A2D4();
                    sub_100093A68(v161, v162, v163, (char)v102, v101, (uint64_t)v185, v177, (uint64_t)v186, 4);
                    uint64_t v1 = (void *)v200;
                    sub_100093A68(v183, (unint64_t)v198, v194, (char)v199, v200, *((uint64_t *)&v200 + 1), v195, v196, 4);
                    sub_100093A68(v183, (unint64_t)v198, v194, (char)v199, v200, *((uint64_t *)&v200 + 1), v195, v196, 4);
                    int64_t v19 = v171;
                    Swift::Int v18 = v171 + v174;
                    if (__OFADD__(v171, v174)) {
                      goto LABEL_94;
                    }
                    goto LABEL_68;
                  default:
                    uint64_t v127 = *((void *)&v200 + 1);
                    sub_100027740(v118, v119, v120, v121, v122, v123, v124, v125, 0);
                    Swift::Int v18 = ByteBuffer.writeAvroPrimitive(_:)((uint64_t)v100, (unint64_t)v109, v99, (char)v102);
                    sub_10001EDD8(v18, v128, v129, v130, v131, v132, v133, v134, 0);
LABEL_66:
                    uint64_t v138 = swift_bridgeObjectRelease();
LABEL_67:
                    sub_10001EDD8(v138, v139, v140, v141, v142, v143, v144, v145, v104);
                    unint64_t v2 = (unint64_t)v199;
                    uint64_t v1 = (void *)v200;
                    sub_100093A68(v183, (unint64_t)v198, v194, (char)v199, v200, v127, v195, v196, 4);
                    sub_100093A68(v183, (unint64_t)v198, v194, (char)v199, v200, v127, v195, v196, 4);
LABEL_68:
                    uint64_t v68 = v182 + v18;
                    int64_t v19 = (int64_t)&v206;
                    uint64_t v15 = v191;
                    if (!__OFADD__(v182, v18)) {
                      goto LABEL_53;
                    }
                    goto LABEL_92;
                }
              default:
                sub_10002A890(v50, v51, v52, v53, v54, v55, v56, v57, 0);
                uint64_t v59 = sub_10017A470();
                Swift::Int v18 = v197;
                Swift::Int v60 = ByteBuffer.writeAvroPrimitive(_:)(v59, v2, v46, (char)v1);
                uint64_t v68 = v60;
LABEL_51:
                uint64_t v88 = sub_100179EA4(v60, v61, v62, v63, v64, v65, v66, v67, v170);
LABEL_52:
                sub_100179EA4(v88, v89, v90, v91, v92, v93, v94, v95, v201);
LABEL_53:
                int64_t v19 = v190 + v68;
                if (__OFADD__(v190, v68)) {
                  goto LABEL_87;
                }
                BOOL v23 = __OFADD__(v15, v19);
                uint64_t v15 = (void *)((char *)v15 + v19);
                int64_t v16 = v193;
                int64_t v19 = (int64_t)v207;
                unint64_t v14 = v192;
                if (!v23) {
                  continue;
                }
                goto LABEL_88;
            }
          }
          __break(1u);
LABEL_87:
          __break(1u);
LABEL_88:
          __break(1u);
          break;
        default:
          sub_10017A670();
          swift_bridgeObjectRelease();
LABEL_43:
          sub_10017A5E0();
          goto LABEL_44;
      }
      goto LABEL_89;
    }
    break;
  }
LABEL_78:
  uint64_t v1 = v15;
  uint64_t v164 = swift_release();
  sub_100179F14(v164, v165, v166, (uint64_t)_swiftEmptyArrayStorage);
  sub_10017A86C();
  if (v167) {
LABEL_95:
  }
    sub_10017A2E4(v19);
  sub_10017A194();
  sub_100020CD0();
  uint64_t v6 = (uint64_t)v1 + v18;
  if (!__OFADD__(v1, v18)) {
    goto LABEL_85;
  }
  __break(1u);
LABEL_82:
  sub_100179F14(v6, v7, v8, (uint64_t)_swiftEmptyArrayStorage);
  sub_10017A86C();
  if (v167) {
    sub_10017A2E4(v168);
  }
  sub_10017A194();
  sub_100020CD0();
LABEL_85:
  sub_10000DFB8();
}

Swift::Int __swiftcall ByteBuffer.writeAvroRecord(_:)(SwiftAvro::AvroRecord *a1)
{
  sub_10000DFE0();
  uint64_t v2 = v1;
  uint64_t v1750 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v1750);
  v1749 = (char *)&v1724 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(void *)(v2 + 56);
  uint64_t v1736 = *(void *)(v5 + 16);
  if (v1736)
  {
    uint64_t v1737 = v5 + 32;
    uint64_t v1748 = v3 + 8;
    v1725 = (char *)&v1780 + 4;
    v1726 = v1781;
    v1724 = (char *)&v1780 + 1;
    swift_bridgeObjectRetain();
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    uint64_t v1729 = 0;
    uint64_t v1730 = v5;
LABEL_3:
    unint64_t v8 = v7;
    sub_1001795AC(v7, 1, v5);
    unint64_t v9 = v1737 + 72 * v8;
    uint64_t v10 = *(void *)v9;
    Swift::Int v11 = *(void **)(v9 + 8);
    uint64_t v13 = *(void *)(v9 + 16);
    uint64_t v12 = *(void **)(v9 + 24);
    uint64_t v15 = *(void *)(v9 + 32);
    unint64_t v14 = *(unsigned char **)(v9 + 40);
    int64_t v16 = *(void **)(v9 + 48);
    unint64_t v17 = *(void **)(v9 + 56);
    uint64_t v18 = v8 + 1;
    unint64_t v1742 = v18;
    uint64_t v1743 = v6;
    uint64_t v19 = *(unsigned __int8 *)(v9 + 64);
    v1755 = v12;
    switch(v19)
    {
      case 1:
        uint64_t v1738 = v19;
        v1746 = (void *)v12[2];
        uint64_t v1734 = (uint64_t)v16;
        uint64_t v1735 = (uint64_t)v17;
        uint64_t v1732 = v15;
        uint64_t v1733 = (uint64_t)v14;
        uint64_t v1731 = v10;
        if (!v1746)
        {
          sub_10017A544();
          sub_10017A3A4();
          uint64_t v1497 = v1496;
          sub_10016AE48(v1498, v1499, v1500, v1501, v1502, v1503, v1504, v1496, 1);
          uint64_t v1505 = sub_10017A2D4();
          sub_10016AE48(v1505, v1506, v1507, (char)v1755, v15, v6, v18, v1497, 1);
          v1780 = _swiftEmptyArrayStorage;
          sub_1001798E8((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100065744);
          sub_100026F34();
          uint64_t v1508 = (uint64_t)v1780;
          v1780[2] = v18 + 1;
          *(unsigned char *)(v1508 + 32 + v18) = 0;
          sub_1000282EC();
          v1451 = (unsigned char *)sub_10016F72C(v1508);
          swift_bridgeObjectRelease();
          goto LABEL_399;
        }
        uint64_t v34 = v10;
        unint64_t v35 = (unint64_t)v16;
        unint64_t v36 = v14;
        uint64_t v37 = v13;
        uint64_t v38 = sub_10016CF64((uint64_t)v12);
        uint64_t v39 = (2 * v38) ^ (v38 >> 63);
        uint64_t v40 = sub_10017A36C();
        sub_10001D82C(v40, v41, v42, (char)v1755, v43, v44, v45, v46, 1);
        unint64_t v1727 = (unint64_t)v11;
        v1728 = (void *)v37;
        sub_10001D82C(v34, (unint64_t)v11, v37, (char)v1755, v47, v48, v49, v50, 1);
        uint64_t v51 = sub_10017A48C();
        uint64_t v52 = v1779;
        uint64_t v53 = v1779;
        ByteBuffer.writeBytes(_:)((Swift::OpaquePointer)v51);
        sub_100029978();
        v1745 = v1755 + 4;
        swift_bridgeObjectRetain();
        uint64_t v54 = (uint64_t)v1755;
        unint64_t v55 = 0;
LABEL_7:
        unint64_t v56 = sub_1001795AC(v55, 1, v54);
        uint64_t v61 = &v1745[9 * v55];
        unint64_t v63 = *v61;
        unint64_t v62 = v61[1];
        uint64_t v64 = v61[2];
        uint64_t v65 = (void *)v61[3];
        uint64_t v66 = v61[4];
        uint64_t v67 = (void *)v61[5];
        uint64_t v69 = (unsigned char *)v61[6];
        uint64_t v68 = (void *)v61[7];
        ++v55;
        uint64_t v70 = *((unsigned __int8 *)v61 + 64);
        v1766 = v65;
        uint64_t v1763 = v53;
        switch(v70)
        {
          case 1:
            uint64_t v1753 = (uint64_t)v69;
            unint64_t v1754 = v55;
            uint64_t v73 = v65[2];
            v1757 = (void *)v63;
            if (!v73)
            {
              uint64_t v631 = sub_1000289B4(v56, v62, v64, (char)v65, v57, v58, v59, v60, v1708);
              sub_100023DCC(v631, v632, v633, v634, v635, v636, v637, v638, v1718);
              v1780 = _swiftEmptyArrayStorage;
              sub_1001798E8((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100065744);
              sub_100026F34();
              uint64_t v639 = (uint64_t)v1780;
              v1780[2] = v69 + 1;
              v69[v639 + 32] = 0;
              uint64_t v630 = (uint64_t)v1757;
              sub_1000282EC();
              v575 = (char *)sub_10016F72C(v639);
              char v627 = 1;
LABEL_153:
              swift_bridgeObjectRelease();
              goto LABEL_154;
            }
            uint64_t v74 = (uint64_t)v68;
            uint64_t v1771 = v73;
            sub_10017A584();
            Swift::Int v91 = v75;
            sub_10016CF64(v76);
            uint64_t v77 = sub_10017A00C();
            sub_10001D82C(v77, v91, (uint64_t)v11, v37, v78, v79, v80, v81, v1708);
            sub_10017A00C();
            v1739 = (void *)v91;
            v1740 = v11;
            sub_10017A664();
            uint64_t v82 = (void *)v37;
            sub_10017A320();
            v1741 = v36;
            sub_10017A224(v83, v84, v85, v86, v87, (uint64_t)v36, v88, v89, (char)v1724);
            uint64_t v90 = sub_10017A48C();
            LOBYTE(v91) = v1779;
            Swift::Int v92 = ByteBuffer.writeBytes(_:)((Swift::OpaquePointer)v90);
            swift_bridgeObjectRelease();
            v1772 = (void *)(v37 + 32);
            swift_bridgeObjectRetain();
            uint64_t v93 = 0;
            break;
          case 2:
            uint64_t v1753 = (uint64_t)v69;
            unint64_t v1754 = v55;
            uint64_t v477 = v65[2];
            v1757 = (void *)v63;
            if (v477)
            {
              unint64_t v478 = v62;
              uint64_t v479 = v64;
              uint64_t v480 = v66;
              uint64_t v481 = (uint64_t)v67;
              uint64_t v482 = v63;
              sub_10016AE48(v63, v62, v64, (char)v65, v66, (uint64_t)v67, (uint64_t)v69, (uint64_t)v68, 2);
              v1739 = (void *)v478;
              v1740 = (void *)v479;
              v1744 = (unsigned char *)v480;
              uint64_t v483 = v480;
              uint64_t v37 = (uint64_t)v1766;
              v1741 = (unsigned char *)v481;
              sub_10017A224(v482, v478, v479, (char)v1766, v483, v481, v484, v485, 2);
              v486 = sub_10017A48C();
              Swift::Int v487 = ByteBuffer.writeBytes(_:)((Swift::OpaquePointer)v486);
              swift_bridgeObjectRelease();
              uint64_t v1764 = v37 + 64;
              sub_100028E34();
              unint64_t v490 = v489 & v488;
              v1765 = (void *)((unint64_t)(v491 + 63) >> 6);
              swift_bridgeObjectRetain();
              unint64_t v492 = 0;
              while (1)
              {
                if (v490)
                {
                  unint64_t v493 = __clz(__rbit64(v490));
                  uint64_t v494 = (v490 - 1) & v490;
                  unint64_t v495 = v493 | (v492 << 6);
                }
                else
                {
                  if (__OFADD__(v492, 1)) {
                    goto LABEL_440;
                  }
                  sub_10017A4D4();
                  if (v497 == v119) {
                    goto LABEL_146;
                  }
                  if (!*(void *)(v1764 + 8 * v496))
                  {
                    sub_10017A0B8();
                    if (v497 == v119) {
                      goto LABEL_146;
                    }
                    if (!*(void *)(v1764 + 8 * v498))
                    {
                      sub_10017A0B8();
                      if (v497 == v119) {
                        goto LABEL_146;
                      }
                      if (!*(void *)(v1764 + 8 * v499))
                      {
                        sub_10017A0B8();
                        if (v497 == v119) {
                          goto LABEL_146;
                        }
                        if (!*(void *)(v1764 + 8 * v500))
                        {
                          while (1)
                          {
                            if (__OFADD__(v500, 1)) {
                              goto LABEL_449;
                            }
                            sub_10017A4D4();
                            if (v497 == v119) {
                              break;
                            }
                            uint64_t v500 = v571 + 1;
                            if (*(void *)(v1764 + 8 * v572)) {
                              goto LABEL_111;
                            }
                          }
LABEL_146:
                          swift_release();
                          v1780 = _swiftEmptyArrayStorage;
                          sub_1001798E8((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100065744);
                          sub_100026F34();
                          sub_10002E6D8();
                          sub_100029978();
                          v575 = &v1781[v487 - 8];
                          if (__OFADD__(v487, &v1780)) {
                            goto LABEL_460;
                          }
                          char v627 = 2;
                          uint64_t v39 = v1747;
                          goto LABEL_150;
                        }
                      }
                    }
                  }
LABEL_111:
                  sub_10017A06C();
                  uint64_t v494 = v502 & v501;
                  unint64_t v495 = v503 + (v492 << 6);
                }
                unint64_t v1769 = v492;
                unint64_t v504 = (uint64_t *)(*(void *)(v37 + 48) + 16 * v495);
                uint64_t v506 = *v504;
                unint64_t v505 = v504[1];
                sub_10017A69C();
                uint64_t v508 = *(void *)v507;
                unint64_t v509 = *(void *)(v507 + 8);
                uint64_t v511 = *(void **)(v507 + 16);
                uint64_t v510 = *(void **)(v507 + 24);
                uint64_t v513 = *(void *)(v507 + 32);
                uint64_t v512 = *(void *)(v507 + 40);
                v1776 = *(char **)(v507 + 48);
                uint64_t v1777 = v512;
                v1775 = *(char **)(v507 + 56);
                unint64_t v1778 = *(unsigned __int8 *)(v507 + 64);
                Swift::Int v1770 = v487;
                if ((v505 & 0x1000000000000000) != 0)
                {
                  sub_100020CAC();
                  Swift::Int v514 = String.UTF8View._foreignCount()();
                }
                else if ((v505 & 0x2000000000000000) != 0)
                {
                  Swift::Int v514 = HIBYTE(v505) & 0xF;
                }
                else
                {
                  Swift::Int v514 = v506 & 0xFFFFFFFFFFFFLL;
                }
                unint64_t v515 = (2 * v514) ^ (v514 >> 63);
                swift_bridgeObjectRetain();
                v1773 = (char *)v509;
                v1774 = (char *)v508;
                uint64_t v1771 = v513;
                v1772 = v511;
                sub_10016AE48(v508, v509, (uint64_t)v511, (char)v510, v513, v1777, (uint64_t)v1776, (uint64_t)v1775, v1778);
                v1780 = _swiftEmptyArrayStorage;
                LOBYTE(v508) = v515 & 0x7F;
                uint64_t v1768 = v494;
                if (v515 >= 0x80)
                {
                  sub_1001798E8((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100065744);
                  sub_1001798E8((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100065744);
                  sub_1001798E8((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100065744);
                  sub_1001798E8((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100065744);
                  do
                  {
                    sub_1001798E8((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100065744);
                    sub_10002EFF4();
                    v516 = v1780;
                    v1780[2] = v513 + 1;
                    *((unsigned char *)v516 + v513 + 32) = v508 | 0x80;
                    uint64_t v508 = (v515 >> 7) & 0x7F;
                    unint64_t v517 = v515 >> 14;
                    v515 >>= 7;
                  }
                  while (v517);
                }
                sub_1001798E8((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100065744);
                sub_10002EFF4();
                uint64_t v518 = (uint64_t)v1780;
                v1780[2] = v513 + 1;
                *(unsigned char *)(v518 + v513 + 32) = v508;
                Swift::Int v519 = ByteBuffer.writeBytes(_:)((Swift::OpaquePointer)v518);
                swift_bridgeObjectRelease();
                v520._uint64_t countAndFlagsBits = sub_100020CAC();
                ByteBuffer.writeString(_:)(v520);
                uint64_t v521 = sub_1000281E4();
                uint64_t v529 = v519 + v506;
                if (__OFADD__(v519, v506)) {
                  goto LABEL_435;
                }
                SwiftAvro::AvroRecord v531 = v1772;
                unint64_t v530 = (unint64_t)v1773;
                uint64_t v1767 = v529;
                uint64_t v532 = (uint64_t)v1774;
                char v533 = (char)v510;
                switch(v1778)
                {
                  case 1uLL:
                    sub_1000295DC();
                    uint64_t v543 = sub_100024E40(v535, v536, v537, v538, v539, v540, v541, v542, v1697);
                    Swift::Int v534 = v1779;
                    ByteBuffer.writeAvroArray(_:)(v543);
                    goto LABEL_124;
                  case 2uLL:
                    uint64_t v544 = sub_100024E40(v521, v522, v523, v524, v525, v526, v527, v528, 2);
                    Swift::Int v534 = v1779;
                    ByteBuffer.writeAvroMap(_:)(v544);
LABEL_124:
                    sub_100029978();
                    swift_bridgeObjectRelease();
                    swift_release();
                    goto LABEL_129;
                  case 3uLL:
                    v1786.schema.type._uint64_t countAndFlagsBits = (uint64_t)v1774;
                    v1786.schema.type._char object = v1773;
                    v1786.schema.name._uint64_t countAndFlagsBits = (uint64_t)v1772;
                    v1786.schema.name._char object = v510;
                    uint64_t v518 = v1771;
                    v1786.schema.namespace.value._uint64_t countAndFlagsBits = v1771;
                    uint64_t v510 = v1776;
                    uint64_t v506 = v1777;
                    v1786.schema.namespace.value._char object = (void *)v1777;
                    v1786.schema.fields._uint64_t rawValue = v1776;
                    unint64_t v515 = (unint64_t)v1775;
                    v1786.fields._uint64_t rawValue = v1775;
                    uint64_t v545 = sub_100179DDC();
                    sub_10016AE48(v545, v546, v547, v548, v549, v550, v551, v552, v1697);
                    Swift::Int v534 = ByteBuffer.writeAvroRecord(_:)(&v1786);
                    char v553 = 3;
                    goto LABEL_127;
                  case 4uLL:
                    memcpy(v1787, v1774 + 16, sizeof(v1787));
                    sub_10002559C();
                    sub_100024E40(v554, v555, v556, v557, v558, v559, v560, v561, v1697);
                    sub_10016AFAC((uint64_t)v1787);
                    Swift::Int v534 = ByteBuffer.writeAvroUnion(_:)((uint64_t)v1787);
                    sub_10016B03C((uint64_t)v1787);
                    char v553 = 4;
LABEL_127:
                    char v1697 = v553;
                    break;
                  default:
                    sub_100024E40(v521, v522, v523, v524, v525, v526, v527, v528, 0);
                    Swift::Int v534 = ByteBuffer.writeAvroPrimitive(_:)(v532, v530, (uint64_t)v531, (char)v510);
                    break;
                }
                sub_100093A68(v532, v530, (uint64_t)v531, v533, v518, v506, (uint64_t)v510, v515, v1697);
LABEL_129:
                uint64_t v562 = sub_100179DDC();
                sub_100093A68(v562, v563, v564, v565, v566, v567, v568, v569, v1708);
                uint64_t v570 = v1767 + v534;
                if (__OFADD__(v1767, v534)) {
                  goto LABEL_436;
                }
                unint64_t v492 = v1769;
                Swift::Int v487 = v1770 + v570;
                uint64_t v37 = (uint64_t)v1766;
                unint64_t v490 = v1768;
                if (__OFADD__(v1770, v570)) {
                  goto LABEL_437;
                }
              }
            }
            uint64_t v640 = sub_1000289B4(v56, v62, v64, (char)v65, v57, v58, v59, v60, v1708);
            sub_100023DCC(v640, v641, v642, v643, v644, v645, v646, v647, v1719);
            v1780 = _swiftEmptyArrayStorage;
            sub_1001798E8((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100065744);
            sub_100026F34();
            uint64_t v648 = (uint64_t)v1780;
            v1780[2] = v69 + 1;
            v69[v648 + 32] = 0;
            uint64_t v630 = (uint64_t)v1757;
            sub_1000282EC();
            v575 = (char *)sub_10016F72C(v648);
            char v627 = 2;
            goto LABEL_153;
          case 3:
            v1788.schema.type._uint64_t countAndFlagsBits = v63;
            v1788.schema.type._char object = (void *)v62;
            v1788.schema.name._uint64_t countAndFlagsBits = v64;
            v1788.schema.name._char object = v65;
            v1788.schema.namespace.value._uint64_t countAndFlagsBits = v66;
            v1788.schema.namespace.value._char object = v67;
            v1788.schema.fields._uint64_t rawValue = v69;
            v1788.fields._uint64_t rawValue = v68;
            uint64_t v573 = (uint64_t)v69;
            uint64_t v39 = 3;
            unint64_t v36 = (unsigned char *)v62;
            Swift::Int v11 = (void *)v64;
            uint64_t v574 = v66;
            uint64_t v37 = (uint64_t)v67;
            unint64_t v35 = (unint64_t)v68;
            v1757 = (void *)v63;
            sub_10016AE48(v63, v62, v64, (char)v65, v66, (uint64_t)v67, v573, (uint64_t)v68, 3);
            v575 = (char *)ByteBuffer.writeAvroRecord(_:)(&v1788);
            sub_100093A68((uint64_t)v1757, (unint64_t)v36, (uint64_t)v11, (char)v1766, v574, v37, v573, v35, 3);
LABEL_140:
            uint64_t v54 = (uint64_t)v1755;
            goto LABEL_185;
          case 4:
            unint64_t v1754 = v55;
            uint64_t v576 = *(void *)(v63 + 16);
            unint64_t v1778 = *(void *)(v63 + 24);
            v577 = *(void **)(v63 + 32);
            uint64_t v1771 = v576;
            v1772 = v577;
            v578 = *(char **)(v63 + 40);
            unint64_t v1769 = *(void *)(v63 + 48);
            v1775 = *(char **)(v63 + 56);
            Swift::Int v1770 = *(void *)(v63 + 64);
            v1776 = *(char **)(v63 + 72);
            uint64_t v1777 = *(void *)(v63 + 80);
            uint64_t v579 = (uint64_t)v69;
            uint64_t v580 = *(unsigned __int8 *)(v63 + 88);
            v1773 = v578;
            v1774 = (char *)v580;
            unint64_t v581 = (2 * *(void *)(v63 + 96)) ^ (*(uint64_t *)(v63 + 96) >> 63);
            sub_10002559C();
            unint64_t v583 = v582;
            v585 = (void *)v584;
            unint64_t v36 = v586;
            uint64_t v588 = v587;
            uint64_t v590 = v589;
            uint64_t v592 = v591;
            uint64_t v594 = v593;
            sub_10016AE48(v593, v582, v584, (char)v586, v587, v589, v579, v591, v1708);
            sub_10002559C();
            v1757 = (void *)v594;
            v1739 = (void *)v583;
            v1740 = v585;
            unint64_t v595 = v583;
            v596 = (void *)v1770;
            v1744 = (unsigned char *)v588;
            v1741 = (unsigned char *)v590;
            uint64_t v1753 = v579;
            uint64_t v1747 = v592;
            sub_10016AE48(v594, v595, (uint64_t)v585, (char)v36, v588, v590, v579, v592, (char)v1724);
            swift_bridgeObjectRetain();
            v597 = (void *)v1769;
            sub_10016AE48(v1778, (unint64_t)v1772, (uint64_t)v1773, v1769, (uint64_t)v1775, (uint64_t)v596, (uint64_t)v1776, v1777, (char)v1774);
            v1780 = _swiftEmptyArrayStorage;
            uint64_t v39 = v581 & 0x7F;
            if (v581 >= 0x80)
            {
              sub_1001798E8((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100065744);
              sub_10017A148();
              sub_10017A148();
              sub_10017A148();
              do
              {
                uint64_t v39 = v39 | 0x80;
                sub_1001798E8((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100065744);
                sub_1000241A4();
                sub_100179E80();
              }
              while (v598);
            }
            sub_1001798E8((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100065744);
            sub_1000241A4();
            uint64_t v599 = (uint64_t)v1780;
            v1780[2] = v36 + 1;
            v36[v599 + 32] = v39;
            sub_1000282EC();
            uint64_t v600 = sub_10016F72C(v599);
            uint64_t v601 = swift_bridgeObjectRelease();
            unint64_t v35 = (unint64_t)v1766;
            char v609 = (char)v597;
            uint64_t v1768 = v600;
            switch((unint64_t)v1774)
            {
              case 1uLL:
                sub_1000295DC();
                uint64_t v665 = sub_10001ABA0(v657, v658, v659, v660, v661, v662, v663, v664, (char)v1726);
                uint64_t v666 = ByteBuffer.writeAvroArray(_:)(v665);
                goto LABEL_157;
              case 2uLL:
                uint64_t v667 = sub_10001ABA0(v601, v602, v603, v604, v605, v606, v607, v608, 2);
                uint64_t v666 = ByteBuffer.writeAvroMap(_:)(v667);
LABEL_157:
                uint64_t v618 = v1778;
                uint64_t v1767 = v666;
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_release();
                goto LABEL_160;
              case 3uLL:
                v1789.schema.type._uint64_t countAndFlagsBits = v1778;
                v585 = v1772;
                v668 = v1773;
                v1789.schema.type._char object = v1772;
                v1789.schema.name._uint64_t countAndFlagsBits = (uint64_t)v1773;
                v1789.schema.name._char object = v597;
                unint64_t v36 = v1775;
                v1789.schema.namespace.value._uint64_t countAndFlagsBits = (uint64_t)v1775;
                v1789.schema.namespace.value._char object = v596;
                v1789.schema.fields._uint64_t rawValue = v1776;
                uint64_t v669 = v1777;
                v1789.fields._uint64_t rawValue = (void *)v1777;
                uint64_t v670 = sub_100028EF8();
                sub_10016AE48(v670, v671, v672, v673, v674, v675, v676, v669, (char)v1726);
                Swift::Int v677 = ByteBuffer.writeAvroRecord(_:)(&v1789);
                uint64_t v618 = v1778;
                uint64_t v1767 = v677;
                uint64_t v619 = sub_100028EF8();
                v597 = v668;
                uint64_t v626 = v669;
                unint64_t v35 = (unint64_t)v1766;
                goto LABEL_159;
              case 4uLL:
                uint64_t v39 = *(void *)(v1778 + 16);
                Swift::Int v694 = *(void *)(v1778 + 24);
                v695 = *(char **)(v1778 + 32);
                uint64_t v696 = *(void *)(v1778 + 40);
                v697 = *(void **)(v1778 + 48);
                v1774 = *(char **)(v1778 + 56);
                v698 = *(void **)(v1778 + 72);
                v1760 = *(void **)(v1778 + 64);
                v1761 = v697;
                v1762 = *(void **)(v1778 + 80);
                uint64_t v699 = *(unsigned __int8 *)(v1778 + 88);
                sub_10002559C();
                sub_10016AE48(v700, (unint64_t)v1772, (uint64_t)v1773, v701, (uint64_t)v1775, (uint64_t)v596, (uint64_t)v1776, v1777, (char)v1726);
                uint64_t v1756 = v39;
                swift_bridgeObjectRetain();
                uint64_t v1767 = v699;
                LOBYTE(v1726) = v699;
                Swift::Int v1758 = v694;
                v1759 = v695;
                uint64_t v702 = v694;
                unint64_t v703 = (unint64_t)v695;
                v705 = v1760;
                v704 = v1761;
                uint64_t v706 = v696;
                v1765 = v698;
                uint64_t v707 = (uint64_t)v698;
                v708 = v1762;
                sub_10016AE48(v702, v703, v696, (char)v1761, (uint64_t)v1774, (uint64_t)v1760, v707, (uint64_t)v1762, (char)v1726);
                v709 = sub_10017A7CC();
                if (v709[2]) {
                  sub_1000282EC();
                }
                uint64_t v1764 = sub_10016F72C((uint64_t)v709);
                uint64_t v710 = swift_bridgeObjectRelease();
                switch(v1767)
                {
                  case 1:
                    uint64_t v834 = sub_100029734(v710, v711, v712, v713, v714, v715, v716, v717, (char)v1726);
                    uint64_t v835 = ByteBuffer.writeAvroArray(_:)(v834);
                    goto LABEL_217;
                  case 2:
                    uint64_t v836 = sub_100029734(v710, v711, v712, v713, v714, v715, v716, v717, (char)v1726);
                    uint64_t v835 = ByteBuffer.writeAvroMap(_:)(v836);
LABEL_217:
                    uint64_t v1752 = v835;
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_release();
                    goto LABEL_222;
                  case 3:
                    v1790.schema.type._uint64_t countAndFlagsBits = v1758;
                    v1790.schema.type._char object = v1759;
                    v1790.schema.name._uint64_t countAndFlagsBits = v696;
                    v1790.schema.name._char object = v704;
                    v837 = v708;
                    v708 = v1774;
                    v1790.schema.namespace.value._uint64_t countAndFlagsBits = (uint64_t)v1774;
                    v1790.schema.namespace.value._char object = v705;
                    v1790.schema.fields._uint64_t rawValue = v1765;
                    v1790.fields._uint64_t rawValue = v837;
                    uint64_t v39 = 3;
                    sub_10016AE48(v1758, (unint64_t)v1759, v696, (char)v704, (uint64_t)v1774, (uint64_t)v705, (uint64_t)v1765, (uint64_t)v837, 3);
                    Swift::Int v838 = ByteBuffer.writeAvroRecord(_:)(&v1790);
                    sub_100179EF0(v838);
                    LOBYTE(v1724) = 3;
                    goto LABEL_219;
                  case 4:
                    Swift::Int v847 = v1758;
                    memcpy(v1791, (const void *)(v1758 + 16), sizeof(v1791));
                    uint64_t v39 = 4;
                    sub_100179E1C(v1758, v848, v849, v850, v851, v852, v853, v854, 4);
                    sub_10016AFAC((uint64_t)v1791);
                    uint64_t v855 = ByteBuffer.writeAvroUnion(_:)((uint64_t)v1791);
                    sub_100179EF0(v855);
                    sub_10016B03C((uint64_t)v1791);
                    LOBYTE(v1724) = 4;
                    uint64_t v839 = sub_10002E8BC();
                    uint64_t v846 = v847;
                    goto LABEL_221;
                  default:
                    uint64_t v718 = v1758;
                    unint64_t v719 = (unint64_t)v1759;
                    sub_100179E1C(v1758, v711, v712, v713, v714, v715, v716, v717, 0);
                    uint64_t v720 = ByteBuffer.writeAvroPrimitive(_:)(v718, v719, v706, (char)v704);
                    sub_100179EF0(v720);
                    LOBYTE(v1724) = 0;
LABEL_219:
                    uint64_t v839 = sub_10002E8BC();
                    uint64_t v846 = v845;
LABEL_221:
                    sub_100093A68(v839, v840, v841, v842, v843, v844, v846, (uint64_t)v708, (char)v1724);
                    swift_bridgeObjectRelease();
LABEL_222:
                    LOBYTE(v1724) = v1767;
                    sub_10017A1E4();
                    sub_100093A68(v856, v857, v858, v859, v860, v861, v862, (uint64_t)v708, (char)v1724);
                    sub_10002E688();
                    uint64_t v863 = v1778;
                    v865 = v1772;
                    uint64_t v864 = (uint64_t)v1773;
                    unint64_t v867 = v1769;
                    uint64_t v866 = v1770;
                    unint64_t v36 = v1775;
                    sub_10017A4BC(v1778, (unint64_t)v1772, (uint64_t)v1773, v1769, (uint64_t)v1775, v1770, v868, v869, (char)v1724);
                    swift_bridgeObjectRelease();
                    sub_10017A4BC(v863, (unint64_t)v865, v864, v867, (uint64_t)v36, v866, v870, v871, v39);
                    sub_100029F9C();
                    uint64_t v37 = (uint64_t)v1757;
                    Swift::Int v11 = v1740;
                    sub_10017A664();
                    LOBYTE(v864) = (_BYTE)v1766;
                    sub_10017A650();
                    unint64_t v35 = v1753;
                    sub_100093A68(v872, v873, v874, v875, v876, v877, v1753, v1747, (char)v1724);
                    sub_100029F9C();
                    sub_10017A664();
                    sub_10017A4BC(v878, v879, v880, v864, v867, (uint64_t)v36, v881, v882, (char)v1724);
                    uint64_t v693 = v1764 + v1752;
                    if (!__OFADD__(v1764, v1752)) {
                      goto LABEL_161;
                    }
                    goto LABEL_464;
                }
              default:
                uint64_t v610 = sub_10002F0A8();
                v611 = v1772;
                v597 = v1773;
                unint64_t v36 = v1775;
                uint64_t v612 = (uint64_t)v1776;
                uint64_t v613 = v1777;
                sub_10016AE48(v610, (unint64_t)v1772, (uint64_t)v1773, v609, (uint64_t)v1775, (uint64_t)v596, (uint64_t)v1776, v1777, (char)v1726);
                uint64_t v614 = sub_10017A36C();
                uint64_t v617 = ByteBuffer.writeAvroPrimitive(_:)(v614, v615, v616, v609);
                uint64_t v618 = v1778;
                uint64_t v1767 = v617;
                LOBYTE(v1726) = 0;
                uint64_t v619 = sub_10017A36C();
                char v622 = v609;
                uint64_t v623 = (uint64_t)v36;
                uint64_t v624 = (uint64_t)v596;
                uint64_t v625 = v612;
                unint64_t v35 = (unint64_t)v1766;
                uint64_t v626 = v613;
                v585 = v611;
LABEL_159:
                sub_100093A68(v619, v620, v621, v622, v623, v624, v625, v626, (char)v1728);
                swift_bridgeObjectRelease();
LABEL_160:
                sub_100093A68(v618, (unint64_t)v585, (uint64_t)v597, v609, (uint64_t)v1775, (uint64_t)v596, (uint64_t)v1776, v1777, (char)v1774);
                sub_10002E688();
                uint64_t v37 = (uint64_t)v1739;
                Swift::Int v11 = v1740;
                sub_10017A4F8();
                sub_10017A650();
                sub_10017A5AC(v678, v679, v680, v681, v682, v683, v684, v685, (char)v1728);
                sub_100029F9C();
                sub_10017A4F8();
                sub_100179D88(v686, v687, v688, v35, v689, v690, v691, v692, (char)v1728);
                uint64_t v693 = v1767;
LABEL_161:
                v575 = (char *)(v1768 + v693);
                unint64_t v55 = v1754;
                uint64_t v54 = (uint64_t)v1755;
                if (!__OFADD__(v1768, v693)) {
                  goto LABEL_185;
                }
                goto LABEL_459;
            }
          default:
            switch((char)v65)
            {
              case 1:
                sub_10017A430(v56, v62, v64);
                uint64_t v39 = v721;
                unsigned int v722 = (2 * v721) ^ ((int)v721 >> 31);
                v1780 = _swiftEmptyArrayStorage;
                LOBYTE(v723) = v722 & 0x7F;
                uint64_t v1753 = (uint64_t)v69;
                if (v722 >= 0x80)
                {
                  sub_1001798E8((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100065744);
                  sub_100029370();
                  sub_100029370();
                  sub_100029370();
                  do
                  {
                    sub_1001798E8((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100065744);
                    sub_100026F34();
                    sub_10017A38C();
                    LODWORD(v723) = (v722 >> 7) & 0x7F;
                    unsigned int v724 = v722 >> 14;
                    v722 >>= 7;
                  }
                  while (v724);
                }
                goto LABEL_175;
              case 2:
                sub_10017A430(v56, v62, v64);
                uint64_t v39 = v725;
                unint64_t v726 = (2 * v725) ^ (v725 >> 63);
                v1780 = _swiftEmptyArrayStorage;
                LOBYTE(v723) = v726 & 0x7F;
                uint64_t v1753 = (uint64_t)v69;
                if (v726 >= 0x80)
                {
                  sub_1001798E8((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100065744);
                  sub_100029370();
                  sub_100029370();
                  sub_100029370();
                  do
                  {
                    sub_1001798E8((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100065744);
                    sub_100026F34();
                    sub_10017A38C();
                    uint64_t v723 = (v726 >> 7) & 0x7F;
                    unint64_t v727 = v726 >> 14;
                    v726 >>= 7;
                  }
                  while (v727);
                }
LABEL_175:
                v575 = (char *)&v1780;
                sub_1001798E8((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100065744);
                sub_100026F34();
                v69[sub_10017A6E4()] = v723;
                sub_1000282EC();
                sub_10016F72C((uint64_t)sub_100065744);
                sub_100029978();
                Swift::Int v11 = v1740;
                unint64_t v35 = (unint64_t)v1741;
                char v728 = (char)v1766;
                unint64_t v36 = v1744;
                uint64_t v729 = v1753;
                uint64_t v730 = v1747;
                sub_100093A68(v39, v37, (uint64_t)v1740, (char)v1766, (uint64_t)v1744, (uint64_t)v1741, v1753, v1747, 0);
                sub_10017A4F8();
                char v652 = v728;
                uint64_t v653 = (uint64_t)v36;
                uint64_t v654 = v35;
                uint64_t v655 = v729;
                goto LABEL_181;
              case 3:
                sub_10001674C();
                LODWORD(v1780) = v731;
                uint64_t v72 = v1725;
                goto LABEL_178;
              case 4:
                sub_10001674C();
                v1780 = v732;
                uint64_t v72 = v1726;
                goto LABEL_178;
              case 5:
                uint64_t v37 = (uint64_t)v65;
                v1757 = (void *)v63;
                if ((v62 & 0x1000000000000000) != 0)
                {
                  uint64_t v52 = v62;
                  unint64_t v35 = v64;
                  Swift::Int v741 = String.UTF8View._foreignCount()();
                  unint64_t v62 = v52;
                  uint64_t v64 = v35;
                }
                else if ((v62 & 0x2000000000000000) != 0)
                {
                  Swift::Int v741 = HIBYTE(v62) & 0xF;
                }
                else
                {
                  Swift::Int v741 = v63 & 0xFFFFFFFFFFFFLL;
                }
                unint64_t v1754 = v55;
                uint64_t v39 = (2 * v741) ^ (v741 >> 63);
                Swift::Int v11 = (void *)v62;
                unint64_t v36 = (unsigned char *)v64;
                sub_10017A264();
                uint64_t v743 = v742;
                sub_10016AE48(v744, v745, v746, v747, v748, v749, v750, v742, 0);
                sub_10002F0A8();
                v1739 = v11;
                v1740 = v36;
                sub_10017A320();
                v1741 = (unsigned char *)v35;
                uint64_t v1753 = (uint64_t)v69;
                uint64_t v1747 = v743;
                sub_10016AE48(v751, v752, v753, v754, v755, v35, (uint64_t)v69, v743, v1708);
                v756 = sub_10017A48C();
                uint64_t v757 = v1779;
                if (v756[2]) {
                  Data._Representation.append(contentsOf:)();
                }
                unint64_t v1778 = sub_10016F72C((uint64_t)v756);
                swift_bridgeObjectRelease();
                static String.Encoding.utf8.getter();
                uint64_t v758 = String.data(using:allowLossyConversion:)();
                unint64_t v760 = v759;
                sub_10000E040();
                v761();
                if (v760 >> 60 == 15) {
                  unint64_t v35 = 0;
                }
                else {
                  unint64_t v35 = v758;
                }
                if (v760 >> 60 == 15) {
                  unint64_t v760 = 0xC000000000000000;
                }
                Data.append(_:)();
                switch(v760 >> 62)
                {
                  case 1uLL:
                    uint64_t v1777 = HIDWORD(v35);
                    sub_10017A518();
                    uint64_t v39 = (uint64_t)v1757;
                    sub_1000292A0();
                    sub_10017A758();
                    uint64_t v883 = v1747;
                    sub_100093A68(v884, v885, v886, v887, v888, v889, v890, v1747, 0);
                    uint64_t v891 = sub_10017A330();
                    sub_100093A68(v891, v892, v893, v894, v758, v52, (uint64_t)v36, v883, v1708);
                    LODWORD(v775) = v1777 - v35;
                    if (__OFSUB__(v1777, v35)) {
                      goto LABEL_475;
                    }
                    uint64_t v775 = (int)v775;
LABEL_231:
                    uint64_t v54 = (uint64_t)v1755;
                    v575 = (char *)(v1778 + v775);
                    if (!__OFADD__(v1778, v775)) {
                      goto LABEL_184;
                    }
                    goto LABEL_469;
                  case 2uLL:
                    uint64_t v895 = *(void *)(v35 + 24);
                    v1776 = *(char **)(v35 + 16);
                    uint64_t v1777 = v895;
                    sub_10017A518();
                    unint64_t v36 = v1757;
                    sub_1000292A0();
                    sub_10017A5AC(v896, v897, v898, v899, v900, v901, v902, v903, 0);
                    uint64_t v904 = sub_10017A570();
                    sub_100093A68(v904, v905, v906, v907, v758, v52, v35, v760, 0);
                    uint64_t v775 = v1777 - (void)v1776;
                    if (!__OFSUB__(v1777, v1776)) {
                      goto LABEL_231;
                    }
                    goto LABEL_476;
                  case 3uLL:
                    sub_10017A518();
                    unint64_t v36 = v1757;
                    sub_10017A07C();
                    unint64_t v35 = (unint64_t)v1741;
                    uint64_t v908 = v1753;
                    uint64_t v909 = v1747;
                    sub_100093A68(v910, v911, v912, v913, v914, (uint64_t)v1741, v1753, v1747, 0);
                    sub_10002EF58();
                    sub_100093A68(v915, v916, v917, v918, v919, v35, v908, v909, 0);
                    sub_10017A778();
                    goto LABEL_231;
                  default:
                    sub_10017A518();
                    uint64_t v39 = (uint64_t)v1757;
                    sub_10017A07C();
                    unint64_t v36 = v1741;
                    sub_10017A598();
                    sub_100093A68(v762, v763, v764, v765, v766, v767, v768, v769, 0);
                    sub_10002EF58();
                    sub_100093A68(v770, v771, v772, v773, v774, (uint64_t)v36, v35, v757, 0);
                    uint64_t v775 = BYTE6(v760);
                    goto LABEL_231;
                }
              case 6:
                uint64_t v1753 = (uint64_t)v69;
                unint64_t v1754 = v55;
                uint64_t v776 = (v62 >> 60) & 3;
                if (v776)
                {
                  unint64_t v777 = v62 >> 62;
                  unint64_t v1778 = HIDWORD(v63);
                  uint64_t v778 = BYTE6(v62);
                  v1739 = (void *)v62;
                  v1757 = (void *)v63;
                  if (v776 == 1)
                  {
                    uint64_t v39 = v62 & 0xCFFFFFFFFFFFFFFFLL;
                    uint64_t v779 = 0;
                    v1776 = (char *)(v62 >> 62);
                    uint64_t v1777 = BYTE6(v62);
                    switch(v777)
                    {
                      case 1uLL:
                        char v920 = (char)v1766;
                        if (__OFSUB__(v1778, v63)) {
                          goto LABEL_478;
                        }
                        uint64_t v779 = (int)v1778 - (int)v63;
LABEL_237:
                        unint64_t v36 = (unsigned char *)v64;
                        uint64_t v923 = v66;
                        uint64_t v924 = (uint64_t)v67;
                        uint64_t v925 = (uint64_t)v69;
                        uint64_t v926 = (uint64_t)v69;
                        uint64_t v927 = (uint64_t)v68;
                        sub_10016AE48(v63, v62, v64, v920, v66, (uint64_t)v67, v925, (uint64_t)v68, 0);
                        sub_10017A70C();
                        sub_10016AE48(v928, v929, v930, (char)v1766, v923, v924, v926, v927, 0);
                        sub_10017A70C();
                        uint64_t v66 = v923;
                        uint64_t v67 = (void *)v924;
                        uint64_t v68 = (void *)v927;
LABEL_238:
                        if (__OFSUB__(v779, v64)) {
                          goto LABEL_472;
                        }
                        uint64_t v931 = v66;
                        Swift::Int v11 = v67;
                        uint64_t v37 = (uint64_t)v68;
                        unint64_t v932 = (2 * (v779 - v64)) ^ ((v779 - v64) >> 63);
                        unint64_t v35 = v62;
                        uint64_t v933 = v64;
                        uint64_t v934 = v63;
                        sub_10016AF60(v63, v62, v64, 6);
                        sub_100027BCC(v934, v39);
                        sub_1001777D8(v932);
                        sub_10017A2C8();
                        if (v935) {
                          Data._Representation.append(contentsOf:)();
                        }
                        v1775 = (char *)sub_10016F72C((uint64_t)v36);
                        swift_bridgeObjectRelease();
                        uint64_t v936 = Data.append(_:)();
                        unint64_t v55 = v1754;
                        switch((int)v1776)
                        {
                          case 1:
                            uint64_t v1090 = (uint64_t)v1757;
                            unint64_t v1091 = v35;
                            uint64_t v39 = v933;
                            uint64_t v1092 = v933;
                            char v1093 = (char)v1766;
                            unint64_t v36 = v11;
                            unint64_t v35 = v1753;
                            sub_10002B098((uint64_t)v1757, v1091, v1092, (char)v1766, v931, (uint64_t)v11, v942, v943, 0);
                            uint64_t v1094 = sub_10002F0A8();
                            Swift::Int v11 = v1739;
                            sub_10002624C(v1094, (unint64_t)v1739, v39, v1093, v1095, v1096, v1097, v1098, v1708);
                            sub_10002624C(v1090, (unint64_t)v11, v39, v1093, v1099, v1100, v1101, v1102, 0);
                            sub_10002624C(v1090, (unint64_t)v11, v39, v1093, v1103, v1104, v1105, v1106, 0);
                            LODWORD(v956) = v1778 - v1090;
                            if (__OFSUB__(v1778, v1090)) {
                              goto LABEL_484;
                            }
                            uint64_t v956 = (int)v956;
LABEL_265:
                            uint64_t v54 = (uint64_t)v1755;
                            break;
                          case 2:
                            uint64_t v1107 = (uint64_t)v1757;
                            uint64_t v1108 = v1757[3];
                            uint64_t v1777 = v1757[2];
                            unint64_t v1778 = v1108;
                            sub_10002F0A8();
                            uint64_t v39 = v931;
                            sub_10017A758();
                            unint64_t v35 = v37;
                            sub_100093A68(v1109, v1110, v1111, v1112, v1113, v1114, v1115, v37, v1708);
                            uint64_t v1116 = sub_10002F0A8();
                            uint64_t v37 = (uint64_t)v1739;
                            sub_100021DE0(v1116, v1117, v1118, v1119, v1120, v1121, v1122, v1123, (char)v1724);
                            sub_100021DE0(v1107, v1124, v1125, v1126, v1127, v1128, v1129, v1130, 0);
                            sub_100021DE0(v1107, v1131, v1132, v1133, v1134, v1135, v1136, v1137, 0);
                            uint64_t v956 = v1778 - v1777;
                            if (__OFSUB__(v1778, v1777)) {
                              goto LABEL_485;
                            }
                            unint64_t v55 = v1754;
                            uint64_t v54 = (uint64_t)v1755;
                            break;
                          case 3:
                            sub_10002EE34(v936, v937, v938, v939, v940, v941, v942, v943, v1708);
                            Swift::Int v11 = v1757;
                            uint64_t v37 = (uint64_t)v1739;
                            sub_10002C7E4((uint64_t)v1757, (unint64_t)v1739, v39, v933, v1138, v1139, v1140, v1141, 0);
                            sub_10002C7E4((uint64_t)v11, v37, v39, v933, v1142, v1143, v1144, v1145, 0);
                            sub_10002C7E4((uint64_t)v11, v37, v39, v933, v1146, v1147, v1148, v1149, 0);
                            sub_10017A778();
                            goto LABEL_265;
                          default:
                            sub_10002EE34(v936, v937, v938, v939, v940, v941, v942, v943, v1708);
                            Swift::Int v11 = v1757;
                            uint64_t v37 = (uint64_t)v1739;
                            sub_10002C7E4((uint64_t)v1757, (unint64_t)v1739, v39, v933, v944, v945, v946, v947, 0);
                            sub_10002C7E4((uint64_t)v11, v37, v39, v933, v948, v949, v950, v951, 0);
                            sub_10002C7E4((uint64_t)v11, v37, v39, v933, v952, v953, v954, v955, 0);
                            uint64_t v54 = (uint64_t)v1755;
                            uint64_t v956 = v1777;
                            break;
                        }
                        v575 = &v1775[v956];
                        if (!__OFADD__(v1775, v956)) {
                          goto LABEL_185;
                        }
                        goto LABEL_474;
                      case 2uLL:
                        uint64_t v922 = *(void *)(v63 + 16);
                        uint64_t v921 = *(void *)(v63 + 24);
                        uint64_t v779 = v921 - v922;
                        char v920 = (char)v1766;
                        if (!__OFSUB__(v921, v922)) {
                          goto LABEL_237;
                        }
                        goto LABEL_479;
                      case 3uLL:
                        goto LABEL_238;
                      default:
                        uint64_t v779 = v1777;
                        goto LABEL_238;
                    }
                  }
                  unint64_t v35 = v62 & 0xCFFFFFFFFFFFFFFFLL;
                  uint64_t v833 = 0;
                  v1740 = (void *)v64;
                  v1741 = v67;
                  v1744 = (unsigned char *)v66;
                  uint64_t v1747 = (uint64_t)v68;
                  switch(v777)
                  {
                    case 1uLL:
                      v1775 = (char *)(v62 & 0xCFFFFFFFFFFFFFFFLL);
                      v1776 = (char *)(v62 >> 62);
                      uint64_t v1777 = BYTE6(v62);
                      uint64_t v957 = v1747;
                      if (__OFSUB__(v1778, v1757)) {
                        goto LABEL_480;
                      }
                      uint64_t v833 = (int)v1778 - (int)v1757;
LABEL_246:
                      sub_10017A758();
                      uint64_t v967 = sub_10016AE48(v960, v961, v962, v963, v964, v965, v966, v957, 0);
                      uint64_t v975 = sub_100026588(v967, v968, v969, v970, v971, v972, v973, v974, v1700);
                      uint64_t v983 = sub_100026588(v975, v976, v977, v978, v979, v980, v981, v982, v1701);
                      sub_100026588(v983, v984, v985, v986, v987, v988, v989, v990, v1702);
                      LODWORD(v777) = v1776;
                      uint64_t v778 = v1777;
                      unint64_t v35 = (unint64_t)v1775;
LABEL_247:
                      sub_1001777D8((2 * v833) ^ (v833 >> 63));
                      sub_10017A2C8();
                      if (v991) {
                        Data._Representation.append(contentsOf:)();
                      }
                      v1776 = (char *)sub_10016F72C((uint64_t)v36);
                      swift_bridgeObjectRelease();
                      Data.append(_:)();
                      uint64_t v994 = v777;
                      unint64_t v55 = v1754;
                      uint64_t v37 = v1747;
                      uint64_t v995 = (uint64_t)v1740;
                      unint64_t v36 = v1741;
                      uint64_t v996 = (uint64_t)v1744;
                      uint64_t v39 = (uint64_t)v1739;
                      switch(v994)
                      {
                        case 0:
                          uint64_t v997 = sub_10017A600();
                          uint64_t v1777 = v778;
                          Swift::Int v11 = v1766;
                          sub_1000263A0(v997, v998, v999, (char)v1766, v996, (uint64_t)v36, v1000, v1001, v1708);
                          uint64_t v37 = (uint64_t)v1757;
                          sub_10002C7E4((uint64_t)v1757, v39, v995, (char)v11, v1002, v1003, v1004, v1005, 0);
                          sub_10002C7E4(v37, v39, v995, (char)v11, v1006, v1007, v1008, v1009, 0);
                          uint64_t v1010 = v995;
                          uint64_t v1011 = v1777;
                          sub_10002C7E4(v37, v39, v1010, (char)v11, v1012, v1013, v1014, v1015, 0);
                          goto LABEL_256;
                        case 1:
                          int v1016 = (int)v1757;
                          Swift::Int v11 = v1766;
                          unint64_t v35 = v1753;
                          uint64_t v1017 = sub_10002B098((uint64_t)v1757, (unint64_t)v1739, (uint64_t)v1740, (char)v1766, (uint64_t)v1744, (uint64_t)v1741, v992, v993, 0);
                          uint64_t v1025 = sub_10000E284(v1017, v1018, v1019, v1020, v1021, v1022, v1023, v1024, v1703);
                          uint64_t v1033 = sub_10000E284(v1025, v1026, v1027, v1028, v1029, v1030, v1031, v1032, v1704);
                          sub_10000E284(v1033, v1034, v1035, v1036, v1037, v1038, v1039, v1040, v1705);
                          if (__OFSUB__(v1778, v1016)) {
                            goto LABEL_482;
                          }
                          uint64_t v1011 = (int)v1778 - v1016;
LABEL_256:
                          uint64_t v54 = (uint64_t)v1755;
                          break;
                        case 2:
                          uint64_t v1041 = v1757[3];
                          uint64_t v1777 = v1757[2];
                          unint64_t v1778 = v1041;
                          sub_10002F0A8();
                          uint64_t v39 = (uint64_t)v1766;
                          Swift::Int v11 = (void *)v996;
                          sub_10017A758();
                          uint64_t v1049 = sub_100093A68(v1042, v1043, v1044, v1045, v1046, v1047, v1048, v37, v1708);
                          uint64_t v1057 = sub_100021570(v1049, v1050, v1051, v1052, v1053, v1054, v1055, v1056, v1720);
                          uint64_t v1065 = sub_100021570(v1057, v1058, v1059, v1060, v1061, v1062, v1063, v1064, v1721);
                          sub_100021570(v1065, v1066, v1067, v1068, v1069, v1070, v1071, v1072, v1722);
                          uint64_t v1011 = v1778 - v1777;
                          if (__OFSUB__(v1778, v1777)) {
                            goto LABEL_483;
                          }
                          unint64_t v55 = v1754;
                          uint64_t v54 = (uint64_t)v1755;
                          break;
                        case 3:
                          uint64_t v1073 = sub_10017A600();
                          Swift::Int v11 = v1766;
                          sub_1000263A0(v1073, v1074, v1075, (char)v1766, v996, (uint64_t)v36, v1076, v1077, v1708);
                          uint64_t v37 = (uint64_t)v1757;
                          sub_10002C7E4((uint64_t)v1757, v39, v995, (char)v11, v1078, v1079, v1080, v1081, 0);
                          sub_10002C7E4(v37, v39, v995, (char)v11, v1082, v1083, v1084, v1085, 0);
                          sub_10002C7E4(v37, v39, v995, (char)v11, v1086, v1087, v1088, v1089, 0);
                          uint64_t v1011 = 0;
                          goto LABEL_256;
                        default:
                          JUMPOUT(0);
                      }
                      v575 = &v1776[v1011];
                      if (!__OFADD__(v1776, v1011)) {
                        goto LABEL_185;
                      }
                      goto LABEL_473;
                    case 2uLL:
                      v1775 = (char *)(v62 & 0xCFFFFFFFFFFFFFFFLL);
                      v1776 = (char *)(v62 >> 62);
                      uint64_t v1777 = BYTE6(v62);
                      uint64_t v959 = v1757[2];
                      uint64_t v958 = v1757[3];
                      uint64_t v833 = v958 - v959;
                      uint64_t v957 = v1747;
                      if (!__OFSUB__(v958, v959)) {
                        goto LABEL_246;
                      }
                      goto LABEL_481;
                    case 3uLL:
                      goto LABEL_247;
                    default:
                      uint64_t v833 = BYTE6(v62);
                      goto LABEL_247;
                  }
                }
                sub_10017A584();
                unint64_t v794 = v793;
                uint64_t v796 = v795;
                uint64_t v39 = sub_10016F72C(v797);
                unint64_t v1778 = (2 * v39) ^ (v39 >> 63);
                sub_10001D82C(v796, v794, (uint64_t)v11, v37, v798, v799, v800, v801, 0);
                sub_10017A320();
                uint64_t v37 = (uint64_t)v36;
                sub_10017A224(v802, v803, v804, v805, v806, (uint64_t)v36, v807, v808, 0);
                sub_10016AF60(v796, v794, (uint64_t)v11, 6);
                unint64_t v35 = (unint64_t)sub_1001777D8(v1778);
                if (*(void *)(v35 + 16)) {
                  sub_1000282EC();
                }
                unint64_t v1778 = sub_10016F72C(v35);
                swift_bridgeObjectRelease();
                if (*(void *)(v796 + 16)) {
                  sub_1000282EC();
                }
                unint64_t v36 = v1766;
                Swift::Int v11 = v1744;
                sub_10017A598();
                uint64_t v817 = sub_100093A68(v809, v810, v811, v812, v813, v814, v815, v816, 0);
                uint64_t v825 = sub_10002EA1C(v817, v818, v819, v820, v821, v822, v823, v824, v1698);
                sub_10002EA1C(v825, v826, v827, v828, v829, v830, v831, v832, v1699);
                v575 = (char *)(v1778 + v39);
                if (!__OFADD__(v1778, v39)) {
                  goto LABEL_183;
                }
                goto LABEL_471;
              case 7:
                uint64_t v37 = (uint64_t)v65;
                Swift::Int v11 = (void *)v62;
                unint64_t v36 = (unsigned char *)v64;
                sub_10017A264();
                uint64_t v781 = v780;
                uint64_t v39 = v782;
                sub_100093A68(v783, v784, v785, v786, v787, v788, v789, v780, 0);
                uint64_t v790 = sub_100179F68();
                sub_100093A68(v790, v791, v792, v37, v52, v35, (uint64_t)v69, v781, v1708);
                v575 = 0;
                goto LABEL_140;
              default:
                sub_10001674C();
                LOBYTE(v1780) = v71 & 1;
                uint64_t v72 = v1724;
LABEL_178:
                v733 = sub_100179B9C(&v1780, v72);
                if (v733[2]) {
                  sub_1000282EC();
                }
                v575 = (char *)sub_10016F72C((uint64_t)v733);
                swift_release();
                sub_100179F68();
                sub_10017A7E4();
                uint64_t v730 = v1747;
                sub_100093A68(v734, v735, v736, v737, v738, v739, v740, v1747, v1708);
                sub_100179F68();
                sub_10017A7E4();
LABEL_181:
                uint64_t v656 = v730;
                break;
            }
            goto LABEL_182;
        }
        while (2)
        {
          uint64_t v1777 = v92;
          sub_1001795AC(v93, 1, (uint64_t)v82);
          uint64_t v94 = &v1772[9 * v93];
          uint64_t v96 = *v94;
          unint64_t v95 = v94[1];
          unint64_t v97 = (char *)v94[2];
          unint64_t v1778 = v94[3];
          uint64_t v99 = v94[4];
          uint64_t v98 = (void *)v94[5];
          char v100 = (void *)v94[6];
          uint64_t v101 = (char *)v94[7];
          ++v93;
          switch(*((unsigned char *)v94 + 64))
          {
            case 1:
              v1775 = (char *)v93;
              uint64_t v104 = v1778;
              uint64_t v105 = *(void *)(v1778 + 16);
              v1773 = (char *)v96;
              if (v105)
              {
                unint64_t v106 = v95;
                uint64_t v107 = v97;
                v1774 = v101;
                uint64_t v108 = (uint64_t)v100;
                uint64_t v109 = (uint64_t)v98;
                uint64_t v110 = v99;
                uint64_t v1767 = AvroArray.count.getter(v96, v95, v97, v1778);
                uint64_t v111 = sub_100029508();
                uint64_t v112 = v99;
                uint64_t v113 = (uint64_t)v1774;
                sub_10016AE48(v111, v106, (uint64_t)v107, v104, v112, v109, v108, (uint64_t)v1774, (char)v1724);
                uint64_t v114 = sub_100029508();
                uint64_t v1768 = v106;
                unint64_t v1769 = v110;
                v1776 = v107;
                Swift::Int v1770 = v109;
                sub_10016AE48(v114, v106, (uint64_t)v107, v104, v110, v109, v108, v113, (char)v1726);
                Swift::Int v115 = sub_100177448(v1767);
                swift_bridgeObjectRetain();
                uint64_t v116 = 32;
                uint64_t v117 = v104;
                uint64_t v82 = v1766;
                do
                {
                  memcpy(v1781, (const void *)(v117 + v116), 0x41uLL);
                  sub_100177900((uint64_t)v1781, (void (*)(void, void, void, void, void, void, void, void, char))sub_10016AE48);
                  uint64_t v118 = ByteBuffer.writeAvroValue(_:)(v1781);
                  sub_100177900((uint64_t)v1781, (void (*)(void, void, void, void, void, void, void, void, char))sub_100093A68);
                  BOOL v119 = __OFADD__(v115, v118);
                  v115 += v118;
                  if (v119) {
                    goto LABEL_429;
                  }
                  v116 += 72;
                  --v105;
                }
                while (v105);
                swift_bridgeObjectRelease();
                Swift::Int v120 = sub_10017A4E0();
                Swift::Int v91 = v115 + v120;
                if (__OFADD__(v115, v120)) {
                  goto LABEL_454;
                }
                uint64_t v74 = v1768;
              }
              else
              {
                uint64_t v74 = v95;
                sub_100179F04();
                sub_10016AE48(v199, v200, v201, v104, v99, (uint64_t)v98, v202, v203, 1);
                sub_10017A6BC();
                sub_10016AE48(v204, v205, v206, v207, v208, v209, v210, v211, 1);
                Swift::Int v91 = sub_10017A4E0();
                uint64_t v82 = v1766;
              }
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_release();
              sub_1000295DC();
              sub_10017A6BC();
              sub_100093A68(v212, v213, v214, v215, v216, v217, v218, v219, (char)v1724);
LABEL_54:
              uint64_t v220 = v1777;
              uint64_t v93 = (uint64_t)v1775;
              goto LABEL_77;
            case 2:
              v1774 = (char *)v94[7];
              v1775 = (char *)v93;
              uint64_t v121 = v1778;
              if (*(void *)(v1778 + 16))
              {
                unint64_t v122 = v95;
                uint64_t v123 = v97;
                uint64_t v124 = (uint64_t)v101;
                uint64_t v125 = (uint64_t)v100;
                uint64_t v1767 = AvroMap.count.getter(v96, v95, (uint64_t)v97, v1778);
                sub_10017A3BC();
                sub_10016AE48(v126, v127, v128, v129, v130, v131, v132, v124, 2);
                sub_100029F9C();
                v1773 = (char *)v96;
                uint64_t v1768 = v122;
                unint64_t v1769 = v99;
                v1776 = v123;
                Swift::Int v1770 = (Swift::Int)v98;
                uint64_t v1764 = v125;
                sub_10016AE48(v96, v122, (uint64_t)v123, v121, v99, (uint64_t)v98, v125, v124, v1710);
                Swift::Int v133 = sub_100177448(v1767);
                uint64_t v134 = v121 + 64;
                sub_100028E34();
                unint64_t v137 = v136 & v135;
                int64_t v139 = (unint64_t)(v138 + 63) >> 6;
                swift_bridgeObjectRetain();
                int64_t v140 = 0;
                uint64_t v141 = v121;
                while (1)
                {
                  if (v137)
                  {
                    unint64_t v142 = __clz(__rbit64(v137));
                    v137 &= v137 - 1;
                    unint64_t v143 = v142 | (v140 << 6);
                  }
                  else
                  {
                    BOOL v119 = __OFADD__(v140++, 1);
                    if (v119) {
                      goto LABEL_434;
                    }
                    if (v140 >= v139)
                    {
LABEL_50:
                      swift_release();
                      Swift::Int v198 = sub_10017A4E0();
                      if (__OFADD__(v133, v198)) {
                        goto LABEL_455;
                      }
                      uint64_t v74 = (uint64_t)v1774;
                      Swift::Int v91 = v133 + v198;
                      goto LABEL_56;
                    }
                    if (!*(void *)(v134 + 8 * v140))
                    {
                      int64_t v144 = v140 + 1;
                      if (v140 + 1 >= v139) {
                        goto LABEL_50;
                      }
                      if (!*(void *)(v134 + 8 * v144))
                      {
                        int64_t v144 = v140 + 2;
                        if (v140 + 2 >= v139) {
                          goto LABEL_50;
                        }
                        if (!*(void *)(v134 + 8 * v144))
                        {
                          int64_t v144 = v140 + 3;
                          if (v140 + 3 >= v139) {
                            goto LABEL_50;
                          }
                          if (!*(void *)(v134 + 8 * v144))
                          {
                            while (1)
                            {
                              int64_t v140 = v144 + 1;
                              if (__OFADD__(v144, 1)) {
                                break;
                              }
                              if (v140 >= v139) {
                                goto LABEL_50;
                              }
                              ++v144;
                              if (*(void *)(v134 + 8 * v140)) {
                                goto LABEL_35;
                              }
                            }
LABEL_444:
                            __break(1u);
LABEL_445:
                            __break(1u);
LABEL_446:
                            __break(1u);
LABEL_447:
                            __break(1u);
LABEL_448:
                            __break(1u);
LABEL_449:
                            __break(1u);
LABEL_450:
                            __break(1u);
LABEL_451:
                            __break(1u);
LABEL_452:
                            __break(1u);
LABEL_453:
                            __break(1u);
LABEL_454:
                            __break(1u);
LABEL_455:
                            __break(1u);
LABEL_456:
                            __break(1u);
LABEL_457:
                            __break(1u);
LABEL_458:
                            __break(1u);
LABEL_459:
                            __break(1u);
LABEL_460:
                            __break(1u);
LABEL_461:
                            __break(1u);
LABEL_462:
                            __break(1u);
LABEL_463:
                            __break(1u);
LABEL_464:
                            __break(1u);
LABEL_465:
                            __break(1u);
LABEL_466:
                            __break(1u);
LABEL_467:
                            __break(1u);
LABEL_468:
                            __break(1u);
LABEL_469:
                            __break(1u);
LABEL_470:
                            __break(1u);
LABEL_471:
                            __break(1u);
LABEL_472:
                            __break(1u);
LABEL_473:
                            __break(1u);
LABEL_474:
                            __break(1u);
LABEL_475:
                            __break(1u);
LABEL_476:
                            __break(1u);
LABEL_477:
                            __break(1u);
LABEL_478:
                            __break(1u);
LABEL_479:
                            __break(1u);
LABEL_480:
                            __break(1u);
LABEL_481:
                            __break(1u);
LABEL_482:
                            __break(1u);
LABEL_483:
                            __break(1u);
LABEL_484:
                            __break(1u);
LABEL_485:
                            __break(1u);
                          }
                        }
                      }
                      int64_t v140 = v144;
                    }
LABEL_35:
                    sub_10017A06C();
                    unint64_t v137 = v146 & v145;
                    unint64_t v143 = v147 + (v140 << 6);
                  }
                  uint64_t v148 = (uint64_t *)(*(void *)(v141 + 48) + 16 * v143);
                  uint64_t v149 = *v148;
                  uint64_t v150 = (void *)v148[1];
                  memcpy(v1782, (const void *)(*(void *)(v141 + 56) + 72 * v143), 0x41uLL);
                  swift_bridgeObjectRetain();
                  sub_100177900((uint64_t)v1782, (void (*)(void, void, void, void, void, void, void, void, char))sub_10016AE48);
                  v151._uint64_t countAndFlagsBits = v149;
                  v151._char object = v150;
                  Swift::Int v152 = ByteBuffer.writeAvroString(_:)(v151);
                  swift_bridgeObjectRelease();
                  uint64_t v153 = ByteBuffer.writeAvroValue(_:)(v1782);
                  sub_100177900((uint64_t)v1782, (void (*)(void, void, void, void, void, void, void, void, char))sub_100093A68);
                  Swift::Int v154 = v152 + v153;
                  if (__OFADD__(v152, v153)) {
                    break;
                  }
                  BOOL v119 = __OFADD__(v133, v154);
                  v133 += v154;
                  if (v119) {
                    goto LABEL_428;
                  }
                }
                __break(1u);
LABEL_428:
                __break(1u);
LABEL_429:
                __break(1u);
LABEL_430:
                __break(1u);
LABEL_431:
                __break(1u);
LABEL_432:
                __break(1u);
LABEL_433:
                __break(1u);
LABEL_434:
                __break(1u);
LABEL_435:
                __break(1u);
LABEL_436:
                __break(1u);
LABEL_437:
                __break(1u);
LABEL_438:
                __break(1u);
LABEL_439:
                __break(1u);
LABEL_440:
                __break(1u);
LABEL_441:
                __break(1u);
                goto LABEL_442;
              }
              sub_100179F04();
              uint64_t v222 = v221;
              sub_10016AE48(v223, v224, v225, v121, v99, (uint64_t)v98, v226, v221, 2);
              sub_10017A1E4();
              sub_10016AE48(v227, v228, v229, v230, v231, v232, v233, v222, 2);
              Swift::Int v91 = sub_10017A4E0();
              uint64_t v74 = (uint64_t)v1774;
LABEL_56:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_release();
              sub_10017A1E4();
              sub_100093A68(v234, v235, v236, v237, v238, v239, v240, v74, 2);
LABEL_65:
              uint64_t v220 = v1777;
              uint64_t v93 = (uint64_t)v1775;
              uint64_t v82 = v1766;
LABEL_77:
              BOOL v119 = __OFADD__(v220, v91);
              Swift::Int v92 = v220 + v91;
              if (v119) {
                goto LABEL_439;
              }
              if (v93 != v1771) {
                continue;
              }
              swift_bridgeObjectRelease();
              v1780 = _swiftEmptyArrayStorage;
              sub_1001798E8((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100065744);
              sub_100026F34();
              uint64_t v628 = sub_10017A12C();
              unint64_t v629 = v1779;
              ByteBuffer.writeBytes(_:)((Swift::OpaquePointer)v628);
              sub_100029978();
              BOOL v119 = __OFADD__(v92, v629);
              v575 = (char *)(v92 + v629);
              if (v119) {
                goto LABEL_462;
              }
              char v627 = 1;
              uint64_t v39 = v1747;
              uint64_t v37 = (uint64_t)v82;
LABEL_150:
              unint64_t v35 = (unint64_t)v1740;
              Swift::Int v11 = v1741;
              uint64_t v52 = (uint64_t)v1744;
              unint64_t v36 = v1739;
              uint64_t v630 = (uint64_t)v1757;
LABEL_154:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_release();
              char v1708 = v627;
              uint64_t v649 = v630;
              unint64_t v650 = (unint64_t)v36;
              uint64_t v651 = v35;
              char v652 = v37;
              uint64_t v653 = v52;
              uint64_t v654 = (uint64_t)v11;
              uint64_t v655 = v1753;
              uint64_t v656 = v39;
LABEL_182:
              sub_100093A68(v649, v650, v651, v652, v653, v654, v655, v656, (char)v1724);
LABEL_183:
              uint64_t v54 = (uint64_t)v1755;
LABEL_184:
              unint64_t v55 = v1754;
LABEL_185:
              BOOL v119 = __OFADD__(v1763, v575);
              uint64_t v53 = (uint64_t)&v575[v1763];
              if (v119) {
                goto LABEL_446;
              }
              uint64_t v52 = v1779;
              if ((void *)v55 != v1746) {
                goto LABEL_7;
              }
              swift_bridgeObjectRelease();
              v1780 = _swiftEmptyArrayStorage;
              sub_1001798E8((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100065744);
              sub_100026F34();
              uint64_t v1526 = sub_10017A12C();
              ByteBuffer.writeBytes(_:)((Swift::OpaquePointer)v1526);
              sub_100029978();
              v1451 = (unsigned char *)(v53 + v52);
              if (__OFADD__(v53, v52)) {
                goto LABEL_465;
              }
LABEL_399:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_release();
LABEL_400:
              sub_10017A418();
              sub_10002EEF0();
              sub_100093A68(v1527, v1528, v1529, v1530, v1531, v1532, v1533, v1534, (char)v1726);
              uint64_t v5 = v1730;
LABEL_408:
              uint64_t v6 = (uint64_t)&v1451[v1743];
              if (__OFADD__(v1743, v1451)) {
                goto LABEL_452;
              }
              unint64_t v7 = v1742;
              if (v1742 == v1736)
              {
                swift_bridgeObjectRelease();
                goto LABEL_426;
              }
              break;
            case 3:
              v1783.schema.type._uint64_t countAndFlagsBits = v96;
              v1783.schema.type._char object = (void *)v95;
              v1783.schema.name._uint64_t countAndFlagsBits = (uint64_t)v97;
              uint64_t v74 = v1778;
              v1783.schema.name._char object = (void *)v1778;
              v1783.schema.namespace.value._uint64_t countAndFlagsBits = v99;
              v1783.schema.namespace.value._char object = v98;
              v1783.schema.fields._uint64_t rawValue = v100;
              v1783.fields._uint64_t rawValue = v101;
              v1776 = v97;
              sub_10016AE48(v96, v95, (uint64_t)v97, v1778, v99, (uint64_t)v98, (uint64_t)v100, (uint64_t)v101, 3);
              Swift::Int v91 = ByteBuffer.writeAvroRecord(_:)(&v1783);
              sub_10017A160();
              uint64_t v82 = v1766;
LABEL_74:
              sub_10017A4A4();
LABEL_75:
              sub_100093A68(v300, v301, v302, v303, v314, v315, v316, v317, v1709);
LABEL_76:
              uint64_t v220 = v1777;
              goto LABEL_77;
            case 4:
              v1775 = (char *)v93;
              Swift::Int v155 = *(void *)(v96 + 16);
              uint64_t v1767 = *(void *)(v96 + 24);
              v1765 = *(void **)(v96 + 32);
              v1762 = *(void **)(v96 + 40);
              uint64_t v156 = *(char **)(v96 + 48);
              Swift::Int v1758 = v155;
              v1759 = v156;
              uint64_t v157 = *(void **)(v96 + 56);
              uint64_t v1752 = *(void *)(v96 + 64);
              Swift::Int v1751 = *(void *)(v96 + 72);
              v1760 = *(void **)(v96 + 80);
              v1761 = v157;
              uint64_t v1756 = *(unsigned __int8 *)(v96 + 88);
              unint64_t v158 = (2 * *(void *)(v96 + 96)) ^ (*(uint64_t *)(v96 + 96) >> 63);
              unint64_t v159 = v95;
              sub_100179F04();
              sub_10017A72C();
              uint64_t v175 = v160;
              uint64_t v162 = v161;
              sub_10016AE48(v163, v164, v165, v166, v167, v168, v160, v161, 4);
              sub_10002559C();
              v1773 = (char *)v96;
              v1774 = (char *)v162;
              uint64_t v169 = v96;
              char v170 = v91;
              uint64_t v1768 = v159;
              unint64_t v1769 = v99;
              uint64_t v172 = (void *)v1751;
              int64_t v171 = (void *)v1752;
              v1776 = (char *)v93;
              uint64_t v173 = v99;
              uint64_t v174 = v1756;
              Swift::Int v1770 = (Swift::Int)v98;
              uint64_t v1764 = v175;
              sub_10016AE48(v169, v159, v93, v170, v173, (uint64_t)v98, v175, v162, (char)v1724);
              swift_bridgeObjectRetain();
              sub_10016AE48(v1767, (unint64_t)v1765, (uint64_t)v1762, (char)v1759, (uint64_t)v1761, (uint64_t)v171, (uint64_t)v172, (uint64_t)v1760, v174);
              v1780 = _swiftEmptyArrayStorage;
              LOBYTE(v175) = v158 & 0x7F;
              if (v158 >= 0x80)
              {
                sub_1001798E8((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100065744);
                sub_1001798E8((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100065744);
                sub_1001798E8((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100065744);
                sub_1001798E8((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100065744);
                do
                {
                  sub_1001798E8((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100065744);
                  uint64_t v176 = sub_10017A6F8();
                  sub_10017998C(v176, (uint64_t (*)(BOOL))sub_100065744);
                  sub_10017A6D0();
                  *(unsigned char *)(v177 + 32) = v175 | 0x80;
                  uint64_t v175 = (v158 >> 7) & 0x7F;
                  unint64_t v178 = v158 >> 14;
                  v158 >>= 7;
                }
                while (v178);
              }
              sub_1001798E8((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100065744);
              uint64_t v179 = v1780[2];
              sub_10017998C(v179, (uint64_t (*)(BOOL))sub_100065744);
              uint64_t v180 = (uint64_t)v1780;
              v1780[2] = v179 + 1;
              *(unsigned char *)(v180 + 32 + v179) = v175;
              sub_1000282EC();
              uint64_t v1752 = sub_10016F72C(v180);
              swift_bridgeObjectRelease();
              uint64_t v185 = (uint64_t)v1762;
              switch(v174)
              {
                case 1:
                  sub_1000295DC();
                  uint64_t v245 = sub_10002B224(v1767, (unint64_t)v1765, v185, (char)v1759, v241, v242, v243, v244, (char)v1726);
                  uint64_t v246 = ByteBuffer.writeAvroArray(_:)(v245);
                  goto LABEL_59;
                case 2:
                  sub_10002E778();
                  uint64_t v251 = sub_10002B224(v1767, (unint64_t)v1765, v185, (char)v1759, v247, v248, v249, v250, (char)v1726);
                  uint64_t v246 = ByteBuffer.writeAvroMap(_:)(v251);
LABEL_59:
                  Swift::Int v1751 = v246;
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_release();
                  goto LABEL_64;
                case 3:
                  uint64_t v258 = v1767;
                  v1784.schema.type._uint64_t countAndFlagsBits = v1767;
                  unint64_t v259 = (unint64_t)v1765;
                  v1784.schema.type._char object = v1765;
                  v1784.schema.name._uint64_t countAndFlagsBits = (uint64_t)v1762;
                  char v260 = (char)v1759;
                  v1784.schema.name._char object = v1759;
                  v1784.schema.namespace.value._uint64_t countAndFlagsBits = (uint64_t)v1761;
                  v1784.schema.namespace.value._char object = v171;
                  v1784.schema.fields._uint64_t rawValue = v172;
                  v1784.fields._uint64_t rawValue = v1760;
                  uint64_t v261 = sub_10017A00C();
                  sub_10002B224(v261, v259, v185, v260, v262, v263, v264, v265, (char)v1726);
                  Swift::Int v1751 = ByteBuffer.writeAvroRecord(_:)(&v1784);
                  char v266 = 3;
                  goto LABEL_62;
                case 4:
                  uint64_t v258 = v1767;
                  memcpy(v1785, (const void *)(v1767 + 16), sizeof(v1785));
                  sub_10002559C();
                  unint64_t v259 = (unint64_t)v1765;
                  sub_10002B224(v258, (unint64_t)v1765, v185, (char)v1759, v267, v268, v269, v270, (char)v1726);
                  sub_10016AFAC((uint64_t)v1785);
                  Swift::Int v1751 = ByteBuffer.writeAvroUnion(_:)((uint64_t)v1785);
                  sub_10016B03C((uint64_t)v1785);
                  char v266 = 4;
LABEL_62:
                  LOBYTE(v1726) = v266;
                  uint64_t v196 = v258;
                  unint64_t v197 = v259;
                  break;
                default:
                  uint64_t v186 = v1767;
                  unint64_t v187 = (unint64_t)v1765;
                  char v188 = (char)v1759;
                  sub_10002B224(v1767, (unint64_t)v1765, (uint64_t)v1762, (char)v1759, v181, v182, v183, v184, 0);
                  uint64_t v189 = sub_10017A470();
                  Swift::Int v1751 = ByteBuffer.writeAvroPrimitive(_:)(v189, v187, v185, v188);
                  char v1709 = 0;
                  uint64_t v196 = v186;
                  unint64_t v197 = v187;
                  break;
              }
              LOBYTE(v174) = v1756;
              sub_10002F05C(v196, v197, v190, v191, v192, v193, v194, v195, (char)v1726);
              swift_bridgeObjectRelease();
LABEL_64:
              sub_10002F05C(v1767, (unint64_t)v1765, v252, v253, v254, v255, v256, v257, v174);
              uint64_t v74 = (uint64_t)v1774;
              sub_100093A68((uint64_t)v1773, v1768, (uint64_t)v1776, v1778, v1769, v1770, v1764, (uint64_t)v1774, 4);
              LOBYTE(v1726) = 4;
              sub_10017A3BC();
              sub_100093A68(v271, v272, v273, v274, v275, v276, v277, v74, (char)v1726);
              Swift::Int v91 = v1752 + v1751;
              if (!__OFADD__(v1752, v1751)) {
                goto LABEL_65;
              }
              goto LABEL_448;
            default:
              switch((char)v1778)
              {
                case 1:
                  uint64_t v1768 = v95;
                  unint64_t v1769 = v99;
                  v1775 = (char *)v93;
                  v1776 = v97;
                  Swift::Int v1770 = (Swift::Int)v98;
                  uint64_t v1764 = (uint64_t)v100;
                  v1774 = v101;
                  unsigned int v278 = (2 * v96) ^ ((int)v96 >> 31);
                  v1780 = _swiftEmptyArrayStorage;
                  LOBYTE(v279) = v278 & 0x7F;
                  if (v278 >= 0x80)
                  {
                    sub_1001798E8((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100065744);
                    sub_100029370();
                    sub_100029370();
                    sub_100029370();
                    do
                    {
                      sub_1001798E8((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100065744);
                      sub_100026F34();
                      sub_10017A6D0();
                      *(unsigned char *)(v280 + 32) = v279 | 0x80;
                      int v279 = (v278 >> 7) & 0x7F;
                      LODWORD(v280) = v278 >> 14;
                      v278 >>= 7;
                    }
                    while (v280);
                  }
                  sub_1001798E8((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100065744);
                  sub_100026F34();
                  v281._uint64_t rawValue = v1780;
                  v1780[2] = v74 + 1;
                  *((unsigned char *)v281._rawValue + v74 + 32) = v279;
                  Swift::Int v282 = ByteBuffer.writeBytes(_:)(v281);
                  swift_bridgeObjectRelease();
                  unint64_t v284 = v1768;
                  uint64_t v283 = v1769;
                  uint64_t v285 = (uint64_t)v1776;
                  char v286 = v1778;
                  uint64_t v287 = v1770;
                  uint64_t v74 = v1764;
                  uint64_t v288 = (uint64_t)v1774;
                  sub_100093A68(v96, v1768, (uint64_t)v1776, v1778, v1769, v1770, v1764, (uint64_t)v1774, 0);
                  uint64_t v289 = v285;
                  Swift::Int v91 = v282;
                  sub_100093A68(v96, v284, v289, v286, v283, v287, v74, v288, 0);
                  uint64_t v82 = v1766;
                  goto LABEL_54;
                case 2:
                  v1774 = (char *)v94[7];
                  uint64_t v290 = (uint64_t)v100;
                  uint64_t v291 = (uint64_t)v97;
                  uint64_t v82 = (void *)v95;
                  uint64_t v292 = sub_1001777D8((2 * v96) ^ (v96 >> 63));
                  char v293 = v1779;
                  Swift::Int v1770 = ByteBuffer.writeBytes(_:)((Swift::OpaquePointer)v292);
                  swift_bridgeObjectRelease();
                  sub_10017A72C();
                  uint64_t v74 = (uint64_t)v1774;
                  sub_100093A68(v294, v295, v296, v297, v298, v299, v290, (uint64_t)v1774, 0);
                  uint64_t v300 = sub_10002837C();
                  uint64_t v302 = v291;
                  char v303 = v293;
                  Swift::Int v91 = v1770;
                  goto LABEL_81;
                case 3:
                  LODWORD(v1780) = v96;
                  sub_100023F84();
                  uint64_t v103 = sub_10016FAB8(v304);
                  goto LABEL_73;
                case 4:
                  v1780 = (void *)v96;
                  sub_100023F84();
                  uint64_t v103 = sub_10016FB2C(v305);
                  goto LABEL_73;
                case 5:
                  uint64_t v318 = sub_10002E950();
                  uint64_t v290 = v319;
                  uint64_t v74 = v320;
                  sub_10016AE48(v318, v321, v322, v323, v324, v325, v319, v320, (char)v1724);
                  v326._uint64_t countAndFlagsBits = v96;
                  v326._char object = v82;
                  Swift::Int v91 = ByteBuffer.writeAvroString(_:)(v326);
                  LOBYTE(v1724) = 0;
                  uint64_t v300 = v96;
                  unint64_t v301 = (unint64_t)v82;
                  uint64_t v82 = v1766;
                  uint64_t v302 = (uint64_t)v1776;
                  char v303 = v1778;
LABEL_81:
                  uint64_t v314 = v99;
                  uint64_t v315 = (uint64_t)v98;
                  uint64_t v316 = v290;
                  uint64_t v317 = v74;
                  goto LABEL_75;
                case 6:
                  uint64_t v327 = (v95 >> 60) & 3;
                  v1775 = (char *)v93;
                  if (v327)
                  {
                    uint64_t v1764 = (uint64_t)v100;
                    if (v327 == 1)
                    {
                      unint64_t v1769 = v95 & 0xCFFFFFFFFFFFFFFFLL;
                      uint64_t v328 = v96;
                      uint64_t v329 = (uint64_t)v97;
                      uint64_t v330 = (uint64_t)v101;
                      Swift::Int v91 = (Swift::Int)v100;
                      uint64_t v331 = (uint64_t)v98;
                      uint64_t v332 = v99;
                      uint64_t v333 = sub_10016B5AC(v96, v95 & 0xCFFFFFFFFFFFFFFFLL, (uint64_t)v97);
                      Swift::Int v1770 = (2 * v333) ^ (v333 >> 63);
                      char v334 = v1778;
                      sub_10017A628();
                      v1774 = (char *)v330;
                      sub_10016AE48(v335, v336, v337, v338, v339, v340, v341, v330, 0);
                      sub_10017A628();
                      sub_10016AE48(v342, v343, v344, v345, v346, v347, v348, v330, 0);
                      uint64_t v349 = sub_10017A448();
                      sub_10016AF60(v349, v350, v329, 6);
                      unint64_t v351 = v1769;
                      sub_100027BCC(v328, v1769);
                      v352._uint64_t rawValue = sub_1001777D8(v1770);
                      Swift::Int v1770 = sub_10017A308(v352);
                      swift_bridgeObjectRelease();
                      ByteBuffer.writeImmutableBuffer(_:)(v328, v351);
                      uint64_t v353 = sub_10017A764();
                      uint64_t v74 = v1764;
                      uint64_t v355 = sub_100093A68(v353, v354, v329, v334, v332, v331, v1764, (uint64_t)v1774, v1711);
                      uint64_t v363 = sub_10002DFE8(v355, v356, v357, v358, v359, v360, v361, v362, v1712);
                      uint64_t v371 = sub_10002DFE8(v363, v364, v365, v366, v367, v368, v369, v370, v1713);
                      sub_10002DFE8(v371, v372, v373, v374, v375, v376, v377, v378, v1714);
                      sub_10017A47C();
                      if (v119) {
                        goto LABEL_466;
                      }
                    }
                    else
                    {
                      unint64_t v430 = v95 & 0xCFFFFFFFFFFFFFFFLL;
                      unint64_t v431 = v95;
                      sub_100179F04();
                      uint64_t v433 = v432;
                      uint64_t v435 = v434;
                      sub_10016AE48(v436, v437, v438, v1778, v99, (uint64_t)v98, v432, v434, 0);
                      uint64_t v439 = sub_100179F48();
                      sub_10016AE48(v439, v440, v441, v442, v443, v444, v433, v435, (char)v1724);
                      sub_10016AF60(v96, v431, v93, 6);
                      unint64_t v1769 = v430;
                      sub_100027BCC(v96, v430);
                      uint64_t v445 = Data.count.getter();
                      v446._uint64_t rawValue = sub_10017A0EC(v445);
                      Swift::Int v1770 = sub_10017A308(v446);
                      swift_bridgeObjectRelease();
                      Swift::Int v91 = ByteBuffer.writeData(_:)(v96, v1769);
                      uint64_t v447 = sub_100179F48();
                      uint64_t v74 = v1764;
                      uint64_t v453 = sub_100093A68(v447, v448, v449, v450, v451, v452, v1764, v435, (char)v1726);
                      uint64_t v461 = sub_10002CF3C(v453, v454, v455, v456, v457, v458, v459, v460, (char)v1726);
                      uint64_t v469 = sub_10002CF3C(v461, v462, v463, v464, v465, v466, v467, v468, (char)v1726);
                      sub_10002CF3C(v469, v470, v471, v472, v473, v474, v475, v476, (char)v1726);
                      sub_10017A47C();
                      if (v119) {
                        goto LABEL_468;
                      }
                    }
                  }
                  else
                  {
                    uint64_t v390 = v96;
                    v1774 = v101;
                    uint64_t v74 = (uint64_t)v100;
                    uint64_t v391 = (uint64_t)v98;
                    uint64_t v392 = v99;
                    uint64_t v393 = (uint64_t)v97;
                    unint64_t v394 = v95;
                    uint64_t v395 = sub_10016F72C(v96);
                    unint64_t v396 = (2 * v395) ^ (v395 >> 63);
                    uint64_t v397 = v96;
                    char v398 = v1778;
                    sub_10017A348(v397, v394, v393, v399, v400, v401, v402, v403, 0);
                    sub_10017A348(v390, v394, v393, v404, v405, v406, v407, v408, 0);
                    uint64_t v409 = sub_10017A448();
                    sub_10016AF60(v409, v410, v393, 6);
                    uint64_t v411 = sub_1001777D8(v396);
                    Swift::Int v91 = v1779;
                    Swift::Int v1770 = ByteBuffer.writeBytes(_:)((Swift::OpaquePointer)v411);
                    swift_bridgeObjectRelease();
                    ByteBuffer.writeBytes(_:)((Swift::OpaquePointer)v390);
                    uint64_t v412 = sub_10017A764();
                    uint64_t v414 = sub_100093A68(v412, v413, v393, v398, v392, v391, v74, (uint64_t)v1774, v1715);
                    uint64_t v422 = sub_10002EB3C(v414, v415, v416, v417, v418, v419, v420, v421, v1716);
                    sub_10002EB3C(v422, v423, v424, v425, v426, v427, v428, v429, v1717);
                    sub_10017A47C();
                    if (v119) {
                      goto LABEL_467;
                    }
                  }
                  break;
                case 7:
                  uint64_t v379 = sub_10002E950();
                  uint64_t v74 = v380;
                  uint64_t v382 = v381;
                  sub_100093A68(v379, v383, v384, v385, v386, v387, v380, v381, (char)v1724);
                  uint64_t v388 = sub_10002837C();
                  sub_100093A68(v388, v389, (uint64_t)v1776, v1778, v99, (uint64_t)v98, v74, v382, (char)v1724);
                  Swift::Int v91 = 0;
                  goto LABEL_76;
                default:
                  LOBYTE(v1780) = v96 & 1;
                  sub_100023F84();
                  uint64_t v103 = sub_10016FA44(v102);
LABEL_73:
                  Swift::Int v1770 = v103;
                  uint64_t v1729 = v93;
                  uint64_t v93 = v74;
                  uint64_t v74 = v1778;
                  sub_10017A4A4();
                  sub_100093A68(v306, v307, v308, v309, v310, v311, v312, v313, 0);
                  sub_10002837C();
                  Swift::Int v91 = v1770;
                  goto LABEL_74;
              }
              goto LABEL_65;
          }
          goto LABEL_3;
        }
      case 2:
        uint64_t v1738 = v19;
        uint64_t v1150 = v12[2];
        uint64_t v1734 = (uint64_t)v16;
        uint64_t v1735 = (uint64_t)v17;
        uint64_t v1732 = v15;
        uint64_t v1733 = (uint64_t)v14;
        uint64_t v1731 = v10;
        if (!v1150)
        {
          sub_10002E778();
          uint64_t v1509 = v10;
          unint64_t v1510 = (unint64_t)v11;
          uint64_t v1512 = v1511;
          char v1514 = v1513;
          sub_10017A3A4();
          uint64_t v1516 = v1515;
          sub_10016AE48(v1517, v1518, v1519, v1520, v1521, v1522, v1523, v1515, (char)v1724);
          sub_10016AE48(v1509, v1510, v1512, v1514, v15, v6, v18, v1516, 2);
          v1780 = _swiftEmptyArrayStorage;
          sub_1001798E8((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100065744);
          uint64_t v1524 = sub_10017A6F8();
          sub_10017998C(v1524, (uint64_t (*)(BOOL))sub_100065744);
          uint64_t v1525 = (uint64_t)v1780;
          v1780[2] = v18 + 1;
          *(unsigned char *)(v1525 + 32 + v18) = 0;
          sub_1000282EC();
          v1451 = (unsigned char *)sub_10016F72C(v1525);
          swift_bridgeObjectRelease();
          goto LABEL_399;
        }
        uint64_t v1151 = sub_10017A418();
        unint64_t v1152 = (unint64_t)v11;
        unint64_t v1153 = (unint64_t)v11;
        uint64_t v1155 = v1154;
        v1157 = v1156;
        sub_100028540(v1151, v1153, v1154, v1158, v1159, v1160, v1161, v1162, (char)v1724);
        sub_10017A418();
        unint64_t v1727 = v1152;
        v1728 = (void *)v1155;
        sub_10002EEF0();
        sub_10016AE48(v1163, v1164, v1165, v1166, v1167, v1168, v1169, v1170, (char)v1726);
        v1171 = sub_10017A48C();
        v1172 = (char *)v1779;
        uint64_t v1173 = v1779;
        ByteBuffer.writeBytes(_:)((Swift::OpaquePointer)v1171);
        sub_100029978();
        v1746 = v1157 + 8;
        sub_100028E34();
        unint64_t v1176 = v1175 & v1174;
        uint64_t v1747 = (unint64_t)(v1177 + 63) >> 6;
        swift_bridgeObjectRetain();
        unint64_t v1178 = v1176;
        uint64_t v1179 = 0;
LABEL_272:
        if (v1178)
        {
          uint64_t v1753 = (v1178 - 1) & v1178;
          unint64_t v1180 = __clz(__rbit64(v1178)) | (v1179 << 6);
          v1181 = v1755;
          goto LABEL_284;
        }
        BOOL v119 = __OFADD__(v1179, 1);
        uint64_t v1182 = v1179 + 1;
        if (v119) {
          goto LABEL_447;
        }
        if (v1182 >= v1747) {
          goto LABEL_393;
        }
        if (v1746[v1182]) {
          goto LABEL_283;
        }
        if (v1182 + 1 >= v1747) {
          goto LABEL_393;
        }
        if (v1746[v1182 + 1]) {
          goto LABEL_283;
        }
        if (v1182 + 2 >= v1747) {
          goto LABEL_393;
        }
        if (v1746[v1182 + 2]) {
          goto LABEL_283;
        }
        uint64_t v1183 = v1182 + 3;
        if (v1182 + 3 < v1747)
        {
          if (v1746[v1183])
          {
LABEL_283:
            sub_10017A06C();
            uint64_t v1753 = v1185 & v1184;
            unint64_t v1180 = v1186 + (v1179 << 6);
LABEL_284:
            unint64_t v1754 = v1179;
            uint64_t v1187 = *(void *)(v1181[6] + 16 * v1180 + 8);
            sub_10017A69C();
            uint64_t v1189 = *(void *)v1188;
            v1190 = *(char **)(v1188 + 16);
            Swift::Int v1758 = *(void *)(v1188 + 8);
            v1759 = v1190;
            uint64_t v1191 = *(void *)(v1188 + 32);
            v1772 = *(void **)(v1188 + 24);
            v1192 = *(void **)(v1188 + 48);
            v1760 = *(void **)(v1188 + 40);
            v1761 = v1192;
            v1762 = *(void **)(v1188 + 56);
            uint64_t v1764 = *(unsigned __int8 *)(v1188 + 64);
            uint64_t v1752 = v1173;
            if ((v1187 & 0x1000000000000000) != 0) {
              String.UTF8View._foreignCount()();
            }
            swift_bridgeObjectRetain();
            uint64_t v1756 = v1189;
            v1757 = (void *)v1191;
            sub_10016AE48(v1189, v1758, (uint64_t)v1759, (char)v1772, v1191, (uint64_t)v1760, (uint64_t)v1761, (uint64_t)v1762, v1764);
            sub_10017A7CC();
            sub_10017A2C8();
            if (v1193) {
              Data._Representation.append(contentsOf:)();
            }
            uint64_t v1194 = sub_10016F72C(v1189);
            swift_bridgeObjectRelease();
            static String.Encoding.utf8.getter();
            uint64_t v1195 = String.data(using:allowLossyConversion:)();
            unint64_t v1197 = v1196;
            sub_10000E040();
            v1198();
            if (v1197 >> 60 == 15) {
              uint64_t v1199 = 0;
            }
            else {
              uint64_t v1199 = v1195;
            }
            if (v1197 >> 60 == 15) {
              unint64_t v1197 = 0xC000000000000000;
            }
            v1200 = v1172;
            Data.append(_:)();
            switch(v1197 >> 62)
            {
              case 1uLL:
                sub_10017A558();
                uint64_t v1201 = swift_bridgeObjectRelease();
                LODWORD(v1205) = HIDWORD(v1199) - v1199;
                if (__OFSUB__(HIDWORD(v1199), v1199)) {
                  goto LABEL_450;
                }
                uint64_t v1205 = (int)v1205;
LABEL_301:
                Swift::Int v1208 = v1194 + v1205;
                uint64_t v1209 = (uint64_t)v1760;
                if (__OFADD__(v1194, v1205)) {
                  goto LABEL_441;
                }
                break;
              case 2uLL:
                uint64_t v1207 = *(void *)(v1199 + 16);
                uint64_t v1206 = *(void *)(v1199 + 24);
                sub_10017A558();
                uint64_t v1201 = swift_bridgeObjectRelease();
                uint64_t v1205 = v1206 - v1207;
                if (!__OFSUB__(v1206, v1207)) {
                  goto LABEL_301;
                }
                goto LABEL_451;
              case 3uLL:
                sub_10017A558();
                uint64_t v1201 = swift_bridgeObjectRelease();
                uint64_t v1205 = 0;
                goto LABEL_301;
              default:
                sub_10017A558();
                uint64_t v1201 = swift_bridgeObjectRelease();
                uint64_t v1205 = BYTE6(v1197);
                goto LABEL_301;
            }
            switch(v1764)
            {
              case 1:
                Swift::Int v1751 = v1194 + v1205;
                v1200 = (char *)v1772[2];
                if (v1200)
                {
                  v1219 = v1772;
                  uint64_t v1220 = (uint64_t)v1762;
                  uint64_t v1221 = (uint64_t)v1761;
                  uint64_t v1222 = (uint64_t)v1760;
                  uint64_t v1223 = (uint64_t)v1759;
                  unint64_t v1224 = v1758;
                  sub_10016CF64((uint64_t)v1772);
                  sub_10016AE48(v1756, v1224, v1223, (char)v1219, (uint64_t)v1757, v1222, v1221, v1220, 1);
                  v1225._uint64_t rawValue = sub_10017A7CC();
                  v1226 = (char *)sub_10017A308(v1225);
                  swift_bridgeObjectRelease();
                  uint64_t v1227 = swift_bridgeObjectRetain();
                  v1235 = v1219 + 6;
                  while (2)
                  {
                    v1775 = v1200;
                    uint64_t v1236 = *(v1235 - 2);
                    v1237 = (void *)*(v1235 - 1);
                    uint64_t v1239 = *v1235;
                    v1238 = (void *)v1235[1];
                    v1241 = (char *)v1235[2];
                    v1240 = (char *)v1235[3];
                    v1243 = (void *)v1235[4];
                    v1242 = (char *)v1235[5];
                    uint64_t v1244 = *((unsigned __int8 *)v1235 + 48);
                    v1235 += 9;
                    uint64_t v1777 = v1236;
                    unint64_t v1778 = v1244;
                    v1776 = v1241;
                    switch(v1244)
                    {
                      case 1:
                        uint64_t v1248 = sub_100028B80(v1227, v1228, v1229, v1230, v1231, v1232, v1233, v1234, v1723);
                        uint64_t v1256 = sub_100019CA0(v1248, v1249, v1250, v1251, v1252, v1253, v1254, v1255, (char)v1724);
                        uint64_t v1257 = ByteBuffer.writeAvroArray(_:)(v1256);
                        goto LABEL_310;
                      case 2:
                        uint64_t v1258 = sub_100028B80(v1227, v1228, v1229, v1230, v1231, v1232, v1233, v1234, v1723);
                        uint64_t v1266 = sub_100019CA0(v1258, v1259, v1260, v1261, v1262, v1263, v1264, v1265, (char)v1724);
                        uint64_t v1257 = ByteBuffer.writeAvroMap(_:)(v1266);
LABEL_310:
                        uint64_t v1267 = v1257;
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        swift_release();
                        goto LABEL_314;
                      case 3:
                        v1792.schema.type._uint64_t countAndFlagsBits = v1236;
                        v1792.schema.type._char object = v1237;
                        v1792.schema.name._uint64_t countAndFlagsBits = v1239;
                        v1792.schema.name._char object = v1238;
                        v1792.schema.namespace.value._uint64_t countAndFlagsBits = (uint64_t)v1241;
                        v1792.schema.namespace.value._char object = v1240;
                        v1792.schema.fields._uint64_t rawValue = v1243;
                        v1792.fields._uint64_t rawValue = v1242;
                        uint64_t v1268 = v1236;
                        LOBYTE(v1236) = (_BYTE)v1238;
                        sub_10017A040(v1268, (unint64_t)v1237, v1239, v1230, v1231, v1232, v1233, v1234, 3);
                        Swift::Int v1247 = ByteBuffer.writeAvroRecord(_:)(&v1792);
                        goto LABEL_312;
                      case 4:
                        v1774 = v1240;
                        v1240 = v1242;
                        memcpy(v1793, (const void *)(v1236 + 16), sizeof(v1793));
                        uint64_t v1269 = v1236;
                        LOBYTE(v1236) = (_BYTE)v1238;
                        uint64_t v1270 = (uint64_t)v1241;
                        v1241 = v1774;
                        sub_10016AE48(v1269, (unint64_t)v1237, v1239, (char)v1238, v1270, (uint64_t)v1774, (uint64_t)v1243, (uint64_t)v1240, 4);
                        sub_10016AFAC((uint64_t)v1793);
                        uint64_t v1267 = ByteBuffer.writeAvroUnion(_:)((uint64_t)v1793);
                        sub_10016B03C((uint64_t)v1793);
                        goto LABEL_314;
                      default:
                        v1773 = v1226;
                        uint64_t v1245 = v1236;
                        LOBYTE(v1236) = (_BYTE)v1238;
                        sub_10017A040(v1245, (unint64_t)v1237, v1239, v1230, v1231, v1232, v1233, v1234, 0);
                        uint64_t v1246 = sub_10017A470();
                        v1226 = v1773;
                        Swift::Int v1247 = ByteBuffer.writeAvroPrimitive(_:)(v1246, (unint64_t)v1237, v1239, (char)v1238);
LABEL_312:
                        uint64_t v1267 = v1247;
LABEL_314:
                        uint64_t v1227 = sub_100093A68(v1777, (unint64_t)v1237, v1239, v1236, (uint64_t)v1776, (uint64_t)v1241, (uint64_t)v1243, (uint64_t)v1240, v1778);
                        BOOL v119 = __OFADD__(v1226, v1267);
                        v1226 += v1267;
                        if (v119) {
                          goto LABEL_433;
                        }
                        v1200 = v1775 - 1;
                        if (v1775 != (char *)1) {
                          continue;
                        }
                        swift_bridgeObjectRelease();
                        v1271._uint64_t rawValue = sub_1001777D8(0);
                        Swift::Int v1272 = sub_10017A308(v1271);
                        swift_bridgeObjectRelease();
                        BOOL v119 = __OFADD__(v1226, v1272);
                        Swift::Int v1218 = (Swift::Int)&v1226[v1272];
                        if (!v119) {
                          goto LABEL_365;
                        }
                        goto LABEL_456;
                    }
                  }
                }
                goto LABEL_370;
              case 2:
                Swift::Int v1751 = v1194 + v1205;
                if (!v1772[2])
                {
LABEL_370:
                  sub_10017A16C(v1201, v1758, (uint64_t)v1759, v1202, v1203, v1204, (uint64_t)v1761, (uint64_t)v1762, (char)v1724);
                  v1420 = sub_1001777D8(0);
                  Swift::Int v1218 = ByteBuffer.writeBytes(_:)((Swift::OpaquePointer)v1420);
                  swift_bridgeObjectRelease();
                  goto LABEL_371;
                }
                v1273 = v1772;
                sub_10016AE48(v1756, v1758, (uint64_t)v1759, (char)v1772, (uint64_t)v1757, (uint64_t)v1760, (uint64_t)v1761, (uint64_t)v1762, 2);
                unint64_t v1274 = sub_10017A470();
                v1275 = sub_1001777D8(v1274);
                ByteBuffer.writeBytes(_:)((Swift::OpaquePointer)v1275);
                sub_1000281E4();
                uint64_t v1763 = (uint64_t)(v1273 + 8);
                sub_100028E34();
                unint64_t v1278 = v1277 & v1276;
                v1765 = (void *)((unint64_t)(v1279 + 63) >> 6);
                swift_bridgeObjectRetain();
                Swift::Int v1280 = 0;
                break;
              case 3:
                uint64_t v1210 = v1756;
                v1796.schema.type._uint64_t countAndFlagsBits = v1756;
                v1796.schema.type._char object = (void *)v1758;
                v1796.schema.name._uint64_t countAndFlagsBits = (uint64_t)v1759;
                v1796.schema.name._char object = v1772;
                v1796.schema.namespace.value._uint64_t countAndFlagsBits = (uint64_t)v1757;
                v1796.schema.namespace.value._char object = v1760;
                v1796.schema.fields._uint64_t rawValue = v1761;
                v1796.fields._uint64_t rawValue = v1762;
                sub_10017A018();
                v1157 = (void *)v1365;
                v1200 = (char *)v1366;
                sub_10002EF10(v1210, v1365, v1366, v1367, v1368, v1369, v1370, v1371, (char)v1724);
                Swift::Int v1217 = v1208;
                Swift::Int v1218 = ByteBuffer.writeAvroRecord(_:)(&v1796);
                sub_10017A018();
                goto LABEL_359;
              case 4:
                Swift::Int v1751 = v1194 + v1205;
                uint64_t v1377 = *(void *)(v1756 + 16);
                uint64_t v1376 = *(void *)(v1756 + 24);
                v1378 = *(char **)(v1756 + 32);
                unint64_t v1778 = *(void *)(v1756 + 40);
                uint64_t v1379 = *(void *)(v1756 + 56);
                uint64_t v1768 = *(void *)(v1756 + 48);
                uint64_t v1381 = *(void *)(v1756 + 64);
                uint64_t v1380 = *(void *)(v1756 + 72);
                v1382 = *(char **)(v1756 + 80);
                v1383 = (char *)*(unsigned __int8 *)(v1756 + 88);
                sub_10017A40C();
                Swift::Int v1770 = v1384;
                sub_10002559C();
                sub_10016AE48(v1385, v1386, v1387, (char)v1772, (uint64_t)v1757, v1209, v1388, v1389, (char)v1724);
                uint64_t v1771 = v1377;
                swift_bridgeObjectRetain();
                v1776 = v1383;
                v1774 = (char *)v1376;
                v1775 = v1378;
                unint64_t v1390 = (unint64_t)v1378;
                v1391 = (void *)v1768;
                uint64_t v1777 = v1381;
                uint64_t v1392 = v1381;
                v1393 = (void *)v1380;
                v1773 = v1382;
                sub_10016AE48(v1376, v1390, v1778, v1768, v1379, v1392, v1380, (uint64_t)v1382, (char)v1383);
                sub_1001777D8(v1770);
                sub_10017A2C8();
                if (v1394) {
                  sub_1000282EC();
                }
                uint64_t v1395 = sub_10016F72C(v1209);
                uint64_t v1396 = swift_bridgeObjectRelease();
                uint64_t v1404 = v1777;
                uint64_t v1405 = (uint64_t)v1757;
                Swift::Int v1770 = v1395;
                switch((unint64_t)v1776)
                {
                  case 1uLL:
                    uint64_t v1421 = sub_100025328(v1396, v1397, v1398, v1399, v1400, v1401, v1402, v1403, (char)v1726);
                    uint64_t v1422 = ByteBuffer.writeAvroArray(_:)(v1421);
                    goto LABEL_375;
                  case 2uLL:
                    uint64_t v1423 = sub_100025328(v1396, v1397, v1398, v1399, v1400, v1401, v1402, v1403, (char)v1726);
                    uint64_t v1422 = ByteBuffer.writeAvroMap(_:)(v1423);
LABEL_375:
                    uint64_t v1412 = v1777;
                    unint64_t v1769 = v1422;
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_release();
                    goto LABEL_380;
                  case 3uLL:
                    v1382 = v1775;
                    v1797.schema.type._uint64_t countAndFlagsBits = (uint64_t)v1774;
                    v1797.schema.type._char object = v1775;
                    v1797.schema.name._uint64_t countAndFlagsBits = v1778;
                    v1797.schema.name._char object = v1391;
                    v1797.schema.namespace.value._uint64_t countAndFlagsBits = v1379;
                    v1797.schema.namespace.value._char object = (void *)v1777;
                    uint64_t v1424 = v1379;
                    uint64_t v1379 = (uint64_t)v1393;
                    v1797.schema.fields._uint64_t rawValue = v1393;
                    v1393 = v1773;
                    v1797.fields._uint64_t rawValue = v1773;
                    char v1425 = 3;
                    LOBYTE(v1724) = 3;
                    uint64_t v1426 = sub_10017A830();
                    sub_10016AE48(v1426, v1427, v1428, v1429, v1424, v1404, v1379, (uint64_t)v1393, (char)v1724);
                    Swift::Int v1430 = ByteBuffer.writeAvroRecord(_:)(&v1797);
                    uint64_t v1412 = v1777;
                    unint64_t v1769 = v1430;
                    goto LABEL_378;
                  case 4uLL:
                    memcpy(v1798, v1774 + 16, sizeof(v1798));
                    char v1425 = 4;
                    v1382 = v1775;
                    uint64_t v1431 = v1379;
                    uint64_t v1424 = v1379;
                    uint64_t v1379 = (uint64_t)v1393;
                    uint64_t v1432 = (uint64_t)v1393;
                    v1393 = v1773;
                    sub_10016AE48((uint64_t)v1774, (unint64_t)v1775, v1778, (char)v1391, v1431, v1777, v1432, (uint64_t)v1773, 4);
                    sub_10016AFAC((uint64_t)v1798);
                    uint64_t v1433 = ByteBuffer.writeAvroUnion(_:)((uint64_t)v1798);
                    uint64_t v1412 = v1777;
                    unint64_t v1769 = v1433;
                    sub_10016B03C((uint64_t)v1798);
LABEL_378:
                    LOBYTE(v1724) = v1425;
                    uint64_t v1405 = (uint64_t)v1757;
                    uint64_t v1414 = sub_10017A830();
                    uint64_t v1377 = v1424;
                    uint64_t v1413 = v1424;
                    break;
                  default:
                    uint64_t v1406 = (uint64_t)v1774;
                    v1382 = v1775;
                    uint64_t v1407 = v1778;
                    uint64_t v1408 = (uint64_t)v1393;
                    uint64_t v1409 = (uint64_t)v1393;
                    v1393 = v1773;
                    sub_10016AE48((uint64_t)v1774, (unint64_t)v1775, v1778, (char)v1391, v1379, v1777, v1409, (uint64_t)v1773, 0);
                    uint64_t v1410 = sub_10017A470();
                    uint64_t v1411 = ByteBuffer.writeAvroPrimitive(_:)(v1410, (unint64_t)v1382, v1407, (char)v1391);
                    uint64_t v1412 = v1777;
                    uint64_t v1413 = v1379;
                    uint64_t v1379 = v1408;
                    unint64_t v1769 = v1411;
                    uint64_t v1414 = v1406;
                    unint64_t v1415 = (unint64_t)v1382;
                    uint64_t v1416 = v1407;
                    char v1417 = (char)v1391;
                    uint64_t v1377 = v1413;
                    break;
                }
                sub_100093A68(v1414, v1415, v1416, v1417, v1413, v1412, v1379, (uint64_t)v1393, (char)v1724);
                swift_bridgeObjectRelease();
LABEL_380:
                uint64_t v1434 = sub_10017A00C();
                sub_100093A68(v1434, (unint64_t)v1382, v1778, (char)v1391, v1377, v1412, v1379, (uint64_t)v1393, (char)v1726);
                v1157 = v1772;
                uint64_t v1435 = (uint64_t)v1762;
                sub_100093A68(v1756, v1758, (uint64_t)v1759, (char)v1772, v1405, (uint64_t)v1760, (uint64_t)v1761, (uint64_t)v1762, 4);
                LOBYTE(v1726) = 4;
                sub_10017A3BC();
                sub_100093A68(v1436, v1437, v1438, v1439, v1440, v1441, v1442, v1435, (char)v1726);
                Swift::Int v1218 = v1770 + v1769;
                if (__OFADD__(v1770, v1769)) {
                  goto LABEL_453;
                }
                v1172 = (char *)v1779;
                Swift::Int v1217 = v1751;
                goto LABEL_382;
              default:
                Swift::Int v1751 = v1194 + v1205;
                uint64_t v1210 = v1756;
                v1157 = (void *)v1758;
                v1200 = v1759;
                char v1211 = (char)v1772;
                sub_10002EF10(v1756, v1758, (uint64_t)v1759, (char)v1772, v1203, v1204, (uint64_t)v1761, (uint64_t)v1762, 0);
                uint64_t v1212 = ByteBuffer.writeAvroPrimitive(_:)(v1210, (unint64_t)v1157, (uint64_t)v1200, v1211);
                Swift::Int v1217 = v1751;
                Swift::Int v1218 = v1212;
LABEL_359:
                sub_100179D88(v1210, (unint64_t)v1157, (uint64_t)v1200, (char)v1772, v1213, v1214, v1215, v1216, (char)v1726);
                goto LABEL_372;
            }
            while (1)
            {
              uint64_t v1771 = v1194;
              if (v1278)
              {
                unint64_t v1281 = __clz(__rbit64(v1278));
                uint64_t v1282 = (v1278 - 1) & v1278;
                unint64_t v1283 = v1281 | (v1280 << 6);
              }
              else
              {
                if (__OFADD__(v1280, 1)) {
                  goto LABEL_438;
                }
                sub_10017A4D4();
                if (v497 == v119) {
                  goto LABEL_364;
                }
                if (!*(void *)(v1763 + 8 * v1284))
                {
                  sub_10017A0B8();
                  if (v497 == v119) {
                    goto LABEL_364;
                  }
                  if (!*(void *)(v1763 + 8 * v1285))
                  {
                    sub_10017A0B8();
                    if (v497 == v119) {
                      goto LABEL_364;
                    }
                    if (!*(void *)(v1763 + 8 * v1286))
                    {
                      sub_10017A0B8();
                      if (v497 == v119) {
                        goto LABEL_364;
                      }
                      if (!*(void *)(v1763 + 8 * v1287))
                      {
                        while (1)
                        {
                          if (__OFADD__(v1287, 1)) {
                            goto LABEL_445;
                          }
                          sub_10017A4D4();
                          if (v497 == v119) {
                            break;
                          }
                          uint64_t v1287 = v1363 + 1;
                          if (*(void *)(v1763 + 8 * v1364)) {
                            goto LABEL_336;
                          }
                        }
LABEL_364:
                        swift_release();
                        Swift::Int v1418 = sub_100177448(0);
                        Swift::Int v1218 = v1194 + v1418;
                        if (__OFADD__(v1194, v1418)) {
                          goto LABEL_457;
                        }
LABEL_365:
                        v1157 = (void *)v1758;
                        v1200 = v1759;
LABEL_371:
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        swift_release();
                        uint64_t v1210 = v1756;
                        Swift::Int v1217 = v1751;
LABEL_372:
                        sub_100179D88(v1210, (unint64_t)v1157, (uint64_t)v1200, (char)v1772, v1372, v1373, v1374, v1375, v1764);
                        v1172 = (char *)v1779;
LABEL_382:
                        Swift::Int v1443 = v1217 + v1218;
                        unint64_t v1178 = v1753;
                        uint64_t v1179 = v1754;
                        if (!__OFADD__(v1217, v1218))
                        {
                          uint64_t v1173 = v1752 + v1443;
                          if (!__OFADD__(v1752, v1443)) {
                            goto LABEL_272;
                          }
LABEL_443:
                          __break(1u);
                          goto LABEL_444;
                        }
LABEL_442:
                        __break(1u);
                        goto LABEL_443;
                      }
                    }
                  }
                }
LABEL_336:
                sub_10017A06C();
                uint64_t v1282 = v1289 & v1288;
                unint64_t v1283 = v1290 + (v1291 << 6);
              }
              v1292 = (uint64_t *)(v1772[6] + 16 * v1283);
              uint64_t v1294 = *v1292;
              unint64_t v1293 = v1292[1];
              sub_10017A69C();
              uint64_t v1296 = *(void *)v1295;
              unint64_t v1297 = *(void *)(v1295 + 8);
              uint64_t v1298 = *(void *)(v1295 + 16);
              uint64_t v1777 = *(void *)(v1295 + 24);
              unint64_t v1778 = v1298;
              uint64_t v1299 = *(void *)(v1295 + 32);
              v1776 = *(char **)(v1295 + 40);
              v1300 = *(char **)(v1295 + 48);
              uint64_t v1301 = *(void *)(v1295 + 56);
              v1302 = (char *)*(unsigned __int8 *)(v1295 + 64);
              unint64_t v1769 = v1282;
              Swift::Int v1770 = v1303;
              v1774 = (char *)v1301;
              v1775 = v1300;
              if ((v1293 & 0x1000000000000000) != 0) {
                String.UTF8View._foreignCount()();
              }
              swift_bridgeObjectRetain();
              v1773 = v1302;
              char v1706 = (char)v1302;
              uint64_t v1304 = v1296;
              uint64_t v1305 = v1296;
              v1306 = (void *)v1297;
              uint64_t v1307 = v1299;
              sub_10016AE48(v1305, v1297, v1778, v1777, v1299, (uint64_t)v1776, (uint64_t)v1775, (uint64_t)v1774, v1706);
              v1308 = sub_10017A7CC();
              unint64_t v1309 = v1779;
              Swift::Int v1310 = ByteBuffer.writeBytes(_:)((Swift::OpaquePointer)v1308);
              swift_bridgeObjectRelease();
              v1311._uint64_t countAndFlagsBits = v1294;
              v1311._char object = (void *)v1293;
              ByteBuffer.writeString(_:)(v1311);
              sub_100029978();
              if (__OFADD__(v1310, v1309)) {
                goto LABEL_430;
              }
              uint64_t v1767 = v1304;
              uint64_t v1768 = v1310 + v1309;
              switch((unint64_t)v1773)
              {
                case 1uLL:
                  sub_1000295DC();
                  sub_10001865C(v1304, (unint64_t)v1306, v1778, v1777, v1356, v1357, v1358, v1359, v1707);
                  sub_10017A7A4();
                  uint64_t v1335 = ByteBuffer.writeAvroArray(_:)(v1360);
                  goto LABEL_348;
                case 2uLL:
                  sub_10002E778();
                  sub_10001865C(v1304, (unint64_t)v1306, v1778, v1777, v1330, v1331, v1332, v1333, v1707);
                  sub_10017A7A4();
                  uint64_t v1335 = ByteBuffer.writeAvroMap(_:)(v1334);
LABEL_348:
                  Swift::Int v1329 = v1335;
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_release();
                  goto LABEL_349;
                case 3uLL:
                  uint64_t v1316 = v1304;
                  v1794.schema.type._uint64_t countAndFlagsBits = v1304;
                  v1794.schema.type._char object = v1306;
                  uint64_t v1336 = v1778;
                  v1794.schema.name._uint64_t countAndFlagsBits = v1778;
                  v1794.schema.name._char object = (void *)v1777;
                  v1794.schema.namespace.value._uint64_t countAndFlagsBits = v1307;
                  v1766 = (void *)v1307;
                  uint64_t v1338 = (uint64_t)v1775;
                  uint64_t v1337 = (uint64_t)v1776;
                  v1794.schema.namespace.value._char object = v1776;
                  v1794.schema.fields._uint64_t rawValue = v1775;
                  uint64_t v1339 = (uint64_t)v1774;
                  v1794.fields._uint64_t rawValue = v1774;
                  char v1340 = v1777;
                  sub_10017A018();
                  uint64_t v1341 = sub_100020CAC();
                  sub_10016AE48(v1341, v1342, v1336, v1340, v1343, v1337, v1338, v1339, v1707);
                  Swift::Int v1329 = ByteBuffer.writeAvroRecord(_:)(&v1794);
                  char v1344 = 3;
                  goto LABEL_345;
                case 4uLL:
                  uint64_t v1316 = v1304;
                  memcpy(v1795, (const void *)(v1304 + 16), sizeof(v1795));
                  sub_10002559C();
                  v1766 = (void *)v1307;
                  sub_10001865C(v1304, (unint64_t)v1306, v1778, v1777, v1345, v1346, v1347, v1348, v1707);
                  sub_10016AFAC((uint64_t)v1795);
                  Swift::Int v1329 = ByteBuffer.writeAvroUnion(_:)((uint64_t)v1795);
                  sub_10016B03C((uint64_t)v1795);
                  char v1344 = 4;
LABEL_345:
                  char v1707 = v1344;
                  break;
                default:
                  uint64_t v1316 = v1304;
                  uint64_t v1317 = v1304;
                  char v1318 = v1777;
                  v1766 = (void *)v1307;
                  sub_10001865C(v1317, (unint64_t)v1306, v1778, v1777, v1312, v1313, v1314, v1315, 0);
                  sub_10017A70C();
                  Swift::Int v1329 = ByteBuffer.writeAvroPrimitive(_:)(v1319, v1320, v1321, v1318);
                  break;
              }
              sub_100179FE0(v1316, v1322, v1323, v1324, v1325, v1326, v1327, v1328, v1707);
LABEL_349:
              sub_100179FE0(v1767, v1349, v1350, v1351, v1352, v1353, v1354, v1355, (char)v1773);
              sub_10017A784();
              BOOL v119 = __OFADD__(v1361, v1329);
              Swift::Int v1362 = v1361 + v1329;
              if (v119) {
                goto LABEL_431;
              }
              Swift::Int v1280 = v1770;
              uint64_t v1194 = v1771 + v1362;
              unint64_t v1278 = v1769;
              if (__OFADD__(v1771, v1362)) {
                goto LABEL_432;
              }
            }
          }
          while (1)
          {
            uint64_t v1419 = v1183 + 1;
            if (__OFADD__(v1183, 1)) {
              goto LABEL_458;
            }
            if (v1419 >= v1747) {
              break;
            }
            ++v1183;
            if (v1746[v1419]) {
              goto LABEL_283;
            }
          }
        }
LABEL_393:
        swift_release();
        v1780 = _swiftEmptyArrayStorage;
        sub_1001798E8((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100065744);
        sub_100026F34();
        sub_10002E6D8();
        sub_100029978();
        v1451 = &v1781[v1173 - 8];
        if (__OFADD__(v1173, &v1780)) {
          goto LABEL_463;
        }
        goto LABEL_399;
      case 3:
        uint64_t v1738 = v19;
        v1799.schema.type._uint64_t countAndFlagsBits = v10;
        v1799.schema.type._char object = v11;
        v1799.schema.name._uint64_t countAndFlagsBits = v13;
        v1799.schema.name._char object = v12;
        v1799.schema.namespace.value._uint64_t countAndFlagsBits = v15;
        v1799.schema.namespace.value._char object = v14;
        v1799.schema.fields._uint64_t rawValue = v16;
        v1799.fields._uint64_t rawValue = v17;
        uint64_t v1444 = sub_10017A418();
        sub_100028540(v1444, (unint64_t)v11, v1450, v1445, v1446, v1447, v1448, v1449, (char)v1724);
        Swift::Int v33 = ByteBuffer.writeAvroRecord(_:)(&v1799);
        goto LABEL_387;
      case 4:
        Swift::Int v1452 = *(void *)(v10 + 16);
        uint64_t v1777 = *(void *)(v10 + 24);
        v1772 = *(void **)(v10 + 32);
        uint64_t v1453 = *(void *)(v10 + 40);
        Swift::Int v1770 = v1452;
        uint64_t v1771 = v1453;
        v1454 = *(char **)(v10 + 48);
        unint64_t v1769 = *(void *)(v10 + 56);
        unint64_t v1778 = *(void *)(v10 + 64);
        v1775 = *(char **)(v10 + 72);
        v1776 = *(char **)(v10 + 80);
        uint64_t v1455 = *(unsigned __int8 *)(v10 + 88);
        v1773 = v1454;
        v1774 = (char *)v1455;
        unint64_t v1456 = (2 * *(void *)(v10 + 96)) ^ (*(uint64_t *)(v10 + 96) >> 63);
        sub_10002559C();
        uint64_t v1457 = v10;
        uint64_t v1458 = v10;
        unint64_t v1459 = (unint64_t)v11;
        unint64_t v1460 = (unint64_t)v11;
        v1462 = (void *)v1461;
        char v1464 = v1463;
        uint64_t v1466 = v1465;
        uint64_t v1468 = v1467;
        uint64_t v1470 = v1469;
        sub_10016AE48(v1458, v1460, v1461, v1463, v15, v1465, v1467, v1469, (char)v1724);
        sub_10002559C();
        uint64_t v1731 = v1457;
        uint64_t v1732 = v15;
        unint64_t v1727 = v1459;
        v1728 = v1462;
        uint64_t v1733 = v1466;
        uint64_t v1734 = v1468;
        uint64_t v1735 = v1470;
        sub_10016AE48(v1457, v1459, (uint64_t)v1462, v1464, v15, v1466, v1468, v1470, (char)v1726);
        swift_bridgeObjectRetain();
        unint64_t v1471 = v1769;
        sub_10016AE48(v1777, (unint64_t)v1772, v1771, (char)v1773, v1769, v1778, (uint64_t)v1775, (uint64_t)v1776, (char)v1774);
        v1780 = _swiftEmptyArrayStorage;
        char v1472 = v1456 & 0x7F;
        if (v1456 >= 0x80)
        {
          sub_1001798E8((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100065744);
          sub_10017A148();
          sub_10017A148();
          sub_10017A148();
          do
          {
            v1472 |= 0x80u;
            sub_1001798E8((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100065744);
            sub_1000241A4();
            sub_100179E80();
          }
          while (v1473);
        }
        sub_1001798E8((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100065744);
        sub_1000241A4();
        uint64_t v1474 = (uint64_t)v1780;
        v1780[2] = v1470 + 1;
        *(unsigned char *)(v1474 + 32 + v1470) = v1472;
        sub_1000282EC();
        uint64_t v1768 = sub_10016F72C(v1474);
        swift_bridgeObjectRelease();
        uint64_t v1483 = v1777;
        uint64_t v1482 = v1778;
        uint64_t v1484 = v1471;
        uint64_t v1485 = v1771;
        switch((unint64_t)v1774)
        {
          case 1uLL:
            uint64_t v1535 = sub_100029508();
            uint64_t v1543 = sub_100179FB4(v1535, v1536, v1537, v1538, v1539, v1540, v1541, v1542, (char)v1728);
            unint64_t v1487 = v1779;
            uint64_t v1544 = ByteBuffer.writeAvroArray(_:)(v1543);
            goto LABEL_403;
          case 2uLL:
            uint64_t v1545 = sub_100179FB4(v1777, v1475, v1476, v1477, v1478, v1479, v1480, v1481, 2);
            unint64_t v1487 = v1779;
            uint64_t v1544 = ByteBuffer.writeAvroMap(_:)(v1545);
LABEL_403:
            uint64_t v1767 = v1544;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_release();
            goto LABEL_406;
          case 3uLL:
            v1800.schema.type._uint64_t countAndFlagsBits = v1777;
            v1462 = v1772;
            LOBYTE(v1471) = (_BYTE)v1773;
            v1800.schema.type._char object = v1772;
            v1800.schema.name._uint64_t countAndFlagsBits = v1771;
            v1800.schema.name._char object = v1773;
            v1800.schema.namespace.value._uint64_t countAndFlagsBits = v1484;
            v1800.schema.namespace.value._char object = (void *)v1778;
            uint64_t v1546 = (uint64_t)v1776;
            v1800.schema.fields._uint64_t rawValue = v1775;
            v1800.fields._uint64_t rawValue = v1776;
            LOBYTE(v1726) = 3;
            sub_100179E04();
            sub_10016AE48(v1547, v1548, v1549, v1550, v1551, v1552, v1553, v1546, (char)v1726);
            unint64_t v1487 = v1779;
            uint64_t v1767 = ByteBuffer.writeAvroRecord(_:)(&v1800);
            LOBYTE(v1726) = 3;
            sub_100179E04();
            uint64_t v1482 = v1778;
            uint64_t v1495 = v1546;
            goto LABEL_405;
          case 4uLL:
            v1568 = *(void **)(v1777 + 16);
            uint64_t v1569 = *(void *)(v1777 + 32);
            v1766 = *(void **)(v1777 + 24);
            uint64_t v1767 = v1569;
            uint64_t v1571 = *(void *)(v1777 + 40);
            uint64_t v1570 = *(void *)(v1777 + 48);
            uint64_t v1573 = *(void *)(v1777 + 56);
            v1572 = *(void **)(v1777 + 64);
            uint64_t v1574 = *(void *)(v1777 + 72);
            v1575 = *(void **)(v1777 + 80);
            v1576 = (void *)*(unsigned __int8 *)(v1777 + 88);
            sub_10017A40C();
            v1761 = v1577;
            uint64_t v1578 = sub_10017A160();
            sub_10016AE48(v1578, (unint64_t)v1772, v1579, (char)v1773, v1580, v1581, (uint64_t)v1775, (uint64_t)v1776, (char)v1728);
            v1760 = v1568;
            swift_bridgeObjectRetain();
            v1765 = v1576;
            v1774 = (char *)v1571;
            uint64_t v1763 = v1573;
            uint64_t v1764 = v1570;
            uint64_t v1582 = v1573;
            v1583 = v1572;
            uint64_t v1584 = (uint64_t)v1572;
            v1585 = (void *)v1574;
            v1762 = v1575;
            sub_10016AE48((uint64_t)v1766, v1767, v1571, v1570, v1582, v1584, v1574, (uint64_t)v1575, (char)v1576);
            v1586 = sub_1001777D8((unint64_t)v1761);
            if (v1586[2]) {
              Data._Representation.append(contentsOf:)();
            }
            v1587 = (void *)sub_10016F72C((uint64_t)v1586);
            uint64_t v1588 = swift_bridgeObjectRelease();
            char v1595 = v1764;
            uint64_t v1596 = (uint64_t)v1585;
            uint64_t v1598 = (uint64_t)v1766;
            unint64_t v1597 = v1767;
            v1761 = v1587;
            switch((unint64_t)v1765)
            {
              case 1uLL:
                sub_1000295DC();
                uint64_t v1618 = sub_100024580(v1610, v1611, v1612, v1613, v1614, v1615, v1616, v1617, v1730);
                uint64_t v1619 = ByteBuffer.writeAvroArray(_:)(v1618);
                goto LABEL_417;
              case 2uLL:
                uint64_t v1620 = sub_100024580(v1588, v1589, (uint64_t)v1774, v1590, v1591, v1592, v1593, v1594, 2);
                uint64_t v1619 = ByteBuffer.writeAvroMap(_:)(v1620);
LABEL_417:
                sub_10017A214(v1619);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                uint64_t v1621 = swift_release();
                goto LABEL_420;
              case 3uLL:
                v1801.schema.type._uint64_t countAndFlagsBits = (uint64_t)v1766;
                v1801.schema.type._char object = (void *)v1767;
                v1801.schema.name._uint64_t countAndFlagsBits = (uint64_t)v1774;
                v1801.schema.name._char object = (void *)v1764;
                v1801.schema.namespace.value._uint64_t countAndFlagsBits = v1763;
                v1801.schema.namespace.value._char object = v1583;
                v1801.schema.fields._uint64_t rawValue = v1585;
                v1801.fields._uint64_t rawValue = v1762;
                sub_10016AE48((uint64_t)v1766, v1767, (uint64_t)v1774, v1764, v1763, (uint64_t)v1583, (uint64_t)v1585, (uint64_t)v1762, 3);
                Swift::Int v1629 = ByteBuffer.writeAvroRecord(_:)(&v1801);
                uint64_t v1602 = sub_10017A214(v1629);
                LOBYTE(v1728) = 3;
                goto LABEL_419;
              case 4uLL:
                uint64_t v1654 = v1766[3];
                uint64_t v1753 = v1766[2];
                v1741 = (unsigned char *)v1654;
                Swift::Int v1751 = v1766[4];
                v1765 = (void *)v1766[5];
                uint64_t v1655 = v1766[6];
                v1746 = (void *)v1766[7];
                uint64_t v1747 = v1655;
                uint64_t v1656 = v1766[8];
                v1744 = (unsigned char *)v1766[10];
                uint64_t v1657 = (uint64_t)v1744;
                v1745 = (void *)v1656;
                unsigned __int8 v1658 = *((unsigned char *)v1766 + 88);
                LODWORD(v1752) = v1658;
                sub_10017A40C();
                Swift::Int v1758 = v1659;
                v1759 = v1660;
                sub_10002559C();
                uint64_t v1756 = (uint64_t)v1583;
                sub_10016AE48(v1598, v1597, v1661, v1595, v1763, (uint64_t)v1583, v1596, (uint64_t)v1762, v1730);
                swift_bridgeObjectRetain();
                LOBYTE(v1730) = v1658;
                uint64_t v1662 = v1654;
                unint64_t v1663 = v1751;
                uint64_t v1665 = (uint64_t)v1746;
                uint64_t v1664 = v1747;
                uint64_t v1666 = (uint64_t)v1745;
                v1667 = v1759;
                sub_10016AE48(v1662, v1751, (uint64_t)v1765, v1747, (uint64_t)v1746, (uint64_t)v1745, (uint64_t)v1759, v1657, v1730);
                v1668._uint64_t rawValue = sub_1001777D8(v1758);
                unint64_t v1754 = v1596;
                Swift::Int v1758 = sub_10017A308(v1668);
                swift_bridgeObjectRelease();
                uint64_t v1669 = (uint64_t)v1741;
                v1802[0] = v1741;
                v1802[1] = v1663;
                uint64_t v1670 = (uint64_t)v1765;
                v1802[2] = v1765;
                v1802[3] = v1664;
                v1802[4] = v1665;
                v1802[5] = v1666;
                uint64_t v1671 = (uint64_t)v1744;
                v1802[6] = v1667;
                v1802[7] = v1744;
                LOBYTE(v1667) = v1752;
                char v1803 = v1752;
                v1757 = (void *)ByteBuffer.writeAvroValue(_:)(v1802);
                swift_bridgeObjectRelease();
                sub_100093A68(v1669, v1663, v1670, v1664, v1665, v1666, (uint64_t)v1759, v1671, (char)v1667);
                uint64_t v1673 = (uint64_t)v1766;
                uint64_t v1672 = v1767;
                uint64_t v1674 = (uint64_t)v1774;
                uint64_t v1675 = v1763;
                LOBYTE(v1666) = v1764;
                uint64_t v1676 = v1756;
                uint64_t v1677 = v1754;
                uint64_t v1678 = (uint64_t)v1762;
                sub_100093A68((uint64_t)v1766, v1767, (uint64_t)v1774, v1764, v1763, v1756, v1754, (uint64_t)v1762, 4);
                swift_bridgeObjectRelease();
                sub_100093A68(v1673, v1672, v1674, v1666, v1675, v1676, v1677, v1678, 4);
                uint64_t v1680 = v1777;
                uint64_t v1679 = v1778;
                uint64_t v1682 = v1771;
                v1681 = v1772;
                LOBYTE(v1672) = (_BYTE)v1773;
                uint64_t v1683 = v1769;
                sub_100179F30(v1777, (unint64_t)v1772, v1771, (char)v1773, v1769, v1778, v1684, v1685, 4);
                swift_bridgeObjectRelease();
                sub_100179F30(v1680, (unint64_t)v1681, v1682, v1672, v1683, v1679, v1686, v1687, 4);
                sub_100029F9C();
                uint64_t v1688 = v1732;
                uint64_t v1690 = v1733;
                uint64_t v1689 = v1734;
                uint64_t v1691 = v1735;
                sub_100093A68(v1731, v1727, (uint64_t)v1728, (char)v1755, v1732, v1733, v1734, v1735, v1730);
                sub_100029F9C();
                uint64_t v1692 = sub_10017A570();
                sub_100093A68(v1692, v1693, v1694, v1695, v1688, v1690, v1689, v1691, v1730);
                v1653 = (char *)v1757 + v1758;
                if (__OFADD__(v1758, v1757)) {
                  goto LABEL_477;
                }
                uint64_t v5 = v1730;
                v1652 = v1761;
                break;
              default:
                sub_100024580(v1588, v1589, (uint64_t)v1774, v1590, v1591, v1592, v1593, v1594, 0);
                uint64_t v1599 = sub_10017A448();
                uint64_t v1601 = ByteBuffer.writeAvroPrimitive(_:)(v1599, v1600, (uint64_t)v1774, v1595);
                uint64_t v1602 = sub_10017A214(v1601);
                LOBYTE(v1726) = 0;
LABEL_419:
                sub_10002E7FC(v1602, v1603, v1604, v1605, v1606, v1607, v1608, v1609, (char)v1728);
                uint64_t v1621 = swift_bridgeObjectRelease();
LABEL_420:
                sub_10002E7FC(v1621, v1622, v1623, v1624, v1625, v1626, v1627, v1628, (char)v1765);
                uint64_t v1630 = v1483;
                uint64_t v1631 = v1483;
                uint64_t v1633 = v1771;
                v1632 = v1772;
                char v1634 = (char)v1773;
                uint64_t v1635 = v1769;
                uint64_t v1636 = v1778;
                sub_100179F30(v1630, (unint64_t)v1772, v1771, (char)v1773, v1769, v1778, v1637, v1638, 4);
                swift_bridgeObjectRelease();
                sub_100179F30(v1631, (unint64_t)v1632, v1633, v1634, v1635, v1636, v1639, v1640, 4);
                sub_100029F9C();
                uint64_t v1641 = v1731;
                uint64_t v1642 = v1732;
                sub_10002941C();
                sub_100093A68(v1643, v1644, v1645, v1646, v1647, v1648, v1649, v1735, (char)v1728);
                sub_10017A4BC(v1641, v1636, v1633, v1634, v1642, v1631, v1650, v1651, 4);
                uint64_t v5 = v1730;
                v1652 = v1761;
                v1653 = v1759;
                break;
            }
            BOOL v119 = __OFADD__(v1652, v1653);
            uint64_t v1567 = (uint64_t)&v1653[(void)v1652];
            if (!v119) {
              goto LABEL_407;
            }
            goto LABEL_470;
          default:
            v1462 = v1772;
            LOBYTE(v1471) = (_BYTE)v1773;
            uint64_t v1486 = (uint64_t)v1776;
            sub_10016AE48(v1777, (unint64_t)v1772, v1771, (char)v1773, v1484, v1778, (uint64_t)v1775, (uint64_t)v1776, 0);
            unint64_t v1487 = v1779;
            uint64_t v1767 = ByteBuffer.writeAvroPrimitive(_:)(v1777, (unint64_t)v1462, v1485, v1471);
            LOBYTE(v1726) = 0;
            sub_100179E04();
            uint64_t v1495 = v1486;
            uint64_t v1482 = v1778;
LABEL_405:
            sub_100093A68(v1488, v1489, v1490, v1491, v1492, v1493, v1494, v1495, (char)v1726);
            swift_bridgeObjectRelease();
LABEL_406:
            uint64_t v1554 = sub_10017A160();
            sub_100093A68(v1554, (unint64_t)v1462, v1485, v1471, v1484, v1482, (uint64_t)v1775, (uint64_t)v1776, (char)v1728);
            sub_10002E688();
            uint64_t v1555 = v1731;
            sub_10002941C();
            sub_100093A68(v1556, v1557, v1558, v1559, v1560, v1561, v1562, v1735, (char)v1728);
            sub_100029F9C();
            sub_100179D88(v1555, v1487, v1485, v1471, v1563, v1564, v1565, v1566, (char)v1728);
            uint64_t v5 = v1730;
            uint64_t v1567 = v1767;
LABEL_407:
            v1451 = (unsigned char *)(v1768 + v1567);
            if (!__OFADD__(v1768, v1567)) {
              goto LABEL_408;
            }
            goto LABEL_461;
        }
      default:
        uint64_t v1738 = v19;
        uint64_t v20 = sub_10017A544();
        char v22 = v21;
        sub_100028540(v20, v23, v24, v25, v26, v27, v28, v29, 0);
        uint64_t v30 = sub_10017A2D4();
        Swift::Int v33 = ByteBuffer.writeAvroPrimitive(_:)(v30, v31, v32, v22);
LABEL_387:
        v1451 = (unsigned char *)v33;
        goto LABEL_400;
    }
  }
LABEL_426:
  sub_10000DFB8();
  return result;
}

uint64_t ByteBuffer.writeAvroUnion(_:)(uint64_t a1)
{
  uint64_t v3 = sub_1001777D8((2 * *(void *)(a1 + 80)) ^ (*(uint64_t *)(a1 + 80) >> 63));
  ByteBuffer.writeBytes(_:)((Swift::OpaquePointer)v3);
  sub_1000281E4();
  memcpy(__dst, (const void *)(a1 + 8), 0x41uLL);
  uint64_t v4 = ByteBuffer.writeAvroValue(_:)(__dst);
  BOOL v5 = __OFADD__(v1, v4);
  uint64_t result = v1 + v4;
  if (v5) {
    __break(1u);
  }
  return result;
}

Swift::Int sub_100177448(uint64_t a1)
{
  uint64_t v1 = sub_1001777D8((2 * a1) ^ (a1 >> 63));
  Swift::Int v2 = ByteBuffer.writeBytes(_:)((Swift::OpaquePointer)v1);
  swift_bridgeObjectRelease();
  return v2;
}

Swift::Int __swiftcall ByteBuffer.writeAvroString(_:)(Swift::String a1)
{
  char object = a1._object;
  uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  if (((uint64_t)a1._object & 0x1000000000000000) != 0)
  {
    uint64_t v3 = String.UTF8View._foreignCount()();
  }
  else if (((uint64_t)a1._object & 0x2000000000000000) != 0)
  {
    uint64_t v3 = HIBYTE(a1._object) & 0xF;
  }
  else
  {
    uint64_t v3 = a1._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v4 = sub_10017A0EC(v3);
  Swift::Int v5 = ByteBuffer.writeBytes(_:)((Swift::OpaquePointer)v4);
  swift_bridgeObjectRelease();
  v6._uint64_t countAndFlagsBits = countAndFlagsBits;
  v6._char object = object;
  Swift::Int v7 = ByteBuffer.writeString(_:)(v6);
  BOOL v8 = __OFADD__(v5, v7);
  Swift::Int result = v5 + v7;
  if (v8) {
    __break(1u);
  }
  return result;
}

Swift::Int __swiftcall ByteBuffer.writeAvroLong(_:)(Swift::Int64 a1)
{
  Swift::Int v2 = sub_10017A0EC(a1);
  ByteBuffer.writeBytes(_:)((Swift::OpaquePointer)v2);
  sub_100020CD0();
  return v1;
}

Swift::Int __swiftcall ByteBuffer.writeAvroBool(_:)(Swift::Bool a1)
{
  Swift::Bool v2 = a1;
  return sub_10016FA44(&v2);
}

Swift::Int __swiftcall ByteBuffer.writeAvroInt(_:)(Swift::Int32 a1)
{
  Swift::Bool v2 = sub_1001776B0((2 * a1) ^ (a1 >> 31));
  ByteBuffer.writeBytes(_:)((Swift::OpaquePointer)v2);
  sub_100020CD0();
  return v1;
}

Swift::Int __swiftcall ByteBuffer.writeAvroFloat(_:)(Swift::Float a1)
{
  Swift::Float v2 = a1;
  return sub_10016FAB8(&v2);
}

Swift::Int __swiftcall ByteBuffer.writeAvroDouble(_:)(Swift::Double a1)
{
  Swift::Double v2 = a1;
  return sub_10016FB2C(&v2);
}

void *sub_1001776B0(unsigned int a1)
{
  LOBYTE(v1) = a1 & 0x7F;
  if (a1 >= 0x80)
  {
    unsigned int v6 = a1;
    sub_100065744(0, 1, 1, (uint64_t)_swiftEmptyArrayStorage);
    Swift::Double v2 = v7;
    unint64_t v8 = v7[2];
    do
    {
      unint64_t v9 = v2[3];
      if (v8 >= v9 >> 1)
      {
        sub_100065744(v9 > 1, v8 + 1, 1, (uint64_t)v2);
        Swift::Double v2 = v12;
      }
      char v10 = v1 | 0x80;
      int v1 = (v6 >> 7) & 0x7F;
      unsigned int v11 = v6 >> 14;
      v6 >>= 7;
      v2[2] = v8 + 1;
      *((unsigned char *)v2 + v8++ + 32) = v10;
    }
    while (v11);
  }
  else
  {
    Swift::Double v2 = _swiftEmptyArrayStorage;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_100065744(0, v2[2] + 1, 1, (uint64_t)v2);
    Swift::Double v2 = v13;
  }
  unint64_t v4 = v2[2];
  unint64_t v3 = v2[3];
  if (v4 >= v3 >> 1)
  {
    sub_100065744(v3 > 1, v4 + 1, 1, (uint64_t)v2);
    Swift::Double v2 = v14;
  }
  v2[2] = v4 + 1;
  *((unsigned char *)v2 + v4 + 32) = v1;
  return v2;
}

void *sub_1001777D8(unint64_t a1)
{
  LOBYTE(v1) = a1 & 0x7F;
  if (a1 >= 0x80)
  {
    unint64_t v6 = a1;
    sub_100065744(0, 1, 1, (uint64_t)_swiftEmptyArrayStorage);
    Swift::Double v2 = v7;
    unint64_t v8 = v7[2];
    do
    {
      unint64_t v9 = v2[3];
      if (v8 >= v9 >> 1)
      {
        sub_100065744(v9 > 1, v8 + 1, 1, (uint64_t)v2);
        Swift::Double v2 = v12;
      }
      char v10 = v1 | 0x80;
      uint64_t v1 = (v6 >> 7) & 0x7F;
      unint64_t v11 = v6 >> 14;
      v6 >>= 7;
      v2[2] = v8 + 1;
      *((unsigned char *)v2 + v8++ + 32) = v10;
    }
    while (v11);
  }
  else
  {
    Swift::Double v2 = _swiftEmptyArrayStorage;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    sub_100065744(0, v2[2] + 1, 1, (uint64_t)v2);
    Swift::Double v2 = v13;
  }
  unint64_t v4 = v2[2];
  unint64_t v3 = v2[3];
  if (v4 >= v3 >> 1)
  {
    sub_100065744(v3 > 1, v4 + 1, 1, (uint64_t)v2);
    Swift::Double v2 = v14;
  }
  v2[2] = v4 + 1;
  *((unsigned char *)v2 + v4 + 32) = v1;
  return v2;
}

uint64_t sub_100177900(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, char))
{
  char v4 = *(unsigned char *)(a1 + 64);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), v4);
  return a1;
}

Swift::Int __swiftcall ByteBuffer.writeAvroBytes(_:)(Swift::OpaquePointer a1)
{
  unint64_t v3 = sub_1001777D8(2 * *((void *)a1._rawValue + 2));
  ByteBuffer.writeBytes(_:)((Swift::OpaquePointer)v3);
  sub_1000281E4();
  Swift::Int v4 = ByteBuffer.writeBytes(_:)(a1);
  BOOL v5 = __OFADD__(v1, v4);
  Swift::Int result = v1 + v4;
  if (v5) {
    __break(1u);
  }
  return result;
}

Swift::Int ByteBuffer.writeAvroBytes(_:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3 = sub_10016B5AC(a1, a2, a3);
  Swift::Int v4 = sub_10017A0EC(v3);
  Swift::Int v5 = ByteBuffer.writeBytes(_:)((Swift::OpaquePointer)v4);
  swift_bridgeObjectRelease();
  uint64_t v6 = sub_100020CAC();
  uint64_t v8 = ByteBuffer.writeImmutableBuffer(_:)(v6, v7);
  BOOL v9 = __OFADD__(v5, v8);
  Swift::Int result = v5 + v8;
  if (v9) {
    __break(1u);
  }
  return result;
}

Swift::Int ByteBuffer.writeAvroBytes(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = Data.count.getter();
  Swift::Int v5 = sub_10017A0EC(v4);
  Swift::Int v6 = ByteBuffer.writeBytes(_:)((Swift::OpaquePointer)v5);
  swift_bridgeObjectRelease();
  uint64_t v7 = ByteBuffer.writeData(_:)(a1, a2);
  BOOL v8 = __OFADD__(v6, v7);
  Swift::Int result = v6 + v7;
  if (v8) {
    __break(1u);
  }
  return result;
}

void *sub_100177A7C()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  ByteBufferView.init(_:)(*v0, v2, v0[2], v36);
  uint64_t v3 = v37;
  uint64_t v4 = v38;
  uint64_t v35 = v37 - v38;
  if (v37 != v38)
  {
    uint64_t v27 = v0;
    uint64_t v5 = v36[0];
    unint64_t v6 = v36[1];
    uint64_t v7 = v36[2];
    sub_100027BCC(v1, v2);
    uint64_t v8 = 0;
    BOOL v9 = &v39;
    unint64_t v32 = v6 >> 40;
    char v10 = &v39;
    unint64_t v33 = v6;
    unint64_t v30 = v6 >> 24;
    unint64_t v31 = HIDWORD(v6);
    unint64_t v11 = v6 >> 62;
    unint64_t v34 = v11;
    uint64_t v28 = v7;
    uint64_t v29 = v4;
    while (v3 + v8 < v4)
    {
      if (v3 < v7) {
        goto LABEL_32;
      }
      unint64_t v12 = HIDWORD(v5);
      switch(v11)
      {
        case 1uLL:
          if (v5 >> 32 < (int)v5) {
            goto LABEL_33;
          }
          sub_10016EB98((uint64_t)v36);
          uint64_t v14 = __DataStorage._bytes.getter();
          if (!v14) {
            goto LABEL_12;
          }
          uint64_t v15 = __DataStorage._offset.getter();
          if (__OFSUB__((int)v5, v15)) {
            goto LABEL_35;
          }
          v14 += (int)v5 - v15;
LABEL_12:
          __DataStorage._length.getter();
          char v13 = *(unsigned char *)(v14 + v3 + v8);
          sub_10016EC98((uint64_t)v36);
          unint64_t v11 = v34;
          LODWORD(v12) = HIDWORD(v5);
          uint64_t v7 = v28;
LABEL_18:
          if ((v13 & 0x80) == 0)
          {
            if ((v3 & 0x8000000000000000) == 0)
            {
              uint64_t v21 = v3 + v8;
              uint64_t v22 = v3 + v8 + 1;
              uint64_t v23 = 0;
              switch(v11)
              {
                case 1uLL:
                  if (__OFSUB__(v12, v5)) {
                    goto LABEL_38;
                  }
                  uint64_t v23 = (int)v12 - (int)v5;
LABEL_27:
                  sub_10016EB98((uint64_t)v36);
LABEL_28:
                  if (v23 <= v21) {
                    goto LABEL_37;
                  }
                  *(void *)&long long v39 = v5;
                  *((void *)&v39 + 1) = v33;
                  uint64_t v40 = v7;
                  uint64_t v41 = v3;
                  uint64_t v42 = v22;
                  uint64_t v20 = sub_10016E690(&v39);
                  sub_10016EC98((uint64_t)v36);
                  sub_10016EC98((uint64_t)v36);
                  v27[2] = v22;
                  break;
                case 2uLL:
                  uint64_t v25 = *(void *)(v5 + 16);
                  uint64_t v24 = *(void *)(v5 + 24);
                  uint64_t v23 = v24 - v25;
                  if (!__OFSUB__(v24, v25)) {
                    goto LABEL_27;
                  }
                  goto LABEL_39;
                case 3uLL:
                  goto LABEL_28;
                default:
                  uint64_t v23 = BYTE6(v33);
                  goto LABEL_28;
              }
              return v20;
            }
LABEL_36:
            __break(1u);
LABEL_37:
            __break(1u);
LABEL_38:
            __break(1u);
LABEL_39:
            __break(1u);
          }
          ++v8;
          BOOL v9 = (long long *)((char *)v9 + 1);
          char v10 = (long long *)((char *)v10 + 1);
          if (!(v35 + v8)) {
            goto LABEL_20;
          }
          break;
        case 2uLL:
          uint64_t v16 = v7;
          uint64_t v17 = *(void *)(v5 + 16);
          swift_retain();
          swift_retain();
          uint64_t v18 = __DataStorage._bytes.getter();
          if (!v18) {
            goto LABEL_16;
          }
          uint64_t v19 = __DataStorage._offset.getter();
          if (__OFSUB__(v17, v19)) {
            goto LABEL_34;
          }
          v18 += v17 - v19;
LABEL_16:
          __DataStorage._length.getter();
          char v13 = *(unsigned char *)(v18 + v3 + v8);
          swift_release();
          swift_release();
          uint64_t v7 = v16;
          uint64_t v4 = v29;
          LODWORD(v12) = HIDWORD(v5);
          unint64_t v11 = v34;
          goto LABEL_18;
        case 3uLL:
          *(void *)((char *)&v39 + 6) = 0;
          *(void *)&long long v39 = 0;
          char v13 = *((unsigned char *)v10 + v3);
          goto LABEL_18;
        default:
          *(void *)&long long v39 = v5;
          WORD4(v39) = v33;
          BYTE10(v39) = BYTE2(v33);
          BYTE11(v39) = v30;
          BYTE12(v39) = v31;
          BYTE13(v39) = v32;
          char v13 = *((unsigned char *)v9 + v3);
          goto LABEL_18;
      }
    }
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  sub_100027BCC(v1, v2);
LABEL_20:
  sub_10016EC98((uint64_t)v36);
  return 0;
}

uint64_t sub_100177E18(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    int v2 = 0;
    uint64_t v3 = a1 + 31;
    do
    {
      uint64_t v4 = *(unsigned char *)(v3 + v1) & 0x7F | (v2 << 7);
      int v2 = *(unsigned char *)(v3 + v1--) & 0x7F | (v2 << 7);
    }
    while (v1);
  }
  else
  {
    uint64_t v4 = 0;
  }
  swift_bridgeObjectRelease();
  return v4;
}

unint64_t sub_100177E68(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    unint64_t v2 = 0;
    do
    {
      unint64_t v3 = *(unsigned char *)(a1 + 31 + v1) & 0x7F | (v2 << 7);
      unint64_t v2 = v3;
      --v1;
    }
    while (v1);
  }
  else
  {
    unint64_t v3 = 0;
  }
  swift_bridgeObjectRelease();
  return v3;
}

void ByteBuffer.readAvroValue(_:)(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  switch(a1 >> 61)
  {
    case 1uLL:
      sub_10017A294();
      swift_bridgeObjectRetain();
      sub_10002EFCC();
      ByteBuffer.readAvroArray(_:)();
      goto LABEL_5;
    case 2uLL:
      sub_10017A294();
      swift_bridgeObjectRetain();
      sub_10002EFCC();
      ByteBuffer.readAvroMap(_:)();
LABEL_5:
      char v3 = v13;
      swift_release();
      swift_bridgeObjectRelease();
      long long v5 = v12;
      long long v4 = v11;
      long long v7 = v10;
      long long v6 = v9;
      goto LABEL_9;
    case 3uLL:
      long long v8 = *(_OWORD *)((a1 & 0x1FFFFFFFFFFFFFFFLL) + 0x20);
      long long v14 = *(_OWORD *)((a1 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
      long long v15 = v8;
      long long v16 = *(_OWORD *)((a1 & 0x1FFFFFFFFFFFFFFFLL) + 0x30);
      uint64_t v17 = *(void *)((a1 & 0x1FFFFFFFFFFFFFFFLL) + 0x40);
      ByteBuffer.readAvroRecord(_:)();
      goto LABEL_8;
    case 4uLL:
      ByteBuffer.readAvroUnion(_:)(*(void *)((a1 & 0x1FFFFFFFFFFFFFFFLL) + 0x10), (uint64_t)&v9);
      goto LABEL_8;
    default:
      ByteBuffer.readAvroPrimitive(_:)(&v9, *(unsigned __int8 *)(a1 + 16));
LABEL_8:
      long long v6 = v9;
      long long v7 = v10;
      long long v4 = v11;
      long long v5 = v12;
      char v3 = v13;
LABEL_9:
      *(_OWORD *)a2 = v6;
      *(_OWORD *)(a2 + 16) = v7;
      *(_OWORD *)(a2 + 32) = v4;
      *(_OWORD *)(a2 + 48) = v5;
      *(unsigned char *)(a2 + 64) = v3;
      return;
  }
}

#error "100178120: call analysis failed (funcsize=127)"

void ByteBuffer.readAvroArray(_:)()
{
  sub_10000DFE0();
  unint64_t v46 = v4;
  unint64_t v6 = v5;
  uint64_t v45 = v7;
  uint64_t v55 = v8;
  if (!sub_100177A7C()) {
    goto LABEL_35;
  }
  sub_100179E50();
  if (v10)
  {
    swift_bridgeObjectRelease();
LABEL_35:
    unint64_t v19 = 0;
    uint64_t v20 = 0;
    sub_10017A614();
LABEL_36:
    char v35 = -1;
    goto LABEL_37;
  }
  unint64_t v11 = sub_100177E68(v9);
  unint64_t v2 = -(uint64_t)(v11 & 1) ^ (v11 >> 1);
  if ((v2 & 0x8000000000000000) != 0)
  {
LABEL_43:
    __break(1u);
    JUMPOUT(0x1001787A8);
  }
  unint64_t v44 = v6;
  if (!v2)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    long long v12 = _swiftEmptyArrayStorage;
LABEL_30:
    long long v39 = sub_100179564();
    if ((v40 & 1) == 0 && !v39)
    {
      sub_10017A614();
      uint64_t v20 = v12;
      char v35 = 1;
      unint64_t v19 = v44;
      uint64_t v41 = v55;
      uint64_t v42 = v45;
      unint64_t v43 = v46;
      goto LABEL_38;
    }
LABEL_33:
    swift_bridgeObjectRelease();
    goto LABEL_34;
  }
  swift_bridgeObjectRetain();
  swift_retain();
  long long v12 = _swiftEmptyArrayStorage;
  while (2)
  {
    if (!v2)
    {
      __break(1u);
      goto LABEL_43;
    }
    unint64_t v58 = v2;
    switch(v46 >> 61)
    {
      case 1uLL:
        sub_10017A024();
        swift_bridgeObjectRetain();
        uint64_t v17 = sub_10017A858();
        ByteBuffer.readAvroArray(_:)(v17);
        long long v56 = v64;
        long long v49 = v62;
        long long v52 = v63;
        long long v47 = v61;
        uint64_t v0 = v65;
        goto LABEL_13;
      case 2uLL:
        sub_10017A024();
        swift_bridgeObjectRetain();
        sub_10017A858();
        ByteBuffer.readAvroMap(_:)();
        long long v56 = v69;
        long long v49 = v67;
        long long v52 = v68;
        long long v47 = v66;
        uint64_t v0 = v70;
LABEL_13:
        swift_release();
        swift_bridgeObjectRelease();
        long long v16 = v47;
        long long v15 = v49;
        long long v14 = v52;
        long long v13 = v56;
        goto LABEL_15;
      case 3uLL:
        long long v18 = *(_OWORD *)((v46 & 0x1FFFFFFFFFFFFFFFLL) + 0x20);
        long long v90 = *(_OWORD *)((v46 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
        long long v91 = v18;
        long long v92 = *(_OWORD *)((v46 & 0x1FFFFFFFFFFFFFFFLL) + 0x30);
        uint64_t v93 = *(void *)((v46 & 0x1FFFFFFFFFFFFFFFLL) + 0x40);
        ByteBuffer.readAvroRecord(_:)();
        long long v13 = v74;
        long long v14 = v73;
        long long v15 = v72;
        long long v16 = v71;
        uint64_t v0 = v75;
        goto LABEL_15;
      case 4uLL:
        uint64_t v30 = *(void *)((v46 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
        unint64_t v31 = sub_100177A7C();
        if (!v31) {
          goto LABEL_33;
        }
        if (v31[2] > 0xAuLL)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_34:
          swift_bridgeObjectRelease();
          swift_release();
          goto LABEL_35;
        }
        unint64_t v32 = sub_100177E68((uint64_t)v31);
        uint64_t v33 = -(uint64_t)(v32 & 1) ^ (v32 >> 1);
        if (v33 < 0 || v33 >= *(void *)(v30 + 16)) {
          goto LABEL_33;
        }
        uint64_t v53 = v12;
        uint64_t v34 = *(void *)(v30 + 8 * v33 + 32);
        swift_retain();
        ByteBuffer.readAvroValue(_:)(v76, v34);
        unint64_t v19 = v76[1];
        *(void *)&long long v56 = v76[0];
        uint64_t v20 = (void *)v76[3];
        unint64_t v50 = v76[2];
        uint64_t v0 = v76[4];
        unint64_t v1 = v76[5];
        unint64_t v2 = v76[6];
        uint64_t v3 = v76[7];
        char v35 = v77;
        sub_100179C1C((uint64_t)v76, (uint64_t)__src);
        if (__src[64] != 255)
        {
          memcpy(v89, __src, 0x41uLL);
          uint64_t v36 = swift_bridgeObjectRetain();
          sub_10017B43C(v36, (uint64_t)v89, v33, (uint64_t)v78);
          swift_release();
          uint64_t v21 = v79;
          unint64_t v19 = v80;
          uint64_t v22 = v81;
          uint64_t v23 = v83;
          unint64_t v1 = v84;
          uint64_t v24 = v85;
          uint64_t v3 = v86;
          uint64_t v0 = v87;
          sub_10016AE48(v79, v80, v81, v82, v83, v84, v85, v86, v87);
          sub_10016B03C((uint64_t)v78);
          sub_10002B998();
          long long v12 = v53;
          goto LABEL_17;
        }
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        uint64_t v42 = v56;
        unint64_t v43 = v50;
LABEL_37:
        uint64_t v41 = v55;
LABEL_38:
        *(void *)uint64_t v41 = v42;
        *(void *)(v41 + 8) = v19;
        *(void *)(v41 + 16) = v43;
        *(void *)(v41 + 24) = v20;
        *(void *)(v41 + 32) = v0;
        *(void *)(v41 + 40) = v1;
        *(void *)(v41 + 48) = v2;
        *(void *)(v41 + 56) = v3;
        *(unsigned char *)(v41 + 64) = v35;
        sub_10000DFB8();
        return;
      default:
        ByteBuffer.readAvroPrimitive(_:)(v59, *(unsigned __int8 *)(v46 + 16));
        long long v14 = v59[2];
        long long v13 = v59[3];
        long long v16 = v59[0];
        long long v15 = v59[1];
        uint64_t v0 = v60;
LABEL_15:
        unint64_t v19 = *((void *)&v16 + 1);
        uint64_t v20 = (void *)*((void *)&v15 + 1);
        unint64_t v1 = *((void *)&v14 + 1);
        uint64_t v3 = *((void *)&v13 + 1);
        if (v0 == 255)
        {
          unint64_t v57 = v13;
          unint64_t v51 = v15;
          uint64_t v54 = v14;
          uint64_t v48 = v16;
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v42 = v48;
          unint64_t v43 = v51;
          uint64_t v0 = v54;
          unint64_t v2 = v57;
          goto LABEL_36;
        }
        uint64_t v21 = v16;
        uint64_t v22 = v15;
        uint64_t v23 = v14;
        uint64_t v24 = v13;
        sub_10002B998();
LABEL_17:
        uint64_t v25 = v1;
        unint64_t v1 = v19;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_100179788();
          long long v12 = v37;
        }
        unint64_t v27 = v12[2];
        unint64_t v26 = v12[3];
        uint64_t v28 = v12;
        if (v27 >= v26 >> 1)
        {
          sub_100093098(v26);
          sub_100179788();
          uint64_t v28 = v38;
        }
        v28[2] = v27 + 1;
        long long v12 = v28;
        uint64_t v29 = &v28[9 * v27];
        v29[4] = v21;
        v29[5] = v1;
        v29[6] = v22;
        v29[7] = v56;
        v29[8] = v23;
        v29[9] = v25;
        v29[10] = v24;
        v29[11] = v3;
        *((unsigned char *)v29 + 96) = v0;
        sub_100093A68(v21, v1, v22, v56, v23, v25, v24, v3, v0);
        unint64_t v2 = v58 - 1;
        if (v58 == 1) {
          goto LABEL_30;
        }
        continue;
    }
  }
}

void ByteBuffer.readAvroMap(_:)()
{
  sub_10000DFE0();
  unint64_t v1 = v0;
  uint64_t v47 = v2;
  uint64_t v43 = v3;
  uint64_t v5 = v4;
  if (!sub_100177A7C()) {
    goto LABEL_27;
  }
  sub_100179E50();
  if (v7)
  {
LABEL_26:
    swift_bridgeObjectRelease();
LABEL_27:
    sub_10017A3E4();
    goto LABEL_28;
  }
  unint64_t v8 = sub_100177E68(v6);
  unint64_t v9 = -(uint64_t)(v8 & 1) ^ (v8 >> 1);
  uint64_t v48 = v1 & 0x1FFFFFFFFFFFFFFFLL;
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v10 = Dictionary.init(dictionaryLiteral:)();
  unint64_t v50 = v9;
  if ((v9 & 0x8000000000000000) != 0) {
    goto LABEL_31;
  }
  uint64_t v49 = v10;
  if (v9)
  {
    uint64_t v42 = (uint64_t *)(v48 + 16);
    uint64_t v45 = v5;
    unint64_t v46 = v1 >> 61;
    unint64_t v44 = v1;
    while (v50)
    {
      if (!sub_100177A7C()) {
        goto LABEL_25;
      }
      sub_100179E50();
      if (v7) {
        goto LABEL_24;
      }
      unint64_t v12 = sub_100177E68(v11);
      Swift::String_optional v13 = ByteBuffer.readString(length:)(-(uint64_t)(v12 & 1) ^ (v12 >> 1));
      if (!v13.value._object) {
        goto LABEL_25;
      }
      switch(v46)
      {
        case 1uLL:
          uint64_t v19 = *(void *)(v48 + 16);
          sub_10017A024();
          swift_bridgeObjectRetain();
          ByteBuffer.readAvroArray(_:)(v19);
          long long v51 = v61;
          long long v53 = v62;
          long long v55 = v63;
          long long v57 = v64;
          int v18 = v65;
          goto LABEL_14;
        case 2uLL:
          uint64_t v20 = *(void *)(v48 + 16);
          sub_10017A024();
          swift_bridgeObjectRetain();
          ByteBuffer.readAvroMap(_:)(v20);
          long long v51 = v66;
          long long v53 = v67;
          long long v55 = v68;
          long long v57 = v69;
          int v18 = v70;
LABEL_14:
          swift_release();
          swift_bridgeObjectRelease();
          long long v16 = v55;
          long long v17 = v57;
          long long v14 = v51;
          long long v15 = v53;
          break;
        case 3uLL:
          long long v21 = *(_OWORD *)(v48 + 32);
          long long v80 = *(_OWORD *)v42;
          long long v81 = v21;
          long long v82 = *(_OWORD *)(v48 + 48);
          uint64_t v83 = *(void *)(v48 + 64);
          ByteBuffer.readAvroRecord(_:)();
          long long v14 = v71;
          long long v15 = v72;
          long long v16 = v73;
          long long v17 = v74;
          int v18 = v75;
          break;
        case 4uLL:
          ByteBuffer.readAvroUnion(_:)(*v42, (uint64_t)v76);
          long long v14 = v76[0];
          long long v15 = v76[1];
          long long v16 = v76[2];
          long long v17 = v76[3];
          int v18 = v77;
          break;
        default:
          ByteBuffer.readAvroPrimitive(_:)(v59, *(unsigned __int8 *)(v1 + 16));
          long long v14 = v59[0];
          long long v15 = v59[1];
          long long v16 = v59[2];
          long long v17 = v59[3];
          int v18 = v60;
          break;
      }
      if (v18 == 255)
      {
LABEL_24:
        swift_bridgeObjectRelease();
        goto LABEL_25;
      }
      v78[0] = v14;
      v78[1] = v15;
      v78[2] = v16;
      v78[3] = v17;
      char v79 = v18;
      long long v52 = v14;
      long long v54 = v15;
      long long v56 = v16;
      long long v58 = v17;
      swift_retain();
      char v22 = sub_100163384((uint64_t)v78, v1);
      swift_release();
      if ((v22 & 1) == 0)
      {
        unint64_t v1 = v48;
        swift_retain();
        AvroValue.schema.getter();
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        sub_100179C84(v52, *((unint64_t *)&v52 + 1), v54, SBYTE8(v54), v56, *((uint64_t *)&v56 + 1), v58, *((uint64_t *)&v58 + 1), v18);
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        sub_10017A3E4();
        uint64_t v5 = v45;
        goto LABEL_28;
      }
      swift_bridgeObjectRetain();
      sub_10017A530();
      sub_100179C9C(v23, v24, v25, v26, v27, *((uint64_t *)&v56 + 1), v28, *((uint64_t *)&v58 + 1), v18);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      sub_100179A64(v78, v13.value._countAndFlagsBits, (uint64_t)v13.value._object, isUniquelyReferenced_nonNull_native);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_10017A530();
      unint64_t v1 = v44;
      sub_100179C84(v30, v31, v32, v33, v34, *((uint64_t *)&v56 + 1), v58, *((uint64_t *)&v58 + 1), v18);
      swift_bridgeObjectRelease();
      BOOL v35 = v50-- == 1;
      uint64_t v5 = v45;
      if (v35) {
        goto LABEL_21;
      }
    }
    __break(1u);
LABEL_31:
    __break(1u);
    JUMPOUT(0x100178C20);
  }
LABEL_21:
  uint64_t v36 = sub_100179564();
  if ((v37 & 1) != 0 || v36)
  {
LABEL_25:
    swift_bridgeObjectRelease();
    swift_release();
    goto LABEL_26;
  }
  char v38 = 2;
  uint64_t v39 = v47;
  uint64_t v40 = v43;
  uint64_t v41 = v49;
LABEL_28:
  *(void *)uint64_t v5 = v40;
  *(void *)(v5 + 8) = v39;
  *(void *)(v5 + 16) = v1;
  *(void *)(v5 + 24) = v41;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(unsigned char *)(v5 + 64) = v38;
  sub_10000DFB8();
}

void ByteBuffer.readAvroRecord(_:)()
{
  sub_10000DFE0();
  uint64_t v92 = v0;
  uint64_t v3 = (SwiftAvro::AvroRecordSchema *)v2;
  uint64_t v87 = v4;
  sub_100093F9C(v2);
  AvroRecord.init(schema:)(&v104, v3);
  uint64_t countAndFlagsBits = v104.schema.type._countAndFlagsBits;
  uint64_t object = (uint64_t)v104.schema.type._object;
  uint64_t v8 = v104.schema.name._countAndFlagsBits;
  char v7 = v104.schema.name._object;
  uint64_t v10 = v104.schema.namespace.value._countAndFlagsBits;
  uint64_t v9 = (uint64_t)v104.schema.namespace.value._object;
  uint64_t rawValue = v104.schema.fields._rawValue;
  uint64_t v11 = v104.fields._rawValue;
  Swift::String_optional v13 = v3->fields._rawValue;
  Swift::Int v133 = v13;
  unint64_t v14 = v13[2];
  if (!v14)
  {
LABEL_42:
    char v74 = 3;
    goto LABEL_49;
  }
  uint64_t v80 = v104.schema.namespace.value._countAndFlagsBits;
  uint64_t v81 = v104.schema.name._countAndFlagsBits;
  uint64_t v82 = v104.schema.type._countAndFlagsBits;
  uint64_t v83 = v104.schema.name._object;
  unint64_t v84 = v104.schema.type._object;
  uint64_t v85 = v104.schema.namespace.value._object;
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_54;
  }
LABEL_3:
  uint64_t v15 = 0;
  uint64_t v90 = (uint64_t)v11;
  uint64_t v91 = (uint64_t)(v13 + 4);
  uint64_t v88 = v14;
  uint64_t v89 = (uint64_t)v11 + 32;
  uint64_t v86 = (uint64_t)(rawValue + 8);
  while (2)
  {
    if (v15 == v14) {
      goto LABEL_52;
    }
    long long v16 = (void **)(v91 + 24 * v15);
    uint64_t v11 = *v16;
    unint64_t v17 = (unint64_t)v16[2];
    int v18 = (void *)(v15 + 1);
    uint64_t v100 = v17;
    uint64_t v103 = v16[1];
    uint64_t v93 = (uint64_t)v18;
    switch(v17 >> 61)
    {
      case 1uLL:
        sub_10017A104();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_bridgeObjectRetain();
        uint64_t v25 = sub_10017A6A8();
        ByteBuffer.readAvroArray(_:)(v25);
        long long v102 = v110;
        long long v97 = v108;
        long long v99 = v109;
        long long v95 = v107;
        int v26 = v111;
        goto LABEL_9;
      case 2uLL:
        sub_10017A104();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_bridgeObjectRetain();
        uint64_t v27 = sub_10017A6A8();
        ByteBuffer.readAvroMap(_:)(v27);
        long long v102 = v115;
        long long v97 = v113;
        long long v99 = v114;
        long long v95 = v112;
        int v26 = v116;
LABEL_9:
        swift_release();
        swift_bridgeObjectRelease();
        long long v23 = v95;
        long long v22 = v97;
        long long v21 = v99;
        long long v20 = v102;
        int v24 = v26;
        goto LABEL_11;
      case 3uLL:
        long long v28 = *(_OWORD *)((v17 & 0x1FFFFFFFFFFFFFFFLL) + 0x20);
        v136[0] = *(_OWORD *)((v17 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
        v136[1] = v28;
        v136[2] = *(_OWORD *)((v17 & 0x1FFFFFFFFFFFFFFFLL) + 0x30);
        uint64_t v137 = *(void *)((v17 & 0x1FFFFFFFFFFFFFFFLL) + 0x40);
        swift_bridgeObjectRetain();
        swift_retain();
        ByteBuffer.readAvroRecord(_:)(v117, v136);
        long long v20 = v117[3];
        long long v21 = v117[2];
        long long v22 = v117[1];
        long long v23 = v117[0];
        int v24 = v118;
        goto LABEL_11;
      case 4uLL:
        uint64_t v33 = v17 & 0x1FFFFFFFFFFFFFFFLL;
        uint64_t v50 = *(void *)((v17 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
        swift_bridgeObjectRetain();
        swift_retain();
        uint64_t object = v92;
        long long v51 = sub_100177A7C();
        if (!v51) {
          goto LABEL_44;
        }
        if (v51[2] > 0xAuLL)
        {
          swift_release();
          swift_bridgeObjectRelease();
          goto LABEL_46;
        }
        unint64_t v52 = sub_100177E68((uint64_t)v51);
        uint64_t v53 = -(uint64_t)(v52 & 1) ^ (v52 >> 1);
        if ((v53 & 0x8000000000000000) == 0 && v53 < *(void *)(v50 + 16))
        {
          uint64_t v79 = v17 & 0x1FFFFFFFFFFFFFFFLL;
          uint64_t v98 = rawValue;
          uint64_t v96 = v11;
          uint64_t v54 = *(void *)(v50 + 8 * v53 + 32);
          swift_retain();
          ByteBuffer.readAvroValue(_:)(v119, v54);
          uint64_t v78 = v119[0];
          uint64_t v55 = v119[1];
          uint64_t v1 = v119[2];
          int v18 = (void *)v119[3];
          uint64_t v33 = v119[4];
          uint64_t v101 = v119[5];
          unint64_t v56 = v119[6];
          uint64_t v11 = (void *)v119[7];
          char v57 = v120;
          sub_100179C1C((uint64_t)v119, (uint64_t)__src);
          if (__src[64] == 255)
          {
            char v74 = v57;
            unint64_t v17 = v56;
            uint64_t object = v55;
            uint64_t v50 = v78;
            swift_release();
            swift_bridgeObjectRelease();
            swift_release();
            goto LABEL_48;
          }
          memcpy(__dst, __src, 0x41uLL);
          uint64_t v58 = swift_bridgeObjectRetain();
          sub_10017B43C(v58, (uint64_t)__dst, v53, (uint64_t)v121);
          swift_release();
          uint64_t v29 = v122;
          uint64_t object = v123;
          uint64_t v31 = v124;
          uint64_t v59 = v125;
          uint64_t v33 = v126;
          uint64_t v60 = v127;
          uint64_t v61 = v128;
          uint64_t v62 = v129;
          char v63 = v130;
          sub_10016AE48(v122, v123, v124, v125, v126, v127, v128, v129, v130);
          sub_10016B03C((uint64_t)v121);
          LOBYTE(v24) = v63;
          uint64_t v32 = v60;
          uint64_t v35 = v62;
          uint64_t v34 = v61;
          uint64_t v30 = v59;
          uint64_t v36 = (uint64_t)v103;
          uint64_t v11 = v96;
          uint64_t rawValue = v98;
LABEL_13:
          v134[0] = v29;
          v134[1] = object;
          uint64_t v1 = v31;
          v134[2] = v31;
          v134[3] = v30;
          v134[4] = v33;
          v134[5] = v32;
          uint64_t v101 = v32;
          *(void *)&long long v99 = v34;
          v134[6] = v34;
          v134[7] = v35;
          *(void *)&long long v97 = v35;
          char v135 = v24;
          Swift::String_optional v13 = rawValue;
          uint64_t v37 = rawValue[2];
          if (!v37) {
            goto LABEL_41;
          }
          BOOL v38 = (void *)rawValue[4] == v11 && rawValue[5] == v36;
          if (v38 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            unint64_t v14 = 0;
          }
          else
          {
            uint64_t v36 = (uint64_t)v103;
            if (v37 == 1) {
              goto LABEL_41;
            }
            uint64_t rawValue = (void *)v86;
            unint64_t v14 = 1;
            while ((void *)*(rawValue - 1) != v11 || *rawValue != v36)
            {
              char v48 = _stringCompareWithSmolCheck(_:_:expecting:)();
              uint64_t v36 = (uint64_t)v103;
              if (v48) {
                break;
              }
              unint64_t v49 = v14 + 1;
              if (__OFADD__(v14, 1))
              {
                __break(1u);
LABEL_52:
                __break(1u);
LABEL_53:
                __break(1u);
LABEL_54:
                sub_10017FEF0();
                uint64_t v11 = v75;
                goto LABEL_3;
              }
              rawValue += 3;
              ++v14;
              if (v49 == v37) {
                goto LABEL_41;
              }
            }
            uint64_t rawValue = v13;
            if ((v14 & 0x8000000000000000) != 0)
            {
              __break(1u);
LABEL_41:
              uint64_t v64 = v36;
              sub_100179CE0();
              swift_allocError();
              *unsigned __int8 v65 = v11;
              v65[1] = v64;
              swift_bridgeObjectRetain();
              uint64_t v66 = swift_willThrow();
              sub_100179DA8(v66, v67, v68, v69, v70, v71, v72, v73, v76, v77, v78, v79, v80, v81, v82, (uint64_t)v83, (uint64_t)v84, (uint64_t)v85, v86,
                v87,
                v88,
                v89,
                v90,
                v91,
                v92,
                v93,
                v33,
                *((uint64_t *)&v95 + 1),
                v97,
                *((uint64_t *)&v97 + 1),
                v99,
                *((uint64_t *)&v99 + 1),
                v100,
                0,
                v101);
              swift_bridgeObjectRelease();
              swift_release();
              sub_100179CB4((uint64_t)&v133);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_errorRelease();
              uint64_t countAndFlagsBits = 0;
              uint64_t object = 0;
              uint64_t v8 = 0;
              char v7 = 0;
              uint64_t v10 = 0;
              uint64_t v9 = 0;
              uint64_t rawValue = 0;
              uint64_t v11 = 0;
              char v74 = -1;
              goto LABEL_49;
            }
          }
          uint64_t v11 = (void *)v90;
          if (v14 >= *(void *)(v90 + 16)) {
            goto LABEL_53;
          }
          uint64_t v39 = AvroValue.update(_:)(v134);
          sub_100179DA8(v39, v40, v41, v42, v43, v44, v45, v46, v76, v77, v78, v79, v80, v81, v82, (uint64_t)v83, (uint64_t)v84, (uint64_t)v85, v86,
            v87,
            v88,
            v89,
            v90,
            v91,
            v92,
            v93,
            v33,
            *((uint64_t *)&v95 + 1),
            v97,
            *((uint64_t *)&v97 + 1),
            v99,
            *((uint64_t *)&v99 + 1),
            v100,
            0,
            v101);
          swift_bridgeObjectRelease();
          swift_release();
          unint64_t v14 = v88;
          uint64_t v15 = v94;
          if (v94 == v88)
          {
            sub_100179CB4((uint64_t)&v133);
            uint64_t object = (uint64_t)v84;
            uint64_t v9 = (uint64_t)v85;
            uint64_t countAndFlagsBits = v82;
            char v7 = v83;
            uint64_t v10 = v80;
            uint64_t v8 = v81;
            goto LABEL_42;
          }
          continue;
        }
LABEL_44:
        swift_release();
LABEL_46:
        swift_bridgeObjectRelease();
        sub_100179E5C();
LABEL_47:
        char v74 = -1;
LABEL_48:
        sub_100179CB4((uint64_t)&v133);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v9 = v101;
        uint64_t countAndFlagsBits = v50;
        uint64_t v8 = v1;
        char v7 = v18;
        uint64_t v10 = v33;
        uint64_t rawValue = (void *)v17;
LABEL_49:
        *(void *)uint64_t v87 = countAndFlagsBits;
        *(void *)(v87 + 8) = object;
        *(void *)(v87 + 16) = v8;
        *(void *)(v87 + 24) = v7;
        *(void *)(v87 + 32) = v10;
        *(void *)(v87 + 40) = v9;
        *(void *)(v87 + 48) = rawValue;
        *(void *)(v87 + 56) = v11;
        *(unsigned char *)(v87 + 64) = v74;
        sub_10000DFB8();
        return;
      default:
        uint64_t v19 = *(unsigned __int8 *)(v17 + 16);
        swift_retain();
        swift_bridgeObjectRetain();
        ByteBuffer.readAvroPrimitive(_:)(v105, v19);
        long long v21 = v105[2];
        long long v20 = v105[3];
        long long v23 = v105[0];
        long long v22 = v105[1];
        int v24 = v106;
LABEL_11:
        uint64_t object = *((void *)&v23 + 1);
        uint64_t v29 = v23;
        uint64_t v30 = *((void *)&v22 + 1);
        uint64_t v31 = v22;
        uint64_t v32 = *((void *)&v21 + 1);
        uint64_t v33 = v21;
        uint64_t v35 = *((void *)&v20 + 1);
        uint64_t v34 = v20;
        if (v24 == 255)
        {
          uint64_t v11 = (void *)*((void *)&v20 + 1);
          unint64_t v17 = v20;
          int v18 = (void *)*((void *)&v22 + 1);
          uint64_t v1 = v22;
          uint64_t v50 = v23;
          uint64_t v101 = *((void *)&v21 + 1);
          swift_bridgeObjectRelease();
          swift_release();
          goto LABEL_47;
        }
        uint64_t v36 = (uint64_t)v103;
        goto LABEL_13;
    }
  }
}

void ByteBuffer.readAvroUnion(_:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (!sub_100177A7C()) {
    goto LABEL_5;
  }
  sub_100179E50();
  if (v10)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    a1 = 0;
    uint64_t v2 = 0;
    uint64_t v3 = 0;
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    char v13 = -1;
    goto LABEL_6;
  }
  uint64_t v11 = 0;
  char v13 = -1;
  unint64_t v14 = sub_100177E68(v9);
  if (((-(uint64_t)(v14 & 1) ^ (v14 >> 1)) & 0x8000000000000000) != 0)
  {
    sub_10017A09C();
  }
  else
  {
    sub_10017A09C();
    if (v15 < v17)
    {
      uint64_t v29 = v15;
      uint64_t v18 = *(void *)(v16 + 8 * v15 + 32);
      swift_retain();
      ByteBuffer.readAvroValue(_:)(v30, v18);
      uint64_t v11 = v30[0];
      uint64_t v19 = v30[1];
      a1 = v30[2];
      uint64_t v2 = v30[3];
      uint64_t v3 = v30[4];
      uint64_t v4 = v30[5];
      uint64_t v5 = v30[6];
      uint64_t v6 = v30[7];
      char v13 = v31;
      sub_100179C1C((uint64_t)v30, (uint64_t)__src);
      if (__src[64] == 255)
      {
        swift_release();
      }
      else
      {
        memcpy(__dst, __src, 0x41uLL);
        uint64_t v20 = swift_bridgeObjectRetain();
        sub_10017B43C(v20, (uint64_t)__dst, v29, (uint64_t)v32);
        swift_release();
        uint64_t v11 = v33;
        uint64_t v19 = v34;
        a1 = v35;
        uint64_t v2 = v36;
        uint64_t v3 = v37;
        uint64_t v4 = v38;
        uint64_t v5 = v39;
        uint64_t v6 = v40;
        char v13 = v41;
        char v28 = v41;
        sub_10017A1E4();
        sub_10016AE48(v21, v22, v23, v24, v25, v26, v27, v6, v28);
        sub_10016B03C((uint64_t)v32);
      }
      uint64_t v12 = v19;
    }
  }
LABEL_6:
  *(void *)a2 = v11;
  *(void *)(a2 + 8) = v12;
  *(void *)(a2 + 16) = a1;
  *(void *)(a2 + 24) = v2;
  *(void *)(a2 + 32) = v3;
  *(void *)(a2 + 40) = v4;
  *(void *)(a2 + 48) = v5;
  *(void *)(a2 + 56) = v6;
  *(unsigned char *)(a2 + 64) = v13;
}

void *sub_100179564()
{
  Swift::Int result = sub_100177A7C();
  if (result)
  {
    sub_100179E50();
    if (v2)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
    else
    {
      unint64_t v3 = sub_100177E68(v1);
      return (void *)(-(uint64_t)(v3 & 1) ^ (v3 >> 1));
    }
  }
  return result;
}

unint64_t sub_1001795AC(unint64_t result, char a2, uint64_t a3)
{
  if (a2)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(void *)(a3 + 16) > result)
    {
      return result;
    }
    __break(1u);
  }
  return result;
}

void sub_1001795CC()
{
  sub_10002CEAC();
  if (v3)
  {
    sub_1000212E4();
    if (v5 != v6)
    {
      sub_10002A3A8();
      if (v5)
      {
        __break(1u);
        return;
      }
      sub_1000268F0();
    }
  }
  else
  {
    int64_t v4 = v2;
  }
  int64_t v7 = *((void *)v0 + 2);
  if (v4 <= v7) {
    int64_t v8 = *((void *)v0 + 2);
  }
  else {
    int64_t v8 = v4;
  }
  if (v8)
  {
    sub_10002572C(&qword_1002240B8);
    uint64_t v9 = (char *)swift_allocObject();
    size_t v10 = j__malloc_size(v9);
    *((void *)v9 + 2) = v7;
    *((void *)v9 + 3) = 2 * v10 - 64;
  }
  else
  {
    uint64_t v9 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v11 = v9 + 32;
  uint64_t v12 = v0 + 32;
  if (v1)
  {
    if (v9 != v0 || &v12[v7] <= v11) {
      memmove(v11, v12, v7);
    }
    *((void *)v0 + 2) = 0;
  }
  else
  {
    memcpy(v11, v12, v7);
  }
  swift_bridgeObjectRelease();
}

void sub_1001796A0()
{
  sub_10002CEAC();
  if (v3)
  {
    sub_1000212E4();
    if (v5 != v6)
    {
      sub_10002A3A8();
      if (v5)
      {
        __break(1u);
        return;
      }
      sub_1000268F0();
    }
  }
  else
  {
    uint64_t v4 = v2;
  }
  uint64_t v7 = *((void *)v0 + 2);
  if (v4 <= v7) {
    uint64_t v8 = *((void *)v0 + 2);
  }
  else {
    uint64_t v8 = v4;
  }
  if (v8)
  {
    sub_10002572C(&qword_1002240C0);
    uint64_t v9 = (char *)swift_allocObject();
    size_t v10 = j__malloc_size(v9);
    sub_10017A688(v10);
  }
  else
  {
    uint64_t v9 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v11 = v9 + 32;
  uint64_t v12 = v0 + 32;
  if (v1)
  {
    if (v9 != v0 || &v12[24 * v7] <= v11) {
      memmove(v11, v12, 24 * v7);
    }
    *((void *)v0 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
}

void sub_100179788()
{
  sub_10002CEAC();
  if (v3)
  {
    sub_1000212E4();
    if (v5 != v6)
    {
      sub_10002A3A8();
      if (v5)
      {
        __break(1u);
        return;
      }
      sub_1000268F0();
    }
  }
  else
  {
    uint64_t v4 = v2;
  }
  uint64_t v7 = *((void *)v0 + 2);
  if (v4 <= v7) {
    uint64_t v8 = *((void *)v0 + 2);
  }
  else {
    uint64_t v8 = v4;
  }
  if (v8)
  {
    sub_10002572C(&qword_1002240D0);
    uint64_t v9 = (char *)swift_allocObject();
    size_t v10 = j__malloc_size(v9);
    sub_10017A688(v10);
  }
  else
  {
    uint64_t v9 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v11 = v9 + 32;
  uint64_t v12 = v0 + 32;
  if (v1)
  {
    if (v9 != v0 || &v12[72 * v7] <= v11) {
      memmove(v11, v12, 72 * v7);
    }
    *((void *)v0 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
}

char *sub_100179870(char *__src, uint64_t a2, char *__dst)
{
  if (__dst != __src || &__src[72 * a2] <= __dst) {
    return (char *)memmove(__dst, __src, 72 * a2);
  }
  return __src;
}

uint64_t sub_1001798A0()
{
  return sub_1001798E8((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1001795CC);
}

uint64_t sub_1001798B8()
{
  return sub_1001798E8((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1001796A0);
}

uint64_t sub_1001798D0()
{
  return sub_1001798E8((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100179788);
}

uint64_t sub_1001798E8(uint64_t (*a1)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v3 = *v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *char v1 = v3;
  if (!result)
  {
    uint64_t result = a1(result, *(void *)(v3 + 16) + 1, 1, v3);
    *char v1 = result;
  }
  return result;
}

uint64_t sub_100179944(uint64_t a1)
{
  return sub_10017998C(a1, (uint64_t (*)(BOOL))sub_1001795CC);
}

uint64_t sub_10017995C(uint64_t a1)
{
  return sub_10017998C(a1, (uint64_t (*)(BOOL))sub_1001796A0);
}

uint64_t sub_100179974(uint64_t a1)
{
  return sub_10017998C(a1, (uint64_t (*)(BOOL))sub_100179788);
}

uint64_t sub_10017998C(uint64_t result, uint64_t (*a2)(BOOL))
{
  unint64_t v3 = *(void *)(*(void *)v2 + 24);
  if (result + 1 > (uint64_t)(v3 >> 1))
  {
    uint64_t result = a2(v3 > 1);
    *(void *)uint64_t v2 = result;
  }
  return result;
}

uint64_t sub_1001799D4(void *a1, uint64_t a2, uint64_t a3)
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v9 = *v3;
  *unint64_t v3 = 0x8000000000000000;
  sub_100179A64(a1, a2, a3, isUniquelyReferenced_nonNull_native);
  *unint64_t v3 = v9;

  return swift_bridgeObjectRelease();
}

uint64_t sub_100179A64(void *a1, uint64_t a2, uint64_t a3, char a4)
{
  char v5 = (void **)v4;
  size_t v10 = (void *)*v4;
  unint64_t v11 = sub_1000287F0(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v12 & 1) == 0;
  Swift::Int v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_13;
  }
  unint64_t v16 = v11;
  char v17 = v12;
  sub_10002572C(&qword_1002240C8);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v15)) {
    goto LABEL_5;
  }
  unint64_t v18 = sub_1000287F0(a2, a3);
  if ((v17 & 1) != (v19 & 1))
  {
LABEL_13:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v16 = v18;
LABEL_5:
  uint64_t v20 = *v5;
  if (v17)
  {
    uint64_t v21 = v20[7] + 72 * v16;
    return sub_100179D2C((uint64_t)a1, v21);
  }
  else
  {
    sub_100185F0C(v16, a2, a3, a1, v20);
    return swift_bridgeObjectRetain();
  }
}

void *sub_100179B9C(unsigned char *a1, unsigned char *a2)
{
  if (!a1) {
    return _swiftEmptyArrayStorage;
  }
  size_t v4 = a2 - a1;
  if (a2 == a1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t result = sub_100109644(a2 - a1, 0);
  if (a2 && a1 < a2)
  {
    if ((v4 & 0x8000000000000000) == 0)
    {
      char v5 = result;
      memmove(result + 4, a1, v4);
      return v5;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100179C1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10002572C(&qword_1002240A8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100179C84(uint64_t result, unint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  if (a9 != 255) {
    return sub_100093A68(result, a2, a3, a4, a5, a6, a7, a8, a9);
  }
  return result;
}

uint64_t sub_100179C9C(uint64_t result, unint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  if (a9 != 255) {
    return sub_10016AE48(result, a2, a3, a4, a5, a6, a7, a8, a9);
  }
  return result;
}

uint64_t sub_100179CB4(uint64_t a1)
{
  return a1;
}

unint64_t sub_100179CE0()
{
  unint64_t result = qword_1002240B0;
  if (!qword_1002240B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002240B0);
  }
  return result;
}

uint64_t sub_100179D2C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100179D88(uint64_t a1, unint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_100093A68(a1, a2, a3, a4, v12, v11, v10, v9, a9);
}

uint64_t sub_100179DA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  return sub_100093A68(v37, v39, v38, v35, a27, a35, a31, a29, v36);
}

uint64_t sub_100179DDC()
{
  return v0;
}

uint64_t sub_100179E1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v17 = *(void *)(v9 + 400);
  return sub_10016AE48(a1, v15, v11, v12, v17, v14, v10, v13, a9);
}

void sub_100179E80()
{
  uint64_t v3 = *(void *)(v0 + 480);
  *(void *)(v3 + 16) = v1 + 1;
  *(unsigned char *)(v3 + v1 + 32) = v2;
}

uint64_t sub_100179EA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_100093A68(v10, v16, v14, v12, v9, v11, v15, v13, a9);
}

uint64_t sub_100179ED4()
{
  return Data._Representation.append(contentsOf:)();
}

uint64_t sub_100179EF0(uint64_t result)
{
  *(void *)(v1 + 224) = result;
  return result;
}

void sub_100179F14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_100065744(0, 1, 1, a4);
}

uint64_t sub_100179F30(uint64_t a1, unint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_100093A68(a1, a2, a3, a4, a5, a6, v9, v10, a9);
}

uint64_t sub_100179F48()
{
  return v0;
}

uint64_t sub_100179F68()
{
  return v0;
}

size_t sub_100179F7C(const void *a1)
{
  *(void *)(v1 + 216) = v2;
  return j__malloc_size(a1);
}

uint64_t sub_100179FB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  unint64_t v14 = v9[48];
  uint64_t v15 = v9[49];
  uint64_t v16 = v9[51];
  uint64_t v17 = v9[52];
  return sub_10016AE48(a1, v14, v12, v15, v11, v10, v16, v17, a9);
}

uint64_t sub_100179FE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_100093A68(a1, v9, v11, v13, v14, v10, v15, v12, a9);
}

uint64_t sub_10017A00C()
{
  return v0;
}

uint64_t sub_10017A024()
{
  return swift_retain();
}

uint64_t sub_10017A040(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_10016AE48(a1, a2, a3, v10, v13, v11, v12, v9, a9);
}

void *sub_10017A0EC(uint64_t a1)
{
  unint64_t v2 = (2 * a1) ^ (a1 >> 63);
  return sub_1001777D8(v2);
}

uint64_t sub_10017A104()
{
  return swift_retain();
}

uint64_t sub_10017A12C()
{
  uint64_t v2 = *(void *)(v0 + 480);
  *(void *)(v2 + 16) = v1 + 1;
  *(unsigned char *)(v2 + v1 + 32) = 0;
  return v2;
}

uint64_t sub_10017A148()
{
  return sub_1001798E8(v0);
}

uint64_t sub_10017A160()
{
  return v0;
}

uint64_t sub_10017A16C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v12 = v9[32];
  uint64_t v13 = v9[33];
  uint64_t v14 = v9[48];
  return sub_10016AE48(v12, a2, a3, v14, v13, v10, a7, a8, a9);
}

Swift::Int sub_10017A194()
{
  *((void *)v0._rawValue + 2) = v1;
  *((unsigned char *)v0._rawValue + v2 + 32) = 0;
  return ByteBuffer.writeBytes(_:)(v0);
}

uint64_t sub_10017A1BC()
{
  return v0;
}

uint64_t sub_10017A1F0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X7>, uint64_t a4@<X8>)
{
  v4[35] = a2;
  v4[36] = a3;
  v4[29] = v5;
  v4[44] = a4;
  return sub_10002572C(a1);
}

uint64_t sub_10017A214(uint64_t result)
{
  *(void *)(v1 + 280) = result;
  return result;
}

uint64_t sub_10017A224(uint64_t a1, unint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  *(void *)(v9 + 184) = v10;
  return sub_10016AE48(a1, a2, a3, a4, a5, a6, v11, v10, a9);
}

uint64_t sub_10017A240(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_100093A68(a1, a2, a3, v13, v10, v11, v12, v9, a9);
}

uint64_t sub_10017A27C()
{
  return *(void *)(v0 + 16);
}

uint64_t sub_10017A294()
{
  return swift_retain();
}

uint64_t sub_10017A2D4()
{
  return v0;
}

void sub_10017A2E4(unint64_t a1@<X8>)
{
  sub_100065744(a1 > 1, v2, 1, v1);
}

Swift::Int sub_10017A308(Swift::OpaquePointer a1)
{
  return ByteBuffer.writeBytes(_:)(a1);
}

void sub_10017A320()
{
  *(void *)(v0 + 160) = v1;
}

uint64_t sub_10017A330()
{
  return v0;
}

uint64_t sub_10017A348(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_10016AE48(a1, a2, a3, v11, v13, v12, v10, v9, a9);
}

uint64_t sub_10017A36C()
{
  return v0;
}

void sub_10017A38C()
{
  uint64_t v3 = *(void *)(v0 + 480);
  *(void *)(v3 + 16) = v1 + 1;
  *(unsigned char *)(v3 + v1 + 32) = v2;
}

uint64_t sub_10017A418()
{
  return v0;
}

void sub_10017A430(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v6[16] = a3;
  v6[17] = v5;
  v6[20] = v3;
  v6[23] = v4;
  v6[30] = v7;
}

uint64_t sub_10017A448()
{
  return v0;
}

uint64_t sub_10017A458()
{
  return v0;
}

uint64_t sub_10017A470()
{
  return v0;
}

void *sub_10017A48C()
{
  return sub_1001777D8(v0);
}

uint64_t sub_10017A4BC(uint64_t a1, unint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_100093A68(a1, a2, a3, a4, a5, a6, v10, v9, a9);
}

Swift::Int sub_10017A4E0()
{
  return sub_100177448(0);
}

uint64_t sub_10017A504()
{
  return *(void *)(v0 + 312);
}

uint64_t sub_10017A518()
{
  return sub_1000291B4(v1, v0);
}

uint64_t sub_10017A544()
{
  return v0;
}

uint64_t sub_10017A558()
{
  return sub_1000291B4(v1, v0);
}

uint64_t sub_10017A570()
{
  return v0;
}

uint64_t sub_10017A5AC(uint64_t a1, unint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v11 = *(void *)(v9 + 232);
  uint64_t v12 = *(void *)(v9 + 184);
  return sub_100093A68(a1, a2, a3, a4, a5, a6, v11, v12, a9);
}

uint64_t sub_10017A5CC()
{
  uint64_t result = 0;
  *(void *)(v1 + 16) = v0;
  return result;
}

uint64_t sub_10017A5F4()
{
  return v0;
}

uint64_t sub_10017A600()
{
  return *(void *)(v0 + 264);
}

uint64_t sub_10017A670()
{
  return sub_1000291B4(v1, v0);
}

uint64_t sub_10017A688(uint64_t result)
{
  *(void *)(v1 + 16) = v2;
  *(void *)(v1 + 24) = 2 * ((result - 32) / v3);
  return result;
}

uint64_t sub_10017A6A8()
{
  return v0;
}

void sub_10017A6D0()
{
  *(void *)(*(void *)(v0 + 480) + 16) = v1 + 1;
}

uint64_t sub_10017A6E4()
{
  uint64_t v2 = *(void *)(v0 + 480);
  *(void *)(v2 + 16) = v1 + 1;
  return v2 + 32;
}

uint64_t sub_10017A6F8()
{
  return *(void *)(*(void *)(v0 + 480) + 16);
}

uint64_t sub_10017A740()
{
  return sub_1000291B4(v1, v0);
}

uint64_t sub_10017A764()
{
  return v0;
}

void *sub_10017A7CC()
{
  return sub_1001777D8(v0);
}

uint64_t sub_10017A7F8(uint64_t a1)
{
  sub_10016AF60(a1, v3, v2, 6);
  return sub_100027BCC(v1, v4);
}

uint64_t sub_10017A830()
{
  return v0;
}

uint64_t sub_10017A844()
{
  return v0;
}

uint64_t sub_10017A858()
{
  return v0;
}

unint64_t AvroValue.schema.getter()
{
  sub_10016F9E8(v0, (uint64_t)&v29);
  sub_10016F9E8((uint64_t)&v29, (uint64_t)v38);
  switch(v41)
  {
    case 1:
      uint64_t v2 = *(void *)&v38[24];
      unint64_t v3 = (__n128 *)swift_allocObject();
      sub_1001826C4(v3, v4, v5, v6, v7, v8, v9, v10, v29, v30, v31, v32, v33, v34, v35, v36, v37, v11, *(unint64_t *)v38);
      unint64_t v13 = v12 | 0x2000000000000000;
      goto LABEL_6;
    case 2:
      uint64_t v2 = *(void *)&v38[24];
      uint64_t v14 = (__n128 *)swift_allocObject();
      sub_1001826C4(v14, v15, v16, v17, v18, v19, v20, v21, v29, v30, v31, v32, v33, v34, v35, v36, v37, v22, *(unint64_t *)v38);
      unint64_t v13 = v23 | 0x4000000000000000;
LABEL_6:
      *(void *)&long long v43 = v2;
      sub_100182598(v0, (void (*)(void, void, void, void, void, void, void, void, char))sub_10016AE48);
      sub_100179CB4((uint64_t)&v43);
      break;
    case 3:
      long long v43 = *(_OWORD *)v38;
      long long v44 = *(_OWORD *)&v38[16];
      long long v45 = v39;
      uint64_t v46 = v40;
      uint64_t v24 = swift_allocObject();
      long long v25 = *(_OWORD *)&v38[16];
      *(_OWORD *)(v24 + 16) = *(_OWORD *)v38;
      *(_OWORD *)(v24 + 32) = v25;
      *(_OWORD *)(v24 + 48) = v39;
      *(void *)(v24 + 64) = v40;
      unint64_t v13 = v24 | 0x6000000000000000;
      sub_100093F9C((uint64_t)&v43);
      break;
    case 4:
      uint64_t v26 = *(void *)(*(void *)v38 + 16);
      uint64_t v27 = swift_allocObject();
      *(void *)(v27 + 16) = v26;
      unint64_t v13 = v27 | 0x8000000000000000;
      swift_bridgeObjectRetain();
      break;
    default:
      v42[0] = *(_OWORD *)v38;
      *(long long *)((char *)v42 + 9) = *(_OWORD *)&v38[9];
      sub_10017AE60(v42, v47);
      sub_10017AE60(v47, &v43);
      char v1 = 6;
      switch(BYTE8(v44))
      {
        case 1:
          sub_100182598(v0, (void (*)(void, void, void, void, void, void, void, void, char))sub_100093A68);
          char v1 = 2;
          break;
        case 2:
          sub_100182598(v0, (void (*)(void, void, void, void, void, void, void, void, char))sub_100093A68);
          char v1 = 3;
          break;
        case 3:
          sub_100182598(v0, (void (*)(void, void, void, void, void, void, void, void, char))sub_100093A68);
          char v1 = 4;
          break;
        case 4:
          sub_100182598(v0, (void (*)(void, void, void, void, void, void, void, void, char))sub_100093A68);
          char v1 = 5;
          break;
        case 5:
          break;
        case 6:
          sub_10017AE78(&v43, (uint64_t)v48);
          char v1 = 7;
          break;
        case 7:
          sub_100182598(v0, (void (*)(void, void, void, void, void, void, void, void, char))sub_100093A68);
          char v1 = 0;
          break;
        default:
          sub_100182598(v0, (void (*)(void, void, void, void, void, void, void, void, char))sub_100093A68);
          char v1 = 1;
          break;
      }
      unint64_t v13 = swift_allocObject();
      *(unsigned char *)(v13 + 16) = v1;
      break;
  }
  return v13;
}

void AvroValue.init(_:)(uint64_t a1@<X8>, uint64_t a2@<X0>, uint64_t a3@<X1>, uint64_t a4@<X2>, uint64_t a5@<X3>)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = a4;
  *(void *)(a1 + 24) = a5;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  sub_100029388(a1);
}

{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = a4;
  *(void *)(a1 + 24) = a5;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  sub_100029388(a1);
}

uint64_t AvroMap.init(schema:)()
{
  return sub_10002EC7C();
}

void __swiftcall AvroRecord.init(schema:)(SwiftAvro::AvroRecord *__return_ptr retstr, SwiftAvro::AvroRecordSchema *schema)
{
  uint64_t countAndFlagsBits = schema->type._countAndFlagsBits;
  uint64_t object = schema->type._object;
  uint64_t v5 = schema->name._countAndFlagsBits;
  uint64_t v6 = schema->name._object;
  Swift::String_optional v7 = schema->namespace;
  uint64_t rawValue = (unint64_t *)schema->fields._rawValue;
  uint64_t v21 = rawValue;
  int64_t v9 = rawValue[2];
  if (v9)
  {
    uint64_t v15 = v6;
    uint64_t v16 = v5;
    uint64_t v17 = object;
    uint64_t v18 = countAndFlagsBits;
    Swift::String_optional v19 = v7;
    sub_100093F9C((uint64_t)schema);
    sub_10017B1F8((uint64_t)&v21);
    sub_10017FF18(0, v9, 0);
    __n128 v11 = rawValue + 6;
    do
    {
      unint64_t v12 = *v11;
      swift_retain();
      swift_bridgeObjectRetain();
      sub_1001634F4(v12, (uint64_t)__src);
      swift_release();
      swift_bridgeObjectRelease();
      unint64_t v14 = _swiftEmptyArrayStorage[2];
      unint64_t v13 = _swiftEmptyArrayStorage[3];
      if (v14 >= v13 >> 1) {
        sub_10017FF18((char *)(v13 > 1), v14 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v14 + 1;
      memcpy(&_swiftEmptyArrayStorage[9 * v14 + 4], __src, 0x41uLL);
      v11 += 3;
      --v9;
    }
    while (v9);
    sub_100168730((uint64_t)schema);
    sub_100179CB4((uint64_t)&v21);
    Swift::String_optional v7 = v19;
    uint64_t object = v17;
    uint64_t countAndFlagsBits = v18;
    uint64_t v6 = v15;
    uint64_t v5 = v16;
  }
  retstr->schema.type._uint64_t countAndFlagsBits = countAndFlagsBits;
  retstr->schema.type._uint64_t object = object;
  retstr->schema.name._uint64_t countAndFlagsBits = v5;
  retstr->schema.name._uint64_t object = v6;
  retstr->schema.namespace = v7;
  retstr->schema.fields._uint64_t rawValue = rawValue;
  retstr->fields._uint64_t rawValue = _swiftEmptyArrayStorage;
}

void AvroValue.init(_:)(uint64_t a1@<X8>, uint64_t a2@<X0>)
{
  uint64_t v2 = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 24);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v2;
  *(void *)(a1 + 24) = v3;
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  sub_100029388(a1);
}

double AvroValue.init(_:)()
{
  uint64_t v0 = swift_allocObject();
  sub_100029444(v0);
  return sub_10002CF74();
}

uint64_t sub_10017ADD0()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10017AE08()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 72, 7);
}

_OWORD *sub_10017AE60(long long *a1, _OWORD *a2)
{
  long long v2 = *a1;
  *(_OWORD *)((char *)a2 + 9) = *(long long *)((char *)a1 + 9);
  *a2 = v2;
  return a2;
}

uint64_t sub_10017AE78(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  *(void *)(a2 + 16) = *((void *)a1 + 2);
  *(_OWORD *)a2 = v2;
  return a2;
}

uint64_t sub_10017AE90()
{
  return _swift_deallocObject(v0, 17, 7);
}

void *AvroValue.null.unsafeMutableAddressor()
{
  return &static AvroValue.null;
}

double AvroValue.init(_:)@<D0>(void *a1@<X8>, unsigned int a2@<W0>)
{
  *a1 = a2;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 1;
  return sub_100026F58((uint64_t)a1);
}

double static AvroValue.long(_:)@<D0>(void *a1@<X8>, uint64_t a2@<X0>)
{
  *a1 = a2;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 2;
  return sub_100026F58((uint64_t)a1);
}

double AvroValue.init(_:)@<D0>(void *a1@<X8>, unsigned int a2@<S0>)
{
  *a1 = a2;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 3;
  return sub_100026F58((uint64_t)a1);
}

double static AvroValue.double(_:)@<D0>(uint64_t a1@<X8>, double a2@<D0>)
{
  *(double *)a1 = a2;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 4;
  return sub_100026F58(a1);
}

uint64_t static AvroValue.string(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = a1;
  *(void *)(a3 + 8) = a2;
  *(_OWORD *)(a3 + 16) = xmmword_1001ADAF0;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(unsigned char *)(a3 + 64) = 0;
  return swift_bridgeObjectRetain();
}

uint64_t static AvroValue.bytes(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = a1;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 6;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(unsigned char *)(a2 + 64) = 0;
  return swift_bridgeObjectRetain();
}

void AvroRecord.set(_:forField:)(const void *a1, uint64_t a2, uint64_t a3)
{
  swift_bridgeObjectRetain();
  uint64_t v7 = swift_bridgeObjectRetain();
  unint64_t v8 = sub_10017B23C(v7, a2, a3);
  char v10 = v9;
  swift_bridgeObjectRelease();
  if (v10)
  {
    sub_100179CE0();
    sub_100024A30();
    uint64_t *v12 = a2;
    v12[1] = a3;
    swift_bridgeObjectRetain();
    swift_willThrow();
    return;
  }
  uint64_t v11 = *(void *)(v3 + 56);
  if (swift_isUniquelyReferenced_nonNull_native())
  {
    if ((v8 & 0x8000000000000000) == 0) {
      goto LABEL_4;
    }
  }
  else
  {
    sub_10017FEF0();
    uint64_t v11 = v13;
    if ((v8 & 0x8000000000000000) == 0)
    {
LABEL_4:
      if (v8 < *(void *)(v11 + 16))
      {
        AvroValue.update(_:)(a1);
        *(void *)(v3 + 56) = v11;
        return;
      }
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_9:
  __break(1u);
}

__n128 static AvroValue.record(_:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v7 = *(_OWORD *)(a1 + 16);
  long long v8 = *(_OWORD *)a1;
  __n128 v6 = *(__n128 *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 56);
  sub_10017FF94(a1);
  *(_OWORD *)a2 = v8;
  *(_OWORD *)(a2 + 16) = v7;
  __n128 result = v6;
  *(__n128 *)(a2 + 32) = v6;
  *(void *)(a2 + 48) = v3;
  *(void *)(a2 + 56) = v4;
  *(unsigned char *)(a2 + 64) = 3;
  return result;
}

uint64_t sub_10017B0B8(unint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0;
  }
  unint64_t v5 = *(void *)(a2 + 32);
  swift_retain();
  LOBYTE(v5) = _s9SwiftAvro0B6SchemaV23__derived_struct_equalsySbAC_ACtFZ_0(v5, a1);
  swift_release();
  if (v5) {
    return 0;
  }
  uint64_t v6 = 0;
  while (v2 - 1 != v6)
  {
    unint64_t v7 = *(void *)(a2 + 40 + 8 * v6);
    swift_retain();
    LOBYTE(v7) = _s9SwiftAvro0B6SchemaV23__derived_struct_equalsySbAC_ACtFZ_0(v7, a1);
    swift_release();
    ++v6;
    if (v7) {
      return v6;
    }
  }
  return 0;
}

uint64_t sub_10017B198(unsigned __int8 a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = 0;
  uint64_t v5 = a3 - a2;
  if (a2)
  {
    while (1)
    {
      if (v5 == result) {
        return 0;
      }
      if (*(unsigned __int8 *)(a2 + result) == a1) {
        return result;
      }
      if (v5 <= result) {
        break;
      }
      ++result;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_10017B1F8(uint64_t a1)
{
  return a1;
}

BOOL AvroMap.isEmpty.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return *(void *)(a4 + 16) == 0;
}

uint64_t AvroMap.count.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return *(void *)(a4 + 16);
}

uint64_t sub_10017B23C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    uint64_t v6 = 0;
    unint64_t v7 = (void *)(a1 + 40);
    while (1)
    {
      BOOL v8 = *(v7 - 1) == a2 && *v7 == a3;
      if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        break;
      }
      v7 += 3;
      if (v4 == ++v6) {
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    uint64_t v6 = 0;
  }
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t static AvroValue.array(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return sub_10017B3E0(a1, a2, a3, a4, 1, a5);
}

uint64_t AvroMap.set(_:forKey:)(void *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v7 = *(void *)(v3 + 16);
  swift_retain();
  char v8 = sub_100163384((uint64_t)a1, v7);
  swift_release();
  if (v8)
  {
    swift_bridgeObjectRetain();
    sub_100182598((uint64_t)a1, (void (*)(void, void, void, void, void, void, void, void, char))sub_10016AE48);
    sub_1001799D4(a1, a2, a3);
    return swift_bridgeObjectRelease();
  }
  else
  {
    swift_retain();
    unint64_t v10 = AvroValue.schema.getter();
    sub_10017FFFC();
    sub_100024A30();
    *uint64_t v11 = v7;
    v11[1] = v10;
    return swift_willThrow();
  }
}

uint64_t static AvroValue.map(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return sub_10017B3E0(a1, a2, a3, a4, 2, a5);
}

uint64_t sub_10017B3E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  *(void *)a6 = a1;
  *(void *)(a6 + 8) = a2;
  *(void *)(a6 + 16) = a3;
  *(void *)(a6 + 24) = a4;
  *(_OWORD *)(a6 + 32) = 0u;
  *(_OWORD *)(a6 + 48) = 0u;
  *(unsigned char *)(a6 + 64) = a5;
  swift_bridgeObjectRetain();
  swift_retain();

  return swift_bridgeObjectRetain();
}

uint64_t sub_10017B43C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (a3 < 0 || *(void *)(result + 16) <= a3)
  {
    _StringGuts.grow(_:)(134);
    v8._uint64_t countAndFlagsBits = 0xD00000000000003CLL;
    v8._uint64_t object = (void *)0x80000001001B9FB0;
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    v9._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    v10._uint64_t object = (void *)0x80000001001B9FF0;
    v10._uint64_t countAndFlagsBits = 0xD000000000000020;
    String.append(_:)(v10);
    v11._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
    v12._uint64_t countAndFlagsBits = 0xD000000000000026;
    v12._uint64_t object = (void *)0x80000001001BA020;
    String.append(_:)(v12);
    sub_1001825EC();
    sub_100024A30();
    *uint64_t v13 = 0;
    v13[1] = 0xE000000000000000;
    swift_willThrow();
    return sub_100182598(a2, (void (*)(void, void, void, void, void, void, void, void, char))sub_100093A68);
  }
  else
  {
    char v5 = *(unsigned char *)(a2 + 64);
    *(void *)a4 = result;
    long long v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a4 + 8) = *(_OWORD *)a2;
    *(_OWORD *)(a4 + 24) = v6;
    long long v7 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a4 + 40) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a4 + 56) = v7;
    *(unsigned char *)(a4 + 72) = v5;
    *(void *)(a4 + 80) = a3;
  }
  return result;
}

uint64_t SchemaMismatchError.expected.getter(uint64_t a1)
{
  return a1;
}

uint64_t SchemaMismatchError.expected.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *char v1 = a1;
  return result;
}

uint64_t SchemaMismatchError.actual.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t SchemaMismatchError.actual.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *(void *)(v1 + 8) = a1;
  return result;
}

uint64_t SchemaMismatchError.description.getter()
{
  sub_10002B9D0();
  _StringGuts.grow(_:)(33);
  swift_bridgeObjectRelease();
  sub_10002626C();
  swift_retain();
  v7._uint64_t countAndFlagsBits = AvroSchema.description.getter(v1);
  sub_10002B0B0(v7);
  swift_release();
  swift_bridgeObjectRelease();
  v2._uint64_t countAndFlagsBits = 0x6F67207475622027;
  v2._uint64_t object = (void *)0xEB00000000272074;
  String.append(_:)(v2);
  swift_retain();
  v3._uint64_t countAndFlagsBits = AvroSchema.description.getter(v0);
  String.append(_:)(v3);
  swift_release();
  swift_bridgeObjectRelease();
  v4._uint64_t countAndFlagsBits = 39;
  v4._uint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  return v6;
}

uint64_t SchemaMismatchError.hash(into:)()
{
  sub_10001DEF4();
  swift_retain();
  sub_1001642A4(v2, v1);
  swift_release();
  sub_100019CDC();
  sub_1001642A4(v2, v0);

  return swift_release();
}

uint64_t static SchemaMismatchError.__derived_struct_equals(_:_:)(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if ((_s9SwiftAvro0B6SchemaV23__derived_struct_equalsySbAC_ACtFZ_0(a1, a3) & 1) == 0) {
    return 0;
  }
  unint64_t v3 = sub_10001D778();

  return _s9SwiftAvro0B6SchemaV23__derived_struct_equalsySbAC_ACtFZ_0(v3, v4);
}

Swift::Int SchemaMismatchError.hashValue.getter(unint64_t a1, unint64_t a2)
{
  sub_1000243A4();
  swift_retain();
  sub_1001642A4((uint64_t)v5, a1);
  swift_release();
  sub_100019CDC();
  sub_1001642A4((uint64_t)v5, a2);
  swift_release();
  return Hasher._finalize()();
}

Swift::Int sub_10017B8C4()
{
  return SchemaMismatchError.hashValue.getter(*v0, v0[1]);
}

uint64_t sub_10017B8CC()
{
  return SchemaMismatchError.hash(into:)();
}

Swift::Int sub_10017B8D4()
{
  unint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  Hasher.init(_seed:)();
  swift_retain();
  sub_1001642A4((uint64_t)v4, v1);
  swift_release();
  swift_retain();
  sub_1001642A4((uint64_t)v4, v2);
  swift_release();
  return Hasher._finalize()();
}

uint64_t sub_10017B954()
{
  return SchemaMismatchError.description.getter();
}

uint64_t sub_10017B95C(uint64_t a1, unint64_t *a2)
{
  return static SchemaMismatchError.__derived_struct_equals(_:_:)(*(void *)a1, *(void *)(a1 + 8), *a2);
}

unint64_t InvalidFieldError.description.getter()
{
  sub_10002B9D0();
  _StringGuts.grow(_:)(27);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v2._uint64_t countAndFlagsBits = v1;
  v2._uint64_t object = v0;
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._uint64_t countAndFlagsBits = 39;
  v3._uint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  return 0xD000000000000018;
}

unint64_t sub_10017BA10()
{
  return InvalidFieldError.description.getter();
}

uint64_t InternalError.description.getter()
{
  return sub_10001D778();
}

uint64_t _s9SwiftAvro17InvalidFieldErrorV4hash4intoys6HasherVz_tF_0()
{
  sub_10001DEF4();
  swift_bridgeObjectRetain();
  sub_10002EC7C();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t _s9SwiftAvro17InvalidFieldErrorV23__derived_struct_equalsySbAC_ACtFZ_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 == a3 && a2 == a4) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

Swift::Int _s9SwiftAvro17InvalidFieldErrorV9hashValueSivg_0()
{
  return Hasher._finalize()();
}

uint64_t sub_10017BB08(uint64_t a1)
{
  sub_10016F9E8(v1, (uint64_t)v22);
  uint64_t v3 = v22[0];
  unint64_t v4 = v22[1];
  uint64_t v5 = v22[2];
  char v6 = v23;
  sub_10016F9E8(v1, (uint64_t)&v24);
  switch(v29)
  {
    case 1:
      Hasher._combine(_:)(1uLL);
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v10 = sub_10002EA54();
      AvroArray.hash(into:)(v10, v11, v12, v13, v14);
      goto LABEL_5;
    case 2:
      Hasher._combine(_:)(2uLL);
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v15 = sub_10002EA54();
      AvroMap.hash(into:)(v15, v16, v17, v18, v19);
LABEL_5:
      swift_bridgeObjectRelease();
      swift_release();
      goto LABEL_7;
    case 3:
      long long v30 = v24;
      long long v31 = v25;
      long long v32 = v26;
      uint64_t v20 = v28;
      uint64_t v33 = v27;
      Hasher._combine(_:)(3uLL);
      __dst[0] = v30;
      __dst[1] = v31;
      __dst[2] = v32;
      *(void *)&__dst[3] = v33;
      sub_100093F9C((uint64_t)__dst);
      AvroRecordSchema.hash(into:)();
      sub_100168730((uint64_t)__dst);
      swift_bridgeObjectRetain();
      sub_1001687F0(a1, v20);
LABEL_7:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    case 4:
      memcpy(__dst, (const void *)(v24 + 16), 0x58uLL);
      Hasher._combine(_:)(4uLL);
      sub_10016AFAC((uint64_t)__dst);
      AvroUnion.hash(into:)(a1);
      uint64_t result = sub_10016B03C((uint64_t)__dst);
      break;
    default:
      long long v7 = v24;
      uint64_t v8 = v25;
      char v21 = BYTE8(v25);
      Hasher._combine(_:)(0);
      sub_10016AF60(v3, v4, v5, v6);
      sub_10017EED0(a1, v7, *((unint64_t *)&v7 + 1), v8, v21);
      uint64_t result = sub_100182598(v1, (void (*)(void, void, void, void, void, void, void, void, char))sub_100093A68);
      break;
  }
  return result;
}

uint64_t sub_10017BD58(uint64_t a1, uint64_t a2)
{
  sub_10016F9E8(a1, (uint64_t)&v140);
  switch((char)v145)
  {
    case 1:
      long long v146 = v140;
      long long v14 = v141;
      uint64_t v15 = sub_10002B3CC();
      if (v23 != 1) {
        goto LABEL_33;
      }
      sub_10002E020(v15, v16, v17, v18, v19, v20, v21, v22, v91, v95, v98, v101, v103, v105, v107, v109, v111, v113, v115,
        v117,
        v119,
        v120,
        v121,
        v123,
        v124,
        v126,
        v127,
        v128,
        v129,
        v131,
        v134,
        *((uint64_t *)&v134 + 1),
        v135,
        *((uint64_t *)&v135 + 1),
        v136,
        *((uint64_t *)&v136 + 1),
        v137,
        v138,
        v139,
        v140,
        *((uint64_t *)&v140 + 1),
        v141,
        *((uint64_t *)&v141 + 1),
        v142,
        *((uint64_t *)&v142 + 1),
        v143,
        v144,
        v145,
        v146);
      BOOL v26 = v26 && v24 == v25;
      if (!v26 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        goto LABEL_33;
      }
      unint64_t v150 = v14;
      unint64_t v151 = v2;
      sub_10015DCE0((uint64_t)&v134);
      sub_100180148((uint64_t)&v150);
      swift_bridgeObjectRetain();
      sub_10015DCE0((uint64_t)&v152);
      sub_100180148((uint64_t)&v151);
      swift_bridgeObjectRetain();
      if ((_s9SwiftAvro0B6SchemaV23__derived_struct_equalsySbAC_ACtFZ_0(v14, v2) & 1) == 0) {
        goto LABEL_31;
      }
      char v27 = sub_100165AFC(*((uint64_t *)&v14 + 1), (uint64_t)&v158);
      goto LABEL_20;
    case 2:
      long long v146 = v140;
      unint64_t v28 = v141;
      uint64_t v29 = sub_10002B3CC();
      if (v37 != 2) {
        goto LABEL_33;
      }
      sub_10002E020(v29, v30, v31, v32, v33, v34, v35, v36, v91, v95, v98, v101, v103, v105, v107, v109, v111, v113, v115,
        v117,
        v119,
        v120,
        v121,
        v123,
        v124,
        v126,
        v127,
        v128,
        v129,
        v131,
        v134,
        *((uint64_t *)&v134 + 1),
        v135,
        *((uint64_t *)&v135 + 1),
        v136,
        *((uint64_t *)&v136 + 1),
        v137,
        v138,
        v139,
        v140,
        *((uint64_t *)&v140 + 1),
        v141,
        *((uint64_t *)&v141 + 1),
        v142,
        *((uint64_t *)&v142 + 1),
        v143,
        v144,
        v145,
        v146);
      BOOL v40 = v26 && v38 == v39;
      if (!v40 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        goto LABEL_33;
      }
      unint64_t v150 = v28;
      unint64_t v151 = v2;
      sub_10015DCE0((uint64_t)&v134);
      sub_100180148((uint64_t)&v150);
      swift_bridgeObjectRetain();
      sub_10015DCE0((uint64_t)&v152);
      sub_100180148((uint64_t)&v151);
      swift_bridgeObjectRetain();
      if ((_s9SwiftAvro0B6SchemaV23__derived_struct_equalsySbAC_ACtFZ_0(v28, v2) & 1) == 0)
      {
LABEL_31:
        sub_100057E18((uint64_t)&v152);
        sub_100180178((uint64_t)&v151);
        swift_bridgeObjectRelease();
        sub_100057E18((uint64_t)&v134);
        sub_100180178((uint64_t)&v150);
        swift_bridgeObjectRelease();
        goto LABEL_33;
      }
      uint64_t v41 = sub_100027EA8();
      char v27 = sub_10017E950(v41, v42);
LABEL_20:
      char v43 = v27;
      sub_100057E18((uint64_t)&v152);
      sub_100180178((uint64_t)&v151);
      swift_bridgeObjectRelease();
      sub_100057E18((uint64_t)&v134);
      sub_100180178((uint64_t)&v150);
      swift_bridgeObjectRelease();
      if ((v43 & 1) == 0) {
        goto LABEL_33;
      }
      goto LABEL_30;
    case 3:
      long long v146 = v140;
      long long v147 = v141;
      long long v148 = v142;
      uint64_t v44 = v144;
      uint64_t v149 = v143;
      sub_10002B3CC();
      if (v45 != 3) {
        goto LABEL_33;
      }
      long long v152 = v158;
      long long v153 = v159;
      long long v154 = v160;
      uint64_t v46 = v162;
      uint64_t v155 = v161;
      long long v134 = v146;
      long long v135 = v147;
      long long v136 = v148;
      uint64_t v137 = v149;
      if ((static AvroRecordSchema.__derived_struct_equals(_:_:)() & 1) == 0 || (sub_100165AFC(v44, v46) & 1) == 0) {
        goto LABEL_33;
      }
      goto LABEL_30;
    case 4:
      uint64_t v47 = *(void *)(v140 + 24);
      uint64_t v48 = *(void *)(v140 + 40);
      uint64_t v130 = *(void *)(v140 + 16);
      unint64_t v133 = *(void *)(v140 + 32);
      uint64_t v50 = *(void *)(v140 + 48);
      uint64_t v49 = *(void *)(v140 + 56);
      uint64_t v52 = *(void *)(v140 + 64);
      uint64_t v51 = *(void *)(v140 + 72);
      uint64_t v53 = *(void *)(v140 + 80);
      char v54 = *(unsigned char *)(v140 + 88);
      uint64_t v55 = *(void *)(v140 + 96);
      sub_10016F9E8(a2, (uint64_t)&v134);
      if (v139 != 4) {
        goto LABEL_33;
      }
      uint64_t v99 = v55;
      char v56 = v54;
      uint64_t v116 = *(void *)(v134 + 32);
      uint64_t v118 = *(void *)(v134 + 24);
      uint64_t v114 = *(void *)(v134 + 40);
      uint64_t v110 = *(void *)(v134 + 16);
      uint64_t v112 = *(void *)(v134 + 48);
      uint64_t v106 = *(void *)(v134 + 64);
      uint64_t v108 = *(void *)(v134 + 56);
      uint64_t v102 = *(void *)(v134 + 80);
      uint64_t v104 = *(void *)(v134 + 72);
      int v57 = *(unsigned __int8 *)(v134 + 88);
      uint64_t v96 = *(void *)(v134 + 96);
      swift_bridgeObjectRetain();
      *(void *)&long long v122 = v48;
      *((void *)&v122 + 1) = v50;
      *(void *)&long long v125 = v49;
      *((void *)&v125 + 1) = v52;
      sub_10016AE48(v47, v133, v48, v50, v49, v52, v51, v53, v56);
      swift_bridgeObjectRetain();
      sub_1000184E8();
      sub_10016AE48(v58, v59, v114, v112, v108, v106, v104, v102, v57);
      if (_s9SwiftAvro0B11UnionSchemaV23__derived_struct_equalsySbAC_ACtFZ_0(v130, v110))
      {
        *(void *)&long long v152 = v47;
        *((void *)&v152 + 1) = v133;
        long long v153 = v122;
        long long v154 = v125;
        uint64_t v155 = v51;
        uint64_t v156 = v53;
        char v157 = v56;
        *(void *)&long long v158 = v53;
        *((void *)&v158 + 1) = v51;
        *(void *)&long long v159 = v114;
        *((void *)&v159 + 1) = v112;
        *(void *)&long long v160 = v108;
        *((void *)&v160 + 1) = v106;
        uint64_t v161 = v104;
        uint64_t v162 = v102;
        char v163 = v57;
        sub_10017BD58(&v152, &v158);
        swift_bridgeObjectRelease();
        uint64_t v60 = sub_100021E0C();
        sub_100093A68(v60, v61, v62, v63, v64, v65, v66, v102, v57);
        uint64_t v67 = swift_bridgeObjectRelease();
        sub_1000255A8(v67, v68, v69, v70, v71, v72, v73, v74, v92, v96, v99, v102, v104, v106, v108, v110, v112, v114, v116,
          v118,
          v57,
          v56,
          v47,
          v122,
          v50,
          v125,
          v52,
          v51,
          v53,
          v130,
          v133);
        if ((v94 & 1) != 0 && v100 == v97)
        {
LABEL_30:
          char v13 = 1;
          return v13 & 1;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v75 = sub_100021E0C();
        sub_100093A68(v75, v76, v77, v78, v79, v80, v81, v102, v57);
        uint64_t v82 = swift_bridgeObjectRelease();
        sub_1000255A8(v82, v83, v84, v85, v86, v87, v88, v89, v93, v96, v99, v102, v104, v106, v108, v110, v112, v114, v116,
          v118,
          v57,
          v56,
          v47,
          v48,
          v50,
          v49,
          v52,
          v51,
          v53,
          v130,
          v133);
      }
LABEL_33:
      char v13 = 0;
      return v13 & 1;
    default:
      sub_10002B3CC();
      if (v5) {
        goto LABEL_33;
      }
      unint64_t v6 = *((void *)&v158 + 1);
      uint64_t v132 = v158;
      uint64_t v7 = v159;
      char v8 = BYTE8(v159);
      sub_100182598(a1, (void (*)(void, void, void, void, void, void, void, void, char))sub_10016AE48);
      sub_100182598(a2, (void (*)(void, void, void, void, void, void, void, void, char))sub_10016AE48);
      uint64_t v9 = sub_10001EE08();
      char v13 = _s9SwiftAvro0B9PrimitiveV23__derived_struct_equalsySbAC_ACtFZ_0(v9, v10, v11, v12, v132, v6, v7, v8);
      sub_100182598(a2, (void (*)(void, void, void, void, void, void, void, void, char))sub_100093A68);
      sub_100182598(a1, (void (*)(void, void, void, void, void, void, void, void, char))sub_100093A68);
      return v13 & 1;
  }
}

Swift::Int sub_10017C274()
{
  sub_10016F9E8(v0, (uint64_t)v17);
  uint64_t v1 = v17[0];
  unint64_t v2 = v17[1];
  uint64_t v3 = v17[2];
  char v4 = v18;
  sub_1000243A4();
  sub_10016F9E8(v0, (uint64_t)&v19);
  switch(v23)
  {
    case 1:
      unint64_t v8 = v20;
      *(void *)&__dst[0] = v20;
      Hasher._combine(_:)(1uLL);
      swift_bridgeObjectRetain();
      sub_100180148((uint64_t)__dst);
      swift_bridgeObjectRetain();
      sub_100180148((uint64_t)__dst);
      swift_bridgeObjectRetain();
      sub_100029894();
      swift_retain();
      sub_1001642A4((uint64_t)v16, v8);
      sub_100180178((uint64_t)__dst);
      swift_bridgeObjectRelease();
      sub_100180178((uint64_t)__dst);
      uint64_t v9 = swift_bridgeObjectRetain();
      sub_10018270C(v9);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_100180178((uint64_t)__dst);
      goto LABEL_6;
    case 2:
      long long v10 = v20;
      Hasher._combine(_:)(2uLL);
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_100026344();
      AvroMap.hash(into:)(v11, v12, v13, v10, *((uint64_t *)&v10 + 1));
      swift_bridgeObjectRelease();
      swift_release();
      goto LABEL_6;
    case 3:
      long long v24 = v19;
      long long v25 = v20;
      long long v26 = v21;
      uint64_t v27 = v22;
      Hasher._combine(_:)(3uLL);
      __dst[0] = v24;
      __dst[1] = v25;
      __dst[2] = v26;
      *(void *)&__dst[3] = v27;
      sub_100093F9C((uint64_t)__dst);
      AvroRecordSchema.hash(into:)();
      sub_100168730((uint64_t)__dst);
      uint64_t v14 = swift_bridgeObjectRetain();
      sub_10018270C(v14);
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    case 4:
      memcpy(__dst, (const void *)(v19 + 16), 0x58uLL);
      Hasher._combine(_:)(4uLL);
      sub_10016AFAC((uint64_t)__dst);
      AvroUnion.hash(into:)((uint64_t)v16);
      sub_10016B03C((uint64_t)__dst);
      break;
    default:
      long long v5 = v19;
      uint64_t v6 = v20;
      char v7 = BYTE8(v20);
      Hasher._combine(_:)(0);
      sub_10016AF60(v1, v2, v3, v4);
      sub_10017EED0((uint64_t)v16, v5, *((unint64_t *)&v5 + 1), v6, v7);
      sub_100182598(v0, (void (*)(void, void, void, void, void, void, void, void, char))sub_100093A68);
      break;
  }
  return Hasher._finalize()();
}

uint64_t sub_10017C52C()
{
  return InvalidFieldError.hashValue.getter(*v0, v0[1]);
}

uint64_t sub_10017C534(uint64_t a1)
{
  return InvalidFieldError.hash(into:)(a1, *v1, v1[1]);
}

Swift::Int sub_10017C53C()
{
  return Hasher._finalize()();
}

uint64_t sub_10017C594(void *a1, void *a2)
{
  return static InvalidFieldError.__derived_struct_equals(_:_:)(*a1, a1[1], *a2, a2[1]);
}

Swift::Int sub_10017C5A8()
{
  sub_10016F9E8(v0, (uint64_t)v2);
  return sub_10017C274();
}

uint64_t sub_10017C5E0(uint64_t a1)
{
  sub_10016F9E8(v1, (uint64_t)v4);
  return sub_10017BB08(a1);
}

Swift::Int sub_10017C620()
{
  uint64_t v2 = *(void *)v0;
  unint64_t v1 = *(void *)(v0 + 8);
  unint64_t v4 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v6 = *(void *)(v0 + 32);
  uint64_t v5 = *(void *)(v0 + 40);
  uint64_t v8 = *(void *)(v0 + 48);
  uint64_t v7 = *(void *)(v0 + 56);
  uint64_t v9 = *(unsigned __int8 *)(v0 + 64);
  Hasher.init(_seed:)();
  switch(v9)
  {
    case 1:
      Hasher._combine(_:)(1uLL);
      swift_retain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_retain();
      sub_1001642A4((uint64_t)v11, v4);
      swift_bridgeObjectRelease();
      swift_release_n();
      swift_bridgeObjectRetain();
      sub_1001687F0((uint64_t)v11, v3);
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      break;
    case 2:
      Hasher._combine(_:)(2uLL);
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      AvroMap.hash(into:)((uint64_t)v11, v2, v1, v4, v3);
      swift_bridgeObjectRelease();
      swift_release();
      goto LABEL_6;
    case 3:
      Hasher._combine(_:)(3uLL);
      __dst[0] = v2;
      __dst[1] = v1;
      __dst[2] = v4;
      __dst[3] = v3;
      __dst[4] = v6;
      __dst[5] = v5;
      _OWORD __dst[6] = v8;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      AvroRecordSchema.hash(into:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_1001687F0((uint64_t)v11, v7);
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    case 4:
      memcpy(__dst, (const void *)(v2 + 16), sizeof(__dst));
      Hasher._combine(_:)(4uLL);
      sub_10016AFAC((uint64_t)__dst);
      AvroUnion.hash(into:)((uint64_t)v11);
      sub_10016B03C((uint64_t)__dst);
      break;
    default:
      Hasher._combine(_:)(0);
      sub_10016AF60(v2, v1, v4, v3);
      sub_10017EED0((uint64_t)v11, v2, v1, v4, v3);
      sub_100093A68(v2, v1, v4, v3, v6, v5, v8, v7, 0);
      break;
  }
  return Hasher._finalize()();
}

uint64_t sub_10017C8D8(uint64_t a1, uint64_t a2)
{
  sub_10016F9E8(a1, (uint64_t)v4);
  sub_10016F9E8(a2, (uint64_t)v5);
  return sub_10017BD58((uint64_t)v4, (uint64_t)v5) & 1;
}

uint64_t AvroValue.hash(into:)(uint64_t a1)
{
  sub_10016F9E8(v1, (uint64_t)v16);
  sub_10016F9E8((uint64_t)v16, (uint64_t)v22);
  switch(v25)
  {
    case 1:
      Hasher._combine(_:)(1uLL);
      sub_100182598(v1, (void (*)(void, void, void, void, void, void, void, void, char))sub_10016AE48);
      sub_1000289F8();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v4 = sub_100029990();
      AvroArray.hash(into:)(v4, v5, v6, v7, v8);
      goto LABEL_5;
    case 2:
      Hasher._combine(_:)(2uLL);
      sub_100182598(v1, (void (*)(void, void, void, void, void, void, void, void, char))sub_10016AE48);
      sub_1000289F8();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v9 = sub_100029990();
      AvroMap.hash(into:)(v9, v10, v11, v12, v13);
LABEL_5:
      swift_bridgeObjectRelease();
      swift_release();
      goto LABEL_7;
    case 3:
      long long v26 = v22[0];
      long long v27 = v22[1];
      long long v28 = v22[2];
      uint64_t v14 = v24;
      uint64_t v29 = v23;
      Hasher._combine(_:)(3uLL);
      *(_OWORD *)int __dst = v26;
      *(_OWORD *)&__dst[16] = v27;
      *(_OWORD *)&__dst[32] = v28;
      *(void *)&__dst[48] = v29;
      long long v17 = v26;
      long long v18 = v27;
      long long v19 = v28;
      uint64_t v20 = v29;
      sub_100182598(v1, (void (*)(void, void, void, void, void, void, void, void, char))sub_10016AE48);
      sub_100093F9C((uint64_t)__dst);
      AvroRecordSchema.hash(into:)();
      sub_100168730((uint64_t)__dst);
      swift_bridgeObjectRetain();
      sub_1001687F0(a1, v14);
LABEL_7:
      swift_bridgeObjectRelease();
      break;
    case 4:
      memcpy(__dst, (const void *)(*(void *)&v22[0] + 16), sizeof(__dst));
      Hasher._combine(_:)(4uLL);
      sub_100182598(v1, (void (*)(void, void, void, void, void, void, void, void, char))sub_10016AE48);
      sub_10016AFAC((uint64_t)__dst);
      AvroUnion.hash(into:)(a1);
      sub_10016B03C((uint64_t)__dst);
      break;
    default:
      Swift::UInt v3 = sub_10002E978();
      Hasher._combine(_:)(v3);
      sub_100182598(v1, (void (*)(void, void, void, void, void, void, void, void, char))sub_10016AE48);
      sub_100029518(a1);
      break;
  }
  return sub_100182598(v1, (void (*)(void, void, void, void, void, void, void, void, char))sub_100093A68);
}

uint64_t static AvroValue.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  sub_10016F9E8(a1, (uint64_t)v5);
  sub_10016F9E8(a2, (uint64_t)v4);
  return sub_10017BD58((uint64_t)v5, (uint64_t)v4) & 1;
}

Swift::Int AvroValue.hashValue.getter()
{
  Hasher.init(_seed:)();
  sub_10016F9E8(v0, (uint64_t)v31);
  sub_10016F9E8((uint64_t)v31, (uint64_t)&v37);
  switch(v42)
  {
    case 1:
      long long v14 = v38;
      *(void *)int __dst = v38;
      Hasher._combine(_:)(1uLL);
      swift_bridgeObjectRetain();
      sub_100180148((uint64_t)__dst);
      sub_100182598(v0, (void (*)(void, void, void, void, void, void, void, void, char))sub_10016AE48);
      swift_bridgeObjectRetain();
      sub_100180148((uint64_t)__dst);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_retain();
      sub_1001642A4((uint64_t)v30, v14);
      sub_100180178((uint64_t)__dst);
      swift_bridgeObjectRelease();
      sub_100180178((uint64_t)__dst);
      swift_bridgeObjectRetain();
      sub_1001687F0((uint64_t)v30, *((uint64_t *)&v14 + 1));
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_100180178((uint64_t)__dst);
      goto LABEL_6;
    case 2:
      uint64_t v15 = *((void *)&v38 + 1);
      Hasher._combine(_:)(2uLL);
      sub_100182598(v0, (void (*)(void, void, void, void, void, void, void, void, char))sub_10016AE48);
      swift_retain();
      swift_bridgeObjectRetain();
      uint64_t v16 = swift_bridgeObjectRetain();
      uint64_t v24 = sub_1001826D8(v16, v17, v18, v19, v20, v21, v22, v23, v30[0]);
      AvroMap.hash(into:)((uint64_t)v24, v25, v26, v27, v15);
      swift_bridgeObjectRelease();
      swift_release();
      goto LABEL_6;
    case 3:
      long long v43 = v37;
      long long v44 = v38;
      long long v45 = v39;
      uint64_t v28 = v41;
      uint64_t v46 = v40;
      Hasher._combine(_:)(3uLL);
      *(_OWORD *)int __dst = v43;
      *(_OWORD *)&__dst[16] = v44;
      *(_OWORD *)&__dst[32] = v45;
      *(void *)&__dst[48] = v46;
      long long v32 = v43;
      long long v33 = v44;
      long long v34 = v45;
      uint64_t v35 = v46;
      sub_100182598(v0, (void (*)(void, void, void, void, void, void, void, void, char))sub_10016AE48);
      sub_100093F9C((uint64_t)__dst);
      AvroRecordSchema.hash(into:)();
      sub_100168730((uint64_t)__dst);
      swift_bridgeObjectRetain();
      sub_1001687F0((uint64_t)v30, v28);
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    case 4:
      memcpy(__dst, (const void *)(v37 + 16), sizeof(__dst));
      Hasher._combine(_:)(4uLL);
      sub_100182598(v0, (void (*)(void, void, void, void, void, void, void, void, char))sub_10016AE48);
      sub_10016AFAC((uint64_t)__dst);
      AvroUnion.hash(into:)((uint64_t)v30);
      sub_10016B03C((uint64_t)__dst);
      break;
    default:
      char v1 = BYTE8(v38);
      Hasher._combine(_:)(0);
      uint64_t v2 = sub_100182598(v0, (void (*)(void, void, void, void, void, void, void, void, char))sub_10016AE48);
      uint64_t v10 = sub_1001826D8(v2, v3, v4, v5, v6, v7, v8, v9, v30[0]);
      sub_10017EED0((uint64_t)v10, v11, v12, v13, v1);
      break;
  }
  sub_100182598(v0, (void (*)(void, void, void, void, void, void, void, void, char))sub_100093A68);
  return Hasher._finalize()();
}

Swift::Int sub_10017CF40()
{
  memcpy(__dst, v0, sizeof(__dst));
  return AvroValue.hashValue.getter();
}

uint64_t sub_10017CF7C(uint64_t a1)
{
  memcpy(__dst, v1, sizeof(__dst));
  return AvroValue.hash(into:)(a1);
}

Swift::Int sub_10017CFC0()
{
  memcpy(__dst, v0, sizeof(__dst));
  Hasher.init(_seed:)();
  AvroValue.hash(into:)((uint64_t)&v2);
  return Hasher._finalize()();
}

uint64_t sub_10017D018(void *__src, const void *a2)
{
  memcpy(v4, __src, 0x41uLL);
  memcpy(__dst, a2, 0x41uLL);
  return static AvroValue.__derived_struct_equals(_:_:)((uint64_t)v4, (uint64_t)__dst) & 1;
}

uint64_t static AvroPrimitive.BOOLean(_:)(char a1)
{
  return a1 & 1;
}

uint64_t static AvroPrimitive.int(_:)(uint64_t result)
{
  return result;
}

void AvroValue.init(_:)(uint64_t a1@<X8>, uint64_t a2@<X0>, uint64_t a3@<X1>)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(_OWORD *)(a1 + 16) = xmmword_1001ADAF0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  sub_10002A8E4(a1);
}

{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3 | 0x2000000000000000;
  *(_OWORD *)(a1 + 16) = xmmword_1001ADB00;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  sub_10002A8E4(a1);
}

uint64_t static AvroPrimitive.string(_:)()
{
  return sub_10001D778();
}

double AvroValue.init(_:)@<D0>(void *a1@<X8>, uint64_t a2@<X0>)
{
  *a1 = a2;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 6;
  return sub_100026F58((uint64_t)a1);
}

uint64_t static AvroPrimitive.bytes(_:)()
{
  return swift_bridgeObjectRetain();
}

double AvroValue.init(_:)@<D0>(void *a1@<X8>, uint64_t a2@<X0>, uint64_t a3@<X1>, uint64_t a4@<X2>)
{
  *a1 = a2;
  a1[1] = a3 | 0x1000000000000000;
  a1[2] = a4;
  a1[3] = 6;
  return sub_100026F58((uint64_t)a1);
}

uint64_t static AvroPrimitive.bytes(_:)(uint64_t a1, unint64_t a2)
{
  return a1;
}

{
  sub_100027BCC(a1, a2);
  return sub_100027EA8();
}

double static AvroValue.bytes(_:)@<D0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a2 | 0x1000000000000000;
  sub_100027BCC(a1, a2);
  *(void *)a4 = a1;
  *(void *)(a4 + 8) = v7;
  *(void *)(a4 + 16) = a3;
  *(void *)(a4 + 24) = 6;
  double result = 0.0;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(unsigned char *)(a4 + 64) = 0;
  return result;
}

double static AvroValue.bytes(_:)@<D0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a2 | 0x2000000000000000;
  sub_100027BCC(a1, a2);
  *(void *)a3 = a1;
  *(void *)(a3 + 8) = v5;
  double result = 0.0;
  *(_OWORD *)(a3 + 16) = xmmword_1001ADB00;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(unsigned char *)(a3 + 64) = 0;
  return result;
}

void *AvroPrimitive.null.unsafeMutableAddressor()
{
  return &static AvroPrimitive.null;
}

double static AvroValue.null.getter@<D0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 7;
  return sub_100026F58((uint64_t)a1);
}

double static AvroValue.union(_:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  sub_100029444(v2);
  sub_10016AFAC(a1);
  return sub_10002CF74();
}

double sub_10017D318@<D0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  return AvroValue.init(_:)(*a1, a2);
}

uint64_t sub_10017D320(void *a1)
{
  return AvroValue.init(_:)(*a1);
}

uint64_t sub_10017D328(double *a1)
{
  return AvroValue.init(_:)(*a1);
}

void sub_10017D330(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
}

uint64_t sub_10017D340(void *a1, uint64_t a2, uint64_t a3)
{
  return ExpressibleByStringInterpolation<>.init(stringInterpolation:)(*a1, a1[1], a2, a3);
}

uint64_t AvroValue.update(_:)(const void *a1)
{
  uint64_t v3 = v1;
  memcpy(__dst, v1, 0x41uLL);
  unint64_t v5 = AvroValue.schema.getter();
  char v6 = sub_100163384((uint64_t)a1, v5);
  swift_release();
  if (v6)
  {
    sub_10016F9E8((uint64_t)__dst, (uint64_t)v34);
    sub_10016F9E8((uint64_t)v34, (uint64_t)&v35);
    switch(v38)
    {
      case 1:
        long long v43 = v35;
        uint64_t v7 = v36;
        uint64_t v8 = v37;
        sub_100182598((uint64_t)__dst, (void (*)(void, void, void, void, void, void, void, void, char))sub_10016AE48);
        sub_100057E18((uint64_t)&v43);
        uint64_t v42 = v7;
        sub_100180178((uint64_t)&v42);
        uint64_t v44 = v8;
        uint64_t v9 = &v44;
        goto LABEL_6;
      case 2:
        long long v40 = v35;
        uint64_t v14 = v36;
        uint64_t v15 = v37;
        sub_100182598((uint64_t)__dst, (void (*)(void, void, void, void, void, void, void, void, char))sub_10016AE48);
        sub_100057E18((uint64_t)&v40);
        uint64_t v39 = v14;
        sub_100180178((uint64_t)&v39);
        uint64_t v41 = v15;
        uint64_t v9 = &v41;
LABEL_6:
        sub_100179CB4((uint64_t)v9);
        goto LABEL_7;
      case 4:
        uint64_t v27 = *(void *)(v35 + 24);
        unint64_t v18 = *(void *)(v35 + 32);
        uint64_t v19 = *(void *)(v35 + 40);
        uint64_t v20 = *(void *)(v35 + 48);
        uint64_t v21 = *(void *)(v35 + 56);
        uint64_t v26 = *(void *)(v35 + 64);
        uint64_t v25 = *(void *)(v35 + 72);
        uint64_t v24 = *(void *)(v35 + 80);
        char v22 = *(unsigned char *)(v35 + 88);
        *(void *)&long long v28 = *(void *)(v35 + 16);
        *((void *)&v28 + 1) = v27;
        *(void *)&long long v29 = v18;
        *((void *)&v29 + 1) = v19;
        *(void *)&long long v30 = v20;
        *((void *)&v30 + 1) = v21;
        *(void *)&long long v31 = v26;
        *((void *)&v31 + 1) = v25;
        uint64_t v32 = *(void *)(v35 + 96);
        sub_100182598((uint64_t)__dst, (void (*)(void, void, void, void, void, void, void, void, char))sub_10016AE48);
        swift_bridgeObjectRetain();
        sub_10016AE48(v27, v18, v19, v20, v21, v26, v25, v24, v22);
        AvroUnion.update(_:)((uint64_t)a1);
        if (v2)
        {
          swift_bridgeObjectRelease();
          sub_100093A68(v27, v18, v19, v20, v21, v26, v25, v24, v22);
          uint64_t v16 = sub_100093A68;
          uint64_t v17 = __dst;
LABEL_8:
          uint64_t result = sub_100182598((uint64_t)v17, (void (*)(void, void, void, void, void, void, void, void, char))v16);
        }
        else
        {
          sub_100182598((uint64_t)__dst, (void (*)(void, void, void, void, void, void, void, void, char))sub_100093A68);
          uint64_t v23 = swift_allocObject();
          *(_OWORD *)(v23 + 16) = v28;
          *(_OWORD *)(v23 + 32) = v29;
          *(_OWORD *)(v23 + 48) = v30;
          *(_OWORD *)(v23 + 64) = v31;
          *(void *)(v23 + 80) = v24;
          *(unsigned char *)(v23 + 88) = v22;
          *(void *)(v23 + 96) = v32;
          uint64_t result = sub_100182598((uint64_t)__dst, (void (*)(void, void, void, void, void, void, void, void, char))sub_100093A68);
          *char v1 = v23;
          *(_OWORD *)(v1 + 1) = 0u;
          *(_OWORD *)(v1 + 3) = 0u;
          *(_OWORD *)(v1 + 5) = 0u;
          v1[7] = 0;
          *((unsigned char *)v1 + 64) = 4;
        }
        break;
      default:
LABEL_7:
        sub_100182598((uint64_t)__dst, (void (*)(void, void, void, void, void, void, void, void, char))sub_100093A68);
        memcpy(v3, a1, 0x41uLL);
        uint64_t v16 = sub_10016AE48;
        uint64_t v17 = a1;
        goto LABEL_8;
    }
  }
  else
  {
    unint64_t v10 = AvroValue.schema.getter();
    unint64_t v11 = AvroValue.schema.getter();
    sub_10017FFFC();
    sub_100024A30();
    unint64_t *v12 = v10;
    v12[1] = v11;
    return swift_willThrow();
  }
  return result;
}

uint64_t AvroUnion.update(_:)(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  unint64_t v5 = (const void *)a1;
  sub_10016F9E8(a1, (uint64_t)v68);
  sub_10016F9E8((uint64_t)v68, (uint64_t)v69);
  if (v70 == 4)
  {
    uint64_t v60 = v5;
    uint64_t v71 = v2;
    uint64_t v7 = *(void *)(v69[0] + 16);
    uint64_t v6 = *(void *)(v69[0] + 24);
    uint64_t v8 = *(void *)(v69[0] + 32);
    uint64_t v9 = *(void *)(v69[0] + 56);
    uint64_t v62 = *(void *)(v69[0] + 48);
    uint64_t v63 = *(void *)(v69[0] + 40);
    uint64_t v11 = *(void *)(v69[0] + 64);
    uint64_t v10 = *(void *)(v69[0] + 72);
    uint64_t v12 = *(void *)(v69[0] + 80);
    char v13 = *(unsigned char *)(v69[0] + 88);
    uint64_t v59 = *(void *)(v69[0] + 96);
    uint64_t v14 = *(void *)v4;
    swift_bridgeObjectRetain();
    sub_100028BBC();
    uint64_t v64 = v12;
    uint64_t v15 = v12;
    uint64_t v16 = v7;
    sub_10016AE48(v17, v18, v19, v20, v21, v22, v23, v15, v13);
    if (_s9SwiftAvro0B11UnionSchemaV23__derived_struct_equalsySbAC_ACtFZ_0(v7, v14))
    {
      uint64_t v61 = *(void *)(v4 + 8);
      uint64_t v57 = *(void *)(v4 + 24);
      unint64_t v58 = *(void *)(v4 + 16);
      uint64_t v55 = *(void *)(v4 + 40);
      uint64_t v56 = *(void *)(v4 + 32);
      uint64_t v53 = *(void *)(v4 + 56);
      uint64_t v54 = *(void *)(v4 + 48);
      uint64_t v52 = *(void *)(v4 + 64);
      char v24 = *(unsigned char *)(v4 + 72);
      swift_bridgeObjectRelease();
      uint64_t result = sub_100093A68(v61, v58, v57, v56, v55, v54, v53, v52, v24);
      *(void *)uint64_t v4 = v16;
      *(void *)(v4 + 8) = v6;
      *(void *)(v4 + 16) = v8;
      *(void *)(v4 + 24) = v63;
      *(void *)(v4 + 32) = v62;
      *(void *)(v4 + 40) = v9;
      *(void *)(v4 + 48) = v11;
      *(void *)(v4 + 56) = v10;
      *(void *)(v4 + 64) = v64;
      *(unsigned char *)(v4 + 72) = v13;
      *(void *)(v4 + 80) = v59;
      return result;
    }
    swift_bridgeObjectRelease();
    sub_100028BBC();
    sub_100093A68(v26, v27, v28, v29, v30, v31, v32, v64, v13);
    uint64_t v3 = v71;
    unint64_t v5 = v60;
  }
  uint64_t v33 = *(void *)v4;
  swift_bridgeObjectRetain();
  unint64_t v34 = AvroValue.schema.getter();
  unint64_t v35 = sub_10017B0B8(v34, v33);
  char v37 = v36;
  swift_bridgeObjectRelease();
  uint64_t result = swift_release();
  if (v37)
  {
LABEL_10:
    uint64_t v48 = swift_allocObject();
    *(void *)(v48 + 16) = v33;
    unint64_t v49 = v48 | 0x8000000000000000;
    swift_bridgeObjectRetain();
    unint64_t v50 = AvroValue.schema.getter();
    sub_10017FFFC();
    sub_100024A30();
    *uint64_t v51 = v49;
    v51[1] = v50;
    return swift_willThrow();
  }
  if ((v35 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v35 < *(void *)(v33 + 16))
  {
    unint64_t v38 = *(void *)(v33 + 8 * v35 + 32);
    swift_retain();
    char v39 = sub_100163384((uint64_t)v5, v38);
    swift_release();
    if (v39)
    {
      uint64_t v40 = *(void *)(v4 + 8);
      unint64_t v42 = *(void *)(v4 + 16);
      uint64_t v41 = v4 + 8;
      uint64_t v67 = v40;
      uint64_t v71 = v3;
      uint64_t v43 = *(void *)(v41 + 16);
      uint64_t v44 = *(void *)(v41 + 24);
      uint64_t v45 = *(void *)(v41 + 32);
      uint64_t v46 = *(void *)(v41 + 40);
      uint64_t v65 = *(void *)(v41 + 56);
      uint64_t v66 = *(void *)(v41 + 48);
      char v47 = *(unsigned char *)(v41 + 64);
      sub_100182598((uint64_t)v5, (void (*)(void, void, void, void, void, void, void, void, char))sub_10016AE48);
      sub_100093A68(v67, v42, v43, v44, v45, v46, v66, v65, v47);
      uint64_t result = (uint64_t)memcpy((void *)v41, v5, 0x41uLL);
      *(void *)(v41 + 72) = v35;
      return result;
    }
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

unsigned char *AvroValue.description.getter()
{
  uint64_t v1 = v0;
  sub_10016F9E8(v0, (uint64_t)v8);
  sub_10016F9E8((uint64_t)v8, (uint64_t)v10);
  switch(v11)
  {
    case 1:
      uint64_t v2 = *(unsigned char **)&v10[0];
      sub_100182598(v1, (void (*)(void, void, void, void, void, void, void, void, char))sub_10016AE48);
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_10001ABD0();
      AvroArray.description.getter();
      goto LABEL_5;
    case 2:
      uint64_t v2 = *(unsigned char **)&v10[0];
      sub_100182598(v1, (void (*)(void, void, void, void, void, void, void, void, char))sub_10016AE48);
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_10001ABD0();
      AvroMap.description.getter();
LABEL_5:
      sub_1000184E8();
      swift_bridgeObjectRelease_n();
      swift_release_n();
      swift_bridgeObjectRelease_n();
      return v2;
    case 3:
      *(_OWORD *)int __dst = v10[0];
      *(_OWORD *)&__dst[16] = v10[1];
      *(_OWORD *)&__dst[32] = v10[2];
      *(_OWORD *)&__dst[48] = v10[3];
      sub_100182598(v0, (void (*)(void, void, void, void, void, void, void, void, char))sub_10016AE48);
      uint64_t v2 = __dst;
      AvroRecord.description.getter();
      goto LABEL_7;
    case 4:
      memcpy(__dst, (const void *)(*(void *)&v10[0] + 16), sizeof(__dst));
      sub_100182598(v0, (void (*)(void, void, void, void, void, void, void, void, char))sub_10016AE48);
      sub_10016AFAC((uint64_t)__dst);
      uint64_t v2 = __dst;
      AvroUnion.description.getter();
      sub_1000184E8();
      sub_10016B03C((uint64_t)__dst);
      goto LABEL_9;
    default:
      uint64_t v2 = *(unsigned char **)&v10[0];
      sub_100182598(v1, (void (*)(void, void, void, void, void, void, void, void, char))sub_10016AE48);
      char v3 = sub_10001EE08();
      AvroPrimitive.description.getter(v3, v4, v5, v6);
LABEL_7:
      sub_1000184E8();
LABEL_9:
      sub_100182598(v1, (void (*)(void, void, void, void, void, void, void, void, char))sub_100093A68);
      return v2;
  }
}

unsigned char *sub_10017DC38()
{
  memcpy(__dst, v0, sizeof(__dst));
  return AvroValue.description.getter();
}

uint64_t AvroRecord.schema.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1001801A8(v1, a1);
}

#error "10017DD94: call analysis failed (funcsize=81)"

uint64_t AvroRecord.hash(into:)(uint64_t a1)
{
  long long v3 = *(_OWORD *)(v1 + 16);
  v6[0] = *(_OWORD *)v1;
  v6[1] = v3;
  _OWORD v6[2] = *(_OWORD *)(v1 + 32);
  uint64_t v7 = *(void *)(v1 + 48);
  sub_100093F9C((uint64_t)v6);
  AvroRecordSchema.hash(into:)();
  sub_100168730((uint64_t)v6);
  uint64_t v4 = *(void *)(v1 + 56);
  swift_bridgeObjectRetain();
  sub_1001687F0(a1, v4);
  return swift_bridgeObjectRelease();
}

uint64_t static AvroRecord.__derived_struct_equals(_:_:)()
{
  sub_100021398();
  if ((static AvroRecordSchema.__derived_struct_equals(_:_:)() & 1) == 0) {
    return 0;
  }
  uint64_t v2 = *(void *)(v1 + 56);
  uint64_t v3 = *(void *)(v0 + 56);

  return sub_100165AFC(v2, v3);
}

Swift::Int AvroRecord.hashValue.getter()
{
  sub_1000243A4();
  long long v1 = *(_OWORD *)(v0 + 16);
  v4[0] = *(_OWORD *)v0;
  v4[1] = v1;
  v4[2] = *(_OWORD *)(v0 + 32);
  uint64_t v5 = *(void *)(v0 + 48);
  sub_100093F9C((uint64_t)v4);
  AvroRecordSchema.hash(into:)();
  sub_100168730((uint64_t)v4);
  uint64_t v2 = swift_bridgeObjectRetain();
  sub_10018270C(v2);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Swift::Int sub_10017DF68()
{
  long long v1 = *(_OWORD *)(v0 + 16);
  v5[0] = *(_OWORD *)v0;
  v5[1] = v1;
  _OWORD v5[2] = *(_OWORD *)(v0 + 32);
  uint64_t v2 = *(void *)(v0 + 56);
  uint64_t v6 = *(void *)(v0 + 48);
  Hasher.init(_seed:)();
  sub_100093F9C((uint64_t)v5);
  AvroRecordSchema.hash(into:)();
  sub_100168730((uint64_t)v5);
  swift_bridgeObjectRetain();
  sub_1001687F0((uint64_t)v4, v2);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t AvroRecord.description.getter()
{
  *(void *)&v6[0] = 0;
  *((void *)&v6[0] + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  sub_10002626C();
  swift_bridgeObjectRetain();
  v1._uint64_t countAndFlagsBits = Array.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100025F4C();
  long long v2 = *(_OWORD *)(v0 + 16);
  v6[0] = *(_OWORD *)v0;
  v6[1] = v2;
  _OWORD v6[2] = *(_OWORD *)(v0 + 32);
  uint64_t v7 = *(void *)(v0 + 48);
  sub_100093F9C((uint64_t)v6);
  v3._uint64_t countAndFlagsBits = AvroRecordSchema.description.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  sub_100168730((uint64_t)v6);
  sub_100028E50();
  return v5;
}

void *AvroArray.append(_:)(const void *a1)
{
  uint64_t v2 = v1;
  unint64_t v4 = *(void *)(v1 + 16);
  sub_1000289F8();
  char v5 = sub_100163384((uint64_t)a1, v4);
  swift_release();
  if (v5)
  {
    sub_100182598((uint64_t)a1, (void (*)(void, void, void, void, void, void, void, void, char))sub_10016AE48);
    sub_1001798D0();
    uint64_t v6 = *(void *)(*(void *)(v1 + 24) + 16);
    sub_100179974(v6);
    uint64_t v7 = *(void *)(v1 + 24);
    *(void *)(v7 + 16) = v6 + 1;
    uint64_t result = memcpy((void *)(v7 + 72 * v6 + 32), a1, 0x41uLL);
    *(void *)(v2 + 24) = v7;
  }
  else
  {
    swift_retain();
    unint64_t v9 = AvroValue.schema.getter();
    sub_10017FFFC();
    sub_100024A30();
    *uint64_t v10 = v4;
    v10[1] = v9;
    return (void *)swift_willThrow();
  }
  return result;
}

uint64_t AvroArray.append<A>(contentsOf:)()
{
  uint64_t v2 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  Sequence.forEach(_:)();
  if (!v1) {
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  *(void *)(v0 + 24) = v2;
  return swift_willThrow();
}

void *sub_10017E27C(void *__src)
{
  memcpy(__dst, __src, 0x41uLL);
  return AvroArray.append(_:)(__dst);
}

#error "10017E388: call analysis failed (funcsize=62)"

uint64_t AvroArray.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  return sub_10017E7AC(a1, a2, a3, a4, a5, sub_1001687F0);
}

uint64_t static AvroArray.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8)
{
  return sub_10017E8A8(a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t (*)(uint64_t))sub_100165AFC) & 1;
}

Swift::Int AvroArray.hashValue.getter()
{
  sub_100027784();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_100029894();
  swift_retain();
  sub_1001642A4((uint64_t)v3, v0);
  swift_bridgeObjectRelease();
  swift_release_n();
  uint64_t v1 = swift_bridgeObjectRetain();
  sub_10018270C(v1);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Swift::Int sub_10017E4A4()
{
  return AvroArray.hashValue.getter();
}

uint64_t sub_10017E4B0(uint64_t a1)
{
  return AvroArray.hash(into:)(a1, *(void *)v1, *(void *)(v1 + 8), *(void *)(v1 + 16), *(void *)(v1 + 24));
}

Swift::Int sub_10017E4BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10017ED4C(a1, a2, a3, (void (*)(unsigned char *, uint64_t, uint64_t, uint64_t, uint64_t))AvroArray.hash(into:));
}

uint64_t sub_10017E4D4(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return sub_10017EDD0(a1, a2, a3, a4, static AvroArray.__derived_struct_equals(_:_:));
}

uint64_t AvroArray.description.getter()
{
  sub_10001DF3C();
  _StringGuts.grow(_:)(33);
  swift_bridgeObjectRelease();
  sub_1001826EC();
  v0._uint64_t countAndFlagsBits = Array.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100025F4C();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_100026344();
  v6._uint64_t countAndFlagsBits = AvroArraySchema.description.getter(v1, v2, v3);
  sub_10002B0B0(v6);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100028E50();
  return v5;
}

uint64_t sub_10017E5B8()
{
  return AvroArray.description.getter();
}

uint64_t _s9SwiftAvro0B5ArrayV6schemaAA0bC6SchemaVvg_0()
{
  return sub_10002EC7C();
}

uint64_t AvroMap.subscript.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X5>, uint64_t a4@<X8>)
{
  unint64_t v5 = *(void *)(a3 + 16);
  if (!v5)
  {
    uint64_t v12 = 0;
LABEL_7:
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    LOBYTE(v19) = -1;
    goto LABEL_8;
  }
  uint64_t v8 = result;
  swift_bridgeObjectRetain();
  unint64_t v9 = sub_1000287F0(v8, a2);
  if ((v10 & 1) == 0)
  {
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v12 = 0;
    unint64_t v5 = 0;
    goto LABEL_7;
  }
  uint64_t v11 = *(void *)(a3 + 56) + 72 * v9;
  uint64_t v12 = *(void *)v11;
  uint64_t v13 = *(void *)(v11 + 16);
  uint64_t v14 = *(void *)(v11 + 24);
  uint64_t v15 = *(void *)(v11 + 32);
  uint64_t v16 = *(void *)(v11 + 40);
  uint64_t v17 = *(void *)(v11 + 48);
  uint64_t v18 = *(void *)(v11 + 56);
  int v19 = *(unsigned __int8 *)(v11 + 64);
  unint64_t v28 = *(void *)(v11 + 8);
  sub_10016AE48(*(void *)v11, v28, v13, v14, v15, v16, v17, v18, *(unsigned char *)(v11 + 64));
  uint64_t result = swift_bridgeObjectRelease();
  if (v19 == 4)
  {
    unint64_t v26 = *(void *)(v12 + 32);
    uint64_t v27 = *(void *)(v12 + 24);
    uint64_t v24 = *(void *)(v12 + 48);
    uint64_t v25 = *(void *)(v12 + 40);
    uint64_t v22 = *(void *)(v12 + 64);
    uint64_t v23 = *(void *)(v12 + 56);
    uint64_t v20 = *(void *)(v12 + 80);
    uint64_t v21 = *(void *)(v12 + 72);
    LOBYTE(v19) = *(unsigned char *)(v12 + 88);
    sub_10016AE48(v27, v26, v25, v24, v23, v22, v21, v20, v19);
    uint64_t result = sub_100093A68(v12, v28, v13, v14, v15, v16, v17, v18, 4);
    unint64_t v5 = v26;
    uint64_t v12 = v27;
    uint64_t v14 = v24;
    uint64_t v13 = v25;
    uint64_t v16 = v22;
    uint64_t v15 = v23;
    uint64_t v17 = v21;
    uint64_t v18 = v20;
  }
  else
  {
    unint64_t v5 = v28;
  }
LABEL_8:
  *(void *)a4 = v12;
  *(void *)(a4 + 8) = v5;
  *(void *)(a4 + 16) = v13;
  *(void *)(a4 + 24) = v14;
  *(void *)(a4 + 32) = v15;
  *(void *)(a4 + 40) = v16;
  *(void *)(a4 + 48) = v17;
  *(void *)(a4 + 56) = v18;
  *(unsigned char *)(a4 + 64) = v19;
  return result;
}

uint64_t AvroMap.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  return sub_10017E7AC(a1, a2, a3, a4, a5, sub_100180220);
}

uint64_t sub_10017E7AC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t))
{
  swift_retain();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_retain();
  sub_1001642A4(a1, a4);
  swift_bridgeObjectRelease();
  swift_release_n();
  swift_bridgeObjectRetain();
  a6(a1, a5);

  return swift_bridgeObjectRelease();
}

uint64_t static AvroMap.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8)
{
  return sub_10017E8A8(a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t (*)(uint64_t))sub_10017E950) & 1;
}

uint64_t sub_10017E8A8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t (*a9)(uint64_t))
{
  BOOL v11 = a1 == a5 && a2 == a6;
  if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    || (_s9SwiftAvro0B6SchemaV23__derived_struct_equalsySbAC_ACtFZ_0(a3, a7) & 1) == 0)
  {
    return 0;
  }
  uint64_t v12 = sub_10001D778();

  return a9(v12);
}

uint64_t sub_10017E950(uint64_t result, uint64_t a2)
{
  uint64_t v40 = result;
  if (result == a2) {
    return 1;
  }
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v46 = 0;
  uint64_t v37 = result + 64;
  uint64_t v2 = 1 << *(unsigned char *)(result + 32);
  uint64_t v3 = -1;
  if (v2 < 64) {
    uint64_t v3 = ~(-1 << v2);
  }
  unint64_t v4 = v3 & *(void *)(result + 64);
  int64_t v38 = (unint64_t)(v2 + 63) >> 6;
  while (1)
  {
    if (v4)
    {
      uint64_t v42 = (v4 - 1) & v4;
      unint64_t v5 = __clz(__rbit64(v4)) | (v46 << 6);
      goto LABEL_22;
    }
    int64_t v6 = v46 + 1;
    if (__OFADD__(v46, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v6 >= v38) {
      return 1;
    }
    unint64_t v7 = *(void *)(v37 + 8 * v6);
    ++v46;
    if (!v7)
    {
      int64_t v46 = v6 + 1;
      if (v6 + 1 >= v38) {
        return 1;
      }
      unint64_t v7 = *(void *)(v37 + 8 * v46);
      if (!v7)
      {
        int64_t v46 = v6 + 2;
        if (v6 + 2 >= v38) {
          return 1;
        }
        unint64_t v7 = *(void *)(v37 + 8 * v46);
        if (!v7) {
          break;
        }
      }
    }
LABEL_21:
    uint64_t v42 = (v7 - 1) & v7;
    unint64_t v5 = __clz(__rbit64(v7)) + (v46 << 6);
LABEL_22:
    unint64_t v9 = (uint64_t *)(*(void *)(v40 + 48) + 16 * v5);
    uint64_t v10 = v9[1];
    uint64_t v44 = *v9;
    uint64_t v11 = *(void *)(v40 + 56) + 72 * v5;
    uint64_t v13 = *(void *)v11;
    unint64_t v12 = *(void *)(v11 + 8);
    uint64_t v14 = *(void *)(v11 + 16);
    uint64_t v15 = *(void *)(v11 + 24);
    uint64_t v16 = *(void *)(v11 + 32);
    uint64_t v17 = *(void *)(v11 + 40);
    uint64_t v18 = *(void *)(v11 + 48);
    uint64_t v19 = *(void *)(v11 + 56);
    char v20 = *(unsigned char *)(v11 + 64);
    swift_bridgeObjectRetain();
    char v43 = v20;
    char v36 = v20;
    uint64_t v47 = v13;
    uint64_t v48 = v14;
    unint64_t v21 = v12;
    uint64_t v51 = v16;
    uint64_t v52 = v15;
    uint64_t v49 = v18;
    uint64_t v50 = v17;
    sub_10016AE48(v13, v12, v14, v15, v16, v17, v18, v19, v36);
    unint64_t v22 = sub_1000287F0(v44, v10);
    LOBYTE(v14) = v23;
    swift_bridgeObjectRelease();
    if ((v14 & 1) == 0)
    {
      sub_100093A68(v13, v12, v48, v15, v51, v17, v18, v19, v43);
      return 0;
    }
    uint64_t v24 = *(void *)(a2 + 56) + 72 * v22;
    uint64_t v25 = *(void *)v24;
    unint64_t v26 = *(void *)(v24 + 8);
    uint64_t v27 = *(void *)(v24 + 16);
    uint64_t v28 = *(void *)(v24 + 24);
    uint64_t v29 = *(void *)(v24 + 32);
    uint64_t v30 = *(void *)(v24 + 40);
    unint64_t v31 = v21;
    unint64_t v41 = v21;
    uint64_t v32 = *(void *)(v24 + 48);
    uint64_t v33 = *(void *)(v24 + 56);
    char v34 = *(unsigned char *)(v24 + 64);
    v53[0] = v25;
    v53[1] = v26;
    void v53[2] = v27;
    v53[3] = v28;
    v53[4] = v29;
    v53[5] = v30;
    v53[6] = v32;
    v53[7] = v33;
    char v54 = v34;
    v55[0] = v47;
    v55[1] = v31;
    v55[2] = v48;
    v55[3] = v52;
    v55[4] = v51;
    v55[5] = v50;
    v55[6] = v49;
    v55[7] = v19;
    char v56 = v43;
    sub_10016AE48(v25, v26, v27, v28, v29, v30, v32, v33, v34);
    char v45 = sub_10017BD58(v53, v55);
    uint64_t v35 = v25;
    unint64_t v4 = v42;
    sub_100093A68(v35, v26, v27, v28, v29, v30, v32, v33, v34);
    uint64_t result = sub_100093A68(v47, v41, v48, v52, v51, v50, v49, v19, v43);
    if ((v45 & 1) == 0) {
      return 0;
    }
  }
  int64_t v8 = v6 + 3;
  if (v8 >= v38) {
    return 1;
  }
  unint64_t v7 = *(void *)(v37 + 8 * v8);
  if (v7)
  {
    int64_t v46 = v8;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v46 = v8 + 1;
    if (__OFADD__(v8, 1)) {
      break;
    }
    if (v46 >= v38) {
      return 1;
    }
    unint64_t v7 = *(void *)(v37 + 8 * v46);
    ++v8;
    if (v7) {
      goto LABEL_21;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

Swift::Int AvroMap.hashValue.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_100027784();
  AvroMap.hash(into:)((uint64_t)v9, v6, v5, v4, a4);
  return Hasher._finalize()();
}

Swift::Int sub_10017ED1C()
{
  return AvroMap.hashValue.getter(*v0, v0[1], v0[2], v0[3]);
}

uint64_t sub_10017ED28(uint64_t a1)
{
  return AvroMap.hash(into:)(a1, *(void *)v1, *(void *)(v1 + 8), *(void *)(v1 + 16), *(void *)(v1 + 24));
}

Swift::Int sub_10017ED34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10017ED4C(a1, a2, a3, (void (*)(unsigned char *, uint64_t, uint64_t, uint64_t, uint64_t))AvroMap.hash(into:));
}

Swift::Int sub_10017ED4C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unsigned char *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v6 = *v4;
  uint64_t v7 = v4[1];
  uint64_t v9 = v4[2];
  uint64_t v8 = v4[3];
  Hasher.init(_seed:)();
  a4(v11, v6, v7, v9, v8);
  return Hasher._finalize()();
}

uint64_t sub_10017EDB8(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return sub_10017EDD0(a1, a2, a3, a4, static AvroMap.__derived_struct_equals(_:_:));
}

uint64_t sub_10017EDD0(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, void, void, void, void, void, void, void))
{
  return a5(*a1, a1[1], a1[2], a1[3], *a2, a2[1], a2[2], a2[3]);
}

uint64_t AvroMap.description.getter()
{
  sub_10001DF3C();
  _StringGuts.grow(_:)(31);
  swift_bridgeObjectRelease();
  sub_1001826EC();
  v0._uint64_t countAndFlagsBits = Dictionary.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100025F4C();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_100026344();
  v6._uint64_t countAndFlagsBits = AvroMapSchema.description.getter(v1, v2, v3);
  sub_10002B0B0(v6);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100028E50();
  return v5;
}

void sub_10017EED0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, char a5)
{
  switch(a5)
  {
    case 1:
      Hasher._combine(_:)(2uLL);
      Swift::UInt32 v7 = a2;
      goto LABEL_11;
    case 2:
      Hasher._combine(_:)(3uLL);
      Swift::UInt64 v8 = a2;
      goto LABEL_15;
    case 3:
      Hasher._combine(_:)(4uLL);
      if ((a2 & 0x7FFFFF) == 0 && (a2 & 0x7F800000) == 0) {
        Swift::UInt32 v7 = 0;
      }
      else {
        Swift::UInt32 v7 = a2;
      }
LABEL_11:
      Hasher._combine(_:)(v7);
      return;
    case 4:
      Hasher._combine(_:)(5uLL);
      if ((a2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        Swift::UInt64 v8 = a2;
      }
      else {
        Swift::UInt64 v8 = 0;
      }
LABEL_15:
      Hasher._combine(_:)(v8);
      break;
    case 5:
      Hasher._combine(_:)(6uLL);
      sub_10001D778();
      String.hash(into:)();
      break;
    case 6:
      Hasher._combine(_:)(7uLL);
      sub_10016AF84(a2, a3);
      Swift::UInt v11 = sub_10017F31C(a2, a3);
      Hasher._combine(_:)(v11);
      sub_100093B94(a2, a3, a4, 6);
      break;
    case 7:
      Hasher._combine(_:)(0);
      break;
    default:
      Hasher._combine(_:)(1uLL);
      Hasher._combine(_:)(a2 & 1);
      break;
  }
}

uint64_t _s9SwiftAvro0B9PrimitiveV23__derived_struct_equalsySbAC_ACtFZ_0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, unint64_t a6, uint64_t a7, char a8)
{
  switch(a4)
  {
    case 1:
      if (a8 != 1) {
        goto LABEL_31;
      }
      BOOL v11 = a1 == a5;
      goto LABEL_28;
    case 2:
      if (a8 != 2) {
        goto LABEL_31;
      }
      BOOL v11 = a1 == a5;
      goto LABEL_28;
    case 3:
      if (a8 != 3) {
        goto LABEL_31;
      }
      BOOL v12 = *(float *)&a1 == *(float *)&a5;
      goto LABEL_12;
    case 4:
      if (a8 != 4) {
        goto LABEL_31;
      }
      BOOL v12 = *(double *)&a1 == *(double *)&a5;
LABEL_12:
      char v10 = v12;
      return v10 & 1;
    case 5:
      if (a8 != 5) {
        goto LABEL_31;
      }
      if (a1 == a5 && a2 == a6)
      {
LABEL_33:
        char v10 = 1;
        return v10 & 1;
      }
      else
      {
        sub_10002E854();
        return _stringCompareWithSmolCheck(_:_:expecting:)();
      }
    case 6:
      if (a8 != 6) {
        goto LABEL_31;
      }
      uint64_t v16 = sub_10002E854();
      sub_10016AF60(v16, v17, v18, 6);
      uint64_t v19 = sub_100182684();
      sub_10016AF60(v19, v20, v21, v22);
      uint64_t v23 = sub_10002E854();
      uint64_t v25 = sub_10017F31C(v23, v24);
      uint64_t v26 = sub_10017F31C(a5, a6);
      uint64_t v27 = sub_100182684();
      sub_100093B94(v27, v28, v29, v30);
      uint64_t v31 = sub_10002E854();
      sub_100093B94(v31, v32, a3, 6);
      BOOL v11 = v25 == v26;
LABEL_28:
      char v10 = v11;
      return v10 & 1;
    case 7:
      if (a8 == 7 && !(a6 | a5 | a7)) {
        goto LABEL_33;
      }
      goto LABEL_31;
    default:
      if (a8) {
LABEL_31:
      }
        char v10 = 0;
      else {
        char v10 = ((a1 & 1) == 0) ^ a5;
      }
      return v10 & 1;
  }
}

Swift::Int sub_10017F234()
{
  sub_100027784();
  sub_100016770((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t sub_10017F278()
{
  return AvroMap.description.getter();
}

Swift::Int sub_10017F284()
{
  return sub_10017F234();
}

void sub_10017F294(uint64_t a1)
{
  sub_10017EED0(a1, *(void *)v1, *(void *)(v1 + 8), *(void *)(v1 + 16), *(unsigned char *)(v1 + 24));
}

Swift::Int sub_10017F2A4()
{
  uint64_t v1 = *(void *)v0;
  unint64_t v2 = *(void *)(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 16);
  char v4 = *(unsigned char *)(v0 + 24);
  Hasher.init(_seed:)();
  sub_10017EED0((uint64_t)v6, v1, v2, v3, v4);
  return Hasher._finalize()();
}

uint64_t sub_10017F304(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10017F60C(a1, a2, a3, a4, (uint64_t (*)(void, void, void, void, void, void, void, void))_s9SwiftAvro0B9PrimitiveV23__derived_struct_equalsySbAC_ACtFZ_0);
}

uint64_t sub_10017F31C(uint64_t a1, unint64_t a2)
{
  if (((a2 >> 60) & 3) != 0)
  {
    uint64_t v2 = sub_100027EA8();
    sub_100027BCC(v2, v3);
  }
  else
  {
    uint64_t v4 = swift_bridgeObjectRetain();
    sub_1001828B4(v4);
  }
  sub_100027EA8();
  uint64_t v5 = Data.hashValue.getter();
  uint64_t v6 = sub_100027EA8();
  sub_1000291B4(v6, v7);
  return v5;
}

BOOL sub_10017F38C(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = sub_10017F31C(a1, a2);
  uint64_t v3 = sub_10001D778();
  return v2 == sub_10017F31C(v3, v4);
}

void sub_10017F3D0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  Swift::UInt v3 = sub_10017F31C(a2, a3);
  Hasher._combine(_:)(v3);
}

uint64_t sub_10017F400()
{
  return sub_10017F31C(*(void *)v0, *(void *)(v0 + 8));
}

void sub_10017F408(uint64_t a1)
{
  sub_10017F3D0(a1, *(void *)v1, *(void *)(v1 + 8));
}

Swift::Int sub_10017F410()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  Hasher.init(_seed:)();
  Swift::UInt v3 = sub_10017F31C(v1, v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

BOOL sub_10017F45C(uint64_t a1)
{
  return sub_10017F38C(*(void *)a1, *(void *)(a1 + 8));
}

uint64_t static AvroPrimitive.null.getter()
{
  return 0;
}

uint64_t AvroPrimitive.hash(into:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, char a5)
{
  sub_10016AF60(a2, a3, a4, a5);
  sub_100016770(a1);
  uint64_t v6 = sub_100028304();

  return sub_100093B94(v6, v7, v8, v9);
}

Swift::Int AvroPrimitive.hashValue.getter()
{
  sub_100027784();
  uint64_t v0 = sub_100028304();
  sub_10016AF60(v0, v1, v2, v3);
  sub_100016770((uint64_t)v9);
  uint64_t v4 = sub_100028304();
  sub_100093B94(v4, v5, v6, v7);
  return Hasher._finalize()();
}

Swift::Int sub_10017F54C()
{
  return AvroPrimitive.hashValue.getter();
}

uint64_t sub_10017F55C(uint64_t a1)
{
  return AvroPrimitive.hash(into:)(a1, *(void *)v1, *(void *)(v1 + 8), *(void *)(v1 + 16), *(unsigned char *)(v1 + 24));
}

Swift::Int sub_10017F56C()
{
  uint64_t v1 = *(void *)v0;
  unint64_t v2 = *(void *)(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 16);
  char v4 = *(unsigned char *)(v0 + 24);
  Hasher.init(_seed:)();
  sub_10016AF60(v1, v2, v3, v4);
  sub_10017EED0((uint64_t)v6, v1, v2, v3, v4);
  sub_100093B94(v1, v2, v3, v4);
  return Hasher._finalize()();
}

uint64_t sub_10017F5F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10017F60C(a1, a2, a3, a4, (uint64_t (*)(void, void, void, void, void, void, void, void))static AvroPrimitive.__derived_struct_equals(_:_:));
}

uint64_t sub_10017F60C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, void, void, void, void, void, void, void))
{
  return a5(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(unsigned __int8 *)(a1 + 24), *(void *)a2, *(void *)(a2 + 8), *(void *)(a2 + 16), *(unsigned __int8 *)(a2 + 24));
}

uint64_t AvroPrimitive.description.getter(char a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t result = 7104878;
  switch(a4)
  {
    case 1:
    case 2:
      uint64_t result = dispatch thunk of CustomStringConvertible.description.getter();
      break;
    case 3:
      uint64_t result = Float.description.getter();
      break;
    case 4:
      uint64_t result = Double.description.getter();
      break;
    case 5:
      uint64_t v6 = sub_100027EA8();
      sub_10016AF60(v6, v7, v8, 5);
      uint64_t result = sub_100027EA8();
      break;
    case 6:
      uint64_t v9 = sub_100027EA8();
      sub_10016AF60(v9, v10, v11, 6);
      uint64_t result = String.init<A>(describing:)();
      break;
    case 7:
      return result;
    default:
      if (a1) {
        uint64_t result = 1702195828;
      }
      else {
        uint64_t result = 0x65736C6166;
      }
      break;
  }
  return result;
}

uint64_t sub_10017F768()
{
  return AvroPrimitive.description.getter(*(void *)v0, *(void *)(v0 + 8), *(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
}

uint64_t AvroUnion.value.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100181374(v1 + 8, a1);
}

uint64_t AvroUnion.init(schema:value:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  uint64_t v25 = *(void *)(a2 + 16);
  uint64_t v23 = *(void *)(a2 + 32);
  uint64_t v24 = *(void *)(a2 + 24);
  uint64_t v21 = *(void *)(a2 + 48);
  uint64_t v22 = *(void *)(a2 + 40);
  uint64_t v20 = *(void *)(a2 + 56);
  char v19 = *(unsigned char *)(a2 + 64);
  swift_bridgeObjectRetain();
  unint64_t v8 = AvroValue.schema.getter();
  unint64_t v9 = sub_10017B0B8(v8, a1);
  char v11 = v10;
  swift_bridgeObjectRelease();
  uint64_t result = swift_release();
  if (v11)
  {
LABEL_6:
    uint64_t v15 = swift_allocObject();
    *(void *)(v15 + 16) = a1;
    unint64_t v16 = v15 | 0x8000000000000000;
    unint64_t v17 = AvroValue.schema.getter();
    sub_10017FFFC();
    sub_100024A30();
    *uint64_t v18 = v16;
    v18[1] = v17;
    swift_willThrow();
    return sub_100182598(a2, (void (*)(void, void, void, void, void, void, void, void, char))sub_100093A68);
  }
  if ((v9 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v9 < *(void *)(a1 + 16))
  {
    unint64_t v13 = *(void *)(a1 + 8 * v9 + 32);
    swift_retain();
    char v14 = sub_100163384(a2, v13);
    uint64_t result = swift_release();
    if (v14)
    {
      *(void *)a3 = a1;
      *(void *)(a3 + 8) = v6;
      *(void *)(a3 + 16) = v7;
      *(void *)(a3 + 24) = v25;
      *(void *)(a3 + 32) = v24;
      *(void *)(a3 + 40) = v23;
      *(void *)(a3 + 48) = v22;
      *(void *)(a3 + 56) = v21;
      *(void *)(a3 + 64) = v20;
      *(unsigned char *)(a3 + 72) = v19;
      *(void *)(a3 + 80) = v9;
      return result;
    }
    goto LABEL_6;
  }
  __break(1u);
  return result;
}

void AvroUnion.hash(into:)(uint64_t a1)
{
  uint64_t v10 = *(void *)v1;
  swift_bridgeObjectRetain();
  sub_100168790(a1, v10);
  sub_100179CB4((uint64_t)&v10);
  memcpy(__dst, (const void *)(v1 + 8), 0x41uLL);
  sub_10016F9E8((uint64_t)__dst, (uint64_t)v9);
  sub_10016F9E8((uint64_t)v9, (uint64_t)&v16);
  switch(v21)
  {
    case 1:
      long long v4 = v17;
      *(void *)uint64_t v15 = v17;
      Hasher._combine(_:)(1uLL);
      swift_bridgeObjectRetain();
      sub_100180148((uint64_t)v15);
      sub_100182598((uint64_t)__dst, (void (*)(void, void, void, void, void, void, void, void, char))sub_10016AE48);
      swift_bridgeObjectRetain();
      sub_100180148((uint64_t)v15);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_retain();
      sub_1001642A4(a1, v4);
      sub_100180178((uint64_t)v15);
      swift_bridgeObjectRelease();
      sub_100180178((uint64_t)v15);
      swift_bridgeObjectRetain();
      sub_1001687F0(a1, *((void *)&v4 + 1));
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_100180178((uint64_t)v15);
      goto LABEL_6;
    case 2:
      long long v5 = v16;
      long long v6 = v17;
      Hasher._combine(_:)(2uLL);
      sub_100182598((uint64_t)__dst, (void (*)(void, void, void, void, void, void, void, void, char))sub_10016AE48);
      sub_1000289F8();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      AvroMap.hash(into:)(a1, v5, *((void *)&v5 + 1), v6, *((void *)&v6 + 1));
      swift_bridgeObjectRelease();
      swift_release();
      goto LABEL_6;
    case 3:
      long long v22 = v16;
      long long v23 = v17;
      long long v24 = v18;
      uint64_t v7 = v20;
      uint64_t v25 = v19;
      Hasher._combine(_:)(3uLL);
      *(_OWORD *)uint64_t v15 = v22;
      *(_OWORD *)&v15[16] = v23;
      *(_OWORD *)&v15[32] = v24;
      *(void *)&v15[48] = v25;
      long long v11 = v22;
      long long v12 = v23;
      long long v13 = v24;
      uint64_t v14 = v25;
      sub_100182598((uint64_t)__dst, (void (*)(void, void, void, void, void, void, void, void, char))sub_10016AE48);
      sub_100093F9C((uint64_t)v15);
      AvroRecordSchema.hash(into:)();
      sub_100168730((uint64_t)v15);
      swift_bridgeObjectRetain();
      sub_1001687F0(a1, v7);
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    case 4:
      memcpy(v15, (const void *)(v16 + 16), sizeof(v15));
      Hasher._combine(_:)(4uLL);
      sub_100182598((uint64_t)__dst, (void (*)(void, void, void, void, void, void, void, void, char))sub_10016AE48);
      sub_10016AFAC((uint64_t)v15);
      AvroUnion.hash(into:)(a1);
      sub_10016B03C((uint64_t)v15);
      break;
    default:
      Swift::UInt v3 = sub_10002E978();
      Hasher._combine(_:)(v3);
      sub_100182598((uint64_t)__dst, (void (*)(void, void, void, void, void, void, void, void, char))sub_10016AE48);
      sub_100029518(a1);
      break;
  }
  sub_100182598((uint64_t)__dst, (void (*)(void, void, void, void, void, void, void, void, char))sub_100093A68);
  Hasher._combine(_:)(*(void *)(v1 + 80));
}

BOOL static AvroUnion.__derived_struct_equals(_:_:)()
{
  sub_100021398();
  if ((_s9SwiftAvro0B11UnionSchemaV23__derived_struct_equalsySbAC_ACtFZ_0(*v2, *v3) & 1) != 0
    && (memcpy(__dst, (const void *)(v1 + 8), 0x41uLL),
        memcpy(v5, (const void *)(v0 + 8), 0x41uLL),
        sub_10016F9E8((uint64_t)__dst, (uint64_t)v8),
        sub_10016F9E8((uint64_t)v5, (uint64_t)v6),
        (sub_10017BD58((uint64_t)v8, (uint64_t)v6) & 1) != 0))
  {
    return *(void *)(v1 + 80) == *(void *)(v0 + 80);
  }
  else
  {
    return 0;
  }
}

Swift::Int AvroUnion.hashValue.getter()
{
  sub_1000243A4();
  AvroUnion.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int sub_10017FD68()
{
  Hasher.init(_seed:)();
  AvroUnion.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t AvroUnion.description.getter()
{
  __dst[0] = 0;
  __dst[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(43);
  swift_bridgeObjectRelease();
  sub_10002626C();
  memcpy(__dst, v0 + 1, 0x41uLL);
  uint64_t v1 = sub_100182598((uint64_t)__dst, (void (*)(void, void, void, void, void, void, void, void, char))sub_10016AE48);
  v8._uint64_t countAndFlagsBits = AvroValue.description.getter(v1);
  sub_10002B0B0(v8);
  swift_bridgeObjectRelease();
  sub_100182598((uint64_t)__dst, (void (*)(void, void, void, void, void, void, void, void, char))sub_100093A68);
  v2._uint64_t countAndFlagsBits = 0x3A7865646E69202CLL;
  v2._uint64_t object = (void *)0xE900000000000020;
  String.append(_:)(v2);
  uint64_t v6 = v0[10];
  v9._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  sub_10002B0B0(v9);
  swift_bridgeObjectRelease();
  sub_100025F4C();
  uint64_t v6 = *v0;
  swift_bridgeObjectRetain();
  v3._uint64_t countAndFlagsBits = Array.description.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  sub_100179CB4((uint64_t)&v6);
  sub_100028E50();
  return v5;
}

void sub_10017FEF0()
{
}

void sub_10017FF04()
{
}

char *sub_10017FF18(char *a1, int64_t a2, char a3)
{
  uint64_t result = sub_100180048(a1, a2, a3, *v3);
  *Swift::String v3 = (uint64_t)result;
  return result;
}

uint64_t sub_10017FF38()
{
  swift_bridgeObjectRelease();
  sub_100093A68(*(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(unsigned char *)(v0 + 88));

  return _swift_deallocObject(v0, 104, 7);
}

uint64_t sub_10017FF94(uint64_t a1)
{
  return a1;
}

unint64_t sub_10017FFFC()
{
  unint64_t result = qword_1002240D8;
  if (!qword_1002240D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002240D8);
  }
  return result;
}

char *sub_100180048(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_10002572C(&qword_1002240D0);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 72);
  }
  else
  {
    uint64_t v10 = (char *)_swiftEmptyArrayStorage;
  }
  if (v5)
  {
    sub_100179870((char *)(a4 + 32), v8, v10 + 32);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

uint64_t sub_100180148(uint64_t a1)
{
  return a1;
}

uint64_t sub_100180178(uint64_t a1)
{
  return a1;
}

uint64_t sub_1001801A8(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *sub_100180204(void *a1)
{
  return sub_10017E27C(a1);
}

void sub_100180220(uint64_t a1, uint64_t a2)
{
  uint64_t v271 = a1;
  uint64_t v3 = a2 + 64;
  uint64_t v4 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(a2 + 64);
  int64_t v221 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  Swift::UInt v7 = 0;
  uint64_t v8 = 0;
  uint64_t v268 = a2;
  uint64_t v224 = v3;
  while (1)
  {
    uint64_t v280 = v7;
    if (v6)
    {
      uint64_t v278 = (v6 - 1) & v6;
      uint64_t v279 = v8;
      unint64_t v9 = __clz(__rbit64(v6)) | (v8 << 6);
      goto LABEL_18;
    }
    int64_t v10 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_112;
    }
    if (v10 >= v221) {
      goto LABEL_110;
    }
    unint64_t v11 = *(void *)(v224 + 8 * v10);
    int64_t v12 = v8 + 1;
    if (!v11)
    {
      int64_t v12 = v8 + 2;
      if (v8 + 2 >= v221) {
        goto LABEL_110;
      }
      unint64_t v11 = *(void *)(v224 + 8 * v12);
      if (!v11) {
        break;
      }
    }
LABEL_17:
    uint64_t v278 = (v11 - 1) & v11;
    uint64_t v279 = v12;
    unint64_t v9 = __clz(__rbit64(v11)) + (v12 << 6);
LABEL_18:
    uint64_t v14 = *(void *)(v268 + 56) + 72 * v9;
    uint64_t v16 = *(void *)v14;
    unint64_t v15 = *(void *)(v14 + 8);
    uint64_t v17 = *(void *)(v14 + 16);
    uint64_t v18 = *(void *)(v14 + 24);
    uint64_t v20 = *(void *)(v14 + 32);
    uint64_t v19 = *(void *)(v14 + 40);
    uint64_t v21 = *(void *)(v14 + 48);
    uint64_t v22 = *(void *)(v14 + 56);
    uint64_t v23 = *(unsigned __int8 *)(v14 + 64);
    uint64_t v24 = *(void *)(v271 + 64);
    long long v25 = *(_OWORD *)(v271 + 16);
    v290[0] = *(_OWORD *)v271;
    v290[1] = v25;
    long long v26 = *(_OWORD *)(v271 + 48);
    v290[2] = *(_OWORD *)(v271 + 32);
    v290[3] = v26;
    uint64_t v291 = v24;
    swift_bridgeObjectRetain();
    uint64_t v281 = v16;
    unint64_t v283 = v17;
    uint64_t v27 = v16;
    unint64_t v28 = v15;
    uint64_t v29 = v18;
    uint64_t v30 = v22;
    uint64_t v285 = v20;
    uint64_t v287 = v29;
    sub_10016AE48(v27, v15, v17, v29, v20, v19, v21, v22, v23);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    char v31 = v23;
    switch(v23)
    {
      case 1:
        sub_1000292C8();
        uint64_t v32 = v283;
        sub_100019CDC();
        unint64_t v34 = v15;
        swift_bridgeObjectRetain();
        uint64_t v33 = v281;
        unint64_t v36 = v28;
        uint64_t v37 = v20;
        sub_10002C804(v281, v36, v283, v287, v20, v38, v39, v40, 1);
        swift_bridgeObjectRetain();
        swift_retain();
        swift_bridgeObjectRetain();
        sub_100025370();
        swift_retain();
        sub_1001642A4((uint64_t)v290, v283);
        swift_bridgeObjectRelease();
        sub_100026388();
        swift_bridgeObjectRetain();
        sub_1001687F0((uint64_t)v290, v287);
        goto LABEL_23;
      case 2:
        sub_100028F20();
        uint64_t v32 = v283;
        sub_100019CDC();
        unint64_t v34 = v15;
        swift_bridgeObjectRetain();
        uint64_t v33 = v281;
        unint64_t v41 = v28;
        uint64_t v37 = v20;
        sub_10002C804(v281, v41, v283, v287, v20, v42, v43, v44, 2);
        swift_bridgeObjectRetain();
        swift_retain();
        swift_bridgeObjectRetain();
        sub_100025370();
        swift_retain();
        sub_1001642A4((uint64_t)v290, v283);
        swift_bridgeObjectRelease();
        sub_100026388();
        swift_bridgeObjectRetain();
        sub_100180220(v290, v287);
LABEL_23:
        uint64_t v45 = v37;
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        goto LABEL_93;
      case 3:
        sub_10002A08C();
        uint64_t v33 = v281;
        uint64_t v32 = v283;
        unint64_t v34 = v28;
        sub_10002C804(v281, v28, v283, v287, v20, v46, v47, v48, 3);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        sub_100025370();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        if (v19)
        {
          Hasher._combine(_:)(1u);
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
        }
        else
        {
          Hasher._combine(_:)(0);
        }
        Swift::UInt v64 = *(void *)(v21 + 16);
        Hasher._combine(_:)(v64);
        if (v64)
        {
          char v258 = v31;
          swift_bridgeObjectRetain();
          uint64_t v65 = (unint64_t *)(v21 + 48);
          do
          {
            unint64_t v66 = *v65;
            v65 += 3;
            swift_retain();
            swift_bridgeObjectRetain();
            String.hash(into:)();
            swift_retain();
            sub_1001642A4((uint64_t)v290, v66);
            swift_bridgeObjectRelease();
            swift_release_n();
            --v64;
          }
          while (v64);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          uint64_t v32 = v283;
          uint64_t v45 = v20;
          char v31 = v258;
        }
        else
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v45 = v20;
        }
        swift_bridgeObjectRetain();
        sub_1001687F0((uint64_t)v290, v30);
        swift_bridgeObjectRelease();
        goto LABEL_93;
      case 4:
        uint64_t v243 = v19;
        uint64_t v255 = v23;
        uint64_t v260 = v22;
        uint64_t v264 = v21;
        uint64_t v49 = *(void *)(v281 + 16);
        unint64_t v50 = *(void *)(v281 + 32);
        uint64_t v233 = *(void *)(v281 + 40);
        uint64_t v51 = *(void *)(v281 + 48);
        uint64_t v274 = *(void *)(v281 + 56);
        uint64_t v52 = *(void *)(v281 + 72);
        uint64_t v247 = *(void *)(v281 + 80);
        uint64_t v251 = *(void *)(v281 + 24);
        uint64_t v53 = *(unsigned __int8 *)(v281 + 88);
        Swift::UInt v211 = *(void *)(v281 + 96);
        sub_100028394();
        Hasher._combine(_:)(*(void *)(v49 + 16));
        uint64_t v54 = *(void *)(v49 + 16);
        if (v54)
        {
          sub_100020D94(v283, 4, v197, v202, v205, v208, v211, v49, v15, v221, v224, v51, v50, v233, v52, v53, v243, v247, v251,
            v255,
            v260,
            v264,
            v268,
            v271,
            v274,
            v278,
            v279,
            v280,
            v281,
            v283,
            v285,
            v287);
          swift_bridgeObjectRetain();
          uint64_t v55 = v234;
          sub_100182660(v252, v50, v234, v56, v57, v58, v59, v248, v53, v203, v206, v209, v212, v215, v218, v222, v225, v227, v230,
            v234,
            v237,
            v240,
            v244,
            v248,
            v252,
            v256,
            v261,
            v265,
            v269,
            v272,
            v275);
          swift_bridgeObjectRetain();
          uint64_t v60 = 0;
          uint64_t v61 = v55;
          do
          {
            unint64_t v62 = *(void *)(v49 + 8 * v60++ + 32);
            sub_100019CDC();
            sub_1001642A4((uint64_t)v290, v62);
            swift_release();
          }
          while (v54 != v60);
          swift_bridgeObjectRelease();
          uint64_t v63 = v241;
        }
        else
        {
          sub_100020D94(v283, 4, v197, v202, v205, v208, v211, v49, v15, v221, v224, v51, v50, v233, v52, v53, v243, v247, v251,
            v255,
            v260,
            v264,
            v268,
            v271,
            v274,
            v278,
            v279,
            v280,
            v281,
            v283,
            v285,
            v287);
          swift_bridgeObjectRetain();
          uint64_t v67 = v236;
          sub_100182660(v254, v50, v236, v68, v69, v70, v71, v250, v53, v204, v207, v210, v214, v217, v220, v223, v226, v229, v232,
            v236,
            v239,
            v242,
            v246,
            v250,
            v254,
            v259,
            v263,
            v267,
            v270,
            v273,
            v277);
          uint64_t v61 = v67;
          uint64_t v63 = v53;
        }
        switch(v63)
        {
          case 1:
            sub_1000292C8();
            sub_1000289F8();
            swift_bridgeObjectRetain();
            sub_10002AF5C(1, v198, v202, v205, v208, v213, v216, v219, v221, v224, v228, v231, v235, v238, v241, v245, v249, v253, v257,
              v262,
              v266,
              v268,
              v271,
              v276);
            swift_bridgeObjectRetain();
            swift_retain();
            swift_bridgeObjectRetain();
            sub_1001826A4();
            swift_retain();
            sub_1001642A4((uint64_t)v290, v28);
            swift_bridgeObjectRelease();
            sub_100026388();
            swift_bridgeObjectRetain();
            sub_1001687F0((uint64_t)v290, v50);
            goto LABEL_43;
          case 2:
            sub_100028F20();
            sub_1000289F8();
            swift_bridgeObjectRetain();
            sub_10002AF5C(2, v198, v202, v205, v208, v213, v216, v219, v221, v224, v228, v231, v235, v238, v241, v245, v249, v253, v257,
              v262,
              v266,
              v268,
              v271,
              v276);
            swift_bridgeObjectRetain();
            swift_retain();
            swift_bridgeObjectRetain();
            sub_1001826A4();
            swift_retain();
            sub_1001642A4((uint64_t)v290, v28);
            swift_bridgeObjectRelease();
            sub_100026388();
            swift_bridgeObjectRetain();
            sub_100180220(v290, v50);
LABEL_43:
            swift_release();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease_n();
            break;
          case 3:
            sub_10002A08C();
            sub_10016AE48(v253, v231, v61, v228, v276, v50, v238, v249, 3);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain_n();
            swift_bridgeObjectRetain();
            sub_100026344();
            String.hash(into:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRetain();
            String.hash(into:)();
            swift_bridgeObjectRelease();
            uint64_t v208 = v50;
            if (v50)
            {
              Hasher._combine(_:)(1u);
              swift_bridgeObjectRetain();
              String.hash(into:)();
              swift_bridgeObjectRelease();
            }
            else
            {
              Hasher._combine(_:)(0);
            }
            Swift::UInt v96 = *(void *)(v238 + 16);
            Hasher._combine(_:)(v96);
            if (v96)
            {
              swift_bridgeObjectRetain();
              uint64_t v97 = (unint64_t *)(v238 + 48);
              do
              {
                unint64_t v98 = *v97;
                v97 += 3;
                swift_retain();
                swift_bridgeObjectRetain();
                String.hash(into:)();
                swift_retain();
                sub_1001642A4((uint64_t)v290, v98);
                swift_bridgeObjectRelease();
                swift_release_n();
                --v96;
              }
              while (v96);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease_n();
            }
            else
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            swift_bridgeObjectRetain();
            sub_1001687F0((uint64_t)v290, v249);
            swift_bridgeObjectRelease();
            break;
          case 4:
            memcpy(__dst, (const void *)(v253 + 16), sizeof(__dst));
            sub_100028394();
            sub_1000241C8();
            sub_10016AE48(v72, v73, v74, v75, v76, v77, v78, v249, 4);
            sub_10016AFAC((uint64_t)__dst);
            AvroUnion.hash(into:)((uint64_t)v290);
            sub_10016B03C((uint64_t)__dst);
            break;
          default:
            sub_100029FA8();
            switch(v228)
            {
              case 1:
                sub_100028F20();
                Swift::UInt32 v115 = v253;
                goto LABEL_83;
              case 2:
                sub_10002A08C();
                Swift::UInt64 v116 = v253;
                goto LABEL_87;
              case 3:
                sub_100028394();
                if ((v253 & 0x7FFFFF) == 0 && (v253 & 0x7F800000) == 0) {
                  Swift::UInt32 v115 = 0;
                }
                else {
                  Swift::UInt32 v115 = v253;
                }
LABEL_83:
                Hasher._combine(_:)(v115);
                goto LABEL_92;
              case 4:
                Hasher._combine(_:)(5uLL);
                if ((v253 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
                  Swift::UInt64 v116 = v253;
                }
                else {
                  Swift::UInt64 v116 = 0;
                }
LABEL_87:
                Hasher._combine(_:)(v116);
                break;
              case 5:
                Hasher._combine(_:)(6uLL);
                sub_1000241C8();
                sub_10016AE48(v118, v119, v120, v121, v122, v123, v124, v125, 0);
                String.hash(into:)();
                break;
              case 6:
                Hasher._combine(_:)(7uLL);
                uint64_t v208 = v50;
                if (((v231 >> 60) & 3) != 0)
                {
                  sub_10016AE48(v253, v231, v235, v228, v276, v50, v238, v249, 0);
                  uint64_t v126 = sub_10002E82C();
                  sub_100027BCC(v126, v127);
                }
                else
                {
                  uint64_t v177 = sub_10002572C(&qword_10021C9E8);
                  uint64_t v293 = v177;
                  unint64_t v294 = sub_10016B0CC();
                  v292[0] = v253;
                  unint64_t v178 = sub_10001B620(v292, v177);
                  uint64_t v179 = *v178;
                  size_t v180 = *(void *)(*v178 + 16);
                  if (v180)
                  {
                    if (v180 <= 0xE)
                    {
                      memset(v288, 0, sizeof(v288));
                      char v289 = v180;
                      memcpy(v288, (const void *)(v179 + 32), v180);
                      sub_10002B244();
                      uint64_t v205 = v188 | (v187 << 48);
                      sub_100026690();
                      sub_10016AE48(v189, v190, v191, v192, v276, v50, v238, v249, 0);
                      sub_10016AE48(v253, v50, v235, v228, v276, v50, v238, v249, 0);
                    }
                    else
                    {
                      unint64_t v181 = *(void *)(*v178 + 16);
                      uint64_t v205 = v179 + 32;
                      type metadata accessor for __DataStorage();
                      uint64_t v202 = swift_allocObject();
                      sub_100026690();
                      sub_10016AE48(v182, v183, v184, v185, v276, v50, v238, v249, 0);
                      sub_10016AE48(v253, v50, v235, v228, v276, v50, v238, v249, 0);
                      __DataStorage.init(bytes:length:)();
                      if (v181 >= 0x7FFFFFFF)
                      {
                        type metadata accessor for Data.RangeReference();
                        uint64_t v193 = swift_allocObject();
                        *(void *)(v193 + 16) = 0;
                        *(void *)(v193 + 24) = v181;
                      }
                    }
                  }
                  else
                  {
                    sub_10016AE48(v253, v231, v235, v228, v276, v50, v238, v249, 0);
                    sub_10016AE48(v253, v231, v235, v228, v276, v50, v238, v249, 0);
                  }
                  sub_10001CA50((uint64_t)v292);
                }
                sub_10002E82C();
                Swift::UInt v194 = Data.hashValue.getter();
                uint64_t v195 = sub_10002E82C();
                sub_1000291B4(v195, v196);
                Hasher._combine(_:)(v194);
                break;
              case 7:
                sub_100029FA8();
                break;
              default:
                sub_1000292C8();
                Hasher._combine(_:)(v253 & 1);
                break;
            }
            break;
        }
LABEL_92:
        uint64_t v128 = sub_1000295E8();
        sub_10002EE7C(v128, v129, v130, v131, v276, v132, v133, v134, v241);
        Hasher._combine(_:)(v213);
        swift_bridgeObjectRelease();
        uint64_t v135 = sub_1000295E8();
        sub_10002EE7C(v135, v136, v137, v138, v276, v139, v140, v141, v241);
        uint64_t v33 = v282;
        uint64_t v32 = v284;
        uint64_t v45 = v286;
        char v31 = v257;
        unint64_t v34 = v219;
LABEL_93:
        uint64_t v35 = v280;
        break;
      default:
        sub_100029FA8();
        uint64_t v33 = v281;
        uint64_t v32 = v283;
        unint64_t v34 = v28;
        uint64_t v35 = v280;
        switch((char)v287)
        {
          case 1:
            sub_100028F20();
            Swift::UInt32 v79 = v281;
            goto LABEL_55;
          case 2:
            sub_10002A08C();
            Swift::UInt64 v80 = v281;
            goto LABEL_59;
          case 3:
            sub_100028394();
            if ((v281 & 0x7FFFFF) == 0 && (v281 & 0x7F800000) == 0) {
              Swift::UInt32 v79 = 0;
            }
            else {
              Swift::UInt32 v79 = v281;
            }
LABEL_55:
            Hasher._combine(_:)(v79);
            goto LABEL_104;
          case 4:
            Hasher._combine(_:)(5uLL);
            if ((v281 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
              Swift::UInt64 v80 = v281;
            }
            else {
              Swift::UInt64 v80 = 0;
            }
LABEL_59:
            Hasher._combine(_:)(v80);
            goto LABEL_104;
          case 5:
            Hasher._combine(_:)(6uLL);
            uint64_t v82 = sub_10002976C();
            uint64_t v45 = v20;
            sub_10002C804(v82, v83, v84, v287, v20, v85, v86, v87, 0);
            sub_100025370();
            goto LABEL_94;
          case 6:
            Hasher._combine(_:)(7uLL);
            if (((v34 >> 60) & 3) != 0)
            {
              unint64_t v88 = v34 & 0xCFFFFFFFFFFFFFFFLL;
              uint64_t v89 = sub_10002976C();
              sub_10002C804(v89, v90, v91, v287, v20, v92, v93, v94, 0);
              sub_100027BCC(v281, v34 & 0xCFFFFFFFFFFFFFFFLL);
              uint64_t v95 = v281;
            }
            else
            {
              uint64_t v99 = sub_10002572C(&qword_10021C9E8);
              uint64_t v293 = v99;
              unint64_t v294 = sub_10016B0CC();
              v292[0] = v281;
              uint64_t v100 = sub_10001B620(v292, v99);
              uint64_t v101 = *v100;
              size_t v102 = *(void *)(*v100 + 16);
              if (v102)
              {
                if (v102 <= 0xE)
                {
                  memset(v288, 0, sizeof(v288));
                  char v289 = v102;
                  memcpy(v288, (const void *)(v101 + 32), v102);
                  uint64_t v95 = *(void *)v288;
                  sub_10002B244();
                  unint64_t v88 = v163 | (v164 << 48);
                  uint64_t v165 = sub_100018684();
                  sub_10002C804(v165, v166, v283, v287, v20, v167, v168, v169, v197);
                  uint64_t v170 = sub_10001D84C();
                  sub_10002C804(v170, v171, v172, v173, v20, v174, v175, v176, v201);
                }
                else
                {
                  type metadata accessor for __DataStorage();
                  swift_allocObject();
                  uint64_t v103 = sub_100018684();
                  sub_10002C804(v103, v104, v283, v287, v20, v105, v106, v107, v197);
                  uint64_t v108 = sub_100018684();
                  sub_10002C804(v108, v109, v283, v287, v20, v110, v111, v112, v199);
                  sub_100027EA8();
                  uint64_t v113 = __DataStorage.init(bytes:length:)();
                  uint64_t v114 = v113;
                  if (v102 >= 0x7FFFFFFF)
                  {
                    type metadata accessor for Data.RangeReference();
                    uint64_t v95 = swift_allocObject();
                    *(void *)(v95 + 16) = 0;
                    *(void *)(v95 + 24) = v102;
                    unint64_t v88 = v114 | 0x8000000000000000;
                  }
                  else
                  {
                    uint64_t v95 = v102 << 32;
                    unint64_t v88 = v113 | 0x4000000000000000;
                  }
                }
              }
              else
              {
                uint64_t v151 = sub_100018684();
                sub_10002C804(v151, v152, v283, v287, v20, v153, v154, v155, v197);
                uint64_t v156 = sub_10001D84C();
                sub_10002C804(v156, v157, v158, v159, v20, v160, v161, v162, v200);
                uint64_t v95 = 0;
                unint64_t v88 = 0xC000000000000000;
              }
              sub_10001CA50((uint64_t)v292);
            }
            Swift::UInt v186 = Data.hashValue.getter();
            sub_1000291B4(v95, v88);
            Hasher._combine(_:)(v186);
            uint64_t v32 = v283;
            uint64_t v35 = v280;
            goto LABEL_104;
          case 7:
            sub_100029FA8();
            goto LABEL_104;
          default:
            sub_1000292C8();
            Hasher._combine(_:)(v281 & 1);
LABEL_104:
            uint64_t v45 = v20;
            break;
        }
        break;
    }
LABEL_94:
    uint64_t v142 = sub_10002976C();
    sub_10002EE7C(v142, v143, v144, v287, v45, v145, v146, v147, v31);
    sub_10002EE7C(v33, v34, v32, v287, v45, v148, v149, v150, v31);
    Swift::UInt v7 = Hasher._finalize()() ^ v35;
    unint64_t v6 = v278;
    uint64_t v8 = v279;
  }
  uint64_t v13 = v8 + 3;
  if (v8 + 3 < v221)
  {
    unint64_t v11 = *(void *)(v224 + 8 * v13);
    if (!v11)
    {
      while (1)
      {
        int64_t v12 = v13 + 1;
        if (__OFADD__(v13, 1)) {
          break;
        }
        if (v12 >= v221) {
          goto LABEL_110;
        }
        unint64_t v11 = *(void *)(v224 + 8 * v12);
        ++v13;
        if (v11) {
          goto LABEL_17;
        }
      }
LABEL_112:
      __break(1u);
    }
    int64_t v12 = v8 + 3;
    goto LABEL_17;
  }
LABEL_110:
  swift_release();
  Hasher._combine(_:)(v7);
}

uint64_t sub_100181374(uint64_t a1, uint64_t a2)
{
  return a2;
}

unint64_t sub_1001813B0()
{
  unint64_t result = qword_1002240E0;
  if (!qword_1002240E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002240E0);
  }
  return result;
}

unint64_t sub_100181400()
{
  unint64_t result = qword_1002240E8;
  if (!qword_1002240E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002240E8);
  }
  return result;
}

unint64_t sub_100181450()
{
  unint64_t result = qword_1002240F0;
  if (!qword_1002240F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002240F0);
  }
  return result;
}

unint64_t sub_1001814A0()
{
  unint64_t result = qword_1002240F8;
  if (!qword_1002240F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002240F8);
  }
  return result;
}

void *sub_1001814EC()
{
  return &protocol witness table for Bool;
}

void *sub_1001814F8()
{
  return &protocol witness table for Int;
}

void *sub_100181504()
{
  return &protocol witness table for Double;
}

unint64_t sub_100181514()
{
  unint64_t result = qword_100224100;
  if (!qword_100224100)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100224100);
  }
  return result;
}

unint64_t sub_100181564()
{
  unint64_t result = qword_100224108;
  if (!qword_100224108)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100224108);
  }
  return result;
}

unint64_t sub_1001815B4()
{
  unint64_t result = qword_100224110;
  if (!qword_100224110)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100224110);
  }
  return result;
}

void *sub_100181600()
{
  return &protocol witness table for DefaultStringInterpolation;
}

unint64_t sub_100181610()
{
  unint64_t result = qword_100224118;
  if (!qword_100224118)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100224118);
  }
  return result;
}

unint64_t sub_100181660()
{
  unint64_t result = qword_100224120;
  if (!qword_100224120)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100224120);
  }
  return result;
}

unint64_t sub_1001816B0()
{
  unint64_t result = qword_100224128;
  if (!qword_100224128)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100224128);
  }
  return result;
}

unint64_t sub_100181700()
{
  unint64_t result = qword_100224130;
  if (!qword_100224130)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100224130);
  }
  return result;
}

unint64_t sub_100181750()
{
  unint64_t result = qword_100224138;
  if (!qword_100224138)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100224138);
  }
  return result;
}

uint64_t destroy for SchemaMismatchError()
{
  swift_release();

  return swift_release();
}

void *_s9SwiftAvro19SchemaMismatchErrorVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for SchemaMismatchError(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for SchemaMismatchError(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for SchemaMismatchError(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7C && *(unsigned char *)(a1 + 16))
    {
      unsigned int v2 = *(_DWORD *)a1 + 123;
    }
    else
    {
      unsigned int v2 = (((*(void *)a1 >> 57) >> 4) | (8 * ((*(void *)a1 >> 57) & 8 | *(void *)a1 & 7))) ^ 0x7F;
      if (v2 >= 0x7B) {
        unsigned int v2 = -1;
      }
    }
  }
  else
  {
    unsigned int v2 = -1;
  }
  return v2 + 1;
}

uint64_t storeEnumTagSinglePayload for SchemaMismatchError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7B)
  {
    *(void *)unint64_t result = a2 - 124;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7C) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7C) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 3) & 0xF | (16 * (-a2 & 0x7F));
      *(void *)unint64_t result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

void type metadata accessor for SchemaMismatchError()
{
}

void type metadata accessor for InvalidFieldError()
{
}

uint64_t sub_1001819A4(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
      return sub_100182698(result, a2);
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      return sub_100182698(result, a2);
    }
  }
  return result;
}

void type metadata accessor for InternalError()
{
}

void *initializeWithTake for AvroValue(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x41uLL);
}

void type metadata accessor for AvroValue()
{
}

void type metadata accessor for AvroRecord()
{
}

void type metadata accessor for AvroArray()
{
}

uint64_t _s9SwiftAvro9AvroArrayVwxx_0()
{
  swift_bridgeObjectRelease();
  swift_release();

  return swift_bridgeObjectRelease();
}

void *_s9SwiftAvro9AvroArrayVwcp_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

void *_s9SwiftAvro9AvroArrayVwca_0()
{
  sub_100021398();
  *uint64_t v3 = *v2;
  v1[1] = v2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v1[2] = *(void *)(v0 + 16);
  swift_retain();
  swift_release();
  v1[3] = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return v1;
}

void *_s9SwiftAvro9AvroArrayVwta_0()
{
  sub_100021398();
  uint64_t v3 = v2[1];
  *uint64_t v1 = *v2;
  v1[1] = v3;
  swift_bridgeObjectRelease();
  v1[2] = *(void *)(v0 + 16);
  swift_release();
  v1[3] = *(void *)(v0 + 24);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_100181BB8(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
      return sub_100182698(result, a2);
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      return sub_100182698(result, a2);
    }
  }
  return result;
}

void type metadata accessor for AvroMap()
{
}

void type metadata accessor for AvroPrimitive()
{
}

uint64_t destroy for AvroUnion(uint64_t a1)
{
  return sub_100093A68(*(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(unsigned char *)(a1 + 72));
}

uint64_t initializeWithCopy for AvroUnion(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v13 = *(void *)(a2 + 64);
  char v11 = *(unsigned char *)(a2 + 72);
  swift_bridgeObjectRetain();
  sub_10016AE48(v4, v5, v6, v7, v8, v9, v10, v13, v11);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(void *)(a1 + 64) = v13;
  *(unsigned char *)(a1 + 72) = v11;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  return a1;
}

uint64_t assignWithCopy for AvroUnion(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 8);
  unint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a2 + 64);
  char v22 = *(unsigned char *)(a2 + 72);
  sub_10016AE48(v4, v5, v6, v7, v8, v9, v10, v11, v22);
  uint64_t v12 = *(void *)(a1 + 8);
  unint64_t v13 = *(void *)(a1 + 16);
  uint64_t v14 = *(void *)(a1 + 24);
  uint64_t v15 = *(void *)(a1 + 32);
  uint64_t v16 = *(void *)(a1 + 40);
  uint64_t v17 = *(void *)(a1 + 48);
  uint64_t v18 = *(void *)(a1 + 56);
  uint64_t v19 = *(void *)(a1 + 64);
  char v20 = *(unsigned char *)(a1 + 72);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(void *)(a1 + 64) = v11;
  *(unsigned char *)(a1 + 72) = v22;
  sub_100093A68(v12, v13, v14, v15, v16, v17, v18, v19, v20);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  return a1;
}

void *initializeWithTake for AvroUnion(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x58uLL);
}

uint64_t assignWithTake for AvroUnion(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  char v4 = *(unsigned char *)(a2 + 72);
  uint64_t v5 = *(void *)(a1 + 8);
  unint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 56);
  uint64_t v12 = *(void *)(a1 + 64);
  char v13 = *(unsigned char *)(a1 + 72);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(unsigned char *)(a1 + 72) = v4;
  sub_100093A68(v5, v6, v7, v8, v9, v10, v11, v12, v13);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  return a1;
}

uint64_t getEnumTagSinglePayload for AvroUnion(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 88))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AvroUnion(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 88) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 88) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for AvroUnion()
{
}

uint64_t sub_100181F48(uint64_t a1)
{
  return sub_100093BB8(*(void *)a1, *(void *)(a1 + 8));
}

uint64_t *sub_100181F58(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  sub_10016AF84(*a2, v4);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  return a1;
}

uint64_t *sub_100181FA4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  sub_10016AF84(*a2, v4);
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  sub_100093BB8(v6, v7);
  return a1;
}

uint64_t *sub_100181FFC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = v3;
  sub_100093BB8(v4, v5);
  return a1;
}

uint64_t sub_100182040(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 == 1 || !*(unsigned char *)(a1 + 24))
    {
      if ((~*(void *)(a1 + 8) & 0x3000000000000000) != 0) {
        int v2 = -1;
      }
      else {
        int v2 = 0;
      }
    }
    else
    {
      int v2 = *(_DWORD *)a1 + 1;
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t sub_100182080(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)unint64_t result = a2 - 2;
    if (a3 >= 2) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 2) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2)
    {
      *(_OWORD *)unint64_t result = xmmword_1001ADB10;
      *(void *)(result + 16) = 0;
    }
  }
  return result;
}

uint64_t sub_1001820CC(uint64_t a1)
{
  return (*(void *)(a1 + 8) >> 60) & 3;
}

uint64_t sub_1001820D8(uint64_t result)
{
  *(void *)(result + 8) &= 0xCFFFFFFFFFFFFFFFLL;
  return result;
}

uint64_t sub_1001820E8(uint64_t result, char a2)
{
  *(void *)(result + 8) = *(void *)(result + 8) & 0xCFFFFFFFFFFFFFFFLL | ((unint64_t)(a2 & 3) << 60);
  return result;
}

void type metadata accessor for AvroPrimitive.SomeBytes()
{
}

uint64_t _s9SwiftAvro13AvroPrimitiveVwxx_0(uint64_t a1)
{
  return sub_100093B94(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(unsigned char *)(a1 + 24));
}

uint64_t _s9SwiftAvro13AvroPrimitiveVwcp_0(uint64_t a1, uint64_t a2)
{
  sub_1000215A8(a1, a2);
  *(void *)uint64_t v2 = v3;
  *(void *)(v2 + 8) = v4;
  *(void *)(v2 + 16) = v5;
  *(unsigned char *)(v2 + 24) = v6;
  return v2;
}

uint64_t _s9SwiftAvro13AvroPrimitiveVwca_0(uint64_t a1, uint64_t a2)
{
  sub_1000215A8(a1, a2);
  uint64_t v7 = *(void *)v2;
  unint64_t v8 = *(void *)(v2 + 8);
  uint64_t v9 = *(void *)(v2 + 16);
  *(void *)uint64_t v2 = v3;
  *(void *)(v2 + 8) = v4;
  *(void *)(v2 + 16) = v5;
  char v10 = *(unsigned char *)(v2 + 24);
  *(unsigned char *)(v2 + 24) = v6;
  sub_100093B94(v7, v8, v9, v10);
  return v2;
}

uint64_t _s9SwiftAvro13AvroPrimitiveVwta_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  char v4 = *(unsigned char *)(a2 + 24);
  uint64_t v5 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v3;
  char v8 = *(unsigned char *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v4;
  sub_100093B94(v5, v7, v6, v8);
  return a1;
}

uint64_t _s9SwiftAvro13AvroPrimitiveVwet_0(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xF9 && *(unsigned char *)(a1 + 25))
    {
      int v2 = *(_DWORD *)a1 + 248;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
      if (v3 <= 7) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t _s9SwiftAvro13AvroPrimitiveVwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF8)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)unint64_t result = a2 - 249;
    if (a3 >= 0xF9) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if (a3 >= 0xF9) {
      *(unsigned char *)(result + 25) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 24) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_100182284(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 24) <= 6u) {
    return *(unsigned __int8 *)(a1 + 24);
  }
  else {
    return (*(_DWORD *)a1 + 7);
  }
}

uint64_t sub_10018229C(uint64_t result, unsigned int a2)
{
  uint64_t v2 = a2 - 7;
  if (a2 >= 7)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    LOBYTE(a2) = 7;
    *(void *)unint64_t result = v2;
  }
  *(unsigned char *)(result + 24) = a2;
  return result;
}

void type metadata accessor for AvroPrimitive.Value()
{
}

uint64_t _s9SwiftAvro9AvroValueVwxx_0(uint64_t a1)
{
  return sub_100093A68(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(unsigned char *)(a1 + 64));
}

void _s9SwiftAvro9AvroValueVwcp_0()
{
  sub_1000213D8();
  sub_100027394(v0, v1);
  sub_10002EB74();
  sub_10000E178();
}

#error "100182370: call analysis failed (funcsize=21)"

uint64_t _s9SwiftAvro9AvroValueVwta_0(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 64);
  uint64_t v4 = *(void *)a1;
  unint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 56);
  char v12 = *(unsigned char *)(a1 + 64);
  long long v13 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v13;
  long long v14 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v14;
  *(unsigned char *)(a1 + 64) = v3;
  sub_100093A68(v4, v6, v5, v7, v8, v9, v10, v11, v12);
  return a1;
}

uint64_t _s9SwiftAvro9AvroValueVwet_0(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFC && *(unsigned char *)(a1 + 65))
    {
      int v2 = *(_DWORD *)a1 + 251;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 64);
      if (v3 <= 4) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t _s9SwiftAvro9AvroValueVwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 64) = 0;
    *(void *)unint64_t result = a2 - 252;
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 65) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 65) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 64) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_10018248C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 64);
}

uint64_t sub_100182494(uint64_t result, char a2)
{
  *(unsigned char *)(result + 64) = a2;
  return result;
}

void type metadata accessor for AvroValue.Value()
{
}

unint64_t sub_1001824AC()
{
  unint64_t result = qword_100224140;
  if (!qword_100224140)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100224140);
  }
  return result;
}

unint64_t sub_1001824FC()
{
  unint64_t result = qword_100224148;
  if (!qword_100224148)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100224148);
  }
  return result;
}

unint64_t sub_10018254C()
{
  unint64_t result = qword_100224150;
  if (!qword_100224150)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100224150);
  }
  return result;
}

uint64_t sub_100182598(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, char))
{
  char v4 = *(unsigned char *)(a1 + 64);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), v4);
  return a1;
}

unint64_t sub_1001825EC()
{
  unint64_t result = qword_100224158;
  if (!qword_100224158)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100224158);
  }
  return result;
}

uint64_t sub_100182660(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  return sub_10016AE48(a1, a2, a3, v33, a31, v32, v31, a8, a9);
}

uint64_t sub_100182684()
{
  return v0;
}

uint64_t sub_100182698(uint64_t result, int a2)
{
  *(void *)(result + 8) = (a2 - 1);
  return result;
}

uint64_t sub_1001826A4()
{
  return String.hash(into:)();
}

__n128 sub_1001826C4(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, __n128 a18, unint64_t a19)
{
  __n128 result = a18;
  a1[1] = a18;
  a1[2].n128_u64[0] = a19;
  return result;
}

uint64_t *sub_1001826D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return &a9;
}

uint64_t sub_1001826EC()
{
  return swift_bridgeObjectRetain();
}

void sub_10018270C(uint64_t a1, ...)
{
  va_start(va, a1);
  sub_1001687F0((uint64_t)va, v1);
}

uint64_t AvroPrimitive.get<A>()@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  switch(a4)
  {
    case 5:
      sub_10016AF60(a1, a2, a3, 5);
      goto LABEL_9;
    case 6:
      if (((a2 >> 60) & 3) != 0)
      {
        sub_10016AF60(a1, a2, a3, 6);
      }
      else
      {
        sub_10016AF60(a1, a2, a3, 6);
        sub_1001828B4(a1);
      }
      goto LABEL_9;
    case 7:
      return sub_10002538C(a6, 1, 1, a5);
    default:
LABEL_9:
      int v10 = swift_dynamicCast();
      return sub_10002538C(a6, v10 ^ 1u, 1, a5);
  }
}

uint64_t sub_1001828B4(uint64_t a1)
{
  uint64_t v9 = sub_10002572C(&qword_10021C9E8);
  unint64_t v10 = sub_10016B0CC();
  v8[0] = a1;
  uint64_t v2 = sub_10001B620(v8, v9);
  uint64_t v3 = *v2 + 32;
  uint64_t v4 = v3 + *(void *)(*v2 + 16);
  swift_bridgeObjectRetain();
  sub_1000F9854(v3, v4, &v7);
  swift_bridgeObjectRelease();
  uint64_t v5 = v7;
  sub_10001CA50((uint64_t)v8);
  return v5;
}

uint64_t sub_100182958@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = *(void *)(a1 + 40);
    char v7 = *(unsigned char *)(a1 + 48);
    sub_100185374(v5, v6, v7);
    uint64_t v4 = 1;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    char v7 = -1;
  }
  *(void *)a2 = a1;
  *(void *)(a2 + 8) = v4;
  *(void *)(a2 + 16) = v5;
  *(void *)(a2 + 24) = v6;
  *(unsigned char *)(a2 + 32) = v7;

  return swift_bridgeObjectRetain();
}

uint64_t AvroSchemaEncoder.outputFormatting.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t AvroSchemaEncoder.OutputFormatting.indentation.setter(uint64_t result)
{
  if (result < 0) {
    __break(1u);
  }
  else {
    *uint64_t v1 = result;
  }
  return result;
}

uint64_t *(*AvroSchemaEncoder.OutputFormatting.indentation.modify(void *a1))(uint64_t *result, char a2)
{
  *a1 = *v1;
  a1[1] = v1;
  return sub_100182A20;
}

uint64_t *sub_100182A20(uint64_t *result, char a2)
{
  uint64_t v2 = *result;
  if (a2)
  {
    if ((v2 & 0x8000000000000000) == 0)
    {
LABEL_5:
      *(void *)result[1] = v2;
      return result;
    }
    __break(1u);
  }
  if ((v2 & 0x8000000000000000) == 0) {
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

void AvroSchemaEncoder.hash(into:)(int a1, Swift::UInt a2)
{
}

Swift::Int AvroSchemaEncoder.hashValue.getter(Swift::UInt a1)
{
  return Hasher._finalize()();
}

Swift::Int sub_100182AB0()
{
  return AvroSchemaEncoder.hashValue.getter(*v0);
}

void sub_100182AB8(int a1)
{
  AvroSchemaEncoder.hash(into:)(a1, *v1);
}

Swift::Int sub_100182AC0()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_100182B04(void *a1, void *a2)
{
  return static AvroSchemaEncoder.__derived_struct_equals(_:_:)(*a1, *a2);
}

Swift::Int AvroSchemaEncoder.encodeBytes(_:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for SchemaEncoder();
  Swift::Int result = sub_100182BA4();
  if (!v2)
  {
    uint64_t v5 = sub_100182C30(result, a2);
    swift_bridgeObjectRelease();
    return v5;
  }
  return result;
}

uint64_t type metadata accessor for SchemaEncoder()
{
  return self;
}

uint64_t sub_100182BA4()
{
  uint64_t v1 = v0;
  swift_allocObject();
  uint64_t v2 = sub_100183E28();
  swift_retain();
  uint64_t v3 = (void *)swift_retain();
  sub_100183F44(v3);
  if (!v0)
  {
    uint64_t v1 = v2[5];
    swift_bridgeObjectRetain();
  }
  swift_release();
  return v1;
}

uint64_t sub_100182C30(Swift::Int a1, uint64_t a2)
{
  Swift::Int v4 = sub_100183B0C(a1);
  sub_100065744(0, v4 & ~(v4 >> 63), 0, (uint64_t)_swiftEmptyArrayStorage);
  uint64_t v6 = v5;
  sub_100182958(a1, (uint64_t)&v150);
  long long v154 = v150;
  if (v153 == 255) {
    goto LABEL_120;
  }
  uint64_t v7 = 0;
  unint64_t v8 = *((void *)&v154 + 1);
  uint64_t v146 = v154;
  uint64_t v147 = a2;
  uint64_t v145 = v154 + 32;
  uint64_t v143 = -a2;
  uint64_t v9 = v151;
  unint64_t v10 = v152;
LABEL_3:
  unint64_t v11 = *(void *)(v146 + 16);
  Swift::Int v12 = v9;
  unint64_t v13 = v10;
  uint64_t v144 = v7;
  uint64_t v14 = v7;
  while (2)
  {
    uint64_t v148 = v14;
    if (v8 == v11)
    {
      uint64_t v9 = 0;
      uint64_t v149 = 0;
      int v15 = 255;
      unint64_t v8 = v11;
    }
    else
    {
      if ((v8 & 0x8000000000000000) != 0) {
        goto LABEL_123;
      }
      if (v8 >= *(void *)(v146 + 16)) {
        goto LABEL_124;
      }
      unint64_t v16 = v8 + 1;
      uint64_t v17 = v145 + 24 * v8;
      int v15 = *(unsigned __int8 *)(v17 + 16);
      uint64_t v18 = *(void *)v17;
      uint64_t v149 = *(void *)(v17 + 8);
      sub_100185374(*(void *)v17, v149, *(unsigned char *)(v17 + 16));
      uint64_t v9 = v18;
      unint64_t v8 = v16;
    }
    unint64_t v10 = v149;
    switch(v15)
    {
      case 1:
        if (v15 == 1 || v15 == 255)
        {
          unint64_t v19 = v8;
          if (v12) {
            char v20 = 125;
          }
          else {
            char v20 = 93;
          }
          uint64_t v21 = v9;
          sub_100185EE4(v9, v149, v15);
          unint64_t v23 = *(void *)(v6 + 16);
          unint64_t v22 = *(void *)(v6 + 24);
          if (v23 >= v22 >> 1)
          {
            sub_100065744(v22 > 1, v23 + 1, 1, v6);
            uint64_t v6 = v28;
          }
          *(void *)(v6 + 16) = v23 + 1;
          *(unsigned char *)(v6 + v23 + 32) = v20;
          if (v147 < 1)
          {
            sub_100185EF8(v21, v149, v15);
            uint64_t v9 = v21;
            uint64_t v7 = v144;
            unint64_t v8 = v19;
            goto LABEL_115;
          }
          if (v15 == 255) {
            goto LABEL_120;
          }
          sub_100185EF8(v21, v149, v15);
          uint64_t v24 = v148;
          uint64_t v25 = v148 - v147;
          if (__OFSUB__(v148, v147))
          {
            __break(1u);
LABEL_122:
            __break(1u);
LABEL_123:
            __break(1u);
LABEL_124:
            __break(1u);
LABEL_125:
            __break(1u);
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
            goto LABEL_130;
          }
          if (v25 < 0) {
            goto LABEL_122;
          }
          unint64_t v27 = *(void *)(v6 + 16);
          unint64_t v26 = *(void *)(v6 + 24);
          if (v27 >= v26 >> 1)
          {
            sub_100065744(v26 > 1, v27 + 1, 1, v6);
            uint64_t v24 = v148;
            uint64_t v6 = v29;
          }
          uint64_t v14 = 0;
          *(void *)(v6 + 16) = v27 + 1;
          *(unsigned char *)(v6 + v27 + 32) = 10;
          Swift::Int v12 = v21;
          unint64_t v13 = v149;
          unint64_t v8 = v19;
          if (v25)
          {
            uint64_t v9 = v21;
            unint64_t v68 = v27 + 33;
            uint64_t v69 = v143 + v24;
            do
            {
              unint64_t v70 = *(void *)(v6 + 24);
              if (v68 - 32 >= v70 >> 1)
              {
                sub_100065744(v70 > 1, v68 - 31, 1, v6);
                unint64_t v8 = v19;
                uint64_t v6 = v71;
                uint64_t v9 = v21;
              }
              *(void *)(v6 + 16) = v68 - 31;
              *(unsigned char *)(v6 + v68++) = 32;
              --v69;
            }
            while (v69);
            uint64_t v7 = v148 - v147;
            goto LABEL_114;
          }
          continue;
        }
        if (v12) {
          char v72 = 125;
        }
        else {
          char v72 = 93;
        }
        unint64_t v74 = *(void *)(v6 + 16);
        unint64_t v73 = *(void *)(v6 + 24);
        int64_t v75 = v73 >> 1;
        unint64_t v76 = v74 + 1;
        if (v73 >> 1 <= v74)
        {
          uint64_t v124 = v9;
          unint64_t v125 = v8;
          sub_100065744(v73 > 1, v74 + 1, 1, v6);
          unint64_t v8 = v125;
          uint64_t v6 = v126;
          uint64_t v9 = v124;
          unint64_t v73 = *(void *)(v6 + 24);
          int64_t v75 = v73 >> 1;
        }
        uint64_t v7 = v148;
        *(void *)(v6 + 16) = v76;
        *(unsigned char *)(v6 + v74 + 32) = v72;
        unint64_t v77 = v74 + 2;
        if (v75 < (uint64_t)(v74 + 2))
        {
          uint64_t v127 = v9;
          unint64_t v128 = v8;
          sub_100065744(v73 > 1, v74 + 2, 1, v6);
          uint64_t v7 = v148;
          unint64_t v8 = v128;
          uint64_t v6 = v129;
          uint64_t v9 = v127;
        }
        *(void *)(v6 + 16) = v77;
        *(unsigned char *)(v6 + v76 + 32) = 44;
        if (v147 >= 1)
        {
          unint64_t v78 = *(void *)(v6 + 24);
          if ((uint64_t)(v74 + 3) > (uint64_t)(v78 >> 1))
          {
            uint64_t v135 = v9;
            uint64_t v136 = v6;
            unint64_t v137 = v8;
            uint64_t v138 = v7;
            sub_100065744(v78 > 1, v74 + 3, 1, v136);
            uint64_t v7 = v138;
            unint64_t v8 = v137;
            uint64_t v6 = v139;
            uint64_t v9 = v135;
          }
          *(void *)(v6 + 16) = v74 + 3;
          *(unsigned char *)(v6 + v77 + 32) = 10;
          if (v7 < 0) {
            goto LABEL_128;
          }
          if (v7)
          {
            for (uint64_t i = 0; i != v7; ++i)
            {
              unint64_t v80 = *(void *)(v6 + 24);
              if (v74 + i + 3 >= v80 >> 1)
              {
                uint64_t v81 = v9;
                uint64_t v82 = v6;
                unint64_t v83 = v8;
                uint64_t v84 = v7;
                sub_100065744(v80 > 1, v74 + i + 4, 1, v82);
                uint64_t v7 = v84;
                unint64_t v8 = v83;
                uint64_t v6 = v85;
                uint64_t v9 = v81;
              }
              *(void *)(v6 + 16) = v74 + i + 4;
              *(unsigned char *)(v6 + v74 + i + 35) = 32;
            }
          }
        }
LABEL_114:
        unint64_t v10 = v149;
LABEL_115:
        if (v15 != 255) {
          goto LABEL_3;
        }
LABEL_120:
        sub_100179CB4((uint64_t)&v154);
        return v6;
      case 2:
        if (v15 && v15 != 3) {
          goto LABEL_131;
        }
        uint64_t v43 = v9;
        unint64_t v44 = v8;
        unint64_t v46 = *(void *)(v6 + 16);
        unint64_t v45 = *(void *)(v6 + 24);
        if (v46 >= v45 >> 1)
        {
          sub_100065744(v45 > 1, v46 + 1, 1, v6);
          uint64_t v6 = v107;
        }
        *(void *)(v6 + 16) = v46 + 1;
        *(unsigned char *)(v6 + v46 + 32) = 34;
        sub_1001839E0(v12, v13);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_100065744(0, *(void *)(v6 + 16) + 1, 1, v6);
          uint64_t v6 = v108;
        }
        unint64_t v48 = *(void *)(v6 + 16);
        unint64_t v47 = *(void *)(v6 + 24);
        int64_t v49 = v47 >> 1;
        unint64_t v50 = v48 + 1;
        uint64_t v7 = v148;
        if (v47 >> 1 <= v48)
        {
          sub_100065744(v47 > 1, v48 + 1, 1, v6);
          uint64_t v7 = v148;
          uint64_t v6 = v109;
          uint64_t v9 = v43;
          unint64_t v47 = *(void *)(v6 + 24);
          int64_t v49 = v47 >> 1;
        }
        else
        {
          uint64_t v9 = v43;
        }
        *(void *)(v6 + 16) = v50;
        *(unsigned char *)(v6 + v48 + 32) = 34;
        unint64_t v51 = v48 + 2;
        if (v49 < (uint64_t)(v48 + 2))
        {
          uint64_t v110 = v6;
          uint64_t v111 = v7;
          sub_100065744(v47 > 1, v48 + 2, 1, v110);
          uint64_t v7 = v111;
          uint64_t v6 = v112;
          uint64_t v9 = v43;
        }
        *(void *)(v6 + 16) = v51;
        *(unsigned char *)(v6 + v50 + 32) = 58;
        unint64_t v8 = v44;
        if (v147 < 1) {
          goto LABEL_114;
        }
        unint64_t v52 = *(void *)(v6 + 24);
        unint64_t v53 = v48 + 3;
        if ((uint64_t)(v48 + 3) > (uint64_t)(v52 >> 1))
        {
          uint64_t v113 = v6;
          uint64_t v114 = v7;
          sub_100065744(v52 > 1, v48 + 3, 1, v113);
          uint64_t v7 = v114;
          unint64_t v8 = v44;
          uint64_t v6 = v115;
          uint64_t v9 = v43;
        }
        unint64_t v10 = v149;
        *(void *)(v6 + 16) = v53;
        *(unsigned char *)(v6 + v51 + 32) = 32;
        goto LABEL_115;
      case 3:
        if ((v15 - 2) < 2) {
          goto LABEL_97;
        }
        if (v15)
        {
          unint64_t v54 = v8;
          uint64_t v55 = v9;
          sub_100185EE4(v9, v149, v15);
          unint64_t v57 = *(void *)(v6 + 16);
          unint64_t v56 = *(void *)(v6 + 24);
          if (v57 >= v56 >> 1)
          {
            sub_100065744(v56 > 1, v57 + 1, 1, v6);
            uint64_t v6 = v130;
          }
          *(void *)(v6 + 16) = v57 + 1;
          *(unsigned char *)(v6 + v57 + 32) = 34;
          sub_1001839E0(v12, v13);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_100065744(0, *(void *)(v6 + 16) + 1, 1, v6);
            uint64_t v6 = v131;
          }
          unint64_t v59 = *(void *)(v6 + 16);
          unint64_t v58 = *(void *)(v6 + 24);
          unint64_t v60 = v59 + 1;
          uint64_t v7 = v148;
          if (v59 >= v58 >> 1)
          {
            sub_100065744(v58 > 1, v59 + 1, 1, v6);
            uint64_t v7 = v148;
            unint64_t v8 = v54;
            uint64_t v6 = v132;
          }
          else
          {
            unint64_t v8 = v54;
          }
          uint64_t v9 = v55;
          *(void *)(v6 + 16) = v60;
          *(unsigned char *)(v6 + v59 + 32) = 34;
          if (v147 >= 1)
          {
            BOOL v61 = __OFSUB__(v7, v147);
            v7 -= v147;
            if (v61) {
              goto LABEL_129;
            }
            if (v7 < 0)
            {
LABEL_130:
              __break(1u);
LABEL_131:
              __break(1u);
              JUMPOUT(0x100183820);
            }
            unint64_t v62 = *(void *)(v6 + 24);
            if ((uint64_t)(v59 + 2) > (uint64_t)(v62 >> 1))
            {
              uint64_t v140 = v7;
              sub_100065744(v62 > 1, v59 + 2, 1, v6);
              uint64_t v7 = v140;
              unint64_t v8 = v54;
              uint64_t v6 = v141;
              uint64_t v9 = v55;
            }
            *(void *)(v6 + 16) = v59 + 2;
            *(unsigned char *)(v6 + v60 + 32) = 10;
            if (v7)
            {
              unint64_t v63 = v59 + 34;
              uint64_t v64 = v7;
              do
              {
                unint64_t v65 = *(void *)(v6 + 24);
                if (v63 - 32 >= v65 >> 1)
                {
                  uint64_t v66 = v7;
                  sub_100065744(v65 > 1, v63 - 31, 1, v6);
                  uint64_t v7 = v66;
                  unint64_t v8 = v54;
                  uint64_t v6 = v67;
                  uint64_t v9 = v55;
                }
                *(void *)(v6 + 16) = v63 - 31;
                *(unsigned char *)(v6 + v63++) = 32;
                --v64;
              }
              while (v64);
            }
          }
        }
        else
        {
          uint64_t v86 = v9;
          unint64_t v87 = v8;
          sub_100185374(v9, v149, 0);
          uint64_t v9 = v86;
          unint64_t v8 = v87;
LABEL_97:
          uint64_t v88 = v9;
          unint64_t v89 = v8;
          unint64_t v91 = *(void *)(v6 + 16);
          unint64_t v90 = *(void *)(v6 + 24);
          if (v91 >= v90 >> 1)
          {
            sub_100065744(v90 > 1, v91 + 1, 1, v6);
            uint64_t v6 = v119;
          }
          *(void *)(v6 + 16) = v91 + 1;
          *(unsigned char *)(v6 + v91 + 32) = 34;
          sub_1001839E0(v12, v13);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_100065744(0, *(void *)(v6 + 16) + 1, 1, v6);
            uint64_t v6 = v120;
          }
          unint64_t v93 = *(void *)(v6 + 16);
          unint64_t v92 = *(void *)(v6 + 24);
          int64_t v94 = v92 >> 1;
          unint64_t v95 = v93 + 1;
          uint64_t v7 = v148;
          if (v92 >> 1 <= v93)
          {
            sub_100065744(v92 > 1, v93 + 1, 1, v6);
            uint64_t v7 = v148;
            uint64_t v6 = v121;
            uint64_t v9 = v88;
            unint64_t v92 = *(void *)(v6 + 24);
            int64_t v94 = v92 >> 1;
          }
          else
          {
            uint64_t v9 = v88;
          }
          *(void *)(v6 + 16) = v95;
          *(unsigned char *)(v6 + v93 + 32) = 34;
          unint64_t v96 = v93 + 2;
          if (v94 < (uint64_t)(v93 + 2))
          {
            uint64_t v122 = v7;
            sub_100065744(v92 > 1, v93 + 2, 1, v6);
            uint64_t v7 = v122;
            uint64_t v6 = v123;
            uint64_t v9 = v88;
          }
          *(void *)(v6 + 16) = v96;
          *(unsigned char *)(v6 + v95 + 32) = 44;
          unint64_t v8 = v89;
          if (v147 >= 1)
          {
            unint64_t v97 = *(void *)(v6 + 24);
            if ((uint64_t)(v93 + 3) > (uint64_t)(v97 >> 1))
            {
              uint64_t v133 = v7;
              sub_100065744(v97 > 1, v93 + 3, 1, v6);
              uint64_t v7 = v133;
              unint64_t v8 = v89;
              uint64_t v6 = v134;
              uint64_t v9 = v88;
            }
            *(void *)(v6 + 16) = v93 + 3;
            *(unsigned char *)(v6 + v96 + 32) = 10;
            if (v7 < 0) {
              goto LABEL_127;
            }
            if (v7)
            {
              for (uint64_t j = 0; j != v7; ++j)
              {
                unint64_t v99 = *(void *)(v6 + 24);
                if (v93 + j + 3 >= v99 >> 1)
                {
                  uint64_t v100 = v6;
                  uint64_t v101 = v7;
                  sub_100065744(v99 > 1, v93 + j + 4, 1, v100);
                  uint64_t v7 = v101;
                  unint64_t v8 = v89;
                  uint64_t v6 = v102;
                  uint64_t v9 = v88;
                }
                *(void *)(v6 + 16) = v93 + j + 4;
                *(unsigned char *)(v6 + v93 + j + 35) = 32;
              }
            }
          }
        }
        goto LABEL_114;
      default:
        if (v12) {
          char v30 = 123;
        }
        else {
          char v30 = 91;
        }
        unint64_t v32 = *(void *)(v6 + 16);
        unint64_t v31 = *(void *)(v6 + 24);
        unint64_t v33 = v32 + 1;
        if (v32 >= v31 >> 1)
        {
          uint64_t v103 = v9;
          uint64_t v104 = v6;
          unint64_t v105 = v8;
          sub_100065744(v31 > 1, v32 + 1, 1, v104);
          unint64_t v8 = v105;
          uint64_t v6 = v106;
          uint64_t v9 = v103;
        }
        *(void *)(v6 + 16) = v33;
        *(unsigned char *)(v6 + v32 + 32) = v30;
        uint64_t v7 = v148;
        if (v147 < 1) {
          goto LABEL_114;
        }
        uint64_t v7 = v148 + v147;
        if (__OFADD__(v148, v147)) {
          goto LABEL_125;
        }
        unint64_t v34 = *(void *)(v6 + 24);
        if ((uint64_t)(v32 + 2) > (uint64_t)(v34 >> 1))
        {
          uint64_t v116 = v9;
          unint64_t v117 = v8;
          sub_100065744(v34 > 1, v32 + 2, 1, v6);
          uint64_t v7 = v148 + v147;
          unint64_t v8 = v117;
          uint64_t v6 = v118;
          uint64_t v9 = v116;
        }
        *(void *)(v6 + 16) = v32 + 2;
        *(unsigned char *)(v6 + v33 + 32) = 10;
        if (v7 < 0) {
          goto LABEL_126;
        }
        if (v7)
        {
          unint64_t v35 = v32 + 34;
          uint64_t v36 = v7;
          do
          {
            unint64_t v37 = *(void *)(v6 + 24);
            if (v35 - 32 >= v37 >> 1)
            {
              uint64_t v38 = v9;
              uint64_t v39 = v6;
              unint64_t v40 = v8;
              uint64_t v41 = v7;
              sub_100065744(v37 > 1, v35 - 31, 1, v39);
              uint64_t v7 = v41;
              unint64_t v8 = v40;
              uint64_t v6 = v42;
              uint64_t v9 = v38;
            }
            *(void *)(v6 + 16) = v35 - 31;
            *(unsigned char *)(v6 + v35++) = 32;
            --v36;
          }
          while (v36);
        }
        goto LABEL_114;
    }
  }
}

uint64_t AvroSchemaEncoder.encode(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SchemaEncoder();
  Swift::Int v5 = sub_100182BA4();
  if (!v2)
  {
    sub_100182C30(v5, a2);
    swift_bridgeObjectRelease();
    uint64_t v4 = static String._fromUTF8Repairing(_:)();
    swift_bridgeObjectRelease();
  }
  return v4;
}

unint64_t sub_1001838C8()
{
  unint64_t result = qword_100224160;
  if (!qword_100224160)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100224160);
  }
  return result;
}

unint64_t sub_100183918()
{
  unint64_t result = qword_100224168;
  if (!qword_100224168)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100224168);
  }
  return result;
}

void type metadata accessor for AvroSchemaEncoder()
{
}

void type metadata accessor for AvroSchemaEncoder.OutputFormatting()
{
}

void sub_10018397C(uint64_t a1)
{
  uint64_t v3 = *v1;
  if (!swift_isUniquelyReferenced_nonNull_native() || a1 > *(void *)(v3 + 24) >> 1)
  {
    sub_1001796A0();
    uint64_t v3 = v4;
  }
  *uint64_t v1 = v3;
}

Swift::Int sub_1001839E0(Swift::Int result, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0)
  {
    unint64_t result = String.UTF8View._foreignCount()();
    uint64_t v3 = result;
  }
  else if ((a2 & 0x2000000000000000) != 0)
  {
    uint64_t v3 = HIBYTE(a2) & 0xF;
  }
  else
  {
    uint64_t v3 = result & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 16);
  uint64_t v6 = v5 + v3;
  if (__OFADD__(v5, v3))
  {
    __break(1u);
  }
  else
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t *v2 = v4;
    if (!isUniquelyReferenced_nonNull_native || *(void *)(v4 + 24) >> 1 < v6)
    {
      if (v5 <= v6) {
        uint64_t v8 = v5 + v3;
      }
      else {
        uint64_t v8 = v5;
      }
      sub_100065744(isUniquelyReferenced_nonNull_native, v8, 1, v4);
      uint64_t v4 = v9;
      uint64_t *v2 = v9;
    }
    swift_bridgeObjectRetain();
    unint64_t result = _StringGuts.copyUTF8(into:)();
    if (v10) {
      goto LABEL_22;
    }
    uint64_t v11 = result;
    unint64_t result = swift_bridgeObjectRelease_n();
    if (v11 >= v3)
    {
      if (v11 < 1)
      {
LABEL_17:
        uint64_t *v2 = v4;
        return result;
      }
      uint64_t v12 = *(void *)(v4 + 16);
      BOOL v13 = __OFADD__(v12, v11);
      uint64_t v14 = v12 + v11;
      if (!v13)
      {
        *(void *)(v4 + 16) = v14;
        goto LABEL_17;
      }
      goto LABEL_21;
    }
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  __break(1u);
  return result;
}

Swift::Int sub_100183B0C(Swift::Int result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (v1)
  {
    uint64_t v2 = 0;
    for (uint64_t i = (unsigned __int8 *)(result + 48); ; i += 24)
    {
      unsigned int v4 = *i;
      if (v4 >= 2)
      {
        uint64_t v6 = *((void *)i - 2);
        unint64_t v7 = *((void *)i - 1);
        if (v4 == 2)
        {
          if ((v7 & 0x1000000000000000) != 0)
          {
            unint64_t result = String.UTF8View._foreignCount()();
          }
          else if ((v7 & 0x2000000000000000) != 0)
          {
            unint64_t result = HIBYTE(v7) & 0xF;
          }
          else
          {
            unint64_t result = v6 & 0xFFFFFFFFFFFFLL;
          }
          uint64_t v5 = result + 3;
          if (__OFADD__(result, 3)) {
            goto LABEL_26;
          }
        }
        else
        {
          if ((v7 & 0x1000000000000000) != 0)
          {
            unint64_t result = String.UTF8View._foreignCount()();
          }
          else if ((v7 & 0x2000000000000000) != 0)
          {
            unint64_t result = HIBYTE(v7) & 0xF;
          }
          else
          {
            unint64_t result = v6 & 0xFFFFFFFFFFFFLL;
          }
          uint64_t v5 = result + 2;
          if (__OFADD__(result, 2)) {
            goto LABEL_27;
          }
        }
      }
      else
      {
        uint64_t v5 = 1;
      }
      BOOL v8 = __OFADD__(v2, v5);
      v2 += v5;
      if (v8) {
        break;
      }
      if (!--v1) {
        return v2;
      }
    }
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
  }
  else
  {
    return 0;
  }
  return result;
}

void sub_100183BD0(uint64_t a1, char a2, uint64_t a3, char a4)
{
  switch(a4)
  {
    case 1:
      Swift::UInt v4 = a2 & 1;
      Swift::UInt v5 = 1;
      goto LABEL_9;
    case 2:
      Swift::UInt v6 = 2;
      goto LABEL_5;
    case 3:
      Swift::UInt v6 = 3;
LABEL_5:
      Hasher._combine(_:)(v6);
      String.hash(into:)();
      break;
    default:
      Swift::UInt v4 = a2 & 1;
      Swift::UInt v5 = 0;
LABEL_9:
      Hasher._combine(_:)(v5);
      Hasher._combine(_:)(v4);
      break;
  }
}

uint64_t sub_100183C90(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  switch(a3)
  {
    case 1:
      uint64_t result = a6 == 1 && ((a4 ^ a1) & 1) == 0;
      break;
    case 2:
      if (a6 != 2) {
        goto LABEL_15;
      }
      goto LABEL_6;
    case 3:
      if (a6 == 3)
      {
LABEL_6:
        if (a1 == a4 && a2 == a5) {
          uint64_t result = 1;
        }
        else {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
        }
      }
      else
      {
LABEL_15:
        uint64_t result = 0;
      }
      break;
    default:
      if (a6) {
        uint64_t result = 0;
      }
      else {
        uint64_t result = ((a4 ^ a1) & 1) == 0;
      }
      break;
  }
  return result;
}

Swift::Int sub_100183D3C(char a1, uint64_t a2, char a3)
{
  sub_1000243A4();
  sub_100183BD0((uint64_t)v7, a1, a2, a3);
  return Hasher._finalize()();
}

Swift::Int sub_100183D94()
{
  return sub_100183D3C(*(void *)v0, *(void *)(v0 + 8), *(unsigned char *)(v0 + 16));
}

void sub_100183DA0(uint64_t a1)
{
  sub_100183BD0(a1, *(void *)v1, *(void *)(v1 + 8), *(unsigned char *)(v1 + 16));
}

Swift::Int sub_100183DAC()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  char v3 = *((unsigned char *)v0 + 16);
  Hasher.init(_seed:)();
  sub_100183BD0((uint64_t)v5, v1, v2, v3);
  return Hasher._finalize()();
}

uint64_t sub_100183E04(uint64_t a1, uint64_t a2)
{
  return sub_100183C90(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16), *(void *)a2, *(void *)(a2 + 8), *(unsigned char *)(a2 + 16));
}

Swift::Int sub_100183E20()
{
  return sub_100166D90(*v0);
}

void *sub_100183E28()
{
  type metadata accessor for CodingUserInfoKey();
  v0[3] = Dictionary.init(dictionaryLiteral:)();
  v0[4] = Dictionary.init(dictionaryLiteral:)();
  v0[6] = _swiftEmptyArrayStorage;
  v0[2] = _swiftEmptyArrayStorage;
  v0[5] = _swiftEmptyArrayStorage;
  sub_10018397C(64);
  return v0;
}

void sub_100183EC0()
{
}

void sub_100183F04()
{
}

void sub_100183F44(void *a1)
{
  unint64_t v3 = *(void *)(a1[6] + 16);
  uint64_t v4 = a1[2];
  swift_bridgeObjectRetain();
  sub_100183EC0();
  if (!v1)
  {
    for (uint64_t i = a1[6]; v3 < *(void *)(i + 16); uint64_t i = a1[6])
    {
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      a1[6] = i;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_10017FF04();
        uint64_t i = v34;
        a1[6] = v34;
      }
      uint64_t v24 = *(void *)(i + 16);
      if (!v24) {
        goto LABEL_37;
      }
      uint64_t v25 = v24 - 1;
      char v26 = *(unsigned char *)(i + v25 + 32);
      *(void *)(i + 16) = v25;
      a1[6] = i;
      uint64_t v27 = a1[5];
      char v28 = swift_isUniquelyReferenced_nonNull_native();
      a1[5] = v27;
      if (v26)
      {
        if ((v28 & 1) == 0)
        {
          sub_1001796A0();
          uint64_t v27 = v35;
          a1[5] = v35;
        }
        unint64_t v29 = *(void *)(v27 + 16);
        if (v29 >= *(void *)(v27 + 24) >> 1)
        {
          sub_1001796A0();
          uint64_t v27 = v36;
          a1[5] = v36;
        }
        *(void *)(v27 + 16) = v29 + 1;
        uint64_t v30 = v27 + 24 * v29;
        *(_OWORD *)(v30 + 32) = xmmword_1001AB3A0;
        uint64_t v31 = v30 + 32;
      }
      else
      {
        if ((v28 & 1) == 0)
        {
          sub_1001796A0();
          uint64_t v27 = v37;
          a1[5] = v37;
        }
        unint64_t v32 = *(void *)(v27 + 16);
        if (v32 >= *(void *)(v27 + 24) >> 1)
        {
          sub_1001796A0();
          uint64_t v27 = v38;
          a1[5] = v38;
        }
        *(void *)(v27 + 16) = v32 + 1;
        uint64_t v33 = v27 + 24 * v32;
        *(void *)(v33 + 32) = 0;
        *(void *)(v33 + 40) = 0;
        uint64_t v31 = v33 + 32;
      }
      *(unsigned char *)(v31 + 16) = 1;
    }
LABEL_35:
    a1[2] = v4;
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    return;
  }
  uint64_t v5 = a1[6];
  if (v3 >= *(void *)(v5 + 16)) {
    goto LABEL_35;
  }
  while (1)
  {
    char v6 = swift_isUniquelyReferenced_nonNull_native();
    a1[6] = v5;
    if ((v6 & 1) == 0)
    {
      sub_10017FF04();
      uint64_t v5 = v17;
      a1[6] = v17;
    }
    uint64_t v7 = *(void *)(v5 + 16);
    if (!v7) {
      break;
    }
    uint64_t v8 = v7 - 1;
    char v9 = *(unsigned char *)(v5 + v8 + 32);
    *(void *)(v5 + 16) = v8;
    a1[6] = v5;
    uint64_t v10 = a1[5];
    char v11 = swift_isUniquelyReferenced_nonNull_native();
    a1[5] = v10;
    if (v9)
    {
      if ((v11 & 1) == 0)
      {
        sub_1001796A0();
        uint64_t v10 = v18;
        a1[5] = v18;
      }
      unint64_t v12 = *(void *)(v10 + 16);
      if (v12 >= *(void *)(v10 + 24) >> 1)
      {
        sub_1001796A0();
        uint64_t v10 = v19;
        a1[5] = v19;
      }
      *(void *)(v10 + 16) = v12 + 1;
      uint64_t v13 = v10 + 24 * v12;
      *(_OWORD *)(v13 + 32) = xmmword_1001AB3A0;
      uint64_t v14 = v13 + 32;
    }
    else
    {
      if ((v11 & 1) == 0)
      {
        sub_1001796A0();
        uint64_t v10 = v20;
        a1[5] = v20;
      }
      unint64_t v15 = *(void *)(v10 + 16);
      if (v15 >= *(void *)(v10 + 24) >> 1)
      {
        sub_1001796A0();
        uint64_t v10 = v21;
        a1[5] = v21;
      }
      *(void *)(v10 + 16) = v15 + 1;
      uint64_t v16 = v10 + 24 * v15;
      *(void *)(v16 + 32) = 0;
      *(void *)(v16 + 40) = 0;
      uint64_t v14 = v16 + 32;
    }
    *(unsigned char *)(v14 + 16) = 1;
    uint64_t v5 = a1[6];
    if (v3 >= *(void *)(v5 + 16)) {
      goto LABEL_35;
    }
  }
  __break(1u);
LABEL_37:
  __break(1u);
}

void sub_1001842C0(void (*a1)(uint64_t))
{
  unint64_t v4 = *(void *)(v1[6] + 16);
  uint64_t v5 = v1[2];
  uint64_t v6 = swift_bridgeObjectRetain();
  a1(v6);
  if (!v2)
  {
    for (uint64_t i = v1[6]; v4 < *(void *)(i + 16); uint64_t i = v1[6])
    {
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v1[6] = i;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_10017FF04();
        uint64_t i = v36;
        v1[6] = v36;
      }
      uint64_t v26 = *(void *)(i + 16);
      if (!v26) {
        goto LABEL_37;
      }
      uint64_t v27 = v26 - 1;
      char v28 = *(unsigned char *)(i + v27 + 32);
      *(void *)(i + 16) = v27;
      v1[6] = i;
      uint64_t v29 = v1[5];
      char v30 = swift_isUniquelyReferenced_nonNull_native();
      v1[5] = v29;
      if (v28)
      {
        if ((v30 & 1) == 0)
        {
          sub_1001796A0();
          uint64_t v29 = v37;
          v1[5] = v37;
        }
        unint64_t v31 = *(void *)(v29 + 16);
        if (v31 >= *(void *)(v29 + 24) >> 1)
        {
          sub_1001796A0();
          uint64_t v29 = v38;
          v1[5] = v38;
        }
        *(void *)(v29 + 16) = v31 + 1;
        uint64_t v32 = v29 + 24 * v31;
        *(_OWORD *)(v32 + 32) = xmmword_1001AB3A0;
        uint64_t v33 = v32 + 32;
      }
      else
      {
        if ((v30 & 1) == 0)
        {
          sub_1001796A0();
          uint64_t v29 = v39;
          v1[5] = v39;
        }
        unint64_t v34 = *(void *)(v29 + 16);
        if (v34 >= *(void *)(v29 + 24) >> 1)
        {
          sub_1001796A0();
          uint64_t v29 = v40;
          v1[5] = v40;
        }
        *(void *)(v29 + 16) = v34 + 1;
        uint64_t v35 = v29 + 24 * v34;
        *(void *)(v35 + 32) = 0;
        *(void *)(v35 + 40) = 0;
        uint64_t v33 = v35 + 32;
      }
      *(unsigned char *)(v33 + 16) = 1;
    }
LABEL_35:
    v1[2] = v5;
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v7 = v1[6];
  if (v4 >= *(void *)(v7 + 16)) {
    goto LABEL_35;
  }
  while (1)
  {
    char v8 = swift_isUniquelyReferenced_nonNull_native();
    v1[6] = v7;
    if ((v8 & 1) == 0)
    {
      sub_10017FF04();
      uint64_t v7 = v19;
      v1[6] = v19;
    }
    uint64_t v9 = *(void *)(v7 + 16);
    if (!v9) {
      break;
    }
    uint64_t v10 = v9 - 1;
    char v11 = *(unsigned char *)(v7 + v10 + 32);
    *(void *)(v7 + 16) = v10;
    v1[6] = v7;
    uint64_t v12 = v1[5];
    char v13 = swift_isUniquelyReferenced_nonNull_native();
    v1[5] = v12;
    if (v11)
    {
      if ((v13 & 1) == 0)
      {
        sub_1001796A0();
        uint64_t v12 = v20;
        v1[5] = v20;
      }
      unint64_t v14 = *(void *)(v12 + 16);
      if (v14 >= *(void *)(v12 + 24) >> 1)
      {
        sub_1001796A0();
        uint64_t v12 = v21;
        v1[5] = v21;
      }
      *(void *)(v12 + 16) = v14 + 1;
      uint64_t v15 = v12 + 24 * v14;
      *(_OWORD *)(v15 + 32) = xmmword_1001AB3A0;
      uint64_t v16 = v15 + 32;
    }
    else
    {
      if ((v13 & 1) == 0)
      {
        sub_1001796A0();
        uint64_t v12 = v22;
        v1[5] = v22;
      }
      unint64_t v17 = *(void *)(v12 + 16);
      if (v17 >= *(void *)(v12 + 24) >> 1)
      {
        sub_1001796A0();
        uint64_t v12 = v23;
        v1[5] = v23;
      }
      *(void *)(v12 + 16) = v17 + 1;
      uint64_t v18 = v12 + 24 * v17;
      *(void *)(v18 + 32) = 0;
      *(void *)(v18 + 40) = 0;
      uint64_t v16 = v18 + 32;
    }
    *(unsigned char *)(v16 + 16) = 1;
    uint64_t v7 = v1[6];
    if (v4 >= *(void *)(v7 + 16)) {
      goto LABEL_35;
    }
  }
  __break(1u);
LABEL_37:
  __break(1u);
}

uint64_t sub_10018461C()
{
  sub_1001798B8();
  uint64_t v1 = *(void *)(*(void *)(v0 + 40) + 16);
  sub_10017995C(v1);
  sub_10002C820(v1 + 1);
  uint64_t v4 = v3 + v1 * v2;
  *(_OWORD *)(v4 + 32) = xmmword_1001AB3A0;
  *(unsigned char *)(v4 + 48) = 0;
  sub_1001798A0();
  uint64_t v5 = *(void *)(*(void *)(v0 + 48) + 16);
  sub_100179944(v5);
  uint64_t v6 = *(void *)(v0 + 48);
  *(void *)(v6 + 16) = v5 + 1;
  *(unsigned char *)(v6 + v5 + 32) = 1;
  type metadata accessor for KeyedContainer();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_getWitnessTable();
  return KeyedEncodingContainer.init<A>(_:)();
}

uint64_t sub_100184728@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1;
  sub_1001798B8();
  uint64_t v4 = *(void *)(v1[5] + 16);
  sub_10017995C(v4);
  sub_10002C820(v4 + 1);
  uint64_t v7 = v6 + v4 * v5;
  *(void *)(v7 + 32) = 0;
  *(void *)(v7 + 40) = 0;
  *(unsigned char *)(v7 + 48) = 0;
  sub_1001798A0();
  uint64_t v8 = *(void *)(v1[6] + 16);
  sub_100179944(v8);
  uint64_t v9 = v1[6];
  *(void *)(v9 + 16) = v8 + 1;
  *(unsigned char *)(v9 + v8 + 32) = 0;
  uint64_t v10 = v1[2];
  a1[3] = &unk_100206408;
  a1[4] = sub_100185E80();
  *a1 = 0;
  a1[1] = v10;
  a1[2] = v2;
  swift_bridgeObjectRetain();

  return swift_retain();
}

uint64_t sub_1001847EC@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 16);
  a1[3] = &unk_100206490;
  a1[4] = sub_1001855D0();
  *a1 = v3;
  a1[1] = v1;
  swift_bridgeObjectRetain();

  return swift_retain();
}

void sub_10018484C(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain();
  sub_1001798B8();
  uint64_t v5 = *(void *)(*(void *)(v2 + 40) + 16);
  sub_10017995C(v5);
  sub_10002C820(v5 + 1);
  uint64_t v8 = v7 + v5 * v6;
  *(void *)(v8 + 32) = a1;
  *(void *)(v8 + 40) = a2;
  *(unsigned char *)(v8 + 48) = 3;
}

void sub_1001848C0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = dispatch thunk of CodingKey.stringValue.getter();
  uint64_t v7 = v6;
  sub_1001798B8();
  uint64_t v8 = *(void *)(*(void *)(v2 + 40) + 16);
  sub_10017995C(v8);
  sub_10002C820(v8 + 1);
  uint64_t v11 = v10 + v8 * v9;
  *(void *)(v11 + 32) = v5;
  *(void *)(v11 + 40) = v7;
  *(unsigned char *)(v11 + 48) = 2;
  sub_10018484C(a1, a2);
}

uint64_t sub_100184964(unint64_t a1, void *a2)
{
  if (a1 >> 61 == 3)
  {
    long long v5 = *(_OWORD *)((a1 & 0x1FFFFFFFFFFFFFFFLL) + 0x20);
    v8[0] = *(_OWORD *)((a1 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
    v8[1] = v5;
    long long v8[2] = *(_OWORD *)((a1 & 0x1FFFFFFFFFFFFFFFLL) + 0x30);
    uint64_t v9 = *(void *)((a1 & 0x1FFFFFFFFFFFFFFFLL) + 0x40);
    swift_retain();
    sub_100184F1C((uint64_t)v8);
    return swift_release();
  }
  if (!(a1 >> 61))
  {
    char v4 = *(unsigned char *)(a1 + 16);
    swift_retain();
    sub_100184DB4(v4);
    return swift_release();
  }
  void v7[3] = *a2;
  v7[4] = sub_100186230();
  v7[0] = a2;
  swift_retain();
  swift_retain();
  AvroSchema.encode(to:)(v7, a1);
  swift_release();
  return sub_10001CA50((uint64_t)v7);
}

uint64_t sub_100184A78(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v29 = a4;
  uint64_t v20 = *a2;
  uint64_t v7 = *(void *)(a3 - 8);
  __chkstk_darwin(a1);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v20 - v11;
  double v14 = __chkstk_darwin(v13);
  uint64_t v15 = *(void (**)(char *, uint64_t, double))(v7 + 16);
  v15((char *)&v20 - v16, a1, v14);
  if (swift_dynamicCast())
  {
    if ((unint64_t)v21 >> 61 == 3)
    {
      long long v19 = *(_OWORD *)((v21 & 0x1FFFFFFFFFFFFFFFLL) + 0x20);
      v25[0] = *(_OWORD *)((v21 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
      v25[1] = v19;
      v25[2] = *(_OWORD *)((v21 & 0x1FFFFFFFFFFFFFFFLL) + 0x30);
      uint64_t v26 = *(void *)((v21 & 0x1FFFFFFFFFFFFFFFLL) + 0x40);
      swift_retain();
      sub_100184F1C((uint64_t)v25);
      return swift_release_n();
    }
    if (!((unint64_t)v21 >> 61))
    {
      char v17 = *(unsigned char *)(v21 + 16);
      swift_retain();
      sub_100184DB4(v17);
      return swift_release_n();
    }
    *((void *)&v22 + 1) = v20;
    *(void *)&long long v23 = sub_100186230();
    *(void *)&long long v21 = a2;
    swift_retain();
    dispatch thunk of Encodable.encode(to:)();
    swift_release();
  }
  else
  {
    ((void (*)(char *, uint64_t, uint64_t))v15)(v12, a1, a3);
    if (swift_dynamicCast()) {
      return sub_100184DB4(v21);
    }
    ((void (*)(char *, uint64_t, uint64_t))v15)(v9, a1, a3);
    if (swift_dynamicCast())
    {
      v27[0] = v21;
      v27[1] = v22;
      v27[2] = v23;
      uint64_t v28 = v24;
      sub_100184F1C((uint64_t)v27);
      return sub_100168730((uint64_t)v27);
    }
    *((void *)&v22 + 1) = v20;
    *(void *)&long long v23 = sub_100186230();
    *(void *)&long long v21 = a2;
    swift_retain();
    dispatch thunk of Encodable.encode(to:)();
  }
  return sub_10001CA50((uint64_t)&v21);
}

uint64_t sub_100184DB4(char a1)
{
  uint64_t v4 = *(void *)(v1 + 40);
  uint64_t v3 = (uint64_t *)(v1 + 40);
  if (*(void *)(v4 + 16))
  {
    uint64_t v5 = sub_10016765C(a1);
    uint64_t v7 = v6;
    sub_1001798B8();
    uint64_t v8 = *(void *)(*v3 + 16);
    uint64_t result = sub_10017995C(v8);
    uint64_t v10 = *v3;
    *(void *)(v10 + 16) = v8 + 1;
    uint64_t v11 = v10 + 24 * v8;
    *(void *)(v11 + 32) = v5;
    uint64_t v12 = v11 + 32;
    char v13 = 3;
  }
  else
  {
    sub_1001798B8();
    uint64_t v14 = *(void *)(*v3 + 16);
    sub_10017995C(v14);
    uint64_t v15 = *v3;
    *(void *)(v15 + 16) = v14 + 1;
    uint64_t v16 = v15 + 24 * v14;
    *(_OWORD *)(v16 + 32) = xmmword_1001AB3A0;
    *(unsigned char *)(v16 + 48) = 0;
    sub_1001798B8();
    uint64_t v17 = *(void *)(*v3 + 16);
    sub_10017995C(v17);
    uint64_t v18 = *v3;
    *(void *)(v18 + 16) = v17 + 1;
    uint64_t v19 = v18 + 24 * v17;
    *(_OWORD *)(v19 + 32) = xmmword_1001AE500;
    *(unsigned char *)(v19 + 48) = 2;
    uint64_t v20 = sub_10016765C(a1);
    uint64_t v22 = v21;
    sub_1001798B8();
    uint64_t v23 = *(void *)(*v3 + 16);
    sub_10017995C(v23);
    uint64_t v24 = *v3;
    *(void *)(v24 + 16) = v23 + 1;
    uint64_t v25 = v24 + 24 * v23;
    *(void *)(v25 + 32) = v20;
    *(void *)(v25 + 40) = v22;
    *(unsigned char *)(v25 + 48) = 3;
    sub_1001798B8();
    uint64_t v26 = *(void *)(*v3 + 16);
    uint64_t result = sub_10017995C(v26);
    uint64_t v7 = 0;
    uint64_t v27 = *v3;
    *(void *)(v27 + 16) = v26 + 1;
    uint64_t v28 = v27 + 24 * v26;
    char v13 = 1;
    *(void *)(v28 + 32) = 1;
    uint64_t v12 = v28 + 32;
  }
  *(void *)(v12 + 8) = v7;
  *(unsigned char *)(v12 + 16) = v13;
  return result;
}

uint64_t sub_100184F1C(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = *v1;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  sub_100093F9C(a1);
  sub_100185FE4(a1, v5, v6, (uint64_t)&v18);
  swift_endAccess();
  swift_bridgeObjectRelease();
  uint64_t v8 = *((void *)&v18 + 1);
  if (!*((void *)&v18 + 1))
  {
    *((void *)&v19 + 1) = v7;
    *(void *)&long long v20 = sub_100186230();
    *(void *)&long long v18 = v3;
    swift_retain();
    AvroRecordSchema.encode(to:)(&v18);
    return sub_10001CA50((uint64_t)&v18);
  }
  uint64_t v26 = v2;
  uint64_t v9 = v18;
  long long v22 = v18;
  long long v23 = v19;
  long long v24 = v20;
  uint64_t v25 = v21;
  if (static AvroRecordSchema.__derived_struct_equals(_:_:)())
  {
    sub_1001862CC(v9, v8);
    *((void *)&v19 + 1) = v7;
    *(void *)&long long v20 = sub_100186230();
    *(void *)&long long v18 = v3;
    swift_retain();
    String.encode(to:)();
    return sub_10001CA50((uint64_t)&v18);
  }
  uint64_t v11 = swift_allocObject();
  long long v12 = v23;
  *(_OWORD *)(v11 + 16) = v22;
  *(_OWORD *)(v11 + 32) = v12;
  *(_OWORD *)(v11 + 48) = v24;
  *(void *)(v11 + 64) = v25;
  uint64_t v13 = v11 | 0x6000000000000000;
  uint64_t v14 = swift_allocObject();
  long long v15 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v14 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v14 + 32) = v15;
  *(_OWORD *)(v14 + 48) = *(_OWORD *)(a1 + 32);
  *(void *)(v14 + 64) = *(void *)(a1 + 48);
  uint64_t v16 = v14 | 0x6000000000000000;
  sub_10017FFFC();
  swift_allocError();
  *uint64_t v17 = v13;
  v17[1] = v16;
  sub_100093F9C(a1);
  return swift_willThrow();
}

void sub_100185148()
{
  uint64_t v1 = dispatch thunk of CodingKey.stringValue.getter();
  uint64_t v3 = v2;
  sub_1001798B8();
  uint64_t v4 = *(void *)(*(void *)(v0 + 40) + 16);
  sub_10017995C(v4);
  sub_10002C820(v4 + 1);
  uint64_t v7 = v6 + v4 * v5;
  *(void *)(v7 + 32) = v1;
  *(void *)(v7 + 40) = v3;
  *(unsigned char *)(v7 + 48) = 2;
  sub_100183F04();
}

uint64_t sub_1001851FC()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_10018523C()
{
  sub_1001851FC();

  return _swift_deallocClassInstance(v0, 56, 7);
}

unsigned char *sub_100185270(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10018533CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void type metadata accessor for SchemaEncoder.ContainerKind()
{
}

uint64_t sub_100185374(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 0xFE) == 2) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_10018538C(uint64_t a1)
{
  return sub_10018539C(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t sub_10018539C(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 0xFE) == 2) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1001853B4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_100185374(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t sub_100185400(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_100185374(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  char v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  sub_10018539C(v6, v7, v8);
  return a1;
}

uint64_t sub_100185458(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  sub_10018539C(v4, v5, v6);
  return a1;
}

void type metadata accessor for SchemaEncoder.Token()
{
}

unint64_t sub_1001854B0()
{
  unint64_t result = qword_100224230;
  if (!qword_100224230)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100224230);
  }
  return result;
}

unint64_t sub_100185500()
{
  unint64_t result = qword_100224238;
  if (!qword_100224238)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100224238);
  }
  return result;
}

uint64_t sub_10018554C()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_100185558()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_100185564()
{
  return sub_10018461C();
}

uint64_t sub_100185588@<X0>(void *a1@<X8>)
{
  return sub_100184728(a1);
}

uint64_t sub_1001855AC@<X0>(void *a1@<X8>)
{
  return sub_1001847EC(a1);
}

unint64_t sub_1001855D0()
{
  unint64_t result = qword_100224240;
  if (!qword_100224240)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100224240);
  }
  return result;
}

void sub_10018561C(uint64_t a1, uint64_t a2)
{
}

void sub_100185648()
{
}

void sub_100185678()
{
}

void sub_100185688()
{
}

void sub_10018569C(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1001856B4()
{
  return KeyedEncodingContainerProtocol.encode(_:forKey:)();
}

uint64_t sub_1001856CC()
{
  return KeyedEncodingContainerProtocol.encode(_:forKey:)();
}

void sub_1001856E4()
{
}

uint64_t sub_10018570C()
{
  return KeyedEncodingContainerProtocol.encodeConditional<A>(_:forKey:)();
}

uint64_t sub_100185738()
{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

uint64_t sub_100185750()
{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

uint64_t sub_100185768()
{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

uint64_t sub_100185784(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100185978(a1, a2, a3, a4, (uint64_t (*)(uint64_t))&KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:));
}

uint64_t sub_1001857B0()
{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

uint64_t sub_1001857CC(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1001858D0(a1, a2, a3, a4, (uint64_t (*)(void))&KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:));
}

uint64_t sub_1001857F8(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100185924(a1, a2, a3, a4, (uint64_t (*)(void))&KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:));
}

uint64_t sub_100185824(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100185978(a1, a2, a3, a4, (uint64_t (*)(uint64_t))&KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:));
}

uint64_t sub_100185850()
{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

uint64_t sub_10018586C()
{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

uint64_t sub_100185888()
{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

uint64_t sub_1001858A4(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1001858D0(a1, a2, a3, a4, (uint64_t (*)(void))&KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:));
}

uint64_t sub_1001858D0(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5(a1 & 0x1FF);
}

uint64_t sub_1001858F8(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100185924(a1, a2, a3, a4, (uint64_t (*)(void))&KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:));
}

uint64_t sub_100185924(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5(a1 & 0x1FFFF);
}

uint64_t sub_10018594C(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100185978(a1, a2, a3, a4, (uint64_t (*)(uint64_t))&KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:));
}

uint64_t sub_100185978(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  return a5(a1 | ((HIDWORD(a1) & 1) << 32));
}

uint64_t sub_1001859A8()
{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

uint64_t sub_1001859C4()
{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

uint64_t sub_1001859E0()
{
  return KeyedEncodingContainerProtocol.encodeIfPresent<A>(_:forKey:)();
}

void sub_100185A0C(uint64_t a1, uint64_t a2)
{
  if (__OFADD__(*v2, 1))
  {
    __break(1u);
  }
  else
  {
    ++*v2;
    sub_10018484C(a1, a2);
  }
}

void sub_100185A4C()
{
  if (__OFADD__(*v0, 1))
  {
    __break(1u);
  }
  else
  {
    ++*v0;
    sub_100183F04();
  }
}

uint64_t sub_100185A84()
{
  return swift_bridgeObjectRetain();
}

void sub_100185A8C(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100185AA4()
{
  return UnkeyedEncodingContainer.encode(_:)();
}

uint64_t sub_100185ABC()
{
  return UnkeyedEncodingContainer.encode(_:)();
}

void sub_100185AD4()
{
}

uint64_t sub_100185AEC()
{
  return UnkeyedEncodingContainer.encodeConditional<A>(_:)();
}

uint64_t sub_100185B18()
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

uint64_t sub_100185B44()
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

uint64_t sub_100185B70()
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

uint64_t sub_100185B9C()
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

uint64_t sub_100185BC8()
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

uint64_t sub_100185BF4()
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

uint64_t sub_100185C20()
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

uint64_t sub_100185C4C()
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

uint64_t sub_100185C78()
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

uint64_t sub_100185CA4()
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

uint64_t sub_100185CD0()
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

uint64_t sub_100185CFC()
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

uint64_t sub_100185D28()
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

uint64_t sub_100185D54()
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

uint64_t sub_100185D80()
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

uint64_t sub_100185DAC()
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

uint64_t sub_100185DD8()
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

void sub_100185E0C(uint64_t a1, uint64_t a2)
{
}

void sub_100185E38(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100185E50()
{
  return SingleValueEncodingContainer.encode(_:)();
}

uint64_t sub_100185E68()
{
  return SingleValueEncodingContainer.encode(_:)();
}

unint64_t sub_100185E80()
{
  unint64_t result = qword_100224248;
  if (!qword_100224248)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100224248);
  }
  return result;
}

uint64_t type metadata accessor for KeyedContainer()
{
  return sub_100040C54();
}

uint64_t sub_100185EE4(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 != -1) {
    return sub_100185374(a1, a2, a3);
  }
  return a1;
}

uint64_t sub_100185EF8(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 != -1) {
    return sub_10018539C(a1, a2, a3);
  }
  return a1;
}

void *sub_100185F0C(unint64_t a1, uint64_t a2, uint64_t a3, void *__src, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  char v6 = (void *)(a5[6] + 16 * a1);
  *char v6 = a2;
  v6[1] = a3;
  unint64_t result = memcpy((void *)(a5[7] + 72 * a1), __src, 0x41uLL);
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

unint64_t sub_100185F80(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1 << result;
  uint64_t v5 = (void *)(a5[6] + 16 * result);
  *uint64_t v5 = a2;
  v5[1] = a3;
  uint64_t v6 = a5[7] + 56 * result;
  long long v7 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)uint64_t v6 = *(_OWORD *)a4;
  *(_OWORD *)(v6 + 16) = v7;
  *(_OWORD *)(v6 + 32) = *(_OWORD *)(a4 + 32);
  *(void *)(v6 + 48) = *(void *)(a4 + 48);
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

uint64_t sub_100185FE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v11 = *v4;
  *uint64_t v4 = 0x8000000000000000;
  sub_10018607C(a1, a2, a3, isUniquelyReferenced_nonNull_native, a4);
  *uint64_t v4 = v11;

  return swift_bridgeObjectRelease();
}

uint64_t sub_10018607C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v6 = (void **)v5;
  long long v12 = (void *)*v5;
  unint64_t v13 = sub_1000287F0(a2, a3);
  uint64_t v15 = v12[2];
  BOOL v16 = (v14 & 1) == 0;
  Swift::Int v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v18 = v13;
  char v19 = v14;
  sub_10002572C(qword_100224258);
  uint64_t result = _NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v17);
  if ((result & 1) == 0) {
    goto LABEL_5;
  }
  uint64_t result = sub_1000287F0(a2, a3);
  if ((v19 & 1) != (v21 & 1))
  {
LABEL_11:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v18 = result;
LABEL_5:
  long long v22 = *v6;
  if (v19)
  {
    uint64_t v23 = v22[7] + 56 * v18;
    uint64_t v24 = *(void *)(v23 + 16);
    uint64_t v25 = *(void *)(v23 + 24);
    uint64_t v26 = *(void *)(v23 + 48);
    *(_OWORD *)a5 = *(_OWORD *)v23;
    *(void *)(a5 + 16) = v24;
    *(void *)(a5 + 24) = v25;
    *(_OWORD *)(a5 + 32) = *(_OWORD *)(v23 + 32);
    *(void *)(a5 + 48) = v26;
    long long v27 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(v23 + 16) = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(v23 + 32) = v27;
    *(_OWORD *)uint64_t v23 = *(_OWORD *)a1;
    *(void *)(v23 + 48) = *(void *)(a1 + 48);
  }
  else
  {
    sub_100185F80(v18, a2, a3, a1, v22);
    *(void *)(a5 + 48) = 0;
    *(_OWORD *)(a5 + 16) = 0u;
    *(_OWORD *)(a5 + 32) = 0u;
    *(_OWORD *)a5 = 0u;
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1001861F8(unint64_t *a1, void *a2)
{
  return sub_100184964(*a1, a2);
}

uint64_t sub_100186214()
{
  return sub_1001861F8(*(unint64_t **)(v0 + 16), *(void **)(v0 + 24));
}

unint64_t sub_100186230()
{
  unint64_t result = qword_100224250;
  if (!qword_100224250)
  {
    type metadata accessor for SchemaEncoder();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100224250);
  }
  return result;
}

uint64_t sub_10018627C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_1001862CC(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100186330()
{
  return sub_100184A78(*(void *)(v0 + 32), *(uint64_t **)(v0 + 40), *(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100186354()
{
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t sub_1001863A4()
{
  swift_bridgeObjectRelease();

  return swift_release();
}

void *sub_1001863E0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

void *sub_100186420(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_100186488(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  return a1;
}

void type metadata accessor for UnkeyedContainer()
{
}

void *sub_1001864DC(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

void *sub_100186514(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *sub_100186574(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

void type metadata accessor for SingleValueContainer()
{
}

uint64_t sub_1001865C0(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 24);
}

uint64_t BiomeSearchTablesProvider.__allocating_init(environment:feedbackConfig:feedbackStreamDescriptors:)()
{
  return BiomeSearchTablesProvider.init(environment:feedbackConfig:feedbackStreamDescriptors:)();
}

uint64_t BiomeSearchTablesProvider.init(environment:feedbackConfig:feedbackStreamDescriptors:)()
{
  sub_100024E9C();
  uint64_t v4 = type metadata accessor for BiomeSearchTablesConfig(0);
  uint64_t v9 = v4;
  uint64_t v10 = &off_100206880;
  uint64_t v5 = sub_10002E5E8((uint64_t *)&v8);
  uint64_t v6 = type metadata accessor for FeedbackStoreConfig();
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(v5, v1, v6);
  *(uint64_t *)((char *)v5 + *(int *)(v4 + 20)) = v0;
  return BiomeTablesProvider.init(config:environment:)(&v8, v3, v2);
}

uint64_t type metadata accessor for BiomeSearchTablesConfig(uint64_t a1)
{
  return sub_100027D28(a1, qword_1002244C8);
}

uint64_t BiomeTablesProvider.init(config:environment:)(long long *a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + 56) = 0;
  *(unsigned char *)(v3 + 64) = 0;
  sub_10001C1AC(a1, v3 + 16);
  *(void *)(v3 + 72) = a2;
  *(void *)(v3 + 80) = a3;
  return v3;
}

void BiomeSearchTablesProvider.init(config:environment:)()
{
}

uint64_t BiomeSearchTablesProvider.deinit()
{
  return BiomeTablesProvider.deinit();
}

uint64_t BiomeTablesProvider.deinit()
{
  sub_10001CA50(v0 + 16);
  swift_release();
  swift_unknownObjectRelease();
  return v0;
}

uint64_t BiomeSearchTablesProvider.__deallocating_deinit()
{
  uint64_t v0 = BiomeTablesProvider.deinit();

  return _swift_deallocClassInstance(v0, 88, 7);
}

id sub_1001867FC()
{
  return *(id *)(v0 + 32);
}

void *sub_100186804()
{
  uint64_t v1 = type metadata accessor for FeedbackStreamDescriptor();
  sub_100020C48();
  uint64_t v3 = v2;
  __chkstk_darwin(v4);
  sub_100024A64();
  uint64_t v7 = v5 - v6;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v30 - v9;
  uint64_t v11 = *(void *)(v0 + *(int *)(type metadata accessor for BiomeSearchTablesConfig(0) + 20));
  uint64_t v12 = *(void *)(v11 + 16);
  if (!v12) {
    return _swiftEmptyArrayStorage;
  }
  char v14 = *(void (**)(uint64_t, char *, uint64_t))(v3 + 16);
  uint64_t v13 = v3 + 16;
  uint64_t v15 = (char *)(v11 + ((*(unsigned __int8 *)(v13 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 64)));
  uint64_t v35 = *(void *)(v13 + 56);
  uint64_t v36 = v14;
  unint64_t v34 = (uint64_t (**)(uint64_t, uint64_t))(v13 + 72);
  int v33 = enum case for FeedbackStreamDescriptor.session(_:);
  BOOL v16 = (void (**)(void))(v13 - 8);
  v30[1] = v11;
  swift_bridgeObjectRetain();
  Swift::Int v17 = _swiftEmptyArrayStorage;
  do
  {
    unint64_t v18 = v36;
    v36((uint64_t)v10, v15, v1);
    uint64_t v19 = v13;
    v18(v7, v10, v1);
    LODWORD(v18) = (*v34)(v7, v1);
    long long v20 = *v16;
    sub_100024380();
    v20();
    if (v18 == v33)
    {
      sub_100024380();
      v20();
    }
    else
    {
      uint64_t v21 = FeedbackStreamDescriptor.tableName.getter();
      uint64_t v31 = v22;
      uint64_t v32 = v21;
      sub_100024380();
      v20();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_10002114C(0, v17[2] + 1, 1, (uint64_t)v17);
        Swift::Int v17 = v27;
      }
      unint64_t v24 = v17[2];
      unint64_t v23 = v17[3];
      if (v24 >= v23 >> 1)
      {
        sub_10002114C(v23 > 1, v24 + 1, 1, (uint64_t)v17);
        Swift::Int v17 = v28;
      }
      void v17[2] = v24 + 1;
      uint64_t v25 = &v17[2 * v24];
      uint64_t v26 = v31;
      v25[4] = v32;
      v25[5] = v26;
    }
    v15 += v35;
    --v12;
    uint64_t v13 = v19;
  }
  while (v12);
  swift_bridgeObjectRelease();
  return v17;
}

uint64_t sub_100186A4C@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  char v72 = a3;
  type metadata accessor for BiomeStreamConfig();
  sub_100020C48();
  uint64_t v73 = v6;
  uint64_t v74 = v5;
  __chkstk_darwin(v5);
  sub_100024A64();
  uint64_t v9 = v7 - v8;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v63 - v11;
  uint64_t v13 = sub_10002572C(&qword_100224500);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)&v63 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for FeedbackStreamDescriptor();
  sub_100020C48();
  uint64_t v79 = v17;
  __chkstk_darwin(v18);
  sub_100024A64();
  uint64_t v21 = (char *)(v19 - v20);
  __chkstk_darwin(v22);
  unint64_t v24 = (char *)&v63 - v23;
  __chkstk_darwin(v25);
  long long v27 = (char *)&v63 - v26;
  swift_bridgeObjectRetain();
  uint64_t v28 = a1;
  uint64_t v29 = v16;
  FeedbackStreamDescriptor.init(tableName:)();
  if (sub_100027BA4((uint64_t)v15, 1, v16) == 1)
  {
    sub_1001876D0((uint64_t)v15);
    unint64_t v77 = 0;
    unint64_t v78 = 0xE000000000000000;
    _StringGuts.grow(_:)(23);
    swift_bridgeObjectRelease();
    unint64_t v77 = 0xD000000000000015;
    unint64_t v78 = 0x80000001001BA1B0;
    v30._uint64_t countAndFlagsBits = v28;
    v30._uint64_t object = a2;
    String.append(_:)(v30);
    unint64_t v31 = v77;
    unint64_t v32 = v78;
    sub_100187730();
    swift_allocError();
    *int v33 = v31;
    v33[1] = v32;
    return swift_willThrow();
  }
  else
  {
    uint64_t v71 = v21;
    uint64_t v35 = v79;
    (*(void (**)(char *, char *, uint64_t))(v79 + 32))(v27, v15, v16);
    uint64_t v36 = v75;
    FeedbackStoreConfig.getConfig(forStream:)();
    if (v36)
    {
      return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v27, v29);
    }
    else
    {
      uint64_t v37 = *(void (**)(void))(v35 + 104);
      LODWORD(v75) = enum case for FeedbackStreamDescriptor.session(_:);
      unint64_t v70 = (void (*)(uint64_t, void, uint64_t))v37;
      v37(v24);
      uint64_t v38 = v9;
      FeedbackStoreConfig.getConfig(forStream:)();
      unint64_t v68 = *(void (**)(char *, uint64_t))(v79 + 8);
      v79 += 8;
      v68(v24, v29);
      uint64_t v76 = BiomeStreamConfig.tableName.getter();
      uint64_t v69 = v39;
      sub_10002572C(&qword_100224510);
      uint64_t v40 = swift_allocObject();
      uint64_t v67 = v12;
      uint64_t v41 = (void *)v40;
      *(_OWORD *)(v40 + 16) = xmmword_1001A3830;
      uint64_t v42 = FeedbackStreamDescriptor.rawValue.getter();
      uint64_t v65 = v43;
      uint64_t v66 = v42;
      uint64_t v44 = BiomeStreamConfig.messageSchemaName.getter();
      uint64_t v64 = v45;
      uint64_t v46 = BiomeStreamConfig.storeConfig.getter();
      uint64_t v47 = v65;
      v41[4] = v66;
      v41[5] = v47;
      uint64_t v48 = v64;
      v41[6] = v44;
      v41[7] = v48;
      v41[8] = v46;
      int64_t v49 = v71;
      v70((uint64_t)v71, v75, v29);
      uint64_t v75 = FeedbackStreamDescriptor.rawValue.getter();
      uint64_t v51 = v50;
      unint64_t v52 = (uint64_t (*)(char *, uint64_t))v68;
      v68(v49, v29);
      uint64_t v53 = v38;
      uint64_t v54 = BiomeStreamConfig.messageSchemaName.getter();
      uint64_t v56 = v55;
      uint64_t v57 = BiomeStreamConfig.storeConfig.getter();
      v41[9] = v75;
      v41[10] = v51;
      v41[11] = v54;
      v41[12] = v56;
      v41[13] = v57;
      unint64_t v58 = v72;
      v72[3] = (uint64_t)&type metadata for BiomeSearchTablesConfig.TableConfig;
      v58[4] = (uint64_t)&off_100224518;
      uint64_t v59 = v69;
      *unint64_t v58 = v76;
      v58[1] = v59;
      v58[2] = (uint64_t)v41;
      unint64_t v60 = *(void (**)(uint64_t, uint64_t))(v73 + 8);
      uint64_t v61 = v53;
      uint64_t v62 = v74;
      v60(v61, v74);
      v60((uint64_t)v67, v62);
      return v52(v27, v29);
    }
  }
}

uint64_t sub_100186F04@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_100186A4C(a1, a2, a3);
}

uint64_t variable initialization expression of BaseBiomeTable.BiomeConnection.estimatedRows()
{
  return 100;
}

double _s14SearchFeedback0aB6CursorC18timeFrameGuidelineSNySdGvpfi_0()
{
  if (qword_100224308 != -1) {
    swift_once();
  }
  return *(double *)&static BiomeStoreEnumerator.Constants.defaultTimeRange;
}

uint64_t variable initialization expression of BiomeDatabaseWriter.feedbackStreamWriters()
{
  type metadata accessor for SessionType();
  sub_10002572C(&qword_100224328);
  sub_100186FD8();

  return Dictionary.init(dictionaryLiteral:)();
}

unint64_t sub_100186FD8()
{
  unint64_t result = qword_1002197A0;
  if (!qword_1002197A0)
  {
    type metadata accessor for SessionType();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002197A0);
  }
  return result;
}

uint64_t variable initialization expression of UploadStateFileStore.logger()
{
  return Logger.init(subsystem:category:)();
}

unint64_t variable initialization expression of UploadStateFileStore.sessionUploadStateFileName()
{
  return 0xD000000000000019;
}

uint64_t variable initialization expression of SessionFeedback.closingDate@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Date();

  return sub_10002538C(a1, 1, 1, v2);
}

uint64_t variable initialization expression of WritableSessionDatabase.locker()
{
  type metadata accessor for Locker();
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = (_DWORD *)swift_slowAlloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = 0;
  return v0;
}

uint64_t variable initialization expression of WritableSessionDatabase.sessions()
{
  type metadata accessor for SessionFeedback(0);

  return Dictionary.init(dictionaryLiteral:)();
}

uint64_t type metadata accessor for BiomeSearchTablesProvider(uint64_t a1)
{
  return sub_100027D28(a1, qword_100224358);
}

uint64_t sub_100187174()
{
  return swift_initClassMetadata2();
}

uint64_t *sub_1001871AC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for FeedbackStoreConfig();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_10018727C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for FeedbackStoreConfig();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);

  return swift_bridgeObjectRelease();
}

uint64_t sub_1001872F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for FeedbackStoreConfig();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_100187370(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for FeedbackStoreConfig();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1001873FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for FeedbackStoreConfig();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_100187478(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for FeedbackStoreConfig();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1001874FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100187510);
}

uint64_t sub_100187510(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for FeedbackStoreConfig();
  sub_1000248F0();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    return sub_100027BA4(a1, a2, v6);
  }
  else
  {
    unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v9 >= 0xFFFFFFFF) {
      LODWORD(v9) = -1;
    }
    return (v9 + 1);
  }
}

uint64_t sub_10018759C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001875B0);
}

void sub_1001875B0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for FeedbackStoreConfig();
  sub_1000248F0();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    sub_10002538C(a1, a2, a2, v8);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
}

uint64_t sub_100187638()
{
  uint64_t result = type metadata accessor for FeedbackStoreConfig();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1001876D0(uint64_t a1)
{
  uint64_t v2 = sub_10002572C(&qword_100224500);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_100187730()
{
  unint64_t result = qword_100224508;
  if (!qword_100224508)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100224508);
  }
  return result;
}

uint64_t destroy for BiomeSearchTablesConfig.TableConfig()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *_s14SearchFeedback23BiomeSearchTablesConfigV11TableConfigVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for BiomeSearchTablesConfig.TableConfig(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for BiomeSearchTablesConfig.TableConfig(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for BiomeSearchTablesConfig.TableConfig()
{
  return &type metadata for BiomeSearchTablesConfig.TableConfig;
}

void destroy for BiomeSearchTablesConfig.TableConfig.StoreConfig(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void **)(a1 + 32);
}

void *initializeWithCopy for BiomeSearchTablesConfig.TableConfig.StoreConfig(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  int v5 = (void *)a2[4];
  a1[4] = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v6 = v5;
  return a1;
}

void *assignWithCopy for BiomeSearchTablesConfig.TableConfig.StoreConfig(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (void *)a2[4];
  int v5 = (void *)a1[4];
  a1[4] = v4;
  id v6 = v4;

  return a1;
}

uint64_t assignWithTake for BiomeSearchTablesConfig.TableConfig.StoreConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  int v5 = *(void **)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);

  return a1;
}

ValueMetadata *type metadata accessor for BiomeSearchTablesConfig.TableConfig.StoreConfig()
{
  return &type metadata for BiomeSearchTablesConfig.TableConfig.StoreConfig;
}

_UNKNOWN **sub_100187A40()
{
  return &off_1002069A0;
}

void type metadata accessor for BMStoreError(uint64_t a1)
{
}

void *SearchSessionTableColumn.columnType.getter(char a1)
{
  unint64_t v1 = &type metadata for Double;
  switch(a1)
  {
    case 1:
      unint64_t v1 = &type metadata for Data;
      sub_100133864();
      break;
    case 2:
    case 3:
    case 7:
      unint64_t v1 = &type metadata for String;
      break;
    case 4:
      unint64_t v1 = &type metadata for Bool;
      break;
    case 5:
    case 6:
      unint64_t v1 = (void *)sub_10002572C(&qword_10021D050);
      sub_100187B24();
      break;
    default:
      return v1;
  }
  return v1;
}

unint64_t sub_100187B24()
{
  unint64_t result = qword_100223688;
  if (!qword_100223688)
  {
    sub_1000371D4(&qword_10021D050);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100223688);
  }
  return result;
}

uint64_t SearchSessionTableColumn.propertyName.getter(char a1)
{
  uint64_t result = 0x536E6F6973736573;
  switch(a1)
  {
    case 1:
      uint64_t result = 0xD000000000000026;
      break;
    case 2:
      uint64_t result = sub_100025F78();
      break;
    case 3:
      uint64_t result = 0x6469754772657375;
      break;
    case 4:
      uint64_t result = 0x656C62616E457564;
      break;
    case 5:
      uint64_t result = 0x437972746E756F63;
      break;
    case 6:
      uint64_t result = sub_10002A8EC();
      break;
    case 7:
      uint64_t result = 0x6F6973726556736FLL;
      break;
    default:
      return result;
  }
  return result;
}

SearchFeedback::SearchSessionTableColumn_optional __swiftcall SearchSessionTableColumn.init(rawValue:)(Swift::String rawValue)
{
  uint64_t object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._uint64_t object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100206528, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 8) {
    return (SearchFeedback::SearchSessionTableColumn_optional)8;
  }
  else {
    return (SearchFeedback::SearchSessionTableColumn_optional)v3;
  }
}

_UNKNOWN **static SearchSessionTableColumn.allCases.getter()
{
  return &off_100206608;
}

uint64_t SearchSessionTableColumn.rawValue.getter(char a1)
{
  uint64_t result = 29556;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x6E6F6973736573;
      break;
    case 2:
      uint64_t result = sub_100025F78();
      break;
    case 3:
      uint64_t result = 0x6975675F72657375;
      break;
    case 4:
      uint64_t result = 0x6C62616E655F7564;
      break;
    case 5:
      uint64_t result = 0x5F7972746E756F63;
      break;
    case 6:
      uint64_t result = sub_10002A8EC();
      break;
    case 7:
      uint64_t result = 0x625F6D6574737973;
      break;
    default:
      return result;
  }
  return result;
}

BOOL sub_100187DDC(uint64_t a1, char *a2, uint64_t a3)
{
  unint64_t v6 = sub_100189648();

  return static SQLiteColumnDescribing.== infix(_:_:)(a1, a2, a3, v6);
}

Swift::Int sub_100187E30()
{
  return sub_100192084(*v0);
}

uint64_t sub_100187E38()
{
  return sub_1001921D0();
}

Swift::Int sub_100187E40(uint64_t a1)
{
  return sub_10019230C(a1, *v1);
}

SearchFeedback::SearchSessionTableColumn_optional sub_100187E48@<W0>(Swift::String *a1@<X0>, SearchFeedback::SearchSessionTableColumn_optional *a2@<X8>)
{
  result.Swift::Bool value = SearchSessionTableColumn.init(rawValue:)(*a1).value;
  a2->Swift::Bool value = result.value;
  return result;
}

uint64_t sub_100187E78@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = SearchSessionTableColumn.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_100187EA4(void *a1@<X8>)
{
  *a1 = &off_100206608;
}

void *sub_100187EB4()
{
  return SearchSessionTableColumn.columnType.getter(*v0);
}

uint64_t sub_100187EBC()
{
  return sub_1001923E0(*v0);
}

void sub_100187EC4()
{
}

Swift::String __swiftcall SearchSessionTable.getModuleName()()
{
  uint64_t v0 = 0x6F69737365735F70;
  unint64_t v1 = (void *)0xE90000000000006ELL;
  result._uint64_t object = v1;
  result._uint64_t countAndFlagsBits = v0;
  return result;
}

uint64_t SearchSessionTable.__allocating_init(config:environment:)()
{
  sub_100027540();
  swift_allocObject();
  sub_10001C20C(v0, (uint64_t)v3);
  uint64_t v1 = sub_100187FCC();
  return sub_1000245B8(v1);
}

uint64_t SearchSessionTable.init(config:environment:)()
{
  sub_100027540();
  sub_10001C20C(v0, (uint64_t)v3);
  uint64_t v1 = sub_100187FCC();
  return sub_1000245B8(v1);
}

uint64_t sub_100187FCC()
{
  sub_100027540();
  sub_10001C20C(v3, v1 + 48);
  *(void *)(v1 + 88) = v2;
  *(void *)(v1 + 96) = v0;
  uint64_t v4 = SQLiteBaseVTab.init(style:)(0);
  return sub_1000245B8(v4);
}

uint64_t SearchSessionTable.deinit()
{
  return sub_100188028();
}

uint64_t sub_100188028()
{
  uint64_t v0 = SQLiteBaseVTab.deinit();
  sub_10001CA50(v0 + 48);
  swift_unknownObjectRelease();
  return v0;
}

uint64_t SearchSessionTable.__deallocating_deinit()
{
  uint64_t v0 = sub_100188028();

  return _swift_deallocClassInstance(v0, 104, 7);
}

uint64_t sub_100188090()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for SearchSessionTable(0);
  uint64_t v4 = sub_100192768();
  if (v1) {
    return v3;
  }
  sub_10001C20C(v4 + 48, (uint64_t)v15);
  swift_release();
  uint64_t v5 = v16;
  uint64_t v6 = v17;
  sub_10001B620(v15, v16);
  (*(void (**)(void *__return_ptr, void, void, uint64_t, uint64_t))(v6 + 16))(v14, *(void *)(v2 + 16), *(void *)(v2 + 24), v5, v6);
  sub_10001B620(v14, v14[3]);
  uint64_t v8 = sub_10001810C();
  v9(v8);
  swift_getAssociatedTypeWitness();
  sub_10002572C(&qword_100224AD0);
  uint64_t v10 = _arrayForceCast<A, B>(_:)();
  uint64_t result = swift_bridgeObjectRelease();
  if (*(void *)(v10 + 16))
  {
    sub_10001C20C(v10 + 32, (uint64_t)v13);
    swift_bridgeObjectRelease();
    sub_10001B620(v13, v13[3]);
    uint64_t v11 = sub_10001810C();
    uint64_t v3 = v12(v11);
    sub_10001CA50((uint64_t)v13);
    sub_10001CA50((uint64_t)v14);
    sub_10001CA50((uint64_t)v15);
    return v3;
  }
  __break(1u);
  return result;
}

uint64_t SearchSessionConnection.checkPlanOrdering(_:)(uint64_t result)
{
  if (*(_DWORD *)(result + 16) == 1)
  {
    uint64_t v1 = result;
    uint64_t v2 = *(unsigned int **)(result + 24);
    if (v2)
    {
      if (!*((unsigned char *)v2 + 4))
      {
        uint64_t result = sub_100188298(*v2);
        if ((result - 1) >= 8u) {
          *(_DWORD *)(v1 + 60) = 1;
        }
      }
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_100188298(uint64_t result)
{
  if ((int)result >= 8)
  {
    uint64_t v1 = 8;
    goto LABEL_5;
  }
  if ((result & 0x80000000) == 0)
  {
    uint64_t v1 = *((unsigned __int8 *)&off_100206608 + (int)result + 32);
LABEL_5:
    swift_bridgeObjectRelease();
    return v1;
  }
  __break(1u);
  return result;
}

uint64_t sub_1001882F8(uint64_t result)
{
  if ((int)result >= 4) {
    return 4;
  }
  if ((result & 0x80000000) == 0) {
    return *((unsigned __int8 *)&off_100206630 + (int)result + 32);
  }
  __break(1u);
  return result;
}

uint64_t SearchSessionConnection.checkPlanConstraints(_:)(unsigned int *a1)
{
  uint64_t v5 = *a1;
  if ((v5 & 0x80000000) != 0)
  {
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  uint64_t v4 = a1;
  if (v5)
  {
    uint64_t v6 = 0;
    int v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = *((void *)a1 + 1);
    uint64_t v11 = 8 * v5;
    uint64_t v2 = _swiftEmptyArrayStorage;
    uint64_t v4 = (unsigned int *)(v10 + 5);
    uint64_t v1 = &off_100206658;
    while (1)
    {
      if (v11 == v6) {
        goto LABEL_41;
      }
      if (!v10) {
        goto LABEL_47;
      }
      uint64_t v12 = *(int *)((char *)v4 - 5);
      if ((int)v12 <= 7)
      {
        if ((v12 & 0x80000000) != 0) {
          goto LABEL_42;
        }
        int v13 = *((unsigned __int8 *)&off_100206658 + v12 + 32);
        if ((v13 - 2) >= 6)
        {
          if (v13)
          {
            if (!*(unsigned char *)v4)
            {
              swift_bridgeObjectRelease();
              return 0;
            }
          }
          else if (*(unsigned char *)v4)
          {
            int v14 = *((unsigned __int8 *)v4 - 1);
            HIDWORD(v15) = v14;
            LODWORD(v15) = v14 - 4;
            switch((v15 >> 2))
            {
              case 0u:
              case 7u:
                uint64_t v18 = v9;
                char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                uint64_t v9 = v18;
                uint64_t v8 = 1;
                if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
                  goto LABEL_25;
                }
                uint64_t v8 = 1;
                goto LABEL_20;
              case 1u:
              case 3u:
                uint64_t v16 = v8;
                char v17 = swift_isUniquelyReferenced_nonNull_native();
                uint64_t v8 = v16;
                uint64_t v9 = 1;
                if (v17)
                {
                  uint64_t v9 = 1;
                }
                else
                {
LABEL_25:
                  int64_t v28 = v2[2] + 1;
                  uint64_t v29 = (uint64_t)v2;
                  uint64_t v30 = v8;
                  uint64_t v31 = v9;
                  unint64_t v32 = sub_100189280(0, v28, 1, v29, &qword_10021AC58, (void (*)(uint64_t, uint64_t, char *))sub_1001192D0);
                  uint64_t v9 = v31;
                  uint64_t v8 = v30;
                  uint64_t v2 = v32;
                }
LABEL_20:
                unint64_t v21 = v2[2];
                unint64_t v20 = v2[3];
                uint64_t v3 = (char *)(v21 + 1);
                if (v21 >= v20 >> 1)
                {
                  uint64_t v25 = (uint64_t)v2;
                  uint64_t v46 = v8;
                  uint64_t v26 = v9;
                  long long v27 = sub_100189280((char *)(v20 > 1), v21 + 1, 1, v25, &qword_10021AC58, (void (*)(uint64_t, uint64_t, char *))sub_1001192D0);
                  uint64_t v9 = v26;
                  uint64_t v8 = v46;
                  uint64_t v2 = v27;
                }
                v2[2] = v3;
                *((unsigned char *)v2 + v21 + 32) = v14;
                if (__OFADD__(v7++, 1))
                {
                  __break(1u);
LABEL_47:
                  __break(1u);
                  goto LABEL_48;
                }
                uint64_t v23 = *((void *)a1 + 4);
                if (!v23) {
                  goto LABEL_49;
                }
                uint64_t v24 = v23 + v6;
                *(_DWORD *)uint64_t v24 = v7;
                *(unsigned char *)(v24 + 4) = 1;
                break;
              default:
                break;
            }
          }
        }
      }
      v6 += 8;
      v4 += 3;
      if (v11 == v6)
      {
        uint64_t v33 = v9 + v8;
        uint64_t v4 = a1;
        goto LABEL_27;
      }
    }
  }
  uint64_t v33 = 0;
  uint64_t v2 = _swiftEmptyArrayStorage;
LABEL_27:
  *((void *)v4 + 8) = *(&off_100206680 + v33 + 4);
  unint64_t v34 = v2[2];
  if (v34 > 0x7FFFFFFE) {
    goto LABEL_44;
  }
  uint64_t v35 = (char *)sqlite3_malloc((int)v34 + 1);
  if (!v35)
  {
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
    JUMPOUT(0x100188754);
  }
  uint64_t v3 = v35;
  *((void *)v4 + 6) = v35;
  int64_t v36 = v2[2];
  uint64_t v1 = _swiftEmptyArrayStorage;
  if (v36)
  {
    swift_bridgeObjectRetain();
    sub_1001895A0(0, v36, 0);
    uint64_t v37 = 0;
    uint64_t v1 = _swiftEmptyArrayStorage;
    while (1)
    {
      int v38 = *((char *)v2 + v37 + 32);
      if (v38 < 0) {
        break;
      }
      unint64_t v40 = _swiftEmptyArrayStorage[2];
      unint64_t v39 = _swiftEmptyArrayStorage[3];
      if (v40 >= v39 >> 1) {
        sub_1001895A0((void *)(v39 > 1), v40 + 1, 1);
      }
      ++v37;
      _swiftEmptyArrayStorage[2] = v40 + 1;
      *((unsigned char *)&_swiftEmptyArrayStorage[4] + v40) = v38;
      if (v36 == v37)
      {
        swift_bridgeObjectRelease();
        goto LABEL_36;
      }
    }
    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
LABEL_36:
  swift_bridgeObjectRetain();
  uint64_t v41 = (char *)_swiftEmptyArrayStorage;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_45:
  }
    uint64_t v41 = sub_100189280(0, v1[2] + 1, 1, (uint64_t)v1, &qword_10021AC80, (void (*)(uint64_t, uint64_t, char *))sub_1001192D0);
  unint64_t v43 = *((void *)v41 + 2);
  unint64_t v42 = *((void *)v41 + 3);
  if (v43 >= v42 >> 1) {
    uint64_t v41 = sub_100189280((char *)(v42 > 1), v43 + 1, 1, (uint64_t)v41, &qword_10021AC80, (void (*)(uint64_t, uint64_t, char *))sub_1001192D0);
  }
  *((void *)v41 + 2) = v43 + 1;
  v41[v43 + 32] = 0;
  swift_bridgeObjectRelease();
  uint64_t v44 = v2[2];
  swift_bridgeObjectRelease();
  sub_100188774(v41 + 32, v44 + 1, v3);
  swift_bridgeObjectRelease();
  uint64_t result = 1;
  v4[14] = 1;
  return result;
}

void *sub_100188774(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000) != 0)
  {
    sub_100020C64();
    sub_100017E1C();
LABEL_11:
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (&__dst[__n] > __src && &__src[__n] > __dst)
  {
    sub_100020C64();
    sub_1000242EC();
    goto LABEL_11;
  }

  return memcpy(__dst, __src, __n);
}

uint64_t sub_100188824(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    sub_100020C64();
    sub_100017E1C();
LABEL_11:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  uint64_t v5 = *(void *)(*(void *)(type metadata accessor for BiomeDatabaseReader.SessionProxy() - 8) + 72) * a2;
  unint64_t v6 = a3 + v5;
  unint64_t v7 = a1 + v5;
  if (v6 > a1 && v7 > a3)
  {
    sub_100020C64();
    sub_1000242EC();
    goto LABEL_11;
  }

  return swift_arrayInitWithCopy();
}

uint64_t SearchSessionConnection.__allocating_init(_:argc:argv:)(uint64_t a1, int a2, uint64_t a3)
{
  return sub_1001889D8(a1, a2, a3, &qword_100224AF0, &qword_100224AF8);
}

uint64_t SearchSessionConnection.init(_:argc:argv:)(uint64_t a1, int a2, uint64_t a3)
{
  return sub_1001889D8(a1, a2, a3, &qword_100224AF0, &qword_100224AF8);
}

uint64_t sub_1001889B0(uint64_t a1, int a2, uint64_t a3)
{
  return sub_1001889D8(a1, a2, a3, &qword_100224AE0, &qword_100224AE8);
}

uint64_t sub_1001889D8(uint64_t a1, int a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  *(void *)(v5 + 40) = 100;
  sub_10002572C(a4);
  uint64_t v9 = swift_dynamicCastClass();
  if (v9)
  {
    if (a2 == 3) {
      return SQLiteBaseVTab.Connection.init(_:argc:argv:)(v9, 3, a3);
    }
    char v11 = 1;
  }
  else
  {
    char v11 = 2;
  }
  sub_100189A30();
  swift_allocError();
  char *v12 = v11;
  swift_willThrow();
  swift_release();
  sub_10002572C(a5);
  return swift_deallocPartialClassInstance();
}

uint64_t SearchFeedbackConnection.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_weakDestroy();

  return _swift_deallocClassInstance(v0, 48, 7);
}

double *sub_100188AFC()
{
  return sub_100188B48();
}

double *sub_100188B48()
{
  uint64_t v1 = (double *)v0;
  uint64_t v2 = qword_100224308;
  swift_retain();
  if (v2 != -1) {
    swift_once();
  }
  *(_OWORD *)(v0 + 72) = static BiomeStoreEnumerator.Constants.defaultTimeRange;
  type metadata accessor for SearchSessionConnection(0);
  uint64_t v3 = swift_dynamicCastClass();
  if (!v3)
  {
    swift_release();
    sub_100189A30();
    swift_allocError();
    *uint64_t v10 = 2;
    swift_willThrow();
LABEL_8:
    swift_release();
    type metadata accessor for SearchSessionCursor(0);
    swift_deallocPartialClassInstance();
    return v1;
  }
  uint64_t v4 = v3;
  swift_retain();
  sub_1000273E0();
  uint64_t v5 = sub_100192814();
  if (v2)
  {
    sub_100024EB4();
    goto LABEL_8;
  }
  uint64_t v7 = v5;
  uint64_t v8 = v6;
  sub_1000273E0();
  Swift::Int v11 = sub_1001928A0(v9);
  uint64_t v13 = v12;
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(ObjectType, v8);
  uint64_t v30 = v7;
  uint64_t v16 = v15;
  uint64_t v17 = swift_getObjectType();
  (*(void (**)(void *__return_ptr, Swift::Int, uint64_t, uint64_t, uint64_t))(v16 + 40))(v29, v11, v13, v17, v16);
  uint64_t v19 = v30;
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000273E0();
  *(double *)(v0 + 72) = sub_100192938();
  *(void *)(v0 + 80) = v20;
  sub_1000273E0();
  uint64_t v21 = sub_100188090();
  uint64_t v23 = v22;
  sub_1000273E0();
  uint64_t v25 = sub_1001929C0(v24);
  double v26 = v1[9];
  double v27 = v1[10];
  sub_10001C20C((uint64_t)v29, (uint64_t)v28);
  type metadata accessor for SessionEnumerator();
  swift_allocObject();
  swift_unknownObjectRetain();
  *((void *)v1 + 8) = sub_10018B28C(v21, v23, v25, v19, v8, v28, v26, v27);
  swift_release();
  swift_retain();
  uint64_t v1 = (double *)sub_100192A48(v4);
  sub_100024EB4();
  swift_unknownObjectRelease();
  sub_10001CA50((uint64_t)v29);
  return v1;
}

uint64_t SearchSessionCursor.readFilterParameters(idxNum:idxStr:arguments:)(uint64_t a1, char *a2, uint64_t a3)
{
  double v4 = *(double *)(v3 + 72);
  double v5 = *(double *)(v3 + 80);
  if (a2)
  {
    uint64_t v6 = *(void *)(a3 + 16);
    if (v6)
    {
      uint64_t v7 = a2;
      uint64_t v8 = a3 + 32;
      do
      {
        int v9 = *v7++;
        double v10 = SQLiteArgument.getDouble()();
        HIDWORD(v11) = v9;
        LODWORD(v11) = v9 - 4;
        switch((v11 >> 2))
        {
          case 0u:
            if (v4 < v10)
            {
              double v4 = v10 + 0.0;
              if (v10 + 0.0 < INFINITY) {
                *(void *)&v4 += (*(uint64_t *)&v4 >> 63) | 1;
              }
            }
            break;
          case 1u:
            if (v10 <= v5) {
              double v5 = v10;
            }
            break;
          case 3u:
            if (v10 < v5)
            {
              double v12 = 0.0 - v10;
              if (v12 < INFINITY) {
                *(void *)&v12 += (*(uint64_t *)&v12 >> 63) | 1;
              }
              double v5 = -v12;
            }
            break;
          case 7u:
            if (v4 <= v10) {
              double v4 = v10;
            }
            break;
          default:
            break;
        }
        v8 += 8;
        --v6;
      }
      while (v6);
    }
  }
  if (v5 >= v4) {
    double v13 = v5;
  }
  else {
    double v13 = v4;
  }
  double v14 = fmax(v4, 0.0);
  if (v5 >= 0.0)
  {
    double v15 = v5;
  }
  else
  {
    double v13 = v14;
    double v15 = 0.0;
  }
  if (v4 < 0.0)
  {
    double v16 = 0.0;
  }
  else
  {
    double v15 = v13;
    double v16 = v4;
  }
  if (v16 > v15)
  {
    __break(1u);
    JUMPOUT(0x10018901CLL);
  }
  uint64_t v17 = *(void *)(v3 + 64);
  double v18 = ClosedRange<>.fromUnixToReferenceTime.getter(v16, v15);
  uint64_t v20 = v19;
  swift_beginAccess();
  *(double *)(v17 + 24) = v18;
  *(void *)(v17 + 32) = v20;
  return 0;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SearchFeedbackCursor.resetSearch()()
{
}

Swift::Int32 __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SearchSessionCursor.setValue(forColumn:on:)(Swift::String forColumn, SQLiter::SQLiteContext on)
{
  uint64_t object = forColumn._object;
  uint64_t countAndFlagsBits = forColumn._countAndFlagsBits;
  swift_bridgeObjectRetain();
  v5._uint64_t countAndFlagsBits = countAndFlagsBits;
  v5._uint64_t object = object;
  switch(SearchSessionTableColumn.init(rawValue:)(v5).value)
  {
    case SearchFeedback_SearchSessionTableColumn_session:
      BiomeStoreEnumerator.setPayload(on:)(on);
      break;
    case SearchFeedback_SearchSessionTableColumn_client:
      sub_10018B7CC((sqlite3_context *)on.context._rawValue);
      break;
    case SearchFeedback_SearchSessionTableColumn_userGuid:
      uint64_t v6 = (sqlite3_context *)sub_10002C82C();
      sub_10018BF88(v6);
      break;
    case SearchFeedback_SearchSessionTableColumn_duEnabled:
      sub_10002C82C();
      sub_10018B910();
      break;
    case SearchFeedback_SearchSessionTableColumn_countryCode:
      uint64_t v7 = (sqlite3_context *)sub_10002C82C();
      sub_10018B964(v7);
      break;
    case SearchFeedback_SearchSessionTableColumn_locale:
      uint64_t v8 = (sqlite3_context *)sub_10002C82C();
      sub_10018B998(v8);
      break;
    case SearchFeedback_SearchSessionTableColumn_systemBuild:
      int v9 = (sqlite3_context *)sub_10002C82C();
      sub_10018BF24(v9);
      break;
    case SearchFeedback_SearchSessionTableColumn_unknownDefault:
      SQLiteContext.setNull()();
      break;
    default:
      sub_10002C82C();
      sub_10018C1E8();
      break;
  }
  return 0;
}

Swift::Int32 __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SearchFeedbackCursor.next()()
{
  (*(void (**)(void))(**(void **)(v0 + 64) + 224))();
  return SQLiteBaseVTab.Cursor.next()();
}

Swift::Bool __swiftcall SearchFeedbackCursor.hasMoreRows()()
{
  return (*(uint64_t (**)(void))(**(void **)(v0 + 64) + 232))() & 1;
}

uint64_t sub_100189214()
{
  return swift_release();
}

uint64_t SearchFeedbackCursor.deinit()
{
  swift_weakDestroy();
  swift_unknownObjectRelease();
  swift_release();
  return v0;
}

uint64_t SearchFeedbackCursor.__deallocating_deinit()
{
  SearchFeedbackCursor.deinit();

  return _swift_deallocClassInstance(v0, 88, 7);
}

char *sub_100189280(char *result, int64_t a2, char a3, uint64_t a4, uint64_t *a5, void (*a6)(uint64_t, uint64_t, char *))
{
  char v8 = (char)result;
  if (a3)
  {
    unint64_t v9 = *(void *)(a4 + 24);
    uint64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v10 = a2;
      }
    }
  }
  else
  {
    uint64_t v10 = a2;
  }
  uint64_t v11 = *(void *)(a4 + 16);
  if (v10 <= v11) {
    uint64_t v12 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v12 = v10;
  }
  if (v12)
  {
    sub_10002572C(a5);
    double v13 = (char *)swift_allocObject();
    size_t v14 = j__malloc_size(v13);
    *((void *)v13 + 2) = v11;
    *((void *)v13 + 3) = 2 * v14 - 64;
  }
  else
  {
    double v13 = (char *)_swiftEmptyArrayStorage;
  }
  double v15 = v13 + 32;
  if (v8)
  {
    a6(a4 + 32, v11, v15);
    *(void *)(a4 + 16) = 0;
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_100066840(0, v11, v15, a4);
  }
  return v13;
}

void *sub_100189370(void *a1, int64_t a2, char a3, uint64_t a4)
{
  return sub_1001893A4(a1, a2, a3, a4, &qword_100224AD8, (void (*)(void, uint64_t, void *, uint64_t))sub_1001894A8, (void (*)(uint64_t, uint64_t, void *))sub_1001493B0);
}

void *sub_1001893A4(void *result, int64_t a2, char a3, uint64_t a4, uint64_t *a5, void (*a6)(void, uint64_t, void *, uint64_t), void (*a7)(uint64_t, uint64_t, void *))
{
  char v10 = (char)result;
  if (a3)
  {
    unint64_t v11 = *(void *)(a4 + 24);
    int64_t v12 = v11 >> 1;
    if ((uint64_t)(v11 >> 1) < a2)
    {
      if (v12 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v11 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v12 = a2;
      }
    }
  }
  else
  {
    int64_t v12 = a2;
  }
  uint64_t v13 = *(void *)(a4 + 16);
  if (v12 <= v13) {
    uint64_t v14 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v14 = v12;
  }
  if (v14)
  {
    sub_10002572C(a5);
    double v15 = (void *)swift_allocObject();
    size_t v16 = j__malloc_size(v15);
    void v15[2] = v13;
    void v15[3] = 2 * ((uint64_t)(v16 - 32) / 16);
  }
  else
  {
    double v15 = _swiftEmptyArrayStorage;
  }
  uint64_t v17 = v15 + 4;
  if (v10)
  {
    a7(a4 + 32, v13, v17);
    *(void *)(a4 + 16) = 0;
    swift_bridgeObjectRelease();
  }
  else
  {
    a6(0, v13, v17, a4);
  }
  return v15;
}

uint64_t sub_1001894A8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

int64_t *sub_1001895A0(void *a1, int64_t a2, char a3)
{
  uint64_t result = sub_100190114(a1, a2, a3, *v3);
  *uint64_t v3 = result;
  return result;
}

unint64_t sub_1001895C4()
{
  unint64_t result = qword_100224548;
  if (!qword_100224548)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100224548);
  }
  return result;
}

unint64_t sub_100189610(void *a1)
{
  a1[1] = sub_100189648();
  a1[2] = sub_100189694();
  unint64_t result = sub_1001896E0();
  a1[3] = result;
  return result;
}

unint64_t sub_100189648()
{
  unint64_t result = qword_100224550;
  if (!qword_100224550)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100224550);
  }
  return result;
}

unint64_t sub_100189694()
{
  unint64_t result = qword_100224558;
  if (!qword_100224558)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100224558);
  }
  return result;
}

unint64_t sub_1001896E0()
{
  unint64_t result = qword_100224560;
  if (!qword_100224560)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100224560);
  }
  return result;
}

unint64_t sub_100189730()
{
  unint64_t result = qword_100224568;
  if (!qword_100224568)
  {
    sub_1000371D4(&qword_100224570);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100224568);
  }
  return result;
}

unint64_t sub_100189784(uint64_t a1)
{
  unint64_t result = sub_1001895C4();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1001897B0()
{
  unint64_t result = qword_100224578;
  if (!qword_100224578)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100224578);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for SearchSessionTableColumn(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *unint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1001898C8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SearchSessionTableColumn()
{
  return &type metadata for SearchSessionTableColumn;
}

ValueMetadata *type metadata accessor for SearchSessionTableConfig()
{
  return &type metadata for SearchSessionTableConfig;
}

uint64_t type metadata accessor for SearchSessionTable(uint64_t a1)
{
  return sub_100027D28(a1, qword_1002245D0);
}

uint64_t sub_100189930()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for SearchSessionConnection(uint64_t a1)
{
  return sub_100027D28(a1, qword_1002247E8);
}

uint64_t sub_100189988()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for SearchSessionCursor(uint64_t a1)
{
  return sub_100027D28(a1, qword_100224940);
}

uint64_t sub_1001899E0()
{
  return swift_initClassMetadata2();
}

unint64_t sub_100189A30()
{
  unint64_t result = qword_100224AC8;
  if (!qword_100224AC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100224AC8);
  }
  return result;
}

uint64_t BaseBiomeTable.init(config:environment:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10001C20C(a1, v3 + 48);
  *(void *)(v3 + 88) = a2;
  *(void *)(v3 + 96) = a3;
  uint64_t v7 = SQLiteVTab.init(style:)(0);
  sub_10001CA50(a1);
  return v7;
}

uint64_t BaseBiomeTable.deinit()
{
  uint64_t v0 = SQLiteVTab.deinit();
  sub_10001CA50(v0 + 48);
  swift_unknownObjectRelease();
  return v0;
}

void BaseBiomeTable.__allocating_init(style:)()
{
}

uint64_t BaseBiomeTable.getSQLiteBridge()()
{
  uint64_t v1 = *(void *)(v0 + 96);
  swift_getObjectType();
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v1 + 16);
  swift_unknownObjectRetain();
  uint64_t v3 = sub_100024ECC();
  uint64_t v4 = v2(v3);
  swift_unknownObjectRelease();
  return v4;
}

double BaseBiomeTable.getQueryTimeFrameGuideline()()
{
  uint64_t v1 = *(void *)(v0 + 96);
  swift_getObjectType();
  uint64_t v2 = *(double (**)(uint64_t))(v1 + 24);
  swift_unknownObjectRetain();
  uint64_t v3 = sub_100024ECC();
  double v4 = v2(v3);
  swift_unknownObjectRelease();
  return v4;
}

Swift::String __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> BaseBiomeTable.getMessageName(forTable:storeIndex:)(Swift::String forTable, Swift::Int storeIndex)
{
  sub_10001B620((void *)(v2 + 48), *(void *)(v2 + 72));
  uint64_t v5 = sub_100025F8C();
  v6(v5);
  if (v3) {
    goto LABEL_5;
  }
  sub_10001B620(v23, v23[3]);
  uint64_t v7 = sub_100025FBC();
  v8(v7);
  swift_getAssociatedTypeWitness();
  sub_10002572C(&qword_100224AD0);
  uint64_t v9 = _arrayForceCast<A, B>(_:)();
  uint64_t v10 = swift_bridgeObjectRelease();
  if (storeIndex < 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (*(void *)(v9 + 16) <= (unint64_t)storeIndex)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  sub_1000245D8(v10, (uint64_t)v11, v12, v13, v14, v15, v16, v17, v22[0]);
  swift_bridgeObjectRelease();
  sub_10001B620(v22, v22[3]);
  uint64_t v18 = sub_10001810C();
  uint64_t v2 = v19(v18);
  storeIndex = v20;
  sub_10001CA50((uint64_t)v22);
  sub_10001CA50((uint64_t)v23);
LABEL_5:
  uint64_t v10 = v2;
  unint64_t v11 = (void *)storeIndex;
LABEL_8:
  result._uint64_t object = v11;
  result._uint64_t countAndFlagsBits = v10;
  return result;
}

uint64_t BaseBiomeTable.getStoreReader(at:forTable:)(unint64_t a1)
{
  sub_10001B620(v1 + 6, v1[9]);
  uint64_t v4 = sub_100025F8C();
  v5(v4);
  if (v2) {
    return (uint64_t)v1;
  }
  sub_10001B620(v35, v35[3]);
  uint64_t v6 = sub_100025FBC();
  v7(v6);
  swift_getAssociatedTypeWitness();
  sub_10002572C(&qword_100224AD0);
  uint64_t v8 = _arrayForceCast<A, B>(_:)();
  uint64_t result = swift_bridgeObjectRelease();
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)(v8 + 16) > a1)
  {
    sub_1000245D8(result, v10, v11, v12, v13, v14, v15, v16, v32[0]);
    swift_bridgeObjectRelease();
    sub_10001B620(v32, v33);
    uint64_t v17 = sub_10001810C();
    uint64_t v19 = v18(v17);
    uint64_t v21 = v20;
    uint64_t v22 = v33;
    uint64_t v23 = v34;
    sub_10001B620(v32, v33);
    uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 24))(v22, v23);
    uint64_t v25 = type metadata accessor for RawPayload();
    double v26 = (void *)BMUseCaseLegacy;
    double v27 = objc_allocWithZone((Class)BMStreamDatastoreReader);
    id v28 = v26;
    uint64_t v29 = (void *)v24;
    uint64_t v1 = v27;
    uint64_t v30 = sub_10018AD00(v19, v21, v29, v25, v28);
    if (v30)
    {
      uint64_t v1 = v30;
    }
    else
    {
      sub_100189A30();
      sub_100024A30();
      *uint64_t v31 = 3;
      swift_willThrow();
    }
    sub_10001CA50((uint64_t)v32);
    sub_10001CA50((uint64_t)v35);
    return (uint64_t)v1;
  }
  __break(1u);
  return result;
}

uint64_t BaseBiomeTable.BiomeConnection.init(_:argc:argv:)(uint64_t a1, int a2, uint64_t a3)
{
  *(void *)(v3 + 40) = 100;
  sub_10002A390();
  sub_10002A390();
  type metadata accessor for BaseBiomeTable();
  uint64_t v6 = swift_dynamicCastClass();
  if (v6)
  {
    if (a2 == 3) {
      return SQLiteVTab.BaseConnection.init(_:argc:argv:)(v6, 3, a3);
    }
    char v8 = 1;
  }
  else
  {
    char v8 = 2;
  }
  sub_100189A30();
  sub_100024A30();
  *uint64_t v9 = v8;
  swift_willThrow();
  swift_release();
  type metadata accessor for BaseBiomeTable.BiomeConnection();
  return swift_deallocPartialClassInstance();
}

uint64_t BaseBiomeTable.BiomeConnection.bestIndex(_:)(uint64_t a1)
{
  sub_100017E10();
  if (((*(uint64_t (**)(void))(v3 + 240))() & 1) == 0) {
    return 19;
  }
  sub_100017E10();
  (*(void (**)(uint64_t))(v4 + 248))(a1);
  sub_10002E044();
  uint64_t result = 0;
  *(void *)(a1 + 72) = *(void *)(v1 + 40);
  return result;
}

uint64_t BaseBiomeTable.BiomeConnection.estimatedRows.getter()
{
  sub_10002E044();
  return *(void *)(v0 + 40);
}

uint64_t BaseBiomeTable.BiomeConnection.estimatedRows.setter(uint64_t a1)
{
  uint64_t result = swift_beginAccess();
  *(void *)(v1 + 40) = a1;
  return result;
}

uint64_t (*BaseBiomeTable.BiomeConnection.estimatedRows.modify())()
{
  return j__swift_endAccess;
}

uint64_t BaseBiomeTable.BiomeConnection.getSQLiteBridge()()
{
  sub_10002A390();
  sub_10002A390();
  type metadata accessor for BaseBiomeTable();
  sub_1000277A8();
  if (!v1)
  {
    uint64_t v0 = BaseBiomeTable.getSQLiteBridge()();
    swift_release();
  }
  return v0;
}

Swift::String __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> BaseBiomeTable.BiomeConnection.getMessageName(forStoreIndex:)(Swift::Int forStoreIndex)
{
  uint64_t object = v1;
  sub_10002A390();
  sub_10002A390();
  type metadata accessor for BaseBiomeTable();
  static SQLiteVTab.getTable(forConnection:)();
  if (!v2)
  {
    Swift::String v5 = BaseBiomeTable.getMessageName(forTable:storeIndex:)(v1[1], forStoreIndex);
    forStoreIndex = v5._countAndFlagsBits;
    uint64_t object = v5._object;
    swift_release();
  }
  Swift::Int v6 = forStoreIndex;
  uint64_t v7 = object;
  result._uint64_t object = v7;
  result._uint64_t countAndFlagsBits = v6;
  return result;
}

double BaseBiomeTable.BiomeConnection.getQueryTimeFrameGuideline()()
{
  sub_10002A390();
  sub_10002A390();
  type metadata accessor for BaseBiomeTable();
  sub_1000277A8();
  if (!v0)
  {
    double TimeFrame = BaseBiomeTable.getQueryTimeFrameGuideline()();
    swift_release();
  }
  return TimeFrame;
}

unint64_t BaseBiomeTable.BiomeConnection.getReader(forStoreIndex:)(unint64_t a1)
{
  sub_10002A390();
  sub_10002A390();
  type metadata accessor for BaseBiomeTable();
  static SQLiteVTab.getTable(forConnection:)();
  if (!v1)
  {
    a1 = BaseBiomeTable.getStoreReader(at:forTable:)(a1);
    swift_release();
  }
  return a1;
}

uint64_t BaseBiomeTable.BiomeCursor.init(_:)()
{
  uint64_t v2 = v0;
  sub_10002A390();
  sub_10002A390();
  type metadata accessor for BaseBiomeTable.BiomeConnection();
  if (!swift_dynamicCastClass())
  {
    sub_100189A30();
    uint64_t v5 = sub_100024A30();
    sub_10002AFA4(v5, v6);
    swift_release();
    goto LABEL_6;
  }
  swift_retain();
  swift_retain();
  uint64_t v3 = BaseBiomeTable.BiomeConnection.getSQLiteBridge()();
  if (v1)
  {
    swift_release();
    swift_release_n();
LABEL_6:
    type metadata accessor for BaseBiomeTable.BiomeCursor();
    swift_deallocPartialClassInstance();
    return v2;
  }
  *(void *)(v0 + 32) = v3;
  *(void *)(v0 + 40) = v4;
  *(double *)(v0 + 48) = BaseBiomeTable.BiomeConnection.getQueryTimeFrameGuideline()();
  *(void *)(v0 + 56) = v8;
  swift_release();
  uint64_t v2 = SQLiteVTab.BaseCursor.init(_:)();
  swift_release();
  return v2;
}

uint64_t BaseBiomeTable.BiomeCursor.deinit()
{
  uint64_t v0 = SQLiteBaseVTab.Cursor.deinit();
  swift_unknownObjectRelease();
  return v0;
}

uint64_t BaseBiomeTable.BiomeCursor.filter(idxNum:idxStr:arguments:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = SQLiteBaseVTab.Cursor.filter(idxNum:idxStr:arguments:)();
  if (!v3 && !result)
  {
    sub_100017E10();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 296))(a1, a2, a3);
    sub_100017E10();
    (*(void (**)(void))(v9 + 304))();
    return 0;
  }
  return result;
}

uint64_t BaseBiomeTable.config.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10001C20C(v1 + 48, a1);
}

uint64_t BaseBiomeTable.__allocating_init(config:environment:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return BaseBiomeTable.init(config:environment:)(a1, a2, a3);
}

Swift::String __swiftcall BaseBiomeTable.getModuleName()()
{
  uint64_t v0 = 0x6D61657274735F70;
  uint64_t v1 = (void *)0xE800000000000000;
  result._uint64_t object = v1;
  result._uint64_t countAndFlagsBits = v0;
  return result;
}

uint64_t BaseBiomeTable.register(with:)(uint64_t a1)
{
  void (*v24)(uint64_t *__return_ptr, unint64_t, unint64_t, void);

  sub_100017E10();
  uint64_t v5 = (*(uint64_t (**)(void))(v4 + 448))();
  uint64_t v7 = v6;
  (*(void (**)(void *, _UNKNOWN **, uint64_t, void *))(*(void *)a1 + 152))(v1, &protocol witness table for SQLiteBaseVTab, v5, v6);
  if (!v2)
  {
    uint64_t v9 = v1[9];
    uint64_t v8 = v1[10];
    sub_10001B620(v1 + 6, v9);
    uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v9, v8);
    uint64_t v11 = *(void *)(v10 + 16);
    if (v11)
    {
      uint64_t v24 = *(void (**)(uint64_t *__return_ptr, unint64_t, unint64_t, void))(*(void *)a1 + 176);
      swift_bridgeObjectRetain();
      uint64_t v12 = (void **)(v10 + 40);
      while (1)
      {
        uint64_t v14 = (uint64_t)*(v12 - 1);
        uint64_t v13 = *v12;
        swift_bridgeObjectRetain();
        _StringGuts.grow(_:)(37);
        swift_bridgeObjectRelease();
        v15._uint64_t countAndFlagsBits = v14;
        v15._uint64_t object = v13;
        String.append(_:)(v15);
        v16._uint64_t countAndFlagsBits = 0x20474E49535520;
        v16._uint64_t object = (void *)0xE700000000000000;
        String.append(_:)(v16);
        v17._uint64_t countAndFlagsBits = v5;
        v17._uint64_t object = v7;
        String.append(_:)(v17);
        v24(&v20, 0xD00000000000001ALL, 0x80000001001BA2D0, 0);
        swift_bridgeObjectRelease();
        SQLiteStatement.execute()();
        if (v18) {
          break;
        }
        v12 += 2;
        swift_release();
        long long v22 = v21;
        sub_100057E18((uint64_t)&v22);
        swift_bridgeObjectRelease();
        if (!--v11)
        {
          swift_bridgeObjectRelease();
          return swift_bridgeObjectRelease_n();
        }
      }
      swift_release();
      long long v23 = v21;
      sub_100057E18((uint64_t)&v23);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

void BaseBiomeTable.init(style:)()
{
}

uint64_t sub_10018AA10()
{
  sub_10001CA50(v0 + 48);

  return swift_unknownObjectRelease();
}

uint64_t BaseBiomeTable.__deallocating_deinit()
{
  uint64_t v0 = BaseBiomeTable.deinit();

  return _swift_deallocClassInstance(v0, 104, 7);
}

uint64_t BaseBiomeTable.BiomeConnection.__allocating_init(_:argc:argv:)(uint64_t a1, int a2, uint64_t a3)
{
  return BaseBiomeTable.BiomeConnection.init(_:argc:argv:)(a1, a2, a3);
}

uint64_t BaseBiomeTable.BiomeConnection.__deallocating_deinit()
{
  uint64_t v0 = SQLiteBaseVTab.Connection.deinit();

  return _swift_deallocClassInstance(v0, 48, 7);
}

uint64_t BaseBiomeTable.BiomeCursor.__allocating_init(_:)()
{
  return BaseBiomeTable.BiomeCursor.init(_:)();
}

Swift::String __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> BaseBiomeTable.BiomeCursor.getMessageName(forStoreIndex:)(Swift::Int forStoreIndex)
{
  sub_100026F68();
  if (!(*(uint64_t (**)(void))(v3 + 120))()) {
    goto LABEL_5;
  }
  if (!sub_10002CF98())
  {
    swift_release();
LABEL_5:
    sub_100189A30();
    uint64_t v5 = sub_100024A30();
    sub_10002AFA4(v5, v6);
    goto LABEL_6;
  }
  Swift::String v4 = BaseBiomeTable.BiomeConnection.getMessageName(forStoreIndex:)((Swift::Int)object);
  uint64_t countAndFlagsBits = v4._countAndFlagsBits;
  uint64_t object = v4._object;
  swift_release();
LABEL_6:
  uint64_t v7 = countAndFlagsBits;
  uint64_t v8 = object;
  result._uint64_t object = v8;
  result._uint64_t countAndFlagsBits = v7;
  return result;
}

unint64_t BaseBiomeTable.BiomeCursor.getReader(forStoreIndex:)()
{
  sub_100026F68();
  if (!(*(uint64_t (**)(void))(v2 + 120))()) {
    goto LABEL_5;
  }
  if (!sub_10002CF98())
  {
    swift_release();
LABEL_5:
    sub_100189A30();
    uint64_t v3 = sub_100024A30();
    sub_10002AFA4(v3, v4);
    return v0;
  }
  unint64_t v0 = BaseBiomeTable.BiomeConnection.getReader(forStoreIndex:)(v1);
  swift_release();
  return v0;
}

uint64_t sub_10018ACC8()
{
  return swift_unknownObjectRelease();
}

uint64_t BaseBiomeTable.BiomeCursor.__deallocating_deinit()
{
  uint64_t v0 = BaseBiomeTable.BiomeCursor.deinit();

  return _swift_deallocClassInstance(v0, 64, 7);
}

id sub_10018AD00(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  Swift::Int v6 = v5;
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (a4) {
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  }
  else {
    uint64_t ObjCClassFromMetadata = 0;
  }
  id v12 = [v6 initWithStream:v10 config:a3 eventDataClass:ObjCClassFromMetadata useCase:a5];

  return v12;
}

uint64_t type metadata accessor for BaseBiomeTable()
{
  return sub_100040C54();
}

uint64_t type metadata accessor for BaseBiomeTable.BiomeConnection()
{
  return sub_100040C54();
}

uint64_t type metadata accessor for BaseBiomeTable.BiomeCursor()
{
  return sub_100040C54();
}

unint64_t sub_10018ADE4()
{
  unint64_t result = qword_100224B00[0];
  if (!qword_100224B00[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_100224B00);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for BiomeTableError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10018AEFCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BiomeTableError()
{
  return &type metadata for BiomeTableError;
}

uint64_t sub_10018AF34()
{
  return swift_initClassMetadata2();
}

uint64_t sub_10018AF80()
{
  return swift_initClassMetadata2();
}

uint64_t sub_10018AFC8()
{
  return swift_initClassMetadata2();
}

unint64_t sub_10018B018()
{
  unint64_t result = qword_100224C90;
  if (!qword_100224C90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100224C90);
  }
  return result;
}

unint64_t sub_10018B068()
{
  unint64_t result = qword_100224C98;
  if (!qword_100224C98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100224C98);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for UploadFrom(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10018B180);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UploadFrom()
{
  return &type metadata for UploadFrom;
}

unsigned char *storeEnumTagSinglePayload for SessionDBFeatureFlags(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x10018B254);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for SessionDBFeatureFlags()
{
  return &type metadata for SessionDBFeatureFlags;
}

uint64_t sub_10018B28C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, double a7, double a8)
{
  *(void *)(v8 + 144) = 0;
  *(unsigned char *)(v8 + 152) = 1;
  *(_OWORD *)(v8 + 160) = 0u;
  *(_OWORD *)(v8 + 176) = 0u;
  *(void *)(v8 + 88) = a1;
  *(void *)(v8 + 96) = a2;
  uint64_t result = sub_10001C20C((uint64_t)a6, v8 + 104);
  double v16 = a7 + -1200.0;
  if (v16 > a8)
  {
    __break(1u);
  }
  else
  {
    uint64_t v18 = a6[3];
    uint64_t v17 = a6[4];
    sub_10001B620(a6, v18);
    uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)(v17 + 8) + 8))(v18);
    uint64_t v21 = BiomeStoreEnumerator.init(reader:sqliteBridge:enumerationRange:messageName:)(a3, a4, a5, v19, v20, v16, a8);
    sub_10001CA50((uint64_t)a6);
    return v21;
  }
  return result;
}

void *sub_10018B384()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10002572C(&qword_100224EF0);
  __chkstk_darwin(v2 - 8);
  unsigned int v4 = &v20[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = type metadata accessor for BiomeSessionWrapper(0);
  __chkstk_darwin(v5);
  uint64_t v7 = &v20[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = BiomeStoreEnumerator.getNextEvent()();
  if (v8)
  {
    while (1)
    {
      id v9 = [v8 eventBody];
      if (v9) {
        break;
      }

      uint64_t v8 = BiomeStoreEnumerator.getNextEvent()();
      if (!v8) {
        return v8;
      }
    }
    NSString v10 = (char *)v9;
    sub_1001970F8(v10, (uint64_t)v4);
    sub_10002538C((uint64_t)v4, 0, 1, v5);
    sub_10018C138((uint64_t)v4, (uint64_t)v7);
    id v11 = *(id *)&v7[*(int *)(v5 + 20)];
    id v12 = RawPayload.schemitized(with:)(v0 + 104);
    uint64_t v14 = v13;

    *(void *)(v1 + 160) = v12;
    *(void *)(v1 + 168) = v14;
    swift_unknownObjectRelease();
    [v8 timestamp];
    *(void *)(v1 + 144) = v15;
    *(unsigned char *)(v1 + 152) = 0;
    uint64_t v16 = SessionType.canonicalIdentifier.getter();
    uint64_t v18 = v17;

    sub_1000329E8((uint64_t)v7);
    *(void *)(v1 + 176) = v16;
    *(void *)(v1 + 184) = v18;
    swift_bridgeObjectRelease();
  }
  return v8;
}

uint64_t sub_10018B594()
{
  return *(void *)(v0 + 144);
}

uint64_t sub_10018B5A0()
{
  if (!*(void *)(v0 + 160)) {
    return 0;
  }
  uint64_t v1 = *(void *)(v0 + 168);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 24);
  swift_unknownObjectRetain();
  uint64_t v4 = v3(ObjectType, v1);
  swift_unknownObjectRelease();
  return v4;
}

double sub_10018B630@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*(void *)(v3 + 160))
  {
    uint64_t v6 = *(void *)(v3 + 168);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56);
    swift_unknownObjectRetain();
    v8(a1, a2, ObjectType, v6);
    swift_unknownObjectRelease();
  }
  else
  {
    *(void *)(a3 + 48) = 0;
    double result = 0.0;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_WORD *)(a3 + 56) = -256;
  }
  return result;
}

void sub_10018B6F8(uint64_t a1, uint64_t a2)
{
  sub_10018B630(a1, a2, (uint64_t)&v4);
  if (!v2)
  {
    if (v5 == 255)
    {
      sub_100019938((uint64_t)&v4, &qword_100221918);
    }
    else
    {
      sub_10001B978((uint64_t)&v4, (uint64_t)v6);
      sub_100032AD8((uint64_t)v6, (uint64_t)&v4);
      if (v5 != 8)
      {
        sub_10001B840((uint64_t)&v4);
        sub_10018C19C();
        swift_allocError();
        *uint64_t v3 = 0;
        swift_willThrow();
      }
      sub_10001B840((uint64_t)v6);
    }
  }
}

uint64_t sub_10018B7CC(sqlite3_context *a1)
{
  uint64_t v4 = *(void *)(v1 + 176);
  uint64_t v3 = *(void *)(v1 + 184);
  swift_bridgeObjectRetain();
  SQLiteContext.setString(_:destructor:)(v4, v3, (void (__cdecl **)(void *))1, a1);

  return swift_bridgeObjectRelease();
}

void sub_10018B828()
{
  sub_10018B630(0x656C62616E457564, 0xE900000000000064, (uint64_t)v2);
  if (!v0)
  {
    if (v3 == 255)
    {
      sub_100019938((uint64_t)v2, &qword_100221918);
    }
    else
    {
      sub_10001B978((uint64_t)v2, (uint64_t)v4);
      sub_100032AD8((uint64_t)v4, (uint64_t)v2);
      if (v3 != 6)
      {
        sub_10001B840((uint64_t)v2);
        sub_10018C19C();
        swift_allocError();
        *uint64_t v1 = 0;
        swift_willThrow();
      }
      sub_10001B840((uint64_t)v4);
    }
  }
}

void sub_10018B910()
{
  sub_10018B828();
  if (!v0)
  {
    if (v1 == 2) {
      SQLiteContext.setNull()();
    }
    else {
      SQLiteContext.setBool(_:)(v1 & 1);
    }
  }
}

void sub_10018B964(sqlite3_context *a1)
{
}

void sub_10018B998(sqlite3_context *a1)
{
}

unint64_t sub_10018B9C0()
{
  sub_10018B6F8(0x746E656761, 0xE500000000000000);
  if (v1) {
    return v0;
  }
  unint64_t v0 = v2;
  unint64_t v4 = v3;
  if (!v3) {
    return v0;
  }
  sub_100143CCC(40, 0xE100000000000000, v2, v3);
  if (v5) {
    goto LABEL_9;
  }
  swift_bridgeObjectRetain();
  unint64_t v6 = String.index(after:)();
  swift_bridgeObjectRelease();
  unint64_t v0 = sub_10018BD24(v6, v0, v4);
  sub_10002C83C();
  unint64_t result = sub_10018BBBC(v7, v8, v9, v10);
  if (v12) {
    goto LABEL_9;
  }
  if (result >> 14 < v0 >> 14)
  {
    __break(1u);
    goto LABEL_12;
  }
  sub_10002C83C();
  Substring.subscript.getter();
  unint64_t v14 = v13;
  unint64_t v0 = v15;
  swift_bridgeObjectRelease();
  sub_100026F88();
  sub_10018BDC8(v16, v17, v18, v19);
  if (v20)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    sub_10018C19C();
    swift_allocError();
    *long long v22 = 1;
    swift_willThrow();
    return v0;
  }
  swift_bridgeObjectRetain();
  unint64_t v21 = Substring.index(after:)();
  unint64_t result = swift_bridgeObjectRelease();
  if (v14 >> 14 >= v21 >> 14)
  {
    sub_100026F88();
    Substring.subscript.getter();
    swift_bridgeObjectRelease();
    unint64_t v0 = static String._fromSubstring(_:)();
    swift_bridgeObjectRelease();
    return v0;
  }
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_10018BBBC(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v16 = a4 >> 14;
  if (a4 >> 14 == a3 >> 14) {
    return 0;
  }
  if (Substring.subscript.getter() == a1 && v8 == a2)
  {
    unint64_t v4 = a3;
LABEL_10:
    swift_bridgeObjectRelease();
  }
  else
  {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v10)
    {
      return a3;
    }
    else
    {
      while (1)
      {
        unint64_t v12 = Substring.index(after:)();
        if (v12 >> 14 == v16) {
          return 0;
        }
        unint64_t v4 = v12;
        if (Substring.subscript.getter() == a1 && v13 == a2) {
          goto LABEL_10;
        }
        char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v15) {
          return v4;
        }
      }
    }
  }
  return v4;
}

unint64_t sub_10018BD24(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    uint64_t v3 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (4 * v3 < result >> 14)
  {
    __break(1u);
  }
  else
  {
    uint64_t v4 = String.subscript.getter();
    swift_bridgeObjectRelease();
    return v4;
  }
  return result;
}

unint64_t sub_10018BDC8(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v4 = a3 >> 14;
  if (a3 >> 14 == a4 >> 14) {
    return 0;
  }
  unint64_t v5 = Substring.index(before:)();
  if (Substring.subscript.getter() == a1 && v8 == a2)
  {
LABEL_17:
    swift_bridgeObjectRelease();
    return v5;
  }
  char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v10) {
    return v5;
  }
  if (v4 != v5 >> 14)
  {
    while (1)
    {
      unint64_t v5 = Substring.index(before:)();
      if (Substring.subscript.getter() == a1 && v11 == a2) {
        break;
      }
      char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v13) {
        return v5;
      }
      if (v4 == v5 >> 14) {
        return 0;
      }
    }
    goto LABEL_17;
  }
  return 0;
}

void sub_10018BF24(sqlite3_context *a1)
{
  unint64_t v3 = sub_10018B9C0();
  if (!v1)
  {
    if (v4)
    {
      SQLiteContext.setString(_:destructor:)(v3, v4, (void (__cdecl **)(void *))1, a1);
      swift_bridgeObjectRelease();
    }
    else
    {
      SQLiteContext.setNull()();
    }
  }
}

void sub_10018BF88(sqlite3_context *a1)
{
}

void sub_10018BFC0(sqlite3_context *a1, uint64_t a2, uint64_t a3)
{
  sub_10018B6F8(a2, a3);
  if (!v3)
  {
    if (v6)
    {
      SQLiteContext.setString(_:destructor:)(v5, v6, (void (__cdecl **)(void *))1, a1);
      swift_bridgeObjectRelease();
    }
    else
    {
      SQLiteContext.setNull()();
    }
  }
}

void sub_10018C02C()
{
}

uint64_t sub_10018C05C()
{
  swift_bridgeObjectRelease();
  sub_10001CA50(v0 + 104);
  swift_unknownObjectRelease();

  return swift_bridgeObjectRelease();
}

id *sub_10018C09C()
{
  uint64_t v0 = BiomeStoreEnumerator.deinit();
  swift_bridgeObjectRelease();
  sub_10001CA50((uint64_t)(v0 + 13));
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_10018C0E4()
{
  uint64_t v0 = sub_10018C09C();

  return _swift_deallocClassInstance(v0, 192, 7);
}

uint64_t type metadata accessor for SessionEnumerator()
{
  return self;
}

uint64_t sub_10018C138(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BiomeSessionWrapper(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_10018C19C()
{
  unint64_t result = qword_100224EF8;
  if (!qword_100224EF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100224EF8);
  }
  return result;
}

void sub_10018C1E8()
{
  double v1 = COERCE_DOUBLE((*(uint64_t (**)(void))(*(void *)v0 + 240))());
  if (v2)
  {
    SQLiteContext.setNull()();
  }
  else
  {
    Double.fromReferenceToUnixTime.getter(v1);
    SQLiteContext.setDouble(_:)(v3);
  }
}

uint64_t Double.fromReferenceToUnixTime.getter(double a1)
{
  if (qword_1002242F0 != -1) {
    uint64_t result = swift_once();
  }
  if (*(double *)&qword_100224F10 < a1)
  {
    if (qword_1002242F8 != -1) {
      uint64_t result = swift_once();
    }
    if (*(double *)&qword_100224F18 <= a1)
    {
      if (qword_1002242E8 == -1) {
        return result;
      }
    }
    else if (qword_100224300 == -1)
    {
      return result;
    }
    return swift_once();
  }
  if (qword_1002242E0 != -1) {
    return swift_once();
  }
  return result;
}

double ClosedRange<>.fromUnixToReferenceTime.getter(double a1, double a2)
{
  if (qword_1002242E0 != -1) {
    swift_once();
  }
  if (*(double *)&qword_100224F00 >= a1)
  {
    if (qword_1002242F0 != -1) {
      swift_once();
    }
    a1 = *(double *)&qword_100224F10;
    goto LABEL_15;
  }
  if (qword_1002242E8 != -1) {
    goto LABEL_31;
  }
  while (1)
  {
    if (*(double *)&qword_100224F08 <= a1)
    {
      if (qword_1002242F8 != -1) {
        swift_once();
      }
      a1 = *(double *)&qword_100224F18;
    }
    else
    {
      if (qword_100224300 != -1) {
        swift_once();
      }
      a1 = a1 - *(double *)&qword_100224F20;
    }
LABEL_15:
    if (*(double *)&qword_100224F00 >= a2)
    {
      if (qword_1002242F0 != -1) {
        swift_once();
      }
      double v4 = *(double *)&qword_100224F10;
    }
    else
    {
      if (qword_1002242E8 != -1) {
        swift_once();
      }
      if (*(double *)&qword_100224F08 <= a2)
      {
        if (qword_1002242F8 != -1) {
          swift_once();
        }
        double v4 = *(double *)&qword_100224F18;
      }
      else
      {
        if (qword_100224300 != -1) {
          swift_once();
        }
        double v4 = a2 - *(double *)&qword_100224F20;
      }
    }
    if (a1 <= v4) {
      break;
    }
    __break(1u);
LABEL_31:
    swift_once();
  }
  return a1;
}

uint64_t sub_10018C618(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, double a7)
{
  return BiomeStoreEnumerator.init(reader:sqliteBridge:enumerationRange:messageName:)(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_10018C69C()
{
  uint64_t v0 = BiomeStoreEnumerator.deinit();

  return _swift_deallocClassInstance(v0, 88, 7);
}

uint64_t sub_10018C6CC(uint64_t a1)
{
  return sub_10018C79C(a1, (uint64_t (*)(double))&static Date.distantPast.getter, (double (*)(uint64_t))&Date.timeIntervalSince1970.getter, (double *)&qword_100224F00);
}

uint64_t sub_10018C700(uint64_t a1)
{
  return sub_10018C79C(a1, (uint64_t (*)(double))&static Date.distantFuture.getter, (double (*)(uint64_t))&Date.timeIntervalSince1970.getter, (double *)&qword_100224F08);
}

uint64_t sub_10018C734(uint64_t a1)
{
  return sub_10018C79C(a1, (uint64_t (*)(double))&static Date.distantPast.getter, (double (*)(uint64_t))&Date.timeIntervalSinceReferenceDate.getter, (double *)&qword_100224F10);
}

uint64_t sub_10018C768(uint64_t a1)
{
  return sub_10018C79C(a1, (uint64_t (*)(double))&static Date.distantFuture.getter, (double (*)(uint64_t))&Date.timeIntervalSinceReferenceDate.getter, (double *)&qword_100224F18);
}

uint64_t sub_10018C79C(uint64_t a1, uint64_t (*a2)(double), double (*a3)(uint64_t), double *a4)
{
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  double v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a2(v9);
  double v13 = a3(v12);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  *a4 = v13;
  return result;
}

double sub_10018C890()
{
  if (qword_1002242E0 != -1) {
    swift_once();
  }
  double v0 = *(double *)&qword_100224F00;
  if (qword_1002242F0 != -1) {
    swift_once();
  }
  double result = v0 - *(double *)&qword_100224F10;
  *(double *)&qword_100224F20 = v0 - *(double *)&qword_100224F10;
  return result;
}

uint64_t Double.fromUnixToReferenceTime.getter(double a1)
{
  if (qword_1002242E0 != -1) {
    uint64_t result = swift_once();
  }
  if (*(double *)&qword_100224F00 < a1)
  {
    if (qword_1002242E8 != -1) {
      uint64_t result = swift_once();
    }
    if (*(double *)&qword_100224F08 <= a1)
    {
      if (qword_1002242F8 == -1) {
        return result;
      }
    }
    else if (qword_100224300 == -1)
    {
      return result;
    }
    return swift_once();
  }
  if (qword_1002242F0 != -1) {
    return swift_once();
  }
  return result;
}

uint64_t type metadata accessor for SearchStoreEnumerator()
{
  return self;
}

unsigned char *storeEnumTagSinglePayload for SearchStoreEnumerator.Error(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10018CB6CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SearchStoreEnumerator.Error()
{
  return &type metadata for SearchStoreEnumerator.Error;
}

unint64_t sub_10018CBA8()
{
  unint64_t result = qword_100225088;
  if (!qword_100225088)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100225088);
  }
  return result;
}

uint64_t sub_10018CBF4()
{
  return _swift_deallocObject(v0, 24, 7);
}

ValueMetadata *type metadata accessor for BiomeStreamsTelemetryReporter()
{
  return &type metadata for BiomeStreamsTelemetryReporter;
}

void *UploadStateFileStore.uploadedAtBookmarks()()
{
  char v2 = sub_100196130();
  if (v0) {
    return v1;
  }
  uint64_t v4 = (uint64_t)v2;
  uint64_t v5 = *((void *)v2 + 2);
  if (!v5)
  {
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRetain();
  unsigned int v6 = (unsigned char *)(v4 + 40);
  do
  {
    if (*v6 == 1)
    {
      swift_retain();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
    v6 += 16;
    --v5;
  }
  while (v5);
  swift_bridgeObjectRelease();
  double v1 = _swiftEmptyArrayStorage;
  if (*(void *)(v4 + 16))
  {
    char v7 = *(unsigned char *)(v4 + 40);
    swift_bridgeObjectRelease();
    if (v7) {
      return v1;
    }
    type metadata accessor for SessionBookmark();
    swift_allocObject();
    SessionBookmark.init()();
    uint64_t v4 = v8;
    if (!((unint64_t)_swiftEmptyArrayStorage >> 62))
    {
LABEL_13:
      sub_10018CDAC(0, 0, v4);
      return _swiftEmptyArrayStorage;
    }
  }
  else
  {
    __break(1u);
  }
  swift_bridgeObjectRetain();
  uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
  unint64_t result = (void *)swift_bridgeObjectRelease();
  if ((v9 & 0x8000000000000000) == 0) {
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

uint64_t sub_10018CDAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v3 = a3;
    uint64_t v5 = a2;
    uint64_t v6 = a1;
    if (!(*v4 >> 62))
    {
      uint64_t v8 = *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_4;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
LABEL_4:
  if (v8 < v5)
  {
    __break(1u);
    goto LABEL_30;
  }
  uint64_t v9 = v5 - v6;
  if (__OFSUB__(v5, v6))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v7 = 1 - v9;
  if (__OFSUB__(1, v9))
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  if (!(*v4 >> 62))
  {
    uint64_t v10 = *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_9;
  }
LABEL_32:
  swift_bridgeObjectRetain();
  uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
LABEL_9:
  uint64_t v11 = v10 + v7;
  if (__OFADD__(v10, v7))
  {
    __break(1u);
    goto LABEL_34;
  }
  unint64_t v12 = *v4;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v4 = v12;
  if (!isUniquelyReferenced_nonNull_bridgeObject
    || (v12 & 0x8000000000000000) != 0
    || (v12 & 0x4000000000000000) != 0
    || (uint64_t v14 = v12 & 0xFFFFFFFFFFFFFF8, v11 > *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1))
  {
    if (!(v12 >> 62))
    {
LABEL_15:
      swift_bridgeObjectRetain();
      unint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      swift_bridgeObjectRelease();
      *uint64_t v4 = v12;
      uint64_t v14 = v12 & 0xFFFFFFFFFFFFFF8;
      goto LABEL_16;
    }
LABEL_34:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
LABEL_16:
  uint64_t v15 = v14 + 32 + 8 * v6;
  type metadata accessor for SessionBookmark();
  swift_arrayDestroy();
  if (!v7) {
    goto LABEL_24;
  }
  if (v12 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v16 = *(void *)(v14 + 16);
  }
  if (__OFSUB__(v16, v5))
  {
    __break(1u);
    goto LABEL_37;
  }
  uint64_t result = (uint64_t)sub_1001492FC((char *)(v14 + 32 + 8 * v5), v16 - v5, (char *)(v15 + 8));
  if (v12 >> 62)
  {
LABEL_37:
    swift_bridgeObjectRetain();
    uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    goto LABEL_22;
  }
  uint64_t v18 = *(void *)(v14 + 16);
LABEL_22:
  if (__OFADD__(v18, v7))
  {
    __break(1u);
    return result;
  }
  *(void *)(v14 + 16) = v18 + v7;
LABEL_24:
  *(void *)uint64_t v15 = v3;

  return specialized Array._endMutation()();
}

uint64_t BiomeDatabaseReader.__allocating_init(fileManager:)(uint64_t a1)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  return result;
}

void sub_10018D058(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t), uint64_t a6)
{
  id v13 = [a1 bookmark];
  if (v13)
  {
    id v14 = v13;
    while (1)
    {
      id v15 = [a1 nextEvent];
      if (!v15)
      {
        swift_bridgeObjectRelease();

        goto LABEL_8;
      }
      uint64_t v16 = v15;
      sub_10018EBD0((char *)v14, v15, a2, a3, a4, a5, a6);
      if (v6) {
        break;
      }

      id v14 = [a1 bookmark];
      if (!v14) {
        goto LABEL_6;
      }
    }
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
LABEL_6:
    swift_bridgeObjectRelease();
LABEL_8:
    swift_release();
  }
}

void sub_10018D180(void *a1, unint64_t a2, void (*a3)(uint64_t, uint64_t), uint64_t a4)
{
  id v9 = [a1 bookmark];
  if (v9)
  {
    id v10 = v9;
    while (1)
    {
      id v11 = [a1 nextEvent];
      if (!v11)
      {
        swift_bridgeObjectRelease();

        return;
      }
      unint64_t v12 = v11;
      sub_10018E244(v10, v11, a2, a3, a4);
      if (v4) {
        break;
      }

      id v10 = [a1 bookmark];
      if (!v10) {
        goto LABEL_6;
      }
    }
    swift_bridgeObjectRelease();
  }
  else
  {
LABEL_6:
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_10018D284(id a1, uint64_t a2, uint64_t a3)
{
  while (1)
  {
    id v8 = [a1 bookmark];
    if (!v8)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
    id v9 = v8;
    id v10 = [a1 nextEvent];
    if (!v10)
    {
      swift_bridgeObjectRelease();

      return 0;
    }
    id v11 = v10;
    uint64_t v12 = sub_10018F9DC((uint64_t)v9, v10, a2, a3);
    if (v3) {
      break;
    }
    uint64_t v4 = v12;

    if (v4)
    {
      swift_bridgeObjectRelease();
      return v4;
    }
  }
  swift_bridgeObjectRelease();

  return v4;
}

void sub_10018D384()
{
  sub_100017EC4();
  uint64_t v3 = v2;
  do
  {
    id v4 = [v0 bookmark];
    if (!v4) {
      break;
    }
    uint64_t v5 = v4;
    id v6 = [v0 nextEvent];
    if (!v6)
    {
      uint64_t v7 = v5;
LABEL_9:

      break;
    }
    uint64_t v7 = v6;
    uint64_t v8 = v3(v5, v6);
    if (v1)
    {

      goto LABEL_9;
    }
    uint64_t v9 = v8;
  }
  while (!v9);
  sub_100024A18();
}

void *BMStreamDatastoreReader<>.DefaultStartTimeDelta.unsafeMutableAddressor()
{
  return &static BMStreamDatastoreReader<>.DefaultStartTimeDelta;
}

double static BMStreamDatastoreReader<>.DefaultStartTimeDelta.getter()
{
  return -604800.0;
}

id sub_10018D464(uint64_t a1)
{
  char v2 = v1;
  uint64_t v4 = type metadata accessor for Date();
  sub_100020C48();
  uint64_t v6 = v5;
  __chkstk_darwin(v7);
  sub_10000DFD0();
  uint64_t v10 = v9 - v8;
  if (*(void *)(a1 + 16)) {
    return objc_msgSend(v2, "newEnumeratorFromBookmark:");
  }
  Date.init(timeIntervalSinceNow:)();
  Date.timeIntervalSinceReferenceDate.getter();
  id v11 = objc_msgSend(v2, "newEnumeratorFromStartTime:");
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v10, v4);
  return v11;
}

uint64_t BiomeDatabaseReader.init(fileManager:)(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return v1;
}

void sub_10018D554()
{
  sub_100017EC4();
  type metadata accessor for BiomeStreamConfig();
  sub_100020C48();
  uint64_t v31 = v4;
  uint64_t v32 = v3;
  __chkstk_darwin(v3);
  sub_10000E04C();
  uint64_t v35 = v5;
  uint64_t v6 = type metadata accessor for FeedbackStreamDescriptor();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v34 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v33 = (char *)&v29 - v10;
  uint64_t v11 = type metadata accessor for FeedbackStoreConfig();
  sub_100020C48();
  uint64_t v36 = v12;
  __chkstk_darwin(v13);
  sub_1000213B0();
  id v14 = *(void **)(v0 + 16);
  sub_10002572C(&qword_1002251A0);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_1001A2A20;
  id v15 = *(void (**)(void))(v7 + 104);
  sub_100018120();
  v15();
  id v16 = v14;
  FeedbackStoreConfig.init(fileManager:streams:)();
  if (!v1)
  {
    uint64_t v17 = v33;
    sub_100018120();
    v15();
    uint64_t v29 = FeedbackStreamDescriptor.rawValue.getter();
    uint64_t v30 = v18;
    uint64_t v33 = *(char **)(v7 + 8);
    ((void (*)(char *, uint64_t))v33)(v17, v6);
    sub_100018120();
    v15();
    FeedbackStoreConfig.getConfig(forStream:)();
    uint64_t v19 = sub_10001DF5C();
    v20(v19);
    unint64_t v21 = (void *)BiomeStreamConfig.storeConfig.getter();
    sub_10000E040();
    v22();
    uint64_t v23 = type metadata accessor for RawPayload();
    uint64_t v24 = (void *)BMUseCaseLegacy;
    objc_allocWithZone((Class)BMStreamDatastoreReader);
    id v25 = v24;
    if (sub_10018AD00(v29, v30, v21, v23, v25))
    {
      sub_10000E040();
      v26();
    }
    else
    {
      sub_10018FF34();
      uint64_t v27 = sub_100024A30();
      sub_10002CFD0((__n128)xmmword_1001A5AD0, v27, v28);
      (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v2, v11);
    }
  }
  sub_100024A18();
}

void sub_10018D894()
{
  sub_100017EC4();
  type metadata accessor for BiomeStreamConfig();
  sub_100020C48();
  __chkstk_darwin(v2);
  sub_10000E074();
  type metadata accessor for FeedbackStoreConfig();
  sub_100020C48();
  __chkstk_darwin(v3);
  sub_10000E04C();
  uint64_t v4 = sub_10002572C(&qword_100224500);
  __chkstk_darwin(v4 - 8);
  sub_10000DFD0();
  uint64_t v7 = v6 - v5;
  uint64_t v8 = type metadata accessor for FeedbackStreamDescriptor();
  sub_100020C48();
  uint64_t v10 = v9;
  __chkstk_darwin(v11);
  sub_10000DFD0();
  uint64_t v14 = v13 - v12;
  SessionType.biomeStreamDescriptor.getter();
  if (sub_100027BA4(v7, 1, v8) == 1)
  {
    sub_100025628(v7, &qword_100224500);
    sub_10018FF34();
    uint64_t v15 = sub_100024A30();
    sub_10002CFD0((__n128)xmmword_1001A9580, v15, v16);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))(v14, v7, v8);
    uint64_t v17 = *(void **)(v0 + 16);
    sub_10002572C(&qword_1002251A0);
    unint64_t v18 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    uint64_t v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = xmmword_1001A2A20;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v10 + 16))(v19 + v18, v14, v8);
    id v20 = v17;
    FeedbackStoreConfig.init(fileManager:streams:)();
    if (v1)
    {
      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v14, v8);
    }
    else
    {
      uint64_t v21 = FeedbackStreamDescriptor.rawValue.getter();
      uint64_t v23 = v22;
      FeedbackStoreConfig.getConfig(forStream:)();
      uint64_t v24 = v14;
      id v25 = (void *)BiomeStreamConfig.storeConfig.getter();
      sub_10000E040();
      v26();
      uint64_t v32 = type metadata accessor for RawPayload();
      uint64_t v27 = (void *)BMUseCaseLegacy;
      objc_allocWithZone((Class)BMStreamDatastoreReader);
      if (!sub_10018AD00(v21, v23, v25, v32, v27))
      {
        sub_10018FF34();
        uint64_t v30 = sub_100024A30();
        sub_10002CFD0((__n128)xmmword_1001A5AD0, v30, v31);
      }
      uint64_t v28 = sub_100024EE4();
      v29(v28);
      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v24, v8);
    }
  }
  sub_100024A18();
}

unint64_t sub_10018DC28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v4;
  uint64_t v8 = sub_10002572C(&qword_10021BB10);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char **)((char *)&v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v68 - v12;
  uint64_t v14 = type metadata accessor for Date();
  sub_100020C48();
  uint64_t v81 = v15;
  __chkstk_darwin(v16);
  sub_10000DFD0();
  uint64_t v19 = v18 - v17;
  type metadata accessor for SessionType();
  sub_100020C48();
  uint64_t v79 = v21;
  uint64_t v80 = v20;
  __chkstk_darwin(v20);
  sub_10000E04C();
  uint64_t v82 = v22;
  id v23 = [objc_allocWithZone((Class)PBDataWriter) init];
  if (!v23)
  {
    sub_100191884();
    uint64_t v26 = sub_100024A30();
    sub_100026280(v26, v27);
    return v3;
  }
  uint64_t v77 = v19;
  uint64_t v78 = a1;
  id v24 = v23;
  sub_10018D894();
  if (v4) {
    goto LABEL_3;
  }
  uint64_t v28 = v25;
  uint64_t v76 = v13;
  uint64_t v29 = v78;
  swift_beginAccess();
  uint64_t v30 = (uint64_t *)(*(void *)(v29 + 16) + OBJC_IVAR___SRRawPayload_data);
  uint64_t v31 = *v30;
  unint64_t v32 = v30[1];
  sub_100027BCC(*v30, v32);
  sub_10019141C(v31, v32, v24);
  uint64_t v33 = v29 + OBJC_IVAR____TtC14SearchFeedback15SessionFeedback_creationDate;
  Date.timeIntervalSinceReferenceDate.getter();
  double v35 = v34;
  unint64_t v3 = a3;
  Date.timeIntervalSinceReferenceDate.getter();
  if (v35 > v36)
  {
    sub_100191884();
    sub_100024A30();
    *uint64_t v37 = 260;
    swift_willThrow();

    return v3;
  }
  uint64_t v71 = v33;
  id v39 = [v28 fetchEventsFrom:v35 to:v36];
  sub_10002572C(&qword_1002251B0);
  unint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v3 >> 62)
  {
LABEL_33:
    id v67 = v24;
    swift_bridgeObjectRetain();
    uint64_t v40 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v40 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    id v41 = v24;
    swift_bridgeObjectRetain();
  }
  uint64_t v73 = v14;
  uint64_t v74 = (objc_class *)v28;
  uint64_t v68 = a3;
  uint64_t v69 = v10;
  id v75 = v24;
  uint64_t v72 = v5;
  if (v40)
  {
    uint64_t v5 = 0;
    id v24 = (id)(v3 & 0xC000000000000001);
    a3 = 1;
    uint64_t v10 = &selRef_releaseTag;
    while (2)
    {
      uint64_t v14 = v5;
      while (1)
      {
        if (v24) {
          id v42 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v42 = *(id *)(v3 + 8 * v14 + 32);
        }
        uint64_t v28 = v42;
        uint64_t v5 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
          __break(1u);
          goto LABEL_33;
        }
        unint64_t v43 = (char *)[v42 eventBody];
        if (v43) {
          break;
        }

        ++v14;
        if (v5 == v40)
        {
          char v48 = a3;
          goto LABEL_23;
        }
      }
      uint64_t v44 = v43;
      uint64_t v46 = *(void *)&v43[OBJC_IVAR___SRRawPayload_data];
      unint64_t v45 = *(void *)&v43[OBJC_IVAR___SRRawPayload_data + 8];
      sub_100027BCC(v46, v45);
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      sub_1000291B4(v46, v45);
      Class v47 = isa;
      [v75 writeData:isa forTag:200];

      [v28 timestamp];
      char v48 = 0;
      a3 = 0;
      if (v5 != v40) {
        continue;
      }
      break;
    }
  }
  else
  {
    char v48 = 1;
  }
LABEL_23:
  id v24 = v75;

  swift_bridgeObjectRelease_n();
  id v49 = [v24 data];
  if (!v49)
  {
    sub_100191884();
    uint64_t v60 = sub_100024A30();
    sub_100026280(v60, v61);
    Class v59 = v74;
    goto LABEL_27;
  }
  Class isa = (Class)v49;
  uint64_t v50 = sub_10000A508(isa);
  uint64_t v52 = v51;
  id v53 = objc_allocWithZone((Class)type metadata accessor for RawPayload());
  RawPayload.init(with:)(v50, v52);
  uint64_t v54 = v78;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v79 + 16))(v82, v78 + OBJC_IVAR____TtC14SearchFeedback15SessionFeedback_type, v80);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v81 + 16))(v77, v71, v73);
  uint64_t v55 = v54 + OBJC_IVAR____TtC14SearchFeedback15SessionFeedback_closingDate;
  swift_beginAccess();
  sub_100058624(v55, (uint64_t)v76);
  type metadata accessor for SessionFeedback(0);
  uint64_t v56 = swift_allocObject();
  swift_bridgeObjectRetain();
  unint64_t v3 = v56;
  uint64_t v57 = v72;
  uint64_t v58 = SessionFeedback.init(session:sessionId:type:creationDate:closingDate:)();
  if (v57)
  {

    Class v59 = isa;
LABEL_27:

LABEL_3:
    return v3;
  }
  unint64_t v3 = v58;
  Class v62 = isa;
  uint64_t v63 = v74;
  if (v48)
  {
    uint64_t v64 = 1;
    uint64_t v65 = (uint64_t)v69;
  }
  else
  {
    uint64_t v65 = (uint64_t)v69;
    Date.init(timeIntervalSinceReferenceDate:)();
    uint64_t v64 = 0;
  }
  uint64_t v66 = v68;
  sub_10002538C(v65, v64, 1, v73);
  sub_100198064(v66, v65);

  sub_100025628(v65, &qword_10021BB10);
  return v3;
}

void sub_10018E244(void *a1, void *a2, unint64_t a3, void (*a4)(uint64_t, uint64_t), uint64_t a5)
{
  uint64_t v11 = sub_10002572C(&qword_10021BB10);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for Date();
  double v15 = __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v18 = objc_msgSend(a2, "eventBody", v15);
  if (v18)
  {
    uint64_t v30 = a5;
    uint64_t v31 = a4;
    id v19 = v18;
    [a2 timestamp];
    Date.init(timeIntervalSinceReferenceDate:)();
    sub_10002538C((uint64_t)v13, 1, 1, v14);
    type metadata accessor for SessionFeedback(0);
    swift_allocObject();
    uint64_t v20 = SessionFeedback.init(withWrappedPayload:creationDate:closingDate:)(v19, (uint64_t)v17, (uint64_t)v13);
    if (!v5)
    {
      uint64_t v21 = v20;
      uint64_t v22 = *(void *)(v20 + OBJC_IVAR____TtC14SearchFeedback15SessionFeedback_sessionId);
      uint64_t v23 = *(void *)(v20 + OBJC_IVAR____TtC14SearchFeedback15SessionFeedback_sessionId + 8);
      id v24 = a1;
      swift_bridgeObjectRetain();
      [a2 timestamp];
      double v26 = v25;
      type metadata accessor for SessionBookmark();
      swift_allocObject();
      uint64_t v27 = sub_10019B41C((uint64_t)v24, v22, v23, v26);
      if (sub_10018E50C(v27, a3))
      {
        swift_release();
        swift_release();
      }
      else
      {
        swift_retain();
        swift_retain();
        v31(v21, v27);
        swift_release_n();
        swift_release_n();
      }
    }
  }
  else
  {
    unsigned __int8 v28 = [a2 error];
    sub_100191884();
    swift_allocError();
    *uint64_t v29 = v28;
    v29[1] = 0;
    swift_willThrow();
  }
}

uint64_t sub_10018E50C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    goto LABEL_19;
  }
  uint64_t v4 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v4)
  {
    while (1)
    {
      if ((a2 & 0xC000000000000001) != 0)
      {
        uint64_t v5 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v5 = *(void *)(a2 + 32);
        swift_retain();
      }
      type metadata accessor for SessionBookmark();
      char v6 = static SessionBookmark.== infix(_:_:)(v5, a1);
      swift_release();
      if (v6) {
        break;
      }
      if (v4 != 1)
      {
        uint64_t v9 = 5;
        while (1)
        {
          if ((a2 & 0xC000000000000001) != 0)
          {
            uint64_t v10 = specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else
          {
            uint64_t v10 = *(void *)(a2 + 8 * v9);
            swift_retain();
          }
          uint64_t v11 = v9 - 3;
          if (__OFADD__(v9 - 4, 1)) {
            break;
          }
          char v7 = static SessionBookmark.== infix(_:_:)(v10, a1);
          swift_release();
          if ((v7 & 1) == 0)
          {
            ++v9;
            if (v11 != v4) {
              continue;
            }
          }
          goto LABEL_9;
        }
        __break(1u);
LABEL_19:
        swift_bridgeObjectRetain();
        uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
        if (v4) {
          continue;
        }
      }
      goto LABEL_8;
    }
    char v7 = 1;
  }
  else
  {
LABEL_8:
    char v7 = 0;
  }
LABEL_9:
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_10018E668(uint64_t a1, unint64_t a2, void (*a3)(unint64_t, uint64_t), uint64_t a4)
{
  uint64_t v9 = swift_bridgeObjectRetain();
  uint64_t v16 = sub_10018FFC0(v9);
  sub_100190388((size_t *)&v16);
  if (v5)
  {
    uint64_t result = swift_release();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v10 = v16;
    uint64_t v11 = v16[2];
    if (v11)
    {
      uint64_t v12 = *(void *)(type metadata accessor for BiomeDatabaseReader.SessionProxy() - 8);
      uint64_t v13 = (uint64_t)v10 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
      uint64_t v14 = *(void *)(v12 + 72);
      swift_retain();
      do
      {
        sub_10018E7A4(v13, a2, v4, a3, a4);
        v13 += v14;
        --v11;
      }
      while (v11);
      return swift_release_n();
    }
    else
    {
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_10018E7A4(uint64_t a1, unint64_t a2, uint64_t a3, void (*a4)(unint64_t, uint64_t), uint64_t a5)
{
  uint64_t v31 = a5;
  unint64_t v32 = a4;
  uint64_t v37 = a3;
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v34 = *(void *)(v8 - 8);
  uint64_t v35 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = type metadata accessor for BiomeDatabaseReader.SessionProxy();
  uint64_t v11 = *(int *)(v36 + 24);
  uint64_t v38 = a1;
  uint64_t v30 = v11;
  uint64_t v12 = *(void *)(a1 + v11);
  uint64_t v39 = v5;
  if (a2 >> 62)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
    if (!v13) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v13 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_retain();
    swift_bridgeObjectRetain();
    if (!v13) {
      goto LABEL_7;
    }
  }
  unint64_t v33 = a2 & 0xC000000000000001;
  if ((a2 & 0xC000000000000001) != 0)
  {
    uint64_t v14 = specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    uint64_t v14 = *(void *)(a2 + 32);
    swift_retain();
  }
  type metadata accessor for SessionBookmark();
  char v15 = static SessionBookmark.== infix(_:_:)(v14, v12);
  swift_release();
  if (v15) {
    goto LABEL_14;
  }
  if (v13 == 1) {
    goto LABEL_7;
  }
  if (v33)
  {
    uint64_t v23 = specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    uint64_t v23 = *(void *)(a2 + 40);
    swift_retain();
  }
  char v24 = static SessionBookmark.== infix(_:_:)(v23, v12);
  swift_release();
  if (v24)
  {
LABEL_14:
    swift_release();
    return swift_bridgeObjectRelease();
  }
  if (v13 == 2)
  {
LABEL_7:
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v16 = v38;
    uint64_t v17 = *(void *)(v38 + *(int *)(v36 + 20));
    Date.init()();
    uint64_t v18 = v39;
    unint64_t v19 = sub_10018DC28(v17, v16, (uint64_t)v10);
    if (v18) {
      return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v10, v35);
    }
    unint64_t v21 = v19;
    (*(void (**)(char *, uint64_t))(v34 + 8))(v10, v35);
    uint64_t v22 = *(void *)(v16 + v30);
    swift_retain();
    swift_retain();
    v32(v21, v22);
    swift_release();
    return swift_release_n();
  }
  uint64_t v25 = 6;
  while (1)
  {
    if (v33)
    {
      uint64_t result = specialized _ArrayBuffer._getElementSlowPath(_:)();
      uint64_t v26 = result;
    }
    else
    {
      uint64_t v26 = *(void *)(a2 + 8 * v25);
      uint64_t result = swift_retain();
    }
    uint64_t v27 = v25 - 3;
    if (__OFADD__(v25 - 4, 1)) {
      break;
    }
    char v28 = static SessionBookmark.== infix(_:_:)(v26, v12);
    swift_release();
    if (v28) {
      goto LABEL_14;
    }
    ++v25;
    if (v27 == v13) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10018EAD8(void *a1, unint64_t a2, void (*a3)(uint64_t, uint64_t), uint64_t a4)
{
  type metadata accessor for SessionType();
  type metadata accessor for BiomeDatabaseReader.SessionProxy();
  sub_100186FD8();
  uint64_t v12 = Dictionary.init(dictionaryLiteral:)();
  swift_bridgeObjectRetain();
  swift_retain();
  sub_10018D058(a1, &v12, a2, v4, a3, a4);
  if (v5) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v11 = swift_bridgeObjectRetain();
  sub_10018E668(v11, a2, (void (*)(unint64_t, uint64_t))a3, a4);
  return swift_bridgeObjectRelease_n();
}

void sub_10018EBD0(char *a1, void *a2, uint64_t *a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t), uint64_t a7)
{
  uint64_t v64 = a7;
  uint64_t v65 = a6;
  uint64_t v66 = a5;
  uint64_t v67 = a4;
  uint64_t v71 = a1;
  uint64_t v72 = a3;
  uint64_t v9 = sub_10002572C(&qword_1002251B8);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v61 - v13;
  uint64_t v15 = type metadata accessor for BiomeDatabaseReader.SessionProxy();
  __chkstk_darwin(v15);
  uint64_t v68 = (uint64_t)&v61 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for SessionType();
  uint64_t v73 = *(void *)(v17 - 8);
  uint64_t v74 = v17;
  __chkstk_darwin(v17);
  unint64_t v70 = (char *)&v61 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  unint64_t v21 = (char *)&v61 - v20;
  uint64_t v22 = sub_10002572C(&qword_10021BB10);
  __chkstk_darwin(v22 - 8);
  char v24 = (char *)&v61 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for Date();
  double v26 = __chkstk_darwin(v25);
  char v28 = (char *)&v61 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v29 = objc_msgSend(a2, "eventBody", v26);
  if (v29)
  {
    uint64_t v63 = v11;
    uint64_t v69 = v21;
    id v30 = v29;
    [a2 timestamp];
    Date.init(timeIntervalSinceReferenceDate:)();
    uint64_t v31 = v25;
    unint64_t v32 = v30;
    sub_10002538C((uint64_t)v24, 1, 1, v31);
    type metadata accessor for SessionFeedback(0);
    swift_allocObject();
    uint64_t v33 = SessionFeedback.init(withWrappedPayload:creationDate:closingDate:)(v30, (uint64_t)v28, (uint64_t)v24);
    if (v7)
    {
    }
    else
    {
      uint64_t v36 = (char *)v33;
      id v62 = v32;
      uint64_t v37 = *(void *)(v33 + OBJC_IVAR____TtC14SearchFeedback15SessionFeedback_sessionId);
      uint64_t v38 = *(void *)(v33 + OBJC_IVAR____TtC14SearchFeedback15SessionFeedback_sessionId + 8);
      uint64_t v39 = v71;
      swift_bridgeObjectRetain();
      [a2 timestamp];
      double v41 = v40;
      type metadata accessor for SessionBookmark();
      swift_allocObject();
      uint64_t v42 = sub_10019B41C((uint64_t)v39, v37, v38, v41);
      uint64_t v71 = v36;
      uint64_t v44 = v73 + 16;
      unint64_t v43 = *(void (**)(char *, char *, uint64_t))(v73 + 16);
      v43(v69, &v36[OBJC_IVAR____TtC14SearchFeedback15SessionFeedback_type], v74);
      sub_100194D7C(*v72, (uint64_t)v14);
      int v45 = sub_100027BA4((uint64_t)v14, 1, v15);
      uint64_t v61 = (void (*)(uint64_t, uint64_t, uint64_t))v43;
      if (v45 == 1)
      {
        uint64_t v65 = (void (*)(uint64_t, uint64_t))a2;
        uint64_t v66 = v44;
        uint64_t v67 = v15;
        uint64_t v46 = v42;
        sub_100025628((uint64_t)v14, &qword_1002251B8);
      }
      else
      {
        uint64_t v47 = v68;
        sub_1001917B0((uint64_t)v14, v68);
        uint64_t v48 = *(void *)(v47 + *(int *)(v15 + 24));
        uint64_t v49 = swift_retain();
        char v50 = sub_10018E50C(v49, v67);
        swift_release();
        if (v50)
        {
          uint64_t v65 = (void (*)(uint64_t, uint64_t))a2;
          uint64_t v66 = v44;
          uint64_t v67 = v15;
          uint64_t v46 = v42;
          sub_100191828(v47);
        }
        else
        {
          Class v59 = &v71[OBJC_IVAR____TtC14SearchFeedback15SessionFeedback_creationDate];
          uint64_t v67 = swift_retain();
          sub_10018DC28(v67, (uint64_t)v69, (uint64_t)v59);
          swift_release();
          swift_retain();
          uint64_t v60 = swift_retain();
          v65(v60, v48);
          uint64_t v65 = (void (*)(uint64_t, uint64_t))a2;
          uint64_t v66 = v44;
          uint64_t v67 = v15;
          uint64_t v46 = v42;
          sub_100191828(v47);
          swift_release();
          swift_release_n();
        }
      }
      uint64_t v51 = (uint64_t)v63;
      uint64_t v52 = (uint64_t)v69;
      uint64_t v53 = (uint64_t)v70;
      uint64_t v54 = v74;
      uint64_t v55 = v61;
      v61((uint64_t)v70, (uint64_t)v69, v74);
      v55(v51, v52, v54);
      uint64_t v56 = v71;
      swift_retain();
      swift_retain();
      [v65 timestamp];
      uint64_t v57 = v67;
      *(void *)(v51 + *(int *)(v67 + 20)) = v56;
      *(void *)(v51 + *(int *)(v57 + 24)) = v46;
      *(void *)(v51 + *(int *)(v57 + 28)) = v58;
      sub_10002538C(v51, 0, 1, v57);
      sub_10018F224(v51, v53);

      swift_release();
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v52, v54);
    }
  }
  else
  {
    unsigned __int8 v34 = [a2 error];
    sub_100191884();
    swift_allocError();
    *uint64_t v35 = v34;
    v35[1] = 0;
    swift_willThrow();
  }
}

uint64_t sub_10018F224(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10002572C(&qword_1002251B8);
  __chkstk_darwin(v4 - 8);
  char v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for BiomeDatabaseReader.SessionProxy();
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (sub_100027BA4(a1, 1, v10) == 1)
  {
    sub_100025628(a1, &qword_1002251B8);
    sub_10019C50C((uint64_t)v6);
    uint64_t v11 = type metadata accessor for SessionType();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(a2, v11);
    return sub_100025628((uint64_t)v6, &qword_1002251B8);
  }
  else
  {
    sub_1001917B0(a1, (uint64_t)v9);
    sub_10019C908();
    uint64_t v13 = type metadata accessor for SessionType();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(a2, v13);
  }
}

void BiomeDatabaseReader.forEach(withPredicate:block:)()
{
  sub_100017EC4();
  char v2 = v1;
  unint64_t v4 = v3;
  sub_10018D554();
  if (v0)
  {
LABEL_20:
    sub_100024A18();
    return;
  }
  char v6 = v5;
  if ((v2 & 0x80) == 0)
  {
    int v7 = v2 & 1;
    swift_retain();
LABEL_13:
    id v10 = sub_10018D464(v4);
    if (v10)
    {
      uint64_t v11 = v10;
      if (v7)
      {
        uint64_t v12 = (void *)sub_1000265C0();
        sub_10018EAD8(v12, v13, v14, v15);
      }
      else
      {
        swift_bridgeObjectRetain();
        uint64_t v18 = (void *)sub_1000265C0();
        sub_10018D180(v18, v19, v20, v21);
      }

      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      sub_10018FF34();
      uint64_t v16 = sub_100024A30();
      sub_10002CFD0((__n128)xmmword_1001AF280, v16, v17);
    }
    swift_release();
    goto LABEL_20;
  }
  if (!(v4 >> 62))
  {
    uint64_t v8 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v8) {
      goto LABEL_6;
    }
LABEL_10:
    type metadata accessor for SessionBookmark();
    swift_allocObject();
    SessionBookmark.init()();
LABEL_11:
    int v7 = 1;
    goto LABEL_12;
  }
  swift_bridgeObjectRetain();
  if (!_CocoaArrayWrapper.endIndex.getter()) {
    goto LABEL_10;
  }
LABEL_6:
  if ((v4 & 0xC000000000000001) != 0)
  {
    uint64_t v9 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_11;
  }
  if (*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v9 = swift_retain();
    int v7 = 1;
LABEL_12:
    unint64_t v4 = v9;
    goto LABEL_13;
  }
  __break(1u);
}

void BiomeDatabaseReader.forEach(start:block:)(uint64_t a1, void (*a2)(uint64_t, uint64_t), uint64_t a3)
{
  sub_10018D554();
  if (!v3)
  {
    int v7 = v6;
    Date.timeIntervalSinceReferenceDate.getter();
    id v8 = objc_msgSend(v7, "newEnumeratorFromStartTime:");

    if (v8)
    {
      sub_10018EAD8(v8, (unint64_t)_swiftEmptyArrayStorage, a2, a3);
    }
    else
    {
      sub_10018FF34();
      uint64_t v9 = sub_100024A30();
      sub_10002CFD0((__n128)xmmword_1001AF280, v9, v10);
    }
  }
}

void BiomeDatabaseReader.lookupSession(guid:creationTs:)()
{
  sub_100017EC4();
  uint64_t v43 = v4;
  uint64_t v44 = v5;
  uint64_t v6 = sub_10002572C(&qword_10021BB10);
  __chkstk_darwin(v6 - 8);
  sub_1000213B0();
  uint64_t v7 = type metadata accessor for Date();
  sub_100020C48();
  uint64_t v42 = v8;
  __chkstk_darwin(v9);
  sub_10000E074();
  uint64_t v10 = type metadata accessor for SessionType();
  sub_100020C48();
  uint64_t v12 = v11;
  __chkstk_darwin(v13);
  sub_10000DFD0();
  uint64_t v16 = v15 - v14;
  sub_10018D554();
  if (!v1)
  {
    uint64_t v18 = v17;
    uint64_t v37 = v3;
    uint64_t v38 = v2;
    uint64_t v39 = v0;
    uint64_t v40 = v16;
    uint64_t v41 = v12;
    Date.timeIntervalSinceReferenceDate.getter();
    id v19 = objc_msgSend(v18, "newEnumeratorFromStartTime:");

    if (!v19)
    {
      sub_10018FF34();
      uint64_t v21 = sub_100024A30();
      sub_10002CFD0((__n128)xmmword_1001AF280, v21, v22);
      goto LABEL_2;
    }
    swift_bridgeObjectRetain();
    uint64_t v20 = sub_10018D284(v19, v43, v44);
    uint64_t v23 = v20;
    if (!v20)
    {

      goto LABEL_2;
    }
    uint64_t v24 = v40;
    uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v41 + 16))(v40, v20 + OBJC_IVAR____TtC14SearchFeedback15SessionFeedback_type, v10);
    __chkstk_darwin(v25);
    *(&v35 - 2) = v24;
    swift_retain();
    sub_10018D384();
    id v36 = v19;
    uint64_t v45 = v23;
    uint64_t v44 = v26;
    if (v26)
    {
      uint64_t v27 = v42;
      uint64_t v28 = v37;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 16))(v37, v26 + OBJC_IVAR____TtC14SearchFeedback15SessionFeedback_creationDate, v7);
      sub_10002538C(v28, 0, 1, v7);
      int v29 = sub_100027BA4(v28, 1, v7);
      uint64_t v30 = v38;
      if (v29 != 1)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 32))(v38, v28, v7);
LABEL_14:
        sub_10018DC28(v45, v24, v30);
        uint64_t v31 = sub_10000E2BC();
        v32(v31);

        swift_release_n();
        swift_release();
        uint64_t v33 = sub_10002E064();
        v34(v33);
        goto LABEL_2;
      }
    }
    else
    {
      uint64_t v28 = v37;
      sub_10002538C(v37, 1, 1, v7);
      uint64_t v30 = v38;
    }
    Date.init()();
    sub_100025628(v28, &qword_10021BB10);
    goto LABEL_14;
  }
LABEL_2:
  sub_100024A18();
}

uint64_t sub_10018F9DC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v9 = sub_10002572C(&qword_10021BB10);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Date();
  double v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v16 = objc_msgSend(a2, "eventBody", v13);
  if (v16)
  {
    id v17 = v16;
    [a2 timestamp];
    Date.init(timeIntervalSinceReferenceDate:)();
    sub_10002538C((uint64_t)v11, 1, 1, v12);
    type metadata accessor for SessionFeedback(0);
    swift_allocObject();
    uint64_t v18 = SessionFeedback.init(withWrappedPayload:creationDate:closingDate:)(v17, (uint64_t)v15, (uint64_t)v11);
    if (v4
      || ((uint64_t v5 = v18, *(void *)(v18 + OBJC_IVAR____TtC14SearchFeedback15SessionFeedback_sessionId) == a3)
        ? (BOOL v22 = *(void *)(v18 + OBJC_IVAR____TtC14SearchFeedback15SessionFeedback_sessionId + 8) == a4)
        : (BOOL v22 = 0),
          v22))
    {
    }
    else
    {
      char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();

      if ((v23 & 1) == 0)
      {
        swift_release();
        return 0;
      }
    }
  }
  else
  {
    unsigned __int8 v19 = [a2 error];
    sub_100191884();
    swift_allocError();
    *uint64_t v20 = v19;
    v20[1] = 0;
    swift_willThrow();
  }
  return v5;
}

uint64_t sub_10018FBEC(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = sub_10002572C(&qword_10021BB10);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Date();
  double v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v12 = objc_msgSend(a2, "eventBody", v9);
  if (v12)
  {
    id v13 = v12;
    [a2 timestamp];
    Date.init(timeIntervalSinceReferenceDate:)();
    sub_10002538C((uint64_t)v7, 1, 1, v8);
    type metadata accessor for SessionFeedback(0);
    swift_allocObject();
    uint64_t v14 = SessionFeedback.init(withWrappedPayload:creationDate:closingDate:)(v13, (uint64_t)v11, (uint64_t)v7);
    if (v2)
    {
    }
    else
    {
      uint64_t v3 = v14;
      char v18 = static SessionType.== infix(_:_:)();

      if ((v18 & 1) == 0)
      {
        swift_release();
        return 0;
      }
    }
  }
  else
  {
    unsigned __int8 v15 = [a2 error];
    sub_100191884();
    swift_allocError();
    *id v16 = v15;
    v16[1] = 0;
    swift_willThrow();
  }
  return v3;
}

uint64_t BiomeDatabaseReader.deinit()
{
  return v0;
}

uint64_t BiomeDatabaseReader.__deallocating_deinit()
{
  return _swift_deallocClassInstance(v0, 24, 7);
}

void sub_10018FE30()
{
}

uint64_t sub_10018FE54(uint64_t a1)
{
  if (a1 < 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    if (a1)
    {
      type metadata accessor for BiomeDatabaseReader.SessionProxy();
      uint64_t v2 = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)();
      v2[2] = a1;
    }
    else
    {
      uint64_t v2 = _swiftEmptyArrayStorage;
    }
    type metadata accessor for BiomeDatabaseReader.SessionProxy();
    return (uint64_t)v2;
  }
  return result;
}

unint64_t sub_10018FF34()
{
  unint64_t result = qword_100225090;
  if (!qword_100225090)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100225090);
  }
  return result;
}

uint64_t sub_10018FF80(uint64_t a1, void *a2)
{
  return sub_10018FBEC(a1, a2);
}

uint64_t type metadata accessor for BiomeDatabaseReader()
{
  return self;
}

void *sub_10018FFC0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_10002572C(&qword_100225198);
  uint64_t v3 = *(void *)(type metadata accessor for BiomeDatabaseReader.SessionProxy() - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (void *)swift_allocObject();
  unint64_t result = (void *)j__malloc_size(v6);
  if (v4)
  {
    if ((void *)((char *)result - v5) != (void *)0x8000000000000000 || v4 != -1)
    {
      _OWORD v6[2] = v1;
      _OWORD v6[3] = 2 * ((uint64_t)((uint64_t)result - v5) / v4);
      sub_100191480(&v11, (uint64_t)v6 + v5, v1, a1);
      uint64_t v10 = v9;
      swift_bridgeObjectRetain();
      sub_100023380();
      if (v10 == v1) {
        return v6;
      }
      __break(1u);
      return _swiftEmptyArrayStorage;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void *sub_100190114(void *result, int64_t a2, char a3, int64_t *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = a4[2];
  if (v7 <= v8) {
    int64_t v9 = a4[2];
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_10002572C(&qword_10021AC80);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
  }
  id v12 = v10 + 4;
  id v13 = a4 + 4;
  if (v5)
  {
    sub_1001192D0(v13, v8, v12);
    a4[2] = 0;
  }
  else
  {
    sub_100188774((char *)v13, v8, (char *)v12);
  }
  swift_release();
  return v10;
}

size_t sub_1001901EC(size_t result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_25:
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    id v13 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_10002572C(&qword_100225198);
  uint64_t v10 = *(void *)(type metadata accessor for BiomeDatabaseReader.SessionProxy() - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  id v13 = (void *)swift_allocObject();
  unint64_t result = j__malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (result - v12 == 0x8000000000000000 && v11 == -1) {
    goto LABEL_24;
  }
  void v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(result - v12) / v11);
LABEL_19:
  uint64_t v15 = *(void *)(type metadata accessor for BiomeDatabaseReader.SessionProxy() - 8);
  unint64_t v16 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  unint64_t v17 = (unint64_t)v13 + v16;
  unint64_t v18 = a4 + v16;
  if (v5)
  {
    sub_10019980C(v18, v8, v17);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_100188824(v18, v8, v17);
  }
  swift_release();
  return (size_t)v13;
}

void sub_100190388(size_t *a1)
{
  uint64_t v2 = *(void *)(type metadata accessor for BiomeDatabaseReader.SessionProxy() - 8);
  size_t v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    size_t v3 = sub_100191814(v3);
  }
  uint64_t v4 = *(void *)(v3 + 16);
  v5[0] = v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v5[1] = v4;
  sub_100190478(v5);
  *a1 = v3;
}

uint64_t type metadata accessor for BiomeDatabaseReader.SessionProxy()
{
  uint64_t result = qword_100225218;
  if (!qword_100225218) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100190478(uint64_t *a1)
{
  uint64_t v139 = type metadata accessor for BiomeDatabaseReader.SessionProxy();
  uint64_t v133 = *(void *)(v139 - 8);
  __chkstk_darwin(v139);
  uint64_t v130 = (uint64_t)&v125 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v140 = (uint64_t)&v125 - v5;
  __chkstk_darwin(v6);
  uint64_t v137 = (uint64_t)&v125 - v7;
  __chkstk_darwin(v8);
  uint64_t v136 = (uint64_t)&v125 - v9;
  Swift::Int v10 = a1[1];
  Swift::Int v11 = _minimumMergeRunLength(_:)(v10);
  if (v11 >= v10)
  {
    if ((v10 & 0x8000000000000000) == 0)
    {
      if (v10) {
        sub_100190DB0(0, v10, 1, a1);
      }
      return;
    }
LABEL_140:
    __break(1u);
    goto LABEL_141;
  }
  Swift::Int v12 = v11;
  uint64_t v134 = v1;
  uint64_t v138 = a1;
  uint64_t v126 = sub_10018FE54(v10 / 2);
  unint64_t v132 = v13;
  if (v10 > 0)
  {
    Swift::Int v125 = v12;
    Swift::Int v14 = 0;
    uint64_t v15 = (char *)_swiftEmptyArrayStorage;
    Swift::Int v16 = v10;
    Swift::Int v128 = v10;
    while (1)
    {
      Swift::Int v17 = v14;
      Swift::Int v18 = v14 + 1;
      if (v14 + 1 >= v16)
      {
        ++v14;
        unsigned __int8 v19 = v138;
      }
      else
      {
        unsigned __int8 v19 = v138;
        uint64_t v20 = *v138;
        uint64_t v21 = *(void *)(v133 + 72);
        uint64_t v22 = v136;
        sub_10019174C(*v138 + v21 * v18, v136);
        uint64_t v23 = v20 + v21 * v14;
        uint64_t v24 = v137;
        sub_10019174C(v23, v137);
        uint64_t v25 = *(int *)(v139 + 28);
        double v26 = *(double *)(v22 + v25);
        double v27 = *(double *)(v24 + v25);
        sub_100191828(v24);
        sub_100191828(v22);
        Swift::Int v14 = v17 + 2;
        uint64_t v135 = v20;
        uint64_t v141 = v21;
        if (v17 + 2 < v16)
        {
          uint64_t v131 = v17;
          uint64_t v127 = v15;
          uint64_t v28 = v21 * v18;
          uint64_t v29 = v20;
          Swift::Int v30 = v17 + 2;
          uint64_t v31 = v21 * (v17 + 2);
          while (1)
          {
            uint64_t v32 = v136;
            sub_10019174C(v29 + v31, v136);
            uint64_t v33 = v137;
            sub_10019174C(v29 + v28, v137);
            BOOL v34 = *(double *)(v32 + *(int *)(v139 + 28)) >= *(double *)(v33 + *(int *)(v139 + 28));
            sub_100191828(v33);
            sub_100191828(v32);
            if (v26 < v27 == v34) {
              break;
            }
            v29 += v141;
            if (++v30 >= v16)
            {
              Swift::Int v14 = v16;
              uint64_t v15 = v127;
              unsigned __int8 v19 = v138;
              goto LABEL_12;
            }
          }
          uint64_t v15 = v127;
          unsigned __int8 v19 = v138;
          Swift::Int v14 = v30;
LABEL_12:
          Swift::Int v17 = v131;
        }
        if (v26 < v27)
        {
          if (v14 < v17) {
            goto LABEL_142;
          }
          if (v17 < v14)
          {
            Swift::Int v129 = v16;
            uint64_t v127 = v15;
            uint64_t v35 = 0;
            uint64_t v36 = v141;
            uint64_t v37 = v141 * (v14 - 1);
            uint64_t v38 = v14 * v141;
            Swift::Int v39 = v17;
            uint64_t v131 = v17;
            uint64_t v40 = v17 * v141;
            do
            {
              if (v39 != v14 + v35 - 1)
              {
                uint64_t v41 = v135;
                if (!v135) {
                  goto LABEL_148;
                }
                Swift::Int v42 = v14;
                unint64_t v43 = v135 + v40;
                uint64_t v44 = v135 + v37;
                sub_1001917B0(v135 + v40, v130);
                if (v40 < v37 || v43 >= v41 + v38)
                {
                  swift_arrayInitWithTakeFrontToBack();
                  uint64_t v36 = v141;
                }
                else
                {
                  uint64_t v36 = v141;
                  if (v40 != v37) {
                    swift_arrayInitWithTakeBackToFront();
                  }
                }
                sub_1001917B0(v130, v44);
                unsigned __int8 v19 = v138;
                Swift::Int v14 = v42;
              }
              ++v39;
              --v35;
              v37 -= v36;
              v38 -= v36;
              v40 += v36;
            }
            while (v39 < v14 + v35);
            uint64_t v15 = v127;
            Swift::Int v17 = v131;
            Swift::Int v16 = v129;
          }
        }
      }
      if (v14 < v16)
      {
        if (__OFSUB__(v14, v17)) {
          goto LABEL_139;
        }
        if (v14 - v17 < v125)
        {
          if (__OFADD__(v17, v125)) {
            goto LABEL_143;
          }
          if (v17 + v125 >= v16) {
            Swift::Int v46 = v16;
          }
          else {
            Swift::Int v46 = v17 + v125;
          }
          if (v46 < v17)
          {
LABEL_144:
            __break(1u);
LABEL_145:
            __break(1u);
LABEL_146:
            __break(1u);
LABEL_147:
            __break(1u);
LABEL_148:
            __break(1u);
LABEL_149:
            __break(1u);
            return;
          }
          if (v14 != v46)
          {
            uint64_t v131 = v17;
            uint64_t v127 = v15;
            uint64_t v47 = *(void *)(v133 + 72);
            uint64_t v141 = v47 * (v14 - 1);
            uint64_t v135 = v47;
            Swift::Int v48 = v14 * v47;
            Swift::Int v129 = v46;
            do
            {
              uint64_t v49 = 0;
              uint64_t v50 = v131;
              while (1)
              {
                Swift::Int v51 = v14;
                uint64_t v52 = *v19;
                uint64_t v53 = v136;
                sub_10019174C(v48 + v49 + *v19, v136);
                uint64_t v54 = v141 + v49 + v52;
                uint64_t v55 = v137;
                sub_10019174C(v54, v137);
                uint64_t v56 = *(int *)(v139 + 28);
                double v57 = *(double *)(v53 + v56);
                double v58 = *(double *)(v55 + v56);
                sub_100191828(v55);
                sub_100191828(v53);
                if (v57 >= v58) {
                  break;
                }
                uint64_t v59 = *v19;
                if (!*v19) {
                  goto LABEL_146;
                }
                uint64_t v60 = v59 + v141 + v49;
                sub_1001917B0(v59 + v48 + v49, v140);
                swift_arrayInitWithTakeFrontToBack();
                sub_1001917B0(v140, v60);
                v49 -= v135;
                ++v50;
                Swift::Int v14 = v51;
                unsigned __int8 v19 = v138;
                if (v51 == v50) {
                  goto LABEL_46;
                }
              }
              Swift::Int v14 = v51;
LABEL_46:
              ++v14;
              v141 += v135;
              v48 += v135;
            }
            while (v14 != v129);
            Swift::Int v14 = v129;
            uint64_t v15 = v127;
            Swift::Int v17 = v131;
          }
        }
      }
      if (v14 < v17) {
        goto LABEL_138;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_10011B190(0, *((void *)v15 + 2) + 1, 1, v15);
        uint64_t v15 = v114;
      }
      unint64_t v62 = *((void *)v15 + 2);
      unint64_t v61 = *((void *)v15 + 3);
      unint64_t v63 = v62 + 1;
      if (v62 >= v61 >> 1)
      {
        sub_10011B190(v61 > 1, v62 + 1, 1, v15);
        uint64_t v15 = v115;
      }
      *((void *)v15 + 2) = v63;
      uint64_t v64 = v15 + 32;
      uint64_t v65 = &v15[16 * v62 + 32];
      *(void *)uint64_t v65 = v17;
      *((void *)v65 + 1) = v14;
      if (v62)
      {
        while (1)
        {
          unint64_t v66 = v63 - 1;
          if (v63 >= 4)
          {
            uint64_t v71 = &v64[2 * v63];
            uint64_t v72 = *(v71 - 8);
            uint64_t v73 = *(v71 - 7);
            BOOL v77 = __OFSUB__(v73, v72);
            uint64_t v74 = v73 - v72;
            if (v77) {
              goto LABEL_123;
            }
            uint64_t v76 = *(v71 - 6);
            uint64_t v75 = *(v71 - 5);
            BOOL v77 = __OFSUB__(v75, v76);
            uint64_t v69 = v75 - v76;
            char v70 = v77;
            if (v77) {
              goto LABEL_124;
            }
            unint64_t v78 = v63 - 2;
            uint64_t v79 = &v64[2 * v63 - 4];
            uint64_t v81 = *v79;
            uint64_t v80 = v79[1];
            BOOL v77 = __OFSUB__(v80, v81);
            uint64_t v82 = v80 - v81;
            if (v77) {
              goto LABEL_125;
            }
            BOOL v77 = __OFADD__(v69, v82);
            uint64_t v83 = v69 + v82;
            if (v77) {
              goto LABEL_127;
            }
            if (v83 >= v74)
            {
              uint64_t v101 = &v64[2 * v66];
              uint64_t v103 = *v101;
              uint64_t v102 = v101[1];
              BOOL v77 = __OFSUB__(v102, v103);
              uint64_t v104 = v102 - v103;
              if (v77) {
                goto LABEL_133;
              }
              BOOL v94 = v69 < v104;
              goto LABEL_85;
            }
          }
          else
          {
            if (v63 != 3)
            {
              uint64_t v95 = *((void *)v15 + 4);
              uint64_t v96 = *((void *)v15 + 5);
              BOOL v77 = __OFSUB__(v96, v95);
              uint64_t v88 = v96 - v95;
              char v89 = v77;
              goto LABEL_79;
            }
            uint64_t v68 = *((void *)v15 + 4);
            uint64_t v67 = *((void *)v15 + 5);
            BOOL v77 = __OFSUB__(v67, v68);
            uint64_t v69 = v67 - v68;
            char v70 = v77;
          }
          if (v70) {
            goto LABEL_126;
          }
          unint64_t v78 = v63 - 2;
          uint64_t v84 = &v64[2 * v63 - 4];
          uint64_t v86 = *v84;
          uint64_t v85 = v84[1];
          BOOL v87 = __OFSUB__(v85, v86);
          uint64_t v88 = v85 - v86;
          char v89 = v87;
          if (v87) {
            goto LABEL_128;
          }
          unint64_t v90 = &v64[2 * v66];
          uint64_t v92 = *v90;
          uint64_t v91 = v90[1];
          BOOL v77 = __OFSUB__(v91, v92);
          uint64_t v93 = v91 - v92;
          if (v77) {
            goto LABEL_130;
          }
          if (__OFADD__(v88, v93)) {
            goto LABEL_132;
          }
          if (v88 + v93 >= v69)
          {
            BOOL v94 = v69 < v93;
LABEL_85:
            if (v94) {
              unint64_t v66 = v78;
            }
            goto LABEL_87;
          }
LABEL_79:
          if (v89) {
            goto LABEL_129;
          }
          unint64_t v97 = &v64[2 * v66];
          uint64_t v99 = *v97;
          uint64_t v98 = v97[1];
          BOOL v77 = __OFSUB__(v98, v99);
          uint64_t v100 = v98 - v99;
          if (v77) {
            goto LABEL_131;
          }
          if (v100 < v88) {
            goto LABEL_96;
          }
LABEL_87:
          unint64_t v105 = v66 - 1;
          if (v66 - 1 >= v63)
          {
            __break(1u);
LABEL_120:
            __break(1u);
LABEL_121:
            __break(1u);
LABEL_122:
            __break(1u);
LABEL_123:
            __break(1u);
LABEL_124:
            __break(1u);
LABEL_125:
            __break(1u);
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
            goto LABEL_134;
          }
          if (!*v138) {
            goto LABEL_147;
          }
          Swift::Int v106 = v14;
          uint64_t v107 = v15;
          uint64_t v108 = &v64[2 * v105];
          uint64_t v109 = *v108;
          uint64_t v110 = &v64[2 * v66];
          uint64_t v111 = v110[1];
          uint64_t v112 = v134;
          sub_100190FFC(*v138 + *(void *)(v133 + 72) * *v108, *v138 + *(void *)(v133 + 72) * *v110, *v138 + *(void *)(v133 + 72) * v111, v132);
          uint64_t v134 = v112;
          if (v112)
          {
            Swift::Int v10 = v128;
LABEL_102:
            swift_bridgeObjectRelease();
            if (v10 >= -1)
            {
              *(void *)(v126 + 16) = 0;
              swift_bridgeObjectRelease();
              return;
            }
LABEL_141:
            __break(1u);
LABEL_142:
            __break(1u);
LABEL_143:
            __break(1u);
            goto LABEL_144;
          }
          if (v111 < v109) {
            goto LABEL_120;
          }
          if (v66 > *((void *)v107 + 2)) {
            goto LABEL_121;
          }
          *uint64_t v108 = v109;
          v64[2 * v105 + 1] = v111;
          unint64_t v113 = *((void *)v107 + 2);
          if (v66 >= v113) {
            goto LABEL_122;
          }
          uint64_t v15 = v107;
          unint64_t v63 = v113 - 1;
          memmove(&v64[2 * v66], v110 + 2, 16 * (v113 - 1 - v66));
          *((void *)v107 + 2) = v113 - 1;
          Swift::Int v14 = v106;
          if (v113 <= 2) {
            goto LABEL_96;
          }
        }
      }
      unint64_t v63 = 1;
LABEL_96:
      Swift::Int v16 = v138[1];
      Swift::Int v10 = v128;
      if (v14 >= v16) {
        goto LABEL_105;
      }
    }
  }
  uint64_t v15 = (char *)_swiftEmptyArrayStorage;
  unint64_t v63 = _swiftEmptyArrayStorage[2];
LABEL_105:
  if (v63 >= 2)
  {
    uint64_t v116 = *v138;
    while (1)
    {
      unint64_t v117 = v63 - 2;
      if (v63 < 2) {
        break;
      }
      if (!v116) {
        goto LABEL_149;
      }
      uint64_t v118 = v15;
      uint64_t v119 = *(void *)&v15[16 * v117 + 32];
      uint64_t v120 = *(void *)&v15[16 * v63 + 24];
      uint64_t v121 = v134;
      sub_100190FFC(v116 + *(void *)(v133 + 72) * v119, v116 + *(void *)(v133 + 72) * *(void *)&v15[16 * v63 + 16], v116 + *(void *)(v133 + 72) * v120, v132);
      uint64_t v134 = v121;
      if (v121) {
        goto LABEL_102;
      }
      if (v120 < v119) {
        goto LABEL_135;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_10011B25C((uint64_t)v15);
        uint64_t v118 = v124;
      }
      if (v117 >= *((void *)v118 + 2)) {
        goto LABEL_136;
      }
      uint64_t v122 = &v118[16 * v117 + 32];
      *(void *)uint64_t v122 = v119;
      *((void *)v122 + 1) = v120;
      unint64_t v123 = *((void *)v118 + 2);
      if (v63 > v123) {
        goto LABEL_137;
      }
      memmove(&v118[16 * v63 + 16], &v118[16 * v63 + 32], 16 * (v123 - v63));
      *((void *)v118 + 2) = v123 - 1;
      unint64_t v63 = v123 - 1;
      uint64_t v15 = v118;
      if (v123 <= 2) {
        goto LABEL_116;
      }
    }
LABEL_134:
    __break(1u);
LABEL_135:
    __break(1u);
LABEL_136:
    __break(1u);
LABEL_137:
    __break(1u);
LABEL_138:
    __break(1u);
LABEL_139:
    __break(1u);
    goto LABEL_140;
  }
LABEL_116:
  swift_bridgeObjectRelease();
  if (v10 < -1) {
    goto LABEL_145;
  }
  *(void *)(v126 + 16) = 0;
  swift_bridgeObjectRelease();
}

void sub_100190DB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v26 = a1;
  uint64_t v29 = type metadata accessor for BiomeDatabaseReader.SessionProxy();
  __chkstk_darwin(v29);
  uint64_t v30 = (uint64_t)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  Swift::Int v10 = (char *)&v24 - v9;
  __chkstk_darwin(v11);
  Swift::Int v14 = (char *)&v24 - v13;
  uint64_t v28 = a3;
  uint64_t v25 = a2;
  if (a3 != a2)
  {
    uint64_t v15 = *(void *)(v12 + 72);
    uint64_t v32 = v15 * (v28 - 1);
    uint64_t v27 = v15;
    uint64_t v31 = v15 * v28;
    while (2)
    {
      uint64_t v16 = 0;
      uint64_t v17 = v26;
      do
      {
        uint64_t v18 = *a4;
        sub_10019174C(v31 + v16 + *a4, (uint64_t)v14);
        sub_10019174C(v32 + v16 + v18, (uint64_t)v10);
        uint64_t v19 = *(int *)(v29 + 28);
        double v20 = *(double *)&v14[v19];
        double v21 = *(double *)&v10[v19];
        sub_100191828((uint64_t)v10);
        sub_100191828((uint64_t)v14);
        if (v20 >= v21) {
          break;
        }
        uint64_t v22 = *a4;
        if (!*a4)
        {
          __break(1u);
          return;
        }
        uint64_t v23 = v22 + v32 + v16;
        sub_1001917B0(v22 + v31 + v16, v30);
        swift_arrayInitWithTakeFrontToBack();
        sub_1001917B0(v30, v23);
        v16 -= v27;
        ++v17;
      }
      while (v28 != v17);
      v32 += v27;
      v31 += v27;
      if (++v28 != v25) {
        continue;
      }
      break;
    }
  }
}

void sub_100190FFC(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v56 = a3;
  uint64_t v61 = type metadata accessor for BiomeDatabaseReader.SessionProxy();
  __chkstk_darwin(v61);
  uint64_t v8 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v55 - v10;
  uint64_t v13 = *(void *)(v12 + 72);
  if (!v13)
  {
    __break(1u);
LABEL_76:
    __break(1u);
LABEL_77:
    __break(1u);
    goto LABEL_78;
  }
  int64_t v14 = a2 - a1;
  if (a2 - a1 == 0x8000000000000000 && v13 == -1) {
    goto LABEL_76;
  }
  int64_t v16 = v56 - a2;
  if (v56 - a2 == 0x8000000000000000 && v13 == -1) {
    goto LABEL_77;
  }
  unint64_t v60 = a4;
  uint64_t v18 = v14 / v13;
  uint64_t v19 = v13;
  uint64_t v20 = v16 / v13;
  if (v14 / v13 >= v16 / v13)
  {
    unint64_t v23 = v60;
    sub_10019980C(a2, v16 / v13, v60);
    unint64_t v24 = v23 + v20 * v19;
    BOOL v36 = v20 * v19 < 1 || a1 >= a2;
    uint64_t v27 = v19;
    if (v36) {
      goto LABEL_70;
    }
    uint64_t v58 = -v19;
    uint64_t v59 = v8;
    unint64_t v37 = v56;
    uint64_t v57 = v19;
    while (1)
    {
      uint64_t v38 = v58;
      unint64_t v39 = v37 + v58;
      unint64_t v40 = v24 + v58;
      unint64_t v41 = v24;
      sub_10019174C(v24 + v58, (uint64_t)v11);
      unint64_t v42 = a2 + v38;
      uint64_t v43 = a2 + v38;
      uint64_t v44 = (uint64_t)v11;
      uint64_t v45 = (uint64_t)v59;
      sub_10019174C(v43, (uint64_t)v59);
      uint64_t v46 = *(int *)(v61 + 28);
      double v47 = *(double *)(v44 + v46);
      double v48 = *(double *)(v45 + v46);
      uint64_t v49 = v45;
      uint64_t v11 = (char *)v44;
      sub_100191828(v49);
      sub_100191828(v44);
      if (v47 < v48) {
        break;
      }
      if (v37 < v41 || v39 >= v41)
      {
        swift_arrayInitWithTakeFrontToBack();
        unint64_t v24 = v40;
        unint64_t v23 = v60;
LABEL_65:
        uint64_t v27 = v57;
        unint64_t v37 = v39;
        goto LABEL_66;
      }
      unint64_t v23 = v60;
      if (v37 == v41)
      {
        unint64_t v24 = v40;
        goto LABEL_65;
      }
      unint64_t v37 = v39;
      swift_arrayInitWithTakeBackToFront();
      unint64_t v24 = v40;
      uint64_t v27 = v57;
LABEL_66:
      if (v24 <= v23 || a2 <= a1) {
        goto LABEL_70;
      }
    }
    unint64_t v56 = v41;
    if (v37 < a2 || v39 >= a2)
    {
      swift_arrayInitWithTakeFrontToBack();
      a2 = v42;
      unint64_t v23 = v60;
      uint64_t v27 = v57;
    }
    else
    {
      uint64_t v27 = v57;
      if (v37 != a2)
      {
        unint64_t v37 = v39;
        swift_arrayInitWithTakeBackToFront();
        a2 = v42;
        unint64_t v23 = v60;
LABEL_63:
        unint64_t v24 = v56;
        goto LABEL_66;
      }
      a2 = v42;
      unint64_t v23 = v60;
    }
    unint64_t v37 = v39;
    goto LABEL_63;
  }
  unint64_t v21 = v60;
  sub_10019980C(a1, v14 / v13, v60);
  uint64_t v22 = v18 * v19;
  unint64_t v23 = v21;
  unint64_t v24 = v21 + v22;
  unint64_t v25 = v56;
  BOOL v26 = v22 < 1 || a2 >= v56;
  uint64_t v27 = v19;
  if (!v26)
  {
    do
    {
      unint64_t v28 = v24;
      sub_10019174C(a2, (uint64_t)v11);
      sub_10019174C(v23, (uint64_t)v8);
      uint64_t v29 = *(int *)(v61 + 28);
      double v30 = *(double *)&v11[v29];
      double v31 = *(double *)&v8[v29];
      sub_100191828((uint64_t)v8);
      sub_100191828((uint64_t)v11);
      if (v30 >= v31)
      {
        if (a1 < v23 || a1 >= v23 + v27)
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (a1 != v23)
        {
          swift_arrayInitWithTakeBackToFront();
        }
        unint64_t v32 = a2;
        v23 += v27;
        unint64_t v25 = v56;
      }
      else
      {
        unint64_t v32 = a2 + v27;
        if (a1 < a2 || a1 >= v32)
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (a1 != a2)
        {
          swift_arrayInitWithTakeBackToFront();
        }
      }
      unint64_t v24 = v28;
      a1 += v27;
      BOOL v35 = v23 >= v28 || v32 >= v25;
      a2 = v32;
    }
    while (!v35);
  }
  a2 = a1;
LABEL_70:
  int64_t v53 = v24 - v23;
  if (v27 != -1 || v53 != 0x8000000000000000)
  {
    sub_10019980C(v23, v53 / v27, a2);
    return;
  }
LABEL_78:
  __break(1u);
}

id sub_10019141C(uint64_t a1, unint64_t a2, void *a3)
{
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_1000291B4(a1, a2);
  id v7 = [a3 writeData:isa];

  return v7;
}

void sub_100191480(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for BiomeDatabaseReader.SessionProxy();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8 - 8);
  uint64_t v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  int64_t v14 = (char *)&v29 - v13;
  uint64_t v34 = a4;
  uint64_t v17 = *(void *)(a4 + 64);
  uint64_t v16 = a4 + 64;
  uint64_t v15 = v17;
  uint64_t v18 = -1 << *(unsigned char *)(v16 - 32);
  if (-v18 < 64) {
    uint64_t v19 = ~(-1 << -(char)v18);
  }
  else {
    uint64_t v19 = -1;
  }
  unint64_t v20 = v19 & v15;
  if (!a2)
  {
    int64_t v21 = 0;
LABEL_37:
    *a1 = v34;
    a1[1] = v16;
    a1[2] = ~v18;
    a1[3] = v21;
    a1[4] = v20;
    return;
  }
  if (!a3)
  {
    int64_t v21 = 0;
    goto LABEL_37;
  }
  if (a3 < 0)
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  uint64_t v31 = -1 << *(unsigned char *)(v16 - 32);
  unint64_t v32 = a1;
  int64_t v21 = 0;
  uint64_t v22 = 0;
  int64_t v33 = (unint64_t)(63 - v18) >> 6;
  int64_t v30 = v33 - 1;
  if (!v20) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v23 = __clz(__rbit64(v20));
  v20 &= v20 - 1;
  unint64_t v24 = v23 | (v21 << 6);
  while (1)
  {
    ++v22;
    uint64_t v28 = *(void *)(v9 + 72);
    sub_10019174C(*(void *)(v34 + 56) + v28 * v24, (uint64_t)v11);
    sub_1001917B0((uint64_t)v11, (uint64_t)v14);
    sub_1001917B0((uint64_t)v14, a2);
    if (v22 == a3) {
      goto LABEL_36;
    }
    a2 += v28;
    if (v20) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v25 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
      __break(1u);
      goto LABEL_39;
    }
    if (v25 >= v33) {
      goto LABEL_32;
    }
    unint64_t v26 = *(void *)(v16 + 8 * v25);
    if (!v26) {
      break;
    }
LABEL_18:
    unint64_t v20 = (v26 - 1) & v26;
    unint64_t v24 = __clz(__rbit64(v26)) + (v25 << 6);
    int64_t v21 = v25;
  }
  v21 += 2;
  if (v25 + 1 >= v33)
  {
    unint64_t v20 = 0;
    int64_t v21 = v25;
    goto LABEL_36;
  }
  unint64_t v26 = *(void *)(v16 + 8 * v21);
  if (v26) {
    goto LABEL_14;
  }
  int64_t v27 = v25 + 2;
  if (v25 + 2 >= v33) {
    goto LABEL_32;
  }
  unint64_t v26 = *(void *)(v16 + 8 * v27);
  if (v26) {
    goto LABEL_17;
  }
  int64_t v21 = v25 + 3;
  if (v25 + 3 >= v33)
  {
    unint64_t v20 = 0;
    int64_t v21 = v25 + 2;
    goto LABEL_36;
  }
  unint64_t v26 = *(void *)(v16 + 8 * v21);
  if (v26)
  {
LABEL_14:
    int64_t v25 = v21;
    goto LABEL_18;
  }
  int64_t v27 = v25 + 4;
  if (v25 + 4 >= v33)
  {
LABEL_32:
    unint64_t v20 = 0;
LABEL_36:
    uint64_t v18 = v31;
    a1 = v32;
    goto LABEL_37;
  }
  unint64_t v26 = *(void *)(v16 + 8 * v27);
  if (v26)
  {
LABEL_17:
    int64_t v25 = v27;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v25 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v25 >= v33)
    {
      unint64_t v20 = 0;
      int64_t v21 = v30;
      goto LABEL_36;
    }
    unint64_t v26 = *(void *)(v16 + 8 * v25);
    ++v27;
    if (v26) {
      goto LABEL_18;
    }
  }
LABEL_40:
  __break(1u);
}

uint64_t sub_10019174C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BiomeDatabaseReader.SessionProxy();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001917B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BiomeDatabaseReader.SessionProxy();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

size_t sub_100191814(uint64_t a1)
{
  return sub_1001901EC(0, *(void *)(a1 + 16), 0, a1);
}

uint64_t sub_100191828(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for BiomeDatabaseReader.SessionProxy();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_100191884()
{
  unint64_t result = qword_1002251A8;
  if (!qword_1002251A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1002251A8);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for BiomeReadError(unsigned __int16 *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  unsigned int v2 = a2 + 0xFFFF;
  if ((a2 + 0xFFFF) <= 0xFFFEFFFF) {
    unsigned int v3 = 2;
  }
  else {
    unsigned int v3 = 4;
  }
  if (v2 < 0xFF0000) {
    unsigned int v3 = 1;
  }
  if (v2 >= 0x10000) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  switch(v4)
  {
    case 1:
      uint64_t v4 = *((unsigned __int8 *)a1 + 2);
      if (!*((unsigned char *)a1 + 2)) {
        return v4;
      }
      goto LABEL_17;
    case 2:
      uint64_t v4 = a1[1];
      if (!a1[1]) {
        return v4;
      }
      goto LABEL_17;
    case 3:
      __break(1u);
      JUMPOUT(0x100191968);
    case 4:
      uint64_t v4 = *(unsigned int *)(a1 + 1);
      if (v4) {
LABEL_17:
      }
        uint64_t v4 = (*a1 | (v4 << 16)) - 0xFFFF;
      break;
    default:
      return v4;
  }
  return v4;
}

uint64_t storeEnumTagSinglePayload for BiomeReadError(uint64_t result, int a2, int a3)
{
  unsigned int v3 = a3 + 0xFFFF;
  if ((a3 + 0xFFFF) <= 0xFFFEFFFF) {
    int v4 = 2;
  }
  else {
    int v4 = 4;
  }
  if (v3 < 0xFF0000) {
    int v4 = 1;
  }
  if (v3 >= 0x10000) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 0;
  }
  if (a3) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  if (a2)
  {
    unsigned int v7 = ((a2 - 1) >> 16) + 1;
    *(_WORD *)unint64_t result = a2 - 1;
    switch(v6)
    {
      case 1:
        *(unsigned char *)(result + 2) = v7;
        return result;
      case 2:
        *(_WORD *)(result + 2) = v7;
        return result;
      case 3:
        goto LABEL_21;
      case 4:
        *(_DWORD *)(result + 2) = v7;
        return result;
      default:
        return result;
    }
  }
  switch(v6)
  {
    case 1:
      *(unsigned char *)(result + 2) = 0;
      break;
    case 2:
      *(_WORD *)(result + 2) = 0;
      break;
    case 3:
LABEL_21:
      __break(1u);
      JUMPOUT(0x100191A38);
    case 4:
      *(_DWORD *)(result + 2) = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100191A60(unsigned __int8 *a1)
{
  if (a1[1]) {
    return (*a1 | (a1[1] << 8)) - 255;
  }
  else {
    return 0;
  }
}

unsigned char *sub_100191A80(unsigned char *result, int a2)
{
  if (a2)
  {
    *unint64_t result = a2 - 1;
    unsigned int v2 = ((a2 - 1) >> 8) + 1;
  }
  else
  {
    LOBYTE(v2) = 0;
  }
  result[1] = v2;
  return result;
}

ValueMetadata *type metadata accessor for BiomeReadError()
{
  return &type metadata for BiomeReadError;
}

uint64_t *sub_100191AB4(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    int v4 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = type metadata accessor for SessionType();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(v4, a2, v7);
    uint64_t v8 = a3[6];
    *(uint64_t *)((char *)v4 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    *(uint64_t *)((char *)v4 + v8) = *(uint64_t *)((char *)a2 + v8);
    *(uint64_t *)((char *)v4 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t sub_100191B9C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SessionType();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  swift_release();

  return swift_release();
}

uint64_t sub_100191C1C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SessionType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_100191CB8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SessionType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  swift_retain();
  swift_release();
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  swift_retain();
  swift_release();
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_100191D6C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SessionType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_100191DFC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for SessionType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  swift_release();
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  swift_release();
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_100191EA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100191EB4);
}

uint64_t sub_100191EB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for SessionType();
  sub_1000248F0();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    return sub_100027BA4(a1, a2, v6);
  }
  else
  {
    unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v9 >= 0xFFFFFFFF) {
      LODWORD(v9) = -1;
    }
    return (v9 + 1);
  }
}

uint64_t sub_100191F40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100191F54);
}

void sub_100191F54(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for SessionType();
  sub_1000248F0();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    sub_10002538C(a1, a2, a2, v8);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
}

uint64_t sub_100191FDC()
{
  uint64_t result = type metadata accessor for SessionType();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

Swift::Int sub_100192084(char a1)
{
  return Hasher._finalize()();
}

Swift::Int sub_1001920D4()
{
  return Hasher._finalize()();
}

uint64_t sub_10019211C()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1001921D0()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10019230C(uint64_t a1, char a2)
{
  return Hasher._finalize()();
}

Swift::Int sub_100192358()
{
  return Hasher._finalize()();
}

Swift::Int sub_10019239C(uint64_t a1, char a2)
{
  return Hasher._finalize()();
}

uint64_t sub_1001923E0(char a1)
{
  uint64_t result = 29556;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x6E6F6973736573;
      break;
    case 2:
      uint64_t result = 0x746E65696C63;
      break;
    case 3:
      uint64_t result = 0x6975675F72657375;
      break;
    case 4:
      uint64_t result = 0x6C62616E655F7564;
      break;
    case 5:
      uint64_t result = 0x5F7972746E756F63;
      break;
    case 6:
      uint64_t result = 0x656C61636F6CLL;
      break;
    case 7:
      uint64_t result = 0x625F6D6574737973;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1001924E8(char a1)
{
  uint64_t result = 29556;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x6B63616264656566;
      break;
    case 2:
      uint64_t result = 1701869940;
      break;
    case 3:
      uint64_t result = 0x64695F7972657571;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100192568(unint64_t a1)
{
  sub_10001B620(v1 + 6, v1[9]);
  uint64_t v4 = sub_100025F8C();
  v5(v4);
  if (v2) {
    return (uint64_t)v1;
  }
  sub_10001B620(v35, v35[3]);
  uint64_t v6 = sub_100025FBC();
  v7(v6);
  swift_getAssociatedTypeWitness();
  sub_10002572C(&qword_100224AD0);
  uint64_t v8 = _arrayForceCast<A, B>(_:)();
  uint64_t result = swift_bridgeObjectRelease();
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)(v8 + 16) > a1)
  {
    sub_1000245D8(result, v10, v11, v12, v13, v14, v15, v16, v32[0]);
    swift_bridgeObjectRelease();
    sub_10001B620(v32, v33);
    uint64_t v17 = sub_10001810C();
    uint64_t v19 = v18(v17);
    uint64_t v21 = v20;
    uint64_t v22 = v33;
    uint64_t v23 = v34;
    sub_10001B620(v32, v33);
    uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v23 + 24))(v22, v23);
    uint64_t v25 = type metadata accessor for RawPayload();
    unint64_t v26 = (void *)BMUseCaseLegacy;
    int64_t v27 = objc_allocWithZone((Class)BMStreamDatastoreReader);
    id v28 = v26;
    uint64_t v29 = (void *)v24;
    unint64_t v1 = v27;
    int64_t v30 = sub_10018AD00(v19, v21, v29, v25, v28);
    if (v30)
    {
      unint64_t v1 = v30;
    }
    else
    {
      sub_100189A30();
      sub_100024A30();
      *uint64_t v31 = 3;
      swift_willThrow();
    }
    sub_10001CA50((uint64_t)v32);
    sub_10001CA50((uint64_t)v35);
    return (uint64_t)v1;
  }
  __break(1u);
  return result;
}

uint64_t sub_100192768()
{
  return sub_100192780();
}

uint64_t sub_100192780()
{
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    uint64_t result = swift_dynamicCastClass();
    if (result) {
      return result;
    }
    swift_release();
  }
  sub_10014D2C8();
  sub_100024A30();
  *(_DWORD *)uint64_t v1 = 0;
  *(unsigned char *)(v1 + 4) = 1;
  return swift_willThrow();
}

uint64_t sub_100192814()
{
  return sub_100192834(&qword_100224AF0);
}

uint64_t sub_100192834(uint64_t *a1)
{
  sub_10002572C(a1);
  sub_100028054();
  if (!v2)
  {
    uint64_t v1 = BaseBiomeTable.getSQLiteBridge()();
    swift_release();
  }
  return v1;
}

Swift::Int sub_1001928A0(uint64_t a1)
{
  return sub_1001928C0(a1, &qword_100224AF0);
}

Swift::Int sub_1001928C0(uint64_t a1, uint64_t *a2)
{
  sub_1000245F8(a1, a2);
  sub_100192780();
  if (!v2)
  {
    Swift::Int countAndFlagsBits = BaseBiomeTable.getMessageName(forTable:storeIndex:)(v4[1], countAndFlagsBits)._countAndFlagsBits;
    swift_release();
  }
  return countAndFlagsBits;
}

double sub_100192938()
{
  return sub_100192958(&qword_100224AF0);
}

double sub_100192958(uint64_t *a1)
{
  sub_10002572C(a1);
  sub_100028054();
  if (!v1)
  {
    double TimeFrame = BaseBiomeTable.getQueryTimeFrameGuideline()();
    swift_release();
  }
  return TimeFrame;
}

uint64_t sub_1001929C0(uint64_t a1)
{
  return sub_1001929E0(a1, &qword_100224AF0);
}

uint64_t sub_1001929E0(uint64_t a1, uint64_t *a2)
{
  sub_1000245F8(a1, a2);
  sub_100192780();
  if (!v2)
  {
    unint64_t v3 = sub_100024D64();
    sub_100192568(v3);
    swift_release();
  }
  return sub_100024D64();
}

uint64_t sub_100192A48(uint64_t a1)
{
  return sub_100192A78(a1, &qword_100224AF8, &qword_100224AF0, &qword_1002257E0);
}

uint64_t sub_100192A78(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8 = v4;
  sub_10002572C(a2);
  if (!swift_dynamicCastClass())
  {
    sub_100189A30();
    sub_100024A30();
    *uint64_t v11 = 2;
    swift_willThrow();
    swift_release();
    goto LABEL_6;
  }
  swift_retain();
  swift_retain();
  uint64_t v9 = sub_100192834(a3);
  if (v5)
  {
    swift_release();
    swift_release_n();
LABEL_6:
    sub_10002572C(a4);
    swift_deallocPartialClassInstance();
    return v8;
  }
  *(void *)(v4 + 32) = v9;
  *(void *)(v4 + 40) = v10;
  *(double *)(v4 + 48) = sub_100192958(a3);
  *(void *)(v4 + 56) = v13;
  swift_release();
  uint64_t v8 = SQLiteBaseVTab.Cursor.init(_:)();
  swift_release();
  return v8;
}

void *SearchFeedbackTableColumn.columnType.getter(char a1)
{
  uint64_t v1 = &type metadata for Double;
  switch(a1)
  {
    case 1:
      uint64_t v1 = &type metadata for Data;
      sub_100133864();
      break;
    case 2:
      uint64_t v1 = &type metadata for String;
      break;
    case 3:
      uint64_t v1 = (void *)sub_10002572C(&qword_100223618);
      sub_100192C70();
      break;
    default:
      return v1;
  }
  return v1;
}

unint64_t sub_100192C70()
{
  unint64_t result = qword_100223620;
  if (!qword_100223620)
  {
    sub_1000371D4(&qword_100223618);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100223620);
  }
  return result;
}

uint64_t SearchFeedbackTableColumn.propertyName.getter(char a1)
{
  uint64_t result = 0x6D617473656D6974;
  switch(a1)
  {
    case 1:
      uint64_t result = sub_10002C850();
      break;
    case 2:
      uint64_t result = 0xD000000000000012;
      break;
    case 3:
      uint64_t result = 0x64497972657571;
      break;
    default:
      return result;
  }
  return result;
}

SearchFeedback::SearchFeedbackTableColumn_optional __swiftcall SearchFeedbackTableColumn.init(rawValue:)(Swift::String rawValue)
{
  uint64_t object = rawValue._object;
  v2._Swift::Int countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._uint64_t object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100206800, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4) {
    return (SearchFeedback::SearchFeedbackTableColumn_optional)4;
  }
  else {
    return (SearchFeedback::SearchFeedbackTableColumn_optional)v3;
  }
}

_UNKNOWN **static SearchFeedbackTableColumn.allCases.getter()
{
  return &off_100206630;
}

uint64_t SearchFeedbackTableColumn.rawValue.getter(char a1)
{
  uint64_t result = 29556;
  switch(a1)
  {
    case 1:
      uint64_t result = sub_10002C850();
      break;
    case 2:
      uint64_t result = 1701869940;
      break;
    case 3:
      uint64_t result = 0x64695F7972657571;
      break;
    default:
      return result;
  }
  return result;
}

BOOL sub_100192E28(uint64_t a1, char *a2, uint64_t a3)
{
  unint64_t v6 = sub_100193CF0();

  return static SQLiteColumnDescribing.== infix(_:_:)(a1, a2, a3, v6);
}

Swift::Int sub_100192E7C()
{
  return sub_1001920D4();
}

uint64_t sub_100192E84()
{
  return sub_10019211C();
}

Swift::Int sub_100192E8C()
{
  return sub_100192358();
}

SearchFeedback::SearchFeedbackTableColumn_optional sub_100192E94@<W0>(Swift::String *a1@<X0>, SearchFeedback::SearchFeedbackTableColumn_optional *a2@<X8>)
{
  result.Swift::Bool value = SearchFeedbackTableColumn.init(rawValue:)(*a1).value;
  a2->Swift::Bool value = result.value;
  return result;
}

uint64_t sub_100192EC4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = SearchFeedbackTableColumn.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_100192EF0(void *a1@<X8>)
{
  *a1 = &off_100206630;
}

void *sub_100192F00()
{
  return SearchFeedbackTableColumn.columnType.getter(*v0);
}

uint64_t sub_100192F08()
{
  return sub_1001924E8(*v0);
}

void sub_100192F10()
{
}

Swift::String __swiftcall SearchFeedbackTable.getModuleName()()
{
  uint64_t v0 = 0x6162646565665F70;
  uint64_t v1 = (void *)0xEA00000000006B63;
  result._uint64_t object = v1;
  result._Swift::Int countAndFlagsBits = v0;
  return result;
}

uint64_t SearchFeedbackTable.__allocating_init(config:environment:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_allocObject();
  sub_10001C20C(a1, (uint64_t)v8);
  uint64_t v6 = sub_100187FC8(v8, a2, a3);
  sub_10001CA50(a1);
  return v6;
}

uint64_t SearchFeedbackTable.init(config:environment:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10001C20C(a1, (uint64_t)v8);
  uint64_t v6 = sub_100187FC8(v8, a2, a3);
  sub_10001CA50(a1);
  return v6;
}