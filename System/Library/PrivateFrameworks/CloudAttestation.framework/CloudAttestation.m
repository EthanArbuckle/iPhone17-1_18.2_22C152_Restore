void sub_24A1A0F58()
{
  qword_26977A328 = (uint64_t)&unk_26FDFBC78;
}

void sub_24A1A0F6C(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
}

uint64_t sub_24A1A0F7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_24A1B0EE4(a1);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4;
  *(unsigned char *)(a2 + 9) = v5 & 1;
  return result;
}

uint64_t sub_24A1A0FB0()
{
  uint64_t result = *v0;
  if (*((unsigned char *)v0 + 8) == 1) {
    return qword_24A2A99A8[result];
  }
  return result;
}

uint64_t sub_24A1A0FD0@<X0>(void *a1@<X8>)
{
  if (qword_269778390 != -1) {
    swift_once();
  }
  *a1 = qword_26977A328;

  return swift_bridgeObjectRetain();
}

uint64_t sub_24A1A103C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_24A1B0EE4(*a1);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4;
  *(unsigned char *)(a2 + 9) = v5 & 1;
  return result;
}

void sub_24A1A1074(void *a1@<X8>)
{
  uint64_t v2 = *v1;
  if (*((unsigned char *)v1 + 8) == 1) {
    uint64_t v2 = qword_24A2A99A8[v2];
  }
  *a1 = v2;
}

uint64_t sub_24A1A1098()
{
  return sub_24A2A7F50();
}

uint64_t sub_24A1A1104(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_24A1AEB34();

  return MEMORY[0x270F44AF0](a1, a2, v4);
}

uint64_t sub_24A1A1150()
{
  return sub_24A2A7F50();
}

BOOL sub_24A1A11B8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  if (*((unsigned char *)a1 + 8) == 1) {
    uint64_t v2 = qword_24A2A99A8[v2];
  }
  uint64_t v3 = *a2;
  if (*((unsigned char *)a2 + 8)) {
    uint64_t v3 = qword_24A2A99A8[v3];
  }
  return v2 == v3;
}

uint64_t sub_24A1A11F0()
{
  uint64_t v0 = sub_24A2A7130();
  __swift_allocate_value_buffer(v0, qword_26977A330);
  __swift_project_value_buffer(v0, (uint64_t)qword_26977A330);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697787B0);
  v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2697787B8) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_24A2A8A30;
  unint64_t v4 = v18 + v3 + v1[14];
  *(void *)(v18 + v3) = 0;
  *(void *)unint64_t v4 = "UNKNOWN";
  *(void *)(v4 + 8) = 7;
  *(unsigned char *)(v4 + 16) = 2;
  uint64_t v5 = *MEMORY[0x263F50718];
  uint64_t v6 = sub_24A2A7100();
  v7 = *(void (**)(void))(*(void *)(v6 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v7)(v4, v5, v6);
  unint64_t v8 = v18 + v3 + v2 + v1[14];
  *(void *)(v18 + v3 + v2) = 1;
  *(void *)unint64_t v8 = "RELEASE";
  *(void *)(v8 + 8) = 7;
  *(unsigned char *)(v8 + 16) = 2;
  v7();
  v9 = (void *)(v18 + v3 + 2 * v2);
  v10 = (char *)v9 + v1[14];
  void *v9 = 3;
  *(void *)v10 = "KEYBUNDLE_TGT";
  *((void *)v10 + 1) = 13;
  v10[16] = 2;
  v7();
  v11 = (void *)(v18 + v3 + 3 * v2);
  v12 = (char *)v11 + v1[14];
  void *v11 = 4;
  *(void *)v12 = "KEYBUNDLE_OTT";
  *((void *)v12 + 1) = 13;
  v12[16] = 2;
  v7();
  v13 = (void *)(v18 + v3 + 4 * v2);
  v14 = (char *)v13 + v1[14];
  void *v13 = 5;
  *(void *)v14 = "KEYBUNDLE_OHTTP";
  *((void *)v14 + 1) = 15;
  v14[16] = 2;
  v7();
  v15 = (void *)(v18 + v3 + 5 * v2);
  v16 = (char *)v15 + v1[14];
  void *v15 = 100;
  *(void *)v16 = "TEST_MARKER";
  *((void *)v16 + 1) = 11;
  v16[16] = 2;
  v7();
  return sub_24A2A7110();
}

uint64_t sub_24A1A14A0@<X0>(uint64_t a1@<X8>)
{
  return sub_24A1ADE40(&qword_269778398, (uint64_t)qword_26977A330, a1);
}

uint64_t sub_24A1A14C4()
{
  uint64_t v0 = sub_24A2A7130();
  __swift_allocate_value_buffer(v0, qword_26977A348);
  __swift_project_value_buffer(v0, (uint64_t)qword_26977A348);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697787B0);
  v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2697787B8) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_24A2A8A40;
  unint64_t v4 = v21 + v3;
  unint64_t v5 = v21 + v3 + v1[14];
  *(void *)(v21 + v3) = 1;
  *(void *)unint64_t v5 = "version";
  *(void *)(v5 + 8) = 7;
  *(unsigned char *)(v5 + 16) = 2;
  uint64_t v6 = *MEMORY[0x263F50718];
  uint64_t v7 = sub_24A2A7100();
  unint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  unint64_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)unint64_t v9 = "application";
  *(void *)(v9 + 8) = 11;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  v10 = (void *)(v4 + 2 * v2);
  v11 = (char *)v10 + v1[14];
  void *v10 = 3;
  *(void *)v11 = "type";
  *((void *)v11 + 1) = 4;
  v11[16] = 2;
  v8();
  v12 = (void *)(v4 + 3 * v2);
  v13 = (char *)v12 + v1[14];
  void *v12 = 4;
  *(void *)v13 = "expiryMs";
  *((void *)v13 + 1) = 8;
  v13[16] = 2;
  v8();
  v14 = (void *)(v4 + 4 * v2);
  v15 = (char *)v14 + v1[14];
  void *v14 = 5;
  *(void *)v15 = "data";
  *((void *)v15 + 1) = 4;
  v15[16] = 2;
  v8();
  v16 = (void *)(v4 + 5 * v2);
  v17 = (char *)v16 + v1[14];
  void *v16 = 6;
  *(void *)v17 = "unhashedMetadata";
  *((void *)v17 + 1) = 16;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)v19 = "insertData";
  *((void *)v19 + 1) = 10;
  v19[16] = 2;
  v8();
  return sub_24A2A7110();
}

uint64_t sub_24A1A17B0()
{
  uint64_t result = sub_24A2A6ED0();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          sub_24A1AE934();
          goto LABEL_8;
        case 2:
          sub_24A1AE988();
          goto LABEL_8;
        case 3:
          sub_24A1AEB34();
LABEL_8:
          uint64_t v4 = v3;
          sub_24A2A6F10();
          goto LABEL_11;
        case 4:
          uint64_t v4 = v3;
          sub_24A2A6F80();
          goto LABEL_11;
        case 5:
        case 6:
        case 7:
          uint64_t v4 = v3;
          sub_24A2A6F40();
LABEL_11:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = sub_24A2A6ED0();
    }
  }
  return result;
}

uint64_t sub_24A1A1940()
{
  if (!*v0 || (sub_24A1AE934(), uint64_t result = sub_24A2A7070(), !v1))
  {
    if (!v0[2] || (sub_24A1AE988(), uint64_t result = sub_24A2A7070(), !v1))
    {
      if (!v0[4] || (sub_24A1AEB34(), uint64_t result = sub_24A2A7070(), !v1))
      {
        if (!v0[6] || (uint64_t result = sub_24A2A70D0(), !v1))
        {
          uint64_t v3 = v0[7];
          unint64_t v4 = v0[8];
          switch(v4 >> 62)
          {
            case 1uLL:
              if ((int)v3 != v3 >> 32) {
                goto LABEL_15;
              }
              goto LABEL_16;
            case 2uLL:
              if (*(void *)(v3 + 16) != *(void *)(v3 + 24)) {
                goto LABEL_15;
              }
              goto LABEL_16;
            case 3uLL:
              goto LABEL_16;
            default:
              if ((v4 & 0xFF000000000000) == 0) {
                goto LABEL_16;
              }
LABEL_15:
              uint64_t result = sub_24A2A7090();
              if (!v1)
              {
LABEL_16:
                uint64_t v5 = v0[9];
                unint64_t v6 = v0[10];
                switch(v6 >> 62)
                {
                  case 1uLL:
                    if ((int)v5 != v5 >> 32) {
                      goto LABEL_22;
                    }
                    goto LABEL_23;
                  case 2uLL:
                    if (*(void *)(v5 + 16) != *(void *)(v5 + 24)) {
                      goto LABEL_22;
                    }
                    goto LABEL_23;
                  case 3uLL:
                    goto LABEL_23;
                  default:
                    if ((v6 & 0xFF000000000000) == 0) {
                      goto LABEL_23;
                    }
LABEL_22:
                    uint64_t result = sub_24A2A7090();
                    if (!v1)
                    {
LABEL_23:
                      uint64_t v7 = v0[11];
                      unint64_t v8 = v0[12];
                      switch(v8 >> 62)
                      {
                        case 1uLL:
                          uint64_t v9 = (int)v7;
                          uint64_t v10 = v7 >> 32;
                          goto LABEL_28;
                        case 2uLL:
                          uint64_t v9 = *(void *)(v7 + 16);
                          uint64_t v10 = *(void *)(v7 + 24);
LABEL_28:
                          if (v9 != v10) {
                            goto LABEL_29;
                          }
                          goto LABEL_30;
                        case 3uLL:
                          goto LABEL_30;
                        default:
                          if ((v8 & 0xFF000000000000) == 0) {
                            goto LABEL_30;
                          }
LABEL_29:
                          uint64_t result = sub_24A2A7090();
                          if (!v1)
                          {
LABEL_30:
                            type metadata accessor for ATLogInsertRequest(0);
                            uint64_t result = sub_24A2A6DF0();
                          }
                          break;
                      }
                    }
                    break;
                }
              }
              break;
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_24A1A1C20@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 1;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 1;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 64) = xmmword_24A2A8A50;
  *(_OWORD *)(a1 + 80) = xmmword_24A2A8A50;
  *(void *)(a1 + 96) = 0xC000000000000000;
  return sub_24A2A6E00();
}

unint64_t sub_24A1A1C78()
{
  return 0xD000000000000012;
}

uint64_t sub_24A1A1C98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 44);
  uint64_t v5 = sub_24A2A6E10();
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t sub_24A1A1D08(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 44);
  uint64_t v5 = sub_24A2A6E10();
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);

  return v6(v4, a1, v5);
}

uint64_t (*sub_24A1A1D78())()
{
  return nullsub_1;
}

uint64_t sub_24A1A1DA0()
{
  return sub_24A1A17B0();
}

uint64_t sub_24A1A1DB8()
{
  return sub_24A1A1940();
}

uint64_t sub_24A1A1DD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A1AE124(&qword_2697787C0, (void (*)(uint64_t))type metadata accessor for ATLogInsertRequest);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t sub_24A1A1E54@<X0>(uint64_t a1@<X8>)
{
  return sub_24A1ADE40(&qword_2697783A0, (uint64_t)qword_26977A348, a1);
}

uint64_t sub_24A1A1E78(uint64_t a1)
{
  uint64_t v2 = sub_24A1AE124(&qword_269778750, (void (*)(uint64_t))type metadata accessor for ATLogInsertRequest);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t sub_24A1A1EE8()
{
  sub_24A1AE124(&qword_269778750, (void (*)(uint64_t))type metadata accessor for ATLogInsertRequest);

  return sub_24A2A7010();
}

uint64_t sub_24A1A1F6C()
{
  uint64_t v0 = sub_24A2A7130();
  __swift_allocate_value_buffer(v0, qword_26977A360);
  __swift_project_value_buffer(v0, (uint64_t)qword_26977A360);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697787B0);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2697787B8) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_24A2A8A60;
  unint64_t v4 = v3 + v2 + v1[14];
  *(void *)(v3 + v2) = 1;
  *(void *)unint64_t v4 = "status";
  *(void *)(v4 + 8) = 6;
  *(unsigned char *)(v4 + 16) = 2;
  uint64_t v5 = *MEMORY[0x263F50718];
  uint64_t v6 = sub_24A2A7100();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 104))(v4, v5, v6);
  return sub_24A2A7110();
}

uint64_t sub_24A1A20C8()
{
  uint64_t result = sub_24A2A6ED0();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 1)
      {
        sub_24A1AE9DC();
        sub_24A2A6F10();
      }
      uint64_t result = sub_24A2A6ED0();
    }
  }
  return result;
}

uint64_t sub_24A1A2178()
{
  if (!*v0 || (sub_24A1AE9DC(), uint64_t result = sub_24A2A7070(), !v1))
  {
    type metadata accessor for ATLogInsertResponse(0);
    return sub_24A2A6DF0();
  }
  return result;
}

uint64_t sub_24A1A2234@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
  return sub_24A2A6E00();
}

unint64_t sub_24A1A2260()
{
  return 0xD000000000000013;
}

uint64_t sub_24A1A227C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 20);
  uint64_t v5 = sub_24A2A6E10();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t sub_24A1A22EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 20);
  uint64_t v5 = sub_24A2A6E10();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);

  return v6(v4, a1, v5);
}

uint64_t (*sub_24A1A235C())()
{
  return nullsub_1;
}

uint64_t sub_24A1A2380()
{
  return sub_24A1A20C8();
}

uint64_t sub_24A1A2398()
{
  return sub_24A1A2178();
}

uint64_t sub_24A1A23B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A1AE124(&qword_2697787D8, (void (*)(uint64_t))type metadata accessor for ATLogInsertResponse);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t sub_24A1A242C@<X0>(uint64_t a1@<X8>)
{
  return sub_24A1ADE40(&qword_2697783A8, (uint64_t)qword_26977A360, a1);
}

uint64_t sub_24A1A2450(uint64_t a1)
{
  uint64_t v2 = sub_24A1AE124(&qword_269778730, (void (*)(uint64_t))type metadata accessor for ATLogInsertResponse);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t sub_24A1A24BC()
{
  sub_24A1AE124(&qword_269778730, (void (*)(uint64_t))type metadata accessor for ATLogInsertResponse);

  return sub_24A2A7010();
}

uint64_t sub_24A1A253C()
{
  uint64_t v0 = sub_24A2A7130();
  __swift_allocate_value_buffer(v0, qword_26977A378);
  __swift_project_value_buffer(v0, (uint64_t)qword_26977A378);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697787B0);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2697787B8) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_24A2A8A70;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *uint64_t v5 = 1;
  *(void *)unint64_t v6 = "version";
  *(void *)(v6 + 8) = 7;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = sub_24A2A7100();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "application";
  *((void *)v10 + 1) = 11;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "identifier";
  *(void *)(v11 + 8) = 10;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return sub_24A2A7110();
}

uint64_t sub_24A1A2740()
{
  uint64_t result = sub_24A2A6ED0();
  if (!v0)
  {
    while (1)
    {
      if (v2) {
        return result;
      }
      switch(result)
      {
        case 3:
          sub_24A2A6F40();
          goto LABEL_12;
        case 2:
          sub_24A1AE988();
          break;
        case 1:
          sub_24A1AE934();
          break;
        default:
          goto LABEL_12;
      }
      sub_24A2A6F10();
LABEL_12:
      uint64_t result = sub_24A2A6ED0();
    }
  }
  return result;
}

uint64_t sub_24A1A2854()
{
  if (!*v0 || (sub_24A1AE934(), uint64_t result = sub_24A2A7070(), !v1))
  {
    if (!v0[2] || (sub_24A1AE988(), uint64_t result = sub_24A2A7070(), !v1))
    {
      uint64_t v3 = v0[4];
      unint64_t v4 = v0[5];
      switch(v4 >> 62)
      {
        case 1uLL:
          if ((int)v3 != v3 >> 32) {
            goto LABEL_11;
          }
          goto LABEL_12;
        case 2uLL:
          if (*(void *)(v3 + 16) != *(void *)(v3 + 24)) {
            goto LABEL_11;
          }
          goto LABEL_12;
        case 3uLL:
          goto LABEL_12;
        default:
          if ((v4 & 0xFF000000000000) == 0) {
            goto LABEL_12;
          }
LABEL_11:
          uint64_t result = sub_24A2A7090();
          if (!v1)
          {
LABEL_12:
            type metadata accessor for ATLogProofRequest(0);
            uint64_t result = sub_24A2A6DF0();
          }
          break;
      }
    }
  }
  return result;
}

uint64_t sub_24A1A29DC@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 1;
  *(_OWORD *)(a1 + 32) = xmmword_24A2A8A80;
  return sub_24A2A6E00();
}

unint64_t sub_24A1A2A1C()
{
  return 0xD000000000000011;
}

uint64_t (*sub_24A1A2A40())()
{
  return nullsub_1;
}

uint64_t sub_24A1A2A64()
{
  return sub_24A1A2740();
}

uint64_t sub_24A1A2A7C()
{
  return sub_24A1A2854();
}

uint64_t sub_24A1A2A94(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A1AE124(&qword_269778780, (void (*)(uint64_t))type metadata accessor for ATLogProofRequest);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t sub_24A1A2B10@<X0>(uint64_t a1@<X8>)
{
  return sub_24A1ADE40(&qword_2697783B0, (uint64_t)qword_26977A378, a1);
}

uint64_t sub_24A1A2B34(uint64_t a1)
{
  uint64_t v2 = sub_24A1AE124(&qword_269778718, (void (*)(uint64_t))type metadata accessor for ATLogProofRequest);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t sub_24A1A2BA0()
{
  sub_24A1AE124(&qword_269778718, (void (*)(uint64_t))type metadata accessor for ATLogProofRequest);

  return sub_24A2A7010();
}

uint64_t sub_24A1A2C20()
{
  uint64_t v0 = sub_24A2A7130();
  __swift_allocate_value_buffer(v0, qword_26977A390);
  __swift_project_value_buffer(v0, (uint64_t)qword_26977A390);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697787B0);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2697787B8) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_24A2A8A90;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "status";
  *(void *)(v6 + 8) = 6;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = sub_24A2A7100();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "serverEventInfo";
  *(void *)(v10 + 8) = 15;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  v12 = (char *)v11 + v1[14];
  void *v11 = 3;
  *(void *)v12 = "proofs";
  *((void *)v12 + 1) = 6;
  v12[16] = 2;
  v9();
  v13 = (void *)(v5 + 3 * v2);
  v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)v14 = "expiryMs";
  *((void *)v14 + 1) = 8;
  v14[16] = 2;
  v9();
  return sub_24A2A7110();
}

uint64_t sub_24A1A2E58()
{
  uint64_t result = sub_24A2A6ED0();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          sub_24A1AE9DC();
          uint64_t v4 = v3;
          sub_24A2A6F10();
          goto LABEL_5;
        case 2:
          uint64_t v4 = v3;
          sub_24A2A6F70();
          goto LABEL_5;
        case 3:
          uint64_t v4 = v3;
          sub_24A1A2F94();
          goto LABEL_5;
        case 4:
          uint64_t v4 = v3;
          sub_24A2A6F80();
LABEL_5:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = sub_24A2A6ED0();
    }
  }
  return result;
}

uint64_t sub_24A1A2F94()
{
  return sub_24A2A6FA0();
}

uint64_t sub_24A1A3044(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = v3;
  if (!*v5 || (sub_24A1AE9DC(), uint64_t result = sub_24A2A7070(), !v4))
  {
    unint64_t v10 = v5[3];
    uint64_t v11 = HIBYTE(v10) & 0xF;
    if ((v10 & 0x2000000000000000) == 0) {
      uint64_t v11 = v5[2] & 0xFFFFFFFFFFFFLL;
    }
    if (!v11 || (uint64_t result = sub_24A2A70C0(), !v4))
    {
      uint64_t result = sub_24A1A3178((uint64_t)v5, a1, a2, a3);
      if (!v4)
      {
        if (v5[4]) {
          sub_24A2A70D0();
        }
        type metadata accessor for ATLogProofResponse(0);
        return sub_24A2A6DF0();
      }
    }
  }
  return result;
}

uint64_t sub_24A1A3178(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v13[1] = a4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B1742D8);
  MEMORY[0x270FA5388]();
  unint64_t v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for ATLogProofs(0);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388]();
  unint64_t v10 = (char *)v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for ATLogProofResponse(0);
  sub_24A1B2CAC(a1 + *(int *)(v11 + 32), (uint64_t)v6, &qword_26B1742D8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1) {
    return sub_24A1B2D10((uint64_t)v6, &qword_26B1742D8);
  }
  sub_24A1AEA30((uint64_t)v6, (uint64_t)v10, type metadata accessor for ATLogProofs);
  sub_24A1AE124((unint64_t *)&qword_26B1742B8, (void (*)(uint64_t))type metadata accessor for ATLogProofs);
  sub_24A2A70F0();
  return sub_24A1A7950((uint64_t)v10, type metadata accessor for ATLogProofs);
}

uint64_t sub_24A1A337C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 8) = 1;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0xE000000000000000;
  *(void *)(a2 + 32) = 0;
  sub_24A2A6E00();
  uint64_t v4 = a2 + *(int *)(a1 + 32);
  uint64_t v5 = type metadata accessor for ATLogProofs(0);
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);

  return v6(v4, 1, 1, v5);
}

unint64_t sub_24A1A3418()
{
  return 0xD000000000000012;
}

uint64_t sub_24A1A3434@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 28);
  uint64_t v5 = sub_24A2A6E10();
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t sub_24A1A34A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 28);
  uint64_t v5 = sub_24A2A6E10();
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);

  return v6(v4, a1, v5);
}

uint64_t sub_24A1A3514()
{
  return sub_24A1A2E58();
}

uint64_t sub_24A1A352C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24A1A3044(a1, a2, a3);
}

uint64_t sub_24A1A3544(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A1AE124(&qword_269778798, (void (*)(uint64_t))type metadata accessor for ATLogProofResponse);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t sub_24A1A35C0@<X0>(uint64_t a1@<X8>)
{
  return sub_24A1ADE40(&qword_2697783B8, (uint64_t)qword_26977A390, a1);
}

uint64_t sub_24A1A35E4(uint64_t a1)
{
  uint64_t v2 = sub_24A1AE124(&qword_269778700, (void (*)(uint64_t))type metadata accessor for ATLogProofResponse);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t sub_24A1A3650()
{
  sub_24A1AE124(&qword_269778700, (void (*)(uint64_t))type metadata accessor for ATLogProofResponse);

  return sub_24A2A7010();
}

uint64_t sub_24A1A36D0()
{
  uint64_t v0 = sub_24A2A7130();
  __swift_allocate_value_buffer(v0, qword_26977A3A8);
  __swift_project_value_buffer(v0, (uint64_t)qword_26977A3A8);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697787B0);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2697787B8) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_24A2A8AA0;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *uint64_t v5 = 1;
  *(void *)unint64_t v6 = "inclusionProof";
  *(void *)(v6 + 8) = 14;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = sub_24A2A7100();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "milestoneConsistency";
  *((void *)v10 + 1) = 20;
  v10[16] = 2;
  v9();
  return sub_24A2A7110();
}

uint64_t sub_24A1A3888()
{
  while (1)
  {
    uint64_t result = sub_24A2A6ED0();
    if (v0 || (v2 & 1) != 0) {
      break;
    }
    if (result == 2)
    {
      sub_24A1A39CC();
    }
    else if (result == 1)
    {
      sub_24A1A391C();
    }
  }
  return result;
}

uint64_t sub_24A1A391C()
{
  return sub_24A2A6FA0();
}

uint64_t sub_24A1A39CC()
{
  return sub_24A2A6FA0();
}

uint64_t sub_24A1A3A7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_24A1A3AEC(v3, a1, a2, a3);
  if (!v4)
  {
    sub_24A1A3CF0(v3, a1, a2, a3);
    return sub_24A2A6DF0();
  }
  return result;
}

uint64_t sub_24A1A3AEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v13[1] = a4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B174940);
  MEMORY[0x270FA5388]();
  unint64_t v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for LogEntry(0);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388]();
  unint64_t v10 = (char *)v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for ATLogProofs(0);
  sub_24A1B2CAC(a1 + *(int *)(v11 + 20), (uint64_t)v6, &qword_26B174940);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1) {
    return sub_24A1B2D10((uint64_t)v6, &qword_26B174940);
  }
  sub_24A1AEA30((uint64_t)v6, (uint64_t)v10, type metadata accessor for LogEntry);
  sub_24A1AE124(&qword_26B174920, (void (*)(uint64_t))type metadata accessor for LogEntry);
  sub_24A2A70F0();
  return sub_24A1A7950((uint64_t)v10, type metadata accessor for LogEntry);
}

uint64_t sub_24A1A3CF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v13[1] = a4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B1745E0);
  MEMORY[0x270FA5388]();
  unint64_t v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for LogConsistency(0);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388]();
  unint64_t v10 = (char *)v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for ATLogProofs(0);
  sub_24A1B2CAC(a1 + *(int *)(v11 + 24), (uint64_t)v6, &qword_26B1745E0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1) {
    return sub_24A1B2D10((uint64_t)v6, &qword_26B1745E0);
  }
  sub_24A1AEA30((uint64_t)v6, (uint64_t)v10, type metadata accessor for LogConsistency);
  sub_24A1AE124(&qword_26B1745C0, (void (*)(uint64_t))type metadata accessor for LogConsistency);
  sub_24A2A70F0();
  return sub_24A1A7950((uint64_t)v10, type metadata accessor for LogConsistency);
}

uint64_t sub_24A1A3EF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_24A2A6E00();
  uint64_t v4 = a2 + *(int *)(a1 + 20);
  uint64_t v5 = type metadata accessor for LogEntry(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v6 = a2 + *(int *)(a1 + 24);
  uint64_t v7 = type metadata accessor for LogConsistency(0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);

  return v8(v6, 1, 1, v7);
}

uint64_t sub_24A1A3FC4()
{
  return 0x6F7250676F4C5441;
}

uint64_t (*sub_24A1A3FEC())()
{
  return nullsub_1;
}

uint64_t sub_24A1A400C()
{
  return sub_24A1A3888();
}

uint64_t sub_24A1A4024(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24A1A3A7C(a1, a2, a3);
}

uint64_t sub_24A1A403C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A1AE124(&qword_2697787A8, (void (*)(uint64_t))type metadata accessor for ATLogProofs);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t sub_24A1A40B8@<X0>(uint64_t a1@<X8>)
{
  return sub_24A1ADE40(&qword_2697783C0, (uint64_t)qword_26977A3A8, a1);
}

uint64_t sub_24A1A40DC(uint64_t a1)
{
  uint64_t v2 = sub_24A1AE124((unint64_t *)&qword_26B1742B8, (void (*)(uint64_t))type metadata accessor for ATLogProofs);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t sub_24A1A4148()
{
  sub_24A1AE124((unint64_t *)&qword_26B1742B8, (void (*)(uint64_t))type metadata accessor for ATLogProofs);

  return sub_24A2A7010();
}

uint64_t sub_24A1A41C4()
{
  uint64_t v0 = sub_24A2A7130();
  __swift_allocate_value_buffer(v0, qword_26977A3C0);
  __swift_project_value_buffer(v0, (uint64_t)qword_26977A3C0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697787B0);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2697787B8) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_24A2A8AB0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 3;
  *(void *)unint64_t v6 = "startSLH";
  *(void *)(v6 + 8) = 8;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = sub_24A2A7100();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 4;
  *(void *)unint64_t v10 = "endSLH";
  *(void *)(v10 + 8) = 6;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  v12 = (char *)v11 + v1[14];
  void *v11 = 5;
  *(void *)v12 = "proofHashes";
  *((void *)v12 + 1) = 11;
  v12[16] = 2;
  v9();
  v13 = (void *)(v5 + 3 * v2);
  v14 = (char *)v13 + v1[14];
  void *v13 = 8;
  *(void *)v14 = "patInclusionProof";
  *((void *)v14 + 1) = 17;
  v14[16] = 2;
  v9();
  uint64_t v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 9;
  *(void *)uint64_t v15 = "tltInclusionProof";
  *(void *)(v15 + 8) = 17;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return sub_24A2A7110();
}

uint64_t sub_24A1A4448()
{
  type metadata accessor for LogConsistency._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV16CloudAttestation14LogConsistencyP33_41967CC35744CDFB8E92E7B80EC2B17A13_StorageClass__startSlh;
  uint64_t v2 = type metadata accessor for SignedObject(0);
  unint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);
  v3(v1, 1, 1, v2);
  v3(v0 + OBJC_IVAR____TtCV16CloudAttestation14LogConsistencyP33_41967CC35744CDFB8E92E7B80EC2B17A13_StorageClass__endSlh, 1, 1, v2);
  *(void *)(v0
            + OBJC_IVAR____TtCV16CloudAttestation14LogConsistencyP33_41967CC35744CDFB8E92E7B80EC2B17A13_StorageClass__proofHashes) = MEMORY[0x263F8EE78];
  uint64_t v4 = v0
     + OBJC_IVAR____TtCV16CloudAttestation14LogConsistencyP33_41967CC35744CDFB8E92E7B80EC2B17A13_StorageClass__patInclusionProof;
  uint64_t v5 = type metadata accessor for LogEntry(0);
  unint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
  v6(v4, 1, 1, v5);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v6)(v0+ OBJC_IVAR____TtCV16CloudAttestation14LogConsistencyP33_41967CC35744CDFB8E92E7B80EC2B17A13_StorageClass__tltInclusionProof, 1, 1, v5);
  qword_26B174580 = v0;
  return result;
}

uint64_t sub_24A1A4590(uint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B174940);
  MEMORY[0x270FA5388]();
  uint64_t v24 = (uint64_t)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B174320);
  MEMORY[0x270FA5388]();
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = v1
     + OBJC_IVAR____TtCV16CloudAttestation14LogConsistencyP33_41967CC35744CDFB8E92E7B80EC2B17A13_StorageClass__startSlh;
  uint64_t v7 = type metadata accessor for SignedObject(0);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
  v8(v6, 1, 1, v7);
  uint64_t v9 = v1
     + OBJC_IVAR____TtCV16CloudAttestation14LogConsistencyP33_41967CC35744CDFB8E92E7B80EC2B17A13_StorageClass__endSlh;
  v8(v1 + OBJC_IVAR____TtCV16CloudAttestation14LogConsistencyP33_41967CC35744CDFB8E92E7B80EC2B17A13_StorageClass__endSlh, 1, 1, v7);
  unint64_t v10 = (void *)(v1
                 + OBJC_IVAR____TtCV16CloudAttestation14LogConsistencyP33_41967CC35744CDFB8E92E7B80EC2B17A13_StorageClass__proofHashes);
  *(void *)(v1
            + OBJC_IVAR____TtCV16CloudAttestation14LogConsistencyP33_41967CC35744CDFB8E92E7B80EC2B17A13_StorageClass__proofHashes) = MEMORY[0x263F8EE78];
  uint64_t v11 = v1
      + OBJC_IVAR____TtCV16CloudAttestation14LogConsistencyP33_41967CC35744CDFB8E92E7B80EC2B17A13_StorageClass__patInclusionProof;
  uint64_t v12 = type metadata accessor for LogEntry(0);
  v13 = *(void (**)(void))(*(void *)(v12 - 8) + 56);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v13)(v11, 1, 1, v12);
  uint64_t v23 = v1
      + OBJC_IVAR____TtCV16CloudAttestation14LogConsistencyP33_41967CC35744CDFB8E92E7B80EC2B17A13_StorageClass__tltInclusionProof;
  v13();
  uint64_t v14 = a1
      + OBJC_IVAR____TtCV16CloudAttestation14LogConsistencyP33_41967CC35744CDFB8E92E7B80EC2B17A13_StorageClass__startSlh;
  swift_beginAccess();
  sub_24A1B2CAC(v14, (uint64_t)v5, &qword_26B174320);
  swift_beginAccess();
  sub_24A1B2B8C((uint64_t)v5, v6, &qword_26B174320);
  swift_endAccess();
  uint64_t v15 = a1
      + OBJC_IVAR____TtCV16CloudAttestation14LogConsistencyP33_41967CC35744CDFB8E92E7B80EC2B17A13_StorageClass__endSlh;
  swift_beginAccess();
  sub_24A1B2CAC(v15, (uint64_t)v5, &qword_26B174320);
  swift_beginAccess();
  sub_24A1B2B8C((uint64_t)v5, v9, &qword_26B174320);
  swift_endAccess();
  v16 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV16CloudAttestation14LogConsistencyP33_41967CC35744CDFB8E92E7B80EC2B17A13_StorageClass__proofHashes);
  swift_beginAccess();
  uint64_t v17 = *v16;
  swift_beginAccess();
  void *v10 = v17;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v18 = a1
      + OBJC_IVAR____TtCV16CloudAttestation14LogConsistencyP33_41967CC35744CDFB8E92E7B80EC2B17A13_StorageClass__patInclusionProof;
  swift_beginAccess();
  uint64_t v19 = v24;
  sub_24A1B2CAC(v18, v24, &qword_26B174940);
  swift_beginAccess();
  sub_24A1B2B8C(v19, v11, &qword_26B174940);
  swift_endAccess();
  uint64_t v20 = a1
      + OBJC_IVAR____TtCV16CloudAttestation14LogConsistencyP33_41967CC35744CDFB8E92E7B80EC2B17A13_StorageClass__tltInclusionProof;
  swift_beginAccess();
  sub_24A1B2CAC(v20, v19, &qword_26B174940);
  swift_release();
  uint64_t v21 = v23;
  swift_beginAccess();
  sub_24A1B2B8C(v19, v21, &qword_26B174940);
  swift_endAccess();
  return v1;
}

uint64_t sub_24A1A496C()
{
  sub_24A1B2D10(v0+ OBJC_IVAR____TtCV16CloudAttestation14LogConsistencyP33_41967CC35744CDFB8E92E7B80EC2B17A13_StorageClass__startSlh, &qword_26B174320);
  sub_24A1B2D10(v0 + OBJC_IVAR____TtCV16CloudAttestation14LogConsistencyP33_41967CC35744CDFB8E92E7B80EC2B17A13_StorageClass__endSlh, &qword_26B174320);
  swift_bridgeObjectRelease();
  sub_24A1B2D10(v0+ OBJC_IVAR____TtCV16CloudAttestation14LogConsistencyP33_41967CC35744CDFB8E92E7B80EC2B17A13_StorageClass__patInclusionProof, &qword_26B174940);
  sub_24A1B2D10(v0+ OBJC_IVAR____TtCV16CloudAttestation14LogConsistencyP33_41967CC35744CDFB8E92E7B80EC2B17A13_StorageClass__tltInclusionProof, &qword_26B174940);
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x270FA0228](v0, v1, v2);
}

uint64_t sub_24A1A4A38()
{
  return type metadata accessor for LogConsistency._StorageClass(0);
}

uint64_t type metadata accessor for LogConsistency._StorageClass(uint64_t a1)
{
  return sub_24A1AE704(a1, (uint64_t *)&unk_26B1745B0);
}

void sub_24A1A4A60()
{
  sub_24A1A4B70(319, &qword_26B174328, (void (*)(uint64_t))type metadata accessor for SignedObject);
  if (v0 <= 0x3F)
  {
    sub_24A1A4B70(319, &qword_26B174948, (void (*)(uint64_t))type metadata accessor for LogEntry);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

void sub_24A1A4B70(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_24A2A7B50();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void type metadata accessor for SecKey(uint64_t a1)
{
}

void type metadata accessor for SecCertificate(uint64_t a1)
{
}

void type metadata accessor for CFError(uint64_t a1)
{
}

uint64_t *sub_24A1A4C00(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = sub_24A2A6E10();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
  }
  swift_retain();
  return a1;
}

uint64_t sub_24A1A4CCC(uint64_t a1)
{
  uint64_t v2 = sub_24A2A6E10();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);

  return swift_release();
}

uint64_t sub_24A1A4D40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_24A2A6E10();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_retain();
  return a1;
}

uint64_t sub_24A1A4DC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_24A2A6E10();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_24A1A4E4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_24A2A6E10();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_24A1A4EC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_24A2A6E10();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_release();
  return a1;
}

uint64_t sub_24A1A4F4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24A1A4F60);
}

uint64_t sub_24A1A4F60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_24A2A6E10();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_24A1A5020(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24A1A5034);
}

uint64_t sub_24A1A5034(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_24A2A6E10();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata accessor for LogConsistency(uint64_t a1)
{
  return sub_24A1AE704(a1, (uint64_t *)&unk_26B1745D0);
}

uint64_t sub_24A1A5110()
{
  uint64_t result = sub_24A2A6E10();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *sub_24A1A51A8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *unint64_t v4 = *a2;
    unint64_t v4 = (void *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(void *)a1 = *a2;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    *(void *)(a1 + 16) = a2[2];
    *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
    uint64_t v7 = a2[4];
    unint64_t v8 = a2[5];
    sub_24A1A52B0(v7, v8);
    v4[4] = v7;
    v4[5] = v8;
    uint64_t v9 = *(int *)(a3 + 28);
    unint64_t v10 = (char *)v4 + v9;
    uint64_t v11 = (uint64_t)a2 + v9;
    uint64_t v12 = sub_24A2A6E10();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
  }
  return v4;
}

uint64_t sub_24A1A52B0(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

uint64_t sub_24A1A5308(uint64_t a1, uint64_t a2)
{
  sub_24A1A5384(*(void *)(a1 + 32), *(void *)(a1 + 40));
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = sub_24A2A6E10();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t sub_24A1A5384(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

uint64_t sub_24A1A53DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 32);
  unint64_t v7 = *(void *)(a2 + 40);
  sub_24A1A52B0(v6, v7);
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v7;
  uint64_t v8 = *(int *)(a3 + 28);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = sub_24A2A6E10();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  return a1;
}

uint64_t sub_24A1A5494(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v6;
  uint64_t v7 = a2[2];
  *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
  *(void *)(a1 + 16) = v7;
  uint64_t v8 = a2[4];
  unint64_t v9 = a2[5];
  sub_24A1A52B0(v8, v9);
  uint64_t v10 = *(void *)(a1 + 32);
  unint64_t v11 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v9;
  sub_24A1A5384(v10, v11);
  uint64_t v12 = *(int *)(a3 + 28);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = (uint64_t)a2 + v12;
  uint64_t v15 = sub_24A2A6E10();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 24))(v13, v14, v15);
  return a1;
}

uint64_t sub_24A1A5554(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = sub_24A2A6E10();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t sub_24A1A55F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v6 = *(void *)(a1 + 32);
  unint64_t v7 = *(void *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  sub_24A1A5384(v6, v7);
  uint64_t v8 = *(int *)(a3 + 28);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = sub_24A2A6E10();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t sub_24A1A56A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24A1A56B4);
}

uint64_t sub_24A1A56B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 12)
  {
    uint64_t v4 = *(void *)(a1 + 40) >> 60;
    if (((4 * v4) & 0xC) != 0) {
      return 16 - ((4 * v4) & 0xC | (v4 >> 2));
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = sub_24A2A6E10();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 28);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_24A1A5770(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24A1A5784);
}

uint64_t sub_24A1A5784(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 12)
  {
    *(void *)(result + 32) = 0;
    *(void *)(result + 40) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
  }
  else
  {
    uint64_t v7 = sub_24A2A6E10();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 28);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for ATLogProofRequest(uint64_t a1)
{
  return sub_24A1AE704(a1, (uint64_t *)&unk_2697786A0);
}

uint64_t sub_24A1A5854()
{
  uint64_t result = sub_24A2A6E10();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *sub_24A1A58F8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(void *)a1 = *a2;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    uint64_t v7 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v7;
    uint64_t v8 = *(int *)(a3 + 28);
    uint64_t v9 = a1 + v8;
    uint64_t v10 = (uint64_t)a2 + v8;
    *(void *)(a1 + 32) = a2[4];
    uint64_t v11 = sub_24A2A6E10();
    uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = *(int *)(a3 + 32);
    uint64_t v14 = (char *)v4 + v13;
    uint64_t v15 = (char *)a2 + v13;
    uint64_t v16 = type metadata accessor for ATLogProofs(0);
    uint64_t v17 = *(void *)(v16 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1742D8);
      memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      uint64_t v67 = v17;
      v12((uint64_t)v14, (uint64_t)v15, v11);
      uint64_t v20 = *(int *)(v16 + 20);
      uint64_t v21 = &v14[v20];
      v22 = &v15[v20];
      uint64_t v23 = type metadata accessor for LogEntry(0);
      uint64_t v24 = *(void *)(v23 - 8);
      v66 = (void (*)(char *, char *, uint64_t))v12;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
      {
        uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174940);
        memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
      }
      else
      {
        uint64_t v64 = v24;
        v65 = v14;
        *(void *)uint64_t v21 = *(void *)v22;
        v21[8] = v22[8];
        v26 = (void (*)(char *, char *, uint64_t))v12;
        uint64_t v27 = *((void *)v22 + 3);
        *((void *)v21 + 2) = *((void *)v22 + 2);
        unint64_t v28 = *((void *)v22 + 4);
        swift_bridgeObjectRetain();
        sub_24A1A52B0(v27, v28);
        *((void *)v21 + 3) = v27;
        *((void *)v21 + 4) = v28;
        uint64_t v29 = *((void *)v22 + 6);
        *((void *)v21 + 5) = *((void *)v22 + 5);
        *((void *)v21 + 6) = v29;
        v21[56] = v22[56];
        v26(&v21[*(int *)(v23 + 36)], &v22[*(int *)(v23 + 36)], v11);
        uint64_t v30 = *(int *)(v23 + 40);
        v31 = &v21[v30];
        v32 = &v22[v30];
        uint64_t v33 = type metadata accessor for SignedObject(0);
        uint64_t v34 = *(void *)(v33 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
        {
          uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174320);
          memcpy(v31, v32, *(void *)(*(void *)(v35 - 8) + 64));
          uint64_t v36 = v64;
          uint64_t v14 = v65;
        }
        else
        {
          uint64_t v60 = v34;
          uint64_t v62 = v23;
          v63 = v21;
          uint64_t v37 = v33;
          uint64_t v38 = *(void *)v32;
          unint64_t v39 = *((void *)v32 + 1);
          sub_24A1A52B0(*(void *)v32, v39);
          *(void *)v31 = v38;
          *((void *)v31 + 1) = v39;
          v66(&v31[*(int *)(v37 + 20)], &v32[*(int *)(v37 + 20)], v11);
          uint64_t v61 = v37;
          uint64_t v40 = *(int *)(v37 + 24);
          v59 = v31;
          v41 = &v31[v40];
          v42 = (uint64_t *)&v32[v40];
          uint64_t v43 = type metadata accessor for Signature(0);
          uint64_t v44 = *(void *)(v43 - 8);
          uint64_t v45 = v43;
          if ((*(unsigned int (**)(uint64_t *, uint64_t))(v44 + 48))(v42, 1))
          {
            uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
            memcpy(v41, v42, *(void *)(*(void *)(v46 - 8) + 64));
          }
          else
          {
            uint64_t v47 = *v42;
            unint64_t v48 = v42[1];
            sub_24A1A52B0(*v42, v48);
            *(void *)v41 = v47;
            *((void *)v41 + 1) = v48;
            uint64_t v49 = v42[2];
            unint64_t v50 = v42[3];
            sub_24A1A52B0(v49, v50);
            *((void *)v41 + 2) = v49;
            *((void *)v41 + 3) = v50;
            *((void *)v41 + 4) = v42[4];
            v41[40] = *((unsigned char *)v42 + 40);
            v66(&v41[*(int *)(v45 + 28)], (char *)v42 + *(int *)(v45 + 28), v11);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v44 + 56))(v41, 0, 1, v45);
          }
          uint64_t v36 = v64;
          (*(void (**)(char *, void, uint64_t, uint64_t))(v60 + 56))(v59, 0, 1, v61);
          uint64_t v14 = v65;
          uint64_t v23 = v62;
          uint64_t v21 = v63;
        }
        (*(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56))(v21, 0, 1, v23);
      }
      uint64_t v51 = *(int *)(v16 + 24);
      v52 = &v14[v51];
      v53 = &v15[v51];
      uint64_t v54 = type metadata accessor for LogConsistency(0);
      uint64_t v55 = *(void *)(v54 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v53, 1, v54))
      {
        uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1745E0);
        memcpy(v52, v53, *(void *)(*(void *)(v56 - 8) + 64));
      }
      else
      {
        v66(v52, v53, v11);
        *(void *)&v52[*(int *)(v54 + 20)] = *(void *)&v53[*(int *)(v54 + 20)];
        v57 = *(void (**)(char *, void, uint64_t, uint64_t))(v55 + 56);
        swift_retain();
        v57(v52, 0, 1, v54);
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v67 + 56))(v14, 0, 1, v16);
    }
  }
  return v4;
}

uint64_t type metadata accessor for ATLogProofs(uint64_t a1)
{
  return sub_24A1AE704(a1, (uint64_t *)&unk_26B1742C8);
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_24A1A5FA0(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = sub_24A2A6E10();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v6(v4, v5);
  uint64_t v7 = a1 + *(int *)(a2 + 32);
  uint64_t v8 = type metadata accessor for ATLogProofs(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v7, 1, v8);
  if (!result)
  {
    v6(v7, v5);
    uint64_t v10 = v7 + *(int *)(v8 + 20);
    uint64_t v11 = type metadata accessor for LogEntry(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v10, 1, v11))
    {
      swift_bridgeObjectRelease();
      sub_24A1A5384(*(void *)(v10 + 24), *(void *)(v10 + 32));
      v6(v10 + *(int *)(v11 + 36), v5);
      uint64_t v12 = v10 + *(int *)(v11 + 40);
      uint64_t v13 = type metadata accessor for SignedObject(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(v12, 1, v13))
      {
        sub_24A1A5384(*(void *)v12, *(void *)(v12 + 8));
        v6(v12 + *(int *)(v13 + 20), v5);
        uint64_t v14 = v12 + *(int *)(v13 + 24);
        uint64_t v15 = type metadata accessor for Signature(0);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48))(v14, 1, v15))
        {
          sub_24A1A5384(*(void *)v14, *(void *)(v14 + 8));
          sub_24A1A5384(*(void *)(v14 + 16), *(void *)(v14 + 24));
          v6(v14 + *(int *)(v15 + 28), v5);
        }
      }
    }
    uint64_t v16 = v7 + *(int *)(v8 + 24);
    uint64_t v17 = type metadata accessor for LogConsistency(0);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 48))(v16, 1, v17);
    if (!result)
    {
      v6(v16, v5);
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_24A1A626C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v7 = *(int *)(a3 + 28);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_24A2A6E10();
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  uint64_t v12 = *(int *)(a3 + 32);
  uint64_t v13 = (char *)(a1 + v12);
  uint64_t v14 = (char *)(a2 + v12);
  uint64_t v15 = type metadata accessor for ATLogProofs(0);
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1742D8);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    uint64_t v65 = v16;
    v11((uint64_t)v13, (uint64_t)v14, v10);
    uint64_t v18 = *(int *)(v15 + 20);
    uint64_t v19 = &v13[v18];
    uint64_t v20 = &v14[v18];
    uint64_t v21 = type metadata accessor for LogEntry(0);
    uint64_t v22 = *(void *)(v21 - 8);
    uint64_t v64 = (void (*)(char *, char *, uint64_t))v11;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
    {
      uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174940);
      memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
    }
    else
    {
      uint64_t v62 = v22;
      v63 = v13;
      *(void *)uint64_t v19 = *(void *)v20;
      v19[8] = v20[8];
      uint64_t v24 = (void (*)(char *, char *, uint64_t))v11;
      uint64_t v25 = *((void *)v20 + 3);
      *((void *)v19 + 2) = *((void *)v20 + 2);
      unint64_t v26 = *((void *)v20 + 4);
      swift_bridgeObjectRetain();
      sub_24A1A52B0(v25, v26);
      *((void *)v19 + 3) = v25;
      *((void *)v19 + 4) = v26;
      uint64_t v27 = *((void *)v20 + 6);
      *((void *)v19 + 5) = *((void *)v20 + 5);
      *((void *)v19 + 6) = v27;
      v19[56] = v20[56];
      v24(&v19[*(int *)(v21 + 36)], &v20[*(int *)(v21 + 36)], v10);
      uint64_t v28 = *(int *)(v21 + 40);
      uint64_t v29 = &v19[v28];
      uint64_t v30 = &v20[v28];
      uint64_t v31 = type metadata accessor for SignedObject(0);
      uint64_t v32 = *(void *)(v31 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
      {
        uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174320);
        memcpy(v29, v30, *(void *)(*(void *)(v33 - 8) + 64));
        uint64_t v34 = v62;
        uint64_t v13 = v63;
      }
      else
      {
        uint64_t v58 = v32;
        uint64_t v60 = v21;
        uint64_t v61 = v19;
        uint64_t v35 = v31;
        uint64_t v36 = *(void *)v30;
        unint64_t v37 = *((void *)v30 + 1);
        sub_24A1A52B0(*(void *)v30, v37);
        *(void *)uint64_t v29 = v36;
        *((void *)v29 + 1) = v37;
        v64(&v29[*(int *)(v35 + 20)], &v30[*(int *)(v35 + 20)], v10);
        uint64_t v59 = v35;
        uint64_t v38 = *(int *)(v35 + 24);
        v57 = v29;
        unint64_t v39 = &v29[v38];
        uint64_t v40 = (uint64_t *)&v30[v38];
        uint64_t v41 = type metadata accessor for Signature(0);
        uint64_t v42 = *(void *)(v41 - 8);
        uint64_t v43 = v41;
        if ((*(unsigned int (**)(uint64_t *, uint64_t))(v42 + 48))(v40, 1))
        {
          uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
          memcpy(v39, v40, *(void *)(*(void *)(v44 - 8) + 64));
        }
        else
        {
          uint64_t v45 = *v40;
          unint64_t v46 = v40[1];
          sub_24A1A52B0(*v40, v46);
          *(void *)unint64_t v39 = v45;
          *((void *)v39 + 1) = v46;
          uint64_t v47 = v40[2];
          unint64_t v48 = v40[3];
          sub_24A1A52B0(v47, v48);
          *((void *)v39 + 2) = v47;
          *((void *)v39 + 3) = v48;
          *((void *)v39 + 4) = v40[4];
          v39[40] = *((unsigned char *)v40 + 40);
          v64(&v39[*(int *)(v43 + 28)], (char *)v40 + *(int *)(v43 + 28), v10);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v43);
        }
        uint64_t v34 = v62;
        (*(void (**)(char *, void, uint64_t, uint64_t))(v58 + 56))(v57, 0, 1, v59);
        uint64_t v13 = v63;
        uint64_t v21 = v60;
        uint64_t v19 = v61;
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56))(v19, 0, 1, v21);
    }
    uint64_t v49 = *(int *)(v15 + 24);
    unint64_t v50 = &v13[v49];
    uint64_t v51 = &v14[v49];
    uint64_t v52 = type metadata accessor for LogConsistency(0);
    uint64_t v53 = *(void *)(v52 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48))(v51, 1, v52))
    {
      uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1745E0);
      memcpy(v50, v51, *(void *)(*(void *)(v54 - 8) + 64));
    }
    else
    {
      v64(v50, v51, v10);
      *(void *)&v50[*(int *)(v52 + 20)] = *(void *)&v51[*(int *)(v52 + 20)];
      uint64_t v55 = *(void (**)(char *, void, uint64_t, uint64_t))(v53 + 56);
      swift_retain();
      v55(v50, 0, 1, v52);
    }
    (*(void (**)(char *, void, uint64_t, uint64_t))(v65 + 56))(v13, 0, 1, v15);
  }
  return a1;
}

uint64_t sub_24A1A6860(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v6;
  *(void *)(a1 + 16) = a2[2];
  *(void *)(a1 + 24) = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = a2[4];
  uint64_t v7 = *(int *)(a3 + 28);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (uint64_t)a2 + v7;
  uint64_t v10 = sub_24A2A6E10();
  uint64_t v179 = *(void *)(v10 - 8);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v179 + 24);
  v11(v8, v9, v10);
  uint64_t v12 = *(int *)(a3 + 32);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = type metadata accessor for ATLogProofs(0);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  uint64_t v181 = v13;
  LODWORD(v13) = v17(v13, 1, v15);
  __src = v14;
  int v18 = v17((uint64_t)v14, 1, v15);
  if (!v13)
  {
    v177 = (void (*)(uint64_t, char *, uint64_t))v11;
    if (v18)
    {
      sub_24A1A7950(v181, type metadata accessor for ATLogProofs);
      size_t v19 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26B1742D8) - 8) + 64);
      uint64_t v20 = (void *)v181;
      goto LABEL_6;
    }
    uint64_t v175 = v10;
    v11(v181, (uint64_t)v14, v10);
    uint64_t v30 = *(int *)(v15 + 20);
    uint64_t v31 = v181 + v30;
    uint64_t v32 = &v14[v30];
    uint64_t v33 = type metadata accessor for LogEntry(0);
    uint64_t v34 = *(void *)(v33 - 8);
    uint64_t v35 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v34 + 48);
    int v36 = v35(v31, 1, v33);
    int v37 = v35((uint64_t)v32, 1, v33);
    if (v36)
    {
      if (!v37)
      {
        uint64_t v38 = *(void *)v32;
        *(unsigned char *)(v31 + 8) = v32[8];
        *(void *)uint64_t v31 = v38;
        *(void *)(v31 + 16) = *((void *)v32 + 2);
        uint64_t v39 = *((void *)v32 + 3);
        unint64_t v40 = *((void *)v32 + 4);
        swift_bridgeObjectRetain();
        sub_24A1A52B0(v39, v40);
        *(void *)(v31 + 24) = v39;
        *(void *)(v31 + 32) = v40;
        *(void *)(v31 + 40) = *((void *)v32 + 5);
        uint64_t v41 = *((void *)v32 + 6);
        *(unsigned char *)(v31 + 56) = v32[56];
        *(void *)(v31 + 48) = v41;
        v168 = *(void (**)(uint64_t, char *, uint64_t))(v179 + 16);
        v168(v31 + *(int *)(v33 + 36), &v32[*(int *)(v33 + 36)], v175);
        uint64_t v42 = *(int *)(v33 + 40);
        uint64_t v43 = (void *)(v31 + v42);
        uint64_t v44 = &v32[v42];
        uint64_t v45 = type metadata accessor for SignedObject(0);
        uint64_t v46 = *(void *)(v45 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v44, 1, v45))
        {
          uint64_t v47 = v34;
          uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174320);
          memcpy(v43, v44, *(void *)(*(void *)(v48 - 8) + 64));
          uint64_t v10 = v175;
        }
        else
        {
          uint64_t v160 = v46;
          uint64_t v91 = *(void *)v44;
          unint64_t v90 = *((void *)v44 + 1);
          sub_24A1A52B0(*(void *)v44, v90);
          *uint64_t v43 = v91;
          v43[1] = v90;
          v168((uint64_t)v43 + *(int *)(v45 + 20), &v44[*(int *)(v45 + 20)], v175);
          uint64_t v161 = v45;
          v167 = v43;
          uint64_t v92 = *(int *)(v45 + 24);
          v93 = (void *)((char *)v43 + v92);
          v94 = (uint64_t *)&v44[v92];
          uint64_t v95 = type metadata accessor for Signature(0);
          uint64_t v96 = *(void *)(v95 - 8);
          if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v96 + 48))(v94, 1, v95))
          {
            uint64_t v47 = v34;
            uint64_t v97 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
            memcpy(v93, v94, *(void *)(*(void *)(v97 - 8) + 64));
          }
          else
          {
            uint64_t v159 = v95;
            uint64_t v47 = v34;
            unint64_t v116 = v94[1];
            uint64_t v157 = *v94;
            sub_24A1A52B0(*v94, v116);
            void *v93 = v157;
            v93[1] = v116;
            unint64_t v117 = v94[3];
            uint64_t v158 = v94[2];
            sub_24A1A52B0(v158, v117);
            v93[2] = v158;
            v93[3] = v117;
            uint64_t v118 = v94[4];
            *((unsigned char *)v93 + 40) = *((unsigned char *)v94 + 40);
            v93[4] = v118;
            v168((uint64_t)v93 + *(int *)(v159 + 28), (char *)v94 + *(int *)(v159 + 28), v175);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v96 + 56))(v93, 0, 1, v159);
          }
          uint64_t v10 = v175;
          (*(void (**)(void *, void, uint64_t, uint64_t))(v160 + 56))(v167, 0, 1, v161);
        }
        uint64_t v62 = v181;
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v47 + 56))(v31, 0, 1, v33);
        goto LABEL_42;
      }
      goto LABEL_18;
    }
    if (v37)
    {
      sub_24A1A7950(v31, type metadata accessor for LogEntry);
LABEL_18:
      uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174940);
      memcpy((void *)v31, v32, *(void *)(*(void *)(v61 - 8) + 64));
      uint64_t v62 = v181;
LABEL_42:
      uint64_t v119 = *(int *)(v15 + 24);
      uint64_t v120 = v62 + v119;
      v121 = &__src[v119];
      uint64_t v122 = type metadata accessor for LogConsistency(0);
      uint64_t v123 = *(void *)(v122 - 8);
      v124 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v123 + 48);
      int v125 = v124(v120, 1, v122);
      int v126 = v124((uint64_t)v121, 1, v122);
      if (v125)
      {
        if (!v126)
        {
          (*(void (**)(uint64_t, char *, uint64_t))(v179 + 16))(v120, v121, v10);
          *(void *)(v120 + *(int *)(v122 + 20)) = *(void *)&v121[*(int *)(v122 + 20)];
          v127 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v123 + 56);
          swift_retain();
          v127(v120, 0, 1, v122);
          return a1;
        }
      }
      else
      {
        if (!v126)
        {
          v177(v120, v121, v10);
          *(void *)(v120 + *(int *)(v122 + 20)) = *(void *)&v121[*(int *)(v122 + 20)];
          swift_retain();
          swift_release();
          return a1;
        }
        sub_24A1A7950(v120, type metadata accessor for LogConsistency);
      }
      size_t v19 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26B1745E0) - 8) + 64);
      uint64_t v20 = (void *)v120;
      uint64_t v21 = v121;
      goto LABEL_7;
    }
    uint64_t v71 = *(void *)v32;
    *(unsigned char *)(v31 + 8) = v32[8];
    *(void *)uint64_t v31 = v71;
    *(void *)(v31 + 16) = *((void *)v32 + 2);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v72 = *((void *)v32 + 3);
    unint64_t v73 = *((void *)v32 + 4);
    sub_24A1A52B0(v72, v73);
    uint64_t v74 = *(void *)(v31 + 24);
    unint64_t v75 = *(void *)(v31 + 32);
    *(void *)(v31 + 24) = v72;
    *(void *)(v31 + 32) = v73;
    sub_24A1A5384(v74, v75);
    *(void *)(v31 + 40) = *((void *)v32 + 5);
    uint64_t v76 = *((void *)v32 + 6);
    *(unsigned char *)(v31 + 56) = v32[56];
    *(void *)(v31 + 48) = v76;
    v177(v31 + *(int *)(v33 + 36), &v32[*(int *)(v33 + 36)], v175);
    uint64_t v77 = *(int *)(v33 + 40);
    v78 = (uint64_t *)(v31 + v77);
    v79 = (uint64_t *)&v32[v77];
    uint64_t v80 = type metadata accessor for SignedObject(0);
    v81 = *(void **)(v80 - 8);
    v82 = (uint64_t (*)(uint64_t *, uint64_t, uint64_t))v81[6];
    LODWORD(v72) = v82(v78, 1, v80);
    int v83 = v82(v79, 1, v80);
    if (v72)
    {
      __dsta = (void (**)(uint64_t *, void, uint64_t, uint64_t))v81;
      uint64_t v62 = v181;
      if (!v83)
      {
        uint64_t v84 = *v79;
        unint64_t v85 = v79[1];
        sub_24A1A52B0(*v79, v85);
        uint64_t *v78 = v84;
        v78[1] = v85;
        v172 = *(void (**)(char *, char *, uint64_t))(v179 + 16);
        v172((char *)v78 + *(int *)(v80 + 20), (char *)v79 + *(int *)(v80 + 20), v175);
        uint64_t v86 = *(int *)(v80 + 24);
        v87 = (uint64_t *)((char *)v78 + v86);
        v88 = (uint64_t *)((char *)v79 + v86);
        uint64_t v166 = type metadata accessor for Signature(0);
        uint64_t v170 = *(void *)(v166 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t))(v170 + 48))(v88, 1))
        {
          uint64_t v89 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
          memcpy(v87, v88, *(void *)(*(void *)(v89 - 8) + 64));
        }
        else
        {
          uint64_t v145 = *v88;
          unint64_t v163 = v88[1];
          sub_24A1A52B0(*v88, v163);
          void *v87 = v145;
          v87[1] = v163;
          uint64_t v146 = v88[2];
          unint64_t v164 = v88[3];
          sub_24A1A52B0(v146, v164);
          v87[2] = v146;
          v87[3] = v164;
          uint64_t v147 = v88[4];
          *((unsigned char *)v87 + 40) = *((unsigned char *)v88 + 40);
          v87[4] = v147;
          v172((char *)v87 + *(int *)(v166 + 28), (char *)v88 + *(int *)(v166 + 28), v175);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v170 + 56))(v87, 0, 1, v166);
        }
        uint64_t v62 = v181;
        __dsta[7](v78, 0, 1, v80);
        uint64_t v10 = v175;
        goto LABEL_42;
      }
    }
    else
    {
      uint64_t v62 = v181;
      if (!v83)
      {
        uint64_t v128 = *v79;
        unint64_t v129 = v79[1];
        sub_24A1A52B0(*v79, v129);
        uint64_t v130 = *v78;
        unint64_t v131 = v78[1];
        uint64_t *v78 = v128;
        v78[1] = v129;
        sub_24A1A5384(v130, v131);
        v177((uint64_t)v78 + *(int *)(v80 + 20), (char *)v79 + *(int *)(v80 + 20), v175);
        uint64_t v132 = *(int *)(v80 + 24);
        uint64_t v133 = (uint64_t)v78 + v132;
        v134 = (char *)v79 + v132;
        uint64_t v135 = type metadata accessor for Signature(0);
        uint64_t v136 = *(void *)(v135 - 8);
        v137 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v136 + 48);
        LODWORD(v128) = v137(v133, 1, v135);
        int v138 = v137((uint64_t)v134, 1, v135);
        if (v128)
        {
          uint64_t v139 = v136;
          uint64_t v62 = v181;
          if (!v138)
          {
            uint64_t v140 = *(void *)v134;
            unint64_t v141 = *((void *)v134 + 1);
            sub_24A1A52B0(*(void *)v134, v141);
            *(void *)uint64_t v133 = v140;
            *(void *)(v133 + 8) = v141;
            uint64_t v142 = *((void *)v134 + 2);
            unint64_t v143 = *((void *)v134 + 3);
            sub_24A1A52B0(v142, v143);
            *(void *)(v133 + 16) = v142;
            *(void *)(v133 + 24) = v143;
            uint64_t v144 = *((void *)v134 + 4);
            *(unsigned char *)(v133 + 40) = v134[40];
            *(void *)(v133 + 32) = v144;
            uint64_t v10 = v175;
            (*(void (**)(uint64_t, char *, uint64_t))(v179 + 16))(v133 + *(int *)(v135 + 28), &v134[*(int *)(v135 + 28)], v175);
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v139 + 56))(v133, 0, 1, v135);
            goto LABEL_42;
          }
        }
        else
        {
          uint64_t v62 = v181;
          if (!v138)
          {
            uint64_t v149 = *(void *)v134;
            unint64_t v148 = *((void *)v134 + 1);
            sub_24A1A52B0(*(void *)v134, v148);
            uint64_t v150 = *(void *)v133;
            unint64_t v151 = *(void *)(v133 + 8);
            *(void *)uint64_t v133 = v149;
            *(void *)(v133 + 8) = v148;
            sub_24A1A5384(v150, v151);
            uint64_t v153 = *((void *)v134 + 2);
            unint64_t v152 = *((void *)v134 + 3);
            sub_24A1A52B0(v153, v152);
            uint64_t v154 = *(void *)(v133 + 16);
            unint64_t v155 = *(void *)(v133 + 24);
            *(void *)(v133 + 16) = v153;
            *(void *)(v133 + 24) = v152;
            sub_24A1A5384(v154, v155);
            uint64_t v156 = *((void *)v134 + 4);
            *(unsigned char *)(v133 + 40) = v134[40];
            *(void *)(v133 + 32) = v156;
            uint64_t v10 = v175;
            v177(v133 + *(int *)(v135 + 28), &v134[*(int *)(v135 + 28)], v175);
            goto LABEL_42;
          }
          sub_24A1A7950(v133, type metadata accessor for Signature);
        }
        size_t v113 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8) - 8) + 64);
        v114 = (void *)v133;
        v115 = (uint64_t *)v134;
        goto LABEL_38;
      }
      sub_24A1A7950((uint64_t)v78, type metadata accessor for SignedObject);
    }
    size_t v113 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26B174320) - 8) + 64);
    v114 = v78;
    v115 = v79;
LABEL_38:
    memcpy(v114, v115, v113);
    uint64_t v10 = v175;
    goto LABEL_42;
  }
  if (v18)
  {
    size_t v19 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26B1742D8) - 8) + 64);
    uint64_t v20 = (void *)v181;
LABEL_6:
    uint64_t v21 = v14;
LABEL_7:
    memcpy(v20, v21, v19);
    return a1;
  }
  uint64_t v22 = *(void (**)(uint64_t, char *, uint64_t))(v179 + 16);
  v22(v181, v14, v10);
  uint64_t v23 = *(int *)(v15 + 20);
  uint64_t v24 = (void *)(v181 + v23);
  uint64_t v25 = &v14[v23];
  uint64_t v26 = type metadata accessor for LogEntry(0);
  uint64_t v27 = *(void *)(v26 - 8);
  v178 = (void (*)(char *, char *, uint64_t))v22;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
  {
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174940);
    memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
    uint64_t v29 = v181;
  }
  else
  {
    uint64_t v171 = v27;
    uint64_t v49 = *(void *)v25;
    *((unsigned char *)v24 + 8) = v25[8];
    *uint64_t v24 = v49;
    v24[2] = *((void *)v25 + 2);
    unint64_t v50 = (void (*)(char *, char *, uint64_t))v22;
    uint64_t v51 = v10;
    uint64_t v52 = *((void *)v25 + 3);
    unint64_t v53 = *((void *)v25 + 4);
    swift_bridgeObjectRetain();
    sub_24A1A52B0(v52, v53);
    v24[3] = v52;
    v24[4] = v53;
    v24[5] = *((void *)v25 + 5);
    uint64_t v54 = *((void *)v25 + 6);
    *((unsigned char *)v24 + 56) = v25[56];
    v24[6] = v54;
    uint64_t v176 = v51;
    v50((char *)v24 + *(int *)(v26 + 36), &v25[*(int *)(v26 + 36)], v51);
    uint64_t v55 = *(int *)(v26 + 40);
    __dst = (void *)((char *)v24 + v55);
    uint64_t v56 = (uint64_t *)&v25[v55];
    uint64_t v57 = type metadata accessor for SignedObject(0);
    uint64_t v58 = *(void *)(v57 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v58 + 48))(v56, 1, v57))
    {
      uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174320);
      memcpy(__dst, v56, *(void *)(*(void *)(v59 - 8) + 64));
      uint64_t v10 = v176;
      uint64_t v60 = v171;
      uint64_t v29 = v181;
    }
    else
    {
      uint64_t v165 = v58;
      uint64_t v64 = *v56;
      unint64_t v63 = v56[1];
      sub_24A1A52B0(*v56, v63);
      void *__dst = v64;
      __dst[1] = v63;
      v178((char *)__dst + *(int *)(v57 + 20), (char *)v56 + *(int *)(v57 + 20), v176);
      uint64_t v169 = v57;
      uint64_t v65 = *(int *)(v57 + 24);
      v66 = (void *)((char *)__dst + v65);
      uint64_t v67 = (uint64_t *)((char *)v56 + v65);
      uint64_t v68 = type metadata accessor for Signature(0);
      uint64_t v69 = *(void *)(v68 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v69 + 48))(v67, 1, v68))
      {
        uint64_t v70 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
        memcpy(v66, v67, *(void *)(*(void *)(v70 - 8) + 64));
        uint64_t v10 = v176;
      }
      else
      {
        uint64_t v162 = v68;
        unint64_t v98 = v67[1];
        uint64_t v99 = *v67;
        sub_24A1A52B0(*v67, v98);
        void *v66 = v99;
        v66[1] = v98;
        uint64_t v100 = v67[2];
        unint64_t v101 = v67[3];
        sub_24A1A52B0(v100, v101);
        v66[2] = v100;
        v66[3] = v101;
        uint64_t v102 = v67[4];
        *((unsigned char *)v66 + 40) = *((unsigned char *)v67 + 40);
        v66[4] = v102;
        uint64_t v103 = *(int *)(v162 + 28);
        v104 = (char *)v67 + v103;
        uint64_t v10 = v176;
        v178((char *)v66 + v103, v104, v176);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v69 + 56))(v66, 0, 1, v162);
      }
      uint64_t v60 = v171;
      uint64_t v29 = v181;
      (*(void (**)(void *, void, uint64_t, uint64_t))(v165 + 56))(__dst, 0, 1, v169);
    }
    uint64_t v14 = __src;
    (*(void (**)(void *, void, uint64_t, uint64_t))(v60 + 56))(v24, 0, 1, v26);
  }
  uint64_t v105 = *(int *)(v15 + 24);
  v106 = (char *)(v29 + v105);
  v107 = &v14[v105];
  uint64_t v108 = type metadata accessor for LogConsistency(0);
  uint64_t v109 = *(void *)(v108 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v109 + 48))(v107, 1, v108))
  {
    uint64_t v110 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1745E0);
    memcpy(v106, v107, *(void *)(*(void *)(v110 - 8) + 64));
  }
  else
  {
    v178(v106, v107, v10);
    *(void *)&v106[*(int *)(v108 + 20)] = *(void *)&v107[*(int *)(v108 + 20)];
    v111 = *(void (**)(char *, void, uint64_t, uint64_t))(v109 + 56);
    swift_retain();
    v111(v106, 0, 1, v108);
  }
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v16 + 56))(v29, 0, 1, v15);
  return a1;
}

uint64_t sub_24A1A7950(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_24A1A79B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = sub_24A2A6E10();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 32);
  uint64_t v12 = (char *)(a1 + v11);
  uint64_t v13 = (char *)(a2 + v11);
  uint64_t v14 = type metadata accessor for ATLogProofs(0);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1742D8);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    v10((uint64_t)v12, (uint64_t)v13, v9);
    uint64_t v17 = *(int *)(v14 + 20);
    int v18 = &v12[v17];
    size_t v19 = &v13[v17];
    uint64_t v48 = (void (*)(char *, char *, uint64_t))v10;
    uint64_t v20 = type metadata accessor for LogEntry(0);
    uint64_t v21 = *(void *)(v20 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
    {
      uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174940);
      memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
    }
    else
    {
      uint64_t v45 = v21;
      *(void *)int v18 = *(void *)v19;
      v18[8] = v19[8];
      *((void *)v18 + 2) = *((void *)v19 + 2);
      *(_OWORD *)(v18 + 24) = *(_OWORD *)(v19 + 24);
      uint64_t v23 = *((void *)v19 + 6);
      *((void *)v18 + 5) = *((void *)v19 + 5);
      *((void *)v18 + 6) = v23;
      v18[56] = v19[56];
      v48(&v18[*(int *)(v20 + 36)], &v19[*(int *)(v20 + 36)], v9);
      uint64_t v24 = *(int *)(v20 + 40);
      uint64_t v46 = v20;
      __dst = &v18[v24];
      uint64_t v25 = &v19[v24];
      uint64_t v26 = type metadata accessor for SignedObject(0);
      uint64_t v27 = *(void *)(v26 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
      {
        uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174320);
        memcpy(__dst, v25, *(void *)(*(void *)(v28 - 8) + 64));
      }
      else
      {
        uint64_t v43 = v27;
        *(_OWORD *)__dst = *(_OWORD *)v25;
        v48(&__dst[*(int *)(v26 + 20)], &v25[*(int *)(v26 + 20)], v9);
        uint64_t v44 = v26;
        uint64_t v29 = *(int *)(v26 + 24);
        uint64_t v30 = &__dst[v29];
        uint64_t v31 = &v25[v29];
        uint64_t v32 = type metadata accessor for Signature(0);
        uint64_t v42 = *(void *)(v32 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v31, 1, v32))
        {
          uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
          memcpy(v30, v31, *(void *)(*(void *)(v33 - 8) + 64));
        }
        else
        {
          long long v34 = *((_OWORD *)v31 + 1);
          *(_OWORD *)uint64_t v30 = *(_OWORD *)v31;
          *((_OWORD *)v30 + 1) = v34;
          *((void *)v30 + 4) = *((void *)v31 + 4);
          v30[40] = v31[40];
          v48(&v30[*(int *)(v32 + 28)], &v31[*(int *)(v32 + 28)], v9);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v42 + 56))(v30, 0, 1, v32);
        }
        (*(void (**)(char *, void, uint64_t, uint64_t))(v43 + 56))(__dst, 0, 1, v44);
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v45 + 56))(v18, 0, 1, v46);
    }
    uint64_t v35 = *(int *)(v14 + 24);
    int v36 = &v12[v35];
    int v37 = &v13[v35];
    uint64_t v38 = type metadata accessor for LogConsistency(0);
    uint64_t v39 = *(void *)(v38 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38))
    {
      uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1745E0);
      memcpy(v36, v37, *(void *)(*(void *)(v40 - 8) + 64));
    }
    else
    {
      v48(v36, v37, v9);
      *(void *)&v36[*(int *)(v38 + 20)] = *(void *)&v37[*(int *)(v38 + 20)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
    }
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

uint64_t sub_24A1A7F2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v7 = *(int *)(a3 + 28);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_24A2A6E10();
  uint64_t v131 = *(void *)(v10 - 8);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v131 + 40);
  uint64_t v12 = v8;
  uint64_t v13 = v10;
  v11(v12, v9);
  uint64_t v14 = *(int *)(a3 + 32);
  uint64_t v15 = a1 + v14;
  uint64_t v16 = (char *)(a2 + v14);
  uint64_t v17 = type metadata accessor for ATLogProofs(0);
  uint64_t v18 = *(void *)(v17 - 8);
  size_t v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48);
  uint64_t v133 = v15;
  LODWORD(v15) = v19(v15, 1, v17);
  __src = v16;
  int v20 = v19((uint64_t)v16, 1, v17);
  if (!v15)
  {
    __dst = (void (*)(uint64_t, char *, uint64_t))v11;
    if (v20)
    {
      sub_24A1A7950(v133, type metadata accessor for ATLogProofs);
      size_t v21 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26B1742D8) - 8) + 64);
      uint64_t v22 = (void *)v133;
      goto LABEL_6;
    }
    uint64_t v127 = v13;
    ((void (*)(uint64_t, char *, uint64_t))v11)(v133, v16, v13);
    uint64_t v32 = *(int *)(v17 + 20);
    uint64_t v33 = v133 + v32;
    long long v34 = &v16[v32];
    uint64_t v35 = type metadata accessor for LogEntry(0);
    uint64_t v36 = *(void *)(v35 - 8);
    int v37 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v36 + 48);
    int v38 = v37(v33, 1, v35);
    int v39 = v37((uint64_t)v34, 1, v35);
    if (v38)
    {
      if (!v39)
      {
        *(void *)uint64_t v33 = *(void *)v34;
        *(unsigned char *)(v33 + 8) = v34[8];
        *(void *)(v33 + 16) = *((void *)v34 + 2);
        *(_OWORD *)(v33 + 24) = *(_OWORD *)(v34 + 24);
        uint64_t v40 = *((void *)v34 + 6);
        *(void *)(v33 + 40) = *((void *)v34 + 5);
        *(void *)(v33 + 48) = v40;
        *(unsigned char *)(v33 + 56) = v34[56];
        uint64_t v122 = *(void (**)(uint64_t, char *, uint64_t))(v131 + 32);
        v122(v33 + *(int *)(v35 + 36), &v34[*(int *)(v35 + 36)], v127);
        uint64_t v41 = *(int *)(v35 + 40);
        uint64_t v42 = (_OWORD *)(v33 + v41);
        uint64_t v43 = &v34[v41];
        uint64_t v44 = type metadata accessor for SignedObject(0);
        uint64_t v45 = *(void *)(v44 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v43, 1, v44))
        {
          uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174320);
          memcpy(v42, v43, *(void *)(*(void *)(v46 - 8) + 64));
        }
        else
        {
          uint64_t v118 = v45;
          _OWORD *v42 = *(_OWORD *)v43;
          v122((uint64_t)v42 + *(int *)(v44 + 20), &v43[*(int *)(v44 + 20)], v127);
          uint64_t v77 = *(int *)(v44 + 24);
          v121 = v42;
          v78 = (_OWORD *)((char *)v42 + v77);
          v79 = &v43[v77];
          uint64_t v80 = type metadata accessor for Signature(0);
          uint64_t v117 = *(void *)(v80 - 8);
          uint64_t v81 = v80;
          if ((*(unsigned int (**)(char *, uint64_t))(v117 + 48))(v79, 1))
          {
            uint64_t v82 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
            memcpy(v78, v79, *(void *)(*(void *)(v82 - 8) + 64));
          }
          else
          {
            long long v91 = *((_OWORD *)v79 + 1);
            _OWORD *v78 = *(_OWORD *)v79;
            v78[1] = v91;
            *((void *)v78 + 4) = *((void *)v79 + 4);
            *((unsigned char *)v78 + 40) = v79[40];
            v122((uint64_t)v78 + *(int *)(v81 + 28), &v79[*(int *)(v81 + 28)], v127);
            (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v117 + 56))(v78, 0, 1, v81);
          }
          (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v118 + 56))(v121, 0, 1, v44);
        }
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
        goto LABEL_42;
      }
    }
    else
    {
      if (!v39)
      {
        *(void *)uint64_t v33 = *(void *)v34;
        *(unsigned char *)(v33 + 8) = v34[8];
        *(void *)(v33 + 16) = *((void *)v34 + 2);
        swift_bridgeObjectRelease();
        uint64_t v62 = *(void *)(v33 + 24);
        unint64_t v63 = *(void *)(v33 + 32);
        *(_OWORD *)(v33 + 24) = *(_OWORD *)(v34 + 24);
        sub_24A1A5384(v62, v63);
        uint64_t v64 = *((void *)v34 + 6);
        *(void *)(v33 + 40) = *((void *)v34 + 5);
        *(void *)(v33 + 48) = v64;
        *(unsigned char *)(v33 + 56) = v34[56];
        __dst(v33 + *(int *)(v35 + 36), &v34[*(int *)(v35 + 36)], v127);
        uint64_t v65 = *(int *)(v35 + 40);
        uint64_t v66 = v33 + v65;
        uint64_t v67 = &v34[v65];
        uint64_t v68 = type metadata accessor for SignedObject(0);
        uint64_t v69 = *(void *)(v68 - 8);
        uint64_t v70 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v69 + 48);
        int v71 = v70(v66, 1, v68);
        int v72 = v70((uint64_t)v67, 1, v68);
        if (v71)
        {
          if (!v72)
          {
            *(_OWORD *)uint64_t v66 = *(_OWORD *)v67;
            v124 = *(void (**)(uint64_t, char *, uint64_t))(v131 + 32);
            v124(v66 + *(int *)(v68 + 20), &v67[*(int *)(v68 + 20)], v127);
            uint64_t v73 = *(int *)(v68 + 24);
            int v126 = (_OWORD *)(v66 + v73);
            uint64_t v74 = &v67[v73];
            uint64_t v75 = type metadata accessor for Signature(0);
            uint64_t v120 = *(void *)(v75 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v120 + 48))(v74, 1, v75))
            {
              uint64_t v76 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
              memcpy(v126, v74, *(void *)(*(void *)(v76 - 8) + 64));
            }
            else
            {
              long long v112 = *((_OWORD *)v74 + 1);
              *int v126 = *(_OWORD *)v74;
              v126[1] = v112;
              *((void *)v126 + 4) = *((void *)v74 + 4);
              *((unsigned char *)v126 + 40) = v74[40];
              v124((uint64_t)v126 + *(int *)(v75 + 28), &v74[*(int *)(v75 + 28)], v127);
              (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v120 + 56))(v126, 0, 1, v75);
            }
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v69 + 56))(v66, 0, 1, v68);
            goto LABEL_42;
          }
        }
        else
        {
          if (!v72)
          {
            uint64_t v100 = *(void *)v66;
            unint64_t v101 = *(void *)(v66 + 8);
            *(_OWORD *)uint64_t v66 = *(_OWORD *)v67;
            sub_24A1A5384(v100, v101);
            __dst(v66 + *(int *)(v68 + 20), &v67[*(int *)(v68 + 20)], v127);
            uint64_t v102 = *(int *)(v68 + 24);
            uint64_t v103 = v67;
            uint64_t v104 = v66 + v102;
            uint64_t v105 = (char *)v103 + v102;
            uint64_t v106 = type metadata accessor for Signature(0);
            uint64_t v107 = *(void *)(v106 - 8);
            uint64_t v108 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v107 + 48);
            int v109 = v108(v104, 1, v106);
            int v110 = v108((uint64_t)v105, 1, v106);
            if (v109)
            {
              if (!v110)
              {
                long long v111 = *((_OWORD *)v105 + 1);
                *(_OWORD *)uint64_t v104 = *(_OWORD *)v105;
                *(_OWORD *)(v104 + 16) = v111;
                *(void *)(v104 + 32) = *((void *)v105 + 4);
                *(unsigned char *)(v104 + 40) = v105[40];
                (*(void (**)(uint64_t, char *, uint64_t))(v131 + 32))(v104 + *(int *)(v106 + 28), &v105[*(int *)(v106 + 28)], v127);
                (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v107 + 56))(v104, 0, 1, v106);
                goto LABEL_42;
              }
            }
            else
            {
              if (!v110)
              {
                uint64_t v113 = *(void *)v104;
                unint64_t v114 = *(void *)(v104 + 8);
                *(_OWORD *)uint64_t v104 = *(_OWORD *)v105;
                sub_24A1A5384(v113, v114);
                uint64_t v115 = *(void *)(v104 + 16);
                unint64_t v116 = *(void *)(v104 + 24);
                *(_OWORD *)(v104 + 16) = *((_OWORD *)v105 + 1);
                sub_24A1A5384(v115, v116);
                *(void *)(v104 + 32) = *((void *)v105 + 4);
                *(unsigned char *)(v104 + 40) = v105[40];
                __dst(v104 + *(int *)(v106 + 28), &v105[*(int *)(v106 + 28)], v127);
                goto LABEL_42;
              }
              sub_24A1A7950(v104, type metadata accessor for Signature);
            }
            size_t v54 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8) - 8) + 64);
            uint64_t v55 = (void *)v104;
            uint64_t v56 = v105;
LABEL_19:
            memcpy(v55, v56, v54);
LABEL_42:
            uint64_t v92 = *(int *)(v17 + 24);
            uint64_t v93 = v133 + v92;
            v94 = &__src[v92];
            uint64_t v95 = type metadata accessor for LogConsistency(0);
            uint64_t v96 = *(void *)(v95 - 8);
            uint64_t v97 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v96 + 48);
            int v98 = v97(v93, 1, v95);
            int v99 = v97((uint64_t)v94, 1, v95);
            if (v98)
            {
              if (!v99)
              {
                (*(void (**)(uint64_t, char *, uint64_t))(v131 + 32))(v93, v94, v127);
                *(void *)(v93 + *(int *)(v95 + 20)) = *(void *)&v94[*(int *)(v95 + 20)];
                (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v96 + 56))(v93, 0, 1, v95);
                return a1;
              }
            }
            else
            {
              if (!v99)
              {
                __dst(v93, v94, v127);
                *(void *)(v93 + *(int *)(v95 + 20)) = *(void *)&v94[*(int *)(v95 + 20)];
                swift_release();
                return a1;
              }
              sub_24A1A7950(v93, type metadata accessor for LogConsistency);
            }
            size_t v21 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26B1745E0) - 8) + 64);
            uint64_t v22 = (void *)v93;
            uint64_t v23 = v94;
            goto LABEL_7;
          }
          sub_24A1A7950(v66, type metadata accessor for SignedObject);
        }
        size_t v54 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26B174320) - 8) + 64);
        uint64_t v55 = (void *)v66;
        uint64_t v56 = v67;
        goto LABEL_19;
      }
      sub_24A1A7950(v33, type metadata accessor for LogEntry);
    }
    size_t v54 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26B174940) - 8) + 64);
    uint64_t v55 = (void *)v33;
    uint64_t v56 = v34;
    goto LABEL_19;
  }
  if (v20)
  {
    size_t v21 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26B1742D8) - 8) + 64);
    uint64_t v22 = (void *)v133;
LABEL_6:
    uint64_t v23 = v16;
LABEL_7:
    memcpy(v22, v23, v21);
    return a1;
  }
  uint64_t v24 = *(void (**)(uint64_t, char *, uint64_t))(v131 + 32);
  v24(v133, v16, v13);
  uint64_t v25 = *(int *)(v17 + 20);
  uint64_t v26 = (void *)(v133 + v25);
  uint64_t v27 = &v16[v25];
  uint64_t v28 = type metadata accessor for LogEntry(0);
  uint64_t v29 = *(void *)(v28 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
  {
    uint64_t v30 = v13;
    uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174940);
    memcpy(v26, v27, *(void *)(*(void *)(v31 - 8) + 64));
  }
  else
  {
    uint64_t v128 = v29;
    *uint64_t v26 = *(void *)v27;
    *((unsigned char *)v26 + 8) = v27[8];
    v26[2] = *((void *)v27 + 2);
    *(_OWORD *)(v26 + 3) = *(_OWORD *)(v27 + 24);
    uint64_t v47 = *((void *)v27 + 6);
    v26[5] = *((void *)v27 + 5);
    v26[6] = v47;
    *((unsigned char *)v26 + 56) = v27[56];
    v24((uint64_t)v26 + *(int *)(v28 + 36), &v27[*(int *)(v28 + 36)], v13);
    uint64_t v48 = *(int *)(v28 + 40);
    __dsta = (_OWORD *)((char *)v26 + v48);
    uint64_t v49 = &v27[v48];
    uint64_t v50 = type metadata accessor for SignedObject(0);
    uint64_t v51 = *(void *)(v50 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48))(v49, 1, v50))
    {
      uint64_t v52 = v128;
      uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174320);
      memcpy(__dsta, v49, *(void *)(*(void *)(v53 - 8) + 64));
    }
    else
    {
      uint64_t v123 = v51;
      _OWORD *__dsta = *(_OWORD *)v49;
      v24((uint64_t)__dsta + *(int *)(v50 + 20), &v49[*(int *)(v50 + 20)], v13);
      int v125 = (void *)v50;
      uint64_t v57 = *(int *)(v50 + 24);
      uint64_t v58 = (_OWORD *)((char *)__dsta + v57);
      uint64_t v59 = &v49[v57];
      uint64_t v60 = type metadata accessor for Signature(0);
      uint64_t v119 = *(void *)(v60 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v119 + 48))(v59, 1, v60))
      {
        uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
        memcpy(v58, v59, *(void *)(*(void *)(v61 - 8) + 64));
      }
      else
      {
        long long v83 = *((_OWORD *)v59 + 1);
        *uint64_t v58 = *(_OWORD *)v59;
        v58[1] = v83;
        *((void *)v58 + 4) = *((void *)v59 + 4);
        *((unsigned char *)v58 + 40) = v59[40];
        v24((uint64_t)v58 + *(int *)(v60 + 28), &v59[*(int *)(v60 + 28)], v13);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v119 + 56))(v58, 0, 1, v60);
      }
      uint64_t v52 = v128;
      (*(void (**)(_OWORD *, void, uint64_t, void *))(v123 + 56))(__dsta, 0, 1, v125);
    }
    uint64_t v30 = v13;
    (*(void (**)(void *, void, uint64_t, uint64_t))(v52 + 56))(v26, 0, 1, v28);
  }
  uint64_t v84 = *(int *)(v17 + 24);
  unint64_t v85 = (char *)(v133 + v84);
  uint64_t v86 = &__src[v84];
  uint64_t v87 = type metadata accessor for LogConsistency(0);
  uint64_t v88 = *(void *)(v87 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v88 + 48))(v86, 1, v87))
  {
    uint64_t v89 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1745E0);
    memcpy(v85, v86, *(void *)(*(void *)(v89 - 8) + 64));
  }
  else
  {
    v24((uint64_t)v85, v86, v30);
    *(void *)&v85[*(int *)(v87 + 20)] = *(void *)&v86[*(int *)(v87 + 20)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v88 + 56))(v85, 0, 1, v87);
  }
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v18 + 56))(v133, 0, 1, v17);
  return a1;
}

uint64_t sub_24A1A8E4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24A1A8E60);
}

uint64_t sub_24A1A8E60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_24A2A6E10();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 28);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1742D8);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 32);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t sub_24A1A8F90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24A1A8FA4);
}

uint64_t sub_24A1A8FA4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 24) = (a2 - 1);
  }
  else
  {
    uint64_t v8 = sub_24A2A6E10();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 28);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1742D8);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 32);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

uint64_t type metadata accessor for ATLogProofResponse(uint64_t a1)
{
  return sub_24A1AE704(a1, (uint64_t *)&unk_2697786B0);
}

void sub_24A1A90F4()
{
  sub_24A2A6E10();
  if (v0 <= 0x3F)
  {
    sub_24A1A4B70(319, &qword_26B1742E0, (void (*)(uint64_t))type metadata accessor for ATLogProofs);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

char *sub_24A1A91FC(char *a1, char *a2, uint64_t a3)
{
  uint64_t v3 = a2;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_24A2A6E10();
    uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, v3, v7);
    uint64_t v9 = *(int *)(a3 + 20);
    uint64_t v10 = &a1[v9];
    uint64_t v11 = &v3[v9];
    uint64_t v12 = type metadata accessor for LogEntry(0);
    uint64_t v13 = *(void *)(v12 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174940);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      uint64_t v53 = v13;
      size_t v54 = v3;
      *(void *)uint64_t v10 = *(void *)v11;
      v10[8] = v11[8];
      uint64_t v16 = v8;
      uint64_t v17 = *((void *)v11 + 3);
      *((void *)v10 + 2) = *((void *)v11 + 2);
      unint64_t v18 = *((void *)v11 + 4);
      swift_bridgeObjectRetain();
      sub_24A1A52B0(v17, v18);
      *((void *)v10 + 3) = v17;
      *((void *)v10 + 4) = v18;
      uint64_t v8 = v16;
      uint64_t v19 = *((void *)v11 + 6);
      *((void *)v10 + 5) = *((void *)v11 + 5);
      *((void *)v10 + 6) = v19;
      v10[56] = v11[56];
      v16(&v10[*(int *)(v12 + 36)], &v11[*(int *)(v12 + 36)], v7);
      uint64_t v55 = v12;
      uint64_t v20 = *(int *)(v12 + 40);
      size_t v21 = &v10[v20];
      uint64_t v22 = v7;
      uint64_t v23 = (uint64_t *)&v11[v20];
      uint64_t v24 = type metadata accessor for SignedObject(0);
      uint64_t v25 = *(void *)(v24 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
      {
        uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174320);
        memcpy(v21, v23, *(void *)(*(void *)(v26 - 8) + 64));
        uint64_t v7 = v22;
        uint64_t v27 = v53;
        uint64_t v3 = v54;
      }
      else
      {
        uint64_t v51 = v25;
        uint64_t v28 = v8;
        uint64_t v30 = *v23;
        unint64_t v29 = v23[1];
        sub_24A1A52B0(*v23, v29);
        *(void *)size_t v21 = v30;
        *((void *)v21 + 1) = v29;
        v28(&v21[*(int *)(v24 + 20)], (char *)v23 + *(int *)(v24 + 20), v22);
        uint64_t v31 = *(int *)(v24 + 24);
        __dst = &v21[v31];
        uint64_t v32 = (uint64_t *)((char *)v23 + v31);
        uint64_t v33 = type metadata accessor for Signature(0);
        uint64_t v34 = *(void *)(v33 - 8);
        uint64_t v52 = v21;
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
        {
          uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
          memcpy(__dst, v32, *(void *)(*(void *)(v35 - 8) + 64));
          uint64_t v7 = v22;
        }
        else
        {
          unint64_t v46 = v32[1];
          uint64_t v48 = *v32;
          sub_24A1A52B0(*v32, v46);
          *(void *)__dst = v48;
          *((void *)__dst + 1) = v46;
          unint64_t v47 = v32[3];
          uint64_t v49 = v32[2];
          sub_24A1A52B0(v49, v47);
          *((void *)__dst + 2) = v49;
          *((void *)__dst + 3) = v47;
          *((void *)__dst + 4) = v32[4];
          __dst[40] = *((unsigned char *)v32 + 40);
          uint64_t v36 = *(int *)(v33 + 28);
          int v37 = (char *)v32 + v36;
          uint64_t v7 = v22;
          v28(&__dst[v36], v37, v22);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56))(__dst, 0, 1, v33);
        }
        uint64_t v8 = v28;
        uint64_t v27 = v53;
        uint64_t v3 = v54;
        (*(void (**)(char *, void, uint64_t, uint64_t))(v51 + 56))(v52, 0, 1, v24);
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v10, 0, 1, v55);
    }
    uint64_t v38 = *(int *)(a3 + 24);
    int v39 = &a1[v38];
    uint64_t v40 = &v3[v38];
    uint64_t v41 = type metadata accessor for LogConsistency(0);
    uint64_t v42 = *(void *)(v41 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41))
    {
      uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1745E0);
      memcpy(v39, v40, *(void *)(*(void *)(v43 - 8) + 64));
    }
    else
    {
      v8(v39, v40, v7);
      *(void *)&v39[*(int *)(v41 + 20)] = *(void *)&v40[*(int *)(v41 + 20)];
      uint64_t v44 = *(void (**)(char *, void, uint64_t, uint64_t))(v42 + 56);
      swift_retain();
      v44(v39, 0, 1, v41);
    }
  }
  return a1;
}

uint64_t sub_24A1A9744(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A2A6E10();
  int v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v5(a1, v4);
  uint64_t v6 = a1 + *(int *)(a2 + 20);
  uint64_t v7 = type metadata accessor for LogEntry(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7))
  {
    swift_bridgeObjectRelease();
    sub_24A1A5384(*(void *)(v6 + 24), *(void *)(v6 + 32));
    v5(v6 + *(int *)(v7 + 36), v4);
    uint64_t v8 = v6 + *(int *)(v7 + 40);
    uint64_t v9 = type metadata accessor for SignedObject(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9))
    {
      sub_24A1A5384(*(void *)v8, *(void *)(v8 + 8));
      v5(v8 + *(int *)(v9 + 20), v4);
      uint64_t v10 = v8 + *(int *)(v9 + 24);
      uint64_t v11 = type metadata accessor for Signature(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v10, 1, v11))
      {
        sub_24A1A5384(*(void *)v10, *(void *)(v10 + 8));
        sub_24A1A5384(*(void *)(v10 + 16), *(void *)(v10 + 24));
        v5(v10 + *(int *)(v11 + 28), v4);
      }
    }
  }
  uint64_t v12 = a1 + *(int *)(a2 + 24);
  uint64_t v13 = type metadata accessor for LogConsistency(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(v12, 1, v13);
  if (!result)
  {
    v5(v12, v4);
    return swift_release();
  }
  return result;
}

uint64_t sub_24A1A99A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_24A2A6E10();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  uint64_t v11 = type metadata accessor for LogEntry(0);
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174940);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    uint64_t v50 = a3;
    void *v9 = *v10;
    *((unsigned char *)v9 + 8) = *((unsigned char *)v10 + 8);
    uint64_t v14 = v10[3];
    v9[2] = v10[2];
    unint64_t v15 = v10[4];
    swift_bridgeObjectRetain();
    sub_24A1A52B0(v14, v15);
    v9[3] = v14;
    v9[4] = v15;
    uint64_t v16 = v10[6];
    v9[5] = v10[5];
    v9[6] = v16;
    *((unsigned char *)v9 + 56) = *((unsigned char *)v10 + 56);
    v7((uint64_t)v9 + *(int *)(v11 + 36), (uint64_t)v10 + *(int *)(v11 + 36), v6);
    uint64_t v17 = *(int *)(v11 + 40);
    __dst = (void *)((char *)v9 + v17);
    uint64_t v49 = v7;
    unint64_t v18 = (void *)((char *)v10 + v17);
    uint64_t v19 = type metadata accessor for SignedObject(0);
    uint64_t v20 = *(void *)(v19 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
    {
      uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174320);
      memcpy(__dst, v18, *(void *)(*(void *)(v21 - 8) + 64));
      uint64_t v7 = v49;
    }
    else
    {
      uint64_t v46 = v20;
      uint64_t v48 = v6;
      uint64_t v22 = v19;
      uint64_t v24 = *v18;
      unint64_t v23 = v18[1];
      sub_24A1A52B0(*v18, v23);
      void *__dst = v24;
      __dst[1] = v23;
      v49((uint64_t)__dst + *(int *)(v22 + 20), (uint64_t)v18 + *(int *)(v22 + 20), v48);
      uint64_t v47 = v22;
      uint64_t v25 = *(int *)(v22 + 24);
      uint64_t v26 = (void *)((char *)__dst + v25);
      uint64_t v27 = (uint64_t *)((char *)v18 + v25);
      uint64_t v28 = type metadata accessor for Signature(0);
      uint64_t v29 = *(void *)(v28 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
      {
        uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
        memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64));
        uint64_t v7 = v49;
        uint64_t v6 = v48;
      }
      else
      {
        unint64_t v42 = v27[1];
        uint64_t v44 = *v27;
        sub_24A1A52B0(*v27, v42);
        *uint64_t v26 = v44;
        v26[1] = v42;
        unint64_t v43 = v27[3];
        uint64_t v45 = v27[2];
        sub_24A1A52B0(v45, v43);
        v26[2] = v45;
        v26[3] = v43;
        v26[4] = v27[4];
        *((unsigned char *)v26 + 40) = *((unsigned char *)v27 + 40);
        uint64_t v31 = *(int *)(v28 + 28);
        uint64_t v32 = (char *)v27 + v31;
        uint64_t v33 = v28;
        uint64_t v6 = v48;
        v49((uint64_t)v26 + v31, (uint64_t)v32, v48);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v33);
        uint64_t v7 = v49;
      }
      (*(void (**)(void *, void, uint64_t, uint64_t))(v46 + 56))(__dst, 0, 1, v47);
    }
    a3 = v50;
    (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  uint64_t v34 = *(int *)(a3 + 24);
  uint64_t v35 = (char *)(a1 + v34);
  uint64_t v36 = (char *)(a2 + v34);
  uint64_t v37 = type metadata accessor for LogConsistency(0);
  uint64_t v38 = *(void *)(v37 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37))
  {
    uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1745E0);
    memcpy(v35, v36, *(void *)(*(void *)(v39 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v35, (uint64_t)v36, v6);
    *(void *)&v35[*(int *)(v37 + 20)] = *(void *)&v36[*(int *)(v37 + 20)];
    uint64_t v40 = *(void (**)(char *, void, uint64_t, uint64_t))(v38 + 56);
    swift_retain();
    v40(v35, 0, 1, v37);
  }
  return a1;
}

uint64_t sub_24A1A9E88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_24A2A6E10();
  uint64_t v115 = *(void *)(v6 - 8);
  unint64_t v114 = *(void (**)(uint64_t, uint64_t, uint64_t))(v115 + 24);
  v114(a1, a2, v6);
  uint64_t v116 = a3;
  uint64_t v117 = a1;
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for LogEntry(0);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      uint64_t v31 = *(void *)v9;
      *(unsigned char *)(v8 + 8) = *(unsigned char *)(v9 + 8);
      *(void *)uint64_t v8 = v31;
      *(void *)(v8 + 16) = *(void *)(v9 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v32 = *(void *)(v9 + 24);
      unint64_t v33 = *(void *)(v9 + 32);
      sub_24A1A52B0(v32, v33);
      uint64_t v34 = *(void *)(v8 + 24);
      unint64_t v35 = *(void *)(v8 + 32);
      *(void *)(v8 + 24) = v32;
      *(void *)(v8 + 32) = v33;
      sub_24A1A5384(v34, v35);
      *(void *)(v8 + 40) = *(void *)(v9 + 40);
      uint64_t v36 = *(void *)(v9 + 48);
      *(unsigned char *)(v8 + 56) = *(unsigned char *)(v9 + 56);
      *(void *)(v8 + 48) = v36;
      v114(v8 + *(int *)(v10 + 36), v9 + *(int *)(v10 + 36), v6);
      uint64_t v37 = *(int *)(v10 + 40);
      v8 += v37;
      v9 += v37;
      uint64_t v38 = type metadata accessor for SignedObject(0);
      uint64_t v39 = *(void *)(v38 - 8);
      uint64_t v40 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v39 + 48);
      LODWORD(v32) = v40(v8, 1, v38);
      int v41 = v40(v9, 1, v38);
      if (v32)
      {
        if (!v41)
        {
          uint64_t v42 = *(void *)v9;
          unint64_t v43 = *(void *)(v9 + 8);
          sub_24A1A52B0(*(void *)v9, v43);
          *(void *)uint64_t v8 = v42;
          *(void *)(v8 + 8) = v43;
          uint64_t v113 = *(void (**)(uint64_t, uint64_t, uint64_t))(v115 + 16);
          v113(v8 + *(int *)(v38 + 20), v9 + *(int *)(v38 + 20), v6);
          uint64_t v44 = *(int *)(v38 + 24);
          uint64_t v45 = (void *)(v8 + v44);
          uint64_t v46 = (uint64_t *)(v9 + v44);
          uint64_t v47 = type metadata accessor for Signature(0);
          uint64_t v48 = v6;
          uint64_t v49 = *(void *)(v47 - 8);
          if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v49 + 48))(v46, 1, v47))
          {
            uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
            memcpy(v45, v46, *(void *)(*(void *)(v50 - 8) + 64));
          }
          else
          {
            unint64_t v107 = v46[1];
            uint64_t v110 = *v46;
            sub_24A1A52B0(*v46, v107);
            *uint64_t v45 = v110;
            v45[1] = v107;
            unint64_t v108 = v46[3];
            uint64_t v111 = v46[2];
            sub_24A1A52B0(v111, v108);
            v45[2] = v111;
            v45[3] = v108;
            uint64_t v92 = v46[4];
            *((unsigned char *)v45 + 40) = *((unsigned char *)v46 + 40);
            v45[4] = v92;
            v113((uint64_t)v45 + *(int *)(v47 + 28), (uint64_t)v46 + *(int *)(v47 + 28), v48);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v49 + 56))(v45, 0, 1, v47);
          }
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v39 + 56))(v8, 0, 1, v38);
          uint64_t v6 = v48;
          goto LABEL_10;
        }
      }
      else
      {
        if (!v41)
        {
          uint64_t v76 = *(void *)v9;
          unint64_t v77 = *(void *)(v9 + 8);
          sub_24A1A52B0(*(void *)v9, v77);
          uint64_t v78 = *(void *)v8;
          unint64_t v79 = *(void *)(v8 + 8);
          *(void *)uint64_t v8 = v76;
          *(void *)(v8 + 8) = v77;
          sub_24A1A5384(v78, v79);
          v114(v8 + *(int *)(v38 + 20), v9 + *(int *)(v38 + 20), v6);
          uint64_t v80 = *(int *)(v38 + 24);
          uint64_t v81 = v8 + v80;
          uint64_t v82 = v9 + v80;
          uint64_t v83 = type metadata accessor for Signature(0);
          uint64_t v84 = *(void *)(v83 - 8);
          unint64_t v85 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v84 + 48);
          LODWORD(v76) = v85(v81, 1, v83);
          int v86 = v85(v82, 1, v83);
          if (v76)
          {
            if (!v86)
            {
              uint64_t v87 = *(void *)v82;
              unint64_t v88 = *(void *)(v82 + 8);
              sub_24A1A52B0(*(void *)v82, v88);
              *(void *)uint64_t v81 = v87;
              *(void *)(v81 + 8) = v88;
              uint64_t v89 = *(void *)(v82 + 16);
              unint64_t v90 = *(void *)(v82 + 24);
              sub_24A1A52B0(v89, v90);
              *(void *)(v81 + 16) = v89;
              *(void *)(v81 + 24) = v90;
              uint64_t v91 = *(void *)(v82 + 32);
              *(unsigned char *)(v81 + 40) = *(unsigned char *)(v82 + 40);
              *(void *)(v81 + 32) = v91;
              (*(void (**)(uint64_t, uint64_t, uint64_t))(v115 + 16))(v81 + *(int *)(v83 + 28), v82 + *(int *)(v83 + 28), v6);
              (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v84 + 56))(v81, 0, 1, v83);
              goto LABEL_10;
            }
          }
          else
          {
            if (!v86)
            {
              uint64_t v93 = *(void *)v82;
              unint64_t v94 = *(void *)(v82 + 8);
              sub_24A1A52B0(*(void *)v82, v94);
              uint64_t v95 = *(void *)v81;
              unint64_t v96 = *(void *)(v81 + 8);
              *(void *)uint64_t v81 = v93;
              *(void *)(v81 + 8) = v94;
              sub_24A1A5384(v95, v96);
              uint64_t v97 = *(void *)(v82 + 16);
              unint64_t v98 = *(void *)(v82 + 24);
              sub_24A1A52B0(v97, v98);
              uint64_t v99 = *(void *)(v81 + 16);
              unint64_t v100 = *(void *)(v81 + 24);
              *(void *)(v81 + 16) = v97;
              *(void *)(v81 + 24) = v98;
              sub_24A1A5384(v99, v100);
              uint64_t v101 = *(void *)(v82 + 32);
              *(unsigned char *)(v81 + 40) = *(unsigned char *)(v82 + 40);
              *(void *)(v81 + 32) = v101;
              v114(v81 + *(int *)(v83 + 28), v82 + *(int *)(v83 + 28), v6);
              goto LABEL_10;
            }
            sub_24A1A7950(v81, type metadata accessor for Signature);
          }
          size_t v27 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8) - 8) + 64);
          uint64_t v28 = (void *)v81;
          uint64_t v29 = (const void *)v82;
LABEL_9:
          memcpy(v28, v29, v27);
LABEL_10:
          uint64_t v30 = v116;
          goto LABEL_23;
        }
        sub_24A1A7950(v8, type metadata accessor for SignedObject);
      }
      uint64_t v26 = &qword_26B174320;
LABEL_8:
      size_t v27 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(v26) - 8) + 64);
      uint64_t v28 = (void *)v8;
      uint64_t v29 = (const void *)v9;
      goto LABEL_9;
    }
    sub_24A1A7950(v8, type metadata accessor for LogEntry);
LABEL_7:
    uint64_t v26 = &qword_26B174940;
    goto LABEL_8;
  }
  if (v14) {
    goto LABEL_7;
  }
  uint64_t v15 = *(void *)v9;
  *(unsigned char *)(v8 + 8) = *(unsigned char *)(v9 + 8);
  *(void *)uint64_t v8 = v15;
  *(void *)(v8 + 16) = *(void *)(v9 + 16);
  uint64_t v16 = *(void *)(v9 + 24);
  unint64_t v17 = *(void *)(v9 + 32);
  swift_bridgeObjectRetain();
  sub_24A1A52B0(v16, v17);
  *(void *)(v8 + 24) = v16;
  *(void *)(v8 + 32) = v17;
  *(void *)(v8 + 40) = *(void *)(v9 + 40);
  uint64_t v18 = *(void *)(v9 + 48);
  *(unsigned char *)(v8 + 56) = *(unsigned char *)(v9 + 56);
  *(void *)(v8 + 48) = v18;
  long long v112 = *(void (**)(uint64_t, uint64_t, uint64_t))(v115 + 16);
  v112(v8 + *(int *)(v10 + 36), v9 + *(int *)(v10 + 36), v6);
  uint64_t v19 = *(int *)(v10 + 40);
  uint64_t v20 = (void *)(v8 + v19);
  uint64_t v21 = v6;
  uint64_t v22 = (uint64_t *)(v9 + v19);
  uint64_t v23 = type metadata accessor for SignedObject(0);
  uint64_t v24 = *(void *)(v23 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
  {
    uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174320);
    memcpy(v20, v22, *(void *)(*(void *)(v25 - 8) + 64));
    uint64_t v6 = v21;
  }
  else
  {
    uint64_t v104 = v24;
    uint64_t v109 = a2;
    uint64_t v51 = v21;
    uint64_t v52 = *v22;
    unint64_t v53 = v22[1];
    sub_24A1A52B0(*v22, v53);
    *uint64_t v20 = v52;
    v20[1] = v53;
    v112((uint64_t)v20 + *(int *)(v23 + 20), (uint64_t)v22 + *(int *)(v23 + 20), v51);
    uint64_t v105 = v23;
    uint64_t v106 = v20;
    uint64_t v54 = *(int *)(v23 + 24);
    uint64_t v55 = (void *)((char *)v20 + v54);
    uint64_t v56 = (uint64_t *)((char *)v22 + v54);
    uint64_t v57 = type metadata accessor for Signature(0);
    uint64_t v58 = *(void *)(v57 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v58 + 48))(v56, 1, v57))
    {
      uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
      memcpy(v55, v56, *(void *)(*(void *)(v59 - 8) + 64));
      uint64_t v6 = v51;
    }
    else
    {
      uint64_t v60 = *v56;
      unint64_t v102 = v56[1];
      sub_24A1A52B0(*v56, v102);
      *uint64_t v55 = v60;
      v55[1] = v102;
      uint64_t v61 = v56[2];
      unint64_t v103 = v56[3];
      sub_24A1A52B0(v61, v103);
      v55[2] = v61;
      v55[3] = v103;
      uint64_t v62 = v56[4];
      *((unsigned char *)v55 + 40) = *((unsigned char *)v56 + 40);
      v55[4] = v62;
      uint64_t v63 = *(int *)(v57 + 28);
      uint64_t v64 = (char *)v56 + v63;
      uint64_t v6 = v51;
      v112((uint64_t)v55 + v63, (uint64_t)v64, v51);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v58 + 56))(v55, 0, 1, v57);
    }
    a2 = v109;
    (*(void (**)(void *, void, uint64_t, uint64_t))(v104 + 56))(v106, 0, 1, v105);
  }
  uint64_t v30 = v116;
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
LABEL_23:
  uint64_t v65 = *(int *)(v30 + 24);
  uint64_t v66 = (char *)(v117 + v65);
  uint64_t v67 = (char *)(a2 + v65);
  uint64_t v68 = type metadata accessor for LogConsistency(0);
  uint64_t v69 = *(void *)(v68 - 8);
  uint64_t v70 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v69 + 48);
  int v71 = v70(v66, 1, v68);
  int v72 = v70(v67, 1, v68);
  if (!v71)
  {
    if (!v72)
    {
      v114((uint64_t)v66, (uint64_t)v67, v6);
      *(void *)&v66[*(int *)(v68 + 20)] = *(void *)&v67[*(int *)(v68 + 20)];
      swift_retain();
      swift_release();
      return v117;
    }
    sub_24A1A7950((uint64_t)v66, type metadata accessor for LogConsistency);
    goto LABEL_28;
  }
  if (v72)
  {
LABEL_28:
    uint64_t v74 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1745E0);
    memcpy(v66, v67, *(void *)(*(void *)(v74 - 8) + 64));
    return v117;
  }
  (*(void (**)(char *, char *, uint64_t))(v115 + 16))(v66, v67, v6);
  *(void *)&v66[*(int *)(v68 + 20)] = *(void *)&v67[*(int *)(v68 + 20)];
  uint64_t v73 = *(void (**)(char *, void, uint64_t, uint64_t))(v69 + 56);
  swift_retain();
  v73(v66, 0, 1, v68);
  return v117;
}

uint64_t sub_24A1AA910(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_24A2A6E10();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  uint64_t v11 = type metadata accessor for LogEntry(0);
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174940);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    uint64_t v39 = a3;
    void *v9 = *v10;
    *((unsigned char *)v9 + 8) = *((unsigned char *)v10 + 8);
    v9[2] = v10[2];
    *(_OWORD *)(v9 + 3) = *(_OWORD *)(v10 + 3);
    uint64_t v14 = v10[6];
    v9[5] = v10[5];
    v9[6] = v14;
    *((unsigned char *)v9 + 56) = *((unsigned char *)v10 + 56);
    v7((uint64_t)v9 + *(int *)(v11 + 36), (uint64_t)v10 + *(int *)(v11 + 36), v6);
    uint64_t v15 = *(int *)(v11 + 40);
    uint64_t v40 = v7;
    uint64_t v16 = (_OWORD *)((char *)v9 + v15);
    unint64_t v17 = (_OWORD *)((char *)v10 + v15);
    uint64_t v18 = type metadata accessor for SignedObject(0);
    uint64_t v19 = *(void *)(v18 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
    {
      uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174320);
      memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
      uint64_t v7 = v40;
    }
    else
    {
      uint64_t v37 = v19;
      _OWORD *v16 = *v17;
      v40((uint64_t)v16 + *(int *)(v18 + 20), (uint64_t)v17 + *(int *)(v18 + 20), v6);
      uint64_t v21 = *(int *)(v18 + 24);
      uint64_t v38 = v16;
      uint64_t v22 = (_OWORD *)((char *)v16 + v21);
      uint64_t v23 = (_OWORD *)((char *)v17 + v21);
      uint64_t v24 = type metadata accessor for Signature(0);
      uint64_t v36 = *(void *)(v24 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v36 + 48))(v23, 1, v24))
      {
        uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
        memcpy(v22, v23, *(void *)(*(void *)(v25 - 8) + 64));
        uint64_t v7 = v40;
      }
      else
      {
        long long v26 = v23[1];
        _OWORD *v22 = *v23;
        v22[1] = v26;
        *((void *)v22 + 4) = *((void *)v23 + 4);
        *((unsigned char *)v22 + 40) = *((unsigned char *)v23 + 40);
        uint64_t v27 = *(int *)(v24 + 28);
        uint64_t v28 = (char *)v23 + v27;
        uint64_t v7 = v40;
        v40((uint64_t)v22 + v27, (uint64_t)v28, v6);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v36 + 56))(v22, 0, 1, v24);
      }
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v37 + 56))(v38, 0, 1, v18);
    }
    (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    a3 = v39;
  }
  uint64_t v29 = *(int *)(a3 + 24);
  uint64_t v30 = (char *)(a1 + v29);
  uint64_t v31 = (char *)(a2 + v29);
  uint64_t v32 = type metadata accessor for LogConsistency(0);
  uint64_t v33 = *(void *)(v32 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
  {
    uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1745E0);
    memcpy(v30, v31, *(void *)(*(void *)(v34 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v30, (uint64_t)v31, v6);
    *(void *)&v30[*(int *)(v32 + 20)] = *(void *)&v31[*(int *)(v32 + 20)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
  }
  return a1;
}

uint64_t sub_24A1AAD8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_24A2A6E10();
  uint64_t v85 = *(void *)(v6 - 8);
  uint64_t v84 = *(void (**)(uint64_t, uint64_t, uint64_t))(v85 + 40);
  v84(a1, a2, v6);
  uint64_t v86 = a3;
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for LogEntry(0);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      *(void *)uint64_t v8 = *(void *)v9;
      *(unsigned char *)(v8 + 8) = *(unsigned char *)(v9 + 8);
      *(void *)(v8 + 16) = *(void *)(v9 + 16);
      swift_bridgeObjectRelease();
      uint64_t v27 = *(void *)(v8 + 24);
      unint64_t v28 = *(void *)(v8 + 32);
      *(_OWORD *)(v8 + 24) = *(_OWORD *)(v9 + 24);
      sub_24A1A5384(v27, v28);
      uint64_t v29 = *(void *)(v9 + 48);
      *(void *)(v8 + 40) = *(void *)(v9 + 40);
      *(void *)(v8 + 48) = v29;
      *(unsigned char *)(v8 + 56) = *(unsigned char *)(v9 + 56);
      v84(v8 + *(int *)(v10 + 36), v9 + *(int *)(v10 + 36), v6);
      uint64_t v30 = *(int *)(v10 + 40);
      v8 += v30;
      v9 += v30;
      uint64_t v31 = type metadata accessor for SignedObject(0);
      uint64_t v32 = *(void *)(v31 - 8);
      uint64_t v33 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v32 + 48);
      int v34 = v33(v8, 1, v31);
      int v35 = v33(v9, 1, v31);
      if (v34)
      {
        if (!v35)
        {
          *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
          uint64_t v36 = *(void (**)(uint64_t, uint64_t, uint64_t))(v85 + 32);
          v36(v8 + *(int *)(v31 + 20), v9 + *(int *)(v31 + 20), v6);
          uint64_t v37 = *(int *)(v31 + 24);
          __dsta = (_OWORD *)(v8 + v37);
          uint64_t v38 = (_OWORD *)(v9 + v37);
          uint64_t v39 = type metadata accessor for Signature(0);
          uint64_t v81 = *(void *)(v39 - 8);
          if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v81 + 48))(v38, 1, v39))
          {
            uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
            memcpy(__dsta, v38, *(void *)(*(void *)(v40 - 8) + 64));
          }
          else
          {
            long long v72 = v38[1];
            _OWORD *__dsta = *v38;
            __dsta[1] = v72;
            *((void *)__dsta + 4) = *((void *)v38 + 4);
            *((unsigned char *)__dsta + 40) = *((unsigned char *)v38 + 40);
            v36((uint64_t)__dsta + *(int *)(v39 + 28), (uint64_t)v38 + *(int *)(v39 + 28), v6);
            (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v81 + 56))(__dsta, 0, 1, v39);
          }
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v32 + 56))(v8, 0, 1, v31);
          goto LABEL_10;
        }
      }
      else
      {
        if (!v35)
        {
          uint64_t v61 = *(void *)v8;
          unint64_t v62 = *(void *)(v8 + 8);
          *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
          sub_24A1A5384(v61, v62);
          v84(v8 + *(int *)(v31 + 20), v9 + *(int *)(v31 + 20), v6);
          uint64_t v63 = *(int *)(v31 + 24);
          uint64_t v64 = v8 + v63;
          uint64_t v65 = (_OWORD *)(v9 + v63);
          uint64_t v66 = type metadata accessor for Signature(0);
          uint64_t v67 = *(void *)(v66 - 8);
          uint64_t v68 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v67 + 48);
          int v69 = v68(v64, 1, v66);
          int v70 = v68((uint64_t)v65, 1, v66);
          if (v69)
          {
            if (!v70)
            {
              long long v71 = v65[1];
              *(_OWORD *)uint64_t v64 = *v65;
              *(_OWORD *)(v64 + 16) = v71;
              *(void *)(v64 + 32) = *((void *)v65 + 4);
              *(unsigned char *)(v64 + 40) = *((unsigned char *)v65 + 40);
              (*(void (**)(uint64_t, char *, uint64_t))(v85 + 32))(v64 + *(int *)(v66 + 28), (char *)v65 + *(int *)(v66 + 28), v6);
              (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v67 + 56))(v64, 0, 1, v66);
              goto LABEL_10;
            }
          }
          else
          {
            if (!v70)
            {
              uint64_t v73 = *(void *)v64;
              unint64_t v74 = *(void *)(v64 + 8);
              *(_OWORD *)uint64_t v64 = *v65;
              sub_24A1A5384(v73, v74);
              uint64_t v75 = *(void *)(v64 + 16);
              unint64_t v76 = *(void *)(v64 + 24);
              *(_OWORD *)(v64 + 16) = v65[1];
              sub_24A1A5384(v75, v76);
              *(void *)(v64 + 32) = *((void *)v65 + 4);
              *(unsigned char *)(v64 + 40) = *((unsigned char *)v65 + 40);
              v84(v64 + *(int *)(v66 + 28), (uint64_t)v65 + *(int *)(v66 + 28), v6);
              goto LABEL_10;
            }
            sub_24A1A7950(v64, type metadata accessor for Signature);
          }
          size_t v24 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8) - 8) + 64);
          uint64_t v25 = (void *)v64;
          long long v26 = v65;
LABEL_9:
          memcpy(v25, v26, v24);
LABEL_10:
          uint64_t v22 = v86;
          goto LABEL_23;
        }
        sub_24A1A7950(v8, type metadata accessor for SignedObject);
      }
      uint64_t v23 = &qword_26B174320;
LABEL_8:
      size_t v24 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(v23) - 8) + 64);
      uint64_t v25 = (void *)v8;
      long long v26 = (const void *)v9;
      goto LABEL_9;
    }
    sub_24A1A7950(v8, type metadata accessor for LogEntry);
LABEL_7:
    uint64_t v23 = &qword_26B174940;
    goto LABEL_8;
  }
  if (v14) {
    goto LABEL_7;
  }
  *(void *)uint64_t v8 = *(void *)v9;
  *(unsigned char *)(v8 + 8) = *(unsigned char *)(v9 + 8);
  *(void *)(v8 + 16) = *(void *)(v9 + 16);
  *(_OWORD *)(v8 + 24) = *(_OWORD *)(v9 + 24);
  uint64_t v15 = *(void *)(v9 + 48);
  *(void *)(v8 + 40) = *(void *)(v9 + 40);
  *(void *)(v8 + 48) = v15;
  *(unsigned char *)(v8 + 56) = *(unsigned char *)(v9 + 56);
  uint64_t v80 = *(void (**)(uint64_t, uint64_t, uint64_t))(v85 + 32);
  v80(v8 + *(int *)(v10 + 36), v9 + *(int *)(v10 + 36), v6);
  uint64_t v16 = *(int *)(v10 + 40);
  __dst = (void *)v6;
  unint64_t v17 = (_OWORD *)(v8 + v16);
  uint64_t v18 = (_OWORD *)(v9 + v16);
  uint64_t v19 = type metadata accessor for SignedObject(0);
  uint64_t v20 = *(void *)(v19 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
  {
    uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174320);
    memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
    uint64_t v22 = v86;
    uint64_t v6 = (uint64_t)__dst;
  }
  else
  {
    _OWORD *v17 = *v18;
    v80((uint64_t)v17 + *(int *)(v19 + 20), (uint64_t)v18 + *(int *)(v19 + 20), (uint64_t)__dst);
    uint64_t v41 = *(int *)(v19 + 24);
    unint64_t v79 = v17;
    uint64_t v42 = (_OWORD *)((char *)v17 + v41);
    unint64_t v43 = (_OWORD *)((char *)v18 + v41);
    uint64_t v44 = type metadata accessor for Signature(0);
    uint64_t v77 = *(void *)(v44 - 8);
    uint64_t v78 = v44;
    if ((*(unsigned int (**)(_OWORD *, uint64_t))(v77 + 48))(v43, 1))
    {
      uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
      memcpy(v42, v43, *(void *)(*(void *)(v45 - 8) + 64));
      uint64_t v6 = (uint64_t)__dst;
    }
    else
    {
      long long v46 = v43[1];
      _OWORD *v42 = *v43;
      v42[1] = v46;
      *((void *)v42 + 4) = *((void *)v43 + 4);
      *((unsigned char *)v42 + 40) = *((unsigned char *)v43 + 40);
      uint64_t v47 = *(int *)(v78 + 28);
      uint64_t v48 = (char *)v42 + v47;
      uint64_t v49 = (char *)v43 + v47;
      uint64_t v50 = v42;
      uint64_t v6 = (uint64_t)__dst;
      v80((uint64_t)v48, (uint64_t)v49, (uint64_t)__dst);
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v77 + 56))(v50, 0, 1, v78);
    }
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v20 + 56))(v79, 0, 1, v19);
    uint64_t v22 = v86;
  }
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
LABEL_23:
  uint64_t v51 = *(int *)(v22 + 24);
  uint64_t v52 = (char *)(a1 + v51);
  unint64_t v53 = (char *)(a2 + v51);
  uint64_t v54 = type metadata accessor for LogConsistency(0);
  uint64_t v55 = *(void *)(v54 - 8);
  uint64_t v56 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v55 + 48);
  int v57 = v56(v52, 1, v54);
  int v58 = v56(v53, 1, v54);
  if (!v57)
  {
    if (!v58)
    {
      v84((uint64_t)v52, (uint64_t)v53, v6);
      *(void *)&v52[*(int *)(v54 + 20)] = *(void *)&v53[*(int *)(v54 + 20)];
      swift_release();
      return a1;
    }
    sub_24A1A7950((uint64_t)v52, type metadata accessor for LogConsistency);
    goto LABEL_28;
  }
  if (v58)
  {
LABEL_28:
    uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1745E0);
    memcpy(v52, v53, *(void *)(*(void *)(v59 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v85 + 32))(v52, v53, v6);
  *(void *)&v52[*(int *)(v54 + 20)] = *(void *)&v53[*(int *)(v54 + 20)];
  (*(void (**)(char *, void, uint64_t, uint64_t))(v55 + 56))(v52, 0, 1, v54);
  return a1;
}

uint64_t sub_24A1AB714(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24A1AB728);
}

uint64_t sub_24A1AB728(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_24A2A6E10();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174940);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1745E0);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
  uint64_t v16 = v14;
  uint64_t v17 = a1 + *(int *)(a3 + 24);

  return v15(v17, a2, v16);
}

uint64_t sub_24A1AB87C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24A1AB890);
}

uint64_t sub_24A1AB890(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = sub_24A2A6E10();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_5:
    return v11(v12, a2, a2, v10);
  }
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174940);
  uint64_t v14 = *(void *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    uint64_t v10 = v13;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_5;
  }
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1745E0);
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56);
  uint64_t v18 = v16;
  uint64_t v19 = a1 + *(int *)(a4 + 24);

  return v17(v19, a2, a2, v18);
}

void sub_24A1AB9F0()
{
  sub_24A2A6E10();
  if (v0 <= 0x3F)
  {
    sub_24A1A4B70(319, &qword_26B174948, (void (*)(uint64_t))type metadata accessor for LogEntry);
    if (v1 <= 0x3F)
    {
      sub_24A1A4B70(319, &qword_26B1745E8, (void (*)(uint64_t))type metadata accessor for LogConsistency);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

uint64_t sub_24A1ABB2C()
{
  uint64_t v1 = *(int *)(type metadata accessor for LogConsistency(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for LogConsistency._StorageClass(0);
    swift_allocObject();
    uint64_t v2 = swift_retain();
    *(void *)(v0 + v1) = sub_24A1A4590(v2);
    swift_release();
  }
  swift_retain();
  sub_24A1ABBF8();
  return swift_release();
}

uint64_t sub_24A1ABBF8()
{
  uint64_t result = sub_24A2A6ED0();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 3:
        case 4:
          sub_24A1ABD60();
          break;
        case 5:
          sub_24A1ABE2C();
          break;
        case 8:
        case 9:
          sub_24A1ABEB4();
          break;
        default:
          break;
      }
      uint64_t result = sub_24A2A6ED0();
    }
  }
  return result;
}

uint64_t sub_24A1ABD60()
{
  return swift_endAccess();
}

uint64_t sub_24A1ABE2C()
{
  return swift_endAccess();
}

uint64_t sub_24A1ABEB4()
{
  return swift_endAccess();
}

uint64_t sub_24A1ABF80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for LogConsistency(0);
  uint64_t v7 = swift_retain();
  sub_24A1AC014(v7, a1, a2, a3);
  uint64_t result = swift_release();
  if (!v3) {
    return sub_24A2A6DF0();
  }
  return result;
}

uint64_t sub_24A1AC014(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = sub_24A1AC150(a1, a2, a3, a4, &OBJC_IVAR____TtCV16CloudAttestation14LogConsistencyP33_41967CC35744CDFB8E92E7B80EC2B17A13_StorageClass__startSlh, 3);
  if (!v4)
  {
    sub_24A1AC150(a1, a2, a3, a4, &OBJC_IVAR____TtCV16CloudAttestation14LogConsistencyP33_41967CC35744CDFB8E92E7B80EC2B17A13_StorageClass__endSlh, 4);
    uint64_t v10 = a1
        + OBJC_IVAR____TtCV16CloudAttestation14LogConsistencyP33_41967CC35744CDFB8E92E7B80EC2B17A13_StorageClass__proofHashes;
    swift_beginAccess();
    if (*(void *)(*(void *)v10 + 16))
    {
      swift_bridgeObjectRetain();
      sub_24A2A7080();
      swift_bridgeObjectRelease();
    }
    sub_24A1AC36C(a1, a2, a3, a4, &OBJC_IVAR____TtCV16CloudAttestation14LogConsistencyP33_41967CC35744CDFB8E92E7B80EC2B17A13_StorageClass__patInclusionProof, 8);
    return sub_24A1AC36C(a1, a2, a3, a4, &OBJC_IVAR____TtCV16CloudAttestation14LogConsistencyP33_41967CC35744CDFB8E92E7B80EC2B17A13_StorageClass__tltInclusionProof, 9);
  }
  return result;
}

uint64_t sub_24A1AC150(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  v16[1] = a6;
  v16[2] = a3;
  v16[7] = a4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B174320);
  MEMORY[0x270FA5388]();
  uint64_t v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for SignedObject(0);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388]();
  uint64_t v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = a1 + *a5;
  swift_beginAccess();
  sub_24A1B2CAC(v14, (uint64_t)v9, &qword_26B174320);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1) {
    return sub_24A1B2D10((uint64_t)v9, &qword_26B174320);
  }
  sub_24A1AEA30((uint64_t)v9, (uint64_t)v13, type metadata accessor for SignedObject);
  sub_24A1AE124(&qword_26B174300, (void (*)(uint64_t))type metadata accessor for SignedObject);
  sub_24A2A70F0();
  return sub_24A1A7950((uint64_t)v13, type metadata accessor for SignedObject);
}

uint64_t sub_24A1AC36C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  v16[1] = a6;
  v16[2] = a3;
  v16[7] = a4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B174940);
  MEMORY[0x270FA5388]();
  uint64_t v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for LogEntry(0);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388]();
  uint64_t v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = a1 + *a5;
  swift_beginAccess();
  sub_24A1B2CAC(v14, (uint64_t)v9, &qword_26B174940);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1) {
    return sub_24A1B2D10((uint64_t)v9, &qword_26B174940);
  }
  sub_24A1AEA30((uint64_t)v9, (uint64_t)v13, type metadata accessor for LogEntry);
  sub_24A1AE124(&qword_26B174920, (void (*)(uint64_t))type metadata accessor for LogEntry);
  sub_24A2A70F0();
  return sub_24A1A7950((uint64_t)v13, type metadata accessor for LogEntry);
}

BOOL sub_24A1AC588(uint64_t a1, uint64_t a2)
{
  uint64_t v96 = type metadata accessor for LogEntry(0);
  uint64_t v94 = *(void *)(v96 - 8);
  MEMORY[0x270FA5388](v96);
  unint64_t v90 = &v87[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v95 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174950);
  uint64_t v5 = MEMORY[0x270FA5388](v95);
  uint64_t v91 = &v87[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v5);
  uint64_t v93 = &v87[-v7];
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174940);
  uint64_t v9 = MEMORY[0x270FA5388](v8 - 8);
  uint64_t v89 = &v87[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  unint64_t v102 = &v87[-v12];
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v92 = &v87[-v14];
  MEMORY[0x270FA5388](v13);
  uint64_t v101 = &v87[-v15];
  uint64_t v16 = type metadata accessor for SignedObject(0);
  uint64_t v104 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  unint64_t v98 = &v87[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_2697787F0);
  uint64_t v19 = MEMORY[0x270FA5388](v18);
  unint64_t v100 = &v87[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v19);
  uint64_t v22 = &v87[-v21];
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174320);
  uint64_t v24 = MEMORY[0x270FA5388](v23 - 8);
  uint64_t v97 = &v87[-((v25 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v26 = MEMORY[0x270FA5388](v24);
  unint64_t v103 = &v87[-v27];
  uint64_t v28 = MEMORY[0x270FA5388](v26);
  uint64_t v30 = &v87[-v29];
  MEMORY[0x270FA5388](v28);
  uint64_t v32 = &v87[-v31];
  uint64_t v33 = a1;
  uint64_t v34 = a1
      + OBJC_IVAR____TtCV16CloudAttestation14LogConsistencyP33_41967CC35744CDFB8E92E7B80EC2B17A13_StorageClass__startSlh;
  swift_beginAccess();
  sub_24A1B2CAC(v34, (uint64_t)v32, &qword_26B174320);
  uint64_t v35 = a2
      + OBJC_IVAR____TtCV16CloudAttestation14LogConsistencyP33_41967CC35744CDFB8E92E7B80EC2B17A13_StorageClass__startSlh;
  swift_beginAccess();
  uint64_t v99 = v18;
  uint64_t v36 = *(int *)(v18 + 48);
  uint64_t v37 = v104;
  uint64_t v38 = (uint64_t)&v22[v36];
  sub_24A1B2CAC((uint64_t)v32, (uint64_t)v22, &qword_26B174320);
  sub_24A1B2CAC(v35, v38, &qword_26B174320);
  uint64_t v39 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v37 + 48);
  if (v39((uint64_t)v22, 1, v16) == 1)
  {
    swift_retain();
    swift_retain();
    sub_24A1B2D10((uint64_t)v32, &qword_26B174320);
    int v40 = v39(v38, 1, v16);
    uint64_t v41 = a2;
    uint64_t v42 = v33;
    if (v40 == 1)
    {
      uint64_t v43 = v16;
      sub_24A1B2D10((uint64_t)v22, &qword_26B174320);
      goto LABEL_8;
    }
LABEL_6:
    uint64_t v45 = (uint64_t)v22;
LABEL_14:
    sub_24A1B2D10(v45, &qword_2697787F0);
    goto LABEL_15;
  }
  uint64_t v44 = v33;
  sub_24A1B2CAC((uint64_t)v22, (uint64_t)v30, &qword_26B174320);
  if (v39(v38, 1, v16) == 1)
  {
    swift_retain();
    swift_retain();
    sub_24A1B2D10((uint64_t)v32, &qword_26B174320);
    sub_24A1A7950((uint64_t)v30, type metadata accessor for SignedObject);
    goto LABEL_6;
  }
  long long v46 = v98;
  sub_24A1AEA30(v38, (uint64_t)v98, type metadata accessor for SignedObject);
  swift_retain();
  uint64_t v104 = v16;
  swift_retain();
  int v88 = sub_24A21A0E4(v30, v46);
  sub_24A1A7950((uint64_t)v46, type metadata accessor for SignedObject);
  sub_24A1B2D10((uint64_t)v32, &qword_26B174320);
  uint64_t v42 = v44;
  sub_24A1A7950((uint64_t)v30, type metadata accessor for SignedObject);
  uint64_t v41 = a2;
  sub_24A1B2D10((uint64_t)v22, &qword_26B174320);
  uint64_t v43 = v104;
  if ((v88 & 1) == 0) {
    goto LABEL_15;
  }
LABEL_8:
  uint64_t v47 = v42
      + OBJC_IVAR____TtCV16CloudAttestation14LogConsistencyP33_41967CC35744CDFB8E92E7B80EC2B17A13_StorageClass__endSlh;
  swift_beginAccess();
  uint64_t v48 = v103;
  sub_24A1B2CAC(v47, (uint64_t)v103, &qword_26B174320);
  uint64_t v49 = v41
      + OBJC_IVAR____TtCV16CloudAttestation14LogConsistencyP33_41967CC35744CDFB8E92E7B80EC2B17A13_StorageClass__endSlh;
  swift_beginAccess();
  uint64_t v50 = v100;
  uint64_t v51 = (uint64_t)&v100[*(int *)(v99 + 48)];
  sub_24A1B2CAC((uint64_t)v48, (uint64_t)v100, &qword_26B174320);
  uint64_t v52 = (uint64_t)v50;
  sub_24A1B2CAC(v49, v51, &qword_26B174320);
  if (v39((uint64_t)v50, 1, v43) == 1)
  {
    sub_24A1B2D10((uint64_t)v48, &qword_26B174320);
    int v53 = v39(v51, 1, v43);
    uint64_t v54 = (uint64_t)v102;
    uint64_t v55 = (uint64_t)v101;
    if (v53 == 1)
    {
      sub_24A1B2D10(v52, &qword_26B174320);
      goto LABEL_19;
    }
    goto LABEL_13;
  }
  uint64_t v56 = v97;
  sub_24A1B2CAC((uint64_t)v50, (uint64_t)v97, &qword_26B174320);
  int v57 = v39(v51, 1, v43);
  uint64_t v54 = (uint64_t)v102;
  uint64_t v55 = (uint64_t)v101;
  if (v57 == 1)
  {
    sub_24A1B2D10((uint64_t)v103, &qword_26B174320);
    sub_24A1A7950((uint64_t)v56, type metadata accessor for SignedObject);
LABEL_13:
    uint64_t v45 = v52;
    goto LABEL_14;
  }
  uint64_t v59 = (uint64_t)v56;
  uint64_t v60 = v98;
  sub_24A1AEA30(v51, (uint64_t)v98, type metadata accessor for SignedObject);
  char v61 = sub_24A21A0E4(v59, v60);
  sub_24A1A7950((uint64_t)v60, type metadata accessor for SignedObject);
  sub_24A1B2D10((uint64_t)v103, &qword_26B174320);
  sub_24A1A7950(v59, type metadata accessor for SignedObject);
  sub_24A1B2D10(v52, &qword_26B174320);
  if ((v61 & 1) == 0) {
    goto LABEL_15;
  }
LABEL_19:
  unint64_t v62 = (uint64_t *)(v42
                  + OBJC_IVAR____TtCV16CloudAttestation14LogConsistencyP33_41967CC35744CDFB8E92E7B80EC2B17A13_StorageClass__proofHashes);
  swift_beginAccess();
  uint64_t v63 = *v62;
  uint64_t v64 = (uint64_t *)(v41
                  + OBJC_IVAR____TtCV16CloudAttestation14LogConsistencyP33_41967CC35744CDFB8E92E7B80EC2B17A13_StorageClass__proofHashes);
  swift_beginAccess();
  uint64_t v65 = *v64;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v66 = sub_24A1AF644(v63, v65);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v66 & 1) == 0) {
    goto LABEL_15;
  }
  uint64_t v104 = v42;
  uint64_t v67 = v42
      + OBJC_IVAR____TtCV16CloudAttestation14LogConsistencyP33_41967CC35744CDFB8E92E7B80EC2B17A13_StorageClass__patInclusionProof;
  swift_beginAccess();
  sub_24A1B2CAC(v67, v55, &qword_26B174940);
  uint64_t v68 = v41
      + OBJC_IVAR____TtCV16CloudAttestation14LogConsistencyP33_41967CC35744CDFB8E92E7B80EC2B17A13_StorageClass__patInclusionProof;
  swift_beginAccess();
  int v69 = v93;
  uint64_t v70 = (uint64_t)&v93[*(int *)(v95 + 48)];
  sub_24A1B2CAC(v55, (uint64_t)v93, &qword_26B174940);
  sub_24A1B2CAC(v68, v70, &qword_26B174940);
  long long v71 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v94 + 48);
  uint64_t v72 = v96;
  if (v71((uint64_t)v69, 1, v96) != 1)
  {
    uint64_t v73 = v92;
    sub_24A1B2CAC((uint64_t)v69, (uint64_t)v92, &qword_26B174940);
    if (v71(v70, 1, v72) == 1)
    {
      sub_24A1B2D10(v55, &qword_26B174940);
      sub_24A1A7950((uint64_t)v73, type metadata accessor for LogEntry);
      goto LABEL_25;
    }
    uint64_t v74 = v55;
    uint64_t v75 = (uint64_t)v73;
    unint64_t v76 = v90;
    sub_24A1AEA30(v70, (uint64_t)v90, type metadata accessor for LogEntry);
    char v77 = sub_24A21B57C(v75, v76);
    sub_24A1A7950((uint64_t)v76, type metadata accessor for LogEntry);
    sub_24A1B2D10(v74, &qword_26B174940);
    sub_24A1A7950(v75, type metadata accessor for LogEntry);
    sub_24A1B2D10((uint64_t)v69, &qword_26B174940);
    if (v77) {
      goto LABEL_28;
    }
LABEL_15:
    swift_release();
    swift_release();
    return 0;
  }
  sub_24A1B2D10(v55, &qword_26B174940);
  if (v71(v70, 1, v72) != 1)
  {
LABEL_25:
    sub_24A1B2D10((uint64_t)v69, &qword_26B174950);
    goto LABEL_15;
  }
  sub_24A1B2D10((uint64_t)v69, &qword_26B174940);
LABEL_28:
  uint64_t v78 = v104
      + OBJC_IVAR____TtCV16CloudAttestation14LogConsistencyP33_41967CC35744CDFB8E92E7B80EC2B17A13_StorageClass__tltInclusionProof;
  swift_beginAccess();
  sub_24A1B2CAC(v78, v54, &qword_26B174940);
  uint64_t v79 = v41
      + OBJC_IVAR____TtCV16CloudAttestation14LogConsistencyP33_41967CC35744CDFB8E92E7B80EC2B17A13_StorageClass__tltInclusionProof;
  swift_beginAccess();
  uint64_t v80 = v91;
  uint64_t v81 = (uint64_t)&v91[*(int *)(v95 + 48)];
  sub_24A1B2CAC(v54, (uint64_t)v91, &qword_26B174940);
  uint64_t v82 = v79;
  uint64_t v83 = v96;
  sub_24A1B2CAC(v82, v81, &qword_26B174940);
  if (v71((uint64_t)v80, 1, v83) == 1)
  {
    swift_release();
    swift_release();
    sub_24A1B2D10(v54, &qword_26B174940);
    if (v71(v81, 1, v83) == 1)
    {
      sub_24A1B2D10((uint64_t)v80, &qword_26B174940);
      return 1;
    }
    goto LABEL_33;
  }
  uint64_t v84 = v89;
  sub_24A1B2CAC((uint64_t)v80, (uint64_t)v89, &qword_26B174940);
  if (v71(v81, 1, v83) == 1)
  {
    swift_release();
    swift_release();
    sub_24A1B2D10(v54, &qword_26B174940);
    sub_24A1A7950((uint64_t)v84, type metadata accessor for LogEntry);
LABEL_33:
    sub_24A1B2D10((uint64_t)v80, &qword_26B174950);
    return 0;
  }
  uint64_t v85 = v90;
  sub_24A1AEA30(v81, (uint64_t)v90, type metadata accessor for LogEntry);
  char v86 = sub_24A21B57C(v84, v85);
  swift_release();
  swift_release();
  sub_24A1A7950((uint64_t)v85, type metadata accessor for LogEntry);
  sub_24A1B2D10(v54, &qword_26B174940);
  sub_24A1A7950((uint64_t)v84, type metadata accessor for LogEntry);
  sub_24A1B2D10((uint64_t)v80, &qword_26B174940);
  return (v86 & 1) != 0;
}

uint64_t sub_24A1AD2E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_24A2A6E00();
  uint64_t v4 = *(int *)(a1 + 20);
  if (qword_26B174588 != -1) {
    swift_once();
  }
  *(void *)(a2 + v4) = qword_26B174580;

  return swift_retain();
}

uint64_t sub_24A1AD358()
{
  return 0x69736E6F43676F4CLL;
}

uint64_t sub_24A1AD37C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_24A2A6E10();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t sub_24A1AD3E4(uint64_t a1)
{
  uint64_t v3 = sub_24A2A6E10();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40);

  return v4(v1, a1, v3);
}

uint64_t sub_24A1AD44C()
{
  return sub_24A1ABB2C();
}

uint64_t sub_24A1AD464(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24A1ABF80(a1, a2, a3);
}

uint64_t sub_24A1AD47C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A1AE124(&qword_2697787E8, (void (*)(uint64_t))type metadata accessor for LogConsistency);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t sub_24A1AD4F8@<X0>(uint64_t a1@<X8>)
{
  return sub_24A1ADE40(&qword_2697783C8, (uint64_t)qword_26977A3C0, a1);
}

uint64_t sub_24A1AD51C(uint64_t a1)
{
  uint64_t v2 = sub_24A1AE124(&qword_26B1745C0, (void (*)(uint64_t))type metadata accessor for LogConsistency);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t sub_24A1AD588()
{
  sub_24A1AE124(&qword_26B1745C0, (void (*)(uint64_t))type metadata accessor for LogConsistency);

  return sub_24A2A7010();
}

uint64_t sub_24A1AD608()
{
  uint64_t v0 = sub_24A2A7130();
  __swift_allocate_value_buffer(v0, qword_26977A3D8);
  __swift_project_value_buffer(v0, (uint64_t)qword_26977A3D8);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697787B0);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2697787B8) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_24A2A8AB0;
  unint64_t v4 = v16 + v3;
  unint64_t v5 = v16 + v3 + v1[14];
  *(void *)(v16 + v3) = 1;
  *(void *)unint64_t v5 = "data";
  *(void *)(v5 + 8) = 4;
  *(unsigned char *)(v5 + 16) = 2;
  uint64_t v6 = *MEMORY[0x263F50718];
  uint64_t v7 = sub_24A2A7100();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  unint64_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)unint64_t v9 = "metadata";
  *(void *)(v9 + 8) = 8;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  uint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  void *v10 = 3;
  *(void *)uint64_t v11 = "type";
  *((void *)v11 + 1) = 4;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  void *v12 = 4;
  *(void *)uint64_t v13 = "permittedEnvironments";
  *((void *)v13 + 1) = 21;
  v13[16] = 2;
  v8();
  uint64_t v14 = v4 + 4 * v2 + v1[14];
  *(void *)(v4 + 4 * v2) = 5;
  *(void *)uint64_t v14 = "associatedAssetIds";
  *(void *)(v14 + 8) = 18;
  *(unsigned char *)(v14 + 16) = 2;
  v8();
  return sub_24A2A7110();
}

uint64_t sub_24A1AD888()
{
  uint64_t result = sub_24A2A6ED0();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
          uint64_t v4 = v3;
          sub_24A2A6F40();
          goto LABEL_5;
        case 3:
          sub_24A1AEB34();
          uint64_t v4 = v3;
          sub_24A2A6F10();
          goto LABEL_5;
        case 4:
          sub_24A1B2BF0();
          uint64_t v4 = v3;
          sub_24A2A6EF0();
          goto LABEL_5;
        case 5:
          uint64_t v4 = v3;
          sub_24A2A6F60();
LABEL_5:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = sub_24A2A6ED0();
    }
  }
  return result;
}

uint64_t sub_24A1AD9E8()
{
  uint64_t v2 = *v0;
  unint64_t v3 = v0[1];
  switch(v3 >> 62)
  {
    case 1uLL:
      if ((int)v2 != v2 >> 32) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 2uLL:
      if (*(void *)(v2 + 16) != *(void *)(v2 + 24)) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 3uLL:
      goto LABEL_8;
    default:
      if ((v3 & 0xFF000000000000) == 0) {
        goto LABEL_8;
      }
LABEL_7:
      uint64_t result = sub_24A2A7090();
      if (!v1)
      {
LABEL_8:
        uint64_t v5 = v0[2];
        unint64_t v6 = v0[3];
        switch(v6 >> 62)
        {
          case 1uLL:
            if ((int)v5 != v5 >> 32) {
              goto LABEL_14;
            }
            goto LABEL_15;
          case 2uLL:
            if (*(void *)(v5 + 16) != *(void *)(v5 + 24)) {
              goto LABEL_14;
            }
            goto LABEL_15;
          case 3uLL:
            goto LABEL_15;
          default:
            if ((v6 & 0xFF000000000000) == 0) {
              goto LABEL_15;
            }
LABEL_14:
            uint64_t result = sub_24A2A7090();
            if (!v1)
            {
LABEL_15:
              if (!v0[4] || (sub_24A1AEB34(), uint64_t result = sub_24A2A7070(), !v1))
              {
                if (!*(void *)(v0[6] + 16) || (sub_24A1B2BF0(), uint64_t result = sub_24A2A7050(), !v1))
                {
                  if (!*(void *)(v0[7] + 16) || (uint64_t result = sub_24A2A70B0(), !v1))
                  {
                    type metadata accessor for ATInsertData(0);
                    uint64_t result = sub_24A2A6DF0();
                  }
                }
              }
            }
            break;
        }
      }
      return result;
  }
}

uint64_t sub_24A1ADC08@<X0>(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_24A2A8A80;
  *(_OWORD *)(a1 + 16) = xmmword_24A2A8A80;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 1;
  uint64_t v1 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 48) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 56) = v1;
  return sub_24A2A6E00();
}

uint64_t sub_24A1ADC4C()
{
  return 0x747265736E495441;
}

uint64_t sub_24A1ADC6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 36);
  uint64_t v5 = sub_24A2A6E10();
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t sub_24A1ADCDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 36);
  uint64_t v5 = sub_24A2A6E10();
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);

  return v6(v4, a1, v5);
}

uint64_t (*sub_24A1ADD4C())()
{
  return nullsub_1;
}

uint64_t sub_24A1ADD70()
{
  return sub_24A1AD888();
}

uint64_t sub_24A1ADD88()
{
  return sub_24A1AD9E8();
}

uint64_t sub_24A1ADDA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A1AE124(&qword_2697787F8, (void (*)(uint64_t))type metadata accessor for ATInsertData);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t sub_24A1ADE1C@<X0>(uint64_t a1@<X8>)
{
  return sub_24A1ADE40(&qword_2697783D0, (uint64_t)qword_26977A3D8, a1);
}

uint64_t sub_24A1ADE40@<X0>(void *a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = sub_24A2A7130();
  uint64_t v6 = __swift_project_value_buffer(v5, a2);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v7(a3, v6, v5);
}

uint64_t sub_24A1ADEDC(uint64_t a1)
{
  uint64_t v2 = sub_24A1AE124(&qword_2697786C8, (void (*)(uint64_t))type metadata accessor for ATInsertData);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t sub_24A1ADF48()
{
  return sub_24A2A7F50();
}

uint64_t sub_24A1ADFA0()
{
  sub_24A1AE124(&qword_2697786C8, (void (*)(uint64_t))type metadata accessor for ATInsertData);

  return sub_24A2A7010();
}

uint64_t sub_24A1AE01C()
{
  return sub_24A2A7F50();
}

uint64_t sub_24A1AE074()
{
  return sub_24A1AE124(&qword_2697786C0, (void (*)(uint64_t))type metadata accessor for ATInsertData);
}

uint64_t type metadata accessor for ATInsertData(uint64_t a1)
{
  return sub_24A1AE704(a1, (uint64_t *)&unk_269778850);
}

uint64_t sub_24A1AE0DC()
{
  return sub_24A1AE124(&qword_2697786C8, (void (*)(uint64_t))type metadata accessor for ATInsertData);
}

uint64_t sub_24A1AE124(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_24A1AE16C()
{
  return sub_24A1AE124(&qword_2697786D0, (void (*)(uint64_t))type metadata accessor for ATInsertData);
}

uint64_t sub_24A1AE1B4()
{
  return sub_24A1AE124(&qword_2697786D8, (void (*)(uint64_t))type metadata accessor for ATInsertData);
}

uint64_t sub_24A1AE1FC()
{
  return sub_24A1AE124(&qword_2697786E0, (void (*)(uint64_t))type metadata accessor for LogConsistency);
}

uint64_t sub_24A1AE244()
{
  return sub_24A1AE124(&qword_26B1745C0, (void (*)(uint64_t))type metadata accessor for LogConsistency);
}

uint64_t sub_24A1AE28C()
{
  return sub_24A1AE124(&qword_2697786E8, (void (*)(uint64_t))type metadata accessor for LogConsistency);
}

uint64_t sub_24A1AE2D4()
{
  return sub_24A1AE124(&qword_26B1745C8, (void (*)(uint64_t))type metadata accessor for LogConsistency);
}

uint64_t sub_24A1AE31C()
{
  return sub_24A1AE124((unint64_t *)&qword_26B1742B8, (void (*)(uint64_t))type metadata accessor for ATLogProofs);
}

uint64_t sub_24A1AE364()
{
  return sub_24A1AE124(&qword_2697786F0, (void (*)(uint64_t))type metadata accessor for ATLogProofs);
}

uint64_t sub_24A1AE3AC()
{
  return sub_24A1AE124(&qword_2697786F8, (void (*)(uint64_t))type metadata accessor for ATLogProofResponse);
}

uint64_t sub_24A1AE3F4()
{
  return sub_24A1AE124(&qword_269778700, (void (*)(uint64_t))type metadata accessor for ATLogProofResponse);
}

uint64_t sub_24A1AE43C()
{
  return sub_24A1AE124(&qword_269778708, (void (*)(uint64_t))type metadata accessor for ATLogProofResponse);
}

uint64_t sub_24A1AE484()
{
  return sub_24A1AE124(&qword_269778710, (void (*)(uint64_t))type metadata accessor for ATLogProofRequest);
}

uint64_t sub_24A1AE4CC()
{
  return sub_24A1AE124(&qword_269778718, (void (*)(uint64_t))type metadata accessor for ATLogProofRequest);
}

uint64_t sub_24A1AE514()
{
  return sub_24A1AE124(&qword_269778720, (void (*)(uint64_t))type metadata accessor for ATLogProofRequest);
}

uint64_t sub_24A1AE55C()
{
  return sub_24A1AE124(&qword_269778728, (void (*)(uint64_t))type metadata accessor for ATLogInsertResponse);
}

uint64_t type metadata accessor for ATLogInsertResponse(uint64_t a1)
{
  return sub_24A1AE704(a1, (uint64_t *)&unk_269778840);
}

uint64_t sub_24A1AE5C4()
{
  return sub_24A1AE124(&qword_269778730, (void (*)(uint64_t))type metadata accessor for ATLogInsertResponse);
}

uint64_t sub_24A1AE60C()
{
  return sub_24A1AE124(&qword_269778738, (void (*)(uint64_t))type metadata accessor for ATLogInsertResponse);
}

uint64_t sub_24A1AE654()
{
  return sub_24A1AE124(&qword_269778740, (void (*)(uint64_t))type metadata accessor for ATLogInsertResponse);
}

uint64_t sub_24A1AE69C()
{
  return sub_24A1AE124(&qword_269778748, (void (*)(uint64_t))type metadata accessor for ATLogInsertRequest);
}

uint64_t type metadata accessor for ATLogInsertRequest(uint64_t a1)
{
  return sub_24A1AE704(a1, (uint64_t *)&unk_269778830);
}

uint64_t sub_24A1AE704(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_24A1AE73C()
{
  return sub_24A1AE124(&qword_269778750, (void (*)(uint64_t))type metadata accessor for ATLogInsertRequest);
}

uint64_t sub_24A1AE784()
{
  return sub_24A1AE124(&qword_269778758, (void (*)(uint64_t))type metadata accessor for ATLogInsertRequest);
}

uint64_t sub_24A1AE7CC()
{
  return sub_24A1AE124(&qword_269778760, (void (*)(uint64_t))type metadata accessor for ATLogInsertRequest);
}

uint64_t sub_24A1AE814()
{
  return sub_24A1AE124(&qword_269778768, (void (*)(uint64_t))type metadata accessor for ATLogProofs);
}

uint64_t sub_24A1AE85C()
{
  return sub_24A1AE124(&qword_26B1742C0, (void (*)(uint64_t))type metadata accessor for ATLogProofs);
}

uint64_t sub_24A1AE8A4()
{
  return sub_24A1AE124(&qword_269778770, (void (*)(uint64_t))type metadata accessor for ATLogProofResponse);
}

uint64_t sub_24A1AE8EC()
{
  return sub_24A1AE124(&qword_269778778, (void (*)(uint64_t))type metadata accessor for ATLogProofRequest);
}

unint64_t sub_24A1AE934()
{
  unint64_t result = qword_269778788;
  if (!qword_269778788)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269778788);
  }
  return result;
}

unint64_t sub_24A1AE988()
{
  unint64_t result = qword_269778790;
  if (!qword_269778790)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269778790);
  }
  return result;
}

unint64_t sub_24A1AE9DC()
{
  unint64_t result = qword_2697787A0;
  if (!qword_2697787A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2697787A0);
  }
  return result;
}

uint64_t sub_24A1AEA30(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

unint64_t sub_24A1AEB34()
{
  unint64_t result = qword_2697787C8;
  if (!qword_2697787C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2697787C8);
  }
  return result;
}

uint64_t sub_24A1AEB88(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  BOOL v5 = a1[4] == a2[4] && a1[5] == a2[5];
  if (v5 || (v6 = sub_24A2A7E40(), uint64_t result = 0, (v6 & 1) != 0))
  {
    uint64_t v8 = v2 - 1;
    if (!v8) {
      return 1;
    }
    unint64_t v9 = a2 + 7;
    for (i = a1 + 7; ; i += 2)
    {
      BOOL v11 = *(i - 1) == *(v9 - 1) && *i == *v9;
      if (!v11 && (sub_24A2A7E40() & 1) == 0) {
        break;
      }
      v9 += 2;
      if (!--v8) {
        return 1;
      }
    }
    return 0;
  }
  return result;
}

BOOL sub_24A1AEC50(uint64_t a1, uint64_t a2)
{
  __s1[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  uint64_t v3 = v2 - 1;
  uint64_t v4 = (unsigned __int8 *)(a2 + 48);
  BOOL v5 = (unsigned __int8 *)(a1 + 48);
  while (2)
  {
    uint64_t v6 = *((void *)v5 - 2);
    unint64_t v7 = *((void *)v5 - 1);
    int v9 = *v5;
    v5 += 24;
    int v8 = v9;
    uint64_t v10 = *((void *)v4 - 2);
    unint64_t v11 = *((void *)v4 - 1);
    int v12 = *v4;
    v4 += 24;
    int v82 = v12;
    uint64_t v13 = 0;
    switch(v7 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(v6), v6))
        {
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
        }
        uint64_t v13 = HIDWORD(v6) - (int)v6;
LABEL_10:
        sub_24A1A52B0(v6, v7);
        sub_24A1A52B0(v6, v7);
        break;
      case 2uLL:
        uint64_t v15 = *(void *)(v6 + 16);
        uint64_t v14 = *(void *)(v6 + 24);
        uint64_t v13 = v14 - v15;
        if (!__OFSUB__(v14, v15)) {
          goto LABEL_10;
        }
        goto LABEL_130;
      case 3uLL:
        break;
      default:
        uint64_t v13 = BYTE6(v7);
        break;
    }
    int v81 = v8;
    unint64_t v16 = v11 >> 62;
    switch(v11 >> 62)
    {
      case 1uLL:
        LODWORD(v17) = HIDWORD(v10) - v10;
        if (__OFSUB__(HIDWORD(v10), v10)) {
          goto LABEL_131;
        }
        uint64_t v17 = (int)v17;
LABEL_16:
        if (v13 != v17)
        {
LABEL_124:
          sub_24A1A52B0(v10, v11);
          goto LABEL_126;
        }
        if (v13 < 1)
        {
LABEL_27:
          sub_24A1A52B0(v10, v11);
          sub_24A1A52B0(v10, v11);
          goto LABEL_117;
        }
        break;
      case 2uLL:
        uint64_t v19 = *(void *)(v10 + 16);
        uint64_t v18 = *(void *)(v10 + 24);
        BOOL v20 = __OFSUB__(v18, v19);
        uint64_t v17 = v18 - v19;
        if (!v20) {
          goto LABEL_16;
        }
        goto LABEL_132;
      case 3uLL:
        if (!v13) {
          goto LABEL_27;
        }
        goto LABEL_124;
      default:
        uint64_t v17 = BYTE6(v11);
        goto LABEL_16;
    }
    switch(v7 >> 62)
    {
      case 1uLL:
        uint64_t v79 = v4;
        if ((int)v6 > v6 >> 32) {
          goto LABEL_133;
        }
        sub_24A1A52B0(v10, v11);
        sub_24A1A52B0(v10, v11);
        uint64_t v26 = (char *)sub_24A2A68E0();
        if (!v26) {
          goto LABEL_32;
        }
        uint64_t v27 = sub_24A2A6910();
        if (__OFSUB__((int)v6, v27)) {
          goto LABEL_135;
        }
        v26 += (int)v6 - v27;
LABEL_32:
        sub_24A2A6900();
        if (!v16)
        {
          __s1[0] = v10;
          LOWORD(__s1[1]) = v11;
          BYTE2(__s1[1]) = BYTE2(v11);
          BYTE3(__s1[1]) = BYTE3(v11);
          BYTE4(__s1[1]) = BYTE4(v11);
          BYTE5(__s1[1]) = BYTE5(v11);
          if (!v26) {
            goto LABEL_163;
          }
          if (memcmp(v26, __s1, BYTE6(v11))) {
            goto LABEL_125;
          }
          goto LABEL_117;
        }
        if (v16 != 1)
        {
          uint64_t v68 = *(void *)(v10 + 16);
          char v77 = *(char **)(v10 + 24);
          swift_retain();
          swift_retain();
          uint64_t v69 = sub_24A2A68E0();
          if (v69)
          {
            uint64_t v70 = sub_24A2A6910();
            if (__OFSUB__(v68, v70)) {
              goto LABEL_150;
            }
            v69 += v68 - v70;
          }
          if (__OFSUB__(v77, v68)) {
            goto LABEL_145;
          }
          uint64_t v71 = sub_24A2A6900();
          if (v71 >= (uint64_t)&v77[-v68]) {
            uint64_t v72 = &v77[-v68];
          }
          else {
            uint64_t v72 = (char *)v71;
          }
          int v57 = v26;
          uint64_t v4 = v79;
          if (!v26) {
            goto LABEL_164;
          }
          if (!v69) {
            goto LABEL_165;
          }
          size_t v56 = (size_t)v72;
          int v58 = (const void *)v69;
LABEL_115:
          int v59 = memcmp(v57, v58, v56);
          swift_release();
          goto LABEL_116;
        }
        if (v10 >> 32 < (int)v10) {
          goto LABEL_144;
        }
        swift_retain();
        uint64_t v28 = (char *)sub_24A2A68E0();
        if (v28)
        {
          uint64_t v29 = sub_24A2A6910();
          if (__OFSUB__((int)v10, v29)) {
            goto LABEL_151;
          }
          v28 += (int)v10 - v29;
        }
        uint64_t v30 = sub_24A2A6900();
        if (v30 >= (v10 >> 32) - (int)v10) {
          size_t v31 = (v10 >> 32) - (int)v10;
        }
        else {
          size_t v31 = v30;
        }
        if (!v26) {
          goto LABEL_153;
        }
        if (!v28) {
          goto LABEL_154;
        }
        int v32 = memcmp(v26, v28, v31);
        sub_24A1A5384(v10, v11);
        if (v32) {
          goto LABEL_125;
        }
        goto LABEL_117;
      case 2uLL:
        uint64_t v80 = v4;
        uint64_t v33 = *(void *)(v6 + 16);
        sub_24A1A52B0(v10, v11);
        sub_24A1A52B0(v10, v11);
        swift_retain();
        swift_retain();
        uint64_t v34 = sub_24A2A68E0();
        if (v34)
        {
          uint64_t v35 = v34;
          uint64_t v36 = sub_24A2A6910();
          if (__OFSUB__(v33, v36)) {
            goto LABEL_134;
          }
          unint64_t v76 = (void *)(v35 + v33 - v36);
        }
        else
        {
          unint64_t v76 = 0;
        }
        sub_24A2A6900();
        uint64_t v4 = v80;
        if (!v16)
        {
          __s1[0] = v10;
          LOWORD(__s1[1]) = v11;
          BYTE2(__s1[1]) = BYTE2(v11);
          BYTE3(__s1[1]) = BYTE3(v11);
          BYTE4(__s1[1]) = BYTE4(v11);
          BYTE5(__s1[1]) = BYTE5(v11);
          if (!v76) {
            goto LABEL_160;
          }
          int v59 = memcmp(v76, __s1, BYTE6(v11));
          swift_release();
LABEL_116:
          swift_release();
          if (v59) {
            goto LABEL_125;
          }
          goto LABEL_117;
        }
        if (v16 == 1)
        {
          if (v10 >> 32 < (int)v10) {
            goto LABEL_140;
          }
          swift_retain();
          uint64_t v42 = (char *)sub_24A2A68E0();
          if (v42)
          {
            uint64_t v43 = sub_24A2A6910();
            if (__OFSUB__((int)v10, v43)) {
              goto LABEL_149;
            }
            v42 += (int)v10 - v43;
          }
          uint64_t v44 = sub_24A2A6900();
          if (v44 >= (v10 >> 32) - (int)v10) {
            size_t v45 = (v10 >> 32) - (int)v10;
          }
          else {
            size_t v45 = v44;
          }
          if (!v76) {
            goto LABEL_156;
          }
          uint64_t v4 = v80;
          if (!v42) {
            goto LABEL_157;
          }
          int v46 = memcmp(v76, v42, v45);
          sub_24A1A5384(v10, v11);
          swift_release();
          swift_release();
          if (v46) {
            goto LABEL_125;
          }
LABEL_117:
          sub_24A1A5384(v10, v11);
          sub_24A1A5384(v6, v7);
          sub_24A1A5384(v10, v11);
          sub_24A1A5384(v6, v7);
          BOOL v74 = v3-- != 0;
          BOOL result = v81 == v82;
          if (v81 != v82 || !v74) {
            return result;
          }
          continue;
        }
        uint64_t v61 = *(void *)(v10 + 16);
        uint64_t v60 = *(void *)(v10 + 24);
        swift_retain();
        swift_retain();
        unint64_t v62 = (char *)sub_24A2A68E0();
        if (v62)
        {
          uint64_t v63 = sub_24A2A6910();
          if (__OFSUB__(v61, v63)) {
            goto LABEL_148;
          }
          v62 += v61 - v63;
        }
        BOOL v20 = __OFSUB__(v60, v61);
        int64_t v64 = v60 - v61;
        if (v20) {
          goto LABEL_143;
        }
        uint64_t v65 = sub_24A2A6900();
        if (v65 >= v64) {
          size_t v66 = v64;
        }
        else {
          size_t v66 = v65;
        }
        uint64_t v4 = v80;
        if (!v76) {
          goto LABEL_161;
        }
        if (!v62) {
          goto LABEL_162;
        }
        int v67 = memcmp(v76, v62, v66);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        if (!v67) {
          goto LABEL_117;
        }
LABEL_125:
        sub_24A1A5384(v10, v11);
LABEL_126:
        sub_24A1A5384(v6, v7);
        sub_24A1A5384(v10, v11);
        sub_24A1A5384(v6, v7);
        return 0;
      case 3uLL:
        memset(__s1, 0, 14);
        if (!v16) {
          goto LABEL_58;
        }
        uint64_t v78 = v4;
        if (v16 == 1)
        {
          uint64_t v21 = (v10 >> 32) - (int)v10;
          if (v10 >> 32 < (int)v10) {
            goto LABEL_137;
          }
          sub_24A1A52B0(v10, v11);
          sub_24A1A52B0(v10, v11);
          uint64_t v37 = sub_24A2A68E0();
          if (!v37) {
            goto LABEL_155;
          }
          uint64_t v23 = v37;
          uint64_t v38 = sub_24A2A6910();
          uint64_t v25 = (int)v10 - v38;
          if (__OFSUB__((int)v10, v38)) {
            goto LABEL_139;
          }
LABEL_53:
          uint64_t v39 = sub_24A2A6900();
          int v40 = (const void *)(v23 + v25);
          if (v39 >= v21) {
            size_t v41 = v21;
          }
          else {
            size_t v41 = v39;
          }
          uint64_t v4 = v78;
          if (memcmp(__s1, v40, v41)) {
            goto LABEL_125;
          }
          goto LABEL_117;
        }
        uint64_t v53 = *(void *)(v10 + 16);
        uint64_t v54 = *(void *)(v10 + 24);
        sub_24A1A52B0(v10, v11);
        sub_24A1A52B0(v10, v11);
        swift_retain();
        swift_retain();
        uint64_t v49 = sub_24A2A68E0();
        if (v49)
        {
          uint64_t v55 = sub_24A2A6910();
          if (__OFSUB__(v53, v55)) {
            goto LABEL_147;
          }
          v49 += v53 - v55;
        }
        BOOL v20 = __OFSUB__(v54, v53);
        int64_t v51 = v54 - v53;
        if (v20) {
          goto LABEL_142;
        }
        uint64_t v52 = sub_24A2A6900();
        uint64_t v4 = v78;
        if (!v49) {
          goto LABEL_159;
        }
LABEL_85:
        if (v52 >= v51) {
          size_t v56 = v51;
        }
        else {
          size_t v56 = v52;
        }
        int v57 = __s1;
        int v58 = (const void *)v49;
        goto LABEL_115;
      default:
        __s1[0] = v6;
        LOWORD(__s1[1]) = v7;
        BYTE2(__s1[1]) = BYTE2(v7);
        BYTE3(__s1[1]) = BYTE3(v7);
        BYTE4(__s1[1]) = BYTE4(v7);
        BYTE5(__s1[1]) = BYTE5(v7);
        if (!v16)
        {
LABEL_58:
          uint64_t __s2 = v10;
          __int16 v84 = v11;
          char v85 = BYTE2(v11);
          char v86 = BYTE3(v11);
          char v87 = BYTE4(v11);
          char v88 = BYTE5(v11);
          sub_24A1A52B0(v10, v11);
          sub_24A1A52B0(v10, v11);
          if (memcmp(__s1, &__s2, BYTE6(v11))) {
            goto LABEL_125;
          }
          goto LABEL_117;
        }
        uint64_t v78 = v4;
        if (v16 == 1)
        {
          uint64_t v21 = (v10 >> 32) - (int)v10;
          if (v10 >> 32 < (int)v10) {
            goto LABEL_136;
          }
          sub_24A1A52B0(v10, v11);
          sub_24A1A52B0(v10, v11);
          uint64_t v22 = sub_24A2A68E0();
          if (!v22)
          {
            sub_24A2A6900();
            __break(1u);
LABEL_153:
            __break(1u);
LABEL_154:
            __break(1u);
LABEL_155:
            sub_24A2A6900();
            __break(1u);
LABEL_156:
            __break(1u);
LABEL_157:
            __break(1u);
LABEL_158:
            __break(1u);
LABEL_159:
            __break(1u);
LABEL_160:
            __break(1u);
LABEL_161:
            __break(1u);
LABEL_162:
            __break(1u);
LABEL_163:
            __break(1u);
LABEL_164:
            __break(1u);
LABEL_165:
            __break(1u);
            JUMPOUT(0x24A1AF614);
          }
          uint64_t v23 = v22;
          uint64_t v24 = sub_24A2A6910();
          uint64_t v25 = (int)v10 - v24;
          if (__OFSUB__((int)v10, v24)) {
            goto LABEL_138;
          }
          goto LABEL_53;
        }
        uint64_t v47 = *(void *)(v10 + 16);
        uint64_t v48 = *(void *)(v10 + 24);
        sub_24A1A52B0(v10, v11);
        sub_24A1A52B0(v10, v11);
        swift_retain();
        swift_retain();
        uint64_t v49 = sub_24A2A68E0();
        if (v49)
        {
          uint64_t v50 = sub_24A2A6910();
          if (__OFSUB__(v47, v50)) {
            goto LABEL_146;
          }
          v49 += v47 - v50;
        }
        BOOL v20 = __OFSUB__(v48, v47);
        int64_t v51 = v48 - v47;
        if (v20) {
          goto LABEL_141;
        }
        uint64_t v52 = sub_24A2A6900();
        uint64_t v4 = v78;
        if (!v49) {
          goto LABEL_158;
        }
        goto LABEL_85;
    }
  }
}

uint64_t sub_24A1AF644(uint64_t a1, uint64_t a2)
{
  __s1[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v2 && a1 != a2)
  {
    uint64_t v3 = (unint64_t *)(a1 + 40);
    uint64_t v4 = (unint64_t *)(a2 + 40);
    while (1)
    {
      uint64_t v6 = *(v3 - 1);
      unint64_t v5 = *v3;
      uint64_t v8 = *(v4 - 1);
      unint64_t v7 = *v4;
      unint64_t v9 = *v3 >> 62;
      v3 += 2;
      v4 += 2;
      uint64_t v10 = 0;
      switch(v9)
      {
        case 1uLL:
          if (__OFSUB__(HIDWORD(v6), v6))
          {
            __break(1u);
LABEL_124:
            __break(1u);
LABEL_125:
            __break(1u);
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
LABEL_134:
            __break(1u);
LABEL_135:
            __break(1u);
LABEL_136:
            __break(1u);
LABEL_137:
            __break(1u);
LABEL_138:
            __break(1u);
LABEL_139:
            __break(1u);
LABEL_140:
            __break(1u);
LABEL_141:
            __break(1u);
LABEL_142:
            __break(1u);
LABEL_143:
            __break(1u);
LABEL_144:
            __break(1u);
LABEL_145:
            __break(1u);
          }
          uint64_t v10 = HIDWORD(v6) - (int)v6;
LABEL_13:
          sub_24A1A52B0(v6, v5);
          break;
        case 2uLL:
          uint64_t v12 = *(void *)(v6 + 16);
          uint64_t v11 = *(void *)(v6 + 24);
          uint64_t v10 = v11 - v12;
          if (!__OFSUB__(v11, v12)) {
            goto LABEL_13;
          }
          goto LABEL_124;
        case 3uLL:
          break;
        default:
          uint64_t v10 = BYTE6(v5);
          break;
      }
      unint64_t v13 = v7 >> 62;
      switch(v7 >> 62)
      {
        case 1uLL:
          LODWORD(v14) = HIDWORD(v8) - v8;
          if (__OFSUB__(HIDWORD(v8), v8)) {
            goto LABEL_125;
          }
          uint64_t v14 = (int)v14;
LABEL_19:
          if (v10 != v14) {
            goto LABEL_121;
          }
          if (v10 < 1)
          {
LABEL_6:
            sub_24A1A5384(v6, v5);
          }
          else
          {
            switch((int)v9)
            {
              case 1:
                unint64_t v76 = v3;
                if ((int)v6 > v6 >> 32) {
                  goto LABEL_127;
                }
                sub_24A1A52B0(v8, v7);
                uint64_t v23 = (char *)sub_24A2A68E0();
                if (!v23) {
                  goto LABEL_33;
                }
                uint64_t v24 = sub_24A2A6910();
                if (__OFSUB__((int)v6, v24)) {
                  goto LABEL_129;
                }
                v23 += (int)v6 - v24;
LABEL_33:
                sub_24A2A6900();
                if (!v13)
                {
                  __s1[0] = v8;
                  LOWORD(__s1[1]) = v7;
                  BYTE2(__s1[1]) = BYTE2(v7);
                  BYTE3(__s1[1]) = BYTE3(v7);
                  BYTE4(__s1[1]) = BYTE4(v7);
                  BYTE5(__s1[1]) = BYTE5(v7);
                  if (!v23) {
                    goto LABEL_157;
                  }
                  size_t v41 = BYTE6(v7);
                  int v40 = __s1;
                  uint64_t v39 = v23;
LABEL_103:
                  int v29 = memcmp(v39, v40, v41);
                  goto LABEL_104;
                }
                if (v13 == 1)
                {
                  if (v8 >> 32 < (int)v8) {
                    goto LABEL_138;
                  }
                  swift_retain();
                  uint64_t v25 = (char *)sub_24A2A68E0();
                  if (v25)
                  {
                    uint64_t v26 = sub_24A2A6910();
                    if (__OFSUB__((int)v8, v26)) {
                      goto LABEL_145;
                    }
                    v25 += (int)v8 - v26;
                  }
                  uint64_t v27 = sub_24A2A6900();
                  if (v27 >= (v8 >> 32) - (int)v8) {
                    size_t v28 = (v8 >> 32) - (int)v8;
                  }
                  else {
                    size_t v28 = v27;
                  }
                  if (!v23) {
                    goto LABEL_147;
                  }
                  if (!v25) {
                    goto LABEL_148;
                  }
                  int v29 = memcmp(v23, v25, v28);
                  sub_24A1A5384(v8, v7);
                  goto LABEL_72;
                }
                uint64_t v67 = *(void *)(v8 + 16);
                BOOL v74 = *(char **)(v8 + 24);
                swift_retain();
                swift_retain();
                uint64_t v68 = sub_24A2A68E0();
                if (v68)
                {
                  uint64_t v69 = sub_24A2A6910();
                  if (__OFSUB__(v67, v69)) {
                    goto LABEL_144;
                  }
                  v68 += v67 - v69;
                }
                if (__OFSUB__(v74, v67)) {
                  goto LABEL_139;
                }
                uint64_t v70 = sub_24A2A6900();
                if (v70 >= (uint64_t)&v74[-v67]) {
                  uint64_t v71 = &v74[-v67];
                }
                else {
                  uint64_t v71 = (char *)v70;
                }
                size_t v56 = v23;
                uint64_t v3 = v76;
                if (!v23) {
                  goto LABEL_158;
                }
                if (!v68) {
                  goto LABEL_159;
                }
                size_t v55 = (size_t)v71;
                int v57 = (const void *)v68;
LABEL_116:
                int v58 = memcmp(v56, v57, v55);
                swift_release();
                goto LABEL_117;
              case 2:
                char v77 = v3;
                uint64_t v30 = *(void *)(v6 + 16);
                sub_24A1A52B0(v8, v7);
                swift_retain();
                swift_retain();
                uint64_t v31 = sub_24A2A68E0();
                if (v31)
                {
                  uint64_t v32 = v31;
                  uint64_t v33 = sub_24A2A6910();
                  if (__OFSUB__(v30, v33)) {
                    goto LABEL_128;
                  }
                  uint64_t v73 = (void *)(v32 + v30 - v33);
                }
                else
                {
                  uint64_t v73 = 0;
                }
                sub_24A2A6900();
                uint64_t v3 = v77;
                if (v13)
                {
                  if (v13 == 1)
                  {
                    if (v8 >> 32 < (int)v8) {
                      goto LABEL_134;
                    }
                    swift_retain();
                    uint64_t v42 = (char *)sub_24A2A68E0();
                    if (v42)
                    {
                      uint64_t v43 = sub_24A2A6910();
                      if (__OFSUB__((int)v8, v43)) {
                        goto LABEL_143;
                      }
                      v42 += (int)v8 - v43;
                    }
                    uint64_t v44 = sub_24A2A6900();
                    if (v44 >= (v8 >> 32) - (int)v8) {
                      size_t v45 = (v8 >> 32) - (int)v8;
                    }
                    else {
                      size_t v45 = v44;
                    }
                    if (!v73) {
                      goto LABEL_150;
                    }
                    uint64_t v3 = v77;
                    if (!v42) {
                      goto LABEL_151;
                    }
                    int v29 = memcmp(v73, v42, v45);
                    sub_24A1A5384(v8, v7);
                    swift_release();
                    swift_release();
LABEL_72:
                    sub_24A1A5384(v8, v7);
LABEL_104:
                    sub_24A1A5384(v6, v5);
                    if (v29) {
                      return 0;
                    }
                  }
                  else
                  {
                    uint64_t v60 = *(void *)(v8 + 16);
                    uint64_t v59 = *(void *)(v8 + 24);
                    swift_retain();
                    swift_retain();
                    uint64_t v61 = (char *)sub_24A2A68E0();
                    if (v61)
                    {
                      uint64_t v62 = sub_24A2A6910();
                      if (__OFSUB__(v60, v62)) {
                        goto LABEL_142;
                      }
                      v61 += v60 - v62;
                    }
                    BOOL v17 = __OFSUB__(v59, v60);
                    int64_t v63 = v59 - v60;
                    if (v17) {
                      goto LABEL_137;
                    }
                    uint64_t v64 = sub_24A2A6900();
                    if (v64 >= v63) {
                      size_t v65 = v63;
                    }
                    else {
                      size_t v65 = v64;
                    }
                    uint64_t v3 = v77;
                    if (!v73) {
                      goto LABEL_155;
                    }
                    if (!v61) {
                      goto LABEL_156;
                    }
                    int v66 = memcmp(v73, v61, v65);
                    swift_release();
                    swift_release();
                    swift_release();
                    swift_release();
                    sub_24A1A5384(v8, v7);
                    sub_24A1A5384(v6, v5);
                    if (v66) {
                      return 0;
                    }
                  }
                }
                else
                {
                  __s1[0] = v8;
                  LOWORD(__s1[1]) = v7;
                  BYTE2(__s1[1]) = BYTE2(v7);
                  BYTE3(__s1[1]) = BYTE3(v7);
                  BYTE4(__s1[1]) = BYTE4(v7);
                  BYTE5(__s1[1]) = BYTE5(v7);
                  if (!v73) {
                    goto LABEL_154;
                  }
                  int v58 = memcmp(v73, __s1, BYTE6(v7));
                  swift_release();
LABEL_117:
                  swift_release();
                  sub_24A1A5384(v8, v7);
                  sub_24A1A5384(v6, v5);
                  if (v58) {
                    return 0;
                  }
                }
                break;
              case 3:
                memset(__s1, 0, 14);
                if (!v13) {
                  goto LABEL_58;
                }
                uint64_t v75 = v3;
                if (v13 == 1)
                {
                  uint64_t v18 = (v8 >> 32) - (int)v8;
                  if (v8 >> 32 < (int)v8) {
                    goto LABEL_131;
                  }
                  sub_24A1A52B0(v8, v7);
                  uint64_t v34 = sub_24A2A68E0();
                  if (!v34) {
                    goto LABEL_149;
                  }
                  uint64_t v20 = v34;
                  uint64_t v35 = sub_24A2A6910();
                  uint64_t v22 = (int)v8 - v35;
                  if (__OFSUB__((int)v8, v35)) {
                    goto LABEL_133;
                  }
LABEL_53:
                  uint64_t v36 = sub_24A2A6900();
                  if (v36 >= v18) {
                    size_t v37 = v18;
                  }
                  else {
                    size_t v37 = v36;
                  }
                  int v38 = memcmp(__s1, (const void *)(v20 + v22), v37);
                  sub_24A1A5384(v8, v7);
                  sub_24A1A5384(v6, v5);
                  uint64_t v3 = v75;
                  if (v38) {
                    return 0;
                  }
                  break;
                }
                uint64_t v52 = *(void *)(v8 + 16);
                uint64_t v53 = *(void *)(v8 + 24);
                sub_24A1A52B0(v8, v7);
                swift_retain();
                swift_retain();
                uint64_t v48 = sub_24A2A68E0();
                if (v48)
                {
                  uint64_t v54 = sub_24A2A6910();
                  if (__OFSUB__(v52, v54)) {
                    goto LABEL_141;
                  }
                  v48 += v52 - v54;
                }
                BOOL v17 = __OFSUB__(v53, v52);
                int64_t v50 = v53 - v52;
                if (v17) {
                  goto LABEL_136;
                }
                uint64_t v51 = sub_24A2A6900();
                uint64_t v3 = v75;
                if (!v48) {
                  goto LABEL_153;
                }
LABEL_84:
                if (v51 >= v50) {
                  size_t v55 = v50;
                }
                else {
                  size_t v55 = v51;
                }
                size_t v56 = __s1;
                int v57 = (const void *)v48;
                goto LABEL_116;
              default:
                __s1[0] = v6;
                LOWORD(__s1[1]) = v5;
                BYTE2(__s1[1]) = BYTE2(v5);
                BYTE3(__s1[1]) = BYTE3(v5);
                BYTE4(__s1[1]) = BYTE4(v5);
                BYTE5(__s1[1]) = BYTE5(v5);
                if (!v13)
                {
LABEL_58:
                  uint64_t v78 = v8;
                  __int16 v79 = v7;
                  char v80 = BYTE2(v7);
                  char v81 = BYTE3(v7);
                  char v82 = BYTE4(v7);
                  char v83 = BYTE5(v7);
                  sub_24A1A52B0(v8, v7);
                  uint64_t v39 = __s1;
                  int v40 = &v78;
                  size_t v41 = BYTE6(v7);
                  goto LABEL_103;
                }
                uint64_t v75 = v3;
                if (v13 == 1)
                {
                  uint64_t v18 = (v8 >> 32) - (int)v8;
                  if (v8 >> 32 < (int)v8) {
                    goto LABEL_130;
                  }
                  sub_24A1A52B0(v8, v7);
                  uint64_t v19 = sub_24A2A68E0();
                  if (!v19)
                  {
                    sub_24A2A6900();
                    __break(1u);
LABEL_147:
                    __break(1u);
LABEL_148:
                    __break(1u);
LABEL_149:
                    sub_24A2A6900();
                    __break(1u);
LABEL_150:
                    __break(1u);
LABEL_151:
                    __break(1u);
LABEL_152:
                    __break(1u);
LABEL_153:
                    __break(1u);
LABEL_154:
                    __break(1u);
LABEL_155:
                    __break(1u);
LABEL_156:
                    __break(1u);
LABEL_157:
                    __break(1u);
LABEL_158:
                    __break(1u);
LABEL_159:
                    __break(1u);
                    JUMPOUT(0x24A1AFF7CLL);
                  }
                  uint64_t v20 = v19;
                  uint64_t v21 = sub_24A2A6910();
                  uint64_t v22 = (int)v8 - v21;
                  if (__OFSUB__((int)v8, v21)) {
                    goto LABEL_132;
                  }
                  goto LABEL_53;
                }
                uint64_t v46 = *(void *)(v8 + 16);
                uint64_t v47 = *(void *)(v8 + 24);
                sub_24A1A52B0(v8, v7);
                swift_retain();
                swift_retain();
                uint64_t v48 = sub_24A2A68E0();
                if (v48)
                {
                  uint64_t v49 = sub_24A2A6910();
                  if (__OFSUB__(v46, v49)) {
                    goto LABEL_140;
                  }
                  v48 += v46 - v49;
                }
                BOOL v17 = __OFSUB__(v47, v46);
                int64_t v50 = v47 - v46;
                if (v17) {
                  goto LABEL_135;
                }
                uint64_t v51 = sub_24A2A6900();
                uint64_t v3 = v75;
                if (!v48) {
                  goto LABEL_152;
                }
                goto LABEL_84;
            }
          }
          if (!--v2) {
            return 1;
          }
          break;
        case 2uLL:
          uint64_t v16 = *(void *)(v8 + 16);
          uint64_t v15 = *(void *)(v8 + 24);
          BOOL v17 = __OFSUB__(v15, v16);
          uint64_t v14 = v15 - v16;
          if (!v17) {
            goto LABEL_19;
          }
          goto LABEL_126;
        case 3uLL:
          if (!v10) {
            goto LABEL_6;
          }
          sub_24A1A52B0(v8, v7);
LABEL_121:
          sub_24A1A5384(v6, v5);
          return 0;
        default:
          uint64_t v14 = BYTE6(v7);
          goto LABEL_19;
      }
    }
  }
  return 1;
}

uint64_t sub_24A1AFFAC(uint64_t a1, uint64_t a2)
{
  void __s1[3] = *MEMORY[0x263EF8340];
  uint64_t v4 = type metadata accessor for Proto_SealedHash.Entry.OneOf_Info(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  unint64_t v7 = (char *)&v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174678);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v73 = __swift_instantiateConcreteTypeFromMangledName(&qword_269778808);
  MEMORY[0x270FA5388](v73);
  uint64_t v12 = (char *)&v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v74 = type metadata accessor for Proto_SealedHash.Entry(0);
  uint64_t v13 = MEMORY[0x270FA5388](v74);
  uint64_t v15 = (char *)&v61 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v18 = (char *)&v61 - v17;
  uint64_t v19 = *(void *)(a1 + 16);
  if (v19 != *(void *)(a2 + 16)) {
    goto LABEL_53;
  }
  if (!v19 || a1 == a2)
  {
    char v57 = 1;
    return v57 & 1;
  }
  uint64_t v71 = v12;
  uint64_t v72 = v4;
  int64_t v63 = v7;
  uint64_t v64 = v10;
  uint64_t v67 = a2;
  uint64_t v68 = 0;
  unint64_t v20 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  uint64_t v65 = *(void *)(v16 + 72);
  uint64_t v66 = a1;
  uint64_t v69 = (char *)&v61 - v17;
  uint64_t v70 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  uint64_t v21 = v19 - 1;
  while (2)
  {
    sub_24A1B2C44(a1 + v20, (uint64_t)v18, type metadata accessor for Proto_SealedHash.Entry);
    sub_24A1B2C44(a2 + v20, (uint64_t)v15, type metadata accessor for Proto_SealedHash.Entry);
    if (*(_DWORD *)v18 != *(_DWORD *)v15) {
      goto LABEL_52;
    }
    uint64_t v23 = *((void *)v18 + 1);
    unint64_t v22 = *((void *)v18 + 2);
    uint64_t v24 = *((void *)v15 + 1);
    unint64_t v25 = *((void *)v15 + 2);
    uint64_t v26 = 0;
    switch(v22 >> 62)
    {
      case 1uLL:
        LODWORD(v26) = HIDWORD(v23) - v23;
        if (__OFSUB__(HIDWORD(v23), v23))
        {
          __break(1u);
LABEL_56:
          __break(1u);
LABEL_57:
          __break(1u);
LABEL_58:
          __break(1u);
LABEL_59:
          __break(1u);
LABEL_60:
          __break(1u);
LABEL_61:
          __break(1u);
LABEL_62:
          __break(1u);
        }
        uint64_t v26 = (int)v26;
LABEL_11:
        switch(v25 >> 62)
        {
          case 1uLL:
            LODWORD(v30) = HIDWORD(v24) - v24;
            if (__OFSUB__(HIDWORD(v24), v24)) {
              goto LABEL_57;
            }
            uint64_t v30 = (int)v30;
LABEL_16:
            if (v26 != v30) {
              goto LABEL_52;
            }
            if (v26 < 1) {
              goto LABEL_38;
            }
            break;
          case 2uLL:
            uint64_t v32 = *(void *)(v24 + 16);
            uint64_t v31 = *(void *)(v24 + 24);
            BOOL v29 = __OFSUB__(v31, v32);
            uint64_t v30 = v31 - v32;
            if (!v29) {
              goto LABEL_16;
            }
            goto LABEL_58;
          case 3uLL:
            if (v26) {
              goto LABEL_52;
            }
            goto LABEL_38;
          default:
            uint64_t v30 = BYTE6(v25);
            goto LABEL_16;
        }
        break;
      case 2uLL:
        uint64_t v28 = *(void *)(v23 + 16);
        uint64_t v27 = *(void *)(v23 + 24);
        BOOL v29 = __OFSUB__(v27, v28);
        uint64_t v26 = v27 - v28;
        if (!v29) {
          goto LABEL_11;
        }
        goto LABEL_56;
      case 3uLL:
        goto LABEL_11;
      default:
        uint64_t v26 = BYTE6(v22);
        goto LABEL_11;
    }
    switch(v22 >> 62)
    {
      case 1uLL:
        uint64_t v62 = (v23 >> 32) - (int)v23;
        if (v23 >> 32 < (int)v23) {
          goto LABEL_59;
        }
        sub_24A1A52B0(v23, v22);
        uint64_t v33 = sub_24A2A68E0();
        if (v33)
        {
          uint64_t v61 = v33;
          uint64_t v34 = sub_24A2A6910();
          if (__OFSUB__((int)v23, v34)) {
            goto LABEL_61;
          }
          uint64_t v35 = v61 + (int)v23 - v34;
        }
        else
        {
          uint64_t v35 = 0;
        }
        sub_24A2A6900();
        uint64_t v46 = v24;
        uint64_t v47 = v68;
        sub_24A1B0C70(v35, v46, v25, (char *)__s1);
        uint64_t v68 = v47;
        sub_24A1A5384(v23, v22);
        goto LABEL_37;
      case 2uLL:
        uint64_t v36 = *(void *)(v23 + 16);
        uint64_t v62 = *(void *)(v23 + 24);
        swift_retain();
        swift_retain();
        uint64_t v37 = sub_24A2A68E0();
        if (v37)
        {
          uint64_t v38 = v37;
          uint64_t v39 = sub_24A2A6910();
          if (__OFSUB__(v36, v39)) {
            goto LABEL_62;
          }
          uint64_t v40 = v36;
          uint64_t v41 = v38 + v36 - v39;
        }
        else
        {
          uint64_t v40 = v36;
          uint64_t v41 = 0;
        }
        if (__OFSUB__(v62, v40)) {
          goto LABEL_60;
        }
        sub_24A2A6900();
        uint64_t v44 = v24;
        uint64_t v45 = v68;
        sub_24A1B0C70(v41, v44, v25, (char *)__s1);
        uint64_t v68 = v45;
        swift_release();
        swift_release();
LABEL_37:
        if ((__s1[0] & 1) == 0) {
          goto LABEL_52;
        }
LABEL_38:
        uint64_t v48 = *(int *)(v74 + 24);
        uint64_t v49 = (uint64_t)&v15[v48];
        uint64_t v50 = (uint64_t)v71;
        uint64_t v51 = (uint64_t)&v71[*(int *)(v73 + 48)];
        sub_24A1B2CAC((uint64_t)&v18[v48], (uint64_t)v71, &qword_26B174678);
        sub_24A1B2CAC(v49, v51, &qword_26B174678);
        uint64_t v52 = *v70;
        uint64_t v53 = v72;
        if ((*v70)(v50, 1, v72) == 1)
        {
          if (v52(v51, 1, v53) != 1) {
            goto LABEL_51;
          }
          sub_24A1B2D10(v50, &qword_26B174678);
          uint64_t v18 = v69;
LABEL_43:
          sub_24A2A6E10();
          sub_24A1AE124(&qword_2697787D0, MEMORY[0x263F50560]);
          char v57 = sub_24A2A77E0();
          sub_24A1A7950((uint64_t)v15, type metadata accessor for Proto_SealedHash.Entry);
          sub_24A1A7950((uint64_t)v18, type metadata accessor for Proto_SealedHash.Entry);
          BOOL v59 = v21-- != 0;
          if ((v57 & 1) == 0) {
            return v57 & 1;
          }
          a1 = v66;
          v20 += v65;
          a2 = v67;
          if (!v59) {
            return v57 & 1;
          }
          continue;
        }
        uint64_t v54 = (uint64_t)v64;
        sub_24A1B2CAC(v50, (uint64_t)v64, &qword_26B174678);
        if (v52(v51, 1, v53) != 1)
        {
          uint64_t v55 = (uint64_t)v63;
          sub_24A1AEA30(v51, (uint64_t)v63, type metadata accessor for Proto_SealedHash.Entry.OneOf_Info);
          char v56 = sub_24A295F1C(v54, v55);
          sub_24A1A7950(v55, type metadata accessor for Proto_SealedHash.Entry.OneOf_Info);
          sub_24A1A7950(v54, type metadata accessor for Proto_SealedHash.Entry.OneOf_Info);
          sub_24A1B2D10(v50, &qword_26B174678);
          uint64_t v18 = v69;
          if ((v56 & 1) == 0) {
            goto LABEL_52;
          }
          goto LABEL_43;
        }
        sub_24A1A7950(v54, type metadata accessor for Proto_SealedHash.Entry.OneOf_Info);
LABEL_51:
        sub_24A1B2D10(v50, &qword_269778808);
        uint64_t v18 = v69;
LABEL_52:
        sub_24A1A7950((uint64_t)v15, type metadata accessor for Proto_SealedHash.Entry);
        sub_24A1A7950((uint64_t)v18, type metadata accessor for Proto_SealedHash.Entry);
LABEL_53:
        char v57 = 0;
        return v57 & 1;
      case 3uLL:
        memset(__s1, 0, 14);
        goto LABEL_30;
      default:
        __s1[0] = *((void *)v18 + 1);
        LOWORD(__s1[1]) = v22;
        BYTE2(__s1[1]) = BYTE2(v22);
        BYTE3(__s1[1]) = BYTE3(v22);
        BYTE4(__s1[1]) = BYTE4(v22);
        BYTE5(__s1[1]) = BYTE5(v22);
LABEL_30:
        uint64_t v42 = v24;
        uint64_t v43 = v68;
        sub_24A1B0C70((uint64_t)__s1, v42, v25, &v75);
        uint64_t v68 = v43;
        if ((v75 & 1) == 0) {
          goto LABEL_52;
        }
        goto LABEL_38;
    }
  }
}

uint64_t sub_24A1B0810(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v2 && a1 != a2)
  {
    uint64_t v3 = (unsigned char *)(a1 + 40);
    for (i = (unsigned char *)(a2 + 40); ; i += 16)
    {
      uint64_t v5 = *((void *)v3 - 1);
      if (*v3 == 1) {
        uint64_t v5 = qword_24A2A98E8[v5];
      }
      uint64_t v6 = *((void *)i - 1);
      if (*i)
      {
        switch(v6)
        {
          case 1:
            if (v5 != 1) {
              return 0;
            }
            goto LABEL_6;
          case 2:
            if (v5 != 2) {
              return 0;
            }
            goto LABEL_6;
          case 3:
            if (v5 != 3) {
              return 0;
            }
            goto LABEL_6;
          case 4:
            if (v5 != 4) {
              return 0;
            }
            goto LABEL_6;
          case 5:
            if (v5 != 5) {
              return 0;
            }
            goto LABEL_6;
          case 6:
            if (v5 != 6) {
              return 0;
            }
            goto LABEL_6;
          case 7:
            if (v5 != 7) {
              return 0;
            }
            goto LABEL_6;
          case 8:
            if (v5 != 96) {
              return 0;
            }
            goto LABEL_6;
          case 9:
            if (v5 != 97) {
              return 0;
            }
            goto LABEL_6;
          case 10:
            if (v5 != 98) {
              return 0;
            }
            goto LABEL_6;
          case 11:
            if (v5 != 99) {
              return 0;
            }
            goto LABEL_6;
          default:
            if (v5) {
              return 0;
            }
            goto LABEL_6;
        }
      }
      if (v5 != v6) {
        break;
      }
LABEL_6:
      v3 += 16;
      if (!--v2) {
        return 1;
      }
    }
    return 0;
  }
  return 1;
}

uint64_t sub_24A1B0960(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PrivateCloudCompute_ReleaseMetadata.Asset(0) - 8;
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  unint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v10 = (char *)&v19 - v9;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11 == *(void *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      char v15 = 1;
    }
    else
    {
      unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      uint64_t v13 = *(void *)(v8 + 72);
      uint64_t v14 = v11 - 1;
      do
      {
        sub_24A1B2C44(a1 + v12, (uint64_t)v10, type metadata accessor for PrivateCloudCompute_ReleaseMetadata.Asset);
        sub_24A1B2C44(a2 + v12, (uint64_t)v7, type metadata accessor for PrivateCloudCompute_ReleaseMetadata.Asset);
        char v15 = sub_24A279FC8(v10, v7);
        sub_24A1A7950((uint64_t)v7, type metadata accessor for PrivateCloudCompute_ReleaseMetadata.Asset);
        sub_24A1A7950((uint64_t)v10, type metadata accessor for PrivateCloudCompute_ReleaseMetadata.Asset);
        BOOL v17 = v14-- != 0;
        if ((v15 & 1) == 0) {
          break;
        }
        v12 += v13;
      }
      while (v17);
    }
  }
  else
  {
    char v15 = 0;
  }
  return v15 & 1;
}

uint64_t sub_24A1B0B00()
{
  return sub_24A2A6CA0();
}

uint64_t sub_24A1B0B4C()
{
  return sub_24A2A6C90();
}

uint64_t sub_24A1B0BA4()
{
  return sub_24A2A7F50();
}

uint64_t sub_24A1B0C0C()
{
  return sub_24A2A6C80() & 1;
}

uint64_t sub_24A1B0C70@<X0>(uint64_t __s1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, char *a4@<X8>)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  unint64_t v7 = (const void *)__s1;
  switch(a3 >> 62)
  {
    case 1uLL:
      uint64_t v9 = (a2 >> 32) - (int)a2;
      if (a2 >> 32 < (int)a2)
      {
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
      sub_24A1A52B0(a2, a3);
      uint64_t v10 = (char *)sub_24A2A68E0();
      if (!v10) {
        goto LABEL_8;
      }
      uint64_t v11 = sub_24A2A6910();
      if (__OFSUB__((int)a2, v11)) {
LABEL_33:
      }
        __break(1u);
      v10 += (int)a2 - v11;
LABEL_8:
      uint64_t v12 = sub_24A2A6900();
      if (v12 >= v9) {
        size_t v13 = (a2 >> 32) - (int)a2;
      }
      else {
        size_t v13 = v12;
      }
      if (!v7)
      {
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        JUMPOUT(0x24A1B0ED4);
      }
      if (!v10) {
        goto LABEL_36;
      }
      int v14 = memcmp(v7, v10, v13);
      __s1 = sub_24A1A5384(a2, a3);
      BOOL v8 = v14 == 0;
LABEL_24:
      char v24 = v8;
LABEL_29:
      *a4 = v24;
      return __s1;
    case 2uLL:
      uint64_t v15 = *(void *)(a2 + 16);
      uint64_t v16 = *(void *)(a2 + 24);
      swift_retain();
      swift_retain();
      BOOL v17 = (char *)sub_24A2A68E0();
      if (!v17) {
        goto LABEL_17;
      }
      uint64_t v18 = sub_24A2A6910();
      if (__OFSUB__(v15, v18)) {
        goto LABEL_32;
      }
      v17 += v15 - v18;
LABEL_17:
      BOOL v19 = __OFSUB__(v16, v15);
      int64_t v20 = v16 - v15;
      if (v19) {
        goto LABEL_31;
      }
      uint64_t v21 = sub_24A2A6900();
      if (v21 >= v20) {
        size_t v22 = v20;
      }
      else {
        size_t v22 = v21;
      }
      if (!v7) {
        goto LABEL_37;
      }
      if (!v17) {
        goto LABEL_38;
      }
      int v23 = memcmp(v7, v17, v22);
      swift_release();
      __s1 = swift_release();
      BOOL v8 = v23 == 0;
      goto LABEL_24;
    case 3uLL:
      if (!__s1) {
        goto LABEL_39;
      }
      char v24 = 1;
      goto LABEL_29;
    default:
      uint64_t __s2 = a2;
      __int16 v26 = a3;
      char v27 = BYTE2(a3);
      char v28 = BYTE3(a3);
      char v29 = BYTE4(a3);
      char v30 = BYTE5(a3);
      if (__s1)
      {
        __s1 = memcmp((const void *)__s1, &__s2, BYTE6(a3));
        BOOL v8 = __s1 == 0;
        goto LABEL_24;
      }
      __break(1u);
      goto LABEL_35;
  }
}

uint64_t sub_24A1B0EE4(uint64_t result)
{
  switch(result)
  {
    case 0:
    case 2:
      return result;
    case 1:
      BOOL result = 1;
      break;
    case 3:
      BOOL result = 2;
      break;
    case 4:
      BOOL result = 3;
      break;
    case 5:
      BOOL result = 4;
      break;
    default:
      if (result == 100) {
        BOOL result = 5;
      }
      break;
  }
  return result;
}

uint64_t sub_24A1B0F84(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = sub_24A2A6E10();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = ((uint64_t (*)(void))MEMORY[0x270FA5388])();
  BOOL v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v18 - v9;
  uint64_t v11 = *a1;
  if (*((unsigned char *)a1 + 8) == 1) {
    uint64_t v11 = qword_24A2A9948[v11];
  }
  uint64_t v12 = *a2;
  if (*((unsigned char *)a2 + 8))
  {
    switch(v12)
    {
      case 1:
        if (v11 == 1) {
          goto LABEL_8;
        }
        goto LABEL_6;
      case 2:
        if (v11 == 3) {
          goto LABEL_8;
        }
        goto LABEL_6;
      case 3:
        if (v11 == 4) {
          goto LABEL_8;
        }
        goto LABEL_6;
      case 4:
        if (v11 == 5) {
          goto LABEL_8;
        }
        goto LABEL_6;
      case 5:
        if (v11 == 6) {
          goto LABEL_8;
        }
        goto LABEL_6;
      case 6:
        if (v11 == 7) {
          goto LABEL_8;
        }
        goto LABEL_6;
      default:
        if (v11) {
          goto LABEL_6;
        }
        goto LABEL_8;
    }
  }
  if (v11 == v12)
  {
LABEL_8:
    uint64_t inserted = type metadata accessor for ATLogInsertResponse(0);
    uint64_t v15 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v15(v10, (char *)a1 + *(int *)(inserted + 20), v4);
    v15(v8, (char *)a2 + *(int *)(inserted + 20), v4);
    sub_24A1AE124(&qword_2697787D0, MEMORY[0x263F50560]);
    char v13 = sub_24A2A77E0();
    uint64_t v16 = *(void (**)(char *, uint64_t))(v5 + 8);
    v16(v8, v4);
    v16(v10, v4);
  }
  else
  {
LABEL_6:
    char v13 = 0;
  }
  return v13 & 1;
}

uint64_t sub_24A1B11E4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = sub_24A2A6E10();
  uint64_t v49 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v48 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v47 = (char *)&v43 - v7;
  uint64_t v8 = type metadata accessor for ATLogProofs(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v50 = (uint64_t)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_2697787E0);
  MEMORY[0x270FA5388](v11);
  char v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1742D8);
  uint64_t v15 = MEMORY[0x270FA5388](v14 - 8);
  BOOL v17 = (char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x270FA5388](v15);
  int64_t v20 = (char *)&v43 - v19;
  MEMORY[0x270FA5388](v18);
  size_t v22 = (char *)&v43 - v21;
  uint64_t v23 = *a1;
  if (*((unsigned char *)a1 + 8) == 1) {
    uint64_t v23 = qword_24A2A9948[v23];
  }
  uint64_t v24 = *a2;
  if (*((unsigned char *)a2 + 8))
  {
    switch(v24)
    {
      case 1:
        if (v23 != 1) {
          goto LABEL_31;
        }
        goto LABEL_8;
      case 2:
        if (v23 != 3) {
          goto LABEL_31;
        }
        goto LABEL_8;
      case 3:
        if (v23 != 4) {
          goto LABEL_31;
        }
        goto LABEL_8;
      case 4:
        if (v23 != 5) {
          goto LABEL_31;
        }
        goto LABEL_8;
      case 5:
        if (v23 != 6) {
          goto LABEL_31;
        }
        goto LABEL_8;
      case 6:
        if (v23 != 7) {
          goto LABEL_31;
        }
        goto LABEL_8;
      default:
        if (!v23) {
          goto LABEL_8;
        }
        goto LABEL_31;
    }
  }
  if (v23 != v24) {
    goto LABEL_31;
  }
LABEL_8:
  uint64_t v46 = v4;
  if (a1[2] == a2[2] && a1[3] == a2[3] || (char v25 = 0, (sub_24A2A7E40() & 1) != 0))
  {
    uint64_t v45 = v17;
    uint64_t v26 = v9;
    uint64_t v27 = type metadata accessor for ATLogProofResponse(0);
    sub_24A1B2CAC((uint64_t)a1 + *(int *)(v27 + 32), (uint64_t)v22, &qword_26B1742D8);
    uint64_t v44 = v27;
    sub_24A1B2CAC((uint64_t)a2 + *(int *)(v27 + 32), (uint64_t)v20, &qword_26B1742D8);
    uint64_t v28 = (uint64_t)&v13[*(int *)(v11 + 48)];
    sub_24A1B2CAC((uint64_t)v22, (uint64_t)v13, &qword_26B1742D8);
    sub_24A1B2CAC((uint64_t)v20, v28, &qword_26B1742D8);
    char v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v26 + 48);
    if (v29((uint64_t)v13, 1, v8) == 1)
    {
      sub_24A1B2D10((uint64_t)v20, &qword_26B1742D8);
      sub_24A1B2D10((uint64_t)v22, &qword_26B1742D8);
      if (v29(v28, 1, v8) == 1)
      {
        sub_24A1B2D10((uint64_t)v13, &qword_26B1742D8);
LABEL_18:
        if (a1[4] == a2[4])
        {
          uint64_t v33 = v44;
          uint64_t v34 = (uint64_t)a1 + *(int *)(v44 + 28);
          uint64_t v35 = v49;
          uint64_t v36 = *(void (**)(char *, uint64_t, uint64_t))(v49 + 16);
          uint64_t v37 = v46;
          uint64_t v38 = v47;
          v36(v47, v34, v46);
          uint64_t v39 = (uint64_t)a2 + *(int *)(v33 + 28);
          uint64_t v40 = v48;
          v36(v48, v39, v37);
          sub_24A1AE124(&qword_2697787D0, MEMORY[0x263F50560]);
          char v25 = sub_24A2A77E0();
          uint64_t v41 = *(void (**)(char *, uint64_t))(v35 + 8);
          v41(v40, v37);
          v41(v38, v37);
          return v25 & 1;
        }
LABEL_31:
        char v25 = 0;
        return v25 & 1;
      }
    }
    else
    {
      uint64_t v30 = (uint64_t)v45;
      sub_24A1B2CAC((uint64_t)v13, (uint64_t)v45, &qword_26B1742D8);
      if (v29(v28, 1, v8) != 1)
      {
        uint64_t v31 = v50;
        sub_24A1AEA30(v28, v50, type metadata accessor for ATLogProofs);
        char v32 = sub_24A1B234C(v30, v31);
        sub_24A1A7950(v31, type metadata accessor for ATLogProofs);
        sub_24A1B2D10((uint64_t)v20, &qword_26B1742D8);
        sub_24A1B2D10((uint64_t)v22, &qword_26B1742D8);
        sub_24A1A7950(v30, type metadata accessor for ATLogProofs);
        sub_24A1B2D10((uint64_t)v13, &qword_26B1742D8);
        if ((v32 & 1) == 0) {
          goto LABEL_31;
        }
        goto LABEL_18;
      }
      sub_24A1B2D10((uint64_t)v20, &qword_26B1742D8);
      sub_24A1B2D10((uint64_t)v22, &qword_26B1742D8);
      sub_24A1A7950(v30, type metadata accessor for ATLogProofs);
    }
    sub_24A1B2D10((uint64_t)v13, &qword_2697787E0);
    goto LABEL_31;
  }
  return v25 & 1;
}

uint64_t sub_24A1B17F4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = sub_24A2A6E10();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v22 - v9;
  uint64_t v11 = *a1;
  uint64_t v12 = *a2;
  if (*((unsigned char *)a1 + 8) == 1) {
    uint64_t v11 = qword_24A2A9980[v11];
  }
  if (*((unsigned char *)a2 + 8))
  {
    switch(v12)
    {
      case 1:
        if (v11 != 1) {
          goto LABEL_54;
        }
        goto LABEL_8;
      case 2:
        if (v11 != 2) {
          goto LABEL_54;
        }
        goto LABEL_8;
      case 3:
        if (v11 != 3) {
          goto LABEL_54;
        }
        goto LABEL_8;
      case 4:
        if (v11 != 999999999) {
          goto LABEL_54;
        }
        goto LABEL_8;
      default:
        if (!v11) {
          goto LABEL_8;
        }
        goto LABEL_54;
    }
  }
  if (v11 != v12) {
    goto LABEL_54;
  }
LABEL_8:
  uint64_t v13 = a1[2];
  uint64_t v14 = a2[2];
  if (*((unsigned char *)a2 + 24) == 1)
  {
    switch(v14)
    {
      case 1:
        if (v13 != 1) {
          goto LABEL_54;
        }
        goto LABEL_13;
      case 2:
        if (v13 != 2) {
          goto LABEL_54;
        }
        goto LABEL_13;
      case 3:
        if (v13 != 3) {
          goto LABEL_54;
        }
        goto LABEL_13;
      case 4:
        if (v13 != 4) {
          goto LABEL_54;
        }
        goto LABEL_13;
      case 5:
        if (v13 != 5) {
          goto LABEL_54;
        }
        goto LABEL_13;
      case 6:
        if (v13 != 6) {
          goto LABEL_54;
        }
        goto LABEL_13;
      default:
        if (!v13) {
          goto LABEL_13;
        }
        goto LABEL_54;
    }
  }
  if (v13 != v14) {
    goto LABEL_54;
  }
LABEL_13:
  uint64_t v15 = a1[4];
  if (*((unsigned char *)a1 + 40) == 1) {
    uint64_t v15 = qword_24A2A99A8[v15];
  }
  uint64_t v16 = a2[4];
  if (*((unsigned char *)a2 + 40))
  {
    switch(v16)
    {
      case 1:
        if (v15 != 1) {
          goto LABEL_54;
        }
        goto LABEL_20;
      case 2:
        if (v15 != 3) {
          goto LABEL_54;
        }
        goto LABEL_20;
      case 3:
        if (v15 != 4) {
          goto LABEL_54;
        }
        goto LABEL_20;
      case 4:
        if (v15 != 5) {
          goto LABEL_54;
        }
        goto LABEL_20;
      case 5:
        if (v15 != 100) {
          goto LABEL_54;
        }
        goto LABEL_20;
      default:
        if (!v15) {
          goto LABEL_20;
        }
        goto LABEL_54;
    }
  }
  if (v15 != v16) {
    goto LABEL_54;
  }
LABEL_20:
  if (a1[6] != a2[6]
    || (sub_24A1B7D80(a1[7], a1[8], a2[7], a2[8]) & 1) == 0
    || (sub_24A1B7D80(a1[9], a1[10], a2[9], a2[10]) & 1) == 0
    || (sub_24A1B7D80(a1[11], a1[12], a2[11], a2[12]) & 1) == 0)
  {
LABEL_54:
    char v19 = 0;
    return v19 & 1;
  }
  uint64_t inserted = type metadata accessor for ATLogInsertRequest(0);
  uint64_t v18 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
  v18(v10, (char *)a1 + *(int *)(inserted + 44), v4);
  v18(v8, (char *)a2 + *(int *)(inserted + 44), v4);
  sub_24A1AE124(&qword_2697787D0, MEMORY[0x263F50560]);
  char v19 = sub_24A2A77E0();
  int64_t v20 = *(void (**)(char *, uint64_t))(v5 + 8);
  v20(v8, v4);
  v20(v10, v4);
  return v19 & 1;
}

uint64_t sub_24A1B1BD0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = sub_24A2A6E10();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v20 - v9;
  uint64_t v11 = *a1;
  if (*((unsigned char *)a1 + 8) == 1) {
    uint64_t v11 = qword_24A2A9980[v11];
  }
  uint64_t v12 = *a2;
  if (*((unsigned char *)a2 + 8))
  {
    switch(v12)
    {
      case 1:
        if (v11 != 1) {
          goto LABEL_34;
        }
        goto LABEL_8;
      case 2:
        if (v11 != 2) {
          goto LABEL_34;
        }
        goto LABEL_8;
      case 3:
        if (v11 != 3) {
          goto LABEL_34;
        }
        goto LABEL_8;
      case 4:
        if (v11 != 999999999) {
          goto LABEL_34;
        }
        goto LABEL_8;
      default:
        if (!v11) {
          goto LABEL_8;
        }
        goto LABEL_34;
    }
  }
  if (v11 != v12) {
    goto LABEL_34;
  }
LABEL_8:
  uint64_t v13 = a1[2];
  uint64_t v14 = a2[2];
  if (*((unsigned char *)a2 + 24) == 1)
  {
    switch(v14)
    {
      case 1:
        if (v13 != 1) {
          goto LABEL_34;
        }
        goto LABEL_13;
      case 2:
        if (v13 != 2) {
          goto LABEL_34;
        }
        goto LABEL_13;
      case 3:
        if (v13 != 3) {
          goto LABEL_34;
        }
        goto LABEL_13;
      case 4:
        if (v13 != 4) {
          goto LABEL_34;
        }
        goto LABEL_13;
      case 5:
        if (v13 != 5) {
          goto LABEL_34;
        }
        goto LABEL_13;
      case 6:
        if (v13 != 6) {
          goto LABEL_34;
        }
        goto LABEL_13;
      default:
        if (!v13) {
          goto LABEL_13;
        }
        goto LABEL_34;
    }
  }
  if (v13 != v14)
  {
LABEL_34:
    char v17 = 0;
    return v17 & 1;
  }
LABEL_13:
  if ((sub_24A1B7D80(a1[4], a1[5], a2[4], a2[5]) & 1) == 0) {
    goto LABEL_34;
  }
  uint64_t v15 = type metadata accessor for ATLogProofRequest(0);
  uint64_t v16 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
  v16(v10, (char *)a1 + *(int *)(v15 + 28), v4);
  v16(v8, (char *)a2 + *(int *)(v15 + 28), v4);
  sub_24A1AE124(&qword_2697787D0, MEMORY[0x263F50560]);
  char v17 = sub_24A2A77E0();
  uint64_t v18 = *(void (**)(char *, uint64_t))(v5 + 8);
  v18(v8, v4);
  v18(v10, v4);
  return v17 & 1;
}

uint64_t sub_24A1B1ED0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A2A6E10();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v19 - v9;
  uint64_t v11 = *(int *)(type metadata accessor for LogConsistency(0) + 20);
  uint64_t v12 = *(void *)(a1 + v11);
  uint64_t v13 = *(void *)(a2 + v11);
  if (v12 == v13
    || (swift_retain(), swift_retain(), BOOL v14 = sub_24A1AC588(v12, v13), swift_release(), swift_release(), v14))
  {
    uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v15(v10, a1, v4);
    v15(v8, a2, v4);
    sub_24A1AE124(&qword_2697787D0, MEMORY[0x263F50560]);
    char v16 = sub_24A2A77E0();
    char v17 = *(void (**)(char *, uint64_t))(v5 + 8);
    v17(v8, v4);
    v17(v10, v4);
  }
  else
  {
    char v16 = 0;
  }
  return v16 & 1;
}

uint64_t sub_24A1B20BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A2A6E10();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v18 - v9;
  if ((sub_24A1B7D80(*(void *)a1, *(void *)(a1 + 8), *(void *)a2, *(void *)(a2 + 8)) & 1) == 0
    || (sub_24A1B7D80(*(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a2 + 16), *(void *)(a2 + 24)) & 1) == 0)
  {
    goto LABEL_22;
  }
  uint64_t v11 = *(void *)(a1 + 32);
  if (*(unsigned char *)(a1 + 40) == 1) {
    uint64_t v11 = qword_24A2A99A8[v11];
  }
  uint64_t v12 = *(void *)(a2 + 32);
  if (*(unsigned char *)(a2 + 40))
  {
    switch(v12)
    {
      case 1:
        if (v11 != 1) {
          goto LABEL_22;
        }
        goto LABEL_10;
      case 2:
        if (v11 != 3) {
          goto LABEL_22;
        }
        goto LABEL_10;
      case 3:
        if (v11 != 4) {
          goto LABEL_22;
        }
        goto LABEL_10;
      case 4:
        if (v11 != 5) {
          goto LABEL_22;
        }
        goto LABEL_10;
      case 5:
        if (v11 != 100) {
          goto LABEL_22;
        }
        goto LABEL_10;
      default:
        if (!v11) {
          goto LABEL_10;
        }
        goto LABEL_22;
    }
  }
  if (v11 != v12) {
    goto LABEL_22;
  }
LABEL_10:
  if ((sub_24A1B0810(*(void *)(a1 + 48), *(void *)(a2 + 48)) & 1) == 0
    || (sub_24A1AEB88(*(void **)(a1 + 56), *(void **)(a2 + 56)) & 1) == 0)
  {
LABEL_22:
    char v15 = 0;
    return v15 & 1;
  }
  uint64_t v13 = type metadata accessor for ATInsertData(0);
  BOOL v14 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v14(v10, a1 + *(int *)(v13 + 36), v4);
  v14(v8, a2 + *(int *)(v13 + 36), v4);
  sub_24A1AE124(&qword_2697787D0, MEMORY[0x263F50560]);
  char v15 = sub_24A2A77E0();
  char v16 = *(void (**)(char *, uint64_t))(v5 + 8);
  v16(v8, v4);
  v16(v10, v4);
  return v15 & 1;
}

uint64_t sub_24A1B234C(uint64_t a1, uint64_t a2)
{
  uint64_t v69 = a1;
  uint64_t v70 = a2;
  uint64_t v2 = sub_24A2A6E10();
  uint64_t v60 = *(void *)(v2 - 8);
  uint64_t v61 = v2;
  uint64_t v3 = MEMORY[0x270FA5388](v2);
  BOOL v59 = (char *)&v57 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  int v58 = (char *)&v57 - v5;
  uint64_t v6 = type metadata accessor for LogConsistency(0);
  uint64_t v65 = *(void *)(v6 - 8);
  uint64_t v66 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v57 = (uint64_t)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1745F0);
  MEMORY[0x270FA5388](v63);
  uint64_t v67 = (uint64_t)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1745E0);
  uint64_t v10 = MEMORY[0x270FA5388](v9 - 8);
  uint64_t v62 = (uint64_t)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v68 = (uint64_t)&v57 - v13;
  MEMORY[0x270FA5388](v12);
  uint64_t v64 = (uint64_t)&v57 - v14;
  uint64_t v15 = type metadata accessor for LogEntry(0);
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (uint64_t *)((char *)&v57 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174950);
  uint64_t v20 = v19 - 8;
  MEMORY[0x270FA5388](v19);
  uint64_t v22 = (char *)&v57 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174940);
  uint64_t v24 = MEMORY[0x270FA5388](v23 - 8);
  uint64_t v26 = (char *)&v57 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = MEMORY[0x270FA5388](v24);
  char v29 = (char *)&v57 - v28;
  MEMORY[0x270FA5388](v27);
  uint64_t v31 = (char *)&v57 - v30;
  uint64_t v32 = type metadata accessor for ATLogProofs(0);
  sub_24A1B2CAC(v69 + *(int *)(v32 + 20), (uint64_t)v31, &qword_26B174940);
  sub_24A1B2CAC(v70 + *(int *)(v32 + 20), (uint64_t)v29, &qword_26B174940);
  uint64_t v33 = (uint64_t)&v22[*(int *)(v20 + 56)];
  sub_24A1B2CAC((uint64_t)v31, (uint64_t)v22, &qword_26B174940);
  sub_24A1B2CAC((uint64_t)v29, v33, &qword_26B174940);
  uint64_t v34 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  if (v34((uint64_t)v22, 1, v15) != 1)
  {
    sub_24A1B2CAC((uint64_t)v22, (uint64_t)v26, &qword_26B174940);
    if (v34(v33, 1, v15) != 1)
    {
      sub_24A1AEA30(v33, (uint64_t)v18, type metadata accessor for LogEntry);
      char v37 = sub_24A22AE28(v26, v18);
      sub_24A1A7950((uint64_t)v18, type metadata accessor for LogEntry);
      sub_24A1B2D10((uint64_t)v29, &qword_26B174940);
      sub_24A1B2D10((uint64_t)v31, &qword_26B174940);
      sub_24A1A7950((uint64_t)v26, type metadata accessor for LogEntry);
      sub_24A1B2D10((uint64_t)v22, &qword_26B174940);
      if ((v37 & 1) == 0) {
        goto LABEL_15;
      }
      goto LABEL_8;
    }
    sub_24A1B2D10((uint64_t)v29, &qword_26B174940);
    sub_24A1B2D10((uint64_t)v31, &qword_26B174940);
    sub_24A1A7950((uint64_t)v26, type metadata accessor for LogEntry);
LABEL_6:
    uint64_t v35 = &qword_26B174950;
    uint64_t v36 = (uint64_t)v22;
LABEL_14:
    sub_24A1B2D10(v36, v35);
    goto LABEL_15;
  }
  sub_24A1B2D10((uint64_t)v29, &qword_26B174940);
  sub_24A1B2D10((uint64_t)v31, &qword_26B174940);
  if (v34(v33, 1, v15) != 1) {
    goto LABEL_6;
  }
  sub_24A1B2D10((uint64_t)v22, &qword_26B174940);
LABEL_8:
  uint64_t v38 = v69;
  uint64_t v39 = v64;
  sub_24A1B2CAC(v69 + *(int *)(v32 + 24), v64, &qword_26B1745E0);
  uint64_t v40 = v70;
  uint64_t v41 = v68;
  sub_24A1B2CAC(v70 + *(int *)(v32 + 24), v68, &qword_26B1745E0);
  uint64_t v42 = v67;
  uint64_t v43 = v67 + *(int *)(v63 + 48);
  sub_24A1B2CAC(v39, v67, &qword_26B1745E0);
  sub_24A1B2CAC(v41, v43, &qword_26B1745E0);
  uint64_t v44 = v66;
  uint64_t v45 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v65 + 48);
  if (v45(v42, 1, v66) == 1)
  {
    sub_24A1B2D10(v41, &qword_26B1745E0);
    sub_24A1B2D10(v39, &qword_26B1745E0);
    if (v45(v43, 1, v44) == 1)
    {
      sub_24A1B2D10(v42, &qword_26B1745E0);
LABEL_18:
      uint64_t v52 = v60;
      uint64_t v51 = v61;
      uint64_t v53 = *(void (**)(char *, uint64_t, uint64_t))(v60 + 16);
      uint64_t v54 = v58;
      v53(v58, v38, v61);
      uint64_t v55 = v59;
      v53(v59, v40, v51);
      sub_24A1AE124(&qword_2697787D0, MEMORY[0x263F50560]);
      char v47 = sub_24A2A77E0();
      char v56 = *(void (**)(char *, uint64_t))(v52 + 8);
      v56(v55, v51);
      v56(v54, v51);
      return v47 & 1;
    }
    goto LABEL_13;
  }
  uint64_t v46 = v62;
  sub_24A1B2CAC(v42, v62, &qword_26B1745E0);
  if (v45(v43, 1, v44) == 1)
  {
    sub_24A1B2D10(v68, &qword_26B1745E0);
    sub_24A1B2D10(v39, &qword_26B1745E0);
    sub_24A1A7950(v46, type metadata accessor for LogConsistency);
LABEL_13:
    uint64_t v35 = &qword_26B1745F0;
    uint64_t v36 = v42;
    goto LABEL_14;
  }
  uint64_t v49 = v57;
  sub_24A1AEA30(v43, v57, type metadata accessor for LogConsistency);
  char v50 = sub_24A1B1ED0(v46, v49);
  sub_24A1A7950(v49, type metadata accessor for LogConsistency);
  sub_24A1B2D10(v68, &qword_26B1745E0);
  sub_24A1B2D10(v39, &qword_26B1745E0);
  sub_24A1A7950(v46, type metadata accessor for LogConsistency);
  sub_24A1B2D10(v42, &qword_26B1745E0);
  if (v50) {
    goto LABEL_18;
  }
LABEL_15:
  char v47 = 0;
  return v47 & 1;
}

uint64_t sub_24A1B2B8C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

unint64_t sub_24A1B2BF0()
{
  unint64_t result = qword_269778800;
  if (!qword_269778800)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269778800);
  }
  return result;
}

uint64_t sub_24A1B2C44(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_24A1B2CAC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_24A1B2D10(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void type metadata accessor for CFDictionary(uint64_t a1)
{
}

void type metadata accessor for SecAccessControl(uint64_t a1)
{
}

void type metadata accessor for CFNumber(uint64_t a1)
{
}

void type metadata accessor for CFString(uint64_t a1)
{
}

void type metadata accessor for SecPolicy(uint64_t a1)
{
}

void sub_24A1B2DD0(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)unint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for Application(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for Application(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)unint64_t result = 0;
    *(unsigned char *)(result + 8) = 0;
    *(_DWORD *)unint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 9) = v3;
  return result;
}

uint64_t sub_24A1B2E80(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_24A1B2E9C(uint64_t result, int a2)
{
  if (a2)
  {
    *(void *)unint64_t result = (a2 - 1);
    *(unsigned char *)(result + 8) = 1;
  }
  else
  {
    *(unsigned char *)(result + 8) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for ATLogDataType()
{
  return &type metadata for ATLogDataType;
}

void *sub_24A1B2ECC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(void *)a1 = *a2;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    *(void *)(a1 + 16) = a2[2];
    *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
    *(void *)(a1 + 32) = a2[4];
    *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
    uint64_t v7 = a2[7];
    *(void *)(a1 + 48) = a2[6];
    unint64_t v8 = a2[8];
    sub_24A1A52B0(v7, v8);
    v4[7] = v7;
    v4[8] = v8;
    uint64_t v9 = a2[9];
    unint64_t v10 = a2[10];
    sub_24A1A52B0(v9, v10);
    v4[9] = v9;
    v4[10] = v10;
    uint64_t v11 = a2[11];
    unint64_t v12 = a2[12];
    sub_24A1A52B0(v11, v12);
    v4[11] = v11;
    v4[12] = v12;
    uint64_t v13 = *(int *)(a3 + 44);
    uint64_t v14 = (char *)v4 + v13;
    uint64_t v15 = (uint64_t)a2 + v13;
    uint64_t v16 = sub_24A2A6E10();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
  }
  return v4;
}

uint64_t sub_24A1B3014(uint64_t a1, uint64_t a2)
{
  sub_24A1A5384(*(void *)(a1 + 56), *(void *)(a1 + 64));
  sub_24A1A5384(*(void *)(a1 + 72), *(void *)(a1 + 80));
  sub_24A1A5384(*(void *)(a1 + 88), *(void *)(a1 + 96));
  uint64_t v4 = a1 + *(int *)(a2 + 44);
  uint64_t v5 = sub_24A2A6E10();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t sub_24A1B30A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  unint64_t v7 = *(void *)(a2 + 64);
  sub_24A1A52B0(v6, v7);
  *(void *)(a1 + 56) = v6;
  *(void *)(a1 + 64) = v7;
  uint64_t v8 = *(void *)(a2 + 72);
  unint64_t v9 = *(void *)(a2 + 80);
  sub_24A1A52B0(v8, v9);
  *(void *)(a1 + 72) = v8;
  *(void *)(a1 + 80) = v9;
  uint64_t v10 = *(void *)(a2 + 88);
  unint64_t v11 = *(void *)(a2 + 96);
  sub_24A1A52B0(v10, v11);
  *(void *)(a1 + 88) = v10;
  *(void *)(a1 + 96) = v11;
  uint64_t v12 = *(int *)(a3 + 44);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = sub_24A2A6E10();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
  return a1;
}

uint64_t sub_24A1B3198(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v6;
  uint64_t v7 = a2[2];
  *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
  *(void *)(a1 + 16) = v7;
  uint64_t v8 = a2[4];
  *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 48) = a2[6];
  uint64_t v9 = a2[7];
  unint64_t v10 = a2[8];
  sub_24A1A52B0(v9, v10);
  uint64_t v11 = *(void *)(a1 + 56);
  unint64_t v12 = *(void *)(a1 + 64);
  *(void *)(a1 + 56) = v9;
  *(void *)(a1 + 64) = v10;
  sub_24A1A5384(v11, v12);
  uint64_t v13 = a2[9];
  unint64_t v14 = a2[10];
  sub_24A1A52B0(v13, v14);
  uint64_t v15 = *(void *)(a1 + 72);
  unint64_t v16 = *(void *)(a1 + 80);
  *(void *)(a1 + 72) = v13;
  *(void *)(a1 + 80) = v14;
  sub_24A1A5384(v15, v16);
  uint64_t v17 = a2[11];
  unint64_t v18 = a2[12];
  sub_24A1A52B0(v17, v18);
  uint64_t v19 = *(void *)(a1 + 88);
  unint64_t v20 = *(void *)(a1 + 96);
  *(void *)(a1 + 88) = v17;
  *(void *)(a1 + 96) = v18;
  sub_24A1A5384(v19, v20);
  uint64_t v21 = *(int *)(a3 + 44);
  uint64_t v22 = a1 + v21;
  uint64_t v23 = (uint64_t)a2 + v21;
  uint64_t v24 = sub_24A2A6E10();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 24))(v22, v23, v24);
  return a1;
}

uint64_t sub_24A1B32A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  uint64_t v4 = *(int *)(a3 + 44);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  uint64_t v7 = sub_24A2A6E10();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t sub_24A1B336C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v6 = *(void *)(a2 + 64);
  uint64_t v7 = *(void *)(a1 + 56);
  unint64_t v8 = *(void *)(a1 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = v6;
  sub_24A1A5384(v7, v8);
  uint64_t v9 = *(void *)(a1 + 72);
  unint64_t v10 = *(void *)(a1 + 80);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  sub_24A1A5384(v9, v10);
  uint64_t v11 = *(void *)(a1 + 88);
  unint64_t v12 = *(void *)(a1 + 96);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  sub_24A1A5384(v11, v12);
  uint64_t v13 = *(int *)(a3 + 44);
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  uint64_t v16 = sub_24A2A6E10();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 40))(v14, v15, v16);
  return a1;
}

uint64_t sub_24A1B3454(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24A1B3468);
}

uint64_t sub_24A1B3468(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 12)
  {
    uint64_t v4 = *(void *)(a1 + 64) >> 60;
    if (((4 * v4) & 0xC) != 0) {
      return 16 - ((4 * v4) & 0xC | (v4 >> 2));
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = sub_24A2A6E10();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 44);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_24A1B3524(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24A1B3538);
}

uint64_t sub_24A1B3538(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 12)
  {
    *(void *)(result + 56) = 0;
    *(void *)(result + 64) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
  }
  else
  {
    uint64_t v7 = sub_24A2A6E10();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 44);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_24A1B35E8()
{
  uint64_t result = sub_24A2A6E10();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *sub_24A1B36A0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  char v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *char v3 = *a2;
    char v3 = (void *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(void *)a1 = *a2;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    uint64_t v5 = *(int *)(a3 + 20);
    uint64_t v6 = a1 + v5;
    uint64_t v7 = (uint64_t)a2 + v5;
    uint64_t v8 = sub_24A2A6E10();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t sub_24A1B3774(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 20);
  uint64_t v3 = sub_24A2A6E10();
  int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);

  return v4(v2, v3);
}

uint64_t sub_24A1B37DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = sub_24A2A6E10();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

uint64_t sub_24A1B3860(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v4;
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = (uint64_t)a2 + v5;
  uint64_t v8 = sub_24A2A6E10();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 24))(v6, v7, v8);
  return a1;
}

uint64_t sub_24A1B38E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = sub_24A2A6E10();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t sub_24A1B3968(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = sub_24A2A6E10();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t sub_24A1B39EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24A1B3A00);
}

uint64_t sub_24A1B3A00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + *(int *)(a3 + 20);
  uint64_t v5 = sub_24A2A6E10();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48);

  return v6(v4, a2, v5);
}

uint64_t sub_24A1B3A70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24A1B3A84);
}

uint64_t sub_24A1B3A84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1 + *(int *)(a4 + 20);
  uint64_t v6 = sub_24A2A6E10();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(v5, a2, a2, v6);
}

uint64_t sub_24A1B3AF8()
{
  uint64_t result = sub_24A2A6E10();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_24A1B3B90(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = v18 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v7 = *(void *)a2;
    unint64_t v8 = *(void *)(a2 + 8);
    sub_24A1A52B0(*(void *)a2, v8);
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v8;
    uint64_t v9 = *(void *)(a2 + 16);
    unint64_t v10 = *(void *)(a2 + 24);
    sub_24A1A52B0(v9, v10);
    *(void *)(a1 + 16) = v9;
    *(void *)(a1 + 24) = v10;
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
    uint64_t v11 = *(void *)(a2 + 48);
    uint64_t v12 = *(void *)(a2 + 56);
    uint64_t v13 = *(int *)(a3 + 36);
    uint64_t v14 = a1 + v13;
    uint64_t v15 = a2 + v13;
    *(void *)(a1 + 48) = v11;
    *(void *)(a1 + 56) = v12;
    uint64_t v16 = sub_24A2A6E10();
    uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v17(v14, v15, v16);
  }
  return a1;
}

uint64_t sub_24A1B3CC0(uint64_t a1, uint64_t a2)
{
  sub_24A1A5384(*(void *)a1, *(void *)(a1 + 8));
  sub_24A1A5384(*(void *)(a1 + 16), *(void *)(a1 + 24));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 36);
  uint64_t v5 = sub_24A2A6E10();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t sub_24A1B3D54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  sub_24A1A52B0(*(void *)a2, v7);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  uint64_t v8 = *(void *)(a2 + 16);
  unint64_t v9 = *(void *)(a2 + 24);
  sub_24A1A52B0(v8, v9);
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 24) = v9;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v10 = *(void *)(a2 + 48);
  uint64_t v11 = *(void *)(a2 + 56);
  uint64_t v12 = *(int *)(a3 + 36);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 56) = v11;
  uint64_t v15 = sub_24A2A6E10();
  uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v16(v13, v14, v15);
  return a1;
}

uint64_t sub_24A1B3E34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  sub_24A1A52B0(*(void *)a2, v7);
  uint64_t v8 = *(void *)a1;
  unint64_t v9 = *(void *)(a1 + 8);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  sub_24A1A5384(v8, v9);
  uint64_t v10 = *(void *)(a2 + 16);
  unint64_t v11 = *(void *)(a2 + 24);
  sub_24A1A52B0(v10, v11);
  uint64_t v12 = *(void *)(a1 + 16);
  unint64_t v13 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = v10;
  *(void *)(a1 + 24) = v11;
  sub_24A1A5384(v12, v13);
  uint64_t v14 = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 32) = v14;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v15 = *(int *)(a3 + 36);
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  uint64_t v18 = sub_24A2A6E10();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 24))(v16, v17, v18);
  return a1;
}

uint64_t sub_24A1B3F30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  uint64_t v5 = *(int *)(a3 + 36);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v8 = sub_24A2A6E10();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t sub_24A1B3FC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_24A1A5384(v6, v7);
  uint64_t v8 = *(void *)(a1 + 16);
  unint64_t v9 = *(void *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  sub_24A1A5384(v8, v9);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease();
  uint64_t v10 = *(int *)(a3 + 36);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = sub_24A2A6E10();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 40))(v11, v12, v13);
  return a1;
}

uint64_t sub_24A1B4094(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24A1B40A8);
}

uint64_t sub_24A1B40A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 48);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_24A2A6E10();
    unint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 36);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_24A1B4158(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24A1B416C);
}

uint64_t sub_24A1B416C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 48) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_24A2A6E10();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 36);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_24A1B4214()
{
  uint64_t result = sub_24A2A6E10();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_24A1B42CC()
{
  unint64_t result = qword_269778860;
  if (!qword_269778860)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269778860);
  }
  return result;
}

unint64_t sub_24A1B4324()
{
  unint64_t result = qword_269778868;
  if (!qword_269778868)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_269778870);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269778868);
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_24A1B43C8()
{
  return sub_24A1AE124(&qword_269778878, type metadata accessor for CFString);
}

uint64_t sub_24A1B4410()
{
  return sub_24A1AE124(&qword_269778880, type metadata accessor for CFString);
}

unint64_t sub_24A1B445C()
{
  unint64_t result = qword_269778888;
  if (!qword_269778888)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269778888);
  }
  return result;
}

unint64_t sub_24A1B44B4()
{
  unint64_t result = qword_269778890;
  if (!qword_269778890)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269778890);
  }
  return result;
}

SecTrustRef sub_24A1B4508(uint64_t a1)
{
  v16[1] = *(SecTrustRef *)MEMORY[0x263EF8340];
  unint64_t v1 = MEMORY[0x263F8EE78];
  v16[0] = (SecTrustRef)MEMORY[0x263F8EE78];
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    uint64_t v3 = (unint64_t *)(swift_bridgeObjectRetain() + 40);
    uint64_t v4 = v2;
    do
    {
      uint64_t v5 = *(v3 - 1);
      unint64_t v6 = *v3;
      sub_24A1A52B0(v5, *v3);
      CFDataRef v7 = (const __CFData *)sub_24A2A6AA0();
      SecCertificateRef v8 = SecCertificateCreateWithData(0, v7);

      uint64_t v9 = sub_24A1A5384(v5, v6);
      if (v8)
      {
        MEMORY[0x24C5BF1B0](v9);
        if (*(void *)(((unint64_t)v16[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)v16[0] & 0xFFFFFFFFFFFFFF8)
                                                                                               + 0x18) >> 1)
          sub_24A2A7A50();
        sub_24A2A7A80();
        sub_24A2A7A40();
      }
      v3 += 2;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
    unint64_t v1 = (unint64_t)v16[0];
  }
  if (!(v1 >> 62))
  {
    if (*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10) == v2) {
      goto LABEL_11;
    }
LABEL_14:
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRetain();
  uint64_t v14 = sub_24A2A7D30();
  swift_bridgeObjectRelease();
  if (v14 != v2) {
    goto LABEL_14;
  }
LABEL_11:
  v16[0] = 0;
  type metadata accessor for SecCertificate(0);
  uint64_t v10 = (void *)sub_24A2A7A20();
  type metadata accessor for SecPolicy(0);
  uint64_t v11 = (void *)sub_24A2A7A20();
  OSStatus v12 = SecTrustCreateWithCertificates(v10, v11, v16);

  SecTrustRef v13 = v16[0];
  swift_bridgeObjectRelease();
  if (v12)
  {

    return 0;
  }
  return v13;
}

void SEP.SealedHash.flags.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t SEP.SealedHash.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for SEP.SealedHash(0) + 20);

  return sub_24A1B4780(v3, a1);
}

uint64_t type metadata accessor for SEP.SealedHash(uint64_t a1)
{
  return sub_24A1AE704(a1, (uint64_t *)&unk_26B1748A8);
}

uint64_t sub_24A1B4780(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SEP.SealedHash.Value(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for SEP.SealedHash.Value(uint64_t a1)
{
  return sub_24A1AE704(a1, (uint64_t *)&unk_26B174898);
}

uint64_t SEP.SealedHash.data.getter()
{
  uint64_t v1 = sub_24A2A71D0();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_24A2A7390();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  SecCertificateRef v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for SEP.SealedHash.Value(0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for SEP.SealedHash(0);
  sub_24A1B4780(v0 + *(int *)(v12 + 20), (uint64_t)v11);
  if (swift_getEnumCaseMultiPayload()) {
    return *(void *)v11;
  }
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v11, v5);
  sub_24A2A7370();
  uint64_t v18 = v1;
  unint64_t v19 = sub_24A1B4D30();
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v17);
  (*(void (**)(uint64_t *, char *, uint64_t))(v2 + 16))(boxed_opaque_existential_1, v4, v1);
  __swift_project_boxed_opaque_existential_1(v17, v18);
  sub_24A2A6960();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  uint64_t v13 = v16[1];
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return v13;
}

uint64_t sub_24A1B4AA0()
{
  uint64_t v1 = sub_24A2A71D0();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_24A2A7390();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  SecCertificateRef v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for SEP.SealedHash.Value(0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24A1B4780(v0, (uint64_t)v11);
  if (swift_getEnumCaseMultiPayload()) {
    return *(void *)v11;
  }
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v11, v5);
  sub_24A2A7370();
  uint64_t v17 = v1;
  unint64_t v18 = sub_24A1B4D30();
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v16);
  (*(void (**)(uint64_t *, char *, uint64_t))(v2 + 16))(boxed_opaque_existential_1, v4, v1);
  __swift_project_boxed_opaque_existential_1(v16, v17);
  sub_24A2A6960();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  uint64_t v12 = v15[1];
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return v12;
}

unint64_t sub_24A1B4D30()
{
  unint64_t result = qword_26B174A00;
  if (!qword_26B174A00)
  {
    sub_24A2A71D0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B174A00);
  }
  return result;
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

void *__swift_project_boxed_opaque_existential_1(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t SEP.SealedHash.init<A, B>(ratchet:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned char *a6@<X8>)
{
  uint64_t v41 = a5;
  uint64_t v39 = a4;
  uint64_t v35 = a1;
  uint64_t v32 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v40 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_24A2A7B50();
  uint64_t v12 = MEMORY[0x270FA5388](v11 - 8);
  uint64_t v14 = (char *)&v31 - v13;
  uint64_t v15 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v17 = (char *)&v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v33 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  unint64_t v20 = (char *)&v31 - v19;
  *a6 = byte_26FDFBD40;
  type metadata accessor for SEP.SealedHash(0);
  uint64_t v42 = a6;
  sub_24A2A7380();
  type metadata accessor for SEP.SealedHash.Value(0);
  swift_storeEnumTagMultiPayload();
  uint64_t v34 = v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, v35, a2);
  sub_24A2A7960();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  sub_24A2A7B60();
  uint64_t v21 = v32;
  uint64_t v36 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48);
  if (v36(v14, 1, a3) == 1)
  {
    (*(void (**)(char *, uint64_t))(v33 + 8))(v20, AssociatedTypeWitness);
    sub_24A1B7964();
    swift_allocError();
    *(_DWORD *)uint64_t v22 = 2;
    *(unsigned char *)(v22 + 4) = 1;
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v35, a2);
  }
  else
  {
    uint64_t v38 = v20;
    uint64_t v39 = AssociatedTypeWitness;
    uint64_t v31 = a2;
    uint64_t v25 = *(void (**)(char *, char *, uint64_t))(v21 + 32);
    uint64_t v23 = v21 + 32;
    uint64_t v24 = v25;
    while (1)
    {
      uint64_t v26 = v23;
      v24(v40, v14, a3);
      uint64_t v27 = sub_24A2A6B20();
      unint64_t v29 = v28;
      unsigned __int8 v43 = 0;
      SEP.SealedHash.ratchet(digest:flags:)(v27, v28, &v43);
      if (v6) {
        break;
      }
      sub_24A1A5384(v27, v29);
      sub_24A2A7B60();
      uint64_t v23 = v26;
      if (v36(v14, 1, a3) == 1)
      {
        (*(void (**)(char *, uint64_t))(v33 + 8))(v38, v39);
        return (*(uint64_t (**)(uint64_t, uint64_t))(v34 + 8))(v35, v31);
      }
    }
    sub_24A1A5384(v27, v29);
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v35, v31);
    (*(void (**)(char *, uint64_t))(v33 + 8))(v38, v39);
  }
  return sub_24A1B79B8((uint64_t)v42, type metadata accessor for SEP.SealedHash);
}

uint64_t sub_24A1B52A8(uint64_t a1, unint64_t a2)
{
  v28[5] = *MEMORY[0x263EF8340];
  v28[3] = MEMORY[0x263F06F70];
  v28[4] = MEMORY[0x263F06F60];
  v28[0] = a1;
  v28[1] = a2;
  uint64_t v4 = __swift_project_boxed_opaque_existential_1(v28, MEMORY[0x263F06F70]);
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  switch(v6 >> 62)
  {
    case 1uLL:
      if (v5 >> 32 < (int)v5)
      {
        __break(1u);
LABEL_29:
        __break(1u);
LABEL_30:
        __break(1u);
        goto LABEL_31;
      }
      sub_24A1A52B0(a1, a2);
      sub_24A1A52B0(v5, v6);
      SecCertificateRef v8 = (unsigned char *)sub_24A2A68E0();
      if (v8)
      {
        uint64_t v9 = sub_24A2A6910();
        if (!__OFSUB__((int)v5, v9))
        {
          v8 += (int)v5 - v9;
          goto LABEL_7;
        }
LABEL_31:
        __break(1u);
      }
LABEL_7:
      uint64_t v10 = sub_24A2A6900();
      if (v10 >= (v5 >> 32) - (int)v5) {
        uint64_t v11 = (v5 >> 32) - (int)v5;
      }
      else {
        uint64_t v11 = v10;
      }
      uint64_t v12 = &v8[v11];
      if (v8) {
        uint64_t v13 = v12;
      }
      else {
        uint64_t v13 = 0;
      }
      sub_24A1B789C(v8, v13, &v27);
      sub_24A1A5384(v5, v6);
LABEL_27:
      sub_24A1A5384(a1, a2);
      uint64_t v24 = v27;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
      return v24;
    case 2uLL:
      uint64_t v14 = *(void *)(v5 + 16);
      uint64_t v15 = *(void *)(v5 + 24);
      sub_24A1A52B0(a1, a2);
      swift_retain();
      swift_retain();
      uint64_t v16 = (unsigned char *)sub_24A2A68E0();
      if (!v16) {
        goto LABEL_17;
      }
      uint64_t v17 = sub_24A2A6910();
      if (__OFSUB__(v14, v17)) {
        goto LABEL_30;
      }
      v16 += v14 - v17;
LABEL_17:
      BOOL v18 = __OFSUB__(v15, v14);
      uint64_t v19 = v15 - v14;
      if (v18) {
        goto LABEL_29;
      }
      uint64_t v20 = sub_24A2A6900();
      if (v20 >= v19) {
        uint64_t v21 = v19;
      }
      else {
        uint64_t v21 = v20;
      }
      uint64_t v22 = &v16[v21];
      if (v16) {
        uint64_t v23 = v22;
      }
      else {
        uint64_t v23 = 0;
      }
      sub_24A1B789C(v16, v23, &v27);
      swift_release();
      swift_release();
      goto LABEL_27;
    case 3uLL:
      memset(v26, 0, 14);
      sub_24A1A52B0(a1, a2);
      uint64_t v7 = v26;
      goto LABEL_26;
    default:
      v26[0] = *v4;
      LOWORD(v26[1]) = v6;
      BYTE2(v26[1]) = BYTE2(v6);
      BYTE3(v26[1]) = BYTE3(v6);
      BYTE4(v26[1]) = BYTE4(v6);
      BYTE5(v26[1]) = BYTE5(v6);
      sub_24A1A52B0(a1, a2);
      uint64_t v7 = (char *)v26 + BYTE6(v6);
LABEL_26:
      sub_24A1B789C(v26, v7, &v27);
      goto LABEL_27;
  }
}

uint64_t sub_24A1B555C(uint64_t a1, unint64_t a2)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  uint64_t v53 = a1;
  unint64_t v54 = a2;
  *(void *)&long long v48 = a1;
  *((void *)&v48 + 1) = a2;
  sub_24A1A52B0(a1, a2);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B174B10);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B1741F8);
  if (swift_dynamicCast())
  {
    sub_24A1B97D8(v46, (uint64_t)&v49);
    __swift_project_boxed_opaque_existential_1(&v49, v52);
    sub_24A2A6960();
    sub_24A1A5384(v53, v54);
    v46[0] = v48;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v49);
  }
  else
  {
    uint64_t v47 = 0;
    memset(v46, 0, sizeof(v46));
    sub_24A1B9720((uint64_t)v46);
    uint64_t v2 = 0;
    uint64_t v3 = 0;
    switch(v54 >> 62)
    {
      case 1uLL:
        uint64_t v3 = v53 >> 32;
        uint64_t v2 = (int)v53;
        break;
      case 2uLL:
        uint64_t v2 = *(void *)(v53 + 16);
        uint64_t v3 = *(void *)(v53 + 24);
        break;
      case 3uLL:
        break;
      default:
        uint64_t v2 = 0;
        uint64_t v3 = BYTE6(v54);
        break;
    }
    uint64_t v4 = sub_24A25210C(v2, v3, v53, v54);
    *(void *)&v46[0] = sub_24A1B94D4(v4);
    *((void *)&v46[0] + 1) = v5;
    MEMORY[0x270FA5388](*(void *)&v46[0]);
    sub_24A2519C4(sub_24A1B9780);
    uint64_t v6 = v49;
    unint64_t v40 = v50;
    uint64_t v8 = v51;
    uint64_t v7 = v52;
    BYTE6(v9) = BYTE14(v46[0]);
    uint64_t v10 = *((void *)&v46[0] + 1) >> 62;
    switch(*((void *)&v46[0] + 1) >> 62)
    {
      case 1:
        LODWORD(v11) = DWORD1(v46[0]) - LODWORD(v46[0]);
        if (__OFSUB__(DWORD1(v46[0]), v46[0])) {
          goto LABEL_62;
        }
        uint64_t v11 = (int)v11;
LABEL_12:
        if (v52 == v11)
        {
LABEL_18:
          unsigned __int8 v16 = 0;
          unint64_t v17 = v50 >> 62;
          uint64_t v39 = (uint64_t)v49 >> 32;
          uint64_t v41 = &v45;
          *(void *)((char *)&v48 + 7) = 0;
          *(void *)&long long v48 = 0;
          unint64_t v38 = v49 >> 8;
          unint64_t v37 = v49 >> 16;
          unint64_t v36 = v49 >> 24;
          unint64_t v35 = HIDWORD(v49);
          unint64_t v34 = v49 >> 40;
          unint64_t v33 = HIWORD(v49);
          unint64_t v32 = HIBYTE(v49);
          unint64_t v31 = v50 >> 8;
          unint64_t v30 = v50 >> 16;
          unint64_t v29 = v50 >> 24;
          unint64_t v9 = (unint64_t)&v53;
          unint64_t v28 = HIDWORD(v50);
          unint64_t v27 = v50 >> 40;
          uint64_t v26 = v51;
          unint64_t v18 = v50 >> 62;
          while (1)
          {
            uint64_t v19 = (int)v6;
            switch(v18)
            {
              case 1uLL:
                goto LABEL_25;
              case 2uLL:
                uint64_t v19 = *(void *)(v6 + 16);
LABEL_25:
                if (v8 == v19) {
                  goto LABEL_50;
                }
                BOOL v14 = __OFSUB__(v8--, 1);
                if (v14) {
                  goto LABEL_53;
                }
                if (v17 == 2)
                {
                  if (v8 < *(void *)(v6 + 16)) {
                    goto LABEL_56;
                  }
                  if (v8 >= *(void *)(v6 + 24)) {
                    goto LABEL_58;
                  }
                  uint64_t v21 = sub_24A2A68E0();
                  if (!v21) {
                    goto LABEL_64;
                  }
                  uint64_t v22 = v21;
                  uint64_t v7 = sub_24A2A6910();
                  uint64_t v23 = v8 - v7;
                  if (__OFSUB__(v8, v7)) {
                    goto LABEL_60;
                  }
                }
                else
                {
                  if (v8 < (int)v6 || v8 >= v39) {
                    goto LABEL_57;
                  }
                  uint64_t v24 = sub_24A2A68E0();
                  if (!v24) {
                    goto LABEL_65;
                  }
                  uint64_t v22 = v24;
                  uint64_t v7 = sub_24A2A6910();
                  uint64_t v23 = v8 - v7;
                  if (__OFSUB__(v8, v7)) {
                    goto LABEL_59;
                  }
                }
                char v20 = *(unsigned char *)(v22 + v23);
                goto LABEL_39;
              case 3uLL:
                if (!v26) {
                  goto LABEL_48;
                }
                __break(1u);
                goto LABEL_44;
              default:
                if (!v8)
                {
LABEL_50:
                  if (v16)
                  {
                    uint64_t v42 = v48;
                    int v43 = DWORD2(v48);
                    __int16 v44 = WORD6(v48);
                    sub_24A2A6A70();
                  }
                  goto LABEL_48;
                }
                BOOL v14 = __OFSUB__(v8--, 1);
                if (v14) {
                  goto LABEL_54;
                }
                if (v8 >= BYTE6(v40)) {
                  goto LABEL_55;
                }
                LOBYTE(v42) = v6;
                BYTE1(v42) = v38;
                BYTE2(v42) = v37;
                BYTE3(v42) = v36;
                BYTE4(v42) = v35;
                BYTE5(v42) = v34;
                BYTE6(v42) = v33;
                HIBYTE(v42) = v32;
                LOBYTE(v43) = v40;
                BYTE1(v43) = v31;
                BYTE2(v43) = v30;
                HIBYTE(v43) = v29;
                LOBYTE(v44) = v28;
                HIBYTE(v44) = v27;
                char v20 = *((unsigned char *)&v42 + v8);
LABEL_39:
                unint64_t v9 = v16;
                *((unsigned char *)&v48 + v16++) = v20;
                if (((v9 + 1) >> 8))
                {
                  __break(1u);
LABEL_53:
                  __break(1u);
LABEL_54:
                  __break(1u);
LABEL_55:
                  __break(1u);
LABEL_56:
                  __break(1u);
LABEL_57:
                  __break(1u);
LABEL_58:
                  __break(1u);
LABEL_59:
                  __break(1u);
LABEL_60:
                  __break(1u);
LABEL_61:
                  __break(1u);
LABEL_62:
                  __break(1u);
LABEL_63:
                  __break(1u);
LABEL_64:
                  __break(1u);
LABEL_65:
                  __break(1u);
                }
                if (v16 == 14)
                {
                  uint64_t v42 = v48;
                  int v43 = DWORD2(v48);
                  __int16 v44 = WORD6(v48);
                  uint64_t v7 = sub_24A2A6A70();
                  unsigned __int8 v16 = 0;
                }
                break;
            }
          }
        }
        if (v10)
        {
          if (v10 == 1) {
            uint64_t v15 = *(uint64_t *)&v46[0] >> 32;
          }
          else {
            uint64_t v15 = *(void *)(*(void *)&v46[0] + 24);
          }
        }
        else
        {
LABEL_44:
          uint64_t v15 = BYTE6(v9);
        }
LABEL_46:
        if (v15 < v7) {
          goto LABEL_61;
        }
        sub_24A2A6A60();
LABEL_48:
        sub_24A1A5384(v6, v40);
        sub_24A1A5384(v53, v54);
        break;
      case 2:
        uint64_t v13 = *(void *)(*(void *)&v46[0] + 16);
        uint64_t v12 = *(void *)(*(void *)&v46[0] + 24);
        BOOL v14 = __OFSUB__(v12, v13);
        uint64_t v11 = v12 - v13;
        if (!v14) {
          goto LABEL_12;
        }
        goto LABEL_63;
      case 3:
        if (!v52) {
          goto LABEL_18;
        }
        uint64_t v15 = 0;
        goto LABEL_46;
      default:
        uint64_t v11 = BYTE14(v46[0]);
        goto LABEL_12;
    }
  }
  return *(void *)&v46[0];
}

uint64_t SEP.SealedHash.ratchet(digest:flags:)(uint64_t a1, unint64_t a2, unsigned __int8 *a3)
{
  v36[2] = *MEMORY[0x263EF8340];
  uint64_t v35 = type metadata accessor for SEP.SealedHash.Value(0);
  MEMORY[0x270FA5388](v35);
  uint64_t v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = sub_24A2A7390();
  MEMORY[0x270FA5388](v34);
  uint64_t v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v12 = *a3;
  uint64_t v13 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
      }
      uint64_t v13 = HIDWORD(a1) - (int)a1;
LABEL_6:
      uint64_t v16 = a1;
      uint64_t v17 = v9;
      if (sub_24A2A71C0() < v13)
      {
        sub_24A1B7964();
        swift_allocError();
        *(_DWORD *)uint64_t v18 = 1;
LABEL_12:
        *(unsigned char *)(v18 + 4) = 1;
        return swift_willThrow();
      }
      char v19 = *v3;
      if ((*v3 & 6) != 2) {
        goto LABEL_11;
      }
      int v32 = v12;
      uint64_t v20 = (uint64_t)&v3[*(int *)(type metadata accessor for SEP.SealedHash(0) + 20)];
      sub_24A1B4780(v20, (uint64_t)v8);
      if (swift_getEnumCaseMultiPayload())
      {
        sub_24A1B79B8((uint64_t)v8, type metadata accessor for SEP.SealedHash.Value);
LABEL_11:
        sub_24A1B7964();
        swift_allocError();
        *(_DWORD *)uint64_t v18 = 0;
        goto LABEL_12;
      }
      uint64_t v30 = v20;
      uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
      uint64_t v23 = v8;
      uint64_t v24 = v34;
      uint64_t v31 = v17 + 32;
      v22(v11, v23, v34);
      if ((v32 & 4) != 0) {
        *uint64_t v3 = v19 | 4;
      }
      switch(a2 >> 62)
      {
        case 1uLL:
          if (v16 >> 32 < (int)v16) {
            goto LABEL_28;
          }
          sub_24A1A52B0(v16, a2);
          sub_24A1B7A70((int)v16, v16 >> 32);
LABEL_24:
          sub_24A1A5384(v16, a2);
          uint64_t v24 = v34;
          break;
        case 2uLL:
          uint64_t v25 = *(void *)(v16 + 16);
          uint64_t v26 = *(void *)(v16 + 24);
          sub_24A1A52B0(v16, a2);
          swift_retain();
          swift_retain();
          uint64_t v27 = v33;
          sub_24A1B7A70(v25, v26);
          if (v27)
          {
            swift_release();
            swift_release();
            __break(1u);
            JUMPOUT(0x24A1B6024);
          }
          swift_release();
          swift_release();
          goto LABEL_24;
        case 3uLL:
          sub_24A1B7B20();
          memset(v36, 0, 14);
          goto LABEL_21;
        default:
          v36[0] = v16;
          LOWORD(v36[1]) = a2;
          BYTE2(v36[1]) = BYTE2(a2);
          BYTE3(v36[1]) = BYTE3(a2);
          BYTE4(v36[1]) = BYTE4(a2);
          BYTE5(v36[1]) = BYTE5(a2);
          sub_24A1B7B20();
LABEL_21:
          sub_24A2A7170();
          sub_24A1A5384(v16, a2);
          break;
      }
      uint64_t v28 = v30;
      sub_24A1B79B8(v30, type metadata accessor for SEP.SealedHash.Value);
      v22((char *)v28, v11, v24);
      return swift_storeEnumTagMultiPayload();
    case 2uLL:
      uint64_t v15 = *(void *)(a1 + 16);
      uint64_t v14 = *(void *)(a1 + 24);
      uint64_t v13 = v14 - v15;
      if (!__OFSUB__(v14, v15)) {
        goto LABEL_6;
      }
      goto LABEL_27;
    case 3uLL:
      goto LABEL_6;
    default:
      uint64_t v13 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t SEP.SealedHash.init(entry:)@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *(void *)a1;
  unint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  unint64_t v6 = *(void *)(a1 + 24);
  char v8 = *(unsigned char *)(a1 + 32);
  sub_24A1A52B0(v3, v4);
  SEP.SealedHash.init(digest:flags:)(v3, v4, &v8, a2);
  sub_24A1A5384(v3, v4);
  return sub_24A1B7B78(v5, v6);
}

uint64_t SEP.SealedHash.init(digest:flags:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, char *a3@<X2>, unsigned char *a4@<X8>)
{
  v23[3] = *MEMORY[0x263EF8340];
  uint64_t v9 = sub_24A2A7390();
  MEMORY[0x270FA5388](v9);
  int v12 = (char *)v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v13 = *a3;
  uint64_t v14 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_21:
        __break(1u);
LABEL_22:
        __break(1u);
      }
      uint64_t v14 = HIDWORD(a1) - (int)a1;
LABEL_6:
      v23[0] = v10;
      if (sub_24A2A71C0() >= v14)
      {
        *a4 = v13;
        if ((v13 & 2) != 0)
        {
          sub_24A2A7380();
          switch(a2 >> 62)
          {
            case 1uLL:
              if (a1 >> 32 < (int)a1) {
                goto LABEL_22;
              }
              sub_24A1A52B0(a1, a2);
              sub_24A1B7A70((int)a1, a1 >> 32);
              break;
            case 2uLL:
              uint64_t v20 = *(void *)(a1 + 16);
              uint64_t v21 = *(void *)(a1 + 24);
              sub_24A1A52B0(a1, a2);
              swift_retain();
              swift_retain();
              sub_24A1B7A70(v20, v21);
              if (v4)
              {
                swift_release();
                swift_release();
                __break(1u);
                JUMPOUT(0x24A1B64A0);
              }
              swift_release();
              swift_release();
              break;
            case 3uLL:
              sub_24A1B7B20();
              memset(&v23[1], 0, 14);
              goto LABEL_15;
            default:
              v23[1] = a1;
              LOWORD(v23[2]) = a2;
              BYTE2(v23[2]) = BYTE2(a2);
              BYTE3(v23[2]) = BYTE3(a2);
              BYTE4(v23[2]) = BYTE4(a2);
              BYTE5(v23[2]) = BYTE5(a2);
              sub_24A1B7B20();
LABEL_15:
              sub_24A2A7170();
              break;
          }
          sub_24A1A5384(a1, a2);
          sub_24A1A5384(a1, a2);
          uint64_t v22 = type metadata accessor for SEP.SealedHash(0);
          (*(void (**)(unsigned char *, char *, uint64_t))(v23[0] + 32))(&a4[*(int *)(v22 + 20)], v12, v9);
          type metadata accessor for SEP.SealedHash.Value(0);
        }
        else
        {
          char v19 = (uint64_t *)&a4[*(int *)(type metadata accessor for SEP.SealedHash(0) + 20)];
          uint64_t *v19 = a1;
          v19[1] = a2;
          type metadata accessor for SEP.SealedHash.Value(0);
        }
        return swift_storeEnumTagMultiPayload();
      }
      else
      {
        sub_24A1B7964();
        swift_allocError();
        *(_DWORD *)uint64_t v17 = 1;
        *(unsigned char *)(v17 + 4) = 1;
        swift_willThrow();
        return sub_24A1A5384(a1, a2);
      }
    case 2uLL:
      uint64_t v16 = *(void *)(a1 + 16);
      uint64_t v15 = *(void *)(a1 + 24);
      uint64_t v14 = v15 - v16;
      if (!__OFSUB__(v15, v16)) {
        goto LABEL_6;
      }
      goto LABEL_21;
    case 3uLL:
      goto LABEL_6;
    default:
      uint64_t v14 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t SEP.SealedHash.init<A>(entries:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v9 = type metadata accessor for SEP.SealedHash(0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = a3;
  uint64_t v13 = sub_24A1B67EC((void (*)(char *, char *))sub_24A1B67B8, 0, a2, MEMORY[0x263F06F70], MEMORY[0x263F8E628], a3, MEMORY[0x263F8E658], v12);
  unsigned char *v11 = byte_26FDFBD18;
  sub_24A2A7380();
  type metadata accessor for SEP.SealedHash.Value(0);
  swift_storeEnumTagMultiPayload();
  uint64_t v14 = *(void *)(v13 + 16);
  if (v14)
  {
    uint64_t v26 = (unsigned char *)a4;
    uint64_t v27 = a1;
    swift_bridgeObjectRetain();
    for (i = (unint64_t *)(v13 + 40); ; i += 2)
    {
      uint64_t v17 = *(i - 1);
      unint64_t v16 = *i;
      sub_24A1A52B0(v17, *i);
      uint64_t v18 = sub_24A1B52A8(v17, v16);
      unint64_t v20 = v19;
      unsigned __int8 v31 = 0;
      SEP.SealedHash.ratchet(digest:flags:)(v18, v19, &v31);
      if (v4) {
        break;
      }
      sub_24A1A5384(v18, v20);
      if (!--v14)
      {
        swift_bridgeObjectRelease_n();
        uint64_t v21 = v26;
        sub_24A1B7B8C((uint64_t)v11, (uint64_t)v26);
        char v29 = 0;
        uint64_t v22 = v27;
        sub_24A2A79B0();
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(v22, a2);
        *uint64_t v21 = v30;
        return result;
      }
    }
    sub_24A1A5384(v18, v20);
    swift_bridgeObjectRelease_n();
    sub_24A1B79B8((uint64_t)v11, type metadata accessor for SEP.SealedHash);
    a1 = v27;
  }
  else
  {
    sub_24A1B7964();
    swift_allocError();
    *(_DWORD *)uint64_t v24 = 2;
    *(unsigned char *)(v24 + 4) = 1;
    swift_willThrow();
    swift_bridgeObjectRelease();
    sub_24A1B79B8((uint64_t)v11, type metadata accessor for SEP.SealedHash);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
}

uint64_t sub_24A1B67B8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  unint64_t v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return sub_24A1A52B0(v3, v2);
}

uint64_t sub_24A1B67EC(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v43 = a8;
  uint64_t v44 = a5;
  uint64_t v9 = v8;
  uint64_t v58 = a2;
  BOOL v59 = a4;
  uint64_t v57 = a1;
  uint64_t v42 = *(void *)(a5 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](a1);
  uint64_t v55 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v53 = (char *)&v40 - v13;
  uint64_t v15 = v14;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v54 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v41 = (char *)&v40 - v17;
  uint64_t v18 = sub_24A2A7B50();
  uint64_t v45 = *(void *)(v18 - 8);
  uint64_t v46 = v18;
  uint64_t v19 = MEMORY[0x270FA5388](v18);
  uint64_t v51 = (char *)&v40 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = MEMORY[0x270FA5388](v19);
  uint64_t v23 = (char *)&v40 - v22;
  uint64_t v24 = MEMORY[0x270FA5388](v21);
  unint64_t v40 = (char *)&v40 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = MEMORY[0x270FA5388](v24);
  uint64_t v50 = *((void *)v15 - 1);
  MEMORY[0x270FA5388](v26);
  uint64_t v28 = (char *)&v40 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = a6;
  uint64_t v52 = v15;
  uint64_t v60 = swift_getAssociatedTypeWitness();
  uint64_t v47 = *(void *)(v60 - 8);
  MEMORY[0x270FA5388](v60);
  char v30 = (char *)&v40 - v29;
  uint64_t v31 = sub_24A2A7970();
  uint64_t v61 = sub_24A2A7CD0();
  uint64_t v56 = sub_24A2A7CE0();
  sub_24A2A7CB0();
  (*(void (**)(char *, uint64_t, void))(v50 + 16))(v28, v48, v52);
  BOOL v59 = v30;
  uint64_t result = sub_24A2A7960();
  if (v31 < 0)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    return result;
  }
  if (v31)
  {
    uint64_t v33 = (uint64_t (**)(char *, uint64_t, uint64_t))(v54 + 48);
    uint64_t v34 = (uint64_t (**)(char *, uint64_t))(v54 + 8);
    swift_getAssociatedConformanceWitness();
    while (1)
    {
      sub_24A2A7B60();
      uint64_t result = (*v33)(v23, 1, AssociatedTypeWitness);
      if (result == 1) {
        goto LABEL_18;
      }
      v57(v23, v55);
      if (v9)
      {
        (*(void (**)(char *, uint64_t))(v47 + 8))(v59, v60);
        swift_release();
        (*(void (**)(uint64_t, char *, uint64_t))(v42 + 32))(v43, v55, v44);
        return (*v34)(v23, AssociatedTypeWitness);
      }
      uint64_t v9 = 0;
      (*v34)(v23, AssociatedTypeWitness);
      sub_24A2A7CC0();
      if (!--v31)
      {
        uint64_t v35 = v54;
        unint64_t v36 = v51;
        goto LABEL_9;
      }
    }
  }
  swift_getAssociatedConformanceWitness();
  uint64_t v35 = v54;
  unint64_t v36 = v51;
LABEL_9:
  sub_24A2A7B60();
  uint64_t v55 = *(char **)(v35 + 48);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v55)(v36, 1, AssociatedTypeWitness) == 1)
  {
    unint64_t v37 = v51;
LABEL_14:
    (*(void (**)(char *, uint64_t))(v47 + 8))(v59, v60);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v37, v46);
    return v61;
  }
  else
  {
    uint64_t v52 = *(void (**)(char *, char *, uint64_t))(v35 + 32);
    uint64_t v54 = v35 + 32;
    unint64_t v38 = (void (**)(char *, uint64_t))(v35 + 8);
    uint64_t v39 = v41;
    unint64_t v37 = v51;
    while (1)
    {
      v52(v39, v37, AssociatedTypeWitness);
      v57(v39, v53);
      if (v9) {
        break;
      }
      uint64_t v9 = 0;
      (*v38)(v39, AssociatedTypeWitness);
      sub_24A2A7CC0();
      sub_24A2A7B60();
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v55)(v37, 1, AssociatedTypeWitness) == 1) {
        goto LABEL_14;
      }
    }
    (*v38)(v39, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t))(v47 + 8))(v59, v60);
    swift_release();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v42 + 32))(v43, v53, v44);
  }
}

unsigned char *sub_24A1B6EE8@<X0>(unsigned char *result@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  *a3 = *(unsigned char *)(a2 + 32) | *result;
  return result;
}

uint64_t SEP.SealedHash.init(from:flags:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, unsigned char *a4@<X8>)
{
  char v7 = *a3;
  uint64_t v8 = &a4[*(int *)(type metadata accessor for SEP.SealedHash(0) + 20)];
  *uint64_t v8 = a1;
  v8[1] = a2;
  type metadata accessor for SEP.SealedHash.Value(0);
  uint64_t result = swift_storeEnumTagMultiPayload();
  *a4 = v7;
  return result;
}

void static SEP.SealedHash.Flags.none.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t SEP.SealedHash.Flags.rawValue.getter()
{
  return *v0;
}

uint64_t SEP.SealedHash.Flags.init(rawValue:)@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = result;
  return result;
}

{
  *a2 = result;
  return result;
}

void static SEP.SealedHash.Flags.ratchet.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

void static SEP.SealedHash.Flags.ratchetLocked.getter(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

void static SEP.SealedHash.Flags.cryptexMeasurement.getter(unsigned char *a1@<X8>)
{
  *a1 = 8;
}

unsigned char *sub_24A1B6FAC@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_24A1B6FB8(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

unsigned char *sub_24A1B6FC0@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

unsigned char *sub_24A1B6FD4@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

unsigned char *sub_24A1B6FE8@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_24A1B6FFC(unsigned char *a1, unsigned __int8 *a2)
{
  int v3 = *a2;
  int v4 = *v2;
  if ((v4 & v3) != v3) {
    *unint64_t v2 = v4 | v3;
  }
  *a1 = v3;
  return (v4 & v3) != v3;
}

unsigned __int8 *sub_24A1B702C@<X0>(unsigned __int8 *result@<X0>, unsigned char *a2@<X8>)
{
  int v3 = *result;
  int v4 = *v2;
  int v5 = v4 & v3;
  if ((v4 & v3) != 0) {
    *unint64_t v2 = v4 & ~(_BYTE)v3;
  }
  *a2 = v5;
  a2[1] = v5 == 0;
  return result;
}

unsigned __int8 *sub_24A1B7058@<X0>(unsigned __int8 *result@<X0>, unsigned char *a2@<X8>)
{
  int v3 = *result;
  int v4 = *v2;
  *unint64_t v2 = v4 | v3;
  int v5 = v4 & v3;
  *a2 = v5;
  a2[1] = v5 == 0;
  return result;
}

unsigned char *sub_24A1B707C(unsigned char *result)
{
  *v1 |= *result;
  return result;
}

unsigned char *sub_24A1B7090(unsigned char *result)
{
  *v1 &= *result;
  return result;
}

unsigned char *sub_24A1B70A4(unsigned char *result)
{
  *v1 ^= *result;
  return result;
}

unsigned char *sub_24A1B70B8@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_24A1B70CC(unsigned __int8 *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL sub_24A1B70E0(unsigned char *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL sub_24A1B70F4(unsigned __int8 *a1)
{
  return (*a1 & ~*v1) == 0;
}

BOOL sub_24A1B7108()
{
  return *v0 == 0;
}

uint64_t sub_24A1B7118(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x270F9E7D8](a1, a4, a2, a5, a3);
}

unsigned char *sub_24A1B7130(unsigned char *result)
{
  *v1 &= ~*result;
  return result;
}

unsigned __int8 *sub_24A1B7144@<X0>(unsigned __int8 *result@<X0>, _WORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_24A1B7154(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

BOOL sub_24A1B7160(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t SEP.SealedHash.Value.description.getter()
{
  uint64_t v0 = sub_24A1B4AA0();
  unint64_t v2 = v1;
  uint64_t v3 = sub_24A231980(v0, v1);
  sub_24A1A5384(v0, v2);
  return v3;
}

uint64_t static SEP.SealedHash.Value.== infix(_:_:)()
{
  uint64_t v0 = sub_24A1B4AA0();
  unint64_t v2 = v1;
  uint64_t v3 = sub_24A1B4AA0();
  unint64_t v5 = v4;
  char v6 = sub_24A1B7D80(v0, v2, v3, v4);
  sub_24A1A5384(v3, v5);
  sub_24A1A5384(v0, v2);
  return v6 & 1;
}

uint64_t sub_24A1B724C()
{
  uint64_t v0 = sub_24A1B4AA0();
  unint64_t v2 = v1;
  uint64_t v3 = sub_24A1B4AA0();
  unint64_t v5 = v4;
  char v6 = sub_24A1B7D80(v0, v2, v3, v4);
  sub_24A1A5384(v3, v5);
  sub_24A1A5384(v0, v2);
  return v6 & 1;
}

uint64_t sub_24A1B72D0()
{
  uint64_t v0 = sub_24A1B4AA0();
  unint64_t v2 = v1;
  uint64_t v3 = sub_24A231980(v0, v1);
  sub_24A1A5384(v0, v2);
  return v3;
}

uint64_t static SEP.SealedHash.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 != *a2) {
    return 0;
  }
  type metadata accessor for SEP.SealedHash(0);
  uint64_t v2 = sub_24A1B4AA0();
  unint64_t v4 = v3;
  uint64_t v5 = sub_24A1B4AA0();
  unint64_t v7 = v6;
  char v8 = sub_24A1B7D80(v2, v4, v5, v6);
  sub_24A1A5384(v5, v7);
  sub_24A1A5384(v2, v4);
  return v8 & 1;
}

uint64_t sub_24A1B73D0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 != *a2) {
    return 0;
  }
  uint64_t v2 = sub_24A1B4AA0();
  unint64_t v4 = v3;
  uint64_t v5 = sub_24A1B4AA0();
  unint64_t v7 = v6;
  char v8 = sub_24A1B7D80(v2, v4, v5, v6);
  sub_24A1A5384(v5, v7);
  sub_24A1A5384(v2, v4);
  return v8 & 1;
}

uint64_t SEP.SealedHash.Entry.digest.getter()
{
  uint64_t v1 = *(void *)v0;
  sub_24A1A52B0(*(void *)v0, *(void *)(v0 + 8));
  return v1;
}

uint64_t SEP.SealedHash.Entry.data.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  sub_24A1B8018(v1, *(void *)(v0 + 24));
  return v1;
}

void SEP.SealedHash.Entry.flags.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 32);
}

uint64_t SEP.SealedHash.Entry.algorithm.getter()
{
  return *(void *)(v0 + 40);
}

uint64_t SEP.SealedHash.Entry.init<A>(data:flags:algorithm:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  LOBYTE(a3) = *a3;
  sub_24A1B802C();
  sub_24A2A7190();
  swift_getAssociatedConformanceWitness();
  uint64_t result = sub_24A2A6B20();
  *(void *)a6 = result;
  *(void *)(a6 + 8) = v14;
  *(void *)(a6 + 16) = a1;
  *(void *)(a6 + 24) = a2;
  *(unsigned char *)(a6 + 32) = (_BYTE)a3;
  *(void *)(a6 + 40) = a4;
  *(void *)(a6 + 48) = a5;
  return result;
}

double SEP.SealedHash.Entry.init<A>(digest:flags:algorithm:)@<D0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v18 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  char v11 = *a2;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v17 - v12, a1, AssociatedTypeWitness);
  swift_getAssociatedConformanceWitness();
  uint64_t v13 = sub_24A2A6B20();
  uint64_t v15 = v14;
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a1, AssociatedTypeWitness);
  *(void *)a5 = v13;
  *(void *)(a5 + 8) = v15;
  double result = 0.0;
  *(_OWORD *)(a5 + 16) = xmmword_24A2A99E0;
  *(unsigned char *)(a5 + 32) = v11;
  *(void *)(a5 + 40) = v18;
  *(void *)(a5 + 48) = a4;
  return result;
}

double SEP.SealedHash.Entry.init<A>(digest:flags:algorithm:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  char v6 = *a3;
  *(void *)a6 = a1;
  *(void *)(a6 + 8) = a2;
  double result = 0.0;
  *(_OWORD *)(a6 + 16) = xmmword_24A2A99E0;
  *(unsigned char *)(a6 + 32) = v6;
  *(void *)(a6 + 40) = a4;
  *(void *)(a6 + 48) = a5;
  return result;
}

BOOL static SEP.SealedHash.Error.== infix(_:_:)(int *a1, uint64_t a2)
{
  int v2 = *a1;
  unsigned int v3 = *(_DWORD *)a2;
  if (*((unsigned char *)a1 + 4) == 1)
  {
    if (v2)
    {
      if (v2 == 1)
      {
        if (v3 == 1) {
          char v4 = *(unsigned char *)(a2 + 4);
        }
        else {
          char v4 = 0;
        }
        if (v4) {
          return 1;
        }
      }
      else
      {
        if (v3 > 1) {
          char v7 = *(unsigned char *)(a2 + 4);
        }
        else {
          char v7 = 0;
        }
        if (v7) {
          return 1;
        }
      }
    }
    else
    {
      if (v3) {
        LOBYTE(v6) = 0;
      }
      else {
        int v6 = *(unsigned __int8 *)(a2 + 4);
      }
      if (v6) {
        return 1;
      }
    }
  }
  else if ((*(unsigned char *)(a2 + 4) & 1) == 0)
  {
    return v2 == v3;
  }
  return 0;
}

BOOL sub_24A1B7838(int *a1, uint64_t a2)
{
  int v2 = *a1;
  unsigned int v3 = *(_DWORD *)a2;
  if (*((unsigned char *)a1 + 4) != 1)
  {
    if ((*(unsigned char *)(a2 + 4) & 1) == 0) {
      return v2 == v3;
    }
    return 0;
  }
  if (v2)
  {
    if (v2 != 1)
    {
      if (v3 > 1) {
        char v7 = *(unsigned char *)(a2 + 4);
      }
      else {
        char v7 = 0;
      }
      return (v7 & 1) != 0;
    }
    BOOL v4 = v3 == 1;
  }
  else
  {
    BOOL v4 = v3 == 0;
  }
  if (v4) {
    char v6 = *(unsigned char *)(a2 + 4);
  }
  else {
    char v6 = 0;
  }
  return (v6 & 1) != 0;
}

unsigned char *sub_24A1B789C@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X1>, void *a3@<X8>)
{
  if (!result) {
    goto LABEL_4;
  }
  uint64_t v4 = a2 - result;
  if (a2 == result)
  {
    double result = 0;
LABEL_4:
    unint64_t v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    double result = (unsigned char *)sub_24A1F0728(result, a2);
    unint64_t v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    double result = (unsigned char *)sub_24A1B93D4((uint64_t)result, (uint64_t)a2);
    unint64_t v5 = v8 | 0x8000000000000000;
  }
  else
  {
    double result = (unsigned char *)sub_24A1B9450((uint64_t)result, (uint64_t)a2);
    unint64_t v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

unint64_t sub_24A1B7964()
{
  unint64_t result = qword_269778898;
  if (!qword_269778898)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269778898);
  }
  return result;
}

uint64_t sub_24A1B79B8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_24A1B7A18(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3) {
    return a1(a3, a4 - a3);
  }
  else {
    return a1(0, 0);
  }
}

uint64_t sub_24A1B7A70(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_24A2A68E0();
  if (!result || (uint64_t result = sub_24A2A6910(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      sub_24A2A6900();
      sub_24A2A7390();
      sub_24A1B7B20();
      return sub_24A2A7170();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t sub_24A1B7B20()
{
  unint64_t result = qword_26B174A18;
  if (!qword_26B174A18)
  {
    sub_24A2A7390();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B174A18);
  }
  return result;
}

uint64_t sub_24A1B7B78(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_24A1A5384(a1, a2);
  }
  return a1;
}

uint64_t sub_24A1B7B8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SEP.SealedHash(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_24A1B7BF0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t __s1 = a1;
  __int16 v9 = a2;
  char v10 = BYTE2(a2);
  char v11 = BYTE3(a2);
  char v12 = BYTE4(a2);
  char v13 = BYTE5(a2);
  sub_24A1B0C70((uint64_t)&__s1, a3, a4, &v7);
  if (!v4) {
    char v5 = v7;
  }
  return v5 & 1;
}

uint64_t sub_24A1B7CC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t result = sub_24A2A68E0();
  uint64_t v11 = result;
  if (result)
  {
    uint64_t result = sub_24A2A6910();
    if (__OFSUB__(a1, result))
    {
LABEL_9:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  sub_24A2A6900();
  sub_24A1B0C70(v11, a4, a5, &v13);
  if (!v5) {
    char v12 = v13;
  }
  return v12 & 1;
}

uint64_t sub_24A1B7D80(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v8) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
        JUMPOUT(0x24A1B7FE8);
      }
      uint64_t v8 = (int)v8;
LABEL_6:
      switch(a4 >> 62)
      {
        case 1uLL:
          LODWORD(v12) = HIDWORD(a3) - a3;
          if (__OFSUB__(HIDWORD(a3), a3)) {
            goto LABEL_27;
          }
          uint64_t v12 = (int)v12;
LABEL_11:
          if (v8 == v12)
          {
            if (v8 < 1)
            {
              char v17 = 1;
            }
            else
            {
              switch(a2 >> 62)
              {
                case 1uLL:
                  if (a1 >> 32 < (int)a1) {
                    goto LABEL_29;
                  }
                  sub_24A1A52B0(a3, a4);
                  sub_24A1A52B0(a1, a2);
                  char v17 = sub_24A1B7CC8((int)a1, a1 >> 32, a2 & 0x3FFFFFFFFFFFFFFFLL, a3, a4);
                  sub_24A1A5384(a3, a4);
                  uint64_t v18 = a1;
                  unint64_t v19 = a2;
                  break;
                case 2uLL:
                  uint64_t v20 = a2 & 0x3FFFFFFFFFFFFFFFLL;
                  uint64_t v21 = *(void *)(a1 + 16);
                  uint64_t v22 = *(void *)(a1 + 24);
                  sub_24A1A52B0(a3, a4);
                  swift_retain();
                  swift_retain();
                  char v17 = sub_24A1B7CC8(v21, v22, v20, a3, a4);
                  sub_24A1A5384(a3, a4);
                  swift_release();
                  swift_release();
                  return v17 & 1;
                case 3uLL:
                  sub_24A1A52B0(a3, a4);
                  uint64_t v16 = 0;
                  uint64_t v15 = 0;
                  goto LABEL_22;
                default:
                  sub_24A1A52B0(a3, a4);
                  uint64_t v15 = a2 & 0xFFFFFFFFFFFFFFLL;
                  uint64_t v16 = a1;
LABEL_22:
                  char v17 = sub_24A1B7BF0(v16, v15, a3, a4);
                  uint64_t v18 = a3;
                  unint64_t v19 = a4;
                  break;
              }
              sub_24A1A5384(v18, v19);
            }
          }
          else
          {
            char v17 = 0;
          }
          return v17 & 1;
        case 2uLL:
          uint64_t v14 = *(void *)(a3 + 16);
          uint64_t v13 = *(void *)(a3 + 24);
          BOOL v11 = __OFSUB__(v13, v14);
          uint64_t v12 = v13 - v14;
          if (!v11) {
            goto LABEL_11;
          }
          goto LABEL_28;
        case 3uLL:
          char v17 = v8 == 0;
          return v17 & 1;
        default:
          uint64_t v12 = BYTE6(a4);
          goto LABEL_11;
      }
    case 2uLL:
      uint64_t v10 = *(void *)(a1 + 16);
      uint64_t v9 = *(void *)(a1 + 24);
      BOOL v11 = __OFSUB__(v9, v10);
      uint64_t v8 = v9 - v10;
      if (!v11) {
        goto LABEL_6;
      }
      goto LABEL_26;
    case 3uLL:
      goto LABEL_6;
    default:
      uint64_t v8 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_24A1B8018(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_24A1A52B0(a1, a2);
  }
  return a1;
}

unint64_t sub_24A1B802C()
{
  unint64_t result = qword_26B174218;
  if (!qword_26B174218)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B174218);
  }
  return result;
}

unint64_t sub_24A1B8078()
{
  unint64_t result = qword_2697788A0;
  if (!qword_2697788A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2697788A0);
  }
  return result;
}

unint64_t sub_24A1B80D0()
{
  unint64_t result = qword_2697788A8;
  if (!qword_2697788A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2697788A8);
  }
  return result;
}

unint64_t sub_24A1B8128()
{
  unint64_t result = qword_2697788B0;
  if (!qword_2697788B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2697788B0);
  }
  return result;
}

unint64_t sub_24A1B8180()
{
  unint64_t result = qword_2697788B8[0];
  if (!qword_2697788B8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_2697788B8);
  }
  return result;
}

uint64_t *_s10SealedHashVwCP(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    uint64_t v5 = *(int *)(a3 + 20);
    uint64_t v6 = (uint64_t *)((char *)a1 + v5);
    char v7 = (uint64_t *)((char *)a2 + v5);
    type metadata accessor for SEP.SealedHash.Value(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
    {
      uint64_t v10 = *v7;
      unint64_t v9 = v7[1];
      sub_24A1A52B0(v10, v9);
      *uint64_t v6 = v10;
      v6[1] = v9;
    }
    else
    {
      uint64_t v12 = sub_24A2A7390();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v12 - 8) + 16))(v6, v7, v12);
    }
    swift_storeEnumTagMultiPayload();
  }
  return v3;
}

uint64_t _s10SealedHashVwxx(uint64_t a1, uint64_t a2)
{
  int v2 = (uint64_t *)(a1 + *(int *)(a2 + 20));
  type metadata accessor for SEP.SealedHash.Value(0);
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 2 || result == 1)
  {
    uint64_t v6 = *v2;
    unint64_t v7 = v2[1];
    return sub_24A1A5384(v6, v7);
  }
  else if (!result)
  {
    uint64_t v4 = sub_24A2A7390();
    uint64_t v5 = *(uint64_t (**)(uint64_t *, uint64_t))(*(void *)(v4 - 8) + 8);
    return v5(v2, v4);
  }
  return result;
}

unsigned char *_s10SealedHashVwcp(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (uint64_t *)&a1[v4];
  uint64_t v6 = (uint64_t *)&a2[v4];
  type metadata accessor for SEP.SealedHash.Value(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
  {
    uint64_t v9 = *v6;
    unint64_t v8 = v6[1];
    sub_24A1A52B0(v9, v8);
    *uint64_t v5 = v9;
    v5[1] = v8;
  }
  else
  {
    uint64_t v10 = sub_24A2A7390();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v10 - 8) + 16))(v5, v6, v10);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

unsigned char *_s10SealedHashVwca(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  if (a1 != a2)
  {
    uint64_t v4 = *(int *)(a3 + 20);
    uint64_t v5 = (uint64_t *)&a1[v4];
    uint64_t v6 = (uint64_t *)&a2[v4];
    sub_24A1B79B8((uint64_t)&a1[v4], type metadata accessor for SEP.SealedHash.Value);
    type metadata accessor for SEP.SealedHash.Value(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
    {
      uint64_t v9 = *v6;
      unint64_t v8 = v6[1];
      sub_24A1A52B0(v9, v8);
      *uint64_t v5 = v9;
      v5[1] = v8;
    }
    else
    {
      uint64_t v10 = sub_24A2A7390();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v10 - 8) + 16))(v5, v6, v10);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

unsigned char *_s10SealedHashVwtk(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = &a1[v4];
  uint64_t v6 = &a2[v4];
  uint64_t v7 = type metadata accessor for SEP.SealedHash.Value(0);
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(v5, v6, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    uint64_t v8 = sub_24A2A7390();
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v8 - 8) + 32))(v5, v6, v8);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

unsigned char *_s10SealedHashVwta(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  if (a1 != a2)
  {
    uint64_t v4 = *(int *)(a3 + 20);
    uint64_t v5 = &a1[v4];
    uint64_t v6 = &a2[v4];
    sub_24A1B79B8((uint64_t)&a1[v4], type metadata accessor for SEP.SealedHash.Value);
    uint64_t v7 = type metadata accessor for SEP.SealedHash.Value(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v5, v6, *(void *)(*(void *)(v7 - 8) + 64));
    }
    else
    {
      uint64_t v8 = sub_24A2A7390();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v8 - 8) + 32))(v5, v6, v8);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t _s10SealedHashVwet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24A1B8788);
}

uint64_t sub_24A1B8788(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + *(int *)(a3 + 20);
  uint64_t v5 = type metadata accessor for SEP.SealedHash.Value(0);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48);

  return v6(v4, a2, v5);
}

uint64_t _s10SealedHashVwst(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24A1B880C);
}

uint64_t sub_24A1B880C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1 + *(int *)(a4 + 20);
  uint64_t v6 = type metadata accessor for SEP.SealedHash.Value(0);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(v5, a2, a2, v6);
}

uint64_t sub_24A1B8880()
{
  uint64_t result = type metadata accessor for SEP.SealedHash.Value(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for SEP.SealedHash.Flags()
{
  return &type metadata for SEP.SealedHash.Flags;
}

uint64_t *_s10SealedHashV5ValueOwCP(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
    {
      uint64_t v8 = *a2;
      unint64_t v7 = a2[1];
      sub_24A1A52B0(v8, v7);
      *a1 = v8;
      a1[1] = v7;
    }
    else
    {
      uint64_t v10 = sub_24A2A7390();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t _s10SealedHashV5ValueOwxx(uint64_t *a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 2 || result == 1)
  {
    uint64_t v5 = *a1;
    unint64_t v6 = a1[1];
    return sub_24A1A5384(v5, v6);
  }
  else if (!result)
  {
    uint64_t v3 = sub_24A2A7390();
    uint64_t v4 = *(uint64_t (**)(uint64_t *, uint64_t))(*(void *)(v3 - 8) + 8);
    return v4(a1, v3);
  }
  return result;
}

uint64_t *_s10SealedHashV5ValueOwcp(uint64_t *a1, uint64_t *a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
  {
    uint64_t v6 = *a2;
    unint64_t v5 = a2[1];
    sub_24A1A52B0(v6, v5);
    *a1 = v6;
    a1[1] = v5;
  }
  else
  {
    uint64_t v7 = sub_24A2A7390();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t *_s10SealedHashV5ValueOwca(uint64_t *a1, uint64_t *a2)
{
  if (a1 != a2)
  {
    sub_24A1B79B8((uint64_t)a1, type metadata accessor for SEP.SealedHash.Value);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
    {
      uint64_t v6 = *a2;
      unint64_t v5 = a2[1];
      sub_24A1A52B0(v6, v5);
      *a1 = v6;
      a1[1] = v5;
    }
    else
    {
      uint64_t v7 = sub_24A2A7390();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *_s10SealedHashV5ValueOwtk(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v6 = sub_24A2A7390();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *_s10SealedHashV5ValueOwta(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_24A1B79B8((uint64_t)a1, type metadata accessor for SEP.SealedHash.Value);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v6 = sub_24A2A7390();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t _s10SealedHashV5ValueOwet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

uint64_t _s10SealedHashV5ValueOwst(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

uint64_t sub_24A1B8ED4()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_24A1B8EE4()
{
  uint64_t result = sub_24A2A7390();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t _s10SealedHashV5EntryVwCP(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t _s10SealedHashV5EntryVwxx(uint64_t *a1)
{
  uint64_t result = sub_24A1A5384(*a1, a1[1]);
  unint64_t v3 = a1[3];
  if (v3 >> 60 != 15)
  {
    uint64_t v4 = a1[2];
    return sub_24A1A5384(v4, v3);
  }
  return result;
}

uint64_t _s10SealedHashV5EntryVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  sub_24A1A52B0(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = (uint64_t *)(a2 + 16);
  unint64_t v7 = *(void *)(a2 + 24);
  if (v7 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)v6;
  }
  else
  {
    uint64_t v8 = *v6;
    sub_24A1A52B0(*v6, *(void *)(a2 + 24));
    *(void *)(a1 + 16) = v8;
    *(void *)(a1 + 24) = v7;
  }
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  return a1;
}

uint64_t _s10SealedHashV5EntryVwca(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  sub_24A1A52B0(*(void *)a2, v5);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  sub_24A1A5384(v6, v7);
  uint64_t v8 = (uint64_t *)(a2 + 16);
  unint64_t v9 = *(void *)(a2 + 24);
  if (*(void *)(a1 + 24) >> 60 != 15)
  {
    if (v9 >> 60 != 15)
    {
      uint64_t v11 = *v8;
      sub_24A1A52B0(*v8, *(void *)(a2 + 24));
      uint64_t v12 = *(void *)(a1 + 16);
      unint64_t v13 = *(void *)(a1 + 24);
      *(void *)(a1 + 16) = v11;
      *(void *)(a1 + 24) = v9;
      sub_24A1A5384(v12, v13);
      goto LABEL_8;
    }
    sub_24A1B9174(a1 + 16);
    goto LABEL_6;
  }
  if (v9 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)(a1 + 16) = *(_OWORD *)v8;
    goto LABEL_8;
  }
  uint64_t v10 = *v8;
  sub_24A1A52B0(*v8, *(void *)(a2 + 24));
  *(void *)(a1 + 16) = v10;
  *(void *)(a1 + 24) = v9;
LABEL_8:
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  return a1;
}

uint64_t sub_24A1B9174(uint64_t a1)
{
  return a1;
}

__n128 __swift_memcpy56_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t _s10SealedHashV5EntryVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_24A1A5384(v4, v5);
  uint64_t v6 = (void *)(a2 + 16);
  unint64_t v7 = *(void *)(a1 + 24);
  if (v7 >> 60 != 15)
  {
    unint64_t v8 = *(void *)(a2 + 24);
    if (v8 >> 60 != 15)
    {
      uint64_t v9 = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = *v6;
      *(void *)(a1 + 24) = v8;
      sub_24A1A5384(v9, v7);
      goto LABEL_6;
    }
    sub_24A1B9174(a1 + 16);
  }
  *(_OWORD *)(a1 + 16) = *(_OWORD *)v6;
LABEL_6:
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  return a1;
}

uint64_t _s10SealedHashV5EntryVwet(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s10SealedHashV5EntryVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 40) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SEP.SealedHash.Entry()
{
  return &type metadata for SEP.SealedHash.Entry;
}

uint64_t __swift_memcpy5_4(uint64_t result, int *a2)
{
  int v2 = *a2;
  *(unsigned char *)(result + 4) = *((unsigned char *)a2 + 4);
  *(_DWORD *)__n128 result = v2;
  return result;
}

uint64_t _s10SealedHashV5ErrorOwet(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 5)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t _s10SealedHashV5ErrorOwst(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(unsigned char *)(result + 4) = 0;
    *(_DWORD *)__n128 result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 5) = v3;
  return result;
}

uint64_t sub_24A1B9388(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 4)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_24A1B93A4(uint64_t result, int a2)
{
  if (a2)
  {
    *(_DWORD *)__n128 result = a2 - 1;
    *(unsigned char *)(result + 4) = 1;
  }
  else
  {
    *(unsigned char *)(result + 4) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for SEP.SealedHash.Error()
{
  return &type metadata for SEP.SealedHash.Error;
}

uint64_t sub_24A1B93D4(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a2 - a1;
  }
  else {
    uint64_t v2 = 0;
  }
  sub_24A2A6920();
  swift_allocObject();
  uint64_t result = sub_24A2A68D0();
  if (v2 < 0)
  {
    __break(1u);
  }
  else
  {
    sub_24A2A6A40();
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = v2;
  }
  return result;
}

uint64_t sub_24A1B9450(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v2 = a2 - a1;
  }
  else {
    uint64_t v2 = 0;
  }
  sub_24A2A6920();
  swift_allocObject();
  uint64_t result = sub_24A2A68D0();
  if (v2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v2 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((v2 & 0x80000000) == 0) {
    return v2 << 32;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_24A1B94D4(uint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    if (result <= 14)
    {
      if (result < 0) {
        __break(1u);
      }
      else {
        return 0;
      }
    }
    else
    {
      sub_24A2A6920();
      swift_allocObject();
      sub_24A2A68F0();
      if (v1 >= 0x7FFFFFFF)
      {
        sub_24A2A6A40();
        uint64_t result = swift_allocObject();
        *(void *)(result + 16) = 0;
        *(void *)(result + 24) = v1;
      }
      else
      {
        return v1 << 32;
      }
    }
  }
  return result;
}

void *sub_24A1B9578(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174B08);
  v19[3] = v8;
  v19[4] = sub_24A1B9860((unint64_t *)&qword_26B174AF8, &qword_26B174B08);
  uint64_t v9 = (void *)swift_allocObject();
  v19[0] = v9;
  v9[2] = a1;
  v9[3] = a2;
  v9[4] = a3;
  v9[5] = a4;
  uint64_t result = __swift_project_boxed_opaque_existential_1(v19, v8);
  uint64_t v11 = result[2];
  uint64_t v12 = result[3] >> 1;
  BOOL v13 = __OFSUB__(v12, v11);
  uint64_t v14 = v12 - v11;
  if (v13)
  {
    __break(1u);
  }
  else
  {
    uint64_t v15 = (unsigned char *)(result[1] + v11);
    uint64_t v16 = &v15[v14];
    swift_unknownObjectRetain();
    sub_24A1B789C(v15, v16, &v18);
    uint64_t v17 = v18;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
    return (void *)v17;
  }
  return result;
}

uint64_t sub_24A1B966C(uint64_t a1)
{
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174AB8);
  uint64_t v10 = sub_24A1B9860(&qword_26B174AC0, &qword_26B174AB8);
  v8[0] = a1;
  uint64_t v2 = __swift_project_boxed_opaque_existential_1(v8, v9);
  char v3 = (unsigned char *)(*v2 + 32);
  uint64_t v4 = &v3[*(void *)(*v2 + 16)];
  swift_bridgeObjectRetain();
  sub_24A1B789C(v3, v4, &v7);
  uint64_t v5 = v7;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  return v5;
}

uint64_t sub_24A1B9720(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174200);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_24A1B9780(uint64_t a1, uint64_t a2)
{
  long long v5 = *(_OWORD *)*(void *)(v2 + 16);
  v4[2] = &v5;
  return sub_24A1B7A18((uint64_t (*)(uint64_t, uint64_t))sub_24A1B97F0, (uint64_t)v4, a1, a2);
}

uint64_t sub_24A1B97D8(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_24A1B97F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  uint64_t v7 = *(uint64_t **)(v3 + 16);
  unint64_t v8 = *v7;
  unint64_t v9 = v7[1];
  sub_24A1A52B0(*v7, v9);
  uint64_t result = sub_24A252540(a3, a1, a2, v8, v9);
  a3[3] = result;
  return result;
}

uint64_t sub_24A1B9860(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_24A1B98A4()
{
  swift_unknownObjectRelease();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t sub_24A1B98E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 32);
}

void *sub_24A1B98E8(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for DarwinInit()
{
  return swift_bridgeObjectRelease();
}

void *sub_24A1B9920(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  return a1;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

void *sub_24A1B997C(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  return a1;
}

uint64_t sub_24A1B99BC(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_24A1B9A04(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for TemporalCache()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_24A1B9A58()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = sub_24A2A6BC0();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_24A1B9B24(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = sub_24A2A6BC0();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(_DWORD *)(v9 + 80);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = (*(unsigned char *)(v6 + 80) | *(unsigned char *)(v9 + 80));
  if (v12 > 7
    || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v9 + 80)) & 0x100000) != 0
    || (v11 & (unint64_t)~v10) + *(void *)(*(void *)(v8 - 8) + 64) > 0x18)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v12 + 16) & ~v12));
    swift_retain();
  }
  else
  {
    uint64_t v16 = v8;
    uint64_t v17 = ~v10;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))(((unint64_t)a1 + v11) & v17, ((unint64_t)a2 + v11) & v17, v16);
  }
  return a1;
}

uint64_t sub_24A1B9C90(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 24) - 8) + 8;
  (*(void (**)(void))v3)();
  uint64_t v4 = *(void *)(v3 + 56);
  uint64_t v5 = sub_24A2A6BC0();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(uint64_t (**)(unint64_t, uint64_t))(v6 + 8);
  uint64_t v8 = v5;
  unint64_t v9 = (v4 + a1 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);

  return v7(v9, v8);
}

uint64_t sub_24A1B9D34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48);
  uint64_t v7 = sub_24A2A6BC0();
  uint64_t v8 = *(void *)(v7 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), v7);
  return a1;
}

uint64_t sub_24A1B9DE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40);
  uint64_t v7 = sub_24A2A6BC0();
  uint64_t v8 = *(void *)(v7 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 24))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), v7);
  return a1;
}

uint64_t sub_24A1B9E8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32);
  uint64_t v7 = sub_24A2A6BC0();
  uint64_t v8 = *(void *)(v7 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 32))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), v7);
  return a1;
}

uint64_t sub_24A1B9F38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24);
  uint64_t v7 = sub_24A2A6BC0();
  uint64_t v8 = *(void *)(v7 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 40))((v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), v7);
  return a1;
}

uint64_t sub_24A1B9FE4(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  uint64_t v8 = sub_24A2A6BC0();
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  if (v10 <= v7) {
    unsigned int v11 = v7;
  }
  else {
    unsigned int v11 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v12 = *(unsigned __int8 *)(v9 + 80);
  if (!a2) {
    return 0;
  }
  uint64_t v13 = *(void *)(v6 + 64) + v12;
  if (a2 <= v11) {
    goto LABEL_24;
  }
  uint64_t v14 = (v13 & ~v12) + *(void *)(*(void *)(v8 - 8) + 64);
  char v15 = 8 * v14;
  if (v14 <= 3)
  {
    unsigned int v17 = ((a2 - v11 + ~(-1 << v15)) >> v15) + 1;
    if (HIWORD(v17))
    {
      int v16 = *(_DWORD *)((char *)a1 + v14);
      if (!v16) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v17 > 0xFF)
    {
      int v16 = *(unsigned __int16 *)((char *)a1 + v14);
      if (!*(unsigned __int16 *)((char *)a1 + v14)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v17 < 2)
    {
LABEL_24:
      if (v11)
      {
        if (v7 >= v10)
        {
          uint64_t v23 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v6 + 48);
          return v23(a1, v7, v5);
        }
        else
        {
          uint64_t v21 = *(uint64_t (**)(unint64_t))(v9 + 48);
          return v21(((unint64_t)a1 + v13) & ~v12);
        }
      }
      return 0;
    }
  }
  int v16 = *((unsigned __int8 *)a1 + v14);
  if (!*((unsigned char *)a1 + v14)) {
    goto LABEL_24;
  }
LABEL_14:
  int v18 = (v16 - 1) << v15;
  if (v14 > 3) {
    int v18 = 0;
  }
  if (v14)
  {
    if (v14 <= 3) {
      int v19 = v14;
    }
    else {
      int v19 = 4;
    }
    switch(v19)
    {
      case 2:
        int v20 = *a1;
        break;
      case 3:
        int v20 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v20 = *(_DWORD *)a1;
        break;
      default:
        int v20 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v20 = 0;
  }
  return v11 + (v20 | v18) + 1;
}

void sub_24A1BA264(unsigned char *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v24 = v8;
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  uint64_t v10 = *(void *)(sub_24A2A6BC0() - 8);
  uint64_t v11 = v10;
  unsigned int v12 = *(_DWORD *)(v10 + 84);
  if (v12 <= v9) {
    unsigned int v13 = v9;
  }
  else {
    unsigned int v13 = *(_DWORD *)(v10 + 84);
  }
  uint64_t v14 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v15 = *(void *)(v8 + 64) + v14;
  size_t v16 = (v15 & ~v14) + *(void *)(v10 + 64);
  if (a3 <= v13)
  {
    int v17 = 0;
  }
  else if (v16 <= 3)
  {
    unsigned int v20 = ((a3 - v13 + ~(-1 << (8 * v16))) >> (8 * v16)) + 1;
    if (HIWORD(v20))
    {
      int v17 = 4;
    }
    else if (v20 >= 0x100)
    {
      int v17 = 2;
    }
    else
    {
      int v17 = v20 > 1;
    }
  }
  else
  {
    int v17 = 1;
  }
  if (v13 < a2)
  {
    unsigned int v18 = ~v13 + a2;
    if (v16 < 4)
    {
      int v19 = (v18 >> (8 * v16)) + 1;
      if (v16)
      {
        int v21 = v18 & ~(-1 << (8 * v16));
        bzero(a1, v16);
        if (v16 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v16 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v16);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v16] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v16] = v19;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v16] = v19;
        return;
      default:
        return;
    }
  }
  switch(v17)
  {
    case 1:
      a1[v16] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v16] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x24A1BA564);
    case 4:
      *(_DWORD *)&a1[v16] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v9 >= v12)
        {
          uint64_t v23 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v24 + 56);
          v23(a1, a2, v9, v7);
        }
        else
        {
          uint64_t v22 = *(void (**)(unint64_t, uint64_t))(v11 + 56);
          v22((unint64_t)&a1[v15] & ~v14, a2);
        }
      }
      return;
  }
}

uint64_t type metadata accessor for TemporalCache.Element()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_24A1BA5A4()
{
  type metadata accessor for TemporalCache.Element();
  swift_getTupleTypeMetadata2();
  sub_24A2A7A60();
  uint64_t v1 = sub_24A2A7730();
  sub_24A2A7760();
  sub_24A2A7720();
  return v1;
}

uint64_t sub_24A1BA650@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v23 = a2;
  uint64_t v24 = a6;
  uint64_t v10 = type metadata accessor for TemporalCache.Element();
  uint64_t v11 = sub_24A2A7B50();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v23 - v14;
  uint64_t v16 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v13);
  unsigned int v18 = (char *)&v23 - v17;
  MEMORY[0x24C5BEF10](a1, v23, a3, v10, a5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v15, 1, v10) == 1)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v18, v15, v10);
    if ((sub_24A1BA918() & 1) == 0)
    {
      uint64_t v19 = *(void *)(a4 - 8);
      uint64_t v21 = v24;
      (*(void (**)(uint64_t, char *, uint64_t))(v19 + 16))(v24, v18, a4);
      (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v10);
      uint64_t v20 = 0;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56))(v21, v20, 1, a4);
    }
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v10);
  }
  uint64_t v19 = *(void *)(a4 - 8);
  uint64_t v20 = 1;
  uint64_t v21 = v24;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56))(v21, v20, 1, a4);
}

uint64_t sub_24A1BA918()
{
  uint64_t v0 = sub_24A2A6BC0();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24A2A6BB0();
  char v4 = sub_24A2A6B60();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v4 & 1;
}

BOOL sub_24A1BA9FC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v42 = a1;
  uint64_t v43 = *(void *)(a4[3] - 8);
  uint64_t v44 = a2;
  MEMORY[0x270FA5388](a1);
  uint64_t v8 = *(void *)(v7 + 16);
  uint64_t v9 = *(void *)(v7 + 32);
  uint64_t v41 = v10;
  uint64_t v45 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = v9;
  uint64_t v40 = type metadata accessor for TemporalCache.Element();
  uint64_t v11 = sub_24A2A7B50();
  uint64_t v12 = MEMORY[0x270FA5388](v11 - 8);
  uint64_t v14 = (char *)&v34 - v13;
  uint64_t v39 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_24A2A6BC0();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(void *)(v18 + 64);
  MEMORY[0x270FA5388](v17);
  sub_24A2A6BB0();
  uint64_t v20 = a3;
  LOBYTE(a3) = sub_24A2A6B60();
  (*(void (**)(char *, uint64_t))(v18 + 8))((char *)&v34 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0), v17);
  if (a3) {
    return 0;
  }
  uint64_t v35 = v18;
  uint64_t v36 = v17;
  uint64_t v22 = v16;
  unint64_t v37 = v14;
  uint64_t v38 = v20;
  uint64_t v23 = v41;
  uint64_t v24 = v47;
  uint64_t v26 = v39;
  uint64_t v25 = v40;
  uint64_t v27 = sub_24A2A7750();
  uint64_t v28 = *(void *)(v24 + 8);
  BOOL v21 = v27 == v28;
  if (v27 == v28 && !sub_24A1BADB4()) {
    sub_24A1BAF7C(a4);
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v22, v42, v8);
  uint64_t v29 = (uint64_t)v45;
  uint64_t v30 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v43 + 16))(v45, v44, v23);
  MEMORY[0x270FA5388](v30);
  uint64_t v31 = (char *)&v34 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v31, v38, v36);
  uint64_t v32 = (uint64_t)v37;
  sub_24A1BB3F4(v29, (uint64_t)v31, v23, (uint64_t)v37);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v32, 0, 1, v25);
  sub_24A2A7760();
  sub_24A2A7780();
  return v21;
}

uint64_t sub_24A1BADB4()
{
  uint64_t v1 = v0;
  type metadata accessor for TemporalCache.Element();
  uint64_t v2 = sub_24A2A7750();
  sub_24A2A7760();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  sub_24A2A79A0();
  swift_getTupleTypeMetadata2();
  swift_getTupleTypeMetadata2();
  sub_24A2A7CF0();
  swift_bridgeObjectRelease();
  sub_24A2A7A90();
  swift_getWitnessTable();
  uint64_t v3 = sub_24A2A7740();
  swift_bridgeObjectRelease();
  uint64_t *v1 = v3;
  uint64_t v4 = sub_24A2A7750();
  BOOL v5 = __OFSUB__(v2, v4);
  uint64_t result = v2 - v4;
  if (v5) {
    __break(1u);
  }
  return result;
}

uint64_t sub_24A1BAF7C(void *a1)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  uint64_t v5 = type metadata accessor for TemporalCache.Element();
  uint64_t v6 = sub_24A2A7B50();
  uint64_t v26 = *(void *)(v6 - 8);
  uint64_t v27 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v25 = (char *)&v23 - v7;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v9 = sub_24A2A7B50();
  uint64_t v29 = *(void *)(v9 - 8);
  uint64_t v30 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v23 - v10;
  uint64_t v12 = sub_24A2A7B50();
  uint64_t v31 = *(void *)(v12 - 8);
  uint64_t v32 = v12;
  uint64_t v13 = MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v23 - v14;
  uint64_t v16 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v24 = (char *)&v23 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = v1;
  uint64_t v36 = *v1;
  uint64_t v33 = v2;
  uint64_t v34 = v3;
  uint64_t v35 = v4;
  sub_24A2A7760();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  sub_24A2A7990();
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 48))(v11, 1, TupleTypeMetadata2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v29 + 8))(v11, v30);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v15, 1, 1, v2);
    return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v15, v32);
  }
  uint64_t v18 = &v11[*(int *)(TupleTypeMetadata2 + 48)];
  uint64_t v19 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
  v19(v15, v11, v2);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v15, 0, 1, v2);
  (*(void (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8))(v18, v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v15, 1, v2) == 1) {
    return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v15, v32);
  }
  BOOL v21 = v24;
  v19(v24, v15, v2);
  uint64_t v22 = v25;
  sub_24A2A7710();
  (*(void (**)(char *, uint64_t))(v26 + 8))(v22, v27);
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v21, v2);
}

uint64_t sub_24A1BB3F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a4, a1, a3);
  uint64_t v6 = a4 + *(int *)(type metadata accessor for TemporalCache.Element() + 44);
  uint64_t v7 = sub_24A2A6BC0();
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32);

  return v8(v6, a2, v7);
}

BOOL sub_24A1BB4CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TemporalCache.Element();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v6 = MEMORY[0x270FA5388](TupleTypeMetadata2 - 8);
  uint64_t v8 = (char *)&v15 - v7;
  uint64_t v9 = *(int *)(v6 + 56);
  uint64_t v10 = &v8[v9];
  uint64_t v11 = a1 + v9;
  uint64_t v12 = *(void *)(a2 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v8, a1, a2);
  uint64_t v13 = *(void *)(v4 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v10, v11, v4);
  LOBYTE(a1) = sub_24A1BA918();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v4);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v8, a2);
  return (a1 & 1) == 0;
}

uint64_t sub_24A1BB668(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v36 = a2;
  uint64_t v5 = type metadata accessor for TemporalCache.Element();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v7 = TupleTypeMetadata2 - 8;
  uint64_t v8 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v39 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = *(int *)(v7 + 56);
  uint64_t v12 = (char *)&v29 + v11 - v10;
  uint64_t v13 = a1 + v11;
  uint64_t v40 = a3;
  uint64_t v37 = *(void *)(a3 - 8);
  uint64_t v38 = (char *)&v29 - v10;
  uint64_t v14 = *(void (**)(void))(v37 + 16);
  uint64_t v34 = v37 + 16;
  uint64_t v35 = v14;
  ((void (*)(char *, uint64_t, uint64_t))v14)((char *)&v29 - v10, a1, a3);
  uint64_t v15 = *(void *)(v5 - 8);
  uint64_t v33 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  v33(v12, v13, v5);
  uint64_t v29 = &v12[*(int *)(v5 + 44)];
  uint64_t v16 = sub_24A2A6BC0();
  uint64_t v17 = *(void **)(v16 - 8);
  uint64_t v18 = v17[8];
  MEMORY[0x270FA5388](v16);
  unint64_t v31 = (v18 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v32 = (char *)&v29 - v31;
  uint64_t v30 = (void (*)(void))v17[2];
  v30();
  uint64_t v29 = *(char **)(v15 + 8);
  ((void (*)(char *, uint64_t))v29)(v12, v5);
  uint64_t v19 = *(int *)(v7 + 56);
  uint64_t v20 = &v39[v19];
  uint64_t v21 = v36 + v19;
  v35();
  uint64_t v22 = ((uint64_t (*)(char *, uint64_t, uint64_t))v33)(v20, v21, v5);
  MEMORY[0x270FA5388](v22);
  uint64_t v23 = (char *)&v29 - v31;
  ((void (*)(char *))v30)((char *)&v29 - v31);
  ((void (*)(char *, uint64_t))v29)(v20, v5);
  uint64_t v24 = v32;
  LOBYTE(v20) = sub_24A2A6B70();
  uint64_t v25 = (void (*)(char *, uint64_t))v17[1];
  v25(v23, v16);
  v25(v24, v16);
  uint64_t v26 = *(void (**)(char *, uint64_t))(v37 + 8);
  uint64_t v27 = v40;
  v26(v39, v40);
  v26(v38, v27);
  return v20 & 1;
}

uint64_t sub_24A1BB9E4(uint64_t a1, uint64_t a2)
{
  return sub_24A1BB668(a1, a2, *(void *)(v2 + 16)) & 1;
}

BOOL sub_24A1BBA08(uint64_t a1)
{
  return sub_24A1BB4CC(a1, *(void *)(v1 + 16));
}

uint64_t __swift_instantiateGenericMetadata()
{
  return swift_getGenericMetadata();
}

unint64_t sub_24A1BBA60(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_269778A20);
    uint64_t v2 = (void *)sub_24A2A7D60();
  }
  else
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
  }
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_269778A28);
  uint64_t v4 = MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    uint64_t v9 = (uint64_t)&v7[*(int *)(v4 + 48)];
    uint64_t v22 = a1;
    uint64_t v23 = v9;
    uint64_t v10 = a1 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    uint64_t v11 = *(void *)(v5 + 72);
    swift_retain();
    while (1)
    {
      sub_24A1B2CAC(v10, (uint64_t)v7, &qword_269778A28);
      unint64_t result = sub_24A1BE780((uint64_t)v7);
      if (v13) {
        break;
      }
      unint64_t v14 = result;
      *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      uint64_t v15 = v2[6];
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_269778A30);
      sub_24A1BFBF4((uint64_t)v7, v15 + *(void *)(*(void *)(v16 - 8) + 72) * v14, &qword_269778A30);
      uint64_t v17 = v2[7];
      uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_269778A38);
      unint64_t result = sub_24A1BFBF4(v23, v17 + *(void *)(*(void *)(v18 - 8) + 72) * v14, &qword_269778A38);
      uint64_t v19 = v2[2];
      BOOL v20 = __OFADD__(v19, 1);
      uint64_t v21 = v19 + 1;
      if (v20) {
        goto LABEL_12;
      }
      v2[2] = v21;
      v10 += v11;
      if (!--v8)
      {
        swift_release();
        goto LABEL_10;
      }
    }
    __break(1u);
LABEL_12:
    __break(1u);
  }
  else
  {
LABEL_10:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  return result;
}

unint64_t sub_24A1BBC78(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_26B174B18);
    uint64_t v2 = (void *)sub_24A2A7D60();
  }
  else
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
  }
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174240);
  uint64_t v4 = MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    uint64_t v9 = (uint64_t)&v7[*(int *)(v4 + 48)];
    unint64_t v10 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    v23[1] = a1;
    uint64_t v11 = a1 + v10;
    uint64_t v12 = *(void *)(v5 + 72);
    swift_retain();
    while (1)
    {
      sub_24A1B2CAC(v11, (uint64_t)v7, &qword_26B174240);
      unint64_t result = sub_24A1BE878((uint64_t)v7);
      if (v14) {
        break;
      }
      unint64_t v15 = result;
      *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      uint64_t v16 = v2[6];
      uint64_t v17 = sub_24A2A6C00();
      (*(void (**)(unint64_t, char *, uint64_t))(*(void *)(v17 - 8) + 32))(v16 + *(void *)(*(void *)(v17 - 8) + 72) * v15, v7, v17);
      uint64_t v18 = v2[7];
      uint64_t v19 = type metadata accessor for SEP.SealedHash(0);
      unint64_t result = sub_24A1BFA58(v9, v18 + *(void *)(*(void *)(v19 - 8) + 72) * v15, type metadata accessor for SEP.SealedHash);
      uint64_t v20 = v2[2];
      BOOL v21 = __OFADD__(v20, 1);
      uint64_t v22 = v20 + 1;
      if (v21) {
        goto LABEL_12;
      }
      v2[2] = v22;
      v11 += v12;
      if (!--v8)
      {
        swift_release();
        goto LABEL_10;
      }
    }
    __break(1u);
LABEL_12:
    __break(1u);
  }
  else
  {
LABEL_10:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  return result;
}

unint64_t sub_24A1BBEA8(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174A60);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (void *)((char *)v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!*(void *)(a1 + 16))
  {
    uint64_t v7 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697789D8);
  uint64_t v6 = sub_24A2A7D60();
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  uint64_t v9 = (uint64_t)v5 + *(int *)(v2 + 48);
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v25[1] = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_24A1B2CAC(v12, (uint64_t)v5, &qword_26B174A60);
    uint64_t v14 = *v5;
    uint64_t v15 = v5[1];
    unint64_t result = sub_24A1BE668(*v5, v15);
    if (v17) {
      break;
    }
    unint64_t v18 = result;
    *(void *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v19 = (uint64_t *)(v7[6] + 16 * result);
    uint64_t *v19 = v14;
    v19[1] = v15;
    uint64_t v20 = v7[7];
    uint64_t v21 = type metadata accessor for Proto_SealedHash(0);
    unint64_t result = sub_24A1BFA58(v9, v20 + *(void *)(*(void *)(v21 - 8) + 72) * v18, type metadata accessor for Proto_SealedHash);
    uint64_t v22 = v7[2];
    BOOL v23 = __OFADD__(v22, 1);
    uint64_t v24 = v22 + 1;
    if (v23) {
      goto LABEL_11;
    }
    v7[2] = v24;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_24A1BC0A4(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_269778A10);
  uint64_t v2 = sub_24A2A7D60();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_24A1B2CAC(v6, (uint64_t)&v15, &qword_26B174A68);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_24A1BE668(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    unint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    uint64_t *v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)sub_24A1BFBE4(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_24A1BC1DC(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697789F8);
  uint64_t v2 = sub_24A2A7D60();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_24A1B2CAC(v6, (uint64_t)&v13, &qword_269778A00);
    uint64_t v7 = v13;
    unint64_t result = sub_24A1BEA18(v13);
    if (v9) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(void *)(v3[6] + 8 * result) = v7;
    unint64_t result = (unint64_t)sub_24A1BFBE4(&v14, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v10 = v3[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v3[2] = v12;
    v6 += 40;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_24A1BC30C(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697789E0);
  uint64_t v2 = sub_24A2A7D60();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_24A1B2CAC(v6, (uint64_t)&v13, &qword_2697789E8);
    uint64_t v7 = v13;
    unint64_t result = sub_24A1BE964(v13);
    if (v9) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(void *)(v3[6] + 8 * result) = v7;
    unint64_t result = (unint64_t)sub_24A1BFBE4(&v14, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v10 = v3[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v3[2] = v12;
    v6 += 40;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_24A1BC43C(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_269778A08);
  uint64_t v2 = (void *)sub_24A2A7D60();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 2);
    uint64_t v6 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_24A1BE668(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v10 = (uint64_t *)(v2[6] + 16 * result);
    uint64_t *v10 = v5;
    v10[1] = v6;
    *(void *)(v2[7] + 8 * result) = v7;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_24A1BC558(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697789D0);
  uint64_t v2 = (void *)sub_24A2A7D60();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *(v4 - 3);
    uint64_t v6 = *(v4 - 2);
    uint64_t v8 = *(v4 - 1);
    uint64_t v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = sub_24A1BE668(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v2[6] + 16 * result);
    uint64_t *v11 = v5;
    v11[1] = v6;
    BOOL v12 = (void *)(v2[7] + 16 * result);
    void *v12 = v8;
    v12[1] = v7;
    uint64_t v13 = v2[2];
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_24A1BC67C()
{
  uint64_t v0 = sub_24A2A74F0();
  __swift_allocate_value_buffer(v0, qword_26B174820);
  __swift_project_value_buffer(v0, (uint64_t)qword_26B174820);
  return sub_24A2A74E0();
}

uint64_t static ProvisioningCertificate.DeviceIdentity.objectIdentifier.getter@<X0>(uint64_t a1@<X8>)
{
  if (qword_26B174838 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_24A2A74F0();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_26B174820);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, v3, v2);
}

uint64_t ProvisioningCertificate.DeviceIdentity.identity.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ProvisioningCertificate.DeviceIdentity.init(extensionValue:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v56 = a2;
  uint64_t v61 = sub_24A2A7580();
  uint64_t v59 = *(void *)(v61 - 8);
  MEMORY[0x270FA5388](v61);
  uint64_t v60 = (char *)&v55 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_24A2A7480();
  uint64_t v64 = *(void *)(v4 - 8);
  uint64_t v65 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v57 = (char *)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_24A2A7510();
  uint64_t v58 = *(char **)(v6 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v6);
  char v9 = (char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v55 - v10;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174A38);
  uint64_t v13 = MEMORY[0x270FA5388](v12 - 8);
  uint64_t v15 = (char *)&v55 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  long long v17 = (char *)&v55 - v16;
  uint64_t v62 = a1;
  sub_24A2A7470();
  sub_24A1BCF64();
  unint64_t v18 = v63;
  sub_24A2A75E0();
  uint64_t v19 = v18;
  if (v18)
  {
    uint64_t v21 = v61;
    uint64_t v20 = v62;
    uint64_t v22 = v65;
  }
  else
  {
    uint64_t v55 = v15;
    uint64_t v63 = v9;
    BOOL v23 = v58;
    uint64_t v24 = v66;
    if (v66[2] && (unint64_t v25 = sub_24A1BE6E0(2), (v26 & 1) != 0))
    {
      uint64_t v27 = (uint64_t)v17;
      uint64_t v28 = v6;
      (*((void (**)(char *, unint64_t, uint64_t))v23 + 2))(v17, v24[7] + *((void *)v23 + 9) * v25, v6);
      uint64_t v29 = 0;
      uint64_t v30 = v11;
    }
    else
    {
      uint64_t v29 = 1;
      uint64_t v28 = v6;
      uint64_t v30 = v11;
      uint64_t v27 = (uint64_t)v17;
    }
    unint64_t v31 = v63;
    uint64_t v32 = (uint64_t)v55;
    (*((void (**)(uint64_t, uint64_t, uint64_t, uint64_t))v23 + 7))(v27, v29, 1, v28);
    swift_bridgeObjectRelease();
    sub_24A1B2CAC(v27, v32, &qword_26B174A38);
    if ((*((unsigned int (**)(uint64_t, uint64_t, uint64_t))v23 + 6))(v32, 1, v28) == 1)
    {
      sub_24A1B2D10(v27, &qword_26B174A38);
    }
    else
    {
      (*((void (**)(char *, uint64_t, uint64_t))v23 + 4))(v30, v32, v28);
      (*((void (**)(char *, char *, uint64_t))v23 + 2))(v31, v30, v28);
      uint64_t v33 = v57;
      uint64_t v34 = v65;
      sub_24A2A75F0();
      uint64_t v39 = sub_24A2A7470();
      uint64_t v40 = v27;
      uint64_t v41 = v33;
      uint64_t v42 = v23;
      uint64_t v44 = v43;
      uint64_t v58 = v30;
      uint64_t v46 = v45;
      uint64_t v63 = (char *)v28;
      uint64_t v48 = v47;
      uint64_t v49 = *(void (**)(char *, uint64_t))(v64 + 8);
      v49(v41, v34);
      uint64_t v66 = (void *)v39;
      uint64_t v67 = v44;
      uint64_t v68 = v46;
      uint64_t v69 = v48;
      uint64_t v50 = sub_24A2A7860();
      MEMORY[0x270FA5388](v50 - 8);
      sub_24A2A7850();
      __swift_instantiateConcreteTypeFromMangledName(&qword_26B174B08);
      sub_24A1BE724();
      uint64_t v51 = sub_24A2A7830();
      uint64_t v53 = v52;
      swift_unknownObjectRelease();
      (*((void (**)(char *, char *))v42 + 1))(v58, v63);
      sub_24A1B2D10(v40, &qword_26B174A38);
      if (v53)
      {
        uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v49)(v62, v65);
        uint64_t v54 = v56;
        *uint64_t v56 = v51;
        v54[1] = v53;
        return result;
      }
    }
    sub_24A1BFC58((unint64_t *)&qword_2697789C8, MEMORY[0x263F7BF58]);
    uint64_t v21 = v61;
    uint64_t v19 = (void *)swift_allocError();
    sub_24A2A7560();
    swift_willThrow();
    uint64_t v20 = v62;
    uint64_t v22 = v65;
  }
  uint64_t v35 = v60;
  uint64_t v66 = v19;
  uint64_t v36 = v19;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697789C0);
  if (swift_dynamicCast())
  {
    (*(void (**)(char *, uint64_t))(v59 + 8))(v35, v21);
    uint64_t v66 = v19;
    sub_24A1BFC58((unint64_t *)&qword_2697789C8, MEMORY[0x263F7BF58]);
    swift_allocError();
    uint64_t v37 = v19;
    swift_dynamicCast();
  }
  else
  {
    swift_getErrorValue();
    sub_24A2A7EB0();
    sub_24A1BFC58((unint64_t *)&qword_2697789C8, MEMORY[0x263F7BF58]);
    swift_allocError();
    sub_24A2A7560();
    swift_bridgeObjectRelease();
  }
  swift_willThrow();

  return (*(uint64_t (**)(uint64_t, uint64_t))(v64 + 8))(v20, v22);
}

unint64_t sub_24A1BCF64()
{
  unint64_t result = qword_26B174818;
  if (!qword_26B174818)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B174818);
  }
  return result;
}

uint64_t ProvisioningCertificate.DeviceIdentity.init<A>(extensionValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v27 = a3;
  uint64_t v30 = sub_24A2A7580();
  uint64_t v28 = *(void *)(v30 - 8);
  MEMORY[0x270FA5388](v30);
  uint64_t v29 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_24A2A7440();
  uint64_t v7 = MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_24A2A7480();
  uint64_t v26 = *(void *)(v11 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)&v26 - v15;
  uint64_t v32 = v8;
  uint64_t v33 = a1;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, a2);
  uint64_t v34 = a2;
  sub_24A2A7BC0();
  sub_24A2A7600();
  long long v17 = v31;
  sub_24A2A7620();
  if (v17)
  {
    v35[0] = (uint64_t)v17;
    id v20 = v17;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2697789C0);
    uint64_t v21 = v29;
    uint64_t v22 = v30;
    if (swift_dynamicCast())
    {
      (*(void (**)(char *, uint64_t))(v28 + 8))(v21, v22);
      v35[0] = (uint64_t)v17;
      sub_24A1BFC58((unint64_t *)&qword_2697789C8, MEMORY[0x263F7BF58]);
      swift_allocError();
      id v23 = v17;
      swift_dynamicCast();
    }
    else
    {
      swift_getErrorValue();
      sub_24A2A7EB0();
      sub_24A1BFC58((unint64_t *)&qword_2697789C8, MEMORY[0x263F7BF58]);
      swift_allocError();
      sub_24A2A7560();
      swift_bridgeObjectRelease();
    }
    swift_willThrow();

    return (*(uint64_t (**)(uint64_t, uint64_t))(v32 + 8))(v33, v34);
  }
  else
  {
    uint64_t v19 = v26;
    unint64_t v18 = v27;
    (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v14, v16, v11);
    ProvisioningCertificate.DeviceIdentity.init(extensionValue:)((uint64_t)v14, v35);
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v33, v34);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v16, v11);
    uint64_t v25 = v35[1];
    *unint64_t v18 = v35[0];
    v18[1] = v25;
  }
  return result;
}

uint64_t ProvisioningCertificate.DeviceIdentity.Definition.properties.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ProvisioningCertificate.DeviceIdentity.Definition.properties.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  void *v1 = a1;
  return result;
}

uint64_t (*ProvisioningCertificate.DeviceIdentity.Definition.properties.modify())()
{
  return nullsub_1;
}

unint64_t ProvisioningCertificate.DeviceIdentity.Definition.init()@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_24A1BF720(MEMORY[0x263F8EE78]);
  *a1 = result;
  return result;
}

uint64_t ProvisioningCertificate.DeviceIdentity.Definition.init(derEncoded:)@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v25 = a2;
  uint64_t v4 = sub_24A2A7440();
  uint64_t v26 = *(void *)(v4 - 8);
  uint64_t v27 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_24A2A7550();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v28 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v23 - v11;
  uint64_t v13 = sub_24A2A7480();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v29 = sub_24A1BF720(MEMORY[0x263F8EE78]);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v12, a1, v7);
  sub_24A2A7630();
  if (v2)
  {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a1, v7);
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v23 = v7;
    uint64_t v24 = v14;
    sub_24A2A7470();
    sub_24A2A76E0();
    swift_unknownObjectRelease();
    uint64_t v17 = _s16CloudAttestation7ReleaseV17defaultIdentifier9SwiftASN10gE0VvgZ_0();
    MEMORY[0x270FA5388](v17);
    *(&v23 - 2) = (uint64_t)&v29;
    sub_24A2A76F0();
    uint64_t v18 = v24;
    id v20 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
    uint64_t v21 = a1;
    uint64_t v22 = v23;
    v20(v21, v23);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v6, v27);
    v20((uint64_t)v28, v22);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v16, v13);
    *uint64_t v25 = v29;
  }
  return result;
}

uint64_t sub_24A1BD92C(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  char v77 = a2;
  uint64_t v5 = sub_24A2A7510();
  uint64_t v84 = *(void *)(v5 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v5);
  uint64_t v89 = (char *)v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  char v80 = (char *)v60 - v8;
  uint64_t v78 = sub_24A2A74B0();
  uint64_t v87 = *(void *)(v78 - 8);
  MEMORY[0x270FA5388](v78);
  __int16 v79 = (char *)v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_24A2A7530();
  v60[0] = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  char v83 = (char *)v60 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_24A2A74C0();
  uint64_t v67 = *(uint64_t (***)(char *, uint64_t))(v12 - 8);
  MEMORY[0x270FA5388](v12);
  unint64_t v90 = (char *)v60 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v82 = sub_24A2A7440();
  char v86 = *(void (***)(char *, char *, uint64_t))(v82 - 8);
  MEMORY[0x270FA5388](v82);
  char v81 = (char *)v60 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174A40);
  uint64_t v16 = MEMORY[0x270FA5388](v15 - 8);
  unint64_t v76 = (char *)v60 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)v60 - v18;
  uint64_t v20 = sub_24A2A7550();
  uint64_t v21 = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](v20);
  uint64_t v23 = (char *)v60 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v73 = a1;
  sub_24A2A74A0();
  uint64_t v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 48);
  char v85 = v19;
  uint64_t v74 = v24;
  uint64_t v75 = v21 + 48;
  if (v24((uint64_t)v19, 1, v20) == 1)
  {
    uint64_t v25 = (uint64_t)v85;
    return sub_24A1B2D10(v25, &qword_26B174A40);
  }
  uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t))(v21 + 32);
  uint64_t v27 = v21 + 32;
  uint64_t v71 = (void (**)(char *, uint64_t))(v86 + 1);
  uint64_t v72 = v28;
  uint64_t v70 = (uint64_t (**)(char *, uint64_t))(v60[0] + 88);
  int v69 = *MEMORY[0x263F7BF50];
  uint64_t v66 = (void (**)(char *, uint64_t))(v60[0] + 96);
  uint64_t v65 = (void (**)(char *, char *, uint64_t))(v67 + 4);
  char v86 = (void (**)(char *, char *, uint64_t))(v84 + 32);
  v60[1] = v84 + 40;
  uint64_t v63 = (void (**)(char *, uint64_t))(v87 + 8);
  uint64_t v64 = (void (**)(char *))(v67 + 1);
  uint64_t v67 = (uint64_t (**)(char *, uint64_t))(v21 + 8);
  uint64_t v25 = (uint64_t)v85;
  uint64_t v62 = v12;
  uint64_t v88 = v5;
  uint64_t v68 = v23;
  uint64_t v61 = v10;
  v60[2] = v27;
  while (1)
  {
    unint64_t v29 = v23;
    uint64_t v30 = v3;
    v72(v29, v25, v20);
    unint64_t v31 = v81;
    sub_24A2A7520();
    uint64_t v32 = sub_24A2A7430();
    (*v71)(v31, v82);
    uint64_t v33 = v83;
    sub_24A2A7540();
    int v34 = (*v70)(v33, v10);
    if (v34 != v69)
    {
      (*(void (**)(char *, uint64_t))(v60[0] + 8))(v33, v10);
      sub_24A2A7580();
      sub_24A1BFC58((unint64_t *)&qword_2697789C8, MEMORY[0x263F7BF58]);
      swift_allocError();
      sub_24A2A7560();
      swift_willThrow();
      return (*v67)(v68, v20);
    }
    uint64_t v35 = v20;
    (*v66)(v33, v10);
    uint64_t v36 = v12;
    (*v65)(v90, v33, v12);
    uint64_t v37 = v79;
    sub_24A2A7490();
    uint64_t v38 = v80;
    sub_24A2A75D0();
    if (v30)
    {
      (*v63)(v37, v78);
      ((void (*)(char *, uint64_t))*v64)(v90, v36);
      uint64_t v20 = v35;
      return (*v67)(v68, v20);
    }
    uint64_t v87 = 0;
    uint64_t v39 = *v86;
    (*v86)(v89, v38, v5);
    uint64_t v40 = v77;
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v91 = (void *)*v40;
    uint64_t v42 = v91;
    uint64_t v43 = v40;
    *uint64_t v40 = 0x8000000000000000;
    unint64_t v45 = sub_24A1BE6E0(v32);
    uint64_t v46 = v42[2];
    BOOL v47 = (v44 & 1) == 0;
    uint64_t v48 = v46 + v47;
    if (__OFADD__(v46, v47)) {
      break;
    }
    char v49 = v44;
    if (v42[3] >= v48)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        uint64_t v52 = v91;
        if (v44) {
          goto LABEL_14;
        }
      }
      else
      {
        sub_24A25C574();
        uint64_t v52 = v91;
        if (v49) {
          goto LABEL_14;
        }
      }
    }
    else
    {
      sub_24A1E5C04(v48, isUniquelyReferenced_nonNull_native);
      unint64_t v50 = sub_24A1BE6E0(v32);
      if ((v49 & 1) != (v51 & 1)) {
        goto LABEL_27;
      }
      unint64_t v45 = v50;
      uint64_t v52 = v91;
      if (v49)
      {
LABEL_14:
        (*(void (**)(unint64_t, char *, uint64_t))(v84 + 40))(v52[7] + *(void *)(v84 + 72) * v45, v89, v88);
        goto LABEL_18;
      }
    }
    v52[(v45 >> 6) + 8] |= 1 << v45;
    *(void *)(v52[6] + 8 * v45) = v32;
    v39((char *)(v52[7] + *(void *)(v84 + 72) * v45), v89, v88);
    uint64_t v53 = v52[2];
    BOOL v54 = __OFADD__(v53, 1);
    uint64_t v55 = v53 + 1;
    if (v54) {
      goto LABEL_26;
    }
    v52[2] = v55;
LABEL_18:
    *uint64_t v43 = v91;
    swift_bridgeObjectRelease();
    uint64_t v56 = (uint64_t)v76;
    sub_24A2A74A0();
    uint64_t v20 = v35;
    uint64_t v57 = v74;
    int v58 = v74(v56, 1, v35);
    sub_24A1B2D10(v56, &qword_26B174A40);
    uint64_t v25 = (uint64_t)v85;
    if (v58 != 1)
    {
      sub_24A2A7580();
      sub_24A1BFC58((unint64_t *)&qword_2697789C8, MEMORY[0x263F7BF58]);
      swift_allocError();
      sub_24A2A7560();
      swift_willThrow();
      (*v63)(v37, v78);
      ((void (*)(char *, uint64_t))*v64)(v90, v62);
      return (*v67)(v68, v20);
    }
    (*v63)(v37, v78);
    uint64_t v12 = v62;
    (*v64)(v90);
    uint64_t v23 = v68;
    (*v67)(v68, v35);
    sub_24A2A74A0();
    int v59 = v57(v25, 1, v35);
    uint64_t v3 = v87;
    uint64_t v5 = v88;
    uint64_t v10 = v61;
    if (v59 == 1) {
      return sub_24A1B2D10(v25, &qword_26B174A40);
    }
  }
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  uint64_t result = sub_24A2A7E80();
  __break(1u);
  return result;
}

uint64_t sub_24A1BE3B8@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  return ProvisioningCertificate.DeviceIdentity.Definition.init(derEncoded:)(a1, a2);
}

uint64_t sub_24A1BE3D0(long long *a1)
{
  sub_24A2A7480();
  sub_24A1BFC58(&qword_26B174A28, MEMORY[0x263F7BF30]);
  sub_24A2A77A0();
  uint64_t v3 = *(void *)(v1 + *(int *)(type metadata accessor for Release() + 20));
  swift_bridgeObjectRetain();
  sub_24A1E87CC(a1, v3);
  swift_bridgeObjectRelease();
  uint64_t v4 = v1 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_269778A30) + 36);
  type metadata accessor for ATLogProofs(0);
  sub_24A1BFC58(&qword_2697786F0, (void (*)(uint64_t))type metadata accessor for ATLogProofs);
  sub_24A2A77A0();
  uint64_t v5 = v4 + *(int *)(type metadata accessor for TransparencyLogProofs() + 20);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B173100);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24A1B2CAC(v5, (uint64_t)v8, &qword_26B173100);
  uint64_t v9 = sub_24A2A6BC0();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9);
  if (v11 == 1) {
    return sub_24A2A7F30();
  }
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v15 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v14, v8, v9);
  sub_24A2A7F30();
  sub_24A1BFCA0(&qword_269778A50, MEMORY[0x270FA9238]);
  sub_24A2A77A0();
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v14, v9);
}

unint64_t sub_24A1BE668(uint64_t a1, uint64_t a2)
{
  sub_24A2A7F10();
  sub_24A2A78A0();
  uint64_t v4 = sub_24A2A7F50();

  return sub_24A1BEB00(a1, a2, v4);
}

unint64_t sub_24A1BE6E0(uint64_t a1)
{
  uint64_t v2 = sub_24A2A7F00();

  return sub_24A1BEBE4(a1, v2);
}

unint64_t sub_24A1BE724()
{
  unint64_t result = qword_26B174B00;
  if (!qword_26B174B00)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26B174B08);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B174B00);
  }
  return result;
}

unint64_t sub_24A1BE780(uint64_t a1)
{
  sub_24A2A7F10();
  sub_24A1BE3D0(v4);
  uint64_t v2 = sub_24A2A7F50();

  return sub_24A1BEC80(a1, v2);
}

unint64_t sub_24A1BE7EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_24A2A7F10();
  sub_24A2A7F20();
  uint64_t v8 = sub_24A2A7F50();

  return sub_24A1BF1B0(a1, a2, a3, a4, v8);
}

unint64_t sub_24A1BE878(uint64_t a1)
{
  sub_24A2A6C00();
  sub_24A1BFCA0(&qword_26B174228, MEMORY[0x270FA9448]);
  uint64_t v2 = sub_24A2A7790();

  return sub_24A1BF284(a1, v2);
}

unint64_t sub_24A1BE8F8(unsigned __int8 a1)
{
  sub_24A2A7F10();
  sub_24A2A7F20();
  uint64_t v2 = sub_24A2A7F50();

  return sub_24A1BF404(a1, v2);
}

unint64_t sub_24A1BE964(uint64_t a1)
{
  sub_24A2A7F10();
  type metadata accessor for CFString(0);
  sub_24A1BFC58(&qword_2697789F0, type metadata accessor for CFString);
  sub_24A2A6C90();
  uint64_t v2 = sub_24A2A7F50();

  return sub_24A1BF4A4(a1, v2);
}

unint64_t sub_24A1BEA18(void *a1)
{
  sub_24A2A7F10();
  sub_24A2A7F30();
  if (a1)
  {
    type metadata accessor for CFString(0);
    sub_24A1BFC58(&qword_2697789F0, type metadata accessor for CFString);
    id v2 = a1;
    sub_24A2A6C90();
  }
  uint64_t v3 = sub_24A2A7F50();

  return sub_24A1BF600((uint64_t)a1, v3);
}

unint64_t sub_24A1BEB00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_24A2A7E40() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_24A2A7E40() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_24A1BEBE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t sub_24A1BEC80(uint64_t a1, uint64_t a2)
{
  uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&qword_269778A30);
  MEMORY[0x270FA5388](v50);
  uint64_t v7 = (char *)v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = v2 + 64;
  uint64_t v9 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v10 = a2 & ~v9;
  if (((*(void *)(v2 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
    return v10;
  }
  uint64_t v11 = ~v9;
  uint64_t v12 = *(void *)(v5 + 72);
  uint64_t v13 = &qword_269778A30;
  uint64_t v44 = v2 + 64;
  uint64_t v45 = v2;
  uint64_t v42 = v12;
  uint64_t v43 = ~v9;
  uint64_t v41 = a1;
  while (1)
  {
    BOOL v14 = v13;
    sub_24A1B2CAC(*(void *)(v2 + 48) + v12 * v10, (uint64_t)v7, v13);
    if ((sub_24A2A7460() & 1) == 0) {
      goto LABEL_5;
    }
    uint64_t v15 = type metadata accessor for Release();
    if ((sub_24A1E3AD4(*(void *)&v7[*(int *)(v15 + 20)], *(void *)(a1 + *(int *)(v15 + 20))) & 1) == 0) {
      goto LABEL_5;
    }
    uint64_t v16 = *(int *)(v50 + 36);
    uint64_t v17 = &v7[v16];
    uint64_t v18 = a1 + v16;
    if ((sub_24A1B234C((uint64_t)&v7[v16], a1 + v16) & 1) == 0) {
      goto LABEL_5;
    }
    uint64_t v19 = *(int *)(type metadata accessor for TransparencyLogProofs() + 20);
    uint64_t v20 = (uint64_t)&v17[v19];
    uint64_t v21 = v18 + v19;
    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B173100);
    uint64_t v48 = v40;
    uint64_t v23 = *(void *)(*(void *)(v22 - 8) + 64);
    MEMORY[0x270FA5388](v22 - 8);
    unint64_t v46 = (v23 + 15) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v24 = (char *)v40 - v46;
    sub_24A1B2CAC(v21, (uint64_t)v40 - v46, &qword_26B173100);
    uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_269778A40);
    BOOL v47 = v40;
    uint64_t v26 = MEMORY[0x270FA5388](v25 - 8);
    uint64_t v28 = (char *)v40 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v29 = (uint64_t)&v28[*(int *)(v26 + 56)];
    sub_24A1B2CAC(v20, (uint64_t)v28, &qword_26B173100);
    uint64_t v49 = v29;
    sub_24A1B2CAC((uint64_t)v24, v29, &qword_26B173100);
    uint64_t v30 = sub_24A2A6BC0();
    uint64_t v31 = *(void *)(v30 - 8);
    uint64_t v32 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v31 + 48);
    uint64_t v33 = v32(v28, 1, v30);
    if (v33 == 1) {
      break;
    }
    v40[1] = v40;
    MEMORY[0x270FA5388](v33);
    unint64_t v46 = (unint64_t)v40 - v46;
    sub_24A1B2CAC((uint64_t)v28, v46, &qword_26B173100);
    uint64_t v34 = v32((char *)v49, 1, v30);
    if (v34 == 1)
    {
      sub_24A1B2D10((uint64_t)v24, &qword_26B173100);
      (*(void (**)(unint64_t, uint64_t))(v31 + 8))(v46, v30);
      goto LABEL_4;
    }
    v40[0] = v40;
    MEMORY[0x270FA5388](v34);
    uint64_t v36 = (char *)v40 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, uint64_t, uint64_t))(v31 + 32))(v36, v49, v30);
    sub_24A1BFCA0(&qword_269778A48, MEMORY[0x270FA9238]);
    unint64_t v37 = v46;
    LODWORD(v49) = sub_24A2A77E0();
    uint64_t v38 = *(void (**)(char *, uint64_t))(v31 + 8);
    v38(v36, v30);
    sub_24A1B2D10((uint64_t)v24, &qword_26B173100);
    v38((char *)v37, v30);
    sub_24A1B2D10((uint64_t)v28, &qword_26B173100);
    uint64_t v8 = v44;
    uint64_t v2 = v45;
    uint64_t v12 = v42;
    uint64_t v11 = v43;
    a1 = v41;
    if (v49) {
      goto LABEL_16;
    }
LABEL_5:
    uint64_t v13 = v14;
    sub_24A1B2D10((uint64_t)v7, v14);
    unint64_t v10 = (v10 + 1) & v11;
    if (((*(void *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
      return v10;
    }
  }
  sub_24A1B2D10((uint64_t)v24, &qword_26B173100);
  if (v32((char *)v49, 1, v30) != 1)
  {
LABEL_4:
    sub_24A1B2D10((uint64_t)v28, &qword_269778A40);
    uint64_t v8 = v44;
    uint64_t v2 = v45;
    uint64_t v12 = v42;
    uint64_t v11 = v43;
    a1 = v41;
    goto LABEL_5;
  }
  sub_24A1B2D10((uint64_t)v28, &qword_26B173100);
LABEL_16:
  sub_24A1B2D10((uint64_t)v7, &qword_269778A30);
  return v10;
}

unint64_t sub_24A1BF1B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = a5 & ~v7;
  if ((*(void *)(v5 + 64 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
  {
    uint64_t v12 = ~v7;
    uint64_t v13 = *(void *)(v5 + 48);
    do
    {
      BOOL v14 = (void *)(v13 + 32 * v8);
      if (*v14 == a1)
      {
        BOOL v15 = v14[2] == a3 && v14[3] == a4;
        if (v15 || (sub_24A2A7E40() & 1) != 0) {
          break;
        }
      }
      unint64_t v8 = (v8 + 1) & v12;
    }
    while (((*(void *)(v6 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) != 0);
  }
  return v8;
}

unint64_t sub_24A1BF284(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = a1;
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  uint64_t v15 = v2 + 64;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v14 = ~v3;
    uint64_t v5 = sub_24A2A6C00();
    uint64_t v6 = v5;
    uint64_t v7 = *(void **)(v5 - 8);
    unint64_t v8 = (void (*)(char *, unint64_t, uint64_t))v7[2];
    uint64_t v9 = v7[8];
    uint64_t v10 = v7[9];
    uint64_t v11 = (uint64_t (**)(char *, uint64_t))(v7 + 1);
    do
    {
      MEMORY[0x270FA5388](v5);
      v8((char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), *(void *)(v17 + 48) + v10 * v4, v6);
      sub_24A1BFCA0(&qword_26B174230, MEMORY[0x270FA9448]);
      char v12 = sub_24A2A77E0();
      uint64_t v5 = (*v11)((char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
      if (v12) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v14;
    }
    while (((*(void *)(v15 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_24A1BF404(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(unsigned __int8 *)(v7 + result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(unsigned __int8 *)(v7 + result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t sub_24A1BF4A4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    type metadata accessor for CFString(0);
    uint64_t v6 = *(void **)(*(void *)(v2 + 48) + 8 * i);
    sub_24A1BFC58(&qword_2697789F0, type metadata accessor for CFString);
    id v7 = v6;
    char v8 = sub_24A2A6C80();

    if ((v8 & 1) == 0)
    {
      uint64_t v9 = ~v4;
      for (unint64_t i = (i + 1) & v9; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v9)
      {
        id v10 = *(id *)(*(void *)(v2 + 48) + 8 * i);
        char v11 = sub_24A2A6C80();

        if (v11) {
          break;
        }
      }
    }
  }
  return i;
}

unint64_t sub_24A1BF600(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v6 = v2;
    uint64_t v8 = ~v4;
    do
    {
      uint64_t v9 = *(void **)(*(void *)(v6 + 48) + 8 * v5);
      if (v9)
      {
        if (a1)
        {
          type metadata accessor for CFString(0);
          sub_24A1BFC58(&qword_2697789F0, type metadata accessor for CFString);
          id v10 = v9;
          char v11 = sub_24A2A6C80();

          if (v11) {
            return v5;
          }
        }
      }
      else if (!a1)
      {
        return v5;
      }
      unint64_t v5 = (v5 + 1) & v8;
    }
    while (((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5) & 1) != 0);
  }
  return v5;
}

unint64_t sub_24A1BF720(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174AF0);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  unint64_t v5 = (uint64_t *)((char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_26B174B30);
    id v7 = (void *)sub_24A2A7D60();
    uint64_t v8 = (char *)v5 + *(int *)(v2 + 48);
    uint64_t v9 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v10 = *(void *)(v3 + 72);
    while (1)
    {
      sub_24A1B2CAC(v9, (uint64_t)v5, &qword_26B174AF0);
      uint64_t v11 = *v5;
      unint64_t result = sub_24A1BE6E0(*v5);
      if (v13) {
        break;
      }
      unint64_t v14 = result;
      *(void *)((char *)v7 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(void *)(v7[6] + 8 * result) = v11;
      uint64_t v15 = v7[7];
      uint64_t v16 = sub_24A2A7510();
      unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v16 - 8) + 32))(v15 + *(void *)(*(void *)(v16 - 8) + 72) * v14, v8, v16);
      uint64_t v17 = v7[2];
      BOOL v18 = __OFADD__(v17, 1);
      uint64_t v19 = v17 + 1;
      if (v18) {
        goto LABEL_10;
      }
      v7[2] = v19;
      v9 += v10;
      if (!--v6) {
        return (unint64_t)v7;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x263F8EE80];
  }
  return result;
}

uint64_t sub_24A1BF8E8(uint64_t a1)
{
  return sub_24A1BD92C(a1, *(void **)(v1 + 16));
}

void *_s14DeviceIdentityVwCP(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s14DeviceIdentityVwxx()
{
  return swift_bridgeObjectRelease();
}

void *_s14DeviceIdentityVwca(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *_s14DeviceIdentityVwta(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s14DeviceIdentityVwet(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s14DeviceIdentityVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ProvisioningCertificate.DeviceIdentity()
{
  return &type metadata for ProvisioningCertificate.DeviceIdentity;
}

ValueMetadata *type metadata accessor for ProvisioningCertificate.DeviceIdentity.Definition()
{
  return &type metadata for ProvisioningCertificate.DeviceIdentity.Definition;
}

uint64_t sub_24A1BFA58(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t sub_24A1BFAC0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_26B174B20);
    uint64_t v3 = (void *)sub_24A2A7D60();
    for (uint64_t i = a1 + 32; ; i += 64)
    {
      sub_24A1B2CAC(i, (uint64_t)&v15, &qword_269778A18);
      uint64_t v5 = v15;
      uint64_t v6 = v16;
      uint64_t v7 = v17;
      uint64_t v8 = v18;
      unint64_t result = sub_24A1BE7EC(v15, v16, v17, v18);
      if (v10) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      uint64_t v11 = (uint64_t *)(v3[6] + 32 * result);
      uint64_t *v11 = v5;
      v11[1] = v6;
      v11[2] = v7;
      v11[3] = v8;
      unint64_t result = (unint64_t)sub_24A1BFBE4(&v19, (_OWORD *)(v3[7] + 32 * result));
      uint64_t v12 = v3[2];
      BOOL v13 = __OFADD__(v12, 1);
      uint64_t v14 = v12 + 1;
      if (v13) {
        goto LABEL_10;
      }
      v3[2] = v14;
      if (!--v1) {
        return (unint64_t)v3;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x263F8EE80];
  }
  return result;
}

_OWORD *sub_24A1BFBE4(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_24A1BFBF4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_24A1BFC58(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_24A1BFCA0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t SEP.Identity.chipID.getter()
{
  return *v0;
}

uint64_t SEP.Identity.ecid.getter()
{
  return *(void *)(v0 + 8);
}

void SEP.Identity.archBits.getter(unsigned char *a1@<X8>)
{
  char v2 = v1[17];
  char v3 = v1[18];
  *a1 = v1[16];
  a1[1] = v2;
  a1[2] = v3;
}

uint64_t SEP.Identity.swSeed.getter()
{
  return *(unsigned int *)(v0 + 20);
}

uint64_t SEP.Identity.ArchBits.productionStatus.getter()
{
  return *v0;
}

uint64_t SEP.Identity.ArchBits.securityMode.getter()
{
  return *(unsigned __int8 *)(v0 + 1);
}

void SEP.Identity.ArchBits.securityDomain.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 2);
}

uint64_t SEP.Identity.ArchBits.rawValue.getter()
{
  if (v0[1]) {
    int v1 = v0[2] & 3 | 4;
  }
  else {
    int v1 = v0[2] & 3;
  }
  if (*v0) {
    int v2 = 8;
  }
  else {
    int v2 = 0;
  }
  return v1 | v2;
}

uint64_t SEP.Identity.ArchBits.SecurityDomain.rawValue.getter()
{
  return *v0;
}

uint64_t SEP.Identity.ArchBits.SecurityDomain.init(rawValue:)@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  char v2 = result;
  if ((result & 0xFC) != 0) {
    char v2 = 4;
  }
  *a2 = v2;
  return result;
}

uint64_t sub_24A1BFD90()
{
  return sub_24A2A7F50();
}

uint64_t sub_24A1BFDD8()
{
  return sub_24A2A7F30();
}

uint64_t sub_24A1BFE04()
{
  return sub_24A2A7F50();
}

uint64_t sub_24A1BFE48@<X0>(unsigned __int8 *a1@<X0>, char *a2@<X8>)
{
  return SEP.Identity.ArchBits.SecurityDomain.init(rawValue:)(*a1, a2);
}

uint64_t SEP.Identity.ArchBits.init(rawValue:)@<X0>(int a1@<W0>, BOOL *a2@<X8>)
{
  char v2 = a1;
  uint64_t result = sub_24A24FFAC(0, 2uLL, a1);
  if (result > 3u)
  {
    __break(1u);
  }
  else
  {
    *a2 = (v2 & 8) != 0;
    a2[1] = (v2 & 4) != 0;
    a2[2] = result;
  }
  return result;
}

BOOL sub_24A1BFEA8(unsigned char *a1, unsigned char *a2)
{
  char v2 = a2[2];
  int v3 = a1[2] & 3;
  if (a1[1]) {
    v3 |= 4u;
  }
  if (a2[1]) {
    int v4 = v2 & 3 | 4;
  }
  else {
    int v4 = v2 & 3;
  }
  if (*a1) {
    int v5 = 8;
  }
  else {
    int v5 = 0;
  }
  int v6 = v5 | v3;
  if (*a2) {
    int v7 = 8;
  }
  else {
    int v7 = 0;
  }
  return v6 == (v4 | v7);
}

uint64_t sub_24A1BFF10@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = SEP.Identity.ArchBits.init(rawValue:)(*a1, v6);
  __int16 v4 = v6[0];
  if (v6[1]) {
    __int16 v5 = 256;
  }
  else {
    __int16 v5 = 0;
  }
  *(unsigned char *)(a2 + 2) = v6[2];
  *(_WORD *)a2 = v5 | v4;
  return result;
}

void sub_24A1BFF68(unsigned char *a1@<X8>)
{
  if (v1[1]) {
    char v2 = v1[2] & 3 | 4;
  }
  else {
    char v2 = v1[2] & 3;
  }
  if (*v1) {
    char v3 = 8;
  }
  else {
    char v3 = 0;
  }
  *a1 = v2 | v3;
}

uint64_t SEP.Identity.init(chipID:ecid:archBits:swSeed:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  char v5 = *a3;
  char v6 = a3[1];
  char v7 = a3[2];
  *(_DWORD *)a5 = result;
  *(void *)(a5 + 8) = a2;
  *(unsigned char *)(a5 + 16) = v5;
  *(unsigned char *)(a5 + 17) = v6;
  *(unsigned char *)(a5 + 18) = v7;
  *(_DWORD *)(a5 + 20) = a4;
  return result;
}

uint64_t SEP.Identity.init(data:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = sub_24A2A7860();
  MEMORY[0x270FA5388](v6 - 8);
  sub_24A2A7850();
  uint64_t v7 = sub_24A2A7820();
  if (!v8)
  {
    uint64_t result = sub_24A1A5384(a1, a2);
    goto LABEL_5;
  }
  SEP.Identity.init(string:)(v7, v8, &v11);
  uint64_t result = sub_24A1A5384(a1, a2);
  uint64_t v10 = v12;
  if (v12 == 2)
  {
LABEL_5:
    *a3 = 0;
    a3[1] = 0;
    uint64_t v10 = 2;
    goto LABEL_6;
  }
  *(_OWORD *)a3 = v11;
LABEL_6:
  a3[2] = v10;
  return result;
}

uint64_t SEP.Identity.init(string:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  v36[0] = 45;
  v36[1] = 0xE100000000000000;
  uint64_t v35[2] = v36;
  swift_bridgeObjectRetain();
  uint64_t v6 = (void *)sub_24A1C0540(4, 1, sub_24A1C24FC, (uint64_t)v35, a1, a2);
  swift_bridgeObjectRelease();
  if (v6[2] != 4) {
    goto LABEL_17;
  }
  uint64_t v7 = v6[4];
  uint64_t v8 = v6[5];
  if (!((v8 ^ (unint64_t)v7) >> 14)) {
    goto LABEL_17;
  }
  unint64_t v10 = v6[6];
  unint64_t v9 = v6[7];
  uint64_t v11 = sub_24A1C2428(v6[4], v6[5], v10, v9, 16);
  if ((v11 & 0x10000000000) != 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v12 = sub_24A1C14F8(v7, v8, v10, v9, 16);
    swift_bridgeObjectRelease();
    if ((v12 & 0x100000000) != 0) {
      goto LABEL_17;
    }
  }
  else
  {
    LODWORD(v12) = v11;
    if ((v11 & 0x100000000) != 0) {
      goto LABEL_17;
    }
  }
  if (v6[2] < 2uLL)
  {
    __break(1u);
    goto LABEL_29;
  }
  uint64_t v13 = v6[8];
  uint64_t v14 = v6[9];
  if (!((v14 ^ (unint64_t)v13) >> 14))
  {
LABEL_17:
    uint64_t result = swift_bridgeObjectRelease();
LABEL_18:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 2;
    return result;
  }
  unint64_t v16 = v6[10];
  unint64_t v15 = v6[11];
  uint64_t v17 = sub_24A1C2354(v6[8], v6[9], v16, v15, 16);
  if ((v18 & 0x100) == 0)
  {
    if ((v18 & 1) == 0)
    {
      long long v19 = (unsigned __int8 *)v17;
      goto LABEL_13;
    }
    goto LABEL_17;
  }
  swift_bridgeObjectRetain();
  long long v19 = sub_24A1C1404(v13, v14, v16, v15, 16);
  char v21 = v20;
  swift_bridgeObjectRelease();
  if (v21) {
    goto LABEL_17;
  }
LABEL_13:
  if (v6[2] < 3uLL)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  uint64_t v22 = v6[12];
  uint64_t v23 = v6[13];
  if (!((v23 ^ (unint64_t)v22) >> 14)) {
    goto LABEL_17;
  }
  unint64_t v25 = v6[14];
  unint64_t v24 = v6[15];
  unsigned int v26 = sub_24A1C227C(v6[12], v6[13], v25, v24, 16);
  if ((v26 & 0x10000) != 0)
  {
    swift_bridgeObjectRetain();
    unsigned int v27 = sub_24A1C1314(v22, v23, v25, v24, 16);
    swift_bridgeObjectRelease();
    if ((v27 & 0x100) != 0) {
      goto LABEL_17;
    }
  }
  else
  {
    unsigned int v27 = v26;
    if ((v26 & 0x100) != 0) {
      goto LABEL_17;
    }
  }
  if (v6[2] < 4uLL)
  {
LABEL_30:
    __break(1u);
    goto LABEL_17;
  }
  unint64_t v29 = v6[16];
  unint64_t v30 = v6[17];
  unint64_t v32 = v6[18];
  unint64_t v31 = v6[19];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (!((v30 ^ v29) >> 14)) {
    goto LABEL_17;
  }
  uint64_t v33 = sub_24A1C2428(v29, v30, v32, v31, 16);
  if ((v33 & 0x10000000000) != 0) {
    uint64_t v33 = sub_24A1C14F8(v29, v30, v32, v31, 16);
  }
  uint64_t v34 = v33;
  uint64_t result = swift_bridgeObjectRelease();
  if ((v34 & 0x100000000) != 0) {
    goto LABEL_18;
  }
  uint64_t result = sub_24A24FFAC(0, 2uLL, v27);
  if (result > 3u)
  {
    __break(1u);
  }
  else
  {
    *a3 = v12;
    a3[1] = v19;
    a3[2] = (v27 >> 3) & 1 | ((unint64_t)((v27 >> 2) & 1) << 8) & 0xFFFFFFFFFF00FFFFLL | ((unint64_t)result << 16) | (v34 << 32);
  }
  return result;
}

uint64_t SEP.Identity.string.getter()
{
  int v1 = *v0;
  uint64_t v2 = *((void *)v0 + 1);
  int v3 = *((unsigned __int8 *)v0 + 16);
  int v4 = *((unsigned __int8 *)v0 + 17);
  char v5 = *((unsigned char *)v0 + 18);
  int v6 = v0[5];
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B174BA0);
  uint64_t v7 = swift_allocObject();
  uint64_t v8 = MEMORY[0x263F8E8F8];
  uint64_t v9 = MEMORY[0x263F8E960];
  *(_OWORD *)(v7 + 16) = xmmword_24A2A8A90;
  *(void *)(v7 + 56) = v8;
  *(void *)(v7 + 64) = v9;
  *(_DWORD *)(v7 + 32) = v1;
  uint64_t v10 = MEMORY[0x263F8E9C0];
  *(void *)(v7 + 96) = MEMORY[0x263F8E970];
  *(void *)(v7 + 104) = v10;
  *(void *)(v7 + 72) = v2;
  char v11 = v5 & 3;
  if (v4) {
    char v11 = v5 & 3 | 4;
  }
  if (v3) {
    char v12 = 8;
  }
  else {
    char v12 = 0;
  }
  uint64_t v13 = MEMORY[0x263F8E7C0];
  *(void *)(v7 + 136) = MEMORY[0x263F8E778];
  *(void *)(v7 + 144) = v13;
  *(unsigned char *)(v7 + 112) = v11 | v12;
  *(void *)(v7 + 176) = v8;
  *(void *)(v7 + 184) = v9;
  *(_DWORD *)(v7 + 152) = v6;
  return sub_24A2A7840();
}

uint64_t SEP.Identity.udid.getter()
{
  int v1 = *v0;
  uint64_t v2 = *((void *)v0 + 1);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B174BA0);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_24A2A8AA0;
  uint64_t v4 = MEMORY[0x263F8E960];
  *(void *)(v3 + 56) = MEMORY[0x263F8E8F8];
  *(void *)(v3 + 64) = v4;
  uint64_t v5 = MEMORY[0x263F8E970];
  *(_DWORD *)(v3 + 32) = v1;
  uint64_t v6 = MEMORY[0x263F8E9C0];
  *(void *)(v3 + 96) = v5;
  *(void *)(v3 + 104) = v6;
  *(void *)(v3 + 72) = v2;
  return sub_24A2A7840();
}

uint64_t sub_24A1C0540(uint64_t a1, char a2, uint64_t (*a3)(void *), uint64_t a4, uint64_t a5, unint64_t a6)
{
  v50[3] = a4;
  if (a1 < 0) {
    goto LABEL_42;
  }
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = MEMORY[0x263F8EE78];
  uint64_t v47 = swift_allocObject();
  *(void *)(v47 + 16) = 15;
  uint64_t v11 = HIBYTE(a6) & 0xF;
  if (!a1 || ((a6 & 0x2000000000000000) != 0 ? (uint64_t v12 = HIBYTE(a6) & 0xF) : (uint64_t v12 = a5 & 0xFFFFFFFFFFFFLL), !v12))
  {
    if ((a6 & 0x2000000000000000) == 0) {
      uint64_t v11 = a5 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v30 = 7;
    if (((a6 >> 60) & ((a5 & 0x800000000000000) == 0)) != 0) {
      uint64_t v30 = 11;
    }
    sub_24A1C1078(v30 | (v11 << 16), v47, a2 & 1, v10);
    swift_bridgeObjectRelease();
    uint64_t v13 = *(void **)(v10 + 16);
    swift_bridgeObjectRetain();
    swift_release();
LABEL_39:
    swift_release();
    return (uint64_t)v13;
  }
  uint64_t v42 = a1;
  uint64_t v43 = v10;
  unint64_t v48 = 4 * v12;
  uint64_t v13 = (void *)MEMORY[0x263F8EE78];
  unint64_t v14 = 15;
  unint64_t v15 = 15;
  unint64_t v16 = 15;
  while (1)
  {
    v50[0] = sub_24A2A7930();
    v50[1] = v17;
    char v18 = a3(v50);
    if (v6)
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (uint64_t)v13;
    }
    char v19 = v18;
    swift_bridgeObjectRelease();
    if (v19) {
      break;
    }
    unint64_t v14 = sub_24A2A78B0();
LABEL_9:
    if (v48 == v14 >> 14) {
      goto LABEL_29;
    }
  }
  if (v15 >> 14 == v14 >> 14 && (a2 & 1) != 0)
  {
    unint64_t v14 = sub_24A2A78B0();
    *(void *)(v47 + 16) = v14;
    unint64_t v15 = v14;
    unint64_t v16 = v14;
    goto LABEL_9;
  }
  if (v14 >> 14 < v15 >> 14) {
    goto LABEL_41;
  }
  uint64_t v20 = sub_24A2A7950();
  uint64_t v44 = v21;
  uint64_t v45 = v20;
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v13 = sub_24A1DEDFC(0, v13[2] + 1, 1, v13);
  }
  unint64_t v27 = v13[2];
  unint64_t v26 = v13[3];
  if (v27 >= v26 >> 1) {
    uint64_t v13 = sub_24A1DEDFC((void *)(v26 > 1), v27 + 1, 1, v13);
  }
  void v13[2] = v27 + 1;
  uint64_t v28 = &v13[4 * v27];
  v28[4] = v45;
  v28[5] = v23;
  void v28[6] = v25;
  v28[7] = v44;
  *(void *)(v43 + 16) = v13;
  uint64_t v29 = sub_24A2A78B0();
  unint64_t v14 = v29;
  *(void *)(v47 + 16) = v29;
  if (v13[2] != v42)
  {
    unint64_t v15 = v29;
    unint64_t v16 = v29;
    goto LABEL_9;
  }
  unint64_t v16 = v29;
  unint64_t v15 = v29;
LABEL_29:
  if (v48 == v15 >> 14 && (a2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
LABEL_38:
    swift_bridgeObjectRetain();
    swift_release();
    goto LABEL_39;
  }
  if (v48 >= v16 >> 14)
  {
    uint64_t v31 = sub_24A2A7950();
    uint64_t v33 = v32;
    uint64_t v35 = v34;
    uint64_t v37 = v36;
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v13 = sub_24A1DEDFC(0, v13[2] + 1, 1, v13);
    }
    unint64_t v39 = v13[2];
    unint64_t v38 = v13[3];
    if (v39 >= v38 >> 1) {
      uint64_t v13 = sub_24A1DEDFC((void *)(v38 > 1), v39 + 1, 1, v13);
    }
    void v13[2] = v39 + 1;
    uint64_t v40 = &v13[4 * v39];
    v40[4] = v31;
    v40[5] = v33;
    v40[6] = v35;
    v40[7] = v37;
    *(void *)(v43 + 16) = v13;
    goto LABEL_38;
  }
LABEL_41:
  sub_24A2A7D10();
  __break(1u);
LABEL_42:
  uint64_t result = sub_24A2A7D10();
  __break(1u);
  return result;
}

void *sub_24A1C09E4(uint64_t a1, char a2, uint64_t (*a3)(uint64_t *), unint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v60 = *MEMORY[0x263EF8340];
  if (a1 < 0) {
    goto LABEL_74;
  }
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = MEMORY[0x263F8EE78];
  unint64_t v12 = a6 >> 62;
  unint64_t v13 = v11;
  uint64_t v14 = 0;
  switch(a6 >> 62)
  {
    case 1uLL:
      uint64_t v14 = (int)a5;
      break;
    case 2uLL:
      uint64_t v14 = *(void *)(a5 + 16);
      break;
    default:
      break;
  }
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v14;
  if (a1)
  {
    uint64_t v16 = 0;
    switch((int)v12)
    {
      case 0:
        if ((a6 & 0xFF000000000000) == 0)
        {
LABEL_13:
          uint64_t v16 = BYTE6(a6);
          goto LABEL_16;
        }
        uint64_t v17 = BYTE6(a6);
LABEL_19:
        char v46 = a2;
        uint64_t v49 = v15;
        unint64_t v45 = v13;
        if (v14 == v17)
        {
          char v18 = (void *)MEMORY[0x263F8EE78];
LABEL_21:
          if (v14 == v17 && (v46 & 1) != 0)
          {
            sub_24A1A5384(a5, a6);
          }
          else
          {
            if (v17 < v14) {
              goto LABEL_75;
            }
            unint64_t v13 = sub_24A2A6A80();
            uint64_t v19 = v32;
            sub_24A1A5384(a5, a6);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_71:
            }
              char v18 = sub_24A1DF2CC(0, v18[2] + 1, 1, v18);
            unint64_t v34 = v18[2];
            unint64_t v33 = v18[3];
            if (v34 >= v33 >> 1) {
              char v18 = sub_24A1DF2CC((void *)(v33 > 1), v34 + 1, 1, v18);
            }
            v18[2] = v34 + 1;
            uint64_t v35 = &v18[2 * v34];
            void v35[4] = v13;
            v35[5] = v19;
            *(void *)(v45 + 16) = v18;
          }
          swift_bridgeObjectRetain();
          swift_release();
          goto LABEL_61;
        }
        uint64_t v37 = a1;
        uint64_t v48 = a6 & 0x3FFFFFFFFFFFFFFFLL;
        uint64_t v43 = BYTE6(a6);
        char v18 = (void *)MEMORY[0x263F8EE78];
        unint64_t v42 = a6 >> 8;
        unint64_t v40 = a6 >> 24;
        unint64_t v41 = a6 >> 16;
        uint64_t v19 = v14;
        unint64_t v38 = a6 >> 40;
        unint64_t v39 = HIDWORD(a6);
        uint64_t v50 = v17;
        unint64_t v47 = a6;
        break;
      case 1:
        if ((a5 ^ (unint64_t)(a5 << 32)) >> 32) {
          goto LABEL_18;
        }
LABEL_14:
        uint64_t v16 = a5 >> 32;
        goto LABEL_16;
      case 2:
        uint64_t v17 = *(void *)(a5 + 24);
        if (*(void *)(a5 + 16) == v17) {
          goto LABEL_12;
        }
        if (v12 != 2) {
LABEL_18:
        }
          uint64_t v17 = a5 >> 32;
        goto LABEL_19;
      case 3:
        goto LABEL_16;
      default:
        JUMPOUT(0);
    }
    while (1)
    {
      if (v12)
      {
        if (v12 == 1)
        {
          if (v19 < (int)a5 || v19 >= a5 >> 32) {
            goto LABEL_67;
          }
          uint64_t v20 = sub_24A2A68E0();
          if (!v20)
          {
            __break(1u);
LABEL_73:
            __break(1u);
LABEL_74:
            sub_24A2A7D10();
            __break(1u);
LABEL_75:
            sub_24A2A7D10();
            __break(1u);
            JUMPOUT(0x24A1C1048);
          }
          uint64_t v21 = v20;
          unint64_t v13 = v48;
          uint64_t v22 = sub_24A2A6910();
          uint64_t v23 = v19 - v22;
          if (__OFSUB__(v19, v22)) {
            goto LABEL_69;
          }
        }
        else
        {
          if (v19 < *(void *)(a5 + 16))
          {
            __break(1u);
LABEL_66:
            __break(1u);
LABEL_67:
            __break(1u);
LABEL_68:
            __break(1u);
LABEL_69:
            __break(1u);
LABEL_70:
            __break(1u);
            goto LABEL_71;
          }
          if (v19 >= *(void *)(a5 + 24)) {
            goto LABEL_68;
          }
          uint64_t v25 = sub_24A2A68E0();
          if (!v25) {
            goto LABEL_73;
          }
          uint64_t v21 = v25;
          unint64_t v13 = v48;
          uint64_t v26 = sub_24A2A6910();
          uint64_t v23 = v19 - v26;
          if (__OFSUB__(v19, v26)) {
            goto LABEL_70;
          }
        }
        char v24 = *(unsigned char *)(v21 + v23);
        a6 = v47;
      }
      else
      {
        if (v19 >= v43) {
          goto LABEL_66;
        }
        uint64_t v53 = a5;
        char v54 = a6;
        char v55 = v42;
        char v56 = v41;
        char v57 = v40;
        char v58 = v39;
        char v59 = v38;
        char v24 = *((unsigned char *)&v53 + v19);
      }
      LOBYTE(v53) = v24;
      unint64_t v13 = a4;
      char v27 = a3(&v53);
      if (v6)
      {
        sub_24A1A5384(a5, a6);
        swift_release();
        swift_release();
        return v18;
      }
      if ((v27 & 1) == 0) {
        break;
      }
      if (v14 == v19 && (v46 & 1) != 0)
      {
        *(void *)(v49 + 16) = ++v19;
        uint64_t v14 = v19;
        goto LABEL_26;
      }
      if (v19 < v14) {
        goto LABEL_75;
      }
      uint64_t v44 = sub_24A2A6A80();
      uint64_t v29 = v28;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        char v18 = sub_24A1DF2CC(0, v18[2] + 1, 1, v18);
      }
      unint64_t v13 = v18[2];
      unint64_t v30 = v18[3];
      uint64_t v17 = v50;
      if (v13 >= v30 >> 1)
      {
        char v18 = sub_24A1DF2CC((void *)(v30 > 1), v13 + 1, 1, v18);
        uint64_t v17 = v50;
      }
      v18[2] = v13 + 1;
      uint64_t v31 = &v18[2 * v13];
      v31[4] = v44;
      v31[5] = v29;
      *(void *)(v45 + 16) = v18;
      *(void *)(v49 + 16) = ++v19;
      if (v18[2] == v37)
      {
        uint64_t v14 = v19;
        goto LABEL_21;
      }
      uint64_t v14 = v19;
LABEL_27:
      if (v19 == v17) {
        goto LABEL_21;
      }
    }
    ++v19;
LABEL_26:
    uint64_t v17 = v50;
    goto LABEL_27;
  }
LABEL_12:
  uint64_t v16 = 0;
  switch((int)v12)
  {
    case 1:
      goto LABEL_14;
    case 2:
      uint64_t v16 = *(void *)(a5 + 24);
      break;
    case 3:
      break;
    default:
      goto LABEL_13;
  }
LABEL_16:
  sub_24A1C11D4(v16, v15, a2 & 1, v13);
  sub_24A1A5384(a5, a6);
  char v18 = *(void **)(v13 + 16);
  swift_bridgeObjectRetain();
  swift_release();
LABEL_61:
  swift_release();
  return v18;
}

uint64_t sub_24A1C1078(unint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  unint64_t v4 = *(void *)(a2 + 16) >> 14;
  int v5 = (v4 == a1 >> 14) & a3;
  if (v5 == 1) {
    return v5 ^ 1u;
  }
  if (a1 >> 14 >= v4)
  {
    uint64_t v7 = sub_24A2A7950();
    uint64_t v9 = v8;
    uint64_t v11 = v10;
    uint64_t v13 = v12;
    uint64_t v14 = *(void **)(a4 + 16);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(a4 + 16) = v14;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v14 = sub_24A1DEDFC(0, v14[2] + 1, 1, v14);
      *(void *)(a4 + 16) = v14;
    }
    unint64_t v17 = v14[2];
    unint64_t v16 = v14[3];
    if (v17 >= v16 >> 1)
    {
      uint64_t v14 = sub_24A1DEDFC((void *)(v16 > 1), v17 + 1, 1, v14);
      *(void *)(a4 + 16) = v14;
    }
    v14[2] = v17 + 1;
    char v18 = &v14[4 * v17];
    v18[4] = v7;
    v18[5] = v9;
    v18[6] = v11;
    v18[7] = v13;
    return v5 ^ 1u;
  }
  uint64_t result = sub_24A2A7D10();
  __break(1u);
  return result;
}

uint64_t sub_24A1C11D4(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a2 + 16);
  int v6 = (v5 == a1) & a3;
  if (v6 == 1) {
    return v6 ^ 1u;
  }
  if (v5 <= a1)
  {
    uint64_t v8 = sub_24A2A6A80();
    uint64_t v10 = v9;
    uint64_t v11 = *(void **)(a4 + 16);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(a4 + 16) = v11;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v11 = sub_24A1DF2CC(0, v11[2] + 1, 1, v11);
      *(void *)(a4 + 16) = v11;
    }
    unint64_t v14 = v11[2];
    unint64_t v13 = v11[3];
    if (v14 >= v13 >> 1) {
      uint64_t v11 = sub_24A1DF2CC((void *)(v13 > 1), v14 + 1, 1, v11);
    }
    v11[2] = v14 + 1;
    uint64_t v15 = &v11[2 * v14];
    v15[4] = v8;
    v15[5] = v10;
    *(void *)(a4 + 16) = v11;
    return v6 ^ 1u;
  }
  uint64_t result = sub_24A2A7D10();
  __break(1u);
  return result;
}

uint64_t sub_24A1C1314(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = a1;
  uint64_t v16 = a2;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  sub_24A1C2A28();
  swift_bridgeObjectRetain();
  uint64_t v7 = sub_24A2A7940();
  unint64_t v8 = v6;
  if ((v6 & 0x1000000000000000) == 0)
  {
    if ((v6 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v10 = HIBYTE(v8) & 0xF;
    uint64_t v15 = v7;
    uint64_t v16 = v8 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v9 = (unsigned __int8 *)&v15;
    goto LABEL_7;
  }
  uint64_t v7 = sub_24A1C1D90();
  unint64_t v12 = v11;
  swift_bridgeObjectRelease();
  unint64_t v8 = v12;
  if ((v12 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v7 & 0x1000000000000000) != 0)
  {
    uint64_t v9 = (unsigned __int8 *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v10 = v7 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v9 = (unsigned __int8 *)sub_24A2A7CA0();
  }
LABEL_7:
  unsigned __int16 v13 = (unsigned __int16)sub_24A1C15EC(v9, v10, a5);
  swift_bridgeObjectRelease();
  return v13 & 0x1FF;
}

unsigned __int8 *sub_24A1C1404(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int64_t a5)
{
  uint64_t v15 = a1;
  uint64_t v16 = a2;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  sub_24A1C2A28();
  swift_bridgeObjectRetain();
  uint64_t v7 = sub_24A2A7940();
  unint64_t v8 = v6;
  if ((v6 & 0x1000000000000000) == 0)
  {
    if ((v6 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v10 = HIBYTE(v8) & 0xF;
    uint64_t v15 = v7;
    uint64_t v16 = v8 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v9 = (unsigned __int8 *)&v15;
    goto LABEL_7;
  }
  uint64_t v7 = sub_24A1C1D90();
  unint64_t v12 = v11;
  swift_bridgeObjectRelease();
  unint64_t v8 = v12;
  if ((v12 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v7 & 0x1000000000000000) != 0)
  {
    uint64_t v9 = (unsigned __int8 *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v10 = v7 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v9 = (unsigned __int8 *)sub_24A2A7CA0();
  }
LABEL_7:
  unsigned __int16 v13 = sub_24A1C1894(v9, v10, a5);
  swift_bridgeObjectRelease();
  return v13;
}

uint64_t sub_24A1C14F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v15 = a1;
  uint64_t v16 = a2;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  sub_24A1C2A28();
  swift_bridgeObjectRetain();
  uint64_t v7 = sub_24A2A7940();
  unint64_t v8 = v6;
  if ((v6 & 0x1000000000000000) == 0)
  {
    if ((v6 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v10 = HIBYTE(v8) & 0xF;
    uint64_t v15 = v7;
    uint64_t v16 = v8 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v9 = (unsigned __int8 *)&v15;
    goto LABEL_7;
  }
  uint64_t v7 = sub_24A1C1D90();
  unint64_t v12 = v11;
  swift_bridgeObjectRelease();
  unint64_t v8 = v12;
  if ((v12 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v7 & 0x1000000000000000) != 0)
  {
    uint64_t v9 = (unsigned __int8 *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v10 = v7 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v9 = (unsigned __int8 *)sub_24A2A7CA0();
  }
LABEL_7:
  unsigned __int16 v13 = sub_24A1C1B10(v9, v10, a5);
  swift_bridgeObjectRelease();
  return v13 | ((((unint64_t)v13 >> 32) & 1) << 32);
}

unsigned __int8 *sub_24A1C15EC(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  int v3 = *result;
  if (v3 == 43)
  {
    if (a2 >= 1)
    {
      uint64_t v14 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v15 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v16 = a3 + 55;
        }
        else
        {
          unsigned __int8 v15 = 97;
          unsigned __int8 v16 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v17 = a3 + 48;
        }
        else {
          unsigned __int8 v17 = 58;
        }
        if (result)
        {
          LOBYTE(v8) = 0;
          uint64_t v18 = result + 1;
          do
          {
            unsigned int v19 = *v18;
            if (v19 < 0x30 || v19 >= v17)
            {
              if (v19 < 0x41 || v19 >= v16)
              {
                unsigned __int8 v12 = 0;
                int v13 = 1;
                if (v19 < 0x61 || v19 >= v15) {
                  return (unsigned __int8 *)(v12 | (v13 << 8));
                }
                char v20 = -87;
              }
              else
              {
                char v20 = -55;
              }
            }
            else
            {
              char v20 = -48;
            }
            if (((v8 * (unsigned __int16)a3) & 0xFF00) != 0) {
              goto LABEL_72;
            }
            unsigned int v8 = (v8 * a3) + (v19 + v20);
            if ((v8 >> 8)) {
              goto LABEL_72;
            }
            ++v18;
            --v14;
          }
          while (v14);
LABEL_48:
          int v13 = 0;
          unsigned __int8 v12 = v8;
          return (unsigned __int8 *)(v12 | (v13 << 8));
        }
        goto LABEL_71;
      }
LABEL_72:
      unsigned __int8 v12 = 0;
      int v13 = 1;
      return (unsigned __int8 *)(v12 | (v13 << 8));
    }
  }
  else
  {
    if (v3 != 45)
    {
      if (a2)
      {
        unsigned __int8 v21 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v22 = a3 + 55;
        }
        else
        {
          unsigned __int8 v21 = 97;
          unsigned __int8 v22 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v23 = a3 + 48;
        }
        else {
          unsigned __int8 v23 = 58;
        }
        if (result)
        {
          LOBYTE(v24) = 0;
          do
          {
            unsigned int v25 = *result;
            if (v25 < 0x30 || v25 >= v23)
            {
              if (v25 < 0x41 || v25 >= v22)
              {
                unsigned __int8 v12 = 0;
                int v13 = 1;
                if (v25 < 0x61 || v25 >= v21) {
                  return (unsigned __int8 *)(v12 | (v13 << 8));
                }
                char v26 = -87;
              }
              else
              {
                char v26 = -55;
              }
            }
            else
            {
              char v26 = -48;
            }
            if (((v24 * (unsigned __int16)a3) & 0xFF00) != 0) {
              goto LABEL_72;
            }
            unsigned int v24 = (v24 * a3) + (v25 + v26);
            if ((v24 >> 8)) {
              goto LABEL_72;
            }
            ++result;
            --a2;
          }
          while (a2);
          int v13 = 0;
          unsigned __int8 v12 = v24;
          return (unsigned __int8 *)(v12 | (v13 << 8));
        }
        goto LABEL_71;
      }
      goto LABEL_72;
    }
    if (a2 >= 1)
    {
      uint64_t v4 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v5 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v6 = a3 + 55;
        }
        else
        {
          unsigned __int8 v5 = 97;
          unsigned __int8 v6 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v7 = a3 + 48;
        }
        else {
          unsigned __int8 v7 = 58;
        }
        if (result)
        {
          LOBYTE(v8) = 0;
          uint64_t v9 = result + 1;
          while (1)
          {
            unsigned int v10 = *v9;
            if (v10 < 0x30 || v10 >= v7)
            {
              if (v10 < 0x41 || v10 >= v6)
              {
                unsigned __int8 v12 = 0;
                int v13 = 1;
                if (v10 < 0x61 || v10 >= v5) {
                  return (unsigned __int8 *)(v12 | (v13 << 8));
                }
                char v11 = -87;
              }
              else
              {
                char v11 = -55;
              }
            }
            else
            {
              char v11 = -48;
            }
            if (((v8 * (unsigned __int16)a3) & 0xFF00) != 0) {
              goto LABEL_72;
            }
            unsigned int v8 = (v8 * a3) - (v10 + v11);
            if ((v8 & 0xFFFFFF00) != 0) {
              goto LABEL_72;
            }
            ++v9;
            if (!--v4) {
              goto LABEL_48;
            }
          }
        }
LABEL_71:
        unsigned __int8 v12 = 0;
        int v13 = 0;
        return (unsigned __int8 *)(v12 | (v13 << 8));
      }
      goto LABEL_72;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

unsigned __int8 *sub_24A1C1894(unsigned __int8 *result, uint64_t a2, int64_t a3)
{
  uint64_t v3 = a2;
  int v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        uint64_t v5 = a2 - 1;
        if (a2 != 1)
        {
          unsigned __int8 v6 = a3 + 48;
          unsigned __int8 v7 = a3 + 55;
          unsigned __int8 v8 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v6 = 58;
          }
          else
          {
            unsigned __int8 v8 = 97;
            unsigned __int8 v7 = 65;
          }
          if (result)
          {
            unint64_t v9 = 0;
            for (uint64_t i = result + 1; ; ++i)
            {
              unsigned int v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  uint64_t v13 = 0;
                  if (v11 < 0x61 || v11 >= v8) {
                    return (unsigned __int8 *)v13;
                  }
                  char v12 = -87;
                }
                else
                {
                  char v12 = -55;
                }
              }
              else
              {
                char v12 = -48;
              }
              if (!is_mul_ok(v9, a3)) {
                return 0;
              }
              unint64_t v14 = v9 * a3;
              unsigned __int8 v15 = v11 + v12;
              BOOL v16 = v14 >= v15;
              unint64_t v9 = v14 - v15;
              if (!v16) {
                return 0;
              }
              if (!--v5) {
                return (unsigned __int8 *)v9;
              }
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_67;
    }
    if (a2)
    {
      unsigned __int8 v26 = a3 + 48;
      unsigned __int8 v27 = a3 + 55;
      unsigned __int8 v28 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v26 = 58;
      }
      else
      {
        unsigned __int8 v28 = 97;
        unsigned __int8 v27 = 65;
      }
      if (result)
      {
        unint64_t v29 = 0;
        do
        {
          unsigned int v30 = *result;
          if (v30 < 0x30 || v30 >= v26)
          {
            if (v30 < 0x41 || v30 >= v27)
            {
              uint64_t v13 = 0;
              if (v30 < 0x61 || v30 >= v28) {
                return (unsigned __int8 *)v13;
              }
              char v31 = -87;
            }
            else
            {
              char v31 = -55;
            }
          }
          else
          {
            char v31 = -48;
          }
          if (!is_mul_ok(v29, a3)) {
            return 0;
          }
          unint64_t v32 = v29 * a3;
          unsigned __int8 v33 = v30 + v31;
          BOOL v16 = __CFADD__(v32, v33);
          unint64_t v29 = v32 + v33;
          if (v16) {
            return 0;
          }
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)v29;
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_67:
    __break(1u);
    return result;
  }
  uint64_t v17 = a2 - 1;
  if (a2 == 1) {
    return 0;
  }
  unsigned __int8 v18 = a3 + 48;
  unsigned __int8 v19 = a3 + 55;
  unsigned __int8 v20 = a3 + 87;
  if (a3 > 10)
  {
    unsigned __int8 v18 = 58;
  }
  else
  {
    unsigned __int8 v20 = 97;
    unsigned __int8 v19 = 65;
  }
  if (!result) {
    return 0;
  }
  unint64_t v9 = 0;
  unsigned __int8 v21 = result + 1;
  do
  {
    unsigned int v22 = *v21;
    if (v22 < 0x30 || v22 >= v18)
    {
      if (v22 < 0x41 || v22 >= v19)
      {
        uint64_t v13 = 0;
        if (v22 < 0x61 || v22 >= v20) {
          return (unsigned __int8 *)v13;
        }
        char v23 = -87;
      }
      else
      {
        char v23 = -55;
      }
    }
    else
    {
      char v23 = -48;
    }
    if (!is_mul_ok(v9, a3)) {
      return 0;
    }
    unint64_t v24 = v9 * a3;
    unsigned __int8 v25 = v22 + v23;
    BOOL v16 = __CFADD__(v24, v25);
    unint64_t v9 = v24 + v25;
    if (v16) {
      return 0;
    }
    ++v21;
    --v17;
  }
  while (v17);
  return (unsigned __int8 *)v9;
}

unsigned __int8 *sub_24A1C1B10(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  int v3 = *result;
  if (v3 == 43)
  {
    if (a2 >= 1)
    {
      uint64_t v16 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v17 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v18 = a3 + 55;
        }
        else
        {
          unsigned __int8 v17 = 97;
          unsigned __int8 v18 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v19 = a3 + 48;
        }
        else {
          unsigned __int8 v19 = 58;
        }
        if (result)
        {
          unsigned int v8 = 0;
          unsigned __int8 v20 = result + 1;
          do
          {
            unsigned int v21 = *v20;
            if (v21 < 0x30 || v21 >= v19)
            {
              if (v21 < 0x41 || v21 >= v18)
              {
                unsigned int v12 = 0;
                unsigned __int8 v13 = 1;
                if (v21 < 0x61 || v21 >= v17) {
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                }
                char v22 = -87;
              }
              else
              {
                char v22 = -55;
              }
            }
            else
            {
              char v22 = -48;
            }
            unint64_t v23 = v8 * (unint64_t)a3;
            if ((v23 & 0xFFFFFFFF00000000) != 0) {
              goto LABEL_72;
            }
            unsigned __int8 v24 = v21 + v22;
            unsigned int v8 = v23 + v24;
            if (__CFADD__(v23, v24)) {
              goto LABEL_72;
            }
            ++v20;
            --v16;
          }
          while (v16);
LABEL_48:
          unsigned __int8 v13 = 0;
          unsigned int v12 = v8;
          return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
        }
        goto LABEL_71;
      }
LABEL_72:
      unsigned int v12 = 0;
      unsigned __int8 v13 = 1;
      return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
    }
  }
  else
  {
    if (v3 != 45)
    {
      if (a2)
      {
        unsigned __int8 v25 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v26 = a3 + 55;
        }
        else
        {
          unsigned __int8 v25 = 97;
          unsigned __int8 v26 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v27 = a3 + 48;
        }
        else {
          unsigned __int8 v27 = 58;
        }
        if (result)
        {
          unsigned int v28 = 0;
          do
          {
            unsigned int v29 = *result;
            if (v29 < 0x30 || v29 >= v27)
            {
              if (v29 < 0x41 || v29 >= v26)
              {
                unsigned int v12 = 0;
                unsigned __int8 v13 = 1;
                if (v29 < 0x61 || v29 >= v25) {
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                }
                char v30 = -87;
              }
              else
              {
                char v30 = -55;
              }
            }
            else
            {
              char v30 = -48;
            }
            unint64_t v31 = v28 * (unint64_t)a3;
            if ((v31 & 0xFFFFFFFF00000000) != 0) {
              goto LABEL_72;
            }
            unsigned __int8 v32 = v29 + v30;
            unsigned int v28 = v31 + v32;
            if (__CFADD__(v31, v32)) {
              goto LABEL_72;
            }
            ++result;
            --a2;
          }
          while (a2);
          unsigned __int8 v13 = 0;
          unsigned int v12 = v28;
          return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
        }
        goto LABEL_71;
      }
      goto LABEL_72;
    }
    if (a2 >= 1)
    {
      uint64_t v4 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v5 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v6 = a3 + 55;
        }
        else
        {
          unsigned __int8 v5 = 97;
          unsigned __int8 v6 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v7 = a3 + 48;
        }
        else {
          unsigned __int8 v7 = 58;
        }
        if (result)
        {
          unsigned int v8 = 0;
          unint64_t v9 = result + 1;
          while (1)
          {
            unsigned int v10 = *v9;
            if (v10 < 0x30 || v10 >= v7)
            {
              if (v10 < 0x41 || v10 >= v6)
              {
                unsigned int v12 = 0;
                unsigned __int8 v13 = 1;
                if (v10 < 0x61 || v10 >= v5) {
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                }
                char v11 = -87;
              }
              else
              {
                char v11 = -55;
              }
            }
            else
            {
              char v11 = -48;
            }
            unint64_t v14 = v8 * (unint64_t)a3;
            if ((v14 & 0xFFFFFFFF00000000) != 0) {
              goto LABEL_72;
            }
            unsigned __int8 v15 = v10 + v11;
            unsigned int v8 = v14 - v15;
            if (v14 < v15) {
              goto LABEL_72;
            }
            ++v9;
            if (!--v4) {
              goto LABEL_48;
            }
          }
        }
LABEL_71:
        unsigned int v12 = 0;
        unsigned __int8 v13 = 0;
        return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
      }
      goto LABEL_72;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_24A1C1D90()
{
  unint64_t v0 = sub_24A2A7950();
  uint64_t v4 = sub_24A1C1E10(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_24A1C1E10(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if ((a4 & 0x1000000000000000) != 0)
  {
    unint64_t v9 = sub_24A1C1F68(a1, a2, a3, a4);
    if (v9)
    {
      uint64_t v10 = v9;
      char v11 = sub_24A1C5748(v9, 0);
      unint64_t v12 = sub_24A1C2068((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v12 != v10)
      {
        __break(1u);
LABEL_11:
        sub_24A2A7CA0();
LABEL_4:
        JUMPOUT(0x24C5BF030);
      }
    }
    else
    {
      char v11 = (void *)MEMORY[0x263F8EE78];
    }
    uint64_t v13 = MEMORY[0x24C5BF030](v11 + 4, v11[2]);
    swift_release();
    return v13;
  }
  else
  {
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return MEMORY[0x24C5BF030]((char *)v14 + (a1 >> 16), (a2 >> 16) - (a1 >> 16));
  }
}

unint64_t sub_24A1C1F68(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7 = result;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0) {
    LOBYTE(v8) = 1;
  }
  uint64_t v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    uint64_t result = sub_24A251948(result, a3, a4);
    unint64_t v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    uint64_t result = sub_24A251948(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0) {
      return (a2 >> 16) - (v7 >> 16);
    }
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  unint64_t v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0) {
    unint64_t v10 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (v10 < v7 >> 16)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v10 < a2 >> 16)
  {
LABEL_17:
    __break(1u);
    return result;
  }

  return sub_24A2A7900();
}

unint64_t sub_24A1C2068(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  uint64_t v9 = (void *)result;
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
    unint64_t v12 = a4;
    uint64_t v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0) {
    goto LABEL_36;
  }
  unint64_t v10 = a5 >> 14;
  unint64_t v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    uint64_t v11 = 0;
    unint64_t v12 = a4;
LABEL_33:
    void *v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  uint64_t v11 = 0;
  uint64_t v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0) {
    LOBYTE(v14) = 1;
  }
  uint64_t v15 = 4 << v14;
  uint64_t v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0) {
    uint64_t v16 = a6 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v23 = v16;
  uint64_t v26 = a3 - 1;
  unint64_t v12 = a4;
  while (1)
  {
    unint64_t v17 = v12 & 0xC;
    uint64_t result = v12;
    if (v17 == v15) {
      uint64_t result = sub_24A251948(v12, a6, a7);
    }
    if (result >> 14 < v27 || result >> 14 >= v10) {
      break;
    }
    if ((a7 & 0x1000000000000000) != 0)
    {
      uint64_t result = sub_24A2A7910();
      char v19 = result;
      if (v17 != v15) {
        goto LABEL_23;
      }
    }
    else
    {
      unint64_t v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        char v19 = *((unsigned char *)v28 + v18);
        if (v17 != v15) {
          goto LABEL_23;
        }
      }
      else
      {
        uint64_t result = v21;
        if ((a6 & 0x1000000000000000) == 0) {
          uint64_t result = sub_24A2A7CA0();
        }
        char v19 = *(unsigned char *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0) {
            goto LABEL_24;
          }
          goto LABEL_27;
        }
      }
    }
    uint64_t result = sub_24A251948(v12, a6, a7);
    unint64_t v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      unint64_t v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16) {
      goto LABEL_35;
    }
    unint64_t v12 = sub_24A2A78E0();
LABEL_29:
    *(unsigned char *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      uint64_t v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14) {
      goto LABEL_33;
    }
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_24A1C227C(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  if ((a4 & 0x1000000000000000) != 0)
  {
    int v13 = 0;
    goto LABEL_8;
  }
  if ((a4 & 0x2000000000000000) != 0)
  {
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v11 = v14;
  }
  else if ((a3 & 0x1000000000000000) != 0)
  {
    uint64_t v11 = (void *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    uint64_t v11 = (void *)sub_24A2A7CA0();
  }
  uint64_t result = sub_24A1C32C4((uint64_t)v11, a1, a2, a3, a4, a5);
  if (!v5)
  {
    char v15 = BYTE1(result) & 1;
    int v13 = result | ((BYTE1(result) & 1) << 8);
LABEL_8:
    LOBYTE(v14[0]) = (a4 & 0x1000000000000000) != 0;
    return v13 | (LOBYTE(v14[0]) << 16);
  }
  return result;
}

uint64_t sub_24A1C2354(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, int64_t a5)
{
  if ((a4 & 0x1000000000000000) != 0)
  {
    uint64_t result = 0;
    goto LABEL_8;
  }
  if ((a4 & 0x2000000000000000) != 0)
  {
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v11 = v14;
  }
  else if ((a3 & 0x1000000000000000) != 0)
  {
    uint64_t v11 = (void *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    uint64_t v11 = (void *)sub_24A2A7CA0();
  }
  uint64_t result = sub_24A1C2EA4((uint64_t)v11, a1, a2, a3, a4, a5);
  if (!v5)
  {
    char v15 = v13 & 1;
LABEL_8:
    LOBYTE(v14[0]) = (a4 & 0x1000000000000000) != 0;
  }
  return result;
}

uint64_t sub_24A1C2428(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  if ((a4 & 0x1000000000000000) != 0)
  {
    LODWORD(result) = 0;
    unsigned __int8 v14 = 0;
    return result | ((unint64_t)v14 << 32) | (((a4 >> 60) & 1) << 40);
  }
  if ((a4 & 0x2000000000000000) != 0)
  {
    v13[0] = a3;
    v13[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v11 = v13;
  }
  else if ((a3 & 0x1000000000000000) != 0)
  {
    uint64_t v11 = (void *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    uint64_t v11 = (void *)sub_24A2A7CA0();
  }
  uint64_t result = sub_24A1C2A7C((uint64_t)v11, a1, a2, a3, a4, a5);
  if (!v5)
  {
    unsigned __int8 v14 = BYTE4(result) & 1;
    return result | ((unint64_t)v14 << 32) | (((a4 >> 60) & 1) << 40);
  }
  return result;
}

uint64_t sub_24A1C24FC(void *a1)
{
  unint64_t v2 = *(void **)(v1 + 16);
  if (*a1 == *v2 && a1[1] == v2[1]) {
    return 1;
  }
  else {
    return sub_24A2A7E40() & 1;
  }
}

BOOL _s16CloudAttestation3SEPO8IdentityV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 != *(_DWORD *)a2 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
    return 0;
  }
  char v4 = *(unsigned char *)(a2 + 18);
  int v5 = *(unsigned char *)(a1 + 18) & 3;
  if (*(unsigned char *)(a1 + 17)) {
    v5 |= 4u;
  }
  if (*(unsigned char *)(a2 + 17)) {
    int v6 = v4 & 3 | 4;
  }
  else {
    int v6 = v4 & 3;
  }
  if (*(unsigned char *)(a1 + 16)) {
    int v7 = 8;
  }
  else {
    int v7 = 0;
  }
  int v8 = v7 | v5;
  if (*(unsigned char *)(a2 + 16)) {
    int v9 = 8;
  }
  else {
    int v9 = 0;
  }
  return v8 == (v6 | v9) && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20);
}

unint64_t sub_24A1C25F0()
{
  unint64_t result = qword_269778A58;
  if (!qword_269778A58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269778A58);
  }
  return result;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t _s8IdentityVwet(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t _s8IdentityVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SEP.Identity()
{
  return &type metadata for SEP.Identity;
}

uint64_t __swift_memcpy3_1(uint64_t result, __int16 *a2)
{
  __int16 v2 = *a2;
  *(unsigned char *)(result + 2) = *((unsigned char *)a2 + 2);
  *(_WORD *)__n128 result = v2;
  return result;
}

uint64_t _s8IdentityV8ArchBitsVwet(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF)
  {
    if ((a2 + 33554177) >> 24)
    {
      int v2 = *((unsigned __int8 *)a1 + 3);
      if (*((unsigned char *)a1 + 3)) {
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 16776961;
      }
    }
    else
    {
      int v2 = *(unsigned __int16 *)((char *)a1 + 3);
      if (*(unsigned __int16 *)((char *)a1 + 3)) {
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 16776961;
      }
    }
  }
  unsigned int v4 = *(unsigned __int8 *)a1;
  BOOL v5 = v4 >= 2;
  int v6 = (v4 + 2147483646) & 0x7FFFFFFF;
  if (!v5) {
    int v6 = -1;
  }
  return (v6 + 1);
}

uint64_t _s8IdentityV8ArchBitsVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if ((a3 + 33554177) >> 24) {
    int v3 = 1;
  }
  else {
    int v3 = 2;
  }
  if (a3 <= 0xFE) {
    int v3 = 0;
  }
  if (a2 > 0xFE)
  {
    *(_WORD *)__n128 result = a2 - 255;
    *(unsigned char *)(result + 2) = (a2 - 255) >> 16;
    if (v3)
    {
      unsigned int v4 = ((a2 - 255) >> 24) + 1;
      if (v3 == 2) {
        *(_WORD *)(result + 3) = v4;
      }
      else {
        *(unsigned char *)(result + 3) = v4;
      }
    }
  }
  else
  {
    if (!v3) {
      goto LABEL_10;
    }
    if (v3 == 2)
    {
      *(_WORD *)(result + 3) = 0;
LABEL_10:
      if (!a2) {
        return result;
      }
LABEL_16:
      *(unsigned char *)__n128 result = a2 + 1;
      return result;
    }
    *(unsigned char *)(result + 3) = 0;
    if (a2) {
      goto LABEL_16;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SEP.Identity.ArchBits()
{
  return &type metadata for SEP.Identity.ArchBits;
}

unsigned char *__swift_memcpy1_1(unsigned char *result, unsigned char *a2)
{
  *__n128 result = *a2;
  return result;
}

uint64_t _s8IdentityV8ArchBitsV14SecurityDomainOwet(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *_s8IdentityV8ArchBitsV14SecurityDomainOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *__n128 result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24A1C2998);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 3;
        break;
    }
  }
  return result;
}

uint64_t sub_24A1C29C0(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_24A1C29C8(unsigned char *result, char a2)
{
  *__n128 result = a2;
  return result;
}

ValueMetadata *type metadata accessor for SEP.Identity.ArchBits.SecurityDomain()
{
  return &type metadata for SEP.Identity.ArchBits.SecurityDomain;
}

uint64_t sub_24A1C29E0()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_24A1C2A18()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

unint64_t sub_24A1C2A28()
{
  unint64_t result = qword_269778A60;
  if (!qword_269778A60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269778A60);
  }
  return result;
}

uint64_t sub_24A1C2A7C(uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  unint64_t v10 = a2;
  uint64_t v11 = result;
  uint64_t v12 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000) == 0) {
    LOBYTE(v12) = 1;
  }
  uint64_t v13 = 4 << v12;
  unint64_t v14 = a2 & 0xC;
  if (v14 == 4 << v12)
  {
    unint64_t result = sub_24A251948(a2, a4, a5);
    a2 = result;
    if ((a5 & 0x1000000000000000) == 0)
    {
LABEL_5:
      int64_t v15 = a2 >> 16;
      if (v14 != v13) {
        goto LABEL_6;
      }
      goto LABEL_14;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
    goto LABEL_5;
  }
  unint64_t v16 = a4 & 0xFFFFFFFFFFFFLL;
  if ((a5 & 0x2000000000000000) != 0) {
    unint64_t v16 = HIBYTE(a5) & 0xF;
  }
  if (v16 < a2 >> 16) {
    goto LABEL_104;
  }
  unint64_t result = sub_24A2A7900();
  int64_t v15 = result;
  if (v14 == v13)
  {
LABEL_14:
    unint64_t result = sub_24A251948(v10, a4, a5);
    unint64_t v10 = result;
  }
LABEL_6:
  if ((a3 & 0xC) == v13)
  {
    unint64_t result = sub_24A251948(a3, a4, a5);
    a3 = result;
    if ((a5 & 0x1000000000000000) == 0) {
      goto LABEL_8;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
LABEL_8:
    unint64_t result = (a3 >> 16) - (v10 >> 16);
    goto LABEL_21;
  }
  unint64_t v17 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000) == 0) {
    unint64_t v17 = a4 & 0xFFFFFFFFFFFFLL;
  }
  if (v17 < v10 >> 16) {
    goto LABEL_100;
  }
  if (v17 < a3 >> 16)
  {
LABEL_101:
    __break(1u);
    goto LABEL_102;
  }
  unint64_t result = sub_24A2A7900();
LABEL_21:
  int64_t v18 = v15 + result;
  if (__OFADD__(v15, result))
  {
    __break(1u);
    goto LABEL_99;
  }
  if (v18 < v15)
  {
LABEL_99:
    __break(1u);
LABEL_100:
    __break(1u);
    goto LABEL_101;
  }
  char v19 = (unsigned __int8 *)(v11 + v15);
  if (!v11) {
    char v19 = 0;
  }
  int v20 = *v19;
  if (v20 == 43)
  {
    if (result >= 1)
    {
      if (result != 1)
      {
        unsigned __int8 v33 = a6 + 87;
        if (a6 > 10)
        {
          unsigned __int8 v34 = a6 + 55;
        }
        else
        {
          unsigned __int8 v33 = 97;
          unsigned __int8 v34 = 65;
        }
        if (a6 <= 10) {
          unsigned __int8 v35 = a6 + 48;
        }
        else {
          unsigned __int8 v35 = 58;
        }
        if (v19)
        {
          unsigned int v24 = 0;
          uint64_t v36 = v19 + 1;
          uint64_t v37 = result - 1;
          do
          {
            unsigned int v38 = *v36;
            if (v38 < 0x30 || v38 >= v35)
            {
              if (v38 < 0x41 || v38 >= v34)
              {
                unsigned int v29 = 0;
                unsigned __int8 v30 = 1;
                if (v38 < 0x61 || v38 >= v33) {
                  return v29 | ((unint64_t)v30 << 32);
                }
                char v39 = -87;
              }
              else
              {
                char v39 = -55;
              }
            }
            else
            {
              char v39 = -48;
            }
            unint64_t v40 = v24 * (unint64_t)a6;
            if ((v40 & 0xFFFFFFFF00000000) != 0) {
              goto LABEL_96;
            }
            unsigned __int8 v41 = v38 + v39;
            unsigned int v24 = v40 + v41;
            if (__CFADD__(v40, v41)) {
              goto LABEL_96;
            }
            ++v36;
            --v37;
          }
          while (v37);
LABEL_94:
          unsigned __int8 v30 = 0;
          unsigned int v29 = v24;
          return v29 | ((unint64_t)v30 << 32);
        }
        goto LABEL_95;
      }
      goto LABEL_96;
    }
    goto LABEL_103;
  }
  if (v20 != 45)
  {
    if (v18 != v15)
    {
      unsigned __int8 v42 = a6 + 87;
      if (a6 > 10)
      {
        unsigned __int8 v43 = a6 + 55;
      }
      else
      {
        unsigned __int8 v42 = 97;
        unsigned __int8 v43 = 65;
      }
      if (a6 <= 10) {
        unsigned __int8 v44 = a6 + 48;
      }
      else {
        unsigned __int8 v44 = 58;
      }
      if (v19)
      {
        unsigned int v24 = 0;
        while (1)
        {
          unsigned int v45 = *v19;
          if (v45 < 0x30 || v45 >= v44)
          {
            if (v45 < 0x41 || v45 >= v43)
            {
              unsigned int v29 = 0;
              unsigned __int8 v30 = 1;
              if (v45 < 0x61 || v45 >= v42) {
                return v29 | ((unint64_t)v30 << 32);
              }
              char v46 = -87;
            }
            else
            {
              char v46 = -55;
            }
          }
          else
          {
            char v46 = -48;
          }
          unint64_t v47 = v24 * (unint64_t)a6;
          if ((v47 & 0xFFFFFFFF00000000) != 0) {
            goto LABEL_96;
          }
          unsigned __int8 v48 = v45 + v46;
          unsigned int v24 = v47 + v48;
          if (__CFADD__(v47, v48)) {
            goto LABEL_96;
          }
          ++v19;
          if (!--result) {
            goto LABEL_94;
          }
        }
      }
      goto LABEL_95;
    }
LABEL_96:
    unsigned int v29 = 0;
    unsigned __int8 v30 = 1;
    return v29 | ((unint64_t)v30 << 32);
  }
  if (result >= 1)
  {
    if (result != 1)
    {
      unsigned __int8 v21 = a6 + 87;
      if (a6 > 10)
      {
        unsigned __int8 v22 = a6 + 55;
      }
      else
      {
        unsigned __int8 v21 = 97;
        unsigned __int8 v22 = 65;
      }
      if (a6 <= 10) {
        unsigned __int8 v23 = a6 + 48;
      }
      else {
        unsigned __int8 v23 = 58;
      }
      if (v19)
      {
        unsigned int v24 = 0;
        unsigned __int8 v25 = v19 + 1;
        uint64_t v26 = result - 1;
        while (1)
        {
          unsigned int v27 = *v25;
          if (v27 < 0x30 || v27 >= v23)
          {
            if (v27 < 0x41 || v27 >= v22)
            {
              unsigned int v29 = 0;
              unsigned __int8 v30 = 1;
              if (v27 < 0x61 || v27 >= v21) {
                return v29 | ((unint64_t)v30 << 32);
              }
              char v28 = -87;
            }
            else
            {
              char v28 = -55;
            }
          }
          else
          {
            char v28 = -48;
          }
          unint64_t v31 = v24 * (unint64_t)a6;
          if ((v31 & 0xFFFFFFFF00000000) != 0) {
            goto LABEL_96;
          }
          unsigned __int8 v32 = v27 + v28;
          unsigned int v24 = v31 - v32;
          if (v31 < v32) {
            goto LABEL_96;
          }
          ++v25;
          if (!--v26) {
            goto LABEL_94;
          }
        }
      }
LABEL_95:
      unsigned int v29 = 0;
      unsigned __int8 v30 = 0;
      return v29 | ((unint64_t)v30 << 32);
    }
    goto LABEL_96;
  }
LABEL_102:
  __break(1u);
LABEL_103:
  __break(1u);
LABEL_104:
  __break(1u);
  return result;
}

uint64_t sub_24A1C2EA4(uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, int64_t a6)
{
  unint64_t v10 = a2;
  uint64_t v11 = result;
  uint64_t v12 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000) == 0) {
    LOBYTE(v12) = 1;
  }
  uint64_t v13 = 4 << v12;
  unint64_t v14 = a2 & 0xC;
  if (v14 == 4 << v12)
  {
    unint64_t result = sub_24A251948(a2, a4, a5);
    a2 = result;
    if ((a5 & 0x1000000000000000) == 0)
    {
LABEL_5:
      int64_t v15 = a2 >> 16;
      if (v14 != v13) {
        goto LABEL_6;
      }
      goto LABEL_14;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
    goto LABEL_5;
  }
  unint64_t v16 = a4 & 0xFFFFFFFFFFFFLL;
  if ((a5 & 0x2000000000000000) != 0) {
    unint64_t v16 = HIBYTE(a5) & 0xF;
  }
  if (v16 < a2 >> 16) {
    goto LABEL_96;
  }
  unint64_t result = sub_24A2A7900();
  int64_t v15 = result;
  if (v14 == v13)
  {
LABEL_14:
    unint64_t result = sub_24A251948(v10, a4, a5);
    unint64_t v10 = result;
  }
LABEL_6:
  if ((a3 & 0xC) == v13)
  {
    unint64_t result = sub_24A251948(a3, a4, a5);
    a3 = result;
    if ((a5 & 0x1000000000000000) == 0) {
      goto LABEL_8;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
LABEL_8:
    unint64_t result = (a3 >> 16) - (v10 >> 16);
    goto LABEL_21;
  }
  unint64_t v17 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000) == 0) {
    unint64_t v17 = a4 & 0xFFFFFFFFFFFFLL;
  }
  if (v17 < v10 >> 16) {
    goto LABEL_92;
  }
  if (v17 < a3 >> 16)
  {
LABEL_93:
    __break(1u);
    goto LABEL_94;
  }
  unint64_t result = sub_24A2A7900();
LABEL_21:
  int64_t v18 = v15 + result;
  if (__OFADD__(v15, result))
  {
    __break(1u);
    goto LABEL_91;
  }
  if (v18 < v15)
  {
LABEL_91:
    __break(1u);
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }
  char v19 = (unsigned __int8 *)(v11 + v15);
  if (!v11) {
    char v19 = 0;
  }
  int v20 = *v19;
  if (v20 == 43)
  {
    if (result >= 1)
    {
      if (result != 1)
      {
        unsigned __int8 v33 = a6 + 48;
        unsigned __int8 v34 = a6 + 55;
        unsigned __int8 v35 = a6 + 87;
        if (a6 > 10)
        {
          unsigned __int8 v33 = 58;
        }
        else
        {
          unsigned __int8 v35 = 97;
          unsigned __int8 v34 = 65;
        }
        if (v19)
        {
          unint64_t v24 = 0;
          uint64_t v36 = v19 + 1;
          uint64_t v37 = result - 1;
          do
          {
            unsigned int v38 = *v36;
            if (v38 < 0x30 || v38 >= v33)
            {
              if (v38 < 0x41 || v38 >= v34)
              {
                uint64_t v29 = 0;
                if (v38 < 0x61 || v38 >= v35) {
                  return v29;
                }
                char v39 = -87;
              }
              else
              {
                char v39 = -55;
              }
            }
            else
            {
              char v39 = -48;
            }
            if (!is_mul_ok(v24, a6)) {
              return 0;
            }
            unint64_t v40 = v24 * a6;
            unsigned __int8 v41 = v38 + v39;
            BOOL v32 = __CFADD__(v40, v41);
            unint64_t v24 = v40 + v41;
            if (v32) {
              return 0;
            }
            ++v36;
            --v37;
          }
          while (v37);
          return v24;
        }
        return 0;
      }
      return 0;
    }
    goto LABEL_95;
  }
  if (v20 != 45)
  {
    if (v18 != v15)
    {
      unsigned __int8 v42 = a6 + 48;
      unsigned __int8 v43 = a6 + 55;
      unsigned __int8 v44 = a6 + 87;
      if (a6 > 10)
      {
        unsigned __int8 v42 = 58;
      }
      else
      {
        unsigned __int8 v44 = 97;
        unsigned __int8 v43 = 65;
      }
      if (v19)
      {
        unint64_t v24 = 0;
        while (1)
        {
          unsigned int v45 = *v19;
          if (v45 < 0x30 || v45 >= v42)
          {
            if (v45 < 0x41 || v45 >= v43)
            {
              uint64_t v29 = 0;
              if (v45 < 0x61 || v45 >= v44) {
                return v29;
              }
              char v46 = -87;
            }
            else
            {
              char v46 = -55;
            }
          }
          else
          {
            char v46 = -48;
          }
          if (!is_mul_ok(v24, a6)) {
            return 0;
          }
          unint64_t v47 = v24 * a6;
          unsigned __int8 v48 = v45 + v46;
          BOOL v32 = __CFADD__(v47, v48);
          unint64_t v24 = v47 + v48;
          if (v32) {
            return 0;
          }
          ++v19;
          if (!--result) {
            return v24;
          }
        }
      }
      return 0;
    }
    return 0;
  }
  if (result >= 1)
  {
    if (result != 1)
    {
      unsigned __int8 v21 = a6 + 48;
      unsigned __int8 v22 = a6 + 55;
      unsigned __int8 v23 = a6 + 87;
      if (a6 > 10)
      {
        unsigned __int8 v21 = 58;
      }
      else
      {
        unsigned __int8 v23 = 97;
        unsigned __int8 v22 = 65;
      }
      if (v19)
      {
        unint64_t v24 = 0;
        unsigned __int8 v25 = v19 + 1;
        uint64_t v26 = result - 1;
        while (1)
        {
          unsigned int v27 = *v25;
          if (v27 < 0x30 || v27 >= v21)
          {
            if (v27 < 0x41 || v27 >= v22)
            {
              uint64_t v29 = 0;
              if (v27 < 0x61 || v27 >= v23) {
                return v29;
              }
              char v28 = -87;
            }
            else
            {
              char v28 = -55;
            }
          }
          else
          {
            char v28 = -48;
          }
          if (!is_mul_ok(v24, a6)) {
            return 0;
          }
          unint64_t v30 = v24 * a6;
          unsigned __int8 v31 = v27 + v28;
          BOOL v32 = v30 >= v31;
          unint64_t v24 = v30 - v31;
          if (!v32) {
            return 0;
          }
          ++v25;
          if (!--v26) {
            return v24;
          }
        }
      }
      return 0;
    }
    return 0;
  }
LABEL_94:
  __break(1u);
LABEL_95:
  __break(1u);
LABEL_96:
  __break(1u);
  return result;
}

uint64_t sub_24A1C32C4(uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  unint64_t v10 = a2;
  uint64_t v11 = result;
  uint64_t v12 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000) == 0) {
    LOBYTE(v12) = 1;
  }
  uint64_t v13 = 4 << v12;
  unint64_t v14 = a2 & 0xC;
  if (v14 == 4 << v12)
  {
    unint64_t result = sub_24A251948(a2, a4, a5);
    a2 = result;
    if ((a5 & 0x1000000000000000) == 0)
    {
LABEL_5:
      int64_t v15 = a2 >> 16;
      if (v14 != v13) {
        goto LABEL_6;
      }
      goto LABEL_14;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
    goto LABEL_5;
  }
  unint64_t v16 = a4 & 0xFFFFFFFFFFFFLL;
  if ((a5 & 0x2000000000000000) != 0) {
    unint64_t v16 = HIBYTE(a5) & 0xF;
  }
  if (v16 < a2 >> 16) {
    goto LABEL_104;
  }
  unint64_t result = sub_24A2A7900();
  int64_t v15 = result;
  if (v14 == v13)
  {
LABEL_14:
    unint64_t result = sub_24A251948(v10, a4, a5);
    unint64_t v10 = result;
  }
LABEL_6:
  if ((a3 & 0xC) == v13)
  {
    unint64_t result = sub_24A251948(a3, a4, a5);
    a3 = result;
    if ((a5 & 0x1000000000000000) == 0) {
      goto LABEL_8;
    }
  }
  else if ((a5 & 0x1000000000000000) == 0)
  {
LABEL_8:
    unint64_t result = (a3 >> 16) - (v10 >> 16);
    goto LABEL_21;
  }
  unint64_t v17 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000) == 0) {
    unint64_t v17 = a4 & 0xFFFFFFFFFFFFLL;
  }
  if (v17 < v10 >> 16) {
    goto LABEL_100;
  }
  if (v17 < a3 >> 16)
  {
LABEL_101:
    __break(1u);
    goto LABEL_102;
  }
  unint64_t result = sub_24A2A7900();
LABEL_21:
  int64_t v18 = v15 + result;
  if (__OFADD__(v15, result))
  {
    __break(1u);
    goto LABEL_99;
  }
  if (v18 < v15)
  {
LABEL_99:
    __break(1u);
LABEL_100:
    __break(1u);
    goto LABEL_101;
  }
  char v19 = (unsigned __int8 *)(v11 + v15);
  if (!v11) {
    char v19 = 0;
  }
  int v20 = *v19;
  if (v20 == 43)
  {
    if (result >= 1)
    {
      if (result != 1)
      {
        unsigned __int8 v31 = a6 + 87;
        if (a6 > 10)
        {
          unsigned __int8 v32 = a6 + 55;
        }
        else
        {
          unsigned __int8 v31 = 97;
          unsigned __int8 v32 = 65;
        }
        if (a6 <= 10) {
          unsigned __int8 v33 = a6 + 48;
        }
        else {
          unsigned __int8 v33 = 58;
        }
        if (v19)
        {
          LOBYTE(v24) = 0;
          unsigned __int8 v34 = v19 + 1;
          uint64_t v35 = result - 1;
          do
          {
            unsigned int v36 = *v34;
            if (v36 < 0x30 || v36 >= v33)
            {
              if (v36 < 0x41 || v36 >= v32)
              {
                unsigned __int8 v29 = 0;
                int v30 = 1;
                if (v36 < 0x61 || v36 >= v31) {
                  return v29 | (v30 << 8);
                }
                char v37 = -87;
              }
              else
              {
                char v37 = -55;
              }
            }
            else
            {
              char v37 = -48;
            }
            if (((v24 * (unsigned __int16)a6) & 0xFF00) != 0) {
              goto LABEL_96;
            }
            unsigned int v24 = (v24 * a6) + (v36 + v37);
            if ((v24 >> 8)) {
              goto LABEL_96;
            }
            ++v34;
            --v35;
          }
          while (v35);
LABEL_72:
          int v30 = 0;
          unsigned __int8 v29 = v24;
          return v29 | (v30 << 8);
        }
        goto LABEL_95;
      }
LABEL_96:
      unsigned __int8 v29 = 0;
      int v30 = 1;
      return v29 | (v30 << 8);
    }
    goto LABEL_103;
  }
  if (v20 != 45)
  {
    if (v18 != v15)
    {
      unsigned __int8 v38 = a6 + 87;
      if (a6 > 10)
      {
        unsigned __int8 v39 = a6 + 55;
      }
      else
      {
        unsigned __int8 v38 = 97;
        unsigned __int8 v39 = 65;
      }
      if (a6 <= 10) {
        unsigned __int8 v40 = a6 + 48;
      }
      else {
        unsigned __int8 v40 = 58;
      }
      if (v19)
      {
        LOBYTE(v41) = 0;
        do
        {
          unsigned int v42 = *v19;
          if (v42 < 0x30 || v42 >= v40)
          {
            if (v42 < 0x41 || v42 >= v39)
            {
              unsigned __int8 v29 = 0;
              int v30 = 1;
              if (v42 < 0x61 || v42 >= v38) {
                return v29 | (v30 << 8);
              }
              char v43 = -87;
            }
            else
            {
              char v43 = -55;
            }
          }
          else
          {
            char v43 = -48;
          }
          if (((v41 * (unsigned __int16)a6) & 0xFF00) != 0) {
            goto LABEL_96;
          }
          unsigned int v41 = (v41 * a6) + (v42 + v43);
          if ((v41 >> 8)) {
            goto LABEL_96;
          }
          ++v19;
          --result;
        }
        while (result);
        int v30 = 0;
        unsigned __int8 v29 = v41;
        return v29 | (v30 << 8);
      }
      goto LABEL_95;
    }
    goto LABEL_96;
  }
  if (result >= 1)
  {
    if (result != 1)
    {
      unsigned __int8 v21 = a6 + 87;
      if (a6 > 10)
      {
        unsigned __int8 v22 = a6 + 55;
      }
      else
      {
        unsigned __int8 v21 = 97;
        unsigned __int8 v22 = 65;
      }
      if (a6 <= 10) {
        unsigned __int8 v23 = a6 + 48;
      }
      else {
        unsigned __int8 v23 = 58;
      }
      if (v19)
      {
        LOBYTE(v24) = 0;
        unsigned __int8 v25 = v19 + 1;
        uint64_t v26 = result - 1;
        while (1)
        {
          unsigned int v27 = *v25;
          if (v27 < 0x30 || v27 >= v23)
          {
            if (v27 < 0x41 || v27 >= v22)
            {
              unsigned __int8 v29 = 0;
              int v30 = 1;
              if (v27 < 0x61 || v27 >= v21) {
                return v29 | (v30 << 8);
              }
              char v28 = -87;
            }
            else
            {
              char v28 = -55;
            }
          }
          else
          {
            char v28 = -48;
          }
          if (((v24 * (unsigned __int16)a6) & 0xFF00) != 0) {
            goto LABEL_96;
          }
          unsigned int v24 = (v24 * a6) - (v27 + v28);
          if ((v24 & 0xFFFFFF00) != 0) {
            goto LABEL_96;
          }
          ++v25;
          if (!--v26) {
            goto LABEL_72;
          }
        }
      }
LABEL_95:
      unsigned __int8 v29 = 0;
      int v30 = 0;
      return v29 | (v30 << 8);
    }
    goto LABEL_96;
  }
LABEL_102:
  __break(1u);
LABEL_103:
  __break(1u);
LABEL_104:
  __break(1u);
  return result;
}

uint64_t CachingTransparencyVerifier.init(verifier:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_24A2A7150();
  uint64_t v6 = type metadata accessor for CachingTransparencyVerifier();
  uint64_t v7 = *(void *)(a2 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(a3 + *(int *)(v6 + 36), a1, a2);
  type metadata accessor for CachingTransparencyVerifier.Key();
  sub_24A2A6BC0();
  swift_getWitnessTable();
  type metadata accessor for AsyncTemporalCache();
  uint64_t v8 = sub_24A232514();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(a1, a2);
  *(void *)(a3 + *(int *)(v6 + 40)) = v8;
  return result;
}

uint64_t type metadata accessor for CachingTransparencyVerifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for CachingTransparencyVerifier.Key()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t CachingTransparencyVerifier.verifyInclusion(of:proofs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = sub_24A2A6BC0();
  v3[2] = v7;
  v3[3] = *(void *)(v7 - 8);
  uint64_t v8 = swift_task_alloc();
  v3[4] = v8;
  int v9 = (void *)swift_task_alloc();
  v3[5] = v9;
  void *v9 = v3;
  v9[1] = sub_24A1C39D0;
  return CachingTransparencyVerifier.verifyExpiringInclusion(of:proofs:)(v8, a1, a2, a3);
}

uint64_t sub_24A1C39D0()
{
  int v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 48) = v0;
  swift_task_dealloc();
  if (v0)
  {
    int v3 = sub_24A1C3B60;
  }
  else
  {
    (*(void (**)(void, void))(v2[3] + 8))(v2[4], v2[2]);
    int v3 = sub_24A1C3AFC;
  }
  return MEMORY[0x270FA2498](v3, 0, 0);
}

uint64_t sub_24A1C3AFC()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_24A1C3B60()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t CachingTransparencyVerifier.verifyExpiringInclusion(of:proofs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[8] = a4;
  v5[9] = v4;
  v5[6] = a2;
  v5[7] = a3;
  v5[5] = a1;
  uint64_t v7 = sub_24A2A7160();
  v5[10] = v7;
  v5[11] = *(void *)(v7 - 8);
  v5[12] = swift_task_alloc();
  v5[13] = swift_task_alloc();
  type metadata accessor for TransparencyLogProofs();
  v5[14] = swift_task_alloc();
  type metadata accessor for Release();
  v5[15] = swift_task_alloc();
  v5[16] = *(void *)(a4 + 16);
  v5[17] = *(void *)(a4 + 24);
  uint64_t v8 = type metadata accessor for CachingTransparencyVerifier.Key();
  v5[18] = v8;
  v5[19] = *(void *)(v8 - 8);
  v5[20] = swift_task_alloc();
  v5[21] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_24A1C3D74, 0, 0);
}

uint64_t sub_24A1C3D74()
{
  uint64_t v1 = *(void *)(v0 + 168);
  uint64_t v2 = *(void *)(v0 + 152);
  uint64_t v13 = *(void *)(v0 + 144);
  uint64_t v14 = *(void *)(v0 + 160);
  uint64_t v4 = *(void *)(v0 + 112);
  uint64_t v3 = *(void *)(v0 + 120);
  uint64_t v6 = *(void *)(v0 + 64);
  uint64_t v5 = *(void *)(v0 + 72);
  uint64_t v7 = *(void *)(v0 + 56);
  sub_24A1C4BF0(*(void *)(v0 + 48), v3, (uint64_t (*)(void))type metadata accessor for Release);
  sub_24A1C4BF0(v7, v4, (uint64_t (*)(void))type metadata accessor for TransparencyLogProofs);
  sub_24A1C4C58(v3, v4, v1);
  uint64_t v8 = sub_24A2A6BC0();
  *(void *)(v0 + 176) = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  *(void *)(v0 + 184) = v9;
  *(void *)(v0 + 192) = *(void *)(v9 + 64);
  *(void *)(v0 + 200) = swift_task_alloc();
  uint64_t v10 = *(int *)(v6 + 40);
  *(_DWORD *)(v0 + 296) = v10;
  uint64_t v11 = *(void *)(v5 + v10);
  *(void *)(v0 + 208) = v11;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v14, v1, v13);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B173100);
  *(void *)(v0 + 216) = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_24A1C3F20, v11, 0);
}

uint64_t sub_24A1C3F20()
{
  uint64_t v2 = v0[19];
  uint64_t v1 = v0[20];
  uint64_t v3 = v0[18];
  sub_24A2325D4(v1, v0[27]);
  uint64_t v4 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v0[28] = v4;
  v0[29] = (v2 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v4(v1, v3);
  return MEMORY[0x270FA2498](sub_24A1C3FC0, 0, 0);
}

uint64_t sub_24A1C3FC0()
{
  unsigned __int8 v40 = v0;
  uint64_t v1 = v0[27];
  uint64_t v2 = v0[22];
  uint64_t v3 = v0[23];
  int v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2);
  uint64_t v5 = v0[25];
  if (v4 == 1)
  {
    uint64_t v38 = v0[17];
    sub_24A1C5248(v1);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = swift_task_alloc();
    v0[30] = v6;
    unsigned int v36 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v38 + 8)
                                                                              + **(int **)(v38 + 8));
    uint64_t v7 = (void *)swift_task_alloc();
    v0[31] = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_24A1C4438;
    uint64_t v8 = v0[16];
    uint64_t v9 = v0[17];
    uint64_t v10 = v0[6];
    uint64_t v11 = v0[7];
    return v36(v6, v10, v11, v8, v9);
  }
  else
  {
    uint64_t v13 = v0[13];
    uint64_t v14 = v0[10];
    uint64_t v15 = v0[11];
    uint64_t v16 = v0[9];
    char v37 = *(void (**)(void, uint64_t, uint64_t))(v3 + 32);
    v37(v0[25], v1, v2);
    swift_task_dealloc();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v13, v16, v14);
    uint64_t v17 = swift_task_alloc();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v17, v5, v2);
    int64_t v18 = sub_24A2A7140();
    os_log_type_t type = sub_24A2A7B40();
    BOOL v19 = os_log_type_enabled(v18, type);
    int v20 = (void (*)(uint64_t, uint64_t))v0[28];
    uint64_t v22 = v0[22];
    uint64_t v21 = v0[23];
    uint64_t v23 = v0[21];
    uint64_t v24 = v0[18];
    uint64_t v25 = v0[11];
    uint64_t v34 = v0[10];
    uint64_t v35 = v0[13];
    if (v19)
    {
      uint64_t v32 = v0[18];
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      uint64_t v31 = v23;
      uint64_t v27 = swift_slowAlloc();
      uint64_t v39 = v27;
      *(_DWORD *)uint64_t v26 = 136315138;
      sub_24A1C963C((unint64_t *)&qword_26B174220);
      uint64_t v28 = sub_24A2A7E30();
      v0[4] = sub_24A1C52A8(v28, v29, &v39);
      sub_24A2A7B70();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v17, v22);
      _os_log_impl(&dword_24A19F000, v18, type, "Returning cached result (inclusionExpiration=%s)", v26, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24C5C00A0](v27, -1, -1);
      MEMORY[0x24C5C00A0](v26, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v35, v34);
      v20(v31, v32);
      swift_task_dealloc();
    }
    else
    {

      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v17, v22);
      swift_task_dealloc();
      (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v35, v34);
      v20(v23, v24);
    }
    v37(v0[5], v0[25], v0[22]);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    int v30 = (uint64_t (*)(void))v0[1];
    return v30();
  }
}

uint64_t sub_24A1C4438()
{
  *(void *)(*(void *)v1 + 256) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_24A1C4B24;
  }
  else {
    uint64_t v2 = sub_24A1C454C;
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

uint64_t sub_24A1C454C()
{
  uint64_t v37 = v0;
  uint64_t v1 = *(void *)(v0 + 240);
  uint64_t v2 = *(void *)(v0 + 184);
  uint64_t v3 = *(void *)(v0 + 176);
  uint64_t v4 = *(void *)(v0 + 88);
  uint64_t v31 = *(void *)(v0 + 96);
  uint64_t v33 = *(void *)(v0 + 80);
  uint64_t v29 = *(void *)(v0 + 72);
  uint64_t v27 = swift_task_alloc();
  *(void *)(v0 + 264) = v27;
  uint64_t v5 = swift_task_alloc();
  sub_24A2A7F90();
  sub_24A2A7F90();
  sub_24A2A6B80();
  sub_24A1C963C(&qword_269778A78);
  char v6 = sub_24A2A77D0();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  if (v6) {
    uint64_t v8 = v1;
  }
  else {
    uint64_t v8 = v5;
  }
  v7(v27, v8, v3);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  *(void *)(v0 + 272) = v9;
  *(void *)(v0 + 280) = (v2 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  uint64_t v35 = v9;
  v9(v5, v3);
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v31, v29, v33);
  uint64_t v10 = swift_task_alloc();
  v7(v10, v1, v3);
  uint64_t v11 = swift_task_alloc();
  v7(v11, v27, v3);
  uint64_t v12 = sub_24A2A7140();
  os_log_type_t v13 = sub_24A2A7B40();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = v11;
    uint64_t v15 = *(void *)(v0 + 176);
    uint64_t v30 = *(void *)(v0 + 88);
    uint64_t v32 = *(void *)(v0 + 80);
    uint64_t v34 = *(void *)(v0 + 96);
    uint64_t v16 = swift_slowAlloc();
    uint64_t v28 = swift_slowAlloc();
    uint64_t v36 = v28;
    *(_DWORD *)uint64_t v16 = 136315394;
    sub_24A1C963C((unint64_t *)&qword_26B174220);
    uint64_t v17 = sub_24A2A7E30();
    *(void *)(v0 + 16) = sub_24A1C52A8(v17, v18, &v36);
    sub_24A2A7B70();
    swift_bridgeObjectRelease();
    v35(v10, v15);
    *(_WORD *)(v16 + 12) = 2080;
    uint64_t v19 = sub_24A2A7E30();
    *(void *)(v0 + 24) = sub_24A1C52A8(v19, v20, &v36);
    sub_24A2A7B70();
    swift_bridgeObjectRelease();
    v35(v14, v15);
    _os_log_impl(&dword_24A19F000, v12, v13, "Caching result (inclusionExpiration=%s, cachhExpiration=%s)", (uint8_t *)v16, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x24C5C00A0](v28, -1, -1);
    MEMORY[0x24C5C00A0](v16, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v34, v32);
    swift_task_dealloc();
    swift_task_dealloc();
  }
  else
  {
    uint64_t v21 = *(void *)(v0 + 176);
    uint64_t v22 = *(void *)(v0 + 88);
    uint64_t v23 = *(void *)(v0 + 96);
    uint64_t v24 = *(void *)(v0 + 80);
    v35(v10, v21);
    v35(v11, v21);

    swift_task_dealloc();
    swift_task_dealloc();
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v23, v24);
  }
  uint64_t v25 = *(void *)(*(void *)(v0 + 72) + *(int *)(v0 + 296));
  *(void *)(v0 + 288) = v25;
  return MEMORY[0x270FA2498](sub_24A1C4994, v25, 0);
}

uint64_t sub_24A1C4994()
{
  sub_24A2326A0(v0[21], v0[30], v0[33]);
  return MEMORY[0x270FA2498](sub_24A1C4A08, 0, 0);
}

uint64_t sub_24A1C4A08()
{
  uint64_t v1 = *(void *)(v0 + 240);
  uint64_t v2 = *(void (**)(uint64_t, uint64_t))(v0 + 224);
  uint64_t v3 = *(void *)(v0 + 176);
  uint64_t v4 = *(void *)(v0 + 184);
  uint64_t v5 = *(void *)(v0 + 168);
  uint64_t v6 = *(void *)(v0 + 144);
  uint64_t v7 = *(void *)(v0 + 40);
  (*(void (**)(void, uint64_t))(v0 + 272))(*(void *)(v0 + 264), v3);
  v2(v5, v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v7, v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

uint64_t sub_24A1C4B24()
{
  (*(void (**)(void, void))(v0 + 224))(*(void *)(v0 + 168), *(void *)(v0 + 144));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_24A1C4BF0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_24A1C4C58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_24A1C96E0(a1, a3, (uint64_t (*)(void))type metadata accessor for Release);
  uint64_t v5 = type metadata accessor for CachingTransparencyVerifier.Key();
  return sub_24A1C96E0(a2, a3 + *(int *)(v5 + 36), (uint64_t (*)(void))type metadata accessor for TransparencyLogProofs);
}

uint64_t sub_24A1C4CDC(long long *a1, uint64_t a2)
{
  sub_24A2A7480();
  sub_24A1C958C(&qword_26B174A28, MEMORY[0x263F7BF30]);
  sub_24A2A77A0();
  uint64_t v5 = *(void *)(v2 + *(int *)(type metadata accessor for Release() + 20));
  swift_bridgeObjectRetain();
  sub_24A1E87CC(a1, v5);
  swift_bridgeObjectRelease();
  uint64_t v6 = v2 + *(int *)(a2 + 36);
  type metadata accessor for ATLogProofs(0);
  sub_24A1C958C(&qword_2697786F0, (void (*)(uint64_t))type metadata accessor for ATLogProofs);
  sub_24A2A77A0();
  uint64_t v7 = v6 + *(int *)(type metadata accessor for TransparencyLogProofs() + 20);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B173100);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24A1C95D4(v7, (uint64_t)v10);
  uint64_t v11 = sub_24A2A6BC0();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11);
  if (v13 == 1) {
    return sub_24A2A7F30();
  }
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v17 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v16, v10, v11);
  sub_24A2A7F30();
  sub_24A1C963C(&qword_269778A50);
  sub_24A2A77A0();
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v16, v11);
}

uint64_t sub_24A1C4F5C(uint64_t a1, uint64_t a2)
{
  if ((sub_24A2A7460() & 1) == 0) {
    return 0;
  }
  uint64_t v4 = type metadata accessor for Release();
  if ((sub_24A1E3AD4(*(void *)(a1 + *(int *)(v4 + 20)), *(void *)(a2 + *(int *)(v4 + 20))) & 1) == 0) {
    return 0;
  }
  uint64_t v5 = *(int *)(type metadata accessor for CachingTransparencyVerifier.Key() + 36);

  return static TransparencyLogProofs.== infix(_:_:)(a1 + v5, a2 + v5);
}

uint64_t sub_24A1C4FF4(uint64_t a1)
{
  sub_24A2A7F10();
  sub_24A1C4CDC(v3, a1);
  return sub_24A2A7F50();
}

uint64_t sub_24A1C503C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  void *v9 = v4;
  v9[1] = sub_24A1C50FC;
  return CachingTransparencyVerifier.verifyExpiringInclusion(of:proofs:)(a1, a2, a3, a4);
}

uint64_t sub_24A1C50FC()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_24A1C51F8(uint64_t a1, uint64_t a2)
{
  sub_24A2A7F10();
  sub_24A1C4CDC(v4, a2);
  return sub_24A2A7F50();
}

uint64_t sub_24A1C523C(uint64_t a1, uint64_t a2)
{
  return sub_24A1C4F5C(a1, a2);
}

uint64_t sub_24A1C5248(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B173100);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_24A1C52A8(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_24A1C537C(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_24A1C9680((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    uint64_t ObjectType = MEMORY[0x263F8DBE0];
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_24A1C9680((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return v7;
}

uint64_t sub_24A1C537C(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            sub_24A2A7B80();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = sub_24A1C5538(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = sub_24A2A7CA0();
  if (!v8)
  {
    sub_24A2A7D10();
    __break(1u);
LABEL_17:
    uint64_t result = sub_24A2A7D70();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t sub_24A1C5538(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = sub_24A1C55D0(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_24A1C57B0(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_24A1C57B0(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_24A1C55D0(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = sub_24A1C5748(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = sub_24A2A7C70();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return (uint64_t)v4;
      }
      sub_24A2A7D10();
      __break(1u);
LABEL_10:
      uint64_t v2 = sub_24A2A78D0();
      if (!v2) {
        return MEMORY[0x263F8EE78];
      }
    }
    sub_24A2A7D70();
    __break(1u);
LABEL_14:
    uint64_t result = sub_24A2A7D10();
    __break(1u);
  }
  else
  {
    return MEMORY[0x263F8EE78];
  }
  return result;
}

void *sub_24A1C5748(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B174B98);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  void v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_24A1C57B0(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_26B174B98);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = sub_24A2A7D70();
  __break(1u);
  return result;
}

uint64_t sub_24A1C5900()
{
  uint64_t result = sub_24A2A7160();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_24A1C59D8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = sub_24A2A7160();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  uint64_t v9 = *(void *)(a3 + 16);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(_DWORD *)(v10 + 80);
  uint64_t v12 = v8 + v11;
  uint64_t v13 = *(void *)(v10 + 64) + 7;
  unint64_t v14 = ((v13 + ((v8 + v11) & ~v11)) & 0xFFFFFFFFFFFFFFF8) + 8;
  unsigned int v15 = v11 | *(_DWORD *)(v7 + 80) & 0xF8;
  if (v15 > 7 || ((*(_DWORD *)(v7 + 80) | *(_DWORD *)(v10 + 80)) & 0x100000) != 0 || v14 > 0x18)
  {
    uint64_t v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + (((v15 | 7) + 16) & ~(unint64_t)(v15 | 7)));
  }
  else
  {
    uint64_t v19 = ~v11;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, v6);
    unint64_t v20 = ((unint64_t)a2 + v12) & v19;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 16))(((unint64_t)a1 + v12) & v19, v20, v9);
    *(void *)((v13 + (((unint64_t)a1 + v12) & v19)) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v13 + v20) & 0xFFFFFFFFFFFFFFF8);
  }
  swift_retain();
  return a1;
}

uint64_t sub_24A1C5B78(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A2A7160();
  uint64_t v5 = *(void *)(v4 - 8) + 8;
  (*(void (**)(uint64_t, uint64_t))v5)(a1, v4);
  (*(void (**)(unint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 8))((*(void *)(v5 + 56)
                                                                                            + a1
                                                                                            + *(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80));

  return swift_release();
}

uint64_t sub_24A1C5C44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_24A2A7160();
  uint64_t v7 = *(void *)(v6 - 8) + 16;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v7)(a1, a2, v6);
  uint64_t v8 = *(void *)(v7 + 48);
  uint64_t v9 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v10 = v9 + 16;
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v12 = v8 + v11;
  uint64_t v13 = (v12 + a1) & ~v11;
  uint64_t v14 = (v12 + a2) & ~v11;
  (*(void (**)(uint64_t, uint64_t))(v9 + 16))(v13, v14);
  *(void *)((*(void *)(v10 + 48) + 7 + v13) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v10 + 48)
                                                                                       + 7
                                                                                       + v14) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  return a1;
}

uint64_t sub_24A1C5D28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_24A2A7160();
  uint64_t v7 = *(void *)(v6 - 8) + 24;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v7)(a1, a2, v6);
  uint64_t v8 = *(void *)(v7 + 40);
  uint64_t v9 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v10 = v9 + 24;
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v12 = v8 + v11;
  uint64_t v13 = (v12 + a1) & ~v11;
  uint64_t v14 = (v12 + a2) & ~v11;
  (*(void (**)(uint64_t, uint64_t))(v9 + 24))(v13, v14);
  *(void *)((*(void *)(v10 + 40) + 7 + v13) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v10 + 40)
                                                                                       + 7
                                                                                       + v14) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_24A1C5E18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_24A2A7160();
  uint64_t v7 = *(void *)(v6 - 8) + 32;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v7)(a1, a2, v6);
  uint64_t v8 = *(void *)(v7 + 32);
  uint64_t v9 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v10 = v9 + 32;
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v12 = v8 + v11;
  uint64_t v13 = (v12 + a1) & ~v11;
  uint64_t v14 = (v12 + a2) & ~v11;
  (*(void (**)(uint64_t, uint64_t))(v9 + 32))(v13, v14);
  *(void *)((*(void *)(v10 + 32) + 7 + v13) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v10 + 32)
                                                                                       + 7
                                                                                       + v14) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_24A1C5EF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_24A2A7160();
  uint64_t v7 = *(void *)(v6 - 8) + 40;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v7)(a1, a2, v6);
  uint64_t v8 = *(void *)(v7 + 24);
  uint64_t v9 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v10 = v9 + 40;
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v12 = v8 + v11;
  uint64_t v13 = (v12 + a1) & ~v11;
  uint64_t v14 = (v12 + a2) & ~v11;
  (*(void (**)(uint64_t, uint64_t))(v9 + 40))(v13, v14);
  *(void *)((*(void *)(v10 + 24) + 7 + v13) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v10 + 24)
                                                                                       + 7
                                                                                       + v14) & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t sub_24A1C5FE0(int *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = sub_24A2A7160();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v8) {
    unsigned int v12 = *(_DWORD *)(v7 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  if (v12 <= 0x7FFFFFFF) {
    unsigned int v12 = 0x7FFFFFFF;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v13 = *(void *)(*(void *)(v6 - 8) + 64) + v11;
  uint64_t v14 = *(void *)(v9 + 64) + 7;
  if (v12 < a2)
  {
    unint64_t v15 = ((v14 + (v13 & ~v11)) & 0xFFFFFFFFFFFFFFF8) + 8;
    uint64_t v16 = v15 & 0xFFFFFFF8;
    if ((v15 & 0xFFFFFFF8) != 0) {
      unsigned int v17 = 2;
    }
    else {
      unsigned int v17 = a2 - v12 + 1;
    }
    if (v17 >= 0x10000) {
      unsigned int v18 = 4;
    }
    else {
      unsigned int v18 = 2;
    }
    if (v17 < 0x100) {
      unsigned int v18 = 1;
    }
    if (v17 >= 2) {
      uint64_t v19 = v18;
    }
    else {
      uint64_t v19 = 0;
    }
    switch(v19)
    {
      case 1:
        int v20 = *((unsigned __int8 *)a1 + v15);
        if (!v20) {
          break;
        }
        goto LABEL_24;
      case 2:
        int v20 = *(unsigned __int16 *)((char *)a1 + v15);
        if (v20) {
          goto LABEL_24;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x24A1C6228);
      case 4:
        int v20 = *(int *)((char *)a1 + v15);
        if (!v20) {
          break;
        }
LABEL_24:
        int v22 = v20 - 1;
        if (v16)
        {
          int v22 = 0;
          int v23 = *a1;
        }
        else
        {
          int v23 = 0;
        }
        return v12 + (v23 | v22) + 1;
      default:
        break;
    }
  }
  if (v8 == v12)
  {
    uint64_t v24 = *(uint64_t (**)(int *, uint64_t, uint64_t))(v7 + 48);
    return v24(a1, v8, v6);
  }
  else
  {
    unint64_t v25 = ((unint64_t)a1 + v13) & ~v11;
    if (v10 == v12)
    {
      uint64_t v26 = *(uint64_t (**)(unint64_t))(v9 + 48);
      return v26(v25);
    }
    else
    {
      unint64_t v27 = *(void *)((v14 + v25) & 0xFFFFFFFFFFFFFFF8);
      if (v27 >= 0xFFFFFFFF) {
        LODWORD(v27) = -1;
      }
      return (v27 + 1);
    }
  }
}

void sub_24A1C623C(_DWORD *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8 = sub_24A2A7160();
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(void *)(*(void *)(a4 + 16) - 8);
  uint64_t v12 = *(unsigned int *)(v11 + 84);
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  if (v12 <= v10) {
    unsigned int v14 = *(_DWORD *)(v9 + 84);
  }
  else {
    unsigned int v14 = *(_DWORD *)(v11 + 84);
  }
  if (v14 <= 0x7FFFFFFF) {
    unsigned int v14 = 0x7FFFFFFF;
  }
  uint64_t v15 = *(void *)(*(void *)(v8 - 8) + 64) + v13;
  uint64_t v16 = *(void *)(v11 + 64) + 7;
  unint64_t v17 = ((v16 + (v15 & ~v13)) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v14 >= a3)
  {
    int v20 = 0;
    int v21 = a2 - v14;
    if (a2 <= v14)
    {
LABEL_19:
      uint64_t v22 = ~v13;
      switch(v20)
      {
        case 1:
          *((unsigned char *)a1 + v17) = 0;
          if (!a2) {
            return;
          }
          goto LABEL_32;
        case 2:
          *(_WORD *)((char *)a1 + v17) = 0;
          if (!a2) {
            return;
          }
          goto LABEL_32;
        case 3:
          goto LABEL_49;
        case 4:
          *(_DWORD *)((char *)a1 + v17) = 0;
          goto LABEL_31;
        default:
LABEL_31:
          if (a2)
          {
LABEL_32:
            if (v10 == v14)
            {
              unint64_t v25 = *(void (**)(_DWORD *, uint64_t))(v9 + 56);
              v25(a1, a2);
            }
            else
            {
              unint64_t v26 = ((unint64_t)a1 + v15) & v22;
              if (v12 == v14)
              {
                unint64_t v27 = *(void (**)(unint64_t, uint64_t, uint64_t))(v11 + 56);
                v27(v26, a2, v12);
              }
              else
              {
                if ((a2 & 0x80000000) != 0) {
                  uint64_t v28 = a2 ^ 0x80000000;
                }
                else {
                  uint64_t v28 = (a2 - 1);
                }
                *(void *)((v16 + v26) & 0xFFFFFFFFFFFFFFF8) = v28;
              }
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    if (((v16 + (v15 & ~v13)) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v18 = a3 - v14 + 1;
    }
    else {
      unsigned int v18 = 2;
    }
    if (v18 >= 0x10000) {
      int v19 = 4;
    }
    else {
      int v19 = 2;
    }
    if (v18 < 0x100) {
      int v19 = 1;
    }
    if (v18 >= 2) {
      int v20 = v19;
    }
    else {
      int v20 = 0;
    }
    int v21 = a2 - v14;
    if (a2 <= v14) {
      goto LABEL_19;
    }
  }
  if (((v16 + (v15 & ~v13)) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    int v23 = v21;
  }
  else {
    int v23 = 1;
  }
  if (((v16 + (v15 & ~v13)) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    int v24 = ~v14 + a2;
    bzero(a1, ((v16 + (v15 & ~v13)) & 0xFFFFFFFFFFFFFFF8) + 8);
    *a1 = v24;
  }
  switch(v20)
  {
    case 1:
      *((unsigned char *)a1 + v17) = v23;
      break;
    case 2:
      *(_WORD *)((char *)a1 + v17) = v23;
      break;
    case 3:
LABEL_49:
      __break(1u);
      JUMPOUT(0x24A1C64E4);
    case 4:
      *(_DWORD *)((char *)a1 + v17) = v23;
      break;
    default:
      return;
  }
}

uint64_t sub_24A1C650C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 24);
}

uint64_t sub_24A1C6514()
{
  uint64_t result = type metadata accessor for Release();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for TransparencyLogProofs();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_24A1C65DC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v21 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v21 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_24A2A7480();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = type metadata accessor for Release();
    *(uint64_t *)((char *)a1 + *(int *)(v8 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v8 + 20));
    uint64_t v9 = *(int *)(a3 + 36);
    unsigned int v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = sub_24A2A6E10();
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    v13(v10, v11, v12);
    uint64_t v67 = type metadata accessor for ATLogProofs(0);
    uint64_t v14 = *(int *)(v67 + 20);
    uint64_t v15 = &v10[v14];
    uint64_t v16 = &v11[v14];
    uint64_t v17 = type metadata accessor for LogEntry(0);
    uint64_t v18 = *(void *)(v17 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174940);
      memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
      uint64_t v20 = v67;
    }
    else
    {
      uint64_t v63 = v11;
      uint64_t v64 = v18;
      *(void *)uint64_t v15 = *(void *)v16;
      v15[8] = v16[8];
      uint64_t v22 = *((void *)v16 + 3);
      *((void *)v15 + 2) = *((void *)v16 + 2);
      int v23 = v13;
      unint64_t v24 = *((void *)v16 + 4);
      swift_bridgeObjectRetain();
      sub_24A1A52B0(v22, v24);
      *((void *)v15 + 3) = v22;
      *((void *)v15 + 4) = v24;
      uint64_t v25 = *((void *)v16 + 6);
      *((void *)v15 + 5) = *((void *)v16 + 5);
      *((void *)v15 + 6) = v25;
      v15[56] = v16[56];
      uint64_t v65 = v23;
      uint64_t v66 = v12;
      v23(&v15[*(int *)(v17 + 36)], &v16[*(int *)(v17 + 36)], v12);
      uint64_t v26 = *(int *)(v17 + 40);
      unint64_t v27 = &v15[v26];
      uint64_t v28 = &v16[v26];
      uint64_t v29 = type metadata accessor for SignedObject(0);
      uint64_t v30 = *(void *)(v29 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
      {
        uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174320);
        memcpy(v27, v28, *(void *)(*(void *)(v31 - 8) + 64));
        uint64_t v13 = v65;
        uint64_t v12 = v66;
        uint64_t v20 = v67;
        uint64_t v11 = v63;
        uint64_t v32 = v64;
      }
      else
      {
        uint64_t v33 = *(void *)v28;
        unint64_t v34 = *((void *)v28 + 1);
        sub_24A1A52B0(*(void *)v28, v34);
        *(void *)unint64_t v27 = v33;
        *((void *)v27 + 1) = v34;
        v65(&v27[*(int *)(v29 + 20)], &v28[*(int *)(v29 + 20)], v66);
        uint64_t v61 = v29;
        uint64_t v35 = *(int *)(v29 + 24);
        __dst = &v27[v35];
        uint64_t v36 = (uint64_t *)&v28[v35];
        uint64_t v37 = type metadata accessor for Signature(0);
        uint64_t v38 = *(void *)(v37 - 8);
        uint64_t v58 = v37;
        uint64_t v62 = v27;
        uint64_t v60 = v30;
        if ((*(unsigned int (**)(uint64_t *, uint64_t))(v38 + 48))(v36, 1))
        {
          uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
          memcpy(__dst, v36, *(void *)(*(void *)(v39 - 8) + 64));
        }
        else
        {
          uint64_t v40 = *v36;
          unint64_t v41 = v36[1];
          sub_24A1A52B0(*v36, v41);
          *(void *)__dst = v40;
          *((void *)__dst + 1) = v41;
          uint64_t v42 = v36[2];
          unint64_t v43 = v36[3];
          sub_24A1A52B0(v42, v43);
          *((void *)__dst + 2) = v42;
          *((void *)__dst + 3) = v43;
          *((void *)__dst + 4) = v36[4];
          __dst[40] = *((unsigned char *)v36 + 40);
          v65(&__dst[*(int *)(v58 + 28)], (char *)v36 + *(int *)(v58 + 28), v66);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v38 + 56))(__dst, 0, 1, v58);
        }
        uint64_t v13 = v65;
        uint64_t v20 = v67;
        uint64_t v12 = v66;
        uint64_t v11 = v63;
        uint64_t v32 = v64;
        (*(void (**)(char *, void, uint64_t, uint64_t))(v60 + 56))(v62, 0, 1, v61);
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(v15, 0, 1, v17);
    }
    uint64_t v44 = *(int *)(v20 + 24);
    unsigned int v45 = &v10[v44];
    char v46 = &v11[v44];
    uint64_t v47 = type metadata accessor for LogConsistency(0);
    uint64_t v48 = *(void *)(v47 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48))(v46, 1, v47))
    {
      uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1745E0);
      memcpy(v45, v46, *(void *)(*(void *)(v49 - 8) + 64));
    }
    else
    {
      v13(v45, v46, v12);
      *(void *)&v45[*(int *)(v47 + 20)] = *(void *)&v46[*(int *)(v47 + 20)];
      uint64_t v50 = *(void (**)(char *, void, uint64_t, uint64_t))(v48 + 56);
      swift_retain();
      v50(v45, 0, 1, v47);
    }
    uint64_t v51 = *(int *)(type metadata accessor for TransparencyLogProofs() + 20);
    uint64_t v52 = &v10[v51];
    uint64_t v53 = &v11[v51];
    uint64_t v54 = sub_24A2A6BC0();
    uint64_t v55 = *(void *)(v54 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v53, 1, v54))
    {
      uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B173100);
      memcpy(v52, v53, *(void *)(*(void *)(v56 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v55 + 16))(v52, v53, v54);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v55 + 56))(v52, 0, 1, v54);
    }
  }
  return a1;
}

uint64_t sub_24A1C6C78(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A2A7480();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  type metadata accessor for Release();
  swift_bridgeObjectRelease();
  uint64_t v5 = a1 + *(int *)(a2 + 36);
  uint64_t v6 = sub_24A2A6E10();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
  v7(v5, v6);
  uint64_t v8 = type metadata accessor for ATLogProofs(0);
  uint64_t v9 = v5 + *(int *)(v8 + 20);
  uint64_t v10 = type metadata accessor for LogEntry(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v9, 1, v10))
  {
    swift_bridgeObjectRelease();
    sub_24A1A5384(*(void *)(v9 + 24), *(void *)(v9 + 32));
    v7(v9 + *(int *)(v10 + 36), v6);
    uint64_t v11 = v9 + *(int *)(v10 + 40);
    uint64_t v12 = type metadata accessor for SignedObject(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48))(v11, 1, v12))
    {
      sub_24A1A5384(*(void *)v11, *(void *)(v11 + 8));
      v7(v11 + *(int *)(v12 + 20), v6);
      uint64_t v13 = v11 + *(int *)(v12 + 24);
      uint64_t v14 = type metadata accessor for Signature(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48))(v13, 1, v14))
      {
        sub_24A1A5384(*(void *)v13, *(void *)(v13 + 8));
        sub_24A1A5384(*(void *)(v13 + 16), *(void *)(v13 + 24));
        v7(v13 + *(int *)(v14 + 28), v6);
      }
    }
  }
  uint64_t v15 = v5 + *(int *)(v8 + 24);
  uint64_t v16 = type metadata accessor for LogConsistency(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48))(v15, 1, v16))
  {
    v7(v15, v6);
    swift_release();
  }
  uint64_t v17 = v5 + *(int *)(type metadata accessor for TransparencyLogProofs() + 20);
  uint64_t v18 = sub_24A2A6BC0();
  uint64_t v21 = *(void *)(v18 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 48))(v17, 1, v18);
  if (!result)
  {
    uint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t))(v21 + 8);
    return v20(v17, v18);
  }
  return result;
}

uint64_t sub_24A1C6FC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_24A2A7480();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = type metadata accessor for Release();
  *(void *)(a1 + *(int *)(v7 + 20)) = *(void *)(a2 + *(int *)(v7 + 20));
  uint64_t v8 = *(int *)(a3 + 36);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = sub_24A2A6E10();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
  swift_bridgeObjectRetain();
  v12(v9, v10, v11);
  uint64_t v68 = type metadata accessor for ATLogProofs(0);
  uint64_t v13 = *(int *)(v68 + 20);
  uint64_t v14 = (void *)(v9 + v13);
  uint64_t v15 = (void *)(v10 + v13);
  uint64_t v16 = type metadata accessor for LogEntry(0);
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174940);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
    uint64_t v19 = v11;
  }
  else
  {
    uint64_t v65 = v17;
    uint64_t v66 = a1;
    void *v14 = *v15;
    *((unsigned char *)v14 + 8) = *((unsigned char *)v15 + 8);
    uint64_t v20 = v15[3];
    void v14[2] = v15[2];
    uint64_t v21 = v12;
    unint64_t v22 = v15[4];
    swift_bridgeObjectRetain();
    sub_24A1A52B0(v20, v22);
    void v14[3] = v20;
    v14[4] = v22;
    uint64_t v23 = v15[6];
    v14[5] = v15[5];
    v14[6] = v23;
    *((unsigned char *)v14 + 56) = *((unsigned char *)v15 + 56);
    uint64_t v67 = v21;
    v21((uint64_t)v14 + *(int *)(v16 + 36), (uint64_t)v15 + *(int *)(v16 + 36), v11);
    uint64_t v24 = *(int *)(v16 + 40);
    uint64_t v25 = (void *)((char *)v14 + v24);
    uint64_t v26 = (void *)((char *)v15 + v24);
    uint64_t v27 = type metadata accessor for SignedObject(0);
    uint64_t v28 = *(void *)(v27 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
    {
      uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174320);
      memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
      a1 = v66;
      uint64_t v12 = v67;
      uint64_t v19 = v11;
      uint64_t v30 = v65;
    }
    else
    {
      uint64_t v62 = v28;
      uint64_t v63 = v10;
      uint64_t v31 = v27;
      uint64_t v32 = *v26;
      unint64_t v33 = v26[1];
      sub_24A1A52B0(*v26, v33);
      *uint64_t v25 = v32;
      v25[1] = v33;
      v67((uint64_t)v25 + *(int *)(v31 + 20), (uint64_t)v26 + *(int *)(v31 + 20), v11);
      uint64_t v64 = v31;
      uint64_t v34 = *(int *)(v31 + 24);
      uint64_t v35 = (void *)((char *)v25 + v34);
      uint64_t v36 = (uint64_t *)((char *)v26 + v34);
      uint64_t v37 = type metadata accessor for Signature(0);
      uint64_t v38 = *(void *)(v37 - 8);
      uint64_t v61 = v37;
      uint64_t v19 = v11;
      if ((*(unsigned int (**)(uint64_t *, uint64_t))(v38 + 48))(v36, 1))
      {
        uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
        memcpy(v35, v36, *(void *)(*(void *)(v39 - 8) + 64));
        a1 = v66;
        uint64_t v12 = v67;
      }
      else
      {
        uint64_t v40 = v11;
        uint64_t v41 = *v36;
        unint64_t v42 = v36[1];
        sub_24A1A52B0(*v36, v42);
        *uint64_t v35 = v41;
        v35[1] = v42;
        uint64_t v43 = v36[2];
        unint64_t v44 = v36[3];
        sub_24A1A52B0(v43, v44);
        uint64_t v35[2] = v43;
        v35[3] = v44;
        uint64_t v19 = v40;
        void v35[4] = v36[4];
        *((unsigned char *)v35 + 40) = *((unsigned char *)v36 + 40);
        uint64_t v45 = *(int *)(v61 + 28);
        char v46 = (char *)v36 + v45;
        uint64_t v12 = v67;
        v67((uint64_t)v35 + v45, (uint64_t)v46, v40);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v61);
        a1 = v66;
      }
      uint64_t v30 = v65;
      (*(void (**)(void *, void, uint64_t, uint64_t))(v62 + 56))(v25, 0, 1, v64);
      uint64_t v10 = v63;
    }
    (*(void (**)(void *, void, uint64_t, uint64_t))(v30 + 56))(v14, 0, 1, v16);
  }
  uint64_t v47 = *(int *)(v68 + 24);
  uint64_t v48 = (char *)(v9 + v47);
  uint64_t v49 = (char *)(v10 + v47);
  uint64_t v50 = type metadata accessor for LogConsistency(0);
  uint64_t v51 = *(void *)(v50 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48))(v49, 1, v50))
  {
    uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1745E0);
    memcpy(v48, v49, *(void *)(*(void *)(v52 - 8) + 64));
  }
  else
  {
    v12((uint64_t)v48, (uint64_t)v49, v19);
    *(void *)&v48[*(int *)(v50 + 20)] = *(void *)&v49[*(int *)(v50 + 20)];
    uint64_t v53 = *(void (**)(char *, void, uint64_t, uint64_t))(v51 + 56);
    swift_retain();
    v53(v48, 0, 1, v50);
  }
  uint64_t v54 = *(int *)(type metadata accessor for TransparencyLogProofs() + 20);
  uint64_t v55 = (void *)(v9 + v54);
  uint64_t v56 = (const void *)(v10 + v54);
  uint64_t v57 = sub_24A2A6BC0();
  uint64_t v58 = *(void *)(v57 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v58 + 48))(v56, 1, v57))
  {
    uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B173100);
    memcpy(v55, v56, *(void *)(*(void *)(v59 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v58 + 16))(v55, v56, v57);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v58 + 56))(v55, 0, 1, v57);
  }
  return a1;
}

uint64_t sub_24A1C7600(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_24A2A7480();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = type metadata accessor for Release();
  *(void *)(a1 + *(int *)(v7 + 20)) = *(void *)(a2 + *(int *)(v7 + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v8 = *(int *)(a3 + 36);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = sub_24A2A6E10();
  uint64_t v126 = *(void *)(v11 - 8);
  uint64_t v127 = v11;
  int v125 = *(void (**)(uint64_t, uint64_t))(v126 + 24);
  v125(v9, v10);
  uint64_t v128 = type metadata accessor for ATLogProofs(0);
  uint64_t v12 = *(int *)(v128 + 20);
  uint64_t v13 = v9 + v12;
  uint64_t v14 = v10 + v12;
  uint64_t v15 = type metadata accessor for LogEntry(0);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  int v18 = v17(v13, 1, v15);
  int v19 = v17(v14, 1, v15);
  if (!v18)
  {
    if (!v19)
    {
      uint64_t v35 = *(void *)v14;
      *(unsigned char *)(v13 + 8) = *(unsigned char *)(v14 + 8);
      *(void *)uint64_t v13 = v35;
      *(void *)(v13 + 16) = *(void *)(v14 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v36 = *(void *)(v14 + 24);
      unint64_t v37 = *(void *)(v14 + 32);
      sub_24A1A52B0(v36, v37);
      uint64_t v38 = *(void *)(v13 + 24);
      unint64_t v39 = *(void *)(v13 + 32);
      *(void *)(v13 + 24) = v36;
      *(void *)(v13 + 32) = v37;
      sub_24A1A5384(v38, v39);
      *(void *)(v13 + 40) = *(void *)(v14 + 40);
      uint64_t v40 = *(void *)(v14 + 48);
      *(unsigned char *)(v13 + 56) = *(unsigned char *)(v14 + 56);
      *(void *)(v13 + 48) = v40;
      ((void (*)(uint64_t, uint64_t, uint64_t))v125)(v13 + *(int *)(v15 + 36), v14 + *(int *)(v15 + 36), v127);
      uint64_t v41 = *(int *)(v15 + 40);
      v13 += v41;
      v14 += v41;
      uint64_t v42 = type metadata accessor for SignedObject(0);
      uint64_t v43 = *(void *)(v42 - 8);
      unint64_t v44 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v43 + 48);
      LODWORD(v36) = v44(v13, 1, v42);
      int v45 = v44(v14, 1, v42);
      if (v36)
      {
        if (!v45)
        {
          uint64_t v115 = v10;
          uint64_t v46 = *(void *)v14;
          unint64_t v47 = *(void *)(v14 + 8);
          sub_24A1A52B0(*(void *)v14, v47);
          *(void *)uint64_t v13 = v46;
          *(void *)(v13 + 8) = v47;
          v124 = *(void (**)(uint64_t, uint64_t, uint64_t))(v126 + 16);
          v124(v13 + *(int *)(v42 + 20), v14 + *(int *)(v42 + 20), v127);
          uint64_t v48 = *(int *)(v42 + 24);
          uint64_t v49 = (void *)(v13 + v48);
          uint64_t v50 = (uint64_t *)(v14 + v48);
          uint64_t v51 = type metadata accessor for Signature(0);
          uint64_t v52 = *(void *)(v51 - 8);
          if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v52 + 48))(v50, 1, v51))
          {
            uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
            memcpy(v49, v50, *(void *)(*(void *)(v53 - 8) + 64));
          }
          else
          {
            unint64_t v118 = v50[1];
            uint64_t v121 = *v50;
            sub_24A1A52B0(*v50, v118);
            *uint64_t v49 = v121;
            v49[1] = v118;
            unint64_t v119 = v50[3];
            uint64_t v122 = v50[2];
            sub_24A1A52B0(v122, v119);
            v49[2] = v122;
            v49[3] = v119;
            uint64_t v101 = v50[4];
            *((unsigned char *)v49 + 40) = *((unsigned char *)v50 + 40);
            v49[4] = v101;
            v124((uint64_t)v49 + *(int *)(v51 + 28), (uint64_t)v50 + *(int *)(v51 + 28), v127);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v52 + 56))(v49, 0, 1, v51);
          }
          uint64_t v10 = v115;
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v43 + 56))(v13, 0, 1, v42);
          goto LABEL_10;
        }
      }
      else
      {
        if (!v45)
        {
          uint64_t v85 = *(void *)v14;
          unint64_t v86 = *(void *)(v14 + 8);
          sub_24A1A52B0(*(void *)v14, v86);
          uint64_t v87 = *(void *)v13;
          unint64_t v88 = *(void *)(v13 + 8);
          *(void *)uint64_t v13 = v85;
          *(void *)(v13 + 8) = v86;
          sub_24A1A5384(v87, v88);
          ((void (*)(uint64_t, uint64_t, uint64_t))v125)(v13 + *(int *)(v42 + 20), v14 + *(int *)(v42 + 20), v127);
          uint64_t v89 = *(int *)(v42 + 24);
          uint64_t v90 = v13 + v89;
          uint64_t v91 = v14 + v89;
          uint64_t v92 = type metadata accessor for Signature(0);
          uint64_t v93 = *(void *)(v92 - 8);
          uint64_t v94 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v93 + 48);
          LODWORD(v85) = v94(v90, 1, v92);
          int v95 = v94(v91, 1, v92);
          if (v85)
          {
            if (!v95)
            {
              uint64_t v96 = *(void *)v91;
              unint64_t v97 = *(void *)(v91 + 8);
              sub_24A1A52B0(*(void *)v91, v97);
              *(void *)uint64_t v90 = v96;
              *(void *)(v90 + 8) = v97;
              uint64_t v98 = *(void *)(v91 + 16);
              unint64_t v99 = *(void *)(v91 + 24);
              sub_24A1A52B0(v98, v99);
              *(void *)(v90 + 16) = v98;
              *(void *)(v90 + 24) = v99;
              uint64_t v100 = *(void *)(v91 + 32);
              *(unsigned char *)(v90 + 40) = *(unsigned char *)(v91 + 40);
              *(void *)(v90 + 32) = v100;
              (*(void (**)(uint64_t, uint64_t, uint64_t))(v126 + 16))(v90 + *(int *)(v92 + 28), v91 + *(int *)(v92 + 28), v127);
              (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v93 + 56))(v90, 0, 1, v92);
              goto LABEL_10;
            }
          }
          else
          {
            if (!v95)
            {
              uint64_t v102 = *(void *)v91;
              unint64_t v103 = *(void *)(v91 + 8);
              sub_24A1A52B0(*(void *)v91, v103);
              uint64_t v104 = *(void *)v90;
              unint64_t v105 = *(void *)(v90 + 8);
              *(void *)uint64_t v90 = v102;
              *(void *)(v90 + 8) = v103;
              sub_24A1A5384(v104, v105);
              uint64_t v106 = *(void *)(v91 + 16);
              unint64_t v107 = *(void *)(v91 + 24);
              sub_24A1A52B0(v106, v107);
              uint64_t v108 = *(void *)(v90 + 16);
              unint64_t v109 = *(void *)(v90 + 24);
              *(void *)(v90 + 16) = v106;
              *(void *)(v90 + 24) = v107;
              sub_24A1A5384(v108, v109);
              uint64_t v110 = *(void *)(v91 + 32);
              *(unsigned char *)(v90 + 40) = *(unsigned char *)(v91 + 40);
              *(void *)(v90 + 32) = v110;
              ((void (*)(uint64_t, uint64_t, uint64_t))v125)(v90 + *(int *)(v92 + 28), v91 + *(int *)(v92 + 28), v127);
              goto LABEL_10;
            }
            sub_24A1C8214(v90, type metadata accessor for Signature);
          }
          size_t v32 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8) - 8) + 64);
          unint64_t v33 = (void *)v90;
          uint64_t v34 = (const void *)v91;
LABEL_9:
          memcpy(v33, v34, v32);
LABEL_10:
          uint64_t v30 = v128;
          goto LABEL_23;
        }
        sub_24A1C8214(v13, type metadata accessor for SignedObject);
      }
      uint64_t v31 = &qword_26B174320;
LABEL_8:
      size_t v32 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(v31) - 8) + 64);
      unint64_t v33 = (void *)v13;
      uint64_t v34 = (const void *)v14;
      goto LABEL_9;
    }
    sub_24A1C8214(v13, type metadata accessor for LogEntry);
LABEL_7:
    uint64_t v31 = &qword_26B174940;
    goto LABEL_8;
  }
  if (v19) {
    goto LABEL_7;
  }
  uint64_t v120 = a1;
  uint64_t v123 = v9;
  uint64_t v20 = *(void *)v14;
  *(unsigned char *)(v13 + 8) = *(unsigned char *)(v14 + 8);
  *(void *)uint64_t v13 = v20;
  *(void *)(v13 + 16) = *(void *)(v14 + 16);
  uint64_t v21 = *(void *)(v14 + 24);
  unint64_t v22 = *(void *)(v14 + 32);
  swift_bridgeObjectRetain();
  sub_24A1A52B0(v21, v22);
  *(void *)(v13 + 24) = v21;
  *(void *)(v13 + 32) = v22;
  *(void *)(v13 + 40) = *(void *)(v14 + 40);
  uint64_t v23 = *(void *)(v14 + 48);
  *(unsigned char *)(v13 + 56) = *(unsigned char *)(v14 + 56);
  *(void *)(v13 + 48) = v23;
  uint64_t v117 = *(void (**)(uint64_t, uint64_t, uint64_t))(v126 + 16);
  v117(v13 + *(int *)(v15 + 36), v14 + *(int *)(v15 + 36), v127);
  uint64_t v24 = *(int *)(v15 + 40);
  uint64_t v25 = (void *)(v13 + v24);
  uint64_t v26 = (uint64_t *)(v14 + v24);
  uint64_t v27 = type metadata accessor for SignedObject(0);
  uint64_t v28 = *(void *)(v27 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
  {
    uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174320);
    memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
    uint64_t v30 = v128;
    uint64_t v9 = v123;
  }
  else
  {
    uint64_t v113 = v28;
    uint64_t v116 = v10;
    uint64_t v55 = *v26;
    unint64_t v54 = v26[1];
    sub_24A1A52B0(*v26, v54);
    *uint64_t v25 = v55;
    v25[1] = v54;
    v117((uint64_t)v25 + *(int *)(v27 + 20), (uint64_t)v26 + *(int *)(v27 + 20), v127);
    uint64_t v56 = *(int *)(v27 + 24);
    unint64_t v114 = v25;
    uint64_t v57 = (void *)((char *)v25 + v56);
    uint64_t v58 = (uint64_t *)((char *)v26 + v56);
    uint64_t v59 = type metadata accessor for Signature(0);
    uint64_t v60 = *(void *)(v59 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v60 + 48))(v58, 1, v59))
    {
      uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
      memcpy(v57, v58, *(void *)(*(void *)(v61 - 8) + 64));
    }
    else
    {
      uint64_t v62 = *v58;
      unint64_t v111 = v58[1];
      sub_24A1A52B0(*v58, v111);
      void *v57 = v62;
      v57[1] = v111;
      uint64_t v63 = v58[2];
      unint64_t v112 = v58[3];
      sub_24A1A52B0(v63, v112);
      v57[2] = v63;
      v57[3] = v112;
      uint64_t v64 = v58[4];
      *((unsigned char *)v57 + 40) = *((unsigned char *)v58 + 40);
      v57[4] = v64;
      v117((uint64_t)v57 + *(int *)(v59 + 28), (uint64_t)v58 + *(int *)(v59 + 28), v127);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v60 + 56))(v57, 0, 1, v59);
    }
    uint64_t v9 = v123;
    (*(void (**)(void *, void, uint64_t, uint64_t))(v113 + 56))(v114, 0, 1, v27);
    uint64_t v10 = v116;
    uint64_t v30 = v128;
  }
  a1 = v120;
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
LABEL_23:
  uint64_t v65 = *(int *)(v30 + 24);
  uint64_t v66 = (char *)(v9 + v65);
  uint64_t v67 = (char *)(v10 + v65);
  uint64_t v68 = type metadata accessor for LogConsistency(0);
  uint64_t v69 = *(void *)(v68 - 8);
  uint64_t v70 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v69 + 48);
  int v71 = v70(v66, 1, v68);
  int v72 = v70(v67, 1, v68);
  if (v71)
  {
    if (!v72)
    {
      (*(void (**)(char *, char *, uint64_t))(v126 + 16))(v66, v67, v127);
      *(void *)&v66[*(int *)(v68 + 20)] = *(void *)&v67[*(int *)(v68 + 20)];
      uint64_t v73 = *(void (**)(char *, void, uint64_t, uint64_t))(v69 + 56);
      swift_retain();
      v73(v66, 0, 1, v68);
      goto LABEL_29;
    }
    goto LABEL_28;
  }
  if (v72)
  {
    sub_24A1C8214((uint64_t)v66, type metadata accessor for LogConsistency);
LABEL_28:
    uint64_t v74 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1745E0);
    memcpy(v66, v67, *(void *)(*(void *)(v74 - 8) + 64));
    goto LABEL_29;
  }
  ((void (*)(char *, char *, uint64_t))v125)(v66, v67, v127);
  *(void *)&v66[*(int *)(v68 + 20)] = *(void *)&v67[*(int *)(v68 + 20)];
  swift_retain();
  swift_release();
LABEL_29:
  uint64_t v75 = *(int *)(type metadata accessor for TransparencyLogProofs() + 20);
  unint64_t v76 = (void *)(v9 + v75);
  char v77 = (void *)(v10 + v75);
  uint64_t v78 = sub_24A2A6BC0();
  uint64_t v79 = *(void *)(v78 - 8);
  char v80 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v79 + 48);
  int v81 = v80(v76, 1, v78);
  int v82 = v80(v77, 1, v78);
  if (!v81)
  {
    if (!v82)
    {
      (*(void (**)(void *, void *, uint64_t))(v79 + 24))(v76, v77, v78);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v79 + 8))(v76, v78);
    goto LABEL_34;
  }
  if (v82)
  {
LABEL_34:
    uint64_t v83 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B173100);
    memcpy(v76, v77, *(void *)(*(void *)(v83 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v79 + 16))(v76, v77, v78);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v79 + 56))(v76, 0, 1, v78);
  return a1;
}

uint64_t sub_24A1C8214(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_24A1C8274(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_24A2A7480();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = type metadata accessor for Release();
  *(void *)(a1 + *(int *)(v7 + 20)) = *(void *)(a2 + *(int *)(v7 + 20));
  uint64_t v8 = *(int *)(a3 + 36);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = sub_24A2A6E10();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32);
  v12(v9, v10, v11);
  uint64_t v13 = type metadata accessor for ATLogProofs(0);
  uint64_t v14 = *(int *)(v13 + 20);
  uint64_t v15 = (void *)(v9 + v14);
  uint64_t v16 = (void *)(v10 + v14);
  uint64_t v17 = type metadata accessor for LogEntry(0);
  uint64_t v18 = *(void *)(v17 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
  {
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174940);
    memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    uint64_t v53 = v13;
    void *v15 = *v16;
    *((unsigned char *)v15 + 8) = *((unsigned char *)v16 + 8);
    void v15[2] = v16[2];
    *(_OWORD *)(v15 + 3) = *(_OWORD *)(v16 + 3);
    uint64_t v20 = v16[6];
    v15[5] = v16[5];
    v15[6] = v20;
    *((unsigned char *)v15 + 56) = *((unsigned char *)v16 + 56);
    v12((uint64_t)v15 + *(int *)(v17 + 36), (uint64_t)v16 + *(int *)(v17 + 36), v11);
    uint64_t v21 = *(int *)(v17 + 40);
    unint64_t v22 = (_OWORD *)((char *)v15 + v21);
    uint64_t v55 = v12;
    uint64_t v23 = (_OWORD *)((char *)v16 + v21);
    uint64_t v54 = v11;
    uint64_t v24 = type metadata accessor for SignedObject(0);
    uint64_t v25 = *(void *)(v24 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
    {
      uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174320);
      memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
      uint64_t v11 = v54;
      uint64_t v12 = v55;
      uint64_t v13 = v53;
    }
    else
    {
      uint64_t v50 = v25;
      _OWORD *v22 = *v23;
      v55((uint64_t)v22 + *(int *)(v24 + 20), (uint64_t)v23 + *(int *)(v24 + 20), v54);
      uint64_t v51 = v24;
      uint64_t v52 = v22;
      uint64_t v27 = *(int *)(v24 + 24);
      uint64_t v28 = (_OWORD *)((char *)v22 + v27);
      uint64_t v29 = (_OWORD *)((char *)v23 + v27);
      uint64_t v30 = type metadata accessor for Signature(0);
      uint64_t v31 = *(void *)(v30 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
      {
        uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
        memcpy(v28, v29, *(void *)(*(void *)(v32 - 8) + 64));
        uint64_t v11 = v54;
        uint64_t v12 = v55;
      }
      else
      {
        long long v33 = v29[1];
        *uint64_t v28 = *v29;
        v28[1] = v33;
        *((void *)v28 + 4) = *((void *)v29 + 4);
        *((unsigned char *)v28 + 40) = *((unsigned char *)v29 + 40);
        uint64_t v34 = *(int *)(v30 + 28);
        uint64_t v35 = (char *)v29 + v34;
        uint64_t v49 = v30;
        uint64_t v11 = v54;
        uint64_t v12 = v55;
        v55((uint64_t)v28 + v34, (uint64_t)v35, v54);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v49);
      }
      uint64_t v13 = v53;
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v50 + 56))(v52, 0, 1, v51);
    }
    (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  }
  uint64_t v36 = *(int *)(v13 + 24);
  unint64_t v37 = (char *)(v9 + v36);
  uint64_t v38 = (char *)(v10 + v36);
  uint64_t v39 = type metadata accessor for LogConsistency(0);
  uint64_t v40 = *(void *)(v39 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39))
  {
    uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1745E0);
    memcpy(v37, v38, *(void *)(*(void *)(v41 - 8) + 64));
  }
  else
  {
    v12((uint64_t)v37, (uint64_t)v38, v11);
    *(void *)&v37[*(int *)(v39 + 20)] = *(void *)&v38[*(int *)(v39 + 20)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
  }
  uint64_t v42 = *(int *)(type metadata accessor for TransparencyLogProofs() + 20);
  uint64_t v43 = (void *)(v9 + v42);
  unint64_t v44 = (const void *)(v10 + v42);
  uint64_t v45 = sub_24A2A6BC0();
  uint64_t v46 = *(void *)(v45 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v46 + 48))(v44, 1, v45))
  {
    uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B173100);
    memcpy(v43, v44, *(void *)(*(void *)(v47 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v46 + 32))(v43, v44, v45);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, v45);
  }
  return a1;
}

uint64_t sub_24A1C8844(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_24A2A7480();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = type metadata accessor for Release();
  *(void *)(a1 + *(int *)(v7 + 20)) = *(void *)(a2 + *(int *)(v7 + 20));
  swift_bridgeObjectRelease();
  uint64_t v8 = *(int *)(a3 + 36);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = sub_24A2A6E10();
  uint64_t v96 = *(void *)(v11 - 8);
  uint64_t v97 = v11;
  int v95 = *(void (**)(uint64_t, char *))(v96 + 40);
  v95(v9, v10);
  uint64_t v98 = type metadata accessor for ATLogProofs(0);
  uint64_t v12 = *(int *)(v98 + 20);
  uint64_t v13 = v9 + v12;
  uint64_t v14 = &v10[v12];
  uint64_t v15 = type metadata accessor for LogEntry(0);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  int v18 = v17(v13, 1, v15);
  int v19 = v17((uint64_t)v14, 1, v15);
  if (!v18)
  {
    if (!v19)
    {
      *(void *)uint64_t v13 = *(void *)v14;
      *(unsigned char *)(v13 + 8) = v14[8];
      *(void *)(v13 + 16) = *((void *)v14 + 2);
      swift_bridgeObjectRelease();
      uint64_t v32 = *(void *)(v13 + 24);
      unint64_t v33 = *(void *)(v13 + 32);
      *(_OWORD *)(v13 + 24) = *(_OWORD *)(v14 + 24);
      sub_24A1A5384(v32, v33);
      uint64_t v34 = *((void *)v14 + 6);
      *(void *)(v13 + 40) = *((void *)v14 + 5);
      *(void *)(v13 + 48) = v34;
      *(unsigned char *)(v13 + 56) = v14[56];
      ((void (*)(uint64_t, char *, uint64_t))v95)(v13 + *(int *)(v15 + 36), &v14[*(int *)(v15 + 36)], v97);
      uint64_t v35 = *(int *)(v15 + 40);
      v13 += v35;
      v14 += v35;
      uint64_t v36 = type metadata accessor for SignedObject(0);
      uint64_t v37 = *(void *)(v36 - 8);
      uint64_t v38 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v37 + 48);
      int v39 = v38(v13, 1, v36);
      int v40 = v38((uint64_t)v14, 1, v36);
      if (v39)
      {
        if (!v40)
        {
          *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
          uint64_t v41 = *(void (**)(uint64_t, char *, uint64_t))(v96 + 32);
          v41(v13 + *(int *)(v36 + 20), &v14[*(int *)(v36 + 20)], v97);
          uint64_t v42 = *(int *)(v36 + 24);
          __dsta = (_OWORD *)(v13 + v42);
          uint64_t v43 = &v14[v42];
          uint64_t v44 = type metadata accessor for Signature(0);
          uint64_t v92 = *(void *)(v44 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v92 + 48))(v43, 1, v44))
          {
            uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
            memcpy(__dsta, v43, *(void *)(*(void *)(v45 - 8) + 64));
          }
          else
          {
            long long v83 = *((_OWORD *)v43 + 1);
            _OWORD *__dsta = *(_OWORD *)v43;
            __dsta[1] = v83;
            *((void *)__dsta + 4) = *((void *)v43 + 4);
            *((unsigned char *)__dsta + 40) = v43[40];
            v41((uint64_t)__dsta + *(int *)(v44 + 28), &v43[*(int *)(v44 + 28)], v97);
            (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v92 + 56))(__dsta, 0, 1, v44);
          }
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v37 + 56))(v13, 0, 1, v36);
          goto LABEL_10;
        }
      }
      else
      {
        if (!v40)
        {
          uint64_t v72 = *(void *)v13;
          unint64_t v73 = *(void *)(v13 + 8);
          *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
          sub_24A1A5384(v72, v73);
          ((void (*)(uint64_t, char *, uint64_t))v95)(v13 + *(int *)(v36 + 20), &v14[*(int *)(v36 + 20)], v97);
          uint64_t v74 = *(int *)(v36 + 24);
          uint64_t v75 = v13 + v74;
          unint64_t v76 = &v14[v74];
          uint64_t v77 = type metadata accessor for Signature(0);
          uint64_t v78 = *(void *)(v77 - 8);
          uint64_t v79 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v78 + 48);
          int v80 = v79(v75, 1, v77);
          int v81 = v79((uint64_t)v76, 1, v77);
          if (v80)
          {
            if (!v81)
            {
              long long v82 = *((_OWORD *)v76 + 1);
              *(_OWORD *)uint64_t v75 = *(_OWORD *)v76;
              *(_OWORD *)(v75 + 16) = v82;
              *(void *)(v75 + 32) = *((void *)v76 + 4);
              *(unsigned char *)(v75 + 40) = v76[40];
              (*(void (**)(uint64_t, char *, uint64_t))(v96 + 32))(v75 + *(int *)(v77 + 28), &v76[*(int *)(v77 + 28)], v97);
              (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v78 + 56))(v75, 0, 1, v77);
              goto LABEL_10;
            }
          }
          else
          {
            if (!v81)
            {
              uint64_t v84 = *(void *)v75;
              unint64_t v85 = *(void *)(v75 + 8);
              *(_OWORD *)uint64_t v75 = *(_OWORD *)v76;
              sub_24A1A5384(v84, v85);
              uint64_t v86 = *(void *)(v75 + 16);
              unint64_t v87 = *(void *)(v75 + 24);
              *(_OWORD *)(v75 + 16) = *((_OWORD *)v76 + 1);
              sub_24A1A5384(v86, v87);
              *(void *)(v75 + 32) = *((void *)v76 + 4);
              *(unsigned char *)(v75 + 40) = v76[40];
              ((void (*)(uint64_t, char *, uint64_t))v95)(v75 + *(int *)(v77 + 28), &v76[*(int *)(v77 + 28)], v97);
              goto LABEL_10;
            }
            sub_24A1C8214(v75, type metadata accessor for Signature);
          }
          size_t v28 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8) - 8) + 64);
          uint64_t v29 = (void *)v75;
          uint64_t v30 = v76;
LABEL_9:
          memcpy(v29, v30, v28);
LABEL_10:
          uint64_t v31 = v98;
          goto LABEL_23;
        }
        sub_24A1C8214(v13, type metadata accessor for SignedObject);
      }
      uint64_t v27 = &qword_26B174320;
LABEL_8:
      size_t v28 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(v27) - 8) + 64);
      uint64_t v29 = (void *)v13;
      uint64_t v30 = v14;
      goto LABEL_9;
    }
    sub_24A1C8214(v13, type metadata accessor for LogEntry);
LABEL_7:
    uint64_t v27 = &qword_26B174940;
    goto LABEL_8;
  }
  if (v19) {
    goto LABEL_7;
  }
  __dst = v10;
  *(void *)uint64_t v13 = *(void *)v14;
  *(unsigned char *)(v13 + 8) = v14[8];
  *(void *)(v13 + 16) = *((void *)v14 + 2);
  *(_OWORD *)(v13 + 24) = *(_OWORD *)(v14 + 24);
  uint64_t v20 = *((void *)v14 + 6);
  *(void *)(v13 + 40) = *((void *)v14 + 5);
  *(void *)(v13 + 48) = v20;
  *(unsigned char *)(v13 + 56) = v14[56];
  uint64_t v91 = *(void (**)(uint64_t, char *, uint64_t))(v96 + 32);
  v91(v13 + *(int *)(v15 + 36), &v14[*(int *)(v15 + 36)], v97);
  uint64_t v21 = *(int *)(v15 + 40);
  unint64_t v22 = (_OWORD *)(v13 + v21);
  uint64_t v23 = &v14[v21];
  uint64_t v24 = type metadata accessor for SignedObject(0);
  uint64_t v25 = *(void *)(v24 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
  {
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174320);
    memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
  }
  else
  {
    uint64_t v90 = v25;
    _OWORD *v22 = *(_OWORD *)v23;
    v91((uint64_t)v22 + *(int *)(v24 + 20), &v23[*(int *)(v24 + 20)], v97);
    uint64_t v46 = *(int *)(v24 + 24);
    uint64_t v89 = v22;
    uint64_t v47 = (_OWORD *)((char *)v22 + v46);
    uint64_t v48 = &v23[v46];
    uint64_t v49 = type metadata accessor for Signature(0);
    uint64_t v88 = *(void *)(v49 - 8);
    uint64_t v50 = v49;
    if ((*(unsigned int (**)(char *, uint64_t))(v88 + 48))(v48, 1))
    {
      uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
      memcpy(v47, v48, *(void *)(*(void *)(v51 - 8) + 64));
    }
    else
    {
      long long v52 = *((_OWORD *)v48 + 1);
      *uint64_t v47 = *(_OWORD *)v48;
      v47[1] = v52;
      *((void *)v47 + 4) = *((void *)v48 + 4);
      *((unsigned char *)v47 + 40) = v48[40];
      v91((uint64_t)v47 + *(int *)(v50 + 28), &v48[*(int *)(v50 + 28)], v97);
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v88 + 56))(v47, 0, 1, v50);
    }
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v90 + 56))(v89, 0, 1, v24);
  }
  uint64_t v31 = v98;
  uint64_t v10 = __dst;
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
LABEL_23:
  uint64_t v53 = *(int *)(v31 + 24);
  uint64_t v54 = (char *)(v9 + v53);
  uint64_t v55 = &v10[v53];
  uint64_t v56 = type metadata accessor for LogConsistency(0);
  uint64_t v57 = *(void *)(v56 - 8);
  uint64_t v58 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v57 + 48);
  int v59 = v58(v54, 1, v56);
  int v60 = v58(v55, 1, v56);
  if (v59)
  {
    if (!v60)
    {
      (*(void (**)(char *, char *, uint64_t))(v96 + 32))(v54, v55, v97);
      *(void *)&v54[*(int *)(v56 + 20)] = *(void *)&v55[*(int *)(v56 + 20)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v57 + 56))(v54, 0, 1, v56);
      goto LABEL_29;
    }
    goto LABEL_28;
  }
  if (v60)
  {
    sub_24A1C8214((uint64_t)v54, type metadata accessor for LogConsistency);
LABEL_28:
    uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1745E0);
    memcpy(v54, v55, *(void *)(*(void *)(v61 - 8) + 64));
    goto LABEL_29;
  }
  ((void (*)(char *, char *, uint64_t))v95)(v54, v55, v97);
  *(void *)&v54[*(int *)(v56 + 20)] = *(void *)&v55[*(int *)(v56 + 20)];
  swift_release();
LABEL_29:
  uint64_t v62 = *(int *)(type metadata accessor for TransparencyLogProofs() + 20);
  uint64_t v63 = (void *)(v9 + v62);
  uint64_t v64 = &v10[v62];
  uint64_t v65 = sub_24A2A6BC0();
  uint64_t v66 = *(void *)(v65 - 8);
  uint64_t v67 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v66 + 48);
  int v68 = v67(v63, 1, v65);
  int v69 = v67(v64, 1, v65);
  if (!v68)
  {
    if (!v69)
    {
      (*(void (**)(void *, char *, uint64_t))(v66 + 40))(v63, v64, v65);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v66 + 8))(v63, v65);
    goto LABEL_34;
  }
  if (v69)
  {
LABEL_34:
    uint64_t v70 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B173100);
    memcpy(v63, v64, *(void *)(*(void *)(v70 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, char *, uint64_t))(v66 + 32))(v63, v64, v65);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v66 + 56))(v63, 0, 1, v65);
  return a1;
}

uint64_t sub_24A1C934C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24A1C9360);
}

uint64_t sub_24A1C9360(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Release();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = type metadata accessor for TransparencyLogProofs();
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 36);
    return v11(v13, a2, v12);
  }
}

uint64_t sub_24A1C9458(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24A1C946C);
}

uint64_t sub_24A1C946C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Release();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, v8);
  }
  else
  {
    uint64_t v12 = type metadata accessor for TransparencyLogProofs();
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a4 + 36);
    return v13(v15, a2, a2, v14);
  }
}

uint64_t sub_24A1C9570()
{
  return swift_getWitnessTable();
}

uint64_t sub_24A1C958C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_24A1C95D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B173100);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_24A1C963C(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_24A2A6BC0();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_24A1C9680(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_24A1C96E0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t DefaultAssetProvider.apTicket.getter()
{
  v15[1] = *(id *)MEMORY[0x263EF8340];
  id v2 = objc_msgSend(self, sel_sharedDataAccessor);
  v15[0] = 0;
  id v3 = objc_msgSend(v2, sel_copyPathForPersonalizedData_error_, 2, v15);

  id v4 = v15[0];
  if (v3)
  {
    uint64_t v1 = sub_24A2A7800();
    id v5 = v4;

    uint64_t v6 = sub_24A2A69E0();
    uint64_t v7 = *(void *)(v6 - 8);
    MEMORY[0x270FA5388](v6);
    uint64_t v9 = (char *)v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_24A2A6990();
    swift_bridgeObjectRelease();
    uint64_t v10 = sub_24A2A6A00();
    if (!v0)
    {
      uint64_t v1 = v10;
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      return v1;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    uint64_t v11 = v0;
  }
  else
  {
    id v12 = v15[0];
    uint64_t v11 = sub_24A2A6970();

    swift_willThrow();
  }
  sub_24A1C9974();
  swift_allocError();
  *(void *)uint64_t v13 = v11;
  *(void *)(v13 + 8) = 0;
  *(unsigned char *)(v13 + 16) = 1;
  swift_willThrow();
  return v1;
}

unint64_t sub_24A1C9974()
{
  unint64_t result = qword_269778B88;
  if (!qword_269778B88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269778B88);
  }
  return result;
}

uint64_t DefaultAssetProvider.provisioningCertificateChain.getter()
{
  uint64_t v1 = (__CFString *)sub_24A2A77F0();
  id v2 = (__CFString *)sub_24A2A77F0();
  CFPropertyListRef v3 = CFPreferencesCopyAppValue(v1, v2);

  if (v3)
  {
    swift_unknownObjectRetain();
    if (swift_dynamicCast()
      && (v0 = v10, uint64_t v4 = sub_24A2A6A30(), v6 = v5, swift_bridgeObjectRelease(), v6 >> 60 != 15))
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_26B174B48);
      uint64_t v0 = swift_allocObject();
      *(_OWORD *)(v0 + 16) = xmmword_24A2A8A60;
      *(void *)(v0 + 32) = v4;
      *(void *)(v0 + 40) = v6;
      swift_unknownObjectRelease();
    }
    else
    {
      sub_24A1C9974();
      swift_allocError();
      *(_OWORD *)uint64_t v7 = xmmword_24A2A9FF0;
      *(unsigned char *)(v7 + 16) = 2;
      swift_willThrow();
      swift_unknownObjectRelease();
    }
  }
  else
  {
    sub_24A1C9974();
    swift_allocError();
    *(_OWORD *)uint64_t v8 = xmmword_24A2AA000;
    *(unsigned char *)(v8 + 16) = 2;
    swift_willThrow();
  }
  return v0;
}

uint64_t DefaultAssetProvider.sealedHashEntries.getter()
{
  if (MEMORY[0x263F16C40]) {
    BOOL v1 = MEMORY[0x263F16C30] == 0;
  }
  else {
    BOOL v1 = 1;
  }
  if (v1 || MEMORY[0x263F16C48] == 0 || MEMORY[0x263F16C38] == 0)
  {
    sub_24A1C9974();
    swift_allocError();
    *(void *)uint64_t v6 = 0;
    *(void *)(v6 + 8) = 0;
    *(unsigned char *)(v6 + 16) = 2;
    swift_willThrow();
  }
  else
  {
    sub_24A2A6D10();
    uint64_t v4 = (void *)sub_24A2A6D00();
    uint64_t v5 = sub_24A2A6CF0();
    uint64_t v0 = sub_24A1CA22C(v5);

    swift_bridgeObjectRelease();
  }
  return v0;
}

uint64_t sub_24A1C9C60@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = v2;
  uint64_t v7 = *a1;
  uint64_t v8 = sub_24A2A6D40();
  BOOL v10 = v8 == 0x363532616873 && v9 == 0xE600000000000000;
  if (v10 || (uint64_t v3 = v8, v11 = v9, (sub_24A2A7E40() & 1) != 0))
  {
    swift_bridgeObjectRelease();
    *(void *)&long long v55 = sub_24A2A7360();
    id v12 = (unint64_t *)&unk_26B174A10;
    uint64_t v13 = (void (*)(uint64_t))MEMORY[0x263F047F8];
  }
  else
  {
    if (v3 == 0x343833616873 && v11 == 0xE600000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v15 = sub_24A2A7E40();
      swift_bridgeObjectRelease();
      if ((v15 & 1) == 0)
      {
        uint64_t v16 = sub_24A2A6D40();
        uint64_t v18 = v17;
        sub_24A1C9974();
        swift_allocError();
        *(void *)uint64_t v19 = v16;
        *(void *)(v19 + 8) = v18;
        *(unsigned char *)(v19 + 16) = 0;
        return swift_willThrow();
      }
    }
    *(void *)&long long v55 = sub_24A2A7390();
    id v12 = (unint64_t *)&qword_26B174A18;
    uint64_t v13 = (void (*)(uint64_t))MEMORY[0x263F04808];
  }
  uint64_t v54 = sub_24A1CA854(v12, v13);
  unint64_t v21 = sub_24A2A6D30();
  unint64_t v22 = v21;
  if (v21 >> 62) {
    uint64_t v23 = sub_24A2A7D30();
  }
  else {
    uint64_t v23 = *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v51 = a2;
  uint64_t v52 = v2;
  uint64_t v53 = v7;
  if (v23)
  {
    uint64_t v61 = (void *)MEMORY[0x263F8EE78];
    uint64_t v24 = &v61;
    sub_24A245990(0, v23 & ~(v23 >> 63), 0);
    if (v23 < 0)
    {
      __break(1u);
      goto LABEL_37;
    }
    uint64_t v25 = 0;
    uint64_t v4 = v61;
    do
    {
      if ((v22 & 0xC000000000000001) != 0) {
        id v26 = (id)MEMORY[0x24C5BF420](v25, v22);
      }
      else {
        id v26 = *(id *)(v22 + 8 * v25 + 32);
      }
      uint64_t v27 = v26;
      uint64_t v28 = sub_24A2A6D50();
      char v56 = 2;
      SEP.SealedHash.Entry.init<A>(data:flags:algorithm:)(v28, v29, &v56, v55, v54, (uint64_t)&v57);

      long long v30 = v57;
      long long v31 = v58;
      char v32 = v59;
      long long v33 = v60;
      uint64_t v61 = v4;
      unint64_t v35 = v4[2];
      unint64_t v34 = v4[3];
      if (v35 >= v34 >> 1)
      {
        long long v49 = v58;
        long long v50 = v57;
        long long v48 = v60;
        sub_24A245990(v34 > 1, v35 + 1, 1);
        long long v33 = v48;
        long long v31 = v49;
        long long v30 = v50;
        uint64_t v4 = v61;
      }
      ++v25;
      v4[2] = v35 + 1;
      uint64_t v36 = &v4[7 * v35];
      *((_OWORD *)v36 + 2) = v30;
      *((_OWORD *)v36 + 3) = v31;
      *((unsigned char *)v36 + 64) = v32;
      *(_OWORD *)(v36 + 9) = v33;
    }
    while (v23 != v25);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v4 = (void *)MEMORY[0x263F8EE78];
  }
  uint64_t result = sub_24A2A6D20();
  if (!v37)
  {
LABEL_34:
    *uint64_t v51 = v4;
    return result;
  }
  uint64_t v38 = sub_24A2A7860();
  uint64_t v39 = *(void *)(v38 - 8);
  MEMORY[0x270FA5388](v38);
  uint64_t v41 = (char *)&v48 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24A2A7850();
  uint64_t v42 = sub_24A2A7810();
  unint64_t v44 = v43;
  swift_bridgeObjectRelease();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v41, v38);
  if (v44 >> 60 != 15)
  {
    LOBYTE(v61) = 4;
    SEP.SealedHash.Entry.init<A>(digest:flags:algorithm:)(v42, v44, (char *)&v61, v55, v54, (uint64_t)&v57);
    uint64_t v3 = *((void *)&v57 + 1);
    uint64_t v24 = (void *)v57;
    a2 = (void *)*((void *)&v58 + 1);
    uint64_t v5 = v58;
    LOBYTE(v7) = v59;
    long long v55 = v60;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if (result)
    {
LABEL_31:
      unint64_t v46 = v4[2];
      unint64_t v45 = v4[3];
      if (v46 >= v45 >> 1)
      {
        uint64_t result = (uint64_t)sub_24A1DEF0C((void *)(v45 > 1), v46 + 1, 1, v4);
        uint64_t v4 = (void *)result;
      }
      v4[2] = v46 + 1;
      uint64_t v47 = &v4[7 * v46];
      v47[4] = v24;
      v47[5] = v3;
      v47[6] = v5;
      v47[7] = a2;
      *((unsigned char *)v47 + 64) = v7;
      *(_OWORD *)(v47 + 9) = v55;
      goto LABEL_34;
    }
LABEL_37:
    uint64_t result = (uint64_t)sub_24A1DEF0C(0, v4[2] + 1, 1, v4);
    uint64_t v4 = (void *)result;
    goto LABEL_31;
  }
  __break(1u);
  return result;
}

uint64_t sub_24A1CA120()
{
  return DefaultAssetProvider.apTicket.getter();
}

uint64_t sub_24A1CA138()
{
  return DefaultAssetProvider.provisioningCertificateChain.getter();
}

uint64_t sub_24A1CA150()
{
  if (MEMORY[0x263F16C40]) {
    BOOL v1 = MEMORY[0x263F16C30] == 0;
  }
  else {
    BOOL v1 = 1;
  }
  if (v1 || MEMORY[0x263F16C48] == 0 || MEMORY[0x263F16C38] == 0)
  {
    sub_24A1C9974();
    swift_allocError();
    *(void *)uint64_t v6 = 0;
    *(void *)(v6 + 8) = 0;
    *(unsigned char *)(v6 + 16) = 2;
    swift_willThrow();
  }
  else
  {
    sub_24A2A6D10();
    uint64_t v4 = (void *)sub_24A2A6D00();
    uint64_t v5 = sub_24A2A6CF0();
    uint64_t v0 = sub_24A1CA22C(v5);

    swift_bridgeObjectRelease();
  }
  return v0;
}

uint64_t sub_24A1CA22C(uint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_269778B90);
  uint64_t result = sub_24A2A7D40();
  uint64_t v3 = result;
  int64_t v4 = 0;
  uint64_t v35 = a1;
  uint64_t v36 = result;
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v6 = a1 + 64;
  uint64_t v5 = v7;
  uint64_t v8 = 1 << *(unsigned char *)(v6 - 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & v5;
  uint64_t v32 = v6;
  int64_t v33 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v34 = result + 64;
  if (!v10) {
    goto LABEL_5;
  }
LABEL_4:
  uint64_t v37 = (v10 - 1) & v10;
  int64_t v38 = v4;
  for (unint64_t i = __clz(__rbit64(v10)) | (v4 << 6); ; unint64_t i = __clz(__rbit64(v14)) + (v13 << 6))
  {
    uint64_t v16 = sub_24A2A6C00();
    uint64_t v40 = &v31;
    uint64_t v17 = *(void *)(v16 - 8);
    uint64_t v18 = *(void *)(v17 + 64);
    MEMORY[0x270FA5388](v16);
    uint64_t v19 = (char *)&v31 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v20 = v35;
    unint64_t v22 = *(void *)(v21 + 72) * i;
    uint64_t v23 = (*(uint64_t (**)(char *, unint64_t, uint64_t))(v17 + 16))(v19, *(void *)(v35 + 48) + v22, v16);
    uint64_t v39 = &v31;
    uint64_t v24 = *(void **)(*(void *)(v20 + 56) + 8 * i);
    id v43 = v24;
    MEMORY[0x270FA5388](v23);
    uint64_t v25 = v19;
    id v26 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
    v26(v19, v19, v16);
    id v27 = v24;
    uint64_t v28 = v41;
    sub_24A1C9C60((uint64_t *)&v43, &v42);
    uint64_t v41 = v28;
    if (v28)
    {
      uint64_t v3 = v36;
      swift_release();
      (*(void (**)(char *, uint64_t))(v17 + 8))(v25, v16);

      return v3;
    }

    *(void *)(v34 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    uint64_t v3 = v36;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v36 + 48) + v22, v25, v16);
    *(void *)(*(void *)(v3 + 56) + 8 * i) = v42;
    uint64_t v29 = *(void *)(v3 + 16);
    BOOL v12 = __OFADD__(v29, 1);
    uint64_t v30 = v29 + 1;
    if (v12)
    {
      __break(1u);
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    *(void *)(v3 + 16) = v30;
    int64_t v4 = v38;
    unint64_t v10 = v37;
    if (v37) {
      goto LABEL_4;
    }
LABEL_5:
    BOOL v12 = __OFADD__(v4, 1);
    int64_t v13 = v4 + 1;
    if (v12) {
      goto LABEL_27;
    }
    if (v13 >= v33) {
      return v3;
    }
    unint64_t v14 = *(void *)(v32 + 8 * v13);
    if (!v14) {
      break;
    }
LABEL_15:
    uint64_t v37 = (v14 - 1) & v14;
    int64_t v38 = v13;
  }
  int64_t v15 = v13 + 1;
  if (v13 + 1 >= v33) {
    return v3;
  }
  unint64_t v14 = *(void *)(v32 + 8 * v15);
  if (v14) {
    goto LABEL_14;
  }
  int64_t v15 = v13 + 2;
  if (v13 + 2 >= v33) {
    return v3;
  }
  unint64_t v14 = *(void *)(v32 + 8 * v15);
  if (v14) {
    goto LABEL_14;
  }
  int64_t v15 = v13 + 3;
  if (v13 + 3 >= v33) {
    return v3;
  }
  unint64_t v14 = *(void *)(v32 + 8 * v15);
  if (v14)
  {
LABEL_14:
    int64_t v13 = v15;
    goto LABEL_15;
  }
  while (1)
  {
    int64_t v13 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v13 >= v33) {
      return v3;
    }
    unint64_t v14 = *(void *)(v32 + 8 * v13);
    ++v15;
    if (v14) {
      goto LABEL_15;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t dispatch thunk of AttestationAssetProvider.apTicket.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of AttestationAssetProvider.provisioningCertificateChain.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of AttestationAssetProvider.sealedHashEntries.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

ValueMetadata *type metadata accessor for DefaultAssetProvider()
{
  return &type metadata for DefaultAssetProvider;
}

id sub_24A1CA638(id result, id a2, char a3)
{
  if (a3 == 1) {
    return result;
  }
  if (!a3) {
    return (id)swift_bridgeObjectRetain();
  }
  return result;
}

void destroy for DefaultAssetProvider.Error(uint64_t a1)
{
}

void sub_24A1CA668(void *a1, id a2, char a3)
{
  if (a3 == 1)
  {
  }
  else if (!a3)
  {
    swift_bridgeObjectRelease();
  }
}

uint64_t _s16CloudAttestation20DefaultAssetProviderV5ErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  int64_t v4 = *(void **)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_24A1CA638(*(id *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for DefaultAssetProvider.Error(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  int64_t v4 = *(void **)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_24A1CA638(*(id *)a2, v4, v5);
  uint64_t v6 = *(void **)a1;
  uint64_t v7 = *(void **)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  char v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  sub_24A1CA668(v6, v7, v8);
  return a1;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for DefaultAssetProvider.Error(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  int64_t v4 = *(void **)a1;
  char v5 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  sub_24A1CA668(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for DefaultAssetProvider.Error(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for DefaultAssetProvider.Error(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 254;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_24A1CA814(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 1u) {
    return *(unsigned __int8 *)(a1 + 16);
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t sub_24A1CA82C(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(void *)__n128 result = a2 - 2;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 2;
  }
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for DefaultAssetProvider.Error()
{
  return &type metadata for DefaultAssetProvider.Error;
}

uint64_t sub_24A1CA854(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_24A1CA89C()
{
  if (os_variant_allows_internal_security_policies()
    && (uint64_t v0 = (__CFString *)sub_24A2A77F0(),
        BOOL v1 = (__CFString *)sub_24A2A77F0(),
        CFPreferencesCopyAppValue(v0, v1),
        v0,
        v1,
        __swift_instantiateConcreteTypeFromMangledName(qword_26B1731D0),
        swift_dynamicCast()))
  {
    return v3;
  }
  else
  {
    return 2;
  }
}

void NodeValidator.environment.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t NodeValidator.transparencyVerifier.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_24A1CA974(v1 + 8, a1);
}

uint64_t sub_24A1CA974(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t NodeValidator.transparencyVerifier.setter(long long *a1)
{
  uint64_t v3 = v1 + 8;
  __swift_destroy_boxed_opaque_existential_1(v3);

  return sub_24A1B97D8(a1, v3);
}

uint64_t (*NodeValidator.transparencyVerifier.modify())()
{
  return nullsub_1;
}

uint64_t NodeValidator.validity.getter()
{
  return *(void *)(v0 + 48);
}

uint64_t NodeValidator.validity.setter(uint64_t result, uint64_t a2)
{
  *(void *)(v2 + 48) = result;
  *(void *)(v2 + 56) = a2;
  return result;
}

uint64_t (*NodeValidator.validity.modify())()
{
  return nullsub_1;
}

uint64_t NodeValidator.roots.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t NodeValidator.roots.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 64) = a1;
  return result;
}

uint64_t (*NodeValidator.roots.modify())()
{
  return nullsub_1;
}

uint64_t NodeValidator.clock.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for NodeValidator();
  return sub_24A1B2CAC(v1 + *(int *)(v3 + 32), a1, &qword_26B173100);
}

uint64_t type metadata accessor for NodeValidator()
{
  uint64_t result = qword_26B1730F0;
  if (!qword_26B1730F0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t NodeValidator.clock.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for NodeValidator() + 32);

  return sub_24A1CAB90(a1, v3);
}

uint64_t sub_24A1CAB90(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B173100);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*NodeValidator.clock.modify())()
{
  return nullsub_1;
}

uint64_t NodeValidator.transparencyProofValidation.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for NodeValidator() + 36));
}

uint64_t NodeValidator.transparencyProofValidation.setter(char a1)
{
  uint64_t result = type metadata accessor for NodeValidator();
  *(unsigned char *)(v1 + *(int *)(result + 36)) = a1;
  return result;
}

uint64_t (*NodeValidator.transparencyProofValidation.modify())()
{
  return nullsub_1;
}

uint64_t NodeValidator.strictCertificateValidation.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for NodeValidator() + 40));
}

uint64_t NodeValidator.strictCertificateValidation.setter(char a1)
{
  uint64_t result = type metadata accessor for NodeValidator();
  *(unsigned char *)(v1 + *(int *)(result + 40)) = a1;
  return result;
}

uint64_t (*NodeValidator.strictCertificateValidation.modify())()
{
  return nullsub_1;
}

uint64_t NodeValidator.requireProdTrustAnchors.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for NodeValidator() + 44));
}

uint64_t NodeValidator.requireProdTrustAnchors.setter(char a1)
{
  uint64_t result = type metadata accessor for NodeValidator();
  *(unsigned char *)(v1 + *(int *)(result + 44)) = a1;
  return result;
}

uint64_t (*NodeValidator.requireProdTrustAnchors.modify())()
{
  return nullsub_1;
}

uint64_t NodeValidator.requireRestrictedExecutionMode.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for NodeValidator() + 48));
}

uint64_t NodeValidator.requireRestrictedExecutionMode.setter(char a1)
{
  uint64_t result = type metadata accessor for NodeValidator();
  *(unsigned char *)(v1 + *(int *)(result + 48)) = a1;
  return result;
}

uint64_t (*NodeValidator.requireRestrictedExecutionMode.modify())()
{
  return nullsub_1;
}

uint64_t NodeValidator.requireEphemeralDataMode.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for NodeValidator() + 52));
}

uint64_t NodeValidator.requireEphemeralDataMode.setter(char a1)
{
  uint64_t result = type metadata accessor for NodeValidator();
  *(unsigned char *)(v1 + *(int *)(result + 52)) = a1;
  return result;
}

uint64_t (*NodeValidator.requireEphemeralDataMode.modify())()
{
  return nullsub_1;
}

uint64_t NodeValidator.restrictDeveloperMode.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for NodeValidator() + 56));
}

uint64_t NodeValidator.restrictDeveloperMode.setter(char a1)
{
  uint64_t result = type metadata accessor for NodeValidator();
  *(unsigned char *)(v1 + *(int *)(result + 56)) = a1;
  return result;
}

uint64_t (*NodeValidator.restrictDeveloperMode.modify())()
{
  return nullsub_1;
}

uint64_t NodeValidator.requireProdFusing.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for NodeValidator() + 60));
}

uint64_t NodeValidator.requireProdFusing.setter(char a1)
{
  uint64_t result = type metadata accessor for NodeValidator();
  *(unsigned char *)(v1 + *(int *)(result + 60)) = a1;
  return result;
}

uint64_t (*NodeValidator.requireProdFusing.modify())()
{
  return nullsub_1;
}

uint64_t NodeValidator.requireLockedCryptexes.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for NodeValidator() + 64));
}

uint64_t NodeValidator.requireLockedCryptexes.setter(char a1)
{
  uint64_t result = type metadata accessor for NodeValidator();
  *(unsigned char *)(v1 + *(int *)(result + 64)) = a1;
  return result;
}

uint64_t (*NodeValidator.requireLockedCryptexes.modify())()
{
  return nullsub_1;
}

uint64_t NodeValidator.ensembleTopologyValidation.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for NodeValidator() + 68));
}

uint64_t NodeValidator.ensembleTopologyValidation.setter(char a1)
{
  uint64_t result = type metadata accessor for NodeValidator();
  *(unsigned char *)(v1 + *(int *)(result + 68)) = a1;
  return result;
}

uint64_t (*NodeValidator.ensembleTopologyValidation.modify())()
{
  return nullsub_1;
}

uint64_t NodeValidator.allowExpired.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for NodeValidator() + 72));
}

uint64_t NodeValidator.allowExpired.setter(char a1)
{
  uint64_t result = type metadata accessor for NodeValidator();
  *(unsigned char *)(v1 + *(int *)(result + 72)) = a1;
  return result;
}

uint64_t (*NodeValidator.allowExpired.modify())()
{
  return nullsub_1;
}

uint64_t sub_24A1CB258()
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v0 = sub_24A1CA89C();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  byte_26B1730E0 = v0 & 1;
  return result;
}

uint64_t static NodeValidator.cacheProofs.getter()
{
  if (qword_26B173110 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return byte_26B1730E0;
}

uint64_t static NodeValidator.cacheProofs.setter(char a1)
{
  if (qword_26B173110 != -1) {
    swift_once();
  }
  uint64_t result = swift_beginAccess();
  byte_26B1730E0 = a1 & 1;
  return result;
}

uint64_t (*static NodeValidator.cacheProofs.modify())()
{
  if (qword_26B173110 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t sub_24A1CB44C()
{
  uint64_t v0 = sub_24A2A7160();
  __swift_allocate_value_buffer(v0, qword_26B1768B0);
  __swift_project_value_buffer(v0, (uint64_t)qword_26B1768B0);
  return sub_24A2A7150();
}

uint64_t NodeValidator.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for NodeValidator();
  uint64_t v3 = v2 - 8;
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  char v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x270FA5388](v4);
  uint64_t v9 = (char *)&v21 - v8;
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v21 - v10;
  uint64_t v12 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 64) = MEMORY[0x263F8EE78];
  uint64_t v13 = a1 + *(int *)(v3 + 40);
  uint64_t v14 = sub_24A2A6BC0();
  int64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
  uint64_t v21 = v13;
  v15(v13, 1, 1, v14);
  uint64_t v16 = *(int *)(v3 + 84);
  *(void *)(a1 + v16) = 0;
  *((void *)v9 + 8) = v12;
  uint64_t v17 = (uint64_t)&v9[*(int *)(v3 + 40)];
  v15(v17, 1, 1, v14);
  uint64_t v18 = *(int *)(v3 + 84);
  *(void *)&v9[v18] = 0;
  swift_beginAccess();
  char v19 = byte_26B1730E8;
  if (byte_26B1730E8 == 10)
  {
    static Environment.default.getter(&v23);
    char v19 = v23;
  }
  char v22 = v19;
  NodeValidator.init(validity:environment:)(0xC0DDD92E56000000, 4683, (unsigned __int8 *)&v22, (uint64_t)v6);
  sub_24A1B2D10(v17, &qword_26B173100);

  sub_24A1D0E3C((uint64_t)v6, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for NodeValidator);
  sub_24A1D0E3C((uint64_t)v9, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for NodeValidator);
  swift_bridgeObjectRelease();
  sub_24A1B2D10(v21, &qword_26B173100);

  return sub_24A1D0E3C((uint64_t)v11, a1, (uint64_t (*)(void))type metadata accessor for NodeValidator);
}

uint64_t NodeValidator.init(validity:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for NodeValidator();
  uint64_t v7 = v6 - 8;
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(a3 + 64) = MEMORY[0x263F8EE78];
  uint64_t v10 = a3 + *(int *)(v7 + 40);
  uint64_t v11 = sub_24A2A6BC0();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
  uint64_t v12 = *(int *)(v7 + 84);
  *(void *)(a3 + v12) = 0;
  swift_beginAccess();
  char v13 = byte_26B1730E8;
  if (byte_26B1730E8 == 10)
  {
    static Environment.default.getter(&v17);
    char v13 = v17;
  }
  char v16 = v13;
  NodeValidator.init(validity:environment:)(a1, a2, (unsigned __int8 *)&v16, (uint64_t)v9);
  sub_24A1B2D10(v10, &qword_26B173100);

  return sub_24A1D0E3C((uint64_t)v9, a3, (uint64_t (*)(void))type metadata accessor for NodeValidator);
}

uint64_t NodeValidator.init(environment:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for NodeValidator();
  uint64_t v5 = v4 - 8;
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  unsigned __int8 v8 = *a1;
  *(void *)(a2 + 64) = MEMORY[0x263F8EE78];
  uint64_t v9 = a2 + *(int *)(v5 + 40);
  uint64_t v10 = sub_24A2A6BC0();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  uint64_t v11 = *(int *)(v5 + 84);
  *(void *)(a2 + v11) = 0;
  unsigned __int8 v14 = v8;
  NodeValidator.init(validity:environment:)(0xC0DDD92E56000000, 4683, &v14, (uint64_t)v7);
  sub_24A1B2D10(v9, &qword_26B173100);

  return sub_24A1D0E3C((uint64_t)v7, a2, (uint64_t (*)(void))type metadata accessor for NodeValidator);
}

uint64_t NodeValidator.init(validity:environment:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X8>)
{
  int v7 = *a3;
  *(void *)(a4 + 64) = MEMORY[0x263F8EE78];
  unsigned __int8 v8 = (int *)type metadata accessor for NodeValidator();
  uint64_t v9 = a4 + v8[8];
  uint64_t v10 = sub_24A2A6BC0();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  *(void *)(a4 + v8[19]) = 0;
  *(void *)(a4 + 48) = a1;
  *(void *)(a4 + 56) = a2;
  if (qword_26B173110 != -1) {
    swift_once();
  }
  swift_beginAccess();
  if (byte_26B1730E0 == 1)
  {
    if (MEMORY[0x263F80D48]) {
      id v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F80D48]), sel_initWithApplication_, 0);
    }
    else {
      id v11 = 0;
    }
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_269778B98);
    int64_t v38 = (ValueMetadata *)v13;
    uint64_t v39 = &protocol witness table for CachingTransparencyVerifier<A>;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v37);
    sub_24A2A7150();
    *(uint64_t *)((char *)boxed_opaque_existential_1 + *(int *)(v13 + 36)) = (uint64_t)v11;
    __swift_instantiateConcreteTypeFromMangledName(&qword_269778BA0);
    uint64_t v15 = swift_allocObject();
    swift_defaultActor_initialize();
    unint64_t v36 = sub_24A1BBA60(MEMORY[0x263F8EE78]);
    __swift_instantiateConcreteTypeFromMangledName(&qword_269778BA8);
    sub_24A2A7720();
    *(void *)(v15 + 112) = v36;
    *(void *)(v15 + 120) = 4;
    *(uint64_t *)((char *)boxed_opaque_existential_1 + *(int *)(v13 + 40)) = v15;
  }
  else
  {
    int64_t v38 = &type metadata for SWTransparencyVerifier;
    uint64_t v39 = &protocol witness table for SWTransparencyVerifier;
    if (MEMORY[0x263F80D48]) {
      id v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F80D48]), sel_initWithApplication_, 0);
    }
    else {
      id v12 = 0;
    }
    *(void *)&long long v37 = v12;
  }
  sub_24A1B97D8(&v37, a4 + 8);
  *(unsigned char *)a4 = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v16 = sub_24A1CA89C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v16 == 2) {
    unsigned int v17 = (0xF8u >> v7) & 1;
  }
  else {
    LOBYTE(v17) = v16 & 1;
  }
  *(unsigned char *)(a4 + v8[9]) = v17;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v18 = sub_24A1CA89C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v18 == 2) {
    unsigned int v19 = (0xF8u >> v7) & 1;
  }
  else {
    LOBYTE(v19) = v18 & 1;
  }
  *(unsigned char *)(a4 + v8[10]) = v19;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v20 = sub_24A1CA89C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v20 == 2) {
    unsigned int v21 = (0xE0u >> v7) & 1;
  }
  else {
    LOBYTE(v21) = v20 & 1;
  }
  *(unsigned char *)(a4 + v8[11]) = v21;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v22 = sub_24A1CA89C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v22 == 2) {
    unsigned int v23 = (0xF8u >> v7) & 1;
  }
  else {
    LOBYTE(v23) = v22 & 1;
  }
  *(unsigned char *)(a4 + v8[12]) = v23;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v24 = sub_24A1CA89C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v24 == 2) {
    unsigned int v25 = (0xF8u >> v7) & 1;
  }
  else {
    LOBYTE(v25) = v24 & 1;
  }
  *(unsigned char *)(a4 + v8[13]) = v25;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v26 = sub_24A1CA89C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v26 == 2) {
    BOOL v27 = v7 == 7;
  }
  else {
    BOOL v27 = v26;
  }
  *(unsigned char *)(a4 + v8[14]) = v27;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v28 = sub_24A1CA89C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v28 == 2) {
    BOOL v29 = v7 == 7;
  }
  else {
    BOOL v29 = v28;
  }
  *(unsigned char *)(a4 + v8[15]) = v29;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v30 = sub_24A1CA89C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v30 == 2) {
    unsigned int v31 = (0xF8u >> v7) & 1;
  }
  else {
    LOBYTE(v31) = v30 & 1;
  }
  *(unsigned char *)(a4 + v8[16]) = v31;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v32 = sub_24A1CA89C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v32 == 2) {
    unsigned int v33 = (0xF8u >> v7) & 1;
  }
  else {
    LOBYTE(v33) = v32 & 1;
  }
  *(unsigned char *)(a4 + v8[17]) = v33;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v34 = sub_24A1CA89C();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(unsigned char *)(a4 + v8[18]) = v34 & 1;
  return result;
}

uint64_t sub_24A1CC048()
{
  if (*(unsigned char *)(v0 + *(int *)(type metadata accessor for NodeValidator() + 44)) == 1)
  {
    if (qword_26B174290 != -1) {
      swift_once();
    }
    return swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v2 = *(void *)(v0 + 64);
    if (qword_26B174290 != -1) {
      swift_once();
    }
    swift_bridgeObjectRetain();
    unint64_t v3 = swift_bridgeObjectRetain();
    sub_24A1E787C(v3);
    if (qword_269778580 != -1) {
      swift_once();
    }
    unint64_t v4 = swift_bridgeObjectRetain();
    sub_24A1E787C(v4);
    return v2;
  }
}

uint64_t NodeValidator.defaultPolicy.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v61 = a1;
  uint64_t v58 = type metadata accessor for KeyOptionsPolicy(0);
  uint64_t v2 = MEMORY[0x270FA5388](v58);
  uint64_t v63 = &v53[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v2);
  long long v60 = &v53[-v4];
  uint64_t v5 = type metadata accessor for SecureConfigPolicy(0);
  uint64_t v6 = MEMORY[0x270FA5388](v5 - 8);
  uint64_t v62 = &v53[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v6);
  uint64_t v64 = &v53[-v8];
  uint64_t v9 = type metadata accessor for X509Policy();
  uint64_t v10 = (int *)(v9 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v13 = &v53[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = &v53[-v14];
  char v16 = (int *)type metadata accessor for NodeValidator();
  uint64_t v56 = v16[10];
  LODWORD(v59) = v1[v56];
  uint64_t v57 = sub_24A1CC048();
  uint64_t v17 = (uint64_t)&v1[v16[8]];
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B173100);
  MEMORY[0x270FA5388](v18 - 8);
  char v20 = &v53[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_24A1B2CAC(v17, (uint64_t)v20, &qword_26B173100);
  uint64_t v21 = (uint64_t)&v13[v10[8]];
  uint64_t v22 = sub_24A2A6BC0();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v21, 1, 1, v22);
  unsigned int v23 = &v13[v10[9]];
  *(void *)unsigned int v23 = 0;
  v23[8] = 1;
  char v24 = (uint64_t *)&v13[v10[10]];
  *char v24 = 0;
  v24[1] = 0;
  unsigned char *v13 = (_BYTE)v59;
  *((void *)v13 + 1) = v57;
  sub_24A1CAB90((uint64_t)v20, v21);
  sub_24A1CF11C(*v24);
  *char v24 = 0;
  v24[1] = 0;
  *(void *)unsigned int v23 = 0;
  v23[8] = 1;
  uint64_t v65 = v13;
  char v59 = v15;
  uint64_t v25 = (uint64_t)v15;
  char v26 = v1;
  sub_24A1D0E3C((uint64_t)v13, v25, (uint64_t (*)(void))type metadata accessor for X509Policy);
  uint64_t v27 = v16[19];
  char v28 = *(void **)&v1[v27];
  if (v28)
  {
    sub_24A1CF444(*(id *)&v1[v27]);
    sub_24A1CF454(0);
    id v29 = v28;
    uint64_t v30 = (uint64_t)v28;
  }
  else
  {
    if (v1[v56])
    {
      uint64_t v30 = 0;
    }
    else
    {
      if (qword_26B1747B8 != -1) {
        swift_once();
      }
      uint64_t v31 = sub_24A2A7160();
      __swift_project_value_buffer(v31, (uint64_t)qword_26B1747A0);
      char v32 = sub_24A2A7140();
      os_log_type_t v33 = sub_24A2A7B30();
      if (os_log_type_enabled(v32, v33))
      {
        char v34 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)char v34 = 0;
        _os_log_impl(&dword_24A19F000, v32, v33, "Using Insecure SEPAttestationPolicy", v34, 2u);
        MEMORY[0x24C5C00A0](v34, -1, -1);
      }

      uint64_t v30 = 1;
    }
    sub_24A1CF444((id)v30);
    sub_24A1CF454(0);
  }
  long long v55 = (void *)v30;
  LODWORD(v57) = v28 == 0;
  sub_24A1CF464((id)v30);
  sub_24A1CF11C(0);
  LODWORD(v56) = v26[v16[16]];
  uint64_t v35 = type metadata accessor for SEP.SealedHash(0);
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56))(v64, 1, 1, v35);
  sub_24A1CA974((uint64_t)(v26 + 8), (uint64_t)v84);
  v84[40] = v26[v16[9]];
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B174B50);
  sub_24A2A6C70();
  uint64_t v36 = swift_allocObject();
  *(_OWORD *)(v36 + 16) = xmmword_24A2A8AA0;
  sub_24A2A6C50();
  sub_24A2A6C40();
  v83[0] = v36;
  sub_24A1D0EA4((unint64_t *)&qword_26B174250, MEMORY[0x263F276E0]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B174A80);
  sub_24A1B9860((unint64_t *)&qword_26B174A88, &qword_26B174A80);
  uint64_t v37 = (uint64_t)v60;
  sub_24A2A7C10();
  type metadata accessor for KeyOptionsPolicy.Assertion(0);
  swift_storeEnumTagMultiPayload();
  uint64_t v38 = v37 + *(int *)(v58 + 20);
  uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174258);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(v38, 1, 1, v39);
  int v40 = v26[v16[12]];
  int v41 = v26[v16[13]];
  uint64_t v42 = (uint64_t)*(&off_265284128 + *v26);
  if (v26[v16[15]]) {
    int v43 = 33816833;
  }
  else {
    int v43 = 3;
  }
  if (v26[v16[14]]) {
    int v44 = 0;
  }
  else {
    int v44 = 2;
  }
  int v54 = v44;
  if (v41) {
    char v45 = 1;
  }
  else {
    char v45 = 2;
  }
  if (v40) {
    char v46 = 1;
  }
  else {
    char v46 = 2;
  }
  LODWORD(v58) = v26[v16[17]];
  uint64_t v47 = (uint64_t)v59;
  uint64_t v48 = (uint64_t)v65;
  sub_24A1D0D6C((uint64_t)v59, (uint64_t)v65, (uint64_t (*)(void))type metadata accessor for X509Policy);
  uint64_t v80 = 0;
  uint64_t v81 = 0;
  uint64_t v79 = v55;
  char v82 = v57;
  v83[0] = v48;
  v83[1] = &v79;
  uint64_t v77 = 0;
  char v78 = v56;
  v83[4] = &v77;
  long long v49 = v64;
  long long v50 = v62;
  sub_24A1D0D6C((uint64_t)v64, (uint64_t)v62, type metadata accessor for SecureConfigPolicy);
  v83[5] = v50;
  sub_24A1CF474((uint64_t)v84, (uint64_t)v76);
  v83[6] = v76;
  uint64_t v51 = v63;
  sub_24A1D0D6C(v37, (uint64_t)v63, type metadata accessor for KeyOptionsPolicy);
  __int16 v75 = 0;
  int v74 = v43;
  v83[7] = v51;
  v83[8] = &v74;
  v71[0] = v46;
  v71[1] = v45;
  v71[2] = v54;
  char v73 = 0;
  __int16 v72 = 2;
  uint64_t v70 = v42;
  v83[9] = v71;
  v83[10] = &v70;
  *(_DWORD *)((char *)v69 + 7) = 0;
  v69[0] = 0;
  char v66 = v58;
  uint64_t v67 = 0;
  char v68 = 0;
  v83[11] = v69;
  v83[12] = &v66;
  sub_24A1CC9E4((uint64_t)v83, v61);
  swift_bridgeObjectRetain();
  sub_24A1CF564(v37, type metadata accessor for KeyOptionsPolicy);
  sub_24A1CF4D0((uint64_t)v84);
  sub_24A1CF564((uint64_t)v49, type metadata accessor for SecureConfigPolicy);
  sub_24A1CF564(v47, (uint64_t (*)(void))type metadata accessor for X509Policy);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_24A1CF564((uint64_t)v51, type metadata accessor for KeyOptionsPolicy);
  sub_24A1CF4D0((uint64_t)v76);
  sub_24A1CF564((uint64_t)v50, type metadata accessor for SecureConfigPolicy);
  swift_bridgeObjectRelease();
  sub_24A1CF524(v79, v80);
  return sub_24A1CF564((uint64_t)v65, (uint64_t (*)(void))type metadata accessor for X509Policy);
}

uint64_t sub_24A1CC9E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v33 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1742B0);
  uint64_t v4 = (int *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v34[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for X509Policy();
  sub_24A1D0D6C(*(void *)a1, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for X509Policy);
  v34[0] = v6;
  uint64_t v7 = &v6[v4[14]];
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(void **)v8;
  uint64_t v10 = *(void *)(v8 + 8);
  uint64_t v11 = *(void *)(v8 + 16);
  char v12 = *(unsigned char *)(v8 + 24);
  *(void *)uint64_t v7 = *(void *)v8;
  *((void *)v7 + 1) = v10;
  *((void *)v7 + 2) = v11;
  v7[24] = v12;
  v34[1] = v7;
  uint64_t v13 = &v6[v4[26]];
  uint64_t v14 = *(uint64_t **)(a1 + 32);
  uint64_t v15 = *v14;
  LOBYTE(v14) = *((unsigned char *)v14 + 8);
  *(void *)uint64_t v13 = v15;
  v13[8] = (char)v14;
  v34[4] = v13;
  type metadata accessor for SecureConfigPolicy(0);
  uint64_t v16 = (uint64_t)&v6[v4[30]];
  sub_24A1D0D6C(*(void *)(a1 + 40), v16, type metadata accessor for SecureConfigPolicy);
  v34[5] = v16;
  uint64_t v17 = (uint64_t)&v6[v4[34]];
  sub_24A1CF474(*(void *)(a1 + 48), v17);
  v34[6] = v17;
  type metadata accessor for KeyOptionsPolicy(0);
  uint64_t v18 = (uint64_t)&v6[v4[38]];
  sub_24A1D0D6C(*(void *)(a1 + 56), v18, type metadata accessor for KeyOptionsPolicy);
  v34[7] = v18;
  uint64_t v19 = &v6[v4[42]];
  uint64_t v20 = *(void *)(a1 + 64);
  uint64_t v21 = *(void *)(a1 + 72);
  __int16 v22 = *(_WORD *)(v20 + 4);
  *(_DWORD *)uint64_t v19 = *(_DWORD *)v20;
  *((_WORD *)v19 + 2) = v22;
  v34[8] = v19;
  unsigned int v23 = &v6[v4[46]];
  LOWORD(v20) = *(_WORD *)v21;
  LOBYTE(v22) = *(unsigned char *)(v21 + 2);
  char v24 = *(unsigned char *)(v21 + 5);
  LOWORD(v21) = *(_WORD *)(v21 + 3);
  *(_WORD *)unsigned int v23 = v20;
  void v23[2] = v22;
  *(_WORD *)(v23 + 3) = v21;
  v23[5] = v24;
  v34[9] = v23;
  uint64_t v25 = &v6[v4[50]];
  char v26 = *(uint64_t **)(a1 + 88);
  *(void *)uint64_t v25 = **(void **)(a1 + 80);
  v34[10] = v25;
  uint64_t v27 = &v6[v4[54]];
  uint64_t v28 = *v26;
  LOBYTE(v20) = *((unsigned char *)v26 + 8);
  LOBYTE(v22) = *((unsigned char *)v26 + 9);
  LOBYTE(v26) = *((unsigned char *)v26 + 10);
  *(void *)uint64_t v27 = v28;
  v27[8] = v20;
  v27[9] = v22;
  v27[10] = (char)v26;
  v34[11] = v27;
  id v29 = &v6[v4[58]];
  uint64_t v30 = *(void *)(a1 + 96);
  LOBYTE(v26) = *(unsigned char *)v30;
  uint64_t v31 = *(void *)(v30 + 8);
  LOBYTE(v30) = *(unsigned char *)(v30 + 16);
  *id v29 = (char)v26;
  *((void *)v29 + 1) = v31;
  v29[16] = v30;
  v34[12] = v29;
  sub_24A1CF12C((uint64_t)v34, v33);
  sub_24A1D0EEC(v9, v10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_24A1CCC68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_269778BD8);
  uint64_t v5 = (int *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for X509Policy();
  sub_24A1D0D6C(*(void *)a1, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for X509Policy);
  v33[0] = v7;
  uint64_t v8 = (uint64_t)&v7[v5[14]];
  sub_24A1B2CAC(*(void *)(a1 + 8), v8, &qword_269778BE0);
  v33[1] = v8;
  uint64_t v9 = &v7[v5[18]];
  uint64_t v10 = *(void *)(a1 + 16);
  char v12 = *(void **)v10;
  uint64_t v11 = *(void *)(v10 + 8);
  uint64_t v13 = *(void *)(v10 + 16);
  *(void *)uint64_t v9 = *(void *)v10;
  *((void *)v9 + 1) = v11;
  *((void *)v9 + 2) = v13;
  v33[2] = v9;
  uint64_t v14 = &v7[v5[30]];
  uint64_t v15 = *(uint64_t **)(a1 + 40);
  uint64_t v16 = *v15;
  LOBYTE(v15) = *((unsigned char *)v15 + 8);
  *(void *)uint64_t v14 = v16;
  v14[8] = (char)v15;
  v33[5] = v14;
  type metadata accessor for SecureConfigPolicy(0);
  uint64_t v17 = (uint64_t)&v7[v5[34]];
  sub_24A1D0D6C(*(void *)(a1 + 48), v17, type metadata accessor for SecureConfigPolicy);
  v33[6] = v17;
  type metadata accessor for KeyOptionsPolicy(0);
  uint64_t v18 = (uint64_t)&v7[v5[38]];
  sub_24A1D0D6C(*(void *)(a1 + 56), v18, type metadata accessor for KeyOptionsPolicy);
  v33[7] = v18;
  type metadata accessor for SoftwareReleasePolicy();
  uint64_t v19 = (uint64_t)&v7[v5[42]];
  sub_24A1D0D6C(*(void *)(a1 + 64), v19, (uint64_t (*)(void))type metadata accessor for SoftwareReleasePolicy);
  v33[8] = v19;
  uint64_t v20 = &v7[v5[46]];
  uint64_t v21 = *(void *)(a1 + 72);
  uint64_t v22 = *(void *)(a1 + 80);
  char v23 = *(unsigned char *)v21;
  char v24 = *(unsigned char *)(v21 + 1);
  char v25 = *(unsigned char *)(v21 + 2);
  uint64_t v26 = *(void *)(v21 + 12);
  uint64_t v27 = *(void *)(v21 + 4);
  LODWORD(v21) = *(_DWORD *)(v21 + 20);
  *uint64_t v20 = v23;
  v20[1] = v24;
  v20[2] = v25;
  *(void *)(v20 + 4) = v27;
  *(void *)(v20 + 12) = v26;
  *((_DWORD *)v20 + 5) = v21;
  v33[9] = v20;
  uint64_t v28 = &v7[v5[50]];
  LOWORD(v21) = *(_WORD *)v22;
  char v29 = *(unsigned char *)(v22 + 2);
  __int16 v30 = *(_WORD *)(v22 + 3);
  LOBYTE(v22) = *(unsigned char *)(v22 + 5);
  *(_WORD *)uint64_t v28 = v21;
  void v28[2] = v29;
  v28[5] = v22;
  *(_WORD *)(v28 + 3) = v30;
  v33[10] = v28;
  uint64_t v31 = &v7[v5[54]];
  *(void *)uint64_t v31 = **(void **)(a1 + 88);
  v33[11] = v31;
  sub_24A1CF2C4((uint64_t)v33, a2);
  sub_24A1CF444(v12);
  sub_24A1CF454(v11);
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t NodeValidator.validate<A>(bundle:nonce:policy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v9[29] = v15;
  v9[30] = v8;
  v9[27] = a7;
  v9[28] = a8;
  v9[25] = a5;
  v9[26] = a6;
  v9[23] = a3;
  v9[24] = a4;
  v9[21] = a1;
  v9[22] = a2;
  type metadata accessor for AttestationBundle(0);
  v9[31] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749E0);
  v9[32] = swift_task_alloc();
  uint64_t v10 = sub_24A2A6DC0();
  v9[33] = v10;
  v9[34] = *(void *)(v10 - 8);
  v9[35] = swift_task_alloc();
  uint64_t v11 = sub_24A2A71B0();
  v9[36] = v11;
  v9[37] = *(void *)(v11 - 8);
  v9[38] = swift_task_alloc();
  v9[39] = type metadata accessor for NodeValidator();
  v9[40] = swift_task_alloc();
  uint64_t v12 = sub_24A2A7160();
  v9[41] = v12;
  v9[42] = *(void *)(v12 - 8);
  v9[43] = swift_task_alloc();
  v9[44] = swift_task_alloc();
  v9[45] = swift_task_alloc();
  v9[46] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_24A1CD14C, 0, 0);
}

uint64_t sub_24A1CD14C()
{
  uint64_t v31 = v0;
  v30[1] = *MEMORY[0x263EF8340];
  if (qword_26B174358 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[46];
  uint64_t v2 = v0[41];
  uint64_t v3 = v0[42];
  uint64_t v4 = v0[40];
  uint64_t v5 = v0[30];
  uint64_t v6 = __swift_project_value_buffer(v2, (uint64_t)qword_26B1768B0);
  v0[47] = v6;
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[48] = v7;
  v0[49] = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v7(v1, v6, v2);
  sub_24A1D0D6C(v5, v4, (uint64_t (*)(void))type metadata accessor for NodeValidator);
  uint64_t v8 = sub_24A2A7140();
  os_log_type_t v9 = sub_24A2A7B40();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (unsigned char *)v0[40];
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    v30[0] = v12;
    *(_DWORD *)uint64_t v11 = 136446210;
    unint64_t v13 = 0xE300000000000000;
    uint64_t v14 = 7759204;
    switch(*v10)
    {
      case 1:
        unint64_t v13 = 0xE90000000000006CLL;
        uint64_t v14 = 0x6172656D65687065;
        break;
      case 2:
        unint64_t v13 = 0xE400000000000000;
        uint64_t v14 = 1718773104;
        break;
      case 3:
        unint64_t v13 = 0xE200000000000000;
        uint64_t v14 = 24945;
        break;
      case 4:
        unint64_t v13 = 0xE700000000000000;
        uint64_t v14 = 0x676E6967617473;
        break;
      case 5:
        uint64_t v14 = 7627125;
        break;
      case 6:
        unint64_t v13 = 0xE500000000000000;
        uint64_t v14 = 0x7972726163;
        break;
      case 7:
        uint64_t v14 = 0x69746375646F7270;
        unint64_t v13 = 0xEA00000000006E6FLL;
        break;
      case 8:
        unint64_t v13 = 0xEA00000000007972;
        uint64_t v14 = 0x616D697250326171;
        break;
      case 9:
        unint64_t v13 = 0xEB000000006C616ELL;
        uint64_t v14 = 0x7265746E49326171;
        break;
      default:
        break;
    }
    uint64_t v27 = v0[46];
    uint64_t v20 = v0[41];
    uint64_t v19 = v0[42];
    uint64_t v21 = v0[40];
    v0[20] = sub_24A1C52A8(v14, v13, v30);
    sub_24A2A7B70();
    swift_bridgeObjectRelease();
    sub_24A1CF564(v21, (uint64_t (*)(void))type metadata accessor for NodeValidator);
    _os_log_impl(&dword_24A19F000, v8, v9, "Validating attestation bundle in environment %{public}s", v11, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C5C00A0](v12, -1, -1);
    MEMORY[0x24C5C00A0](v11, -1, -1);

    uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
    v18(v27, v20);
  }
  else
  {
    uint64_t v15 = v0[46];
    uint64_t v16 = v0[41];
    uint64_t v17 = v0[42];
    sub_24A1CF564(v0[40], (uint64_t (*)(void))type metadata accessor for NodeValidator);

    uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
    v18(v15, v16);
  }
  v0[50] = v18;
  uint64_t v29 = v0[29];
  sub_24A1F1DAC();
  v0[16] = sub_24A1BFAC0(MEMORY[0x263F8EE78]);
  uint64_t v28 = (uint64_t (*)(uint64_t, void *, uint64_t, uint64_t))(*(void *)(v29 + 8) + **(int **)(v29 + 8));
  uint64_t v22 = (void *)swift_task_alloc();
  v0[51] = v22;
  void *v22 = v0;
  v22[1] = sub_24A1CD5E0;
  uint64_t v23 = v0[28];
  uint64_t v24 = v0[29];
  uint64_t v25 = v0[24];
  return v28(v25, v0 + 16, v23, v24);
}

uint64_t sub_24A1CD5E0()
{
  *(void *)(*(void *)v1 + 416) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_24A1CE934;
  }
  else {
    uint64_t v2 = sub_24A1CD720;
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

uint64_t sub_24A1CD720()
{
  uint64_t v136 = v0;
  v135[1] = *(unsigned char **)MEMORY[0x263EF8340];
  uint64_t v2 = v0 + 16;
  uint64_t v1 = v0[16];
  if (*(void *)(v1 + 16)
    && (unint64_t v3 = sub_24A1BE7EC((uint64_t)&type metadata for SEPAttestationPolicy, (uint64_t)&protocol witness table for SEPAttestationPolicy, 0xD000000000000014, 0x800000024A2B2860), (v4 & 1) != 0)&& (sub_24A1C9680(*(void *)(v1 + 56) + 32 * v3, (uint64_t)(v0 + 6)), __swift_instantiateConcreteTypeFromMangledName(&qword_26B174BB8), (swift_dynamicCast() & 1) != 0))
  {
    uint64_t v6 = v0[2];
    unint64_t v5 = v0[3];
    uint64_t v8 = v0[4];
    unint64_t v7 = v0[5];
  }
  else
  {
    os_log_type_t v9 = (uint64_t *)v0[24];
    uint64_t v6 = *v9;
    unint64_t v5 = v9[1];
    uint64_t v10 = *MEMORY[0x263F276F8];
    sub_24A1A52B0(*v9, v5);
    *(void *)&long long v132 = sub_24A1B94D4(v10);
    *((void *)&v132 + 1) = v11;
    sub_24A1CF5C4(&v132, 0);
    long long v131 = v132;
    sub_24A1A52B0(v6, v5);
    LODWORD(v10) = sub_24A1CF86C((uint64_t *)&v131, v6, v5);
    sub_24A1A5384(v6, v5);
    if (v10)
    {
      sub_24A1CFC44();
      uint64_t v12 = (void *)swift_allocError();
      unsigned char *v13 = 0;
      swift_willThrow();
      sub_24A1A5384(v6, v5);
      unint64_t v15 = *((void *)&v131 + 1);
      uint64_t v14 = v131;
LABEL_15:
      sub_24A1A5384(v14, v15);
LABEL_17:
      uint64_t v27 = (void (*)(uint64_t, uint64_t, uint64_t))v0[48];
      uint64_t v28 = v0[47];
      uint64_t v29 = v0[43];
      uint64_t v30 = v0[41];
      swift_bridgeObjectRelease();
      v27(v29, v28, v30);
      id v31 = v12;
      id v32 = v12;
      uint64_t v33 = sub_24A2A7140();
      os_log_type_t v34 = sub_24A2A7B30();
      if (os_log_type_enabled(v33, v34))
      {
        uint64_t v35 = (uint8_t *)swift_slowAlloc();
        uint64_t v36 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v35 = 138543362;
        id v37 = v12;
        uint64_t v38 = _swift_stdlib_bridgeErrorToNSError();
        v0[19] = v38;
        sub_24A2A7B70();
        *uint64_t v36 = v38;

        _os_log_impl(&dword_24A19F000, v33, v34, "AttestationBundle validation failed: %{public}@", v35, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&qword_269778BB8);
        swift_arrayDestroy();
        MEMORY[0x24C5C00A0](v36, -1, -1);
        MEMORY[0x24C5C00A0](v35, -1, -1);
      }
      else
      {
      }
      uint64_t v39 = (void (*)(uint64_t, uint64_t))v0[50];
      uint64_t v40 = v0[43];
      uint64_t v41 = v0[41];

      v39(v40, v41);
      swift_willThrow();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v42 = *(uint64_t (**)(void))(v130 + 8);
      goto LABEL_21;
    }
    unint64_t v7 = *((void *)&v131 + 1);
    uint64_t v8 = v131;
  }
  unint64_t v16 = v0[26];
  if (v16 >> 60 != 15)
  {
    uint64_t v17 = v0[25];
    v135[0] = 0;
    *(void *)&long long v131 = 0;
    sub_24A1B8018(v17, v16);
    sub_24A1A52B0(v6, v5);
    sub_24A1A52B0(v8, v7);
    sub_24A1EED1C(v8, v7, v135, (uint64_t *)&v131, (uint64_t *)&v132);
    sub_24A1A5384(v6, v5);
    unint64_t v128 = v7;
    sub_24A1A5384(v8, v7);
    long long v18 = v132;
    uint64_t v20 = v0[25];
    unint64_t v19 = v0[26];
    if (*((void *)&v132 + 1) >> 60 == 15)
    {
      sub_24A1A52B0(v0[25], v0[26]);
      sub_24A1B7B78(v18, *((unint64_t *)&v18 + 1));
      sub_24A1B7B78(v20, v19);
LABEL_16:
      uint64_t v0 = (void *)v130;
      uint64_t v26 = *(void *)(v130 + 200);
      unint64_t v25 = *(void *)(v130 + 208);
      type metadata accessor for CloudAttestationError(0);
      sub_24A1D0EA4((unint64_t *)&unk_269778BC8, (void (*)(uint64_t))type metadata accessor for CloudAttestationError);
      uint64_t v12 = (void *)swift_allocError();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      sub_24A1A5384(v6, v5);
      sub_24A1A5384(v8, v128);
      sub_24A1B7B78(v26, v25);
      goto LABEL_17;
    }
    uint64_t v21 = v0 + 16;
    sub_24A1B8018(v20, v19);
    sub_24A1B8018(v18, *((unint64_t *)&v18 + 1));
    char v22 = sub_24A1B7D80(v18, *((unint64_t *)&v18 + 1), v20, v19);
    sub_24A1B7B78(v20, v19);
    sub_24A1B7B78(v18, *((unint64_t *)&v18 + 1));
    sub_24A1B7B78(v18, *((unint64_t *)&v18 + 1));
    if ((v22 & 1) == 0) {
      goto LABEL_16;
    }
    uint64_t v0 = (void *)v130;
    sub_24A1B7B78(*(void *)(v130 + 200), *(void *)(v130 + 208));
    uint64_t v2 = v21;
  }
  *(void *)&long long v132 = v6;
  *((void *)&v132 + 1) = v5;
  uint64_t v133 = v8;
  unint64_t v134 = v7;
  SEP.Attestation.publicKeyData.getter((uint64_t)&v131);
  unint64_t v23 = *((void *)&v131 + 1);
  if ((~*((void *)&v131 + 1) & 0x3000000000000000) == 0)
  {
    type metadata accessor for CloudAttestationError(0);
    sub_24A1D0EA4((unint64_t *)&unk_269778BC8, (void (*)(uint64_t))type metadata accessor for CloudAttestationError);
    uint64_t v12 = (void *)swift_allocError();
    *uint64_t v24 = 0xD000000000000017;
    v24[1] = 0x800000024A2B2880;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    sub_24A1A5384(v6, v5);
    uint64_t v14 = v8;
    unint64_t v15 = v7;
    goto LABEL_15;
  }
  uint64_t v44 = v131;
  ((void (*)(void, void, void))v0[48])(v0[45], v0[47], v0[41]);
  sub_24A1CFC98(v44, v23);
  sub_24A1CFCAC(v44, v23);
  char v45 = sub_24A2A7140();
  os_log_type_t type = sub_24A2A7B40();
  BOOL v46 = os_log_type_enabled(v45, type);
  uint64_t v124 = v0[45];
  uint64_t v126 = (void (*)(uint64_t, uint64_t))v0[50];
  uint64_t v122 = v0[41];
  uint64_t v118 = v23;
  uint64_t v119 = v8;
  uint64_t v120 = v44;
  unint64_t v129 = v7;
  unint64_t v112 = v2;
  if (v46)
  {
    log = v45;
    uint64_t v48 = v0[37];
    uint64_t v47 = v0[38];
    uint64_t v49 = v0[36];
    long long v50 = (uint8_t *)swift_slowAlloc();
    uint64_t v113 = swift_slowAlloc();
    *(void *)&long long v132 = v113;
    *(_DWORD *)long long v50 = 136446210;
    buf = v50;
    sub_24A1CEBC4(v44, v23, v47);
    sub_24A1D0EA4(&qword_26B1749F8, MEMORY[0x263F045C0]);
    uint64_t v51 = v49;
    uint64_t v52 = sub_24A2A7E30();
    unint64_t v54 = v53;
    (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v47, v51);
    *(void *)(v130 + 144) = sub_24A1C52A8(v52, v54, (uint64_t *)&v132);
    uint64_t v0 = (void *)v130;
    sub_24A2A7B70();
    swift_bridgeObjectRelease();
    sub_24A1CFCB4(v44, v23);
    sub_24A1CFCB4(v44, v23);
    char v45 = log;
    _os_log_impl(&dword_24A19F000, log, type, "AttestationBundle passed validation for public key: %{public}s", buf, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C5C00A0](v113, -1, -1);
    MEMORY[0x24C5C00A0](buf, -1, -1);
  }
  else
  {
    sub_24A1CFCB4(v44, v23);
    sub_24A1CFCB4(v44, v23);
  }

  v126(v124, v122);
  uint64_t v55 = v0[33];
  uint64_t v56 = v0[34];
  uint64_t v57 = v0[32];
  uint64_t v58 = *(void *)(v130 + 192);
  uint64_t v125 = sub_24A2A6BC0();
  uint64_t v127 = *(void *)(v125 - 8);
  uint64_t v59 = swift_task_alloc();
  sub_24A2A7F90();
  sub_24A2A7F90();
  uint64_t v123 = v59;
  sub_24A2A6B80();
  uint64_t v121 = swift_task_alloc();
  uint64_t v60 = type metadata accessor for Proto_AttestationBundle(0);
  sub_24A1B2CAC(v58 + *(int *)(v60 + 36), v57, &qword_26B1749E0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v56 + 48))(v57, 1, v55) == 1)
  {
    uint64_t v61 = *(void *)(v130 + 256);
    sub_24A2A6DB0();
    sub_24A1B2D10(v61, &qword_26B1749E0);
  }
  else
  {
    (*(void (**)(void, void, void))(*(void *)(v130 + 272) + 32))(*(void *)(v130 + 280), *(void *)(v130 + 256), *(void *)(v130 + 264));
  }
  uint64_t v63 = *(void *)(v130 + 272);
  uint64_t v62 = *(void *)(v130 + 280);
  uint64_t v64 = *(void *)(v130 + 264);
  sub_24A2A6D90();
  (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v62, v64);
  uint64_t v65 = swift_task_alloc();
  if (sub_24A2A6B70()) {
    uint64_t v66 = v121;
  }
  else {
    uint64_t v66 = v59;
  }
  unint64_t v114 = *(void (**)(uint64_t, uint64_t, uint64_t))(v127 + 16);
  v114(v65, v66, v125);
  uint64_t v67 = swift_task_alloc();
  uint64_t v68 = *(void *)(v130 + 128);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B173100);
  uint64_t v69 = swift_task_alloc();
  *(void *)&long long v132 = v68;
  AttestationPolicyContext.proofExpiration.getter(v69);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v127 + 48))(v69, 1, v125) == 1)
  {
    sub_24A1B2D10(v69, &qword_26B173100);
    swift_task_dealloc();
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v127 + 32))(v67, v69, v125);
    swift_task_dealloc();
    if (sub_24A2A6B70()) {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v127 + 40))(v65, v67, v125);
    }
    else {
      (*(void (**)(uint64_t, uint64_t))(v127 + 8))(v67, v125);
    }
  }
  swift_task_dealloc();
  uint64_t v70 = swift_task_alloc();
  sub_24A2A6BB0();
  char v71 = sub_24A2A6B60();
  typea = *(void (**)(uint64_t, uint64_t))(v127 + 8);
  typea(v70, v125);
  swift_task_dealloc();
  uint64_t v72 = v125;
  uint64_t v0 = (void *)v130;
  uint64_t v73 = v120;
  if (v71)
  {
    if ((*(unsigned char *)(*(void *)(v130 + 240) + *(int *)(*(void *)(v130 + 312) + 72)) & 1) == 0)
    {
      type metadata accessor for CloudAttestationError(0);
      sub_24A1D0EA4((unint64_t *)&unk_269778BC8, (void (*)(uint64_t))type metadata accessor for CloudAttestationError);
      uint64_t v12 = (void *)swift_allocError();
      v114(v84, v65, v125);
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      sub_24A1CFCB4(v120, v118);
      sub_24A1A5384(v6, v5);
      sub_24A1A5384(v119, v129);
      typea(v121, v125);
      typea(v123, v125);
      typea(v65, v125);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      goto LABEL_17;
    }
    (*(void (**)(void, void, void))(v130 + 384))(*(void *)(v130 + 352), *(void *)(v130 + 376), *(void *)(v130 + 328));
    int v74 = sub_24A2A7140();
    os_log_type_t v75 = sub_24A2A7B30();
    BOOL v76 = os_log_type_enabled(v74, v75);
    uint64_t v77 = *(void (**)(uint64_t, uint64_t))(v130 + 400);
    uint64_t v78 = *(void *)(v130 + 352);
    uint64_t v79 = *(void *)(v130 + 328);
    if (v76)
    {
      uint64_t v80 = (uint8_t *)swift_slowAlloc();
      uint64_t v107 = swift_slowAlloc();
      *(void *)&long long v132 = v107;
      *(_DWORD *)uint64_t v80 = 136446210;
      swift_beginAccess();
      sub_24A1CFCD0();
      uint64_t v109 = v79;
      uint64_t v72 = v125;
      uint64_t v81 = sub_24A2A7E30();
      v112[1] = sub_24A1C52A8(v81, v82, (uint64_t *)&v132);
      sub_24A2A7B70();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_24A19F000, v74, v75, "Allowing expired bundle to fail open: expiration=%{public}s", v80, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24C5C00A0](v107, -1, -1);
      long long v83 = v80;
      uint64_t v73 = v120;
      uint64_t v0 = (void *)v130;
      MEMORY[0x24C5C00A0](v83, -1, -1);

      v77(v78, v109);
    }
    else
    {

      v77(v78, v79);
      uint64_t v72 = v125;
    }
  }
  uint64_t v85 = v0[31];
  uint64_t v86 = v0[24];
  unint64_t v87 = (uint64_t *)v0[21];
  uint64_t v88 = v0[22];
  uint64_t *v87 = v73;
  v87[1] = v118;
  swift_beginAccess();
  uint64_t v89 = v88;
  uint64_t v90 = v65;
  v114(v89, v65, v72);
  sub_24A1D0D6C(v86, v85, type metadata accessor for AttestationBundle);
  v135[0] = 0;
  *(void *)&long long v131 = 0;
  sub_24A1A52B0(v6, v5);
  sub_24A1A52B0(v119, v129);
  sub_24A1CFC98(v73, v118);
  sub_24A1EDD20(v119, v129, v135, (uint64_t *)&v131, (uint64_t)&v132);
  sub_24A1A5384(v6, v5);
  sub_24A1A5384(v119, v129);
  uint64_t v91 = 0;
  uint64_t v92 = 0;
  if (v133 != 2)
  {
    int v94 = v132;
    uint64_t v93 = *((void *)&v132 + 1);
    __swift_instantiateConcreteTypeFromMangledName(&qword_26B174BA0);
    uint64_t v95 = swift_allocObject();
    *(_OWORD *)(v95 + 16) = xmmword_24A2A8AA0;
    uint64_t v96 = MEMORY[0x263F8E960];
    *(void *)(v95 + 56) = MEMORY[0x263F8E8F8];
    *(void *)(v95 + 64) = v96;
    uint64_t v97 = MEMORY[0x263F8E970];
    *(_DWORD *)(v95 + 32) = v94;
    uint64_t v98 = MEMORY[0x263F8E9C0];
    *(void *)(v95 + 96) = v97;
    *(void *)(v95 + 104) = v98;
    *(void *)(v95 + 72) = v93;
    uint64_t v91 = sub_24A2A7840();
  }
  uint64_t v108 = v92;
  uint64_t v110 = v91;
  uint64_t v99 = v0[31];
  uint64_t v100 = *(void *)(v130 + 184);
  *(void *)&long long v132 = *(void *)(v130 + 128);
  swift_bridgeObjectRetain();
  uint64_t v101 = sub_24A215DAC();
  uint64_t v106 = v102;
  sub_24A1CFCB4(v120, v118);
  sub_24A1A5384(v6, v5);
  sub_24A1A5384(v119, v129);
  swift_bridgeObjectRelease();
  typea(v121, v125);
  typea(v123, v125);
  unint64_t v103 = (int *)type metadata accessor for Validated.AttestationBundle(0);
  *(void *)(v100 + v103[7]) = 0;
  sub_24A1D0E3C(v99, v100, type metadata accessor for AttestationBundle);
  typea(v90, v125);
  uint64_t v104 = (uint64_t *)(v100 + v103[5]);
  uint64_t *v104 = v110;
  v104[1] = v108;
  unint64_t v105 = (uint64_t *)(v100 + v103[6]);
  *unint64_t v105 = v101;
  v105[1] = v106;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v42 = *(uint64_t (**)(void))(v130 + 8);
LABEL_21:
  return v42();
}

uint64_t sub_24A1CE934()
{
  uint64_t v1 = (void *)v0[52];
  uint64_t v2 = (void (*)(uint64_t, uint64_t, uint64_t))v0[48];
  uint64_t v3 = v0[47];
  uint64_t v4 = v0[43];
  uint64_t v5 = v0[41];
  swift_bridgeObjectRelease();
  v2(v4, v3, v5);
  id v6 = v1;
  id v7 = v1;
  uint64_t v8 = sub_24A2A7140();
  os_log_type_t v9 = sub_24A2A7B30();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 138543362;
    id v12 = v1;
    uint64_t v13 = _swift_stdlib_bridgeErrorToNSError();
    v0[19] = v13;
    sub_24A2A7B70();
    void *v11 = v13;

    _os_log_impl(&dword_24A19F000, v8, v9, "AttestationBundle validation failed: %{public}@", v10, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&qword_269778BB8);
    swift_arrayDestroy();
    MEMORY[0x24C5C00A0](v11, -1, -1);
    MEMORY[0x24C5C00A0](v10, -1, -1);
  }
  else
  {
  }
  uint64_t v14 = (void (*)(uint64_t, uint64_t))v0[50];
  uint64_t v15 = v0[43];
  uint64_t v16 = v0[41];

  v14(v15, v16);
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v17 = (uint64_t (*)(void))v0[1];
  return v17();
}

uint64_t sub_24A1CEBC4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v13[5] = *MEMORY[0x263EF8340];
  uint64_t v6 = sub_24A2A7360();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  os_log_type_t v9 = (char *)v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24A1CFCAC(a1, a2);
  sub_24A1D0EA4(&qword_26B174A10, MEMORY[0x263F047F8]);
  sub_24A2A71A0();
  switch(a2 >> 62)
  {
    case 1uLL:
      if (a1 >> 32 < (int)a1) {
        __break(1u);
      }
      v13[1] = a3;
      sub_24A1A52B0(a1, a2 & 0xDFFFFFFFFFFFFFFFLL);
      sub_24A20C570((int)a1, a1 >> 32);
      break;
    case 2uLL:
      uint64_t v10 = *(void *)(a1 + 16);
      uint64_t v11 = *(void *)(a1 + 24);
      sub_24A1CFCAC(a1, a2);
      swift_retain();
      swift_retain();
      sub_24A20C570(v10, v11);
      swift_release();
      swift_release();
      break;
    case 3uLL:
      memset(&v13[2], 0, 14);
      goto LABEL_7;
    default:
      void v13[2] = a1;
      LOWORD(v13[3]) = a2;
      BYTE2(v13[3]) = BYTE2(a2);
      BYTE3(v13[3]) = BYTE3(a2);
      BYTE4(v13[3]) = BYTE4(a2);
      BYTE5(v13[3]) = BYTE5(a2);
LABEL_7:
      sub_24A2A7170();
      break;
  }
  sub_24A1CFCC8(a1, a2);
  sub_24A2A7180();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return sub_24A1CFCC8(a1, a2);
}

uint64_t sub_24A1CEEC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v17 = (void *)swift_task_alloc();
  *(void *)(v8 + 16) = v17;
  void *v17 = v8;
  v17[1] = sub_24A1C50FC;
  return NodeValidator.validate<A>(bundle:nonce:policy:)(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_24A1CEFC8()
{
  sub_24A2A7980();
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B174A98);
  sub_24A1B9860((unint64_t *)&qword_26B174AA8, &qword_26B174A98);
  uint64_t v0 = sub_24A2A77C0();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_24A1CF094@<X0>(char *a1@<X0>, uint64_t *a2@<X8>)
{
  char v3 = *a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B174BA0);
  uint64_t v4 = swift_allocObject();
  uint64_t v5 = MEMORY[0x263F8E778];
  *(_OWORD *)(v4 + 16) = xmmword_24A2A8A60;
  uint64_t v6 = MEMORY[0x263F8E7C0];
  *(void *)(v4 + 56) = v5;
  *(void *)(v4 + 64) = v6;
  *(unsigned char *)(v4 + 32) = v3;
  uint64_t result = sub_24A2A7840();
  *a2 = result;
  a2[1] = v8;
  return result;
}

uint64_t sub_24A1CF11C(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t sub_24A1CF12C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_24A1D0E3C(*(void *)a1, a2, (uint64_t (*)(void))type metadata accessor for X509Policy);
  uint64_t v4 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_26B1742B0);
  uint64_t v5 = a2 + v4[12];
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(v6 + 16);
  char v8 = *(unsigned char *)(v6 + 24);
  *(_OWORD *)uint64_t v5 = *(_OWORD *)v6;
  *(void *)(v5 + 16) = v7;
  *(unsigned char *)(v5 + 24) = v8;
  uint64_t v9 = a2 + v4[24];
  uint64_t v11 = *(uint64_t **)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v12 = *v11;
  LOBYTE(v11) = *((unsigned char *)v11 + 8);
  *(void *)uint64_t v9 = v12;
  *(unsigned char *)(v9 + 8) = (_BYTE)v11;
  sub_24A1D0E3C(v10, a2 + v4[28], type metadata accessor for SecureConfigPolicy);
  uint64_t v13 = (_OWORD *)(a2 + v4[32]);
  uint64_t v15 = *(long long **)(a1 + 48);
  uint64_t v14 = *(void *)(a1 + 56);
  long long v16 = *v15;
  long long v17 = v15[1];
  *(_OWORD *)((char *)v13 + 25) = *(long long *)((char *)v15 + 25);
  _OWORD *v13 = v16;
  v13[1] = v17;
  uint64_t result = sub_24A1D0E3C(v14, a2 + v4[36], type metadata accessor for KeyOptionsPolicy);
  uint64_t v19 = a2 + v4[40];
  uint64_t v20 = *(int **)(a1 + 64);
  uint64_t v21 = *(void *)(a1 + 72);
  int v22 = *v20;
  *(_WORD *)(v19 + 4) = *((_WORD *)v20 + 2);
  *(_DWORD *)uint64_t v19 = v22;
  uint64_t v23 = a2 + v4[44];
  LOWORD(v20) = *(_WORD *)v21;
  LOBYTE(v22) = *(unsigned char *)(v21 + 2);
  char v24 = *(unsigned char *)(v21 + 5);
  LOWORD(v21) = *(_WORD *)(v21 + 3);
  *(_WORD *)uint64_t v23 = (_WORD)v20;
  *(unsigned char *)(v23 + 2) = v22;
  *(_WORD *)(v23 + 3) = v21;
  *(unsigned char *)(v23 + 5) = v24;
  unint64_t v25 = *(uint64_t **)(a1 + 88);
  *(void *)(a2 + v4[48]) = **(void **)(a1 + 80);
  uint64_t v26 = a2 + v4[52];
  uint64_t v27 = *v25;
  LOBYTE(v22) = *((unsigned char *)v25 + 8);
  char v28 = *((unsigned char *)v25 + 9);
  LOBYTE(v25) = *((unsigned char *)v25 + 10);
  *(void *)uint64_t v26 = v27;
  *(unsigned char *)(v26 + 8) = v22;
  *(unsigned char *)(v26 + 9) = v28;
  *(unsigned char *)(v26 + 10) = (_BYTE)v25;
  uint64_t v29 = a2 + v4[56];
  uint64_t v30 = *(void *)(a1 + 96);
  LOBYTE(v25) = *(unsigned char *)v30;
  uint64_t v31 = *(void *)(v30 + 8);
  LOBYTE(v30) = *(unsigned char *)(v30 + 16);
  *(unsigned char *)uint64_t v29 = (_BYTE)v25;
  *(void *)(v29 + 8) = v31;
  *(unsigned char *)(v29 + 16) = v30;
  return result;
}

double sub_24A1CF2C4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_24A1D0E3C(*(void *)a1, a2, (uint64_t (*)(void))type metadata accessor for X509Policy);
  uint64_t v4 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_269778BD8);
  sub_24A1D0DD4(*(void *)(a1 + 8), a2 + v4[12]);
  uint64_t v5 = a2 + v4[16];
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(v6 + 16);
  *(_OWORD *)uint64_t v5 = *(_OWORD *)v6;
  *(void *)(v5 + 16) = v7;
  uint64_t v8 = a2 + v4[28];
  uint64_t v10 = *(uint64_t **)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 48);
  uint64_t v11 = *v10;
  LOBYTE(v10) = *((unsigned char *)v10 + 8);
  *(void *)uint64_t v8 = v11;
  *(unsigned char *)(v8 + 8) = (_BYTE)v10;
  sub_24A1D0E3C(v9, a2 + v4[32], type metadata accessor for SecureConfigPolicy);
  sub_24A1D0E3C(*(void *)(a1 + 56), a2 + v4[36], type metadata accessor for KeyOptionsPolicy);
  sub_24A1D0E3C(*(void *)(a1 + 64), a2 + v4[40], (uint64_t (*)(void))type metadata accessor for SoftwareReleasePolicy);
  uint64_t v12 = a2 + v4[44];
  uint64_t v13 = *(char **)(a1 + 72);
  uint64_t v14 = *(void *)(a1 + 80);
  char v15 = *v13;
  char v16 = v13[1];
  char v17 = v13[2];
  uint64_t v18 = *(void *)(v13 + 12);
  double result = *(double *)(v13 + 4);
  LODWORD(v13) = *((_DWORD *)v13 + 5);
  *(unsigned char *)uint64_t v12 = v15;
  *(unsigned char *)(v12 + 1) = v16;
  *(unsigned char *)(v12 + 2) = v17;
  *(double *)(v12 + 4) = result;
  *(void *)(v12 + 12) = v18;
  *(_DWORD *)(v12 + 20) = v13;
  uint64_t v20 = a2 + v4[48];
  LOWORD(v13) = *(_WORD *)v14;
  char v21 = *(unsigned char *)(v14 + 2);
  char v22 = *(unsigned char *)(v14 + 5);
  LOWORD(v14) = *(_WORD *)(v14 + 3);
  *(_WORD *)uint64_t v20 = (_WORD)v13;
  *(unsigned char *)(v20 + 2) = v21;
  *(_WORD *)(v20 + 3) = v14;
  *(unsigned char *)(v20 + 5) = v22;
  *(void *)(a2 + v4[52]) = **(void **)(a1 + 88);
  return result;
}

id sub_24A1CF444(id result)
{
  if ((unint64_t)result >= 2) {
    return result;
  }
  return result;
}

uint64_t sub_24A1CF454(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

void sub_24A1CF464(id a1)
{
  if ((unint64_t)a1 >= 2) {
}
  }

uint64_t sub_24A1CF474(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_24A1CF4D0(uint64_t a1)
{
  return a1;
}

uint64_t sub_24A1CF524(void *a1, uint64_t a2)
{
  sub_24A1CF464(a1);

  return sub_24A1CF11C(a2);
}

uint64_t sub_24A1CF564(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void *sub_24A1CF5C4(void *result, int __c)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  unint64_t v2 = result[1];
  uint64_t v4 = result;
  switch(v2 >> 62)
  {
    case 1uLL:
      uint64_t __b = *result;
      uint64_t v19 = v2 & 0x3FFFFFFFFFFFFFFFLL;
      double result = sub_24A255EC0((int *)&__b, __c);
      uint64_t v5 = __b;
      unint64_t v6 = v19 | 0x4000000000000000;
      goto LABEL_4;
    case 2uLL:
      uint64_t __b = *result;
      uint64_t v19 = v2 & 0x3FFFFFFFFFFFFFFFLL;
      sub_24A2A69F0();
      uint64_t v7 = v19;
      uint64_t v8 = *(void *)(__b + 16);
      uint64_t v9 = *(void *)(__b + 24);
      uint64_t v10 = sub_24A2A68E0();
      if (!v10)
      {
        __break(1u);
        JUMPOUT(0x24A1CF7A8);
      }
      uint64_t v11 = v10;
      uint64_t v12 = sub_24A2A6910();
      uint64_t v13 = v8 - v12;
      if (__OFSUB__(v8, v12))
      {
        __break(1u);
LABEL_14:
        __break(1u);
      }
      BOOL v14 = __OFSUB__(v9, v8);
      int64_t v15 = v9 - v8;
      if (v14) {
        goto LABEL_14;
      }
      uint64_t v16 = sub_24A2A6900();
      if (v16 >= v15) {
        size_t v17 = v15;
      }
      else {
        size_t v17 = v16;
      }
      double result = memset((void *)(v11 + v13), __c, v17);
      *uint64_t v4 = __b;
      v4[1] = v7 | 0x8000000000000000;
      return result;
    case 3uLL:
      return result;
    default:
      uint64_t __b = *result;
      LOWORD(v19) = v2;
      BYTE2(v19) = BYTE2(v2);
      BYTE3(v19) = BYTE3(v2);
      BYTE4(v19) = BYTE4(v2);
      BYTE5(v19) = BYTE5(v2);
      BYTE6(v19) = BYTE6(v2);
      double result = memset(&__b, __c, BYTE6(v2));
      uint64_t v5 = __b;
      unint64_t v6 = v19 | ((unint64_t)BYTE4(v19) << 32) | ((unint64_t)BYTE5(v19) << 40) | ((unint64_t)BYTE6(v19) << 48);
LABEL_4:
      *uint64_t v4 = v5;
      v4[1] = v6;
      return result;
  }
}

uint64_t sub_24A1CF7B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t result = sub_24A2A68E0();
  if (!result) {
    goto LABEL_9;
  }
  uint64_t v11 = result;
  uint64_t result = sub_24A2A6910();
  uint64_t v12 = a1 - result;
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_8;
  }
  if (__OFSUB__(a2, a1))
  {
LABEL_8:
    __break(1u);
LABEL_9:
    __break(1u);
    return result;
  }
  sub_24A2A6900();
  uint64_t result = sub_24A1ED3FC(v11 + v12, a4, a5, &v13);
  if (!v5) {
    return v13;
  }
  return result;
}

uint64_t sub_24A1CF86C(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v6 = *a1;
  unint64_t v5 = a1[1];
  switch(v5 >> 62)
  {
    case 1uLL:
      uint64_t v11 = v5 & 0x3FFFFFFFFFFFFFFFLL;
      *(_OWORD *)a1 = xmmword_24A2A8A80;
      sub_24A1A52B0(a2, a3);
      sub_24A1A52B0(a2, a3);
      uint64_t v12 = v6 >> 32;
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_16;
      }
      if (v12 < (int)v6) {
        goto LABEL_20;
      }
      if (sub_24A2A68E0() && __OFSUB__((int)v6, sub_24A2A6910())) {
        goto LABEL_21;
      }
      sub_24A2A6920();
      swift_allocObject();
      uint64_t v17 = sub_24A2A68C0();
      swift_release();
      uint64_t v11 = v17;
LABEL_16:
      if (v12 < (int)v6)
      {
        __break(1u);
LABEL_20:
        __break(1u);
LABEL_21:
        __break(1u);
      }
      sub_24A1A52B0(a2, a3);
      uint64_t v4 = sub_24A1CF7B8((int)v6, v6 >> 32, v11, a2, a3);
      sub_24A1A5384(a2, a3);
      sub_24A1A5384(a2, a3);
      sub_24A1A5384(a2, a3);
      *a1 = v6;
      a1[1] = v11 | 0x4000000000000000;
      return v4;
    case 2uLL:
      *(void *)&long long v20 = *a1;
      *((void *)&v20 + 1) = v5 & 0x3FFFFFFFFFFFFFFFLL;
      sub_24A1A52B0(a2, a3);
      sub_24A1A52B0(a2, a3);
      sub_24A2A69F0();
      uint64_t v13 = *((void *)&v20 + 1);
      uint64_t v14 = *(void *)(v20 + 16);
      uint64_t v15 = *(void *)(v20 + 24);
      sub_24A1A52B0(a2, a3);
      uint64_t v16 = sub_24A1CF7B8(v14, v15, *((uint64_t *)&v20 + 1), a2, a3);
      if (!v3) {
        uint64_t v4 = v16;
      }
      sub_24A1A5384(a2, a3);
      sub_24A1A5384(a2, a3);
      sub_24A1A5384(a2, a3);
      *a1 = v20;
      a1[1] = v13 | 0x8000000000000000;
      return v4;
    case 3uLL:
      *(void *)((char *)&v20 + 7) = 0;
      *(void *)&long long v20 = 0;
      sub_24A1ED3FC((uint64_t)&v20, a2, a3, &v19);
      if (!v3) {
        return v19;
      }
      return v4;
    default:
      *(void *)&long long v20 = *a1;
      WORD4(v20) = v5;
      BYTE10(v20) = BYTE2(v5);
      BYTE11(v20) = BYTE3(v5);
      BYTE12(v20) = BYTE4(v5);
      BYTE13(v20) = BYTE5(v5);
      BYTE14(v20) = BYTE6(v5);
      sub_24A1ED3FC((uint64_t)&v20, a2, a3, &v19);
      if (!v3) {
        uint64_t v4 = v19;
      }
      unint64_t v10 = DWORD2(v20) | ((unint64_t)BYTE12(v20) << 32) | ((unint64_t)BYTE13(v20) << 40) | ((unint64_t)BYTE14(v20) << 48);
      *a1 = v20;
      a1[1] = v10;
      return v4;
  }
}

unint64_t sub_24A1CFC44()
{
  unint64_t result = qword_269778BC0;
  if (!qword_269778BC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269778BC0);
  }
  return result;
}

uint64_t sub_24A1CFC98(uint64_t a1, uint64_t a2)
{
  if ((~a2 & 0x3000000000000000) != 0) {
    return sub_24A1CFCAC(a1, a2);
  }
  return a1;
}

uint64_t sub_24A1CFCAC(uint64_t a1, uint64_t a2)
{
  return sub_24A1A52B0(a1, a2 & 0xDFFFFFFFFFFFFFFFLL);
}

uint64_t sub_24A1CFCB4(uint64_t a1, uint64_t a2)
{
  if ((~a2 & 0x3000000000000000) != 0) {
    return sub_24A1CFCC8(a1, a2);
  }
  return a1;
}

uint64_t sub_24A1CFCC8(uint64_t a1, uint64_t a2)
{
  return sub_24A1A5384(a1, a2 & 0xDFFFFFFFFFFFFFFFLL);
}

unint64_t sub_24A1CFCD0()
{
  unint64_t result = qword_26B174220;
  if (!qword_26B174220)
  {
    sub_24A2A6BC0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B174220);
  }
  return result;
}

uint64_t sub_24A1CFD1C(uint64_t a1)
{
  return MEMORY[0x270FA03F0](a1, &opaque type descriptor for <<opaque return type of NodeValidator.defaultPolicy>>, 1);
}

uint64_t initializeBufferWithCopyOfBuffer for NodeValidator(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *(void *)uint64_t v4 = *a2;
    uint64_t v4 = v15 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    long long v7 = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 32) = v7;
    (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 8, (uint64_t)(a2 + 1));
    *(_OWORD *)(v4 + 48) = *((_OWORD *)a2 + 3);
    *(void *)(v4 + 64) = a2[8];
    uint64_t v8 = a3[8];
    uint64_t v9 = (void *)(v4 + v8);
    unint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = sub_24A2A6BC0();
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    if (v13(v10, 1, v11))
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B173100);
      memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    uint64_t v16 = a3[10];
    *(unsigned char *)(v4 + a3[9]) = *((unsigned char *)a2 + a3[9]);
    *(unsigned char *)(v4 + v16) = *((unsigned char *)a2 + v16);
    uint64_t v17 = a3[12];
    *(unsigned char *)(v4 + a3[11]) = *((unsigned char *)a2 + a3[11]);
    *(unsigned char *)(v4 + v17) = *((unsigned char *)a2 + v17);
    uint64_t v18 = a3[14];
    *(unsigned char *)(v4 + a3[13]) = *((unsigned char *)a2 + a3[13]);
    *(unsigned char *)(v4 + v18) = *((unsigned char *)a2 + v18);
    uint64_t v19 = a3[16];
    *(unsigned char *)(v4 + a3[15]) = *((unsigned char *)a2 + a3[15]);
    *(unsigned char *)(v4 + v19) = *((unsigned char *)a2 + v19);
    uint64_t v20 = a3[18];
    *(unsigned char *)(v4 + a3[17]) = *((unsigned char *)a2 + a3[17]);
    *(unsigned char *)(v4 + v20) = *((unsigned char *)a2 + v20);
    uint64_t v21 = a3[19];
    char v22 = *(void **)((char *)a2 + v21);
    *(void *)(v4 + v21) = v22;
    id v23 = v22;
  }
  return v4;
}

void destroy for NodeValidator(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 32);
  uint64_t v5 = sub_24A2A6BC0();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  long long v7 = *(void **)(a1 + *(int *)(a2 + 76));
}

uint64_t initializeWithCopy for NodeValidator(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  long long v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v6;
  (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 8, a2 + 8);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  uint64_t v7 = a3[8];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = sub_24A2A6BC0();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48);
  swift_bridgeObjectRetain();
  if (v12(v9, 1, v10))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B173100);
    memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  uint64_t v14 = a3[10];
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  *(unsigned char *)(a1 + v14) = *(unsigned char *)(a2 + v14);
  uint64_t v15 = a3[12];
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  *(unsigned char *)(a1 + v15) = *(unsigned char *)(a2 + v15);
  uint64_t v16 = a3[14];
  *(unsigned char *)(a1 + a3[13]) = *(unsigned char *)(a2 + a3[13]);
  *(unsigned char *)(a1 + v16) = *(unsigned char *)(a2 + v16);
  uint64_t v17 = a3[16];
  *(unsigned char *)(a1 + a3[15]) = *(unsigned char *)(a2 + a3[15]);
  *(unsigned char *)(a1 + v17) = *(unsigned char *)(a2 + v17);
  uint64_t v18 = a3[18];
  *(unsigned char *)(a1 + a3[17]) = *(unsigned char *)(a2 + a3[17]);
  *(unsigned char *)(a1 + v18) = *(unsigned char *)(a2 + v18);
  uint64_t v19 = a3[19];
  uint64_t v20 = *(void **)(a2 + v19);
  *(void *)(a1 + v19) = v20;
  id v21 = v20;
  return a1;
}

uint64_t assignWithCopy for NodeValidator(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 8), (uint64_t *)(a2 + 8));
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[8];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (void *)(a2 + v6);
  uint64_t v9 = sub_24A2A6BC0();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 24))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B173100);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  *(unsigned char *)(a1 + a3[12]) = *(unsigned char *)(a2 + a3[12]);
  *(unsigned char *)(a1 + a3[13]) = *(unsigned char *)(a2 + a3[13]);
  *(unsigned char *)(a1 + a3[14]) = *(unsigned char *)(a2 + a3[14]);
  *(unsigned char *)(a1 + a3[15]) = *(unsigned char *)(a2 + a3[15]);
  *(unsigned char *)(a1 + a3[16]) = *(unsigned char *)(a2 + a3[16]);
  *(unsigned char *)(a1 + a3[17]) = *(unsigned char *)(a2 + a3[17]);
  *(unsigned char *)(a1 + a3[18]) = *(unsigned char *)(a2 + a3[18]);
  uint64_t v15 = a3[19];
  uint64_t v16 = *(void **)(a1 + v15);
  uint64_t v17 = *(void **)(a2 + v15);
  *(void *)(a1 + v15) = v17;
  id v18 = v17;

  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_1(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        unint64_t result = (uint64_t *)swift_release();
        *uint64_t v3 = v12;
      }
      else
      {
        uint64_t v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *unint64_t result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          *uint64_t v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

uint64_t initializeWithTake for NodeValidator(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  long long v6 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  uint64_t v7 = a3[8];
  uint64_t v8 = (void *)(a1 + v7);
  int v9 = (const void *)(a2 + v7);
  *(_OWORD *)(a1 + 48) = v6;
  uint64_t v10 = sub_24A2A6BC0();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B173100);
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  uint64_t v13 = a3[10];
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  *(unsigned char *)(a1 + v13) = *(unsigned char *)(a2 + v13);
  uint64_t v14 = a3[12];
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  *(unsigned char *)(a1 + v14) = *(unsigned char *)(a2 + v14);
  uint64_t v15 = a3[14];
  *(unsigned char *)(a1 + a3[13]) = *(unsigned char *)(a2 + a3[13]);
  *(unsigned char *)(a1 + v15) = *(unsigned char *)(a2 + v15);
  uint64_t v16 = a3[16];
  *(unsigned char *)(a1 + a3[15]) = *(unsigned char *)(a2 + a3[15]);
  *(unsigned char *)(a1 + v16) = *(unsigned char *)(a2 + v16);
  uint64_t v17 = a3[18];
  *(unsigned char *)(a1 + a3[17]) = *(unsigned char *)(a2 + a3[17]);
  *(unsigned char *)(a1 + v17) = *(unsigned char *)(a2 + v17);
  *(void *)(a1 + a3[19]) = *(void *)(a2 + a3[19]);
  return a1;
}

uint64_t assignWithTake for NodeValidator(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[8];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (void *)(a2 + v6);
  uint64_t v9 = sub_24A2A6BC0();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 40))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B173100);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 32))(v7, v8, v9);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  uint64_t v15 = a3[10];
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  *(unsigned char *)(a1 + v15) = *(unsigned char *)(a2 + v15);
  uint64_t v16 = a3[12];
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  *(unsigned char *)(a1 + v16) = *(unsigned char *)(a2 + v16);
  uint64_t v17 = a3[14];
  *(unsigned char *)(a1 + a3[13]) = *(unsigned char *)(a2 + a3[13]);
  *(unsigned char *)(a1 + v17) = *(unsigned char *)(a2 + v17);
  uint64_t v18 = a3[16];
  *(unsigned char *)(a1 + a3[15]) = *(unsigned char *)(a2 + a3[15]);
  *(unsigned char *)(a1 + v18) = *(unsigned char *)(a2 + v18);
  uint64_t v19 = a3[18];
  *(unsigned char *)(a1 + a3[17]) = *(unsigned char *)(a2 + a3[17]);
  *(unsigned char *)(a1 + v19) = *(unsigned char *)(a2 + v19);
  uint64_t v20 = a3[19];
  id v21 = *(void **)(a1 + v20);
  *(void *)(a1 + v20) = *(void *)(a2 + v20);

  return a1;
}

uint64_t getEnumTagSinglePayload for NodeValidator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24A1D0AB8);
}

uint64_t sub_24A1D0AB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 32);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B173100);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 32);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for NodeValidator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24A1D0B80);
}

uint64_t sub_24A1D0B80(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 32) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B173100);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 32);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

void sub_24A1D0C2C()
{
  sub_24A1D0D08();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_24A1D0D08()
{
  if (!qword_26B173108)
  {
    sub_24A2A6BC0();
    unint64_t v0 = sub_24A2A7B50();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26B173108);
    }
  }
}

_UNKNOWN **sub_24A1D0D60()
{
  return &protocol witness table for PolicyBuilder.TuplePolicy<Pack{repeat A}>;
}

uint64_t sub_24A1D0D6C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_24A1D0DD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_269778BE0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_24A1D0E3C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_24A1D0EA4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_24A1D0EEC(void *a1, uint64_t a2)
{
  sub_24A1CF444(a1);

  return sub_24A1CF454(a2);
}

uint64_t sub_24A1D0F2C()
{
  sub_24A2A78A0();

  return swift_bridgeObjectRelease();
}

uint64_t static Environment.current.getter@<X0>(char *a1@<X8>)
{
  uint64_t result = swift_beginAccess();
  if (byte_26B1730E8 == 10) {
    return static Environment.default.getter(a1);
  }
  *a1 = byte_26B1730E8;
  return result;
}

uint64_t static Environment.override.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = swift_beginAccess();
  *a1 = byte_26B1730E8;
  return result;
}

uint64_t static Environment.override.setter(char *a1)
{
  char v1 = *a1;
  uint64_t result = swift_beginAccess();
  byte_26B1730E8 = v1;
  return result;
}

uint64_t (*static Environment.override.modify())()
{
  return j__swift_endAccess;
}

char static Environment.default.getter@<W0>(char *a1@<X8>)
{
  if (os_variant_is_darwinos())
  {
    LOBYTE(v2) = sub_24A1D12F0();
    char v3 = v7[0];
    if (v7[0] == 10) {
      char v3 = 0;
    }
    *a1 = v3;
  }
  else
  {
    if (os_variant_has_internal_content()) {
      char v4 = 6;
    }
    else {
      char v4 = 7;
    }
    int v2 = os_variant_allows_internal_security_policies();
    if (v2)
    {
      uint64_t v8 = &type metadata for PrivateCloudComputeFeatures;
      unint64_t v9 = sub_24A1D129C();
      char v5 = sub_24A2A6C10();
      LOBYTE(v2) = __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
      if ((v5 & 1) == 0)
      {
        LOBYTE(v2) = sub_24A1D12F0();
        if (v7[0] != 10) {
          char v4 = v7[0];
        }
      }
    }
    *a1 = v4;
  }
  return v2;
}

unint64_t sub_24A1D129C()
{
  unint64_t result = qword_26B174BD0;
  if (!qword_26B174BD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B174BD0);
  }
  return result;
}

CloudAttestation::Environment_optional sub_24A1D12F0()
{
  unint64_t v0 = (__CFString *)sub_24A2A77F0();
  char v1 = (__CFString *)sub_24A2A77F0();
  CFPropertyListRef v2 = CFPreferencesCopyAppValue(v0, v1);

  if (v2 && swift_dynamicCast())
  {
    uint64_t v3 = v6;
    unint64_t v4 = v7;
  }
  else
  {
    uint64_t v3 = 0;
    unint64_t v4 = 0xE000000000000000;
  }
  return Environment.init(rawValue:)(*(Swift::String *)&v3);
}

CloudAttestation::Environment_optional __swiftcall Environment.init(rawValue:)(Swift::String rawValue)
{
  CFPropertyListRef v2 = v1;
  unint64_t v3 = sub_24A2A7DA0();
  result.value = swift_bridgeObjectRelease();
  char v5 = 10;
  if (v3 < 0xA) {
    char v5 = v3;
  }
  *CFPropertyListRef v2 = v5;
  return result;
}

uint64_t Environment.initTransparencyURL.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_24A1D146C(0xD000000000000022, 0x800000024A2B28A0, a1);
}

uint64_t sub_24A1D146C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  switch(*v3)
  {
    case 5:
    case 6:
      goto LABEL_4;
    case 7:
      goto LABEL_8;
    case 8:
    case 9:
      goto LABEL_6;
    default:
      uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_269778BF8);
      MEMORY[0x270FA5388](v7 - 8);
      unint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v22 = a1;
      uint64_t v23 = a2;
      uint64_t v20 = 1685025392;
      unint64_t v21 = 0xE400000000000000;
      uint64_t v18 = 3236209;
      unint64_t v19 = 0xE300000000000000;
      sub_24A1D20BC();
      sub_24A2A7B90();
      sub_24A2A69B0();
      swift_bridgeObjectRelease();
      uint64_t v10 = sub_24A2A69E0();
      a1 = *(void *)(v10 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(a1 + 48))(v9, 1, v10) != 1) {
        return (*(uint64_t (**)(uint64_t, char *, uint64_t))(a1 + 32))(a3, v9, v10);
      }
      __break(1u);
LABEL_4:
      uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_269778BF8);
      MEMORY[0x270FA5388](v11 - 8);
      unint64_t v9 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v22 = a1;
      uint64_t v23 = a2;
      uint64_t v20 = 1685025392;
      unint64_t v21 = 0xE400000000000000;
      uint64_t v18 = 0x7972726163;
      unint64_t v19 = 0xE500000000000000;
      sub_24A1D20BC();
      sub_24A2A7B90();
      sub_24A2A69B0();
      swift_bridgeObjectRelease();
      uint64_t v10 = sub_24A2A69E0();
      a1 = *(void *)(v10 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(a1 + 48))(v9, 1, v10) != 1) {
        return (*(uint64_t (**)(uint64_t, char *, uint64_t))(a1 + 32))(a3, v9, v10);
      }
      __break(1u);
LABEL_6:
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_269778BF8);
      MEMORY[0x270FA5388](v13 - 8);
      unint64_t v9 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v22 = a1;
      uint64_t v23 = a2;
      uint64_t v20 = 1685025392;
      unint64_t v21 = 0xE400000000000000;
      uint64_t v18 = 3301745;
      unint64_t v19 = 0xE300000000000000;
      sub_24A1D20BC();
      sub_24A2A7B90();
      sub_24A2A69B0();
      swift_bridgeObjectRelease();
      uint64_t v10 = sub_24A2A69E0();
      a1 = *(void *)(v10 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(a1 + 48))(v9, 1, v10) == 1)
      {
        __break(1u);
LABEL_8:
        uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_269778BF8);
        MEMORY[0x270FA5388](v15 - 8);
        unint64_t v9 = (char *)&v18 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
        sub_24A2A69B0();
        uint64_t v10 = sub_24A2A69E0();
        a1 = *(void *)(v10 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(a1 + 48))(v9, 1, v10) == 1)
        {
          __break(1u);
          JUMPOUT(0x24A1D191CLL);
        }
      }
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(a1 + 32))(a3, v9, v10);
  }
}

uint64_t Environment.transparencyURL.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_24A1D146C(0xD000000000000020, 0x800000024A2B28D0, a1);
}

uint64_t Environment.authenticatingTransparencyURL.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_24A1D146C(0xD000000000000029, 0x800000024A2B2900, a1);
}

uint64_t Environment.transparencyPrimaryTree.getter()
{
  return (*v0 < 9uLL) & (0x190u >> *v0);
}

uint64_t Environment.rawValue.getter()
{
  uint64_t result = 7759204;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x6172656D65687065;
      break;
    case 2:
      uint64_t result = 1718773104;
      break;
    case 3:
      uint64_t result = 24945;
      break;
    case 4:
      uint64_t result = 0x676E6967617473;
      break;
    case 5:
      uint64_t result = 7627125;
      break;
    case 6:
      uint64_t result = 0x7972726163;
      break;
    case 7:
      uint64_t result = 0x69746375646F7270;
      break;
    case 8:
      uint64_t result = 0x616D697250326171;
      break;
    case 9:
      uint64_t result = 0x7265746E49326171;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_24A1D1B1C(unsigned __int8 *a1, char *a2)
{
  return sub_24A2477C8(*a1, *a2);
}

uint64_t sub_24A1D1B28()
{
  return sub_24A2A7F50();
}

uint64_t sub_24A1D1B70()
{
  return sub_24A1D0F2C();
}

uint64_t sub_24A1D1B78()
{
  return sub_24A2A7F50();
}

CloudAttestation::Environment_optional sub_24A1D1BBC(Swift::String *a1)
{
  return Environment.init(rawValue:)(*a1);
}

uint64_t sub_24A1D1BC8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Environment.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_24A1D1BF0()
{
  return sub_24A2A7A00();
}

uint64_t sub_24A1D1C50()
{
  return sub_24A2A79E0();
}

uint64_t Environment.description.getter()
{
  uint64_t result = 7759204;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x6172656D65687065;
      break;
    case 2:
      uint64_t result = 1718773104;
      break;
    case 3:
      uint64_t result = 24945;
      break;
    case 4:
      uint64_t result = 0x676E6967617473;
      break;
    case 5:
      uint64_t result = 7627125;
      break;
    case 6:
      uint64_t result = 0x7972726163;
      break;
    case 7:
      uint64_t result = 0x69746375646F7270;
      break;
    case 8:
      uint64_t result = 0x616D697250326171;
      break;
    case 9:
      uint64_t result = 0x7265746E49326171;
      break;
    default:
      return result;
  }
  return result;
}

BOOL static Environment.< infix(_:_:)(char *a1, char *a2)
{
  return qword_24A2AA3A0[*a1] < qword_24A2AA3A0[*a2];
}

unint64_t sub_24A1D1DF0()
{
  unint64_t result = qword_269778BE8;
  if (!qword_269778BE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269778BE8);
  }
  return result;
}

BOOL sub_24A1D1E44(char *a1, char *a2)
{
  return qword_24A2AA3A0[*a1] < qword_24A2AA3A0[*a2];
}

BOOL sub_24A1D1E68(char *a1, char *a2)
{
  return qword_24A2AA3A0[*a2] >= qword_24A2AA3A0[*a1];
}

BOOL sub_24A1D1E8C(char *a1, char *a2)
{
  return qword_24A2AA3A0[*a1] >= qword_24A2AA3A0[*a2];
}

BOOL sub_24A1D1EB0(char *a1, char *a2)
{
  return qword_24A2AA3A0[*a2] < qword_24A2AA3A0[*a1];
}

uint64_t getEnumTagSinglePayload for Environment(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF7) {
    goto LABEL_17;
  }
  if (a2 + 9 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 9) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 9;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 9;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 9;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xA;
  int v8 = v6 - 10;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for Environment(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF6)
  {
    unsigned int v6 = ((a2 - 247) >> 8) + 1;
    *unint64_t result = a2 + 9;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24A1D2030);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 9;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Environment()
{
  return &type metadata for Environment;
}

unint64_t sub_24A1D2068()
{
  unint64_t result = qword_269778BF0;
  if (!qword_269778BF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269778BF0);
  }
  return result;
}

unint64_t sub_24A1D20BC()
{
  unint64_t result = qword_269778C10;
  if (!qword_269778C10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269778C10);
  }
  return result;
}

uint64_t sub_24A1D2110()
{
  uint64_t v0 = sub_24A2A7160();
  __swift_allocate_value_buffer(v0, qword_26977A3F0);
  __swift_project_value_buffer(v0, (uint64_t)qword_26977A3F0);
  return sub_24A2A7150();
}

void SWTransparencyLog.environment.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

id SWTransparencyLog.init(environment:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  char v3 = *a1;
  if (MEMORY[0x263F80D48]) {
    id result = objc_msgSend(objc_allocWithZone(MEMORY[0x263F80D48]), sel_initWithApplication_, 0);
  }
  else {
    id result = 0;
  }
  *(unsigned char *)a2 = v3;
  *(void *)(a2 + 8) = result;
  return result;
}

uint64_t SWTransparencyLog.proveInclusion(of:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v3 + 104) = a1;
  *(void *)(v3 + 112) = a2;
  *(void *)(v3 + 120) = type metadata accessor for TransparencyLogProofs();
  *(void *)(v3 + 128) = swift_task_alloc();
  uint64_t v4 = type metadata accessor for ATLogProofs(0);
  *(void *)(v3 + 136) = v4;
  *(void *)(v3 + 144) = *(void *)(v4 - 8);
  *(void *)(v3 + 152) = swift_task_alloc();
  *(void *)(v3 + 160) = swift_task_alloc();
  *(void *)(v3 + 168) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B1742D8);
  *(void *)(v3 + 176) = swift_task_alloc();
  *(void *)(v3 + 184) = swift_task_alloc();
  *(void *)(v3 + 192) = swift_task_alloc();
  sub_24A2A6E70();
  *(void *)(v3 + 200) = swift_task_alloc();
  *(void *)(v3 + 208) = type metadata accessor for ATLogProofResponse(0);
  *(void *)(v3 + 216) = swift_task_alloc();
  *(void *)(v3 + 224) = type metadata accessor for ATLogProofRequest(0);
  uint64_t v5 = swift_task_alloc();
  *(unsigned char *)(v3 + 376) = *(unsigned char *)v2;
  uint64_t v6 = *(void *)(v2 + 8);
  *(void *)(v3 + 232) = v5;
  *(void *)(v3 + 240) = v6;
  return MEMORY[0x270FA2498](sub_24A1D23EC, 0, 0);
}

uint64_t sub_24A1D23EC()
{
  uint64_t v38 = v0;
  uint64_t v1 = sub_24A2A69E0();
  *(void *)(v0 + 248) = v1;
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = v2;
  *(void *)(v0 + 256) = v2;
  *(void *)(v0 + 264) = *(void *)(v2 + 64);
  uint64_t v4 = swift_task_alloc();
  *(void *)(v0 + 272) = v4;
  uint64_t v31 = v3;
  uint64_t v5 = (void *)sub_24A1D4100();
  LOBYTE(v37) = *(unsigned char *)(v0 + 376);
  sub_24A1D146C(0xD000000000000029, 0x800000024A2B2900, v4);
  uint64_t v6 = (objc_class *)type metadata accessor for SWTransparencyLog.Delegate();
  BOOL v7 = (char *)objc_allocWithZone(v6);
  *(void *)&v7[OBJC_IVAR____TtCFV16CloudAttestation17SWTransparencyLog14proveInclusionFzZT2ofVS_7Release_VS_21TransparencyLogProofsL_8Delegate_credential] = v5;
  *(void *)(v0 + 48) = v7;
  *(void *)(v0 + 56) = v6;
  id v33 = v5;
  id v8 = objc_msgSendSuper2((objc_super *)(v0 + 48), sel_init);
  if (qword_2697783D8 != -1) {
    swift_once();
  }
  uint64_t v9 = sub_24A2A7160();
  __swift_project_value_buffer(v9, (uint64_t)qword_26977A3F0);
  uint64_t v10 = swift_task_alloc();
  uint64_t v36 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v36(v10, v4, v1);
  uint64_t v11 = sub_24A2A7140();
  os_log_type_t v12 = sub_24A2A7B40();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    uint64_t v37 = v14;
    *(_DWORD *)uint64_t v13 = 136446210;
    sub_24A1D507C((unint64_t *)&qword_269778C28, MEMORY[0x270FA8E80]);
    uint64_t v15 = sub_24A2A7E30();
    *(void *)(v0 + 96) = sub_24A1C52A8(v15, v16, &v37);
    sub_24A2A7B70();
    swift_bridgeObjectRelease();
    uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
    v17(v10, v1);
    _os_log_impl(&dword_24A19F000, v11, v12, "Using authenticating transparency log url: %{public}s", v13, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C5C00A0](v14, -1, -1);
    MEMORY[0x24C5C00A0](v13, -1, -1);
  }
  else
  {

    uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
    v17(v10, v1);
  }
  swift_task_dealloc();
  *(void *)(v0 + 288) = v17;
  *(void *)(v0 + 296) = v8;
  uint64_t v30 = v17;
  *(void *)(v0 + 280) = v36;
  char v34 = *(unsigned char *)(v0 + 376);
  uint64_t v35 = *(void *)(v0 + 240);
  uint64_t v32 = *(void *)(v0 + 112);
  uint64_t v18 = sub_24A2A6800();
  *(void *)(v0 + 304) = v18;
  uint64_t v29 = v18;
  *(void *)(v0 + 312) = *(void *)(v18 - 8);
  uint64_t v19 = swift_task_alloc();
  *(void *)(v0 + 320) = v19;
  swift_task_alloc();
  *(void *)(v0 + 16) = 0xD000000000000011;
  *(void *)(v0 + 24) = 0x800000024A2B2950;
  uint64_t v20 = sub_24A2A6980();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = swift_task_alloc();
  (*(void (**)(uint64_t, void, uint64_t))(v21 + 104))(v22, *MEMORY[0x263F06E48], v20);
  sub_24A1D20BC();
  sub_24A2A69C0();
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v22, v20);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  sub_24A2A67D0();
  swift_task_dealloc();
  sub_24A2A67C0();
  sub_24A2A67F0();
  uint64_t v23 = swift_task_alloc();
  *(void *)(v23 + 16) = v32;
  *(unsigned char *)(v23 + 24) = v34;
  *(void *)(v23 + 32) = v35;
  sub_24A1D4668(&qword_269778718, (void (*)(uint64_t))type metadata accessor for ATLogProofRequest);
  sub_24A2A7020();
  swift_task_dealloc();
  sub_24A2A6FE0();
  sub_24A2A67E0();
  if (v8)
  {
    char v24 = self;
    swift_unknownObjectRetain();
    id v25 = objc_msgSend(v24, sel_defaultSessionConfiguration, v29, v30, v31, v1);
    id v26 = objc_msgSend(self, sel_sessionWithConfiguration_delegate_delegateQueue_, v25, v8, 0);

    swift_unknownObjectRelease();
  }
  else
  {
    id v26 = objc_msgSend(self, sel_sharedSession, v29, v17, v31, v1);
  }
  *(void *)(v0 + 328) = v26;
  uint64_t v27 = (void *)swift_task_alloc();
  *(void *)(v0 + 336) = v27;
  *uint64_t v27 = v0;
  v27[1] = sub_24A1D2E38;
  return MEMORY[0x270EF1EA8](v19, 0);
}

uint64_t sub_24A1D2E38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (void *)*v4;
  v5[43] = a1;
  v5[44] = a2;
  v5[45] = a3;
  v5[46] = v3;
  swift_task_dealloc();
  if (v3) {
    uint64_t v6 = sub_24A1D3F88;
  }
  else {
    uint64_t v6 = sub_24A1D2F50;
  }
  return MEMORY[0x270FA2498](v6, 0, 0);
}

uint64_t sub_24A1D2F50()
{
  unint64_t v151 = v0;
  uint64_t v1 = (void *)v0[45];
  self;
  uint64_t v2 = (void *)swift_dynamicCastObjCClassUnconditional();
  id v3 = v1;
  uint64_t v4 = (void *)sub_24A2A77F0();
  id v5 = objc_msgSend(v2, sel_valueForHTTPHeaderField_, v4);

  if (v5)
  {
    uint64_t v147 = sub_24A2A7800();
    unint64_t v7 = v6;

    if (qword_2697783D8 != -1) {
      swift_once();
    }
    uint64_t v8 = (void *)v0[45];
    uint64_t v10 = v0[34];
    uint64_t v9 = (void (*)(uint64_t, uint64_t, uint64_t))v0[35];
    uint64_t v11 = v0[31];
    uint64_t v12 = sub_24A2A7160();
    __swift_project_value_buffer(v12, (uint64_t)qword_26977A3F0);
    uint64_t v13 = swift_task_alloc();
    v9(v13, v10, v11);
    id v14 = v8;
    swift_bridgeObjectRetain();
    uint64_t v15 = sub_24A2A7140();
    os_log_type_t v16 = sub_24A2A7B40();
    BOOL v17 = os_log_type_enabled(v15, v16);
    uint64_t v18 = (void *)v0[45];
    uint64_t v19 = (void (*)(uint64_t, uint64_t))v0[36];
    uint64_t v20 = v0[31];
    if (v17)
    {
      os_log_type_t typeb = v16;
      uint64_t v21 = swift_slowAlloc();
      uint64_t v145 = swift_slowAlloc();
      v150[0] = v145;
      *(_DWORD *)uint64_t v21 = 136446722;
      sub_24A1D507C((unint64_t *)&qword_269778C28, MEMORY[0x270FA8E80]);
      uint64_t v22 = sub_24A2A7E30();
      v0[11] = sub_24A1C52A8(v22, v23, v150);
      sub_24A2A7B70();
      swift_bridgeObjectRelease();
      v19(v13, v20);
      *(_WORD *)(v21 + 12) = 2050;
      id v24 = objc_msgSend(v2, sel_statusCode);

      v0[8] = v24;
      sub_24A2A7B70();

      *(_WORD *)(v21 + 22) = 2082;
      swift_bridgeObjectRetain();
      v0[9] = sub_24A1C52A8(v147, v7, v150);
      sub_24A2A7B70();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_24A19F000, v15, typeb, "Transparency server %{public}s responded with status %{public}ld, server hint %{public}s", (uint8_t *)v21, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x24C5C00A0](v145, -1, -1);
      MEMORY[0x24C5C00A0](v21, -1, -1);
    }
    else
    {

      v19(v13, v20);
      swift_bridgeObjectRelease_n();
    }
    swift_task_dealloc();
  }
  uint64_t v149 = v0;
  if (objc_msgSend(v2, sel_statusCode) != (id)200)
  {
    unint64_t v40 = v0[44];
    uint64_t v39 = (void *)v0[45];
    uint64_t v41 = v0;
    uint64_t v42 = v2;
    uint64_t v43 = v0[43];
    uint64_t v44 = v0[40];
    char v45 = (void *)v0[41];
    uint64_t v46 = v0[39];
    uint64_t v47 = v41[38];
    uint64_t v146 = (void (*)(uint64_t, uint64_t))v41[36];
    os_log_t logc = v44;
    *(void *)os_log_type_t type = v41[34];
    uint64_t v136 = v41[31];
    uint64_t v48 = v41[29];
    id v49 = objc_msgSend(v42, sel_statusCode);
    sub_24A1D4614();
    swift_allocError();
    *(void *)uint64_t v50 = v49;
    *(unsigned char *)(v50 + 8) = 0;
    swift_willThrow();

    sub_24A1A5384(v43, v40);
    swift_unknownObjectRelease();
    sub_24A1D4D4C(v48, type metadata accessor for ATLogProofRequest);
    (*(void (**)(os_log_t, uint64_t))(v46 + 8))(logc, v47);
LABEL_12:
    uint64_t v37 = *(void *)type;
    uint64_t v38 = v136;
    goto LABEL_13;
  }
  uint64_t v25 = v0[46];
  uint64_t v26 = v0[43];
  unint64_t v27 = v0[44];
  v0[4] = v26;
  v0[5] = v27;
  memset(v150, 0, 40);
  sub_24A1A52B0(v26, v27);
  sub_24A2A6E60();
  sub_24A1D4668(&qword_269778700, (void (*)(uint64_t))type metadata accessor for ATLogProofResponse);
  sub_24A2A6FF0();
  if (!v25)
  {
    uint64_t v53 = v0[27];
    uint64_t v54 = *(void *)v53;
    if (*(unsigned char *)(v53 + 8) == 1)
    {
      switch(v54)
      {
        case 1:
          uint64_t v75 = v0[24];
          uint64_t v76 = v0[17];
          uint64_t v77 = v0[18];
          uint64_t v78 = v53 + *(int *)(v0[26] + 32);
          sub_24A1D46B0(v78, v75);
          uint64_t v79 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v77 + 48);
          int v80 = v79(v75, 1, v76);
          sub_24A1D4718(v75);
          if (v80 == 1) {
            goto LABEL_33;
          }
          uint64_t v81 = v0[23];
          uint64_t v82 = v0[17];
          sub_24A1D46B0(v78, v81);
          int v83 = v79(v81, 1, v82);
          uint64_t v84 = v0[23];
          uint64_t v85 = v0[21];
          if (v83 == 1)
          {
            uint64_t v86 = v0[17];
            sub_24A2A6E00();
            uint64_t v87 = v85 + *(int *)(v86 + 20);
            uint64_t v88 = type metadata accessor for LogEntry(0);
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v88 - 8) + 56))(v87, 1, 1, v88);
            uint64_t v89 = v85 + *(int *)(v86 + 24);
            uint64_t v90 = type metadata accessor for LogConsistency(0);
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v90 - 8) + 56))(v89, 1, 1, v90);
            sub_24A1D4718(v84);
          }
          else
          {
            sub_24A1D4E78(v0[23], v0[21], type metadata accessor for ATLogProofs);
          }
          uint64_t v98 = v0[20];
          uint64_t v97 = v0[21];
          uint64_t v99 = v0[17];
          sub_24A2A6E00();
          uint64_t v100 = v98 + *(int *)(v99 + 20);
          uint64_t v101 = type metadata accessor for LogEntry(0);
          unint64_t v148 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v101 - 8) + 56);
          v148(v100, 1, 1, v101);
          uint64_t v102 = v98 + *(int *)(v99 + 24);
          uint64_t v103 = type metadata accessor for LogConsistency(0);
          typea = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v103 - 8) + 56);
          typea(v102, 1, 1, v103);
          LOBYTE(v102) = sub_24A1B234C(v97, v98);
          sub_24A1D4D4C(v98, type metadata accessor for ATLogProofs);
          sub_24A1D4D4C(v97, type metadata accessor for ATLogProofs);
          if (v102)
          {
LABEL_33:
            unint64_t v105 = v149[44];
            uint64_t v104 = (void *)v149[45];
            uint64_t v106 = v149[43];
            uint64_t v107 = (void *)v149[41];
            uint64_t v68 = v149[39];
            uint64_t v146 = (void (*)(uint64_t, uint64_t))v149[36];
            os_log_t loga = (os_log_t)v149[40];
            *(void *)os_log_type_t type = v149[34];
            uint64_t v135 = v149[38];
            uint64_t v136 = v149[31];
            uint64_t v108 = v149[29];
            uint64_t v109 = v149[27];
            sub_24A1D4614();
            swift_allocError();
            *(void *)uint64_t v110 = 4;
            *(unsigned char *)(v110 + 8) = 4;
            swift_willThrow();

            sub_24A1A5384(v106, v105);
            swift_unknownObjectRelease();
            sub_24A1D4D4C(v109, type metadata accessor for ATLogProofResponse);
            uint64_t v71 = v108;
            goto LABEL_21;
          }
          uint64_t v111 = v149[22];
          uint64_t v112 = v149[17];
          sub_24A1D46B0(v78, v111);
          int v113 = v79(v111, 1, v112);
          uint64_t v114 = v149[22];
          uint64_t v115 = v149[19];
          if (v113 == 1)
          {
            sub_24A2A6E00();
            v148(v115 + *(int *)(v99 + 20), 1, 1, v101);
            typea(v115 + *(int *)(v99 + 24), 1, 1, v103);
            sub_24A1D4718(v114);
          }
          else
          {
            sub_24A1D4E78(v149[22], v149[19], type metadata accessor for ATLogProofs);
          }
          uint64_t v116 = v149[27];
          if ((*(void *)(v116 + 32) & 0x8000000000000000) != 0)
          {
            __break(1u);
            JUMPOUT(0x24A1D3F6CLL);
          }
          uint64_t v117 = (void *)v149[45];
          uint64_t v125 = v149[43];
          unint64_t v126 = v149[44];
          uint64_t v118 = v149[39];
          uint64_t v129 = v149[38];
          uint64_t v130 = v149[40];
          uint64_t v127 = (void *)v149[41];
          uint64_t v132 = v149[34];
          uint64_t v133 = (void (*)(uint64_t, uint64_t))v149[36];
          uint64_t v131 = v149[31];
          uint64_t v128 = v149[29];
          uint64_t v119 = v149[19];
          uint64_t v121 = v149[15];
          uint64_t v120 = v149[16];
          uint64_t v122 = v149[13];
          sub_24A1D4DAC(v119, v120);
          __swift_instantiateConcreteTypeFromMangledName(&qword_26B173100);
          uint64_t v123 = swift_task_alloc();
          sub_24A2A6B90();
          sub_24A1D4D4C(v119, type metadata accessor for ATLogProofs);
          uint64_t v124 = sub_24A2A6BC0();
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v124 - 8) + 56))(v123, 0, 1, v124);
          sub_24A1D4E10(v123, v120 + *(int *)(v121 + 20));
          swift_task_dealloc();
          sub_24A1D4E78(v120, v122, (uint64_t (*)(void))type metadata accessor for TransparencyLogProofs);

          sub_24A1A5384(v125, v126);
          swift_unknownObjectRelease();
          sub_24A1D4D4C(v116, type metadata accessor for ATLogProofResponse);
          sub_24A1D4D4C(v128, type metadata accessor for ATLogProofRequest);
          (*(void (**)(uint64_t, uint64_t))(v118 + 8))(v130, v129);
          v133(v132, v131);
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          uint64_t v51 = (uint64_t (*)(void))v149[1];
          goto LABEL_14;
        case 2:
          unint64_t v56 = v0[44];
          uint64_t v55 = (void *)v0[45];
          uint64_t v91 = v0;
          uint64_t v58 = v0[43];
          uint64_t v92 = v0[40];
          uint64_t v60 = (void *)v0[41];
          uint64_t v61 = v0[39];
          uint64_t v146 = (void (*)(uint64_t, uint64_t))v91[36];
          os_log_t log = v92;
          *(void *)os_log_type_t type = v91[34];
          uint64_t v134 = v91[38];
          uint64_t v136 = v91[31];
          uint64_t v62 = v91[29];
          sub_24A1D4614();
          swift_allocError();
          uint64_t v74 = 1;
          goto LABEL_29;
        case 3:
        case 4:
          unint64_t v56 = v0[44];
          uint64_t v55 = (void *)v0[45];
          uint64_t v57 = v0;
          uint64_t v58 = v0[43];
          uint64_t v59 = v0[40];
          uint64_t v60 = (void *)v0[41];
          uint64_t v61 = v0[39];
          uint64_t v146 = (void (*)(uint64_t, uint64_t))v57[36];
          os_log_t log = v59;
          *(void *)os_log_type_t type = v57[34];
          uint64_t v134 = v57[38];
          uint64_t v136 = v57[31];
          uint64_t v62 = v57[29];
          sub_24A1D4614();
          swift_allocError();
          *(void *)uint64_t v63 = 0;
          goto LABEL_30;
        case 5:
          unint64_t v56 = v0[44];
          uint64_t v55 = (void *)v0[45];
          uint64_t v93 = v0;
          uint64_t v58 = v0[43];
          int v94 = v0[40];
          uint64_t v60 = (void *)v0[41];
          uint64_t v61 = v0[39];
          uint64_t v146 = (void (*)(uint64_t, uint64_t))v93[36];
          os_log_t log = v94;
          *(void *)os_log_type_t type = v93[34];
          uint64_t v134 = v93[38];
          uint64_t v136 = v93[31];
          uint64_t v62 = v93[29];
          sub_24A1D4614();
          swift_allocError();
          uint64_t v74 = 2;
          goto LABEL_29;
        case 6:
          unint64_t v56 = v0[44];
          uint64_t v55 = (void *)v0[45];
          uint64_t v95 = v0;
          uint64_t v58 = v0[43];
          uint64_t v96 = v0[40];
          uint64_t v60 = (void *)v0[41];
          uint64_t v61 = v0[39];
          uint64_t v146 = (void (*)(uint64_t, uint64_t))v95[36];
          os_log_t log = v96;
          *(void *)os_log_type_t type = v95[34];
          uint64_t v134 = v95[38];
          uint64_t v136 = v95[31];
          uint64_t v62 = v95[29];
          sub_24A1D4614();
          swift_allocError();
          uint64_t v74 = 3;
          goto LABEL_29;
        default:
          unint64_t v56 = v0[44];
          uint64_t v55 = (void *)v0[45];
          uint64_t v72 = v0;
          uint64_t v58 = v0[43];
          uint64_t v73 = v0[40];
          uint64_t v60 = (void *)v0[41];
          uint64_t v61 = v0[39];
          uint64_t v146 = (void (*)(uint64_t, uint64_t))v72[36];
          os_log_t log = v73;
          *(void *)os_log_type_t type = v72[34];
          uint64_t v134 = v72[38];
          uint64_t v136 = v72[31];
          uint64_t v62 = v72[29];
          sub_24A1D4614();
          swift_allocError();
          uint64_t v74 = 5;
LABEL_29:
          *(void *)uint64_t v63 = v74;
LABEL_30:
          *(unsigned char *)(v63 + 8) = 4;
          swift_willThrow();

          sub_24A1A5384(v58, v56);
          swift_unknownObjectRelease();
          sub_24A1D4D4C(v53, type metadata accessor for ATLogProofResponse);
          sub_24A1D4D4C(v62, type metadata accessor for ATLogProofRequest);
          (*(void (**)(os_log_t, uint64_t))(v61 + 8))(log, v134);
          break;
      }
    }
    else
    {
      unint64_t v65 = v0[44];
      uint64_t v64 = (void *)v0[45];
      uint64_t v66 = v0[43];
      uint64_t v67 = (void *)v0[41];
      uint64_t v68 = v0[39];
      uint64_t v146 = (void (*)(uint64_t, uint64_t))v0[36];
      os_log_t loga = (os_log_t)v0[40];
      *(void *)os_log_type_t type = v0[34];
      uint64_t v135 = v0[38];
      uint64_t v136 = v0[31];
      uint64_t v69 = v0[29];
      sub_24A1D4614();
      swift_allocError();
      *(void *)uint64_t v70 = v54;
      *(unsigned char *)(v70 + 8) = 1;
      swift_willThrow();

      sub_24A1A5384(v66, v65);
      swift_unknownObjectRelease();
      sub_24A1D4D4C(v53, type metadata accessor for ATLogProofResponse);
      uint64_t v71 = v69;
LABEL_21:
      sub_24A1D4D4C(v71, type metadata accessor for ATLogProofRequest);
      (*(void (**)(os_log_t, uint64_t))(v68 + 8))(loga, v135);
    }
    goto LABEL_12;
  }
  unint64_t v28 = v0[44];
  uint64_t v29 = (void *)v0[45];
  uint64_t v30 = v0[43];
  uint64_t v31 = v0;
  uint64_t v32 = (void *)v0[41];
  uint64_t v33 = v0[38];
  uint64_t v34 = v0[39];
  uint64_t v146 = (void (*)(uint64_t, uint64_t))v0[36];
  os_log_t logb = (os_log_t)v0[40];
  *(void *)typec = v0[34];
  uint64_t v35 = v0[31];
  uint64_t v36 = v31[29];

  sub_24A1A5384(v30, v28);
  swift_unknownObjectRelease();
  sub_24A1D4D4C(v36, type metadata accessor for ATLogProofRequest);
  (*(void (**)(os_log_t, uint64_t))(v34 + 8))(logb, v33);
  uint64_t v37 = *(void *)typec;
  uint64_t v38 = v35;
LABEL_13:
  v146(v37, v38);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v51 = (uint64_t (*)(void))v149[1];
LABEL_14:
  return v51();
}

uint64_t sub_24A1D3F88()
{
  uint64_t v1 = *(void *)(v0 + 320);
  uint64_t v2 = *(void *)(v0 + 304);
  uint64_t v3 = *(void *)(v0 + 312);
  uint64_t v4 = *(void (**)(uint64_t, uint64_t))(v0 + 288);
  uint64_t v5 = *(void *)(v0 + 272);
  uint64_t v6 = *(void *)(v0 + 248);
  uint64_t v7 = *(void *)(v0 + 232);

  swift_unknownObjectRelease();
  sub_24A1D4D4C(v7, type metadata accessor for ATLogProofRequest);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  v4(v5, v6);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

uint64_t sub_24A1D4100()
{
  if (MEMORY[0x263F8AED0]) {
    BOOL v0 = MEMORY[0x263F8AEC0] == 0;
  }
  else {
    BOOL v0 = 1;
  }
  if (v0 || MEMORY[0x263F8AED8] == 0 || MEMORY[0x263F8AEC8] == 0)
  {
    if (qword_2697783D8 != -1) {
      swift_once();
    }
    uint64_t v8 = sub_24A2A7160();
    __swift_project_value_buffer(v8, (uint64_t)qword_26977A3F0);
    uint64_t v9 = sub_24A2A7140();
    os_log_type_t v10 = sub_24A2A7B30();
    uint64_t v7 = v10;
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl(&dword_24A19F000, v9, (os_log_type_t)v7, "Narrative is not supported on this system", v11, 2u);
      MEMORY[0x24C5C00A0](v11, -1, -1);
    }

    sub_24A1D50C4();
    uint64_t v12 = swift_allocError();
    unsigned char *v13 = 0;
    sub_24A1D4614();
    swift_allocError();
    *(void *)uint64_t v14 = v12;
    *(unsigned char *)(v14 + 8) = 3;
    swift_willThrow();
  }
  else
  {
    uint64_t v3 = (objc_class *)sub_24A2A6D80();
    id v4 = objc_allocWithZone(v3);
    uint64_t v5 = (void *)sub_24A2A6D70();
    uint64_t v6 = sub_24A2A6D60();
    if (v6)
    {
      uint64_t v7 = v6;
    }
    else
    {
      id v16 = objc_allocWithZone(v3);
      BOOL v17 = (void *)sub_24A2A6D70();
      uint64_t v18 = sub_24A2A6D60();
      if (v18)
      {
        uint64_t v7 = v18;
      }
      else
      {
        if (qword_2697783D8 != -1) {
          swift_once();
        }
        uint64_t v19 = sub_24A2A7160();
        __swift_project_value_buffer(v19, (uint64_t)qword_26977A3F0);
        uint64_t v20 = sub_24A2A7140();
        os_log_type_t v21 = sub_24A2A7B30();
        if (os_log_type_enabled(v20, v21))
        {
          uint64_t v22 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v22 = 0;
          _os_log_impl(&dword_24A19F000, v20, v21, "Unable to load acdc or adb narrative identity", v22, 2u);
          MEMORY[0x24C5C00A0](v22, -1, -1);
        }

        sub_24A1D50C4();
        uint64_t v7 = swift_allocError();
        *unint64_t v23 = 1;
        sub_24A1D4614();
        swift_allocError();
        *(void *)uint64_t v24 = v7;
        *(unsigned char *)(v24 + 8) = 3;
        swift_willThrow();
      }
    }
  }
  return v7;
}

uint64_t sub_24A1D4408(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5 = sub_24A2A71B0();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)a1 = 3;
  *(unsigned char *)(a1 + 8) = 1;
  sub_24A2A3F08((uint64_t)v8);
  uint64_t v16 = v5;
  uint64_t v17 = sub_24A1D507C(&qword_269778CB8, MEMORY[0x263F045C0]);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v15);
  (*(void (**)(uint64_t *, char *, uint64_t))(v6 + 16))(boxed_opaque_existential_1, v8, v5);
  __swift_project_boxed_opaque_existential_1(v15, v16);
  sub_24A2A6960();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v10 = v14[1];
  uint64_t v11 = v14[2];
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  uint64_t result = sub_24A1A5384(*(void *)(a1 + 32), *(void *)(a1 + 40));
  *(void *)(a1 + 32) = v10;
  *(void *)(a1 + 40) = v11;
  if ((a3 - 4) > 4u) {
    uint64_t v13 = 6;
  }
  else {
    uint64_t v13 = qword_24A2AA450[(char)(a3 - 4)];
  }
  *(void *)(a1 + 16) = v13;
  *(unsigned char *)(a1 + 24) = 1;
  return result;
}

uint64_t sub_24A1D45F0(uint64_t a1)
{
  return sub_24A1D4408(a1, *(void *)(v1 + 16), *(unsigned char *)(v1 + 24));
}

unint64_t sub_24A1D4614()
{
  unint64_t result = qword_269778C20;
  if (!qword_269778C20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269778C20);
  }
  return result;
}

uint64_t sub_24A1D4668(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_24A1D46B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1742D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_24A1D4718(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1742D8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t SWTransparencyLog.verifyExpiringInclusion(of:proofs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v4 + 16) = *(void *)(v3 + 8);
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 24) = v8;
  *uint64_t v8 = v4;
  v8[1] = sub_24A1D4838;
  return SWTransparencyVerifier.verifyExpiringInclusion(of:proofs:)(a1, a2, a3);
}

uint64_t sub_24A1D4838()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 32) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x270FA2498](sub_24A1D496C, 0, 0);
  }
  else
  {
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_24A1D496C()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24A1D4984(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_24A1C50FC;
  return SWTransparencyLog.proveInclusion(of:)(a1, a2);
}

uint64_t sub_24A1D4A2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v4 + 16) = *(void *)(v3 + 8);
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v4 + 24) = v8;
  *uint64_t v8 = v4;
  v8[1] = sub_24A1D4AEC;
  return SWTransparencyVerifier.verifyExpiringInclusion(of:proofs:)(a1, a2, a3);
}

uint64_t sub_24A1D4AEC()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 32) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x270FA2498](sub_24A1D5118, 0, 0);
  }
  else
  {
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

id sub_24A1D4D04()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_24A1D4D4C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_24A1D4DAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ATLogProofs(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_24A1D4E10(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B173100);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_24A1D4E78(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for SWTransparencyLog.Delegate()
{
  return self;
}

uint64_t initializeBufferWithCopyOfBuffer for SWTransparencyLog(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void **)(a2 + 8);
  *(void *)(a1 + 8) = v3;
  id v4 = v3;
  return a1;
}

void destroy for SWTransparencyLog(uint64_t a1)
{
}

uint64_t assignWithCopy for SWTransparencyLog(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void **)(a1 + 8);
  id v4 = *(void **)(a2 + 8);
  *(void *)(a1 + 8) = v4;
  id v5 = v4;

  return a1;
}

uint64_t assignWithTake for SWTransparencyLog(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);

  return a1;
}

uint64_t getEnumTagSinglePayload for SWTransparencyLog(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SWTransparencyLog(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SWTransparencyLog()
{
  return &type metadata for SWTransparencyLog;
}

uint64_t sub_24A1D507C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_24A1D50C4()
{
  unint64_t result = qword_269778CC0;
  if (!qword_269778CC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269778CC0);
  }
  return result;
}

uint64_t _s5ErrorOwet(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *_s5ErrorOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24A1D527CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *sub_24A1D52A4(unsigned char *result, char a2)
{
  *unint64_t result = a2 & 1;
  return result;
}

ValueMetadata *_s5ErrorOMa()
{
  return &_s5ErrorON;
}

BOOL sub_24A1D52C4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_24A1D52DC()
{
  return sub_24A2A7F50();
}

uint64_t sub_24A1D5324()
{
  return sub_24A2A7F20();
}

uint64_t sub_24A1D5350()
{
  return sub_24A2A7F50();
}

unint64_t sub_24A1D5394()
{
  if (*v0) {
    return 0xD000000000000027;
  }
  else {
    return 0xD000000000000035;
  }
}

uint64_t sub_24A1D53D4()
{
  return sub_24A2A6940();
}

uint64_t sub_24A1D53EC()
{
  return sub_24A2A6950();
}

uint64_t sub_24A1D5404()
{
  return sub_24A2A6930();
}

unint64_t sub_24A1D5420()
{
  unint64_t result = qword_269778D30;
  if (!qword_269778D30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269778D30);
  }
  return result;
}

uint64_t TransparencyLogProofs.init(bundle:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v77 = a2;
  uint64_t v3 = type metadata accessor for ATLogProofs(0);
  uint64_t v73 = *(void *)(v3 - 8);
  uint64_t v74 = v3;
  uint64_t v4 = MEMORY[0x270FA5388](v3);
  uint64_t v70 = (char *)&v64 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v71 = (char *)&v64 - v6;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1742D8);
  uint64_t v8 = MEMORY[0x270FA5388](v7 - 8);
  uint64_t v69 = (uint64_t)&v64 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v72 = (uint64_t)&v64 - v10;
  uint64_t v11 = type metadata accessor for Proto_TransparencyProofs(0);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v68 = (uint64_t)&v64 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v64 - v15;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174880);
  uint64_t v18 = MEMORY[0x270FA5388](v17 - 8);
  uint64_t v67 = (uint64_t)&v64 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = MEMORY[0x270FA5388](v18);
  uint64_t v22 = (char *)&v64 - v21;
  MEMORY[0x270FA5388](v20);
  uint64_t v24 = (char *)&v64 - v23;
  uint64_t v25 = type metadata accessor for TransparencyLogProofs();
  uint64_t v75 = *(void *)(v25 - 8);
  uint64_t v76 = v25;
  MEMORY[0x270FA5388](v25);
  uint64_t v66 = (uint64_t)&v64 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = a1;
  uint64_t v28 = a1 + *(int *)(type metadata accessor for Proto_AttestationBundle(0) + 40);
  sub_24A1B2CAC(v28, (uint64_t)v24, &qword_26B174880);
  uint64_t v29 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  int v30 = v29(v24, 1, v11);
  sub_24A1B2D10((uint64_t)v24, &qword_26B174880);
  if (v30 == 1)
  {
    uint64_t v31 = type metadata accessor for AttestationBundle;
    uint64_t v32 = v27;
  }
  else
  {
    uint64_t v65 = v27;
    sub_24A1B2CAC(v28, (uint64_t)v22, &qword_26B174880);
    if (v29(v22, 1, v11) == 1)
    {
      sub_24A2A6E00();
      uint64_t v33 = v73;
      uint64_t v34 = v74;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v73 + 56))(&v16[*(int *)(v11 + 20)], 1, 1, v74);
      sub_24A1B2D10((uint64_t)v22, &qword_26B174880);
    }
    else
    {
      sub_24A1D6E30((uint64_t)v22, (uint64_t)v16, type metadata accessor for Proto_TransparencyProofs);
      uint64_t v33 = v73;
      uint64_t v34 = v74;
    }
    uint64_t v35 = v72;
    sub_24A1B2CAC((uint64_t)&v16[*(int *)(v11 + 20)], v72, &qword_26B1742D8);
    uint64_t v36 = v34;
    uint64_t v37 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v33 + 48);
    int v38 = v37(v35, 1, v36);
    sub_24A1B2D10(v35, &qword_26B1742D8);
    sub_24A1D8C78((uint64_t)v16, type metadata accessor for Proto_TransparencyProofs);
    if (v38 == 1)
    {
      uint64_t v31 = type metadata accessor for AttestationBundle;
      uint64_t v32 = v65;
    }
    else
    {
      uint64_t v39 = v28;
      uint64_t v40 = v67;
      sub_24A1B2CAC(v39, v67, &qword_26B174880);
      int v41 = v29((char *)v40, 1, v11);
      uint64_t v42 = v65;
      uint64_t v43 = v68;
      if (v41 == 1)
      {
        sub_24A2A6E00();
        uint64_t v44 = v74;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v73 + 56))(v43 + *(int *)(v11 + 20), 1, 1, v74);
        sub_24A1B2D10(v40, &qword_26B174880);
        uint64_t v45 = (uint64_t)v71;
      }
      else
      {
        sub_24A1D6E30(v40, v68, type metadata accessor for Proto_TransparencyProofs);
        uint64_t v45 = (uint64_t)v71;
        uint64_t v44 = v74;
      }
      uint64_t v46 = v69;
      sub_24A1B2CAC(v43 + *(int *)(v11 + 20), v69, &qword_26B1742D8);
      if (v37(v46, 1, v44) == 1)
      {
        sub_24A2A6E00();
        uint64_t v47 = v45 + *(int *)(v44 + 20);
        uint64_t v48 = type metadata accessor for LogEntry(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v48 - 8) + 56))(v47, 1, 1, v48);
        uint64_t v49 = v45 + *(int *)(v44 + 24);
        uint64_t v50 = type metadata accessor for LogConsistency(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v50 - 8) + 56))(v49, 1, 1, v50);
        sub_24A1B2D10(v46, &qword_26B1742D8);
      }
      else
      {
        sub_24A1D6E30(v46, v45, type metadata accessor for ATLogProofs);
      }
      sub_24A1D8C78(v43, type metadata accessor for Proto_TransparencyProofs);
      uint64_t v51 = (uint64_t)v70;
      sub_24A2A6E00();
      uint64_t v52 = v51 + *(int *)(v44 + 20);
      uint64_t v53 = type metadata accessor for LogEntry(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v53 - 8) + 56))(v52, 1, 1, v53);
      uint64_t v54 = v51 + *(int *)(v44 + 24);
      uint64_t v55 = type metadata accessor for LogConsistency(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v55 - 8) + 56))(v54, 1, 1, v55);
      LOBYTE(v54) = sub_24A1B234C(v45, v51);
      sub_24A1D8C78(v42, type metadata accessor for AttestationBundle);
      sub_24A1D8C78(v51, type metadata accessor for ATLogProofs);
      if ((v54 & 1) == 0)
      {
        uint64_t v60 = v45;
        uint64_t v61 = v66;
        sub_24A1D6E30(v60, v66, type metadata accessor for ATLogProofs);
        uint64_t v58 = v76;
        uint64_t v62 = v61 + *(int *)(v76 + 20);
        uint64_t v63 = sub_24A2A6BC0();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v63 - 8) + 56))(v62, 1, 1, v63);
        uint64_t v57 = v77;
        sub_24A1D6E30(v61, v77, (uint64_t (*)(void))type metadata accessor for TransparencyLogProofs);
        uint64_t v56 = 0;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v75 + 56))(v57, v56, 1, v58);
      }
      uint64_t v31 = type metadata accessor for ATLogProofs;
      uint64_t v32 = v45;
    }
  }
  sub_24A1D8C78(v32, v31);
  uint64_t v56 = 1;
  uint64_t v58 = v76;
  uint64_t v57 = v77;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v75 + 56))(v57, v56, 1, v58);
}

uint64_t type metadata accessor for TransparencyLogProofs()
{
  uint64_t result = qword_26B1747C8;
  if (!qword_26B1747C8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t TransparencyLogProofs.hash(into:)()
{
  type metadata accessor for ATLogProofs(0);
  sub_24A1D6EE0(&qword_2697786F0, (void (*)(uint64_t))type metadata accessor for ATLogProofs);
  sub_24A2A77A0();
  uint64_t v1 = v0 + *(int *)(type metadata accessor for TransparencyLogProofs() + 20);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B173100);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24A1B2CAC(v1, (uint64_t)v4, &qword_26B173100);
  uint64_t v5 = sub_24A2A6BC0();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  if (v7 == 1) {
    return sub_24A2A7F30();
  }
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v11 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v10, v4, v5);
  sub_24A2A7F30();
  sub_24A1C963C(&qword_269778A50);
  sub_24A2A77A0();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v10, v5);
}

uint64_t TransparencyLogProofs.hashValue.getter()
{
  sub_24A2A7F10();
  type metadata accessor for ATLogProofs(0);
  sub_24A1D6EE0(&qword_2697786F0, (void (*)(uint64_t))type metadata accessor for ATLogProofs);
  sub_24A2A77A0();
  uint64_t v1 = v0 + *(int *)(type metadata accessor for TransparencyLogProofs() + 20);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B173100);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24A1B2CAC(v1, (uint64_t)v4, &qword_26B173100);
  uint64_t v5 = sub_24A2A6BC0();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  if (v7 == 1)
  {
    sub_24A2A7F30();
  }
  else
  {
    MEMORY[0x270FA5388](v7);
    uint64_t v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v9, v4, v5);
    sub_24A2A7F30();
    sub_24A1C963C(&qword_269778A50);
    sub_24A2A77A0();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
  return sub_24A2A7F50();
}

uint64_t sub_24A1D6120(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ATLogProofs(0);
  sub_24A1D6EE0(&qword_2697786F0, (void (*)(uint64_t))type metadata accessor for ATLogProofs);
  sub_24A2A77A0();
  uint64_t v4 = v2 + *(int *)(a2 + 20);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B173100);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24A1B2CAC(v4, (uint64_t)v7, &qword_26B173100);
  uint64_t v8 = sub_24A2A6BC0();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8);
  if (v10 == 1) {
    return sub_24A2A7F30();
  }
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v14 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v13, v7, v8);
  sub_24A2A7F30();
  sub_24A1C963C(&qword_269778A50);
  sub_24A2A77A0();
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v13, v8);
}

uint64_t sub_24A1D631C(uint64_t a1, uint64_t a2)
{
  sub_24A2A7F10();
  type metadata accessor for ATLogProofs(0);
  sub_24A1D6EE0(&qword_2697786F0, (void (*)(uint64_t))type metadata accessor for ATLogProofs);
  sub_24A2A77A0();
  uint64_t v4 = v2 + *(int *)(a2 + 20);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B173100);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24A1B2CAC(v4, (uint64_t)v7, &qword_26B173100);
  uint64_t v8 = sub_24A2A6BC0();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8);
  if (v10 == 1)
  {
    sub_24A2A7F30();
  }
  else
  {
    MEMORY[0x270FA5388](v10);
    uint64_t v12 = (char *)&v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v12, v7, v8);
    sub_24A2A7F30();
    sub_24A1C963C(&qword_269778A50);
    sub_24A2A77A0();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  }
  return sub_24A2A7F50();
}

uint64_t sub_24A1D652C()
{
  return sub_24A2A7EA0();
}

uint64_t sub_24A1D655C()
{
  return sub_24A2A7E90();
}

uint64_t static TransparencyLogError.errorDomain.getter()
{
  swift_beginAccess();
  uint64_t v0 = qword_269778D38;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t static TransparencyLogError.errorDomain.setter(uint64_t a1, void *a2)
{
  qword_269778D38 = a1;
  off_269778D40 = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*static TransparencyLogError.errorDomain.modify())()
{
  return j__swift_endAccess;
}

uint64_t TransparencyLogError.errorCode.getter()
{
  uint64_t result = 1;
  switch(*(unsigned char *)(v0 + 8))
  {
    case 1:
      uint64_t result = 8;
      break;
    case 2:
      uint64_t result = 9;
      break;
    case 3:
      uint64_t result = 11;
      break;
    case 4:
      uint64_t result = qword_24A2AA720[*(void *)v0];
      break;
    default:
      return result;
  }
  return result;
}

unint64_t TransparencyLogError.errorUserInfo.getter()
{
  uint64_t v1 = *v0;
  int v2 = *((unsigned __int8 *)v0 + 8);
  if (!*((unsigned char *)v0 + 8))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_26B174B88);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_24A2A8A60;
    *(void *)(inited + 32) = sub_24A2A7800();
    *(void *)(inited + 40) = v9;
    __swift_instantiateConcreteTypeFromMangledName(&qword_26B174BA8);
    uint64_t v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_24A2AA570;
    id v11 = objc_allocWithZone(MEMORY[0x263F087E0]);
    uint64_t v12 = (void *)sub_24A2A77F0();
    id v13 = objc_msgSend(v11, sel_initWithDomain_code_userInfo_, v12, v1, 0);

    *(void *)(v10 + 32) = v13;
    sub_24A2A7A40();
    *(void *)(inited + 72) = __swift_instantiateConcreteTypeFromMangledName(&qword_269778D48);
    *(void *)(inited + 48) = v10;
    return sub_24A1BC0A4(inited);
  }
  if (v2 == 3)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_26B174B88);
    uint64_t v3 = swift_initStackObject();
    *(_OWORD *)(v3 + 16) = xmmword_24A2A8A60;
    uint64_t v4 = (uint64_t *)(v3 + 48);
    *(void *)(v3 + 32) = sub_24A2A7800();
    *(void *)(v3 + 40) = v15;
    swift_getErrorValue();
    uint64_t v6 = v20;
    uint64_t v7 = v21;
    goto LABEL_7;
  }
  if (v2 == 2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_26B174B88);
    uint64_t v3 = swift_initStackObject();
    *(_OWORD *)(v3 + 16) = xmmword_24A2A8A60;
    uint64_t v4 = (uint64_t *)(v3 + 48);
    *(void *)(v3 + 32) = sub_24A2A7800();
    *(void *)(v3 + 40) = v5;
    swift_getErrorValue();
    uint64_t v6 = v18;
    uint64_t v7 = v19;
LABEL_7:
    *(void *)(v3 + 72) = v7;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v4);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(boxed_opaque_existential_1, v6, v7);
    return sub_24A1BC0A4(v3);
  }
  uint64_t v17 = MEMORY[0x263F8EE78];

  return sub_24A1BC0A4(v17);
}

uint64_t sub_24A1D6950()
{
  swift_beginAccess();
  uint64_t v0 = qword_269778D38;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t sub_24A1D69A4()
{
  uint64_t result = 1;
  switch(*(unsigned char *)(v0 + 8))
  {
    case 1:
      uint64_t result = 8;
      break;
    case 2:
      uint64_t result = 9;
      break;
    case 3:
      uint64_t result = 11;
      break;
    case 4:
      uint64_t result = qword_24A2AA720[*(void *)v0];
      break;
    default:
      return result;
  }
  return result;
}

BOOL _s16CloudAttestation21TransparencyLogProofsV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  if ((sub_24A1A3EF4(a1, a2) & 1) == 0) {
    return 0;
  }
  uint64_t v4 = type metadata accessor for TransparencyLogProofs();
  uint64_t v5 = a1 + *(int *)(v4 + 20);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B173100);
  v28[3] = v28;
  uint64_t v7 = *(void *)(*(void *)(v6 - 8) + 64);
  MEMORY[0x270FA5388](v6 - 8);
  unint64_t v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v9 = (char *)v28 - v8;
  sub_24A1B2CAC(v5, (uint64_t)v28 - v8, &qword_26B173100);
  void v28[2] = v28;
  uint64_t v10 = MEMORY[0x270FA5388](a2 + *(int *)(v4 + 20));
  id v11 = (char *)v28 - v8;
  sub_24A1B2CAC(v10, (uint64_t)v28 - v8, &qword_26B173100);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_269778A40);
  v28[1] = v28;
  uint64_t v13 = MEMORY[0x270FA5388](v12 - 8);
  uint64_t v15 = (char *)v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = (uint64_t)&v15[*(int *)(v13 + 56)];
  sub_24A1B2CAC((uint64_t)v28 - v8, (uint64_t)v15, &qword_26B173100);
  sub_24A1B2CAC((uint64_t)v28 - v8, v16, &qword_26B173100);
  uint64_t v17 = sub_24A2A6BC0();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  uint64_t v20 = v19(v15, 1, v17);
  if (v20 == 1)
  {
    sub_24A1B2D10((uint64_t)v28 - v8, &qword_26B173100);
    sub_24A1B2D10((uint64_t)v28 - v8, &qword_26B173100);
    if (v19((char *)v16, 1, v17) == 1)
    {
      sub_24A1B2D10((uint64_t)v15, &qword_26B173100);
      return 1;
    }
    goto LABEL_7;
  }
  v28[0] = v28;
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (char *)v28 - v8;
  sub_24A1B2CAC((uint64_t)v15, (uint64_t)v28 - v8, &qword_26B173100);
  uint64_t v23 = v19((char *)v16, 1, v17);
  if (v23 == 1)
  {
    sub_24A1B2D10((uint64_t)v28 - v8, &qword_26B173100);
    sub_24A1B2D10((uint64_t)v28 - v8, &qword_26B173100);
    (*(void (**)(char *, uint64_t))(v18 + 8))((char *)v28 - v8, v17);
LABEL_7:
    sub_24A1B2D10((uint64_t)v15, &qword_269778A40);
    return 0;
  }
  MEMORY[0x270FA5388](v23);
  uint64_t v25 = (char *)v28 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 32))(v25, v16, v17);
  sub_24A1C963C(&qword_269778A48);
  char v26 = sub_24A2A77E0();
  uint64_t v27 = *(void (**)(char *, uint64_t))(v18 + 8);
  v27(v25, v17);
  sub_24A1B2D10((uint64_t)v11, &qword_26B173100);
  sub_24A1B2D10((uint64_t)v9, &qword_26B173100);
  v27(v22, v17);
  sub_24A1B2D10((uint64_t)v15, &qword_26B173100);
  return (v26 & 1) != 0;
}

uint64_t sub_24A1D6E30(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_24A1D6E98()
{
  return sub_24A1D6EE0(&qword_269778D50, (void (*)(uint64_t))type metadata accessor for TransparencyLogProofs);
}

uint64_t sub_24A1D6EE0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t dispatch thunk of TransparencyProver.proveInclusion(of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a4 + 8) + **(int **)(a4 + 8));
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  void *v9 = v4;
  v9[1] = sub_24A1C50FC;
  return v11(a1, a2, a3, a4);
}

uint64_t dispatch thunk of TransparencyVerifier.verifyExpiringInclusion(of:proofs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a5 + 8) + **(int **)(a5 + 8));
  id v11 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v11;
  void *v11 = v5;
  v11[1] = sub_24A1DA244;
  return v13(a1, a2, a3, a4, a5);
}

uint64_t *initializeBufferWithCopyOfBuffer for TransparencyLogProofs(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = a3;
    uint64_t v7 = sub_24A2A6E10();
    unint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    uint64_t v62 = type metadata accessor for ATLogProofs(0);
    uint64_t v9 = *(int *)(v62 + 20);
    uint64_t v10 = (uint64_t *)((char *)a1 + v9);
    id v11 = (uint64_t *)((char *)a2 + v9);
    uint64_t v12 = type metadata accessor for LogEntry(0);
    uint64_t v13 = *(void *)(v12 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174940);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
      uint64_t v15 = v62;
    }
    else
    {
      uint64_t v58 = v6;
      uint64_t v59 = v13;
      void *v10 = *v11;
      *((unsigned char *)v10 + 8) = *((unsigned char *)v11 + 8);
      uint64_t v17 = v11[3];
      v10[2] = v11[2];
      uint64_t v18 = v8;
      unint64_t v19 = v11[4];
      swift_bridgeObjectRetain();
      sub_24A1A52B0(v17, v19);
      v10[3] = v17;
      v10[4] = v19;
      uint64_t v20 = v11[6];
      v10[5] = v11[5];
      v10[6] = v20;
      *((unsigned char *)v10 + 56) = *((unsigned char *)v11 + 56);
      uint64_t v60 = v18;
      uint64_t v61 = v7;
      v18((void *)((char *)v10 + *(int *)(v12 + 36)), (void *)((char *)v11 + *(int *)(v12 + 36)), v7);
      uint64_t v21 = *(int *)(v12 + 40);
      uint64_t v22 = (void *)((char *)v10 + v21);
      uint64_t v23 = (void *)((char *)v11 + v21);
      uint64_t v24 = type metadata accessor for SignedObject(0);
      uint64_t v25 = *(void *)(v24 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
      {
        uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174320);
        memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
        unint64_t v8 = v60;
        uint64_t v7 = v61;
        uint64_t v15 = v62;
        uint64_t v6 = v58;
        uint64_t v27 = v59;
      }
      else
      {
        uint64_t v28 = *v23;
        unint64_t v29 = v23[1];
        sub_24A1A52B0(*v23, v29);
        void *v22 = v28;
        v22[1] = v29;
        v60((void *)((char *)v22 + *(int *)(v24 + 20)), (uint64_t *)((char *)v23 + *(int *)(v24 + 20)), v61);
        uint64_t v56 = v24;
        uint64_t v30 = *(int *)(v24 + 24);
        __dst = (void *)((char *)v22 + v30);
        uint64_t v31 = (uint64_t *)((char *)v23 + v30);
        uint64_t v32 = type metadata accessor for Signature(0);
        uint64_t v33 = *(void *)(v32 - 8);
        uint64_t v53 = v32;
        uint64_t v57 = v22;
        uint64_t v55 = v25;
        if ((*(unsigned int (**)(uint64_t *, uint64_t))(v33 + 48))(v31, 1))
        {
          uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
          memcpy(__dst, v31, *(void *)(*(void *)(v34 - 8) + 64));
        }
        else
        {
          uint64_t v35 = *v31;
          unint64_t v36 = v31[1];
          sub_24A1A52B0(*v31, v36);
          void *__dst = v35;
          __dst[1] = v36;
          uint64_t v37 = v31[2];
          unint64_t v38 = v31[3];
          sub_24A1A52B0(v37, v38);
          __dst[2] = v37;
          __dst[3] = v38;
          __dst[4] = v31[4];
          *((unsigned char *)__dst + 40) = *((unsigned char *)v31 + 40);
          v60((void *)((char *)__dst + *(int *)(v53 + 28)), (uint64_t *)((char *)v31 + *(int *)(v53 + 28)), v61);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v33 + 56))(__dst, 0, 1, v53);
        }
        unint64_t v8 = v60;
        uint64_t v15 = v62;
        uint64_t v7 = v61;
        uint64_t v6 = v58;
        uint64_t v27 = v59;
        (*(void (**)(void *, void, uint64_t, uint64_t))(v55 + 56))(v57, 0, 1, v56);
      }
      (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(v10, 0, 1, v12);
    }
    uint64_t v39 = *(int *)(v15 + 24);
    uint64_t v40 = (char *)a1 + v39;
    int v41 = (char *)a2 + v39;
    uint64_t v42 = type metadata accessor for LogConsistency(0);
    uint64_t v43 = *(void *)(v42 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42))
    {
      uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1745E0);
      memcpy(v40, v41, *(void *)(*(void *)(v44 - 8) + 64));
    }
    else
    {
      v8((uint64_t *)v40, (uint64_t *)v41, v7);
      *(void *)&v40[*(int *)(v42 + 20)] = *(void *)&v41[*(int *)(v42 + 20)];
      uint64_t v45 = *(void (**)(char *, void, uint64_t, uint64_t))(v43 + 56);
      swift_retain();
      v45(v40, 0, 1, v42);
    }
    uint64_t v46 = *(int *)(v6 + 20);
    uint64_t v47 = (char *)a1 + v46;
    uint64_t v48 = (char *)a2 + v46;
    uint64_t v49 = sub_24A2A6BC0();
    uint64_t v50 = *(void *)(v49 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48))(v48, 1, v49))
    {
      uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B173100);
      memcpy(v47, v48, *(void *)(*(void *)(v51 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v50 + 16))(v47, v48, v49);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v50 + 56))(v47, 0, 1, v49);
    }
  }
  return a1;
}

uint64_t destroy for TransparencyLogProofs(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A2A6E10();
  int v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v5(a1, v4);
  uint64_t v6 = type metadata accessor for ATLogProofs(0);
  uint64_t v7 = a1 + *(int *)(v6 + 20);
  uint64_t v8 = type metadata accessor for LogEntry(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v7, 1, v8))
  {
    swift_bridgeObjectRelease();
    sub_24A1A5384(*(void *)(v7 + 24), *(void *)(v7 + 32));
    v5(v7 + *(int *)(v8 + 36), v4);
    uint64_t v9 = v7 + *(int *)(v8 + 40);
    uint64_t v10 = type metadata accessor for SignedObject(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v9, 1, v10))
    {
      sub_24A1A5384(*(void *)v9, *(void *)(v9 + 8));
      v5(v9 + *(int *)(v10 + 20), v4);
      uint64_t v11 = v9 + *(int *)(v10 + 24);
      uint64_t v12 = type metadata accessor for Signature(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48))(v11, 1, v12))
      {
        sub_24A1A5384(*(void *)v11, *(void *)(v11 + 8));
        sub_24A1A5384(*(void *)(v11 + 16), *(void *)(v11 + 24));
        v5(v11 + *(int *)(v12 + 28), v4);
      }
    }
  }
  uint64_t v13 = a1 + *(int *)(v6 + 24);
  uint64_t v14 = type metadata accessor for LogConsistency(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48))(v13, 1, v14))
  {
    v5(v13, v4);
    swift_release();
  }
  uint64_t v15 = a1 + *(int *)(a2 + 20);
  uint64_t v16 = sub_24A2A6BC0();
  uint64_t v19 = *(void *)(v16 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 48))(v15, 1, v16);
  if (!result)
  {
    uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t))(v19 + 8);
    return v18(v15, v16);
  }
  return result;
}

uint64_t initializeWithCopy for TransparencyLogProofs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_24A2A6E10();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  v6(a1, a2, v5);
  uint64_t v7 = type metadata accessor for ATLogProofs(0);
  uint64_t v8 = *(int *)(v7 + 20);
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  uint64_t v11 = type metadata accessor for LogEntry(0);
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174940);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
    uint64_t v14 = a3;
  }
  else
  {
    uint64_t v54 = v12;
    uint64_t v55 = v7;
    void *v9 = *v10;
    *((unsigned char *)v9 + 8) = *((unsigned char *)v10 + 8);
    uint64_t v15 = v10[3];
    v9[2] = v10[2];
    uint64_t v57 = v6;
    unint64_t v16 = v10[4];
    swift_bridgeObjectRetain();
    sub_24A1A52B0(v15, v16);
    v9[3] = v15;
    v9[4] = v16;
    uint64_t v6 = v57;
    uint64_t v17 = v10[6];
    v9[5] = v10[5];
    v9[6] = v17;
    *((unsigned char *)v9 + 56) = *((unsigned char *)v10 + 56);
    v57((uint64_t)v9 + *(int *)(v11 + 36), (uint64_t)v10 + *(int *)(v11 + 36), v5);
    uint64_t v18 = *(int *)(v11 + 40);
    uint64_t v56 = v5;
    uint64_t v19 = (void *)((char *)v9 + v18);
    uint64_t v20 = (void *)((char *)v10 + v18);
    uint64_t v21 = type metadata accessor for SignedObject(0);
    uint64_t v22 = *(void *)(v21 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
    {
      uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174320);
      memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
      uint64_t v7 = v55;
      uint64_t v5 = v56;
      uint64_t v14 = a3;
      uint64_t v24 = v54;
    }
    else
    {
      uint64_t v51 = v22;
      uint64_t v26 = *v20;
      unint64_t v25 = v20[1];
      sub_24A1A52B0(*v20, v25);
      void *v19 = v26;
      v19[1] = v25;
      v57((uint64_t)v19 + *(int *)(v21 + 20), (uint64_t)v20 + *(int *)(v21 + 20), v56);
      uint64_t v52 = v21;
      uint64_t v27 = *(int *)(v21 + 24);
      uint64_t v53 = v19;
      uint64_t v28 = (void *)((char *)v19 + v27);
      unint64_t v29 = (uint64_t *)((char *)v20 + v27);
      uint64_t v30 = type metadata accessor for Signature(0);
      uint64_t v31 = *(void *)(v30 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
      {
        uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
        memcpy(v28, v29, *(void *)(*(void *)(v32 - 8) + 64));
        uint64_t v5 = v56;
      }
      else
      {
        uint64_t v33 = *v29;
        unint64_t v49 = v29[1];
        sub_24A1A52B0(*v29, v49);
        *uint64_t v28 = v33;
        v28[1] = v49;
        uint64_t v34 = v29[2];
        unint64_t v50 = v29[3];
        sub_24A1A52B0(v34, v50);
        void v28[2] = v34;
        v28[3] = v50;
        void v28[4] = v29[4];
        *((unsigned char *)v28 + 40) = *((unsigned char *)v29 + 40);
        uint64_t v5 = v56;
        v57((uint64_t)v28 + *(int *)(v30 + 28), (uint64_t)v29 + *(int *)(v30 + 28), v56);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
      }
      uint64_t v24 = v54;
      (*(void (**)(void *, void, uint64_t, uint64_t))(v51 + 56))(v53, 0, 1, v52);
      uint64_t v6 = v57;
      uint64_t v14 = a3;
      uint64_t v7 = v55;
    }
    (*(void (**)(void *, void, uint64_t, uint64_t))(v24 + 56))(v9, 0, 1, v11);
  }
  uint64_t v35 = *(int *)(v7 + 24);
  unint64_t v36 = (char *)(a1 + v35);
  uint64_t v37 = (char *)(a2 + v35);
  uint64_t v38 = type metadata accessor for LogConsistency(0);
  uint64_t v39 = *(void *)(v38 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38))
  {
    uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1745E0);
    memcpy(v36, v37, *(void *)(*(void *)(v40 - 8) + 64));
  }
  else
  {
    v6((uint64_t)v36, (uint64_t)v37, v5);
    *(void *)&v36[*(int *)(v38 + 20)] = *(void *)&v37[*(int *)(v38 + 20)];
    int v41 = *(void (**)(char *, void, uint64_t, uint64_t))(v39 + 56);
    swift_retain();
    v41(v36, 0, 1, v38);
  }
  uint64_t v42 = *(int *)(v14 + 20);
  uint64_t v43 = (void *)(a1 + v42);
  uint64_t v44 = (const void *)(a2 + v42);
  uint64_t v45 = sub_24A2A6BC0();
  uint64_t v46 = *(void *)(v45 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v46 + 48))(v44, 1, v45))
  {
    uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B173100);
    memcpy(v43, v44, *(void *)(*(void *)(v47 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v46 + 16))(v43, v44, v45);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, v45);
  }
  return a1;
}

uint64_t assignWithCopy for TransparencyLogProofs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_24A2A6E10();
  uint64_t v122 = *(void *)(v6 - 8);
  uint64_t v123 = v6;
  uint64_t v121 = *(void (**)(uint64_t, uint64_t))(v122 + 24);
  v121(a1, a2);
  uint64_t v124 = type metadata accessor for ATLogProofs(0);
  uint64_t v7 = *(int *)(v124 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v10 = type metadata accessor for LogEntry(0);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12((uint64_t)v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      uint64_t v120 = a3;
      uint64_t v29 = *v9;
      *(unsigned char *)(v8 + 8) = *((unsigned char *)v9 + 8);
      *(void *)uint64_t v8 = v29;
      *(void *)(v8 + 16) = v9[2];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v30 = v9[3];
      unint64_t v31 = v9[4];
      sub_24A1A52B0(v30, v31);
      uint64_t v32 = *(void *)(v8 + 24);
      unint64_t v33 = *(void *)(v8 + 32);
      *(void *)(v8 + 24) = v30;
      *(void *)(v8 + 32) = v31;
      sub_24A1A5384(v32, v33);
      *(void *)(v8 + 40) = v9[5];
      uint64_t v34 = v9[6];
      *(unsigned char *)(v8 + 56) = *((unsigned char *)v9 + 56);
      *(void *)(v8 + 48) = v34;
      ((void (*)(uint64_t, char *, uint64_t))v121)(v8 + *(int *)(v10 + 36), (char *)v9 + *(int *)(v10 + 36), v123);
      uint64_t v35 = *(int *)(v10 + 40);
      unint64_t v36 = (uint64_t *)(v8 + v35);
      uint64_t v37 = (uint64_t *)((char *)v9 + v35);
      uint64_t v38 = type metadata accessor for SignedObject(0);
      uint64_t v39 = *(void *)(v38 - 8);
      uint64_t v40 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v39 + 48);
      LODWORD(v30) = v40(v36, 1, v38);
      int v41 = v40(v37, 1, v38);
      if (v30)
      {
        if (!v41)
        {
          uint64_t v42 = *v37;
          unint64_t v43 = v37[1];
          sub_24A1A52B0(*v37, v43);
          *unint64_t v36 = v42;
          v36[1] = v43;
          uint64_t v118 = *(void (**)(char *, char *, uint64_t))(v122 + 16);
          v118((char *)v36 + *(int *)(v38 + 20), (char *)v37 + *(int *)(v38 + 20), v123);
          uint64_t v44 = *(int *)(v38 + 24);
          uint64_t v45 = (uint64_t *)((char *)v36 + v44);
          uint64_t v46 = (uint64_t *)((char *)v37 + v44);
          uint64_t v47 = type metadata accessor for Signature(0);
          uint64_t v48 = *(void *)(v47 - 8);
          if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v48 + 48))(v46, 1, v47))
          {
            uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
            memcpy(v45, v46, *(void *)(*(void *)(v49 - 8) + 64));
          }
          else
          {
            unint64_t v112 = v46[1];
            uint64_t v115 = *v46;
            sub_24A1A52B0(*v46, v112);
            *uint64_t v45 = v115;
            v45[1] = v112;
            unint64_t v113 = v46[3];
            uint64_t v116 = v46[2];
            sub_24A1A52B0(v116, v113);
            v45[2] = v116;
            v45[3] = v113;
            uint64_t v95 = v46[4];
            *((unsigned char *)v45 + 40) = *((unsigned char *)v46 + 40);
            v45[4] = v95;
            v118((char *)v45 + *(int *)(v47 + 28), (char *)v46 + *(int *)(v47 + 28), v123);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
          }
          (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
          a3 = v120;
          goto LABEL_9;
        }
      }
      else
      {
        if (!v41)
        {
          uint64_t v79 = *v37;
          unint64_t v80 = v37[1];
          sub_24A1A52B0(*v37, v80);
          uint64_t v81 = *v36;
          unint64_t v82 = v36[1];
          *unint64_t v36 = v79;
          v36[1] = v80;
          sub_24A1A5384(v81, v82);
          ((void (*)(char *, char *, uint64_t))v121)((char *)v36 + *(int *)(v38 + 20), (char *)v37 + *(int *)(v38 + 20), v123);
          uint64_t v83 = *(int *)(v38 + 24);
          uint64_t v84 = (uint64_t)v36 + v83;
          uint64_t v85 = (char *)v37 + v83;
          uint64_t v86 = type metadata accessor for Signature(0);
          uint64_t v87 = *(void *)(v86 - 8);
          uint64_t v88 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v87 + 48);
          LODWORD(v79) = v88(v84, 1, v86);
          int v89 = v88((uint64_t)v85, 1, v86);
          if (v79)
          {
            a3 = v120;
            if (!v89)
            {
              uint64_t v90 = *(void *)v85;
              unint64_t v91 = *((void *)v85 + 1);
              sub_24A1A52B0(*(void *)v85, v91);
              *(void *)uint64_t v84 = v90;
              *(void *)(v84 + 8) = v91;
              uint64_t v92 = *((void *)v85 + 2);
              unint64_t v93 = *((void *)v85 + 3);
              sub_24A1A52B0(v92, v93);
              *(void *)(v84 + 16) = v92;
              *(void *)(v84 + 24) = v93;
              uint64_t v94 = *((void *)v85 + 4);
              *(unsigned char *)(v84 + 40) = v85[40];
              *(void *)(v84 + 32) = v94;
              (*(void (**)(uint64_t, char *, uint64_t))(v122 + 16))(v84 + *(int *)(v86 + 28), &v85[*(int *)(v86 + 28)], v123);
              (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v87 + 56))(v84, 0, 1, v86);
              goto LABEL_9;
            }
          }
          else
          {
            a3 = v120;
            if (!v89)
            {
              uint64_t v96 = *(void *)v85;
              unint64_t v97 = *((void *)v85 + 1);
              sub_24A1A52B0(*(void *)v85, v97);
              uint64_t v98 = *(void *)v84;
              unint64_t v99 = *(void *)(v84 + 8);
              *(void *)uint64_t v84 = v96;
              *(void *)(v84 + 8) = v97;
              sub_24A1A5384(v98, v99);
              uint64_t v100 = *((void *)v85 + 2);
              unint64_t v101 = *((void *)v85 + 3);
              sub_24A1A52B0(v100, v101);
              uint64_t v102 = *(void *)(v84 + 16);
              unint64_t v103 = *(void *)(v84 + 24);
              *(void *)(v84 + 16) = v100;
              *(void *)(v84 + 24) = v101;
              sub_24A1A5384(v102, v103);
              uint64_t v104 = *((void *)v85 + 4);
              *(unsigned char *)(v84 + 40) = v85[40];
              *(void *)(v84 + 32) = v104;
              ((void (*)(uint64_t, char *, uint64_t))v121)(v84 + *(int *)(v86 + 28), &v85[*(int *)(v86 + 28)], v123);
              goto LABEL_9;
            }
            sub_24A1D8C78(v84, type metadata accessor for Signature);
          }
          size_t v26 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8) - 8) + 64);
          uint64_t v27 = (void *)v84;
          uint64_t v28 = v85;
          goto LABEL_8;
        }
        sub_24A1D8C78((uint64_t)v36, type metadata accessor for SignedObject);
      }
      uint64_t v57 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174320);
      memcpy(v36, v37, *(void *)(*(void *)(v57 - 8) + 64));
      a3 = v120;
      goto LABEL_9;
    }
    sub_24A1D8C78(v8, type metadata accessor for LogEntry);
LABEL_7:
    size_t v26 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26B174940) - 8) + 64);
    uint64_t v27 = (void *)v8;
    uint64_t v28 = v9;
LABEL_8:
    memcpy(v27, v28, v26);
LABEL_9:
    uint64_t v25 = v124;
    goto LABEL_22;
  }
  if (v14) {
    goto LABEL_7;
  }
  uint64_t v119 = a3;
  uint64_t v15 = *v9;
  *(unsigned char *)(v8 + 8) = *((unsigned char *)v9 + 8);
  *(void *)uint64_t v8 = v15;
  *(void *)(v8 + 16) = v9[2];
  uint64_t v16 = v9[3];
  unint64_t v17 = v9[4];
  swift_bridgeObjectRetain();
  sub_24A1A52B0(v16, v17);
  *(void *)(v8 + 24) = v16;
  *(void *)(v8 + 32) = v17;
  *(void *)(v8 + 40) = v9[5];
  uint64_t v18 = v9[6];
  *(unsigned char *)(v8 + 56) = *((unsigned char *)v9 + 56);
  *(void *)(v8 + 48) = v18;
  uint64_t v117 = *(void (**)(uint64_t, char *, uint64_t))(v122 + 16);
  v117(v8 + *(int *)(v10 + 36), (char *)v9 + *(int *)(v10 + 36), v123);
  uint64_t v19 = *(int *)(v10 + 40);
  uint64_t v20 = (void *)(v8 + v19);
  uint64_t v21 = (uint64_t *)((char *)v9 + v19);
  uint64_t v22 = type metadata accessor for SignedObject(0);
  uint64_t v23 = *(void *)(v22 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
  {
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174320);
    memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
    uint64_t v25 = v124;
    a3 = v119;
  }
  else
  {
    uint64_t v110 = v23;
    uint64_t v114 = a2;
    uint64_t v50 = *v21;
    unint64_t v51 = v21[1];
    sub_24A1A52B0(*v21, v51);
    *uint64_t v20 = v50;
    v20[1] = v51;
    v117((uint64_t)v20 + *(int *)(v22 + 20), (char *)v21 + *(int *)(v22 + 20), v123);
    uint64_t v52 = *(int *)(v22 + 24);
    uint64_t v111 = v20;
    uint64_t v53 = (void *)((char *)v20 + v52);
    uint64_t v54 = (uint64_t *)((char *)v21 + v52);
    uint64_t v55 = type metadata accessor for Signature(0);
    uint64_t v109 = *(void *)(v55 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v109 + 48))(v54, 1, v55))
    {
      uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
      memcpy(v53, v54, *(void *)(*(void *)(v56 - 8) + 64));
    }
    else
    {
      unint64_t v105 = v54[1];
      uint64_t v107 = *v54;
      sub_24A1A52B0(*v54, v105);
      void *v53 = v107;
      v53[1] = v105;
      unint64_t v106 = v54[3];
      uint64_t v108 = v54[2];
      sub_24A1A52B0(v108, v106);
      v53[2] = v108;
      v53[3] = v106;
      uint64_t v58 = v54[4];
      *((unsigned char *)v53 + 40) = *((unsigned char *)v54 + 40);
      unsigned char v53[4] = v58;
      v117((uint64_t)v53 + *(int *)(v55 + 28), (char *)v54 + *(int *)(v55 + 28), v123);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v109 + 56))(v53, 0, 1, v55);
    }
    a2 = v114;
    (*(void (**)(void *, void, uint64_t, uint64_t))(v110 + 56))(v111, 0, 1, v22);
    a3 = v119;
    uint64_t v25 = v124;
  }
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
LABEL_22:
  uint64_t v59 = *(int *)(v25 + 24);
  uint64_t v60 = (char *)(a1 + v59);
  uint64_t v61 = (char *)(a2 + v59);
  uint64_t v62 = type metadata accessor for LogConsistency(0);
  uint64_t v63 = *(void *)(v62 - 8);
  uint64_t v64 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v63 + 48);
  int v65 = v64(v60, 1, v62);
  int v66 = v64(v61, 1, v62);
  if (v65)
  {
    if (!v66)
    {
      (*(void (**)(char *, char *, uint64_t))(v122 + 16))(v60, v61, v123);
      *(void *)&v60[*(int *)(v62 + 20)] = *(void *)&v61[*(int *)(v62 + 20)];
      uint64_t v67 = *(void (**)(char *, void, uint64_t, uint64_t))(v63 + 56);
      swift_retain();
      v67(v60, 0, 1, v62);
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  if (v66)
  {
    sub_24A1D8C78((uint64_t)v60, type metadata accessor for LogConsistency);
LABEL_27:
    uint64_t v68 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1745E0);
    memcpy(v60, v61, *(void *)(*(void *)(v68 - 8) + 64));
    goto LABEL_28;
  }
  ((void (*)(char *, char *, uint64_t))v121)(v60, v61, v123);
  *(void *)&v60[*(int *)(v62 + 20)] = *(void *)&v61[*(int *)(v62 + 20)];
  swift_retain();
  swift_release();
LABEL_28:
  uint64_t v69 = *(int *)(a3 + 20);
  uint64_t v70 = (void *)(a1 + v69);
  uint64_t v71 = (void *)(a2 + v69);
  uint64_t v72 = sub_24A2A6BC0();
  uint64_t v73 = *(void *)(v72 - 8);
  uint64_t v74 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v73 + 48);
  int v75 = v74(v70, 1, v72);
  int v76 = v74(v71, 1, v72);
  if (!v75)
  {
    if (!v76)
    {
      (*(void (**)(void *, void *, uint64_t))(v73 + 24))(v70, v71, v72);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v73 + 8))(v70, v72);
    goto LABEL_33;
  }
  if (v76)
  {
LABEL_33:
    uint64_t v77 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B173100);
    memcpy(v70, v71, *(void *)(*(void *)(v77 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v73 + 16))(v70, v71, v72);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v73 + 56))(v70, 0, 1, v72);
  return a1;
}

uint64_t sub_24A1D8C78(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t initializeWithTake for TransparencyLogProofs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_24A2A6E10();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v49 = type metadata accessor for ATLogProofs(0);
  uint64_t v8 = *(int *)(v49 + 20);
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  uint64_t v11 = type metadata accessor for LogEntry(0);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v50 = a3;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174940);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    uint64_t v47 = a2;
    void *v9 = *v10;
    *((unsigned char *)v9 + 8) = *((unsigned char *)v10 + 8);
    v9[2] = v10[2];
    *(_OWORD *)(v9 + 3) = *(_OWORD *)(v10 + 3);
    uint64_t v14 = v10[6];
    v9[5] = v10[5];
    v9[6] = v14;
    *((unsigned char *)v9 + 56) = *((unsigned char *)v10 + 56);
    v7((uint64_t)v9 + *(int *)(v11 + 36), (uint64_t)v10 + *(int *)(v11 + 36), v6);
    uint64_t v15 = *(int *)(v11 + 40);
    uint64_t v48 = v6;
    uint64_t v16 = (_OWORD *)((char *)v9 + v15);
    unint64_t v17 = (_OWORD *)((char *)v10 + v15);
    uint64_t v18 = type metadata accessor for SignedObject(0);
    uint64_t v19 = *(void *)(v18 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
    {
      uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174320);
      memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
      uint64_t v6 = v48;
      a2 = v47;
    }
    else
    {
      uint64_t v44 = v19;
      _OWORD *v16 = *v17;
      v7((uint64_t)v16 + *(int *)(v18 + 20), (uint64_t)v17 + *(int *)(v18 + 20), v48);
      uint64_t v45 = v18;
      uint64_t v46 = v16;
      uint64_t v21 = *(int *)(v18 + 24);
      uint64_t v22 = (_OWORD *)((char *)v16 + v21);
      uint64_t v23 = (_OWORD *)((char *)v17 + v21);
      uint64_t v24 = type metadata accessor for Signature(0);
      uint64_t v25 = *(void *)(v24 - 8);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
      {
        uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
        memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
        uint64_t v6 = v48;
      }
      else
      {
        long long v27 = v23[1];
        _OWORD *v22 = *v23;
        v22[1] = v27;
        *((void *)v22 + 4) = *((void *)v23 + 4);
        *((unsigned char *)v22 + 40) = *((unsigned char *)v23 + 40);
        uint64_t v28 = *(int *)(v24 + 28);
        uint64_t v29 = (char *)v23 + v28;
        uint64_t v30 = v24;
        uint64_t v6 = v48;
        v7((uint64_t)v22 + v28, (uint64_t)v29, v48);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v30);
      }
      a2 = v47;
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v44 + 56))(v46, 0, 1, v45);
    }
    (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  uint64_t v31 = *(int *)(v49 + 24);
  uint64_t v32 = (char *)(a1 + v31);
  unint64_t v33 = (char *)(a2 + v31);
  uint64_t v34 = type metadata accessor for LogConsistency(0);
  uint64_t v35 = *(void *)(v34 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
  {
    uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1745E0);
    memcpy(v32, v33, *(void *)(*(void *)(v36 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v32, (uint64_t)v33, v6);
    *(void *)&v32[*(int *)(v34 + 20)] = *(void *)&v33[*(int *)(v34 + 20)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
  }
  uint64_t v37 = *(int *)(v50 + 20);
  uint64_t v38 = (void *)(a1 + v37);
  uint64_t v39 = (const void *)(a2 + v37);
  uint64_t v40 = sub_24A2A6BC0();
  uint64_t v41 = *(void *)(v40 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
  {
    uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B173100);
    memcpy(v38, v39, *(void *)(*(void *)(v42 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v41 + 32))(v38, v39, v40);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
  }
  return a1;
}

uint64_t assignWithTake for TransparencyLogProofs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_24A2A6E10();
  uint64_t v91 = *(void *)(v5 - 8);
  uint64_t v90 = *(void (**)(uint64_t, uint64_t, uint64_t))(v91 + 40);
  v90(a1, a2, v5);
  uint64_t v92 = type metadata accessor for ATLogProofs(0);
  uint64_t v6 = *(int *)(v92 + 20);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = (int *)type metadata accessor for LogEntry(0);
  uint64_t v10 = *((void *)v9 - 1);
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      *(void *)uint64_t v7 = *(void *)v8;
      *(unsigned char *)(v7 + 8) = *(unsigned char *)(v8 + 8);
      *(void *)(v7 + 16) = *(void *)(v8 + 16);
      swift_bridgeObjectRelease();
      uint64_t v26 = *(void *)(v7 + 24);
      unint64_t v27 = *(void *)(v7 + 32);
      *(_OWORD *)(v7 + 24) = *(_OWORD *)(v8 + 24);
      sub_24A1A5384(v26, v27);
      uint64_t v28 = *(void *)(v8 + 48);
      *(void *)(v7 + 40) = *(void *)(v8 + 40);
      *(void *)(v7 + 48) = v28;
      *(unsigned char *)(v7 + 56) = *(unsigned char *)(v8 + 56);
      v90(v7 + v9[9], v8 + v9[9], v5);
      uint64_t v29 = v9[10];
      v7 += v29;
      v8 += v29;
      uint64_t v9 = (int *)type metadata accessor for SignedObject(0);
      uint64_t v10 = *((void *)v9 - 1);
      uint64_t v30 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v10 + 48);
      int v31 = v30(v7, 1, v9);
      int v32 = v30(v8, 1, v9);
      if (v31)
      {
        if (!v32)
        {
          *(_OWORD *)uint64_t v7 = *(_OWORD *)v8;
          unint64_t v33 = *(void (**)(uint64_t, uint64_t, uint64_t))(v91 + 32);
          v33(v7 + v9[5], v8 + v9[5], v5);
          uint64_t v34 = v9[6];
          __dsta = (_OWORD *)(v7 + v34);
          uint64_t v35 = (_OWORD *)(v8 + v34);
          uint64_t v36 = type metadata accessor for Signature(0);
          uint64_t v87 = *(void *)(v36 - 8);
          if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v87 + 48))(v35, 1, v36))
          {
            uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
            memcpy(__dsta, v35, *(void *)(*(void *)(v37 - 8) + 64));
          }
          else
          {
            long long v78 = v35[1];
            _OWORD *__dsta = *v35;
            __dsta[1] = v78;
            *((void *)__dsta + 4) = *((void *)v35 + 4);
            *((unsigned char *)__dsta + 40) = *((unsigned char *)v35 + 40);
            v33((uint64_t)__dsta + *(int *)(v36 + 28), (uint64_t)v35 + *(int *)(v36 + 28), v5);
            (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v87 + 56))(__dsta, 0, 1, v36);
          }
LABEL_22:
          uint64_t v21 = v92;
          goto LABEL_23;
        }
      }
      else
      {
        if (!v32)
        {
          uint64_t v67 = *(void *)v7;
          unint64_t v68 = *(void *)(v7 + 8);
          *(_OWORD *)uint64_t v7 = *(_OWORD *)v8;
          sub_24A1A5384(v67, v68);
          v90(v7 + v9[5], v8 + v9[5], v5);
          uint64_t v69 = v9[6];
          uint64_t v70 = v7 + v69;
          uint64_t v71 = (_OWORD *)(v8 + v69);
          uint64_t v72 = type metadata accessor for Signature(0);
          uint64_t v73 = *(void *)(v72 - 8);
          uint64_t v74 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v73 + 48);
          int v75 = v74(v70, 1, v72);
          int v76 = v74((uint64_t)v71, 1, v72);
          if (v75)
          {
            if (!v76)
            {
              long long v77 = v71[1];
              *(_OWORD *)uint64_t v70 = *v71;
              *(_OWORD *)(v70 + 16) = v77;
              *(void *)(v70 + 32) = *((void *)v71 + 4);
              *(unsigned char *)(v70 + 40) = *((unsigned char *)v71 + 40);
              (*(void (**)(uint64_t, char *, uint64_t))(v91 + 32))(v70 + *(int *)(v72 + 28), (char *)v71 + *(int *)(v72 + 28), v5);
              (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v73 + 56))(v70, 0, 1, v72);
              goto LABEL_10;
            }
          }
          else
          {
            if (!v76)
            {
              uint64_t v79 = *(void *)v70;
              unint64_t v80 = *(void *)(v70 + 8);
              *(_OWORD *)uint64_t v70 = *v71;
              sub_24A1A5384(v79, v80);
              uint64_t v81 = *(void *)(v70 + 16);
              unint64_t v82 = *(void *)(v70 + 24);
              *(_OWORD *)(v70 + 16) = v71[1];
              sub_24A1A5384(v81, v82);
              *(void *)(v70 + 32) = *((void *)v71 + 4);
              *(unsigned char *)(v70 + 40) = *((unsigned char *)v71 + 40);
              v90(v70 + *(int *)(v72 + 28), (uint64_t)v71 + *(int *)(v72 + 28), v5);
              goto LABEL_10;
            }
            sub_24A1D8C78(v70, type metadata accessor for Signature);
          }
          size_t v23 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8) - 8) + 64);
          uint64_t v24 = (void *)v70;
          uint64_t v25 = v71;
LABEL_9:
          memcpy(v24, v25, v23);
LABEL_10:
          uint64_t v21 = v92;
          goto LABEL_24;
        }
        sub_24A1D8C78(v7, type metadata accessor for SignedObject);
      }
      uint64_t v22 = &qword_26B174320;
LABEL_8:
      size_t v23 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(v22) - 8) + 64);
      uint64_t v24 = (void *)v7;
      uint64_t v25 = (const void *)v8;
      goto LABEL_9;
    }
    sub_24A1D8C78(v7, type metadata accessor for LogEntry);
LABEL_7:
    uint64_t v22 = &qword_26B174940;
    goto LABEL_8;
  }
  if (v13) {
    goto LABEL_7;
  }
  *(void *)uint64_t v7 = *(void *)v8;
  *(unsigned char *)(v7 + 8) = *(unsigned char *)(v8 + 8);
  *(void *)(v7 + 16) = *(void *)(v8 + 16);
  *(_OWORD *)(v7 + 24) = *(_OWORD *)(v8 + 24);
  uint64_t v14 = *(void *)(v8 + 48);
  *(void *)(v7 + 40) = *(void *)(v8 + 40);
  *(void *)(v7 + 48) = v14;
  *(unsigned char *)(v7 + 56) = *(unsigned char *)(v8 + 56);
  uint64_t v86 = *(void (**)(uint64_t, uint64_t, uint64_t))(v91 + 32);
  v86(v7 + v9[9], v8 + v9[9], v5);
  uint64_t v15 = v9[10];
  __dst = (void *)v5;
  uint64_t v16 = (_OWORD *)(v7 + v15);
  unint64_t v17 = (_OWORD *)(v8 + v15);
  uint64_t v18 = type metadata accessor for SignedObject(0);
  uint64_t v19 = *(void *)(v18 - 8);
  if (!(*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
  {
    _OWORD *v16 = *v17;
    v86((uint64_t)v16 + *(int *)(v18 + 20), (uint64_t)v17 + *(int *)(v18 + 20), (uint64_t)__dst);
    uint64_t v38 = *(int *)(v18 + 24);
    uint64_t v85 = v16;
    uint64_t v39 = (_OWORD *)((char *)v16 + v38);
    uint64_t v40 = (_OWORD *)((char *)v17 + v38);
    uint64_t v41 = type metadata accessor for Signature(0);
    uint64_t v83 = *(void *)(v41 - 8);
    uint64_t v84 = v41;
    if ((*(unsigned int (**)(_OWORD *, uint64_t))(v83 + 48))(v40, 1))
    {
      uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
      memcpy(v39, v40, *(void *)(*(void *)(v42 - 8) + 64));
      uint64_t v5 = (uint64_t)__dst;
    }
    else
    {
      long long v43 = v40[1];
      *uint64_t v39 = *v40;
      v39[1] = v43;
      *((void *)v39 + 4) = *((void *)v40 + 4);
      *((unsigned char *)v39 + 40) = *((unsigned char *)v40 + 40);
      uint64_t v44 = *(int *)(v84 + 28);
      uint64_t v45 = (char *)v39 + v44;
      uint64_t v46 = (char *)v40 + v44;
      uint64_t v47 = v39;
      uint64_t v5 = (uint64_t)__dst;
      v86((uint64_t)v45, (uint64_t)v46, (uint64_t)__dst);
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v83 + 56))(v47, 0, 1, v84);
    }
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v19 + 56))(v85, 0, 1, v18);
    goto LABEL_22;
  }
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174320);
  memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
  uint64_t v21 = v92;
  uint64_t v5 = (uint64_t)__dst;
LABEL_23:
  (*(void (**)(uint64_t, void, uint64_t, int *))(v10 + 56))(v7, 0, 1, v9);
LABEL_24:
  uint64_t v48 = *(int *)(v21 + 24);
  uint64_t v49 = (char *)(a1 + v48);
  uint64_t v50 = (char *)(a2 + v48);
  uint64_t v51 = type metadata accessor for LogConsistency(0);
  uint64_t v52 = *(void *)(v51 - 8);
  uint64_t v53 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v52 + 48);
  int v54 = v53(v49, 1, v51);
  int v55 = v53(v50, 1, v51);
  if (v54)
  {
    if (!v55)
    {
      (*(void (**)(char *, char *, uint64_t))(v91 + 32))(v49, v50, v5);
      *(void *)&v49[*(int *)(v51 + 20)] = *(void *)&v50[*(int *)(v51 + 20)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v52 + 56))(v49, 0, 1, v51);
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  if (v55)
  {
    sub_24A1D8C78((uint64_t)v49, type metadata accessor for LogConsistency);
LABEL_29:
    uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1745E0);
    memcpy(v49, v50, *(void *)(*(void *)(v56 - 8) + 64));
    goto LABEL_30;
  }
  v90((uint64_t)v49, (uint64_t)v50, v5);
  *(void *)&v49[*(int *)(v51 + 20)] = *(void *)&v50[*(int *)(v51 + 20)];
  swift_release();
LABEL_30:
  uint64_t v57 = *(int *)(a3 + 20);
  uint64_t v58 = (void *)(a1 + v57);
  uint64_t v59 = (void *)(a2 + v57);
  uint64_t v60 = sub_24A2A6BC0();
  uint64_t v61 = *(void *)(v60 - 8);
  uint64_t v62 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v61 + 48);
  int v63 = v62(v58, 1, v60);
  int v64 = v62(v59, 1, v60);
  if (!v63)
  {
    if (!v64)
    {
      (*(void (**)(void *, void *, uint64_t))(v61 + 40))(v58, v59, v60);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v61 + 8))(v58, v60);
    goto LABEL_35;
  }
  if (v64)
  {
LABEL_35:
    uint64_t v65 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B173100);
    memcpy(v58, v59, *(void *)(*(void *)(v65 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v61 + 32))(v58, v59, v60);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v61 + 56))(v58, 0, 1, v60);
  return a1;
}

uint64_t getEnumTagSinglePayload for TransparencyLogProofs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24A1D9D2C);
}

uint64_t sub_24A1D9D2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ATLogProofs(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B173100);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 20);
    return v11(v13, a2, v12);
  }
}

uint64_t storeEnumTagSinglePayload for TransparencyLogProofs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24A1D9E3C);
}

uint64_t sub_24A1D9E3C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for ATLogProofs(0);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, v8);
  }
  else
  {
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B173100);
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a4 + 20);
    return v13(v15, a2, a2, v14);
  }
}

void sub_24A1D9F44()
{
  type metadata accessor for ATLogProofs(319);
  if (v0 <= 0x3F)
  {
    sub_24A1D0D08();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t initializeBufferWithCopyOfBuffer for TransparencyLogError(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  sub_24A1DA054(*(id *)a2, v4);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  return a1;
}

id sub_24A1DA054(id result, char a2)
{
  if ((a2 & 0xFE) == 2) {
    return result;
  }
  return result;
}

void destroy for TransparencyLogError(uint64_t a1)
{
}

void sub_24A1DA078(id a1, char a2)
{
  if ((a2 & 0xFE) == 2) {
}
  }

uint64_t assignWithCopy for TransparencyLogError(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  sub_24A1DA054(*(id *)a2, v4);
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = v3;
  char v6 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v4;
  sub_24A1DA078(v5, v6);
  return a1;
}

uint64_t assignWithTake for TransparencyLogError(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  char v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  char v5 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v3;
  sub_24A1DA078(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for TransparencyLogError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFC && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 252);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 4) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TransparencyLogError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 252;
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_24A1DA1AC(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 3u) {
    return *(unsigned __int8 *)(a1 + 8);
  }
  else {
    return (*(_DWORD *)a1 + 4);
  }
}

uint64_t sub_24A1DA1C4(uint64_t result, unsigned int a2)
{
  if (a2 >= 4)
  {
    *(void *)uint64_t result = a2 - 4;
    LOBYTE(a2) = 4;
  }
  *(unsigned char *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for TransparencyLogError()
{
  return &type metadata for TransparencyLogError;
}

unint64_t sub_24A1DA1EC()
{
  unint64_t result = qword_269778D68;
  if (!qword_269778D68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269778D68);
  }
  return result;
}

void SEP.AttestationProtocol.attest(key:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 8))(a2, a3);
  if (v6)
  {
    uint64_t v7 = (void *)v6;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a3 + 16))(a1, v6, a2, a3);
  }
  else
  {
    sub_24A1DA314();
    swift_allocError();
    *uint64_t v8 = 0;
    swift_willThrow();
  }
}

unint64_t sub_24A1DA314()
{
  unint64_t result = qword_269778D80;
  if (!qword_269778D80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269778D80);
  }
  return result;
}

uint64_t static SEP.AttestationProtocolError.errorDomain.getter()
{
  swift_beginAccess();
  uint64_t v0 = qword_269778D70;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t static SEP.AttestationProtocolError.errorDomain.setter(uint64_t a1, void *a2)
{
  qword_269778D70 = a1;
  off_269778D78 = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*static SEP.AttestationProtocolError.errorDomain.modify())()
{
  return j__swift_endAccess;
}

uint64_t SEP.AttestationProtocolError.errorCode.getter()
{
  if (*v0) {
    return 2;
  }
  else {
    return 1;
  }
}

unint64_t SEP.AttestationProtocolError.errorUserInfo.getter()
{
  if (*v0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_26B174B88);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_24A2A8A60;
    *(void *)(inited + 32) = sub_24A2A7800();
    *(void *)(inited + 40) = v2;
    swift_getErrorValue();
    *(void *)(inited + 72) = v6;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 48));
    (*(void (**)(uint64_t *))(*(void *)(v6 - 8) + 16))(boxed_opaque_existential_1);
    return sub_24A1BC0A4(inited);
  }
  else
  {
    uint64_t v5 = MEMORY[0x263F8EE78];
    return sub_24A1BC0A4(v5);
  }
}

uint64_t sub_24A1DA578()
{
  return sub_24A2A7EA0();
}

uint64_t sub_24A1DA5A8()
{
  return sub_24A2A7E90();
}

uint64_t sub_24A1DA5DC()
{
  swift_beginAccess();
  uint64_t v0 = qword_269778D70;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t sub_24A1DA630()
{
  if (*v0) {
    return 2;
  }
  else {
    return 1;
  }
}

unint64_t sub_24A1DA644()
{
  if (*v0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_26B174B88);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_24A2A8A60;
    *(void *)(inited + 32) = sub_24A2A7800();
    *(void *)(inited + 40) = v2;
    swift_getErrorValue();
    *(void *)(inited + 72) = v6;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 48));
    (*(void (**)(uint64_t *))(*(void *)(v6 - 8) + 16))(boxed_opaque_existential_1);
    return sub_24A1BC0A4(inited);
  }
  else
  {
    uint64_t v5 = MEMORY[0x263F8EE78];
    return sub_24A1BC0A4(v5);
  }
}

uint64_t dispatch thunk of SEP.AttestationProtocol.dcik.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of SEP.AttestationProtocol.attest(key:using:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

void *_s24AttestationProtocolErrorOwCP(void *a1, id *a2)
{
  id v3 = *a2;
  id v4 = *a2;
  *a1 = v3;
  return a1;
}

void _s24AttestationProtocolErrorOwxx(id *a1)
{
}

void **_s24AttestationProtocolErrorOwca(void **a1, id *a2)
{
  id v3 = *a2;
  id v4 = *a2;
  uint64_t v5 = *a1;
  *a1 = v3;

  return a1;
}

void *__swift_memcpy8_8(void *result, void *a2)
{
  *unint64_t result = *a2;
  return result;
}

void **_s24AttestationProtocolErrorOwta(void **a1, void **a2)
{
  id v3 = *a1;
  *a1 = *a2;

  return a1;
}

uint64_t _s24AttestationProtocolErrorOwet(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t _s24AttestationProtocolErrorOwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)unint64_t result = 0;
    *(_DWORD *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2;
    }
  }
  return result;
}

uint64_t sub_24A1DA8D0(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *sub_24A1DA8E8(void *result, int a2)
{
  if (a2 < 0)
  {
    unsigned int v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2) {
      return result;
    }
    unsigned int v2 = a2 - 1;
  }
  *unint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for SEP.AttestationProtocolError()
{
  return &type metadata for SEP.AttestationProtocolError;
}

unint64_t sub_24A1DA918()
{
  unint64_t result = qword_269778D88;
  if (!qword_269778D88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269778D88);
  }
  return result;
}

uint64_t sub_24A1DA970(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*(void *)(a1 + 24))
  {
    sub_24A1BFBE4((_OWORD *)a1, v13);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v12 = *v5;
    *uint64_t v5 = 0x8000000000000000;
    sub_24A255680(v13, a2, a3, a4, a5, isUniquelyReferenced_nonNull_native);
    *uint64_t v5 = v12;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_24A1B2D10(a1, &qword_26B174BC0);
    sub_24A20BF1C(a2, a3, a4, a5, v13);
    swift_bridgeObjectRelease();
    return sub_24A1B2D10((uint64_t)v13, &qword_26B174BC0);
  }
}

uint64_t TransparencyPolicy.init(verifier:validateProofs:)@<X0>(long long *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t result = sub_24A1B97D8(a1, a3);
  *(unsigned char *)(a3 + 40) = a2;
  return result;
}

uint64_t AttestationPolicyContext.proofExpiration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  if (*(void *)(v3 + 16)
    && (unint64_t v4 = sub_24A1BE7EC((uint64_t)&type metadata for TransparencyPolicy, (uint64_t)&protocol witness table for TransparencyPolicy, 0x707845666F6F7270, 0xEF6E6F6974617269), (v5 & 1) != 0))
  {
    sub_24A1C9680(*(void *)(v3 + 56) + 32 * v4, (uint64_t)&v11);
    __swift_instantiateConcreteTypeFromMangledName(&qword_26B174BB8);
    uint64_t v6 = sub_24A2A6BC0();
    int v7 = swift_dynamicCast();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(a1, v7 ^ 1u, 1, v6);
  }
  else
  {
    uint64_t v9 = sub_24A2A6BC0();
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56);
    return v10(a1, 1, 1, v9);
  }
}

uint64_t sub_24A1DABE8()
{
  uint64_t v0 = sub_24A2A7160();
  __swift_allocate_value_buffer(v0, qword_26B174780);
  __swift_project_value_buffer(v0, (uint64_t)qword_26B174780);
  return sub_24A2A7150();
}

uint64_t static TransparencyPolicy.logger.getter@<X0>(uint64_t a1@<X8>)
{
  if (qword_26B174798 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_24A2A7160();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_26B174780);
  unint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, v3, v2);
}

uint64_t TransparencyPolicy.verifier.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_24A1CA974(v1, a1);
}

uint64_t TransparencyPolicy.validateProofs.getter()
{
  return *(unsigned __int8 *)(v0 + 40);
}

uint64_t TransparencyPolicy.init(verifier:)@<X0>(long long *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_24A1B97D8(a1, a2);
  *(unsigned char *)(a2 + 40) = 1;
  return result;
}

uint64_t TransparencyPolicy.evaluate(bundle:context:)(uint64_t a1, uint64_t a2)
{
  v3[24] = a2;
  v3[25] = v2;
  v3[23] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B1747D8);
  v3[26] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for TransparencyLogProofs();
  v3[27] = v4;
  v3[28] = *(void *)(v4 - 8);
  v3[29] = swift_task_alloc();
  uint64_t v5 = sub_24A2A71B0();
  v3[30] = v5;
  v3[31] = *(void *)(v5 - 8);
  v3[32] = swift_task_alloc();
  type metadata accessor for Proto_AttestationBundle(0);
  v3[33] = swift_task_alloc();
  type metadata accessor for AttestationBundle(0);
  v3[34] = swift_task_alloc();
  v3[35] = swift_task_alloc();
  type metadata accessor for Release();
  v3[36] = swift_task_alloc();
  v3[37] = swift_task_alloc();
  v3[38] = swift_task_alloc();
  v3[39] = swift_task_alloc();
  v3[40] = swift_task_alloc();
  v3[41] = swift_task_alloc();
  v3[42] = swift_task_alloc();
  v3[43] = swift_task_alloc();
  v3[44] = swift_task_alloc();
  v3[45] = swift_task_alloc();
  v3[46] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_24A1DAFB8, 0, 0);
}

uint64_t sub_24A1DAFB8()
{
  uint64_t v61 = v0;
  uint64_t v1 = v0[44];
  uint64_t v2 = v0[35];
  uint64_t v3 = v0[33];
  sub_24A1DD06C(v0[23], v2, type metadata accessor for AttestationBundle);
  sub_24A1DD06C(v2, v3, type metadata accessor for Proto_AttestationBundle);
  sub_24A1E33F4(v3, 0, 0, v1);
  sub_24A1DD0D4(v2, type metadata accessor for AttestationBundle);
  uint64_t v4 = v0[45];
  uint64_t v5 = v0[46];
  sub_24A1C96E0(v0[44], v4, (uint64_t (*)(void))type metadata accessor for Release);
  sub_24A1C96E0(v4, v5, (uint64_t (*)(void))type metadata accessor for Release);
  if (qword_26B174798 != -1) {
    swift_once();
  }
  uint64_t v6 = v0[46];
  uint64_t v8 = v0[42];
  uint64_t v7 = v0[43];
  uint64_t v9 = sub_24A2A7160();
  v0[47] = __swift_project_value_buffer(v9, (uint64_t)qword_26B174780);
  sub_24A1DD06C(v6, v7, (uint64_t (*)(void))type metadata accessor for Release);
  sub_24A1DD06C(v6, v8, (uint64_t (*)(void))type metadata accessor for Release);
  uint64_t v10 = sub_24A2A7140();
  os_log_type_t v11 = sub_24A2A7B40();
  BOOL v12 = os_log_type_enabled(v10, v11);
  uint64_t v14 = v0[42];
  uint64_t v13 = v0[43];
  if (v12)
  {
    buf = (uint8_t *)v0[42];
    uint64_t v16 = v0[31];
    uint64_t v15 = v0[32];
    uint64_t v51 = v0[30];
    os_log_t log = v10;
    uint64_t v17 = swift_slowAlloc();
    uint64_t v56 = swift_slowAlloc();
    uint64_t v58 = v56;
    uint64_t v59 = 0;
    *(_DWORD *)uint64_t v17 = 136446466;
    unint64_t v60 = 0xE000000000000000;
    sub_24A2A7C60();
    sub_24A2A78C0();
    sub_24A2A3F08(v15);
    sub_24A2A3C70();
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v51);
    sub_24A2A78C0();
    swift_bridgeObjectRelease();
    sub_24A2A78C0();
    v0[21] = sub_24A1C52A8(v59, 0xE000000000000000, &v58);
    sub_24A2A7B70();
    swift_bridgeObjectRelease();
    sub_24A1DD0D4(v13, (uint64_t (*)(void))type metadata accessor for Release);
    *(_WORD *)(v17 + 12) = 2082;
    uint64_t v18 = Release.jsonString.getter();
    v0[22] = sub_24A1C52A8(v18, v19, &v58);
    sub_24A2A7B70();
    swift_bridgeObjectRelease();
    sub_24A1DD0D4((uint64_t)buf, (uint64_t (*)(void))type metadata accessor for Release);
    _os_log_impl(&dword_24A19F000, log, v11, "Attested device is running %{public}s:\n%{public}s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x24C5C00A0](v56, -1, -1);
    MEMORY[0x24C5C00A0](v17, -1, -1);
  }
  else
  {
    sub_24A1DD0D4(v0[43], (uint64_t (*)(void))type metadata accessor for Release);
    sub_24A1DD0D4(v14, (uint64_t (*)(void))type metadata accessor for Release);
  }
  sub_24A1DD06C(v0[46], v0[41], (uint64_t (*)(void))type metadata accessor for Release);
  uint64_t v20 = sub_24A2A7140();
  os_log_type_t v21 = sub_24A2A7B40();
  BOOL v22 = os_log_type_enabled(v20, v21);
  uint64_t v23 = v0[41];
  if (v22)
  {
    uint64_t v24 = v0[31];
    uint64_t v25 = v0[32];
    uint64_t v52 = v0[30];
    uint64_t v26 = (uint8_t *)swift_slowAlloc();
    os_log_t loga = (os_log_t)swift_slowAlloc();
    *(_DWORD *)uint64_t v26 = 136446210;
    uint64_t v58 = (uint64_t)loga;
    uint64_t v59 = 0;
    unint64_t v60 = 0xE000000000000000;
    sub_24A2A7C60();
    sub_24A2A78C0();
    sub_24A2A3F08(v25);
    sub_24A2A3C70();
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v25, v52);
    sub_24A2A78C0();
    swift_bridgeObjectRelease();
    sub_24A2A78C0();
    v0[20] = sub_24A1C52A8(v59, v60, &v58);
    sub_24A2A7B70();
    swift_bridgeObjectRelease();
    sub_24A1DD0D4(v23, (uint64_t (*)(void))type metadata accessor for Release);
    _os_log_impl(&dword_24A19F000, v20, v21, "Verifying inclusion of %{public}s in transparency log", v26, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C5C00A0](loga, -1, -1);
    MEMORY[0x24C5C00A0](v26, -1, -1);
  }
  else
  {
    sub_24A1DD0D4(v0[41], (uint64_t (*)(void))type metadata accessor for Release);
  }

  uint64_t v27 = v0[34];
  uint64_t v28 = v0[27];
  uint64_t v29 = v0[28];
  uint64_t v30 = v0[26];
  sub_24A1DD06C(v0[23], v27, type metadata accessor for AttestationBundle);
  TransparencyLogProofs.init(bundle:)(v27, v30);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v29 + 48))(v30, 1, v28) == 1)
  {
    sub_24A1B2D10(v0[26], &qword_26B1747D8);
    int v31 = sub_24A2A7140();
    os_log_type_t v32 = sub_24A2A7B30();
    if (os_log_type_enabled(v31, v32))
    {
      unint64_t v33 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v33 = 0;
      _os_log_impl(&dword_24A19F000, v31, v32, "Attestation bundle is missing transparency proofs", v33, 2u);
      MEMORY[0x24C5C00A0](v33, -1, -1);
    }
    uint64_t v34 = v0[46];

    sub_24A1DD018();
    uint64_t v35 = (void *)swift_allocError();
    *uint64_t v36 = 0x8000000000000000;
    swift_willThrow();
    sub_24A1DD0D4(v34, (uint64_t (*)(void))type metadata accessor for Release);
    if (*(unsigned char *)(v0[25] + 40) == 1)
    {
      swift_willThrow();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v37 = (uint64_t (*)(void))v0[1];
    }
    else
    {
      if (qword_26B174798 != -1) {
        swift_once();
      }
      uint64_t v38 = sub_24A2A7160();
      __swift_project_value_buffer(v38, (uint64_t)qword_26B174780);
      uint64_t v39 = sub_24A2A7140();
      os_log_type_t v40 = sub_24A2A7B40();
      if (os_log_type_enabled(v39, v40))
      {
        uint64_t v41 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v41 = 0;
        _os_log_impl(&dword_24A19F000, v39, v40, "Failing transparency checks open since validateProofs is off", v41, 2u);
        MEMORY[0x24C5C00A0](v41, -1, -1);
      }

      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v37 = (uint64_t (*)(void))v0[1];
    }
    return v37();
  }
  else
  {
    long long v43 = (void *)v0[25];
    sub_24A1C96E0(v0[26], v0[29], (uint64_t (*)(void))type metadata accessor for TransparencyLogProofs);
    uint64_t v44 = sub_24A2A6BC0();
    v0[48] = v44;
    v0[49] = *(void *)(v44 - 8);
    uint64_t v45 = swift_task_alloc();
    v0[50] = v45;
    uint64_t v46 = v43[3];
    uint64_t v47 = v43[4];
    __swift_project_boxed_opaque_existential_1(v43, v46);
    uint64_t v57 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v47 + 8)
                                                                              + **(int **)(v47 + 8));
    uint64_t v48 = (void *)swift_task_alloc();
    v0[51] = v48;
    *uint64_t v48 = v0;
    v48[1] = sub_24A1DBB34;
    uint64_t v49 = v0[46];
    uint64_t v50 = v0[29];
    return v57(v45, v49, v50, v46, v47);
  }
}

uint64_t sub_24A1DBB34()
{
  *(void *)(*(void *)v1 + 416) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_24A1DC0B0;
  }
  else {
    uint64_t v2 = sub_24A1DBC48;
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

uint64_t sub_24A1DBC48()
{
  uint64_t v24 = v0;
  uint64_t v2 = v0[49];
  uint64_t v1 = v0[50];
  uint64_t v3 = v0[48];
  uint64_t v4 = v0[46];
  uint64_t v5 = v0[40];
  v0[9] = v3;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v0 + 6);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v2 + 16))(boxed_opaque_existential_1, v1, v3);
  sub_24A1DD134((uint64_t)(v0 + 6), (uint64_t)(v0 + 2));
  sub_24A1DA970((uint64_t)(v0 + 2), (uint64_t)&type metadata for TransparencyPolicy, (uint64_t)&protocol witness table for TransparencyPolicy, 0x707845666F6F7270, 0xEF6E6F6974617269);
  sub_24A1B2D10((uint64_t)(v0 + 6), &qword_26B174BC0);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  sub_24A1DD06C(v4, v5, (uint64_t (*)(void))type metadata accessor for Release);
  uint64_t v7 = sub_24A2A7140();
  os_log_type_t v8 = sub_24A2A7B40();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v10 = v0[31];
    uint64_t v9 = v0[32];
    uint64_t v18 = v0[40];
    uint64_t v19 = v0[30];
    uint64_t v21 = v0[29];
    uint64_t v22 = v0[46];
    os_log_type_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v11 = 136446210;
    v23[0] = v20;
    v23[1] = 0;
    void v23[2] = 0xE000000000000000;
    sub_24A2A7C60();
    sub_24A2A78C0();
    sub_24A2A3F08(v9);
    sub_24A2A3C70();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v19);
    sub_24A2A78C0();
    swift_bridgeObjectRelease();
    sub_24A2A78C0();
    v0[19] = sub_24A1C52A8(0, 0xE000000000000000, v23);
    sub_24A2A7B70();
    swift_bridgeObjectRelease();
    sub_24A1DD0D4(v18, (uint64_t (*)(void))type metadata accessor for Release);
    _os_log_impl(&dword_24A19F000, v7, v8, "AttestationBundle passed TransparencyPolicy: reported software %{public}s is included in transparency log", v11, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C5C00A0](v20, -1, -1);
    MEMORY[0x24C5C00A0](v11, -1, -1);

    sub_24A1DD0D4(v21, (uint64_t (*)(void))type metadata accessor for TransparencyLogProofs);
    uint64_t v12 = v22;
  }
  else
  {
    uint64_t v13 = v0[46];
    uint64_t v14 = v0[40];
    uint64_t v15 = v0[29];

    sub_24A1DD0D4(v14, (uint64_t (*)(void))type metadata accessor for Release);
    sub_24A1DD0D4(v15, (uint64_t (*)(void))type metadata accessor for TransparencyLogProofs);
    uint64_t v12 = v13;
  }
  sub_24A1DD0D4(v12, (uint64_t (*)(void))type metadata accessor for Release);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v16 = (uint64_t (*)(void))v0[1];
  return v16();
}

uint64_t sub_24A1DC0B0()
{
  uint64_t v83 = v0;
  uint64_t v1 = *(void **)(v0 + 416);
  swift_task_dealloc();
  *(void *)(v0 + 144) = v1;
  id v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697789C0);
  if (swift_dynamicCast())
  {
    int v3 = *(unsigned __int8 *)(v0 + 88);
    if (v3 == 2)
    {
      uint64_t v34 = *(void *)(v0 + 368);
      uint64_t v35 = *(void *)(v0 + 296);

      unint64_t v36 = *(void *)(v0 + 80);
      sub_24A1DD06C(v34, v35, (uint64_t (*)(void))type metadata accessor for Release);
      id v37 = (id)v36;
      id v38 = (id)v36;
      uint64_t v39 = sub_24A2A7140();
      os_log_type_t v40 = sub_24A2A7B30();
      BOOL v41 = os_log_type_enabled(v39, v40);
      uint64_t v42 = *(void *)(v0 + 296);
      if (v41)
      {
        uint64_t v44 = *(void *)(v0 + 248);
        uint64_t v43 = *(void *)(v0 + 256);
        uint64_t v69 = *(void *)(v0 + 240);
        uint64_t v45 = swift_slowAlloc();
        buf = (uint8_t *)swift_slowAlloc();
        uint64_t v77 = swift_slowAlloc();
        uint64_t v80 = v77;
        uint64_t v81 = 0;
        *(_DWORD *)uint64_t v45 = 136446466;
        unint64_t v82 = 0xE000000000000000;
        sub_24A2A7C60();
        sub_24A2A78C0();
        sub_24A2A3F08(v43);
        sub_24A2A3C70();
        (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v43, v69);
        sub_24A2A78C0();
        swift_bridgeObjectRelease();
        sub_24A2A78C0();
        *(void *)(v0 + 104) = sub_24A1C52A8(v81, 0xE000000000000000, &v80);
        sub_24A2A7B70();
        swift_bridgeObjectRelease();
        sub_24A1DD0D4(v42, (uint64_t (*)(void))type metadata accessor for Release);
        *(_WORD *)(v45 + 12) = 2114;
        id v46 = (id)v36;
        uint64_t v47 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v0 + 112) = v47;
        sub_24A2A7B70();
        *(void *)buf = v47;

        _os_log_impl(&dword_24A19F000, v39, v40, "SWTransparency threw unknown error for %{public}s: %{public}@", (uint8_t *)v45, 0x16u);
        __swift_instantiateConcreteTypeFromMangledName(&qword_269778BB8);
        swift_arrayDestroy();
        MEMORY[0x24C5C00A0](buf, -1, -1);
        swift_arrayDestroy();
        MEMORY[0x24C5C00A0](v77, -1, -1);
        MEMORY[0x24C5C00A0](v45, -1, -1);
      }
      else
      {
        sub_24A1DD0D4(*(void *)(v0 + 296), (uint64_t (*)(void))type metadata accessor for Release);
      }
      uint64_t v48 = *(void *)(v0 + 368);
      uint64_t v49 = *(void *)(v0 + 232);
      sub_24A1DD018();
      uint64_t v50 = swift_allocError();
      uint64_t v52 = v36 | 0x4000000000000000;
      goto LABEL_23;
    }
    uint64_t v4 = *(void **)(v0 + 80);
    if (v3 == 4)
    {
      if (v4 == (void *)7)
      {
        uint64_t v53 = *(void *)(v0 + 368);
        uint64_t v54 = *(void *)(v0 + 304);

        sub_24A1DD06C(v53, v54, (uint64_t (*)(void))type metadata accessor for Release);
        int v55 = sub_24A2A7140();
        os_log_type_t v56 = sub_24A2A7B30();
        BOOL v57 = os_log_type_enabled(v55, v56);
        uint64_t v58 = *(void *)(v0 + 304);
        if (v57)
        {
          uint64_t v59 = *(void *)(v0 + 248);
          uint64_t v60 = *(void *)(v0 + 256);
          os_log_t loga = *(os_log_t *)(v0 + 240);
          uint64_t v61 = (uint8_t *)swift_slowAlloc();
          uint64_t v78 = swift_slowAlloc();
          uint64_t v80 = v78;
          *(_DWORD *)uint64_t v61 = 136446210;
          uint64_t v81 = 0;
          unint64_t v82 = 0xE000000000000000;
          sub_24A2A7C60();
          sub_24A2A78C0();
          sub_24A2A3F08(v60);
          sub_24A2A3C70();
          (*(void (**)(uint64_t, os_log_t))(v59 + 8))(v60, loga);
          sub_24A2A78C0();
          swift_bridgeObjectRelease();
          sub_24A2A78C0();
          *(void *)(v0 + 120) = sub_24A1C52A8(0, 0xE000000000000000, &v80);
          sub_24A2A7B70();
          swift_bridgeObjectRelease();
          sub_24A1DD0D4(v58, (uint64_t (*)(void))type metadata accessor for Release);
          _os_log_impl(&dword_24A19F000, v55, v56, "Software %{public}s has expired in the transparency log", v61, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x24C5C00A0](v78, -1, -1);
          MEMORY[0x24C5C00A0](v61, -1, -1);
        }
        else
        {
          sub_24A1DD0D4(*(void *)(v0 + 304), (uint64_t (*)(void))type metadata accessor for Release);
        }

        uint64_t v48 = *(void *)(v0 + 368);
        uint64_t v49 = *(void *)(v0 + 232);
        sub_24A1DD018();
        uint64_t v50 = swift_allocError();
        uint64_t v52 = 0x8000000000000010;
        goto LABEL_23;
      }
      if (v4 == (void *)4)
      {
        uint64_t v5 = *(void *)(v0 + 368);
        uint64_t v6 = *(void *)(v0 + 312);

        sub_24A1DD06C(v5, v6, (uint64_t (*)(void))type metadata accessor for Release);
        uint64_t v7 = sub_24A2A7140();
        os_log_type_t v8 = sub_24A2A7B30();
        BOOL v9 = os_log_type_enabled(v7, v8);
        uint64_t v10 = *(void *)(v0 + 312);
        if (v9)
        {
          uint64_t v11 = *(void *)(v0 + 248);
          uint64_t v12 = *(void *)(v0 + 256);
          os_log_t log = *(os_log_t *)(v0 + 240);
          uint64_t v13 = (uint8_t *)swift_slowAlloc();
          uint64_t v75 = swift_slowAlloc();
          *(_DWORD *)uint64_t v13 = 136446210;
          uint64_t v80 = v75;
          uint64_t v81 = 0;
          unint64_t v82 = 0xE000000000000000;
          sub_24A2A7C60();
          sub_24A2A78C0();
          sub_24A2A3F08(v12);
          sub_24A2A3C70();
          (*(void (**)(uint64_t, os_log_t))(v11 + 8))(v12, log);
          sub_24A2A78C0();
          swift_bridgeObjectRelease();
          sub_24A2A78C0();
          *(void *)(v0 + 128) = sub_24A1C52A8(0, 0xE000000000000000, &v80);
          sub_24A2A7B70();
          swift_bridgeObjectRelease();
          sub_24A1DD0D4(v10, (uint64_t (*)(void))type metadata accessor for Release);
          _os_log_impl(&dword_24A19F000, v7, v8, "Software %{public}s is not included in transparency log, this is likely indicative of using the wrong transparency log", v13, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x24C5C00A0](v75, -1, -1);
          MEMORY[0x24C5C00A0](v13, -1, -1);
        }
        else
        {
          sub_24A1DD0D4(*(void *)(v0 + 312), (uint64_t (*)(void))type metadata accessor for Release);
        }

        uint64_t v48 = *(void *)(v0 + 368);
        uint64_t v49 = *(void *)(v0 + 232);
        sub_24A1DD018();
        uint64_t v50 = swift_allocError();
        uint64_t v52 = 0x8000000000000008;
LABEL_23:
        *uint64_t v51 = v52;
        id v79 = (id)v50;
        swift_willThrow();
        sub_24A1DD0D4(v49, (uint64_t (*)(void))type metadata accessor for TransparencyLogProofs);
        sub_24A1DD0D4(v48, (uint64_t (*)(void))type metadata accessor for Release);

        goto LABEL_24;
      }
    }
    sub_24A1DA078(v4, v3);
  }
  uint64_t v14 = *(void **)(v0 + 416);
  uint64_t v15 = *(void *)(v0 + 368);
  uint64_t v16 = *(void *)(v0 + 288);

  sub_24A1DD06C(v15, v16, (uint64_t (*)(void))type metadata accessor for Release);
  id v17 = v14;
  id v18 = v14;
  uint64_t v19 = sub_24A2A7140();
  os_log_type_t v20 = sub_24A2A7B30();
  BOOL v21 = os_log_type_enabled(v19, v20);
  uint64_t v22 = *(void **)(v0 + 416);
  uint64_t v23 = *(void *)(v0 + 288);
  if (v21)
  {
    uint64_t v24 = *(void *)(v0 + 248);
    uint64_t v25 = *(void *)(v0 + 256);
    uint64_t v68 = *(void *)(v0 + 240);
    uint64_t v26 = swift_slowAlloc();
    uint64_t v73 = (void *)swift_slowAlloc();
    uint64_t v76 = swift_slowAlloc();
    uint64_t v80 = v76;
    uint64_t v81 = 0;
    *(_DWORD *)uint64_t v26 = 136446466;
    unint64_t v82 = 0xE000000000000000;
    sub_24A2A7C60();
    sub_24A2A78C0();
    sub_24A2A3F08(v25);
    sub_24A2A3C70();
    os_log_type_t type = v20;
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v25, v68);
    sub_24A2A78C0();
    swift_bridgeObjectRelease();
    sub_24A2A78C0();
    *(void *)(v0 + 136) = sub_24A1C52A8(v81, 0xE000000000000000, &v80);
    sub_24A2A7B70();
    swift_bridgeObjectRelease();
    sub_24A1DD0D4(v23, (uint64_t (*)(void))type metadata accessor for Release);
    *(_WORD *)(v26 + 12) = 2114;
    id v27 = v22;
    uint64_t v28 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 96) = v28;
    sub_24A2A7B70();
    *uint64_t v73 = v28;

    _os_log_impl(&dword_24A19F000, v19, type, "SWTransparency threw unknown error for %{public}s: %{public}@", (uint8_t *)v26, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&qword_269778BB8);
    swift_arrayDestroy();
    MEMORY[0x24C5C00A0](v73, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x24C5C00A0](v76, -1, -1);
    MEMORY[0x24C5C00A0](v26, -1, -1);
  }
  else
  {
    sub_24A1DD0D4(*(void *)(v0 + 288), (uint64_t (*)(void))type metadata accessor for Release);
  }
  uint64_t v29 = *(void *)(v0 + 416);
  uint64_t v30 = *(void *)(v0 + 368);
  uint64_t v31 = *(void *)(v0 + 232);
  sub_24A1DD018();
  uint64_t v32 = swift_allocError();
  *unint64_t v33 = v29 | 0x4000000000000000;
  id v79 = (id)v32;
  swift_willThrow();
  sub_24A1DD0D4(v31, (uint64_t (*)(void))type metadata accessor for TransparencyLogProofs);
  sub_24A1DD0D4(v30, (uint64_t (*)(void))type metadata accessor for Release);
LABEL_24:
  if (*(unsigned char *)(*(void *)(v0 + 200) + 40) == 1)
  {
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v62 = *(uint64_t (**)(void))(v0 + 8);
  }
  else
  {
    if (qword_26B174798 != -1) {
      swift_once();
    }
    uint64_t v63 = sub_24A2A7160();
    __swift_project_value_buffer(v63, (uint64_t)qword_26B174780);
    int v64 = sub_24A2A7140();
    os_log_type_t v65 = sub_24A2A7B40();
    if (os_log_type_enabled(v64, v65))
    {
      int v66 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)int v66 = 0;
      _os_log_impl(&dword_24A19F000, v64, v65, "Failing transparency checks open since validateProofs is off", v66, 2u);
      MEMORY[0x24C5C00A0](v66, -1, -1);
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v62 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v62();
}

void static TransparencyPolicy.proofExpirationKey.getter(void *a1@<X8>)
{
  *a1 = &type metadata for TransparencyPolicy;
  a1[1] = &protocol witness table for TransparencyPolicy;
  a1[2] = 0x707845666F6F7270;
  a1[3] = 0xEF6E6F6974617269;
}

uint64_t sub_24A1DCF74(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_24A1C50FC;
  return TransparencyPolicy.evaluate(bundle:context:)(a1, a2);
}

unint64_t sub_24A1DD018()
{
  unint64_t result = qword_269778D98;
  if (!qword_269778D98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269778D98);
  }
  return result;
}

uint64_t sub_24A1DD06C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_24A1DD0D4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_24A1DD134(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174BC0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t initializeWithCopy for TransparencyPolicy(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

uint64_t assignWithCopy for TransparencyPolicy(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

__n128 __swift_memcpy41_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for TransparencyPolicy(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for TransparencyPolicy(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 41)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TransparencyPolicy(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 40) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 41) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TransparencyPolicy()
{
  return &type metadata for TransparencyPolicy;
}

unint64_t *initializeBufferWithCopyOfBuffer for TransparencyPolicy.Error(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  sub_24A1DD368(*a2);
  *a1 = v3;
  return a1;
}

unint64_t sub_24A1DD368(unint64_t result)
{
  if (result >> 62)
  {
    if (result >> 62 != 1) {
      return result;
    }
    result &= 0x3FFFFFFFFFFFFFFFuLL;
  }
  return (unint64_t)(id)result;
}

void destroy for TransparencyPolicy.Error(unint64_t *a1)
{
}

void sub_24A1DD38C(unint64_t a1)
{
  if (a1 >> 62)
  {
    if (a1 >> 62 != 1) {
      return;
    }
    a1 &= 0x3FFFFFFFFFFFFFFFuLL;
  }
}

unint64_t *assignWithCopy for TransparencyPolicy.Error(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  sub_24A1DD368(*a2);
  unint64_t v4 = *a1;
  *a1 = v3;
  sub_24A1DD38C(v4);
  return a1;
}

unint64_t *assignWithTake for TransparencyPolicy.Error(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  *a1 = *a2;
  sub_24A1DD38C(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for TransparencyPolicy.Error(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7E && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 126);
  }
  unsigned int v3 = (((*(void *)a1 >> 57) >> 5) | (4 * ((*(void *)a1 >> 57) & 0x18 | *(void *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7D) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for TransparencyPolicy.Error(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7D)
  {
    *(void *)__n128 result = a2 - 126;
    if (a3 >= 0x7E) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7E) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 2) & 0x1F | (32 * (-a2 & 0x7F));
      *(void *)__n128 result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t sub_24A1DD4C4(void *a1)
{
  uint64_t v1 = *a1 >> 62;
  if (v1 <= 1) {
    return v1;
  }
  else {
    return (*a1 >> 3) + 2;
  }
}

void *sub_24A1DD4E0(void *result)
{
  *result &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

unint64_t *sub_24A1DD4F0(unint64_t *result, uint64_t a2)
{
  if (a2 < 2)
  {
    uint64_t v2 = *result & 0xFFFFFFFFFFFFFF8;
    unint64_t v3 = a2 << 62;
  }
  else
  {
    uint64_t v2 = 8 * (a2 - 2);
    unint64_t v3 = 0x8000000000000000;
  }
  *__n128 result = v2 | v3;
  return result;
}

ValueMetadata *type metadata accessor for TransparencyPolicy.Error()
{
  return &type metadata for TransparencyPolicy.Error;
}

uint64_t sub_24A1DD530()
{
  uint64_t v0 = sub_24A2A7160();
  __swift_allocate_value_buffer(v0, qword_26977A408);
  __swift_project_value_buffer(v0, (uint64_t)qword_26977A408);
  return sub_24A2A7150();
}

uint64_t DarwinInit.parameters.getter()
{
  return swift_bridgeObjectRetain();
}

void DarwinInit.securityPolicy.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 8);
}

void *DarwinInit.ensembleCertificateFingerprints.getter()
{
  uint64_t v1 = *v0;
  if (!*(void *)(v1 + 16)) {
    return 0;
  }
  unint64_t v2 = sub_24A1BE668(0x632D657275636573, 0xED00006769666E6FLL);
  if ((v3 & 1) == 0) {
    return 0;
  }
  sub_24A1C9680(*(void *)(v1 + 56) + 32 * v2, (uint64_t)&v23);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B174BB8);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B174A48);
  if ((swift_dynamicCast() & 1) == 0) {
    return 0;
  }
  if (*(void *)(v22 + 16) && (unint64_t v4 = sub_24A1BE668(0xD00000000000002ALL, 0x800000024A2B2B90), (v5 & 1) != 0))
  {
    sub_24A1C9680(*(void *)(v22 + 56) + 32 * v4, (uint64_t)&v23);
  }
  else
  {
    long long v23 = 0u;
    long long v24 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((void *)&v24 + 1))
  {
    sub_24A1DEC8C((uint64_t)&v23);
    return 0;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B174A98);
  if ((swift_dynamicCast() & 1) == 0) {
    return 0;
  }
  uint64_t v6 = *(void *)(v22 + 16);
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = v22 + 40;
    os_log_type_t v8 = (void *)MEMORY[0x263F8EE78];
    do
    {
      swift_bridgeObjectRetain();
      uint64_t v10 = sub_24A2A6A30();
      unint64_t v12 = v11;
      swift_bridgeObjectRelease();
      if (v12 >> 60 != 15)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          os_log_type_t v8 = sub_24A1DF2CC(0, v8[2] + 1, 1, v8);
        }
        unint64_t v14 = v8[2];
        unint64_t v13 = v8[3];
        if (v14 >= v13 >> 1) {
          os_log_type_t v8 = sub_24A1DF2CC((void *)(v13 > 1), v14 + 1, 1, v8);
        }
        v8[2] = v14 + 1;
        BOOL v9 = &v8[2 * v14];
        v9[4] = v10;
        v9[5] = v12;
      }
      v7 += 16;
      --v6;
    }
    while (v6);
    swift_bridgeObjectRelease();
    uint64_t v15 = *(void *)(v22 + 16);
  }
  else
  {
    uint64_t v15 = 0;
    os_log_type_t v8 = (void *)MEMORY[0x263F8EE78];
  }
  uint64_t v16 = v8[2];
  swift_bridgeObjectRelease();
  if (v16 != v15)
  {
    swift_bridgeObjectRelease();
    if (qword_2697783E0 != -1) {
      swift_once();
    }
    uint64_t v17 = sub_24A2A7160();
    __swift_project_value_buffer(v17, (uint64_t)qword_26977A408);
    id v18 = sub_24A2A7140();
    os_log_type_t v19 = sub_24A2A7B30();
    if (os_log_type_enabled(v18, v19))
    {
      os_log_type_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v20 = 0;
      _os_log_impl(&dword_24A19F000, v18, v19, "Invalid formatted data in com.apple.CloudAttestation.ensembleMembers", v20, 2u);
      MEMORY[0x24C5C00A0](v20, -1, -1);
    }

    return 0;
  }
  return v8;
}

uint64_t DarwinInit.routingHint.getter()
{
  uint64_t result = DarwinInit.secureConfigRoutingHint.getter();
  if (!v1) {
    return DarwinInit.cfPrefsRoutingHint.getter();
  }
  return result;
}

uint64_t DarwinInit.secureConfigRoutingHint.getter()
{
  uint64_t v1 = *v0;
  if (!*(void *)(v1 + 16)) {
    return 0;
  }
  unint64_t v2 = sub_24A1BE668(0x632D657275636573, 0xED00006769666E6FLL);
  if ((v3 & 1) == 0) {
    return 0;
  }
  sub_24A1C9680(*(void *)(v1 + 56) + 32 * v2, (uint64_t)&v8);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B174BB8);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B174A48);
  if ((swift_dynamicCast() & 1) == 0) {
    return 0;
  }
  if (*(void *)(v7 + 16) && (unint64_t v4 = sub_24A1BE668(0xD000000000000026, 0x800000024A2B2BC0), (v5 & 1) != 0))
  {
    sub_24A1C9680(*(void *)(v7 + 56) + 32 * v4, (uint64_t)&v8);
  }
  else
  {
    long long v8 = 0u;
    long long v9 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((void *)&v9 + 1))
  {
    sub_24A1DEC8C((uint64_t)&v8);
    return 0;
  }
  if (swift_dynamicCast()) {
    return v7;
  }
  else {
    return 0;
  }
}

uint64_t DarwinInit.cfPrefsRoutingHint.getter()
{
  uint64_t v1 = *v0;
  if (!*(void *)(v1 + 16)) {
    return 0;
  }
  unint64_t v2 = sub_24A1BE668(0x6E65726566657270, 0xEB00000000736563);
  if ((v3 & 1) == 0) {
    return 0;
  }
  sub_24A1C9680(*(void *)(v1 + 56) + 32 * v2, (uint64_t)&v18);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B174BB8);
  __swift_instantiateConcreteTypeFromMangledName(&qword_269778DA8);
  if ((swift_dynamicCast() & 1) == 0) {
    return 0;
  }
  uint64_t v4 = *(void *)(v16 + 16);
  if (!v4)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRetain();
  uint64_t v5 = 0;
  while (1)
  {
    uint64_t v7 = *(void *)(v16 + 8 * v5 + 32);
    if (!*(void *)(v7 + 16)) {
      goto LABEL_9;
    }
    swift_bridgeObjectRetain();
    unint64_t v8 = sub_24A1BE668(0x746163696C707061, 0xEE0064695F6E6F69);
    if ((v9 & 1) == 0) {
      goto LABEL_8;
    }
    sub_24A1C9680(*(void *)(v7 + 56) + 32 * v8, (uint64_t)&v18);
    if ((swift_dynamicCast() & 1) == 0) {
      goto LABEL_8;
    }
    if (v16 == 0xD000000000000011 && v17 == 0x800000024A2B2820) {
      break;
    }
    char v10 = sub_24A2A7E40();
    swift_bridgeObjectRelease();
    if (v10) {
      goto LABEL_17;
    }
LABEL_8:
    swift_bridgeObjectRelease();
LABEL_9:
    if (v4 == ++v5)
    {
      swift_bridgeObjectRelease_n();
      return 0;
    }
  }
  swift_bridgeObjectRelease();
LABEL_17:
  if (!*(void *)(v7 + 16)) {
    goto LABEL_8;
  }
  unint64_t v11 = sub_24A1BE668(7955819, 0xE300000000000000);
  if ((v12 & 1) == 0) {
    goto LABEL_8;
  }
  sub_24A1C9680(*(void *)(v7 + 56) + 32 * v11, (uint64_t)&v18);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_8;
  }
  if (v16 != 0x44496C6C6563 || v17 != 0xE600000000000000)
  {
    char v6 = sub_24A2A7E40();
    swift_bridgeObjectRelease();
    if (v6) {
      goto LABEL_26;
    }
    goto LABEL_8;
  }
  swift_bridgeObjectRelease();
LABEL_26:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(v7 + 16) && (unint64_t v14 = sub_24A1BE668(0x65756C6176, 0xE500000000000000), (v15 & 1) != 0))
  {
    sub_24A1C9680(*(void *)(v7 + 56) + 32 * v14, (uint64_t)&v18);
  }
  else
  {
    long long v18 = 0u;
    long long v19 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((void *)&v19 + 1))
  {
    sub_24A1DEC8C((uint64_t)&v18);
    return 0;
  }
  if (swift_dynamicCast()) {
    return v16;
  }
  else {
    return 0;
  }
}

uint64_t DarwinInit.init(from:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  uint64_t v4 = *a1;
  unint64_t v3 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = a1[3];
  unint64_t v7 = a1[4];
  if (!*(void *)(v5 + 16)) {
    goto LABEL_7;
  }
  sub_24A1A52B0(*a1, v3);
  swift_bridgeObjectRetain();
  sub_24A1A52B0(v6, v7);
  unint64_t v8 = sub_24A1BE668(0x7079745F656D696DLL, 0xE900000000000065);
  if ((v9 & 1) == 0)
  {
    sub_24A1A5384(v4, v3);
    swift_bridgeObjectRelease();
    sub_24A1A5384(v6, v7);
    goto LABEL_7;
  }
  char v10 = (uint64_t *)(*(void *)(v5 + 56) + 16 * v8);
  uint64_t v12 = *v10;
  uint64_t v11 = v10[1];
  swift_bridgeObjectRetain();
  sub_24A1A5384(v4, v3);
  swift_bridgeObjectRelease();
  sub_24A1A5384(v6, v7);
  if (v12 == 0xD000000000000010 && v11 == 0x800000024A2B2BF0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  char v15 = sub_24A2A7E40();
  swift_bridgeObjectRelease();
  if ((v15 & 1) == 0)
  {
LABEL_7:
    sub_24A1A5384(v4, v3);
    swift_bridgeObjectRelease();
    sub_24A1A5384(v6, v7);
    sub_24A1DF3DC();
    swift_allocError();
    *(_OWORD *)uint64_t v13 = xmmword_24A2AA000;
LABEL_8:
    *(unsigned char *)(v13 + 16) = 2;
    return swift_willThrow();
  }
LABEL_11:
  if (!*(void *)(v5 + 16))
  {
LABEL_23:
    sub_24A1A5384(v4, v3);
    swift_bridgeObjectRelease();
    sub_24A1A5384(v6, v7);
    sub_24A1DF3DC();
    swift_allocError();
    *(void *)uint64_t v13 = 0;
    *(void *)(v13 + 8) = 0;
    goto LABEL_8;
  }
  sub_24A1A52B0(v4, v3);
  swift_bridgeObjectRetain();
  sub_24A1A52B0(v6, v7);
  unint64_t v16 = sub_24A1BE668(1701667182, 0xE400000000000000);
  if ((v17 & 1) == 0)
  {
    sub_24A1A5384(v4, v3);
    swift_bridgeObjectRelease();
    sub_24A1A5384(v6, v7);
    goto LABEL_23;
  }
  long long v18 = (uint64_t *)(*(void *)(v5 + 56) + 16 * v16);
  uint64_t v20 = *v18;
  uint64_t v19 = v18[1];
  swift_bridgeObjectRetain();
  sub_24A1A5384(v4, v3);
  swift_bridgeObjectRelease();
  sub_24A1A5384(v6, v7);
  if (v20 == 0x692D6E6977726164 && v19 == 0xEB0000000074696ELL)
  {
    swift_bridgeObjectRelease();
    goto LABEL_18;
  }
  char v21 = sub_24A2A7E40();
  swift_bridgeObjectRelease();
  if ((v21 & 1) == 0) {
    goto LABEL_23;
  }
LABEL_18:
  uint64_t v22 = self;
  long long v23 = (void *)sub_24A2A6AA0();
  sub_24A1A5384(v4, v3);
  swift_bridgeObjectRelease();
  sub_24A1A5384(v6, v7);
  *(void *)&long long v38 = 0;
  id v24 = objc_msgSend(v22, sel_JSONObjectWithData_options_error_, v23, 0, &v38);

  id v25 = (id)v38;
  if (!v24)
  {
    uint64_t v29 = v25;
    sub_24A2A6970();

    return swift_willThrow();
  }
  sub_24A2A7BA0();
  swift_unknownObjectRelease();
  sub_24A1C9680((uint64_t)v40, (uint64_t)&v38);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B174A48);
  if ((swift_dynamicCast() & 1) == 0)
  {
    sub_24A1DF3DC();
    swift_allocError();
    *(_OWORD *)uint64_t v30 = xmmword_24A2AA8D0;
    *(unsigned char *)(v30 + 16) = 2;
    swift_willThrow();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
  }
  unint64_t v26 = sub_24A1DE3F0(v37[0]);
  if (*(void *)(v37[0] + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v27 = sub_24A1BE668(0xD000000000000016, 0x800000024A2B2C10);
    if (v28)
    {
      sub_24A1C9680(*(void *)(v37[0] + 56) + 32 * v27, (uint64_t)&v38);
    }
    else
    {
      long long v38 = 0u;
      long long v39 = 0u;
    }
  }
  else
  {
    long long v38 = 0u;
    long long v39 = 0u;
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  sub_24A1DF430((uint64_t)&v38, (uint64_t)v37);
  if (!v37[3])
  {
    sub_24A1DEC8C((uint64_t)&v38);
    uint64_t v31 = v40;
    goto LABEL_32;
  }
  sub_24A1DF430((uint64_t)v37, (uint64_t)v36);
  sub_24A1DF498();
  if (swift_dynamicCast())
  {
    sub_24A1DEC8C((uint64_t)&v38);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);

    uint64_t v31 = v36;
LABEL_32:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
    char v32 = 0;
    goto LABEL_33;
  }
  if (!swift_dynamicCast()
    || (DarwinInit.SecureConfigSecurityPolicy.init(rawValue:)(v34), char v32 = v35, v35 == 3))
  {
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
    sub_24A1DEC8C((uint64_t)v37);
    sub_24A1DF3DC();
    swift_allocError();
    *(void *)uint64_t v33 = 0xD000000000000016;
    *(void *)(v33 + 8) = 0x800000024A2B2C10;
    *(unsigned char *)(v33 + 16) = 1;
    swift_willThrow();
    sub_24A1DEC8C((uint64_t)&v38);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
    return swift_bridgeObjectRelease();
  }
  sub_24A1DEC8C((uint64_t)&v38);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
LABEL_33:
  sub_24A1DEC8C((uint64_t)v37);
  *(void *)a2 = v26;
  *(unsigned char *)(a2 + 8) = v32;
  return swift_bridgeObjectRelease();
}

unint64_t sub_24A1DE3F0(uint64_t a1)
{
  uint64_t v1 = a1;
  if (*(void *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_26B174B28);
    unint64_t v2 = (void *)sub_24A2A7D60();
  }
  else
  {
    unint64_t v2 = (void *)MEMORY[0x263F8EE80];
  }
  uint64_t v35 = v1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(v1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(v1 + 64);
  int64_t v34 = (unint64_t)(63 - v3) >> 6;
  uint64_t v6 = v47;
  unint64_t v7 = v45;
  unint64_t v8 = &v41;
  char v9 = &v43;
  unint64_t result = swift_bridgeObjectRetain();
  int64_t v36 = 0;
  if (v5) {
    goto LABEL_10;
  }
LABEL_11:
  int64_t v19 = v36 + 1;
  if (__OFADD__(v36, 1)) {
    goto LABEL_35;
  }
  if (v19 >= v34) {
    goto LABEL_32;
  }
  unint64_t v20 = *(void *)(v35 + 8 * v19);
  int64_t v21 = v36 + 1;
  if (!v20)
  {
    int64_t v21 = v36 + 2;
    if (v36 + 2 >= v34) {
      goto LABEL_32;
    }
    unint64_t v20 = *(void *)(v35 + 8 * v21);
    if (!v20)
    {
      int64_t v21 = v36 + 3;
      if (v36 + 3 >= v34) {
        goto LABEL_32;
      }
      unint64_t v20 = *(void *)(v35 + 8 * v21);
      if (!v20)
      {
        int64_t v21 = v36 + 4;
        if (v36 + 4 >= v34) {
          goto LABEL_32;
        }
        unint64_t v20 = *(void *)(v35 + 8 * v21);
        if (!v20)
        {
          int64_t v22 = v36 + 5;
          if (v36 + 5 < v34)
          {
            unint64_t v20 = *(void *)(v35 + 8 * v22);
            if (v20)
            {
              int64_t v21 = v36 + 5;
              goto LABEL_26;
            }
            while (1)
            {
              int64_t v21 = v22 + 1;
              if (__OFADD__(v22, 1)) {
                goto LABEL_36;
              }
              if (v21 >= v34) {
                break;
              }
              unint64_t v20 = *(void *)(v35 + 8 * v21);
              ++v22;
              if (v20) {
                goto LABEL_26;
              }
            }
          }
LABEL_32:
          sub_24A1E01CC();
          return (unint64_t)v2;
        }
      }
    }
  }
LABEL_26:
  int64_t v36 = v21;
  uint64_t v37 = (v20 - 1) & v20;
  for (unint64_t i = __clz(__rbit64(v20)) + (v21 << 6); ; unint64_t i = __clz(__rbit64(v5)) | (v36 << 6))
  {
    long long v23 = (uint64_t *)(*(void *)(v1 + 48) + 16 * i);
    uint64_t v25 = *v23;
    uint64_t v24 = v23[1];
    sub_24A1C9680(*(void *)(v1 + 56) + 32 * i, (uint64_t)v6);
    *(void *)&long long v46 = v25;
    *((void *)&v46 + 1) = v24;
    v44[2] = v46;
    v45[0] = v47[0];
    v45[1] = v47[1];
    uint64_t v39 = v25;
    uint64_t v40 = v24;
    sub_24A1BFBE4(v7, &v38);
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&qword_26B174BB8);
    swift_dynamicCast();
    uint64_t v27 = v39;
    uint64_t v26 = v40;
    sub_24A1BFBE4(v8, v9);
    sub_24A1BFBE4(v9, v44);
    sub_24A1BFBE4(v44, &v42);
    unint64_t result = sub_24A1BE668(v27, v26);
    unint64_t v28 = result;
    if (v29)
    {
      uint64_t v11 = v9;
      uint64_t v12 = v8;
      uint64_t v13 = v1;
      unint64_t v14 = v7;
      char v15 = v6;
      unint64_t v16 = (uint64_t *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      uint64_t *v16 = v27;
      v16[1] = v26;
      uint64_t v6 = v15;
      unint64_t v7 = v14;
      uint64_t v1 = v13;
      unint64_t v8 = v12;
      char v9 = v11;
      char v17 = (_OWORD *)(v2[7] + 32 * v28);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
      unint64_t result = (unint64_t)sub_24A1BFBE4(&v42, v17);
      unint64_t v5 = v37;
      if (!v37) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
    if (v2[2] >= v2[3]) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v30 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v30 = v27;
    v30[1] = v26;
    unint64_t result = (unint64_t)sub_24A1BFBE4(&v42, (_OWORD *)(v2[7] + 32 * result));
    uint64_t v31 = v2[2];
    BOOL v32 = __OFADD__(v31, 1);
    uint64_t v33 = v31 + 1;
    if (v32) {
      goto LABEL_34;
    }
    v2[2] = v33;
    unint64_t v5 = v37;
    if (!v37) {
      goto LABEL_11;
    }
LABEL_10:
    uint64_t v37 = (v5 - 1) & v5;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

CloudAttestation::DarwinInit::SecureConfigSecurityPolicy_optional __swiftcall DarwinInit.SecureConfigSecurityPolicy.init(rawValue:)(Swift::String rawValue)
{
  unint64_t v2 = v1;
  unint64_t v3 = sub_24A2A7DA0();
  result.value = swift_bridgeObjectRelease();
  char v5 = 3;
  if (v3 < 3) {
    char v5 = v3;
  }
  *unint64_t v2 = v5;
  return result;
}

uint64_t DarwinInit.SecureConfigSecurityPolicy.rawValue.getter()
{
  uint64_t v1 = 0x7972726163;
  if (*v0 != 1) {
    uint64_t v1 = 0x72656D6F74737563;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 1701736302;
  }
}

uint64_t sub_24A1DE848(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_24A247AAC(*a1, *a2);
}

uint64_t sub_24A1DE854()
{
  return sub_24A2A7F50();
}

uint64_t sub_24A1DE8EC()
{
  sub_24A2A78A0();

  return swift_bridgeObjectRelease();
}

uint64_t sub_24A1DE970()
{
  return sub_24A2A7F50();
}

CloudAttestation::DarwinInit::SecureConfigSecurityPolicy_optional sub_24A1DEA04(Swift::String *a1)
{
  return DarwinInit.SecureConfigSecurityPolicy.init(rawValue:)(*a1);
}

void sub_24A1DEA10(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE400000000000000;
  unint64_t v4 = 0xE500000000000000;
  uint64_t v5 = 0x7972726163;
  if (v2 != 1)
  {
    uint64_t v5 = 0x72656D6F74737563;
    unint64_t v4 = 0xE800000000000000;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 1701736302;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_24A1DEA64()
{
  return sub_24A2A7A00();
}

uint64_t sub_24A1DEAC4()
{
  return sub_24A2A79E0();
}

unint64_t sub_24A1DEB14(uint64_t a1, uint64_t a2, char a3)
{
  if (!a3)
  {
    sub_24A2A7C60();
    swift_bridgeObjectRelease();
    unint64_t v5 = 0xD00000000000002DLL;
    goto LABEL_5;
  }
  if (a3 == 1)
  {
    unint64_t v5 = 0;
    sub_24A2A7C60();
    sub_24A2A78C0();
LABEL_5:
    sub_24A2A78C0();
    sub_24A2A78C0();
    return v5;
  }
  unint64_t result = 0xD000000000000025;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD00000000000002ALL;
      break;
    case 2:
      unint64_t result = 0xD00000000000002ELL;
      break;
    case 3:
      unint64_t result = 0xD000000000000038;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_24A1DEC80()
{
  return sub_24A1DEB14(*(void *)v0, *(void *)(v0 + 8), *(unsigned char *)(v0 + 16));
}

uint64_t sub_24A1DEC8C(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174BC8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *sub_24A1DECEC(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_26B174B80);
      char v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      char v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_24A1DFB00(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_24A1DEDFC(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_26B174B90);
      char v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      char v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_24A1DFBF4(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_24A1DEF0C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_269778DC8);
      char v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 56);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[7 * v8 + 4]) {
          memmove(v12, a4 + 4, 56 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      char v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    sub_24A1DFCE8(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_24A1DF038(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_24A1DF9D0(a1, a2, a3, a4, &qword_26B174B68);
}

void *sub_24A1DF04C(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_24A1DF074(a1, a2, a3, a4, &qword_26B174B78, &qword_26B174A50);
}

void *sub_24A1DF060(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_24A1DF074(a1, a2, a3, a4, &qword_26B174B88, &qword_26B174A68);
}

void *sub_24A1DF074(void *result, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  char v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v10 = a2;
    goto LABEL_8;
  }
  unint64_t v9 = a4[3];
  uint64_t v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v10 + 0x4000000000000000 >= 0)
  {
    uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v10 = a2;
    }
LABEL_8:
    uint64_t v11 = a4[2];
    if (v10 <= v11) {
      uint64_t v12 = a4[2];
    }
    else {
      uint64_t v12 = v10;
    }
    if (v12)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      uint64_t v13 = (void *)swift_allocObject();
      size_t v14 = _swift_stdlib_malloc_size(v13);
      _OWORD v13[2] = v11;
      v13[3] = 2 * ((uint64_t)(v14 - 32) / 48);
      char v15 = v13 + 4;
      if (v8)
      {
LABEL_13:
        if (v13 != a4 || v15 >= &a4[6 * v11 + 4]) {
          memmove(v15, a4 + 4, 48 * v11);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v13 = (void *)MEMORY[0x263F8EE78];
      char v15 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    sub_24A1DFDE0(0, v11, (unint64_t)v15, (uint64_t)a4, a6);
LABEL_22:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

void *sub_24A1DF1A8(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_26B174B58);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4]) {
          memmove(v12, a4 + 4, 40 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    sub_24A1DFEEC(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_24A1DF2CC(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_26B174B48);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_24A1DFFE4(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

unint64_t sub_24A1DF3DC()
{
  unint64_t result = qword_269778DB0;
  if (!qword_269778DB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269778DB0);
  }
  return result;
}

uint64_t sub_24A1DF430(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174BC8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_24A1DF498()
{
  unint64_t result = qword_26B174AE8;
  if (!qword_26B174AE8)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_26B174AE8);
  }
  return result;
}

unint64_t sub_24A1DF4DC()
{
  unint64_t result = qword_269778DB8;
  if (!qword_269778DB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269778DB8);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for DarwinInit(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DarwinInit(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  return a1;
}

uint64_t assignWithTake for DarwinInit(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for DarwinInit(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 9)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DarwinInit(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 9) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DarwinInit()
{
  return &type metadata for DarwinInit;
}

uint64_t getEnumTagSinglePayload for DarwinInit.SecureConfigSecurityPolicy(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for DarwinInit.SecureConfigSecurityPolicy(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24A1DF7ECLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DarwinInit.SecureConfigSecurityPolicy()
{
  return &type metadata for DarwinInit.SecureConfigSecurityPolicy;
}

uint64_t sub_24A1DF828(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 1u) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for DarwinInit.Error(uint64_t a1)
{
  return sub_24A1DF850(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t sub_24A1DF850(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 1u) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t _s16CloudAttestation10DarwinInitV5ErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  sub_24A1DF828(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for DarwinInit.Error(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  sub_24A1DF828(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  unsigned __int8 v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  sub_24A1DF850(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for DarwinInit.Error(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  unsigned __int8 v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  sub_24A1DF850(v4, v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for DarwinInit.Error()
{
  return &type metadata for DarwinInit.Error;
}

unint64_t sub_24A1DF968()
{
  unint64_t result = qword_269778DC0;
  if (!qword_269778DC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269778DC0);
  }
  return result;
}

void *sub_24A1DF9BC(void *a1, int64_t a2, char a3, void *a4)
{
  return sub_24A1DF9D0(a1, a2, a3, a4, &qword_26B174B60);
}

void *sub_24A1DF9D0(void *result, int64_t a2, char a3, void *a4, uint64_t *a5)
{
  char v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v8 = a2;
    goto LABEL_8;
  }
  unint64_t v7 = a4[3];
  uint64_t v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v8 + 0x4000000000000000 >= 0)
  {
    uint64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v8 = a2;
    }
LABEL_8:
    uint64_t v9 = a4[2];
    if (v8 <= v9) {
      uint64_t v10 = a4[2];
    }
    else {
      uint64_t v10 = v8;
    }
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      int64_t v11 = (void *)swift_allocObject();
      size_t v12 = _swift_stdlib_malloc_size(v11);
      v11[2] = v9;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
      uint64_t v13 = v11 + 4;
      if (v6)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[3 * v9 + 4]) {
          memmove(v13, a4 + 4, 24 * v9);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      int64_t v11 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    sub_24A1E00D8(0, v9, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_24A1DFB00(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_24A2A7D70();
  __break(1u);
  return result;
}

uint64_t sub_24A1DFBF4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_24A2A7D70();
  __break(1u);
  return result;
}

uint64_t sub_24A1DFCE8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 56 * a1 + 32;
    unint64_t v6 = a3 + 56 * v4;
    if (v5 >= v6 || v5 + 56 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_24A2A7D70();
  __break(1u);
  return result;
}

uint64_t sub_24A1DFDE0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    unint64_t v6 = a4 + 48 * a1 + 32;
    unint64_t v7 = a3 + 48 * v5;
    if (v6 >= v7 || v6 + 48 * v5 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  uint64_t result = sub_24A2A7D70();
  __break(1u);
  return result;
}

uint64_t sub_24A1DFEEC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_24A2A7D70();
  __break(1u);
  return result;
}

uint64_t sub_24A1DFFE4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_24A2A7D70();
  __break(1u);
  return result;
}

uint64_t sub_24A1E00D8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_24A2A7D70();
  __break(1u);
  return result;
}

uint64_t sub_24A1E01CC()
{
  return swift_release();
}

uint64_t sub_24A1E01D8()
{
  uint64_t v0 = sub_24A2A74F0();
  __swift_allocate_value_buffer(v0, qword_26B174840);
  __swift_project_value_buffer(v0, (uint64_t)qword_26B174840);
  return sub_24A2A74E0();
}

uint64_t static ProvisioningCertificate.ChassisID.objectIdentifier.getter@<X0>(uint64_t a1@<X8>)
{
  if (qword_26B174858 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_24A2A74F0();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_26B174840);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, v3, v2);
}

uint64_t ProvisioningCertificate.ChassisID.string.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ProvisioningCertificate.ChassisID.init(extensionValue:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = sub_24A2A7470();
  uint64_t v8 = sub_24A1B9578(v4, v5, v6, v7);
  unint64_t v10 = v9;
  swift_unknownObjectRelease();
  uint64_t v11 = sub_24A2A7860();
  MEMORY[0x270FA5388](v11 - 8);
  sub_24A2A7850();
  uint64_t v12 = sub_24A2A7820();
  uint64_t v14 = v13;
  sub_24A1A5384((uint64_t)v8, v10);
  if (v14)
  {
    uint64_t v15 = sub_24A2A7480();
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(a1, v15);
    *a2 = v12;
    a2[1] = v14;
  }
  else
  {
    sub_24A2A7580();
    sub_24A1E0C7C();
    swift_allocError();
    sub_24A2A7570();
    swift_willThrow();
    uint64_t v17 = sub_24A2A7480();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(a1, v17);
  }
  return result;
}

uint64_t ProvisioningCertificate.ChassisID.init<A>(extensionValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v37 = a3;
  uint64_t v42 = sub_24A2A7580();
  uint64_t v38 = *(void *)(v42 - 8);
  MEMORY[0x270FA5388](v42);
  uint64_t v41 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_24A2A7440();
  uint64_t v7 = MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](v7);
  unint64_t v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_24A2A7480();
  uint64_t v40 = *(void *)(v11 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v11);
  uint64_t v39 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v37 - v14;
  uint64_t v43 = v8;
  uint64_t v44 = a1;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, a2);
  uint64_t v45 = a2;
  sub_24A2A7BC0();
  sub_24A2A7600();
  unint64_t v16 = v46;
  sub_24A2A7620();
  if (v16)
  {
    uint64_t v17 = v16;
    uint64_t v18 = v42;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v39, v15, v11);
    uint64_t v22 = sub_24A2A7470();
    uint64_t v26 = sub_24A1B9578(v22, v23, v24, v25);
    unint64_t v28 = v27;
    swift_unknownObjectRelease();
    uint64_t v29 = sub_24A2A7860();
    MEMORY[0x270FA5388](v29 - 8);
    sub_24A2A7850();
    uint64_t v30 = sub_24A2A7820();
    uint64_t v32 = v31;
    sub_24A1A5384((uint64_t)v26, v28);
    if (v32)
    {
      uint64_t v33 = *(void (**)(char *, uint64_t))(v40 + 8);
      v33(v39, v11);
      (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v44, v45);
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v33)(v15, v11);
      uint64_t v35 = v37;
      *uint64_t v37 = v30;
      v35[1] = v32;
      return result;
    }
    sub_24A1E0C7C();
    uint64_t v18 = v42;
    uint64_t v17 = (void *)swift_allocError();
    sub_24A2A7570();
    swift_willThrow();
    int64_t v36 = *(void (**)(char *, uint64_t))(v40 + 8);
    v36(v39, v11);
    v36(v15, v11);
  }
  uint64_t v47 = v17;
  id v19 = v17;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697789C0);
  unint64_t v20 = v41;
  if (swift_dynamicCast())
  {
    (*(void (**)(char *, uint64_t))(v38 + 8))(v20, v18);
    uint64_t v47 = v17;
    sub_24A1E0C7C();
    swift_allocError();
    id v21 = v17;
    swift_dynamicCast();
  }
  else
  {
    swift_getErrorValue();
    sub_24A2A7EB0();
    sub_24A1E0C7C();
    swift_allocError();
    sub_24A2A7560();
    swift_bridgeObjectRelease();
  }
  swift_willThrow();

  return (*(uint64_t (**)(uint64_t, uint64_t))(v43 + 8))(v44, v45);
}

uint64_t ProvisioningCertificate.ChassisID.hash(into:)()
{
  swift_bridgeObjectRetain();
  sub_24A2A78A0();

  return swift_bridgeObjectRelease();
}

uint64_t static ProvisioningCertificate.ChassisID.== infix(_:_:)(void *a1, void *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1]) {
    return 1;
  }
  else {
    return sub_24A2A7E40();
  }
}

uint64_t ProvisioningCertificate.ChassisID.hashValue.getter()
{
  return sub_24A2A7F50();
}

uint64_t sub_24A1E0B40()
{
  return sub_24A2A7F50();
}

uint64_t sub_24A1E0B9C()
{
  swift_bridgeObjectRetain();
  sub_24A2A78A0();

  return swift_bridgeObjectRelease();
}

uint64_t sub_24A1E0BF4()
{
  return sub_24A2A7F50();
}

uint64_t sub_24A1E0C4C(void *a1, void *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1]) {
    return 1;
  }
  else {
    return sub_24A2A7E40();
  }
}

unint64_t sub_24A1E0C7C()
{
  unint64_t result = qword_2697789C8;
  if (!qword_2697789C8)
  {
    sub_24A2A7580();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2697789C8);
  }
  return result;
}

unint64_t sub_24A1E0CD8()
{
  unint64_t result = qword_269778DD0;
  if (!qword_269778DD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269778DD0);
  }
  return result;
}

ValueMetadata *type metadata accessor for ProvisioningCertificate.ChassisID()
{
  return &type metadata for ProvisioningCertificate.ChassisID;
}

uint64_t sub_24A1E0D3C(uint64_t a1)
{
  uint64_t v2 = sub_24A2A7480();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)&v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v61 - v7;
  int64_t v9 = *(void *)(a1 + 16);
  uint64_t v75 = MEMORY[0x263F8EE78];
  sub_24A245A10(0, v9, 0);
  uint64_t v10 = *(void *)(a1 + 56);
  uint64_t v11 = v75;
  uint64_t v67 = a1 + 56;
  uint64_t v68 = v2;
  uint64_t v12 = -1;
  uint64_t v13 = -1 << *(unsigned char *)(a1 + 32);
  if (-v13 < 64) {
    uint64_t v12 = ~(-1 << -(char)v13);
  }
  unint64_t v14 = v12 & v10;
  int64_t v69 = (unint64_t)(63 - v13) >> 6;
  uint64_t v65 = v3;
  int v66 = v8;
  int64_t v64 = v9;
  uint64_t v71 = a1;
  if (v9)
  {
    uint64_t v63 = v3 + 32;
    swift_bridgeObjectRetain();
    uint64_t v15 = 0;
    int64_t v9 = 0;
    uint64_t v16 = v3;
    uint64_t v62 = v6;
    while (1)
    {
      uint64_t v73 = v11;
      if (v14)
      {
        unint64_t v17 = __clz(__rbit64(v14));
        v14 &= v14 - 1;
        unint64_t v18 = v17 | (v9 << 6);
      }
      else
      {
        int64_t v19 = v9 + 1;
        if (__OFADD__(v9, 1)) {
          goto LABEL_79;
        }
        if (v19 >= v69) {
          goto LABEL_80;
        }
        unint64_t v20 = *(void *)(v67 + 8 * v19);
        ++v9;
        if (!v20)
        {
          int64_t v9 = v19 + 1;
          if (v19 + 1 >= v69) {
            goto LABEL_83;
          }
          unint64_t v20 = *(void *)(v67 + 8 * v9);
          if (!v20)
          {
            int64_t v9 = v19 + 2;
            if (v19 + 2 >= v69) {
              goto LABEL_87;
            }
            unint64_t v20 = *(void *)(v67 + 8 * v9);
            if (!v20)
            {
              int64_t v9 = v19 + 3;
              if (v19 + 3 >= v69) {
                goto LABEL_88;
              }
              unint64_t v20 = *(void *)(v67 + 8 * v9);
              if (!v20)
              {
                int64_t v21 = v19 + 4;
                if (v21 >= v69) {
                  goto LABEL_89;
                }
                unint64_t v20 = *(void *)(v67 + 8 * v21);
                if (!v20)
                {
                  while (1)
                  {
                    int64_t v9 = v21 + 1;
                    if (__OFADD__(v21, 1)) {
                      goto LABEL_85;
                    }
                    if (v9 >= v69) {
                      goto LABEL_86;
                    }
                    unint64_t v20 = *(void *)(v67 + 8 * v9);
                    ++v21;
                    if (v20) {
                      goto LABEL_22;
                    }
                  }
                }
                int64_t v9 = v21;
              }
            }
          }
        }
LABEL_22:
        unint64_t v14 = (v20 - 1) & v20;
        unint64_t v18 = __clz(__rbit64(v20)) + (v9 << 6);
      }
      uint64_t v72 = v15 + 1;
      uint64_t v22 = (uint64_t *)(*(void *)(v71 + 48) + 16 * v18);
      uint64_t v23 = *v22;
      unint64_t v24 = v22[1];
      switch(v24 >> 62)
      {
        case 1uLL:
          if (__OFSUB__(HIDWORD(v23), v23)) {
            goto LABEL_81;
          }
          unint64_t v25 = v14;
          uint64_t v26 = HIDWORD(v23) - (int)v23;
LABEL_29:
          sub_24A1A52B0(v23, v24);
          if (v26)
          {
LABEL_30:
            int64_t v74 = v9;
            uint64_t v70 = v23;
            if (v26 >= 1)
            {
              __swift_instantiateConcreteTypeFromMangledName(&qword_26B174B98);
              uint64_t v29 = (void *)swift_allocObject();
              size_t v30 = _swift_stdlib_malloc_size(v29);
              v29[2] = v26;
              v29[3] = 2 * v30 - 64;
            }
            uint64_t v31 = sub_24A2A6B00();
            uint64_t v32 = *(void *)(v31 - 8);
            MEMORY[0x270FA5388](v31);
            int64_t v34 = (char *)&v61 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
            uint64_t v35 = sub_24A2A6A20();
            (*(void (**)(char *, uint64_t))(v32 + 8))(v34, v31);
            if (v35 != v26) {
              goto LABEL_78;
            }
            uint64_t v16 = v65;
            int64_t v9 = v74;
            unint64_t v14 = v25;
            uint64_t v6 = v62;
            uint64_t v23 = v70;
          }
          else
          {
LABEL_25:
            unint64_t v14 = v25;
          }
LABEL_34:
          sub_24A2A7450();
          sub_24A1A5384(v23, v24);
          uint64_t v11 = v73;
          uint64_t v75 = v73;
          int64_t v36 = v6;
          unint64_t v38 = *(void *)(v73 + 16);
          unint64_t v37 = *(void *)(v73 + 24);
          if (v38 >= v37 >> 1)
          {
            sub_24A245A10(v37 > 1, v38 + 1, 1);
            uint64_t v16 = v65;
            uint64_t v11 = v75;
          }
          *(void *)(v11 + 16) = v38 + 1;
          (*(void (**)(unint64_t, char *, uint64_t))(v16 + 32))(v11+ ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80))+ *(void *)(v16 + 72) * v38, v36, v68);
          a1 = v71;
          uint64_t v15 = v72;
          uint64_t v8 = v66;
          uint64_t v6 = v36;
          if (v72 == v64) {
            goto LABEL_39;
          }
          break;
        case 2uLL:
          unint64_t v25 = v14;
          uint64_t v28 = *(void *)(v23 + 16);
          uint64_t v27 = *(void *)(v23 + 24);
          uint64_t v26 = v27 - v28;
          if (!__OFSUB__(v27, v28)) {
            goto LABEL_29;
          }
          goto LABEL_82;
        case 3uLL:
          goto LABEL_34;
        default:
          unint64_t v25 = v14;
          uint64_t v26 = BYTE6(v24);
          if (!BYTE6(v24)) {
            goto LABEL_25;
          }
          goto LABEL_30;
      }
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v16 = v3;
LABEL_39:
  uint64_t v70 = v16 + 32;
  uint64_t v39 = v68;
  if (!v14) {
    goto LABEL_41;
  }
  while (2)
  {
    uint64_t v72 = (v14 - 1) & v14;
    int64_t v74 = v9;
    unint64_t v40 = __clz(__rbit64(v14)) | (v9 << 6);
LABEL_57:
    uint64_t v45 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v40);
    uint64_t v47 = *v45;
    unint64_t v46 = v45[1];
    switch(v46 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(v47), v47)) {
          goto LABEL_76;
        }
        uint64_t v73 = v11;
        uint64_t v48 = HIDWORD(v47) - (int)v47;
LABEL_63:
        sub_24A1A52B0(v47, v46);
        if (!v48) {
          goto LABEL_68;
        }
LABEL_64:
        if (v48 >= 1)
        {
          __swift_instantiateConcreteTypeFromMangledName(&qword_26B174B98);
          uint64_t v51 = (void *)swift_allocObject();
          size_t v52 = _swift_stdlib_malloc_size(v51);
          v51[2] = v48;
          v51[3] = 2 * v52 - 64;
        }
        uint64_t v53 = sub_24A2A6B00();
        uint64_t v54 = *(void *)(v53 - 8);
        MEMORY[0x270FA5388](v53);
        os_log_type_t v56 = (char *)&v61 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
        uint64_t v57 = sub_24A2A6A20();
        (*(void (**)(char *, uint64_t))(v54 + 8))(v56, v53);
        if (v57 != v48)
        {
          __break(1u);
LABEL_75:
          __break(1u);
LABEL_76:
          __break(1u);
LABEL_77:
          __break(1u);
LABEL_78:
          __break(1u);
LABEL_79:
          __break(1u);
LABEL_80:
          __break(1u);
LABEL_81:
          __break(1u);
LABEL_82:
          __break(1u);
LABEL_83:
          __break(1u);
          goto LABEL_84;
        }
        a1 = v71;
        uint64_t v39 = v68;
        uint64_t v16 = v65;
        uint64_t v8 = v66;
LABEL_68:
        uint64_t v11 = v73;
LABEL_69:
        sub_24A2A7450();
        sub_24A1A5384(v47, v46);
        uint64_t v75 = v11;
        unint64_t v59 = *(void *)(v11 + 16);
        unint64_t v58 = *(void *)(v11 + 24);
        if (v59 >= v58 >> 1)
        {
          sub_24A245A10(v58 > 1, v59 + 1, 1);
          uint64_t v16 = v65;
          uint64_t v11 = v75;
        }
        *(void *)(v11 + 16) = v59 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v16 + 32))(v11+ ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80))+ *(void *)(v16 + 72) * v59, v8, v39);
        int64_t v9 = v74;
        unint64_t v14 = v72;
        if (v72) {
          continue;
        }
LABEL_41:
        int64_t v41 = v9 + 1;
        if (__OFADD__(v9, 1)) {
          goto LABEL_75;
        }
        if (v41 < v69)
        {
          unint64_t v42 = *(void *)(v67 + 8 * v41);
          int64_t v43 = v9 + 1;
          if (!v42)
          {
            int64_t v43 = v9 + 2;
            if (v9 + 2 >= v69) {
              goto LABEL_73;
            }
            unint64_t v42 = *(void *)(v67 + 8 * v43);
            if (!v42)
            {
              int64_t v43 = v9 + 3;
              if (v9 + 3 >= v69) {
                goto LABEL_73;
              }
              unint64_t v42 = *(void *)(v67 + 8 * v43);
              if (!v42)
              {
                int64_t v43 = v9 + 4;
                if (v9 + 4 >= v69) {
                  goto LABEL_73;
                }
                unint64_t v42 = *(void *)(v67 + 8 * v43);
                if (!v42)
                {
                  int64_t v44 = v9 + 5;
                  if (v9 + 5 >= v69) {
                    goto LABEL_73;
                  }
                  unint64_t v42 = *(void *)(v67 + 8 * v44);
                  if (v42)
                  {
                    int64_t v43 = v9 + 5;
                    goto LABEL_56;
                  }
                  while (1)
                  {
                    int64_t v43 = v44 + 1;
                    if (__OFADD__(v44, 1)) {
                      break;
                    }
                    if (v43 >= v69) {
                      goto LABEL_73;
                    }
                    unint64_t v42 = *(void *)(v67 + 8 * v43);
                    ++v44;
                    if (v42) {
                      goto LABEL_56;
                    }
                  }
LABEL_84:
                  __break(1u);
LABEL_85:
                  __break(1u);
LABEL_86:
                  __break(1u);
LABEL_87:
                  __break(1u);
LABEL_88:
                  __break(1u);
LABEL_89:
                  __break(1u);
                  JUMPOUT(0x24A1E15A0);
                }
              }
            }
          }
LABEL_56:
          uint64_t v72 = (v42 - 1) & v42;
          int64_t v74 = v43;
          unint64_t v40 = __clz(__rbit64(v42)) + (v43 << 6);
          goto LABEL_57;
        }
LABEL_73:
        swift_release();
        return v11;
      case 2uLL:
        uint64_t v73 = v11;
        uint64_t v50 = *(void *)(v47 + 16);
        uint64_t v49 = *(void *)(v47 + 24);
        uint64_t v48 = v49 - v50;
        if (!__OFSUB__(v49, v50)) {
          goto LABEL_63;
        }
        goto LABEL_77;
      case 3uLL:
        goto LABEL_69;
      default:
        uint64_t v73 = v11;
        uint64_t v48 = BYTE6(v46);
        if (!BYTE6(v46)) {
          goto LABEL_68;
        }
        goto LABEL_64;
    }
  }
}

uint64_t sub_24A1E15C0()
{
  uint64_t v0 = sub_24A2A7360();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24A1EA074(&qword_26B174A10, MEMORY[0x263F047F8]);
  sub_24A2A71A0();
  uint64_t result = sub_24A2A7BB0();
  if (__OFSUB__(v5 >> 1, v6))
  {
    __break(1u);
  }
  else
  {
    sub_24A2A7170();
    swift_unknownObjectRelease();
    sub_24A2A7180();
    return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  }
  return result;
}

uint64_t Release.digest<A>(using:)()
{
  uint64_t v0 = sub_24A2A76A0();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24A2A7690();
  type metadata accessor for Release();
  sub_24A1EA074(&qword_26B1748F8, (void (*)(uint64_t))type metadata accessor for Release);
  sub_24A2A7680();
  uint64_t v4 = sub_24A2A7660();
  uint64_t v5 = sub_24A1B9574(v4);
  unint64_t v7 = v6;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  v9[1] = v5;
  v9[2] = v7;
  sub_24A1B802C();
  sub_24A2A7190();
  return sub_24A1A5384(v5, v7);
}

uint64_t Release.init(bundle:evaluateTrust:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for Proto_AttestationBundle(0);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24A1E9ED8(a1, (uint64_t)v8, type metadata accessor for Proto_AttestationBundle);
  sub_24A1E33F4((uint64_t)v8, a2, 0, a3);
  return sub_24A1EA104(a1, type metadata accessor for AttestationBundle);
}

uint64_t Release.jsonString.getter()
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  sub_24A2A68A0();
  swift_allocObject();
  sub_24A2A6890();
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B174B40);
  sub_24A2A6860();
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_24A2A8AA0;
  sub_24A2A6850();
  uint64_t v1 = sub_24A2A6840();
  MEMORY[0x270FA5388](v1);
  v19[0] = v0;
  sub_24A1E9E90(&qword_26B1741F0, MEMORY[0x270FA7DD0]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B174A70);
  sub_24A1B9860(&qword_26B174A78, &qword_26B174A70);
  sub_24A2A7C10();
  sub_24A2A6870();
  type metadata accessor for Release();
  sub_24A1EA074(&qword_26B174908, (void (*)(uint64_t))type metadata accessor for Release);
  uint64_t v2 = sub_24A2A6880();
  unint64_t v7 = v3;
  uint64_t v8 = v2;
  switch(v3 >> 62)
  {
    case 1uLL:
      if (v2 >> 32 < (int)v2) {
        __break(1u);
      }
      swift_retain();
      uint64_t v5 = sub_24A1E7C58((int)v8, v8 >> 32, v7 & 0x3FFFFFFFFFFFFFFFLL, (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_24A1E8FB8);
      uint64_t v10 = v9;
      sub_24A1A5384(v8, v7);
      if (v10) {
        goto LABEL_5;
      }
      goto LABEL_13;
    case 2uLL:
      uint64_t v11 = *(void *)(v2 + 16);
      uint64_t v12 = *(void *)(v2 + 24);
      swift_retain();
      swift_retain();
      uint64_t v5 = sub_24A1E7C58(v11, v12, v7 & 0x3FFFFFFFFFFFFFFFLL, (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_24A1E8FB8);
      uint64_t v14 = v13;
      swift_release();
      swift_release();
      if (v14) {
        goto LABEL_5;
      }
LABEL_13:
      uint64_t v17 = v8;
      unint64_t v18 = v7;
      sub_24A1A52B0(v8, v7);
      __swift_instantiateConcreteTypeFromMangledName(&qword_269778DD8);
      if (swift_dynamicCast())
      {
        sub_24A1B97D8(v15, (uint64_t)v19);
        __swift_project_boxed_opaque_existential_1(v19, v20);
        if (sub_24A2A7D90())
        {
          __swift_project_boxed_opaque_existential_1(v19, v20);
          sub_24A2A7D80();
          sub_24A1A5384(v8, v7);
          uint64_t v5 = *(void *)&v15[0];
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
          goto LABEL_6;
        }
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
      }
      else
      {
        uint64_t v16 = 0;
        memset(v15, 0, sizeof(v15));
        sub_24A1E8FF0((uint64_t)v15);
      }
      uint64_t v4 = sub_24A1E7BA4(v8, v7);
LABEL_4:
      uint64_t v5 = v4;
LABEL_5:
      sub_24A1A5384(v8, v7);
LABEL_6:
      swift_release();
      return v5;
    case 3uLL:
      memset(v19, 0, 14);
      goto LABEL_3;
    default:
      v19[0] = v2;
      LOWORD(v19[1]) = v3;
      BYTE2(v19[1]) = BYTE2(v3);
      BYTE3(v19[1]) = BYTE3(v3);
      BYTE4(v19[1]) = BYTE4(v3);
      BYTE5(v19[1]) = BYTE5(v3);
LABEL_3:
      uint64_t v4 = sub_24A2A7880();
      goto LABEL_4;
  }
}

uint64_t Release.version.getter()
{
  return 1;
}

uint64_t Release.apTicket.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_24A2A7480();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t Release.cryptexTickets.getter()
{
  type metadata accessor for Release();

  return swift_bridgeObjectRetain();
}

uint64_t sub_24A1E1F80@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = sub_24A2A7480();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  int64_t v64 = (char *)&v53 - v13;
  uint64_t v54 = a1;
  unint64_t v55 = a2;
  sub_24A1E8DEC(a1, a2);
  uint64_t v56 = a4;
  sub_24A2A7450();
  int64_t v14 = *(void *)(a3 + 16);
  uint64_t v66 = MEMORY[0x263F8EE78];
  sub_24A245A10(0, v14, 0);
  uint64_t v59 = a3;
  uint64_t v60 = v9;
  uint64_t v61 = v8;
  unint64_t v57 = v14;
  if (v14)
  {
    uint64_t v15 = *(void *)(a3 + 16);
    uint64_t v62 = v9 + 32;
    swift_bridgeObjectRetain();
    uint64_t v16 = (unint64_t *)(a3 + 40);
    unint64_t v58 = v12;
    while (2)
    {
      if (v15)
      {
        uint64_t v17 = *(v16 - 1);
        unint64_t v18 = *v16;
        unint64_t v19 = *v16 >> 62;
        uint64_t v65 = (unint64_t *)v14;
        switch(v19)
        {
          case 1uLL:
            if (__OFSUB__(HIDWORD(v17), v17)) {
              goto LABEL_48;
            }
            uint64_t v63 = v15;
            uint64_t v20 = HIDWORD(v17) - (int)v17;
LABEL_10:
            sub_24A1A52B0(v17, v18);
            sub_24A1A52B0(v17, v18);
            if (v20)
            {
LABEL_11:
              if (v20 >= 1)
              {
                __swift_instantiateConcreteTypeFromMangledName(&qword_26B174B98);
                uint64_t v23 = (void *)swift_allocObject();
                size_t v24 = _swift_stdlib_malloc_size(v23);
                void v23[2] = v20;
                uint64_t v23[3] = 2 * v24 - 64;
              }
              uint64_t v25 = sub_24A2A6B00();
              uint64_t v26 = *(void *)(v25 - 8);
              MEMORY[0x270FA5388](v25);
              uint64_t v28 = (char *)&v53 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
              uint64_t v29 = sub_24A2A6A20();
              (*(void (**)(char *, uint64_t))(v26 + 8))(v28, v25);
              if (v29 != v20) {
                goto LABEL_46;
              }
              sub_24A1A5384(v17, v18);
              a3 = v59;
              uint64_t v9 = v60;
              uint64_t v8 = v61;
              uint64_t v12 = v58;
            }
            else
            {
LABEL_6:
              sub_24A1A5384(v17, v18);
            }
            uint64_t v15 = v63;
LABEL_17:
            sub_24A2A7450();
            sub_24A1A5384(v17, v18);
            uint64_t v30 = v66;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              sub_24A245A10(0, *(void *)(v30 + 16) + 1, 1);
              uint64_t v30 = v66;
            }
            unint64_t v32 = *(void *)(v30 + 16);
            unint64_t v31 = *(void *)(v30 + 24);
            if (v32 >= v31 >> 1)
            {
              sub_24A245A10(v31 > 1, v32 + 1, 1);
              uint64_t v30 = v66;
            }
            *(void *)(v30 + 16) = v32 + 1;
            (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v30+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(void *)(v9 + 72) * v32, v12, v8);
            uint64_t v66 = v30;
            v16 += 2;
            --v15;
            int64_t v14 = (int64_t)v65 - 1;
            if (v65 == (unint64_t *)1) {
              goto LABEL_24;
            }
            continue;
          case 2uLL:
            uint64_t v63 = v15;
            uint64_t v22 = *(void *)(v17 + 16);
            uint64_t v21 = *(void *)(v17 + 24);
            uint64_t v20 = v21 - v22;
            if (!__OFSUB__(v21, v22)) {
              goto LABEL_10;
            }
            goto LABEL_49;
          case 3uLL:
            sub_24A1A5384(v17, v18);
            goto LABEL_17;
          default:
            uint64_t v63 = v15;
            uint64_t v20 = BYTE6(v18);
            if (!BYTE6(v18)) {
              goto LABEL_6;
            }
            goto LABEL_11;
        }
      }
      break;
    }
    __break(1u);
LABEL_46:
    __break(1u);
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
LABEL_52:
    __break(1u);
    JUMPOUT(0x24A1E2670);
  }
  uint64_t v30 = v66;
  swift_bridgeObjectRetain();
LABEL_24:
  unint64_t v33 = *(void *)(a3 + 16);
  uint64_t v34 = v33 - v57;
  if (v33 != v57)
  {
    if (v33 > v57)
    {
      unint64_t v37 = (unint64_t *)(v59 + 16 * v57 + 40);
      uint64_t v63 = v9 + 32;
      while (2)
      {
        uint64_t v38 = *(v37 - 1);
        unint64_t v39 = *v37;
        unint64_t v40 = *v37 >> 62;
        v37 += 2;
        switch(v40)
        {
          case 1uLL:
            if (__OFSUB__(HIDWORD(v38), v38)) {
              goto LABEL_50;
            }
            uint64_t v41 = HIDWORD(v38) - (int)v38;
LABEL_34:
            sub_24A1A52B0(v38, v39);
            if (!v41) {
              goto LABEL_39;
            }
LABEL_35:
            uint64_t v65 = v37;
            if (v41 >= 1)
            {
              __swift_instantiateConcreteTypeFromMangledName(&qword_26B174B98);
              int64_t v44 = (void *)swift_allocObject();
              size_t v45 = _swift_stdlib_malloc_size(v44);
              v44[2] = v41;
              _OWORD v44[3] = 2 * v45 - 64;
            }
            uint64_t v46 = sub_24A2A6B00();
            uint64_t v47 = *(void *)(v46 - 8);
            MEMORY[0x270FA5388](v46);
            uint64_t v49 = (char *)&v53 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
            uint64_t v50 = sub_24A2A6A20();
            (*(void (**)(char *, uint64_t))(v47 + 8))(v49, v46);
            if (v50 != v41) {
              goto LABEL_47;
            }
            uint64_t v9 = v60;
            uint64_t v8 = v61;
            unint64_t v37 = v65;
LABEL_39:
            sub_24A2A7450();
            sub_24A1A5384(v38, v39);
            uint64_t v30 = v66;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              sub_24A245A10(0, *(void *)(v30 + 16) + 1, 1);
              uint64_t v30 = v66;
            }
            unint64_t v52 = *(void *)(v30 + 16);
            unint64_t v51 = *(void *)(v30 + 24);
            if (v52 >= v51 >> 1)
            {
              sub_24A245A10(v51 > 1, v52 + 1, 1);
              uint64_t v30 = v66;
            }
            *(void *)(v30 + 16) = v52 + 1;
            (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v30+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(void *)(v9 + 72) * v52, v64, v8);
            uint64_t v66 = v30;
            if (!--v34) {
              goto LABEL_25;
            }
            continue;
          case 2uLL:
            uint64_t v43 = *(void *)(v38 + 16);
            uint64_t v42 = *(void *)(v38 + 24);
            uint64_t v41 = v42 - v43;
            if (!__OFSUB__(v42, v43)) {
              goto LABEL_34;
            }
            goto LABEL_51;
          case 3uLL:
            goto LABEL_39;
          default:
            uint64_t v41 = BYTE6(v39);
            if (!BYTE6(v39)) {
              goto LABEL_39;
            }
            goto LABEL_35;
        }
      }
    }
    goto LABEL_52;
  }
LABEL_25:
  swift_bridgeObjectRelease();
  uint64_t v35 = sub_24A1E90EC(v30);
  swift_release();
  sub_24A1A5384(v54, v55);
  swift_bridgeObjectRelease();
  uint64_t result = type metadata accessor for Release();
  *(void *)(v56 + *(int *)(result + 20)) = v35;
  return result;
}

uint64_t Release.init<A>(apTicket:cryptexTickets:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  sub_24A1E8DEC(a1, a2);
  sub_24A2A7450();
  uint64_t v12 = (char *)sub_24A2A7480();
  uint64_t v14 = sub_24A1B67EC((void (*)(char *, char *))sub_24A1E27A8, 0, a4, v12, MEMORY[0x263F8E628], a5, MEMORY[0x263F8E658], v13);
  uint64_t v15 = sub_24A1E90EC(v14);
  swift_bridgeObjectRelease();
  sub_24A1A5384(a1, a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a4 - 8) + 8))(a3, a4);
  uint64_t result = type metadata accessor for Release();
  *(void *)(a6 + *(int *)(result + 20)) = v15;
  return result;
}

uint64_t sub_24A1E27A8(uint64_t *a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = a1[1];
  sub_24A1A52B0(*a1, v2);
  sub_24A1E8DEC(v1, v2);
  sub_24A1A5384(v1, v2);
  return sub_24A2A7450();
}

uint64_t Release.init<A>(apTicket:cryptexTickets:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_24A2A7480();
  uint64_t v12 = *(void *)(v11 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(a4, a1, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a2, a3);
  sub_24A1EA074(&qword_26B174A28, MEMORY[0x263F7BF30]);
  uint64_t v13 = sub_24A2A7AE0();
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a2, a3);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, v11);
  uint64_t result = type metadata accessor for Release();
  *(void *)(a4 + *(int *)(result + 20)) = v13;
  return result;
}

uint64_t sub_24A1E29F4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  unint64_t v5 = *(void *)(a3 + 16);
  uint64_t v30 = MEMORY[0x263F8EE78];
  sub_24A2459B0(0, v5, 0);
  if (v5)
  {
    uint64_t v6 = *(void *)(a3 + 16);
    uint64_t result = swift_bridgeObjectRetain();
    unint64_t v8 = 0;
    uint64_t v9 = (unsigned __int8 *)(a3 + 48);
    while (v6 != v8)
    {
      if (v8 >= *(void *)(a3 + 16))
      {
        __break(1u);
        goto LABEL_20;
      }
      int v10 = *v9;
      uint64_t v12 = *((void *)v9 - 2);
      unint64_t v11 = *((void *)v9 - 1);
      uint64_t result = sub_24A1A52B0(v12, v11);
      if (v10 == 4) {
        goto LABEL_21;
      }
      unint64_t v14 = *(void *)(v30 + 16);
      unint64_t v13 = *(void *)(v30 + 24);
      if (v14 >= v13 >> 1) {
        uint64_t result = sub_24A2459B0(v13 > 1, v14 + 1, 1);
      }
      ++v8;
      *(void *)(v30 + 16) = v14 + 1;
      uint64_t v15 = v30 + 16 * v14;
      *(void *)(v15 + 32) = v12;
      *(void *)(v15 + 40) = v11;
      v9 += 24;
      if (v5 == v8) {
        goto LABEL_11;
      }
    }
    goto LABEL_21;
  }
  uint64_t result = swift_bridgeObjectRetain();
LABEL_11:
  unint64_t v16 = *(void *)(a3 + 16);
  uint64_t v17 = v16 - v5;
  if (v16 == v5)
  {
LABEL_12:
    swift_bridgeObjectRelease();
    uint64_t v18 = sub_24A1E9050(v30);
    swift_release();
    sub_24A1E8DEC(a1, a2);
    sub_24A2A7450();
    uint64_t v19 = sub_24A1E0D3C(v18);
    uint64_t v20 = sub_24A1E90EC(v19);
    swift_bridgeObjectRelease();
    sub_24A1A5384(a1, a2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = type metadata accessor for Release();
    *(void *)(a4 + *(int *)(result + 20)) = v20;
    return result;
  }
  if (v16 > v5)
  {
    uint64_t v21 = (unint64_t *)(a3 + 24 * v5 + 40);
    do
    {
      uint64_t v22 = *(v21 - 1);
      unint64_t v23 = *v21;
      sub_24A1A52B0(v22, *v21);
      unint64_t v25 = *(void *)(v30 + 16);
      unint64_t v24 = *(void *)(v30 + 24);
      if (v25 >= v24 >> 1) {
        sub_24A2459B0(v24 > 1, v25 + 1, 1);
      }
      v21 += 3;
      *(void *)(v30 + 16) = v25 + 1;
      uint64_t v26 = v30 + 16 * v25;
      *(void *)(v26 + 32) = v22;
      *(void *)(v26 + 40) = v23;
      --v17;
    }
    while (v17);
    goto LABEL_12;
  }
LABEL_20:
  __break(1u);
LABEL_21:
  __break(1u);
  return result;
}

uint64_t Release.init<A>(apTicket:cryptexTickets:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X7>, uint64_t a6@<X8>)
{
  uint64_t v9 = *a1;
  unint64_t v10 = a1[1];
  uint64_t v11 = sub_24A1B67EC((void (*)(char *, char *))sub_24A1B67B8, 0, a3, MEMORY[0x263F06F70], MEMORY[0x263F8E628], a4, MEMORY[0x263F8E658], a5);
  uint64_t v12 = sub_24A1E9050(v11);
  swift_bridgeObjectRelease();
  sub_24A1E8DEC(v9, v10);
  sub_24A2A7450();
  uint64_t v13 = sub_24A1E0D3C(v12);
  uint64_t v14 = sub_24A1E90EC(v13);
  swift_bridgeObjectRelease();
  sub_24A1A5384(v9, v10);
  swift_bridgeObjectRelease();
  *(void *)(a6 + *(int *)(type metadata accessor for Release() + 20)) = v14;
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8))(a2, a3);
}

uint64_t Release.init(tickets:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2 = (void *)MEMORY[0x263F8EE80];
  uint64_t v50 = (void *)MEMORY[0x263F8EE80];
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_16:
    swift_bridgeObjectRelease();
    if (!v2[2] || (v32 = sub_24A1BE8F8(0), (v33 & 1) == 0) || (uint64_t v34 = *(void **)(v2[7] + 8 * v32), !v34[2]))
    {
      swift_release();
      sub_24A1E9288();
      swift_allocError();
      return swift_willThrow();
    }
    uint64_t v35 = v34[4];
    unint64_t v36 = v34[5];
    if (!v2[2])
    {
      uint64_t v39 = MEMORY[0x263F8EE78];
      uint64_t v41 = MEMORY[0x263F8EE78];
      goto LABEL_29;
    }
    unint64_t v37 = sub_24A1BE8F8(1u);
    if (v38)
    {
      uint64_t v39 = *(void *)(v2[7] + 8 * v37);
      swift_bridgeObjectRetain();
      if (!v2[2]) {
        goto LABEL_28;
      }
    }
    else
    {
      uint64_t v39 = MEMORY[0x263F8EE78];
      if (!v2[2]) {
        goto LABEL_28;
      }
    }
    unint64_t v42 = sub_24A1BE8F8(2u);
    if (v43)
    {
      uint64_t v41 = *(void *)(v2[7] + 8 * v42);
      swift_bridgeObjectRetain();
      goto LABEL_29;
    }
LABEL_28:
    uint64_t v41 = MEMORY[0x263F8EE78];
LABEL_29:
    sub_24A1A52B0(v35, v36);
    sub_24A1A52B0(v35, v36);
    sub_24A1E7A48(v41);
    if (v2[2] && (unint64_t v44 = sub_24A1BE8F8(3u), (v45 & 1) != 0))
    {
      uint64_t v46 = *(void *)(v2[7] + 8 * v44);
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v46 = MEMORY[0x263F8EE78];
    }
    swift_release();
    sub_24A1E7A48(v46);
    sub_24A1E29F4(v35, v36, v39, a2);
    return sub_24A1A5384(v35, v36);
  }
  uint64_t v4 = (unsigned __int8 *)(a1 + 48);
  while (1)
  {
    uint64_t v7 = *((void *)v4 - 2);
    unint64_t v6 = *((void *)v4 - 1);
    unsigned __int8 v8 = *v4;
    unint64_t v9 = sub_24A1BE8F8(*v4);
    uint64_t v11 = v2[2];
    BOOL v12 = (v10 & 1) == 0;
    uint64_t v13 = v11 + v12;
    if (__OFADD__(v11, v12)) {
      break;
    }
    unint64_t v14 = v9;
    char v15 = v10;
    uint64_t v49 = v3;
    unint64_t v16 = v2;
    uint64_t v17 = v2[3];
    sub_24A1A52B0(v7, v6);
    if (v17 < v13)
    {
      sub_24A1E6A9C(v13, 1);
      unint64_t v16 = v50;
      unint64_t v18 = sub_24A1BE8F8(v8);
      if ((v15 & 1) != (v19 & 1)) {
        goto LABEL_36;
      }
      unint64_t v14 = v18;
    }
    if (v15)
    {
      unint64_t v2 = v16;
      uint64_t v20 = v16[7];
      uint64_t v21 = *(void **)(v20 + 8 * v14);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(void *)(v20 + 8 * v14) = v21;
      uint64_t v48 = v20;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        uint64_t v21 = sub_24A1DF9BC(0, v21[2] + 1, 1, v21);
        *(void *)(v20 + 8 * v14) = v21;
      }
      uint64_t v23 = v49;
      unint64_t v25 = v21[2];
      unint64_t v24 = v21[3];
      unint64_t v26 = v25 + 1;
      if (v25 >= v24 >> 1)
      {
        uint64_t v27 = sub_24A1DF9BC((void *)(v24 > 1), v25 + 1, 1, v21);
        unint64_t v26 = v25 + 1;
        uint64_t v21 = v27;
        *(void *)(v48 + 8 * v14) = v27;
      }
      v21[2] = v26;
      unint64_t v5 = &v21[3 * v25];
      v5[4] = v7;
      v5[5] = v6;
      *((unsigned char *)v5 + 48) = v8;
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_26B174B60);
      uint64_t v28 = swift_allocObject();
      *(_OWORD *)(v28 + 16) = xmmword_24A2A8A60;
      *(void *)(v28 + 32) = v7;
      *(void *)(v28 + 40) = v6;
      *(unsigned char *)(v28 + 48) = v8;
      v16[(v14 >> 6) + 8] |= 1 << v14;
      *(unsigned char *)(v16[6] + v14) = v8;
      *(void *)(v16[7] + 8 * v14) = v28;
      uint64_t v29 = v16[2];
      BOOL v30 = __OFADD__(v29, 1);
      uint64_t v31 = v29 + 1;
      if (v30) {
        goto LABEL_35;
      }
      unint64_t v2 = v16;
      void v16[2] = v31;
      uint64_t v23 = v49;
    }
    v4 += 24;
    uint64_t v3 = v23 - 1;
    if (!v3) {
      goto LABEL_16;
    }
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  uint64_t result = sub_24A2A7E80();
  __break(1u);
  return result;
}

uint64_t Release.init<A>(serializedData:)(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = a1;
  uint64_t v4 = sub_24A2A7440();
  uint64_t v5 = MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](v5);
  unsigned __int8 v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Release();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, a2);
  sub_24A2A7BC0();
  _s16CloudAttestation7ReleaseV17defaultIdentifier9SwiftASN10gE0VvgZ_0();
  sub_24A1EA074(&qword_26B174900, (void (*)(uint64_t))type metadata accessor for Release);
  sub_24A2A7620();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v11, a2);
}

uint64_t Release.init(bundle:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Proto_AttestationBundle(0);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24A1E9ED8(a1, (uint64_t)v6, type metadata accessor for Proto_AttestationBundle);
  sub_24A1E33F4((uint64_t)v6, 1, 0, a2);
  return sub_24A1EA104(a1, type metadata accessor for AttestationBundle);
}

uint64_t sub_24A1E33F4@<X0>(uint64_t a1@<X0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v9 = *(void *)(a1 + 16);
  unint64_t v10 = *(void *)(a1 + 24);
  sub_24A1A52B0(v9, v10);
  uint64_t v11 = sub_24A1B52A8(v9, v10);
  unint64_t v13 = v12;
  uint64_t v41 = v11;
  unint64_t v42 = v12;
  char v43 = 0;
  Image4Manifest.canonicalize(evaluateTrust:)(a2);
  if (v4)
  {
    sub_24A1EA104(a1, type metadata accessor for Proto_AttestationBundle);
    return sub_24A1A5384(v41, v42);
  }
  else
  {
    sub_24A1A5384(v11, v13);
    unint64_t v37 = *((void *)&v44 + 1);
    uint64_t v15 = v44;
    sub_24A2491C4(a3 & 1, (uint64_t)&v39);
    char v16 = v40;
    if (v40 == 255)
    {
      uint64_t v22 = MEMORY[0x263F8EE78];
    }
    else
    {
      uint64_t v36 = v15;
      uint64_t v17 = v39;
      *(void *)&long long v44 = v39;
      BYTE8(v44) = v40 & 1;
      uint64_t v18 = sub_24A249438();
      char v19 = v16;
      uint64_t v20 = v18;
      sub_24A1EA164(v17, v19);
      int64_t v21 = *(void *)(v20 + 16);
      if (v21)
      {
        uint64_t v35 = a4;
        uint64_t v38 = MEMORY[0x263F8EE78];
        sub_24A2459B0(0, v21, 0);
        uint64_t v22 = v38;
        uint64_t v23 = (unsigned char *)(v20 + 48);
        char v24 = a2 & 1;
        do
        {
          uint64_t v25 = *((void *)v23 - 2);
          unint64_t v26 = *((void *)v23 - 1);
          char v27 = *v23;
          uint64_t v41 = v25;
          unint64_t v42 = v26;
          char v43 = v27;
          sub_24A1A52B0(v25, v26);
          Image4Manifest.canonicalize(evaluateTrust:)(v24);
          sub_24A1A5384(v25, v26);
          long long v28 = v44;
          unint64_t v30 = *(void *)(v38 + 16);
          unint64_t v29 = *(void *)(v38 + 24);
          if (v30 >= v29 >> 1)
          {
            long long v34 = v44;
            sub_24A2459B0(v29 > 1, v30 + 1, 1);
            long long v28 = v34;
          }
          v23 += 24;
          *(void *)(v38 + 16) = v30 + 1;
          *(_OWORD *)(v38 + 16 * v30 + 32) = v28;
          --v21;
        }
        while (v21);
        swift_bridgeObjectRelease();
        a4 = v35;
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v22 = MEMORY[0x263F8EE78];
      }
      uint64_t v15 = v36;
    }
    uint64_t v31 = sub_24A1E9050(v22);
    swift_bridgeObjectRelease();
    sub_24A1A52B0(v15, v37);
    sub_24A1E8DEC(v15, v37);
    sub_24A2A7450();
    uint64_t v32 = sub_24A1E0D3C(v31);
    uint64_t v33 = sub_24A1E90EC(v32);
    swift_bridgeObjectRelease();
    sub_24A1A5384(v15, v37);
    swift_bridgeObjectRelease();
    sub_24A1A5384(v15, v37);
    *(void *)(a4 + *(int *)(type metadata accessor for Release() + 20)) = v33;
    return sub_24A1EA104(a1, type metadata accessor for Proto_AttestationBundle);
  }
}

uint64_t Release.init(bundle:evaluateTrust:requireCryptex1:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for Proto_AttestationBundle(0);
  MEMORY[0x270FA5388](v8 - 8);
  unint64_t v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24A1E9ED8(a1, (uint64_t)v10, type metadata accessor for Proto_AttestationBundle);
  sub_24A1E33F4((uint64_t)v10, a2, a3, a4);
  return sub_24A1EA104(a1, type metadata accessor for AttestationBundle);
}

uint64_t Release.serializedData.getter()
{
  uint64_t v0 = sub_24A2A76A0();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24A2A7690();
  type metadata accessor for Release();
  sub_24A1EA074(&qword_26B1748F8, (void (*)(uint64_t))type metadata accessor for Release);
  sub_24A2A7680();
  uint64_t v4 = sub_24A2A7660();
  uint64_t v5 = sub_24A1B9574(v4);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v5;
}

uint64_t type metadata accessor for Release()
{
  uint64_t result = qword_26B174910;
  if (!qword_26B174910) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t Release.hash(into:)(long long *a1)
{
  sub_24A2A7480();
  sub_24A1EA074(&qword_26B174A28, MEMORY[0x263F7BF30]);
  sub_24A2A77A0();
  uint64_t v3 = *(void *)(v1 + *(int *)(type metadata accessor for Release() + 20));
  swift_bridgeObjectRetain();
  sub_24A1E87CC(a1, v3);

  return swift_bridgeObjectRelease();
}

uint64_t static Release.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((sub_24A2A7460() & 1) == 0) {
    return 0;
  }
  uint64_t v4 = *(int *)(type metadata accessor for Release() + 20);
  uint64_t v5 = *(void *)(a1 + v4);
  uint64_t v6 = *(void *)(a2 + v4);

  return sub_24A1E3AD4(v5, v6);
}

uint64_t sub_24A1E3AD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A2A7480();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x270FA5388](v6);
  char v45 = (char *)&v34 - v10;
  uint64_t result = MEMORY[0x270FA5388](v9);
  unint64_t v13 = (char *)&v34 - v12;
  if (a1 == a2) {
    return 1;
  }
  if (*(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v14 = 0;
  uint64_t v15 = *(void *)(a1 + 56);
  uint64_t v36 = a1;
  uint64_t v37 = a1 + 56;
  uint64_t v16 = 1 << *(unsigned char *)(a1 + 32);
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  else {
    uint64_t v17 = -1;
  }
  unint64_t v18 = v17 & v15;
  int64_t v38 = (unint64_t)(v16 + 63) >> 6;
  uint64_t v42 = v5 + 32;
  uint64_t v43 = a2 + 56;
  uint64_t v44 = v5 + 16;
  char v19 = (void (**)(char *, uint64_t))(v5 + 8);
  long long v34 = v13;
  uint64_t v35 = v5;
  if (!v18) {
    goto LABEL_9;
  }
LABEL_7:
  uint64_t v40 = (v18 - 1) & v18;
  int64_t v41 = v14;
  for (unint64_t i = __clz(__rbit64(v18)) | (v14 << 6); ; unint64_t i = __clz(__rbit64(v22)) + (v23 << 6))
  {
    uint64_t v25 = *(void *)(v5 + 72);
    unint64_t v26 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    v26(v13, *(void *)(a1 + 48) + v25 * i, v4);
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v45, v13, v4);
    sub_24A1EA074(&qword_26B174A28, MEMORY[0x263F7BF30]);
    uint64_t v27 = sub_24A2A7790();
    uint64_t v28 = -1 << *(unsigned char *)(a2 + 32);
    unint64_t v29 = v27 & ~v28;
    if (((*(void *)(v43 + ((v29 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v29) & 1) == 0)
    {
      (*v19)(v45, v4);
      return 0;
    }
    uint64_t v39 = (unint64_t)v19 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    uint64_t v30 = a2;
    uint64_t v31 = ~v28;
    while (1)
    {
      v26(v8, *(void *)(v30 + 48) + v29 * v25, v4);
      sub_24A1EA074(&qword_26B174A30, MEMORY[0x263F7BF30]);
      char v32 = sub_24A2A77E0();
      uint64_t v33 = *v19;
      (*v19)(v8, v4);
      if (v32) {
        break;
      }
      unint64_t v29 = (v29 + 1) & v31;
      if (((*(void *)(v43 + ((v29 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v29) & 1) == 0)
      {
        v33(v45, v4);
        return 0;
      }
    }
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v33)(v45, v4);
    a2 = v30;
    uint64_t v5 = v35;
    a1 = v36;
    unint64_t v13 = v34;
    unint64_t v18 = v40;
    int64_t v14 = v41;
    if (v40) {
      goto LABEL_7;
    }
LABEL_9:
    int64_t v21 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v21 >= v38) {
      return 1;
    }
    unint64_t v22 = *(void *)(v37 + 8 * v21);
    int64_t v23 = v14 + 1;
    if (!v22)
    {
      int64_t v23 = v14 + 2;
      if (v14 + 2 >= v38) {
        return 1;
      }
      unint64_t v22 = *(void *)(v37 + 8 * v23);
      if (!v22)
      {
        int64_t v23 = v14 + 3;
        if (v14 + 3 >= v38) {
          return 1;
        }
        unint64_t v22 = *(void *)(v37 + 8 * v23);
        if (!v22) {
          break;
        }
      }
    }
LABEL_22:
    uint64_t v40 = (v22 - 1) & v22;
    int64_t v41 = v23;
  }
  uint64_t v24 = v14 + 4;
  if (v14 + 4 >= v38) {
    return 1;
  }
  unint64_t v22 = *(void *)(v37 + 8 * v24);
  if (v22)
  {
    int64_t v23 = v14 + 4;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v23 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v23 >= v38) {
      return 1;
    }
    unint64_t v22 = *(void *)(v37 + 8 * v23);
    ++v24;
    if (v22) {
      goto LABEL_22;
    }
  }
LABEL_33:
  __break(1u);
  return result;
}

uint64_t Release.hashValue.getter()
{
  sub_24A2A7F10();
  sub_24A2A7480();
  sub_24A1EA074(&qword_26B174A28, MEMORY[0x263F7BF30]);
  sub_24A2A77A0();
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Release() + 20));
  swift_bridgeObjectRetain();
  sub_24A1E87CC(v3, v1);
  swift_bridgeObjectRelease();
  return sub_24A2A7F50();
}

uint64_t sub_24A1E3FB0(uint64_t a1)
{
  sub_24A2A7F10();
  sub_24A2A7480();
  sub_24A1EA074(&qword_26B174A28, MEMORY[0x263F7BF30]);
  sub_24A2A77A0();
  uint64_t v3 = *(void *)(v1 + *(int *)(a1 + 20));
  swift_bridgeObjectRetain();
  sub_24A1E87CC(v5, v3);
  swift_bridgeObjectRelease();
  return sub_24A2A7F50();
}

uint64_t sub_24A1E4068(long long *a1, uint64_t a2)
{
  sub_24A2A7480();
  sub_24A1EA074(&qword_26B174A28, MEMORY[0x263F7BF30]);
  sub_24A2A77A0();
  uint64_t v5 = *(void *)(v2 + *(int *)(a2 + 20));
  swift_bridgeObjectRetain();
  sub_24A1E87CC(a1, v5);

  return swift_bridgeObjectRelease();
}

uint64_t sub_24A1E4114(uint64_t a1, uint64_t a2)
{
  sub_24A2A7F10();
  sub_24A2A7480();
  sub_24A1EA074(&qword_26B174A28, MEMORY[0x263F7BF30]);
  sub_24A2A77A0();
  uint64_t v4 = *(void *)(v2 + *(int *)(a2 + 20));
  swift_bridgeObjectRetain();
  sub_24A1E87CC(v6, v4);
  swift_bridgeObjectRelease();
  return sub_24A2A7F50();
}

uint64_t sub_24A1E41C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((sub_24A2A7460() & 1) == 0) {
    return 0;
  }
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = *(void *)(a1 + v6);
  uint64_t v8 = *(void *)(a2 + v6);

  return sub_24A1E3AD4(v7, v8);
}

uint64_t Release.sha256.getter()
{
  uint64_t v0 = sub_24A2A71B0();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24A2A3F08((uint64_t)v3);
  uint64_t v4 = sub_24A2A3C70();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v4;
}

unint64_t Release.description.getter()
{
  uint64_t v0 = sub_24A2A71B0();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v5 = 0;
  unint64_t v6 = 0xE000000000000000;
  sub_24A2A7C60();
  swift_bridgeObjectRelease();
  unint64_t v5 = 0xD000000000000010;
  unint64_t v6 = 0x800000024A2B2B70;
  sub_24A2A3F08((uint64_t)v3);
  sub_24A2A3C70();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  sub_24A2A78C0();
  swift_bridgeObjectRelease();
  sub_24A2A78C0();
  return v5;
}

uint64_t sub_24A1E4454()
{
  uint64_t v0 = sub_24A2A71B0();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5[0] = 0;
  v5[1] = 0xE000000000000000;
  sub_24A2A7C60();
  sub_24A2A78C0();
  sub_24A2A3F08((uint64_t)v3);
  sub_24A2A3C70();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  sub_24A2A78C0();
  swift_bridgeObjectRelease();
  sub_24A2A78C0();
  return v5[0];
}

uint64_t Release.encode(to:)(void *a1)
{
  uint64_t v3 = type metadata accessor for Release();
  MEMORY[0x270FA5388](v3 - 8);
  unint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24A1E9ED8(v1, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for Release);
  uint64_t v6 = sub_24A1E92DC((uint64_t)v5);
  sub_24A1E4680(a1, v6, v7, v8, v9);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_24A1E4680(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v13[1] = a3;
  _OWORD v13[2] = a4;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174B38);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24A1E9FA8();
  sub_24A2A7F80();
  char v16 = 0;
  sub_24A2A7E00();
  if (!v5)
  {
    char v15 = 1;
    sub_24A2A7DF0();
    v13[3] = a5;
    char v14 = 2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_26B174A98);
    sub_24A1E9FFC();
    sub_24A2A7E10();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_24A1E4838(void *a1)
{
  MEMORY[0x270FA5388](a1);
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24A1E9ED8(v1, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for Release);
  uint64_t v5 = sub_24A1E92DC((uint64_t)v4);
  sub_24A1E4680(a1, v5, v6, v7, v8);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_24A1E4918()
{
  uint64_t v0 = sub_24A2A71B0();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = MEMORY[0x270FA5388](v0);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)&v22 - v5;
  sub_24A2A7470();
  sub_24A1E15C0();
  swift_unknownObjectRelease();
  (*(void (**)(char *, char *, uint64_t))(v1 + 16))(v4, v6, v0);
  sub_24A1EA074(&qword_26B1749F0, MEMORY[0x263F045C0]);
  uint64_t result = sub_24A2A7960();
  uint64_t v8 = v27;
  uint64_t v9 = v28;
  uint64_t v10 = v27[2];
  uint64_t v24 = v1;
  uint64_t v25 = v0;
  int64_t v23 = v6;
  if (v28 == v10)
  {
    uint64_t v11 = (void *)MEMORY[0x263F8EE78];
LABEL_3:
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v23, v25);
    uint64_t v27 = v11;
    __swift_instantiateConcreteTypeFromMangledName(&qword_26B174A98);
    sub_24A1B9860((unint64_t *)&qword_26B174AA8, &qword_26B174A98);
    uint64_t v12 = sub_24A2A77C0();
    swift_bridgeObjectRelease();
    return v12;
  }
  else
  {
    if (v28 < v10)
    {
      uint64_t v11 = (void *)MEMORY[0x263F8EE78];
      long long v26 = xmmword_24A2A8A60;
      unint64_t v13 = v28;
      while ((v9 & 0x8000000000000000) == 0)
      {
        if (v13 >= v8[2]) {
          goto LABEL_15;
        }
        char v14 = *((unsigned char *)v8 + v13 + 32);
        __swift_instantiateConcreteTypeFromMangledName(&qword_26B174BA0);
        uint64_t v15 = swift_allocObject();
        *(_OWORD *)(v15 + 16) = v26;
        *(void *)(v15 + 56) = MEMORY[0x263F8E778];
        *(void *)(v15 + 64) = MEMORY[0x263F8E7C0];
        *(unsigned char *)(v15 + 32) = v14;
        uint64_t v16 = sub_24A2A7840();
        uint64_t v18 = v17;
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)sub_24A1DECEC(0, v11[2] + 1, 1, v11);
          uint64_t v11 = (void *)result;
        }
        unint64_t v20 = v11[2];
        unint64_t v19 = v11[3];
        if (v20 >= v19 >> 1)
        {
          uint64_t result = (uint64_t)sub_24A1DECEC((void *)(v19 > 1), v20 + 1, 1, v11);
          uint64_t v11 = (void *)result;
        }
        ++v13;
        v11[2] = v20 + 1;
        int64_t v21 = &v11[2 * v20];
        v21[4] = v16;
        v21[5] = v18;
        if (v10 == v13) {
          goto LABEL_3;
        }
      }
      __break(1u);
LABEL_15:
      __break(1u);
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_24A1E4C30()
{
  uint64_t v1 = 0x74656B6369547061;
  if (*v0 != 1) {
    uint64_t v1 = 0x5478657470797263;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x6E6F6973726576;
  }
}

uint64_t sub_24A1E4C98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_24A1EA55C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_24A1E4CC0()
{
  return 0;
}

void sub_24A1E4CCC(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_24A1E4CD8(uint64_t a1)
{
  unint64_t v2 = sub_24A1E9FA8();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A1E4D14(uint64_t a1)
{
  unint64_t v2 = sub_24A1E9FA8();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_24A1E4D50(void *a1)
{
  return sub_24A1E4680(a1, *v1, v1[1], v1[2], v1[3]);
}

uint64_t sub_24A1E4D70()
{
  return 1;
}

uint64_t sub_24A1E4D78()
{
  return sub_24A2A7F50();
}

uint64_t sub_24A1E4DBC()
{
  return sub_24A2A7F20();
}

uint64_t sub_24A1E4DE4()
{
  return sub_24A2A7F50();
}

uint64_t Release.serialize(into:withIdentifier:)()
{
  return sub_24A2A7670();
}

uint64_t sub_24A1E4E74(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A2A7440();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = 1;
  uint64_t result = sub_24A2A7680();
  if (!v2)
  {
    sub_24A2A7480();
    sub_24A2A7680();
    uint64_t v10 = *(void *)(a2 + *(int *)(type metadata accessor for Release() + 20));
    swift_bridgeObjectRetain();
    sub_24A2A73B0();
    __swift_instantiateConcreteTypeFromMangledName(&qword_26B174AC8);
    sub_24A1B9860(&qword_26B174AD0, &qword_26B174AC8);
    sub_24A2A7650();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t Release.init(derEncoded:withIdentifier:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Release();
  sub_24A2A76F0();
  uint64_t v4 = sub_24A2A7440();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a2, v4);
  uint64_t v5 = sub_24A2A7550();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
}

uint64_t sub_24A1E510C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v21 = a1;
  uint64_t v1 = sub_24A2A7480();
  uint64_t v23 = *(void *)(v1 - 8);
  uint64_t v24 = v1;
  MEMORY[0x270FA5388](v1);
  uint64_t v3 = (char *)&v20 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_24A2A7440();
  uint64_t v22 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x270FA5388](v5);
  MEMORY[0x270FA5388](v8);
  sub_24A2A7600();
  uint64_t v9 = v25;
  uint64_t result = sub_24A2A7610();
  if (!v9)
  {
    uint64_t v25 = v7;
    unint64_t v11 = v26;
    if (v26 == 1)
    {
      uint64_t v12 = v24;
      sub_24A2A7600();
      unint64_t v13 = v3;
      uint64_t v14 = v12;
      sub_24A2A7610();
      uint64_t v15 = v25;
      sub_24A2A73B0();
      uint64_t v16 = sub_24A2A76B0();
      (*(void (**)(char *, uint64_t))(v22 + 8))(v15, v4);
      uint64_t v17 = v23;
      uint64_t v18 = v21;
      (*(void (**)(uint64_t, char *, uint64_t))(v23 + 16))(v21, v13, v14);
      uint64_t v19 = sub_24A1E90EC(v16);
      swift_bridgeObjectRelease();
      *(void *)(v18 + *(int *)(type metadata accessor for Release() + 20)) = v19;
      return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v13, v14);
    }
    else
    {
      unint64_t v26 = 0;
      unint64_t v27 = 0xE000000000000000;
      sub_24A2A7C60();
      swift_bridgeObjectRelease();
      unint64_t v26 = 0xD000000000000015;
      unint64_t v27 = 0x800000024A2B2E30;
      unint64_t v28 = v11;
      sub_24A2A7E30();
      sub_24A2A78C0();
      swift_bridgeObjectRelease();
      sub_24A2A7580();
      sub_24A1EA074((unint64_t *)&qword_2697789C8, MEMORY[0x263F7BF58]);
      swift_allocError();
      sub_24A2A7560();
      swift_bridgeObjectRelease();
      return swift_willThrow();
    }
  }
  return result;
}

uint64_t sub_24A1E5524(uint64_t a1, uint64_t a2)
{
  sub_24A2A76F0();
  uint64_t v4 = sub_24A2A7440();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a2, v4);
  uint64_t v5 = sub_24A2A7550();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
}

uint64_t sub_24A1E55E8()
{
  return sub_24A2A7670();
}

uint64_t sub_24A1E5638()
{
  return sub_24A2A7630();
}

uint64_t sub_24A1E56B8()
{
  return sub_24A2A7640();
}

uint64_t static Release.local<A>(assetProvider:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return static Release.local<A>(assetProvider:requireCryptex1:)(0, a1, a2, a3);
}

uint64_t static Release.local<A>(assetProvider:requireCryptex1:)@<X0>(char a1@<W1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 8))(a2, a3);
  if (!v4)
  {
    uint64_t v11 = result;
    unint64_t v12 = v10;
    uint64_t v13 = 0;
    uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 24))(a2, a3);
    uint64_t v48 = a4;
    unint64_t v45 = v12;
    if (qword_26B174600 != -1) {
      swift_once();
    }
    uint64_t v15 = sub_24A2A6C00();
    uint64_t v16 = __swift_project_value_buffer(v15, (uint64_t)qword_26B1768F8);
    uint64_t v17 = *(void *)(v15 - 8);
    MEMORY[0x270FA5388](v16);
    uint64_t v19 = (char *)v44 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v17 + 16))(v19);
    if (*(void *)(v14 + 16) && (unint64_t v20 = sub_24A1BE878((uint64_t)v19), (v21 & 1) != 0))
    {
      uint64_t v55 = 0;
      uint64_t v22 = *(void *)(*(void *)(v14 + 56) + 8 * v20);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v15);
      uint64_t v23 = *(void *)(v22 + 16);
      if (v23)
      {
        if (a1) {
          int v24 = 1;
        }
        else {
          int v24 = 3;
        }
        int v47 = v24;
        swift_bridgeObjectRetain();
        v44[1] = v22;
        uint64_t v25 = (unsigned char *)(v22 + 64);
        unint64_t v26 = (void *)MEMORY[0x263F8EE78];
        uint64_t v27 = v48;
        uint64_t v46 = v11;
        while (1)
        {
          unint64_t v28 = *((void *)v25 - 1);
          if (v28 >> 60 != 15 && *v25 != 4)
          {
            uint64_t v50 = v26;
            uint64_t v31 = *((void *)v25 - 4);
            unint64_t v30 = *((void *)v25 - 3);
            uint64_t v32 = *((void *)v25 - 2);
            sub_24A1B8018(v32, v28);
            sub_24A1B8018(v32, v28);
            sub_24A1A52B0(v31, v30);
            sub_24A1B8018(v32, v28);
            uint64_t v33 = sub_24A1B52A8(v32, v28);
            unint64_t v35 = v34;
            uint64_t v51 = v33;
            unint64_t v52 = v34;
            char v53 = v47;
            uint64_t v36 = v55;
            Image4Manifest.canonicalize(evaluateTrust:)(1);
            uint64_t v55 = v36;
            if (v36)
            {
              sub_24A1B7B78(v32, v28);
              sub_24A1A5384(v33, v35);
              sub_24A1A5384(v31, v30);
              sub_24A1B7B78(v32, v28);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              sub_24A1A5384(v46, v45);
              return swift_bridgeObjectRelease();
            }
            sub_24A1B7B78(v32, v28);
            sub_24A1A5384(v33, v35);
            sub_24A1A5384(v31, v30);
            sub_24A1B7B78(v32, v28);
            long long v49 = v54;
            unint64_t v26 = v50;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              unint64_t v26 = sub_24A1DF2CC(0, v26[2] + 1, 1, v26);
            }
            uint64_t v11 = v46;
            uint64_t v27 = v48;
            unint64_t v38 = v26[2];
            unint64_t v37 = v26[3];
            if (v38 >= v37 >> 1) {
              unint64_t v26 = sub_24A1DF2CC((void *)(v37 > 1), v38 + 1, 1, v26);
            }
            v26[2] = v38 + 1;
            *(_OWORD *)&v26[2 * v38 + 4] = v49;
          }
          v25 += 56;
          if (!--v23)
          {
            swift_bridgeObjectRelease();
            goto LABEL_25;
          }
        }
      }
      unint64_t v26 = (void *)MEMORY[0x263F8EE78];
      uint64_t v27 = v48;
LABEL_25:
      swift_bridgeObjectRelease();
      uint64_t v13 = v55;
      unint64_t v39 = v45;
    }
    else
    {
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v15);
      unint64_t v26 = 0;
      unint64_t v39 = v45;
      uint64_t v27 = v48;
    }
    sub_24A1A52B0(v11, v39);
    uint64_t v40 = sub_24A1B52A8(v11, v39);
    unint64_t v42 = v41;
    uint64_t v51 = v40;
    unint64_t v52 = v41;
    char v53 = 0;
    Image4Manifest.canonicalize(evaluateTrust:)(1);
    sub_24A1A5384(v40, v42);
    if (v13)
    {
      sub_24A1A5384(v11, v39);
      return swift_bridgeObjectRelease();
    }
    else
    {
      if (v26) {
        uint64_t v43 = (uint64_t)v26;
      }
      else {
        uint64_t v43 = MEMORY[0x263F8EE78];
      }
      sub_24A1E1F80(v54, *((unint64_t *)&v54 + 1), v43, v27);
      return sub_24A1A5384(v11, v39);
    }
  }
  return result;
}

uint64_t sub_24A1E5C04(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v41 = sub_24A2A7510();
  uint64_t v5 = *(void *)(v41 - 8);
  MEMORY[0x270FA5388](v41);
  uint64_t v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B174B30);
  int v40 = a2;
  uint64_t result = sub_24A2A7D50();
  uint64_t v10 = result;
  if (*(void *)(v8 + 16))
  {
    uint64_t v36 = v3;
    int64_t v11 = 0;
    uint64_t v12 = *(void *)(v8 + 64);
    unint64_t v38 = (void *)(v8 + 64);
    uint64_t v13 = 1 << *(unsigned char *)(v8 + 32);
    if (v13 < 64) {
      uint64_t v14 = ~(-1 << v13);
    }
    else {
      uint64_t v14 = -1;
    }
    unint64_t v15 = v14 & v12;
    int64_t v37 = (unint64_t)(v13 + 63) >> 6;
    unint64_t v39 = (void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    uint64_t v16 = (void (**)(char *, unint64_t, uint64_t))(v5 + 32);
    uint64_t v17 = result + 64;
    while (1)
    {
      if (v15)
      {
        unint64_t v19 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        unint64_t v20 = v19 | (v11 << 6);
      }
      else
      {
        int64_t v21 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        uint64_t result = (uint64_t)v38;
        if (v21 >= v37) {
          goto LABEL_34;
        }
        unint64_t v22 = v38[v21];
        ++v11;
        if (!v22)
        {
          int64_t v11 = v21 + 1;
          if (v21 + 1 >= v37) {
            goto LABEL_34;
          }
          unint64_t v22 = v38[v11];
          if (!v22)
          {
            int64_t v23 = v21 + 2;
            if (v23 >= v37)
            {
LABEL_34:
              if ((v40 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v36;
                goto LABEL_41;
              }
              uint64_t v35 = 1 << *(unsigned char *)(v8 + 32);
              if (v35 >= 64) {
                bzero(v38, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *unint64_t v38 = -1 << v35;
              }
              uint64_t v3 = v36;
              *(void *)(v8 + 16) = 0;
              break;
            }
            unint64_t v22 = v38[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v11 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_43;
                }
                if (v11 >= v37) {
                  goto LABEL_34;
                }
                unint64_t v22 = v38[v11];
                ++v23;
                if (v22) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v11 = v23;
          }
        }
LABEL_21:
        unint64_t v15 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v11 << 6);
      }
      uint64_t v24 = *(void *)(*(void *)(v8 + 48) + 8 * v20);
      uint64_t v25 = v5;
      uint64_t v26 = *(void *)(v5 + 72);
      unint64_t v27 = *(void *)(v8 + 56) + v26 * v20;
      if (v40) {
        (*v16)(v7, v27, v41);
      }
      else {
        (*v39)(v7, v27, v41);
      }
      uint64_t result = sub_24A2A7F00();
      uint64_t v28 = -1 << *(unsigned char *)(v10 + 32);
      unint64_t v29 = result & ~v28;
      unint64_t v30 = v29 >> 6;
      if (((-1 << v29) & ~*(void *)(v17 + 8 * (v29 >> 6))) != 0)
      {
        unint64_t v18 = __clz(__rbit64((-1 << v29) & ~*(void *)(v17 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v31 = 0;
        unint64_t v32 = (unint64_t)(63 - v28) >> 6;
        do
        {
          if (++v30 == v32 && (v31 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          BOOL v33 = v30 == v32;
          if (v30 == v32) {
            unint64_t v30 = 0;
          }
          v31 |= v33;
          uint64_t v34 = *(void *)(v17 + 8 * v30);
        }
        while (v34 == -1);
        unint64_t v18 = __clz(__rbit64(~v34)) + (v30 << 6);
      }
      *(void *)(v17 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      *(void *)(*(void *)(v10 + 48) + 8 * v18) = v24;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v16)(*(void *)(v10 + 56) + v26 * v18, v7, v41);
      ++*(void *)(v10 + 16);
      uint64_t v5 = v25;
    }
  }
  uint64_t result = swift_release();
LABEL_41:
  *uint64_t v3 = v10;
  return result;
}

uint64_t sub_24A1E5FAC(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B174B20);
  uint64_t result = sub_24A2A7D50();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v35 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v34 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v16 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v17 = v16 | (v8 << 6);
      }
      else
      {
        int64_t v18 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v18 >= v34) {
          goto LABEL_34;
        }
        unint64_t v19 = v35[v18];
        ++v8;
        if (!v19)
        {
          int64_t v8 = v18 + 1;
          if (v18 + 1 >= v34) {
            goto LABEL_34;
          }
          unint64_t v19 = v35[v8];
          if (!v19)
          {
            int64_t v20 = v18 + 2;
            if (v20 >= v34)
            {
LABEL_34:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v2;
                goto LABEL_41;
              }
              uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
              if (v33 >= 64) {
                bzero(v35, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v35 = -1 << v33;
              }
              uint64_t v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v19 = v35[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v8 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_43;
                }
                if (v8 >= v34) {
                  goto LABEL_34;
                }
                unint64_t v19 = v35[v8];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v20;
          }
        }
LABEL_21:
        unint64_t v11 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      uint64_t v21 = 32 * v17;
      uint64_t v22 = *(void *)(v5 + 48) + v21;
      long long v36 = *(_OWORD *)v22;
      uint64_t v24 = *(void *)(v22 + 16);
      uint64_t v23 = *(void *)(v22 + 24);
      uint64_t v25 = (_OWORD *)(*(void *)(v5 + 56) + v21);
      if (a2)
      {
        sub_24A1BFBE4(v25, v37);
      }
      else
      {
        sub_24A1C9680((uint64_t)v25, (uint64_t)v37);
        swift_bridgeObjectRetain();
      }
      sub_24A2A7F10();
      sub_24A2A7F20();
      uint64_t result = sub_24A2A7F50();
      uint64_t v26 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v27 = result & ~v26;
      unint64_t v28 = v27 >> 6;
      if (((-1 << v27) & ~*(void *)(v12 + 8 * (v27 >> 6))) != 0)
      {
        unint64_t v13 = __clz(__rbit64((-1 << v27) & ~*(void *)(v12 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v29 = 0;
        unint64_t v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          BOOL v31 = v28 == v30;
          if (v28 == v30) {
            unint64_t v28 = 0;
          }
          v29 |= v31;
          uint64_t v32 = *(void *)(v12 + 8 * v28);
        }
        while (v32 == -1);
        unint64_t v13 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(void *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      uint64_t v14 = 32 * v13;
      uint64_t v15 = *(void *)(v7 + 48) + v14;
      *(_OWORD *)uint64_t v15 = v36;
      *(void *)(v15 + 16) = v24;
      *(void *)(v15 + 24) = v23;
      uint64_t result = (uint64_t)sub_24A1BFBE4(v37, (_OWORD *)(*(void *)(v7 + 56) + v14));
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_41:
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_24A1E62B4(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for SEP.SealedHash(0);
  uint64_t v47 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v50 = (uint64_t)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B174B18);
  int v48 = a2;
  uint64_t v8 = sub_24A2A7D50();
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16)) {
    goto LABEL_41;
  }
  uint64_t v10 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v11 = *(void *)(v7 + 64);
  unint64_t v45 = (void *)(v7 + 64);
  if (v10 < 64) {
    uint64_t v12 = ~(-1 << v10);
  }
  else {
    uint64_t v12 = -1;
  }
  unint64_t v13 = v12 & v11;
  uint64_t v43 = v2;
  int64_t v44 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v14 = v8 + 64;
  uint64_t result = swift_retain();
  int64_t v16 = 0;
  for (i = v7; ; uint64_t v7 = i)
  {
    if (v13)
    {
      unint64_t v18 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v19 = v18 | (v16 << 6);
      goto LABEL_22;
    }
    int64_t v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v20 >= v44) {
      break;
    }
    uint64_t v21 = v45;
    unint64_t v22 = v45[v20];
    ++v16;
    if (!v22)
    {
      int64_t v16 = v20 + 1;
      if (v20 + 1 >= v44) {
        goto LABEL_34;
      }
      unint64_t v22 = v45[v16];
      if (!v22)
      {
        int64_t v23 = v20 + 2;
        if (v23 >= v44)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v43;
          if ((v48 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v22 = v45[v23];
        if (!v22)
        {
          while (1)
          {
            int64_t v16 = v23 + 1;
            if (__OFADD__(v23, 1)) {
              goto LABEL_43;
            }
            if (v16 >= v44) {
              goto LABEL_34;
            }
            unint64_t v22 = v45[v16];
            ++v23;
            if (v22) {
              goto LABEL_21;
            }
          }
        }
        int64_t v16 = v23;
      }
    }
LABEL_21:
    unint64_t v13 = (v22 - 1) & v22;
    unint64_t v19 = __clz(__rbit64(v22)) + (v16 << 6);
LABEL_22:
    uint64_t v24 = sub_24A2A6C00();
    uint64_t v25 = *(void *)(v24 - 8);
    MEMORY[0x270FA5388](v24);
    unint64_t v27 = (char *)&v43 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v29 = *(void *)(v28 + 72);
    unint64_t v30 = *(void *)(v7 + 48) + v29 * v19;
    uint64_t v49 = v31;
    if (v48)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v25 + 32))((char *)&v43 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0), v30, v24);
      uint64_t v32 = *(void *)(v7 + 56);
      uint64_t v33 = *(void *)(v47 + 72);
      sub_24A1E9F40(v32 + v33 * v19, v50, type metadata accessor for SEP.SealedHash);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v25 + 16))((char *)&v43 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0), v30, v24);
      uint64_t v34 = *(void *)(v7 + 56);
      uint64_t v33 = *(void *)(v47 + 72);
      sub_24A1E9ED8(v34 + v33 * v19, v50, type metadata accessor for SEP.SealedHash);
    }
    sub_24A1E9E90(&qword_26B174228, MEMORY[0x270FA9520]);
    uint64_t result = sub_24A2A7790();
    uint64_t v35 = -1 << *(unsigned char *)(v9 + 32);
    unint64_t v36 = result & ~v35;
    unint64_t v37 = v36 >> 6;
    if (((-1 << v36) & ~*(void *)(v14 + 8 * (v36 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v36) & ~*(void *)(v14 + 8 * (v36 >> 6)))) | v36 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v38 = 0;
      unint64_t v39 = (unint64_t)(63 - v35) >> 6;
      do
      {
        if (++v37 == v39 && (v38 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v40 = v37 == v39;
        if (v37 == v39) {
          unint64_t v37 = 0;
        }
        v38 |= v40;
        uint64_t v41 = *(void *)(v14 + 8 * v37);
      }
      while (v41 == -1);
      unint64_t v17 = __clz(__rbit64(~v41)) + (v37 << 6);
    }
    *(void *)(v14 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    (*(void (**)(unint64_t, char *, uint64_t))(v25 + 32))(*(void *)(v9 + 48) + v29 * v17, v27, v24);
    uint64_t result = sub_24A1E9F40(v50, *(void *)(v9 + 56) + v33 * v17, type metadata accessor for SEP.SealedHash);
    ++*(void *)(v9 + 16);
  }
  swift_release();
  uint64_t v3 = v43;
  uint64_t v21 = v45;
  if ((v48 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v42 = 1 << *(unsigned char *)(v7 + 32);
  if (v42 >= 64) {
    bzero(v21, ((unint64_t)(v42 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v21 = -1 << v42;
  }
  *(void *)(v7 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v9;
  return result;
}

uint64_t sub_24A1E679C(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_269778E00);
  uint64_t v6 = sub_24A2A7D50();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v34 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    int64_t v33 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v17 = v16 | (v13 << 6);
      }
      else
      {
        int64_t v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v18 >= v33) {
          goto LABEL_34;
        }
        unint64_t v19 = v34[v18];
        ++v13;
        if (!v19)
        {
          int64_t v13 = v18 + 1;
          if (v18 + 1 >= v33) {
            goto LABEL_34;
          }
          unint64_t v19 = v34[v13];
          if (!v19)
          {
            int64_t v20 = v18 + 2;
            if (v20 >= v33)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v2;
              if (a2)
              {
                uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
                if (v32 >= 64) {
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v34 = -1 << v32;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v19 = v34[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v13 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_41;
                }
                if (v13 >= v33) {
                  goto LABEL_34;
                }
                unint64_t v19 = v34[v13];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v13 = v20;
          }
        }
LABEL_21:
        unint64_t v10 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      uint64_t v21 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v17);
      uint64_t v23 = *v21;
      uint64_t v22 = v21[1];
      uint64_t v24 = *(void *)(v5 + 56) + 32 * v17;
      if (a2)
      {
        sub_24A1E9E28(v24, (uint64_t)v35);
      }
      else
      {
        sub_24A1DF430(v24, (uint64_t)v35);
        swift_bridgeObjectRetain();
      }
      sub_24A2A7F10();
      sub_24A2A78A0();
      uint64_t result = sub_24A2A7F50();
      uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v11 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      uint64_t v15 = (void *)(*(void *)(v7 + 48) + 16 * v14);
      void *v15 = v23;
      v15[1] = v22;
      uint64_t result = sub_24A1E9E28((uint64_t)v35, *(void *)(v7 + 56) + 32 * v14);
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_24A1E6A9C(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_269778E18);
  uint64_t result = sub_24A2A7D50();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    BOOL v30 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v29 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v17 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v18 = v17 | (v8 << 6);
      }
      else
      {
        int64_t v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v19 >= v29) {
          goto LABEL_33;
        }
        unint64_t v20 = v30[v19];
        ++v8;
        if (!v20)
        {
          int64_t v8 = v19 + 1;
          if (v19 + 1 >= v29) {
            goto LABEL_33;
          }
          unint64_t v20 = v30[v8];
          if (!v20)
          {
            int64_t v21 = v19 + 2;
            if (v21 >= v29)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v2;
                goto LABEL_40;
              }
              uint64_t v28 = 1 << *(unsigned char *)(v5 + 32);
              if (v28 >= 64) {
                bzero(v30, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *BOOL v30 = -1 << v28;
              }
              uint64_t v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v20 = v30[v21];
            if (!v20)
            {
              while (1)
              {
                int64_t v8 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v29) {
                  goto LABEL_33;
                }
                unint64_t v20 = v30[v8];
                ++v21;
                if (v20) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v21;
          }
        }
LABEL_30:
        unint64_t v11 = (v20 - 1) & v20;
        unint64_t v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      char v26 = *(unsigned char *)(*(void *)(v5 + 48) + v18);
      uint64_t v27 = *(void *)(*(void *)(v5 + 56) + 8 * v18);
      if ((a2 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      sub_24A2A7F10();
      sub_24A2A7F20();
      uint64_t result = sub_24A2A7F50();
      uint64_t v13 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v14 = result & ~v13;
      unint64_t v15 = v14 >> 6;
      if (((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v24 = v15 == v23;
          if (v15 == v23) {
            unint64_t v15 = 0;
          }
          v22 |= v24;
          uint64_t v25 = *(void *)(v12 + 8 * v15);
        }
        while (v25 == -1);
        unint64_t v16 = __clz(__rbit64(~v25)) + (v15 << 6);
      }
      *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(unsigned char *)(*(void *)(v7 + 48) + v16) = v26;
      *(void *)(*(void *)(v7 + 56) + 8 * v16) = v27;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_24A1E6D70(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_269778B90);
  int v43 = a2;
  uint64_t v6 = sub_24A2A7D50();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v9 = *(void *)(v5 + 64);
  uint64_t v41 = (void *)(v5 + 64);
  if (v8 < 64) {
    uint64_t v10 = ~(-1 << v8);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & v9;
  unint64_t v39 = v2;
  int64_t v40 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  for (i = v5; ; uint64_t v5 = i)
  {
    if (v11)
    {
      unint64_t v16 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v17 = v16 | (v14 << 6);
      goto LABEL_22;
    }
    int64_t v18 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v18 >= v40) {
      break;
    }
    int64_t v19 = v41;
    unint64_t v20 = v41[v18];
    ++v14;
    if (!v20)
    {
      int64_t v14 = v18 + 1;
      if (v18 + 1 >= v40) {
        goto LABEL_34;
      }
      unint64_t v20 = v41[v14];
      if (!v20)
      {
        int64_t v21 = v18 + 2;
        if (v21 >= v40)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v39;
          if ((v43 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v20 = v41[v21];
        if (!v20)
        {
          while (1)
          {
            int64_t v14 = v21 + 1;
            if (__OFADD__(v21, 1)) {
              goto LABEL_43;
            }
            if (v14 >= v40) {
              goto LABEL_34;
            }
            unint64_t v20 = v41[v14];
            ++v21;
            if (v20) {
              goto LABEL_21;
            }
          }
        }
        int64_t v14 = v21;
      }
    }
LABEL_21:
    unint64_t v11 = (v20 - 1) & v20;
    unint64_t v17 = __clz(__rbit64(v20)) + (v14 << 6);
LABEL_22:
    uint64_t v22 = sub_24A2A6C00();
    uint64_t v23 = *(void *)(v22 - 8);
    MEMORY[0x270FA5388](v22);
    uint64_t v25 = (char *)&v39 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v27 = *(void *)(v26 + 72);
    unint64_t v28 = *(void *)(v5 + 48) + v27 * v17;
    uint64_t v44 = v29;
    if (v43)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v23 + 32))((char *)&v39 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0), v28, v22);
      uint64_t v30 = *(void *)(*(void *)(v5 + 56) + 8 * v17);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v23 + 16))((char *)&v39 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0), v28, v22);
      uint64_t v30 = *(void *)(*(void *)(v5 + 56) + 8 * v17);
      swift_bridgeObjectRetain();
    }
    sub_24A1E9E90(&qword_26B174228, MEMORY[0x270FA9520]);
    uint64_t result = sub_24A2A7790();
    uint64_t v31 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v32 = result & ~v31;
    unint64_t v33 = v32 >> 6;
    if (((-1 << v32) & ~*(void *)(v12 + 8 * (v32 >> 6))) != 0)
    {
      unint64_t v15 = __clz(__rbit64((-1 << v32) & ~*(void *)(v12 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v34 = 0;
      unint64_t v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v36 = v33 == v35;
        if (v33 == v35) {
          unint64_t v33 = 0;
        }
        v34 |= v36;
        uint64_t v37 = *(void *)(v12 + 8 * v33);
      }
      while (v37 == -1);
      unint64_t v15 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    uint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v23 + 32))(*(void *)(v7 + 48) + v27 * v15, v25, v22);
    *(void *)(*(void *)(v7 + 56) + 8 * v15) = v30;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v39;
  int64_t v19 = v41;
  if ((v43 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v38 = 1 << *(unsigned char *)(v5 + 32);
  if (v38 >= 64) {
    bzero(v19, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v19 = -1 << v38;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_24A1E7184(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for Proto_SealedHash(0);
  uint64_t v42 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697789D8);
  int v43 = a2;
  uint64_t v9 = sub_24A2A7D50();
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16)) {
    goto LABEL_41;
  }
  uint64_t v11 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v12 = *(void *)(v8 + 64);
  uint64_t v41 = (void *)(v8 + 64);
  if (v11 < 64) {
    uint64_t v13 = ~(-1 << v11);
  }
  else {
    uint64_t v13 = -1;
  }
  unint64_t v14 = v13 & v12;
  unint64_t v39 = v2;
  int64_t v40 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v15 = v9 + 64;
  uint64_t result = swift_retain();
  int64_t v17 = 0;
  while (1)
  {
    if (v14)
    {
      unint64_t v20 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v21 = v20 | (v17 << 6);
      goto LABEL_22;
    }
    int64_t v22 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v40) {
      break;
    }
    uint64_t v23 = v41;
    unint64_t v24 = v41[v22];
    ++v17;
    if (!v24)
    {
      int64_t v17 = v22 + 1;
      if (v22 + 1 >= v40) {
        goto LABEL_34;
      }
      unint64_t v24 = v41[v17];
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v40)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v39;
          if ((v43 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v24 = v41[v25];
        if (!v24)
        {
          while (1)
          {
            int64_t v17 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_43;
            }
            if (v17 >= v40) {
              goto LABEL_34;
            }
            unint64_t v24 = v41[v17];
            ++v25;
            if (v24) {
              goto LABEL_21;
            }
          }
        }
        int64_t v17 = v25;
      }
    }
LABEL_21:
    unint64_t v14 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v17 << 6);
LABEL_22:
    uint64_t v26 = (uint64_t *)(*(void *)(v8 + 48) + 16 * v21);
    uint64_t v28 = *v26;
    uint64_t v27 = v26[1];
    uint64_t v29 = *(void *)(v42 + 72);
    uint64_t v30 = *(void *)(v8 + 56) + v29 * v21;
    if (v43)
    {
      sub_24A1E9F40(v30, (uint64_t)v7, type metadata accessor for Proto_SealedHash);
    }
    else
    {
      sub_24A1E9ED8(v30, (uint64_t)v7, type metadata accessor for Proto_SealedHash);
      swift_bridgeObjectRetain();
    }
    sub_24A2A7F10();
    sub_24A2A78A0();
    uint64_t result = sub_24A2A7F50();
    uint64_t v31 = -1 << *(unsigned char *)(v10 + 32);
    unint64_t v32 = result & ~v31;
    unint64_t v33 = v32 >> 6;
    if (((-1 << v32) & ~*(void *)(v15 + 8 * (v32 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v32) & ~*(void *)(v15 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v34 = 0;
      unint64_t v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v36 = v33 == v35;
        if (v33 == v35) {
          unint64_t v33 = 0;
        }
        v34 |= v36;
        uint64_t v37 = *(void *)(v15 + 8 * v33);
      }
      while (v37 == -1);
      unint64_t v18 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(void *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    int64_t v19 = (void *)(*(void *)(v10 + 48) + 16 * v18);
    void *v19 = v28;
    v19[1] = v27;
    uint64_t result = sub_24A1E9F40((uint64_t)v7, *(void *)(v10 + 56) + v29 * v18, type metadata accessor for Proto_SealedHash);
    ++*(void *)(v10 + 16);
  }
  swift_release();
  uint64_t v3 = v39;
  uint64_t v23 = v41;
  if ((v43 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v38 = 1 << *(unsigned char *)(v8 + 32);
  if (v38 >= 64) {
    bzero(v23, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v23 = -1 << v38;
  }
  *(void *)(v8 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v10;
  return result;
}

uint64_t sub_24A1E7564(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_269778A08);
  char v36 = a2;
  uint64_t v6 = sub_24A2A7D50();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v34 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34) {
      break;
    }
    int64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v34) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v35 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v34) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v35 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    uint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    sub_24A2A7F10();
    sub_24A2A78A0();
    uint64_t result = sub_24A2A7F50();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    unint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *unint64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  int64_t v22 = (void *)(v5 + 64);
  if ((v36 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_24A1E787C(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = sub_24A2A7D30();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  unint64_t v4 = *v1;
  if (*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = sub_24A2A7D30();
    swift_bridgeObjectRelease();
    uint64_t v6 = v5 + v3;
    if (!__OFADD__(v5, v3)) {
      goto LABEL_5;
    }
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v6 = v5 + v3;
  if (__OFADD__(v5, v3)) {
    goto LABEL_25;
  }
LABEL_5:
  unint64_t v4 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  unint64_t *v1 = v4;
  uint64_t v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_15;
    }
    uint64_t v5 = 1;
  }
  if (v4 >> 62) {
    goto LABEL_27;
  }
  uint64_t v9 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6) {
      uint64_t v9 = v6;
    }
    swift_bridgeObjectRetain();
    unint64_t v4 = MEMORY[0x24C5BF430](v5, v9, 1, v4);
    swift_bridgeObjectRelease();
    unint64_t *v1 = v4;
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    uint64_t result = sub_24A1E8B74(v8 + 8 * *(void *)(v8 + 16) + 32, (*(void *)(v8 + 24) >> 1) - *(void *)(v8 + 16), a1);
    if (v11 >= v3) {
      break;
    }
LABEL_26:
    __break(1u);
LABEL_27:
    swift_bridgeObjectRetain();
    uint64_t v9 = sub_24A2A7D30();
    swift_bridgeObjectRelease();
  }
  if (v11 >= 1)
  {
    uint64_t v12 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v13 = __OFADD__(v12, v11);
    uint64_t v14 = v12 + v11;
    if (v13)
    {
      __break(1u);
      return result;
    }
    *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
  }
  swift_bridgeObjectRelease();

  return sub_24A2A7A40();
}

uint64_t sub_24A1E7A48(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  uint64_t v3 = sub_24A1DF9BC(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = (unint64_t)&v3[3 * v8 + 4];
  if (a1 + 32 < v9 + 24 * v2 && v9 < a1 + 32 + 24 * v2) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = sub_24A2A7D70();
  __break(1u);
  return result;
}

uint64_t sub_24A1E7BA4(uint64_t a1, unint64_t a2)
{
  sub_24A1A52B0(a1, a2);
  sub_24A1E8DEC(a1, a2);
  sub_24A1A5384(a1, a2);
  uint64_t v4 = sub_24A2A7880();
  swift_release();
  return v4;
}

uint64_t sub_24A1E7C1C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_24A2A7880();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_24A1E7C58(uint64_t a1, uint64_t a2, uint64_t a3, void *(*a4)(uint64_t *__return_ptr, uint64_t, uint64_t))
{
  uint64_t result = sub_24A2A68E0();
  uint64_t v9 = result;
  if (result)
  {
    uint64_t result = sub_24A2A6910();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v9 += a1 - result;
  }
  BOOL v10 = __OFSUB__(a2, a1);
  uint64_t v11 = a2 - a1;
  if (v10)
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v12 = sub_24A2A6900();
  if (v12 >= v11) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = v12;
  }
  uint64_t v14 = v9 + v13;
  if (v9) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = 0;
  }
  uint64_t result = (uint64_t)sub_24A1E8D98(v9, v15, a4);
  if (v4) {
    return v16;
  }
  return result;
}

uint64_t sub_24A1E7D08(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_24A1ECCE0(v2);
  }
  uint64_t v3 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  uint64_t result = sub_24A1E7D74(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_24A1E7D74(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  uint64_t result = sub_24A2A7E20();
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_152;
    }
    if (v3) {
      return sub_24A1E8460(0, v3, 1, a1);
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_160;
  }
  uint64_t v105 = result;
  uint64_t v102 = a1;
  if (v3 < 2)
  {
    uint64_t v8 = MEMORY[0x263F8EE78];
    __dst = (char *)(MEMORY[0x263F8EE78] + 32);
    if (v3 != 1)
    {
      unint64_t v12 = *(void *)(MEMORY[0x263F8EE78] + 16);
      uint64_t v11 = (char *)MEMORY[0x263F8EE78];
LABEL_118:
      uint64_t v94 = v11;
      uint64_t v104 = v8;
      if (v12 >= 2)
      {
        uint64_t v95 = *v102;
        do
        {
          unint64_t v96 = v12 - 2;
          if (v12 < 2) {
            goto LABEL_147;
          }
          if (!v95) {
            goto LABEL_159;
          }
          unint64_t v97 = v94;
          uint64_t v98 = *(void *)&v94[16 * v96 + 32];
          uint64_t v99 = *(void *)&v94[16 * v12 + 24];
          sub_24A1E8530((char *)(v95 + 16 * v98), (char *)(v95 + 16 * *(void *)&v94[16 * v12 + 16]), v95 + 16 * v99, __dst);
          if (v1) {
            break;
          }
          if (v99 < v98) {
            goto LABEL_148;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v97 = sub_24A1ECCCC((uint64_t)v97);
          }
          if (v96 >= *((void *)v97 + 2)) {
            goto LABEL_149;
          }
          uint64_t v100 = &v97[16 * v96 + 32];
          *(void *)uint64_t v100 = v98;
          *((void *)v100 + 1) = v99;
          unint64_t v101 = *((void *)v97 + 2);
          if (v12 > v101) {
            goto LABEL_150;
          }
          memmove(&v97[16 * v12 + 16], &v97[16 * v12 + 32], 16 * (v101 - v12));
          uint64_t v94 = v97;
          *((void *)v97 + 2) = v101 - 1;
          unint64_t v12 = v101 - 1;
        }
        while (v101 > 2);
      }
LABEL_115:
      swift_bridgeObjectRelease();
      *(void *)(v104 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v104 = MEMORY[0x263F8EE78];
  }
  else
  {
    uint64_t v6 = v5 >> 1;
    uint64_t v7 = sub_24A2A7A70();
    *(void *)(v7 + 16) = v6;
    uint64_t v104 = v7;
    __dst = (char *)(v7 + 32);
  }
  uint64_t v9 = 0;
  uint64_t v10 = *a1;
  uint64_t v103 = v10 + 8;
  uint64_t v11 = (char *)MEMORY[0x263F8EE78];
  uint64_t v106 = v3;
  while (1)
  {
    uint64_t v13 = v9++;
    if (v9 >= v3) {
      goto LABEL_46;
    }
    uint64_t v14 = (uint64_t *)(v10 + 16 * v9);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    unint64_t v17 = (void *)(v10 + 16 * v13);
    if (v15 == *v17 && v16 == v17[1])
    {
      uint64_t v20 = v13 + 2;
      if (v13 + 2 >= v3) {
        goto LABEL_45;
      }
      int v19 = 0;
    }
    else
    {
      int v19 = sub_24A2A7E40();
      uint64_t v20 = v13 + 2;
      if (v13 + 2 >= v3) {
        goto LABEL_36;
      }
    }
    int64_t v21 = (void *)(v103 + 16 * v20);
    do
    {
      unint64_t v23 = (void *)(v10 + 16 * v9);
      if (*(v21 - 1) == *v23 && *v21 == v23[1])
      {
        if (v19) {
          goto LABEL_37;
        }
      }
      else if ((v19 ^ sub_24A2A7E40()))
      {
        goto LABEL_36;
      }
      v21 += 2;
      uint64_t v22 = v20 + 1;
      uint64_t v9 = v20;
      uint64_t v20 = v22;
    }
    while (v22 < v3);
    uint64_t v20 = v22;
LABEL_36:
    uint64_t v9 = v20;
    if (v19)
    {
LABEL_37:
      if (v20 < v13) {
        goto LABEL_155;
      }
      if (v13 < v20)
      {
        uint64_t v25 = 16 * v20;
        uint64_t v26 = 16 * v13;
        uint64_t v27 = v20;
        uint64_t v28 = v13;
        do
        {
          if (v28 != --v27)
          {
            if (!v10) {
              goto LABEL_158;
            }
            uint64_t v29 = v10 + v25;
            uint64_t v30 = *(void *)(v10 + v26);
            uint64_t v31 = *(void *)(v10 + v26 + 8);
            *(_OWORD *)(v10 + v26) = *(_OWORD *)(v10 + v25 - 16);
            *(void *)(v29 - 16) = v30;
            *(void *)(v29 - 8) = v31;
          }
          ++v28;
          v25 -= 16;
          v26 += 16;
        }
        while (v28 < v27);
      }
LABEL_45:
      uint64_t v9 = v20;
    }
LABEL_46:
    if (v9 < v3)
    {
      if (__OFSUB__(v9, v13)) {
        goto LABEL_151;
      }
      if (v9 - v13 < v105) {
        break;
      }
    }
LABEL_67:
    if (v9 < v13) {
      goto LABEL_146;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v11 = sub_24A1EC9D4(0, *((void *)v11 + 2) + 1, 1, v11);
    }
    unint64_t v41 = *((void *)v11 + 2);
    unint64_t v40 = *((void *)v11 + 3);
    unint64_t v12 = v41 + 1;
    if (v41 >= v40 >> 1) {
      uint64_t v11 = sub_24A1EC9D4((char *)(v40 > 1), v41 + 1, 1, v11);
    }
    *((void *)v11 + 2) = v12;
    uint64_t v42 = v11 + 32;
    int v43 = &v11[16 * v41 + 32];
    *(void *)int v43 = v13;
    *((void *)v43 + 1) = v9;
    if (v41)
    {
      uint64_t v107 = v9;
      while (1)
      {
        unint64_t v44 = v12 - 1;
        if (v12 >= 4)
        {
          uint64_t v49 = &v42[16 * v12];
          uint64_t v50 = *((void *)v49 - 8);
          uint64_t v51 = *((void *)v49 - 7);
          BOOL v55 = __OFSUB__(v51, v50);
          uint64_t v52 = v51 - v50;
          if (v55) {
            goto LABEL_135;
          }
          uint64_t v54 = *((void *)v49 - 6);
          uint64_t v53 = *((void *)v49 - 5);
          BOOL v55 = __OFSUB__(v53, v54);
          uint64_t v47 = v53 - v54;
          char v48 = v55;
          if (v55) {
            goto LABEL_136;
          }
          unint64_t v56 = v12 - 2;
          unint64_t v57 = &v42[16 * v12 - 32];
          uint64_t v59 = *(void *)v57;
          uint64_t v58 = *((void *)v57 + 1);
          BOOL v55 = __OFSUB__(v58, v59);
          uint64_t v60 = v58 - v59;
          if (v55) {
            goto LABEL_138;
          }
          BOOL v55 = __OFADD__(v47, v60);
          uint64_t v61 = v47 + v60;
          if (v55) {
            goto LABEL_141;
          }
          if (v61 >= v52)
          {
            id v79 = &v42[16 * v44];
            uint64_t v81 = *(void *)v79;
            uint64_t v80 = *((void *)v79 + 1);
            BOOL v55 = __OFSUB__(v80, v81);
            uint64_t v82 = v80 - v81;
            if (v55) {
              goto LABEL_145;
            }
            BOOL v72 = v47 < v82;
            goto LABEL_105;
          }
        }
        else
        {
          if (v12 != 3)
          {
            uint64_t v73 = *((void *)v11 + 4);
            uint64_t v74 = *((void *)v11 + 5);
            BOOL v55 = __OFSUB__(v74, v73);
            uint64_t v66 = v74 - v73;
            char v67 = v55;
            goto LABEL_99;
          }
          uint64_t v46 = *((void *)v11 + 4);
          uint64_t v45 = *((void *)v11 + 5);
          BOOL v55 = __OFSUB__(v45, v46);
          uint64_t v47 = v45 - v46;
          char v48 = v55;
        }
        if (v48) {
          goto LABEL_137;
        }
        unint64_t v56 = v12 - 2;
        uint64_t v62 = &v42[16 * v12 - 32];
        uint64_t v64 = *(void *)v62;
        uint64_t v63 = *((void *)v62 + 1);
        BOOL v65 = __OFSUB__(v63, v64);
        uint64_t v66 = v63 - v64;
        char v67 = v65;
        if (v65) {
          goto LABEL_140;
        }
        uint64_t v68 = &v42[16 * v44];
        uint64_t v70 = *(void *)v68;
        uint64_t v69 = *((void *)v68 + 1);
        BOOL v55 = __OFSUB__(v69, v70);
        uint64_t v71 = v69 - v70;
        if (v55) {
          goto LABEL_143;
        }
        if (__OFADD__(v66, v71)) {
          goto LABEL_144;
        }
        if (v66 + v71 >= v47)
        {
          BOOL v72 = v47 < v71;
LABEL_105:
          if (v72) {
            unint64_t v44 = v56;
          }
          goto LABEL_107;
        }
LABEL_99:
        if (v67) {
          goto LABEL_139;
        }
        uint64_t v75 = &v42[16 * v44];
        uint64_t v77 = *(void *)v75;
        uint64_t v76 = *((void *)v75 + 1);
        BOOL v55 = __OFSUB__(v76, v77);
        uint64_t v78 = v76 - v77;
        if (v55) {
          goto LABEL_142;
        }
        if (v78 < v66) {
          goto LABEL_15;
        }
LABEL_107:
        unint64_t v83 = v44 - 1;
        if (v44 - 1 >= v12)
        {
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
          goto LABEL_154;
        }
        uint64_t v84 = v10;
        if (!v10) {
          goto LABEL_157;
        }
        uint64_t v85 = v11;
        uint64_t v86 = &v42[16 * v83];
        uint64_t v87 = *(void *)v86;
        uint64_t v88 = v42;
        unint64_t v89 = v44;
        uint64_t v90 = &v42[16 * v44];
        uint64_t v91 = *((void *)v90 + 1);
        uint64_t v92 = v84;
        sub_24A1E8530((char *)(v84 + 16 * *(void *)v86), (char *)(v84 + 16 * *(void *)v90), v84 + 16 * v91, __dst);
        if (v1) {
          goto LABEL_115;
        }
        if (v91 < v87) {
          goto LABEL_132;
        }
        if (v89 > *((void *)v85 + 2)) {
          goto LABEL_133;
        }
        *(void *)uint64_t v86 = v87;
        *(void *)&v88[16 * v83 + 8] = v91;
        unint64_t v93 = *((void *)v85 + 2);
        if (v89 >= v93) {
          goto LABEL_134;
        }
        uint64_t v11 = v85;
        unint64_t v12 = v93 - 1;
        memmove(v90, v90 + 16, 16 * (v93 - 1 - v89));
        uint64_t v42 = v88;
        *((void *)v85 + 2) = v93 - 1;
        uint64_t v10 = v92;
        uint64_t v9 = v107;
        if (v93 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v12 = 1;
LABEL_15:
    uint64_t v3 = v106;
    if (v9 >= v106)
    {
      uint64_t v8 = v104;
      goto LABEL_118;
    }
  }
  if (__OFADD__(v13, v105)) {
    goto LABEL_153;
  }
  if (v13 + v105 >= v3) {
    uint64_t v32 = v3;
  }
  else {
    uint64_t v32 = v13 + v105;
  }
  if (v32 >= v13)
  {
    if (v9 != v32)
    {
      uint64_t v33 = (void *)(v10 + 16 * v9);
      do
      {
        int64_t v34 = (uint64_t *)(v10 + 16 * v9);
        uint64_t v35 = *v34;
        uint64_t v36 = v34[1];
        uint64_t v37 = v13;
        uint64_t v38 = v33;
        do
        {
          BOOL v39 = v35 == *(v38 - 2) && v36 == *(v38 - 1);
          if (v39 || (sub_24A2A7E40() & 1) == 0) {
            break;
          }
          if (!v10) {
            goto LABEL_156;
          }
          uint64_t v35 = *v38;
          uint64_t v36 = v38[1];
          *(_OWORD *)uint64_t v38 = *((_OWORD *)v38 - 1);
          *(v38 - 1) = v36;
          *(v38 - 2) = v35;
          v38 -= 2;
          ++v37;
        }
        while (v9 != v37);
        ++v9;
        v33 += 2;
      }
      while (v9 != v32);
      uint64_t v9 = v32;
    }
    goto LABEL_67;
  }
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
LABEL_160:
  uint64_t result = sub_24A2A7D10();
  __break(1u);
  return result;
}

uint64_t sub_24A1E8460(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v6 = result;
    uint64_t v7 = *a4;
    uint64_t v8 = *a4 + 16 * a3;
LABEL_5:
    uint64_t v9 = (uint64_t *)(v7 + 16 * v4);
    uint64_t result = *v9;
    uint64_t v10 = v9[1];
    uint64_t v11 = v6;
    unint64_t v12 = (uint64_t *)v8;
    while (1)
    {
      BOOL v13 = result == *(v12 - 2) && v10 == *(v12 - 1);
      if (v13 || (uint64_t result = sub_24A2A7E40(), (result & 1) == 0))
      {
LABEL_4:
        ++v4;
        v8 += 16;
        if (v4 == a2) {
          return result;
        }
        goto LABEL_5;
      }
      if (!v7) {
        break;
      }
      uint64_t result = *v12;
      uint64_t v10 = v12[1];
      *(_OWORD *)unint64_t v12 = *((_OWORD *)v12 - 1);
      *(v12 - 1) = v10;
      *(v12 - 2) = result;
      v12 -= 2;
      if (v4 == ++v11) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_24A1E8530(char *__src, char *a2, unint64_t a3, char *__dst)
{
  uint64_t v4 = __dst;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = a2 - __src + 15;
  if (a2 - __src >= 0) {
    int64_t v9 = a2 - __src;
  }
  uint64_t v10 = v9 >> 4;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 15;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v12 = a3 - (void)a2;
  }
  uint64_t v13 = v12 >> 4;
  uint64_t v27 = __src;
  uint64_t v26 = __dst;
  if (v10 >= v12 >> 4)
  {
    if (v11 >= -15)
    {
      if (__dst != a2 || &a2[16 * v13] <= __dst) {
        memmove(__dst, a2, 16 * v13);
      }
      unint64_t v17 = &v4[16 * v13];
      uint64_t v25 = v17;
      uint64_t v27 = v6;
      if (v7 < v6 && v11 >= 16)
      {
        unint64_t v18 = (char *)(a3 - 16);
        int v19 = v6;
        while (1)
        {
          uint64_t v20 = v18 + 16;
          uint64_t v21 = *((void *)v19 - 2);
          uint64_t v22 = *((void *)v19 - 1);
          v19 -= 16;
          BOOL v23 = *((void *)v17 - 2) == v21 && *((void *)v17 - 1) == v22;
          if (v23 || (sub_24A2A7E40() & 1) == 0)
          {
            uint64_t v25 = v17 - 16;
            if (v20 < v17 || v18 >= v17 || v20 != v17) {
              *(_OWORD *)unint64_t v18 = *((_OWORD *)v17 - 1);
            }
            int v19 = v6;
            v17 -= 16;
            if (v6 <= v7) {
              goto LABEL_50;
            }
          }
          else
          {
            if (v20 != v6 || v18 >= v6) {
              *(_OWORD *)unint64_t v18 = *(_OWORD *)v19;
            }
            uint64_t v27 = v19;
            if (v19 <= v7) {
              goto LABEL_50;
            }
          }
          v18 -= 16;
          uint64_t v6 = v19;
          if (v17 <= v4) {
            goto LABEL_50;
          }
        }
      }
      goto LABEL_50;
    }
  }
  else if (v8 >= -15)
  {
    if (__dst != __src || &__src[16 * v10] <= __dst) {
      memmove(__dst, __src, 16 * v10);
    }
    uint64_t v14 = &v4[16 * v10];
    uint64_t v25 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 16)
    {
      do
      {
        BOOL v15 = *(void *)v6 == *(void *)v4 && *((void *)v6 + 1) == *((void *)v4 + 1);
        if (v15 || (sub_24A2A7E40() & 1) == 0)
        {
          if (v7 != v4) {
            *(_OWORD *)uint64_t v7 = *(_OWORD *)v4;
          }
          v4 += 16;
          uint64_t v26 = v4;
          uint64_t v16 = v6;
        }
        else
        {
          uint64_t v16 = v6 + 16;
          if (v7 < v6 || v7 >= v16 || v7 != v6) {
            *(_OWORD *)uint64_t v7 = *(_OWORD *)v6;
          }
        }
        v7 += 16;
        if (v4 >= v14) {
          break;
        }
        uint64_t v6 = v16;
      }
      while ((unint64_t)v16 < a3);
      uint64_t v27 = v7;
    }
LABEL_50:
    sub_24A1ECAD0((void **)&v27, (const void **)&v26, &v25);
    return 1;
  }
  uint64_t result = sub_24A2A7D70();
  __break(1u);
  return result;
}

uint64_t sub_24A1E87CC(long long *a1, uint64_t a2)
{
  uint64_t v4 = sub_24A2A7480();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *((void *)a1 + 8);
  long long v9 = a1[1];
  long long v29 = *a1;
  long long v30 = v9;
  long long v10 = a1[2];
  long long v11 = a1[3];
  v28[0] = a1;
  long long v31 = v10;
  long long v32 = v11;
  uint64_t v33 = v8;
  uint64_t v12 = sub_24A2A7F50();
  uint64_t v13 = a2 + 56;
  uint64_t v14 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & *(void *)(a2 + 56);
  int64_t v17 = (unint64_t)(v14 + 63) >> 6;
  void v28[2] = v5 + 16;
  v28[3] = v12;
  v28[1] = v5 + 8;
  uint64_t v18 = a2;
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v20 = 0;
  int64_t v21 = 0;
  while (1)
  {
    if (v16)
    {
      unint64_t v22 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v23 = v22 | (v21 << 6);
      goto LABEL_5;
    }
    if (__OFADD__(v21++, 1)) {
      goto LABEL_19;
    }
    if (v21 >= v17)
    {
LABEL_17:
      swift_release();
      return sub_24A2A7F20();
    }
    unint64_t v26 = *(void *)(v13 + 8 * v21);
    if (!v26) {
      break;
    }
LABEL_16:
    unint64_t v16 = (v26 - 1) & v26;
    unint64_t v23 = __clz(__rbit64(v26)) + (v21 << 6);
LABEL_5:
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v7, *(void *)(v18 + 48) + *(void *)(v5 + 72) * v23, v4);
    sub_24A1EA074(&qword_26B174A28, MEMORY[0x263F7BF30]);
    uint64_t v24 = sub_24A2A7790();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v20 ^= v24;
  }
  int64_t v27 = v21 + 1;
  if (v21 + 1 >= v17) {
    goto LABEL_17;
  }
  unint64_t v26 = *(void *)(v13 + 8 * v27);
  if (v26)
  {
    ++v21;
    goto LABEL_16;
  }
  while (1)
  {
    int64_t v21 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v21 >= v17) {
      goto LABEL_17;
    }
    unint64_t v26 = *(void *)(v13 + 8 * v21);
    ++v27;
    if (v26) {
      goto LABEL_16;
    }
  }
  __break(1u);
LABEL_19:
  __break(1u);
  return result;
}

void (*sub_24A1E8A3C(void (**a1)(id *a1), unint64_t a2, uint64_t a3))(void *a1)
{
  uint64_t v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = sub_24A1E8AEC(v6, a2, a3);
  return sub_24A1E8AA4;
}

void sub_24A1E8AA4(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);

  free(v1);
}

void (*sub_24A1E8AEC(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  uint64_t v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    id v4 = (id)MEMORY[0x24C5BF420](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    id v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(void *)uint64_t v3 = v4;
    return destroy for SWTransparencyVerifier;
  }
  __break(1u);
  return result;
}

void destroy for SWTransparencyVerifier(id *a1)
{
}

uint64_t sub_24A1E8B74(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = sub_24A2A7D30();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = sub_24A2A7D30();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_24A1B9860(&qword_269778E10, &qword_269778E08);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          __swift_instantiateConcreteTypeFromMangledName(&qword_269778E08);
          uint64_t v12 = sub_24A1E8A3C(v16, i, a3);
          id v14 = *v13;
          ((void (*)(void (**)(id *), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for SecCertificate(0);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = sub_24A2A7D70();
  __break(1u);
  return result;
}

void *sub_24A1E8D98(uint64_t a1, uint64_t a2, void *(*a3)(uint64_t *__return_ptr, uint64_t, uint64_t))
{
  if (a1) {
    uint64_t v4 = a2 - a1;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t result = a3(&v6, a1, v4);
  if (!v3) {
    return (void *)v6;
  }
  return result;
}

void *sub_24A1E8DEC(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (void *)MEMORY[0x263F8EE78];
  switch(a2 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_12;
      }
      uint64_t v5 = HIDWORD(a1) - (int)a1;
LABEL_6:
      if (v5)
      {
        if (v5 >= 1)
        {
          __swift_instantiateConcreteTypeFromMangledName(&qword_26B174B98);
          uint64_t v2 = (void *)swift_allocObject();
          size_t v8 = _swift_stdlib_malloc_size(v2);
          v2[2] = v5;
          v2[3] = 2 * v8 - 64;
        }
        uint64_t v9 = sub_24A2A6B00();
        uint64_t v10 = *(void *)(v9 - 8);
        MEMORY[0x270FA5388](v9);
        uint64_t v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
        sub_24A1A52B0(a1, a2);
        uint64_t v13 = sub_24A2A6A20();
        sub_24A1A5384(a1, a2);
        (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
        if (v13 != v5)
        {
          __break(1u);
LABEL_12:
          __break(1u);
LABEL_13:
          __break(1u);
          JUMPOUT(0x24A1E8FA8);
        }
      }
      return v2;
    case 2uLL:
      uint64_t v7 = *(void *)(a1 + 16);
      uint64_t v6 = *(void *)(a1 + 24);
      uint64_t v5 = v6 - v7;
      if (!__OFSUB__(v6, v7)) {
        goto LABEL_6;
      }
      goto LABEL_13;
    case 3uLL:
      return v2;
    default:
      uint64_t v5 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_24A1E8FB8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_24A2A7880();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_24A1E8FF0(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_269778DE0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_24A1E9050(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  sub_24A1EA0BC();
  uint64_t result = sub_24A2A7AD0();
  uint64_t v8 = result;
  if (v2)
  {
    uint64_t v4 = (unint64_t *)(a1 + 40);
    do
    {
      uint64_t v5 = *(v4 - 1);
      unint64_t v6 = *v4;
      sub_24A1A52B0(v5, *v4);
      sub_24A23D7E8(v7, v5, v6);
      sub_24A1A5384(v7[0], v7[1]);
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t sub_24A1E90EC(uint64_t a1)
{
  uint64_t v2 = sub_24A2A7480();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  unint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(void *)(a1 + 16);
  sub_24A1EA074(&qword_26B174A28, MEMORY[0x263F7BF30]);
  uint64_t result = sub_24A2A7AD0();
  uint64_t v17 = result;
  if (v9)
  {
    uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    uint64_t v12 = v13;
    uint64_t v14 = a1 + ((*(unsigned __int8 *)(v11 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 64));
    uint64_t v15 = *(void *)(v11 + 56);
    do
    {
      v12(v6, v14, v2);
      sub_24A23D4C4((uint64_t)v8, v6);
      (*(void (**)(char *, uint64_t))(v11 - 8))(v8, v2);
      v14 += v15;
      --v9;
    }
    while (v9);
    return v17;
  }
  return result;
}

unint64_t sub_24A1E9288()
{
  unint64_t result = qword_269778DE8;
  if (!qword_269778DE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269778DE8);
  }
  return result;
}

uint64_t sub_24A1E92DC(uint64_t a1)
{
  uint64_t v39 = sub_24A2A7480();
  uint64_t v2 = *(void *)(v39 - 8);
  uint64_t v3 = MEMORY[0x270FA5388](v39);
  uint64_t v38 = (char *)v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  uint64_t v37 = (char *)v29 - v5;
  uint64_t v6 = sub_24A1E4918();
  uint64_t v31 = v7;
  uint64_t v8 = *(void *)(a1 + *(int *)(type metadata accessor for Release() + 20));
  int64_t v9 = *(void *)(v8 + 16);
  uint64_t v10 = MEMORY[0x263F8EE78];
  if (v9)
  {
    v29[1] = v6;
    uint64_t v30 = a1;
    uint64_t v40 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    sub_24A245A4C(0, v9, 0);
    uint64_t v11 = sub_24A246474(v8);
    uint64_t v13 = v12;
    char v15 = v14 & 1;
    uint64_t v35 = v2;
    uint64_t v36 = v8 + 56;
    uint64_t v33 = v2 + 32;
    uint64_t v34 = v2 + 16;
    uint64_t v32 = v2 + 8;
    while ((v11 & 0x8000000000000000) == 0 && v11 < 1 << *(unsigned char *)(v8 + 32))
    {
      if (((*(void *)(v36 + (((unint64_t)v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v11) & 1) == 0) {
        goto LABEL_15;
      }
      if (*(_DWORD *)(v8 + 36) != v13) {
        goto LABEL_16;
      }
      uint64_t v16 = v37;
      uint64_t v17 = v39;
      (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v37, *(void *)(v8 + 48) + *(void *)(v2 + 72) * v11, v39);
      uint64_t v18 = v38;
      (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v38, v16, v17);
      uint64_t v19 = sub_24A1E4918();
      uint64_t v21 = v20;
      (*(void (**)(char *, uint64_t))(v2 + 8))(v18, v17);
      uint64_t v10 = v40;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_24A245A4C(0, *(void *)(v10 + 16) + 1, 1);
        uint64_t v10 = v40;
      }
      unint64_t v23 = *(void *)(v10 + 16);
      unint64_t v22 = *(void *)(v10 + 24);
      if (v23 >= v22 >> 1)
      {
        sub_24A245A4C(v22 > 1, v23 + 1, 1);
        uint64_t v10 = v40;
      }
      *(void *)(v10 + 16) = v23 + 1;
      uint64_t v24 = v10 + 16 * v23;
      *(void *)(v24 + 32) = v19;
      *(void *)(v24 + 40) = v21;
      uint64_t v25 = sub_24A246BBC(v11, v13, v15 & 1, v8);
      uint64_t v11 = v25;
      uint64_t v13 = v26;
      char v15 = v27 & 1;
      --v9;
      uint64_t v2 = v35;
      if (!v9)
      {
        sub_24A1EA068(v25, v26, v27 & 1);
        swift_bridgeObjectRelease();
        a1 = v30;
        goto LABEL_13;
      }
    }
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    uint64_t result = swift_release();
    __break(1u);
  }
  else
  {
LABEL_13:
    uint64_t v40 = v10;
    swift_bridgeObjectRetain();
    sub_24A1E7D08(&v40);
    sub_24A1EA104(a1, (uint64_t (*)(void))type metadata accessor for Release);
    swift_bridgeObjectRelease();
    return 1;
  }
  return result;
}

uint64_t sub_24A1E9620(uint64_t a1)
{
  return sub_24A1E4E74(a1, *(void *)(v1 + 16));
}

uint64_t sub_24A1E963C()
{
  return sub_24A1EA074(&qword_269778DF0, (void (*)(uint64_t))type metadata accessor for Release);
}

uint64_t sub_24A1E9684()
{
  return sub_24A1EA074(&qword_26B1748F0, (void (*)(uint64_t))type metadata accessor for Release);
}

uint64_t sub_24A1E96CC()
{
  return sub_24A1EA074(&qword_26B1748F8, (void (*)(uint64_t))type metadata accessor for Release);
}

uint64_t *initializeBufferWithCopyOfBuffer for Release(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_24A2A7480();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for Release(uint64_t a1)
{
  uint64_t v2 = sub_24A2A7480();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Release(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_24A2A7480();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Release(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_24A2A7480();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for Release(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_24A2A7480();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for Release(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_24A2A7480();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Release(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24A1E9A78);
}

uint64_t sub_24A1E9A78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_24A2A7480();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for Release(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24A1E9B4C);
}

uint64_t sub_24A1E9B4C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_24A2A7480();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t sub_24A1E9C08()
{
  uint64_t result = sub_24A2A7480();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for Release.Error(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for Release.Error(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x24A1E9D90);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_24A1E9DB8()
{
  return 0;
}

ValueMetadata *type metadata accessor for Release.Error()
{
  return &type metadata for Release.Error;
}

unint64_t sub_24A1E9DD4()
{
  unint64_t result = qword_269778DF8;
  if (!qword_269778DF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269778DF8);
  }
  return result;
}

uint64_t sub_24A1E9E28(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174BC8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_24A1E9E90(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_24A1E9ED8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_24A1E9F40(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t sub_24A1E9FA8()
{
  unint64_t result = qword_26B174618;
  if (!qword_26B174618)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B174618);
  }
  return result;
}

unint64_t sub_24A1E9FFC()
{
  unint64_t result = qword_26B174AA0;
  if (!qword_26B174AA0)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26B174A98);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B174AA0);
  }
  return result;
}

uint64_t sub_24A1EA068(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_24A1EA074(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_24A1EA0BC()
{
  unint64_t result = qword_26B174210;
  if (!qword_26B174210)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B174210);
  }
  return result;
}

uint64_t sub_24A1EA104(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_24A1EA164(uint64_t a1, char a2)
{
  if (a2 != -1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t destroy for EncodableRelease()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for EncodableRelease(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for EncodableRelease(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

_OWORD *assignWithTake for EncodableRelease(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for EncodableRelease(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for EncodableRelease(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EncodableRelease()
{
  return &type metadata for EncodableRelease;
}

unsigned char *storeEnumTagSinglePayload for EncodableRelease.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *__n128 result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24A1EA41CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EncodableRelease.CodingKeys()
{
  return &type metadata for EncodableRelease.CodingKeys;
}

unint64_t sub_24A1EA458()
{
  unint64_t result = qword_269778E20;
  if (!qword_269778E20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269778E20);
  }
  return result;
}

unint64_t sub_24A1EA4B0()
{
  unint64_t result = qword_26B174628;
  if (!qword_26B174628)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B174628);
  }
  return result;
}

unint64_t sub_24A1EA508()
{
  unint64_t result = qword_26B174620;
  if (!qword_26B174620)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B174620);
  }
  return result;
}

uint64_t sub_24A1EA55C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E6F6973726576 && a2 == 0xE700000000000000;
  if (v2 || (sub_24A2A7E40() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x74656B6369547061 && a2 == 0xE800000000000000 || (sub_24A2A7E40() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x5478657470797263 && a2 == 0xEE007374656B6369)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = sub_24A2A7E40();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_24A1EA6D8(uint64_t a1)
{
  return sub_24A1E9620(a1);
}

uint64_t Release.debugDescription.getter()
{
  return sub_24A1EA750(0, 0xE000000000000000);
}

uint64_t sub_24A1EA750(void *a1, unint64_t a2)
{
  uint64_t v65 = *MEMORY[0x263EF8340];
  uint64_t v6 = sub_24A2A7480();
  uint64_t v50 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v53 = (char *)v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = 0;
  unint64_t v59 = 0xE000000000000000;
  uint64_t v60 = 0x3A6E6F6973726556;
  unint64_t v61 = 0xE900000000000020;
  *(void *)&long long __dst = 1;
  sub_24A2A7E30();
  sub_24A2A78C0();
  swift_bridgeObjectRelease();
  sub_24A2A78C0();
  uint64_t v60 = (uint64_t)a1;
  unint64_t v61 = a2;
  swift_bridgeObjectRetain();
  sub_24A2A78C0();
  swift_bridgeObjectRelease();
  sub_24A2A78C0();
  swift_bridgeObjectRelease();
  uint64_t v60 = (uint64_t)a1;
  unint64_t v61 = a2;
  swift_bridgeObjectRetain();
  sub_24A2A78C0();
  sub_24A2A78C0();
  swift_bridgeObjectRelease();
  unint64_t v55 = v2;
  uint64_t v8 = sub_24A2A7470();
  uint64_t v12 = sub_24A1B9578(v8, v9, v10, v11);
  unint64_t v14 = v13;
  swift_unknownObjectRelease();
  uint64_t v60 = (uint64_t)v12;
  unint64_t v61 = v14;
  char v62 = 0;
  unint64_t v56 = a1;
  *(void *)&long long __dst = a1;
  *((void *)&__dst + 1) = a2;
  swift_bridgeObjectRetain();
  sub_24A2A78C0();
  sub_24A25EE80(__dst, *((uint64_t *)&__dst + 1));
  if (v3)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return sub_24A1A5384((uint64_t)v12, v14);
  }
  else
  {
    uint64_t v51 = v12;
    unint64_t v52 = v14;
    swift_bridgeObjectRelease();
    sub_24A2A78C0();
    swift_bridgeObjectRelease();
    uint64_t v16 = *(void *)(v55 + *(int *)(type metadata accessor for Release() + 20));
    swift_bridgeObjectRetain_n();
    uint64_t v17 = (void *)sub_24A23D24C(v16);
    swift_bridgeObjectRelease();
    uint64_t v60 = (uint64_t)v17;
    sub_24A1EAF94((void **)&v60);
    swift_bridgeObjectRelease();
    uint64_t v18 = *(void *)(v60 + 16);
    unint64_t v19 = v52;
    uint64_t v20 = v53;
    uint64_t v21 = (uint64_t)v51;
    if (v18)
    {
      uint64_t v54 = 0;
      unint64_t v55 = a2;
      uint64_t v22 = v50 + 16;
      uint64_t v50 = *(void *)(v50 + 16);
      unint64_t v23 = (*(unsigned __int8 *)(v22 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 64);
      v45[1] = v60;
      uint64_t v24 = (char *)(v60 + v23);
      uint64_t v46 = *(void *)(v22 + 56);
      uint64_t v47 = (void (**)(char *, uint64_t))(v22 - 8);
      uint64_t v48 = v6;
      unint64_t v49 = 0x800000024A2B2EE0;
      while (1)
      {
        uint64_t v25 = v22;
        ((void (*)(char *, char *, uint64_t))v50)(v20, v24, v6);
        uint64_t v60 = (uint64_t)v56;
        unint64_t v61 = v55;
        swift_bridgeObjectRetain();
        sub_24A2A78C0();
        sub_24A2A78C0();
        swift_bridgeObjectRelease();
        uint64_t v26 = sub_24A2A7470();
        uint64_t v28 = v27;
        uint64_t v30 = v29;
        uint64_t v32 = v31;
        uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174B08);
        uint64_t v63 = v33;
        unint64_t v64 = sub_24A1ECD08();
        uint64_t v34 = (void *)swift_allocObject();
        uint64_t v60 = (uint64_t)v34;
        v34[2] = v26;
        v34[3] = v28;
        v34[4] = v30;
        v34[5] = v32;
        uint64_t v35 = __swift_project_boxed_opaque_existential_1(&v60, v33);
        uint64_t v36 = v35[2];
        uint64_t v37 = v35[3] >> 1;
        uint64_t v38 = v37 - v36;
        if (__OFSUB__(v37, v36)) {
          __break(1u);
        }
        if (v38)
        {
          uint64_t v39 = (const void *)(v35[1] + v36);
          if (v38 <= 14)
          {
            *(void *)((char *)&__dst + 6) = 0;
            *(void *)&long long __dst = 0;
            BYTE14(__dst) = v37 - v36;
            memcpy(&__dst, v39, v37 - v36);
            uint64_t v42 = (void *)__dst;
            unint64_t v43 = DWORD2(__dst) | ((unint64_t)BYTE12(__dst) << 32) | ((unint64_t)BYTE13(__dst) << 40) | ((unint64_t)BYTE14(__dst) << 48);
            swift_unknownObjectRetain();
          }
          else
          {
            sub_24A2A6920();
            swift_allocObject();
            swift_unknownObjectRetain();
            uint64_t v40 = sub_24A2A68D0();
            uint64_t v41 = v40;
            if ((unint64_t)v38 >= 0x7FFFFFFF)
            {
              sub_24A2A6A40();
              uint64_t v42 = (void *)swift_allocObject();
              v42[2] = 0;
              v42[3] = v38;
              unint64_t v43 = v41 | 0x8000000000000000;
            }
            else
            {
              uint64_t v42 = (void *)(v38 << 32);
              unint64_t v43 = v40 | 0x4000000000000000;
            }
          }
        }
        else
        {
          swift_unknownObjectRetain();
          uint64_t v42 = 0;
          unint64_t v43 = 0xC000000000000000;
        }
        swift_unknownObjectRelease();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v60);
        uint64_t v60 = (uint64_t)v42;
        unint64_t v61 = v43;
        char v62 = 3;
        *(void *)&long long __dst = v56;
        *((void *)&__dst + 1) = v55;
        swift_bridgeObjectRetain();
        sub_24A2A78C0();
        uint64_t v44 = v54;
        sub_24A25EE80(__dst, *((uint64_t *)&__dst + 1));
        if (v44) {
          break;
        }
        uint64_t v54 = 0;
        swift_bridgeObjectRelease();
        sub_24A2A78C0();
        swift_bridgeObjectRelease();
        sub_24A1A5384((uint64_t)v42, v43);
        uint64_t v6 = v48;
        uint64_t v20 = v53;
        (*v47)(v53, v48);
        v24 += v46;
        --v18;
        uint64_t v22 = v25;
        uint64_t v21 = (uint64_t)v51;
        unint64_t v19 = v52;
        if (!v18) {
          goto LABEL_15;
        }
      }
      swift_bridgeObjectRelease();
      sub_24A1A5384((uint64_t)v51, v52);
      (*v47)(v53, v48);
      swift_release();
      swift_bridgeObjectRelease();
      return sub_24A1A5384((uint64_t)v42, v43);
    }
    else
    {
LABEL_15:
      swift_release();
      sub_24A1A5384(v21, v19);
      return v58;
    }
  }
}

uint64_t sub_24A1EAD90()
{
  sub_24A2A7470();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  unint64_t v5 = v4;
  uint64_t result = sub_24A2A7470();
  int64_t v10 = v5 >> 1;
  if (v3 == v5 >> 1) {
    goto LABEL_4;
  }
  if (v3 >= (uint64_t)(v5 >> 1))
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  int64_t v11 = v9 >> 1;
  if (v8 == v9 >> 1)
  {
LABEL_4:
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    sub_24A2A7470();
    uint64_t v13 = v12;
    unint64_t v15 = v14;
    uint64_t result = swift_unknownObjectRelease();
    BOOL v16 = __OFSUB__(v15 >> 1, v13);
    uint64_t v17 = (v15 >> 1) - v13;
    if (v16)
    {
      __break(1u);
    }
    else
    {
      sub_24A2A7470();
      uint64_t v19 = v18;
      unint64_t v21 = v20;
      uint64_t result = swift_unknownObjectRelease();
      if (!__OFSUB__(v21 >> 1, v19)) {
        return v17 < (uint64_t)((v21 >> 1) - v19);
      }
    }
    __break(1u);
    goto LABEL_23;
  }
  if (v8 < (uint64_t)(v9 >> 1))
  {
    unsigned int v22 = *(unsigned __int8 *)(v1 + v3);
    unsigned int v23 = *(unsigned __int8 *)(v7 + v8);
    if (v22 < v23)
    {
LABEL_9:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      return 1;
    }
    if (v23 < v22)
    {
LABEL_11:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t v24 = 0;
    uint64_t v25 = v8 + 1;
    while (~v3 + v10 != v24)
    {
      if (v3 + 1 + v24 >= v10) {
        goto LABEL_24;
      }
      if (~v8 + v11 == v24) {
        break;
      }
      if (v25 + v24 < v8 || v25 + v24 >= v11) {
        goto LABEL_25;
      }
      unsigned int v26 = *(unsigned __int8 *)(v1 + v3 + 1 + v24);
      unsigned int v27 = *(unsigned __int8 *)(v7 + v8 + 1 + v24);
      if (v26 < v27) {
        goto LABEL_9;
      }
      ++v24;
      if (v27 < v26) {
        goto LABEL_11;
      }
    }
    goto LABEL_4;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_24A1EAF34()
{
  return sub_24A1EA750(0, 0xE000000000000000);
}

uint64_t sub_24A1EAF94(void **a1)
{
  uint64_t v2 = *(void *)(sub_24A2A7480() - 8);
  uint64_t v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v3 = (void *)sub_24A1ECCF4(v3);
  }
  uint64_t v4 = v3[2];
  v6[0] = (uint64_t)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  uint64_t result = sub_24A1EB03C(v6);
  *a1 = v3;
  return result;
}

uint64_t sub_24A1EB03C(uint64_t *a1)
{
  uint64_t v2 = sub_24A2A7480();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  v197 = (char *)&v191 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  v212 = (char *)&v191 - v7;
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  int64_t v10 = (char *)&v191 - v9;
  uint64_t v11 = MEMORY[0x270FA5388](v8);
  v216 = (char *)&v191 - v12;
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  v201 = (char *)&v191 - v14;
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  v199 = (char *)&v191 - v16;
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  uint64_t v19 = (char *)&v191 - v18;
  MEMORY[0x270FA5388](v17);
  unint64_t v21 = (char *)&v191 - v20;
  uint64_t v22 = a1[1];
  uint64_t result = sub_24A2A7E20();
  if (result >= v22)
  {
    if ((v22 & 0x8000000000000000) == 0)
    {
      if (v22) {
        return sub_24A1EBF10(0, v22, 1, a1);
      }
      return result;
    }
    goto LABEL_199;
  }
  if (v22 >= 0) {
    uint64_t v24 = v22;
  }
  else {
    uint64_t v24 = v22 + 1;
  }
  if (v22 < -1) {
    goto LABEL_207;
  }
  uint64_t v203 = v3;
  v214 = v10;
  uint64_t v194 = result;
  v210 = a1;
  if (v22 >= 2)
  {
    uint64_t v25 = v22;
    v192 = v21;
    v193 = v19;
    uint64_t v26 = v24 >> 1;
    uint64_t v27 = sub_24A2A7A70();
    *(void *)(v27 + 16) = v26;
    uint64_t v3 = v203;
    unint64_t v28 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
    uint64_t v191 = v27;
    unint64_t v200 = v27 + v28;
    goto LABEL_13;
  }
  uint64_t v29 = (char *)MEMORY[0x263F8EE78];
  unint64_t v200 = MEMORY[0x263F8EE78]
       + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  uint64_t v191 = MEMORY[0x263F8EE78];
  if (v22 != 1)
  {
    unint64_t v134 = *(void *)(MEMORY[0x263F8EE78] + 16);
    if (v134 < 2)
    {
LABEL_164:
      swift_bridgeObjectRelease();
      *(void *)(v191 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
LABEL_152:
    uint64_t v183 = *a1;
    uint64_t v184 = v204;
    while (1)
    {
      unint64_t v185 = v134 - 2;
      if (v134 < 2) {
        break;
      }
      if (!v183) {
        goto LABEL_206;
      }
      uint64_t v186 = *(void *)&v29[16 * v185 + 32];
      uint64_t v187 = *(void *)&v29[16 * v134 + 24];
      sub_24A1EC36C(v183 + *(void *)(v203 + 72) * v186, v183 + *(void *)(v203 + 72) * *(void *)&v29[16 * v134 + 16], v183 + *(void *)(v203 + 72) * v187, v200);
      if (v184) {
        goto LABEL_164;
      }
      if (v187 < v186) {
        goto LABEL_193;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v29 = sub_24A1ECCCC((uint64_t)v29);
      }
      if (v185 >= *((void *)v29 + 2)) {
        goto LABEL_194;
      }
      v188 = &v29[16 * v185 + 32];
      *(void *)v188 = v186;
      *((void *)v188 + 1) = v187;
      unint64_t v189 = *((void *)v29 + 2);
      if (v134 > v189) {
        goto LABEL_195;
      }
      memmove(&v29[16 * v134 + 16], &v29[16 * v134 + 32], 16 * (v189 - v134));
      *((void *)v29 + 2) = v189 - 1;
      unint64_t v134 = v189 - 1;
      if (v189 <= 2) {
        goto LABEL_164;
      }
    }
LABEL_192:
    __break(1u);
LABEL_193:
    __break(1u);
LABEL_194:
    __break(1u);
LABEL_195:
    __break(1u);
LABEL_196:
    __break(1u);
LABEL_197:
    __break(1u);
LABEL_198:
    __break(1u);
LABEL_199:
    __break(1u);
LABEL_200:
    __break(1u);
LABEL_201:
    __break(1u);
    goto LABEL_202;
  }
  uint64_t v25 = 1;
  v192 = v21;
  v193 = v19;
LABEL_13:
  uint64_t v30 = 0;
  v207 = (void (**)(char *, uint64_t))(v3 + 8);
  uint64_t v208 = v3 + 16;
  v215 = (char **)(v3 + 32);
  uint64_t v29 = (char *)MEMORY[0x263F8EE78];
  uint64_t v209 = v2;
  uint64_t v31 = (char *)v25;
  while (2)
  {
    uint64_t v32 = (char *)(v30 + 1);
    v195 = v29;
    uint64_t v205 = v30;
    if (v30 + 1 >= (uint64_t)v31)
    {
      uint64_t v42 = (char *)(v30 + 1);
      uint64_t v74 = v203;
      uint64_t v33 = v210;
      goto LABEL_57;
    }
    v206 = v31;
    uint64_t v33 = v210;
    uint64_t v34 = *v210;
    uint64_t v35 = *(void *)(v203 + 72);
    uint64_t v36 = *(void (**)(char *, uint64_t, uint64_t))(v203 + 16);
    uint64_t v37 = v192;
    v36(v192, *v210 + v35 * (void)v32, v2);
    uint64_t v211 = v34;
    uint64_t v213 = v35;
    uint64_t v38 = v34 + v35 * v30;
    uint64_t v39 = v193;
    v196 = v36;
    v36(v193, v38, v2);
    uint64_t v40 = v204;
    LODWORD(v198) = sub_24A1EAD90();
    uint64_t v204 = v40;
    if (v40)
    {
      v190 = *v207;
      (*v207)(v39, v2);
      v190(v37, v2);
      goto LABEL_164;
    }
    uint64_t v41 = *v207;
    (*v207)(v39, v2);
    v41(v37, v2);
    uint64_t v31 = v206;
    uint64_t v42 = (char *)(v205 + 2);
    uint64_t v29 = v195;
    if (v205 + 2 >= (uint64_t)v206) {
      goto LABEL_43;
    }
    unint64_t v43 = v199;
    while (1)
    {
      v202 = v42;
      uint64_t v44 = v211;
      uint64_t v45 = v213;
      uint64_t v46 = v196;
      v196(v43, v211 + (void)v42 * v213, v2);
      v46(v201, v44 + (void)v32 * v45, v2);
      sub_24A2A7470();
      uint64_t v48 = v47;
      uint64_t v50 = v49;
      unint64_t v52 = v51;
      sub_24A2A7470();
      int64_t v56 = v52 >> 1;
      if (v50 != v52 >> 1)
      {
        if (v50 >= (uint64_t)(v52 >> 1)) {
          goto LABEL_189;
        }
        int64_t v57 = v55 >> 1;
        if (v54 != v55 >> 1)
        {
          if (v54 >= (uint64_t)(v55 >> 1)) {
            goto LABEL_196;
          }
          unsigned int v68 = *(unsigned __int8 *)(v48 + v50);
          unsigned int v69 = *(unsigned __int8 *)(v53 + v54);
          if (v68 < v69)
          {
LABEL_29:
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            BOOL v67 = 1;
            unint64_t v43 = v199;
            goto LABEL_24;
          }
          if (v69 < v68)
          {
LABEL_31:
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            BOOL v67 = 0;
            unint64_t v43 = v199;
            goto LABEL_24;
          }
          uint64_t v70 = 0;
          uint64_t v71 = v54 + 1;
          while (~v50 + v56 != v70)
          {
            if (v50 + 1 + v70 >= v56) {
              goto LABEL_188;
            }
            if (~v54 + v57 == v70) {
              break;
            }
            if (v71 + v70 < v54 || v71 + v70 >= v57) {
              goto LABEL_190;
            }
            unsigned int v72 = *(unsigned __int8 *)(v50 + 1 + v48 + v70);
            unsigned int v73 = *(unsigned __int8 *)(v54 + 1 + v53 + v70);
            if (v72 < v73) {
              goto LABEL_29;
            }
            ++v70;
            if (v73 < v72) {
              goto LABEL_31;
            }
          }
        }
      }
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      unint64_t v43 = v199;
      sub_24A2A7470();
      uint64_t v59 = v58;
      unint64_t v61 = v60;
      swift_unknownObjectRelease();
      uint64_t v62 = (v61 >> 1) - v59;
      if (__OFSUB__(v61 >> 1, v59)) {
        goto LABEL_186;
      }
      sub_24A2A7470();
      uint64_t v64 = v63;
      unint64_t v66 = v65;
      swift_unknownObjectRelease();
      if (__OFSUB__(v66 >> 1, v64))
      {
LABEL_187:
        __break(1u);
LABEL_188:
        __break(1u);
LABEL_189:
        __break(1u);
LABEL_190:
        __break(1u);
LABEL_191:
        __break(1u);
        goto LABEL_192;
      }
      BOOL v67 = v62 < (uint64_t)((v66 >> 1) - v64);
LABEL_24:
      uint64_t v2 = v209;
      v41(v201, v209);
      v41(v43, v2);
      uint64_t v31 = v206;
      if ((v198 ^ v67)) {
        break;
      }
      uint64_t v32 = v202;
      uint64_t v42 = v202 + 1;
      if (v202 + 1 == v206)
      {
        uint64_t v42 = v206;
        uint64_t v33 = v210;
        goto LABEL_43;
      }
    }
    uint64_t v33 = v210;
    uint64_t v42 = v202;
LABEL_43:
    uint64_t v74 = v203;
    uint64_t v30 = v205;
    if ((v198 & 1) == 0)
    {
LABEL_57:
      if ((uint64_t)v42 >= (uint64_t)v31) {
        goto LABEL_99;
      }
      if (__OFSUB__(v42, v30)) {
        goto LABEL_198;
      }
      if ((uint64_t)&v42[-v30] >= v194) {
        goto LABEL_99;
      }
      uint64_t v84 = (char *)(v30 + v194);
      if (__OFADD__(v30, v194)) {
        goto LABEL_200;
      }
      if ((uint64_t)v84 >= (uint64_t)v31) {
        uint64_t v84 = v31;
      }
      if ((uint64_t)v84 < v30) {
        goto LABEL_201;
      }
      if (v42 == v84) {
        goto LABEL_99;
      }
      uint64_t v211 = *(void *)(v74 + 72);
      v206 = *(char **)(v74 + 16);
      v198 = v84;
      while (2)
      {
        v202 = v42;
        uint64_t v86 = v42;
        while (1)
        {
          uint64_t v87 = v86 - 1;
          uint64_t v88 = *v33;
          uint64_t v89 = v211;
          uint64_t v90 = v211 * (void)v86;
          uint64_t v91 = *v33 + v211 * (void)v86;
          uint64_t v92 = v206;
          ((void (*)(char *, uint64_t, uint64_t))v206)(v216, v91, v2);
          uint64_t v213 = (uint64_t)v87;
          uint64_t v93 = v89 * (void)v87;
          ((void (*)(char *, uint64_t, uint64_t))v92)(v214, v88 + v93, v2);
          sub_24A2A7470();
          uint64_t v95 = v94;
          uint64_t v97 = v96;
          unint64_t v99 = v98;
          sub_24A2A7470();
          int64_t v103 = v99 >> 1;
          if (v97 != v99 >> 1)
          {
            if (v97 >= (uint64_t)(v99 >> 1)) {
              goto LABEL_170;
            }
            int64_t v104 = v102 >> 1;
            if (v101 != v102 >> 1) {
              break;
            }
          }
          uint64_t v2 = v209;
          uint64_t v33 = v210;
LABEL_76:
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          sub_24A2A7470();
          uint64_t v106 = v105;
          unint64_t v108 = v107;
          swift_unknownObjectRelease();
          uint64_t v109 = (v108 >> 1) - v106;
          if (__OFSUB__(v108 >> 1, v106)) {
            goto LABEL_168;
          }
          uint64_t v110 = v214;
          sub_24A2A7470();
          uint64_t v112 = v111;
          unint64_t v114 = v113;
          swift_unknownObjectRelease();
          BOOL v148 = __OFSUB__(v114 >> 1, v112);
          uint64_t v115 = (v114 >> 1) - v112;
          if (v148) {
            goto LABEL_169;
          }
          uint64_t v116 = *v207;
          (*v207)(v110, v2);
          v116(v216, v2);
          uint64_t v30 = v205;
          if (v109 >= v115) {
            goto LABEL_68;
          }
          uint64_t v117 = *v33;
          if (!*v33) {
            goto LABEL_203;
          }
LABEL_80:
          unint64_t v118 = v117 + v90;
          uint64_t v119 = v117 + v93;
          uint64_t v120 = *v215;
          ((void (*)(char *, uint64_t, uint64_t))*v215)(v212, v117 + v90, v2);
          if (v90 < v93 || v118 >= v119 + v211) {
            swift_arrayInitWithTakeFrontToBack();
          }
          ((void (*)(uint64_t, char *, uint64_t))v120)(v119, v212, v2);
          uint64_t v86 = (char *)v213;
          if (v213 == v30) {
            goto LABEL_68;
          }
        }
        uint64_t v2 = v209;
        if (v101 >= (uint64_t)(v102 >> 1)) {
          goto LABEL_175;
        }
        unsigned int v121 = *(unsigned __int8 *)(v95 + v97);
        unsigned int v122 = *(unsigned __int8 *)(v100 + v101);
        if (v121 < v122)
        {
          uint64_t v33 = v210;
LABEL_86:
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          uint64_t v123 = *v207;
          (*v207)(v214, v2);
          v123(v216, v2);
          uint64_t v117 = *v33;
          if (!*v33) {
            goto LABEL_203;
          }
          goto LABEL_80;
        }
        if (v122 >= v121)
        {
          uint64_t v124 = 0;
          uint64_t v125 = ~v97 + v103;
          uint64_t v126 = v97 + 1;
          uint64_t v127 = v97 + 1 + v95;
          uint64_t v128 = v101 + 1;
          uint64_t v33 = v210;
          while (1)
          {
            if (v125 == v124) {
              goto LABEL_76;
            }
            if (v126 + v124 >= v103) {
              break;
            }
            if (~v101 + v104 == v124) {
              goto LABEL_76;
            }
            if (v128 + v124 < v101 || v128 + v124 >= v104) {
              goto LABEL_167;
            }
            unsigned int v129 = *(unsigned __int8 *)(v127 + v124);
            unsigned int v130 = *(unsigned __int8 *)(v101 + 1 + v100 + v124);
            if (v129 < v130) {
              goto LABEL_86;
            }
            ++v124;
            if (v130 < v129) {
              goto LABEL_67;
            }
          }
          __break(1u);
LABEL_167:
          __break(1u);
LABEL_168:
          __break(1u);
LABEL_169:
          __break(1u);
LABEL_170:
          __break(1u);
LABEL_171:
          __break(1u);
LABEL_172:
          __break(1u);
LABEL_173:
          __break(1u);
LABEL_174:
          __break(1u);
LABEL_175:
          __break(1u);
LABEL_176:
          __break(1u);
LABEL_177:
          __break(1u);
LABEL_178:
          __break(1u);
LABEL_179:
          __break(1u);
LABEL_180:
          __break(1u);
LABEL_181:
          __break(1u);
LABEL_182:
          __break(1u);
LABEL_183:
          __break(1u);
LABEL_184:
          __break(1u);
LABEL_185:
          __break(1u);
LABEL_186:
          __break(1u);
          goto LABEL_187;
        }
        uint64_t v33 = v210;
LABEL_67:
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        uint64_t v85 = *v207;
        (*v207)(v214, v2);
        v85(v216, v2);
LABEL_68:
        uint64_t v42 = v202 + 1;
        if (v202 + 1 != v198) {
          continue;
        }
        break;
      }
      uint64_t v42 = v198;
      uint64_t v29 = v195;
LABEL_99:
      if ((uint64_t)v42 < v30) {
        goto LABEL_197;
      }
      uint64_t v131 = (uint64_t)v42;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v29 = sub_24A1EC9D4(0, *((void *)v29 + 2) + 1, 1, v29);
      }
      unint64_t v133 = *((void *)v29 + 2);
      unint64_t v132 = *((void *)v29 + 3);
      unint64_t v134 = v133 + 1;
      if (v133 >= v132 >> 1) {
        uint64_t v29 = sub_24A1EC9D4((char *)(v132 > 1), v133 + 1, 1, v29);
      }
      *((void *)v29 + 2) = v134;
      uint64_t v135 = v29 + 32;
      uint64_t v136 = &v29[16 * v133 + 32];
      *(void *)uint64_t v136 = v30;
      *((void *)v136 + 1) = v131;
      if (v133)
      {
        while (1)
        {
          unint64_t v137 = v134 - 1;
          if (v134 >= 4)
          {
            uint64_t v142 = &v135[16 * v134];
            uint64_t v143 = *((void *)v142 - 8);
            uint64_t v144 = *((void *)v142 - 7);
            BOOL v148 = __OFSUB__(v144, v143);
            uint64_t v145 = v144 - v143;
            if (v148) {
              goto LABEL_176;
            }
            uint64_t v147 = *((void *)v142 - 6);
            uint64_t v146 = *((void *)v142 - 5);
            BOOL v148 = __OFSUB__(v146, v147);
            uint64_t v140 = v146 - v147;
            char v141 = v148;
            if (v148) {
              goto LABEL_177;
            }
            unint64_t v149 = v134 - 2;
            uint64_t v150 = &v135[16 * v134 - 32];
            uint64_t v152 = *(void *)v150;
            uint64_t v151 = *((void *)v150 + 1);
            BOOL v148 = __OFSUB__(v151, v152);
            uint64_t v153 = v151 - v152;
            if (v148) {
              goto LABEL_179;
            }
            BOOL v148 = __OFADD__(v140, v153);
            uint64_t v154 = v140 + v153;
            if (v148) {
              goto LABEL_182;
            }
            if (v154 >= v145)
            {
              v172 = &v135[16 * v137];
              uint64_t v174 = *(void *)v172;
              uint64_t v173 = *((void *)v172 + 1);
              BOOL v148 = __OFSUB__(v173, v174);
              uint64_t v175 = v173 - v174;
              if (v148) {
                goto LABEL_191;
              }
              BOOL v165 = v140 < v175;
              goto LABEL_136;
            }
          }
          else
          {
            if (v134 != 3)
            {
              uint64_t v166 = *((void *)v29 + 4);
              uint64_t v167 = *((void *)v29 + 5);
              BOOL v148 = __OFSUB__(v167, v166);
              uint64_t v159 = v167 - v166;
              char v160 = v148;
              goto LABEL_130;
            }
            uint64_t v139 = *((void *)v29 + 4);
            uint64_t v138 = *((void *)v29 + 5);
            BOOL v148 = __OFSUB__(v138, v139);
            uint64_t v140 = v138 - v139;
            char v141 = v148;
          }
          if (v141) {
            goto LABEL_178;
          }
          unint64_t v149 = v134 - 2;
          unint64_t v155 = &v135[16 * v134 - 32];
          uint64_t v157 = *(void *)v155;
          uint64_t v156 = *((void *)v155 + 1);
          BOOL v158 = __OFSUB__(v156, v157);
          uint64_t v159 = v156 - v157;
          char v160 = v158;
          if (v158) {
            goto LABEL_181;
          }
          uint64_t v161 = &v135[16 * v137];
          uint64_t v163 = *(void *)v161;
          uint64_t v162 = *((void *)v161 + 1);
          BOOL v148 = __OFSUB__(v162, v163);
          uint64_t v164 = v162 - v163;
          if (v148) {
            goto LABEL_184;
          }
          if (__OFADD__(v159, v164)) {
            goto LABEL_185;
          }
          if (v159 + v164 >= v140)
          {
            BOOL v165 = v140 < v164;
LABEL_136:
            if (v165) {
              unint64_t v137 = v149;
            }
            goto LABEL_138;
          }
LABEL_130:
          if (v160) {
            goto LABEL_180;
          }
          v168 = &v135[16 * v137];
          uint64_t v170 = *(void *)v168;
          uint64_t v169 = *((void *)v168 + 1);
          BOOL v148 = __OFSUB__(v169, v170);
          uint64_t v171 = v169 - v170;
          if (v148) {
            goto LABEL_183;
          }
          if (v171 < v159) {
            goto LABEL_147;
          }
LABEL_138:
          unint64_t v176 = v137 - 1;
          if (v137 - 1 >= v134) {
            goto LABEL_171;
          }
          if (!*v210) {
            goto LABEL_204;
          }
          v177 = &v135[16 * v176];
          uint64_t v178 = *(void *)v177;
          uint64_t v179 = &v135[16 * v137];
          uint64_t v180 = *((void *)v179 + 1);
          uint64_t v181 = v204;
          sub_24A1EC36C(*v210 + *(void *)(v203 + 72) * *(void *)v177, *v210 + *(void *)(v203 + 72) * *(void *)v179, *v210 + *(void *)(v203 + 72) * v180, v200);
          uint64_t v204 = v181;
          if (v181) {
            goto LABEL_164;
          }
          if (v180 < v178) {
            goto LABEL_172;
          }
          if (v137 > *((void *)v29 + 2)) {
            goto LABEL_173;
          }
          *(void *)v177 = v178;
          *(void *)&v135[16 * v176 + 8] = v180;
          unint64_t v182 = *((void *)v29 + 2);
          if (v137 >= v182) {
            goto LABEL_174;
          }
          unint64_t v134 = v182 - 1;
          memmove(&v135[16 * v137], v179 + 16, 16 * (v182 - 1 - v137));
          *((void *)v29 + 2) = v182 - 1;
          if (v182 <= 2) {
            goto LABEL_147;
          }
        }
      }
      unint64_t v134 = 1;
LABEL_147:
      uint64_t v2 = v209;
      uint64_t v31 = (char *)v210[1];
      uint64_t v30 = v131;
      if (v131 >= (uint64_t)v31)
      {
        a1 = v210;
        if (v134 < 2) {
          goto LABEL_164;
        }
        goto LABEL_152;
      }
      continue;
    }
    break;
  }
  if ((uint64_t)v42 >= v205)
  {
    if (v205 < (uint64_t)v42)
    {
      uint64_t v75 = 0;
      uint64_t v76 = v213 * (void)(v42 - 1);
      uint64_t v77 = (void)v42 * v213;
      uint64_t v78 = v205 * v213;
      do
      {
        if ((char *)v30 != &v42[v75 - 1])
        {
          uint64_t v80 = v211;
          if (!v211) {
            goto LABEL_205;
          }
          uint64_t v81 = v42;
          unint64_t v82 = v211 + v78;
          uint64_t v83 = v211 + v76;
          v202 = *v215;
          ((void (*)(char *, uint64_t, uint64_t))v202)(v197, v211 + v78, v209);
          if (v78 < v76 || v82 >= v80 + v77)
          {
            uint64_t v79 = v209;
            swift_arrayInitWithTakeFrontToBack();
          }
          else
          {
            uint64_t v79 = v209;
            if (v78 != v76) {
              swift_arrayInitWithTakeBackToFront();
            }
          }
          ((void (*)(uint64_t, char *, uint64_t))v202)(v83, v197, v79);
          uint64_t v74 = v203;
          uint64_t v33 = v210;
          uint64_t v29 = v195;
          uint64_t v42 = v81;
        }
        ++v30;
        --v75;
        v76 -= v213;
        v77 -= v213;
        v78 += v213;
      }
      while (v30 < (uint64_t)&v42[v75]);
      uint64_t v2 = v209;
      uint64_t v30 = v205;
      uint64_t v31 = v206;
    }
    goto LABEL_57;
  }
LABEL_202:
  __break(1u);
LABEL_203:
  __break(1u);
LABEL_204:
  __break(1u);
LABEL_205:
  __break(1u);
LABEL_206:
  __break(1u);
LABEL_207:
  uint64_t result = sub_24A2A7D10();
  __break(1u);
  return result;
}

uint64_t sub_24A1EBF10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unsigned int v73 = a4;
  uint64_t v65 = a1;
  uint64_t v69 = sub_24A2A7480();
  uint64_t v6 = MEMORY[0x270FA5388](v69);
  uint64_t v71 = (char *)&v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v74 = (char *)&v62 - v9;
  uint64_t result = MEMORY[0x270FA5388](v8);
  uint64_t v75 = (char *)&v62 - v12;
  uint64_t v63 = a2;
  if (a3 == a2) {
    return result;
  }
  uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  uint64_t v13 = v11 + 16;
  uint64_t v70 = *(void *)(v13 + 56);
  unint64_t v66 = (void (**)(char *, uint64_t))(v13 - 8);
  BOOL v67 = v14;
  uint64_t v68 = v13;
  uint64_t v15 = (void (**)(char *, uint64_t, uint64_t))(v13 + 16);
LABEL_6:
  uint64_t v64 = a3;
  uint64_t v17 = a3;
  uint64_t v18 = v69;
  while (1)
  {
    uint64_t v19 = v17 - 1;
    uint64_t v20 = *v73;
    uint64_t v21 = v70;
    uint64_t v72 = v70 * v17;
    uint64_t v22 = v67;
    v67(v75, v20 + v70 * v17, v18);
    uint64_t v23 = v21 * v19;
    v22(v74, v20 + v23, v18);
    sub_24A2A7470();
    uint64_t v25 = v24;
    uint64_t v27 = v26;
    unint64_t v29 = v28;
    uint64_t result = sub_24A2A7470();
    int64_t v33 = v29 >> 1;
    if (v27 != v29 >> 1)
    {
      if (v27 >= (uint64_t)(v29 >> 1)) {
        goto LABEL_36;
      }
      int64_t v34 = v32 >> 1;
      if (v31 != v32 >> 1)
      {
        if (v31 >= (uint64_t)(v32 >> 1)) {
          goto LABEL_37;
        }
        unsigned int v55 = *(unsigned __int8 *)(v25 + v27);
        unsigned int v56 = *(unsigned __int8 *)(v30 + v31);
        if (v55 < v56)
        {
LABEL_21:
          uint64_t v46 = v23;
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          int64_t v57 = *v66;
          (*v66)(v74, v18);
          uint64_t result = ((uint64_t (*)(char *, uint64_t))v57)(v75, v18);
          goto LABEL_15;
        }
        if (v56 < v55)
        {
LABEL_4:
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          uint64_t v16 = *v66;
          (*v66)(v74, v18);
          uint64_t result = ((uint64_t (*)(char *, uint64_t))v16)(v75, v18);
LABEL_5:
          a3 = v64 + 1;
          if (v64 + 1 == v63) {
            return result;
          }
          goto LABEL_6;
        }
        uint64_t v58 = 0;
        uint64_t v59 = v31 + 1;
        while (~v27 + v33 != v58)
        {
          if (v27 + 1 + v58 >= v33)
          {
            __break(1u);
LABEL_33:
            __break(1u);
            goto LABEL_34;
          }
          if (~v31 + v34 == v58) {
            break;
          }
          if (v59 + v58 < v31 || v59 + v58 >= v34) {
            goto LABEL_33;
          }
          unsigned int v60 = *(unsigned __int8 *)(v27 + 1 + v25 + v58);
          unsigned int v61 = *(unsigned __int8 *)(v31 + 1 + v30 + v58);
          if (v60 < v61) {
            goto LABEL_21;
          }
          ++v58;
          if (v61 < v60) {
            goto LABEL_4;
          }
        }
      }
    }
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    sub_24A2A7470();
    uint64_t v36 = v35;
    unint64_t v38 = v37;
    uint64_t result = swift_unknownObjectRelease();
    uint64_t v39 = (v38 >> 1) - v36;
    if (__OFSUB__(v38 >> 1, v36)) {
      break;
    }
    uint64_t v40 = v74;
    sub_24A2A7470();
    uint64_t v42 = v41;
    unint64_t v44 = v43;
    uint64_t result = swift_unknownObjectRelease();
    uint64_t v45 = (v44 >> 1) - v42;
    if (__OFSUB__(v44 >> 1, v42)) {
      goto LABEL_35;
    }
    uint64_t v46 = v23;
    uint64_t v47 = *v66;
    (*v66)(v40, v18);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v47)(v75, v18);
    if (v39 >= v45) {
      goto LABEL_5;
    }
LABEL_15:
    uint64_t v48 = *v73;
    if (!*v73) {
      goto LABEL_38;
    }
    uint64_t v49 = v72;
    unint64_t v50 = v48 + v72;
    uint64_t v51 = v46;
    uint64_t v52 = v48 + v46;
    uint64_t v53 = *v15;
    uint64_t v54 = v69;
    (*v15)(v71, v48 + v72, v69);
    if (v49 < v51 || v50 >= v52 + v70) {
      swift_arrayInitWithTakeFrontToBack();
    }
    uint64_t result = ((uint64_t (*)(uint64_t, char *, uint64_t))v53)(v52, v71, v54);
    uint64_t v17 = v19;
    uint64_t v18 = v54;
    if (v19 == v65) {
      goto LABEL_5;
    }
  }
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

uint64_t sub_24A1EC36C(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8 = sub_24A2A7480();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v11 = MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v60 - v12;
  uint64_t v14 = MEMORY[0x270FA5388](v11);
  uint64_t v16 = (char *)&v60 - v15;
  MEMORY[0x270FA5388](v14);
  uint64_t v19 = (char *)&v60 - v18;
  uint64_t v68 = *(void *)(v20 + 72);
  if (!v68)
  {
    __break(1u);
LABEL_76:
    __break(1u);
LABEL_77:
    __break(1u);
    goto LABEL_78;
  }
  uint64_t v65 = v13;
  unint64_t v21 = a1;
  if (a2 - a1 == 0x8000000000000000 && v68 == -1) {
    goto LABEL_76;
  }
  int64_t v22 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v68 == -1) {
    goto LABEL_77;
  }
  uint64_t v23 = (uint64_t)(a2 - a1) / v68;
  unint64_t v72 = a1;
  unint64_t v71 = a4;
  uint64_t v24 = v22 / v68;
  if (v23 >= v22 / v68)
  {
    if ((v24 & 0x8000000000000000) == 0)
    {
      uint64_t v63 = v17;
      unint64_t v64 = a1;
      uint64_t v26 = v24 * v68;
      if (a4 < a2 || a2 + v26 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      unint64_t v39 = a4 + v26;
      unint64_t v70 = a4 + v26;
      unint64_t v72 = a2;
      if (v26 >= 1 && v64 < a2)
      {
        uint64_t v41 = *(void (**)(uint64_t, unint64_t, uint64_t))(v9 + 16);
        uint64_t v67 = v9 + 16;
        uint64_t v42 = (void (**)(uint64_t, uint64_t))(v9 + 8);
        uint64_t v43 = -v68;
        unsigned int v61 = v41;
        uint64_t v62 = v42;
        unint64_t v60 = a4;
        while (1)
        {
          unint64_t v44 = a2;
          uint64_t v45 = v65;
          uint64_t v46 = v61;
          v61((uint64_t)v65, v39 + v43, v8);
          uint64_t v68 = v44;
          unint64_t v47 = v44 + v43;
          uint64_t v48 = v8;
          uint64_t v49 = v63;
          v46(v63, v47, v48);
          uint64_t v50 = v69;
          char v51 = sub_24A1EAD90();
          if (v50) {
            break;
          }
          char v52 = v51;
          uint64_t v69 = 0;
          unint64_t v53 = a3;
          unint64_t v66 = a3 + v43;
          uint64_t v54 = *v62;
          (*v62)(v49, v48);
          v54((uint64_t)v45, v48);
          uint64_t v8 = v48;
          if (v52)
          {
            a3 = v66;
            if (v53 < v68 || v66 >= v68)
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v53 != v68)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            v72 += v43;
          }
          else
          {
            unint64_t v55 = v70;
            v70 += v43;
            a3 = v66;
            BOOL v56 = v53 < v55 || v66 >= v55;
            unint64_t v47 = v68;
            if (v56)
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v53 != v55)
            {
              swift_arrayInitWithTakeBackToFront();
            }
          }
          unint64_t v39 = v70;
          if (v70 > v60)
          {
            a2 = v47;
            if (v47 > v64) {
              continue;
            }
          }
          goto LABEL_74;
        }
        uint64_t v58 = *v62;
        (*v62)(v49, v48);
        v58((uint64_t)v45, v48);
      }
      goto LABEL_74;
    }
  }
  else if ((v23 & 0x8000000000000000) == 0)
  {
    uint64_t v25 = v23 * v68;
    if (a4 < v21 || v21 + v25 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != v21)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    unint64_t v66 = a4 + v25;
    unint64_t v70 = a4 + v25;
    if (v25 >= 1 && a2 < a3)
    {
      uint64_t v65 = (char *)a3;
      unint64_t v28 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
      uint64_t v67 = v9 + 16;
      unint64_t v29 = (void (**)(char *, uint64_t))(v9 + 8);
      while (1)
      {
        v28(v19, a2, v8);
        v28(v16, a4, v8);
        uint64_t v30 = v69;
        char v31 = sub_24A1EAD90();
        uint64_t v69 = v30;
        if (v30) {
          break;
        }
        char v32 = v31;
        int64_t v33 = *v29;
        (*v29)(v16, v8);
        v33(v19, v8);
        unint64_t v34 = v72;
        if (v32)
        {
          unint64_t v35 = a2 + v68;
          if (v72 < a2 || v72 >= v35)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v72 == a2)
          {
            unint64_t v34 = a2;
          }
          else
          {
            swift_arrayInitWithTakeBackToFront();
          }
        }
        else
        {
          unint64_t v37 = v71 + v68;
          if (v72 < v71 || v72 >= v37)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v72 != v71)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          unint64_t v71 = v37;
          unint64_t v35 = a2;
        }
        unint64_t v72 = v34 + v68;
        a4 = v71;
        if (v71 < v66)
        {
          a2 = v35;
          if (v35 < (unint64_t)v65) {
            continue;
          }
        }
        goto LABEL_74;
      }
      int64_t v57 = *v29;
      (*v29)(v16, v8);
      v57(v19, v8);
    }
LABEL_74:
    sub_24A1ECB8C(&v72, &v71, (uint64_t *)&v70);
    return 1;
  }
LABEL_78:
  uint64_t result = sub_24A2A7D70();
  __break(1u);
  return result;
}

char *sub_24A1EC9D4(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_269778E28);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_24A1ECAD0(void **a1, const void **a2, void *a3)
{
  uint64_t v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 15;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -16)
  {
    uint64_t result = (char *)sub_24A2A7D70();
    __break(1u);
  }
  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 4;
    if (result != v3 || result >= &v3[16 * v7])
    {
      return (char *)memmove(result, v3, 16 * v7);
    }
  }
  return result;
}

uint64_t sub_24A1ECB8C(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v3 = *a1;
  unint64_t v4 = *a2;
  uint64_t v5 = *a3;
  uint64_t result = sub_24A2A7480();
  uint64_t v7 = *(void *)(*(void *)(result - 8) + 72);
  if (!v7)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v8 = v5 - v4;
  if (v5 - v4 == 0x8000000000000000 && v7 == -1) {
    goto LABEL_18;
  }
  if (v8 / v7 < 0)
  {
LABEL_19:
    uint64_t result = sub_24A2A7D70();
    __break(1u);
    return result;
  }
  if (v3 < v4 || v3 >= v4 + v8 / v7 * v7)
  {
    return swift_arrayInitWithTakeFrontToBack();
  }
  else if (v3 != v4)
  {
    return swift_arrayInitWithTakeBackToFront();
  }
  return result;
}

char *sub_24A1ECCCC(uint64_t a1)
{
  return sub_24A1EC9D4(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_24A1ECCE0(uint64_t a1)
{
  return sub_24A2460C0(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_24A1ECCF4(void *a1)
{
  return sub_24A2460A0(0, a1[2], 0, a1);
}

unint64_t sub_24A1ECD08()
{
  unint64_t result = qword_26B174AF8;
  if (!qword_26B174AF8)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26B174B08);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B174AF8);
  }
  return result;
}

uint64_t sub_24A1ECD58()
{
  swift_unknownObjectRelease();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t SEP.Attestation.init(from:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)&long long v11 = sub_24A1B94D4(*MEMORY[0x263F276F8]);
  *((void *)&v11 + 1) = v6;
  sub_24A1CF5C4(&v11, 0);
  long long v12 = v11;
  sub_24A1A52B0(a1, a2);
  int v7 = sub_24A1CF86C((uint64_t *)&v12, a1, a2);
  uint64_t result = sub_24A1A5384(a1, a2);
  if (v7)
  {
    sub_24A1CFC44();
    swift_allocError();
    unsigned char *v9 = 0;
    swift_willThrow();
    sub_24A1A5384(a1, a2);
    return sub_24A1A5384(v12, *((unint64_t *)&v12 + 1));
  }
  else
  {
    long long v10 = v12;
    *(void *)a3 = a1;
    *(void *)(a3 + 8) = a2;
    *(_OWORD *)(a3 + 16) = v10;
  }
  return result;
}

uint64_t SEP.Attestation.nonce.getter()
{
  return sub_24A1EFC9C((void (*)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, void *, uint64_t *))sub_24A1EED1C);
}

uint64_t SEP.Attestation.publicKeyData.getter@<X0>(uint64_t a1@<X8>)
{
  v32[1] = *(unsigned char **)MEMORY[0x263EF8340];
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174248);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v26 - v7;
  uint64_t v10 = *v1;
  unint64_t v9 = v1[1];
  uint64_t v11 = v1[2];
  unint64_t v12 = v1[3];
  v32[0] = 0;
  uint64_t v27 = 0;
  sub_24A1A52B0(v10, v9);
  sub_24A1A52B0(v11, v12);
  sub_24A1EEAE4(v11, v12, v32, &v27, &v28);
  sub_24A1A5384(v10, v9);
  uint64_t result = sub_24A1A5384(v11, v12);
  unint64_t v14 = v29;
  if (v29 >> 60 == 15)
  {
LABEL_11:
    *(_OWORD *)a1 = xmmword_24A2AAEE0;
  }
  else
  {
    uint64_t v15 = v28;
    switch(v29 >> 62)
    {
      case 1uLL:
        if ((int)v28 != v28 >> 32) {
          goto LABEL_4;
        }
        goto LABEL_10;
      case 2uLL:
        if (*(void *)(v28 + 16) == *(void *)(v28 + 24)) {
          goto LABEL_10;
        }
        goto LABEL_4;
      case 3uLL:
        goto LABEL_10;
      default:
        if ((v29 & 0xFF000000000000) == 0)
        {
LABEL_10:
          uint64_t result = sub_24A1B7B78(v28, v29);
          goto LABEL_11;
        }
LABEL_4:
        uint64_t v28 = v10;
        unint64_t v29 = v9;
        uint64_t v30 = v11;
        unint64_t v31 = v12;
        SEP.Attestation.keyType.getter((uint64_t)v8);
        uint64_t v16 = sub_24A2A6C30();
        uint64_t v17 = *(void *)(v16 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v8, 1, v16) == 1) {
          goto LABEL_24;
        }
        sub_24A1F09C8((uint64_t)v8, (uint64_t)v6);
        int v18 = (*(uint64_t (**)(char *, uint64_t))(v17 + 88))(v6, v16);
        if (v18 == *MEMORY[0x263F276B8])
        {
          *(void *)a1 = v15;
          *(void *)(a1 + 8) = v14 | 0x2000000000000000;
        }
        else
        {
          if (v18 == *MEMORY[0x263F276C0]
            || v18 == *MEMORY[0x263F276D0]
            || v18 == *MEMORY[0x263F276C8]
            || v18 == *MEMORY[0x263F276D8])
          {
            uint64_t result = sub_24A1F0968((uint64_t)v8);
            *(void *)a1 = v15;
            *(void *)(a1 + 8) = v14;
            return result;
          }
          (*(void (**)(char *, uint64_t))(v17 + 8))(v6, v16);
LABEL_24:
          if (qword_2697783E8 != -1) {
            swift_once();
          }
          uint64_t v22 = sub_24A2A7160();
          __swift_project_value_buffer(v22, (uint64_t)qword_26977A420);
          uint64_t v23 = sub_24A2A7140();
          os_log_type_t v24 = sub_24A2A7B20();
          if (os_log_type_enabled(v23, v24))
          {
            uint64_t v25 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v25 = 0;
            _os_log_impl(&dword_24A19F000, v23, v24, "Unsupported public key type", v25, 2u);
            MEMORY[0x24C5C00A0](v25, -1, -1);

            sub_24A1B7B78(v15, v14);
          }
          else
          {
            sub_24A1B7B78(v15, v14);
          }
          *(_OWORD *)a1 = xmmword_24A2AAEE0;
        }
        uint64_t result = sub_24A1F0968((uint64_t)v8);
        break;
    }
  }
  return result;
}

uint64_t SEP.Attestation.identity.getter@<X0>(uint64_t a1@<X8>)
{
  v6[1] = *(unsigned char **)MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(v1 + 16);
  unint64_t v3 = *(void *)(v1 + 24);
  uint64_t v5 = 0;
  v6[0] = 0;
  return sub_24A1EDD20(v2, v3, v6, &v5, a1);
}

uint64_t sub_24A1ED344()
{
  uint64_t v0 = sub_24A2A7160();
  __swift_allocate_value_buffer(v0, qword_26977A420);
  __swift_project_value_buffer(v0, (uint64_t)qword_26977A420);
  return sub_24A2A7150();
}

uint64_t SEP.Attestation.data.getter()
{
  uint64_t v1 = *(void *)v0;
  sub_24A1A52B0(*(void *)v0, *(void *)(v0 + 8));
  return v1;
}

uint64_t sub_24A1ED3FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, _DWORD *a4@<X8>)
{
  if (!a1) {
    goto LABEL_19;
  }
  switch(a3 >> 62)
  {
    case 1uLL:
      if (a2 >> 32 < (int)a2)
      {
        __break(1u);
LABEL_16:
        __break(1u);
LABEL_17:
        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
      }
      sub_24A1A52B0(a2, a3);
      if (!sub_24A2A68E0())
      {
        sub_24A2A6900();
        __break(1u);
LABEL_21:
        __break(1u);
        JUMPOUT(0x24A1ED638);
      }
      if (__OFSUB__((int)a2, sub_24A2A6910())) {
        goto LABEL_17;
      }
      sub_24A2A6900();
      int v7 = aks_attest_context_init();
      uint64_t result = sub_24A1A5384(a2, a3);
LABEL_14:
      *a4 = v7;
      return result;
    case 2uLL:
      uint64_t v9 = *(void *)(a2 + 16);
      uint64_t v10 = *(void *)(a2 + 24);
      swift_retain();
      swift_retain();
      uint64_t v11 = sub_24A2A68E0();
      if (!v11) {
        goto LABEL_10;
      }
      uint64_t v12 = sub_24A2A6910();
      if (__OFSUB__(v9, v12)) {
        goto LABEL_18;
      }
      v11 += v9 - v12;
LABEL_10:
      if (__OFSUB__(v10, v9)) {
        goto LABEL_16;
      }
      sub_24A2A6900();
      if (!v11) {
        goto LABEL_21;
      }
      int v7 = aks_attest_context_init();
      swift_release();
      uint64_t result = swift_release();
      goto LABEL_14;
    default:
      uint64_t result = aks_attest_context_init();
      int v7 = result;
      goto LABEL_14;
  }
}

uint64_t SEP.Attestation.init<A>(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a2);
  uint64_t v8 = sub_24A2A6B20();
  unint64_t v10 = v9;
  *(void *)&long long v16 = sub_24A1B94D4(*MEMORY[0x263F276F8]);
  *((void *)&v16 + 1) = v11;
  sub_24A1CF5C4(&v16, 0);
  long long v17 = v16;
  sub_24A1A52B0(v8, v10);
  int v12 = sub_24A1CF86C((uint64_t *)&v17, v8, v10);
  sub_24A1A5384(v8, v10);
  if (v12)
  {
    sub_24A1CFC44();
    swift_allocError();
    unsigned char *v13 = 0;
    swift_willThrow();
    sub_24A1A5384(v8, v10);
    sub_24A1A5384(v17, *((unint64_t *)&v17 + 1));
    return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
  }
  else
  {
    long long v15 = v17;
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
    *(void *)a3 = v8;
    *(void *)(a3 + 8) = v10;
    *(_OWORD *)(a3 + 16) = v15;
  }
  return result;
}

uint64_t SEP.Attestation.init(from:signer:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  uint64_t v9 = *MEMORY[0x263F276F8];
  sub_24A1A52B0(a1, a2);
  error[0] = (CFErrorRef)sub_24A1B94D4(v9);
  error[1] = v10;
  sub_24A1CF5C4(error, 0);
  unsigned long long v39 = *(_OWORD *)error;
  sub_24A1A52B0(a1, a2);
  int v11 = sub_24A1CF86C((uint64_t *)&v39, a1, a2);
  uint64_t v12 = v4;
  sub_24A1A5384(a1, a2);
  if (v11)
  {
    sub_24A1CFC44();
    swift_allocError();
    unsigned char *v13 = 0;
    swift_willThrow();
    sub_24A1A5384(a1, a2);
    sub_24A1A5384(v39, *((unint64_t *)&v39 + 1));

    uint64_t v14 = a1;
    unint64_t v15 = a2;
    return sub_24A1A5384(v14, v15);
  }
  unint64_t v16 = *((void *)&v39 + 1);
  uint64_t v40 = a1;
  unint64_t v41 = a2;
  uint64_t v37 = v39;
  error[0] = 0;
  unsigned long long v42 = v39;
  CFDataRef v17 = SecKeyCopyExternalRepresentation((SecKeyRef)a3, error);
  if (!v17)
  {
    CFErrorRef v27 = error[0];
    if (!error[0])
    {
      __break(1u);
      JUMPOUT(0x24A1EDCA8);
    }
    type metadata accessor for CFError(0);
    sub_24A1F0A30();
    swift_allocError();
    *uint64_t v28 = v27;
    swift_willThrow();

    uint64_t v29 = a1;
    unint64_t v30 = a2;
LABEL_18:
    sub_24A1A5384(v29, v30);
    unsigned long long v35 = v42;
    sub_24A1A5384(v40, v41);
    unint64_t v15 = v35 >> 64;
    uint64_t v14 = v35;
    return sub_24A1A5384(v14, v15);
  }
  CFDataRef v18 = v17;
  uint64_t v19 = sub_24A2A6AD0();
  unint64_t v21 = v20;

  switch(v21 >> 62)
  {
    case 1uLL:
      if (v19 >> 32 < (int)v19) {
        __break(1u);
      }
      swift_retain();
      sub_24A1F00A4((int)v19, v19 >> 32, v21 & 0x3FFFFFFFFFFFFFFFLL, &v40);
      uint64_t v31 = v19;
      unint64_t v32 = v21;
      if (v4) {
        goto LABEL_16;
      }
      sub_24A1A5384(v19, v21);

      sub_24A1A5384(a1, a2);
      uint64_t result = sub_24A1A5384(v19, v21);
      uint64_t v22 = v37;
      goto LABEL_22;
    case 2uLL:
      uint64_t v34 = *(void *)(v19 + 24);
      uint64_t v36 = *(void *)(v19 + 16);
      swift_retain();
      swift_retain();
      sub_24A1F00A4(v36, v34, v21 & 0x3FFFFFFFFFFFFFFFLL, &v40);
      if (v12)
      {

        swift_release();
        swift_release();
        goto LABEL_17;
      }

      swift_release();
      swift_release();
      sub_24A1A5384(a1, a2);
      uint64_t result = sub_24A1A5384(v19, v21);
      uint64_t v22 = v37;
      goto LABEL_22;
    case 3uLL:
      *(void *)((char *)&v39 + 6) = 0;
      *(void *)&unsigned long long v39 = 0;
      sub_24A1A52B0(a1, a2);
      uint64_t v22 = v37;
      sub_24A1A52B0(v37, v16);
      uint64_t v23 = a1;
      uint64_t v24 = a2;
      uint64_t v25 = v37;
      unint64_t v26 = v16;
      goto LABEL_14;
    default:
      *(void *)&unsigned long long v39 = v19;
      WORD4(v39) = v21;
      BYTE10(v39) = BYTE2(v21);
      BYTE11(v39) = BYTE3(v21);
      BYTE12(v39) = BYTE4(v21);
      BYTE13(v39) = BYTE5(v21);
      sub_24A1A52B0(a1, a2);
      uint64_t v22 = v37;
      sub_24A1A52B0(v37, v16);
      uint64_t v23 = a1;
      uint64_t v24 = a2;
      uint64_t v25 = v37;
      unint64_t v26 = v16;
LABEL_14:
      sub_24A1EEF54(v23, v24, v25, v26, (uint64_t)&v39);
      if (v4)
      {
        sub_24A1A5384(a1, a2);
        uint64_t v31 = v22;
        unint64_t v32 = v16;
LABEL_16:
        sub_24A1A5384(v31, v32);

LABEL_17:
        sub_24A1A5384(a1, a2);
        uint64_t v29 = v19;
        unint64_t v30 = v21;
        goto LABEL_18;
      }
      sub_24A1A5384(a1, a2);
      sub_24A1A5384(v22, v16);

      sub_24A1A5384(a1, a2);
      uint64_t result = sub_24A1A5384(v19, v21);
LABEL_22:
      *a4 = a1;
      a4[1] = a2;
      a4[2] = v22;
      a4[3] = v16;
      break;
  }
  return result;
}

void sub_24A1EDCB8(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (aks_attest_context_verify())
    {
      sub_24A1CFC44();
      swift_allocError();
      *uint64_t v2 = 3;
      swift_willThrow();
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_24A1EDD20@<X0>(uint64_t a1@<X2>, unint64_t a2@<X3>, unsigned char **a3@<X4>, uint64_t *a4@<X5>, uint64_t a5@<X8>)
{
  _OWORD v13[2] = *MEMORY[0x263EF8340];
  switch(a2 >> 62)
  {
    case 1uLL:
      if (a1 >> 32 < (int)a1) {
        __break(1u);
      }
      sub_24A1A52B0(a1, a2);
      sub_24A1F0198((int)a1, a1 >> 32, a3, a4, a5);
      uint64_t result = sub_24A1A5384(a1, a2);
      break;
    case 2uLL:
      uint64_t v11 = *(void *)(a1 + 16);
      uint64_t v12 = *(void *)(a1 + 24);
      swift_retain();
      swift_retain();
      sub_24A1F0198(v11, v12, a3, a4, a5);
      swift_release();
      uint64_t result = swift_release();
      break;
    case 3uLL:
      memset(v13, 0, 14);
      goto LABEL_7;
    default:
      v13[0] = a1;
      LOWORD(v13[1]) = a2;
      BYTE2(v13[1]) = BYTE2(a2);
      BYTE3(v13[1]) = BYTE3(a2);
      BYTE4(v13[1]) = BYTE4(a2);
      BYTE5(v13[1]) = BYTE5(a2);
LABEL_7:
      uint64_t result = (uint64_t)sub_24A1EF280(v13, a3, a4, a5);
      break;
  }
  return result;
}

uint64_t sub_24A1EDF2C(void (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  v20[2] = *MEMORY[0x263EF8340];
  switch(a6 >> 62)
  {
    case 1uLL:
      if ((int)a5 > a5 >> 32)
      {
        __break(1u);
LABEL_13:
        __break(1u);
LABEL_14:
        __break(1u);
      }
      sub_24A1A52B0(a5, a6);
      uint64_t v9 = sub_24A2A68E0();
      if (!v9)
      {
        sub_24A2A6900();
        __break(1u);
LABEL_16:
        sub_24A2A6900();
        __break(1u);
        JUMPOUT(0x24A1EE160);
      }
      uint64_t v10 = v9;
      uint64_t v11 = sub_24A2A6910();
      uint64_t v12 = (int)a5 - v11;
      if (__OFSUB__((int)a5, v11)) {
        goto LABEL_14;
      }
      sub_24A2A6900();
      a1(v10 + v12);
      return sub_24A1A5384(a5, a6);
    case 2uLL:
      uint64_t v14 = *(void *)(a5 + 16);
      swift_retain();
      swift_retain();
      uint64_t v15 = sub_24A2A68E0();
      if (!v15) {
        goto LABEL_16;
      }
      uint64_t v16 = v15;
      uint64_t v17 = sub_24A2A6910();
      BOOL v18 = __OFSUB__(v14, v17);
      uint64_t v19 = v14 - v17;
      if (v18) {
        goto LABEL_13;
      }
      sub_24A2A6900();
      a1(v16 + v19);
      swift_release();
      return swift_release();
    case 3uLL:
      memset(v20, 0, 14);
      return ((uint64_t (*)(void *))a1)(v20);
    default:
      v20[0] = a5;
      LOWORD(v20[1]) = a6;
      BYTE2(v20[1]) = BYTE2(a6);
      BYTE3(v20[1]) = BYTE3(a6);
      BYTE4(v20[1]) = BYTE4(a6);
      BYTE5(v20[1]) = BYTE5(a6);
      return ((uint64_t (*)(void *))a1)(v20);
  }
}

uint64_t sub_24A1EE170@<X0>(uint64_t a1@<X2>, unint64_t a2@<X3>, unsigned char **a3@<X4>, uint64_t *a4@<X5>, uint64_t a5@<X6>, unint64_t a6@<X7>, void *a7@<X8>, uint64_t a8, unint64_t a9)
{
  return sub_24A1EE228(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t sub_24A1EE1CC@<X0>(uint64_t a1@<X2>, unint64_t a2@<X3>, unsigned char **a3@<X4>, uint64_t *a4@<X5>, uint64_t a5@<X6>, unint64_t a6@<X7>, void *a7@<X8>, uint64_t a8, unint64_t a9)
{
  return sub_24A1EE228(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t sub_24A1EE228@<X0>(uint64_t a1@<X2>, unint64_t a2@<X3>, unsigned char **a3@<X4>, uint64_t *a4@<X5>, uint64_t a5@<X6>, unint64_t a6@<X7>, void *a7@<X8>, uint64_t a8, unint64_t a9)
{
  void v23[2] = *MEMORY[0x263EF8340];
  sub_24A1A52B0(a5, a6);
  sub_24A1A52B0(a8, a9);
  sub_24A1A52B0(a5, a6);
  sub_24A1A52B0(a8, a9);
  switch(a2 >> 62)
  {
    case 1uLL:
      if (a1 >> 32 < (int)a1) {
        __break(1u);
      }
      sub_24A1A52B0(a5, a6);
      sub_24A1A52B0(a8, a9);
      sub_24A1A52B0(a5, a6);
      sub_24A1A52B0(a8, a9);
      sub_24A1A52B0(a1, a2);
      sub_24A1F0244((int)a1, a1 >> 32, a3, a4, a5, a6, a8, a7, a9);
      sub_24A1A5384(a1, a2);
      break;
    case 2uLL:
      unint64_t v20 = a4;
      uint64_t v17 = *(void *)(a1 + 16);
      uint64_t v18 = *(void *)(a1 + 24);
      sub_24A1A52B0(a5, a6);
      sub_24A1A52B0(a8, a9);
      sub_24A1A52B0(a5, a6);
      sub_24A1A52B0(a8, a9);
      swift_retain();
      swift_retain();
      sub_24A1F0244(v17, v18, a3, v20, a5, a6, a8, a7, a9);
      swift_release();
      swift_release();
      break;
    case 3uLL:
      memset(v23, 0, 14);
      sub_24A1A52B0(a5, a6);
      sub_24A1A52B0(a8, a9);
      sub_24A1A52B0(a5, a6);
      sub_24A1A52B0(a8, a9);
      uint64_t v15 = a7;
      uint64_t v14 = a3;
      uint64_t v16 = a4;
      goto LABEL_7;
    default:
      v23[0] = a1;
      LOWORD(v23[1]) = a2;
      BYTE2(v23[1]) = BYTE2(a2);
      BYTE3(v23[1]) = BYTE3(a2);
      BYTE4(v23[1]) = BYTE4(a2);
      BYTE5(v23[1]) = BYTE5(a2);
      sub_24A1A52B0(a5, a6);
      sub_24A1A52B0(a8, a9);
      sub_24A1A52B0(a5, a6);
      sub_24A1A52B0(a8, a9);
      uint64_t v15 = a7;
      uint64_t v14 = a3;
      uint64_t v16 = a4;
LABEL_7:
      sub_24A1EF3A8((uint64_t)v23, v14, v16, a5, a6, a8, a9, v15);
      break;
  }
  sub_24A1A5384(a5, a6);
  sub_24A1A5384(a8, a9);
  sub_24A1A5384(a5, a6);
  sub_24A1A5384(a8, a9);
  sub_24A1A5384(a5, a6);
  sub_24A1A5384(a8, a9);
  sub_24A1A5384(a5, a6);
  return sub_24A1A5384(a8, a9);
}

uint64_t sub_24A1EE5D8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return sub_24A1EE678(a1, a2, a3, a4);
}

uint64_t sub_24A1EE628(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return sub_24A1EE678(a1, a2, a3, a4);
}

uint64_t sub_24A1EE678(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  switch(a4 >> 62)
  {
    case 1uLL:
      if ((int)a3 > a3 >> 32) {
        __break(1u);
      }
      sub_24A1A52B0(a3, a4);
      uint64_t v6 = sub_24A1F08A0((int)a3);
      sub_24A1A5384(a3, a4);
      break;
    case 2uLL:
      uint64_t v7 = *(void *)(a3 + 16);
      swift_retain();
      swift_retain();
      uint64_t v6 = sub_24A1F08A0(v7);
      swift_release();
      swift_release();
      break;
    default:
      if (aks_attest_context_get_uint64()) {
        uint64_t v6 = 2;
      }
      else {
        uint64_t v6 = 0;
      }
      break;
  }
  return v6;
}

uint64_t sub_24A1EE860(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return sub_24A1EE678(a1, a2, a3, a4);
}

unint64_t sub_24A1EE8B0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = v4;
  switch(a4 >> 62)
  {
    case 1uLL:
      if ((int)a3 > a3 >> 32) {
        __break(1u);
      }
      sub_24A1A52B0(a3, a4);
      unint64_t v11 = sub_24A1F0DF4((int)a3);
      if (!v4)
      {
        LODWORD(v9) = v11;
        uint64_t v10 = HIDWORD(v11) & 1;
        sub_24A1A5384(a3, a4);
        goto LABEL_13;
      }
      unint64_t result = sub_24A1A5384(a3, a4);
      break;
    case 2uLL:
      uint64_t v13 = *(void *)(a3 + 16);
      swift_retain();
      swift_retain();
      unint64_t v9 = sub_24A1F0DF4(v13);
      swift_release();
      unint64_t result = swift_release();
      if (!v5)
      {
        uint64_t v10 = HIDWORD(v9) & 1;
        goto LABEL_13;
      }
      break;
    case 3uLL:
      int uint64 = aks_attest_context_get_uint64();
      LODWORD(v9) = 0;
      LOBYTE(v10) = uint64 != 0;
      if (!uint64) {
        LODWORD(v9) = 0;
      }
      goto LABEL_13;
    default:
      int v8 = aks_attest_context_get_uint64();
      LODWORD(v9) = 0;
      LOBYTE(v10) = v8 != 0;
      if (!v8) {
        LODWORD(v9) = 0;
      }
LABEL_13:
      unint64_t result = v9 | ((unint64_t)v10 << 32);
      break;
  }
  return result;
}

uint64_t sub_24A1EEAE4@<X0>(uint64_t a1@<X2>, unint64_t a2@<X3>, unsigned char **a3@<X4>, uint64_t *a4@<X5>, uint64_t *a5@<X8>)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      goto LABEL_5;
    case 2uLL:
      uint64_t v12 = *(void *)(a1 + 16);
      swift_retain();
      swift_retain();
      sub_24A1F04BC(v12, a3, a4, a5);
      swift_release();
      return swift_release();
    case 3uLL:
      if (aks_attest_context_get()) {
        goto LABEL_9;
      }
      uint64_t v10 = *a3;
      if (!*a3)
      {
        __break(1u);
        JUMPOUT(0x24A1EED0CLL);
      }
      goto LABEL_11;
    default:
      if (aks_attest_context_get())
      {
LABEL_9:
        uint64_t result = 0;
        unint64_t v13 = 0xF000000000000000;
LABEL_12:
        *a5 = result;
        a5[1] = v13;
        return result;
      }
      uint64_t v10 = *a3;
      if (*a3)
      {
LABEL_11:
        uint64_t result = sub_24A1F07EC(v10, *a4);
        goto LABEL_12;
      }
      __break(1u);
LABEL_5:
      if (a1 >> 32 < (int)a1) {
        __break(1u);
      }
      sub_24A1A52B0(a1, a2);
      sub_24A1F04BC((int)a1, a3, a4, a5);
      return sub_24A1A5384(a1, a2);
  }
}

uint64_t sub_24A1EED1C@<X0>(uint64_t a1@<X2>, unint64_t a2@<X3>, unsigned char **a3@<X4>, uint64_t *a4@<X5>, uint64_t *a5@<X8>)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      goto LABEL_5;
    case 2uLL:
      uint64_t v12 = *(void *)(a1 + 16);
      swift_retain();
      swift_retain();
      sub_24A1F0570(v12, a3, a4, a5);
      swift_release();
      return swift_release();
    case 3uLL:
      if (aks_attest_context_get()) {
        goto LABEL_9;
      }
      uint64_t v10 = *a3;
      if (!*a3)
      {
        __break(1u);
        JUMPOUT(0x24A1EEF44);
      }
      goto LABEL_11;
    default:
      if (aks_attest_context_get())
      {
LABEL_9:
        uint64_t result = 0;
        unint64_t v13 = 0xF000000000000000;
LABEL_12:
        *a5 = result;
        a5[1] = v13;
        return result;
      }
      uint64_t v10 = *a3;
      if (*a3)
      {
LABEL_11:
        uint64_t result = sub_24A1F07EC(v10, *a4);
        goto LABEL_12;
      }
      __break(1u);
LABEL_5:
      if (a1 >> 32 < (int)a1) {
        __break(1u);
      }
      sub_24A1A52B0(a1, a2);
      sub_24A1F0570((int)a1, a3, a4, a5);
      return sub_24A1A5384(a1, a2);
  }
}

void sub_24A1EEF54(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  v11[2] = *MEMORY[0x263EF8340];
  switch(a4 >> 62)
  {
    case 1uLL:
      if (a3 >> 32 < (int)a3) {
        __break(1u);
      }
      sub_24A1A52B0(a3, a4);
      sub_24A1F0018((int)a3, a3 >> 32, a4 & 0x3FFFFFFFFFFFFFFFLL, a5);
      sub_24A1A5384(a3, a4);
      break;
    case 2uLL:
      uint64_t v8 = a4 & 0x3FFFFFFFFFFFFFFFLL;
      uint64_t v9 = *(void *)(a3 + 16);
      uint64_t v10 = *(void *)(a3 + 24);
      swift_retain();
      swift_retain();
      sub_24A1F0018(v9, v10, v8, a5);
      swift_release();
      swift_release();
      break;
    case 3uLL:
      memset(v11, 0, 14);
      goto LABEL_7;
    default:
      v11[0] = a3;
      LOWORD(v11[1]) = a4;
      BYTE2(v11[1]) = BYTE2(a4);
      BYTE3(v11[1]) = BYTE3(a4);
      BYTE4(v11[1]) = BYTE4(a4);
      BYTE5(v11[1]) = BYTE5(a4);
LABEL_7:
      sub_24A1EDCB8((uint64_t)v11, a5);
      break;
  }
}

double SEP.Attestation.init<A>(from:signer:)@<D0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v9 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  (*(void (**)(char *, uint64_t))(v9 + 16))((char *)v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  uint64_t v11 = sub_24A2A6B20();
  SEP.Attestation.init(from:signer:)(v11, v12, a2, (uint64_t *)v15);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, a3);
  if (!v4)
  {
    double result = *(double *)v15;
    long long v14 = v15[1];
    *a4 = v15[0];
    a4[1] = v14;
  }
  return result;
}

unsigned char *sub_24A1EF280@<X0>(unsigned char *result@<X0>, unsigned char **a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X8>)
{
  if (result)
  {
    double result = (unsigned char *)aks_attest_context_get();
    if (!result)
    {
      double result = *a2;
      if (*a2)
      {
        uint64_t v8 = sub_24A1F07EC(result, *a3);
        unint64_t v10 = v9;
        uint64_t v11 = sub_24A2A7860();
        MEMORY[0x270FA5388](v11 - 8);
        sub_24A2A7850();
        uint64_t v12 = sub_24A2A7820();
        if (v13)
        {
          SEP.Identity.init(string:)(v12, v13, &v14);
          double result = (unsigned char *)sub_24A1A5384(v8, v10);
          uint64_t v7 = v15;
          if (v15 != 2)
          {
            *(_OWORD *)a4 = v14;
            goto LABEL_4;
          }
        }
        else
        {
          double result = (unsigned char *)sub_24A1A5384(v8, v10);
        }
      }
    }
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    uint64_t v7 = 2;
LABEL_4:
    *(void *)(a4 + 16) = v7;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t sub_24A1EF3A8@<X0>(uint64_t a1@<X0>, unsigned char **a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X4>, unint64_t a5@<X5>, uint64_t a6@<X6>, unint64_t a7@<X7>, void *a8@<X8>)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (!a1) {
    __break(1u);
  }
  if (aks_attest_context_get() || !*a2)
  {
    sub_24A1A5384(a4, a5);
    uint64_t result = sub_24A1A5384(a6, a7);
    *a8 = 0;
    a8[1] = 0;
    a8[2] = 0x3000000000000000;
  }
  else
  {
    uint64_t v16 = sub_24A1F07EC(*a2, *a3);
    unint64_t v18 = v17;
    uint64_t v19 = 0;
    unint64_t v20 = 0;
    sub_24A1A52B0(a4, a5);
    sub_24A1A52B0(a6, a7);
    sub_24A1EDD20(a6, a7, &v20, &v19, (uint64_t)v21);
    sub_24A1A5384(a4, a5);
    sub_24A1A5384(a6, a7);
    SEP.SealData.init(for:data:)(v16, v18, (uint64_t)a8);
    sub_24A1A5384(a4, a5);
    return sub_24A1A5384(a6, a7);
  }
  return result;
}

uint64_t SEP.Attestation.sealedHash(at:)(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v4 = v1[2];
  unint64_t v5 = v1[3];
  memset(v7, 0, 86);
  uint64_t v9 = a1;
  unint64_t v10 = v7;
  return sub_24A1EDF2C((void (*)(uint64_t))sub_24A1F0A7C, (uint64_t)v8, v2, v3, v4, v5);
}

uint64_t sub_24A1EF5A4@<X0>(uint64_t a1@<X2>, unsigned char *a2@<X8>)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  uint64_t v22 = sub_24A2A6BF0();
  char v23 = v4;
  char v24 = v5;
  char v25 = v6;
  char v26 = v7;
  char v27 = v8;
  char v28 = v9;
  char v29 = v10;
  char v30 = v11;
  if (aks_attest_context_get_sealed_hash())
  {
    uint64_t v12 = type metadata accessor for SEP.SealedHash(0);
    return (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(a2, 1, 1, v12);
  }
  else
  {
    long long v14 = *(_OWORD *)(a1 + 54);
    v21[0] = *(_OWORD *)(a1 + 38);
    v21[1] = v14;
    v21[2] = *(_OWORD *)(a1 + 70);
    uint64_t v15 = sub_24A1F07EC(v21, *(unsigned __int8 *)(a1 + 37));
    uint64_t v17 = v16;
    char v18 = *(unsigned char *)(a1 + 16);
    uint64_t v19 = type metadata accessor for SEP.SealedHash(0);
    unint64_t v20 = (uint64_t *)&a2[*(int *)(v19 + 20)];
    *unint64_t v20 = v15;
    v20[1] = v17;
    type metadata accessor for SEP.SealedHash.Value(0);
    swift_storeEnumTagMultiPayload();
    *a2 = v18;
    return (*(uint64_t (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(a2, 0, 1, v19);
  }
}

uint64_t SEP.Attestation.sealData.getter@<X0>(void *a1@<X8>)
{
  return sub_24A1EF83C(a1);
}

uint64_t SEP.Attestation.sealDataA.getter@<X0>(void *a1@<X8>)
{
  return sub_24A1EF83C(a1);
}

uint64_t sub_24A1EF83C@<X0>(void *a1@<X8>)
{
  v9[1] = *(unsigned char **)MEMORY[0x263EF8340];
  uint64_t v3 = *v1;
  unint64_t v4 = v1[1];
  uint64_t v6 = v1[2];
  unint64_t v5 = v1[3];
  uint64_t v8 = 0;
  v9[0] = 0;
  sub_24A1A52B0(v3, v4);
  sub_24A1A52B0(v6, v5);
  return sub_24A1EE228(v6, v5, v9, &v8, v3, v4, a1, v6, v5);
}

uint64_t SEP.Attestation.boardID.getter()
{
  unint64_t v1 = sub_24A1EE8B0(*(void *)v0, *(void *)(v0 + 8), *(void *)(v0 + 16), *(void *)(v0 + 24));
  return v1 | ((HIDWORD(v1) & 1) << 32);
}

uint64_t SEP.Attestation.keyOptions.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4 = *(void *)(v1 + 16);
  unint64_t v3 = *(void *)(v1 + 24);
  switch(v3 >> 62)
  {
    case 1uLL:
      if (v4 >> 32 < (int)v4) {
        __break(1u);
      }
      swift_retain();
      sub_24A1F0388((int)v4, a1);
      uint64_t result = sub_24A1A5384(v4, v3);
      break;
    case 2uLL:
      uint64_t v6 = *(void *)(v4 + 16);
      swift_retain();
      swift_retain();
      sub_24A1F0388(v6, a1);
      swift_release();
      uint64_t result = swift_release();
      break;
    default:
      if (aks_attest_context_get_uint64())
      {
        uint64_t v7 = sub_24A2A6C70();
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(a1, 1, 1, v7);
      }
      else
      {
        sub_24A2A6C60();
        uint64_t v8 = sub_24A2A6C70();
        uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(a1, 0, 1, v8);
      }
      break;
  }
  return result;
}

uint64_t SEP.Attestation.restrictedExecutionMode.getter()
{
  return sub_24A1EFBF8();
}

uint64_t SEP.Attestation.ephemeralDataMode.getter()
{
  return sub_24A1EFBF8();
}

uint64_t SEP.Attestation.developerMode.getter()
{
  return sub_24A1EFBF8();
}

uint64_t sub_24A1EFBF8()
{
  return sub_24A1EE678(*(void *)v0, *(void *)(v0 + 8), *(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t SEP.Attestation.rawPublicKeyData.getter()
{
  return sub_24A1EFC9C((void (*)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, void *, uint64_t *))sub_24A1EEAE4);
}

uint64_t sub_24A1EFC9C(void (*a1)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, void *, uint64_t *))
{
  v10[1] = *MEMORY[0x263EF8340];
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  v10[0] = 0;
  uint64_t v8 = 0;
  a1(&v9, v3, v4, v5, v6, v10, &v8);
  return v9;
}

uint64_t SEP.Attestation.keyType.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4 = *(void *)(v1 + 16);
  unint64_t v3 = *(void *)(v1 + 24);
  switch(v3 >> 62)
  {
    case 1uLL:
      if (v4 >> 32 < (int)v4) {
        __break(1u);
      }
      swift_retain();
      sub_24A1F0624((int)v4, a1);
      uint64_t result = sub_24A1A5384(v4, v3);
      break;
    case 2uLL:
      uint64_t v6 = *(void *)(v4 + 16);
      swift_retain();
      swift_retain();
      sub_24A1F0624(v6, a1);
      swift_release();
      uint64_t result = swift_release();
      break;
    default:
      if (aks_attest_context_get_uint64())
      {
        uint64_t v7 = sub_24A2A6C30();
        uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(a1, 1, 1, v7);
      }
      else
      {
        uint64_t result = sub_24A2A6C20();
      }
      break;
  }
  return result;
}

BOOL static SEP.Attestation.Error.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t SEP.Attestation.Error.hash(into:)()
{
  return sub_24A2A7F20();
}

uint64_t SEP.Attestation.Error.hashValue.getter()
{
  return sub_24A2A7F50();
}

void sub_24A1F0018(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = sub_24A2A68E0();
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = sub_24A2A6910();
    BOOL v9 = __OFSUB__(a1, v8);
    uint64_t v10 = a1 - v8;
    if (!v9)
    {
      sub_24A2A6900();
      sub_24A1EDCB8(v7 + v10, a4);
      return;
    }
    __break(1u);
  }
  sub_24A2A6900();
  __break(1u);
}

uint64_t sub_24A1F00A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result = sub_24A2A68E0();
  uint64_t v8 = result;
  if (result)
  {
    uint64_t result = sub_24A2A6910();
    if (__OFSUB__(a1, result)) {
      goto LABEL_7;
    }
    v8 += a1 - result;
  }
  if (!__OFSUB__(a2, a1))
  {
    sub_24A2A6900();
    uint64_t v9 = *a4;
    unint64_t v10 = a4[1];
    uint64_t v12 = a4[2];
    unint64_t v11 = a4[3];
    sub_24A1A52B0(v9, v10);
    sub_24A1A52B0(v12, v11);
    sub_24A1EEF54(v9, v10, v12, v11, v8);
    sub_24A1A5384(v9, v10);
    return sub_24A1A5384(v12, v11);
  }
  __break(1u);
LABEL_7:
  __break(1u);
  return result;
}

unsigned char *sub_24A1F0198@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char **a3@<X3>, uint64_t *a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t result = (unsigned char *)sub_24A2A68E0();
  unint64_t v11 = result;
  if (result)
  {
    uint64_t result = (unsigned char *)sub_24A2A6910();
    if (__OFSUB__(a1, result)) {
      goto LABEL_7;
    }
    v11 += a1 - (void)result;
  }
  if (!__OFSUB__(a2, a1))
  {
    sub_24A2A6900();
    return sub_24A1EF280(v11, a3, a4, a5);
  }
  __break(1u);
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_24A1F0244@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char **a3@<X3>, uint64_t *a4@<X4>, uint64_t a5@<X5>, unint64_t a6@<X6>, uint64_t a7@<X7>, void *a8@<X8>, unint64_t a9)
{
  sub_24A1A52B0(a5, a6);
  sub_24A1A52B0(a7, a9);
  uint64_t result = sub_24A2A68E0();
  uint64_t v16 = result;
  if (result)
  {
    uint64_t result = sub_24A2A6910();
    if (__OFSUB__(a1, result)) {
      goto LABEL_7;
    }
    v16 += a1 - result;
  }
  if (!__OFSUB__(a2, a1))
  {
    sub_24A2A6900();
    sub_24A1A52B0(a5, a6);
    sub_24A1A52B0(a7, a9);
    sub_24A1EF3A8(v16, a3, a4, a5, a6, a7, a9, a8);
    sub_24A1A5384(a5, a6);
    sub_24A1A5384(a7, a9);
    sub_24A1A5384(a5, a6);
    return sub_24A1A5384(a7, a9);
  }
  __break(1u);
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_24A1F0388@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (!sub_24A2A68E0())
  {
LABEL_8:
    sub_24A2A6900();
    __break(1u);
  }
  if (__OFSUB__(a1, sub_24A2A6910()))
  {
    __break(1u);
    goto LABEL_8;
  }
  sub_24A2A6900();
  if (aks_attest_context_get_uint64())
  {
    uint64_t v4 = sub_24A2A6C70();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(a2, 1, 1, v4);
  }
  else
  {
    sub_24A2A6C60();
    uint64_t v6 = sub_24A2A6C70();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(a2, 0, 1, v6);
  }
}

unsigned char *sub_24A1F04BC@<X0>(uint64_t a1@<X0>, unsigned char **a2@<X3>, uint64_t *a3@<X4>, void *a4@<X8>)
{
  if (!sub_24A2A68E0()) {
    goto LABEL_9;
  }
  if (__OFSUB__(a1, sub_24A2A6910()))
  {
    __break(1u);
LABEL_9:
    uint64_t result = (unsigned char *)sub_24A2A6900();
    __break(1u);
    goto LABEL_10;
  }
  sub_24A2A6900();
  if (aks_attest_context_get())
  {
    uint64_t result = 0;
    unint64_t v9 = 0xF000000000000000;
LABEL_7:
    *a4 = result;
    a4[1] = v9;
    return result;
  }
  uint64_t result = *a2;
  if (*a2)
  {
    uint64_t result = (unsigned char *)sub_24A1F07EC(result, *a3);
    goto LABEL_7;
  }
LABEL_10:
  __break(1u);
  return result;
}

unsigned char *sub_24A1F0570@<X0>(uint64_t a1@<X0>, unsigned char **a2@<X3>, uint64_t *a3@<X4>, void *a4@<X8>)
{
  if (!sub_24A2A68E0()) {
    goto LABEL_9;
  }
  if (__OFSUB__(a1, sub_24A2A6910()))
  {
    __break(1u);
LABEL_9:
    uint64_t result = (unsigned char *)sub_24A2A6900();
    __break(1u);
    goto LABEL_10;
  }
  sub_24A2A6900();
  if (aks_attest_context_get())
  {
    uint64_t result = 0;
    unint64_t v9 = 0xF000000000000000;
LABEL_7:
    *a4 = result;
    a4[1] = v9;
    return result;
  }
  uint64_t result = *a2;
  if (*a2)
  {
    uint64_t result = (unsigned char *)sub_24A1F07EC(result, *a3);
    goto LABEL_7;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_24A1F0624@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (!sub_24A2A68E0())
  {
LABEL_8:
    sub_24A2A6900();
    __break(1u);
  }
  if (__OFSUB__(a1, sub_24A2A6910()))
  {
    __break(1u);
    goto LABEL_8;
  }
  sub_24A2A6900();
  if (!aks_attest_context_get_uint64()) {
    return sub_24A2A6C20();
  }
  uint64_t v4 = sub_24A2A6C30();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(a2, 1, 1, v4);
}

uint64_t sub_24A1F0728(unsigned char *__src, unsigned char *a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (__src) {
    unint64_t v2 = a2 - __src;
  }
  else {
    unint64_t v2 = 0;
  }
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF) {
    goto LABEL_11;
  }
  memset(__dst, 0, sizeof(__dst));
  char v5 = v2;
  if (__src && a2 != __src) {
    memcpy(__dst, __src, a2 - __src);
  }
  return *(void *)__dst;
}

uint64_t sub_24A1F07EC(unsigned char *__src, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 <= 14) {
    return sub_24A1F0728(__src, &__src[a2]);
  }
  sub_24A2A6920();
  swift_allocObject();
  sub_24A2A68D0();
  if ((unint64_t)a2 < 0x7FFFFFFF) {
    return a2 << 32;
  }
  sub_24A2A6A40();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = a2;
  return result;
}

uint64_t sub_24A1F08A0(uint64_t a1)
{
  if (!sub_24A2A68E0())
  {
LABEL_8:
    sub_24A2A6900();
    __break(1u);
  }
  if (__OFSUB__(a1, sub_24A2A6910()))
  {
    __break(1u);
    goto LABEL_8;
  }
  sub_24A2A6900();
  if (aks_attest_context_get_uint64()) {
    return 2;
  }
  else {
    return 0;
  }
}

uint64_t sub_24A1F0968(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174248);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_24A1F09C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174248);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_24A1F0A30()
{
  unint64_t result = qword_269778E30;
  if (!qword_269778E30)
  {
    type metadata accessor for CFError(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269778E30);
  }
  return result;
}

uint64_t sub_24A1F0A7C@<X0>(unsigned char *a1@<X8>)
{
  return sub_24A1EF5A4(*(void *)(v1 + 24), a1);
}

unint64_t sub_24A1F0A9C()
{
  unint64_t result = qword_269778E38;
  if (!qword_269778E38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269778E38);
  }
  return result;
}

uint64_t _s11AttestationVwxx(uint64_t *a1)
{
  sub_24A1A5384(*a1, a1[1]);
  uint64_t v2 = a1[2];
  unint64_t v3 = a1[3];

  return sub_24A1A5384(v2, v3);
}

uint64_t *_s11AttestationVwcp(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_24A1A52B0(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  uint64_t v7 = a2[2];
  unint64_t v6 = a2[3];
  sub_24A1A52B0(v7, v6);
  a1[2] = v7;
  a1[3] = v6;
  return a1;
}

uint64_t *_s11AttestationVwca(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_24A1A52B0(*a2, v5);
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_24A1A5384(v6, v7);
  uint64_t v9 = a2[2];
  unint64_t v8 = a2[3];
  sub_24A1A52B0(v9, v8);
  uint64_t v10 = a1[2];
  unint64_t v11 = a1[3];
  a1[2] = v9;
  a1[3] = v8;
  sub_24A1A5384(v10, v11);
  return a1;
}

uint64_t *_s11AttestationVwta(uint64_t *a1, _OWORD *a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_24A1A5384(v4, v5);
  uint64_t v6 = a1[2];
  unint64_t v7 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  sub_24A1A5384(v6, v7);
  return a1;
}

uint64_t _s11AttestationVwet(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xD && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t _s11AttestationVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)unint64_t result = a2 - 13;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2)
    {
      *(void *)unint64_t result = 0;
      *(void *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SEP.Attestation()
{
  return &type metadata for SEP.Attestation;
}

unsigned char *_s11AttestationV5ErrorOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24A1F0DBCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SEP.Attestation.Error()
{
  return &type metadata for SEP.Attestation.Error;
}

unint64_t sub_24A1F0DF4(uint64_t a1)
{
  if (!sub_24A2A68E0())
  {
LABEL_5:
    sub_24A2A6900();
    __break(1u);
  }
  if (__OFSUB__(a1, sub_24A2A6910()))
  {
    __break(1u);
    __break(1u);
    goto LABEL_5;
  }
  sub_24A2A6900();
  return (unint64_t)(aks_attest_context_get_uint64() != 0) << 32;
}

void sub_24A1F0EC4()
{
  qword_26977A438 = (uint64_t)&unk_26FDFBFB8;
}

uint64_t sub_24A1F0ED8(uint64_t a1)
{
  return sub_24A1F0F10(a1, qword_26B176970);
}

uint64_t sub_24A1F0EF4(uint64_t a1)
{
  return sub_24A1F0F10(a1, qword_26B1768F8);
}

uint64_t sub_24A1F0F10(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_24A2A6C00();
  __swift_allocate_value_buffer(v3, a2);
  uint64_t v4 = __swift_project_value_buffer(v3, (uint64_t)a2);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174238);
  MEMORY[0x270FA5388](v5 - 8);
  unint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24A2A6BD0();
  uint64_t v8 = *(void *)(v3 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v7, 1, v3);
  if (result != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 32))(v4, v7, v3);
  }
  __break(1u);
  return result;
}

uint64_t sub_24A1F1034(uint64_t a1)
{
  return sub_24A1F1084(a1, 0xD00000000000031CLL, 0x800000024A2B3250, &qword_26977A440, (unint64_t *)algn_26977A448);
}

uint64_t sub_24A1F105C(uint64_t a1)
{
  return sub_24A1F1084(a1, 0xD000000000000314, 0x800000024A2B2F30, &qword_26B1769A0, (unint64_t *)algn_26B1769A8);
}

uint64_t sub_24A1F1084(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  uint64_t result = sub_24A2A6A30();
  if (v8 >> 60 == 15)
  {
    __break(1u);
  }
  else
  {
    *a4 = result;
    *a5 = v8;
  }
  return result;
}

CloudAttestation::AttestationPolicyContext __swiftcall AttestationPolicyContext.init()()
{
  uint64_t v1 = v0;
  result.context._rawValue = (void *)sub_24A1BFAC0(MEMORY[0x263F8EE78]);
  v1->context._rawValue = result.context._rawValue;
  return result;
}

double AttestationPolicyContext.subscript.getter@<D0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4 = *v2;
  if (*(void *)(v4 + 16) && (unint64_t v5 = sub_24A1BE7EC(*a1, a1[1], a1[2], a1[3]), (v6 & 1) != 0))
  {
    uint64_t v7 = *(void *)(v4 + 56) + 32 * v5;
    sub_24A1C9680(v7, (uint64_t)a2);
  }
  else
  {
    double result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

uint64_t AttestationPolicyContext.subscript.setter(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  sub_24A1DD134(a1, (uint64_t)v8);
  sub_24A1DA970((uint64_t)v8, v3, v4, v5, v6);
  return sub_24A1F182C(a1);
}

uint64_t AttestationPolicyContext.Key.init(domain:key:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  *a5 = result;
  a5[1] = a2;
  a5[2] = a3;
  a5[3] = a4;
  return result;
}

uint64_t AttestationPolicy.evaluate(bundle:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[5] = a3;
  v4[6] = v3;
  void v4[3] = a1;
  long long v4[4] = a2;
  return MEMORY[0x270FA2498](sub_24A1F1204, 0, 0);
}

uint64_t sub_24A1F1204()
{
  uint64_t v7 = v0[5];
  v0[2] = sub_24A1BFAC0(MEMORY[0x263F8EE78]);
  uint64_t v6 = (uint64_t (*)(uint64_t, void *, uint64_t, uint64_t))(*(void *)(v7 + 8) + **(int **)(v7 + 8));
  uint64_t v1 = (void *)swift_task_alloc();
  v0[7] = v1;
  void *v1 = v0;
  v1[1] = sub_24A1F1314;
  uint64_t v2 = v0[5];
  uint64_t v4 = v0[3];
  uint64_t v3 = v0[4];
  return v6(v4, v0 + 2, v3, v2);
}

uint64_t sub_24A1F1314()
{
  *(void *)(*(void *)v1 + 64) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v0) {
    uint64_t v2 = sub_24A1F1460;
  }
  else {
    uint64_t v2 = sub_24A1F1448;
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

uint64_t sub_24A1F1448()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24A1F1460()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t AttestationPolicyContext.Key.domain.getter()
{
  return *(void *)v0;
}

uint64_t AttestationPolicyContext.Key.key.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_24A1F14B0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = a3[1];
  uint64_t v5 = a3[2];
  uint64_t v6 = a3[3];
  sub_24A1DD134(a1, (uint64_t)v9);
  sub_24A1DD134((uint64_t)v9, (uint64_t)v8);
  swift_bridgeObjectRetain();
  sub_24A1DA970((uint64_t)v8, v3, v4, v5, v6);
  return sub_24A1F182C((uint64_t)v9);
}

void (*AttestationPolicyContext.subscript.modify(void *a1, uint64_t *a2))(uint64_t *a1, char a2)
{
  uint64_t v5 = malloc(0x88uLL);
  *a1 = v5;
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  v5[12] = v2;
  v5[13] = v6;
  uint64_t v8 = a2[2];
  uint64_t v9 = a2[3];
  v5[14] = v7;
  v5[15] = v8;
  v5[16] = v9;
  uint64_t v10 = *v2;
  if (*(void *)(v10 + 16) && (unint64_t v11 = sub_24A1BE7EC(v6, v7, v8, v9), (v12 & 1) != 0))
  {
    sub_24A1C9680(*(void *)(v10 + 56) + 32 * v11, (uint64_t)v5);
  }
  else
  {
    *(_OWORD *)uint64_t v5 = 0u;
    *((_OWORD *)v5 + 1) = 0u;
  }
  swift_bridgeObjectRetain();
  return sub_24A1F15D8;
}

void sub_24A1F15D8(uint64_t *a1, char a2)
{
  uint64_t v2 = (void *)*a1;
  uint64_t v3 = *a1 + 32;
  if (a2)
  {
    uint64_t v5 = v2[15];
    uint64_t v4 = v2[16];
    uint64_t v7 = v2[13];
    uint64_t v6 = v2[14];
    sub_24A1DD134(*a1, v3);
    sub_24A1DD134(v3, (uint64_t)(v2 + 8));
    sub_24A1DA970((uint64_t)(v2 + 8), v7, v6, v5, v4);
    sub_24A1F182C(v3);
  }
  else
  {
    uint64_t v8 = v2[15];
    uint64_t v9 = v2[16];
    uint64_t v11 = v2[13];
    uint64_t v10 = v2[14];
    sub_24A1DD134(*a1, v3);
    sub_24A1DA970(v3, v11, v10, v8, v9);
  }
  sub_24A1F182C((uint64_t)v2);

  free(v2);
}

uint64_t AttestationPolicyContext.Key.hash(into:)()
{
  return sub_24A2A7F20();
}

uint64_t AttestationPolicyContext.Key.hashValue.getter()
{
  return sub_24A2A7F50();
}

uint64_t sub_24A1F1728()
{
  return sub_24A2A7F50();
}

uint64_t sub_24A1F1770()
{
  return sub_24A2A7F20();
}

uint64_t sub_24A1F179C()
{
  return sub_24A2A7F50();
}

uint64_t _s16CloudAttestation0B13PolicyContextV3KeyV2eeoiySbAE_AEtFZ_0(void *a1, void *a2)
{
  if (*a1 != *a2) {
    return 0;
  }
  if (a1[2] == a2[2] && a1[3] == a2[3]) {
    return 1;
  }
  else {
    return sub_24A2A7E40();
  }
}

uint64_t sub_24A1F182C(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174BC0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_24A1F1890()
{
  unint64_t result = qword_26B174288;
  if (!qword_26B174288)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B174288);
  }
  return result;
}

double sub_24A1F18E4@<D0>(uint64_t *a1@<X0>, long long *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v3 = *((void *)a2 + 2);
  uint64_t v4 = *((void *)a2 + 3);
  uint64_t v9 = *a1;
  long long v6 = *a2;
  uint64_t v7 = v3;
  uint64_t v8 = v4;
  return AttestationPolicyContext.subscript.getter((uint64_t *)&v6, a3);
}

uint64_t sub_24A1F1930()
{
  return 0;
}

uint64_t dispatch thunk of AttestationPolicy.evaluate(bundle:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a4 + 8) + **(int **)(a4 + 8));
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  void *v9 = v4;
  v9[1] = sub_24A1C50FC;
  return v11(a1, a2, a3, a4);
}

ValueMetadata *type metadata accessor for AttestationPolicyContext()
{
  return &type metadata for AttestationPolicyContext;
}

uint64_t destroy for AttestationPolicyContext.Key()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AttestationPolicyContext.Key(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AttestationPolicyContext.Key(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for AttestationPolicyContext.Key(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AttestationPolicyContext.Key(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AttestationPolicyContext.Key(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AttestationPolicyContext.Key()
{
  return &type metadata for AttestationPolicyContext.Key;
}

const char *PrivateCloudComputeFeatures.domain.getter()
{
  return "PrivateCloudCompute";
}

const char *PrivateCloudComputeFeatures.feature.getter()
{
  return "enforceEnvironment";
}

uint64_t static PrivateCloudComputeFeatures.== infix(_:_:)()
{
  return 1;
}

uint64_t PrivateCloudComputeFeatures.hash(into:)()
{
  return sub_24A2A7F20();
}

uint64_t PrivateCloudComputeFeatures.hashValue.getter()
{
  return sub_24A2A7F50();
}

unint64_t sub_24A1F1C5C()
{
  unint64_t result = qword_269778E50;
  if (!qword_269778E50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269778E50);
  }
  return result;
}

const char *sub_24A1F1CB0()
{
  return "PrivateCloudCompute";
}

const char *sub_24A1F1CC4()
{
  return "enforceEnvironment";
}

unsigned char *storeEnumTagSinglePayload for PrivateCloudComputeFeatures(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x24A1F1D74);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for PrivateCloudComputeFeatures()
{
  return &type metadata for PrivateCloudComputeFeatures;
}

void sub_24A1F1DAC()
{
  uint64_t v100 = *MEMORY[0x263EF8340];
  uint64_t v0 = sub_24A2A7360();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  int v3 = (char *)&v75 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_24A2A71B0();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v75 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (os_variant_allows_internal_security_policies())
  {
    uint64_t v8 = (__CFString *)sub_24A2A77F0();
    uint64_t v9 = (__CFString *)sub_24A2A77F0();
    CFPropertyListRef v10 = CFPreferencesCopyAppValue(v8, v9);

    if (v10)
    {
      id v98 = (id)v10;
      if (swift_dynamicCast())
      {
        uint64_t v95 = v1;
        type metadata accessor for Proto_AttestationBundle(0);
        sub_24A1F7E20(&qword_26B174268, (void (*)(uint64_t))type metadata accessor for Proto_AttestationBundle);
        uint64_t v90 = sub_24A2A6FE0();
        unint64_t v93 = v11;
        uint64_t v12 = sub_24A2A69E0();
        uint64_t v78 = &v75;
        uint64_t v96 = v12;
        uint64_t v92 = *(void *)(v12 - 8);
        uint64_t v13 = MEMORY[0x270FA5388](v12);
        uint64_t v94 = (char *)&v75 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
        uint64_t v88 = (char *)&v75;
        uint64_t v91 = v14;
        MEMORY[0x270FA5388](v13);
        uint64_t v16 = (char *)&v75 - v15;
        sub_24A2A6990();
        swift_bridgeObjectRelease();
        swift_beginAccess();
        int v17 = byte_26B1730E8;
        if (byte_26B1730E8 == 10)
        {
          static Environment.default.getter((char *)v97);
          int v17 = LOBYTE(v97[0]);
        }
        else
        {
          LOBYTE(v97[0]) = byte_26B1730E8;
        }
        unint64_t v18 = 0xE300000000000000;
        uint64_t v19 = 7759204;
        switch(v17)
        {
          case 1:
            unint64_t v18 = 0xE90000000000006CLL;
            uint64_t v19 = 0x6172656D65687065;
            break;
          case 2:
            unint64_t v18 = 0xE400000000000000;
            uint64_t v19 = 1718773104;
            break;
          case 3:
            unint64_t v18 = 0xE200000000000000;
            uint64_t v19 = 24945;
            break;
          case 4:
            unint64_t v18 = 0xE700000000000000;
            uint64_t v19 = 0x676E6967617473;
            break;
          case 5:
            uint64_t v19 = 7627125;
            break;
          case 6:
            unint64_t v18 = 0xE500000000000000;
            uint64_t v19 = 0x7972726163;
            break;
          case 7:
            uint64_t v19 = 0x69746375646F7270;
            unint64_t v18 = 0xEA00000000006E6FLL;
            break;
          case 8:
            unint64_t v18 = 0xEA00000000007972;
            uint64_t v19 = 0x616D697250326171;
            break;
          case 9:
            unint64_t v18 = 0xEB000000006C616ELL;
            uint64_t v19 = 0x7265746E49326171;
            break;
          default:
            break;
        }
        id v98 = (id)v19;
        unint64_t v99 = v18;
        uint64_t v20 = sub_24A2A6980();
        uint64_t v87 = &v75;
        uint64_t v21 = *(void *)(v20 - 8);
        MEMORY[0x270FA5388](v20);
        uint64_t v83 = v22;
        char v23 = (char *)&v75 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
        uint64_t v24 = *MEMORY[0x263F06E28];
        char v25 = *(void (**)(char *, void, uint64_t))(v21 + 104);
        uint64_t v82 = v21 + 104;
        uint64_t v81 = v25;
        v25(v23, v24, v20);
        unint64_t v80 = sub_24A1D20BC();
        sub_24A2A69C0();
        char v26 = *(void (**)(char *, uint64_t))(v21 + 8);
        uint64_t v85 = v20;
        uint64_t v84 = v21 + 8;
        uint64_t v79 = v26;
        v26(v23, v20);
        swift_bridgeObjectRelease();
        char v27 = *(void (**)(char *, uint64_t))(v92 + 8);
        uint64_t v86 = v92 + 8;
        uint64_t v89 = v27;
        uint64_t v28 = ((uint64_t (*)(char *, uint64_t))v27)(v16, v96);
        MEMORY[0x270FA5388](v28);
        uint64_t v88 = (char *)&v75 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
        id v98 = 0;
        unint64_t v99 = 0xE000000000000000;
        uint64_t v30 = sub_24A1F7E20(&qword_26B174A10, MEMORY[0x263F047F8]);
        sub_24A2A71A0();
        unint64_t v31 = v93;
        uint64_t v87 = &v75;
        switch(v93 >> 62)
        {
          case 1uLL:
            uint64_t v77 = v30;
            uint64_t v34 = v90;
            if (v34 >> 32 < (int)v34) {
              __break(1u);
            }
            unint64_t v76 = v93 & 0x3FFFFFFFFFFFFFFFLL;
            sub_24A1A52B0(v90, v93);
            sub_24A20C570((int)v34, v34 >> 32);
            sub_24A1A5384(v34, v31);
            goto LABEL_24;
          case 2uLL:
            uint64_t v77 = v30;
            uint64_t v35 = v90;
            uint64_t v36 = *(void *)(v90 + 16);
            unint64_t v76 = *(void *)(v90 + 24);
            sub_24A1A52B0(v90, v93);
            swift_retain();
            swift_retain();
            sub_24A20C570(v36, v76);
            swift_release();
            swift_release();
            uint64_t v33 = v35;
            goto LABEL_23;
          case 3uLL:
            memset(v97, 0, 14);
            sub_24A2A7170();
            uint64_t v33 = v90;
            goto LABEL_23;
          default:
            uint64_t v32 = v90;
            v97[0] = v90;
            LODWORD(v97[1]) = v93;
            WORD2(v97[1]) = WORD2(v93);
            sub_24A2A7170();
            uint64_t v33 = v32;
LABEL_23:
            sub_24A1A5384(v33, v31);
LABEL_24:
            sub_24A2A7180();
            (*(void (**)(char *, uint64_t))(v95 + 8))(v3, v0);
            sub_24A2A3C70();
            (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
            sub_24A2A78C0();
            swift_bridgeObjectRelease();
            uint64_t v37 = sub_24A2A78C0();
            MEMORY[0x270FA5388](v37);
            unsigned long long v39 = (char *)&v75 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
            uint64_t v40 = v85;
            v81(v39, *MEMORY[0x263F06E48], v85);
            unint64_t v41 = v88;
            unsigned long long v42 = v94;
            sub_24A2A69D0();
            v79(v39, v40);
            swift_bridgeObjectRelease();
            if (qword_269778400 != -1) {
              swift_once();
            }
            uint64_t v43 = sub_24A2A7160();
            uint64_t v44 = __swift_project_value_buffer(v43, (uint64_t)qword_26977A450);
            MEMORY[0x270FA5388](v44);
            uint64_t v46 = (char *)&v75 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
            uint64_t v47 = v96;
            (*(void (**)(char *, char *, uint64_t))(v92 + 16))(v46, v41, v96);
            uint64_t v48 = sub_24A2A7140();
            os_log_type_t v49 = sub_24A2A7B20();
            if (os_log_type_enabled(v48, v49))
            {
              uint64_t v50 = (uint8_t *)swift_slowAlloc();
              char v51 = (void *)swift_slowAlloc();
              id v98 = v51;
              *(_DWORD *)uint64_t v50 = 136446210;
              sub_24A20353C();
              uint64_t v52 = sub_24A2A7E30();
              v97[0] = sub_24A1C52A8(v52, v53, (uint64_t *)&v98);
              uint64_t v47 = v96;
              sub_24A2A7B70();
              swift_bridgeObjectRelease();
              v89(v46, v47);
              _os_log_impl(&dword_24A19F000, v48, v49, "Writing attestation bundle to %{public}s", v50, 0xCu);
              swift_arrayDestroy();
              uint64_t v54 = v51;
              unint64_t v41 = v88;
              MEMORY[0x24C5C00A0](v54, -1, -1);
              unint64_t v55 = v50;
              unsigned long long v42 = v94;
              MEMORY[0x24C5C00A0](v55, -1, -1);
            }
            else
            {
              v89(v46, v47);
            }

            id v56 = objc_msgSend(self, sel_defaultManager);
            int64_t v57 = (void *)sub_24A2A69A0();
            id v98 = 0;
            unsigned int v58 = objc_msgSend(v56, sel_createDirectoryAtURL_withIntermediateDirectories_attributes_error_, v57, 1, 0, &v98);

            if (v58)
            {
              id v59 = v98;
              uint64_t v60 = v90;
              unint64_t v61 = v93;
              sub_24A2A6AF0();
              sub_24A1A5384(v60, v61);
              uint64_t v74 = v89;
              v89(v41, v47);
              v74(v42, v47);
            }
            else
            {
              id v62 = v98;
              uint64_t v63 = (void *)sub_24A2A6970();

              swift_willThrow();
              sub_24A1A5384(v90, v93);
              unint64_t v64 = v89;
              v89(v41, v47);
              v64(v42, v47);
              if (qword_269778400 != -1) {
                swift_once();
              }
              uint64_t v65 = sub_24A2A7160();
              __swift_project_value_buffer(v65, (uint64_t)qword_26977A450);
              id v66 = v63;
              id v67 = v63;
              uint64_t v68 = sub_24A2A7140();
              os_log_type_t v69 = sub_24A2A7B30();
              if (os_log_type_enabled(v68, v69))
              {
                unint64_t v70 = (uint8_t *)swift_slowAlloc();
                unint64_t v71 = (void *)swift_slowAlloc();
                *(_DWORD *)unint64_t v70 = 138543362;
                id v72 = v63;
                unsigned int v73 = (void *)_swift_stdlib_bridgeErrorToNSError();
                id v98 = v73;
                sub_24A2A7B70();
                *unint64_t v71 = v73;

                _os_log_impl(&dword_24A19F000, v68, v69, "Tracing attestation bundle failed with error %{public}@", v70, 0xCu);
                __swift_instantiateConcreteTypeFromMangledName(&qword_269778BB8);
                swift_arrayDestroy();
                MEMORY[0x24C5C00A0](v71, -1, -1);
                MEMORY[0x24C5C00A0](v70, -1, -1);
              }
              else
              {
              }
            }
            break;
        }
      }
    }
  }
}

double sub_24A1F2C2C()
{
  return (double)sub_24A2A7F90();
}

double Attestor.defaultKeyLifetime.getter()
{
  return (double)sub_24A2A7F90();
}

unint64_t Attestor.defaultKeyDuration.getter()
{
  return 0xC0DDD92E56000000;
}

uint64_t Attestor.attest(key:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  long long v5[4] = a3;
  uint64_t v5[2] = a1;
  return MEMORY[0x270FA2498](sub_24A1F2CC0, 0, 0);
}

uint64_t sub_24A1F2CC0()
{
  uint64_t v11 = v0[5];
  uint64_t v1 = v0[4];
  uint64_t v2 = sub_24A2A6BC0();
  v0[7] = v2;
  v0[8] = *(void *)(v2 - 8);
  uint64_t v3 = swift_task_alloc();
  v0[9] = v3;
  (*(void (**)(uint64_t))(v11 + 8))(v1);
  sub_24A2A6B80();
  CFPropertyListRef v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void, unint64_t, uint64_t, uint64_t))(*(void *)(v11 + 16) + **(int **)(v11 + 16));
  uint64_t v4 = (void *)swift_task_alloc();
  v0[10] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_24A1F2E50;
  uint64_t v5 = v0[5];
  uint64_t v6 = v0[3];
  uint64_t v7 = v0[4];
  uint64_t v8 = v0[2];
  return v10(v8, v6, v3, 0, 0xF000000000000000, v7, v5);
}

uint64_t sub_24A1F2E50()
{
  uint64_t v2 = *(void *)(*v1 + 72);
  uint64_t v3 = *(void *)(*v1 + 64);
  uint64_t v4 = *(void *)(*v1 + 56);
  uint64_t v5 = *v1;
  *(void *)(v5 + 88) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  if (v0)
  {
    return MEMORY[0x270FA2498](sub_24A1F2FF8, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
}

uint64_t sub_24A1F2FF8()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t Attestor.attest(key:expiration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void, unint64_t, uint64_t, uint64_t))(*(void *)(a5 + 16) + **(int **)(a5 + 16));
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v11;
  void *v11 = v5;
  v11[1] = sub_24A1DA244;
  return v13(a1, a2, a3, 0, 0xF000000000000000, a4, a5);
}

uint64_t Attestor.attest(key:nonce:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v7[7] = a6;
  v7[8] = v6;
  v7[5] = a4;
  _OWORD v7[6] = a5;
  v7[3] = a2;
  v7[4] = a3;
  uint64_t v7[2] = a1;
  return MEMORY[0x270FA2498](sub_24A1F31B0, 0, 0);
}

uint64_t sub_24A1F31B0()
{
  uint64_t v13 = v0[7];
  uint64_t v1 = v0[6];
  uint64_t v2 = sub_24A2A6BC0();
  v0[9] = v2;
  v0[10] = *(void *)(v2 - 8);
  uint64_t v3 = swift_task_alloc();
  v0[11] = v3;
  (*(void (**)(uint64_t))(v13 + 8))(v1);
  sub_24A2A6B80();
  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 + 16)
                                                                                              + **(int **)(v13 + 16));
  uint64_t v4 = (void *)swift_task_alloc();
  v0[12] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_24A1F333C;
  uint64_t v5 = v0[7];
  uint64_t v6 = v0[5];
  uint64_t v7 = v0[6];
  uint64_t v8 = v0[3];
  uint64_t v9 = v0[4];
  uint64_t v10 = v0[2];
  return v12(v10, v8, v3, v9, v6, v7, v5);
}

uint64_t sub_24A1F333C()
{
  uint64_t v2 = *(void *)(*v1 + 88);
  uint64_t v3 = *(void *)(*v1 + 80);
  uint64_t v4 = *(void *)(*v1 + 72);
  uint64_t v5 = *v1;
  *(void *)(v5 + 104) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  if (v0)
  {
    return MEMORY[0x270FA2498](sub_24A1F34E4, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
}

uint64_t sub_24A1F34E4()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_24A1F3548(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  int v17 = (void *)swift_task_alloc();
  *(void *)(v10 + 16) = v17;
  void *v17 = v10;
  v17[1] = sub_24A1DA244;
  return Validator.validate<A>(bundle:nonce:policy:)(a1, a2, a3, a4, a5, a6, a7, a10);
}

uint64_t Validator.validate<A>(bundle:nonce:policy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[22] = v14;
  v8[23] = v15;
  v8[20] = a7;
  v8[21] = a8;
  v8[18] = a5;
  v8[19] = a6;
  unsigned char v8[16] = a3;
  v8[17] = a4;
  v8[14] = a1;
  v8[15] = a2;
  type metadata accessor for AttestationBundle(0);
  v8[24] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749E0);
  v8[25] = swift_task_alloc();
  uint64_t v9 = sub_24A2A6DC0();
  v8[26] = v9;
  v8[27] = *(void *)(v9 - 8);
  v8[28] = swift_task_alloc();
  uint64_t v10 = sub_24A2A71B0();
  v8[29] = v10;
  v8[30] = *(void *)(v10 - 8);
  v8[31] = swift_task_alloc();
  uint64_t v11 = sub_24A2A7160();
  unsigned char v8[32] = v11;
  v8[33] = *(void *)(v11 - 8);
  v8[34] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_24A1F3860, 0, 0);
}

uint64_t sub_24A1F3860()
{
  uint64_t v7 = v0[23];
  v0[10] = v0[21];
  swift_getMetatypeMetadata();
  sub_24A2A7870();
  sub_24A2A7150();
  v0[11] = sub_24A1BFAC0(MEMORY[0x263F8EE78]);
  uint64_t v6 = (uint64_t (*)(uint64_t, void *, uint64_t, uint64_t))(*(void *)(v7 + 8) + **(int **)(v7 + 8));
  uint64_t v1 = (void *)swift_task_alloc();
  v0[35] = v1;
  void *v1 = v0;
  v1[1] = sub_24A1F39E8;
  uint64_t v2 = v0[22];
  uint64_t v3 = v0[23];
  uint64_t v4 = v0[17];
  return v6(v4, v0 + 11, v2, v3);
}

uint64_t sub_24A1F39E8()
{
  *(void *)(*(void *)v1 + 288) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_24A1F47FC;
  }
  else {
    uint64_t v2 = sub_24A1F3B28;
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

uint64_t sub_24A1F3B28()
{
  id v98 = v0;
  v97[1] = *(unsigned char **)MEMORY[0x263EF8340];
  uint64_t v1 = v0[11];
  if (*(void *)(v1 + 16)
    && (unint64_t v2 = sub_24A1BE7EC((uint64_t)&type metadata for SEPAttestationPolicy, (uint64_t)&protocol witness table for SEPAttestationPolicy, 0xD000000000000014, 0x800000024A2B2860), (v3 & 1) != 0)&& (sub_24A1C9680(*(void *)(v1 + 56) + 32 * v2, (uint64_t)(v0 + 2)), __swift_instantiateConcreteTypeFromMangledName(&qword_26B174BB8), (swift_dynamicCast() & 1) != 0))
  {
    uint64_t v5 = v0[6];
    unint64_t v4 = v0[7];
    uint64_t v7 = v0[8];
    unint64_t v6 = v0[9];
  }
  else
  {
    uint64_t v8 = (uint64_t *)v0[17];
    uint64_t v5 = *v8;
    unint64_t v4 = v8[1];
    uint64_t v9 = *MEMORY[0x263F276F8];
    sub_24A1A52B0(*v8, v4);
    *(void *)&long long v94 = sub_24A1B94D4(v9);
    *((void *)&v94 + 1) = v10;
    sub_24A1CF5C4(&v94, 0);
    long long v93 = v94;
    sub_24A1A52B0(v5, v4);
    LODWORD(v9) = sub_24A1CF86C((uint64_t *)&v93, v5, v4);
    sub_24A1A5384(v5, v4);
    if (v9)
    {
      sub_24A1CFC44();
      uint64_t v11 = (void *)swift_allocError();
      unsigned char *v12 = 0;
      swift_willThrow();
      sub_24A1A5384(v5, v4);
      unint64_t v14 = *((void *)&v93 + 1);
      uint64_t v13 = v93;
LABEL_15:
      sub_24A1A5384(v13, v14);
      goto LABEL_27;
    }
    unint64_t v6 = *((void *)&v93 + 1);
    uint64_t v7 = v93;
  }
  unint64_t v15 = v0[19];
  if (v15 >> 60 != 15)
  {
    uint64_t v16 = v0[18];
    v97[0] = 0;
    *(void *)&long long v93 = 0;
    sub_24A1B8018(v16, v15);
    sub_24A1A52B0(v5, v4);
    sub_24A1A52B0(v7, v6);
    sub_24A1EED1C(v7, v6, v97, (uint64_t *)&v93, (uint64_t *)&v94);
    sub_24A1A5384(v5, v4);
    uint64_t v89 = v7;
    unint64_t v91 = v6;
    sub_24A1A5384(v7, v6);
    long long v17 = v94;
    uint64_t v19 = v0[18];
    unint64_t v18 = v0[19];
    if (*((void *)&v94 + 1) >> 60 == 15)
    {
      sub_24A1A52B0(v19, v18);
      sub_24A1B7B78(v17, *((unint64_t *)&v17 + 1));
      sub_24A1B7B78(v19, v18);
LABEL_16:
      uint64_t v23 = v0[18];
      unint64_t v24 = v0[19];
      type metadata accessor for CloudAttestationError(0);
      sub_24A1F7E20((unint64_t *)&unk_269778BC8, (void (*)(uint64_t))type metadata accessor for CloudAttestationError);
      uint64_t v11 = (void *)swift_allocError();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      sub_24A1A5384(v5, v4);
      sub_24A1A5384(v89, v91);
      sub_24A1B7B78(v23, v24);
      goto LABEL_27;
    }
    sub_24A1B8018(v19, v18);
    sub_24A1B8018(v17, *((unint64_t *)&v17 + 1));
    char v20 = sub_24A1B7D80(v17, *((unint64_t *)&v17 + 1), v19, v18);
    sub_24A1B7B78(v19, v18);
    sub_24A1B7B78(v17, *((unint64_t *)&v17 + 1));
    sub_24A1B7B78(v17, *((unint64_t *)&v17 + 1));
    if ((v20 & 1) == 0) {
      goto LABEL_16;
    }
    sub_24A1B7B78(v0[18], v0[19]);
    uint64_t v7 = v89;
    unint64_t v6 = v91;
  }
  *(void *)&long long v94 = v5;
  *((void *)&v94 + 1) = v4;
  uint64_t v95 = v7;
  unint64_t v96 = v6;
  SEP.Attestation.publicKeyData.getter((uint64_t)&v93);
  unint64_t v21 = *((void *)&v93 + 1);
  if ((~*((void *)&v93 + 1) & 0x3000000000000000) == 0)
  {
    type metadata accessor for CloudAttestationError(0);
    sub_24A1F7E20((unint64_t *)&unk_269778BC8, (void (*)(uint64_t))type metadata accessor for CloudAttestationError);
    uint64_t v11 = (void *)swift_allocError();
    void *v22 = 0xD000000000000017;
    v22[1] = 0x800000024A2B2880;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    sub_24A1A5384(v5, v4);
    uint64_t v13 = v7;
    unint64_t v14 = v6;
    goto LABEL_15;
  }
  uint64_t v25 = v93;
  sub_24A1CFC98(v93, *((uint64_t *)&v93 + 1));
  sub_24A1CFCAC(v25, v21);
  char v26 = sub_24A2A7140();
  os_log_type_t type = sub_24A2A7B40();
  uint64_t v90 = v7;
  unint64_t v92 = v6;
  uint64_t v83 = v25;
  uint64_t v84 = v21;
  if (os_log_type_enabled(v26, type))
  {
    os_log_t loga = v26;
    uint64_t v27 = v0[31];
    uint64_t v78 = v0[30];
    uint64_t v28 = v0[29];
    uint64_t v29 = (uint8_t *)swift_slowAlloc();
    uint64_t v81 = swift_slowAlloc();
    *(void *)&long long v94 = v81;
    buf = v29;
    *(_DWORD *)uint64_t v29 = 136315138;
    sub_24A1CEBC4(v25, v21, v27);
    sub_24A1F7E20(&qword_26B1749F8, MEMORY[0x263F045C0]);
    uint64_t v30 = sub_24A2A7E30();
    unint64_t v32 = v31;
    (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v27, v28);
    v0[13] = sub_24A1C52A8(v30, v32, (uint64_t *)&v94);
    sub_24A2A7B70();
    swift_bridgeObjectRelease();
    sub_24A1CFCB4(v25, v21);
    sub_24A1CFCB4(v25, v21);
    _os_log_impl(&dword_24A19F000, loga, type, "AttestationBundle passed validation for public key: %s", buf, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C5C00A0](v81, -1, -1);
    MEMORY[0x24C5C00A0](buf, -1, -1);
  }
  else
  {

    sub_24A1CFCB4(v25, v21);
    sub_24A1CFCB4(v25, v21);
  }
  uint64_t v33 = v0[26];
  uint64_t v34 = v0[27];
  uint64_t v35 = v0[25];
  uint64_t v36 = v0[17];
  os_log_t log = (os_log_t)sub_24A2A6BC0();
  Class isa = log[-1].isa;
  uint64_t typea = swift_task_alloc();
  uint64_t v38 = type metadata accessor for Proto_AttestationBundle(0);
  sub_24A1B2CAC(v36 + *(int *)(v38 + 36), v35, &qword_26B1749E0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 + 48))(v35, 1, v33) == 1)
  {
    uint64_t v39 = v0[25];
    sub_24A2A6DB0();
    sub_24A1B2D10(v39, &qword_26B1749E0);
  }
  else
  {
    (*(void (**)(void, void, void))(v0[27] + 32))(v0[28], v0[25], v0[26]);
  }
  uint64_t v41 = v0[27];
  uint64_t v40 = v0[28];
  uint64_t v42 = v0[26];
  sub_24A2A6D90();
  (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v40, v42);
  uint64_t v43 = swift_task_alloc();
  sub_24A2A6BB0();
  LOBYTE(v42) = sub_24A2A6B70();
  uint64_t v44 = (void (*)(uint64_t, os_log_t))*((void *)isa + 1);
  v44(v43, log);
  swift_task_dealloc();
  uint64_t v82 = v44;
  if (v42)
  {
    uint64_t v45 = v0[24];
    uint64_t v46 = v0[17];
    uint64_t v48 = (uint64_t *)v0[14];
    uint64_t v47 = v0[15];
    *uint64_t v48 = v83;
    v48[1] = v84;
    (*((void (**)(uint64_t, uint64_t, os_log_t))isa + 2))(v47, typea, log);
    sub_24A1F7F50(v46, v45, type metadata accessor for AttestationBundle);
    v97[0] = 0;
    *(void *)&long long v93 = 0;
    sub_24A1A52B0(v5, v4);
    sub_24A1A52B0(v90, v92);
    sub_24A1CFC98(v83, v84);
    sub_24A1EDD20(v90, v92, v97, (uint64_t *)&v93, (uint64_t)&v94);
    sub_24A1A5384(v5, v4);
    sub_24A1A5384(v90, v92);
    if (v95 == 2)
    {
      sub_24A1A5384(v5, v4);
      sub_24A1A5384(v90, v92);
      sub_24A1CFCB4(v83, v84);
      uint64_t v49 = 0;
      uint64_t v80 = 0;
    }
    else
    {
      long long v64 = v94;
      __swift_instantiateConcreteTypeFromMangledName(&qword_26B174BA0);
      uint64_t v65 = swift_allocObject();
      *(_OWORD *)(v65 + 16) = xmmword_24A2A8AA0;
      uint64_t v66 = MEMORY[0x263F8E960];
      *(void *)(v65 + 56) = MEMORY[0x263F8E8F8];
      *(void *)(v65 + 64) = v66;
      uint64_t v67 = MEMORY[0x263F8E970];
      *(_DWORD *)(v65 + 32) = v64;
      uint64_t v68 = MEMORY[0x263F8E9C0];
      *(void *)(v65 + 96) = v67;
      *(void *)(v65 + 104) = v68;
      *(void *)(v65 + 72) = *((void *)&v64 + 1);
      uint64_t v49 = sub_24A2A7840();
      uint64_t v80 = v69;
      sub_24A1CFCB4(v83, v84);
      sub_24A1A5384(v5, v4);
      sub_24A1A5384(v90, v92);
    }
    uint64_t v70 = v0[33];
    uint64_t v71 = v0[34];
    uint64_t v72 = v0[32];
    uint64_t v73 = v0[24];
    uint64_t v74 = v0[16];
    v44(typea, log);
    (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v71, v72);
    uint64_t v75 = (int *)type metadata accessor for Validated.AttestationBundle(0);
    *(void *)(v74 + v75[7]) = 0;
    sub_24A1F7E68(v73, v74, type metadata accessor for AttestationBundle);
    unint64_t v76 = (uint64_t *)(v74 + v75[5]);
    *unint64_t v76 = v49;
    v76[1] = v80;
    uint64_t v77 = (void *)(v74 + v75[6]);
    *uint64_t v77 = 0;
    v77[1] = 0;
    swift_task_dealloc();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v62 = (uint64_t (*)(void))v0[1];
    goto LABEL_31;
  }
  type metadata accessor for CloudAttestationError(0);
  sub_24A1F7E20((unint64_t *)&unk_269778BC8, (void (*)(uint64_t))type metadata accessor for CloudAttestationError);
  uint64_t v11 = (void *)swift_allocError();
  (*((void (**)(uint64_t, uint64_t, os_log_t))isa + 2))(v50, typea, log);
  swift_storeEnumTagMultiPayload();
  swift_willThrow();
  sub_24A1CFCB4(v83, v84);
  sub_24A1A5384(v5, v4);
  sub_24A1A5384(v90, v92);
  v82(typea, log);
  swift_task_dealloc();
LABEL_27:
  swift_bridgeObjectRelease();
  id v51 = v11;
  id v52 = v11;
  unint64_t v53 = sub_24A2A7140();
  os_log_type_t v54 = sub_24A2A7B30();
  if (os_log_type_enabled(v53, v54))
  {
    unint64_t v55 = (uint8_t *)swift_slowAlloc();
    id v56 = (void *)swift_slowAlloc();
    *(_DWORD *)unint64_t v55 = 138412290;
    id v57 = v11;
    uint64_t v58 = _swift_stdlib_bridgeErrorToNSError();
    v0[12] = v58;
    sub_24A2A7B70();
    *id v56 = v58;

    _os_log_impl(&dword_24A19F000, v53, v54, "AttestationBundle validation failed: %@", v55, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&qword_269778BB8);
    swift_arrayDestroy();
    MEMORY[0x24C5C00A0](v56, -1, -1);
    MEMORY[0x24C5C00A0](v55, -1, -1);
  }
  else
  {
  }
  uint64_t v60 = v0[33];
  uint64_t v59 = v0[34];
  uint64_t v61 = v0[32];
  swift_willThrow();
  (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v59, v61);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v62 = (uint64_t (*)(void))v0[1];
LABEL_31:
  return v62();
}

uint64_t sub_24A1F47FC()
{
  uint64_t v1 = (void *)v0[36];
  swift_bridgeObjectRelease();
  id v2 = v1;
  id v3 = v1;
  unint64_t v4 = sub_24A2A7140();
  os_log_type_t v5 = sub_24A2A7B30();
  if (os_log_type_enabled(v4, v5))
  {
    unint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = (void *)swift_slowAlloc();
    *(_DWORD *)unint64_t v6 = 138412290;
    id v8 = v1;
    uint64_t v9 = _swift_stdlib_bridgeErrorToNSError();
    v0[12] = v9;
    sub_24A2A7B70();
    *uint64_t v7 = v9;

    _os_log_impl(&dword_24A19F000, v4, v5, "AttestationBundle validation failed: %@", v6, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&qword_269778BB8);
    swift_arrayDestroy();
    MEMORY[0x24C5C00A0](v7, -1, -1);
    MEMORY[0x24C5C00A0](v6, -1, -1);
  }
  else
  {
  }
  uint64_t v11 = v0[33];
  uint64_t v10 = v0[34];
  uint64_t v12 = v0[32];
  swift_willThrow();
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v13 = (uint64_t (*)(void))v0[1];
  return v13();
}

uint64_t type metadata accessor for AttestationBundle(uint64_t a1)
{
  return sub_24A1AE704(a1, qword_26B173230);
}

uint64_t Validator.validate(bundle:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v7[7] = a6;
  v7[8] = v6;
  v7[5] = a4;
  _OWORD v7[6] = a5;
  v7[3] = a2;
  v7[4] = a3;
  uint64_t v7[2] = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v7[9] = AssociatedTypeWitness;
  v7[10] = *(void *)(AssociatedTypeWitness - 8);
  v7[11] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_24A1F4B34, 0, 0);
}

void sub_24A1F4B34()
{
  uint64_t v1 = v0[7];
  (*(void (**)(void, uint64_t))(v1 + 24))(v0[6], v1);
  uint64_t v3 = *(void *)(v1 + 32) + **(int **)(v1 + 32);
  id v2 = (void *)swift_task_alloc();
  v0[12] = v2;
  swift_getAssociatedConformanceWitness();
  *id v2 = v0;
  v2[1] = sub_24A1F333C;
  __asm { BRAA            X9, X16 }
}

uint64_t Validator.validate(bundle:nonce:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v9[9] = a8;
  v9[10] = v8;
  v9[7] = a6;
  v9[8] = a7;
  v9[5] = a4;
  v9[6] = a5;
  v9[3] = a2;
  void v9[4] = a3;
  v9[2] = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v9[11] = AssociatedTypeWitness;
  v9[12] = *(void *)(AssociatedTypeWitness - 8);
  v9[13] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_24A1F4D80, 0, 0);
}

void sub_24A1F4D80()
{
  uint64_t v1 = v0[9];
  (*(void (**)(void, uint64_t))(v1 + 24))(v0[8], v1);
  uint64_t v3 = *(void *)(v1 + 32) + **(int **)(v1 + 32);
  id v2 = (void *)swift_task_alloc();
  v0[14] = v2;
  swift_getAssociatedConformanceWitness();
  *id v2 = v0;
  v2[1] = sub_24A1F4EE4;
  __asm { BRAA            X9, X16 }
}

uint64_t sub_24A1F4EE4()
{
  uint64_t v2 = *(void *)(*v1 + 104);
  uint64_t v3 = *(void *)(*v1 + 96);
  uint64_t v4 = *(void *)(*v1 + 88);
  uint64_t v5 = *v1;
  *(void *)(v5 + 120) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  if (v0)
  {
    return MEMORY[0x270FA2498](sub_24A1F508C, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
}

uint64_t sub_24A1F508C()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void Validator.validate<A>(bundle:policy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = *(void *)(a8 + 32) + **(int **)(a8 + 32);
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v8 + 16) = v9;
  void *v9 = v8;
  v9[1] = sub_24A1DA244;
  __asm { BRAA            X9, X16 }
}

uint64_t Validator.validate<A>(bundle:nonce:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v9[13] = v15;
  v9[14] = v8;
  v9[11] = v13;
  v9[12] = v14;
  v9[9] = a8;
  v9[10] = v12;
  v9[7] = a6;
  v9[8] = a7;
  v9[5] = a4;
  v9[6] = a5;
  v9[3] = a2;
  void v9[4] = a3;
  v9[2] = a1;
  v9[15] = *(void *)(v13 - 8);
  v9[16] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_24A1F5320, 0, 0);
}

void sub_24A1F5320()
{
  uint64_t v4 = *(void *)(v0 + 96);
  (*(void (**)(void))(v0 + 64))();
  uint64_t v2 = *(void *)(v4 + 32) + **(int **)(v4 + 32);
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 136) = v1;
  void *v1 = v0;
  v1[1] = sub_24A1F5448;
  __asm { BRAA            X9, X16 }
}

uint64_t sub_24A1F5448()
{
  uint64_t v2 = *(void *)(*v1 + 128);
  uint64_t v3 = *(void *)(*v1 + 120);
  uint64_t v4 = *(void *)(*v1 + 88);
  uint64_t v5 = *v1;
  *(void *)(v5 + 144) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  if (v0)
  {
    return MEMORY[0x270FA2498](sub_24A1F55F0, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
}

uint64_t sub_24A1F55F0()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t Validator.validate<A>(bundle:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v9[11] = v13;
  v9[12] = v8;
  v9[9] = a8;
  v9[10] = v12;
  v9[7] = a6;
  v9[8] = a7;
  v9[5] = a4;
  v9[6] = a5;
  v9[3] = a2;
  void v9[4] = a3;
  v9[2] = a1;
  v9[13] = *(void *)(a8 - 8);
  v9[14] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_24A1F5724, 0, 0);
}

void sub_24A1F5724()
{
  uint64_t v4 = *(void *)(v0 + 80);
  (*(void (**)(void))(v0 + 48))();
  uint64_t v2 = *(void *)(v4 + 32) + **(int **)(v4 + 32);
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 120) = v1;
  void *v1 = v0;
  v1[1] = sub_24A1F5850;
  __asm { BRAA            X9, X16 }
}

uint64_t sub_24A1F5850()
{
  uint64_t v2 = *(void *)(*v1 + 112);
  uint64_t v3 = *(void *)(*v1 + 104);
  uint64_t v4 = *(void *)(*v1 + 72);
  uint64_t v5 = *v1;
  *(void *)(v5 + 128) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  if (v0)
  {
    return MEMORY[0x270FA2498](sub_24A1F59F8, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
}

uint64_t sub_24A1F59F8()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_24A1F5A5C(uint64_t a1)
{
  return sub_24A1F6594(a1, qword_26977A450);
}

uint64_t AttestationBundle.init(data:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = sub_24A2A6E70();
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v8 = type metadata accessor for Proto_AttestationBundle(0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = a1;
  unint64_t v15 = a2;
  uint64_t v13 = 0;
  memset(v12, 0, sizeof(v12));
  sub_24A1A52B0(a1, a2);
  sub_24A2A6E60();
  sub_24A1F7E20(&qword_26B174268, (void (*)(uint64_t))type metadata accessor for Proto_AttestationBundle);
  sub_24A2A6FF0();
  uint64_t result = sub_24A1A5384(a1, a2);
  if (!v3) {
    return sub_24A1F7E68((uint64_t)v10, a3, type metadata accessor for Proto_AttestationBundle);
  }
  return result;
}

uint64_t AttestationBundle.init(jsonString:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_24A2A6E30();
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v4 = type metadata accessor for Proto_AttestationBundle(0);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24A2A6E20();
  sub_24A1F7E20(&qword_26B174268, (void (*)(uint64_t))type metadata accessor for Proto_AttestationBundle);
  uint64_t result = sub_24A2A6FC0();
  if (!v1) {
    return sub_24A1F7E68((uint64_t)v6, a1, type metadata accessor for Proto_AttestationBundle);
  }
  return result;
}

uint64_t AttestationBundle.withUnvalidatedAttestationBundle<A>(_:)(void (*a1)(char *))
{
  uint64_t v3 = type metadata accessor for Unvalidated.AttestationBundle(0);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24A1F7F50(v1, (uint64_t)v5, type metadata accessor for AttestationBundle);
  a1(v5);
  return sub_24A1F7EF0((uint64_t)v5, type metadata accessor for Unvalidated.AttestationBundle);
}

uint64_t AttestationBundle.encode(to:)(void *a1)
{
  return sub_24A280C00(a1);
}

uint64_t sub_24A1F5E88(void *a1)
{
  return sub_24A280C00(a1);
}

uint64_t sub_24A1F5EA0(uint64_t a1)
{
  return sub_24A1F6594(a1, qword_26B176880);
}

uint64_t Unvalidated.AttestationBundle.udid.getter()
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  uint64_t v1 = type metadata accessor for AttestationBundle(0);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (uint64_t *)((char *)&v39 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_24A1F7F50(v0, (uint64_t)v3, type metadata accessor for AttestationBundle);
  uint64_t v5 = *v3;
  unint64_t v4 = v3[1];
  sub_24A1A52B0(*v3, v4);
  sub_24A1F7EF0((uint64_t)v3, type metadata accessor for Proto_AttestationBundle);
  *(void *)&long long v44 = sub_24A1B94D4(*MEMORY[0x263F276F8]);
  *((void *)&v44 + 1) = v6;
  sub_24A1CF5C4(&v44, 0);
  long long v42 = v44;
  sub_24A1A52B0(v5, v4);
  int v7 = sub_24A1CF86C((uint64_t *)&v42, v5, v4);
  sub_24A1A5384(v5, v4);
  if (v7)
  {
    sub_24A1CFC44();
    uint64_t v8 = (void *)swift_allocError();
    unsigned char *v9 = 0;
    swift_willThrow();
    sub_24A1A5384(v5, v4);
    sub_24A1A5384(v42, *((unint64_t *)&v42 + 1));
    if (qword_26B1742E8 != -1) {
      swift_once();
    }
    uint64_t v10 = sub_24A2A7160();
    __swift_project_value_buffer(v10, (uint64_t)qword_26B176880);
    id v11 = v8;
    id v12 = v8;
    uint64_t v13 = sub_24A2A7140();
    os_log_type_t v14 = sub_24A2A7B30();
    if (os_log_type_enabled(v13, v14))
    {
      unint64_t v15 = (uint8_t *)swift_slowAlloc();
      uint64_t v16 = (void *)swift_slowAlloc();
      *(_DWORD *)unint64_t v15 = 138543362;
      id v17 = v8;
      uint64_t v18 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)&long long v42 = v18;
      sub_24A2A7B70();
      void *v16 = v18;

      _os_log_impl(&dword_24A19F000, v13, v14, "Invalid sep attestation blob: %{public}@", v15, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&qword_269778BB8);
      swift_arrayDestroy();
      MEMORY[0x24C5C00A0](v16, -1, -1);
      MEMORY[0x24C5C00A0](v15, -1, -1);
    }
    else
    {
    }
    return 0;
  }
  long long v19 = v42;
  *(void *)&long long v44 = 0;
  uint64_t v41 = 0;
  sub_24A1A52B0(v5, v4);
  sub_24A1A52B0(v19, *((unint64_t *)&v19 + 1));
  sub_24A1EDD20(v19, *((unint64_t *)&v19 + 1), (unsigned char **)&v44, &v41, (uint64_t)&v42);
  sub_24A1A5384(v5, v4);
  sub_24A1A5384(v19, *((unint64_t *)&v19 + 1));
  if (v43 == 2)
  {
    if (qword_26B1742E8 != -1) {
      swift_once();
    }
    uint64_t v20 = sub_24A2A7160();
    __swift_project_value_buffer(v20, (uint64_t)qword_26B176880);
    unint64_t v21 = sub_24A2A7140();
    os_log_type_t v22 = sub_24A2A7B30();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v23 = 0;
      _os_log_impl(&dword_24A19F000, v21, v22, "Unable to parse device udid from sep attestation", v23, 2u);
      MEMORY[0x24C5C00A0](v23, -1, -1);

      sub_24A1A5384(v5, v4);
      sub_24A1A5384(v19, *((unint64_t *)&v19 + 1));
    }
    else
    {
      sub_24A1A5384(v5, v4);
      sub_24A1A5384(v19, *((unint64_t *)&v19 + 1));
    }
    return 0;
  }
  uint64_t v24 = *((void *)&v42 + 1);
  int v25 = v42;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B174BA0);
  uint64_t v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_24A2A8AA0;
  uint64_t v27 = MEMORY[0x263F8E960];
  *(void *)(v26 + 56) = MEMORY[0x263F8E8F8];
  *(void *)(v26 + 64) = v27;
  uint64_t v28 = MEMORY[0x263F8E970];
  *(_DWORD *)(v26 + 32) = v25;
  uint64_t v29 = MEMORY[0x263F8E9C0];
  *(void *)(v26 + 96) = v28;
  *(void *)(v26 + 104) = v29;
  *(void *)(v26 + 72) = v24;
  uint64_t v30 = sub_24A2A7840();
  unint64_t v32 = v31;
  if (qword_26B1742E8 != -1) {
    swift_once();
  }
  uint64_t v33 = sub_24A2A7160();
  __swift_project_value_buffer(v33, (uint64_t)qword_26B176880);
  swift_bridgeObjectRetain_n();
  uint64_t v34 = sub_24A2A7140();
  os_log_type_t v35 = sub_24A2A7B40();
  if (os_log_type_enabled(v34, v35))
  {
    uint64_t v36 = (uint8_t *)swift_slowAlloc();
    uint64_t v40 = swift_slowAlloc();
    *(void *)&long long v42 = v40;
    *(_DWORD *)uint64_t v36 = 136446210;
    uint64_t v39 = v36 + 4;
    swift_bridgeObjectRetain();
    *(void *)&long long v44 = sub_24A1C52A8(v30, v32, (uint64_t *)&v42);
    sub_24A2A7B70();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_24A19F000, v34, v35, "Parsed udid=%{public}s from unvalidated attestation bundle", v36, 0xCu);
    uint64_t v37 = v40;
    swift_arrayDestroy();
    MEMORY[0x24C5C00A0](v37, -1, -1);
    MEMORY[0x24C5C00A0](v36, -1, -1);

    sub_24A1A5384(v5, v4);
    sub_24A1A5384(v19, *((unint64_t *)&v19 + 1));
  }
  else
  {
    sub_24A1A5384(v5, v4);
    sub_24A1A5384(v19, *((unint64_t *)&v19 + 1));

    swift_bridgeObjectRelease_n();
  }
  return v30;
}

uint64_t sub_24A1F6570(uint64_t a1)
{
  return sub_24A1F6594(a1, qword_26977A468);
}

uint64_t sub_24A1F6594(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_24A2A7160();
  __swift_allocate_value_buffer(v3, a2);
  __swift_project_value_buffer(v3, (uint64_t)a2);
  return sub_24A2A7150();
}

uint64_t Validated.AttestationBundle.bundle.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_24A1F7F50(v1, a1, type metadata accessor for AttestationBundle);
}

uint64_t Validated.AttestationBundle.sepAttestation.getter()
{
  uint64_t v1 = type metadata accessor for AttestationBundle(0);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24A1F7F50(v0, (uint64_t)v3, type metadata accessor for AttestationBundle);
  uint64_t v4 = *(void *)v3;
  sub_24A1A52B0(*(void *)v3, *((void *)v3 + 1));
  sub_24A1F7EF0((uint64_t)v3, type metadata accessor for Proto_AttestationBundle);
  return v4;
}

uint64_t Validated.AttestationBundle.udid.getter()
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  uint64_t v1 = type metadata accessor for AttestationBundle(0);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (uint64_t *)((char *)v34 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v4 = (uint64_t *)(v0 + *(int *)(type metadata accessor for Validated.AttestationBundle(0) + 20));
  if (!v4[1])
  {
    if (qword_269778408 != -1) {
      swift_once();
    }
    uint64_t v6 = sub_24A2A7160();
    __swift_project_value_buffer(v6, (uint64_t)qword_26977A468);
    int v7 = sub_24A2A7140();
    os_log_type_t v8 = sub_24A2A7B30();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl(&dword_24A19F000, v7, v8, "UDID was not set from validation context, attempting to lazily parse from sep attestation blob", v9, 2u);
      MEMORY[0x24C5C00A0](v9, -1, -1);
    }

    sub_24A1F7F50(v0, (uint64_t)v3, type metadata accessor for AttestationBundle);
    uint64_t v11 = *v3;
    unint64_t v10 = v3[1];
    sub_24A1A52B0(*v3, v10);
    sub_24A1F7EF0((uint64_t)v3, type metadata accessor for Proto_AttestationBundle);
    *(void *)&long long v37 = sub_24A1B94D4(*MEMORY[0x263F276F8]);
    *((void *)&v37 + 1) = v12;
    sub_24A1CF5C4(&v37, 0);
    long long v35 = v37;
    sub_24A1A52B0(v11, v10);
    int v13 = sub_24A1CF86C((uint64_t *)&v35, v11, v10);
    sub_24A1A5384(v11, v10);
    if (v13)
    {
      sub_24A1CFC44();
      os_log_type_t v14 = (void *)swift_allocError();
      unsigned char *v15 = 0;
      swift_willThrow();
      sub_24A1A5384(v11, v10);
      sub_24A1A5384(v35, *((unint64_t *)&v35 + 1));
      id v16 = v14;
      id v17 = v14;
      uint64_t v18 = sub_24A2A7140();
      os_log_type_t v19 = sub_24A2A7B30();
      if (os_log_type_enabled(v18, v19))
      {
        uint64_t v20 = (uint8_t *)swift_slowAlloc();
        unint64_t v21 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v20 = 138543362;
        id v22 = v14;
        uint64_t v23 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)&long long v35 = v23;
        sub_24A2A7B70();
        *unint64_t v21 = v23;

        _os_log_impl(&dword_24A19F000, v18, v19, "Unexpected invalid sep attestation blob (how did this happen?): %{public}@", v20, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&qword_269778BB8);
        swift_arrayDestroy();
        MEMORY[0x24C5C00A0](v21, -1, -1);
        MEMORY[0x24C5C00A0](v20, -1, -1);

LABEL_17:
        uint64_t v5 = 0;
        goto LABEL_18;
      }
    }
    else
    {
      long long v24 = v35;
      *(void *)&long long v37 = 0;
      v34[0] = 0;
      sub_24A1A52B0(v11, v10);
      sub_24A1A52B0(v24, *((unint64_t *)&v24 + 1));
      sub_24A1EDD20(v24, *((unint64_t *)&v24 + 1), (unsigned char **)&v37, v34, (uint64_t)&v35);
      sub_24A1A5384(v11, v10);
      sub_24A1A5384(v24, *((unint64_t *)&v24 + 1));
      if (v36 != 2)
      {
        uint64_t v27 = *((void *)&v35 + 1);
        int v28 = v35;
        __swift_instantiateConcreteTypeFromMangledName(&qword_26B174BA0);
        uint64_t v29 = swift_allocObject();
        *(_OWORD *)(v29 + 16) = xmmword_24A2A8AA0;
        uint64_t v30 = MEMORY[0x263F8E960];
        *(void *)(v29 + 56) = MEMORY[0x263F8E8F8];
        *(void *)(v29 + 64) = v30;
        uint64_t v31 = MEMORY[0x263F8E970];
        *(_DWORD *)(v29 + 32) = v28;
        uint64_t v32 = MEMORY[0x263F8E9C0];
        *(void *)(v29 + 96) = v31;
        *(void *)(v29 + 104) = v32;
        *(void *)(v29 + 72) = v27;
        uint64_t v5 = sub_24A2A7840();
        sub_24A1A5384(v11, v10);
        sub_24A1A5384(v24, *((unint64_t *)&v24 + 1));
        goto LABEL_18;
      }
      uint64_t v18 = sub_24A2A7140();
      os_log_type_t v25 = sub_24A2A7B30();
      if (os_log_type_enabled(v18, v25))
      {
        uint64_t v26 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v26 = 0;
        _os_log_impl(&dword_24A19F000, v18, v25, "Unable to parse device udid from sep attestation", v26, 2u);
        MEMORY[0x24C5C00A0](v26, -1, -1);

        sub_24A1A5384(v11, v10);
        sub_24A1A5384(v24, *((unint64_t *)&v24 + 1));
        goto LABEL_17;
      }
      sub_24A1A5384(v11, v10);
      sub_24A1A5384(v24, *((unint64_t *)&v24 + 1));
    }

    goto LABEL_17;
  }
  uint64_t v5 = *v4;
LABEL_18:
  swift_bridgeObjectRetain();
  return v5;
}

uint64_t Validated.AttestationBundle.provisioningCertificateChain.getter()
{
  uint64_t v1 = type metadata accessor for AttestationBundle(0);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24A1F7F50(v0, (uint64_t)v3, type metadata accessor for AttestationBundle);
  uint64_t v4 = *((void *)v3 + 4);
  swift_bridgeObjectRetain();
  sub_24A1F7EF0((uint64_t)v3, type metadata accessor for Proto_AttestationBundle);
  return v4;
}

uint64_t Validated.AttestationBundle.keyExpiration.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749E0);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_24A2A6DC0();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  os_log_type_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for AttestationBundle(0);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24A1F7F50(v1, (uint64_t)v11, type metadata accessor for AttestationBundle);
  uint64_t v12 = type metadata accessor for Proto_AttestationBundle(0);
  sub_24A1B2CAC((uint64_t)&v11[*(int *)(v12 + 36)], (uint64_t)v4, &qword_26B1749E0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_24A2A6DB0();
    sub_24A1B2D10((uint64_t)v4, &qword_26B1749E0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
  }
  sub_24A1F7EF0((uint64_t)v11, type metadata accessor for Proto_AttestationBundle);
  sub_24A2A6D90();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t Validated.AttestationBundle.routingHint.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Validated.AttestationBundle(0) + 24));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Validated.AttestationBundle.ensembleUDIDs.getter()
{
  type metadata accessor for Validated.AttestationBundle(0);

  return swift_bridgeObjectRetain();
}

uint64_t PublicKeyData.raw.getter()
{
  uint64_t v1 = *v0;
  sub_24A1CFCAC(*v0, v0[1]);
  return v1;
}

uint64_t AttestationBundle.serializedData()()
{
  return sub_24A2A6FE0();
}

Swift::String __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> AttestationBundle.jsonString()()
{
  uint64_t v0 = sub_24A2A6E50();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24A2A6E40();
  type metadata accessor for Proto_AttestationBundle(0);
  sub_24A1F7E20(&qword_26B174268, (void (*)(uint64_t))type metadata accessor for Proto_AttestationBundle);
  uint64_t v4 = sub_24A2A6FB0();
  uint64_t v6 = v5;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  uint64_t v7 = v4;
  os_log_type_t v8 = v6;
  result._object = v8;
  result._countAndFlagsBits = v7;
  return result;
}

uint64_t sub_24A1F71B0()
{
  return sub_24A2A7EA0();
}

uint64_t sub_24A1F7210()
{
  return sub_24A2A7E90();
}

uint64_t static CloudAttestationError.errorDomain.getter()
{
  swift_beginAccess();
  uint64_t v0 = qword_269778E58;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t static CloudAttestationError.errorDomain.setter(uint64_t a1, char *a2)
{
  qword_269778E58 = a1;
  off_269778E60 = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*static CloudAttestationError.errorDomain.modify())()
{
  return j__swift_endAccess;
}

uint64_t CloudAttestationError.errorCode.getter()
{
  uint64_t v1 = type metadata accessor for CloudAttestationError(0);
  MEMORY[0x270FA5388](v1);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24A1F7F50(v0, (uint64_t)v3, type metadata accessor for CloudAttestationError);
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 1:
      sub_24A1F7EF0((uint64_t)v3, type metadata accessor for CloudAttestationError);
      uint64_t result = 2;
      break;
    case 2:
      sub_24A1F7EF0((uint64_t)v3, type metadata accessor for CloudAttestationError);
      uint64_t result = 3;
      break;
    case 3:
      uint64_t v5 = sub_24A2A6BC0();
      (*(void (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8))(v3, v5);
      uint64_t result = 5;
      break;
    case 4:
      return result;
    default:
      sub_24A1F7EF0((uint64_t)v3, type metadata accessor for CloudAttestationError);
      uint64_t result = 1;
      break;
  }
  return result;
}

uint64_t sub_24A1F74FC()
{
  swift_beginAccess();
  uint64_t v0 = qword_269778E58;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t sub_24A1F7550()
{
  uint64_t v1 = MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24A1F7F50(v1, (uint64_t)v3, type metadata accessor for CloudAttestationError);
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 1:
      sub_24A1F7EF0((uint64_t)v3, type metadata accessor for CloudAttestationError);
      uint64_t result = 2;
      break;
    case 2:
      sub_24A1F7EF0((uint64_t)v3, type metadata accessor for CloudAttestationError);
      uint64_t result = 3;
      break;
    case 3:
      uint64_t v5 = sub_24A2A6BC0();
      (*(void (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8))(v3, v5);
      uint64_t result = 5;
      break;
    case 4:
      return result;
    default:
      sub_24A1F7EF0((uint64_t)v3, type metadata accessor for CloudAttestationError);
      uint64_t result = 1;
      break;
  }
  return result;
}

uint64_t sub_24A1F76CC()
{
  return sub_24A2A68B0();
}

uint64_t AttestationBundle.atLogProofs.getter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1742D8);
  MEMORY[0x270FA5388](v0 - 8);
  uint64_t v2 = (char *)v21 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for ATLogProofs(0);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174880);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Proto_TransparencyProofs(0);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  int v13 = (char *)v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for Proto_AttestationBundle(0);
  sub_24A1B2CAC(v21[1] + *(int *)(v14 + 40), (uint64_t)v9, &qword_26B174880);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    sub_24A2A6E00();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(&v13[*(int *)(v10 + 20)], 1, 1, v3);
    sub_24A1B2D10((uint64_t)v9, &qword_26B174880);
  }
  else
  {
    sub_24A1F7E68((uint64_t)v9, (uint64_t)v13, type metadata accessor for Proto_TransparencyProofs);
  }
  sub_24A1B2CAC((uint64_t)&v13[*(int *)(v10 + 20)], (uint64_t)v2, &qword_26B1742D8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    sub_24A2A6E00();
    unint64_t v15 = &v6[*(int *)(v3 + 20)];
    uint64_t v16 = type metadata accessor for LogEntry(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v15, 1, 1, v16);
    id v17 = &v6[*(int *)(v3 + 24)];
    uint64_t v18 = type metadata accessor for LogConsistency(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v17, 1, 1, v18);
    sub_24A1B2D10((uint64_t)v2, &qword_26B1742D8);
  }
  else
  {
    sub_24A1F7E68((uint64_t)v2, (uint64_t)v6, type metadata accessor for ATLogProofs);
  }
  sub_24A1F7EF0((uint64_t)v13, type metadata accessor for Proto_TransparencyProofs);
  sub_24A1F7E20((unint64_t *)&qword_26B1742B8, (void (*)(uint64_t))type metadata accessor for ATLogProofs);
  uint64_t v19 = sub_24A2A6FE0();
  sub_24A1F7EF0((uint64_t)v6, type metadata accessor for ATLogProofs);
  return v19;
}

uint64_t sub_24A1F7B00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  id v17 = (void *)swift_task_alloc();
  *(void *)(v10 + 16) = v17;
  void *v17 = v10;
  v17[1] = sub_24A1C50FC;
  return Validator.validate<A>(bundle:nonce:policy:)(a1, a2, a3, a4, a5, a6, a7, a10);
}

uint64_t _s16CloudAttestation13PublicKeyDataO2eeoiySbAC_ACtFZ_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if ((v3 & 0x2000000000000000) != 0)
  {
    if ((v5 & 0x2000000000000000) != 0)
    {
      sub_24A1CFCAC(*a2, a2[1]);
      sub_24A1CFCAC(v2, v3);
      uint64_t v6 = v2;
      unint64_t v7 = v3 & 0xDFFFFFFFFFFFFFFFLL;
      uint64_t v8 = v4;
      unint64_t v9 = v5 & 0xDFFFFFFFFFFFFFFFLL;
      goto LABEL_7;
    }
  }
  else if ((v5 & 0x2000000000000000) == 0)
  {
    sub_24A1CFCAC(*a2, a2[1]);
    sub_24A1CFCAC(v2, v3);
    uint64_t v6 = v2;
    unint64_t v7 = v3;
    uint64_t v8 = v4;
    unint64_t v9 = v5;
LABEL_7:
    char v10 = sub_24A1B7D80(v6, v7, v8, v9);
    goto LABEL_8;
  }
  sub_24A1CFCAC(*a2, a2[1]);
  sub_24A1CFCAC(v2, v3);
  char v10 = 0;
LABEL_8:
  sub_24A1CFCC8(v2, v3);
  sub_24A1CFCC8(v4, v5);
  return v10 & 1;
}

uint64_t _s16CloudAttestation9ValidatedO0B6BundleV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  if ((j___s16CloudAttestation0B6BundleV2eeoiySbAC_ACtFZ_0() & 1) == 0) {
    return 0;
  }
  uint64_t v4 = (int *)type metadata accessor for Validated.AttestationBundle(0);
  uint64_t v5 = v4[5];
  uint64_t v6 = (void *)(a1 + v5);
  uint64_t v7 = *(void *)(a1 + v5 + 8);
  uint64_t v8 = (void *)(a2 + v5);
  uint64_t v9 = v8[1];
  if (!v7)
  {
    if (v9) {
      return 0;
    }
    goto LABEL_11;
  }
  if (!v9) {
    return 0;
  }
  BOOL v10 = *v6 == *v8 && v7 == v9;
  if (v10 || (v11 = sub_24A2A7E40(), uint64_t result = 0, (v11 & 1) != 0))
  {
LABEL_11:
    uint64_t v13 = v4[6];
    uint64_t v14 = (void *)(a1 + v13);
    uint64_t v15 = *(void *)(a1 + v13 + 8);
    uint64_t v16 = (void *)(a2 + v13);
    uint64_t v17 = v16[1];
    if (v15)
    {
      if (!v17) {
        return 0;
      }
      if (*v14 != *v16 || v15 != v17)
      {
        char v19 = sub_24A2A7E40();
        uint64_t result = 0;
        if ((v19 & 1) == 0) {
          return result;
        }
      }
    }
    else if (v17)
    {
      return 0;
    }
    uint64_t v20 = v4[7];
    unint64_t v21 = *(void **)(a1 + v20);
    id v22 = *(void **)(a2 + v20);
    if (v21)
    {
      if (v22 && (sub_24A1AEB88(v21, v22) & 1) != 0) {
        return 1;
      }
    }
    else if (!v22)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for CloudAttestationError(uint64_t a1)
{
  return sub_24A1AE704(a1, qword_269778EC8);
}

uint64_t type metadata accessor for Validated.AttestationBundle(uint64_t a1)
{
  return sub_24A1AE704(a1, (uint64_t *)&unk_26B1749C8);
}

uint64_t sub_24A1F7E20(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_24A1F7E68(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for Unvalidated.AttestationBundle(uint64_t a1)
{
  return sub_24A1AE704(a1, (uint64_t *)&unk_26B1742F0);
}

uint64_t sub_24A1F7EF0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_24A1F7F50(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_24A1F7FB8()
{
  return sub_24A1F7E20((unint64_t *)&unk_269778BC8, (void (*)(uint64_t))type metadata accessor for CloudAttestationError);
}

uint64_t dispatch thunk of Attestor.defaultKeyLifetime.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of Attestor.attest(key:expiration:nonce:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v17 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a7 + 16)
                                                                                              + **(int **)(a7 + 16));
  uint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v7 + 16) = v15;
  void *v15 = v7;
  v15[1] = sub_24A1C50FC;
  return v17(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t dispatch thunk of Validator.defaultPolicy.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of Validator.validate<A>(bundle:nonce:policy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v20 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a11 + 32) + **(int **)(a11 + 32));
  uint64_t v18 = (void *)swift_task_alloc();
  *(void *)(v11 + 16) = v18;
  *uint64_t v18 = v11;
  v18[1] = sub_24A1DA244;
  return v20(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t getEnumTagSinglePayload for AttestationBundle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24A1F82DC);
}

uint64_t sub_24A1F82DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, type metadata accessor for Proto_AttestationBundle);
}

uint64_t storeEnumTagSinglePayload for AttestationBundle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24A1F8308);
}

uint64_t sub_24A1F8308(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, type metadata accessor for Proto_AttestationBundle);
}

ValueMetadata *type metadata accessor for Unvalidated()
{
  return &type metadata for Unvalidated;
}

uint64_t *_s16CloudAttestation17AttestationBundleVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for Proto_AttestationBundle(0);
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v22 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v22 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = (int *)v4;
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_24A1A52B0(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = a2[2];
    unint64_t v10 = a2[3];
    sub_24A1A52B0(v9, v10);
    a1[2] = v9;
    a1[3] = v10;
    a1[4] = a2[4];
    uint64_t v11 = v6[7];
    uint64_t v12 = (char *)a1 + v11;
    uint64_t v13 = (char *)a2 + v11;
    uint64_t v14 = sub_24A2A6E10();
    uint64_t v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16);
    swift_bridgeObjectRetain();
    v15(v12, v13, v14);
    uint64_t v16 = v6[8];
    uint64_t v17 = (uint64_t *)((char *)a1 + v16);
    uint64_t v18 = (uint64_t *)((char *)a2 + v16);
    uint64_t v19 = type metadata accessor for Proto_SealedHashLedger(0);
    uint64_t v20 = *(void *)(v19 - 8);
    unint64_t v102 = v15;
    uint64_t v101 = v14;
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
    {
      uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174800);
      memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      void *v17 = *v18;
      uint64_t v23 = *(int *)(v19 + 20);
      uint64_t v99 = a1;
      long long v24 = (char *)v17 + v23;
      os_log_type_t v25 = (char *)v18 + v23;
      swift_bridgeObjectRetain();
      uint64_t v26 = v24;
      a1 = v99;
      v15(v26, v25, v14);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
    }
    uint64_t v27 = v6[9];
    int v28 = (char *)a1 + v27;
    uint64_t v29 = (char *)a2 + v27;
    uint64_t v30 = sub_24A2A6DC0();
    uint64_t v31 = *(void *)(v30 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
    {
      uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749E0);
      memcpy(v28, v29, *(void *)(*(void *)(v32 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v28, v29, v30);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
    }
    uint64_t v33 = v6[10];
    uint64_t v34 = (char *)a1 + v33;
    long long v35 = (char *)a2 + v33;
    uint64_t v36 = type metadata accessor for Proto_TransparencyProofs(0);
    uint64_t v37 = *(void *)(v36 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36))
    {
      uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174880);
      memcpy(v34, v35, *(void *)(*(void *)(v38 - 8) + 64));
    }
    else
    {
      uint64_t v100 = v37;
      v102(v34, v35, v14);
      uint64_t v39 = *(int *)(v36 + 20);
      uint64_t v40 = &v34[v39];
      uint64_t v41 = &v35[v39];
      uint64_t v42 = type metadata accessor for ATLogProofs(0);
      uint64_t v43 = *(void *)(v42 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42))
      {
        uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1742D8);
        memcpy(v40, v41, *(void *)(*(void *)(v44 - 8) + 64));
        uint64_t v45 = v100;
      }
      else
      {
        uint64_t v98 = v43;
        v102(v40, v41, v101);
        uint64_t v97 = v42;
        uint64_t v46 = *(int *)(v42 + 20);
        uint64_t v47 = &v40[v46];
        uint64_t v48 = &v41[v46];
        uint64_t v49 = type metadata accessor for LogEntry(0);
        uint64_t v50 = *(void *)(v49 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48))(v48, 1, v49))
        {
          uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174940);
          memcpy(v47, v48, *(void *)(*(void *)(v51 - 8) + 64));
          uint64_t v52 = v97;
        }
        else
        {
          long long v94 = v41;
          uint64_t v95 = v50;
          unint64_t v96 = v40;
          *(void *)uint64_t v47 = *(void *)v48;
          v47[8] = v48[8];
          uint64_t v53 = *((void *)v48 + 3);
          *((void *)v47 + 2) = *((void *)v48 + 2);
          unint64_t v54 = *((void *)v48 + 4);
          swift_bridgeObjectRetain();
          sub_24A1A52B0(v53, v54);
          *((void *)v47 + 3) = v53;
          *((void *)v47 + 4) = v54;
          uint64_t v55 = *((void *)v48 + 6);
          *((void *)v47 + 5) = *((void *)v48 + 5);
          *((void *)v47 + 6) = v55;
          v47[56] = v48[56];
          v102(&v47[*(int *)(v49 + 36)], &v48[*(int *)(v49 + 36)], v101);
          uint64_t v56 = *(int *)(v49 + 40);
          id v57 = &v47[v56];
          uint64_t v58 = &v48[v56];
          uint64_t v59 = type metadata accessor for SignedObject(0);
          uint64_t v60 = *(void *)(v59 - 8);
          uint64_t v61 = v47;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v60 + 48))(v58, 1, v59))
          {
            uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174320);
            memcpy(v57, v58, *(void *)(*(void *)(v62 - 8) + 64));
            uint64_t v63 = v95;
            uint64_t v40 = v96;
            uint64_t v52 = v97;
            uint64_t v41 = v94;
          }
          else
          {
            uint64_t v91 = v60;
            long long v93 = v47;
            uint64_t v64 = v59;
            uint64_t v65 = *(void *)v58;
            unint64_t v66 = *((void *)v58 + 1);
            uint64_t v67 = v57;
            sub_24A1A52B0(*(void *)v58, v66);
            *(void *)id v57 = v65;
            *((void *)v57 + 1) = v66;
            uint64_t v68 = v57;
            v102(&v57[*(int *)(v64 + 20)], &v58[*(int *)(v64 + 20)], v101);
            uint64_t v92 = v64;
            uint64_t v69 = *(int *)(v64 + 24);
            uint64_t v70 = &v57[v69];
            uint64_t v71 = &v58[v69];
            uint64_t v72 = type metadata accessor for Signature(0);
            uint64_t v90 = *(void *)(v72 - 8);
            uint64_t v73 = (uint64_t *)v71;
            int v74 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v90 + 48))(v71, 1, v72);
            uint64_t v52 = v97;
            if (v74)
            {
              uint64_t v75 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
              memcpy(v70, v73, *(void *)(*(void *)(v75 - 8) + 64));
            }
            else
            {
              unint64_t v76 = v73[1];
              uint64_t v88 = *v73;
              sub_24A1A52B0(*v73, v76);
              *(void *)uint64_t v70 = v88;
              *((void *)v70 + 1) = v76;
              unint64_t v77 = v73[3];
              uint64_t v89 = v73[2];
              sub_24A1A52B0(v89, v77);
              *((void *)v70 + 2) = v89;
              *((void *)v70 + 3) = v77;
              uint64_t v68 = v67;
              *((void *)v70 + 4) = v73[4];
              v70[40] = *((unsigned char *)v73 + 40);
              v102(&v70[*(int *)(v72 + 28)], (char *)v73 + *(int *)(v72 + 28), v101);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v90 + 56))(v70, 0, 1, v72);
            }
            uint64_t v41 = v94;
            uint64_t v63 = v95;
            (*(void (**)(char *, void, uint64_t, uint64_t))(v91 + 56))(v68, 0, 1, v92);
            uint64_t v40 = v96;
            uint64_t v61 = v93;
          }
          (*(void (**)(char *, void, uint64_t, uint64_t))(v63 + 56))(v61, 0, 1, v49);
        }
        uint64_t v78 = *(int *)(v52 + 24);
        uint64_t v79 = v40;
        uint64_t v80 = &v40[v78];
        uint64_t v81 = &v41[v78];
        uint64_t v82 = type metadata accessor for LogConsistency(0);
        uint64_t v83 = *(void *)(v82 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v83 + 48))(v81, 1, v82))
        {
          uint64_t v84 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1745E0);
          memcpy(v80, v81, *(void *)(*(void *)(v84 - 8) + 64));
        }
        else
        {
          v102(v80, v81, v101);
          *(void *)&v80[*(int *)(v82 + 20)] = *(void *)&v81[*(int *)(v82 + 20)];
          uint64_t v85 = *(void (**)(char *, void, uint64_t, uint64_t))(v83 + 56);
          swift_retain();
          v85(v80, 0, 1, v82);
        }
        uint64_t v86 = v79;
        uint64_t v45 = v100;
        (*(void (**)(char *, void, uint64_t, uint64_t))(v98 + 56))(v86, 0, 1, v52);
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v45 + 56))(v34, 0, 1, v36);
    }
  }
  return a1;
}

uint64_t _s16CloudAttestation17AttestationBundleVwxx_0(uint64_t a1)
{
  sub_24A1A5384(*(void *)a1, *(void *)(a1 + 8));
  sub_24A1A5384(*(void *)(a1 + 16), *(void *)(a1 + 24));
  swift_bridgeObjectRelease();
  uint64_t v2 = (int *)type metadata accessor for Proto_AttestationBundle(0);
  uint64_t v3 = a1 + v2[7];
  uint64_t v4 = sub_24A2A6E10();
  int v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v5(v3, v4);
  uint64_t v6 = a1 + v2[8];
  uint64_t v7 = type metadata accessor for Proto_SealedHashLedger(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7))
  {
    swift_bridgeObjectRelease();
    v5(v6 + *(int *)(v7 + 20), v4);
  }
  uint64_t v8 = a1 + v2[9];
  uint64_t v9 = sub_24A2A6DC0();
  uint64_t v10 = *(void *)(v9 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9)) {
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  }
  uint64_t v11 = a1 + v2[10];
  uint64_t v12 = type metadata accessor for Proto_TransparencyProofs(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48))(v11, 1, v12);
  if (!result)
  {
    v5(v11, v4);
    uint64_t v14 = v11 + *(int *)(v12 + 20);
    uint64_t v15 = type metadata accessor for ATLogProofs(0);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48))(v14, 1, v15);
    if (!result)
    {
      v5(v14, v4);
      uint64_t v16 = v14 + *(int *)(v15 + 20);
      uint64_t v17 = type metadata accessor for LogEntry(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 48))(v16, 1, v17))
      {
        swift_bridgeObjectRelease();
        sub_24A1A5384(*(void *)(v16 + 24), *(void *)(v16 + 32));
        v5(v16 + *(int *)(v17 + 36), v4);
        uint64_t v18 = v16 + *(int *)(v17 + 40);
        uint64_t v19 = type metadata accessor for SignedObject(0);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 48))(v18, 1, v19))
        {
          sub_24A1A5384(*(void *)v18, *(void *)(v18 + 8));
          v5(v18 + *(int *)(v19 + 20), v4);
          uint64_t v20 = v18 + *(int *)(v19 + 24);
          uint64_t v21 = type metadata accessor for Signature(0);
          if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 48))(v20, 1, v21))
          {
            sub_24A1A5384(*(void *)v20, *(void *)(v20 + 8));
            sub_24A1A5384(*(void *)(v20 + 16), *(void *)(v20 + 24));
            v5(v20 + *(int *)(v21 + 28), v4);
          }
        }
      }
      uint64_t v22 = v14 + *(int *)(v15 + 24);
      uint64_t v23 = type metadata accessor for LogConsistency(0);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 48))(v22, 1, v23);
      if (!result)
      {
        v5(v22, v4);
        return swift_release();
      }
    }
  }
  return result;
}

uint64_t *_s16CloudAttestation17AttestationBundleVwcp_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_24A1A52B0(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  uint64_t v6 = a2[2];
  unint64_t v7 = a2[3];
  sub_24A1A52B0(v6, v7);
  a1[2] = v6;
  a1[3] = v7;
  a1[4] = a2[4];
  uint64_t v8 = (int *)type metadata accessor for Proto_AttestationBundle(0);
  uint64_t v9 = v8[7];
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = sub_24A2A6E10();
  uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
  swift_bridgeObjectRetain();
  v13(v10, v11, v12);
  uint64_t v14 = v8[8];
  uint64_t v15 = (uint64_t *)((char *)a1 + v14);
  uint64_t v16 = (uint64_t *)((char *)a2 + v14);
  uint64_t v17 = type metadata accessor for Proto_SealedHashLedger(0);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v99 = v13;
  uint64_t v98 = v12;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
  {
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174800);
    memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    void *v15 = *v16;
    uint64_t v20 = *(int *)(v17 + 20);
    unint64_t v96 = a1;
    uint64_t v21 = (char *)v15 + v20;
    uint64_t v22 = (char *)v16 + v20;
    swift_bridgeObjectRetain();
    uint64_t v23 = v21;
    a1 = v96;
    v13(v23, v22, v12);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  }
  uint64_t v24 = v8[9];
  os_log_type_t v25 = (char *)a1 + v24;
  uint64_t v26 = (char *)a2 + v24;
  uint64_t v27 = sub_24A2A6DC0();
  uint64_t v28 = *(void *)(v27 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
  {
    uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749E0);
    memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v25, v26, v27);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
  }
  uint64_t v30 = v8[10];
  uint64_t v31 = (char *)a1 + v30;
  uint64_t v32 = (char *)a2 + v30;
  uint64_t v33 = type metadata accessor for Proto_TransparencyProofs(0);
  uint64_t v34 = *(void *)(v33 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
  {
    uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174880);
    memcpy(v31, v32, *(void *)(*(void *)(v35 - 8) + 64));
  }
  else
  {
    uint64_t v97 = v34;
    v99(v31, v32, v12);
    uint64_t v36 = *(int *)(v33 + 20);
    uint64_t v37 = &v31[v36];
    uint64_t v38 = &v32[v36];
    uint64_t v39 = type metadata accessor for ATLogProofs(0);
    uint64_t v40 = *(void *)(v39 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39))
    {
      uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1742D8);
      memcpy(v37, v38, *(void *)(*(void *)(v41 - 8) + 64));
      uint64_t v42 = v97;
    }
    else
    {
      uint64_t v95 = v40;
      v99(v37, v38, v98);
      uint64_t v94 = v39;
      uint64_t v43 = *(int *)(v39 + 20);
      uint64_t v44 = &v37[v43];
      uint64_t v45 = &v38[v43];
      uint64_t v46 = type metadata accessor for LogEntry(0);
      uint64_t v47 = *(void *)(v46 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v45, 1, v46))
      {
        uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174940);
        memcpy(v44, v45, *(void *)(*(void *)(v48 - 8) + 64));
        uint64_t v49 = v94;
      }
      else
      {
        uint64_t v92 = v38;
        uint64_t v93 = v47;
        uint64_t v91 = v37;
        *(void *)uint64_t v44 = *(void *)v45;
        v44[8] = v45[8];
        uint64_t v50 = *((void *)v45 + 3);
        *((void *)v44 + 2) = *((void *)v45 + 2);
        unint64_t v51 = *((void *)v45 + 4);
        swift_bridgeObjectRetain();
        sub_24A1A52B0(v50, v51);
        *((void *)v44 + 3) = v50;
        *((void *)v44 + 4) = v51;
        uint64_t v52 = *((void *)v45 + 6);
        *((void *)v44 + 5) = *((void *)v45 + 5);
        *((void *)v44 + 6) = v52;
        v44[56] = v45[56];
        v99(&v44[*(int *)(v46 + 36)], &v45[*(int *)(v46 + 36)], v98);
        uint64_t v53 = *(int *)(v46 + 40);
        unint64_t v54 = &v44[v53];
        uint64_t v55 = &v45[v53];
        uint64_t v56 = type metadata accessor for SignedObject(0);
        uint64_t v57 = *(void *)(v56 - 8);
        uint64_t v58 = v44;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48))(v55, 1, v56))
        {
          uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174320);
          memcpy(v54, v55, *(void *)(*(void *)(v59 - 8) + 64));
          uint64_t v37 = v91;
          uint64_t v38 = v92;
          uint64_t v49 = v94;
          uint64_t v60 = v93;
        }
        else
        {
          uint64_t v88 = v57;
          uint64_t v90 = v44;
          uint64_t v61 = v56;
          uint64_t v62 = *(void *)v55;
          unint64_t v63 = *((void *)v55 + 1);
          uint64_t v64 = v54;
          sub_24A1A52B0(*(void *)v55, v63);
          *(void *)unint64_t v54 = v62;
          *((void *)v54 + 1) = v63;
          uint64_t v65 = v54;
          v99(&v54[*(int *)(v61 + 20)], &v55[*(int *)(v61 + 20)], v98);
          uint64_t v89 = v61;
          uint64_t v66 = *(int *)(v61 + 24);
          uint64_t v67 = &v54[v66];
          uint64_t v68 = &v55[v66];
          uint64_t v69 = type metadata accessor for Signature(0);
          uint64_t v87 = *(void *)(v69 - 8);
          uint64_t v70 = (uint64_t *)v68;
          int v71 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v87 + 48))(v68, 1, v69);
          uint64_t v49 = v94;
          if (v71)
          {
            uint64_t v72 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
            memcpy(v67, v70, *(void *)(*(void *)(v72 - 8) + 64));
          }
          else
          {
            unint64_t v73 = v70[1];
            uint64_t v85 = *v70;
            sub_24A1A52B0(*v70, v73);
            *(void *)uint64_t v67 = v85;
            *((void *)v67 + 1) = v73;
            unint64_t v74 = v70[3];
            uint64_t v86 = v70[2];
            sub_24A1A52B0(v86, v74);
            *((void *)v67 + 2) = v86;
            *((void *)v67 + 3) = v74;
            uint64_t v65 = v64;
            *((void *)v67 + 4) = v70[4];
            v67[40] = *((unsigned char *)v70 + 40);
            v99(&v67[*(int *)(v69 + 28)], (char *)v70 + *(int *)(v69 + 28), v98);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v87 + 56))(v67, 0, 1, v69);
          }
          uint64_t v38 = v92;
          uint64_t v60 = v93;
          (*(void (**)(char *, void, uint64_t, uint64_t))(v88 + 56))(v65, 0, 1, v89);
          uint64_t v58 = v90;
          uint64_t v37 = v91;
        }
        (*(void (**)(char *, void, uint64_t, uint64_t))(v60 + 56))(v58, 0, 1, v46);
      }
      uint64_t v75 = *(int *)(v49 + 24);
      unint64_t v76 = v37;
      unint64_t v77 = &v37[v75];
      uint64_t v78 = &v38[v75];
      uint64_t v79 = type metadata accessor for LogConsistency(0);
      uint64_t v80 = *(void *)(v79 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v80 + 48))(v78, 1, v79))
      {
        uint64_t v81 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1745E0);
        memcpy(v77, v78, *(void *)(*(void *)(v81 - 8) + 64));
      }
      else
      {
        v99(v77, v78, v98);
        *(void *)&v77[*(int *)(v79 + 20)] = *(void *)&v78[*(int *)(v79 + 20)];
        uint64_t v82 = *(void (**)(char *, void, uint64_t, uint64_t))(v80 + 56);
        swift_retain();
        v82(v77, 0, 1, v79);
      }
      uint64_t v83 = v76;
      uint64_t v42 = v97;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v95 + 56))(v83, 0, 1, v49);
    }
    (*(void (**)(char *, void, uint64_t, uint64_t))(v42 + 56))(v31, 0, 1, v33);
  }
  return a1;
}

uint64_t *_s16CloudAttestation17AttestationBundleVwca_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_24A1A52B0(*a2, v5);
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_24A1A5384(v6, v7);
  uint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  sub_24A1A52B0(v8, v9);
  uint64_t v10 = a1[2];
  unint64_t v11 = a1[3];
  a1[2] = v8;
  a1[3] = v9;
  sub_24A1A5384(v10, v11);
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v12 = (int *)type metadata accessor for Proto_AttestationBundle(0);
  uint64_t v13 = v12[7];
  uint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = (char *)a2 + v13;
  uint64_t v16 = sub_24A2A6E10();
  uint64_t v262 = *(void *)(v16 - 8);
  uint64_t v263 = v16;
  v264 = *(void (**)(char *, char *))(v262 + 24);
  v264(v14, v15);
  uint64_t v17 = v12[8];
  uint64_t v18 = (uint64_t *)((char *)a1 + v17);
  uint64_t v19 = (uint64_t *)((char *)a2 + v17);
  uint64_t v20 = type metadata accessor for Proto_SealedHashLedger(0);
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v21 + 48);
  int v23 = v22(v18, 1, v20);
  int v24 = v22(v19, 1, v20);
  if (v23)
  {
    if (!v24)
    {
      *uint64_t v18 = *v19;
      uint64_t v25 = *(int *)(v20 + 20);
      uint64_t v26 = (char *)v18 + v25;
      uint64_t v27 = (char *)v19 + v25;
      uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v262 + 16);
      swift_bridgeObjectRetain();
      v28(v26, v27, v263);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v24)
  {
    sub_24A1F7EF0((uint64_t)v18, type metadata accessor for Proto_SealedHashLedger);
LABEL_6:
    uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174800);
    memcpy(v18, v19, *(void *)(*(void *)(v29 - 8) + 64));
    goto LABEL_7;
  }
  *uint64_t v18 = *v19;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  ((void (*)(char *, char *, uint64_t))v264)((char *)v18 + *(int *)(v20 + 20), (char *)v19 + *(int *)(v20 + 20), v263);
LABEL_7:
  uint64_t v30 = v12[9];
  uint64_t v31 = (char *)a1 + v30;
  uint64_t v32 = (char *)a2 + v30;
  uint64_t v33 = sub_24A2A6DC0();
  uint64_t v34 = *(void *)(v33 - 8);
  uint64_t v35 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v34 + 48);
  int v36 = v35(v31, 1, v33);
  int v37 = v35(v32, 1, v33);
  if (v36)
  {
    if (!v37)
    {
      (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v31, v32, v33);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v37)
  {
    (*(void (**)(char *, uint64_t))(v34 + 8))(v31, v33);
LABEL_12:
    uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749E0);
    memcpy(v31, v32, *(void *)(*(void *)(v38 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v34 + 24))(v31, v32, v33);
LABEL_13:
  uint64_t v39 = v12[10];
  uint64_t v40 = (uint64_t)a1 + v39;
  uint64_t v41 = (char *)a2 + v39;
  uint64_t v42 = type metadata accessor for Proto_TransparencyProofs(0);
  uint64_t v43 = *(void *)(v42 - 8);
  uint64_t v44 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v43 + 48);
  int v45 = v44(v40, 1, v42);
  int v46 = v44((uint64_t)v41, 1, v42);
  if (!v45)
  {
    if (v46)
    {
      sub_24A1F7EF0(v40, type metadata accessor for Proto_TransparencyProofs);
      goto LABEL_19;
    }
    ((void (*)(uint64_t, char *, uint64_t))v264)(v40, v41, v263);
    uint64_t v58 = *(int *)(v42 + 20);
    uint64_t v59 = v40 + v58;
    uint64_t v60 = &v41[v58];
    uint64_t v61 = type metadata accessor for ATLogProofs(0);
    uint64_t v62 = *(void *)(v61 - 8);
    unint64_t v63 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v62 + 48);
    int v64 = v63(v59, 1, v61);
    int v65 = v63((uint64_t)v60, 1, v61);
    if (v64)
    {
      if (!v65)
      {
        uint64_t v66 = v60;
        uint64_t v67 = *(void (**)(uint64_t, char *, uint64_t))(v262 + 16);
        v67(v59, v66, v263);
        uint64_t v68 = *(int *)(v61 + 20);
        uint64_t v69 = (void *)(v59 + v68);
        v266 = v66;
        uint64_t v70 = &v66[v68];
        uint64_t v71 = type metadata accessor for LogEntry(0);
        uint64_t v72 = *(void *)(v71 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v72 + 48))(v70, 1, v71))
        {
          uint64_t v73 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174940);
          memcpy(v69, v70, *(void *)(*(void *)(v73 - 8) + 64));
          unint64_t v74 = (void (*)(char *, char *, uint64_t))v67;
          uint64_t v75 = v266;
        }
        else
        {
          uint64_t v255 = v72;
          uint64_t v259 = v59;
          uint64_t v114 = *(void *)v70;
          *((unsigned char *)v69 + 8) = v70[8];
          *uint64_t v69 = v114;
          void v69[2] = *((void *)v70 + 2);
          uint64_t v115 = *((void *)v70 + 3);
          unint64_t v116 = *((void *)v70 + 4);
          swift_bridgeObjectRetain();
          sub_24A1A52B0(v115, v116);
          v69[3] = v115;
          v69[4] = v116;
          v69[5] = *((void *)v70 + 5);
          uint64_t v117 = *((void *)v70 + 6);
          *((unsigned char *)v69 + 56) = v70[56];
          v69[6] = v117;
          v67((uint64_t)v69 + *(int *)(v71 + 36), &v70[*(int *)(v71 + 36)], v263);
          uint64_t v118 = *(int *)(v71 + 40);
          __dsta = (void *)((char *)v69 + v118);
          uint64_t v119 = (uint64_t *)&v70[v118];
          uint64_t v120 = type metadata accessor for SignedObject(0);
          uint64_t v121 = *(void *)(v120 - 8);
          if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v121 + 48))(v119, 1, v120))
          {
            unint64_t v74 = (void (*)(char *, char *, uint64_t))v67;
            uint64_t v122 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174320);
            memcpy(__dsta, v119, *(void *)(*(void *)(v122 - 8) + 64));
          }
          else
          {
            uint64_t v246 = v121;
            uint64_t v251 = *v119;
            unint64_t v240 = v119[1];
            sub_24A1A52B0(*v119, v240);
            void *__dsta = v251;
            __dsta[1] = v240;
            v67((uint64_t)__dsta + *(int *)(v120 + 20), (char *)v119 + *(int *)(v120 + 20), v263);
            uint64_t v252 = v120;
            uint64_t v134 = *(int *)(v120 + 24);
            uint64_t v135 = (void *)((char *)__dsta + v134);
            uint64_t v136 = (uint64_t *)((char *)v119 + v134);
            uint64_t v137 = type metadata accessor for Signature(0);
            uint64_t v241 = *(void *)(v137 - 8);
            if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v241 + 48))(v136, 1, v137))
            {
              unint64_t v74 = (void (*)(char *, char *, uint64_t))v67;
              uint64_t v138 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
              memcpy(v135, v136, *(void *)(*(void *)(v138 - 8) + 64));
            }
            else
            {
              uint64_t v234 = *v136;
              uint64_t v238 = v137;
              unint64_t v176 = v136[1];
              sub_24A1A52B0(*v136, v176);
              *uint64_t v135 = v234;
              v135[1] = v176;
              unint64_t v177 = v136[3];
              uint64_t v235 = v136[2];
              sub_24A1A52B0(v235, v177);
              v135[2] = v235;
              v135[3] = v177;
              uint64_t v178 = v136[4];
              *((unsigned char *)v135 + 40) = *((unsigned char *)v136 + 40);
              v135[4] = v178;
              unint64_t v74 = (void (*)(char *, char *, uint64_t))v67;
              v67((uint64_t)v135 + *(int *)(v238 + 28), (char *)v136 + *(int *)(v238 + 28), v263);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v241 + 56))(v135, 0, 1, v238);
            }
            (*(void (**)(void *, void, uint64_t, uint64_t))(v246 + 56))(__dsta, 0, 1, v252);
          }
          uint64_t v59 = v259;
          uint64_t v75 = v266;
          (*(void (**)(void *, void, uint64_t, uint64_t))(v255 + 56))(v69, 0, 1, v71);
        }
        uint64_t v179 = *(int *)(v61 + 24);
        uint64_t v180 = (char *)(v59 + v179);
        uint64_t v181 = &v75[v179];
        uint64_t v182 = type metadata accessor for LogConsistency(0);
        uint64_t v183 = *(void *)(v182 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v183 + 48))(v181, 1, v182))
        {
          uint64_t v184 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1745E0);
          memcpy(v180, v181, *(void *)(*(void *)(v184 - 8) + 64));
        }
        else
        {
          v74(v180, v181, v263);
          *(void *)&v180[*(int *)(v182 + 20)] = *(void *)&v181[*(int *)(v182 + 20)];
          unint64_t v185 = *(void (**)(char *, void, uint64_t, uint64_t))(v183 + 56);
          swift_retain();
          v185(v180, 0, 1, v182);
        }
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v62 + 56))(v59, 0, 1, v61);
        return a1;
      }
      goto LABEL_31;
    }
    if (v65)
    {
      sub_24A1F7EF0(v59, type metadata accessor for ATLogProofs);
LABEL_31:
      size_t v55 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26B1742D8) - 8) + 64);
      uint64_t v56 = (void *)v59;
      uint64_t v57 = v60;
      goto LABEL_20;
    }
    ((void (*)(uint64_t, char *, uint64_t))v264)(v59, v60, v263);
    uint64_t v95 = *(int *)(v61 + 20);
    uint64_t v258 = v59;
    unint64_t v96 = (char *)(v59 + v95);
    uint64_t v97 = &v60[v95];
    uint64_t v98 = type metadata accessor for LogEntry(0);
    uint64_t v99 = *(void *)(v98 - 8);
    uint64_t v100 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v99 + 48);
    int v101 = v100(v96, 1, v98);
    int v102 = v100(v97, 1, v98);
    if (v101)
    {
      uint64_t v103 = v258;
      if (!v102)
      {
        uint64_t v104 = *(void *)v97;
        v96[8] = v97[8];
        *(void *)unint64_t v96 = v104;
        *((void *)v96 + 2) = *((void *)v97 + 2);
        uint64_t v105 = *((void *)v97 + 3);
        unint64_t v106 = *((void *)v97 + 4);
        swift_bridgeObjectRetain();
        sub_24A1A52B0(v105, v106);
        *((void *)v96 + 3) = v105;
        *((void *)v96 + 4) = v106;
        *((void *)v96 + 5) = *((void *)v97 + 5);
        uint64_t v107 = *((void *)v97 + 6);
        v96[56] = v97[56];
        *((void *)v96 + 6) = v107;
        v250 = *(void (**)(char *, char *, uint64_t))(v262 + 16);
        v250(&v96[*(int *)(v98 + 36)], &v97[*(int *)(v98 + 36)], v263);
        uint64_t v108 = *(int *)(v98 + 40);
        uint64_t v109 = &v96[v108];
        uint64_t v110 = &v97[v108];
        uint64_t v111 = type metadata accessor for SignedObject(0);
        uint64_t v112 = *(void *)(v111 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v112 + 48))(v110, 1, v111))
        {
          uint64_t v113 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174320);
          memcpy(v109, v110, *(void *)(*(void *)(v113 - 8) + 64));
        }
        else
        {
          uint64_t v237 = v112;
          v248 = v109;
          uint64_t v168 = *(void *)v110;
          unint64_t v167 = *((void *)v110 + 1);
          sub_24A1A52B0(*(void *)v110, v167);
          void *v248 = v168;
          uint64_t v169 = v248;
          v248[1] = v167;
          v250((char *)v248 + *(int *)(v111 + 20), &v110[*(int *)(v111 + 20)], v263);
          uint64_t v242 = v111;
          uint64_t v170 = *(int *)(v111 + 24);
          uint64_t v171 = (void *)((char *)v248 + v170);
          v172 = (uint64_t *)&v110[v170];
          uint64_t v173 = type metadata accessor for Signature(0);
          uint64_t v174 = *(void *)(v173 - 8);
          uint64_t v233 = v173;
          if ((*(unsigned int (**)(uint64_t *, uint64_t))(v174 + 48))(v172, 1))
          {
            uint64_t v175 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
            memcpy(v171, v172, *(void *)(*(void *)(v175 - 8) + 64));
          }
          else
          {
            unint64_t v186 = v172[1];
            uint64_t v230 = *v172;
            sub_24A1A52B0(*v172, v186);
            *uint64_t v171 = v230;
            v171[1] = v186;
            unint64_t v187 = v172[3];
            uint64_t v231 = v172[2];
            sub_24A1A52B0(v231, v187);
            v171[2] = v231;
            v171[3] = v187;
            uint64_t v188 = v172[4];
            *((unsigned char *)v171 + 40) = *((unsigned char *)v172 + 40);
            v171[4] = v188;
            uint64_t v169 = v248;
            v250((char *)v171 + *(int *)(v233 + 28), (char *)v172 + *(int *)(v233 + 28), v263);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v174 + 56))(v171, 0, 1, v233);
          }
          (*(void (**)(void *, void, uint64_t, uint64_t))(v237 + 56))(v169, 0, 1, v242);
        }
        uint64_t v103 = v258;
        unint64_t v133 = (void (*)(uint64_t, char *, uint64_t))v264;
        (*(void (**)(char *, void, uint64_t, uint64_t))(v99 + 56))(v96, 0, 1, v98);
        goto LABEL_77;
      }
    }
    else
    {
      uint64_t v103 = v258;
      if (!v102)
      {
        uint64_t v150 = *(void *)v97;
        v96[8] = v97[8];
        *(void *)unint64_t v96 = v150;
        *((void *)v96 + 2) = *((void *)v97 + 2);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t v151 = *((void *)v97 + 3);
        unint64_t v152 = *((void *)v97 + 4);
        sub_24A1A52B0(v151, v152);
        uint64_t v153 = *((void *)v96 + 3);
        unint64_t v154 = *((void *)v96 + 4);
        *((void *)v96 + 3) = v151;
        *((void *)v96 + 4) = v152;
        sub_24A1A5384(v153, v154);
        *((void *)v96 + 5) = *((void *)v97 + 5);
        uint64_t v155 = *((void *)v97 + 6);
        v96[56] = v97[56];
        *((void *)v96 + 6) = v155;
        ((void (*)(char *, char *, uint64_t))v264)(&v96[*(int *)(v98 + 36)], &v97[*(int *)(v98 + 36)], v263);
        uint64_t v156 = *(int *)(v98 + 40);
        v96 += v156;
        v97 += v156;
        uint64_t v157 = type metadata accessor for SignedObject(0);
        uint64_t v158 = *(void *)(v157 - 8);
        uint64_t v159 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v158 + 48);
        LODWORD(v151) = v159(v96, 1, v157);
        int v160 = v159(v97, 1, v157);
        if (v151)
        {
          uint64_t v103 = v258;
          if (!v160)
          {
            uint64_t v161 = *(void *)v97;
            unint64_t v162 = *((void *)v97 + 1);
            sub_24A1A52B0(*(void *)v97, v162);
            *(void *)unint64_t v96 = v161;
            *((void *)v96 + 1) = v162;
            v256 = *(void (**)(char *, char *, uint64_t))(v262 + 16);
            v256(&v96[*(int *)(v157 + 20)], &v97[*(int *)(v157 + 20)], v263);
            uint64_t v163 = *(int *)(v157 + 24);
            uint64_t v164 = &v96[v163];
            BOOL v165 = &v97[v163];
            uint64_t v247 = type metadata accessor for Signature(0);
            uint64_t v253 = *(void *)(v247 - 8);
            if ((*(unsigned int (**)(char *, uint64_t))(v253 + 48))(v165, 1))
            {
              uint64_t v166 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
              memcpy(v164, v165, *(void *)(*(void *)(v166 - 8) + 64));
            }
            else
            {
              uint64_t v214 = *(void *)v165;
              unint64_t v243 = *((void *)v165 + 1);
              sub_24A1A52B0(*(void *)v165, v243);
              *(void *)uint64_t v164 = v214;
              *((void *)v164 + 1) = v243;
              uint64_t v215 = *((void *)v165 + 2);
              unint64_t v244 = *((void *)v165 + 3);
              sub_24A1A52B0(v215, v244);
              *((void *)v164 + 2) = v215;
              *((void *)v164 + 3) = v244;
              uint64_t v216 = *((void *)v165 + 4);
              v164[40] = v165[40];
              *((void *)v164 + 4) = v216;
              v256(&v164[*(int *)(v247 + 28)], &v165[*(int *)(v247 + 28)], v263);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v253 + 56))(v164, 0, 1, v247);
            }
            uint64_t v103 = v258;
            (*(void (**)(char *, void, uint64_t, uint64_t))(v158 + 56))(v96, 0, 1, v157);
            goto LABEL_46;
          }
        }
        else
        {
          uint64_t v103 = v258;
          if (!v160)
          {
            uint64_t v198 = *(void *)v97;
            unint64_t v199 = *((void *)v97 + 1);
            sub_24A1A52B0(*(void *)v97, v199);
            uint64_t v200 = *(void *)v96;
            unint64_t v201 = *((void *)v96 + 1);
            *(void *)unint64_t v96 = v198;
            *((void *)v96 + 1) = v199;
            sub_24A1A5384(v200, v201);
            ((void (*)(char *, char *, uint64_t))v264)(&v96[*(int *)(v157 + 20)], &v97[*(int *)(v157 + 20)], v263);
            uint64_t v202 = *(int *)(v157 + 24);
            uint64_t v203 = (uint64_t *)&v96[v202];
            uint64_t v204 = &v97[v202];
            uint64_t v205 = type metadata accessor for Signature(0);
            uint64_t v206 = *(void *)(v205 - 8);
            v207 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v206 + 48);
            LODWORD(v198) = v207(v203, 1, v205);
            int v208 = v207((uint64_t *)v204, 1, v205);
            if (v198)
            {
              if (!v208)
              {
                uint64_t v209 = *(void *)v204;
                unint64_t v210 = *((void *)v204 + 1);
                sub_24A1A52B0(*(void *)v204, v210);
                *uint64_t v203 = v209;
                v203[1] = v210;
                uint64_t v211 = *((void *)v204 + 2);
                unint64_t v212 = *((void *)v204 + 3);
                sub_24A1A52B0(v211, v212);
                v203[2] = v211;
                v203[3] = v212;
                uint64_t v213 = *((void *)v204 + 4);
                *((unsigned char *)v203 + 40) = v204[40];
                v203[4] = v213;
                (*(void (**)(char *, char *, uint64_t))(v262 + 16))((char *)v203 + *(int *)(v205 + 28), &v204[*(int *)(v205 + 28)], v263);
                (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v206 + 56))(v203, 0, 1, v205);
                uint64_t v103 = v258;
                goto LABEL_46;
              }
            }
            else
            {
              if (!v208)
              {
                uint64_t v218 = *(void *)v204;
                unint64_t v219 = *((void *)v204 + 1);
                sub_24A1A52B0(*(void *)v204, v219);
                uint64_t v220 = *v203;
                unint64_t v221 = v203[1];
                *uint64_t v203 = v218;
                v203[1] = v219;
                sub_24A1A5384(v220, v221);
                uint64_t v222 = *((void *)v204 + 2);
                unint64_t v223 = *((void *)v204 + 3);
                sub_24A1A52B0(v222, v223);
                uint64_t v224 = v203[2];
                unint64_t v225 = v203[3];
                v203[2] = v222;
                v203[3] = v223;
                sub_24A1A5384(v224, v225);
                uint64_t v226 = *((void *)v204 + 4);
                *((unsigned char *)v203 + 40) = v204[40];
                v203[4] = v226;
                unint64_t v133 = (void (*)(uint64_t, char *, uint64_t))v264;
                ((void (*)(char *, char *, uint64_t))v264)((char *)v203 + *(int *)(v205 + 28), &v204[*(int *)(v205 + 28)], v263);
                uint64_t v103 = v258;
                goto LABEL_77;
              }
              sub_24A1F7EF0((uint64_t)v203, type metadata accessor for Signature);
            }
            uint64_t v217 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
            memcpy(v203, v204, *(void *)(*(void *)(v217 - 8) + 64));
            uint64_t v103 = v258;
            goto LABEL_46;
          }
          sub_24A1F7EF0((uint64_t)v96, type metadata accessor for SignedObject);
        }
        uint64_t v131 = &qword_26B174320;
LABEL_45:
        uint64_t v132 = __swift_instantiateConcreteTypeFromMangledName(v131);
        memcpy(v96, v97, *(void *)(*(void *)(v132 - 8) + 64));
LABEL_46:
        unint64_t v133 = (void (*)(uint64_t, char *, uint64_t))v264;
LABEL_77:
        uint64_t v189 = *(int *)(v61 + 24);
        uint64_t v190 = v103 + v189;
        uint64_t v191 = &v60[v189];
        uint64_t v192 = type metadata accessor for LogConsistency(0);
        uint64_t v193 = *(void *)(v192 - 8);
        uint64_t v194 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v193 + 48);
        int v195 = v194(v190, 1, v192);
        int v196 = v194((uint64_t)v191, 1, v192);
        if (v195)
        {
          if (!v196)
          {
            (*(void (**)(uint64_t, char *, uint64_t))(v262 + 16))(v190, v191, v263);
            *(void *)(v190 + *(int *)(v192 + 20)) = *(void *)&v191[*(int *)(v192 + 20)];
            v197 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v193 + 56);
            swift_retain();
            v197(v190, 0, 1, v192);
            return a1;
          }
        }
        else
        {
          if (!v196)
          {
            v133(v190, v191, v263);
            *(void *)(v190 + *(int *)(v192 + 20)) = *(void *)&v191[*(int *)(v192 + 20)];
            swift_retain();
            swift_release();
            return a1;
          }
          sub_24A1F7EF0(v190, type metadata accessor for LogConsistency);
        }
        size_t v55 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26B1745E0) - 8) + 64);
        uint64_t v56 = (void *)v190;
        uint64_t v57 = v191;
        goto LABEL_20;
      }
      sub_24A1F7EF0((uint64_t)v96, type metadata accessor for LogEntry);
    }
    uint64_t v131 = &qword_26B174940;
    goto LABEL_45;
  }
  if (v46)
  {
LABEL_19:
    size_t v55 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26B174880) - 8) + 64);
    uint64_t v56 = (void *)v40;
    uint64_t v57 = v41;
LABEL_20:
    memcpy(v56, v57, v55);
    return a1;
  }
  uint64_t v265 = v43;
  uint64_t v47 = *(void (**)(uint64_t, char *, uint64_t))(v262 + 16);
  v47(v40, v41, v263);
  uint64_t v48 = *(int *)(v42 + 20);
  uint64_t v49 = (char *)(v40 + v48);
  uint64_t v50 = &v41[v48];
  uint64_t v51 = type metadata accessor for ATLogProofs(0);
  uint64_t v52 = *(void *)(v51 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48))(v50, 1, v51))
  {
    uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1742D8);
    memcpy(v49, v50, *(void *)(*(void *)(v53 - 8) + 64));
    uint64_t v54 = v265;
  }
  else
  {
    uint64_t v257 = v52;
    v47((uint64_t)v49, v50, v263);
    long long __dst = (int *)v51;
    uint64_t v76 = *(int *)(v51 + 20);
    v254 = v49;
    unint64_t v77 = &v49[v76];
    uint64_t v78 = &v50[v76];
    uint64_t v79 = type metadata accessor for LogEntry(0);
    uint64_t v80 = *(void *)(v79 - 8);
    v249 = (void (*)(char *, char *, uint64_t))v47;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v80 + 48))(v78, 1, v79))
    {
      uint64_t v81 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174940);
      memcpy(v77, v78, *(void *)(*(void *)(v81 - 8) + 64));
      uint64_t v82 = v254;
      uint64_t v83 = __dst;
    }
    else
    {
      v239 = v50;
      uint64_t v245 = v80;
      uint64_t v84 = *(void *)v78;
      v77[8] = v78[8];
      *(void *)unint64_t v77 = v84;
      *((void *)v77 + 2) = *((void *)v78 + 2);
      uint64_t v86 = *((void *)v78 + 3);
      unint64_t v85 = *((void *)v78 + 4);
      swift_bridgeObjectRetain();
      sub_24A1A52B0(v86, v85);
      *((void *)v77 + 3) = v86;
      *((void *)v77 + 4) = v85;
      *((void *)v77 + 5) = *((void *)v78 + 5);
      uint64_t v87 = *((void *)v78 + 6);
      v77[56] = v78[56];
      *((void *)v77 + 6) = v87;
      v47((uint64_t)&v77[*(int *)(v79 + 36)], &v78[*(int *)(v79 + 36)], v263);
      uint64_t v88 = *(int *)(v79 + 40);
      uint64_t v89 = &v77[v88];
      uint64_t v90 = &v78[v88];
      uint64_t v91 = type metadata accessor for SignedObject(0);
      uint64_t v92 = *(void *)(v91 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v92 + 48))(v90, 1, v91))
      {
        uint64_t v93 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174320);
        memcpy(v89, v90, *(void *)(*(void *)(v93 - 8) + 64));
        uint64_t v82 = v254;
        uint64_t v83 = __dst;
        uint64_t v50 = v239;
        uint64_t v94 = v245;
      }
      else
      {
        uint64_t v232 = v92;
        uint64_t v236 = v91;
        uint64_t v123 = *(void *)v90;
        unint64_t v124 = *((void *)v90 + 1);
        sub_24A1A52B0(*(void *)v90, v124);
        *(void *)uint64_t v89 = v123;
        *((void *)v89 + 1) = v124;
        v249(&v89[*(int *)(v236 + 20)], &v90[*(int *)(v236 + 20)], v263);
        uint64_t v125 = *(int *)(v236 + 24);
        uint64_t v126 = &v89[v125];
        uint64_t v127 = (uint64_t *)&v90[v125];
        uint64_t v128 = type metadata accessor for Signature(0);
        uint64_t v229 = *(void *)(v128 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v229 + 48))(v127, 1, v128))
        {
          uint64_t v129 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
          memcpy(v126, v127, *(void *)(*(void *)(v129 - 8) + 64));
          uint64_t v82 = v254;
          uint64_t v83 = __dst;
          uint64_t v130 = v236;
          uint64_t v50 = v239;
        }
        else
        {
          unint64_t v139 = v127[1];
          uint64_t v227 = *v127;
          sub_24A1A52B0(*v127, v139);
          *(void *)uint64_t v126 = v227;
          *((void *)v126 + 1) = v139;
          unint64_t v140 = v127[3];
          uint64_t v228 = v127[2];
          sub_24A1A52B0(v228, v140);
          *((void *)v126 + 2) = v228;
          *((void *)v126 + 3) = v140;
          uint64_t v130 = v236;
          uint64_t v141 = v127[4];
          v126[40] = *((unsigned char *)v127 + 40);
          *((void *)v126 + 4) = v141;
          v249(&v126[*(int *)(v128 + 28)], (char *)v127 + *(int *)(v128 + 28), v263);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v229 + 56))(v126, 0, 1, v128);
          uint64_t v82 = v254;
          uint64_t v83 = __dst;
          uint64_t v50 = v239;
        }
        (*(void (**)(char *, void, uint64_t, uint64_t))(v232 + 56))(v89, 0, 1, v130);
        uint64_t v94 = v245;
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v94 + 56))(v77, 0, 1, v79);
    }
    uint64_t v142 = v83[6];
    uint64_t v143 = &v82[v142];
    uint64_t v144 = &v50[v142];
    uint64_t v145 = type metadata accessor for LogConsistency(0);
    uint64_t v146 = *(void *)(v145 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v146 + 48))(v144, 1, v145))
    {
      uint64_t v147 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1745E0);
      memcpy(v143, v144, *(void *)(*(void *)(v147 - 8) + 64));
    }
    else
    {
      v249(v143, v144, v263);
      *(void *)&v143[*(int *)(v145 + 20)] = *(void *)&v144[*(int *)(v145 + 20)];
      BOOL v148 = *(void (**)(char *, void, uint64_t, uint64_t))(v146 + 56);
      swift_retain();
      v148(v143, 0, 1, v145);
    }
    uint64_t v54 = v265;
    (*(void (**)(char *, void, uint64_t, int *))(v257 + 56))(v82, 0, 1, __dst);
  }
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v54 + 56))(v40, 0, 1, v42);
  return a1;
}

uint64_t _s16CloudAttestation17AttestationBundleVwtk_0(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  unint64_t v5 = (int *)type metadata accessor for Proto_AttestationBundle(0);
  uint64_t v6 = v5[7];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = sub_24A2A6E10();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = v5[8];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (void *)(a2 + v11);
  uint64_t v14 = type metadata accessor for Proto_SealedHashLedger(0);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174800);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    void *v12 = *v13;
    v10((uint64_t)v12 + *(int *)(v14 + 20), (uint64_t)v13 + *(int *)(v14 + 20), v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  uint64_t v17 = v5[9];
  uint64_t v18 = (void *)(a1 + v17);
  uint64_t v19 = (const void *)(a2 + v17);
  uint64_t v20 = sub_24A2A6DC0();
  uint64_t v21 = *(void *)(v20 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749E0);
    memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v21 + 32))(v18, v19, v20);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  uint64_t v23 = v5[10];
  int v24 = (char *)(a1 + v23);
  uint64_t v25 = (char *)(a2 + v23);
  uint64_t v26 = type metadata accessor for Proto_TransparencyProofs(0);
  uint64_t v27 = *(void *)(v26 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
  {
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174880);
    memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
  }
  else
  {
    uint64_t v76 = v27;
    v10((uint64_t)v24, (uint64_t)v25, v9);
    uint64_t v29 = *(int *)(v26 + 20);
    uint64_t v30 = &v24[v29];
    uint64_t v31 = &v25[v29];
    uint64_t v32 = type metadata accessor for ATLogProofs(0);
    uint64_t v33 = *(void *)(v32 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
    {
      uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1742D8);
      memcpy(v30, v31, *(void *)(*(void *)(v34 - 8) + 64));
      uint64_t v35 = v76;
    }
    else
    {
      uint64_t v73 = v33;
      v10((uint64_t)v30, (uint64_t)v31, v9);
      uint64_t v74 = v32;
      uint64_t v75 = v30;
      uint64_t v36 = *(int *)(v32 + 20);
      int v37 = &v30[v36];
      uint64_t v38 = v10;
      uint64_t v39 = &v31[v36];
      uint64_t v40 = type metadata accessor for LogEntry(0);
      uint64_t v41 = *(void *)(v40 - 8);
      uint64_t v72 = (void (*)(char *, char *, uint64_t))v38;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
      {
        uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174940);
        memcpy(v37, v39, *(void *)(*(void *)(v42 - 8) + 64));
        uint64_t v44 = v74;
        uint64_t v43 = v75;
      }
      else
      {
        uint64_t v71 = v31;
        uint64_t v70 = v41;
        *(void *)int v37 = *(void *)v39;
        v37[8] = v39[8];
        *((void *)v37 + 2) = *((void *)v39 + 2);
        *(_OWORD *)(v37 + 24) = *(_OWORD *)(v39 + 24);
        uint64_t v45 = *((void *)v39 + 6);
        *((void *)v37 + 5) = *((void *)v39 + 5);
        *((void *)v37 + 6) = v45;
        v37[56] = v39[56];
        v38((uint64_t)&v37[*(int *)(v40 + 36)], (uint64_t)&v39[*(int *)(v40 + 36)], v9);
        uint64_t v46 = *(int *)(v40 + 40);
        uint64_t v47 = &v37[v46];
        uint64_t v48 = &v39[v46];
        uint64_t v49 = type metadata accessor for SignedObject(0);
        uint64_t v50 = *(void *)(v49 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48))(v48, 1, v49))
        {
          uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174320);
          memcpy(v47, v48, *(void *)(*(void *)(v51 - 8) + 64));
          uint64_t v44 = v74;
          uint64_t v52 = v70;
          uint64_t v31 = v71;
        }
        else
        {
          uint64_t v67 = v50;
          *(_OWORD *)uint64_t v47 = *(_OWORD *)v48;
          v72(&v47[*(int *)(v49 + 20)], &v48[*(int *)(v49 + 20)], v9);
          uint64_t v68 = v49;
          uint64_t v69 = v47;
          uint64_t v53 = *(int *)(v49 + 24);
          uint64_t v54 = &v47[v53];
          size_t v55 = &v48[v53];
          uint64_t v56 = type metadata accessor for Signature(0);
          uint64_t v57 = *(void *)(v56 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48))(v55, 1, v56))
          {
            uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
            memcpy(v54, v55, *(void *)(*(void *)(v58 - 8) + 64));
          }
          else
          {
            long long v59 = *((_OWORD *)v55 + 1);
            *(_OWORD *)uint64_t v54 = *(_OWORD *)v55;
            *((_OWORD *)v54 + 1) = v59;
            *((void *)v54 + 4) = *((void *)v55 + 4);
            v54[40] = v55[40];
            v72(&v54[*(int *)(v56 + 28)], &v55[*(int *)(v56 + 28)], v9);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v57 + 56))(v54, 0, 1, v56);
          }
          uint64_t v31 = v71;
          (*(void (**)(char *, void, uint64_t, uint64_t))(v67 + 56))(v69, 0, 1, v68);
          uint64_t v44 = v74;
          uint64_t v52 = v70;
        }
        (*(void (**)(char *, void, uint64_t, uint64_t))(v52 + 56))(v37, 0, 1, v40);
        uint64_t v43 = v75;
      }
      uint64_t v60 = *(int *)(v44 + 24);
      uint64_t v61 = &v43[v60];
      uint64_t v62 = &v31[v60];
      uint64_t v63 = type metadata accessor for LogConsistency(0);
      uint64_t v64 = *(void *)(v63 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48))(v62, 1, v63))
      {
        uint64_t v65 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1745E0);
        memcpy(v61, v62, *(void *)(*(void *)(v65 - 8) + 64));
      }
      else
      {
        v72(v61, v62, v9);
        *(void *)&v61[*(int *)(v63 + 20)] = *(void *)&v62[*(int *)(v63 + 20)];
        (*(void (**)(char *, void, uint64_t, uint64_t))(v64 + 56))(v61, 0, 1, v63);
      }
      uint64_t v35 = v76;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v73 + 56))(v75, 0, 1, v74);
    }
    (*(void (**)(char *, void, uint64_t, uint64_t))(v35 + 56))(v24, 0, 1, v26);
  }
  return a1;
}

uint64_t *_s16CloudAttestation17AttestationBundleVwta_0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_24A1A5384(v4, v5);
  uint64_t v6 = a1[2];
  unint64_t v7 = a1[3];
  *((_OWORD *)a1 + 1) = *(_OWORD *)(a2 + 16);
  sub_24A1A5384(v6, v7);
  a1[4] = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  uint64_t v8 = (int *)type metadata accessor for Proto_AttestationBundle(0);
  uint64_t v9 = v8[7];
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = sub_24A2A6E10();
  uint64_t v202 = *(void (**)(char *, uint64_t))(*(void *)(v12 - 8) + 40);
  uint64_t v205 = v12;
  uint64_t v201 = *(void *)(v12 - 8);
  v202(v10, v11);
  uint64_t v13 = v8[8];
  uint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = (char *)(a2 + v13);
  uint64_t v16 = type metadata accessor for Proto_SealedHashLedger(0);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48);
  int v19 = v18(v14, 1, v16);
  int v20 = v18(v15, 1, v16);
  if (v19)
  {
    if (!v20)
    {
      *(void *)uint64_t v14 = *(void *)v15;
      (*(void (**)(char *, char *, uint64_t))(v201 + 32))(&v14[*(int *)(v16 + 20)], &v15[*(int *)(v16 + 20)], v205);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v20)
  {
    sub_24A1F7EF0((uint64_t)v14, type metadata accessor for Proto_SealedHashLedger);
LABEL_6:
    uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174800);
    memcpy(v14, v15, *(void *)(*(void *)(v21 - 8) + 64));
    goto LABEL_7;
  }
  *(void *)uint64_t v14 = *(void *)v15;
  swift_bridgeObjectRelease();
  ((void (*)(char *, char *, uint64_t))v202)(&v14[*(int *)(v16 + 20)], &v15[*(int *)(v16 + 20)], v205);
LABEL_7:
  uint64_t v22 = v8[9];
  uint64_t v23 = (char *)a1 + v22;
  int v24 = (char *)(a2 + v22);
  uint64_t v25 = sub_24A2A6DC0();
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v27 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v26 + 48);
  int v28 = v27(v23, 1, v25);
  int v29 = v27(v24, 1, v25);
  if (v28)
  {
    if (!v29)
    {
      (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v23, v24, v25);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v29)
  {
    (*(void (**)(char *, uint64_t))(v26 + 8))(v23, v25);
LABEL_12:
    uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749E0);
    memcpy(v23, v24, *(void *)(*(void *)(v30 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v26 + 40))(v23, v24, v25);
LABEL_13:
  uint64_t v31 = v205;
  uint64_t v32 = v8[10];
  uint64_t v33 = (uint64_t)a1 + v32;
  uint64_t v34 = (char *)(a2 + v32);
  uint64_t v35 = type metadata accessor for Proto_TransparencyProofs(0);
  uint64_t v36 = *(void *)(v35 - 8);
  int v37 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v36 + 48);
  int v38 = v37(v33, 1, v35);
  int v39 = v37((uint64_t)v34, 1, v35);
  if (v38)
  {
    if (!v39)
    {
      uint64_t v203 = *(void (**)(uint64_t, char *, uint64_t))(v201 + 32);
      v203(v33, v34, v205);
      uint64_t v40 = *(int *)(v35 + 20);
      uint64_t v41 = (char *)(v33 + v40);
      uint64_t v42 = &v34[v40];
      uint64_t v43 = type metadata accessor for ATLogProofs(0);
      uint64_t v44 = *(void *)(v43 - 8);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v42, 1, v43))
      {
        uint64_t v186 = v44;
        v203((uint64_t)v41, v42, v205);
        uint64_t v190 = (int *)v43;
        uint64_t v66 = *(int *)(v43 + 20);
        uint64_t v200 = v41;
        uint64_t v67 = &v41[v66];
        uint64_t v68 = &v42[v66];
        uint64_t v69 = type metadata accessor for LogEntry(0);
        uint64_t v70 = *(void *)(v69 - 8);
        int v195 = v42;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v70 + 48))(v68, 1, v69))
        {
          uint64_t v71 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174940);
          memcpy(v67, v68, *(void *)(*(void *)(v71 - 8) + 64));
          uint64_t v72 = v190;
        }
        else
        {
          uint64_t v178 = v70;
          *(void *)uint64_t v67 = *(void *)v68;
          v67[8] = v68[8];
          *((void *)v67 + 2) = *((void *)v68 + 2);
          *(_OWORD *)(v67 + 24) = *(_OWORD *)(v68 + 24);
          uint64_t v73 = *((void *)v68 + 6);
          *((void *)v67 + 5) = *((void *)v68 + 5);
          *((void *)v67 + 6) = v73;
          v67[56] = v68[56];
          v203((uint64_t)&v67[*(int *)(v69 + 36)], &v68[*(int *)(v69 + 36)], v205);
          uint64_t v74 = *(int *)(v69 + 40);
          long long __dst = &v67[v74];
          uint64_t v75 = &v68[v74];
          uint64_t v76 = type metadata accessor for SignedObject(0);
          uint64_t v77 = *(void *)(v76 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v77 + 48))(v75, 1, v76))
          {
            uint64_t v78 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174320);
            memcpy(__dst, v75, *(void *)(*(void *)(v78 - 8) + 64));
          }
          else
          {
            uint64_t v174 = v77;
            *(_OWORD *)long long __dst = *(_OWORD *)v75;
            v203((uint64_t)&__dst[*(int *)(v76 + 20)], &v75[*(int *)(v76 + 20)], v205);
            uint64_t v176 = v76;
            uint64_t v100 = *(int *)(v76 + 24);
            int v101 = &__dst[v100];
            int v102 = &v75[v100];
            uint64_t v103 = type metadata accessor for Signature(0);
            uint64_t v104 = *(void *)(v103 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v104 + 48))(v102, 1, v103))
            {
              uint64_t v105 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
              memcpy(v101, v102, *(void *)(*(void *)(v105 - 8) + 64));
            }
            else
            {
              long long v116 = *((_OWORD *)v102 + 1);
              *(_OWORD *)int v101 = *(_OWORD *)v102;
              *((_OWORD *)v101 + 1) = v116;
              *((void *)v101 + 4) = *((void *)v102 + 4);
              v101[40] = v102[40];
              v203((uint64_t)&v101[*(int *)(v103 + 28)], &v102[*(int *)(v103 + 28)], v205);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v104 + 56))(v101, 0, 1, v103);
            }
            (*(void (**)(char *, void, uint64_t, uint64_t))(v174 + 56))(__dst, 0, 1, v176);
          }
          uint64_t v44 = v186;
          uint64_t v72 = v190;
          (*(void (**)(char *, void, uint64_t, uint64_t))(v178 + 56))(v67, 0, 1, v69);
        }
        uint64_t v117 = v72[6];
        uint64_t v118 = &v200[v117];
        uint64_t v119 = &v195[v117];
        uint64_t v120 = type metadata accessor for LogConsistency(0);
        uint64_t v121 = *(void *)(v120 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v121 + 48))(v119, 1, v120))
        {
          uint64_t v122 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1745E0);
          memcpy(v118, v119, *(void *)(*(void *)(v122 - 8) + 64));
        }
        else
        {
          v203((uint64_t)v118, v119, v205);
          *(void *)&v118[*(int *)(v120 + 20)] = *(void *)&v119[*(int *)(v120 + 20)];
          (*(void (**)(char *, void, uint64_t, uint64_t))(v121 + 56))(v118, 0, 1, v120);
        }
        (*(void (**)(char *, void, uint64_t, int *))(v44 + 56))(v200, 0, 1, v72);
        goto LABEL_57;
      }
      size_t v45 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26B1742D8) - 8) + 64);
      uint64_t v46 = v41;
      goto LABEL_17;
    }
    goto LABEL_20;
  }
  if (!v39)
  {
    ((void (*)(uint64_t, char *, uint64_t))v202)(v33, v34, v205);
    uint64_t v50 = *(int *)(v35 + 20);
    uint64_t v51 = v33 + v50;
    uint64_t v52 = &v34[v50];
    uint64_t v35 = type metadata accessor for ATLogProofs(0);
    uint64_t v36 = *(void *)(v35 - 8);
    uint64_t v53 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v36 + 48);
    int v54 = v53(v51, 1, v35);
    int v55 = v53((uint64_t)v52, 1, v35);
    if (v54)
    {
      if (!v55)
      {
        uint64_t v56 = v52;
        uint64_t v57 = *(void (**)(uint64_t, char *, uint64_t))(v201 + 32);
        v57(v51, v56, v205);
        uint64_t v58 = *(int *)(v35 + 20);
        uint64_t v204 = v51;
        long long v59 = (void *)(v51 + v58);
        unint64_t v199 = v56;
        uint64_t v60 = &v56[v58];
        uint64_t v61 = type metadata accessor for LogEntry(0);
        uint64_t v62 = *(void *)(v61 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48))(v60, 1, v61))
        {
          uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174940);
          memcpy(v59, v60, *(void *)(*(void *)(v63 - 8) + 64));
          uint64_t v64 = (void (*)(char *, char *, uint64_t))v57;
          uint64_t v65 = v199;
        }
        else
        {
          uint64_t v188 = v62;
          void *v59 = *(void *)v60;
          *((unsigned char *)v59 + 8) = v60[8];
          v59[2] = *((void *)v60 + 2);
          *(_OWORD *)(v59 + 3) = *(_OWORD *)(v60 + 24);
          uint64_t v94 = *((void *)v60 + 6);
          v59[5] = *((void *)v60 + 5);
          v59[6] = v94;
          *((unsigned char *)v59 + 56) = v60[56];
          v57((uint64_t)v59 + *(int *)(v61 + 36), &v60[*(int *)(v61 + 36)], v205);
          uint64_t v95 = *(int *)(v61 + 40);
          v197 = (_OWORD *)((char *)v59 + v95);
          unint64_t v96 = &v60[v95];
          uint64_t v97 = type metadata accessor for SignedObject(0);
          uint64_t v98 = *(void *)(v97 - 8);
          uint64_t v192 = v57;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v98 + 48))(v96, 1, v97))
          {
            uint64_t v99 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174320);
            memcpy(v197, v96, *(void *)(*(void *)(v99 - 8) + 64));
            uint64_t v31 = v205;
          }
          else
          {
            uint64_t v179 = v98;
            _OWORD *v197 = *(_OWORD *)v96;
            v57((uint64_t)v197 + *(int *)(v97 + 20), &v96[*(int *)(v97 + 20)], v205);
            __dsta = (void *)v97;
            uint64_t v110 = *(int *)(v97 + 24);
            uint64_t v111 = (_OWORD *)((char *)v197 + v110);
            uint64_t v112 = &v96[v110];
            uint64_t v113 = type metadata accessor for Signature(0);
            uint64_t v114 = *(void *)(v113 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v114 + 48))(v112, 1, v113))
            {
              uint64_t v115 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
              memcpy(v111, v112, *(void *)(*(void *)(v115 - 8) + 64));
              uint64_t v31 = v205;
            }
            else
            {
              long long v139 = *((_OWORD *)v112 + 1);
              *uint64_t v111 = *(_OWORD *)v112;
              v111[1] = v139;
              *((void *)v111 + 4) = *((void *)v112 + 4);
              *((unsigned char *)v111 + 40) = v112[40];
              uint64_t v140 = *(int *)(v113 + 28);
              uint64_t v141 = &v112[v140];
              uint64_t v31 = v205;
              v57((uint64_t)v111 + v140, v141, v205);
              (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v114 + 56))(v111, 0, 1, v113);
            }
            (*(void (**)(_OWORD *, void, uint64_t, void *))(v179 + 56))(v197, 0, 1, __dsta);
          }
          uint64_t v65 = v199;
          (*(void (**)(void *, void, uint64_t, uint64_t))(v188 + 56))(v59, 0, 1, v61);
          uint64_t v64 = (void (*)(char *, char *, uint64_t))v192;
        }
        uint64_t v142 = *(int *)(v35 + 24);
        uint64_t v33 = v204;
        uint64_t v143 = (char *)(v204 + v142);
        uint64_t v42 = &v65[v142];
        uint64_t v144 = type metadata accessor for LogConsistency(0);
        uint64_t v145 = *(void *)(v144 - 8);
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v145 + 48))(v42, 1, v144))
        {
          v64(v143, v42, v31);
          *(void *)&v143[*(int *)(v144 + 20)] = *(void *)&v42[*(int *)(v144 + 20)];
          (*(void (**)(char *, void, uint64_t, uint64_t))(v145 + 56))(v143, 0, 1, v144);
          goto LABEL_57;
        }
        size_t v45 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26B1745E0) - 8) + 64);
        uint64_t v46 = v143;
LABEL_17:
        memcpy(v46, v42, v45);
LABEL_57:
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
        return a1;
      }
      goto LABEL_32;
    }
    if (v55)
    {
      sub_24A1F7EF0(v51, type metadata accessor for ATLogProofs);
LABEL_32:
      size_t v47 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26B1742D8) - 8) + 64);
      uint64_t v48 = (void *)v51;
      uint64_t v49 = v52;
      goto LABEL_21;
    }
    ((void (*)(uint64_t, char *, uint64_t))v202)(v51, v52, v205);
    uint64_t v79 = *(int *)(v35 + 20);
    uint64_t v80 = v51 + v79;
    uint64_t v81 = &v52[v79];
    uint64_t v82 = type metadata accessor for LogEntry(0);
    uint64_t v191 = *(void **)(v82 - 8);
    uint64_t v83 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v191[6];
    int v84 = v83(v80, 1, v82);
    int v196 = (void *)v82;
    int v85 = v83((uint64_t)v81, 1, v82);
    if (v84)
    {
      if (!v85)
      {
        *(void *)uint64_t v80 = *(void *)v81;
        *(unsigned char *)(v80 + 8) = v81[8];
        *(void *)(v80 + 16) = *((void *)v81 + 2);
        *(_OWORD *)(v80 + 24) = *(_OWORD *)(v81 + 24);
        uint64_t v86 = *((void *)v81 + 6);
        *(void *)(v80 + 40) = *((void *)v81 + 5);
        *(void *)(v80 + 48) = v86;
        *(unsigned char *)(v80 + 56) = v81[56];
        unint64_t v187 = *(void (**)(uint64_t, char *, uint64_t))(v201 + 32);
        v187(v80 + *(int *)(v82 + 36), &v81[*(int *)(v82 + 36)], v205);
        uint64_t v87 = *(int *)(v82 + 40);
        uint64_t v88 = (_OWORD *)(v80 + v87);
        uint64_t v89 = &v81[v87];
        uint64_t v90 = type metadata accessor for SignedObject(0);
        uint64_t v91 = *(void *)(v90 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v91 + 48))(v89, 1, v90))
        {
          uint64_t v92 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174320);
          memcpy(v88, v89, *(void *)(*(void *)(v92 - 8) + 64));
          uint64_t v93 = v191;
        }
        else
        {
          uint64_t v177 = v91;
          _OWORD *v88 = *(_OWORD *)v89;
          v187((uint64_t)v88 + *(int *)(v90 + 20), &v89[*(int *)(v90 + 20)], v205);
          uint64_t v180 = v90;
          __dstb = v88;
          uint64_t v133 = *(int *)(v90 + 24);
          uint64_t v134 = (_OWORD *)((char *)v88 + v133);
          uint64_t v135 = &v89[v133];
          uint64_t v136 = type metadata accessor for Signature(0);
          uint64_t v175 = *(void *)(v136 - 8);
          uint64_t v137 = v136;
          uint64_t v93 = v191;
          if ((*(unsigned int (**)(char *, uint64_t))(v175 + 48))(v135, 1))
          {
            uint64_t v138 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
            memcpy(v134, v135, *(void *)(*(void *)(v138 - 8) + 64));
          }
          else
          {
            long long v150 = *((_OWORD *)v135 + 1);
            _OWORD *v134 = *(_OWORD *)v135;
            v134[1] = v150;
            *((void *)v134 + 4) = *((void *)v135 + 4);
            *((unsigned char *)v134 + 40) = v135[40];
            v187((uint64_t)v134 + *(int *)(v137 + 28), &v135[*(int *)(v137 + 28)], v205);
            (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v175 + 56))(v134, 0, 1, v137);
          }
          (*(void (**)(void *, void, uint64_t, uint64_t))(v177 + 56))(__dstb, 0, 1, v180);
        }
        ((void (*)(uint64_t, void, uint64_t, void *))v93[7])(v80, 0, 1, v196);
        uint64_t v109 = v205;
        goto LABEL_77;
      }
    }
    else
    {
      if (!v85)
      {
        *(void *)uint64_t v80 = *(void *)v81;
        *(unsigned char *)(v80 + 8) = v81[8];
        *(void *)(v80 + 16) = *((void *)v81 + 2);
        swift_bridgeObjectRelease();
        uint64_t v124 = *(void *)(v80 + 24);
        unint64_t v125 = *(void *)(v80 + 32);
        *(_OWORD *)(v80 + 24) = *(_OWORD *)(v81 + 24);
        sub_24A1A5384(v124, v125);
        uint64_t v126 = *((void *)v81 + 6);
        *(void *)(v80 + 40) = *((void *)v81 + 5);
        *(void *)(v80 + 48) = v126;
        *(unsigned char *)(v80 + 56) = v81[56];
        ((void (*)(uint64_t, char *, uint64_t))v202)(v80 + *(int *)(v82 + 36), &v81[*(int *)(v82 + 36)], v205);
        uint64_t v127 = *(int *)(v82 + 40);
        uint64_t v128 = (unint64_t *)(v80 + v127);
        v81 += v127;
        uint64_t v129 = type metadata accessor for SignedObject(0);
        uint64_t v130 = *(void *)(v129 - 8);
        uint64_t v131 = *(uint64_t (**)(unint64_t *, uint64_t, uint64_t))(v130 + 48);
        uint64_t v198 = v128;
        LODWORD(v128) = v131(v128, 1, v129);
        int v132 = v131((unint64_t *)v81, 1, v129);
        if (v128)
        {
          if (!v132)
          {
            *(_OWORD *)uint64_t v198 = *(_OWORD *)v81;
            uint64_t v109 = v205;
            __dstc = *(void (**)(char *, char *, uint64_t))(v201 + 32);
            __dstc((char *)v198 + *(int *)(v129 + 20), &v81[*(int *)(v129 + 20)], v205);
            uint64_t v146 = *(int *)(v129 + 24);
            uint64_t v193 = (_OWORD *)((char *)v198 + v146);
            uint64_t v147 = &v81[v146];
            uint64_t v148 = type metadata accessor for Signature(0);
            uint64_t v181 = *(void *)(v148 - 8);
            uint64_t v189 = v148;
            if ((*(unsigned int (**)(char *, uint64_t))(v181 + 48))(v147, 1))
            {
              uint64_t v149 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
              memcpy(v193, v147, *(void *)(*(void *)(v149 - 8) + 64));
            }
            else
            {
              long long v169 = *((_OWORD *)v147 + 1);
              _OWORD *v193 = *(_OWORD *)v147;
              v193[1] = v169;
              *((void *)v193 + 4) = *((void *)v147 + 4);
              *((unsigned char *)v193 + 40) = v147[40];
              __dstc((char *)v193 + *(int *)(v189 + 28), &v147[*(int *)(v189 + 28)], v205);
              (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v181 + 56))(v193, 0, 1, v189);
            }
            (*(void (**)(unint64_t *, void, uint64_t, uint64_t))(v130 + 56))(v198, 0, 1, v129);
            goto LABEL_77;
          }
          size_t v106 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26B174320) - 8) + 64);
          uint64_t v107 = v198;
        }
        else
        {
          if (!v132)
          {
            uint64_t v159 = *v198;
            unint64_t v160 = v198[1];
            *(_OWORD *)uint64_t v198 = *(_OWORD *)v81;
            sub_24A1A5384(v159, v160);
            ((void (*)(char *, char *, uint64_t))v202)((char *)v198 + *(int *)(v129 + 20), &v81[*(int *)(v129 + 20)], v205);
            uint64_t v161 = *(int *)(v129 + 24);
            uint64_t v162 = (uint64_t)v198 + v161;
            uint64_t v163 = &v81[v161];
            uint64_t v164 = type metadata accessor for Signature(0);
            uint64_t v194 = *(void **)(v164 - 8);
            BOOL v165 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v194[6];
            int v166 = v165(v162, 1, v164);
            int v167 = v165((uint64_t)v163, 1, v164);
            if (v166)
            {
              if (!v167)
              {
                long long v168 = *((_OWORD *)v163 + 1);
                *(_OWORD *)uint64_t v162 = *(_OWORD *)v163;
                *(_OWORD *)(v162 + 16) = v168;
                *(void *)(v162 + 32) = *((void *)v163 + 4);
                *(unsigned char *)(v162 + 40) = v163[40];
                uint64_t v109 = v205;
                (*(void (**)(uint64_t, char *, uint64_t))(v201 + 32))(v162 + *(int *)(v164 + 28), &v163[*(int *)(v164 + 28)], v205);
                ((void (*)(uint64_t, void, uint64_t, uint64_t))v194[7])(v162, 0, 1, v164);
                goto LABEL_77;
              }
            }
            else
            {
              if (!v167)
              {
                uint64_t v170 = *(void *)v162;
                unint64_t v171 = *(void *)(v162 + 8);
                *(_OWORD *)uint64_t v162 = *(_OWORD *)v163;
                sub_24A1A5384(v170, v171);
                uint64_t v172 = *(void *)(v162 + 16);
                unint64_t v173 = *(void *)(v162 + 24);
                *(_OWORD *)(v162 + 16) = *((_OWORD *)v163 + 1);
                sub_24A1A5384(v172, v173);
                *(void *)(v162 + 32) = *((void *)v163 + 4);
                *(unsigned char *)(v162 + 40) = v163[40];
                uint64_t v109 = v205;
                ((void (*)(uint64_t, char *, uint64_t))v202)(v162 + *(int *)(v164 + 28), &v163[*(int *)(v164 + 28)], v205);
                goto LABEL_77;
              }
              sub_24A1F7EF0(v162, type metadata accessor for Signature);
            }
            size_t v106 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8) - 8) + 64);
            uint64_t v107 = (void *)v162;
            uint64_t v108 = v163;
LABEL_47:
            memcpy(v107, v108, v106);
            uint64_t v109 = v205;
LABEL_77:
            uint64_t v151 = *(int *)(v35 + 24);
            uint64_t v152 = v51 + v151;
            uint64_t v153 = &v52[v151];
            uint64_t v154 = type metadata accessor for LogConsistency(0);
            uint64_t v155 = *(void *)(v154 - 8);
            uint64_t v156 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v155 + 48);
            int v157 = v156(v152, 1, v154);
            int v158 = v156((uint64_t)v153, 1, v154);
            if (v157)
            {
              if (!v158)
              {
                (*(void (**)(uint64_t, char *, uint64_t))(v201 + 32))(v152, v153, v109);
                *(void *)(v152 + *(int *)(v154 + 20)) = *(void *)&v153[*(int *)(v154 + 20)];
                (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v155 + 56))(v152, 0, 1, v154);
                return a1;
              }
            }
            else
            {
              if (!v158)
              {
                ((void (*)(uint64_t, char *, uint64_t))v202)(v152, v153, v109);
                *(void *)(v152 + *(int *)(v154 + 20)) = *(void *)&v153[*(int *)(v154 + 20)];
                swift_release();
                return a1;
              }
              sub_24A1F7EF0(v152, type metadata accessor for LogConsistency);
            }
            size_t v47 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26B1745E0) - 8) + 64);
            uint64_t v48 = (void *)v152;
            uint64_t v49 = v153;
            goto LABEL_21;
          }
          sub_24A1F7EF0((uint64_t)v198, type metadata accessor for SignedObject);
          size_t v106 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26B174320) - 8) + 64);
          uint64_t v107 = v198;
        }
LABEL_46:
        uint64_t v108 = v81;
        goto LABEL_47;
      }
      sub_24A1F7EF0(v80, type metadata accessor for LogEntry);
    }
    size_t v106 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26B174940) - 8) + 64);
    uint64_t v107 = (void *)v80;
    goto LABEL_46;
  }
  sub_24A1F7EF0(v33, type metadata accessor for Proto_TransparencyProofs);
LABEL_20:
  size_t v47 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26B174880) - 8) + 64);
  uint64_t v48 = (void *)v33;
  uint64_t v49 = v34;
LABEL_21:
  memcpy(v48, v49, v47);
  return a1;
}

uint64_t getEnumTagSinglePayload for Unvalidated.AttestationBundle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24A1FD474);
}

uint64_t sub_24A1FD474(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, type metadata accessor for AttestationBundle);
}

uint64_t __swift_get_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4(0);
  unint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48);

  return v7(a1, a2, v6);
}

uint64_t storeEnumTagSinglePayload for Unvalidated.AttestationBundle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24A1FD510);
}

uint64_t sub_24A1FD510(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, type metadata accessor for AttestationBundle);
}

uint64_t __swift_store_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v7 = a5(0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);

  return v8(a1, a2, a2, v7);
}

uint64_t sub_24A1FD59C()
{
  uint64_t result = type metadata accessor for Proto_AttestationBundle(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for Validated()
{
  return &type metadata for Validated;
}

uint64_t *initializeBufferWithCopyOfBuffer for Validated.AttestationBundle(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v3 = a2;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v23 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v23 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *a2;
    unint64_t v7 = a2[1];
    sub_24A1A52B0(*a2, v7);
    *a1 = v6;
    a1[1] = v7;
    uint64_t v8 = v3[2];
    unint64_t v9 = v3[3];
    sub_24A1A52B0(v8, v9);
    a1[2] = v8;
    a1[3] = v9;
    a1[4] = v3[4];
    uint64_t v10 = (int *)type metadata accessor for Proto_AttestationBundle(0);
    uint64_t v11 = v10[7];
    uint64_t v12 = (char *)a1 + v11;
    uint64_t v13 = (char *)v3 + v11;
    uint64_t v14 = sub_24A2A6E10();
    uint64_t v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16);
    swift_bridgeObjectRetain();
    v15(v12, v13, v14);
    uint64_t v16 = v10[8];
    uint64_t v17 = (uint64_t *)((char *)a1 + v16);
    uint64_t v18 = (uint64_t *)((char *)v3 + v16);
    uint64_t v19 = type metadata accessor for Proto_SealedHashLedger(0);
    uint64_t v20 = *(void *)(v19 - 8);
    uint64_t v111 = v14;
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
    {
      uint64_t v21 = v15;
      uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174800);
      memcpy(v17, v18, *(void *)(*(void *)(v22 - 8) + 64));
    }
    else
    {
      void *v17 = *v18;
      uint64_t v24 = *(int *)(v19 + 20);
      uint64_t v110 = v3;
      uint64_t v25 = (char *)v17 + v24;
      uint64_t v26 = (char *)v18 + v24;
      swift_bridgeObjectRetain();
      uint64_t v27 = v25;
      uint64_t v3 = v110;
      uint64_t v28 = v14;
      uint64_t v21 = v15;
      v15(v27, v26, v28);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
    }
    uint64_t v29 = v10[9];
    uint64_t v30 = (char *)a1 + v29;
    uint64_t v31 = (char *)v3 + v29;
    uint64_t v32 = sub_24A2A6DC0();
    uint64_t v33 = *(void *)(v32 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
    {
      uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749E0);
      memcpy(v30, v31, *(void *)(*(void *)(v34 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v30, v31, v32);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
    }
    uint64_t v35 = v10[10];
    uint64_t v36 = (char *)a1 + v35;
    int v37 = (char *)v3 + v35;
    uint64_t v38 = type metadata accessor for Proto_TransparencyProofs(0);
    uint64_t v39 = *(void *)(v38 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38))
    {
      uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174880);
      memcpy(v36, v37, *(void *)(*(void *)(v40 - 8) + 64));
      uint64_t v41 = a3;
    }
    else
    {
      uint64_t v42 = v21;
      v21(v36, v37, v111);
      uint64_t v43 = *(int *)(v38 + 20);
      uint64_t v109 = v36;
      uint64_t v44 = &v36[v43];
      size_t v45 = &v37[v43];
      uint64_t v46 = type metadata accessor for ATLogProofs(0);
      uint64_t v47 = *(void *)(v46 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v45, 1, v46))
      {
        uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1742D8);
        memcpy(v44, v45, *(void *)(*(void *)(v48 - 8) + 64));
        uint64_t v41 = a3;
        uint64_t v49 = v109;
      }
      else
      {
        uint64_t v107 = v47;
        v42(v44, v45, v111);
        uint64_t v108 = v46;
        uint64_t v50 = *(int *)(v46 + 20);
        uint64_t v51 = &v44[v50];
        size_t v106 = v45;
        uint64_t v52 = &v45[v50];
        uint64_t v53 = type metadata accessor for LogEntry(0);
        uint64_t v54 = *(void *)(v53 - 8);
        uint64_t v104 = v53;
        uint64_t v105 = v42;
        if ((*(unsigned int (**)(char *, uint64_t))(v54 + 48))(v52, 1))
        {
          uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174940);
          memcpy(v51, v52, *(void *)(*(void *)(v55 - 8) + 64));
          uint64_t v56 = v108;
        }
        else
        {
          uint64_t v102 = v54;
          uint64_t v103 = v44;
          *(void *)uint64_t v51 = *(void *)v52;
          v51[8] = v52[8];
          uint64_t v57 = *((void *)v52 + 3);
          *((void *)v51 + 2) = *((void *)v52 + 2);
          unint64_t v58 = *((void *)v52 + 4);
          swift_bridgeObjectRetain();
          sub_24A1A52B0(v57, v58);
          *((void *)v51 + 3) = v57;
          *((void *)v51 + 4) = v58;
          uint64_t v59 = *((void *)v52 + 6);
          *((void *)v51 + 5) = *((void *)v52 + 5);
          *((void *)v51 + 6) = v59;
          v51[56] = v52[56];
          uint64_t v60 = v104;
          v42(&v51[*(int *)(v104 + 36)], &v52[*(int *)(v104 + 36)], v111);
          uint64_t v61 = *(int *)(v104 + 40);
          uint64_t v62 = &v51[v61];
          uint64_t v63 = &v52[v61];
          uint64_t v64 = type metadata accessor for SignedObject(0);
          uint64_t v65 = *(void *)(v64 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v65 + 48))(v63, 1, v64))
          {
            uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174320);
            memcpy(v62, v63, *(void *)(*(void *)(v66 - 8) + 64));
            uint64_t v44 = v103;
            uint64_t v56 = v108;
          }
          else
          {
            uint64_t v99 = v51;
            uint64_t v100 = v65;
            uint64_t v101 = v64;
            uint64_t v67 = *(void *)v63;
            unint64_t v68 = *((void *)v63 + 1);
            sub_24A1A52B0(*(void *)v63, v68);
            *(void *)uint64_t v62 = v67;
            *((void *)v62 + 1) = v68;
            uint64_t v69 = v101;
            v105(&v62[*(int *)(v101 + 20)], &v63[*(int *)(v101 + 20)], v111);
            uint64_t v70 = *(int *)(v101 + 24);
            uint64_t v71 = &v62[v70];
            uint64_t v72 = (uint64_t *)&v63[v70];
            uint64_t v73 = type metadata accessor for Signature(0);
            uint64_t v74 = *(void *)(v73 - 8);
            uint64_t v98 = v73;
            if ((*(unsigned int (**)(uint64_t *, uint64_t))(v74 + 48))(v72, 1))
            {
              uint64_t v75 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
              memcpy(v71, v72, *(void *)(*(void *)(v75 - 8) + 64));
            }
            else
            {
              uint64_t v76 = *v72;
              unint64_t v77 = v72[1];
              sub_24A1A52B0(*v72, v77);
              *(void *)uint64_t v71 = v76;
              *((void *)v71 + 1) = v77;
              uint64_t v78 = v72[2];
              unint64_t v79 = v72[3];
              sub_24A1A52B0(v78, v79);
              *((void *)v71 + 2) = v78;
              *((void *)v71 + 3) = v79;
              uint64_t v69 = v101;
              *((void *)v71 + 4) = v72[4];
              v71[40] = *((unsigned char *)v72 + 40);
              v105(&v71[*(int *)(v98 + 28)], (char *)v72 + *(int *)(v98 + 28), v111);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v74 + 56))(v71, 0, 1, v98);
            }
            (*(void (**)(char *, void, uint64_t, uint64_t))(v100 + 56))(v62, 0, 1, v69);
            uint64_t v44 = v103;
            uint64_t v60 = v104;
            uint64_t v56 = v108;
            uint64_t v51 = v99;
          }
          (*(void (**)(char *, void, uint64_t, uint64_t))(v102 + 56))(v51, 0, 1, v60);
        }
        uint64_t v80 = *(int *)(v56 + 24);
        uint64_t v81 = v44;
        uint64_t v82 = &v44[v80];
        uint64_t v83 = &v106[v80];
        uint64_t v84 = type metadata accessor for LogConsistency(0);
        uint64_t v85 = *(void *)(v84 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v85 + 48))(v83, 1, v84))
        {
          uint64_t v86 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1745E0);
          memcpy(v82, v83, *(void *)(*(void *)(v86 - 8) + 64));
        }
        else
        {
          v105(v82, v83, v111);
          *(void *)&v82[*(int *)(v84 + 20)] = *(void *)&v83[*(int *)(v84 + 20)];
          uint64_t v87 = *(void (**)(char *, void, uint64_t, uint64_t))(v85 + 56);
          swift_retain();
          v87(v82, 0, 1, v84);
        }
        uint64_t v41 = a3;
        uint64_t v88 = v81;
        uint64_t v49 = v109;
        (*(void (**)(char *, void, uint64_t, uint64_t))(v107 + 56))(v88, 0, 1, v108);
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v39 + 56))(v49, 0, 1, v38);
    }
    uint64_t v89 = v41[5];
    uint64_t v90 = v41[6];
    uint64_t v91 = (uint64_t *)((char *)a1 + v89);
    uint64_t v92 = (uint64_t *)((char *)v3 + v89);
    uint64_t v93 = v92[1];
    *uint64_t v91 = *v92;
    v91[1] = v93;
    uint64_t v94 = (uint64_t *)((char *)a1 + v90);
    uint64_t v95 = (uint64_t *)((char *)v3 + v90);
    uint64_t v96 = v95[1];
    void *v94 = *v95;
    v94[1] = v96;
    *(uint64_t *)((char *)a1 + v41[7]) = *(uint64_t *)((char *)v3 + v41[7]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for Validated.AttestationBundle(uint64_t a1)
{
  sub_24A1A5384(*(void *)a1, *(void *)(a1 + 8));
  sub_24A1A5384(*(void *)(a1 + 16), *(void *)(a1 + 24));
  swift_bridgeObjectRelease();
  uint64_t v2 = (int *)type metadata accessor for Proto_AttestationBundle(0);
  uint64_t v3 = a1 + v2[7];
  uint64_t v4 = sub_24A2A6E10();
  int v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v5(v3, v4);
  uint64_t v6 = a1 + v2[8];
  uint64_t v7 = type metadata accessor for Proto_SealedHashLedger(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7))
  {
    swift_bridgeObjectRelease();
    v5(v6 + *(int *)(v7 + 20), v4);
  }
  uint64_t v8 = a1 + v2[9];
  uint64_t v9 = sub_24A2A6DC0();
  uint64_t v10 = *(void *)(v9 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9)) {
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  }
  uint64_t v11 = a1 + v2[10];
  uint64_t v12 = type metadata accessor for Proto_TransparencyProofs(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48))(v11, 1, v12))
  {
    v5(v11, v4);
    uint64_t v13 = v11 + *(int *)(v12 + 20);
    uint64_t v14 = type metadata accessor for ATLogProofs(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48))(v13, 1, v14))
    {
      v5(v13, v4);
      uint64_t v15 = v13 + *(int *)(v14 + 20);
      uint64_t v16 = type metadata accessor for LogEntry(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48))(v15, 1, v16))
      {
        swift_bridgeObjectRelease();
        sub_24A1A5384(*(void *)(v15 + 24), *(void *)(v15 + 32));
        v5(v15 + *(int *)(v16 + 36), v4);
        uint64_t v17 = v15 + *(int *)(v16 + 40);
        uint64_t v18 = type metadata accessor for SignedObject(0);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 48))(v17, 1, v18))
        {
          sub_24A1A5384(*(void *)v17, *(void *)(v17 + 8));
          v5(v17 + *(int *)(v18 + 20), v4);
          uint64_t v19 = v17 + *(int *)(v18 + 24);
          uint64_t v20 = type metadata accessor for Signature(0);
          if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 48))(v19, 1, v20))
          {
            sub_24A1A5384(*(void *)v19, *(void *)(v19 + 8));
            sub_24A1A5384(*(void *)(v19 + 16), *(void *)(v19 + 24));
            v5(v19 + *(int *)(v20 + 28), v4);
          }
        }
      }
      uint64_t v21 = v13 + *(int *)(v14 + 24);
      uint64_t v22 = type metadata accessor for LogConsistency(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 48))(v21, 1, v22))
      {
        v5(v21, v4);
        swift_release();
      }
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t *initializeWithCopy for Validated.AttestationBundle(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v3 = a2;
  uint64_t v5 = *a2;
  unint64_t v6 = a2[1];
  sub_24A1A52B0(*a2, v6);
  *a1 = v5;
  a1[1] = v6;
  uint64_t v7 = v3[2];
  unint64_t v8 = v3[3];
  sub_24A1A52B0(v7, v8);
  a1[2] = v7;
  a1[3] = v8;
  a1[4] = v3[4];
  uint64_t v9 = (int *)type metadata accessor for Proto_AttestationBundle(0);
  uint64_t v10 = v9[7];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)v3 + v10;
  uint64_t v13 = sub_24A2A6E10();
  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16);
  swift_bridgeObjectRetain();
  v14(v11, v12, v13);
  uint64_t v15 = v9[8];
  uint64_t v16 = (uint64_t *)((char *)a1 + v15);
  uint64_t v17 = (uint64_t *)((char *)v3 + v15);
  uint64_t v18 = type metadata accessor for Proto_SealedHashLedger(0);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v112 = v13;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
  {
    uint64_t v20 = v14;
    uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174800);
    memcpy(v16, v17, *(void *)(*(void *)(v21 - 8) + 64));
  }
  else
  {
    void *v16 = *v17;
    uint64_t v22 = *(int *)(v18 + 20);
    uint64_t v110 = a1;
    uint64_t v23 = v3;
    uint64_t v24 = (char *)v16 + v22;
    uint64_t v25 = (char *)v17 + v22;
    swift_bridgeObjectRetain();
    uint64_t v26 = v24;
    uint64_t v3 = v23;
    a1 = v110;
    uint64_t v27 = v13;
    uint64_t v20 = v14;
    v14(v26, v25, v27);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  }
  uint64_t v28 = v9[9];
  uint64_t v29 = (char *)a1 + v28;
  uint64_t v30 = (char *)v3 + v28;
  uint64_t v31 = sub_24A2A6DC0();
  uint64_t v32 = *(void *)(v31 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
  {
    uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749E0);
    memcpy(v29, v30, *(void *)(*(void *)(v33 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v29, v30, v31);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
  }
  uint64_t v34 = v9[10];
  uint64_t v35 = (char *)a1 + v34;
  uint64_t v36 = (char *)v3 + v34;
  uint64_t v37 = type metadata accessor for Proto_TransparencyProofs(0);
  uint64_t v38 = *(void *)(v37 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37))
  {
    uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174880);
    memcpy(v35, v36, *(void *)(*(void *)(v39 - 8) + 64));
    uint64_t v40 = a3;
  }
  else
  {
    uint64_t v41 = v20;
    uint64_t v111 = v38;
    v20(v35, v36, v112);
    uint64_t v42 = *(int *)(v37 + 20);
    uint64_t v109 = v35;
    uint64_t v43 = &v35[v42];
    uint64_t v44 = &v36[v42];
    uint64_t v45 = type metadata accessor for ATLogProofs(0);
    uint64_t v46 = *(void *)(v45 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v44, 1, v45))
    {
      uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1742D8);
      memcpy(v43, v44, *(void *)(*(void *)(v47 - 8) + 64));
      uint64_t v40 = a3;
      uint64_t v49 = v109;
      uint64_t v48 = v38;
    }
    else
    {
      uint64_t v106 = v46;
      v41(v43, v44, v112);
      uint64_t v50 = *(int *)(v45 + 20);
      long long __dst = &v43[v50];
      uint64_t v108 = v45;
      uint64_t v105 = v44;
      uint64_t v51 = &v44[v50];
      uint64_t v52 = type metadata accessor for LogEntry(0);
      uint64_t v53 = *(void *)(v52 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48))(v51, 1, v52))
      {
        uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174940);
        memcpy(__dst, v51, *(void *)(*(void *)(v54 - 8) + 64));
        uint64_t v55 = v105;
        uint64_t v56 = v108;
        uint64_t v49 = v109;
      }
      else
      {
        uint64_t v102 = v53;
        uint64_t v103 = v43;
        *(void *)long long __dst = *(void *)v51;
        __dst[8] = v51[8];
        uint64_t v57 = *((void *)v51 + 3);
        *((void *)__dst + 2) = *((void *)v51 + 2);
        unint64_t v58 = *((void *)v51 + 4);
        swift_bridgeObjectRetain();
        sub_24A1A52B0(v57, v58);
        *((void *)__dst + 3) = v57;
        *((void *)__dst + 4) = v58;
        uint64_t v59 = *((void *)v51 + 6);
        *((void *)__dst + 5) = *((void *)v51 + 5);
        *((void *)__dst + 6) = v59;
        __dst[56] = v51[56];
        v41(&__dst[*(int *)(v52 + 36)], &v51[*(int *)(v52 + 36)], v112);
        uint64_t v104 = v52;
        uint64_t v60 = *(int *)(v52 + 40);
        uint64_t v61 = &__dst[v60];
        uint64_t v62 = &v51[v60];
        uint64_t v63 = type metadata accessor for SignedObject(0);
        uint64_t v64 = *(void *)(v63 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48))(v62, 1, v63))
        {
          uint64_t v65 = __dst;
          uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174320);
          memcpy(v61, v62, *(void *)(*(void *)(v66 - 8) + 64));
          uint64_t v43 = v103;
          uint64_t v49 = v109;
        }
        else
        {
          uint64_t v99 = v64;
          uint64_t v65 = __dst;
          uint64_t v101 = v63;
          uint64_t v67 = *(void *)v62;
          unint64_t v68 = *((void *)v62 + 1);
          sub_24A1A52B0(*(void *)v62, v68);
          *(void *)uint64_t v61 = v67;
          *((void *)v61 + 1) = v68;
          uint64_t v69 = v101;
          v41(&v61[*(int *)(v101 + 20)], &v62[*(int *)(v101 + 20)], v112);
          uint64_t v70 = *(int *)(v101 + 24);
          uint64_t v100 = v61;
          uint64_t v71 = &v61[v70];
          uint64_t v72 = (uint64_t *)&v62[v70];
          uint64_t v73 = type metadata accessor for Signature(0);
          uint64_t v74 = *(void *)(v73 - 8);
          uint64_t v98 = v73;
          if ((*(unsigned int (**)(uint64_t *, uint64_t))(v74 + 48))(v72, 1))
          {
            uint64_t v75 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
            memcpy(v71, v72, *(void *)(*(void *)(v75 - 8) + 64));
          }
          else
          {
            uint64_t v76 = *v72;
            unint64_t v77 = v72[1];
            sub_24A1A52B0(*v72, v77);
            *(void *)uint64_t v71 = v76;
            *((void *)v71 + 1) = v77;
            uint64_t v78 = v72[2];
            unint64_t v79 = v72[3];
            sub_24A1A52B0(v78, v79);
            *((void *)v71 + 2) = v78;
            *((void *)v71 + 3) = v79;
            uint64_t v69 = v101;
            *((void *)v71 + 4) = v72[4];
            v71[40] = *((unsigned char *)v72 + 40);
            v41(&v71[*(int *)(v98 + 28)], (char *)v72 + *(int *)(v98 + 28), v112);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v74 + 56))(v71, 0, 1, v98);
          }
          uint64_t v49 = v109;
          (*(void (**)(char *, void, uint64_t, uint64_t))(v99 + 56))(v100, 0, 1, v69);
          uint64_t v43 = v103;
        }
        (*(void (**)(char *, void, uint64_t, uint64_t))(v102 + 56))(v65, 0, 1, v104);
        uint64_t v55 = v105;
        uint64_t v56 = v108;
      }
      uint64_t v80 = *(int *)(v56 + 24);
      uint64_t v81 = v43;
      uint64_t v82 = &v43[v80];
      uint64_t v83 = &v55[v80];
      uint64_t v84 = type metadata accessor for LogConsistency(0);
      uint64_t v85 = *(void *)(v84 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v85 + 48))(v83, 1, v84))
      {
        uint64_t v86 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1745E0);
        memcpy(v82, v83, *(void *)(*(void *)(v86 - 8) + 64));
      }
      else
      {
        v41(v82, v83, v112);
        *(void *)&v82[*(int *)(v84 + 20)] = *(void *)&v83[*(int *)(v84 + 20)];
        uint64_t v87 = *(void (**)(char *, void, uint64_t, uint64_t))(v85 + 56);
        swift_retain();
        v87(v82, 0, 1, v84);
      }
      uint64_t v40 = a3;
      uint64_t v88 = v81;
      uint64_t v48 = v111;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v106 + 56))(v88, 0, 1, v108);
    }
    (*(void (**)(char *, void, uint64_t, uint64_t))(v48 + 56))(v49, 0, 1, v37);
  }
  uint64_t v89 = v40[5];
  uint64_t v90 = v40[6];
  uint64_t v91 = (uint64_t *)((char *)a1 + v89);
  uint64_t v92 = (uint64_t *)((char *)v3 + v89);
  uint64_t v93 = v92[1];
  *uint64_t v91 = *v92;
  v91[1] = v93;
  uint64_t v94 = (uint64_t *)((char *)a1 + v90);
  uint64_t v95 = (uint64_t *)((char *)v3 + v90);
  uint64_t v96 = v95[1];
  void *v94 = *v95;
  v94[1] = v96;
  *(uint64_t *)((char *)a1 + v40[7]) = *(uint64_t *)((char *)v3 + v40[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *assignWithCopy for Validated.AttestationBundle(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v3 = a2;
  uint64_t v5 = *a2;
  unint64_t v6 = a2[1];
  sub_24A1A52B0(*a2, v6);
  uint64_t v7 = *a1;
  unint64_t v8 = a1[1];
  *a1 = v5;
  a1[1] = v6;
  sub_24A1A5384(v7, v8);
  uint64_t v9 = v3[2];
  unint64_t v10 = v3[3];
  sub_24A1A52B0(v9, v10);
  uint64_t v11 = a1[2];
  unint64_t v12 = a1[3];
  a1[2] = v9;
  a1[3] = v10;
  sub_24A1A5384(v11, v12);
  a1[4] = v3[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v13 = (int *)type metadata accessor for Proto_AttestationBundle(0);
  uint64_t v14 = v13[7];
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)v3 + v14;
  uint64_t v17 = sub_24A2A6E10();
  uint64_t v270 = *(void *)(v17 - 8);
  uint64_t v271 = v17;
  v273 = *(void (**)(char *, char *))(v270 + 24);
  v273(v15, v16);
  uint64_t v18 = v13[8];
  uint64_t v19 = (uint64_t *)((char *)a1 + v18);
  uint64_t v20 = (uint64_t *)((char *)v3 + v18);
  uint64_t v21 = type metadata accessor for Proto_SealedHashLedger(0);
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v22 + 48);
  int v24 = v23(v19, 1, v21);
  int v25 = v23(v20, 1, v21);
  if (v24)
  {
    if (!v25)
    {
      void *v19 = *v20;
      uint64_t v26 = *(int *)(v21 + 20);
      uint64_t v27 = (char *)v19 + v26;
      uint64_t v28 = (char *)v20 + v26;
      uint64_t v29 = *(void (**)(char *, char *, uint64_t))(v270 + 16);
      swift_bridgeObjectRetain();
      v29(v27, v28, v271);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v25)
  {
    sub_24A1F7EF0((uint64_t)v19, type metadata accessor for Proto_SealedHashLedger);
LABEL_6:
    uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174800);
    memcpy(v19, v20, *(void *)(*(void *)(v30 - 8) + 64));
    goto LABEL_7;
  }
  void *v19 = *v20;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  ((void (*)(char *, char *, uint64_t))v273)((char *)v19 + *(int *)(v21 + 20), (char *)v20 + *(int *)(v21 + 20), v271);
LABEL_7:
  uint64_t v31 = v13[9];
  uint64_t v32 = (char *)a1 + v31;
  uint64_t v33 = (char *)v3 + v31;
  uint64_t v34 = sub_24A2A6DC0();
  uint64_t v35 = *(void *)(v34 - 8);
  uint64_t v36 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v35 + 48);
  int v37 = v36(v32, 1, v34);
  int v38 = v36(v33, 1, v34);
  if (v37)
  {
    if (!v38)
    {
      (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v32, v33, v34);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v38)
  {
    (*(void (**)(char *, uint64_t))(v35 + 8))(v32, v34);
LABEL_12:
    uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749E0);
    memcpy(v32, v33, *(void *)(*(void *)(v39 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v35 + 24))(v32, v33, v34);
LABEL_13:
  uint64_t v40 = v13[10];
  uint64_t v41 = (uint64_t)a1 + v40;
  uint64_t v42 = (char *)v3 + v40;
  uint64_t v43 = type metadata accessor for Proto_TransparencyProofs(0);
  uint64_t v44 = *(void *)(v43 - 8);
  uint64_t v45 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v44 + 48);
  int v46 = v45(v41, 1, v43);
  int v47 = v45((uint64_t)v42, 1, v43);
  if (!v46)
  {
    if (v47)
    {
      sub_24A1F7EF0(v41, type metadata accessor for Proto_TransparencyProofs);
      goto LABEL_19;
    }
    ((void (*)(uint64_t, char *, uint64_t))v273)(v41, v42, v271);
    uint64_t v59 = *(int *)(v43 + 20);
    uint64_t v60 = v41 + v59;
    uint64_t v61 = &v42[v59];
    uint64_t v62 = type metadata accessor for ATLogProofs(0);
    uint64_t v258 = *(void *)(v62 - 8);
    uint64_t v63 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v258 + 48);
    uint64_t v264 = v60;
    int v64 = v63(v60, 1, v62);
    v266 = v61;
    uint64_t v262 = v62;
    int v65 = v63((uint64_t)v61, 1, v62);
    if (v64)
    {
      if (!v65)
      {
        uint64_t v73 = *(void (**)(uint64_t, char *, uint64_t))(v270 + 16);
        v73(v60, v61, v271);
        uint64_t v74 = *(int *)(v62 + 20);
        uint64_t v75 = (void *)(v60 + v74);
        uint64_t v76 = &v61[v74];
        uint64_t v77 = type metadata accessor for LogEntry(0);
        uint64_t v78 = *(void *)(v77 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v78 + 48))(v76, 1, v77))
        {
          uint64_t v79 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174940);
          memcpy(v75, v76, *(void *)(*(void *)(v79 - 8) + 64));
          uint64_t v80 = v60;
          uint64_t v81 = v258;
        }
        else
        {
          uint64_t v114 = *(void *)v76;
          *((unsigned char *)v75 + 8) = v76[8];
          *uint64_t v75 = v114;
          v75[2] = *((void *)v76 + 2);
          v275 = v73;
          uint64_t v116 = *((void *)v76 + 3);
          unint64_t v115 = *((void *)v76 + 4);
          swift_bridgeObjectRetain();
          sub_24A1A52B0(v116, v115);
          v75[3] = v116;
          v75[4] = v115;
          uint64_t v73 = v275;
          v75[5] = *((void *)v76 + 5);
          uint64_t v117 = *((void *)v76 + 6);
          *((unsigned char *)v75 + 56) = v76[56];
          v75[6] = v117;
          v275((uint64_t)v75 + *(int *)(v77 + 36), &v76[*(int *)(v77 + 36)], v271);
          uint64_t v118 = *(int *)(v77 + 40);
          __dsta = (void *)((char *)v75 + v118);
          uint64_t v119 = (uint64_t *)&v76[v118];
          uint64_t v120 = type metadata accessor for SignedObject(0);
          uint64_t v121 = *(void *)(v120 - 8);
          uint64_t v81 = v258;
          if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v121 + 48))(v119, 1, v120))
          {
            uint64_t v122 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174320);
            memcpy(__dsta, v119, *(void *)(*(void *)(v122 - 8) + 64));
            uint64_t v80 = v264;
          }
          else
          {
            uint64_t v250 = v121;
            uint64_t v133 = *v119;
            unint64_t v134 = v119[1];
            sub_24A1A52B0(*v119, v134);
            void *__dsta = v133;
            __dsta[1] = v134;
            uint64_t v135 = __dsta;
            v275((uint64_t)__dsta + *(int *)(v120 + 20), (char *)v119 + *(int *)(v120 + 20), v271);
            uint64_t v256 = v120;
            uint64_t v136 = *(int *)(v120 + 24);
            uint64_t v137 = (void *)((char *)__dsta + v136);
            uint64_t v138 = (void **)((char *)v119 + v136);
            uint64_t v139 = type metadata accessor for Signature(0);
            uint64_t v247 = *(void *)(v139 - 8);
            if ((*(unsigned int (**)(void **, uint64_t, uint64_t))(v247 + 48))(v138, 1, v139))
            {
              uint64_t v140 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
              memcpy(v137, v138, *(void *)(*(void *)(v140 - 8) + 64));
            }
            else
            {
              unint64_t v186 = (unint64_t)v138[1];
              unint64_t v244 = *v138;
              sub_24A1A52B0((uint64_t)*v138, v186);
              *uint64_t v137 = v244;
              v137[1] = v186;
              unint64_t v187 = (unint64_t)v138[3];
              uint64_t v245 = v138[2];
              sub_24A1A52B0((uint64_t)v245, v187);
              v137[2] = v245;
              v137[3] = v187;
              uint64_t v188 = v138[4];
              *((unsigned char *)v137 + 40) = *((unsigned char *)v138 + 40);
              v137[4] = v188;
              uint64_t v135 = __dsta;
              v275((uint64_t)v137 + *(int *)(v139 + 28), (char *)v138 + *(int *)(v139 + 28), v271);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v247 + 56))(v137, 0, 1, v139);
            }
            uint64_t v80 = v264;
            (*(void (**)(void *, void, uint64_t, uint64_t))(v250 + 56))(v135, 0, 1, v256);
            uint64_t v73 = v275;
          }
          (*(void (**)(void *, void, uint64_t, uint64_t))(v78 + 56))(v75, 0, 1, v77);
        }
        uint64_t v189 = *(int *)(v262 + 24);
        uint64_t v190 = (char *)(v80 + v189);
        uint64_t v191 = &v266[v189];
        uint64_t v192 = type metadata accessor for LogConsistency(0);
        uint64_t v193 = *(void *)(v192 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v193 + 48))(v191, 1, v192))
        {
          uint64_t v194 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1745E0);
          memcpy(v190, v191, *(void *)(*(void *)(v194 - 8) + 64));
        }
        else
        {
          v73((uint64_t)v190, v191, v271);
          *(void *)&v190[*(int *)(v192 + 20)] = *(void *)&v191[*(int *)(v192 + 20)];
          int v195 = *(void (**)(char *, void, uint64_t, uint64_t))(v193 + 56);
          swift_retain();
          v195(v190, 0, 1, v192);
        }
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v81 + 56))(v80, 0, 1, v262);
        goto LABEL_58;
      }
      size_t v56 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26B1742D8) - 8) + 64);
      uint64_t v57 = (void *)v60;
      unint64_t v58 = v61;
LABEL_20:
      memcpy(v57, v58, v56);
      goto LABEL_58;
    }
    if (v65)
    {
      sub_24A1F7EF0(v60, type metadata accessor for ATLogProofs);
      size_t v56 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26B1742D8) - 8) + 64);
      uint64_t v57 = (void *)v60;
      unint64_t v58 = v61;
      goto LABEL_20;
    }
    ((void (*)(uint64_t, char *, uint64_t))v273)(v60, v61, v271);
    uint64_t v94 = *(int *)(v62 + 20);
    uint64_t v95 = v60 + v94;
    uint64_t v96 = &v61[v94];
    uint64_t v97 = type metadata accessor for LogEntry(0);
    uint64_t v98 = *(void *)(v97 - 8);
    uint64_t v99 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v98 + 48);
    int v100 = v99(v95, 1, v97);
    uint64_t v260 = v97;
    int v101 = v99((uint64_t)v96, 1, v97);
    if (v100)
    {
      if (!v101)
      {
        uint64_t v102 = *(void *)v96;
        *(unsigned char *)(v95 + 8) = v96[8];
        *(void *)uint64_t v95 = v102;
        *(void *)(v95 + 16) = *((void *)v96 + 2);
        uint64_t v104 = *((void *)v96 + 3);
        unint64_t v103 = *((void *)v96 + 4);
        swift_bridgeObjectRetain();
        sub_24A1A52B0(v104, v103);
        *(void *)(v95 + 24) = v104;
        *(void *)(v95 + 32) = v103;
        *(void *)(v95 + 40) = *((void *)v96 + 5);
        uint64_t v105 = *((void *)v96 + 6);
        *(unsigned char *)(v95 + 56) = v96[56];
        *(void *)(v95 + 48) = v105;
        uint64_t v106 = v97;
        uint64_t v255 = *(void (**)(uint64_t, char *, uint64_t))(v270 + 16);
        v255(v95 + *(int *)(v97 + 36), &v96[*(int *)(v97 + 36)], v271);
        uint64_t v107 = *(int *)(v97 + 40);
        uint64_t v108 = (void *)(v95 + v107);
        uint64_t v109 = &v96[v107];
        uint64_t v110 = type metadata accessor for SignedObject(0);
        uint64_t v111 = *(void *)(v110 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v111 + 48))(v109, 1, v110))
        {
          uint64_t v112 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174320);
          memcpy(v108, v109, *(void *)(*(void *)(v112 - 8) + 64));
          uint64_t v113 = v264;
        }
        else
        {
          uint64_t v248 = v111;
          uint64_t v180 = *(void *)v109;
          unint64_t v179 = *((void *)v109 + 1);
          sub_24A1A52B0(*(void *)v109, v179);
          *uint64_t v108 = v180;
          v108[1] = v179;
          v255((uint64_t)v108 + *(int *)(v110 + 20), &v109[*(int *)(v110 + 20)], v271);
          uint64_t v251 = v110;
          uint64_t v181 = *(int *)(v110 + 24);
          uint64_t v182 = (void *)((char *)v108 + v181);
          uint64_t v183 = (uint64_t *)&v109[v181];
          uint64_t v184 = type metadata accessor for Signature(0);
          unint64_t v243 = *(void **)(v184 - 8);
          if ((*((unsigned int (**)(uint64_t *, uint64_t, uint64_t))v243 + 6))(v183, 1, v184))
          {
            uint64_t v185 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
            memcpy(v182, v183, *(void *)(*(void *)(v185 - 8) + 64));
          }
          else
          {
            uint64_t v196 = *v183;
            unint64_t v240 = v183[1];
            sub_24A1A52B0(*v183, v240);
            *uint64_t v182 = v196;
            v182[1] = v240;
            uint64_t v197 = v183[2];
            unint64_t v241 = v183[3];
            sub_24A1A52B0(v197, v241);
            v182[2] = v197;
            v182[3] = v241;
            uint64_t v198 = v183[4];
            *((unsigned char *)v182 + 40) = *((unsigned char *)v183 + 40);
            v182[4] = v198;
            v255((uint64_t)v182 + *(int *)(v184 + 28), (char *)v183 + *(int *)(v184 + 28), v271);
            (*((void (**)(void *, void, uint64_t, uint64_t))v243 + 7))(v182, 0, 1, v184);
          }
          uint64_t v113 = v264;
          (*(void (**)(void *, void, uint64_t, uint64_t))(v248 + 56))(v108, 0, 1, v251);
          uint64_t v106 = v260;
        }
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v98 + 56))(v95, 0, 1, v106);
        goto LABEL_78;
      }
    }
    else
    {
      if (!v101)
      {
        uint64_t v158 = *(void *)v96;
        *(unsigned char *)(v95 + 8) = v96[8];
        *(void *)uint64_t v95 = v158;
        *(void *)(v95 + 16) = *((void *)v96 + 2);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t v160 = *((void *)v96 + 3);
        unint64_t v159 = *((void *)v96 + 4);
        sub_24A1A52B0(v160, v159);
        uint64_t v161 = *(void *)(v95 + 24);
        unint64_t v162 = *(void *)(v95 + 32);
        *(void *)(v95 + 24) = v160;
        *(void *)(v95 + 32) = v159;
        sub_24A1A5384(v161, v162);
        *(void *)(v95 + 40) = *((void *)v96 + 5);
        uint64_t v163 = *((void *)v96 + 6);
        *(unsigned char *)(v95 + 56) = v96[56];
        *(void *)(v95 + 48) = v163;
        ((void (*)(uint64_t, char *, uint64_t))v273)(v95 + *(int *)(v97 + 36), &v96[*(int *)(v97 + 36)], v271);
        uint64_t v164 = *(int *)(v97 + 40);
        BOOL v165 = (uint64_t *)(v95 + v164);
        v96 += v164;
        uint64_t v166 = type metadata accessor for SignedObject(0);
        uint64_t v167 = *(void *)(v166 - 8);
        long long v168 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v167 + 48);
        int v169 = v168(v165, 1, v166);
        int v170 = v168((uint64_t *)v96, 1, v166);
        if (v169)
        {
          if (!v170)
          {
            uint64_t v172 = *(void *)v96;
            unint64_t v171 = *((void *)v96 + 1);
            sub_24A1A52B0(*(void *)v96, v171);
            *BOOL v165 = v172;
            v165[1] = v171;
            v261 = *(void (**)(char *, char *, uint64_t))(v270 + 16);
            v261((char *)v165 + *(int *)(v166 + 20), &v96[*(int *)(v166 + 20)], v271);
            uint64_t v173 = *(int *)(v166 + 24);
            uint64_t v174 = (uint64_t *)((char *)v165 + v173);
            uint64_t v175 = &v96[v173];
            uint64_t v176 = type metadata accessor for Signature(0);
            uint64_t v177 = *(void *)(v176 - 8);
            uint64_t v257 = v176;
            if ((*(unsigned int (**)(char *, uint64_t))(v177 + 48))(v175, 1))
            {
              uint64_t v178 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
              memcpy(v174, v175, *(void *)(*(void *)(v178 - 8) + 64));
            }
            else
            {
              uint64_t v225 = *(void *)v175;
              unint64_t v252 = *((void *)v175 + 1);
              sub_24A1A52B0(*(void *)v175, v252);
              *uint64_t v174 = v225;
              v174[1] = v252;
              uint64_t v226 = *((void *)v175 + 2);
              unint64_t v253 = *((void *)v175 + 3);
              sub_24A1A52B0(v226, v253);
              v174[2] = v226;
              v174[3] = v253;
              uint64_t v227 = *((void *)v175 + 4);
              *((unsigned char *)v174 + 40) = v175[40];
              v174[4] = v227;
              v261((char *)v174 + *(int *)(v257 + 28), &v175[*(int *)(v257 + 28)], v271);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v177 + 56))(v174, 0, 1, v257);
            }
            (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v167 + 56))(v165, 0, 1, v166);
            goto LABEL_47;
          }
        }
        else
        {
          if (!v170)
          {
            uint64_t v209 = *(void *)v96;
            unint64_t v208 = *((void *)v96 + 1);
            sub_24A1A52B0(*(void *)v96, v208);
            uint64_t v210 = *v165;
            unint64_t v211 = v165[1];
            *BOOL v165 = v209;
            v165[1] = v208;
            sub_24A1A5384(v210, v211);
            ((void (*)(char *, char *, uint64_t))v273)((char *)v165 + *(int *)(v166 + 20), &v96[*(int *)(v166 + 20)], v271);
            uint64_t v212 = *(int *)(v166 + 24);
            uint64_t v213 = (uint64_t)v165 + v212;
            uint64_t v214 = &v96[v212];
            uint64_t v215 = type metadata accessor for Signature(0);
            uint64_t v216 = *(void *)(v215 - 8);
            uint64_t v217 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v216 + 48);
            int v218 = v217(v213, 1, v215);
            int v219 = v217((uint64_t)v214, 1, v215);
            if (v218)
            {
              if (!v219)
              {
                uint64_t v221 = *(void *)v214;
                unint64_t v220 = *((void *)v214 + 1);
                sub_24A1A52B0(*(void *)v214, v220);
                *(void *)uint64_t v213 = v221;
                *(void *)(v213 + 8) = v220;
                uint64_t v223 = *((void *)v214 + 2);
                unint64_t v222 = *((void *)v214 + 3);
                sub_24A1A52B0(v223, v222);
                *(void *)(v213 + 16) = v223;
                *(void *)(v213 + 24) = v222;
                uint64_t v224 = *((void *)v214 + 4);
                *(unsigned char *)(v213 + 40) = v214[40];
                *(void *)(v213 + 32) = v224;
                (*(void (**)(uint64_t, char *, uint64_t))(v270 + 16))(v213 + *(int *)(v215 + 28), &v214[*(int *)(v215 + 28)], v271);
                (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v216 + 56))(v213, 0, 1, v215);
                goto LABEL_47;
              }
            }
            else
            {
              if (!v219)
              {
                uint64_t v229 = *(void *)v214;
                unint64_t v228 = *((void *)v214 + 1);
                sub_24A1A52B0(*(void *)v214, v228);
                uint64_t v230 = *(void *)v213;
                unint64_t v231 = *(void *)(v213 + 8);
                *(void *)uint64_t v213 = v229;
                *(void *)(v213 + 8) = v228;
                sub_24A1A5384(v230, v231);
                uint64_t v233 = *((void *)v214 + 2);
                unint64_t v232 = *((void *)v214 + 3);
                sub_24A1A52B0(v233, v232);
                uint64_t v234 = *(void *)(v213 + 16);
                unint64_t v235 = *(void *)(v213 + 24);
                *(void *)(v213 + 16) = v233;
                *(void *)(v213 + 24) = v232;
                sub_24A1A5384(v234, v235);
                uint64_t v236 = *((void *)v214 + 4);
                *(unsigned char *)(v213 + 40) = v214[40];
                *(void *)(v213 + 32) = v236;
                ((void (*)(uint64_t, char *, uint64_t))v273)(v213 + *(int *)(v215 + 28), &v214[*(int *)(v215 + 28)], v271);
                goto LABEL_47;
              }
              sub_24A1F7EF0(v213, type metadata accessor for Signature);
            }
            size_t v130 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8) - 8) + 64);
            uint64_t v131 = (void *)v213;
            int v132 = v214;
LABEL_46:
            memcpy(v131, v132, v130);
LABEL_47:
            uint64_t v113 = v264;
LABEL_78:
            uint64_t v199 = *(int *)(v262 + 24);
            uint64_t v200 = v113 + v199;
            uint64_t v201 = &v266[v199];
            uint64_t v202 = type metadata accessor for LogConsistency(0);
            uint64_t v203 = *(void *)(v202 - 8);
            uint64_t v204 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v203 + 48);
            int v205 = v204(v200, 1, v202);
            int v206 = v204((uint64_t)v201, 1, v202);
            if (v205)
            {
              if (!v206)
              {
                (*(void (**)(uint64_t, char *, uint64_t))(v270 + 16))(v200, v201, v271);
                *(void *)(v200 + *(int *)(v202 + 20)) = *(void *)&v201[*(int *)(v202 + 20)];
                v207 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v203 + 56);
                swift_retain();
                v207(v200, 0, 1, v202);
                goto LABEL_58;
              }
            }
            else
            {
              if (!v206)
              {
                ((void (*)(uint64_t, char *, uint64_t))v273)(v200, v201, v271);
                *(void *)(v200 + *(int *)(v202 + 20)) = *(void *)&v201[*(int *)(v202 + 20)];
                swift_retain();
                swift_release();
                goto LABEL_58;
              }
              sub_24A1F7EF0(v200, type metadata accessor for LogConsistency);
            }
            size_t v56 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26B1745E0) - 8) + 64);
            uint64_t v57 = (void *)v200;
            unint64_t v58 = v201;
            goto LABEL_20;
          }
          sub_24A1F7EF0((uint64_t)v165, type metadata accessor for SignedObject);
        }
        size_t v130 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26B174320) - 8) + 64);
        uint64_t v131 = v165;
LABEL_45:
        int v132 = v96;
        goto LABEL_46;
      }
      sub_24A1F7EF0(v95, type metadata accessor for LogEntry);
    }
    size_t v130 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26B174940) - 8) + 64);
    uint64_t v131 = (void *)v95;
    goto LABEL_45;
  }
  if (v47)
  {
LABEL_19:
    size_t v56 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26B174880) - 8) + 64);
    uint64_t v57 = (void *)v41;
    unint64_t v58 = v42;
    goto LABEL_20;
  }
  long long __dst = v3;
  uint64_t v274 = v44;
  uint64_t v48 = *(void (**)(uint64_t, char *, uint64_t))(v270 + 16);
  v48(v41, v42, v271);
  uint64_t v49 = *(int *)(v43 + 20);
  uint64_t v50 = (char *)(v41 + v49);
  uint64_t v51 = &v42[v49];
  uint64_t v52 = type metadata accessor for ATLogProofs(0);
  uint64_t v53 = *(void *)(v52 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48))(v51, 1, v52))
  {
    uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1742D8);
    memcpy(v50, v51, *(void *)(*(void *)(v54 - 8) + 64));
    uint64_t v55 = v274;
    uint64_t v3 = __dst;
  }
  else
  {
    uint64_t v263 = v53;
    v48((uint64_t)v50, v51, v271);
    uint64_t v267 = v52;
    uint64_t v66 = *(int *)(v52 + 20);
    uint64_t v67 = &v50[v66];
    unint64_t v68 = &v51[v66];
    uint64_t v69 = type metadata accessor for LogEntry(0);
    uint64_t v70 = *(void *)(v69 - 8);
    uint64_t v265 = v50;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v70 + 48))(v68, 1, v69))
    {
      uint64_t v71 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174940);
      memcpy(v67, v68, *(void *)(*(void *)(v71 - 8) + 64));
      uint64_t v72 = v267;
    }
    else
    {
      uint64_t v254 = v70;
      uint64_t v82 = *(void *)v68;
      v67[8] = v68[8];
      *(void *)uint64_t v67 = v82;
      *((void *)v67 + 2) = *((void *)v68 + 2);
      uint64_t v83 = v69;
      uint64_t v84 = *((void *)v68 + 3);
      unint64_t v85 = *((void *)v68 + 4);
      swift_bridgeObjectRetain();
      sub_24A1A52B0(v84, v85);
      *((void *)v67 + 3) = v84;
      *((void *)v67 + 4) = v85;
      *((void *)v67 + 5) = *((void *)v68 + 5);
      uint64_t v86 = *((void *)v68 + 6);
      v67[56] = v68[56];
      *((void *)v67 + 6) = v86;
      v48((uint64_t)&v67[*(int *)(v83 + 36)], &v68[*(int *)(v83 + 36)], v271);
      uint64_t v259 = v83;
      uint64_t v87 = *(int *)(v83 + 40);
      uint64_t v88 = &v67[v87];
      uint64_t v89 = &v68[v87];
      uint64_t v90 = type metadata accessor for SignedObject(0);
      uint64_t v91 = *(void *)(v90 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v91 + 48))(v89, 1, v90))
      {
        uint64_t v92 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174320);
        memcpy(v88, v89, *(void *)(*(void *)(v92 - 8) + 64));
        uint64_t v50 = v265;
        uint64_t v72 = v267;
        uint64_t v93 = v254;
      }
      else
      {
        uint64_t v246 = v91;
        uint64_t v249 = v90;
        uint64_t v123 = *(void *)v89;
        unint64_t v124 = *((void *)v89 + 1);
        sub_24A1A52B0(*(void *)v89, v124);
        *(void *)uint64_t v88 = v123;
        *((void *)v88 + 1) = v124;
        uint64_t v125 = v249;
        v48((uint64_t)&v88[*(int *)(v249 + 20)], &v89[*(int *)(v249 + 20)], v271);
        uint64_t v126 = *(int *)(v249 + 24);
        uint64_t v242 = &v88[v126];
        uint64_t v127 = (uint64_t *)&v89[v126];
        uint64_t v128 = type metadata accessor for Signature(0);
        uint64_t v239 = *(void *)(v128 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v239 + 48))(v127, 1, v128))
        {
          uint64_t v129 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
          memcpy(v242, v127, *(void *)(*(void *)(v129 - 8) + 64));
        }
        else
        {
          unint64_t v141 = v127[1];
          uint64_t v237 = *v127;
          sub_24A1A52B0(*v127, v141);
          *(void *)uint64_t v242 = v237;
          *((void *)v242 + 1) = v141;
          unint64_t v142 = v127[3];
          uint64_t v238 = v127[2];
          sub_24A1A52B0(v238, v142);
          *((void *)v242 + 2) = v238;
          *((void *)v242 + 3) = v142;
          uint64_t v125 = v249;
          uint64_t v143 = v127[4];
          v242[40] = *((unsigned char *)v127 + 40);
          *((void *)v242 + 4) = v143;
          v48((uint64_t)&v242[*(int *)(v128 + 28)], (char *)v127 + *(int *)(v128 + 28), v271);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v239 + 56))(v242, 0, 1, v128);
        }
        uint64_t v72 = v267;
        uint64_t v93 = v254;
        (*(void (**)(char *, void, uint64_t, uint64_t))(v246 + 56))(v88, 0, 1, v125);
        uint64_t v50 = v265;
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v93 + 56))(v67, 0, 1, v259);
    }
    uint64_t v144 = *(int *)(v72 + 24);
    uint64_t v145 = &v50[v144];
    uint64_t v146 = &v51[v144];
    uint64_t v147 = type metadata accessor for LogConsistency(0);
    uint64_t v148 = *(void *)(v147 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v148 + 48))(v146, 1, v147))
    {
      uint64_t v149 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1745E0);
      memcpy(v145, v146, *(void *)(*(void *)(v149 - 8) + 64));
    }
    else
    {
      v48((uint64_t)v145, v146, v271);
      *(void *)&v145[*(int *)(v147 + 20)] = *(void *)&v146[*(int *)(v147 + 20)];
      long long v150 = *(void (**)(char *, void, uint64_t, uint64_t))(v148 + 56);
      swift_retain();
      v150(v145, 0, 1, v147);
    }
    uint64_t v55 = v274;
    uint64_t v3 = __dst;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v263 + 56))(v265, 0, 1, v267);
  }
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v55 + 56))(v41, 0, 1, v43);
LABEL_58:
  uint64_t v151 = a3[5];
  uint64_t v152 = (uint64_t *)((char *)a1 + v151);
  uint64_t v153 = (uint64_t *)((char *)v3 + v151);
  *uint64_t v152 = *v153;
  v152[1] = v153[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v154 = a3[6];
  uint64_t v155 = (uint64_t *)((char *)a1 + v154);
  uint64_t v156 = (uint64_t *)((char *)v3 + v154);
  *uint64_t v155 = *v156;
  v155[1] = v156[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)v3 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for Validated.AttestationBundle(uint64_t a1, uint64_t a2, int *a3)
{
  long long v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v5;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  unint64_t v6 = (int *)type metadata accessor for Proto_AttestationBundle(0);
  uint64_t v7 = v6[7];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_24A2A6E10();
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32);
  v11(v8, v9, v10);
  uint64_t v12 = v6[8];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (void *)(a2 + v12);
  uint64_t v15 = type metadata accessor for Proto_SealedHashLedger(0);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v83 = v10;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174800);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    void *v13 = *v14;
    v11((uint64_t)v13 + *(int *)(v15 + 20), (uint64_t)v14 + *(int *)(v15 + 20), v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  uint64_t v18 = v6[9];
  uint64_t v19 = (void *)(a1 + v18);
  uint64_t v20 = (const void *)(a2 + v18);
  uint64_t v21 = sub_24A2A6DC0();
  uint64_t v22 = *(void *)(v21 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
  {
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749E0);
    memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v22 + 32))(v19, v20, v21);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  }
  uint64_t v24 = v6[10];
  int v25 = (char *)(a1 + v24);
  uint64_t v26 = (char *)(a2 + v24);
  uint64_t v27 = type metadata accessor for Proto_TransparencyProofs(0);
  uint64_t v28 = *(void *)(v27 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
  {
    uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174880);
    memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
    uint64_t v30 = a3;
  }
  else
  {
    v11((uint64_t)v25, (uint64_t)v26, v10);
    uint64_t v81 = v27;
    uint64_t v31 = *(int *)(v27 + 20);
    uint64_t v82 = v25;
    uint64_t v32 = &v25[v31];
    uint64_t v33 = &v26[v31];
    uint64_t v34 = type metadata accessor for ATLogProofs(0);
    uint64_t v35 = *(void *)(v34 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
    {
      uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1742D8);
      memcpy(v32, v33, *(void *)(*(void *)(v36 - 8) + 64));
      uint64_t v30 = a3;
      int v37 = v82;
      uint64_t v38 = v81;
    }
    else
    {
      uint64_t v77 = v35;
      uint64_t v78 = v28;
      v11((uint64_t)v32, (uint64_t)v33, v83);
      uint64_t v79 = v34;
      uint64_t v80 = v32;
      uint64_t v39 = *(int *)(v34 + 20);
      uint64_t v40 = &v32[v39];
      uint64_t v41 = v11;
      uint64_t v42 = &v33[v39];
      uint64_t v43 = type metadata accessor for LogEntry(0);
      uint64_t v44 = *(void *)(v43 - 8);
      uint64_t v76 = (void (*)(char *, char *, uint64_t))v41;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v42, 1, v43))
      {
        uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174940);
        memcpy(v40, v42, *(void *)(*(void *)(v45 - 8) + 64));
        uint64_t v47 = v79;
        int v46 = v80;
      }
      else
      {
        uint64_t v72 = v33;
        uint64_t v73 = v44;
        *(void *)uint64_t v40 = *(void *)v42;
        v40[8] = v42[8];
        *((void *)v40 + 2) = *((void *)v42 + 2);
        *(_OWORD *)(v40 + 24) = *(_OWORD *)(v42 + 24);
        uint64_t v48 = *((void *)v42 + 6);
        *((void *)v40 + 5) = *((void *)v42 + 5);
        *((void *)v40 + 6) = v48;
        v40[56] = v42[56];
        v41((uint64_t)&v40[*(int *)(v43 + 36)], (uint64_t)&v42[*(int *)(v43 + 36)], v83);
        uint64_t v49 = *(int *)(v43 + 40);
        long long __dst = &v40[v49];
        uint64_t v50 = &v42[v49];
        uint64_t v51 = type metadata accessor for SignedObject(0);
        uint64_t v52 = *(void *)(v51 - 8);
        uint64_t v74 = v43;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48))(v50, 1, v51))
        {
          uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174320);
          memcpy(__dst, v50, *(void *)(*(void *)(v53 - 8) + 64));
        }
        else
        {
          uint64_t v70 = v52;
          *(_OWORD *)long long __dst = *(_OWORD *)v50;
          v41((uint64_t)&__dst[*(int *)(v51 + 20)], (uint64_t)&v50[*(int *)(v51 + 20)], v83);
          uint64_t v71 = v51;
          uint64_t v54 = *(int *)(v51 + 24);
          uint64_t v55 = &__dst[v54];
          size_t v56 = &v50[v54];
          uint64_t v57 = type metadata accessor for Signature(0);
          uint64_t v69 = *(void *)(v57 - 8);
          uint64_t v58 = v57;
          if ((*(unsigned int (**)(char *, uint64_t))(v69 + 48))(v56, 1))
          {
            uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
            memcpy(v55, v56, *(void *)(*(void *)(v59 - 8) + 64));
          }
          else
          {
            long long v60 = *((_OWORD *)v56 + 1);
            *(_OWORD *)uint64_t v55 = *(_OWORD *)v56;
            *((_OWORD *)v55 + 1) = v60;
            *((void *)v55 + 4) = *((void *)v56 + 4);
            v55[40] = v56[40];
            v41((uint64_t)&v55[*(int *)(v58 + 28)], (uint64_t)&v56[*(int *)(v58 + 28)], v83);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v69 + 56))(v55, 0, 1, v58);
          }
          (*(void (**)(char *, void, uint64_t, uint64_t))(v70 + 56))(__dst, 0, 1, v71);
        }
        uint64_t v47 = v79;
        int v46 = v80;
        uint64_t v33 = v72;
        (*(void (**)(char *, void, uint64_t, uint64_t))(v73 + 56))(v40, 0, 1, v74);
      }
      uint64_t v61 = *(int *)(v47 + 24);
      uint64_t v62 = &v46[v61];
      uint64_t v63 = &v33[v61];
      uint64_t v64 = type metadata accessor for LogConsistency(0);
      uint64_t v65 = *(void *)(v64 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v65 + 48))(v63, 1, v64))
      {
        uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1745E0);
        memcpy(v62, v63, *(void *)(*(void *)(v66 - 8) + 64));
      }
      else
      {
        v76(v62, v63, v83);
        *(void *)&v62[*(int *)(v64 + 20)] = *(void *)&v63[*(int *)(v64 + 20)];
        (*(void (**)(char *, void, uint64_t, uint64_t))(v65 + 56))(v62, 0, 1, v64);
      }
      uint64_t v30 = a3;
      uint64_t v28 = v78;
      uint64_t v38 = v81;
      int v37 = v82;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v77 + 56))(v80, 0, 1, v79);
    }
    (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v37, 0, 1, v38);
  }
  uint64_t v67 = v30[6];
  *(_OWORD *)(a1 + v30[5]) = *(_OWORD *)(a2 + v30[5]);
  *(_OWORD *)(a1 + v67) = *(_OWORD *)(a2 + v67);
  *(void *)(a1 + v30[7]) = *(void *)(a2 + v30[7]);
  return a1;
}

uint64_t *assignWithTake for Validated.AttestationBundle(uint64_t *a1, uint64_t a2, int *a3)
{
  uint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_24A1A5384(v5, v6);
  uint64_t v7 = a1[2];
  unint64_t v8 = a1[3];
  *((_OWORD *)a1 + 1) = *(_OWORD *)(a2 + 16);
  sub_24A1A5384(v7, v8);
  a1[4] = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  uint64_t v9 = (int *)type metadata accessor for Proto_AttestationBundle(0);
  uint64_t v10 = v9[7];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = sub_24A2A6E10();
  uint64_t v217 = *(void *)(v13 - 8);
  uint64_t v218 = v13;
  uint64_t v214 = *(void (**)(char *, uint64_t))(v217 + 40);
  v214(v11, v12);
  uint64_t v14 = v9[8];
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)(a2 + v14);
  uint64_t v17 = type metadata accessor for Proto_SealedHashLedger(0);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  int v20 = v19(v15, 1, v17);
  int v21 = v19(v16, 1, v17);
  if (v20)
  {
    if (!v21)
    {
      *(void *)uint64_t v15 = *(void *)v16;
      (*(void (**)(char *, char *, uint64_t))(v217 + 32))(&v15[*(int *)(v17 + 20)], &v16[*(int *)(v17 + 20)], v218);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v21)
  {
    sub_24A1F7EF0((uint64_t)v15, type metadata accessor for Proto_SealedHashLedger);
LABEL_6:
    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174800);
    memcpy(v15, v16, *(void *)(*(void *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  *(void *)uint64_t v15 = *(void *)v16;
  swift_bridgeObjectRelease();
  ((void (*)(char *, char *, uint64_t))v214)(&v15[*(int *)(v17 + 20)], &v16[*(int *)(v17 + 20)], v218);
LABEL_7:
  uint64_t v23 = v9[9];
  uint64_t v24 = (char *)a1 + v23;
  int v25 = (char *)(a2 + v23);
  uint64_t v26 = sub_24A2A6DC0();
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v27 + 48);
  int v29 = v28(v24, 1, v26);
  int v30 = v28(v25, 1, v26);
  if (v29)
  {
    if (!v30)
    {
      (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v24, v25, v26);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v30)
  {
    (*(void (**)(char *, uint64_t))(v27 + 8))(v24, v26);
LABEL_12:
    uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749E0);
    memcpy(v24, v25, *(void *)(*(void *)(v31 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v27 + 40))(v24, v25, v26);
LABEL_13:
  uint64_t v32 = v9[10];
  uint64_t v33 = (uint64_t)a1 + v32;
  uint64_t v34 = (char *)(a2 + v32);
  uint64_t v35 = type metadata accessor for Proto_TransparencyProofs(0);
  uint64_t v36 = *(void *)(v35 - 8);
  int v37 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v36 + 48);
  int v38 = v37(v33, 1, v35);
  int v39 = v37((uint64_t)v34, 1, v35);
  if (v38)
  {
    if (!v39)
    {
      uint64_t v215 = a2;
      uint64_t v220 = v36;
      uint64_t v40 = *(void (**)(uint64_t, char *, uint64_t))(v217 + 32);
      v40(v33, v34, v218);
      uint64_t v41 = *(int *)(v35 + 20);
      uint64_t v42 = (char *)(v33 + v41);
      uint64_t v43 = &v34[v41];
      uint64_t v44 = type metadata accessor for ATLogProofs(0);
      uint64_t v45 = *(void *)(v44 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v43, 1, v44))
      {
        uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1742D8);
        memcpy(v42, v43, *(void *)(*(void *)(v46 - 8) + 64));
        uint64_t v47 = v220;
        a2 = v215;
      }
      else
      {
        uint64_t v200 = v45;
        v40((uint64_t)v42, v43, v218);
        uint64_t v205 = v44;
        long long __dst = v42;
        uint64_t v63 = *(int *)(v44 + 20);
        uint64_t v64 = &v42[v63];
        uint64_t v65 = &v43[v63];
        uint64_t v66 = type metadata accessor for LogEntry(0);
        uint64_t v67 = *(void *)(v66 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v67 + 48))(v65, 1, v66))
        {
          uint64_t v68 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174940);
          memcpy(v64, v65, *(void *)(*(void *)(v68 - 8) + 64));
          uint64_t v69 = v44;
        }
        else
        {
          uint64_t v193 = v43;
          uint64_t v196 = v67;
          *(void *)uint64_t v64 = *(void *)v65;
          v64[8] = v65[8];
          *((void *)v64 + 2) = *((void *)v65 + 2);
          *(_OWORD *)(v64 + 24) = *(_OWORD *)(v65 + 24);
          uint64_t v70 = *((void *)v65 + 6);
          *((void *)v64 + 5) = *((void *)v65 + 5);
          *((void *)v64 + 6) = v70;
          v64[56] = v65[56];
          v40((uint64_t)&v64[*(int *)(v66 + 36)], &v65[*(int *)(v66 + 36)], v218);
          uint64_t v71 = *(int *)(v66 + 40);
          uint64_t v72 = &v64[v71];
          uint64_t v73 = &v65[v71];
          uint64_t v74 = type metadata accessor for SignedObject(0);
          uint64_t v75 = *(void *)(v74 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v75 + 48))(v73, 1, v74))
          {
            uint64_t v76 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174320);
            memcpy(v72, v73, *(void *)(*(void *)(v76 - 8) + 64));
            uint64_t v69 = v205;
            uint64_t v43 = v193;
            uint64_t v77 = v196;
          }
          else
          {
            uint64_t v186 = v75;
            *(_OWORD *)uint64_t v72 = *(_OWORD *)v73;
            v40((uint64_t)&v72[*(int *)(v74 + 20)], &v73[*(int *)(v74 + 20)], v218);
            uint64_t v187 = v74;
            uint64_t v189 = v72;
            uint64_t v92 = *(int *)(v74 + 24);
            uint64_t v93 = &v72[v92];
            uint64_t v94 = &v73[v92];
            uint64_t v95 = type metadata accessor for Signature(0);
            uint64_t v185 = *(void *)(v95 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v185 + 48))(v94, 1, v95))
            {
              uint64_t v96 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
              memcpy(v93, v94, *(void *)(*(void *)(v96 - 8) + 64));
            }
            else
            {
              long long v111 = *((_OWORD *)v94 + 1);
              *(_OWORD *)uint64_t v93 = *(_OWORD *)v94;
              *((_OWORD *)v93 + 1) = v111;
              *((void *)v93 + 4) = *((void *)v94 + 4);
              v93[40] = v94[40];
              v40((uint64_t)&v93[*(int *)(v95 + 28)], &v94[*(int *)(v95 + 28)], v218);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v185 + 56))(v93, 0, 1, v95);
            }
            uint64_t v43 = v193;
            (*(void (**)(char *, void, uint64_t, uint64_t))(v186 + 56))(v189, 0, 1, v187);
            uint64_t v69 = v205;
            uint64_t v77 = v196;
          }
          (*(void (**)(char *, void, uint64_t, uint64_t))(v77 + 56))(v64, 0, 1, v66);
        }
        uint64_t v112 = *(int *)(v69 + 24);
        uint64_t v113 = &__dst[v112];
        uint64_t v114 = &v43[v112];
        uint64_t v115 = type metadata accessor for LogConsistency(0);
        uint64_t v116 = *(void *)(v115 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v116 + 48))(v114, 1, v115))
        {
          uint64_t v117 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1745E0);
          memcpy(v113, v114, *(void *)(*(void *)(v117 - 8) + 64));
        }
        else
        {
          v40((uint64_t)v113, v114, v218);
          *(void *)&v113[*(int *)(v115 + 20)] = *(void *)&v114[*(int *)(v115 + 20)];
          (*(void (**)(char *, void, uint64_t, uint64_t))(v116 + 56))(v113, 0, 1, v115);
        }
        uint64_t v47 = v220;
        a2 = v215;
        (*(void (**)(char *, void, uint64_t, uint64_t))(v200 + 56))(__dst, 0, 1, v205);
      }
LABEL_56:
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v47 + 56))(v33, 0, 1, v35);
      goto LABEL_57;
    }
    goto LABEL_19;
  }
  if (!v39)
  {
    ((void (*)(uint64_t, char *, uint64_t))v214)(v33, v34, v218);
    uint64_t v51 = *(int *)(v35 + 20);
    v33 += v51;
    uint64_t v52 = &v34[v51];
    uint64_t v35 = type metadata accessor for ATLogProofs(0);
    uint64_t v47 = *(void *)(v35 - 8);
    uint64_t v53 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v47 + 48);
    int v54 = v53(v33, 1, v35);
    int v55 = v53((uint64_t)v52, 1, v35);
    if (v54)
    {
      if (!v55)
      {
        uint64_t v221 = *(void (**)(uint64_t, char *, uint64_t))(v217 + 32);
        v221(v33, v52, v218);
        uint64_t v56 = *(int *)(v35 + 20);
        uint64_t v57 = (void *)(v33 + v56);
        uint64_t v216 = v52;
        uint64_t v58 = &v52[v56];
        uint64_t v59 = type metadata accessor for LogEntry(0);
        uint64_t v60 = *(void *)(v59 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v60 + 48))(v58, 1, v59))
        {
          uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174940);
          memcpy(v57, v58, *(void *)(*(void *)(v61 - 8) + 64));
          uint64_t v62 = (void (*)(char *, char *, uint64_t))v221;
        }
        else
        {
          uint64_t v202 = v33;
          uint64_t v207 = v60;
          void *v57 = *(void *)v58;
          *((unsigned char *)v57 + 8) = v58[8];
          v57[2] = *((void *)v58 + 2);
          *(_OWORD *)(v57 + 3) = *(_OWORD *)(v58 + 24);
          uint64_t v86 = *((void *)v58 + 6);
          v57[5] = *((void *)v58 + 5);
          v57[6] = v86;
          *((unsigned char *)v57 + 56) = v58[56];
          v221((uint64_t)v57 + *(int *)(v59 + 36), &v58[*(int *)(v59 + 36)], v218);
          uint64_t v87 = *(int *)(v59 + 40);
          __dstb = (_OWORD *)((char *)v57 + v87);
          uint64_t v88 = &v58[v87];
          uint64_t v89 = type metadata accessor for SignedObject(0);
          uint64_t v90 = *(void *)(v89 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v90 + 48))(v88, 1, v89))
          {
            uint64_t v91 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174320);
            memcpy(__dstb, v88, *(void *)(*(void *)(v91 - 8) + 64));
            uint64_t v62 = (void (*)(char *, char *, uint64_t))v221;
          }
          else
          {
            uint64_t v194 = v90;
            _OWORD *__dstb = *(_OWORD *)v88;
            v221((uint64_t)__dstb + *(int *)(v89 + 20), &v88[*(int *)(v89 + 20)], v218);
            uint64_t v198 = v89;
            uint64_t v106 = *(int *)(v89 + 24);
            uint64_t v107 = (_OWORD *)((char *)__dstb + v106);
            uint64_t v108 = &v88[v106];
            uint64_t v109 = type metadata accessor for Signature(0);
            uint64_t v190 = *(void *)(v109 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v190 + 48))(v108, 1, v109))
            {
              uint64_t v110 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
              memcpy(v107, v108, *(void *)(*(void *)(v110 - 8) + 64));
              uint64_t v62 = (void (*)(char *, char *, uint64_t))v221;
            }
            else
            {
              long long v148 = *((_OWORD *)v108 + 1);
              _OWORD *v107 = *(_OWORD *)v108;
              v107[1] = v148;
              *((void *)v107 + 4) = *((void *)v108 + 4);
              *((unsigned char *)v107 + 40) = v108[40];
              uint64_t v149 = *(int *)(v109 + 28);
              long long v150 = &v108[v149];
              uint64_t v62 = (void (*)(char *, char *, uint64_t))v221;
              v221((uint64_t)v107 + v149, v150, v218);
              (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v190 + 56))(v107, 0, 1, v109);
            }
            (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v194 + 56))(__dstb, 0, 1, v198);
          }
          (*(void (**)(void *, void, uint64_t, uint64_t))(v207 + 56))(v57, 0, 1, v59);
          uint64_t v33 = v202;
        }
        uint64_t v151 = *(int *)(v35 + 24);
        uint64_t v152 = (char *)(v33 + v151);
        uint64_t v153 = &v216[v151];
        uint64_t v154 = type metadata accessor for LogConsistency(0);
        uint64_t v155 = *(void *)(v154 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v155 + 48))(v153, 1, v154))
        {
          uint64_t v156 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1745E0);
          memcpy(v152, v153, *(void *)(*(void *)(v156 - 8) + 64));
        }
        else
        {
          v62(v152, v153, v218);
          *(void *)&v152[*(int *)(v154 + 20)] = *(void *)&v153[*(int *)(v154 + 20)];
          (*(void (**)(char *, void, uint64_t, uint64_t))(v155 + 56))(v152, 0, 1, v154);
        }
        goto LABEL_56;
      }
      goto LABEL_31;
    }
    if (v55)
    {
      sub_24A1F7EF0(v33, type metadata accessor for ATLogProofs);
LABEL_31:
      size_t v48 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26B1742D8) - 8) + 64);
      uint64_t v49 = (void *)v33;
      uint64_t v50 = v52;
      goto LABEL_20;
    }
    ((void (*)(uint64_t, char *, uint64_t))v214)(v33, v52, v218);
    uint64_t v78 = *(int *)(v35 + 20);
    uint64_t v79 = (char *)(v33 + v78);
    uint64_t v80 = &v52[v78];
    uint64_t v81 = type metadata accessor for LogEntry(0);
    uint64_t v201 = *(void *)(v81 - 8);
    uint64_t v82 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v201 + 48);
    __dsta = v79;
    LODWORD(v79) = v82(v79, 1, v81);
    uint64_t v206 = v81;
    int v83 = v82(v80, 1, v81);
    if (v79)
    {
      if (!v83)
      {
        *(void *)__dsta = *(void *)v80;
        __dsta[8] = v80[8];
        *((void *)__dsta + 2) = *((void *)v80 + 2);
        *(_OWORD *)(__dsta + 24) = *(_OWORD *)(v80 + 24);
        uint64_t v98 = *((void *)v80 + 6);
        *((void *)__dsta + 5) = *((void *)v80 + 5);
        *((void *)__dsta + 6) = v98;
        __dsta[56] = v80[56];
        uint64_t v197 = *(void (**)(char *, char *, uint64_t))(v217 + 32);
        v197(&__dsta[*(int *)(v81 + 36)], &v80[*(int *)(v81 + 36)], v218);
        uint64_t v99 = *(int *)(v81 + 40);
        int v100 = &__dsta[v99];
        int v101 = &v80[v99];
        uint64_t v102 = type metadata accessor for SignedObject(0);
        uint64_t v103 = *(void *)(v102 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v103 + 48))(v101, 1, v102))
        {
          uint64_t v104 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174320);
          memcpy(v100, v101, *(void *)(*(void *)(v104 - 8) + 64));
          uint64_t v105 = v201;
        }
        else
        {
          uint64_t v188 = v103;
          *(_OWORD *)int v100 = *(_OWORD *)v101;
          v197(&v100[*(int *)(v102 + 20)], &v101[*(int *)(v102 + 20)], v218);
          uint64_t v191 = v102;
          int v195 = v100;
          uint64_t v142 = *(int *)(v102 + 24);
          uint64_t v143 = &v100[v142];
          uint64_t v144 = &v101[v142];
          uint64_t v145 = type metadata accessor for Signature(0);
          uint64_t v146 = *(void *)(v145 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v146 + 48))(v144, 1, v145))
          {
            uint64_t v147 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
            memcpy(v143, v144, *(void *)(*(void *)(v147 - 8) + 64));
          }
          else
          {
            long long v162 = *((_OWORD *)v144 + 1);
            *(_OWORD *)uint64_t v143 = *(_OWORD *)v144;
            *((_OWORD *)v143 + 1) = v162;
            *((void *)v143 + 4) = *((void *)v144 + 4);
            v143[40] = v144[40];
            v197(&v143[*(int *)(v145 + 28)], &v144[*(int *)(v145 + 28)], v218);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v146 + 56))(v143, 0, 1, v145);
          }
          uint64_t v105 = v201;
          (*(void (**)(char *, void, uint64_t, uint64_t))(v188 + 56))(v195, 0, 1, v191);
        }
        (*(void (**)(char *, void, uint64_t, uint64_t))(v105 + 56))(__dsta, 0, 1, v206);
        goto LABEL_77;
      }
      size_t v84 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26B174940) - 8) + 64);
      unint64_t v85 = __dsta;
    }
    else
    {
      if (!v83)
      {
        *(void *)__dsta = *(void *)v80;
        __dsta[8] = v80[8];
        *((void *)__dsta + 2) = *((void *)v80 + 2);
        swift_bridgeObjectRelease();
        uint64_t v129 = *((void *)__dsta + 3);
        unint64_t v130 = *((void *)__dsta + 4);
        *(_OWORD *)(__dsta + 24) = *(_OWORD *)(v80 + 24);
        sub_24A1A5384(v129, v130);
        uint64_t v131 = *((void *)v80 + 6);
        *((void *)__dsta + 5) = *((void *)v80 + 5);
        *((void *)__dsta + 6) = v131;
        __dsta[56] = v80[56];
        ((void (*)(char *, char *, uint64_t))v214)(&__dsta[*(int *)(v81 + 36)], &v80[*(int *)(v81 + 36)], v218);
        uint64_t v132 = *(int *)(v81 + 40);
        uint64_t v133 = &__dsta[v132];
        unint64_t v134 = &v80[v132];
        uint64_t v135 = type metadata accessor for SignedObject(0);
        uint64_t v199 = *(void *)(v135 - 8);
        uint64_t v136 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v199 + 48);
        __dstc = v133;
        uint64_t v137 = v133;
        uint64_t v138 = v135;
        int v139 = v136(v137, 1, v135);
        uint64_t v203 = v138;
        unint64_t v208 = v134;
        int v140 = v136(v134, 1, v138);
        if (v139)
        {
          if (!v140)
          {
            *(_OWORD *)__dstc = *(_OWORD *)v134;
            uint64_t v192 = *(void (**)(char *, char *, uint64_t))(v217 + 32);
            v192(&__dstc[*(int *)(v138 + 20)], &v134[*(int *)(v138 + 20)], v218);
            uint64_t v157 = *(int *)(v138 + 24);
            uint64_t v158 = &__dstc[v157];
            unint64_t v159 = &v208[v157];
            uint64_t v160 = type metadata accessor for Signature(0);
            uint64_t v209 = *(void *)(v160 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v209 + 48))(v159, 1, v160))
            {
              uint64_t v161 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
              memcpy(v158, v159, *(void *)(*(void *)(v161 - 8) + 64));
            }
            else
            {
              long long v179 = *((_OWORD *)v159 + 1);
              *(_OWORD *)uint64_t v158 = *(_OWORD *)v159;
              *((_OWORD *)v158 + 1) = v179;
              *((void *)v158 + 4) = *((void *)v159 + 4);
              v158[40] = v159[40];
              v192(&v158[*(int *)(v160 + 28)], &v159[*(int *)(v160 + 28)], v218);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v209 + 56))(v158, 0, 1, v160);
            }
            (*(void (**)(char *, void, uint64_t, uint64_t))(v199 + 56))(__dstc, 0, 1, v203);
            goto LABEL_77;
          }
          unint64_t v141 = &qword_26B174320;
        }
        else
        {
          if (v140)
          {
            sub_24A1F7EF0((uint64_t)__dstc, type metadata accessor for SignedObject);
            size_t v84 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26B174320) - 8) + 64);
            unint64_t v85 = __dstc;
            uint64_t v97 = v134;
            goto LABEL_44;
          }
          uint64_t v171 = *(void *)__dstc;
          unint64_t v172 = *((void *)__dstc + 1);
          *(_OWORD *)__dstc = *(_OWORD *)v134;
          sub_24A1A5384(v171, v172);
          ((void (*)(char *, char *, uint64_t))v214)(&__dstc[*(int *)(v138 + 20)], &v134[*(int *)(v138 + 20)], v218);
          uint64_t v173 = *(int *)(v138 + 24);
          uint64_t v174 = &__dstc[v173];
          uint64_t v175 = &v208[v173];
          uint64_t v176 = type metadata accessor for Signature(0);
          uint64_t v204 = *(void *)(v176 - 8);
          uint64_t v177 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v204 + 48);
          __dstc = v174;
          LODWORD(v174) = v177(v174, 1, v176);
          unint64_t v208 = v175;
          int v178 = v177(v175, 1, v176);
          if (!v174)
          {
            if (!v178)
            {
              uint64_t v181 = *(void *)__dstc;
              unint64_t v182 = *((void *)__dstc + 1);
              *(_OWORD *)__dstc = *(_OWORD *)v175;
              sub_24A1A5384(v181, v182);
              uint64_t v183 = *((void *)__dstc + 2);
              unint64_t v184 = *((void *)__dstc + 3);
              *((_OWORD *)__dstc + 1) = *((_OWORD *)v175 + 1);
              sub_24A1A5384(v183, v184);
              *((void *)__dstc + 4) = *((void *)v175 + 4);
              __dstc[40] = v175[40];
              ((void (*)(char *, char *, uint64_t))v214)(&__dstc[*(int *)(v176 + 28)], &v175[*(int *)(v176 + 28)], v218);
              goto LABEL_77;
            }
            sub_24A1F7EF0((uint64_t)__dstc, type metadata accessor for Signature);
            size_t v84 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8) - 8) + 64);
            unint64_t v85 = __dstc;
            uint64_t v97 = v175;
            goto LABEL_44;
          }
          if (!v178)
          {
            long long v180 = *((_OWORD *)v175 + 1);
            *(_OWORD *)__dstc = *(_OWORD *)v175;
            *((_OWORD *)__dstc + 1) = v180;
            *((void *)__dstc + 4) = *((void *)v175 + 4);
            __dstc[40] = v175[40];
            (*(void (**)(char *, char *, uint64_t))(v217 + 32))(&__dstc[*(int *)(v176 + 28)], &v175[*(int *)(v176 + 28)], v218);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v204 + 56))(__dstc, 0, 1, v176);
            goto LABEL_77;
          }
          unint64_t v141 = &qword_26B1749B8;
        }
        size_t v84 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(v141) - 8) + 64);
        uint64_t v97 = v208;
        unint64_t v85 = __dstc;
LABEL_44:
        memcpy(v85, v97, v84);
LABEL_77:
        uint64_t v163 = *(int *)(v35 + 24);
        uint64_t v164 = v33 + v163;
        BOOL v165 = &v52[v163];
        uint64_t v166 = type metadata accessor for LogConsistency(0);
        uint64_t v167 = *(void *)(v166 - 8);
        long long v168 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v167 + 48);
        int v169 = v168(v164, 1, v166);
        int v170 = v168((uint64_t)v165, 1, v166);
        if (v169)
        {
          if (!v170)
          {
            (*(void (**)(uint64_t, char *, uint64_t))(v217 + 32))(v164, v165, v218);
            *(void *)(v164 + *(int *)(v166 + 20)) = *(void *)&v165[*(int *)(v166 + 20)];
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v167 + 56))(v164, 0, 1, v166);
            goto LABEL_57;
          }
        }
        else
        {
          if (!v170)
          {
            ((void (*)(uint64_t, char *, uint64_t))v214)(v164, v165, v218);
            *(void *)(v164 + *(int *)(v166 + 20)) = *(void *)&v165[*(int *)(v166 + 20)];
            swift_release();
            goto LABEL_57;
          }
          sub_24A1F7EF0(v164, type metadata accessor for LogConsistency);
        }
        size_t v48 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26B1745E0) - 8) + 64);
        uint64_t v49 = (void *)v164;
        uint64_t v50 = v165;
        goto LABEL_20;
      }
      sub_24A1F7EF0((uint64_t)__dsta, type metadata accessor for LogEntry);
      size_t v84 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26B174940) - 8) + 64);
      unint64_t v85 = __dsta;
    }
    uint64_t v97 = v80;
    goto LABEL_44;
  }
  sub_24A1F7EF0(v33, type metadata accessor for Proto_TransparencyProofs);
LABEL_19:
  size_t v48 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26B174880) - 8) + 64);
  uint64_t v49 = (void *)v33;
  uint64_t v50 = v34;
LABEL_20:
  memcpy(v49, v50, v48);
LABEL_57:
  uint64_t v118 = a3[5];
  uint64_t v119 = (uint64_t *)((char *)a1 + v118);
  uint64_t v120 = (uint64_t *)(a2 + v118);
  uint64_t v122 = *v120;
  uint64_t v121 = v120[1];
  *uint64_t v119 = v122;
  v119[1] = v121;
  swift_bridgeObjectRelease();
  uint64_t v123 = a3[6];
  unint64_t v124 = (uint64_t *)((char *)a1 + v123);
  uint64_t v125 = (uint64_t *)(a2 + v123);
  uint64_t v127 = *v125;
  uint64_t v126 = v125[1];
  *unint64_t v124 = v127;
  v124[1] = v126;
  swift_bridgeObjectRelease();
  *(uint64_t *)((char *)a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Validated.AttestationBundle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24A2029D0);
}

uint64_t sub_24A2029D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AttestationBundle(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    unint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    int v11 = v10 - 1;
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for Validated.AttestationBundle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24A202AB4);
}

uint64_t sub_24A202AB4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for AttestationBundle(0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = a2;
  }
  return result;
}

uint64_t sub_24A202B74()
{
  uint64_t result = type metadata accessor for Proto_AttestationBundle(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for PublicKeyData(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  sub_24A1CFCAC(*a2, v4);
  *a1 = v3;
  a1[1] = v4;
  return a1;
}

uint64_t destroy for PublicKeyData(uint64_t *a1)
{
  return sub_24A1CFCC8(*a1, a1[1]);
}

uint64_t *assignWithCopy for PublicKeyData(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  sub_24A1CFCAC(*a2, v4);
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  *a1 = v3;
  a1[1] = v4;
  sub_24A1CFCC8(v5, v6);
  return a1;
}

uint64_t *assignWithTake for PublicKeyData(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_24A1CFCC8(v3, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for PublicKeyData(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 3 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 3);
  }
  unsigned int v3 = ((2 * ((*(void *)(a1 + 8) & 0x1000000000000000) != 0)) | ((*(void *)(a1 + 8) >> 60) >> 1) & 1) ^ 3;
  if (v3 >= 2) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for PublicKeyData(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 2)
  {
    *(void *)uint64_t result = a2 - 3;
    *(void *)(result + 8) = 0;
    if (a3 >= 3) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 3) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2)
    {
      *(void *)uint64_t result = 0;
      *(void *)(result + 8) = (unint64_t)((2 * (a2 & 1)) | 1) << 60;
    }
  }
  return result;
}

uint64_t sub_24A202D80(uint64_t a1)
{
  return (*(void *)(a1 + 8) >> 61) & 1;
}

uint64_t sub_24A202D8C(uint64_t result)
{
  *(void *)(result + 8) &= ~0x2000000000000000uLL;
  return result;
}

uint64_t sub_24A202D9C(uint64_t result, char a2)
{
  *(void *)(result + 8) = *(void *)(result + 8) & 0xCFFFFFFFFFFFFFFFLL | ((unint64_t)(a2 & 1) << 61);
  return result;
}

ValueMetadata *type metadata accessor for PublicKeyData()
{
  return &type metadata for PublicKeyData;
}

char *initializeBufferWithCopyOfBuffer for CloudAttestationError(char *a1, char **a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    unint64_t v8 = *a2;
    *(void *)a1 = *a2;
    a1 = &v8[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v7 = a2[1];
        *(void *)a1 = *a2;
        *((void *)a1 + 1) = v7;
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 1u:
      case 2u:
        unint64_t v10 = *a2;
        int v11 = v10;
        *(void *)a1 = v10;
        swift_storeEnumTagMultiPayload();
        break;
      case 3u:
        uint64_t v12 = sub_24A2A6BC0();
        (*(void (**)(char *, char **, uint64_t))(*(void *)(v12 - 8) + 16))(a1, a2, v12);
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(v6 + 64));
        break;
    }
  }
  return a1;
}

void destroy for CloudAttestationError(void **a1)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      swift_bridgeObjectRelease();
      break;
    case 1u:
    case 2u:
      uint64_t v2 = *a1;

      break;
    case 3u:
      uint64_t v3 = sub_24A2A6BC0();
      uint64_t v4 = *(void (**)(void **, uint64_t))(*(void *)(v3 - 8) + 8);
      v4(a1, v3);
      break;
    default:
      return;
  }
}

void *initializeWithCopy for CloudAttestationError(void *a1, void *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v6 = a2[1];
      *a1 = *a2;
      a1[1] = v6;
      swift_bridgeObjectRetain();
      goto LABEL_6;
    case 1u:
    case 2u:
      uint64_t v7 = (void *)*a2;
      id v8 = v7;
      *a1 = v7;
      goto LABEL_6;
    case 3u:
      uint64_t v9 = sub_24A2A6BC0();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
LABEL_6:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

void *assignWithCopy for CloudAttestationError(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_24A1F7EF0((uint64_t)a1, type metadata accessor for CloudAttestationError);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        goto LABEL_7;
      case 1u:
      case 2u:
        uint64_t v6 = (void *)*a2;
        id v7 = v6;
        *a1 = v6;
        goto LABEL_7;
      case 3u:
        uint64_t v8 = sub_24A2A6BC0();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
LABEL_7:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

void *initializeWithTake for CloudAttestationError(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 3)
  {
    uint64_t v6 = sub_24A2A6BC0();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for CloudAttestationError(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_24A1F7EF0((uint64_t)a1, type metadata accessor for CloudAttestationError);
    if (swift_getEnumCaseMultiPayload() == 3)
    {
      uint64_t v6 = sub_24A2A6BC0();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_24A20349C()
{
  uint64_t result = sub_24A2A6BC0();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

unint64_t sub_24A20353C()
{
  unint64_t result = qword_269778C28;
  if (!qword_269778C28)
  {
    sub_24A2A69E0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269778C28);
  }
  return result;
}

uint64_t CeremonyAttestor.inner.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_24A20359C(v1, a1);
}

uint64_t sub_24A20359C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t CeremonyAttestor.inner.setter(uint64_t a1)
{
  return sub_24A203600(a1, v1);
}

uint64_t sub_24A203600(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t (*CeremonyAttestor.inner.modify())()
{
  return nullsub_1;
}

uint64_t CeremonyAttestor.assetProvider.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_24A1CA974(v1 + 24, a1);
}

uint64_t CeremonyAttestor.assetProvider.setter(long long *a1)
{
  uint64_t v3 = v1 + 24;
  __swift_destroy_boxed_opaque_existential_1(v3);

  return sub_24A1B97D8(a1, v3);
}

void (*CeremonyAttestor.assetProvider.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[10] = v1;
  sub_24A1CA974(v1 + 24, (uint64_t)v3);
  return sub_24A203744;
}

void sub_24A203744(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  if (a2)
  {
    uint64_t v3 = *(void *)(v2 + 80) + 24;
    sub_24A1CA974(*a1, v2 + 40);
    __swift_destroy_boxed_opaque_existential_1(v3);
    sub_24A1B97D8((long long *)(v2 + 40), v3);
    __swift_destroy_boxed_opaque_existential_1(v2);
  }
  else
  {
    uint64_t v4 = *(void *)(v2 + 80) + 24;
    __swift_destroy_boxed_opaque_existential_1(v4);
    sub_24A1B97D8((long long *)v2, v4);
  }

  free((void *)v2);
}

uint64_t CeremonyAttestor.transparencyProver.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_24A1CA974(v1 + 64, a1);
}

uint64_t CeremonyAttestor.transparencyProver.setter(long long *a1)
{
  uint64_t v3 = v1 + 64;
  __swift_destroy_boxed_opaque_existential_1(v3);

  return sub_24A1B97D8(a1, v3);
}

void (*CeremonyAttestor.transparencyProver.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[10] = v1;
  sub_24A1CA974(v1 + 64, (uint64_t)v3);
  return sub_24A2038A0;
}

void sub_24A2038A0(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  if (a2)
  {
    uint64_t v3 = *(void *)(v2 + 80) + 64;
    sub_24A1CA974(*a1, v2 + 40);
    __swift_destroy_boxed_opaque_existential_1(v3);
    sub_24A1B97D8((long long *)(v2 + 40), v3);
    __swift_destroy_boxed_opaque_existential_1(v2);
  }
  else
  {
    uint64_t v4 = *(void *)(v2 + 80) + 64;
    __swift_destroy_boxed_opaque_existential_1(v4);
    sub_24A1B97D8((long long *)v2, v4);
  }

  free((void *)v2);
}

uint64_t CeremonyAttestor.init()@<X0>(uint64_t a1@<X8>)
{
  *(_OWORD *)((char *)v23 + 8) = xmmword_24A2AB3D0;
  *((void *)&v29 + 1) = &type metadata for SEP.PhysicalDevice;
  int v30 = &protocol witness table for SEP.PhysicalDevice;
  swift_beginAccess();
  char v2 = byte_26B1730E8;
  if (byte_26B1730E8 == 10)
  {
    static Environment.default.getter(&v13);
    char v2 = v13;
  }
  char v12 = v2;
  NodeAttestor.init(environment:)(&v12, (uint64_t)v14);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v28);
  long long v27 = v19;
  long long v3 = v15;
  void v23[2] = v15;
  long long v28 = v20;
  long long v29 = v21;
  uint64_t v4 = v22;
  int v30 = v22;
  long long v24 = v16;
  long long v25 = v17;
  long long v26 = v18;
  v23[0] = v14[0];
  v23[1] = v14[1];
  long long v5 = v20;
  long long v6 = v21;
  *(_OWORD *)(a1 + 96) = v19;
  *(_OWORD *)(a1 + 112) = v5;
  *(_OWORD *)(a1 + 128) = v6;
  *(void *)(a1 + 144) = v4;
  long long v7 = v24;
  long long v8 = v25;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v7;
  long long v9 = v26;
  *(_OWORD *)(a1 + 64) = v8;
  *(_OWORD *)(a1 + 80) = v9;
  long long v10 = v23[1];
  *(_OWORD *)a1 = v23[0];
  *(_OWORD *)(a1 + 16) = v10;
  *(unsigned char *)(a1 + 104) = 0;
  uint64_t result = __swift_destroy_boxed_opaque_existential_1(a1 + 24);
  *(void *)(a1 + 48) = &type metadata for CeremonyAttestor.AssetProvider;
  *(void *)(a1 + 56) = &protocol witness table for CeremonyAttestor.AssetProvider;
  return result;
}

uint64_t CeremonyAttestor.attest(key:expiration:nonce:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v11 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v11;
  void *v11 = v5;
  v11[1] = sub_24A1C50FC;
  return NodeAttestor.attest(key:expiration:nonce:)(a1, a2, a3, a4, a5);
}

uint64_t sub_24A203B38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v11 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v11;
  void *v11 = v5;
  v11[1] = sub_24A1DA244;
  return NodeAttestor.attest(key:expiration:nonce:)(a1, a2, a3, a4, a5);
}

uint64_t CeremonyAttestor.AssetProvider.apTicket.getter()
{
  v15[1] = *(id *)MEMORY[0x263EF8340];
  id v2 = objc_msgSend(self, sel_sharedDataAccessor);
  v15[0] = 0;
  id v3 = objc_msgSend(v2, sel_copyPathForPersonalizedData_error_, 2, v15);

  id v4 = v15[0];
  if (v3)
  {
    uint64_t v1 = sub_24A2A7800();
    id v5 = v4;

    uint64_t v6 = sub_24A2A69E0();
    uint64_t v7 = *(void *)(v6 - 8);
    MEMORY[0x270FA5388](v6);
    long long v9 = (char *)v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_24A2A6990();
    swift_bridgeObjectRelease();
    uint64_t v10 = sub_24A2A6A00();
    if (!v0)
    {
      uint64_t v1 = v10;
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      return v1;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    uint64_t v11 = v0;
  }
  else
  {
    id v12 = v15[0];
    uint64_t v11 = sub_24A2A6970();

    swift_willThrow();
  }
  sub_24A1C9974();
  swift_allocError();
  *(void *)uint64_t v13 = v11;
  *(void *)(v13 + 8) = 0;
  *(unsigned char *)(v13 + 16) = 1;
  swift_willThrow();
  return v1;
}

uint64_t CeremonyAttestor.AssetProvider.provisioningCertificateChain.getter()
{
  return MEMORY[0x263F8EE78];
}

uint64_t CeremonyAttestor.AssetProvider.sealedHashEntries.getter()
{
  if (MEMORY[0x263F16C40]) {
    BOOL v1 = MEMORY[0x263F16C30] == 0;
  }
  else {
    BOOL v1 = 1;
  }
  if (v1 || MEMORY[0x263F16C48] == 0 || MEMORY[0x263F16C38] == 0)
  {
    sub_24A1C9974();
    swift_allocError();
    *(void *)uint64_t v6 = 0;
    *(void *)(v6 + 8) = 0;
    *(unsigned char *)(v6 + 16) = 2;
    swift_willThrow();
  }
  else
  {
    sub_24A2A6D10();
    id v4 = (void *)sub_24A2A6D00();
    uint64_t v5 = sub_24A2A6CF0();
    uint64_t v0 = sub_24A1CA22C(v5);

    swift_bridgeObjectRelease();
  }
  return v0;
}

uint64_t (*CeremonyAttestor.AssetProvider.inner.modify())()
{
  return nullsub_1;
}

uint64_t sub_24A203F3C()
{
  return CeremonyAttestor.AssetProvider.apTicket.getter();
}

uint64_t sub_24A203F54()
{
  return MEMORY[0x263F8EE78];
}

uint64_t sub_24A203F60()
{
  if (MEMORY[0x263F16C40]) {
    BOOL v1 = MEMORY[0x263F16C30] == 0;
  }
  else {
    BOOL v1 = 1;
  }
  if (v1 || MEMORY[0x263F16C48] == 0 || MEMORY[0x263F16C38] == 0)
  {
    sub_24A1C9974();
    swift_allocError();
    *(void *)uint64_t v6 = 0;
    *(void *)(v6 + 8) = 0;
    *(unsigned char *)(v6 + 16) = 2;
    swift_willThrow();
  }
  else
  {
    sub_24A2A6D10();
    id v4 = (void *)sub_24A2A6D00();
    uint64_t v5 = sub_24A2A6CF0();
    uint64_t v0 = sub_24A1CA22C(v5);

    swift_bridgeObjectRelease();
  }
  return v0;
}

uint64_t sub_24A20403C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_24A1CA974(a1 + 24, a2);
}

uint64_t sub_24A20405C(uint64_t a1, uint64_t a2)
{
  sub_24A1CA974(a1, (uint64_t)v4);
  a2 += 24;
  __swift_destroy_boxed_opaque_existential_1(a2);
  return sub_24A1B97D8(v4, a2);
}

uint64_t sub_24A2040A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_24A1CA974(a1 + 64, a2);
}

uint64_t sub_24A2040C4(uint64_t a1, uint64_t a2)
{
  sub_24A1CA974(a1, (uint64_t)v4);
  a2 += 64;
  __swift_destroy_boxed_opaque_existential_1(a2);
  return sub_24A1B97D8(v4, a2);
}

uint64_t destroy for NodeAttestor(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1 + 24);
  __swift_destroy_boxed_opaque_existential_1(a1 + 64);

  return __swift_destroy_boxed_opaque_existential_1(a1 + 112);
}

uint64_t initializeWithCopy for NodeAttestor(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 48) = v4;
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 24, a2 + 24);
  long long v5 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 88) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 64, a2 + 64);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(_WORD *)(a1 + 105) = *(_WORD *)(a2 + 105);
  long long v6 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 136) = v6;
  (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 112, a2 + 112);
  return a1;
}

uint64_t assignWithCopy for NodeAttestor(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 24), (uint64_t *)(a2 + 24));
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 64), (uint64_t *)(a2 + 64));
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(unsigned char *)(a1 + 105) = *(unsigned char *)(a2 + 105);
  *(unsigned char *)(a1 + 106) = *(unsigned char *)(a2 + 106);
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 112), (uint64_t *)(a2 + 112));
  return a1;
}

__n128 __swift_memcpy152_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  __n128 result = *(__n128 *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 128);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t assignWithTake for NodeAttestor(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  __swift_destroy_boxed_opaque_existential_1(a1 + 24);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  __swift_destroy_boxed_opaque_existential_1(a1 + 64);
  long long v4 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v4;
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(unsigned char *)(a1 + 105) = *(unsigned char *)(a2 + 105);
  *(unsigned char *)(a1 + 106) = *(unsigned char *)(a2 + 106);
  __swift_destroy_boxed_opaque_existential_1(a1 + 112);
  long long v5 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v5;
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  return a1;
}

uint64_t getEnumTagSinglePayload for NodeAttestor(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 152)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NodeAttestor(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 152) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 48) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 152) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CeremonyAttestor()
{
  return &type metadata for CeremonyAttestor;
}

ValueMetadata *type metadata accessor for CeremonyAttestor.AssetProvider()
{
  return &type metadata for CeremonyAttestor.AssetProvider;
}

double NodeAttestor.init()@<D0>(uint64_t a1@<X8>)
{
  *(_OWORD *)(a1 + 8) = xmmword_24A2AB3D0;
  *(void *)(a1 + 136) = &type metadata for SEP.PhysicalDevice;
  *(void *)(a1 + 144) = &protocol witness table for SEP.PhysicalDevice;
  swift_beginAccess();
  char v2 = byte_26B1730E8;
  if (byte_26B1730E8 == 10)
  {
    static Environment.default.getter(&v9);
    char v2 = v9;
  }
  char v8 = v2;
  NodeAttestor.init(environment:)(&v8, (uint64_t)v10);
  __swift_destroy_boxed_opaque_existential_1(a1 + 112);
  long long v3 = v10[7];
  *(_OWORD *)(a1 + 96) = v10[6];
  *(_OWORD *)(a1 + 112) = v3;
  *(_OWORD *)(a1 + 128) = v10[8];
  *(void *)(a1 + 144) = v11;
  long long v4 = v10[3];
  *(_OWORD *)(a1 + 32) = v10[2];
  *(_OWORD *)(a1 + 48) = v4;
  long long v5 = v10[5];
  *(_OWORD *)(a1 + 64) = v10[4];
  *(_OWORD *)(a1 + 80) = v5;
  double result = *(double *)v10;
  long long v7 = v10[1];
  *(_OWORD *)a1 = v10[0];
  *(_OWORD *)(a1 + 16) = v7;
  return result;
}

uint64_t NodeAttestor.attest(key:expiration:nonce:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[56] = a5;
  v6[57] = v5;
  v6[54] = a3;
  v6[55] = a4;
  v6[52] = a1;
  v6[53] = a2;
  uint64_t v7 = sub_24A2A7360();
  v6[58] = v7;
  v6[59] = *(void *)(v7 - 8);
  v6[60] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Proto_TransparencyProofs(0);
  v6[61] = v8;
  v6[62] = *(void *)(v8 - 8);
  v6[63] = swift_task_alloc();
  v6[64] = type metadata accessor for ATLogProofs(0);
  v6[65] = swift_task_alloc();
  v6[66] = type metadata accessor for TransparencyLogProofs();
  v6[67] = swift_task_alloc();
  uint64_t v9 = sub_24A2A71B0();
  v6[68] = v9;
  v6[69] = *(void *)(v9 - 8);
  v6[70] = swift_task_alloc();
  v6[71] = swift_task_alloc();
  type metadata accessor for AttestationBundle(0);
  v6[72] = swift_task_alloc();
  type metadata accessor for Release();
  v6[73] = swift_task_alloc();
  v6[74] = swift_task_alloc();
  v6[75] = swift_task_alloc();
  v6[76] = swift_task_alloc();
  v6[77] = swift_task_alloc();
  v6[78] = swift_task_alloc();
  v6[79] = type metadata accessor for Proto_AttestationBundle(0);
  v6[80] = swift_task_alloc();
  v6[81] = swift_task_alloc();
  uint64_t v10 = sub_24A2A7160();
  v6[82] = v10;
  v6[83] = *(void *)(v10 - 8);
  v6[84] = swift_task_alloc();
  v6[85] = swift_task_alloc();
  v6[86] = swift_task_alloc();
  v6[87] = swift_task_alloc();
  v6[88] = swift_task_alloc();
  v6[89] = swift_task_alloc();
  v6[90] = swift_task_alloc();
  v6[91] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_24A204918, 0, 0);
}

uint64_t sub_24A204918()
{
  uint64_t v120 = v0;
  uint64_t v119 = *MEMORY[0x263EF8340];
  if (qword_269778410 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 728);
  uint64_t v2 = *(void *)(v0 + 664);
  uint64_t v3 = *(void *)(v0 + 456);
  uint64_t v4 = __swift_project_value_buffer(*(void *)(v0 + 656), (uint64_t)qword_26977A480);
  *(void *)(v0 + 736) = v4;
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  *(void *)(v0 + 744) = v5;
  *(void *)(v0 + 752) = (v2 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  uint64_t v108 = v4;
  uint64_t v110 = v5;
  ((void (*)(uint64_t))v5)(v1);
  sub_24A20359C(v3, v0 + 16);
  long long v6 = sub_24A2A7140();
  os_log_type_t v7 = sub_24A2A7B40();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    uint64_t v115 = v9;
    *(_DWORD *)uint64_t v8 = 136446210;
    unint64_t v10 = 0xE300000000000000;
    uint64_t v11 = 7759204;
    switch(*(unsigned char *)(v0 + 16))
    {
      case 1:
        unint64_t v10 = 0xE90000000000006CLL;
        uint64_t v11 = 0x6172656D65687065;
        break;
      case 2:
        unint64_t v10 = 0xE400000000000000;
        uint64_t v11 = 1718773104;
        break;
      case 3:
        unint64_t v10 = 0xE200000000000000;
        uint64_t v11 = 24945;
        break;
      case 4:
        unint64_t v10 = 0xE700000000000000;
        uint64_t v11 = 0x676E6967617473;
        break;
      case 5:
        uint64_t v11 = 7627125;
        break;
      case 6:
        unint64_t v10 = 0xE500000000000000;
        uint64_t v11 = 0x7972726163;
        break;
      case 7:
        uint64_t v11 = 0x69746375646F7270;
        unint64_t v10 = 0xEA00000000006E6FLL;
        break;
      case 8:
        unint64_t v10 = 0xEA00000000007972;
        uint64_t v11 = 0x616D697250326171;
        break;
      case 9:
        unint64_t v10 = 0xEB000000006C616ELL;
        uint64_t v11 = 0x7265746E49326171;
        break;
      default:
        break;
    }
    uint64_t v106 = *(void *)(v0 + 728);
    uint64_t v16 = *(void *)(v0 + 664);
    uint64_t v17 = *(void *)(v0 + 656);
    *(void *)(v0 + 408) = sub_24A1C52A8(v11, v10, &v115);
    sub_24A2A7B70();
    swift_bridgeObjectRelease();
    sub_24A20BE48(v0 + 16);
    _os_log_impl(&dword_24A19F000, v6, v7, "Attesting key in environment %{public}s", v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C5C00A0](v9, -1, -1);
    MEMORY[0x24C5C00A0](v8, -1, -1);

    long long v18 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
    v18(v106, v17);
    long long v15 = v18;
  }
  else
  {
    uint64_t v12 = *(void *)(v0 + 728);
    uint64_t v13 = *(void *)(v0 + 664);
    uint64_t v14 = *(void *)(v0 + 656);
    sub_24A20BE48(v0 + 16);

    long long v15 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v15(v12, v14);
  }
  *(void *)(v0 + 760) = v15;
  unint64_t v19 = *(void *)(v0 + 448);
  long long v20 = *(void **)(v0 + 456);
  uint64_t v21 = v20[17];
  uint64_t v22 = v20[18];
  __swift_project_boxed_opaque_existential_1(v20 + 14, v21);
  if (v19 >> 60 == 15)
  {
    SEP.AttestationProtocol.attest(key:)(*(void *)(v0 + 424), v21, v22);
    goto LABEL_20;
  }
  uint64_t v23 = *(uint64_t (**)(uint64_t, uint64_t))(v22 + 8);
  sub_24A1A52B0(*(void *)(v0 + 440), *(void *)(v0 + 448));
  long long v24 = (void *)v23(v21, v22);
  uint64_t v26 = *(void *)(v0 + 440);
  unint64_t v25 = *(void *)(v0 + 448);
  if (v24)
  {
    uint64_t v27 = *(void *)(v0 + 424);
    id v28 = v24;
    long long v29 = (void *)sub_24A2A6AA0();
    SecKeySetParameter();

    uint64_t v30 = v20[17];
    uint64_t v31 = v20[18];
    __swift_project_boxed_opaque_existential_1(v20 + 14, v30);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, id, uint64_t, uint64_t))(v31 + 16))(&v115, v27, v28, v30, v31);
    uint64_t v32 = *(void *)(v0 + 440);
    unint64_t v33 = *(void *)(v0 + 448);

    sub_24A1B7B78(v32, v33);
LABEL_20:
    uint64_t v35 = v115;
    unint64_t v34 = v116;
    uint64_t v36 = v117;
    uint64_t v107 = v118;
    *(void *)(v0 + 792) = v118;
    *(void *)(v0 + 784) = v36;
    *(void *)(v0 + 776) = v34;
    *(void *)(v0 + 768) = v35;
    uint64_t v37 = *(void *)(v0 + 456);
    uint64_t v38 = *(void *)(v0 + 432);
    int v39 = (void *)swift_task_alloc();
    v39[2] = v35;
    v39[3] = v34;
    v39[4] = v38;
    v39[5] = v37;
    v39[6] = v35;
    v39[7] = v34;
    v39[8] = v36;
    v39[9] = v107;
    sub_24A1A52B0(v35, v34);
    sub_24A20D418(&qword_26B174268, (void (*)(uint64_t))type metadata accessor for Proto_AttestationBundle);
    sub_24A2A7020();
    uint64_t v44 = *(void *)(v0 + 720);
    uint64_t v45 = *(void *)(v0 + 656);
    uint64_t v46 = *(void *)(v0 + 648);
    uint64_t v47 = *(void *)(v0 + 456);
    uint64_t v48 = *(void *)(v0 + 416);
    swift_task_dealloc();
    sub_24A20D234(v46, v48, type metadata accessor for Proto_AttestationBundle);
    LODWORD(v48) = *(unsigned __int8 *)(v47 + 106);
    v110(v44, v108, v45);
    uint64_t v104 = v47;
    sub_24A20359C(v47, v0 + 168);
    uint64_t v49 = sub_24A2A7140();
    os_log_type_t v50 = sub_24A2A7B40();
    if (os_log_type_enabled(v49, v50))
    {
      int v102 = v48;
      uint64_t v48 = swift_slowAlloc();
      *(_DWORD *)uint64_t v48 = 67240448;
      *(_DWORD *)(v0 + 828) = v102;
      sub_24A2A7B70();
      *(_WORD *)(v48 + 8) = 1026;
      uint64_t v52 = v15;
      int v53 = *(unsigned __int8 *)(v0 + 274);
      sub_24A20BE48(v0 + 168);
      *(_DWORD *)(v0 + 824) = v53;
      long long v15 = v52;
      sub_24A2A7B70();
      _os_log_impl(&dword_24A19F000, v49, v50, "Computing release object: evaluateTrust=%{BOOL,public}d, requireCryptex1=%{BOOL,public}d)", (uint8_t *)v48, 0xEu);
      uint64_t v54 = v48;
      LOBYTE(v48) = v102;
      MEMORY[0x24C5C00A0](v54, -1, -1);
    }
    else
    {
      sub_24A20BE48(v0 + 168);
    }

    uint64_t v55 = *(void *)(v0 + 720);
    uint64_t v56 = *(void *)(v0 + 656);
    uint64_t v57 = *(void *)(v0 + 640);
    uint64_t v58 = *(void *)(v0 + 608);
    uint64_t v59 = *(void *)(v0 + 576);
    uint64_t v60 = *(void *)(v0 + 416);
    *(void *)(v0 + 800) = (*(void *)(v0 + 664) + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v15(v55, v56);
    sub_24A20D234(v60, v59, type metadata accessor for AttestationBundle);
    LOBYTE(v60) = *(unsigned char *)(v104 + 106);
    sub_24A20D234(v59, v57, type metadata accessor for Proto_AttestationBundle);
    sub_24A1E33F4(v57, v48, v60, v58);
    uint64_t v61 = *(void *)(v0 + 712);
    uint64_t v62 = *(void *)(v0 + 656);
    uint64_t v63 = *(void *)(v0 + 624);
    uint64_t v64 = *(void *)(v0 + 616);
    uint64_t v65 = *(void *)(v0 + 608);
    uint64_t v66 = *(void *)(v0 + 600);
    uint64_t v67 = *(void *)(v0 + 592);
    sub_24A20D524(*(void *)(v0 + 576), type metadata accessor for AttestationBundle);
    sub_24A20D4BC(v65, v64, (uint64_t (*)(void))type metadata accessor for Release);
    sub_24A20D4BC(v64, v63, (uint64_t (*)(void))type metadata accessor for Release);
    v110(v61, v108, v62);
    sub_24A20D234(v63, v66, (uint64_t (*)(void))type metadata accessor for Release);
    sub_24A20D234(v63, v67, (uint64_t (*)(void))type metadata accessor for Release);
    uint64_t v68 = sub_24A2A7140();
    os_log_type_t v69 = sub_24A2A7B20();
    BOOL v70 = os_log_type_enabled(v68, v69);
    uint64_t v111 = *(void *)(v0 + 656);
    uint64_t v112 = *(void *)(v0 + 712);
    uint64_t v71 = *(void *)(v0 + 600);
    uint64_t v72 = *(void *)(v0 + 592);
    if (v70)
    {
      uint64_t v73 = *(void *)(v0 + 584);
      uint64_t v74 = *(void *)(v0 + 568);
      uint64_t v75 = *(void *)(v0 + 552);
      uint64_t v103 = *(void *)(v0 + 544);
      uint64_t v76 = swift_slowAlloc();
      uint64_t v109 = swift_slowAlloc();
      uint64_t v114 = v109;
      *(_DWORD *)uint64_t v76 = 136446466;
      sub_24A20D234(v71, v73, (uint64_t (*)(void))type metadata accessor for Release);
      uint64_t v115 = 0;
      unint64_t v116 = 0xE000000000000000;
      os_log_type_t type = v69;
      sub_24A2A7C60();
      swift_bridgeObjectRelease();
      uint64_t v115 = 0xD000000000000010;
      unint64_t v116 = 0x800000024A2B2B70;
      sub_24A2A3F08(v74);
      sub_24A2A3C70();
      uint64_t v101 = v72;
      (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v74, v103);
      sub_24A2A78C0();
      swift_bridgeObjectRelease();
      sub_24A2A78C0();
      uint64_t v77 = v115;
      unint64_t v78 = v116;
      sub_24A20D524(v73, (uint64_t (*)(void))type metadata accessor for Release);
      *(void *)(v0 + 392) = sub_24A1C52A8(v77, v78, &v114);
      sub_24A2A7B70();
      swift_bridgeObjectRelease();
      sub_24A20D524(v71, (uint64_t (*)(void))type metadata accessor for Release);
      *(_WORD *)(v76 + 12) = 2082;
      uint64_t v79 = Release.jsonString.getter();
      *(void *)(v0 + 400) = sub_24A1C52A8(v79, v80, &v114);
      sub_24A2A7B70();
      swift_bridgeObjectRelease();
      sub_24A20D524(v101, (uint64_t (*)(void))type metadata accessor for Release);
      _os_log_impl(&dword_24A19F000, v68, type, "This device's %{public}s:\n%{public}s", (uint8_t *)v76, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x24C5C00A0](v109, -1, -1);
      MEMORY[0x24C5C00A0](v76, -1, -1);
    }
    else
    {
      sub_24A20D524(*(void *)(v0 + 600), (uint64_t (*)(void))type metadata accessor for Release);
      sub_24A20D524(v72, (uint64_t (*)(void))type metadata accessor for Release);
    }

    v15(v112, v111);
    uint64_t v81 = *(void **)(v0 + 456);
    uint64_t v82 = v81[11];
    uint64_t v83 = v81[12];
    __swift_project_boxed_opaque_existential_1(v81 + 8, v82);
    uint64_t v113 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v83 + 8) + **(int **)(v83 + 8));
    size_t v84 = (void *)swift_task_alloc();
    *(void *)(v0 + 808) = v84;
    *size_t v84 = v0;
    v84[1] = sub_24A205C50;
    uint64_t v85 = *(void *)(v0 + 624);
    uint64_t v86 = *(void *)(v0 + 536);
    return v113(v86, v85, v82, v83);
  }
  type metadata accessor for NodeAttestor.Error();
  sub_24A20D418(&qword_269778F00, (void (*)(uint64_t))type metadata accessor for NodeAttestor.Error);
  uint64_t v40 = (void *)swift_allocError();
  uint64_t v42 = v41;
  uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&qword_269778F08);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v43 - 8) + 56))(v42, 1, 6, v43);
  swift_willThrow();
  sub_24A1B7B78(v26, v25);
  (*(void (**)(void, void, void))(v0 + 744))(*(void *)(v0 + 688), *(void *)(v0 + 736), *(void *)(v0 + 656));
  id v88 = v40;
  id v89 = v40;
  id v90 = v40;
  uint64_t v91 = sub_24A2A7140();
  os_log_type_t v92 = sub_24A2A7B30();
  if (os_log_type_enabled(v91, v92))
  {
    uint64_t v93 = (uint8_t *)swift_slowAlloc();
    uint64_t v94 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v93 = 138543362;
    id v95 = v40;
    uint64_t v96 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 384) = v96;
    sub_24A2A7B70();
    void *v94 = v96;

    _os_log_impl(&dword_24A19F000, v91, v92, "Attestation failed: %{public}@", v93, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&qword_269778BB8);
    swift_arrayDestroy();
    MEMORY[0x24C5C00A0](v94, -1, -1);
    MEMORY[0x24C5C00A0](v93, -1, -1);
  }
  else
  {
  }
  uint64_t v97 = *(void (**)(uint64_t, uint64_t))(v0 + 760);
  uint64_t v98 = *(void *)(v0 + 688);
  uint64_t v99 = *(void *)(v0 + 656);

  v97(v98, v99);
  swift_willThrow();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  int v100 = *(uint64_t (**)(void))(v0 + 8);
  return v100();
}

uint64_t sub_24A205C50()
{
  *(void *)(*(void *)v1 + 816) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_24A206E04;
  }
  else {
    uint64_t v2 = sub_24A205D90;
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

void sub_24A205D90()
{
  uint64_t v107 = v0;
  v106[1] = *MEMORY[0x263EF8340];
  (*(void (**)(void, void, void))(v0 + 744))(*(void *)(v0 + 704), *(void *)(v0 + 736), *(void *)(v0 + 656));
  uint64_t v1 = sub_24A2A7140();
  os_log_type_t v2 = sub_24A2A7B20();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&dword_24A19F000, v1, v2, "Fetched inclusion proofs for release", v3, 2u);
    MEMORY[0x24C5C00A0](v3, -1, -1);
  }
  uint64_t v4 = *(void (**)(uint64_t, uint64_t))(v0 + 760);
  uint64_t v5 = *(void *)(v0 + 704);
  uint64_t v6 = *(void *)(v0 + 656);
  uint64_t v7 = *(void *)(v0 + 536);
  uint64_t v8 = *(void *)(v0 + 528);

  v4(v5, v6);
  uint64_t v9 = sub_24A2A6BC0();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = swift_task_alloc();
  uint64_t v12 = v7 + *(int *)(v8 + 20);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B173100);
  uint64_t v13 = swift_task_alloc();
  sub_24A1B2CAC(v12, v13, &qword_26B173100);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v13, 1, v9) == 1)
  {
    sub_24A1B2D10(v13, &qword_26B173100);
    swift_task_dealloc();
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))(v11, v13, v9);
    swift_task_dealloc();
    if (sub_24A2A6B70())
    {
      uint64_t v93 = *(void *)(v0 + 784);
      unint64_t v95 = *(void *)(v0 + 792);
      uint64_t v90 = *(void *)(v0 + 768);
      unint64_t v92 = *(void *)(v0 + 776);
      uint64_t v101 = *(void *)(v0 + 648);
      uint64_t v96 = *(void *)(v0 + 624);
      uint64_t v102 = *(void *)(v0 + 536);
      uint64_t v88 = *(void *)(v0 + 432);
      uint64_t v98 = *(void *)(v0 + 416);
      type metadata accessor for NodeAttestor.Error();
      sub_24A20D418(&qword_269778F00, (void (*)(uint64_t))type metadata accessor for NodeAttestor.Error);
      uint64_t v14 = (void *)swift_allocError();
      uint64_t v16 = v15;
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_269778F08);
      uint64_t v18 = v16 + *(int *)(v17 + 48);
      unint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
      v19(v16, v11, v9);
      v19(v18, v88, v9);
      long long v20 = v14;
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v16, 0, 6, v17);
      swift_willThrow();
      sub_24A1A5384(v90, v92);
      sub_24A1A5384(v90, v92);
      sub_24A1A5384(v93, v95);
      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v11, v9);
      sub_24A20D524(v96, (uint64_t (*)(void))type metadata accessor for Release);
      sub_24A20D524(v98, type metadata accessor for AttestationBundle);
      sub_24A20D524(v101, type metadata accessor for Proto_AttestationBundle);
      sub_24A20D524(v102, (uint64_t (*)(void))type metadata accessor for TransparencyLogProofs);
      swift_task_dealloc();
      (*(void (**)(void, void, void))(v0 + 744))(*(void *)(v0 + 688), *(void *)(v0 + 736), *(void *)(v0 + 656));
      id v21 = v14;
      id v22 = v14;
      id v23 = v14;
      long long v24 = sub_24A2A7140();
      os_log_type_t v25 = sub_24A2A7B30();
      uint64_t v104 = v14;
      if (os_log_type_enabled(v24, v25))
      {
        uint64_t v26 = (uint8_t *)swift_slowAlloc();
        uint64_t v27 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v26 = 138543362;
        id v28 = v20;
        uint64_t v29 = _swift_stdlib_bridgeErrorToNSError();
        *(void *)(v0 + 384) = v29;
        sub_24A2A7B70();
        *uint64_t v27 = v29;

        _os_log_impl(&dword_24A19F000, v24, v25, "Attestation failed: %{public}@", v26, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&qword_269778BB8);
        swift_arrayDestroy();
        MEMORY[0x24C5C00A0](v27, -1, -1);
        MEMORY[0x24C5C00A0](v26, -1, -1);
      }
      else
      {
      }
      uint64_t v62 = *(void (**)(uint64_t, uint64_t))(v0 + 760);
      uint64_t v63 = *(void *)(v0 + 688);
      uint64_t v64 = *(void *)(v0 + 656);

      v62(v63, v64);
      swift_willThrow();

      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v65 = *(void (**)(void))(v0 + 8);
      goto LABEL_30;
    }
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v11, v9);
  }
  uint64_t v30 = *(void *)(v0 + 536);
  uint64_t v31 = *(void *)(v0 + 520);
  uint64_t v32 = *(void *)(v0 + 512);
  swift_task_dealloc();
  sub_24A2A6E00();
  uint64_t v33 = v31 + *(int *)(v32 + 20);
  uint64_t v34 = type metadata accessor for LogEntry(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v33, 1, 1, v34);
  uint64_t v35 = v31 + *(int *)(v32 + 24);
  uint64_t v36 = type metadata accessor for LogConsistency(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v35, 1, 1, v36);
  LOBYTE(v35) = sub_24A1B234C(v30, v31);
  sub_24A20D524(v31, type metadata accessor for ATLogProofs);
  uint64_t v37 = *(void *)(v0 + 816);
  if ((v35 & 1) == 0)
  {
    uint64_t v38 = *(void *)(v0 + 632);
    uint64_t v39 = *(void *)(v0 + 536);
    uint64_t v41 = *(void *)(v0 + 496);
    uint64_t v40 = *(void *)(v0 + 504);
    uint64_t v42 = *(void *)(v0 + 488);
    uint64_t v43 = *(void *)(v0 + 416);
    *(void *)(swift_task_alloc() + 16) = v39;
    sub_24A20D418(&qword_26B174860, (void (*)(uint64_t))type metadata accessor for Proto_TransparencyProofs);
    sub_24A2A7020();
    swift_task_dealloc();
    uint64_t v44 = v43 + *(int *)(v38 + 40);
    sub_24A1B2D10(v44, &qword_26B174880);
    sub_24A20D4BC(v40, v44, type metadata accessor for Proto_TransparencyProofs);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v41 + 56))(v44, 0, 1, v42);
  }
  uint64_t v103 = SecKeyCopyPublicKey(*(SecKeyRef *)(v0 + 424));
  if (!v103)
  {
    unint64_t v77 = *(void *)(v0 + 792);
    uint64_t v78 = *(void *)(v0 + 784);
    sub_24A1A5384(*(void *)(v0 + 768), *(void *)(v0 + 776));
    sub_24A1A5384(v78, v77);
    __break(1u);
    goto LABEL_35;
  }
  CFDataRef v45 = SecKeyCopyExternalRepresentation(v103, 0);
  if (!v45)
  {
LABEL_35:
    unint64_t v79 = *(void *)(v0 + 792);
    uint64_t v80 = *(void *)(v0 + 784);
    sub_24A1A5384(*(void *)(v0 + 768), *(void *)(v0 + 776));
    sub_24A1A5384(v80, v79);
    __break(1u);
    JUMPOUT(0x24A206DF4);
  }
  CFDataRef v46 = v45;
  (*(void (**)(void, void, void))(v0 + 744))(*(void *)(v0 + 696), *(void *)(v0 + 736), *(void *)(v0 + 656));
  CFDataRef v105 = v46;
  uint64_t v47 = sub_24A2A7140();
  os_log_type_t v48 = sub_24A2A7B40();
  if (os_log_type_enabled(v47, v48))
  {
    os_log_type_t v99 = v48;
    uint64_t v49 = (uint8_t *)swift_slowAlloc();
    uint64_t v97 = swift_slowAlloc();
    v106[0] = v97;
    *(_DWORD *)uint64_t v49 = 136446210;
    uint64_t v50 = sub_24A2A6AD0();
    unint64_t v52 = v51;
    sub_24A20D418(&qword_26B174A10, MEMORY[0x263F047F8]);
    sub_24A2A71A0();
    switch(v52 >> 62)
    {
      case 1uLL:
        if (v50 >> 32 < (int)v50) {
          __break(1u);
        }
        sub_24A1A52B0(v50, v52);
        sub_24A20C570((int)v50, v50 >> 32);
        if (v37) {
          goto LABEL_20;
        }
        goto LABEL_25;
      case 2uLL:
        uint64_t v67 = *(void *)(v50 + 16);
        uint64_t v66 = *(void *)(v50 + 24);
        sub_24A1A52B0(v50, v52);
        swift_retain();
        swift_retain();
        sub_24A20C570(v67, v66);
        swift_release();
        swift_release();
        if (v37)
        {
LABEL_20:

          return;
        }
LABEL_25:
        os_log_t log = v47;
LABEL_28:
        sub_24A1A5384(v50, v52);
        unint64_t v83 = *(void *)(v0 + 776);
        uint64_t v84 = *(void *)(v0 + 784);
        unint64_t v87 = *(void *)(v0 + 792);
        id v89 = *(void (**)(uint64_t, uint64_t))(v0 + 760);
        uint64_t v85 = *(void *)(v0 + 656);
        uint64_t v86 = *(void *)(v0 + 696);
        uint64_t v94 = *(void *)(v0 + 648);
        uint64_t v91 = *(void *)(v0 + 624);
        uint64_t v68 = *(void *)(v0 + 560);
        uint64_t v69 = *(void *)(v0 + 552);
        uint64_t v70 = *(void *)(v0 + 544);
        uint64_t v72 = *(void *)(v0 + 472);
        uint64_t v71 = *(void *)(v0 + 480);
        uint64_t v82 = *(void *)(v0 + 768);
        uint64_t v73 = *(void *)(v0 + 464);
        sub_24A2A7180();
        (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v71, v73);
        sub_24A1A5384(v50, v52);
        sub_24A20D418(&qword_26B1749F8, MEMORY[0x263F045C0]);
        uint64_t v74 = sub_24A2A7E30();
        unint64_t v76 = v75;
        (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v68, v70);
        *(void *)(v0 + 368) = sub_24A1C52A8(v74, v76, v106);
        sub_24A2A7B70();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_24A19F000, log, v99, "Successfully created attestation for key: %{public}s", v49, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x24C5C00A0](v97, -1, -1);
        MEMORY[0x24C5C00A0](v49, -1, -1);
        sub_24A1A5384(v82, v83);

        sub_24A1A5384(v82, v83);
        sub_24A1A5384(v84, v87);
        v89(v86, v85);
        sub_24A20D524(v91, (uint64_t (*)(void))type metadata accessor for Release);
        uint64_t v61 = v94;
        break;
      case 3uLL:
        os_log_t log = v47;
        *(void *)(v0 + 351) = 0;
        *(void *)(v0 + 357) = 0;
        goto LABEL_27;
      default:
        os_log_t log = v47;
        *(void *)(v0 + 337) = v50;
        *(_WORD *)(v0 + 345) = v52;
        *(unsigned char *)(v0 + 347) = BYTE2(v52);
        *(unsigned char *)(v0 + 348) = BYTE3(v52);
        *(unsigned char *)(v0 + 349) = BYTE4(v52);
        *(unsigned char *)(v0 + 350) = BYTE5(v52);
LABEL_27:
        sub_24A2A7170();
        goto LABEL_28;
    }
  }
  else
  {
    unint64_t v53 = *(void *)(v0 + 792);
    uint64_t v54 = *(void *)(v0 + 784);
    unint64_t v55 = *(void *)(v0 + 776);
    uint64_t v56 = *(void *)(v0 + 768);
    uint64_t v57 = *(void (**)(uint64_t, uint64_t))(v0 + 760);
    uint64_t v58 = *(void *)(v0 + 696);
    uint64_t v59 = *(void *)(v0 + 656);
    uint64_t v60 = *(void *)(v0 + 648);
    uint64_t v100 = *(void *)(v0 + 624);
    sub_24A1A5384(v56, v55);

    sub_24A1A5384(v56, v55);
    sub_24A1A5384(v54, v53);
    v57(v58, v59);
    sub_24A20D524(v100, (uint64_t (*)(void))type metadata accessor for Release);
    uint64_t v61 = v60;
  }
  sub_24A20D524(v61, type metadata accessor for Proto_AttestationBundle);
  sub_24A20D524(*(void *)(v0 + 536), (uint64_t (*)(void))type metadata accessor for TransparencyLogProofs);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v65 = *(void (**)(void))(v0 + 8);
LABEL_30:
  v65();
}

uint64_t sub_24A206E04()
{
  unint64_t v1 = *(void *)(v0 + 792);
  uint64_t v2 = *(void *)(v0 + 784);
  unint64_t v3 = *(void *)(v0 + 776);
  uint64_t v4 = *(void *)(v0 + 768);
  uint64_t v5 = *(void *)(v0 + 648);
  uint64_t v6 = *(void *)(v0 + 624);
  uint64_t v7 = *(void *)(v0 + 416);
  sub_24A1A5384(v4, v3);
  sub_24A1A5384(v4, v3);
  sub_24A1A5384(v2, v1);
  sub_24A20D524(v6, (uint64_t (*)(void))type metadata accessor for Release);
  sub_24A20D524(v7, type metadata accessor for AttestationBundle);
  sub_24A20D524(v5, type metadata accessor for Proto_AttestationBundle);
  uint64_t v8 = *(void **)(v0 + 816);
  (*(void (**)(void, void, void))(v0 + 744))(*(void *)(v0 + 688), *(void *)(v0 + 736), *(void *)(v0 + 656));
  id v9 = v8;
  id v10 = v8;
  id v11 = v8;
  uint64_t v12 = sub_24A2A7140();
  os_log_type_t v13 = sub_24A2A7B30();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    uint64_t v15 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 138543362;
    id v16 = v8;
    uint64_t v17 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 384) = v17;
    sub_24A2A7B70();
    void *v15 = v17;

    _os_log_impl(&dword_24A19F000, v12, v13, "Attestation failed: %{public}@", v14, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&qword_269778BB8);
    swift_arrayDestroy();
    MEMORY[0x24C5C00A0](v15, -1, -1);
    MEMORY[0x24C5C00A0](v14, -1, -1);
  }
  else
  {
  }
  uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v0 + 760);
  uint64_t v19 = *(void *)(v0 + 688);
  uint64_t v20 = *(void *)(v0 + 656);

  v18(v19, v20);
  swift_willThrow();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v21 = *(uint64_t (**)(void))(v0 + 8);
  return v21();
}

void NodeAttestor.environment.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t NodeAttestor.defaultKeyDuration.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t NodeAttestor.defaultKeyDuration.setter(uint64_t result, uint64_t a2)
{
  *(void *)(v2 + 8) = result;
  *(void *)(v2 + 16) = a2;
  return result;
}

uint64_t (*NodeAttestor.defaultKeyDuration.modify())()
{
  return nullsub_1;
}

uint64_t NodeAttestor.assetProvider.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_24A1CA974(v1 + 24, a1);
}

uint64_t NodeAttestor.assetProvider.setter(long long *a1)
{
  uint64_t v3 = v1 + 24;
  __swift_destroy_boxed_opaque_existential_1(v3);

  return sub_24A1B97D8(a1, v3);
}

uint64_t (*NodeAttestor.assetProvider.modify())()
{
  return nullsub_1;
}

uint64_t NodeAttestor.transparencyProver.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_24A1CA974(v1 + 64, a1);
}

uint64_t NodeAttestor.transparencyProver.setter(long long *a1)
{
  uint64_t v3 = v1 + 64;
  __swift_destroy_boxed_opaque_existential_1(v3);

  return sub_24A1B97D8(a1, v3);
}

uint64_t (*NodeAttestor.transparencyProver.modify())()
{
  return nullsub_1;
}

uint64_t NodeAttestor.requireCertificateChain.getter()
{
  return *(unsigned __int8 *)(v0 + 104);
}

uint64_t NodeAttestor.requireCertificateChain.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 104) = result;
  return result;
}

uint64_t (*NodeAttestor.requireCertificateChain.modify())()
{
  return nullsub_1;
}

uint64_t NodeAttestor.requireSealedHashes.getter()
{
  return *(unsigned __int8 *)(v0 + 105);
}

uint64_t NodeAttestor.requireSealedHashes.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 105) = result;
  return result;
}

uint64_t (*NodeAttestor.requireSealedHashes.modify())()
{
  return nullsub_1;
}

uint64_t NodeAttestor.requireCryptex1.getter()
{
  return *(unsigned __int8 *)(v0 + 106);
}

uint64_t NodeAttestor.requireCryptex1.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 106) = result;
  return result;
}

uint64_t (*NodeAttestor.requireCryptex1.modify())()
{
  return nullsub_1;
}

uint64_t sub_24A2073D4()
{
  uint64_t v0 = sub_24A2A7160();
  __swift_allocate_value_buffer(v0, qword_26977A480);
  __swift_project_value_buffer(v0, (uint64_t)qword_26977A480);
  return sub_24A2A7150();
}

uint64_t NodeAttestor.sepAttestationImpl.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_24A1CA974(v1 + 112, a1);
}

uint64_t NodeAttestor.sepAttestationImpl.setter(long long *a1)
{
  uint64_t v3 = v1 + 112;
  __swift_destroy_boxed_opaque_existential_1(v3);

  return sub_24A1B97D8(a1, v3);
}

uint64_t (*NodeAttestor.sepAttestationImpl.modify())()
{
  return nullsub_1;
}

double NodeAttestor.init(environment:)@<D0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  char v3 = *a1;
  long long v4 = xmmword_24A2AB3D0;
  *(_OWORD *)(a2 + 8) = xmmword_24A2AB3D0;
  *(void *)(a2 + 136) = &type metadata for SEP.PhysicalDevice;
  *(void *)(a2 + 144) = &protocol witness table for SEP.PhysicalDevice;
  if (MEMORY[0x263F80D48])
  {
    id v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F80D48]), sel_initWithApplication_, 0);
    long long v4 = xmmword_24A2AB3D0;
    uint64_t v6 = v5;
  }
  else
  {
    uint64_t v6 = 0;
  }
  *(_OWORD *)&v15[8] = v4;
  *((void *)&v22 + 1) = &type metadata for SEP.PhysicalDevice;
  uint64_t v23 = &protocol witness table for SEP.PhysicalDevice;
  swift_beginAccess();
  int v7 = byte_26B1730E8;
  id v8 = v6;
  if (v7 == 10)
  {
    static Environment.default.getter(&v14);
    LOBYTE(v7) = v14;
  }
  sub_24A207A70(v3, v6, v7, (uint64_t)&v24);

  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v21);
  long long v20 = v30;
  long long v21 = v31;
  long long v22 = v32;
  uint64_t v23 = v33;
  long long v16 = v26;
  long long v17 = v27;
  long long v18 = v28;
  long long v19 = v29;
  *(_OWORD *)uint64_t v15 = v24;
  *(_OWORD *)&v15[16] = v25;
  __swift_destroy_boxed_opaque_existential_1(a2 + 112);
  long long v9 = v31;
  *(_OWORD *)(a2 + 96) = v30;
  *(_OWORD *)(a2 + 112) = v9;
  *(_OWORD *)(a2 + 128) = v32;
  *(void *)(a2 + 144) = v33;
  long long v10 = v27;
  *(_OWORD *)(a2 + 32) = v26;
  *(_OWORD *)(a2 + 48) = v10;
  long long v11 = v29;
  *(_OWORD *)(a2 + 64) = v28;
  *(_OWORD *)(a2 + 80) = v11;
  double result = *(double *)&v24;
  long long v13 = v25;
  *(_OWORD *)a2 = v24;
  *(_OWORD *)(a2 + 16) = v13;
  return result;
}

double NodeAttestor.init<A, B>(transparencyProver:assetProvider:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v28 = a6;
  uint64_t v27 = a5;
  uint64_t v12 = *(void *)(a4 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](a1);
  uint64_t v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v13);
  long long v19 = (char *)&v26 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_OWORD *)(a7 + 8) = xmmword_24A2AB3D0;
  *(void *)(a7 + 136) = &type metadata for SEP.PhysicalDevice;
  *(void *)(a7 + 144) = &protocol witness table for SEP.PhysicalDevice;
  (*(void (**)(char *, uint64_t))(v17 + 16))(v19, a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a2, a4);
  swift_beginAccess();
  char v20 = byte_26B1730E8;
  if (byte_26B1730E8 == 10)
  {
    static Environment.default.getter(&v30);
    char v20 = v30;
  }
  char v29 = v20;
  sub_24A207E1C((uint64_t)v19, (uint64_t)v15, &v29, a3, a4, v27, v28, (uint64_t)v31);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a2, a4);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(a1, a3);
  __swift_destroy_boxed_opaque_existential_1(a7 + 112);
  long long v21 = v31[7];
  *(_OWORD *)(a7 + 96) = v31[6];
  *(_OWORD *)(a7 + 112) = v21;
  *(_OWORD *)(a7 + 128) = v31[8];
  *(void *)(a7 + 144) = v32;
  long long v22 = v31[3];
  *(_OWORD *)(a7 + 32) = v31[2];
  *(_OWORD *)(a7 + 48) = v22;
  long long v23 = v31[5];
  *(_OWORD *)(a7 + 64) = v31[4];
  *(_OWORD *)(a7 + 80) = v23;
  double result = *(double *)v31;
  long long v25 = v31[1];
  *(_OWORD *)a7 = v31[0];
  *(_OWORD *)(a7 + 16) = v25;
  return result;
}

double NodeAttestor.init<A>(transparencyProver:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  long long v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_OWORD *)(a4 + 8) = xmmword_24A2AB3D0;
  *(void *)(a4 + 136) = &type metadata for SEP.PhysicalDevice;
  *(void *)(a4 + 144) = &protocol witness table for SEP.PhysicalDevice;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, a2);
  double v12 = NodeAttestor.init<A, B>(transparencyProver:assetProvider:)((uint64_t)v10, v11, a2, (uint64_t)&type metadata for DefaultAssetProvider, a3, (uint64_t)&protocol witness table for DefaultAssetProvider, (uint64_t)v19);
  (*(void (**)(uint64_t, uint64_t, double))(v8 + 8))(a1, a2, v12);
  __swift_destroy_boxed_opaque_existential_1(a4 + 112);
  long long v13 = v19[7];
  *(_OWORD *)(a4 + 96) = v19[6];
  *(_OWORD *)(a4 + 112) = v13;
  *(_OWORD *)(a4 + 128) = v19[8];
  *(void *)(a4 + 144) = v20;
  long long v14 = v19[3];
  *(_OWORD *)(a4 + 32) = v19[2];
  *(_OWORD *)(a4 + 48) = v14;
  long long v15 = v19[5];
  *(_OWORD *)(a4 + 64) = v19[4];
  *(_OWORD *)(a4 + 80) = v15;
  double result = *(double *)v19;
  long long v17 = v19[1];
  *(_OWORD *)a4 = v19[0];
  *(_OWORD *)(a4 + 16) = v17;
  return result;
}

void sub_24A207A70(char a1@<W0>, void *a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  *(void *)(a4 + 136) = &type metadata for SEP.PhysicalDevice;
  *(void *)(a4 + 144) = &protocol witness table for SEP.PhysicalDevice;
  *(void *)(a4 + 48) = &type metadata for DefaultAssetProvider;
  *(void *)(a4 + 56) = &protocol witness table for DefaultAssetProvider;
  *(_OWORD *)(a4 + 8) = xmmword_24A2AB3D0;
  *(void *)(a4 + 88) = &type metadata for SWTransparencyLog;
  *(void *)(a4 + 96) = &protocol witness table for SWTransparencyLog;
  *(unsigned char *)(a4 + 64) = a1;
  *(void *)(a4 + 72) = a2;
  *(unsigned char *)a4 = a3;
  id v6 = a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v7 = sub_24A1CA89C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v7 == 2) {
    unsigned int v8 = (0xF8u >> a3) & 1;
  }
  else {
    LOBYTE(v8) = v7 & 1;
  }
  *(unsigned char *)(a4 + 104) = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v9 = sub_24A1CA89C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v9 == 2) {
    unsigned int v10 = (0xF8u >> a3) & 1;
  }
  else {
    LOBYTE(v10) = v9 & 1;
  }
  *(unsigned char *)(a4 + 105) = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v11 = sub_24A1CA89C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v11 == 2)
  {
    unsigned int v12 = (0xF8u >> a3) & 1;
  }
  else
  {

    LOBYTE(v12) = v11 & 1;
  }
  *(unsigned char *)(a4 + 106) = v12;
}

uint64_t sub_24A207C54@<X0>(char a1@<W0>, char a2@<W1>, uint64_t a3@<X8>)
{
  *(_OWORD *)(a3 + 8) = xmmword_24A2AB3D0;
  *(void *)(a3 + 136) = &type metadata for SEP.PhysicalDevice;
  *(void *)(a3 + 144) = &protocol witness table for SEP.PhysicalDevice;
  *(void *)(a3 + 48) = &type metadata for DefaultAssetProvider;
  *(void *)(a3 + 56) = &protocol witness table for DefaultAssetProvider;
  *(void *)(a3 + 88) = &type metadata for NopTransparencyLog;
  *(void *)(a3 + 96) = &protocol witness table for NopTransparencyLog;
  *(unsigned char *)(a3 + 64) = a1;
  *(unsigned char *)a3 = a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v5 = sub_24A1CA89C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v5 == 2) {
    unsigned int v6 = (0xF8u >> a2) & 1;
  }
  else {
    LOBYTE(v6) = v5 & 1;
  }
  *(unsigned char *)(a3 + 104) = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v7 = sub_24A1CA89C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v7 == 2) {
    unsigned int v8 = (0xF8u >> a2) & 1;
  }
  else {
    LOBYTE(v8) = v7 & 1;
  }
  *(unsigned char *)(a3 + 105) = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v9 = sub_24A1CA89C();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (v9 == 2) {
    unsigned int v11 = (0xF8u >> a2) & 1;
  }
  else {
    LOBYTE(v11) = v9 & 1;
  }
  *(unsigned char *)(a3 + 106) = v11;
  return result;
}

uint64_t sub_24A207E1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  char v14 = *a3;
  *(_OWORD *)(a8 + 8) = xmmword_24A2AB3D0;
  *(void *)(a8 + 136) = &type metadata for SEP.PhysicalDevice;
  *(void *)(a8 + 144) = &protocol witness table for SEP.PhysicalDevice;
  *(void *)(a8 + 48) = a5;
  *(void *)(a8 + 56) = a7;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(a8 + 24));
  uint64_t v16 = *(void *)(a5 - 8);
  uint64_t v26 = a2;
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v16 + 16))(boxed_opaque_existential_1, a2, a5);
  *(void *)(a8 + 88) = a4;
  *(void *)(a8 + 96) = a6;
  long long v17 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(a8 + 64));
  uint64_t v18 = *(void *)(a4 - 8);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v18 + 16))(v17, a1, a4);
  *(unsigned char *)a8 = v14;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v19 = sub_24A1CA89C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v19 == 2) {
    unsigned int v20 = (0xF8u >> v14) & 1;
  }
  else {
    LOBYTE(v20) = v19 & 1;
  }
  *(unsigned char *)(a8 + 104) = v20;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v21 = sub_24A1CA89C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v21 == 2) {
    unsigned int v22 = (0xF8u >> v14) & 1;
  }
  else {
    LOBYTE(v22) = v21 & 1;
  }
  *(unsigned char *)(a8 + 105) = v22;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v23 = sub_24A1CA89C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v23 == 2) {
    unsigned int v24 = (0xF8u >> v14) & 1;
  }
  else {
    LOBYTE(v24) = v23 & 1;
  }
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v26, a5);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 8))(a1, a4);
  *(unsigned char *)(a8 + 106) = v24;
  return result;
}

void sub_24A2080C4(uint64_t *a1, uint64_t a2, unint64_t a3, NSObject *a4, char *a5, void (*a6)(char *, uint64_t, uint64_t), void (*a7)(char *, void *), uint64_t a8, uint64_t a9)
{
  uint64_t v199 = a4;
  uint64_t v196 = a8;
  uint64_t v191 = a6;
  uint64_t v192 = a7;
  uint64_t v13 = sub_24A2A7160();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v201 = v13;
  uint64_t v202 = v14;
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v194 = (char *)&v187 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  uint64_t v197 = (char *)&v187 - v18;
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  uint64_t v198 = (char *)&v187 - v20;
  uint64_t v21 = MEMORY[0x270FA5388](v19);
  uint64_t v188 = (char *)&v187 - v22;
  uint64_t v23 = MEMORY[0x270FA5388](v21);
  uint64_t v189 = (char *)&v187 - v24;
  uint64_t v25 = MEMORY[0x270FA5388](v23);
  uint64_t v190 = (char *)&v187 - v26;
  uint64_t v27 = MEMORY[0x270FA5388](v25);
  uint64_t v193 = (char *)&v187 - v28;
  MEMORY[0x270FA5388](v27);
  int v195 = (char *)&v187 - v29;
  uint64_t v30 = sub_24A2A6DC0();
  uint64_t v31 = *(void *)(v30 - 8);
  MEMORY[0x270FA5388](v30);
  uint64_t v33 = (char *)&v187 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = *a1;
  unint64_t v35 = a1[1];
  sub_24A1A52B0(a2, a3);
  sub_24A1A5384(v34, v35);
  *a1 = a2;
  a1[1] = a3;
  uint64_t v36 = a1;
  uint64_t v37 = sub_24A2A6BC0();
  MEMORY[0x270FA5388](v37);
  (*(void (**)(char *, NSObject *))(v39 + 16))((char *)&v187 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0), v199);
  sub_24A2A6DA0();
  uint64_t v40 = (uint64_t)a1 + *(int *)(type metadata accessor for Proto_AttestationBundle(0) + 36);
  sub_24A1B2D10(v40, &qword_26B1749E0);
  (*(void (**)(uint64_t, char *, uint64_t))(v31 + 32))(v40, v33, v30);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v31 + 56))(v40, 0, 1, v30);
  uint64_t v41 = *((void *)a5 + 6);
  uint64_t v42 = *((void *)a5 + 7);
  __swift_project_boxed_opaque_existential_1((void *)a5 + 3, v41);
  uint64_t v43 = v200;
  uint64_t v44 = (*(uint64_t (**)(uint64_t, uint64_t))(v42 + 8))(v41, v42);
  if (v43)
  {
    if (qword_269778410 != -1) {
      swift_once();
    }
    uint64_t v46 = v201;
    uint64_t v47 = __swift_project_value_buffer(v201, (uint64_t)qword_26977A480);
    uint64_t v48 = v202;
    uint64_t v49 = v198;
    (*(void (**)(char *, uint64_t, uint64_t))(v202 + 16))(v198, v47, v46);
    uint64_t v50 = v43;
    unint64_t v51 = v43;
    unint64_t v52 = sub_24A2A7140();
    os_log_type_t v53 = sub_24A2A7B30();
    if (os_log_type_enabled(v52, v53))
    {
      uint64_t v54 = (uint8_t *)swift_slowAlloc();
      unint64_t v55 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v54 = 138543362;
      uint64_t v56 = v43;
      uint64_t v57 = _swift_stdlib_bridgeErrorToNSError();
      v204[0] = v57;
      uint64_t v46 = v201;
      uint64_t v48 = v202;
      sub_24A2A7B70();
      *unint64_t v55 = v57;

      _os_log_impl(&dword_24A19F000, v52, v53, "Unable to fetch ap ticket: %{public}@", v54, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&qword_269778BB8);
      swift_arrayDestroy();
      MEMORY[0x24C5C00A0](v55, -1, -1);
      MEMORY[0x24C5C00A0](v54, -1, -1);
    }
    else
    {
    }
    (*(void (**)(char *, uint64_t))(v48 + 8))(v49, v46);
LABEL_13:
    swift_willThrow();
    return;
  }
  uint64_t v58 = v44;
  uint64_t v59 = v45;
  uint64_t v60 = v195;
  sub_24A1A5384(v36[2], v36[3]);
  void v36[2] = v58;
  void v36[3] = v59;
  uint64_t v61 = *((void *)a5 + 6);
  uint64_t v62 = *((void *)a5 + 7);
  uint64_t v200 = a5 + 24;
  __swift_project_boxed_opaque_existential_1((void *)a5 + 3, v61);
  uint64_t v63 = (*(uint64_t (**)(uint64_t, uint64_t))(v62 + 16))(v61, v62);
  uint64_t v64 = v201;
  uint64_t v65 = v196;
  uint64_t v81 = v63;
  if (*(void *)(v63 + 16))
  {
    swift_bridgeObjectRelease();
    v36[4] = v81;
    uint64_t v66 = v64;
  }
  else
  {
    swift_bridgeObjectRelease();
    if (qword_269778410 != -1) {
      swift_once();
    }
    uint64_t v135 = __swift_project_value_buffer(v64, (uint64_t)qword_26977A480);
    uint64_t v136 = v60;
    (*(void (**)(char *, uint64_t, uint64_t))(v202 + 16))(v60, v135, v64);
    uint64_t v137 = sub_24A2A7140();
    os_log_type_t v138 = sub_24A2A7B30();
    if (os_log_type_enabled(v137, v138))
    {
      int v139 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)int v139 = 0;
      _os_log_impl(&dword_24A19F000, v137, v138, "Empty provisioning certificate chain", v139, 2u);
      int v140 = v139;
      uint64_t v136 = v60;
      MEMORY[0x24C5C00A0](v140, -1, -1);
    }

    uint64_t v66 = v64;
    (*(void (**)(char *, uint64_t))(v202 + 8))(v136, v64);
    if (a5[104] == 1)
    {
      type metadata accessor for NodeAttestor.Error();
      sub_24A20D418(&qword_269778F00, (void (*)(uint64_t))type metadata accessor for NodeAttestor.Error);
      unint64_t v141 = (void *)swift_allocError();
      uint64_t v143 = v142;
      uint64_t v144 = __swift_instantiateConcreteTypeFromMangledName(&qword_269778F08);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v144 - 8) + 56))(v143, 3, 6, v144);
      swift_willThrow();
      if (qword_269778410 != -1) {
        swift_once();
      }
      uint64_t v66 = v64;
      uint64_t v67 = __swift_project_value_buffer(v64, (uint64_t)qword_26977A480);
      uint64_t v68 = v197;
      (*(void (**)(char *, uint64_t, uint64_t))(v202 + 16))(v197, v67, v64);
      id v69 = v141;
      id v70 = v141;
      uint64_t v71 = sub_24A2A7140();
      os_log_type_t v72 = sub_24A2A7B30();
      if (os_log_type_enabled(v71, v72))
      {
        uint64_t v73 = (uint8_t *)swift_slowAlloc();
        uint64_t v74 = (void *)swift_slowAlloc();
        uint64_t v199 = v71;
        *(_DWORD *)uint64_t v73 = 138543362;
        uint64_t v198 = (char *)(v73 + 4);
        id v75 = v141;
        uint64_t v76 = v65;
        unint64_t v77 = v36;
        uint64_t v78 = a5;
        uint64_t v79 = _swift_stdlib_bridgeErrorToNSError();
        v204[0] = v79;
        uint64_t v71 = v199;
        sub_24A2A7B70();
        *uint64_t v74 = v79;
        a5 = v78;
        uint64_t v36 = v77;
        uint64_t v65 = v76;

        _os_log_impl(&dword_24A19F000, v71, v72, "Failed to obtain provisioning certificate chain from CFPrefs: %{public}@", v73, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&qword_269778BB8);
        uint64_t v80 = v74;
        uint64_t v66 = v201;
        swift_arrayDestroy();
        MEMORY[0x24C5C00A0](v80, -1, -1);
        uint64_t v68 = v197;
        MEMORY[0x24C5C00A0](v73, -1, -1);
      }
      else
      {
      }
      (*(void (**)(char *, uint64_t))(v202 + 8))(v68, v66);
      if (a5[104]) {
        goto LABEL_13;
      }
    }
  }
  uint64_t v82 = *((void *)a5 + 6);
  uint64_t v83 = *((void *)a5 + 7);
  __swift_project_boxed_opaque_existential_1(v200, v82);
  uint64_t v205 = (*(uint64_t (**)(uint64_t, uint64_t))(v83 + 24))(v82, v83);
  v204[0] = (uint64_t)v191;
  v204[1] = (uint64_t)v192;
  v204[2] = v65;
  v204[3] = a9;
  sub_24A20984C((uint64_t)v204, &v205);
  if (qword_26B174600 != -1) {
    swift_once();
  }
  uint64_t v199 = 0;
  uint64_t v98 = (void *)sub_24A2A6C00();
  uint64_t v99 = __swift_project_value_buffer((uint64_t)v98, (uint64_t)qword_26B1768F8);
  uint64_t v100 = (char *)*(v98 - 1);
  MEMORY[0x270FA5388](v99);
  uint64_t v102 = (char *)&v187 - ((unint64_t)(v101 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v103 = (char *)*((void *)v100 + 2);
  uint64_t v200 = v98;
  uint64_t v196 = (uint64_t)(v100 + 16);
  uint64_t v197 = v101;
  int v195 = v103;
  ((void (*)(char *))v103)(v102);
  uint64_t v104 = v205;
  uint64_t v105 = *(void *)(v205 + 16);
  uint64_t v187 = v36;
  uint64_t v198 = v100;
  if (v105 && (unint64_t v106 = sub_24A1BE878((uint64_t)v102), (v107 & 1) != 0))
  {
    uint64_t v108 = *(void *)(*(void *)(v104 + 56) + 8 * v106);
    uint64_t v109 = (void (*)(char *, void *))*((void *)v100 + 1);
    swift_bridgeObjectRetain();
    uint64_t v192 = v109;
    v109(v102, v200);
    if (qword_269778410 != -1) {
      swift_once();
    }
    uint64_t v110 = __swift_project_value_buffer(v66, (uint64_t)qword_26977A480);
    uint64_t v111 = v202;
    uint64_t v112 = v190;
    uint64_t v191 = *(void (**)(char *, uint64_t, uint64_t))(v202 + 16);
    v191(v190, v110, v66);
    uint64_t v113 = v66;
    uint64_t v114 = sub_24A2A7140();
    os_log_type_t v115 = sub_24A2A7B40();
    if (os_log_type_enabled(v114, v115))
    {
      unint64_t v116 = (uint8_t *)swift_slowAlloc();
      v204[0] = swift_slowAlloc();
      uint64_t v117 = v204[0];
      uint64_t v193 = (char *)v108;
      *(_DWORD *)unint64_t v116 = 136446210;
      sub_24A20D29C();
      uint64_t v118 = sub_24A2A7E30();
      uint64_t v203 = sub_24A1C52A8(v118, v119, v204);
      uint64_t v120 = v201;
      sub_24A2A7B70();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_24A19F000, v114, v115, "Reading cryptexes from %{public}s", v116, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24C5C00A0](v117, -1, -1);
      MEMORY[0x24C5C00A0](v116, -1, -1);

      uint64_t v95 = v120;
      uint64_t v108 = (uint64_t)v193;
      uint64_t v121 = *(void (**)(char *, uint64_t))(v202 + 8);
      v121(v190, v95);
    }
    else
    {

      uint64_t v121 = *(void (**)(char *, uint64_t))(v111 + 8);
      v121(v112, v113);
      uint64_t v95 = v113;
    }
    uint64_t v145 = (uint64_t)v187;
    sub_24A20A56C((uint64_t)v187, v108);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v192 = (void (*)(char *, void *))*((void *)v100 + 1);
    v192(v102, v200);
    if (qword_269778410 != -1) {
      swift_once();
    }
    uint64_t v122 = __swift_project_value_buffer(v66, (uint64_t)qword_26977A480);
    uint64_t v123 = v202;
    unint64_t v124 = v193;
    uint64_t v191 = *(void (**)(char *, uint64_t, uint64_t))(v202 + 16);
    v191(v193, v122, v66);
    uint64_t v125 = v66;
    uint64_t v126 = sub_24A2A7140();
    os_log_type_t v127 = sub_24A2A7B30();
    if (os_log_type_enabled(v126, v127))
    {
      uint64_t v128 = (uint8_t *)swift_slowAlloc();
      uint64_t v129 = swift_slowAlloc();
      uint64_t v190 = a5;
      uint64_t v130 = v129;
      v204[0] = v129;
      *(_DWORD *)uint64_t v128 = 136446210;
      sub_24A20D29C();
      uint64_t v131 = sub_24A2A7E30();
      uint64_t v203 = sub_24A1C52A8(v131, v132, v204);
      uint64_t v133 = v201;
      sub_24A2A7B70();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_24A19F000, v126, v127, "Failed to read cryptexes from %{public}s", v128, 0xCu);
      swift_arrayDestroy();
      uint64_t v134 = v130;
      a5 = v190;
      MEMORY[0x24C5C00A0](v134, -1, -1);
      MEMORY[0x24C5C00A0](v128, -1, -1);

      uint64_t v95 = v133;
      uint64_t v121 = *(void (**)(char *, uint64_t))(v123 + 8);
      v121(v193, v133);
    }
    else
    {

      uint64_t v121 = *(void (**)(char *, uint64_t))(v123 + 8);
      v121(v124, v125);
      uint64_t v95 = v125;
    }
    uint64_t v145 = (uint64_t)v187;
    if (a5[105] == 1)
    {
      type metadata accessor for NodeAttestor.Error();
      sub_24A20D418(&qword_269778F00, (void (*)(uint64_t))type metadata accessor for NodeAttestor.Error);
      uint64_t v146 = (void *)swift_allocError();
      uint64_t v148 = v147;
      uint64_t v149 = __swift_instantiateConcreteTypeFromMangledName(&qword_269778F08);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v149 - 8) + 56))(v148, 4, 6, v149);
      swift_willThrow();
      swift_bridgeObjectRelease();
      uint64_t v97 = v194;
      goto LABEL_20;
    }
  }
  uint64_t v193 = (char *)v121;
  if (qword_26B1747C0 != -1) {
    swift_once();
  }
  long long v150 = v200;
  uint64_t v151 = __swift_project_value_buffer((uint64_t)v200, (uint64_t)qword_26B176970);
  MEMORY[0x270FA5388](v151);
  uint64_t v153 = (char *)&v187 - ((v152 + 15) & 0xFFFFFFFFFFFFFFF0);
  ((void (*)(char *, uint64_t, void *))v195)(v153, v151, v150);
  uint64_t v154 = v205;
  if (*(void *)(v205 + 16))
  {
    unint64_t v155 = sub_24A1BE878((uint64_t)v153);
    if (v156)
    {
      uint64_t v157 = v95;
      uint64_t v158 = *(void *)(*(void *)(v154 + 56) + 8 * v155);
      swift_bridgeObjectRetain();
      v192(v153, v200);
      if (qword_269778410 != -1) {
        swift_once();
      }
      uint64_t v159 = v157;
      uint64_t v160 = __swift_project_value_buffer(v157, (uint64_t)qword_26977A480);
      uint64_t v161 = v188;
      v191(v188, v160, v157);
      swift_bridgeObjectRetain_n();
      long long v162 = sub_24A2A7140();
      os_log_type_t v163 = sub_24A2A7B40();
      if (os_log_type_enabled(v162, v163))
      {
        uint64_t v164 = swift_slowAlloc();
        uint64_t v165 = swift_slowAlloc();
        v204[0] = v165;
        *(_DWORD *)uint64_t v164 = 136446210;
        uint64_t v200 = (void *)(v164 + 4);
        uint64_t v166 = swift_bridgeObjectRetain();
        uint64_t v167 = a5;
        uint64_t v168 = MEMORY[0x24C5BF1D0](v166, &type metadata for SEP.SealedHash.Entry);
        unint64_t v170 = v169;
        swift_bridgeObjectRelease();
        uint64_t v171 = v168;
        a5 = v167;
        uint64_t v203 = sub_24A1C52A8(v171, v170, v204);
        uint64_t v159 = v201;
        sub_24A2A7B70();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_24A19F000, v162, v163, "Reading secure config from %{public}s", (uint8_t *)v164, 0xCu);
        swift_arrayDestroy();
        uint64_t v172 = v165;
        uint64_t v145 = (uint64_t)v187;
        MEMORY[0x24C5C00A0](v172, -1, -1);
        MEMORY[0x24C5C00A0](v164, -1, -1);

        uint64_t v173 = v188;
        uint64_t v157 = v159;
      }
      else
      {

        swift_bridgeObjectRelease_n();
        uint64_t v173 = v161;
      }
      ((void (*)(char *, uint64_t))v193)(v173, v159);
      uint64_t v97 = v194;
      uint64_t v186 = v199;
      sub_24A20AA00(v145, v158);
      if (v186)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v146 = v186;
        uint64_t v95 = v157;
        goto LABEL_20;
      }
      swift_bridgeObjectRelease();
LABEL_69:
      swift_bridgeObjectRelease();
      return;
    }
  }
  v192(v153, v200);
  if (qword_269778410 != -1) {
    swift_once();
  }
  uint64_t v174 = __swift_project_value_buffer(v95, (uint64_t)qword_26977A480);
  uint64_t v175 = v189;
  v191(v189, v174, v95);
  uint64_t v176 = sub_24A2A7140();
  os_log_type_t v177 = sub_24A2A7B30();
  if (os_log_type_enabled(v176, v177))
  {
    int v178 = (uint8_t *)swift_slowAlloc();
    uint64_t v198 = (char *)swift_slowAlloc();
    v204[0] = (uint64_t)v198;
    *(_DWORD *)int v178 = 136446210;
    uint64_t v197 = (char *)(v178 + 4);
    sub_24A20D29C();
    uint64_t v179 = sub_24A2A7E30();
    uint64_t v203 = sub_24A1C52A8(v179, v180, v204);
    sub_24A2A7B70();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_24A19F000, v176, v177, "Failed to read secure config from %{public}s", v178, 0xCu);
    uint64_t v181 = v198;
    swift_arrayDestroy();
    MEMORY[0x24C5C00A0](v181, -1, -1);
    MEMORY[0x24C5C00A0](v178, -1, -1);

    uint64_t v182 = v201;
    ((void (*)(char *, uint64_t))v193)(v175, v201);
  }
  else
  {

    ((void (*)(char *, uint64_t))v193)(v175, v95);
    uint64_t v182 = v95;
  }
  if (a5[105] != 1) {
    goto LABEL_69;
  }
  type metadata accessor for NodeAttestor.Error();
  sub_24A20D418(&qword_269778F00, (void (*)(uint64_t))type metadata accessor for NodeAttestor.Error);
  uint64_t v146 = (void *)swift_allocError();
  uint64_t v184 = v183;
  uint64_t v185 = __swift_instantiateConcreteTypeFromMangledName(&qword_269778F08);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v185 - 8) + 56))(v184, 5, 6, v185);
  swift_willThrow();
  swift_bridgeObjectRelease();
  uint64_t v97 = v194;
  uint64_t v95 = v182;
LABEL_20:
  if (qword_269778410 != -1) {
    swift_once();
  }
  uint64_t v84 = __swift_project_value_buffer(v95, (uint64_t)qword_26977A480);
  (*(void (**)(char *, uint64_t, uint64_t))(v202 + 16))(v97, v84, v95);
  id v85 = v146;
  id v86 = v146;
  unint64_t v87 = sub_24A2A7140();
  os_log_type_t v88 = sub_24A2A7B30();
  if (os_log_type_enabled(v87, v88))
  {
    id v89 = (uint8_t *)swift_slowAlloc();
    uint64_t v200 = (void *)swift_slowAlloc();
    *(_DWORD *)id v89 = 138543362;
    id v90 = v146;
    uint64_t v91 = a5;
    uint64_t v92 = _swift_stdlib_bridgeErrorToNSError();
    v204[0] = v92;
    sub_24A2A7B70();
    uint64_t v93 = v200;
    *uint64_t v200 = v92;
    a5 = v91;

    _os_log_impl(&dword_24A19F000, v87, v88, "Failed to read sealed hashes: %{public}@", v89, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&qword_269778BB8);
    swift_arrayDestroy();
    uint64_t v94 = v93;
    uint64_t v95 = v201;
    MEMORY[0x24C5C00A0](v94, -1, -1);
    uint64_t v96 = v89;
    uint64_t v97 = v194;
    MEMORY[0x24C5C00A0](v96, -1, -1);
  }
  else
  {
  }
  (*(void (**)(char *, uint64_t))(v202 + 8))(v97, v95);
  if (a5[105]) {
    goto LABEL_13;
  }
}

uint64_t sub_24A20984C(uint64_t a1, void *a2)
{
  uint64_t v111 = *MEMORY[0x263EF8340];
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1748B8);
  MEMORY[0x270FA5388](v4 - 8);
  unsigned int v6 = (char *)&v77 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v102 = type metadata accessor for SEP.SealedHash(0);
  uint64_t v7 = *(void *)(v102 - 8);
  MEMORY[0x270FA5388](v102);
  uint64_t v98 = (char *)&v77 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(a1 + 16);
  unint64_t v10 = *(void *)(a1 + 24);
  uint64_t v92 = a2;
  uint64_t v11 = *a2;
  uint64_t v12 = *(void *)(v11 + 64);
  uint64_t v96 = v11 + 64;
  uint64_t v13 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v14 = -1;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & v12;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174238);
  id v90 = &v77;
  MEMORY[0x270FA5388](v16 - 8);
  unint64_t v106 = (char *)&v77 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v97 = (unint64_t)(v13 + 63) >> 6;
  unint64_t v99 = v10;
  uint64_t v94 = v10 & 0x3FFFFFFFFFFFFFFFLL;
  uint64_t v100 = (int)v9;
  uint64_t v105 = v9;
  uint64_t v91 = v9 >> 32;
  uint64_t v101 = (unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v7 + 48);
  uint64_t v104 = v11;
  swift_bridgeObjectRetain();
  int64_t v18 = 0;
  unint64_t v103 = v10 >> 62;
  uint64_t v95 = v6;
  while (2)
  {
    if (v15)
    {
      unint64_t v19 = __clz(__rbit64(v15));
      uint64_t v20 = (v15 - 1) & v15;
      unint64_t v21 = v19 | (v18 << 6);
    }
    else
    {
      if (__OFADD__(v18++, 1))
      {
        __break(1u);
LABEL_65:
        __break(1u);
LABEL_66:
        __break(1u);
LABEL_67:
        __break(1u);
        goto LABEL_68;
      }
      uint64_t v23 = (uint64_t *)v106;
      if (v18 >= v97) {
        goto LABEL_62;
      }
      unint64_t v24 = *(void *)(v96 + 8 * v18);
      if (!v24)
      {
        int64_t v25 = v18 + 1;
        if (v18 + 1 >= v97) {
          goto LABEL_62;
        }
        unint64_t v24 = *(void *)(v96 + 8 * v25);
        if (!v24)
        {
          int64_t v25 = v18 + 2;
          if (v18 + 2 >= v97) {
            goto LABEL_62;
          }
          unint64_t v24 = *(void *)(v96 + 8 * v25);
          if (!v24)
          {
            int64_t v25 = v18 + 3;
            if (v18 + 3 >= v97) {
              goto LABEL_62;
            }
            unint64_t v24 = *(void *)(v96 + 8 * v25);
            if (!v24)
            {
              int64_t v25 = v18 + 4;
              if (v18 + 4 >= v97) {
                goto LABEL_62;
              }
              unint64_t v24 = *(void *)(v96 + 8 * v25);
              if (!v24)
              {
                int64_t v25 = v18 + 5;
                if (v18 + 5 >= v97) {
                  goto LABEL_62;
                }
                unint64_t v24 = *(void *)(v96 + 8 * v25);
                if (!v24)
                {
                  while (1)
                  {
                    int64_t v18 = v25 + 1;
                    if (__OFADD__(v25, 1)) {
                      break;
                    }
                    if (v18 >= v97) {
                      goto LABEL_62;
                    }
                    unint64_t v24 = *(void *)(v96 + 8 * v18);
                    ++v25;
                    if (v24) {
                      goto LABEL_22;
                    }
                  }
LABEL_68:
                  __break(1u);
LABEL_69:
                  __break(1u);
LABEL_70:
                  __break(1u);
LABEL_71:
                  sub_24A2A6900();
                  __break(1u);
LABEL_72:
                  sub_24A2A6900();
                  __break(1u);
                }
              }
            }
          }
        }
        int64_t v18 = v25;
      }
LABEL_22:
      uint64_t v20 = (v24 - 1) & v24;
      unint64_t v21 = __clz(__rbit64(v24)) + (v18 << 6);
    }
    uint64_t v26 = *(void *)(v104 + 48);
    uint64_t v27 = sub_24A2A6C00();
    uint64_t v28 = *(void *)(v27 - 8);
    uint64_t v29 = v28;
    uint64_t v30 = v26 + *(void *)(v28 + 72) * v21;
    uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t))(v28 + 16);
    unint64_t v32 = v28 + 16;
    uint64_t v33 = v106;
    v31(v106, v30, v27);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v33, 0, 1, v27);
    uint64_t v34 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v29 + 48))(v33, 1, v27);
    if (v34 == 1) {
      return swift_release();
    }
    unint64_t v107 = v20;
    int64_t v108 = v18;
    unint64_t v35 = *(void *)(v29 + 64);
    MEMORY[0x270FA5388](v34);
    uint64_t v36 = (char *)&v77 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v36, v33, v27);
    memset(v110, 0, sizeof(v110));
    switch(v103)
    {
      case 1uLL:
        if (v91 < v100) {
          goto LABEL_65;
        }
        unint64_t v93 = v32;
        sub_24A1A52B0(v105, v99);
        if (!sub_24A2A68E0()) {
          goto LABEL_72;
        }
        if (__OFSUB__(v100, sub_24A2A6910())) {
          goto LABEL_67;
        }
        sub_24A2A6900();
        unsigned int v6 = v95;
        sub_24A1EF5A4((uint64_t)v110, v95);
        sub_24A1A5384(v105, v99);
        uint64_t v36 = (char *)&v77 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
LABEL_35:
        if ((*v101)(v6, 1, v102) == 1)
        {
          (*(void (**)(char *, uint64_t))(v29 + 8))(v36, v27);
          sub_24A1B2D10((uint64_t)v6, &qword_26B1748B8);
          goto LABEL_5;
        }
        uint64_t v38 = v98;
        sub_24A20D4BC((uint64_t)v6, (uint64_t)v98, type metadata accessor for SEP.SealedHash);
        uint64_t v39 = (uint64_t)v38;
        if ((*v38 & 4) == 0)
        {
          sub_24A20D524((uint64_t)v38, type metadata accessor for SEP.SealedHash);
          (*(void (**)(char *, uint64_t))(v29 + 8))(v36, v27);
          goto LABEL_5;
        }
        uint64_t v23 = &v77;
        uint64_t v40 = *v92;
        if (!*(void *)(*v92 + 16)) {
          goto LABEL_49;
        }
        unint64_t v41 = sub_24A1BE878((uint64_t)v36);
        uint64_t v39 = (uint64_t)v98;
        if ((v42 & 1) == 0
          || !*(void *)(*(void *)(*(void *)(v40 + 56) + 8 * v41) + 16)
          || (unint64_t v93 = *(void *)(*(void *)(*(void *)(v40 + 56) + 8 * v41) + 16),
              uint64_t v43 = *v92,
              !*(void *)(*v92 + 16))
          || (v44 = sub_24A1BE878((uint64_t)v36), uint64_t v39 = (uint64_t)v98, (v45 & 1) == 0)
          || (uint64_t v46 = *(void *)(*(void *)(v43 + 56) + 8 * v44), (v47 = *(void *)(v46 + 16)) == 0))
        {
LABEL_49:
          sub_24A20D524(v39, type metadata accessor for SEP.SealedHash);
          (*(void (**)(char *, uint64_t))(v29 + 8))(v36, v27);
          goto LABEL_5;
        }
        uint64_t v82 = &v77;
        uint64_t v48 = v46 + 56 * v47;
        uint64_t v88 = *(void *)(v48 - 24);
        unint64_t v89 = *(void *)(v48 - 16);
        uint64_t v86 = *(void *)(v48 - 8);
        unint64_t v87 = *(void *)v48;
        int v78 = *(unsigned __int8 *)(v48 + 8);
        long long v79 = *(_OWORD *)(v48 + 16);
        MEMORY[0x270FA5388](v44);
        unint64_t v49 = (v35 + 15) & 0xFFFFFFFFFFFFFFF0;
        uint64_t v84 = (char *)v49;
        uint64_t v50 = ((uint64_t (*)(char *, char *, uint64_t))v31)((char *)&v77 - v49, v36, v27);
        uint64_t v80 = &v77;
        MEMORY[0x270FA5388](v50);
        id v85 = (char *)&v77 - v49;
        uint64_t v81 = (char *)&v77 - v49;
        ((void (*)(void))v31)();
        sub_24A1A52B0(v88, v89);
        uint64_t v51 = v86;
        unint64_t v52 = v87;
        sub_24A1B8018(v86, v87);
        sub_24A1A52B0(v88, v89);
        sub_24A1B8018(v51, v52);
        os_log_type_t v53 = v92;
        uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        LODWORD(v83) = isUniquelyReferenced_nonNull_native;
        uint64_t v77 = (uint64_t)&v77;
        MEMORY[0x270FA5388](isUniquelyReferenced_nonNull_native);
        unint64_t v55 = (char *)((char *)&v77 - v84);
        v31((char *)((char *)&v77 - v84), (uint64_t)v85, v27);
        *(void *)uint64_t v110 = *v53;
        uint64_t v56 = *(void *)v110;
        void *v53 = 0x8000000000000000;
        uint64_t v84 = v55;
        unint64_t v58 = sub_24A1BE878((uint64_t)v55);
        uint64_t v59 = *(void *)(v56 + 16);
        BOOL v60 = (v57 & 1) == 0;
        uint64_t v61 = v59 + v60;
        if (__OFADD__(v59, v60)) {
          goto LABEL_69;
        }
        char v62 = v57;
        if (*(void *)(v56 + 24) >= v61)
        {
          unsigned int v6 = v95;
          if (v83)
          {
            if ((v57 & 1) == 0) {
              goto LABEL_61;
            }
          }
          else
          {
            sub_24A25CF50();
            if ((v62 & 1) == 0) {
              goto LABEL_61;
            }
          }
          goto LABEL_56;
        }
        sub_24A1E6D70(v61, v83);
        unint64_t v63 = sub_24A1BE878((uint64_t)v84);
        unsigned int v6 = v95;
        if ((v62 & 1) != (v64 & 1))
        {
          sub_24A2A7E80();
          __break(1u);
          JUMPOUT(0x24A20A55CLL);
        }
        unint64_t v58 = v63;
        if (v62)
        {
LABEL_56:
          uint64_t v83 = *(void *)v110;
          uint64_t v65 = *(void **)(*(void *)(*(void *)v110 + 56) + 8 * v58);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v65 = sub_24A20C650(v65);
          }
          if (v93 > v65[2]) {
            goto LABEL_70;
          }
          uint64_t v66 = &v65[7 * v93 - 7];
          uint64_t v67 = v66[4];
          unint64_t v68 = v66[5];
          char v69 = v78 | 4;
          uint64_t v70 = v66[6];
          unint64_t v71 = v66[7];
          unint64_t v72 = v89;
          v66[4] = v88;
          v66[5] = v72;
          unint64_t v73 = v87;
          v66[6] = v86;
          v66[7] = v73;
          *((unsigned char *)v66 + 64) = v69;
          *(_OWORD *)(v66 + 9) = v79;
          sub_24A1A5384(v67, v68);
          sub_24A1B7B78(v70, v71);
          *(void *)(*(void *)(v83 + 56) + 8 * v58) = v65;
          uint64_t v74 = *(void (**)(char *, uint64_t))(v29 + 8);
          v74(v84, v27);
          *uint64_t v92 = *(void *)v110;
          v74(v85, v27);
          sub_24A1A5384(v88, v89);
          sub_24A1B7B78(v86, v87);
          v74(v81, v27);
          sub_24A20D524((uint64_t)v98, type metadata accessor for SEP.SealedHash);
          v74(v36, v27);
LABEL_5:
          unint64_t v15 = v107;
          int64_t v18 = v108;
          continue;
        }
LABEL_61:
        sub_24A1A5384(v88, v89);
        sub_24A1B7B78(v86, v87);
        __break(1u);
LABEL_62:
        uint64_t v75 = sub_24A2A6C00();
        (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v75 - 8) + 56))(v23, 1, 1, v75);
        return swift_release();
      case 2uLL:
        unint64_t v93 = v35;
        uint64_t v37 = *(void *)(v105 + 16);
        swift_retain();
        swift_retain();
        if (!sub_24A2A68E0()) {
          goto LABEL_71;
        }
        if (__OFSUB__(v37, sub_24A2A6910())) {
          goto LABEL_66;
        }
        sub_24A2A6900();
        unsigned int v6 = v95;
        sub_24A1EF5A4((uint64_t)v110, v95);
        swift_release();
        swift_release();
        unint64_t v35 = v93;
        goto LABEL_35;
      case 3uLL:
        memset(v109, 0, 14);
        goto LABEL_30;
      default:
        LOBYTE(v109[0]) = v100;
        *(_DWORD *)((char *)v109 + 1) = *(_DWORD *)((char *)&v105 + 1);
        *(_WORD *)((char *)v109 + 5) = *(_WORD *)((char *)&v105 + 5);
        HIBYTE(v109[0]) = HIBYTE(v105);
        LODWORD(v109[1]) = v99;
        WORD2(v109[1]) = WORD2(v99);
LABEL_30:
        sub_24A1EF5A4((uint64_t)v110, v6);
        goto LABEL_35;
    }
  }
}

uint64_t sub_24A20A56C(uint64_t a1, uint64_t a2)
{
  uint64_t v31 = a1;
  uint64_t v3 = type metadata accessor for Proto_SealedHash(0);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  unsigned int v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174800);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Proto_SealedHashLedger(0);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (unint64_t *)((char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1746E0);
  uint64_t v15 = MEMORY[0x270FA5388](v14 - 8);
  uint64_t result = MEMORY[0x270FA5388](v15);
  unint64_t v19 = (char *)&v26 - v18;
  if (*(void *)(a2 + 16))
  {
    uint64_t v27 = v17;
    uint64_t v30 = v6;
    uint64_t v28 = sub_24A2A6BE0();
    uint64_t v29 = v20;
    MEMORY[0x270FA5388](v28);
    *(&v26 - 2) = a2;
    sub_24A20D418(&qword_26B1746B0, (void (*)(uint64_t))type metadata accessor for Proto_SealedHash);
    sub_24A2A7020();
    (*(void (**)(char *, void, uint64_t, uint64_t))(v4 + 56))(v19, 0, 1, v3);
    uint64_t v21 = v31 + *(int *)(type metadata accessor for Proto_AttestationBundle(0) + 32);
    sub_24A1B2CAC(v21, (uint64_t)v9, &qword_26B174800);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
    {
      unint64_t *v13 = sub_24A1BBEA8(MEMORY[0x263F8EE78]);
      sub_24A2A6E00();
      sub_24A1B2D10((uint64_t)v9, &qword_26B174800);
    }
    else
    {
      sub_24A20D4BC((uint64_t)v9, (uint64_t)v13, type metadata accessor for Proto_SealedHashLedger);
    }
    int v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 48))(v19, 1, v3);
    uint64_t v23 = (uint64_t)v30;
    if (v22 == 1)
    {
      sub_24A1B2D10((uint64_t)v19, &qword_26B1746E0);
      uint64_t v24 = v27;
      sub_24A20BFFC(v28, v29, v27);
      swift_bridgeObjectRelease();
      sub_24A1B2D10(v24, &qword_26B1746E0);
    }
    else
    {
      sub_24A20D4BC((uint64_t)v19, (uint64_t)v30, type metadata accessor for Proto_SealedHash);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v32 = *v13;
      unint64_t *v13 = 0x8000000000000000;
      sub_24A2559D4(v23, v28, v29, isUniquelyReferenced_nonNull_native);
      unint64_t *v13 = v32;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    sub_24A1B2D10(v21, &qword_26B174800);
    sub_24A20D4BC((uint64_t)v13, v21, type metadata accessor for Proto_SealedHashLedger);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))(v21, 0, 1, v10);
  }
  return result;
}

uint64_t sub_24A20AA00(uint64_t a1, uint64_t a2)
{
  uint64_t v42 = a1;
  uint64_t v4 = type metadata accessor for Proto_SealedHash(0);
  uint64_t v43 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v41 = (uint64_t)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174800);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Proto_SealedHashLedger(0);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (unint64_t *)((char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1746E0);
  uint64_t v14 = MEMORY[0x270FA5388](v13 - 8);
  uint64_t result = MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)&v36 - v17;
  if (*(void *)(a2 + 16))
  {
    uint64_t v39 = v12;
    uint64_t v40 = v10;
    uint64_t v37 = v16;
    uint64_t v38 = v9;
    if (qword_26B1747C0 != -1) {
      swift_once();
    }
    uint64_t v19 = sub_24A2A6C00();
    __swift_project_value_buffer(v19, (uint64_t)qword_26B176970);
    uint64_t v20 = sub_24A2A6BE0();
    uint64_t v22 = v21;
    MEMORY[0x270FA5388](v20);
    *(&v36 - 2) = a2;
    sub_24A20D418(&qword_26B1746B0, (void (*)(uint64_t))type metadata accessor for Proto_SealedHash);
    sub_24A2A7020();
    if (v2)
    {
      return swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v36 = 0;
      uint64_t v23 = v43;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v43 + 56))(v18, 0, 1, v4);
      uint64_t v24 = v42 + *(int *)(type metadata accessor for Proto_AttestationBundle(0) + 32);
      sub_24A1B2CAC(v24, (uint64_t)v8, &qword_26B174800);
      uint64_t v25 = v38;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v8, 1, v38) == 1)
      {
        unint64_t v26 = sub_24A1BBEA8(MEMORY[0x263F8EE78]);
        *uint64_t v39 = v26;
        sub_24A2A6E00();
        sub_24A1B2D10((uint64_t)v8, &qword_26B174800);
      }
      else
      {
        sub_24A20D4BC((uint64_t)v8, (uint64_t)v39, type metadata accessor for Proto_SealedHashLedger);
      }
      int v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48))(v18, 1, v4);
      uint64_t v28 = v22;
      if (v27 == 1)
      {
        sub_24A1B2D10((uint64_t)v18, &qword_26B1746E0);
        uint64_t v29 = v37;
        uint64_t v30 = v20;
        uint64_t v31 = v39;
        sub_24A20BFFC(v30, v28, v37);
        swift_bridgeObjectRelease();
        sub_24A1B2D10(v29, &qword_26B1746E0);
      }
      else
      {
        uint64_t v32 = v41;
        sub_24A20D4BC((uint64_t)v18, v41, type metadata accessor for Proto_SealedHash);
        uint64_t v33 = v39;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v44 = *v33;
        *uint64_t v33 = 0x8000000000000000;
        uint64_t v35 = v20;
        uint64_t v31 = v33;
        sub_24A2559D4(v32, v35, v28, isUniquelyReferenced_nonNull_native);
        *uint64_t v33 = v44;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      sub_24A1B2D10(v24, &qword_26B174800);
      sub_24A20D4BC((uint64_t)v31, v24, type metadata accessor for Proto_SealedHashLedger);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v40 + 56))(v24, 0, 1, v25);
    }
  }
  return result;
}

uint64_t sub_24A20AF18(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ATLogProofs(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24A20D234(a2, (uint64_t)v7, type metadata accessor for ATLogProofs);
  uint64_t v8 = a1 + *(int *)(type metadata accessor for Proto_TransparencyProofs(0) + 20);
  sub_24A1B2D10(v8, &qword_26B1742D8);
  sub_24A20D4BC((uint64_t)v7, v8, type metadata accessor for ATLogProofs);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

uint64_t sub_24A20B050(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v11;
  void *v11 = v5;
  v11[1] = sub_24A1C50FC;
  return NodeAttestor.attest(key:expiration:nonce:)(a1, a2, a3, a4, a5);
}

uint64_t sub_24A20B118(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Proto_SealedHash.Entry(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v8 = *(void *)(a2 + 16);
  if (v8)
  {
    uint64_t v9 = a2 + 32;
    *(void *)a1 = sub_24A2817C4();
    uint64_t v18 = a1;
    *(unsigned char *)(a1 + 8) = v10 & 1;
    uint64_t v21 = MEMORY[0x263F8EE78];
    uint64_t v11 = sub_24A245A6C(0, v8, 0);
    do
    {
      long long v12 = *(_OWORD *)(v9 + 16);
      v19[0] = *(_OWORD *)v9;
      v19[1] = v12;
      v19[2] = *(_OWORD *)(v9 + 32);
      uint64_t v20 = *(void *)(v9 + 48);
      MEMORY[0x270FA5388](v11);
      *(&v17 - 2) = (uint64_t)v19;
      sub_24A20D320(v19, (void (*)(void, void))sub_24A1A52B0, (void (*)(uint64_t, uint64_t))sub_24A1B8018);
      sub_24A20D418(&qword_26B174688, (void (*)(uint64_t))type metadata accessor for Proto_SealedHash.Entry);
      sub_24A2A7020();
      sub_24A20D320(v19, (void (*)(void, void))sub_24A1A5384, (void (*)(uint64_t, uint64_t))sub_24A1B7B78);
      uint64_t v13 = v21;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_24A245A6C(0, *(void *)(v13 + 16) + 1, 1);
        uint64_t v13 = v21;
      }
      unint64_t v15 = *(void *)(v13 + 16);
      unint64_t v14 = *(void *)(v13 + 24);
      if (v15 >= v14 >> 1)
      {
        sub_24A245A6C(v14 > 1, v15 + 1, 1);
        uint64_t v13 = v21;
      }
      *(void *)(v13 + 16) = v15 + 1;
      uint64_t v11 = sub_24A20D4BC((uint64_t)v7, v13+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(void *)(v5 + 72) * v15, type metadata accessor for Proto_SealedHash.Entry);
      v9 += 56;
      --v8;
    }
    while (v8);
    a1 = v18;
  }
  else
  {
    *(void *)a1 = 0;
    *(unsigned char *)(a1 + 8) = 1;
    uint64_t v13 = MEMORY[0x263F8EE78];
  }
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = v13;
  return result;
}

uint64_t sub_24A20B408(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Proto_Cryptex(0);
  MEMORY[0x270FA5388](v4);
  uint64_t v24 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Proto_Cryptex.Salt(0);
  MEMORY[0x270FA5388](v6 - 8);
  int64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v9 = *(unsigned __int8 *)(a2 + 32);
  *(_DWORD *)a1 = v9;
  uint64_t v10 = *(void *)a2;
  unint64_t v11 = *(void *)(a2 + 8);
  uint64_t v13 = *(void *)(a1 + 8);
  unint64_t v12 = *(void *)(a1 + 16);
  sub_24A1A52B0(*(void *)a2, v11);
  uint64_t v14 = sub_24A1A5384(v13, v12);
  *(void *)(a1 + 8) = v10;
  *(void *)(a1 + 16) = v11;
  if ((v9 & 4) == 0) {
    goto LABEL_6;
  }
  sub_24A1A52B0(v10, v11);
  if (qword_2697783F0 != -1) {
    swift_once();
  }
  uint64_t v15 = swift_bridgeObjectRetain();
  char v16 = sub_24A215234(v15, v10, v11);
  swift_bridgeObjectRelease();
  uint64_t v14 = sub_24A1A5384(v10, v11);
  if (v16)
  {
    sub_24A2A6E00();
    uint64_t v17 = a1 + *(int *)(type metadata accessor for Proto_SealedHash.Entry(0) + 24);
    sub_24A1B2D10(v17, &qword_26B174678);
    sub_24A20D4BC((uint64_t)v8, v17, type metadata accessor for Proto_Cryptex.Salt);
    uint64_t v18 = type metadata accessor for Proto_SealedHash.Entry.OneOf_Info(0);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v17, 0, 1, v18);
  }
  else
  {
LABEL_6:
    MEMORY[0x270FA5388](v14);
    *(&v23 - 2) = a2;
    sub_24A20D418(&qword_26B1744E0, (void (*)(uint64_t))type metadata accessor for Proto_Cryptex);
    uint64_t v20 = (uint64_t)v24;
    sub_24A2A7020();
    uint64_t v21 = a1 + *(int *)(type metadata accessor for Proto_SealedHash.Entry(0) + 24);
    sub_24A1B2D10(v21, &qword_26B174678);
    sub_24A20D4BC(v20, v21, type metadata accessor for Proto_Cryptex);
    uint64_t v22 = type metadata accessor for Proto_SealedHash.Entry.OneOf_Info(0);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v21, 0, 1, v22);
  }
}

uint64_t *sub_24A20B760(uint64_t *result, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 24);
  if (v2 >> 60 != 15)
  {
    uint64_t v3 = result;
    uint64_t v4 = *(void *)(a2 + 16);
    uint64_t v5 = *result;
    unint64_t v6 = result[1];
    sub_24A1A52B0(v4, *(void *)(a2 + 24));
    uint64_t result = (uint64_t *)sub_24A1A5384(v5, v6);
    *uint64_t v3 = v4;
    v3[1] = v2;
  }
  return result;
}

uint64_t sub_24A20B7CC(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for Proto_SealedHash.Entry(0);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  int64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v9 = *(void *)(a2 + 16);
  if (v9)
  {
    uint64_t v10 = a2 + 32;
    *(void *)a1 = sub_24A2817C4();
    uint64_t v19 = a1;
    *(unsigned char *)(a1 + 8) = v11 & 1;
    uint64_t v22 = MEMORY[0x263F8EE78];
    uint64_t v12 = sub_24A245A6C(0, v9, 0);
    while (1)
    {
      long long v13 = *(_OWORD *)(v10 + 16);
      v20[0] = *(_OWORD *)v10;
      v20[1] = v13;
      v20[2] = *(_OWORD *)(v10 + 32);
      uint64_t v21 = *(void *)(v10 + 48);
      MEMORY[0x270FA5388](v12);
      *(&v18 - 2) = (uint64_t)v20;
      sub_24A20D320(v20, (void (*)(void, void))sub_24A1A52B0, (void (*)(uint64_t, uint64_t))sub_24A1B8018);
      sub_24A20D418(&qword_26B174688, (void (*)(uint64_t))type metadata accessor for Proto_SealedHash.Entry);
      sub_24A2A7020();
      sub_24A20D320(v20, (void (*)(void, void))sub_24A1A5384, (void (*)(uint64_t, uint64_t))sub_24A1B7B78);
      uint64_t v14 = v22;
      if (v2) {
        return swift_release();
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_24A245A6C(0, *(void *)(v14 + 16) + 1, 1);
        uint64_t v14 = v22;
      }
      unint64_t v16 = *(void *)(v14 + 16);
      unint64_t v15 = *(void *)(v14 + 24);
      if (v16 >= v15 >> 1)
      {
        sub_24A245A6C(v15 > 1, v16 + 1, 1);
        uint64_t v14 = v22;
      }
      *(void *)(v14 + 16) = v16 + 1;
      uint64_t v12 = sub_24A20D4BC((uint64_t)v8, v14+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(void *)(v6 + 72) * v16, type metadata accessor for Proto_SealedHash.Entry);
      v10 += 56;
      if (!--v9)
      {
        a1 = v19;
        goto LABEL_12;
      }
    }
  }
  else
  {
    *(void *)a1 = 0;
    *(unsigned char *)(a1 + 8) = 1;
    uint64_t v14 = MEMORY[0x263F8EE78];
LABEL_12:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(a1 + 16) = v14;
  }
  return result;
}

uint64_t sub_24A20BACC(uint64_t a1, long long *a2)
{
  uint64_t v5 = type metadata accessor for Proto_SecureConfig(0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = &v13[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  *(_DWORD *)a1 = *((unsigned __int8 *)a2 + 32);
  long long v15 = *a2;
  uint64_t v8 = *(void *)(a1 + 8);
  unint64_t v9 = *(void *)(a1 + 16);
  sub_24A20D3CC((uint64_t)&v15);
  sub_24A1A5384(v8, v9);
  *(_OWORD *)(a1 + 8) = v15;
  uint64_t v14 = a2;
  sub_24A20D418(&qword_26B174710, (void (*)(uint64_t))type metadata accessor for Proto_SecureConfig);
  uint64_t result = sub_24A2A7020();
  if (!v2)
  {
    uint64_t v11 = a1 + *(int *)(type metadata accessor for Proto_SealedHash.Entry(0) + 24);
    sub_24A1B2D10(v11, &qword_26B174678);
    sub_24A20D4BC((uint64_t)v7, v11, type metadata accessor for Proto_SecureConfig);
    uint64_t v12 = type metadata accessor for Proto_SealedHash.Entry.OneOf_Info(0);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 0, 1, v12);
  }
  return result;
}

uint64_t sub_24A20BC98(uint64_t result, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 24);
  if (v2 >> 60 != 15)
  {
    uint64_t v3 = (uint64_t *)result;
    uint64_t v4 = *(void *)(a2 + 16);
    sub_24A1A52B0(v4, *(void *)(a2 + 24));
    sub_24A1A52B0(v4, v2);
    SecureConfig.init(from:)(v4, v2, (uint64_t)v15);
    uint64_t v5 = v16;
    if (v16)
    {
      uint64_t v7 = v17;
      unint64_t v6 = v18;
      uint64_t v9 = v15[0];
      unint64_t v8 = v15[1];
      sub_24A1B7B78(v4, v2);
      uint64_t v10 = *v3;
      unint64_t v11 = v3[1];
      sub_24A1A52B0(v9, v8);
      sub_24A1A5384(v10, v11);
      *uint64_t v3 = v9;
      v3[1] = v8;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t result = sub_24A20D460(v9, v8, v5, v7, v6);
      v3[2] = v5;
    }
    else
    {
      type metadata accessor for NodeAttestor.Error();
      sub_24A20D418(&qword_269778F00, (void (*)(uint64_t))type metadata accessor for NodeAttestor.Error);
      swift_allocError();
      uint64_t v13 = v12;
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_269778F08);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 2, 6, v14);
      swift_willThrow();
      return sub_24A1B7B78(v4, v2);
    }
  }
  return result;
}

uint64_t sub_24A20BE48(uint64_t a1)
{
  return a1;
}

void sub_24A20BE84(uint64_t *a1)
{
  sub_24A2080C4(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(NSObject **)(v1 + 32), *(char **)(v1 + 40), *(void (**)(char *, uint64_t, uint64_t))(v1 + 48), *(void (**)(char *, void *))(v1 + 56), *(void *)(v1 + 64), *(void *)(v1 + 72));
}

uint64_t sub_24A20BEB8(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 == 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t type metadata accessor for NodeAttestor.Error()
{
  uint64_t result = qword_269778F18;
  if (!qword_269778F18) {
    return swift_getSingletonMetadata();
  }
  return result;
}

double sub_24A20BF1C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  unint64_t v6 = v5;
  unint64_t v8 = sub_24A1BE7EC(a1, a2, a3, a4);
  if (v9)
  {
    unint64_t v10 = v8;
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v12 = *v5;
    uint64_t v14 = *v6;
    *unint64_t v6 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_24A25C804();
      uint64_t v12 = v14;
    }
    swift_bridgeObjectRelease();
    sub_24A1BFBE4((_OWORD *)(*(void *)(v12 + 56) + 32 * v10), a5);
    sub_24A20C1A0(v10, v12);
    *unint64_t v6 = v12;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a5 = 0u;
    a5[1] = 0u;
  }
  return result;
}

uint64_t sub_24A20BFFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = sub_24A1BE668(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v4;
    uint64_t v21 = *v4;
    *uint64_t v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_24A25D21C();
      uint64_t v11 = v21;
    }
    swift_bridgeObjectRelease();
    uint64_t v12 = *(void *)(v11 + 56);
    uint64_t v13 = type metadata accessor for Proto_SealedHash(0);
    uint64_t v20 = *(void *)(v13 - 8);
    sub_24A20D4BC(v12 + *(void *)(v20 + 72) * v8, a3, type metadata accessor for Proto_SealedHash);
    sub_24A20C360(v8, v11);
    *uint64_t v4 = v11;
    swift_bridgeObjectRelease();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56);
    uint64_t v15 = a3;
    uint64_t v16 = 0;
    uint64_t v17 = v13;
  }
  else
  {
    uint64_t v18 = type metadata accessor for Proto_SealedHash(0);
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
    uint64_t v17 = v18;
    uint64_t v15 = a3;
    uint64_t v16 = 1;
  }

  return v14(v15, v16, 1, v17);
}

unint64_t sub_24A20C1A0(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = sub_24A2A7C20();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        sub_24A2A7F10();
        sub_24A2A7F20();
        double result = sub_24A2A7F50();
        unint64_t v10 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(a2 + 48);
          uint64_t v12 = (_OWORD *)(v11 + 32 * v3);
          uint64_t v13 = (_OWORD *)(v11 + 32 * v6);
          if (v3 != v6 || v12 >= v13 + 2)
          {
            long long v14 = v13[1];
            _OWORD *v12 = *v13;
            v12[1] = v14;
          }
          uint64_t v15 = *(void *)(a2 + 56);
          uint64_t v16 = (_OWORD *)(v15 + 32 * v3);
          uint64_t v17 = (_OWORD *)(v15 + 32 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v16 >= v17 + 2))
          {
            long long v9 = v17[1];
            _OWORD *v16 = *v17;
            v16[1] = v9;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v19 = *v18;
    uint64_t v20 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v20 = *v18;
    uint64_t v19 = (-1 << result) - 1;
  }
  *uint64_t v18 = v20 & v19;
  uint64_t v21 = *(void *)(a2 + 16);
  BOOL v22 = __OFSUB__(v21, 1);
  uint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_24A20C360(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = sub_24A2A7C20();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      while (1)
      {
        sub_24A2A7F10();
        swift_bridgeObjectRetain();
        sub_24A2A78A0();
        uint64_t v9 = sub_24A2A7F50();
        double result = swift_bridgeObjectRelease();
        unint64_t v10 = v9 & v7;
        if (v3 >= (uint64_t)v8) {
          break;
        }
        if (v10 < v8) {
          goto LABEL_11;
        }
LABEL_12:
        uint64_t v11 = *(void *)(a2 + 48);
        uint64_t v12 = (_OWORD *)(v11 + 16 * v3);
        uint64_t v13 = (_OWORD *)(v11 + 16 * v6);
        if (v3 != v6 || v12 >= v13 + 1) {
          _OWORD *v12 = *v13;
        }
        uint64_t v14 = *(void *)(a2 + 56);
        uint64_t v15 = *(void *)(*(void *)(type metadata accessor for Proto_SealedHash(0) - 8) + 72);
        int64_t v16 = v15 * v3;
        double result = v14 + v15 * v3;
        int64_t v17 = v15 * v6;
        unint64_t v18 = v14 + v15 * v6 + v15;
        if (v16 < v17 || result >= v18)
        {
          double result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          int64_t v3 = v6;
          if (v16 == v17) {
            goto LABEL_6;
          }
          double result = swift_arrayInitWithTakeBackToFront();
        }
        int64_t v3 = v6;
LABEL_6:
        unint64_t v6 = (v6 + 1) & v7;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          goto LABEL_21;
        }
      }
      if (v10 < v8) {
        goto LABEL_6;
      }
LABEL_11:
      if (v3 < (uint64_t)v10) {
        goto LABEL_6;
      }
      goto LABEL_12;
    }
LABEL_21:
    uint64_t v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v21 = *v20;
    uint64_t v22 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v22 = *v20;
    uint64_t v21 = (-1 << result) - 1;
  }
  *uint64_t v20 = v22 & v21;
  uint64_t v23 = *(void *)(a2 + 16);
  BOOL v24 = __OFSUB__(v23, 1);
  uint64_t v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t sub_24A20C570(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_24A2A68E0();
  if (!result || (uint64_t result = sub_24A2A6910(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      sub_24A2A6900();
      sub_24A2A7360();
      sub_24A20D418(&qword_26B174A10, MEMORY[0x263F047F8]);
      return sub_24A2A7170();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

void *sub_24A20C650(void *a1)
{
  return sub_24A1DEF0C(0, a1[2], 0, a1);
}

uint64_t sub_24A20C664(uint64_t a1)
{
  return sub_24A20AF18(a1, *(void *)(v1 + 16));
}

ValueMetadata *type metadata accessor for NodeAttestor()
{
  return &type metadata for NodeAttestor;
}

uint64_t *initializeBufferWithCopyOfBuffer for NodeAttestor.Error(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_269778F08);
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 6, v7))
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      uint64_t v10 = sub_24A2A6BC0();
      uint64_t v11 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v10 - 8) + 16);
      v11(a1, a2, v10);
      v11((uint64_t *)((char *)a1 + *(int *)(v7 + 48)), (uint64_t *)((char *)a2 + *(int *)(v7 + 48)), v10);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 6, v7);
    }
  }
  return a1;
}

uint64_t destroy for NodeAttestor.Error(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_269778F08);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(a1, 6, v2);
  if (!result)
  {
    uint64_t v4 = sub_24A2A6BC0();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
    ((void (*)(void *__return_ptr, uint64_t, uint64_t))v6)((void *)(v4 - 8), a1, v4);
    uint64_t v5 = a1 + *(int *)(v2 + 48);
    return v6(v5, v4);
  }
  return result;
}

char *initializeWithCopy for NodeAttestor.Error(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_269778F08);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 6, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v8 = sub_24A2A6BC0();
    uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16);
    v9(a1, a2, v8);
    v9(&a1[*(int *)(v6 + 48)], &a2[*(int *)(v6 + 48)], v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 6, v6);
  }
  return a1;
}

char *assignWithCopy for NodeAttestor.Error(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_269778F08);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 6, v6);
  int v10 = v8(a2, 6, v6);
  if (!v9)
  {
    if (!v10)
    {
      uint64_t v14 = sub_24A2A6BC0();
      uint64_t v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 24);
      v15(a1, a2, v14);
      v15(&a1[*(int *)(v6 + 48)], &a2[*(int *)(v6 + 48)], v14);
      return a1;
    }
    sub_24A1B2D10((uint64_t)a1, &qword_269778F08);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  uint64_t v11 = sub_24A2A6BC0();
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
  v12(a1, a2, v11);
  v12(&a1[*(int *)(v6 + 48)], &a2[*(int *)(v6 + 48)], v11);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 6, v6);
  return a1;
}

char *initializeWithTake for NodeAttestor.Error(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_269778F08);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 6, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v8 = sub_24A2A6BC0();
    int v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32);
    v9(a1, a2, v8);
    v9(&a1[*(int *)(v6 + 48)], &a2[*(int *)(v6 + 48)], v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 6, v6);
  }
  return a1;
}

char *assignWithTake for NodeAttestor.Error(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_269778F08);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 6, v6);
  int v10 = v8(a2, 6, v6);
  if (!v9)
  {
    if (!v10)
    {
      uint64_t v14 = sub_24A2A6BC0();
      uint64_t v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 40);
      v15(a1, a2, v14);
      v15(&a1[*(int *)(v6 + 48)], &a2[*(int *)(v6 + 48)], v14);
      return a1;
    }
    sub_24A1B2D10((uint64_t)a1, &qword_269778F08);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  uint64_t v11 = sub_24A2A6BC0();
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32);
  v12(a1, a2, v11);
  v12(&a1[*(int *)(v6 + 48)], &a2[*(int *)(v6 + 48)], v11);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 6, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for NodeAttestor.Error(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24A20CFB8);
}

uint64_t sub_24A20CFB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_269778F08);
  unsigned int v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(a1, a2, v4);
  if (v5 >= 7) {
    return v5 - 6;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for NodeAttestor.Error(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24A20D03C);
}

uint64_t sub_24A20D03C(uint64_t a1, int a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = (a2 + 6);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_269778F08);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(a1, v5, a3, v6);
}

uint64_t sub_24A20D0C4(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_269778F08);
  int64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48);

  return v3(a1, 6, v2);
}

uint64_t sub_24A20D130(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_269778F08);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, 6, v4);
}

uint64_t sub_24A20D1A4()
{
  uint64_t result = sub_24A2A6BC0();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t sub_24A20D234(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t sub_24A20D29C()
{
  unint64_t result = qword_269778F28;
  if (!qword_269778F28)
  {
    sub_24A2A6C00();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269778F28);
  }
  return result;
}

uint64_t sub_24A20D2E8(uint64_t a1)
{
  return sub_24A20B118(a1, *(void *)(v1 + 16));
}

uint64_t sub_24A20D304(uint64_t a1)
{
  return sub_24A20B408(a1, *(void *)(v1 + 16));
}

void *sub_24A20D320(void *a1, void (*a2)(void, void), void (*a3)(uint64_t, uint64_t))
{
  uint64_t v5 = a1[2];
  uint64_t v6 = a1[3];
  a2(*a1, a1[1]);
  a3(v5, v6);
  return a1;
}

uint64_t *sub_24A20D378(uint64_t *a1)
{
  return sub_24A20B760(a1, *(void *)(v1 + 16));
}

uint64_t sub_24A20D394(uint64_t a1)
{
  return sub_24A20B7CC(a1, *(void *)(v1 + 16));
}

uint64_t sub_24A20D3B0(uint64_t a1)
{
  return sub_24A20BACC(a1, *(long long **)(v1 + 16));
}

uint64_t sub_24A20D3CC(uint64_t a1)
{
  return a1;
}

uint64_t sub_24A20D3FC(uint64_t a1)
{
  return sub_24A20BC98(a1, *(void *)(v1 + 16));
}

uint64_t sub_24A20D418(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_24A20D460(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (a3)
  {
    sub_24A1A5384(result, a2);
    swift_bridgeObjectRelease();
    return sub_24A1A5384(a4, a5);
  }
  return result;
}

uint64_t sub_24A20D4BC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_24A20D524(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t IORegistryEntry.deinit()
{
  IOObjectRelease(*(_DWORD *)(v0 + 16));
  return v0;
}

uint64_t IORegistryEntry.__deallocating_deinit()
{
  IOObjectRelease(*(_DWORD *)(v0 + 16));

  return MEMORY[0x270FA0228](v0, 20, 7);
}

uint64_t IORegistryEntry.property<A>(key:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  io_registry_entry_t v5 = *(_DWORD *)(v2 + 16);
  uint64_t v6 = (__CFString *)sub_24A2A77F0();
  CFTypeRef CFProperty = IORegistryEntryCreateCFProperty(v5, v6, (CFAllocatorRef)*MEMORY[0x263EFFB10], 0);

  if (CFProperty)
  {
    uint64_t v8 = MEMORY[0x263F06F70];
    uint64_t v9 = swift_dynamicCast();
    if (v9)
    {
      if (a1 == v8)
      {
        int v13 = swift_dynamicCast();
        return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(a2, v13 ^ 1u, 1, v8);
      }
      else
      {
        uint64_t v10 = 0;
        switch(v19 >> 62)
        {
          case 1uLL:
            if (__OFSUB__(HIDWORD(v18), v18))
            {
              __break(1u);
LABEL_19:
              __break(1u);
              JUMPOUT(0x24A20D8DCLL);
            }
            uint64_t v10 = HIDWORD(v18) - (int)v18;
LABEL_14:
            uint64_t v17 = *(void *)(a1 - 8);
            if (v10 == *(void *)(v17 + 72))
            {
              MEMORY[0x270FA5388](v9);
              sub_24A2A6A90();
              sub_24A1A5384(v18, v19);
              uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v17 + 56))(a2, 0, 1, a1);
            }
            else
            {
              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56))(a2, 1, 1, a1);
              uint64_t result = sub_24A1A5384(v18, v19);
            }
            break;
          case 2uLL:
            uint64_t v15 = *(void *)(v18 + 16);
            uint64_t v14 = *(void *)(v18 + 24);
            BOOL v16 = __OFSUB__(v14, v15);
            uint64_t v10 = v14 - v15;
            if (!v16) {
              goto LABEL_14;
            }
            goto LABEL_19;
          case 3uLL:
            goto LABEL_14;
          default:
            uint64_t v10 = BYTE6(v19);
            goto LABEL_14;
        }
      }
    }
    else
    {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56))(a2, 1, 1, a1);
    }
  }
  else
  {
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56);
    return v11(a2, 1, 1, a1);
  }
  return result;
}

uint64_t sub_24A20D8EC()
{
  return sub_24A2A79C0();
}

uint64_t type metadata accessor for IORegistryEntry()
{
  return self;
}

uint64_t method lookup function for IORegistryEntry(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for IORegistryEntry);
}

uint64_t sub_24A20D968(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v8[27] = a7;
  v8[28] = v7;
  v8[25] = a5;
  v8[26] = a6;
  v8[23] = a3;
  v8[24] = a4;
  v8[21] = a1;
  v8[22] = a2;
  type metadata accessor for AttestationBundle(0);
  v8[29] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749E0);
  v8[30] = swift_task_alloc();
  uint64_t v9 = sub_24A2A6DC0();
  v8[31] = v9;
  unsigned char v8[32] = *(void *)(v9 - 8);
  v8[33] = swift_task_alloc();
  uint64_t v10 = sub_24A2A71B0();
  v8[34] = v10;
  v8[35] = *(void *)(v10 - 8);
  v8[36] = swift_task_alloc();
  v8[37] = type metadata accessor for NodeValidator();
  v8[38] = swift_task_alloc();
  uint64_t v11 = sub_24A2A7160();
  v8[39] = v11;
  v8[40] = *(void *)(v11 - 8);
  v8[41] = swift_task_alloc();
  v8[42] = swift_task_alloc();
  v8[43] = swift_task_alloc();
  v8[44] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_24A20DBCC, 0, 0);
}

uint64_t sub_24A20DBCC()
{
  uint64_t v28 = v0;
  v27[1] = *MEMORY[0x263EF8340];
  if (qword_26B174358 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[44];
  uint64_t v2 = v0[39];
  uint64_t v3 = v0[40];
  uint64_t v4 = v0[38];
  uint64_t v5 = v0[28];
  uint64_t v6 = __swift_project_value_buffer(v2, (uint64_t)qword_26B1768B0);
  v0[45] = v6;
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[46] = v7;
  v0[47] = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v7(v1, v6, v2);
  sub_24A210D0C(v5, v4, (uint64_t (*)(void))type metadata accessor for NodeValidator);
  uint64_t v8 = sub_24A2A7140();
  os_log_type_t v9 = sub_24A2A7B40();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (unsigned char *)v0[38];
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    v27[0] = v12;
    *(_DWORD *)uint64_t v11 = 136446210;
    unint64_t v13 = 0xE300000000000000;
    uint64_t v14 = 7759204;
    switch(*v10)
    {
      case 1:
        unint64_t v13 = 0xE90000000000006CLL;
        uint64_t v14 = 0x6172656D65687065;
        break;
      case 2:
        unint64_t v13 = 0xE400000000000000;
        uint64_t v14 = 1718773104;
        break;
      case 3:
        unint64_t v13 = 0xE200000000000000;
        uint64_t v14 = 24945;
        break;
      case 4:
        unint64_t v13 = 0xE700000000000000;
        uint64_t v14 = 0x676E6967617473;
        break;
      case 5:
        uint64_t v14 = 7627125;
        break;
      case 6:
        unint64_t v13 = 0xE500000000000000;
        uint64_t v14 = 0x7972726163;
        break;
      case 7:
        uint64_t v14 = 0x69746375646F7270;
        unint64_t v13 = 0xEA00000000006E6FLL;
        break;
      case 8:
        unint64_t v13 = 0xEA00000000007972;
        uint64_t v14 = 0x616D697250326171;
        break;
      case 9:
        unint64_t v13 = 0xEB000000006C616ELL;
        uint64_t v14 = 0x7265746E49326171;
        break;
      default:
        break;
    }
    uint64_t v26 = v0[44];
    uint64_t v20 = v0[39];
    uint64_t v19 = v0[40];
    uint64_t v21 = v0[38];
    v0[20] = sub_24A1C52A8(v14, v13, v27);
    sub_24A2A7B70();
    swift_bridgeObjectRelease();
    sub_24A20FC2C(v21);
    _os_log_impl(&dword_24A19F000, v8, v9, "Validating attestation bundle in environment %{public}s", v11, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C5C00A0](v12, -1, -1);
    MEMORY[0x24C5C00A0](v11, -1, -1);

    uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
    v18(v26, v20);
  }
  else
  {
    uint64_t v15 = v0[44];
    uint64_t v16 = v0[39];
    uint64_t v17 = v0[40];
    sub_24A20FC2C(v0[38]);

    uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
    v18(v15, v16);
  }
  v0[48] = v18;
  sub_24A1F1DAC();
  v0[16] = sub_24A1BFAC0(MEMORY[0x263F8EE78]);
  uint64_t v22 = dword_269779658;
  uint64_t v23 = (void *)swift_task_alloc();
  v0[49] = v23;
  *uint64_t v23 = v0;
  v23[1] = sub_24A20DFE8;
  uint64_t v24 = v0[24];
  return ((uint64_t (*)(uint64_t, uint64_t))((char *)&dword_269779658 + v22))(v24, (uint64_t)(v0 + 16));
}

uint64_t sub_24A20DFE8()
{
  *(void *)(*(void *)v1 + 400) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_24A20F340;
  }
  else {
    uint64_t v2 = sub_24A20E128;
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

uint64_t sub_24A20E128()
{
  uint64_t v137 = v0;
  v136[1] = *(unsigned char **)MEMORY[0x263EF8340];
  uint64_t v2 = v0 + 16;
  uint64_t v1 = v0[16];
  if (*(void *)(v1 + 16)
    && (unint64_t v3 = sub_24A1BE7EC((uint64_t)&type metadata for SEPAttestationPolicy, (uint64_t)&protocol witness table for SEPAttestationPolicy, 0xD000000000000014, 0x800000024A2B2860), (v4 & 1) != 0)&& (sub_24A1C9680(*(void *)(v1 + 56) + 32 * v3, (uint64_t)(v0 + 6)), __swift_instantiateConcreteTypeFromMangledName(&qword_26B174BB8), (swift_dynamicCast() & 1) != 0))
  {
    uint64_t v6 = v0[2];
    unint64_t v5 = v0[3];
    uint64_t v8 = v0[4];
    unint64_t v7 = v0[5];
  }
  else
  {
    os_log_type_t v9 = (uint64_t *)v0[24];
    uint64_t v6 = *v9;
    unint64_t v5 = v9[1];
    uint64_t v10 = *MEMORY[0x263F276F8];
    sub_24A1A52B0(*v9, v5);
    *(void *)&long long v133 = sub_24A1B94D4(v10);
    *((void *)&v133 + 1) = v11;
    sub_24A1CF5C4(&v133, 0);
    long long v132 = v133;
    sub_24A1A52B0(v6, v5);
    LODWORD(v10) = sub_24A1CF86C((uint64_t *)&v132, v6, v5);
    sub_24A1A5384(v6, v5);
    if (v10)
    {
      sub_24A1CFC44();
      uint64_t v12 = (void *)swift_allocError();
      unsigned char *v13 = 0;
      swift_willThrow();
      sub_24A1A5384(v6, v5);
      unint64_t v15 = *((void *)&v132 + 1);
      uint64_t v14 = v132;
LABEL_15:
      sub_24A1A5384(v14, v15);
LABEL_17:
      int v27 = (void (*)(uint64_t, uint64_t, uint64_t))v0[46];
      uint64_t v28 = v0[45];
      uint64_t v29 = v0[41];
      uint64_t v30 = v0[39];
      swift_bridgeObjectRelease();
      v27(v29, v28, v30);
      id v31 = v12;
      id v32 = v12;
      uint64_t v33 = sub_24A2A7140();
      os_log_type_t v34 = sub_24A2A7B30();
      if (os_log_type_enabled(v33, v34))
      {
        uint64_t v35 = (uint8_t *)swift_slowAlloc();
        uint64_t v36 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v35 = 138543362;
        id v37 = v12;
        uint64_t v38 = _swift_stdlib_bridgeErrorToNSError();
        v0[19] = v38;
        sub_24A2A7B70();
        *uint64_t v36 = v38;

        _os_log_impl(&dword_24A19F000, v33, v34, "AttestationBundle validation failed: %{public}@", v35, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&qword_269778BB8);
        swift_arrayDestroy();
        MEMORY[0x24C5C00A0](v36, -1, -1);
        MEMORY[0x24C5C00A0](v35, -1, -1);
      }
      else
      {
      }
      uint64_t v39 = (void (*)(uint64_t, uint64_t))v0[48];
      uint64_t v40 = v0[41];
      uint64_t v41 = v0[39];

      v39(v40, v41);
      swift_willThrow();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v42 = *(uint64_t (**)(void))(v131 + 8);
      goto LABEL_21;
    }
    unint64_t v7 = *((void *)&v132 + 1);
    uint64_t v8 = v132;
  }
  unint64_t v16 = v0[26];
  if (v16 >> 60 != 15)
  {
    uint64_t v17 = v0[25];
    v136[0] = 0;
    *(void *)&long long v132 = 0;
    sub_24A1B8018(v17, v16);
    sub_24A1A52B0(v6, v5);
    sub_24A1A52B0(v8, v7);
    sub_24A1EED1C(v8, v7, v136, (uint64_t *)&v132, (uint64_t *)&v133);
    sub_24A1A5384(v6, v5);
    unint64_t v129 = v7;
    sub_24A1A5384(v8, v7);
    long long v18 = v133;
    uint64_t v20 = v0[25];
    unint64_t v19 = v0[26];
    if (*((void *)&v133 + 1) >> 60 == 15)
    {
      sub_24A1A52B0(v0[25], v0[26]);
      sub_24A1B7B78(v18, *((unint64_t *)&v18 + 1));
      sub_24A1B7B78(v20, v19);
LABEL_16:
      uint64_t v0 = (void *)v131;
      uint64_t v26 = *(void *)(v131 + 200);
      unint64_t v25 = *(void *)(v131 + 208);
      type metadata accessor for CloudAttestationError(0);
      sub_24A210DD8((unint64_t *)&unk_269778BC8, (void (*)(uint64_t))type metadata accessor for CloudAttestationError);
      uint64_t v12 = (void *)swift_allocError();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      sub_24A1A5384(v6, v5);
      sub_24A1A5384(v8, v129);
      sub_24A1B7B78(v26, v25);
      goto LABEL_17;
    }
    uint64_t v21 = v0 + 16;
    sub_24A1B8018(v20, v19);
    sub_24A1B8018(v18, *((unint64_t *)&v18 + 1));
    char v22 = sub_24A1B7D80(v18, *((unint64_t *)&v18 + 1), v20, v19);
    sub_24A1B7B78(v20, v19);
    sub_24A1B7B78(v18, *((unint64_t *)&v18 + 1));
    sub_24A1B7B78(v18, *((unint64_t *)&v18 + 1));
    if ((v22 & 1) == 0) {
      goto LABEL_16;
    }
    uint64_t v0 = (void *)v131;
    sub_24A1B7B78(*(void *)(v131 + 200), *(void *)(v131 + 208));
    uint64_t v2 = v21;
  }
  *(void *)&long long v133 = v6;
  *((void *)&v133 + 1) = v5;
  uint64_t v134 = v8;
  unint64_t v135 = v7;
  SEP.Attestation.publicKeyData.getter((uint64_t)&v132);
  unint64_t v23 = *((void *)&v132 + 1);
  if ((~*((void *)&v132 + 1) & 0x3000000000000000) == 0)
  {
    type metadata accessor for CloudAttestationError(0);
    sub_24A210DD8((unint64_t *)&unk_269778BC8, (void (*)(uint64_t))type metadata accessor for CloudAttestationError);
    uint64_t v12 = (void *)swift_allocError();
    *uint64_t v24 = 0xD000000000000017;
    v24[1] = 0x800000024A2B2880;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    sub_24A1A5384(v6, v5);
    uint64_t v14 = v8;
    unint64_t v15 = v7;
    goto LABEL_15;
  }
  uint64_t v44 = v132;
  ((void (*)(void, void, void))v0[46])(v0[43], v0[45], v0[39]);
  sub_24A1CFC98(v44, v23);
  sub_24A1CFCAC(v44, v23);
  char v45 = sub_24A2A7140();
  os_log_type_t type = sub_24A2A7B40();
  BOOL v46 = os_log_type_enabled(v45, type);
  uint64_t v123 = v0[43];
  uint64_t v125 = (void (*)(uint64_t, uint64_t))v0[48];
  uint64_t v121 = v0[39];
  uint64_t v117 = v23;
  uint64_t v118 = v8;
  uint64_t v119 = v44;
  unint64_t v130 = v7;
  uint64_t v113 = v2;
  if (v46)
  {
    os_log_t loga = v45;
    uint64_t v48 = v0[35];
    uint64_t v47 = v0[36];
    uint64_t v49 = v0[34];
    uint64_t v50 = (uint8_t *)swift_slowAlloc();
    uint64_t v112 = swift_slowAlloc();
    *(void *)&long long v133 = v112;
    *(_DWORD *)uint64_t v50 = 136446210;
    buf = v50;
    sub_24A1CEBC4(v44, v23, v47);
    sub_24A210DD8(&qword_26B1749F8, MEMORY[0x263F045C0]);
    uint64_t v51 = v49;
    uint64_t v52 = sub_24A2A7E30();
    unint64_t v54 = v53;
    (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v47, v51);
    *(void *)(v131 + 144) = sub_24A1C52A8(v52, v54, (uint64_t *)&v133);
    uint64_t v0 = (void *)v131;
    sub_24A2A7B70();
    swift_bridgeObjectRelease();
    sub_24A1CFCB4(v44, v23);
    sub_24A1CFCB4(v44, v23);
    char v45 = loga;
    _os_log_impl(&dword_24A19F000, loga, type, "AttestationBundle passed validation for public key: %{public}s", buf, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C5C00A0](v112, -1, -1);
    MEMORY[0x24C5C00A0](buf, -1, -1);
  }
  else
  {
    sub_24A1CFCB4(v44, v23);
    sub_24A1CFCB4(v44, v23);
  }

  v125(v123, v121);
  uint64_t v55 = v0[31];
  uint64_t v56 = v0[32];
  uint64_t v57 = v0[30];
  uint64_t v58 = *(void *)(v131 + 192);
  uint64_t v124 = sub_24A2A6BC0();
  uint64_t v126 = *(void *)(v124 - 8);
  uint64_t v59 = swift_task_alloc();
  sub_24A2A7F90();
  sub_24A2A7F90();
  uint64_t v122 = v59;
  sub_24A2A6B80();
  uint64_t v120 = swift_task_alloc();
  uint64_t v60 = type metadata accessor for Proto_AttestationBundle(0);
  sub_24A210CA4(v58 + *(int *)(v60 + 36), v57);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v56 + 48))(v57, 1, v55) == 1)
  {
    uint64_t v61 = *(void *)(v131 + 240);
    sub_24A2A6DB0();
    sub_24A1B2D10(v61, &qword_26B1749E0);
  }
  else
  {
    (*(void (**)(void, void, void))(*(void *)(v131 + 256) + 32))(*(void *)(v131 + 264), *(void *)(v131 + 240), *(void *)(v131 + 248));
  }
  uint64_t v63 = *(void *)(v131 + 256);
  uint64_t v62 = *(void *)(v131 + 264);
  uint64_t v64 = *(void *)(v131 + 248);
  sub_24A2A6D90();
  (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v62, v64);
  uint64_t v65 = swift_task_alloc();
  if (sub_24A2A6B70()) {
    uint64_t v66 = v120;
  }
  else {
    uint64_t v66 = v59;
  }
  os_log_t log = *(os_log_t *)(v126 + 16);
  ((void (*)(uint64_t, uint64_t, uint64_t))log)(v65, v66, v124);
  uint64_t v67 = swift_task_alloc();
  uint64_t v68 = *(void *)(v131 + 128);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B173100);
  uint64_t v69 = swift_task_alloc();
  *(void *)&long long v133 = v68;
  AttestationPolicyContext.proofExpiration.getter(v69);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v126 + 48))(v69, 1, v124) == 1)
  {
    sub_24A1B2D10(v69, &qword_26B173100);
    swift_task_dealloc();
    uint64_t v70 = v126;
    uint64_t v71 = v65;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v126 + 32))(v67, v69, v124);
    swift_task_dealloc();
    uint64_t v71 = v65;
    if (sub_24A2A6B70()) {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v126 + 40))(v65, v67, v124);
    }
    else {
      (*(void (**)(uint64_t, uint64_t))(v126 + 8))(v67, v124);
    }
    uint64_t v70 = v126;
  }
  swift_task_dealloc();
  uint64_t v72 = swift_task_alloc();
  sub_24A2A6BB0();
  char v73 = sub_24A2A6B60();
  uint64_t v74 = *(void (**)(uint64_t, uint64_t))(v70 + 8);
  v74(v72, v124);
  swift_task_dealloc();
  uint64_t v75 = v124;
  uint64_t v0 = (void *)v131;
  uint64_t v76 = v119;
  if (v73)
  {
    if (*(unsigned char *)(*(void *)(v131 + 224) + *(int *)(*(void *)(v131 + 296) + 72)) != 1)
    {
      type metadata accessor for CloudAttestationError(0);
      sub_24A210DD8((unint64_t *)&unk_269778BC8, (void (*)(uint64_t))type metadata accessor for CloudAttestationError);
      uint64_t v12 = (void *)swift_allocError();
      ((void (*)(uint64_t, uint64_t, uint64_t))log)(v86, v71, v124);
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      sub_24A1CFCB4(v119, v117);
      sub_24A1A5384(v6, v5);
      sub_24A1A5384(v118, v130);
      v74(v120, v124);
      v74(v122, v124);
      v74(v71, v124);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      goto LABEL_17;
    }
    (*(void (**)(void, void, void))(v131 + 368))(*(void *)(v131 + 336), *(void *)(v131 + 360), *(void *)(v131 + 312));
    uint64_t v77 = sub_24A2A7140();
    os_log_type_t v78 = sub_24A2A7B30();
    BOOL v79 = os_log_type_enabled(v77, v78);
    uint64_t v80 = *(void (**)(uint64_t, uint64_t))(v131 + 384);
    uint64_t v81 = *(void *)(v131 + 336);
    uint64_t v127 = *(void *)(v131 + 312);
    if (v79)
    {
      uint64_t v82 = (uint8_t *)swift_slowAlloc();
      uint64_t v109 = swift_slowAlloc();
      *(void *)&long long v133 = v109;
      *(_DWORD *)uint64_t v82 = 136446210;
      swift_beginAccess();
      sub_24A1CFCD0();
      uint64_t v110 = v81;
      uint64_t v75 = v124;
      uint64_t v83 = sub_24A2A7E30();
      v113[1] = sub_24A1C52A8(v83, v84, (uint64_t *)&v133);
      sub_24A2A7B70();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_24A19F000, v77, v78, "Allowing expired bundle to fail open: expiration=%{public}s", v82, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24C5C00A0](v109, -1, -1);
      id v85 = v82;
      uint64_t v76 = v119;
      uint64_t v0 = (void *)v131;
      MEMORY[0x24C5C00A0](v85, -1, -1);

      v80(v110, v127);
    }
    else
    {

      v80(v81, v127);
      uint64_t v75 = v124;
    }
  }
  uint64_t v87 = v0[29];
  uint64_t v88 = v0[24];
  unint64_t v89 = (uint64_t *)v0[21];
  uint64_t v90 = v0[22];
  *unint64_t v89 = v76;
  v89[1] = v117;
  swift_beginAccess();
  uint64_t v128 = v71;
  ((void (*)(uint64_t, uint64_t, uint64_t))log)(v90, v71, v75);
  sub_24A210D0C(v88, v87, type metadata accessor for AttestationBundle);
  v136[0] = 0;
  *(void *)&long long v132 = 0;
  sub_24A1A52B0(v6, v5);
  sub_24A1A52B0(v118, v130);
  sub_24A1CFC98(v76, v117);
  sub_24A1EDD20(v118, v130, v136, (uint64_t *)&v132, (uint64_t)&v133);
  sub_24A1A5384(v6, v5);
  sub_24A1A5384(v118, v130);
  uint64_t v91 = 0;
  uint64_t v92 = 0;
  if (v134 != 2)
  {
    int v94 = v133;
    uint64_t v93 = *((void *)&v133 + 1);
    __swift_instantiateConcreteTypeFromMangledName(&qword_26B174BA0);
    uint64_t v95 = swift_allocObject();
    *(_OWORD *)(v95 + 16) = xmmword_24A2A8AA0;
    uint64_t v96 = MEMORY[0x263F8E960];
    *(void *)(v95 + 56) = MEMORY[0x263F8E8F8];
    *(void *)(v95 + 64) = v96;
    uint64_t v97 = MEMORY[0x263F8E970];
    *(_DWORD *)(v95 + 32) = v94;
    uint64_t v98 = MEMORY[0x263F8E9C0];
    *(void *)(v95 + 96) = v97;
    *(void *)(v95 + 104) = v98;
    *(void *)(v95 + 72) = v93;
    uint64_t v91 = sub_24A2A7840();
  }
  uint64_t v107 = v92;
  uint64_t v108 = v91;
  uint64_t v99 = *(void *)(v131 + 232);
  uint64_t v100 = *(void *)(v131 + 184);
  *(void *)&long long v133 = *(void *)(v131 + 128);
  swift_bridgeObjectRetain();
  uint64_t v106 = sub_24A215DAC();
  uint64_t v102 = v101;
  sub_24A1CFCB4(v119, v117);
  sub_24A1A5384(v6, v5);
  sub_24A1A5384(v118, v130);
  swift_bridgeObjectRelease();
  v74(v120, v124);
  v74(v122, v124);
  unint64_t v103 = (int *)type metadata accessor for Validated.AttestationBundle(0);
  *(void *)(v100 + v103[7]) = 0;
  sub_24A210D74(v99, v100);
  v74(v128, v124);
  uint64_t v104 = (uint64_t *)(v100 + v103[5]);
  uint64_t *v104 = v108;
  v104[1] = v107;
  uint64_t v105 = (uint64_t *)(v100 + v103[6]);
  *uint64_t v105 = v106;
  v105[1] = v102;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v42 = *(uint64_t (**)(void))(v131 + 8);
LABEL_21:
  return v42();
}

uint64_t sub_24A20F340()
{
  uint64_t v1 = (void *)v0[50];
  uint64_t v2 = (void (*)(uint64_t, uint64_t, uint64_t))v0[46];
  uint64_t v3 = v0[45];
  uint64_t v4 = v0[41];
  uint64_t v5 = v0[39];
  swift_bridgeObjectRelease();
  v2(v4, v3, v5);
  id v6 = v1;
  id v7 = v1;
  uint64_t v8 = sub_24A2A7140();
  os_log_type_t v9 = sub_24A2A7B30();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 138543362;
    id v12 = v1;
    uint64_t v13 = _swift_stdlib_bridgeErrorToNSError();
    v0[19] = v13;
    sub_24A2A7B70();
    void *v11 = v13;

    _os_log_impl(&dword_24A19F000, v8, v9, "AttestationBundle validation failed: %{public}@", v10, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&qword_269778BB8);
    swift_arrayDestroy();
    MEMORY[0x24C5C00A0](v11, -1, -1);
    MEMORY[0x24C5C00A0](v10, -1, -1);
  }
  else
  {
  }
  uint64_t v14 = (void (*)(uint64_t, uint64_t))v0[48];
  uint64_t v15 = v0[41];
  uint64_t v16 = v0[39];

  v14(v15, v16);
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v17 = (uint64_t (*)(void))v0[1];
  return v17();
}

uint64_t CeremonyValidator.inner.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_24A210D0C(v1, a1, (uint64_t (*)(void))type metadata accessor for NodeValidator);
}

uint64_t CeremonyValidator.inner.setter(uint64_t a1)
{
  return sub_24A20F610(a1, v1);
}

uint64_t sub_24A20F610(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NodeValidator();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*CeremonyValidator.inner.modify())()
{
  return nullsub_1;
}

uint64_t CeremonyValidator.transparencyVerifier.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_24A1CA974(v1 + 8, a1);
}

uint64_t CeremonyValidator.transparencyVerifier.setter(long long *a1)
{
  uint64_t v3 = v1 + 8;
  __swift_destroy_boxed_opaque_existential_1(v3);

  return sub_24A1B97D8(a1, v3);
}

void (*CeremonyValidator.transparencyVerifier.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[10] = v1;
  sub_24A1CA974(v1 + 8, (uint64_t)v3);
  return sub_24A20F748;
}

void sub_24A20F748(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  if (a2)
  {
    uint64_t v3 = *(void *)(v2 + 80) + 8;
    sub_24A1CA974(*a1, v2 + 40);
    __swift_destroy_boxed_opaque_existential_1(v3);
    sub_24A1B97D8((long long *)(v2 + 40), v3);
    __swift_destroy_boxed_opaque_existential_1(v2);
  }
  else
  {
    uint64_t v4 = *(void *)(v2 + 80) + 8;
    __swift_destroy_boxed_opaque_existential_1(v4);
    sub_24A1B97D8((long long *)v2, v4);
  }

  free((void *)v2);
}

uint64_t CeremonyValidator.init()@<X0>(uint64_t a1@<X8>)
{
  NodeValidator.init()(a1);
  uint64_t result = type metadata accessor for NodeValidator();
  *(unsigned char *)(a1 + *(int *)(result + 40)) = 0;
  *(unsigned char *)(a1 + *(int *)(result + 68)) = 0;
  return result;
}

uint64_t CeremonyValidator.validate(bundle:nonce:signedBy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v8[8] = a7;
  v8[9] = v7;
  v8[6] = a5;
  v8[7] = a6;
  v8[4] = a3;
  v8[5] = a4;
  v8[2] = a1;
  void v8[3] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_269778F38);
  v8[10] = swift_task_alloc();
  v8[11] = type metadata accessor for NodeValidator();
  v8[12] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_24A20F8EC, 0, 0);
}

uint64_t sub_24A20F8EC()
{
  uint64_t v2 = v0[11];
  uint64_t v1 = v0[12];
  uint64_t v3 = v0[10];
  uint64_t v4 = (void *)v0[8];
  sub_24A210D0C(v0[9], v1, (uint64_t (*)(void))type metadata accessor for NodeValidator);
  uint64_t v5 = *(int *)(v2 + 76);
  id v6 = *(void **)(v1 + v5);
  id v7 = v4;

  *(void *)(v1 + v5) = v4;
  NodeValidator.defaultPolicy.getter(v3);
  uint64_t v17 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_269778F40
                                                                                              + dword_269778F40);
  uint64_t v8 = (void *)swift_task_alloc();
  v0[13] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_24A20FA00;
  uint64_t v9 = v0[10];
  uint64_t v10 = v0[6];
  uint64_t v11 = v0[7];
  uint64_t v12 = v0[4];
  uint64_t v13 = v0[5];
  uint64_t v14 = v0[2];
  uint64_t v15 = v0[3];
  return v17(v14, v15, v12, v13, v10, v11, v9);
}

uint64_t sub_24A20FA00()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 112) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = sub_24A20FBA0;
  }
  else
  {
    sub_24A1B2D10(*(void *)(v2 + 80), &qword_269778F38);
    uint64_t v3 = sub_24A20FB24;
  }
  return MEMORY[0x270FA2498](v3, 0, 0);
}

uint64_t sub_24A20FB24()
{
  sub_24A20FC2C(*(void *)(v0 + 96));
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_24A20FBA0()
{
  uint64_t v1 = v0[12];
  sub_24A1B2D10(v0[10], &qword_269778F38);
  sub_24A20FC2C(v1);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t sub_24A20FC2C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NodeValidator();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t CeremonyValidator.validate<A>(bundle:nonce:policy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v17 = (void *)swift_task_alloc();
  *(void *)(v8 + 16) = v17;
  void *v17 = v8;
  v17[1] = sub_24A1C50FC;
  return NodeValidator.validate<A>(bundle:nonce:policy:)(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_24A20FD8C(uint64_t a1)
{
  return MEMORY[0x270FA03F0](a1, &opaque type descriptor for <<opaque return type of CeremonyValidator.defaultPolicy>>, 1);
}

uint64_t sub_24A20FDA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v17 = (void *)swift_task_alloc();
  *(void *)(v8 + 16) = v17;
  void *v17 = v8;
  v17[1] = sub_24A1DA244;
  return CeremonyValidator.validate<A>(bundle:nonce:policy:)(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_24A20FEAC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_24A1CA974(a1 + 8, a2);
}

uint64_t sub_24A20FEB8(uint64_t a1, uint64_t a2)
{
  sub_24A1CA974(a1, (uint64_t)v4);
  a2 += 8;
  __swift_destroy_boxed_opaque_existential_1(a2);
  return sub_24A1B97D8(v4, a2);
}

uint64_t initializeBufferWithCopyOfBuffer for CeremonyValidator(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for NodeValidator();
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *(void *)a1 = *a2;
    a1 = v15 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    id v6 = (int *)v4;
    *(unsigned char *)a1 = *(unsigned char *)a2;
    long long v7 = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 32) = v7;
    (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 8, (uint64_t)(a2 + 1));
    *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
    *(void *)(a1 + 64) = a2[8];
    uint64_t v8 = v6[8];
    uint64_t v9 = (void *)(a1 + v8);
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = sub_24A2A6BC0();
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    if (v13(v10, 1, v11))
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B173100);
      memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    *(unsigned char *)(a1 + v6[9]) = *((unsigned char *)a2 + v6[9]);
    *(unsigned char *)(a1 + v6[10]) = *((unsigned char *)a2 + v6[10]);
    *(unsigned char *)(a1 + v6[11]) = *((unsigned char *)a2 + v6[11]);
    *(unsigned char *)(a1 + v6[12]) = *((unsigned char *)a2 + v6[12]);
    *(unsigned char *)(a1 + v6[13]) = *((unsigned char *)a2 + v6[13]);
    *(unsigned char *)(a1 + v6[14]) = *((unsigned char *)a2 + v6[14]);
    *(unsigned char *)(a1 + v6[15]) = *((unsigned char *)a2 + v6[15]);
    *(unsigned char *)(a1 + v6[16]) = *((unsigned char *)a2 + v6[16]);
    *(unsigned char *)(a1 + v6[17]) = *((unsigned char *)a2 + v6[17]);
    *(unsigned char *)(a1 + v6[18]) = *((unsigned char *)a2 + v6[18]);
    uint64_t v16 = v6[19];
    uint64_t v17 = *(void **)((char *)a2 + v16);
    *(void *)(a1 + v16) = v17;
    id v18 = v17;
  }
  return a1;
}

void destroy for CeremonyValidator(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  swift_bridgeObjectRelease();
  uint64_t v2 = type metadata accessor for NodeValidator();
  uint64_t v3 = a1 + *(int *)(v2 + 32);
  uint64_t v4 = sub_24A2A6BC0();
  uint64_t v5 = *(void *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  }
  id v6 = *(void **)(a1 + *(int *)(v2 + 76));
}

uint64_t initializeWithCopy for CeremonyValidator(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v4;
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 8, a2 + 8);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  uint64_t v5 = (int *)type metadata accessor for NodeValidator();
  uint64_t v6 = v5[8];
  long long v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = sub_24A2A6BC0();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48);
  swift_bridgeObjectRetain();
  if (v11(v8, 1, v9))
  {
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B173100);
    memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  *(unsigned char *)(a1 + v5[9]) = *(unsigned char *)(a2 + v5[9]);
  *(unsigned char *)(a1 + v5[10]) = *(unsigned char *)(a2 + v5[10]);
  *(unsigned char *)(a1 + v5[11]) = *(unsigned char *)(a2 + v5[11]);
  *(unsigned char *)(a1 + v5[12]) = *(unsigned char *)(a2 + v5[12]);
  *(unsigned char *)(a1 + v5[13]) = *(unsigned char *)(a2 + v5[13]);
  *(unsigned char *)(a1 + v5[14]) = *(unsigned char *)(a2 + v5[14]);
  *(unsigned char *)(a1 + v5[15]) = *(unsigned char *)(a2 + v5[15]);
  *(unsigned char *)(a1 + v5[16]) = *(unsigned char *)(a2 + v5[16]);
  *(unsigned char *)(a1 + v5[17]) = *(unsigned char *)(a2 + v5[17]);
  *(unsigned char *)(a1 + v5[18]) = *(unsigned char *)(a2 + v5[18]);
  uint64_t v13 = v5[19];
  uint64_t v14 = *(void **)(a2 + v13);
  *(void *)(a1 + v13) = v14;
  id v15 = v14;
  return a1;
}

uint64_t assignWithCopy for CeremonyValidator(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 8), (uint64_t *)(a2 + 8));
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  long long v4 = (int *)type metadata accessor for NodeValidator();
  uint64_t v5 = v4[8];
  uint64_t v6 = (void *)(a1 + v5);
  long long v7 = (void *)(a2 + v5);
  uint64_t v8 = sub_24A2A6BC0();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v9 + 48);
  int v11 = v10(v6, 1, v8);
  int v12 = v10(v7, 1, v8);
  if (!v11)
  {
    if (!v12)
    {
      (*(void (**)(void *, void *, uint64_t))(v9 + 24))(v6, v7, v8);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v9 + 8))(v6, v8);
    goto LABEL_6;
  }
  if (v12)
  {
LABEL_6:
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B173100);
    memcpy(v6, v7, *(void *)(*(void *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v9 + 16))(v6, v7, v8);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
LABEL_7:
  *(unsigned char *)(a1 + v4[9]) = *(unsigned char *)(a2 + v4[9]);
  *(unsigned char *)(a1 + v4[10]) = *(unsigned char *)(a2 + v4[10]);
  *(unsigned char *)(a1 + v4[11]) = *(unsigned char *)(a2 + v4[11]);
  *(unsigned char *)(a1 + v4[12]) = *(unsigned char *)(a2 + v4[12]);
  *(unsigned char *)(a1 + v4[13]) = *(unsigned char *)(a2 + v4[13]);
  *(unsigned char *)(a1 + v4[14]) = *(unsigned char *)(a2 + v4[14]);
  *(unsigned char *)(a1 + v4[15]) = *(unsigned char *)(a2 + v4[15]);
  *(unsigned char *)(a1 + v4[16]) = *(unsigned char *)(a2 + v4[16]);
  *(unsigned char *)(a1 + v4[17]) = *(unsigned char *)(a2 + v4[17]);
  *(unsigned char *)(a1 + v4[18]) = *(unsigned char *)(a2 + v4[18]);
  uint64_t v14 = v4[19];
  id v15 = *(void **)(a1 + v14);
  uint64_t v16 = *(void **)(a2 + v14);
  *(void *)(a1 + v14) = v16;
  id v17 = v16;

  return a1;
}

uint64_t initializeWithTake for CeremonyValidator(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  long long v4 = (int *)type metadata accessor for NodeValidator();
  uint64_t v5 = v4[8];
  uint64_t v6 = (void *)(a1 + v5);
  long long v7 = (const void *)(a2 + v5);
  uint64_t v8 = sub_24A2A6BC0();
  uint64_t v9 = *(void *)(v8 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B173100);
    memcpy(v6, v7, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 32))(v6, v7, v8);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  }
  *(unsigned char *)(a1 + v4[9]) = *(unsigned char *)(a2 + v4[9]);
  *(unsigned char *)(a1 + v4[10]) = *(unsigned char *)(a2 + v4[10]);
  *(unsigned char *)(a1 + v4[11]) = *(unsigned char *)(a2 + v4[11]);
  *(unsigned char *)(a1 + v4[12]) = *(unsigned char *)(a2 + v4[12]);
  *(unsigned char *)(a1 + v4[13]) = *(unsigned char *)(a2 + v4[13]);
  *(unsigned char *)(a1 + v4[14]) = *(unsigned char *)(a2 + v4[14]);
  *(unsigned char *)(a1 + v4[15]) = *(unsigned char *)(a2 + v4[15]);
  *(unsigned char *)(a1 + v4[16]) = *(unsigned char *)(a2 + v4[16]);
  *(unsigned char *)(a1 + v4[17]) = *(unsigned char *)(a2 + v4[17]);
  *(unsigned char *)(a1 + v4[18]) = *(unsigned char *)(a2 + v4[18]);
  *(void *)(a1 + v4[19]) = *(void *)(a2 + v4[19]);
  return a1;
}

uint64_t assignWithTake for CeremonyValidator(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRelease();
  long long v4 = (int *)type metadata accessor for NodeValidator();
  uint64_t v5 = v4[8];
  uint64_t v6 = (void *)(a1 + v5);
  long long v7 = (void *)(a2 + v5);
  uint64_t v8 = sub_24A2A6BC0();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v9 + 48);
  int v11 = v10(v6, 1, v8);
  int v12 = v10(v7, 1, v8);
  if (!v11)
  {
    if (!v12)
    {
      (*(void (**)(void *, void *, uint64_t))(v9 + 40))(v6, v7, v8);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v9 + 8))(v6, v8);
    goto LABEL_6;
  }
  if (v12)
  {
LABEL_6:
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B173100);
    memcpy(v6, v7, *(void *)(*(void *)(v13 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v9 + 32))(v6, v7, v8);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
LABEL_7:
  *(unsigned char *)(a1 + v4[9]) = *(unsigned char *)(a2 + v4[9]);
  *(unsigned char *)(a1 + v4[10]) = *(unsigned char *)(a2 + v4[10]);
  *(unsigned char *)(a1 + v4[11]) = *(unsigned char *)(a2 + v4[11]);
  *(unsigned char *)(a1 + v4[12]) = *(unsigned char *)(a2 + v4[12]);
  *(unsigned char *)(a1 + v4[13]) = *(unsigned char *)(a2 + v4[13]);
  *(unsigned char *)(a1 + v4[14]) = *(unsigned char *)(a2 + v4[14]);
  *(unsigned char *)(a1 + v4[15]) = *(unsigned char *)(a2 + v4[15]);
  *(unsigned char *)(a1 + v4[16]) = *(unsigned char *)(a2 + v4[16]);
  *(unsigned char *)(a1 + v4[17]) = *(unsigned char *)(a2 + v4[17]);
  *(unsigned char *)(a1 + v4[18]) = *(unsigned char *)(a2 + v4[18]);
  uint64_t v14 = v4[19];
  id v15 = *(void **)(a1 + v14);
  *(void *)(a1 + v14) = *(void *)(a2 + v14);

  return a1;
}

uint64_t getEnumTagSinglePayload for CeremonyValidator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24A210AD0);
}

uint64_t sub_24A210AD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NodeValidator();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for CeremonyValidator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24A210B50);
}

uint64_t sub_24A210B50(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NodeValidator();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for CeremonyValidator()
{
  uint64_t result = qword_269778F58;
  if (!qword_269778F58) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_24A210C0C()
{
  uint64_t result = type metadata accessor for NodeValidator();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_UNKNOWN **sub_24A210C98()
{
  return &protocol witness table for PolicyBuilder.TuplePolicy<Pack{repeat A}>;
}

uint64_t sub_24A210CA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_24A210D0C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_24A210D74(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AttestationBundle(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_24A210DD8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t KeyOptionsPolicy.init(mustContain:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_24A211064(a1, a2);
}

uint64_t type metadata accessor for KeyOptionsPolicy.Assertion(uint64_t a1)
{
  return sub_24A1AE704(a1, (uint64_t *)&unk_26B174648);
}

uint64_t type metadata accessor for KeyOptionsPolicy(uint64_t a1)
{
  return sub_24A1AE704(a1, (uint64_t *)&unk_26B174658);
}

uint64_t sub_24A210E68()
{
  uint64_t v0 = sub_24A2A7160();
  __swift_allocate_value_buffer(v0, qword_26B176940);
  __swift_project_value_buffer(v0, (uint64_t)qword_26B176940);
  return sub_24A2A7150();
}

uint64_t KeyOptionsPolicy.init(_:mustContain:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_24A210F68(a1, a2, a3);
}

uint64_t sub_24A210EF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174258);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t KeyOptionsPolicy.init(_:mustEqual:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_24A210F68(a1, a2, a3);
}

uint64_t sub_24A210F68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_24A2A6C70();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a3, a2, v6);
  type metadata accessor for KeyOptionsPolicy.Assertion(0);
  swift_storeEnumTagMultiPayload();
  uint64_t v7 = a3 + *(int *)(type metadata accessor for KeyOptionsPolicy(0) + 20);
  sub_24A210EF8(a1, v7);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174258);
  uint64_t v9 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56);

  return v9(v7, 0, 1, v8);
}

uint64_t KeyOptionsPolicy.init(mustEqual:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_24A211064(a1, a2);
}

uint64_t sub_24A211064@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_24A2A6C70();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  type metadata accessor for KeyOptionsPolicy.Assertion(0);
  swift_storeEnumTagMultiPayload();
  uint64_t v5 = a2 + *(int *)(type metadata accessor for KeyOptionsPolicy(0) + 20);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174258);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(v5, 1, 1, v6);
}

uint64_t KeyOptionsPolicy.evaluate(bundle:context:)(uint64_t a1, uint64_t a2)
{
  long long v3[4] = a2;
  v3[5] = v2;
  v3[6] = type metadata accessor for KeyOptionsPolicy.Assertion(0);
  v3[7] = swift_task_alloc();
  type metadata accessor for KeyOptionsPolicy.OptionsLoader(0);
  v3[8] = swift_task_alloc();
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174258);
  v3[9] = v4;
  v3[10] = *(void *)(v4 - 8);
  v3[11] = swift_task_alloc();
  uint64_t v5 = sub_24A2A6C70();
  v3[12] = v5;
  v3[13] = *(void *)(v5 - 8);
  v3[14] = swift_task_alloc();
  v3[15] = swift_task_alloc();
  v3[16] = swift_task_alloc();
  v3[17] = swift_task_alloc();
  v3[18] = swift_task_alloc();
  v3[19] = swift_task_alloc();
  v3[20] = swift_task_alloc();
  v3[21] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_24A21131C, 0, 0);
}

uint64_t sub_24A21131C()
{
  uint64_t v63 = v0;
  uint64_t v1 = *(void *)(v0 + 72);
  uint64_t v2 = *(void *)(v0 + 80);
  uint64_t v3 = *(void *)(v0 + 64);
  uint64_t v4 = *(void *)(v0 + 40);
  uint64_t v5 = type metadata accessor for KeyOptionsPolicy(0);
  sub_24A211BD4(v4 + *(int *)(v5 + 20), v3, type metadata accessor for KeyOptionsPolicy.OptionsLoader);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    uint64_t v59 = **(void **)(v0 + 32);
    double v6 = AttestationPolicyContext.validatedAttestation.getter((uint64_t)&v55);
    unint64_t v7 = v56;
    if (v56 >> 60 == 15)
    {
      (*(void (**)(void, uint64_t, uint64_t, void, double))(*(void *)(v0 + 104) + 56))(*(void *)(v0 + 88), 1, 1, *(void *)(v0 + 96), v6);
    }
    else
    {
      uint64_t v8 = *(void *)(v0 + 88);
      uint64_t v10 = v57;
      unint64_t v9 = v58;
      uint64_t v11 = v55;
      uint64_t v59 = v55;
      unint64_t v60 = v56;
      uint64_t v61 = v57;
      unint64_t v62 = v58;
      SEP.Attestation.keyOptions.getter(v8);
      sub_24A211D18(v11, v7, v10, v9);
    }
  }
  else
  {
    sub_24A210EF8(*(void *)(v0 + 64), *(void *)(v0 + 88));
  }
  uint64_t v12 = *(void *)(v0 + 96);
  uint64_t v13 = *(void *)(v0 + 104);
  uint64_t v14 = *(void *)(v0 + 88);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v14, 1, v12) == 1)
  {
    sub_24A211B54(v14);
    type metadata accessor for KeyOptionsPolicy.Error(0);
    sub_24A211C3C(&qword_269778F70, (void (*)(uint64_t))type metadata accessor for KeyOptionsPolicy.Error);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
LABEL_20:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    int v27 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_21;
  }
  uint64_t v15 = *(void *)(v0 + 56);
  uint64_t v16 = *(void *)(v0 + 40);
  id v17 = *(void (**)(void, uint64_t, uint64_t))(v13 + 32);
  v17(*(void *)(v0 + 168), v14, v12);
  sub_24A211BD4(v16, v15, type metadata accessor for KeyOptionsPolicy.Assertion);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v19 = *(void *)(v0 + 56);
  if (EnumCaseMultiPayload == 1)
  {
    v17(*(void *)(v0 + 112), v19, *(void *)(v0 + 96));
    sub_24A211C3C(&qword_269778F78, MEMORY[0x263F276E0]);
    sub_24A2A79D0();
    sub_24A2A79D0();
    if (*(void *)(v0 + 16) != *(void *)(v0 + 24))
    {
      uint64_t v28 = *(void *)(v0 + 168);
      uint64_t v29 = *(void *)(v0 + 104);
      uint64_t v51 = *(void *)(v0 + 112);
      uint64_t v30 = *(void *)(v0 + 96);
      type metadata accessor for KeyOptionsPolicy.Error(0);
      sub_24A211C3C(&qword_269778F70, (void (*)(uint64_t))type metadata accessor for KeyOptionsPolicy.Error);
      swift_allocError();
      uint64_t v32 = v31;
      uint64_t v33 = v31 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_269778F80) + 48);
      os_log_type_t v34 = *(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 16);
      v34(v32, v28, v30);
      v34(v33, v51, v30);
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      uint64_t v35 = *(void (**)(uint64_t, uint64_t))(v29 + 8);
      v35(v51, v30);
      v35(v28, v30);
      goto LABEL_20;
    }
    uint64_t v20 = *(void *)(v0 + 112);
  }
  else
  {
    v17(*(void *)(v0 + 160), v19, *(void *)(v0 + 96));
    sub_24A211C3C((unint64_t *)&qword_26B174250, MEMORY[0x263F276E0]);
    if ((sub_24A2A7BF0() & 1) == 0)
    {
      uint64_t v36 = *(void *)(v0 + 160);
      uint64_t v37 = *(void *)(v0 + 168);
      uint64_t v38 = *(void *)(v0 + 128);
      uint64_t v39 = *(void *)(v0 + 136);
      uint64_t v40 = *(void *)(v0 + 120);
      uint64_t v41 = *(void *)(v0 + 96);
      uint64_t v49 = *(void *)(v0 + 104);
      uint64_t v50 = v36;
      uint64_t v52 = *(void *)(v0 + 152);
      unint64_t v54 = *(void (**)(void))(v49 + 16);
      v54();
      ((void (*)(uint64_t, uint64_t, uint64_t))v54)(v38, v36, v41);
      uint64_t v42 = v37;
      uint64_t v48 = v37;
      ((void (*)(uint64_t, uint64_t, uint64_t))v54)(v40, v37, v41);
      sub_24A2A7BE0();
      sub_24A2A7BD0();
      uint64_t v43 = *(void (**)(uint64_t, uint64_t))(v49 + 8);
      v43(v39, v41);
      type metadata accessor for KeyOptionsPolicy.Error(0);
      sub_24A211C3C(&qword_269778F70, (void (*)(uint64_t))type metadata accessor for KeyOptionsPolicy.Error);
      swift_allocError();
      uint64_t v45 = v44;
      uint64_t v46 = v44 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_269778F88) + 48);
      ((void (*)(uint64_t, uint64_t, uint64_t))v54)(v45, v42, v41);
      ((void (*)(uint64_t, uint64_t, uint64_t))v54)(v46, v52, v41);
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      v43(v52, v41);
      v43(v50, v41);
      v43(v48, v41);
      goto LABEL_20;
    }
    uint64_t v20 = *(void *)(v0 + 160);
  }
  unint64_t v53 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 104) + 8);
  v53(v20, *(void *)(v0 + 96));
  if (qword_26B174640 != -1) {
    swift_once();
  }
  uint64_t v21 = sub_24A2A7160();
  __swift_project_value_buffer(v21, (uint64_t)qword_26B176940);
  char v22 = sub_24A2A7140();
  os_log_type_t v23 = sub_24A2A7B40();
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v24 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v24 = 0;
    _os_log_impl(&dword_24A19F000, v22, v23, "AttestationBundle passed KeyOptionsPolicy: attested key has expected flags set", v24, 2u);
    MEMORY[0x24C5C00A0](v24, -1, -1);
  }
  uint64_t v25 = *(void *)(v0 + 168);
  uint64_t v26 = *(void *)(v0 + 96);

  v53(v25, v26);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  int v27 = *(uint64_t (**)(void))(v0 + 8);
LABEL_21:
  return v27();
}

uint64_t type metadata accessor for KeyOptionsPolicy.OptionsLoader(uint64_t a1)
{
  return sub_24A1AE704(a1, (uint64_t *)&unk_26B174630);
}

uint64_t sub_24A211B54(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174258);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for KeyOptionsPolicy.Error(uint64_t a1)
{
  return sub_24A1AE704(a1, (uint64_t *)&unk_269778F98);
}

uint64_t sub_24A211BD4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_24A211C3C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_24A211C84(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_24A1C50FC;
  return KeyOptionsPolicy.evaluate(bundle:context:)((uint64_t)v4, a2);
}

uint64_t sub_24A211D18(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a2 >> 60 != 15)
  {
    sub_24A1A5384(result, a2);
    return sub_24A1A5384(a3, a4);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for KeyOptionsPolicy(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    type metadata accessor for KeyOptionsPolicy.Assertion(0);
    swift_getEnumCaseMultiPayload();
    uint64_t v7 = sub_24A2A6C70();
    uint64_t v8 = *(void *)(v7 - 8);
    unint64_t v9 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16);
    v9(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
    uint64_t v10 = *(int *)(a3 + 20);
    uint64_t v11 = (char *)a1 + v10;
    uint64_t v12 = (char *)a2 + v10;
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174258);
    uint64_t v14 = *(void *)(v13 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
    {
      uint64_t v15 = type metadata accessor for KeyOptionsPolicy.OptionsLoader(0);
      memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
    }
    else
    {
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v12, 1, v7))
      {
        memcpy(v11, v12, *(void *)(v14 + 64));
      }
      else
      {
        v9((uint64_t *)v11, (uint64_t *)v12, v7);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v11, 0, 1, v7);
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
    }
  }
  return a1;
}

uint64_t destroy for KeyOptionsPolicy(uint64_t a1, uint64_t a2)
{
  type metadata accessor for KeyOptionsPolicy.Assertion(0);
  uint64_t v4 = sub_24A2A6C70();
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t v9 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v9(a1, v4);
  uint64_t v6 = a1 + *(int *)(a2 + 20);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174258);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7);
  if (!result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v6, 1, v4);
    if (!result)
    {
      return ((uint64_t (*)(uint64_t, uint64_t))v9)(v6, v4);
    }
  }
  return result;
}

char *initializeWithCopy for KeyOptionsPolicy(char *a1, char *a2, uint64_t a3)
{
  type metadata accessor for KeyOptionsPolicy.Assertion(0);
  swift_getEnumCaseMultiPayload();
  uint64_t v6 = sub_24A2A6C70();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 16);
  v8(a1, a2, v6);
  swift_storeEnumTagMultiPayload();
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174258);
  uint64_t v13 = *(void *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
  {
    uint64_t v14 = type metadata accessor for KeyOptionsPolicy.OptionsLoader(0);
    memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v11, 1, v6))
    {
      memcpy(v10, v11, *(void *)(v13 + 64));
    }
    else
    {
      v8(v10, v11, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v6);
    }
    (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  return a1;
}

uint64_t assignWithCopy for KeyOptionsPolicy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_24A213500(a1, type metadata accessor for KeyOptionsPolicy.Assertion);
    type metadata accessor for KeyOptionsPolicy.Assertion(0);
    swift_getEnumCaseMultiPayload();
    uint64_t v6 = sub_24A2A6C70();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174258);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      uint64_t v18 = sub_24A2A6C70();
      uint64_t v19 = *(void *)(v18 - 8);
      uint64_t v20 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v19 + 48);
      int v21 = v20(v8, 1, v18);
      int v22 = v20(v9, 1, v18);
      if (v21)
      {
        if (!v22)
        {
          (*(void (**)(void *, void *, uint64_t))(v19 + 16))(v8, v9, v18);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(v8, 0, 1, v18);
          return a1;
        }
      }
      else
      {
        if (!v22)
        {
          (*(void (**)(void *, void *, uint64_t))(v19 + 24))(v8, v9, v18);
          return a1;
        }
        (*(void (**)(void *, uint64_t))(v19 + 8))(v8, v18);
      }
      size_t v17 = *(void *)(v11 + 64);
      goto LABEL_10;
    }
    sub_24A211B54((uint64_t)v8);
LABEL_9:
    size_t v17 = *(void *)(*(void *)(type metadata accessor for KeyOptionsPolicy.OptionsLoader(0) - 8) + 64);
LABEL_10:
    memcpy(v8, v9, v17);
    return a1;
  }
  if (v14) {
    goto LABEL_9;
  }
  uint64_t v15 = sub_24A2A6C70();
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v16 + 48))(v9, 1, v15))
  {
    memcpy(v8, v9, *(void *)(v11 + 64));
  }
  else
  {
    (*(void (**)(void *, void *, uint64_t))(v16 + 16))(v8, v9, v15);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v8, 0, 1, v15);
  }
  (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  return a1;
}

char *initializeWithTake for KeyOptionsPolicy(char *a1, char *a2, uint64_t a3)
{
  type metadata accessor for KeyOptionsPolicy.Assertion(0);
  swift_getEnumCaseMultiPayload();
  uint64_t v6 = sub_24A2A6C70();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 32);
  v8(a1, a2, v6);
  swift_storeEnumTagMultiPayload();
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174258);
  uint64_t v13 = *(void *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
  {
    uint64_t v14 = type metadata accessor for KeyOptionsPolicy.OptionsLoader(0);
    memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v11, 1, v6))
    {
      memcpy(v10, v11, *(void *)(v13 + 64));
    }
    else
    {
      v8(v10, v11, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v6);
    }
    (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  return a1;
}

uint64_t assignWithTake for KeyOptionsPolicy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_24A213500(a1, type metadata accessor for KeyOptionsPolicy.Assertion);
    type metadata accessor for KeyOptionsPolicy.Assertion(0);
    swift_getEnumCaseMultiPayload();
    uint64_t v6 = sub_24A2A6C70();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174258);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      uint64_t v18 = sub_24A2A6C70();
      uint64_t v19 = *(void *)(v18 - 8);
      uint64_t v20 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v19 + 48);
      int v21 = v20(v8, 1, v18);
      int v22 = v20(v9, 1, v18);
      if (v21)
      {
        if (!v22)
        {
          (*(void (**)(void *, void *, uint64_t))(v19 + 32))(v8, v9, v18);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(v8, 0, 1, v18);
          return a1;
        }
      }
      else
      {
        if (!v22)
        {
          (*(void (**)(void *, void *, uint64_t))(v19 + 40))(v8, v9, v18);
          return a1;
        }
        (*(void (**)(void *, uint64_t))(v19 + 8))(v8, v18);
      }
      size_t v17 = *(void *)(v11 + 64);
      goto LABEL_10;
    }
    sub_24A211B54((uint64_t)v8);
LABEL_9:
    size_t v17 = *(void *)(*(void *)(type metadata accessor for KeyOptionsPolicy.OptionsLoader(0) - 8) + 64);
LABEL_10:
    memcpy(v8, v9, v17);
    return a1;
  }
  if (v14) {
    goto LABEL_9;
  }
  uint64_t v15 = sub_24A2A6C70();
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v16 + 48))(v9, 1, v15))
  {
    memcpy(v8, v9, *(void *)(v11 + 64));
  }
  else
  {
    (*(void (**)(void *, void *, uint64_t))(v16 + 32))(v8, v9, v15);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v8, 0, 1, v15);
  }
  (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for KeyOptionsPolicy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24A212C6C);
}

uint64_t sub_24A212C6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for KeyOptionsPolicy.Assertion(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = type metadata accessor for KeyOptionsPolicy.OptionsLoader(0);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 20);
    return v11(v13, a2, v12);
  }
}

uint64_t storeEnumTagSinglePayload for KeyOptionsPolicy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24A212D78);
}

uint64_t sub_24A212D78(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for KeyOptionsPolicy.Assertion(0);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, v8);
  }
  else
  {
    uint64_t v12 = type metadata accessor for KeyOptionsPolicy.OptionsLoader(0);
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a4 + 20);
    return v13(v15, a2, a2, v14);
  }
}

uint64_t sub_24A212E7C()
{
  uint64_t result = type metadata accessor for KeyOptionsPolicy.Assertion(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for KeyOptionsPolicy.OptionsLoader(319);
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for KeyOptionsPolicy.Error(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v12 = sub_24A2A6C70();
      uint64_t v13 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v12 - 8) + 16);
      v13(a1, a2, v12);
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_269778F80);
      v13((uint64_t *)((char *)a1 + *(int *)(v14 + 48)), (uint64_t *)((char *)a2 + *(int *)(v14 + 48)), v12);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      uint64_t v8 = sub_24A2A6C70();
      uint64_t v9 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v8 - 8) + 16);
      v9(a1, a2, v8);
      uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_269778F88);
      v9((uint64_t *)((char *)a1 + *(int *)(v10 + 48)), (uint64_t *)((char *)a2 + *(int *)(v10 + 48)), v8);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t destroy for KeyOptionsPolicy.Error(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 1)
  {
    uint64_t v3 = sub_24A2A6C70();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
    ((void (*)(void *__return_ptr, uint64_t, uint64_t))v6)((void *)(v3 - 8), a1, v3);
    uint64_t v4 = &qword_269778F80;
  }
  else
  {
    if (result) {
      return result;
    }
    uint64_t v3 = sub_24A2A6C70();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
    ((void (*)(void *__return_ptr, uint64_t, uint64_t))v6)((void *)(v3 - 8), a1, v3);
    uint64_t v4 = &qword_269778F88;
  }
  uint64_t v5 = a1 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(v4) + 48);

  return v6(v5, v3);
}

char *initializeWithCopy for KeyOptionsPolicy.Error(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v10 = sub_24A2A6C70();
    uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
    v11(a1, a2, v10);
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_269778F80);
    v11(&a1[*(int *)(v12 + 48)], &a2[*(int *)(v12 + 48)], v10);
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v7 = sub_24A2A6C70();
    uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_269778F88);
    v8(&a1[*(int *)(v9 + 48)], &a2[*(int *)(v9 + 48)], v7);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *assignWithCopy for KeyOptionsPolicy.Error(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_24A213500((uint64_t)a1, type metadata accessor for KeyOptionsPolicy.Error);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v10 = sub_24A2A6C70();
      uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
      v11(a1, a2, v10);
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_269778F80);
      v11(&a1[*(int *)(v12 + 48)], &a2[*(int *)(v12 + 48)], v10);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v7 = sub_24A2A6C70();
      uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
      v8(a1, a2, v7);
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_269778F88);
      v8(&a1[*(int *)(v9 + 48)], &a2[*(int *)(v9 + 48)], v7);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t sub_24A213500(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

char *initializeWithTake for KeyOptionsPolicy.Error(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v10 = sub_24A2A6C70();
    uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32);
    v11(a1, a2, v10);
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_269778F80);
    v11(&a1[*(int *)(v12 + 48)], &a2[*(int *)(v12 + 48)], v10);
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v7 = sub_24A2A6C70();
    uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32);
    v8(a1, a2, v7);
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_269778F88);
    v8(&a1[*(int *)(v9 + 48)], &a2[*(int *)(v9 + 48)], v7);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *assignWithTake for KeyOptionsPolicy.Error(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_24A213500((uint64_t)a1, type metadata accessor for KeyOptionsPolicy.Error);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v10 = sub_24A2A6C70();
      uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32);
      v11(a1, a2, v10);
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_269778F80);
      v11(&a1[*(int *)(v12 + 48)], &a2[*(int *)(v12 + 48)], v10);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v7 = sub_24A2A6C70();
      uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32);
      v8(a1, a2, v7);
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_269778F88);
      v8(&a1[*(int *)(v9 + 48)], &a2[*(int *)(v9 + 48)], v7);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t sub_24A213864()
{
  uint64_t result = sub_24A2A6C70();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    uint64_t v4 = &v3;
    swift_getTupleTypeLayout2();
    uint64_t v5 = &v2;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t *sub_24A213920(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174258);
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      uint64_t v10 = sub_24A2A6C70();
      uint64_t v11 = *(void *)(v10 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v11 + 48))(a2, 1, v10))
      {
        memcpy(a1, a2, *(void *)(v8 + 64));
      }
      else
      {
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v11 + 16))(a1, a2, v10);
        (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v11 + 56))(a1, 0, 1, v10);
      }
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t sub_24A213B14(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174258);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(a1, 1, v2);
  if (!result)
  {
    uint64_t v4 = sub_24A2A6C70();
    uint64_t v6 = *(void *)(v4 - 8);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v4);
    if (!result)
    {
      int v5 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8);
      return v5(a1, v4);
    }
  }
  return result;
}

void *sub_24A213C28(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174258);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v8 = sub_24A2A6C70();
    uint64_t v9 = *(void *)(v8 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48))(a2, 1, v8))
    {
      memcpy(a1, a2, *(void *)(v7 + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v9 + 16))(a1, a2, v8);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(a1, 0, 1, v8);
    }
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  return a1;
}

void *sub_24A213DE0(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174258);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      uint64_t v14 = sub_24A2A6C70();
      uint64_t v15 = *(void *)(v14 - 8);
      uint64_t v16 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v15 + 48);
      int v17 = v16(a1, 1, v14);
      int v18 = v16(a2, 1, v14);
      if (v17)
      {
        if (!v18)
        {
          (*(void (**)(void *, void *, uint64_t))(v15 + 16))(a1, a2, v14);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(a1, 0, 1, v14);
          return a1;
        }
      }
      else
      {
        if (!v18)
        {
          (*(void (**)(void *, void *, uint64_t))(v15 + 24))(a1, a2, v14);
          return a1;
        }
        (*(void (**)(void *, uint64_t))(v15 + 8))(a1, v14);
      }
      size_t v13 = *(void *)(v7 + 64);
      goto LABEL_8;
    }
    sub_24A211B54((uint64_t)a1);
LABEL_7:
    size_t v13 = *(void *)(*(void *)(a3 - 8) + 64);
LABEL_8:
    memcpy(a1, a2, v13);
    return a1;
  }
  if (v10) {
    goto LABEL_7;
  }
  uint64_t v11 = sub_24A2A6C70();
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v12 + 48))(a2, 1, v11))
  {
    memcpy(a1, a2, *(void *)(v7 + 64));
  }
  else
  {
    (*(void (**)(void *, void *, uint64_t))(v12 + 16))(a1, a2, v11);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(a1, 0, 1, v11);
  }
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  return a1;
}

void *sub_24A2140E4(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174258);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v8 = sub_24A2A6C70();
    uint64_t v9 = *(void *)(v8 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48))(a2, 1, v8))
    {
      memcpy(a1, a2, *(void *)(v7 + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v9 + 32))(a1, a2, v8);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(a1, 0, 1, v8);
    }
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  return a1;
}

void *sub_24A21429C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174258);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      uint64_t v14 = sub_24A2A6C70();
      uint64_t v15 = *(void *)(v14 - 8);
      uint64_t v16 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v15 + 48);
      int v17 = v16(a1, 1, v14);
      int v18 = v16(a2, 1, v14);
      if (v17)
      {
        if (!v18)
        {
          (*(void (**)(void *, void *, uint64_t))(v15 + 32))(a1, a2, v14);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(a1, 0, 1, v14);
          return a1;
        }
      }
      else
      {
        if (!v18)
        {
          (*(void (**)(void *, void *, uint64_t))(v15 + 40))(a1, a2, v14);
          return a1;
        }
        (*(void (**)(void *, uint64_t))(v15 + 8))(a1, v14);
      }
      size_t v13 = *(void *)(v7 + 64);
      goto LABEL_8;
    }
    sub_24A211B54((uint64_t)a1);
LABEL_7:
    size_t v13 = *(void *)(*(void *)(a3 - 8) + 64);
LABEL_8:
    memcpy(a1, a2, v13);
    return a1;
  }
  if (v10) {
    goto LABEL_7;
  }
  uint64_t v11 = sub_24A2A6C70();
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v12 + 48))(a2, 1, v11))
  {
    memcpy(a1, a2, *(void *)(v7 + 64));
  }
  else
  {
    (*(void (**)(void *, void *, uint64_t))(v12 + 32))(a1, a2, v11);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(a1, 0, 1, v11);
  }
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  return a1;
}

uint64_t sub_24A2145A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24A2145B4);
}

uint64_t sub_24A2145B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174258);
  unsigned int v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(a1, a2, v4);
  if (v5 >= 2) {
    return v5 - 1;
  }
  else {
    return 0;
  }
}

uint64_t sub_24A214624(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24A214638);
}

uint64_t sub_24A214638(uint64_t a1, int a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = (a2 + 1);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174258);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(a1, v5, a3, v6);
}

uint64_t sub_24A2146BC(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174258);
  char v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48);

  return v3(a1, 1, v2);
}

uint64_t sub_24A214728(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174258);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, 1, v4);
}

void sub_24A21479C()
{
  sub_24A214814();
  if (v0 <= 0x3F) {
    swift_initEnumMetadataSinglePayload();
  }
}

void sub_24A214814()
{
  if (!qword_26B174260)
  {
    sub_24A2A6C70();
    unint64_t v0 = sub_24A2A7B50();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26B174260);
    }
  }
}

uint64_t *sub_24A21486C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    swift_getEnumCaseMultiPayload();
    uint64_t v6 = sub_24A2A6C70();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_24A21495C(uint64_t a1)
{
  uint64_t v2 = sub_24A2A6C70();
  char v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(a1, v2);
}

uint64_t sub_24A2149C0(uint64_t a1, uint64_t a2)
{
  swift_getEnumCaseMultiPayload();
  uint64_t v4 = sub_24A2A6C70();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_24A214A54(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_24A213500(a1, type metadata accessor for KeyOptionsPolicy.Assertion);
    swift_getEnumCaseMultiPayload();
    uint64_t v4 = sub_24A2A6C70();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_24A214B0C(uint64_t a1, uint64_t a2)
{
  swift_getEnumCaseMultiPayload();
  uint64_t v4 = sub_24A2A6C70();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_24A214BA0(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_24A213500(a1, type metadata accessor for KeyOptionsPolicy.Assertion);
    swift_getEnumCaseMultiPayload();
    uint64_t v4 = sub_24A2A6C70();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_24A214C58()
{
  uint64_t result = sub_24A2A6C70();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t sub_24A214CE4(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6 = sub_24A2A71D0();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  int v9 = &v21[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = sub_24A2A6B00();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  size_t v13 = &v21[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  switch(a3 >> 62)
  {
    case 1uLL:
    case 2uLL:
      sub_24A1A52B0(a2, a3);
      sub_24A1A52B0(a2, a3);
      break;
    default:
      break;
  }
  sub_24A2A6B10();
  sub_24A1A5384(a2, a3);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
  sub_24A215CF4();
  sub_24A2A7960();
  uint64_t v14 = v23;
  uint64_t v15 = *(void *)(v23 + 16);
  sub_24A215D4C();
  sub_24A2A7B60();
  unint64_t v16 = v24;
  if (v24 == v15)
  {
LABEL_9:
    uint64_t v17 = v22;
  }
  else
  {
    while (1)
    {
      if ((v16 & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_12:
        __break(1u);
        JUMPOUT(0x24A214F7CLL);
      }
      if (v16 >= *(void *)(v14 + 16)) {
        goto LABEL_12;
      }
      uint64_t v17 = 0;
      unint64_t v18 = v16 + 1;
      int v19 = *(unsigned __int8 *)(v14 + 32 + v16);
      unint64_t v24 = v18;
      if ((v22 & 1) != 0 || v21[14] != v19) {
        break;
      }
      sub_24A2A7B60();
      unint64_t v16 = v24;
      if (v24 == v15) {
        goto LABEL_9;
      }
    }
  }
  swift_bridgeObjectRelease();
  (*(void (**)(unsigned char *, uint64_t))(v11 + 8))(v13, v10);
  return v17;
}

uint64_t sub_24A214F8C(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = sub_24A2A6B00();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  MEMORY[0x270FA5388](v8);
  switch(a4 >> 62)
  {
    case 1uLL:
    case 2uLL:
      sub_24A1A52B0(a3, a4);
      sub_24A1A52B0(a3, a4);
      break;
    default:
      break;
  }
  sub_24A2A6B10();
  uint64_t v11 = sub_24A1A5384(a3, a4);
  MEMORY[0x270FA5388](v11);
  switch(a2 >> 62)
  {
    case 1uLL:
    case 2uLL:
      sub_24A1A52B0(a1, a2);
      sub_24A1A52B0(a1, a2);
      break;
    default:
      break;
  }
  sub_24A2A6B10();
  sub_24A1A5384(a1, a2);
  sub_24A215D4C();
  while (1)
  {
    sub_24A2A7B60();
    sub_24A2A7B60();
    uint64_t v12 = v17;
    if (v19) {
      break;
    }
    if ((v17 & 1) != 0 || v18 != v16[12])
    {
      size_t v13 = *(void (**)(unsigned char *, uint64_t))(v9 + 8);
      v13(&v16[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)], v8);
      v13(&v16[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)], v8);
      return 0;
    }
  }
  uint64_t v14 = *(void (**)(unsigned char *, uint64_t))(v9 + 8);
  v14(&v16[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)], v8);
  v14(&v16[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)], v8);
  return v12;
}

uint64_t sub_24A215234(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6 = sub_24A2A6B00();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = &v14[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  switch(a3 >> 62)
  {
    case 1uLL:
    case 2uLL:
      sub_24A1A52B0(a2, a3);
      sub_24A1A52B0(a2, a3);
      break;
    default:
      break;
  }
  sub_24A2A6B10();
  sub_24A1A5384(a2, a3);
  uint64_t v10 = *(void *)(a1 + 16);
  sub_24A215D4C();
  swift_bridgeObjectRetain();
  sub_24A2A7B60();
  if (v10)
  {
    uint64_t v11 = (unsigned __int8 *)(a1 + 32);
    while ((v15 & 1) == 0 && v14[14] == *v11)
    {
      sub_24A2A7B60();
      ++v11;
      if (!--v10) {
        goto LABEL_8;
      }
    }
    uint64_t v12 = 0;
  }
  else
  {
LABEL_8:
    uint64_t v12 = v15;
  }
  swift_bridgeObjectRelease();
  (*(void (**)(unsigned char *, uint64_t))(v7 + 8))(v9, v6);
  return v12;
}

uint64_t sub_24A215400()
{
  uint64_t v0 = sub_24A2A7160();
  __swift_allocate_value_buffer(v0, qword_26B1768E0);
  __swift_project_value_buffer(v0, (uint64_t)qword_26B1768E0);
  return sub_24A2A7150();
}

uint64_t SEPImagePolicy.evaluate(bundle:context:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return MEMORY[0x270FA2498](sub_24A215514, 0, 0);
}

uint64_t sub_24A215514()
{
  uint64_t v44 = v0;
  v43[1] = *(unsigned char **)MEMORY[0x263EF8340];
  uint64_t v38 = **(void **)(v0 + 24);
  AttestationPolicyContext.validatedAttestation.getter((uint64_t)&v39);
  unint64_t v1 = v40;
  if (v40 >> 60 != 15)
  {
    uint64_t v3 = v39;
    uint64_t v5 = v41;
    unint64_t v4 = v42;
    uint64_t v6 = *(void *)(v0 + 16);
    uint64_t v7 = *(void *)(v6 + 16);
    unint64_t v8 = *(void *)(v6 + 24);
    switch(v8 >> 62)
    {
      case 1uLL:
        if ((int)v7 != v7 >> 32) {
          goto LABEL_5;
        }
        goto LABEL_10;
      case 2uLL:
        if (*(void *)(v7 + 16) == *(void *)(v7 + 24)) {
          goto LABEL_10;
        }
        goto LABEL_5;
      case 3uLL:
        goto LABEL_10;
      default:
        if ((v8 & 0xFF000000000000) != 0)
        {
LABEL_5:
          sub_24A1A52B0(v7, v8);
          uint64_t v9 = sub_24A1B52A8(v7, v8);
          unint64_t v11 = v10;
          uint64_t v39 = v9;
          unint64_t v40 = v10;
          LOBYTE(v41) = 0;
          uint64_t v12 = sub_24A259298();
          if (v13 >> 60 == 15)
          {
            sub_24A2159C8();
            swift_allocError();
            unsigned char *v14 = 2;
            swift_willThrow();
            uint64_t v15 = v9;
            unint64_t v16 = v11;
          }
          else
          {
            uint64_t v18 = v12;
            unint64_t v19 = v13;
            unint64_t v37 = v11;
            uint64_t v38 = 0;
            v43[0] = 0;
            sub_24A1A52B0(v3, v1);
            sub_24A1A52B0(v5, v4);
            sub_24A1EE1CC(v5, v4, v43, &v38, v3, v1, &v39, v5, v4);
            uint64_t v20 = v41;
            if ((~v41 & 0x3000000000000000) != 0)
            {
              uint64_t v36 = v9;
              uint64_t v23 = v39;
              unint64_t v22 = v40;
              if ((v41 & 0x2000000000000000) != 0) {
                uint64_t v24 = v40;
              }
              else {
                uint64_t v24 = v39;
              }
              if ((v41 & 0x2000000000000000) != 0) {
                unint64_t v25 = v41 & 0xDFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v25 = v40;
              }
              unint64_t v34 = v40;
              uint64_t v35 = v18;
              if (sub_24A214F8C(v24, v25, v18, v19))
              {
                uint64_t v33 = v23;
                if (qword_26B1745F8 != -1) {
                  swift_once();
                }
                uint64_t v26 = sub_24A2A7160();
                __swift_project_value_buffer(v26, (uint64_t)qword_26B1768E0);
                int v27 = sub_24A2A7140();
                os_log_type_t v28 = sub_24A2A7B40();
                if (os_log_type_enabled(v27, v28))
                {
                  uint64_t v29 = (uint8_t *)swift_slowAlloc();
                  *(_WORD *)uint64_t v29 = 0;
                  _os_log_impl(&dword_24A19F000, v27, v28, "AttestationBundle passed SEPImagePolicy: reported SEP Image from AP Ticket matches SEP attestation", v29, 2u);
                  MEMORY[0x24C5C00A0](v29, -1, -1);
                  sub_24A215A1C(v33, v34, v20);
                  sub_24A1B7B78(v35, v19);

                  sub_24A211D18(v3, v1, v5, v4);
                  sub_24A1A5384(v36, v37);
                }
                else
                {
                  sub_24A1A5384(v36, v37);
                  sub_24A211D18(v3, v1, v5, v4);
                  sub_24A215A1C(v33, v34, v20);
                  sub_24A1B7B78(v18, v19);
                }
                uint64_t v31 = *(uint64_t (**)(void))(v0 + 8);
                goto LABEL_29;
              }
              sub_24A2159C8();
              swift_allocError();
              *uint64_t v30 = 4;
              swift_willThrow();
              sub_24A215A1C(v23, v22, v20);
              sub_24A1B7B78(v18, v19);
              uint64_t v15 = v36;
            }
            else
            {
              sub_24A2159C8();
              swift_allocError();
              *int v21 = 3;
              swift_willThrow();
              sub_24A1B7B78(v18, v19);
              uint64_t v15 = v9;
            }
            unint64_t v16 = v37;
          }
          sub_24A1A5384(v15, v16);
        }
        else
        {
LABEL_10:
          sub_24A2159C8();
          swift_allocError();
          unsigned char *v17 = 1;
          swift_willThrow();
        }
        sub_24A211D18(v3, v1, v5, v4);
        goto LABEL_28;
    }
  }
  sub_24A2159C8();
  swift_allocError();
  *uint64_t v2 = 0;
  swift_willThrow();
LABEL_28:
  uint64_t v31 = *(uint64_t (**)(void))(v0 + 8);
LABEL_29:
  return v31();
}

unint64_t sub_24A2159C8()
{
  unint64_t result = qword_269778FB0;
  if (!qword_269778FB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269778FB0);
  }
  return result;
}

uint64_t sub_24A215A1C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if ((~a3 & 0x3000000000000000) != 0) {
    return sub_24A215A30(a1, a2, a3);
  }
  return a1;
}

uint64_t sub_24A215A30(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if ((a3 & 0x2000000000000000) != 0)
  {
    a1 = a2;
    a2 = a3 & 0xDFFFFFFFFFFFFFFFLL;
  }
  return sub_24A1A5384(a1, a2);
}

uint64_t sub_24A215A48(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  uint64_t v5[2] = a1;
  v5[3] = a2;
  v5[1] = sub_24A1C50FC;
  return MEMORY[0x270FA2498](sub_24A215514, 0, 0);
}

ValueMetadata *type metadata accessor for SEPImagePolicy()
{
  return &type metadata for SEPImagePolicy;
}

uint64_t getEnumTagSinglePayload for SEPImagePolicy.Error(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for SEPImagePolicy.Error(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24A215C64);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SEPImagePolicy.Error()
{
  return &type metadata for SEPImagePolicy.Error;
}

unint64_t sub_24A215CA0()
{
  unint64_t result = qword_269778FC0;
  if (!qword_269778FC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269778FC0);
  }
  return result;
}

unint64_t sub_24A215CF4()
{
  unint64_t result = qword_26B174A08;
  if (!qword_26B174A08)
  {
    sub_24A2A71D0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B174A08);
  }
  return result;
}

unint64_t sub_24A215D4C()
{
  unint64_t result = qword_26B174208;
  if (!qword_26B174208)
  {
    sub_24A2A6B00();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B174208);
  }
  return result;
}

uint64_t RoutingHintPolicy.init(required:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 9) = result;
  *(unsigned char *)(a2 + 10) = 0;
  return result;
}

uint64_t sub_24A215DAC()
{
  uint64_t v1 = *v0;
  if (qword_26B174708 == -1)
  {
    if (!*(void *)(v1 + 16)) {
      return 0;
    }
  }
  else
  {
    swift_once();
    if (!*(void *)(v1 + 16)) {
      return 0;
    }
  }
  unint64_t v2 = sub_24A1BE7EC(xmmword_26B1746E8, *((uint64_t *)&xmmword_26B1746E8 + 1), qword_26B1746F8, unk_26B174700);
  if ((v3 & 1) == 0) {
    return 0;
  }
  sub_24A1C9680(*(void *)(v1 + 56) + 32 * v2, (uint64_t)v6);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B174BB8);
  if (swift_dynamicCast()) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t sub_24A215E7C()
{
  uint64_t v0 = sub_24A2A7160();
  __swift_allocate_value_buffer(v0, qword_26977A498);
  __swift_project_value_buffer(v0, (uint64_t)qword_26977A498);
  return sub_24A2A7150();
}

uint64_t RoutingHintPolicy.init(_:required:)@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  char v3 = *(unsigned char *)(result + 8);
  *(void *)a3 = *(void *)result;
  *(unsigned char *)(a3 + 8) = v3;
  *(unsigned char *)(a3 + 9) = a2;
  *(unsigned char *)(a3 + 10) = 0;
  return result;
}

uint64_t RoutingHintPolicy.init(_:required:fallback:)@<X0>(uint64_t result@<X0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X8>)
{
  char v4 = *(unsigned char *)(result + 8);
  *(void *)a4 = *(void *)result;
  *(unsigned char *)(a4 + 8) = v4;
  *(unsigned char *)(a4 + 9) = a2;
  *(unsigned char *)(a4 + 10) = a3;
  return result;
}

uint64_t RoutingHintPolicy.init(required:fallback:)@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(unsigned char *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 9) = result;
  *(unsigned char *)(a3 + 10) = a2;
  return result;
}

uint64_t RoutingHintPolicy.evaluate(bundle:context:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *v2;
  *(void *)(v3 + 80) = a2;
  *(void *)(v3 + 88) = v4;
  *(unsigned char *)(v3 + 96) = *((unsigned char *)v2 + 8);
  *(unsigned char *)(v3 + 97) = *((unsigned char *)v2 + 9);
  *(unsigned char *)(v3 + 98) = *((unsigned char *)v2 + 10);
  return MEMORY[0x270FA2498](sub_24A215F88, 0, 0);
}

uint64_t sub_24A215F88()
{
  uint64_t v34 = v0;
  if (*(void *)(v0 + 88))
  {
    char v1 = *(unsigned char *)(v0 + 96);
    uint64_t v2 = *(void *)(v0 + 88);
  }
  else
  {
    uint64_t v33 = **(void **)(v0 + 80);
    AttestationPolicyContext.validatedDarwinInit.getter((uint64_t)&v31);
    uint64_t v2 = v31;
    if (!v31)
    {
      if (*(unsigned char *)(v0 + 97) == 1)
      {
        if (qword_269778418 != -1) {
          swift_once();
        }
        uint64_t v20 = sub_24A2A7160();
        __swift_project_value_buffer(v20, (uint64_t)qword_26977A498);
        unint64_t v16 = sub_24A2A7140();
        os_log_type_t v21 = sub_24A2A7B30();
        if (!os_log_type_enabled(v16, v21))
        {
          char v19 = 0;
          goto LABEL_45;
        }
        uint64_t v18 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v18 = 0;
        _os_log_impl(&dword_24A19F000, v16, v21, "Required validated darwin-init unavailable", v18, 2u);
        char v19 = 0;
        goto LABEL_28;
      }
      if (qword_269778418 != -1) {
        swift_once();
      }
      uint64_t v27 = sub_24A2A7160();
      __swift_project_value_buffer(v27, (uint64_t)qword_26977A498);
      uint64_t v23 = sub_24A2A7140();
      os_log_type_t v24 = sub_24A2A7B30();
      if (!os_log_type_enabled(v23, v24))
      {
LABEL_38:

LABEL_39:
        os_log_type_t v28 = *(uint64_t (**)(void))(v0 + 8);
        goto LABEL_40;
      }
      unint64_t v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v25 = 0;
      uint64_t v26 = "Optional validated darwin-init unavailable";
LABEL_37:
      _os_log_impl(&dword_24A19F000, v23, v24, v26, v25, 2u);
      MEMORY[0x24C5C00A0](v25, -1, -1);
      goto LABEL_38;
    }
    char v1 = v32;
  }
  uint64_t v31 = v2;
  char v32 = v1;
  swift_bridgeObjectRetain();
  uint64_t v3 = DarwinInit.secureConfigRoutingHint.getter();
  if (v4)
  {
    uint64_t v5 = v3;
    uint64_t v6 = v4;
    swift_bridgeObjectRelease();
LABEL_7:
    if (qword_26B174708 != -1) {
      swift_once();
    }
    long long v7 = xmmword_26B1746E8;
    uint64_t v8 = qword_26B1746F8;
    uint64_t v9 = unk_26B174700;
    *(void *)(v0 + 40) = MEMORY[0x263F8D310];
    *(void *)(v0 + 16) = v5;
    *(void *)(v0 + 24) = v6;
    sub_24A1DD134(v0 + 16, v0 + 48);
    swift_bridgeObjectRetain();
    sub_24A1DA970(v0 + 48, v7, *((uint64_t *)&v7 + 1), v8, v9);
    sub_24A1F182C(v0 + 16);
    goto LABEL_39;
  }
  if (*(unsigned char *)(v0 + 98))
  {
    if (qword_269778418 != -1) {
      swift_once();
    }
    uint64_t v10 = sub_24A2A7160();
    __swift_project_value_buffer(v10, (uint64_t)qword_26977A498);
    unint64_t v11 = sub_24A2A7140();
    os_log_type_t v12 = sub_24A2A7B10();
    if (os_log_type_enabled(v11, v12))
    {
      unint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v13 = 0;
      _os_log_impl(&dword_24A19F000, v11, v12, "Reading fallback routing hint from Preferences", v13, 2u);
      MEMORY[0x24C5C00A0](v13, -1, -1);
    }

    uint64_t v31 = v2;
    char v32 = v1;
    uint64_t v5 = DarwinInit.cfPrefsRoutingHint.getter();
    uint64_t v6 = v14;
    swift_bridgeObjectRelease();
    if (v6) {
      goto LABEL_7;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  if (*(unsigned char *)(v0 + 97) != 1)
  {
    if (qword_269778418 != -1) {
      swift_once();
    }
    uint64_t v22 = sub_24A2A7160();
    __swift_project_value_buffer(v22, (uint64_t)qword_26977A498);
    uint64_t v23 = sub_24A2A7140();
    os_log_type_t v24 = sub_24A2A7B30();
    if (!os_log_type_enabled(v23, v24)) {
      goto LABEL_38;
    }
    unint64_t v25 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v25 = 0;
    uint64_t v26 = "Optional routing hint missing from darwin-init";
    goto LABEL_37;
  }
  if (qword_269778418 != -1) {
    swift_once();
  }
  uint64_t v15 = sub_24A2A7160();
  __swift_project_value_buffer(v15, (uint64_t)qword_26977A498);
  unint64_t v16 = sub_24A2A7140();
  os_log_type_t v17 = sub_24A2A7B30();
  if (!os_log_type_enabled(v16, v17))
  {
    char v19 = 1;
    goto LABEL_45;
  }
  uint64_t v18 = (uint8_t *)swift_slowAlloc();
  *(_WORD *)uint64_t v18 = 0;
  _os_log_impl(&dword_24A19F000, v16, v17, "Required routing hint missing from darwin-init", v18, 2u);
  char v19 = 1;
LABEL_28:
  MEMORY[0x24C5C00A0](v18, -1, -1);
LABEL_45:

  sub_24A2166E0();
  swift_allocError();
  *uint64_t v30 = v19;
  swift_willThrow();
  os_log_type_t v28 = *(uint64_t (**)(void))(v0 + 8);
LABEL_40:
  return v28();
}

uint64_t sub_24A2164D8(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = swift_task_alloc();
  *(void *)(v3 + 16) = v5;
  *(void *)uint64_t v5 = v3;
  *(void *)(v5 + 8) = sub_24A1C50FC;
  uint64_t v6 = *v2;
  *(void *)(v5 + 80) = a2;
  *(void *)(v5 + 88) = v6;
  *(unsigned char *)(v5 + 96) = *((unsigned char *)v2 + 8);
  *(unsigned char *)(v5 + 97) = *((unsigned char *)v2 + 9);
  *(unsigned char *)(v5 + 98) = *((unsigned char *)v2 + 10);
  return MEMORY[0x270FA2498](sub_24A215F88, 0, 0);
}

void sub_24A2165A0()
{
  *(void *)&xmmword_26B1746E8 = &type metadata for RoutingHintPolicy;
  *((void *)&xmmword_26B1746E8 + 1) = &protocol witness table for RoutingHintPolicy;
  qword_26B1746F8 = 0xD000000000000014;
  unk_26B174700 = 0x800000024A2B36A0;
}

uint64_t static RoutingHintPolicy.validatedRoutingHintKey.getter@<X0>(uint64_t a1@<X8>)
{
  if (qword_26B174708 != -1) {
    swift_once();
  }
  uint64_t v3 = qword_26B1746F8;
  uint64_t v2 = unk_26B174700;
  *(_OWORD *)a1 = xmmword_26B1746E8;
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = v2;

  return swift_bridgeObjectRetain();
}

BOOL static RoutingHintPolicy.Error.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t RoutingHintPolicy.Error.hash(into:)()
{
  return sub_24A2A7F20();
}

uint64_t RoutingHintPolicy.Error.hashValue.getter()
{
  return sub_24A2A7F50();
}

unint64_t sub_24A2166E0()
{
  unint64_t result = qword_269778FD0;
  if (!qword_269778FD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269778FD0);
  }
  return result;
}

unint64_t sub_24A216738()
{
  unint64_t result = qword_269778FE0;
  if (!qword_269778FE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269778FE0);
  }
  return result;
}

uint64_t sub_24A216790(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_WORD *)(a1 + 9) = *(_WORD *)(a2 + 9);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for RoutingHintPolicy(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 9);
  *(unsigned char *)(a1 + 10) = *(unsigned char *)(a2 + 10);
  return a1;
}

uint64_t __swift_memcpy11_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_DWORD *)(result + 7) = *(_DWORD *)((char *)a2 + 7);
  *(void *)unint64_t result = v2;
  return result;
}

uint64_t assignWithTake for RoutingHintPolicy(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 9);
  *(unsigned char *)(a1 + 10) = *(unsigned char *)(a2 + 10);
  return a1;
}

uint64_t getEnumTagSinglePayload for RoutingHintPolicy(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 11)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for RoutingHintPolicy(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(unsigned char *)(result + 10) = 0;
    *(_WORD *)(result + 8) = 0;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 11) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 11) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RoutingHintPolicy()
{
  return &type metadata for RoutingHintPolicy;
}

unsigned char *storeEnumTagSinglePayload for RoutingHintPolicy.Error(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24A216A24);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RoutingHintPolicy.Error()
{
  return &type metadata for RoutingHintPolicy.Error;
}

uint64_t getEnumTagSinglePayload for RoutingHintPolicy.DarwinInitLoader(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 9)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for RoutingHintPolicy.DarwinInitLoader(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)unint64_t result = 0;
    *(unsigned char *)(result + 8) = 0;
    *(_DWORD *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2;
    }
  }
  return result;
}

uint64_t sub_24A216B04(uint64_t result, int a2)
{
  if (a2 < 0)
  {
    uint64_t v2 = a2 ^ 0x80000000;
    *(unsigned char *)(result + 8) = 0;
  }
  else
  {
    if (!a2) {
      return result;
    }
    uint64_t v2 = (a2 - 1);
  }
  *(void *)unint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for RoutingHintPolicy.DarwinInitLoader()
{
  return &type metadata for RoutingHintPolicy.DarwinInitLoader;
}

void sub_24A216B38()
{
  qword_26977A4B0 = (uint64_t)&unk_26FDFC078;
}

uint64_t sub_24A216B4C@<X0>(uint64_t a1@<X8>)
{
  return sub_24A2171B8((uint64_t (*)(void))sub_24A231838, a1);
}

uint64_t sub_24A216B64()
{
  uint64_t result = *v0;
  if (*((unsigned char *)v0 + 8) == 1) {
    return qword_24A2ADB28[result];
  }
  return result;
}

uint64_t sub_24A216B84@<X0>(void *a1@<X8>)
{
  return sub_24A217308(&qword_269778420, &qword_26977A4B0, a1);
}

uint64_t sub_24A216BA8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_24A21722C(a1, (uint64_t (*)(void))sub_24A231838, a2);
}

void sub_24A216BC0(void *a1@<X8>)
{
  uint64_t v2 = *v1;
  if (*((unsigned char *)v1 + 8) == 1) {
    uint64_t v2 = qword_24A2ADB28[v2];
  }
  *a1 = v2;
}

uint64_t sub_24A216BE8(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_24A1AE934();

  return MEMORY[0x270F44AF0](a1, a2, v4);
}

BOOL sub_24A216C38(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  if (*((unsigned char *)a1 + 8) == 1) {
    uint64_t v2 = qword_24A2ADB28[v2];
  }
  uint64_t v3 = *a2;
  if (*((unsigned char *)a2 + 8)) {
    uint64_t v3 = qword_24A2ADB28[v3];
  }
  return v2 == v3;
}

void sub_24A216C70()
{
  qword_26977A4B8 = (uint64_t)&unk_26FDFC0E8;
}

uint64_t sub_24A216C84@<X0>(uint64_t a1@<X8>)
{
  return sub_24A2171B8((uint64_t (*)(void))sub_24A231870, a1);
}

uint64_t sub_24A216C9C()
{
  return *(void *)v0;
}

uint64_t sub_24A216CA4@<X0>(void *a1@<X8>)
{
  return sub_24A217308(&qword_269778428, &qword_26977A4B8, a1);
}

uint64_t sub_24A216CC8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_24A21722C(a1, (uint64_t (*)(void))sub_24A231870, a2);
}

void sub_24A216CE0(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_24A216CEC(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_24A1AE988();

  return MEMORY[0x270F44AF0](a1, a2, v4);
}

BOOL sub_24A216D38(uint64_t a1, uint64_t *a2)
{
  return sub_24A247774(*(void *)a1, *(unsigned __int8 *)(a1 + 8), *a2);
}

void sub_24A216D54()
{
  qword_26977A4C0 = (uint64_t)&unk_26FDFC178;
}

uint64_t sub_24A216D68@<X0>(uint64_t a1@<X8>)
{
  return sub_24A2171B8((uint64_t (*)(void))sub_24A231884, a1);
}

uint64_t sub_24A216D80()
{
  uint64_t result = *v0;
  if (*((unsigned char *)v0 + 8) == 1) {
    return qword_24A2ADAF0[result];
  }
  return result;
}

uint64_t sub_24A216DA0@<X0>(void *a1@<X8>)
{
  return sub_24A217308(&qword_269778430, &qword_26977A4C0, a1);
}

uint64_t sub_24A216DC4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_24A21722C(a1, sub_24A231884, a2);
}

void sub_24A216DDC(void *a1@<X8>)
{
  uint64_t v2 = *v1;
  if (*((unsigned char *)v1 + 8) == 1) {
    uint64_t v2 = qword_24A2ADAF0[v2];
  }
  *a1 = v2;
}

uint64_t sub_24A216E00(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_24A1AE9DC();

  return MEMORY[0x270F44AF0](a1, a2, v4);
}

BOOL sub_24A216E4C(uint64_t a1, uint64_t a2)
{
  return sub_24A247780(*(void *)a1, *(unsigned char *)(a1 + 8), *(void *)a2, *(unsigned char *)(a2 + 8));
}

void sub_24A216E68()
{
  qword_26977A4C8 = (uint64_t)&unk_26FDFC208;
}

uint64_t sub_24A216E7C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  BOOL v2 = result == 0;
  if (result == 3) {
    uint64_t v3 = 1;
  }
  else {
    uint64_t v3 = result;
  }
  *(void *)a2 = v3;
  if (result == 3) {
    BOOL v2 = 1;
  }
  *(unsigned char *)(a2 + 8) = v2;
  *(unsigned char *)(a2 + 9) = 0;
  return result;
}

uint64_t sub_24A216EA8()
{
  uint64_t v1 = 3;
  if (!*(void *)v0) {
    uint64_t v1 = 0;
  }
  if (v0[8]) {
    return v1;
  }
  else {
    return *(void *)v0;
  }
}

uint64_t sub_24A216EC8@<X0>(void *a1@<X8>)
{
  return sub_24A217308(&qword_269778438, &qword_26977A4C8, a1);
}

uint64_t *sub_24A216EEC@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *result;
  BOOL v3 = *result == 0;
  BOOL v4 = *result == 3;
  if (*result == 3) {
    uint64_t v2 = 1;
  }
  *(void *)a2 = v2;
  char v5 = v4 || v3;
  *(unsigned char *)(a2 + 8) = v5;
  *(unsigned char *)(a2 + 9) = 0;
  return result;
}

void sub_24A216F1C(uint64_t *a1@<X8>)
{
  uint64_t v2 = *(void *)v1;
  uint64_t v3 = 3;
  if (!*(void *)v1) {
    uint64_t v3 = 0;
  }
  if (*(unsigned char *)(v1 + 8)) {
    uint64_t v2 = v3;
  }
  *a1 = v2;
}

uint64_t sub_24A216F40(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_24A22B46C();

  return MEMORY[0x270F44AF0](a1, a2, v4);
}

BOOL sub_24A216F8C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  if (*(void *)a1) {
    uint64_t v3 = 3;
  }
  else {
    uint64_t v3 = 0;
  }
  if (*(unsigned char *)(a1 + 8)) {
    uint64_t v2 = v3;
  }
  if (*(void *)a2) {
    uint64_t v4 = 3;
  }
  else {
    uint64_t v4 = 0;
  }
  if (!*(unsigned char *)(a2 + 8)) {
    uint64_t v4 = *(void *)a2;
  }
  return v2 == v4;
}

void sub_24A216FCC()
{
  qword_26977A4D0 = (uint64_t)&unk_26FDFC248;
}

uint64_t sub_24A216FE0@<X0>(uint64_t a1@<X8>)
{
  return sub_24A2171B8((uint64_t (*)(void))sub_24A23192C, a1);
}

uint64_t sub_24A216FF8@<X0>(void *a1@<X8>)
{
  return sub_24A217308(&qword_269778440, &qword_26977A4D0, a1);
}

uint64_t sub_24A21701C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_24A21722C(a1, (uint64_t (*)(void))sub_24A23192C, a2);
}

uint64_t sub_24A217034(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_24A22B728();

  return MEMORY[0x270F44AF0](a1, a2, v4);
}

BOOL sub_24A217080(void *a1, void *a2)
{
  return *a1 == *a2;
}

void sub_24A217094()
{
  qword_26977A4D8 = (uint64_t)&unk_26FDFC2C8;
}

unint64_t sub_24A2170A8@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = result < 2;
  *(unsigned char *)(a2 + 9) = 0;
  return result;
}

uint64_t sub_24A2170C0()
{
  if (v0[8]) {
    return *(void *)v0 != 0;
  }
  else {
    return *(void *)v0;
  }
}

uint64_t sub_24A2170DC@<X0>(void *a1@<X8>)
{
  return sub_24A217308(&qword_269778448, &qword_26977A4D8, a1);
}

void *sub_24A217100@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  BOOL v2 = *result >= 2uLL;
  *(void *)a2 = *result;
  char v3 = !v2;
  *(unsigned char *)(a2 + 8) = v3;
  *(unsigned char *)(a2 + 9) = 0;
  return result;
}

void sub_24A21711C(void *a1@<X8>)
{
  uint64_t v2 = *v1;
  if (*((unsigned char *)v1 + 8)) {
    uint64_t v2 = *v1 != 0;
  }
  *a1 = v2;
}

uint64_t sub_24A21713C(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_24A22B7D0();

  return MEMORY[0x270F44AF0](a1, a2, v4);
}

void sub_24A21718C()
{
  qword_26977A4E0 = (uint64_t)&unk_26FDFC308;
}

uint64_t sub_24A2171A0@<X0>(uint64_t a1@<X8>)
{
  return sub_24A2171B8((uint64_t (*)(void))sub_24A231940, a1);
}

uint64_t sub_24A2171B8@<X0>(uint64_t (*a1)(void)@<X3>, uint64_t a2@<X8>)
{
  uint64_t result = a1();
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4;
  *(unsigned char *)(a2 + 9) = v5 & 1;
  return result;
}

uint64_t sub_24A2171F0@<X0>(void *a1@<X8>)
{
  return sub_24A217308(&qword_269778450, &qword_26977A4E0, a1);
}

uint64_t sub_24A217214@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_24A21722C(a1, (uint64_t (*)(void))sub_24A231940, a2);
}

uint64_t sub_24A21722C@<X0>(void *a1@<X0>, uint64_t (*a2)(void)@<X3>, uint64_t a3@<X8>)
{
  uint64_t result = a2(*a1);
  *(void *)a3 = result;
  *(unsigned char *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 9) = v6 & 1;
  return result;
}

uint64_t sub_24A217268(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_24A22B77C();

  return MEMORY[0x270F44AF0](a1, a2, v4);
}

uint64_t sub_24A2172B4(uint64_t a1, uint64_t a2)
{
  return sub_24A2491C0(*(void *)a1, *(unsigned __int8 *)(a1 + 8), *(void *)a2, *(unsigned __int8 *)(a2 + 8));
}

void sub_24A2172D0()
{
  qword_26977A4E8 = (uint64_t)&unk_26FDFC3A8;
}

uint64_t sub_24A2172E4@<X0>(void *a1@<X8>)
{
  return sub_24A217308(&qword_269778458, &qword_26977A4E8, a1);
}

uint64_t sub_24A217308@<X0>(void *a1@<X2>, void *a2@<X3>, void *a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  *a3 = *a2;

  return swift_bridgeObjectRetain();
}

uint64_t sub_24A217360(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_24A22B6D4();

  return MEMORY[0x270F44AF0](a1, a2, v4);
}

BOOL sub_24A2173AC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  if (*((unsigned char *)a1 + 8)) {
    uint64_t v2 = *a1 != 0;
  }
  uint64_t v3 = *a2 != 0;
  if (!*((unsigned char *)a2 + 8)) {
    uint64_t v3 = *a2;
  }
  return v2 == v3;
}

uint64_t sub_24A2173E8()
{
  uint64_t v0 = sub_24A2A7130();
  __swift_allocate_value_buffer(v0, qword_26977A4F0);
  __swift_project_value_buffer(v0, (uint64_t)qword_26977A4F0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697787B0);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2697787B8) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_24A2A8AB0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "UNKNOWN_VERSION";
  *(void *)(v6 + 8) = 15;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = sub_24A2A7100();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "V1";
  *(void *)(v10 + 8) = 2;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  unint64_t v11 = (void *)(v5 + 2 * v2);
  os_log_type_t v12 = (char *)v11 + v1[14];
  void *v11 = 2;
  *(void *)os_log_type_t v12 = "V2";
  *((void *)v12 + 1) = 2;
  v12[16] = 2;
  v9();
  unint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 3;
  *(void *)uint64_t v14 = "V3";
  *((void *)v14 + 1) = 2;
  v14[16] = 2;
  v9();
  uint64_t v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 999999999;
  *(void *)uint64_t v15 = "FUTURE";
  *(void *)(v15 + 8) = 6;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return sub_24A2A7110();
}

uint64_t sub_24A217660@<X0>(uint64_t a1@<X8>)
{
  return sub_24A1ADE40(&qword_269778460, (uint64_t)qword_26977A4F0, a1);
}

uint64_t sub_24A217684()
{
  uint64_t v0 = sub_24A2A7130();
  __swift_allocate_value_buffer(v0, qword_26977A508);
  __swift_project_value_buffer(v0, (uint64_t)qword_26977A508);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697787B0);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2697787B8) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_24A2A8A40;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "UNKNOWN_APPLICATION";
  *(void *)(v6 + 8) = 19;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = sub_24A2A7100();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "IDS_MESSAGING";
  *(void *)(v10 + 8) = 13;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  unint64_t v11 = (void *)(v5 + 2 * v2);
  os_log_type_t v12 = (char *)v11 + v1[14];
  void *v11 = 2;
  *(void *)os_log_type_t v12 = "CLOUDKIT";
  *((void *)v12 + 1) = 8;
  v12[16] = 2;
  v9();
  unint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 3;
  *(void *)uint64_t v14 = "IDS_MULTIPLEX_ICLOUD";
  *((void *)v14 + 1) = 20;
  v14[16] = 2;
  v9();
  uint64_t v15 = (void *)(v5 + 4 * v2);
  unint64_t v16 = (char *)v15 + v1[14];
  void *v15 = 4;
  *(void *)unint64_t v16 = "IDS_FACETIME";
  *((void *)v16 + 1) = 12;
  v16[16] = 2;
  v9();
  os_log_type_t v17 = (void *)(v5 + 5 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  void *v17 = 5;
  *(void *)uint64_t v18 = "PRIVATE_CLOUD_COMPUTE";
  *((void *)v18 + 1) = 21;
  v18[16] = 2;
  v9();
  char v19 = (void *)(v5 + 6 * v2);
  uint64_t v20 = (char *)v19 + v1[14];
  void *v19 = 6;
  *(void *)uint64_t v20 = "PRIVATE_CLOUD_COMPUTE_INTERNAL";
  *((void *)v20 + 1) = 30;
  v20[16] = 2;
  v9();
  return sub_24A2A7110();
}

uint64_t sub_24A217978@<X0>(uint64_t a1@<X8>)
{
  return sub_24A1ADE40(&qword_269778468, (uint64_t)qword_26977A508, a1);
}

uint64_t sub_24A21799C()
{
  uint64_t v0 = sub_24A2A7130();
  __swift_allocate_value_buffer(v0, qword_26977A520);
  __swift_project_value_buffer(v0, (uint64_t)qword_26977A520);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697787B0);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2697787B8) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_24A2A8A40;
  unint64_t v4 = v20 + v3 + v1[14];
  *(void *)(v20 + v3) = 0;
  *(void *)unint64_t v4 = "UNKNOWN_STATUS";
  *(void *)(v4 + 8) = 14;
  *(unsigned char *)(v4 + 16) = 2;
  uint64_t v5 = *MEMORY[0x263F50718];
  uint64_t v6 = sub_24A2A7100();
  uint64_t v7 = *(void (**)(void))(*(void *)(v6 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v7)(v4, v5, v6);
  unint64_t v8 = v20 + v3 + v2 + v1[14];
  *(void *)(v20 + v3 + v2) = 1;
  *(void *)unint64_t v8 = "OK";
  *(void *)(v8 + 8) = 2;
  *(unsigned char *)(v8 + 16) = 2;
  v7();
  uint64_t v9 = (void *)(v20 + v3 + 2 * v2);
  unint64_t v10 = (char *)v9 + v1[14];
  void *v9 = 3;
  *(void *)unint64_t v10 = "MUTATION_PENDING";
  *((void *)v10 + 1) = 16;
  v10[16] = 2;
  v7();
  unint64_t v11 = (void *)(v20 + v3 + 3 * v2);
  os_log_type_t v12 = (char *)v11 + v1[14];
  void *v11 = 4;
  *(void *)os_log_type_t v12 = "ALREADY_EXISTS";
  *((void *)v12 + 1) = 14;
  v12[16] = 2;
  v7();
  unint64_t v13 = (void *)(v20 + v3 + 4 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 5;
  *(void *)uint64_t v14 = "INTERNAL_ERROR";
  *((void *)v14 + 1) = 14;
  v14[16] = 2;
  v7();
  uint64_t v15 = (void *)(v20 + v3 + 5 * v2);
  unint64_t v16 = (char *)v15 + v1[14];
  void *v15 = 6;
  *(void *)unint64_t v16 = "INVALID_REQUEST";
  *((void *)v16 + 1) = 15;
  v16[16] = 2;
  v7();
  os_log_type_t v17 = (void *)(v20 + v3 + 6 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  void *v17 = 7;
  *(void *)uint64_t v18 = "NOT_FOUND";
  *((void *)v18 + 1) = 9;
  v18[16] = 2;
  v7();
  return sub_24A2A7110();
}

uint64_t sub_24A217C88@<X0>(uint64_t a1@<X8>)
{
  return sub_24A1ADE40(&qword_269778470, (uint64_t)qword_26977A520, a1);
}

uint64_t sub_24A217CAC()
{
  uint64_t v0 = sub_24A2A7130();
  __swift_allocate_value_buffer(v0, qword_26977A538);
  __swift_project_value_buffer(v0, (uint64_t)qword_26977A538);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697787B0);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2697787B8) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_24A2A8AA0;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *uint64_t v5 = 0;
  *(void *)unint64_t v6 = "UNKNOWN_VRF";
  *(void *)(v6 + 8) = 11;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = sub_24A2A7100();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 3;
  *(void *)unint64_t v10 = "ECVRF_ED25519_SHA512_Elligator2";
  *((void *)v10 + 1) = 31;
  v10[16] = 2;
  v9();
  return sub_24A2A7110();
}

uint64_t sub_24A217E64@<X0>(uint64_t a1@<X8>)
{
  return sub_24A1ADE40(&qword_269778478, (uint64_t)qword_26977A538, a1);
}

uint64_t sub_24A217E88()
{
  uint64_t v0 = sub_24A2A7130();
  __swift_allocate_value_buffer(v0, qword_26977A550);
  __swift_project_value_buffer(v0, (uint64_t)qword_26977A550);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697787B0);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2697787B8) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_24A2A8A30;
  unint64_t v4 = v19 + v3;
  unint64_t v5 = v19 + v3 + v1[14];
  *(void *)(v19 + v3) = 0;
  *(void *)unint64_t v5 = "UNKNOWN_LOG";
  *(void *)(v5 + 8) = 11;
  *(unsigned char *)(v5 + 16) = 2;
  uint64_t v6 = *MEMORY[0x263F50718];
  uint64_t v7 = sub_24A2A7100();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  unint64_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 1;
  *(void *)unint64_t v9 = "PER_APPLICATION_CHANGE_LOG";
  *(void *)(v9 + 8) = 26;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  unint64_t v11 = (char *)v10 + v1[14];
  void *v10 = 2;
  *(void *)unint64_t v11 = "PER_APPLICATION_TREE";
  *((void *)v11 + 1) = 20;
  v11[16] = 2;
  v8();
  os_log_type_t v12 = (void *)(v4 + 3 * v2);
  unint64_t v13 = (char *)v12 + v1[14];
  void *v12 = 3;
  *(void *)unint64_t v13 = "TOP_LEVEL_TREE";
  *((void *)v13 + 1) = 14;
  unsigned char v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  void *v14 = 4;
  *(void *)uint64_t v15 = "CT_LOG";
  *((void *)v15 + 1) = 6;
  v15[16] = 2;
  v8();
  unint64_t v16 = (void *)(v4 + 5 * v2);
  os_log_type_t v17 = (char *)v16 + v1[14];
  void *v16 = 5;
  *(void *)os_log_type_t v17 = "AT_LOG";
  *((void *)v17 + 1) = 6;
  v17[16] = 2;
  v8();
  return sub_24A2A7110();
}

uint64_t sub_24A218138@<X0>(uint64_t a1@<X8>)
{
  return sub_24A1ADE40(&qword_269778480, (uint64_t)qword_26977A550, a1);
}

uint64_t sub_24A21815C()
{
  uint64_t v0 = sub_24A2A7130();
  __swift_allocate_value_buffer(v0, qword_26977A568);
  __swift_project_value_buffer(v0, (uint64_t)qword_26977A568);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697787B0);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2697787B8) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_24A2A8AA0;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 0;
  *(void *)unint64_t v6 = "UNKNOWN_MAP";
  *(void *)(v6 + 8) = 11;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = sub_24A2A7100();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 1;
  *(void *)unint64_t v10 = "PER_APP_OBJECT_MAP";
  *((void *)v10 + 1) = 18;
  v10[16] = 2;
  v9();
  return sub_24A2A7110();
}

uint64_t sub_24A218314@<X0>(uint64_t a1@<X8>)
{
  return sub_24A1ADE40(&qword_269778488, (uint64_t)qword_26977A568, a1);
}

uint64_t sub_24A218338()
{
  uint64_t v0 = sub_24A2A7130();
  __swift_allocate_value_buffer(v0, qword_26977A580);
  __swift_project_value_buffer(v0, (uint64_t)qword_26977A580);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697787B0);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2697787B8) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_24A2AB820;
  unint64_t v4 = v23 + v3;
  unint64_t v5 = v23 + v3 + v1[14];
  *(void *)(v23 + v3) = 0;
  *(void *)unint64_t v5 = "PACL_NODE";
  *(void *)(v5 + 8) = 9;
  *(unsigned char *)(v5 + 16) = 2;
  uint64_t v6 = *MEMORY[0x263F50718];
  uint64_t v7 = sub_24A2A7100();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  unint64_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 1;
  *(void *)unint64_t v9 = "PAT_NODE";
  *(void *)(v9 + 8) = 8;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  unint64_t v11 = (char *)v10 + v1[14];
  void *v10 = 2;
  *(void *)unint64_t v11 = "PAT_CONFIG_NODE";
  *((void *)v11 + 1) = 15;
  v11[16] = 2;
  v8();
  os_log_type_t v12 = (void *)(v4 + 3 * v2);
  unint64_t v13 = (char *)v12 + v1[14];
  void *v12 = 3;
  *(void *)unint64_t v13 = "TLT_NODE";
  *((void *)v13 + 1) = 8;
  unsigned char v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  void *v14 = 4;
  *(void *)uint64_t v15 = "TLT_CONFIG_NODE";
  *((void *)v15 + 1) = 15;
  v15[16] = 2;
  v8();
  unint64_t v16 = (void *)(v4 + 5 * v2);
  os_log_type_t v17 = (char *)v16 + v1[14];
  void *v16 = 5;
  *(void *)os_log_type_t v17 = "LOG_CLOSED_NODE";
  *((void *)v17 + 1) = 15;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 6;
  *(void *)uint64_t v19 = "CT_NODE";
  *((void *)v19 + 1) = 7;
  v19[16] = 2;
  v8();
  uint64_t v20 = (void *)(v4 + 7 * v2);
  os_log_type_t v21 = (char *)v20 + v1[14];
  *uint64_t v20 = 7;
  *(void *)os_log_type_t v21 = "ATL_NODE";
  *((void *)v21 + 1) = 8;
  v21[16] = 2;
  v8();
  return sub_24A2A7110();
}

uint64_t sub_24A218664@<X0>(uint64_t a1@<X8>)
{
  return sub_24A1ADE40(&qword_269778490, (uint64_t)qword_26977A580, a1);
}

uint64_t sub_24A218688()
{
  uint64_t v0 = sub_24A2A7130();
  __swift_allocate_value_buffer(v0, qword_26977A598);
  __swift_project_value_buffer(v0, (uint64_t)qword_26977A598);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697787B0);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2697787B8) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_24A2A8A70;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "type";
  *(void *)(v6 + 8) = 4;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = sub_24A2A7100();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "output";
  *((void *)v10 + 1) = 6;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "proof";
  *(void *)(v11 + 8) = 5;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return sub_24A2A7110();
}

uint64_t sub_24A21888C()
{
  uint64_t result = sub_24A2A6ED0();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 3 || result == 2)
      {
        sub_24A2A6F40();
      }
      else if (result == 1)
      {
        sub_24A22B46C();
        sub_24A2A6F10();
      }
      uint64_t result = sub_24A2A6ED0();
    }
  }
  return result;
}

uint64_t sub_24A218984()
{
  if (!*v0 || (sub_24A22B46C(), uint64_t result = sub_24A2A7070(), !v1))
  {
    uint64_t v3 = v0[2];
    unint64_t v4 = v0[3];
    switch(v4 >> 62)
    {
      case 1uLL:
        if ((int)v3 != v3 >> 32) {
          goto LABEL_9;
        }
        goto LABEL_10;
      case 2uLL:
        if (*(void *)(v3 + 16) != *(void *)(v3 + 24)) {
          goto LABEL_9;
        }
        goto LABEL_10;
      case 3uLL:
        goto LABEL_10;
      default:
        if ((v4 & 0xFF000000000000) == 0) {
          goto LABEL_10;
        }
LABEL_9:
        uint64_t result = sub_24A2A7090();
        if (!v1)
        {
LABEL_10:
          uint64_t v5 = v0[4];
          unint64_t v6 = v0[5];
          switch(v6 >> 62)
          {
            case 1uLL:
              if ((int)v5 != v5 >> 32) {
                goto LABEL_16;
              }
              goto LABEL_17;
            case 2uLL:
              if (*(void *)(v5 + 16) != *(void *)(v5 + 24)) {
                goto LABEL_16;
              }
              goto LABEL_17;
            case 3uLL:
              goto LABEL_17;
            default:
              if ((v6 & 0xFF000000000000) == 0) {
                goto LABEL_17;
              }
LABEL_16:
              uint64_t result = sub_24A2A7090();
              if (!v1)
              {
LABEL_17:
                type metadata accessor for VRFWitness(0);
                uint64_t result = sub_24A2A6DF0();
              }
              break;
          }
        }
        break;
    }
  }
  return result;
}

uint64_t sub_24A218B48@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
  *(_OWORD *)(a1 + 16) = xmmword_24A2A8A80;
  *(_OWORD *)(a1 + 32) = xmmword_24A2A8A80;
  return sub_24A2A6E00();
}

uint64_t sub_24A218B80()
{
  return 0x656E746957465256;
}

uint64_t sub_24A218B9C()
{
  return sub_24A21888C();
}

uint64_t sub_24A218BB4()
{
  return sub_24A218984();
}

uint64_t sub_24A218BCC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A227048(&qword_269779238, (void (*)(uint64_t))type metadata accessor for VRFWitness);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t sub_24A218C48@<X0>(uint64_t a1@<X8>)
{
  return sub_24A1ADE40(&qword_269778498, (uint64_t)qword_26977A598, a1);
}

uint64_t sub_24A218C6C(uint64_t a1)
{
  uint64_t v2 = sub_24A227048(&qword_269779218, (void (*)(uint64_t))type metadata accessor for VRFWitness);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t sub_24A218CD8()
{
  sub_24A227048(&qword_269779218, (void (*)(uint64_t))type metadata accessor for VRFWitness);

  return sub_24A2A7010();
}

uint64_t sub_24A218D58()
{
  uint64_t v0 = sub_24A2A7130();
  __swift_allocate_value_buffer(v0, qword_26977A5B0);
  __swift_project_value_buffer(v0, (uint64_t)qword_26977A5B0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697787B0);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2697787B8) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_24A2A8AA0;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *uint64_t v5 = 1;
  *(void *)unint64_t v6 = "vrfKey";
  *(void *)(v6 + 8) = 6;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = sub_24A2A7100();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "type";
  *((void *)v10 + 1) = 4;
  v10[16] = 2;
  v9();
  return sub_24A2A7110();
}

uint64_t sub_24A218F10()
{
  uint64_t result = sub_24A2A6ED0();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        sub_24A22B46C();
        sub_24A2A6F10();
      }
      else if (result == 1)
      {
        sub_24A2A6F40();
      }
      uint64_t result = sub_24A2A6ED0();
    }
  }
  return result;
}

uint64_t sub_24A218FF8()
{
  return 0x696C627550465256;
}

uint64_t (*sub_24A219020())()
{
  return nullsub_1;
}

uint64_t sub_24A219044()
{
  return sub_24A218F10();
}

uint64_t sub_24A21905C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24A226580(a1, a2, a3, (void (*)(uint64_t))sub_24A22B46C, 2, (uint64_t)&type metadata for VRFType, (void (*)(void))type metadata accessor for VRFPublicKey);
}

uint64_t sub_24A2190A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A227048(&qword_269779248, (void (*)(uint64_t))type metadata accessor for VRFPublicKey);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t sub_24A219124@<X0>(uint64_t a1@<X8>)
{
  return sub_24A1ADE40(&qword_2697784A0, (uint64_t)qword_26977A5B0, a1);
}

uint64_t sub_24A219148(uint64_t a1)
{
  uint64_t v2 = sub_24A227048(&qword_2697791F8, (void (*)(uint64_t))type metadata accessor for VRFPublicKey);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t sub_24A2191B4()
{
  sub_24A227048(&qword_2697791F8, (void (*)(uint64_t))type metadata accessor for VRFPublicKey);

  return sub_24A2A7010();
}

uint64_t sub_24A219234()
{
  uint64_t v0 = sub_24A2A7130();
  __swift_allocate_value_buffer(v0, qword_26977A5C8);
  __swift_project_value_buffer(v0, (uint64_t)qword_26977A5C8);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697787B0);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2697787B8) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_24A2A8A70;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *uint64_t v5 = 1;
  *(void *)unint64_t v6 = "signature";
  *(void *)(v6 + 8) = 9;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = sub_24A2A7100();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "signingKeySPKIHash";
  *((void *)v10 + 1) = 18;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "algorithm";
  *(void *)(v11 + 8) = 9;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return sub_24A2A7110();
}

uint64_t sub_24A219438()
{
  uint64_t result = sub_24A2A6ED0();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 3)
      {
        sub_24A22B6D4();
        sub_24A2A6F10();
      }
      else if (result == 2 || result == 1)
      {
        sub_24A2A6F40();
      }
      uint64_t result = sub_24A2A6ED0();
    }
  }
  return result;
}

uint64_t sub_24A219530()
{
  uint64_t v2 = *v0;
  unint64_t v3 = v0[1];
  switch(v3 >> 62)
  {
    case 1uLL:
      if ((int)v2 != v2 >> 32) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 2uLL:
      if (*(void *)(v2 + 16) != *(void *)(v2 + 24)) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 3uLL:
      goto LABEL_8;
    default:
      if ((v3 & 0xFF000000000000) == 0) {
        goto LABEL_8;
      }
LABEL_7:
      uint64_t result = sub_24A2A7090();
      if (!v1)
      {
LABEL_8:
        uint64_t v5 = v0[2];
        unint64_t v6 = v0[3];
        switch(v6 >> 62)
        {
          case 1uLL:
            if ((int)v5 != v5 >> 32) {
              goto LABEL_14;
            }
            goto LABEL_15;
          case 2uLL:
            if (*(void *)(v5 + 16) != *(void *)(v5 + 24)) {
              goto LABEL_14;
            }
            goto LABEL_15;
          case 3uLL:
            goto LABEL_15;
          default:
            if ((v6 & 0xFF000000000000) == 0) {
              goto LABEL_15;
            }
LABEL_14:
            uint64_t result = sub_24A2A7090();
            if (!v1)
            {
LABEL_15:
              if (!v0[4] || (sub_24A22B6D4(), uint64_t result = sub_24A2A7070(), !v1))
              {
                type metadata accessor for Signature(0);
                uint64_t result = sub_24A2A6DF0();
              }
            }
            break;
        }
      }
      return result;
  }
}

uint64_t sub_24A2196F8@<X0>(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_24A2A8A80;
  *(_OWORD *)(a1 + 16) = xmmword_24A2A8A80;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 1;
  return sub_24A2A6E00();
}

uint64_t sub_24A219730()
{
  return 0x727574616E676953;
}

uint64_t sub_24A21974C()
{
  return sub_24A219438();
}

uint64_t sub_24A219764()
{
  return sub_24A219530();
}

uint64_t sub_24A21977C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A227048(&qword_269779250, (void (*)(uint64_t))type metadata accessor for Signature);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t sub_24A2197F8@<X0>(uint64_t a1@<X8>)
{
  return sub_24A1ADE40(&qword_2697784A8, (uint64_t)qword_26977A5C8, a1);
}

uint64_t sub_24A21981C(uint64_t a1)
{
  uint64_t v2 = sub_24A227048(&qword_26B174998, (void (*)(uint64_t))type metadata accessor for Signature);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t sub_24A219888()
{
  sub_24A227048(&qword_26B174998, (void (*)(uint64_t))type metadata accessor for Signature);

  return sub_24A2A7010();
}

uint64_t sub_24A219908()
{
  uint64_t v0 = sub_24A2A7130();
  __swift_allocate_value_buffer(v0, qword_26977A5E0);
  __swift_project_value_buffer(v0, (uint64_t)qword_26977A5E0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697787B0);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2697787B8) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_24A2A8AA0;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *uint64_t v5 = 0;
  *(void *)unint64_t v6 = "UNKNOWN";
  *(void *)(v6 + 8) = 7;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = sub_24A2A7100();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 1;
  *(void *)unint64_t v10 = "ECDSA_SHA256";
  *((void *)v10 + 1) = 12;
  v10[16] = 2;
  v9();
  return sub_24A2A7110();
}

uint64_t sub_24A219AC0@<X0>(uint64_t a1@<X8>)
{
  return sub_24A1ADE40(&qword_2697784B0, (uint64_t)qword_26977A5E0, a1);
}

uint64_t sub_24A219AE4()
{
  uint64_t v0 = sub_24A2A7130();
  __swift_allocate_value_buffer(v0, qword_26977A5F8);
  __swift_project_value_buffer(v0, (uint64_t)qword_26977A5F8);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697787B0);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2697787B8) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_24A2A8AA0;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *uint64_t v5 = 1;
  *(void *)unint64_t v6 = "object";
  *(void *)(v6 + 8) = 6;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = sub_24A2A7100();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "signature";
  *((void *)v10 + 1) = 9;
  v10[16] = 2;
  v9();
  return sub_24A2A7110();
}

uint64_t sub_24A219C9C()
{
  while (1)
  {
    uint64_t result = sub_24A2A6ED0();
    if (v0 || (v2 & 1) != 0) {
      break;
    }
    if (result == 2)
    {
      sub_24A219D2C();
    }
    else if (result == 1)
    {
      sub_24A2A6F40();
    }
  }
  return result;
}

uint64_t sub_24A219D2C()
{
  return sub_24A2A6FA0();
}

uint64_t sub_24A219DDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  unint64_t v8 = v3[1];
  switch(v8 >> 62)
  {
    case 1uLL:
      if ((int)v7 != v7 >> 32) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 2uLL:
      if (*(void *)(v7 + 16) != *(void *)(v7 + 24)) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 3uLL:
      goto LABEL_8;
    default:
      if ((v8 & 0xFF000000000000) == 0) {
        goto LABEL_8;
      }
LABEL_7:
      uint64_t result = sub_24A2A7090();
      if (!v4)
      {
LABEL_8:
        uint64_t result = sub_24A219EEC((uint64_t)v3, a1, a2, a3);
        if (!v4)
        {
          type metadata accessor for SignedObject(0);
          return sub_24A2A6DF0();
        }
      }
      return result;
  }
}

uint64_t sub_24A219EEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Signature(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for SignedObject(0);
  sub_24A1B2CAC(a1 + *(int *)(v12 + 24), (uint64_t)v7, &qword_26B1749B8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_24A1B2D10((uint64_t)v7, &qword_26B1749B8);
  }
  sub_24A22B404((uint64_t)v7, (uint64_t)v11, type metadata accessor for Signature);
  sub_24A227048(&qword_26B174998, (void (*)(uint64_t))type metadata accessor for Signature);
  sub_24A2A70F0();
  return sub_24A2202DC((uint64_t)v11, type metadata accessor for Signature);
}

uint64_t sub_24A21A0E8@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  *a2 = xmmword_24A2A8A80;
  sub_24A2A6E00();
  uint64_t v4 = (char *)a2 + *(int *)(a1 + 24);
  uint64_t v5 = type metadata accessor for Signature(0);
  uint64_t v6 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);

  return v6(v4, 1, 1, v5);
}

uint64_t sub_24A21A178()
{
  return 0x624F64656E676953;
}

uint64_t sub_24A21A1A0()
{
  return sub_24A219C9C();
}

uint64_t sub_24A21A1B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24A219DDC(a1, a2, a3);
}

uint64_t sub_24A21A1D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A227048(&qword_269779258, (void (*)(uint64_t))type metadata accessor for SignedObject);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t sub_24A21A24C@<X0>(uint64_t a1@<X8>)
{
  return sub_24A1ADE40(&qword_2697784B8, (uint64_t)qword_26977A5F8, a1);
}

uint64_t sub_24A21A270(uint64_t a1)
{
  uint64_t v2 = sub_24A227048(&qword_26B174300, (void (*)(uint64_t))type metadata accessor for SignedObject);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t sub_24A21A2DC()
{
  sub_24A227048(&qword_26B174300, (void (*)(uint64_t))type metadata accessor for SignedObject);

  return sub_24A2A7010();
}

uint64_t sub_24A21A35C()
{
  uint64_t v0 = sub_24A2A7130();
  __swift_allocate_value_buffer(v0, qword_26977A610);
  __swift_project_value_buffer(v0, (uint64_t)qword_26977A610);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697787B0);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2697787B8) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_24A2AB820;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "logBeginningMs";
  *(void *)(v6 + 8) = 14;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = sub_24A2A7100();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "logSize";
  *(void *)(v10 + 8) = 7;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  void *v11 = 3;
  *(void *)uint64_t v12 = "logHeadHash";
  *((void *)v12 + 1) = 11;
  v12[16] = 2;
  v9();
  unint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "revision";
  *((void *)v14 + 1) = 8;
  v14[16] = 2;
  v9();
  uint64_t v15 = (void *)(v5 + 4 * v2);
  unint64_t v16 = (char *)v15 + v1[14];
  void *v15 = 5;
  *(void *)unint64_t v16 = "logType";
  *((void *)v16 + 1) = 7;
  v16[16] = 2;
  v9();
  os_log_type_t v17 = (void *)(v5 + 5 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  void *v17 = 6;
  *(void *)uint64_t v18 = "application";
  *((void *)v18 + 1) = 11;
  v18[16] = 2;
  v9();
  uint64_t v19 = (void *)(v5 + 6 * v2);
  uint64_t v20 = (char *)v19 + v1[14];
  void *v19 = 7;
  *(void *)uint64_t v20 = "treeId";
  *((void *)v20 + 1) = 6;
  v20[16] = 2;
  v9();
  os_log_type_t v21 = (void *)(v5 + 7 * v2);
  uint64_t v22 = (char *)v21 + v1[14];
  *os_log_type_t v21 = 8;
  *(void *)uint64_t v22 = "timestampMs";
  *((void *)v22 + 1) = 11;
  v22[16] = 2;
  v9();
  return sub_24A2A7110();
}

uint64_t sub_24A21A698()
{
  uint64_t result = sub_24A2A6ED0();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
        case 4:
        case 7:
        case 8:
          uint64_t v4 = v3;
          sub_24A2A6F80();
          goto LABEL_10;
        case 3:
          uint64_t v4 = v3;
          sub_24A2A6F40();
          goto LABEL_10;
        case 5:
          sub_24A22B728();
          goto LABEL_8;
        case 6:
          sub_24A1AE988();
LABEL_8:
          uint64_t v4 = v3;
          sub_24A2A6F10();
LABEL_10:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = sub_24A2A6ED0();
    }
  }
  return result;
}

uint64_t sub_24A21A828()
{
  if (!*v0 || (uint64_t result = sub_24A2A70D0(), !v1))
  {
    if (!v0[1] || (uint64_t result = sub_24A2A70D0(), !v1))
    {
      uint64_t v3 = v0[2];
      unint64_t v4 = v0[3];
      switch(v4 >> 62)
      {
        case 1uLL:
          if ((int)v3 != v3 >> 32) {
            goto LABEL_11;
          }
          goto LABEL_12;
        case 2uLL:
          if (*(void *)(v3 + 16) != *(void *)(v3 + 24)) {
            goto LABEL_11;
          }
          goto LABEL_12;
        case 3uLL:
          goto LABEL_12;
        default:
          if ((v4 & 0xFF000000000000) == 0) {
            goto LABEL_12;
          }
LABEL_11:
          uint64_t result = sub_24A2A7090();
          if (!v1)
          {
LABEL_12:
            if (!v0[4] || (uint64_t result = sub_24A2A70D0(), !v1))
            {
              if (!v0[5] || (sub_24A22B728(), uint64_t result = sub_24A2A7070(), !v1))
              {
                if (!v0[7] || (sub_24A1AE988(), uint64_t result = sub_24A2A7070(), !v1))
                {
                  if (!v0[9] || (uint64_t result = sub_24A2A70D0(), !v1))
                  {
                    if (!v0[10] || (uint64_t result = sub_24A2A70D0(), !v1))
                    {
                      type metadata accessor for LogHead(0);
                      uint64_t result = sub_24A2A6DF0();
                    }
                  }
                }
              }
            }
          }
          break;
      }
    }
  }
  return result;
}

uint64_t sub_24A21AA5C@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0xC000000000000000;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 48) = 1;
  *(void *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 64) = 1;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  return sub_24A2A6E00();
}

uint64_t sub_24A21AAA0()
{
  return 0x64616548676F4CLL;
}

uint64_t (*sub_24A21AAC0())()
{
  return nullsub_1;
}

uint64_t sub_24A21AAE4()
{
  return sub_24A21A698();
}

uint64_t sub_24A21AAFC()
{
  return sub_24A21A828();
}

uint64_t sub_24A21AB14(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A227048(&qword_269779260, (void (*)(uint64_t))type metadata accessor for LogHead);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t sub_24A21AB90@<X0>(uint64_t a1@<X8>)
{
  return sub_24A1ADE40(&qword_2697784C0, (uint64_t)qword_26977A610, a1);
}

uint64_t sub_24A21ABB4(uint64_t a1)
{
  uint64_t v2 = sub_24A227048(&qword_2697791B8, (void (*)(uint64_t))type metadata accessor for LogHead);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t sub_24A21AC20()
{
  sub_24A227048(&qword_2697791B8, (void (*)(uint64_t))type metadata accessor for LogHead);

  return sub_24A2A7010();
}

uint64_t sub_24A21ACA0()
{
  uint64_t v0 = sub_24A2A7130();
  __swift_allocate_value_buffer(v0, qword_26977A628);
  __swift_project_value_buffer(v0, (uint64_t)qword_26977A628);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697787B0);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2697787B8) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_24A2A8A30;
  unint64_t v4 = v18 + v3 + v1[14];
  *(void *)(v18 + v3) = 1;
  *(void *)unint64_t v4 = "logType";
  *(void *)(v4 + 8) = 7;
  *(unsigned char *)(v4 + 16) = 2;
  uint64_t v5 = *MEMORY[0x263F50718];
  uint64_t v6 = sub_24A2A7100();
  uint64_t v7 = *(void (**)(void))(*(void *)(v6 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v7)(v4, v5, v6);
  unint64_t v8 = v18 + v3 + v2 + v1[14];
  *(void *)(v18 + v3 + v2) = 2;
  *(void *)unint64_t v8 = "slh";
  *(void *)(v8 + 8) = 3;
  *(unsigned char *)(v8 + 16) = 2;
  v7();
  uint64_t v9 = (void *)(v18 + v3 + 2 * v2);
  unint64_t v10 = (char *)v9 + v1[14];
  void *v9 = 3;
  *(void *)unint64_t v10 = "hashesOfPeersInPathToRoot";
  *((void *)v10 + 1) = 25;
  v10[16] = 2;
  v7();
  uint64_t v11 = (void *)(v18 + v3 + 3 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  void *v11 = 4;
  *(void *)uint64_t v12 = "nodeBytes";
  *((void *)v12 + 1) = 9;
  v12[16] = 2;
  v7();
  unint64_t v13 = (void *)(v18 + v3 + 4 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 5;
  *(void *)uint64_t v14 = "nodePosition";
  *((void *)v14 + 1) = 12;
  v14[16] = 2;
  v7();
  uint64_t v15 = (void *)(v18 + v3 + 5 * v2);
  unint64_t v16 = (char *)v15 + v1[14];
  void *v15 = 6;
  *(void *)unint64_t v16 = "nodeType";
  *((void *)v16 + 1) = 8;
  v16[16] = 2;
  v7();
  return sub_24A2A7110();
}

uint64_t sub_24A21AF54()
{
  uint64_t result = sub_24A2A6ED0();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          sub_24A22B728();
          goto LABEL_5;
        case 2:
          uint64_t v4 = v3;
          sub_24A21B0D4();
          goto LABEL_6;
        case 3:
          uint64_t v4 = v3;
          sub_24A2A6F20();
          goto LABEL_6;
        case 4:
          uint64_t v4 = v3;
          sub_24A2A6F40();
          goto LABEL_6;
        case 5:
          uint64_t v4 = v3;
          sub_24A2A6F80();
          goto LABEL_6;
        case 6:
          sub_24A22B77C();
LABEL_5:
          uint64_t v4 = v3;
          sub_24A2A6F10();
LABEL_6:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = sub_24A2A6ED0();
    }
  }
  return result;
}

uint64_t sub_24A21B0D4()
{
  return sub_24A2A6FA0();
}

uint64_t sub_24A21B184(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*v3 || (sub_24A22B728(), uint64_t result = sub_24A2A7070(), !v4))
  {
    uint64_t result = sub_24A21B384((uint64_t)v3, a1, a2, a3);
    if (!v4)
    {
      if (*(void *)(v3[2] + 16)) {
        sub_24A2A7080();
      }
      uint64_t v9 = v3[3];
      unint64_t v10 = v3[4];
      switch(v10 >> 62)
      {
        case 1uLL:
          if ((int)v9 != v9 >> 32) {
            goto LABEL_13;
          }
          break;
        case 2uLL:
          if (*(void *)(v9 + 16) != *(void *)(v9 + 24)) {
            goto LABEL_13;
          }
          break;
        case 3uLL:
          break;
        default:
          if ((v10 & 0xFF000000000000) != 0) {
LABEL_13:
          }
            sub_24A2A7090();
          break;
      }
      if (v3[5]) {
        sub_24A2A70D0();
      }
      if (v3[6])
      {
        sub_24A22B77C();
        sub_24A2A7070();
      }
      type metadata accessor for LogEntry(0);
      return sub_24A2A6DF0();
    }
  }
  return result;
}

uint64_t sub_24A21B384(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174320);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for SignedObject(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for LogEntry(0);
  sub_24A1B2CAC(a1 + *(int *)(v12 + 40), (uint64_t)v7, &qword_26B174320);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_24A1B2D10((uint64_t)v7, &qword_26B174320);
  }
  sub_24A22B404((uint64_t)v7, (uint64_t)v11, type metadata accessor for SignedObject);
  sub_24A227048(&qword_26B174300, (void (*)(uint64_t))type metadata accessor for SignedObject);
  sub_24A2A70F0();
  return sub_24A2202DC((uint64_t)v11, type metadata accessor for SignedObject);
}

uint64_t sub_24A21B580@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 8) = 1;
  *(void *)(a2 + 16) = MEMORY[0x263F8EE78];
  *(_OWORD *)(a2 + 24) = xmmword_24A2A8A80;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(unsigned char *)(a2 + 56) = 1;
  sub_24A2A6E00();
  uint64_t v4 = a2 + *(int *)(a1 + 40);
  uint64_t v5 = type metadata accessor for SignedObject(0);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);

  return v6(v4, 1, 1, v5);
}

uint64_t sub_24A21B630()
{
  return 0x7972746E45676F4CLL;
}

uint64_t sub_24A21B648()
{
  return sub_24A21AF54();
}

uint64_t sub_24A21B660(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24A21B184(a1, a2, a3);
}

uint64_t sub_24A21B678(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A227048(&qword_269779268, (void (*)(uint64_t))type metadata accessor for LogEntry);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t sub_24A21B6F4@<X0>(uint64_t a1@<X8>)
{
  return sub_24A1ADE40(&qword_2697784C8, (uint64_t)qword_26977A628, a1);
}

uint64_t sub_24A21B718(uint64_t a1)
{
  uint64_t v2 = sub_24A227048(&qword_26B174920, (void (*)(uint64_t))type metadata accessor for LogEntry);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t sub_24A21B784()
{
  sub_24A227048(&qword_26B174920, (void (*)(uint64_t))type metadata accessor for LogEntry);

  return sub_24A2A7010();
}

uint64_t sub_24A21B804()
{
  uint64_t v0 = sub_24A2A7130();
  __swift_allocate_value_buffer(v0, qword_26977A640);
  __swift_project_value_buffer(v0, (uint64_t)qword_26977A640);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697787B0);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2697787B8) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_24A2AB830;
  unint64_t v4 = v24 + v3;
  unint64_t v5 = v24 + v3 + v1[14];
  *(void *)(v24 + v3) = 1;
  *(void *)unint64_t v5 = "logBeginningMs";
  *(void *)(v5 + 8) = 14;
  *(unsigned char *)(v5 + 16) = 2;
  uint64_t v6 = *MEMORY[0x263F50718];
  uint64_t v7 = sub_24A2A7100();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  unint64_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)unint64_t v9 = "mapHeadHash";
  *(void *)(v9 + 8) = 11;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  uint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  void *v10 = 3;
  *(void *)uint64_t v11 = "application";
  *((void *)v11 + 1) = 11;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  unint64_t v13 = (char *)v12 + v1[14];
  void *v12 = 4;
  *(void *)unint64_t v13 = "changeLogHead";
  *((void *)v13 + 1) = 13;
  unsigned char v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  void *v14 = 5;
  *(void *)uint64_t v15 = "revision";
  *((void *)v15 + 1) = 8;
  v15[16] = 2;
  v8();
  unint64_t v16 = (void *)(v4 + 5 * v2);
  os_log_type_t v17 = (char *)v16 + v1[14];
  void *v16 = 6;
  *(void *)os_log_type_t v17 = "mapType";
  *((void *)v17 + 1) = 7;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "treeId";
  *((void *)v19 + 1) = 6;
  v19[16] = 2;
  v8();
  uint64_t v20 = (void *)(v4 + 7 * v2);
  os_log_type_t v21 = (char *)v20 + v1[14];
  *uint64_t v20 = 8;
  *(void *)os_log_type_t v21 = "timestampMs";
  *((void *)v21 + 1) = 11;
  v21[16] = 2;
  v8();
  uint64_t v22 = v4 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 9;
  *(void *)uint64_t v22 = "populating";
  *(void *)(v22 + 8) = 10;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  return sub_24A2A7110();
}

uint64_t sub_24A21BB78()
{
  uint64_t result = sub_24A2A6ED0();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 5:
        case 7:
        case 8:
          sub_24A2A6F80();
          break;
        case 2:
          sub_24A2A6F40();
          break;
        case 3:
          sub_24A1AE988();
          goto LABEL_9;
        case 4:
          sub_24A21BD58();
          break;
        case 6:
          sub_24A22B7D0();
LABEL_9:
          sub_24A2A6F10();
          break;
        case 9:
          sub_24A2A6F00();
          break;
        default:
          break;
      }
      uint64_t result = sub_24A2A6ED0();
    }
  }
  return result;
}

uint64_t sub_24A21BD58()
{
  return sub_24A2A6FA0();
}

uint64_t sub_24A21BE08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  if (!*(void *)v5 || (uint64_t result = sub_24A2A70D0(), !v4))
  {
    uint64_t v10 = *(void *)(v5 + 8);
    unint64_t v11 = *(void *)(v5 + 16);
    switch(v11 >> 62)
    {
      case 1uLL:
        if ((int)v10 != v10 >> 32) {
          goto LABEL_9;
        }
        goto LABEL_10;
      case 2uLL:
        if (*(void *)(v10 + 16) != *(void *)(v10 + 24)) {
          goto LABEL_9;
        }
        goto LABEL_10;
      case 3uLL:
        goto LABEL_10;
      default:
        if ((v11 & 0xFF000000000000) == 0) {
          goto LABEL_10;
        }
LABEL_9:
        uint64_t result = sub_24A2A7090();
        if (!v4)
        {
LABEL_10:
          if (!*(void *)(v5 + 24) || (sub_24A1AE988(), uint64_t result = sub_24A2A7070(), !v4))
          {
            uint64_t result = sub_24A21C068(v5, a1, a2, a3);
            if (!v4)
            {
              if (*(void *)(v5 + 40)) {
                sub_24A2A70D0();
              }
              if (*(void *)(v5 + 48))
              {
                sub_24A22B7D0();
                sub_24A2A7070();
              }
              if (*(void *)(v5 + 64)) {
                sub_24A2A70D0();
              }
              if (*(void *)(v5 + 72)) {
                sub_24A2A70D0();
              }
              if (*(unsigned char *)(v5 + 80) == 1) {
                sub_24A2A7060();
              }
              type metadata accessor for MapHead(0);
              uint64_t result = sub_24A2A6DF0();
            }
          }
        }
        break;
    }
  }
  return result;
}

uint64_t sub_24A21C068(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_269779280);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for LogHead(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  unint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for MapHead(0);
  sub_24A1B2CAC(a1 + *(int *)(v12 + 52), (uint64_t)v7, &qword_269779280);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_24A1B2D10((uint64_t)v7, &qword_269779280);
  }
  sub_24A22B404((uint64_t)v7, (uint64_t)v11, type metadata accessor for LogHead);
  sub_24A227048(&qword_2697791B8, (void (*)(uint64_t))type metadata accessor for LogHead);
  sub_24A2A70F0();
  return sub_24A2202DC((uint64_t)v11, type metadata accessor for LogHead);
}

uint64_t sub_24A21C260@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_OWORD *)(a2 + 16) = xmmword_24A2A8A50;
  *(unsigned char *)(a2 + 32) = 1;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(unsigned char *)(a2 + 56) = 1;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(unsigned char *)(a2 + 80) = 0;
  sub_24A2A6E00();
  uint64_t v4 = a2 + *(int *)(a1 + 52);
  uint64_t v5 = type metadata accessor for LogHead(0);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);

  return v6(v4, 1, 1, v5);
}

uint64_t sub_24A21C30C()
{
  return 0x6461654870614DLL;
}

uint64_t sub_24A21C324@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 48);
  uint64_t v5 = sub_24A2A6E10();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t sub_24A21C394(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 48);
  uint64_t v5 = sub_24A2A6E10();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);

  return v6(v4, a1, v5);
}

uint64_t sub_24A21C404()
{
  return sub_24A21BB78();
}

uint64_t sub_24A21C41C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24A21BE08(a1, a2, a3);
}

uint64_t sub_24A21C434(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A227048(&qword_269779270, (void (*)(uint64_t))type metadata accessor for MapHead);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t sub_24A21C4B0@<X0>(uint64_t a1@<X8>)
{
  return sub_24A1ADE40(&qword_2697784D0, (uint64_t)qword_26977A640, a1);
}

uint64_t sub_24A21C4D4(uint64_t a1)
{
  uint64_t v2 = sub_24A227048(&qword_269779188, (void (*)(uint64_t))type metadata accessor for MapHead);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t sub_24A21C540()
{
  sub_24A227048(&qword_269779188, (void (*)(uint64_t))type metadata accessor for MapHead);

  return sub_24A2A7010();
}

uint64_t sub_24A21C5C0()
{
  uint64_t v0 = sub_24A2A7130();
  __swift_allocate_value_buffer(v0, qword_26977A658);
  __swift_project_value_buffer(v0, (uint64_t)qword_26977A658);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697787B0);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2697787B8) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_24A2A8A70;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *uint64_t v5 = 1;
  *(void *)unint64_t v6 = "smh";
  *(void *)(v6 + 8) = 3;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = sub_24A2A7100();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "hashesOfPeersInPathToRoot";
  *((void *)v10 + 1) = 25;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "mapLeaf";
  *(void *)(v11 + 8) = 7;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return sub_24A2A7110();
}

uint64_t sub_24A21C7C4()
{
  uint64_t result = sub_24A2A6ED0();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 3:
          sub_24A2A6F40();
          break;
        case 2:
          sub_24A2A6F20();
          break;
        case 1:
          sub_24A21C88C();
          break;
      }
      uint64_t result = sub_24A2A6ED0();
    }
  }
  return result;
}

uint64_t sub_24A21C88C()
{
  return sub_24A2A6FA0();
}

uint64_t sub_24A21C93C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_24A21CA70((uint64_t)v3, a1, a2, a3);
  if (!v4)
  {
    if (*(void *)(*v3 + 16)) {
      sub_24A2A7080();
    }
    uint64_t v6 = v3[1];
    unint64_t v7 = v3[2];
    switch(v7 >> 62)
    {
      case 1uLL:
        if ((int)v6 != v6 >> 32) {
          goto LABEL_10;
        }
        break;
      case 2uLL:
        if (*(void *)(v6 + 16) != *(void *)(v6 + 24)) {
          goto LABEL_10;
        }
        break;
      case 3uLL:
        break;
      default:
        if ((v7 & 0xFF000000000000) != 0) {
LABEL_10:
        }
          sub_24A2A7090();
        break;
    }
    type metadata accessor for MapEntry(0);
    return sub_24A2A6DF0();
  }
  return result;
}

uint64_t sub_24A21CA70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174320);
  MEMORY[0x270FA5388](v5 - 8);
  unint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for SignedObject(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for MapEntry(0);
  sub_24A1B2CAC(a1 + *(int *)(v12 + 28), (uint64_t)v7, &qword_26B174320);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_24A1B2D10((uint64_t)v7, &qword_26B174320);
  }
  sub_24A22B404((uint64_t)v7, (uint64_t)v11, type metadata accessor for SignedObject);
  sub_24A227048(&qword_26B174300, (void (*)(uint64_t))type metadata accessor for SignedObject);
  sub_24A2A70F0();
  return sub_24A2202DC((uint64_t)v11, type metadata accessor for SignedObject);
}

uint64_t sub_24A21CC6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = MEMORY[0x263F8EE78];
  *(_OWORD *)(a2 + 8) = xmmword_24A2A8A80;
  sub_24A2A6E00();
  uint64_t v4 = a2 + *(int *)(a1 + 28);
  uint64_t v5 = type metadata accessor for SignedObject(0);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);

  return v6(v4, 1, 1, v5);
}

uint64_t sub_24A21CD08()
{
  return 0x7972746E4570614DLL;
}

uint64_t sub_24A21CD20()
{
  return sub_24A21C7C4();
}

uint64_t sub_24A21CD38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24A21C93C(a1, a2, a3);
}

uint64_t sub_24A21CD50(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A227048(&qword_269779290, (void (*)(uint64_t))type metadata accessor for MapEntry);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t sub_24A21CDCC@<X0>(uint64_t a1@<X8>)
{
  return sub_24A1ADE40(&qword_2697784D8, (uint64_t)qword_26977A658, a1);
}

uint64_t sub_24A21CDF0(uint64_t a1)
{
  uint64_t v2 = sub_24A227048(&qword_269779168, (void (*)(uint64_t))type metadata accessor for MapEntry);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t sub_24A21CE5C()
{
  sub_24A227048(&qword_269779168, (void (*)(uint64_t))type metadata accessor for MapEntry);

  return sub_24A2A7010();
}

uint64_t sub_24A21CEDC()
{
  uint64_t v0 = sub_24A2A7130();
  __swift_allocate_value_buffer(v0, qword_26977A670);
  __swift_project_value_buffer(v0, (uint64_t)qword_26977A670);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697787B0);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2697787B8) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_24A2A8A90;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 2;
  *(void *)unint64_t v6 = "mapEntry";
  *(void *)(v6 + 8) = 8;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = sub_24A2A7100();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 3;
  *(void *)unint64_t v10 = "index";
  *(void *)(v10 + 8) = 5;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  void *v11 = 4;
  *(void *)uint64_t v12 = "perApplicationTreeEntry";
  *((void *)v12 + 1) = 23;
  v12[16] = 2;
  v9();
  unint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 5;
  *(void *)uint64_t v14 = "topLevelTreeEntry";
  *((void *)v14 + 1) = 17;
  v14[16] = 2;
  v9();
  return sub_24A2A7110();
}

uint64_t sub_24A21D114()
{
  type metadata accessor for InclusionProof._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV16CloudAttestation14InclusionProofP33_169C9B08F2DC833EDD0C19E1D431E7CF13_StorageClass__mapEntry;
  uint64_t v2 = type metadata accessor for MapEntry(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  *(_OWORD *)(v0
            + OBJC_IVAR____TtCV16CloudAttestation14InclusionProofP33_169C9B08F2DC833EDD0C19E1D431E7CF13_StorageClass__index) = xmmword_24A2A8A80;
  uint64_t v3 = v0
     + OBJC_IVAR____TtCV16CloudAttestation14InclusionProofP33_169C9B08F2DC833EDD0C19E1D431E7CF13_StorageClass__perApplicationTreeEntry;
  uint64_t v4 = type metadata accessor for LogEntry(0);
  unint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  v5(v3, 1, 1, v4);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v5)(v0+ OBJC_IVAR____TtCV16CloudAttestation14InclusionProofP33_169C9B08F2DC833EDD0C19E1D431E7CF13_StorageClass__topLevelTreeEntry, 1, 1, v4);
  qword_269778FE8 = v0;
  return result;
}

uint64_t sub_24A21D234(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174940);
  MEMORY[0x270FA5388](v3 - 8);
  unint64_t v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2697792A0);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = v1
     + OBJC_IVAR____TtCV16CloudAttestation14InclusionProofP33_169C9B08F2DC833EDD0C19E1D431E7CF13_StorageClass__mapEntry;
  uint64_t v10 = type metadata accessor for MapEntry(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  uint64_t v11 = (uint64_t *)(v1
                  + OBJC_IVAR____TtCV16CloudAttestation14InclusionProofP33_169C9B08F2DC833EDD0C19E1D431E7CF13_StorageClass__index);
  *(_OWORD *)(v1
            + OBJC_IVAR____TtCV16CloudAttestation14InclusionProofP33_169C9B08F2DC833EDD0C19E1D431E7CF13_StorageClass__index) = xmmword_24A2A8A80;
  uint64_t v12 = v1
      + OBJC_IVAR____TtCV16CloudAttestation14InclusionProofP33_169C9B08F2DC833EDD0C19E1D431E7CF13_StorageClass__perApplicationTreeEntry;
  uint64_t v25 = v1;
  uint64_t v13 = type metadata accessor for LogEntry(0);
  uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
  v14(v12, 1, 1, v13);
  uint64_t v15 = v1
      + OBJC_IVAR____TtCV16CloudAttestation14InclusionProofP33_169C9B08F2DC833EDD0C19E1D431E7CF13_StorageClass__topLevelTreeEntry;
  v14(v1+ OBJC_IVAR____TtCV16CloudAttestation14InclusionProofP33_169C9B08F2DC833EDD0C19E1D431E7CF13_StorageClass__topLevelTreeEntry, 1, 1, v13);
  uint64_t v16 = a1
      + OBJC_IVAR____TtCV16CloudAttestation14InclusionProofP33_169C9B08F2DC833EDD0C19E1D431E7CF13_StorageClass__mapEntry;
  swift_beginAccess();
  sub_24A1B2CAC(v16, (uint64_t)v8, &qword_2697792A0);
  swift_beginAccess();
  sub_24A1B2B8C((uint64_t)v8, v9, &qword_2697792A0);
  swift_endAccess();
  os_log_type_t v17 = (uint64_t *)(a1
                  + OBJC_IVAR____TtCV16CloudAttestation14InclusionProofP33_169C9B08F2DC833EDD0C19E1D431E7CF13_StorageClass__index);
  swift_beginAccess();
  uint64_t v19 = *v17;
  unint64_t v18 = v17[1];
  swift_beginAccess();
  uint64_t v20 = *v11;
  unint64_t v21 = v11[1];
  uint64_t *v11 = v19;
  v11[1] = v18;
  sub_24A1A52B0(v19, v18);
  sub_24A1A5384(v20, v21);
  uint64_t v22 = a1
      + OBJC_IVAR____TtCV16CloudAttestation14InclusionProofP33_169C9B08F2DC833EDD0C19E1D431E7CF13_StorageClass__perApplicationTreeEntry;
  swift_beginAccess();
  sub_24A1B2CAC(v22, (uint64_t)v5, &qword_26B174940);
  swift_beginAccess();
  sub_24A1B2B8C((uint64_t)v5, v12, &qword_26B174940);
  swift_endAccess();
  uint64_t v23 = a1
      + OBJC_IVAR____TtCV16CloudAttestation14InclusionProofP33_169C9B08F2DC833EDD0C19E1D431E7CF13_StorageClass__topLevelTreeEntry;
  swift_beginAccess();
  sub_24A1B2CAC(v23, (uint64_t)v5, &qword_26B174940);
  swift_release();
  swift_beginAccess();
  sub_24A1B2B8C((uint64_t)v5, v15, &qword_26B174940);
  swift_endAccess();
  return v25;
}

uint64_t sub_24A21D578()
{
  sub_24A1B2D10(v0+ OBJC_IVAR____TtCV16CloudAttestation14InclusionProofP33_169C9B08F2DC833EDD0C19E1D431E7CF13_StorageClass__mapEntry, &qword_2697792A0);
  sub_24A1A5384(*(void *)(v0+ OBJC_IVAR____TtCV16CloudAttestation14InclusionProofP33_169C9B08F2DC833EDD0C19E1D431E7CF13_StorageClass__index), *(void *)(v0+ OBJC_IVAR____TtCV16CloudAttestation14InclusionProofP33_169C9B08F2DC833EDD0C19E1D431E7CF13_StorageClass__index+ 8));
  sub_24A1B2D10(v0+ OBJC_IVAR____TtCV16CloudAttestation14InclusionProofP33_169C9B08F2DC833EDD0C19E1D431E7CF13_StorageClass__perApplicationTreeEntry, &qword_26B174940);
  sub_24A1B2D10(v0+ OBJC_IVAR____TtCV16CloudAttestation14InclusionProofP33_169C9B08F2DC833EDD0C19E1D431E7CF13_StorageClass__topLevelTreeEntry, &qword_26B174940);
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x270FA0228](v0, v1, v2);
}

uint64_t sub_24A21D630()
{
  return type metadata accessor for InclusionProof._StorageClass(0);
}

uint64_t type metadata accessor for InclusionProof._StorageClass(uint64_t a1)
{
  return sub_24A1AE704(a1, (uint64_t *)&unk_269779018);
}

void sub_24A21D658()
{
  sub_24A21D780(319, &qword_269779028, (void (*)(uint64_t))type metadata accessor for MapEntry);
  if (v0 <= 0x3F)
  {
    sub_24A21D780(319, &qword_26B174948, (void (*)(uint64_t))type metadata accessor for LogEntry);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t type metadata accessor for MapEntry(uint64_t a1)
{
  return sub_24A1AE704(a1, (uint64_t *)&unk_269779050);
}

void sub_24A21D780(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_24A2A7B50();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t type metadata accessor for LogEntry(uint64_t a1)
{
  return sub_24A1AE704(a1, (uint64_t *)&unk_26B174930);
}

uint64_t sub_24A21D7F4()
{
  while (1)
  {
    uint64_t result = sub_24A2A6ED0();
    if (v0 || (v2 & 1) != 0) {
      return result;
    }
    switch(result)
    {
      case 2:
        sub_24A21D8EC();
        break;
      case 3:
        sub_24A21D9BC();
        break;
      case 4:
        sub_24A21DA44();
        break;
      case 5:
        sub_24A21DB14();
        break;
      default:
        continue;
    }
  }
}

uint64_t sub_24A21D8EC()
{
  return swift_endAccess();
}

uint64_t sub_24A21D9BC()
{
  return swift_endAccess();
}

uint64_t sub_24A21DA44()
{
  return swift_endAccess();
}

uint64_t sub_24A21DB14()
{
  return swift_endAccess();
}

uint64_t sub_24A21DBE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = sub_24A21DD3C(a1, a2, a3, a4);
  if (!v4)
  {
    uint64_t v10 = (uint64_t *)(a1
                    + OBJC_IVAR____TtCV16CloudAttestation14InclusionProofP33_169C9B08F2DC833EDD0C19E1D431E7CF13_StorageClass__index);
    swift_beginAccess();
    uint64_t v11 = *v10;
    unint64_t v12 = v10[1];
    switch(v12 >> 62)
    {
      case 1uLL:
        if ((int)v11 != v11 >> 32) {
          goto LABEL_8;
        }
        break;
      case 2uLL:
        if (*(void *)(v11 + 16) != *(void *)(v11 + 24)) {
          goto LABEL_8;
        }
        break;
      case 3uLL:
        break;
      default:
        if ((v12 & 0xFF000000000000) != 0)
        {
LABEL_8:
          sub_24A1A52B0(v11, v12);
          sub_24A2A7090();
          sub_24A1A5384(v11, v12);
        }
        break;
    }
    sub_24A21DF4C(a1, a2, a3, a4);
    return sub_24A21E15C(a1, a2, a3, a4);
  }
  return result;
}

uint64_t sub_24A21DD3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2697792A0);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for MapEntry(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV16CloudAttestation14InclusionProofP33_169C9B08F2DC833EDD0C19E1D431E7CF13_StorageClass__mapEntry;
  swift_beginAccess();
  sub_24A1B2CAC(v12, (uint64_t)v7, &qword_2697792A0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_24A1B2D10((uint64_t)v7, &qword_2697792A0);
  }
  sub_24A22B404((uint64_t)v7, (uint64_t)v11, type metadata accessor for MapEntry);
  sub_24A227048(&qword_269779168, (void (*)(uint64_t))type metadata accessor for MapEntry);
  sub_24A2A70F0();
  return sub_24A2202DC((uint64_t)v11, type metadata accessor for MapEntry);
}

uint64_t sub_24A21DF4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174940);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for LogEntry(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV16CloudAttestation14InclusionProofP33_169C9B08F2DC833EDD0C19E1D431E7CF13_StorageClass__perApplicationTreeEntry;
  swift_beginAccess();
  sub_24A1B2CAC(v12, (uint64_t)v7, &qword_26B174940);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_24A1B2D10((uint64_t)v7, &qword_26B174940);
  }
  sub_24A22B404((uint64_t)v7, (uint64_t)v11, type metadata accessor for LogEntry);
  sub_24A227048(&qword_26B174920, (void (*)(uint64_t))type metadata accessor for LogEntry);
  sub_24A2A70F0();
  return sub_24A2202DC((uint64_t)v11, type metadata accessor for LogEntry);
}

uint64_t sub_24A21E15C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174940);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for LogEntry(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV16CloudAttestation14InclusionProofP33_169C9B08F2DC833EDD0C19E1D431E7CF13_StorageClass__topLevelTreeEntry;
  swift_beginAccess();
  sub_24A1B2CAC(v12, (uint64_t)v7, &qword_26B174940);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_24A1B2D10((uint64_t)v7, &qword_26B174940);
  }
  sub_24A22B404((uint64_t)v7, (uint64_t)v11, type metadata accessor for LogEntry);
  sub_24A227048(&qword_26B174920, (void (*)(uint64_t))type metadata accessor for LogEntry);
  sub_24A2A70F0();
  return sub_24A2202DC((uint64_t)v11, type metadata accessor for LogEntry);
}

BOOL sub_24A21E36C(uint64_t a1, uint64_t a2)
{
  uint64_t v79 = a2;
  uint64_t v74 = type metadata accessor for LogEntry(0);
  uint64_t v73 = *(void *)(v74 - 8);
  MEMORY[0x270FA5388](v74);
  uint64_t v69 = (uint64_t *)((char *)&v67 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v77 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174950);
  uint64_t v4 = MEMORY[0x270FA5388](v77);
  uint64_t v70 = (uint64_t)&v67 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v75 = (uint64_t)&v67 - v6;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174940);
  uint64_t v8 = MEMORY[0x270FA5388](v7 - 8);
  uint64_t v68 = (char *)&v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v72 = (char *)&v67 - v11;
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v71 = (char *)&v67 - v13;
  MEMORY[0x270FA5388](v12);
  uint64_t v78 = (uint64_t)&v67 - v14;
  uint64_t v15 = type metadata accessor for MapEntry(0);
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v76 = (uint64_t *)((char *)&v67 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_2697792A8);
  uint64_t v19 = v18 - 8;
  MEMORY[0x270FA5388](v18);
  unint64_t v21 = (char *)&v67 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_2697792A0);
  uint64_t v23 = MEMORY[0x270FA5388](v22 - 8);
  uint64_t v25 = (uint64_t *)((char *)&v67 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v23);
  uint64_t v27 = (char *)&v67 - v26;
  uint64_t v28 = a1;
  uint64_t v29 = a1
      + OBJC_IVAR____TtCV16CloudAttestation14InclusionProofP33_169C9B08F2DC833EDD0C19E1D431E7CF13_StorageClass__mapEntry;
  swift_beginAccess();
  sub_24A1B2CAC(v29, (uint64_t)v27, &qword_2697792A0);
  uint64_t v30 = v79;
  uint64_t v31 = v79
      + OBJC_IVAR____TtCV16CloudAttestation14InclusionProofP33_169C9B08F2DC833EDD0C19E1D431E7CF13_StorageClass__mapEntry;
  swift_beginAccess();
  uint64_t v32 = (uint64_t)&v21[*(int *)(v19 + 56)];
  sub_24A1B2CAC((uint64_t)v27, (uint64_t)v21, &qword_2697792A0);
  sub_24A1B2CAC(v31, v32, &qword_2697792A0);
  uint64_t v33 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  if (v33((uint64_t)v21, 1, v15) == 1)
  {
    swift_retain();
    swift_retain();
    sub_24A1B2D10((uint64_t)v27, &qword_2697792A0);
    uint64_t v34 = v28;
    if (v33(v32, 1, v15) == 1)
    {
      sub_24A1B2D10((uint64_t)v21, &qword_2697792A0);
      goto LABEL_9;
    }
LABEL_6:
    uint64_t v35 = &qword_2697792A8;
    uint64_t v36 = (uint64_t)v21;
LABEL_7:
    sub_24A1B2D10(v36, v35);
    goto LABEL_20;
  }
  sub_24A1B2CAC((uint64_t)v21, (uint64_t)v25, &qword_2697792A0);
  if (v33(v32, 1, v15) == 1)
  {
    swift_retain();
    swift_retain();
    sub_24A1B2D10((uint64_t)v27, &qword_2697792A0);
    sub_24A2202DC((uint64_t)v25, type metadata accessor for MapEntry);
    goto LABEL_6;
  }
  unint64_t v37 = v76;
  sub_24A22B404(v32, (uint64_t)v76, type metadata accessor for MapEntry);
  uint64_t v34 = v28;
  swift_retain();
  swift_retain();
  char v38 = sub_24A229B9C(v25, v37);
  sub_24A2202DC((uint64_t)v37, type metadata accessor for MapEntry);
  sub_24A1B2D10((uint64_t)v27, &qword_2697792A0);
  sub_24A2202DC((uint64_t)v25, type metadata accessor for MapEntry);
  sub_24A1B2D10((uint64_t)v21, &qword_2697792A0);
  if ((v38 & 1) == 0) {
    goto LABEL_20;
  }
LABEL_9:
  uint64_t v39 = (uint64_t *)(v34
                  + OBJC_IVAR____TtCV16CloudAttestation14InclusionProofP33_169C9B08F2DC833EDD0C19E1D431E7CF13_StorageClass__index);
  swift_beginAccess();
  uint64_t v41 = *v39;
  unint64_t v40 = v39[1];
  unint64_t v42 = (uint64_t *)(v30
                  + OBJC_IVAR____TtCV16CloudAttestation14InclusionProofP33_169C9B08F2DC833EDD0C19E1D431E7CF13_StorageClass__index);
  swift_beginAccess();
  uint64_t v44 = *v42;
  unint64_t v43 = v42[1];
  sub_24A1A52B0(v41, v40);
  sub_24A1A52B0(v44, v43);
  char v45 = sub_24A1B7D80(v41, v40, v44, v43);
  sub_24A1A5384(v44, v43);
  sub_24A1A5384(v41, v40);
  if ((v45 & 1) == 0) {
    goto LABEL_20;
  }
  uint64_t v46 = v34
      + OBJC_IVAR____TtCV16CloudAttestation14InclusionProofP33_169C9B08F2DC833EDD0C19E1D431E7CF13_StorageClass__perApplicationTreeEntry;
  swift_beginAccess();
  uint64_t v47 = v78;
  sub_24A1B2CAC(v46, v78, &qword_26B174940);
  uint64_t v48 = v30
      + OBJC_IVAR____TtCV16CloudAttestation14InclusionProofP33_169C9B08F2DC833EDD0C19E1D431E7CF13_StorageClass__perApplicationTreeEntry;
  swift_beginAccess();
  uint64_t v49 = v75;
  uint64_t v50 = v75 + *(int *)(v77 + 48);
  sub_24A1B2CAC(v47, v75, &qword_26B174940);
  sub_24A1B2CAC(v48, v50, &qword_26B174940);
  uint64_t v51 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v73 + 48);
  uint64_t v52 = v74;
  if (v51(v49, 1, v74) != 1)
  {
    uint64_t v55 = v71;
    sub_24A1B2CAC(v49, (uint64_t)v71, &qword_26B174940);
    int v56 = v51(v50, 1, v52);
    uint64_t v54 = (uint64_t)v72;
    if (v56 != 1)
    {
      uint64_t v57 = v69;
      sub_24A22B404(v50, (uint64_t)v69, type metadata accessor for LogEntry);
      char v58 = sub_24A22AE28(v55, v57);
      sub_24A2202DC((uint64_t)v57, type metadata accessor for LogEntry);
      sub_24A1B2D10(v78, &qword_26B174940);
      sub_24A2202DC((uint64_t)v55, type metadata accessor for LogEntry);
      sub_24A1B2D10(v75, &qword_26B174940);
      if (v58) {
        goto LABEL_17;
      }
LABEL_20:
      swift_release();
      swift_release();
      return 0;
    }
    sub_24A1B2D10(v78, &qword_26B174940);
    sub_24A2202DC((uint64_t)v55, type metadata accessor for LogEntry);
    goto LABEL_15;
  }
  sub_24A1B2D10(v47, &qword_26B174940);
  int v53 = v51(v50, 1, v52);
  uint64_t v54 = (uint64_t)v72;
  if (v53 != 1)
  {
LABEL_15:
    uint64_t v35 = &qword_26B174950;
    uint64_t v36 = v49;
    goto LABEL_7;
  }
  sub_24A1B2D10(v49, &qword_26B174940);
LABEL_17:
  uint64_t v59 = v34
      + OBJC_IVAR____TtCV16CloudAttestation14InclusionProofP33_169C9B08F2DC833EDD0C19E1D431E7CF13_StorageClass__topLevelTreeEntry;
  swift_beginAccess();
  sub_24A1B2CAC(v59, v54, &qword_26B174940);
  uint64_t v60 = v30
      + OBJC_IVAR____TtCV16CloudAttestation14InclusionProofP33_169C9B08F2DC833EDD0C19E1D431E7CF13_StorageClass__topLevelTreeEntry;
  swift_beginAccess();
  uint64_t v61 = v70;
  uint64_t v62 = v70 + *(int *)(v77 + 48);
  sub_24A1B2CAC(v54, v70, &qword_26B174940);
  sub_24A1B2CAC(v60, v62, &qword_26B174940);
  if (v51(v61, 1, v52) == 1)
  {
    swift_release();
    swift_release();
    sub_24A1B2D10(v54, &qword_26B174940);
    if (v51(v62, 1, v52) == 1)
    {
      sub_24A1B2D10(v61, &qword_26B174940);
      return 1;
    }
    goto LABEL_25;
  }
  uint64_t v64 = v68;
  sub_24A1B2CAC(v61, (uint64_t)v68, &qword_26B174940);
  if (v51(v62, 1, v52) == 1)
  {
    swift_release();
    swift_release();
    sub_24A1B2D10(v54, &qword_26B174940);
    sub_24A2202DC((uint64_t)v64, type metadata accessor for LogEntry);
LABEL_25:
    sub_24A1B2D10(v61, &qword_26B174950);
    return 0;
  }
  uint64_t v65 = v69;
  sub_24A22B404(v62, (uint64_t)v69, type metadata accessor for LogEntry);
  char v66 = sub_24A22AE28(v64, v65);
  swift_release();
  swift_release();
  sub_24A2202DC((uint64_t)v65, type metadata accessor for LogEntry);
  sub_24A1B2D10(v54, &qword_26B174940);
  sub_24A2202DC((uint64_t)v64, type metadata accessor for LogEntry);
  sub_24A1B2D10(v61, &qword_26B174940);
  return (v66 & 1) != 0;
}

uint64_t sub_24A21EDBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_24A22485C(a1, &qword_2697784E8, &qword_269778FE8, a2);
}

uint64_t sub_24A21EDE0()
{
  return 0x6F6973756C636E49;
}

uint64_t sub_24A21EE04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24A2239EC(a1, a2, a3, type metadata accessor for InclusionProof, (void (*)(void))type metadata accessor for InclusionProof._StorageClass, sub_24A21D234, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24A21D7F4);
}

uint64_t sub_24A21EE6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24A223D14(a1, a2, a3, (void (*)(void))type metadata accessor for InclusionProof, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24A21DBE4);
}

uint64_t sub_24A21EEAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A227048(&qword_269779298, (void (*)(uint64_t))type metadata accessor for InclusionProof);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t sub_24A21EF28@<X0>(uint64_t a1@<X8>)
{
  return sub_24A1ADE40(&qword_2697784E0, (uint64_t)qword_26977A670, a1);
}

uint64_t sub_24A21EF4C(uint64_t a1)
{
  uint64_t v2 = sub_24A227048(&qword_269779148, (void (*)(uint64_t))type metadata accessor for InclusionProof);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t sub_24A21EFB8()
{
  sub_24A227048(&qword_269779148, (void (*)(uint64_t))type metadata accessor for InclusionProof);

  return sub_24A2A7010();
}

uint64_t sub_24A21F034(uint64_t a1, uint64_t a2)
{
  return sub_24A22A0B0(a1, a2, type metadata accessor for InclusionProof, (uint64_t (*)(uint64_t, uint64_t))sub_24A21E36C) & 1;
}

uint64_t sub_24A21F078()
{
  uint64_t v0 = sub_24A2A7130();
  __swift_allocate_value_buffer(v0, qword_26977A688);
  __swift_project_value_buffer(v0, (uint64_t)qword_26977A688);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697787B0);
  unint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2697787B8) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_24A2A8AA0;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *uint64_t v5 = 1;
  *(void *)unint64_t v6 = "perApplicationTreeEntry";
  *(void *)(v6 + 8) = 23;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = sub_24A2A7100();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "topLevelTreeEntry";
  *((void *)v10 + 1) = 17;
  v10[16] = 2;
  v9();
  return sub_24A2A7110();
}

uint64_t sub_24A21F230()
{
  type metadata accessor for PatInclusionProof._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV16CloudAttestation17PatInclusionProofP33_169C9B08F2DC833EDD0C19E1D431E7CF13_StorageClass__perApplicationTreeEntry;
  uint64_t v2 = type metadata accessor for LogEntry(0);
  unint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);
  v3(v1, 1, 1, v2);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v3)(v0+ OBJC_IVAR____TtCV16CloudAttestation17PatInclusionProofP33_169C9B08F2DC833EDD0C19E1D431E7CF13_StorageClass__topLevelTreeEntry, 1, 1, v2);
  qword_269778FF0 = v0;
  return result;
}

uint64_t sub_24A21F2F0(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174940);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = v1
     + OBJC_IVAR____TtCV16CloudAttestation17PatInclusionProofP33_169C9B08F2DC833EDD0C19E1D431E7CF13_StorageClass__perApplicationTreeEntry;
  uint64_t v7 = type metadata accessor for LogEntry(0);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
  v8(v6, 1, 1, v7);
  uint64_t v9 = v1
     + OBJC_IVAR____TtCV16CloudAttestation17PatInclusionProofP33_169C9B08F2DC833EDD0C19E1D431E7CF13_StorageClass__topLevelTreeEntry;
  v8(v1+ OBJC_IVAR____TtCV16CloudAttestation17PatInclusionProofP33_169C9B08F2DC833EDD0C19E1D431E7CF13_StorageClass__topLevelTreeEntry, 1, 1, v7);
  uint64_t v10 = a1
      + OBJC_IVAR____TtCV16CloudAttestation17PatInclusionProofP33_169C9B08F2DC833EDD0C19E1D431E7CF13_StorageClass__perApplicationTreeEntry;
  swift_beginAccess();
  sub_24A1B2CAC(v10, (uint64_t)v5, &qword_26B174940);
  swift_beginAccess();
  sub_24A1B2B8C((uint64_t)v5, v6, &qword_26B174940);
  swift_endAccess();
  uint64_t v11 = a1
      + OBJC_IVAR____TtCV16CloudAttestation17PatInclusionProofP33_169C9B08F2DC833EDD0C19E1D431E7CF13_StorageClass__topLevelTreeEntry;
  swift_beginAccess();
  sub_24A1B2CAC(v11, (uint64_t)v5, &qword_26B174940);
  swift_release();
  swift_beginAccess();
  sub_24A1B2B8C((uint64_t)v5, v9, &qword_26B174940);
  swift_endAccess();
  return v1;
}

uint64_t sub_24A21F4BC()
{
  sub_24A1B2D10(v0+ OBJC_IVAR____TtCV16CloudAttestation17PatInclusionProofP33_169C9B08F2DC833EDD0C19E1D431E7CF13_StorageClass__perApplicationTreeEntry, &qword_26B174940);
  sub_24A1B2D10(v0+ OBJC_IVAR____TtCV16CloudAttestation17PatInclusionProofP33_169C9B08F2DC833EDD0C19E1D431E7CF13_StorageClass__topLevelTreeEntry, &qword_26B174940);
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x270FA0228](v0, v1, v2);
}

uint64_t sub_24A21F548()
{
  return type metadata accessor for PatInclusionProof._StorageClass(0);
}

uint64_t type metadata accessor for PatInclusionProof._StorageClass(uint64_t a1)
{
  return sub_24A1AE704(a1, (uint64_t *)&unk_269779040);
}

void sub_24A21F570()
{
  sub_24A21D780(319, &qword_26B174948, (void (*)(uint64_t))type metadata accessor for LogEntry);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t *sub_24A21F61C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v5 = *a2;
  *a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = (uint64_t *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v8 = a2[1];
    unint64_t v9 = a2[2];
    swift_bridgeObjectRetain();
    sub_24A1A52B0(v8, v9);
    a1[1] = v8;
    a1[2] = v9;
    uint64_t v10 = *(int *)(a3 + 24);
    uint64_t v11 = (char *)a1 + v10;
    uint64_t v12 = (char *)a2 + v10;
    uint64_t v13 = sub_24A2A6E10();
    uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16);
    v14(v11, v12, v13);
    uint64_t v15 = *(int *)(a3 + 28);
    uint64_t v16 = (uint64_t *)((char *)a1 + v15);
    uint64_t v17 = (uint64_t *)((char *)a2 + v15);
    uint64_t v18 = type metadata accessor for SignedObject(0);
    uint64_t v19 = *(void *)(v18 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
    {
      uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174320);
      memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
    }
    else
    {
      uint64_t v21 = *v17;
      unint64_t v22 = v17[1];
      sub_24A1A52B0(*v17, v22);
      void *v16 = v21;
      v16[1] = v22;
      v14((char *)v16 + *(int *)(v18 + 20), (char *)v17 + *(int *)(v18 + 20), v13);
      uint64_t v23 = *(int *)(v18 + 24);
      uint64_t v24 = (void *)((char *)v16 + v23);
      uint64_t v25 = (uint64_t *)((char *)v17 + v23);
      uint64_t v26 = type metadata accessor for Signature(0);
      uint64_t v33 = *(void *)(v26 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v33 + 48))(v25, 1, v26))
      {
        uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
        memcpy(v24, v25, *(void *)(*(void *)(v27 - 8) + 64));
      }
      else
      {
        unint64_t v29 = v25[1];
        uint64_t v31 = *v25;
        sub_24A1A52B0(*v25, v29);
        *uint64_t v24 = v31;
        v24[1] = v29;
        unint64_t v30 = v25[3];
        uint64_t v32 = v25[2];
        sub_24A1A52B0(v32, v30);
        v24[2] = v32;
        v24[3] = v30;
        v24[4] = v25[4];
        *((unsigned char *)v24 + 40) = *((unsigned char *)v25 + 40);
        v14((char *)v24 + *(int *)(v26 + 28), (char *)v25 + *(int *)(v26 + 28), v13);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v33 + 56))(v24, 0, 1, v26);
      }
      (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
    }
  }
  return a1;
}

uint64_t type metadata accessor for SignedObject(uint64_t a1)
{
  return sub_24A1AE704(a1, (uint64_t *)&unk_26B174310);
}

uint64_t type metadata accessor for Signature(uint64_t a1)
{
  return sub_24A1AE704(a1, (uint64_t *)&unk_26B1749A8);
}

uint64_t sub_24A21F964(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  sub_24A1A5384(*(void *)(a1 + 8), *(void *)(a1 + 16));
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = sub_24A2A6E10();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v12(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 28);
  uint64_t v7 = type metadata accessor for SignedObject(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7);
  if (!result)
  {
    sub_24A1A5384(*(void *)v6, *(void *)(v6 + 8));
    v12(v6 + *(int *)(v7 + 20), v5);
    uint64_t v9 = v6 + *(int *)(v7 + 24);
    uint64_t v10 = type metadata accessor for Signature(0);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v9, 1, v10);
    if (!result)
    {
      sub_24A1A5384(*(void *)v9, *(void *)(v9 + 8));
      sub_24A1A5384(*(void *)(v9 + 16), *(void *)(v9 + 24));
      uint64_t v11 = v9 + *(int *)(v10 + 28);
      return ((uint64_t (*)(uint64_t, uint64_t))v12)(v11, v5);
    }
  }
  return result;
}

void *sub_24A21FAF8(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  unint64_t v7 = a2[2];
  swift_bridgeObjectRetain();
  sub_24A1A52B0(v6, v7);
  a1[1] = v6;
  a1[2] = v7;
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = sub_24A2A6E10();
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
  v12(v9, v10, v11);
  uint64_t v13 = *(int *)(a3 + 28);
  uint64_t v14 = (void *)((char *)a1 + v13);
  uint64_t v15 = (void *)((char *)a2 + v13);
  uint64_t v16 = type metadata accessor for SignedObject(0);
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174320);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    uint64_t v19 = *v15;
    unint64_t v20 = v15[1];
    sub_24A1A52B0(*v15, v20);
    void *v14 = v19;
    v14[1] = v20;
    v12((char *)v14 + *(int *)(v16 + 20), (char *)v15 + *(int *)(v16 + 20), v11);
    uint64_t v21 = *(int *)(v16 + 24);
    unint64_t v22 = (void *)((char *)v14 + v21);
    uint64_t v23 = (uint64_t *)((char *)v15 + v21);
    uint64_t v24 = type metadata accessor for Signature(0);
    uint64_t v31 = *(void *)(v24 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v31 + 48))(v23, 1, v24))
    {
      uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
      memcpy(v22, v23, *(void *)(*(void *)(v25 - 8) + 64));
    }
    else
    {
      unint64_t v27 = v23[1];
      uint64_t v29 = *v23;
      sub_24A1A52B0(*v23, v27);
      void *v22 = v29;
      v22[1] = v27;
      unint64_t v28 = v23[3];
      uint64_t v30 = v23[2];
      sub_24A1A52B0(v30, v28);
      v22[2] = v30;
      v22[3] = v28;
      v22[4] = v23[4];
      *((unsigned char *)v22 + 40) = *((unsigned char *)v23 + 40);
      v12((char *)v22 + *(int *)(v24 + 28), (char *)v23 + *(int *)(v24 + 28), v11);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v31 + 56))(v22, 0, 1, v24);
    }
    (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  return a1;
}

void *sub_24A21FDB8(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[1];
  unint64_t v7 = a2[2];
  sub_24A1A52B0(v6, v7);
  uint64_t v8 = a1[1];
  unint64_t v9 = a1[2];
  a1[1] = v6;
  a1[2] = v7;
  sub_24A1A5384(v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v64 = sub_24A2A6E10();
  uint64_t v65 = *(void *)(v64 - 8);
  uint64_t v13 = *(void (**)(char *, char *))(v65 + 24);
  v13(v11, v12);
  uint64_t v14 = *(int *)(a3 + 28);
  uint64_t v15 = (void *)((char *)a1 + v14);
  uint64_t v16 = (void *)((char *)a2 + v14);
  uint64_t v17 = type metadata accessor for SignedObject(0);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v18 + 48);
  LODWORD(v12) = v19(v15, 1, v17);
  int v20 = v19(v16, 1, v17);
  if (!v12)
  {
    if (!v20)
    {
      uint64_t v32 = *v16;
      unint64_t v33 = v16[1];
      sub_24A1A52B0(*v16, v33);
      uint64_t v34 = *v15;
      unint64_t v35 = v15[1];
      uint64_t *v15 = v32;
      v15[1] = v33;
      sub_24A1A5384(v34, v35);
      ((void (*)(char *, char *, uint64_t))v13)((char *)v15 + *(int *)(v17 + 20), (char *)v16 + *(int *)(v17 + 20), v64);
      uint64_t v36 = *(int *)(v17 + 24);
      uint64_t v37 = (uint64_t)v15 + v36;
      char v38 = (char *)v16 + v36;
      uint64_t v39 = type metadata accessor for Signature(0);
      uint64_t v40 = *(void *)(v39 - 8);
      uint64_t v41 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v40 + 48);
      LODWORD(v32) = v41(v37, 1, v39);
      int v42 = v41((uint64_t)v38, 1, v39);
      if (v32)
      {
        if (!v42)
        {
          uint64_t v43 = *(void *)v38;
          unint64_t v44 = *((void *)v38 + 1);
          sub_24A1A52B0(*(void *)v38, v44);
          *(void *)uint64_t v37 = v43;
          *(void *)(v37 + 8) = v44;
          uint64_t v45 = *((void *)v38 + 2);
          unint64_t v46 = *((void *)v38 + 3);
          sub_24A1A52B0(v45, v46);
          *(void *)(v37 + 16) = v45;
          *(void *)(v37 + 24) = v46;
          uint64_t v47 = *((void *)v38 + 4);
          *(unsigned char *)(v37 + 40) = v38[40];
          *(void *)(v37 + 32) = v47;
          (*(void (**)(uint64_t, char *, uint64_t))(v65 + 16))(v37 + *(int *)(v39 + 28), &v38[*(int *)(v39 + 28)], v64);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
          return a1;
        }
      }
      else
      {
        if (!v42)
        {
          uint64_t v52 = *(void *)v38;
          unint64_t v53 = *((void *)v38 + 1);
          sub_24A1A52B0(*(void *)v38, v53);
          uint64_t v54 = *(void *)v37;
          unint64_t v55 = *(void *)(v37 + 8);
          *(void *)uint64_t v37 = v52;
          *(void *)(v37 + 8) = v53;
          sub_24A1A5384(v54, v55);
          uint64_t v56 = *((void *)v38 + 2);
          unint64_t v57 = *((void *)v38 + 3);
          sub_24A1A52B0(v56, v57);
          uint64_t v58 = *(void *)(v37 + 16);
          unint64_t v59 = *(void *)(v37 + 24);
          *(void *)(v37 + 16) = v56;
          *(void *)(v37 + 24) = v57;
          sub_24A1A5384(v58, v59);
          uint64_t v60 = *((void *)v38 + 4);
          *(unsigned char *)(v37 + 40) = v38[40];
          *(void *)(v37 + 32) = v60;
          ((void (*)(uint64_t, char *, uint64_t))v13)(v37 + *(int *)(v39 + 28), &v38[*(int *)(v39 + 28)], v64);
          return a1;
        }
        sub_24A2202DC(v37, type metadata accessor for Signature);
      }
      size_t v29 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8) - 8) + 64);
      uint64_t v30 = (void *)v37;
      uint64_t v31 = (uint64_t *)v38;
      goto LABEL_8;
    }
    sub_24A2202DC((uint64_t)v15, type metadata accessor for SignedObject);
LABEL_7:
    size_t v29 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26B174320) - 8) + 64);
    uint64_t v30 = v15;
    uint64_t v31 = v16;
LABEL_8:
    memcpy(v30, v31, v29);
    return a1;
  }
  if (v20) {
    goto LABEL_7;
  }
  uint64_t v21 = *v16;
  unint64_t v22 = v16[1];
  sub_24A1A52B0(*v16, v22);
  uint64_t *v15 = v21;
  v15[1] = v22;
  uint64_t v63 = *(void (**)(char *, char *, uint64_t))(v65 + 16);
  v63((char *)v15 + *(int *)(v17 + 20), (char *)v16 + *(int *)(v17 + 20), v64);
  uint64_t v23 = *(int *)(v17 + 24);
  uint64_t v24 = (uint64_t *)((char *)v15 + v23);
  uint64_t v25 = (uint64_t *)((char *)v16 + v23);
  uint64_t v26 = type metadata accessor for Signature(0);
  uint64_t v27 = *(void *)(v26 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
  {
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
    memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
  }
  else
  {
    uint64_t v61 = *v25;
    unint64_t v48 = v25[1];
    sub_24A1A52B0(*v25, v48);
    *uint64_t v24 = v61;
    v24[1] = v48;
    unint64_t v49 = v25[3];
    uint64_t v62 = v25[2];
    sub_24A1A52B0(v62, v49);
    v24[2] = v62;
    v24[3] = v49;
    uint64_t v50 = v25[4];
    *((unsigned char *)v24 + 40) = *((unsigned char *)v25 + 40);
    v24[4] = v50;
    v63((char *)v24 + *(int *)(v26 + 28), (char *)v25 + *(int *)(v26 + 28), v64);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  }
  (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  return a1;
}

uint64_t sub_24A2202DC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_24A22033C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v6 = *(int *)(a3 + 24);
  unint64_t v7 = (char *)(a1 + v6);
  uint64_t v8 = (char *)(a2 + v6);
  uint64_t v9 = sub_24A2A6E10();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 28);
  uint64_t v12 = (_OWORD *)(a1 + v11);
  uint64_t v13 = (_OWORD *)(a2 + v11);
  uint64_t v14 = type metadata accessor for SignedObject(0);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174320);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    _OWORD *v12 = *v13;
    v10((char *)v12 + *(int *)(v14 + 20), (char *)v13 + *(int *)(v14 + 20), v9);
    uint64_t v17 = *(int *)(v14 + 24);
    long long __dst = (_OWORD *)((char *)v12 + v17);
    uint64_t v18 = (_OWORD *)((char *)v13 + v17);
    uint64_t v19 = type metadata accessor for Signature(0);
    uint64_t v20 = *(void *)(v19 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
    {
      uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
      memcpy(__dst, v18, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      long long v22 = v18[1];
      _OWORD *__dst = *v18;
      __dst[1] = v22;
      *((void *)__dst + 4) = *((void *)v18 + 4);
      *((unsigned char *)__dst + 40) = *((unsigned char *)v18 + 40);
      v10((char *)__dst + *(int *)(v19 + 28), (char *)v18 + *(int *)(v19 + 28), v9);
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v20 + 56))(__dst, 0, 1, v19);
    }
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

void *sub_24A2205C4(void *a1, uint64_t a2, uint64_t a3)
{
  *a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = a1[1];
  unint64_t v7 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  sub_24A1A5384(v6, v7);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = sub_24A2A6E10();
  uint64_t v46 = *(void *)(v11 - 8);
  uint64_t v48 = v11;
  uint64_t v12 = *(void (**)(char *, uint64_t))(v46 + 40);
  v12(v9, v10);
  uint64_t v13 = *(int *)(a3 + 28);
  uint64_t v14 = (void *)((char *)a1 + v13);
  uint64_t v15 = (uint64_t *)(a2 + v13);
  uint64_t v16 = type metadata accessor for SignedObject(0);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v17 + 48);
  LODWORD(v10) = v18(v14, 1, v16);
  int v19 = v18(v15, 1, v16);
  if (!v10)
  {
    if (!v19)
    {
      uint64_t v29 = *v14;
      unint64_t v30 = v14[1];
      *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
      sub_24A1A5384(v29, v30);
      ((void (*)(char *, char *, uint64_t))v12)((char *)v14 + *(int *)(v16 + 20), (char *)v15 + *(int *)(v16 + 20), v48);
      uint64_t v31 = *(int *)(v16 + 24);
      uint64_t v32 = (uint64_t)v14 + v31;
      unint64_t v33 = (char *)v15 + v31;
      uint64_t v34 = type metadata accessor for Signature(0);
      uint64_t v35 = *(void *)(v34 - 8);
      uint64_t v36 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v35 + 48);
      int v37 = v36(v32, 1, v34);
      int v38 = v36((uint64_t)v33, 1, v34);
      if (v37)
      {
        if (!v38)
        {
          long long v39 = *((_OWORD *)v33 + 1);
          *(_OWORD *)uint64_t v32 = *(_OWORD *)v33;
          *(_OWORD *)(v32 + 16) = v39;
          *(void *)(v32 + 32) = *((void *)v33 + 4);
          *(unsigned char *)(v32 + 40) = v33[40];
          (*(void (**)(uint64_t, char *, uint64_t))(v46 + 32))(v32 + *(int *)(v34 + 28), &v33[*(int *)(v34 + 28)], v48);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
          return a1;
        }
      }
      else
      {
        if (!v38)
        {
          uint64_t v42 = *(void *)v32;
          unint64_t v43 = *(void *)(v32 + 8);
          *(_OWORD *)uint64_t v32 = *(_OWORD *)v33;
          sub_24A1A5384(v42, v43);
          uint64_t v44 = *(void *)(v32 + 16);
          unint64_t v45 = *(void *)(v32 + 24);
          *(_OWORD *)(v32 + 16) = *((_OWORD *)v33 + 1);
          sub_24A1A5384(v44, v45);
          *(void *)(v32 + 32) = *((void *)v33 + 4);
          *(unsigned char *)(v32 + 40) = v33[40];
          ((void (*)(uint64_t, char *, uint64_t))v12)(v32 + *(int *)(v34 + 28), &v33[*(int *)(v34 + 28)], v48);
          return a1;
        }
        sub_24A2202DC(v32, type metadata accessor for Signature);
      }
      size_t v26 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8) - 8) + 64);
      uint64_t v27 = (void *)v32;
      uint64_t v28 = (uint64_t *)v33;
      goto LABEL_8;
    }
    sub_24A2202DC((uint64_t)v14, type metadata accessor for SignedObject);
LABEL_7:
    size_t v26 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26B174320) - 8) + 64);
    uint64_t v27 = v14;
    uint64_t v28 = v15;
LABEL_8:
    memcpy(v27, v28, v26);
    return a1;
  }
  if (v19) {
    goto LABEL_7;
  }
  *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
  uint64_t v47 = *(void (**)(char *, char *, uint64_t))(v46 + 32);
  v47((char *)v14 + *(int *)(v16 + 20), (char *)v15 + *(int *)(v16 + 20), v48);
  uint64_t v20 = *(int *)(v16 + 24);
  uint64_t v21 = (_OWORD *)((char *)v14 + v20);
  long long v22 = (_OWORD *)((char *)v15 + v20);
  uint64_t v23 = type metadata accessor for Signature(0);
  uint64_t v24 = *(void *)(v23 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
  {
    uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
    memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
  }
  else
  {
    long long v40 = v22[1];
    *uint64_t v21 = *v22;
    v21[1] = v40;
    *((void *)v21 + 4) = *((void *)v22 + 4);
    *((unsigned char *)v21 + 40) = *((unsigned char *)v22 + 40);
    v47((char *)v21 + *(int *)(v23 + 28), (char *)v22 + *(int *)(v23 + 28), v48);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
  }
  (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  return a1;
}

uint64_t sub_24A220A70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24A220A84);
}

uint64_t sub_24A220A84(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_24A2A6E10();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = (char *)a1 + *(int *)(a3 + 24);
      uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174320);
      uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = (char *)a1 + *(int *)(a3 + 28);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t sub_24A220BB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24A220BC8);
}

void *sub_24A220BC8(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v8 = sub_24A2A6E10();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = (char *)v5 + *(int *)(a4 + 24);
      uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return (void *)v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174320);
      uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = (char *)v5 + *(int *)(a4 + 28);
      return (void *)v14(v16, a2, a2, v15);
    }
  }
  return result;
}

void sub_24A220CF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

unint64_t sub_24A220D2C(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = v15 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v7 = *(void *)a2;
    unint64_t v8 = *(void *)(a2 + 8);
    sub_24A1A52B0(*(void *)a2, v8);
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v8;
    uint64_t v9 = *(void *)(a2 + 16);
    unint64_t v10 = *(void *)(a2 + 24);
    sub_24A1A52B0(v9, v10);
    *(void *)(a1 + 16) = v9;
    *(void *)(a1 + 24) = v10;
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
    uint64_t v11 = *(int *)(a3 + 28);
    uint64_t v12 = a1 + v11;
    uint64_t v13 = a2 + v11;
    uint64_t v14 = sub_24A2A6E10();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
  }
  return a1;
}

uint64_t sub_24A220E38(uint64_t a1, uint64_t a2)
{
  sub_24A1A5384(*(void *)a1, *(void *)(a1 + 8));
  sub_24A1A5384(*(void *)(a1 + 16), *(void *)(a1 + 24));
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = sub_24A2A6E10();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t sub_24A220EBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  sub_24A1A52B0(*(void *)a2, v7);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  uint64_t v8 = *(void *)(a2 + 16);
  unint64_t v9 = *(void *)(a2 + 24);
  sub_24A1A52B0(v8, v9);
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 24) = v9;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v10 = *(int *)(a3 + 28);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = sub_24A2A6E10();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
  return a1;
}

uint64_t sub_24A220F78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  sub_24A1A52B0(*(void *)a2, v7);
  uint64_t v8 = *(void *)a1;
  unint64_t v9 = *(void *)(a1 + 8);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  sub_24A1A5384(v8, v9);
  uint64_t v10 = *(void *)(a2 + 16);
  unint64_t v11 = *(void *)(a2 + 24);
  sub_24A1A52B0(v10, v11);
  uint64_t v12 = *(void *)(a1 + 16);
  unint64_t v13 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = v10;
  *(void *)(a1 + 24) = v11;
  sub_24A1A5384(v12, v13);
  uint64_t v14 = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 32) = v14;
  uint64_t v15 = *(int *)(a3 + 28);
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  uint64_t v18 = sub_24A2A6E10();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 24))(v16, v17, v18);
  return a1;
}

uint64_t sub_24A221044(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v5 = *(int *)(a3 + 28);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v8 = sub_24A2A6E10();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t sub_24A2210D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_24A1A5384(v6, v7);
  uint64_t v8 = *(void *)(a1 + 16);
  unint64_t v9 = *(void *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  sub_24A1A5384(v8, v9);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v10 = *(int *)(a3 + 28);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = sub_24A2A6E10();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 40))(v11, v12, v13);
  return a1;
}

uint64_t sub_24A221180(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24A221194);
}

uint64_t sub_24A221194(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 12)
  {
    uint64_t v4 = *(void *)(a1 + 8) >> 60;
    if (((4 * v4) & 0xC) != 0) {
      return 16 - ((4 * v4) & 0xC | (v4 >> 2));
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = sub_24A2A6E10();
    unint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 28);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_24A221250(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24A221264);
}

void *sub_24A221264(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 12)
  {
    *uint64_t result = 0;
    result[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
  }
  else
  {
    uint64_t v7 = sub_24A2A6E10();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 28);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_24A221314()
{
  return sub_24A22BE40();
}

uint64_t *sub_24A221328(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_24A1A52B0(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = *(int *)(a3 + 20);
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = sub_24A2A6E10();
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
    v13(v10, v11, v12);
    uint64_t v14 = *(int *)(a3 + 24);
    uint64_t v15 = (uint64_t *)((char *)a1 + v14);
    uint64_t v16 = (uint64_t *)((char *)a2 + v14);
    uint64_t v17 = type metadata accessor for Signature(0);
    uint64_t v18 = *(void *)(v17 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
      memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
    }
    else
    {
      uint64_t v21 = *v16;
      unint64_t v22 = v16[1];
      sub_24A1A52B0(*v16, v22);
      void *v15 = v21;
      v15[1] = v22;
      uint64_t v23 = v16[2];
      unint64_t v24 = v16[3];
      sub_24A1A52B0(v23, v24);
      void v15[2] = v23;
      uint64_t v15[3] = v24;
      v15[4] = v16[4];
      *((unsigned char *)v15 + 40) = *((unsigned char *)v16 + 40);
      v13((char *)v15 + *(int *)(v17 + 28), (char *)v16 + *(int *)(v17 + 28), v12);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
  }
  return a1;
}

uint64_t sub_24A221530(uint64_t a1, uint64_t a2)
{
  sub_24A1A5384(*(void *)a1, *(void *)(a1 + 8));
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = sub_24A2A6E10();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v10(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 24);
  uint64_t v7 = type metadata accessor for Signature(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7);
  if (!result)
  {
    sub_24A1A5384(*(void *)v6, *(void *)(v6 + 8));
    sub_24A1A5384(*(void *)(v6 + 16), *(void *)(v6 + 24));
    uint64_t v9 = v6 + *(int *)(v7 + 28);
    return ((uint64_t (*)(uint64_t, uint64_t))v10)(v9, v5);
  }
  return result;
}

uint64_t *sub_24A221650(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_24A1A52B0(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = sub_24A2A6E10();
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
  v12(v9, v10, v11);
  uint64_t v13 = *(int *)(a3 + 24);
  uint64_t v14 = (uint64_t *)((char *)a1 + v13);
  uint64_t v15 = (uint64_t *)((char *)a2 + v13);
  uint64_t v16 = type metadata accessor for Signature(0);
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    uint64_t v19 = *v15;
    unint64_t v20 = v15[1];
    sub_24A1A52B0(*v15, v20);
    void *v14 = v19;
    v14[1] = v20;
    uint64_t v21 = v15[2];
    unint64_t v22 = v15[3];
    sub_24A1A52B0(v21, v22);
    void v14[2] = v21;
    void v14[3] = v22;
    v14[4] = v15[4];
    *((unsigned char *)v14 + 40) = *((unsigned char *)v15 + 40);
    v12((char *)v14 + *(int *)(v16 + 28), (char *)v15 + *(int *)(v16 + 28), v11);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  return a1;
}

uint64_t *sub_24A221808(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_24A1A52B0(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_24A1A5384(v8, v9);
  uint64_t v10 = *(int *)(a3 + 20);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = sub_24A2A6E10();
  uint64_t v38 = *(void *)(v13 - 8);
  uint64_t v39 = v13;
  uint64_t v14 = *(void (**)(char *, char *))(v38 + 24);
  v14(v11, v12);
  uint64_t v15 = *(int *)(a3 + 24);
  uint64_t v16 = (uint64_t)a1 + v15;
  uint64_t v17 = (char *)a2 + v15;
  uint64_t v18 = type metadata accessor for Signature(0);
  uint64_t v19 = *(void *)(v18 - 8);
  unint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 48);
  LODWORD(v12) = v20(v16, 1, v18);
  int v21 = v20((uint64_t)v17, 1, v18);
  if (!v12)
  {
    if (!v21)
    {
      uint64_t v29 = *(void *)v17;
      unint64_t v30 = *((void *)v17 + 1);
      sub_24A1A52B0(*(void *)v17, v30);
      uint64_t v31 = *(void *)v16;
      unint64_t v32 = *(void *)(v16 + 8);
      *(void *)uint64_t v16 = v29;
      *(void *)(v16 + 8) = v30;
      sub_24A1A5384(v31, v32);
      uint64_t v33 = *((void *)v17 + 2);
      unint64_t v34 = *((void *)v17 + 3);
      sub_24A1A52B0(v33, v34);
      uint64_t v35 = *(void *)(v16 + 16);
      unint64_t v36 = *(void *)(v16 + 24);
      *(void *)(v16 + 16) = v33;
      *(void *)(v16 + 24) = v34;
      sub_24A1A5384(v35, v36);
      uint64_t v37 = *((void *)v17 + 4);
      *(unsigned char *)(v16 + 40) = v17[40];
      *(void *)(v16 + 32) = v37;
      ((void (*)(uint64_t, char *, uint64_t))v14)(v16 + *(int *)(v18 + 28), &v17[*(int *)(v18 + 28)], v39);
      return a1;
    }
    sub_24A2202DC(v16, type metadata accessor for Signature);
    goto LABEL_6;
  }
  if (v21)
  {
LABEL_6:
    uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
    memcpy((void *)v16, v17, *(void *)(*(void *)(v27 - 8) + 64));
    return a1;
  }
  uint64_t v22 = *(void *)v17;
  unint64_t v23 = *((void *)v17 + 1);
  sub_24A1A52B0(*(void *)v17, v23);
  *(void *)uint64_t v16 = v22;
  *(void *)(v16 + 8) = v23;
  uint64_t v24 = *((void *)v17 + 2);
  unint64_t v25 = *((void *)v17 + 3);
  sub_24A1A52B0(v24, v25);
  *(void *)(v16 + 16) = v24;
  *(void *)(v16 + 24) = v25;
  uint64_t v26 = *((void *)v17 + 4);
  *(unsigned char *)(v16 + 40) = v17[40];
  *(void *)(v16 + 32) = v26;
  (*(void (**)(uint64_t, char *, uint64_t))(v38 + 16))(v16 + *(int *)(v18 + 28), &v17[*(int *)(v18 + 28)], v39);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  return a1;
}

_OWORD *sub_24A221A90(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  unint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_24A2A6E10();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (_OWORD *)((char *)a1 + v11);
  uint64_t v13 = (_OWORD *)((char *)a2 + v11);
  uint64_t v14 = type metadata accessor for Signature(0);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    long long v17 = v13[1];
    _OWORD *v12 = *v13;
    v12[1] = v17;
    *((void *)v12 + 4) = *((void *)v13 + 4);
    *((unsigned char *)v12 + 40) = *((unsigned char *)v13 + 40);
    v10((char *)v12 + *(int *)(v14 + 28), (char *)v13 + *(int *)(v14 + 28), v9);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

uint64_t *sub_24A221C14(uint64_t *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_24A1A5384(v6, v7);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = sub_24A2A6E10();
  uint64_t v27 = *(void *)(v11 - 8);
  uint64_t v28 = v11;
  uint64_t v12 = *(void (**)(char *, char *))(v27 + 40);
  v12(v9, v10);
  uint64_t v13 = *(int *)(a3 + 24);
  uint64_t v14 = (uint64_t)a1 + v13;
  uint64_t v15 = (char *)a2 + v13;
  uint64_t v16 = type metadata accessor for Signature(0);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
  LODWORD(v10) = v18(v14, 1, v16);
  int v19 = v18((uint64_t)v15, 1, v16);
  if (!v10)
  {
    if (!v19)
    {
      uint64_t v23 = *(void *)v14;
      unint64_t v24 = *(void *)(v14 + 8);
      *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
      sub_24A1A5384(v23, v24);
      uint64_t v25 = *(void *)(v14 + 16);
      unint64_t v26 = *(void *)(v14 + 24);
      *(_OWORD *)(v14 + 16) = *((_OWORD *)v15 + 1);
      sub_24A1A5384(v25, v26);
      *(void *)(v14 + 32) = *((void *)v15 + 4);
      *(unsigned char *)(v14 + 40) = v15[40];
      ((void (*)(uint64_t, char *, uint64_t))v12)(v14 + *(int *)(v16 + 28), &v15[*(int *)(v16 + 28)], v28);
      return a1;
    }
    sub_24A2202DC(v14, type metadata accessor for Signature);
    goto LABEL_6;
  }
  if (v19)
  {
LABEL_6:
    uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
    memcpy((void *)v14, v15, *(void *)(*(void *)(v21 - 8) + 64));
    return a1;
  }
  long long v20 = *((_OWORD *)v15 + 1);
  *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
  *(_OWORD *)(v14 + 16) = v20;
  *(void *)(v14 + 32) = *((void *)v15 + 4);
  *(unsigned char *)(v14 + 40) = v15[40];
  (*(void (**)(uint64_t, char *, uint64_t))(v27 + 32))(v14 + *(int *)(v16 + 28), &v15[*(int *)(v16 + 28)], v28);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  return a1;
}

uint64_t sub_24A221E5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24A221E70);
}

uint64_t sub_24A221E70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 12)
  {
    uint64_t v4 = *(void *)(a1 + 8) >> 60;
    if (((4 * v4) & 0xC) != 0) {
      return 16 - ((4 * v4) & 0xC | (v4 >> 2));
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = sub_24A2A6E10();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 20);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 24);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t sub_24A221FAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24A221FC0);
}

void *sub_24A221FC0(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 12)
  {
    *uint64_t result = 0;
    result[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
  }
  else
  {
    uint64_t v8 = sub_24A2A6E10();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = (char *)v5 + *(int *)(a4 + 20);
      uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return (void *)v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
      uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = (char *)v5 + *(int *)(a4 + 24);
      return (void *)v14(v16, a2, a2, v15);
    }
  }
  return result;
}

void sub_24A2220F8()
{
  sub_24A2A6E10();
  if (v0 <= 0x3F)
  {
    sub_24A21D780(319, &qword_26B1749C0, (void (*)(uint64_t))type metadata accessor for Signature);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t sub_24A2221E8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v21 = *a2;
    *(void *)uint64_t v4 = *a2;
    uint64_t v4 = v21 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    *(void *)a1 = *a2;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    uint64_t v7 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    unint64_t v8 = a2[4];
    swift_bridgeObjectRetain();
    sub_24A1A52B0(v7, v8);
    *(void *)(v4 + 24) = v7;
    *(void *)(v4 + 32) = v8;
    uint64_t v9 = a2[6];
    *(void *)(v4 + 40) = a2[5];
    *(void *)(v4 + 48) = v9;
    *(unsigned char *)(v4 + 56) = *((unsigned char *)a2 + 56);
    uint64_t v10 = *(int *)(a3 + 36);
    uint64_t v11 = (char *)(v4 + v10);
    uint64_t v12 = (char *)a2 + v10;
    uint64_t v13 = sub_24A2A6E10();
    uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16);
    v14(v11, v12, v13);
    uint64_t v15 = *(int *)(a3 + 40);
    uint64_t v16 = (void *)(v4 + v15);
    uint64_t v17 = (uint64_t *)((char *)a2 + v15);
    uint64_t v18 = type metadata accessor for SignedObject(0);
    uint64_t v19 = *(void *)(v18 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
    {
      uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174320);
      memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
    }
    else
    {
      uint64_t v22 = *v17;
      unint64_t v23 = v17[1];
      sub_24A1A52B0(*v17, v23);
      void *v16 = v22;
      v16[1] = v23;
      v14((char *)v16 + *(int *)(v18 + 20), (char *)v17 + *(int *)(v18 + 20), v13);
      uint64_t v24 = *(int *)(v18 + 24);
      uint64_t v25 = (void *)((char *)v16 + v24);
      unint64_t v26 = (uint64_t *)((char *)v17 + v24);
      uint64_t v27 = type metadata accessor for Signature(0);
      uint64_t v34 = *(void *)(v27 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v34 + 48))(v26, 1, v27))
      {
        uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
        memcpy(v25, v26, *(void *)(*(void *)(v28 - 8) + 64));
      }
      else
      {
        unint64_t v30 = v26[1];
        uint64_t v32 = *v26;
        sub_24A1A52B0(*v26, v30);
        *uint64_t v25 = v32;
        v25[1] = v30;
        unint64_t v31 = v26[3];
        uint64_t v33 = v26[2];
        sub_24A1A52B0(v33, v31);
        void v25[2] = v33;
        v25[3] = v31;
        v25[4] = v26[4];
        *((unsigned char *)v25 + 40) = *((unsigned char *)v26 + 40);
        v14((char *)v25 + *(int *)(v27 + 28), (char *)v26 + *(int *)(v27 + 28), v13);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v34 + 56))(v25, 0, 1, v27);
      }
      (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
    }
  }
  return v4;
}

uint64_t sub_24A222518(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  sub_24A1A5384(*(void *)(a1 + 24), *(void *)(a1 + 32));
  uint64_t v4 = a1 + *(int *)(a2 + 36);
  uint64_t v5 = sub_24A2A6E10();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v12(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 40);
  uint64_t v7 = type metadata accessor for SignedObject(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7);
  if (!result)
  {
    sub_24A1A5384(*(void *)v6, *(void *)(v6 + 8));
    v12(v6 + *(int *)(v7 + 20), v5);
    uint64_t v9 = v6 + *(int *)(v7 + 24);
    uint64_t v10 = type metadata accessor for Signature(0);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v9, 1, v10);
    if (!result)
    {
      sub_24A1A5384(*(void *)v9, *(void *)(v9 + 8));
      sub_24A1A5384(*(void *)(v9 + 16), *(void *)(v9 + 24));
      uint64_t v11 = v9 + *(int *)(v10 + 28);
      return ((uint64_t (*)(uint64_t, uint64_t))v12)(v11, v5);
    }
  }
  return result;
}

uint64_t sub_24A2226AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  unint64_t v7 = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  sub_24A1A52B0(v6, v7);
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  uint64_t v8 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v8;
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v9 = *(int *)(a3 + 36);
  uint64_t v10 = (char *)(a1 + v9);
  uint64_t v11 = (char *)(a2 + v9);
  uint64_t v12 = sub_24A2A6E10();
  uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
  v13(v10, v11, v12);
  uint64_t v14 = *(int *)(a3 + 40);
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (uint64_t *)(a2 + v14);
  uint64_t v17 = type metadata accessor for SignedObject(0);
  uint64_t v18 = *(void *)(v17 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
  {
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174320);
    memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    uint64_t v20 = *v16;
    unint64_t v21 = v16[1];
    sub_24A1A52B0(*v16, v21);
    void *v15 = v20;
    v15[1] = v21;
    v13((char *)v15 + *(int *)(v17 + 20), (char *)v16 + *(int *)(v17 + 20), v12);
    uint64_t v22 = *(int *)(v17 + 24);
    unint64_t v23 = (void *)((char *)v15 + v22);
    uint64_t v24 = (uint64_t *)((char *)v16 + v22);
    uint64_t v25 = type metadata accessor for Signature(0);
    uint64_t v32 = *(void *)(v25 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v32 + 48))(v24, 1, v25))
    {
      uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
      memcpy(v23, v24, *(void *)(*(void *)(v26 - 8) + 64));
    }
    else
    {
      unint64_t v28 = v24[1];
      uint64_t v30 = *v24;
      sub_24A1A52B0(*v24, v28);
      *unint64_t v23 = v30;
      v23[1] = v28;
      unint64_t v29 = v24[3];
      uint64_t v31 = v24[2];
      sub_24A1A52B0(v31, v29);
      void v23[2] = v31;
      _OWORD v23[3] = v29;
      void v23[4] = v24[4];
      *((unsigned char *)v23 + 40) = *((unsigned char *)v24 + 40);
      v13((char *)v23 + *(int *)(v25 + 28), (char *)v24 + *(int *)(v25 + 28), v12);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v32 + 56))(v23, 0, 1, v25);
    }
    (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  }
  return a1;
}

uint64_t sub_24A22298C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v6;
  *(void *)(a1 + 16) = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[3];
  unint64_t v8 = a2[4];
  sub_24A1A52B0(v7, v8);
  uint64_t v9 = *(void *)(a1 + 24);
  unint64_t v10 = *(void *)(a1 + 32);
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v8;
  sub_24A1A5384(v9, v10);
  *(void *)(a1 + 40) = a2[5];
  uint64_t v11 = a2[6];
  *(unsigned char *)(a1 + 56) = *((unsigned char *)a2 + 56);
  *(void *)(a1 + 48) = v11;
  uint64_t v12 = *(int *)(a3 + 36);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = (uint64_t)a2 + v12;
  uint64_t v66 = sub_24A2A6E10();
  uint64_t v67 = *(void *)(v66 - 8);
  uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v67 + 24);
  v15(v13, v14);
  uint64_t v16 = *(int *)(a3 + 40);
  uint64_t v17 = (uint64_t *)(a1 + v16);
  uint64_t v18 = (uint64_t *)((char *)a2 + v16);
  uint64_t v19 = type metadata accessor for SignedObject(0);
  uint64_t v20 = *(void *)(v19 - 8);
  unint64_t v21 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v20 + 48);
  LODWORD(v14) = v21(v17, 1, v19);
  int v22 = v21(v18, 1, v19);
  if (!v14)
  {
    if (!v22)
    {
      uint64_t v34 = *v18;
      unint64_t v35 = v18[1];
      sub_24A1A52B0(*v18, v35);
      uint64_t v36 = *v17;
      unint64_t v37 = v17[1];
      uint64_t *v17 = v34;
      v17[1] = v35;
      sub_24A1A5384(v36, v37);
      ((void (*)(char *, char *, uint64_t))v15)((char *)v17 + *(int *)(v19 + 20), (char *)v18 + *(int *)(v19 + 20), v66);
      uint64_t v38 = *(int *)(v19 + 24);
      uint64_t v39 = (uint64_t)v17 + v38;
      long long v40 = (char *)v18 + v38;
      uint64_t v41 = type metadata accessor for Signature(0);
      uint64_t v42 = *(void *)(v41 - 8);
      unint64_t v43 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v42 + 48);
      LODWORD(v34) = v43(v39, 1, v41);
      int v44 = v43((uint64_t)v40, 1, v41);
      if (v34)
      {
        if (!v44)
        {
          uint64_t v45 = *(void *)v40;
          unint64_t v46 = *((void *)v40 + 1);
          sub_24A1A52B0(*(void *)v40, v46);
          *(void *)uint64_t v39 = v45;
          *(void *)(v39 + 8) = v46;
          uint64_t v47 = *((void *)v40 + 2);
          unint64_t v48 = *((void *)v40 + 3);
          sub_24A1A52B0(v47, v48);
          *(void *)(v39 + 16) = v47;
          *(void *)(v39 + 24) = v48;
          uint64_t v49 = *((void *)v40 + 4);
          *(unsigned char *)(v39 + 40) = v40[40];
          *(void *)(v39 + 32) = v49;
          (*(void (**)(uint64_t, char *, uint64_t))(v67 + 16))(v39 + *(int *)(v41 + 28), &v40[*(int *)(v41 + 28)], v66);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
          return a1;
        }
      }
      else
      {
        if (!v44)
        {
          uint64_t v54 = *(void *)v40;
          unint64_t v55 = *((void *)v40 + 1);
          sub_24A1A52B0(*(void *)v40, v55);
          uint64_t v56 = *(void *)v39;
          unint64_t v57 = *(void *)(v39 + 8);
          *(void *)uint64_t v39 = v54;
          *(void *)(v39 + 8) = v55;
          sub_24A1A5384(v56, v57);
          uint64_t v58 = *((void *)v40 + 2);
          unint64_t v59 = *((void *)v40 + 3);
          sub_24A1A52B0(v58, v59);
          uint64_t v60 = *(void *)(v39 + 16);
          unint64_t v61 = *(void *)(v39 + 24);
          *(void *)(v39 + 16) = v58;
          *(void *)(v39 + 24) = v59;
          sub_24A1A5384(v60, v61);
          uint64_t v62 = *((void *)v40 + 4);
          *(unsigned char *)(v39 + 40) = v40[40];
          *(void *)(v39 + 32) = v62;
          ((void (*)(uint64_t, char *, uint64_t))v15)(v39 + *(int *)(v41 + 28), &v40[*(int *)(v41 + 28)], v66);
          return a1;
        }
        sub_24A2202DC(v39, type metadata accessor for Signature);
      }
      size_t v31 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8) - 8) + 64);
      uint64_t v32 = (void *)v39;
      uint64_t v33 = (uint64_t *)v40;
      goto LABEL_8;
    }
    sub_24A2202DC((uint64_t)v17, type metadata accessor for SignedObject);
LABEL_7:
    size_t v31 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26B174320) - 8) + 64);
    uint64_t v32 = v17;
    uint64_t v33 = v18;
LABEL_8:
    memcpy(v32, v33, v31);
    return a1;
  }
  if (v22) {
    goto LABEL_7;
  }
  uint64_t v23 = *v18;
  unint64_t v24 = v18[1];
  sub_24A1A52B0(*v18, v24);
  uint64_t *v17 = v23;
  v17[1] = v24;
  uint64_t v65 = *(void (**)(char *, char *, uint64_t))(v67 + 16);
  v65((char *)v17 + *(int *)(v19 + 20), (char *)v18 + *(int *)(v19 + 20), v66);
  uint64_t v25 = *(int *)(v19 + 24);
  uint64_t v26 = (uint64_t *)((char *)v17 + v25);
  uint64_t v27 = (uint64_t *)((char *)v18 + v25);
  uint64_t v28 = type metadata accessor for Signature(0);
  uint64_t v29 = *(void *)(v28 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
  {
    uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
    memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64));
  }
  else
  {
    uint64_t v63 = *v27;
    unint64_t v50 = v27[1];
    sub_24A1A52B0(*v27, v50);
    *uint64_t v26 = v63;
    v26[1] = v50;
    unint64_t v51 = v27[3];
    uint64_t v64 = v27[2];
    sub_24A1A52B0(v64, v51);
    v26[2] = v64;
    void v26[3] = v51;
    uint64_t v52 = v27[4];
    *((unsigned char *)v26 + 40) = *((unsigned char *)v27 + 40);
    v26[4] = v52;
    v65((char *)v26 + *(int *)(v28 + 28), (char *)v27 + *(int *)(v28 + 28), v66);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
  }
  (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  return a1;
}

uint64_t sub_24A222ED8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  long long v6 = *(_OWORD *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v7;
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v8 = *(int *)(a3 + 36);
  uint64_t v9 = (char *)(a1 + v8);
  unint64_t v10 = (char *)(a2 + v8);
  *(_OWORD *)(a1 + 24) = v6;
  uint64_t v11 = sub_24A2A6E10();
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32);
  v12(v9, v10, v11);
  uint64_t v13 = *(int *)(a3 + 40);
  uint64_t v14 = (_OWORD *)(a1 + v13);
  uint64_t v15 = (_OWORD *)(a2 + v13);
  uint64_t v16 = type metadata accessor for SignedObject(0);
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174320);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    _OWORD *v14 = *v15;
    v12((char *)v14 + *(int *)(v16 + 20), (char *)v15 + *(int *)(v16 + 20), v11);
    uint64_t v19 = *(int *)(v16 + 24);
    long long __dst = (_OWORD *)((char *)v14 + v19);
    uint64_t v20 = (_OWORD *)((char *)v15 + v19);
    uint64_t v21 = type metadata accessor for Signature(0);
    uint64_t v22 = *(void *)(v21 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
    {
      uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
      memcpy(__dst, v20, *(void *)(*(void *)(v23 - 8) + 64));
    }
    else
    {
      long long v24 = v20[1];
      _OWORD *__dst = *v20;
      __dst[1] = v24;
      *((void *)__dst + 4) = *((void *)v20 + 4);
      *((unsigned char *)__dst + 40) = *((unsigned char *)v20 + 40);
      v12((char *)__dst + *(int *)(v21 + 28), (char *)v20 + *(int *)(v21 + 28), v11);
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v22 + 56))(__dst, 0, 1, v21);
    }
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  return a1;
}

uint64_t sub_24A223180(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a1 + 24);
  unint64_t v7 = *(void *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  sub_24A1A5384(v6, v7);
  uint64_t v8 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v8;
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v9 = *(int *)(a3 + 36);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = sub_24A2A6E10();
  uint64_t v47 = *(void *)(v12 - 8);
  uint64_t v49 = v12;
  uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v47 + 40);
  v13(v10, v11);
  uint64_t v14 = *(int *)(a3 + 40);
  uint64_t v15 = (uint64_t *)(a1 + v14);
  uint64_t v16 = (uint64_t *)(a2 + v14);
  uint64_t v17 = type metadata accessor for SignedObject(0);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v18 + 48);
  LODWORD(v11) = v19(v15, 1, v17);
  int v20 = v19(v16, 1, v17);
  if (!v11)
  {
    if (!v20)
    {
      uint64_t v30 = *v15;
      unint64_t v31 = v15[1];
      *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
      sub_24A1A5384(v30, v31);
      ((void (*)(char *, char *, uint64_t))v13)((char *)v15 + *(int *)(v17 + 20), (char *)v16 + *(int *)(v17 + 20), v49);
      uint64_t v32 = *(int *)(v17 + 24);
      uint64_t v33 = (uint64_t)v15 + v32;
      uint64_t v34 = (char *)v16 + v32;
      uint64_t v35 = type metadata accessor for Signature(0);
      uint64_t v36 = *(void *)(v35 - 8);
      unint64_t v37 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v36 + 48);
      int v38 = v37(v33, 1, v35);
      int v39 = v37((uint64_t)v34, 1, v35);
      if (v38)
      {
        if (!v39)
        {
          long long v40 = *((_OWORD *)v34 + 1);
          *(_OWORD *)uint64_t v33 = *(_OWORD *)v34;
          *(_OWORD *)(v33 + 16) = v40;
          *(void *)(v33 + 32) = *((void *)v34 + 4);
          *(unsigned char *)(v33 + 40) = v34[40];
          (*(void (**)(uint64_t, char *, uint64_t))(v47 + 32))(v33 + *(int *)(v35 + 28), &v34[*(int *)(v35 + 28)], v49);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
          return a1;
        }
      }
      else
      {
        if (!v39)
        {
          uint64_t v43 = *(void *)v33;
          unint64_t v44 = *(void *)(v33 + 8);
          *(_OWORD *)uint64_t v33 = *(_OWORD *)v34;
          sub_24A1A5384(v43, v44);
          uint64_t v45 = *(void *)(v33 + 16);
          unint64_t v46 = *(void *)(v33 + 24);
          *(_OWORD *)(v33 + 16) = *((_OWORD *)v34 + 1);
          sub_24A1A5384(v45, v46);
          *(void *)(v33 + 32) = *((void *)v34 + 4);
          *(unsigned char *)(v33 + 40) = v34[40];
          ((void (*)(uint64_t, char *, uint64_t))v13)(v33 + *(int *)(v35 + 28), &v34[*(int *)(v35 + 28)], v49);
          return a1;
        }
        sub_24A2202DC(v33, type metadata accessor for Signature);
      }
      size_t v27 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8) - 8) + 64);
      uint64_t v28 = (void *)v33;
      uint64_t v29 = (uint64_t *)v34;
      goto LABEL_8;
    }
    sub_24A2202DC((uint64_t)v15, type metadata accessor for SignedObject);
LABEL_7:
    size_t v27 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26B174320) - 8) + 64);
    uint64_t v28 = v15;
    uint64_t v29 = v16;
LABEL_8:
    memcpy(v28, v29, v27);
    return a1;
  }
  if (v20) {
    goto LABEL_7;
  }
  *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
  unint64_t v48 = *(void (**)(char *, char *, uint64_t))(v47 + 32);
  v48((char *)v15 + *(int *)(v17 + 20), (char *)v16 + *(int *)(v17 + 20), v49);
  uint64_t v21 = *(int *)(v17 + 24);
  uint64_t v22 = (_OWORD *)((char *)v15 + v21);
  uint64_t v23 = (_OWORD *)((char *)v16 + v21);
  uint64_t v24 = type metadata accessor for Signature(0);
  uint64_t v25 = *(void *)(v24 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
  {
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
    memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
  }
  else
  {
    long long v41 = v23[1];
    _OWORD *v22 = *v23;
    v22[1] = v41;
    *((void *)v22 + 4) = *((void *)v23 + 4);
    *((unsigned char *)v22 + 40) = *((unsigned char *)v23 + 40);
    v48((char *)v22 + *(int *)(v24 + 28), (char *)v23 + *(int *)(v24 + 28), v49);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  }
  (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  return a1;
}

uint64_t sub_24A22364C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24A223660);
}

uint64_t sub_24A223660(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_24A2A6E10();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 36);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174320);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 40);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t sub_24A223790(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24A2237A4);
}

uint64_t sub_24A2237A4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 16) = (a2 - 1);
  }
  else
  {
    uint64_t v8 = sub_24A2A6E10();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 36);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174320);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 40);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

void sub_24A2238D4()
{
  sub_24A2A6E10();
  if (v0 <= 0x3F)
  {
    sub_24A21D780(319, &qword_26B174328, (void (*)(uint64_t))type metadata accessor for SignedObject);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t sub_24A2239EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), void (*a5)(void), uint64_t (*a6)(uint64_t), void (*a7)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v13 = *(int *)(a4(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    a5(0);
    swift_allocObject();
    uint64_t v14 = swift_retain();
    *(void *)(v7 + v13) = a6(v14);
    swift_release();
  }
  uint64_t v15 = swift_retain();
  a7(v15, a1, a2, a3);
  return swift_release();
}

uint64_t sub_24A223AE0()
{
  while (1)
  {
    uint64_t result = sub_24A2A6ED0();
    if (v0 || (v2 & 1) != 0) {
      break;
    }
    if (result == 2)
    {
      sub_24A223C44();
    }
    else if (result == 1)
    {
      sub_24A223B74();
    }
  }
  return result;
}

uint64_t sub_24A223B74()
{
  return swift_endAccess();
}

uint64_t sub_24A223C44()
{
  return swift_endAccess();
}

uint64_t sub_24A223D14(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void), void (*a5)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  a4(0);
  uint64_t v10 = swift_retain();
  a5(v10, a1, a2, a3);
  uint64_t result = swift_release();
  if (!v5) {
    return sub_24A2A6DF0();
  }
  return result;
}

uint64_t sub_24A223DB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = sub_24A223E04(a1, a2, a3, a4);
  if (!v4) {
    return sub_24A224014(a1, a2, a3, a4);
  }
  return result;
}

uint64_t sub_24A223E04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174940);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for LogEntry(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV16CloudAttestation17PatInclusionProofP33_169C9B08F2DC833EDD0C19E1D431E7CF13_StorageClass__perApplicationTreeEntry;
  swift_beginAccess();
  sub_24A1B2CAC(v12, (uint64_t)v7, &qword_26B174940);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_24A1B2D10((uint64_t)v7, &qword_26B174940);
  }
  sub_24A22B404((uint64_t)v7, (uint64_t)v11, type metadata accessor for LogEntry);
  sub_24A227048(&qword_26B174920, (void (*)(uint64_t))type metadata accessor for LogEntry);
  sub_24A2A70F0();
  return sub_24A2202DC((uint64_t)v11, type metadata accessor for LogEntry);
}

uint64_t sub_24A224014(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174940);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for LogEntry(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1
      + OBJC_IVAR____TtCV16CloudAttestation17PatInclusionProofP33_169C9B08F2DC833EDD0C19E1D431E7CF13_StorageClass__topLevelTreeEntry;
  swift_beginAccess();
  sub_24A1B2CAC(v12, (uint64_t)v7, &qword_26B174940);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_24A1B2D10((uint64_t)v7, &qword_26B174940);
  }
  sub_24A22B404((uint64_t)v7, (uint64_t)v11, type metadata accessor for LogEntry);
  sub_24A227048(&qword_26B174920, (void (*)(uint64_t))type metadata accessor for LogEntry);
  sub_24A2A70F0();
  return sub_24A2202DC((uint64_t)v11, type metadata accessor for LogEntry);
}

BOOL sub_24A224224(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LogEntry(0);
  uint64_t v44 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  long long v40 = (uint64_t *)((char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174950);
  uint64_t v7 = MEMORY[0x270FA5388](v6);
  uint64_t v43 = (uint64_t)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v39 - v9;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174940);
  uint64_t v12 = MEMORY[0x270FA5388](v11 - 8);
  int v39 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v42 = (uint64_t)&v39 - v15;
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)&v39 - v17;
  MEMORY[0x270FA5388](v16);
  int v20 = (char *)&v39 - v19;
  uint64_t v21 = a1
      + OBJC_IVAR____TtCV16CloudAttestation17PatInclusionProofP33_169C9B08F2DC833EDD0C19E1D431E7CF13_StorageClass__perApplicationTreeEntry;
  swift_beginAccess();
  sub_24A1B2CAC(v21, (uint64_t)v20, &qword_26B174940);
  uint64_t v22 = a2
      + OBJC_IVAR____TtCV16CloudAttestation17PatInclusionProofP33_169C9B08F2DC833EDD0C19E1D431E7CF13_StorageClass__perApplicationTreeEntry;
  swift_beginAccess();
  uint64_t v41 = v6;
  uint64_t v23 = *(int *)(v6 + 48);
  uint64_t v24 = v4;
  uint64_t v25 = v44;
  uint64_t v26 = (uint64_t)&v10[v23];
  sub_24A1B2CAC((uint64_t)v20, (uint64_t)v10, &qword_26B174940);
  sub_24A1B2CAC(v22, v26, &qword_26B174940);
  size_t v27 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48);
  if (v27((uint64_t)v10, 1, v24) != 1)
  {
    sub_24A1B2CAC((uint64_t)v10, (uint64_t)v18, &qword_26B174940);
    if (v27(v26, 1, v24) != 1)
    {
      uint64_t v28 = v26;
      uint64_t v29 = v40;
      sub_24A22B404(v28, (uint64_t)v40, type metadata accessor for LogEntry);
      swift_retain();
      swift_retain();
      LODWORD(v44) = sub_24A22AE28(v18, v29);
      sub_24A2202DC((uint64_t)v29, type metadata accessor for LogEntry);
      sub_24A1B2D10((uint64_t)v20, &qword_26B174940);
      sub_24A2202DC((uint64_t)v18, type metadata accessor for LogEntry);
      sub_24A1B2D10((uint64_t)v10, &qword_26B174940);
      if (v44) {
        goto LABEL_9;
      }
LABEL_7:
      swift_release();
      swift_release();
      return 0;
    }
    swift_retain();
    swift_retain();
    sub_24A1B2D10((uint64_t)v20, &qword_26B174940);
    sub_24A2202DC((uint64_t)v18, type metadata accessor for LogEntry);
LABEL_6:
    sub_24A1B2D10((uint64_t)v10, &qword_26B174950);
    goto LABEL_7;
  }
  swift_retain();
  swift_retain();
  sub_24A1B2D10((uint64_t)v20, &qword_26B174940);
  if (v27(v26, 1, v24) != 1) {
    goto LABEL_6;
  }
  sub_24A1B2D10((uint64_t)v10, &qword_26B174940);
LABEL_9:
  uint64_t v30 = a1
      + OBJC_IVAR____TtCV16CloudAttestation17PatInclusionProofP33_169C9B08F2DC833EDD0C19E1D431E7CF13_StorageClass__topLevelTreeEntry;
  swift_beginAccess();
  uint64_t v31 = v42;
  sub_24A1B2CAC(v30, v42, &qword_26B174940);
  uint64_t v32 = a2
      + OBJC_IVAR____TtCV16CloudAttestation17PatInclusionProofP33_169C9B08F2DC833EDD0C19E1D431E7CF13_StorageClass__topLevelTreeEntry;
  swift_beginAccess();
  uint64_t v33 = v43;
  uint64_t v34 = v43 + *(int *)(v41 + 48);
  sub_24A1B2CAC(v31, v43, &qword_26B174940);
  sub_24A1B2CAC(v32, v34, &qword_26B174940);
  if (v27(v33, 1, v24) == 1)
  {
    swift_release();
    swift_release();
    sub_24A1B2D10(v31, &qword_26B174940);
    if (v27(v34, 1, v24) == 1)
    {
      sub_24A1B2D10(v33, &qword_26B174940);
      return 1;
    }
    goto LABEL_14;
  }
  uint64_t v35 = v39;
  sub_24A1B2CAC(v33, (uint64_t)v39, &qword_26B174940);
  if (v27(v34, 1, v24) == 1)
  {
    swift_release();
    swift_release();
    sub_24A1B2D10(v31, &qword_26B174940);
    sub_24A2202DC((uint64_t)v35, type metadata accessor for LogEntry);
LABEL_14:
    sub_24A1B2D10(v33, &qword_26B174950);
    return 0;
  }
  unint64_t v37 = v40;
  sub_24A22B404(v34, (uint64_t)v40, type metadata accessor for LogEntry);
  char v38 = sub_24A22AE28(v35, v37);
  swift_release();
  swift_release();
  sub_24A2202DC((uint64_t)v37, type metadata accessor for LogEntry);
  sub_24A1B2D10(v31, &qword_26B174940);
  sub_24A2202DC((uint64_t)v35, type metadata accessor for LogEntry);
  sub_24A1B2D10(v33, &qword_26B174940);
  return (v38 & 1) != 0;
}

uint64_t sub_24A224838@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_24A22485C(a1, &qword_2697784F8, &qword_269778FF0, a2);
}

uint64_t sub_24A22485C@<X0>(uint64_t a1@<X0>, void *a2@<X2>, void *a3@<X3>, uint64_t a4@<X8>)
{
  sub_24A2A6E00();
  uint64_t v8 = *(int *)(a1 + 20);
  if (*a2 != -1) {
    swift_once();
  }
  *(void *)(a4 + v8) = *a3;

  return swift_retain();
}

unint64_t sub_24A2248D8()
{
  return 0xD000000000000011;
}

uint64_t sub_24A2248F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24A2239EC(a1, a2, a3, type metadata accessor for PatInclusionProof, (void (*)(void))type metadata accessor for PatInclusionProof._StorageClass, sub_24A21F2F0, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24A223AE0);
}

uint64_t sub_24A22495C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24A223D14(a1, a2, a3, (void (*)(void))type metadata accessor for PatInclusionProof, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24A223DB4);
}

uint64_t sub_24A22499C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A227048(&qword_2697792B0, (void (*)(uint64_t))type metadata accessor for PatInclusionProof);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t sub_24A224A18@<X0>(uint64_t a1@<X8>)
{
  return sub_24A1ADE40(&qword_2697784F0, (uint64_t)qword_26977A688, a1);
}

uint64_t sub_24A224A3C(uint64_t a1)
{
  uint64_t v2 = sub_24A227048(&qword_269779128, (void (*)(uint64_t))type metadata accessor for PatInclusionProof);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t sub_24A224AA8()
{
  sub_24A227048(&qword_269779128, (void (*)(uint64_t))type metadata accessor for PatInclusionProof);

  return sub_24A2A7010();
}

uint64_t sub_24A224B24(uint64_t a1, uint64_t a2)
{
  return sub_24A22A0B0(a1, a2, type metadata accessor for PatInclusionProof, (uint64_t (*)(uint64_t, uint64_t))sub_24A224224) & 1;
}

uint64_t sub_24A224B68(uint64_t a1)
{
  return sub_24A2251D0(a1, qword_26977A6A0, 1, (uint64_t)"mutation", 8);
}

uint64_t sub_24A224B84()
{
  while (1)
  {
    uint64_t result = sub_24A2A6ED0();
    if (v0 || (v2 & 1) != 0) {
      break;
    }
    if (result == 1) {
      sub_24A2A6F40();
    }
  }
  return result;
}

uint64_t sub_24A224BF4()
{
  uint64_t v2 = *v0;
  unint64_t v3 = v0[1];
  switch(v3 >> 62)
  {
    case 1uLL:
      if ((int)v2 != v2 >> 32) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 2uLL:
      if (*(void *)(v2 + 16) != *(void *)(v2 + 24)) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 3uLL:
      goto LABEL_8;
    default:
      if ((v3 & 0xFF000000000000) == 0) {
        goto LABEL_8;
      }
LABEL_7:
      uint64_t result = sub_24A2A7090();
      if (!v1)
      {
LABEL_8:
        type metadata accessor for ChangeLogNodeV2(0);
        return sub_24A2A6DF0();
      }
      return result;
  }
}

uint64_t sub_24A224CE4@<X0>(_OWORD *a1@<X8>)
{
  *a1 = xmmword_24A2A8A80;
  return sub_24A2A6E00();
}

uint64_t sub_24A224D10()
{
  return 0x6F4C65676E616843;
}

uint64_t sub_24A224D34()
{
  return sub_24A224B84();
}

uint64_t sub_24A224D4C()
{
  return sub_24A224BF4();
}

uint64_t sub_24A224D64(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A227048(&qword_2697792B8, (void (*)(uint64_t))type metadata accessor for ChangeLogNodeV2);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t sub_24A224DE0@<X0>(uint64_t a1@<X8>)
{
  return sub_24A1ADE40(&qword_269778500, (uint64_t)qword_26977A6A0, a1);
}

uint64_t sub_24A224E04(uint64_t a1)
{
  uint64_t v2 = sub_24A227048(&qword_269779108, (void (*)(uint64_t))type metadata accessor for ChangeLogNodeV2);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t sub_24A224E70()
{
  sub_24A227048(&qword_269779108, (void (*)(uint64_t))type metadata accessor for ChangeLogNodeV2);

  return sub_24A2A7010();
}

uint64_t sub_24A224EF0(uint64_t a1)
{
  return sub_24A2251D0(a1, qword_26977A6B8, 2, (uint64_t)"objectMapHead", 13);
}

uint64_t sub_24A224F0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  while (1)
  {
    uint64_t result = sub_24A2A6ED0();
    if (v4 || (v10 & 1) != 0) {
      break;
    }
    if (result == 2) {
      sub_24A2253BC(a1, v5, a2, a3, (void (*)(void))type metadata accessor for PerApplicationTreeNode);
    }
  }
  return result;
}

unint64_t sub_24A224F98()
{
  return 0xD000000000000016;
}

uint64_t sub_24A224FB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24A224F0C(a1, a2, a3);
}

uint64_t sub_24A224FCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24A225470(a1, a2, a3, type metadata accessor for PerApplicationTreeNode, 2);
}

uint64_t sub_24A224FFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A227048(&qword_2697792C0, (void (*)(uint64_t))type metadata accessor for PerApplicationTreeNode);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t sub_24A225078@<X0>(uint64_t a1@<X8>)
{
  return sub_24A1ADE40(&qword_269778508, (uint64_t)qword_26977A6B8, a1);
}

uint64_t sub_24A22509C(uint64_t a1)
{
  uint64_t v2 = sub_24A227048(&qword_2697790E8, (void (*)(uint64_t))type metadata accessor for PerApplicationTreeNode);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t sub_24A225108()
{
  sub_24A227048(&qword_2697790E8, (void (*)(uint64_t))type metadata accessor for PerApplicationTreeNode);

  return sub_24A2A7010();
}

uint64_t sub_24A225184(uint64_t a1, uint64_t a2)
{
  return sub_24A2294F4(a1, a2, type metadata accessor for PerApplicationTreeNode) & 1;
}

uint64_t sub_24A2251B4(uint64_t a1)
{
  return sub_24A2251D0(a1, qword_26977A6D0, 1, (uint64_t)"patHead", 7);
}

uint64_t sub_24A2251D0(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = sub_24A2A7130();
  __swift_allocate_value_buffer(v9, a2);
  __swift_project_value_buffer(v9, (uint64_t)a2);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697787B0);
  char v10 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2697787B8) - 8);
  unint64_t v11 = (*(unsigned __int8 *)(*(void *)v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v10 + 80);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_24A2A8A60;
  unint64_t v13 = v12 + v11 + v10[14];
  *(void *)(v12 + v11) = a3;
  *(void *)unint64_t v13 = a4;
  *(void *)(v13 + 8) = a5;
  *(unsigned char *)(v13 + 16) = 2;
  uint64_t v14 = *MEMORY[0x263F50718];
  uint64_t v15 = sub_24A2A7100();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 104))(v13, v14, v15);
  return sub_24A2A7110();
}

uint64_t sub_24A225334(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  while (1)
  {
    uint64_t result = sub_24A2A6ED0();
    if (v4 || (v10 & 1) != 0) {
      break;
    }
    if (result == 1) {
      sub_24A2253BC(a1, v5, a2, a3, (void (*)(void))type metadata accessor for TopLevelTreeNode);
    }
  }
  return result;
}

uint64_t sub_24A2253BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void))
{
  return sub_24A2A6FA0();
}

uint64_t sub_24A225470(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t a5)
{
  uint64_t result = sub_24A2254D0(v5, a1, a2, a3, a4, a5);
  if (!v6) {
    return sub_24A2A6DF0();
  }
  return result;
}

uint64_t sub_24A2254D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), uint64_t a6)
{
  v17[0] = a6;
  v17[1] = a3;
  uint64_t v17[3] = a4;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174320);
  MEMORY[0x270FA5388](v8 - 8);
  char v10 = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for SignedObject(0);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = a5(0);
  sub_24A1B2CAC(a1 + *(int *)(v15 + 20), (uint64_t)v10, &qword_26B174320);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1) {
    return sub_24A1B2D10((uint64_t)v10, &qword_26B174320);
  }
  sub_24A22B404((uint64_t)v10, (uint64_t)v14, type metadata accessor for SignedObject);
  sub_24A227048(&qword_26B174300, (void (*)(uint64_t))type metadata accessor for SignedObject);
  sub_24A2A70F0();
  return sub_24A2202DC((uint64_t)v14, type metadata accessor for SignedObject);
}

uint64_t sub_24A2256D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_24A2A6E00();
  uint64_t v4 = a2 + *(int *)(a1 + 20);
  uint64_t v5 = type metadata accessor for SignedObject(0);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);

  return v6(v4, 1, 1, v5);
}

unint64_t sub_24A225750()
{
  return 0xD000000000000010;
}

uint64_t sub_24A22576C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24A225334(a1, a2, a3);
}

uint64_t sub_24A225784(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24A225470(a1, a2, a3, type metadata accessor for TopLevelTreeNode, 1);
}

uint64_t sub_24A2257B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A227048(&qword_2697792C8, (void (*)(uint64_t))type metadata accessor for TopLevelTreeNode);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t sub_24A225830@<X0>(uint64_t a1@<X8>)
{
  return sub_24A1ADE40(&qword_269778510, (uint64_t)qword_26977A6D0, a1);
}

uint64_t sub_24A225854(uint64_t a1)
{
  uint64_t v2 = sub_24A227048(&qword_2697790C8, (void (*)(uint64_t))type metadata accessor for TopLevelTreeNode);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t sub_24A2258C0()
{
  sub_24A227048(&qword_2697790C8, (void (*)(uint64_t))type metadata accessor for TopLevelTreeNode);

  return sub_24A2A7010();
}

uint64_t sub_24A22593C(uint64_t a1, uint64_t a2)
{
  return sub_24A2294F4(a1, a2, type metadata accessor for TopLevelTreeNode) & 1;
}

uint64_t sub_24A22596C()
{
  uint64_t v0 = sub_24A2A7130();
  __swift_allocate_value_buffer(v0, qword_26977A6E8);
  __swift_project_value_buffer(v0, (uint64_t)qword_26977A6E8);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697787B0);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2697787B8) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_24A2A8A70;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *uint64_t v5 = 1;
  *(void *)unint64_t v6 = "vrfPublicKey";
  *(void *)(v6 + 8) = 12;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = sub_24A2A7100();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  char v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)char v10 = "publicKeyBytes";
  *((void *)v10 + 1) = 14;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "earliestVersion";
  *(void *)(v11 + 8) = 15;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return sub_24A2A7110();
}

uint64_t sub_24A225B70()
{
  uint64_t result = sub_24A2A6ED0();
  uint64_t v3 = v0;
  if (!v0)
  {
    while (1)
    {
      if (v2) {
        return result;
      }
      if (result == 3) {
        break;
      }
      if (result == 2)
      {
        uint64_t v4 = v3;
        sub_24A2A6F40();
        goto LABEL_5;
      }
      if (result == 1)
      {
        uint64_t v4 = v3;
        sub_24A225C6C();
        goto LABEL_5;
      }
LABEL_6:
      uint64_t result = sub_24A2A6ED0();
    }
    sub_24A1AE934();
    uint64_t v4 = v3;
    sub_24A2A6F10();
LABEL_5:
    uint64_t v3 = v4;
    goto LABEL_6;
  }
  return result;
}

uint64_t sub_24A225C6C()
{
  return sub_24A2A6FA0();
}

uint64_t sub_24A225D1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_24A225E74((uint64_t)v3, a1, a2, a3);
  if (!v4)
  {
    uint64_t v6 = *v3;
    unint64_t v7 = v3[1];
    switch(v7 >> 62)
    {
      case 1uLL:
        if ((int)v6 != v6 >> 32) {
          goto LABEL_8;
        }
        break;
      case 2uLL:
        if (*(void *)(v6 + 16) != *(void *)(v6 + 24)) {
          goto LABEL_8;
        }
        break;
      case 3uLL:
        break;
      default:
        if ((v7 & 0xFF000000000000) != 0) {
LABEL_8:
        }
          sub_24A2A7090();
        break;
    }
    if (v3[2])
    {
      sub_24A1AE934();
      sub_24A2A7070();
    }
    type metadata accessor for PerApplicationTreeConfigNode(0);
    return sub_24A2A6DF0();
  }
  return result;
}

uint64_t sub_24A225E74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2697792D8);
  MEMORY[0x270FA5388](v5 - 8);
  unint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for VRFPublicKey(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PerApplicationTreeConfigNode(0);
  sub_24A1B2CAC(a1 + *(int *)(v12 + 28), (uint64_t)v7, &qword_2697792D8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_24A1B2D10((uint64_t)v7, &qword_2697792D8);
  }
  sub_24A22B404((uint64_t)v7, (uint64_t)v11, type metadata accessor for VRFPublicKey);
  sub_24A227048(&qword_2697791F8, (void (*)(uint64_t))type metadata accessor for VRFPublicKey);
  sub_24A2A70F0();
  return sub_24A2202DC((uint64_t)v11, type metadata accessor for VRFPublicKey);
}

uint64_t sub_24A22606C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = xmmword_24A2A8A80;
  *(void *)(a2 + 16) = 0;
  *(unsigned char *)(a2 + 24) = 1;
  sub_24A2A6E00();
  uint64_t v4 = a2 + *(int *)(a1 + 28);
  uint64_t v5 = type metadata accessor for VRFPublicKey(0);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);

  return v6(v4, 1, 1, v5);
}

unint64_t sub_24A226108()
{
  return 0xD00000000000001CLL;
}

uint64_t sub_24A226124()
{
  return sub_24A225B70();
}

uint64_t sub_24A22613C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24A225D1C(a1, a2, a3);
}

uint64_t sub_24A226154(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A227048(&qword_2697792D0, (void (*)(uint64_t))type metadata accessor for PerApplicationTreeConfigNode);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t sub_24A2261D0@<X0>(uint64_t a1@<X8>)
{
  return sub_24A1ADE40(&qword_269778518, (uint64_t)qword_26977A6E8, a1);
}

uint64_t sub_24A2261F4(uint64_t a1)
{
  uint64_t v2 = sub_24A227048(&qword_2697790A8, (void (*)(uint64_t))type metadata accessor for PerApplicationTreeConfigNode);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t sub_24A226260()
{
  sub_24A227048(&qword_2697790A8, (void (*)(uint64_t))type metadata accessor for PerApplicationTreeConfigNode);

  return sub_24A2A7010();
}

uint64_t sub_24A2262E0()
{
  uint64_t v0 = sub_24A2A7130();
  __swift_allocate_value_buffer(v0, qword_26977A700);
  __swift_project_value_buffer(v0, (uint64_t)qword_26977A700);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697787B0);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2697787B8) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_24A2A8AA0;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *uint64_t v5 = 1;
  *(void *)unint64_t v6 = "publicKeyBytes";
  *(void *)(v6 + 8) = 14;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = sub_24A2A7100();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 3;
  *(void *)uint64_t v10 = "earliestVersion";
  *((void *)v10 + 1) = 15;
  v10[16] = 2;
  v9();
  return sub_24A2A7110();
}

uint64_t sub_24A22649C()
{
  uint64_t result = sub_24A2A6ED0();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 3)
      {
        sub_24A1AE934();
        sub_24A2A6F10();
      }
      else if (result == 1)
      {
        sub_24A2A6F40();
      }
      uint64_t result = sub_24A2A6ED0();
    }
  }
  return result;
}

uint64_t sub_24A226580(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5, uint64_t a6, void (*a7)(void))
{
  uint64_t result = *v7;
  unint64_t v10 = v7[1];
  switch(v10 >> 62)
  {
    case 1uLL:
      if ((int)result != result >> 32) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 2uLL:
      if (*(void *)(result + 16) != *(void *)(result + 24)) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 3uLL:
      goto LABEL_8;
    default:
      if ((v10 & 0xFF000000000000) == 0) {
        goto LABEL_8;
      }
LABEL_7:
      uint64_t result = sub_24A2A7090();
      if (!v8)
      {
LABEL_8:
        if (!v7[2] || (a4(result), uint64_t result = sub_24A2A7070(), !v8))
        {
          a7(0);
          return sub_24A2A6DF0();
        }
      }
      return result;
  }
}

uint64_t sub_24A2266E4@<X0>(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_24A2A8A80;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 1;
  return sub_24A2A6E00();
}

unint64_t sub_24A22671C()
{
  return 0xD000000000000016;
}

uint64_t sub_24A226738()
{
  return sub_24A22649C();
}

uint64_t sub_24A226750(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24A226580(a1, a2, a3, (void (*)(uint64_t))sub_24A1AE934, 3, (uint64_t)&type metadata for ProtocolVersion, (void (*)(void))type metadata accessor for TopLevelTreeConfigNode);
}

uint64_t sub_24A22679C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A227048(&qword_2697792E8, (void (*)(uint64_t))type metadata accessor for TopLevelTreeConfigNode);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t sub_24A226818@<X0>(uint64_t a1@<X8>)
{
  return sub_24A1ADE40(&qword_269778520, (uint64_t)qword_26977A700, a1);
}

uint64_t sub_24A22683C(uint64_t a1)
{
  uint64_t v2 = sub_24A227048(&qword_269779088, (void (*)(uint64_t))type metadata accessor for TopLevelTreeConfigNode);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t sub_24A2268A8()
{
  sub_24A227048(&qword_269779088, (void (*)(uint64_t))type metadata accessor for TopLevelTreeConfigNode);

  return sub_24A2A7010();
}

uint64_t sub_24A226928()
{
  uint64_t v0 = sub_24A2A7130();
  __swift_allocate_value_buffer(v0, qword_26977A718);
  __swift_project_value_buffer(v0, (uint64_t)qword_26977A718);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697787B0);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2697787B8) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_24A2A8AA0;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *uint64_t v5 = 1;
  *(void *)unint64_t v6 = "timestampMs";
  *(void *)(v6 + 8) = 11;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = sub_24A2A7100();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 3;
  *(void *)unint64_t v10 = "earliestVersionForNextTree";
  *((void *)v10 + 1) = 26;
  v10[16] = 2;
  v9();
  return sub_24A2A7110();
}

uint64_t sub_24A226AE4()
{
  uint64_t result = sub_24A2A6ED0();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 3)
      {
        sub_24A1AE934();
        sub_24A2A6F10();
      }
      else if (result == 1)
      {
        sub_24A2A6F80();
      }
      uint64_t result = sub_24A2A6ED0();
    }
  }
  return result;
}

uint64_t sub_24A226BC8()
{
  if (!*v0 || (uint64_t result = sub_24A2A70D0(), !v1))
  {
    if (!v0[1] || (sub_24A1AE934(), uint64_t result = sub_24A2A7070(), !v1))
    {
      type metadata accessor for LogClosedNode(0);
      return sub_24A2A6DF0();
    }
  }
  return result;
}

uint64_t sub_24A226CAC@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 1;
  return sub_24A2A6E00();
}

uint64_t sub_24A226CD8()
{
  return 0x65736F6C43676F4CLL;
}

uint64_t sub_24A226CFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 24);
  uint64_t v5 = sub_24A2A6E10();
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t sub_24A226D6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 24);
  uint64_t v5 = sub_24A2A6E10();
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);

  return v6(v4, a1, v5);
}

uint64_t sub_24A226DDC()
{
  return sub_24A226AE4();
}

uint64_t sub_24A226DF4()
{
  return sub_24A226BC8();
}

uint64_t sub_24A226E0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A227048(&qword_2697792F0, (void (*)(uint64_t))type metadata accessor for LogClosedNode);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t sub_24A226E88@<X0>(uint64_t a1@<X8>)
{
  return sub_24A1ADE40(&qword_269778528, (uint64_t)qword_26977A718, a1);
}

uint64_t sub_24A226EAC(uint64_t a1)
{
  uint64_t v2 = sub_24A227048(&qword_269779068, (void (*)(uint64_t))type metadata accessor for LogClosedNode);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t sub_24A226F18()
{
  sub_24A227048(&qword_269779068, (void (*)(uint64_t))type metadata accessor for LogClosedNode);

  return sub_24A2A7010();
}

uint64_t sub_24A226F98()
{
  return sub_24A227048(&qword_269779060, (void (*)(uint64_t))type metadata accessor for LogClosedNode);
}

uint64_t type metadata accessor for LogClosedNode(uint64_t a1)
{
  return sub_24A1AE704(a1, (uint64_t *)&unk_269779398);
}

uint64_t sub_24A227000()
{
  return sub_24A227048(&qword_269779068, (void (*)(uint64_t))type metadata accessor for LogClosedNode);
}

uint64_t sub_24A227048(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_24A227090()
{
  return sub_24A227048(&qword_269779070, (void (*)(uint64_t))type metadata accessor for LogClosedNode);
}

uint64_t sub_24A2270D8()
{
  return sub_24A227048(&qword_269779078, (void (*)(uint64_t))type metadata accessor for LogClosedNode);
}

uint64_t sub_24A227120()
{
  return sub_24A227048(&qword_269779080, (void (*)(uint64_t))type metadata accessor for TopLevelTreeConfigNode);
}

uint64_t type metadata accessor for TopLevelTreeConfigNode(uint64_t a1)
{
  return sub_24A1AE704(a1, (uint64_t *)&unk_269779388);
}

uint64_t sub_24A227188()
{
  return sub_24A227048(&qword_269779088, (void (*)(uint64_t))type metadata accessor for TopLevelTreeConfigNode);
}

uint64_t sub_24A2271D0()
{
  return sub_24A227048(&qword_269779090, (void (*)(uint64_t))type metadata accessor for TopLevelTreeConfigNode);
}

uint64_t sub_24A227218()
{
  return sub_24A227048(&qword_269779098, (void (*)(uint64_t))type metadata accessor for TopLevelTreeConfigNode);
}

uint64_t sub_24A227260()
{
  return sub_24A227048(&qword_2697790A0, (void (*)(uint64_t))type metadata accessor for PerApplicationTreeConfigNode);
}

uint64_t type metadata accessor for PerApplicationTreeConfigNode(uint64_t a1)
{
  return sub_24A1AE704(a1, (uint64_t *)&unk_269779370);
}

uint64_t sub_24A2272C8()
{
  return sub_24A227048(&qword_2697790A8, (void (*)(uint64_t))type metadata accessor for PerApplicationTreeConfigNode);
}

uint64_t sub_24A227310()
{
  return sub_24A227048(&qword_2697790B0, (void (*)(uint64_t))type metadata accessor for PerApplicationTreeConfigNode);
}

uint64_t sub_24A227358()
{
  return sub_24A227048(&qword_2697790B8, (void (*)(uint64_t))type metadata accessor for PerApplicationTreeConfigNode);
}

uint64_t sub_24A2273A0()
{
  return sub_24A227048(&qword_2697790C0, (void (*)(uint64_t))type metadata accessor for TopLevelTreeNode);
}

uint64_t type metadata accessor for TopLevelTreeNode(uint64_t a1)
{
  return sub_24A1AE704(a1, (uint64_t *)&unk_269779360);
}

uint64_t sub_24A227408()
{
  return sub_24A227048(&qword_2697790C8, (void (*)(uint64_t))type metadata accessor for TopLevelTreeNode);
}

uint64_t sub_24A227450()
{
  return sub_24A227048(&qword_2697790D0, (void (*)(uint64_t))type metadata accessor for TopLevelTreeNode);
}

uint64_t sub_24A227498()
{
  return sub_24A227048(&qword_2697790D8, (void (*)(uint64_t))type metadata accessor for TopLevelTreeNode);
}

uint64_t sub_24A2274E0()
{
  return sub_24A227048(&qword_2697790E0, (void (*)(uint64_t))type metadata accessor for PerApplicationTreeNode);
}

uint64_t type metadata accessor for PerApplicationTreeNode(uint64_t a1)
{
  return sub_24A1AE704(a1, (uint64_t *)&unk_269779350);
}

uint64_t sub_24A227548()
{
  return sub_24A227048(&qword_2697790E8, (void (*)(uint64_t))type metadata accessor for PerApplicationTreeNode);
}

uint64_t sub_24A227590()
{
  return sub_24A227048(&qword_2697790F0, (void (*)(uint64_t))type metadata accessor for PerApplicationTreeNode);
}

uint64_t sub_24A2275D8()
{
  return sub_24A227048(&qword_2697790F8, (void (*)(uint64_t))type metadata accessor for PerApplicationTreeNode);
}

uint64_t sub_24A227620()
{
  return sub_24A227048(&qword_269779100, (void (*)(uint64_t))type metadata accessor for ChangeLogNodeV2);
}

uint64_t type metadata accessor for ChangeLogNodeV2(uint64_t a1)
{
  return sub_24A1AE704(a1, (uint64_t *)&unk_269779340);
}

uint64_t sub_24A227688()
{
  return sub_24A227048(&qword_269779108, (void (*)(uint64_t))type metadata accessor for ChangeLogNodeV2);
}

uint64_t sub_24A2276D0()
{
  return sub_24A227048(&qword_269779110, (void (*)(uint64_t))type metadata accessor for ChangeLogNodeV2);
}

uint64_t sub_24A227718()
{
  return sub_24A227048(&qword_269779118, (void (*)(uint64_t))type metadata accessor for ChangeLogNodeV2);
}

uint64_t sub_24A227760()
{
  return sub_24A227048(&qword_269779120, (void (*)(uint64_t))type metadata accessor for PatInclusionProof);
}

uint64_t type metadata accessor for PatInclusionProof(uint64_t a1)
{
  return sub_24A1AE704(a1, (uint64_t *)&unk_2697793B8);
}

uint64_t sub_24A2277C8()
{
  return sub_24A227048(&qword_269779128, (void (*)(uint64_t))type metadata accessor for PatInclusionProof);
}

uint64_t sub_24A227810()
{
  return sub_24A227048(&qword_269779130, (void (*)(uint64_t))type metadata accessor for PatInclusionProof);
}

uint64_t sub_24A227858()
{
  return sub_24A227048(&qword_269779138, (void (*)(uint64_t))type metadata accessor for PatInclusionProof);
}

uint64_t sub_24A2278A0()
{
  return sub_24A227048(&qword_269779140, (void (*)(uint64_t))type metadata accessor for InclusionProof);
}

uint64_t type metadata accessor for InclusionProof(uint64_t a1)
{
  return sub_24A1AE704(a1, (uint64_t *)&unk_2697793A8);
}

uint64_t sub_24A227908()
{
  return sub_24A227048(&qword_269779148, (void (*)(uint64_t))type metadata accessor for InclusionProof);
}

uint64_t sub_24A227950()
{
  return sub_24A227048(&qword_269779150, (void (*)(uint64_t))type metadata accessor for InclusionProof);
}

uint64_t sub_24A227998()
{
  return sub_24A227048(&qword_269779158, (void (*)(uint64_t))type metadata accessor for InclusionProof);
}

uint64_t sub_24A2279E0()
{
  return sub_24A227048(&qword_269779160, (void (*)(uint64_t))type metadata accessor for MapEntry);
}

uint64_t sub_24A227A28()
{
  return sub_24A227048(&qword_269779168, (void (*)(uint64_t))type metadata accessor for MapEntry);
}

uint64_t sub_24A227A70()
{
  return sub_24A227048(&qword_269779170, (void (*)(uint64_t))type metadata accessor for MapEntry);
}

uint64_t sub_24A227AB8()
{
  return sub_24A227048(&qword_269779178, (void (*)(uint64_t))type metadata accessor for MapEntry);
}

uint64_t sub_24A227B00()
{
  return sub_24A227048(&qword_269779180, (void (*)(uint64_t))type metadata accessor for MapHead);
}

uint64_t type metadata accessor for MapHead(uint64_t a1)
{
  return sub_24A1AE704(a1, (uint64_t *)&unk_269779328);
}

uint64_t sub_24A227B68()
{
  return sub_24A227048(&qword_269779188, (void (*)(uint64_t))type metadata accessor for MapHead);
}

uint64_t sub_24A227BB0()
{
  return sub_24A227048(&qword_269779190, (void (*)(uint64_t))type metadata accessor for MapHead);
}

uint64_t sub_24A227BF8()
{
  return sub_24A227048(&qword_269779198, (void (*)(uint64_t))type metadata accessor for MapHead);
}

uint64_t sub_24A227C40()
{
  return sub_24A227048(&qword_2697791A0, (void (*)(uint64_t))type metadata accessor for LogEntry);
}

uint64_t sub_24A227C88()
{
  return sub_24A227048(&qword_26B174920, (void (*)(uint64_t))type metadata accessor for LogEntry);
}

uint64_t sub_24A227CD0()
{
  return sub_24A227048(&qword_2697791A8, (void (*)(uint64_t))type metadata accessor for LogEntry);
}

uint64_t sub_24A227D18()
{
  return sub_24A227048(&qword_26B174928, (void (*)(uint64_t))type metadata accessor for LogEntry);
}

uint64_t sub_24A227D60()
{
  return sub_24A227048(&qword_2697791B0, (void (*)(uint64_t))type metadata accessor for LogHead);
}

uint64_t type metadata accessor for LogHead(uint64_t a1)
{
  return sub_24A1AE704(a1, (uint64_t *)&unk_269779318);
}

uint64_t sub_24A227DC8()
{
  return sub_24A227048(&qword_2697791B8, (void (*)(uint64_t))type metadata accessor for LogHead);
}

uint64_t sub_24A227E10()
{
  return sub_24A227048(&qword_2697791C0, (void (*)(uint64_t))type metadata accessor for LogHead);
}

uint64_t sub_24A227E58()
{
  return sub_24A227048(&qword_2697791C8, (void (*)(uint64_t))type metadata accessor for LogHead);
}

uint64_t sub_24A227EA0()
{
  return sub_24A227048(&qword_2697791D0, (void (*)(uint64_t))type metadata accessor for SignedObject);
}

uint64_t sub_24A227EE8()
{
  return sub_24A227048(&qword_26B174300, (void (*)(uint64_t))type metadata accessor for SignedObject);
}

uint64_t sub_24A227F30()
{
  return sub_24A227048(&qword_2697791D8, (void (*)(uint64_t))type metadata accessor for SignedObject);
}

uint64_t sub_24A227F78()
{
  return sub_24A227048(&qword_26B174308, (void (*)(uint64_t))type metadata accessor for SignedObject);
}

uint64_t sub_24A227FC0()
{
  return sub_24A227048(&qword_2697791E0, (void (*)(uint64_t))type metadata accessor for Signature);
}

uint64_t sub_24A228008()
{
  return sub_24A227048(&qword_26B174998, (void (*)(uint64_t))type metadata accessor for Signature);
}

uint64_t sub_24A228050()
{
  return sub_24A227048(&qword_2697791E8, (void (*)(uint64_t))type metadata accessor for Signature);
}

uint64_t sub_24A228098()
{
  return sub_24A227048(&qword_26B1749A0, (void (*)(uint64_t))type metadata accessor for Signature);
}

uint64_t sub_24A2280E0()
{
  return sub_24A227048(&qword_2697791F0, (void (*)(uint64_t))type metadata accessor for VRFPublicKey);
}

uint64_t type metadata accessor for VRFPublicKey(uint64_t a1)
{
  return sub_24A1AE704(a1, (uint64_t *)&unk_269779308);
}

uint64_t sub_24A228148()
{
  return sub_24A227048(&qword_2697791F8, (void (*)(uint64_t))type metadata accessor for VRFPublicKey);
}

uint64_t sub_24A228190()
{
  return sub_24A227048(&qword_269779200, (void (*)(uint64_t))type metadata accessor for VRFPublicKey);
}

uint64_t sub_24A2281D8()
{
  return sub_24A227048(&qword_269779208, (void (*)(uint64_t))type metadata accessor for VRFPublicKey);
}

uint64_t sub_24A228220()
{
  return sub_24A227048(&qword_269779210, (void (*)(uint64_t))type metadata accessor for VRFWitness);
}

uint64_t type metadata accessor for VRFWitness(uint64_t a1)
{
  return sub_24A1AE704(a1, (uint64_t *)&unk_2697792F8);
}

uint64_t sub_24A228288()
{
  return sub_24A227048(&qword_269779218, (void (*)(uint64_t))type metadata accessor for VRFWitness);
}

uint64_t sub_24A2282D0()
{
  return sub_24A227048(&qword_269779220, (void (*)(uint64_t))type metadata accessor for VRFWitness);
}

uint64_t sub_24A228318()
{
  return sub_24A227048(&qword_269779228, (void (*)(uint64_t))type metadata accessor for VRFWitness);
}

uint64_t sub_24A228360(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A2A6E10();
  uint64_t v51 = *(void *)(v4 - 8);
  uint64_t v52 = v4;
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  unint64_t v50 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v49 = (char *)&v45 - v7;
  uint64_t v8 = type metadata accessor for LogHead(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_269779288);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_269779280);
  uint64_t v16 = MEMORY[0x270FA5388](v15 - 8);
  uint64_t v18 = (char *)&v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x270FA5388](v16);
  uint64_t v21 = (char *)&v45 - v20;
  MEMORY[0x270FA5388](v19);
  uint64_t v23 = (char *)&v45 - v22;
  if (*(void *)a1 != *(void *)a2
    || (sub_24A1B7D80(*(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a2 + 8), *(void *)(a2 + 16)) & 1) == 0)
  {
    goto LABEL_40;
  }
  uint64_t v24 = *(void *)(a1 + 24);
  uint64_t v25 = *(void *)(a2 + 24);
  if (*(unsigned char *)(a2 + 32) == 1)
  {
    switch(v25)
    {
      case 1:
        if (v24 == 1) {
          goto LABEL_8;
        }
        goto LABEL_40;
      case 2:
        if (v24 == 2) {
          goto LABEL_8;
        }
        goto LABEL_40;
      case 3:
        if (v24 == 3) {
          goto LABEL_8;
        }
        goto LABEL_40;
      case 4:
        if (v24 == 4) {
          goto LABEL_8;
        }
        goto LABEL_40;
      case 5:
        if (v24 == 5) {
          goto LABEL_8;
        }
        goto LABEL_40;
      case 6:
        if (v24 == 6) {
          goto LABEL_8;
        }
        goto LABEL_40;
      default:
        if (!v24) {
          goto LABEL_8;
        }
        goto LABEL_40;
    }
  }
  if (v24 != v25) {
    goto LABEL_40;
  }
LABEL_8:
  uint64_t v26 = type metadata accessor for MapHead(0);
  uint64_t v47 = v9;
  uint64_t v27 = v26;
  sub_24A1B2CAC(a1 + *(int *)(v26 + 52), (uint64_t)v23, &qword_269779280);
  uint64_t v46 = v27;
  sub_24A1B2CAC(a2 + *(int *)(v27 + 52), (uint64_t)v21, &qword_269779280);
  uint64_t v28 = (uint64_t)&v14[*(int *)(v12 + 48)];
  sub_24A1B2CAC((uint64_t)v23, (uint64_t)v14, &qword_269779280);
  uint64_t v48 = v28;
  uint64_t v29 = v47;
  sub_24A1B2CAC((uint64_t)v21, v28, &qword_269779280);
  uint64_t v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v29 + 48);
  if (v30((uint64_t)v14, 1, v8) == 1)
  {
    sub_24A1B2D10((uint64_t)v21, &qword_269779280);
    sub_24A1B2D10((uint64_t)v23, &qword_269779280);
    if (v30(v48, 1, v8) == 1)
    {
      sub_24A1B2D10((uint64_t)v14, &qword_269779280);
LABEL_15:
      if (*(void *)(a1 + 40) == *(void *)(a2 + 40))
      {
        uint64_t v33 = *(void *)(a1 + 48);
        uint64_t v34 = *(void *)(a2 + 48);
        if (*(unsigned char *)(a1 + 56)) {
          uint64_t v33 = v33 != 0;
        }
        if (*(unsigned char *)(a2 + 56) == 1)
        {
          if (v34)
          {
            if (v33 == 1) {
              goto LABEL_37;
            }
          }
          else if (!v33)
          {
LABEL_37:
            if (*(void *)(a1 + 64) == *(void *)(a2 + 64)
              && *(void *)(a1 + 72) == *(void *)(a2 + 72)
              && *(unsigned __int8 *)(a1 + 80) == *(unsigned __int8 *)(a2 + 80))
            {
              uint64_t v36 = v46;
              uint64_t v37 = a1 + *(int *)(v46 + 48);
              uint64_t v39 = v51;
              uint64_t v38 = v52;
              long long v40 = *(void (**)(char *, uint64_t, uint64_t))(v51 + 16);
              uint64_t v41 = v49;
              v40(v49, v37, v52);
              uint64_t v42 = a2 + *(int *)(v36 + 48);
              uint64_t v43 = v50;
              v40(v50, v42, v38);
              sub_24A227048(&qword_2697787D0, MEMORY[0x263F50560]);
              char v31 = sub_24A2A77E0();
              uint64_t v44 = *(void (**)(char *, uint64_t))(v39 + 8);
              v44(v43, v38);
              v44(v41, v38);
              return v31 & 1;
            }
          }
        }
        else if (v33 == v34)
        {
          goto LABEL_37;
        }
      }
LABEL_40:
      char v31 = 0;
      return v31 & 1;
    }
  }
  else
  {
    sub_24A1B2CAC((uint64_t)v14, (uint64_t)v18, &qword_269779280);
    if (v30(v48, 1, v8) != 1)
    {
      sub_24A22B404(v48, (uint64_t)v11, type metadata accessor for LogHead);
      char v32 = sub_24A2289B4(v18, (uint64_t)v11);
      sub_24A2202DC((uint64_t)v11, type metadata accessor for LogHead);
      sub_24A1B2D10((uint64_t)v21, &qword_269779280);
      sub_24A1B2D10((uint64_t)v23, &qword_269779280);
      sub_24A2202DC((uint64_t)v18, type metadata accessor for LogHead);
      sub_24A1B2D10((uint64_t)v14, &qword_269779280);
      if ((v32 & 1) == 0) {
        goto LABEL_40;
      }
      goto LABEL_15;
    }
    sub_24A1B2D10((uint64_t)v21, &qword_269779280);
    sub_24A1B2D10((uint64_t)v23, &qword_269779280);
    sub_24A2202DC((uint64_t)v18, type metadata accessor for LogHead);
  }
  sub_24A1B2D10((uint64_t)v14, &qword_269779288);
  char v31 = 0;
  return v31 & 1;
}

uint64_t sub_24A2289B4(char *a1, uint64_t a2)
{
  uint64_t v4 = sub_24A2A6E10();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v20 - v9;
  if (*(void *)a1 != *(void *)a2
    || *((void *)a1 + 1) != *(void *)(a2 + 8)
    || (sub_24A1B7D80(*((void *)a1 + 2), *((void *)a1 + 3), *(void *)(a2 + 16), *(void *)(a2 + 24)) & 1) == 0
    || *((void *)a1 + 4) != *(void *)(a2 + 32))
  {
    goto LABEL_39;
  }
  uint64_t v11 = *((void *)a1 + 5);
  uint64_t v12 = *(void *)(a2 + 40);
  if (*(unsigned char *)(a2 + 48) == 1)
  {
    switch(v12)
    {
      case 1:
        if (v11 != 1) {
          goto LABEL_39;
        }
        goto LABEL_10;
      case 2:
        if (v11 != 2) {
          goto LABEL_39;
        }
        goto LABEL_10;
      case 3:
        if (v11 != 3) {
          goto LABEL_39;
        }
        goto LABEL_10;
      case 4:
        if (v11 != 4) {
          goto LABEL_39;
        }
        goto LABEL_10;
      case 5:
        if (v11 != 5) {
          goto LABEL_39;
        }
        goto LABEL_10;
      default:
        if (!v11) {
          goto LABEL_10;
        }
        goto LABEL_39;
    }
  }
  if (v11 != v12) {
    goto LABEL_39;
  }
LABEL_10:
  uint64_t v13 = *((void *)a1 + 7);
  uint64_t v14 = *(void *)(a2 + 56);
  if (*(unsigned char *)(a2 + 64) == 1)
  {
    switch(v14)
    {
      case 1:
        if (v13 != 1) {
          goto LABEL_39;
        }
        goto LABEL_15;
      case 2:
        if (v13 != 2) {
          goto LABEL_39;
        }
        goto LABEL_15;
      case 3:
        if (v13 != 3) {
          goto LABEL_39;
        }
        goto LABEL_15;
      case 4:
        if (v13 != 4) {
          goto LABEL_39;
        }
        goto LABEL_15;
      case 5:
        if (v13 != 5) {
          goto LABEL_39;
        }
        goto LABEL_15;
      case 6:
        if (v13 != 6) {
          goto LABEL_39;
        }
        goto LABEL_15;
      default:
        if (!v13) {
          goto LABEL_15;
        }
        goto LABEL_39;
    }
  }
  if (v13 != v14)
  {
LABEL_39:
    char v17 = 0;
    return v17 & 1;
  }
LABEL_15:
  if (*((void *)a1 + 9) != *(void *)(a2 + 72) || *((void *)a1 + 10) != *(void *)(a2 + 80)) {
    goto LABEL_39;
  }
  uint64_t v15 = type metadata accessor for LogHead(0);
  uint64_t v16 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
  v16(v10, &a1[*(int *)(v15 + 48)], v4);
  v16(v8, (char *)(a2 + *(int *)(v15 + 48)), v4);
  sub_24A227048(&qword_2697787D0, MEMORY[0x263F50560]);
  char v17 = sub_24A2A77E0();
  uint64_t v18 = *(void (**)(char *, uint64_t))(v5 + 8);
  v18(v8, v4);
  v18(v10, v4);
  return v17 & 1;
}

uint64_t sub_24A228CF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A2A6E10();
  uint64_t v50 = *(void *)(v4 - 8);
  uint64_t v51 = v4;
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v49 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v48 = (char *)&v47 - v7;
  uint64_t v8 = type metadata accessor for VRFPublicKey(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v54 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_2697792E0);
  uint64_t v12 = v11 - 8;
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_2697792D8);
  uint64_t v16 = MEMORY[0x270FA5388](v15 - 8);
  uint64_t v18 = (char *)&v47 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x270FA5388](v16);
  uint64_t v21 = (char *)&v47 - v20;
  MEMORY[0x270FA5388](v19);
  uint64_t v23 = (char *)&v47 - v22;
  uint64_t v24 = type metadata accessor for PerApplicationTreeConfigNode(0);
  uint64_t v25 = *(int *)(v24 + 28);
  uint64_t v52 = a1;
  uint64_t v26 = a1 + v25;
  uint64_t v27 = v24;
  sub_24A1B2CAC(v26, (uint64_t)v23, &qword_2697792D8);
  uint64_t v47 = v27;
  uint64_t v28 = *(int *)(v27 + 28);
  uint64_t v53 = a2;
  sub_24A1B2CAC(a2 + v28, (uint64_t)v21, &qword_2697792D8);
  uint64_t v29 = (uint64_t)&v14[*(int *)(v12 + 56)];
  sub_24A1B2CAC((uint64_t)v23, (uint64_t)v14, &qword_2697792D8);
  sub_24A1B2CAC((uint64_t)v21, v29, &qword_2697792D8);
  uint64_t v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v30((uint64_t)v14, 1, v8) != 1)
  {
    uint64_t v31 = (uint64_t)v54;
    sub_24A1B2CAC((uint64_t)v14, (uint64_t)v18, &qword_2697792D8);
    if (v30(v29, 1, v8) != 1)
    {
      sub_24A22B404(v29, v31, type metadata accessor for VRFPublicKey);
      char v32 = sub_24A22A504((uint64_t)v18, v31);
      sub_24A2202DC(v31, type metadata accessor for VRFPublicKey);
      sub_24A1B2D10((uint64_t)v21, &qword_2697792D8);
      sub_24A1B2D10((uint64_t)v23, &qword_2697792D8);
      sub_24A2202DC((uint64_t)v18, type metadata accessor for VRFPublicKey);
      sub_24A1B2D10((uint64_t)v14, &qword_2697792D8);
      if ((v32 & 1) == 0) {
        goto LABEL_14;
      }
      goto LABEL_8;
    }
    sub_24A1B2D10((uint64_t)v21, &qword_2697792D8);
    sub_24A1B2D10((uint64_t)v23, &qword_2697792D8);
    sub_24A2202DC((uint64_t)v18, type metadata accessor for VRFPublicKey);
LABEL_6:
    sub_24A1B2D10((uint64_t)v14, &qword_2697792E0);
    goto LABEL_14;
  }
  sub_24A1B2D10((uint64_t)v21, &qword_2697792D8);
  sub_24A1B2D10((uint64_t)v23, &qword_2697792D8);
  if (v30(v29, 1, v8) != 1) {
    goto LABEL_6;
  }
  sub_24A1B2D10((uint64_t)v14, &qword_2697792D8);
LABEL_8:
  uint64_t v33 = v52;
  uint64_t v34 = v53;
  if (sub_24A1B7D80(*(void *)v52, *(void *)(v52 + 8), *(void *)v53, *(void *)(v53 + 8)))
  {
    uint64_t v35 = *(void *)(v33 + 16);
    if (*(unsigned char *)(v33 + 24) == 1) {
      uint64_t v35 = qword_24A2ADB28[v35];
    }
    uint64_t v36 = *(void *)(v34 + 16);
    if (*(unsigned char *)(v34 + 24))
    {
      switch(v36)
      {
        case 1:
          if (v35 == 1) {
            goto LABEL_17;
          }
          goto LABEL_14;
        case 2:
          if (v35 == 2) {
            goto LABEL_17;
          }
          goto LABEL_14;
        case 3:
          if (v35 == 3) {
            goto LABEL_17;
          }
          goto LABEL_14;
        case 4:
          if (v35 == 999999999) {
            goto LABEL_17;
          }
          goto LABEL_14;
        default:
          if (v35) {
            goto LABEL_14;
          }
          goto LABEL_17;
      }
    }
    if (v35 == v36)
    {
LABEL_17:
      uint64_t v40 = v47;
      uint64_t v39 = v48;
      uint64_t v42 = v50;
      uint64_t v41 = v51;
      uint64_t v43 = *(void (**)(char *, uint64_t, uint64_t))(v50 + 16);
      v43(v48, v33 + *(int *)(v47 + 24), v51);
      uint64_t v44 = v34 + *(int *)(v40 + 24);
      uint64_t v45 = v49;
      v43(v49, v44, v41);
      sub_24A227048(&qword_2697787D0, MEMORY[0x263F50560]);
      char v37 = sub_24A2A77E0();
      uint64_t v46 = *(void (**)(char *, uint64_t))(v42 + 8);
      v46(v45, v41);
      v46(v39, v41);
      return v37 & 1;
    }
  }
LABEL_14:
  char v37 = 0;
  return v37 & 1;
}

uint64_t sub_24A22929C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A2A6E10();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v18 - v9;
  if ((sub_24A1B7D80(*(void *)a1, *(void *)(a1 + 8), *(void *)a2, *(void *)(a2 + 8)) & 1) == 0) {
    goto LABEL_7;
  }
  uint64_t v11 = *(void *)(a1 + 16);
  if (*(unsigned char *)(a1 + 24) == 1) {
    uint64_t v11 = qword_24A2ADB28[v11];
  }
  uint64_t v12 = *(void *)(a2 + 16);
  if (*(unsigned char *)(a2 + 24))
  {
    switch(v12)
    {
      case 1:
        if (v11 == 1) {
          goto LABEL_9;
        }
        goto LABEL_7;
      case 2:
        if (v11 == 2) {
          goto LABEL_9;
        }
        goto LABEL_7;
      case 3:
        if (v11 == 3) {
          goto LABEL_9;
        }
        goto LABEL_7;
      case 4:
        if (v11 == 999999999) {
          goto LABEL_9;
        }
        goto LABEL_7;
      default:
        if (v11) {
          goto LABEL_7;
        }
        goto LABEL_9;
    }
  }
  if (v11 == v12)
  {
LABEL_9:
    uint64_t v14 = type metadata accessor for TopLevelTreeConfigNode(0);
    uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v15(v10, a1 + *(int *)(v14 + 24), v4);
    v15(v8, a2 + *(int *)(v14 + 24), v4);
    sub_24A227048(&qword_2697787D0, MEMORY[0x263F50560]);
    char v13 = sub_24A2A77E0();
    uint64_t v16 = *(void (**)(char *, uint64_t))(v5 + 8);
    v16(v8, v4);
    v16(v10, v4);
  }
  else
  {
LABEL_7:
    char v13 = 0;
  }
  return v13 & 1;
}

uint64_t sub_24A2294F4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v6 = sub_24A2A6E10();
  uint64_t v46 = *(void *)(v6 - 8);
  uint64_t v47 = v6;
  uint64_t v7 = MEMORY[0x270FA5388](v6);
  uint64_t v45 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v44 = (char *)&v41 - v9;
  uint64_t v10 = type metadata accessor for SignedObject(0);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v41 = (uint64_t)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_2697787F0);
  uint64_t v14 = v13 - 8;
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174320);
  uint64_t v18 = MEMORY[0x270FA5388](v17 - 8);
  uint64_t v48 = (uint64_t *)((char *)&v41 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v20 = MEMORY[0x270FA5388](v18);
  uint64_t v22 = (char *)&v41 - v21;
  MEMORY[0x270FA5388](v20);
  uint64_t v24 = (char *)&v41 - v23;
  uint64_t v25 = a3(0);
  uint64_t v26 = *(int *)(v25 + 20);
  uint64_t v42 = a1;
  sub_24A1B2CAC(a1 + v26, (uint64_t)v24, &qword_26B174320);
  uint64_t v27 = *(int *)(v25 + 20);
  uint64_t v43 = a2;
  sub_24A1B2CAC(a2 + v27, (uint64_t)v22, &qword_26B174320);
  uint64_t v28 = (uint64_t)&v16[*(int *)(v14 + 56)];
  sub_24A1B2CAC((uint64_t)v24, (uint64_t)v16, &qword_26B174320);
  sub_24A1B2CAC((uint64_t)v22, v28, &qword_26B174320);
  uint64_t v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  if (v29((uint64_t)v16, 1, v10) != 1)
  {
    uint64_t v30 = v48;
    sub_24A1B2CAC((uint64_t)v16, (uint64_t)v48, &qword_26B174320);
    if (v29(v28, 1, v10) != 1)
    {
      uint64_t v31 = v41;
      sub_24A22B404(v28, v41, type metadata accessor for SignedObject);
      char v32 = sub_24A22A910(v30, v31);
      sub_24A2202DC(v31, type metadata accessor for SignedObject);
      sub_24A1B2D10((uint64_t)v22, &qword_26B174320);
      sub_24A1B2D10((uint64_t)v24, &qword_26B174320);
      sub_24A2202DC((uint64_t)v30, type metadata accessor for SignedObject);
      sub_24A1B2D10((uint64_t)v16, &qword_26B174320);
      if (v32) {
        goto LABEL_8;
      }
LABEL_9:
      char v38 = 0;
      return v38 & 1;
    }
    sub_24A1B2D10((uint64_t)v22, &qword_26B174320);
    sub_24A1B2D10((uint64_t)v24, &qword_26B174320);
    sub_24A2202DC((uint64_t)v30, type metadata accessor for SignedObject);
LABEL_6:
    sub_24A1B2D10((uint64_t)v16, &qword_2697787F0);
    goto LABEL_9;
  }
  sub_24A1B2D10((uint64_t)v22, &qword_26B174320);
  sub_24A1B2D10((uint64_t)v24, &qword_26B174320);
  if (v29(v28, 1, v10) != 1) {
    goto LABEL_6;
  }
  sub_24A1B2D10((uint64_t)v16, &qword_26B174320);
LABEL_8:
  uint64_t v34 = v46;
  uint64_t v33 = v47;
  uint64_t v35 = *(void (**)(char *, uint64_t, uint64_t))(v46 + 16);
  uint64_t v36 = v44;
  v35(v44, v42, v47);
  char v37 = v45;
  v35(v45, v43, v33);
  sub_24A227048(&qword_2697787D0, MEMORY[0x263F50560]);
  char v38 = sub_24A2A77E0();
  uint64_t v39 = *(void (**)(char *, uint64_t))(v34 + 8);
  v39(v37, v33);
  v39(v36, v33);
  return v38 & 1;
}

uint64_t sub_24A2299E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A2A6E10();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v16 - v9;
  if (sub_24A1B7D80(*(void *)a1, *(void *)(a1 + 8), *(void *)a2, *(void *)(a2 + 8)))
  {
    uint64_t v11 = type metadata accessor for ChangeLogNodeV2(0);
    uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v12(v10, a1 + *(int *)(v11 + 20), v4);
    v12(v8, a2 + *(int *)(v11 + 20), v4);
    sub_24A227048(&qword_2697787D0, MEMORY[0x263F50560]);
    char v13 = sub_24A2A77E0();
    uint64_t v14 = *(void (**)(char *, uint64_t))(v5 + 8);
    v14(v8, v4);
    v14(v10, v4);
  }
  else
  {
    char v13 = 0;
  }
  return v13 & 1;
}

uint64_t sub_24A229B9C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = sub_24A2A6E10();
  uint64_t v48 = *(void *)(v4 - 8);
  uint64_t v49 = v4;
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v47 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v46 = (char *)&v45 - v7;
  uint64_t v8 = type metadata accessor for SignedObject(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v52 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_2697787F0);
  uint64_t v12 = v11 - 8;
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174320);
  uint64_t v16 = MEMORY[0x270FA5388](v15 - 8);
  uint64_t v18 = (uint64_t *)((char *)&v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v19 = MEMORY[0x270FA5388](v16);
  uint64_t v21 = (char *)&v45 - v20;
  MEMORY[0x270FA5388](v19);
  uint64_t v23 = (char *)&v45 - v22;
  uint64_t v24 = type metadata accessor for MapEntry(0);
  uint64_t v25 = *(int *)(v24 + 28);
  uint64_t v50 = a1;
  uint64_t v26 = (uint64_t)a1 + v25;
  uint64_t v27 = v24;
  sub_24A1B2CAC(v26, (uint64_t)v23, &qword_26B174320);
  uint64_t v45 = v27;
  uint64_t v28 = *(int *)(v27 + 28);
  uint64_t v51 = a2;
  sub_24A1B2CAC((uint64_t)a2 + v28, (uint64_t)v21, &qword_26B174320);
  uint64_t v29 = (uint64_t)&v14[*(int *)(v12 + 56)];
  sub_24A1B2CAC((uint64_t)v23, (uint64_t)v14, &qword_26B174320);
  sub_24A1B2CAC((uint64_t)v21, v29, &qword_26B174320);
  uint64_t v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v30((uint64_t)v14, 1, v8) != 1)
  {
    uint64_t v31 = (uint64_t)v52;
    sub_24A1B2CAC((uint64_t)v14, (uint64_t)v18, &qword_26B174320);
    if (v30(v29, 1, v8) != 1)
    {
      sub_24A22B404(v29, v31, type metadata accessor for SignedObject);
      char v32 = sub_24A22A910(v18, v31);
      sub_24A2202DC(v31, type metadata accessor for SignedObject);
      sub_24A1B2D10((uint64_t)v21, &qword_26B174320);
      sub_24A1B2D10((uint64_t)v23, &qword_26B174320);
      sub_24A2202DC((uint64_t)v18, type metadata accessor for SignedObject);
      sub_24A1B2D10((uint64_t)v14, &qword_26B174320);
      if (v32) {
        goto LABEL_8;
      }
LABEL_11:
      char v42 = 0;
      return v42 & 1;
    }
    sub_24A1B2D10((uint64_t)v21, &qword_26B174320);
    sub_24A1B2D10((uint64_t)v23, &qword_26B174320);
    sub_24A2202DC((uint64_t)v18, type metadata accessor for SignedObject);
LABEL_6:
    sub_24A1B2D10((uint64_t)v14, &qword_2697787F0);
    goto LABEL_11;
  }
  sub_24A1B2D10((uint64_t)v21, &qword_26B174320);
  sub_24A1B2D10((uint64_t)v23, &qword_26B174320);
  if (v30(v29, 1, v8) != 1) {
    goto LABEL_6;
  }
  sub_24A1B2D10((uint64_t)v14, &qword_26B174320);
LABEL_8:
  uint64_t v33 = v50;
  uint64_t v34 = v51;
  if ((sub_24A1AF644(*v50, *v51) & 1) == 0 || (sub_24A1B7D80(v33[1], v33[2], v34[1], v34[2]) & 1) == 0) {
    goto LABEL_11;
  }
  uint64_t v36 = v45;
  uint64_t v35 = v46;
  uint64_t v38 = v48;
  uint64_t v37 = v49;
  uint64_t v39 = *(void (**)(char *, char *, uint64_t))(v48 + 16);
  v39(v46, (char *)v33 + *(int *)(v45 + 24), v49);
  uint64_t v40 = (char *)v34 + *(int *)(v36 + 24);
  uint64_t v41 = v47;
  v39(v47, v40, v37);
  sub_24A227048(&qword_2697787D0, MEMORY[0x263F50560]);
  char v42 = sub_24A2A77E0();
  uint64_t v43 = *(void (**)(char *, uint64_t))(v38 + 8);
  v43(v41, v37);
  v43(v35, v37);
  return v42 & 1;
}

uint64_t sub_24A22A0B0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v8 = sub_24A2A6E10();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)&v23 - v13;
  uint64_t v15 = *(int *)(a3(0) + 20);
  uint64_t v16 = *(void *)(a1 + v15);
  uint64_t v17 = *(void *)(a2 + v15);
  if (v16 == v17
    || (swift_retain(), swift_retain(), char v18 = a4(v16, v17), swift_release(), swift_release(), (v18 & 1) != 0))
  {
    uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
    v19(v14, a1, v8);
    v19(v12, a2, v8);
    sub_24A227048(&qword_2697787D0, MEMORY[0x263F50560]);
    char v20 = sub_24A2A77E0();
    uint64_t v21 = *(void (**)(char *, uint64_t))(v9 + 8);
    v21(v12, v8);
    v21(v14, v8);
  }
  else
  {
    char v20 = 0;
  }
  return v20 & 1;
}

uint64_t sub_24A22A2AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A2A6E10();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v18 - v9;
  if (*(void *)a1 != *(void *)a2) {
    goto LABEL_7;
  }
  uint64_t v11 = *(void *)(a1 + 8);
  if (*(unsigned char *)(a1 + 16) == 1) {
    uint64_t v11 = qword_24A2ADB28[v11];
  }
  uint64_t v12 = *(void *)(a2 + 8);
  if (*(unsigned char *)(a2 + 16))
  {
    switch(v12)
    {
      case 1:
        if (v11 == 1) {
          goto LABEL_9;
        }
        goto LABEL_7;
      case 2:
        if (v11 == 2) {
          goto LABEL_9;
        }
        goto LABEL_7;
      case 3:
        if (v11 == 3) {
          goto LABEL_9;
        }
        goto LABEL_7;
      case 4:
        if (v11 == 999999999) {
          goto LABEL_9;
        }
        goto LABEL_7;
      default:
        if (v11) {
          goto LABEL_7;
        }
        goto LABEL_9;
    }
  }
  if (v11 == v12)
  {
LABEL_9:
    uint64_t v14 = type metadata accessor for LogClosedNode(0);
    uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v15(v10, a1 + *(int *)(v14 + 24), v4);
    v15(v8, a2 + *(int *)(v14 + 24), v4);
    sub_24A227048(&qword_2697787D0, MEMORY[0x263F50560]);
    char v13 = sub_24A2A77E0();
    uint64_t v16 = *(void (**)(char *, uint64_t))(v5 + 8);
    v16(v8, v4);
    v16(v10, v4);
  }
  else
  {
LABEL_7:
    char v13 = 0;
  }
  return v13 & 1;
}

uint64_t sub_24A22A504(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A2A6E10();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v19 - v9;
  if ((sub_24A1B7D80(*(void *)a1, *(void *)(a1 + 8), *(void *)a2, *(void *)(a2 + 8)) & 1) == 0) {
    goto LABEL_9;
  }
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v12 = *(void *)(a2 + 16);
  uint64_t v13 = 3;
  if (!v11) {
    uint64_t v13 = 0;
  }
  if (*(unsigned char *)(a1 + 24)) {
    uint64_t v11 = v13;
  }
  if (*(unsigned char *)(a2 + 24) != 1)
  {
    if (v11 != v12) {
      goto LABEL_9;
    }
LABEL_11:
    uint64_t v15 = type metadata accessor for VRFPublicKey(0);
    uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v16(v10, a1 + *(int *)(v15 + 24), v4);
    v16(v8, a2 + *(int *)(v15 + 24), v4);
    sub_24A227048(&qword_2697787D0, MEMORY[0x263F50560]);
    char v14 = sub_24A2A77E0();
    uint64_t v17 = *(void (**)(char *, uint64_t))(v5 + 8);
    v17(v8, v4);
    v17(v10, v4);
    return v14 & 1;
  }
  if (!v12)
  {
    if (v11) {
      goto LABEL_9;
    }
    goto LABEL_11;
  }
  if (v11 == 3) {
    goto LABEL_11;
  }
LABEL_9:
  char v14 = 0;
  return v14 & 1;
}

uint64_t sub_24A22A704(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A2A6E10();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v18 - v9;
  if ((sub_24A1B7D80(*(void *)a1, *(void *)(a1 + 8), *(void *)a2, *(void *)(a2 + 8)) & 1) == 0
    || (sub_24A1B7D80(*(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a2 + 16), *(void *)(a2 + 24)) & 1) == 0)
  {
    goto LABEL_8;
  }
  uint64_t v11 = *(void *)(a1 + 32);
  uint64_t v12 = *(void *)(a2 + 32);
  if (*(unsigned char *)(a1 + 40)) {
    uint64_t v11 = v11 != 0;
  }
  if (*(unsigned char *)(a2 + 40) != 1)
  {
    if (v11 != v12) {
      goto LABEL_8;
    }
LABEL_11:
    uint64_t v15 = type metadata accessor for Signature(0);
    uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v16(v10, a1 + *(int *)(v15 + 28), v4);
    v16(v8, a2 + *(int *)(v15 + 28), v4);
    sub_24A227048(&qword_2697787D0, MEMORY[0x263F50560]);
    char v13 = sub_24A2A77E0();
    uint64_t v17 = *(void (**)(char *, uint64_t))(v5 + 8);
    v17(v8, v4);
    v17(v10, v4);
    return v13 & 1;
  }
  if (!v12)
  {
    if (v11) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
  if (v11 == 1) {
    goto LABEL_11;
  }
LABEL_8:
  char v13 = 0;
  return v13 & 1;
}

uint64_t sub_24A22A910(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = sub_24A2A6E10();
  uint64_t v50 = *(void *)(v4 - 8);
  uint64_t v51 = v4;
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v49 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v44 - v7;
  uint64_t v9 = type metadata accessor for Signature(0);
  uint64_t v52 = *(void *)(v9 - 8);
  uint64_t v53 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_269779230);
  MEMORY[0x270FA5388](v12);
  char v14 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
  uint64_t v16 = MEMORY[0x270FA5388](v15 - 8);
  uint64_t v18 = (char *)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x270FA5388](v16);
  uint64_t v21 = (char *)&v44 - v20;
  MEMORY[0x270FA5388](v19);
  uint64_t v23 = (char *)&v44 - v22;
  uint64_t v24 = *a1;
  unint64_t v25 = a1[1];
  uint64_t v26 = a1;
  uint64_t v27 = a2;
  if ((sub_24A1B7D80(v24, v25, *(void *)a2, *(void *)(a2 + 8)) & 1) == 0) {
    goto LABEL_8;
  }
  uint64_t v47 = v8;
  uint64_t v48 = v18;
  uint64_t v45 = v11;
  uint64_t v28 = type metadata accessor for SignedObject(0);
  sub_24A1B2CAC((uint64_t)v26 + *(int *)(v28 + 24), (uint64_t)v23, &qword_26B1749B8);
  sub_24A1B2CAC(a2 + *(int *)(v28 + 24), (uint64_t)v21, &qword_26B1749B8);
  uint64_t v29 = (uint64_t)&v14[*(int *)(v12 + 48)];
  sub_24A1B2CAC((uint64_t)v23, (uint64_t)v14, &qword_26B1749B8);
  sub_24A1B2CAC((uint64_t)v21, v29, &qword_26B1749B8);
  uint64_t v30 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v52 + 48);
  int v31 = v30(v14, 1, v53);
  uint64_t v46 = v27;
  uint64_t v32 = v28;
  if (v31 == 1)
  {
    sub_24A1B2D10((uint64_t)v21, &qword_26B1749B8);
    sub_24A1B2D10((uint64_t)v23, &qword_26B1749B8);
    if (v30((char *)v29, 1, v53) == 1)
    {
      sub_24A1B2D10((uint64_t)v14, &qword_26B1749B8);
LABEL_11:
      uint64_t v39 = v50;
      uint64_t v38 = v51;
      uint64_t v40 = *(void (**)(char *, char *, uint64_t))(v50 + 16);
      uint64_t v41 = v47;
      v40(v47, (char *)v26 + *(int *)(v32 + 20), v51);
      char v42 = v49;
      v40(v49, (char *)(v46 + *(int *)(v32 + 20)), v38);
      sub_24A227048(&qword_2697787D0, MEMORY[0x263F50560]);
      char v34 = sub_24A2A77E0();
      uint64_t v43 = *(void (**)(char *, uint64_t))(v39 + 8);
      v43(v42, v38);
      v43(v41, v38);
      return v34 & 1;
    }
    goto LABEL_7;
  }
  uint64_t v33 = (uint64_t)v48;
  sub_24A1B2CAC((uint64_t)v14, (uint64_t)v48, &qword_26B1749B8);
  if (v30((char *)v29, 1, v53) == 1)
  {
    sub_24A1B2D10((uint64_t)v21, &qword_26B1749B8);
    sub_24A1B2D10((uint64_t)v23, &qword_26B1749B8);
    sub_24A2202DC(v33, type metadata accessor for Signature);
LABEL_7:
    sub_24A1B2D10((uint64_t)v14, &qword_269779230);
    goto LABEL_8;
  }
  uint64_t v36 = (uint64_t)v45;
  sub_24A22B404(v29, (uint64_t)v45, type metadata accessor for Signature);
  char v37 = sub_24A22A704(v33, v36);
  sub_24A2202DC(v36, type metadata accessor for Signature);
  sub_24A1B2D10((uint64_t)v21, &qword_26B1749B8);
  sub_24A1B2D10((uint64_t)v23, &qword_26B1749B8);
  sub_24A2202DC(v33, type metadata accessor for Signature);
  sub_24A1B2D10((uint64_t)v14, &qword_26B1749B8);
  if (v37) {
    goto LABEL_11;
  }
LABEL_8:
  char v34 = 0;
  return v34 & 1;
}

uint64_t sub_24A22AE28(char *a1, uint64_t *a2)
{
  uint64_t v4 = sub_24A2A6E10();
  uint64_t v45 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v44 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v43 = (char *)&v41 - v7;
  uint64_t v8 = type metadata accessor for SignedObject(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v46 = (uint64_t)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_2697787F0);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174320);
  uint64_t v15 = MEMORY[0x270FA5388](v14 - 8);
  uint64_t v17 = (uint64_t *)((char *)&v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v18 = MEMORY[0x270FA5388](v15);
  uint64_t v20 = (char *)&v41 - v19;
  MEMORY[0x270FA5388](v18);
  uint64_t v22 = (char *)&v41 - v21;
  uint64_t v47 = a1;
  uint64_t v48 = a2;
  uint64_t v23 = *(void *)a1;
  uint64_t v24 = *a2;
  if (*((unsigned char *)a2 + 8) == 1)
  {
    switch(v24)
    {
      case 1:
        if (v23 != 1) {
          goto LABEL_27;
        }
        goto LABEL_6;
      case 2:
        if (v23 != 2) {
          goto LABEL_27;
        }
        goto LABEL_6;
      case 3:
        if (v23 != 3) {
          goto LABEL_27;
        }
        goto LABEL_6;
      case 4:
        if (v23 != 4) {
          goto LABEL_27;
        }
        goto LABEL_6;
      case 5:
        if (v23 != 5) {
          goto LABEL_27;
        }
        goto LABEL_6;
      default:
        if (!v23) {
          goto LABEL_6;
        }
        goto LABEL_27;
    }
  }
  if (v23 != v24) {
    goto LABEL_27;
  }
LABEL_6:
  uint64_t v42 = v4;
  uint64_t v25 = type metadata accessor for LogEntry(0);
  sub_24A1B2CAC((uint64_t)&v47[*(int *)(v25 + 40)], (uint64_t)v22, &qword_26B174320);
  sub_24A1B2CAC((uint64_t)v48 + *(int *)(v25 + 40), (uint64_t)v20, &qword_26B174320);
  uint64_t v26 = (uint64_t)&v13[*(int *)(v11 + 48)];
  sub_24A1B2CAC((uint64_t)v22, (uint64_t)v13, &qword_26B174320);
  sub_24A1B2CAC((uint64_t)v20, v26, &qword_26B174320);
  uint64_t v27 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v27((uint64_t)v13, 1, v8) != 1)
  {
    sub_24A1B2CAC((uint64_t)v13, (uint64_t)v17, &qword_26B174320);
    if (v27(v26, 1, v8) != 1)
    {
      uint64_t v28 = v46;
      sub_24A22B404(v26, v46, type metadata accessor for SignedObject);
      char v29 = sub_24A22A910(v17, v28);
      sub_24A2202DC(v28, type metadata accessor for SignedObject);
      sub_24A1B2D10((uint64_t)v20, &qword_26B174320);
      sub_24A1B2D10((uint64_t)v22, &qword_26B174320);
      sub_24A2202DC((uint64_t)v17, type metadata accessor for SignedObject);
      sub_24A1B2D10((uint64_t)v13, &qword_26B174320);
      if (v29) {
        goto LABEL_13;
      }
LABEL_27:
      char v38 = 0;
      return v38 & 1;
    }
    sub_24A1B2D10((uint64_t)v20, &qword_26B174320);
    sub_24A1B2D10((uint64_t)v22, &qword_26B174320);
    sub_24A2202DC((uint64_t)v17, type metadata accessor for SignedObject);
LABEL_11:
    sub_24A1B2D10((uint64_t)v13, &qword_2697787F0);
    goto LABEL_27;
  }
  sub_24A1B2D10((uint64_t)v20, &qword_26B174320);
  sub_24A1B2D10((uint64_t)v22, &qword_26B174320);
  if (v27(v26, 1, v8) != 1) {
    goto LABEL_11;
  }
  sub_24A1B2D10((uint64_t)v13, &qword_26B174320);
LABEL_13:
  uint64_t v30 = v47;
  int v31 = v48;
  if ((sub_24A1AF644(*((void *)v47 + 2), v48[2]) & 1) == 0
    || (sub_24A1B7D80(*((void *)v30 + 3), *((void *)v30 + 4), v31[3], v31[4]) & 1) == 0
    || *((void *)v30 + 5) != v31[5]
    || (sub_24A2491C0(*((void *)v30 + 6), v30[56], v31[6], *((unsigned __int8 *)v31 + 56)) & 1) == 0)
  {
    goto LABEL_27;
  }
  uint64_t v32 = v45;
  uint64_t v33 = *(void (**)(char *, char *, uint64_t))(v45 + 16);
  uint64_t v34 = v42;
  uint64_t v35 = v43;
  v33(v43, &v30[*(int *)(v25 + 36)], v42);
  uint64_t v36 = (char *)v31 + *(int *)(v25 + 36);
  char v37 = v44;
  v33(v44, v36, v34);
  sub_24A227048(&qword_2697787D0, MEMORY[0x263F50560]);
  char v38 = sub_24A2A77E0();
  uint64_t v39 = *(void (**)(char *, uint64_t))(v32 + 8);
  v39(v37, v34);
  v39(v35, v34);
  return v38 & 1;
}

uint64_t sub_24A22B404(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t sub_24A22B46C()
{
  unint64_t result = qword_269779240;
  if (!qword_269779240)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269779240);
  }
  return result;
}

uint64_t sub_24A22B4C0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = sub_24A2A6E10();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v19 - v9;
  uint64_t v11 = *(void *)a1;
  uint64_t v12 = *a2;
  uint64_t v13 = 3;
  if (!*(void *)a1) {
    uint64_t v13 = 0;
  }
  if (*(unsigned char *)(a1 + 8)) {
    uint64_t v11 = v13;
  }
  if (*((unsigned char *)a2 + 8) != 1)
  {
    if (v11 == v12) {
      goto LABEL_12;
    }
    goto LABEL_15;
  }
  if (!v12)
  {
    if (!v11) {
      goto LABEL_12;
    }
LABEL_15:
    char v16 = 0;
    return v16 & 1;
  }
  if (v11 != 3) {
    goto LABEL_15;
  }
LABEL_12:
  if ((sub_24A1B7D80(*(void *)(a1 + 16), *(void *)(a1 + 24), a2[2], a2[3]) & 1) == 0
    || (sub_24A1B7D80(*(void *)(a1 + 32), *(void *)(a1 + 40), a2[4], a2[5]) & 1) == 0)
  {
    goto LABEL_15;
  }
  uint64_t v14 = type metadata accessor for VRFWitness(0);
  uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v15(v10, a1 + *(int *)(v14 + 28), v4);
  v15(v8, (uint64_t)a2 + *(int *)(v14 + 28), v4);
  sub_24A227048(&qword_2697787D0, MEMORY[0x263F50560]);
  char v16 = sub_24A2A77E0();
  uint64_t v17 = *(void (**)(char *, uint64_t))(v5 + 8);
  v17(v8, v4);
  v17(v10, v4);
  return v16 & 1;
}

unint64_t sub_24A22B6D4()
{
  unint64_t result = qword_26B174978;
  if (!qword_26B174978)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B174978);
  }
  return result;
}

unint64_t sub_24A22B728()
{
  unint64_t result = qword_26B1748D0;
  if (!qword_26B1748D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B1748D0);
  }
  return result;
}

unint64_t sub_24A22B77C()
{
  unint64_t result = qword_26B174958;
  if (!qword_26B174958)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B174958);
  }
  return result;
}

unint64_t sub_24A22B7D0()
{
  unint64_t result = qword_269779278;
  if (!qword_269779278)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269779278);
  }
  return result;
}

ValueMetadata *type metadata accessor for VRFType()
{
  return &type metadata for VRFType;
}

ValueMetadata *type metadata accessor for MapType()
{
  return &type metadata for MapType;
}

void *sub_24A22B844(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(void *)a1 = *a2;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    uint64_t v7 = a2[2];
    unint64_t v8 = a2[3];
    sub_24A1A52B0(v7, v8);
    long long v4[2] = v7;
    void v4[3] = v8;
    uint64_t v9 = a2[4];
    unint64_t v10 = a2[5];
    sub_24A1A52B0(v9, v10);
    long long v4[4] = v9;
    v4[5] = v10;
    uint64_t v11 = *(int *)(a3 + 28);
    uint64_t v12 = (char *)v4 + v11;
    uint64_t v13 = (uint64_t)a2 + v11;
    uint64_t v14 = sub_24A2A6E10();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
  }
  return v4;
}

uint64_t sub_24A22B950(uint64_t a1, uint64_t a2)
{
  sub_24A1A5384(*(void *)(a1 + 16), *(void *)(a1 + 24));
  sub_24A1A5384(*(void *)(a1 + 32), *(void *)(a1 + 40));
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = sub_24A2A6E10();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t sub_24A22B9D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  unint64_t v7 = *(void *)(a2 + 24);
  sub_24A1A52B0(v6, v7);
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  sub_24A1A52B0(v8, v9);
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v9;
  uint64_t v10 = *(int *)(a3 + 28);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = sub_24A2A6E10();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
  return a1;
}

uint64_t sub_24A22BA90(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v6;
  uint64_t v7 = a2[2];
  unint64_t v8 = a2[3];
  sub_24A1A52B0(v7, v8);
  uint64_t v9 = *(void *)(a1 + 16);
  unint64_t v10 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = v7;
  *(void *)(a1 + 24) = v8;
  sub_24A1A5384(v9, v10);
  uint64_t v11 = a2[4];
  unint64_t v12 = a2[5];
  sub_24A1A52B0(v11, v12);
  uint64_t v13 = *(void *)(a1 + 32);
  unint64_t v14 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = v11;
  *(void *)(a1 + 40) = v12;
  sub_24A1A5384(v13, v14);
  uint64_t v15 = *(int *)(a3 + 28);
  uint64_t v16 = a1 + v15;
  uint64_t v17 = (uint64_t)a2 + v15;
  uint64_t v18 = sub_24A2A6E10();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 24))(v16, v17, v18);
  return a1;
}

uint64_t sub_24A22BB5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  uint64_t v5 = *(int *)(a3 + 28);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v8 = sub_24A2A6E10();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t sub_24A22BBE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  unint64_t v7 = *(void *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  sub_24A1A5384(v6, v7);
  uint64_t v8 = *(void *)(a1 + 32);
  unint64_t v9 = *(void *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  sub_24A1A5384(v8, v9);
  uint64_t v10 = *(int *)(a3 + 28);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = sub_24A2A6E10();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 40))(v11, v12, v13);
  return a1;
}

uint64_t sub_24A22BC98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24A22BCAC);
}

uint64_t sub_24A22BCAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 12)
  {
    uint64_t v4 = *(void *)(a1 + 24) >> 60;
    if (((4 * v4) & 0xC) != 0) {
      return 16 - ((4 * v4) & 0xC | (v4 >> 2));
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = sub_24A2A6E10();
    unint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 28);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_24A22BD68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24A22BD7C);
}

uint64_t sub_24A22BD7C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 12)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
  }
  else
  {
    uint64_t v7 = sub_24A2A6E10();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 28);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_24A22BE2C()
{
  return sub_24A22BE40();
}

uint64_t sub_24A22BE40()
{
  uint64_t result = sub_24A2A6E10();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_24A22BEF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_52Tm);
}

uint64_t sub_24A22BF0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_53Tm);
}

uint64_t sub_24A22BF24()
{
  return sub_24A230B78();
}

_OWORD *sub_24A22BF30(_OWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *(void *)uint64_t v4 = *a2;
    uint64_t v4 = (_OWORD *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *(_OWORD *)a2;
    uint64_t v7 = a2[2];
    unint64_t v8 = a2[3];
    sub_24A1A52B0(v7, v8);
    *((void *)v4 + 2) = v7;
    *((void *)v4 + 3) = v8;
    uint64_t v9 = a2[5];
    *((void *)v4 + 4) = a2[4];
    *((void *)v4 + 5) = v9;
    *((unsigned char *)v4 + 48) = *((unsigned char *)a2 + 48);
    *((void *)v4 + 7) = a2[7];
    *((unsigned char *)v4 + 64) = *((unsigned char *)a2 + 64);
    long long v10 = *(_OWORD *)(a2 + 9);
    uint64_t v11 = *(int *)(a3 + 48);
    uint64_t v12 = (char *)v4 + v11;
    uint64_t v13 = (uint64_t)a2 + v11;
    *(_OWORD *)((char *)v4 + 72) = v10;
    uint64_t v14 = sub_24A2A6E10();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
  }
  return v4;
}

uint64_t sub_24A22C048(uint64_t a1, uint64_t a2)
{
  sub_24A1A5384(*(void *)(a1 + 16), *(void *)(a1 + 24));
  uint64_t v4 = a1 + *(int *)(a2 + 48);
  uint64_t v5 = sub_24A2A6E10();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t sub_24A22C0C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  unint64_t v7 = *(void *)(a2 + 24);
  sub_24A1A52B0(v6, v7);
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  uint64_t v8 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v8;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  long long v9 = *(_OWORD *)(a2 + 72);
  uint64_t v10 = *(int *)(a3 + 48);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  *(_OWORD *)(a1 + 72) = v9;
  uint64_t v13 = sub_24A2A6E10();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
  return a1;
}

uint64_t sub_24A22C18C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  unint64_t v7 = *(void *)(a2 + 24);
  sub_24A1A52B0(v6, v7);
  uint64_t v8 = *(void *)(a1 + 16);
  unint64_t v9 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  sub_24A1A5384(v8, v9);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v10 = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 40) = v10;
  uint64_t v11 = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 56) = v11;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  uint64_t v12 = *(int *)(a3 + 48);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = sub_24A2A6E10();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 24))(v13, v14, v15);
  return a1;
}

uint64_t sub_24A22C274(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  uint64_t v6 = *(int *)(a3 + 48);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  uint64_t v9 = sub_24A2A6E10();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  return a1;
}

uint64_t sub_24A22C318(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 16);
  unint64_t v7 = *(void *)(a1 + 24);
  long long v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  sub_24A1A5384(v6, v7);
  uint64_t v9 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v9;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  long long v10 = *(_OWORD *)(a2 + 72);
  uint64_t v11 = *(int *)(a3 + 48);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  *(_OWORD *)(a1 + 72) = v10;
  uint64_t v14 = sub_24A2A6E10();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 40))(v12, v13, v14);
  return a1;
}

uint64_t sub_24A22C3D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24A22C3E4);
}

uint64_t sub_24A22C3E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 12)
  {
    uint64_t v4 = *(void *)(a1 + 24) >> 60;
    if (((4 * v4) & 0xC) != 0) {
      return 16 - ((4 * v4) & 0xC | (v4 >> 2));
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = sub_24A2A6E10();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 48);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_24A22C4A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24A22C4B4);
}

uint64_t sub_24A22C4B4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 12)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
  }
  else
  {
    uint64_t v7 = sub_24A2A6E10();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 48);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_24A22C564()
{
  uint64_t result = sub_24A2A6E10();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *sub_24A22C61C(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v22 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v22 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    unint64_t v8 = a2[2];
    sub_24A1A52B0(v7, v8);
    v4[1] = v7;
    long long v4[2] = v8;
    void v4[3] = a2[3];
    *((unsigned char *)v4 + 32) = *((unsigned char *)a2 + 32);
    uint64_t v9 = a2[6];
    v4[5] = a2[5];
    v4[6] = v9;
    *((unsigned char *)v4 + 56) = *((unsigned char *)a2 + 56);
    long long v10 = *((_OWORD *)a2 + 4);
    *((unsigned char *)v4 + 80) = *((unsigned char *)a2 + 80);
    uint64_t v11 = *(int *)(a3 + 48);
    uint64_t v12 = (char *)v4 + v11;
    uint64_t v13 = (uint64_t)a2 + v11;
    *((_OWORD *)v4 + 4) = v10;
    uint64_t v14 = sub_24A2A6E10();
    uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16);
    v15(v12, v13, v14);
    uint64_t v16 = *(int *)(a3 + 52);
    uint64_t v17 = (_OWORD *)((char *)v4 + v16);
    uint64_t v18 = (_OWORD *)((char *)a2 + v16);
    uint64_t v19 = type metadata accessor for LogHead(0);
    uint64_t v20 = *(void *)(v19 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
    {
      uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_269779280);
      memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      _OWORD *v17 = *v18;
      uint64_t v23 = *((void *)v18 + 2);
      unint64_t v24 = *((void *)v18 + 3);
      sub_24A1A52B0(v23, v24);
      *((void *)v17 + 2) = v23;
      *((void *)v17 + 3) = v24;
      uint64_t v25 = *((void *)v18 + 5);
      *((void *)v17 + 4) = *((void *)v18 + 4);
      *((void *)v17 + 5) = v25;
      *((unsigned char *)v17 + 48) = *((unsigned char *)v18 + 48);
      *((void *)v17 + 7) = *((void *)v18 + 7);
      *((unsigned char *)v17 + 64) = *((unsigned char *)v18 + 64);
      *(_OWORD *)((char *)v17 + 72) = *(_OWORD *)((char *)v18 + 72);
      v15((char *)v17 + *(int *)(v19 + 48), (uint64_t)v18 + *(int *)(v19 + 48), v14);
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
    }
  }
  return v4;
}

uint64_t sub_24A22C868(uint64_t a1, uint64_t a2)
{
  sub_24A1A5384(*(void *)(a1 + 8), *(void *)(a1 + 16));
  uint64_t v4 = a1 + *(int *)(a2 + 48);
  uint64_t v5 = sub_24A2A6E10();
  long long v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v10(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 52);
  uint64_t v7 = type metadata accessor for LogHead(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7);
  if (!result)
  {
    sub_24A1A5384(*(void *)(v6 + 16), *(void *)(v6 + 24));
    uint64_t v9 = v6 + *(int *)(v7 + 48);
    return ((uint64_t (*)(uint64_t, uint64_t))v10)(v9, v5);
  }
  return result;
}

uint64_t sub_24A22C980(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  unint64_t v7 = *(void *)(a2 + 16);
  sub_24A1A52B0(v6, v7);
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = v7;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v8;
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  long long v9 = *(_OWORD *)(a2 + 64);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  uint64_t v10 = *(int *)(a3 + 48);
  uint64_t v11 = (char *)(a1 + v10);
  uint64_t v12 = (char *)(a2 + v10);
  *(_OWORD *)(a1 + 64) = v9;
  uint64_t v13 = sub_24A2A6E10();
  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16);
  v14(v11, v12, v13);
  uint64_t v15 = *(int *)(a3 + 52);
  uint64_t v16 = (_OWORD *)(a1 + v15);
  uint64_t v17 = (_OWORD *)(a2 + v15);
  uint64_t v18 = type metadata accessor for LogHead(0);
  uint64_t v19 = *(void *)(v18 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
  {
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_269779280);
    memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
  }
  else
  {
    _OWORD *v16 = *v17;
    uint64_t v21 = *((void *)v17 + 2);
    unint64_t v22 = *((void *)v17 + 3);
    sub_24A1A52B0(v21, v22);
    *((void *)v16 + 2) = v21;
    *((void *)v16 + 3) = v22;
    uint64_t v23 = *((void *)v17 + 5);
    *((void *)v16 + 4) = *((void *)v17 + 4);
    *((void *)v16 + 5) = v23;
    *((unsigned char *)v16 + 48) = *((unsigned char *)v17 + 48);
    *((void *)v16 + 7) = *((void *)v17 + 7);
    *((unsigned char *)v16 + 64) = *((unsigned char *)v17 + 64);
    *(_OWORD *)((char *)v16 + 72) = *(_OWORD *)((char *)v17 + 72);
    v14((char *)v16 + *(int *)(v18 + 48), (char *)v17 + *(int *)(v18 + 48), v13);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  }
  return a1;
}

uint64_t sub_24A22CB7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  unint64_t v7 = *(void *)(a2 + 16);
  sub_24A1A52B0(v6, v7);
  uint64_t v8 = *(void *)(a1 + 8);
  unint64_t v9 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = v7;
  sub_24A1A5384(v8, v9);
  uint64_t v10 = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 24) = v10;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v11 = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 48) = v11;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  uint64_t v12 = *(int *)(a3 + 48);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = sub_24A2A6E10();
  uint64_t v36 = *(void *)(v15 - 8);
  uint64_t v37 = v15;
  uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v36 + 24);
  v16(v13, v14);
  uint64_t v17 = *(int *)(a3 + 52);
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  uint64_t v20 = type metadata accessor for LogHead(0);
  uint64_t v21 = *(void *)(v20 - 8);
  unint64_t v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 48);
  LODWORD(v14) = v22(v18, 1, v20);
  int v23 = v22(v19, 1, v20);
  if (!v14)
  {
    if (!v23)
    {
      *(void *)uint64_t v18 = *(void *)v19;
      *(void *)(v18 + 8) = *(void *)(v19 + 8);
      uint64_t v30 = *(void *)(v19 + 16);
      unint64_t v31 = *(void *)(v19 + 24);
      sub_24A1A52B0(v30, v31);
      uint64_t v32 = *(void *)(v18 + 16);
      unint64_t v33 = *(void *)(v18 + 24);
      *(void *)(v18 + 16) = v30;
      *(void *)(v18 + 24) = v31;
      sub_24A1A5384(v32, v33);
      *(void *)(v18 + 32) = *(void *)(v19 + 32);
      uint64_t v34 = *(void *)(v19 + 40);
      *(unsigned char *)(v18 + 48) = *(unsigned char *)(v19 + 48);
      *(void *)(v18 + 40) = v34;
      uint64_t v35 = *(void *)(v19 + 56);
      *(unsigned char *)(v18 + 64) = *(unsigned char *)(v19 + 64);
      *(void *)(v18 + 56) = v35;
      *(void *)(v18 + 72) = *(void *)(v19 + 72);
      *(void *)(v18 + 80) = *(void *)(v19 + 80);
      ((void (*)(uint64_t, uint64_t, uint64_t))v16)(v18 + *(int *)(v20 + 48), v19 + *(int *)(v20 + 48), v37);
      return a1;
    }
    sub_24A2202DC(v18, type metadata accessor for LogHead);
    goto LABEL_6;
  }
  if (v23)
  {
LABEL_6:
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_269779280);
    memcpy((void *)v18, (const void *)v19, *(void *)(*(void *)(v28 - 8) + 64));
    return a1;
  }
  *(void *)uint64_t v18 = *(void *)v19;
  *(void *)(v18 + 8) = *(void *)(v19 + 8);
  uint64_t v24 = *(void *)(v19 + 16);
  unint64_t v25 = *(void *)(v19 + 24);
  sub_24A1A52B0(v24, v25);
  *(void *)(v18 + 16) = v24;
  *(void *)(v18 + 24) = v25;
  *(void *)(v18 + 32) = *(void *)(v19 + 32);
  uint64_t v26 = *(void *)(v19 + 40);
  *(unsigned char *)(v18 + 48) = *(unsigned char *)(v19 + 48);
  *(void *)(v18 + 40) = v26;
  uint64_t v27 = *(void *)(v19 + 56);
  *(unsigned char *)(v18 + 64) = *(unsigned char *)(v19 + 64);
  *(void *)(v18 + 56) = v27;
  *(void *)(v18 + 72) = *(void *)(v19 + 72);
  *(void *)(v18 + 80) = *(void *)(v19 + 80);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 16))(v18 + *(int *)(v20 + 48), v19 + *(int *)(v20 + 48), v37);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  return a1;
}

uint64_t sub_24A22CE8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v6;
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  long long v7 = *(_OWORD *)(a2 + 64);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  uint64_t v8 = *(int *)(a3 + 48);
  unint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  *(_OWORD *)(a1 + 64) = v7;
  uint64_t v11 = sub_24A2A6E10();
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32);
  v12(v9, v10, v11);
  uint64_t v13 = *(int *)(a3 + 52);
  uint64_t v14 = (_OWORD *)(a1 + v13);
  uint64_t v15 = (_OWORD *)(a2 + v13);
  uint64_t v16 = type metadata accessor for LogHead(0);
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_269779280);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    long long v19 = v15[1];
    _OWORD *v14 = *v15;
    v14[1] = v19;
    uint64_t v20 = *((void *)v15 + 5);
    *((void *)v14 + 4) = *((void *)v15 + 4);
    *((void *)v14 + 5) = v20;
    *((unsigned char *)v14 + 48) = *((unsigned char *)v15 + 48);
    *((void *)v14 + 7) = *((void *)v15 + 7);
    *((unsigned char *)v14 + 64) = *((unsigned char *)v15 + 64);
    *(_OWORD *)((char *)v14 + 72) = *(_OWORD *)((char *)v15 + 72);
    v12((char *)v14 + *(int *)(v16 + 48), (char *)v15 + *(int *)(v16 + 48), v11);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  return a1;
}

uint64_t sub_24A22D060(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a1 + 8);
  unint64_t v8 = *(void *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v6;
  sub_24A1A5384(v7, v8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v9 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v9;
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  long long v10 = *(_OWORD *)(a2 + 64);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  uint64_t v11 = *(int *)(a3 + 48);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  *(_OWORD *)(a1 + 64) = v10;
  uint64_t v14 = sub_24A2A6E10();
  uint64_t v31 = *(void *)(v14 - 8);
  uint64_t v32 = v14;
  uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v31 + 40);
  v15(v12, v13);
  uint64_t v16 = *(int *)(a3 + 52);
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = type metadata accessor for LogHead(0);
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 48);
  LODWORD(v13) = v21(v17, 1, v19);
  int v22 = v21(v18, 1, v19);
  if (!v13)
  {
    if (!v22)
    {
      uint64_t v27 = *(void *)(v17 + 16);
      unint64_t v28 = *(void *)(v17 + 24);
      long long v29 = *(_OWORD *)(v18 + 16);
      *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
      *(_OWORD *)(v17 + 16) = v29;
      sub_24A1A5384(v27, v28);
      uint64_t v30 = *(void *)(v18 + 40);
      *(void *)(v17 + 32) = *(void *)(v18 + 32);
      *(void *)(v17 + 40) = v30;
      *(unsigned char *)(v17 + 48) = *(unsigned char *)(v18 + 48);
      *(void *)(v17 + 56) = *(void *)(v18 + 56);
      *(unsigned char *)(v17 + 64) = *(unsigned char *)(v18 + 64);
      *(_OWORD *)(v17 + 72) = *(_OWORD *)(v18 + 72);
      ((void (*)(uint64_t, uint64_t, uint64_t))v15)(v17 + *(int *)(v19 + 48), v18 + *(int *)(v19 + 48), v32);
      return a1;
    }
    sub_24A2202DC(v17, type metadata accessor for LogHead);
    goto LABEL_6;
  }
  if (v22)
  {
LABEL_6:
    uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_269779280);
    memcpy((void *)v17, (const void *)v18, *(void *)(*(void *)(v25 - 8) + 64));
    return a1;
  }
  long long v23 = *(_OWORD *)(v18 + 16);
  *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
  *(_OWORD *)(v17 + 16) = v23;
  *(unsigned char *)(v17 + 48) = *(unsigned char *)(v18 + 48);
  uint64_t v24 = *(void *)(v18 + 40);
  *(void *)(v17 + 32) = *(void *)(v18 + 32);
  *(void *)(v17 + 40) = v24;
  *(void *)(v17 + 56) = *(void *)(v18 + 56);
  *(unsigned char *)(v17 + 64) = *(unsigned char *)(v18 + 64);
  *(_OWORD *)(v17 + 72) = *(_OWORD *)(v18 + 72);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 32))(v17 + *(int *)(v19 + 48), v18 + *(int *)(v19 + 48), v32);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  return a1;
}

uint64_t sub_24A22D300(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24A22D314);
}

uint64_t sub_24A22D314(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 254)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 80);
    BOOL v5 = v4 >= 2;
    int v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5) {
      return (v6 + 1);
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v10 = sub_24A2A6E10();
    uint64_t v11 = *(void *)(v10 - 8);
    if (*(_DWORD *)(v11 + 84) == a2)
    {
      uint64_t v12 = v10;
      uint64_t v13 = a1 + *(int *)(a3 + 48);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
      return v14(v13, a2, v12);
    }
    else
    {
      uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_269779280);
      uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48);
      uint64_t v17 = v15;
      uint64_t v18 = a1 + *(int *)(a3 + 52);
      return v16(v18, a2, v17);
    }
  }
}

uint64_t sub_24A22D444(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24A22D458);
}

uint64_t sub_24A22D458(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 254)
  {
    *(unsigned char *)(result + 80) = a2 + 1;
  }
  else
  {
    uint64_t v8 = sub_24A2A6E10();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 48);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_269779280);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 52);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

void sub_24A22D584()
{
  sub_24A2A6E10();
  if (v0 <= 0x3F)
  {
    sub_24A21D780(319, &qword_269779338, (void (*)(uint64_t))type metadata accessor for LogHead);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t *sub_24A22D69C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_24A1A52B0(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = *(int *)(a3 + 20);
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = sub_24A2A6E10();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
  }
  return a1;
}

uint64_t sub_24A22D784(uint64_t a1, uint64_t a2)
{
  sub_24A1A5384(*(void *)a1, *(void *)(a1 + 8));
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = sub_24A2A6E10();
  int v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t *sub_24A22D800(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_24A1A52B0(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = sub_24A2A6E10();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  return a1;
}

uint64_t *sub_24A22D898(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_24A1A52B0(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_24A1A5384(v8, v9);
  uint64_t v10 = *(int *)(a3 + 20);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = sub_24A2A6E10();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

_OWORD *sub_24A22D938(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = sub_24A2A6E10();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t *sub_24A22D9B4(uint64_t *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_24A1A5384(v6, v7);
  uint64_t v8 = *(int *)(a3 + 20);
  unint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = sub_24A2A6E10();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t sub_24A22DA44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24A22DA58);
}

uint64_t sub_24A22DA58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 12)
  {
    uint64_t v4 = *(void *)(a1 + 8) >> 60;
    if (((4 * v4) & 0xC) != 0) {
      return 16 - ((4 * v4) & 0xC | (v4 >> 2));
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = sub_24A2A6E10();
    unint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_24A22DB14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24A22DB28);
}

void *sub_24A22DB28(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 12)
  {
    *uint64_t result = 0;
    result[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
  }
  else
  {
    uint64_t v7 = sub_24A2A6E10();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_24A22DBD8()
{
  uint64_t result = sub_24A2A6E10();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_24A22DC88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_64Tm);
}

uint64_t sub_24A22DCA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_65Tm);
}

uint64_t *sub_24A22DCBC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_24A2A6E10();
    uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    uint64_t v9 = *(int *)(a3 + 20);
    uint64_t v10 = (uint64_t *)((char *)a1 + v9);
    uint64_t v11 = (uint64_t *)((char *)a2 + v9);
    uint64_t v12 = type metadata accessor for SignedObject(0);
    uint64_t v13 = *(void *)(v12 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174320);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      uint64_t v16 = *v11;
      unint64_t v17 = v11[1];
      sub_24A1A52B0(*v11, v17);
      void *v10 = v16;
      v10[1] = v17;
      v8((void *)((char *)v10 + *(int *)(v12 + 20)), (uint64_t *)((char *)v11 + *(int *)(v12 + 20)), v7);
      uint64_t v18 = *(int *)(v12 + 24);
      uint64_t v19 = (void *)((char *)v10 + v18);
      uint64_t v20 = (uint64_t *)((char *)v11 + v18);
      uint64_t v21 = type metadata accessor for Signature(0);
      uint64_t v28 = *(void *)(v21 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v28 + 48))(v20, 1, v21))
      {
        uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
        memcpy(v19, v20, *(void *)(*(void *)(v22 - 8) + 64));
      }
      else
      {
        unint64_t v24 = v20[1];
        uint64_t v26 = *v20;
        sub_24A1A52B0(*v20, v24);
        void *v19 = v26;
        v19[1] = v24;
        unint64_t v25 = v20[3];
        uint64_t v27 = v20[2];
        sub_24A1A52B0(v27, v25);
        v19[2] = v27;
        _OWORD v19[3] = v25;
        v19[4] = v20[4];
        *((unsigned char *)v19 + 40) = *((unsigned char *)v20 + 40);
        v8((void *)((char *)v19 + *(int *)(v21 + 28)), (uint64_t *)((char *)v20 + *(int *)(v21 + 28)), v7);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v28 + 56))(v19, 0, 1, v21);
      }
      (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
  }
  return a1;
}

uint64_t sub_24A22DFA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A2A6E10();
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v11(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = type metadata accessor for SignedObject(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6);
  if (!result)
  {
    sub_24A1A5384(*(void *)v5, *(void *)(v5 + 8));
    v11(v5 + *(int *)(v6 + 20), v4);
    uint64_t v8 = v5 + *(int *)(v6 + 24);
    uint64_t v9 = type metadata accessor for Signature(0);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9);
    if (!result)
    {
      sub_24A1A5384(*(void *)v8, *(void *)(v8 + 8));
      sub_24A1A5384(*(void *)(v8 + 16), *(void *)(v8 + 24));
      uint64_t v10 = v8 + *(int *)(v9 + 28);
      return ((uint64_t (*)(uint64_t, uint64_t))v11)(v10, v4);
    }
  }
  return result;
}

char *sub_24A22E11C(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = sub_24A2A6E10();
  uint64_t v7 = *(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = &a1[v8];
  uint64_t v10 = (uint64_t *)&a2[v8];
  uint64_t v11 = type metadata accessor for SignedObject(0);
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174320);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    uint64_t v14 = *v10;
    unint64_t v15 = v10[1];
    sub_24A1A52B0(*v10, v15);
    *(void *)uint64_t v9 = v14;
    *((void *)v9 + 1) = v15;
    v7(&v9[*(int *)(v11 + 20)], (char *)v10 + *(int *)(v11 + 20), v6);
    uint64_t v16 = *(int *)(v11 + 24);
    unint64_t v17 = &v9[v16];
    uint64_t v18 = (uint64_t *)((char *)v10 + v16);
    uint64_t v19 = type metadata accessor for Signature(0);
    uint64_t v26 = *(void *)(v19 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v26 + 48))(v18, 1, v19))
    {
      uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
      memcpy(v17, v18, *(void *)(*(void *)(v20 - 8) + 64));
    }
    else
    {
      unint64_t v22 = v18[1];
      uint64_t v24 = *v18;
      sub_24A1A52B0(*v18, v22);
      *(void *)unint64_t v17 = v24;
      *((void *)v17 + 1) = v22;
      unint64_t v23 = v18[3];
      uint64_t v25 = v18[2];
      sub_24A1A52B0(v25, v23);
      *((void *)v17 + 2) = v25;
      *((void *)v17 + 3) = v23;
      *((void *)v17 + 4) = v18[4];
      v17[40] = *((unsigned char *)v18 + 40);
      v7(&v17[*(int *)(v19 + 28)], (char *)v18 + *(int *)(v19 + 28), v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v17, 0, 1, v19);
    }
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  return a1;
}

uint64_t sub_24A22E3B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_24A2A6E10();
  uint64_t v59 = *(void *)(v6 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v59 + 24);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v61 = a1;
  uint64_t v9 = (uint64_t *)(a1 + v8);
  uint64_t v10 = (uint64_t *)(a2 + v8);
  uint64_t v11 = type metadata accessor for SignedObject(0);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v12 + 48);
  int v14 = v13(v9, 1, v11);
  int v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      uint64_t v28 = *v10;
      unint64_t v29 = v10[1];
      sub_24A1A52B0(*v10, v29);
      uint64_t v30 = *v9;
      unint64_t v31 = v9[1];
      uint64_t *v9 = v28;
      v9[1] = v29;
      sub_24A1A5384(v30, v31);
      v7((uint64_t)v9 + *(int *)(v11 + 20), (uint64_t)v10 + *(int *)(v11 + 20), v6);
      uint64_t v32 = *(int *)(v11 + 24);
      uint64_t v33 = (uint64_t)v9 + v32;
      uint64_t v34 = (char *)v10 + v32;
      uint64_t v35 = type metadata accessor for Signature(0);
      uint64_t v36 = *(void *)(v35 - 8);
      uint64_t v37 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v36 + 48);
      LODWORD(v28) = v37(v33, 1, v35);
      int v38 = v37((uint64_t)v34, 1, v35);
      if (v28)
      {
        if (!v38)
        {
          uint64_t v39 = *(void *)v34;
          unint64_t v40 = *((void *)v34 + 1);
          sub_24A1A52B0(*(void *)v34, v40);
          *(void *)uint64_t v33 = v39;
          *(void *)(v33 + 8) = v40;
          uint64_t v41 = *((void *)v34 + 2);
          unint64_t v42 = *((void *)v34 + 3);
          sub_24A1A52B0(v41, v42);
          *(void *)(v33 + 16) = v41;
          *(void *)(v33 + 24) = v42;
          uint64_t v43 = *((void *)v34 + 4);
          *(unsigned char *)(v33 + 40) = v34[40];
          *(void *)(v33 + 32) = v43;
          (*(void (**)(uint64_t, char *, uint64_t))(v59 + 16))(v33 + *(int *)(v35 + 28), &v34[*(int *)(v35 + 28)], v6);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
          return v61;
        }
      }
      else
      {
        if (!v38)
        {
          uint64_t v48 = *(void *)v34;
          unint64_t v49 = *((void *)v34 + 1);
          sub_24A1A52B0(*(void *)v34, v49);
          uint64_t v50 = *(void *)v33;
          unint64_t v51 = *(void *)(v33 + 8);
          *(void *)uint64_t v33 = v48;
          *(void *)(v33 + 8) = v49;
          sub_24A1A5384(v50, v51);
          uint64_t v52 = *((void *)v34 + 2);
          unint64_t v53 = *((void *)v34 + 3);
          sub_24A1A52B0(v52, v53);
          uint64_t v54 = *(void *)(v33 + 16);
          unint64_t v55 = *(void *)(v33 + 24);
          *(void *)(v33 + 16) = v52;
          *(void *)(v33 + 24) = v53;
          sub_24A1A5384(v54, v55);
          uint64_t v56 = *((void *)v34 + 4);
          *(unsigned char *)(v33 + 40) = v34[40];
          *(void *)(v33 + 32) = v56;
          v7(v33 + *(int *)(v35 + 28), (uint64_t)&v34[*(int *)(v35 + 28)], v6);
          return v61;
        }
        sub_24A2202DC(v33, type metadata accessor for Signature);
      }
      size_t v25 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8) - 8) + 64);
      uint64_t v26 = (void *)v33;
      uint64_t v27 = (uint64_t *)v34;
      goto LABEL_8;
    }
    sub_24A2202DC((uint64_t)v9, type metadata accessor for SignedObject);
LABEL_7:
    size_t v25 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26B174320) - 8) + 64);
    uint64_t v26 = v9;
    uint64_t v27 = v10;
LABEL_8:
    memcpy(v26, v27, v25);
    return v61;
  }
  if (v15) {
    goto LABEL_7;
  }
  uint64_t v16 = *v10;
  unint64_t v17 = v10[1];
  sub_24A1A52B0(*v10, v17);
  uint64_t *v9 = v16;
  v9[1] = v17;
  uint64_t v18 = *(void (**)(char *, char *, uint64_t))(v59 + 16);
  v18((char *)v9 + *(int *)(v11 + 20), (char *)v10 + *(int *)(v11 + 20), v6);
  uint64_t v19 = *(int *)(v11 + 24);
  uint64_t v20 = (uint64_t *)((char *)v9 + v19);
  uint64_t v21 = (uint64_t *)((char *)v10 + v19);
  uint64_t v22 = type metadata accessor for Signature(0);
  uint64_t v23 = *(void *)(v22 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
  {
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
    memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
  }
  else
  {
    uint64_t v57 = *v21;
    uint64_t v60 = v18;
    unint64_t v44 = v21[1];
    sub_24A1A52B0(*v21, v44);
    *uint64_t v20 = v57;
    v20[1] = v44;
    unint64_t v45 = v21[3];
    uint64_t v58 = v21[2];
    sub_24A1A52B0(v58, v45);
    v20[2] = v58;
    _OWORD v20[3] = v45;
    uint64_t v46 = v21[4];
    *((unsigned char *)v20 + 40) = *((unsigned char *)v21 + 40);
    v20[4] = v46;
    v60((char *)v20 + *(int *)(v22 + 28), (char *)v21 + *(int *)(v22 + 28), v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  }
  (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  return v61;
}

char *sub_24A22E8A8(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = sub_24A2A6E10();
  uint64_t v7 = *(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  uint64_t v11 = type metadata accessor for SignedObject(0);
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174320);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
    v7(&v9[*(int *)(v11 + 20)], &v10[*(int *)(v11 + 20)], v6);
    uint64_t v14 = *(int *)(v11 + 24);
    long long __dst = &v9[v14];
    int v15 = &v10[v14];
    uint64_t v16 = type metadata accessor for Signature(0);
    uint64_t v17 = *(void *)(v16 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
      memcpy(__dst, v15, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      long long v19 = *((_OWORD *)v15 + 1);
      *(_OWORD *)long long __dst = *(_OWORD *)v15;
      *((_OWORD *)__dst + 1) = v19;
      *((void *)__dst + 4) = *((void *)v15 + 4);
      __dst[40] = v15[40];
      v7(&__dst[*(int *)(v16 + 28)], &v15[*(int *)(v16 + 28)], v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(__dst, 0, 1, v16);
    }
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  return a1;
}

uint64_t sub_24A22EB14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_24A2A6E10();
  uint64_t v43 = *(void *)(v6 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 40);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v44 = a1;
  uint64_t v9 = (uint64_t *)(a1 + v8);
  uint64_t v10 = (uint64_t *)(a2 + v8);
  uint64_t v11 = type metadata accessor for SignedObject(0);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v12 + 48);
  int v14 = v13(v9, 1, v11);
  int v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      uint64_t v26 = *v9;
      unint64_t v27 = v9[1];
      *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
      sub_24A1A5384(v26, v27);
      v7((uint64_t)v9 + *(int *)(v11 + 20), (uint64_t)v10 + *(int *)(v11 + 20), v6);
      uint64_t v28 = *(int *)(v11 + 24);
      uint64_t v29 = (uint64_t)v9 + v28;
      uint64_t v30 = (char *)v10 + v28;
      uint64_t v31 = type metadata accessor for Signature(0);
      uint64_t v32 = *(void *)(v31 - 8);
      uint64_t v33 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v32 + 48);
      int v34 = v33(v29, 1, v31);
      int v35 = v33((uint64_t)v30, 1, v31);
      if (v34)
      {
        if (!v35)
        {
          long long v36 = *((_OWORD *)v30 + 1);
          *(_OWORD *)uint64_t v29 = *(_OWORD *)v30;
          *(_OWORD *)(v29 + 16) = v36;
          *(void *)(v29 + 32) = *((void *)v30 + 4);
          *(unsigned char *)(v29 + 40) = v30[40];
          (*(void (**)(uint64_t, char *, uint64_t))(v43 + 32))(v29 + *(int *)(v31 + 28), &v30[*(int *)(v31 + 28)], v6);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
          return v44;
        }
      }
      else
      {
        if (!v35)
        {
          uint64_t v39 = *(void *)v29;
          unint64_t v40 = *(void *)(v29 + 8);
          *(_OWORD *)uint64_t v29 = *(_OWORD *)v30;
          sub_24A1A5384(v39, v40);
          uint64_t v41 = *(void *)(v29 + 16);
          unint64_t v42 = *(void *)(v29 + 24);
          *(_OWORD *)(v29 + 16) = *((_OWORD *)v30 + 1);
          sub_24A1A5384(v41, v42);
          *(void *)(v29 + 32) = *((void *)v30 + 4);
          *(unsigned char *)(v29 + 40) = v30[40];
          v7(v29 + *(int *)(v31 + 28), (uint64_t)&v30[*(int *)(v31 + 28)], v6);
          return v44;
        }
        sub_24A2202DC(v29, type metadata accessor for Signature);
      }
      size_t v23 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8) - 8) + 64);
      uint64_t v24 = (void *)v29;
      size_t v25 = (uint64_t *)v30;
      goto LABEL_8;
    }
    sub_24A2202DC((uint64_t)v9, type metadata accessor for SignedObject);
LABEL_7:
    size_t v23 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26B174320) - 8) + 64);
    uint64_t v24 = v9;
    size_t v25 = v10;
LABEL_8:
    memcpy(v24, v25, v23);
    return v44;
  }
  if (v15) {
    goto LABEL_7;
  }
  *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
  uint64_t v16 = *(void (**)(char *, char *, uint64_t))(v43 + 32);
  v16((char *)v9 + *(int *)(v11 + 20), (char *)v10 + *(int *)(v11 + 20), v6);
  uint64_t v17 = *(int *)(v11 + 24);
  uint64_t v18 = (_OWORD *)((char *)v9 + v17);
  long long v19 = (_OWORD *)((char *)v10 + v17);
  uint64_t v20 = type metadata accessor for Signature(0);
  uint64_t v21 = *(void *)(v20 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
    memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    long long v37 = v19[1];
    *uint64_t v18 = *v19;
    v18[1] = v37;
    *((void *)v18 + 4) = *((void *)v19 + 4);
    *((unsigned char *)v18 + 40) = *((unsigned char *)v19 + 40);
    v16((char *)v18 + *(int *)(v20 + 28), (char *)v19 + *(int *)(v20 + 28), v6);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  return v44;
}

uint64_t sub_24A22EF98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24A22EFAC);
}

uint64_t __swift_get_extra_inhabitant_index_64Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_24A2A6E10();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174320);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 20);
    return v11(v13, a2, v12);
  }
}

uint64_t sub_24A22F0AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24A22F0C0);
}

uint64_t __swift_store_extra_inhabitant_index_65Tm(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = sub_24A2A6E10();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, v8);
  }
  else
  {
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174320);
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a4 + 20);
    return v13(v15, a2, a2, v14);
  }
}

void sub_24A22F1CC()
{
  sub_24A2A6E10();
  if (v0 <= 0x3F)
  {
    sub_24A21D780(319, &qword_26B174328, (void (*)(uint64_t))type metadata accessor for SignedObject);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

unint64_t sub_24A22F2B0(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = v20 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v7 = *(void *)a2;
    unint64_t v8 = *(void *)(a2 + 8);
    sub_24A1A52B0(*(void *)a2, v8);
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
    uint64_t v9 = *(int *)(a3 + 24);
    uint64_t v10 = a1 + v9;
    uint64_t v11 = a2 + v9;
    uint64_t v12 = sub_24A2A6E10();
    uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16);
    v13(v10, v11, v12);
    uint64_t v14 = *(int *)(a3 + 28);
    uint64_t v15 = (void *)(a1 + v14);
    uint64_t v16 = (uint64_t *)(a2 + v14);
    uint64_t v17 = type metadata accessor for VRFPublicKey(0);
    uint64_t v18 = *(void *)(v17 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_2697792D8);
      memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
    }
    else
    {
      uint64_t v21 = *v16;
      unint64_t v22 = v16[1];
      sub_24A1A52B0(*v16, v22);
      void *v15 = v21;
      v15[1] = v22;
      void v15[2] = v16[2];
      *((unsigned char *)v15 + 24) = *((unsigned char *)v16 + 24);
      v13((uint64_t)v15 + *(int *)(v17 + 24), (uint64_t)v16 + *(int *)(v17 + 24), v12);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
  }
  return a1;
}

uint64_t sub_24A22F4B4(uint64_t a1, uint64_t a2)
{
  sub_24A1A5384(*(void *)a1, *(void *)(a1 + 8));
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = sub_24A2A6E10();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v10(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 28);
  uint64_t v7 = type metadata accessor for VRFPublicKey(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7);
  if (!result)
  {
    sub_24A1A5384(*(void *)v6, *(void *)(v6 + 8));
    uint64_t v9 = v6 + *(int *)(v7 + 24);
    return ((uint64_t (*)(uint64_t, uint64_t))v10)(v9, v5);
  }
  return result;
}

uint64_t sub_24A22F5CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  sub_24A1A52B0(*(void *)a2, v7);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = sub_24A2A6E10();
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
  v12(v9, v10, v11);
  uint64_t v13 = *(int *)(a3 + 28);
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (uint64_t *)(a2 + v13);
  uint64_t v16 = type metadata accessor for VRFPublicKey(0);
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_2697792D8);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    uint64_t v19 = *v15;
    unint64_t v20 = v15[1];
    sub_24A1A52B0(*v15, v20);
    void *v14 = v19;
    v14[1] = v20;
    void v14[2] = v15[2];
    *((unsigned char *)v14 + 24) = *((unsigned char *)v15 + 24);
    v12((char *)v14 + *(int *)(v16 + 24), (char *)v15 + *(int *)(v16 + 24), v11);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  return a1;
}

uint64_t sub_24A22F780(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  sub_24A1A52B0(*(void *)a2, v7);
  uint64_t v8 = *(void *)a1;
  unint64_t v9 = *(void *)(a1 + 8);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  sub_24A1A5384(v8, v9);
  uint64_t v10 = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = v10;
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = sub_24A2A6E10();
  uint64_t v33 = *(void *)(v14 - 8);
  uint64_t v34 = v14;
  uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v33 + 24);
  v15(v12, v13);
  uint64_t v16 = *(int *)(a3 + 28);
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = type metadata accessor for VRFPublicKey(0);
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 48);
  LODWORD(v13) = v21(v17, 1, v19);
  int v22 = v21(v18, 1, v19);
  if (!v13)
  {
    if (!v22)
    {
      uint64_t v28 = *(void *)v18;
      unint64_t v29 = *(void *)(v18 + 8);
      sub_24A1A52B0(*(void *)v18, v29);
      uint64_t v30 = *(void *)v17;
      unint64_t v31 = *(void *)(v17 + 8);
      *(void *)uint64_t v17 = v28;
      *(void *)(v17 + 8) = v29;
      sub_24A1A5384(v30, v31);
      uint64_t v32 = *(void *)(v18 + 16);
      *(unsigned char *)(v17 + 24) = *(unsigned char *)(v18 + 24);
      *(void *)(v17 + 16) = v32;
      ((void (*)(uint64_t, uint64_t, uint64_t))v15)(v17 + *(int *)(v19 + 24), v18 + *(int *)(v19 + 24), v34);
      return a1;
    }
    sub_24A2202DC(v17, type metadata accessor for VRFPublicKey);
    goto LABEL_6;
  }
  if (v22)
  {
LABEL_6:
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_2697792D8);
    memcpy((void *)v17, (const void *)v18, *(void *)(*(void *)(v26 - 8) + 64));
    return a1;
  }
  uint64_t v23 = *(void *)v18;
  unint64_t v24 = *(void *)(v18 + 8);
  sub_24A1A52B0(*(void *)v18, v24);
  *(void *)uint64_t v17 = v23;
  *(void *)(v17 + 8) = v24;
  uint64_t v25 = *(void *)(v18 + 16);
  *(unsigned char *)(v17 + 24) = *(unsigned char *)(v18 + 24);
  *(void *)(v17 + 16) = v25;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 16))(v17 + *(int *)(v19 + 24), v18 + *(int *)(v19 + 24), v34);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  return a1;
}

uint64_t sub_24A22F9E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v6 = *(int *)(a3 + 24);
  unint64_t v7 = (char *)(a1 + v6);
  uint64_t v8 = (char *)(a2 + v6);
  uint64_t v9 = sub_24A2A6E10();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 28);
  uint64_t v12 = (_OWORD *)(a1 + v11);
  uint64_t v13 = (_OWORD *)(a2 + v11);
  uint64_t v14 = type metadata accessor for VRFPublicKey(0);
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_2697792D8);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    _OWORD *v12 = *v13;
    *((void *)v12 + 2) = *((void *)v13 + 2);
    *((unsigned char *)v12 + 24) = *((unsigned char *)v13 + 24);
    v10((char *)v12 + *(int *)(v14 + 24), (char *)v13 + *(int *)(v14 + 24), v9);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

uint64_t sub_24A22FB7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_24A1A5384(v6, v7);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = sub_24A2A6E10();
  uint64_t v24 = *(void *)(v11 - 8);
  uint64_t v25 = v11;
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v24 + 40);
  v12(v9, v10);
  uint64_t v13 = *(int *)(a3 + 28);
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  uint64_t v16 = type metadata accessor for VRFPublicKey(0);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
  LODWORD(v10) = v18(v14, 1, v16);
  int v19 = v18(v15, 1, v16);
  if (!v10)
  {
    if (!v19)
    {
      uint64_t v22 = *(void *)v14;
      unint64_t v23 = *(void *)(v14 + 8);
      *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
      sub_24A1A5384(v22, v23);
      *(void *)(v14 + 16) = *(void *)(v15 + 16);
      *(unsigned char *)(v14 + 24) = *(unsigned char *)(v15 + 24);
      ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v14 + *(int *)(v16 + 24), v15 + *(int *)(v16 + 24), v25);
      return a1;
    }
    sub_24A2202DC(v14, type metadata accessor for VRFPublicKey);
    goto LABEL_6;
  }
  if (v19)
  {
LABEL_6:
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_2697792D8);
    memcpy((void *)v14, (const void *)v15, *(void *)(*(void *)(v20 - 8) + 64));
    return a1;
  }
  *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
  *(void *)(v14 + 16) = *(void *)(v15 + 16);
  *(unsigned char *)(v14 + 24) = *(unsigned char *)(v15 + 24);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 32))(v14 + *(int *)(v16 + 24), v15 + *(int *)(v16 + 24), v25);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  return a1;
}

uint64_t sub_24A22FDC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24A22FDD8);
}

uint64_t sub_24A22FDD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 12)
  {
    uint64_t v4 = *(void *)(a1 + 8) >> 60;
    if (((4 * v4) & 0xC) != 0) {
      return 16 - ((4 * v4) & 0xC | (v4 >> 2));
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = sub_24A2A6E10();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 24);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_2697792D8);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 28);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t sub_24A22FF14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24A22FF28);
}

void *sub_24A22FF28(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 12)
  {
    *uint64_t result = 0;
    result[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
  }
  else
  {
    uint64_t v8 = sub_24A2A6E10();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = (char *)v5 + *(int *)(a4 + 24);
      uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return (void *)v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_2697792D8);
      uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = (char *)v5 + *(int *)(a4 + 28);
      return (void *)v14(v16, a2, a2, v15);
    }
  }
  return result;
}

void sub_24A230060(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_24A230090(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t *a6, void (*a7)(uint64_t))
{
  sub_24A2A6E10();
  if (v9 <= 0x3F)
  {
    sub_24A21D780(319, a6, a7);
    if (v10 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

unint64_t sub_24A230174(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = v13 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v7 = *(void *)a2;
    unint64_t v8 = *(void *)(a2 + 8);
    sub_24A1A52B0(*(void *)a2, v8);
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
    uint64_t v9 = *(int *)(a3 + 24);
    uint64_t v10 = a1 + v9;
    uint64_t v11 = a2 + v9;
    uint64_t v12 = sub_24A2A6E10();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
  }
  return a1;
}

uint64_t sub_24A23026C(uint64_t a1, uint64_t a2)
{
  sub_24A1A5384(*(void *)a1, *(void *)(a1 + 8));
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = sub_24A2A6E10();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t sub_24A2302E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  sub_24A1A52B0(*(void *)a2, v7);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = sub_24A2A6E10();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  return a1;
}

uint64_t sub_24A230390(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  sub_24A1A52B0(*(void *)a2, v7);
  uint64_t v8 = *(void *)a1;
  unint64_t v9 = *(void *)(a1 + 8);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  sub_24A1A5384(v8, v9);
  uint64_t v10 = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = v10;
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = sub_24A2A6E10();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 24))(v12, v13, v14);
  return a1;
}

uint64_t sub_24A230440(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = sub_24A2A6E10();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t sub_24A2304CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_24A1A5384(v6, v7);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = sub_24A2A6E10();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t sub_24A23056C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24A230580);
}

uint64_t __swift_get_extra_inhabitant_index_52Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 12)
  {
    uint64_t v4 = *(void *)(a1 + 8) >> 60;
    if (((4 * v4) & 0xC) != 0) {
      return 16 - ((4 * v4) & 0xC | (v4 >> 2));
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = sub_24A2A6E10();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_24A230640(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24A230654);
}

void *__swift_store_extra_inhabitant_index_53Tm(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 12)
  {
    *uint64_t result = 0;
    result[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
  }
  else
  {
    uint64_t v7 = sub_24A2A6E10();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 24);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

void *sub_24A230708(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *unint64_t v3 = *a2;
    unint64_t v3 = (void *)(v10 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v5;
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    uint64_t v6 = *(int *)(a3 + 24);
    uint64_t v7 = a1 + v6;
    uint64_t v8 = (uint64_t)a2 + v6;
    uint64_t v9 = sub_24A2A6E10();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  }
  return v3;
}

uint64_t sub_24A2307DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 24);
  uint64_t v3 = sub_24A2A6E10();
  int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);

  return v4(v2, v3);
}

uint64_t sub_24A230844(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v8 = sub_24A2A6E10();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
  return a1;
}

uint64_t sub_24A2308C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v8 = sub_24A2A6E10();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 24))(v6, v7, v8);
  return a1;
}

uint64_t sub_24A230954(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v8 = sub_24A2A6E10();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t sub_24A2309D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v8 = sub_24A2A6E10();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 40))(v6, v7, v8);
  return a1;
}

uint64_t sub_24A230A5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24A230A70);
}

uint64_t sub_24A230A70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + *(int *)(a3 + 24);
  uint64_t v5 = sub_24A2A6E10();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48);

  return v6(v4, a2, v5);
}

uint64_t sub_24A230AE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24A230AF4);
}

uint64_t sub_24A230AF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1 + *(int *)(a4 + 24);
  uint64_t v6 = sub_24A2A6E10();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(v5, a2, a2, v6);
}

uint64_t sub_24A230B68()
{
  return sub_24A230B78();
}

uint64_t sub_24A230B78()
{
  uint64_t result = sub_24A2A6E10();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_24A230C28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_79Tm);
}

uint64_t sub_24A230C40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_80Tm);
}

uint64_t sub_24A230C5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24A230C70);
}

uint64_t __swift_get_extra_inhabitant_index_79Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_24A2A6E10();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_24A230D34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24A230D48);
}

uint64_t __swift_store_extra_inhabitant_index_80Tm(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_24A2A6E10();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for Signature.SignatureAlgorithm()
{
  return &type metadata for Signature.SignatureAlgorithm;
}

ValueMetadata *type metadata accessor for NodeType()
{
  return &type metadata for NodeType;
}

ValueMetadata *type metadata accessor for LogType()
{
  return &type metadata for LogType;
}

ValueMetadata *type metadata accessor for Application()
{
  return &type metadata for Application;
}

ValueMetadata *type metadata accessor for ProtocolVersion()
{
  return &type metadata for ProtocolVersion;
}

ValueMetadata *type metadata accessor for Status()
{
  return &type metadata for Status;
}

unint64_t sub_24A230E6C()
{
  unint64_t result = qword_2697793C8;
  if (!qword_2697793C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2697793C8);
  }
  return result;
}

uint64_t sub_24A230EC0()
{
  return sub_24A231268(&qword_2697793D0, &qword_2697793D8);
}

unint64_t sub_24A230EEC()
{
  unint64_t result = qword_2697793E0;
  if (!qword_2697793E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2697793E0);
  }
  return result;
}

uint64_t sub_24A230F40()
{
  return sub_24A231268(&qword_2697793E8, &qword_2697793F0);
}

unint64_t sub_24A230F6C()
{
  unint64_t result = qword_2697793F8;
  if (!qword_2697793F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2697793F8);
  }
  return result;
}

uint64_t sub_24A230FC0()
{
  return sub_24A231268(&qword_269779400, &qword_269779408);
}

unint64_t sub_24A230FEC()
{
  unint64_t result = qword_26B1748E0;
  if (!qword_26B1748E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B1748E0);
  }
  return result;
}

uint64_t sub_24A231040()
{
  return sub_24A231268(&qword_269779410, &qword_269779418);
}

unint64_t sub_24A23106C()
{
  unint64_t result = qword_26B174968;
  if (!qword_26B174968)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B174968);
  }
  return result;
}

uint64_t sub_24A2310C0()
{
  return sub_24A231268(&qword_269779420, &qword_269779428);
}

unint64_t sub_24A2310EC()
{
  unint64_t result = qword_26B174988;
  if (!qword_26B174988)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B174988);
  }
  return result;
}

uint64_t sub_24A231140()
{
  return sub_24A231268(&qword_269779430, &qword_269779438);
}

unint64_t sub_24A23116C()
{
  unint64_t result = qword_269779440;
  if (!qword_269779440)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269779440);
  }
  return result;
}

uint64_t sub_24A2311C0()
{
  return sub_24A231268(&qword_269779448, &qword_269779450);
}

unint64_t sub_24A2311EC()
{
  unint64_t result = qword_269779458;
  if (!qword_269779458)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269779458);
  }
  return result;
}

uint64_t sub_24A231240()
{
  return sub_24A231268(&qword_269779460, &qword_269779468);
}

uint64_t sub_24A231268(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_24A2312BC()
{
  unint64_t result = qword_269779470;
  if (!qword_269779470)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269779470);
  }
  return result;
}

unint64_t sub_24A231314()
{
  unint64_t result = qword_269779478;
  if (!qword_269779478)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269779478);
  }
  return result;
}

unint64_t sub_24A23136C()
{
  unint64_t result = qword_26B174960;
  if (!qword_26B174960)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B174960);
  }
  return result;
}

unint64_t sub_24A2313C4()
{
  unint64_t result = qword_26B174970;
  if (!qword_26B174970)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B174970);
  }
  return result;
}

unint64_t sub_24A23141C()
{
  unint64_t result = qword_26B1748D8;
  if (!qword_26B1748D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B1748D8);
  }
  return result;
}

unint64_t sub_24A231474()
{
  unint64_t result = qword_26B1748E8;
  if (!qword_26B1748E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B1748E8);
  }
  return result;
}

unint64_t sub_24A2314CC()
{
  unint64_t result = qword_26B174980;
  if (!qword_26B174980)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B174980);
  }
  return result;
}

unint64_t sub_24A231524()
{
  unint64_t result = qword_26B174990;
  if (!qword_26B174990)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B174990);
  }
  return result;
}

unint64_t sub_24A23157C()
{
  unint64_t result = qword_269779480;
  if (!qword_269779480)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269779480);
  }
  return result;
}

unint64_t sub_24A2315D4()
{
  unint64_t result = qword_269779488;
  if (!qword_269779488)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269779488);
  }
  return result;
}

unint64_t sub_24A23162C()
{
  unint64_t result = qword_269779490;
  if (!qword_269779490)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269779490);
  }
  return result;
}

unint64_t sub_24A231684()
{
  unint64_t result = qword_269779498;
  if (!qword_269779498)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269779498);
  }
  return result;
}

unint64_t sub_24A2316DC()
{
  unint64_t result = qword_2697794A0;
  if (!qword_2697794A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2697794A0);
  }
  return result;
}

unint64_t sub_24A231734()
{
  unint64_t result = qword_2697794A8;
  if (!qword_2697794A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2697794A8);
  }
  return result;
}

unint64_t sub_24A23178C()
{
  unint64_t result = qword_2697794B0;
  if (!qword_2697794B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2697794B0);
  }
  return result;
}

unint64_t sub_24A2317E4()
{
  unint64_t result = qword_2697794B8;
  if (!qword_2697794B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2697794B8);
  }
  return result;
}

unint64_t sub_24A231838(unint64_t result)
{
  uint64_t v1 = 4;
  if (result != 999999999) {
    uint64_t v1 = result;
  }
  if (result >= 4) {
    return v1;
  }
  return result;
}

uint64_t sub_24A231884(uint64_t result)
{
  switch(result)
  {
    case 1:
      unint64_t result = 1;
      break;
    case 3:
      unint64_t result = 2;
      break;
    case 4:
      unint64_t result = 3;
      break;
    case 5:
      unint64_t result = 4;
      break;
    case 6:
      unint64_t result = 5;
      break;
    case 7:
      unint64_t result = 6;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_24A231980(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = sub_24A2A6B00();
  uint64_t v21 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  switch(a2 >> 62)
  {
    case 1uLL:
    case 2uLL:
      sub_24A1A52B0(a1, a2);
      sub_24A1A52B0(a1, a2);
      break;
    default:
      break;
  }
  sub_24A2A6B10();
  sub_24A1A5384(a1, a2);
  sub_24A215D4C();
  sub_24A2A7B60();
  if (v25)
  {
    uint64_t v7 = (void *)MEMORY[0x263F8EE78];
  }
  else
  {
    uint64_t v7 = (void *)MEMORY[0x263F8EE78];
    long long v22 = xmmword_24A2A8A60;
    uint64_t v10 = MEMORY[0x263F8E778];
    uint64_t v11 = MEMORY[0x263F8E7C0];
    do
    {
      char v12 = v24;
      __swift_instantiateConcreteTypeFromMangledName(&qword_26B174BA0);
      uint64_t v13 = swift_allocObject();
      *(_OWORD *)(v13 + 16) = v22;
      *(void *)(v13 + 56) = v10;
      *(void *)(v13 + 64) = v11;
      *(unsigned char *)(v13 + 32) = v12;
      uint64_t v14 = sub_24A2A7840();
      uint64_t v16 = v15;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v7 = sub_24A1DECEC(0, v7[2] + 1, 1, v7);
      }
      unint64_t v18 = v7[2];
      unint64_t v17 = v7[3];
      if (v18 >= v17 >> 1) {
        uint64_t v7 = sub_24A1DECEC((void *)(v17 > 1), v18 + 1, 1, v7);
      }
      uint64_t v7[2] = v18 + 1;
      int v19 = &v7[2 * v18];
      v19[4] = v14;
      void v19[5] = v16;
      sub_24A2A7B60();
    }
    while (v25 != 1);
  }
  (*(void (**)(char *, uint64_t))(v21 + 8))(v6, v4);
  unint64_t v23 = v7;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B174A98);
  sub_24A231C40();
  uint64_t v8 = sub_24A2A77C0();
  swift_bridgeObjectRelease();
  return v8;
}

unint64_t sub_24A231C40()
{
  unint64_t result = qword_26B174AA8;
  if (!qword_26B174AA8)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26B174A98);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B174AA8);
  }
  return result;
}

CloudAttestation::NopTransparencyLog __swiftcall NopTransparencyLog.init()()
{
  unsigned char *v0 = 0;
  return result;
}

CloudAttestation::NopTransparencyLog __swiftcall NopTransparencyLog.init(nonEmptyProofs:)(CloudAttestation::NopTransparencyLog nonEmptyProofs)
{
  v1->nonEmptyProofs = nonEmptyProofs.nonEmptyProofs;
  return nonEmptyProofs;
}

uint64_t NopTransparencyLog.proveInclusion(of:)(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(unsigned char *)(v2 + 24) = *v1;
  return MEMORY[0x270FA2498](sub_24A231CD4, 0, 0);
}

uint64_t sub_24A231CD4()
{
  int v1 = *(unsigned __int8 *)(v0 + 24);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = v2 + *(int *)(type metadata accessor for TransparencyLogProofs() + 20);
  sub_24A2A6B40();
  uint64_t v4 = sub_24A2A6BC0();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 0, 1, v4);
  uint64_t v5 = *(void *)(v0 + 16);
  if (v1 == 1)
  {
    type metadata accessor for ATLogProofs(0);
    sub_24A232260();
    sub_24A2A7020();
  }
  else
  {
    sub_24A2A6E00();
    uint64_t v6 = type metadata accessor for ATLogProofs(0);
    uint64_t v7 = v5 + *(int *)(v6 + 20);
    uint64_t v8 = type metadata accessor for LogEntry(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
    uint64_t v9 = v5 + *(int *)(v6 + 24);
    uint64_t v10 = type metadata accessor for LogConsistency(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  }
  uint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
  return v11();
}

uint64_t NopTransparencyLog.verifyExpiringInclusion(of:proofs:)(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return MEMORY[0x270FA2498](sub_24A231EAC, 0, 0);
}

uint64_t sub_24A231EAC()
{
  sub_24A2A7F90();
  sub_24A2A7F90();
  sub_24A2A6B80();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_24A231F54(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(unsigned char *)(v2 + 24) = *v1;
  return MEMORY[0x270FA2498](sub_24A231CD4, 0, 0);
}

uint64_t sub_24A231F7C(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return MEMORY[0x270FA2498](sub_24A231EAC, 0, 0);
}

uint64_t sub_24A231F9C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for LogConsistency(0);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for LogEntry(0);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v9 = 0;
  v9[8] = 1;
  *((void *)v9 + 2) = MEMORY[0x263F8EE78];
  *(_OWORD *)(v9 + 24) = xmmword_24A2A8A80;
  *((void *)v9 + 5) = 0;
  *((void *)v9 + 6) = 0;
  v9[56] = 1;
  sub_24A2A6E00();
  uint64_t v10 = &v9[*(int *)(v6 + 40)];
  uint64_t v11 = type metadata accessor for SignedObject(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
  uint64_t v12 = type metadata accessor for ATLogProofs(0);
  uint64_t v13 = a1 + *(int *)(v12 + 20);
  sub_24A1B2D10(v13, &qword_26B174940);
  sub_24A23245C((uint64_t)v9, v13, type metadata accessor for LogEntry);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56))(v13, 0, 1, v6);
  sub_24A2A6E00();
  uint64_t v14 = *(int *)(v2 + 20);
  if (qword_26B174588 != -1) {
    swift_once();
  }
  *(void *)&v5[v14] = qword_26B174580;
  uint64_t v15 = a1 + *(int *)(v12 + 24);
  swift_retain();
  sub_24A1B2D10(v15, &qword_26B1745E0);
  sub_24A23245C((uint64_t)v5, v15, type metadata accessor for LogConsistency);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v3 + 56))(v15, 0, 1, v2);
}

unint64_t sub_24A232260()
{
  unint64_t result = qword_26B1742B8;
  if (!qword_26B1742B8)
  {
    type metadata accessor for ATLogProofs(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B1742B8);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for NopTransparencyLog(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for NopTransparencyLog(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24A232424);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NopTransparencyLog()
{
  return &type metadata for NopTransparencyLog;
}

uint64_t sub_24A23245C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_24A2324C8()
{
  return swift_initClassMetadata2();
}

uint64_t sub_24A232514()
{
  uint64_t v0 = swift_allocObject();
  sub_24A232554();
  return v0;
}

uint64_t sub_24A232554()
{
  swift_defaultActor_initialize();
  *(void *)(v0 + 112) = sub_24A1BA5A4();
  *(void *)(v0 + 120) = v1;
  return v0;
}

uint64_t sub_24A2325D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = (void *)*v2;
  swift_beginAccess();
  uint64_t v6 = v2[14];
  uint64_t v7 = v5[10];
  uint64_t v8 = v5[11];
  uint64_t v9 = v5[12];
  swift_bridgeObjectRetain();
  sub_24A1BA650(a1, v6, v7, v8, v9, a2);
  return swift_bridgeObjectRelease();
}

uint64_t sub_24A2326A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_beginAccess();
  uint64_t v6 = (void *)type metadata accessor for TemporalCache();
  LOBYTE(a3) = sub_24A1BA9FC(a1, a2, a3, v6);
  swift_endAccess();
  return a3 & 1;
}

uint64_t sub_24A232768()
{
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();

  return MEMORY[0x270FA2418](v0);
}

uint64_t type metadata accessor for AsyncTemporalCache()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_24A2327B8()
{
  return v0;
}

uint64_t sub_24A2327C4()
{
  return sub_24A2327B8();
}

uint64_t sub_24A2327E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[19] = a6;
  v7[20] = a7;
  v7[17] = a4;
  v7[18] = a5;
  v7[15] = a2;
  v7[16] = a3;
  v7[14] = a1;
  type metadata accessor for AttestationBundle(0);
  v7[21] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749E0);
  v7[22] = swift_task_alloc();
  uint64_t v8 = sub_24A2A6DC0();
  v7[23] = v8;
  char v7[24] = *(void *)(v8 - 8);
  v7[25] = swift_task_alloc();
  uint64_t v9 = sub_24A2A71B0();
  v7[26] = v9;
  v7[27] = *(void *)(v9 - 8);
  v7[28] = swift_task_alloc();
  uint64_t v10 = sub_24A2A7160();
  v7[29] = v10;
  v7[30] = *(void *)(v10 - 8);
  v7[31] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_24A2329EC, 0, 0);
}

uint64_t sub_24A2329EC()
{
  v0[10] = type metadata accessor for EnsembleValidator();
  __swift_instantiateConcreteTypeFromMangledName(&qword_269779638);
  sub_24A2A7870();
  sub_24A2A7150();
  v0[11] = sub_24A1BFAC0(MEMORY[0x263F8EE78]);
  uint64_t v1 = dword_269779640;
  int v2 = (void *)swift_task_alloc();
  v0[32] = v2;
  *int v2 = v0;
  v2[1] = sub_24A232B38;
  uint64_t v3 = v0[17];
  return ((uint64_t (*)(uint64_t, uint64_t))((char *)&dword_269779640 + v1))(v3, (uint64_t)(v0 + 11));
}

uint64_t sub_24A232B38()
{
  *(void *)(*(void *)v1 + 264) = v0;
  swift_task_dealloc();
  if (v0) {
    int v2 = sub_24A23394C;
  }
  else {
    int v2 = sub_24A232C78;
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

uint64_t sub_24A232C78()
{
  uint64_t v98 = v0;
  v97[1] = *(unsigned char **)MEMORY[0x263EF8340];
  uint64_t v1 = v0[11];
  if (*(void *)(v1 + 16)
    && (unint64_t v2 = sub_24A1BE7EC((uint64_t)&type metadata for SEPAttestationPolicy, (uint64_t)&protocol witness table for SEPAttestationPolicy, 0xD000000000000014, 0x800000024A2B2860), (v3 & 1) != 0)&& (sub_24A1C9680(*(void *)(v1 + 56) + 32 * v2, (uint64_t)(v0 + 2)), __swift_instantiateConcreteTypeFromMangledName(&qword_26B174BB8), (swift_dynamicCast() & 1) != 0))
  {
    uint64_t v5 = v0[6];
    unint64_t v4 = v0[7];
    uint64_t v7 = v0[8];
    unint64_t v6 = v0[9];
  }
  else
  {
    uint64_t v8 = (uint64_t *)v0[17];
    uint64_t v5 = *v8;
    unint64_t v4 = v8[1];
    uint64_t v9 = *MEMORY[0x263F276F8];
    sub_24A1A52B0(*v8, v4);
    *(void *)&long long v94 = sub_24A1B94D4(v9);
    *((void *)&v94 + 1) = v10;
    sub_24A1CF5C4(&v94, 0);
    long long v93 = v94;
    sub_24A1A52B0(v5, v4);
    LODWORD(v9) = sub_24A1CF86C((uint64_t *)&v93, v5, v4);
    sub_24A1A5384(v5, v4);
    if (v9)
    {
      sub_24A1CFC44();
      uint64_t v11 = (void *)swift_allocError();
      unsigned char *v12 = 0;
      swift_willThrow();
      sub_24A1A5384(v5, v4);
      unint64_t v14 = *((void *)&v93 + 1);
      uint64_t v13 = v93;
LABEL_15:
      sub_24A1A5384(v13, v14);
      goto LABEL_27;
    }
    unint64_t v6 = *((void *)&v93 + 1);
    uint64_t v7 = v93;
  }
  unint64_t v15 = v0[19];
  if (v15 >> 60 != 15)
  {
    uint64_t v16 = v0[18];
    v97[0] = 0;
    *(void *)&long long v93 = 0;
    sub_24A1B8018(v16, v15);
    sub_24A1A52B0(v5, v4);
    sub_24A1A52B0(v7, v6);
    sub_24A1EED1C(v7, v6, v97, (uint64_t *)&v93, (uint64_t *)&v94);
    sub_24A1A5384(v5, v4);
    uint64_t v89 = v7;
    unint64_t v91 = v6;
    sub_24A1A5384(v7, v6);
    long long v17 = v94;
    uint64_t v19 = v0[18];
    unint64_t v18 = v0[19];
    if (*((void *)&v94 + 1) >> 60 == 15)
    {
      sub_24A1A52B0(v19, v18);
      sub_24A1B7B78(v17, *((unint64_t *)&v17 + 1));
      sub_24A1B7B78(v19, v18);
LABEL_16:
      uint64_t v23 = v0[18];
      unint64_t v24 = v0[19];
      type metadata accessor for CloudAttestationError(0);
      sub_24A244B84((unint64_t *)&unk_269778BC8, (void (*)(uint64_t))type metadata accessor for CloudAttestationError);
      uint64_t v11 = (void *)swift_allocError();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      sub_24A1A5384(v5, v4);
      sub_24A1A5384(v89, v91);
      sub_24A1B7B78(v23, v24);
      goto LABEL_27;
    }
    sub_24A1B8018(v19, v18);
    sub_24A1B8018(v17, *((unint64_t *)&v17 + 1));
    char v20 = sub_24A1B7D80(v17, *((unint64_t *)&v17 + 1), v19, v18);
    sub_24A1B7B78(v19, v18);
    sub_24A1B7B78(v17, *((unint64_t *)&v17 + 1));
    sub_24A1B7B78(v17, *((unint64_t *)&v17 + 1));
    if ((v20 & 1) == 0) {
      goto LABEL_16;
    }
    sub_24A1B7B78(v0[18], v0[19]);
    uint64_t v7 = v89;
    unint64_t v6 = v91;
  }
  *(void *)&long long v94 = v5;
  *((void *)&v94 + 1) = v4;
  uint64_t v95 = v7;
  unint64_t v96 = v6;
  SEP.Attestation.publicKeyData.getter((uint64_t)&v93);
  unint64_t v21 = *((void *)&v93 + 1);
  if ((~*((void *)&v93 + 1) & 0x3000000000000000) == 0)
  {
    type metadata accessor for CloudAttestationError(0);
    sub_24A244B84((unint64_t *)&unk_269778BC8, (void (*)(uint64_t))type metadata accessor for CloudAttestationError);
    uint64_t v11 = (void *)swift_allocError();
    void *v22 = 0xD000000000000017;
    v22[1] = 0x800000024A2B2880;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    sub_24A1A5384(v5, v4);
    uint64_t v13 = v7;
    unint64_t v14 = v6;
    goto LABEL_15;
  }
  uint64_t v25 = v93;
  sub_24A1CFC98(v93, *((uint64_t *)&v93 + 1));
  sub_24A1CFCAC(v25, v21);
  uint64_t v26 = sub_24A2A7140();
  os_log_type_t type = sub_24A2A7B40();
  uint64_t v90 = v7;
  unint64_t v92 = v6;
  uint64_t v83 = v25;
  uint64_t v84 = v21;
  if (os_log_type_enabled(v26, type))
  {
    os_log_t loga = v26;
    uint64_t v27 = v0[28];
    uint64_t v78 = v0[27];
    uint64_t v28 = v0[26];
    unint64_t v29 = (uint8_t *)swift_slowAlloc();
    uint64_t v81 = swift_slowAlloc();
    *(void *)&long long v94 = v81;
    buf = v29;
    *(_DWORD *)unint64_t v29 = 136315138;
    sub_24A1CEBC4(v25, v21, v27);
    sub_24A244B84(&qword_26B1749F8, MEMORY[0x263F045C0]);
    uint64_t v30 = sub_24A2A7E30();
    unint64_t v32 = v31;
    (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v27, v28);
    v0[13] = sub_24A1C52A8(v30, v32, (uint64_t *)&v94);
    sub_24A2A7B70();
    swift_bridgeObjectRelease();
    sub_24A1CFCB4(v25, v21);
    sub_24A1CFCB4(v25, v21);
    _os_log_impl(&dword_24A19F000, loga, type, "AttestationBundle passed validation for public key: %s", buf, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C5C00A0](v81, -1, -1);
    MEMORY[0x24C5C00A0](buf, -1, -1);
  }
  else
  {

    sub_24A1CFCB4(v25, v21);
    sub_24A1CFCB4(v25, v21);
  }
  uint64_t v33 = v0[23];
  uint64_t v34 = v0[24];
  uint64_t v35 = v0[22];
  uint64_t v36 = v0[17];
  os_log_t log = (os_log_t)sub_24A2A6BC0();
  Class isa = log[-1].isa;
  uint64_t typea = swift_task_alloc();
  uint64_t v38 = type metadata accessor for Proto_AttestationBundle(0);
  sub_24A1B2CAC(v36 + *(int *)(v38 + 36), v35, &qword_26B1749E0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 + 48))(v35, 1, v33) == 1)
  {
    uint64_t v39 = v0[22];
    sub_24A2A6DB0();
    sub_24A1B2D10(v39, &qword_26B1749E0);
  }
  else
  {
    (*(void (**)(void, void, void))(v0[24] + 32))(v0[25], v0[22], v0[23]);
  }
  uint64_t v41 = v0[24];
  uint64_t v40 = v0[25];
  uint64_t v42 = v0[23];
  sub_24A2A6D90();
  (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v40, v42);
  uint64_t v43 = swift_task_alloc();
  sub_24A2A6BB0();
  LOBYTE(v42) = sub_24A2A6B70();
  uint64_t v44 = (void (*)(uint64_t, os_log_t))*((void *)isa + 1);
  v44(v43, log);
  swift_task_dealloc();
  uint64_t v82 = v44;
  if (v42)
  {
    uint64_t v45 = v0[21];
    uint64_t v46 = v0[17];
    uint64_t v48 = (uint64_t *)v0[14];
    uint64_t v47 = v0[15];
    *uint64_t v48 = v83;
    v48[1] = v84;
    (*((void (**)(uint64_t, uint64_t, os_log_t))isa + 2))(v47, typea, log);
    sub_24A244B1C(v46, v45, type metadata accessor for AttestationBundle);
    v97[0] = 0;
    *(void *)&long long v93 = 0;
    sub_24A1A52B0(v5, v4);
    sub_24A1A52B0(v90, v92);
    sub_24A1CFC98(v83, v84);
    sub_24A1EDD20(v90, v92, v97, (uint64_t *)&v93, (uint64_t)&v94);
    sub_24A1A5384(v5, v4);
    sub_24A1A5384(v90, v92);
    if (v95 == 2)
    {
      sub_24A1A5384(v5, v4);
      sub_24A1A5384(v90, v92);
      sub_24A1CFCB4(v83, v84);
      uint64_t v49 = 0;
      uint64_t v80 = 0;
    }
    else
    {
      long long v64 = v94;
      __swift_instantiateConcreteTypeFromMangledName(&qword_26B174BA0);
      uint64_t v65 = swift_allocObject();
      *(_OWORD *)(v65 + 16) = xmmword_24A2A8AA0;
      uint64_t v66 = MEMORY[0x263F8E960];
      *(void *)(v65 + 56) = MEMORY[0x263F8E8F8];
      *(void *)(v65 + 64) = v66;
      uint64_t v67 = MEMORY[0x263F8E970];
      *(_DWORD *)(v65 + 32) = v64;
      uint64_t v68 = MEMORY[0x263F8E9C0];
      *(void *)(v65 + 96) = v67;
      *(void *)(v65 + 104) = v68;
      *(void *)(v65 + 72) = *((void *)&v64 + 1);
      uint64_t v49 = sub_24A2A7840();
      uint64_t v80 = v69;
      sub_24A1CFCB4(v83, v84);
      sub_24A1A5384(v5, v4);
      sub_24A1A5384(v90, v92);
    }
    uint64_t v70 = v0[30];
    uint64_t v71 = v0[31];
    uint64_t v72 = v0[29];
    uint64_t v73 = v0[21];
    uint64_t v74 = v0[16];
    v44(typea, log);
    (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v71, v72);
    uint64_t v75 = (int *)type metadata accessor for Validated.AttestationBundle(0);
    *(void *)(v74 + v75[7]) = 0;
    sub_24A240F48(v73, v74, type metadata accessor for AttestationBundle);
    uint64_t v76 = (uint64_t *)(v74 + v75[5]);
    *uint64_t v76 = v49;
    v76[1] = v80;
    uint64_t v77 = (void *)(v74 + v75[6]);
    *uint64_t v77 = 0;
    v77[1] = 0;
    swift_task_dealloc();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v62 = (uint64_t (*)(void))v0[1];
    goto LABEL_31;
  }
  type metadata accessor for CloudAttestationError(0);
  sub_24A244B84((unint64_t *)&unk_269778BC8, (void (*)(uint64_t))type metadata accessor for CloudAttestationError);
  uint64_t v11 = (void *)swift_allocError();
  (*((void (**)(uint64_t, uint64_t, os_log_t))isa + 2))(v50, typea, log);
  swift_storeEnumTagMultiPayload();
  swift_willThrow();
  sub_24A1CFCB4(v83, v84);
  sub_24A1A5384(v5, v4);
  sub_24A1A5384(v90, v92);
  v82(typea, log);
  swift_task_dealloc();
LABEL_27:
  swift_bridgeObjectRelease();
  id v51 = v11;
  id v52 = v11;
  unint64_t v53 = sub_24A2A7140();
  os_log_type_t v54 = sub_24A2A7B30();
  if (os_log_type_enabled(v53, v54))
  {
    unint64_t v55 = (uint8_t *)swift_slowAlloc();
    uint64_t v56 = (void *)swift_slowAlloc();
    *(_DWORD *)unint64_t v55 = 138412290;
    id v57 = v11;
    uint64_t v58 = _swift_stdlib_bridgeErrorToNSError();
    v0[12] = v58;
    sub_24A2A7B70();
    *uint64_t v56 = v58;

    _os_log_impl(&dword_24A19F000, v53, v54, "AttestationBundle validation failed: %@", v55, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&qword_269778BB8);
    swift_arrayDestroy();
    MEMORY[0x24C5C00A0](v56, -1, -1);
    MEMORY[0x24C5C00A0](v55, -1, -1);
  }
  else
  {
  }
  uint64_t v60 = v0[30];
  uint64_t v59 = v0[31];
  uint64_t v61 = v0[29];
  swift_willThrow();
  (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v59, v61);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v62 = (uint64_t (*)(void))v0[1];
LABEL_31:
  return v62();
}

uint64_t sub_24A23394C()
{
  uint64_t v1 = (void *)v0[33];
  swift_bridgeObjectRelease();
  id v2 = v1;
  id v3 = v1;
  unint64_t v4 = sub_24A2A7140();
  os_log_type_t v5 = sub_24A2A7B30();
  if (os_log_type_enabled(v4, v5))
  {
    unint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = (void *)swift_slowAlloc();
    *(_DWORD *)unint64_t v6 = 138412290;
    id v8 = v1;
    uint64_t v9 = _swift_stdlib_bridgeErrorToNSError();
    v0[12] = v9;
    sub_24A2A7B70();
    *uint64_t v7 = v9;

    _os_log_impl(&dword_24A19F000, v4, v5, "AttestationBundle validation failed: %@", v6, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&qword_269778BB8);
    swift_arrayDestroy();
    MEMORY[0x24C5C00A0](v7, -1, -1);
    MEMORY[0x24C5C00A0](v6, -1, -1);
  }
  else
  {
  }
  uint64_t v11 = v0[30];
  uint64_t v10 = v0[31];
  uint64_t v12 = v0[29];
  swift_willThrow();
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v13 = (uint64_t (*)(void))v0[1];
  return v13();
}

uint64_t sub_24A233B84()
{
  uint64_t v0 = sub_24A2A6C00();
  __swift_allocate_value_buffer(v0, qword_269779560);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_269779560);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174238);
  MEMORY[0x270FA5388](v2 - 8);
  unint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24A2A6BD0();
  uint64_t v5 = *(void *)(v0 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48))(v4, 1, v0);
  if (result != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(v1, v4, v0);
  }
  __break(1u);
  return result;
}

uint64_t static EnsembleChannelSecurity.sealedHashSlotUUID.getter@<X0>(uint64_t a1@<X8>)
{
  if (qword_269778530 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_24A2A6C00();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_269779560);
  unint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, v3, v2);
}

uint64_t static EnsembleChannelSecurity.sealedHashSlotSalt.getter()
{
  return 1953259859;
}

uint64_t sub_24A233D6C(uint64_t a1)
{
  return sub_24A239730(a1, qword_26977A730);
}

uint64_t EnsembleChannelSecurity.Leader.symmetricKey.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for EnsembleChannelSecurity.Leader(0) + 28);
  uint64_t v4 = sub_24A2A7220();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t type metadata accessor for EnsembleChannelSecurity.Leader(uint64_t a1)
{
  return sub_24A1AE704(a1, (uint64_t *)&unk_2697795F0);
}

uint64_t EnsembleChannelSecurity.Leader.maxChassisCount.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for EnsembleChannelSecurity.Leader(0) + 40));
}

uint64_t EnsembleChannelSecurity.Leader.maxChassisCount.setter(uint64_t a1)
{
  uint64_t result = type metadata accessor for EnsembleChannelSecurity.Leader(0);
  *(void *)(v1 + *(int *)(result + 40)) = a1;
  return result;
}

uint64_t (*EnsembleChannelSecurity.Leader.maxChassisCount.modify())()
{
  return nullsub_1;
}

uint64_t EnsembleChannelSecurity.Leader.maxNodesPerChassis.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for EnsembleChannelSecurity.Leader(0) + 44));
}

uint64_t EnsembleChannelSecurity.Leader.maxNodesPerChassis.setter(uint64_t a1)
{
  uint64_t result = type metadata accessor for EnsembleChannelSecurity.Leader(0);
  *(void *)(v1 + *(int *)(result + 44)) = a1;
  return result;
}

uint64_t (*EnsembleChannelSecurity.Leader.maxNodesPerChassis.modify())()
{
  return nullsub_1;
}

uint64_t EnsembleChannelSecurity.Leader.init<A>(udid:followerUDIDs:keySize:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v56 = a3;
  uint64_t v13 = (int *)type metadata accessor for EnsembleChannelSecurity.Leader(0);
  uint64_t v14 = v13[8];
  *(void *)(a7 + v14) = 0;
  uint64_t v15 = v13[9];
  unint64_t v16 = sub_24A1BC43C(MEMORY[0x263F8EE78]);
  *(void *)(a7 + v15) = v16;
  *(void *)(a7 + v13[10]) = 2;
  *(void *)(a7 + v13[11]) = 4;
  if (MEMORY[0x263F16C40]) {
    BOOL v17 = MEMORY[0x263F16C30] == 0;
  }
  else {
    BOOL v17 = 1;
  }
  if (v17 || MEMORY[0x263F16C48] == 0 || MEMORY[0x263F16C38] == 0)
  {
    swift_bridgeObjectRelease();
    sub_24A234470();
    swift_allocError();
    *(_OWORD *)uint64_t v34 = 0u;
    *(_OWORD *)(v34 + 16) = 0u;
    *(unsigned char *)(v34 + 32) = 0x80;
    swift_willThrow();
    uint64_t v35 = sub_24A2A7260();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v35 - 8) + 8))(a4, v35);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(a5 - 8) + 8))(v56, a5);
  }
  else
  {
    uint64_t v47 = a1;
    uint64_t v48 = a6;
    uint64_t v50 = a2;
    uint64_t v53 = v14;
    uint64_t v54 = a4;
    id v52 = (uint64_t *)&v44;
    uint64_t v20 = MEMORY[0x270FA5388](v16);
    long long v22 = (char *)&v44 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
    id v51 = (uint64_t *)&v44;
    uint64_t v23 = a5;
    uint64_t v24 = *(void *)(a5 - 8);
    MEMORY[0x270FA5388](v20);
    uint64_t v26 = (char *)&v44 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v27 = v56;
    (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v26, v56, a5);
    uint64_t v28 = type metadata accessor for EnsembleHPKE.Leader(0);
    uint64_t v49 = (uint64_t *)&v44;
    MEMORY[0x270FA5388](v28 - 8);
    uint64_t v30 = (char *)&v44 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v31 = v55;
    EnsembleHPKE.Leader.init()((uint64_t)v30);
    if (!v31)
    {
      uint64_t v55 = v15;
      uint64_t v36 = sub_24A2A7260();
      uint64_t v46 = (uint64_t *)&v44;
      long long v37 = v22;
      uint64_t v38 = *(void *)(v36 - 8);
      MEMORY[0x270FA5388](v36);
      uint64_t v40 = (char *)&v44 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
      uint64_t v41 = *(void (**)(char *, uint64_t))(v38 + 16);
      uint64_t v45 = v42;
      v41(v40, v54);
      uint64_t v44 = v37;
      sub_24A2344C4(v47, v50, (uint64_t)v26, (uint64_t)v30, (uint64_t)v40, v23, v48, v37);
      (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v54, v45);
      (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v56, v23);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return sub_24A240F48((uint64_t)v44, a7, type metadata accessor for EnsembleChannelSecurity.Leader);
    }
    swift_bridgeObjectRelease();
    uint64_t v32 = sub_24A2A7260();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v32 - 8) + 8))(v54, v32);
    uint64_t v33 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
    v33(v27, v23);
    v33((uint64_t)v26, v23);
  }
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

unint64_t sub_24A234470()
{
  unint64_t result = qword_269779578;
  if (!qword_269779578)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269779578);
  }
  return result;
}

uint64_t sub_24A2344C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  uint64_t v42 = a7;
  uint64_t v39 = a4;
  uint64_t v40 = a5;
  uint64_t v37 = a1;
  uint64_t v38 = a2;
  uint64_t v11 = sub_24A2A7260();
  uint64_t v36 = *(void *)(v11 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void *)(a6 - 8);
  MEMORY[0x270FA5388](v12);
  BOOL v17 = (char *)v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v18 = (int *)type metadata accessor for EnsembleChannelSecurity.Leader(0);
  uint64_t v41 = v18[8];
  *(void *)((char *)a8 + v41) = 0;
  uint64_t v19 = v18[9];
  *(void *)((char *)a8 + v19) = sub_24A1BC43C(MEMORY[0x263F8EE78]);
  *(void *)((char *)a8 + v18[10]) = 2;
  *(void *)((char *)a8 + v18[11]) = 4;
  uint64_t v20 = v38;
  *a8 = v37;
  a8[1] = v20;
  uint64_t v37 = v15;
  uint64_t v38 = a3;
  uint64_t v21 = v15;
  uint64_t v22 = v11;
  uint64_t v23 = v36;
  uint64_t v24 = a3;
  uint64_t v25 = a6;
  uint64_t v26 = v39;
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v17, v24, v25);
  uint64_t v27 = v40;
  a8[2] = sub_24A2A7AE0();
  sub_24A244B1C(v26, (uint64_t)a8 + v18[6], type metadata accessor for EnsembleHPKE.Leader);
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v14, v27, v22);
  sub_24A2A7200();
  uint64_t v28 = (void *)(v26 + *(int *)(type metadata accessor for EnsembleHPKE.Leader(0) + 24));
  uint64_t v29 = v28[6];
  uint64_t v30 = v28[7];
  uint64_t v31 = __swift_project_boxed_opaque_existential_1(v28 + 3, v29);
  uint64_t v32 = sub_24A234810((uint64_t)v31, v29, v30);
  *(void *)((char *)a8 + v41) = v32;
  if (v32 && (uint64_t v33 = v35[1], sub_24A234E58(), v33))
  {
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v27, v22);
    sub_24A240EC8(v26, type metadata accessor for EnsembleHPKE.Leader);
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v38, v25);
    return sub_24A240EC8((uint64_t)a8, type metadata accessor for EnsembleChannelSecurity.Leader);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v27, v22);
    sub_24A240EC8(v26, type metadata accessor for EnsembleHPKE.Leader);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v37 + 8))(v38, v25);
  }
}

void *sub_24A234810(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 24))(a2, a3);
  if (qword_26B1747C0 != -1) {
    swift_once();
  }
  uint64_t v4 = sub_24A2A6C00();
  uint64_t v5 = __swift_project_value_buffer(v4, (uint64_t)qword_26B176970);
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v5);
  id v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v6 + 16))(v8);
  if (*(void *)(v3 + 16) && (unint64_t v9 = sub_24A1BE878((uint64_t)v8), (v10 & 1) != 0))
  {
    uint64_t v11 = *(void *)(*(void *)(v3 + 56) + 8 * v9);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v4);
    uint64_t v12 = *(void *)(v11 + 16);
    if (v12)
    {
      swift_bridgeObjectRetain();
      uint64_t v13 = (unint64_t *)(v11 + 56);
      uint64_t v14 = (unint64_t *)(v11 + 56);
      while (1)
      {
        unint64_t v16 = *v14;
        v14 += 7;
        unint64_t v15 = v16;
        if (v16 >> 60 != 15)
        {
          uint64_t v17 = *(v13 - 1);
          sub_24A1A52B0(v17, v15);
          SecureConfig.init(from:)(v17, v15, (uint64_t)&v36);
          uint64_t v18 = v38;
          if (v38)
          {
            uint64_t v20 = v36;
            unint64_t v19 = v37;
            uint64_t v22 = v39;
            unint64_t v21 = v40;
            if (sub_24A2394D8(&v36))
            {
              swift_bridgeObjectRelease();
              uint64_t v36 = v20;
              unint64_t v37 = v19;
              uint64_t v38 = v18;
              uint64_t v39 = v22;
              unint64_t v40 = v21;
              sub_24A1A52B0(v20, v19);
              swift_bridgeObjectRetain();
              sub_24A1A52B0(v22, v21);
              DarwinInit.init(from:)(&v36, (uint64_t)&v34);
              uint64_t v36 = v34;
              LOBYTE(v37) = v35;
              uint64_t v27 = DarwinInit.ensembleCertificateFingerprints.getter();
              swift_bridgeObjectRelease();
              sub_24A20D460(v20, v19, v18, v22, v21);
              swift_bridgeObjectRelease();
              return v27;
            }
            sub_24A20D460(v20, v19, v18, v22, v21);
          }
        }
        uint64_t v13 = v14;
        if (!--v12)
        {
          swift_bridgeObjectRelease();
          break;
        }
      }
    }
    if (qword_269778538 != -1) {
      swift_once();
    }
    uint64_t v29 = sub_24A2A7160();
    __swift_project_value_buffer(v29, (uint64_t)qword_26977A730);
    uint64_t v30 = sub_24A2A7140();
    os_log_type_t v31 = sub_24A2A7B30();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v32 = 0;
      _os_log_impl(&dword_24A19F000, v30, v31, "No darwin-init entry in SecureConfigDB", v32, 2u);
      MEMORY[0x24C5C00A0](v32, -1, -1);
    }

    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v4);
    if (qword_269778538 != -1) {
      swift_once();
    }
    uint64_t v23 = sub_24A2A7160();
    __swift_project_value_buffer(v23, (uint64_t)qword_26977A730);
    uint64_t v24 = sub_24A2A7140();
    os_log_type_t v25 = sub_24A2A7B30();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v26 = 0;
      _os_log_impl(&dword_24A19F000, v24, v25, "No SecureConfig entries in SecureConfigDB", v26, 2u);
      MEMORY[0x24C5C00A0](v26, -1, -1);
    }
  }
  return 0;
}

void *sub_24A234E58()
{
  uint64_t v2 = v0 + *(int *)(type metadata accessor for EnsembleChannelSecurity.Leader(0) + 24);
  uint64_t v3 = (void *)(v2 + *(int *)(type metadata accessor for EnsembleHPKE.Leader(0) + 24));
  uint64_t v4 = v3[6];
  uint64_t v5 = v3[7];
  __swift_project_boxed_opaque_existential_1(v3 + 3, v4);
  unint64_t result = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v5 + 16))(v4, v5);
  if (!v1)
  {
    if (!result[2])
    {
      swift_bridgeObjectRelease();
      sub_24A234470();
      swift_allocError();
      *(_OWORD *)uint64_t v21 = 0u;
      *(_OWORD *)(v21 + 16) = 0u;
      *(unsigned char *)(v21 + 32) = 64;
      return (void *)swift_willThrow();
    }
    uint64_t v8 = result[4];
    unint64_t v7 = result[5];
    sub_24A1A52B0(v8, v7);
    swift_bridgeObjectRelease();
    sub_24A1A52B0(v8, v7);
    sub_24A1A52B0(v8, v7);
    uint64_t v9 = sub_24A1B52A8(v8, v7);
    unint64_t v11 = v10;
    CFDataRef v12 = (const __CFData *)sub_24A2A6AA0();
    sub_24A1A5384(v9, v11);
    uint64_t v13 = SecCertificateCreateWithData(0, v12);

    if (!v13)
    {
      type metadata accessor for ProvisioningCertificate.Error();
      sub_24A244B84((unint64_t *)&qword_2697795A0, (void (*)(uint64_t))type metadata accessor for ProvisioningCertificate.Error);
      swift_allocError();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      sub_24A1A5384(v8, v7);
      return (void *)sub_24A1A5384(v8, v7);
    }
    ProvisioningCertificate.init(from:)(v13, &v33);
    sub_24A1A5384(v8, v7);
    unint64_t v15 = v33;
    uint64_t v14 = v34;
    uint64_t v16 = v36;
    unint64_t v17 = v38;
    if (v36)
    {
      if (!v38)
      {
        sub_24A234470();
        swift_allocError();
        *(_OWORD *)uint64_t v23 = xmmword_24A2ADC50;
        *(void *)(v23 + 16) = 0;
        *(void *)(v23 + 24) = 0;
        *(unsigned char *)(v23 + 32) = 64;
        swift_willThrow();
        goto LABEL_14;
      }
      uint64_t v18 = v35;
      uint64_t v19 = v37;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      SEP.Identity.init(string:)(v19, v17, &v33);
      if (v35 == 2)
      {
        swift_bridgeObjectRelease();
        sub_24A234470();
        swift_allocError();
        *(_OWORD *)uint64_t v20 = xmmword_24A2ADC40;
        *(void *)(v20 + 16) = 0;
        *(void *)(v20 + 24) = 0;
        *(unsigned char *)(v20 + 32) = 64;
        swift_willThrow();
LABEL_14:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        return (void *)sub_24A1A5384(v8, v7);
      }
      uint64_t v32 = v34;
      uint64_t v39 = v18;
      int v24 = (int)v33;
      __swift_instantiateConcreteTypeFromMangledName(&qword_26B174BA0);
      uint64_t v25 = swift_allocObject();
      *(_OWORD *)(v25 + 16) = xmmword_24A2A8AA0;
      uint64_t v26 = MEMORY[0x263F8E960];
      *(void *)(v25 + 56) = MEMORY[0x263F8E8F8];
      *(void *)(v25 + 64) = v26;
      uint64_t v27 = MEMORY[0x263F8E970];
      *(_DWORD *)(v25 + 32) = v24;
      uint64_t v28 = MEMORY[0x263F8E9C0];
      *(void *)(v25 + 96) = v27;
      *(void *)(v25 + 104) = v28;
      *(void *)(v25 + 72) = v32;
      uint64_t v29 = sub_24A2A7840();
      uint64_t v30 = v39;
      uint64_t v39 = v31;
      sub_24A239114(v30, v16, v29, v31);
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease_n();
    }
    else
    {
      sub_24A234470();
      swift_allocError();
      *(_OWORD *)uint64_t v22 = xmmword_24A2ADC60;
      *(void *)(v22 + 16) = 0;
      *(void *)(v22 + 24) = 0;
      *(unsigned char *)(v22 + 32) = 64;
      swift_willThrow();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    return (void *)sub_24A1A5384(v8, v7);
  }
  return result;
}

uint64_t EnsembleChannelSecurity.Leader.attest()(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return MEMORY[0x270FA2498](sub_24A2352B4, 0, 0);
}

uint64_t sub_24A2352B4()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = (uint64_t *)(v1 + *(int *)(type metadata accessor for EnsembleChannelSecurity.Leader(0) + 24));
  type metadata accessor for EnsembleHPKE.Leader(0);
  uint64_t v3 = *v2;
  uint64_t v4 = sub_24A2A6BC0();
  v0[4] = v4;
  v0[5] = *(void *)(v4 - 8);
  uint64_t v5 = swift_task_alloc();
  v0[6] = v5;
  sub_24A2A7F90();
  sub_24A2A6B80();
  uint64_t v6 = (void *)swift_task_alloc();
  v0[7] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_24A23540C;
  uint64_t v7 = v0[2];
  return NodeAttestor.attest(key:expiration:nonce:)(v7, v3, v5, 0, 0xF000000000000000);
}

uint64_t sub_24A23540C()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = sub_24A23565C;
  }
  else
  {
    (*(void (**)(void, void))(v2[5] + 8))(v2[6], v2[4]);
    swift_task_dealloc();
    uint64_t v3 = sub_24A235544;
  }
  return MEMORY[0x270FA2498](v3, 0, 0);
}

uint64_t sub_24A235544()
{
  if (qword_269778538 != -1) {
    swift_once();
  }
  uint64_t v1 = sub_24A2A7160();
  __swift_project_value_buffer(v1, (uint64_t)qword_26977A730);
  uint64_t v2 = sub_24A2A7140();
  os_log_type_t v3 = sub_24A2A7B40();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_24A19F000, v2, v3, "Leader attestation generated", v4, 2u);
    MEMORY[0x24C5C00A0](v4, -1, -1);
  }

  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_24A23565C()
{
  (*(void (**)(void, void))(v0[5] + 8))(v0[6], v0[4]);
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> EnsembleChannelSecurity.Leader.rekey()()
{
  uint64_t v2 = sub_24A2A7260();
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v3 = sub_24A2A7220();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for EnsembleChannelSecurity.Leader(0);
  uint64_t v8 = (id *)(v0 + *(int *)(v7 + 24));
  if (*((unsigned char *)v8 + *(int *)(type metadata accessor for EnsembleHPKE.Leader(0) + 28)) == 1)
  {
    sub_24A26A354();
    if (v1) {
      return;
    }
  }
  else
  {
    sub_24A269F80();
    if (v1) {
      return;
    }
  }
  unint64_t v10 = v9;

  *uint64_t v8 = v10;
  uint64_t v11 = v0 + *(int *)(v7 + 28);
  sub_24A2A7210();
  sub_24A2A7250();
  sub_24A2A7200();
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 40))(v11, v6, v3);
  if (qword_269778538 != -1) {
    swift_once();
  }
  uint64_t v12 = sub_24A2A7160();
  __swift_project_value_buffer(v12, (uint64_t)qword_26977A730);
  uint64_t v13 = sub_24A2A7140();
  os_log_type_t v14 = sub_24A2A7B40();
  if (os_log_type_enabled(v13, v14))
  {
    unint64_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v15 = 0;
    _os_log_impl(&dword_24A19F000, v13, v14, "Leader rekeyed", v15, 2u);
    MEMORY[0x24C5C00A0](v15, -1, -1);
  }
}

uint64_t EnsembleChannelSecurity.Leader.pair(with:authenticatedBy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[12] = a4;
  v5[13] = v4;
  v5[10] = a2;
  v5[11] = a3;
  v5[9] = a1;
  uint64_t v6 = sub_24A2A7220();
  v5[14] = v6;
  v5[15] = *(void *)(v6 - 8);
  v5[16] = swift_task_alloc();
  type metadata accessor for AttestationBundle(0);
  v5[17] = swift_task_alloc();
  type metadata accessor for Validated.AttestationBundle(0);
  v5[18] = swift_task_alloc();
  v5[19] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_269779590);
  v5[20] = swift_task_alloc();
  v5[21] = swift_task_alloc();
  uint64_t v7 = sub_24A2A72C0();
  v5[22] = v7;
  v5[23] = *(void *)(v7 - 8);
  v5[24] = swift_task_alloc();
  v5[25] = swift_task_alloc();
  v5[26] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_24A235B14, 0, 0);
}

uint64_t sub_24A235B14()
{
  unint64_t v38 = v0;
  if (qword_269778538 != -1) {
    swift_once();
  }
  uint64_t v1 = sub_24A2A7160();
  v0[27] = __swift_project_value_buffer(v1, (uint64_t)qword_26977A730);
  swift_bridgeObjectRetain_n();
  uint64_t v2 = sub_24A2A7140();
  os_log_type_t v3 = sub_24A2A7B40();
  BOOL v4 = os_log_type_enabled(v2, v3);
  unint64_t v5 = v0[11];
  if (v4)
  {
    uint64_t v6 = v0[10];
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    v37[0] = v8;
    *(_DWORD *)uint64_t v7 = 136446210;
    swift_bridgeObjectRetain();
    v0[8] = sub_24A1C52A8(v6, v5, v37);
    sub_24A2A7B70();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_24A19F000, v2, v3, "Leader pairing with %{public}s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C5C00A0](v8, -1, -1);
    MEMORY[0x24C5C00A0](v7, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  if (sub_24A237F78(v0[10], v0[11], *(void *)(v0[13] + 16)))
  {
    uint64_t v9 = v0[13];
    uint64_t v10 = v0[11];
    uint64_t v11 = type metadata accessor for EnsembleChannelSecurity.Leader(0);
    v0[28] = v11;
    uint64_t v12 = *(void *)(v9 + *(int *)(v11 + 32));
    type metadata accessor for EnsembleHPKE.Leader(0);
    uint64_t v13 = v0[10];
    if (v12)
    {
      uint64_t v14 = v0[21];
      swift_bridgeObjectRetain();
      _s16CloudAttestation17EnsembleValidatorV9policyFor4udid12fingerprintsQrSS_Say10Foundation4DataVGtF_0(v13, v10, v12, v14);
      swift_bridgeObjectRelease();
      uint64_t v36 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_269779598
                                                                                         + dword_269779598);
      unint64_t v15 = (void *)swift_task_alloc();
      v0[29] = v15;
      void *v15 = v0;
      v15[1] = sub_24A2360E4;
      uint64_t v16 = v0[25];
      uint64_t v17 = v0[21];
      uint64_t v18 = v0[19];
    }
    else
    {
      _s16CloudAttestation17EnsembleValidatorV9policyFor4udid12fingerprintsQrSS_Say10Foundation4DataVGtF_0(v0[10], v10, 0, v0[20]);
      uint64_t v36 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_269779598
                                                                                         + dword_269779598);
      uint64_t v34 = (void *)swift_task_alloc();
      v0[31] = v34;
      *uint64_t v34 = v0;
      v34[1] = sub_24A236FA0;
      uint64_t v16 = v0[24];
      uint64_t v17 = v0[20];
      uint64_t v18 = v0[18];
    }
    uint64_t v35 = v0[12];
    return v36(v16, v18, v35, 0, 0xC000000000000000, v17);
  }
  else
  {
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v19 = sub_24A2A7140();
    os_log_type_t v20 = sub_24A2A7B40();
    BOOL v21 = os_log_type_enabled(v19, v20);
    unint64_t v22 = v0[11];
    if (v21)
    {
      uint64_t v23 = v0[10];
      uint64_t v24 = swift_slowAlloc();
      uint64_t v25 = swift_slowAlloc();
      v37[0] = v25;
      *(_DWORD *)uint64_t v24 = 136446466;
      swift_bridgeObjectRetain();
      v0[4] = sub_24A1C52A8(v23, v22, v37);
      sub_24A2A7B70();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v24 + 12) = 2082;
      swift_bridgeObjectRetain();
      uint64_t v26 = sub_24A2A7AC0();
      unint64_t v28 = v27;
      swift_bridgeObjectRelease();
      v0[5] = sub_24A1C52A8(v26, v28, v37);
      sub_24A2A7B70();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_24A19F000, v19, v20, "Follower UDID %{public}s not in expected set %{public}s", (uint8_t *)v24, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x24C5C00A0](v25, -1, -1);
      MEMORY[0x24C5C00A0](v24, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }

    uint64_t v30 = v0[10];
    uint64_t v29 = v0[11];
    sub_24A234470();
    swift_allocError();
    *(void *)uint64_t v31 = v30;
    *(void *)(v31 + 8) = v29;
    *(void *)(v31 + 16) = 0;
    *(void *)(v31 + 24) = 0;
    *(unsigned char *)(v31 + 32) = 0;
    swift_bridgeObjectRetain();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v32 = (uint64_t (*)(void))v0[1];
    return v32();
  }
}

uint64_t sub_24A2360E4()
{
  *(void *)(*(void *)v1 + 240) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_24A2373E0;
  }
  else {
    uint64_t v2 = sub_24A2361F8;
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

uint64_t sub_24A2361F8()
{
  uint64_t v121 = v0;
  uint64_t v1 = v0[17];
  sub_24A244B1C(v0[19], v1, type metadata accessor for AttestationBundle);
  uint64_t v2 = *(void **)(v1 + 32);
  swift_bridgeObjectRetain();
  sub_24A240EC8(v1, type metadata accessor for Proto_AttestationBundle);
  if (!v2[2])
  {
    uint64_t v20 = v0[25];
    uint64_t v21 = v0[22];
    uint64_t v22 = v0[23];
    uint64_t v23 = v0[21];
    uint64_t v24 = v0[19];
    swift_bridgeObjectRelease();
    sub_24A234470();
    swift_allocError();
    *(_OWORD *)uint64_t v25 = 0u;
    *(_OWORD *)(v25 + 16) = 0u;
    *(unsigned char *)(v25 + 32) = 64;
    swift_willThrow();
    sub_24A240EC8(v24, type metadata accessor for Validated.AttestationBundle);
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v20, v21);
    uint64_t v26 = v23;
LABEL_10:
    sub_24A1B2D10(v26, &qword_269779590);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v31 = (uint64_t (*)(void))v0[1];
    goto LABEL_11;
  }
  uint64_t v4 = v2[4];
  unint64_t v3 = v2[5];
  sub_24A1A52B0(v4, v3);
  swift_bridgeObjectRelease();
  sub_24A1A52B0(v4, v3);
  sub_24A1A52B0(v4, v3);
  uint64_t v5 = sub_24A1B52A8(v4, v3);
  unint64_t v7 = v6;
  CFDataRef v8 = (const __CFData *)sub_24A2A6AA0();
  sub_24A1A5384(v5, v7);
  uint64_t v9 = SecCertificateCreateWithData(0, v8);

  if (!v9)
  {
    type metadata accessor for ProvisioningCertificate.Error();
    sub_24A244B84((unint64_t *)&qword_2697795A0, (void (*)(uint64_t))type metadata accessor for ProvisioningCertificate.Error);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    sub_24A1A5384(v4, v3);
    goto LABEL_9;
  }
  uint64_t v10 = v0[30];
  ProvisioningCertificate.init(from:)(v9, &v115);
  sub_24A1A5384(v4, v3);
  if (v10)
  {
LABEL_9:
    sub_24A1A5384(v4, v3);
    uint64_t v27 = v0[25];
    uint64_t v28 = v0[22];
    uint64_t v29 = v0[23];
    uint64_t v30 = v0[21];
    sub_24A240EC8(v0[19], type metadata accessor for Validated.AttestationBundle);
    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v27, v28);
    uint64_t v26 = v30;
    goto LABEL_10;
  }
  uint64_t v12 = v115;
  uint64_t v11 = v116;
  uint64_t v13 = v118;
  unint64_t v14 = v120;
  if (!v120)
  {
    uint64_t v33 = v0[23];
    uint64_t v107 = v0[22];
    uint64_t v110 = v0[25];
    uint64_t v113 = v0[21];
    uint64_t v34 = v0[19];
    sub_24A234470();
    swift_allocError();
    *(_OWORD *)uint64_t v35 = xmmword_24A2ADC50;
    *(void *)(v35 + 16) = 0;
    *(void *)(v35 + 24) = 0;
    *(unsigned char *)(v35 + 32) = 64;
    swift_willThrow();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_24A1A5384(v4, v3);
    sub_24A240EC8(v34, type metadata accessor for Validated.AttestationBundle);
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v110, v107);
    goto LABEL_20;
  }
  uint64_t v15 = v117;
  uint64_t v16 = v119;
  swift_bridgeObjectRetain();
  SEP.Identity.init(string:)(v16, v14, &v115);
  if (v117 == 2)
  {
    uint64_t v17 = v11;
    uint64_t v18 = v0[23];
    uint64_t v109 = v0[25];
    uint64_t v113 = v0[21];
    uint64_t v104 = v0[19];
    uint64_t v106 = v0[22];
    sub_24A234470();
    swift_allocError();
    *(_OWORD *)uint64_t v19 = xmmword_24A2ADC40;
    *(void *)(v19 + 16) = 0;
    *(void *)(v19 + 24) = 0;
    *(unsigned char *)(v19 + 32) = 64;
    swift_willThrow();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_24A1A5384(v4, v3);
    sub_24A240EC8(v104, type metadata accessor for Validated.AttestationBundle);
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v109, v106);
LABEL_20:
    uint64_t v26 = v113;
    goto LABEL_10;
  }
  if (!v13)
  {
    uint64_t v47 = v0[23];
    uint64_t v108 = v0[22];
    uint64_t v112 = v0[25];
    uint64_t v113 = v0[21];
    uint64_t v48 = v0[19];
    sub_24A234470();
    swift_allocError();
    *(_OWORD *)uint64_t v49 = xmmword_24A2ADC60;
    *(void *)(v49 + 16) = 0;
    *(void *)(v49 + 24) = 0;
    *(unsigned char *)(v49 + 32) = 64;
    swift_willThrow();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_24A1A5384(v4, v3);
    sub_24A240EC8(v48, type metadata accessor for Validated.AttestationBundle);
    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v112, v108);
    goto LABEL_20;
  }
  unint64_t v103 = v12;
  uint64_t v105 = v11;
  uint64_t v36 = v116;
  uint64_t v37 = v13;
  int v38 = (int)v115;
  uint64_t v40 = v0[10];
  uint64_t v39 = v0[11];
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B174BA0);
  uint64_t v41 = swift_allocObject();
  *(_OWORD *)(v41 + 16) = xmmword_24A2A8AA0;
  uint64_t v42 = MEMORY[0x263F8E960];
  *(void *)(v41 + 56) = MEMORY[0x263F8E8F8];
  *(void *)(v41 + 64) = v42;
  uint64_t v43 = MEMORY[0x263F8E970];
  int v111 = v38;
  *(_DWORD *)(v41 + 32) = v38;
  uint64_t v44 = MEMORY[0x263F8E9C0];
  *(void *)(v41 + 96) = v43;
  *(void *)(v41 + 104) = v44;
  uint64_t v45 = v36;
  *(void *)(v41 + 72) = v36;
  uint64_t v114 = v37;
  swift_bridgeObjectRetain();
  if (sub_24A2A7840() == v40 && v46 == v39)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v50 = sub_24A2A7E40();
    swift_bridgeObjectRelease();
    if ((v50 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain_n();
      long long v64 = sub_24A2A7140();
      os_log_type_t v65 = sub_24A2A7B40();
      BOOL v66 = os_log_type_enabled(v64, v65);
      unint64_t v67 = v0[11];
      if (v66)
      {
        os_log_t log = v64;
        uint64_t v96 = v0[10];
        uint64_t v68 = swift_slowAlloc();
        uint64_t v100 = (__SecCertificate *)swift_slowAlloc();
        os_log_type_t v115 = v100;
        *(_DWORD *)uint64_t v68 = 136446466;
        swift_bridgeObjectRetain();
        v0[6] = sub_24A1C52A8(v96, v67, (uint64_t *)&v115);
        sub_24A2A7B70();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v68 + 12) = 2082;
        uint64_t v69 = swift_allocObject();
        *(_OWORD *)(v69 + 16) = xmmword_24A2A8AA0;
        *(void *)(v69 + 56) = MEMORY[0x263F8E8F8];
        *(void *)(v69 + 64) = MEMORY[0x263F8E960];
        *(_DWORD *)(v69 + 32) = v111;
        uint64_t v70 = MEMORY[0x263F8E970];
        *(void *)(v69 + 96) = MEMORY[0x263F8E970];
        uint64_t v71 = MEMORY[0x263F8E9C0];
        *(void *)(v69 + 104) = MEMORY[0x263F8E9C0];
        *(void *)(v69 + 72) = v45;
        uint64_t v72 = sub_24A2A7840();
        v0[7] = sub_24A1C52A8(v72, v73, (uint64_t *)&v115);
        sub_24A2A7B70();
        uint64_t v74 = v70;
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_24A19F000, log, v65, "Follower UDID %{public}s does not match provisioning certificate UDID %{public}s", (uint8_t *)v68, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x24C5C00A0](v100, -1, -1);
        MEMORY[0x24C5C00A0](v68, -1, -1);
      }
      else
      {
        swift_bridgeObjectRelease_n();

        uint64_t v74 = MEMORY[0x263F8E970];
        uint64_t v71 = MEMORY[0x263F8E9C0];
      }
      uint64_t v75 = v0[23];
      os_log_t loga = (os_log_t)v0[22];
      uint64_t v101 = v0[25];
      uint64_t v102 = v0[21];
      uint64_t v97 = v0[19];
      uint64_t v76 = v0[10];
      uint64_t v77 = v0[11];
      uint64_t v78 = swift_allocObject();
      *(_OWORD *)(v78 + 16) = xmmword_24A2A8AA0;
      *(void *)(v78 + 56) = MEMORY[0x263F8E8F8];
      *(void *)(v78 + 64) = MEMORY[0x263F8E960];
      *(void *)(v78 + 72) = v45;
      *(_DWORD *)(v78 + 32) = v111;
      *(void *)(v78 + 96) = v74;
      *(void *)(v78 + 104) = v71;
      swift_bridgeObjectRetain();
      uint64_t v79 = sub_24A2A7840();
      uint64_t v81 = v80;
      sub_24A234470();
      swift_allocError();
      *(void *)uint64_t v82 = v76;
      *(void *)(v82 + 8) = v77;
      *(void *)(v82 + 16) = v79;
      *(void *)(v82 + 24) = v81;
      *(unsigned char *)(v82 + 32) = 64;
      swift_willThrow();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_24A1A5384(v4, v3);
      sub_24A240EC8(v97, type metadata accessor for Validated.AttestationBundle);
      (*(void (**)(uint64_t, os_log_t))(v75 + 8))(v101, loga);
      uint64_t v26 = v102;
      goto LABEL_10;
    }
  }
  uint64_t v51 = swift_allocObject();
  *(_OWORD *)(v51 + 16) = xmmword_24A2A8AA0;
  *(void *)(v51 + 56) = MEMORY[0x263F8E8F8];
  *(void *)(v51 + 64) = MEMORY[0x263F8E960];
  *(_DWORD *)(v51 + 32) = v111;
  *(void *)(v51 + 96) = MEMORY[0x263F8E970];
  *(void *)(v51 + 104) = MEMORY[0x263F8E9C0];
  *(void *)(v51 + 72) = v36;
  uint64_t v52 = sub_24A2A7840();
  sub_24A239114(v15, v114, v52, v53);
  uint64_t v54 = v0[19];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();

  swift_bridgeObjectRelease();
  sub_24A1A5384(v4, v3);
  sub_24A240EC8(v54, type metadata accessor for Validated.AttestationBundle);
  uint64_t v55 = v0[28];
  uint64_t v56 = v0[25];
  uint64_t v57 = v0[26];
  uint64_t v58 = v0[22];
  uint64_t v59 = v0[23];
  uint64_t v61 = v0[15];
  uint64_t v60 = v0[16];
  uint64_t v62 = v0[13];
  uint64_t v63 = v0[14];
  sub_24A1B2D10(v0[21], &qword_269779590);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v59 + 32))(v57, v56, v58);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v61 + 16))(v60, v62 + *(int *)(v55 + 28), v63);
  *(void *)(swift_task_alloc() + 16) = v57;
  sub_24A2A71E0();
  uint64_t v83 = v0[28];
  uint64_t v84 = v0[13];
  (*(void (**)(void, void))(v0[15] + 8))(v0[16], v0[14]);
  swift_task_dealloc();
  uint64_t v86 = v0[2];
  uint64_t v85 = v0[3];
  uint64_t v87 = (id *)(v84 + *(int *)(v83 + 24));
  if (*((unsigned char *)v87 + *(int *)(type metadata accessor for EnsembleHPKE.Leader(0) + 28)) == 1) {
    sub_24A26A354();
  }
  else {
    sub_24A269F80();
  }
  uint64_t v89 = v88;
  uint64_t v90 = v0[26];
  uint64_t v91 = v0[23];
  uint64_t v92 = v0[22];
  long long v93 = (void *)v0[9];

  id *v87 = v89;
  uint64_t v94 = sub_24A2A72A0();
  void *v93 = v86;
  v93[1] = v85;
  v93[2] = v94;
  v93[3] = v95;
  (*(void (**)(uint64_t, uint64_t))(v91 + 8))(v90, v92);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v31 = (uint64_t (*)(void))v0[1];
LABEL_11:
  return v31();
}

uint64_t sub_24A236FA0()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 256) = v0;
  swift_task_dealloc();
  if (v0)
  {
    unint64_t v3 = sub_24A2374C4;
  }
  else
  {
    sub_24A240EC8(*(void *)(v2 + 144), type metadata accessor for Validated.AttestationBundle);
    unint64_t v3 = sub_24A2370D0;
  }
  return MEMORY[0x270FA2498](v3, 0, 0);
}

uint64_t sub_24A2370D0()
{
  uint64_t v28 = v0[32];
  uint64_t v2 = v0[23];
  uint64_t v1 = v0[24];
  uint64_t v3 = v0[28];
  uint64_t v4 = v0[26];
  uint64_t v5 = v0[22];
  uint64_t v6 = v0[15];
  uint64_t v7 = v0[16];
  uint64_t v8 = v0[13];
  uint64_t v9 = v0[14];
  sub_24A1B2D10(v0[20], &qword_269779590);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v4, v1, v5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v7, v8 + *(int *)(v3 + 28), v9);
  *(void *)(swift_task_alloc() + 16) = v4;
  sub_24A2A71E0();
  if (v28)
  {
    uint64_t v10 = v0[26];
    uint64_t v11 = v0[22];
    uint64_t v12 = v0[23];
    (*(void (**)(void, void))(v0[15] + 8))(v0[16], v0[14]);
    swift_task_dealloc();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v19 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    uint64_t v13 = v0[28];
    uint64_t v14 = v0[13];
    (*(void (**)(void, void))(v0[15] + 8))(v0[16], v0[14]);
    swift_task_dealloc();
    uint64_t v16 = v0[2];
    uint64_t v15 = v0[3];
    uint64_t v17 = (id *)(v14 + *(int *)(v13 + 24));
    if (*((unsigned char *)v17 + *(int *)(type metadata accessor for EnsembleHPKE.Leader(0) + 28)) == 1) {
      sub_24A26A354();
    }
    else {
      sub_24A269F80();
    }
    uint64_t v21 = v18;
    uint64_t v22 = v0[26];
    uint64_t v23 = v0[23];
    uint64_t v24 = v0[22];
    uint64_t v25 = (void *)v0[9];

    id *v17 = v21;
    uint64_t v26 = sub_24A2A72A0();
    *uint64_t v25 = v16;
    v25[1] = v15;
    void v25[2] = v26;
    v25[3] = v27;
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v24);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v19 = (uint64_t (*)(void))v0[1];
  }
  return v19();
}

uint64_t sub_24A2373E0()
{
  sub_24A1B2D10(*(void *)(v0 + 168), &qword_269779590);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_24A2374C4()
{
  sub_24A1B2D10(*(void *)(v0 + 160), &qword_269779590);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_24A2375A8(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v89 = *MEMORY[0x263EF8340];
  if (!*(void *)(a3 + 16)) {
    return 0;
  }
  sub_24A2A7F10();
  sub_24A2A6AE0();
  uint64_t v6 = sub_24A2A7F50();
  uint64_t v7 = -1 << *(unsigned char *)(a3 + 32);
  unint64_t v8 = v6 & ~v7;
  uint64_t v9 = a3 + 56;
  if (((*(void *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
    return 0;
  }
  unint64_t v10 = a2 >> 62;
  uint64_t v79 = ~v7;
  unint64_t v76 = a2;
  unint64_t v78 = a2 >> 62;
  BOOL v11 = __OFSUB__(HIDWORD(a1), a1);
  BOOL v77 = v11;
  uint64_t v74 = (a1 >> 32) - (int)a1;
  uint64_t v75 = a1 >> 32;
  uint64_t v80 = v10;
  size_t __n = BYTE6(a2);
  while (2)
  {
    uint64_t v12 = (uint64_t *)(*(void *)(a3 + 48) + 16 * v8);
    uint64_t v14 = *v12;
    unint64_t v13 = v12[1];
    uint64_t v15 = 0;
    switch(v13 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(v14), v14))
        {
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
        }
        uint64_t v15 = HIDWORD(v14) - (int)v14;
LABEL_15:
        sub_24A1A52B0(v14, v13);
        break;
      case 2uLL:
        uint64_t v17 = *(void *)(v14 + 16);
        uint64_t v16 = *(void *)(v14 + 24);
        uint64_t v15 = v16 - v17;
        if (!__OFSUB__(v16, v17)) {
          goto LABEL_15;
        }
        goto LABEL_120;
      case 3uLL:
        break;
      default:
        uint64_t v15 = BYTE6(v13);
        break;
    }
    size_t v18 = __n;
    switch(v80)
    {
      case 1:
        size_t v18 = HIDWORD(a1) - (int)a1;
        if (v77) {
          goto LABEL_121;
        }
        goto LABEL_20;
      case 2:
        uint64_t v20 = *(void *)(a1 + 16);
        uint64_t v19 = *(void *)(a1 + 24);
        BOOL v21 = __OFSUB__(v19, v20);
        size_t v18 = v19 - v20;
        if (!v21) {
          goto LABEL_20;
        }
        goto LABEL_122;
      case 3:
        if (v15) {
          goto LABEL_8;
        }
        goto LABEL_118;
      default:
LABEL_20:
        if (v15 != v18)
        {
LABEL_8:
          sub_24A1A5384(v14, v13);
          goto LABEL_9;
        }
        if (v15 >= 1)
        {
          switch(v13 >> 62)
          {
            case 1uLL:
              if ((int)v14 > v14 >> 32) {
                goto LABEL_123;
              }
              uint64_t v25 = sub_24A2A68E0();
              if (v25)
              {
                uint64_t v26 = v25;
                uint64_t v27 = sub_24A2A6910();
                if (__OFSUB__((int)v14, v27)) {
                  goto LABEL_125;
                }
                uint64_t v28 = (const void *)(v26 + (int)v14 - v27);
              }
              else
              {
                uint64_t v28 = 0;
              }
              sub_24A2A6900();
              LODWORD(v10) = v78;
              if (!v78)
              {
                *(void *)uint64_t __s1 = a1;
                *(_WORD *)&__s1[8] = a2;
                __s1[10] = BYTE2(a2);
                __s1[11] = BYTE3(a2);
                __s1[12] = BYTE4(a2);
                __s1[13] = BYTE5(a2);
                if (!v28) {
                  goto LABEL_153;
                }
                int v36 = memcmp(v28, __s1, __n);
                goto LABEL_115;
              }
              if (v78 == 1)
              {
                if (v75 < (int)a1) {
                  goto LABEL_134;
                }
                swift_retain();
                uint64_t v43 = (char *)sub_24A2A68E0();
                if (v43)
                {
                  uint64_t v44 = sub_24A2A6910();
                  if (__OFSUB__((int)a1, v44)) {
                    goto LABEL_141;
                  }
                  v43 += (int)a1 - v44;
                }
                uint64_t v45 = sub_24A2A6900();
                size_t v46 = (a1 >> 32) - (int)a1;
                if (v45 < v74) {
                  size_t v46 = v45;
                }
                if (!v28) {
                  goto LABEL_146;
                }
                if (!v43) {
                  goto LABEL_147;
                }
                int v36 = memcmp(v28, v43, v46);
                sub_24A1A5384(a1, a2);
                goto LABEL_115;
              }
              uint64_t v65 = *(void *)(a1 + 16);
              uint64_t v66 = *(void *)(a1 + 24);
              swift_retain();
              swift_retain();
              unint64_t v67 = (char *)sub_24A2A68E0();
              if (v67)
              {
                uint64_t v68 = sub_24A2A6910();
                if (__OFSUB__(v65, v68)) {
                  goto LABEL_140;
                }
                v67 += v65 - v68;
              }
              BOOL v21 = __OFSUB__(v66, v65);
              int64_t v69 = v66 - v65;
              if (v21) {
                goto LABEL_135;
              }
              uint64_t v70 = sub_24A2A6900();
              if (v70 >= v69) {
                size_t v71 = v69;
              }
              else {
                size_t v71 = v70;
              }
              a2 = v76;
              if (!v28) {
                goto LABEL_154;
              }
              LODWORD(v10) = v78;
              if (!v67) {
                goto LABEL_155;
              }
              int v36 = memcmp(v28, v67, v71);
              swift_release();
              goto LABEL_114;
            case 2uLL:
              uint64_t v29 = *(void *)(v14 + 16);
              swift_retain();
              swift_retain();
              uint64_t v30 = (char *)sub_24A2A68E0();
              if (!v30) {
                goto LABEL_37;
              }
              uint64_t v31 = sub_24A2A6910();
              if (__OFSUB__(v29, v31)) {
                goto LABEL_124;
              }
              v30 += v29 - v31;
LABEL_37:
              sub_24A2A6900();
              LODWORD(v10) = v78;
              if (!v78)
              {
                *(void *)uint64_t __s1 = a1;
                *(_WORD *)&__s1[8] = a2;
                __s1[10] = BYTE2(a2);
                __s1[11] = BYTE3(a2);
                __s1[12] = BYTE4(a2);
                __s1[13] = BYTE5(a2);
                if (!v30) {
                  goto LABEL_150;
                }
                int v36 = memcmp(v30, __s1, __n);
                goto LABEL_90;
              }
              if (v78 == 1)
              {
                if (v75 < (int)a1) {
                  goto LABEL_128;
                }
                swift_retain();
                uint64_t v32 = (char *)sub_24A2A68E0();
                if (v32)
                {
                  uint64_t v33 = sub_24A2A6910();
                  if (__OFSUB__((int)a1, v33)) {
                    goto LABEL_139;
                  }
                  v32 += (int)a1 - v33;
                }
                uint64_t v34 = sub_24A2A6900();
                size_t v35 = (a1 >> 32) - (int)a1;
                if (v34 < v74) {
                  size_t v35 = v34;
                }
                if (!v30) {
                  goto LABEL_143;
                }
                if (!v32) {
                  goto LABEL_144;
                }
                int v36 = memcmp(v30, v32, v35);
                a2 = v76;
                sub_24A1A5384(a1, v76);
LABEL_90:
                swift_release();
LABEL_114:
                swift_release();
LABEL_115:
                sub_24A1A5384(v14, v13);
                uint64_t v9 = a3 + 56;
                if (!v36) {
                  return 1;
                }
                break;
              }
              uint64_t v58 = *(void *)(a1 + 16);
              uint64_t v73 = *(void *)(a1 + 24);
              swift_retain();
              swift_retain();
              uint64_t v59 = (char *)sub_24A2A68E0();
              if (v59)
              {
                uint64_t v60 = sub_24A2A6910();
                if (__OFSUB__(v58, v60)) {
                  goto LABEL_138;
                }
                v59 += v58 - v60;
              }
              BOOL v21 = __OFSUB__(v73, v58);
              int64_t v61 = v73 - v58;
              if (v21) {
                goto LABEL_133;
              }
              uint64_t v62 = sub_24A2A6900();
              if (v62 >= v61) {
                size_t v63 = v61;
              }
              else {
                size_t v63 = v62;
              }
              if (!v30) {
                goto LABEL_151;
              }
              LODWORD(v10) = v78;
              if (!v59) {
                goto LABEL_152;
              }
              int v64 = memcmp(v30, v59, v63);
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              sub_24A1A5384(v14, v13);
              a2 = v76;
              uint64_t v9 = a3 + 56;
              if (!v64) {
                return 1;
              }
              break;
            case 3uLL:
              *(void *)&__s1[6] = 0;
              *(void *)uint64_t __s1 = 0;
              if (!v10) {
                goto LABEL_58;
              }
              if (v10 == 1)
              {
                if (v75 < (int)a1) {
                  goto LABEL_127;
                }
                sub_24A1A52B0(a1, a2);
                uint64_t v37 = sub_24A2A68E0();
                if (!v37) {
                  goto LABEL_145;
                }
                uint64_t v23 = v37;
                uint64_t v38 = sub_24A2A6910();
                unint64_t v10 = (int)a1 - v38;
                if (__OFSUB__((int)a1, v38)) {
                  goto LABEL_132;
                }
LABEL_53:
                uint64_t v39 = sub_24A2A6900();
                if (v39 >= v74) {
                  size_t v40 = (a1 >> 32) - (int)a1;
                }
                else {
                  size_t v40 = v39;
                }
                int v41 = memcmp(__s1, (const void *)(v23 + v10), v40);
                sub_24A1A5384(a1, a2);
                sub_24A1A5384(v14, v13);
                LODWORD(v10) = v78;
                if (!v41) {
                  return 1;
                }
              }
              else
              {
                uint64_t v54 = *(void *)(a1 + 16);
                uint64_t v53 = *(void *)(a1 + 24);
                swift_retain();
                swift_retain();
                uint64_t v49 = (char *)sub_24A2A68E0();
                if (v49)
                {
                  uint64_t v55 = sub_24A2A6910();
                  if (__OFSUB__(v54, v55)) {
                    goto LABEL_137;
                  }
                  v49 += v54 - v55;
                }
                BOOL v21 = __OFSUB__(v53, v54);
                int64_t v51 = v53 - v54;
                if (v21) {
                  goto LABEL_130;
                }
                uint64_t v52 = sub_24A2A6900();
                a2 = v76;
                if (!v49) {
                  goto LABEL_149;
                }
LABEL_83:
                if (v52 >= v51) {
                  size_t v56 = v51;
                }
                else {
                  size_t v56 = v52;
                }
                int v57 = memcmp(__s1, v49, v56);
                swift_release();
                swift_release();
                sub_24A1A5384(v14, v13);
                LODWORD(v10) = v78;
                if (!v57) {
                  return 1;
                }
              }
              break;
            default:
              *(void *)uint64_t __s1 = v14;
              *(_WORD *)&__s1[8] = v13;
              __s1[10] = BYTE2(v13);
              __s1[11] = BYTE3(v13);
              __s1[12] = BYTE4(v13);
              __s1[13] = BYTE5(v13);
              if (!v10)
              {
LABEL_58:
                uint64_t __s2 = a1;
                __int16 v83 = a2;
                char v84 = BYTE2(a2);
                char v85 = BYTE3(a2);
                char v86 = BYTE4(a2);
                char v87 = BYTE5(a2);
                int v42 = memcmp(__s1, &__s2, __n);
                sub_24A1A5384(v14, v13);
                if (!v42) {
                  return 1;
                }
                break;
              }
              if (v10 == 1)
              {
                if (v75 < (int)a1) {
                  goto LABEL_126;
                }
                sub_24A1A52B0(a1, a2);
                uint64_t v22 = sub_24A2A68E0();
                if (!v22)
                {
                  sub_24A2A6900();
                  __break(1u);
LABEL_143:
                  __break(1u);
LABEL_144:
                  __break(1u);
LABEL_145:
                  sub_24A2A6900();
                  __break(1u);
LABEL_146:
                  __break(1u);
LABEL_147:
                  __break(1u);
LABEL_148:
                  __break(1u);
LABEL_149:
                  __break(1u);
LABEL_150:
                  __break(1u);
LABEL_151:
                  __break(1u);
LABEL_152:
                  __break(1u);
LABEL_153:
                  __break(1u);
LABEL_154:
                  __break(1u);
LABEL_155:
                  __break(1u);
                  JUMPOUT(0x24A237F48);
                }
                uint64_t v23 = v22;
                uint64_t v24 = sub_24A2A6910();
                unint64_t v10 = (int)a1 - v24;
                if (__OFSUB__((int)a1, v24)) {
                  goto LABEL_131;
                }
                goto LABEL_53;
              }
              uint64_t v47 = *(void *)(a1 + 16);
              uint64_t v48 = *(void *)(a1 + 24);
              swift_retain();
              swift_retain();
              uint64_t v49 = (char *)sub_24A2A68E0();
              if (v49)
              {
                uint64_t v50 = sub_24A2A6910();
                if (__OFSUB__(v47, v50)) {
                  goto LABEL_136;
                }
                v49 += v47 - v50;
              }
              BOOL v21 = __OFSUB__(v48, v47);
              int64_t v51 = v48 - v47;
              if (v21) {
                goto LABEL_129;
              }
              uint64_t v52 = sub_24A2A6900();
              a2 = v76;
              if (!v49) {
                goto LABEL_148;
              }
              goto LABEL_83;
          }
LABEL_9:
          unint64_t v8 = (v8 + 1) & v79;
          if (((*(void *)(v9 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
            return 0;
          }
          continue;
        }
LABEL_118:
        sub_24A1A5384(v14, v13);
        return 1;
    }
  }
}

uint64_t sub_24A237F78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    sub_24A2A7F10();
    sub_24A2A78A0();
    uint64_t v6 = sub_24A2A7F50();
    uint64_t v7 = -1 << *(unsigned char *)(a3 + 32);
    unint64_t v8 = v6 & ~v7;
    uint64_t v9 = a3 + 56;
    if ((*(void *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
    {
      uint64_t v10 = *(void *)(a3 + 48);
      BOOL v11 = (void *)(v10 + 16 * v8);
      BOOL v12 = *v11 == a1 && v11[1] == a2;
      if (v12 || (sub_24A2A7E40() & 1) != 0) {
        return 1;
      }
      uint64_t v14 = ~v7;
      unint64_t v15 = (v8 + 1) & v14;
      if ((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15))
      {
        while (1)
        {
          uint64_t v16 = (void *)(v10 + 16 * v15);
          BOOL v17 = *v16 == a1 && v16[1] == a2;
          if (v17 || (sub_24A2A7E40() & 1) != 0) {
            break;
          }
          uint64_t result = 0;
          unint64_t v15 = (v15 + 1) & v14;
          if (((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15) & 1) == 0) {
            return result;
          }
        }
        return 1;
      }
    }
  }
  return 0;
}

uint64_t sub_24A2380B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v7[12] = a5;
  v7[13] = v6;
  v7[10] = a2;
  v7[11] = a4;
  v7[9] = a1;
  uint64_t v10 = sub_24A2A7280();
  v7[14] = v10;
  v7[15] = *(void *)(v10 - 8);
  v7[16] = swift_task_alloc();
  v7[17] = swift_task_alloc();
  uint64_t v11 = sub_24A2A7350();
  v7[18] = v11;
  v7[19] = *(void *)(v11 - 8);
  v7[20] = swift_task_alloc();
  v7[21] = swift_task_alloc();
  uint64_t v12 = sub_24A2A7240();
  v7[22] = v12;
  v7[23] = *(void *)(v12 - 8);
  char v7[24] = swift_task_alloc();
  v7[25] = swift_task_alloc();
  uint64_t v13 = sub_24A2A7310();
  v7[26] = v13;
  v7[27] = *(void *)(v13 - 8);
  v7[28] = swift_task_alloc();
  v7[29] = swift_task_alloc();
  v7[30] = swift_task_alloc();
  v7[31] = swift_task_alloc();
  type metadata accessor for Validated.AttestationBundle(0);
  uint64_t v14 = swift_task_alloc();
  v7[32] = v14;
  v7[33] = swift_task_alloc();
  uint64_t v15 = sub_24A2A6BC0();
  v7[34] = v15;
  uint64_t v16 = *(void *)(v15 - 8);
  v7[35] = v16;
  v7[36] = *(void *)(v16 + 64);
  v7[37] = swift_task_alloc();
  uint64_t v17 = swift_task_alloc();
  v7[38] = v17;
  v7[39] = type metadata accessor for EnsembleHPKE.Leader(0);
  uint64_t v18 = dword_269779628;
  uint64_t v19 = (void *)swift_task_alloc();
  v7[40] = v19;
  void *v19 = v7;
  v19[1] = sub_24A23845C;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_269779628
                                                                                                + v18))((uint64_t)(v7 + 2), v17, v14, a3, 0, 0xF000000000000000, a6);
}

uint64_t sub_24A23845C()
{
  *(void *)(*(void *)v1 + 328) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_24A238FCC;
  }
  else {
    uint64_t v2 = sub_24A23859C;
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

CFDataRef sub_24A23859C()
{
  uint64_t v2 = v0 + 2;
  uint64_t v1 = v0[2];
  uint64_t v3 = v0[35];
  uint64_t v5 = v0[33];
  uint64_t v4 = v0[34];
  uint64_t v6 = v0[32];
  unint64_t v7 = v0[3];
  (*(void (**)(void, void, uint64_t))(v3 + 32))(v0[37], v0[38], v4);
  sub_24A240F48(v6, v5, type metadata accessor for Validated.AttestationBundle);
  uint64_t v8 = swift_task_alloc();
  sub_24A2A6BB0();
  sub_24A244A64(&qword_269778A78, MEMORY[0x270FA91E8]);
  char v9 = sub_24A2A77D0();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v10(v8, v4);
  swift_task_dealloc();
  if (v9)
  {
    uint64_t v11 = v0[37];
    uint64_t v12 = v10;
    uint64_t v14 = v0[33];
    uint64_t v13 = v0[34];
    sub_24A244A10();
    swift_allocError();
    unsigned char *v15 = 0;
LABEL_7:
    swift_willThrow();
    sub_24A1CFCC8(v1, v7);
    sub_24A240EC8(v14, type metadata accessor for Validated.AttestationBundle);
    v12(v11, v13);
    goto LABEL_8;
  }
  if ((v7 & 0x2000000000000000) != 0)
  {
    uint64_t v11 = v0[37];
    uint64_t v12 = v10;
    uint64_t v14 = v0[33];
    uint64_t v13 = v0[34];
    sub_24A244A10();
    swift_allocError();
    *uint64_t v21 = 1;
    goto LABEL_7;
  }
  uint64_t v16 = v0[41];
  uint64_t v17 = v0;
  v0[4] = v1;
  v0[5] = v7;
  sub_24A1A52B0(v1, v7);
  sub_24A2A7300();
  if (!v16)
  {
    uint64_t v24 = v0[39];
    uint64_t v25 = v0[13];
    (*(void (**)(void, void, void))(v17[27] + 32))(v17[31], v17[30], v17[26]);
    if (*(unsigned char *)(v25 + *(int *)(v24 + 28)))
    {
      uint64_t v26 = v2 + 6;
      uint64_t v27 = (SecKeyRef *)v17[13];
      v17[8] = 0;
      CFDataRef result = SecKeyCopyExternalRepresentation(*v27, (CFErrorRef *)v2 + 6);
      if (!result)
      {
        BOOL v77 = v10;
        uint64_t v32 = *v26;
        if (!*v26)
        {
          __break(1u);
          return result;
        }
        uint64_t v33 = v17[33];
        uint64_t v71 = v17[34];
        uint64_t v75 = v17[37];
        uint64_t v0 = v17;
        uint64_t v34 = v17[31];
        uint64_t v36 = v0[26];
        uint64_t v35 = v0[27];
        type metadata accessor for CFError(0);
        sub_24A244A64((unint64_t *)&qword_269778E30, type metadata accessor for CFError);
        swift_allocError();
        *uint64_t v37 = v32;
        swift_willThrow();
        sub_24A1CFCC8(v1, v7);
        (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v34, v36);
        sub_24A240EC8(v33, type metadata accessor for Validated.AttestationBundle);
        v77(v75, v71);
        goto LABEL_8;
      }
      uint64_t v28 = v17;
      CFDataRef v29 = result;
      void v28[6] = sub_24A2A6AD0();
      v28[7] = v30;
      sub_24A2A7330();
      CFDataRef v63 = v29;
      unint64_t v78 = v10;
      (*(void (**)(void, void, void))(v28[27] + 16))(v28[29], v28[31], v28[26]);
      if (qword_269778570 != -1) {
        swift_once();
      }
      uint64_t v74 = v28[21];
      uint64_t v50 = v28[19];
      uint64_t v51 = v28[17];
      uint64_t v66 = v28[20];
      uint64_t v70 = v28[18];
      uint64_t v53 = v28[14];
      uint64_t v52 = v28[15];
      uint64_t v54 = v28[11];
      unint64_t v55 = v28[12];
      uint64_t v56 = __swift_project_value_buffer(v53, (uint64_t)qword_269779B80);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 16))(v51, v56, v53);
      sub_24A1A52B0(v54, v55);
      sub_24A1B52A8(v54, v55);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v50 + 16))(v66, v74, v70);
      sub_24A2A7290();
      uint64_t v73 = v28[34];
      uint64_t v76 = v28[37];
      uint64_t v67 = v28[31];
      uint64_t v69 = v28[33];
      uint64_t v57 = v28[26];
      uint64_t v58 = v28[27];
      uint64_t v59 = v28[21];
      uint64_t v60 = v28[18];
      uint64_t v61 = v28[19];
      uint64_t v62 = v28[10];
      sub_24A1CFCC8(v1, v7);

      (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v59, v60);
      (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v67, v57);
    }
    else
    {
      id v31 = *(id *)v17[13];
      sub_24A2A7230();
      uint64_t v28 = v17;
      unint64_t v78 = v10;
      (*(void (**)(void, void, void))(v17[27] + 16))(v17[28], v17[31], v17[26]);
      if (qword_269778570 != -1) {
        swift_once();
      }
      uint64_t v72 = v17[25];
      uint64_t v38 = v17[23];
      uint64_t v64 = v17[22];
      uint64_t v68 = v17[24];
      uint64_t v39 = v17[15];
      uint64_t v40 = v17[16];
      uint64_t v41 = v28[14];
      uint64_t v42 = v28[11];
      unint64_t v43 = v28[12];
      uint64_t v44 = __swift_project_value_buffer(v41, (uint64_t)qword_269779B80);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 16))(v40, v44, v41);
      sub_24A1A52B0(v42, v43);
      sub_24A1B52A8(v42, v43);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 16))(v68, v72, v64);
      sub_24A2A7290();
      uint64_t v73 = v28[34];
      uint64_t v76 = v28[37];
      uint64_t v65 = v28[31];
      uint64_t v69 = v28[33];
      uint64_t v45 = v28[26];
      uint64_t v46 = v28[27];
      uint64_t v47 = v28[25];
      uint64_t v49 = v28[22];
      uint64_t v48 = v28[23];
      uint64_t v62 = v28[10];
      sub_24A1CFCC8(v1, v7);
      (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v47, v49);
      (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v65, v45);
    }
    v78(v76, v73);
    sub_24A240F48(v69, v62, type metadata accessor for Validated.AttestationBundle);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v22 = (uint64_t (*)(void))v28[1];
    goto LABEL_9;
  }
  uint64_t v18 = v0[37];
  uint64_t v19 = v0[33];
  uint64_t v20 = v0[34];
  sub_24A1CFCC8(v1, v7);
  sub_24A240EC8(v19, type metadata accessor for Validated.AttestationBundle);
  v10(v18, v20);
  uint64_t v0 = v17;
LABEL_8:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v22 = (uint64_t (*)(void))v0[1];
LABEL_9:
  return (CFDataRef)v22();
}

uint64_t sub_24A238FCC()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_24A239114(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = type metadata accessor for EnsembleChannelSecurity.Leader(0);
  uint64_t v11 = *(int *)(v10 + 36);
  uint64_t v12 = *(void *)(v4 + v11);
  if (*(void *)(v12 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v13 = sub_24A1BE668(a1, a2);
    if (v14)
    {
      uint64_t v15 = *(void *)(*(void *)(v12 + 56) + 8 * v13);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v26 = v15;
      swift_bridgeObjectRetain();
      sub_24A23E234(&v25, a3, a4);
      swift_bridgeObjectRelease();
      uint64_t v16 = v26;
      swift_bridgeObjectRetain();
      goto LABEL_6;
    }
    swift_bridgeObjectRelease();
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B174B80);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_24A2A8A60;
  *(void *)(inited + 32) = a3;
  *(void *)(inited + 40) = a4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v16 = sub_24A240B20(inited);
  swift_setDeallocating();
  swift_arrayDestroy();
LABEL_6:
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v25 = *(void *)(v5 + v11);
  *(void *)(v5 + v11) = 0x8000000000000000;
  sub_24A255B40(v16, a1, a2, isUniquelyReferenced_nonNull_native);
  *(void *)(v5 + v11) = v25;
  swift_bridgeObjectRelease();
  uint64_t v19 = swift_bridgeObjectRelease();
  uint64_t v20 = *(void *)(*(void *)(v5 + v11) + 16);
  uint64_t v21 = *(void *)(v5 + *(int *)(v10 + 40));
  if (v21 >= v20)
  {
    MEMORY[0x270FA5388](v19);
    uint64_t v24 = swift_bridgeObjectRetain();
    sub_24A240CC4(v24, (void (*)(uint64_t, uint64_t, uint64_t))sub_24A244AAC);
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_24A234470();
    swift_allocError();
    *(void *)uint64_t v22 = v20;
    *(void *)(v22 + 8) = v21;
    *(void *)(v22 + 16) = 0;
    *(void *)(v22 + 24) = 0;
    *(unsigned char *)(v22 + 32) = 96;
    return swift_willThrow();
  }
}

uint64_t sub_24A239388@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  if (a1) {
    int64_t v5 = a2 - (void)a1;
  }
  else {
    int64_t v5 = 0;
  }
  sub_24A23D3A0(a1, v5);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B174B08);
  sub_24A244ACC();
  uint64_t v6 = sub_24A2A72B0();
  uint64_t v8 = v7;
  uint64_t result = swift_release();
  if (!v3)
  {
    *a3 = v6;
    a3[1] = v8;
  }
  return result;
}

uint64_t sub_24A23943C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = *(void *)(a3 + 16);
  uint64_t result = type metadata accessor for EnsembleChannelSecurity.Leader(0);
  uint64_t v11 = *(void *)(a4 + *(int *)(result + 44));
  if (v11 < v9)
  {
    sub_24A234470();
    swift_allocError();
    *(void *)uint64_t v12 = a5;
    *(void *)(v12 + 8) = a6;
    *(void *)(v12 + 16) = v9;
    *(void *)(v12 + 24) = v11;
    *(unsigned char *)(v12 + 32) = 97;
    swift_bridgeObjectRetain();
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_24A2394D8(uint64_t *a1)
{
  uint64_t v1 = a1[2];
  if (!*(void *)(v1 + 16)) {
    return 0;
  }
  uint64_t v3 = *a1;
  unint64_t v2 = a1[1];
  uint64_t v5 = a1[3];
  unint64_t v4 = a1[4];
  sub_24A1A52B0(*a1, v2);
  swift_bridgeObjectRetain();
  sub_24A1A52B0(v5, v4);
  unint64_t v6 = sub_24A1BE668(1701667182, 0xE400000000000000);
  if ((v7 & 1) == 0) {
    goto LABEL_15;
  }
  uint64_t v8 = (uint64_t *)(*(void *)(v1 + 56) + 16 * v6);
  uint64_t v10 = *v8;
  uint64_t v9 = v8[1];
  swift_bridgeObjectRetain();
  sub_24A1A5384(v3, v2);
  swift_bridgeObjectRelease();
  sub_24A1A5384(v5, v4);
  if (v10 == 0x692D6E6977726164 && v9 == 0xEB0000000074696ELL)
  {
    swift_bridgeObjectRelease();
    if (!*(void *)(v1 + 16)) {
      return 0;
    }
  }
  else
  {
    char v12 = sub_24A2A7E40();
    swift_bridgeObjectRelease();
    uint64_t result = 0;
    if ((v12 & 1) == 0) {
      return result;
    }
    if (!*(void *)(v1 + 16)) {
      return 0;
    }
  }
  sub_24A1A52B0(v3, v2);
  swift_bridgeObjectRetain();
  sub_24A1A52B0(v5, v4);
  unint64_t v14 = sub_24A1BE668(0x7079745F656D696DLL, 0xE900000000000065);
  if ((v15 & 1) == 0)
  {
LABEL_15:
    sub_24A1A5384(v3, v2);
    swift_bridgeObjectRelease();
    sub_24A1A5384(v5, v4);
    return 0;
  }
  uint64_t v16 = (uint64_t *)(*(void *)(v1 + 56) + 16 * v14);
  uint64_t v18 = *v16;
  uint64_t v17 = v16[1];
  swift_bridgeObjectRetain();
  sub_24A1A5384(v3, v2);
  swift_bridgeObjectRelease();
  sub_24A1A5384(v5, v4);
  if (v18 == 0xD000000000000010 && v17 == 0x800000024A2B2BF0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v19 = sub_24A2A7E40();
    swift_bridgeObjectRelease();
    return v19 & 1;
  }
}

uint64_t sub_24A239724(uint64_t a1)
{
  return sub_24A239730(a1, qword_26977A748);
}

uint64_t sub_24A239730(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_24A2A7160();
  __swift_allocate_value_buffer(v3, a2);
  __swift_project_value_buffer(v3, (uint64_t)a2);
  return sub_24A2A7150();
}

uint64_t EnsembleChannelSecurity.Follower.init(udid:leaderUDID:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v11 = type metadata accessor for EnsembleHPKE.Follower(0);
  MEMORY[0x270FA5388](v11 - 8);
  unint64_t v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  EnsembleHPKE.Follower.init()((uint64_t)v13);
  if (v5)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    *a5 = a1;
    a5[1] = a2;
    a5[2] = a3;
    a5[3] = a4;
    uint64_t v15 = type metadata accessor for EnsembleChannelSecurity.Follower(0);
    return sub_24A240F48((uint64_t)v13, (uint64_t)a5 + *(int *)(v15 + 24), type metadata accessor for EnsembleHPKE.Follower);
  }
}

uint64_t EnsembleChannelSecurity.Follower.init(udid:leaderUDID:followerHPKE:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  *a6 = a1;
  a6[1] = a2;
  a6[2] = a3;
  a6[3] = a4;
  uint64_t v8 = type metadata accessor for EnsembleChannelSecurity.Follower(0);
  return sub_24A240F48(a5, (uint64_t)a6 + *(int *)(v8 + 24), type metadata accessor for EnsembleHPKE.Follower);
}

uint64_t EnsembleChannelSecurity.Follower.attest()(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return MEMORY[0x270FA2498](sub_24A239918, 0, 0);
}

uint64_t sub_24A239918()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = (uint64_t *)(v1 + *(int *)(type metadata accessor for EnsembleChannelSecurity.Follower(0) + 24));
  uint64_t v3 = (uint64_t *)((char *)v2 + *(int *)(type metadata accessor for EnsembleHPKE.Follower(0) + 24));
  uint64_t v5 = v3[3];
  uint64_t v4 = v3[4];
  __swift_project_boxed_opaque_existential_1(v3, v5);
  uint64_t v6 = *v2;
  char v7 = (void *)swift_task_alloc();
  v0[4] = v7;
  *char v7 = v0;
  v7[1] = sub_24A239A00;
  uint64_t v8 = v0[2];
  return Attestor.attest(key:)(v8, v6, v5, v4);
}

uint64_t sub_24A239A00()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> EnsembleChannelSecurity.Follower.rekey()()
{
  uint64_t v2 = (id *)(v0 + *(int *)(type metadata accessor for EnsembleChannelSecurity.Follower(0) + 24));
  if (*((unsigned char *)v2 + *(int *)(type metadata accessor for EnsembleHPKE.Follower(0) + 28)) == 1)
  {
    sub_24A26A354();
    if (v1) {
      return;
    }
  }
  else
  {
    sub_24A269F80();
    if (v1) {
      return;
    }
  }
  uint64_t v4 = v3;

  *uint64_t v2 = v4;
  if (qword_269778540 != -1) {
    swift_once();
  }
  uint64_t v5 = sub_24A2A7160();
  __swift_project_value_buffer(v5, (uint64_t)qword_26977A748);
  uint64_t v6 = sub_24A2A7140();
  os_log_type_t v7 = sub_24A2A7B40();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl(&dword_24A19F000, v6, v7, "Follower rekeyed", v8, 2u);
    MEMORY[0x24C5C00A0](v8, -1, -1);
  }
}

uint64_t EnsembleChannelSecurity.Follower.completePairing(using:authenticatedBy:)(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  *(void *)(v4 + 64) = a3;
  *(void *)(v4 + 72) = v3;
  *(void *)(v4 + 56) = a1;
  type metadata accessor for Validated.AttestationBundle(0);
  *(void *)(v4 + 80) = swift_task_alloc();
  uint64_t v6 = sub_24A2A72F0();
  *(void *)(v4 + 88) = v6;
  *(void *)(v4 + 96) = *(void *)(v6 - 8);
  *(void *)(v4 + 104) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_269779590);
  *(void *)(v4 + 112) = swift_task_alloc();
  long long v7 = a2[1];
  *(_OWORD *)(v4 + 120) = *a2;
  *(_OWORD *)(v4 + 136) = v7;
  return MEMORY[0x270FA2498](sub_24A239D5C, 0, 0);
}

uint64_t sub_24A239D5C()
{
  uint64_t v1 = v0[14];
  uint64_t v2 = v0[9];
  uint64_t v3 = *(void *)(v2 + 16);
  v0[19] = v3;
  uint64_t v4 = *(void *)(v2 + 24);
  v0[20] = v4;
  type metadata accessor for EnsembleChannelSecurity.Follower(0);
  type metadata accessor for EnsembleHPKE.Follower(0);
  swift_bridgeObjectRetain();
  _s16CloudAttestation17EnsembleValidatorV9policyFor4udid12fingerprintsQrSS_Say10Foundation4DataVGtF_0(v3, v4, 0, v1);
  unint64_t v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_2697795B8 + dword_2697795B8);
  uint64_t v5 = (void *)swift_task_alloc();
  v0[21] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_24A239E80;
  uint64_t v6 = v0[17];
  uint64_t v7 = v0[18];
  uint64_t v8 = v0[13];
  uint64_t v9 = v0[14];
  uint64_t v10 = v0[10];
  uint64_t v11 = v0[8];
  return v13(v8, v10, v11, v6, v7, 0, 0xC000000000000000, v9);
}

uint64_t sub_24A239E80()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 176) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    uint64_t v3 = sub_24A23A390;
  }
  else
  {
    sub_24A240EC8(*(void *)(v2 + 80), type metadata accessor for Validated.AttestationBundle);
    uint64_t v3 = sub_24A239FB8;
  }
  return MEMORY[0x270FA2498](v3, 0, 0);
}

uint64_t sub_24A239FB8()
{
  uint64_t v42 = v0;
  uint64_t v1 = v0[15];
  v0[2] = v1;
  uint64_t v2 = v0[22];
  unint64_t v3 = v0[16];
  v0[3] = v3;
  sub_24A1A52B0(v1, v3);
  sub_24A1B802C();
  uint64_t v4 = sub_24A2A72E0();
  if (v2)
  {
    uint64_t v6 = v0[15];
    unint64_t v7 = v0[16];
    uint64_t v9 = v0[13];
    uint64_t v8 = v0[14];
    uint64_t v10 = v0[11];
    uint64_t v11 = v0[12];
    swift_bridgeObjectRelease();
    sub_24A1A5384(v6, v7);
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
    uint64_t v12 = v8;
LABEL_5:
    sub_24A1B2D10(v12, &qword_269779590);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v22 = (uint64_t (*)(void))v0[1];
    goto LABEL_6;
  }
  uint64_t v13 = v4;
  uint64_t v14 = v5;
  sub_24A1A5384(v0[15], v0[16]);
  v0[4] = v13;
  v0[5] = v14;
  sub_24A2A71F0();
  EnsembleChannelSecurity.Follower.rekey()();
  if (v15)
  {
    uint64_t v16 = v0[13];
    uint64_t v17 = v0[14];
    uint64_t v18 = v0[11];
    uint64_t v19 = v0[12];
    uint64_t v20 = v0[7];
    swift_bridgeObjectRelease();
    uint64_t v21 = sub_24A2A7220();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v21 - 8) + 8))(v20, v21);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v16, v18);
    uint64_t v12 = v17;
    goto LABEL_5;
  }
  if (qword_269778540 != -1) {
    swift_once();
  }
  uint64_t v24 = sub_24A2A7160();
  __swift_project_value_buffer(v24, (uint64_t)qword_26977A748);
  swift_bridgeObjectRetain();
  uint64_t v25 = sub_24A2A7140();
  os_log_type_t v26 = sub_24A2A7B40();
  BOOL v27 = os_log_type_enabled(v25, v26);
  unint64_t v28 = v0[20];
  if (v27)
  {
    uint64_t v37 = v0[19];
    uint64_t v29 = v0[12];
    uint64_t v39 = v0[13];
    uint64_t v40 = v0[14];
    uint64_t v38 = v0[11];
    uint64_t v30 = (uint8_t *)swift_slowAlloc();
    uint64_t v31 = swift_slowAlloc();
    uint64_t v41 = v31;
    *(_DWORD *)uint64_t v30 = 136446210;
    swift_bridgeObjectRetain();
    v0[6] = sub_24A1C52A8(v37, v28, &v41);
    sub_24A2A7B70();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_24A19F000, v25, v26, "Follower completed pairing with leader: %{public}s", v30, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C5C00A0](v31, -1, -1);
    MEMORY[0x24C5C00A0](v30, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v39, v38);
    uint64_t v32 = v40;
  }
  else
  {
    uint64_t v34 = v0[13];
    uint64_t v33 = v0[14];
    uint64_t v35 = v0[11];
    uint64_t v36 = v0[12];

    swift_bridgeObjectRelease_n();
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v34, v35);
    uint64_t v32 = v33;
  }
  sub_24A1B2D10(v32, &qword_269779590);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v22 = (uint64_t (*)(void))v0[1];
LABEL_6:
  return v22();
}

uint64_t sub_24A23A390()
{
  sub_24A1B2D10(*(void *)(v0 + 112), &qword_269779590);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_24A23A420(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v9[14] = a7;
  v9[15] = v8;
  v9[12] = a5;
  v9[13] = a6;
  v9[10] = a2;
  v9[11] = a4;
  v9[9] = a1;
  uint64_t v12 = sub_24A2A7280();
  v9[16] = v12;
  v9[17] = *(void *)(v12 - 8);
  v9[18] = swift_task_alloc();
  v9[19] = swift_task_alloc();
  uint64_t v13 = sub_24A2A7350();
  v9[20] = v13;
  v9[21] = *(void *)(v13 - 8);
  v9[22] = swift_task_alloc();
  v9[23] = swift_task_alloc();
  uint64_t v14 = sub_24A2A7240();
  v9[24] = v14;
  v9[25] = *(void *)(v14 - 8);
  v9[26] = swift_task_alloc();
  v9[27] = swift_task_alloc();
  uint64_t v15 = sub_24A2A7310();
  v9[28] = v15;
  v9[29] = *(void *)(v15 - 8);
  v9[30] = swift_task_alloc();
  v9[31] = swift_task_alloc();
  unsigned char v9[32] = swift_task_alloc();
  v9[33] = swift_task_alloc();
  type metadata accessor for Validated.AttestationBundle(0);
  uint64_t v16 = swift_task_alloc();
  v9[34] = v16;
  v9[35] = swift_task_alloc();
  uint64_t v17 = sub_24A2A6BC0();
  v9[36] = v17;
  uint64_t v18 = *(void *)(v17 - 8);
  v9[37] = v18;
  v9[38] = *(void *)(v18 + 64);
  v9[39] = swift_task_alloc();
  uint64_t v19 = swift_task_alloc();
  v9[40] = v19;
  v9[41] = type metadata accessor for EnsembleHPKE.Follower(0);
  uint64_t v20 = dword_269779628;
  uint64_t v21 = (void *)swift_task_alloc();
  v9[42] = v21;
  *uint64_t v21 = v9;
  v21[1] = sub_24A23A7D0;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_269779628
                                                                                                + v20))((uint64_t)(v9 + 2), v19, v16, a3, 0, 0xF000000000000000, a8);
}

uint64_t sub_24A23A7D0()
{
  *(void *)(*(void *)v1 + 344) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_24A23B36C;
  }
  else {
    uint64_t v2 = sub_24A23A910;
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

CFDataRef sub_24A23A910()
{
  uint64_t v2 = v0 + 2;
  uint64_t v1 = v0[2];
  uint64_t v3 = v0[37];
  uint64_t v5 = v0[35];
  uint64_t v4 = v0[36];
  uint64_t v6 = v0[34];
  unint64_t v7 = v0[3];
  (*(void (**)(void, void, uint64_t))(v3 + 32))(v0[39], v0[40], v4);
  sub_24A240F48(v6, v5, type metadata accessor for Validated.AttestationBundle);
  uint64_t v8 = swift_task_alloc();
  sub_24A2A6BB0();
  sub_24A244A64(&qword_269778A78, MEMORY[0x270FA91E8]);
  char v9 = sub_24A2A77D0();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v10(v8, v4);
  swift_task_dealloc();
  if (v9)
  {
    uint64_t v11 = v0[39];
    uint64_t v12 = v10;
    uint64_t v14 = v0[35];
    uint64_t v13 = v0[36];
    sub_24A244A10();
    swift_allocError();
    unsigned char *v15 = 0;
LABEL_7:
    swift_willThrow();
    sub_24A1CFCC8(v1, v7);
    sub_24A240EC8(v14, type metadata accessor for Validated.AttestationBundle);
    v12(v11, v13);
    goto LABEL_8;
  }
  if ((v7 & 0x2000000000000000) != 0)
  {
    uint64_t v11 = v0[39];
    uint64_t v12 = v10;
    uint64_t v14 = v0[35];
    uint64_t v13 = v0[36];
    sub_24A244A10();
    swift_allocError();
    *uint64_t v21 = 1;
    goto LABEL_7;
  }
  uint64_t v16 = v0[43];
  uint64_t v17 = v0;
  v0[4] = v1;
  v0[5] = v7;
  sub_24A1A52B0(v1, v7);
  sub_24A2A7300();
  if (!v16)
  {
    uint64_t v24 = v0[41];
    uint64_t v25 = v0[15];
    (*(void (**)(void, void, void))(v17[29] + 32))(v17[33], v17[32], v17[28]);
    if (*(unsigned char *)(v25 + *(int *)(v24 + 28)))
    {
      os_log_type_t v26 = v2 + 6;
      BOOL v27 = (SecKeyRef *)v17[15];
      v17[8] = 0;
      CFDataRef result = SecKeyCopyExternalRepresentation(*v27, (CFErrorRef *)v2 + 6);
      if (!result)
      {
        unint64_t v78 = v10;
        uint64_t v32 = *v26;
        if (!*v26)
        {
          __break(1u);
          return result;
        }
        uint64_t v33 = v17[35];
        uint64_t v74 = v17[36];
        uint64_t v76 = v17[39];
        uint64_t v0 = v17;
        uint64_t v34 = v17[33];
        uint64_t v36 = v0[28];
        uint64_t v35 = v0[29];
        type metadata accessor for CFError(0);
        sub_24A244A64((unint64_t *)&qword_269778E30, type metadata accessor for CFError);
        swift_allocError();
        *uint64_t v37 = v32;
        swift_willThrow();
        sub_24A1CFCC8(v1, v7);
        (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v34, v36);
        sub_24A240EC8(v33, type metadata accessor for Validated.AttestationBundle);
        v78(v76, v74);
        goto LABEL_8;
      }
      unint64_t v28 = v17;
      CFDataRef v29 = result;
      void v28[6] = sub_24A2A6AD0();
      v28[7] = v30;
      sub_24A2A7330();
      CFDataRef v61 = v29;
      uint64_t v79 = v10;
      (*(void (**)(void, void, void))(v28[21] + 16))(v28[22], v28[23], v28[20]);
      if (qword_269778570 != -1) {
        swift_once();
      }
      uint64_t v50 = v28[29];
      uint64_t v67 = v28[31];
      uint64_t v69 = v28[28];
      uint64_t v73 = v28[33];
      uint64_t v51 = v28[19];
      uint64_t v53 = v28[16];
      uint64_t v52 = v28[17];
      uint64_t v55 = v28[13];
      unint64_t v54 = v28[14];
      uint64_t v63 = v28[11];
      unint64_t v65 = v28[12];
      uint64_t v56 = __swift_project_value_buffer(v53, (uint64_t)qword_269779B80);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 16))(v51, v56, v53);
      sub_24A1A52B0(v55, v54);
      sub_24A1B52A8(v55, v54);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v50 + 16))(v67, v73, v69);
      sub_24A1A52B0(v63, v65);
      sub_24A2A72D0();
      uint64_t v75 = v28[36];
      uint64_t v77 = v28[39];
      uint64_t v70 = v28[33];
      uint64_t v72 = v28[35];
      uint64_t v45 = v28[28];
      uint64_t v46 = v28[29];
      uint64_t v57 = v28[23];
      uint64_t v58 = v28[20];
      uint64_t v59 = v28[21];
      uint64_t v60 = v28[10];
      sub_24A1CFCC8(v1, v7);

      (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v57, v58);
    }
    else
    {
      id v31 = *(id *)v17[15];
      sub_24A2A7230();
      uint64_t v79 = v10;
      (*(void (**)(void, void, void))(v17[25] + 16))(v17[26], v17[27], v17[24]);
      if (qword_269778570 != -1) {
        swift_once();
      }
      uint64_t v38 = v17[29];
      uint64_t v66 = v17[30];
      uint64_t v68 = v17[28];
      uint64_t v71 = v17[33];
      uint64_t v40 = v17[17];
      uint64_t v39 = v17[18];
      uint64_t v41 = v17[16];
      unint64_t v28 = v17;
      unint64_t v42 = v17[14];
      uint64_t v43 = v28[13];
      uint64_t v62 = v28[11];
      unint64_t v64 = v28[12];
      uint64_t v44 = __swift_project_value_buffer(v41, (uint64_t)qword_269779B80);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 16))(v39, v44, v41);
      sub_24A1A52B0(v43, v42);
      sub_24A1B52A8(v43, v42);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 16))(v66, v71, v68);
      sub_24A1A52B0(v62, v64);
      sub_24A2A72D0();
      uint64_t v75 = v28[36];
      uint64_t v77 = v28[39];
      uint64_t v70 = v28[33];
      uint64_t v72 = v28[35];
      uint64_t v45 = v28[28];
      uint64_t v46 = v28[29];
      uint64_t v47 = v28[27];
      uint64_t v49 = v28[24];
      uint64_t v48 = v28[25];
      uint64_t v60 = v28[10];
      sub_24A1CFCC8(v1, v7);
      (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v47, v49);
    }
    (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v70, v45);
    v79(v77, v75);
    sub_24A240F48(v72, v60, type metadata accessor for Validated.AttestationBundle);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v22 = (uint64_t (*)(void))v28[1];
    goto LABEL_9;
  }
  uint64_t v18 = v0[39];
  uint64_t v19 = v0[35];
  uint64_t v20 = v0[36];
  sub_24A1CFCC8(v1, v7);
  sub_24A240EC8(v19, type metadata accessor for Validated.AttestationBundle);
  v10(v18, v20);
  uint64_t v0 = v17;
LABEL_8:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v22 = (uint64_t (*)(void))v0[1];
LABEL_9:
  return (CFDataRef)v22();
}

uint64_t sub_24A23B36C()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t EnsembleChannelSecurity.PairingData.cipherText.getter()
{
  uint64_t v1 = *(void *)v0;
  sub_24A1A52B0(*(void *)v0, *(void *)(v0 + 8));
  return v1;
}

uint64_t EnsembleChannelSecurity.PairingData.encapsulatedKey.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  sub_24A1A52B0(v1, *(void *)(v0 + 24));
  return v1;
}

uint64_t EnsembleChannelSecurity.PairingData.hash(into:)()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  uint64_t v4 = v0[2];
  unint64_t v3 = v0[3];
  sub_24A1A52B0(v1, v2);
  sub_24A2A6AE0();
  sub_24A1A5384(v1, v2);
  sub_24A1A52B0(v4, v3);
  sub_24A2A6AE0();

  return sub_24A1A5384(v4, v3);
}

uint64_t static EnsembleChannelSecurity.PairingData.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = a1[2];
  unint64_t v3 = a1[3];
  uint64_t v4 = a2[2];
  unint64_t v5 = a2[3];
  if ((sub_24A1B7D80(*a1, a1[1], *a2, a2[1]) & 1) == 0) {
    return 0;
  }

  return sub_24A1B7D80(v2, v3, v4, v5);
}

uint64_t sub_24A23B628()
{
  if (*v0) {
    return 0x6C75737061636E65;
  }
  else {
    return 0x6554726568706963;
  }
}

uint64_t sub_24A23B674@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_24A2448EC(a1, a2);
  *a3 = result;
  return result;
}

void sub_24A23B69C(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_24A23B6A8(uint64_t a1)
{
  unint64_t v2 = sub_24A240FB0();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A23B6E4(uint64_t a1)
{
  unint64_t v2 = sub_24A240FB0();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t EnsembleChannelSecurity.PairingData.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_2697795C0);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v1;
  uint64_t v7 = v1[1];
  uint64_t v9 = v1[2];
  uint64_t v13 = v1[3];
  uint64_t v14 = v9;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24A240FB0();
  sub_24A2A7F80();
  uint64_t v16 = v8;
  uint64_t v17 = v7;
  char v18 = 0;
  sub_24A241004();
  uint64_t v10 = v15;
  sub_24A2A7E10();
  if (!v10)
  {
    uint64_t v16 = v14;
    uint64_t v17 = v13;
    char v18 = 1;
    sub_24A2A7E10();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t EnsembleChannelSecurity.PairingData.hashValue.getter()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  uint64_t v4 = v0[2];
  unint64_t v3 = v0[3];
  sub_24A2A7F10();
  sub_24A1A52B0(v1, v2);
  sub_24A2A6AE0();
  sub_24A1A5384(v1, v2);
  sub_24A1A52B0(v4, v3);
  sub_24A2A6AE0();
  sub_24A1A5384(v4, v3);
  return sub_24A2A7F50();
}

uint64_t EnsembleChannelSecurity.PairingData.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2697795D8);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24A240FB0();
  sub_24A2A7F60();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v16 = a2;
  char v19 = 0;
  sub_24A24104C();
  sub_24A2A7DB0();
  uint64_t v9 = v17;
  unint64_t v10 = v18;
  char v19 = 1;
  sub_24A1A52B0(v17, v18);
  sub_24A2A7DB0();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v11 = v17;
  unint64_t v12 = v18;
  sub_24A1A52B0(v9, v10);
  sub_24A1A52B0(v11, v12);
  sub_24A1A5384(v9, v10);
  uint64_t v13 = v16;
  uint64_t *v16 = v9;
  v13[1] = v10;
  _OWORD v13[2] = v11;
  void v13[3] = v12;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  sub_24A1A5384(v9, v10);
  return sub_24A1A5384(v11, v12);
}

uint64_t sub_24A23BBA8()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  uint64_t v4 = v0[2];
  unint64_t v3 = v0[3];
  sub_24A2A7F10();
  sub_24A1A52B0(v1, v2);
  sub_24A2A6AE0();
  sub_24A1A5384(v1, v2);
  sub_24A1A52B0(v4, v3);
  sub_24A2A6AE0();
  sub_24A1A5384(v4, v3);
  return sub_24A2A7F50();
}

uint64_t sub_24A23BC40()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  uint64_t v4 = v0[2];
  unint64_t v3 = v0[3];
  sub_24A1A52B0(v1, v2);
  sub_24A2A6AE0();
  sub_24A1A5384(v1, v2);
  sub_24A1A52B0(v4, v3);
  sub_24A2A6AE0();

  return sub_24A1A5384(v4, v3);
}

uint64_t sub_24A23BCD4()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  uint64_t v4 = v0[2];
  unint64_t v3 = v0[3];
  sub_24A2A7F10();
  sub_24A1A52B0(v1, v2);
  sub_24A2A6AE0();
  sub_24A1A5384(v1, v2);
  sub_24A1A52B0(v4, v3);
  sub_24A2A6AE0();
  sub_24A1A5384(v4, v3);
  return sub_24A2A7F50();
}

uint64_t sub_24A23BD68@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return EnsembleChannelSecurity.PairingData.init(from:)(a1, a2);
}

uint64_t sub_24A23BD80(void *a1)
{
  return EnsembleChannelSecurity.PairingData.encode(to:)(a1);
}

uint64_t sub_24A23BD98(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = a1[2];
  unint64_t v3 = a1[3];
  uint64_t v4 = a2[2];
  unint64_t v5 = a2[3];
  if ((sub_24A1B7D80(*a1, a1[1], *a2, a2[1]) & 1) == 0) {
    return 0;
  }

  return sub_24A1B7D80(v2, v3, v4, v5);
}

uint64_t sub_24A23BE10@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1742B0);
  unint64_t v5 = (int *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24A1B2CAC(v2, (uint64_t)v7, &qword_26B1742B0);
  sub_24A240F48((uint64_t)v7, *(void *)a1, (uint64_t (*)(void))type metadata accessor for X509Policy);
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = &v7[v5[14]];
  uint64_t v10 = *((void *)v9 + 2);
  char v11 = v9[24];
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  *(void *)(v8 + 16) = v10;
  *(unsigned char *)(v8 + 24) = v11;
  unint64_t v12 = &v7[v5[26]];
  uint64_t v13 = *(void *)v12;
  LOBYTE(v12) = v12[8];
  uint64_t v15 = *(void *)(a1 + 32);
  uint64_t v14 = *(void *)(a1 + 40);
  *(void *)uint64_t v15 = v13;
  *(unsigned char *)(v15 + 8) = (_BYTE)v12;
  sub_24A240F48((uint64_t)&v7[v5[30]], v14, type metadata accessor for SecureConfigPolicy);
  uint64_t v16 = &v7[v5[34]];
  long long v17 = *(_OWORD *)v16;
  long long v18 = *((_OWORD *)v16 + 1);
  long long v19 = *(_OWORD *)(v16 + 25);
  uint64_t v21 = *(_OWORD **)(a1 + 48);
  uint64_t v20 = *(void *)(a1 + 56);
  *(_OWORD *)((char *)v21 + 25) = v19;
  *uint64_t v21 = v17;
  v21[1] = v18;
  uint64_t result = sub_24A240F48((uint64_t)&v7[v5[38]], v20, type metadata accessor for KeyOptionsPolicy);
  uint64_t v23 = &v7[v5[42]];
  int v24 = *(_DWORD *)v23;
  uint64_t v25 = *(void *)(a1 + 64);
  uint64_t v26 = *(void *)(a1 + 72);
  *(_WORD *)(v25 + 4) = *((_WORD *)v23 + 2);
  *(_DWORD *)uint64_t v25 = v24;
  BOOL v27 = &v7[v5[46]];
  LOWORD(v24) = *(_WORD *)v27;
  LOBYTE(v25) = v27[2];
  char v28 = v27[5];
  LOWORD(v27) = *(_WORD *)(v27 + 3);
  *(_WORD *)uint64_t v26 = v24;
  *(unsigned char *)(v26 + 2) = v25;
  *(_WORD *)(v26 + 3) = (_WORD)v27;
  *(unsigned char *)(v26 + 5) = v28;
  uint64_t v29 = *(void *)(a1 + 88);
  **(void **)(a1 + 80) = *(void *)&v7[v5[50]];
  uint64_t v30 = &v7[v5[54]];
  uint64_t v31 = *(void *)v30;
  LOBYTE(v26) = v30[8];
  char v32 = v30[9];
  LOBYTE(v30) = v30[10];
  *(void *)uint64_t v29 = v31;
  *(unsigned char *)(v29 + 8) = v26;
  *(unsigned char *)(v29 + 9) = v32;
  *(unsigned char *)(v29 + 10) = (_BYTE)v30;
  uint64_t v33 = *(void *)(a1 + 96);
  uint64_t v34 = &v7[v5[58]];
  LOBYTE(v29) = *v34;
  uint64_t v35 = *((void *)v34 + 1);
  LOBYTE(v34) = v34[16];
  *(unsigned char *)uint64_t v33 = v29;
  *(void *)(v33 + 8) = v35;
  *(unsigned char *)(v33 + 16) = (_BYTE)v34;
  return result;
}

double sub_24A23C004@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_269778BD8);
  unint64_t v5 = (int *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24A1B2CAC(v2, (uint64_t)v7, &qword_269778BD8);
  sub_24A240F48((uint64_t)v7, *(void *)a1, (uint64_t (*)(void))type metadata accessor for X509Policy);
  sub_24A1D0DD4((uint64_t)&v7[v5[14]], *(void *)(a1 + 8));
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = &v7[v5[18]];
  uint64_t v10 = *((void *)v9 + 2);
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  *(void *)(v8 + 16) = v10;
  char v11 = &v7[v5[30]];
  uint64_t v12 = *(void *)v11;
  LOBYTE(v11) = v11[8];
  uint64_t v14 = *(void *)(a1 + 40);
  uint64_t v13 = *(void *)(a1 + 48);
  *(void *)uint64_t v14 = v12;
  *(unsigned char *)(v14 + 8) = (_BYTE)v11;
  sub_24A240F48((uint64_t)&v7[v5[34]], v13, type metadata accessor for SecureConfigPolicy);
  sub_24A240F48((uint64_t)&v7[v5[38]], *(void *)(a1 + 56), type metadata accessor for KeyOptionsPolicy);
  sub_24A240F48((uint64_t)&v7[v5[42]], *(void *)(a1 + 64), (uint64_t (*)(void))type metadata accessor for SoftwareReleasePolicy);
  uint64_t v15 = &v7[v5[46]];
  char v16 = *v15;
  char v17 = v15[1];
  char v18 = v15[2];
  uint64_t v19 = *(void *)(v15 + 12);
  int v20 = *((_DWORD *)v15 + 5);
  double result = *(double *)(v15 + 4);
  uint64_t v22 = *(void *)(a1 + 72);
  uint64_t v23 = *(void *)(a1 + 80);
  *(unsigned char *)uint64_t v22 = v16;
  *(unsigned char *)(v22 + 1) = v17;
  *(unsigned char *)(v22 + 2) = v18;
  *(double *)(v22 + 4) = result;
  *(void *)(v22 + 12) = v19;
  *(_DWORD *)(v22 + 20) = v20;
  int v24 = &v7[v5[50]];
  __int16 v25 = *(_WORD *)v24;
  char v26 = v24[2];
  char v27 = v24[5];
  LOWORD(v24) = *(_WORD *)(v24 + 3);
  *(_WORD *)uint64_t v23 = v25;
  *(unsigned char *)(v23 + 2) = v26;
  *(_WORD *)(v23 + 3) = (_WORD)v24;
  *(unsigned char *)(v23 + 5) = v27;
  **(void **)(a1 + 88) = *(void *)&v7[v5[54]];
  return result;
}

uint64_t sub_24A23C1E0(uint64_t a1, uint64_t a2)
{
  v3[16] = a2;
  v3[17] = v2;
  v3[15] = a1;
  v3[18] = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1742B0);
  v3[19] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_24A23C27C, 0, 0);
}

uint64_t sub_24A23C27C()
{
  uint64_t v2 = (int *)v0[18];
  uint64_t v1 = v0[19];
  v0[20] = type metadata accessor for X509Policy();
  v0[2] = v1;
  v0[21] = __swift_instantiateConcreteTypeFromMangledName(&qword_269779660);
  v0[3] = v1 + v2[12];
  v0[6] = v1 + v2[24];
  v0[22] = type metadata accessor for SecureConfigPolicy(0);
  v0[7] = v1 + v2[28];
  v0[8] = v1 + v2[32];
  v0[23] = type metadata accessor for KeyOptionsPolicy(0);
  v0[9] = v1 + v2[36];
  v0[24] = __swift_instantiateConcreteTypeFromMangledName(&qword_269779668);
  v0[10] = v1 + v2[40];
  v0[11] = v1 + v2[44];
  v0[12] = v1 + v2[48];
  v0[13] = v1 + v2[52];
  v0[14] = v1 + v2[56];
  sub_24A23BE10((uint64_t)(v0 + 2));
  uint64_t v3 = v0[20];
  v0[25] = 0;
  v0[26] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v0[27] = v4;
  v0[28] = swift_task_alloc();
  (*(void (**)(void))(v4 + 16))();
  uint64_t v9 = (char *)off_26FDFFB28 + *(int *)off_26FDFFB28;
  uint64_t v5 = (void *)swift_task_alloc();
  v0[29] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_24A23C4E0;
  uint64_t v7 = v0[15];
  uint64_t v6 = v0[16];
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, _UNKNOWN **))v9)(v7, v6, v3, &protocol witness table for X509Policy);
}

uint64_t sub_24A23C4E0()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 240) = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v2[27] + 8))(v2[28], v2[26]);
  if (v0)
  {
    uint64_t v3 = sub_24A23C9AC;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v3 = sub_24A23C654;
  }
  return MEMORY[0x270FA2498](v3, 0, 0);
}

uint64_t sub_24A23C654()
{
  uint64_t v1 = v0[25];
  if (v1 == 12)
  {
    sub_24A1B2D10(v0[19], &qword_26B1742B0);
    swift_task_dealloc();
    uint64_t v2 = (uint64_t (*)(void))v0[1];
    return v2();
  }
  else
  {
    v0[25] = v1 + 1;
    uint64_t v4 = (char **)&protocol witness table for APTicketPolicy;
    uint64_t v5 = &type metadata for APTicketPolicy;
    switch(v1)
    {
      case 0:
        uint64_t v5 = (ValueMetadata *)v0[21];
        uint64_t v4 = (char **)&protocol witness table for PolicyBuilder.ConditionalPolicy<A, B>;
        break;
      case 1:
        break;
      case 2:
        uint64_t v4 = (char **)&protocol witness table for SEPImagePolicy;
        uint64_t v5 = &type metadata for SEPImagePolicy;
        break;
      case 3:
        uint64_t v4 = (char **)&protocol witness table for CryptexPolicy;
        uint64_t v5 = &type metadata for CryptexPolicy;
        break;
      case 4:
        uint64_t v5 = (ValueMetadata *)v0[22];
        uint64_t v4 = (char **)&protocol witness table for SecureConfigPolicy;
        break;
      case 5:
        uint64_t v4 = (char **)&protocol witness table for TransparencyPolicy;
        uint64_t v5 = &type metadata for TransparencyPolicy;
        break;
      case 6:
        uint64_t v5 = (ValueMetadata *)v0[23];
        uint64_t v4 = (char **)&protocol witness table for KeyOptionsPolicy;
        break;
      case 7:
        uint64_t v5 = (ValueMetadata *)v0[24];
        uint64_t v4 = (char **)&protocol witness table for PolicyBuilder.OptionalPolicy<A>;
        break;
      case 8:
        uint64_t v4 = (char **)&protocol witness table for DeviceModePolicy;
        uint64_t v5 = &type metadata for DeviceModePolicy;
        break;
      case 9:
        uint64_t v4 = &protocol witness table for DarwinInitPolicy;
        uint64_t v5 = &type metadata for DarwinInitPolicy;
        break;
      case 10:
        uint64_t v4 = (char **)&protocol witness table for RoutingHintPolicy;
        uint64_t v5 = &type metadata for RoutingHintPolicy;
        break;
      case 11:
        uint64_t v4 = (char **)&protocol witness table for EnsembleMembersPolicy;
        uint64_t v5 = &type metadata for EnsembleMembersPolicy;
        break;
      default:
        __break(1u);
        JUMPOUT(0x24A23C97CLL);
    }
    v0[26] = v5;
    Description = (void (**)(void))v5[-1].Description;
    v0[27] = Description;
    v0[28] = swift_task_alloc();
    Description[2]();
    uint64_t v10 = &v4[1][*(int *)v4[1]];
    uint64_t v7 = (void *)swift_task_alloc();
    v0[29] = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_24A23C4E0;
    uint64_t v9 = v0[15];
    uint64_t v8 = v0[16];
    return ((uint64_t (*)(uint64_t, uint64_t, ValueMetadata *, char **))v10)(v9, v8, v5, v4);
  }
}

uint64_t sub_24A23C9AC()
{
  uint64_t v1 = *(void *)(v0 + 152);
  swift_task_dealloc();
  sub_24A1B2D10(v1, &qword_26B1742B0);
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_24A23CA2C(uint64_t a1, uint64_t a2)
{
  v3[15] = a2;
  v3[16] = v2;
  v3[14] = a1;
  v3[17] = __swift_instantiateConcreteTypeFromMangledName(&qword_269778BD8);
  v3[18] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_24A23CAC8, 0, 0);
}

uint64_t sub_24A23CAC8()
{
  uint64_t v2 = (int *)v0[17];
  uint64_t v1 = v0[18];
  v0[19] = type metadata accessor for X509Policy();
  v0[2] = v1;
  v0[20] = __swift_instantiateConcreteTypeFromMangledName(&qword_269778BE0);
  v0[3] = v1 + v2[12];
  v0[4] = v1 + v2[16];
  v0[7] = v1 + v2[28];
  v0[21] = type metadata accessor for SecureConfigPolicy(0);
  v0[8] = v1 + v2[32];
  v0[22] = type metadata accessor for KeyOptionsPolicy(0);
  v0[9] = v1 + v2[36];
  v0[23] = type metadata accessor for SoftwareReleasePolicy();
  v0[10] = v1 + v2[40];
  v0[11] = v1 + v2[44];
  v0[12] = v1 + v2[48];
  v0[13] = v1 + v2[52];
  sub_24A23C004((uint64_t)(v0 + 2));
  uint64_t v3 = v0[19];
  v0[24] = 0;
  v0[25] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v0[26] = v4;
  v0[27] = swift_task_alloc();
  (*(void (**)(void))(v4 + 16))();
  uint64_t v9 = (char *)off_26FDFFB28 + *(int *)off_26FDFFB28;
  uint64_t v5 = (void *)swift_task_alloc();
  v0[28] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_24A23CD1C;
  uint64_t v7 = v0[14];
  uint64_t v6 = v0[15];
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, _UNKNOWN **))v9)(v7, v6, v3, &protocol witness table for X509Policy);
}

uint64_t sub_24A23CD1C()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 232) = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v2[26] + 8))(v2[27], v2[25]);
  if (v0)
  {
    uint64_t v3 = sub_24A23D1CC;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v3 = sub_24A23CE90;
  }
  return MEMORY[0x270FA2498](v3, 0, 0);
}

uint64_t sub_24A23CE90()
{
  uint64_t v1 = v0[24];
  if (v1 == 11)
  {
    sub_24A1B2D10(v0[18], &qword_269778BD8);
    swift_task_dealloc();
    uint64_t v2 = (uint64_t (*)(void))v0[1];
    return v2();
  }
  else
  {
    v0[24] = v1 + 1;
    uint64_t v4 = &protocol witness table for SEPAttestationPolicy;
    uint64_t v5 = &type metadata for SEPAttestationPolicy;
    switch(v1)
    {
      case 0:
        uint64_t v5 = (ValueMetadata *)v0[20];
        uint64_t v4 = (char **)&protocol witness table for PolicyBuilder.OptionalPolicy<A>;
        break;
      case 1:
        break;
      case 2:
        uint64_t v4 = (char **)&protocol witness table for APTicketPolicy;
        uint64_t v5 = &type metadata for APTicketPolicy;
        break;
      case 3:
        uint64_t v4 = (char **)&protocol witness table for SEPImagePolicy;
        uint64_t v5 = &type metadata for SEPImagePolicy;
        break;
      case 4:
        uint64_t v4 = (char **)&protocol witness table for CryptexPolicy;
        uint64_t v5 = &type metadata for CryptexPolicy;
        break;
      case 5:
        uint64_t v5 = (ValueMetadata *)v0[21];
        uint64_t v4 = (char **)&protocol witness table for SecureConfigPolicy;
        break;
      case 6:
        uint64_t v5 = (ValueMetadata *)v0[22];
        uint64_t v4 = (char **)&protocol witness table for KeyOptionsPolicy;
        break;
      case 7:
        uint64_t v5 = (ValueMetadata *)v0[23];
        uint64_t v4 = (char **)&protocol witness table for SoftwareReleasePolicy;
        break;
      case 8:
        uint64_t v4 = (char **)&protocol witness table for HardwareIdentifiersPolicy;
        uint64_t v5 = &type metadata for HardwareIdentifiersPolicy;
        break;
      case 9:
        uint64_t v4 = (char **)&protocol witness table for DeviceModePolicy;
        uint64_t v5 = &type metadata for DeviceModePolicy;
        break;
      case 10:
        uint64_t v4 = &protocol witness table for DarwinInitPolicy;
        uint64_t v5 = &type metadata for DarwinInitPolicy;
        break;
      default:
        __break(1u);
        JUMPOUT(0x24A23D1A0);
    }
    v0[25] = v5;
    Description = (void (**)(void))v5[-1].Description;
    v0[26] = Description;
    v0[27] = swift_task_alloc();
    Description[2]();
    uint64_t v10 = &v4[1][*(int *)v4[1]];
    uint64_t v7 = (void *)swift_task_alloc();
    v0[28] = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_24A23CD1C;
    uint64_t v9 = v0[14];
    uint64_t v8 = v0[15];
    return ((uint64_t (*)(uint64_t, uint64_t, ValueMetadata *, char **))v10)(v9, v8, v5, v4);
  }
}

uint64_t sub_24A23D1CC()
{
  uint64_t v1 = *(void *)(v0 + 144);
  swift_task_dealloc();
  sub_24A1B2D10(v1, &qword_269778BD8);
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

size_t sub_24A23D24C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B174B70);
  uint64_t v3 = *(void *)(sub_24A2A7480() - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (void *)swift_allocObject();
  size_t result = _swift_stdlib_malloc_size(v6);
  if (v4)
  {
    if (result - v5 != 0x8000000000000000 || v4 != -1)
    {
      uint64_t v6[2] = v1;
      BOOL v6[3] = 2 * ((uint64_t)(result - v5) / v4);
      uint64_t v9 = sub_24A2521F8(&v10, (uint64_t)v6 + v5, v1, a1);
      swift_bridgeObjectRetain();
      sub_24A1E01CC();
      if (v9 == v1) {
        return (size_t)v6;
      }
      __break(1u);
      return MEMORY[0x263F8EE78];
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_24A23D3A0(char *a1, int64_t a2)
{
  if (!a2) {
    return MEMORY[0x263F8EE78];
  }
  if (a2 > 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_26B174B98);
    uint64_t v4 = (char *)swift_allocObject();
    size_t v5 = _swift_stdlib_malloc_size(v4);
    *((void *)v4 + 2) = a2;
    *((void *)v4 + 3) = 2 * v5 - 64;
    uint64_t v6 = v4 + 32;
    if (&v4[a2 + 32] <= a1 || v6 >= &a1[a2])
    {
      memcpy(v6, a1, a2);
      return (uint64_t)v4;
    }
  }
  uint64_t result = sub_24A2A7D70();
  __break(1u);
  return result;
}

uint64_t sub_24A23D4C4(uint64_t a1, char *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_24A2A7480();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  sub_24A244B84(&qword_26B174A28, MEMORY[0x263F7BF30]);
  swift_bridgeObjectRetain();
  uint64_t v33 = a2;
  uint64_t v11 = sub_24A2A7790();
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  uint64_t v32 = v10 + 56;
  if ((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    uint64_t v28 = v2;
    uint64_t v29 = a1;
    uint64_t v30 = ~v12;
    uint64_t v27 = v7;
    char v16 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v15 = v7 + 16;
    uint64_t v14 = v16;
    uint64_t v31 = *(void *)(v15 + 56);
    char v17 = (void (**)(char *, uint64_t))(v15 - 8);
    v26[1] = v15 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    while (1)
    {
      uint64_t v18 = v10;
      unint64_t v19 = v31 * v13;
      int v20 = v14;
      v14(v9, *(void *)(v10 + 48) + v31 * v13, v6);
      sub_24A244B84(&qword_26B174A30, MEMORY[0x263F7BF30]);
      char v21 = sub_24A2A77E0();
      uint64_t v22 = *v17;
      (*v17)(v9, v6);
      if (v21) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v30;
      uint64_t v10 = v18;
      uint64_t v14 = v20;
      if (((*(void *)(v32 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = v28;
        a1 = v29;
        uint64_t v7 = v27;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v33, v6);
    v20(v29, *(void *)(*v28 + 48) + v19, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v14 = *(void (**)(void, void, void))(v7 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    int v24 = v33;
    v14(v9, v33, v6);
    uint64_t v34 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_24A23EDA0((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v34;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v24, v6);
    return 1;
  }
}

uint64_t sub_24A23D7E8(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v95 = *MEMORY[0x263EF8340];
  uint64_t v6 = *v3;
  sub_24A2A7F10();
  swift_bridgeObjectRetain();
  sub_24A2A6AE0();
  uint64_t v7 = sub_24A2A7F50();
  uint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  uint64_t v10 = v6 + 56;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_116:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)uint64_t __s1 = *(void *)v81;
    *(void *)uint64_t v81 = 0x8000000000000000;
    sub_24A1A52B0(a2, a3);
    sub_24A23F040(a2, a3, v9, isUniquelyReferenced_nonNull_native);
    *(void *)uint64_t v81 = *(void *)__s1;
    swift_bridgeObjectRelease();
    *a1 = a2;
    a1[1] = a3;
    return 1;
  }
  uint64_t v86 = ~v8;
  unint64_t v11 = a3 >> 62;
  BOOL v12 = __OFSUB__(HIDWORD(a2), a2);
  BOOL v84 = v12;
  uint64_t v83 = v6;
  size_t __n = BYTE6(a3);
  uint64_t v85 = v6 + 56;
  uint64_t v79 = (a2 >> 32) - (int)a2;
  uint64_t v80 = a2 >> 32;
  unint64_t v78 = a3;
  while (2)
  {
    unint64_t v13 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v9);
    uint64_t v14 = *v13;
    unint64_t v15 = v13[1];
    uint64_t v16 = 0;
    switch(v15 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(v14), v14))
        {
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
        }
        uint64_t v16 = HIDWORD(v14) - (int)v14;
LABEL_14:
        sub_24A1A52B0(v14, v15);
        break;
      case 2uLL:
        uint64_t v18 = *(void *)(v14 + 16);
        uint64_t v17 = *(void *)(v14 + 24);
        uint64_t v16 = v17 - v18;
        if (!__OFSUB__(v17, v18)) {
          goto LABEL_14;
        }
        goto LABEL_120;
      case 3uLL:
        break;
      default:
        uint64_t v16 = BYTE6(v15);
        break;
    }
    size_t v19 = __n;
    switch((int)v11)
    {
      case 1:
        size_t v19 = HIDWORD(a2) - (int)a2;
        if (v84) {
          goto LABEL_121;
        }
        goto LABEL_19;
      case 2:
        uint64_t v21 = *(void *)(a2 + 16);
        uint64_t v20 = *(void *)(a2 + 24);
        BOOL v22 = __OFSUB__(v20, v21);
        size_t v19 = v20 - v21;
        if (!v22) {
          goto LABEL_19;
        }
        goto LABEL_122;
      case 3:
        if (v16) {
          goto LABEL_7;
        }
        goto LABEL_117;
      default:
LABEL_19:
        if (v16 != v19)
        {
LABEL_7:
          sub_24A1A5384(v14, v15);
          goto LABEL_8;
        }
        if (v16 >= 1)
        {
          switch(v15 >> 62)
          {
            case 1uLL:
              if ((int)v14 > v14 >> 32) {
                goto LABEL_123;
              }
              uint64_t v27 = (char *)sub_24A2A68E0();
              if (!v27) {
                goto LABEL_33;
              }
              uint64_t v28 = sub_24A2A6910();
              if (__OFSUB__((int)v14, v28)) {
                goto LABEL_125;
              }
              v27 += (int)v14 - v28;
LABEL_33:
              sub_24A2A6900();
              uint64_t v10 = v85;
              if (v11)
              {
                if (v11 == 1)
                {
                  if (v80 < (int)a2) {
                    goto LABEL_134;
                  }
                  swift_retain();
                  uint64_t v29 = (char *)sub_24A2A68E0();
                  if (v29)
                  {
                    uint64_t v30 = sub_24A2A6910();
                    if (__OFSUB__((int)a2, v30)) {
                      goto LABEL_141;
                    }
                    v29 += (int)a2 - v30;
                  }
                  uint64_t v31 = sub_24A2A6900();
                  size_t v32 = (a2 >> 32) - (int)a2;
                  if (v31 < v79) {
                    size_t v32 = v31;
                  }
                  if (!v27) {
                    goto LABEL_143;
                  }
                  if (!v29) {
                    goto LABEL_144;
                  }
                  int v33 = memcmp(v27, v29, v32);
                  sub_24A1A5384(a2, a3);
                }
                else
                {
                  uint64_t v66 = *(void *)(a2 + 16);
                  uint64_t v65 = *(void *)(a2 + 24);
                  swift_retain();
                  swift_retain();
                  uint64_t v67 = (char *)sub_24A2A68E0();
                  if (v67)
                  {
                    uint64_t v68 = sub_24A2A6910();
                    if (__OFSUB__(v66, v68)) {
                      goto LABEL_140;
                    }
                    v67 += v66 - v68;
                  }
                  BOOL v22 = __OFSUB__(v65, v66);
                  int64_t v69 = v65 - v66;
                  if (v22) {
                    goto LABEL_135;
                  }
                  uint64_t v70 = sub_24A2A6900();
                  if (v70 >= v69) {
                    size_t v71 = v69;
                  }
                  else {
                    size_t v71 = v70;
                  }
                  if (!v27) {
                    goto LABEL_154;
                  }
                  a3 = v78;
                  uint64_t v6 = v83;
                  if (!v67) {
                    goto LABEL_155;
                  }
                  int v33 = memcmp(v27, v67, v71);
                  swift_release();
LABEL_112:
                  swift_release();
                }
                sub_24A1A5384(v14, v15);
LABEL_114:
                uint64_t v10 = v85;
                if (!v33) {
                  goto LABEL_118;
                }
              }
              else
              {
                *(void *)uint64_t __s1 = a2;
                *(_WORD *)&__s1[8] = a3;
                __s1[10] = BYTE2(a3);
                __s1[11] = BYTE3(a3);
                __s1[12] = BYTE4(a3);
                __s1[13] = BYTE5(a3);
                if (!v27) {
                  goto LABEL_153;
                }
                uint64_t v47 = (uint64_t *)__s1;
                uint64_t v46 = v27;
LABEL_99:
                int v45 = memcmp(v46, v47, __n);
LABEL_100:
                sub_24A1A5384(v14, v15);
                if (!v45) {
                  goto LABEL_118;
                }
              }
              break;
            case 2uLL:
              uint64_t v34 = *(void *)(v14 + 16);
              swift_retain();
              swift_retain();
              uint64_t v35 = (char *)sub_24A2A68E0();
              if (!v35) {
                goto LABEL_47;
              }
              uint64_t v36 = sub_24A2A6910();
              if (__OFSUB__(v34, v36)) {
                goto LABEL_124;
              }
              v35 += v34 - v36;
LABEL_47:
              sub_24A2A6900();
              uint64_t v6 = v83;
              if (!v11)
              {
                *(void *)uint64_t __s1 = a2;
                *(_WORD *)&__s1[8] = a3;
                __s1[10] = BYTE2(a3);
                __s1[11] = BYTE3(a3);
                __s1[12] = BYTE4(a3);
                __s1[13] = BYTE5(a3);
                if (!v35) {
                  goto LABEL_150;
                }
                int v33 = memcmp(v35, __s1, __n);
                swift_release();
                goto LABEL_112;
              }
              if (v11 == 1)
              {
                if (v80 < (int)a2) {
                  goto LABEL_128;
                }
                swift_retain();
                uint64_t v37 = (char *)sub_24A2A68E0();
                if (v37)
                {
                  uint64_t v38 = sub_24A2A6910();
                  if (__OFSUB__((int)a2, v38)) {
                    goto LABEL_139;
                  }
                  v37 += (int)a2 - v38;
                }
                uint64_t v39 = sub_24A2A6900();
                size_t v40 = (a2 >> 32) - (int)a2;
                if (v39 < v79) {
                  size_t v40 = v39;
                }
                if (!v35) {
                  goto LABEL_145;
                }
                if (!v37) {
                  goto LABEL_146;
                }
                int v33 = memcmp(v35, v37, v40);
                sub_24A1A5384(a2, a3);
                swift_release();
              }
              else
              {
                uint64_t v59 = *(void *)(a2 + 16);
                uint64_t v77 = *(void *)(a2 + 24);
                swift_retain();
                swift_retain();
                uint64_t v60 = (char *)sub_24A2A68E0();
                if (v60)
                {
                  uint64_t v61 = sub_24A2A6910();
                  if (__OFSUB__(v59, v61)) {
                    goto LABEL_138;
                  }
                  v60 += v59 - v61;
                }
                BOOL v22 = __OFSUB__(v77, v59);
                int64_t v62 = v77 - v59;
                if (v22) {
                  goto LABEL_133;
                }
                uint64_t v63 = sub_24A2A6900();
                if (v63 >= v62) {
                  size_t v64 = v62;
                }
                else {
                  size_t v64 = v63;
                }
                if (!v35) {
                  goto LABEL_151;
                }
                a3 = v78;
                if (!v60) {
                  goto LABEL_152;
                }
                int v33 = memcmp(v35, v60, v64);
                swift_release();
                swift_release();
                swift_release();
              }
              swift_release();
              sub_24A1A5384(v14, v15);
              uint64_t v6 = v83;
              goto LABEL_114;
            case 3uLL:
              *(void *)&__s1[6] = 0;
              *(void *)uint64_t __s1 = 0;
              if (!v11) {
                goto LABEL_67;
              }
              if (v11 == 1)
              {
                if (v80 < (int)a2) {
                  goto LABEL_127;
                }
                sub_24A1A52B0(a2, a3);
                uint64_t v41 = sub_24A2A68E0();
                if (!v41) {
                  goto LABEL_147;
                }
                uint64_t v24 = v41;
                uint64_t v42 = sub_24A2A6910();
                uint64_t v26 = (int)a2 - v42;
                if (__OFSUB__((int)a2, v42)) {
                  goto LABEL_132;
                }
LABEL_63:
                uint64_t v43 = sub_24A2A6900();
                if (v43 >= v79) {
                  size_t v44 = (a2 >> 32) - (int)a2;
                }
                else {
                  size_t v44 = v43;
                }
                int v45 = memcmp(__s1, (const void *)(v24 + v26), v44);
                a3 = v78;
                sub_24A1A5384(a2, v78);
                goto LABEL_100;
              }
              uint64_t v54 = *(void *)(a2 + 16);
              uint64_t v55 = *(void *)(a2 + 24);
              swift_retain();
              swift_retain();
              uint64_t v50 = (char *)sub_24A2A68E0();
              if (v50)
              {
                uint64_t v56 = sub_24A2A6910();
                if (__OFSUB__(v54, v56)) {
                  goto LABEL_137;
                }
                v50 += v54 - v56;
              }
              BOOL v22 = __OFSUB__(v55, v54);
              int64_t v52 = v55 - v54;
              if (v22) {
                goto LABEL_130;
              }
              uint64_t v53 = sub_24A2A6900();
              if (!v50) {
                goto LABEL_149;
              }
LABEL_79:
              if (v53 >= v52) {
                size_t v57 = v52;
              }
              else {
                size_t v57 = v53;
              }
              int v58 = memcmp(__s1, v50, v57);
              swift_release();
              swift_release();
              sub_24A1A5384(v14, v15);
              uint64_t v6 = v83;
              uint64_t v10 = v85;
              if (!v58) {
                goto LABEL_118;
              }
              break;
            default:
              *(void *)uint64_t __s1 = v14;
              *(_WORD *)&__s1[8] = v15;
              __s1[10] = BYTE2(v15);
              __s1[11] = BYTE3(v15);
              __s1[12] = BYTE4(v15);
              __s1[13] = BYTE5(v15);
              if (!v11)
              {
LABEL_67:
                uint64_t v88 = a2;
                __int16 v89 = a3;
                char v90 = BYTE2(a3);
                char v91 = BYTE3(a3);
                char v92 = BYTE4(a3);
                char v93 = BYTE5(a3);
                uint64_t v46 = __s1;
                uint64_t v47 = &v88;
                goto LABEL_99;
              }
              if (v11 == 1)
              {
                if (v80 < (int)a2) {
                  goto LABEL_126;
                }
                sub_24A1A52B0(a2, a3);
                uint64_t v23 = sub_24A2A68E0();
                if (!v23)
                {
                  sub_24A2A6900();
                  __break(1u);
LABEL_143:
                  __break(1u);
LABEL_144:
                  __break(1u);
LABEL_145:
                  __break(1u);
LABEL_146:
                  __break(1u);
LABEL_147:
                  sub_24A2A6900();
                  __break(1u);
LABEL_148:
                  __break(1u);
LABEL_149:
                  __break(1u);
LABEL_150:
                  __break(1u);
LABEL_151:
                  __break(1u);
LABEL_152:
                  __break(1u);
LABEL_153:
                  __break(1u);
LABEL_154:
                  __break(1u);
LABEL_155:
                  __break(1u);
                  JUMPOUT(0x24A23E204);
                }
                uint64_t v24 = v23;
                uint64_t v25 = sub_24A2A6910();
                uint64_t v26 = (int)a2 - v25;
                if (__OFSUB__((int)a2, v25)) {
                  goto LABEL_131;
                }
                goto LABEL_63;
              }
              uint64_t v48 = *(void *)(a2 + 16);
              uint64_t v49 = *(void *)(a2 + 24);
              swift_retain();
              swift_retain();
              uint64_t v50 = (char *)sub_24A2A68E0();
              if (v50)
              {
                uint64_t v51 = sub_24A2A6910();
                if (__OFSUB__(v48, v51)) {
                  goto LABEL_136;
                }
                v50 += v48 - v51;
              }
              BOOL v22 = __OFSUB__(v49, v48);
              int64_t v52 = v49 - v48;
              if (v22) {
                goto LABEL_129;
              }
              uint64_t v53 = sub_24A2A6900();
              if (!v50) {
                goto LABEL_148;
              }
              goto LABEL_79;
          }
LABEL_8:
          unint64_t v9 = (v9 + 1) & v86;
          if (((*(void *)(v10 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
            goto LABEL_116;
          }
          continue;
        }
LABEL_117:
        sub_24A1A5384(v14, v15);
LABEL_118:
        swift_bridgeObjectRelease();
        sub_24A1A5384(a2, a3);
        uint64_t v74 = (uint64_t *)(*(void *)(*(void *)v81 + 48) + 16 * v9);
        uint64_t v75 = *v74;
        unint64_t v76 = v74[1];
        *a1 = *v74;
        a1[1] = v76;
        sub_24A1A52B0(v75, v76);
        return 0;
    }
  }
}