uint64_t sub_24A23E234(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  BOOL v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v17;
  void *v18;
  BOOL v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;

  v7 = *v3;
  sub_24A2A7F10();
  swift_bridgeObjectRetain();
  sub_24A2A78A0();
  v8 = sub_24A2A7F50();
  v9 = -1 << *(unsigned char *)(v7 + 32);
  v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    v11 = *(void *)(v7 + 48);
    v12 = (void *)(v11 + 16 * v10);
    v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (sub_24A2A7E40() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v14 = (uint64_t *)(*(void *)(*v3 + 48) + 16 * v10);
      v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    v17 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v17;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        break;
      }
      v18 = (void *)(v11 + 16 * v10);
      v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (sub_24A2A7E40() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v21 = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_24A23FA64(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_24A23E3E4()
{
  v1 = v0;
  uint64_t v42 = sub_24A2A7480();
  uint64_t v2 = *(void *)(v42 - 8);
  MEMORY[0x270FA5388](v42);
  v41 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_269779678);
  uint64_t v5 = sub_24A2A7C40();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v8 = *(void *)(v4 + 56);
    v37 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & v8;
    v35 = v0;
    int64_t v36 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v39 = v2;
    uint64_t v11 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    uint64_t v38 = v6;
    v14 = v41;
    uint64_t v15 = v42;
    while (1)
    {
      if (v10)
      {
        unint64_t v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        int64_t v40 = v13;
        unint64_t v18 = v17 | (v13 << 6);
      }
      else
      {
        int64_t v19 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v19 >= v36) {
          goto LABEL_33;
        }
        unint64_t v20 = v37[v19];
        int64_t v21 = v13 + 1;
        if (!v20)
        {
          int64_t v21 = v13 + 2;
          if (v13 + 2 >= v36) {
            goto LABEL_33;
          }
          unint64_t v20 = v37[v21];
          if (!v20)
          {
            int64_t v21 = v13 + 3;
            if (v13 + 3 >= v36) {
              goto LABEL_33;
            }
            unint64_t v20 = v37[v21];
            if (!v20)
            {
              uint64_t v22 = v13 + 4;
              if (v13 + 4 >= v36)
              {
LABEL_33:
                swift_release();
                v1 = v35;
                uint64_t v34 = 1 << *(unsigned char *)(v4 + 32);
                if (v34 > 63) {
                  bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  void *v37 = -1 << v34;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              unint64_t v20 = v37[v22];
              if (!v20)
              {
                while (1)
                {
                  int64_t v21 = v22 + 1;
                  if (__OFADD__(v22, 1)) {
                    goto LABEL_39;
                  }
                  if (v21 >= v36) {
                    goto LABEL_33;
                  }
                  unint64_t v20 = v37[v21];
                  ++v22;
                  if (v20) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v21 = v13 + 4;
            }
          }
        }
LABEL_23:
        unint64_t v10 = (v20 - 1) & v20;
        int64_t v40 = v21;
        unint64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
      }
      uint64_t v23 = v4;
      uint64_t v24 = *(void *)(v4 + 48);
      uint64_t v25 = *(void *)(v39 + 72);
      v26 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 32);
      v26(v14, v24 + v25 * v18, v15);
      uint64_t v6 = v38;
      sub_24A244B84(&qword_26B174A28, MEMORY[0x263F7BF30]);
      uint64_t result = sub_24A2A7790();
      uint64_t v27 = -1 << *(unsigned char *)(v6 + 32);
      unint64_t v28 = result & ~v27;
      unint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v30 = 0;
        unint64_t v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v32 = v29 == v31;
          if (v29 == v31) {
            unint64_t v29 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v11 + 8 * v29);
        }
        while (v33 == -1);
        unint64_t v16 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(void *)(v11 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v6 + 48) + v16 * v25, v41, v42);
      ++*(void *)(v6 + 16);
      uint64_t v4 = v23;
      int64_t v13 = v40;
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v6;
  return result;
}

uint64_t sub_24A23E7E0()
{
  v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_269779670);
  uint64_t v3 = sub_24A2A7C40();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    char v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v15 = v14 | (v11 << 6);
      }
      else
      {
        int64_t v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8) {
          goto LABEL_33;
        }
        unint64_t v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          int64_t v11 = v16 + 1;
          if (v16 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v17 = v30[v11];
          if (!v17)
          {
            int64_t v11 = v16 + 2;
            if (v16 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v17 = v30[v11];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                v1 = v0;
                uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
                if (v29 > 63) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *char v30 = -1 << v29;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v11 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v30[v11];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v11 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      int64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      sub_24A2A7F10();
      sub_24A2A6AE0();
      uint64_t result = sub_24A2A7F50();
      uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      int64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
      *int64_t v13 = v20;
      v13[1] = v21;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

uint64_t sub_24A23EAC0()
{
  v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_269779648);
  uint64_t v3 = sub_24A2A7C40();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    char v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v15 = v14 | (v11 << 6);
      }
      else
      {
        int64_t v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8) {
          goto LABEL_33;
        }
        unint64_t v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          int64_t v11 = v16 + 1;
          if (v16 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v17 = v30[v11];
          if (!v17)
          {
            int64_t v11 = v16 + 2;
            if (v16 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v17 = v30[v11];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                v1 = v0;
                uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
                if (v29 > 63) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *char v30 = -1 << v29;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v11 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v30[v11];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v11 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      int64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      sub_24A2A7F10();
      sub_24A2A78A0();
      uint64_t result = sub_24A2A7F50();
      uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      int64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
      *int64_t v13 = v20;
      v13[1] = v21;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

uint64_t sub_24A23EDA0(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v31 = a1;
  uint64_t v6 = sub_24A2A7480();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = *(void *)(*v3 + 16);
  unint64_t v11 = *(void *)(*v3 + 24);
  uint64_t v28 = v3;
  uint64_t v29 = v7;
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    sub_24A23E3E4();
  }
  else
  {
    if (v11 > v10)
    {
      sub_24A23FC00();
      goto LABEL_12;
    }
    sub_24A24020C();
  }
  uint64_t v12 = *v3;
  sub_24A244B84(&qword_26B174A28, MEMORY[0x263F7BF30]);
  uint64_t v13 = sub_24A2A7790();
  uint64_t v14 = -1 << *(unsigned char *)(v12 + 32);
  a2 = v13 & ~v14;
  uint64_t v30 = v12;
  uint64_t v15 = v12 + 56;
  if ((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v16 = ~v14;
    int64_t v19 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v18 = v7 + 16;
    unint64_t v17 = v19;
    uint64_t v20 = *(void *)(v18 + 56);
    do
    {
      v17(v9, *(void *)(v30 + 48) + v20 * a2, v6);
      sub_24A244B84(&qword_26B174A30, MEMORY[0x263F7BF30]);
      char v21 = sub_24A2A77E0();
      (*(void (**)(char *, uint64_t))(v18 - 8))(v9, v6);
      if (v21) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v16;
    }
    while (((*(void *)(v15 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v22 = v29;
  uint64_t v23 = *v28;
  *(void *)(v23 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v22 + 32))(*(void *)(v23 + 48) + *(void *)(v22 + 72) * a2, v31, v6);
  uint64_t v25 = *(void *)(v23 + 16);
  BOOL v26 = __OFADD__(v25, 1);
  uint64_t v27 = v25 + 1;
  if (!v26)
  {
    *(void *)(v23 + 16) = v27;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = sub_24A2A7E70();
  __break(1u);
  return result;
}

uint64_t sub_24A23F040(uint64_t result, unint64_t a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v8 = result;
  uint64_t v96 = *MEMORY[0x263EF8340];
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 <= v9 || (a4 & 1) == 0)
  {
    if (a4)
    {
      sub_24A23E7E0();
    }
    else
    {
      if (v10 > v9)
      {
        uint64_t result = (uint64_t)sub_24A23FEA4();
        goto LABEL_123;
      }
      sub_24A2405BC();
    }
    uint64_t v11 = *v4;
    sub_24A2A7F10();
    sub_24A2A6AE0();
    uint64_t result = sub_24A2A7F50();
    uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
    a3 = result & ~v12;
    uint64_t v13 = v11 + 56;
    if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
    {
      uint64_t v88 = ~v12;
      uint64_t v84 = v11;
      uint64_t v86 = v11 + 56;
      BOOL v14 = __OFSUB__(HIDWORD(v8), v8);
      BOOL v85 = v14;
      unint64_t v87 = a2 >> 62;
      uint64_t v82 = (v8 >> 32) - (int)v8;
      uint64_t v83 = v8 >> 32;
      v81 = v4;
      while (1)
      {
        uint64_t v15 = (uint64_t *)(*(void *)(v11 + 48) + 16 * a3);
        uint64_t v17 = *v15;
        unint64_t v16 = v15[1];
        uint64_t v18 = 0;
        switch(v16 >> 62)
        {
          case 1uLL:
            if (__OFSUB__(HIDWORD(v17), v17))
            {
              __break(1u);
LABEL_126:
              __break(1u);
LABEL_127:
              __break(1u);
LABEL_128:
              __break(1u);
LABEL_129:
              __break(1u);
LABEL_130:
              __break(1u);
LABEL_131:
              __break(1u);
LABEL_132:
              __break(1u);
LABEL_133:
              __break(1u);
LABEL_134:
              __break(1u);
LABEL_135:
              __break(1u);
LABEL_136:
              __break(1u);
LABEL_137:
              __break(1u);
LABEL_138:
              __break(1u);
LABEL_139:
              __break(1u);
LABEL_140:
              __break(1u);
LABEL_141:
              __break(1u);
LABEL_142:
              __break(1u);
LABEL_143:
              __break(1u);
LABEL_144:
              __break(1u);
LABEL_145:
              __break(1u);
LABEL_146:
              __break(1u);
LABEL_147:
              __break(1u);
LABEL_148:
              __break(1u);
            }
            uint64_t v18 = HIDWORD(v17) - (int)v17;
LABEL_21:
            sub_24A1A52B0(v17, v16);
LABEL_22:
            uint64_t v21 = BYTE6(a2);
            switch(a2 >> 62)
            {
              case 1uLL:
                uint64_t v21 = HIDWORD(v8) - (int)v8;
                if (v85) {
                  goto LABEL_127;
                }
                goto LABEL_26;
              case 2uLL:
                uint64_t v23 = *(void *)(v8 + 16);
                uint64_t v22 = *(void *)(v8 + 24);
                BOOL v24 = __OFSUB__(v22, v23);
                uint64_t v21 = v22 - v23;
                if (!v24) {
                  goto LABEL_26;
                }
                goto LABEL_128;
              case 3uLL:
                if (v18) {
                  goto LABEL_14;
                }
                goto LABEL_163;
              default:
LABEL_26:
                if (v18 != v21)
                {
LABEL_14:
                  uint64_t result = sub_24A1A5384(v17, v16);
                  goto LABEL_15;
                }
                if (v18 < 1) {
                  goto LABEL_163;
                }
                break;
            }
            break;
          case 2uLL:
            uint64_t v20 = *(void *)(v17 + 16);
            uint64_t v19 = *(void *)(v17 + 24);
            uint64_t v18 = v19 - v20;
            if (!__OFSUB__(v19, v20)) {
              goto LABEL_21;
            }
            goto LABEL_126;
          case 3uLL:
            goto LABEL_22;
          default:
            uint64_t v18 = BYTE6(v16);
            goto LABEL_22;
        }
        switch(v16 >> 62)
        {
          case 1uLL:
            if ((int)v17 > v17 >> 32) {
              goto LABEL_130;
            }
            v43 = (unsigned char *)sub_24A2A68E0();
            if (!v43) {
              goto LABEL_63;
            }
            uint64_t v44 = sub_24A2A6910();
            if (__OFSUB__((int)v17, v44)) {
              goto LABEL_132;
            }
            v43 += (int)v17 - v44;
LABEL_63:
            sub_24A2A6900();
            uint64_t v13 = v86;
            if (!v87)
            {
              *(void *)__s1 = v8;
              *(_WORD *)&__s1[8] = a2;
              __s1[10] = BYTE2(a2);
              __s1[11] = BYTE3(a2);
              __s1[12] = BYTE4(a2);
              __s1[13] = BYTE5(a2);
              if (!v43) {
                goto LABEL_158;
              }
              v50 = (uint64_t *)__s1;
              v49 = v43;
LABEL_107:
              int v68 = memcmp(v49, v50, BYTE6(a2));
              uint64_t result = sub_24A1A5384(v17, v16);
              if (!v68) {
                goto LABEL_164;
              }
              goto LABEL_15;
            }
            if (v87 == 1)
            {
              if (v83 < (int)v8) {
                goto LABEL_141;
              }
              swift_retain();
              uint64_t v45 = sub_24A2A68E0();
              if (v45)
              {
                uint64_t v46 = sub_24A2A6910();
                if (__OFSUB__((int)v8, v46)) {
                  goto LABEL_148;
                }
                v45 += (int)v8 - v46;
              }
              uint64_t v47 = sub_24A2A6900();
              uint64_t v48 = (v8 >> 32) - (int)v8;
              if (v47 < v82) {
                uint64_t v48 = v47;
              }
              if (!v43) {
                goto LABEL_153;
              }
              if (!v45) {
                goto LABEL_154;
              }
              size_t v41 = v48;
              uint64_t v42 = v43;
              int64_t v40 = (const void *)v45;
              goto LABEL_74;
            }
            uint64_t v69 = *(void *)(v8 + 16);
            uint64_t v70 = *(void *)(v8 + 24);
            swift_retain();
            swift_retain();
            v71 = (char *)sub_24A2A68E0();
            if (v71)
            {
              uint64_t v72 = sub_24A2A6910();
              if (__OFSUB__(v69, v72)) {
                goto LABEL_147;
              }
              v71 += v69 - v72;
            }
            BOOL v24 = __OFSUB__(v70, v69);
            int64_t v73 = v70 - v69;
            if (v24) {
              goto LABEL_142;
            }
            uint64_t v74 = sub_24A2A6900();
            if (v74 >= v73) {
              size_t v75 = v73;
            }
            else {
              size_t v75 = v74;
            }
            uint64_t v5 = v81;
            if (!v43) {
              goto LABEL_161;
            }
            uint64_t v11 = v84;
            if (!v71) {
              goto LABEL_162;
            }
            int v36 = memcmp(v43, v71, v75);
            swift_release();
            goto LABEL_119;
          case 2uLL:
            uint64_t v29 = *(void *)(v17 + 16);
            swift_retain();
            swift_retain();
            uint64_t v30 = (char *)sub_24A2A68E0();
            if (!v30) {
              goto LABEL_39;
            }
            uint64_t v31 = sub_24A2A6910();
            if (__OFSUB__(v29, v31)) {
              goto LABEL_131;
            }
            v30 += v29 - v31;
LABEL_39:
            sub_24A2A6900();
            uint64_t v11 = v84;
            if (v87)
            {
              if (v87 == 1)
              {
                if (v83 < (int)v8) {
                  goto LABEL_135;
                }
                swift_retain();
                BOOL v32 = (char *)sub_24A2A68E0();
                if (v32)
                {
                  uint64_t v33 = sub_24A2A6910();
                  if (__OFSUB__((int)v8, v33)) {
                    goto LABEL_146;
                  }
                  v32 += (int)v8 - v33;
                }
                uint64_t v34 = sub_24A2A6900();
                size_t v35 = (v8 >> 32) - (int)v8;
                if (v34 < v82) {
                  size_t v35 = v34;
                }
                if (!v30) {
                  goto LABEL_150;
                }
                if (!v32) {
                  goto LABEL_151;
                }
                int v36 = memcmp(v30, v32, v35);
                sub_24A1A5384(v8, a2);
                swift_release();
              }
              else
              {
                uint64_t v62 = *(void *)(v8 + 16);
                uint64_t v80 = *(void *)(v8 + 24);
                swift_retain();
                swift_retain();
                v63 = (char *)sub_24A2A68E0();
                if (v63)
                {
                  uint64_t v64 = sub_24A2A6910();
                  if (__OFSUB__(v62, v64)) {
                    goto LABEL_145;
                  }
                  v63 += v62 - v64;
                }
                BOOL v24 = __OFSUB__(v80, v62);
                int64_t v65 = v80 - v62;
                if (v24) {
                  goto LABEL_140;
                }
                uint64_t v66 = sub_24A2A6900();
                if (v66 >= v65) {
                  size_t v67 = v65;
                }
                else {
                  size_t v67 = v66;
                }
                if (!v30) {
                  goto LABEL_159;
                }
                uint64_t v11 = v84;
                if (!v63) {
                  goto LABEL_160;
                }
                int v36 = memcmp(v30, v63, v67);
                swift_release();
                swift_release();
                swift_release();
              }
              swift_release();
              uint64_t result = sub_24A1A5384(v17, v16);
              uint64_t v5 = v81;
            }
            else
            {
              *(void *)__s1 = v8;
              *(_WORD *)&__s1[8] = a2;
              __s1[10] = BYTE2(a2);
              __s1[11] = BYTE3(a2);
              __s1[12] = BYTE4(a2);
              __s1[13] = BYTE5(a2);
              if (!v30) {
                goto LABEL_157;
              }
              int v36 = memcmp(v30, __s1, BYTE6(a2));
              swift_release();
LABEL_119:
              swift_release();
LABEL_120:
              uint64_t result = sub_24A1A5384(v17, v16);
            }
            uint64_t v13 = v86;
            if (!v36) {
              goto LABEL_164;
            }
            goto LABEL_15;
          case 3uLL:
            *(void *)&__s1[6] = 0;
            *(void *)__s1 = 0;
            if (!v87) {
              goto LABEL_75;
            }
            if (v87 == 1)
            {
              if (v83 < (int)v8) {
                goto LABEL_134;
              }
              sub_24A1A52B0(v8, a2);
              uint64_t v37 = sub_24A2A68E0();
              if (!v37) {
                goto LABEL_152;
              }
              uint64_t v26 = v37;
              uint64_t v38 = sub_24A2A6910();
              uint64_t v28 = (int)v8 - v38;
              if (__OFSUB__((int)v8, v38)) {
                goto LABEL_139;
              }
              goto LABEL_55;
            }
            uint64_t v57 = *(void *)(v8 + 16);
            uint64_t v58 = *(void *)(v8 + 24);
            swift_retain();
            swift_retain();
            v53 = (char *)sub_24A2A68E0();
            if (v53)
            {
              uint64_t v59 = sub_24A2A6910();
              if (__OFSUB__(v57, v59)) {
                goto LABEL_144;
              }
              v53 += v57 - v59;
            }
            BOOL v24 = __OFSUB__(v58, v57);
            int64_t v55 = v58 - v57;
            if (v24) {
              goto LABEL_137;
            }
            uint64_t v56 = sub_24A2A6900();
            uint64_t v11 = v84;
            if (!v53) {
              goto LABEL_156;
            }
            goto LABEL_87;
          default:
            *(void *)__s1 = v17;
            *(_WORD *)&__s1[8] = v16;
            __s1[10] = BYTE2(v16);
            __s1[11] = BYTE3(v16);
            __s1[12] = BYTE4(v16);
            __s1[13] = BYTE5(v16);
            if (!v87)
            {
LABEL_75:
              uint64_t v89 = v8;
              __int16 v90 = a2;
              char v91 = BYTE2(a2);
              char v92 = BYTE3(a2);
              char v93 = BYTE4(a2);
              char v94 = BYTE5(a2);
              v49 = __s1;
              v50 = &v89;
              goto LABEL_107;
            }
            if (v87 == 1)
            {
              if (v83 < (int)v8) {
                goto LABEL_133;
              }
              sub_24A1A52B0(v8, a2);
              uint64_t v25 = sub_24A2A68E0();
              if (!v25)
              {
                sub_24A2A6900();
                __break(1u);
LABEL_150:
                __break(1u);
LABEL_151:
                __break(1u);
LABEL_152:
                sub_24A2A6900();
                __break(1u);
LABEL_153:
                __break(1u);
LABEL_154:
                __break(1u);
LABEL_155:
                __break(1u);
LABEL_156:
                __break(1u);
LABEL_157:
                __break(1u);
LABEL_158:
                __break(1u);
LABEL_159:
                __break(1u);
LABEL_160:
                __break(1u);
LABEL_161:
                __break(1u);
LABEL_162:
                __break(1u);
LABEL_163:
                sub_24A1A5384(v17, v16);
LABEL_164:
                sub_24A2A7E70();
                __break(1u);
                JUMPOUT(0x24A23FA34);
              }
              uint64_t v26 = v25;
              uint64_t v27 = sub_24A2A6910();
              uint64_t v28 = (int)v8 - v27;
              if (__OFSUB__((int)v8, v27)) {
                goto LABEL_138;
              }
LABEL_55:
              uint64_t v39 = sub_24A2A6900();
              int64_t v40 = (const void *)(v26 + v28);
              if (v39 >= v82) {
                size_t v41 = (v8 >> 32) - (int)v8;
              }
              else {
                size_t v41 = v39;
              }
              uint64_t v42 = __s1;
LABEL_74:
              int v36 = memcmp(v42, v40, v41);
              sub_24A1A5384(v8, a2);
              goto LABEL_120;
            }
            uint64_t v51 = *(void *)(v8 + 16);
            uint64_t v52 = *(void *)(v8 + 24);
            swift_retain();
            swift_retain();
            v53 = (char *)sub_24A2A68E0();
            if (v53)
            {
              uint64_t v54 = sub_24A2A6910();
              if (__OFSUB__(v51, v54)) {
                goto LABEL_143;
              }
              v53 += v51 - v54;
            }
            BOOL v24 = __OFSUB__(v52, v51);
            int64_t v55 = v52 - v51;
            if (v24) {
              goto LABEL_136;
            }
            uint64_t v56 = sub_24A2A6900();
            uint64_t v11 = v84;
            if (!v53) {
              goto LABEL_155;
            }
LABEL_87:
            if (v56 >= v55) {
              size_t v60 = v55;
            }
            else {
              size_t v60 = v56;
            }
            int v61 = memcmp(__s1, v53, v60);
            swift_release();
            swift_release();
            uint64_t result = sub_24A1A5384(v17, v16);
            uint64_t v13 = v86;
            if (!v61) {
              goto LABEL_164;
            }
LABEL_15:
            a3 = (a3 + 1) & v88;
            if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
              goto LABEL_123;
            }
            break;
        }
      }
    }
  }
LABEL_123:
  uint64_t v76 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v77 = (uint64_t *)(*(void *)(v76 + 48) + 16 * a3);
  uint64_t *v77 = v8;
  v77[1] = a2;
  uint64_t v78 = *(void *)(v76 + 16);
  BOOL v24 = __OFADD__(v78, 1);
  uint64_t v79 = v78 + 1;
  if (v24) {
    goto LABEL_129;
  }
  *(void *)(v76 + 16) = v79;
  return result;
}

uint64_t sub_24A23FA64(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    sub_24A23EAC0();
  }
  else
  {
    if (v10 > v9)
    {
      uint64_t result = (uint64_t)sub_24A240058();
      goto LABEL_22;
    }
    sub_24A240870();
  }
  uint64_t v11 = *v4;
  sub_24A2A7F10();
  sub_24A2A78A0();
  uint64_t result = sub_24A2A7F50();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    uint64_t v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (uint64_t result = sub_24A2A7E40(), (result & 1) != 0))
    {
LABEL_21:
      uint64_t result = sub_24A2A7E70();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        uint64_t v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          uint64_t result = sub_24A2A7E40();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  uint64_t v21 = (uint64_t *)(*(void *)(v20 + 48) + 16 * a3);
  *uint64_t v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

void *sub_24A23FC00()
{
  v1 = v0;
  uint64_t v2 = sub_24A2A7480();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_269779678);
  uint64_t v6 = *v0;
  uint64_t v7 = sub_24A2A7C30();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_27:
    uint64_t *v1 = v8;
    return result;
  }
  uint64_t v22 = v1;
  uint64_t result = (void *)(v7 + 56);
  unint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 56 + 8 * v10) {
    uint64_t result = memmove(result, (const void *)(v6 + 56), 8 * v10);
  }
  uint64_t v23 = v6 + 56;
  int64_t v11 = 0;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  uint64_t v12 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v6 + 56);
  int64_t v24 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v16 = v15 | (v11 << 6);
      goto LABEL_9;
    }
    int64_t v18 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v18 >= v24) {
      goto LABEL_25;
    }
    unint64_t v19 = *(void *)(v23 + 8 * v18);
    ++v11;
    if (!v19)
    {
      int64_t v11 = v18 + 1;
      if (v18 + 1 >= v24) {
        goto LABEL_25;
      }
      unint64_t v19 = *(void *)(v23 + 8 * v11);
      if (!v19)
      {
        int64_t v11 = v18 + 2;
        if (v18 + 2 >= v24) {
          goto LABEL_25;
        }
        unint64_t v19 = *(void *)(v23 + 8 * v11);
        if (!v19) {
          break;
        }
      }
    }
LABEL_24:
    unint64_t v14 = (v19 - 1) & v19;
    unint64_t v16 = __clz(__rbit64(v19)) + (v11 << 6);
LABEL_9:
    unint64_t v17 = *(void *)(v3 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(void *)(v6 + 48) + v17, v2);
    uint64_t result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(void *)(v8 + 48) + v17, v5, v2);
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v24)
  {
LABEL_25:
    uint64_t result = (void *)swift_release();
    v1 = v22;
    goto LABEL_27;
  }
  unint64_t v19 = *(void *)(v23 + 8 * v20);
  if (v19)
  {
    int64_t v11 = v20;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v11 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v11 >= v24) {
      goto LABEL_25;
    }
    unint64_t v19 = *(void *)(v23 + 8 * v11);
    ++v20;
    if (v19) {
      goto LABEL_24;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

void *sub_24A23FEA4()
{
  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_269779670);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_24A2A7C30();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19)
      {
        int64_t v9 = v18 + 2;
        if (v18 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v19 = *(void *)(v6 + 8 * v9);
        if (!v19) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    long long v17 = *(_OWORD *)(*(void *)(v2 + 48) + v16);
    *(_OWORD *)(*(void *)(v4 + 48) + v16) = v17;
    uint64_t result = (void *)sub_24A1A52B0(v17, *((unint64_t *)&v17 + 1));
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v13) {
    goto LABEL_28;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_24A240058()
{
  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_269779648);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_24A2A7C30();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    long long v17 = (void *)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = v17[1];
    unint64_t v19 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v19 = *v17;
    v19[1] = v18;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_24A24020C()
{
  v1 = v0;
  uint64_t v2 = sub_24A2A7480();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_269779678);
  uint64_t v7 = sub_24A2A7C40();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v8;
    return result;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v10 = *(void *)(v6 + 56);
  uint64_t v34 = v0;
  uint64_t v35 = v6 + 56;
  if (v9 < 64) {
    uint64_t v11 = ~(-1 << v9);
  }
  else {
    uint64_t v11 = -1;
  }
  unint64_t v12 = v11 & v10;
  int64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v37 = v3 + 16;
  uint64_t v13 = v7 + 56;
  uint64_t v38 = v3;
  unint64_t v14 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  int64_t v16 = 0;
  while (1)
  {
    if (v12)
    {
      unint64_t v18 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v19 = v18 | (v16 << 6);
      goto LABEL_24;
    }
    int64_t v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v20 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v20);
    ++v16;
    if (!v21)
    {
      int64_t v16 = v20 + 1;
      if (v20 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v21 = *(void *)(v35 + 8 * v16);
      if (!v21)
      {
        int64_t v16 = v20 + 2;
        if (v20 + 2 >= v36) {
          goto LABEL_33;
        }
        unint64_t v21 = *(void *)(v35 + 8 * v16);
        if (!v21) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_24:
    uint64_t v23 = v6;
    uint64_t v24 = *(void *)(v6 + 48);
    uint64_t v25 = *(void *)(v38 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v5, v24 + v25 * v19, v2);
    sub_24A244B84(&qword_26B174A28, MEMORY[0x263F7BF30]);
    uint64_t result = sub_24A2A7790();
    uint64_t v26 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v27 = result & ~v26;
    unint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v29 = 0;
      unint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v31 = v28 == v30;
        if (v28 == v30) {
          unint64_t v28 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v13 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v17 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t result = (*v14)(*(void *)(v8 + 48) + v17 * v25, v5, v2);
    ++*(void *)(v8 + 16);
    uint64_t v6 = v23;
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v36)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    v1 = v34;
    goto LABEL_35;
  }
  unint64_t v21 = *(void *)(v35 + 8 * v22);
  if (v21)
  {
    int64_t v16 = v22;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v16 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v16 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v16);
    ++v22;
    if (v21) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_24A2405BC()
{
  v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_269779670);
  uint64_t v3 = sub_24A2A7C40();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      int64_t v11 = v16 + 1;
      if (v16 + 1 >= v29) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v11);
      if (!v17)
      {
        int64_t v11 = v16 + 2;
        if (v16 + 2 >= v29) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v11);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    unint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v20 = *v19;
    unint64_t v21 = v19[1];
    sub_24A2A7F10();
    sub_24A1A52B0(v20, v21);
    sub_24A2A6AE0();
    uint64_t result = sub_24A2A7F50();
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    uint64_t v13 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v12);
    *uint64_t v13 = v20;
    v13[1] = v21;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    v1 = v0;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v11 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v11);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_24A240870()
{
  v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_269779648);
  uint64_t v3 = sub_24A2A7C40();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      int64_t v11 = v16 + 1;
      if (v16 + 1 >= v29) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v11);
      if (!v17)
      {
        int64_t v11 = v16 + 2;
        if (v16 + 2 >= v29) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v11);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    unint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    sub_24A2A7F10();
    swift_bridgeObjectRetain();
    sub_24A2A78A0();
    uint64_t result = sub_24A2A7F50();
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    uint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
    *uint64_t v13 = v20;
    v13[1] = v21;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    v1 = v0;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v11 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v11);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_24A240B20(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_269779648);
    uint64_t v3 = sub_24A2A7C50();
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 56;
    uint64_t v25 = a1 + 32;
    while (1)
    {
      uint64_t v6 = (uint64_t *)(v25 + 16 * v4);
      uint64_t v8 = *v6;
      uint64_t v7 = v6[1];
      sub_24A2A7F10();
      swift_bridgeObjectRetain();
      sub_24A2A78A0();
      uint64_t result = sub_24A2A7F50();
      uint64_t v10 = -1 << *(unsigned char *)(v3 + 32);
      unint64_t v11 = result & ~v10;
      unint64_t v12 = v11 >> 6;
      uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
      uint64_t v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        uint64_t v15 = *(void *)(v3 + 48);
        int64_t v16 = (void *)(v15 + 16 * v11);
        BOOL v17 = *v16 == v8 && v16[1] == v7;
        if (v17 || (uint64_t result = sub_24A2A7E40(), (result & 1) != 0))
        {
LABEL_3:
          swift_bridgeObjectRelease();
          goto LABEL_4;
        }
        uint64_t v18 = ~v10;
        while (1)
        {
          unint64_t v11 = (v11 + 1) & v18;
          unint64_t v12 = v11 >> 6;
          uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
          uint64_t v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0) {
            break;
          }
          unint64_t v19 = (void *)(v15 + 16 * v11);
          if (*v19 != v8 || v19[1] != v7)
          {
            uint64_t result = sub_24A2A7E40();
            if ((result & 1) == 0) {
              continue;
            }
          }
          goto LABEL_3;
        }
      }
      *(void *)(v5 + 8 * v12) = v14 | v13;
      uint64_t v21 = (void *)(*(void *)(v3 + 48) + 16 * v11);
      *uint64_t v21 = v8;
      v21[1] = v7;
      uint64_t v22 = *(void *)(v3 + 16);
      BOOL v23 = __OFADD__(v22, 1);
      uint64_t v24 = v22 + 1;
      if (v23)
      {
        __break(1u);
        return result;
      }
      *(void *)(v3 + 16) = v24;
LABEL_4:
      if (++v4 == v1) {
        return v3;
      }
    }
  }
  return MEMORY[0x263F8EE88];
}

uint64_t sub_24A240CC4(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v3 = v2;
  uint64_t v6 = a1 + 64;
  uint64_t v7 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(a1 + 64);
  int64_t v22 = (unint64_t)(v7 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v11 = 0;
  if (!v9) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v12 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (unint64_t i = v12 | (v11 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v11 << 6))
  {
    BOOL v17 = (uint64_t *)(*(void *)(a1 + 48) + 16 * i);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    uint64_t v20 = *(void *)(*(void *)(a1 + 56) + 8 * i);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    a2(v18, v19, v20);
    if (v3)
    {
      swift_release();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if (v9) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v11++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v11 >= v22) {
      return swift_release();
    }
    unint64_t v15 = *(void *)(v6 + 8 * v11);
    if (!v15)
    {
      int64_t v16 = v11 + 1;
      if (v11 + 1 >= v22) {
        return swift_release();
      }
      unint64_t v15 = *(void *)(v6 + 8 * v16);
      if (v15) {
        goto LABEL_14;
      }
      int64_t v16 = v11 + 2;
      if (v11 + 2 >= v22) {
        return swift_release();
      }
      unint64_t v15 = *(void *)(v6 + 8 * v16);
      if (v15) {
        goto LABEL_14;
      }
      int64_t v16 = v11 + 3;
      if (v11 + 3 >= v22) {
        return swift_release();
      }
      unint64_t v15 = *(void *)(v6 + 8 * v16);
      if (v15)
      {
LABEL_14:
        int64_t v11 = v16;
        goto LABEL_15;
      }
      int64_t v21 = v11 + 4;
      if (v11 + 4 >= v22) {
        return swift_release();
      }
      unint64_t v15 = *(void *)(v6 + 8 * v21);
      v11 += 4;
      if (!v15) {
        break;
      }
    }
LABEL_15:
    unint64_t v9 = (v15 - 1) & v15;
  }
  while (1)
  {
    int64_t v11 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v11 >= v22) {
      return swift_release();
    }
    unint64_t v15 = *(void *)(v6 + 8 * v11);
    ++v21;
    if (v15) {
      goto LABEL_15;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_24A240EAC@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_24A239388(a1, a2, a3);
}

uint64_t sub_24A240EC8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t type metadata accessor for EnsembleChannelSecurity.Follower(uint64_t a1)
{
  return sub_24A1AE704(a1, (uint64_t *)&unk_269779600);
}

uint64_t sub_24A240F48(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t sub_24A240FB0()
{
  unint64_t result = qword_2697795C8;
  if (!qword_2697795C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2697795C8);
  }
  return result;
}

unint64_t sub_24A241004()
{
  unint64_t result = qword_2697795D0;
  if (!qword_2697795D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2697795D0);
  }
  return result;
}

unint64_t sub_24A24104C()
{
  unint64_t result = qword_2697795E0;
  if (!qword_2697795E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2697795E0);
  }
  return result;
}

unint64_t sub_24A241098()
{
  unint64_t result = qword_2697795E8;
  if (!qword_2697795E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2697795E8);
  }
  return result;
}

ValueMetadata *type metadata accessor for EnsembleChannelSecurity()
{
  return &type metadata for EnsembleChannelSecurity;
}

uint64_t *initializeBufferWithCopyOfBuffer for EnsembleChannelSecurity.Leader(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v27 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v27 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    a1[2] = a2[2];
    uint64_t v6 = a3[6];
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    unint64_t v9 = *(void **)((char *)a2 + v6);
    *(uint64_t *)((char *)a1 + v6) = (uint64_t)v9;
    uint64_t v42 = (int *)type metadata accessor for EnsembleHPKE.Leader(0);
    v43 = v8;
    uint64_t v10 = v42[5];
    uint64_t v44 = v7;
    int64_t v11 = &v7[v10];
    unint64_t v12 = &v8[v10];
    uint64_t v13 = sub_24A2A7480();
    uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v15 = v9;
    v14(v11, v12, v13);
    uint64_t v16 = *(int *)(type metadata accessor for Release() + 20);
    *(void *)&v11[v16] = *(void *)&v12[v16];
    BOOL v17 = (int *)type metadata accessor for EnsembleValidator();
    uint64_t v18 = v17[5];
    uint64_t v19 = &v11[v18];
    uint64_t v20 = &v12[v18];
    *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
    *((void *)v19 + 2) = *((void *)v20 + 2);
    *(_DWORD *)&v11[v17[6]] = *(_DWORD *)&v12[v17[6]];
    v11[v17[7]] = v12[v17[7]];
    v11[v17[8]] = v12[v17[8]];
    v11[v17[9]] = v12[v17[9]];
    v11[v17[10]] = v12[v17[10]];
    v11[v17[11]] = v12[v17[11]];
    *(void *)&v11[v17[12]] = *(void *)&v12[v17[12]];
    uint64_t v21 = v17[13];
    __dst = &v11[v21];
    int64_t v22 = &v12[v21];
    uint64_t v23 = sub_24A2A6BC0();
    uint64_t v24 = *(void *)(v23 - 8);
    uint64_t v25 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v25(v22, 1, v23))
    {
      uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B173100);
      memcpy(__dst, v22, *(void *)(*(void *)(v26 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 16))(__dst, v22, v23);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(__dst, 0, 1, v23);
    }
    v11[v17[14]] = v12[v17[14]];
    v11[v17[15]] = v12[v17[15]];
    v11[v17[16]] = v12[v17[16]];
    uint64_t v28 = v42[6];
    int64_t v29 = &v44[v28];
    unint64_t v30 = &v43[v28];
    *int64_t v29 = v43[v28];
    *(_OWORD *)(v29 + 8) = *(_OWORD *)&v43[v28 + 8];
    long long v31 = *(_OWORD *)&v43[v28 + 48];
    *((_OWORD *)v29 + 3) = v31;
    (**(void (***)(uint64_t, uint64_t))(v31 - 8))((uint64_t)&v44[v28 + 24], (uint64_t)&v43[v28 + 24]);
    long long v32 = *(_OWORD *)(v30 + 88);
    *(_OWORD *)(v29 + 88) = v32;
    (**(void (***)(uint64_t, uint64_t))(v32 - 8))((uint64_t)(v29 + 64), (uint64_t)(v30 + 64));
    v29[104] = v30[104];
    *(_WORD *)(v29 + 105) = *(_WORD *)(v30 + 105);
    long long v33 = *(_OWORD *)(v30 + 136);
    *(_OWORD *)(v29 + 136) = v33;
    (**(void (***)(uint64_t, uint64_t))(v33 - 8))((uint64_t)(v29 + 112), (uint64_t)(v30 + 112));
    v44[v42[7]] = v43[v42[7]];
    uint64_t v34 = a3[7];
    uint64_t v35 = (char *)v3 + v34;
    int64_t v36 = (char *)a2 + v34;
    uint64_t v37 = sub_24A2A7220();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 16))(v35, v36, v37);
    uint64_t v38 = a3[9];
    *(uint64_t *)((char *)v3 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
    *(uint64_t *)((char *)v3 + v38) = *(uint64_t *)((char *)a2 + v38);
    uint64_t v39 = a3[11];
    *(uint64_t *)((char *)v3 + a3[10]) = *(uint64_t *)((char *)a2 + a3[10]);
    *(uint64_t *)((char *)v3 + v39) = *(uint64_t *)((char *)a2 + v39);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v3;
}

uint64_t destroy for EnsembleChannelSecurity.Leader(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  int v4 = (id *)(a1 + *(int *)(a2 + 24));

  uint64_t v5 = type metadata accessor for EnsembleHPKE.Leader(0);
  uint64_t v6 = (char *)v4 + *(int *)(v5 + 20);
  uint64_t v7 = sub_24A2A7480();
  (*(void (**)(char *, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  type metadata accessor for Release();
  swift_bridgeObjectRelease();
  uint64_t v8 = type metadata accessor for EnsembleValidator();
  swift_bridgeObjectRelease();
  unint64_t v9 = &v6[*(int *)(v8 + 52)];
  uint64_t v10 = sub_24A2A6BC0();
  uint64_t v11 = *(void *)(v10 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10)) {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v10);
  }
  unint64_t v12 = (char *)v4 + *(int *)(v5 + 24);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v12 + 24));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v12 + 64));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v12 + 112));
  uint64_t v13 = a1 + *(int *)(a2 + 28);
  uint64_t v14 = sub_24A2A7220();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(v13, v14);
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for EnsembleChannelSecurity.Leader(void *a1, void *a2, int *a3)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  uint64_t v4 = a3[6];
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = *(void **)((char *)a2 + v4);
  *(void *)((char *)a1 + v4) = v7;
  uint64_t v39 = (int *)type metadata accessor for EnsembleHPKE.Leader(0);
  int64_t v40 = v6;
  uint64_t v8 = v39[5];
  size_t v41 = v5;
  unint64_t v9 = &v5[v8];
  uint64_t v10 = &v6[v8];
  uint64_t v11 = sub_24A2A7480();
  unint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v13 = v7;
  v12(v9, v10, v11);
  uint64_t v14 = type metadata accessor for Release();
  *(void *)&v9[*(int *)(v14 + 20)] = *(void *)&v10[*(int *)(v14 + 20)];
  id v15 = (int *)type metadata accessor for EnsembleValidator();
  uint64_t v16 = v15[5];
  BOOL v17 = &v9[v16];
  uint64_t v18 = &v10[v16];
  *(_OWORD *)BOOL v17 = *(_OWORD *)v18;
  *((void *)v17 + 2) = *((void *)v18 + 2);
  *(_DWORD *)&v9[v15[6]] = *(_DWORD *)&v10[v15[6]];
  v9[v15[7]] = v10[v15[7]];
  v9[v15[8]] = v10[v15[8]];
  v9[v15[9]] = v10[v15[9]];
  v9[v15[10]] = v10[v15[10]];
  v9[v15[11]] = v10[v15[11]];
  *(void *)&v9[v15[12]] = *(void *)&v10[v15[12]];
  uint64_t v19 = v15[13];
  __dst = &v9[v19];
  uint64_t v20 = &v10[v19];
  uint64_t v21 = sub_24A2A6BC0();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v23(v20, 1, v21))
  {
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B173100);
    memcpy(__dst, v20, *(void *)(*(void *)(v24 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v22 + 16))(__dst, v20, v21);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(__dst, 0, 1, v21);
  }
  v9[v15[14]] = v10[v15[14]];
  v9[v15[15]] = v10[v15[15]];
  v9[v15[16]] = v10[v15[16]];
  uint64_t v25 = v39[6];
  uint64_t v26 = &v41[v25];
  uint64_t v27 = &v40[v25];
  *uint64_t v26 = v40[v25];
  *(_OWORD *)(v26 + 8) = *(_OWORD *)&v40[v25 + 8];
  long long v28 = *(_OWORD *)&v40[v25 + 48];
  *((_OWORD *)v26 + 3) = v28;
  (**(void (***)(uint64_t, uint64_t))(v28 - 8))((uint64_t)&v41[v25 + 24], (uint64_t)&v40[v25 + 24]);
  long long v29 = *(_OWORD *)(v27 + 88);
  *(_OWORD *)(v26 + 88) = v29;
  (**(void (***)(uint64_t, uint64_t))(v29 - 8))((uint64_t)(v26 + 64), (uint64_t)(v27 + 64));
  v26[104] = v27[104];
  *(_WORD *)(v26 + 105) = *(_WORD *)(v27 + 105);
  long long v30 = *(_OWORD *)(v27 + 136);
  *(_OWORD *)(v26 + 136) = v30;
  (**(void (***)(uint64_t, uint64_t))(v30 - 8))((uint64_t)(v26 + 112), (uint64_t)(v27 + 112));
  v41[v39[7]] = v40[v39[7]];
  uint64_t v31 = a3[7];
  long long v32 = (char *)a1 + v31;
  long long v33 = (char *)a2 + v31;
  uint64_t v34 = sub_24A2A7220();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 16))(v32, v33, v34);
  uint64_t v35 = a3[9];
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  *(void *)((char *)a1 + v35) = *(void *)((char *)a2 + v35);
  uint64_t v36 = a3[11];
  *(void *)((char *)a1 + a3[10]) = *(void *)((char *)a2 + a3[10]);
  *(void *)((char *)a1 + v36) = *(void *)((char *)a2 + v36);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for EnsembleChannelSecurity.Leader(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v42 = a3;
  v43 = a2;
  uint64_t v6 = a3[6];
  uint64_t v7 = (void **)((char *)a1 + v6);
  uint64_t v8 = (void **)((char *)a2 + v6);
  unint64_t v9 = *v8;
  uint64_t v10 = *v7;
  *uint64_t v7 = *v8;
  id v11 = v9;

  uint64_t v39 = (int *)type metadata accessor for EnsembleHPKE.Leader(0);
  int64_t v40 = v8;
  uint64_t v12 = v39[5];
  size_t v41 = v7;
  id v13 = (char *)v7 + v12;
  uint64_t v14 = (char *)v8 + v12;
  uint64_t v15 = sub_24A2A7480();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 24))(v13, v14, v15);
  uint64_t v16 = type metadata accessor for Release();
  *(void *)&v13[*(int *)(v16 + 20)] = *(void *)&v14[*(int *)(v16 + 20)];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  BOOL v17 = (int *)type metadata accessor for EnsembleValidator();
  uint64_t v18 = v17[5];
  uint64_t v19 = &v13[v18];
  uint64_t v20 = &v14[v18];
  *(_DWORD *)uint64_t v19 = *(_DWORD *)v20;
  *((void *)v19 + 1) = *((void *)v20 + 1);
  v19[16] = v20[16];
  v19[17] = v20[17];
  v19[18] = v20[18];
  *((_DWORD *)v19 + 5) = *((_DWORD *)v20 + 5);
  *(_DWORD *)&v13[v17[6]] = *(_DWORD *)&v14[v17[6]];
  v13[v17[7]] = v14[v17[7]];
  v13[v17[8]] = v14[v17[8]];
  v13[v17[9]] = v14[v17[9]];
  v13[v17[10]] = v14[v17[10]];
  v13[v17[11]] = v14[v17[11]];
  *(void *)&v13[v17[12]] = *(void *)&v14[v17[12]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v21 = v17[13];
  uint64_t v22 = &v13[v21];
  uint64_t v23 = &v14[v21];
  uint64_t v24 = sub_24A2A6BC0();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48);
  uint64_t v38 = v22;
  LODWORD(v22) = v26(v22, 1, v24);
  int v27 = v26(v23, 1, v24);
  if (v22)
  {
    if (!v27)
    {
      (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v38, v23, v24);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v38, 0, 1, v24);
      goto LABEL_9;
    }
    size_t v28 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26B173100) - 8) + 64);
    long long v29 = v38;
  }
  else
  {
    if (!v27)
    {
      (*(void (**)(char *, char *, uint64_t))(v25 + 24))(v38, v23, v24);
      goto LABEL_9;
    }
    (*(void (**)(char *, uint64_t))(v25 + 8))(v38, v24);
    size_t v28 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26B173100) - 8) + 64);
    long long v29 = v38;
  }
  memcpy(v29, v23, v28);
LABEL_9:
  v13[v17[14]] = v14[v17[14]];
  v13[v17[15]] = v14[v17[15]];
  v13[v17[16]] = v14[v17[16]];
  uint64_t v30 = v39[6];
  uint64_t v31 = (char *)v41 + v30;
  long long v32 = (uint64_t *)((char *)v40 + v30);
  *uint64_t v31 = *((unsigned char *)v40 + v30);
  *((void *)v31 + 1) = *(void **)((char *)v40 + v30 + 8);
  *((void *)v31 + 2) = *(void **)((char *)v40 + v30 + 16);
  __swift_assign_boxed_opaque_existential_1((uint64_t *)((char *)v41 + v30 + 24), (uint64_t *)((char *)v40 + v30 + 24));
  __swift_assign_boxed_opaque_existential_1((uint64_t *)v31 + 8, v32 + 8);
  v31[104] = *((unsigned char *)v32 + 104);
  v31[105] = *((unsigned char *)v32 + 105);
  v31[106] = *((unsigned char *)v32 + 106);
  __swift_assign_boxed_opaque_existential_1((uint64_t *)v31 + 14, v32 + 14);
  *((unsigned char *)v41 + v39[7]) = *((unsigned char *)v40 + v39[7]);
  uint64_t v33 = v42[7];
  uint64_t v34 = (char *)a1 + v33;
  uint64_t v35 = (char *)v43 + v33;
  uint64_t v36 = sub_24A2A7220();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v36 - 8) + 24))(v34, v35, v36);
  *(void *)((char *)a1 + v42[8]) = *(void *)((char *)v43 + v42[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + v42[9]) = *(void *)((char *)v43 + v42[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + v42[10]) = *(void *)((char *)v43 + v42[10]);
  *(void *)((char *)a1 + v42[11]) = *(void *)((char *)v43 + v42[11]);
  return a1;
}

uint64_t initializeWithTake for EnsembleChannelSecurity.Leader(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = a3[6];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  *(void *)(a1 + v6) = *(void *)(a2 + v6);
  uint64_t v39 = (int *)type metadata accessor for EnsembleHPKE.Leader(0);
  uint64_t v40 = v8;
  uint64_t v9 = v39[5];
  uint64_t v41 = v7;
  uint64_t v10 = v7 + v9;
  uint64_t v11 = v8 + v9;
  uint64_t v12 = sub_24A2A7480();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32))(v10, v11, v12);
  uint64_t v13 = type metadata accessor for Release();
  *(void *)(v10 + *(int *)(v13 + 20)) = *(void *)(v11 + *(int *)(v13 + 20));
  uint64_t v14 = (int *)type metadata accessor for EnsembleValidator();
  uint64_t v15 = v14[5];
  uint64_t v16 = v10 + v15;
  uint64_t v17 = v11 + v15;
  *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
  *(void *)(v16 + 16) = *(void *)(v17 + 16);
  *(_DWORD *)(v10 + v14[6]) = *(_DWORD *)(v11 + v14[6]);
  *(unsigned char *)(v10 + v14[7]) = *(unsigned char *)(v11 + v14[7]);
  *(unsigned char *)(v10 + v14[8]) = *(unsigned char *)(v11 + v14[8]);
  *(unsigned char *)(v10 + v14[9]) = *(unsigned char *)(v11 + v14[9]);
  *(unsigned char *)(v10 + v14[10]) = *(unsigned char *)(v11 + v14[10]);
  *(unsigned char *)(v10 + v14[11]) = *(unsigned char *)(v11 + v14[11]);
  *(void *)(v10 + v14[12]) = *(void *)(v11 + v14[12]);
  uint64_t v18 = v14[13];
  uint64_t v19 = (void *)(v10 + v18);
  uint64_t v20 = (const void *)(v11 + v18);
  uint64_t v21 = sub_24A2A6BC0();
  uint64_t v22 = *(void *)(v21 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
  {
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B173100);
    memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v22 + 32))(v19, v20, v21);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  }
  *(unsigned char *)(v10 + v14[14]) = *(unsigned char *)(v11 + v14[14]);
  *(unsigned char *)(v10 + v14[15]) = *(unsigned char *)(v11 + v14[15]);
  *(unsigned char *)(v10 + v14[16]) = *(unsigned char *)(v11 + v14[16]);
  uint64_t v24 = v39[6];
  uint64_t v25 = v41 + v24;
  uint64_t v26 = v40 + v24;
  long long v27 = *(_OWORD *)(v26 + 16);
  *(_OWORD *)uint64_t v25 = *(_OWORD *)v26;
  *(_OWORD *)(v25 + 16) = v27;
  long long v28 = *(_OWORD *)(v26 + 80);
  *(_OWORD *)(v25 + 64) = *(_OWORD *)(v26 + 64);
  *(_OWORD *)(v25 + 80) = v28;
  long long v29 = *(_OWORD *)(v26 + 48);
  *(_OWORD *)(v25 + 32) = *(_OWORD *)(v26 + 32);
  *(_OWORD *)(v25 + 48) = v29;
  *(void *)(v25 + 144) = *(void *)(v26 + 144);
  long long v30 = *(_OWORD *)(v26 + 128);
  long long v31 = *(_OWORD *)(v26 + 96);
  *(_OWORD *)(v25 + 112) = *(_OWORD *)(v26 + 112);
  *(_OWORD *)(v25 + 128) = v30;
  *(_OWORD *)(v25 + 96) = v31;
  *(unsigned char *)(v41 + v39[7]) = *(unsigned char *)(v40 + v39[7]);
  uint64_t v32 = a3[7];
  uint64_t v33 = a1 + v32;
  uint64_t v34 = a2 + v32;
  uint64_t v35 = sub_24A2A7220();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 32))(v33, v34, v35);
  uint64_t v36 = a3[9];
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  *(void *)(a1 + v36) = *(void *)(a2 + v36);
  uint64_t v37 = a3[11];
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  *(void *)(a1 + v37) = *(void *)(a2 + v37);
  return a1;
}

void *assignWithTake for EnsembleChannelSecurity.Leader(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  uint64_t v44 = a3;
  uint64_t v45 = a2;
  uint64_t v7 = a3[6];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (void *)((char *)a2 + v7);
  uint64_t v10 = *(void **)((char *)a1 + v7);
  *(void *)((char *)a1 + v7) = *v9;

  uint64_t v41 = (int *)type metadata accessor for EnsembleHPKE.Leader(0);
  uint64_t v42 = v9;
  uint64_t v11 = v41[5];
  v43 = v8;
  uint64_t v12 = &v8[v11];
  uint64_t v13 = (char *)v9 + v11;
  uint64_t v14 = sub_24A2A7480();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 40))(v12, v13, v14);
  uint64_t v15 = type metadata accessor for Release();
  *(void *)&v12[*(int *)(v15 + 20)] = *(void *)&v13[*(int *)(v15 + 20)];
  swift_bridgeObjectRelease();
  uint64_t v16 = (int *)type metadata accessor for EnsembleValidator();
  uint64_t v17 = v16[5];
  uint64_t v18 = &v12[v17];
  uint64_t v19 = &v13[v17];
  *(_DWORD *)uint64_t v18 = *(_DWORD *)v19;
  *((void *)v18 + 1) = *((void *)v19 + 1);
  v18[16] = v19[16];
  v18[17] = v19[17];
  v18[18] = v19[18];
  *((_DWORD *)v18 + 5) = *((_DWORD *)v19 + 5);
  *(_DWORD *)&v12[v16[6]] = *(_DWORD *)&v13[v16[6]];
  v12[v16[7]] = v13[v16[7]];
  v12[v16[8]] = v13[v16[8]];
  v12[v16[9]] = v13[v16[9]];
  v12[v16[10]] = v13[v16[10]];
  v12[v16[11]] = v13[v16[11]];
  *(void *)&v12[v16[12]] = *(void *)&v13[v16[12]];
  swift_bridgeObjectRelease();
  uint64_t v20 = v16[13];
  uint64_t v21 = &v12[v20];
  uint64_t v22 = &v13[v20];
  uint64_t v23 = sub_24A2A6BC0();
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v24 + 48);
  uint64_t v40 = v21;
  LODWORD(v21) = v25(v21, 1, v23);
  int v26 = v25(v22, 1, v23);
  if (v21)
  {
    if (!v26)
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v40, v22, v23);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v40, 0, 1, v23);
      goto LABEL_9;
    }
    size_t v27 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26B173100) - 8) + 64);
    long long v28 = v40;
  }
  else
  {
    if (!v26)
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 40))(v40, v22, v23);
      goto LABEL_9;
    }
    (*(void (**)(char *, uint64_t))(v24 + 8))(v40, v23);
    size_t v27 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26B173100) - 8) + 64);
    long long v28 = v40;
  }
  memcpy(v28, v22, v27);
LABEL_9:
  v12[v16[14]] = v13[v16[14]];
  v12[v16[15]] = v13[v16[15]];
  v12[v16[16]] = v13[v16[16]];
  uint64_t v29 = v41[6];
  long long v30 = &v8[v29];
  long long v31 = (char *)v42 + v29;
  *long long v30 = *((unsigned char *)v42 + v29);
  *(_OWORD *)(v30 + 8) = *(_OWORD *)((char *)v42 + v29 + 8);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v43[v29 + 24]);
  *(_OWORD *)(v30 + 24) = *(_OWORD *)(v31 + 24);
  *(_OWORD *)(v30 + 40) = *(_OWORD *)(v31 + 40);
  *((void *)v30 + 7) = *((void *)v31 + 7);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v30 + 64));
  long long v32 = *((_OWORD *)v31 + 5);
  *((_OWORD *)v30 + 4) = *((_OWORD *)v31 + 4);
  *((_OWORD *)v30 + 5) = v32;
  *((void *)v30 + 12) = *((void *)v31 + 12);
  v30[104] = v31[104];
  v30[105] = v31[105];
  v30[106] = v31[106];
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v30 + 112));
  long long v33 = *((_OWORD *)v31 + 8);
  *((_OWORD *)v30 + 7) = *((_OWORD *)v31 + 7);
  *((_OWORD *)v30 + 8) = v33;
  *((void *)v30 + 18) = *((void *)v31 + 18);
  v43[v41[7]] = *((unsigned char *)v42 + v41[7]);
  uint64_t v34 = v44[7];
  uint64_t v35 = (char *)a1 + v34;
  uint64_t v36 = (char *)v45 + v34;
  uint64_t v37 = sub_24A2A7220();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 40))(v35, v36, v37);
  *(void *)((char *)a1 + v44[8]) = *(void *)((char *)v45 + v44[8]);
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + v44[9]) = *(void *)((char *)v45 + v44[9]);
  swift_bridgeObjectRelease();
  uint64_t v38 = v44[11];
  *(void *)((char *)a1 + v44[10]) = *(void *)((char *)v45 + v44[10]);
  *(void *)((char *)a1 + v38) = *(void *)((char *)v45 + v38);
  return a1;
}

uint64_t getEnumTagSinglePayload for EnsembleChannelSecurity.Leader(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24A24278C);
}

uint64_t sub_24A24278C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for EnsembleHPKE.Leader(0);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 24);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_24A2A7220();
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 28);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t storeEnumTagSinglePayload for EnsembleChannelSecurity.Leader(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24A2428CC);
}

uint64_t sub_24A2428CC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for EnsembleHPKE.Leader(0);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 24);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_24A2A7220();
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 28);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

uint64_t sub_24A2429F8()
{
  uint64_t result = type metadata accessor for EnsembleHPKE.Leader(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = sub_24A2A7220();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for EnsembleChannelSecurity.Follower(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v28 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v28 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    uint64_t v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    uint64_t v7 = *(int *)(a3 + 24);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = *(void **)((char *)a2 + v7);
    *(uint64_t *)((char *)a1 + v7) = (uint64_t)v10;
    long long v33 = (int *)type metadata accessor for EnsembleHPKE.Follower(0);
    uint64_t v34 = v9;
    uint64_t v11 = v33[5];
    uint64_t v35 = v8;
    uint64_t v12 = &v8[v11];
    uint64_t v13 = &v9[v11];
    uint64_t v14 = sub_24A2A7480();
    uint64_t v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v16 = v10;
    v15(v12, v13, v14);
    uint64_t v17 = *(int *)(type metadata accessor for Release() + 20);
    *(void *)&v12[v17] = *(void *)&v13[v17];
    uint64_t v18 = (int *)type metadata accessor for EnsembleValidator();
    uint64_t v19 = v18[5];
    uint64_t v20 = &v12[v19];
    uint64_t v21 = &v13[v19];
    *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
    *((void *)v20 + 2) = *((void *)v21 + 2);
    *(_DWORD *)&v12[v18[6]] = *(_DWORD *)&v13[v18[6]];
    v12[v18[7]] = v13[v18[7]];
    v12[v18[8]] = v13[v18[8]];
    v12[v18[9]] = v13[v18[9]];
    v12[v18[10]] = v13[v18[10]];
    v12[v18[11]] = v13[v18[11]];
    *(void *)&v12[v18[12]] = *(void *)&v13[v18[12]];
    uint64_t v22 = v18[13];
    __dst = &v12[v22];
    uint64_t v23 = &v13[v22];
    uint64_t v24 = sub_24A2A6BC0();
    uint64_t v25 = *(void *)(v24 - 8);
    int v26 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v26(v23, 1, v24))
    {
      uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B173100);
      memcpy(__dst, v23, *(void *)(*(void *)(v27 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v25 + 16))(__dst, v23, v24);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(__dst, 0, 1, v24);
    }
    v12[v18[14]] = v13[v18[14]];
    v12[v18[15]] = v13[v18[15]];
    v12[v18[16]] = v13[v18[16]];
    uint64_t v29 = v33[6];
    long long v30 = *(_OWORD *)&v34[v29 + 24];
    *(_OWORD *)&v35[v29 + 24] = v30;
    (**(void (***)(void))(v30 - 8))();
    v35[v33[7]] = v34[v33[7]];
  }
  return v3;
}

uint64_t destroy for EnsembleChannelSecurity.Follower(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  int v4 = (id *)(a1 + *(int *)(a2 + 24));

  uint64_t v5 = type metadata accessor for EnsembleHPKE.Follower(0);
  uint64_t v6 = (char *)v4 + *(int *)(v5 + 20);
  uint64_t v7 = sub_24A2A7480();
  (*(void (**)(char *, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  type metadata accessor for Release();
  swift_bridgeObjectRelease();
  uint64_t v8 = type metadata accessor for EnsembleValidator();
  swift_bridgeObjectRelease();
  uint64_t v9 = &v6[*(int *)(v8 + 52)];
  uint64_t v10 = sub_24A2A6BC0();
  uint64_t v11 = *(void *)(v10 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10)) {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v10);
  }
  uint64_t v12 = (uint64_t)v4 + *(int *)(v5 + 24);

  return __swift_destroy_boxed_opaque_existential_1(v12);
}

void *initializeWithCopy for EnsembleChannelSecurity.Follower(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = *(void **)((char *)a2 + v5);
  *(void *)((char *)a1 + v5) = v8;
  long long v30 = (int *)type metadata accessor for EnsembleHPKE.Follower(0);
  long long v31 = v7;
  uint64_t v9 = v30[5];
  long long v32 = v6;
  uint64_t v10 = &v6[v9];
  uint64_t v11 = &v7[v9];
  uint64_t v12 = sub_24A2A7480();
  uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v14 = v8;
  v13(v10, v11, v12);
  uint64_t v15 = type metadata accessor for Release();
  *(void *)&v10[*(int *)(v15 + 20)] = *(void *)&v11[*(int *)(v15 + 20)];
  id v16 = (int *)type metadata accessor for EnsembleValidator();
  uint64_t v17 = v16[5];
  uint64_t v18 = &v10[v17];
  uint64_t v19 = &v11[v17];
  *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
  *((void *)v18 + 2) = *((void *)v19 + 2);
  *(_DWORD *)&v10[v16[6]] = *(_DWORD *)&v11[v16[6]];
  v10[v16[7]] = v11[v16[7]];
  v10[v16[8]] = v11[v16[8]];
  v10[v16[9]] = v11[v16[9]];
  v10[v16[10]] = v11[v16[10]];
  v10[v16[11]] = v11[v16[11]];
  *(void *)&v10[v16[12]] = *(void *)&v11[v16[12]];
  uint64_t v20 = v16[13];
  __dst = &v10[v20];
  uint64_t v21 = &v11[v20];
  uint64_t v22 = sub_24A2A6BC0();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v24(v21, 1, v22))
  {
    uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B173100);
    memcpy(__dst, v21, *(void *)(*(void *)(v25 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v23 + 16))(__dst, v21, v22);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(__dst, 0, 1, v22);
  }
  v10[v16[14]] = v11[v16[14]];
  v10[v16[15]] = v11[v16[15]];
  v10[v16[16]] = v11[v16[16]];
  uint64_t v26 = v30[6];
  long long v27 = *(_OWORD *)&v31[v26 + 24];
  *(_OWORD *)&v32[v26 + 24] = v27;
  (**(void (***)(void))(v27 - 8))();
  v32[v30[7]] = v31[v30[7]];
  return a1;
}

void *assignWithCopy for EnsembleChannelSecurity.Follower(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (void **)((char *)a1 + v6);
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = *(void **)((char *)a2 + v6);
  uint64_t v10 = *v7;
  *uint64_t v7 = v9;
  id v11 = v9;

  long long v32 = (int *)type metadata accessor for EnsembleHPKE.Follower(0);
  long long v33 = v8;
  uint64_t v12 = v32[5];
  uint64_t v34 = v7;
  uint64_t v13 = (char *)v7 + v12;
  id v14 = &v8[v12];
  uint64_t v15 = sub_24A2A7480();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 24))(v13, v14, v15);
  uint64_t v16 = type metadata accessor for Release();
  *(void *)&v13[*(int *)(v16 + 20)] = *(void *)&v14[*(int *)(v16 + 20)];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v17 = (int *)type metadata accessor for EnsembleValidator();
  uint64_t v18 = v17[5];
  uint64_t v19 = &v13[v18];
  uint64_t v20 = &v14[v18];
  *(_DWORD *)uint64_t v19 = *(_DWORD *)v20;
  *((void *)v19 + 1) = *((void *)v20 + 1);
  v19[16] = v20[16];
  v19[17] = v20[17];
  v19[18] = v20[18];
  *((_DWORD *)v19 + 5) = *((_DWORD *)v20 + 5);
  *(_DWORD *)&v13[v17[6]] = *(_DWORD *)&v14[v17[6]];
  v13[v17[7]] = v14[v17[7]];
  v13[v17[8]] = v14[v17[8]];
  v13[v17[9]] = v14[v17[9]];
  v13[v17[10]] = v14[v17[10]];
  v13[v17[11]] = v14[v17[11]];
  *(void *)&v13[v17[12]] = *(void *)&v14[v17[12]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v21 = v17[13];
  uint64_t v22 = &v13[v21];
  uint64_t v23 = &v14[v21];
  uint64_t v24 = sub_24A2A6BC0();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48);
  long long v31 = v22;
  LODWORD(v22) = v26(v22, 1, v24);
  int v27 = v26(v23, 1, v24);
  if (v22)
  {
    if (!v27)
    {
      (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v31, v23, v24);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v31, 0, 1, v24);
      goto LABEL_9;
    }
    size_t v28 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26B173100) - 8) + 64);
    uint64_t v29 = v31;
  }
  else
  {
    if (!v27)
    {
      (*(void (**)(char *, char *, uint64_t))(v25 + 24))(v31, v23, v24);
      goto LABEL_9;
    }
    (*(void (**)(char *, uint64_t))(v25 + 8))(v31, v24);
    size_t v28 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26B173100) - 8) + 64);
    uint64_t v29 = v31;
  }
  memcpy(v29, v23, v28);
LABEL_9:
  v13[v17[14]] = v14[v17[14]];
  v13[v17[15]] = v14[v17[15]];
  v13[v17[16]] = v14[v17[16]];
  __swift_assign_boxed_opaque_existential_1((uint64_t *)((char *)v34 + v32[6]), (uint64_t *)&v33[v32[6]]);
  *((unsigned char *)v34 + v32[7]) = v33[v32[7]];
  return a1;
}

_OWORD *initializeWithTake for EnsembleChannelSecurity.Follower(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  *(void *)((char *)a1 + v5) = *(void *)((char *)a2 + v5);
  size_t v28 = (int *)type metadata accessor for EnsembleHPKE.Follower(0);
  uint64_t v8 = v28[5];
  uint64_t v9 = &v6[v8];
  uint64_t v10 = &v7[v8];
  uint64_t v11 = sub_24A2A7480();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
  uint64_t v12 = type metadata accessor for Release();
  *(void *)&v9[*(int *)(v12 + 20)] = *(void *)&v10[*(int *)(v12 + 20)];
  uint64_t v13 = (int *)type metadata accessor for EnsembleValidator();
  uint64_t v14 = v13[5];
  uint64_t v15 = &v9[v14];
  uint64_t v16 = &v10[v14];
  *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
  *((void *)v15 + 2) = *((void *)v16 + 2);
  *(_DWORD *)&v9[v13[6]] = *(_DWORD *)&v10[v13[6]];
  v9[v13[7]] = v10[v13[7]];
  v9[v13[8]] = v10[v13[8]];
  v9[v13[9]] = v10[v13[9]];
  v9[v13[10]] = v10[v13[10]];
  v9[v13[11]] = v10[v13[11]];
  *(void *)&v9[v13[12]] = *(void *)&v10[v13[12]];
  uint64_t v17 = v13[13];
  uint64_t v18 = &v9[v17];
  uint64_t v19 = &v10[v17];
  uint64_t v20 = sub_24A2A6BC0();
  uint64_t v21 = *(void *)(v20 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B173100);
    memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v18, v19, v20);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  v9[v13[14]] = v10[v13[14]];
  v9[v13[15]] = v10[v13[15]];
  v9[v13[16]] = v10[v13[16]];
  uint64_t v23 = v28[6];
  uint64_t v24 = &v6[v23];
  uint64_t v25 = &v7[v23];
  long long v26 = *((_OWORD *)v25 + 1);
  *(_OWORD *)uint64_t v24 = *(_OWORD *)v25;
  *((_OWORD *)v24 + 1) = v26;
  *((void *)v24 + 4) = *((void *)v25 + 4);
  v6[v28[7]] = v7[v28[7]];
  return a1;
}

void *assignWithTake for EnsembleChannelSecurity.Follower(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = *(void **)((char *)a1 + v8);
  *(void *)((char *)a1 + v8) = *(void *)((char *)a2 + v8);

  uint64_t v36 = (int *)type metadata accessor for EnsembleHPKE.Follower(0);
  uint64_t v37 = v10;
  uint64_t v12 = v36[5];
  uint64_t v38 = v9;
  uint64_t v13 = &v9[v12];
  uint64_t v14 = &v10[v12];
  uint64_t v15 = sub_24A2A7480();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 40))(v13, v14, v15);
  uint64_t v16 = type metadata accessor for Release();
  *(void *)&v13[*(int *)(v16 + 20)] = *(void *)&v14[*(int *)(v16 + 20)];
  swift_bridgeObjectRelease();
  uint64_t v17 = (int *)type metadata accessor for EnsembleValidator();
  uint64_t v18 = v17[5];
  uint64_t v19 = &v13[v18];
  uint64_t v20 = &v14[v18];
  *(_DWORD *)uint64_t v19 = *(_DWORD *)v20;
  *((void *)v19 + 1) = *((void *)v20 + 1);
  v19[16] = v20[16];
  v19[17] = v20[17];
  v19[18] = v20[18];
  *((_DWORD *)v19 + 5) = *((_DWORD *)v20 + 5);
  *(_DWORD *)&v13[v17[6]] = *(_DWORD *)&v14[v17[6]];
  v13[v17[7]] = v14[v17[7]];
  v13[v17[8]] = v14[v17[8]];
  v13[v17[9]] = v14[v17[9]];
  v13[v17[10]] = v14[v17[10]];
  v13[v17[11]] = v14[v17[11]];
  *(void *)&v13[v17[12]] = *(void *)&v14[v17[12]];
  swift_bridgeObjectRelease();
  uint64_t v21 = v17[13];
  uint64_t v22 = &v13[v21];
  uint64_t v23 = &v14[v21];
  uint64_t v24 = sub_24A2A6BC0();
  uint64_t v25 = *(void *)(v24 - 8);
  long long v26 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48);
  uint64_t v35 = v22;
  LODWORD(v22) = v26(v22, 1, v24);
  int v27 = v26(v23, 1, v24);
  if (v22)
  {
    if (!v27)
    {
      (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v35, v23, v24);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v35, 0, 1, v24);
      goto LABEL_9;
    }
    size_t v28 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26B173100) - 8) + 64);
    uint64_t v29 = v35;
  }
  else
  {
    if (!v27)
    {
      (*(void (**)(char *, char *, uint64_t))(v25 + 40))(v35, v23, v24);
      goto LABEL_9;
    }
    (*(void (**)(char *, uint64_t))(v25 + 8))(v35, v24);
    size_t v28 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26B173100) - 8) + 64);
    uint64_t v29 = v35;
  }
  memcpy(v29, v23, v28);
LABEL_9:
  v13[v17[14]] = v14[v17[14]];
  v13[v17[15]] = v14[v17[15]];
  v13[v17[16]] = v14[v17[16]];
  uint64_t v30 = v36[6];
  long long v31 = &v9[v30];
  long long v32 = &v37[v30];
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v38[v30]);
  long long v33 = *((_OWORD *)v32 + 1);
  *(_OWORD *)long long v31 = *(_OWORD *)v32;
  *((_OWORD *)v31 + 1) = v33;
  *((void *)v31 + 4) = *((void *)v32 + 4);
  v38[v36[7]] = v37[v36[7]];
  return a1;
}

uint64_t getEnumTagSinglePayload for EnsembleChannelSecurity.Follower(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24A243BFC);
}

uint64_t sub_24A243BFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for EnsembleHPKE.Follower(0);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for EnsembleChannelSecurity.Follower(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24A243CC0);
}

uint64_t sub_24A243CC0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for EnsembleHPKE.Follower(0);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 24);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_24A243D68()
{
  uint64_t result = type metadata accessor for EnsembleHPKE.Follower(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for EnsembleChannelSecurity.PairingData()
{
  return &type metadata for EnsembleChannelSecurity.PairingData;
}

id sub_24A243E10(id result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  switch(a5 >> 5)
  {
    case 0:
      uint64_t result = (id)swift_bridgeObjectRetain();
      break;
    case 1:
      uint64_t result = result;
      break;
    case 2:
      uint64_t result = (id)sub_24A243E6C((uint64_t)result, a2);
      break;
    case 3:
      uint64_t result = (id)sub_24A243EB4((uint64_t)result, a2, a3, a4, a5 & 1);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_24A243E6C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 4)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_24A243EB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (a5) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

void destroy for EnsembleChannelSecurity.Error(uint64_t a1)
{
}

void sub_24A243ED8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  switch(a5 >> 5)
  {
    case 0:
      swift_bridgeObjectRelease();
      break;
    case 1:

      break;
    case 2:
      sub_24A243F34((uint64_t)a1, a2);
      break;
    case 3:
      sub_24A243F7C((uint64_t)a1, a2, a3, a4, a5 & 1);
      break;
    default:
      return;
  }
}

uint64_t sub_24A243F34(uint64_t a1, unint64_t a2)
{
  if (a2 >= 4)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_24A243F7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (a5) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for EnsembleChannelSecurity.Error(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  unsigned __int8 v7 = *(unsigned char *)(a2 + 32);
  sub_24A243E10(*(id *)a2, v4, v5, v6, v7);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for EnsembleChannelSecurity.Error(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  unsigned __int8 v7 = *(unsigned char *)(a2 + 32);
  sub_24A243E10(*(id *)a2, v4, v5, v6, v7);
  uint64_t v8 = *(void **)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 24);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  unsigned __int8 v12 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v7;
  sub_24A243ED8(v8, v9, v10, v11, v12);
  return a1;
}

__n128 __swift_memcpy33_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for EnsembleChannelSecurity.Error(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 32);
  uint64_t v4 = *(void **)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  long long v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  unsigned __int8 v9 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v3;
  sub_24A243ED8(v4, v6, v5, v7, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for EnsembleChannelSecurity.Error(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7C && *(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 124);
  }
  unsigned int v3 = ((*(unsigned __int8 *)(a1 + 32) >> 5) & 0xFFFFFF87 | (8 * ((*(unsigned __int8 *)(a1 + 32) >> 1) & 0xF))) ^ 0x7F;
  if (v3 >= 0x7B) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for EnsembleChannelSecurity.Error(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7B)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)__n128 result = a2 - 124;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7C) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7C) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2)
    {
      *(_OWORD *)__n128 result = 0u;
      *(_OWORD *)(result + 16) = 0u;
      *(unsigned char *)(result + 32) = 2 * (((-a2 >> 3) & 0xF) - 16 * a2);
    }
  }
  return result;
}

uint64_t sub_24A244174(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 32);
  int v2 = (char)v1;
  unsigned int v3 = v1 >> 5;
  if (v2 >= 0) {
    return v3;
  }
  else {
    return (*(_DWORD *)a1 + 4);
  }
}

uint64_t sub_24A244194(uint64_t result)
{
  *(unsigned char *)(result + 32) &= 0x1Fu;
  return result;
}

uint64_t sub_24A2441A4(uint64_t result, unsigned int a2)
{
  if (a2 < 4)
  {
    *(unsigned char *)(result + 32) = *(unsigned char *)(result + 32) & 1 | (32 * a2);
  }
  else
  {
    *(void *)__n128 result = a2 - 4;
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0x80;
  }
  return result;
}

ValueMetadata *type metadata accessor for EnsembleChannelSecurity.Error()
{
  return &type metadata for EnsembleChannelSecurity.Error;
}

unint64_t destroy for EnsembleChannelSecurity.Error.ProvisioningCertificateError(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 8);
  if (result >= 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for EnsembleChannelSecurity.Error.ProvisioningCertificateError(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
  }
  else
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v3;
    uint64_t v4 = *(void *)(a2 + 24);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)(a1 + 24) = v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

void *assignWithCopy for EnsembleChannelSecurity.Error.ProvisioningCertificateError(void *a1, void *a2)
{
  unint64_t v4 = a2[1];
  if (a1[1] < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      a1[3] = a2[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    long long v5 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *((_OWORD *)a1 + 1) = v5;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for EnsembleChannelSecurity.Error.ProvisioningCertificateError(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8) < 0xFFFFFFFFuLL) {
    goto LABEL_5;
  }
  unint64_t v4 = *(void *)(a2 + 8);
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_5:
    long long v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    return a1;
  }
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for EnsembleChannelSecurity.Error.ProvisioningCertificateError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFC && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 2147483644);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 3;
  if (v4 >= 5) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for EnsembleChannelSecurity.Error.ProvisioningCertificateError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFB)
  {
    *(_OWORD *)unint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)unint64_t result = a2 - 2147483644;
    if (a3 >= 0x7FFFFFFC) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFC) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2 + 3;
    }
  }
  return result;
}

uint64_t sub_24A2444A8(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *sub_24A2444C0(void *result, int a2)
{
  if (a2 < 0)
  {
    result[2] = 0;
    result[3] = 0;
    *unint64_t result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for EnsembleChannelSecurity.Error.ProvisioningCertificateError()
{
  return &type metadata for EnsembleChannelSecurity.Error.ProvisioningCertificateError;
}

uint64_t destroy for EnsembleChannelSecurity.Error.TopologyError(uint64_t a1)
{
  return sub_24A243F7C(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
}

uint64_t initializeWithCopy for EnsembleChannelSecurity.Error.TopologyError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(unsigned char *)(a2 + 32);
  sub_24A243EB4(*(void *)a2, v4, v5, v6, v7);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for EnsembleChannelSecurity.Error.TopologyError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(unsigned char *)(a2 + 32);
  sub_24A243EB4(*(void *)a2, v4, v5, v6, v7);
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 24);
  char v12 = *(unsigned char *)(a1 + 32);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  sub_24A243F7C(v8, v9, v10, v11, v12);
  return a1;
}

uint64_t assignWithTake for EnsembleChannelSecurity.Error.TopologyError(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 32);
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  char v8 = *(unsigned char *)(a1 + 32);
  long long v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v9;
  *(unsigned char *)(a1 + 32) = v3;
  sub_24A243F7C(v4, v6, v5, v7, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for EnsembleChannelSecurity.Error.TopologyError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for EnsembleChannelSecurity.Error.TopologyError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)unint64_t result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 32) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_24A2446BC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 32);
}

uint64_t sub_24A2446C4(uint64_t result, char a2)
{
  *(unsigned char *)(result + 32) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for EnsembleChannelSecurity.Error.TopologyError()
{
  return &type metadata for EnsembleChannelSecurity.Error.TopologyError;
}

unsigned char *storeEnumTagSinglePayload for EnsembleChannelSecurity.PairingData.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24A2447ACLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EnsembleChannelSecurity.PairingData.CodingKeys()
{
  return &type metadata for EnsembleChannelSecurity.PairingData.CodingKeys;
}

unint64_t sub_24A2447E8()
{
  unint64_t result = qword_269779610;
  if (!qword_269779610)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269779610);
  }
  return result;
}

unint64_t sub_24A244840()
{
  unint64_t result = qword_269779618;
  if (!qword_269779618)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269779618);
  }
  return result;
}

unint64_t sub_24A244898()
{
  unint64_t result = qword_269779620;
  if (!qword_269779620)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269779620);
  }
  return result;
}

uint64_t sub_24A2448EC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6554726568706963 && a2 == 0xEA00000000007478;
  if (v2 || (sub_24A2A7E40() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6C75737061636E65 && a2 == 0xEF79654B64657461)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = sub_24A2A7E40();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

unint64_t sub_24A244A10()
{
  unint64_t result = qword_269779630;
  if (!qword_269779630)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269779630);
  }
  return result;
}

uint64_t sub_24A244A64(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_24A244AAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24A23943C(a1, a2, a3, v3[2], v3[3], v3[4]);
}

unint64_t sub_24A244ACC()
{
  unint64_t result = qword_269779650;
  if (!qword_269779650)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26B174B08);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269779650);
  }
  return result;
}

uint64_t sub_24A244B1C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_24A244B84(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t X509FingerprintPolicy.init<A>(fingerprints:hashFunction:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  char v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24A2A7150();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, a2);
  sub_24A1EA0BC();
  uint64_t v9 = sub_24A2A7AE0();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
  uint64_t result = type metadata accessor for X509FingerprintPolicy();
  *(void *)(a3 + *(int *)(result + 36)) = v9;
  return result;
}

uint64_t type metadata accessor for X509FingerprintPolicy()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t X509FingerprintPolicy.evaluate(bundle:context:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[15] = a3;
  v4[16] = v3;
  v4[14] = a2;
  v4[17] = *(void *)(a3 - 8);
  v4[18] = swift_task_alloc();
  uint64_t v6 = sub_24A2A7160();
  v4[19] = v6;
  v4[20] = *(void *)(v6 - 8);
  v4[21] = swift_task_alloc();
  v4[22] = swift_task_alloc();
  v4[23] = *(void *)(a3 + 24);
  v4[24] = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v4[25] = AssociatedTypeWitness;
  v4[26] = *(void *)(AssociatedTypeWitness - 8);
  v4[27] = swift_task_alloc();
  v4[28] = swift_task_alloc();
  v4[29] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_24A244F18, 0, 0);
}

uint64_t sub_24A244F18()
{
  uint64_t v90 = v0;
  uint64_t v1 = **(void **)(v0 + 112);
  uint64_t v2 = type metadata accessor for X509Policy();
  if (!*(void *)(v1 + 16)
    || (unint64_t v3 = sub_24A1BE7EC(v2, (uint64_t)&protocol witness table for X509Policy, 0x65746164696C6176, 0xED00007472654364), (v4 & 1) == 0)|| (sub_24A1C9680(*(void *)(v1 + 56) + 32 * v3, v0 + 64), __swift_instantiateConcreteTypeFromMangledName(&qword_26B174BB8), (swift_dynamicCast() & 1) == 0)|| (v5 = *(void **)(v0 + 16)) == 0)
  {
    (*(void (**)(void, void, void))(*(void *)(v0 + 160) + 16))(*(void *)(v0 + 168), *(void *)(v0 + 128), *(void *)(v0 + 152));
    uint64_t v21 = sub_24A2A7140();
    os_log_type_t v22 = sub_24A2A7B30();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v23 = 0;
      _os_log_impl(&dword_24A19F000, v21, v22, "Missing provisioning certificate", v23, 2u);
      MEMORY[0x24C5C00A0](v23, -1, -1);
    }
    uint64_t v25 = *(void *)(v0 + 160);
    uint64_t v24 = *(void *)(v0 + 168);
    uint64_t v26 = *(void *)(v0 + 152);

    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v24, v26);
    type metadata accessor for X509FingerprintPolicy.Error();
    swift_getWitnessTable();
    swift_allocError();
    *int v27 = 0;
    swift_willThrow();
    goto LABEL_10;
  }
  uint64_t v6 = *(void *)(v0 + 232);
  uint64_t v84 = *(void *)(v0 + 224);
  uint64_t v8 = *(void *)(v0 + 200);
  uint64_t v7 = *(void *)(v0 + 208);
  uint64_t v10 = *(void *)(v0 + 120);
  uint64_t v9 = *(void *)(v0 + 128);
  uint64_t v82 = *(void **)(v0 + 24);
  ProvisioningCertificate.fingerprint<A>(using:)();
  uint64_t v81 = v10;
  uint64_t v11 = *(void *)(v9 + *(int *)(v10 + 36));
  char v12 = v5;
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  v13(v84, v6, v8);
  swift_getAssociatedConformanceWitness();
  uint64_t v14 = sub_24A2A6B20();
  unint64_t v16 = v15;
  char v17 = sub_24A2375A8(v14, v15, v11);
  sub_24A1A5384(v14, v16);
  uint64_t v18 = *(void *)(v0 + 232);
  uint64_t v19 = *(void *)(v0 + 144);
  if (v17)
  {
    (*(void (**)(void, void))(*(void *)(v0 + 208) + 8))(*(void *)(v0 + 232), *(void *)(v0 + 200));
    sub_24A245934(v12, v82);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v20 = *(uint64_t (**)(void))(v0 + 8);
LABEL_11:
    return v20();
  }
  uint64_t v79 = v12;
  uint64_t v29 = *(void *)(v0 + 216);
  uint64_t v30 = *(void *)(v0 + 200);
  uint64_t v32 = *(void *)(v0 + 128);
  uint64_t v31 = *(void *)(v0 + 136);
  uint64_t v33 = *(void *)(v0 + 120);
  (*(void (**)(void, uint64_t, void))(*(void *)(v0 + 160) + 16))(*(void *)(v0 + 176), v32, *(void *)(v0 + 152));
  v13(v29, v18, v30);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 16))(v19, v32, v33);
  uint64_t v34 = sub_24A2A7140();
  os_log_type_t v35 = sub_24A2A7B30();
  BOOL v36 = os_log_type_enabled(v34, v35);
  uint64_t v38 = *(void *)(v0 + 208);
  uint64_t v37 = *(void *)(v0 + 216);
  uint64_t v39 = *(void *)(v0 + 200);
  if (!v36)
  {
    uint64_t v63 = *(void *)(v0 + 176);
    uint64_t v64 = *(void *)(v0 + 152);
    uint64_t v65 = *(void *)(v0 + 160);
    (*(void (**)(void, void))(*(void *)(v0 + 136) + 8))(*(void *)(v0 + 144), *(void *)(v0 + 120));
    uint64_t v80 = *(void (**)(uint64_t, uint64_t))(v38 + 8);
    v80(v37, v39);

    (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v63, v64);
    uint64_t v66 = v79;
LABEL_27:
    uint64_t v72 = *(void *)(v0 + 232);
    uint64_t v73 = *(void *)(v0 + 200);
    type metadata accessor for X509FingerprintPolicy.Error();
    swift_getWitnessTable();
    swift_allocError();
    *uint64_t v74 = 1;
    swift_willThrow();
    sub_24A245934(v66, v82);
    v80(v72, v73);
LABEL_10:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v20 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_11;
  }
  os_log_type_t v78 = v35;
  uint64_t v85 = *(void *)(v0 + 144);
  uint64_t v40 = swift_slowAlloc();
  uint64_t v76 = swift_slowAlloc();
  v89[0] = v76;
  *(_DWORD *)uint64_t v40 = 136446466;
  uint64_t v41 = sub_24A1CEFC8();
  *(void *)(v0 + 96) = sub_24A1C52A8(v41, v42, v89);
  sub_24A2A7B70();
  swift_bridgeObjectRelease();
  uint64_t v80 = *(void (**)(uint64_t, uint64_t))(v38 + 8);
  v80(v37, v39);
  v77 = (uint8_t *)v40;
  *(_WORD *)(v40 + 12) = 2082;
  uint64_t v43 = *(void *)(v85 + *(int *)(v81 + 36));
  int64_t v44 = *(void *)(v43 + 16);
  uint64_t v45 = MEMORY[0x263F8EE78];
  if (!v44)
  {
LABEL_26:
    uint64_t v87 = *(void *)(v0 + 176);
    uint64_t v67 = *(void *)(v0 + 152);
    uint64_t v68 = *(void *)(v0 + 160);
    (*(void (**)(void, void))(*(void *)(v0 + 136) + 8))(*(void *)(v0 + 144), *(void *)(v0 + 120));
    uint64_t v69 = MEMORY[0x24C5BF1D0](v45, MEMORY[0x263F8D310]);
    unint64_t v71 = v70;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 104) = sub_24A1C52A8(v69, v71, v89);
    sub_24A2A7B70();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_24A19F000, v34, v78, "Fingerprint %{public}s not a member of %{public}s", v77, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x24C5C00A0](v76, -1, -1);
    MEMORY[0x24C5C00A0](v77, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v87, v67);
    uint64_t v66 = v79;
    goto LABEL_27;
  }
  size_t v75 = v34;
  uint64_t v88 = MEMORY[0x263F8EE78];
  swift_bridgeObjectRetain();
  sub_24A245A4C(0, v44, 0);
  uint64_t v45 = v88;
  uint64_t result = sub_24A246478(v43);
  int64_t v46 = result;
  int v48 = v47;
  char v50 = v49 & 1;
  uint64_t v83 = v43 + 56;
  while ((v46 & 0x8000000000000000) == 0 && v46 < 1 << *(unsigned char *)(v43 + 32))
  {
    if (((*(void *)(v83 + (((unint64_t)v46 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v46) & 1) == 0) {
      goto LABEL_29;
    }
    if (*(_DWORD *)(v43 + 36) != v48) {
      goto LABEL_30;
    }
    char v86 = v50;
    uint64_t v51 = (uint64_t *)(*(void *)(v43 + 48) + 16 * v46);
    uint64_t v52 = v43;
    uint64_t v54 = *v51;
    unint64_t v53 = v51[1];
    sub_24A1A52B0(*v51, v53);
    uint64_t v55 = sub_24A231980(v54, v53);
    uint64_t v57 = v56;
    sub_24A1A5384(v54, v53);
    unint64_t v59 = *(void *)(v88 + 16);
    unint64_t v58 = *(void *)(v88 + 24);
    if (v59 >= v58 >> 1) {
      sub_24A245A4C(v58 > 1, v59 + 1, 1);
    }
    *(void *)(v88 + 16) = v59 + 1;
    uint64_t v60 = v88 + 16 * v59;
    *(void *)(v60 + 32) = v55;
    *(void *)(v60 + 40) = v57;
    uint64_t result = sub_24A246BC0(v46, v48, v86 & 1, v52);
    int64_t v46 = result;
    int v48 = v61;
    char v50 = v62 & 1;
    --v44;
    uint64_t v43 = v52;
    if (!v44)
    {
      sub_24A1EA068(result, v61, v50);
      swift_bridgeObjectRelease();
      uint64_t v34 = v75;
      goto LABEL_26;
    }
  }
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_24A2457A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = sub_24A1C50FC;
  return X509FingerprintPolicy.evaluate(bundle:context:)((uint64_t)v6, a2, a3);
}

BOOL static X509FingerprintPolicy.Error.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t X509FingerprintPolicy.Error.hash(into:)()
{
  return sub_24A2A7F20();
}

uint64_t X509FingerprintPolicy.Error.hashValue.getter()
{
  return sub_24A2A7F50();
}

uint64_t sub_24A2458E0()
{
  return sub_24A2A7F50();
}

uint64_t type metadata accessor for X509FingerprintPolicy.Error()
{
  return __swift_instantiateGenericMetadata();
}

void *sub_24A245934(void *result, void *a2)
{
  if (result)
  {

    swift_bridgeObjectRelease();
    return (void *)swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_24A245990(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_24A245AA8(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_24A2459B0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_24A245C34(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_24A2459D0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_24A245DA0(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_24A2459F0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_24A245F24(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_24A245A10(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_24A24622C(a1, a2, a3, (void *)*v3, &qword_26B174B70, MEMORY[0x263F7BF30]);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_24A245A4C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_24A2460C0(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_24A245A6C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_24A24622C(a1, a2, a3, (void *)*v3, &qword_269779790, type metadata accessor for Proto_SealedHash.Entry);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_24A245AA8(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_269778DC8);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 56);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  char v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[56 * v8]) {
      memmove(v12, v13, 56 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[56 * v8] || v12 >= &v13[56 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = sub_24A2A7D70();
  __break(1u);
  return result;
}

uint64_t sub_24A245C34(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_26B174B48);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_24A2A7D70();
  __break(1u);
  return result;
}

uint64_t sub_24A245DA0(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_26B174B58);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[40 * v8]) {
      memmove(v12, v13, 40 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[40 * v8] || v12 >= &v13[40 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = sub_24A2A7D70();
  __break(1u);
  return result;
}

uint64_t sub_24A245F24(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_26B174B60);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  size_t v14 = 24 * v8;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v14]) {
      memmove(v12, v13, v14);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = sub_24A2A7D70();
  __break(1u);
  return result;
}

uint64_t sub_24A2460A0(char a1, int64_t a2, char a3, void *a4)
{
  return sub_24A24622C(a1, a2, a3, a4, &qword_26B174B70, MEMORY[0x263F7BF30]);
}

uint64_t sub_24A2460C0(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_26B174B80);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_24A2A7D70();
  __break(1u);
  return result;
}

uint64_t sub_24A24622C(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t (*a6)(void))
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    unint64_t v16 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v13 = *(void *)(a6(0) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  unint64_t v16 = (void *)swift_allocObject();
  size_t v17 = _swift_stdlib_malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_34;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  uint64_t v19 = *(void *)(a6(0) - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  uint64_t v21 = (char *)v16 + v20;
  os_log_type_t v22 = (char *)a4 + v20;
  if (a1)
  {
    if (v16 < a4 || v21 >= &v22[*(void *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  uint64_t v23 = *(void *)(v19 + 72) * v11;
  uint64_t v24 = &v21[v23];
  unint64_t v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  uint64_t result = sub_24A2A7D70();
  __break(1u);
  return result;
}

uint64_t sub_24A246478(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3) {
    unint64_t v7 = 3;
  }
  unint64_t v8 = v7 - 3;
  unint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 128;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t sub_24A246518()
{
  return swift_getWitnessTable();
}

uint64_t sub_24A246534()
{
  uint64_t result = sub_24A2A7160();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_24A2465CC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_24A2A7160();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 36)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 36));
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_24A24669C(uint64_t a1)
{
  uint64_t v2 = sub_24A2A7160();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);

  return swift_bridgeObjectRelease();
}

uint64_t sub_24A246710(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_24A2A7160();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 36)) = *(void *)(a2 + *(int *)(a3 + 36));
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_24A246790(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_24A2A7160();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 36)) = *(void *)(a2 + *(int *)(a3 + 36));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_24A24681C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_24A2A7160();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 36)) = *(void *)(a2 + *(int *)(a3 + 36));
  return a1;
}

uint64_t sub_24A246898(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_24A2A7160();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 36)) = *(void *)(a2 + *(int *)(a3 + 36));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_24A24691C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24A246930);
}

uint64_t sub_24A246930(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_24A2A7160();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 36));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_24A2469F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24A246A04);
}

uint64_t sub_24A246A04(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_24A2A7160();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 36)) = (a2 - 1);
  }
  return result;
}

uint64_t sub_24A246AC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 16);
}

unsigned char *sub_24A246AC8(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24A246B94);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

int64_t sub_24A246BC0(int64_t result, int a2, char a3, uint64_t a4)
{
  if (a3) {
    goto LABEL_20;
  }
  unint64_t v4 = result;
  if (result < 0 || (uint64_t result = 1 << *(unsigned char *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v5 = v4 >> 6;
  uint64_t v6 = a4 + 56;
  unint64_t v7 = *(void *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  unint64_t v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8) {
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  }
  unint64_t v9 = v5 + 1;
  unint64_t v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    unint64_t v11 = *(void *)(v6 + 8 * v9);
    if (v11) {
      return __clz(__rbit64(v11)) + (v9 << 6);
    }
    unint64_t v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      unint64_t v11 = *(void *)(v6 + 8 * v9);
      if (v11) {
        return __clz(__rbit64(v11)) + (v9 << 6);
      }
      while (v10 - 3 != v5)
      {
        unint64_t v11 = *(void *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          unint64_t v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

uint64_t sub_24A246CA8()
{
  uint64_t v0 = sub_24A2A7160();
  __swift_allocate_value_buffer(v0, qword_26B1768C8);
  __swift_project_value_buffer(v0, (uint64_t)qword_26B1768C8);
  return sub_24A2A7150();
}

uint64_t APTicketPolicy.evaluate(bundle:context:)(uint64_t a1, uint64_t a2)
{
  v2[2] = a1;
  v2[3] = a2;
  uint64_t v3 = sub_24A2A7390();
  v2[4] = v3;
  v2[5] = *(void *)(v3 - 8);
  v2[6] = swift_task_alloc();
  uint64_t v4 = sub_24A2A71D0();
  v2[7] = v4;
  v2[8] = *(void *)(v4 - 8);
  v2[9] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_24A246E74, 0, 0);
}

uint64_t sub_24A246E74()
{
  uint64_t v43 = v0;
  v42[1] = *(unsigned char **)MEMORY[0x263EF8340];
  uint64_t v37 = **(void **)(v0 + 24);
  AttestationPolicyContext.validatedAttestation.getter((uint64_t)&v38);
  unint64_t v1 = v39;
  if (v39 >> 60 == 15)
  {
    sub_24A247490();
    swift_allocError();
    *uint64_t v2 = 1;
    swift_willThrow();
LABEL_25:
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v25 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_26;
  }
  uint64_t v3 = v38;
  uint64_t v5 = v40;
  unint64_t v4 = v41;
  v42[0] = 0;
  uint64_t v37 = 0;
  sub_24A1A52B0(v38, v39);
  sub_24A1A52B0(v5, v4);
  sub_24A1A52B0(v3, v1);
  sub_24A1A52B0(v5, v4);
  sub_24A1EE170(v5, v4, v42, &v37, v3, v1, &v38, v5, v4);
  sub_24A211D18(v3, v1, v5, v4);
  if ((~v40 & 0x3000000000000000) == 0)
  {
    sub_24A247490();
    swift_allocError();
    *uint64_t v6 = 0;
    swift_willThrow();
    sub_24A211D18(v3, v1, v5, v4);
    goto LABEL_25;
  }
  uint64_t v7 = *(void *)(v0 + 16);
  unint64_t v8 = v40 & 0xDFFFFFFFFFFFFFFFLL;
  uint64_t v35 = v38;
  uint64_t v36 = v40;
  if ((v40 & 0x2000000000000000) != 0) {
    uint64_t v9 = v39;
  }
  else {
    uint64_t v9 = v38;
  }
  uint64_t v33 = v9;
  unint64_t v34 = v39;
  if ((v40 & 0x2000000000000000) == 0) {
    unint64_t v8 = v39;
  }
  unint64_t v32 = v8;
  uint64_t v10 = *(void *)(v7 + 16);
  unint64_t v11 = *(void *)(v7 + 24);
  sub_24A1A52B0(v10, v11);
  sub_24A1B7B20();
  sub_24A2A71A0();
  switch(v11 >> 62)
  {
    case 1uLL:
      if (v10 >> 32 < (int)v10) {
        __break(1u);
      }
      sub_24A1A52B0(v10, v11);
      sub_24A1B7A70((int)v10, v10 >> 32);
      goto LABEL_14;
    case 2uLL:
      uint64_t v13 = *(void *)(v10 + 16);
      uint64_t v12 = *(void *)(v10 + 24);
      sub_24A1A52B0(v10, v11);
      swift_retain();
      swift_retain();
      sub_24A1B7A70(v13, v12);
      swift_release();
      swift_release();
LABEL_14:
      unint64_t v31 = v4;
      sub_24A1A5384(v10, v11);
      goto LABEL_18;
    case 3uLL:
      unint64_t v31 = v4;
      *(void *)(v0 + 94) = 0;
      *(void *)(v0 + 100) = 0;
      goto LABEL_17;
    default:
      unint64_t v31 = v4;
      *(void *)(v0 + 80) = v10;
      *(_WORD *)(v0 + 88) = v11;
      *(unsigned char *)(v0 + 90) = BYTE2(v11);
      *(unsigned char *)(v0 + 91) = BYTE3(v11);
      *(unsigned char *)(v0 + 92) = BYTE4(v11);
      *(unsigned char *)(v0 + 93) = BYTE5(v11);
LABEL_17:
      sub_24A2A7170();
      sub_24A1A5384(v10, v11);
LABEL_18:
      uint64_t v14 = *(void *)(v0 + 72);
      uint64_t v16 = *(void *)(v0 + 40);
      uint64_t v15 = *(void *)(v0 + 48);
      uint64_t v17 = *(void *)(v0 + 32);
      sub_24A2A7180();
      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
      sub_24A1A5384(v10, v11);
      if ((sub_24A214CE4(v14, v33, v32) & 1) == 0)
      {
        uint64_t v26 = *(void *)(v0 + 64);
        uint64_t v27 = *(void *)(v0 + 72);
        uint64_t v28 = *(void *)(v0 + 56);
        sub_24A247490();
        swift_allocError();
        *uint64_t v29 = 2;
        swift_willThrow();
        sub_24A215A1C(v35, v34, v36);
        sub_24A211D18(v3, v1, v5, v31);
        (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v27, v28);
        goto LABEL_25;
      }
      if (qword_26B174528 != -1) {
        swift_once();
      }
      uint64_t v18 = sub_24A2A7160();
      __swift_project_value_buffer(v18, (uint64_t)qword_26B1768C8);
      uint64_t v19 = sub_24A2A7140();
      os_log_type_t v20 = sub_24A2A7B40();
      if (os_log_type_enabled(v19, v20))
      {
        uint64_t v21 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v21 = 0;
        _os_log_impl(&dword_24A19F000, v19, v20, "AttestationBundle passed APTicketPolicy: reported AP ticket matches SEP attestation", v21, 2u);
        MEMORY[0x24C5C00A0](v21, -1, -1);
      }
      uint64_t v23 = *(void *)(v0 + 64);
      uint64_t v22 = *(void *)(v0 + 72);
      uint64_t v24 = *(void *)(v0 + 56);
      sub_24A215A1C(v35, v34, v36);

      sub_24A211D18(v3, v1, v5, v31);
      (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v24);
      swift_task_dealloc();
      swift_task_dealloc();
      unint64_t v25 = *(uint64_t (**)(void))(v0 + 8);
      break;
  }
LABEL_26:
  return v25();
}

unint64_t sub_24A247490()
{
  unint64_t result = qword_2697797A0;
  if (!qword_2697797A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2697797A0);
  }
  return result;
}

uint64_t sub_24A2474E4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_24A1C50FC;
  return APTicketPolicy.evaluate(bundle:context:)(a1, a2);
}

BOOL static APTicketPolicy.Error.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t APTicketPolicy.Error.hash(into:)()
{
  return sub_24A2A7F20();
}

uint64_t APTicketPolicy.Error.hashValue.getter()
{
  return sub_24A2A7F50();
}

unint64_t sub_24A24760C()
{
  unint64_t result = qword_2697797B0;
  if (!qword_2697797B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2697797B0);
  }
  return result;
}

ValueMetadata *type metadata accessor for APTicketPolicy()
{
  return &type metadata for APTicketPolicy;
}

unsigned char *storeEnumTagSinglePayload for APTicketPolicy.Error(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24A24773CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for APTicketPolicy.Error()
{
  return &type metadata for APTicketPolicy.Error;
}

BOOL sub_24A247774(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1 == a3;
}

BOOL sub_24A247780(uint64_t a1, char a2, uint64_t a3, char a4)
{
  if (a2) {
    a1 = qword_24A2AE210[a1];
  }
  if (a4) {
    a3 = qword_24A2AE210[a3];
  }
  return a1 == a3;
}

BOOL sub_24A2477A4(uint64_t a1, char a2, uint64_t a3, char a4)
{
  if (a2) {
    a1 = qword_24A2AE248[a1];
  }
  if (a4) {
    a3 = qword_24A2AE248[a3];
  }
  return a1 == a3;
}

uint64_t sub_24A2477C8(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 7759204;
  unint64_t v3 = 0xE300000000000000;
  uint64_t v4 = a1;
  uint64_t v5 = 7759204;
  switch(v4)
  {
    case 1:
      uint64_t v5 = 0x6172656D65687065;
      unint64_t v3 = 0xE90000000000006CLL;
      break;
    case 2:
      unint64_t v3 = 0xE400000000000000;
      uint64_t v5 = 1718773104;
      break;
    case 3:
      unint64_t v3 = 0xE200000000000000;
      uint64_t v5 = 24945;
      break;
    case 4:
      unint64_t v3 = 0xE700000000000000;
      uint64_t v5 = 0x676E6967617473;
      break;
    case 5:
      uint64_t v5 = 7627125;
      break;
    case 6:
      unint64_t v3 = 0xE500000000000000;
      uint64_t v5 = 0x7972726163;
      break;
    case 7:
      uint64_t v5 = 0x69746375646F7270;
      unint64_t v3 = 0xEA00000000006E6FLL;
      break;
    case 8:
      uint64_t v5 = 0x616D697250326171;
      unint64_t v3 = 0xEA00000000007972;
      break;
    case 9:
      uint64_t v5 = 0x7265746E49326171;
      unint64_t v3 = 0xEB000000006C616ELL;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE300000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xE90000000000006CLL;
      if (v5 == 0x6172656D65687065) {
        goto LABEL_28;
      }
      goto LABEL_31;
    case 2:
      unint64_t v6 = 0xE400000000000000;
      if (v5 != 1718773104) {
        goto LABEL_31;
      }
      goto LABEL_28;
    case 3:
      unint64_t v6 = 0xE200000000000000;
      if (v5 != 24945) {
        goto LABEL_31;
      }
      goto LABEL_28;
    case 4:
      unint64_t v6 = 0xE700000000000000;
      if (v5 != 0x676E6967617473) {
        goto LABEL_31;
      }
      goto LABEL_28;
    case 5:
      if (v5 != 7627125) {
        goto LABEL_31;
      }
      goto LABEL_28;
    case 6:
      unint64_t v6 = 0xE500000000000000;
      if (v5 != 0x7972726163) {
        goto LABEL_31;
      }
      goto LABEL_28;
    case 7:
      unint64_t v6 = 0xEA00000000006E6FLL;
      if (v5 != 0x69746375646F7270) {
        goto LABEL_31;
      }
      goto LABEL_28;
    case 8:
      uint64_t v2 = 0x616D697250326171;
      unint64_t v6 = 0xEA00000000007972;
      goto LABEL_27;
    case 9:
      unint64_t v6 = 0xEB000000006C616ELL;
      if (v5 != 0x7265746E49326171) {
        goto LABEL_31;
      }
      goto LABEL_28;
    default:
LABEL_27:
      if (v5 != v2) {
        goto LABEL_31;
      }
LABEL_28:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_31:
      }
        char v7 = sub_24A2A7E40();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_24A247AAC(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v3 = 0x7972726163;
    }
    else {
      uint64_t v3 = 0x72656D6F74737563;
    }
    if (v2 == 1) {
      unint64_t v4 = 0xE500000000000000;
    }
    else {
      unint64_t v4 = 0xE800000000000000;
    }
    int v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1) {
        uint64_t v6 = 0x7972726163;
      }
      else {
        uint64_t v6 = 0x72656D6F74737563;
      }
      if (v5 == 1) {
        unint64_t v7 = 0xE500000000000000;
      }
      else {
        unint64_t v7 = 0xE800000000000000;
      }
      if (v3 != v6) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
  else
  {
    unint64_t v4 = 0xE400000000000000;
    uint64_t v3 = 1701736302;
    int v5 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }
  unint64_t v7 = 0xE400000000000000;
  if (v3 != 1701736302)
  {
LABEL_21:
    char v8 = sub_24A2A7E40();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7) {
    goto LABEL_21;
  }
  char v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t DarwinInitPolicy.init<A>(securityPolicies:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a2);
  uint64_t v8 = sub_24A2A7AA0();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
  *a3 = v8;
  return result;
}

void AttestationPolicyContext.validatedDarwinInit.getter(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  if (!*(void *)(v3 + 16)
    || (unint64_t v4 = sub_24A1BE7EC((uint64_t)&type metadata for DarwinInitPolicy, (uint64_t)&protocol witness table for DarwinInitPolicy, 0xD000000000000013, 0x800000024A2B3DD0), (v5 & 1) == 0)|| (sub_24A1C9680(*(void *)(v3 + 56) + 32 * v4, (uint64_t)&v6), __swift_instantiateConcreteTypeFromMangledName(&qword_26B174BB8), (swift_dynamicCast() & 1) == 0))
  {
    *(void *)a1 = 0;
    *(unsigned char *)(a1 + 8) = 0;
  }
}

uint64_t sub_24A247D5C()
{
  uint64_t v0 = sub_24A2A7160();
  __swift_allocate_value_buffer(v0, qword_26B176910);
  __swift_project_value_buffer(v0, (uint64_t)qword_26B176910);
  return sub_24A2A7150();
}

uint64_t DarwinInitPolicy.allowedSecurityPolicies.getter()
{
  return swift_bridgeObjectRetain();
}

CloudAttestation::DarwinInitPolicy __swiftcall DarwinInitPolicy.init(securityPolicy:)(CloudAttestation::DarwinInit::SecureConfigSecurityPolicy securityPolicy)
{
  int v2 = v1;
  char v3 = *(unsigned char *)securityPolicy;
  __swift_instantiateConcreteTypeFromMangledName(&qword_269779978);
  result.allowedSecurityPolicies._rawValue = (void *)swift_allocObject();
  *((_OWORD *)result.allowedSecurityPolicies._rawValue + 1) = xmmword_24A2A8A60;
  *((unsigned char *)result.allowedSecurityPolicies._rawValue + 32) = v3;
  v2->allowedSecurityPolicies._rawValue = result.allowedSecurityPolicies._rawValue;
  return result;
}

uint64_t DarwinInitPolicy.evaluate(bundle:context:)(uint64_t a1, uint64_t a2)
{
  v3[10] = a1;
  v3[11] = a2;
  v3[12] = *v2;
  return MEMORY[0x270FA2498](sub_24A247E64, 0, 0);
}

uint64_t sub_24A247E64()
{
  v108 = v0;
  if (qword_26B174608 != -1) {
LABEL_92:
  }
    swift_once();
  uint64_t v1 = sub_24A2A7160();
  __swift_project_value_buffer(v1, (uint64_t)qword_26B176910);
  swift_bridgeObjectRetain_n();
  int v2 = sub_24A2A7140();
  os_log_type_t v3 = sub_24A2A7B40();
  os_log_t log = (os_log_t)v0;
  v95 = (uint64_t *)(v0 + 2);
  if (os_log_type_enabled(v2, v3))
  {
    unint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = swift_slowAlloc();
    v107[0] = v5;
    *(_DWORD *)unint64_t v4 = 136446210;
    uint64_t v6 = swift_bridgeObjectRetain();
    uint64_t v7 = MEMORY[0x24C5BF1D0](v6, &type metadata for DarwinInit.SecureConfigSecurityPolicy);
    unint64_t v9 = v8;
    swift_bridgeObjectRelease();
    v0[2] = sub_24A1C52A8(v7, v9, v107);
    sub_24A2A7B70();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_24A19F000, v2, v3, "Evaluating DarwinInit against allowed policies: %{public}s", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C5C00A0](v5, -1, -1);
    MEMORY[0x24C5C00A0](v4, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  unint64_t v10 = v0[12];
  uint64_t v11 = *(void *)(v10 + 16);
  if (v11)
  {
    uint64_t v12 = (unsigned __int8 *)(v10 + 32);
    swift_bridgeObjectRetain_n();
    while (1)
    {
      int v14 = *v12++;
      int v13 = v14;
      if (v14 != 1 && v13 != 2) {
        break;
      }
      char v15 = sub_24A2A7E40();
      swift_bridgeObjectRelease();
      if (v15)
      {
        os_log_t v16 = log;
        swift_bridgeObjectRelease_n();
        goto LABEL_15;
      }
      if (!--v11)
      {
        os_log_t v16 = log;
        swift_bridgeObjectRelease_n();
        int type = 0;
        goto LABEL_18;
      }
    }
    os_log_t v16 = log;
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
LABEL_15:
    uint64_t v17 = sub_24A2A7140();
    os_log_type_t v18 = sub_24A2A7B30();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl(&dword_24A19F000, v17, v18, "Allowing absent or invalid darwin-init since DarwinInitPolicy allows config-security-policy=none", v19, 2u);
      MEMORY[0x24C5C00A0](v19, -1, -1);
    }

    int type = 1;
  }
  else
  {
    int type = 0;
    os_log_t v16 = log;
  }
LABEL_18:
  os_log_type_t v20 = sub_24A2502E4();
  if (!v20)
  {
    char v49 = sub_24A2A7140();
    os_log_type_t v50 = sub_24A2A7B30();
    if (os_log_type_enabled(v49, v50))
    {
      uint64_t v51 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v51 = 0;
      _os_log_impl(&dword_24A19F000, v49, v50, "Missing secure config in Attestation Bundle", v51, 2u);
      MEMORY[0x24C5C00A0](v51, -1, -1);
    }

    if (type) {
      goto LABEL_66;
    }
    sub_24A248F08();
    swift_allocError();
    *uint64_t v52 = 0;
    v52[1] = 0;
    goto LABEL_61;
  }
  uint64_t v21 = v20;
  uint64_t v22 = v20[2];
  if (!v22)
  {
    uint64_t v24 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_54;
  }
  uint64_t v23 = 0;
  uint64_t v103 = -v22;
  uint64_t v24 = (void *)MEMORY[0x263F8EE78];
  unint64_t v25 = v20 + 8;
  char v92 = v20 + 8;
  do
  {
    uint64_t v93 = (uint64_t)v24;
    uint64_t v0 = &v25[5 * v23++];
    while (1)
    {
      if ((unint64_t)(v23 - 1) >= v21[2])
      {
        __break(1u);
        goto LABEL_92;
      }
      uint64_t v26 = *(v0 - 2);
      if (*(void *)(v26 + 16)) {
        break;
      }
LABEL_24:
      ++v23;
      v0 += 5;
      if (v103 + v23 == 1)
      {
        os_log_t v16 = log;
        uint64_t v24 = (void *)v93;
        goto LABEL_54;
      }
    }
    uint64_t v28 = *(v0 - 4);
    unint64_t v27 = *(v0 - 3);
    uint64_t v30 = *(v0 - 1);
    unint64_t v29 = *v0;
    sub_24A1A52B0(v28, v27);
    swift_bridgeObjectRetain();
    sub_24A1A52B0(v30, v29);
    sub_24A1A52B0(v28, v27);
    swift_bridgeObjectRetain();
    sub_24A1A52B0(v30, v29);
    unint64_t v31 = sub_24A1BE668(1701667182, 0xE400000000000000);
    if ((v32 & 1) == 0)
    {
LABEL_22:
      sub_24A1A5384(v28, v27);
      swift_bridgeObjectRelease();
      sub_24A1A5384(v30, v29);
LABEL_23:
      sub_24A1A5384(v28, v27);
      swift_bridgeObjectRelease();
      sub_24A1A5384(v30, v29);
      goto LABEL_24;
    }
    uint64_t v33 = (uint64_t *)(*(void *)(v26 + 56) + 16 * v31);
    uint64_t v35 = *v33;
    uint64_t v34 = v33[1];
    swift_bridgeObjectRetain();
    sub_24A1A5384(v28, v27);
    swift_bridgeObjectRelease();
    sub_24A1A5384(v30, v29);
    if (v35 == 0x692D6E6977726164 && v34 == 0xEB0000000074696ELL)
    {
      swift_bridgeObjectRelease();
      if (!*(void *)(v26 + 16)) {
        goto LABEL_23;
      }
    }
    else
    {
      char v37 = sub_24A2A7E40();
      swift_bridgeObjectRelease();
      if ((v37 & 1) == 0 || !*(void *)(v26 + 16)) {
        goto LABEL_23;
      }
    }
    sub_24A1A52B0(v28, v27);
    swift_bridgeObjectRetain();
    sub_24A1A52B0(v30, v29);
    unint64_t v38 = sub_24A1BE668(0x7079745F656D696DLL, 0xE900000000000065);
    if ((v39 & 1) == 0) {
      goto LABEL_22;
    }
    uint64_t v40 = (uint64_t *)(*(void *)(v26 + 56) + 16 * v38);
    uint64_t v42 = *v40;
    uint64_t v41 = v40[1];
    swift_bridgeObjectRetain();
    sub_24A1A5384(v28, v27);
    swift_bridgeObjectRelease();
    sub_24A1A5384(v30, v29);
    if (v42 != 0xD000000000000010 || v41 != 0x800000024A2B2BF0)
    {
      char v43 = sub_24A2A7E40();
      swift_bridgeObjectRelease();
      if (v43) {
        goto LABEL_42;
      }
      goto LABEL_23;
    }
    swift_bridgeObjectRelease();
LABEL_42:
    uint64_t v44 = v93;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v107[0] = v93;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_24A2459D0(0, *(void *)(v93 + 16) + 1, 1);
      uint64_t v44 = v107[0];
    }
    unint64_t v25 = v92;
    unint64_t v47 = *(void *)(v44 + 16);
    unint64_t v46 = *(void *)(v44 + 24);
    if (v47 >= v46 >> 1)
    {
      sub_24A2459D0(v46 > 1, v47 + 1, 1);
      unint64_t v25 = v92;
      uint64_t v44 = v107[0];
    }
    *(void *)(v44 + 16) = v47 + 1;
    int v48 = (void *)(v44 + 40 * v47);
    v48[4] = v28;
    v48[5] = v27;
    v48[6] = v26;
    v48[7] = v30;
    v48[8] = v29;
    os_log_t v16 = log;
    uint64_t v24 = (void *)v44;
  }
  while (v103 + v23);
LABEL_54:
  swift_bridgeObjectRelease();
  uint64_t v53 = v24[2];
  if (!v53)
  {
    swift_release();
    unint64_t v59 = sub_24A2A7140();
    os_log_type_t v60 = sub_24A2A7B30();
    if (os_log_type_enabled(v59, v60))
    {
      uint64_t v61 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v61 = 0;
      _os_log_impl(&dword_24A19F000, v59, v60, "Attestation contains secure config, but none of them are darwin-init", v61, 2u);
      MEMORY[0x24C5C00A0](v61, -1, -1);
    }

    if (type) {
      goto LABEL_66;
    }
    sub_24A248F08();
    swift_allocError();
    *char v62 = xmmword_24A2ADC50;
LABEL_61:
    swift_willThrow();
LABEL_69:
    isa = (uint64_t (*)(void))v16[1].isa;
    goto LABEL_70;
  }
  uint64_t v55 = v24[4];
  unint64_t v54 = v24[5];
  uint64_t v57 = v24[6];
  uint64_t v56 = v24[7];
  unint64_t v58 = v24[8];
  sub_24A1A52B0(v55, v54);
  swift_bridgeObjectRetain();
  sub_24A1A52B0(v56, v58);
  swift_release();
  if (v53 != 1)
  {
    uint64_t v63 = sub_24A2A7140();
    os_log_type_t v64 = sub_24A2A7B30();
    if (os_log_type_enabled(v63, v64))
    {
      uint64_t v65 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v65 = 0;
      _os_log_impl(&dword_24A19F000, v63, v64, "Attestation contains too many darwin-init secure configs", v65, 2u);
      MEMORY[0x24C5C00A0](v65, -1, -1);
    }

    if (type) {
      goto LABEL_65;
    }
    sub_24A248F08();
    swift_allocError();
    *uint64_t v67 = xmmword_24A2ADC40;
    swift_willThrow();
LABEL_68:
    sub_24A1A5384(v55, v54);
    swift_bridgeObjectRelease();
    sub_24A1A5384(v56, v58);
    goto LABEL_69;
  }
  v107[0] = v55;
  v107[1] = v54;
  v107[2] = v57;
  v107[3] = v56;
  v107[4] = v58;
  sub_24A1A52B0(v55, v54);
  swift_bridgeObjectRetain();
  sub_24A1A52B0(v56, v58);
  DarwinInit.init(from:)(v107, (uint64_t)&v105);
  uint64_t v69 = (uint64_t)v16[12].isa;
  v104 = v105;
  unint64_t v70 = v106;
  swift_bridgeObjectRetain();
  char v71 = sub_24A248CB8((char)v70, v69);
  swift_bridgeObjectRelease();
  if ((v71 & 1) == 0)
  {
    os_log_t loga = v70;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v79 = sub_24A2A7140();
    os_log_type_t v80 = sub_24A2A7B30();
    if (os_log_type_enabled(v79, v80))
    {
      os_log_type_t buf = v80;
      uint64_t v81 = swift_slowAlloc();
      uint64_t v94 = swift_slowAlloc();
      v107[0] = v94;
      *(_DWORD *)uint64_t v81 = 136446466;
      unint64_t v82 = 0xE500000000000000;
      uint64_t v83 = 0x7972726163;
      if (loga != 1)
      {
        uint64_t v83 = 0x72656D6F74737563;
        unint64_t v82 = 0xE800000000000000;
      }
      if (loga) {
        uint64_t v84 = v83;
      }
      else {
        uint64_t v84 = 1701736302;
      }
      if (loga) {
        unint64_t v85 = v82;
      }
      else {
        unint64_t v85 = 0xE400000000000000;
      }
      v16[2].isa = (Class)sub_24A1C52A8(v84, v85, v107);
      sub_24A2A7B70();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v81 + 12) = 2082;
      uint64_t v86 = swift_bridgeObjectRetain();
      uint64_t v87 = MEMORY[0x24C5BF1D0](v86, &type metadata for DarwinInit.SecureConfigSecurityPolicy);
      unint64_t v89 = v88;
      swift_bridgeObjectRelease();
      v16[2].isa = (Class)sub_24A1C52A8(v87, v89, v107);
      sub_24A2A7B70();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_24A19F000, v79, buf, "Darwin-Init security policy %{public}s not in list of allowed policies: %{public}s", (uint8_t *)v81, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x24C5C00A0](v94, -1, -1);
      MEMORY[0x24C5C00A0](v81, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    if (type)
    {
      swift_bridgeObjectRelease();
LABEL_65:
      sub_24A1A5384(v55, v54);
      swift_bridgeObjectRelease();
      sub_24A1A5384(v56, v58);
      goto LABEL_66;
    }
    uint64_t v90 = v16[12].isa;
    sub_24A248F08();
    swift_allocError();
    *uint64_t v91 = loga;
    v91[1] = v90;
    swift_bridgeObjectRetain();
    swift_willThrow();
    swift_bridgeObjectRelease();
    goto LABEL_68;
  }
  LOBYTE(v16[3].isa) = (_BYTE)v70;
  v16[5].isa = (Class)&type metadata for DarwinInit;
  v16[2].isa = v104;
  sub_24A1DD134((uint64_t)v95, (uint64_t)&v16[6]);
  sub_24A1DA970((uint64_t)&v16[6], (uint64_t)&type metadata for DarwinInitPolicy, (uint64_t)&protocol witness table for DarwinInitPolicy, 0xD000000000000013, 0x800000024A2B3DD0);
  sub_24A1F182C((uint64_t)v95);
  swift_bridgeObjectRetain_n();
  uint64_t v72 = sub_24A2A7140();
  os_log_type_t v73 = sub_24A2A7B40();
  if (os_log_type_enabled(v72, v73))
  {
    logb = v72;
    os_log_type_t typea = v73;
    uint64_t v74 = (uint8_t *)swift_slowAlloc();
    os_log_t v99 = (os_log_t)swift_slowAlloc();
    v107[0] = (uint64_t)v99;
    *(_DWORD *)uint64_t v74 = 136446210;
    uint64_t v75 = swift_bridgeObjectRetain();
    uint64_t v76 = MEMORY[0x24C5BF1D0](v75, &type metadata for DarwinInit.SecureConfigSecurityPolicy);
    unint64_t v78 = v77;
    swift_bridgeObjectRelease();
    uint64_t *v95 = sub_24A1C52A8(v76, v78, v107);
    sub_24A2A7B70();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_24A19F000, logb, typea, "AttestationBundle passed DarwinInitPolicy: reported darwin-init config-security-policy matches allowed list: %{public}s", v74, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C5C00A0](v99, -1, -1);
    MEMORY[0x24C5C00A0](v74, -1, -1);

    goto LABEL_65;
  }
  sub_24A1A5384(v55, v54);
  swift_bridgeObjectRelease();
  sub_24A1A5384(v56, v58);

  swift_bridgeObjectRelease_n();
LABEL_66:
  isa = (uint64_t (*)(void))v16[1].isa;
LABEL_70:
  return isa();
}

uint64_t sub_24A248CB8(char a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0;
  }
  swift_bridgeObjectRetain();
  uint64_t v5 = 0;
  while (1)
  {
    uint64_t v6 = a2 + v5++;
    int v7 = *(unsigned __int8 *)(v6 + 32);
    uint64_t v8 = 0x72656D6F74737563;
    if (v7 == 1)
    {
      uint64_t v8 = 0x7972726163;
      unint64_t v9 = 0xE500000000000000;
    }
    else
    {
      unint64_t v9 = 0xE800000000000000;
    }
    uint64_t v10 = v7 ? v8 : 1701736302;
    unint64_t v11 = v7 ? v9 : 0xE400000000000000;
    if (a1)
    {
      if (a1 == 1) {
        uint64_t v12 = 0x7972726163;
      }
      else {
        uint64_t v12 = 0x72656D6F74737563;
      }
      if (a1 == 1) {
        unint64_t v13 = 0xE500000000000000;
      }
      else {
        unint64_t v13 = 0xE800000000000000;
      }
      if (v10 != v12) {
        goto LABEL_23;
      }
    }
    else
    {
      unint64_t v13 = 0xE400000000000000;
      if (v10 != 1701736302) {
        goto LABEL_23;
      }
    }
    if (v11 == v13)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      return 1;
    }
LABEL_23:
    char v14 = sub_24A2A7E40();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v14) {
      break;
    }
    if (v2 == v5)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  swift_bridgeObjectRelease();
  return 1;
}

void static DarwinInitPolicy.validatedDarwinInitKey.getter(void *a1@<X8>)
{
  *a1 = &type metadata for DarwinInitPolicy;
  a1[1] = &protocol witness table for DarwinInitPolicy;
  a1[2] = 0xD000000000000013;
  a1[3] = 0x800000024A2B3DD0;
}

uint64_t sub_24A248E48(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = sub_24A1C50FC;
  v6[10] = a1;
  v6[11] = a2;
  v6[12] = *v2;
  return MEMORY[0x270FA2498](sub_24A247E64, 0, 0);
}

unint64_t sub_24A248F08()
{
  unint64_t result = qword_269779988;
  if (!qword_269779988)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269779988);
  }
  return result;
}

ValueMetadata *type metadata accessor for DarwinInitPolicy()
{
  return &type metadata for DarwinInitPolicy;
}

unint64_t destroy for DarwinInitPolicy.Error(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 8);
  if (result >= 0xFFFFFFFF) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t _s16CloudAttestation16DarwinInitPolicyV5ErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    *(void *)(a1 + 8) = v3;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t assignWithCopy for DarwinInitPolicy.Error(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(void *)(a1 + 8) < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *(unsigned char *)a1 = *(unsigned char *)a2;
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for DarwinInitPolicy.Error(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8) < 0xFFFFFFFFuLL) {
    goto LABEL_5;
  }
  unint64_t v4 = *(void *)(a2 + 8);
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for DarwinInitPolicy.Error(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFD && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 2147483645);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 2;
  if (v4 >= 4) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for DarwinInitPolicy.Error(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFD)
  {
    *(void *)unint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)unint64_t result = a2 - 2147483645;
    if (a3 >= 0x7FFFFFFD) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFD) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2 + 2;
    }
  }
  return result;
}

void *sub_24A249190(void *result, int a2)
{
  if (a2 < 0)
  {
    *unint64_t result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for DarwinInitPolicy.Error()
{
  return &type metadata for DarwinInitPolicy.Error;
}

uint64_t sub_24A2491C4@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174800);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Proto_SealedHashLedger(0);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (unint64_t *)((char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = type metadata accessor for Proto_AttestationBundle(0);
  sub_24A1B2CAC(v3 + *(int *)(v13 + 32), (uint64_t)v8, &qword_26B174800);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    *uint64_t v12 = sub_24A1BBEA8(MEMORY[0x263F8EE78]);
    sub_24A2A6E00();
    sub_24A1B2D10((uint64_t)v8, &qword_26B174800);
  }
  else
  {
    sub_24A24B1F8((uint64_t)v8, (uint64_t)v12, type metadata accessor for Proto_SealedHashLedger);
  }
  unint64_t v14 = *v12;
  swift_bridgeObjectRetain();
  sub_24A24B260((uint64_t)v12, type metadata accessor for Proto_SealedHashLedger);
  if (qword_26B174348 != -1) {
    swift_once();
  }
  uint64_t v15 = sub_24A2A6C00();
  uint64_t v16 = __swift_project_value_buffer(v15, (uint64_t)qword_26B174330);
  uint64_t v17 = sub_24A2A6BE0();
  if (*(void *)(v14 + 16))
  {
    sub_24A1BE668(v17, v18);
    char v20 = v19;
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if (v20) {
      return sub_24A24A3E0(v16, a1 & 1, (void *)a2);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
  }
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 8) = -1;
  return result;
}

uint64_t sub_24A249438()
{
  uint64_t v1 = *v0;
  int64_t v2 = *(void *)(*v0 + 16);
  uint64_t v3 = MEMORY[0x263F8EE78];
  if (v2)
  {
    uint64_t v12 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    sub_24A2459F0(0, v2, 0);
    uint64_t v3 = v12;
    unsigned int v4 = (unsigned char *)(v1 + 48);
    do
    {
      uint64_t v5 = *((void *)v4 - 2);
      unint64_t v6 = *((void *)v4 - 1);
      char v7 = *v4;
      sub_24A1A52B0(v5, v6);
      unint64_t v9 = *(void *)(v12 + 16);
      unint64_t v8 = *(void *)(v12 + 24);
      if (v9 >= v8 >> 1) {
        sub_24A2459F0(v8 > 1, v9 + 1, 1);
      }
      v4 += 24;
      *(void *)(v12 + 16) = v9 + 1;
      uint64_t v10 = v12 + 24 * v9;
      *(void *)(v10 + 32) = v5;
      *(void *)(v10 + 40) = v6;
      *(unsigned char *)(v10 + 48) = v7;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  return v3;
}

uint64_t static Cryptex.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  unint64_t v3 = *(void *)(a1 + 8);
  int v4 = *(unsigned __int8 *)(a1 + 16);
  uint64_t v5 = *(void *)a2;
  unint64_t v6 = *(void *)(a2 + 8);
  int v7 = *(unsigned __int8 *)(a2 + 16);
  sub_24A1A52B0(*(void *)a1, v3);
  sub_24A1A52B0(v5, v6);
  unsigned __int8 v8 = sub_24A1B7D80(v2, v3, v5, v6);
  sub_24A1A5384(v5, v6);
  sub_24A1A5384(v2, v3);
  return v8 & (v4 == v7);
}

uint64_t sub_24A2495C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  unint64_t v3 = *(void *)(a1 + 8);
  int v4 = *(unsigned __int8 *)(a1 + 16);
  uint64_t v5 = *(void *)a2;
  unint64_t v6 = *(void *)(a2 + 8);
  int v7 = *(unsigned __int8 *)(a2 + 16);
  sub_24A1A52B0(*(void *)a1, v3);
  sub_24A1A52B0(v5, v6);
  unsigned __int8 v8 = sub_24A1B7D80(v2, v3, v5, v6);
  sub_24A1A5384(v5, v6);
  sub_24A1A5384(v2, v3);
  return v8 & (v4 == v7);
}

uint64_t sub_24A249660@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v6 = v5;
  uint64_t v86 = a1;
  uint64_t v87 = a2;
  uint64_t v79 = a4;
  uint64_t v8 = type metadata accessor for SEP.SealedHash(0);
  uint64_t v9 = MEMORY[0x270FA5388](v8);
  uint64_t v10 = MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v77 - v11;
  uint64_t v13 = MEMORY[0x270FA5388](v10);
  uint64_t v15 = (char *)&v77 - v14;
  MEMORY[0x270FA5388](v13);
  uint64_t v18 = *(void *)v4;
  int64_t v19 = *(void *)(*(void *)v4 + 16);
  BOOL v20 = v4[8] != 1 || a3 >> 60 == 15;
  uint64_t v78 = v17;
  uint64_t v83 = (uint64_t)&v77 - v16;
  if (v20)
  {
    uint64_t v21 = (void *)MEMORY[0x263F8EE78];
    if (v19)
    {
      unint64_t v77 = v12;
      uint64_t v81 = v8;
      uint64_t v82 = v5;
      uint64_t v93 = (void *)MEMORY[0x263F8EE78];
      swift_bridgeObjectRetain();
      sub_24A2459B0(0, v19, 0);
      uint64_t v22 = v18;
      uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      uint64_t v84 = AssociatedTypeWitness - 8;
      uint64_t v85 = AssociatedConformanceWitness;
      uint64_t v80 = v22;
      unint64_t v25 = (unint64_t *)(v22 + 40);
      do
      {
        unint64_t v26 = *v25;
        uint64_t v88 = *(v25 - 1);
        uint64_t v27 = v88;
        unint64_t v89 = v26;
        uint64_t v91 = AssociatedTypeWitness;
        uint64_t v92 = v85;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v90);
        sub_24A1A52B0(v27, v26);
        sub_24A1B802C();
        uint64_t v29 = sub_24A2A7190();
        MEMORY[0x270FA5388](v29);
        (*(void (**)(char *, uint64_t *, uint64_t))(v31 + 16))((char *)&v77 - v30, boxed_opaque_existential_1, AssociatedTypeWitness);
        uint64_t v32 = sub_24A2A6B20();
        uint64_t v34 = v33;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v90);
        sub_24A1A5384(v27, v26);
        uint64_t v21 = v93;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_24A2459B0(0, v21[2] + 1, 1);
          uint64_t v21 = v93;
        }
        unint64_t v36 = v21[2];
        unint64_t v35 = v21[3];
        if (v36 >= v35 >> 1)
        {
          sub_24A2459B0(v35 > 1, v36 + 1, 1);
          uint64_t v21 = v93;
        }
        v25 += 3;
        v21[2] = v36 + 1;
        char v37 = &v21[2 * v36];
        v37[4] = v32;
        v37[5] = v34;
        --v19;
      }
      while (v19);
      swift_bridgeObjectRelease();
      uint64_t v8 = v81;
      uint64_t v6 = v82;
      uint64_t v12 = v77;
    }
    *uint64_t v12 = byte_26FDFBD18;
    sub_24A2A7380();
    type metadata accessor for SEP.SealedHash.Value(0);
    swift_storeEnumTagMultiPayload();
    uint64_t v55 = v21[2];
    if (!v55)
    {
      sub_24A1B7964();
      swift_allocError();
      *(_DWORD *)uint64_t v73 = 2;
      *(unsigned char *)(v73 + 4) = 1;
      swift_willThrow();
      swift_bridgeObjectRelease();
      return sub_24A24B260((uint64_t)v12, type metadata accessor for SEP.SealedHash);
    }
    uint64_t v15 = v12;
    swift_bridgeObjectRetain();
    uint64_t v56 = v21 + 5;
    while (1)
    {
      uint64_t v58 = *(v56 - 1);
      unint64_t v57 = *v56;
      sub_24A1A52B0(v58, *v56);
      uint64_t v59 = sub_24A1B52A8(v58, v57);
      unint64_t v61 = v60;
      LOBYTE(v90[0]) = 0;
      SEP.SealedHash.ratchet(digest:flags:)(v59, v60, (unsigned __int8 *)v90);
      if (v6) {
        break;
      }
      v56 += 2;
      sub_24A1A5384(v59, v61);
      if (!--v55)
      {
        swift_bridgeObjectRelease_n();
        uint64_t v62 = v83;
        sub_24A24B1F8((uint64_t)v15, v83, type metadata accessor for SEP.SealedHash);
LABEL_40:
        uint64_t v76 = v78;
        sub_24A24B1F8(v62, v78, type metadata accessor for SEP.SealedHash);
        return sub_24A24B1F8(v76 + *(int *)(v8 + 20), v79, type metadata accessor for SEP.SealedHash.Value);
      }
    }
    goto LABEL_38;
  }
  unint64_t v38 = (void *)MEMORY[0x263F8EE78];
  if (v19)
  {
    unint64_t v77 = v15;
    uint64_t v81 = v8;
    uint64_t v82 = v5;
    uint64_t v93 = (void *)MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    sub_24A2459B0(0, v19, 0);
    uint64_t v39 = v18;
    uint64_t v40 = swift_getAssociatedTypeWitness();
    uint64_t v41 = swift_getAssociatedConformanceWitness();
    uint64_t v84 = v40 - 8;
    uint64_t v85 = v41;
    uint64_t v80 = v39;
    uint64_t v42 = (unint64_t *)(v39 + 40);
    do
    {
      unint64_t v44 = *v42;
      uint64_t v88 = *(v42 - 1);
      uint64_t v43 = v88;
      unint64_t v89 = v44;
      uint64_t v91 = v40;
      uint64_t v92 = v85;
      uint64_t v45 = __swift_allocate_boxed_opaque_existential_1(v90);
      sub_24A1A52B0(v43, v44);
      sub_24A1B802C();
      uint64_t v46 = sub_24A2A7190();
      MEMORY[0x270FA5388](v46);
      (*(void (**)(char *, uint64_t *, uint64_t))(v48 + 16))((char *)&v77 - v47, v45, v40);
      uint64_t v49 = sub_24A2A6B20();
      uint64_t v51 = v50;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v90);
      sub_24A1A5384(v43, v44);
      unint64_t v38 = v93;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_24A2459B0(0, v38[2] + 1, 1);
        unint64_t v38 = v93;
      }
      unint64_t v53 = v38[2];
      unint64_t v52 = v38[3];
      if (v53 >= v52 >> 1)
      {
        sub_24A2459B0(v52 > 1, v53 + 1, 1);
        unint64_t v38 = v93;
      }
      v42 += 3;
      v38[2] = v53 + 1;
      unint64_t v54 = &v38[2 * v53];
      v54[4] = v49;
      v54[5] = v51;
      --v19;
    }
    while (v19);
    swift_bridgeObjectRelease();
    uint64_t v8 = v81;
    uint64_t v6 = v82;
    uint64_t v15 = v77;
  }
  *uint64_t v15 = byte_26FDFBD18;
  sub_24A2A7380();
  type metadata accessor for SEP.SealedHash.Value(0);
  swift_storeEnumTagMultiPayload();
  uint64_t v63 = v38[2];
  if (v63)
  {
    swift_bridgeObjectRetain();
    os_log_type_t v64 = v38 + 5;
    while (1)
    {
      uint64_t v66 = *(v64 - 1);
      unint64_t v65 = *v64;
      sub_24A1A52B0(v66, *v64);
      uint64_t v59 = sub_24A1B52A8(v66, v65);
      unint64_t v61 = v67;
      LOBYTE(v90[0]) = 0;
      SEP.SealedHash.ratchet(digest:flags:)(v59, v67, (unsigned __int8 *)v90);
      if (v6) {
        break;
      }
      v64 += 2;
      sub_24A1A5384(v59, v61);
      if (!--v63)
      {
        swift_bridgeObjectRelease_n();
        uint64_t v62 = v83;
        sub_24A24B1F8((uint64_t)v15, v83, type metadata accessor for SEP.SealedHash);
        if (qword_2697783F0 != -1) {
          swift_once();
        }
        uint64_t v68 = swift_bridgeObjectRetain();
        uint64_t v69 = sub_24A1B9574(v68);
        unint64_t v71 = v70;
        swift_bridgeObjectRelease();
        char v72 = byte_26FDFC009;
        if ((byte_26FDFC009 & ~byte_26FDFC008) == 0) {
          char v72 = 0;
        }
        LOBYTE(v90[0]) = v72 | byte_26FDFC008;
        SEP.SealedHash.ratchet(digest:flags:)(v69, v71, (unsigned __int8 *)v90);
        sub_24A1A5384(v69, v71);
        goto LABEL_40;
      }
    }
LABEL_38:
    sub_24A1A5384(v59, v61);
    swift_bridgeObjectRelease_n();
    return sub_24A24B260((uint64_t)v15, type metadata accessor for SEP.SealedHash);
  }
  sub_24A1B7964();
  swift_allocError();
  *(_DWORD *)uint64_t v75 = 2;
  *(unsigned char *)(v75 + 4) = 1;
  swift_willThrow();
  swift_bridgeObjectRelease();
  return sub_24A24B260((uint64_t)v15, type metadata accessor for SEP.SealedHash);
}

uint64_t sub_24A249F74()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1746E0);
  MEMORY[0x270FA5388](v1 - 8);
  unint64_t v3 = (char *)&v28 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174800);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Proto_SealedHashLedger(0);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (unint64_t *)((char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = type metadata accessor for Proto_SealedHash(0);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for Proto_AttestationBundle(0);
  sub_24A1B2CAC(v0 + *(int *)(v15 + 32), (uint64_t)v6, &qword_26B174800);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    *uint64_t v10 = sub_24A1BBEA8(MEMORY[0x263F8EE78]);
    sub_24A2A6E00();
    sub_24A1B2D10((uint64_t)v6, &qword_26B174800);
  }
  else
  {
    sub_24A24B1F8((uint64_t)v6, (uint64_t)v10, type metadata accessor for Proto_SealedHashLedger);
  }
  unint64_t v16 = *v10;
  swift_bridgeObjectRetain();
  sub_24A24B260((uint64_t)v10, type metadata accessor for Proto_SealedHashLedger);
  if (qword_26B174348 != -1) {
    swift_once();
  }
  uint64_t v17 = sub_24A2A6C00();
  __swift_project_value_buffer(v17, (uint64_t)qword_26B174330);
  uint64_t v18 = sub_24A2A6BE0();
  if (*(void *)(v16 + 16) && (unint64_t v20 = sub_24A1BE668(v18, v19), (v21 & 1) != 0))
  {
    sub_24A24B190(*(void *)(v16 + 56) + *(void *)(v12 + 72) * v20, (uint64_t)v3, type metadata accessor for Proto_SealedHash);
    uint64_t v22 = 0;
  }
  else
  {
    uint64_t v22 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v3, v22, 1, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v3, 1, v11) == 1)
  {
    sub_24A1B2D10((uint64_t)v3, &qword_26B1746E0);
    return 0;
  }
  sub_24A24B1F8((uint64_t)v3, (uint64_t)v14, type metadata accessor for Proto_SealedHash);
  uint64_t v23 = *(void *)v14;
  int v24 = v14[8];
  sub_24A24B260((uint64_t)v14, type metadata accessor for Proto_SealedHash);
  if (v24 != 1) {
    return 0;
  }
  if (v23)
  {
    if (v23 == 1)
    {
      uint64_t v23 = sub_24A2A7360();
      unint64_t v25 = &qword_26B174A10;
      unint64_t v26 = (void (*)(uint64_t))MEMORY[0x263F047F8];
    }
    else
    {
      uint64_t v23 = sub_24A2A7390();
      unint64_t v25 = (unint64_t *)&qword_26B174A18;
      unint64_t v26 = (void (*)(uint64_t))MEMORY[0x263F04808];
    }
    sub_24A1CA854(v25, v26);
  }
  return v23;
}

uint64_t sub_24A24A3E0@<X0>(uint64_t a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  LODWORD(v68) = a2;
  char v72 = a3;
  uint64_t v73 = a1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174678);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v66 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Proto_Cryptex(0);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v75 = (uint64_t *)((char *)&v66 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v76 = type metadata accessor for Proto_SealedHash.Entry(0);
  uint64_t v71 = *(void *)(v76 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v76);
  unint64_t v67 = (unsigned __int8 *)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v66 - v10;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1746A8);
  uint64_t v13 = MEMORY[0x270FA5388](v12 - 8);
  unint64_t v70 = (char *)&v66 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v69 = (uint64_t)&v66 - v15;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1746E0);
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v18 = (char *)&v66 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174800);
  MEMORY[0x270FA5388](v19 - 8);
  char v21 = (char *)&v66 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for Proto_SealedHashLedger(0);
  uint64_t v23 = *(void *)(v22 - 8);
  MEMORY[0x270FA5388](v22);
  unint64_t v25 = (unint64_t *)((char *)&v66 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v26 = type metadata accessor for Proto_SealedHash(0);
  uint64_t v27 = *(void *)(v26 - 8);
  MEMORY[0x270FA5388](v26);
  uint64_t v74 = (uint64_t)&v66 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = type metadata accessor for Proto_AttestationBundle(0);
  sub_24A1B2CAC((uint64_t)v77 + *(int *)(v29 + 32), (uint64_t)v21, &qword_26B174800);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22) == 1)
  {
    *unint64_t v25 = sub_24A1BBEA8(MEMORY[0x263F8EE78]);
    sub_24A2A6E00();
    sub_24A1B2D10((uint64_t)v21, &qword_26B174800);
  }
  else
  {
    sub_24A24B1F8((uint64_t)v21, (uint64_t)v25, type metadata accessor for Proto_SealedHashLedger);
  }
  unint64_t v30 = *v25;
  swift_bridgeObjectRetain();
  sub_24A24B260((uint64_t)v25, type metadata accessor for Proto_SealedHashLedger);
  uint64_t v31 = sub_24A2A6BE0();
  if (*(void *)(v30 + 16) && (unint64_t v33 = sub_24A1BE668(v31, v32), (v34 & 1) != 0))
  {
    sub_24A24B190(*(void *)(v30 + 56) + *(void *)(v27 + 72) * v33, (uint64_t)v18, type metadata accessor for Proto_SealedHash);
    uint64_t v35 = 0;
  }
  else
  {
    uint64_t v35 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v27 + 56))(v18, v35, 1, v26);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v18, 1, v26) == 1)
  {
    uint64_t result = sub_24A1B2D10((uint64_t)v18, &qword_26B1746E0);
    char v37 = v72;
    *char v72 = 0;
    *((unsigned char *)v37 + 8) = -1;
    return result;
  }
  uint64_t v38 = (uint64_t)v18;
  uint64_t v39 = v74;
  sub_24A24B1F8(v38, v74, type metadata accessor for Proto_SealedHash);
  uint64_t v40 = *(void *)(v39 + 16);
  uint64_t v41 = *(void *)(v40 + 16);
  if (!v41)
  {
    unint64_t v77 = (void *)MEMORY[0x263F8EE78];
    uint64_t v61 = 1;
    uint64_t v62 = v72;
    uint64_t v45 = v76;
    uint64_t v60 = v69;
    uint64_t v59 = (uint64_t)v70;
    goto LABEL_30;
  }
  unint64_t v66 = (*(unsigned __int8 *)(v71 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v71 + 80);
  uint64_t v42 = v40 + v66;
  uint64_t v43 = *(void *)(v71 + 72);
  if (v68) {
    int v44 = 1;
  }
  else {
    int v44 = 3;
  }
  LODWORD(v73) = v44;
  uint64_t v68 = v40;
  swift_bridgeObjectRetain_n();
  unint64_t v77 = (void *)MEMORY[0x263F8EE78];
  uint64_t v45 = v76;
  do
  {
    sub_24A24B190(v42, (uint64_t)v11, type metadata accessor for Proto_SealedHash.Entry);
    sub_24A1B2CAC((uint64_t)&v11[*(int *)(v45 + 24)], (uint64_t)v5, &qword_26B174678);
    uint64_t v46 = type metadata accessor for Proto_SealedHash.Entry.OneOf_Info(0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v46 - 8) + 48))(v5, 1, v46) == 1)
    {
      sub_24A1B2D10((uint64_t)v5, &qword_26B174678);
LABEL_16:
      sub_24A24B260((uint64_t)v11, type metadata accessor for Proto_SealedHash.Entry);
      goto LABEL_17;
    }
    if (swift_getEnumCaseMultiPayload())
    {
      sub_24A24B260((uint64_t)v5, type metadata accessor for Proto_SealedHash.Entry.OneOf_Info);
      goto LABEL_16;
    }
    uint64_t v47 = v75;
    sub_24A24B1F8((uint64_t)v5, (uint64_t)v75, type metadata accessor for Proto_Cryptex);
    uint64_t v48 = *v47;
    unint64_t v49 = v47[1];
    sub_24A1A52B0(*v47, v49);
    uint64_t v50 = sub_24A1B52A8(v48, v49);
    uint64_t v52 = v51;
    sub_24A24B260((uint64_t)v47, type metadata accessor for Proto_Cryptex);
    sub_24A24B260((uint64_t)v11, type metadata accessor for Proto_SealedHash.Entry);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v77 = sub_24A1DF038(0, v77[2] + 1, 1, v77);
    }
    unint64_t v54 = v77[2];
    unint64_t v53 = v77[3];
    if (v54 >= v53 >> 1) {
      unint64_t v77 = sub_24A1DF038((void *)(v53 > 1), v54 + 1, 1, v77);
    }
    uint64_t v55 = v77;
    v77[2] = v54 + 1;
    uint64_t v56 = &v55[3 * v54];
    v56[4] = v50;
    v56[5] = v52;
    *((unsigned char *)v56 + 48) = v73;
    uint64_t v45 = v76;
LABEL_17:
    v42 += v43;
    --v41;
  }
  while (v41);
  swift_bridgeObjectRelease_n();
  uint64_t v57 = *(void *)(v74 + 16);
  uint64_t v58 = *(void *)(v57 + 16);
  uint64_t v59 = (uint64_t)v70;
  if (v58)
  {
    uint64_t v60 = v69;
    sub_24A24B190(v57 + v66 + v43 * (v58 - 1), v69, type metadata accessor for Proto_SealedHash.Entry);
    uint64_t v61 = 0;
    uint64_t v62 = v72;
  }
  else
  {
    uint64_t v61 = 1;
    uint64_t v62 = v72;
    uint64_t v60 = v69;
  }
LABEL_30:
  uint64_t v63 = v71;
  BOOL v64 = 1;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v71 + 56))(v60, v61, 1, v45);
  sub_24A1B2CAC(v60, v59, &qword_26B1746A8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v63 + 48))(v59, 1, v45) != 1)
  {
    unint64_t v65 = v67;
    sub_24A24B1F8(v59, (uint64_t)v67, type metadata accessor for Proto_SealedHash.Entry);
    sub_24A24ACD8(v65, &v78);
    sub_24A24B260((uint64_t)v65, type metadata accessor for Proto_SealedHash.Entry);
    BOOL v64 = (v78 & 1) == 0;
  }
  sub_24A1B2D10(v60, &qword_26B1746A8);
  uint64_t result = sub_24A24B260(v74, type metadata accessor for Proto_SealedHash);
  *uint64_t v62 = v77;
  *((unsigned char *)v62 + 8) = !v64;
  return result;
}

uint64_t sub_24A24ACD8@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174678);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Proto_SealedHash.Entry(0);
  sub_24A1B2CAC((uint64_t)&a1[*(int *)(v7 + 24)], (uint64_t)v6, &qword_26B174678);
  uint64_t v8 = type metadata accessor for Proto_SealedHash.Entry.OneOf_Info(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v6, 1, v8) == 1)
  {
    uint64_t result = sub_24A1B2D10((uint64_t)v6, &qword_26B174678);
LABEL_5:
    int v11 = (*a1 >> 2) & 1;
    goto LABEL_6;
  }
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t result = sub_24A24B260((uint64_t)v6, type metadata accessor for Proto_SealedHash.Entry.OneOf_Info);
  if (EnumCaseMultiPayload != 1) {
    goto LABEL_5;
  }
  LOBYTE(v11) = 1;
LABEL_6:
  *a2 = v11;
  return result;
}

BOOL _s16CloudAttestation9CryptexesO2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a2;
  if ((*(unsigned char *)(a1 + 8) & 1) == 0)
  {
    if ((*(unsigned char *)(a2 + 8) & 1) == 0) {
      goto LABEL_3;
    }
    return 0;
  }
  if ((*(unsigned char *)(a2 + 8) & 1) == 0) {
    return 0;
  }
LABEL_3:
  swift_bridgeObjectRetain();
  uint64_t v3 = swift_bridgeObjectRetain();
  BOOL v4 = sub_24A1AEC50(v3, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t destroy for Image4Manifest(uint64_t a1)
{
  return sub_24A1A5384(*(void *)a1, *(void *)(a1 + 8));
}

uint64_t _s16CloudAttestation14Image4ManifestVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  sub_24A1A52B0(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t assignWithCopy for Image4Manifest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  sub_24A1A52B0(*(void *)a2, v5);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  sub_24A1A5384(v6, v7);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for Image4Manifest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_24A1A5384(v4, v5);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for Image4Manifest(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  BOOL v4 = v3 >= 4;
  int v5 = v3 - 4;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for Image4Manifest(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 253;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = a2 + 3;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Cryptex()
{
  return &type metadata for Cryptex;
}

uint64_t initializeBufferWithCopyOfBuffer for Cryptexes(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Cryptexes(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for Cryptexes(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Cryptexes(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Cryptexes(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_24A24B16C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_24A24B174(uint64_t result, char a2)
{
  *(unsigned char *)(result + 8) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for Cryptexes()
{
  return &type metadata for Cryptexes;
}

uint64_t sub_24A24B190(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_24A24B1F8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_24A24B260(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_24A24B2C4()
{
  io_registry_entry_t v1 = *(_DWORD *)(v0 + 16);
  uint64_t v2 = (__CFString *)sub_24A2A77F0();
  uint64_t CFProperty = (uint64_t)IORegistryEntryCreateCFProperty(v1, v2, (CFAllocatorRef)*MEMORY[0x263EFFB10], 0);

  if (CFProperty)
  {
    if (swift_dynamicCast())
    {
      uint64_t CFProperty = v21;
      unint64_t v4 = v22 >> 62;
      switch(v22 >> 62)
      {
        case 1uLL:
          LODWORD(v5) = HIDWORD(v21) - v21;
          if (__OFSUB__(HIDWORD(v21), v21))
          {
            __break(1u);
LABEL_23:
            __break(1u);
            goto LABEL_24;
          }
          uint64_t v5 = (int)v5;
LABEL_8:
          if (v5 == 8)
          {
            if (!v4)
            {
              sub_24A1A5384(v21, v22);
              return CFProperty;
            }
            if (v4 != 1)
            {
              uint64_t v15 = *(void *)(v21 + 16);
              swift_retain();
              swift_retain();
              uint64_t v16 = sub_24A2A68E0();
              if (!v16)
              {
LABEL_28:
                sub_24A2A6900();
                __break(1u);
                JUMPOUT(0x24A24B4D0);
              }
              uint64_t v17 = v16;
              uint64_t v18 = sub_24A2A6910();
              BOOL v8 = __OFSUB__(v15, v18);
              uint64_t v19 = v15 - v18;
              if (!v8)
              {
                sub_24A2A6900();
                uint64_t v20 = *(void *)(v17 + v19);
                swift_release();
                swift_release();
                sub_24A1A5384(v21, v22);
                return v20;
              }
              goto LABEL_25;
            }
            if ((int)v21 <= v21 >> 32)
            {
              sub_24A1A52B0(v21, v22);
              uint64_t v9 = sub_24A2A68E0();
              if (!v9)
              {
LABEL_27:
                sub_24A2A6900();
                __break(1u);
                goto LABEL_28;
              }
              uint64_t v10 = v9;
              uint64_t v11 = sub_24A2A6910();
              uint64_t v12 = (int)v21 - v11;
              if (!__OFSUB__((int)v21, v11))
              {
                sub_24A2A6900();
                uint64_t v13 = *(void *)(v10 + v12);
                sub_24A1A5384(v21, v22);
                sub_24A1A5384(v21, v22);
                return v13;
              }
LABEL_26:
              __break(1u);
              goto LABEL_27;
            }
LABEL_24:
            __break(1u);
LABEL_25:
            __break(1u);
            goto LABEL_26;
          }
LABEL_15:
          sub_24A1A5384(v21, v22);
          break;
        case 2uLL:
          uint64_t v7 = *(void *)(v21 + 16);
          uint64_t v6 = *(void *)(v21 + 24);
          BOOL v8 = __OFSUB__(v6, v7);
          uint64_t v5 = v6 - v7;
          if (!v8) {
            goto LABEL_8;
          }
          goto LABEL_23;
        case 3uLL:
          goto LABEL_15;
        default:
          uint64_t v5 = BYTE6(v22);
          goto LABEL_8;
      }
    }
    return 0;
  }
  return CFProperty;
}

unint64_t sub_24A24B4E0()
{
  io_registry_entry_t v1 = *(_DWORD *)(v0 + 16);
  uint64_t v2 = (__CFString *)sub_24A2A77F0();
  CFTypeRef CFProperty = IORegistryEntryCreateCFProperty(v1, v2, (CFAllocatorRef)*MEMORY[0x263EFFB10], 0);

  if (!CFProperty) {
    goto LABEL_17;
  }
  if (!swift_dynamicCast())
  {
LABEL_16:
    LODWORD(CFProperty) = 0;
LABEL_17:
    unsigned __int8 v14 = 1;
    return CFProperty | ((unint64_t)v14 << 32);
  }
  LODWORD(CFProperty) = v22;
  unint64_t v4 = v23 >> 62;
  switch(v23 >> 62)
  {
    case 1uLL:
      LODWORD(v5) = HIDWORD(v22) - v22;
      if (__OFSUB__(HIDWORD(v22), v22))
      {
        __break(1u);
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      uint64_t v5 = (int)v5;
LABEL_8:
      if (v5 != 4)
      {
LABEL_15:
        sub_24A1A5384(v22, v23);
        goto LABEL_16;
      }
      if (!v4)
      {
        sub_24A1A5384(v22, v23);
        unsigned __int8 v14 = 0;
        return CFProperty | ((unint64_t)v14 << 32);
      }
      if (v4 != 1)
      {
        uint64_t v16 = *(void *)(v22 + 16);
        swift_retain();
        swift_retain();
        uint64_t v17 = sub_24A2A68E0();
        if (!v17)
        {
LABEL_29:
          sub_24A2A6900();
          __break(1u);
          JUMPOUT(0x24A24B6F8);
        }
        uint64_t v18 = v17;
        uint64_t v19 = sub_24A2A6910();
        BOOL v8 = __OFSUB__(v16, v19);
        uint64_t v20 = v16 - v19;
        if (!v8)
        {
          sub_24A2A6900();
          int v21 = *(_DWORD *)(v18 + v20);
          swift_release();
          swift_release();
          sub_24A1A5384(v22, v23);
          unsigned __int8 v14 = 0;
          LODWORD(CFProperty) = v21;
          return CFProperty | ((unint64_t)v14 << 32);
        }
        goto LABEL_26;
      }
      if ((int)v22 > v22 >> 32)
      {
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
        goto LABEL_27;
      }
      sub_24A1A52B0(v22, v23);
      uint64_t v9 = sub_24A2A68E0();
      if (!v9)
      {
LABEL_28:
        sub_24A2A6900();
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v10 = v9;
      uint64_t v11 = sub_24A2A6910();
      uint64_t v12 = (int)v22 - v11;
      if (__OFSUB__((int)v22, v11))
      {
LABEL_27:
        __break(1u);
        goto LABEL_28;
      }
      sub_24A2A6900();
      int v13 = *(_DWORD *)(v10 + v12);
      sub_24A1A5384(v22, v23);
      sub_24A1A5384(v22, v23);
      unsigned __int8 v14 = 0;
      LODWORD(CFProperty) = v13;
      return CFProperty | ((unint64_t)v14 << 32);
    case 2uLL:
      uint64_t v7 = *(void *)(v22 + 16);
      uint64_t v6 = *(void *)(v22 + 24);
      BOOL v8 = __OFSUB__(v6, v7);
      uint64_t v5 = v6 - v7;
      if (!v8) {
        goto LABEL_8;
      }
      goto LABEL_24;
    case 3uLL:
      goto LABEL_15;
    default:
      uint64_t v5 = BYTE6(v23);
      goto LABEL_8;
  }
}

uint64_t EnsembleValidator.policyFor(udid:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return _s16CloudAttestation17EnsembleValidatorV9policyFor4udid12fingerprintsQrSS_Say10Foundation4DataVGtF_0(a1, a2, 0, a3);
}

uint64_t sub_24A24B714()
{
  uint64_t v0 = sub_24A2A7160();
  __swift_allocate_value_buffer(v0, qword_26977A760);
  __swift_project_value_buffer(v0, (uint64_t)qword_26977A760);
  return sub_24A2A7150();
}

uint64_t sub_24A24B798()
{
  uint64_t result = SecKeyCopySystemKey();
  qword_26977A778 = result;
  return result;
}

uint64_t EnsembleValidator.roots.getter()
{
  type metadata accessor for EnsembleValidator();

  return swift_bridgeObjectRetain();
}

uint64_t EnsembleValidator.roots.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for EnsembleValidator() + 48);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + v3) = a1;
  return result;
}

uint64_t (*EnsembleValidator.roots.modify())()
{
  return nullsub_1;
}

uint64_t EnsembleValidator.clock.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for EnsembleValidator();
  return sub_24A1B2CAC(v1 + *(int *)(v3 + 52), a1, &qword_26B173100);
}

uint64_t EnsembleValidator.clock.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for EnsembleValidator() + 52);

  return sub_24A1CAB90(a1, v3);
}

uint64_t (*EnsembleValidator.clock.modify())()
{
  return nullsub_1;
}

uint64_t EnsembleValidator.strictCertificateValidation.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for EnsembleValidator() + 56));
}

uint64_t EnsembleValidator.strictCertificateValidation.setter(char a1)
{
  uint64_t result = type metadata accessor for EnsembleValidator();
  *(unsigned char *)(v1 + *(int *)(result + 56)) = a1;
  return result;
}

uint64_t (*EnsembleValidator.strictCertificateValidation.modify())()
{
  return nullsub_1;
}

uint64_t EnsembleValidator.requireProdTrustAnchors.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for EnsembleValidator() + 60));
}

uint64_t EnsembleValidator.requireProdTrustAnchors.setter(char a1)
{
  uint64_t result = type metadata accessor for EnsembleValidator();
  *(unsigned char *)(v1 + *(int *)(result + 60)) = a1;
  return result;
}

uint64_t (*EnsembleValidator.requireProdTrustAnchors.modify())()
{
  return nullsub_1;
}

uint64_t EnsembleValidator.checkRevocation.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for EnsembleValidator() + 64));
}

uint64_t EnsembleValidator.checkRevocation.setter(char a1)
{
  uint64_t result = type metadata accessor for EnsembleValidator();
  *(unsigned char *)(v1 + *(int *)(result + 64)) = a1;
  return result;
}

uint64_t (*EnsembleValidator.checkRevocation.modify())()
{
  return nullsub_1;
}

uint64_t EnsembleValidator.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for EnsembleValidator();
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = a1 + *(int *)(v4 + 60);
  uint64_t v8 = sub_24A2A6BC0();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  sub_24A268B94((uint64_t)v6);
  uint64_t result = sub_24A1B2D10(v7, &qword_26B173100);
  if (!v1) {
    return sub_24A24E860((uint64_t)v6, a1, (uint64_t (*)(void))type metadata accessor for EnsembleValidator);
  }
  return result;
}

void EnsembleValidator.init<A>(assetProvider:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v99 = a3;
  uint64_t v8 = (int *)type metadata accessor for EnsembleValidator();
  uint64_t v9 = a4 + v8[13];
  uint64_t v10 = sub_24A2A6BC0();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(void))(v11 + 56);
  uint64_t v13 = v11 + 56;
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v12)(v9, 1, 1, v10);
  uint64_t v100 = v8[12];
  *(void *)(a4 + v100) = MEMORY[0x263F8EE78];
  sub_24A1B2D10(v9, &qword_26B173100);
  unsigned __int8 v106 = (uint8_t *)v9;
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v12)(v9, 1, 1, v10);
  int v14 = sub_24A24C658((uint64_t)v101);
  if (v4)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
LABEL_4:
    uint64_t v27 = (uint64_t)v106;
    swift_bridgeObjectRelease();
    sub_24A1B2D10(v27, &qword_26B173100);
    return;
  }
  uint64_t v97 = v13;
  v98 = v12;
  uint64_t v15 = v101[1];
  char v16 = v102;
  char v17 = v103;
  char v18 = v104;
  int v19 = v105;
  uint64_t v20 = a4 + v8[5];
  *(_DWORD *)uint64_t v20 = v101[0];
  *(void *)(v20 + 8) = v15;
  *(unsigned char *)(v20 + 16) = v16;
  *(unsigned char *)(v20 + 17) = v17;
  *(unsigned char *)(v20 + 18) = v18;
  *(_DWORD *)(v20 + 20) = v19;
  *(_DWORD *)(a4 + v8[6]) = v14;
  uint64_t v21 = type metadata accessor for Release();
  MEMORY[0x270FA5388](v21 - 8);
  unint64_t v23 = (char *)&v79 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = v99;
  static Release.local<A>(assetProvider:)(a2, v99, (uint64_t)v23);
  v95 = v8;
  uint64_t v96 = a1;
  uint64_t v25 = a2;
  sub_24A24E860((uint64_t)v23, a4, (uint64_t (*)(void))type metadata accessor for Release);
  sub_24A24C9D0(v101);
  int v28 = BYTE1(v101[0]);
  if (LOBYTE(v101[0])) {
    char v29 = 2;
  }
  else {
    char v29 = 1;
  }
  unint64_t v30 = v95;
  *(unsigned char *)(a4 + v95[7]) = v29;
  int v31 = BYTE2(v101[0]);
  if (v28) {
    char v32 = 2;
  }
  else {
    char v32 = 1;
  }
  *(unsigned char *)(a4 + v30[8]) = v32;
  if (v31) {
    char v33 = 2;
  }
  else {
    char v33 = 1;
  }
  *(unsigned char *)(a4 + v30[9]) = v33;
  *(unsigned char *)(a4 + v30[10]) = v26 & 1;
  uint64_t v34 = (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 16))(a2, v24);
  uint64_t v92 = 0;
  BOOL v35 = *(void *)(v34 + 16) != 0;
  uint64_t v36 = v30[14];
  uint64_t v94 = a4;
  *(unsigned char *)(a4 + v36) = v35;
  char v37 = (int *)type metadata accessor for X509Policy();
  uint64_t v93 = &v79;
  MEMORY[0x270FA5388](v37);
  uint64_t v88 = v38;
  unint64_t v86 = (v38 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v99 = (uint64_t)&v79 - v86;
  uint64_t v91 = v34;
  if (qword_26B174290 != -1) {
    swift_once();
  }
  uint64_t v85 = qword_26B176860;
  uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B173100);
  uint64_t v90 = &v79;
  uint64_t v40 = *(void *)(*(void *)(v39 - 8) + 64);
  MEMORY[0x270FA5388](v39 - 8);
  uint64_t v80 = (char *)((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = (char *)((char *)&v79 - v80);
  uint64_t v81 = (char *)&v79 - v80;
  uint64_t v42 = v98;
  ((void (*)(int64_t, uint64_t, uint64_t, uint64_t))v98)((char *)&v79 - v80, 1, 1, v10);
  uint64_t v43 = v99;
  uint64_t v87 = v99 + v37[6];
  uint64_t v44 = v42();
  unint64_t v89 = &v79;
  uint64_t v45 = v43 + v37[7];
  *(void *)uint64_t v45 = 0;
  *(unsigned char *)(v45 + 8) = 1;
  uint64_t v46 = (uint64_t *)(v43 + v37[8]);
  uint64_t v84 = v46;
  *uint64_t v46 = 0;
  v46[1] = 0;
  uint64_t v47 = MEMORY[0x270FA5388](v44);
  unint64_t v48 = v86;
  uint64_t v82 = (uint64_t)&v79 - v86;
  uint64_t v83 = &v79;
  MEMORY[0x270FA5388](v47);
  unint64_t v49 = (char *)((char *)&v79 - v80);
  uint64_t v50 = sub_24A1B2CAC((uint64_t)v41, (char *)&v79 - v80, &qword_26B173100);
  uint64_t v80 = (char *)&v79;
  MEMORY[0x270FA5388](v50);
  uint64_t v51 = (char *)&v79 - v48;
  uint64_t v52 = (char *)&v79 + v37[6] - v48;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v42)(v52, 1, 1, v10);
  unint64_t v53 = (char *)&v79 + v37[7] - v48;
  *(void *)unint64_t v53 = 0;
  v53[8] = 1;
  unint64_t v54 = (uint64_t *)((char *)&v79 + v37[8] - v48);
  *unint64_t v54 = 0;
  v54[1] = 0;
  *uint64_t v51 = 1;
  *((void *)v51 + 1) = v85;
  swift_bridgeObjectRetain();
  sub_24A1CAB90((uint64_t)v49, (uint64_t)v52);
  sub_24A1CF11C(*v54);
  *unint64_t v54 = 0;
  v54[1] = 0;
  *(void *)unint64_t v53 = 0;
  v53[8] = 1;
  uint64_t v55 = v82;
  sub_24A24E860((uint64_t)&v79 - v48, v82, (uint64_t (*)(void))type metadata accessor for X509Policy);
  sub_24A1B2D10(v81, &qword_26B173100);
  sub_24A1B2D10(v87, &qword_26B173100);
  sub_24A1CF11C(*v84);
  uint64_t v56 = v55;
  uint64_t v57 = v99;
  sub_24A24E860(v56, v99, (uint64_t (*)(void))type metadata accessor for X509Policy);
  uint64_t v58 = v92;
  sub_24A270478(v91);
  uint64_t v59 = v58;
  if (v58)
  {

    uint64_t v59 = 0;
  }
  sub_24A24FF44(v57, (uint64_t (*)(void))type metadata accessor for X509Policy);
  swift_bridgeObjectRelease();
  uint64_t v60 = v94;
  uint64_t v61 = v95;
  *(unsigned char *)(v94 + v95[15]) = v58 == 0;
  uint64_t v62 = v25;
  uint64_t v63 = v96;
  *(unsigned char *)(v60 + v61[16]) = 1;
  if (MEMORY[0x263F16C10]) {
    BOOL v64 = MEMORY[0x263F16C20] == 0;
  }
  else {
    BOOL v64 = 1;
  }
  if (v64
    || MEMORY[0x263F16C28] == 0
    || MEMORY[0x263F16C00] == 0
    || MEMORY[0x263F16C18] == 0
    || MEMORY[0x263F16C08] == 0)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v25 - 8) + 8))(v63, v25);
LABEL_37:
    uint64_t v70 = v61[11];
LABEL_38:
    char v71 = 2;
LABEL_39:
    *(unsigned char *)(v60 + v70) = v71;
    return;
  }
  sub_24A2A6CD0();
  uint64_t v69 = sub_24A2A6CB0();
  if (v59)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v25 - 8) + 8))(v63, v25);
    sub_24A24FF44(v60, (uint64_t (*)(void))type metadata accessor for Release);
    goto LABEL_4;
  }
  char v72 = (void *)v69;
  uint64_t v73 = sub_24A2A6CC0();
  if (v73 == 2)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v25 - 8) + 8))(v63, v25);

    uint64_t v70 = v61[11];
    char v71 = 1;
    goto LABEL_39;
  }
  if (v73 == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v25 - 8) + 8))(v63, v25);

    goto LABEL_37;
  }
  if (v73)
  {
    if (qword_269778548 != -1) {
      swift_once();
    }
    uint64_t v74 = sub_24A2A7160();
    __swift_project_value_buffer(v74, (uint64_t)qword_26977A760);
    id v75 = v72;
    uint64_t v76 = sub_24A2A7140();
    os_log_type_t v77 = sub_24A2A7B30();
    if (os_log_type_enabled(v76, v77))
    {
      char v78 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)char v78 = 134349056;
      unsigned __int8 v106 = v78 + 4;
      sub_24A2A6CC0();
      v101[0] = sub_24A2A6CE0();
      sub_24A2A7B70();

      _os_log_impl(&dword_24A19F000, v76, v77, "Unknown config security policy %{public}ld, defaulting to customer", v78, 0xCu);
      MEMORY[0x24C5C00A0](v78, -1, -1);
    }
    else
    {
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v62 - 8) + 8))(v96, v62);
    uint64_t v70 = v95[11];
    goto LABEL_38;
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v25 - 8) + 8))(v63, v25);

  *(unsigned char *)(v60 + v61[11]) = 0;
}

uint64_t sub_24A24C658(uint64_t a1)
{
  unint64_t v2 = 0xD000000000000014;
  type metadata accessor for IORegistryEntry();
  uint64_t inited = swift_initStackObject();
  mach_port_t v4 = *MEMORY[0x263F0EC88];
  uint64_t v5 = (__CFString *)sub_24A2A77F0();
  io_registry_entry_t v6 = IORegistryEntryCopyFromPath(v4, v5);

  *(_DWORD *)(inited + 16) = v6;
  if (!v6)
  {
    swift_setDeallocating();
    IOObjectRelease(0);
    sub_24A24FD80();
    swift_allocError();
    *uint64_t v20 = 0;
    swift_willThrow();
    return v2;
  }
  unint64_t v7 = sub_24A24B4E0();
  if ((v7 & 0x100000000) != 0) {
    goto LABEL_11;
  }
  char v8 = v7;
  if ((v7 & 0xFFFFFF00) == 0)
  {
    if (v7 <= 3u)
    {
      unint64_t v9 = sub_24A24B4E0();
      if ((v9 & 0x100000000) != 0)
      {
        sub_24A24FD80();
        swift_allocError();
        uint64_t v19 = 2;
      }
      else
      {
        int v10 = v9;
        unint64_t v11 = sub_24A24B4E0();
        if ((v11 & 0x100000000) != 0)
        {
          sub_24A24FD80();
          swift_allocError();
          uint64_t v19 = 3;
        }
        else
        {
          int v12 = v11;
          uint64_t v13 = sub_24A24B2C4();
          if (v14)
          {
            sub_24A24FD80();
            swift_allocError();
            uint64_t v19 = 6;
          }
          else
          {
            unint64_t v2 = v13;
            unint64_t v15 = sub_24A24B4E0();
            if ((v15 & 0x100000000) != 0)
            {
              sub_24A24FD80();
              swift_allocError();
              uint64_t v19 = 5;
            }
            else
            {
              int v16 = v15;
              unint64_t v22 = v2;
              unint64_t v17 = sub_24A24B4E0();
              if ((v17 & 0x100000000) == 0)
              {
                unint64_t v2 = v17;
                swift_setDeallocating();
                IOObjectRelease(v6);
                *(_DWORD *)a1 = v16;
                *(void *)(a1 + 8) = v22;
                *(unsigned char *)(a1 + 16) = v12 == 1;
                *(unsigned char *)(a1 + 17) = v10 == 1;
                *(unsigned char *)(a1 + 18) = v8;
                *(_DWORD *)(a1 + 20) = 0;
                return v2;
              }
              sub_24A24FD80();
              swift_allocError();
              uint64_t v19 = 4;
            }
          }
        }
      }
LABEL_12:
      *char v18 = v19;
      swift_willThrow();
      swift_setDeallocating();
      IOObjectRelease(v6);
      return v2;
    }
LABEL_11:
    sub_24A24FD80();
    swift_allocError();
    uint64_t v19 = 1;
    goto LABEL_12;
  }
  uint64_t result = sub_24A2A7D10();
  __break(1u);
  return result;
}

void sub_24A24C9D0(unsigned char *a1)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1748B8);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = &v38[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (qword_269778550 != -1) {
    swift_once();
  }
  if (!qword_26977A778)
  {
    sub_24A24FD80();
    swift_allocError();
    *int v10 = 11;
    swift_willThrow();
    return;
  }
  io_registry_entry_t v6 = (__SecKey *)(id)qword_26977A778;
  SecKeyRef v7 = SecKeyCopyPublicKey(v6);
  if (!v7)
  {
    sub_24A24FD80();
    swift_allocError();
    *unint64_t v11 = 11;
    swift_willThrow();
LABEL_13:

    return;
  }
  SecKeyRef v8 = v7;
  sub_24A269F80();
  if (v1)
  {

    return;
  }
  int v12 = v9;
  uint64_t v54 = 0;
  uint64_t Attestation = SecKeyCreateAttestation();
  if (Attestation
    && (char v14 = (void *)Attestation,
        long long v49 = xmmword_24A2A99E0,
        sub_24A2A6AC0(),
        v14,
        unint64_t v15 = *((void *)&v49 + 1),
        *((void *)&v49 + 1) >> 60 != 15))
  {
    uint64_t v20 = v49;
    sub_24A1B8018(v49, *((unint64_t *)&v49 + 1));
    uint64_t v21 = v8;
    SEP.Attestation.init(from:signer:)(v20, v15, v21, (uint64_t *)&v49);
    unint64_t v43 = v15;
    uint64_t v45 = v21;
    unsigned long long v46 = __PAIR128__(*((unint64_t *)&v49 + 1), v20);
    uint64_t v47 = v49;
    unint64_t v22 = *((void *)&v50 + 1);
    uint64_t v48 = v50;
    if (qword_26B174600 != -1) {
      swift_once();
    }
    uint64_t v23 = sub_24A2A6C00();
    uint64_t v24 = __swift_project_value_buffer(v23, (uint64_t)qword_26B1768F8);
    uint64_t v42 = v38;
    uint64_t v25 = *(void *)(v23 - 8);
    MEMORY[0x270FA5388](v24);
    uint64_t v27 = &v38[-((v26 + 15) & 0xFFFFFFFFFFFFFFF0)];
    uint64_t v28 = (*(uint64_t (**)(unsigned char *))(v25 + 16))(v27);
    uint64_t v41 = v38;
    long long v52 = 0u;
    memset(v53, 0, sizeof(v53));
    long long v50 = 0u;
    long long v51 = 0u;
    long long v49 = 0u;
    MEMORY[0x270FA5388](v28);
    *(void *)&v38[-16] = v27;
    *(void *)&v38[-8] = &v49;
    unint64_t v44 = v22;
    sub_24A1EDF2C((void (*)(uint64_t))sub_24A1F0A7C, (uint64_t)&v38[-32], v47, *((uint64_t *)&v46 + 1), v48, v22);
    (*(void (**)(unsigned char *, uint64_t))(v25 + 8))(v27, v23);
    uint64_t v29 = type metadata accessor for SEP.SealedHash(0);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v29 - 8) + 48))(v5, 1, v29) == 1) {
      sub_24A1B2D10((uint64_t)v5, &qword_26B1748B8);
    }
    else {
      sub_24A24FF44((uint64_t)v5, type metadata accessor for SEP.SealedHash);
    }
    unint64_t v30 = *((void *)&v46 + 1);
    uint64_t v31 = v47;
    sub_24A1A52B0(v47, *((unint64_t *)&v46 + 1));
    uint64_t v32 = v48;
    unint64_t v33 = v44;
    sub_24A1A52B0(v48, v44);
    char v34 = sub_24A1EE5D8(v31, v30, v32, v33);
    uint64_t v41 = 0;
    sub_24A1A5384(v31, v30);
    sub_24A1A5384(v32, v33);
    LODWORD(v42) = v34 & 1;
    sub_24A1A52B0(v31, v30);
    sub_24A1A52B0(v32, v33);
    BOOL v35 = v41;
    char v36 = sub_24A1EE628(v31, v30, v32, v33);
    uint64_t v40 = v35;
    sub_24A1A5384(v31, v30);
    sub_24A1A5384(v32, v33);
    LODWORD(v41) = v36 & 1;
    sub_24A1A52B0(v31, v30);
    sub_24A1A52B0(v32, v33);
    LODWORD(v40) = sub_24A1EE860(v31, v30, v32, v33);
    int v39 = v40;
    sub_24A1A5384(v31, v30);
    sub_24A1A5384(v32, v33);

    sub_24A1B7B78(v46, v43);
    sub_24A1A5384(v31, v30);
    sub_24A1A5384(v32, v33);
    char v37 = (v39 == 2) | v40;
    *a1 = (_BYTE)v42;
    a1[1] = (_BYTE)v41;
    a1[2] = v37 & 1;
  }
  else
  {
    uint64_t v16 = v54;
    if (v54)
    {
      type metadata accessor for CFError(0);
      sub_24A1F0A30();
      uint64_t v17 = swift_allocError();
      *char v18 = v16;
      sub_24A24FD80();
      swift_allocError();
      *uint64_t v19 = v17;
      swift_willThrow();

      goto LABEL_13;
    }
    __break(1u);
  }
}

uint64_t EnsembleValidator.defaultPolicy.getter@<X0>(uint64_t a1@<X8>)
{
  return _s16CloudAttestation17EnsembleValidatorV9policyFor4udid12fingerprintsQrSS_Say10Foundation4DataVGtF_0(0, 0, 0, a1);
}

uint64_t _s16CloudAttestation17EnsembleValidatorV9policyFor4udid12fingerprintsQrSS_Say10Foundation4DataVGtF_0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v91 = a3;
  uint64_t v94 = a2;
  uint64_t v93 = a1;
  uint64_t v99 = a4;
  uint64_t v5 = type metadata accessor for SoftwareReleasePolicy();
  uint64_t v6 = MEMORY[0x270FA5388](v5 - 8);
  uint64_t v102 = (uint64_t)&v84 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v98 = (uint64_t)&v84 - v8;
  uint64_t v95 = type metadata accessor for KeyOptionsPolicy(0);
  uint64_t v9 = MEMORY[0x270FA5388](v95);
  uint64_t v101 = (uint64_t)&v84 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v97 = (char *)&v84 - v11;
  uint64_t v12 = type metadata accessor for SecureConfigPolicy(0);
  uint64_t v13 = MEMORY[0x270FA5388](v12 - 8);
  uint64_t v100 = (uint64_t)&v84 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v106 = (uint64_t)&v84 - v15;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_2697799B0);
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v88 = (uint64_t)&v84 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v85 = __swift_instantiateConcreteTypeFromMangledName(&qword_2697799B8);
  uint64_t v18 = MEMORY[0x270FA5388](v85);
  uint64_t v86 = (uint64_t)&v84 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = MEMORY[0x270FA5388](v18);
  uint64_t v87 = (uint64_t)&v84 - v21;
  MEMORY[0x270FA5388](v20);
  uint64_t v84 = (char *)&v84 - v22;
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_269778BE0);
  uint64_t v24 = MEMORY[0x270FA5388](v23 - 8);
  uint64_t v105 = (uint64_t)&v84 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v24);
  uint64_t v90 = (uint64_t)&v84 - v26;
  uint64_t v27 = type metadata accessor for X509Policy();
  uint64_t v28 = (int *)(v27 - 8);
  uint64_t v29 = MEMORY[0x270FA5388](v27);
  uint64_t v31 = (char *)&v84 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v29);
  unint64_t v33 = (char *)&v84 - v32;
  uint64_t v34 = type metadata accessor for EnsembleValidator();
  uint64_t v89 = *(int *)(v34 + 56);
  char v35 = *(unsigned char *)(v4 + v89);
  uint64_t v36 = sub_24A24DE9C();
  uint64_t v92 = (int *)v34;
  uint64_t v37 = *(int *)(v34 + 52);
  uint64_t v96 = v4;
  uint64_t v38 = v4 + v37;
  uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B173100);
  MEMORY[0x270FA5388](v39 - 8);
  uint64_t v41 = (char *)&v84 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24A1B2CAC(v38, (uint64_t)v41, &qword_26B173100);
  uint64_t v42 = (uint64_t)&v31[v28[8]];
  uint64_t v43 = sub_24A2A6BC0();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v43 - 8) + 56))(v42, 1, 1, v43);
  unint64_t v44 = &v31[v28[9]];
  *(void *)unint64_t v44 = 0;
  v44[8] = 1;
  uint64_t v45 = (uint64_t *)&v31[v28[10]];
  *uint64_t v45 = 0;
  v45[1] = 0;
  *uint64_t v31 = v35;
  *((void *)v31 + 1) = v36;
  sub_24A1CAB90((uint64_t)v41, v42);
  sub_24A1CF11C(*v45);
  *uint64_t v45 = 0;
  v45[1] = 0;
  *(void *)unint64_t v44 = 0;
  v44[8] = 1;
  char v104 = v31;
  char v103 = v33;
  sub_24A24E860((uint64_t)v31, (uint64_t)v33, (uint64_t (*)(void))type metadata accessor for X509Policy);
  uint64_t v46 = v91;
  if (v91)
  {
    swift_bridgeObjectRetain();
    uint64_t v47 = (uint64_t)v84;
    sub_24A2A7150();
    uint64_t v48 = sub_24A1E9050(v46);
    swift_bridgeObjectRelease();
    *(void *)(v47 + *(int *)(v85 + 36)) = v48;
    uint64_t v49 = v87;
    sub_24A1B2CAC(v47, v87, &qword_2697799B8);
    uint64_t v50 = v86;
    sub_24A1B2CAC(v49, v86, &qword_2697799B8);
    uint64_t v51 = v50;
    uint64_t v52 = v88;
    sub_24A1BFBF4(v51, v88, &qword_2697799B8);
    sub_24A1B2D10(v47, &qword_2697799B8);
    sub_24A1B2D10(v49, &qword_2697799B8);
    uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&qword_2697799C0);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v53 - 8) + 56))(v52, 0, 1, v53);
    uint64_t v54 = v90;
    sub_24A1BFBF4(v52, v90, &qword_2697799B0);
  }
  else
  {
    uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&qword_2697799C0);
    uint64_t v54 = v90;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v55 - 8) + 56))(v90, 1, 1, v55);
  }
  uint64_t v56 = v96;
  if (*(unsigned char *)(v96 + v89))
  {
    uint64_t v91 = 0;
  }
  else
  {
    if (qword_26B1747B8 != -1) {
      swift_once();
    }
    uint64_t v57 = sub_24A2A7160();
    __swift_project_value_buffer(v57, (uint64_t)qword_26B1747A0);
    uint64_t v58 = sub_24A2A7140();
    os_log_type_t v59 = sub_24A2A7B30();
    if (os_log_type_enabled(v58, v59))
    {
      uint64_t v60 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v60 = 0;
      _os_log_impl(&dword_24A19F000, v58, v59, "Using Insecure SEPAttestationPolicy", v60, 2u);
      MEMORY[0x24C5C00A0](v60, -1, -1);
    }

    uint64_t v91 = 1;
  }
  uint64_t v61 = swift_allocObject();
  *(void *)(v61 + 16) = v93;
  *(void *)(v61 + 24) = v94;
  swift_bridgeObjectRetain();
  sub_24A1CF11C(0);
  uint64_t v62 = v92;
  LODWORD(v94) = *(unsigned __int8 *)(v56 + v92[10]);
  uint64_t v63 = type metadata accessor for SEP.SealedHash(0);
  uint64_t v64 = v106;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v63 - 8) + 56))(v106, 1, 1, v63);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B174B50);
  sub_24A2A6C70();
  uint64_t v65 = swift_allocObject();
  *(_OWORD *)(v65 + 16) = xmmword_24A2A8AA0;
  sub_24A2A6C50();
  sub_24A2A6C40();
  v121[0] = v65;
  sub_24A24FE28();
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B174A80);
  sub_24A24FE80();
  uint64_t v66 = (uint64_t)v97;
  sub_24A2A7C10();
  type metadata accessor for KeyOptionsPolicy.Assertion(0);
  swift_storeEnumTagMultiPayload();
  uint64_t v67 = v66 + *(int *)(v95 + 20);
  uint64_t v68 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174258);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v68 - 8) + 56))(v67, 1, 1, v68);
  uint64_t v69 = v98;
  sub_24A24FEDC(v56, v98, (uint64_t (*)(void))type metadata accessor for Release);
  uint64_t v70 = v62[6];
  uint64_t v71 = v56 + v62[5];
  LODWORD(v88) = *(unsigned __int8 *)(v71 + 16);
  LODWORD(v89) = *(unsigned __int8 *)(v71 + 17);
  LODWORD(v90) = *(unsigned __int8 *)(v71 + 18);
  LODWORD(v93) = *(_DWORD *)v71;
  LODWORD(v95) = *(_DWORD *)(v56 + v70);
  LOBYTE(v70) = *(unsigned char *)(v56 + v62[8]);
  char v72 = *(unsigned char *)(v56 + v62[9]);
  LODWORD(v87) = 0x10002u >> (8 * *(unsigned char *)(v56 + v62[7]));
  LODWORD(v86) = 0x10002u >> (8 * v70);
  LODWORD(v85) = 0x10002u >> (8 * v72);
  char v73 = *(unsigned char *)(v56 + v62[11]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_269779978);
  uint64_t v74 = swift_allocObject();
  *(_OWORD *)(v74 + 16) = xmmword_24A2A8A60;
  *(unsigned char *)(v74 + 32) = v73;
  uint64_t v75 = (uint64_t)v104;
  sub_24A24FEDC((uint64_t)v103, (uint64_t)v104, (uint64_t (*)(void))type metadata accessor for X509Policy);
  v121[0] = v75;
  uint64_t v76 = v105;
  sub_24A1B2CAC(v54, v105, &qword_269778BE0);
  v121[1] = v76;
  os_log_type_t v77 = (void *)v91;
  id v118 = (id)v91;
  v119 = sub_24A24FE0C;
  uint64_t v120 = v61;
  uint64_t v116 = 0;
  char v117 = v94;
  v121[2] = &v118;
  v121[5] = &v116;
  uint64_t v78 = v64;
  uint64_t v79 = v100;
  sub_24A24FEDC(v78, v100, type metadata accessor for SecureConfigPolicy);
  v121[6] = v79;
  uint64_t v80 = v101;
  sub_24A24FEDC(v66, v101, type metadata accessor for KeyOptionsPolicy);
  v121[7] = v80;
  uint64_t v81 = v102;
  sub_24A24FEDC(v69, v102, (uint64_t (*)(void))type metadata accessor for SoftwareReleasePolicy);
  v111[0] = v88;
  v111[1] = v89;
  v111[2] = v90;
  int v112 = v93;
  int v113 = v95;
  uint64_t v114 = 2;
  int v115 = 0;
  v121[8] = v81;
  v121[9] = v111;
  v108[0] = v87;
  v108[1] = v86;
  v108[2] = v85;
  char v110 = 0;
  __int16 v109 = 2;
  uint64_t v107 = v74;
  v121[10] = v108;
  v121[11] = &v107;
  sub_24A1CCC68((uint64_t)v121, v99);
  sub_24A1CF444(v77);
  sub_24A1CF454((uint64_t)sub_24A24FE0C);
  sub_24A24FF44(v69, (uint64_t (*)(void))type metadata accessor for SoftwareReleasePolicy);
  sub_24A24FF44(v66, type metadata accessor for KeyOptionsPolicy);
  sub_24A24FF44(v106, type metadata accessor for SecureConfigPolicy);
  sub_24A1CF464(v77);
  sub_24A1CF11C((uint64_t)sub_24A24FE0C);
  sub_24A1B2D10(v54, &qword_269778BE0);
  sub_24A24FF44((uint64_t)v103, (uint64_t (*)(void))type metadata accessor for X509Policy);
  swift_bridgeObjectRelease();
  sub_24A24FF44(v81, (uint64_t (*)(void))type metadata accessor for SoftwareReleasePolicy);
  sub_24A24FF44(v80, type metadata accessor for KeyOptionsPolicy);
  sub_24A24FF44(v79, type metadata accessor for SecureConfigPolicy);
  swift_bridgeObjectRelease();
  uint64_t v82 = (uint64_t)v119;
  sub_24A1CF464(v118);
  sub_24A1CF11C(v82);
  sub_24A1B2D10(v105, &qword_269778BE0);
  return sub_24A24FF44((uint64_t)v104, (uint64_t (*)(void))type metadata accessor for X509Policy);
}

uint64_t type metadata accessor for EnsembleValidator()
{
  uint64_t result = qword_269779998;
  if (!qword_269779998) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t EnsembleValidator.policyFor(identity:)@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  int v3 = *a1;
  uint64_t v4 = *((void *)a1 + 1);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B174BA0);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_24A2A8AA0;
  uint64_t v6 = MEMORY[0x263F8E960];
  *(void *)(v5 + 56) = MEMORY[0x263F8E8F8];
  *(void *)(v5 + 64) = v6;
  uint64_t v7 = MEMORY[0x263F8E970];
  *(_DWORD *)(v5 + 32) = v3;
  uint64_t v8 = MEMORY[0x263F8E9C0];
  *(void *)(v5 + 96) = v7;
  *(void *)(v5 + 104) = v8;
  *(void *)(v5 + 72) = v4;
  uint64_t v9 = sub_24A2A7840();
  _s16CloudAttestation17EnsembleValidatorV9policyFor4udid12fingerprintsQrSS_Say10Foundation4DataVGtF_0(v9, v10, 0, a2);

  return swift_bridgeObjectRelease();
}

uint64_t sub_24A24DE9C()
{
  uint64_t v1 = type metadata accessor for EnsembleValidator();
  if (*(unsigned char *)(v0 + *(int *)(v1 + 60)) == 1)
  {
    if (qword_26B174290 != -1) {
      swift_once();
    }
    return swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v3 = *(void *)(v0 + *(int *)(v1 + 48));
    if (qword_26B174290 != -1) {
      swift_once();
    }
    swift_bridgeObjectRetain();
    unint64_t v4 = swift_bridgeObjectRetain();
    sub_24A1E787C(v4);
    if (qword_269778580 != -1) {
      swift_once();
    }
    unint64_t v5 = swift_bridgeObjectRetain();
    sub_24A1E787C(v5);
    return v3;
  }
}

uint64_t sub_24A24DFCC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4 = a4;
  uint64_t v58 = *MEMORY[0x263EF8340];
  if (a3)
  {
    uint64_t v7 = *a1;
    unint64_t v6 = a1[1];
    uint64_t v9 = a1[2];
    unint64_t v8 = a1[3];
    uint64_t v53 = 0;
    uint64_t v54 = 0;
    swift_bridgeObjectRetain();
    sub_24A1A52B0(v7, v6);
    sub_24A1A52B0(v9, v8);
    sub_24A1EDD20(v9, v8, &v54, (uint64_t *)&v53, (uint64_t)&v55);
    sub_24A1A5384(v7, v6);
    sub_24A1A5384(v9, v8);
    if (v57 == 2)
    {
LABEL_3:
      if (qword_269778548 != -1) {
        swift_once();
      }
      uint64_t v10 = sub_24A2A7160();
      __swift_project_value_buffer(v10, (uint64_t)qword_26977A760);
      sub_24A1A52B0(v7, v6);
      sub_24A1A52B0(v9, v8);
      swift_bridgeObjectRetain();
      sub_24A1A52B0(v7, v6);
      sub_24A1A52B0(v9, v8);
      uint64_t v11 = sub_24A2A7140();
      os_log_type_t v12 = sub_24A2A7B30();
      if (os_log_type_enabled(v11, v12))
      {
        os_log_type_t v47 = v12;
        os_log_t log = v11;
        uint64_t v13 = swift_slowAlloc();
        uint64_t v45 = (unsigned char *)swift_slowAlloc();
        uint64_t v53 = 0;
        uint64_t v54 = v45;
        *(_DWORD *)uint64_t v13 = 136446466;
        uint64_t v52 = 0;
        sub_24A1A52B0(v7, v6);
        sub_24A1A52B0(v9, v8);
        sub_24A1EDD20(v9, v8, &v53, &v52, (uint64_t)&v55);
        sub_24A1A5384(v7, v6);
        sub_24A1A5384(v9, v8);
        if (v57 == 2)
        {
          uint64_t v14 = 0x6E776F6E6B6E753CLL;
          unint64_t v15 = 0xE90000000000003ELL;
        }
        else
        {
          int v32 = v55;
          uint64_t v31 = v56;
          __swift_instantiateConcreteTypeFromMangledName(&qword_26B174BA0);
          uint64_t v33 = swift_allocObject();
          *(_OWORD *)(v33 + 16) = xmmword_24A2A8AA0;
          uint64_t v34 = MEMORY[0x263F8E960];
          *(void *)(v33 + 56) = MEMORY[0x263F8E8F8];
          *(void *)(v33 + 64) = v34;
          uint64_t v35 = MEMORY[0x263F8E970];
          *(_DWORD *)(v33 + 32) = v32;
          uint64_t v36 = MEMORY[0x263F8E9C0];
          *(void *)(v33 + 96) = v35;
          *(void *)(v33 + 104) = v36;
          *(void *)(v33 + 72) = v31;
          uint64_t v14 = sub_24A2A7840();
          unint64_t v15 = v37;
        }
        uint64_t v55 = sub_24A1C52A8(v14, v15, (uint64_t *)&v54);
        sub_24A2A7B70();
        swift_bridgeObjectRelease();
        sub_24A1A5384(v7, v6);
        sub_24A1A5384(v9, v8);
        sub_24A1A5384(v7, v6);
        sub_24A1A5384(v9, v8);
        *(_WORD *)(v13 + 12) = 2082;
        swift_bridgeObjectRetain();
        uint64_t v55 = sub_24A1C52A8(a2, a3, (uint64_t *)&v54);
        sub_24A2A7B70();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_24A19F000, log, v47, "Attestation udid %{public}s does not match %{public}s", (uint8_t *)v13, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x24C5C00A0](v45, -1, -1);
        MEMORY[0x24C5C00A0](v13, -1, -1);

        char v16 = 0;
      }
      else
      {
        sub_24A1A5384(v7, v6);
        sub_24A1A5384(v9, v8);
        sub_24A1A5384(v7, v6);
        sub_24A1A5384(v9, v8);

        swift_bridgeObjectRelease_n();
        char v16 = 0;
      }
LABEL_24:
      uint64_t v4 = a4;
      goto LABEL_25;
    }
    int v18 = v55;
    uint64_t v17 = v56;
    __swift_instantiateConcreteTypeFromMangledName(&qword_26B174BA0);
    uint64_t v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = xmmword_24A2A8AA0;
    uint64_t v20 = MEMORY[0x263F8E960];
    *(void *)(v19 + 56) = MEMORY[0x263F8E8F8];
    *(void *)(v19 + 64) = v20;
    uint64_t v21 = MEMORY[0x263F8E970];
    *(_DWORD *)(v19 + 32) = v18;
    uint64_t v22 = MEMORY[0x263F8E9C0];
    *(void *)(v19 + 96) = v21;
    *(void *)(v19 + 104) = v22;
    *(void *)(v19 + 72) = v17;
    if (sub_24A2A7840() == a2 && v23 == a3)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v24 = sub_24A2A7E40();
      swift_bridgeObjectRelease();
      if ((v24 & 1) == 0) {
        goto LABEL_3;
      }
    }
    if (qword_269778548 != -1) {
      swift_once();
    }
    uint64_t v25 = sub_24A2A7160();
    __swift_project_value_buffer(v25, (uint64_t)qword_26977A760);
    sub_24A1A52B0(v7, v6);
    sub_24A1A52B0(v9, v8);
    swift_bridgeObjectRetain();
    sub_24A1A52B0(v7, v6);
    sub_24A1A52B0(v9, v8);
    uint64_t v26 = sub_24A2A7140();
    os_log_type_t v27 = sub_24A2A7B40();
    if (os_log_type_enabled(v26, v27))
    {
      os_log_type_t v46 = v27;
      uint64_t v48 = v26;
      uint64_t v28 = swift_slowAlloc();
      unint64_t v44 = (unsigned char *)swift_slowAlloc();
      uint64_t v53 = 0;
      uint64_t v54 = v44;
      *(_DWORD *)uint64_t v28 = 136446466;
      uint64_t v52 = 0;
      sub_24A1A52B0(v7, v6);
      sub_24A1A52B0(v9, v8);
      sub_24A1EDD20(v9, v8, &v53, &v52, (uint64_t)&v55);
      sub_24A1A5384(v7, v6);
      sub_24A1A5384(v9, v8);
      if (v57 == 2)
      {
        uint64_t v29 = 0x6E776F6E6B6E753CLL;
        unint64_t v30 = 0xE90000000000003ELL;
      }
      else
      {
        uint64_t v38 = v28;
        int v40 = v55;
        uint64_t v39 = v56;
        __swift_instantiateConcreteTypeFromMangledName(&qword_26B174BA0);
        uint64_t v41 = swift_allocObject();
        *(_OWORD *)(v41 + 16) = xmmword_24A2A8AA0;
        *(void *)(v41 + 56) = MEMORY[0x263F8E8F8];
        *(void *)(v41 + 64) = MEMORY[0x263F8E960];
        *(_DWORD *)(v41 + 32) = v40;
        *(void *)(v41 + 96) = MEMORY[0x263F8E970];
        *(void *)(v41 + 104) = v22;
        *(void *)(v41 + 72) = v39;
        uint64_t v28 = v38;
        uint64_t v29 = sub_24A2A7840();
        unint64_t v30 = v42;
      }
      uint64_t v55 = sub_24A1C52A8(v29, v30, (uint64_t *)&v54);
      sub_24A2A7B70();
      swift_bridgeObjectRelease();
      sub_24A1A5384(v7, v6);
      sub_24A1A5384(v9, v8);
      sub_24A1A5384(v7, v6);
      sub_24A1A5384(v9, v8);
      *(_WORD *)(v28 + 12) = 2082;
      swift_bridgeObjectRetain();
      uint64_t v55 = sub_24A1C52A8(a2, a3, (uint64_t *)&v54);
      sub_24A2A7B70();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_24A19F000, v48, v46, "Attestation udid %{public}s matches %{public}s", (uint8_t *)v28, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x24C5C00A0](v44, -1, -1);
      MEMORY[0x24C5C00A0](v28, -1, -1);

      char v16 = 1;
    }
    else
    {
      sub_24A1A5384(v7, v6);
      sub_24A1A5384(v9, v8);
      sub_24A1A5384(v7, v6);
      sub_24A1A5384(v9, v8);

      swift_bridgeObjectRelease_n();
      char v16 = 1;
    }
    goto LABEL_24;
  }
  char v16 = 2;
LABEL_25:
  uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&qword_2697799C8);
  *(void *)(v4 + 24) = result;
  *(void *)(v4 + 32) = &protocol witness table for PolicyBuilder.TuplePolicy<Pack{repeat A}>;
  *(unsigned char *)uint64_t v4 = v16;
  return result;
}

uint64_t sub_24A24E850@<X0>(uint64_t a1@<X8>)
{
  return _s16CloudAttestation17EnsembleValidatorV9policyFor4udid12fingerprintsQrSS_Say10Foundation4DataVGtF_0(0, 0, 0, a1);
}

uint64_t sub_24A24E860(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_24A24E8C8(uint64_t a1)
{
  return MEMORY[0x270FA03F0](a1, &opaque type descriptor for <<opaque return type of EnsembleValidator.defaultPolicy>>, 1);
}

void *initializeBufferWithCopyOfBuffer for EnsembleValidator(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v22 = *a2;
    *a1 = *a2;
    a1 = (void *)(v22 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_24A2A7480();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = type metadata accessor for Release();
    *(void *)((char *)a1 + *(int *)(v8 + 20)) = *(void *)((char *)a2 + *(int *)(v8 + 20));
    uint64_t v9 = a3[5];
    uint64_t v10 = a3[6];
    uint64_t v11 = (char *)a1 + v9;
    os_log_type_t v12 = (char *)a2 + v9;
    *((void *)v11 + 2) = *((void *)v12 + 2);
    *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
    *(_DWORD *)((char *)a1 + v10) = *(_DWORD *)((char *)a2 + v10);
    uint64_t v13 = a3[8];
    *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
    *((unsigned char *)a1 + v13) = *((unsigned char *)a2 + v13);
    uint64_t v14 = a3[10];
    *((unsigned char *)a1 + a3[9]) = *((unsigned char *)a2 + a3[9]);
    *((unsigned char *)a1 + v14) = *((unsigned char *)a2 + v14);
    uint64_t v15 = a3[12];
    *((unsigned char *)a1 + a3[11]) = *((unsigned char *)a2 + a3[11]);
    *(void *)((char *)a1 + v15) = *(void *)((char *)a2 + v15);
    uint64_t v16 = a3[13];
    __dst = (char *)a1 + v16;
    uint64_t v17 = (char *)a2 + v16;
    uint64_t v18 = sub_24A2A6BC0();
    uint64_t v19 = *(void *)(v18 - 8);
    uint64_t v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v20(v17, 1, v18))
    {
      uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B173100);
      memcpy(__dst, v17, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(__dst, v17, v18);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(__dst, 0, 1, v18);
    }
    uint64_t v23 = a3[15];
    *((unsigned char *)a1 + a3[14]) = *((unsigned char *)a2 + a3[14]);
    *((unsigned char *)a1 + v23) = *((unsigned char *)a2 + v23);
    *((unsigned char *)a1 + a3[16]) = *((unsigned char *)a2 + a3[16]);
  }
  return a1;
}

uint64_t destroy for EnsembleValidator(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A2A7480();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  type metadata accessor for Release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = a1 + *(int *)(a2 + 52);
  uint64_t v6 = sub_24A2A6BC0();
  uint64_t v9 = *(void *)(v6 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v5, 1, v6);
  if (!result)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 8);
    return v8(v5, v6);
  }
  return result;
}

uint64_t initializeWithCopy for EnsembleValidator(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_24A2A7480();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = type metadata accessor for Release();
  *(void *)(a1 + *(int *)(v7 + 20)) = *(void *)(a2 + *(int *)(v7 + 20));
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(void *)(v10 + 16) = *(void *)(v11 + 16);
  *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
  *(_DWORD *)(a1 + v9) = *(_DWORD *)(a2 + v9);
  uint64_t v12 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v12) = *(unsigned char *)(a2 + v12);
  uint64_t v13 = a3[10];
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  *(unsigned char *)(a1 + v13) = *(unsigned char *)(a2 + v13);
  uint64_t v14 = a3[12];
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  *(void *)(a1 + v14) = *(void *)(a2 + v14);
  uint64_t v15 = a3[13];
  __dst = (void *)(a1 + v15);
  uint64_t v16 = (const void *)(a2 + v15);
  uint64_t v17 = sub_24A2A6BC0();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v18 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v19(v16, 1, v17))
  {
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B173100);
    memcpy(__dst, v16, *(void *)(*(void *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v18 + 16))(__dst, v16, v17);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(__dst, 0, 1, v17);
  }
  uint64_t v21 = a3[15];
  *(unsigned char *)(a1 + a3[14]) = *(unsigned char *)(a2 + a3[14]);
  *(unsigned char *)(a1 + v21) = *(unsigned char *)(a2 + v21);
  *(unsigned char *)(a1 + a3[16]) = *(unsigned char *)(a2 + a3[16]);
  return a1;
}

uint64_t assignWithCopy for EnsembleValidator(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_24A2A7480();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = type metadata accessor for Release();
  *(void *)(a1 + *(int *)(v7 + 20)) = *(void *)(a2 + *(int *)(v7 + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v8 = a3[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  *(_DWORD *)uint64_t v9 = *(_DWORD *)v10;
  *(void *)(v9 + 8) = *(void *)(v10 + 8);
  *(unsigned char *)(v9 + 16) = *(unsigned char *)(v10 + 16);
  *(unsigned char *)(v9 + 17) = *(unsigned char *)(v10 + 17);
  *(unsigned char *)(v9 + 18) = *(unsigned char *)(v10 + 18);
  *(_DWORD *)(v9 + 20) = *(_DWORD *)(v10 + 20);
  *(_DWORD *)(a1 + a3[6]) = *(_DWORD *)(a2 + a3[6]);
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v11 = a3[13];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (void *)(a2 + v11);
  uint64_t v14 = sub_24A2A6BC0();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v15 + 48);
  int v17 = v16(v12, 1, v14);
  int v18 = v16(v13, 1, v14);
  if (!v17)
  {
    if (!v18)
    {
      (*(void (**)(void *, void *, uint64_t))(v15 + 24))(v12, v13, v14);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v15 + 8))(v12, v14);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B173100);
    memcpy(v12, v13, *(void *)(*(void *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v15 + 16))(v12, v13, v14);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
LABEL_7:
  *(unsigned char *)(a1 + a3[14]) = *(unsigned char *)(a2 + a3[14]);
  *(unsigned char *)(a1 + a3[15]) = *(unsigned char *)(a2 + a3[15]);
  *(unsigned char *)(a1 + a3[16]) = *(unsigned char *)(a2 + a3[16]);
  return a1;
}

uint64_t initializeWithTake for EnsembleValidator(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_24A2A7480();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = type metadata accessor for Release();
  *(void *)(a1 + *(int *)(v7 + 20)) = *(void *)(a2 + *(int *)(v7 + 20));
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(void *)(v10 + 16) = *(void *)(v11 + 16);
  *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
  *(_DWORD *)(a1 + v9) = *(_DWORD *)(a2 + v9);
  uint64_t v12 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v12) = *(unsigned char *)(a2 + v12);
  uint64_t v13 = a3[10];
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  *(unsigned char *)(a1 + v13) = *(unsigned char *)(a2 + v13);
  uint64_t v14 = a3[12];
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  *(void *)(a1 + v14) = *(void *)(a2 + v14);
  uint64_t v15 = a3[13];
  uint64_t v16 = (void *)(a1 + v15);
  int v17 = (const void *)(a2 + v15);
  uint64_t v18 = sub_24A2A6BC0();
  uint64_t v19 = *(void *)(v18 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
  {
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B173100);
    memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v19 + 32))(v16, v17, v18);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  }
  uint64_t v21 = a3[15];
  *(unsigned char *)(a1 + a3[14]) = *(unsigned char *)(a2 + a3[14]);
  *(unsigned char *)(a1 + v21) = *(unsigned char *)(a2 + v21);
  *(unsigned char *)(a1 + a3[16]) = *(unsigned char *)(a2 + a3[16]);
  return a1;
}

uint64_t assignWithTake for EnsembleValidator(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_24A2A7480();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = type metadata accessor for Release();
  *(void *)(a1 + *(int *)(v7 + 20)) = *(void *)(a2 + *(int *)(v7 + 20));
  swift_bridgeObjectRelease();
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(_DWORD *)uint64_t v10 = *(_DWORD *)v11;
  *(void *)(v10 + 8) = *(void *)(v11 + 8);
  *(unsigned char *)(v10 + 16) = *(unsigned char *)(v11 + 16);
  *(unsigned char *)(v10 + 17) = *(unsigned char *)(v11 + 17);
  *(unsigned char *)(v10 + 18) = *(unsigned char *)(v11 + 18);
  *(_DWORD *)(v10 + 20) = *(_DWORD *)(v11 + 20);
  *(_DWORD *)(a1 + v9) = *(_DWORD *)(a2 + v9);
  uint64_t v12 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v12) = *(unsigned char *)(a2 + v12);
  uint64_t v13 = a3[10];
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  *(unsigned char *)(a1 + v13) = *(unsigned char *)(a2 + v13);
  uint64_t v14 = a3[12];
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  *(void *)(a1 + v14) = *(void *)(a2 + v14);
  swift_bridgeObjectRelease();
  uint64_t v15 = a3[13];
  uint64_t v16 = (void *)(a1 + v15);
  int v17 = (void *)(a2 + v15);
  uint64_t v18 = sub_24A2A6BC0();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v19 + 48);
  int v21 = v20(v16, 1, v18);
  int v22 = v20(v17, 1, v18);
  if (!v21)
  {
    if (!v22)
    {
      (*(void (**)(void *, void *, uint64_t))(v19 + 40))(v16, v17, v18);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v19 + 8))(v16, v18);
    goto LABEL_6;
  }
  if (v22)
  {
LABEL_6:
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B173100);
    memcpy(v16, v17, *(void *)(*(void *)(v23 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v19 + 32))(v16, v17, v18);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
LABEL_7:
  uint64_t v24 = a3[15];
  *(unsigned char *)(a1 + a3[14]) = *(unsigned char *)(a2 + a3[14]);
  *(unsigned char *)(a1 + v24) = *(unsigned char *)(a2 + v24);
  *(unsigned char *)(a1 + a3[16]) = *(unsigned char *)(a2 + a3[16]);
  return a1;
}

uint64_t getEnumTagSinglePayload for EnsembleValidator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24A24F5A0);
}

uint64_t sub_24A24F5A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Release();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else if (a2 == 0x7FFFFFFF)
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 48));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
  else
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B173100);
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a3 + 52);
    return v12(v14, a2, v13);
  }
}

uint64_t storeEnumTagSinglePayload for EnsembleValidator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24A24F6E4);
}

uint64_t sub_24A24F6E4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for Release();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + *(int *)(a4 + 48)) = (a2 - 1);
  }
  else
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B173100);
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a4 + 52);
    return v12(v14, a2, a2, v13);
  }
  return result;
}

void sub_24A24F814()
{
  type metadata accessor for Release();
  if (v0 <= 0x3F)
  {
    sub_24A1D0D08();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void **assignWithCopy for EnsembleValidator.Error(void **a1, void **a2)
{
  uint64_t v3 = *a1;
  if ((unint64_t)v3 >= 0xFFFFFFFF) {
    int v4 = -1;
  }
  else {
    int v4 = (int)v3;
  }
  unsigned int v5 = v4 + 1;
  uint64_t v6 = *a2;
  if ((unint64_t)*a2 >= 0xFFFFFFFF) {
    LODWORD(v7) = -1;
  }
  else {
    uint64_t v7 = *a2;
  }
  unsigned int v8 = v7 + 1;
  if (v5 > 0xB)
  {
    if (v8 > 0xB || v7 != -1) {
      goto LABEL_17;
    }
    goto LABEL_14;
  }
  if (v8 > 0xB)
  {
    if (!v5)
    {

      uint64_t v6 = *a2;
    }
    goto LABEL_17;
  }
  if (v5)
  {
    if (v7 != -1)
    {
LABEL_17:
      *a1 = v6;
      return a1;
    }
LABEL_14:
    id v10 = v6;
    goto LABEL_17;
  }
  if (v7 == -1)
  {
    id v12 = v6;
    uint64_t v13 = *a1;
    *a1 = v6;
  }
  else
  {

    *a1 = *a2;
  }
  return a1;
}

void **assignWithTake for EnsembleValidator.Error(void **a1, void **a2)
{
  uint64_t v3 = *a1;
  LODWORD(v4) = -1;
  if ((unint64_t)v3 >= 0xFFFFFFFF) {
    int v5 = -1;
  }
  else {
    int v5 = (int)v3;
  }
  unsigned int v6 = v5 + 1;
  uint64_t v7 = *a2;
  if ((unint64_t)*a2 < 0xFFFFFFFF) {
    int v4 = *a2;
  }
  if (v6 > 0xB) {
    goto LABEL_13;
  }
  unsigned int v8 = v4 + 1;
  if (v8 > 0xB)
  {
    if (!v6) {
      goto LABEL_12;
    }
LABEL_13:
    *a1 = v7;
    return a1;
  }
  if (v6) {
    goto LABEL_13;
  }
  if (v8)
  {
LABEL_12:

    goto LABEL_13;
  }
  *a1 = v7;

  return a1;
}

uint64_t getEnumTagSinglePayload for EnsembleValidator.Error(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 > 0x7FFFFFF3 && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 2147483636);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 10;
  if (v4 < 0xC) {
    unsigned int v5 = 0;
  }
  if (v5 >= 2) {
    return v5 - 1;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for EnsembleValidator.Error(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFF4)
  {
    *(void *)uint64_t result = 0;
    *(_DWORD *)uint64_t result = a2 - 2147483636;
    if (a3 >= 0x7FFFFFF4) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFF4) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2 + 11;
    }
  }
  return result;
}

uint64_t sub_24A24FB14(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  unsigned int v2 = v1 + 1;
  unsigned int v3 = v1 - 10;
  if (v2 >= 0xC) {
    return v3;
  }
  else {
    return 0;
  }
}

void *sub_24A24FB38(void *result, unsigned int a2)
{
  if (a2 >= 0x7FFFFFF5)
  {
    *uint64_t result = 0;
    *(_DWORD *)uint64_t result = a2 - 2147483637;
  }
  else if (a2)
  {
    *uint64_t result = a2 + 10;
  }
  return result;
}

ValueMetadata *type metadata accessor for EnsembleValidator.Error()
{
  return &type metadata for EnsembleValidator.Error;
}

void *initializeBufferWithCopyOfBuffer for EnsembleValidator.Error.IntrospectionError(void *a1, void **a2)
{
  unsigned int v3 = *a2;
  if ((unint64_t)*a2 >= 0xFFFFFFFF) {
    id v4 = v3;
  }
  *a1 = v3;
  return a1;
}

void destroy for EnsembleValidator.Error.IntrospectionError(void **a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)v1 >= 0xFFFFFFFF) {
}
  }

void **assignWithCopy for EnsembleValidator.Error.IntrospectionError(void **a1, void **a2)
{
  unsigned int v3 = *a1;
  id v4 = *a2;
  if ((unint64_t)v3 < 0xFFFFFFFF)
  {
    if ((unint64_t)v4 >= 0xFFFFFFFF) {
      id v7 = v4;
    }
    *a1 = v4;
  }
  else if ((unint64_t)v4 < 0xFFFFFFFF)
  {

    *a1 = *a2;
  }
  else
  {
    id v5 = v4;
    unsigned int v6 = *a1;
    *a1 = v4;
  }
  return a1;
}

void **assignWithTake for EnsembleValidator.Error.IntrospectionError(void **a1, unint64_t *a2)
{
  unsigned int v3 = *a1;
  unint64_t v4 = *a2;
  if ((unint64_t)v3 < 0xFFFFFFFF) {
    goto LABEL_5;
  }
  if (v4 < 0xFFFFFFFF)
  {

LABEL_5:
    *a1 = (void *)v4;
    return a1;
  }
  *a1 = (void *)v4;

  return a1;
}

uint64_t getEnumTagSinglePayload for EnsembleValidator.Error.IntrospectionError(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 > 0x7FFFFFF4 && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 2147483637);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 10;
  if (v4 >= 0xC) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for EnsembleValidator.Error.IntrospectionError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFF5)
  {
    *(void *)uint64_t result = 0;
    *(_DWORD *)uint64_t result = a2 - 2147483637;
    if (a3 >= 0x7FFFFFF5) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFF5) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2 + 10;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EnsembleValidator.Error.IntrospectionError()
{
  return &type metadata for EnsembleValidator.Error.IntrospectionError;
}

_UNKNOWN **sub_24A24FD74()
{
  return &protocol witness table for PolicyBuilder.TuplePolicy<Pack{repeat A}>;
}

unint64_t sub_24A24FD80()
{
  unint64_t result = qword_2697799A8;
  if (!qword_2697799A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2697799A8);
  }
  return result;
}

uint64_t sub_24A24FDD4()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_24A24FE0C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_24A24DFCC(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

unint64_t sub_24A24FE28()
{
  unint64_t result = qword_26B174250;
  if (!qword_26B174250)
  {
    sub_24A2A6C70();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B174250);
  }
  return result;
}

unint64_t sub_24A24FE80()
{
  unint64_t result = qword_26B174A88;
  if (!qword_26B174A88)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26B174A80);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B174A88);
  }
  return result;
}

uint64_t sub_24A24FEDC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_24A24FF44(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_24A24FFAC(uint64_t result, unint64_t a2, int a3)
{
  if (result < -8 || result > 8)
  {
LABEL_3:
    LOBYTE(v3) = 0;
    int v4 = 0;
    if (a2 >= 8) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  if (result < 0)
  {
    if ((unint64_t)result <= 0xFFFFFFFFFFFFFFF8) {
      goto LABEL_3;
    }
    int v4 = a3 << -(char)result;
    if (a2 >= 8)
    {
LABEL_8:
      LOBYTE(v3) = 0;
      goto LABEL_12;
    }
  }
  else
  {
    if ((unint64_t)result >= 8) {
      goto LABEL_3;
    }
    int v4 = a3 >> result;
    if (a2 >= 8) {
      goto LABEL_8;
    }
  }
LABEL_11:
  int v3 = 1 << a2;
LABEL_12:
  int v5 = v3 - 1;
  if ((v5 & 0xFFFFFF00) == 0) {
    return v5 & v4;
  }
  __break(1u);
  return result;
}

uint64_t SecureConfig.mimeType.getter()
{
  return sub_24A25005C(0x7079745F656D696DLL, 0xE900000000000065);
}

uint64_t SecureConfig.name.getter()
{
  return sub_24A25005C(1701667182, 0xE400000000000000);
}

uint64_t sub_24A25005C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + 16);
  if (!*(void *)(v3 + 16)) {
    return 0;
  }
  unint64_t v4 = sub_24A1BE668(a1, a2);
  if ((v5 & 1) == 0) {
    return 0;
  }
  uint64_t v6 = *(void *)(*(void *)(v3 + 56) + 16 * v4);
  swift_bridgeObjectRetain();
  return v6;
}

uint64_t SecureConfig.init(from:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_24A1A52B0(a1, a2);
  sub_24A2A7930();
  __int16 v6 = sub_24A2A77B0();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v6 & 0x100) != 0)
  {
    __break(1u);
  }
  else
  {
    LOBYTE(v16) = v6;
    MEMORY[0x270FA5388](result);
    v15[2] = &v16;
    sub_24A1A52B0(a1, a2);
    unsigned int v8 = sub_24A1C09E4(2, 1, (uint64_t (*)(uint64_t *))sub_24A253898, (unint64_t)v15, a1, a2);
    sub_24A1A5384(a1, a2);
    if (v8[2] == 2)
    {
      uint64_t v9 = v8[4];
      unint64_t v10 = v8[5];
      uint64_t v11 = v8[6];
      unint64_t v12 = v8[7];
      sub_24A1A52B0(v9, v10);
      sub_24A1A52B0(v11, v12);
      swift_bridgeObjectRelease();
      sub_24A2A6830();
      swift_allocObject();
      sub_24A2A6820();
      __swift_instantiateConcreteTypeFromMangledName(&qword_2697799D0);
      sub_24A2538B0();
      sub_24A2A6810();
      SecureConfig.init(entry:metadata:)(v11, v12, v16, (uint64_t)&v16);
      sub_24A1A5384(a1, a2);
      swift_release();
      uint64_t result = sub_24A1A5384(v9, v10);
      uint64_t v13 = v17;
      long long v14 = v18;
      *(_OWORD *)a3 = v16;
      *(void *)(a3 + 16) = v13;
      *(_OWORD *)(a3 + 24) = v14;
    }
    else
    {
      sub_24A1A5384(a1, a2);
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(a3 + 32) = 0;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
    }
  }
  return result;
}

void *sub_24A2502E4()
{
  uint64_t v86 = *MEMORY[0x263EF8340];
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174678);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v76 = (char *)&v68 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for Proto_SecureConfig(0);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v78 = (uint64_t)&v68 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v75 = type metadata accessor for Proto_SealedHash.Entry(0);
  uint64_t v79 = *(void **)(v75 - 8);
  MEMORY[0x270FA5388](v75);
  uint64_t v77 = (uint64_t)&v68 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1746E0);
  MEMORY[0x270FA5388](v6 - 8);
  unsigned int v8 = (char *)&v68 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174800);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v68 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Proto_SealedHashLedger(0);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (unint64_t *)((char *)&v68 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v16 = type metadata accessor for Proto_SealedHash(0);
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)&v68 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for Proto_AttestationBundle(0);
  sub_24A1B2CAC(v0 + *(int *)(v20 + 32), (uint64_t)v11, &qword_26B174800);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    *uint64_t v15 = sub_24A1BBEA8(MEMORY[0x263F8EE78]);
    sub_24A2A6E00();
    sub_24A1B2D10((uint64_t)v11, &qword_26B174800);
  }
  else
  {
    sub_24A253D2C((uint64_t)v11, (uint64_t)v15, type metadata accessor for Proto_SealedHashLedger);
  }
  unint64_t v21 = *v15;
  swift_bridgeObjectRetain();
  sub_24A253D94((uint64_t)v15, type metadata accessor for Proto_SealedHashLedger);
  uint64_t v22 = v77;
  if (qword_26B174760 != -1) {
    swift_once();
  }
  uint64_t v23 = sub_24A2A6C00();
  __swift_project_value_buffer(v23, (uint64_t)qword_26B174748);
  uint64_t v24 = sub_24A2A6BE0();
  if (*(void *)(v21 + 16) && (unint64_t v26 = sub_24A1BE668(v24, v25), (v27 & 1) != 0))
  {
    sub_24A24B190(*(void *)(v21 + 56) + *(void *)(v17 + 72) * v26, (uint64_t)v8, type metadata accessor for Proto_SealedHash);
    uint64_t v28 = 0;
  }
  else
  {
    uint64_t v28 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56))(v8, v28, 1, v16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v8, 1, v16) == 1)
  {
    sub_24A1B2D10((uint64_t)v8, &qword_26B1746E0);
    return 0;
  }
  sub_24A253D2C((uint64_t)v8, (uint64_t)v19, type metadata accessor for Proto_SealedHash);
  uint64_t v69 = v19;
  uint64_t v29 = *((void *)v19 + 2);
  uint64_t v30 = *(void *)(v29 + 16);
  if (v30)
  {
    uint64_t v31 = v29 + ((*((unsigned __int8 *)v79 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v79 + 80));
    uint64_t v32 = v79[9];
    uint64_t v68 = *((void *)v19 + 2);
    swift_bridgeObjectRetain_n();
    uint64_t v79 = (void *)MEMORY[0x263F8EE78];
    uint64_t v34 = v75;
    uint64_t v33 = (uint64_t)v76;
    uint64_t v73 = v32;
    while (1)
    {
      sub_24A24B190(v31, v22, type metadata accessor for Proto_SealedHash.Entry);
      sub_24A1B2CAC(v22 + *(int *)(v34 + 24), v33, &qword_26B174678);
      uint64_t v35 = type metadata accessor for Proto_SealedHash.Entry.OneOf_Info(0);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 48))(v33, 1, v35) == 1)
      {
        sub_24A1B2D10(v33, &qword_26B174678);
      }
      else
      {
        if (swift_getEnumCaseMultiPayload() == 2)
        {
          uint64_t v36 = v33;
          uint64_t v37 = v78;
          sub_24A253D2C(v36, v78, type metadata accessor for Proto_SecureConfig);
          uint64_t v38 = *(void **)v37;
          uint64_t v39 = *(void **)(v37 + 8);
          uint64_t v40 = *(void *)(v37 + 16);
          uint64_t v41 = self;
          swift_bridgeObjectRetain();
          sub_24A1A52B0((uint64_t)v38, (unint64_t)v39);
          swift_bridgeObjectRetain();
          sub_24A1A52B0((uint64_t)v38, (unint64_t)v39);
          unint64_t v42 = (void *)sub_24A2A7700();
          swift_bridgeObjectRelease();
          v81[0] = 0;
          id v43 = objc_msgSend(v41, sel_dataWithJSONObject_options_error_, v42, 2, v81);

          id v44 = v81[0];
          if (!v43)
          {
            uint64_t v67 = v44;
            sub_24A2A6970();

            swift_willThrow();
            swift_unexpectedError();
            __break(1u);
            JUMPOUT(0x24A250E50);
          }
          uint64_t v45 = sub_24A2A6AD0();
          unint64_t v47 = v46;

          uint64_t v82 = v45;
          unint64_t v83 = v47;
          sub_24A1A52B0(v45, v47);
          sub_24A252A88(10, 0xE100000000000000);
          sub_24A1A5384(v45, v47);
          uint64_t v48 = v82;
          unint64_t v49 = v83;
          uint64_t v84 = v82;
          unint64_t v85 = v83;
          v81[3] = (id)MEMORY[0x263F06F70];
          v81[4] = (id)MEMORY[0x263F06F60];
          v81[0] = v38;
          v81[1] = v39;
          uint64_t v50 = __swift_project_boxed_opaque_existential_1(v81, MEMORY[0x263F06F70]);
          uint64_t v51 = *v50;
          unint64_t v52 = v50[1];
          switch(v52 >> 62)
          {
            case 1uLL:
              uint64_t v74 = v48;
              if (v51 >> 32 < (int)v51)
              {
                __break(1u);
LABEL_48:
                __break(1u);
LABEL_49:
                __break(1u);
LABEL_50:
                __break(1u);
              }
              uint64_t v71 = (v51 >> 32) - (int)v51;
              sub_24A1A52B0((uint64_t)v38, (unint64_t)v39);
              unint64_t v72 = v49;
              sub_24A1A52B0(v74, v49);
              sub_24A1A52B0(v51, v52);
              if (sub_24A2A68E0() && __OFSUB__((int)v51, sub_24A2A6910())) {
                goto LABEL_50;
              }
              sub_24A2A6900();
              sub_24A2A6A70();
              sub_24A1A5384(v51, v52);
LABEL_34:
              uint64_t v48 = v74;
              unint64_t v49 = v72;
LABEL_35:
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v81);
              sub_24A1A5384(v48, v49);
              sub_24A1A5384((uint64_t)v38, (unint64_t)v39);
              uint64_t v56 = v84;
              unint64_t v57 = v85;
              sub_24A253D94(v78, type metadata accessor for Proto_SecureConfig);
              uint64_t v22 = v77;
              sub_24A253D94(v77, type metadata accessor for Proto_SealedHash.Entry);
              if (swift_isUniquelyReferenced_nonNull_native()) {
                uint64_t v58 = v79;
              }
              else {
                uint64_t v58 = sub_24A1DF1A8(0, v79[2] + 1, 1, v79);
              }
              unint64_t v60 = v58[2];
              unint64_t v59 = v58[3];
              if (v60 >= v59 >> 1) {
                uint64_t v58 = sub_24A1DF1A8((void *)(v59 > 1), v60 + 1, 1, v58);
              }
              v58[2] = v60 + 1;
              uint64_t v79 = v58;
              uint64_t v61 = &v58[5 * v60];
              v61[4] = v38;
              v61[5] = v39;
              v61[6] = v40;
              v61[7] = v56;
              v61[8] = v57;
              uint64_t v34 = v75;
              uint64_t v33 = (uint64_t)v76;
              uint64_t v32 = v73;
              break;
            case 2uLL:
              uint64_t v71 = *(void *)(v51 + 16);
              uint64_t v70 = *(void *)(v51 + 24);
              sub_24A1A52B0((uint64_t)v38, (unint64_t)v39);
              unint64_t v72 = v49;
              sub_24A1A52B0(v48, v49);
              swift_retain();
              swift_retain();
              uint64_t v53 = sub_24A2A68E0();
              uint64_t v74 = v48;
              if (v53)
              {
                uint64_t v54 = sub_24A2A6910();
                uint64_t v55 = v71;
                if (__OFSUB__(v71, v54)) {
                  goto LABEL_49;
                }
              }
              else
              {
                uint64_t v55 = v71;
              }
              if (__OFSUB__(v70, v55)) {
                goto LABEL_48;
              }
              sub_24A2A6900();
              sub_24A2A6A70();
              swift_release();
              swift_release();
              goto LABEL_34;
            case 3uLL:
              memset(v80, 0, 14);
              sub_24A1A52B0((uint64_t)v38, (unint64_t)v39);
              sub_24A1A52B0(v48, v49);
              sub_24A2A6A70();
              goto LABEL_35;
            default:
              v80[0] = *v50;
              LOWORD(v80[1]) = v52;
              BYTE2(v80[1]) = BYTE2(v52);
              BYTE3(v80[1]) = BYTE3(v52);
              BYTE4(v80[1]) = BYTE4(v52);
              BYTE5(v80[1]) = BYTE5(v52);
              sub_24A1A52B0((uint64_t)v38, (unint64_t)v39);
              sub_24A1A52B0(v48, v49);
              sub_24A2A6A70();
              goto LABEL_35;
          }
          goto LABEL_16;
        }
        sub_24A253D94(v33, type metadata accessor for Proto_SealedHash.Entry.OneOf_Info);
      }
      sub_24A253D94(v22, type metadata accessor for Proto_SealedHash.Entry);
LABEL_16:
      v31 += v32;
      if (!--v30)
      {
        swift_bridgeObjectRelease_n();
        uint64_t v62 = (uint64_t)v69;
        uint64_t v63 = *(void *)(*((void *)v69 + 2) + 16);
        uint64_t v64 = v79;
        goto LABEL_43;
      }
    }
  }
  uint64_t v63 = 0;
  uint64_t v64 = (void *)MEMORY[0x263F8EE78];
  uint64_t v62 = (uint64_t)v69;
LABEL_43:
  uint64_t v65 = v64[2];
  sub_24A253D94(v62, type metadata accessor for Proto_SealedHash);
  uint64_t result = v64;
  if (v65 != v63)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return result;
}

uint64_t SecureConfig.entry.getter()
{
  uint64_t v1 = *(void *)v0;
  sub_24A1A52B0(*(void *)v0, *(void *)(v0 + 8));
  return v1;
}

uint64_t SecureConfig.metadata.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SecureConfig.serializedData.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  sub_24A1A52B0(v1, *(void *)(v0 + 32));
  return v1;
}

uint64_t SecureConfig.init(entry:metadata:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  unsigned int v8 = self;
  swift_bridgeObjectRetain();
  sub_24A1A52B0(a1, a2);
  uint64_t v9 = (void *)sub_24A2A7700();
  swift_bridgeObjectRelease();
  id v19 = 0;
  id v10 = objc_msgSend(v8, sel_dataWithJSONObject_options_error_, v9, 2, &v19);

  id v11 = v19;
  if (v10)
  {
    uint64_t v12 = sub_24A2A6AD0();
    unint64_t v14 = v13;

    *(void *)&long long v20 = v12;
    *((void *)&v20 + 1) = v14;
    sub_24A1A52B0(v12, v14);
    sub_24A252A88(10, 0xE100000000000000);
    sub_24A1A5384(v12, v14);
    long long v15 = v20;
    long long v21 = v20;
    sub_24A1A52B0(a1, a2);
    sub_24A1A52B0(v15, *((unint64_t *)&v15 + 1));
    sub_24A252864(a1, a2);
    sub_24A1A5384(a1, a2);
    sub_24A1A5384(v15, *((unint64_t *)&v15 + 1));
    uint64_t result = sub_24A1A5384(a1, a2);
    long long v17 = v21;
    *(void *)a4 = a1;
    *(void *)(a4 + 8) = a2;
    *(void *)(a4 + 16) = a3;
    *(_OWORD *)(a4 + 24) = v17;
  }
  else
  {
    uint64_t v18 = v11;
    sub_24A2A6970();

    swift_willThrow();
    uint64_t result = swift_unexpectedError();
    __break(1u);
  }
  return result;
}

uint64_t sub_24A2510AC()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1746E0);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v28 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174800);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Proto_SealedHashLedger(0);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  id v10 = (unint64_t *)((char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = type metadata accessor for Proto_SealedHash(0);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  unint64_t v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for Proto_AttestationBundle(0);
  sub_24A1B2CAC(v0 + *(int *)(v15 + 32), (uint64_t)v6, &qword_26B174800);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    *id v10 = sub_24A1BBEA8(MEMORY[0x263F8EE78]);
    sub_24A2A6E00();
    sub_24A1B2D10((uint64_t)v6, &qword_26B174800);
  }
  else
  {
    sub_24A253D2C((uint64_t)v6, (uint64_t)v10, type metadata accessor for Proto_SealedHashLedger);
  }
  unint64_t v16 = *v10;
  swift_bridgeObjectRetain();
  sub_24A253D94((uint64_t)v10, type metadata accessor for Proto_SealedHashLedger);
  if (qword_26B174760 != -1) {
    swift_once();
  }
  uint64_t v17 = sub_24A2A6C00();
  __swift_project_value_buffer(v17, (uint64_t)qword_26B174748);
  uint64_t v18 = sub_24A2A6BE0();
  if (*(void *)(v16 + 16) && (unint64_t v20 = sub_24A1BE668(v18, v19), (v21 & 1) != 0))
  {
    sub_24A24B190(*(void *)(v16 + 56) + *(void *)(v12 + 72) * v20, (uint64_t)v3, type metadata accessor for Proto_SealedHash);
    uint64_t v22 = 0;
  }
  else
  {
    uint64_t v22 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v3, v22, 1, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v3, 1, v11) == 1)
  {
    sub_24A1B2D10((uint64_t)v3, &qword_26B1746E0);
    return 0;
  }
  sub_24A253D2C((uint64_t)v3, (uint64_t)v14, type metadata accessor for Proto_SealedHash);
  uint64_t v23 = *(void *)v14;
  int v24 = v14[8];
  sub_24A253D94((uint64_t)v14, type metadata accessor for Proto_SealedHash);
  if (v24 != 1) {
    return 0;
  }
  if (v23)
  {
    if (v23 == 1)
    {
      uint64_t v23 = sub_24A2A7360();
      uint64_t v25 = &qword_26B174A10;
      unint64_t v26 = (void (*)(uint64_t))MEMORY[0x263F047F8];
    }
    else
    {
      uint64_t v23 = sub_24A2A7390();
      uint64_t v25 = (unint64_t *)&qword_26B174A18;
      unint64_t v26 = (void (*)(uint64_t))MEMORY[0x263F04808];
    }
    sub_24A1CA854(v25, v26);
  }
  return v23;
}

uint64_t sub_24A251518@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v46 = a4;
  uint64_t v9 = type metadata accessor for SEP.SealedHash(0);
  uint64_t v10 = MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v13 = *(void *)(a3 + 16);
  unint64_t v14 = (void *)MEMORY[0x263F8EE78];
  if (v13)
  {
    uint64_t v43 = v10;
    id v44 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v45 = v4;
    uint64_t v58 = (void *)MEMORY[0x263F8EE78];
    sub_24A2459B0(0, v13, 0);
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v50 = a1;
    uint64_t v51 = a2;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    uint64_t v49 = AssociatedTypeWitness;
    uint64_t v47 = AssociatedTypeWitness - 8;
    unint64_t v16 = (unint64_t *)(a3 + 64);
    do
    {
      unint64_t v17 = *(v16 - 3);
      uint64_t v52 = *(v16 - 4);
      uint64_t v18 = v52;
      uint64_t v19 = *(v16 - 1);
      uint64_t v53 = *(v16 - 2);
      int64_t v54 = v13;
      unint64_t v20 = *v16;
      uint64_t v55 = v19;
      unint64_t v56 = v20;
      uint64_t v21 = v49;
      v57[3] = v49;
      v57[4] = AssociatedConformanceWitness;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v57);
      sub_24A1A52B0(v18, v17);
      swift_bridgeObjectRetain();
      sub_24A1A52B0(v19, v20);
      sub_24A1B802C();
      uint64_t v23 = sub_24A2A7190();
      MEMORY[0x270FA5388](v23);
      (*(void (**)(char *, uint64_t *, uint64_t))(v25 + 16))((char *)&v42 - v24, boxed_opaque_existential_1, v21);
      uint64_t v26 = sub_24A2A6B20();
      uint64_t v28 = v27;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v57);
      sub_24A1A5384(v52, v17);
      swift_bridgeObjectRelease();
      sub_24A1A5384(v19, v20);
      unint64_t v14 = v58;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_24A2459B0(0, v14[2] + 1, 1);
        unint64_t v14 = v58;
      }
      unint64_t v30 = v14[2];
      unint64_t v29 = v14[3];
      if (v30 >= v29 >> 1)
      {
        sub_24A2459B0(v29 > 1, v30 + 1, 1);
        unint64_t v14 = v58;
      }
      v16 += 5;
      v14[2] = v30 + 1;
      uint64_t v31 = &v14[2 * v30];
      v31[4] = v26;
      v31[5] = v28;
      int64_t v13 = v54 - 1;
    }
    while (v54 != 1);
    uint64_t v12 = v44;
    uint64_t v5 = v45;
    uint64_t v10 = v43;
  }
  *uint64_t v12 = byte_26FDFBD18;
  uint64_t v32 = (uint64_t)&v12[*(int *)(v10 + 20)];
  sub_24A2A7380();
  type metadata accessor for SEP.SealedHash.Value(0);
  swift_storeEnumTagMultiPayload();
  uint64_t v33 = v14[2];
  if (v33)
  {
    swift_bridgeObjectRetain();
    for (unint64_t i = v14 + 5; ; i += 2)
    {
      uint64_t v36 = *(i - 1);
      unint64_t v35 = *i;
      sub_24A1A52B0(v36, *i);
      uint64_t v37 = sub_24A1B52A8(v36, v35);
      unint64_t v39 = v38;
      LOBYTE(v57[0]) = 0;
      SEP.SealedHash.ratchet(digest:flags:)(v37, v38, (unsigned __int8 *)v57);
      if (v5) {
        break;
      }
      sub_24A1A5384(v37, v39);
      if (!--v33)
      {
        swift_bridgeObjectRelease_n();
        return sub_24A253D2C(v32, v46, type metadata accessor for SEP.SealedHash.Value);
      }
    }
    sub_24A1A5384(v37, v39);
    swift_bridgeObjectRelease_n();
  }
  else
  {
    sub_24A1B7964();
    swift_allocError();
    *(_DWORD *)uint64_t v41 = 2;
    *(unsigned char *)(v41 + 4) = 1;
    swift_willThrow();
    swift_bridgeObjectRelease();
  }
  return sub_24A253D94((uint64_t)v12, type metadata accessor for SEP.SealedHash);
}

uint64_t sub_24A251948(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3 = a1;
  uint64_t v4 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    uint64_t v10 = sub_24A2A7920();
    uint64_t v11 = v10 + (v4 << 16);
    unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v13 = v12;
    }
    return v13 | 4;
  }
  else
  {
    uint64_t v5 = MEMORY[0x24C5BF090](15, a1 >> 16);
    uint64_t v6 = v5 + (v4 << 16);
    unint64_t v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v8 = v7;
    }
    return v8 | 8;
  }
}

uint64_t sub_24A2519C4(uint64_t (*a1)(uint64_t, uint64_t))
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  unint64_t v2 = v1[1];
  switch(v2 >> 62)
  {
    case 1uLL:
      *(void *)&long long v18 = *v1;
      *((void *)&v18 + 1) = v2 & 0x3FFFFFFFFFFFFFFFLL;
      uint64_t result = sub_24A251F14(a1);
      uint64_t v4 = v18;
      unint64_t v5 = *((void *)&v18 + 1) | 0x4000000000000000;
      goto LABEL_4;
    case 2uLL:
      *(void *)&long long v18 = *v1;
      *((void *)&v18 + 1) = v2 & 0x3FFFFFFFFFFFFFFFLL;
      sub_24A2A69F0();
      uint64_t v6 = *((void *)&v18 + 1);
      uint64_t v7 = *(void *)(v18 + 16);
      uint64_t v17 = *(void *)(v18 + 24);
      uint64_t v8 = sub_24A2A68E0();
      if (!v8)
      {
        __break(1u);
        JUMPOUT(0x24A251C00);
      }
      uint64_t v9 = v8;
      uint64_t v10 = sub_24A2A6910();
      uint64_t v11 = v7 - v10;
      if (__OFSUB__(v7, v10))
      {
        __break(1u);
LABEL_15:
        __break(1u);
      }
      BOOL v12 = __OFSUB__(v17, v7);
      uint64_t v13 = v17 - v7;
      if (v12) {
        goto LABEL_15;
      }
      uint64_t v14 = sub_24A2A6900();
      if (v14 >= v13) {
        uint64_t v15 = v13;
      }
      else {
        uint64_t v15 = v14;
      }
      uint64_t result = a1(v9 + v11, v9 + v11 + v15);
      void *v1 = v18;
      v1[1] = v6 | 0x8000000000000000;
      return result;
    case 3uLL:
      *(void *)((char *)&v18 + 7) = 0;
      *(void *)&long long v18 = 0;
      return a1((uint64_t)&v18, (uint64_t)&v18);
    default:
      *(void *)&long long v18 = *v1;
      WORD4(v18) = v2;
      BYTE10(v18) = BYTE2(v2);
      BYTE11(v18) = BYTE3(v2);
      BYTE12(v18) = BYTE4(v2);
      BYTE13(v18) = BYTE5(v2);
      BYTE14(v18) = BYTE6(v2);
      uint64_t result = a1((uint64_t)&v18, (uint64_t)&v18 + BYTE6(v2));
      uint64_t v4 = v18;
      unint64_t v5 = DWORD2(v18) | ((unint64_t)BYTE12(v18) << 32) | ((unint64_t)BYTE13(v18) << 40) | ((unint64_t)BYTE14(v18) << 48);
LABEL_4:
      void *v1 = v4;
      v1[1] = v5;
      return result;
  }
}

char *sub_24A251C10(void *(*a1)(uint64_t *__return_ptr, char *, char *))
{
  v16[2] = *MEMORY[0x263EF8340];
  uint64_t v4 = *v1;
  unint64_t v3 = v1[1];
  unint64_t v5 = v1;
  switch(v3 >> 62)
  {
    case 1uLL:
      uint64_t v9 = v3 & 0x3FFFFFFFFFFFFFFFLL;
      *(_OWORD *)uint64_t v1 = xmmword_24A2A8A80;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v11 = v4 >> 32;
      if (isUniquelyReferenced_nonNull_native) {
        goto LABEL_16;
      }
      if (v11 < (int)v4) {
        goto LABEL_23;
      }
      if (sub_24A2A68E0() && __OFSUB__((int)v4, sub_24A2A6910())) {
        goto LABEL_24;
      }
      sub_24A2A6920();
      swift_allocObject();
      uint64_t v13 = sub_24A2A68C0();
      swift_release();
      uint64_t v9 = v13;
      uint64_t v11 = v4 >> 32;
LABEL_16:
      if (v11 < (int)v4)
      {
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
      }
      uint64_t result = sub_24A251FC4((int)v4, v11, a1);
      unint64_t v12 = v9 | 0x4000000000000000;
      if (v2)
      {
        *unint64_t v5 = v4;
        goto LABEL_19;
      }
      *unint64_t v5 = v4;
      v5[1] = v12;
      break;
    case 2uLL:
      uint64_t v14 = *v1;
      uint64_t v15 = v3 & 0x3FFFFFFFFFFFFFFFLL;
      sub_24A2A69F0();
      uint64_t result = sub_24A251FC4(*(void *)(v14 + 16), *(void *)(v14 + 24), a1);
      unint64_t v12 = v15 | 0x8000000000000000;
      if (v2)
      {
        uint64_t *v1 = v14;
LABEL_19:
        v5[1] = v12;
      }
      else
      {
        uint64_t *v1 = v14;
        v1[1] = v12;
      }
      break;
    case 3uLL:
      memset(v16, 0, 15);
      uint64_t result = (char *)a1(&v14, (char *)v16, (char *)v16);
      if (!v2) {
        return (char *)v14;
      }
      return result;
    default:
      v16[0] = *v1;
      LOWORD(v16[1]) = v3;
      BYTE2(v16[1]) = BYTE2(v3);
      BYTE3(v16[1]) = BYTE3(v3);
      BYTE4(v16[1]) = BYTE4(v3);
      BYTE5(v16[1]) = BYTE5(v3);
      BYTE6(v16[1]) = BYTE6(v3);
      uint64_t result = (char *)a1(&v14, (char *)v16, (char *)v16 + BYTE6(v3));
      if (!v2) {
        uint64_t result = (char *)v14;
      }
      unint64_t v8 = LODWORD(v16[1]) | ((unint64_t)BYTE4(v16[1]) << 32) | ((unint64_t)BYTE5(v16[1]) << 40) | ((unint64_t)BYTE6(v16[1]) << 48);
      uint64_t *v1 = v16[0];
      v1[1] = v8;
      return result;
  }
  return result;
}

uint64_t sub_24A251F14(uint64_t (*a1)(uint64_t, uint64_t))
{
  uint64_t result = sub_24A2A6A10();
  uint64_t v4 = *v1;
  uint64_t v5 = v1[1];
  if ((int)v5 < (int)v4)
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t result = sub_24A2A68E0();
  if (!result)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  uint64_t v6 = result;
  uint64_t result = sub_24A2A6910();
  uint64_t v7 = v4 - result;
  if (__OFSUB__(v4, result))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v8 = v5 - v4;
  uint64_t v9 = sub_24A2A6900();
  if (v9 >= v8) {
    uint64_t v10 = v8;
  }
  else {
    uint64_t v10 = v9;
  }
  return a1(v6 + v7, v6 + v7 + v10);
}

char *sub_24A251FC4(uint64_t a1, uint64_t a2, void *(*a3)(uint64_t *__return_ptr, char *, char *))
{
  uint64_t result = (char *)sub_24A2A68E0();
  if (!result) {
    goto LABEL_12;
  }
  uint64_t v8 = result;
  uint64_t result = (char *)sub_24A2A6910();
  uint64_t v9 = a1 - (void)result;
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_11;
  }
  BOOL v10 = __OFSUB__(a2, a1);
  uint64_t v11 = a2 - a1;
  if (v10)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  uint64_t v12 = sub_24A2A6900();
  if (v12 >= v11) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = v12;
  }
  uint64_t result = (char *)a3(&v14, &v8[v9], &v8[v9 + v13]);
  if (!v3) {
    return (char *)v14;
  }
  return result;
}

uint64_t sub_24A252078(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_24A2A68E0();
  if (!result || (uint64_t result = sub_24A2A6910(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      sub_24A2A6900();
      return sub_24A2A6A70();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_24A25210C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  switch(a4 >> 62)
  {
    case 1uLL:
      uint64_t v5 = (int)a3;
      uint64_t v4 = a3 >> 32;
      break;
    case 2uLL:
      uint64_t v5 = *(void *)(a3 + 16);
      uint64_t v4 = *(void *)(a3 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v5 = 0;
      uint64_t v4 = BYTE6(a4);
      break;
  }
  if (v4 < a1 || v5 > a1)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  switch(a4 >> 62)
  {
    case 1uLL:
      uint64_t v7 = (int)a3;
      uint64_t v6 = a3 >> 32;
      break;
    case 2uLL:
      uint64_t v7 = *(void *)(a3 + 16);
      uint64_t v6 = *(void *)(a3 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v7 = 0;
      uint64_t v6 = BYTE6(a4);
      break;
  }
  if (v6 < a2 || v7 > a2) {
    goto LABEL_16;
  }
  BOOL v8 = __OFSUB__(a2, a1);
  uint64_t result = a2 - a1;
  if (v8)
  {
LABEL_17:
    __break(1u);
    JUMPOUT(0x24A2521D8);
  }
  return result;
}

uint64_t sub_24A2521F8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_24A2A7480();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v42 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = MEMORY[0x270FA5388](v10);
  uint64_t v41 = (char *)&v32 - v13;
  uint64_t v43 = a4;
  uint64_t v16 = *(void *)(a4 + 56);
  uint64_t v15 = a4 + 56;
  uint64_t v14 = v16;
  uint64_t v37 = v15;
  uint64_t v17 = -1 << *(unsigned char *)(v15 - 24);
  if (-v17 < 64) {
    uint64_t v18 = ~(-1 << -(char)v17);
  }
  else {
    uint64_t v18 = -1;
  }
  unint64_t v19 = v18 & v14;
  if (!a2)
  {
    int64_t v20 = 0;
    a3 = 0;
LABEL_38:
    uint64_t v31 = v37;
    *a1 = v43;
    a1[1] = v31;
    a1[2] = ~v17;
    a1[3] = v20;
    a1[4] = v19;
    return a3;
  }
  if (!a3)
  {
    int64_t v20 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v34 = -1 << *(unsigned char *)(v15 - 24);
  unint64_t v35 = a1;
  int64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v38 = v9 + 32;
  uint64_t v39 = v9 + 16;
  int64_t v36 = (unint64_t)(63 - v17) >> 6;
  int64_t v33 = v36 - 1;
  uint64_t v40 = a3;
  uint64_t v22 = v41;
  if (!v19) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v23 = __clz(__rbit64(v19));
  v19 &= v19 - 1;
  unint64_t v24 = v23 | (v20 << 6);
  while (1)
  {
    ++v21;
    uint64_t v28 = v42;
    uint64_t v29 = *(void *)(v9 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v42, *(void *)(v43 + 48) + v29 * v24, v8);
    unint64_t v30 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
    v30(v22, v28, v8);
    uint64_t result = ((uint64_t (*)(uint64_t, char *, uint64_t))v30)(a2, v22, v8);
    a3 = v40;
    if (v21 == v40) {
      goto LABEL_37;
    }
    a2 += v29;
    if (v19) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v25 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v25 >= v36) {
      goto LABEL_32;
    }
    unint64_t v26 = *(void *)(v37 + 8 * v25);
    if (!v26) {
      break;
    }
LABEL_18:
    unint64_t v19 = (v26 - 1) & v26;
    unint64_t v24 = __clz(__rbit64(v26)) + (v25 << 6);
    int64_t v20 = v25;
  }
  v20 += 2;
  if (v25 + 1 >= v36)
  {
    unint64_t v19 = 0;
    int64_t v20 = v25;
    goto LABEL_36;
  }
  unint64_t v26 = *(void *)(v37 + 8 * v20);
  if (v26) {
    goto LABEL_14;
  }
  int64_t v27 = v25 + 2;
  if (v25 + 2 >= v36) {
    goto LABEL_32;
  }
  unint64_t v26 = *(void *)(v37 + 8 * v27);
  if (v26) {
    goto LABEL_17;
  }
  int64_t v20 = v25 + 3;
  if (v25 + 3 >= v36)
  {
    unint64_t v19 = 0;
    int64_t v20 = v25 + 2;
    goto LABEL_36;
  }
  unint64_t v26 = *(void *)(v37 + 8 * v20);
  if (v26)
  {
LABEL_14:
    int64_t v25 = v20;
    goto LABEL_18;
  }
  int64_t v27 = v25 + 4;
  if (v25 + 4 >= v36)
  {
LABEL_32:
    unint64_t v19 = 0;
LABEL_36:
    a3 = v21;
LABEL_37:
    uint64_t v17 = v34;
    a1 = v35;
    goto LABEL_38;
  }
  unint64_t v26 = *(void *)(v37 + 8 * v27);
  if (v26)
  {
LABEL_17:
    int64_t v25 = v27;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v25 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v25 >= v36)
    {
      unint64_t v19 = 0;
      int64_t v20 = v33;
      goto LABEL_36;
    }
    unint64_t v26 = *(void *)(v37 + 8 * v25);
    ++v27;
    if (v26) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_24A252540(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  unint64_t v5 = a5 >> 62;
  uint64_t v9 = 0;
  switch(a5 >> 62)
  {
    case 1uLL:
      uint64_t v9 = (uint64_t)a4 >> 32;
      goto LABEL_5;
    case 2uLL:
      uint64_t v9 = *(void *)(a4 + 24);
      if (a2) {
        goto LABEL_8;
      }
      goto LABEL_39;
    case 3uLL:
LABEL_5:
      if (!a2) {
        goto LABEL_39;
      }
      goto LABEL_8;
    default:
      uint64_t v9 = BYTE6(a5);
      if (!a2)
      {
LABEL_39:
        uint64_t v14 = 0;
        goto LABEL_40;
      }
LABEL_8:
      if (!a3)
      {
        uint64_t v14 = 0;
        goto LABEL_40;
      }
      if (a3 < 0) {
        goto LABEL_48;
      }
      int64_t v25 = a1;
      uint64_t v10 = 0;
      char v11 = a4;
      uint64_t v38 = (uint64_t)a4 >> 32;
      unint64_t v36 = a4 >> 16;
      unint64_t v37 = a4 >> 8;
      unint64_t v34 = HIDWORD(a4);
      unint64_t v35 = a4 >> 24;
      unint64_t v32 = HIWORD(a4);
      unint64_t v33 = a4 >> 40;
      unint64_t v30 = a5 >> 8;
      unint64_t v31 = HIBYTE(a4);
      unint64_t v28 = a5 >> 24;
      unint64_t v29 = a5 >> 16;
      unint64_t v26 = a5 >> 40;
      unint64_t v27 = HIDWORD(a5);
      uint64_t v24 = v9;
      uint64_t v12 = v5;
      unint64_t v40 = a5 >> 62;
      break;
  }
  while (2)
  {
    uint64_t v14 = v10++;
    uint64_t v15 = (int)a4;
    switch(v12)
    {
      case 0:
        if (!v9) {
          goto LABEL_35;
        }
        BOOL v16 = __OFSUB__(v9--, 1);
        if (v16) {
          goto LABEL_42;
        }
        if (v9 >= BYTE6(a5)) {
          goto LABEL_43;
        }
        v41[0] = v11;
        v41[1] = v37;
        v41[2] = v36;
        v41[3] = v35;
        v41[4] = v34;
        v41[5] = v33;
        v41[6] = v32;
        v41[7] = v31;
        v41[8] = a5;
        v41[9] = v30;
        v41[10] = v29;
        v41[11] = v28;
        v41[12] = v27;
        v41[13] = v26;
        char v13 = v41[v9];
        goto LABEL_12;
      case 1:
        goto LABEL_19;
      case 2:
        uint64_t v15 = *(void *)(a4 + 16);
LABEL_19:
        if (v9 == v15) {
          goto LABEL_35;
        }
        BOOL v16 = __OFSUB__(v9--, 1);
        if (v16)
        {
          __break(1u);
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
LABEL_47:
          __break(1u);
LABEL_48:
          __break(1u);
LABEL_49:
          __break(1u);
LABEL_50:
          __break(1u);
LABEL_51:
          __break(1u);
        }
        if (v5 == 2)
        {
          if (v9 < *(void *)(a4 + 16)) {
            goto LABEL_44;
          }
          if (v9 >= *(void *)(a4 + 24)) {
            goto LABEL_46;
          }
          uint64_t v17 = sub_24A2A68E0();
          if (!v17) {
            goto LABEL_50;
          }
          uint64_t v18 = v17;
          uint64_t v19 = sub_24A2A6910();
          uint64_t v20 = v9 - v19;
          if (__OFSUB__(v9, v19)) {
            goto LABEL_47;
          }
LABEL_11:
          char v13 = *(unsigned char *)(v18 + v20);
          LODWORD(v5) = v40;
LABEL_12:
          *(unsigned char *)(a2 + v14) = v13;
          if (a3 == v10) {
            goto LABEL_34;
          }
          continue;
        }
        if (v9 < (int)a4 || v9 >= v38) {
          goto LABEL_45;
        }
        uint64_t v21 = sub_24A2A68E0();
        if (!v21) {
          goto LABEL_51;
        }
        uint64_t v18 = v21;
        uint64_t v22 = sub_24A2A6910();
        uint64_t v20 = v9 - v22;
        if (!__OFSUB__(v9, v22)) {
          goto LABEL_11;
        }
        __break(1u);
LABEL_34:
        uint64_t v14 = a3;
LABEL_35:
        a1 = v25;
LABEL_40:
        *a1 = a4;
        a1[1] = a5;
        a1[2] = v9;
        return v14;
      case 3:
        a1 = v25;
        if (v24) {
          goto LABEL_49;
        }
        uint64_t v9 = 0;
        goto LABEL_39;
      default:
        JUMPOUT(0);
    }
  }
}

uint64_t sub_24A252864(uint64_t a1, unint64_t a2)
{
  v10[5] = *MEMORY[0x263EF8340];
  v10[3] = MEMORY[0x263F06F70];
  v10[4] = MEMORY[0x263F06F60];
  v10[0] = a1;
  v10[1] = a2;
  uint64_t v4 = __swift_project_boxed_opaque_existential_1(v10, MEMORY[0x263F06F70]);
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  switch(v6 >> 62)
  {
    case 1uLL:
      if (v5 >> 32 < (int)v5) {
        __break(1u);
      }
      sub_24A1A52B0(a1, a2);
      sub_24A1A52B0(v5, v6);
      sub_24A252078((int)v5, v5 >> 32);
      sub_24A1A5384(v5, v6);
      break;
    case 2uLL:
      uint64_t v7 = *(void *)(v5 + 16);
      uint64_t v8 = *(void *)(v5 + 24);
      sub_24A1A52B0(a1, a2);
      swift_retain();
      swift_retain();
      sub_24A252078(v7, v8);
      swift_release();
      swift_release();
      break;
    default:
      sub_24A1A52B0(a1, a2);
      sub_24A2A6A70();
      break;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
}

unint64_t sub_24A252A88(uint64_t a1, unint64_t a2)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B1741F8);
  if (swift_dynamicCast())
  {
    sub_24A1B97D8(v39, (uint64_t)&v41);
    uint64_t v3 = __swift_project_boxed_opaque_existential_1(&v41, v43);
    MEMORY[0x270FA5388](v3);
    sub_24A2A6960();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v41);
  }
  uint64_t v40 = 0;
  memset(v39, 0, sizeof(v39));
  sub_24A1B2D10((uint64_t)v39, &qword_26B174200);
  unint64_t result = sub_24A253804(a1, a2);
  if ((result & 1) == 0) {
    return result;
  }
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_62;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v5 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v5 = a1 & 0xFFFFFFFFFFFFLL;
  }
LABEL_8:
  uint64_t v6 = *v2;
  unint64_t v7 = v2[1];
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  switch(v7 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(v6), v6)) {
        goto LABEL_69;
      }
      uint64_t v9 = HIDWORD(v6) - (int)v6;
      uint64_t v8 = v6 >> 32;
LABEL_13:
      if (__OFADD__(v8, v5))
      {
        __break(1u);
        goto LABEL_64;
      }
      if (v8 + v5 < v8)
      {
LABEL_64:
        __break(1u);
        goto LABEL_65;
      }
      if (v8 < 0)
      {
LABEL_65:
        __break(1u);
        goto LABEL_66;
      }
      uint64_t v12 = sub_24A2A6A50();
      MEMORY[0x270FA5388](v12);
      unint64_t v13 = (unint64_t)sub_24A251C10((void *(*)(uint64_t *__return_ptr, char *, char *))sub_24A253BE0);
      uint64_t v17 = v14;
      if (v16 != v5)
      {
        uint64_t v29 = *v2;
        unint64_t v30 = v2[1];
        uint64_t v31 = 0;
        switch(v30 >> 62)
        {
          case 1uLL:
            uint64_t v31 = (int)v29;
            break;
          case 2uLL:
            uint64_t v31 = *(void *)(v29 + 16);
            break;
          default:
            break;
        }
        BOOL v32 = __OFADD__(v31, v9);
        uint64_t v33 = v31 + v9;
        if (!v32)
        {
          if (!__OFADD__(v33, v16))
          {
            uint64_t v34 = 0;
            switch(v30 >> 62)
            {
              case 1uLL:
                uint64_t v34 = v29 >> 32;
                break;
              case 2uLL:
                uint64_t v34 = *(void *)(v29 + 24);
                break;
              case 3uLL:
                break;
              default:
                uint64_t v34 = BYTE6(v30);
                break;
            }
            if (v34 >= v33 + v16)
            {
              sub_24A2A6A60();
              return swift_bridgeObjectRelease();
            }
LABEL_68:
            __break(1u);
LABEL_69:
            __break(1u);
LABEL_70:
            __break(1u);
          }
LABEL_67:
          __break(1u);
          goto LABEL_68;
        }
LABEL_66:
        __break(1u);
        goto LABEL_67;
      }
      uint64_t v18 = v13;
      unint64_t v19 = v15;
      if ((v14 & 0x2000000000000000) != 0) {
        unint64_t v20 = HIBYTE(v14) & 0xF;
      }
      else {
        unint64_t v20 = v13 & 0xFFFFFFFFFFFFLL;
      }
      *(void *)((char *)v39 + 7) = 0;
      *(void *)&v39[0] = 0;
      if (4 * v20 != v15 >> 14)
      {
        LOBYTE(v21) = 0;
        uint64_t v22 = (v13 >> 59) & 1;
        if ((v14 & 0x1000000000000000) == 0) {
          LOBYTE(v22) = 1;
        }
        uint64_t v23 = 4 << v22;
        uint64_t v35 = (v14 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v36 = v14 & 0xFFFFFFFFFFFFFFLL;
        while (1)
        {
          unint64_t v24 = v19 & 0xC;
          unint64_t v25 = v19;
          if (v24 == v23) {
            unint64_t v25 = sub_24A251948(v19, v18, v17);
          }
          unint64_t v26 = v25 >> 16;
          if (v25 >> 16 >= v20)
          {
            __break(1u);
LABEL_60:
            __break(1u);
LABEL_61:
            __break(1u);
LABEL_62:
            uint64_t v5 = sub_24A2A78D0();
            goto LABEL_8;
          }
          if ((v17 & 0x1000000000000000) != 0)
          {
            char v28 = sub_24A2A7910();
            if (v24 != v23) {
              goto LABEL_35;
            }
          }
          else if ((v17 & 0x2000000000000000) != 0)
          {
            uint64_t v41 = v18;
            uint64_t v42 = v36;
            char v28 = *((unsigned char *)&v41 + v26);
            if (v24 != v23) {
              goto LABEL_35;
            }
          }
          else
          {
            uint64_t v27 = v35;
            if ((v18 & 0x1000000000000000) == 0) {
              uint64_t v27 = sub_24A2A7CA0();
            }
            char v28 = *(unsigned char *)(v27 + v26);
            if (v24 != v23)
            {
LABEL_35:
              if ((v17 & 0x1000000000000000) != 0) {
                goto LABEL_39;
              }
              goto LABEL_36;
            }
          }
          unint64_t v19 = sub_24A251948(v19, v18, v17);
          if ((v17 & 0x1000000000000000) != 0)
          {
LABEL_39:
            if (v20 <= v19 >> 16) {
              goto LABEL_61;
            }
            unint64_t v19 = sub_24A2A78E0();
            goto LABEL_41;
          }
LABEL_36:
          unint64_t v19 = (v19 & 0xFFFFFFFFFFFF0000) + 65540;
LABEL_41:
          *((unsigned char *)v39 + v21) = v28;
          unsigned int v21 = v21 + 1;
          if ((v21 >> 8)) {
            goto LABEL_60;
          }
          BYTE14(v39[0]) = v21;
          if (v21 == 14)
          {
            uint64_t v41 = *(void *)&v39[0];
            LODWORD(v42) = DWORD2(v39[0]);
            WORD2(v42) = WORD6(v39[0]);
            sub_24A2A6A70();
            LOBYTE(v21) = 0;
            BYTE14(v39[0]) = 0;
          }
          if (4 * v20 == v19 >> 14)
          {
            if ((_BYTE)v21)
            {
              uint64_t v41 = *(void *)&v39[0];
              LODWORD(v42) = DWORD2(v39[0]);
              WORD2(v42) = WORD6(v39[0]);
              sub_24A2A6A70();
            }
            return swift_bridgeObjectRelease();
          }
        }
      }
      return swift_bridgeObjectRelease();
    case 2uLL:
      uint64_t v11 = v6 + 16;
      uint64_t v10 = *(void *)(v6 + 16);
      uint64_t v8 = *(void *)(v11 + 8);
      uint64_t v9 = v8 - v10;
      if (!__OFSUB__(v8, v10)) {
        goto LABEL_13;
      }
      goto LABEL_70;
    case 3uLL:
      goto LABEL_13;
    default:
      uint64_t v8 = BYTE6(v7);
      uint64_t v9 = BYTE6(v7);
      goto LABEL_13;
  }
}

uint64_t sub_24A252FC8(uint64_t a1, unint64_t a2)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  uint64_t v52 = a1;
  unint64_t v53 = a2;
  uint64_t v46 = a1;
  unint64_t v47 = a2;
  sub_24A1A52B0(a1, a2);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B174B10);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B1741F8);
  if (swift_dynamicCast())
  {
    sub_24A1B97D8(v44, (uint64_t)&v48);
    uint64_t v3 = __swift_project_boxed_opaque_existential_1(&v48, (uint64_t)v51);
    MEMORY[0x270FA5388](v3);
    sub_24A2A6960();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v48);
  }
  uint64_t v45 = 0;
  memset(v44, 0, sizeof(v44));
  sub_24A1B2D10((uint64_t)v44, &qword_26B174200);
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  switch(v53 >> 62)
  {
    case 1uLL:
      uint64_t v6 = v52 >> 32;
      uint64_t v5 = (int)v52;
      break;
    case 2uLL:
      uint64_t v5 = *(void *)(v52 + 16);
      uint64_t v6 = *(void *)(v52 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v5 = 0;
      uint64_t v6 = BYTE6(v53);
      break;
  }
  uint64_t v7 = sub_24A25210C(v5, v6, v52, v53);
  uint64_t v8 = *v2;
  unint64_t v9 = v2[1];
  uint64_t v10 = v7;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  switch(v9 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(v8), v8)) {
        goto LABEL_72;
      }
      uint64_t v12 = HIDWORD(v8) - (int)v8;
      uint64_t v11 = v8 >> 32;
LABEL_12:
      if (__OFADD__(v11, v10)) {
        goto LABEL_66;
      }
      if (v11 + v10 < v11) {
        goto LABEL_67;
      }
      if (v11 < 0) {
        goto LABEL_68;
      }
      uint64_t v15 = sub_24A2A6A50();
      MEMORY[0x270FA5388](v15);
      sub_24A2519C4((uint64_t (*)(uint64_t, uint64_t))sub_24A253B58);
      uint64_t v17 = v51;
      uint64_t v18 = v48;
      unint64_t v19 = v49;
      if (v51 != (long long *)v10)
      {
        uint64_t v23 = *v2;
        unint64_t v16 = v2[1];
        unint64_t v33 = v16 >> 62;
        uint64_t v34 = 0;
        switch(v16 >> 62)
        {
          case 1uLL:
            uint64_t v34 = (int)v23;
            break;
          case 2uLL:
LABEL_44:
            uint64_t v34 = *(void *)(v23 + 16);
            break;
          default:
            break;
        }
        BOOL v25 = __OFADD__(v34, v12);
        uint64_t v35 = v34 + v12;
        if (v25) {
          goto LABEL_69;
        }
        if (__OFADD__(v35, v17))
        {
LABEL_70:
          __break(1u);
        }
        else
        {
          uint64_t v36 = 0;
          switch((int)v33)
          {
            case 1:
              uint64_t v36 = v23 >> 32;
              break;
            case 2:
              uint64_t v36 = *(void *)(v23 + 24);
              break;
            case 3:
              break;
            default:
              uint64_t v36 = BYTE6(v16);
              break;
          }
          if (v36 >= (uint64_t)v17 + v35)
          {
            sub_24A2A6A60();
            return sub_24A1A5384(v18, v19);
          }
        }
        __break(1u);
LABEL_72:
        __break(1u);
LABEL_73:
        __break(1u);
LABEL_74:
        __break(1u);
LABEL_75:
        __break(1u);
      }
      unsigned __int8 v20 = 0;
      unint64_t v21 = v49 >> 62;
      uint64_t v22 = v50;
      uint64_t v12 = (int)v48;
      uint64_t v42 = (uint64_t)v48 >> 32;
      uint64_t v43 = BYTE6(v49);
      unint64_t v41 = v48 >> 8;
      unint64_t v40 = v48 >> 16;
      *(void *)((char *)v44 + 7) = 0;
      *(void *)&v44[0] = 0;
      unint64_t v39 = v48 >> 24;
      uint64_t v23 = (uint64_t)&v55;
      unint64_t v38 = HIDWORD(v48);
      uint64_t v37 = v50;
      break;
    case 2uLL:
      uint64_t v14 = v8 + 16;
      uint64_t v13 = *(void *)(v8 + 16);
      uint64_t v11 = *(void *)(v14 + 8);
      uint64_t v12 = v11 - v13;
      if (!__OFSUB__(v11, v13)) {
        goto LABEL_12;
      }
      goto LABEL_73;
    case 3uLL:
      goto LABEL_12;
    default:
      uint64_t v11 = BYTE6(v9);
      uint64_t v12 = BYTE6(v9);
      goto LABEL_12;
  }
  while (2)
  {
    uint64_t v24 = (int)v18;
    switch(v19 >> 62)
    {
      case 1uLL:
        goto LABEL_23;
      case 2uLL:
        uint64_t v24 = *(void *)(v18 + 16);
LABEL_23:
        if (v22 == v24) {
          goto LABEL_55;
        }
        BOOL v25 = __OFSUB__(v22--, 1);
        if (v25) {
          goto LABEL_58;
        }
        if (v21 == 2)
        {
          if (v22 < *(void *)(v18 + 16)) {
            goto LABEL_61;
          }
          if (v22 >= *(void *)(v18 + 24)) {
            goto LABEL_63;
          }
          uint64_t v27 = sub_24A2A68E0();
          if (!v27) {
            goto LABEL_74;
          }
          uint64_t v28 = v27;
          uint64_t v29 = sub_24A2A6910();
          uint64_t v30 = v22 - v29;
          if (__OFSUB__(v22, v29)) {
            goto LABEL_65;
          }
        }
        else
        {
          if (v22 < (int)v18 || v22 >= v42) {
            goto LABEL_62;
          }
          uint64_t v31 = sub_24A2A68E0();
          if (!v31) {
            goto LABEL_75;
          }
          uint64_t v28 = v31;
          uint64_t v32 = sub_24A2A6910();
          uint64_t v30 = v22 - v32;
          if (__OFSUB__(v22, v32)) {
            goto LABEL_64;
          }
        }
        char v26 = *(unsigned char *)(v28 + v30);
        goto LABEL_37;
      case 3uLL:
        LODWORD(v33) = v37;
        if (!v37) {
          return sub_24A1A5384(v18, v19);
        }
        __break(1u);
        goto LABEL_44;
      default:
        if (v22)
        {
          BOOL v25 = __OFSUB__(v22--, 1);
          if (v25) {
            goto LABEL_59;
          }
          if (v22 >= v43) {
            goto LABEL_60;
          }
          LOBYTE(v46) = v18;
          BYTE1(v46) = v41;
          BYTE2(v46) = v40;
          BYTE3(v46) = v39;
          BYTE4(v46) = v38;
          BYTE5(v46) = BYTE5(v18);
          BYTE6(v46) = BYTE6(v18);
          HIBYTE(v46) = HIBYTE(v18);
          LOWORD(v47) = v19;
          BYTE2(v47) = BYTE2(v19);
          BYTE3(v47) = BYTE3(v19);
          BYTE4(v47) = BYTE4(v19);
          BYTE5(v47) = BYTE5(v19);
          char v26 = *((unsigned char *)&v46 + v22);
LABEL_37:
          uint64_t v23 = v20;
          unint64_t v16 = v20;
          uint64_t v17 = v44;
          *((unsigned char *)v44 + v20++) = v26;
          if (((v16 + 1) >> 8))
          {
            __break(1u);
LABEL_58:
            __break(1u);
LABEL_59:
            __break(1u);
LABEL_60:
            __break(1u);
LABEL_61:
            __break(1u);
LABEL_62:
            __break(1u);
LABEL_63:
            __break(1u);
LABEL_64:
            __break(1u);
LABEL_65:
            __break(1u);
LABEL_66:
            __break(1u);
LABEL_67:
            __break(1u);
LABEL_68:
            __break(1u);
LABEL_69:
            __break(1u);
            goto LABEL_70;
          }
          if (v20 == 14)
          {
            uint64_t v46 = *(void *)&v44[0];
            LODWORD(v47) = DWORD2(v44[0]);
            WORD2(v47) = WORD6(v44[0]);
            sub_24A2A6A70();
            unsigned __int8 v20 = 0;
          }
          continue;
        }
LABEL_55:
        if (v20)
        {
          uint64_t v46 = *(void *)&v44[0];
          LODWORD(v47) = DWORD2(v44[0]);
          WORD2(v47) = WORD6(v44[0]);
          sub_24A2A6A70();
        }
        return sub_24A1A5384(v18, v19);
    }
  }
}

uint64_t sub_24A2535F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, unint64_t a5@<X5>, unint64_t *a6@<X8>)
{
  if (a1)
  {
    if (__OFSUB__(a2 - a1, a3))
    {
      __break(1u);
      JUMPOUT(0x24A2537F4);
    }
    uint64_t v9 = a1 + a3;
    uint64_t v10 = a2;
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v9 = 0;
  }
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a4;
  *(void *)(v11 + 24) = a5;
  if (v9)
  {
    sub_24A1A52B0(a4, a5);
    sub_24A1A52B0(a4, a5);
    sub_24A1A52B0(a4, a5);
    a6[3] = sub_24A252540(a6, v9, v10 - v9, a4, a5);
    swift_release();
    return sub_24A1A5384(a4, a5);
  }
  else
  {
    switch(a5 >> 62)
    {
      case 1uLL:
        sub_24A1A52B0(a4, a5);
        sub_24A1A52B0(a4, a5);
        sub_24A1A52B0(a4, a5);
        swift_release();
        uint64_t result = sub_24A1A5384(a4, a5);
        uint64_t v13 = a4 >> 32;
        break;
      case 2uLL:
        sub_24A1A52B0(a4, a5);
        uint64_t v13 = *(void *)(a4 + 24);
        sub_24A1A52B0(a4, a5);
        sub_24A1A52B0(a4, a5);
        swift_release();
        uint64_t result = sub_24A1A5384(a4, a5);
        break;
      case 3uLL:
        sub_24A1A52B0(a4, a5);
        sub_24A1A52B0(a4, a5);
        swift_release();
        uint64_t result = sub_24A1A5384(a4, a5);
        uint64_t v13 = 0;
        break;
      default:
        sub_24A1A52B0(a4, a5);
        sub_24A1A52B0(a4, a5);
        swift_release();
        uint64_t result = sub_24A1A5384(a4, a5);
        uint64_t v13 = BYTE6(a5);
        break;
    }
    *a6 = a4;
    a6[1] = a5;
    a6[2] = v13;
    a6[3] = 0;
  }
  return result;
}

unint64_t sub_24A253804(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = a2 & 0x1000000000000000;
  if ((a2 & 0x1000000000000000) == 0)
  {
    if ((a2 & 0x2000000000000000) == 0 && (a1 & 0x1000000000000000) == 0) {
      sub_24A2A7CA0();
    }
    sub_24A2A6A70();
  }
  return v2 >> 60;
}

BOOL sub_24A253898(unsigned __int8 *a1)
{
  return *a1 == **(unsigned __int8 **)(v1 + 16);
}

unint64_t sub_24A2538B0()
{
  unint64_t result = qword_2697799D8;
  if (!qword_2697799D8)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2697799D0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2697799D8);
  }
  return result;
}

uint64_t destroy for SecureConfig(uint64_t *a1)
{
  sub_24A1A5384(*a1, a1[1]);
  swift_bridgeObjectRelease();
  uint64_t v2 = a1[3];
  unint64_t v3 = a1[4];

  return sub_24A1A5384(v2, v3);
}

uint64_t *initializeWithCopy for SecureConfig(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_24A1A52B0(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  uint64_t v6 = a2[3];
  a1[2] = a2[2];
  unint64_t v7 = a2[4];
  swift_bridgeObjectRetain();
  sub_24A1A52B0(v6, v7);
  a1[3] = v6;
  a1[4] = v7;
  return a1;
}

uint64_t *assignWithCopy for SecureConfig(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_24A1A52B0(*a2, v5);
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_24A1A5384(v6, v7);
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v9 = a2[3];
  unint64_t v8 = a2[4];
  sub_24A1A52B0(v9, v8);
  uint64_t v10 = a1[3];
  unint64_t v11 = a1[4];
  a1[3] = v9;
  a1[4] = v8;
  sub_24A1A5384(v10, v11);
  return a1;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t *assignWithTake for SecureConfig(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_24A1A5384(v4, v5);
  a1[2] = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  uint64_t v6 = a1[3];
  unint64_t v7 = a1[4];
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);
  sub_24A1A5384(v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for SecureConfig(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SecureConfig(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SecureConfig()
{
  return &type metadata for SecureConfig;
}

uint64_t sub_24A253B58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  return sub_24A2535F8(a1, a2, *(void *)(v3 + 16), **(void **)(v3 + 32), *(void *)(*(void *)(v3 + 32) + 8), a3);
}

uint64_t sub_24A253B7C()
{
  return sub_24A2A6A70();
}

uint64_t sub_24A253BA8()
{
  sub_24A1A5384(*(void *)(v0 + 16), *(void *)(v0 + 24));

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_24A253BE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = sub_24A253C1C(a1, a2, *(void *)(v3 + 16), **(void **)(v3 + 32), *(void *)(*(void *)(v3 + 32) + 8));
  if (!v4)
  {
    *a3 = result;
    a3[1] = v7;
    a3[2] = v8;
    a3[3] = v9;
  }
  return result;
}

uint64_t sub_24A253C1C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (result)
  {
    if (__OFSUB__(a2 - result, a3))
    {
      __break(1u);
      goto LABEL_9;
    }
    uint64_t v7 = result + a3;
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a4;
  *(void *)(result + 24) = a5;
  if (!v7)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  swift_bridgeObjectRetain_n();
  uint64_t result = sub_24A2A7C70();
  if ((v8 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_release();
    return 0;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_24A253CF4()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_24A253D2C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_24A253D94(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_24A253DF4()
{
  return sub_24A253B7C();
}

uint64_t CryptexPolicy.init(locked:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 8) = result;
  return result;
}

uint64_t sub_24A253E18()
{
  uint64_t v0 = sub_24A2A6C00();
  __swift_allocate_value_buffer(v0, qword_26B174330);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_26B174330);
  if (qword_26B174600 != -1) {
    swift_once();
  }
  uint64_t v2 = __swift_project_value_buffer(v0, (uint64_t)qword_26B1768F8);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t static CryptexPolicy.slot.getter@<X0>(uint64_t a1@<X8>)
{
  if (qword_26B174348 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_24A2A6C00();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_26B174330);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, v3, v2);
}

uint64_t sub_24A253F88()
{
  uint64_t v0 = sub_24A2A7160();
  __swift_allocate_value_buffer(v0, qword_26B176898);
  __swift_project_value_buffer(v0, (uint64_t)qword_26B176898);
  return sub_24A2A7150();
}

uint64_t CryptexPolicy.init(_:locked:fallback:)@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  *(void *)a3 = result;
  *(unsigned char *)(a3 + 8) = a2;
  return result;
}

uint64_t CryptexPolicy.init(_:locked:)@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  *(void *)a3 = result;
  *(unsigned char *)(a3 + 8) = a2;
  return result;
}

uint64_t CryptexPolicy.init(locked:fallback:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 8) = result;
  return result;
}

uint64_t CryptexPolicy.evaluate(bundle:context:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v3 + 24) = a1;
  *(void *)(v3 + 32) = a2;
  type metadata accessor for SEP.SealedHash.Value(0);
  *(void *)(v3 + 40) = swift_task_alloc();
  *(void *)(v3 + 48) = swift_task_alloc();
  uint64_t v4 = type metadata accessor for SEP.SealedHash(0);
  *(void *)(v3 + 56) = v4;
  *(void *)(v3 + 64) = *(void *)(v4 - 8);
  *(void *)(v3 + 72) = swift_task_alloc();
  *(void *)(v3 + 80) = swift_task_alloc();
  *(void *)(v3 + 88) = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1748C0);
  *(void *)(v3 + 96) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B1748B8);
  *(void *)(v3 + 104) = swift_task_alloc();
  *(void *)(v3 + 112) = swift_task_alloc();
  *(void *)(v3 + 120) = swift_task_alloc();
  uint64_t v5 = swift_task_alloc();
  uint64_t v6 = *v2;
  *(void *)(v3 + 128) = v5;
  *(void *)(v3 + 136) = v6;
  *(unsigned char *)(v3 + 148) = *((unsigned char *)v2 + 8);
  return MEMORY[0x270FA2498](sub_24A2541D4, 0, 0);
}

uint64_t sub_24A2541D4()
{
  uint64_t v127 = v0;
  unint64_t v1 = *(void *)(v0 + 136);
  if (!v1)
  {
    uint64_t v123 = **(void **)(v0 + 32);
    AttestationPolicyContext.validatedAttestation.getter((uint64_t)&v119);
    uint64_t v2 = v119;
    unint64_t v3 = v120;
    uint64_t v4 = v121;
    unint64_t v5 = v122;
    uint64_t v123 = v119;
    unint64_t v124 = v120;
    uint64_t v125 = v121;
    unint64_t v126 = v122;
    unint64_t v1 = sub_24A255F54(&v123);
    sub_24A211D18(v2, v3, v4, v5);
    if (!v1) {
      unint64_t v1 = sub_24A1BBC78(MEMORY[0x263F8EE78]);
    }
  }
  uint64_t v6 = qword_26B174348;
  swift_bridgeObjectRetain();
  if (v6 != -1) {
    swift_once();
  }
  uint64_t v7 = sub_24A2A6C00();
  uint64_t v8 = __swift_project_value_buffer(v7, (uint64_t)qword_26B174330);
  uint64_t v9 = *(void *)(v7 - 8);
  uint64_t v10 = swift_task_alloc();
  uint64_t v118 = v8;
  int v115 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
  v115(v10, v8, v7);
  if (*(void *)(v1 + 16))
  {
    unint64_t v11 = sub_24A1BE878(v10);
    uint64_t v12 = *(void *)(v0 + 128);
    uint64_t v13 = *(void *)(v0 + 56);
    uint64_t v14 = *(void *)(v0 + 64);
    if (v15)
    {
      sub_24A2564A0(*(void *)(v1 + 56) + *(void *)(v14 + 72) * v11, *(void *)(v0 + 128), type metadata accessor for SEP.SealedHash);
      unint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
      v16(v12, 0, 1, v13);
    }
    else
    {
      unint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
      v16(*(void *)(v0 + 128), 1, 1, v13);
    }
  }
  else
  {
    unint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 64) + 56);
    v16(*(void *)(v0 + 128), 1, 1, *(void *)(v0 + 56));
  }
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v7);
  swift_task_dealloc();
  sub_24A24A3E0(v118, 0, &v123);
  uint64_t v17 = v123;
  int v18 = v124;
  if (v124 != 255)
  {
    uint64_t v19 = *(void *)(v0 + 128);
    uint64_t v20 = *(void *)(v0 + 56);
    goto LABEL_13;
  }
  uint64_t v117 = v123;
  if (qword_269778558 != -1) {
    swift_once();
  }
  uint64_t v42 = *(void *)(v0 + 120);
  uint64_t v41 = *(void *)(v0 + 128);
  uint64_t v43 = *(void *)(v0 + 88);
  uint64_t v44 = *(void *)(v0 + 96);
  uint64_t v46 = *(void *)(v0 + 56);
  uint64_t v45 = *(void *)(v0 + 64);
  uint64_t v47 = __swift_project_value_buffer(v46, (uint64_t)qword_2697799E0);
  sub_24A2564A0(v47, v42, type metadata accessor for SEP.SealedHash);
  v16(v42, 0, 1, v46);
  uint64_t v48 = v44 + *(int *)(v43 + 48);
  sub_24A2563EC(v41, v44);
  sub_24A2563EC(v42, v48);
  unint64_t v49 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v45 + 48);
  if (v49(v44, 1, v46) == 1)
  {
    uint64_t v50 = *(void *)(v0 + 56);
    sub_24A1B2D10(*(void *)(v0 + 120), &qword_26B1748B8);
    if (v49(v48, 1, v50) == 1)
    {
      sub_24A1B2D10(*(void *)(v0 + 96), &qword_26B1748B8);
      char v51 = 1;
      goto LABEL_55;
    }
    goto LABEL_36;
  }
  uint64_t v52 = *(void *)(v0 + 56);
  sub_24A2563EC(*(void *)(v0 + 96), *(void *)(v0 + 112));
  if (v49(v48, 1, v52) == 1)
  {
    uint64_t v53 = *(void *)(v0 + 112);
    sub_24A1B2D10(*(void *)(v0 + 120), &qword_26B1748B8);
    sub_24A257468(v53, type metadata accessor for SEP.SealedHash);
LABEL_36:
    sub_24A1B2D10(*(void *)(v0 + 96), &qword_26B1748C0);
    char v51 = 0;
    goto LABEL_55;
  }
  uint64_t v64 = *(unsigned __int8 **)(v0 + 112);
  uint64_t v65 = *(unsigned __int8 **)(v0 + 80);
  sub_24A257C54(v48, (uint64_t)v65, type metadata accessor for SEP.SealedHash);
  if (*v64 == *v65)
  {
    uint64_t v66 = sub_24A1B4AA0();
    unint64_t v68 = v67;
    uint64_t v69 = sub_24A1B4AA0();
    unint64_t v71 = v70;
    char v51 = sub_24A1B7D80(v66, v68, v69, v70);
    sub_24A1A5384(v69, v71);
    sub_24A1A5384(v66, v68);
  }
  else
  {
    char v51 = 0;
  }
  uint64_t v95 = *(void *)(v0 + 112);
  uint64_t v94 = *(void *)(v0 + 120);
  uint64_t v96 = *(void *)(v0 + 96);
  sub_24A257468(*(void *)(v0 + 80), type metadata accessor for SEP.SealedHash);
  sub_24A1B2D10(v94, &qword_26B1748B8);
  sub_24A257468(v95, type metadata accessor for SEP.SealedHash);
  sub_24A1B2D10(v96, &qword_26B1748B8);
LABEL_55:
  uint64_t v17 = v117;
  uint64_t v19 = *(void *)(v0 + 128);
  uint64_t v20 = *(void *)(v0 + 56);
  if (v49(v19, 1, v20) == 1)
  {
    int v18 = 255;
    if ((*(unsigned char *)(v0 + 148) & 1) == 0) {
      goto LABEL_65;
    }
    goto LABEL_59;
  }
  int v18 = 255;
  if (*(unsigned char *)(v0 + 148))
  {
LABEL_59:
    if (v51)
    {
      if (qword_26B174350 != -1) {
        swift_once();
      }
      uint64_t v97 = sub_24A2A7160();
      __swift_project_value_buffer(v97, (uint64_t)qword_26B176898);
      uint64_t v98 = sub_24A2A7140();
      os_log_type_t v99 = sub_24A2A7B30();
      if (!os_log_type_enabled(v98, v99)) {
        goto LABEL_70;
      }
      uint64_t v100 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v100 = 0;
      uint64_t v101 = "Device has no cryptexes installed, and is in cryptex lockdown";
      goto LABEL_69;
    }
    goto LABEL_13;
  }
  if (v51)
  {
LABEL_65:
    if (qword_26B174350 != -1) {
      swift_once();
    }
    uint64_t v102 = sub_24A2A7160();
    __swift_project_value_buffer(v102, (uint64_t)qword_26B176898);
    uint64_t v98 = sub_24A2A7140();
    os_log_type_t v99 = sub_24A2A7B30();
    if (!os_log_type_enabled(v98, v99)) {
      goto LABEL_70;
    }
    uint64_t v100 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v100 = 0;
    uint64_t v101 = "Device has no cryptexes installed";
LABEL_69:
    _os_log_impl(&dword_24A19F000, v98, v99, v101, v100, 2u);
    MEMORY[0x24C5C00A0](v100, -1, -1);
LABEL_70:
    uint64_t v29 = *(void *)(v0 + 128);

    goto LABEL_76;
  }
LABEL_13:
  uint64_t v21 = *(void *)(v0 + 104);
  uint64_t v22 = *(void *)(v0 + 64);
  sub_24A2563EC(v19, v21);
  int v23 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))(v21, 1, v20);
  uint64_t v24 = *(void *)(v0 + 104);
  if (v23 == 1)
  {
    sub_24A1EA164(v17, v18);
    sub_24A1B2D10(v24, &qword_26B1748B8);
    if (qword_26B174350 != -1) {
      swift_once();
    }
    uint64_t v25 = sub_24A2A7160();
    __swift_project_value_buffer(v25, (uint64_t)qword_26B176898);
    char v26 = sub_24A2A7140();
    os_log_type_t v27 = sub_24A2A7B30();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v28 = 0;
      _os_log_impl(&dword_24A19F000, v26, v27, "Missing cryptex sealed hash slot from SEP Attestation", v28, 2u);
      MEMORY[0x24C5C00A0](v28, -1, -1);
    }
    uint64_t v29 = *(void *)(v0 + 128);

    type metadata accessor for CryptexPolicy.Error();
    sub_24A256508(&qword_269779A00, (void (*)(uint64_t))type metadata accessor for CryptexPolicy.Error);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    goto LABEL_76;
  }
  sub_24A257C54(*(void *)(v0 + 104), *(void *)(v0 + 72), type metadata accessor for SEP.SealedHash);
  if (v18 == 255)
  {
    if (qword_26B174350 != -1) {
      swift_once();
    }
    uint64_t v54 = sub_24A2A7160();
    __swift_project_value_buffer(v54, (uint64_t)qword_26B176898);
    uint64_t v55 = sub_24A2A7140();
    os_log_type_t v56 = sub_24A2A7B30();
    if (os_log_type_enabled(v55, v56))
    {
      unint64_t v57 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v57 = 0;
      _os_log_impl(&dword_24A19F000, v55, v56, "Missing cryptex ledger from SecureConfigDB", v57, 2u);
      MEMORY[0x24C5C00A0](v57, -1, -1);
    }
    uint64_t v29 = *(void *)(v0 + 128);
    uint64_t v58 = *(void *)(v0 + 72);
    uint64_t v59 = *(void *)(v0 + 56);

    type metadata accessor for CryptexPolicy.Error();
    sub_24A256508(&qword_269779A00, (void (*)(uint64_t))type metadata accessor for CryptexPolicy.Error);
    swift_allocError();
    uint64_t v61 = v60;
    uint64_t v62 = v60 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_269779A08) + 48);
    v115(v61, v118, v7);
    sub_24A2564A0(v58 + *(int *)(v59 + 20), v62, type metadata accessor for SEP.SealedHash.Value);
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    uint64_t v63 = v58;
    goto LABEL_75;
  }
  uint64_t v116 = v17;
  char v30 = **(unsigned char **)(v0 + 72);
  if (qword_26B174350 != -1) {
    swift_once();
  }
  unsigned int v31 = v30 & 4;
  uint64_t v32 = sub_24A2A7160();
  __swift_project_value_buffer(v32, (uint64_t)qword_26B176898);
  unint64_t v33 = sub_24A2A7140();
  os_log_type_t v34 = sub_24A2A7B40();
  if (os_log_type_enabled(v33, v34))
  {
    uint64_t v35 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v35 = 67109120;
    *(_DWORD *)(v0 + 144) = v31 >> 2;
    sub_24A2A7B70();
    _os_log_impl(&dword_24A19F000, v33, v34, "Observed Cryptex Lockdown State: %{BOOL}d", v35, 8u);
    MEMORY[0x24C5C00A0](v35, -1, -1);
  }
  int v36 = v18 & 1;

  if (*(unsigned char *)(v0 + 148) == 1)
  {
    if ((v36 != 0) != (v31 != 0))
    {
      unsigned int v37 = v31;
      sub_24A1EA164(v116, v18);
      unint64_t v38 = sub_24A2A7140();
      os_log_type_t v39 = sub_24A2A7B30();
      if (os_log_type_enabled(v38, v39))
      {
        unint64_t v40 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v40 = 0;
        _os_log_impl(&dword_24A19F000, v38, v39, "Cryptex Log and SEP Attestation's Sealed Hash have inconsistent lock states", v40, 2u);
        MEMORY[0x24C5C00A0](v40, -1, -1);
      }
LABEL_73:
      uint64_t v29 = *(void *)(v0 + 128);
      uint64_t v105 = *(void *)(v0 + 72);

      type metadata accessor for CryptexPolicy.Error();
      sub_24A256508(&qword_269779A00, (void (*)(uint64_t))type metadata accessor for CryptexPolicy.Error);
      swift_allocError();
      *uint64_t v106 = v36;
      v106[1] = v37 >> 2;
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
LABEL_74:
      uint64_t v63 = v105;
LABEL_75:
      sub_24A257468(v63, type metadata accessor for SEP.SealedHash);
      goto LABEL_76;
    }
    if ((v18 & 1) == 0 || !v31)
    {
      unsigned int v37 = v31;
      sub_24A1EA164(v116, v18);
      unint64_t v38 = sub_24A2A7140();
      os_log_type_t v103 = sub_24A2A7B30();
      if (os_log_type_enabled(v38, v103))
      {
        char v104 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)char v104 = 0;
        _os_log_impl(&dword_24A19F000, v38, v103, "Cryptex slot is unexpectedly unlocked", v104, 2u);
        MEMORY[0x24C5C00A0](v104, -1, -1);
      }
      goto LABEL_73;
    }
  }
  uint64_t v72 = sub_24A249F74();
  if (v72)
  {
    uint64_t v74 = v72;
  }
  else
  {
    uint64_t v74 = sub_24A2A7390();
    uint64_t v73 = sub_24A256508((unint64_t *)&qword_26B174A18, MEMORY[0x263F04808]);
  }
  uint64_t v75 = *(void *)(v0 + 40);
  uint64_t v123 = v116;
  LOBYTE(v124) = v36 != 0;
  sub_24A249660(v74, v73, 0xF000000000000000, v75);
  uint64_t v76 = *(void *)(v0 + 72);
  char v77 = v18;
  uint64_t v78 = *(void *)(v0 + 48);
  uint64_t v79 = *(void *)(v0 + 56);
  uint64_t v80 = *(void *)(v0 + 40);
  sub_24A1EA164(v116, v77);
  sub_24A257C54(v80, v78, type metadata accessor for SEP.SealedHash.Value);
  uint64_t v81 = v76 + *(int *)(v79 + 20);
  uint64_t v82 = sub_24A1B4AA0();
  unint64_t v84 = v83;
  uint64_t v85 = sub_24A1B4AA0();
  unint64_t v87 = v86;
  char v88 = sub_24A1B7D80(v82, v84, v85, v86);
  sub_24A1A5384(v85, v87);
  sub_24A1A5384(v82, v84);
  uint64_t v89 = sub_24A2A7140();
  if ((v88 & 1) == 0)
  {
    os_log_type_t v109 = sub_24A2A7B30();
    if (os_log_type_enabled(v89, v109))
    {
      char v110 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v110 = 0;
      _os_log_impl(&dword_24A19F000, v89, v109, "Cryptex log from SecureConfigDB did not replay against SEP Attestation's Sealed Hash", v110, 2u);
      MEMORY[0x24C5C00A0](v110, -1, -1);
    }
    uint64_t v29 = *(void *)(v0 + 128);
    uint64_t v105 = *(void *)(v0 + 72);
    uint64_t v111 = *(void *)(v0 + 48);

    type metadata accessor for CryptexPolicy.Error();
    sub_24A256508(&qword_269779A00, (void (*)(uint64_t))type metadata accessor for CryptexPolicy.Error);
    swift_allocError();
    uint64_t v113 = v112;
    uint64_t v114 = v112 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_269779A10) + 48);
    sub_24A2564A0(v111, v113, type metadata accessor for SEP.SealedHash.Value);
    sub_24A2564A0(v81, v114, type metadata accessor for SEP.SealedHash.Value);
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    sub_24A257468(v111, type metadata accessor for SEP.SealedHash.Value);
    goto LABEL_74;
  }
  os_log_type_t v90 = sub_24A2A7B40();
  if (os_log_type_enabled(v89, v90))
  {
    uint64_t v91 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v91 = 0;
    _os_log_impl(&dword_24A19F000, v89, v90, "AttestationBundle passed CryptexPolicy: reported cryptexes match SEP attestation", v91, 2u);
    MEMORY[0x24C5C00A0](v91, -1, -1);
  }
  uint64_t v29 = *(void *)(v0 + 128);
  uint64_t v92 = *(void *)(v0 + 72);
  uint64_t v93 = *(void *)(v0 + 48);

  sub_24A257468(v93, type metadata accessor for SEP.SealedHash.Value);
  sub_24A257468(v92, type metadata accessor for SEP.SealedHash);
LABEL_76:
  sub_24A1B2D10(v29, &qword_26B1748B8);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v107 = *(uint64_t (**)(void))(v0 + 8);
  return v107();
}

uint64_t sub_24A2554DC(uint64_t a1, uint64_t a2)
{
  unint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *unint64_t v5 = v2;
  v5[1] = sub_24A1C50FC;
  return CryptexPolicy.evaluate(bundle:context:)(a1, a2);
}

uint64_t sub_24A255580()
{
  uint64_t v0 = type metadata accessor for SEP.SealedHash(0);
  __swift_allocate_value_buffer(v0, qword_2697799E0);
  unint64_t v1 = (unsigned char *)__swift_project_value_buffer(v0, (uint64_t)qword_2697799E0);
  sub_24A2A6920();
  swift_allocObject();
  uint64_t v7 = 0x3000000000;
  uint64_t v8 = sub_24A2A68F0();
  sub_24A255EC0((int *)&v7, 0);
  uint64_t v2 = v7;
  int v3 = byte_26FDFBFB1;
  if ((byte_26FDFBFB1 & ~byte_26FDFBFB0) == 0) {
    int v3 = 0;
  }
  int v4 = v3 | byte_26FDFBFB0;
  char v5 = byte_26FDFBFB2;
  if ((byte_26FDFBFB2 & ~v4) == 0) {
    char v5 = 0;
  }
  LOBYTE(v7) = v5 | v4;
  return SEP.SealedHash.init(digest:flags:)(v2, v8 | 0x4000000000000000, (char *)&v7, v1);
}

_OWORD *sub_24A255680(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v7 = (void **)v6;
  uint64_t v14 = (void *)*v6;
  unint64_t v16 = sub_24A1BE7EC(a2, a3, a4, a5);
  uint64_t v17 = v14[2];
  BOOL v18 = (v15 & 1) == 0;
  uint64_t v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v20 = v15;
  uint64_t v21 = v14[3];
  if (v21 < v19 || (a6 & 1) == 0)
  {
    if (v21 >= v19 && (a6 & 1) == 0)
    {
      sub_24A25C804();
      goto LABEL_7;
    }
    sub_24A1E5FAC(v19, a6 & 1);
    unint64_t v25 = sub_24A1BE7EC(a2, a3, a4, a5);
    if ((v20 & 1) == (v26 & 1))
    {
      unint64_t v16 = v25;
      uint64_t v22 = *v7;
      if (v20) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = (_OWORD *)sub_24A2A7E80();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v22 = *v7;
  if (v20)
  {
LABEL_8:
    int v23 = (_OWORD *)(v22[7] + 32 * v16);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
    return sub_24A1BFBE4(a1, v23);
  }
LABEL_13:
  sub_24A255CB0(v16, a2, a3, a4, a5, a1, v22);

  return (_OWORD *)swift_bridgeObjectRetain();
}

uint64_t sub_24A255800(uint64_t a1, uint64_t a2, char a3)
{
  int v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = sub_24A1BE878(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 >= v13 && (a3 & 1) != 0)
  {
LABEL_7:
    unint64_t v16 = *v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = v16[7];
      uint64_t v18 = type metadata accessor for SEP.SealedHash(0);
      return sub_24A257BEC(a1, v17 + *(void *)(*(void *)(v18 - 8) + 72) * v10, type metadata accessor for SEP.SealedHash);
    }
    goto LABEL_11;
  }
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    sub_24A25C9E4();
    goto LABEL_7;
  }
  sub_24A1E62B4(v13, a3 & 1);
  unint64_t v20 = sub_24A1BE878(a2);
  if ((v14 & 1) != (v21 & 1))
  {
LABEL_14:
    sub_24A2A6C00();
    uint64_t result = sub_24A2A7E80();
    __break(1u);
    return result;
  }
  unint64_t v10 = v20;
  unint64_t v16 = *v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:
  uint64_t v22 = sub_24A2A6C00();
  MEMORY[0x270FA5388](v22);
  uint64_t v24 = (char *)&v26 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v25 + 16))(v24, a2);
  return sub_24A255D24(v10, (uint64_t)v24, a1, v16);
}

uint64_t sub_24A2559D4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  char v5 = (void **)v4;
  unint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_24A1BE668(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 >= v15 && (a4 & 1) != 0)
  {
LABEL_7:
    uint64_t v18 = *v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];
      uint64_t v20 = type metadata accessor for Proto_SealedHash(0);
      return sub_24A257BEC(a1, v19 + *(void *)(*(void *)(v20 - 8) + 72) * v12, type metadata accessor for Proto_SealedHash);
    }
    goto LABEL_11;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_24A25D21C();
    goto LABEL_7;
  }
  sub_24A1E7184(v15, a4 & 1);
  unint64_t v22 = sub_24A1BE668(a2, a3);
  if ((v16 & 1) != (v23 & 1))
  {
LABEL_15:
    uint64_t result = sub_24A2A7E80();
    __break(1u);
    return result;
  }
  unint64_t v12 = v22;
  uint64_t v18 = *v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  sub_24A255E14(v12, a2, a3, a1, v18);

  return swift_bridgeObjectRetain();
}

uint64_t sub_24A255B40(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  char v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_24A1BE668(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_24A25D4B0();
LABEL_7:
    uint64_t v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v19 + 8 * v12) = a1;
      return result;
    }
    goto LABEL_11;
  }
  sub_24A1E7564(v15, a4 & 1);
  unint64_t v21 = sub_24A1BE668(a2, a3);
  if ((v16 & 1) != (v22 & 1))
  {
LABEL_17:
    uint64_t result = sub_24A2A7E80();
    __break(1u);
    return result;
  }
  unint64_t v12 = v21;
  uint64_t v18 = (void *)*v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  v18[(v12 >> 6) + 8] |= 1 << v12;
  char v23 = (uint64_t *)(v18[6] + 16 * v12);
  *char v23 = a2;
  v23[1] = a3;
  *(void *)(v18[7] + 8 * v12) = a1;
  uint64_t v24 = v18[2];
  BOOL v25 = __OFADD__(v24, 1);
  uint64_t v26 = v24 + 1;
  if (v25)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v18[2] = v26;

  return swift_bridgeObjectRetain();
}

_OWORD *sub_24A255CB0(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _OWORD *a6, void *a7)
{
  a7[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = (void *)(a7[6] + 32 * a1);
  *uint64_t v8 = a2;
  v8[1] = a3;
  v8[2] = a4;
  v8[3] = a5;
  uint64_t result = sub_24A1BFBE4(a6, (_OWORD *)(a7[7] + 32 * a1));
  uint64_t v10 = a7[2];
  BOOL v11 = __OFADD__(v10, 1);
  uint64_t v12 = v10 + 1;
  if (v11) {
    __break(1u);
  }
  else {
    a7[2] = v12;
  }
  return result;
}

uint64_t sub_24A255D24(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = sub_24A2A6C00();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  uint64_t v10 = a4[7];
  uint64_t v11 = type metadata accessor for SEP.SealedHash(0);
  uint64_t result = sub_24A257C54(a3, v10 + *(void *)(*(void *)(v11 - 8) + 72) * a1, type metadata accessor for SEP.SealedHash);
  uint64_t v13 = a4[2];
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    a4[2] = v15;
  }
  return result;
}

uint64_t sub_24A255E14(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = (void *)(a5[6] + 16 * a1);
  *uint64_t v8 = a2;
  v8[1] = a3;
  uint64_t v9 = a5[7];
  uint64_t v10 = type metadata accessor for Proto_SealedHash(0);
  uint64_t result = sub_24A257C54(a4, v9 + *(void *)(*(void *)(v10 - 8) + 72) * a1, type metadata accessor for Proto_SealedHash);
  uint64_t v12 = a5[2];
  BOOL v13 = __OFADD__(v12, 1);
  uint64_t v14 = v12 + 1;
  if (v13) {
    __break(1u);
  }
  else {
    a5[2] = v14;
  }
  return result;
}

char *sub_24A255EC0(int *a1, int a2)
{
  uint64_t result = (char *)sub_24A2A6A10();
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  if ((int)v6 < (int)v5)
  {
    __break(1u);
    goto LABEL_11;
  }
  uint64_t result = (char *)sub_24A2A68E0();
  if (!result)
  {
LABEL_12:
    __break(1u);
    return result;
  }
  uint64_t v7 = result;
  uint64_t result = (char *)sub_24A2A6910();
  uint64_t v8 = v5 - (void)result;
  if (__OFSUB__(v5, result))
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  int64_t v9 = v6 - v5;
  uint64_t v10 = sub_24A2A6900();
  if (v10 >= v9) {
    size_t v11 = v9;
  }
  else {
    size_t v11 = v10;
  }

  return (char *)memset(&v7[v8], a2, v11);
}

unint64_t sub_24A255F54(uint64_t *a1)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1748B8);
  MEMORY[0x270FA5388](v2 - 8);
  int v4 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for SEP.SealedHash(0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v8 = MEMORY[0x270FA5388](v7);
  uint64_t v11 = 0;
  unint64_t v12 = a1[1];
  if (v12 >> 60 != 15)
  {
    uint64_t v39 = v8;
    uint64_t v35 = v10;
    uint64_t v36 = (uint64_t)&v32 - v9;
    uint64_t v13 = *a1;
    unint64_t v14 = a1[3];
    uint64_t v15 = a1[2];
    uint64_t v41 = v13;
    sub_24A1A52B0(v13, v12);
    unint64_t v42 = v14;
    sub_24A1A52B0(v15, v14);
    unint64_t v40 = sub_24A1BBC78(MEMORY[0x263F8EE78]);
    if (qword_26B174348 != -1) {
      swift_once();
    }
    uint64_t v16 = sub_24A2A6C00();
    uint64_t v17 = __swift_project_value_buffer(v16, (uint64_t)qword_26B174330);
    unsigned int v37 = &v32;
    uint64_t v18 = *(void **)(v16 - 8);
    uint64_t v19 = v18[8];
    MEMORY[0x270FA5388](v17);
    unint64_t v32 = (v19 + 15) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v20 = (char *)&v32 - v32;
    unint64_t v21 = (void (*)(char *, uint64_t, uint64_t))v18[2];
    uint64_t v34 = v22;
    unint64_t v33 = v21;
    uint64_t v23 = ((uint64_t (*)(char *))v21)((char *)&v32 - v32);
    memset(v43, 0, 86);
    MEMORY[0x270FA5388](v23);
    *(&v32 - 2) = (unint64_t)v20;
    *(&v32 - 1) = (unint64_t)v43;
    uint64_t v38 = v15;
    sub_24A1EDF2C((void (*)(uint64_t))sub_24A1F0A7C, (uint64_t)(&v32 - 4), v41, v12, v15, v42);
    uint64_t v24 = (void (*)(char *, uint64_t))v18[1];
    v24(v20, v16);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v39) == 1)
    {
      sub_24A211D18(v41, v12, v38, v42);
      sub_24A1B2D10((uint64_t)v4, &qword_26B1748B8);
      return v40;
    }
    else
    {
      uint64_t v25 = v36;
      uint64_t v26 = sub_24A257C54((uint64_t)v4, v36, type metadata accessor for SEP.SealedHash);
      MEMORY[0x270FA5388](v26);
      os_log_type_t v27 = (char *)&v32 - v32;
      v33((char *)&v32 - v32, v34, v16);
      uint64_t v28 = v35;
      sub_24A2564A0(v25, v35, type metadata accessor for SEP.SealedHash);
      unint64_t v29 = v40;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(void *)&v43[0] = v29;
      sub_24A255800(v28, (uint64_t)v27, isUniquelyReferenced_nonNull_native);
      uint64_t v11 = *(void *)&v43[0];
      swift_bridgeObjectRelease();
      v24(v27, v16);
      sub_24A211D18(v41, v12, v38, v42);
      sub_24A257468(v25, type metadata accessor for SEP.SealedHash);
    }
  }
  return v11;
}

uint64_t sub_24A2563EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1748B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for CryptexPolicy.Error()
{
  uint64_t result = qword_269779A20;
  if (!qword_269779A20) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_24A2564A0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_24A256508(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t assignWithCopy for CryptexPolicy(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  return a1;
}

uint64_t assignWithTake for CryptexPolicy(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for CryptexPolicy(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 9)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CryptexPolicy(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CryptexPolicy()
{
  return &type metadata for CryptexPolicy;
}

uint64_t *initializeBufferWithCopyOfBuffer for CryptexPolicy.Error(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v7 = sub_24A2A6C00();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
        uint64_t v8 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_269779A08) + 48);
        uint64_t v9 = (uint64_t *)((char *)a1 + v8);
        uint64_t v10 = (uint64_t *)((char *)a2 + v8);
        type metadata accessor for SEP.SealedHash.Value(0);
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
        {
          uint64_t v13 = *v10;
          unint64_t v12 = v10[1];
          sub_24A1A52B0(v13, v12);
          *uint64_t v9 = v13;
          v9[1] = v12;
        }
        else
        {
          uint64_t v25 = sub_24A2A7390();
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v25 - 8) + 16))(v9, v10, v25);
        }
        goto LABEL_16;
      case 3u:
        uint64_t v16 = *a2;
        unint64_t v17 = a2[1];
        sub_24A1A52B0(*a2, v17);
        *a1 = v16;
        a1[1] = v17;
        uint64_t v19 = a2[2];
        unint64_t v18 = a2[3];
        sub_24A1A52B0(v19, v18);
        a1[2] = v19;
        a1[3] = v18;
        swift_storeEnumTagMultiPayload();
        break;
      case 4u:
        type metadata accessor for SEP.SealedHash.Value(0);
        int v20 = swift_getEnumCaseMultiPayload();
        if (v20 == 2 || v20 == 1)
        {
          uint64_t v21 = *a2;
          unint64_t v22 = a2[1];
          sub_24A1A52B0(*a2, v22);
          *a1 = v21;
          a1[1] = v22;
        }
        else
        {
          uint64_t v26 = sub_24A2A7390();
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v26 - 8) + 16))(a1, a2, v26);
        }
        swift_storeEnumTagMultiPayload();
        uint64_t v27 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_269779A10) + 48);
        uint64_t v28 = (uint64_t *)((char *)a1 + v27);
        unint64_t v29 = (uint64_t *)((char *)a2 + v27);
        int v30 = swift_getEnumCaseMultiPayload();
        if (v30 == 2 || v30 == 1)
        {
          uint64_t v32 = *v29;
          unint64_t v31 = v29[1];
          sub_24A1A52B0(v32, v31);
          *uint64_t v28 = v32;
          v28[1] = v31;
        }
        else
        {
          uint64_t v33 = sub_24A2A7390();
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v33 - 8) + 16))(v28, v29, v33);
        }
LABEL_16:
        swift_storeEnumTagMultiPayload();
        swift_storeEnumTagMultiPayload();
        break;
      case 5u:
        uint64_t v23 = (void *)*a2;
        id v24 = v23;
        *a1 = (uint64_t)v23;
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(v6 + 64));
        break;
    }
  }
  return a1;
}

void destroy for CryptexPolicy.Error(uint64_t *a1)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v2 = sub_24A2A6C00();
      (*(void (**)(uint64_t *, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
      uint64_t v3 = (uint64_t *)((char *)a1 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_269779A08) + 48));
      type metadata accessor for SEP.SealedHash.Value(0);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1) {
        goto LABEL_21;
      }
      if (!EnumCaseMultiPayload) {
        goto LABEL_5;
      }
      break;
    case 3u:
      sub_24A1A5384(*a1, a1[1]);
      uint64_t v9 = a1[2];
      unint64_t v10 = a1[3];
      goto LABEL_22;
    case 4u:
      type metadata accessor for SEP.SealedHash.Value(0);
      int v7 = swift_getEnumCaseMultiPayload();
      if (v7 == 2 || v7 == 1)
      {
        sub_24A1A5384(*a1, a1[1]);
      }
      else if (!v7)
      {
        uint64_t v8 = sub_24A2A7390();
        (*(void (**)(uint64_t *, uint64_t))(*(void *)(v8 - 8) + 8))(a1, v8);
      }
      uint64_t v3 = (uint64_t *)((char *)a1 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_269779A10) + 48));
      int v12 = swift_getEnumCaseMultiPayload();
      if (v12 == 2 || v12 == 1)
      {
LABEL_21:
        uint64_t v9 = *v3;
        unint64_t v10 = v3[1];
LABEL_22:
        sub_24A1A5384(v9, v10);
      }
      else if (!v12)
      {
LABEL_5:
        uint64_t v5 = sub_24A2A7390();
        uint64_t v6 = *(void (**)(uint64_t *, uint64_t))(*(void *)(v5 - 8) + 8);
        v6(v3, v5);
      }
      break;
    case 5u:
      uint64_t v11 = (void *)*a1;

      break;
    default:
      return;
  }
}

uint64_t *initializeWithCopy for CryptexPolicy.Error(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v6 = sub_24A2A6C00();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      uint64_t v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_269779A08) + 48);
      uint64_t v8 = (uint64_t *)((char *)a1 + v7);
      uint64_t v9 = (uint64_t *)((char *)a2 + v7);
      type metadata accessor for SEP.SealedHash.Value(0);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
      {
        uint64_t v12 = *v9;
        unint64_t v11 = v9[1];
        sub_24A1A52B0(v12, v11);
        *uint64_t v8 = v12;
        v8[1] = v11;
      }
      else
      {
        uint64_t v22 = sub_24A2A7390();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v22 - 8) + 16))(v8, v9, v22);
      }
      goto LABEL_20;
    case 3u:
      uint64_t v13 = *a2;
      unint64_t v14 = a2[1];
      sub_24A1A52B0(*a2, v14);
      *a1 = v13;
      a1[1] = v14;
      uint64_t v16 = a2[2];
      unint64_t v15 = a2[3];
      sub_24A1A52B0(v16, v15);
      a1[2] = v16;
      a1[3] = v15;
      goto LABEL_21;
    case 4u:
      type metadata accessor for SEP.SealedHash.Value(0);
      int v17 = swift_getEnumCaseMultiPayload();
      if (v17 == 2 || v17 == 1)
      {
        uint64_t v18 = *a2;
        unint64_t v19 = a2[1];
        sub_24A1A52B0(*a2, v19);
        *a1 = v18;
        a1[1] = v19;
      }
      else
      {
        uint64_t v23 = sub_24A2A7390();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v23 - 8) + 16))(a1, a2, v23);
      }
      swift_storeEnumTagMultiPayload();
      uint64_t v24 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_269779A10) + 48);
      uint64_t v25 = (uint64_t *)((char *)a1 + v24);
      uint64_t v26 = (uint64_t *)((char *)a2 + v24);
      int v27 = swift_getEnumCaseMultiPayload();
      if (v27 == 2 || v27 == 1)
      {
        uint64_t v29 = *v26;
        unint64_t v28 = v26[1];
        sub_24A1A52B0(v29, v28);
        *uint64_t v25 = v29;
        v25[1] = v28;
      }
      else
      {
        uint64_t v30 = sub_24A2A7390();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v30 - 8) + 16))(v25, v26, v30);
      }
LABEL_20:
      swift_storeEnumTagMultiPayload();
      goto LABEL_21;
    case 5u:
      int v20 = (void *)*a2;
      id v21 = v20;
      *a1 = (uint64_t)v20;
LABEL_21:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

uint64_t *assignWithCopy for CryptexPolicy.Error(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_24A257468((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for CryptexPolicy.Error);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v6 = sub_24A2A6C00();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
        uint64_t v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_269779A08) + 48);
        uint64_t v8 = (uint64_t *)((char *)a1 + v7);
        uint64_t v9 = (uint64_t *)((char *)a2 + v7);
        type metadata accessor for SEP.SealedHash.Value(0);
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
        {
          uint64_t v12 = *v9;
          unint64_t v11 = v9[1];
          sub_24A1A52B0(v12, v11);
          *uint64_t v8 = v12;
          v8[1] = v11;
        }
        else
        {
          uint64_t v30 = sub_24A2A7390();
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v30 - 8) + 16))(v8, v9, v30);
        }
        goto LABEL_21;
      case 3u:
        uint64_t v13 = *a2;
        unint64_t v14 = a2[1];
        sub_24A1A52B0(*a2, v14);
        *a1 = v13;
        a1[1] = v14;
        uint64_t v16 = a2[2];
        unint64_t v15 = a2[3];
        sub_24A1A52B0(v16, v15);
        a1[2] = v16;
        a1[3] = v15;
        goto LABEL_22;
      case 4u:
        type metadata accessor for SEP.SealedHash.Value(0);
        int v17 = swift_getEnumCaseMultiPayload();
        if (v17 == 2 || v17 == 1)
        {
          uint64_t v18 = *a2;
          unint64_t v19 = a2[1];
          sub_24A1A52B0(*a2, v19);
          *a1 = v18;
          a1[1] = v19;
        }
        else
        {
          uint64_t v22 = sub_24A2A7390();
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v22 - 8) + 16))(a1, a2, v22);
        }
        swift_storeEnumTagMultiPayload();
        uint64_t v23 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_269779A10) + 48);
        uint64_t v24 = (uint64_t *)((char *)a1 + v23);
        uint64_t v25 = (uint64_t *)((char *)a2 + v23);
        int v26 = swift_getEnumCaseMultiPayload();
        if (v26 == 2 || v26 == 1)
        {
          uint64_t v28 = *v25;
          unint64_t v27 = v25[1];
          sub_24A1A52B0(v28, v27);
          *uint64_t v24 = v28;
          v24[1] = v27;
        }
        else
        {
          uint64_t v29 = sub_24A2A7390();
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v29 - 8) + 16))(v24, v25, v29);
        }
LABEL_21:
        swift_storeEnumTagMultiPayload();
        goto LABEL_22;
      case 5u:
        int v20 = (void *)*a2;
        id v21 = v20;
        *a1 = (uint64_t)v20;
LABEL_22:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t sub_24A257468(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

char *initializeWithTake for CryptexPolicy.Error(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 4)
  {
    uint64_t v12 = type metadata accessor for SEP.SealedHash.Value(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      uint64_t v14 = sub_24A2A7390();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(a1, a2, v14);
      swift_storeEnumTagMultiPayload();
    }
    uint64_t v15 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_269779A10) + 48);
    uint64_t v16 = &a1[v15];
    int v17 = &a2[v15];
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v16, v17, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      uint64_t v18 = sub_24A2A7390();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v16, v17, v18);
      swift_storeEnumTagMultiPayload();
    }
    goto LABEL_14;
  }
  if (!EnumCaseMultiPayload)
  {
    uint64_t v7 = sub_24A2A6C00();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    uint64_t v8 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_269779A08) + 48);
    uint64_t v9 = &a1[v8];
    unint64_t v10 = &a2[v8];
    uint64_t v11 = type metadata accessor for SEP.SealedHash.Value(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
    }
    else
    {
      uint64_t v13 = sub_24A2A7390();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(v9, v10, v13);
      swift_storeEnumTagMultiPayload();
    }
LABEL_14:
    swift_storeEnumTagMultiPayload();
    return a1;
  }
  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  return a1;
}

char *assignWithTake for CryptexPolicy.Error(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_24A257468((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for CryptexPolicy.Error);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 4)
    {
      uint64_t v12 = type metadata accessor for SEP.SealedHash.Value(0);
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(a1, a2, *(void *)(*(void *)(v12 - 8) + 64));
      }
      else
      {
        uint64_t v14 = sub_24A2A7390();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(a1, a2, v14);
        swift_storeEnumTagMultiPayload();
      }
      uint64_t v15 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_269779A10) + 48);
      uint64_t v16 = &a1[v15];
      int v17 = &a2[v15];
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(v16, v17, *(void *)(*(void *)(v12 - 8) + 64));
      }
      else
      {
        uint64_t v18 = sub_24A2A7390();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v16, v17, v18);
        swift_storeEnumTagMultiPayload();
      }
      goto LABEL_15;
    }
    if (!EnumCaseMultiPayload)
    {
      uint64_t v7 = sub_24A2A6C00();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      uint64_t v8 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_269779A08) + 48);
      uint64_t v9 = &a1[v8];
      unint64_t v10 = &a2[v8];
      uint64_t v11 = type metadata accessor for SEP.SealedHash.Value(0);
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
      }
      else
      {
        uint64_t v13 = sub_24A2A7390();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(v9, v10, v13);
        swift_storeEnumTagMultiPayload();
      }
LABEL_15:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

uint64_t sub_24A257A2C()
{
  uint64_t result = sub_24A2A6C00();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for SEP.SealedHash.Value(319);
    if (v2 <= 0x3F)
    {
      swift_getTupleTypeLayout2();
      uint64_t v5 = &v4;
      uint64_t v6 = &unk_24A2AE558;
      uint64_t v7 = &unk_24A2AE558;
      uint64_t v8 = &unk_24A2AE570;
      swift_getTupleTypeLayout2();
      uint64_t v9 = &v3;
      unint64_t v10 = &unk_24A2AE588;
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for CryptexPolicy.SealedHashesLoader(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for CryptexPolicy.SealedHashesLoader(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for CryptexPolicy.SealedHashesLoader(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for CryptexPolicy.SealedHashesLoader()
{
  return &type metadata for CryptexPolicy.SealedHashesLoader;
}

uint64_t sub_24A257BEC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t sub_24A257C54(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

_UNKNOWN **sub_24A257CC0()
{
  return &off_26BABBF80;
}

_UNKNOWN **sub_24A257CCC()
{
  return &off_26FDFEE18;
}

uint64_t SoftwareReleasePolicy.init(release:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_24A257CE0(a1, a2);
}

uint64_t sub_24A257CE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Release();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t SoftwareReleasePolicy.release.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_24A258B74(v1, a1, (uint64_t (*)(void))type metadata accessor for Release);
}

uint64_t SoftwareReleasePolicy.release.setter(uint64_t a1)
{
  return sub_24A257D80(a1, v1);
}

uint64_t sub_24A257D80(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Release();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*SoftwareReleasePolicy.release.modify())()
{
  return nullsub_1;
}

uint64_t sub_24A257E04()
{
  uint64_t v0 = sub_24A2A7160();
  __swift_allocate_value_buffer(v0, qword_269779A30);
  __swift_project_value_buffer(v0, (uint64_t)qword_269779A30);
  return sub_24A2A7150();
}

uint64_t static SoftwareReleasePolicy.logger.getter@<X0>(uint64_t a1@<X8>)
{
  if (qword_269778560 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_24A2A7160();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_269779A30);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, v3, v2);
}

uint64_t SoftwareReleasePolicy.evaluate(bundle:context:)(uint64_t a1)
{
  v2[6] = a1;
  v2[7] = v1;
  uint64_t v3 = sub_24A2A71B0();
  v2[8] = v3;
  v2[9] = *(void *)(v3 - 8);
  v2[10] = swift_task_alloc();
  type metadata accessor for SoftwareReleasePolicy();
  v2[11] = swift_task_alloc();
  v2[12] = swift_task_alloc();
  type metadata accessor for Proto_AttestationBundle(0);
  v2[13] = swift_task_alloc();
  type metadata accessor for AttestationBundle(0);
  v2[14] = swift_task_alloc();
  v2[15] = type metadata accessor for Release();
  v2[16] = swift_task_alloc();
  v2[17] = swift_task_alloc();
  v2[18] = swift_task_alloc();
  v2[19] = swift_task_alloc();
  v2[20] = swift_task_alloc();
  v2[21] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_24A2580F4, 0, 0);
}

uint64_t sub_24A2580F4()
{
  uint64_t v53 = v0;
  uint64_t v1 = v0[20];
  uint64_t v3 = v0[13];
  uint64_t v2 = v0[14];
  sub_24A258B74(v0[6], v2, type metadata accessor for AttestationBundle);
  sub_24A258B74(v2, v3, type metadata accessor for Proto_AttestationBundle);
  sub_24A1E33F4(v3, 1, 0, v1);
  uint64_t v4 = v0[20];
  uint64_t v5 = v0[21];
  sub_24A258BDC(v0[14], type metadata accessor for AttestationBundle);
  sub_24A257CE0(v4, v5);
  if (qword_269778560 != -1) {
    swift_once();
  }
  uint64_t v6 = v0[11];
  uint64_t v7 = v0[12];
  uint64_t v8 = v0[7];
  uint64_t v9 = sub_24A2A7160();
  __swift_project_value_buffer(v9, (uint64_t)qword_269779A30);
  sub_24A258B74(v8, v7, (uint64_t (*)(void))type metadata accessor for SoftwareReleasePolicy);
  sub_24A258B74(v8, v6, (uint64_t (*)(void))type metadata accessor for SoftwareReleasePolicy);
  unint64_t v10 = sub_24A2A7140();
  os_log_type_t v11 = sub_24A2A7B40();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = v0[19];
    uint64_t v13 = v0[12];
    uint64_t v46 = v0[11];
    os_log_type_t type = v11;
    uint64_t v14 = v0;
    int v17 = v0 + 9;
    uint64_t v16 = v0[9];
    uint64_t v15 = v17[1];
    uint64_t v44 = v14[8];
    uint64_t v18 = swift_slowAlloc();
    uint64_t v47 = swift_slowAlloc();
    uint64_t v50 = v47;
    *(_DWORD *)uint64_t v18 = 136446466;
    sub_24A258B74(v13, v12, (uint64_t (*)(void))type metadata accessor for Release);
    uint64_t v51 = 0;
    unint64_t v52 = 0xE000000000000000;
    sub_24A2A7C60();
    sub_24A2A78C0();
    sub_24A2A3F08(v15);
    sub_24A2A3C70();
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v44);
    uint64_t v0 = v14;
    sub_24A2A78C0();
    swift_bridgeObjectRelease();
    sub_24A2A78C0();
    sub_24A258BDC(v12, (uint64_t (*)(void))type metadata accessor for Release);
    v14[4] = sub_24A1C52A8(0, 0xE000000000000000, &v50);
    sub_24A2A7B70();
    swift_bridgeObjectRelease();
    sub_24A258BDC(v13, (uint64_t (*)(void))type metadata accessor for SoftwareReleasePolicy);
    *(_WORD *)(v18 + 12) = 2082;
    uint64_t v19 = Release.jsonString.getter();
    v14[5] = sub_24A1C52A8(v19, v20, &v50);
    sub_24A2A7B70();
    swift_bridgeObjectRelease();
    sub_24A258BDC(v46, (uint64_t (*)(void))type metadata accessor for SoftwareReleasePolicy);
    _os_log_impl(&dword_24A19F000, v10, type, "Local device is running %{public}s:\n%{public}s", (uint8_t *)v18, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x24C5C00A0](v47, -1, -1);
    MEMORY[0x24C5C00A0](v18, -1, -1);
  }
  else
  {
    uint64_t v21 = v0[11];
    sub_24A258BDC(v0[12], (uint64_t (*)(void))type metadata accessor for SoftwareReleasePolicy);
    sub_24A258BDC(v21, (uint64_t (*)(void))type metadata accessor for SoftwareReleasePolicy);
  }

  uint64_t v22 = v0[21];
  uint64_t v23 = v0[17];
  sub_24A258B74(v22, v0[18], (uint64_t (*)(void))type metadata accessor for Release);
  sub_24A258B74(v22, v23, (uint64_t (*)(void))type metadata accessor for Release);
  uint64_t v24 = sub_24A2A7140();
  os_log_type_t v25 = sub_24A2A7B40();
  BOOL v26 = os_log_type_enabled(v24, v25);
  uint64_t v28 = v0[17];
  uint64_t v27 = v0[18];
  if (v26)
  {
    uint64_t v29 = v0;
    uint64_t v32 = v0 + 9;
    uint64_t v30 = v0[9];
    uint64_t v31 = v32[1];
    uint64_t v45 = v29[8];
    uint64_t v33 = swift_slowAlloc();
    uint64_t typea = swift_slowAlloc();
    uint64_t v50 = typea;
    uint64_t v51 = 0;
    *(_DWORD *)uint64_t v33 = 136446466;
    unint64_t v52 = 0xE000000000000000;
    sub_24A2A7C60();
    sub_24A2A78C0();
    sub_24A2A3F08(v31);
    sub_24A2A3C70();
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v31, v45);
    uint64_t v0 = v29;
    sub_24A2A78C0();
    swift_bridgeObjectRelease();
    sub_24A2A78C0();
    v29[2] = sub_24A1C52A8(v51, v52, &v50);
    sub_24A2A7B70();
    swift_bridgeObjectRelease();
    sub_24A258BDC(v27, (uint64_t (*)(void))type metadata accessor for Release);
    *(_WORD *)(v33 + 12) = 2082;
    uint64_t v34 = Release.jsonString.getter();
    v29[3] = sub_24A1C52A8(v34, v35, &v50);
    sub_24A2A7B70();
    swift_bridgeObjectRelease();
    sub_24A258BDC(v28, (uint64_t (*)(void))type metadata accessor for Release);
    _os_log_impl(&dword_24A19F000, v24, v25, "Remote device is running %{public}s:\n%{public}s", (uint8_t *)v33, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x24C5C00A0](typea, -1, -1);
    MEMORY[0x24C5C00A0](v33, -1, -1);
  }
  else
  {
    sub_24A258BDC(v0[18], (uint64_t (*)(void))type metadata accessor for Release);
    sub_24A258BDC(v28, (uint64_t (*)(void))type metadata accessor for Release);
  }

  sub_24A258B74(v0[7], v0[16], (uint64_t (*)(void))type metadata accessor for Release);
  if ((sub_24A2A7460() & 1) != 0
    && (uint64_t v36 = *(int *)(v0[15] + 20), (sub_24A1E3AD4(*(void *)(v0[21] + v36), *(void *)(v0[16] + v36)) & 1) != 0))
  {
    sub_24A258BDC(v0[16], (uint64_t (*)(void))type metadata accessor for Release);
    unsigned int v37 = sub_24A2A7140();
    os_log_type_t v38 = sub_24A2A7B40();
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v39 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v39 = 0;
      _os_log_impl(&dword_24A19F000, v37, v38, "Remote device is running same release as local device", v39, 2u);
      MEMORY[0x24C5C00A0](v39, -1, -1);
    }
    uint64_t v40 = v0[21];

    sub_24A258BDC(v40, (uint64_t (*)(void))type metadata accessor for Release);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v41 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    uint64_t v42 = v0[21];
    sub_24A258BDC(v0[16], (uint64_t (*)(void))type metadata accessor for Release);
    sub_24A258C3C();
    swift_allocError();
    swift_willThrow();
    sub_24A258BDC(v42, (uint64_t (*)(void))type metadata accessor for Release);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v41 = (uint64_t (*)(void))v0[1];
  }
  return v41();
}

uint64_t sub_24A258A20(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_24A1C50FC;
  return SoftwareReleasePolicy.evaluate(bundle:context:)(a1);
}

uint64_t static SoftwareReleasePolicy.Error.== infix(_:_:)()
{
  return 1;
}

uint64_t SoftwareReleasePolicy.Error.hash(into:)()
{
  return sub_24A2A7F20();
}

uint64_t SoftwareReleasePolicy.Error.hashValue.getter()
{
  return sub_24A2A7F50();
}

uint64_t type metadata accessor for SoftwareReleasePolicy()
{
  uint64_t result = qword_269779A68;
  if (!qword_269779A68) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_24A258B74(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_24A258BDC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_24A258C3C()
{
  unint64_t result = qword_269779A50;
  if (!qword_269779A50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269779A50);
  }
  return result;
}

unint64_t sub_24A258C94()
{
  unint64_t result = qword_269779A60;
  if (!qword_269779A60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269779A60);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for SoftwareReleasePolicy(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for Release();
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = v4;
    uint64_t v7 = sub_24A2A7480();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    *(uint64_t *)((char *)a1 + *(int *)(v6 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v6 + 20));
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for SoftwareReleasePolicy(uint64_t a1)
{
  uint64_t v2 = sub_24A2A7480();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  type metadata accessor for Release();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SoftwareReleasePolicy(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A2A7480();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  uint64_t v5 = type metadata accessor for Release();
  *(void *)(a1 + *(int *)(v5 + 20)) = *(void *)(a2 + *(int *)(v5 + 20));
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SoftwareReleasePolicy(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A2A7480();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  uint64_t v5 = type metadata accessor for Release();
  *(void *)(a1 + *(int *)(v5 + 20)) = *(void *)(a2 + *(int *)(v5 + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for SoftwareReleasePolicy(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A2A7480();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  uint64_t v5 = type metadata accessor for Release();
  *(void *)(a1 + *(int *)(v5 + 20)) = *(void *)(a2 + *(int *)(v5 + 20));
  return a1;
}

uint64_t assignWithTake for SoftwareReleasePolicy(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A2A7480();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  uint64_t v5 = type metadata accessor for Release();
  *(void *)(a1 + *(int *)(v5 + 20)) = *(void *)(a2 + *(int *)(v5 + 20));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SoftwareReleasePolicy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24A259048);
}

uint64_t sub_24A259048(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Release();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for SoftwareReleasePolicy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24A2590C8);
}

uint64_t sub_24A2590C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Release();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t sub_24A259138()
{
  uint64_t result = type metadata accessor for Release();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for SoftwareReleasePolicy.Error(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x24A259260);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for SoftwareReleasePolicy.Error()
{
  return &type metadata for SoftwareReleasePolicy.Error;
}

uint64_t sub_24A259298()
{
  unint64_t v1 = *(void *)(v0 + 8);
  char v2 = *(unsigned char *)(v0 + 16);
  *(void *)&long long v15 = *(void *)v0;
  *((void *)&v15 + 1) = v1;
  LOBYTE(v16) = v2;
  sub_24A1A52B0(v15, v1);
  uint64_t v3 = Image4Manifest.properties.getter();
  sub_24A1A5384(v15, v1);
  uint64_t v4 = *(void *)(v3 + 16);
  if (v4)
  {
    uint64_t v5 = v3 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_24A1B2CAC(v5, (uint64_t)&v15, &qword_26B174A50);
      BOOL v6 = (void)v15 == 1768973683 && *((void *)&v15 + 1) == 0xE400000000000000;
      if (v6 || (sub_24A2A7E40() & 1) != 0) {
        break;
      }
      sub_24A1B2D10((uint64_t)&v15, &qword_26B174A50);
      v5 += 48;
      if (!--v4)
      {
        swift_bridgeObjectRelease();
        goto LABEL_10;
      }
    }
    swift_bridgeObjectRelease();
    long long v18 = v15;
    long long v19 = v16;
    long long v20 = v17;
  }
  else
  {
LABEL_10:
    long long v19 = 0u;
    long long v20 = 0u;
    long long v18 = 0u;
  }
  swift_bridgeObjectRelease();
  sub_24A1B2CAC((uint64_t)&v18, (uint64_t)&v15, &qword_26B174A58);
  if (*((void *)&v15 + 1))
  {
    long long v12 = v15;
    long long v13 = v16;
    long long v14 = v17;
    sub_24A1C9680((uint64_t)&v13, (uint64_t)v11);
    sub_24A1BFBE4(v11, &v21);
    sub_24A1B2D10((uint64_t)&v12, &qword_26B174A50);
  }
  else
  {
    long long v21 = 0u;
    long long v22 = 0u;
  }
  sub_24A1B2D10((uint64_t)&v18, &qword_26B174A58);
  if (!*((void *)&v22 + 1)) {
    goto LABEL_34;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B174A90);
  if ((swift_dynamicCast() & 1) == 0) {
    return 0;
  }
  uint64_t v7 = *(void *)(v18 + 16);
  if (v7)
  {
    uint64_t v8 = v18 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_24A1B2CAC(v8, (uint64_t)&v15, &qword_26B174A50);
      BOOL v9 = (void)v15 == 1414743876 && *((void *)&v15 + 1) == 0xE400000000000000;
      if (v9 || (sub_24A2A7E40() & 1) != 0) {
        break;
      }
      sub_24A1B2D10((uint64_t)&v15, &qword_26B174A50);
      v8 += 48;
      if (!--v7)
      {
        swift_bridgeObjectRelease();
        goto LABEL_26;
      }
    }
    swift_bridgeObjectRelease();
    long long v18 = v15;
    long long v19 = v16;
    long long v20 = v17;
  }
  else
  {
LABEL_26:
    long long v19 = 0u;
    long long v20 = 0u;
    long long v18 = 0u;
  }
  swift_bridgeObjectRelease();
  sub_24A1B2CAC((uint64_t)&v18, (uint64_t)&v15, &qword_26B174A58);
  if (*((void *)&v15 + 1))
  {
    long long v12 = v15;
    long long v13 = v16;
    long long v14 = v17;
    sub_24A1C9680((uint64_t)&v13, (uint64_t)v11);
    sub_24A1BFBE4(v11, &v21);
    sub_24A1B2D10((uint64_t)&v12, &qword_26B174A50);
  }
  else
  {
    long long v21 = 0u;
    long long v22 = 0u;
  }
  sub_24A1B2D10((uint64_t)&v18, &qword_26B174A58);
  if (!*((void *)&v22 + 1))
  {
LABEL_34:
    sub_24A1B2D10((uint64_t)&v21, &qword_26B174BC8);
    return 0;
  }
  if (swift_dynamicCast()) {
    return v18;
  }
  return 0;
}

uint64_t Image4Manifest.properties.getter()
{
  uint64_t v109 = _s8PropertyV5ValueOMa(0);
  uint64_t v1 = MEMORY[0x270FA5388](v109);
  uint64_t v103 = (uint64_t)&v92 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v1);
  uint64_t v100 = (uint64_t *)((char *)&v92 - v3);
  uint64_t v116 = (long long *)sub_24A2A75C0();
  uint64_t v101 = *((void *)v116 - 1);
  MEMORY[0x270FA5388](v116);
  uint64_t v107 = (uint64_t *)((char *)&v92 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174570);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v102 = (uint64_t)&v92 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v122 = type metadata accessor for Image4Manifest.Property(0);
  uint64_t v111 = *(void *)(v122 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v122);
  BOOL v9 = (char *)&v92 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x270FA5388](v7);
  char v110 = (char *)&v92 - v11;
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  long long v14 = (char *)&v92 - v13;
  MEMORY[0x270FA5388](v12);
  uint64_t v108 = (uint64_t)&v92 - v15;
  uint64_t v106 = sub_24A2A7440();
  char v104 = *(char **)(v106 - 8);
  MEMORY[0x270FA5388](v106);
  uint64_t v105 = (char *)&v92 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v114 = type metadata accessor for Image4Manifest.Manifest(0);
  uint64_t v17 = MEMORY[0x270FA5388](v114);
  uint64_t v113 = (uint64_t)&v92 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  long long v20 = (char *)&v92 - v19;
  uint64_t v21 = sub_24A2A7550();
  uint64_t v112 = *(void *)(v21 - 8);
  uint64_t v22 = MEMORY[0x270FA5388](v21);
  uint64_t v24 = (char *)&v92 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v22);
  BOOL v26 = (char *)&v92 - v25;
  uint64_t v28 = *v0;
  unint64_t v27 = v0[1];
  sub_24A1A52B0(v28, v27);
  uint64_t v29 = sub_24A1E8DEC(v28, v27);
  unint64_t v30 = v27;
  uint64_t v31 = v26;
  sub_24A1A5384(v28, v30);
  uint64_t v32 = v115;
  sub_24A2A76D0();
  swift_release();
  if (v32) {
    return (uint64_t)v29;
  }
  uint64_t v33 = (char *)v107;
  os_log_type_t v99 = v20;
  uint64_t v34 = v112;
  (*(void (**)(char *, char *, uint64_t))(v112 + 16))(v24, v31, v21);
  unint64_t v35 = v105;
  _s16CloudAttestation7ReleaseV17defaultIdentifier9SwiftASN10gE0VvgZ_0();
  sub_24A2A76F0();
  uint64_t v97 = 0;
  uint64_t v36 = *(void (**)(char *, uint64_t))(v34 + 8);
  uint64_t v98 = v21;
  uint64_t v112 = v34 + 8;
  uint64_t v94 = v36;
  v36(v24, v21);
  (*((void (**)(char *, uint64_t))v104 + 1))(v35, v106);
  uint64_t v37 = (uint64_t)v99;
  sub_24A25D6C8(v113, (uint64_t)v99, type metadata accessor for Image4Manifest.Manifest);
  uint64_t v38 = *(void *)(v37 + *(int *)(v114 + 24));
  uint64_t v39 = *(void *)(v38 + 16);
  char v104 = v31;
  if (v39)
  {
    uint64_t v40 = v38 + ((*(unsigned __int8 *)(v111 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v111 + 80));
    uint64_t v41 = (void (**)(char *, long long *))(v101 + 8);
    uint64_t v42 = *(void *)(v111 + 72);
    uint64_t v115 = v38;
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_24A25D730(v40, (uint64_t)v14, type metadata accessor for Image4Manifest.Property);
      sub_24A2A7590();
      char v43 = MEMORY[0x24C5BED40](v14, v33);
      (*v41)(v33, v116);
      if (v43) {
        break;
      }
      sub_24A25D668((uint64_t)v14, type metadata accessor for Image4Manifest.Property);
      v40 += v42;
      if (!--v39)
      {
        uint64_t v44 = 1;
        uint64_t v31 = v104;
        uint64_t v37 = (uint64_t)v99;
        uint64_t v45 = v102;
        goto LABEL_9;
      }
    }
    uint64_t v45 = v102;
    sub_24A25D6C8((uint64_t)v14, v102, type metadata accessor for Image4Manifest.Property);
    uint64_t v44 = 0;
    uint64_t v31 = v104;
    uint64_t v37 = (uint64_t)v99;
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v44 = 1;
    uint64_t v45 = v102;
  }
LABEL_9:
  uint64_t v46 = v111;
  uint64_t v29 = (uint64_t *)v122;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v111 + 56))(v45, v44, 1, v122);
  uint64_t v47 = v46;
  swift_bridgeObjectRelease();
  BOOL v48 = (*(unsigned int (**)(uint64_t, uint64_t, uint64_t *))(v46 + 48))(v45, 1, v29) == 1;
  uint64_t v49 = v45;
  uint64_t v50 = v98;
  uint64_t v51 = (uint64_t)v110;
  if (v48)
  {
    sub_24A1B2D10(v49, &qword_26B174570);
    sub_24A2A7580();
    sub_24A25ED7C((unint64_t *)&qword_2697789C8, MEMORY[0x263F7BF58]);
    swift_allocError();
    sub_24A2A7560();
    swift_willThrow();
LABEL_36:
    sub_24A25D668(v37, type metadata accessor for Image4Manifest.Manifest);
    v94(v31, v50);
    return (uint64_t)v29;
  }
  uint64_t v52 = v108;
  sub_24A25D6C8(v49, v108, type metadata accessor for Image4Manifest.Property);
  uint64_t v53 = v52 + *((int *)v29 + 5);
  uint64_t v29 = v100;
  sub_24A25D730(v53, (uint64_t)v100, _s8PropertyV5ValueOMa);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload != 3)
  {
    sub_24A25D668((uint64_t)v29, _s8PropertyV5ValueOMa);
    sub_24A2A7580();
    sub_24A25ED7C((unint64_t *)&qword_2697789C8, MEMORY[0x263F7BF58]);
    swift_allocError();
    sub_24A2A7560();
    swift_willThrow();
    sub_24A25D668(v52, type metadata accessor for Image4Manifest.Property);
    goto LABEL_36;
  }
  uint64_t result = *v29;
  uint64_t v100 = *(uint64_t **)(*v29 + 16);
  if (!v100)
  {
    swift_bridgeObjectRelease();
    uint64_t v29 = (uint64_t *)MEMORY[0x263F8EE78];
LABEL_40:
    sub_24A25D668(v52, type metadata accessor for Image4Manifest.Property);
    sub_24A25D668(v37, type metadata accessor for Image4Manifest.Manifest);
    v94(v31, v50);
    return (uint64_t)v29;
  }
  unint64_t v56 = 0;
  unint64_t v93 = (*(unsigned __int8 *)(v46 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80);
  unint64_t v96 = result + v93;
  uint64_t v116 = &v118;
  uint64_t v29 = (uint64_t *)MEMORY[0x263F8EE78];
  uint64_t v95 = result;
  while (1)
  {
    if (v56 >= *(void *)(result + 16))
    {
      __break(1u);
      goto LABEL_42;
    }
    uint64_t v107 = v29;
    uint64_t v57 = *(void *)(v47 + 72);
    uint64_t v105 = (char *)v56;
    uint64_t v113 = v57;
    uint64_t v58 = sub_24A25D730(v96 + v57 * v56, v51, type metadata accessor for Image4Manifest.Property);
    *(void *)&long long v117 = MEMORY[0x24C5BED50](v58);
    *((void *)&v117 + 1) = v59;
    *(void *)&long long v118 = v60;
    *((void *)&v118 + 1) = v61;
    uint64_t v62 = sub_24A2A7860();
    uint64_t v29 = *(uint64_t **)(*(void *)(v62 - 8) + 64);
    MEMORY[0x270FA5388](v62 - 8);
    sub_24A2A7850();
    uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174B08);
    unint64_t v114 = sub_24A1BE724();
    uint64_t v115 = v63;
    uint64_t v106 = sub_24A2A7830();
    uint64_t v65 = v64;
    uint64_t result = swift_unknownObjectRelease();
    if (!v65) {
      goto LABEL_43;
    }
    uint64_t v66 = v103;
    sub_24A25D730(v51 + *(int *)(v122 + 20), v103, _s8PropertyV5ValueOMa);
    if (swift_getEnumCaseMultiPayload() != 3)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_24A25D668(v66, _s8PropertyV5ValueOMa);
      *(void *)&long long v117 = 0;
      *((void *)&v117 + 1) = 0xE000000000000000;
      sub_24A2A7C60();
      swift_bridgeObjectRelease();
      *(void *)&long long v117 = 0xD00000000000001ALL;
      *((void *)&v117 + 1) = 0x800000024A2B3F70;
      sub_24A2A78C0();
      swift_bridgeObjectRelease();
      sub_24A2A7580();
      sub_24A25ED7C((unint64_t *)&qword_2697789C8, MEMORY[0x263F7BF58]);
      swift_allocError();
      sub_24A2A7560();
      swift_bridgeObjectRelease();
      swift_willThrow();
      sub_24A25D668(v51, type metadata accessor for Image4Manifest.Property);
      sub_24A25D668(v52, type metadata accessor for Image4Manifest.Property);
      sub_24A25D668(v37, type metadata accessor for Image4Manifest.Manifest);
      v94(v104, v98);
      return (uint64_t)v29;
    }
    uint64_t v67 = *(void *)v66;
    uint64_t v68 = *(void *)(*(void *)v66 + 16);
    if (v68) {
      break;
    }
    swift_bridgeObjectRelease();
    unint64_t v70 = (void *)MEMORY[0x263F8EE78];
LABEL_28:
    uint64_t v121 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174AB0);
    *(void *)&long long v120 = v70;
    *(void *)&long long v117 = v106;
    *((void *)&v117 + 1) = v65;
    sub_24A1BFBE4(&v120, v116);
    uint64_t v29 = v107;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v50 = v98;
    uint64_t v52 = v108;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      uint64_t v29 = sub_24A1DF04C(0, v29[2] + 1, 1, v29);
    }
    uint64_t v37 = (uint64_t)v99;
    uint64_t v51 = (uint64_t)v110;
    unint64_t v85 = v29[2];
    unint64_t v84 = v29[3];
    unint64_t v86 = v105;
    if (v85 >= v84 >> 1)
    {
      uint64_t v91 = sub_24A1DF04C((void *)(v84 > 1), v85 + 1, 1, v29);
      unint64_t v86 = v105;
      uint64_t v29 = v91;
    }
    v29[2] = v85 + 1;
    unint64_t v87 = &v29[6 * v85];
    long long v88 = v117;
    long long v89 = v119;
    *((_OWORD *)v87 + 3) = v118;
    *((_OWORD *)v87 + 4) = v89;
    *((_OWORD *)v87 + 2) = v88;
    os_log_type_t v90 = v86 + 1;
    sub_24A25D668(v51, type metadata accessor for Image4Manifest.Property);
    unint64_t v56 = (unint64_t)v90;
    BOOL v48 = v90 == (char *)v100;
    uint64_t v31 = v104;
    uint64_t v47 = v111;
    uint64_t result = v95;
    if (v48)
    {
      swift_bridgeObjectRelease();
      goto LABEL_40;
    }
  }
  uint64_t v102 = v65;
  uint64_t v101 = v67;
  uint64_t v69 = v67 + v93;
  unint64_t v70 = (void *)MEMORY[0x263F8EE78];
  while (1)
  {
    uint64_t v71 = sub_24A25D730(v69, (uint64_t)v9, type metadata accessor for Image4Manifest.Property);
    *(void *)&long long v117 = MEMORY[0x24C5BED50](v71);
    *((void *)&v117 + 1) = v72;
    *(void *)&long long v118 = v73;
    *((void *)&v118 + 1) = v74;
    MEMORY[0x270FA5388](v117);
    sub_24A2A7850();
    uint64_t v75 = sub_24A2A7830();
    uint64_t v77 = v76;
    uint64_t result = swift_unknownObjectRelease();
    if (!v77) {
      break;
    }
    sub_24A25A7AC(&v120);
    *(void *)&long long v117 = v75;
    *((void *)&v117 + 1) = v77;
    sub_24A1BFBE4(&v120, v116);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v70 = sub_24A1DF060(0, v70[2] + 1, 1, v70);
    }
    unint64_t v79 = v70[2];
    unint64_t v78 = v70[3];
    if (v79 >= v78 >> 1) {
      unint64_t v70 = sub_24A1DF060((void *)(v78 > 1), v79 + 1, 1, v70);
    }
    v70[2] = v79 + 1;
    uint64_t v80 = &v70[6 * v79];
    long long v81 = v117;
    long long v82 = v119;
    void v80[3] = v118;
    v80[4] = v82;
    v80[2] = v81;
    sub_24A25D668((uint64_t)v9, type metadata accessor for Image4Manifest.Property);
    v69 += v113;
    if (!--v68)
    {
      swift_bridgeObjectRelease();
      uint64_t v65 = v102;
      goto LABEL_28;
    }
  }
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
  return result;
}

uint64_t Image4Manifest.Manifest.init(derEncoded:)(uint64_t a1)
{
  uint64_t v2 = sub_24A2A7440();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s16CloudAttestation7ReleaseV17defaultIdentifier9SwiftASN10gE0VvgZ_0();
  type metadata accessor for Image4Manifest.Manifest(0);
  sub_24A2A76F0();
  uint64_t v6 = sub_24A2A7550();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t _s8PropertyV5ValueOMa(uint64_t a1)
{
  return sub_24A1AE704(a1, (uint64_t *)&unk_26B174548);
}

uint64_t type metadata accessor for Image4Manifest.Property(uint64_t a1)
{
  return sub_24A1AE704(a1, (uint64_t *)&unk_26B174560);
}

uint64_t type metadata accessor for Image4Manifest.Manifest(uint64_t a1)
{
  return sub_24A1AE704(a1, (uint64_t *)&unk_26B174530);
}

uint64_t sub_24A25A7AC@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v54 = type metadata accessor for Image4Manifest.Property(0);
  uint64_t v4 = *(void *)(v54 - 8);
  MEMORY[0x270FA5388](v54);
  uint64_t v6 = (char *)v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_24A2A7480();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = _s8PropertyV5ValueOMa(0);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24A25D730(v2, (uint64_t)v13, _s8PropertyV5ValueOMa);
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 1:
      uint64_t v50 = *(void *)v13;
      a1[3] = MEMORY[0x263F8E970];
      *a1 = v50;
      return result;
    case 2:
      (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v13, v7);
      uint64_t v17 = sub_24A2A7470();
      uint64_t v21 = sub_24A1B9578(v17, v18, v19, v20);
      uint64_t v23 = v22;
      swift_unknownObjectRelease();
      a1[3] = MEMORY[0x263F06F70];
      *a1 = v21;
      a1[1] = v23;
      return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    case 3:
      uint64_t v24 = *(void *)v13;
      uint64_t v25 = *(void *)(*(void *)v13 + 16);
      if (v25)
      {
        v51[1] = *(void *)v13;
        uint64_t v52 = a1;
        uint64_t v26 = v24 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
        uint64_t v53 = *(void *)(v4 + 72);
        unint64_t v27 = (void *)MEMORY[0x263F8EE80];
        while (1)
        {
          uint64_t v28 = sub_24A25D730(v26, (uint64_t)v6, type metadata accessor for Image4Manifest.Property);
          v57[0] = MEMORY[0x24C5BED50](v28);
          v57[1] = v29;
          v57[2] = v30;
          v57[3] = v31;
          uint64_t v32 = sub_24A2A7860();
          MEMORY[0x270FA5388](v32 - 8);
          sub_24A2A7850();
          __swift_instantiateConcreteTypeFromMangledName(&qword_26B174B08);
          sub_24A1BE724();
          uint64_t v33 = sub_24A2A7830();
          uint64_t v35 = v34;
          uint64_t v36 = swift_unknownObjectRelease();
          if (!v35) {
            goto LABEL_28;
          }
          sub_24A25A7AC(v57, v36);
          sub_24A1E9E28((uint64_t)v57, (uint64_t)v56);
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v55 = v27;
          unint64_t v39 = sub_24A1BE668(v33, v35);
          uint64_t v40 = v27[2];
          BOOL v41 = (v38 & 1) == 0;
          uint64_t v42 = v40 + v41;
          if (__OFADD__(v40, v41))
          {
            __break(1u);
LABEL_27:
            __break(1u);
LABEL_28:
            __break(1u);
LABEL_29:
            sub_24A2A7E80();
            __break(1u);
            JUMPOUT(0x24A25ACF8);
          }
          char v43 = v38;
          if (v27[3] >= v42)
          {
            if (isUniquelyReferenced_nonNull_native)
            {
              unint64_t v27 = v55;
              if ((v38 & 1) == 0) {
                goto LABEL_17;
              }
            }
            else
            {
              sub_24A25CD60();
              unint64_t v27 = v55;
              if ((v43 & 1) == 0) {
                goto LABEL_17;
              }
            }
          }
          else
          {
            sub_24A1E679C(v42, isUniquelyReferenced_nonNull_native);
            unint64_t v44 = sub_24A1BE668(v33, v35);
            if ((v43 & 1) != (v45 & 1)) {
              goto LABEL_29;
            }
            unint64_t v39 = v44;
            unint64_t v27 = v55;
            if ((v43 & 1) == 0)
            {
LABEL_17:
              v27[(v39 >> 6) + 8] |= 1 << v39;
              uint64_t v46 = (uint64_t *)(v27[6] + 16 * v39);
              *uint64_t v46 = v33;
              v46[1] = v35;
              sub_24A1E9E28((uint64_t)v56, v27[7] + 32 * v39);
              uint64_t v47 = v27[2];
              BOOL v48 = __OFADD__(v47, 1);
              uint64_t v49 = v47 + 1;
              if (v48) {
                goto LABEL_27;
              }
              v27[2] = v49;
              swift_bridgeObjectRetain();
              goto LABEL_8;
            }
          }
          sub_24A25EE18((uint64_t)v56, v27[7] + 32 * v39);
LABEL_8:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_24A25D668((uint64_t)v6, type metadata accessor for Image4Manifest.Property);
          v26 += v53;
          if (!--v25)
          {
            swift_bridgeObjectRelease();
            a1 = v52;
            goto LABEL_24;
          }
        }
      }
      swift_bridgeObjectRelease();
      unint64_t v27 = (void *)MEMORY[0x263F8EE80];
LABEL_24:
      uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&qword_269779A78);
      a1[3] = result;
      *a1 = v27;
      return result;
    case 4:
      id v16 = objc_msgSend(objc_allocWithZone(MEMORY[0x263EFF9C8]), sel_init);
      uint64_t result = sub_24A1DF498();
      a1[3] = result;
      *a1 = v16;
      return result;
    default:
      char v15 = *v13;
      a1[3] = MEMORY[0x263F8D4F8];
      *(unsigned char *)a1 = v15;
      return result;
  }
}

uint64_t sub_24A25AD0C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v26 = a1;
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174A38);
  uint64_t v2 = MEMORY[0x270FA5388](v1 - 8);
  unint64_t v27 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v2);
  uint64_t v28 = (char *)&v24 - v4;
  uint64_t v5 = sub_24A2A7440();
  uint64_t v30 = *(void *)(v5 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x270FA5388](v6);
  MEMORY[0x270FA5388](v9);
  uint64_t v10 = sub_24A2A75C0();
  uint64_t v29 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24A2A7600();
  uint64_t v13 = v31;
  uint64_t result = sub_24A2A7610();
  if (!v13)
  {
    uint64_t v31 = v10;
    uint64_t v15 = v30;
    sub_24A2A7600();
    sub_24A2A7610();
    uint64_t v16 = v32;
    type metadata accessor for Image4Manifest.Property(0);
    sub_24A2A73B0();
    sub_24A25ED7C(&qword_26B174558, (void (*)(uint64_t))type metadata accessor for Image4Manifest.Property);
    uint64_t v24 = sub_24A2A76B0();
    uint64_t v25 = v16;
    (*(void (**)(char *, uint64_t))(v15 + 8))(v8, v5);
    uint64_t v17 = sub_24A2A7510();
    sub_24A2A75D0();
    uint64_t v18 = (uint64_t)v28;
    uint64_t v19 = *(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56);
    v19(v28, 0, 1, v17);
    sub_24A1B2D10(v18, &qword_26B174A38);
    sub_24A2A75D0();
    uint64_t v20 = v26;
    uint64_t v21 = (uint64_t)v27;
    uint64_t v22 = v12;
    uint64_t v23 = v31;
    v19(v27, 0, 1, v17);
    sub_24A1B2D10(v21, &qword_26B174A38);
    (*(void (**)(uint64_t, char *, uint64_t))(v29 + 32))(v20, v22, v23);
    uint64_t result = type metadata accessor for Image4Manifest.Manifest(0);
    *(void *)(v20 + *(int *)(result + 20)) = v25;
    *(void *)(v20 + *(int *)(result + 24)) = v24;
  }
  return result;
}

uint64_t sub_24A25B18C(uint64_t a1)
{
  uint64_t v2 = sub_24A2A7440();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s16CloudAttestation7ReleaseV17defaultIdentifier9SwiftASN10gE0VvgZ_0();
  sub_24A2A76F0();
  uint64_t v6 = sub_24A2A7550();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_24A25B2DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v72 = a2;
  uint64_t v3 = sub_24A2A7550();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v74 = v3;
  uint64_t v75 = v4;
  uint64_t v5 = MEMORY[0x270FA5388](v3);
  uint64_t v66 = (char *)&v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v69 = (char *)&v60 - v8;
  MEMORY[0x270FA5388](v7);
  unint64_t v70 = (char *)&v60 - v9;
  uint64_t v71 = _s8PropertyV5ValueOMa(0);
  uint64_t v10 = MEMORY[0x270FA5388](v71);
  uint64_t v62 = (uint64_t *)((char *)&v60 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v65 = (char *)&v60 - v13;
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v64 = (uint64_t *)((char *)&v60 - v15);
  MEMORY[0x270FA5388](v14);
  uint64_t v67 = (char *)&v60 - v16;
  uint64_t v17 = sub_24A2A7440();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  uint64_t v63 = (char *)&v60 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = MEMORY[0x270FA5388](v19);
  uint64_t v68 = (char *)&v60 - v22;
  uint64_t v23 = MEMORY[0x270FA5388](v21);
  uint64_t v24 = MEMORY[0x270FA5388](v23);
  uint64_t v26 = (char *)&v60 - v25;
  MEMORY[0x270FA5388](v24);
  uint64_t v28 = (char *)&v60 - v27;
  uint64_t v29 = a1;
  sub_24A2A7520();
  sub_24A2A73C0();
  sub_24A25ED7C(&qword_26B174A20, MEMORY[0x263F7BF08]);
  LOBYTE(a1) = sub_24A2A77E0();
  uint64_t v30 = *(void (**)(char *, uint64_t))(v18 + 8);
  v30(v26, v17);
  if (a1)
  {
    (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v29, v74);
    v30(v28, v17);
    return swift_storeEnumTagMultiPayload();
  }
  uint64_t v61 = v29;
  sub_24A2A73D0();
  char v32 = sub_24A2A77E0();
  v30(v26, v17);
  if (v32)
  {
    v30(v28, v17);
    uint64_t v34 = v74;
    uint64_t v33 = v75;
    uint64_t v35 = v61;
    (*(void (**)(char *, uint64_t, uint64_t))(v75 + 16))(v70, v61, v74);
    sub_24A2A7520();
    uint64_t v36 = v73;
    char v37 = sub_24A2A7AB0();
    if (v36) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 8))(v35, v34);
    }
    char v49 = v37;
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v35, v34);
    char v50 = v49 & 1;
    uint64_t v51 = v67;
    *uint64_t v67 = v50;
    swift_storeEnumTagMultiPayload();
    uint64_t v45 = (uint64_t)v51;
    uint64_t v52 = v72;
    return sub_24A25D6C8(v45, v52, _s8PropertyV5ValueOMa);
  }
  sub_24A2A73E0();
  char v38 = sub_24A2A77E0();
  v30(v26, v17);
  if ((v38 & 1) == 0)
  {
    sub_24A2A73A0();
    char v46 = sub_24A2A77E0();
    v30(v26, v17);
    uint64_t v43 = v72;
    if ((v46 & 1) == 0)
    {
      sub_24A2A73B0();
      char v53 = sub_24A2A77E0();
      v30(v26, v17);
      v30(v28, v17);
      if ((v53 & 1) == 0)
      {
        sub_24A2A7580();
        sub_24A25ED7C((unint64_t *)&qword_2697789C8, MEMORY[0x263F7BF58]);
        swift_allocError();
        sub_24A2A7560();
        swift_willThrow();
        return (*(uint64_t (**)(uint64_t, uint64_t))(v75 + 8))(v61, v74);
      }
      type metadata accessor for Image4Manifest.Property(0);
      uint64_t v54 = v63;
      sub_24A2A73B0();
      sub_24A25ED7C(&qword_26B174558, (void (*)(uint64_t))type metadata accessor for Image4Manifest.Property);
      uint64_t v55 = v61;
      uint64_t v56 = v73;
      uint64_t v57 = sub_24A2A76C0();
      if (v56)
      {
        (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v55, v74);
        return ((uint64_t (*)(char *, uint64_t))v30)(v54, v17);
      }
      uint64_t v58 = v57;
      (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v55, v74);
      v30(v54, v17);
      uint64_t v59 = v62;
      *uint64_t v62 = v58;
      swift_storeEnumTagMultiPayload();
      uint64_t v45 = (uint64_t)v59;
      goto LABEL_19;
    }
    v30(v28, v17);
    sub_24A2A7480();
    uint64_t v40 = v74;
    uint64_t v39 = v75;
    uint64_t v41 = v61;
    (*(void (**)(char *, uint64_t, uint64_t))(v75 + 16))(v66, v61, v74);
    uint64_t v47 = v65;
    uint64_t v48 = v73;
    sub_24A2A7630();
    if (!v48)
    {
      (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v41, v40);
      swift_storeEnumTagMultiPayload();
      uint64_t v45 = (uint64_t)v47;
      goto LABEL_19;
    }
    return (*(uint64_t (**)(uint64_t, uint64_t))(v39 + 8))(v41, v40);
  }
  v30(v28, v17);
  uint64_t v40 = v74;
  uint64_t v39 = v75;
  uint64_t v41 = v61;
  (*(void (**)(char *, uint64_t, uint64_t))(v75 + 16))(v69, v61, v74);
  sub_24A2A7520();
  sub_24A25EDC4();
  uint64_t v42 = v73;
  sub_24A2A7500();
  uint64_t v43 = v72;
  if (v42) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(v39 + 8))(v41, v40);
  }
  (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v41, v40);
  unint64_t v44 = v64;
  *uint64_t v64 = v76;
  swift_storeEnumTagMultiPayload();
  uint64_t v45 = (uint64_t)v44;
LABEL_19:
  uint64_t v52 = v43;
  return sub_24A25D6C8(v45, v52, _s8PropertyV5ValueOMa);
}

uint64_t sub_24A25BBB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_24A25B2DC(a1, a2);
}

uint64_t Image4Manifest.Property.init(derEncoded:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v24 = a2;
  uint64_t v3 = sub_24A2A7400();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v24 - v8;
  uint64_t v10 = sub_24A2A7440();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v25 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v24 - v14;
  uint64_t v29 = a1;
  sub_24A2A7520();
  sub_24A2A7420();
  uint64_t v26 = *(void (**)(char *, uint64_t))(v11 + 8);
  v26(v15, v10);
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v7, *MEMORY[0x263F7BF00], v3);
  LOBYTE(a1) = sub_24A2A73F0();
  uint64_t v16 = *(void (**)(char *, uint64_t))(v4 + 8);
  v16(v7, v3);
  v16(v9, v3);
  if (a1)
  {
    uint64_t v17 = (uint64_t (*)(char *, uint64_t))v26;
    uint64_t v18 = v25;
    uint64_t v19 = v29;
    sub_24A2A7520();
    type metadata accessor for Image4Manifest.Property(0);
    sub_24A2A76F0();
    uint64_t v20 = sub_24A2A7550();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 8))(v19, v20);
    return v17(v18, v10);
  }
  else
  {
    uint64_t v27 = 0;
    unint64_t v28 = 0xE000000000000000;
    sub_24A2A7C60();
    sub_24A2A78C0();
    uint64_t v22 = v29;
    sub_24A2A7520();
    sub_24A2A7420();
    v26(v15, v10);
    sub_24A2A7D00();
    v16(v9, v3);
    sub_24A2A7580();
    sub_24A25ED7C((unint64_t *)&qword_2697789C8, MEMORY[0x263F7BF58]);
    swift_allocError();
    sub_24A2A7560();
    swift_bridgeObjectRelease();
    swift_willThrow();
    uint64_t v23 = sub_24A2A7550();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v23 - 8) + 8))(v22, v23);
  }
}

uint64_t sub_24A25BFFC()
{
  uint64_t v0 = sub_24A2A7440();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174A40);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_24A2A7550();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24A2A74A0();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_24A1B2D10((uint64_t)v6, &qword_26B174A40);
    sub_24A2A7580();
    sub_24A25ED7C((unint64_t *)&qword_2697789C8, MEMORY[0x263F7BF58]);
    swift_allocError();
    sub_24A2A7560();
    return swift_willThrow();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
    sub_24A2A7520();
    type metadata accessor for Image4Manifest.Property(0);
    sub_24A2A76F0();
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
}

uint64_t sub_24A25C2F8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v14 = a1;
  uint64_t v2 = _s8PropertyV5ValueOMa(0);
  MEMORY[0x270FA5388](v2);
  uint64_t v15 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_24A2A7440();
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v5 = sub_24A2A75C0();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24A2A7600();
  uint64_t result = sub_24A2A7610();
  if (!v1)
  {
    uint64_t v10 = v14;
    sub_24A25ED7C(&qword_26B174540, (void (*)(uint64_t))_s8PropertyV5ValueOMa);
    uint64_t v11 = (uint64_t)v15;
    sub_24A2A75D0();
    (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v10, v8, v5);
    uint64_t v12 = type metadata accessor for Image4Manifest.Property(0);
    return sub_24A25D6C8(v11, v10 + *(int *)(v12 + 20), _s8PropertyV5ValueOMa);
  }
  return result;
}

uint64_t sub_24A25C55C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return Image4Manifest.Property.init(derEncoded:)(a1, a2);
}

void *sub_24A25C574()
{
  uint64_t v1 = sub_24A2A7510();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B174B30);
  uint64_t v23 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = sub_24A2A7D40();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    *uint64_t v23 = v7;
    return result;
  }
  uint64_t result = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    uint64_t result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  uint64_t v24 = v5 + 64;
  int64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v5 + 64);
  uint64_t v27 = v2 + 16;
  int64_t v25 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v26 = v2 + 32;
  while (1)
  {
    if (v13)
    {
      unint64_t v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v15 = v14 | (v10 << 6);
      goto LABEL_9;
    }
    int64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v19 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v19);
    ++v10;
    if (!v20)
    {
      int64_t v10 = v19 + 1;
      if (v19 + 1 >= v25) {
        goto LABEL_23;
      }
      unint64_t v20 = *(void *)(v24 + 8 * v10);
      if (!v20) {
        break;
      }
    }
LABEL_22:
    unint64_t v13 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_9:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v5 + 48) + 8 * v15);
    unint64_t v18 = *(void *)(v2 + 72) * v15;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v5 + 56) + v18, v1);
    *(void *)(*(void *)(v7 + 48) + v16) = v17;
    uint64_t result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v7 + 56) + v18, v4, v1);
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v25) {
    goto LABEL_23;
  }
  unint64_t v20 = *(void *)(v24 + 8 * v21);
  if (v20)
  {
    int64_t v10 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v10 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void *sub_24A25C804()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B174B20);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_24A2A7D40();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      int64_t v9 = v21 + 1;
      if (v21 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v6 + 8 * v9);
      if (!v22) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v22 - 1) & v22;
    unint64_t v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 32 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + 32 * v15;
    uint64_t v19 = *(void *)(v17 + 16);
    uint64_t v18 = *(void *)(v17 + 24);
    long long v24 = *(_OWORD *)v17;
    sub_24A1C9680(*(void *)(v2 + 56) + v16, (uint64_t)v25);
    uint64_t v20 = *(void *)(v4 + 48) + v16;
    *(_OWORD *)uint64_t v20 = v24;
    *(void *)(v20 + 16) = v19;
    *(void *)(v20 + 24) = v18;
    sub_24A1BFBE4(v25, (_OWORD *)(*(void *)(v4 + 56) + v16));
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v13) {
    goto LABEL_26;
  }
  unint64_t v22 = *(void *)(v6 + 8 * v23);
  if (v22)
  {
    int64_t v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

char *sub_24A25C9E4()
{
  uint64_t v1 = type metadata accessor for SEP.SealedHash(0);
  uint64_t v37 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v36 = (uint64_t)&v32 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B174B18);
  uint64_t v33 = v0;
  uint64_t v3 = *v0;
  uint64_t v4 = sub_24A2A7D40();
  uint64_t v5 = *(void *)(v3 + 16);
  uint64_t v39 = v4;
  if (!v5)
  {
    uint64_t result = (char *)swift_release();
    uint64_t v31 = v39;
    uint64_t v30 = v33;
LABEL_25:
    *uint64_t v30 = v31;
    return result;
  }
  uint64_t v6 = v4;
  uint64_t result = (char *)(v4 + 64);
  uint64_t v8 = (char *)(v3 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v6 + 32)) + 63) >> 6;
  uint64_t v34 = v3 + 64;
  if (v6 != v3 || result >= &v8[8 * v9])
  {
    uint64_t result = (char *)memmove(result, v8, 8 * v9);
    uint64_t v6 = v39;
  }
  int64_t v10 = 0;
  *(void *)(v6 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v38 = v3;
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v35 = (unint64_t)(v11 + 63) >> 6;
  for (i = v39; ; uint64_t result = (char *)sub_24A25D6C8(v25, *(void *)(i + 56) + v26, type metadata accessor for SEP.SealedHash))
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      uint64_t v17 = v38;
      goto LABEL_9;
    }
    int64_t v27 = v10 + 1;
    uint64_t v17 = v38;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v27 >= v35) {
      goto LABEL_23;
    }
    unint64_t v28 = *(void *)(v34 + 8 * v27);
    ++v10;
    if (!v28)
    {
      int64_t v10 = v27 + 1;
      if (v27 + 1 >= v35) {
        goto LABEL_23;
      }
      unint64_t v28 = *(void *)(v34 + 8 * v10);
      if (!v28) {
        break;
      }
    }
LABEL_22:
    unint64_t v13 = (v28 - 1) & v28;
    unint64_t v16 = __clz(__rbit64(v28)) + (v10 << 6);
LABEL_9:
    uint64_t v18 = sub_24A2A6C00();
    uint64_t v19 = *(void *)(v18 - 8);
    MEMORY[0x270FA5388](v18);
    int64_t v21 = (char *)&v32 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
    unint64_t v23 = *(void *)(v22 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v19 + 16))(v21, *(void *)(v17 + 48) + v23, v18);
    uint64_t v24 = *(void *)(v17 + 56);
    uint64_t v25 = v36;
    unint64_t v26 = *(void *)(v37 + 72) * v16;
    sub_24A25D730(v24 + v26, v36, type metadata accessor for SEP.SealedHash);
    (*(void (**)(unint64_t, char *, uint64_t))(v19 + 32))(*(void *)(i + 48) + v23, v21, v18);
  }
  int64_t v29 = v27 + 2;
  if (v29 >= v35)
  {
LABEL_23:
    uint64_t result = (char *)swift_release();
    uint64_t v30 = v33;
    uint64_t v31 = v39;
    goto LABEL_25;
  }
  unint64_t v28 = *(void *)(v34 + 8 * v29);
  if (v28)
  {
    int64_t v10 = v29;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v10 >= v35) {
      goto LABEL_23;
    }
    unint64_t v28 = *(void *)(v34 + 8 * v10);
    ++v29;
    if (v28) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_24A25CD60()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_269778E00);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_24A2A7D40();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_28:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v25 = v1;
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    uint64_t v20 = 32 * v15;
    sub_24A1B2CAC(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v26, &qword_26B174BC8);
    int64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *int64_t v21 = v18;
    v21[1] = v19;
    sub_24A1E9E28((uint64_t)v26, *(void *)(v4 + 56) + v20);
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v25;
    goto LABEL_28;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_24A25CF50()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_269778B90);
  uint64_t v31 = v0;
  uint64_t v1 = *v0;
  uint64_t v2 = sub_24A2A7D40();
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v35 = v2;
  if (!v3)
  {
    uint64_t result = (void *)swift_release();
    uint64_t v29 = v35;
    unint64_t v28 = v31;
LABEL_28:
    *unint64_t v28 = v29;
    return result;
  }
  uint64_t v4 = v2;
  uint64_t result = (void *)(v2 + 64);
  unint64_t v6 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v1 || (unint64_t)result >= v1 + 64 + 8 * v6)
  {
    uint64_t result = memmove(result, (const void *)(v1 + 64), 8 * v6);
    uint64_t v4 = v35;
  }
  int64_t v8 = 0;
  *(void *)(v4 + 16) = *(void *)(v1 + 16);
  uint64_t v9 = 1 << *(unsigned char *)(v1 + 32);
  uint64_t v34 = v1;
  uint64_t v10 = -1;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  unint64_t v11 = v10 & *(void *)(v1 + 64);
  uint64_t v32 = v1 + 64;
  int64_t v33 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v35;
  while (1)
  {
    if (v11)
    {
      unint64_t v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v14 = v13 | (v8 << 6);
      uint64_t v15 = v34;
      goto LABEL_12;
    }
    int64_t v25 = v8 + 1;
    uint64_t v15 = v34;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v25 >= v33) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v32 + 8 * v25);
    ++v8;
    if (!v26)
    {
      int64_t v8 = v25 + 1;
      if (v25 + 1 >= v33) {
        goto LABEL_26;
      }
      unint64_t v26 = *(void *)(v32 + 8 * v8);
      if (!v26) {
        break;
      }
    }
LABEL_25:
    unint64_t v11 = (v26 - 1) & v26;
    unint64_t v14 = __clz(__rbit64(v26)) + (v8 << 6);
LABEL_12:
    uint64_t v16 = sub_24A2A6C00();
    uint64_t v17 = *(void *)(v16 - 8);
    MEMORY[0x270FA5388](v16);
    uint64_t v19 = (char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
    unint64_t v21 = *(void *)(v20 + 72) * v14;
    (*(void (**)(char *, unint64_t, uint64_t))(v17 + 16))(v19, *(void *)(v15 + 48) + v21, v16);
    uint64_t v22 = *(void *)(v15 + 56);
    uint64_t v23 = 8 * v14;
    uint64_t v24 = *(void *)(v22 + 8 * v14);
    (*(void (**)(unint64_t, char *, uint64_t))(v17 + 32))(*(void *)(v12 + 48) + v21, v19, v16);
    *(void *)(*(void *)(v12 + 56) + v23) = v24;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v27 = v25 + 2;
  if (v27 >= v33)
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    unint64_t v28 = v31;
    uint64_t v29 = v35;
    goto LABEL_28;
  }
  unint64_t v26 = *(void *)(v32 + 8 * v27);
  if (v26)
  {
    int64_t v8 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v8 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v8 >= v33) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v32 + 8 * v8);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_24A25D21C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Proto_SealedHash(0);
  uint64_t v29 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697789D8);
  uint64_t v5 = *v0;
  uint64_t v6 = sub_24A2A7D40();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_25:
    uint64_t *v1 = v7;
    return result;
  }
  int64_t v27 = v1;
  uint64_t result = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    uint64_t result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  uint64_t v28 = v5 + 64;
  int64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v5 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_9;
    }
    int64_t v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v23 >= v14) {
      goto LABEL_23;
    }
    unint64_t v24 = *(void *)(v28 + 8 * v23);
    ++v10;
    if (!v24)
    {
      int64_t v10 = v23 + 1;
      if (v23 + 1 >= v14) {
        goto LABEL_23;
      }
      unint64_t v24 = *(void *)(v28 + 8 * v10);
      if (!v24) {
        break;
      }
    }
LABEL_22:
    unint64_t v13 = (v24 - 1) & v24;
    unint64_t v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_9:
    uint64_t v17 = 16 * v16;
    uint64_t v18 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v16);
    uint64_t v19 = *v18;
    uint64_t v20 = v18[1];
    unint64_t v21 = *(void *)(v29 + 72) * v16;
    sub_24A25D730(*(void *)(v5 + 56) + v21, (uint64_t)v4, type metadata accessor for Proto_SealedHash);
    uint64_t v22 = (void *)(*(void *)(v7 + 48) + v17);
    *uint64_t v22 = v19;
    v22[1] = v20;
    sub_24A25D6C8((uint64_t)v4, *(void *)(v7 + 56) + v21, type metadata accessor for Proto_SealedHash);
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v25 = v23 + 2;
  if (v25 >= v14)
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v27;
    goto LABEL_25;
  }
  unint64_t v24 = *(void *)(v28 + 8 * v25);
  if (v24)
  {
    int64_t v10 = v25;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_23;
    }
    unint64_t v24 = *(void *)(v28 + 8 * v10);
    ++v25;
    if (v24) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void *sub_24A25D4B0()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_269778A08);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_24A2A7D40();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_24A25D668(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_24A25D6C8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_24A25D730(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t *_s8ManifestVwCP(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_24A2A75C0();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 24);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    *(uint64_t *)((char *)a1 + v8) = *(uint64_t *)((char *)a2 + v8);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t _s8ManifestVwxx(uint64_t a1)
{
  uint64_t v2 = sub_24A2A75C0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);

  return swift_bridgeObjectRelease();
}

uint64_t _s8ManifestVwcp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_24A2A75C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s8ManifestVwca(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_24A2A75C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  *(void *)(a1 + *(int *)(a3 + 24)) = *(void *)(a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s8ManifestVwtk(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_24A2A75C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  return a1;
}

uint64_t _s8ManifestVwta(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_24A2A75C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s8ManifestVwet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24A25DB28);
}

uint64_t sub_24A25DB28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_24A2A75C0();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 24));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t _s8ManifestVwst(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24A25DBFC);
}

uint64_t sub_24A25DBFC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_24A2A75C0();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  }
  return result;
}

uint64_t sub_24A25DCB8()
{
  uint64_t result = sub_24A2A75C0();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *_s8PropertyVwCP(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_24A2A75C0();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (uint64_t *)((char *)a1 + v8);
    unint64_t v10 = (uint64_t *)((char *)a2 + v8);
    uint64_t v11 = _s8PropertyV5ValueOMa(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 3)
    {
      *uint64_t v9 = *v10;
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 2)
    {
      uint64_t v13 = sub_24A2A7480();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v13 - 8) + 16))(v9, v10, v13);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
    }
  }
  return a1;
}

uint64_t _s8PropertyVwxx(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A2A75C0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  _s8PropertyV5ValueOMa(0);
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 3)
  {
    return swift_bridgeObjectRelease();
  }
  else if (result == 2)
  {
    uint64_t v7 = sub_24A2A7480();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
    return v8(v5, v7);
  }
  return result;
}

uint64_t _s8PropertyVwcp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_24A2A75C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = _s8PropertyV5ValueOMa(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 3)
  {
    *uint64_t v8 = *v9;
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload == 2)
  {
    uint64_t v12 = sub_24A2A7480();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v12 - 8) + 16))(v8, v9, v12);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
  }
  return a1;
}

uint64_t _s8PropertyVwca(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_24A2A75C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  if (a1 != a2)
  {
    uint64_t v7 = *(int *)(a3 + 20);
    uint64_t v8 = (void *)(a1 + v7);
    uint64_t v9 = (void *)(a2 + v7);
    sub_24A25D668(a1 + v7, _s8PropertyV5ValueOMa);
    uint64_t v10 = _s8PropertyV5ValueOMa(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 3)
    {
      *uint64_t v8 = *v9;
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 2)
    {
      uint64_t v12 = sub_24A2A7480();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v12 - 8) + 16))(v8, v9, v12);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
    }
  }
  return a1;
}

uint64_t _s8PropertyVwtk(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_24A2A75C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = _s8PropertyV5ValueOMa(0);
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    uint64_t v11 = sub_24A2A7480();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v11 - 8) + 32))(v8, v9, v11);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
  }
  return a1;
}

uint64_t _s8PropertyVwta(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_24A2A75C0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  if (a1 != a2)
  {
    uint64_t v7 = *(int *)(a3 + 20);
    uint64_t v8 = (void *)(a1 + v7);
    uint64_t v9 = (const void *)(a2 + v7);
    sub_24A25D668(a1 + v7, _s8PropertyV5ValueOMa);
    uint64_t v10 = _s8PropertyV5ValueOMa(0);
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      uint64_t v11 = sub_24A2A7480();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v11 - 8) + 32))(v8, v9, v11);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
    }
  }
  return a1;
}

uint64_t _s8PropertyVwet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24A25E4B8);
}

uint64_t sub_24A25E4B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_24A2A75C0();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = _s8PropertyV5ValueOMa(0);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 20);
    return v11(v13, a2, v12);
  }
}

uint64_t _s8PropertyVwst(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24A25E5C4);
}

uint64_t sub_24A25E5C4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = sub_24A2A75C0();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, v8);
  }
  else
  {
    uint64_t v12 = _s8PropertyV5ValueOMa(0);
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a4 + 20);
    return v13(v15, a2, a2, v14);
  }
}

uint64_t sub_24A25E6C8()
{
  uint64_t result = sub_24A2A75C0();
  if (v1 <= 0x3F)
  {
    uint64_t result = _s8PropertyV5ValueOMa(319);
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_24A25E790(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 3)
    {
      *a1 = *a2;
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 2)
    {
      uint64_t v8 = sub_24A2A7480();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
  }
  return a1;
}

uint64_t sub_24A25E8B4(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 3)
  {
    return swift_bridgeObjectRelease();
  }
  else if (result == 2)
  {
    uint64_t v3 = sub_24A2A7480();
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
    return v4(a1, v3);
  }
  return result;
}

void *sub_24A25E958(void *a1, void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 3)
  {
    *a1 = *a2;
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload == 2)
  {
    uint64_t v7 = sub_24A2A7480();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *sub_24A25EA38(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_24A25D668((uint64_t)a1, _s8PropertyV5ValueOMa);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 3)
    {
      *a1 = *a2;
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 2)
    {
      uint64_t v7 = sub_24A2A7480();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

void *sub_24A25EB3C(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    uint64_t v6 = sub_24A2A7480();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *sub_24A25EBF4(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_24A25D668((uint64_t)a1, _s8PropertyV5ValueOMa);
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      uint64_t v6 = sub_24A2A7480();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_24A25ECD0()
{
  uint64_t result = sub_24A2A7480();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t sub_24A25ED7C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_24A25EDC4()
{
  unint64_t result = qword_26B174BB0;
  if (!qword_26B174BB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B174BB0);
  }
  return result;
}

uint64_t sub_24A25EE18(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174BC8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_24A25EE80(uint64_t a1, uint64_t a2)
{
  uint64_t v31 = a2;
  char v5 = *((unsigned char *)v2 + 16);
  uint64_t v29 = 0;
  unint64_t v30 = 0xE000000000000000;
  long long v27 = *v2;
  LOBYTE(v28) = v5;
  uint64_t result = Image4Manifest.properties.getter();
  if (!v3)
  {
    uint64_t v7 = result;
    uint64_t v15 = *(void *)(result + 16);
    if (v15)
    {
      unint64_t v8 = 0;
      uint64_t v14 = result + 32;
      uint64_t v13 = result;
      uint64_t v17 = a1;
      while (v8 < *(void *)(v7 + 16))
      {
        sub_24A25F410(v14 + 48 * v8, (uint64_t)&v27);
        long long v9 = v27;
        long long v25 = v27;
        sub_24A1BFBE4(&v28, v26);
        long long v23 = v9;
        swift_bridgeObjectRetain_n();
        sub_24A2A78C0();
        *(void *)&long long v23 = a1;
        *((void *)&v23 + 1) = v31;
        swift_bridgeObjectRetain();
        sub_24A2A78C0();
        swift_bridgeObjectRelease();
        sub_24A2A78C0();
        swift_bridgeObjectRelease();
        long long v23 = v9;
        sub_24A1C9680((uint64_t)v26, (uint64_t)v24);
        swift_bridgeObjectRelease();
        __swift_instantiateConcreteTypeFromMangledName(&qword_26B174A90);
        if (!swift_dynamicCast())
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_24A25F478();
          swift_allocError();
          *(void *)uint64_t v12 = 0xD00000000000001ELL;
          *(void *)(v12 + 8) = 0x800000024A2B4020;
          *(unsigned char *)(v12 + 16) = 1;
          swift_willThrow();
          return sub_24A25F4CC((uint64_t)&v25);
        }
        uint64_t v10 = *(void *)(v21 + 16);
        if (v10)
        {
          unint64_t v16 = v8;
          uint64_t v11 = v21 + 32;
          do
          {
            sub_24A25F410(v11, (uint64_t)&v23);
            long long v21 = v23;
            sub_24A1BFBE4(v24, v22);
            sub_24A1C9680((uint64_t)v22, (uint64_t)&v20);
            swift_bridgeObjectRetain();
            if (swift_dynamicCast())
            {
              swift_bridgeObjectRetain();
              sub_24A2A78C0();
              sub_24A2A78C0();
              sub_24A231980(v18, v19);
              sub_24A2A78C0();
              swift_bridgeObjectRelease();
              sub_24A2A78C0();
              swift_bridgeObjectRetain();
              sub_24A2A78C0();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              sub_24A2A78C0();
              swift_bridgeObjectRelease();
              sub_24A1A5384(v18, v19);
            }
            else
            {
              swift_bridgeObjectRetain();
              sub_24A2A78C0();
              sub_24A2A78C0();
              swift_bridgeObjectRelease();
              sub_24A2A78C0();
              sub_24A2A7D00();
              sub_24A2A78C0();
              swift_bridgeObjectRetain();
              sub_24A2A78C0();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              sub_24A2A78C0();
              swift_bridgeObjectRelease();
            }
            sub_24A25F4CC((uint64_t)&v21);
            v11 += 48;
            --v10;
            a1 = v17;
          }
          while (v10);
          swift_bridgeObjectRelease();
          uint64_t v7 = v13;
          unint64_t v8 = v16;
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        ++v8;
        uint64_t result = sub_24A25F4CC((uint64_t)&v25);
        if (v8 == v15)
        {
          swift_bridgeObjectRelease();
          return v29;
        }
      }
      __break(1u);
    }
    else
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  return result;
}

uint64_t Image4Manifest.debugDescription.getter()
{
  return sub_24A25EE80(0, 0xE000000000000000);
}

uint64_t sub_24A25F39C()
{
  return sub_24A25EE80(0, 0xE000000000000000);
}

uint64_t sub_24A25F410(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174A50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_24A25F478()
{
  unint64_t result = qword_269779A80;
  if (!qword_269779A80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269779A80);
  }
  return result;
}

uint64_t sub_24A25F4CC(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174A50);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t FusingPolicy.Constraint<>.init(BOOLeanLiteral:)@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = result;
  return result;
}

unsigned char *FusingPolicy.Constraints.init(productionStatus:securityMode:securityDomain:)@<X0>(unsigned char *result@<X0>, char *a2@<X1>, char *a3@<X2>, unsigned char *a4@<X8>)
{
  char v4 = *a2;
  char v5 = *a3;
  *a4 = *result;
  a4[1] = v4;
  a4[2] = v5;
  return result;
}

uint64_t FusingPolicy.init(matches:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v2 = *(unsigned char *)(result + 2);
  *(_WORD *)a2 = *(_WORD *)result;
  *(unsigned char *)(a2 + 2) = v2;
  *(unsigned char *)(a2 + 5) = 0;
  *(_WORD *)(a2 + 3) = 2;
  return result;
}

uint64_t sub_24A25F570()
{
  uint64_t v0 = sub_24A2A7160();
  __swift_allocate_value_buffer(v0, qword_26977A780);
  __swift_project_value_buffer(v0, (uint64_t)qword_26977A780);
  return sub_24A2A7150();
}

unsigned __int8 *FusingPolicy.init(_:is:)@<X0>(unsigned __int8 *result@<X0>, unsigned char *a2@<X1>, uint64_t a3@<X8>)
{
  __int16 v3 = *result;
  unsigned __int8 v4 = result[2];
  char v5 = a2[1];
  char v6 = a2[2];
  if (result[1]) {
    __int16 v7 = 256;
  }
  else {
    __int16 v7 = 0;
  }
  *(unsigned char *)a3 = *a2;
  *(unsigned char *)(a3 + 1) = v5;
  *(unsigned char *)(a3 + 2) = v6;
  *(unsigned char *)(a3 + 5) = v4;
  *(_WORD *)(a3 + 3) = v7 | v3;
  return result;
}

unsigned __int8 *FusingPolicy.init(_:matches:)@<X0>(unsigned __int8 *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int16 v3 = *result;
  unsigned __int8 v4 = result[2];
  char v5 = *(unsigned char *)(a2 + 2);
  if (result[1]) {
    __int16 v6 = 256;
  }
  else {
    __int16 v6 = 0;
  }
  *(_WORD *)a3 = *(_WORD *)a2;
  *(unsigned char *)(a3 + 2) = v5;
  *(unsigned char *)(a3 + 5) = v4;
  *(_WORD *)(a3 + 3) = v6 | v3;
  return result;
}

unsigned char *FusingPolicy.init(is:)@<X0>(unsigned char *result@<X0>, uint64_t a2@<X8>)
{
  char v2 = result[1];
  char v3 = result[2];
  *(unsigned char *)a2 = *result;
  *(unsigned char *)(a2 + 1) = v2;
  *(unsigned char *)(a2 + 2) = v3;
  *(unsigned char *)(a2 + 5) = 0;
  *(_WORD *)(a2 + 3) = 2;
  return result;
}

uint64_t FusingPolicy.evaluate(bundle:context:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v3 + 16) = a2;
  *(unsigned char *)(v3 + 28) = *(unsigned char *)v2;
  *(_WORD *)(v3 + 29) = *(_WORD *)(v2 + 1);
  __int16 v4 = *(_WORD *)(v2 + 3);
  *(unsigned char *)(v3 + 26) = *(unsigned char *)(v2 + 5);
  *(_WORD *)(v3 + 24) = v4;
  return MEMORY[0x270FA2498](sub_24A25F740, 0, 0);
}

uint64_t sub_24A25F740()
{
  uint64_t v31 = v0;
  v30[1] = *(unsigned char **)MEMORY[0x263EF8340];
  int v1 = *(unsigned __int16 *)(v0 + 24);
  unsigned int v2 = v1 | (*(unsigned __int8 *)(v0 + 26) << 16);
  if (v1 == 2)
  {
    uint64_t v28 = **(void **)(v0 + 16);
    AttestationPolicyContext.validatedAttestation.getter((uint64_t)&v24);
    unint64_t v3 = v25;
    if (v25 >> 60 == 15
      || (uint64_t v5 = v26,
          unint64_t v4 = v27,
          uint64_t v6 = v24,
          v30[0] = 0,
          uint64_t v23 = 0,
          sub_24A1EDD20(v26, v27, v30, &v23, (uint64_t)&v28),
          sub_24A211D18(v6, v3, v5, v4),
          v29 == 2))
    {
      unint64_t v7 = 2;
LABEL_19:
      sub_24A25FBD0();
      swift_allocError();
      *(_WORD *)(v16 + 4) = WORD2(v7);
      *(_DWORD *)uint64_t v16 = v7;
      swift_willThrow();
      uint64_t v17 = *(uint64_t (**)(void))(v0 + 8);
      goto LABEL_20;
    }
    unsigned int v8 = v29 & 1;
    uint64_t v9 = (v29 >> 8) & 1;
    unint64_t v10 = v29 >> 16;
  }
  else
  {
    unsigned int v8 = v1 & 1;
    LODWORD(v9) = (v2 >> 8) & 1;
    LODWORD(v10) = HIWORD(v2);
  }
  uint64_t v11 = *(unsigned __int8 *)(v0 + 28);
  uint64_t v12 = *(unsigned __int8 *)(v0 + 29);
  BOOL v13 = v11 != 2 && v8 == ((v11 & 1) == 0);
  if (v13
    || v12 != 2 && v9 == ((v12 & 1) == 0)
    || (int v14 = *(unsigned __int8 *)(v0 + 30), v14 != 4) && v14 != v10)
  {
    BOOL v13 = v9 == 0;
    uint64_t v15 = 256;
    if (v13) {
      uint64_t v15 = 0;
    }
    unint64_t v7 = (v15 | v8) & 0xFFFFFFFFFF00FFFFLL | ((unint64_t)v10 << 16) | (v11 << 24) | (v12 << 32) | ((unint64_t)*(unsigned __int8 *)(v0 + 30) << 40);
    goto LABEL_19;
  }
  if (qword_269778568 != -1) {
    swift_once();
  }
  uint64_t v19 = sub_24A2A7160();
  __swift_project_value_buffer(v19, (uint64_t)qword_26977A780);
  uint64_t v20 = sub_24A2A7140();
  os_log_type_t v21 = sub_24A2A7B40();
  if (os_log_type_enabled(v20, v21))
  {
    int64_t v22 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)int64_t v22 = 0;
    _os_log_impl(&dword_24A19F000, v20, v21, "AttestationBundle passed FusingPolicy: device has expected fuse bits", v22, 2u);
    MEMORY[0x24C5C00A0](v22, -1, -1);
  }

  uint64_t v17 = *(uint64_t (**)(void))(v0 + 8);
LABEL_20:
  return v17();
}

BOOL static FusingPolicy.Constraints.~= infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2 = *a1;
  int v3 = a1[2];
  if (v2 != 2 && ((((v2 & 1) == 0) ^ *a2) & 1) == 0) {
    return 0;
  }
  int v5 = a1[1];
  if (v5 != 2 && ((a2[1] ^ ((v5 & 1) == 0)) & 1) == 0) {
    return 0;
  }
  return v3 == 4 || a2[2] == v3;
}

uint64_t sub_24A25FA7C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = swift_task_alloc();
  *(void *)(v3 + 16) = v5;
  *(void *)uint64_t v5 = v3;
  *(void *)(v5 + 8) = sub_24A1C50FC;
  *(void *)(v5 + 16) = a2;
  *(unsigned char *)(v5 + 28) = *(unsigned char *)v2;
  *(_WORD *)(v5 + 29) = *(_WORD *)(v2 + 1);
  __int16 v6 = *(_WORD *)(v2 + 3);
  *(unsigned char *)(v5 + 26) = *(unsigned char *)(v2 + 5);
  *(_WORD *)(v5 + 24) = v6;
  return MEMORY[0x270FA2498](sub_24A25F740, 0, 0);
}

void FusingPolicy.Constraints.productionStatus.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

void FusingPolicy.Constraints.securityMode.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 1);
}

void FusingPolicy.Constraints.securityDomain.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 2);
}

BOOL FusingPolicy.Constraints.matches(_:)(unsigned __int8 *a1)
{
  int v2 = *v1;
  int v3 = v1[2];
  if (v2 != 2 && ((*a1 ^ ((v2 & 1) == 0)) & 1) == 0) {
    return 0;
  }
  int v5 = v1[1];
  if (v5 != 2 && ((a1[1] ^ ((v5 & 1) == 0)) & 1) == 0) {
    return 0;
  }
  return v3 == 4 || a1[2] == v3;
}

unint64_t sub_24A25FBD0()
{
  unint64_t result = qword_269779A90;
  if (!qword_269779A90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269779A90);
  }
  return result;
}

uint64_t static FusingPolicy.Constraint.~= infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for FusingPolicy.Constraint();
  return FusingPolicy.Constraint.matches(_:)(a2, v3) & 1;
}

uint64_t FusingPolicy.Constraint.matches(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](a1);
  unint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v9, v11, a2);
  char v12 = 1;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v9, 1, v3) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v7, v9, v3);
    char v12 = sub_24A2A77E0();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  }
  return v12 & 1;
}

uint64_t type metadata accessor for FusingPolicy.Constraint()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_24A25FE3C()
{
  return MEMORY[0x263F8D528];
}

uint64_t __swift_memcpy6_1(uint64_t result, int *a2)
{
  int v2 = *a2;
  *(_WORD *)(result + 4) = *((_WORD *)a2 + 2);
  *(_DWORD *)unint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for DeviceModePolicy(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && a1[6]) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *a1;
  if (v3 >= 2) {
    int v4 = ((v3 + 2147483646) & 0x7FFFFFFF) - 1;
  }
  else {
    int v4 = -2;
  }
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for DeviceModePolicy(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_WORD *)(result + 4) = 0;
    *(_DWORD *)unint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 6) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 6) = 0;
    }
    if (a2) {
      *(unsigned char *)unint64_t result = a2 + 2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FusingPolicy()
{
  return &type metadata for FusingPolicy;
}

uint64_t getEnumTagSinglePayload for FusingPolicy.Constraints(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE)
  {
    if ((a2 + 33554178) >> 24)
    {
      int v2 = *((unsigned __int8 *)a1 + 3);
      if (*((unsigned char *)a1 + 3)) {
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 16776962;
      }
    }
    else
    {
      int v2 = *(unsigned __int16 *)((char *)a1 + 3);
      if (*(unsigned __int16 *)((char *)a1 + 3)) {
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 16776962;
      }
    }
  }
  unsigned int v4 = *(unsigned __int8 *)a1;
  if (v4 >= 2) {
    int v5 = ((v4 + 2147483646) & 0x7FFFFFFF) - 1;
  }
  else {
    int v5 = -2;
  }
  if (v5 < 0) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for FusingPolicy.Constraints(uint64_t result, unsigned int a2, unsigned int a3)
{
  if ((a3 + 33554178) >> 24) {
    int v3 = 1;
  }
  else {
    int v3 = 2;
  }
  if (a3 <= 0xFD) {
    int v3 = 0;
  }
  if (a2 > 0xFD)
  {
    *(_WORD *)unint64_t result = a2 - 254;
    *(unsigned char *)(result + 2) = (a2 - 254) >> 16;
    if (v3)
    {
      unsigned int v4 = ((a2 - 254) >> 24) + 1;
      if (v3 == 2) {
        *(_WORD *)(result + 3) = v4;
      }
      else {
        *(unsigned char *)(result + 3) = v4;
      }
    }
  }
  else
  {
    if (!v3) {
      goto LABEL_10;
    }
    if (v3 == 2)
    {
      *(_WORD *)(result + 3) = 0;
LABEL_10:
      if (!a2) {
        return result;
      }
LABEL_16:
      *(unsigned char *)unint64_t result = a2 + 2;
      return result;
    }
    *(unsigned char *)(result + 3) = 0;
    if (a2) {
      goto LABEL_16;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FusingPolicy.Constraints()
{
  return &type metadata for FusingPolicy.Constraints;
}

uint64_t sub_24A260038()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t *sub_24A2600B4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if (*(_DWORD *)(v6 + 84)) {
    size_t v7 = *(void *)(v6 + 64);
  }
  else {
    size_t v7 = *(void *)(v6 + 64) + 1;
  }
  uint64_t v8 = *(_DWORD *)(v6 + 80);
  if (v8 > 7 || (*(_DWORD *)(v6 + 80) & 0x100000) != 0 || v7 > 0x18)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v8 + 16) & ~v8));
    swift_retain();
  }
  else if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    memcpy(a1, a2, v7);
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

uint64_t sub_24A2601F0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(v3 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v3);
  if (!result)
  {
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8);
    return v5(a1, v3);
  }
  return result;
}

void *sub_24A2602B4(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    if (*(_DWORD *)(v6 + 84)) {
      size_t v7 = *(void *)(v6 + 64);
    }
    else {
      size_t v7 = *(void *)(v6 + 64) + 1;
    }
    memcpy(a1, a2, v7);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

void *sub_24A2603AC(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  size_t v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 1, v5);
  int v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      return a1;
    }
    int v10 = *(_DWORD *)(v6 + 84);
    size_t v11 = *(void *)(v6 + 64);
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 24))(a1, a2, v5);
      return a1;
    }
    BOOL v13 = *(void (**)(void *, uint64_t))(v6 + 8);
    uint64_t v12 = v6 + 8;
    v13(a1, v5);
    int v10 = *(_DWORD *)(v12 + 76);
    size_t v11 = *(void *)(v12 + 56);
  }
  if (v10) {
    size_t v14 = v11;
  }
  else {
    size_t v14 = v11 + 1;
  }
  memcpy(a1, a2, v14);
  return a1;
}

void *sub_24A260518(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    if (*(_DWORD *)(v6 + 84)) {
      size_t v7 = *(void *)(v6 + 64);
    }
    else {
      size_t v7 = *(void *)(v6 + 64) + 1;
    }
    memcpy(a1, a2, v7);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(a1, a2, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

void *sub_24A260610(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  size_t v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 1, v5);
  int v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 32))(a1, a2, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      return a1;
    }
    int v10 = *(_DWORD *)(v6 + 84);
    size_t v11 = *(void *)(v6 + 64);
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 40))(a1, a2, v5);
      return a1;
    }
    BOOL v13 = *(void (**)(void *, uint64_t))(v6 + 8);
    uint64_t v12 = v6 + 8;
    v13(a1, v5);
    int v10 = *(_DWORD *)(v12 + 76);
    size_t v11 = *(void *)(v12 + 56);
  }
  if (v10) {
    size_t v14 = v11;
  }
  else {
    size_t v14 = v11 + 1;
  }
  memcpy(a1, a2, v14);
  return a1;
}

uint64_t sub_24A26077C(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  unsigned int v6 = v5 - 1;
  if (!v5) {
    unsigned int v6 = 0;
  }
  uint64_t v7 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  if (!v5) {
    ++v7;
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v6;
  if (a2 > v6)
  {
    char v9 = 8 * v7;
    if (v7 > 3) {
      goto LABEL_8;
    }
    unsigned int v11 = ((v8 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      int v10 = *(_DWORD *)((char *)a1 + v7);
      if (v10) {
        goto LABEL_15;
      }
    }
    else
    {
      if (v11 <= 0xFF)
      {
        if (v11 < 2) {
          goto LABEL_25;
        }
LABEL_8:
        int v10 = *((unsigned __int8 *)a1 + v7);
        if (!*((unsigned char *)a1 + v7)) {
          goto LABEL_25;
        }
LABEL_15:
        int v12 = (v10 - 1) << v9;
        if (v7 > 3) {
          int v12 = 0;
        }
        if (v7)
        {
          if (v7 <= 3) {
            int v13 = v7;
          }
          else {
            int v13 = 4;
          }
          switch(v13)
          {
            case 2:
              int v14 = *a1;
              break;
            case 3:
              int v14 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
              break;
            case 4:
              int v14 = *(_DWORD *)a1;
              break;
            default:
              int v14 = *(unsigned __int8 *)a1;
              break;
          }
        }
        else
        {
          int v14 = 0;
        }
        return v6 + (v14 | v12) + 1;
      }
      int v10 = *(unsigned __int16 *)((char *)a1 + v7);
      if (*(unsigned __int16 *)((char *)a1 + v7)) {
        goto LABEL_15;
      }
    }
  }
LABEL_25:
  if (v5 < 2) {
    return 0;
  }
  unsigned int v16 = (*(uint64_t (**)(void))(v4 + 48))();
  if (v16 >= 2) {
    return v16 - 1;
  }
  else {
    return 0;
  }
}

void sub_24A26091C(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  unsigned int v9 = v8 - 1;
  if (v8)
  {
    size_t v10 = *(void *)(v7 + 64);
  }
  else
  {
    unsigned int v9 = 0;
    size_t v10 = *(void *)(v7 + 64) + 1;
  }
  BOOL v11 = a3 >= v9;
  unsigned int v12 = a3 - v9;
  if (v12 == 0 || !v11)
  {
LABEL_13:
    if (v9 < a2) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }
  if (v10 > 3)
  {
    int v6 = 1;
    if (v9 < a2) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }
  unsigned int v13 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
  if (!HIWORD(v13))
  {
    if (v13 >= 0x100) {
      int v6 = 2;
    }
    else {
      int v6 = v13 > 1;
    }
    goto LABEL_13;
  }
  int v6 = 4;
  if (v9 < a2)
  {
LABEL_14:
    unsigned int v14 = ~v9 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v16 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v16;
          a1[2] = BYTE2(v16);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v16;
        }
        else
        {
          *a1 = v16;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v6)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_39;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
LABEL_21:
  switch(v6)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_26;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_26;
    case 3:
LABEL_39:
      __break(1u);
      JUMPOUT(0x24A260B58);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_25;
    default:
LABEL_25:
      if (a2)
      {
LABEL_26:
        if (v8 >= 2)
        {
          uint64_t v17 = *(void (**)(void))(v7 + 56);
          v17();
        }
      }
      return;
  }
}

uint64_t sub_24A260B80(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 48))(a1, 1);
}

uint64_t sub_24A260BB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)(a3 + 16) - 8) + 56))(a1, a2, 1);
}

uint64_t getEnumTagSinglePayload for FusingPolicy.Error(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && a1[6]) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 2;
  unsigned int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    unsigned int v5 = -1;
  }
  if (v5 + 1 >= 2) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t sub_24A260C34(uint64_t result, unsigned int a2)
{
  if (a2 > 0xFE)
  {
    *(_WORD *)(result + 4) = 0;
    *(_DWORD *)uint64_t result = a2 - 255;
  }
  else if (a2)
  {
    *(unsigned char *)uint64_t result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for FusingPolicy.Error()
{
  return &type metadata for FusingPolicy.Error;
}

uint64_t getEnumTagSinglePayload for DeviceModePolicy.ModeLoader(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE)
  {
    int v2 = (a2 + 16776962) >> 24 == 255 ? 2 : 1;
    int v3 = (a2 + 16776962) >> 24 ? v2 : 0;
    if (v3)
    {
      if (v3 == 2)
      {
        int v4 = *(unsigned __int16 *)((char *)a1 + 3);
        if (*(unsigned __int16 *)((char *)a1 + 3)) {
          return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v4 << 24)) - 16776962;
        }
      }
      else
      {
        int v4 = *((unsigned __int8 *)a1 + 3);
        if (*((unsigned char *)a1 + 3)) {
          return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v4 << 24)) - 16776962;
        }
      }
    }
  }
  unsigned int v6 = *(unsigned __int8 *)a1;
  BOOL v7 = v6 >= 2;
  unsigned int v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7) {
    unsigned int v8 = -1;
  }
  if (v8 + 1 >= 2) {
    return v8;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for DeviceModePolicy.ModeLoader(uint64_t result, unsigned int a2, unsigned int a3)
{
  if ((a3 + 16776962) >> 24 == 255) {
    int v3 = 2;
  }
  else {
    int v3 = 1;
  }
  if ((a3 + 16776962) >> 24) {
    int v4 = v3;
  }
  else {
    int v4 = 0;
  }
  if (a3 < 0xFE) {
    int v4 = 0;
  }
  if (a2 > 0xFD)
  {
    *(_WORD *)uint64_t result = a2 - 254;
    *(unsigned char *)(result + 2) = (a2 - 254) >> 16;
    if (v4)
    {
      unsigned int v5 = ((a2 - 254) >> 24) + 1;
      if (v4 == 2) {
        *(_WORD *)(result + 3) = v5;
      }
      else {
        *(unsigned char *)(result + 3) = v5;
      }
    }
  }
  else
  {
    if (!v4) {
      goto LABEL_13;
    }
    if (v4 == 2)
    {
      *(_WORD *)(result + 3) = 0;
LABEL_13:
      if (!a2) {
        return result;
      }
LABEL_19:
      *(unsigned char *)uint64_t result = a2 + 2;
      return result;
    }
    *(unsigned char *)(result + 3) = 0;
    if (a2) {
      goto LABEL_19;
    }
  }
  return result;
}

uint64_t sub_24A260D94(unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  BOOL v2 = v1 >= 2;
  int v3 = (v1 + 2147483646) & 0x7FFFFFFF;
  if (v2) {
    return (v3 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_24A260DB0(uint64_t result, unsigned int a2)
{
  if (a2 > 0xFE)
  {
    *(_WORD *)uint64_t result = a2 - 255;
    *(unsigned char *)(result + 2) = (a2 - 255) >> 16;
  }
  else if (a2)
  {
    *(unsigned char *)uint64_t result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for FusingPolicy.FusingLoader()
{
  return &type metadata for FusingPolicy.FusingLoader;
}

uint64_t static PolicyBuilder.buildBlock<each A>(_:)@<X0>(uint64_t *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v37 = a3;
  uint64_t v38 = a4;
  unsigned int v6 = a1;
  uint64_t v36 = a5;
  BOOL v7 = (uint64_t *)(a3 & 0xFFFFFFFFFFFFFFFELL);
  uint64_t v8 = 8 * a2;
  if (a2 == 1)
  {
    uint64_t TupleTypeMetadata = *v7;
  }
  else
  {
    MEMORY[0x270FA5388](a1);
    size_t v10 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (a2)
    {
      unint64_t v11 = 0;
      if (a2 < 4) {
        goto LABEL_9;
      }
      if ((unint64_t)(v10 - (char *)v7) < 0x20) {
        goto LABEL_9;
      }
      unint64_t v11 = a2 & 0xFFFFFFFFFFFFFFFCLL;
      unsigned int v12 = (long long *)(v7 + 2);
      unsigned int v13 = v10 + 16;
      unint64_t v14 = a2 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        long long v15 = *v12;
        *(v13 - 1) = *(v12 - 1);
        *unsigned int v13 = v15;
        v12 += 2;
        v13 += 2;
        v14 -= 4;
      }
      while (v14);
      if (v11 != a2)
      {
LABEL_9:
        unint64_t v16 = a2 - v11;
        uint64_t v17 = v11;
        uint64_t v18 = &v10[8 * v11];
        uint64_t v19 = &v7[v17];
        do
        {
          uint64_t v20 = *v19++;
          *(void *)uint64_t v18 = v20;
          v18 += 8;
          --v16;
        }
        while (v16);
      }
    }
    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  uint64_t v21 = MEMORY[0x270FA5388](TupleTypeMetadata);
  uint64_t v23 = (char *)&v35 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = MEMORY[0x270FA5388](v21);
  unint64_t v25 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    uint64_t v26 = (int *)(v24 + 32);
    unint64_t v27 = (char **)((char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
    unint64_t v28 = a2;
    do
    {
      if (a2 == 1) {
        int v29 = 0;
      }
      else {
        int v29 = *v26;
      }
      uint64_t v31 = *v7++;
      uint64_t v30 = v31;
      uint64_t v32 = &v23[v29];
      uint64_t v33 = *v6++;
      (*(void (**)(char *, uint64_t))(*(void *)(v30 - 8) + 16))(v32, v33);
      *v27++ = v32;
      v26 += 4;
      --v28;
    }
    while (v28);
  }
  return PolicyBuilder.TuplePolicy.init(policies:)((uint64_t)v25, a2, v37, v36);
}

uint64_t static PolicyBuilder.buildEither<A, B>(first:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t static PolicyBuilder.buildEither<A, B>(second:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t static PolicyBuilder.buildOptional<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_24A2A7B50();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  BOOL v7 = (char *)&v9 - v6;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v9 - v6, a1, v4);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a2, v7, v4);
}

uint64_t static PolicyBuilder.buildExpression(_:)@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t PolicyBuilder.TuplePolicy.init(policies:)@<X0>(uint64_t TupleTypeMetadata@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = (uint64_t *)TupleTypeMetadata;
  uint64_t v36 = a4;
  uint64_t v6 = (uint64_t *)(a3 & 0xFFFFFFFFFFFFFFFELL);
  if (a2 == 1)
  {
    uint64_t v7 = *v6;
  }
  else
  {
    MEMORY[0x270FA5388](TupleTypeMetadata);
    uint64_t v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (a2)
    {
      unint64_t v10 = 0;
      if (a2 < 4) {
        goto LABEL_9;
      }
      if ((unint64_t)(v9 - (char *)v6) < 0x20) {
        goto LABEL_9;
      }
      unint64_t v10 = a2 & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v11 = (long long *)(v6 + 2);
      unsigned int v12 = v9 + 16;
      unint64_t v13 = a2 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        long long v14 = *v11;
        *(v12 - 1) = *(v11 - 1);
        *unsigned int v12 = v14;
        v11 += 2;
        v12 += 2;
        v13 -= 4;
      }
      while (v13);
      if (v10 != a2)
      {
LABEL_9:
        unint64_t v15 = a2 - v10;
        uint64_t v16 = v10;
        uint64_t v17 = &v9[8 * v10];
        uint64_t v18 = &v6[v16];
        do
        {
          uint64_t v19 = *v18++;
          *(void *)uint64_t v17 = v19;
          v17 += 8;
          --v15;
        }
        while (v15);
      }
    }
    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    uint64_t v7 = TupleTypeMetadata;
  }
  uint64_t v20 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](TupleTypeMetadata);
  uint64_t v22 = (char *)&v33 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = type metadata accessor for PolicyBuilder.TuplePolicy();
  uint64_t v35 = &v33;
  uint64_t v23 = *(void *)(v34 - 8);
  MEMORY[0x270FA5388](v34);
  unint64_t v25 = (char *)&v33 - v24;
  if (a2)
  {
    uint64_t v26 = (int *)(v7 + 32);
    unint64_t v27 = a2;
    do
    {
      if (a2 == 1) {
        int v28 = 0;
      }
      else {
        int v28 = *v26;
      }
      uint64_t v30 = *v6++;
      uint64_t v29 = v30;
      uint64_t v31 = *v5++;
      (*(void (**)(char *, uint64_t))(*(void *)(v29 - 8) + 32))(&v22[v28], v31);
      v26 += 4;
      --v27;
    }
    while (v27);
  }
  (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v25, v22, v7);
  (*(void (**)(uint64_t, char *, uint64_t))(v23 + 32))(v36, v25, v34);
  return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v22, v7);
}

uint64_t type metadata accessor for PolicyBuilder.ConditionalPolicy()
{
  return swift_getGenericMetadata();
}

uint64_t PolicyBuilder.OptionalPolicy.init(policy:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_24A2A7B50();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32);

  return v5(a2, a1, v4);
}

CloudAttestation::PolicyBuilder::BooleanPolicy __swiftcall PolicyBuilder.BooleanPolicy.init(result:)(CloudAttestation::PolicyBuilder::BooleanPolicy result)
{
  v1->uint64_t result = result.result;
  return result;
}

uint64_t type metadata accessor for PolicyBuilder.TuplePolicy()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t _s16CloudAttestation13PolicyBuilderV15buildExpressionyQrxAA0bC0RzlFZ_0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(a3, a1, a2);
}

uint64_t static PolicyBuilder.build<A>(_:)(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t static PolicyBuilder.closure<each A, B>(_:)(uint64_t a1)
{
  return a1;
}

uint64_t PolicyBuilder.TuplePolicy.policies.getter@<X0>(uint64_t TupleTypeMetadata@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v4 = TupleTypeMetadata;
  unint64_t v6 = *(void *)(TupleTypeMetadata + 16);
  if (v6 == 1)
  {
    uint64_t v7 = *(void *)(*(void *)(TupleTypeMetadata + 24) & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    MEMORY[0x270FA5388](TupleTypeMetadata);
    uint64_t v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v6)
    {
      unint64_t v10 = 0;
      unint64_t v11 = *(void *)(v4 + 24) & 0xFFFFFFFFFFFFFFFELL;
      if (v6 < 4) {
        goto LABEL_9;
      }
      if ((unint64_t)&v9[-v11] < 0x20) {
        goto LABEL_9;
      }
      unint64_t v10 = v6 & 0xFFFFFFFFFFFFFFFCLL;
      unsigned int v12 = (long long *)(v11 + 16);
      unint64_t v13 = v9 + 16;
      unint64_t v14 = v6 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        long long v15 = *v12;
        *(v13 - 1) = *(v12 - 1);
        *unint64_t v13 = v15;
        v12 += 2;
        v13 += 2;
        v14 -= 4;
      }
      while (v14);
      if (v6 != v10)
      {
LABEL_9:
        unint64_t v16 = v6 - v10;
        uint64_t v17 = 8 * v10;
        uint64_t v18 = &v9[8 * v10];
        uint64_t v19 = (uint64_t *)(v11 + v17);
        do
        {
          uint64_t v20 = *v19++;
          *(void *)uint64_t v18 = v20;
          v18 += 8;
          --v16;
        }
        while (v16);
      }
    }
    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    uint64_t v7 = TupleTypeMetadata;
  }
  MEMORY[0x270FA5388](TupleTypeMetadata);
  uint64_t v22 = (char *)&v32 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 16))(v22, v3, v7);
  if (v6)
  {
    unint64_t v25 = (uint64_t *)(*(void *)(v4 + 24) & 0xFFFFFFFFFFFFFFFELL);
    uint64_t v26 = (int *)(v7 + 32);
    unint64_t v27 = v6;
    do
    {
      if (v6 == 1) {
        int v28 = 0;
      }
      else {
        int v28 = *v26;
      }
      uint64_t v30 = *v25++;
      uint64_t v29 = v30;
      uint64_t v31 = *a2++;
      uint64_t result = (*(uint64_t (**)(uint64_t, char *))(*(void *)(v29 - 8) + 32))(v31, &v22[v28]);
      v26 += 4;
      --v27;
    }
    while (v27);
  }
  return result;
}

uint64_t PolicyBuilder.TuplePolicy.evaluate(bundle:context:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  unint64_t v6 = *(void *)(a3 + 16);
  v4[6] = v6;
  if (v6 == 1)
  {
    uint64_t TupleTypeMetadata = *(void *)(*(void *)(a3 + 24) & 0xFFFFFFFFFFFFFFFELL);
    unint64_t v8 = 16;
  }
  else
  {
    unint64_t v8 = (8 * v6 + 15) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v9 = swift_task_alloc();
    if (v6)
    {
      unint64_t v10 = 0;
      unint64_t v11 = *(void *)(a3 + 24) & 0xFFFFFFFFFFFFFFFELL;
      if (v6 < 4) {
        goto LABEL_9;
      }
      if (v9 - v11 < 0x20) {
        goto LABEL_9;
      }
      unint64_t v10 = v6 & 0xFFFFFFFFFFFFFFFCLL;
      unsigned int v12 = (long long *)(v11 + 16);
      unint64_t v13 = (_OWORD *)(v9 + 16);
      unint64_t v14 = v6 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        long long v15 = *v12;
        *(v13 - 1) = *(v12 - 1);
        *unint64_t v13 = v15;
        v12 += 2;
        v13 += 2;
        v14 -= 4;
      }
      while (v14);
      if (v6 != v10)
      {
LABEL_9:
        unint64_t v16 = v6 - v10;
        uint64_t v17 = 8 * v10;
        uint64_t v18 = (void *)(v9 + 8 * v10);
        uint64_t v19 = (uint64_t *)(v11 + v17);
        do
        {
          uint64_t v20 = *v19++;
          *v18++ = v20;
          --v16;
        }
        while (v16);
      }
    }
    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    swift_task_dealloc();
  }
  v4[7] = v8;
  v4[8] = TupleTypeMetadata;
  v4[9] = *(void *)(TupleTypeMetadata - 8);
  v4[10] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_24A2619F0, 0, 0);
}

uint64_t sub_24A2619F0()
{
  uint64_t v1 = v0[6];
  uint64_t v2 = (uint64_t *)swift_task_alloc();
  v0[11] = v2;
  if (v1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = 32;
    do
    {
      uint64_t v6 = v0[6];
      if (v6 == 1) {
        int v5 = 0;
      }
      else {
        int v5 = *(_DWORD *)(v0[8] + v4);
      }
      v2[v3++] = v0[10] + v5;
      v4 += 16;
    }
    while (v3 != v6);
    uint64_t v7 = v0[4];
    PolicyBuilder.TuplePolicy.policies.getter(v7, v2);
    unint64_t v8 = *(void *)(v7 + 24);
    v0[12] = v8;
    v8 &= ~1uLL;
    uint64_t v9 = *(void *)(v7 + 32);
    v0[13] = v9;
    v0[14] = 0;
    uint64_t v10 = *(void *)v8;
    v0[15] = *(void *)v8;
    uint64_t v11 = *(void *)(v9 & 0xFFFFFFFFFFFFFFFELL);
    uint64_t v12 = *(void *)(v10 - 8);
    v0[16] = v12;
    v0[17] = swift_task_alloc();
    (*(void (**)(void))(v12 + 16))();
    uint64_t v18 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 + 8) + **(int **)(v11 + 8));
    unint64_t v13 = (void *)swift_task_alloc();
    v0[18] = v13;
    *unint64_t v13 = v0;
    v13[1] = sub_24A261C84;
    uint64_t v15 = v0[2];
    uint64_t v14 = v0[3];
    return v18(v15, v14, v10, v11);
  }
  else
  {
    PolicyBuilder.TuplePolicy.policies.getter(v0[4], v2);
    (*(void (**)(void, void))(v0[9] + 8))(v0[10], v0[8]);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v17 = (uint64_t (*)(void))v0[1];
    return v17();
  }
}

uint64_t sub_24A261C84()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 152) = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v2[16] + 8))(v2[17], v2[15]);
  if (v0)
  {
    uint64_t v3 = sub_24A26202C;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v3 = sub_24A261DF8;
  }
  return MEMORY[0x270FA2498](v3, 0, 0);
}

uint64_t sub_24A261DF8()
{
  uint64_t v1 = v0[14] + 1;
  if (v1 == v0[6])
  {
    (*(void (**)(void, void))(v0[9] + 8))(v0[10], v0[8]);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v2 = (uint64_t (*)(void))v0[1];
    return v2();
  }
  else
  {
    v0[14] = v1;
    unint64_t v4 = v0[13] & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v5 = *(void *)((v0[12] & 0xFFFFFFFFFFFFFFFELL) + 8 * v1);
    v0[15] = v5;
    uint64_t v6 = *(void *)(v4 + 8 * v1);
    uint64_t v7 = *(void *)(v5 - 8);
    v0[16] = v7;
    v0[17] = swift_task_alloc();
    (*(void (**)(void))(v7 + 16))();
    uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 + 8) + **(int **)(v6 + 8));
    unint64_t v8 = (void *)swift_task_alloc();
    v0[18] = v8;
    *unint64_t v8 = v0;
    v8[1] = sub_24A261C84;
    uint64_t v10 = v0[2];
    uint64_t v9 = v0[3];
    return v11(v10, v9, v5, v6);
  }
}

uint64_t sub_24A26202C()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[8];
  uint64_t v3 = v0[9];
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_24A2620C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_24A1DA244;
  return PolicyBuilder.TuplePolicy.evaluate(bundle:context:)(a1, a2, a3);
}

uint64_t PolicyBuilder.EmptyPolicy.evaluate(bundle:context:)()
{
  return sub_24A2621AC(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_24A2621AC(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_24A2621B8()
{
  return sub_24A2621AC(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t PolicyBuilder.BooleanPolicy.result.getter()
{
  return *v0;
}

uint64_t PolicyBuilder.BooleanPolicy.evaluate(bundle:context:)()
{
  *(void *)(v1 + 16) = v0;
  return MEMORY[0x270FA2498](sub_24A262218, 0, 0);
}

uint64_t sub_24A262218()
{
  if (**(unsigned char **)(v0 + 16) != 1)
  {
    sub_24A2622C0();
    swift_allocError();
    swift_willThrow();
  }
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

unint64_t sub_24A2622C0()
{
  unint64_t result = qword_269779B38;
  if (!qword_269779B38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269779B38);
  }
  return result;
}

uint64_t sub_24A262314()
{
  *(void *)(v1 + 16) = v0;
  return MEMORY[0x270FA2498](sub_24A262218, 0, 0);
}

uint64_t PolicyBuilder.OptionalPolicy.policy.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_24A2A7B50();
  unint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t PolicyBuilder.OptionalPolicy.evaluate(bundle:context:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  uint64_t v5 = *(void *)(a3 + 16);
  v4[6] = v5;
  uint64_t v6 = sub_24A2A7B50();
  v4[7] = v6;
  v4[8] = *(void *)(v6 - 8);
  v4[9] = swift_task_alloc();
  v4[10] = *(void *)(v5 - 8);
  v4[11] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_24A2624C0, 0, 0);
}

uint64_t sub_24A2624C0()
{
  uint64_t v1 = v0[9];
  uint64_t v2 = v0[10];
  uint64_t v4 = v0[5];
  uint64_t v3 = v0[6];
  uint64_t v5 = sub_24A2A7B50();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(v1, v4, v5);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3) == 1)
  {
    (*(void (**)(void, void))(v0[8] + 8))(v0[9], v0[7]);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = (uint64_t (*)(void))v0[1];
    return v6();
  }
  else
  {
    uint64_t v8 = v0[4];
    (*(void (**)(void, void, void))(v0[10] + 32))(v0[11], v0[9], v0[6]);
    uint64_t v9 = *(void *)(v8 + 24);
    uint64_t v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 + 8) + **(int **)(v9 + 8));
    uint64_t v10 = (void *)swift_task_alloc();
    v0[12] = v10;
    *uint64_t v10 = v0;
    v10[1] = sub_24A2626BC;
    uint64_t v11 = v0[6];
    uint64_t v13 = v0[2];
    uint64_t v12 = v0[3];
    return v14(v13, v12, v11, v9);
  }
}

uint64_t sub_24A2626BC()
{
  *(void *)(*(void *)v1 + 104) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_24A26285C;
  }
  else {
    uint64_t v2 = sub_24A2627D0;
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

uint64_t sub_24A2627D0()
{
  (*(void (**)(void, void))(v0[10] + 8))(v0[11], v0[6]);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_24A26285C()
{
  (*(void (**)(void, void))(v0[10] + 8))(v0[11], v0[6]);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_24A2628E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_24A1DA244;
  return PolicyBuilder.OptionalPolicy.evaluate(bundle:context:)(a1, a2, a3);
}

uint64_t PolicyBuilder.ConditionalPolicy.evaluate(bundle:context:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  uint64_t v6 = *(void *)(a3 + 24);
  v4[6] = v6;
  v4[7] = *(void *)(v6 - 8);
  v4[8] = swift_task_alloc();
  uint64_t v7 = *(void *)(a3 + 16);
  v4[9] = v7;
  v4[10] = *(void *)(v7 - 8);
  v4[11] = swift_task_alloc();
  v4[12] = *(void *)(a3 - 8);
  v4[13] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_24A262B00, 0, 0);
}

uint64_t sub_24A262B00()
{
  (*(void (**)(void, void, void))(v0[12] + 16))(v0[13], v0[5], v0[4]);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v6 = v0[4];
    (*(void (**)(void, void, void))(v0[7] + 32))(v0[8], v0[13], v0[6]);
    uint64_t v3 = *(void *)(v6 + 40);
    uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 + 8) + **(int **)(v3 + 8));
    uint64_t v7 = (void *)swift_task_alloc();
    v0[16] = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_24A262F14;
    uint64_t v5 = v0[6];
  }
  else
  {
    if (EnumCaseMultiPayload) {
      return sub_24A2A7D20();
    }
    uint64_t v2 = v0[4];
    (*(void (**)(void, void, void))(v0[10] + 32))(v0[11], v0[13], v0[9]);
    uint64_t v3 = *(void *)(v2 + 32);
    uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 + 8) + **(int **)(v3 + 8));
    uint64_t v4 = (void *)swift_task_alloc();
    v0[14] = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_24A262D64;
    uint64_t v5 = v0[9];
  }
  uint64_t v9 = v0[2];
  uint64_t v8 = v0[3];
  return v11(v9, v8, v5, v3);
}

uint64_t sub_24A262D64()
{
  *(void *)(*(void *)v1 + 120) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_24A2630C8;
  }
  else {
    uint64_t v2 = sub_24A262E78;
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

uint64_t sub_24A262E78()
{
  (*(void (**)(void, void))(v0[10] + 8))(v0[11], v0[9]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_24A262F14()
{
  *(void *)(*(void *)v1 + 136) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_24A263164;
  }
  else {
    uint64_t v2 = sub_24A263028;
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

uint64_t sub_24A263028()
{
  (*(void (**)(void, void))(v0[7] + 8))(v0[8], v0[6]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_24A2630C8()
{
  (*(void (**)(void, void))(v0[10] + 8))(v0[11], v0[9]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_24A263164()
{
  (*(void (**)(void, void))(v0[7] + 8))(v0[8], v0[6]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_24A263204(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_24A1C50FC;
  return PolicyBuilder.ConditionalPolicy.evaluate(bundle:context:)(a1, a2, a3);
}

uint64_t static PolicyBuilder.Error.== infix(_:_:)()
{
  return 1;
}

uint64_t PolicyBuilder.Error.hash(into:)()
{
  return sub_24A2A7F20();
}

uint64_t PolicyBuilder.Error.hashValue.getter()
{
  return sub_24A2A7F50();
}

unint64_t sub_24A263328()
{
  unint64_t result = qword_269779B78;
  if (!qword_269779B78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269779B78);
  }
  return result;
}

ValueMetadata *type metadata accessor for PolicyBuilder()
{
  return &type metadata for PolicyBuilder;
}

uint64_t sub_24A26338C(uint64_t a1)
{
  if (*(void *)(a1 + 16) == 1)
  {
    uint64_t result = swift_checkMetadataState();
    if (v3 > 0x3F) {
      return result;
    }
LABEL_13:
    v19[1] = *(void *)(result - 8) + 64;
    swift_initStructMetadata();
    return 0;
  }
  MEMORY[0x270FA5388](a1);
  uint64_t v6 = (char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v4)
  {
    unint64_t v7 = 0;
    unint64_t v8 = *(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL;
    if (v4 < 4) {
      goto LABEL_10;
    }
    if ((unint64_t)&v6[-v8] < 0x20) {
      goto LABEL_10;
    }
    unint64_t v7 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    uint64_t v9 = (long long *)(v8 + 16);
    uint64_t v10 = v6 + 16;
    unint64_t v11 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      long long v12 = *v9;
      *(v10 - 1) = *(v9 - 1);
      *uint64_t v10 = v12;
      v9 += 2;
      v10 += 2;
      v11 -= 4;
    }
    while (v11);
    if (v4 != v7)
    {
LABEL_10:
      unint64_t v13 = v4 - v7;
      uint64_t v14 = 8 * v7;
      uint64_t v15 = &v6[8 * v7];
      unint64_t v16 = (uint64_t *)(v8 + v14);
      do
      {
        uint64_t v17 = *v16++;
        *(void *)uint64_t v15 = v17;
        v15 += 8;
        --v13;
      }
      while (v13);
    }
  }
  uint64_t result = swift_getTupleTypeMetadata();
  if (v18 <= 0x3F) {
    goto LABEL_13;
  }
  return result;
}

uint64_t sub_24A2634F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16) == 1)
  {
    uint64_t TupleTypeMetadata = *(void *)(*(void *)(a3 + 24) & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    MEMORY[0x270FA5388](a1);
    uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v6)
    {
      unint64_t v10 = 0;
      unint64_t v11 = *(void *)(v7 + 24) & 0xFFFFFFFFFFFFFFFELL;
      if (v6 < 4) {
        goto LABEL_9;
      }
      if ((unint64_t)&v9[-v11] < 0x20) {
        goto LABEL_9;
      }
      unint64_t v10 = v6 & 0xFFFFFFFFFFFFFFFCLL;
      long long v12 = (long long *)(v11 + 16);
      unint64_t v13 = v9 + 16;
      unint64_t v14 = v6 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        long long v15 = *v12;
        *(v13 - 1) = *(v12 - 1);
        *unint64_t v13 = v15;
        v12 += 2;
        v13 += 2;
        v14 -= 4;
      }
      while (v14);
      if (v6 != v10)
      {
LABEL_9:
        unint64_t v16 = v6 - v10;
        uint64_t v17 = 8 * v10;
        unint64_t v18 = &v9[8 * v10];
        uint64_t v19 = (uint64_t *)(v11 + v17);
        do
        {
          uint64_t v20 = *v19++;
          *(void *)unint64_t v18 = v20;
          v18 += 8;
          --v16;
        }
        while (v16);
      }
    }
    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  return (**(uint64_t (***)(uint64_t, uint64_t))(TupleTypeMetadata - 8))(a1, a2);
}

uint64_t sub_24A26362C(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16) == 1)
  {
    uint64_t TupleTypeMetadata = *(void *)(*(void *)(a2 + 24) & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    MEMORY[0x270FA5388](a1);
    uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v4)
    {
      unint64_t v8 = 0;
      unint64_t v9 = *(void *)(v5 + 24) & 0xFFFFFFFFFFFFFFFELL;
      if (v4 < 4) {
        goto LABEL_9;
      }
      if ((unint64_t)&v7[-v9] < 0x20) {
        goto LABEL_9;
      }
      unint64_t v8 = v4 & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v10 = (long long *)(v9 + 16);
      unint64_t v11 = v7 + 16;
      unint64_t v12 = v4 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        long long v13 = *v10;
        *(v11 - 1) = *(v10 - 1);
        *unint64_t v11 = v13;
        v10 += 2;
        v11 += 2;
        v12 -= 4;
      }
      while (v12);
      if (v4 != v8)
      {
LABEL_9:
        unint64_t v14 = v4 - v8;
        uint64_t v15 = 8 * v8;
        unint64_t v16 = &v7[8 * v8];
        uint64_t v17 = (uint64_t *)(v9 + v15);
        do
        {
          uint64_t v18 = *v17++;
          *(void *)unint64_t v16 = v18;
          v16 += 8;
          --v14;
        }
        while (v14);
      }
    }
    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)(TupleTypeMetadata - 8) + 8))(a1);
}

uint64_t sub_24A263758(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16) == 1)
  {
    uint64_t TupleTypeMetadata = *(void *)(*(void *)(a3 + 24) & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    MEMORY[0x270FA5388](a1);
    unint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v6)
    {
      unint64_t v10 = 0;
      unint64_t v11 = *(void *)(v7 + 24) & 0xFFFFFFFFFFFFFFFELL;
      if (v6 < 4) {
        goto LABEL_9;
      }
      if ((unint64_t)&v9[-v11] < 0x20) {
        goto LABEL_9;
      }
      unint64_t v10 = v6 & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v12 = (long long *)(v11 + 16);
      long long v13 = v9 + 16;
      unint64_t v14 = v6 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        long long v15 = *v12;
        *(v13 - 1) = *(v12 - 1);
        *long long v13 = v15;
        v12 += 2;
        v13 += 2;
        v14 -= 4;
      }
      while (v14);
      if (v6 != v10)
      {
LABEL_9:
        unint64_t v16 = v6 - v10;
        uint64_t v17 = 8 * v10;
        uint64_t v18 = &v9[8 * v10];
        uint64_t v19 = (uint64_t *)(v11 + v17);
        do
        {
          uint64_t v20 = *v19++;
          *(void *)uint64_t v18 = v20;
          v18 += 8;
          --v16;
        }
        while (v16);
      }
    }
    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)(TupleTypeMetadata - 8) + 16))(a1, a2);
  return a1;
}

uint64_t sub_24A263898(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16) == 1)
  {
    uint64_t TupleTypeMetadata = *(void *)(*(void *)(a3 + 24) & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    MEMORY[0x270FA5388](a1);
    unint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v6)
    {
      unint64_t v10 = 0;
      unint64_t v11 = *(void *)(v7 + 24) & 0xFFFFFFFFFFFFFFFELL;
      if (v6 < 4) {
        goto LABEL_9;
      }
      if ((unint64_t)&v9[-v11] < 0x20) {
        goto LABEL_9;
      }
      unint64_t v10 = v6 & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v12 = (long long *)(v11 + 16);
      long long v13 = v9 + 16;
      unint64_t v14 = v6 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        long long v15 = *v12;
        *(v13 - 1) = *(v12 - 1);
        *long long v13 = v15;
        v12 += 2;
        v13 += 2;
        v14 -= 4;
      }
      while (v14);
      if (v6 != v10)
      {
LABEL_9:
        unint64_t v16 = v6 - v10;
        uint64_t v17 = 8 * v10;
        uint64_t v18 = &v9[8 * v10];
        uint64_t v19 = (uint64_t *)(v11 + v17);
        do
        {
          uint64_t v20 = *v19++;
          *(void *)uint64_t v18 = v20;
          v18 += 8;
          --v16;
        }
        while (v16);
      }
    }
    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)(TupleTypeMetadata - 8) + 24))(a1, a2);
  return a1;
}

uint64_t sub_24A2639D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16) == 1)
  {
    uint64_t TupleTypeMetadata = *(void *)(*(void *)(a3 + 24) & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    MEMORY[0x270FA5388](a1);
    unint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v6)
    {
      unint64_t v10 = 0;
      unint64_t v11 = *(void *)(v7 + 24) & 0xFFFFFFFFFFFFFFFELL;
      if (v6 < 4) {
        goto LABEL_9;
      }
      if ((unint64_t)&v9[-v11] < 0x20) {
        goto LABEL_9;
      }
      unint64_t v10 = v6 & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v12 = (long long *)(v11 + 16);
      long long v13 = v9 + 16;
      unint64_t v14 = v6 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        long long v15 = *v12;
        *(v13 - 1) = *(v12 - 1);
        *long long v13 = v15;
        v12 += 2;
        v13 += 2;
        v14 -= 4;
      }
      while (v14);
      if (v6 != v10)
      {
LABEL_9:
        unint64_t v16 = v6 - v10;
        uint64_t v17 = 8 * v10;
        uint64_t v18 = &v9[8 * v10];
        uint64_t v19 = (uint64_t *)(v11 + v17);
        do
        {
          uint64_t v20 = *v19++;
          *(void *)uint64_t v18 = v20;
          v18 += 8;
          --v16;
        }
        while (v16);
      }
    }
    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)(TupleTypeMetadata - 8) + 32))(a1, a2);
  return a1;
}

uint64_t sub_24A263B18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16) == 1)
  {
    uint64_t TupleTypeMetadata = *(void *)(*(void *)(a3 + 24) & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    MEMORY[0x270FA5388](a1);
    unint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v6)
    {
      unint64_t v10 = 0;
      unint64_t v11 = *(void *)(v7 + 24) & 0xFFFFFFFFFFFFFFFELL;
      if (v6 < 4) {
        goto LABEL_9;
      }
      if ((unint64_t)&v9[-v11] < 0x20) {
        goto LABEL_9;
      }
      unint64_t v10 = v6 & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v12 = (long long *)(v11 + 16);
      long long v13 = v9 + 16;
      unint64_t v14 = v6 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        long long v15 = *v12;
        *(v13 - 1) = *(v12 - 1);
        *long long v13 = v15;
        v12 += 2;
        v13 += 2;
        v14 -= 4;
      }
      while (v14);
      if (v6 != v10)
      {
LABEL_9:
        unint64_t v16 = v6 - v10;
        uint64_t v17 = 8 * v10;
        uint64_t v18 = &v9[8 * v10];
        uint64_t v19 = (uint64_t *)(v11 + v17);
        do
        {
          uint64_t v20 = *v19++;
          *(void *)uint64_t v18 = v20;
          v18 += 8;
          --v16;
        }
        while (v16);
      }
    }
    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)(TupleTypeMetadata - 8) + 40))(a1, a2);
  return a1;
}

uint64_t sub_24A263C58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24A263C6C);
}

uint64_t sub_24A263C6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16) == 1)
  {
    uint64_t TupleTypeMetadata = *(void *)(*(void *)(a3 + 24) & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    MEMORY[0x270FA5388](a1);
    unint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v6)
    {
      unint64_t v10 = 0;
      unint64_t v11 = *(void *)(v7 + 24) & 0xFFFFFFFFFFFFFFFELL;
      if (v6 < 4) {
        goto LABEL_9;
      }
      if ((unint64_t)&v9[-v11] < 0x20) {
        goto LABEL_9;
      }
      unint64_t v10 = v6 & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v12 = (long long *)(v11 + 16);
      long long v13 = v9 + 16;
      unint64_t v14 = v6 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        long long v15 = *v12;
        *(v13 - 1) = *(v12 - 1);
        *long long v13 = v15;
        v12 += 2;
        v13 += 2;
        v14 -= 4;
      }
      while (v14);
      if (v6 != v10)
      {
LABEL_9:
        unint64_t v16 = v6 - v10;
        uint64_t v17 = 8 * v10;
        uint64_t v18 = &v9[8 * v10];
        uint64_t v19 = (uint64_t *)(v11 + v17);
        do
        {
          uint64_t v20 = *v19++;
          *(void *)uint64_t v18 = v20;
          v18 += 8;
          --v16;
        }
        while (v16);
      }
    }
    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(TupleTypeMetadata - 8) + 48))(a1, a2);
}

uint64_t sub_24A263DA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24A263DBC);
}

uint64_t sub_24A263DBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(void *)(a4 + 16) == 1)
  {
    uint64_t TupleTypeMetadata = *(void *)(*(void *)(a4 + 24) & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    MEMORY[0x270FA5388](a1);
    unint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v7)
    {
      unint64_t v11 = 0;
      unint64_t v12 = *(void *)(v8 + 24) & 0xFFFFFFFFFFFFFFFELL;
      if (v7 < 4) {
        goto LABEL_9;
      }
      if ((unint64_t)&v10[-v12] < 0x20) {
        goto LABEL_9;
      }
      unint64_t v11 = v7 & 0xFFFFFFFFFFFFFFFCLL;
      long long v13 = (long long *)(v12 + 16);
      unint64_t v14 = v10 + 16;
      unint64_t v15 = v7 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        long long v16 = *v13;
        *(v14 - 1) = *(v13 - 1);
        _OWORD *v14 = v16;
        v13 += 2;
        v14 += 2;
        v15 -= 4;
      }
      while (v15);
      if (v7 != v11)
      {
LABEL_9:
        unint64_t v17 = v7 - v11;
        uint64_t v18 = 8 * v11;
        uint64_t v19 = &v10[8 * v11];
        uint64_t v20 = (uint64_t *)(v12 + v18);
        do
        {
          uint64_t v21 = *v20++;
          *(void *)uint64_t v19 = v21;
          v19 += 8;
          --v17;
        }
        while (v17);
      }
    }
    uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata - 8) + 56))(a1, a2, a2);
}

ValueMetadata *type metadata accessor for PolicyBuilder.EmptyPolicy()
{
  return &type metadata for PolicyBuilder.EmptyPolicy;
}

unsigned char *storeEnumTagSinglePayload for PolicyBuilder.BooleanPolicy(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24A263FD4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PolicyBuilder.BooleanPolicy()
{
  return &type metadata for PolicyBuilder.BooleanPolicy;
}

uint64_t sub_24A26400C()
{
  uint64_t result = sub_24A2A7B50();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_24A26409C(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  unsigned int v6 = v5 - 1;
  if (!v5) {
    unsigned int v6 = 0;
  }
  uint64_t v7 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  if (!v5) {
    ++v7;
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v6;
  if (a2 > v6)
  {
    char v9 = 8 * v7;
    if (v7 > 3) {
      goto LABEL_8;
    }
    unsigned int v11 = ((v8 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      int v10 = *(_DWORD *)((char *)a1 + v7);
      if (v10) {
        goto LABEL_15;
      }
    }
    else
    {
      if (v11 <= 0xFF)
      {
        if (v11 < 2) {
          goto LABEL_25;
        }
LABEL_8:
        int v10 = *((unsigned __int8 *)a1 + v7);
        if (!*((unsigned char *)a1 + v7)) {
          goto LABEL_25;
        }
LABEL_15:
        int v12 = (v10 - 1) << v9;
        if (v7 > 3) {
          int v12 = 0;
        }
        if (v7)
        {
          if (v7 <= 3) {
            int v13 = v7;
          }
          else {
            int v13 = 4;
          }
          switch(v13)
          {
            case 2:
              int v14 = *a1;
              break;
            case 3:
              int v14 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
              break;
            case 4:
              int v14 = *(_DWORD *)a1;
              break;
            default:
              int v14 = *(unsigned __int8 *)a1;
              break;
          }
        }
        else
        {
          int v14 = 0;
        }
        return v6 + (v14 | v12) + 1;
      }
      int v10 = *(unsigned __int16 *)((char *)a1 + v7);
      if (*(unsigned __int16 *)((char *)a1 + v7)) {
        goto LABEL_15;
      }
    }
  }
LABEL_25:
  if (v5 < 2) {
    return 0;
  }
  unsigned int v16 = (*(uint64_t (**)(void))(v4 + 48))();
  if (v16 >= 2) {
    return v16 - 1;
  }
  else {
    return 0;
  }
}

void sub_24A26423C(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  unsigned int v9 = v8 - 1;
  if (v8)
  {
    size_t v10 = *(void *)(v7 + 64);
  }
  else
  {
    unsigned int v9 = 0;
    size_t v10 = *(void *)(v7 + 64) + 1;
  }
  BOOL v11 = a3 >= v9;
  unsigned int v12 = a3 - v9;
  if (v12 == 0 || !v11)
  {
LABEL_13:
    if (v9 < a2) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }
  if (v10 > 3)
  {
    int v6 = 1;
    if (v9 < a2) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }
  unsigned int v13 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
  if (!HIWORD(v13))
  {
    if (v13 >= 0x100) {
      int v6 = 2;
    }
    else {
      int v6 = v13 > 1;
    }
    goto LABEL_13;
  }
  int v6 = 4;
  if (v9 < a2)
  {
LABEL_14:
    unsigned int v14 = ~v9 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v16 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v16;
          a1[2] = BYTE2(v16);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v16;
        }
        else
        {
          *a1 = v16;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v6)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_39;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
LABEL_21:
  switch(v6)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_26;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_26;
    case 3:
LABEL_39:
      __break(1u);
      JUMPOUT(0x24A264478);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_25;
    default:
LABEL_25:
      if (a2)
      {
LABEL_26:
        if (v8 >= 2)
        {
          unint64_t v17 = *(void (**)(void))(v7 + 56);
          v17();
        }
      }
      return;
  }
}

uint64_t type metadata accessor for PolicyBuilder.OptionalPolicy()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_24A2644B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 40);
}

uint64_t sub_24A2644C0()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

void *sub_24A26458C(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  int v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8);
  if (*(void *)(v5 + 64) <= *(void *)(v4 + 64)) {
    uint64_t v6 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  else {
    uint64_t v6 = *(void *)(v5 + 64);
  }
  uint64_t v7 = (*(unsigned char *)(v5 + 80) | *(unsigned char *)(v4 + 80));
  if (v7 <= 7
    && (unint64_t)(v6 + 1) <= 0x18
    && ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v4 + 80)) & 0x100000) == 0)
  {
    unsigned int v11 = a2[v6];
    unsigned int v12 = v11 - 2;
    if (v11 >= 2)
    {
      if (v6 <= 3) {
        uint64_t v13 = v6;
      }
      else {
        uint64_t v13 = 4;
      }
      switch(v13)
      {
        case 1:
          int v14 = *a2;
          goto LABEL_21;
        case 2:
          int v14 = *(unsigned __int16 *)a2;
          goto LABEL_21;
        case 3:
          int v14 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_21;
        case 4:
          int v14 = *(_DWORD *)a2;
LABEL_21:
          int v15 = (v14 | (v12 << (8 * v6))) + 2;
          unsigned int v11 = v14 + 2;
          if (v6 < 4) {
            unsigned int v11 = v15;
          }
          break;
        default:
          break;
      }
    }
    if (v11 == 1)
    {
      (*(void (**)(void *))(v5 + 16))(a1);
      *((unsigned char *)v3 + v6) = 1;
    }
    else
    {
      (*(void (**)(void *))(v4 + 16))(a1);
      *((unsigned char *)v3 + v6) = 0;
    }
  }
  else
  {
    uint64_t v10 = *(void *)a2;
    *int v3 = *(void *)a2;
    int v3 = (void *)(v10 + ((v7 + 16) & ~v7));
    swift_retain();
  }
  return v3;
}

uint64_t sub_24A264760(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 24) - 8;
  uint64_t v3 = *(void *)v2;
  unint64_t v4 = *(void *)(*(void *)v2 + 64);
  if (v4 <= *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64)) {
    unint64_t v4 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  }
  unsigned int v5 = a1[v4];
  unsigned int v6 = v5 - 2;
  if (v5 >= 2)
  {
    if (v4 <= 3) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = 4;
    }
    switch(v7)
    {
      case 1:
        int v8 = *a1;
        goto LABEL_12;
      case 2:
        int v8 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v8 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v8 = *(_DWORD *)a1;
LABEL_12:
        int v9 = (v8 | (v6 << (8 * v4))) + 2;
        unsigned int v5 = v8 + 2;
        if (v4 < 4) {
          unsigned int v5 = v9;
        }
        break;
      default:
        break;
    }
  }
  if (v5 == 1) {
    uint64_t v10 = v3;
  }
  else {
    uint64_t v10 = *(void *)(*(void *)(a2 + 16) - 8);
  }
  return (*(uint64_t (**)(void))(v10 + 8))();
}

uint64_t sub_24A26489C(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  if (*(void *)(*(void *)(v4 - 8) + 64) <= *(void *)(v5 + 64)) {
    uint64_t v6 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  else {
    uint64_t v6 = *(void *)(*(void *)(v4 - 8) + 64);
  }
  unsigned int v7 = a2[v6];
  unsigned int v8 = v7 - 2;
  if (v7 >= 2)
  {
    if (v6 <= 3) {
      uint64_t v9 = v6;
    }
    else {
      uint64_t v9 = 4;
    }
    switch(v9)
    {
      case 1:
        int v10 = *a2;
        goto LABEL_13;
      case 2:
        int v10 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v10 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v10 = *(_DWORD *)a2;
LABEL_13:
        int v11 = (v10 | (v8 << (8 * v6))) + 2;
        unsigned int v7 = v10 + 2;
        if (v6 < 4) {
          unsigned int v7 = v11;
        }
        break;
      default:
        break;
    }
  }
  BOOL v12 = v7 == 1;
  if (v7 == 1) {
    uint64_t v5 = *(void *)(v4 - 8);
  }
  (*(void (**)(uint64_t))(v5 + 16))(a1);
  *(unsigned char *)(a1 + v6) = v12;
  return a1;
}

unsigned __int8 *sub_24A264A10(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(a3 + 24);
    uint64_t v7 = *(void *)(v5 - 8);
    uint64_t v8 = *(void *)(v6 - 8);
    if (*(void *)(v8 + 64) <= *(void *)(v7 + 64)) {
      uint64_t v9 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
    }
    else {
      uint64_t v9 = *(void *)(*(void *)(v6 - 8) + 64);
    }
    unsigned int v10 = a1[v9];
    unsigned int v11 = v10 - 2;
    if (v10 >= 2)
    {
      if (v9 <= 3) {
        uint64_t v12 = v9;
      }
      else {
        uint64_t v12 = 4;
      }
      switch(v12)
      {
        case 1:
          int v13 = *a1;
          goto LABEL_14;
        case 2:
          int v13 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v13 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v13 = *(_DWORD *)a1;
LABEL_14:
          int v14 = (v13 | (v11 << (8 * v9))) + 2;
          unsigned int v10 = v13 + 2;
          if (v9 < 4) {
            unsigned int v10 = v14;
          }
          break;
        default:
          break;
      }
    }
    if (v10 == 1) {
      uint64_t v15 = *(void *)(v6 - 8);
    }
    else {
      uint64_t v15 = *(void *)(*(void *)(a3 + 16) - 8);
    }
    if (v10 == 1) {
      uint64_t v16 = *(void *)(a3 + 24);
    }
    else {
      uint64_t v16 = *(void *)(a3 + 16);
    }
    (*(void (**)(unsigned __int8 *, uint64_t))(v15 + 8))(a1, v16);
    unsigned int v17 = a2[v9];
    unsigned int v18 = v17 - 2;
    if (v17 >= 2)
    {
      if (v9 <= 3) {
        uint64_t v19 = v9;
      }
      else {
        uint64_t v19 = 4;
      }
      switch(v19)
      {
        case 1:
          int v20 = *a2;
          goto LABEL_31;
        case 2:
          int v20 = *(unsigned __int16 *)a2;
          goto LABEL_31;
        case 3:
          int v20 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_31;
        case 4:
          int v20 = *(_DWORD *)a2;
LABEL_31:
          int v21 = (v20 | (v18 << (8 * v9))) + 2;
          unsigned int v17 = v20 + 2;
          if (v9 < 4) {
            unsigned int v17 = v21;
          }
          break;
        default:
          break;
      }
    }
    BOOL v22 = v17 == 1;
    if (v17 == 1) {
      uint64_t v23 = v8;
    }
    else {
      uint64_t v23 = v7;
    }
    if (v17 == 1) {
      uint64_t v24 = v6;
    }
    else {
      uint64_t v24 = v5;
    }
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v23 + 16))(a1, a2, v24);
    a1[v9] = v22;
  }
  return a1;
}

uint64_t sub_24A264C50(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  if (*(void *)(*(void *)(v4 - 8) + 64) <= *(void *)(v5 + 64)) {
    uint64_t v6 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  else {
    uint64_t v6 = *(void *)(*(void *)(v4 - 8) + 64);
  }
  unsigned int v7 = a2[v6];
  unsigned int v8 = v7 - 2;
  if (v7 >= 2)
  {
    if (v6 <= 3) {
      uint64_t v9 = v6;
    }
    else {
      uint64_t v9 = 4;
    }
    switch(v9)
    {
      case 1:
        int v10 = *a2;
        goto LABEL_13;
      case 2:
        int v10 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v10 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v10 = *(_DWORD *)a2;
LABEL_13:
        int v11 = (v10 | (v8 << (8 * v6))) + 2;
        unsigned int v7 = v10 + 2;
        if (v6 < 4) {
          unsigned int v7 = v11;
        }
        break;
      default:
        break;
    }
  }
  BOOL v12 = v7 == 1;
  if (v7 == 1) {
    uint64_t v5 = *(void *)(v4 - 8);
  }
  (*(void (**)(uint64_t))(v5 + 32))(a1);
  *(unsigned char *)(a1 + v6) = v12;
  return a1;
}

unsigned __int8 *sub_24A264DC4(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(a3 + 24);
    uint64_t v7 = *(void *)(v5 - 8);
    uint64_t v8 = *(void *)(v6 - 8);
    if (*(void *)(v8 + 64) <= *(void *)(v7 + 64)) {
      uint64_t v9 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
    }
    else {
      uint64_t v9 = *(void *)(*(void *)(v6 - 8) + 64);
    }
    unsigned int v10 = a1[v9];
    unsigned int v11 = v10 - 2;
    if (v10 >= 2)
    {
      if (v9 <= 3) {
        uint64_t v12 = v9;
      }
      else {
        uint64_t v12 = 4;
      }
      switch(v12)
      {
        case 1:
          int v13 = *a1;
          goto LABEL_14;
        case 2:
          int v13 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v13 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v13 = *(_DWORD *)a1;
LABEL_14:
          int v14 = (v13 | (v11 << (8 * v9))) + 2;
          unsigned int v10 = v13 + 2;
          if (v9 < 4) {
            unsigned int v10 = v14;
          }
          break;
        default:
          break;
      }
    }
    if (v10 == 1) {
      uint64_t v15 = *(void *)(v6 - 8);
    }
    else {
      uint64_t v15 = *(void *)(*(void *)(a3 + 16) - 8);
    }
    if (v10 == 1) {
      uint64_t v16 = *(void *)(a3 + 24);
    }
    else {
      uint64_t v16 = *(void *)(a3 + 16);
    }
    (*(void (**)(unsigned __int8 *, uint64_t))(v15 + 8))(a1, v16);
    unsigned int v17 = a2[v9];
    unsigned int v18 = v17 - 2;
    if (v17 >= 2)
    {
      if (v9 <= 3) {
        uint64_t v19 = v9;
      }
      else {
        uint64_t v19 = 4;
      }
      switch(v19)
      {
        case 1:
          int v20 = *a2;
          goto LABEL_31;
        case 2:
          int v20 = *(unsigned __int16 *)a2;
          goto LABEL_31;
        case 3:
          int v20 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_31;
        case 4:
          int v20 = *(_DWORD *)a2;
LABEL_31:
          int v21 = (v20 | (v18 << (8 * v9))) + 2;
          unsigned int v17 = v20 + 2;
          if (v9 < 4) {
            unsigned int v17 = v21;
          }
          break;
        default:
          break;
      }
    }
    BOOL v22 = v17 == 1;
    if (v17 == 1) {
      uint64_t v23 = v8;
    }
    else {
      uint64_t v23 = v7;
    }
    if (v17 == 1) {
      uint64_t v24 = v6;
    }
    else {
      uint64_t v24 = v5;
    }
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v23 + 32))(a1, a2, v24);
    a1[v9] = v22;
  }
  return a1;
}

uint64_t sub_24A265004(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3 = *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64);
  if (v3 <= *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64)) {
    unint64_t v3 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_22;
  }
  unint64_t v4 = v3 + 1;
  char v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    unsigned int v8 = ((a2 + ~(-1 << v5) - 254) >> v5) + 1;
    if (HIWORD(v8))
    {
      int v6 = *(_DWORD *)((char *)a1 + v4);
      if (!v6) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v8 > 0xFF)
    {
      int v6 = *(unsigned __int16 *)((char *)a1 + v4);
      if (!*(unsigned __int16 *)((char *)a1 + v4)) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v8 < 2)
    {
LABEL_22:
      unsigned int v10 = *((unsigned __int8 *)a1 + v3);
      if (v10 >= 2) {
        return (v10 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v6 = *((unsigned __int8 *)a1 + v4);
  if (!*((unsigned char *)a1 + v4)) {
    goto LABEL_22;
  }
LABEL_14:
  int v9 = (v6 - 1) << v5;
  if (v4 > 3) {
    int v9 = 0;
  }
  if (v4)
  {
    if (v4 > 3) {
      LODWORD(v4) = 4;
    }
    switch((int)v4)
    {
      case 2:
        LODWORD(v4) = *a1;
        break;
      case 3:
        LODWORD(v4) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v4) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v4) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v4 | v9) + 255;
}

void sub_24A265148(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (*(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64) > v5) {
    unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64);
  }
  size_t v6 = v5 + 1;
  if (a3 < 0xFF)
  {
    int v7 = 0;
  }
  else if (v6 <= 3)
  {
    unsigned int v10 = ((a3 + ~(-1 << (8 * v6)) - 254) >> (8 * v6)) + 1;
    if (HIWORD(v10))
    {
      int v7 = 4;
    }
    else if (v10 >= 0x100)
    {
      int v7 = 2;
    }
    else
    {
      int v7 = v10 > 1;
    }
  }
  else
  {
    int v7 = 1;
  }
  if (a2 > 0xFE)
  {
    unsigned int v8 = a2 - 255;
    if (v6 < 4)
    {
      int v9 = (v8 >> (8 * v6)) + 1;
      if (v5 != -1)
      {
        int v11 = v8 & ~(-1 << (8 * v6));
        bzero(a1, v6);
        if (v6 == 3)
        {
          *(_WORD *)a1 = v11;
          a1[2] = BYTE2(v11);
        }
        else if (v6 == 2)
        {
          *(_WORD *)a1 = v11;
        }
        else
        {
          *a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v5 + 1);
      *(_DWORD *)a1 = v8;
      int v9 = 1;
    }
    switch(v7)
    {
      case 1:
        a1[v6] = v9;
        break;
      case 2:
        *(_WORD *)&a1[v6] = v9;
        break;
      case 3:
LABEL_34:
        __break(1u);
        JUMPOUT(0x24A265320);
      case 4:
        *(_DWORD *)&a1[v6] = v9;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v7)
    {
      case 1:
        a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      case 2:
        *(_WORD *)&a1[v6] = 0;
        goto LABEL_22;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      default:
LABEL_22:
        if (a2) {
LABEL_23:
        }
          a1[v5] = -(char)a2;
        break;
    }
  }
}

uint64_t sub_24A265348(unsigned __int8 *a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 24) - 8) + 64);
  if (v2 <= *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64)) {
    unint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  }
  uint64_t v3 = a1[v2];
  int v4 = v3 - 2;
  if (v3 >= 2)
  {
    if (v2 <= 3) {
      uint64_t v5 = v2;
    }
    else {
      uint64_t v5 = 4;
    }
    switch(v5)
    {
      case 1:
        int v6 = *a1;
        goto LABEL_12;
      case 2:
        int v6 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v6 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v6 = *(_DWORD *)a1;
LABEL_12:
        unsigned int v7 = (v6 | (v4 << (8 * v2))) + 2;
        LODWORD(v3) = v6 + 2;
        if (v2 >= 4) {
          uint64_t v3 = v3;
        }
        else {
          uint64_t v3 = v7;
        }
        break;
      default:
        return v3;
    }
  }
  return v3;
}

void sub_24A265410(unsigned char *a1, unsigned int a2, uint64_t a3)
{
  if (a2 > 1)
  {
    uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8);
    if (*(void *)(v6 + 64) <= *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64)) {
      size_t v7 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
    }
    else {
      size_t v7 = *(void *)(v6 + 64);
    }
    unsigned int v8 = a2 - 2;
    if (v7 < 4)
    {
      unsigned int v9 = v8 >> (8 * v7);
      int v10 = v8 & ~(-1 << (8 * v7));
      a1[v7] = v9 + 2;
      bzero(a1, v7);
      if (v7 == 3)
      {
        *(_WORD *)a1 = v10;
        a1[2] = BYTE2(v10);
      }
      else if (v7 == 2)
      {
        *(_WORD *)a1 = v10;
      }
      else
      {
        *a1 = v10;
      }
    }
    else
    {
      a1[v7] = 2;
      bzero(a1, v7);
      *(_DWORD *)a1 = v8;
    }
  }
  else
  {
    uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
    unint64_t v5 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
    if (*(void *)(v4 + 64) > v5) {
      unint64_t v5 = *(void *)(v4 + 64);
    }
    a1[v5] = a2;
  }
}

unsigned char *storeEnumTagSinglePayload for PolicyBuilder.Error(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x24A2655D4);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for PolicyBuilder.Error()
{
  return &type metadata for PolicyBuilder.Error;
}

uint64_t sub_24A26560C(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_24A265614@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v70 = *MEMORY[0x263EF8340];
  id v5 = objc_msgSend(self, sel_sharedDataAccessor);
  *(void *)&long long v69 = 0;
  id v6 = objc_msgSend(v5, sel_copyPathForPersonalizedData_error_, 2, &v69);

  size_t v7 = (void *)v69;
  if (!v6)
  {
    id v16 = (id)v69;
    uint64_t v15 = sub_24A2A6970();

    swift_willThrow();
    goto LABEL_5;
  }
  sub_24A2A7800();
  id v8 = v7;

  uint64_t v9 = sub_24A2A69E0();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24A2A6990();
  swift_bridgeObjectRelease();
  uint64_t v13 = sub_24A2A6A00();
  uint64_t v15 = v2;
  if (v2)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
LABEL_5:
    sub_24A1C9974();
    swift_allocError();
    *(void *)uint64_t v17 = v15;
    *(void *)(v17 + 8) = 0;
    *(unsigned char *)(v17 + 16) = 1;
    return swift_willThrow();
  }
  uint64_t v19 = v13;
  unint64_t v20 = v14;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  if (MEMORY[0x263F16C40]) {
    BOOL v21 = MEMORY[0x263F16C30] == 0;
  }
  else {
    BOOL v21 = 1;
  }
  if (v21 || MEMORY[0x263F16C48] == 0 || MEMORY[0x263F16C38] == 0)
  {
    sub_24A1C9974();
    swift_allocError();
    *(void *)uint64_t v27 = 0;
    *(void *)(v27 + 8) = 0;
    *(unsigned char *)(v27 + 16) = 2;
    swift_willThrow();
    return sub_24A1A5384(v19, v20);
  }
  else
  {
    uint64_t v65 = v19;
    sub_24A2A6D10();
    uint64_t v24 = (void *)sub_24A2A6D00();
    uint64_t v25 = sub_24A2A6CF0();
    uint64_t v26 = sub_24A1CA22C(v25);

    swift_bridgeObjectRelease();
    unint64_t v60 = v20;
    uint64_t v64 = a2;
    if (qword_26B174600 != -1) {
      swift_once();
    }
    uint64_t v28 = sub_24A2A6C00();
    uint64_t v29 = __swift_project_value_buffer(v28, (uint64_t)qword_26B1768F8);
    uint64_t v30 = *(void *)(v28 - 8);
    MEMORY[0x270FA5388](v29);
    uint64_t v32 = (char *)v59 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v30 + 16))(v32);
    if (*(void *)(v26 + 16) && (unint64_t v33 = sub_24A1BE878((uint64_t)v32), (v34 & 1) != 0))
    {
      uint64_t v35 = *(void *)(*(void *)(v26 + 56) + 8 * v33);
      swift_bridgeObjectRetain();
      swift_release();
      uint64_t v36 = v32;
      uint64_t v37 = v35;
      (*(void (**)(char *, uint64_t))(v30 + 8))(v36, v28);
      uint64_t v38 = *(void *)(v35 + 16);
      if (v38)
      {
        if (a1) {
          int v39 = 1;
        }
        else {
          int v39 = 3;
        }
        int v61 = v39;
        swift_bridgeObjectRetain();
        v59[1] = v37;
        uint64_t v40 = (unsigned char *)(v37 + 64);
        uint64_t v41 = (void *)MEMORY[0x263F8EE78];
        uint64_t v42 = v65;
        do
        {
          unint64_t v44 = *((void *)v40 - 1);
          if (v44 >> 60 == 15 || *v40 == 4)
          {
            uint64_t v43 = v64;
          }
          else
          {
            uint64_t v63 = v41;
            uint64_t v47 = *((void *)v40 - 4);
            unint64_t v46 = *((void *)v40 - 3);
            uint64_t v48 = *((void *)v40 - 2);
            sub_24A1B8018(v48, v44);
            sub_24A1B8018(v48, v44);
            *(void *)&long long v62 = v46;
            sub_24A1A52B0(v47, v46);
            sub_24A1B8018(v48, v44);
            uint64_t v49 = sub_24A1B52A8(v48, v44);
            unint64_t v51 = v50;
            uint64_t v66 = v49;
            unint64_t v67 = v50;
            char v68 = v61;
            Image4Manifest.canonicalize(evaluateTrust:)(1);
            sub_24A1B7B78(v48, v44);
            sub_24A1A5384(v49, v51);
            sub_24A1A5384(v47, v62);
            sub_24A1B7B78(v48, v44);
            long long v62 = v69;
            uint64_t v41 = v63;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v41 = sub_24A1DF2CC(0, v41[2] + 1, 1, v41);
            }
            uint64_t v43 = v64;
            unint64_t v53 = v41[2];
            unint64_t v52 = v41[3];
            if (v53 >= v52 >> 1) {
              uint64_t v41 = sub_24A1DF2CC((void *)(v52 > 1), v53 + 1, 1, v41);
            }
            v41[2] = v53 + 1;
            *(_OWORD *)&v41[2 * v53 + 4] = v62;
            uint64_t v42 = v65;
          }
          v40 += 56;
          --v38;
        }
        while (v38);
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v41 = (void *)MEMORY[0x263F8EE78];
        uint64_t v43 = v64;
        uint64_t v42 = v65;
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_release();
      (*(void (**)(char *, uint64_t))(v30 + 8))(v32, v28);
      uint64_t v41 = 0;
      uint64_t v43 = v64;
      uint64_t v42 = v65;
    }
    unint64_t v54 = v60;
    sub_24A1A52B0(v42, v60);
    uint64_t v55 = sub_24A1B52A8(v42, v54);
    unint64_t v57 = v56;
    uint64_t v66 = v55;
    unint64_t v67 = v56;
    char v68 = 0;
    Image4Manifest.canonicalize(evaluateTrust:)(1);
    sub_24A1A5384(v55, v57);
    if (v41) {
      uint64_t v58 = (uint64_t)v41;
    }
    else {
      uint64_t v58 = MEMORY[0x263F8EE78];
    }
    sub_24A1E1F80(v69, *((unint64_t *)&v69 + 1), v58, v43);
    return sub_24A1A5384(v42, v54);
  }
}

uint64_t EnsembleHPKE.Leader.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v24 = a1;
  uint64_t v25 = type metadata accessor for EnsembleHPKE.Leader(0);
  MEMORY[0x270FA5388](v25);
  uint64_t v2 = (uint64_t *)((char *)&v24 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v3 = type metadata accessor for EnsembleValidator();
  uint64_t v4 = MEMORY[0x270FA5388](v3);
  id v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x270FA5388](v4);
  uint64_t v9 = (char *)&v24 - v8;
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v24 - v10;
  *(_OWORD *)&v41[8] = xmmword_24A2AB3D0;
  *((void *)&v48 + 1) = &type metadata for SEP.PhysicalDevice;
  uint64_t v49 = &protocol witness table for SEP.PhysicalDevice;
  *(_OWORD *)((char *)v27 + 8) = xmmword_24A2AB3D0;
  *((void *)&v29 + 1) = &type metadata for SEP.PhysicalDevice;
  uint64_t v30 = &protocol witness table for SEP.PhysicalDevice;
  swift_beginAccess();
  char v12 = byte_26B1730E8;
  if (byte_26B1730E8 == 10)
  {
    static Environment.default.getter(&v50);
    char v12 = v50;
  }
  else
  {
    char v50 = byte_26B1730E8;
  }
  sub_24A207C54(0, v12, (uint64_t)&v31);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v28);
  v27[6] = v37;
  long long v28 = v38;
  long long v29 = v39;
  uint64_t v30 = v40;
  v27[2] = v33;
  v27[3] = v34;
  v27[4] = v35;
  v27[5] = v36;
  v27[0] = v31;
  v27[1] = v32;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v47);
  long long v46 = v37;
  long long v47 = v38;
  long long v48 = v39;
  uint64_t v49 = v40;
  long long v42 = v33;
  long long v43 = v34;
  long long v44 = v35;
  long long v45 = v36;
  uint64_t v13 = (uint64_t)&v9[*(int *)(v3 + 52)];
  *(_OWORD *)uint64_t v41 = v31;
  *(_OWORD *)&v41[16] = v32;
  uint64_t v14 = sub_24A2A6BC0();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 1, 1, v14);
  uint64_t v15 = v26;
  sub_24A268B94((uint64_t)v6);
  sub_24A1B2D10(v13, &qword_26B173100);
  if (v15) {
    return sub_24A2696BC((uint64_t)v41);
  }
  sub_24A26A2EC((uint64_t)v6, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for EnsembleValidator);
  sub_24A26A2EC((uint64_t)v9, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for EnsembleValidator);
  uint64_t v16 = v25;
  *((unsigned char *)v2 + *(int *)(v25 + 28)) = 0;
  sub_24A269F80();
  *uint64_t v2 = v17;
  sub_24A26A2EC((uint64_t)v11, (uint64_t)v2 + *(int *)(v16 + 20), (uint64_t (*)(void))type metadata accessor for EnsembleValidator);
  unsigned int v18 = (char *)v2 + *(int *)(v16 + 24);
  long long v19 = v47;
  *((_OWORD *)v18 + 6) = v46;
  *((_OWORD *)v18 + 7) = v19;
  *((_OWORD *)v18 + 8) = v48;
  *((void *)v18 + 18) = v49;
  long long v20 = v43;
  *((_OWORD *)v18 + 2) = v42;
  *((_OWORD *)v18 + 3) = v20;
  long long v21 = v45;
  *((_OWORD *)v18 + 4) = v44;
  *((_OWORD *)v18 + 5) = v21;
  long long v22 = *(_OWORD *)&v41[16];
  *(_OWORD *)unsigned int v18 = *(_OWORD *)v41;
  *((_OWORD *)v18 + 1) = v22;
  return sub_24A26A2EC((uint64_t)v2, v24, type metadata accessor for EnsembleHPKE.Leader);
}

uint64_t EnsembleHPKE.Leader.attest()(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return MEMORY[0x270FA2498](sub_24A2660C4, 0, 0);
}

uint64_t sub_24A2660C4()
{
  uint64_t v1 = (uint64_t *)v0[3];
  type metadata accessor for EnsembleHPKE.Leader(0);
  uint64_t v2 = *v1;
  uint64_t v3 = sub_24A2A6BC0();
  v0[4] = v3;
  v0[5] = *(void *)(v3 - 8);
  uint64_t v4 = swift_task_alloc();
  v0[6] = v4;
  sub_24A2A7F90();
  sub_24A2A6B80();
  uint64_t v5 = (void *)swift_task_alloc();
  v0[7] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_24A26620C;
  uint64_t v6 = v0[2];
  return NodeAttestor.attest(key:expiration:nonce:)(v6, v2, v4, 0, 0xF000000000000000);
}

uint64_t sub_24A26620C()
{
  uint64_t v2 = (void *)*v1;
  v2[8] = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x270FA2498](sub_24A23565C, 0, 0);
  }
  else
  {
    (*(void (**)(void, void))(v2[5] + 8))(v2[6], v2[4]);
    swift_task_dealloc();
    uint64_t v3 = (uint64_t (*)(void))v2[1];
    return v3();
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> EnsembleHPKE.Leader.rekey()()
{
}

void EnsembleHPKE.Leader.sender<A, B>(for:info:policy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v9[13] = a8;
  v9[14] = v8;
  v9[11] = a4;
  v9[12] = a6;
  v9[9] = a1;
  v9[10] = a2;
  uint64_t v13 = sub_24A2A7240();
  v9[15] = v13;
  v9[16] = *(void *)(v13 - 8);
  v9[17] = swift_task_alloc();
  v9[18] = swift_task_alloc();
  v9[19] = *(void *)(a6 - 8);
  v9[20] = swift_task_alloc();
  uint64_t v14 = sub_24A2A7280();
  v9[21] = v14;
  v9[22] = *(void *)(v14 - 8);
  v9[23] = swift_task_alloc();
  v9[24] = swift_task_alloc();
  uint64_t v15 = sub_24A2A7350();
  v9[25] = v15;
  v9[26] = *(void *)(v15 - 8);
  v9[27] = swift_task_alloc();
  v9[28] = swift_task_alloc();
  uint64_t v16 = sub_24A2A7310();
  v9[29] = v16;
  v9[30] = *(void *)(v16 - 8);
  v9[31] = swift_task_alloc();
  v9[32] = swift_task_alloc();
  v9[33] = swift_task_alloc();
  v9[34] = swift_task_alloc();
  type metadata accessor for Validated.AttestationBundle(0);
  uint64_t v17 = swift_task_alloc();
  v9[35] = v17;
  v9[36] = swift_task_alloc();
  uint64_t v18 = sub_24A2A6BC0();
  v9[37] = v18;
  uint64_t v19 = *(void *)(v18 - 8);
  v9[38] = v19;
  v9[39] = *(void *)(v19 + 64);
  v9[40] = swift_task_alloc();
  uint64_t v20 = swift_task_alloc();
  v9[41] = v20;
  v9[42] = type metadata accessor for EnsembleHPKE.Leader(0);
  long long v21 = (void *)swift_task_alloc();
  v9[43] = v21;
  uint64_t v22 = type metadata accessor for EnsembleValidator();
  uint64_t v23 = sub_24A26CC14(&qword_269779BA8, (void (*)(uint64_t))type metadata accessor for EnsembleValidator);
  *long long v21 = v9;
  v21[1] = sub_24A2667DC;
  Validator.validate<A>(bundle:policy:)((uint64_t)(v9 + 2), v20, v17, a3, a5, v22, a7, v23);
}

uint64_t sub_24A2667DC()
{
  *(void *)(*(void *)v1 + 352) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_24A267340;
  }
  else {
    uint64_t v2 = sub_24A26691C;
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

CFDataRef sub_24A26691C()
{
  uint64_t v1 = *(void *)(v0 + 304);
  uint64_t v3 = *(void *)(v0 + 288);
  uint64_t v2 = *(void *)(v0 + 296);
  uint64_t v4 = *(void *)(v0 + 280);
  uint64_t v6 = *(void *)(v0 + 16);
  unint64_t v5 = *(void *)(v0 + 24);
  (*(void (**)(void, void, uint64_t))(v1 + 32))(*(void *)(v0 + 320), *(void *)(v0 + 328), v2);
  sub_24A26A2EC(v4, v3, type metadata accessor for Validated.AttestationBundle);
  swift_task_dealloc();
  uint64_t v7 = swift_task_alloc();
  sub_24A2A6BB0();
  sub_24A244A64(&qword_269778A78, MEMORY[0x270FA91E8]);
  char v8 = sub_24A2A77D0();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v1 + 8);
  v9(v7, v2);
  swift_task_dealloc();
  if (v8)
  {
    uint64_t v10 = *(void *)(v0 + 320);
    uint64_t v12 = *(void *)(v0 + 288);
    uint64_t v11 = *(void *)(v0 + 296);
    sub_24A244A10();
    swift_allocError();
    *uint64_t v13 = 0;
LABEL_7:
    swift_willThrow();
    sub_24A1CFCC8(v6, v5);
    sub_24A26CC5C(v12, type metadata accessor for Validated.AttestationBundle);
    uint64_t v18 = v10;
    uint64_t v19 = v11;
    goto LABEL_8;
  }
  if ((v5 & 0x2000000000000000) != 0)
  {
    uint64_t v10 = *(void *)(v0 + 320);
    uint64_t v12 = *(void *)(v0 + 288);
    uint64_t v11 = *(void *)(v0 + 296);
    sub_24A244A10();
    swift_allocError();
    *uint64_t v20 = 1;
    goto LABEL_7;
  }
  uint64_t v14 = *(void *)(v0 + 352);
  *(void *)(v0 + 32) = v6;
  *(void *)(v0 + 40) = v5;
  sub_24A1A52B0(v6, v5);
  sub_24A2A7300();
  if (!v14)
  {
    uint64_t v23 = *(void *)(v0 + 336);
    uint64_t v24 = *(void *)(v0 + 112);
    (*(void (**)(void, void, void))(*(void *)(v0 + 240) + 32))(*(void *)(v0 + 272), *(void *)(v0 + 264), *(void *)(v0 + 232));
    if (*(unsigned char *)(v24 + *(int *)(v23 + 28)) == 1)
    {
      uint64_t v25 = (uint64_t *)(v0 + 64);
      uint64_t v26 = *(SecKeyRef **)(v0 + 112);
      *(void *)(v0 + 64) = 0;
      CFDataRef result = SecKeyCopyExternalRepresentation(*v26, (CFErrorRef *)(v0 + 64));
      if (!result)
      {
        uint64_t v30 = *v25;
        if (!*v25)
        {
          __break(1u);
          return result;
        }
        uint64_t v72 = *(void *)(v0 + 296);
        uint64_t v76 = *(void *)(v0 + 320);
        uint64_t v69 = *(void *)(v0 + 288);
        uint64_t v31 = *(void *)(v0 + 272);
        uint64_t v32 = *(void *)(v0 + 232);
        uint64_t v33 = *(void *)(v0 + 240);
        type metadata accessor for CFError(0);
        sub_24A244A64((unint64_t *)&qword_269778E30, type metadata accessor for CFError);
        swift_allocError();
        *long long v34 = v30;
        swift_willThrow();
        sub_24A1CFCC8(v6, v5);
        (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v31, v32);
        sub_24A26CC5C(v69, type metadata accessor for Validated.AttestationBundle);
        uint64_t v19 = v72;
        uint64_t v18 = v76;
        goto LABEL_8;
      }
      CFDataRef v27 = result;
      *(void *)(v0 + 48) = sub_24A2A6AD0();
      *(void *)(v0 + 56) = v28;
      sub_24A2A7330();
      (*(void (**)(void, void, void))(*(void *)(v0 + 240) + 16))(*(void *)(v0 + 256), *(void *)(v0 + 272), *(void *)(v0 + 232));
      if (qword_269778570 != -1) {
        swift_once();
      }
      uint64_t v75 = *(void *)(v0 + 224);
      uint64_t v45 = *(void *)(v0 + 192);
      uint64_t v67 = *(void *)(v0 + 200);
      uint64_t v71 = *(void *)(v0 + 216);
      uint64_t v47 = *(void *)(v0 + 168);
      uint64_t v46 = *(void *)(v0 + 176);
      uint64_t v48 = *(void *)(v0 + 152);
      uint64_t v56 = *(void *)(v0 + 96);
      uint64_t v58 = *(void *)(v0 + 160);
      uint64_t v54 = *(void *)(v0 + 88);
      uint64_t v63 = *(void *)(v0 + 208);
      uint64_t v49 = __swift_project_value_buffer(v47, (uint64_t)qword_269779B80);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 16))(v45, v49, v47);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v48 + 16))(v58, v54, v56);
      sub_24A2A6B20();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v63 + 16))(v71, v75, v67);
      sub_24A2A7290();
      uint64_t v74 = *(void *)(v0 + 296);
      uint64_t v77 = *(void *)(v0 + 320);
      uint64_t v68 = *(void *)(v0 + 272);
      uint64_t v70 = *(void *)(v0 + 288);
      uint64_t v50 = *(void *)(v0 + 240);
      uint64_t v60 = *(void *)(v0 + 224);
      uint64_t v64 = *(void *)(v0 + 232);
      uint64_t v52 = *(void *)(v0 + 200);
      uint64_t v51 = *(void *)(v0 + 208);
      uint64_t v53 = *(void *)(v0 + 80);
      sub_24A1CFCC8(v6, v5);

      (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v60, v52);
      (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v68, v64);
    }
    else
    {
      id v29 = **(id **)(v0 + 112);
      sub_24A2A7230();
      (*(void (**)(void, void, void))(*(void *)(v0 + 240) + 16))(*(void *)(v0 + 248), *(void *)(v0 + 272), *(void *)(v0 + 232));
      if (qword_269778570 != -1) {
        swift_once();
      }
      uint64_t v36 = *(void *)(v0 + 176);
      uint64_t v35 = *(void *)(v0 + 184);
      uint64_t v37 = *(void *)(v0 + 168);
      uint64_t v59 = *(void *)(v0 + 160);
      uint64_t v38 = *(void *)(v0 + 152);
      uint64_t v73 = *(void *)(v0 + 144);
      uint64_t v39 = *(void *)(v0 + 128);
      uint64_t v61 = *(void *)(v0 + 120);
      uint64_t v65 = *(void *)(v0 + 136);
      uint64_t v57 = *(void *)(v0 + 96);
      uint64_t v55 = *(void *)(v0 + 88);
      uint64_t v40 = __swift_project_value_buffer(v37, (uint64_t)qword_269779B80);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 16))(v35, v40, v37);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 16))(v59, v55, v57);
      sub_24A2A6B20();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 16))(v65, v73, v61);
      sub_24A2A7290();
      uint64_t v74 = *(void *)(v0 + 296);
      uint64_t v77 = *(void *)(v0 + 320);
      uint64_t v66 = *(void *)(v0 + 272);
      uint64_t v70 = *(void *)(v0 + 288);
      uint64_t v41 = *(void *)(v0 + 240);
      uint64_t v62 = *(void *)(v0 + 232);
      uint64_t v42 = *(void *)(v0 + 144);
      uint64_t v43 = *(void *)(v0 + 120);
      uint64_t v44 = *(void *)(v0 + 128);
      uint64_t v53 = *(void *)(v0 + 80);
      sub_24A1CFCC8(v6, v5);
      (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v42, v43);
      (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v66, v62);
    }
    v9(v77, v74);
    sub_24A26A2EC(v70, v53, type metadata accessor for Validated.AttestationBundle);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    long long v21 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_9;
  }
  uint64_t v15 = *(void *)(v0 + 320);
  uint64_t v17 = *(void *)(v0 + 288);
  uint64_t v16 = *(void *)(v0 + 296);
  sub_24A1CFCC8(v6, v5);
  sub_24A26CC5C(v17, type metadata accessor for Validated.AttestationBundle);
  uint64_t v18 = v15;
  uint64_t v19 = v16;
LABEL_8:
  v9(v18, v19);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  long long v21 = *(uint64_t (**)(void))(v0 + 8);
LABEL_9:
  return (CFDataRef)v21();
}

uint64_t sub_24A267340()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t EnsembleHPKE.Follower.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v24 = a1;
  uint64_t v25 = type metadata accessor for EnsembleHPKE.Follower(0);
  MEMORY[0x270FA5388](v25);
  uint64_t v2 = (uint64_t *)((char *)&v24 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v3 = type metadata accessor for EnsembleValidator();
  uint64_t v4 = MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x270FA5388](v4);
  uint64_t v9 = (char *)&v24 - v8;
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v24 - v10;
  *(_OWORD *)&v41[8] = xmmword_24A2AB3D0;
  *((void *)&v48 + 1) = &type metadata for SEP.PhysicalDevice;
  uint64_t v49 = &protocol witness table for SEP.PhysicalDevice;
  *(_OWORD *)((char *)v27 + 8) = xmmword_24A2AB3D0;
  *((void *)&v29 + 1) = &type metadata for SEP.PhysicalDevice;
  uint64_t v30 = &protocol witness table for SEP.PhysicalDevice;
  swift_beginAccess();
  char v12 = byte_26B1730E8;
  if (byte_26B1730E8 == 10)
  {
    static Environment.default.getter(&v50);
    char v12 = v50;
  }
  else
  {
    char v50 = byte_26B1730E8;
  }
  sub_24A207C54(0, v12, (uint64_t)&v31);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v28);
  v27[6] = v37;
  long long v28 = v38;
  long long v29 = v39;
  uint64_t v30 = v40;
  v27[2] = v33;
  v27[3] = v34;
  v27[4] = v35;
  v27[5] = v36;
  v27[0] = v31;
  v27[1] = v32;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v47);
  long long v46 = v37;
  long long v47 = v38;
  long long v48 = v39;
  uint64_t v49 = v40;
  long long v42 = v33;
  long long v43 = v34;
  long long v44 = v35;
  long long v45 = v36;
  uint64_t v13 = (uint64_t)&v9[*(int *)(v3 + 52)];
  *(_OWORD *)uint64_t v41 = v31;
  *(_OWORD *)&v41[16] = v32;
  uint64_t v14 = sub_24A2A6BC0();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 1, 1, v14);
  uint64_t v15 = v26;
  sub_24A268B94((uint64_t)v6);
  sub_24A1B2D10(v13, &qword_26B173100);
  if (v15) {
    return sub_24A2696BC((uint64_t)v41);
  }
  sub_24A26A2EC((uint64_t)v6, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for EnsembleValidator);
  sub_24A26A2EC((uint64_t)v9, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for EnsembleValidator);
  uint64_t v16 = v25;
  *((unsigned char *)v2 + *(int *)(v25 + 28)) = 0;
  sub_24A269F80();
  *uint64_t v2 = v17;
  sub_24A26A620((uint64_t)v11, (uint64_t)v2 + *(int *)(v16 + 20));
  *((void *)&v32 + 1) = &type metadata for EnsembleAttestor;
  *(void *)&long long v33 = &protocol witness table for EnsembleAttestor;
  uint64_t v18 = swift_allocObject();
  *(void *)&long long v31 = v18;
  long long v19 = v47;
  *(_OWORD *)(v18 + 112) = v46;
  *(_OWORD *)(v18 + 128) = v19;
  *(_OWORD *)(v18 + 144) = v48;
  *(void *)(v18 + 160) = v49;
  long long v20 = v43;
  *(_OWORD *)(v18 + 48) = v42;
  *(_OWORD *)(v18 + 64) = v20;
  long long v21 = v45;
  *(_OWORD *)(v18 + 80) = v44;
  *(_OWORD *)(v18 + 96) = v21;
  long long v22 = *(_OWORD *)&v41[16];
  *(_OWORD *)(v18 + 16) = *(_OWORD *)v41;
  *(_OWORD *)(v18 + 32) = v22;
  sub_24A26CC5C((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for EnsembleValidator);
  sub_24A1B97D8(&v31, (uint64_t)v2 + *(int *)(v16 + 24));
  return sub_24A26A2EC((uint64_t)v2, v24, type metadata accessor for EnsembleHPKE.Follower);
}

uint64_t EnsembleHPKE.Follower.attest()(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return MEMORY[0x270FA2498](sub_24A267898, 0, 0);
}

uint64_t sub_24A267898()
{
  uint64_t v1 = (uint64_t *)v0[3];
  uint64_t v2 = (uint64_t *)((char *)v1 + *(int *)(type metadata accessor for EnsembleHPKE.Follower(0) + 24));
  uint64_t v4 = v2[3];
  uint64_t v3 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v4);
  uint64_t v5 = *v1;
  uint64_t v6 = (void *)swift_task_alloc();
  v0[4] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_24A239A00;
  uint64_t v7 = v0[2];
  return Attestor.attest(key:)(v7, v5, v4, v3);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> EnsembleHPKE.Follower.rekey()()
{
}

void sub_24A26799C(uint64_t (*a1)(void))
{
  if (*((unsigned char *)v1 + *(int *)(a1(0) + 28)) == 1)
  {
    sub_24A26A354();
    if (v2) {
      return;
    }
  }
  else
  {
    sub_24A269F80();
    if (v2) {
      return;
    }
  }
  uint64_t v4 = v3;

  id *v1 = v4;
}

void EnsembleHPKE.Follower.recipient<A, B>(for:encapsulatedKey:info:policy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v9[15] = v26;
  v9[16] = v8;
  v9[13] = a6;
  v9[14] = a8;
  v9[11] = a4;
  v9[12] = a5;
  v9[9] = a1;
  v9[10] = a2;
  uint64_t v12 = sub_24A2A7240();
  v9[17] = v12;
  v9[18] = *(void *)(v12 - 8);
  v9[19] = swift_task_alloc();
  v9[20] = swift_task_alloc();
  v9[21] = *(void *)(a8 - 8);
  v9[22] = swift_task_alloc();
  uint64_t v13 = sub_24A2A7280();
  v9[23] = v13;
  v9[24] = *(void *)(v13 - 8);
  v9[25] = swift_task_alloc();
  v9[26] = swift_task_alloc();
  uint64_t v14 = sub_24A2A7350();
  v9[27] = v14;
  v9[28] = *(void *)(v14 - 8);
  v9[29] = swift_task_alloc();
  v9[30] = swift_task_alloc();
  uint64_t v15 = sub_24A2A7310();
  v9[31] = v15;
  v9[32] = *(void *)(v15 - 8);
  v9[33] = swift_task_alloc();
  v9[34] = swift_task_alloc();
  v9[35] = swift_task_alloc();
  v9[36] = swift_task_alloc();
  type metadata accessor for Validated.AttestationBundle(0);
  uint64_t v16 = swift_task_alloc();
  v9[37] = v16;
  v9[38] = swift_task_alloc();
  uint64_t v17 = sub_24A2A6BC0();
  v9[39] = v17;
  uint64_t v18 = *(void *)(v17 - 8);
  v9[40] = v18;
  v9[41] = *(void *)(v18 + 64);
  v9[42] = swift_task_alloc();
  uint64_t v19 = swift_task_alloc();
  v9[43] = v19;
  v9[44] = type metadata accessor for EnsembleHPKE.Follower(0);
  long long v20 = (void *)swift_task_alloc();
  v9[45] = v20;
  uint64_t v21 = type metadata accessor for EnsembleValidator();
  uint64_t v22 = sub_24A26CC14(&qword_269779BA8, (void (*)(uint64_t))type metadata accessor for EnsembleValidator);
  *long long v20 = v9;
  v20[1] = sub_24A267E60;
  Validator.validate<A>(bundle:policy:)((uint64_t)(v9 + 2), v19, v16, a3, a7, v21, v25, v22);
}

uint64_t sub_24A267E60()
{
  *(void *)(*(void *)v1 + 368) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_24A268A44;
  }
  else {
    uint64_t v2 = sub_24A267FA0;
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

CFDataRef sub_24A267FA0()
{
  uint64_t v1 = *(void *)(v0 + 320);
  uint64_t v3 = *(void *)(v0 + 304);
  uint64_t v2 = *(void *)(v0 + 312);
  uint64_t v4 = *(void *)(v0 + 296);
  uint64_t v6 = *(void *)(v0 + 16);
  unint64_t v5 = *(void *)(v0 + 24);
  (*(void (**)(void, void, uint64_t))(v1 + 32))(*(void *)(v0 + 336), *(void *)(v0 + 344), v2);
  sub_24A26A2EC(v4, v3, type metadata accessor for Validated.AttestationBundle);
  swift_task_dealloc();
  uint64_t v7 = swift_task_alloc();
  sub_24A2A6BB0();
  sub_24A244A64(&qword_269778A78, MEMORY[0x270FA91E8]);
  char v8 = sub_24A2A77D0();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v1 + 8);
  v9(v7, v2);
  swift_task_dealloc();
  if (v8)
  {
    uint64_t v10 = *(void *)(v0 + 336);
    uint64_t v12 = *(void *)(v0 + 304);
    uint64_t v11 = *(void *)(v0 + 312);
    sub_24A244A10();
    swift_allocError();
    *uint64_t v13 = 0;
LABEL_7:
    swift_willThrow();
    sub_24A1CFCC8(v6, v5);
    sub_24A26CC5C(v12, type metadata accessor for Validated.AttestationBundle);
    uint64_t v18 = v10;
    uint64_t v19 = v11;
    goto LABEL_8;
  }
  if ((v5 & 0x2000000000000000) != 0)
  {
    uint64_t v10 = *(void *)(v0 + 336);
    uint64_t v12 = *(void *)(v0 + 304);
    uint64_t v11 = *(void *)(v0 + 312);
    sub_24A244A10();
    swift_allocError();
    *long long v20 = 1;
    goto LABEL_7;
  }
  uint64_t v14 = *(void *)(v0 + 368);
  *(void *)(v0 + 32) = v6;
  *(void *)(v0 + 40) = v5;
  sub_24A1A52B0(v6, v5);
  sub_24A2A7300();
  if (!v14)
  {
    uint64_t v23 = *(void *)(v0 + 352);
    uint64_t v24 = *(void *)(v0 + 128);
    (*(void (**)(void, void, void))(*(void *)(v0 + 256) + 32))(*(void *)(v0 + 288), *(void *)(v0 + 280), *(void *)(v0 + 248));
    if (*(unsigned char *)(v24 + *(int *)(v23 + 28)) == 1)
    {
      uint64_t v25 = (uint64_t *)(v0 + 64);
      uint64_t v26 = *(SecKeyRef **)(v0 + 128);
      *(void *)(v0 + 64) = 0;
      CFDataRef result = SecKeyCopyExternalRepresentation(*v26, (CFErrorRef *)(v0 + 64));
      if (!result)
      {
        uint64_t v30 = *v25;
        if (!*v25)
        {
          __break(1u);
          return result;
        }
        uint64_t v80 = *(void *)(v0 + 336);
        uint64_t v74 = *(void *)(v0 + 304);
        uint64_t v78 = *(void *)(v0 + 312);
        uint64_t v31 = *(void *)(v0 + 288);
        uint64_t v32 = *(void *)(v0 + 248);
        uint64_t v33 = *(void *)(v0 + 256);
        type metadata accessor for CFError(0);
        sub_24A244A64((unint64_t *)&qword_269778E30, type metadata accessor for CFError);
        swift_allocError();
        *long long v34 = v30;
        swift_willThrow();
        sub_24A1CFCC8(v6, v5);
        (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v31, v32);
        sub_24A26CC5C(v74, type metadata accessor for Validated.AttestationBundle);
        uint64_t v18 = v80;
        uint64_t v19 = v78;
        goto LABEL_8;
      }
      CFDataRef v27 = result;
      *(void *)(v0 + 48) = sub_24A2A6AD0();
      *(void *)(v0 + 56) = v28;
      sub_24A2A7330();
      (*(void (**)(void, void, void))(*(void *)(v0 + 224) + 16))(*(void *)(v0 + 232), *(void *)(v0 + 240), *(void *)(v0 + 216));
      if (qword_269778570 != -1) {
        swift_once();
      }
      uint64_t v68 = *(void *)(v0 + 272);
      uint64_t v64 = *(void *)(v0 + 256);
      uint64_t v72 = *(void *)(v0 + 248);
      uint64_t v77 = *(void *)(v0 + 288);
      uint64_t v45 = *(void *)(v0 + 208);
      uint64_t v47 = *(void *)(v0 + 184);
      uint64_t v46 = *(void *)(v0 + 192);
      uint64_t v48 = *(void *)(v0 + 168);
      uint64_t v56 = *(void *)(v0 + 112);
      uint64_t v58 = *(void *)(v0 + 176);
      uint64_t v54 = *(void *)(v0 + 104);
      uint64_t v60 = *(void *)(v0 + 88);
      unint64_t v62 = *(void *)(v0 + 96);
      uint64_t v49 = __swift_project_value_buffer(v47, (uint64_t)qword_269779B80);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 16))(v45, v49, v47);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v48 + 16))(v58, v54, v56);
      sub_24A2A6B20();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v64 + 16))(v68, v77, v72);
      sub_24A1A52B0(v60, v62);
      sub_24A2A72D0();
      uint64_t v81 = *(void *)(v0 + 336);
      uint64_t v76 = *(void *)(v0 + 304);
      uint64_t v79 = *(void *)(v0 + 312);
      uint64_t v50 = *(void *)(v0 + 256);
      uint64_t v69 = *(void *)(v0 + 248);
      uint64_t v73 = *(void *)(v0 + 288);
      uint64_t v65 = *(void *)(v0 + 240);
      uint64_t v52 = *(void *)(v0 + 216);
      uint64_t v51 = *(void *)(v0 + 224);
      uint64_t v53 = *(void *)(v0 + 80);
      sub_24A1CFCC8(v6, v5);

      (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v65, v52);
      (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v73, v69);
    }
    else
    {
      id v29 = **(id **)(v0 + 128);
      sub_24A2A7230();
      (*(void (**)(void, void, void))(*(void *)(v0 + 144) + 16))(*(void *)(v0 + 152), *(void *)(v0 + 160), *(void *)(v0 + 136));
      if (qword_269778570 != -1) {
        swift_once();
      }
      uint64_t v66 = *(void *)(v0 + 264);
      uint64_t v63 = *(void *)(v0 + 256);
      uint64_t v70 = *(void *)(v0 + 248);
      uint64_t v75 = *(void *)(v0 + 288);
      uint64_t v36 = *(void *)(v0 + 192);
      uint64_t v35 = *(void *)(v0 + 200);
      uint64_t v37 = *(void *)(v0 + 184);
      uint64_t v57 = *(void *)(v0 + 176);
      uint64_t v38 = *(void *)(v0 + 168);
      uint64_t v39 = *(void *)(v0 + 112);
      uint64_t v55 = *(void *)(v0 + 104);
      uint64_t v59 = *(void *)(v0 + 88);
      unint64_t v61 = *(void *)(v0 + 96);
      uint64_t v40 = __swift_project_value_buffer(v37, (uint64_t)qword_269779B80);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 16))(v35, v40, v37);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 16))(v57, v55, v39);
      sub_24A2A6B20();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v63 + 16))(v66, v75, v70);
      sub_24A1A52B0(v59, v61);
      sub_24A2A72D0();
      uint64_t v81 = *(void *)(v0 + 336);
      uint64_t v76 = *(void *)(v0 + 304);
      uint64_t v79 = *(void *)(v0 + 312);
      uint64_t v41 = *(void *)(v0 + 256);
      uint64_t v67 = *(void *)(v0 + 248);
      uint64_t v71 = *(void *)(v0 + 288);
      uint64_t v42 = *(void *)(v0 + 160);
      uint64_t v43 = *(void *)(v0 + 136);
      uint64_t v44 = *(void *)(v0 + 144);
      uint64_t v53 = *(void *)(v0 + 80);
      sub_24A1CFCC8(v6, v5);
      (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v42, v43);
      (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v71, v67);
    }
    v9(v81, v79);
    sub_24A26A2EC(v76, v53, type metadata accessor for Validated.AttestationBundle);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v21 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_9;
  }
  uint64_t v15 = *(void *)(v0 + 336);
  uint64_t v17 = *(void *)(v0 + 304);
  uint64_t v16 = *(void *)(v0 + 312);
  sub_24A1CFCC8(v6, v5);
  sub_24A26CC5C(v17, type metadata accessor for Validated.AttestationBundle);
  uint64_t v18 = v15;
  uint64_t v19 = v16;
LABEL_8:
  v9(v18, v19);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v21 = *(uint64_t (**)(void))(v0 + 8);
LABEL_9:
  return (CFDataRef)v21();
}

uint64_t sub_24A268A44()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_24A268B94(uint64_t a1@<X8>)
{
  uint64_t v3 = (int *)type metadata accessor for EnsembleValidator();
  uint64_t v4 = a1 + v3[13];
  uint64_t v5 = sub_24A2A6BC0();
  uint64_t v6 = *(void (**)(void))(*(void *)(v5 - 8) + 56);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v6)(v4, 1, 1, v5);
  uint64_t v7 = (uint8_t *)v3[12];
  *(void *)&v7[a1] = MEMORY[0x263F8EE78];
  sub_24A1B2D10(v4, &qword_26B173100);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v6)(v4, 1, 1, v5);
  int v8 = sub_24A24C658((uint64_t)v82);
  if (v1)
  {
    swift_bridgeObjectRelease();
    sub_24A1B2D10(v4, &qword_26B173100);
    return;
  }
  uint64_t v81 = v7;
  uint64_t v9 = v82[1];
  char v10 = v83;
  char v11 = v84;
  char v12 = v85;
  int v13 = v86;
  uint64_t v14 = a1 + v3[5];
  *(_DWORD *)uint64_t v14 = v82[0];
  *(void *)(v14 + 8) = v9;
  *(unsigned char *)(v14 + 16) = v10;
  *(unsigned char *)(v14 + 17) = v11;
  *(unsigned char *)(v14 + 18) = v12;
  *(_DWORD *)(v14 + 20) = v13;
  *(_DWORD *)(a1 + v3[6]) = v8;
  uint64_t v15 = type metadata accessor for Release();
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v17 = (char *)&v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24A265614(0, (uint64_t)v17);
  sub_24A26A2EC((uint64_t)v17, a1, (uint64_t (*)(void))type metadata accessor for Release);
  sub_24A24C9D0(v82);
  if (LOBYTE(v82[0])) {
    char v19 = 2;
  }
  else {
    char v19 = 1;
  }
  *(unsigned char *)(a1 + v3[7]) = v19;
  if (BYTE1(v82[0])) {
    char v20 = 2;
  }
  else {
    char v20 = 1;
  }
  *(unsigned char *)(a1 + v3[8]) = v20;
  if (BYTE2(v82[0])) {
    char v21 = 2;
  }
  else {
    char v21 = 1;
  }
  *(unsigned char *)(a1 + v3[9]) = v21;
  *(unsigned char *)(a1 + v3[10]) = v18 & 1;
  CFStringRef v22 = (const __CFString *)sub_24A2A77F0();
  uint64_t v80 = (char *)v22;
  uint64_t v23 = (__CFString *)sub_24A2A77F0();
  CFPropertyListRef v24 = CFPreferencesCopyAppValue(v22, v23);

  if (!v24) {
    goto LABEL_17;
  }
  CFPropertyListRef v87 = v24;
  swift_unknownObjectRetain();
  if (!swift_dynamicCast()
    || (v80 = (char *)sub_24A2A6A30(), unint64_t v26 = v25, swift_bridgeObjectRelease(), v26 >> 60 == 15))
  {
    swift_unknownObjectRelease();
LABEL_17:
    char v27 = 0;
    *(unsigned char *)(a1 + v3[14]) = 0;
    *(unsigned char *)(a1 + v3[15]) = 0;
    goto LABEL_18;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B174B48);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_24A2A8A60;
  *(void *)(inited + 32) = v80;
  uint64_t v78 = inited + 32;
  uint64_t v76 = inited;
  *(void *)(inited + 40) = v26;
  swift_unknownObjectRelease();
  *(unsigned char *)(a1 + v3[14]) = 1;
  uint64_t v36 = type metadata accessor for X509Policy();
  uint64_t v77 = &v64;
  uint64_t v37 = v36;
  MEMORY[0x270FA5388](v36);
  uint64_t v73 = (char *)v38;
  unint64_t v71 = (v38 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v80 = (char *)&v64 - v71;
  if (qword_26B174290 != -1) {
    swift_once();
  }
  uint64_t v70 = qword_26B176860;
  uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B173100);
  uint64_t v75 = &v64;
  uint64_t v65 = *(void *)(*(void *)(v39 - 8) + 64);
  MEMORY[0x270FA5388](v39 - 8);
  uint64_t v66 = (char *)((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = (char *)&v64 - v66;
  v6();
  uint64_t v41 = v37;
  uint64_t v42 = *(int *)(v37 + 24);
  uint64_t v43 = v80;
  uint64_t v72 = &v80[v42];
  uint64_t v44 = ((uint64_t (*)(void))v6)();
  uint64_t v74 = &v64;
  uint64_t v64 = v41;
  uint64_t v45 = &v43[*(int *)(v41 + 28)];
  *(void *)uint64_t v45 = 0;
  v45[8] = 1;
  uint64_t v46 = (uint64_t *)&v43[*(int *)(v41 + 32)];
  uint64_t v69 = v46;
  *uint64_t v46 = 0;
  v46[1] = 0;
  uint64_t v47 = MEMORY[0x270FA5388](v44);
  unint64_t v48 = v71;
  uint64_t v67 = (uint64_t)&v64 - v71;
  uint64_t v68 = &v64;
  MEMORY[0x270FA5388](v47);
  uint64_t v65 = (char *)&v64 - v66;
  uint64_t v49 = sub_24A1C95D4(v79, (char *)&v64 - v66);
  uint64_t v66 = (char *)&v64;
  MEMORY[0x270FA5388](v49);
  uint64_t v50 = (char *)&v64 - v48;
  uint64_t v51 = v64;
  uint64_t v73 = &v50[*(int *)(v64 + 24)];
  v6();
  uint64_t v52 = &v50[*(int *)(v51 + 28)];
  *(void *)uint64_t v52 = 0;
  v52[8] = 1;
  uint64_t v53 = (uint64_t *)&v50[*(int *)(v51 + 32)];
  uint64_t *v53 = 0;
  v53[1] = 0;
  char *v50 = 1;
  *((void *)v50 + 1) = v70;
  swift_bridgeObjectRetain();
  sub_24A1CAB90(v65, (uint64_t)v73);
  sub_24A1CF11C(*v53);
  uint64_t *v53 = 0;
  v53[1] = 0;
  *(void *)uint64_t v52 = 0;
  v52[8] = 1;
  uint64_t v54 = v67;
  sub_24A26A2EC((uint64_t)v50, v67, (uint64_t (*)(void))type metadata accessor for X509Policy);
  sub_24A1B2D10(v79, &qword_26B173100);
  sub_24A1B2D10((uint64_t)v72, &qword_26B173100);
  sub_24A1CF11C(*v69);
  uint64_t v55 = v54;
  uint64_t v56 = (uint64_t)v80;
  sub_24A26A2EC(v55, (uint64_t)v80, (uint64_t (*)(void))type metadata accessor for X509Policy);
  sub_24A270478(v76);
  sub_24A26CC5C(v56, (uint64_t (*)(void))type metadata accessor for X509Policy);
  swift_setDeallocating();
  swift_arrayDestroy();
  *(unsigned char *)(a1 + v3[15]) = 1;
  char v27 = 1;
LABEL_18:
  *(unsigned char *)(a1 + v3[16]) = v27;
  if (MEMORY[0x263F16C10]) {
    BOOL v28 = MEMORY[0x263F16C20] == 0;
  }
  else {
    BOOL v28 = 1;
  }
  if (v28
    || MEMORY[0x263F16C28] == 0
    || MEMORY[0x263F16C00] == 0
    || MEMORY[0x263F16C18] == 0
    || MEMORY[0x263F16C08] == 0)
  {
LABEL_49:
    uint64_t v57 = v3[11];
    char v58 = 2;
    goto LABEL_50;
  }
  sub_24A2A6CD0();
  uint64_t v33 = (void *)sub_24A2A6CB0();
  uint64_t v34 = sub_24A2A6CC0();
  if (v34 != 2)
  {
    if (v34 == 1)
    {
    }
    else
    {
      if (!v34)
      {

        *(unsigned char *)(a1 + v3[11]) = 0;
        return;
      }
      if (qword_269778548 != -1) {
        swift_once();
      }
      uint64_t v59 = sub_24A2A7160();
      __swift_project_value_buffer(v59, (uint64_t)qword_26977A760);
      id v60 = v33;
      unint64_t v61 = sub_24A2A7140();
      os_log_type_t v62 = sub_24A2A7B30();
      if (os_log_type_enabled(v61, v62))
      {
        uint64_t v63 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v63 = 134349056;
        uint64_t v81 = v63 + 4;
        sub_24A2A6CC0();
        v82[0] = sub_24A2A6CE0();
        sub_24A2A7B70();

        _os_log_impl(&dword_24A19F000, v61, v62, "Unknown config security policy %{public}ld, defaulting to customer", v63, 0xCu);
        MEMORY[0x24C5C00A0](v63, -1, -1);
      }
      else
      {
      }
    }
    goto LABEL_49;
  }

  uint64_t v57 = v3[11];
  char v58 = 1;
LABEL_50:
  *(unsigned char *)(a1 + v57) = v58;
}

uint64_t sub_24A2694BC()
{
  uint64_t v0 = sub_24A2A7280();
  __swift_allocate_value_buffer(v0, qword_269779B80);
  __swift_project_value_buffer(v0, (uint64_t)qword_269779B80);
  return sub_24A2A7270();
}

uint64_t static EnsembleHPKE.ciphersuite.getter@<X0>(uint64_t a1@<X8>)
{
  if (qword_269778570 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_24A2A7280();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_269779B80);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, v3, v2);
}

__n128 EnsembleHPKE.Leader.init(attestor:validator:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v7 = (int *)type metadata accessor for EnsembleHPKE.Leader(0);
  *((unsigned char *)a3 + v7[7]) = 0;
  sub_24A269F80();
  if (v3)
  {
    sub_24A26CC5C(a2, (uint64_t (*)(void))type metadata accessor for EnsembleValidator);
    sub_24A2696BC(a1);
  }
  else
  {
    *a3 = v8;
    sub_24A26A2EC(a2, (uint64_t)a3 + v7[5], (uint64_t (*)(void))type metadata accessor for EnsembleValidator);
    char v10 = (char *)a3 + v7[6];
    long long v11 = *(_OWORD *)(a1 + 112);
    *((_OWORD *)v10 + 6) = *(_OWORD *)(a1 + 96);
    *((_OWORD *)v10 + 7) = v11;
    *((_OWORD *)v10 + 8) = *(_OWORD *)(a1 + 128);
    *((void *)v10 + 18) = *(void *)(a1 + 144);
    long long v12 = *(_OWORD *)(a1 + 48);
    *((_OWORD *)v10 + 2) = *(_OWORD *)(a1 + 32);
    *((_OWORD *)v10 + 3) = v12;
    long long v13 = *(_OWORD *)(a1 + 80);
    *((_OWORD *)v10 + 4) = *(_OWORD *)(a1 + 64);
    *((_OWORD *)v10 + 5) = v13;
    __n128 result = *(__n128 *)a1;
    long long v14 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)char v10 = *(_OWORD *)a1;
    *((_OWORD *)v10 + 1) = v14;
  }
  return result;
}

uint64_t type metadata accessor for EnsembleHPKE.Leader(uint64_t a1)
{
  return sub_24A1AE704(a1, (uint64_t *)&unk_269779BD8);
}

uint64_t sub_24A2696BC(uint64_t a1)
{
  return a1;
}

uint64_t EnsembleHPKE.Leader.sender<A>(for:info:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v7[7] = a6;
  v7[8] = v6;
  v7[5] = a4;
  v7[6] = a5;
  v7[3] = a2;
  v7[4] = a3;
  v7[2] = a1;
  v7[9] = __swift_instantiateConcreteTypeFromMangledName(&qword_269779590);
  v7[10] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_24A2697B4, 0, 0);
}

void sub_24A2697B4()
{
  uint64_t v1 = v0[10];
  type metadata accessor for EnsembleHPKE.Leader(0);
  _s16CloudAttestation17EnsembleValidatorV9policyFor4udid12fingerprintsQrSS_Say10Foundation4DataVGtF_0(0, 0, 0, v1);
  uint64_t v2 = (void *)swift_task_alloc();
  v0[11] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_24A269894;
  uint64_t v4 = v0[9];
  uint64_t v3 = v0[10];
  uint64_t v5 = v0[7];
  uint64_t v6 = v0[5];
  uint64_t v7 = v0[6];
  uint64_t v8 = v0[3];
  uint64_t v9 = v0[4];
  uint64_t v10 = v0[2];
  EnsembleHPKE.Leader.sender<A, B>(for:info:policy:)(v10, v8, v9, v6, v3, v7, v4, v5);
}

uint64_t sub_24A269894()
{
  uint64_t v2 = *(void *)(*v1 + 80);
  uint64_t v3 = *v1;
  *(void *)(v3 + 96) = v0;
  swift_task_dealloc();
  sub_24A1B2D10(v2, &qword_269779590);
  if (v0)
  {
    return MEMORY[0x270FA2498](sub_24A269A00, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(void))(v3 + 8);
    return v4();
  }
}

uint64_t sub_24A269A00()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t EnsembleHPKE.Follower.init(attestor:validator:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v7 = (int *)type metadata accessor for EnsembleHPKE.Follower(0);
  *((unsigned char *)a3 + v7[7]) = 0;
  sub_24A269F80();
  if (v3)
  {
    sub_24A26CC5C(a2, (uint64_t (*)(void))type metadata accessor for EnsembleValidator);
    return sub_24A2696BC(a1);
  }
  else
  {
    *a3 = v8;
    sub_24A26A620(a2, (uint64_t)a3 + v7[5]);
    uint64_t v16 = &type metadata for EnsembleAttestor;
    uint64_t v17 = &protocol witness table for EnsembleAttestor;
    uint64_t v10 = swift_allocObject();
    *(void *)&long long v15 = v10;
    long long v11 = *(_OWORD *)(a1 + 112);
    *(_OWORD *)(v10 + 112) = *(_OWORD *)(a1 + 96);
    *(_OWORD *)(v10 + 128) = v11;
    *(_OWORD *)(v10 + 144) = *(_OWORD *)(a1 + 128);
    *(void *)(v10 + 160) = *(void *)(a1 + 144);
    long long v12 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(v10 + 48) = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(v10 + 64) = v12;
    long long v13 = *(_OWORD *)(a1 + 80);
    *(_OWORD *)(v10 + 80) = *(_OWORD *)(a1 + 64);
    *(_OWORD *)(v10 + 96) = v13;
    long long v14 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(v10 + 16) = *(_OWORD *)a1;
    *(_OWORD *)(v10 + 32) = v14;
    sub_24A26CC5C(a2, (uint64_t (*)(void))type metadata accessor for EnsembleValidator);
    return sub_24A1B97D8(&v15, (uint64_t)a3 + v7[6]);
  }
}

uint64_t EnsembleHPKE.Follower.recipient<A>(for:encapsulatedKey:info:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v9[9] = a8;
  v9[10] = v8;
  v9[7] = a6;
  v9[8] = a7;
  v9[5] = a4;
  v9[6] = a5;
  v9[3] = a2;
  v9[4] = a3;
  v9[2] = a1;
  v9[11] = __swift_instantiateConcreteTypeFromMangledName(&qword_269779590);
  v9[12] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_24A269C3C, 0, 0);
}

void sub_24A269C3C()
{
  uint64_t v1 = v0[12];
  type metadata accessor for EnsembleHPKE.Follower(0);
  _s16CloudAttestation17EnsembleValidatorV9policyFor4udid12fingerprintsQrSS_Say10Foundation4DataVGtF_0(0, 0, 0, v1);
  uint64_t v2 = (void *)swift_task_alloc();
  v0[13] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_24A269D24;
  uint64_t v3 = v0[12];
  uint64_t v4 = v0[7];
  uint64_t v5 = v0[8];
  uint64_t v6 = v0[5];
  uint64_t v7 = v0[6];
  uint64_t v8 = v0[3];
  uint64_t v9 = v0[4];
  uint64_t v10 = v0[2];
  EnsembleHPKE.Follower.recipient<A, B>(for:encapsulatedKey:info:policy:)(v10, v8, v9, v6, v7, v4, v3, v5);
}

uint64_t sub_24A269D24()
{
  uint64_t v2 = *(void *)(*v1 + 96);
  uint64_t v3 = *v1;
  *(void *)(v3 + 112) = v0;
  swift_task_dealloc();
  sub_24A1B2D10(v2, &qword_269779590);
  if (v0)
  {
    return MEMORY[0x270FA2498](sub_24A269E90, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(void))(v3 + 8);
    return v4();
  }
}

uint64_t sub_24A269E90()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

BOOL static EnsembleHPKE.Error.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t EnsembleHPKE.Error.hash(into:)()
{
  return sub_24A2A7F20();
}

uint64_t EnsembleHPKE.Error.hashValue.getter()
{
  return sub_24A2A7F50();
}

void sub_24A269F80()
{
  error[49] = *(CFErrorRef *)MEMORY[0x263EF8340];
  if (!*MEMORY[0x263F16EB8])
  {
    __break(1u);
LABEL_8:
    __break(1u);
  }
  SecAccessControlRef v37 = SecAccessControlCreateWithFlags(0, (CFTypeRef)*MEMORY[0x263F16EB8], 0x40000000uLL, 0);
  if (!v37) {
    goto LABEL_8;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_269779BF8);
  uint64_t inited = swift_initStackObject();
  uint64_t v1 = (void **)MEMORY[0x263F16FA0];
  *(_OWORD *)(inited + 16) = xmmword_24A2A8AB0;
  uint64_t v2 = *v1;
  *(void *)(inited + 32) = *v1;
  uint64_t v3 = (void *)*MEMORY[0x263F16FC0];
  type metadata accessor for CFString(0);
  *(void *)(inited + 40) = v3;
  uint64_t v4 = (void *)*MEMORY[0x263F16F90];
  *(void *)(inited + 64) = v5;
  *(void *)(inited + 72) = v4;
  uint64_t v6 = v5;
  id v7 = v2;
  id v8 = v3;
  id v9 = v4;
  uint64_t v10 = sub_24A2A7AF0();
  type metadata accessor for CFNumber(0);
  *(void *)(inited + 80) = v10;
  uint64_t v11 = (void *)*MEMORY[0x263F170C8];
  *(void *)(inited + 104) = v12;
  *(void *)(inited + 112) = v11;
  uint64_t v36 = (void *)*MEMORY[0x263F170F0];
  long long v13 = (void **)MEMORY[0x263F16F48];
  *(void *)(inited + 120) = *MEMORY[0x263F170F0];
  long long v14 = *v13;
  *(void *)(inited + 144) = v6;
  *(void *)(inited + 152) = v14;
  uint64_t v15 = MEMORY[0x263F8D4F8];
  *(unsigned char *)(inited + 160) = 0;
  uint64_t v16 = (void *)*MEMORY[0x263F174C0];
  *(void *)(inited + 184) = v15;
  *(void *)(inited + 192) = v16;
  __swift_instantiateConcreteTypeFromMangledName(&qword_269779C00);
  uint64_t v17 = swift_initStackObject();
  *(_OWORD *)(v17 + 16) = xmmword_24A2A8A70;
  char v18 = (void *)*MEMORY[0x263F173E8];
  *(void *)(v17 + 32) = *MEMORY[0x263F173E8];
  *(unsigned char *)(v17 + 40) = 1;
  char v19 = (void *)*MEMORY[0x263F173F8];
  *(void *)(v17 + 64) = v15;
  *(void *)(v17 + 72) = v19;
  *(unsigned char *)(v17 + 80) = 1;
  char v20 = (void *)*MEMORY[0x263F16E78];
  *(void *)(v17 + 104) = v15;
  *(void *)(v17 + 112) = v20;
  type metadata accessor for SecAccessControl(0);
  *(void *)(v17 + 144) = v21;
  *(void *)(v17 + 120) = v37;
  id v22 = v19;
  id v23 = v11;
  id v24 = v36;
  id v25 = v14;
  id v26 = v16;
  id v27 = v20;
  BOOL v28 = v37;
  id v29 = v18;
  sub_24A1BC1DC(v17);
  __swift_instantiateConcreteTypeFromMangledName(&qword_269779C08);
  sub_24A26CB70();
  uint64_t v30 = sub_24A2A7700();
  swift_bridgeObjectRelease();
  type metadata accessor for CFDictionary(0);
  *(void *)(inited + 224) = v31;
  *(void *)(inited + 200) = v30;
  sub_24A1BC30C(inited);
  error[0] = 0;
  sub_24A26CC14(&qword_269778878, type metadata accessor for CFString);
  CFDictionaryRef v32 = (const __CFDictionary *)sub_24A2A7700();
  swift_bridgeObjectRelease();
  SecKeyRef RandomKey = SecKeyCreateRandomKey(v32, error);

  CFErrorRef v34 = error[0];
  if (error[0])
  {
    type metadata accessor for CFError(0);
    sub_24A244A64((unint64_t *)&qword_269778E30, type metadata accessor for CFError);
    swift_allocError();
    CFErrorRef *v35 = v34;
    swift_willThrow();

LABEL_6:
    return;
  }
  if (RandomKey) {
    goto LABEL_6;
  }
  __break(1u);
}

uint64_t sub_24A26A2EC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void sub_24A26A354()
{
  error[23] = *(CFErrorRef *)MEMORY[0x263EF8340];
  uint64_t v0 = sub_24A2A7350();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)error - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24A2A7340();
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B174B88);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_24A2A8A70;
  *(void *)(inited + 32) = sub_24A2A7800();
  *(void *)(inited + 40) = v5;
  uint64_t v6 = (void *)*MEMORY[0x263F16FC0];
  type metadata accessor for CFString(0);
  uint64_t v8 = v7;
  *(void *)(inited + 72) = v7;
  *(void *)(inited + 48) = v6;
  *(void *)(inited + 80) = sub_24A2A7800();
  *(void *)(inited + 88) = v9;
  uint64_t v10 = (void *)*MEMORY[0x263F16F78];
  *(void *)(inited + 120) = v8;
  *(void *)(inited + 96) = v10;
  *(void *)(inited + 128) = sub_24A2A7800();
  *(void *)(inited + 136) = v11;
  *(void *)(inited + 168) = MEMORY[0x263F8D4F8];
  *(unsigned char *)(inited + 144) = 0;
  id v12 = v6;
  id v13 = v10;
  sub_24A1BC0A4(inited);
  error[0] = 0;
  uint64_t v14 = MEMORY[0x24C5BEAC0]();
  unint64_t v16 = v15;
  CFDataRef v17 = (const __CFData *)sub_24A2A6AA0();
  sub_24A1A5384(v14, v16);
  CFDictionaryRef v18 = (const __CFDictionary *)sub_24A2A7700();
  swift_bridgeObjectRelease();
  SecKeyRef v19 = SecKeyCreateWithData(v17, v18, error);

  if (v19) {
    goto LABEL_4;
  }
  CFErrorRef v20 = error[0];
  if (error[0])
  {
    type metadata accessor for CFError(0);
    sub_24A244A64((unint64_t *)&qword_269778E30, type metadata accessor for CFError);
    swift_allocError();
    *uint64_t v21 = v20;
    swift_willThrow();
LABEL_4:
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    return;
  }
  __break(1u);
}

uint64_t type metadata accessor for EnsembleHPKE.Follower(uint64_t a1)
{
  return sub_24A1AE704(a1, (uint64_t *)&unk_269779BE8);
}

uint64_t sub_24A26A620(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for EnsembleValidator();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_24A26A684()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 40);
  __swift_destroy_boxed_opaque_existential_1(v0 + 80);
  __swift_destroy_boxed_opaque_existential_1(v0 + 128);

  return MEMORY[0x270FA0238](v0, 168, 7);
}

unint64_t sub_24A26A6D0()
{
  unint64_t result = qword_269779BD0;
  if (!qword_269779BD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269779BD0);
  }
  return result;
}

ValueMetadata *type metadata accessor for EnsembleHPKE()
{
  return &type metadata for EnsembleHPKE;
}

void **initializeBufferWithCopyOfBuffer for EnsembleHPKE.Leader(void **a1, void **a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = (char *)*a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    id v22 = (void **)&v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain();
  }
  else
  {
    uint64_t v5 = a3[5];
    uint64_t v6 = (char *)a1 + v5;
    uint64_t v7 = (char *)a2 + v5;
    uint64_t v8 = sub_24A2A7480();
    uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16);
    uint64_t v10 = v4;
    v9(v6, v7, v8);
    uint64_t v11 = type metadata accessor for Release();
    *(void *)&v6[*(int *)(v11 + 20)] = *(void *)&v7[*(int *)(v11 + 20)];
    id v12 = (int *)type metadata accessor for EnsembleValidator();
    uint64_t v13 = v12[5];
    uint64_t v14 = &v6[v13];
    unint64_t v15 = &v7[v13];
    *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
    *((void *)v14 + 2) = *((void *)v15 + 2);
    *(_DWORD *)&v6[v12[6]] = *(_DWORD *)&v7[v12[6]];
    v6[v12[7]] = v7[v12[7]];
    v6[v12[8]] = v7[v12[8]];
    v6[v12[9]] = v7[v12[9]];
    v6[v12[10]] = v7[v12[10]];
    v6[v12[11]] = v7[v12[11]];
    *(void *)&v6[v12[12]] = *(void *)&v7[v12[12]];
    uint64_t v16 = v12[13];
    __dst = &v6[v16];
    CFDataRef v17 = &v7[v16];
    uint64_t v18 = sub_24A2A6BC0();
    uint64_t v19 = *(void *)(v18 - 8);
    CFErrorRef v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v20(v17, 1, v18))
    {
      uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B173100);
      memcpy(__dst, v17, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(__dst, v17, v18);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(__dst, 0, 1, v18);
    }
    v6[v12[14]] = v7[v12[14]];
    v6[v12[15]] = v7[v12[15]];
    v6[v12[16]] = v7[v12[16]];
    uint64_t v23 = a3[6];
    id v22 = a1;
    id v24 = (char *)a1 + v23;
    id v25 = (char *)a2 + v23;
    *id v24 = *((unsigned char *)a2 + v23);
    *(_OWORD *)(v24 + 8) = *(_OWORD *)((char *)a2 + v23 + 8);
    long long v26 = *(_OWORD *)((char *)a2 + v23 + 48);
    *((_OWORD *)v24 + 3) = v26;
    (**(void (***)(uint64_t, uint64_t))(v26 - 8))((uint64_t)a1 + v23 + 24, (uint64_t)a2 + v23 + 24);
    long long v27 = *(_OWORD *)(v25 + 88);
    *(_OWORD *)(v24 + 88) = v27;
    (**(void (***)(uint64_t, uint64_t))(v27 - 8))((uint64_t)(v24 + 64), (uint64_t)(v25 + 64));
    v24[104] = v25[104];
    *(_WORD *)(v24 + 105) = *(_WORD *)(v25 + 105);
    long long v28 = *(_OWORD *)(v25 + 136);
    *(_OWORD *)(v24 + 136) = v28;
    (**(void (***)(uint64_t, uint64_t))(v28 - 8))((uint64_t)(v24 + 112), (uint64_t)(v25 + 112));
    *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
  }
  return v22;
}

uint64_t destroy for EnsembleHPKE.Leader(id *a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1 + *(int *)(a2 + 20);
  uint64_t v5 = sub_24A2A7480();
  (*(void (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  type metadata accessor for Release();
  swift_bridgeObjectRelease();
  uint64_t v6 = type metadata accessor for EnsembleValidator();
  swift_bridgeObjectRelease();
  uint64_t v7 = &v4[*(int *)(v6 + 52)];
  uint64_t v8 = sub_24A2A6BC0();
  uint64_t v9 = *(void *)(v8 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8)) {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v7, v8);
  }
  uint64_t v10 = (char *)a1 + *(int *)(a2 + 24);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v10 + 24));
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v10 + 64));

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)(v10 + 112));
}

void **initializeWithCopy for EnsembleHPKE.Leader(void **a1, void **a2, int *a3)
{
  int v3 = *a2;
  *a1 = *a2;
  uint64_t v4 = a3[5];
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = sub_24A2A7480();
  uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
  id v9 = v3;
  v8(v5, v6, v7);
  uint64_t v10 = type metadata accessor for Release();
  *(void *)&v5[*(int *)(v10 + 20)] = *(void *)&v6[*(int *)(v10 + 20)];
  uint64_t v11 = (int *)type metadata accessor for EnsembleValidator();
  uint64_t v12 = v11[5];
  uint64_t v13 = &v5[v12];
  uint64_t v14 = &v6[v12];
  *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
  *((void *)v13 + 2) = *((void *)v14 + 2);
  *(_DWORD *)&v5[v11[6]] = *(_DWORD *)&v6[v11[6]];
  v5[v11[7]] = v6[v11[7]];
  v5[v11[8]] = v6[v11[8]];
  v5[v11[9]] = v6[v11[9]];
  v5[v11[10]] = v6[v11[10]];
  v5[v11[11]] = v6[v11[11]];
  *(void *)&v5[v11[12]] = *(void *)&v6[v11[12]];
  uint64_t v15 = v11[13];
  __dst = &v5[v15];
  uint64_t v16 = &v6[v15];
  uint64_t v17 = sub_24A2A6BC0();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v19(v16, 1, v17))
  {
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B173100);
    memcpy(__dst, v16, *(void *)(*(void *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 16))(__dst, v16, v17);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(__dst, 0, 1, v17);
  }
  v5[v11[14]] = v6[v11[14]];
  v5[v11[15]] = v6[v11[15]];
  v5[v11[16]] = v6[v11[16]];
  uint64_t v21 = a3[6];
  id v22 = (char *)a1 + v21;
  uint64_t v23 = (char *)a2 + v21;
  *id v22 = *((unsigned char *)a2 + v21);
  *(_OWORD *)(v22 + 8) = *(_OWORD *)((char *)a2 + v21 + 8);
  long long v24 = *(_OWORD *)((char *)a2 + v21 + 48);
  *((_OWORD *)v22 + 3) = v24;
  (**(void (***)(uint64_t, uint64_t))(v24 - 8))((uint64_t)a1 + v21 + 24, (uint64_t)a2 + v21 + 24);
  long long v25 = *(_OWORD *)(v23 + 88);
  *(_OWORD *)(v22 + 88) = v25;
  (**(void (***)(uint64_t, uint64_t))(v25 - 8))((uint64_t)(v22 + 64), (uint64_t)(v23 + 64));
  v22[104] = v23[104];
  *(_WORD *)(v22 + 105) = *(_WORD *)(v23 + 105);
  long long v26 = *(_OWORD *)(v23 + 136);
  *(_OWORD *)(v22 + 136) = v26;
  (**(void (***)(uint64_t, uint64_t))(v26 - 8))((uint64_t)(v22 + 112), (uint64_t)(v23 + 112));
  *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
  return a1;
}

void **assignWithCopy for EnsembleHPKE.Leader(void **a1, void **a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *a1;
  *a1 = *a2;
  id v8 = v6;

  uint64_t v31 = a3;
  CFDictionaryRef v32 = a2;
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v33 = a1;
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = sub_24A2A7480();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 24))(v10, v11, v12);
  uint64_t v13 = type metadata accessor for Release();
  *(void *)&v10[*(int *)(v13 + 20)] = *(void *)&v11[*(int *)(v13 + 20)];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v14 = (int *)type metadata accessor for EnsembleValidator();
  uint64_t v15 = v14[5];
  uint64_t v16 = &v10[v15];
  uint64_t v17 = &v11[v15];
  *(_DWORD *)uint64_t v16 = *(_DWORD *)v17;
  *((void *)v16 + 1) = *((void *)v17 + 1);
  v16[16] = v17[16];
  v16[17] = v17[17];
  v16[18] = v17[18];
  *((_DWORD *)v16 + 5) = *((_DWORD *)v17 + 5);
  *(_DWORD *)&v10[v14[6]] = *(_DWORD *)&v11[v14[6]];
  v10[v14[7]] = v11[v14[7]];
  v10[v14[8]] = v11[v14[8]];
  v10[v14[9]] = v11[v14[9]];
  v10[v14[10]] = v11[v14[10]];
  v10[v14[11]] = v11[v14[11]];
  *(void *)&v10[v14[12]] = *(void *)&v11[v14[12]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v18 = v14[13];
  uint64_t v19 = &v10[v18];
  uint64_t v20 = &v11[v18];
  uint64_t v21 = sub_24A2A6BC0();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48);
  int v24 = v23(v19, 1, v21);
  int v25 = v23(v20, 1, v21);
  if (!v24)
  {
    if (!v25)
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 24))(v19, v20, v21);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v22 + 8))(v19, v21);
    goto LABEL_6;
  }
  if (v25)
  {
LABEL_6:
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B173100);
    memcpy(v19, v20, *(void *)(*(void *)(v26 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v19, v20, v21);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
LABEL_7:
  v10[v14[14]] = v11[v14[14]];
  v10[v14[15]] = v11[v14[15]];
  v10[v14[16]] = v11[v14[16]];
  uint64_t v27 = *(int *)(v31 + 24);
  long long v28 = (char *)v33 + v27;
  id v29 = (uint64_t *)((char *)v32 + v27);
  *long long v28 = *((unsigned char *)v32 + v27);
  *((void *)v28 + 1) = *(void **)((char *)v32 + v27 + 8);
  *((void *)v28 + 2) = *(void **)((char *)v32 + v27 + 16);
  __swift_assign_boxed_opaque_existential_1((uint64_t *)((char *)v33 + v27 + 24), (uint64_t *)((char *)v32 + v27 + 24));
  __swift_assign_boxed_opaque_existential_1((uint64_t *)v28 + 8, v29 + 8);
  v28[104] = *((unsigned char *)v29 + 104);
  v28[105] = *((unsigned char *)v29 + 105);
  v28[106] = *((unsigned char *)v29 + 106);
  __swift_assign_boxed_opaque_existential_1((uint64_t *)v28 + 14, v29 + 14);
  *((unsigned char *)v33 + *(int *)(v31 + 28)) = *((unsigned char *)v32 + *(int *)(v31 + 28));
  return v33;
}

void *initializeWithTake for EnsembleHPKE.Leader(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  id v8 = (char *)a2 + v6;
  uint64_t v9 = sub_24A2A7480();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = type metadata accessor for Release();
  *(void *)&v7[*(int *)(v10 + 20)] = *(void *)&v8[*(int *)(v10 + 20)];
  uint64_t v11 = (int *)type metadata accessor for EnsembleValidator();
  uint64_t v12 = v11[5];
  uint64_t v13 = &v7[v12];
  uint64_t v14 = &v8[v12];
  *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
  *((void *)v13 + 2) = *((void *)v14 + 2);
  *(_DWORD *)&v7[v11[6]] = *(_DWORD *)&v8[v11[6]];
  v7[v11[7]] = v8[v11[7]];
  v7[v11[8]] = v8[v11[8]];
  v7[v11[9]] = v8[v11[9]];
  v7[v11[10]] = v8[v11[10]];
  v7[v11[11]] = v8[v11[11]];
  *(void *)&v7[v11[12]] = *(void *)&v8[v11[12]];
  uint64_t v15 = v11[13];
  uint64_t v16 = &v7[v15];
  uint64_t v17 = &v8[v15];
  uint64_t v18 = sub_24A2A6BC0();
  uint64_t v19 = *(void *)(v18 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
  {
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B173100);
    memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v16, v17, v18);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  }
  v7[v11[14]] = v8[v11[14]];
  v7[v11[15]] = v8[v11[15]];
  v7[v11[16]] = v8[v11[16]];
  uint64_t v21 = a3[6];
  uint64_t v22 = a3[7];
  uint64_t v23 = (char *)a1 + v21;
  int v24 = (char *)a2 + v21;
  long long v25 = *((_OWORD *)v24 + 1);
  *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
  *((_OWORD *)v23 + 1) = v25;
  long long v26 = *((_OWORD *)v24 + 5);
  *((_OWORD *)v23 + 4) = *((_OWORD *)v24 + 4);
  *((_OWORD *)v23 + 5) = v26;
  long long v27 = *((_OWORD *)v24 + 3);
  *((_OWORD *)v23 + 2) = *((_OWORD *)v24 + 2);
  *((_OWORD *)v23 + 3) = v27;
  *((void *)v23 + 18) = *((void *)v24 + 18);
  long long v28 = *((_OWORD *)v24 + 8);
  long long v29 = *((_OWORD *)v24 + 6);
  *((_OWORD *)v23 + 7) = *((_OWORD *)v24 + 7);
  *((_OWORD *)v23 + 8) = v28;
  *((_OWORD *)v23 + 6) = v29;
  *((unsigned char *)a1 + v22) = *((unsigned char *)a2 + v22);
  return a1;
}

void **assignWithTake for EnsembleHPKE.Leader(void **a1, void **a2, int *a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;

  uint64_t v31 = a2;
  uint64_t v7 = a3[5];
  CFDictionaryRef v32 = a1;
  id v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = sub_24A2A7480();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = type metadata accessor for Release();
  *(void *)&v8[*(int *)(v11 + 20)] = *(void *)&v9[*(int *)(v11 + 20)];
  swift_bridgeObjectRelease();
  uint64_t v12 = (int *)type metadata accessor for EnsembleValidator();
  uint64_t v13 = v12[5];
  uint64_t v14 = &v8[v13];
  uint64_t v15 = &v9[v13];
  *(_DWORD *)uint64_t v14 = *(_DWORD *)v15;
  *((void *)v14 + 1) = *((void *)v15 + 1);
  v14[16] = v15[16];
  v14[17] = v15[17];
  v14[18] = v15[18];
  *((_DWORD *)v14 + 5) = *((_DWORD *)v15 + 5);
  *(_DWORD *)&v8[v12[6]] = *(_DWORD *)&v9[v12[6]];
  v8[v12[7]] = v9[v12[7]];
  v8[v12[8]] = v9[v12[8]];
  v8[v12[9]] = v9[v12[9]];
  v8[v12[10]] = v9[v12[10]];
  v8[v12[11]] = v9[v12[11]];
  *(void *)&v8[v12[12]] = *(void *)&v9[v12[12]];
  swift_bridgeObjectRelease();
  uint64_t v16 = v12[13];
  uint64_t v17 = &v8[v16];
  uint64_t v18 = &v9[v16];
  uint64_t v19 = sub_24A2A6BC0();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48);
  int v22 = v21(v17, 1, v19);
  int v23 = v21(v18, 1, v19);
  if (!v22)
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 40))(v17, v18, v19);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v20 + 8))(v17, v19);
    goto LABEL_6;
  }
  if (v23)
  {
LABEL_6:
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B173100);
    memcpy(v17, v18, *(void *)(*(void *)(v24 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v17, v18, v19);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
LABEL_7:
  v8[v12[14]] = v9[v12[14]];
  v8[v12[15]] = v9[v12[15]];
  v8[v12[16]] = v9[v12[16]];
  uint64_t v25 = a3[6];
  long long v26 = (char *)v32 + v25;
  long long v27 = (char *)v31 + v25;
  *long long v26 = *((unsigned char *)v31 + v25);
  *(_OWORD *)(v26 + 8) = *(_OWORD *)((char *)v31 + v25 + 8);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v32 + v25 + 24);
  *(_OWORD *)(v26 + 24) = *(_OWORD *)(v27 + 24);
  *(_OWORD *)(v26 + 40) = *(_OWORD *)(v27 + 40);
  *((void *)v26 + 7) = *((void *)v27 + 7);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v26 + 64));
  long long v28 = *((_OWORD *)v27 + 5);
  *((_OWORD *)v26 + 4) = *((_OWORD *)v27 + 4);
  *((_OWORD *)v26 + 5) = v28;
  *((void *)v26 + 12) = *((void *)v27 + 12);
  v26[104] = v27[104];
  v26[105] = v27[105];
  v26[106] = v27[106];
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v26 + 112));
  long long v29 = *((_OWORD *)v27 + 8);
  *((_OWORD *)v26 + 7) = *((_OWORD *)v27 + 7);
  *((_OWORD *)v26 + 8) = v29;
  *((void *)v26 + 18) = *((void *)v27 + 18);
  *((unsigned char *)v32 + a3[7]) = *((unsigned char *)v31 + a3[7]);
  return v32;
}

uint64_t getEnumTagSinglePayload for EnsembleHPKE.Leader(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_0);
}

uint64_t storeEnumTagSinglePayload for EnsembleHPKE.Leader(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_0);
}

uint64_t sub_24A26B8F4()
{
  return sub_24A26C9B0();
}

void **initializeBufferWithCopyOfBuffer for EnsembleHPKE.Follower(void **a1, void **a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = (char *)*a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = (void **)&v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain();
  }
  else
  {
    uint64_t v5 = a1;
    uint64_t v6 = a3[5];
    uint64_t v7 = (char *)a1 + v6;
    id v8 = (char *)a2 + v6;
    uint64_t v9 = sub_24A2A7480();
    uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
    uint64_t v11 = v4;
    v10(v7, v8, v9);
    uint64_t v12 = *(int *)(type metadata accessor for Release() + 20);
    *(void *)&v7[v12] = *(void *)&v8[v12];
    uint64_t v13 = (int *)type metadata accessor for EnsembleValidator();
    uint64_t v14 = v13[5];
    uint64_t v15 = &v7[v14];
    uint64_t v16 = &v8[v14];
    *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
    *((void *)v15 + 2) = *((void *)v16 + 2);
    *(_DWORD *)&v7[v13[6]] = *(_DWORD *)&v8[v13[6]];
    v7[v13[7]] = v8[v13[7]];
    v7[v13[8]] = v8[v13[8]];
    v7[v13[9]] = v8[v13[9]];
    v7[v13[10]] = v8[v13[10]];
    v7[v13[11]] = v8[v13[11]];
    *(void *)&v7[v13[12]] = *(void *)&v8[v13[12]];
    uint64_t v17 = v13[13];
    __dst = &v7[v17];
    uint64_t v18 = &v8[v17];
    uint64_t v19 = sub_24A2A6BC0();
    uint64_t v20 = *(void *)(v19 - 8);
    uint64_t v21 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v21(v18, 1, v19))
    {
      uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B173100);
      memcpy(__dst, v18, *(void *)(*(void *)(v22 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 16))(__dst, v18, v19);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(__dst, 0, 1, v19);
    }
    v7[v13[14]] = v8[v13[14]];
    v7[v13[15]] = v8[v13[15]];
    v7[v13[16]] = v8[v13[16]];
    uint64_t v23 = a3[6];
    long long v24 = *(_OWORD *)((char *)a2 + v23 + 24);
    *(_OWORD *)((char *)v5 + v23 + 24) = v24;
    (**(void (***)(void))(v24 - 8))();
    *((unsigned char *)v5 + a3[7]) = *((unsigned char *)a2 + a3[7]);
  }
  return v5;
}

uint64_t destroy for EnsembleHPKE.Follower(id *a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1 + *(int *)(a2 + 20);
  uint64_t v5 = sub_24A2A7480();
  (*(void (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  type metadata accessor for Release();
  swift_bridgeObjectRelease();
  uint64_t v6 = type metadata accessor for EnsembleValidator();
  swift_bridgeObjectRelease();
  uint64_t v7 = &v4[*(int *)(v6 + 52)];
  uint64_t v8 = sub_24A2A6BC0();
  uint64_t v9 = *(void *)(v8 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8)) {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v7, v8);
  }
  uint64_t v10 = (uint64_t)a1 + *(int *)(a2 + 24);

  return __swift_destroy_boxed_opaque_existential_1(v10);
}

void **initializeWithCopy for EnsembleHPKE.Follower(void **a1, void **a2, int *a3)
{
  int v3 = *a2;
  *a1 = *a2;
  uint64_t v4 = a3[5];
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = sub_24A2A7480();
  uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
  id v9 = v3;
  v8(v5, v6, v7);
  uint64_t v10 = type metadata accessor for Release();
  *(void *)&v5[*(int *)(v10 + 20)] = *(void *)&v6[*(int *)(v10 + 20)];
  uint64_t v11 = (int *)type metadata accessor for EnsembleValidator();
  uint64_t v12 = v11[5];
  uint64_t v13 = &v5[v12];
  uint64_t v14 = &v6[v12];
  *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
  *((void *)v13 + 2) = *((void *)v14 + 2);
  *(_DWORD *)&v5[v11[6]] = *(_DWORD *)&v6[v11[6]];
  v5[v11[7]] = v6[v11[7]];
  v5[v11[8]] = v6[v11[8]];
  v5[v11[9]] = v6[v11[9]];
  v5[v11[10]] = v6[v11[10]];
  v5[v11[11]] = v6[v11[11]];
  *(void *)&v5[v11[12]] = *(void *)&v6[v11[12]];
  uint64_t v15 = v11[13];
  __dst = &v5[v15];
  uint64_t v16 = &v6[v15];
  uint64_t v17 = sub_24A2A6BC0();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v19(v16, 1, v17))
  {
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B173100);
    memcpy(__dst, v16, *(void *)(*(void *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 16))(__dst, v16, v17);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(__dst, 0, 1, v17);
  }
  v5[v11[14]] = v6[v11[14]];
  v5[v11[15]] = v6[v11[15]];
  v5[v11[16]] = v6[v11[16]];
  uint64_t v21 = a3[6];
  long long v22 = *(_OWORD *)((char *)a2 + v21 + 24);
  *(_OWORD *)((char *)a1 + v21 + 24) = v22;
  (**(void (***)(void))(v22 - 8))();
  *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
  return a1;
}

void **assignWithCopy for EnsembleHPKE.Follower(void **a1, void **a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *a1;
  *a1 = *a2;
  id v8 = v6;

  uint64_t v28 = a3;
  long long v29 = a2;
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v30 = a1;
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = sub_24A2A7480();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 24))(v10, v11, v12);
  uint64_t v13 = type metadata accessor for Release();
  *(void *)&v10[*(int *)(v13 + 20)] = *(void *)&v11[*(int *)(v13 + 20)];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v14 = (int *)type metadata accessor for EnsembleValidator();
  uint64_t v15 = v14[5];
  uint64_t v16 = &v10[v15];
  uint64_t v17 = &v11[v15];
  *(_DWORD *)uint64_t v16 = *(_DWORD *)v17;
  *((void *)v16 + 1) = *((void *)v17 + 1);
  v16[16] = v17[16];
  v16[17] = v17[17];
  v16[18] = v17[18];
  *((_DWORD *)v16 + 5) = *((_DWORD *)v17 + 5);
  *(_DWORD *)&v10[v14[6]] = *(_DWORD *)&v11[v14[6]];
  v10[v14[7]] = v11[v14[7]];
  v10[v14[8]] = v11[v14[8]];
  v10[v14[9]] = v11[v14[9]];
  v10[v14[10]] = v11[v14[10]];
  v10[v14[11]] = v11[v14[11]];
  *(void *)&v10[v14[12]] = *(void *)&v11[v14[12]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v18 = v14[13];
  uint64_t v19 = &v10[v18];
  uint64_t v20 = &v11[v18];
  uint64_t v21 = sub_24A2A6BC0();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48);
  int v24 = v23(v19, 1, v21);
  int v25 = v23(v20, 1, v21);
  if (!v24)
  {
    if (!v25)
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 24))(v19, v20, v21);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v22 + 8))(v19, v21);
    goto LABEL_6;
  }
  if (v25)
  {
LABEL_6:
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B173100);
    memcpy(v19, v20, *(void *)(*(void *)(v26 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v19, v20, v21);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
LABEL_7:
  v10[v14[14]] = v11[v14[14]];
  v10[v14[15]] = v11[v14[15]];
  v10[v14[16]] = v11[v14[16]];
  __swift_assign_boxed_opaque_existential_1((uint64_t *)((char *)v30 + *(int *)(v28 + 24)), (uint64_t *)((char *)v29 + *(int *)(v28 + 24)));
  *((unsigned char *)v30 + *(int *)(v28 + 28)) = *((unsigned char *)v29 + *(int *)(v28 + 28));
  return v30;
}

void *initializeWithTake for EnsembleHPKE.Follower(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  id v8 = (char *)a2 + v6;
  uint64_t v9 = sub_24A2A7480();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = type metadata accessor for Release();
  *(void *)&v7[*(int *)(v10 + 20)] = *(void *)&v8[*(int *)(v10 + 20)];
  uint64_t v11 = (int *)type metadata accessor for EnsembleValidator();
  uint64_t v12 = v11[5];
  uint64_t v13 = &v7[v12];
  uint64_t v14 = &v8[v12];
  *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
  *((void *)v13 + 2) = *((void *)v14 + 2);
  *(_DWORD *)&v7[v11[6]] = *(_DWORD *)&v8[v11[6]];
  v7[v11[7]] = v8[v11[7]];
  v7[v11[8]] = v8[v11[8]];
  v7[v11[9]] = v8[v11[9]];
  v7[v11[10]] = v8[v11[10]];
  v7[v11[11]] = v8[v11[11]];
  *(void *)&v7[v11[12]] = *(void *)&v8[v11[12]];
  uint64_t v15 = v11[13];
  uint64_t v16 = &v7[v15];
  uint64_t v17 = &v8[v15];
  uint64_t v18 = sub_24A2A6BC0();
  uint64_t v19 = *(void *)(v18 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
  {
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B173100);
    memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v16, v17, v18);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  }
  v7[v11[14]] = v8[v11[14]];
  v7[v11[15]] = v8[v11[15]];
  v7[v11[16]] = v8[v11[16]];
  uint64_t v21 = a3[6];
  uint64_t v22 = a3[7];
  uint64_t v23 = (char *)a1 + v21;
  int v24 = (char *)a2 + v21;
  long long v25 = *((_OWORD *)v24 + 1);
  *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
  *((_OWORD *)v23 + 1) = v25;
  *((void *)v23 + 4) = *((void *)v24 + 4);
  *((unsigned char *)a1 + v22) = *((unsigned char *)a2 + v22);
  return a1;
}

void **assignWithTake for EnsembleHPKE.Follower(void **a1, void **a2, int *a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;

  uint64_t v30 = a2;
  uint64_t v7 = a3[5];
  uint64_t v31 = a1;
  id v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = sub_24A2A7480();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = type metadata accessor for Release();
  *(void *)&v8[*(int *)(v11 + 20)] = *(void *)&v9[*(int *)(v11 + 20)];
  swift_bridgeObjectRelease();
  uint64_t v12 = (int *)type metadata accessor for EnsembleValidator();
  uint64_t v13 = v12[5];
  uint64_t v14 = &v8[v13];
  uint64_t v15 = &v9[v13];
  *(_DWORD *)uint64_t v14 = *(_DWORD *)v15;
  *((void *)v14 + 1) = *((void *)v15 + 1);
  v14[16] = v15[16];
  v14[17] = v15[17];
  v14[18] = v15[18];
  *((_DWORD *)v14 + 5) = *((_DWORD *)v15 + 5);
  *(_DWORD *)&v8[v12[6]] = *(_DWORD *)&v9[v12[6]];
  v8[v12[7]] = v9[v12[7]];
  v8[v12[8]] = v9[v12[8]];
  v8[v12[9]] = v9[v12[9]];
  v8[v12[10]] = v9[v12[10]];
  v8[v12[11]] = v9[v12[11]];
  *(void *)&v8[v12[12]] = *(void *)&v9[v12[12]];
  swift_bridgeObjectRelease();
  uint64_t v16 = v12[13];
  uint64_t v17 = &v8[v16];
  uint64_t v18 = &v9[v16];
  uint64_t v19 = sub_24A2A6BC0();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48);
  int v22 = v21(v17, 1, v19);
  int v23 = v21(v18, 1, v19);
  if (!v22)
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 40))(v17, v18, v19);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v20 + 8))(v17, v19);
    goto LABEL_6;
  }
  if (v23)
  {
LABEL_6:
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B173100);
    memcpy(v17, v18, *(void *)(*(void *)(v24 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v17, v18, v19);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
LABEL_7:
  v8[v12[14]] = v9[v12[14]];
  v8[v12[15]] = v9[v12[15]];
  v8[v12[16]] = v9[v12[16]];
  uint64_t v25 = a3[6];
  uint64_t v26 = (char *)v31 + v25;
  long long v27 = (char *)v30 + v25;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v31 + v25);
  long long v28 = *((_OWORD *)v27 + 1);
  *(_OWORD *)uint64_t v26 = *(_OWORD *)v27;
  *((_OWORD *)v26 + 1) = v28;
  *((void *)v26 + 4) = *((void *)v27 + 4);
  *((unsigned char *)v31 + a3[7]) = *((unsigned char *)v30 + a3[7]);
  return v31;
}

uint64_t getEnumTagSinglePayload for EnsembleHPKE.Follower(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24A26C830);
}

uint64_t __swift_get_extra_inhabitant_indexTm_0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for EnsembleValidator();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for EnsembleHPKE.Follower(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24A26C8F8);
}

void *__swift_store_extra_inhabitant_indexTm_0(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *unint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for EnsembleValidator();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_24A26C9A4()
{
  return sub_24A26C9B0();
}

uint64_t sub_24A26C9B0()
{
  uint64_t result = type metadata accessor for EnsembleValidator();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for EnsembleHPKE.Error(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24A26CB28);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EnsembleHPKE.Error()
{
  return &type metadata for EnsembleHPKE.Error;
}

ValueMetadata *type metadata accessor for SendableSecKey()
{
  return &type metadata for SendableSecKey;
}

unint64_t sub_24A26CB70()
{
  unint64_t result = qword_269779C10;
  if (!qword_269779C10)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_269779C08);
    sub_24A26CC14(&qword_269778878, type metadata accessor for CFString);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269779C10);
  }
  return result;
}

uint64_t sub_24A26CC14(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_24A26CC5C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

ValueMetadata *type metadata accessor for SEP()
{
  return &type metadata for SEP;
}

unsigned char *HardwareIdentifiersPolicy.init(matches:)@<X0>(unsigned char *result@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  char v4 = result[1];
  char v5 = result[2];
  *(unsigned char *)a4 = *result;
  *(unsigned char *)(a4 + 1) = v4;
  *(unsigned char *)(a4 + 2) = v5;
  *(_DWORD *)(a4 + 4) = a2;
  *(_DWORD *)(a4 + 8) = a3;
  *(void *)(a4 + 12) = 2;
  *(_DWORD *)(a4 + 20) = 0;
  return result;
}

uint64_t sub_24A26CCF8()
{
  uint64_t v0 = sub_24A2A7160();
  __swift_allocate_value_buffer(v0, qword_26977A798);
  __swift_project_value_buffer(v0, (uint64_t)qword_26977A798);
  return sub_24A2A7150();
}

unsigned __int8 *HardwareIdentifiersPolicy.init(_:matches:)@<X0>(unsigned __int8 *result@<X0>, uint64_t a2@<X1>, int a3@<W2>, unsigned char *a4@<X3>, int a5@<W4>, int a6@<W5>, uint64_t a7@<X8>)
{
  uint64_t v7 = *result;
  uint64_t v8 = result[2];
  char v9 = a4[1];
  char v10 = a4[2];
  uint64_t v11 = 256;
  if (!result[1]) {
    uint64_t v11 = 0;
  }
  *(unsigned char *)a7 = *a4;
  *(unsigned char *)(a7 + 1) = v9;
  *(unsigned char *)(a7 + 2) = v10;
  *(_DWORD *)(a7 + 4) = a5;
  *(_DWORD *)(a7 + 8) = a6;
  *(void *)(a7 + 12) = v11 | v7 | (v8 << 16) | (a2 << 32);
  *(_DWORD *)(a7 + 20) = a3;
  return result;
}

uint64_t HardwareIdentifiersPolicy.evaluate(bundle:context:)(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(v3 + 44) = *(unsigned char *)v2;
  *(unsigned char *)(v3 + 45) = *(unsigned char *)(v2 + 1);
  *(unsigned char *)(v3 + 46) = *(unsigned char *)(v2 + 2);
  *(void *)(v3 + 32) = *(void *)(v2 + 4);
  uint64_t v4 = *(void *)(v2 + 12);
  *(void *)(v3 + 16) = a2;
  *(void *)(v3 + 24) = v4;
  *(_DWORD *)(v3 + 40) = *(_DWORD *)(v2 + 20);
  return MEMORY[0x270FA2498](sub_24A26CE84, 0, 0);
}

uint64_t sub_24A26CE84()
{
  uint64_t v31 = v0;
  v30[1] = *(unsigned char **)MEMORY[0x263EF8340];
  uint64_t v25 = **(void **)(v0 + 16);
  AttestationPolicyContext.validatedAttestation.getter((uint64_t)&v26);
  uint64_t v2 = v26;
  unint64_t v1 = v27;
  uint64_t v4 = v28;
  unint64_t v3 = v29;
  if (v27 >> 60 == 15)
  {
    unsigned int v5 = 0;
    uint64_t v6 = 0;
    LOBYTE(v7) = 1;
    LODWORD(v8) = 2;
  }
  else
  {
    v30[0] = 0;
    uint64_t v25 = 0;
    sub_24A1A52B0(v26, v27);
    sub_24A1A52B0(v4, v3);
    sub_24A1EDD20(v4, v3, v30, &v25, (uint64_t)&v26);
    sub_24A211D18(v2, v1, v4, v3);
    uint64_t v6 = v26;
    LODWORD(v8) = v28;
    sub_24A1A52B0(v2, v1);
    sub_24A1A52B0(v4, v3);
    unint64_t v9 = sub_24A1EE8B0(v2, v1, v4, v3);
    unsigned int v5 = v9;
    uint64_t v7 = HIDWORD(v9) & 1;
    sub_24A211D18(v2, v1, v4, v3);
  }
  if (*(void *)(v0 + 24) == 2)
  {
    if (v8 == 2) {
      char v10 = 1;
    }
    else {
      char v10 = v7;
    }
    if (v10)
    {
      sub_24A26D290();
      swift_allocError();
      v11[1] = 0;
      _OWORD v11[2] = 0;
      *uint64_t v11 = 2;
LABEL_24:
      swift_willThrow();
      sub_24A211D18(v2, v1, v4, v3);
      int v23 = *(uint64_t (**)(void))(v0 + 8);
      goto LABEL_27;
    }
  }
  else
  {
    uint64_t v6 = HIDWORD(*(void *)(v0 + 24));
    unsigned int v5 = *(_DWORD *)(v0 + 40);
    uint64_t v8 = *(void *)(v0 + 24);
  }
  if (*(unsigned char *)(v0 + 45)) {
    int v12 = 256;
  }
  else {
    int v12 = 0;
  }
  if (!sub_24A26D244(v8 & 0xFF0101, v6, v5, v12 | (*(unsigned __int8 *)(v0 + 46) << 16) | *(unsigned __int8 *)(v0 + 44), *(_DWORD *)(v0 + 32), *(_DWORD *)(v0 + 36)))
  {
    uint64_t v17 = *(void *)(v0 + 32);
    uint64_t v18 = v8 & 0xFF0101 | (v6 << 32);
    uint64_t v19 = 0x100000000;
    if (!*(unsigned char *)(v0 + 44)) {
      uint64_t v19 = 0;
    }
    uint64_t v20 = 0x10000000000;
    if (!*(unsigned char *)(v0 + 45)) {
      uint64_t v20 = 0;
    }
    unint64_t v21 = v20 | v19 | ((unint64_t)*(unsigned __int8 *)(v0 + 46) << 48) | v5;
    sub_24A26D290();
    swift_allocError();
    *int v22 = v18;
    v22[1] = v21;
    _OWORD v22[2] = v17;
    goto LABEL_24;
  }
  if (qword_269778578 != -1) {
    swift_once();
  }
  uint64_t v13 = sub_24A2A7160();
  __swift_project_value_buffer(v13, (uint64_t)qword_26977A798);
  uint64_t v14 = sub_24A2A7140();
  os_log_type_t v15 = sub_24A2A7B40();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v16 = 0;
    _os_log_impl(&dword_24A19F000, v14, v15, "AttestationBundle passed HardwareIdentifiersPolicy: device has expected hardware identifiers", v16, 2u);
    MEMORY[0x24C5C00A0](v16, -1, -1);

    sub_24A211D18(v2, v1, v4, v3);
  }
  else
  {
    sub_24A211D18(v2, v1, v4, v3);
  }
  int v23 = *(uint64_t (**)(void))(v0 + 8);
LABEL_27:
  return v23();
}

BOOL sub_24A26D244(unsigned int a1, int a2, int a3, unsigned int a4, int a5, int a6)
{
  int v6 = HIWORD(a1) & 3;
  if ((a1 & 0x100) != 0) {
    v6 |= 4u;
  }
  int v7 = HIWORD(a4) & 3;
  if ((a4 & 0x100) != 0) {
    int v7 = HIWORD(a4) & 3 | 4;
  }
  if (a1) {
    int v8 = 8;
  }
  else {
    int v8 = 0;
  }
  return (v8 | v6) == (v7 & 0xFFFFFFF7 | (8 * (a4 & 1))) && a2 == a5 && a3 == a6;
}

unint64_t sub_24A26D290()
{
  unint64_t result = qword_269779C20;
  if (!qword_269779C20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269779C20);
  }
  return result;
}

uint64_t sub_24A26D2E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_24A1C50FC;
  return HardwareIdentifiersPolicy.evaluate(bundle:context:)((uint64_t)v4, a2);
}

__n128 __swift_memcpy24_4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for HardwareIdentifiersPolicy(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && a1[24]) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for HardwareIdentifiersPolicy(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(unsigned char *)__n128 result = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HardwareIdentifiersPolicy()
{
  return &type metadata for HardwareIdentifiersPolicy;
}

uint64_t __swift_memcpy12_4(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  *(void *)__n128 result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for HardwareIdentifiersPolicy.IdentifiersLoader(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && a1[12]) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 2;
  unsigned int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    unsigned int v5 = -1;
  }
  if (v5 + 1 >= 2) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for HardwareIdentifiersPolicy.IdentifiersLoader(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(void *)(result + 4) = 0;
    *(_DWORD *)__n128 result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 12) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 12) = 0;
    }
    if (a2) {
      *(unsigned char *)__n128 result = a2 + 2;
    }
  }
  return result;
}

uint64_t sub_24A26D4E0(uint64_t result, unsigned int a2)
{
  if (a2 > 0xFE)
  {
    *(_DWORD *)(result + 8) = 0;
    *(void *)__n128 result = a2 - 255;
  }
  else if (a2)
  {
    *(unsigned char *)__n128 result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for HardwareIdentifiersPolicy.IdentifiersLoader()
{
  return &type metadata for HardwareIdentifiersPolicy.IdentifiersLoader;
}

uint64_t getEnumTagSinglePayload for HardwareIdentifiersPolicy.Error(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && a1[24]) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 2;
  unsigned int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    unsigned int v5 = -1;
  }
  if (v5 + 1 >= 2) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for HardwareIdentifiersPolicy.Error(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(void *)(result + 12) = 0;
    *(void *)(result + 4) = 0;
    *(_DWORD *)(result + 20) = 0;
    *(_DWORD *)__n128 result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(unsigned char *)__n128 result = a2 + 2;
    }
  }
  return result;
}

void *sub_24A26D5B8(void *result, unsigned int a2)
{
  if (a2 > 0xFE)
  {
    result[1] = 0;
    result[2] = 0;
    *__n128 result = a2 - 255;
  }
  else if (a2)
  {
    *(unsigned char *)__n128 result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for HardwareIdentifiersPolicy.Error()
{
  return &type metadata for HardwareIdentifiersPolicy.Error;
}

double EnsembleAttestor.init()@<D0>(uint64_t a1@<X8>)
{
  *(_OWORD *)(a1 + 8) = xmmword_24A2AB3D0;
  *(void *)(a1 + 136) = &type metadata for SEP.PhysicalDevice;
  *(void *)(a1 + 144) = &protocol witness table for SEP.PhysicalDevice;
  *(_OWORD *)&v9[8] = xmmword_24A2AB3D0;
  *((void *)&v16 + 1) = &type metadata for SEP.PhysicalDevice;
  uint64_t v17 = &protocol witness table for SEP.PhysicalDevice;
  swift_beginAccess();
  char v2 = byte_26B1730E8;
  if (byte_26B1730E8 == 10)
  {
    static Environment.default.getter(&v8);
    char v2 = v8;
  }
  sub_24A207C54(0, v2, (uint64_t)&v18);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v15);
  long long v14 = v24;
  long long v15 = v25;
  long long v16 = v26;
  uint64_t v17 = v27;
  long long v10 = v20;
  long long v11 = v21;
  long long v12 = v22;
  long long v13 = v23;
  *(_OWORD *)unint64_t v9 = v18;
  *(_OWORD *)&v9[16] = v19;
  __swift_destroy_boxed_opaque_existential_1(a1 + 112);
  long long v3 = v25;
  *(_OWORD *)(a1 + 96) = v24;
  *(_OWORD *)(a1 + 112) = v3;
  *(_OWORD *)(a1 + 128) = v26;
  *(void *)(a1 + 144) = v27;
  long long v4 = v21;
  *(_OWORD *)(a1 + 32) = v20;
  *(_OWORD *)(a1 + 48) = v4;
  long long v5 = v23;
  *(_OWORD *)(a1 + 64) = v22;
  *(_OWORD *)(a1 + 80) = v5;
  double result = *(double *)&v18;
  long long v7 = v19;
  *(_OWORD *)a1 = v18;
  *(_OWORD *)(a1 + 16) = v7;
  return result;
}

__n128 EnsembleAttestor.init(attestor:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v2 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a2 + 112) = v2;
  *(_OWORD *)(a2 + 128) = *(_OWORD *)(a1 + 128);
  *(void *)(a2 + 144) = *(void *)(a1 + 144);
  long long v3 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 48) = v3;
  long long v4 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 80) = v4;
  __n128 result = *(__n128 *)a1;
  long long v6 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v6;
  return result;
}

double EnsembleAttestor.init<A>(assetProvider:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  long long v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  HIBYTE(v17) = 0;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, a2);
  double v11 = NodeAttestor.init<A, B>(transparencyProver:assetProvider:)((uint64_t)&v17 + 7, (uint64_t)v10, (uint64_t)&type metadata for NopTransparencyLog, a2, (uint64_t)&protocol witness table for NopTransparencyLog, a3, (uint64_t)v18);
  (*(void (**)(uint64_t, uint64_t, double))(v8 + 8))(a1, a2, v11);
  long long v12 = v18[7];
  *(_OWORD *)(a4 + 96) = v18[6];
  *(_OWORD *)(a4 + 112) = v12;
  *(_OWORD *)(a4 + 128) = v18[8];
  *(void *)(a4 + 144) = v19;
  long long v13 = v18[3];
  *(_OWORD *)(a4 + 32) = v18[2];
  *(_OWORD *)(a4 + 48) = v13;
  long long v14 = v18[5];
  *(_OWORD *)(a4 + 64) = v18[4];
  *(_OWORD *)(a4 + 80) = v14;
  double result = *(double *)v18;
  long long v16 = v18[1];
  *(_OWORD *)a4 = v18[0];
  *(_OWORD *)(a4 + 16) = v16;
  return result;
}

uint64_t EnsembleAttestor.attest(key:expiration:nonce:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  double v11 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v11;
  *double v11 = v5;
  v11[1] = sub_24A1C50FC;
  return NodeAttestor.attest(key:expiration:nonce:)(a1, a2, a3, a4, a5);
}

ValueMetadata *type metadata accessor for EnsembleAttestor()
{
  return &type metadata for EnsembleAttestor;
}

unsigned char *DeviceModePolicy.init(restrictedExecution:ephemeralData:developer:)@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  char v4 = *a3;
  unsigned int v5 = 0x10002u >> (8 * *a2);
  *(unsigned char *)a4 = 0x10002u >> (8 * *result);
  *(unsigned char *)(a4 + 1) = v5;
  *(unsigned char *)(a4 + 2) = 0x10002u >> (8 * v4);
  *(unsigned char *)(a4 + 5) = 0;
  *(_WORD *)(a4 + 3) = 2;
  return result;
}

CloudAttestation::DeviceModePolicy::Constraint __swiftcall DeviceModePolicy.Constraint.init(_:)(CloudAttestation::DeviceModePolicy::Constraint result)
{
  if (result) {
    char v2 = 2;
  }
  else {
    char v2 = 1;
  }
  char *v1 = v2;
  return result;
}

uint64_t sub_24A26D9FC()
{
  uint64_t v0 = sub_24A2A7160();
  __swift_allocate_value_buffer(v0, qword_26B176928);
  __swift_project_value_buffer(v0, (uint64_t)qword_26B176928);
  return sub_24A2A7150();
}

unsigned __int8 *DeviceModePolicy.init(_:restrictedExecution:ephemeralData:developer:)@<X0>(unsigned __int8 *result@<X0>, unsigned char *a2@<X1>, unsigned char *a3@<X2>, unsigned char *a4@<X3>, uint64_t a5@<X8>)
{
  int v5 = result[2];
  unsigned int v6 = 0x10002u >> (8 * *a3);
  unsigned int v7 = 0x10002u >> (8 * *a4);
  if (result[1]) {
    __int16 v8 = 256;
  }
  else {
    __int16 v8 = 0;
  }
  __int16 v9 = v8 | *result;
  *(unsigned char *)a5 = 0x10002u >> (8 * *a2);
  *(unsigned char *)(a5 + 1) = v6;
  *(unsigned char *)(a5 + 2) = v7;
  *(unsigned char *)(a5 + 5) = v5 != 0;
  *(_WORD *)(a5 + 3) = v9;
  return result;
}

uint64_t DeviceModePolicy.evaluate(bundle:context:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v3 + 16) = a2;
  *(unsigned char *)(v3 + 28) = *(unsigned char *)v2;
  *(_WORD *)(v3 + 29) = *(_WORD *)(v2 + 1);
  __int16 v4 = *(_WORD *)(v2 + 3);
  *(unsigned char *)(v3 + 26) = *(unsigned char *)(v2 + 5);
  *(_WORD *)(v3 + 24) = v4;
  return MEMORY[0x270FA2498](sub_24A26DB34, 0, 0);
}

uint64_t sub_24A26DB34()
{
  uint64_t v51 = v0;
  unsigned int v1 = *(unsigned __int16 *)(v0 + 24) | (*(unsigned __int8 *)(v0 + 26) << 16);
  if (*(_WORD *)(v0 + 24) == 2)
  {
    uint64_t v2 = **(void **)(v0 + 16);
    uint64_t v50 = v2;
    AttestationPolicyContext.validatedAttestation.getter((uint64_t)&v46);
    unint64_t v3 = v47;
    if (v47 >> 60 == 15)
    {
      int v4 = 0;
    }
    else
    {
      uint64_t v8 = v48;
      unint64_t v7 = v49;
      uint64_t v9 = v46;
      char v10 = sub_24A1EE5D8(v46, v47, v48, v49);
      sub_24A211D18(v9, v3, v8, v7);
      int v4 = v10 & 1;
    }
    uint64_t v50 = v2;
    AttestationPolicyContext.validatedAttestation.getter((uint64_t)&v46);
    unint64_t v11 = v47;
    if (v47 >> 60 == 15)
    {
      int v5 = 0;
    }
    else
    {
      uint64_t v13 = v48;
      unint64_t v12 = v49;
      uint64_t v14 = v46;
      char v15 = sub_24A1EE628(v46, v47, v48, v49);
      sub_24A211D18(v14, v11, v13, v12);
      int v5 = v15 & 1;
    }
    uint64_t v50 = v2;
    AttestationPolicyContext.validatedAttestation.getter((uint64_t)&v46);
    unint64_t v16 = v47;
    if (v47 >> 60 == 15)
    {
      LOBYTE(v6) = 1;
    }
    else
    {
      uint64_t v18 = v48;
      unint64_t v17 = v49;
      uint64_t v6 = v46;
      char v19 = sub_24A1EE860(v46, v47, v48, v49);
      sub_24A211D18(v6, v16, v18, v17);
      LOBYTE(v6) = (v19 == 2) | v19;
    }
  }
  else
  {
    int v4 = *(_WORD *)(v0 + 24) & 1;
    int v5 = (v1 >> 8) & 1;
    LODWORD(v6) = HIWORD(v1) & 1;
  }
  int v20 = *(unsigned __int8 *)(v0 + 28);
  if (v20 == 2)
  {
    if (qword_26B174610 != -1) {
      swift_once();
    }
    uint64_t v21 = sub_24A2A7160();
    __swift_project_value_buffer(v21, (uint64_t)qword_26B176928);
    long long v22 = sub_24A2A7140();
    os_log_type_t v23 = sub_24A2A7B40();
    if (os_log_type_enabled(v22, v23))
    {
      long long v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)long long v24 = 0;
      _os_log_impl(&dword_24A19F000, v22, v23, "Skipping assertion of Restricted Execution Mode", v24, 2u);
      MEMORY[0x24C5C00A0](v24, -1, -1);
    }
  }
  else
  {
    int v25 = v20 & 1;
    if (v4 != v25)
    {
      __int16 v26 = v4 | ((_WORD)v25 << 8);
      goto LABEL_36;
    }
  }
  int v27 = *(unsigned __int8 *)(v0 + 29);
  if (v27 != 2)
  {
    int v32 = v27 & 1;
    if (v5 == v32) {
      goto LABEL_28;
    }
    __int16 v26 = v5 | ((_WORD)v32 << 8) | 0x4000;
LABEL_36:
    sub_24A26E3D4();
    swift_allocError();
    *uint64_t v39 = v26;
    swift_willThrow();
    uint64_t v40 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_42;
  }
  if (qword_26B174610 != -1) {
    swift_once();
  }
  uint64_t v28 = sub_24A2A7160();
  __swift_project_value_buffer(v28, (uint64_t)qword_26B176928);
  unint64_t v29 = sub_24A2A7140();
  os_log_type_t v30 = sub_24A2A7B40();
  if (os_log_type_enabled(v29, v30))
  {
    uint64_t v31 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v31 = 0;
    _os_log_impl(&dword_24A19F000, v29, v30, "Skipping assertion of Ephemeral Data Mode", v31, 2u);
    MEMORY[0x24C5C00A0](v31, -1, -1);
  }

LABEL_28:
  int v33 = *(unsigned __int8 *)(v0 + 30);
  if (v33 == 2)
  {
    if (qword_26B174610 != -1) {
      swift_once();
    }
    uint64_t v34 = sub_24A2A7160();
    __swift_project_value_buffer(v34, (uint64_t)qword_26B176928);
    uint64_t v35 = sub_24A2A7140();
    os_log_type_t v36 = sub_24A2A7B40();
    if (os_log_type_enabled(v35, v36))
    {
      SecAccessControlRef v37 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)SecAccessControlRef v37 = 0;
      _os_log_impl(&dword_24A19F000, v35, v36, "Skipping developer mode restriction", v37, 2u);
      MEMORY[0x24C5C00A0](v37, -1, -1);
    }

    goto LABEL_37;
  }
  int v38 = v33 & 1;
  if ((v6 & 1) != v38)
  {
    __int16 v26 = v6 & 1 | ((_WORD)v38 << 8) | 0x8000;
    goto LABEL_36;
  }
LABEL_37:
  if (qword_26B174610 != -1) {
    swift_once();
  }
  uint64_t v41 = sub_24A2A7160();
  __swift_project_value_buffer(v41, (uint64_t)qword_26B176928);
  uint64_t v42 = sub_24A2A7140();
  os_log_type_t v43 = sub_24A2A7B40();
  if (os_log_type_enabled(v42, v43))
  {
    uint64_t v44 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v44 = 0;
    _os_log_impl(&dword_24A19F000, v42, v43, "AttestationBundle passed DeviceModePolicy: device has satisfactory REM, EphDM, and DevMode states", v44, 2u);
    MEMORY[0x24C5C00A0](v44, -1, -1);
  }

  uint64_t v40 = *(uint64_t (**)(void))(v0 + 8);
LABEL_42:
  return v40();
}

uint64_t sub_24A26E084(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = swift_task_alloc();
  *(void *)(v3 + 16) = v5;
  *(void *)uint64_t v5 = v3;
  *(void *)(v5 + 8) = sub_24A1C50FC;
  *(void *)(v5 + 16) = a2;
  *(unsigned char *)(v5 + 28) = *(unsigned char *)v2;
  *(_WORD *)(v5 + 29) = *(_WORD *)(v2 + 1);
  __int16 v6 = *(_WORD *)(v2 + 3);
  *(unsigned char *)(v5 + 26) = *(unsigned char *)(v2 + 5);
  *(_WORD *)(v5 + 24) = v6;
  return MEMORY[0x270FA2498](sub_24A26DB34, 0, 0);
}

uint64_t DeviceModePolicy.Mode.restrictedExecution.getter()
{
  return *v0;
}

uint64_t DeviceModePolicy.Mode.ephemeralData.getter()
{
  return *(unsigned __int8 *)(v0 + 1);
}

uint64_t DeviceModePolicy.Mode.developer.getter()
{
  return *(unsigned __int8 *)(v0 + 2);
}

uint64_t DeviceModePolicy.Mode.hash(into:)()
{
  return sub_24A2A7F30();
}

BOOL static DeviceModePolicy.Mode.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2 | a1[1] ^ a2[1] | a2[2] ^ a1[2]) & 1) == 0;
}

uint64_t DeviceModePolicy.Mode.hashValue.getter()
{
  return sub_24A2A7F50();
}

uint64_t sub_24A26E25C()
{
  return sub_24A2A7F30();
}

uint64_t sub_24A26E2A8()
{
  return sub_24A2A7F50();
}

BOOL sub_24A26E314(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2 | a1[1] ^ a2[1] | a2[2] ^ a1[2]) & 1) == 0;
}

BOOL static DeviceModePolicy.Constraint.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t DeviceModePolicy.Constraint.hash(into:)()
{
  return sub_24A2A7F20();
}

uint64_t DeviceModePolicy.Constraint.hashValue.getter()
{
  return sub_24A2A7F50();
}

unint64_t sub_24A26E3D4()
{
  unint64_t result = qword_269779C48;
  if (!qword_269779C48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269779C48);
  }
  return result;
}

unint64_t sub_24A26E42C()
{
  unint64_t result = qword_269779C58;
  if (!qword_269779C58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269779C58);
  }
  return result;
}

unint64_t sub_24A26E484()
{
  unint64_t result = qword_269779C60;
  if (!qword_269779C60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269779C60);
  }
  return result;
}

ValueMetadata *type metadata accessor for DeviceModePolicy()
{
  return &type metadata for DeviceModePolicy;
}

ValueMetadata *type metadata accessor for DeviceModePolicy.Mode()
{
  return &type metadata for DeviceModePolicy.Mode;
}

unsigned char *storeEnumTagSinglePayload for DeviceModePolicy.Constraint(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24A26E5C4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DeviceModePolicy.Constraint()
{
  return &type metadata for DeviceModePolicy.Constraint;
}

ValueMetadata *type metadata accessor for DeviceModePolicy.ModeLoader()
{
  return &type metadata for DeviceModePolicy.ModeLoader;
}

_WORD *__swift_memcpy2_1(_WORD *result, _WORD *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for DeviceModePolicy.Error(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0x3FFE) {
    goto LABEL_17;
  }
  if (a2 + 49154 <= 0xFFFEFFFF) {
    int v2 = 2;
  }
  else {
    int v2 = 4;
  }
  if (a2 + 49154 < 0xFF0000) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 16)) - 49154;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 16)) - 49154;
    }
    int v4 = *((unsigned __int8 *)a1 + 2);
    if (*((unsigned char *)a1 + 2)) {
      return (*a1 | (v4 << 16)) - 49154;
    }
  }
LABEL_17:
  unsigned int v6 = (*a1 & 0x3E00 | (*a1 >> 14) & 0xFFFFFE03 | (4 * (*a1 >> 1))) ^ 0x3FFF;
  if (v6 >= 0x3FFD) {
    unsigned int v6 = -1;
  }
  return v6 + 1;
}

uint64_t storeEnumTagSinglePayload for DeviceModePolicy.Error(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a3 + 49154 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 49154 < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0x3FFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0x3FFD)
  {
    unsigned int v6 = ((a2 - 16382) >> 16) + 1;
    *(_WORD *)unint64_t result = a2 - 16382;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = v6;
        break;
      case 2:
        *(_WORD *)(result + 2) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24A26E7B4);
      case 4:
        *(_DWORD *)(result + 2) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 2) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2)
        {
LABEL_18:
          unsigned int v7 = ((-a2 >> 2) & 0xFFF) - (a2 << 12);
          *(_WORD *)unint64_t result = (4 * v7) & 0xFE00 | (2 * (v7 & 0x7F));
        }
        break;
    }
  }
  return result;
}

uint64_t sub_24A26E7DC(unsigned __int16 *a1)
{
  return *a1 >> 14;
}

_WORD *sub_24A26E7E8(_WORD *result)
{
  *result &= 0x3FFFu;
  return result;
}

_WORD *sub_24A26E7F8(_WORD *result, __int16 a2)
{
  *unint64_t result = *result & 0x101 | (a2 << 14);
  return result;
}

ValueMetadata *type metadata accessor for DeviceModePolicy.Error()
{
  return &type metadata for DeviceModePolicy.Error;
}

uint64_t sub_24A26E81C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  long long v22 = a3;
  uint64_t v25 = sub_24A2A7580();
  uint64_t v23 = *(void *)(v25 - 8);
  MEMORY[0x270FA5388](v25);
  long long v24 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_24A2A7440();
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v7 = sub_24A2A7480();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  unint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v22 - v12;
  uint64_t v27 = a1;
  unint64_t v28 = a2;
  sub_24A1E8DEC(a1, a2);
  sub_24A2A7600();
  uint64_t v14 = v26;
  sub_24A2A7620();
  if (v14)
  {
    v29[0] = (uint64_t)v14;
    id v16 = v14;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2697789C0);
    unint64_t v17 = v24;
    uint64_t v18 = v25;
    if (swift_dynamicCast())
    {
      (*(void (**)(char *, uint64_t))(v23 + 8))(v17, v18);
      v29[0] = (uint64_t)v14;
      sub_24A26FF64((unint64_t *)&qword_2697789C8, MEMORY[0x263F7BF58]);
      swift_allocError();
      id v19 = v14;
      swift_dynamicCast();
    }
    else
    {
      swift_getErrorValue();
      sub_24A2A7EB0();
      sub_24A26FF64((unint64_t *)&qword_2697789C8, MEMORY[0x263F7BF58]);
      swift_allocError();
      sub_24A2A7560();
      swift_bridgeObjectRelease();
    }
    swift_willThrow();

    return sub_24A1A5384(v27, v28);
  }
  else
  {
    char v15 = v22;
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v13, v7);
    ProvisioningCertificate.DeviceIdentity.init(extensionValue:)((uint64_t)v11, v29);
    sub_24A1A5384(v27, v28);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v13, v7);
    uint64_t v21 = v29[1];
    *char v15 = v29[0];
    v15[1] = v21;
  }
  return result;
}

uint64_t sub_24A26EC5C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unsigned int v4 = v3;
  uint64_t v34 = a3;
  uint64_t v39 = sub_24A2A7580();
  uint64_t v36 = *(void *)(v39 - 8);
  MEMORY[0x270FA5388](v39);
  int v38 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_24A2A7440();
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v9 = sub_24A2A7480();
  uint64_t v35 = *(void *)(v9 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v9);
  SecAccessControlRef v37 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v34 - v12;
  uint64_t v40 = a1;
  unint64_t v41 = a2;
  sub_24A1E8DEC(a1, a2);
  sub_24A2A7600();
  sub_24A2A7620();
  if (v3)
  {
    uint64_t v14 = v39;
  }
  else
  {
    uint64_t v19 = v35;
    (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v37, v13, v9);
    uint64_t v20 = sub_24A2A7470();
    long long v24 = sub_24A1B9578(v20, v21, v22, v23);
    unint64_t v26 = v25;
    swift_unknownObjectRelease();
    uint64_t v27 = sub_24A2A7860();
    MEMORY[0x270FA5388](v27 - 8);
    sub_24A2A7850();
    uint64_t v28 = sub_24A2A7820();
    uint64_t v30 = v29;
    sub_24A1A5384((uint64_t)v24, v26);
    if (v30)
    {
      uint64_t v31 = *(void (**)(char *, uint64_t))(v19 + 8);
      v31(v37, v9);
      sub_24A1A5384(v40, v41);
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v31)(v13, v9);
      int v32 = v34;
      *uint64_t v34 = v28;
      v32[1] = v30;
      return result;
    }
    sub_24A26FF64((unint64_t *)&qword_2697789C8, MEMORY[0x263F7BF58]);
    uint64_t v14 = v39;
    unsigned int v4 = (void *)swift_allocError();
    sub_24A2A7570();
    swift_willThrow();
    int v33 = *(void (**)(char *, uint64_t))(v19 + 8);
    v33(v37, v9);
    v33(v13, v9);
  }
  uint64_t v42 = v4;
  id v15 = v4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697789C0);
  id v16 = v38;
  if (swift_dynamicCast())
  {
    (*(void (**)(char *, uint64_t))(v36 + 8))(v16, v14);
    uint64_t v42 = v4;
    sub_24A26FF64((unint64_t *)&qword_2697789C8, MEMORY[0x263F7BF58]);
    swift_allocError();
    id v17 = v4;
    swift_dynamicCast();
  }
  else
  {
    swift_getErrorValue();
    sub_24A2A7EB0();
    sub_24A26FF64((unint64_t *)&qword_2697789C8, MEMORY[0x263F7BF58]);
    swift_allocError();
    sub_24A2A7560();
    swift_bridgeObjectRelease();
  }
  swift_willThrow();

  return sub_24A1A5384(v40, v41);
}

uint64_t ProvisioningCertificate.init<A>(data:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v7 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a2);
  uint64_t v9 = sub_24A2A6B20();
  unint64_t v11 = v10;
  CFDataRef v12 = (const __CFData *)sub_24A2A6AA0();
  sub_24A1A5384(v9, v11);
  uint64_t v13 = SecCertificateCreateWithData(0, v12);

  if (v13)
  {
    ProvisioningCertificate.init(from:)(v13, (__SecCertificate **)v17);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(a1, a2);
    if (!v3)
    {
      long long v16 = v17[1];
      long long v15 = v17[2];
      *a3 = v17[0];
      a3[1] = v16;
      a3[2] = v15;
    }
  }
  else
  {
    type metadata accessor for ProvisioningCertificate.Error();
    sub_24A26FF64((unint64_t *)&qword_2697795A0, (void (*)(uint64_t))type metadata accessor for ProvisioningCertificate.Error);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(a1, a2);
  }
  return result;
}

uint64_t ProvisioningCertificate.fingerprint<A>(using:)()
{
  unsigned int v1 = *(void **)v0;
  int v2 = *(void **)(v0 + 8);
  swift_bridgeObjectRetain();
  uint64_t v3 = v1;
  id v4 = v2;
  swift_bridgeObjectRetain();
  CFDataRef v5 = SecCertificateCopyData(v3);
  uint64_t v6 = sub_24A2A6AD0();
  unint64_t v8 = v7;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  sub_24A1B802C();
  sub_24A2A7190();
  return sub_24A1A5384(v6, v8);
}

id ProvisioningCertificate.publicKey.getter()
{
  return *(id *)(v0 + 8);
}

uint64_t ProvisioningCertificate.chassisID.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 24);
  *a1 = *(void *)(v1 + 16);
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t ProvisioningCertificate.deviceIdentity.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 40);
  *a1 = *(void *)(v1 + 32);
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t ProvisioningCertificate.data.getter()
{
  CFDataRef v1 = SecCertificateCopyData(*v0);
  uint64_t v2 = sub_24A2A6AD0();

  return v2;
}

void ProvisioningCertificate.init(from:)(__SecCertificate *a1@<X0>, __SecCertificate **a2@<X8>)
{
  uint64_t v58 = *MEMORY[0x263EF8340];
  uint64_t v5 = sub_24A2A7580();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x270FA5388](v7);
  CFDataRef v12 = (char *)&v51 - v11;
  MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)&v51 - v13;
  SecKeyRef v15 = SecCertificateCopyKey(a1);
  if (!v15)
  {
    type metadata accessor for ProvisioningCertificate.Error();
    sub_24A26FF64((unint64_t *)&qword_2697795A0, (void (*)(uint64_t))type metadata accessor for ProvisioningCertificate.Error);
    swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();

    return;
  }
  SecKeyRef v16 = v15;
  uint64_t v52 = v6;
  uint64_t v53 = v14;
  char v56 = 0;
  uint64_t v17 = qword_26B174858;
  uint64_t v18 = a1;
  uint64_t v55 = v16;
  if (v17 != -1) {
    swift_once();
  }
  uint64_t v54 = v5;
  uint64_t v19 = sub_24A2A74F0();
  __swift_project_value_buffer(v19, (uint64_t)qword_26B174840);
  sub_24A2A74D0();
  uint64_t v20 = (void *)sub_24A2A77F0();
  swift_bridgeObjectRelease();
  uint64_t v21 = (void *)SecCertificateCopyExtensionValue();

  if (!v21
    || (long long v57 = xmmword_24A2A99E0,
        sub_24A2A6AC0(),
        v21,
        unint64_t v22 = *((void *)&v57 + 1),
        *((void *)&v57 + 1) >> 60 == 15))
  {
    uint64_t v30 = 0;
    uint64_t v31 = 0;
  }
  else
  {
    uint64_t v23 = v57;
    sub_24A1A52B0(v57, *((unint64_t *)&v57 + 1));
    sub_24A26EC5C(v23, v22, (uint64_t *)&v57);
    if (v2)
    {
      *(void *)&long long v57 = v2;
      id v24 = v2;
      __swift_instantiateConcreteTypeFromMangledName(&qword_2697789C0);
      uint64_t v25 = v54;
      if (swift_dynamicCast())
      {

        uint64_t v26 = v52;
        uint64_t v27 = v53;
        (*(void (**)(char *, char *, uint64_t))(v52 + 32))(v53, v12, v25);
        type metadata accessor for ProvisioningCertificate.Error();
        sub_24A26FF64((unint64_t *)&qword_2697795A0, (void (*)(uint64_t))type metadata accessor for ProvisioningCertificate.Error);
        swift_allocError();
        (*(void (**)(uint64_t, char *, uint64_t))(v26 + 16))(v28, v27, v25);
        swift_storeEnumTagMultiPayload();
        swift_willThrow();

        sub_24A1B7B78(v23, v22);
        uint64_t v29 = v55;

        (*(void (**)(char *, uint64_t))(v26 + 8))(v27, v25);
      }
      else
      {

        type metadata accessor for ProvisioningCertificate.Error();
        sub_24A26FF64((unint64_t *)&qword_2697795A0, (void (*)(uint64_t))type metadata accessor for ProvisioningCertificate.Error);
        swift_allocError();
        *unint64_t v47 = v2;
        swift_storeEnumTagMultiPayload();
        id v48 = v2;
        swift_willThrow();
        uint64_t v29 = v55;

        sub_24A1B7B78(v23, v22);
      }

      return;
    }
    sub_24A1B7B78(v23, v22);
    uint64_t v31 = (__SecCertificate *)*((void *)&v57 + 1);
    uint64_t v30 = (__SecCertificate *)v57;
  }
  uint64_t v32 = qword_26B174838;
  int v33 = v18;
  if (v32 != -1) {
    swift_once();
  }
  __swift_project_value_buffer(v19, (uint64_t)qword_26B174820);
  sub_24A2A74D0();
  uint64_t v34 = (void *)sub_24A2A77F0();
  swift_bridgeObjectRelease();
  uint64_t v35 = (void *)SecCertificateCopyExtensionValue();

  if (!v35
    || (long long v57 = xmmword_24A2A99E0,
        sub_24A2A6AC0(),
        v35,
        unint64_t v36 = *((void *)&v57 + 1),
        *((void *)&v57 + 1) >> 60 == 15))
  {
    SecAccessControlRef v37 = 0;
    int v38 = 0;
LABEL_16:
    uint64_t v39 = v55;
    *a2 = v33;
    a2[1] = v39;
    a2[2] = v30;
    a2[3] = v31;
    a2[4] = v37;
    a2[5] = v38;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();

    return;
  }
  uint64_t v40 = v57;
  sub_24A1A52B0(v57, *((unint64_t *)&v57 + 1));
  sub_24A26E81C(v40, v36, &v57);
  if (!v2)
  {
    sub_24A1B7B78(v40, v36);
    int v38 = (__SecCertificate *)*((void *)&v57 + 1);
    SecAccessControlRef v37 = (__SecCertificate *)v57;
    goto LABEL_16;
  }
  *(void *)&long long v57 = v2;
  id v41 = v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697789C0);
  uint64_t v42 = v54;
  if (swift_dynamicCast())
  {

    uint64_t v43 = v52;
    (*(void (**)(char *, char *, uint64_t))(v52 + 32))(v53, v9, v42);
    uint64_t v51 = type metadata accessor for ProvisioningCertificate.Error();
    sub_24A26FF64((unint64_t *)&qword_2697795A0, (void (*)(uint64_t))type metadata accessor for ProvisioningCertificate.Error);
    swift_allocError();
    uint64_t v44 = v53;
    (*(void (**)(uint64_t, char *, uint64_t))(v43 + 16))(v45, v53, v42);
    swift_storeEnumTagMultiPayload();
    swift_willThrow();

    sub_24A1B7B78(v40, v36);
    uint64_t v46 = v55;

    (*(void (**)(char *, uint64_t))(v43 + 8))(v44, v42);
  }
  else
  {

    type metadata accessor for ProvisioningCertificate.Error();
    sub_24A26FF64((unint64_t *)&qword_2697795A0, (void (*)(uint64_t))type metadata accessor for ProvisioningCertificate.Error);
    swift_allocError();
    void *v49 = v2;
    swift_storeEnumTagMultiPayload();
    id v50 = v2;
    swift_willThrow();
    uint64_t v46 = v55;

    sub_24A1B7B78(v40, v36);
  }

  swift_bridgeObjectRelease();
}

uint64_t destroy for ProvisioningCertificate(id *a1)
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for ProvisioningCertificate(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  id v4 = *(void **)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  a1[2] = *(void *)(a2 + 16);
  a1[3] = v5;
  uint64_t v6 = *(void *)(a2 + 40);
  a1[4] = *(void *)(a2 + 32);
  a1[5] = v6;
  id v7 = v3;
  id v8 = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ProvisioningCertificate(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  id v7 = *(void **)(a2 + 8);
  id v8 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v7;
  id v9 = v7;

  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for ProvisioningCertificate(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ProvisioningCertificate(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ProvisioningCertificate(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ProvisioningCertificate()
{
  return &type metadata for ProvisioningCertificate;
}

uint64_t sub_24A26FF64(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_24A26FFAC@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    int v4 = 0;
    uint64_t v5 = (unsigned __int8 *)(a1 + 32);
    do
    {
      int v7 = *v5++;
      int v6 = v7;
      if ((v7 & ~v4) == 0) {
        int v6 = 0;
      }
      v4 |= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    LOBYTE(v4) = 0;
  }
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

uint64_t sub_24A270004@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = 0;
    uint64_t v5 = (uint64_t *)(a1 + 32);
    do
    {
      uint64_t v7 = *v5++;
      uint64_t v6 = v7;
      if ((v7 & ~v4) == 0) {
        uint64_t v6 = 0;
      }
      v4 |= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

uint64_t X509Policy.init(required:roots:clock:revocation:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  id v8 = (int *)type metadata accessor for X509Policy();
  uint64_t v9 = a4 + v8[6];
  uint64_t v10 = sub_24A2A6BC0();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  uint64_t v11 = a4 + v8[7];
  *(void *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 8) = 1;
  CFDataRef v12 = (uint64_t *)(a4 + v8[8]);
  *CFDataRef v12 = 0;
  v12[1] = 0;
  *(unsigned char *)a4 = a1;
  *(void *)(a4 + 8) = a2;
  sub_24A1CAB90(a3, v9);
  uint64_t result = sub_24A1CF11C(*v12);
  *CFDataRef v12 = 0;
  v12[1] = 0;
  *(void *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 8) = 1;
  return result;
}

uint64_t type metadata accessor for X509Policy()
{
  uint64_t result = qword_26B1742A0;
  if (!qword_26B1742A0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

double AttestationPolicyContext.validatedCert.getter@<D0>(_OWORD *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = type metadata accessor for X509Policy();
  if (!*(void *)(v3 + 16)
    || (unint64_t v5 = sub_24A1BE7EC(v4, (uint64_t)&protocol witness table for X509Policy, 0x65746164696C6176, 0xED00007472654364), (v6 & 1) == 0)|| (sub_24A1C9680(*(void *)(v3 + 56) + 32 * v5, (uint64_t)&v8), __swift_instantiateConcreteTypeFromMangledName(&qword_26B174BB8), (swift_dynamicCast() & 1) == 0))
  {
    double result = 0.0;
    a1[1] = 0u;
    a1[2] = 0u;
    *a1 = 0u;
  }
  return result;
}

uint64_t X509Policy.init(roots:clock:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v25 = a2;
  uint64_t v28 = a1;
  uint64_t v5 = type metadata accessor for X509Policy();
  char v6 = (int *)(v5 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v26 = (uint64_t)&v25 - v10;
  uint64_t v27 = a3 + v6[8];
  uint64_t v11 = v27;
  uint64_t v12 = sub_24A2A6BC0();
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
  v13(v11, 1, 1, v12);
  uint64_t v14 = a3 + v6[9];
  *(void *)uint64_t v14 = 0;
  *(unsigned char *)(v14 + 8) = 1;
  SecKeyRef v15 = (uint64_t *)(a3 + v6[10]);
  *SecKeyRef v15 = 0;
  v15[1] = 0;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B173100);
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v18 = (char *)&v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24A1B2CAC(a2, (uint64_t)v18, &qword_26B173100);
  uint64_t v19 = (uint64_t)&v9[v6[8]];
  v13(v19, 1, 1, v12);
  uint64_t v20 = &v9[v6[9]];
  *(void *)uint64_t v20 = 0;
  v20[8] = 1;
  uint64_t v21 = (uint64_t *)&v9[v6[10]];
  *uint64_t v21 = 0;
  v21[1] = 0;
  *uint64_t v9 = 1;
  *((void *)v9 + 1) = v28;
  sub_24A1CAB90((uint64_t)v18, v19);
  sub_24A1CF11C(*v21);
  *uint64_t v21 = 0;
  v21[1] = 0;
  *(void *)uint64_t v20 = 0;
  v20[8] = 1;
  uint64_t v22 = (uint64_t)v9;
  uint64_t v23 = v26;
  sub_24A271FDC(v22, v26);
  sub_24A1B2D10(v25, &qword_26B173100);
  sub_24A1B2D10(v27, &qword_26B173100);
  sub_24A1CF11C(*v15);
  return sub_24A271FDC(v23, a3);
}

void sub_24A270478(uint64_t a1)
{
  error[1] = *(CFErrorRef *)MEMORY[0x263EF8340];
  DCuint64_t Attestation = SecPolicyCreateDCAttestation();
  if (!DCAttestation)
  {
    sub_24A2721A8();
    swift_allocError();
    *uint64_t v10 = 0x8000000000000004;
    swift_willThrow();
    return;
  }
  uint64_t v4 = (void *)DCAttestation;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B174BA8);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_24A2AA570;
  *(void *)(v5 + 32) = v4;
  error[0] = (CFErrorRef)v5;
  sub_24A2A7A40();
  unint64_t v40 = (unint64_t)error[0];
  uint64_t v6 = type metadata accessor for X509Policy();
  uint64_t v7 = v1 + *(int *)(v6 + 28);
  int v8 = *(unsigned __int8 *)(v7 + 8);
  if (v8 == 1)
  {
    id v9 = v4;
  }
  else
  {
    CFOptionFlags v11 = *(void *)v7;
    id v12 = v4;
    SecPolicyRef Revocation = SecPolicyCreateRevocation(v11);
    if (!Revocation)
    {
      swift_bridgeObjectRelease();
      sub_24A2721A8();
      swift_allocError();
      *uint64_t v21 = 0x8000000000000003;
      swift_willThrow();

      return;
    }
    uint64_t v14 = Revocation;
    MEMORY[0x24C5BF1B0]();
    if (*(void *)((v40 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v40 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      sub_24A2A7A50();
    }
    sub_24A2A7A80();
    sub_24A2A7A40();
  }
  swift_bridgeObjectRetain();
  SecKeyRef v15 = sub_24A1B4508(a1);
  swift_bridgeObjectRelease();
  if (!v15)
  {
    swift_bridgeObjectRelease();
    sub_24A2721A8();
    swift_allocError();
    *uint64_t v20 = 0x8000000000000001;
    swift_willThrow();

    return;
  }
  type metadata accessor for SecCertificate(0);
  CFArrayRef v16 = (const __CFArray *)sub_24A2A7A20();
  unsigned int v17 = SecTrustSetAnchorCertificates(v15, v16);

  if (v17)
  {
LABEL_14:
    swift_bridgeObjectRelease();
    sub_24A2721A8();
    swift_allocError();
    *uint64_t v19 = v17 | 0x4000000000000000;
    swift_willThrow();

    return;
  }
  OSStatus Allowed = SecTrustSetAnchorCertificatesOnly(v15, 1u);
  if (Allowed || (OSStatus Allowed = SecTrustSetNetworkFetchAllowed(v15, v8 ^ 1)) != 0)
  {
    unsigned int v17 = Allowed;
    goto LABEL_14;
  }
  uint64_t v22 = sub_24A2A6BC0();
  uint64_t v39 = &v37;
  uint64_t v23 = *(void *)(v22 - 8);
  MEMORY[0x270FA5388](v22);
  int v38 = (char *)&v37 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = v1 + *(int *)(v6 + 24);
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B173100);
  MEMORY[0x270FA5388](v26 - 8);
  uint64_t v28 = (char *)&v37 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24A1B2CAC(v25, (uint64_t)v28, &qword_26B173100);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v28, 1, v22) == 1)
  {
    sub_24A1B2D10((uint64_t)v28, &qword_26B173100);
  }
  else
  {
    uint64_t v29 = v38;
    (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v38, v28, v22);
    CFDateRef v30 = (const __CFDate *)sub_24A2A6B50();
    unsigned int v31 = SecTrustSetVerifyDate(v15, v30);

    if (v31)
    {
      swift_bridgeObjectRelease();
      sub_24A2721A8();
      swift_allocError();
      *uint64_t v32 = v31 | 0x4000000000000000;
      swift_willThrow();

      (*(void (**)(char *, uint64_t))(v23 + 8))(v29, v22);
      return;
    }
    (*(void (**)(char *, uint64_t))(v23 + 8))(v29, v22);
  }
  error[0] = 0;
  if (SecTrustEvaluateWithError(v15, error))
  {

    swift_bridgeObjectRelease();
  }
  else if (error[0])
  {
    int v33 = error[0];
    swift_bridgeObjectRelease();
    type metadata accessor for CFError(0);
    sub_24A1F0A30();
    uint64_t v34 = swift_allocError();
    void *v35 = v33;
    sub_24A2721A8();
    swift_allocError();
    *unint64_t v36 = v34;
    swift_willThrow();
  }
  else
  {
    __break(1u);
  }
}

uint64_t X509Policy.required.getter()
{
  return *v0;
}

uint64_t X509Policy.required.setter(uint64_t result)
{
  unsigned char *v1 = result;
  return result;
}

uint64_t (*X509Policy.required.modify())()
{
  return nullsub_1;
}

uint64_t X509Policy.roots.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t X509Policy.roots.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 8) = a1;
  return result;
}

uint64_t (*X509Policy.roots.modify())()
{
  return nullsub_1;
}

uint64_t X509Policy.clock.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for X509Policy();
  return sub_24A1B2CAC(v1 + *(int *)(v3 + 24), a1, &qword_26B173100);
}

uint64_t X509Policy.clock.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for X509Policy() + 24);

  return sub_24A1CAB90(a1, v3);
}

uint64_t (*X509Policy.clock.modify())()
{
  return nullsub_1;
}

uint64_t X509Policy.revocation.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = type metadata accessor for X509Policy();
  uint64_t v4 = (uint64_t *)(v1 + *(int *)(result + 28));
  uint64_t v5 = *v4;
  LOBYTE(v4) = *((unsigned char *)v4 + 8);
  *(void *)a1 = v5;
  *(unsigned char *)(a1 + 8) = (_BYTE)v4;
  return result;
}

uint64_t X509Policy.revocation.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char v3 = *((unsigned char *)a1 + 8);
  uint64_t result = type metadata accessor for X509Policy();
  uint64_t v5 = v1 + *(int *)(result + 28);
  *(void *)uint64_t v5 = v2;
  *(unsigned char *)(v5 + 8) = v3;
  return result;
}

uint64_t (*X509Policy.revocation.modify())()
{
  return nullsub_1;
}

uint64_t sub_24A270C2C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (*a1) {
    uint64_t v3 = a1[1];
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = (uint64_t *)(a2 + *(int *)(type metadata accessor for X509Policy() + 32));
  uint64_t v5 = *v4;
  sub_24A1CF454(v2);
  uint64_t result = sub_24A1CF11C(v5);
  *uint64_t v4 = v2;
  v4[1] = v3;
  return result;
}

uint64_t X509Policy.body.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for X509Policy() + 32));
  sub_24A1CF454(v1);
  return v1;
}

uint64_t X509Policy.body.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (uint64_t *)(v2 + *(int *)(type metadata accessor for X509Policy() + 32));
  uint64_t result = sub_24A1CF11C(*v5);
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*X509Policy.body.modify())()
{
  return nullsub_1;
}

uint64_t sub_24A270D6C()
{
  uint64_t v0 = sub_24A2A7160();
  __swift_allocate_value_buffer(v0, qword_26B176868);
  __swift_project_value_buffer(v0, (uint64_t)qword_26B176868);
  return sub_24A2A7150();
}

uint64_t X509Policy.init(required:roots:clock:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v27 = a3;
  uint64_t v31 = a2;
  int v30 = a1;
  uint64_t v6 = type metadata accessor for X509Policy();
  uint64_t v7 = (int *)(v6 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v28 = (uint64_t)&v26 - v11;
  uint64_t v29 = a4 + v7[8];
  uint64_t v12 = v29;
  uint64_t v13 = sub_24A2A6BC0();
  uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
  v14(v12, 1, 1, v13);
  uint64_t v15 = a4 + v7[9];
  *(void *)uint64_t v15 = 0;
  *(unsigned char *)(v15 + 8) = 1;
  CFArrayRef v16 = (uint64_t *)(a4 + v7[10]);
  *CFArrayRef v16 = 0;
  v16[1] = 0;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B173100);
  MEMORY[0x270FA5388](v17 - 8);
  uint64_t v19 = (char *)&v26 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24A1B2CAC(a3, (uint64_t)v19, &qword_26B173100);
  uint64_t v20 = (uint64_t)&v10[v7[8]];
  v14(v20, 1, 1, v13);
  uint64_t v21 = &v10[v7[9]];
  *(void *)uint64_t v21 = 0;
  v21[8] = 1;
  uint64_t v22 = (uint64_t *)&v10[v7[10]];
  *uint64_t v22 = 0;
  v22[1] = 0;
  *uint64_t v10 = v30;
  *((void *)v10 + 1) = v31;
  sub_24A1CAB90((uint64_t)v19, v20);
  sub_24A1CF11C(*v22);
  *uint64_t v22 = 0;
  v22[1] = 0;
  *(void *)uint64_t v21 = 0;
  v21[8] = 1;
  uint64_t v23 = (uint64_t)v10;
  uint64_t v24 = v28;
  sub_24A271FDC(v23, v28);
  sub_24A1B2D10(v27, &qword_26B173100);
  sub_24A1B2D10(v29, &qword_26B173100);
  sub_24A1CF11C(*v16);
  return sub_24A271FDC(v24, a4);
}

uint64_t X509Policy.verifies(body:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_24A272040(v3, a3);
  uint64_t v7 = (uint64_t *)(a3 + *(int *)(type metadata accessor for X509Policy() + 32));
  uint64_t v8 = *v7;
  swift_retain();
  uint64_t result = sub_24A1CF11C(v8);
  *uint64_t v7 = a1;
  v7[1] = a2;
  return result;
}

uint64_t X509Policy.evaluate(bundle:context:)(uint64_t a1, uint64_t a2)
{
  v3[16] = a2;
  v3[17] = v2;
  v3[15] = a1;
  v3[18] = type metadata accessor for X509Policy();
  v3[19] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_24A271130, 0, 0);
}

uint64_t sub_24A271130()
{
  uint64_t v56 = v0;
  uint64_t v1 = *(void **)(*(void *)(v0 + 120) + 32);
  if (v1[2])
  {
    uint64_t v2 = v1[4];
    *(void *)(v0 + 160) = v2;
    unint64_t v3 = v1[5];
    *(void *)(v0 + 168) = v3;
    sub_24A1A52B0(v2, v3);
    sub_24A270478((uint64_t)v1);
    sub_24A1A52B0(v2, v3);
    sub_24A1A52B0(v2, v3);
    uint64_t v4 = sub_24A1B52A8(v2, v3);
    unint64_t v6 = v5;
    CFDataRef v7 = (const __CFData *)sub_24A2A6AA0();
    sub_24A1A5384(v4, v6);
    uint64_t v8 = SecCertificateCreateWithData(0, v7);

    if (v8)
    {
      ProvisioningCertificate.init(from:)(v8, &v50);
      uint64_t v46 = *(void *)(v0 + 144);
      sub_24A1A5384(v2, v3);
      uint64_t v22 = v50;
      uint64_t v23 = v51;
      *(void *)(v0 + 176) = v50;
      *(void *)(v0 + 184) = v23;
      uint64_t v24 = v52;
      uint64_t v25 = v53;
      uint64_t v27 = v54;
      uint64_t v26 = v55;
      *(void *)(v0 + 192) = v53;
      *(void *)(v0 + 200) = v26;
      *(void *)(v0 + 80) = &type metadata for ProvisioningCertificate;
      uint64_t v28 = (void *)swift_allocObject();
      *(void *)(v0 + 56) = v28;
      v28[2] = v22;
      v28[3] = v23;
      uint64_t v45 = v27;
      v28[4] = v24;
      v28[5] = v25;
      v28[6] = v27;
      v28[7] = v26;
      sub_24A1B2CAC(v0 + 56, v0 + 88, &qword_26B174BC0);
      uint64_t v47 = v26;
      swift_bridgeObjectRetain();
      uint64_t v15 = v22;
      id v29 = v23;
      uint64_t v30 = v25;
      id v31 = v29;
      swift_bridgeObjectRetain();
      sub_24A1DA970(v0 + 88, v46, (uint64_t)&protocol witness table for X509Policy, 0x65746164696C6176, 0xED00007472654364);
      sub_24A1B2D10(v0 + 56, &qword_26B174BC0);
      if (qword_26B174298 != -1) {
        swift_once();
      }
      uint64_t v49 = v30;
      uint64_t v32 = sub_24A2A7160();
      __swift_project_value_buffer(v32, (uint64_t)qword_26B176868);
      int v33 = sub_24A2A7140();
      os_log_type_t v34 = sub_24A2A7B40();
      if (os_log_type_enabled(v33, v34))
      {
        uint64_t v35 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v35 = 0;
        _os_log_impl(&dword_24A19F000, v33, v34, "AttestationBundle passed X509Policy: provisioning identity certificate trusted", v35, 2u);
        MEMORY[0x24C5C00A0](v35, -1, -1);
      }
      uint64_t v37 = *(void *)(v0 + 136);
      uint64_t v36 = *(void *)(v0 + 144);

      uint64_t v38 = v37 + *(int *)(v36 + 32);
      uint64_t v39 = *(void (**)(__SecCertificate **))v38;
      *(void *)(v0 + 208) = *(void *)v38;
      *(void *)(v0 + 216) = *(void *)(v38 + 8);
      if (v39)
      {
        id v50 = v15;
        id v51 = v31;
        uint64_t v52 = v24;
        uint64_t v53 = v49;
        uint64_t v54 = v45;
        uint64_t v55 = v47;
        swift_retain();
        v39(&v50);
        uint64_t v40 = *(void *)(v0 + 40);
        uint64_t v41 = *(void *)(v0 + 48);
        __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), v40);
        id v48 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v41 + 8) + **(int **)(v41 + 8));
        uint64_t v42 = (void *)swift_task_alloc();
        *(void *)(v0 + 224) = v42;
        *uint64_t v42 = v0;
        v42[1] = sub_24A2717A4;
        uint64_t v44 = *(void *)(v0 + 120);
        uint64_t v43 = *(void *)(v0 + 128);
        return v48(v44, v43, v40, v41);
      }
      sub_24A1A5384(v2, v3);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      goto LABEL_14;
    }
    type metadata accessor for ProvisioningCertificate.Error();
    sub_24A272100();
    uint64_t v9 = (void *)swift_allocError();
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    sub_24A1A5384(v2, v3);
    sub_24A1A5384(v2, v3);
  }
  else
  {
    sub_24A2721A8();
    uint64_t v9 = (void *)swift_allocError();
    *uint64_t v10 = 0x8000000000000000;
    swift_willThrow();
  }
  uint64_t v11 = *(unsigned char **)(v0 + 136);
  if (*v11 != 1)
  {
    if (qword_26B174298 != -1)
    {
      swift_once();
      uint64_t v11 = *(unsigned char **)(v0 + 136);
    }
    uint64_t v13 = *(void *)(v0 + 152);
    uint64_t v14 = sub_24A2A7160();
    __swift_project_value_buffer(v14, (uint64_t)qword_26B176868);
    sub_24A272040((uint64_t)v11, v13);
    uint64_t v15 = (__SecCertificate *)sub_24A2A7140();
    os_log_type_t v16 = sub_24A2A7B30();
    BOOL v17 = os_log_type_enabled((os_log_t)v15, v16);
    uint64_t v18 = *(unsigned __int8 **)(v0 + 152);
    if (v17)
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v19 = 67240192;
      int v20 = *v18;
      sub_24A2720A4((uint64_t)v18);
      *(_DWORD *)(v0 + 240) = v20;
      sub_24A2A7B70();
      _os_log_impl(&dword_24A19F000, (os_log_t)v15, v16, "Failing open since \"required\"=%{BOOL,public}d", v19, 8u);
      MEMORY[0x24C5C00A0](v19, -1, -1);
    }
    else
    {
      sub_24A2720A4(*(void *)(v0 + 152));
    }

LABEL_14:
    swift_task_dealloc();
    uint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_15;
  }
  swift_willThrow();
  swift_task_dealloc();
  uint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
LABEL_15:
  return v12();
}

uint64_t sub_24A2717A4()
{
  *(void *)(*(void *)v1 + 232) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_24A271978;
  }
  else {
    uint64_t v2 = sub_24A2718B8;
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

uint64_t sub_24A2718B8()
{
  uint64_t v1 = v0[26];
  unint64_t v3 = (void *)v0[22];
  uint64_t v2 = (void *)v0[23];
  sub_24A1A5384(v0[20], v0[21]);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_24A1CF11C(v1);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_24A271978()
{
  uint64_t v1 = *(void *)(v0 + 208);
  unint64_t v3 = *(void **)(v0 + 176);
  uint64_t v2 = *(void **)(v0 + 184);
  sub_24A1A5384(*(void *)(v0 + 160), *(void *)(v0 + 168));

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_24A1CF11C(v1);
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  uint64_t v4 = *(void **)(v0 + 232);
  unint64_t v5 = *(unsigned char **)(v0 + 136);
  if (*v5)
  {
    swift_willThrow();
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  }
  else
  {
    if (qword_26B174298 != -1)
    {
      swift_once();
      unint64_t v5 = *(unsigned char **)(v0 + 136);
    }
    uint64_t v7 = *(void *)(v0 + 152);
    uint64_t v8 = sub_24A2A7160();
    __swift_project_value_buffer(v8, (uint64_t)qword_26B176868);
    sub_24A272040((uint64_t)v5, v7);
    uint64_t v9 = sub_24A2A7140();
    os_log_type_t v10 = sub_24A2A7B30();
    BOOL v11 = os_log_type_enabled(v9, v10);
    uint64_t v12 = *(unsigned __int8 **)(v0 + 152);
    if (v11)
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 67240192;
      int v14 = *v12;
      sub_24A2720A4((uint64_t)v12);
      *(_DWORD *)(v0 + 240) = v14;
      sub_24A2A7B70();
      _os_log_impl(&dword_24A19F000, v9, v10, "Failing open since \"required\"=%{BOOL,public}d", v13, 8u);
      MEMORY[0x24C5C00A0](v13, -1, -1);
    }
    else
    {
      sub_24A2720A4(*(void *)(v0 + 152));
    }

    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v6();
}

uint64_t sub_24A271B94(uint64_t a1, uint64_t a2)
{
  unint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *unint64_t v5 = v2;
  v5[1] = sub_24A1C50FC;
  return X509Policy.evaluate(bundle:context:)(a1, a2);
}

uint64_t X509Policy.RevocationPolicy.rawValue.getter()
{
  return *(void *)v0;
}

CloudAttestation::X509Policy::RevocationPolicy __swiftcall X509Policy.RevocationPolicy.init(rawValue:)(CloudAttestation::X509Policy::RevocationPolicy rawValue)
{
  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

void static X509Policy.RevocationPolicy.any.getter(void *a1@<X8>)
{
  *a1 = 3;
}

void static X509Policy.RevocationPolicy.ocsp.getter(void *a1@<X8>)
{
  *a1 = 1;
}

void static X509Policy.RevocationPolicy.crl.getter(void *a1@<X8>)
{
  *a1 = 2;
}

void static X509Policy.RevocationPolicy.preferCRL.getter(void *a1@<X8>)
{
  *a1 = 4;
}

void static X509Policy.RevocationPolicy.requirePositiveResponse.getter(void *a1@<X8>)
{
  *a1 = 8;
}

void static X509Policy.RevocationPolicy.networkAccessDisabled.getter(void *a1@<X8>)
{
  *a1 = 16;
}

void *sub_24A271C90@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_24A271C9C(void *a1@<X8>)
{
  *a1 = 0;
}

void *sub_24A271CA4@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

void *sub_24A271CB8@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

void *sub_24A271CCC@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_24A271CE0(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

void *sub_24A271D10@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_24A271D3C@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *result;
  uint64_t v4 = *v2;
  *v2 |= *result;
  uint64_t v5 = v4 & v3;
  *(void *)a2 = v5;
  *(unsigned char *)(a2 + 8) = v5 == 0;
  return result;
}

void *sub_24A271D60(void *result)
{
  *v1 |= *result;
  return result;
}

void *sub_24A271D74(void *result)
{
  *v1 &= *result;
  return result;
}

void *sub_24A271D88(void *result)
{
  *v1 ^= *result;
  return result;
}

void *sub_24A271D9C@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_24A271DB0(void *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL sub_24A271DC4(void *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL sub_24A271DD8(void *a1)
{
  return (*a1 & ~*v1) == 0;
}

BOOL sub_24A271DEC()
{
  return *v0 == 0;
}

void *sub_24A271DFC(void *result)
{
  *v1 &= ~*result;
  return result;
}

void *sub_24A271E10@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

void sub_24A271E24()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B174BA8);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_24A2AA570;
  CFAllocatorRef v1 = (const __CFAllocator *)*MEMORY[0x263EFFB10];
  if (qword_2697783F8 != -1) {
    swift_once();
  }
  CFDataRef v2 = (const __CFData *)sub_24A2A6AA0();
  SecCertificateRef v3 = SecCertificateCreateWithData(v1, v2);

  if (v3)
  {
    *(void *)(v0 + 32) = v3;
    sub_24A2A7A40();
    qword_26977A7B0 = v0;
  }
  else
  {
    __break(1u);
  }
}

void sub_24A271F00()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B174BA8);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_24A2AA570;
  CFAllocatorRef v1 = (const __CFAllocator *)*MEMORY[0x263EFFB10];
  if (qword_26B174890 != -1) {
    swift_once();
  }
  CFDataRef v2 = (const __CFData *)sub_24A2A6AA0();
  SecCertificateRef v3 = SecCertificateCreateWithData(v1, v2);

  if (v3)
  {
    *(void *)(v0 + 32) = v3;
    sub_24A2A7A40();
    qword_26B176860 = v0;
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_24A271FDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for X509Policy();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_24A272040(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for X509Policy();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_24A2720A4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for X509Policy();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_24A272100()
{
  unint64_t result = qword_2697795A0;
  if (!qword_2697795A0)
  {
    type metadata accessor for ProvisioningCertificate.Error();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2697795A0);
  }
  return result;
}

uint64_t sub_24A272158()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 64, 7);
}

unint64_t sub_24A2721A8()
{
  unint64_t result = qword_269779C70;
  if (!qword_269779C70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269779C70);
  }
  return result;
}

unint64_t sub_24A272200()
{
  unint64_t result = qword_269779C80;
  if (!qword_269779C80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269779C80);
  }
  return result;
}

unint64_t sub_24A272258()
{
  unint64_t result = qword_269779C88;
  if (!qword_269779C88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269779C88);
  }
  return result;
}

unint64_t sub_24A2722B0()
{
  unint64_t result = qword_269779C90;
  if (!qword_269779C90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269779C90);
  }
  return result;
}

unint64_t sub_24A272308()
{
  unint64_t result = qword_269779C98;
  if (!qword_269779C98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269779C98);
  }
  return result;
}

uint64_t sub_24A27235C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  SecCertificateRef v3 = (uint64_t *)(a1 + *(int *)(type metadata accessor for X509Policy() + 32));
  uint64_t v4 = *v3;
  if (*v3) {
    uint64_t v5 = v3[1];
  }
  else {
    uint64_t v5 = 0;
  }
  *a2 = v4;
  a2[1] = v5;

  return sub_24A1CF454(v4);
}

uint64_t *initializeBufferWithCopyOfBuffer for X509Policy(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    a1[1] = a2[1];
    uint64_t v7 = a3[6];
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = sub_24A2A6BC0();
    uint64_t v11 = *(void *)(v10 - 8);
    uint64_t v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
    swift_bridgeObjectRetain();
    if (v12(v9, 1, v10))
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B173100);
      memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    uint64_t v15 = a3[7];
    uint64_t v16 = a3[8];
    BOOL v17 = (char *)v4 + v15;
    uint64_t v18 = (char *)a2 + v15;
    *(void *)BOOL v17 = *(void *)v18;
    v17[8] = v18[8];
    uint64_t v19 = (uint64_t *)((char *)v4 + v16);
    int v20 = (uint64_t *)((char *)a2 + v16);
    if (*v20)
    {
      uint64_t v21 = v20[1];
      *uint64_t v19 = *v20;
      v19[1] = v21;
      swift_retain();
    }
    else
    {
      *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
    }
  }
  return v4;
}

uint64_t destroy for X509Policy(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = sub_24A2A6BC0();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  if (!result) {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  if (*(void *)(a1 + *(int *)(a2 + 32)))
  {
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for X509Policy(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v6 = a3[6];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = sub_24A2A6BC0();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48);
  swift_bridgeObjectRetain();
  if (v11(v8, 1, v9))
  {
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B173100);
    memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v13;
  uint64_t v16 = a2 + v13;
  *(void *)uint64_t v15 = *(void *)v16;
  *(unsigned char *)(v15 + 8) = *(unsigned char *)(v16 + 8);
  BOOL v17 = (void *)(a1 + v14);
  uint64_t v18 = (void *)(a2 + v14);
  if (*v18)
  {
    uint64_t v19 = v18[1];
    *BOOL v17 = *v18;
    v17[1] = v19;
    swift_retain();
  }
  else
  {
    *(_OWORD *)BOOL v17 = *(_OWORD *)v18;
  }
  return a1;
}

uint64_t assignWithCopy for X509Policy(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[6];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (void *)(a2 + v6);
  uint64_t v9 = sub_24A2A6BC0();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B173100);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = a3[7];
  uint64_t v16 = a1 + v15;
  BOOL v17 = (uint64_t *)(a2 + v15);
  uint64_t v18 = *v17;
  *(unsigned char *)(v16 + 8) = *((unsigned char *)v17 + 8);
  *(void *)uint64_t v16 = v18;
  uint64_t v19 = a3[8];
  int v20 = (void *)(a1 + v19);
  uint64_t v21 = (uint64_t *)(a2 + v19);
  uint64_t v22 = *(void *)(a1 + v19);
  uint64_t v23 = *v21;
  if (!v22)
  {
    if (v23)
    {
      uint64_t v25 = v21[1];
      *int v20 = v23;
      v20[1] = v25;
      swift_retain();
      return a1;
    }
LABEL_13:
    *(_OWORD *)int v20 = *(_OWORD *)v21;
    return a1;
  }
  if (!v23)
  {
    swift_release();
    goto LABEL_13;
  }
  uint64_t v24 = v21[1];
  *int v20 = v23;
  v20[1] = v24;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for X509Policy(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v6 = a3[6];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = sub_24A2A6BC0();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B173100);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v12 = a3[7];
  uint64_t v13 = a3[8];
  uint64_t v14 = a1 + v12;
  uint64_t v15 = a2 + v12;
  *(void *)uint64_t v14 = *(void *)v15;
  *(unsigned char *)(v14 + 8) = *(unsigned char *)(v15 + 8);
  uint64_t v16 = (void *)(a1 + v13);
  BOOL v17 = (uint64_t *)(a2 + v13);
  uint64_t v18 = *v17;
  if (*v17)
  {
    uint64_t v19 = v17[1];
    *uint64_t v16 = v18;
    v16[1] = v19;
  }
  else
  {
    *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
  }
  return a1;
}

uint64_t assignWithTake for X509Policy(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[6];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (void *)(a2 + v6);
  uint64_t v9 = sub_24A2A6BC0();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 32))(v7, v8, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B173100);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 40))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = a3[7];
  uint64_t v16 = a3[8];
  uint64_t v17 = a1 + v15;
  uint64_t v18 = a2 + v15;
  *(void *)uint64_t v17 = *(void *)v18;
  *(unsigned char *)(v17 + 8) = *(unsigned char *)(v18 + 8);
  uint64_t v19 = (void *)(a1 + v16);
  int v20 = (uint64_t *)(a2 + v16);
  uint64_t v21 = *v20;
  if (!*(void *)(a1 + v16))
  {
    if (v21)
    {
      uint64_t v23 = v20[1];
      *uint64_t v19 = v21;
      v19[1] = v23;
      return a1;
    }
LABEL_13:
    *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
    return a1;
  }
  if (!v21)
  {
    swift_release();
    goto LABEL_13;
  }
  uint64_t v22 = v20[1];
  *uint64_t v19 = v21;
  v19[1] = v22;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for X509Policy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24A272D8C);
}

uint64_t sub_24A272D8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B173100);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for X509Policy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24A272E54);
}

uint64_t sub_24A272E54(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B173100);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 24);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

void sub_24A272F00()
{
  sub_24A1D0D08();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

ValueMetadata *type metadata accessor for X509Policy.RevocationPolicy()
{
  return &type metadata for X509Policy.RevocationPolicy;
}

void *initializeBufferWithCopyOfBuffer for X509Policy.Error(void *a1, id *a2)
{
  id v3 = *a2;
  sub_24A272FFC(*a2);
  *a1 = v3;
  return a1;
}

id sub_24A272FFC(id result)
{
  if (!((unint64_t)result >> 62)) {
    return result;
  }
  return result;
}

void destroy for X509Policy.Error(id *a1)
{
}

void sub_24A273014(id a1)
{
  if (!((unint64_t)a1 >> 62)) {
}
  }

void **assignWithCopy for X509Policy.Error(void **a1, id *a2)
{
  id v3 = *a2;
  sub_24A272FFC(*a2);
  unint64_t v4 = *a1;
  *a1 = v3;
  sub_24A273014(v4);
  return a1;
}

void **assignWithTake for X509Policy.Error(void **a1, void **a2)
{
  id v3 = *a1;
  *a1 = *a2;
  sub_24A273014(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for X509Policy.Error(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xE && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 14);
  }
  unsigned int v3 = (((*(void *)a1 >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)a1 >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xD) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for X509Policy.Error(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xD)
  {
    *(void *)uint64_t result = a2 - 14;
    if (a3 >= 0xE) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0xE) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

uint64_t sub_24A273134(void *a1)
{
  uint64_t v1 = *a1 >> 62;
  if (v1 <= 1) {
    return v1;
  }
  else {
    return *a1 + 2;
  }
}

void *sub_24A27314C(void *result, uint64_t a2)
{
  if (a2 < 2) {
    *uint64_t result = *result & 0xFFFFFFFFFFFFFFFLL | (a2 << 62);
  }
  else {
    *uint64_t result = (a2 - 2) | 0x8000000000000000;
  }
  return result;
}

ValueMetadata *type metadata accessor for X509Policy.Error()
{
  return &type metadata for X509Policy.Error;
}

uint64_t sub_24A27318C()
{
  uint64_t v0 = sub_24A2A7160();
  __swift_allocate_value_buffer(v0, qword_26977A7B8);
  __swift_project_value_buffer(v0, (uint64_t)qword_26977A7B8);
  return sub_24A2A7150();
}

uint64_t sub_24A273210()
{
  uint64_t result = SecKeyCopySystemKey();
  qword_26977A7D0 = result;
  return result;
}

uint64_t SEP.PhysicalDevice.dcik.getter()
{
  if (qword_269778590 != -1) {
    swift_once();
  }
  uint64_t v0 = qword_26977A7D0;

  return MEMORY[0x270EFDA08](v0);
}

void SEP.PhysicalDevice.attest(key:using:)(__SecKey *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t Attestation = SecKeyCreateAttestation();
  if (Attestation)
  {
    uint64_t v5 = (void *)Attestation;
    SecKeyRef v6 = SecKeyCopyPublicKey(a1);
    if (v6)
    {
      SecKeyRef v7 = v6;
      id v8 = v5;
      uint64_t v9 = sub_24A2A6AD0();
      unint64_t v11 = v10;

      SEP.Attestation.init(from:signer:)(v9, v11, v7, a2);
    }
    else
    {
      if (qword_269778588 != -1) {
        swift_once();
      }
      uint64_t v12 = sub_24A2A7160();
      __swift_project_value_buffer(v12, (uint64_t)qword_26977A7B8);
      int v13 = sub_24A2A7140();
      os_log_type_t v14 = sub_24A2A7B30();
      if (os_log_type_enabled(v13, v14))
      {
        uint64_t v15 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v15 = 0;
        _os_log_impl(&dword_24A19F000, v13, v14, "Failed to copy public key from DCIK, parsing attestation without checking signature", v15, 2u);
        MEMORY[0x24C5C00A0](v15, -1, -1);
      }

      id v16 = v5;
      uint64_t v17 = sub_24A2A6AD0();
      unint64_t v19 = v18;

      SEP.Attestation.init(from:)(v17, v19, (uint64_t)a2);
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_24A273664()
{
  if (qword_269778590 != -1) {
    swift_once();
  }
  uint64_t v0 = qword_26977A7D0;

  return MEMORY[0x270EFDA08](v0);
}

void sub_24A2736C0(__SecKey *a1@<X1>, uint64_t *a2@<X8>)
{
}

ValueMetadata *type metadata accessor for SEP.PhysicalDevice()
{
  return &type metadata for SEP.PhysicalDevice;
}

uint64_t Image4Manifest.init<A>(data:kind:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  char v9 = *v8;
  (*(void (**)(char *, uint64_t))(v6 + 16))((char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  uint64_t v10 = sub_24A2A6B20();
  uint64_t v12 = v11;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
  *(void *)a3 = v10;
  *(void *)(a3 + 8) = v12;
  *(unsigned char *)(a3 + 16) = v9;
  return result;
}

uint64_t Image4Manifest.canonicalize(evaluateTrust:)(char a1)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)v1;
  unint64_t v4 = *(void *)(v1 + 8);
  uint64_t v5 = *(unsigned __int8 *)(v1 + 16);
  unint64_t v6 = v4 >> 62;
  switch(v4 >> 62)
  {
    case 1uLL:
      if ((int)v3 == v3 >> 32) {
        goto LABEL_10;
      }
      goto LABEL_3;
    case 2uLL:
      if (*(void *)(v3 + 16) == *(void *)(v3 + 24)) {
        goto LABEL_10;
      }
      goto LABEL_3;
    case 3uLL:
      goto LABEL_10;
    default:
      if ((v4 & 0xFF000000000000) == 0)
      {
LABEL_10:
        sub_24A25F478();
        swift_allocError();
        *(void *)uint64_t v8 = 0;
        *(void *)(v8 + 8) = 0;
        goto LABEL_11;
      }
LABEL_3:
      if (a1)
      {
        switch(v5)
        {
          case 1:
            uint64_t v7 = image4_environment_new();
            if (!v7) {
              goto LABEL_6;
            }
            goto LABEL_13;
          case 2:
            uint64_t v7 = image4_environment_new();
            if (!v7) {
              goto LABEL_6;
            }
            goto LABEL_13;
          case 3:
            sub_24A1A52B0(v3, v4);
            uint64_t v26 = sub_24A1B52A8(v3, v4);
            unint64_t v28 = v27;
            uint64_t v33 = v26;
            unint64_t v34 = v27;
            char v35 = 1;
            Image4Manifest.canonicalize(evaluateTrust:)(1);
            if (!v2) {
              return sub_24A1A5384(v26, v28);
            }
            sub_24A1A5384(v26, v28);
            sub_24A1A52B0(v3, v4);
            uint64_t v29 = sub_24A1B52A8(v3, v4);
            unint64_t v31 = v30;
            uint64_t v33 = v29;
            unint64_t v34 = v30;
            char v35 = 2;
            Image4Manifest.canonicalize(evaluateTrust:)(1);

            return sub_24A1A5384(v29, v31);
          default:
            break;
        }
      }
      uint64_t v7 = image4_environment_new();
      if (!v7)
      {
LABEL_6:
        sub_24A25F478();
        swift_allocError();
        *(_OWORD *)uint64_t v8 = xmmword_24A2AA000;
LABEL_11:
        *(unsigned char *)(v8 + 16) = 2;
        return swift_willThrow();
      }
LABEL_13:
      uint64_t v32 = v7;
      if (v6)
      {
        if (v6 == 1)
        {
          if (v3 >> 32 >= (int)v3)
          {
            sub_24A1A52B0(v3, v4);
            uint64_t v10 = sub_24A2A68E0();
            if (!v10)
            {
LABEL_19:
              uint64_t v12 = sub_24A2A6900();
              if (v12 >= (v3 >> 32) - (int)v3) {
                uint64_t v13 = (v3 >> 32) - (int)v3;
              }
              else {
                uint64_t v13 = v12;
              }
              uint64_t v14 = v10 + v13;
              if (v10) {
                uint64_t v15 = v14;
              }
              else {
                uint64_t v15 = 0;
              }
              sub_24A273E34(v10, v15, (uint64_t)&v32, v3, v4);
              sub_24A1A5384(v3, v4);
              return image4_environment_destroy();
            }
            uint64_t v11 = sub_24A2A6910();
            if (!__OFSUB__((int)v3, v11))
            {
              v10 += (int)v3 - v11;
              goto LABEL_19;
            }
LABEL_47:
            __break(1u);
          }
          __break(1u);
        }
        else
        {
          uint64_t v16 = *(void *)(v3 + 16);
          uint64_t v17 = *(void *)(v3 + 24);
          swift_retain();
          swift_retain();
          uint64_t v18 = sub_24A2A68E0();
          if (v18)
          {
            uint64_t v19 = sub_24A2A6910();
            if (__OFSUB__(v16, v19))
            {
LABEL_46:
              __break(1u);
              goto LABEL_47;
            }
            v18 += v16 - v19;
          }
          BOOL v20 = __OFSUB__(v17, v16);
          uint64_t v21 = v17 - v16;
          if (!v20)
          {
            uint64_t v22 = sub_24A2A6900();
            if (v22 >= v21) {
              uint64_t v23 = v21;
            }
            else {
              uint64_t v23 = v22;
            }
            uint64_t v24 = v18 + v23;
            if (v18) {
              uint64_t v25 = v24;
            }
            else {
              uint64_t v25 = 0;
            }
            sub_24A273E34(v18, v25, (uint64_t)&v32, v3, v4);
            swift_release();
            swift_release();
            return image4_environment_destroy();
          }
        }
        __break(1u);
        goto LABEL_46;
      }
      uint64_t v33 = v3;
      LOWORD(v34) = v4;
      BYTE2(v34) = BYTE2(v4);
      BYTE3(v34) = BYTE3(v4);
      BYTE4(v34) = BYTE4(v4);
      BYTE5(v34) = BYTE5(v4);
      sub_24A273E34((uint64_t)&v33, (uint64_t)&v33 + BYTE6(v4), (uint64_t)&v32, v3, v4);
      return image4_environment_destroy();
  }
}

uint64_t static Image4Manifest.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 16);
  int v3 = *(unsigned __int8 *)(a2 + 16);
  return sub_24A1B7D80(*(void *)a1, *(void *)(a1 + 8), *(void *)a2, *(void *)(a2 + 8)) & (v2 == v3);
}

uint64_t Image4Manifest.data.getter()
{
  uint64_t v1 = *(void *)v0;
  sub_24A1A52B0(*(void *)v0, *(void *)(v0 + 8));
  return v1;
}

void Image4Manifest.kind.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 16);
}

uint64_t Image4Manifest.init(file:kind:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  char v6 = *a2;
  uint64_t v7 = sub_24A2A6A00();
  if (v3)
  {
    uint64_t v9 = sub_24A2A69E0();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(a1, v9);
  }
  else
  {
    uint64_t v11 = v7;
    uint64_t v12 = v8;
    uint64_t v13 = sub_24A2A69E0();
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(a1, v13);
    *(void *)a3 = v11;
    *(void *)(a3 + 8) = v12;
    *(unsigned char *)(a3 + 16) = v6;
  }
  return result;
}

BOOL static Image4Manifest.Kind.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t Image4Manifest.Kind.hash(into:)()
{
  return sub_24A2A7F20();
}

uint64_t Image4Manifest.Kind.hashValue.getter()
{
  return sub_24A2A7F50();
}

uint64_t sub_24A273E34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (a1)
  {
    switch(a5 >> 62)
    {
      case 1uLL:
        if (!__OFSUB__(HIDWORD(a4), a4)) {
          goto LABEL_6;
        }
        __break(1u);
LABEL_10:
        __break(1u);
        break;
      case 2uLL:
        if (!__OFSUB__(*(void *)(a4 + 24), *(void *)(a4 + 16))) {
          goto LABEL_6;
        }
        goto LABEL_10;
      default:
LABEL_6:
        if (image4_trust_new())
        {
          image4_trust_evaluate();
          sub_24A25F478();
          swift_allocError();
          *(_OWORD *)uint64_t v5 = xmmword_24A2AA8D0;
          *(unsigned char *)(v5 + 16) = 2;
          swift_willThrow();
          sub_24A275028(0, 0, 65280);
          return image4_trust_destroy();
        }
        else
        {
          sub_24A25F478();
          swift_allocError();
          *(_OWORD *)uint64_t v6 = xmmword_24A2A9FF0;
          *(unsigned char *)(v6 + 16) = 2;
          return swift_willThrow();
        }
    }
  }
  __break(1u);
  return result;
}

unsigned char *sub_24A274064(int a1, unsigned char *__src, uint64_t a3, unsigned int a4, uint64_t a5)
{
  return sub_24A275058(__src, a3, a4, a5);
}

uint64_t sub_24A274078(uint64_t a1, unint64_t a2)
{
  v11[3] = *MEMORY[0x263EF8340];
  uint64_t v4 = sub_24A2A7360();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24A1A52B0(a1, a2);
  sub_24A274FE0(&qword_26B174A10, MEMORY[0x263F047F8]);
  sub_24A2A71A0();
  switch(a2 >> 62)
  {
    case 1uLL:
      if (a1 >> 32 < (int)a1) {
        __break(1u);
      }
      sub_24A1A52B0(a1, a2);
      sub_24A20C570((int)a1, a1 >> 32);
      break;
    case 2uLL:
      uint64_t v8 = *(void *)(a1 + 16);
      uint64_t v9 = *(void *)(a1 + 24);
      sub_24A1A52B0(a1, a2);
      swift_retain();
      swift_retain();
      sub_24A20C570(v8, v9);
      swift_release();
      swift_release();
      break;
    case 3uLL:
      memset(v11, 0, 14);
      goto LABEL_7;
    default:
      v11[0] = a1;
      LOWORD(v11[1]) = a2;
      BYTE2(v11[1]) = BYTE2(a2);
      BYTE3(v11[1]) = BYTE3(a2);
      BYTE4(v11[1]) = BYTE4(a2);
      BYTE5(v11[1]) = BYTE5(a2);
LABEL_7:
      sub_24A2A7170();
      break;
  }
  sub_24A1A5384(a1, a2);
  sub_24A2A7180();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return sub_24A1A5384(a1, a2);
}

uint64_t Image4Manifest.digest<A>(using:)()
{
  return sub_24A2A7190();
}

uint64_t sub_24A2743D4(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 16);
  int v3 = *(unsigned __int8 *)(a2 + 16);
  return sub_24A1B7D80(*(void *)a1, *(void *)(a1 + 8), *(void *)a2, *(void *)(a2 + 8)) & (v2 == v3);
}

uint64_t Image4Manifest.Error.hash(into:)()
{
  if (*(unsigned char *)(v0 + 16))
  {
    if (*(unsigned char *)(v0 + 16) == 1)
    {
      sub_24A2A7F20();
      return sub_24A2A78A0();
    }
    else
    {
      return sub_24A2A7F20();
    }
  }
  else
  {
    sub_24A2A7F20();
    return sub_24A2A7F40();
  }
}

uint64_t Image4Manifest.Error.hashValue.getter()
{
  int v1 = *(unsigned __int8 *)(v0 + 16);
  sub_24A2A7F10();
  if (v1)
  {
    sub_24A2A7F20();
    if (v1 == 1) {
      sub_24A2A78A0();
    }
  }
  else
  {
    sub_24A2A7F20();
    sub_24A2A7F40();
  }
  return sub_24A2A7F50();
}

uint64_t sub_24A2745FC()
{
  if (*(unsigned char *)(v0 + 16))
  {
    if (*(unsigned char *)(v0 + 16) == 1)
    {
      sub_24A2A7F20();
      return sub_24A2A78A0();
    }
    else
    {
      return sub_24A2A7F20();
    }
  }
  else
  {
    sub_24A2A7F20();
    return sub_24A2A7F40();
  }
}

uint64_t sub_24A2746E4()
{
  int v1 = *(unsigned __int8 *)(v0 + 16);
  sub_24A2A7F10();
  if (v1)
  {
    sub_24A2A7F20();
    if (v1 == 1) {
      sub_24A2A78A0();
    }
  }
  else
  {
    sub_24A2A7F20();
    sub_24A2A7F40();
  }
  return sub_24A2A7F50();
}

uint64_t Image4Manifest.description.getter()
{
  uint64_t v1 = sub_24A2A71B0();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = MEMORY[0x270FA5388](v1);
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)&v23 - v6;
  sub_24A274078(*(void *)v0, *(void *)(v0 + 8));
  (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v5, v7, v1);
  sub_24A274FE0(&qword_26B1749F0, MEMORY[0x263F045C0]);
  uint64_t result = sub_24A2A7960();
  uint64_t v9 = v28;
  uint64_t v10 = v29;
  uint64_t v11 = v28[2];
  uint64_t v25 = v2;
  uint64_t v26 = v1;
  uint64_t v24 = v7;
  if (v29 == v11)
  {
    uint64_t v12 = (void *)MEMORY[0x263F8EE78];
LABEL_3:
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v24, v26);
    unint64_t v28 = v12;
    __swift_instantiateConcreteTypeFromMangledName(&qword_26B174A98);
    sub_24A231C40();
    uint64_t v13 = sub_24A2A77C0();
    swift_bridgeObjectRelease();
    return v13;
  }
  else
  {
    if (v29 < v11)
    {
      uint64_t v12 = (void *)MEMORY[0x263F8EE78];
      long long v27 = xmmword_24A2A8A60;
      unint64_t v14 = v29;
      while ((v10 & 0x8000000000000000) == 0)
      {
        if (v14 >= v9[2]) {
          goto LABEL_15;
        }
        char v15 = *((unsigned char *)v9 + v14 + 32);
        __swift_instantiateConcreteTypeFromMangledName(&qword_26B174BA0);
        uint64_t v16 = swift_allocObject();
        *(_OWORD *)(v16 + 16) = v27;
        *(void *)(v16 + 56) = MEMORY[0x263F8E778];
        *(void *)(v16 + 64) = MEMORY[0x263F8E7C0];
        *(unsigned char *)(v16 + 32) = v15;
        uint64_t v17 = sub_24A2A7840();
        uint64_t v19 = v18;
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)sub_24A1DECEC(0, v12[2] + 1, 1, v12);
          uint64_t v12 = (void *)result;
        }
        unint64_t v21 = v12[2];
        unint64_t v20 = v12[3];
        if (v21 >= v20 >> 1)
        {
          uint64_t result = (uint64_t)sub_24A1DECEC((void *)(v20 > 1), v21 + 1, 1, v12);
          uint64_t v12 = (void *)result;
        }
        ++v14;
        v12[2] = v21 + 1;
        uint64_t v22 = &v12[2 * v21];
        v22[4] = v17;
        v22[5] = v19;
        if (v11 == v14) {
          goto LABEL_3;
        }
      }
      __break(1u);
LABEL_15:
      __break(1u);
    }
    __break(1u);
  }
  return result;
}

uint64_t _s16CloudAttestation14Image4ManifestV5ErrorO2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  int v4 = *(unsigned __int8 *)(a1 + 16);
  uint64_t v5 = *(void *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  int v7 = *(unsigned __int8 *)(a2 + 16);
  if (!*(unsigned char *)(a1 + 16))
  {
    if (!*(unsigned char *)(a2 + 16))
    {
      sub_24A20BEB8(*(void *)a1, v3, 0);
      sub_24A20BEB8(v5, v6, 0);
      int v7 = v2 == v5;
      return v7 & 1;
    }
    goto LABEL_47;
  }
  if (v4 == 1)
  {
    if (v7 == 1)
    {
      if (v2 == v5 && v3 == v6) {
        LOBYTE(v7) = 1;
      }
      else {
        LOBYTE(v7) = sub_24A2A7E40();
      }
      sub_24A274EBC(v5, v6, 1);
      sub_24A274EBC(v2, v3, 1);
      sub_24A20BEB8(v2, v3, 1);
      sub_24A20BEB8(v5, v6, 1);
      return v7 & 1;
    }
    swift_bridgeObjectRetain();
LABEL_47:
    sub_24A274EBC(v5, v6, v7);
    sub_24A20BEB8(v2, v3, v4);
    sub_24A20BEB8(v5, v6, v7);
    LOBYTE(v7) = 0;
    return v7 & 1;
  }
  switch(v2)
  {
    case 1:
      if (v7 != 2 || v5 != 1 || v6 != 0) {
        goto LABEL_47;
      }
      sub_24A20BEB8(*(void *)a1, v3, 2);
      LOBYTE(v7) = 1;
      sub_24A20BEB8(1, 0, 2);
      return v7 & 1;
    case 2:
      if (v7 != 2 || v5 != 2 || v6 != 0) {
        goto LABEL_47;
      }
      sub_24A20BEB8(*(void *)a1, v3, 2);
      uint64_t v10 = 2;
      goto LABEL_39;
    case 3:
      if (v7 != 2 || v5 != 3 || v6 != 0) {
        goto LABEL_47;
      }
      sub_24A20BEB8(*(void *)a1, v3, 2);
      uint64_t v10 = 3;
      goto LABEL_39;
    default:
      if (v7 != 2 || (v6 | v5) != 0) {
        goto LABEL_47;
      }
      sub_24A20BEB8(*(void *)a1, v3, 2);
      uint64_t v10 = 0;
LABEL_39:
      sub_24A20BEB8(v10, 0, 2);
      LOBYTE(v7) = 1;
      break;
  }
  return v7 & 1;
}

unint64_t sub_24A274CF8()
{
  unint64_t result = qword_269779CA0;
  if (!qword_269779CA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269779CA0);
  }
  return result;
}

unint64_t sub_24A274D50()
{
  unint64_t result = qword_269779CA8;
  if (!qword_269779CA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269779CA8);
  }
  return result;
}

ValueMetadata *type metadata accessor for Image4Manifest()
{
  return &type metadata for Image4Manifest;
}

unsigned char *storeEnumTagSinglePayload for Image4Manifest.Kind(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24A274E80);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Image4Manifest.Kind()
{
  return &type metadata for Image4Manifest.Kind;
}

uint64_t sub_24A274EBC(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 == 1) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for Image4Manifest.Error(uint64_t a1)
{
  return sub_24A20BEB8(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t _s16CloudAttestation14Image4ManifestV5ErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_24A274EBC(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for Image4Manifest.Error(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_24A274EBC(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  char v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  sub_24A20BEB8(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for Image4Manifest.Error(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  sub_24A20BEB8(v4, v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for Image4Manifest.Error()
{
  return &type metadata for Image4Manifest.Error;
}

uint64_t sub_24A274FE0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_24A275028(uint64_t result, uint64_t a2, __int16 a3)
{
  if (HIBYTE(a3) != 255) {
    return sub_24A275040(result, a2, a3, HIBYTE(a3) & 1);
  }
  return result;
}

uint64_t sub_24A275040(uint64_t a1, uint64_t a2, char a3, char a4)
{
  if (a4) {
    return sub_24A20BEB8(a1, a2, a3);
  }
  else {
    return sub_24A1A5384(a1, a2);
  }
}

uint64_t sub_24A27504C(uint64_t a1, uint64_t a2, char a3, char a4)
{
  if (a4) {
    return sub_24A274EBC(a1, a2, a3);
  }
  else {
    return sub_24A1A52B0(a1, a2);
  }
}

unsigned char *sub_24A275058(unsigned char *__src, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a4)
  {
    if (__src)
    {
      if (a2)
      {
        if (a2 <= 14)
        {
          uint64_t v7 = sub_24A1F0728(__src, &__src[a2]);
          unint64_t v8 = v12 & 0xFFFFFFFFFFFFFFLL;
        }
        else
        {
          sub_24A2A6920();
          swift_allocObject();
          uint64_t v6 = sub_24A2A68D0();
          if ((unint64_t)a2 >= 0x7FFFFFFF)
          {
            sub_24A2A6A40();
            uint64_t v7 = swift_allocObject();
            *(void *)(v7 + 16) = 0;
            *(void *)(v7 + 24) = a2;
            unint64_t v8 = v6 | 0x8000000000000000;
          }
          else
          {
            uint64_t v7 = a2 << 32;
            unint64_t v8 = v6 | 0x4000000000000000;
          }
        }
      }
      else
      {
        uint64_t v7 = 0;
        unint64_t v8 = 0xC000000000000000;
      }
      uint64_t v13 = *(void *)a4;
      uint64_t v10 = *(void *)(a4 + 8);
      *(void *)a4 = v7;
      *(void *)(a4 + 8) = v8;
      __int16 v11 = *(_WORD *)(a4 + 16);
      *(_WORD *)(a4 + 16) = 0;
      uint64_t v9 = v13;
    }
    else
    {
      uint64_t v9 = *(void *)a4;
      uint64_t v10 = *(void *)(a4 + 8);
      *(void *)a4 = a3;
      *(void *)(a4 + 8) = 0;
      __int16 v11 = *(_WORD *)(a4 + 16);
      *(_WORD *)(a4 + 16) = 256;
    }
    return (unsigned char *)sub_24A275028(v9, v10, v11);
  }
  return __src;
}

uint64_t SEPAttestationPolicy.init(signer:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = result;
  return result;
}

void SEPAttestationPolicy.init(insecure:)(char a1@<W0>, uint64_t *a2@<X8>)
{
  if (a1)
  {
    if (qword_26B1747B8 != -1) {
      swift_once();
    }
    uint64_t v3 = sub_24A2A7160();
    __swift_project_value_buffer(v3, (uint64_t)qword_26B1747A0);
    uint64_t v4 = sub_24A2A7140();
    os_log_type_t v5 = sub_24A2A7B30();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl(&dword_24A19F000, v4, v5, "Using Insecure SEPAttestationPolicy", v6, 2u);
      MEMORY[0x24C5C00A0](v6, -1, -1);
    }

    uint64_t v7 = 1;
  }
  else
  {
    uint64_t v7 = 0;
  }
  a2[1] = 0;
  a2[2] = 0;
  *a2 = v7;
}

double AttestationPolicyContext.validatedAttestation.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  if (!*(void *)(v3 + 16)
    || (unint64_t v4 = sub_24A1BE7EC((uint64_t)&type metadata for SEPAttestationPolicy, (uint64_t)&protocol witness table for SEPAttestationPolicy, 0xD000000000000014, 0x800000024A2B2860), (v5 & 1) == 0)|| (sub_24A1C9680(*(void *)(v3 + 56) + 32 * v4, (uint64_t)&v7), __swift_instantiateConcreteTypeFromMangledName(&qword_26B174BB8), (swift_dynamicCast() & 1) == 0))
  {
    double result = 0.0;
    *(_OWORD *)a1 = xmmword_24A2A99E0;
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
  }
  return result;
}

uint64_t SEPAttestationPolicy.verifies(body:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v7 = *(void **)v3;
  uint64_t v8 = *(void *)(v3 + 8);
  *a3 = *(void *)v3;
  sub_24A1CF444(v7);
  sub_24A1CF454(v8);
  swift_retain();
  uint64_t result = sub_24A1CF11C(v8);
  a3[1] = a1;
  a3[2] = a2;
  return result;
}

id SEPAttestationPolicy.signerLoader.getter@<X0>(void **a1@<X8>)
{
  uint64_t v2 = *v1;
  *a1 = *v1;
  return sub_24A1CF444(v2);
}

uint64_t SEPAttestationPolicy.body.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  sub_24A1CF454(v1);
  return v1;
}

uint64_t SEPAttestationPolicy.body.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_24A1CF11C(*(void *)(v2 + 8));
  *(void *)(v2 + 8) = a1;
  *(void *)(v2 + 16) = a2;
  return result;
}

uint64_t (*SEPAttestationPolicy.body.modify())()
{
  return nullsub_1;
}

uint64_t sub_24A275420()
{
  uint64_t v0 = sub_24A2A7160();
  __swift_allocate_value_buffer(v0, qword_26B1747A0);
  __swift_project_value_buffer(v0, (uint64_t)qword_26B1747A0);
  return sub_24A2A7150();
}

uint64_t static SEPAttestationPolicy.logger.getter@<X0>(uint64_t a1@<X8>)
{
  if (qword_26B1747B8 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_24A2A7160();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_26B1747A0);
  unint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, v3, v2);
}

void SEPAttestationPolicy.init()(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void static SEPAttestationPolicy.insecure.getter(void *a1@<X8>)
{
  if (qword_26B1747B8 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_24A2A7160();
  __swift_project_value_buffer(v2, (uint64_t)qword_26B1747A0);
  uint64_t v3 = sub_24A2A7140();
  os_log_type_t v4 = sub_24A2A7B30();
  if (os_log_type_enabled(v3, v4))
  {
    char v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)char v5 = 0;
    _os_log_impl(&dword_24A19F000, v3, v4, "Using Insecure SEPAttestationPolicy", v5, 2u);
    MEMORY[0x24C5C00A0](v5, -1, -1);
  }

  a1[1] = 0;
  a1[2] = 0;
  *a1 = 1;
}

uint64_t SEPAttestationPolicy.evaluate(bundle:context:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v3 + 320) = a1;
  *(void *)(v3 + 328) = a2;
  *(_OWORD *)(v3 + 336) = *(_OWORD *)v2;
  *(void *)(v3 + 352) = *(void *)(v2 + 16);
  return MEMORY[0x270FA2498](sub_24A275670, 0, 0);
}

uint64_t sub_24A275670()
{
  uint64_t v54 = v0;
  uint64_t v1 = *(void **)(v0 + 336);
  if (v1)
  {
    if (v1 == (void *)1)
    {
      uint64_t v2 = *(uint64_t **)(v0 + 320);
      uint64_t v3 = *v2;
      *(void *)(v0 + 360) = *v2;
      unint64_t v4 = v2[1];
      *(void *)(v0 + 368) = v4;
      uint64_t v5 = *MEMORY[0x263F276F8];
      sub_24A1A52B0(v3, v4);
      *(void *)&long long v52 = sub_24A1B94D4(v5);
      *((void *)&v52 + 1) = v6;
      sub_24A1CF5C4(&v52, 0);
      long long v51 = v52;
      sub_24A1A52B0(v3, v4);
      LODWORD(v5) = sub_24A1CF86C((uint64_t *)&v51, v3, v4);
      sub_24A1A5384(v3, v4);
      if (v5)
      {
        sub_24A1CFC44();
        swift_allocError();
        *uint64_t v7 = 0;
        swift_willThrow();
        sub_24A1A5384(v3, v4);
        sub_24A1A5384(v51, *((unint64_t *)&v51 + 1));
LABEL_25:
        uint64_t v38 = *(uint64_t (**)(void))(v0 + 8);
LABEL_26:
        return v38();
      }
      long long v30 = v51;
      *(_OWORD *)(v0 + 376) = v51;
      *(void *)(v0 + 232) = &type metadata for SEP.Attestation;
      uint64_t v31 = swift_allocObject();
      *(void *)(v0 + 208) = v31;
      *(void *)(v31 + 16) = v3;
      *(void *)(v31 + 24) = v4;
      *(_OWORD *)(v31 + 32) = v30;
      sub_24A1DD134(v0 + 208, v0 + 272);
      sub_24A1A52B0(v3, v4);
      sub_24A1A52B0(v30, *((unint64_t *)&v30 + 1));
      sub_24A1DA970(v0 + 272, (uint64_t)&type metadata for SEPAttestationPolicy, (uint64_t)&protocol witness table for SEPAttestationPolicy, 0xD000000000000014, 0x800000024A2B2860);
      sub_24A1F182C(v0 + 208);
      if (qword_26B1747B8 != -1) {
        swift_once();
      }
      uint64_t v32 = sub_24A2A7160();
      __swift_project_value_buffer(v32, (uint64_t)qword_26B1747A0);
      uint64_t v33 = sub_24A2A7140();
      os_log_type_t v34 = sub_24A2A7B40();
      if (os_log_type_enabled(v33, v34))
      {
        char v35 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)char v35 = 0;
        _os_log_impl(&dword_24A19F000, v33, v34, "AttestationBundle passed SEPAttestationPolicy: SEP Attestation has valid structure, but signature was not checked", v35, 2u);
        MEMORY[0x24C5C00A0](v35, -1, -1);
      }
      uint64_t v36 = *(void *)(v0 + 344);

      if (v36)
      {
        uint64_t v37 = *(void (**)(long long *))(v0 + 344);
        *(void *)&long long v52 = v3;
        *((void *)&v52 + 1) = v4;
        long long v53 = v30;
        swift_retain();
        v37(&v52);
        uint64_t v42 = *(void *)(v0 + 128);
        uint64_t v43 = *(void *)(v0 + 136);
        __swift_project_boxed_opaque_existential_1((void *)(v0 + 104), v42);
        uint64_t v49 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v43 + 8) + **(int **)(v43 + 8));
        uint64_t v44 = (void *)swift_task_alloc();
        *(void *)(v0 + 392) = v44;
        *uint64_t v44 = v0;
        uint64_t v45 = sub_24A276130;
        goto LABEL_32;
      }
      sub_24A1A5384(v3, v4);
      unint64_t v41 = *((void *)&v30 + 1);
      uint64_t v40 = v30;
LABEL_31:
      sub_24A1A5384(v40, v41);
      uint64_t v38 = *(uint64_t (**)(void))(v0 + 8);
      goto LABEL_26;
    }
    id v14 = *(id *)(v0 + 336);
  }
  else
  {
    uint64_t v8 = **(void **)(v0 + 328);
    uint64_t v9 = type metadata accessor for X509Policy();
    if (!*(void *)(v8 + 16)
      || (unint64_t v10 = sub_24A1BE7EC(v9, (uint64_t)&protocol witness table for X509Policy, 0x65746164696C6176, 0xED00007472654364), (v11 & 1) == 0)|| (sub_24A1C9680(*(void *)(v8 + 56) + 32 * v10, v0 + 144), __swift_instantiateConcreteTypeFromMangledName(&qword_26B174BB8), (swift_dynamicCast() & 1) == 0)|| (v12 = *(void **)(v0 + 16)) == 0)
    {
      sub_24A276A08();
      swift_allocError();
      *uint64_t v19 = 1;
      swift_willThrow();
      goto LABEL_25;
    }
    uint64_t v13 = *(void **)(v0 + 24);
    id v14 = v13;
    sub_24A245934(v12, v13);
    uint64_t v1 = *(void **)(v0 + 336);
  }
  *(void *)(v0 + 408) = v14;
  char v15 = *(uint64_t **)(v0 + 320);
  uint64_t v16 = *v15;
  unint64_t v17 = v15[1];
  sub_24A1CF444(v1);
  sub_24A1A52B0(v16, v17);
  id v18 = v14;
  SEP.Attestation.init(from:signer:)(v16, v17, v18, (uint64_t *)&v52);
  uint64_t v48 = v0 + 176;
  uint64_t v50 = v0 + 240;
  long long v20 = v52;
  *(_OWORD *)(v0 + 416) = v52;
  unint64_t v22 = *((void *)&v53 + 1);
  uint64_t v21 = v53;
  *(void *)(v0 + 432) = v53;
  *(void *)(v0 + 440) = v22;
  if (qword_26B1747B8 != -1) {
    swift_once();
  }
  uint64_t v23 = sub_24A2A7160();
  __swift_project_value_buffer(v23, (uint64_t)qword_26B1747A0);
  uint64_t v24 = sub_24A2A7140();
  os_log_type_t v25 = sub_24A2A7B40();
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v26 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v26 = 0;
    _os_log_impl(&dword_24A19F000, v24, v25, "AttestationBundle passed SEPAttestationPolicy: SEP attestation signed by trusted authority", v26, 2u);
    MEMORY[0x24C5C00A0](v26, -1, -1);
  }
  uint64_t v27 = *(void *)(v0 + 344);

  *(void *)(v0 + 264) = &type metadata for SEP.Attestation;
  uint64_t v28 = swift_allocObject();
  *(void *)(v0 + 240) = v28;
  *(_OWORD *)(v28 + 16) = v20;
  *(void *)(v28 + 32) = v21;
  *(void *)(v28 + 40) = v22;
  sub_24A1DD134(v50, v48);
  sub_24A1A52B0(v20, *((unint64_t *)&v20 + 1));
  sub_24A1A52B0(v21, v22);
  sub_24A1DA970(v48, (uint64_t)&type metadata for SEPAttestationPolicy, (uint64_t)&protocol witness table for SEPAttestationPolicy, 0xD000000000000014, 0x800000024A2B2860);
  sub_24A1F182C(v50);
  if (!v27)
  {

    sub_24A1A5384(v20, *((unint64_t *)&v20 + 1));
    uint64_t v40 = v21;
    unint64_t v41 = v22;
    goto LABEL_31;
  }
  uint64_t v29 = *(void (**)(long long *))(v0 + 344);
  long long v52 = v20;
  *(void *)&long long v53 = v21;
  *((void *)&v53 + 1) = v22;
  swift_retain();
  v29(&v52);
  uint64_t v42 = *(void *)(v0 + 88);
  uint64_t v43 = *(void *)(v0 + 96);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 64), v42);
  uint64_t v49 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v43 + 8) + **(int **)(v43 + 8));
  uint64_t v44 = (void *)swift_task_alloc();
  *(void *)(v0 + 448) = v44;
  *uint64_t v44 = v0;
  uint64_t v45 = sub_24A2762E4;
LABEL_32:
  v44[1] = v45;
  uint64_t v47 = *(void *)(v0 + 320);
  uint64_t v46 = *(void *)(v0 + 328);
  return v49(v47, v46, v42, v43);
}

uint64_t sub_24A276130()
{
  *(void *)(*(void *)v1 + 400) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_24A2764B0;
  }
  else {
    uint64_t v2 = sub_24A276244;
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

uint64_t sub_24A276244()
{
  uint64_t v2 = v0[47];
  unint64_t v1 = v0[48];
  uint64_t v3 = v0[43];
  sub_24A1A5384(v0[45], v0[46]);
  sub_24A1A5384(v2, v1);
  sub_24A1CF11C(v3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 13));
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_24A2762E4()
{
  *(void *)(*(void *)v1 + 456) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_24A276550;
  }
  else {
    uint64_t v2 = sub_24A2763F8;
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

uint64_t sub_24A2763F8()
{
  uint64_t v2 = *(void *)(v0 + 432);
  unint64_t v1 = *(void *)(v0 + 440);
  uint64_t v4 = *(void *)(v0 + 416);
  unint64_t v3 = *(void *)(v0 + 424);
  uint64_t v5 = *(void *)(v0 + 344);

  sub_24A1A5384(v4, v3);
  sub_24A1A5384(v2, v1);
  sub_24A1CF11C(v5);
  __swift_destroy_boxed_opaque_existential_1(v0 + 64);
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t sub_24A2764B0()
{
  uint64_t v2 = v0[47];
  unint64_t v1 = v0[48];
  uint64_t v3 = v0[43];
  sub_24A1A5384(v0[45], v0[46]);
  sub_24A1A5384(v2, v1);
  sub_24A1CF11C(v3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 13));
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_24A276550()
{
  uint64_t v2 = *(void *)(v0 + 432);
  unint64_t v1 = *(void *)(v0 + 440);
  uint64_t v3 = *(void *)(v0 + 344);
  sub_24A1A5384(*(void *)(v0 + 416), *(void *)(v0 + 424));
  sub_24A1A5384(v2, v1);
  sub_24A1CF11C(v3);
  __swift_destroy_boxed_opaque_existential_1(v0 + 64);
  uint64_t v4 = *(void **)(v0 + 456);
  *(void *)(v0 + 312) = v4;
  id v5 = v4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697789C0);
  if (swift_dynamicCast() && *(unsigned char *)(v0 + 464) == 3)
  {

    if (qword_26B1747B8 != -1) {
      swift_once();
    }
    uint64_t v6 = sub_24A2A7160();
    __swift_project_value_buffer(v6, (uint64_t)qword_26B1747A0);
    uint64_t v7 = sub_24A2A7140();
    os_log_type_t v8 = sub_24A2A7B30();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl(&dword_24A19F000, v7, v8, "SEP Attestation signature failed verification", v9, 2u);
      MEMORY[0x24C5C00A0](v9, -1, -1);
    }
    unint64_t v10 = *(void **)(v0 + 408);

    sub_24A276A08();
    swift_allocError();
    *char v11 = 0;
    swift_willThrow();

    uint64_t v12 = *(void **)(v0 + 312);
  }
  else
  {

    if (qword_26B1747B8 != -1) {
      swift_once();
    }
    uint64_t v13 = sub_24A2A7160();
    __swift_project_value_buffer(v13, (uint64_t)qword_26B1747A0);
    id v14 = v4;
    id v15 = v4;
    uint64_t v16 = sub_24A2A7140();
    os_log_type_t v17 = sub_24A2A7B30();
    if (os_log_type_enabled(v16, v17))
    {
      id v18 = (uint8_t *)swift_slowAlloc();
      uint64_t v19 = (void *)swift_slowAlloc();
      *(_DWORD *)id v18 = 138543362;
      id v20 = v4;
      uint64_t v21 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 304) = v21;
      sub_24A2A7B70();
      *uint64_t v19 = v21;

      _os_log_impl(&dword_24A19F000, v16, v17, "SEP Attestation verification failed with unknown reason: %{public}@", v18, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&qword_269778BB8);
      swift_arrayDestroy();
      MEMORY[0x24C5C00A0](v19, -1, -1);
      MEMORY[0x24C5C00A0](v18, -1, -1);
    }
    else
    {
    }
    unint64_t v22 = *(void **)(v0 + 408);

    sub_24A276A08();
    swift_allocError();
    *uint64_t v23 = v4;
    id v24 = v4;
    swift_willThrow();

    uint64_t v12 = v4;
  }

  os_log_type_t v25 = *(uint64_t (**)(void))(v0 + 8);
  return v25();
}

uint64_t sub_24A276900(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *(void *)uint64_t v6 = v3;
  *(void *)(v6 + 8) = sub_24A1C50FC;
  *(void *)(v6 + 320) = a1;
  *(void *)(v6 + 328) = a2;
  *(_OWORD *)(v6 + 336) = *(_OWORD *)v2;
  *(void *)(v6 + 352) = *(void *)(v2 + 16);
  return MEMORY[0x270FA2498](sub_24A275670, 0, 0);
}

uint64_t sub_24A2769C8()
{
  sub_24A1A5384(*(void *)(v0 + 16), *(void *)(v0 + 24));
  sub_24A1A5384(*(void *)(v0 + 32), *(void *)(v0 + 40));

  return MEMORY[0x270FA0238](v0, 48, 7);
}

unint64_t sub_24A276A08()
{
  unint64_t result = qword_269779CB8;
  if (!qword_269779CB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269779CB8);
  }
  return result;
}

uint64_t sub_24A276A5C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    uint64_t v3 = *(void *)(a1 + 16);
  }
  else {
    uint64_t v3 = 0;
  }
  *a2 = v2;
  a2[1] = v3;
  return sub_24A1CF454(v2);
}

uint64_t sub_24A276A74(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (*a1) {
    uint64_t v4 = a1[1];
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = *(void *)(a2 + 8);
  sub_24A1CF454(*a1);
  uint64_t result = sub_24A1CF11C(v5);
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v4;
  return result;
}

void destroy for SEPAttestationPolicy(uint64_t a1)
{
  if (*(void *)a1 >= 2uLL) {

  }
  if (*(void *)(a1 + 8))
  {
    swift_release();
  }
}

void *_s16CloudAttestation20SEPAttestationPolicyVwCP_0(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  if (*(void *)a2 >= 2uLL) {
    id v5 = v4;
  }
  *a1 = v4;
  uint64_t v6 = *(void *)(a2 + 8);
  if (v6)
  {
    uint64_t v7 = *(void *)(a2 + 16);
    a1[1] = v6;
    a1[2] = v7;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  }
  return a1;
}

uint64_t assignWithCopy for SEPAttestationPolicy(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  id v5 = *(void **)a2;
  if (*(void *)a1 < 2uLL)
  {
    if ((unint64_t)v5 >= 2)
    {
      *(void *)a1 = v5;
      id v6 = v5;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if ((unint64_t)v5 < 2)
  {

    id v5 = *(void **)a2;
LABEL_6:
    *(void *)a1 = v5;
    goto LABEL_8;
  }
  *(void *)a1 = v5;
  id v7 = v5;

LABEL_8:
  uint64_t v8 = *(void *)(a2 + 8);
  if (!*(void *)(a1 + 8))
  {
    if (v8)
    {
      uint64_t v10 = *(void *)(a2 + 16);
      *(void *)(a1 + 8) = v8;
      *(void *)(a1 + 16) = v10;
      swift_retain();
      return a1;
    }
LABEL_14:
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    return a1;
  }
  if (!v8)
  {
    swift_release();
    goto LABEL_14;
  }
  uint64_t v9 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = v9;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for SEPAttestationPolicy(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void **)a1;
  unint64_t v5 = *a2;
  if (*(void *)a1 < 2uLL) {
    goto LABEL_4;
  }
  if (v5 < 2)
  {

LABEL_4:
    *(void *)a1 = v5;
    goto LABEL_6;
  }
  *(void *)a1 = v5;

LABEL_6:
  uint64_t v6 = a2[1];
  if (!*(void *)(a1 + 8))
  {
    if (v6)
    {
      uint64_t v8 = a2[2];
      *(void *)(a1 + 8) = v6;
      *(void *)(a1 + 16) = v8;
      return a1;
    }
LABEL_12:
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
    return a1;
  }
  if (!v6)
  {
    swift_release();
    goto LABEL_12;
  }
  uint64_t v7 = a2[2];
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = v7;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for SEPAttestationPolicy(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SEPAttestationPolicy(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SEPAttestationPolicy()
{
  return &type metadata for SEPAttestationPolicy;
}

void *initializeBufferWithCopyOfBuffer for SEPAttestationPolicy.SignerLoader(void *a1, void **a2)
{
  unint64_t v3 = *a2;
  if ((unint64_t)*a2 >= 0xFFFFFFFF) {
    id v4 = v3;
  }
  *a1 = v3;
  return a1;
}

void destroy for SEPAttestationPolicy.SignerLoader(void **a1)
{
  unint64_t v1 = *a1;
  if ((unint64_t)v1 >= 0xFFFFFFFF) {
}
  }

void **assignWithCopy for SEPAttestationPolicy.SignerLoader(void **a1, void **a2)
{
  unint64_t v3 = *a1;
  id v4 = *a2;
  if ((unint64_t)*a1 < 0xFFFFFFFF)
  {
    if ((unint64_t)v4 >= 0xFFFFFFFF)
    {
      *a1 = v4;
      id v6 = v4;
      return a1;
    }
LABEL_7:
    *a1 = v4;
    return a1;
  }
  if ((unint64_t)v4 < 0xFFFFFFFF)
  {

    id v4 = *a2;
    goto LABEL_7;
  }
  *a1 = v4;
  id v5 = v4;

  return a1;
}

void **assignWithTake for SEPAttestationPolicy.SignerLoader(void **a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  unint64_t v4 = *a2;
  if ((unint64_t)*a1 < 0xFFFFFFFF) {
    goto LABEL_6;
  }
  if (v4 < 0xFFFFFFFF)
  {

LABEL_6:
    *a1 = (void *)v4;
    return a1;
  }
  *a1 = (void *)v4;

  return a1;
}

ValueMetadata *type metadata accessor for SEPAttestationPolicy.SignerLoader()
{
  return &type metadata for SEPAttestationPolicy.SignerLoader;
}

uint64_t _s16CloudAttestation20SEPAttestationPolicyV12SignerLoaderOwet_0(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFE && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 1;
  if (v4 >= 3) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t _s16CloudAttestation20SEPAttestationPolicyV12SignerLoaderOwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)uint64_t result = 0;
    *(_DWORD *)uint64_t result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SEPAttestationPolicy.Error()
{
  return &type metadata for SEPAttestationPolicy.Error;
}

void sub_24A276FF4()
{
  qword_26977A7D8 = (uint64_t)&unk_26FDFC3E8;
}

uint64_t sub_24A277008@<X0>(uint64_t a1@<X8>)
{
  return sub_24A27726C((uint64_t (*)(void))sub_24A27EEB4, a1);
}

uint64_t sub_24A277020()
{
  uint64_t result = *v0;
  if (*((unsigned char *)v0 + 8) == 1) {
    return qword_24A2AFF28[result];
  }
  return result;
}

uint64_t sub_24A277040@<X0>(void *a1@<X8>)
{
  return sub_24A217308(&qword_269778598, &qword_26977A7D8, a1);
}

uint64_t sub_24A277064@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_24A2772E0(a1, sub_24A27EEB4, a2);
}

void sub_24A27707C(void *a1@<X8>)
{
  uint64_t v2 = *v1;
  if (*((unsigned char *)v1 + 8) == 1) {
    uint64_t v2 = qword_24A2AFF28[v2];
  }
  *a1 = v2;
}

uint64_t sub_24A2770A0(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_24A1B2BF0();

  return MEMORY[0x270F44AF0](a1, a2, v4);
}

BOOL sub_24A2770EC(uint64_t a1, uint64_t a2)
{
  return sub_24A2477A4(*(void *)a1, *(unsigned char *)(a1 + 8), *(void *)a2, *(unsigned char *)(a2 + 8));
}

void sub_24A277108()
{
  qword_26977A7E0 = (uint64_t)&unk_26FDFC4C8;
}

uint64_t sub_24A27711C@<X0>(void *a1@<X8>)
{
  return sub_24A217308(&qword_2697785A0, &qword_26977A7E0, a1);
}

uint64_t sub_24A277140(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_24A27A7C0();

  return MEMORY[0x270F44AF0](a1, a2, v4);
}

void sub_24A27718C()
{
  qword_26977A7E8 = (uint64_t)&unk_26FDFC508;
}

uint64_t sub_24A2771A0@<X0>(uint64_t a1@<X8>)
{
  return sub_24A27726C((uint64_t (*)(void))sub_24A23192C, a1);
}

uint64_t sub_24A2771B8@<X0>(void *a1@<X8>)
{
  return sub_24A217308(&qword_2697785A8, &qword_26977A7E8, a1);
}

uint64_t sub_24A2771DC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_24A2772E0(a1, (uint64_t (*)(void))sub_24A23192C, a2);
}

uint64_t sub_24A2771F4(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_24A27BBA8();

  return MEMORY[0x270F44AF0](a1, a2, v4);
}

void sub_24A277240()
{
  qword_26977A7F0 = (uint64_t)&unk_26FDFC588;
}

uint64_t sub_24A277254@<X0>(uint64_t a1@<X8>)
{
  return sub_24A27726C((uint64_t (*)(void))sub_24A27F0BC, a1);
}

uint64_t sub_24A27726C@<X0>(uint64_t (*a1)(void)@<X3>, uint64_t a2@<X8>)
{
  uint64_t result = a1();
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4;
  *(unsigned char *)(a2 + 9) = v5 & 1;
  return result;
}

uint64_t sub_24A2772A4@<X0>(void *a1@<X8>)
{
  return sub_24A217308(&qword_2697785B0, &qword_26977A7F0, a1);
}

uint64_t sub_24A2772C8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_24A2772E0(a1, (uint64_t (*)(void))sub_24A27F0BC, a2);
}

uint64_t sub_24A2772E0@<X0>(void *a1@<X0>, uint64_t (*a2)(void)@<X3>, uint64_t a3@<X8>)
{
  uint64_t result = a2(*a1);
  *(void *)a3 = result;
  *(unsigned char *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 9) = v6 & 1;
  return result;
}

uint64_t sub_24A27731C(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_24A27BBFC();

  return MEMORY[0x270F44AF0](a1, a2, v4);
}

void sub_24A277368()
{
  qword_26977A7F8 = (uint64_t)&unk_26FDFC5E8;
}

unint64_t sub_24A27737C@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = result < 3;
  *(unsigned char *)(a2 + 9) = 0;
  return result;
}

uint64_t sub_24A277394@<X0>(void *a1@<X8>)
{
  return sub_24A217308(&qword_2697785B8, &qword_26977A7F8, a1);
}

void *sub_24A2773B8@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  BOOL v2 = *result >= 3uLL;
  *(void *)a2 = *result;
  char v3 = !v2;
  *(unsigned char *)(a2 + 8) = v3;
  *(unsigned char *)(a2 + 9) = 0;
  return result;
}

uint64_t sub_24A2773D4(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_24A27BB54();

  return MEMORY[0x270F44AF0](a1, a2, v4);
}

uint64_t sub_24A277420()
{
  uint64_t v0 = sub_24A2A7130();
  __swift_allocate_value_buffer(v0, qword_26977A800);
  __swift_project_value_buffer(v0, (uint64_t)qword_26977A800);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697787B0);
  unint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2697787B8) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v30 = swift_allocObject();
  *(_OWORD *)(v30 + 16) = xmmword_24A2AF390;
  unint64_t v4 = v30 + v3;
  unint64_t v5 = v30 + v3 + v1[14];
  *(void *)(v30 + v3) = 0;
  *(void *)unint64_t v5 = "UNSPECIFIED";
  *(void *)(v5 + 8) = 11;
  *(unsigned char *)(v5 + 16) = 2;
  uint64_t v6 = *MEMORY[0x263F50718];
  uint64_t v7 = sub_24A2A7100();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  unint64_t v9 = v30 + v3 + v2 + v1[14];
  *(void *)(v4 + v2) = 1;
  *(void *)unint64_t v9 = "PRODUCTION";
  *(void *)(v9 + 8) = 10;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  uint64_t v10 = (void *)(v30 + v3 + 2 * v2);
  char v11 = (char *)v10 + v1[14];
  *uint64_t v10 = 2;
  *(void *)char v11 = "CARRY";
  *((void *)v11 + 1) = 5;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v30 + v3 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 3;
  *(void *)uint64_t v13 = "STAGING";
  *((void *)v13 + 1) = 7;
  v13[16] = 2;
  v8();
  id v14 = (void *)(v30 + v3 + 4 * v2);
  id v15 = (char *)v14 + v1[14];
  void *v14 = 4;
  *(void *)id v15 = "QA";
  *((void *)v15 + 1) = 2;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v30 + v3 + 5 * v2);
  os_log_type_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 5;
  *(void *)os_log_type_t v17 = "PERF";
  *((void *)v17 + 1) = 4;
  v17[16] = 2;
  v8();
  id v18 = (void *)(v30 + v3 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *id v18 = 6;
  *(void *)uint64_t v19 = "EPHEMERAL";
  *((void *)v19 + 1) = 9;
  v19[16] = 2;
  v8();
  id v20 = (void *)(v30 + v3 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  *id v20 = 7;
  *(void *)uint64_t v21 = "DEV";
  *((void *)v21 + 1) = 3;
  v21[16] = 2;
  v8();
  uint64_t v22 = v30 + v3 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 96;
  *(void *)uint64_t v22 = "QA1_PRIMARY";
  *(void *)(v22 + 8) = 11;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v30 + v3 + 9 * v2);
  id v24 = (char *)v23 + v1[14];
  *uint64_t v23 = 97;
  *(void *)id v24 = "QA1_INTERNAL";
  *((void *)v24 + 1) = 12;
  v24[16] = 2;
  v8();
  os_log_type_t v25 = (void *)(v30 + v3 + 10 * v2);
  uint64_t v26 = (char *)v25 + v1[14];
  *os_log_type_t v25 = 98;
  *(void *)uint64_t v26 = "QA2_PRIMARY";
  *((void *)v26 + 1) = 11;
  v26[16] = 2;
  v8();
  uint64_t v27 = (void *)(v30 + v3 + 11 * v2);
  uint64_t v28 = (char *)v27 + v1[14];
  *uint64_t v27 = 99;
  *(void *)uint64_t v28 = "QA2_INTERNAL";
  *((void *)v28 + 1) = 12;
  v28[16] = 2;
  v8();
  return sub_24A2A7110();
}

uint64_t sub_24A277840@<X0>(uint64_t a1@<X8>)
{
  return sub_24A1ADE40(&qword_2697785C0, (uint64_t)qword_26977A800, a1);
}

uint64_t sub_24A277864()
{
  uint64_t v0 = sub_24A2A7130();
  __swift_allocate_value_buffer(v0, qword_26977A818);
  __swift_project_value_buffer(v0, (uint64_t)qword_26977A818);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697787B0);
  unint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2697787B8) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_24A2A8AB0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "schema_version";
  *(void *)(v6 + 8) = 14;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = sub_24A2A7100();
  unint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "release_creation";
  *(void *)(v10 + 8) = 16;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  char v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *char v11 = 3;
  *(void *)uint64_t v12 = "release_digest";
  *((void *)v12 + 1) = 14;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  id v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)id v14 = "assets";
  *((void *)v14 + 1) = 6;
  v14[16] = 2;
  v9();
  uint64_t v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 5;
  *(void *)uint64_t v15 = "darwin_init";
  *(void *)(v15 + 8) = 11;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return sub_24A2A7110();
}

uint64_t sub_24A277AF0()
{
  uint64_t result = sub_24A2A6ED0();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          sub_24A27A7C0();
          uint64_t v4 = v3;
          sub_24A2A6F10();
          goto LABEL_5;
        case 2:
          uint64_t v4 = v3;
          sub_24A277C9C();
          goto LABEL_5;
        case 3:
          uint64_t v4 = v3;
          sub_24A2A6F40();
          goto LABEL_5;
        case 4:
          type metadata accessor for PrivateCloudCompute_ReleaseMetadata.Asset(0);
          sub_24A27A468(&qword_269779CD0, (void (*)(uint64_t))type metadata accessor for PrivateCloudCompute_ReleaseMetadata.Asset);
          uint64_t v4 = v3;
          sub_24A2A6F90();
          goto LABEL_5;
        case 5:
          uint64_t v4 = v3;
          sub_24A277D4C();
LABEL_5:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = sub_24A2A6ED0();
    }
  }
  return result;
}

uint64_t sub_24A277C9C()
{
  return sub_24A2A6FA0();
}

uint64_t sub_24A277D4C()
{
  return sub_24A2A6FA0();
}

uint64_t sub_24A277DFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*v3 || (sub_24A27A7C0(), uint64_t result = sub_24A2A7070(), !v4))
  {
    uint64_t result = sub_24A278000((uint64_t)v3, a1, a2, a3);
    if (!v4)
    {
      uint64_t v9 = v3[2];
      unint64_t v10 = v3[3];
      switch(v10 >> 62)
      {
        case 1uLL:
          if ((int)v9 != v9 >> 32) {
            goto LABEL_11;
          }
          break;
        case 2uLL:
          if (*(void *)(v9 + 16) != *(void *)(v9 + 24)) {
            goto LABEL_11;
          }
          break;
        case 3uLL:
          break;
        default:
          if ((v10 & 0xFF000000000000) != 0) {
LABEL_11:
          }
            sub_24A2A7090();
          break;
      }
      if (*(void *)(v3[4] + 16))
      {
        type metadata accessor for PrivateCloudCompute_ReleaseMetadata.Asset(0);
        sub_24A27A468(&qword_269779CD0, (void (*)(uint64_t))type metadata accessor for PrivateCloudCompute_ReleaseMetadata.Asset);
        sub_24A2A70E0();
      }
      sub_24A278204((uint64_t)v3, a1, a2, a3);
      type metadata accessor for PrivateCloudCompute_ReleaseMetadata(0);
      return sub_24A2A6DF0();
    }
  }
  return result;
}

uint64_t sub_24A278000(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749E0);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_24A2A6DC0();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  char v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PrivateCloudCompute_ReleaseMetadata(0);
  sub_24A1B2CAC(a1 + *(int *)(v12 + 32), (uint64_t)v7, &qword_26B1749E0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_24A1B2D10((uint64_t)v7, &qword_26B1749E0);
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v7, v8);
  sub_24A27A468(&qword_26B1749D8, MEMORY[0x263F502F0]);
  sub_24A2A70F0();
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_24A278204(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_269779D38);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_24A2A6DD0();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  char v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PrivateCloudCompute_ReleaseMetadata(0);
  sub_24A1B2CAC(a1 + *(int *)(v12 + 36), (uint64_t)v7, &qword_269779D38);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_24A1B2D10((uint64_t)v7, &qword_269779D38);
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v7, v8);
  sub_24A27A468(&qword_269779D40, MEMORY[0x263F504B8]);
  sub_24A2A70F0();
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_24A278408@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 8) = 1;
  *(_OWORD *)(a2 + 16) = xmmword_24A2A8A80;
  *(void *)(a2 + 32) = MEMORY[0x263F8EE78];
  sub_24A2A6E00();
  uint64_t v4 = a2 + *(int *)(a1 + 32);
  uint64_t v5 = sub_24A2A6DC0();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v6 = a2 + *(int *)(a1 + 36);
  uint64_t v7 = sub_24A2A6DD0();
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);

  return v8(v6, 1, 1, v7);
}

unint64_t sub_24A278500()
{
  return 0xD000000000000023;
}

uint64_t sub_24A27851C()
{
  return sub_24A277AF0();
}

uint64_t sub_24A278534(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24A277DFC(a1, a2, a3);
}

uint64_t sub_24A27854C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A27A468(&qword_269779D28, (void (*)(uint64_t))type metadata accessor for PrivateCloudCompute_ReleaseMetadata);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t sub_24A2785C8@<X0>(uint64_t a1@<X8>)
{
  return sub_24A1ADE40(&qword_2697785C8, (uint64_t)qword_26977A818, a1);
}

uint64_t sub_24A2785EC(uint64_t a1)
{
  uint64_t v2 = sub_24A27A468(&qword_269779D10, (void (*)(uint64_t))type metadata accessor for PrivateCloudCompute_ReleaseMetadata);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t sub_24A278658()
{
  sub_24A27A468(&qword_269779D10, (void (*)(uint64_t))type metadata accessor for PrivateCloudCompute_ReleaseMetadata);

  return sub_24A2A7010();
}

uint64_t sub_24A2786D8()
{
  uint64_t v0 = sub_24A2A7130();
  __swift_allocate_value_buffer(v0, qword_26977A830);
  __swift_project_value_buffer(v0, (uint64_t)qword_26977A830);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697787B0);
  unint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2697787B8) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_24A2A8AA0;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *uint64_t v5 = 0;
  *(void *)unint64_t v6 = "SCHEMA_VERSION_UNSPECIFIED";
  *(void *)(v6 + 8) = 26;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = sub_24A2A7100();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 1;
  *(void *)uint64_t v10 = "SCHEMA_VERSION_V1";
  *((void *)v10 + 1) = 17;
  v10[16] = 2;
  v9();
  return sub_24A2A7110();
}

uint64_t sub_24A278890@<X0>(uint64_t a1@<X8>)
{
  return sub_24A1ADE40(&qword_2697785D0, (uint64_t)qword_26977A830, a1);
}

uint64_t sub_24A2788B4()
{
  uint64_t v0 = sub_24A2A7130();
  __swift_allocate_value_buffer(v0, qword_26977A848);
  __swift_project_value_buffer(v0, (uint64_t)qword_26977A848);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697787B0);
  unint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2697787B8) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_24A2A8A30;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "ASSET_TYPE_UNSPECIFIED";
  *(void *)(v6 + 8) = 22;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = sub_24A2A7100();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "ASSET_TYPE_OS";
  *(void *)(v10 + 8) = 13;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  char v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *char v11 = 2;
  *(void *)uint64_t v12 = "ASSET_TYPE_PCS";
  *((void *)v12 + 1) = 14;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  id v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 3;
  *(void *)id v14 = "ASSET_TYPE_MODEL";
  *((void *)v14 + 1) = 16;
  v14[16] = 2;
  v9();
  uint64_t v15 = (void *)(v5 + 4 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *uint64_t v15 = 4;
  *(void *)uint64_t v16 = "ASSET_TYPE_HOST_TOOLS";
  *((void *)v16 + 1) = 21;
  v16[16] = 2;
  v9();
  os_log_type_t v17 = (void *)(v5 + 5 * v2);
  id v18 = (char *)v17 + v1[14];
  *os_log_type_t v17 = 5;
  *(void *)id v18 = "ASSET_TYPE_DEBUG_SHELL";
  *((void *)v18 + 1) = 22;
  v18[16] = 2;
  v9();
  return sub_24A2A7110();
}

uint64_t sub_24A278B6C@<X0>(uint64_t a1@<X8>)
{
  return sub_24A1ADE40(&qword_2697785D8, (uint64_t)qword_26977A848, a1);
}

uint64_t sub_24A278B90()
{
  uint64_t v0 = sub_24A2A7130();
  __swift_allocate_value_buffer(v0, qword_26977A860);
  __swift_project_value_buffer(v0, (uint64_t)qword_26977A860);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697787B0);
  unint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2697787B8) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_24A2A8A90;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "FILE_TYPE_UNSPECIFIED";
  *(void *)(v6 + 8) = 21;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = sub_24A2A7100();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "FILE_TYPE_IPSW";
  *(void *)(v10 + 8) = 14;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  char v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *char v11 = 2;
  *(void *)uint64_t v12 = "FILE_TYPE_DISKIMAGE";
  *((void *)v12 + 1) = 19;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  id v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 3;
  *(void *)id v14 = "FILE_TYPE_APPLEARCHIVE";
  *((void *)v14 + 1) = 22;
  v14[16] = 2;
  v9();
  return sub_24A2A7110();
}

uint64_t sub_24A278DC4@<X0>(uint64_t a1@<X8>)
{
  return sub_24A1ADE40(&qword_2697785E0, (uint64_t)qword_26977A860, a1);
}

uint64_t sub_24A278DE8()
{
  uint64_t v0 = sub_24A2A7130();
  __swift_allocate_value_buffer(v0, qword_26977A878);
  __swift_project_value_buffer(v0, (uint64_t)qword_26977A878);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697787B0);
  unint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2697787B8) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_24A2A8A70;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 0;
  *(void *)unint64_t v6 = "DIGEST_ALG_UNSPECIFIED";
  *(void *)(v6 + 8) = 22;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = sub_24A2A7100();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 1;
  *(void *)unint64_t v10 = "DIGEST_ALG_SHA256";
  *((void *)v10 + 1) = 17;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 2;
  *(void *)uint64_t v11 = "DIGEST_ALG_SHA384";
  *(void *)(v11 + 8) = 17;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return sub_24A2A7110();
}

uint64_t sub_24A278FE4@<X0>(uint64_t a1@<X8>)
{
  return sub_24A1ADE40(&qword_2697785E8, (uint64_t)qword_26977A878, a1);
}

uint64_t sub_24A279008(uint64_t a1)
{
  return sub_24A279650(a1, 0x7473656769442ELL, 0xE700000000000000, qword_26977A890, &qword_26977A890[1]);
}

uint64_t sub_24A27902C()
{
  uint64_t v0 = sub_24A2A7130();
  __swift_allocate_value_buffer(v0, qword_26977A8A0);
  __swift_project_value_buffer(v0, (uint64_t)qword_26977A8A0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697787B0);
  unint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2697787B8) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_24A2A8AA0;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *unint64_t v5 = 1;
  *(void *)unint64_t v6 = "digest_alg";
  *(void *)(v6 + 8) = 10;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = sub_24A2A7100();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "value";
  *((void *)v10 + 1) = 5;
  v10[16] = 2;
  v9();
  return sub_24A2A7110();
}

uint64_t sub_24A2791EC()
{
  uint64_t result = sub_24A2A6ED0();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        sub_24A2A6F40();
      }
      else if (result == 1)
      {
        sub_24A27BB54();
        sub_24A2A6F10();
      }
      uint64_t result = sub_24A2A6ED0();
    }
  }
  return result;
}

uint64_t sub_24A2792D0()
{
  if (!*v0 || (sub_24A27BB54(), uint64_t result = sub_24A2A7070(), !v1))
  {
    uint64_t v3 = v0[2];
    unint64_t v4 = v0[3];
    switch(v4 >> 62)
    {
      case 1uLL:
        if ((int)v3 != v3 >> 32) {
          goto LABEL_9;
        }
        goto LABEL_10;
      case 2uLL:
        if (*(void *)(v3 + 16) != *(void *)(v3 + 24)) {
          goto LABEL_9;
        }
        goto LABEL_10;
      case 3uLL:
        goto LABEL_10;
      default:
        if ((v4 & 0xFF000000000000) == 0) {
          goto LABEL_10;
        }
LABEL_9:
        uint64_t result = sub_24A2A7090();
        if (!v1)
        {
LABEL_10:
          type metadata accessor for PrivateCloudCompute_ReleaseMetadata.Digest(0);
          uint64_t result = sub_24A2A6DF0();
        }
        break;
    }
  }
  return result;
}

uint64_t sub_24A279414@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
  *(_OWORD *)(a1 + 16) = xmmword_24A2A8A80;
  return sub_24A2A6E00();
}

uint64_t sub_24A27944C(uint64_t a1, uint64_t a2)
{
  return sub_24A27A0A4(a1, a2, &qword_2697785F0, qword_26977A890);
}

uint64_t sub_24A279474()
{
  return sub_24A2791EC();
}

uint64_t sub_24A27948C()
{
  return sub_24A2792D0();
}

uint64_t sub_24A2794A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A27A468(&qword_269779D78, (void (*)(uint64_t))type metadata accessor for PrivateCloudCompute_ReleaseMetadata.Digest);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t sub_24A279520@<X0>(uint64_t a1@<X8>)
{
  return sub_24A1ADE40(&qword_2697785F8, (uint64_t)qword_26977A8A0, a1);
}

uint64_t sub_24A279544(uint64_t a1)
{
  uint64_t v2 = sub_24A27A468(&qword_269779CF0, (void (*)(uint64_t))type metadata accessor for PrivateCloudCompute_ReleaseMetadata.Digest);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t sub_24A2795B0()
{
  sub_24A27A468(&qword_269779CF0, (void (*)(uint64_t))type metadata accessor for PrivateCloudCompute_ReleaseMetadata.Digest);

  return sub_24A2A7010();
}

uint64_t sub_24A279630(uint64_t a1)
{
  return sub_24A279650(a1, 0x74657373412ELL, 0xE600000000000000, qword_26977A8B8, &qword_26977A8B8[1]);
}

uint64_t sub_24A279650(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t result = sub_24A2A78C0();
  *a4 = 0xD000000000000023;
  *a5 = 0x800000024A2B4120;
  return result;
}

uint64_t sub_24A2796BC()
{
  uint64_t v0 = sub_24A2A7130();
  __swift_allocate_value_buffer(v0, qword_26977A8C8);
  __swift_project_value_buffer(v0, (uint64_t)qword_26977A8C8);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697787B0);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2697787B8) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_24A2A8A30;
  unint64_t v4 = v19 + v3;
  unint64_t v5 = v19 + v3 + v1[14];
  *(void *)(v19 + v3) = 1;
  *(void *)unint64_t v5 = "type";
  *(void *)(v5 + 8) = 4;
  *(unsigned char *)(v5 + 16) = 2;
  uint64_t v6 = *MEMORY[0x263F50718];
  uint64_t v7 = sub_24A2A7100();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  unint64_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)unint64_t v9 = "url";
  *(void *)(v9 + 8) = 3;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "digest";
  *((void *)v11 + 1) = 6;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "variant";
  *((void *)v13 + 1) = 7;
  v13[16] = 2;
  v8();
  id v14 = (void *)(v4 + 4 * v2);
  uint64_t v15 = (char *)v14 + v1[14];
  void *v14 = 5;
  *(void *)uint64_t v15 = "ticket";
  *((void *)v15 + 1) = 6;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  os_log_type_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)os_log_type_t v17 = "file_type";
  *((void *)v17 + 1) = 9;
  v17[16] = 2;
  v8();
  return sub_24A2A7110();
}

uint64_t sub_24A279974()
{
  uint64_t result = sub_24A2A6ED0();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          sub_24A27BBA8();
          goto LABEL_13;
        case 2:
        case 4:
          uint64_t v4 = v3;
          sub_24A2A6F70();
          goto LABEL_5;
        case 3:
          uint64_t v4 = v3;
          sub_24A279AF0();
          goto LABEL_5;
        case 5:
          type metadata accessor for PrivateCloudCompute_ReleaseMetadata.Asset(0);
          uint64_t v4 = v3;
          sub_24A2A6F30();
          goto LABEL_5;
        case 6:
          sub_24A27BBFC();
LABEL_13:
          uint64_t v4 = v3;
          sub_24A2A6F10();
LABEL_5:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = sub_24A2A6ED0();
    }
  }
  return result;
}

uint64_t sub_24A279AF0()
{
  return sub_24A2A6FA0();
}

uint64_t sub_24A279BA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = v3;
  if (!*v5 || (sub_24A27BBA8(), uint64_t result = sub_24A2A7070(), !v4))
  {
    unint64_t v10 = v5[3];
    uint64_t v11 = HIBYTE(v10) & 0xF;
    if ((v10 & 0x2000000000000000) == 0) {
      uint64_t v11 = v5[2] & 0xFFFFFFFFFFFFLL;
    }
    if (!v11 || (uint64_t result = sub_24A2A70C0(), !v4))
    {
      uint64_t result = sub_24A279D4C((uint64_t)v5, a1, a2, a3);
      if (!v4)
      {
        unint64_t v12 = v5[5];
        uint64_t v13 = HIBYTE(v12) & 0xF;
        if ((v12 & 0x2000000000000000) == 0) {
          uint64_t v13 = v5[4] & 0xFFFFFFFFFFFFLL;
        }
        if (v13) {
          sub_24A2A70C0();
        }
        sub_24A279F28((uint64_t)v5);
        if (v5[6])
        {
          sub_24A27BBFC();
          sub_24A2A7070();
        }
        type metadata accessor for PrivateCloudCompute_ReleaseMetadata.Asset(0);
        return sub_24A2A6DF0();
      }
    }
  }
  return result;
}

uint64_t sub_24A279D4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_269779D70);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for PrivateCloudCompute_ReleaseMetadata.Digest(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PrivateCloudCompute_ReleaseMetadata.Asset(0);
  sub_24A1B2CAC(a1 + *(int *)(v12 + 36), (uint64_t)v7, &qword_269779D70);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_24A1B2D10((uint64_t)v7, &qword_269779D70);
  }
  sub_24A27BAF0((uint64_t)v7, (uint64_t)v11);
  sub_24A27A468(&qword_269779CF0, (void (*)(uint64_t))type metadata accessor for PrivateCloudCompute_ReleaseMetadata.Digest);
  sub_24A2A70F0();
  return sub_24A27BA94((uint64_t)v11);
}

uint64_t sub_24A279F28(uint64_t a1)
{
  uint64_t result = type metadata accessor for PrivateCloudCompute_ReleaseMetadata.Asset(0);
  uint64_t v3 = a1 + *(int *)(result + 40);
  unint64_t v4 = *(void *)(v3 + 8);
  if (v4 >> 60 != 15)
  {
    uint64_t v5 = *(void *)v3;
    sub_24A1A52B0(*(void *)v3, *(void *)(v3 + 8));
    sub_24A2A7090();
    return sub_24A1B7B78(v5, v4);
  }
  return result;
}

double sub_24A279FCC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 8) = 1;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0xE000000000000000;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0xE000000000000000;
  *(void *)(a2 + 48) = 0;
  *(unsigned char *)(a2 + 56) = 1;
  sub_24A2A6E00();
  uint64_t v4 = a2 + *(int *)(a1 + 36);
  uint64_t v5 = type metadata accessor for PrivateCloudCompute_ReleaseMetadata.Digest(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  double result = 0.0;
  *(_OWORD *)(a2 + *(int *)(a1 + 40)) = xmmword_24A2A99E0;
  return result;
}

uint64_t sub_24A27A07C(uint64_t a1, uint64_t a2)
{
  return sub_24A27A0A4(a1, a2, &qword_269778600, qword_26977A8B8);
}

uint64_t sub_24A27A0A4(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4)
{
  if (*a3 != -1) {
    swift_once();
  }
  uint64_t v5 = *a4;
  swift_bridgeObjectRetain();
  return v5;
}

uint64_t sub_24A27A0FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 32);
  uint64_t v5 = sub_24A2A6E10();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t sub_24A27A16C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 32);
  uint64_t v5 = sub_24A2A6E10();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);

  return v6(v4, a1, v5);
}

uint64_t (*sub_24A27A1DC())()
{
  return nullsub_1;
}

uint64_t sub_24A27A200()
{
  return sub_24A279974();
}

uint64_t sub_24A27A218(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24A279BA0(a1, a2, a3);
}

uint64_t sub_24A27A230(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A27A468(&qword_269779D88, (void (*)(uint64_t))type metadata accessor for PrivateCloudCompute_ReleaseMetadata.Asset);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t sub_24A27A2AC@<X0>(uint64_t a1@<X8>)
{
  return sub_24A1ADE40(&qword_269778608, (uint64_t)qword_26977A8C8, a1);
}

uint64_t sub_24A27A2D0(uint64_t a1)
{
  uint64_t v2 = sub_24A27A468(&qword_269779CD0, (void (*)(uint64_t))type metadata accessor for PrivateCloudCompute_ReleaseMetadata.Asset);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t sub_24A27A33C()
{
  sub_24A27A468(&qword_269779CD0, (void (*)(uint64_t))type metadata accessor for PrivateCloudCompute_ReleaseMetadata.Asset);

  return sub_24A2A7010();
}

uint64_t sub_24A27A3B8()
{
  return sub_24A27A468(&qword_269779CC8, (void (*)(uint64_t))type metadata accessor for PrivateCloudCompute_ReleaseMetadata.Asset);
}

uint64_t type metadata accessor for PrivateCloudCompute_ReleaseMetadata.Asset(uint64_t a1)
{
  return sub_24A1AE704(a1, (uint64_t *)&unk_269779DC8);
}

uint64_t sub_24A27A420()
{
  return sub_24A27A468(&qword_269779CD0, (void (*)(uint64_t))type metadata accessor for PrivateCloudCompute_ReleaseMetadata.Asset);
}

uint64_t sub_24A27A468(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_24A27A4B0()
{
  return sub_24A27A468(&qword_269779CD8, (void (*)(uint64_t))type metadata accessor for PrivateCloudCompute_ReleaseMetadata.Asset);
}

uint64_t sub_24A27A4F8()
{
  return sub_24A27A468(&qword_269779CE0, (void (*)(uint64_t))type metadata accessor for PrivateCloudCompute_ReleaseMetadata.Asset);
}

uint64_t sub_24A27A540()
{
  return sub_24A27A468(&qword_269779CE8, (void (*)(uint64_t))type metadata accessor for PrivateCloudCompute_ReleaseMetadata.Digest);
}

uint64_t type metadata accessor for PrivateCloudCompute_ReleaseMetadata.Digest(uint64_t a1)
{
  return sub_24A1AE704(a1, (uint64_t *)&unk_269779DB8);
}

uint64_t sub_24A27A5A8()
{
  return sub_24A27A468(&qword_269779CF0, (void (*)(uint64_t))type metadata accessor for PrivateCloudCompute_ReleaseMetadata.Digest);
}

uint64_t sub_24A27A5F0()
{
  return sub_24A27A468(&qword_269779CF8, (void (*)(uint64_t))type metadata accessor for PrivateCloudCompute_ReleaseMetadata.Digest);
}

uint64_t sub_24A27A638()
{
  return sub_24A27A468(&qword_269779D00, (void (*)(uint64_t))type metadata accessor for PrivateCloudCompute_ReleaseMetadata.Digest);
}

uint64_t sub_24A27A680()
{
  return sub_24A27A468(&qword_269779D08, (void (*)(uint64_t))type metadata accessor for PrivateCloudCompute_ReleaseMetadata);
}

uint64_t type metadata accessor for PrivateCloudCompute_ReleaseMetadata(uint64_t a1)
{
  return sub_24A1AE704(a1, (uint64_t *)&unk_269779DA0);
}

uint64_t sub_24A27A6E8()
{
  return sub_24A27A468(&qword_269779D10, (void (*)(uint64_t))type metadata accessor for PrivateCloudCompute_ReleaseMetadata);
}

uint64_t sub_24A27A730()
{
  return sub_24A27A468(&qword_269779D18, (void (*)(uint64_t))type metadata accessor for PrivateCloudCompute_ReleaseMetadata);
}

uint64_t sub_24A27A778()
{
  return sub_24A27A468(&qword_269779D20, (void (*)(uint64_t))type metadata accessor for PrivateCloudCompute_ReleaseMetadata);
}

unint64_t sub_24A27A7C0()
{
  unint64_t result = qword_269779D30;
  if (!qword_269779D30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269779D30);
  }
  return result;
}

uint64_t sub_24A27A814(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = sub_24A2A6E10();
  uint64_t v75 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v69 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v74 = (char *)&v69 - v8;
  uint64_t v80 = sub_24A2A6DD0();
  uint64_t v78 = *(void *)(v80 - 8);
  MEMORY[0x270FA5388](v80);
  uint64_t v73 = (char *)&v69 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = __swift_instantiateConcreteTypeFromMangledName(&qword_269779D48);
  MEMORY[0x270FA5388](v77);
  uint64_t v79 = (uint64_t)&v69 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_269779D38);
  uint64_t v12 = MEMORY[0x270FA5388](v11 - 8);
  uint64_t v76 = (uint64_t)&v69 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v84 = (uint64_t)&v69 - v15;
  MEMORY[0x270FA5388](v14);
  uint64_t v81 = (uint64_t)&v69 - v16;
  uint64_t v17 = sub_24A2A6DC0();
  uint64_t v83 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v82 = (char *)&v69 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_269779D50);
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v69 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749E0);
  uint64_t v23 = MEMORY[0x270FA5388](v22 - 8);
  os_log_type_t v25 = (char *)&v69 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = MEMORY[0x270FA5388](v23);
  uint64_t v28 = (char *)&v69 - v27;
  MEMORY[0x270FA5388](v26);
  uint64_t v30 = (char *)&v69 - v29;
  uint64_t v31 = *a1;
  char v85 = a1;
  int v86 = a2;
  uint64_t v32 = *a2;
  if (*((unsigned char *)a1 + 8)) {
    uint64_t v31 = v31 != 0;
  }
  if (*((unsigned char *)a2 + 8) == 1)
  {
    if (v32)
    {
      if (v31 != 1) {
        goto LABEL_28;
      }
    }
    else if (v31)
    {
      goto LABEL_28;
    }
  }
  else if (v31 != v32)
  {
    goto LABEL_28;
  }
  uint64_t v70 = v7;
  uint64_t v71 = v4;
  uint64_t v33 = type metadata accessor for PrivateCloudCompute_ReleaseMetadata(0);
  sub_24A1B2CAC((uint64_t)v85 + *(int *)(v33 + 32), (uint64_t)v30, &qword_26B1749E0);
  uint64_t v72 = v33;
  sub_24A1B2CAC((uint64_t)v86 + *(int *)(v33 + 32), (uint64_t)v28, &qword_26B1749E0);
  uint64_t v34 = (uint64_t)&v21[*(int *)(v19 + 48)];
  sub_24A1B2CAC((uint64_t)v30, (uint64_t)v21, &qword_26B1749E0);
  sub_24A1B2CAC((uint64_t)v28, v34, &qword_26B1749E0);
  uint64_t v35 = v83;
  uint64_t v36 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v83 + 48);
  if (v36((uint64_t)v21, 1, v17) == 1)
  {
    sub_24A1B2D10((uint64_t)v28, &qword_26B1749E0);
    sub_24A1B2D10((uint64_t)v30, &qword_26B1749E0);
    int v37 = v36(v34, 1, v17);
    uint64_t v38 = v84;
    if (v37 == 1)
    {
      sub_24A1B2D10((uint64_t)v21, &qword_26B1749E0);
      goto LABEL_18;
    }
LABEL_15:
    uint64_t v40 = &qword_269779D50;
    uint64_t v41 = (uint64_t)v21;
LABEL_16:
    sub_24A1B2D10(v41, v40);
    goto LABEL_28;
  }
  sub_24A1B2CAC((uint64_t)v21, (uint64_t)v25, &qword_26B1749E0);
  int v39 = v36(v34, 1, v17);
  uint64_t v38 = v84;
  if (v39 == 1)
  {
    sub_24A1B2D10((uint64_t)v28, &qword_26B1749E0);
    sub_24A1B2D10((uint64_t)v30, &qword_26B1749E0);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v25, v17);
    goto LABEL_15;
  }
  uint64_t v42 = v82;
  (*(void (**)(char *, uint64_t, uint64_t))(v35 + 32))(v82, v34, v17);
  sub_24A27A468(&qword_269779D60, MEMORY[0x263F502F0]);
  char v43 = sub_24A2A77E0();
  uint64_t v44 = *(void (**)(char *, uint64_t))(v35 + 8);
  v44(v42, v17);
  sub_24A1B2D10((uint64_t)v28, &qword_26B1749E0);
  sub_24A1B2D10((uint64_t)v30, &qword_26B1749E0);
  v44(v25, v17);
  sub_24A1B2D10((uint64_t)v21, &qword_26B1749E0);
  if ((v43 & 1) == 0) {
    goto LABEL_28;
  }
LABEL_18:
  uint64_t v46 = v85;
  uint64_t v45 = v86;
  if ((sub_24A1B7D80(v85[2], v85[3], v86[2], v86[3]) & 1) == 0 || (sub_24A1B0960(v46[4], v45[4]) & 1) == 0) {
    goto LABEL_28;
  }
  uint64_t v47 = v72;
  uint64_t v48 = v81;
  sub_24A1B2CAC((uint64_t)v46 + *(int *)(v72 + 36), v81, &qword_269779D38);
  sub_24A1B2CAC((uint64_t)v45 + *(int *)(v47 + 36), v38, &qword_269779D38);
  uint64_t v49 = v79;
  uint64_t v50 = v79 + *(int *)(v77 + 48);
  sub_24A1B2CAC(v48, v79, &qword_269779D38);
  sub_24A1B2CAC(v38, v50, &qword_269779D38);
  uint64_t v51 = v78;
  long long v52 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v78 + 48);
  uint64_t v53 = v80;
  if (v52(v49, 1, v80) != 1)
  {
    uint64_t v54 = v76;
    sub_24A1B2CAC(v49, v76, &qword_269779D38);
    if (v52(v50, 1, v53) == 1)
    {
      sub_24A1B2D10(v84, &qword_269779D38);
      sub_24A1B2D10(v81, &qword_269779D38);
      (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v54, v53);
      goto LABEL_25;
    }
    uint64_t v55 = v73;
    (*(void (**)(char *, uint64_t, uint64_t))(v51 + 32))(v73, v50, v53);
    sub_24A27A468(&qword_269779D58, MEMORY[0x263F504B8]);
    char v56 = sub_24A2A77E0();
    uint64_t v57 = *(void (**)(char *, uint64_t))(v51 + 8);
    v57(v55, v53);
    sub_24A1B2D10(v84, &qword_269779D38);
    sub_24A1B2D10(v81, &qword_269779D38);
    v57((char *)v54, v53);
    sub_24A1B2D10(v49, &qword_269779D38);
    if (v56) {
      goto LABEL_27;
    }
LABEL_28:
    char v66 = 0;
    return v66 & 1;
  }
  sub_24A1B2D10(v38, &qword_269779D38);
  sub_24A1B2D10(v48, &qword_269779D38);
  if (v52(v50, 1, v53) != 1)
  {
LABEL_25:
    uint64_t v40 = &qword_269779D48;
    uint64_t v41 = v49;
    goto LABEL_16;
  }
  sub_24A1B2D10(v49, &qword_269779D38);
LABEL_27:
  uint64_t v58 = v71;
  uint64_t v59 = v72;
  uint64_t v60 = (uint64_t)v46 + *(int *)(v72 + 28);
  os_log_type_t v62 = v74;
  uint64_t v61 = v75;
  uint64_t v63 = *(void (**)(char *, uint64_t, uint64_t))(v75 + 16);
  v63(v74, v60, v71);
  uint64_t v64 = (uint64_t)v45 + *(int *)(v59 + 28);
  uint64_t v65 = v70;
  v63(v70, v64, v58);
  sub_24A27A468(&qword_2697787D0, MEMORY[0x263F50560]);
  char v66 = sub_24A2A77E0();
  uint64_t v67 = *(void (**)(char *, uint64_t))(v61 + 8);
  v67(v65, v58);
  v67(v62, v58);
  return v66 & 1;
}

uint64_t sub_24A27B184(char *a1, uint64_t *a2)
{
  uint64_t v4 = sub_24A2A6E10();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v18 - v9;
  uint64_t v11 = *(void *)a1;
  uint64_t v12 = *a2;
  if (*((unsigned char *)a2 + 8) != 1)
  {
    if (v11 == v12) {
      goto LABEL_11;
    }
    goto LABEL_13;
  }
  if (!v12)
  {
    if (!v11) {
      goto LABEL_11;
    }
LABEL_13:
    char v15 = 0;
    return v15 & 1;
  }
  if (v12 != 1)
  {
    if (v11 == 2) {
      goto LABEL_11;
    }
    goto LABEL_13;
  }
  if (v11 != 1) {
    goto LABEL_13;
  }
LABEL_11:
  if ((sub_24A1B7D80(*((void *)a1 + 2), *((void *)a1 + 3), a2[2], a2[3]) & 1) == 0) {
    goto LABEL_13;
  }
  uint64_t v13 = type metadata accessor for PrivateCloudCompute_ReleaseMetadata.Digest(0);
  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
  v14(v10, &a1[*(int *)(v13 + 24)], v4);
  v14(v8, (char *)a2 + *(int *)(v13 + 24), v4);
  sub_24A27A468(&qword_2697787D0, MEMORY[0x263F50560]);
  char v15 = sub_24A2A77E0();
  uint64_t v16 = *(void (**)(char *, uint64_t))(v5 + 8);
  v16(v8, v4);
  v16(v10, v4);
  return v15 & 1;
}

uint64_t sub_24A27B384(char *a1, uint64_t *a2)
{
  uint64_t v4 = sub_24A2A6E10();
  uint64_t v53 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  long long v52 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v51 = (char *)&v50 - v7;
  uint64_t v8 = type metadata accessor for PrivateCloudCompute_ReleaseMetadata.Digest(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v54 = (uint64_t *)((char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_269779D68);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_269779D70);
  uint64_t v15 = MEMORY[0x270FA5388](v14 - 8);
  uint64_t v17 = (char *)&v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x270FA5388](v15);
  uint64_t v20 = (char *)&v50 - v19;
  MEMORY[0x270FA5388](v18);
  uint64_t v22 = (char *)&v50 - v21;
  uint64_t v55 = a1;
  uint64_t v23 = *(void *)a1;
  uint64_t v24 = *a2;
  if (*((unsigned char *)a2 + 8) == 1)
  {
    switch(v24)
    {
      case 1:
        if (v23 == 1) {
          goto LABEL_6;
        }
        goto LABEL_38;
      case 2:
        if (v23 == 2) {
          goto LABEL_6;
        }
        goto LABEL_38;
      case 3:
        if (v23 == 3) {
          goto LABEL_6;
        }
        goto LABEL_38;
      case 4:
        if (v23 == 4) {
          goto LABEL_6;
        }
        goto LABEL_38;
      case 5:
        if (v23 == 5) {
          goto LABEL_6;
        }
        goto LABEL_38;
      default:
        if (!v23) {
          goto LABEL_6;
        }
        goto LABEL_38;
    }
  }
  if (v23 != v24) {
    goto LABEL_38;
  }
LABEL_6:
  uint64_t v50 = v4;
  if (*((void *)v55 + 2) != a2[2] || *((void *)v55 + 3) != a2[3])
  {
    char v25 = 0;
    if ((sub_24A2A7E40() & 1) == 0) {
      return v25 & 1;
    }
  }
  uint64_t v26 = (int *)type metadata accessor for PrivateCloudCompute_ReleaseMetadata.Asset(0);
  sub_24A1B2CAC((uint64_t)&v55[v26[9]], (uint64_t)v22, &qword_269779D70);
  sub_24A1B2CAC((uint64_t)a2 + v26[9], (uint64_t)v20, &qword_269779D70);
  uint64_t v27 = (uint64_t)&v13[*(int *)(v11 + 48)];
  sub_24A1B2CAC((uint64_t)v22, (uint64_t)v13, &qword_269779D70);
  sub_24A1B2CAC((uint64_t)v20, v27, &qword_269779D70);
  uint64_t v28 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v28((uint64_t)v13, 1, v8) == 1)
  {
    sub_24A1B2D10((uint64_t)v20, &qword_269779D70);
    sub_24A1B2D10((uint64_t)v22, &qword_269779D70);
    if (v28(v27, 1, v8) == 1)
    {
      sub_24A1B2D10((uint64_t)v13, &qword_269779D70);
      goto LABEL_16;
    }
LABEL_14:
    sub_24A1B2D10((uint64_t)v13, &qword_269779D68);
    char v25 = 0;
    return v25 & 1;
  }
  sub_24A1B2CAC((uint64_t)v13, (uint64_t)v17, &qword_269779D70);
  if (v28(v27, 1, v8) == 1)
  {
    sub_24A1B2D10((uint64_t)v20, &qword_269779D70);
    sub_24A1B2D10((uint64_t)v22, &qword_269779D70);
    sub_24A27BA94((uint64_t)v17);
    goto LABEL_14;
  }
  uint64_t v29 = v54;
  sub_24A27BAF0(v27, (uint64_t)v54);
  char v30 = sub_24A27B184(v17, v29);
  sub_24A27BA94((uint64_t)v29);
  sub_24A1B2D10((uint64_t)v20, &qword_269779D70);
  sub_24A1B2D10((uint64_t)v22, &qword_269779D70);
  sub_24A27BA94((uint64_t)v17);
  sub_24A1B2D10((uint64_t)v13, &qword_269779D70);
  if ((v30 & 1) == 0) {
    goto LABEL_38;
  }
LABEL_16:
  if (*((void *)v55 + 4) == a2[4] && *((void *)v55 + 5) == a2[5] || (char v25 = 0, (sub_24A2A7E40() & 1) != 0))
  {
    uint64_t v31 = v26[10];
    uint64_t v32 = &v55[v31];
    uint64_t v33 = *(void *)&v55[v31];
    unint64_t v34 = *(void *)&v55[v31 + 8];
    uint64_t v35 = (uint64_t *)((char *)a2 + v31);
    uint64_t v36 = *v35;
    unint64_t v37 = v35[1];
    if (v34 >> 60 == 15)
    {
      if (v37 >> 60 == 15)
      {
LABEL_35:
        uint64_t v39 = *((void *)v55 + 6);
        uint64_t v40 = a2[6];
        if (*((unsigned char *)a2 + 56) == 1)
        {
          uint64_t v41 = v50;
          switch(v40)
          {
            case 1:
              if (v39 == 1) {
                goto LABEL_41;
              }
              goto LABEL_38;
            case 2:
              if (v39 == 2) {
                goto LABEL_41;
              }
              goto LABEL_38;
            case 3:
              if (v39 == 3) {
                goto LABEL_41;
              }
              goto LABEL_38;
            default:
              if (v39) {
                goto LABEL_38;
              }
              goto LABEL_41;
          }
        }
        uint64_t v41 = v50;
        if (v39 == v40)
        {
LABEL_41:
          uint64_t v43 = v53;
          uint64_t v44 = *(void (**)(char *, char *, uint64_t))(v53 + 16);
          uint64_t v45 = v51;
          v44(v51, &v55[v26[8]], v41);
          uint64_t v46 = (char *)a2 + v26[8];
          uint64_t v47 = v52;
          v44(v52, v46, v41);
          sub_24A27A468(&qword_2697787D0, MEMORY[0x263F50560]);
          uint64_t v48 = v41;
          char v25 = sub_24A2A77E0();
          uint64_t v49 = *(void (**)(char *, uint64_t))(v43 + 8);
          v49(v47, v48);
          v49(v45, v48);
          return v25 & 1;
        }
        goto LABEL_38;
      }
      goto LABEL_33;
    }
    if (v37 >> 60 == 15)
    {
LABEL_33:
      sub_24A1B8018(*(void *)v32, *((void *)v32 + 1));
      sub_24A1B8018(v36, v37);
      sub_24A1B7B78(v33, v34);
      sub_24A1B7B78(v36, v37);
      char v25 = 0;
      return v25 & 1;
    }
    sub_24A1B8018(*(void *)v32, *((void *)v32 + 1));
    sub_24A1B8018(v36, v37);
    char v38 = sub_24A1B7D80(v33, v34, v36, v37);
    sub_24A1B7B78(v36, v37);
    sub_24A1B7B78(v33, v34);
    if (v38) {
      goto LABEL_35;
    }
LABEL_38:
    char v25 = 0;
  }
  return v25 & 1;
}

uint64_t sub_24A27BA94(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PrivateCloudCompute_ReleaseMetadata.Digest(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_24A27BAF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PrivateCloudCompute_ReleaseMetadata.Digest(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_24A27BB54()
{
  unint64_t result = qword_269779D80;
  if (!qword_269779D80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269779D80);
  }
  return result;
}

unint64_t sub_24A27BBA8()
{
  unint64_t result = qword_269779D90;
  if (!qword_269779D90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269779D90);
  }
  return result;
}

unint64_t sub_24A27BBFC()
{
  unint64_t result = qword_269779D98;
  if (!qword_269779D98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269779D98);
  }
  return result;
}

ValueMetadata *type metadata accessor for PrivateCloudCompute_Environment()
{
  return &type metadata for PrivateCloudCompute_Environment;
}

void *sub_24A27BC60(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(void *)a1 = *a2;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    uint64_t v7 = a2[2];
    unint64_t v8 = a2[3];
    sub_24A1A52B0(v7, v8);
    v4[2] = v7;
    v4[3] = v8;
    v4[4] = a2[4];
    uint64_t v9 = a3[7];
    uint64_t v10 = (char *)v4 + v9;
    uint64_t v11 = (uint64_t)a2 + v9;
    uint64_t v12 = sub_24A2A6E10();
    uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    v13(v10, v11, v12);
    uint64_t v14 = a3[8];
    uint64_t v15 = (char *)v4 + v14;
    uint64_t v16 = (char *)a2 + v14;
    uint64_t v17 = sub_24A2A6DC0();
    uint64_t v18 = *(void *)(v17 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749E0);
      memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v15, v16, v17);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
    uint64_t v21 = a3[9];
    uint64_t v22 = (char *)v4 + v21;
    uint64_t v23 = (char *)a2 + v21;
    uint64_t v24 = sub_24A2A6DD0();
    uint64_t v25 = *(void *)(v24 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
    {
      uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_269779D38);
      memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v22, v23, v24);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
    }
  }
  return v4;
}

uint64_t sub_24A27BF40(uint64_t a1, int *a2)
{
  sub_24A1A5384(*(void *)(a1 + 16), *(void *)(a1 + 24));
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[7];
  uint64_t v5 = sub_24A2A6E10();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = a1 + a2[8];
  uint64_t v7 = sub_24A2A6DC0();
  uint64_t v8 = *(void *)(v7 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  }
  uint64_t v9 = a1 + a2[9];
  uint64_t v10 = sub_24A2A6DD0();
  uint64_t v13 = *(void *)(v10 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v9, 1, v10);
  if (!result)
  {
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t))(v13 + 8);
    return v12(v9, v10);
  }
  return result;
}

uint64_t sub_24A27C104(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  unint64_t v7 = *(void *)(a2 + 24);
  sub_24A1A52B0(v6, v7);
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v8 = a3[7];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = sub_24A2A6E10();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
  swift_bridgeObjectRetain();
  v12(v9, v10, v11);
  uint64_t v13 = a3[8];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (const void *)(a2 + v13);
  uint64_t v16 = sub_24A2A6DC0();
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749E0);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v17 + 16))(v14, v15, v16);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  uint64_t v19 = a3[9];
  uint64_t v20 = (void *)(a1 + v19);
  uint64_t v21 = (const void *)(a2 + v19);
  uint64_t v22 = sub_24A2A6DD0();
  uint64_t v23 = *(void *)(v22 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
  {
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_269779D38);
    memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v23 + 16))(v20, v21, v22);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  }
  return a1;
}

uint64_t sub_24A27C394(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v6;
  uint64_t v7 = a2[2];
  unint64_t v8 = a2[3];
  sub_24A1A52B0(v7, v8);
  uint64_t v9 = *(void *)(a1 + 16);
  unint64_t v10 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = v7;
  *(void *)(a1 + 24) = v8;
  sub_24A1A5384(v9, v10);
  *(void *)(a1 + 32) = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v11 = a3[7];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = (uint64_t)a2 + v11;
  uint64_t v14 = sub_24A2A6E10();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 24))(v12, v13, v14);
  uint64_t v15 = a3[8];
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (char *)a2 + v15;
  uint64_t v18 = sub_24A2A6DC0();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v19 + 48);
  int v21 = v20(v16, 1, v18);
  int v22 = v20(v17, 1, v18);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(void *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v22)
  {
    (*(void (**)(void *, uint64_t))(v19 + 8))(v16, v18);
LABEL_6:
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749E0);
    memcpy(v16, v17, *(void *)(*(void *)(v23 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, char *, uint64_t))(v19 + 24))(v16, v17, v18);
LABEL_7:
  uint64_t v24 = a3[9];
  uint64_t v25 = (void *)(a1 + v24);
  uint64_t v26 = (char *)a2 + v24;
  uint64_t v27 = sub_24A2A6DD0();
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v29 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v28 + 48);
  int v30 = v29(v25, 1, v27);
  int v31 = v29(v26, 1, v27);
  if (!v30)
  {
    if (!v31)
    {
      (*(void (**)(void *, char *, uint64_t))(v28 + 24))(v25, v26, v27);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v28 + 8))(v25, v27);
    goto LABEL_12;
  }
  if (v31)
  {
LABEL_12:
    uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_269779D38);
    memcpy(v25, v26, *(void *)(*(void *)(v32 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, char *, uint64_t))(v28 + 16))(v25, v26, v27);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
  return a1;
}

uint64_t sub_24A27C6E8(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v6 = a3[7];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = sub_24A2A6E10();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[8];
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (const void *)(a2 + v10);
  uint64_t v13 = sub_24A2A6DC0();
  uint64_t v14 = *(void *)(v13 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
  {
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749E0);
    memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v14 + 32))(v11, v12, v13);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  uint64_t v16 = a3[9];
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (const void *)(a2 + v16);
  uint64_t v19 = sub_24A2A6DD0();
  uint64_t v20 = *(void *)(v19 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
  {
    uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_269779D38);
    memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v20 + 32))(v17, v18, v19);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  }
  return a1;
}

uint64_t sub_24A27C958(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  unint64_t v7 = *(void *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  sub_24A1A5384(v6, v7);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  uint64_t v8 = a3[7];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = sub_24A2A6E10();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  uint64_t v12 = a3[8];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (void *)(a2 + v12);
  uint64_t v15 = sub_24A2A6DC0();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v16 + 48);
  int v18 = v17(v13, 1, v15);
  int v19 = v17(v14, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 32))(v13, v14, v15);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v19)
  {
    (*(void (**)(void *, uint64_t))(v16 + 8))(v13, v15);
LABEL_6:
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749E0);
    memcpy(v13, v14, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v16 + 40))(v13, v14, v15);
LABEL_7:
  uint64_t v21 = a3[9];
  int v22 = (void *)(a1 + v21);
  uint64_t v23 = (void *)(a2 + v21);
  uint64_t v24 = sub_24A2A6DD0();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v25 + 48);
  int v27 = v26(v22, 1, v24);
  int v28 = v26(v23, 1, v24);
  if (!v27)
  {
    if (!v28)
    {
      (*(void (**)(void *, void *, uint64_t))(v25 + 40))(v22, v23, v24);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v25 + 8))(v22, v24);
    goto LABEL_12;
  }
  if (v28)
  {
LABEL_12:
    uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_269779D38);
    memcpy(v22, v23, *(void *)(*(void *)(v29 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v25 + 32))(v22, v23, v24);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  return a1;
}

uint64_t sub_24A27CC9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24A27CCB0);
}

uint64_t sub_24A27CCB0(uint64_t a1, uint64_t a2, int *a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 32);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  uint64_t v8 = sub_24A2A6E10();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a2)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a3[7];
LABEL_9:
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
    return v13(a1 + v11, a2, v9);
  }
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749E0);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a2)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a3[8];
    goto LABEL_9;
  }
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_269779D38);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
  uint64_t v16 = v14;
  uint64_t v17 = a1 + a3[9];

  return v15(v17, a2, v16);
}

uint64_t sub_24A27CE30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24A27CE44);
}

uint64_t sub_24A27CE44(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 32) = (a2 - 1);
    return result;
  }
  uint64_t v8 = sub_24A2A6E10();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[7];
LABEL_7:
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return v13(v5 + v11, a2, a2, v9);
  }
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749E0);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a3)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a4[8];
    goto LABEL_7;
  }
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_269779D38);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
  uint64_t v16 = v14;
  uint64_t v17 = v5 + a4[9];

  return v15(v17, a2, a2, v16);
}

void sub_24A27CFC4()
{
  sub_24A2A6E10();
  if (v0 <= 0x3F)
  {
    sub_24A27D124(319, &qword_26B1749E8, MEMORY[0x263F502F0]);
    if (v1 <= 0x3F)
    {
      sub_24A27D124(319, &qword_269779DB0, MEMORY[0x263F504B8]);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

void sub_24A27D124(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_24A2A7B50();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

ValueMetadata *type metadata accessor for PrivateCloudCompute_ReleaseMetadata.SchemaVersion()
{
  return &type metadata for PrivateCloudCompute_ReleaseMetadata.SchemaVersion;
}

ValueMetadata *type metadata accessor for PrivateCloudCompute_ReleaseMetadata.AssetType()
{
  return &type metadata for PrivateCloudCompute_ReleaseMetadata.AssetType;
}

ValueMetadata *type metadata accessor for PrivateCloudCompute_ReleaseMetadata.FileType()
{
  return &type metadata for PrivateCloudCompute_ReleaseMetadata.FileType;
}

ValueMetadata *type metadata accessor for PrivateCloudCompute_ReleaseMetadata.DigestAlg()
{
  return &type metadata for PrivateCloudCompute_ReleaseMetadata.DigestAlg;
}

void *sub_24A27D1B8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *unint64_t v4 = *a2;
    unint64_t v4 = (void *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(void *)a1 = *a2;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    uint64_t v7 = a2[2];
    unint64_t v8 = a2[3];
    sub_24A1A52B0(v7, v8);
    v4[2] = v7;
    v4[3] = v8;
    uint64_t v9 = *(int *)(a3 + 24);
    uint64_t v10 = (char *)v4 + v9;
    uint64_t v11 = (uint64_t)a2 + v9;
    uint64_t v12 = sub_24A2A6E10();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
  }
  return v4;
}

uint64_t sub_24A27D2B0(uint64_t a1, uint64_t a2)
{
  sub_24A1A5384(*(void *)(a1 + 16), *(void *)(a1 + 24));
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = sub_24A2A6E10();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t sub_24A27D32C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  unint64_t v7 = *(void *)(a2 + 24);
  sub_24A1A52B0(v6, v7);
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = sub_24A2A6E10();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  return a1;
}

uint64_t sub_24A27D3D4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v6;
  uint64_t v7 = a2[2];
  unint64_t v8 = a2[3];
  sub_24A1A52B0(v7, v8);
  uint64_t v9 = *(void *)(a1 + 16);
  unint64_t v10 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = v7;
  *(void *)(a1 + 24) = v8;
  sub_24A1A5384(v9, v10);
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = (uint64_t)a2 + v11;
  uint64_t v14 = sub_24A2A6E10();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 24))(v12, v13, v14);
  return a1;
}

uint64_t sub_24A27D484(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = sub_24A2A6E10();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t sub_24A27D510(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  unint64_t v7 = *(void *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  sub_24A1A5384(v6, v7);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = sub_24A2A6E10();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t sub_24A27D5B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24A27D5C4);
}

uint64_t sub_24A27D5C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 12)
  {
    uint64_t v4 = *(void *)(a1 + 24) >> 60;
    if (((4 * v4) & 0xC) != 0) {
      return 16 - ((4 * v4) & 0xC | (v4 >> 2));
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = sub_24A2A6E10();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_24A27D680(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24A27D694);
}

uint64_t sub_24A27D694(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 12)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
  }
  else
  {
    uint64_t v7 = sub_24A2A6E10();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 24);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_24A27D744()
{
  uint64_t result = sub_24A2A6E10();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *sub_24A27D7E4(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v21 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v21 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(void *)a1 = *a2;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    uint64_t v7 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v7;
    uint64_t v8 = a2[4];
    uint64_t v9 = a2[6];
    *(void *)(a1 + 40) = a2[5];
    *(void *)(a1 + 48) = v9;
    *(unsigned char *)(a1 + 56) = *((unsigned char *)a2 + 56);
    uint64_t v10 = a3[8];
    uint64_t v11 = (char *)(a1 + v10);
    uint64_t v12 = (char *)a2 + v10;
    *(void *)(a1 + 32) = v8;
    uint64_t v13 = sub_24A2A6E10();
    uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v14(v11, v12, v13);
    uint64_t v15 = a3[9];
    uint64_t v16 = (void *)((char *)v4 + v15);
    uint64_t v17 = (uint64_t *)((char *)a2 + v15);
    uint64_t v18 = type metadata accessor for PrivateCloudCompute_ReleaseMetadata.Digest(0);
    uint64_t v19 = *(void *)(v18 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
    {
      uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_269779D70);
      memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
    }
    else
    {
      *uint64_t v16 = *v17;
      *((unsigned char *)v16 + 8) = *((unsigned char *)v17 + 8);
      int v30 = v14;
      uint64_t v22 = v17[2];
      unint64_t v23 = v17[3];
      sub_24A1A52B0(v22, v23);
      v16[2] = v22;
      void v16[3] = v23;
      v30((char *)v16 + *(int *)(v18 + 24), (char *)v17 + *(int *)(v18 + 24), v13);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
    }
    uint64_t v24 = a3[10];
    uint64_t v25 = (char *)v4 + v24;
    uint64_t v26 = (uint64_t *)((char *)a2 + v24);
    unint64_t v27 = v26[1];
    if (v27 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v25 = *(_OWORD *)v26;
    }
    else
    {
      uint64_t v28 = *v26;
      sub_24A1A52B0(*v26, v26[1]);
      *(void *)uint64_t v25 = v28;
      *((void *)v25 + 1) = v27;
    }
  }
  return v4;
}

uint64_t sub_24A27DA54(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[8];
  uint64_t v5 = sub_24A2A6E10();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v6(v4, v5);
  uint64_t v7 = a1 + a2[9];
  uint64_t v8 = type metadata accessor for PrivateCloudCompute_ReleaseMetadata.Digest(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v7, 1, v8);
  if (!result)
  {
    sub_24A1A5384(*(void *)(v7 + 16), *(void *)(v7 + 24));
    uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v6)(v7 + *(int *)(v8 + 24), v5);
  }
  uint64_t v10 = (uint64_t *)(a1 + a2[10]);
  unint64_t v11 = v10[1];
  if (v11 >> 60 != 15)
  {
    uint64_t v12 = *v10;
    return sub_24A1A5384(v12, v11);
  }
  return result;
}

uint64_t sub_24A27DB94(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v8;
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v9 = a3[8];
  uint64_t v10 = (char *)(a1 + v9);
  unint64_t v11 = (char *)(a2 + v9);
  *(void *)(a1 + 32) = v7;
  uint64_t v12 = sub_24A2A6E10();
  uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v13(v10, v11, v12);
  uint64_t v14 = a3[9];
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (void *)(a2 + v14);
  uint64_t v17 = type metadata accessor for PrivateCloudCompute_ReleaseMetadata.Digest(0);
  uint64_t v18 = *(void *)(v17 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
  {
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_269779D70);
    memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    *uint64_t v15 = *v16;
    *((unsigned char *)v15 + 8) = *((unsigned char *)v16 + 8);
    uint64_t v28 = v13;
    uint64_t v20 = v16[2];
    unint64_t v21 = v16[3];
    sub_24A1A52B0(v20, v21);
    v15[2] = v20;
    v15[3] = v21;
    v28((char *)v15 + *(int *)(v17 + 24), (char *)v16 + *(int *)(v17 + 24), v12);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  }
  uint64_t v22 = a3[10];
  uint64_t v23 = a1 + v22;
  uint64_t v24 = (uint64_t *)(a2 + v22);
  unint64_t v25 = v24[1];
  if (v25 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
  }
  else
  {
    uint64_t v26 = *v24;
    sub_24A1A52B0(*v24, v24[1]);
    *(void *)uint64_t v23 = v26;
    *(void *)(v23 + 8) = v25;
  }
  return a1;
}

uint64_t sub_24A27DDB4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v6;
  *(void *)(a1 + 16) = a2[2];
  *(void *)(a1 + 24) = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = a2[4];
  *(void *)(a1 + 40) = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[6];
  *(unsigned char *)(a1 + 56) = *((unsigned char *)a2 + 56);
  *(void *)(a1 + 48) = v7;
  uint64_t v8 = *(int *)(a3 + 32);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = (uint64_t)a2 + v8;
  uint64_t v11 = sub_24A2A6E10();
  uint64_t v39 = *(void *)(v11 - 8);
  uint64_t v40 = v11;
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v39 + 24);
  v12(v9, v10);
  uint64_t v41 = a3;
  uint64_t v13 = *(int *)(a3 + 36);
  uint64_t v14 = a1 + v13;
  uint64_t v15 = (uint64_t *)((char *)a2 + v13);
  uint64_t v16 = type metadata accessor for PrivateCloudCompute_ReleaseMetadata.Digest(0);
  uint64_t v38 = *(void *)(v16 - 8);
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v38 + 48);
  int v18 = v17(v14, 1, v16);
  int v19 = v17((uint64_t)v15, 1, v16);
  if (v18)
  {
    if (!v19)
    {
      uint64_t v20 = *v15;
      *(unsigned char *)(v14 + 8) = *((unsigned char *)v15 + 8);
      *(void *)uint64_t v14 = v20;
      uint64_t v21 = v15[2];
      unint64_t v22 = v15[3];
      sub_24A1A52B0(v21, v22);
      *(void *)(v14 + 16) = v21;
      *(void *)(v14 + 24) = v22;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 16))(v14 + *(int *)(v16 + 24), (uint64_t)v15 + *(int *)(v16 + 24), v40);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v38 + 56))(v14, 0, 1, v16);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v19)
  {
    sub_24A27BA94(v14);
LABEL_6:
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_269779D70);
    memcpy((void *)v14, v15, *(void *)(*(void *)(v23 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v33 = *v15;
  *(unsigned char *)(v14 + 8) = *((unsigned char *)v15 + 8);
  *(void *)uint64_t v14 = v33;
  uint64_t v35 = v15[2];
  unint64_t v34 = v15[3];
  sub_24A1A52B0(v35, v34);
  uint64_t v36 = *(void *)(v14 + 16);
  unint64_t v37 = *(void *)(v14 + 24);
  *(void *)(v14 + 16) = v35;
  *(void *)(v14 + 24) = v34;
  sub_24A1A5384(v36, v37);
  ((void (*)(uint64_t, char *, uint64_t))v12)(v14 + *(int *)(v16 + 24), (char *)v15 + *(int *)(v16 + 24), v40);
LABEL_7:
  uint64_t v24 = *(int *)(v41 + 40);
  unint64_t v25 = (uint64_t *)(a1 + v24);
  uint64_t v26 = (uint64_t *)((char *)a2 + v24);
  unint64_t v27 = *(uint64_t *)((char *)a2 + v24 + 8);
  if (*(void *)(a1 + v24 + 8) >> 60 != 15)
  {
    if (v27 >> 60 != 15)
    {
      uint64_t v29 = *v26;
      sub_24A1A52B0(v29, v27);
      uint64_t v30 = *v25;
      unint64_t v31 = v25[1];
      *unint64_t v25 = v29;
      v25[1] = v27;
      sub_24A1A5384(v30, v31);
      return a1;
    }
    sub_24A1B9174((uint64_t)v25);
    goto LABEL_12;
  }
  if (v27 >> 60 == 15)
  {
LABEL_12:
    *(_OWORD *)unint64_t v25 = *(_OWORD *)v26;
    return a1;
  }
  uint64_t v28 = *v26;
  sub_24A1A52B0(v28, v27);
  *unint64_t v25 = v28;
  v25[1] = v27;
  return a1;
}

uint64_t sub_24A27E0C8(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  long long v6 = *(_OWORD *)(a2 + 16);
  long long v7 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v8 = a3[8];
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 32) = v7;
  uint64_t v11 = sub_24A2A6E10();
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32);
  v12(v9, v10, v11);
  uint64_t v13 = a3[9];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (void *)(a2 + v13);
  uint64_t v16 = type metadata accessor for PrivateCloudCompute_ReleaseMetadata.Digest(0);
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_269779D70);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    void *v14 = *v15;
    *((unsigned char *)v14 + 8) = *((unsigned char *)v15 + 8);
    *((_OWORD *)v14 + 1) = *((_OWORD *)v15 + 1);
    v12((char *)v14 + *(int *)(v16 + 24), (char *)v15 + *(int *)(v16 + 24), v11);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  *(_OWORD *)(a1 + a3[10]) = *(_OWORD *)(a2 + a3[10]);
  return a1;
}

uint64_t sub_24A27E280(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v7;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v8 = *(int *)(a3 + 32);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = sub_24A2A6E10();
  uint64_t v31 = *(void *)(v11 - 8);
  uint64_t v32 = v11;
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v31 + 40);
  v12(v9, v10);
  uint64_t v33 = a3;
  uint64_t v13 = *(int *)(a3 + 36);
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  uint64_t v16 = type metadata accessor for PrivateCloudCompute_ReleaseMetadata.Digest(0);
  uint64_t v30 = *(void *)(v16 - 8);
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v30 + 48);
  int v18 = v17(v14, 1, v16);
  int v19 = v17(v15, 1, v16);
  if (v18)
  {
    if (!v19)
    {
      *(void *)uint64_t v14 = *(void *)v15;
      *(unsigned char *)(v14 + 8) = *(unsigned char *)(v15 + 8);
      *(_OWORD *)(v14 + 16) = *(_OWORD *)(v15 + 16);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 32))(v14 + *(int *)(v16 + 24), v15 + *(int *)(v16 + 24), v32);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v30 + 56))(v14, 0, 1, v16);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v19)
  {
    sub_24A27BA94(v14);
LABEL_6:
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_269779D70);
    memcpy((void *)v14, (const void *)v15, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  *(void *)uint64_t v14 = *(void *)v15;
  *(unsigned char *)(v14 + 8) = *(unsigned char *)(v15 + 8);
  uint64_t v28 = *(void *)(v14 + 16);
  unint64_t v29 = *(void *)(v14 + 24);
  *(_OWORD *)(v14 + 16) = *(_OWORD *)(v15 + 16);
  sub_24A1A5384(v28, v29);
  ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v14 + *(int *)(v16 + 24), v15 + *(int *)(v16 + 24), v32);
LABEL_7:
  uint64_t v21 = *(int *)(v33 + 40);
  unint64_t v22 = (uint64_t *)(a1 + v21);
  uint64_t v23 = (uint64_t *)(a2 + v21);
  unint64_t v24 = *(void *)(a1 + v21 + 8);
  if (v24 >> 60 != 15)
  {
    unint64_t v25 = v23[1];
    if (v25 >> 60 != 15)
    {
      uint64_t v26 = *v22;
      *unint64_t v22 = *v23;
      v22[1] = v25;
      sub_24A1A5384(v26, v24);
      return a1;
    }
    sub_24A1B9174((uint64_t)v22);
  }
  *(_OWORD *)unint64_t v22 = *(_OWORD *)v23;
  return a1;
}

uint64_t sub_24A27E538(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24A27E54C);
}

uint64_t sub_24A27E54C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_24A2A6E10();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 32);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_269779D70);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 36);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t sub_24A27E67C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24A27E690);
}

uint64_t sub_24A27E690(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 24) = (a2 - 1);
  }
  else
  {
    uint64_t v8 = sub_24A2A6E10();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 32);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_269779D70);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 36);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

void sub_24A27E7C0()
{
  sub_24A2A6E10();
  if (v0 <= 0x3F)
  {
    sub_24A27D124(319, &qword_269779DD8, (void (*)(uint64_t))type metadata accessor for PrivateCloudCompute_ReleaseMetadata.Digest);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

unint64_t sub_24A27E8C8()
{
  unint64_t result = qword_269779DE0;
  if (!qword_269779DE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269779DE0);
  }
  return result;
}

uint64_t sub_24A27E91C()
{
  return sub_24A231268(&qword_269779DE8, &qword_269779DF0);
}

unint64_t sub_24A27E948()
{
  unint64_t result = qword_269779DF8;
  if (!qword_269779DF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269779DF8);
  }
  return result;
}

uint64_t sub_24A27E99C()
{
  return sub_24A231268(&qword_269779E00, &qword_269779E08);
}

unint64_t sub_24A27E9C8()
{
  unint64_t result = qword_269779E10;
  if (!qword_269779E10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269779E10);
  }
  return result;
}

uint64_t sub_24A27EA1C()
{
  return sub_24A231268(&qword_269779E18, &qword_269779E20);
}

unint64_t sub_24A27EA48()
{
  unint64_t result = qword_269779E28;
  if (!qword_269779E28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269779E28);
  }
  return result;
}

uint64_t sub_24A27EA9C()
{
  return sub_24A231268(&qword_269779E30, &qword_269779E38);
}

unint64_t sub_24A27EAC8()
{
  unint64_t result = qword_269779E40;
  if (!qword_269779E40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269779E40);
  }
  return result;
}

uint64_t sub_24A27EB1C()
{
  return sub_24A231268(&qword_269779E48, &qword_269779E50);
}

unint64_t sub_24A27EB48()
{
  unint64_t result = qword_269779E58;
  if (!qword_269779E58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269779E58);
  }
  return result;
}

unint64_t sub_24A27EBA0()
{
  unint64_t result = qword_269779E60;
  if (!qword_269779E60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269779E60);
  }
  return result;
}

unint64_t sub_24A27EBF8()
{
  unint64_t result = qword_269779E68;
  if (!qword_269779E68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269779E68);
  }
  return result;
}

unint64_t sub_24A27EC50()
{
  unint64_t result = qword_269779E70;
  if (!qword_269779E70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269779E70);
  }
  return result;
}

unint64_t sub_24A27ECA8()
{
  unint64_t result = qword_269779E78;
  if (!qword_269779E78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269779E78);
  }
  return result;
}

unint64_t sub_24A27ED00()
{
  unint64_t result = qword_269779E80;
  if (!qword_269779E80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269779E80);
  }
  return result;
}

unint64_t sub_24A27ED58()
{
  unint64_t result = qword_269779E88;
  if (!qword_269779E88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269779E88);
  }
  return result;
}

unint64_t sub_24A27EDB0()
{
  unint64_t result = qword_269779E90;
  if (!qword_269779E90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269779E90);
  }
  return result;
}

unint64_t sub_24A27EE08()
{
  unint64_t result = qword_269779E98;
  if (!qword_269779E98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269779E98);
  }
  return result;
}

unint64_t sub_24A27EE60()
{
  unint64_t result = qword_269779EA0;
  if (!qword_269779EA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269779EA0);
  }
  return result;
}

uint64_t sub_24A27EEB4(uint64_t result)
{
  switch(result)
  {
      unint64_t result = 8;
      break;
    case 'a':
      unint64_t result = 9;
      break;
    case 'b':
      unint64_t result = 10;
      break;
    case 'c':
      unint64_t result = 11;
      break;
    default:
      return result;
  }
  return result;
}

CloudAttestation::EnsembleMembersPolicy __swiftcall EnsembleMembersPolicy.init(required:)(Swift::Bool required)
{
  *(unsigned char *)uint64_t v1 = required;
  *(void *)(v1 + 8) = 0;
  *(unsigned char *)(v1 + 16) = 0;
  result.required = required;
  return result;
}

uint64_t sub_24A27F0E4()
{
  uint64_t v0 = sub_24A2A7160();
  __swift_allocate_value_buffer(v0, qword_26977A8E0);
  __swift_project_value_buffer(v0, (uint64_t)qword_26977A8E0);
  return sub_24A2A7150();
}

uint64_t EnsembleMembersPolicy.evaluate(bundle:context:)(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(v3 + 32) = *(unsigned char *)v2;
  uint64_t v4 = *(void *)(v2 + 8);
  *(void *)(v3 + 16) = a2;
  *(void *)(v3 + 24) = v4;
  *(unsigned char *)(v3 + 33) = *(unsigned char *)(v2 + 16);
  return MEMORY[0x270FA2498](sub_24A27F19C, 0, 0);
}

uint64_t sub_24A27F19C()
{
  uint64_t v22 = v0;
  if (*(void *)(v0 + 24))
  {
    char v1 = *(unsigned char *)(v0 + 33);
    uint64_t v2 = *(void *)(v0 + 24);
  }
  else
  {
    AttestationPolicyContext.validatedDarwinInit.getter((uint64_t)&v20);
    uint64_t v2 = v20;
    if (!v20)
    {
      if (*(unsigned char *)(v0 + 32) == 1)
      {
        if (qword_269778610 != -1) {
          swift_once();
        }
        uint64_t v13 = sub_24A2A7160();
        __swift_project_value_buffer(v13, (uint64_t)qword_26977A8E0);
        uint64_t v5 = sub_24A2A7140();
        os_log_type_t v14 = sub_24A2A7B30();
        if (!os_log_type_enabled(v5, v14))
        {
          char v8 = 0;
          goto LABEL_30;
        }
        uint64_t v7 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v7 = 0;
        _os_log_impl(&dword_24A19F000, v5, v14, "Validated darwin-init not available", v7, 2u);
        char v8 = 0;
        goto LABEL_20;
      }
      if (qword_269778610 != -1) {
        swift_once();
      }
      uint64_t v15 = sub_24A2A7160();
      __swift_project_value_buffer(v15, (uint64_t)qword_26977A8E0);
      uint64_t v10 = sub_24A2A7140();
      os_log_type_t v11 = sub_24A2A7B30();
      if (!os_log_type_enabled(v10, v11)) {
        goto LABEL_27;
      }
      uint64_t v12 = "Validated darwin-init not available, failing open";
      goto LABEL_26;
    }
    char v1 = v21;
  }
  uint64_t v20 = v2;
  char v21 = v1;
  swift_bridgeObjectRetain();
  uint64_t v3 = DarwinInit.ensembleCertificateFingerprints.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v3)
  {
LABEL_28:
    uint64_t v17 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_31;
  }
  if (*(unsigned char *)(v0 + 32) != 1)
  {
    if (qword_269778610 != -1) {
      swift_once();
    }
    uint64_t v9 = sub_24A2A7160();
    __swift_project_value_buffer(v9, (uint64_t)qword_26977A8E0);
    uint64_t v10 = sub_24A2A7140();
    os_log_type_t v11 = sub_24A2A7B30();
    if (!os_log_type_enabled(v10, v11)) {
      goto LABEL_27;
    }
    uint64_t v12 = "Ensemble member fingerprints not found in secure-config, failing open";
LABEL_26:
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v16 = 0;
    _os_log_impl(&dword_24A19F000, v10, v11, v12, v16, 2u);
    MEMORY[0x24C5C00A0](v16, -1, -1);
LABEL_27:

    goto LABEL_28;
  }
  if (qword_269778610 != -1) {
    swift_once();
  }
  uint64_t v4 = sub_24A2A7160();
  __swift_project_value_buffer(v4, (uint64_t)qword_26977A8E0);
  uint64_t v5 = sub_24A2A7140();
  os_log_type_t v6 = sub_24A2A7B30();
  if (!os_log_type_enabled(v5, v6))
  {
    char v8 = 1;
    goto LABEL_30;
  }
  uint64_t v7 = (uint8_t *)swift_slowAlloc();
  *(_WORD *)uint64_t v7 = 0;
  _os_log_impl(&dword_24A19F000, v5, v6, "Ensemble member fingerprints not found in secure-config", v7, 2u);
  char v8 = 1;
LABEL_20:
  MEMORY[0x24C5C00A0](v7, -1, -1);
LABEL_30:

  sub_24A27F60C();
  swift_allocError();
  *int v18 = v8;
  swift_willThrow();
  uint64_t v17 = *(uint64_t (**)(void))(v0 + 8);
LABEL_31:
  return v17();
}

uint64_t sub_24A27F54C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = swift_task_alloc();
  *(void *)(v3 + 16) = v5;
  *(void *)uint64_t v5 = v3;
  *(void *)(v5 + 8) = sub_24A1C50FC;
  *(void *)(v5 + 16) = a2;
  *(unsigned char *)(v5 + 32) = *(unsigned char *)v2;
  *(void *)(v5 + 24) = *(void *)(v2 + 8);
  *(unsigned char *)(v5 + 33) = *(unsigned char *)(v2 + 16);
  return MEMORY[0x270FA2498](sub_24A27F19C, 0, 0);
}

unint64_t sub_24A27F60C()
{
  unint64_t result = qword_269779EB0;
  if (!qword_269779EB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269779EB0);
  }
  return result;
}

uint64_t sub_24A27F664(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for EnsembleMembersPolicy(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for EnsembleMembersPolicy(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for EnsembleMembersPolicy(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for EnsembleMembersPolicy(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EnsembleMembersPolicy()
{
  return &type metadata for EnsembleMembersPolicy;
}

unsigned char *storeEnumTagSinglePayload for EnsembleMembersPolicy.Error(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24A27F8D0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EnsembleMembersPolicy.Error()
{
  return &type metadata for EnsembleMembersPolicy.Error;
}

unint64_t sub_24A27F90C()
{
  unint64_t result = qword_269779EC0;
  if (!qword_269779EC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269779EC0);
  }
  return result;
}

uint64_t SEP.SealData.init(for:data:)@<X0>(uint64_t a1@<X1>, unint64_t a2@<X2>, uint64_t a3@<X8>)
{
  unint64_t v6 = a2 >> 62;
  sub_24A1A52B0(a1, a2);
  sub_24A1A52B0(a1, a2);
  char v7 = sub_24A1B7D80(a1, a2, a1, a2);
  sub_24A1A5384(a1, a2);
  if (v7)
  {
    uint64_t v8 = 0;
    switch((int)v6)
    {
      case 1:
        if (__OFSUB__(HIDWORD(a1), a1))
        {
          __break(1u);
LABEL_26:
          __break(1u);
          JUMPOUT(0x24A27FD10);
        }
        uint64_t v8 = HIDWORD(a1) - (int)a1;
LABEL_7:
        if (qword_26B1748C8 != -1) {
          swift_once();
        }
        if (v8 != qword_26B1769B0) {
          goto LABEL_11;
        }
        sub_24A27FE3C(a1, a2, (unint64_t *)&v22);
        sub_24A1A5384(a1, a2);
        uint64_t result = sub_24A1A5384(a1, a2);
        uint64_t v12 = v23;
        *(_OWORD *)a3 = v22;
        break;
      case 2:
        uint64_t v10 = *(void *)(a1 + 16);
        uint64_t v9 = *(void *)(a1 + 24);
        uint64_t v8 = v9 - v10;
        if (!__OFSUB__(v9, v10)) {
          goto LABEL_7;
        }
        goto LABEL_26;
      case 3:
        goto LABEL_7;
      default:
        uint64_t v8 = BYTE6(a2);
        goto LABEL_7;
    }
    goto LABEL_24;
  }
LABEL_11:
  sub_24A1A52B0(a1, a2);
  char v13 = sub_24A1B7D80(a1, a2, a1, a2);
  sub_24A1A5384(a1, a2);
  sub_24A1A5384(a1, a2);
  if (v13)
  {
    switch((int)v6)
    {
      case 1:
        if ((int)a1 != a1 >> 32) {
          goto LABEL_14;
        }
        break;
      case 2:
        if (*(void *)(a1 + 16) != *(void *)(a1 + 24)) {
          goto LABEL_14;
        }
        break;
      case 3:
        break;
      default:
        if ((a2 & 0xFF000000000000) != 0) {
          goto LABEL_14;
        }
        break;
    }
    uint64_t result = sub_24A1A5384(a1, a2);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    uint64_t v12 = 0x3000000000000000;
LABEL_24:
    *(void *)(a3 + 16) = v12;
    return result;
  }
LABEL_14:
  if (qword_269778618 != -1) {
    swift_once();
  }
  uint64_t v14 = sub_24A2A7160();
  __swift_project_value_buffer(v14, (uint64_t)qword_26977A8F8);
  sub_24A1A52B0(a1, a2);
  sub_24A1A52B0(a1, a2);
  uint64_t v15 = sub_24A2A7140();
  os_log_type_t v16 = sub_24A2A7B30();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(void *)&long long v22 = v18;
    *(_DWORD *)uint64_t v17 = 136446210;
    uint64_t v19 = sub_24A2A6AB0();
    uint64_t v24 = sub_24A1C52A8(v19, v20, (uint64_t *)&v22);
    sub_24A2A7B70();
    swift_bridgeObjectRelease();
    sub_24A1A5384(a1, a2);
    sub_24A1A5384(a1, a2);
    _os_log_impl(&dword_24A19F000, v15, v16, "unknown SealDataA format: %{public}s", v17, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24C5C00A0](v18, -1, -1);
    MEMORY[0x24C5C00A0](v17, -1, -1);
  }
  else
  {
    sub_24A1A5384(a1, a2);
    sub_24A1A5384(a1, a2);
  }

  uint64_t result = sub_24A1B555C(a1, a2);
  *(void *)a3 = result;
  *(void *)(a3 + 8) = v21;
  *(void *)(a3 + 16) = 0;
  return result;
}

uint64_t SEP.SealData.digest.getter()
{
  uint64_t v1 = v0[2];
  if ((v1 & 0x2000000000000000) != 0) {
    uint64_t v2 = v0[1];
  }
  else {
    uint64_t v2 = *v0;
  }
  sub_24A280340(*v0, v0[1], v1, (uint64_t (*)(void))sub_24A1A52B0);
  return v2;
}

uint64_t sub_24A27FD84()
{
  uint64_t v0 = sub_24A2A7160();
  __swift_allocate_value_buffer(v0, qword_26977A8F8);
  __swift_project_value_buffer(v0, (uint64_t)qword_26977A8F8);
  return sub_24A2A7150();
}

double SEP.SealData.init(for:data:)@<D0>(uint64_t a1@<X1>, unint64_t a2@<X2>, uint64_t a3@<X8>)
{
  SEP.SealData.init(for:data:)(a1, a2, (uint64_t)&v6);
  uint64_t v4 = v7;
  double result = *(double *)&v6;
  *(_OWORD *)a3 = v6;
  *(void *)(a3 + 16) = v4;
  return result;
}

uint64_t sub_24A27FE3C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v3 = a2 >> 62;
  unsigned __int8 v4 = BYTE6(a2);
  uint64_t v7 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_17;
      }
      uint64_t v7 = HIDWORD(a1) - (int)a1;
LABEL_6:
      if (qword_26B1748C8 != -1) {
        swift_once();
      }
      if (v7 != qword_26B1769B0)
      {
        __break(1u);
LABEL_17:
        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
        JUMPOUT(0x24A27FFF0);
      }
      unsigned __int8 v10 = sub_24A2A6B30();
      unsigned __int8 v11 = sub_24A2A6B30();
      unsigned __int8 v12 = sub_24A2A6B30();
      unsigned __int8 v13 = sub_24A2A6B30();
      switch((int)v3)
      {
        case 1:
          uint64_t v14 = (int)a1;
          uint64_t v15 = a1 >> 32;
          goto LABEL_13;
        case 2:
          uint64_t v14 = *(void *)(a1 + 16);
          uint64_t v15 = *(void *)(a1 + 24);
          goto LABEL_13;
        case 3:
          goto LABEL_19;
        default:
          uint64_t v14 = 0;
          uint64_t v15 = v4;
LABEL_13:
          if (v15 < 4 || v15 < v14) {
            goto LABEL_19;
          }
          unint64_t v16 = ((unint64_t)v10 << 24) | ((unint64_t)v11 << 16) | ((unint64_t)v12 << 8) | v13;
          uint64_t v17 = sub_24A2A6A80();
          uint64_t result = sub_24A1B555C(v17, v18);
          *a3 = v16;
          a3[1] = result;
          a3[2] = v20 | 0x2000000000000000;
          return result;
      }
    case 2uLL:
      uint64_t v9 = *(void *)(a1 + 16);
      uint64_t v8 = *(void *)(a1 + 24);
      uint64_t v7 = v8 - v9;
      if (!__OFSUB__(v8, v9)) {
        goto LABEL_6;
      }
      goto LABEL_18;
    case 3uLL:
      goto LABEL_6;
    default:
      uint64_t v7 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_24A280010()
{
  uint64_t result = sub_24A2A71C0();
  if (__OFADD__(result, 4)) {
    __break(1u);
  }
  else {
    qword_26B1769B0 = result + 4;
  }
  return result;
}

uint64_t SEP.SealData.serializedBytes.getter()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  uint64_t v3 = v0[2];
  if ((v3 & 0x2000000000000000) != 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_26B174B98);
    uint64_t v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = xmmword_24A2A8A90;
    *(unsigned char *)(v5 + 32) = BYTE3(v1);
    *(unsigned char *)(v5 + 33) = BYTE2(v1);
    *(unsigned char *)(v5 + 34) = BYTE1(v1);
    *(unsigned char *)(v5 + 35) = v1;
    sub_24A280340(v1, v2, v3, (uint64_t (*)(void))sub_24A1A52B0);
    uint64_t v6 = sub_24A1B9574(v5);
    unint64_t v8 = v7;
    swift_bridgeObjectRelease();
    sub_24A280340(v1, v2, v3, (uint64_t (*)(void))sub_24A1A52B0);
    sub_24A1A52B0(v6, v8);
    sub_24A252FC8(v2, v3 & 0xDFFFFFFFFFFFFFFFLL);
    sub_24A280340(v1, v2, v3, (uint64_t (*)(void))sub_24A1A5384);
    sub_24A280340(v1, v2, v3, (uint64_t (*)(void))sub_24A1A5384);
    sub_24A1A5384(v6, v8);
    return v6;
  }
  else
  {
    sub_24A1A52B0(*v0, v0[1]);
    return sub_24A1B555C(v1, v2);
  }
}

uint64_t _s16CloudAttestation3SEPO8SealDataO2eeoiySbAE_AEtFZ_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = a1[2];
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = a2[2];
  if ((v4 & 0x2000000000000000) != 0)
  {
    if ((v7 & 0x2000000000000000) != 0 && v2 == v5)
    {
      sub_24A280340(*a2, a2[1], v7, (uint64_t (*)(void))sub_24A1A52B0);
      sub_24A280340(v2, v3, v4, (uint64_t (*)(void))sub_24A1A52B0);
      uint64_t v8 = v3;
      unint64_t v9 = v4 & 0xDFFFFFFFFFFFFFFFLL;
      uint64_t v10 = v6;
      unint64_t v11 = v7 & 0xDFFFFFFFFFFFFFFFLL;
      goto LABEL_7;
    }
LABEL_8:
    sub_24A280340(*a2, a2[1], v7, (uint64_t (*)(void))sub_24A1A52B0);
    sub_24A280340(v2, v3, v4, (uint64_t (*)(void))sub_24A1A52B0);
    char v12 = 0;
    goto LABEL_9;
  }
  if ((v7 & 0x2000000000000000) != 0) {
    goto LABEL_8;
  }
  sub_24A280340(*a2, a2[1], v7, (uint64_t (*)(void))sub_24A1A52B0);
  sub_24A280340(v2, v3, v4, (uint64_t (*)(void))sub_24A1A52B0);
  uint64_t v8 = v2;
  unint64_t v9 = v3;
  uint64_t v10 = v5;
  unint64_t v11 = v6;
LABEL_7:
  char v12 = sub_24A1B7D80(v8, v9, v10, v11);
LABEL_9:
  sub_24A280340(v2, v3, v4, (uint64_t (*)(void))sub_24A1A5384);
  sub_24A280340(v5, v6, v7, (uint64_t (*)(void))sub_24A1A5384);
  return v12 & 1;
}

uint64_t sub_24A280340(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  if ((a3 & 0x2000000000000000) != 0) {
    return ((uint64_t (*)(uint64_t, unint64_t))a4)(a2, a3 & 0xDFFFFFFFFFFFFFFFLL);
  }
  else {
    return a4();
  }
}

uint64_t _s8SealDataOwxx(uint64_t *a1)
{
  return sub_24A280340(*a1, a1[1], a1[2], (uint64_t (*)(void))sub_24A1A5384);
}

uint64_t *_s8SealDataOwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  sub_24A280340(*a2, v4, v5, (uint64_t (*)(void))sub_24A1A52B0);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  return a1;
}

uint64_t *_s8SealDataOwca(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  sub_24A280340(*a2, v4, v5, (uint64_t (*)(void))sub_24A1A52B0);
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  uint64_t v8 = a1[2];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  sub_24A280340(v6, v7, v8, (uint64_t (*)(void))sub_24A1A5384);
  return a1;
}

uint64_t *_s8SealDataOwta(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v5 = a1[2];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = v3;
  sub_24A280340(v4, v6, v5, (uint64_t (*)(void))sub_24A1A5384);
  return a1;
}

uint64_t _s8SealDataOwet(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 3 && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 3);
  }
  unsigned int v3 = ((2 * ((*(void *)(a1 + 16) & 0x1000000000000000) != 0)) | ((*(void *)(a1 + 16) >> 60) >> 1) & 1) ^ 3;
  if (v3 >= 2) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t _s8SealDataOwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 2)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 3;
    if (a3 >= 3) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 3) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2)
    {
      *(void *)uint64_t result = 0;
      *(void *)(result + 8) = 0;
      *(void *)(result + 16) = (unint64_t)((2 * (a2 & 1)) | 1) << 60;
    }
  }
  return result;
}

uint64_t sub_24A280578(uint64_t a1)
{
  return (*(void *)(a1 + 16) >> 61) & 1;
}

uint64_t sub_24A280584(uint64_t result)
{
  *(void *)(result + 16) &= ~0x2000000000000000uLL;
  return result;
}

uint64_t sub_24A280594(uint64_t result, char a2)
{
  *(void *)(result + 16) = *(void *)(result + 16) & 0xCFFFFFFFFFFFFFFFLL | ((unint64_t)(a2 & 1) << 61);
  return result;
}

ValueMetadata *type metadata accessor for SEP.SealData()
{
  return &type metadata for SEP.SealData;
}

char *_s5ErrorOwCP(char *a1, char **a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    unint64_t v9 = *a2;
    *(void *)a1 = *a2;
    a1 = &v9[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v10 = *a2;
      unint64_t v11 = v10;
      *(void *)a1 = v10;
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      uint64_t v8 = sub_24A2A7580();
      (*(void (**)(char *, char **, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

void _s5ErrorOwxx(void **a1)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    int v5 = *a1;
  }
  else if (!EnumCaseMultiPayload)
  {
    uint64_t v3 = sub_24A2A7580();
    uint64_t v4 = *(void (**)(void **, uint64_t))(*(void *)(v3 - 8) + 8);
    v4(a1, v3);
  }
}

void *_s5ErrorOwcp(void *a1, void **a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v8 = *a2;
    id v9 = v8;
    *a1 = v8;
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v7 = sub_24A2A7580();
    (*(void (**)(void *, void **, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void **_s5ErrorOwca(void **a1, void **a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_24A280950((uint64_t)a1);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v8 = *a2;
      id v9 = v8;
      *a1 = v8;
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v7 = sub_24A2A7580();
      (*(void (**)(void **, void **, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t sub_24A280950(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ProvisioningCertificate.Error();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for ProvisioningCertificate.Error()
{
  uint64_t result = qword_269779EC8;
  if (!qword_269779EC8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void *_s5ErrorOwtk(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v6 = sub_24A2A7580();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *_s5ErrorOwta(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_24A280950((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v6 = sub_24A2A7580();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t sub_24A280B70()
{
  uint64_t result = sub_24A2A7580();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t sub_24A280C00(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_24A2A6DC0();
  uint64_t v87 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  char v85 = (char *)&v78 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749E0);
  uint64_t v8 = MEMORY[0x270FA5388](v7 - 8);
  uint64_t v84 = (uint64_t)&v78 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v86 = (uint64_t)&v78 - v10;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174880);
  uint64_t v12 = MEMORY[0x270FA5388](v11 - 8);
  uint64_t v88 = (uint64_t)&v78 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v89 = (uint64_t)&v78 - v15;
  MEMORY[0x270FA5388](v14);
  os_log_type_t v90 = (char *)&v78 - v16;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174800);
  uint64_t v18 = MEMORY[0x270FA5388](v17 - 8);
  uint64_t v91 = (uint64_t)&v78 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = MEMORY[0x270FA5388](v18);
  long long v22 = (char *)&v78 - v21;
  MEMORY[0x270FA5388](v20);
  uint64_t v92 = (unint64_t *)((char *)&v78 - v23);
  uint64_t v93 = __swift_instantiateConcreteTypeFromMangledName(&qword_26977A040);
  uint64_t v24 = *(void *)(v93 - 8);
  MEMORY[0x270FA5388](v93);
  uint64_t v26 = (char *)&v78 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24A286DF4();
  unint64_t v27 = v3;
  sub_24A2A7F80();
  uint64_t v28 = v3[4];
  if (*(void *)(v28 + 16)) {
    swift_bridgeObjectRetain();
  }
  else {
    uint64_t v28 = 0;
  }
  uint64_t v29 = v93;
  uint64_t v94 = v28;
  char v96 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_269779FE8);
  sub_24A286BDC();
  sub_24A2A7DC0();
  if (v2)
  {
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v26, v29);
  }
  else
  {
    uint64_t v82 = v5;
    uint64_t v83 = v24;
    swift_bridgeObjectRelease();
    uint64_t v31 = *v27;
    unint64_t v32 = v27[1];
    unint64_t v33 = 0xF000000000000000;
    uint64_t v34 = 0;
    switch(v32 >> 62)
    {
      case 1uLL:
        if ((int)v31 == v31 >> 32) {
          goto LABEL_12;
        }
        goto LABEL_8;
      case 2uLL:
        if (*(void *)(v31 + 16) == *(void *)(v31 + 24)) {
          goto LABEL_12;
        }
        goto LABEL_8;
      case 3uLL:
        goto LABEL_13;
      default:
        if ((v32 & 0xFF000000000000) != 0)
        {
LABEL_8:
          sub_24A1A52B0(*v27, v27[1]);
          uint64_t v34 = v31;
          unint64_t v33 = v32;
        }
        else
        {
LABEL_12:
          uint64_t v34 = 0;
        }
LABEL_13:
        uint64_t v94 = v34;
        unint64_t v95 = v33;
        char v96 = 1;
        sub_24A241004();
        sub_24A2A7DC0();
        sub_24A1B7B78(v34, v33);
        uint64_t v81 = v27;
        uint64_t v35 = v27[2];
        unint64_t v36 = v27[3];
        unint64_t v37 = 0xF000000000000000;
        uint64_t v38 = 0;
        switch(v36 >> 62)
        {
          case 1uLL:
            if ((int)v35 == v35 >> 32) {
              goto LABEL_19;
            }
            goto LABEL_15;
          case 2uLL:
            if (*(void *)(v35 + 16) == *(void *)(v35 + 24)) {
              goto LABEL_19;
            }
            goto LABEL_15;
          case 3uLL:
            goto LABEL_20;
          default:
            if ((v36 & 0xFF000000000000) != 0)
            {
LABEL_15:
              sub_24A1A52B0(v35, v36);
              uint64_t v38 = v35;
              unint64_t v37 = v36;
            }
            else
            {
LABEL_19:
              uint64_t v38 = 0;
            }
LABEL_20:
            uint64_t v94 = v38;
            unint64_t v95 = v37;
            char v96 = 2;
            sub_24A2A7DC0();
            sub_24A1B7B78(v38, v37);
            uint64_t v80 = (int *)type metadata accessor for Proto_AttestationBundle(0);
            uint64_t v79 = (uint64_t)v81 + v80[8];
            sub_24A1B2CAC(v79, (uint64_t)v22, &qword_26B174800);
            uint64_t v39 = type metadata accessor for Proto_SealedHashLedger(0);
            uint64_t v40 = *(void *)(v39 - 8);
            uint64_t v41 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v40 + 48);
            uint64_t v42 = 1;
            int v43 = v41(v22, 1, v39);
            uint64_t v44 = (uint64_t)v22;
            uint64_t v45 = v39;
            sub_24A1B2D10(v44, &qword_26B174800);
            uint64_t v46 = v92;
            if (v43 != 1)
            {
              uint64_t v47 = v91;
              sub_24A1B2CAC(v79, v91, &qword_26B174800);
              if (v41((char *)v47, 1, v45) == 1)
              {
                *uint64_t v46 = sub_24A1BBEA8(MEMORY[0x263F8EE78]);
                sub_24A2A6E00();
                sub_24A1B2D10(v47, &qword_26B174800);
              }
              else
              {
                sub_24A286EDC(v47, (uint64_t)v46, type metadata accessor for Proto_SealedHashLedger);
              }
              uint64_t v42 = 0;
            }
            (*(void (**)(unint64_t *, uint64_t, uint64_t, uint64_t))(v40 + 56))(v46, v42, 1, v45);
            LOBYTE(v94) = 3;
            sub_24A286E48(&qword_26977A050, (void (*)(uint64_t))type metadata accessor for Proto_SealedHashLedger);
            sub_24A2A7DC0();
            sub_24A1B2D10((uint64_t)v46, &qword_26B174800);
            uint64_t v92 = (unint64_t *)((char *)v81 + v80[10]);
            uint64_t v48 = v89;
            sub_24A1B2CAC((uint64_t)v92, v89, &qword_26B174880);
            uint64_t v49 = type metadata accessor for Proto_TransparencyProofs(0);
            uint64_t v50 = *(void *)(v49 - 8);
            uint64_t v51 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v50 + 48);
            uint64_t v52 = 1;
            int v53 = v51(v48, 1, v49);
            sub_24A1B2D10(v48, &qword_26B174880);
            BOOL v54 = v53 == 1;
            uint64_t v55 = (uint64_t)v90;
            if (!v54)
            {
              uint64_t v56 = v88;
              sub_24A1B2CAC((uint64_t)v92, v88, &qword_26B174880);
              if (v51(v56, 1, v49) == 1)
              {
                sub_24A2A6E00();
                uint64_t v57 = v55 + *(int *)(v49 + 20);
                uint64_t v58 = type metadata accessor for ATLogProofs(0);
                (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v58 - 8) + 56))(v57, 1, 1, v58);
                sub_24A1B2D10(v56, &qword_26B174880);
              }
              else
              {
                sub_24A286EDC(v56, v55, type metadata accessor for Proto_TransparencyProofs);
              }
              uint64_t v52 = 0;
            }
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v50 + 56))(v55, v52, 1, v49);
            LOBYTE(v94) = 4;
            sub_24A286E48(&qword_26977A058, (void (*)(uint64_t))type metadata accessor for Proto_TransparencyProofs);
            sub_24A2A7DC0();
            sub_24A1B2D10(v55, &qword_26B174880);
            uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B173100);
            uint64_t v92 = (unint64_t *)&v78;
            MEMORY[0x270FA5388](v59 - 8);
            uint64_t v91 = (uint64_t)&v78 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0);
            uint64_t v61 = (uint64_t)v81 + v80[9];
            uint64_t v62 = v86;
            sub_24A1B2CAC(v61, v86, &qword_26B1749E0);
            uint64_t v63 = v87;
            uint64_t v64 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v87 + 48);
            uint64_t v65 = v82;
            int v66 = v64(v62, 1, v82);
            sub_24A1B2D10(v62, &qword_26B1749E0);
            if (v66 == 1)
            {
              uint64_t v67 = sub_24A2A6BC0();
              uint64_t v68 = v91;
              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v67 - 8) + 56))(v91, 1, 1, v67);
              uint64_t v69 = v83;
              uint64_t v70 = v93;
            }
            else
            {
              uint64_t v71 = v61;
              uint64_t v72 = v84;
              sub_24A1B2CAC(v71, v84, &qword_26B1749E0);
              int v73 = v64(v72, 1, v65);
              uint64_t v69 = v83;
              uint64_t v74 = v65;
              uint64_t v75 = v72;
              uint64_t v76 = v85;
              uint64_t v70 = v93;
              uint64_t v68 = v91;
              if (v73 == 1)
              {
                sub_24A2A6DB0();
                sub_24A1B2D10(v75, &qword_26B1749E0);
              }
              else
              {
                (*(void (**)(char *, uint64_t, uint64_t))(v63 + 32))(v85, v75, v74);
              }
              sub_24A2A6D90();
              (*(void (**)(char *, uint64_t))(v63 + 8))(v76, v74);
              uint64_t v77 = sub_24A2A6BC0();
              (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v77 - 8) + 56))(v68, 0, 1, v77);
            }
            LOBYTE(v94) = 5;
            sub_24A2A6BC0();
            sub_24A286E90();
            sub_24A2A7DC0();
            sub_24A1B2D10(v68, &qword_26B173100);
            uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v69 + 8))(v26, v70);
            break;
        }
        break;
    }
  }
  return result;
}

uint64_t sub_24A2817C4()
{
  if (swift_dynamicCastMetatype()) {
    return 1;
  }
  sub_24A2A7390();
  return 2 * (swift_dynamicCastMetatype() != 0);
}

unint64_t sub_24A281824(char a1)
{
  unint64_t result = 0xD00000000000001CLL;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x7365747441706573;
      break;
    case 2:
      unint64_t result = 0x74656B6369547061;
      break;
    case 3:
      unint64_t result = 0x614864656C616573;
      break;
    case 4:
      unint64_t result = 0xD000000000000012;
      break;
    case 5:
      unint64_t result = 0x726970784579656BLL;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_24A281924()
{
  return sub_24A281824(*v0);
}

uint64_t sub_24A28192C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_24A288268(a1, a2);
  *a3 = result;
  return result;
}

void sub_24A281954(unsigned char *a1@<X8>)
{
  *a1 = 6;
}

uint64_t sub_24A281960(uint64_t a1)
{
  unint64_t v2 = sub_24A286DF4();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A28199C(uint64_t a1)
{
  unint64_t v2 = sub_24A286DF4();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_24A2819D8(void *a1)
{
  unint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_269779ED8);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24A2865D4();
  sub_24A2A7F80();
  uint64_t v8 = *v2;
  if (*(void *)(v8 + 16)) {
    swift_bridgeObjectRetain();
  }
  else {
    uint64_t v8 = 0;
  }
  v10[1] = v8;
  __swift_instantiateConcreteTypeFromMangledName(&qword_269779EE8);
  sub_24A286628();
  sub_24A2A7DC0();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_24A281B54()
{
  return 0x73746F6C73;
}

uint64_t sub_24A281B68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x73746F6C73 && a2 == 0xE500000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = sub_24A2A7E40();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

void sub_24A281BF8(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_24A281C04(uint64_t a1)
{
  unint64_t v2 = sub_24A2865D4();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A281C40(uint64_t a1)
{
  unint64_t v2 = sub_24A2865D4();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_24A281C7C(void *a1)
{
  return sub_24A2819D8(a1);
}

uint64_t sub_24A281C94(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_269779F00);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24A2866D4();
  sub_24A2A7F80();
  char v9 = *((unsigned char *)v3 + 8);
  BOOL v10 = *v3 == 0;
  BOOL v11 = *v3 != 0;
  uint64_t v16 = *v3;
  char v17 = v11 & v9;
  BOOL v18 = v10;
  char v15 = 0;
  sub_24A286728();
  sub_24A2A7DC0();
  if (!v2)
  {
    uint64_t v12 = v3[2];
    if (*(void *)(v12 + 16)) {
      swift_bridgeObjectRetain();
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v16 = v12;
    char v15 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_269779F18);
    sub_24A28677C();
    sub_24A2A7DC0();
    swift_bridgeObjectRelease();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_24A281E6C()
{
  if (*v0) {
    return 0x73656972746E65;
  }
  else {
    return 0x676C4168736168;
  }
}

uint64_t sub_24A281EA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_24A288544(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_24A281EC8(uint64_t a1)
{
  unint64_t v2 = sub_24A2866D4();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A281F04(uint64_t a1)
{
  unint64_t v2 = sub_24A2866D4();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_24A281F40(void *a1)
{
  return sub_24A281C94(a1);
}

uint64_t sub_24A281F58(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v46 = type metadata accessor for Proto_SecureConfig(0);
  MEMORY[0x270FA5388](v46);
  uint64_t v52 = (uint64_t)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = type metadata accessor for Proto_Cryptex.Salt(0);
  MEMORY[0x270FA5388](v45);
  uint64_t v51 = (_OWORD *)((char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v49 = type metadata accessor for Proto_Cryptex(0);
  MEMORY[0x270FA5388](v49);
  uint64_t v50 = (_OWORD *)((char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174678);
  uint64_t v9 = MEMORY[0x270FA5388](v8 - 8);
  uint64_t v48 = (uint64_t)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v47 = (uint64_t)&v44 - v12;
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  char v15 = (char *)&v44 - v14;
  uint64_t v16 = MEMORY[0x270FA5388](v13);
  uint64_t v53 = (uint64_t)&v44 - v17;
  MEMORY[0x270FA5388](v16);
  uint64_t v54 = (uint64_t)&v44 - v18;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_269779F30);
  uint64_t v55 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v44 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24A286820();
  sub_24A2A7F80();
  uint64_t v22 = *(void *)(v3 + 8);
  unint64_t v23 = *(void *)(v3 + 16);
  unint64_t v24 = 0xF000000000000000;
  uint64_t v25 = 0;
  switch(v23 >> 62)
  {
    case 1uLL:
      if ((int)v22 == v22 >> 32) {
        goto LABEL_7;
      }
      goto LABEL_3;
    case 2uLL:
      if (*(void *)(v22 + 16) == *(void *)(v22 + 24)) {
        goto LABEL_7;
      }
      goto LABEL_3;
    case 3uLL:
      goto LABEL_8;
    default:
      if ((v23 & 0xFF000000000000) != 0)
      {
LABEL_3:
        sub_24A1A52B0(*(void *)(v3 + 8), *(void *)(v3 + 16));
        uint64_t v25 = v22;
        unint64_t v24 = v23;
      }
      else
      {
LABEL_7:
        uint64_t v25 = 0;
      }
LABEL_8:
      uint64_t v56 = v25;
      unint64_t v57 = v24;
      BOOL v58 = 0;
      sub_24A241004();
      sub_24A2A7DC0();
      if (!v2)
      {
        sub_24A1B7B78(v25, v24);
        BOOL v26 = *(_DWORD *)v3 == 0;
        LOBYTE(v56) = 1;
        BOOL v58 = v26;
        sub_24A2A7DD0();
        uint64_t v28 = v3 + *(int *)(type metadata accessor for Proto_SealedHash.Entry(0) + 24);
        uint64_t v29 = v54;
        sub_24A1B2CAC(v28, v54, &qword_26B174678);
        uint64_t v30 = type metadata accessor for Proto_SealedHash.Entry.OneOf_Info(0);
        uint64_t v31 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 48);
        if (v31(v29, 1, v30) == 1)
        {
          (*(void (**)(char *, uint64_t))(v55 + 8))(v21, v19);
          return sub_24A1B2D10(v29, &qword_26B174678);
        }
        sub_24A1B2CAC(v29, v53, &qword_26B174678);
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload)
        {
          if (EnumCaseMultiPayload == 1)
          {
            uint64_t v33 = v47;
            sub_24A1B2CAC(v28, v47, &qword_26B174678);
            if (v31(v33, 1, v30) == 1)
            {
              sub_24A1B2D10(v33, &qword_26B174678);
              uint64_t v29 = v54;
              uint64_t v34 = v51;
            }
            else
            {
              int v38 = swift_getEnumCaseMultiPayload();
              uint64_t v29 = v54;
              uint64_t v34 = v51;
              if (v38 == 1)
              {
                sub_24A286EDC(v33, (uint64_t)v51, type metadata accessor for Proto_Cryptex.Salt);
LABEL_32:
                LOBYTE(v56) = 3;
                sub_24A286E48(&qword_269779F48, (void (*)(uint64_t))type metadata accessor for Proto_Cryptex.Salt);
                sub_24A2A7E10();
                uint64_t v41 = type metadata accessor for Proto_Cryptex.Salt;
LABEL_38:
                uint64_t v42 = v41;
                uint64_t v43 = (uint64_t)v34;
                goto LABEL_39;
              }
              sub_24A286874(v33, type metadata accessor for Proto_SealedHash.Entry.OneOf_Info);
            }
            sub_24A2A6E00();
            goto LABEL_32;
          }
          uint64_t v35 = v28;
          uint64_t v36 = v48;
          sub_24A1B2CAC(v35, v48, &qword_26B174678);
          if (v31(v36, 1, v30) == 1)
          {
            sub_24A1B2D10(v36, &qword_26B174678);
            uint64_t v29 = v54;
            uint64_t v37 = v52;
          }
          else
          {
            int v40 = swift_getEnumCaseMultiPayload();
            uint64_t v29 = v54;
            uint64_t v37 = v52;
            if (v40 == 2)
            {
              sub_24A286EDC(v36, v52, type metadata accessor for Proto_SecureConfig);
LABEL_35:
              LOBYTE(v56) = 4;
              sub_24A286E48(&qword_269779F40, (void (*)(uint64_t))type metadata accessor for Proto_SecureConfig);
              sub_24A2A7E10();
              uint64_t v42 = type metadata accessor for Proto_SecureConfig;
              uint64_t v43 = v37;
LABEL_39:
              sub_24A286874(v43, v42);
              (*(void (**)(char *, uint64_t))(v55 + 8))(v21, v19);
              sub_24A286874(v53, type metadata accessor for Proto_SealedHash.Entry.OneOf_Info);
              return sub_24A1B2D10(v29, &qword_26B174678);
            }
            sub_24A286874(v36, type metadata accessor for Proto_SealedHash.Entry.OneOf_Info);
          }
          *(_OWORD *)uint64_t v37 = xmmword_24A2A8A80;
          *(void *)(v37 + 16) = sub_24A1BC558(MEMORY[0x263F8EE78]);
          sub_24A2A6E00();
          goto LABEL_35;
        }
        sub_24A1B2CAC(v28, (uint64_t)v15, &qword_26B174678);
        if (v31((uint64_t)v15, 1, v30) == 1)
        {
          sub_24A1B2D10((uint64_t)v15, &qword_26B174678);
          uint64_t v29 = v54;
          uint64_t v34 = v50;
        }
        else
        {
          int v39 = swift_getEnumCaseMultiPayload();
          uint64_t v29 = v54;
          uint64_t v34 = v50;
          if (!v39)
          {
            sub_24A286EDC((uint64_t)v15, (uint64_t)v50, type metadata accessor for Proto_Cryptex);
            goto LABEL_37;
          }
          sub_24A286874((uint64_t)v15, type metadata accessor for Proto_SealedHash.Entry.OneOf_Info);
        }
        *uint64_t v34 = xmmword_24A2A8A80;
        sub_24A2A6E00();
LABEL_37:
        LOBYTE(v56) = 2;
        sub_24A286E48(&qword_269779F50, (void (*)(uint64_t))type metadata accessor for Proto_Cryptex);
        sub_24A2A7E10();
        uint64_t v41 = type metadata accessor for Proto_Cryptex;
        goto LABEL_38;
      }
      sub_24A1B7B78(v25, v24);
      return (*(uint64_t (**)(char *, uint64_t))(v55 + 8))(v21, v19);
  }
}

uint64_t sub_24A282824()
{
  uint64_t result = 0x747365676964;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x7367616C66;
      break;
    case 2:
      uint64_t result = 0x78657470797263;
      break;
    case 3:
      uint64_t result = 0x5378657470797263;
      break;
    case 4:
      uint64_t result = 0x6F43657275636573;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_24A2828D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_24A288638(a1, a2);
  *a3 = result;
  return result;
}

void sub_24A282900(unsigned char *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_24A28290C(uint64_t a1)
{
  unint64_t v2 = sub_24A286820();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A282948(uint64_t a1)
{
  unint64_t v2 = sub_24A286820();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_24A282984(void *a1)
{
  return sub_24A281F58(a1);
}

uint64_t sub_24A28299C(void *a1)
{
  unint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_269779F58);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24A2868D4();
  sub_24A2A7F80();
  uint64_t v8 = *v2;
  unint64_t v9 = v2[1];
  unint64_t v10 = 0xF000000000000000;
  uint64_t v11 = 0;
  switch(v9 >> 62)
  {
    case 1uLL:
      if ((int)v8 == v8 >> 32) {
        goto LABEL_7;
      }
      goto LABEL_3;
    case 2uLL:
      if (*(void *)(v8 + 16) == *(void *)(v8 + 24)) {
        goto LABEL_7;
      }
      goto LABEL_3;
    case 3uLL:
      goto LABEL_8;
    default:
      if ((v9 & 0xFF000000000000) != 0)
      {
LABEL_3:
        sub_24A1A52B0(v8, v9);
        uint64_t v11 = v8;
        unint64_t v10 = v9;
      }
      else
      {
LABEL_7:
        uint64_t v11 = 0;
      }
LABEL_8:
      v13[0] = v11;
      v13[1] = v10;
      sub_24A241004();
      sub_24A2A7DC0();
      sub_24A1B7B78(v11, v10);
      return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
}

uint64_t sub_24A282B70()
{
  return 0x614D346567616D69;
}

uint64_t sub_24A282B94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x614D346567616D69 && a2 == 0xEE0074736566696ELL)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = sub_24A2A7E40();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_24A282C50(uint64_t a1)
{
  unint64_t v2 = sub_24A2868D4();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A282C8C(uint64_t a1)
{
  unint64_t v2 = sub_24A2868D4();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_24A282CC8(void *a1)
{
  return sub_24A28299C(a1);
}

uint64_t sub_24A282CE0()
{
  return 0;
}

uint64_t sub_24A282CEC@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = 1;
  return result;
}

uint64_t sub_24A282D1C(uint64_t a1)
{
  unint64_t v2 = sub_24A286928();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A282D58(uint64_t a1)
{
  unint64_t v2 = sub_24A286928();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_24A282D94(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_269779F68);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  char v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24A286928();
  sub_24A2A7F80();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_24A282EA4(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_269779F78);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24A28697C();
  sub_24A2A7F80();
  uint64_t v9 = *v3;
  unint64_t v10 = v3[1];
  unint64_t v11 = 0xF000000000000000;
  uint64_t v12 = 0;
  switch(v10 >> 62)
  {
    case 1uLL:
      if ((int)v9 == v9 >> 32) {
        goto LABEL_7;
      }
      goto LABEL_3;
    case 2uLL:
      if (*(void *)(v9 + 16) == *(void *)(v9 + 24)) {
        goto LABEL_7;
      }
      goto LABEL_3;
    case 3uLL:
      goto LABEL_8;
    default:
      if ((v10 & 0xFF000000000000) != 0)
      {
LABEL_3:
        sub_24A1A52B0(*v3, v3[1]);
        uint64_t v12 = v9;
        unint64_t v11 = v10;
      }
      else
      {
LABEL_7:
        uint64_t v12 = 0;
      }
LABEL_8:
      v15[0] = v12;
      v15[1] = v11;
      char v16 = 0;
      sub_24A241004();
      sub_24A2A7DC0();
      sub_24A1B7B78(v12, v11);
      if (!v2)
      {
        uint64_t v13 = v3[2];
        if (*(void *)(v13 + 16)) {
          swift_bridgeObjectRetain();
        }
        else {
          uint64_t v13 = 0;
        }
        v15[0] = v13;
        char v16 = 1;
        __swift_instantiateConcreteTypeFromMangledName(&qword_2697799D0);
        sub_24A2869D0();
        sub_24A2A7DC0();
        swift_bridgeObjectRelease();
      }
      return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
}

uint64_t sub_24A2830F4()
{
  if (*v0) {
    return 0x617461646174656DLL;
  }
  else {
    return 0x7972746E65;
  }
}

uint64_t sub_24A28312C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_24A288878(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_24A283154(uint64_t a1)
{
  unint64_t v2 = sub_24A28697C();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A283190(uint64_t a1)
{
  unint64_t v2 = sub_24A28697C();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_24A2831CC(void *a1)
{
  return sub_24A282EA4(a1);
}

uint64_t sub_24A2831E4(void *a1, uint64_t a2, char a3)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24A2A7F70();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v5, v6);
  if (a3) {
    sub_24A2A7E50();
  }
  else {
    sub_24A2A7E60();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
}

uint64_t sub_24A28333C(void *a1)
{
  return sub_24A2831E4(a1, *(void *)v1, *(unsigned char *)(v1 + 8));
}

uint64_t sub_24A28335C(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1742D8);
  uint64_t v5 = MEMORY[0x270FA5388](v4 - 8);
  uint64_t v29 = (uint64_t)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v29 - v8;
  MEMORY[0x270FA5388](v7);
  unint64_t v11 = (char *)&v29 - v10;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_269779F90);
  uint64_t v31 = *(void *)(v12 - 8);
  uint64_t v32 = v12;
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24A286A8C();
  uint64_t v30 = v14;
  sub_24A2A7F80();
  uint64_t v15 = v2 + *(int *)(type metadata accessor for Proto_TransparencyProofs(0) + 20);
  sub_24A1B2CAC(v15, (uint64_t)v9, &qword_26B1742D8);
  uint64_t v16 = type metadata accessor for ATLogProofs(0);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48);
  uint64_t v19 = 1;
  int v20 = v18(v9, 1, v16);
  sub_24A1B2D10((uint64_t)v9, &qword_26B1742D8);
  if (v20 != 1)
  {
    uint64_t v21 = v29;
    sub_24A1B2CAC(v15, v29, &qword_26B1742D8);
    if (v18((char *)v21, 1, v16) == 1)
    {
      sub_24A2A6E00();
      uint64_t v22 = &v11[*(int *)(v16 + 20)];
      uint64_t v23 = type metadata accessor for LogEntry(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v22, 1, 1, v23);
      unint64_t v24 = &v11[*(int *)(v16 + 24)];
      uint64_t v25 = type metadata accessor for LogConsistency(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v24, 1, 1, v25);
      sub_24A1B2D10(v21, &qword_26B1742D8);
    }
    else
    {
      sub_24A286EDC(v21, (uint64_t)v11, type metadata accessor for ATLogProofs);
    }
    uint64_t v19 = 0;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56))(v11, v19, 1, v16);
  sub_24A286E48(&qword_269779FA0, (void (*)(uint64_t))type metadata accessor for ATLogProofs);
  uint64_t v26 = v32;
  unint64_t v27 = v30;
  sub_24A2A7DC0();
  sub_24A1B2D10((uint64_t)v11, &qword_26B1742D8);
  return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v27, v26);
}

uint64_t sub_24A283738()
{
  return 0x73666F6F7270;
}

uint64_t sub_24A28374C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x73666F6F7270 && a2 == 0xE600000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = sub_24A2A7E40();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_24A2837DC(uint64_t a1)
{
  unint64_t v2 = sub_24A286A8C();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A283818(uint64_t a1)
{
  unint64_t v2 = sub_24A286A8C();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_24A283854(void *a1)
{
  return sub_24A28335C(a1);
}

uint64_t sub_24A28386C(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1745E0);
  uint64_t v5 = MEMORY[0x270FA5388](v4 - 8);
  uint64_t v43 = (uint64_t)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v46 = (uint64_t)&v43 - v8;
  MEMORY[0x270FA5388](v7);
  uint64_t v47 = (char *)&v43 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174940);
  uint64_t v11 = MEMORY[0x270FA5388](v10 - 8);
  uint64_t v48 = (uint64_t)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v43 - v14;
  MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v43 - v16;
  uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&qword_269779FA8);
  uint64_t v50 = *(void *)(v52 - 8);
  MEMORY[0x270FA5388](v52);
  uint64_t v19 = (char *)&v43 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24A286AE0();
  uint64_t v51 = v19;
  sub_24A2A7F80();
  uint64_t v44 = type metadata accessor for ATLogProofs(0);
  uint64_t v45 = v2;
  uint64_t v20 = v2 + *(int *)(v44 + 20);
  sub_24A1B2CAC(v20, (uint64_t)v15, &qword_26B174940);
  uint64_t v21 = type metadata accessor for LogEntry(0);
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48);
  uint64_t v24 = 1;
  int v25 = v23(v15, 1, v21);
  sub_24A1B2D10((uint64_t)v15, &qword_26B174940);
  if (v25 != 1)
  {
    uint64_t v26 = v48;
    sub_24A1B2CAC(v20, v48, &qword_26B174940);
    if (v23((char *)v26, 1, v21) == 1)
    {
      *(void *)uint64_t v17 = 0;
      v17[8] = 1;
      *((void *)v17 + 2) = MEMORY[0x263F8EE78];
      *(_OWORD *)(v17 + 24) = xmmword_24A2A8A80;
      *((void *)v17 + 5) = 0;
      *((void *)v17 + 6) = 0;
      v17[56] = 1;
      sub_24A2A6E00();
      unint64_t v27 = &v17[*(int *)(v21 + 40)];
      uint64_t v28 = type metadata accessor for SignedObject(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v27, 1, 1, v28);
      sub_24A1B2D10(v26, &qword_26B174940);
    }
    else
    {
      sub_24A286EDC(v26, (uint64_t)v17, type metadata accessor for LogEntry);
    }
    uint64_t v24 = 0;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v22 + 56))(v17, v24, 1, v21);
  char v54 = 0;
  sub_24A286E48(&qword_269779FB8, (void (*)(uint64_t))type metadata accessor for LogEntry);
  uint64_t v29 = v52;
  uint64_t v30 = v51;
  uint64_t v31 = v49;
  sub_24A2A7DC0();
  sub_24A1B2D10((uint64_t)v17, &qword_26B174940);
  if (!v31)
  {
    uint64_t v32 = v45 + *(int *)(v44 + 24);
    uint64_t v33 = v46;
    sub_24A1B2CAC(v32, v46, &qword_26B1745E0);
    uint64_t v34 = type metadata accessor for LogConsistency(0);
    uint64_t v35 = *(void *)(v34 - 8);
    uint64_t v36 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v35 + 48);
    int v37 = v36(v33, 1, v34);
    sub_24A1B2D10(v33, &qword_26B1745E0);
    uint64_t v38 = 1;
    uint64_t v39 = (uint64_t)v47;
    if (v37 != 1)
    {
      uint64_t v40 = v43;
      sub_24A1B2CAC(v32, v43, &qword_26B1745E0);
      if (v36(v40, 1, v34) == 1)
      {
        sub_24A2A6E00();
        uint64_t v41 = *(int *)(v34 + 20);
        if (qword_26B174588 != -1) {
          swift_once();
        }
        *(void *)(v39 + v41) = qword_26B174580;
        swift_retain();
        sub_24A1B2D10(v40, &qword_26B1745E0);
      }
      else
      {
        sub_24A286EDC(v40, v39, type metadata accessor for LogConsistency);
      }
      uint64_t v38 = 0;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v35 + 56))(v39, v38, 1, v34);
    char v53 = 1;
    sub_24A286E48(&qword_269779FC0, (void (*)(uint64_t))type metadata accessor for LogConsistency);
    uint64_t v29 = v52;
    uint64_t v30 = v51;
    sub_24A2A7DC0();
    sub_24A1B2D10(v39, &qword_26B1745E0);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v50 + 8))(v30, v29);
}

uint64_t sub_24A283EC4()
{
  if (*v0) {
    return 0xD000000000000014;
  }
  else {
    return 0x6F6973756C636E69;
  }
}

uint64_t sub_24A283F10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_24A288964(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_24A283F38(uint64_t a1)
{
  unint64_t v2 = sub_24A286AE0();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A283F74(uint64_t a1)
{
  unint64_t v2 = sub_24A286AE0();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_24A283FB0(void *a1)
{
  return sub_24A28386C(a1);
}

uint64_t sub_24A283FC8(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174320);
  uint64_t v5 = MEMORY[0x270FA5388](v4 - 8);
  uint64_t v7 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x270FA5388](v5);
  uint64_t v10 = (char *)&v47 - v9;
  MEMORY[0x270FA5388](v8);
  char v53 = (char *)&v47 - v11;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_269779FC8);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24A286B34();
  sub_24A2A7F80();
  char v16 = *(unsigned char *)(v2 + 8);
  BOOL v17 = *(void *)v2 == 0;
  BOOL v18 = *(void *)v2 != 0;
  uint64_t v55 = *(void *)v2;
  LOBYTE(v56) = v18 & v16;
  BYTE1(v56) = v17;
  char v57 = 0;
  sub_24A286B88();
  uint64_t v19 = v54;
  sub_24A2A7DC0();
  if (v19) {
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  }
  uint64_t v49 = v7;
  uint64_t v50 = v15;
  uint64_t v51 = 0;
  uint64_t v52 = v12;
  uint64_t v54 = v13;
  uint64_t v21 = *(int *)(type metadata accessor for LogEntry(0) + 40);
  uint64_t v48 = v2;
  uint64_t v22 = v2 + v21;
  sub_24A1B2CAC(v2 + v21, (uint64_t)v10, &qword_26B174320);
  uint64_t v23 = type metadata accessor for SignedObject(0);
  uint64_t v24 = *(void *)(v23 - 8);
  int v25 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v24 + 48);
  int v26 = v25(v10, 1, v23);
  sub_24A1B2D10((uint64_t)v10, &qword_26B174320);
  uint64_t v27 = 1;
  uint64_t v28 = v53;
  if (v26 != 1)
  {
    uint64_t v29 = v22;
    uint64_t v30 = (uint64_t)v49;
    sub_24A1B2CAC(v29, (uint64_t)v49, &qword_26B174320);
    if (v25((char *)v30, 1, v23) == 1)
    {
      *uint64_t v28 = xmmword_24A2A8A80;
      sub_24A2A6E00();
      uint64_t v31 = (char *)v28 + *(int *)(v23 + 24);
      uint64_t v32 = type metadata accessor for Signature(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v31, 1, 1, v32);
      sub_24A1B2D10(v30, &qword_26B174320);
    }
    else
    {
      sub_24A286EDC(v30, (uint64_t)v28, type metadata accessor for SignedObject);
    }
    uint64_t v27 = 0;
  }
  (*(void (**)(_OWORD *, uint64_t, uint64_t, uint64_t))(v24 + 56))(v28, v27, 1, v23);
  LOBYTE(v55) = 1;
  sub_24A286E48(&qword_269779FE0, (void (*)(uint64_t))type metadata accessor for SignedObject);
  uint64_t v33 = v51;
  uint64_t v34 = v52;
  uint64_t v35 = v50;
  sub_24A2A7DC0();
  if (v33)
  {
    sub_24A1B2D10((uint64_t)v28, &qword_26B174320);
    return (*(uint64_t (**)(char *, uint64_t))(v54 + 8))(v35, v34);
  }
  else
  {
    sub_24A1B2D10((uint64_t)v28, &qword_26B174320);
    uint64_t v36 = v48;
    uint64_t v37 = *(void *)(v48 + 16);
    if (*(void *)(v37 + 16)) {
      swift_bridgeObjectRetain();
    }
    else {
      uint64_t v37 = 0;
    }
    uint64_t v55 = v37;
    char v57 = 2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_269779FE8);
    sub_24A286BDC();
    sub_24A2A7DC0();
    swift_bridgeObjectRelease();
    uint64_t v38 = *(void *)(v36 + 24);
    unint64_t v39 = *(void *)(v36 + 32);
    unint64_t v40 = 0xF000000000000000;
    uint64_t v41 = 0;
    switch(v39 >> 62)
    {
      case 1uLL:
        uint64_t v42 = (int)v38;
        uint64_t v43 = v38 >> 32;
        goto LABEL_18;
      case 2uLL:
        uint64_t v42 = *(void *)(v38 + 16);
        uint64_t v43 = *(void *)(v38 + 24);
LABEL_18:
        if (v42 == v43) {
          goto LABEL_19;
        }
        goto LABEL_15;
      case 3uLL:
        goto LABEL_20;
      default:
        if ((v39 & 0xFF000000000000) != 0)
        {
LABEL_15:
          sub_24A1A52B0(*(void *)(v36 + 24), *(void *)(v36 + 32));
          uint64_t v41 = v38;
          unint64_t v40 = v39;
        }
        else
        {
LABEL_19:
          uint64_t v41 = 0;
        }
LABEL_20:
        uint64_t v55 = v41;
        unint64_t v56 = v40;
        char v57 = 3;
        sub_24A241004();
        uint64_t v44 = v52;
        sub_24A2A7DC0();
        sub_24A1B7B78(v41, v40);
        LOBYTE(v55) = 4;
        sub_24A2A7DE0();
        uint64_t v45 = v54;
        char v46 = *(unsigned char *)(v36 + 56);
        uint64_t v55 = *(void *)(v36 + 48);
        LOBYTE(v56) = (v55 != 0) & v46;
        BYTE1(v56) = v55 == 0;
        char v57 = 5;
        sub_24A286C50();
        sub_24A2A7DC0();
        uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v35, v44);
        break;
    }
  }
  return result;
}

unint64_t sub_24A284644()
{
  unint64_t result = 0x65707954676F6CLL;
  switch(*v0)
  {
    case 1:
      unint64_t result = 6843507;
      break;
    case 2:
      unint64_t result = 0xD000000000000019;
      break;
    case 3:
      unint64_t result = 0x6574794265646F6ELL;
      break;
    case 4:
      unint64_t result = 0x69736F5065646F6ELL;
      break;
    case 5:
      unint64_t result = 0x6570795465646F6ELL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_24A284714@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_24A288A78(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_24A28473C(uint64_t a1)
{
  unint64_t v2 = sub_24A286B34();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A284778(uint64_t a1)
{
  unint64_t v2 = sub_24A286B34();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_24A2847B4(void *a1)
{
  return sub_24A283FC8(a1);
}

uint64_t sub_24A2847CC(void *a1, uint64_t a2, char a3)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24A2A7F70();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v5, v6);
  if (a3) {
    sub_24A2A7E50();
  }
  else {
    sub_24A2A7E60();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
}

uint64_t sub_24A2849D4(void *a1)
{
  return sub_24A2847CC(a1, *(void *)v1, *(unsigned char *)(v1 + 8));
}

uint64_t sub_24A2849F4(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
  uint64_t v5 = MEMORY[0x270FA5388](v4 - 8);
  uint64_t v30 = (uint64_t)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v29 - v8;
  MEMORY[0x270FA5388](v7);
  uint64_t v31 = (char *)&v29 - v10;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_26977A000);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24A286CA4();
  sub_24A2A7F80();
  uint64_t v15 = *(void *)v2;
  unint64_t v16 = *(void *)(v2 + 8);
  unint64_t v17 = 0xF000000000000000;
  uint64_t v18 = 0;
  switch(v16 >> 62)
  {
    case 1uLL:
      if ((int)v15 == v15 >> 32) {
        goto LABEL_7;
      }
      goto LABEL_3;
    case 2uLL:
      if (*(void *)(v15 + 16) == *(void *)(v15 + 24)) {
        goto LABEL_7;
      }
      goto LABEL_3;
    case 3uLL:
      goto LABEL_8;
    default:
      if ((v16 & 0xFF000000000000) != 0)
      {
LABEL_3:
        sub_24A1A52B0(*(void *)v2, *(void *)(v2 + 8));
        uint64_t v18 = v15;
        unint64_t v17 = v16;
      }
      else
      {
LABEL_7:
        uint64_t v18 = 0;
      }
LABEL_8:
      uint64_t v33 = v18;
      unint64_t v34 = v17;
      char v35 = 0;
      sub_24A241004();
      uint64_t v19 = v32;
      sub_24A2A7DC0();
      sub_24A1B7B78(v18, v17);
      if (v19) {
        return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
      }
      uint64_t v32 = v12;
      uint64_t v29 = v2 + *(int *)(type metadata accessor for SignedObject(0) + 24);
      sub_24A1B2CAC(v29, (uint64_t)v9, &qword_26B1749B8);
      uint64_t v21 = type metadata accessor for Signature(0);
      uint64_t v22 = *(void *)(v21 - 8);
      uint64_t v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48);
      int v24 = v23(v9, 1, v21);
      sub_24A1B2D10((uint64_t)v9, &qword_26B1749B8);
      uint64_t v25 = 1;
      BOOL v26 = v24 == 1;
      uint64_t v27 = (uint64_t)v31;
      if (!v26)
      {
        uint64_t v28 = v30;
        sub_24A1B2CAC(v29, v30, &qword_26B1749B8);
        if (v23((char *)v28, 1, v21) == 1)
        {
          *(_OWORD *)uint64_t v27 = xmmword_24A2A8A80;
          *(_OWORD *)(v27 + 16) = xmmword_24A2A8A80;
          *(void *)(v27 + 32) = 0;
          *(unsigned char *)(v27 + 40) = 1;
          sub_24A2A6E00();
          sub_24A1B2D10(v28, &qword_26B1749B8);
        }
        else
        {
          sub_24A286EDC(v28, v27, type metadata accessor for Signature);
        }
        uint64_t v25 = 0;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 56))(v27, v25, 1, v21);
      LOBYTE(v33) = 1;
      sub_24A286E48(&qword_26977A010, (void (*)(uint64_t))type metadata accessor for Signature);
      sub_24A2A7DC0();
      sub_24A1B2D10(v27, &qword_26B1749B8);
      return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v14, v11);
  }
}

uint64_t sub_24A284E4C()
{
  if (*v0) {
    return 0x727574616E676973;
  }
  else {
    return 0x7463656A626FLL;
  }
}

uint64_t sub_24A284E88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_24A288D08(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_24A284EB0(uint64_t a1)
{
  unint64_t v2 = sub_24A286CA4();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A284EEC(uint64_t a1)
{
  unint64_t v2 = sub_24A286CA4();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_24A284F28(void *a1)
{
  return sub_24A2849F4(a1);
}

uint64_t sub_24A284F40(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_26977A018);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24A286CF8();
  sub_24A2A7F80();
  uint64_t v9 = *(void *)v3;
  unint64_t v10 = *(void *)(v3 + 8);
  unint64_t v11 = 0xF000000000000000;
  uint64_t v12 = 0;
  switch(v10 >> 62)
  {
    case 1uLL:
      if ((int)v9 == v9 >> 32) {
        goto LABEL_7;
      }
      goto LABEL_3;
    case 2uLL:
      if (*(void *)(v9 + 16) == *(void *)(v9 + 24)) {
        goto LABEL_7;
      }
      goto LABEL_3;
    case 3uLL:
      goto LABEL_8;
    default:
      if ((v10 & 0xFF000000000000) != 0)
      {
LABEL_3:
        sub_24A1A52B0(*(void *)v3, *(void *)(v3 + 8));
        uint64_t v12 = v9;
        unint64_t v11 = v10;
      }
      else
      {
LABEL_7:
        uint64_t v12 = 0;
      }
LABEL_8:
      uint64_t v21 = v12;
      unint64_t v22 = v11;
      char v23 = 0;
      sub_24A241004();
      sub_24A2A7DC0();
      sub_24A1B7B78(v12, v11);
      if (v2) {
        return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      }
      uint64_t v20 = v6;
      uint64_t v14 = *(void *)(v3 + 16);
      unint64_t v15 = *(void *)(v3 + 24);
      unint64_t v16 = 0xF000000000000000;
      uint64_t v17 = 0;
      switch(v15 >> 62)
      {
        case 1uLL:
          if ((int)v14 == v14 >> 32) {
            goto LABEL_16;
          }
          goto LABEL_12;
        case 2uLL:
          if (*(void *)(v14 + 16) == *(void *)(v14 + 24)) {
            goto LABEL_16;
          }
          goto LABEL_12;
        case 3uLL:
          goto LABEL_17;
        default:
          if ((v15 & 0xFF000000000000) != 0)
          {
LABEL_12:
            sub_24A1A52B0(*(void *)(v3 + 16), *(void *)(v3 + 24));
            uint64_t v17 = v14;
            unint64_t v16 = v15;
          }
          else
          {
LABEL_16:
            uint64_t v17 = 0;
          }
LABEL_17:
          uint64_t v21 = v17;
          unint64_t v22 = v16;
          char v23 = 1;
          sub_24A2A7DC0();
          sub_24A1B7B78(v17, v16);
          char v18 = *(unsigned char *)(v3 + 40);
          uint64_t v21 = *(void *)(v3 + 32);
          LOBYTE(v22) = (v21 != 0) & v18;
          BYTE1(v22) = v21 == 0;
          char v23 = 2;
          sub_24A286D4C();
          sub_24A2A7DC0();
          uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v8, v5);
          break;
      }
      return result;
  }
}

uint64_t sub_24A285270()
{
  unint64_t v1 = 0xD000000000000012;
  if (*v0 != 1) {
    unint64_t v1 = 0x687469726F676C61;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x727574616E676973;
  }
}

uint64_t sub_24A2852D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_24A288E00(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_24A2852FC(uint64_t a1)
{
  unint64_t v2 = sub_24A286CF8();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A285338(uint64_t a1)
{
  unint64_t v2 = sub_24A286CF8();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_24A285374(void *a1)
{
  return sub_24A284F40(a1);
}

uint64_t sub_24A28538C()
{
  return sub_24A2A79F0();
}

uint64_t sub_24A2853DC(void *a1, uint64_t a2, char a3)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24A2A7F70();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v5, v6);
  if (a3) {
    sub_24A2A7E50();
  }
  else {
    sub_24A2A7E60();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
}

uint64_t sub_24A285640(void *a1)
{
  return sub_24A2853DC(a1, *(void *)v1, *(unsigned char *)(v1 + 8));
}

uint64_t sub_24A285660(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174940);
  uint64_t v5 = MEMORY[0x270FA5388](v4 - 8);
  uint64_t v85 = (uint64_t)&v84 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v86 = (uint64_t)&v84 - v8;
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v87 = (char *)&v84 - v10;
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v88 = (uint64_t)&v84 - v12;
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v90 = (uint64_t)&v84 - v14;
  MEMORY[0x270FA5388](v13);
  uint64_t v89 = (uint64_t *)((char *)&v84 - v15);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174320);
  uint64_t v17 = MEMORY[0x270FA5388](v16 - 8);
  uint64_t v91 = (uint64_t)&v84 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  uint64_t v92 = (char *)&v84 - v20;
  uint64_t v21 = MEMORY[0x270FA5388](v19);
  uint64_t v93 = (char *)&v84 - v22;
  uint64_t v23 = MEMORY[0x270FA5388](v21);
  uint64_t v94 = (char *)&v84 - v24;
  uint64_t v25 = MEMORY[0x270FA5388](v23);
  uint64_t v27 = (char *)&v84 - v26;
  MEMORY[0x270FA5388](v25);
  uint64_t v29 = (_OWORD *)((char *)&v84 - v28);
  uint64_t v100 = __swift_instantiateConcreteTypeFromMangledName(&qword_26977A030);
  uint64_t v98 = *(void *)(v100 - 8);
  MEMORY[0x270FA5388](v100);
  uint64_t v31 = (char *)&v84 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24A286DA0();
  uint64_t v101 = v31;
  sub_24A2A7F80();
  uint64_t v32 = *(int *)(type metadata accessor for LogConsistency(0) + 20);
  uint64_t v96 = v2;
  uint64_t v95 = v32;
  uint64_t v33 = *(void *)(v2 + v32);
  uint64_t v34 = v33
      + OBJC_IVAR____TtCV16CloudAttestation14LogConsistencyP33_41967CC35744CDFB8E92E7B80EC2B17A13_StorageClass__startSlh;
  swift_beginAccess();
  sub_24A1B2CAC(v34, (uint64_t)v27, &qword_26B174320);
  uint64_t v35 = type metadata accessor for SignedObject(0);
  uint64_t v36 = *(void *)(v35 - 8);
  uint64_t v37 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v36 + 48);
  LODWORD(v34) = v37(v27, 1, v35);
  sub_24A1B2D10((uint64_t)v27, &qword_26B174320);
  uint64_t v97 = v36;
  if (v34 == 1)
  {
    uint64_t v38 = *(void (**)(_OWORD *, uint64_t, uint64_t, uint64_t))(v36 + 56);
    v38(v29, 1, 1, v35);
    uint64_t v39 = v100;
    unint64_t v40 = v101;
    uint64_t v41 = v99;
    uint64_t v42 = v37;
  }
  else
  {
    uint64_t v43 = v33
        + OBJC_IVAR____TtCV16CloudAttestation14LogConsistencyP33_41967CC35744CDFB8E92E7B80EC2B17A13_StorageClass__startSlh;
    swift_beginAccess();
    uint64_t v44 = v94;
    sub_24A1B2CAC(v43, (uint64_t)v94, &qword_26B174320);
    uint64_t v42 = v37;
    if (v37(v44, 1, v35) == 1)
    {
      *uint64_t v29 = xmmword_24A2A8A80;
      sub_24A2A6E00();
      uint64_t v45 = (char *)v29 + *(int *)(v35 + 24);
      uint64_t v46 = type metadata accessor for Signature(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v46 - 8) + 56))(v45, 1, 1, v46);
      sub_24A1B2D10((uint64_t)v44, &qword_26B174320);
    }
    else
    {
      sub_24A286EDC((uint64_t)v44, (uint64_t)v29, type metadata accessor for SignedObject);
    }
    uint64_t v39 = v100;
    unint64_t v40 = v101;
    uint64_t v41 = v99;
    uint64_t v38 = *(void (**)(_OWORD *, uint64_t, uint64_t, uint64_t))(v97 + 56);
    v38(v29, 0, 1, v35);
  }
  char v105 = 0;
  uint64_t v47 = (char *)sub_24A286E48(&qword_269779FE0, (void (*)(uint64_t))type metadata accessor for SignedObject);
  sub_24A2A7DC0();
  if (v41)
  {
    sub_24A1B2D10((uint64_t)v29, &qword_26B174320);
    return (*(uint64_t (**)(char *, uint64_t))(v98 + 8))(v40, v39);
  }
  else
  {
    uint64_t v94 = v47;
    os_log_type_t v99 = (void (*)(void, void, void, void))v38;
    sub_24A1B2D10((uint64_t)v29, &qword_26B174320);
    uint64_t v49 = *(void *)(v96 + v95);
    uint64_t v50 = v49
        + OBJC_IVAR____TtCV16CloudAttestation14LogConsistencyP33_41967CC35744CDFB8E92E7B80EC2B17A13_StorageClass__endSlh;
    swift_beginAccess();
    uint64_t v51 = v92;
    sub_24A1B2CAC(v50, (uint64_t)v92, &qword_26B174320);
    LODWORD(v50) = v42(v51, 1, v35);
    sub_24A1B2D10((uint64_t)v51, &qword_26B174320);
    uint64_t v52 = 1;
    BOOL v53 = v50 == 1;
    uint64_t v54 = v93;
    if (!v53)
    {
      uint64_t v55 = v49
          + OBJC_IVAR____TtCV16CloudAttestation14LogConsistencyP33_41967CC35744CDFB8E92E7B80EC2B17A13_StorageClass__endSlh;
      swift_beginAccess();
      uint64_t v56 = v91;
      sub_24A1B2CAC(v55, v91, &qword_26B174320);
      if (v42((char *)v56, 1, v35) == 1)
      {
        *uint64_t v54 = xmmword_24A2A8A80;
        sub_24A2A6E00();
        char v57 = (char *)v54 + *(int *)(v35 + 24);
        uint64_t v58 = type metadata accessor for Signature(0);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v58 - 8) + 56))(v57, 1, 1, v58);
        sub_24A1B2D10(v56, &qword_26B174320);
      }
      else
      {
        sub_24A286EDC(v56, (uint64_t)v54, type metadata accessor for SignedObject);
      }
      uint64_t v52 = 0;
    }
    uint64_t v59 = v97 + 56;
    v99(v54, v52, 1, v35);
    char v104 = 1;
    sub_24A2A7DC0();
    uint64_t v97 = v35;
    sub_24A1B2D10((uint64_t)v54, &qword_26B174320);
    uint64_t v60 = *(void *)(v96 + v95);
    uint64_t v61 = (uint64_t *)(v60
                    + OBJC_IVAR____TtCV16CloudAttestation14LogConsistencyP33_41967CC35744CDFB8E92E7B80EC2B17A13_StorageClass__proofHashes);
    swift_beginAccess();
    uint64_t v62 = *v61;
    if (*(void *)(*v61 + 16)) {
      swift_bridgeObjectRetain();
    }
    else {
      uint64_t v62 = 0;
    }
    uint64_t v103 = v62;
    char v102 = 2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_269779FE8);
    sub_24A286BDC();
    sub_24A2A7DC0();
    swift_bridgeObjectRelease();
    uint64_t v91 = v59;
    uint64_t v63 = v60
        + OBJC_IVAR____TtCV16CloudAttestation14LogConsistencyP33_41967CC35744CDFB8E92E7B80EC2B17A13_StorageClass__patInclusionProof;
    swift_beginAccess();
    uint64_t v64 = v90;
    sub_24A1B2CAC(v63, v90, &qword_26B174940);
    uint64_t v65 = type metadata accessor for LogEntry(0);
    int v66 = *(char **)(v65 - 8);
    uint64_t v94 = (char *)*((void *)v66 + 6);
    LODWORD(v63) = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v94)(v64, 1, v65);
    sub_24A1B2D10(v64, &qword_26B174940);
    uint64_t v93 = v66;
    if (v63 == 1)
    {
      uint64_t v67 = v89;
      uint64_t v92 = (char *)*((void *)v66 + 7);
      ((void (*)(void *, uint64_t, uint64_t, uint64_t))v92)(v89, 1, 1, v65);
      uint64_t v68 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v94;
      uint64_t v69 = v65;
    }
    else
    {
      uint64_t v70 = v60
          + OBJC_IVAR____TtCV16CloudAttestation14LogConsistencyP33_41967CC35744CDFB8E92E7B80EC2B17A13_StorageClass__patInclusionProof;
      swift_beginAccess();
      uint64_t v71 = v88;
      sub_24A1B2CAC(v70, v88, &qword_26B174940);
      uint64_t v68 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v94;
      uint64_t v69 = v65;
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v94)(v71, 1, v65) == 1)
      {
        uint64_t v67 = v89;
        *uint64_t v89 = 0;
        *((unsigned char *)v67 + 8) = 1;
        v67[2] = MEMORY[0x263F8EE78];
        *(_OWORD *)(v67 + 3) = xmmword_24A2A8A80;
        v67[5] = 0;
        v67[6] = 0;
        *((unsigned char *)v67 + 56) = 1;
        sub_24A2A6E00();
        v99((char *)v67 + *(int *)(v65 + 40), 1, 1, v97);
        sub_24A1B2D10(v71, &qword_26B174940);
      }
      else
      {
        uint64_t v67 = v89;
        sub_24A286EDC(v71, (uint64_t)v89, type metadata accessor for LogEntry);
      }
      uint64_t v92 = (char *)*((void *)v93 + 7);
      ((void (*)(void *, void, uint64_t, uint64_t))v92)(v67, 0, 1, v65);
    }
    char v102 = 3;
    uint64_t v72 = (char *)sub_24A286E48(&qword_269779FB8, (void (*)(uint64_t))type metadata accessor for LogEntry);
    sub_24A2A7DC0();
    sub_24A1B2D10((uint64_t)v67, &qword_26B174940);
    uint64_t v94 = v72;
    uint64_t v73 = *(void *)(v96 + v95);
    uint64_t v74 = v73
        + OBJC_IVAR____TtCV16CloudAttestation14LogConsistencyP33_41967CC35744CDFB8E92E7B80EC2B17A13_StorageClass__tltInclusionProof;
    swift_beginAccess();
    uint64_t v75 = v86;
    sub_24A1B2CAC(v74, v86, &qword_26B174940);
    uint64_t v76 = 1;
    uint64_t v77 = v68;
    unsigned int v78 = v68(v75, 1, v69);
    sub_24A1B2D10(v75, &qword_26B174940);
    uint64_t v79 = (uint64_t)v87;
    if (v78 != 1)
    {
      uint64_t v80 = v73
          + OBJC_IVAR____TtCV16CloudAttestation14LogConsistencyP33_41967CC35744CDFB8E92E7B80EC2B17A13_StorageClass__tltInclusionProof;
      swift_beginAccess();
      uint64_t v81 = v85;
      sub_24A1B2CAC(v80, v85, &qword_26B174940);
      if (v77(v81, 1, v69) == 1)
      {
        *(void *)uint64_t v79 = 0;
        *(unsigned char *)(v79 + 8) = 1;
        *(void *)(v79 + 16) = MEMORY[0x263F8EE78];
        *(_OWORD *)(v79 + 24) = xmmword_24A2A8A80;
        *(void *)(v79 + 40) = 0;
        *(void *)(v79 + 48) = 0;
        *(unsigned char *)(v79 + 56) = 1;
        sub_24A2A6E00();
        v99(v79 + *(int *)(v69 + 40), 1, 1, v97);
        sub_24A1B2D10(v81, &qword_26B174940);
      }
      else
      {
        sub_24A286EDC(v81, v79, type metadata accessor for LogEntry);
      }
      uint64_t v76 = 0;
    }
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v92)(v79, v76, 1, v69);
    char v106 = 4;
    uint64_t v82 = v100;
    uint64_t v83 = v101;
    sub_24A2A7DC0();
    sub_24A1B2D10(v79, &qword_26B174940);
    return (*(uint64_t (**)(char *, uint64_t))(v98 + 8))(v83, v82);
  }
}

unint64_t sub_24A286468(char a1)
{
  unint64_t result = 0x484C537472617473;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x484C53646E65;
      break;
    case 2:
      unint64_t result = 0x736148666F6F7270;
      break;
    case 3:
    case 4:
      unint64_t result = 0xD000000000000011;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_24A286514()
{
  return sub_24A286468(*v0);
}

uint64_t sub_24A28651C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_24A288F60(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_24A286544(uint64_t a1)
{
  unint64_t v2 = sub_24A286DA0();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24A286580(uint64_t a1)
{
  unint64_t v2 = sub_24A286DA0();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_24A2865BC(void *a1)
{
  return sub_24A285660(a1);
}

unint64_t sub_24A2865D4()
{
  unint64_t result = qword_269779EE0;
  if (!qword_269779EE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269779EE0);
  }
  return result;
}

unint64_t sub_24A286628()
{
  unint64_t result = qword_269779EF0;
  if (!qword_269779EF0)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_269779EE8);
    sub_24A286E48(&qword_269779EF8, (void (*)(uint64_t))type metadata accessor for Proto_SealedHash);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269779EF0);
  }
  return result;
}

unint64_t sub_24A2866D4()
{
  unint64_t result = qword_269779F08;
  if (!qword_269779F08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269779F08);
  }
  return result;
}

unint64_t sub_24A286728()
{
  unint64_t result = qword_269779F10;
  if (!qword_269779F10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269779F10);
  }
  return result;
}

unint64_t sub_24A28677C()
{
  unint64_t result = qword_269779F20;
  if (!qword_269779F20)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_269779F18);
    sub_24A286E48(&qword_269779F28, (void (*)(uint64_t))type metadata accessor for Proto_SealedHash.Entry);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269779F20);
  }
  return result;
}

unint64_t sub_24A286820()
{
  unint64_t result = qword_269779F38;
  if (!qword_269779F38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269779F38);
  }
  return result;
}

uint64_t sub_24A286874(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_24A2868D4()
{
  unint64_t result = qword_269779F60;
  if (!qword_269779F60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269779F60);
  }
  return result;
}

unint64_t sub_24A286928()
{
  unint64_t result = qword_269779F70;
  if (!qword_269779F70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269779F70);
  }
  return result;
}

unint64_t sub_24A28697C()
{
  unint64_t result = qword_269779F80;
  if (!qword_269779F80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269779F80);
  }
  return result;
}

unint64_t sub_24A2869D0()
{
  unint64_t result = qword_269779F88;
  if (!qword_269779F88)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2697799D0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269779F88);
  }
  return result;
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

unint64_t sub_24A286A8C()
{
  unint64_t result = qword_269779F98;
  if (!qword_269779F98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269779F98);
  }
  return result;
}

unint64_t sub_24A286AE0()
{
  unint64_t result = qword_269779FB0;
  if (!qword_269779FB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269779FB0);
  }
  return result;
}

unint64_t sub_24A286B34()
{
  unint64_t result = qword_269779FD0;
  if (!qword_269779FD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269779FD0);
  }
  return result;
}

unint64_t sub_24A286B88()
{
  unint64_t result = qword_269779FD8;
  if (!qword_269779FD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269779FD8);
  }
  return result;
}

unint64_t sub_24A286BDC()
{
  unint64_t result = qword_269779FF0;
  if (!qword_269779FF0)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_269779FE8);
    sub_24A241004();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269779FF0);
  }
  return result;
}

unint64_t sub_24A286C50()
{
  unint64_t result = qword_269779FF8;
  if (!qword_269779FF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_269779FF8);
  }
  return result;
}

unint64_t sub_24A286CA4()
{
  unint64_t result = qword_26977A008;
  if (!qword_26977A008)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26977A008);
  }
  return result;
}

unint64_t sub_24A286CF8()
{
  unint64_t result = qword_26977A020;
  if (!qword_26977A020)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26977A020);
  }
  return result;
}

unint64_t sub_24A286D4C()
{
  unint64_t result = qword_26977A028;
  if (!qword_26977A028)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26977A028);
  }
  return result;
}

unint64_t sub_24A286DA0()
{
  unint64_t result = qword_26977A038;
  if (!qword_26977A038)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26977A038);
  }
  return result;
}

unint64_t sub_24A286DF4()
{
  unint64_t result = qword_26977A048;
  if (!qword_26977A048)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26977A048);
  }
  return result;
}

uint64_t sub_24A286E48(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_24A286E90()
{
  unint64_t result = qword_26977A060;
  if (!qword_26977A060)
  {
    sub_24A2A6BC0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26977A060);
  }
  return result;
}

uint64_t sub_24A286EDC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

ValueMetadata *_s10CodingKeysOMa()
{
  return &_s10CodingKeysON;
}

ValueMetadata *_s10CodingKeysOMa_0()
{
  return &_s10CodingKeysON_0;
}

unsigned char *_s10CodingKeysOwst_1(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24A287040);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *_s10CodingKeysOMa_1()
{
  return &_s10CodingKeysON_1;
}

ValueMetadata *_s10CodingKeysOMa_2()
{
  return &_s10CodingKeysON_2;
}

uint64_t _s10CodingKeysOwet_3(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFB) {
    goto LABEL_17;
  }
  if (a2 + 5 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 5) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 5;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v8 = v6 - 6;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *_s10CodingKeysOwst_4(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24A2871ECLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *_s10CodingKeysOMa_3()
{
  return &_s10CodingKeysON_3;
}

ValueMetadata *_s10CodingKeysOMa_4()
{
  return &_s10CodingKeysON_4;
}

ValueMetadata *_s10CodingKeysOMa_5()
{
  return &_s10CodingKeysON_5;
}

ValueMetadata *_s10CodingKeysOMa_6()
{
  return &_s10CodingKeysON_6;
}

ValueMetadata *_s10CodingKeysOMa_7()
{
  return &_s10CodingKeysON_7;
}

ValueMetadata *_s10CodingKeysOMa_8()
{
  return &_s10CodingKeysON_8;
}

unsigned char *_s10CodingKeysOwst_0_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24A287348);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *_s10CodingKeysOMa_9()
{
  return &_s10CodingKeysON_9;
}

unsigned char *_s10CodingKeysOwst_2_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24A28744CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *_s10CodingKeysOMa_10()
{
  return &_s10CodingKeysON_10;
}

unsigned char *_s10CodingKeysOwst_3_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x24A287520);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *_s10CodingKeysOMa_11()
{
  return &_s10CodingKeysON_11;
}

unint64_t sub_24A28755C()
{
  unint64_t result = qword_26977A068;
  if (!qword_26977A068)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26977A068);
  }
  return result;
}

unint64_t sub_24A2875B4()
{
  unint64_t result = qword_26977A070;
  if (!qword_26977A070)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26977A070);
  }
  return result;
}

unint64_t sub_24A28760C()
{
  unint64_t result = qword_26977A078;
  if (!qword_26977A078)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26977A078);
  }
  return result;
}

unint64_t sub_24A287664()
{
  unint64_t result = qword_26977A080;
  if (!qword_26977A080)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26977A080);
  }
  return result;
}

unint64_t sub_24A2876BC()
{
  unint64_t result = qword_26977A088;
  if (!qword_26977A088)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26977A088);
  }
  return result;
}

unint64_t sub_24A287714()
{
  unint64_t result = qword_26977A090;
  if (!qword_26977A090)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26977A090);
  }
  return result;
}

unint64_t sub_24A28776C()
{
  unint64_t result = qword_26977A098;
  if (!qword_26977A098)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26977A098);
  }
  return result;
}

unint64_t sub_24A2877C4()
{
  unint64_t result = qword_26977A0A0;
  if (!qword_26977A0A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26977A0A0);
  }
  return result;
}

unint64_t sub_24A28781C()
{
  unint64_t result = qword_26977A0A8;
  if (!qword_26977A0A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26977A0A8);
  }
  return result;
}

unint64_t sub_24A287874()
{
  unint64_t result = qword_26977A0B0;
  if (!qword_26977A0B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26977A0B0);
  }
  return result;
}

unint64_t sub_24A2878CC()
{
  unint64_t result = qword_26977A0B8;
  if (!qword_26977A0B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26977A0B8);
  }
  return result;
}

unint64_t sub_24A287924()
{
  unint64_t result = qword_26977A0C0;
  if (!qword_26977A0C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26977A0C0);
  }
  return result;
}

unint64_t sub_24A28797C()
{
  unint64_t result = qword_26977A0C8;
  if (!qword_26977A0C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26977A0C8);
  }
  return result;
}

unint64_t sub_24A2879D4()
{
  unint64_t result = qword_26977A0D0;
  if (!qword_26977A0D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26977A0D0);
  }
  return result;
}

unint64_t sub_24A287A2C()
{
  unint64_t result = qword_26977A0D8;
  if (!qword_26977A0D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26977A0D8);
  }
  return result;
}

unint64_t sub_24A287A84()
{
  unint64_t result = qword_26977A0E0;
  if (!qword_26977A0E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26977A0E0);
  }
  return result;
}

unint64_t sub_24A287ADC()
{
  unint64_t result = qword_26977A0E8;
  if (!qword_26977A0E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26977A0E8);
  }
  return result;
}

unint64_t sub_24A287B34()
{
  unint64_t result = qword_26977A0F0;
  if (!qword_26977A0F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26977A0F0);
  }
  return result;
}

unint64_t sub_24A287B8C()
{
  unint64_t result = qword_26977A0F8;
  if (!qword_26977A0F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26977A0F8);
  }
  return result;
}

unint64_t sub_24A287BE4()
{
  unint64_t result = qword_26977A100;
  if (!qword_26977A100)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26977A100);
  }
  return result;
}

unint64_t sub_24A287C3C()
{
  unint64_t result = qword_26977A108;
  if (!qword_26977A108)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26977A108);
  }
  return result;
}

unint64_t sub_24A287C94()
{
  unint64_t result = qword_26977A110;
  if (!qword_26977A110)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26977A110);
  }
  return result;
}

unint64_t sub_24A287CEC()
{
  unint64_t result = qword_26977A118;
  if (!qword_26977A118)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26977A118);
  }
  return result;
}

unint64_t sub_24A287D44()
{
  unint64_t result = qword_26977A120;
  if (!qword_26977A120)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26977A120);
  }
  return result;
}

unint64_t sub_24A287D9C()
{
  unint64_t result = qword_26977A128;
  if (!qword_26977A128)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26977A128);
  }
  return result;
}

unint64_t sub_24A287DF4()
{
  unint64_t result = qword_26977A130;
  if (!qword_26977A130)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26977A130);
  }
  return result;
}

unint64_t sub_24A287E4C()
{
  unint64_t result = qword_26977A138;
  if (!qword_26977A138)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26977A138);
  }
  return result;
}

unint64_t sub_24A287EA4()
{
  unint64_t result = qword_26977A140;
  if (!qword_26977A140)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26977A140);
  }
  return result;
}

unint64_t sub_24A287EFC()
{
  unint64_t result = qword_26977A148;
  if (!qword_26977A148)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26977A148);
  }
  return result;
}

unint64_t sub_24A287F54()
{
  unint64_t result = qword_26977A150;
  if (!qword_26977A150)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26977A150);
  }
  return result;
}

unint64_t sub_24A287FAC()
{
  unint64_t result = qword_26977A158;
  if (!qword_26977A158)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26977A158);
  }
  return result;
}

unint64_t sub_24A288004()
{
  unint64_t result = qword_26977A160;
  if (!qword_26977A160)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26977A160);
  }
  return result;
}

unint64_t sub_24A28805C()
{
  unint64_t result = qword_26977A168;
  if (!qword_26977A168)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26977A168);
  }
  return result;
}

unint64_t sub_24A2880B4()
{
  unint64_t result = qword_26977A170;
  if (!qword_26977A170)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26977A170);
  }
  return result;
}

unint64_t sub_24A28810C()
{
  unint64_t result = qword_26977A178;
  if (!qword_26977A178)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26977A178);
  }
  return result;
}

unint64_t sub_24A288164()
{
  unint64_t result = qword_26977A180;
  if (!qword_26977A180)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26977A180);
  }
  return result;
}

unint64_t sub_24A2881BC()
{
  unint64_t result = qword_26977A188;
  if (!qword_26977A188)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26977A188);
  }
  return result;
}

unint64_t sub_24A288214()
{
  unint64_t result = qword_26977A190;
  if (!qword_26977A190)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26977A190);
  }
  return result;
}

uint64_t sub_24A288268(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD00000000000001CLL && a2 == 0x800000024A2B43C0 || (sub_24A2A7E40() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7365747441706573 && a2 == 0xEE006E6F69746174 || (sub_24A2A7E40() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x74656B6369547061 && a2 == 0xE800000000000000 || (sub_24A2A7E40() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x614864656C616573 && a2 == 0xEC00000073656873 || (sub_24A2A7E40() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000024A2B43E0 || (sub_24A2A7E40() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x726970784579656BLL && a2 == 0xED00006E6F697461)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    char v5 = sub_24A2A7E40();
    swift_bridgeObjectRelease();
    if (v5) {
      return 5;
    }
    else {
      return 6;
    }
  }
}

uint64_t sub_24A288544(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x676C4168736168 && a2 == 0xE700000000000000;
  if (v2 || (sub_24A2A7E40() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x73656972746E65 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = sub_24A2A7E40();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_24A288638(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x747365676964 && a2 == 0xE600000000000000;
  if (v2 || (sub_24A2A7E40() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7367616C66 && a2 == 0xE500000000000000 || (sub_24A2A7E40() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x78657470797263 && a2 == 0xE700000000000000 || (sub_24A2A7E40() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x5378657470797263 && a2 == 0xEB00000000746C61 || (sub_24A2A7E40() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6F43657275636573 && a2 == 0xEC0000006769666ELL)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v6 = sub_24A2A7E40();
    swift_bridgeObjectRelease();
    if (v6) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

uint64_t sub_24A288878(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7972746E65 && a2 == 0xE500000000000000;
  if (v2 || (sub_24A2A7E40() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x617461646174656DLL && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = sub_24A2A7E40();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_24A288964(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6F6973756C636E69 && a2 == 0xEE00666F6F72506ELL;
  if (v2 || (sub_24A2A7E40() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x800000024A2B23A0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = sub_24A2A7E40();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_24A288A78(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x65707954676F6CLL && a2 == 0xE700000000000000;
  if (v2 || (sub_24A2A7E40() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 6843507 && a2 == 0xE300000000000000 || (sub_24A2A7E40() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000019 && a2 == 0x800000024A2B3AD0 || (sub_24A2A7E40() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6574794265646F6ELL && a2 == 0xE900000000000073 || (sub_24A2A7E40() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x69736F5065646F6ELL && a2 == 0xEC0000006E6F6974 || (sub_24A2A7E40() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6570795465646F6ELL && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    char v6 = sub_24A2A7E40();
    swift_bridgeObjectRelease();
    if (v6) {
      return 5;
    }
    else {
      return 6;
    }
  }
}

uint64_t sub_24A288D08(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7463656A626FLL && a2 == 0xE600000000000000;
  if (v2 || (sub_24A2A7E40() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x727574616E676973 && a2 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = sub_24A2A7E40();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_24A288E00(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x727574616E676973 && a2 == 0xE900000000000065;
  if (v2 || (sub_24A2A7E40() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000024A2B3A40 || (sub_24A2A7E40() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x687469726F676C61 && a2 == 0xE90000000000006DLL)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = sub_24A2A7E40();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_24A288F60(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x484C537472617473 && a2 == 0xE800000000000000;
  if (v2 || (sub_24A2A7E40() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x484C53646E65 && a2 == 0xE600000000000000 || (sub_24A2A7E40() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x736148666F6F7270 && a2 == 0xEB00000000736568 || (sub_24A2A7E40() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000024A2B23E0 || (sub_24A2A7E40() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000024A2B2400)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v6 = sub_24A2A7E40();
    swift_bridgeObjectRelease();
    if (v6) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

uint64_t SecureConfigPolicy.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for SEP.SealedHash(0);
  int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

uint64_t sub_24A28920C()
{
  uint64_t v0 = sub_24A2A6C00();
  __swift_allocate_value_buffer(v0, qword_26B174748);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)qword_26B174748);
  if (qword_26B1747C0 != -1) {
    swift_once();
  }
  uint64_t v2 = __swift_project_value_buffer(v0, (uint64_t)qword_26B176970);
  int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t static SecureConfigPolicy.slot.getter@<X0>(uint64_t a1@<X8>)
{
  if (qword_26B174760 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_24A2A6C00();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_26B174748);
  unsigned int v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, v3, v2);
}

uint64_t sub_24A28937C()
{
  uint64_t v0 = sub_24A2A7160();
  __swift_allocate_value_buffer(v0, qword_26B176958);
  __swift_project_value_buffer(v0, (uint64_t)qword_26B176958);
  return sub_24A2A7150();
}

uint64_t SecureConfigPolicy.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_24A28A1F0(a1, a2, type metadata accessor for SEP.SealedHash);
  uint64_t v3 = type metadata accessor for SEP.SealedHash(0);
  unsigned int v4 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56);

  return v4(a2, 0, 1, v3);
}

uint64_t SecureConfigPolicy.evaluate(bundle:context:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  type metadata accessor for SEP.SealedHash.Value(0);
  v3[5] = swift_task_alloc();
  v3[6] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for SEP.SealedHash(0);
  v3[7] = v4;
  v3[8] = *(void *)(v4 - 8);
  v3[9] = swift_task_alloc();
  type metadata accessor for SecureConfigPolicy.SealedHashLoader(0);
  v3[10] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B1748B8);
  v3[11] = swift_task_alloc();
  v3[12] = swift_task_alloc();
  v3[13] = swift_task_alloc();
  v3[14] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_24A289638, 0, 0);
}

uint64_t sub_24A289638()
{
  uint64_t v72 = v0;
  uint64_t v71 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v2 = *(void *)(v0 + 56);
  uint64_t v3 = *(void *)(v0 + 64);
  sub_24A28A2FC(*(void *)(v0 + 32), v1, type metadata accessor for SecureConfigPolicy.SealedHashLoader);
  uint64_t v4 = *(unsigned int (**)(void, void, void))(v3 + 48);
  if (v4(v1, 1, v2) == 1)
  {
    double v5 = AttestationPolicyContext.validatedAttestation.getter((uint64_t)&v67);
    if (v68 >> 60 == 15)
    {
      (*(void (**)(void, uint64_t, uint64_t, void, double))(*(void *)(v0 + 64) + 56))(*(void *)(v0 + 104), 1, 1, *(void *)(v0 + 56), v5);
    }
    else
    {
      int v66 = v4;
      uint64_t v9 = (_OWORD *)(v0 + 120);
      unint64_t v64 = v68;
      uint64_t v65 = v67;
      uint64_t v11 = v69;
      unint64_t v10 = v70;
      if (qword_26B174760 != -1) {
        swift_once();
      }
      uint64_t v12 = sub_24A2A6C00();
      uint64_t v13 = __swift_project_value_buffer(v12, (uint64_t)qword_26B174748);
      uint64_t v14 = *(void *)(v12 - 8);
      uint64_t v15 = swift_task_alloc();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v15, v13, v12);
      *uint64_t v9 = 0u;
      *(_OWORD *)(v0 + 136) = 0u;
      *(_OWORD *)(v0 + 152) = 0u;
      *(_OWORD *)(v0 + 168) = 0u;
      *(_OWORD *)(v0 + 184) = 0u;
      *(void *)(v0 + 198) = 0;
      uint64_t v16 = swift_task_alloc();
      *(void *)(v16 + 16) = v15;
      *(void *)(v16 + 24) = v9;
      sub_24A1EDF2C((void (*)(uint64_t))sub_24A1F0A7C, v16, v65, v64, v11, v10);
      swift_task_dealloc();
      (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v15, v12);
      sub_24A211D18(v65, v64, v11, v10);
      swift_task_dealloc();
      uint64_t v4 = v66;
    }
  }
  else
  {
    uint64_t v6 = *(void *)(v0 + 104);
    uint64_t v7 = *(void *)(v0 + 56);
    uint64_t v8 = *(void *)(v0 + 64);
    sub_24A28A1F0(*(void *)(v0 + 80), v6, type metadata accessor for SEP.SealedHash);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
  }
  uint64_t v17 = *(void *)(v0 + 112);
  uint64_t v18 = *(void *)(v0 + 96);
  sub_24A28A0C0(*(void *)(v0 + 104), v17);
  uint64_t v19 = sub_24A2502E4();
  swift_bridgeObjectRelease();
  sub_24A2563EC(v17, v18);
  uint64_t v20 = *(void *)(v0 + 96);
  if (!v19 && v4(*(void *)(v0 + 96), 1, *(void *)(v0 + 56)) == 1)
  {
    sub_24A28A128(v20);
    if (qword_26B174768 != -1) {
      swift_once();
    }
    uint64_t v21 = sub_24A2A7160();
    __swift_project_value_buffer(v21, (uint64_t)qword_26B176958);
    uint64_t v22 = sub_24A2A7140();
    os_log_type_t v23 = sub_24A2A7B30();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v24 = 0;
      _os_log_impl(&dword_24A19F000, v22, v23, "Device has no secure-config loaded", v24, 2u);
      MEMORY[0x24C5C00A0](v24, -1, -1);
    }

    goto LABEL_36;
  }
  sub_24A28A128(v20);
  uint64_t v25 = sub_24A2502E4();
  if (!v25)
  {
    type metadata accessor for SecureConfigPolicy.Error(0);
    sub_24A28A1A8(&qword_26977A1A0, (void (*)(uint64_t))type metadata accessor for SecureConfigPolicy.Error);
    swift_allocError();
    goto LABEL_19;
  }
  uint64_t v26 = (uint64_t)v25;
  uint64_t v27 = *(void *)(v0 + 88);
  uint64_t v28 = *(void *)(v0 + 56);
  sub_24A2563EC(*(void *)(v0 + 112), v27);
  unsigned int v29 = v4(v27, 1, v28);
  uint64_t v30 = *(void *)(v0 + 88);
  if (v29 == 1)
  {
    swift_bridgeObjectRelease();
    sub_24A28A128(v30);
    type metadata accessor for SecureConfigPolicy.Error(0);
    sub_24A28A1A8(&qword_26977A1A0, (void (*)(uint64_t))type metadata accessor for SecureConfigPolicy.Error);
    swift_allocError();
LABEL_19:
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    goto LABEL_36;
  }
  uint64_t v31 = *(unsigned char **)(v0 + 72);
  sub_24A28A1F0(*(void *)(v0 + 88), (uint64_t)v31, type metadata accessor for SEP.SealedHash);
  if ((*v31 & 4) != 0)
  {
    if (qword_26B174768 != -1) {
      swift_once();
    }
    uint64_t v32 = sub_24A2A7160();
    __swift_project_value_buffer(v32, (uint64_t)qword_26B176958);
    uint64_t v33 = sub_24A2A7140();
    os_log_type_t v34 = sub_24A2A7B30();
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v35 = 0;
      _os_log_impl(&dword_24A19F000, v33, v34, "SecureConfig sealed hash is unexpectedly locked", v35, 2u);
      MEMORY[0x24C5C00A0](v35, -1, -1);
    }
  }
  uint64_t v36 = sub_24A2510AC();
  if (v36)
  {
    uint64_t v38 = v36;
  }
  else
  {
    uint64_t v38 = sub_24A2A7390();
    uint64_t v37 = sub_24A28A1A8((unint64_t *)&qword_26B174A18, MEMORY[0x263F04808]);
  }
  sub_24A251518(v38, v37, v26, *(void *)(v0 + 40));
  uint64_t v39 = *(void *)(v0 + 72);
  uint64_t v40 = *(void *)(v0 + 48);
  uint64_t v41 = *(void *)(v0 + 56);
  uint64_t v42 = *(void *)(v0 + 40);
  swift_bridgeObjectRelease();
  sub_24A28A1F0(v42, v40, type metadata accessor for SEP.SealedHash.Value);
  uint64_t v43 = v39 + *(int *)(v41 + 20);
  uint64_t v44 = sub_24A1B4AA0();
  unint64_t v46 = v45;
  uint64_t v47 = sub_24A1B4AA0();
  unint64_t v49 = v48;
  char v50 = sub_24A1B7D80(v44, v46, v47, v48);
  sub_24A1A5384(v47, v49);
  sub_24A1A5384(v44, v46);
  if (v50)
  {
    if (qword_26B174768 != -1) {
      swift_once();
    }
    uint64_t v51 = sub_24A2A7160();
    __swift_project_value_buffer(v51, (uint64_t)qword_26B176958);
    uint64_t v52 = sub_24A2A7140();
    os_log_type_t v53 = sub_24A2A7B40();
    if (os_log_type_enabled(v52, v53))
    {
      uint64_t v54 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v54 = 0;
      _os_log_impl(&dword_24A19F000, v52, v53, "AttestationBundle passed SecureConfigPolicy: reported secure configs match SEP attestation", v54, 2u);
      MEMORY[0x24C5C00A0](v54, -1, -1);
    }
    uint64_t v55 = *(void *)(v0 + 72);
    uint64_t v56 = *(void *)(v0 + 48);

    sub_24A28A364(v56, type metadata accessor for SEP.SealedHash.Value);
    sub_24A28A364(v55, type metadata accessor for SEP.SealedHash);
  }
  else
  {
    uint64_t v57 = *(void *)(v0 + 72);
    uint64_t v58 = *(void *)(v0 + 48);
    type metadata accessor for SecureConfigPolicy.Error(0);
    sub_24A28A1A8(&qword_26977A1A0, (void (*)(uint64_t))type metadata accessor for SecureConfigPolicy.Error);
    swift_allocError();
    uint64_t v60 = v59;
    uint64_t v61 = v59 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_269779A10) + 48);
    sub_24A28A2FC(v58, v60, type metadata accessor for SEP.SealedHash.Value);
    sub_24A28A2FC(v43, v61, type metadata accessor for SEP.SealedHash.Value);
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    sub_24A28A364(v58, type metadata accessor for SEP.SealedHash.Value);
    sub_24A28A364(v57, type metadata accessor for SEP.SealedHash);
  }
LABEL_36:
  sub_24A28A128(*(void *)(v0 + 112));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v62 = *(uint64_t (**)(void))(v0 + 8);
  return v62();
}

uint64_t type metadata accessor for SecureConfigPolicy.SealedHashLoader(uint64_t a1)
{
  return sub_24A1AE704(a1, (uint64_t *)&unk_26B174738);
}

uint64_t sub_24A28A0C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1748B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_24A28A128(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1748B8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for SecureConfigPolicy.Error(uint64_t a1)
{
  return sub_24A1AE704(a1, (uint64_t *)&unk_26977A1B0);
}

uint64_t sub_24A28A1A8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_24A28A1F0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_24A28A258(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_24A1C50FC;
  return SecureConfigPolicy.evaluate(bundle:context:)(a1, a2);
}

uint64_t sub_24A28A2FC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_24A28A364(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t *initializeBufferWithCopyOfBuffer for SecureConfigPolicy(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(type metadata accessor for SecureConfigPolicy.SealedHashLoader(0) - 8);
  int v5 = *(_DWORD *)(v4 + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = v4;
    uint64_t v7 = type metadata accessor for SEP.SealedHash(0);
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      *(unsigned char *)a1 = *(unsigned char *)a2;
      uint64_t v10 = *(int *)(v7 + 20);
      uint64_t v11 = (uint64_t *)((char *)a1 + v10);
      uint64_t v12 = (uint64_t *)((char *)a2 + v10);
      type metadata accessor for SEP.SealedHash.Value(0);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
      {
        uint64_t v15 = *v12;
        unint64_t v14 = v12[1];
        sub_24A1A52B0(v15, v14);
        *uint64_t v11 = v15;
        v11[1] = v14;
      }
      else
      {
        uint64_t v16 = sub_24A2A7390();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v16 - 8) + 16))(v11, v12, v16);
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
  }
  return a1;
}

unsigned char *initializeWithCopy for SecureConfigPolicy(unsigned char *a1, unsigned char *a2)
{
  uint64_t v4 = type metadata accessor for SEP.SealedHash(0);
  uint64_t v5 = *(void *)(v4 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v5 + 48))(a2, 1, v4))
  {
    uint64_t v6 = type metadata accessor for SecureConfigPolicy.SealedHashLoader(0);
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  else
  {
    *a1 = *a2;
    uint64_t v7 = *(int *)(v4 + 20);
    uint64_t v8 = (uint64_t *)&a1[v7];
    uint64_t v9 = (uint64_t *)&a2[v7];
    type metadata accessor for SEP.SealedHash.Value(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
    {
      uint64_t v12 = *v9;
      unint64_t v11 = v9[1];
      sub_24A1A52B0(v12, v11);
      *uint64_t v8 = v12;
      v8[1] = v11;
    }
    else
    {
      uint64_t v13 = sub_24A2A7390();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v13 - 8) + 16))(v8, v9, v13);
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  }
  return a1;
}

unsigned char *assignWithCopy for SecureConfigPolicy(unsigned char *a1, unsigned char *a2)
{
  uint64_t v4 = type metadata accessor for SEP.SealedHash(0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v5 + 48);
  int v7 = v6(a1, 1, v4);
  int v8 = v6(a2, 1, v4);
  if (v7)
  {
    if (!v8)
    {
      *a1 = *a2;
      uint64_t v9 = *(int *)(v4 + 20);
      uint64_t v10 = (uint64_t *)&a1[v9];
      unint64_t v11 = (uint64_t *)&a2[v9];
      type metadata accessor for SEP.SealedHash.Value(0);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
      {
        uint64_t v14 = *v11;
        unint64_t v13 = v11[1];
        sub_24A1A52B0(v14, v13);
        *uint64_t v10 = v14;
        v10[1] = v13;
      }
      else
      {
        uint64_t v22 = sub_24A2A7390();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v22 - 8) + 16))(v10, v11, v22);
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
      return a1;
    }
LABEL_8:
    uint64_t v15 = type metadata accessor for SecureConfigPolicy.SealedHashLoader(0);
    memcpy(a1, a2, *(void *)(*(void *)(v15 - 8) + 64));
    return a1;
  }
  if (v8)
  {
    sub_24A28A364((uint64_t)a1, type metadata accessor for SEP.SealedHash);
    goto LABEL_8;
  }
  *a1 = *a2;
  if (a1 != a2)
  {
    uint64_t v16 = *(int *)(v4 + 20);
    uint64_t v17 = (uint64_t *)&a1[v16];
    uint64_t v18 = (uint64_t *)&a2[v16];
    sub_24A28A364((uint64_t)&a1[v16], type metadata accessor for SEP.SealedHash.Value);
    type metadata accessor for SEP.SealedHash.Value(0);
    int v19 = swift_getEnumCaseMultiPayload();
    if (v19 == 2)
    {
      uint64_t v25 = *v18;
      unint64_t v24 = v18[1];
      sub_24A1A52B0(v25, v24);
      *uint64_t v17 = v25;
      v17[1] = v24;
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      if (v19 == 1)
      {
        uint64_t v21 = *v18;
        unint64_t v20 = v18[1];
        sub_24A1A52B0(v21, v20);
        *uint64_t v17 = v21;
        v17[1] = v20;
      }
      else
      {
        uint64_t v26 = sub_24A2A7390();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v26 - 8) + 16))(v17, v18, v26);
      }
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

unsigned char *initializeWithTake for SecureConfigPolicy(unsigned char *a1, unsigned char *a2)
{
  uint64_t v4 = type metadata accessor for SEP.SealedHash(0);
  uint64_t v5 = *(void *)(v4 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v5 + 48))(a2, 1, v4))
  {
    uint64_t v6 = type metadata accessor for SecureConfigPolicy.SealedHashLoader(0);
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  else
  {
    *a1 = *a2;
    uint64_t v7 = *(int *)(v4 + 20);
    int v8 = &a1[v7];
    uint64_t v9 = &a2[v7];
    uint64_t v10 = type metadata accessor for SEP.SealedHash.Value(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
    }
    else
    {
      uint64_t v11 = sub_24A2A7390();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v11 - 8) + 32))(v8, v9, v11);
      swift_storeEnumTagMultiPayload();
    }
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  }
  return a1;
}

unsigned char *assignWithTake for SecureConfigPolicy(unsigned char *a1, unsigned char *a2)
{
  uint64_t v4 = type metadata accessor for SEP.SealedHash(0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v5 + 48);
  int v7 = v6(a1, 1, v4);
  int v8 = v6(a2, 1, v4);
  if (!v7)
  {
    if (!v8)
    {
      *a1 = *a2;
      if (a1 == a2) {
        return a1;
      }
      uint64_t v15 = *(int *)(v4 + 20);
      uint64_t v16 = &a1[v15];
      a2 += v15;
      sub_24A28A364((uint64_t)&a1[v15], type metadata accessor for SEP.SealedHash.Value);
      uint64_t v17 = type metadata accessor for SEP.SealedHash.Value(0);
      if (!swift_getEnumCaseMultiPayload())
      {
        uint64_t v20 = sub_24A2A7390();
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v20 - 8) + 32))(v16, a2, v20);
        swift_storeEnumTagMultiPayload();
        return a1;
      }
      size_t v13 = *(void *)(*(void *)(v17 - 8) + 64);
      uint64_t v14 = v16;
      goto LABEL_8;
    }
    sub_24A28A364((uint64_t)a1, type metadata accessor for SEP.SealedHash);
LABEL_7:
    size_t v13 = *(void *)(*(void *)(type metadata accessor for SecureConfigPolicy.SealedHashLoader(0) - 8) + 64);
    uint64_t v14 = a1;
LABEL_8:
    memcpy(v14, a2, v13);
    return a1;
  }
  if (v8) {
    goto LABEL_7;
  }
  *a1 = *a2;
  uint64_t v9 = *(int *)(v4 + 20);
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  uint64_t v12 = type metadata accessor for SEP.SealedHash.Value(0);
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(v10, v11, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    uint64_t v18 = sub_24A2A7390();
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v18 - 8) + 32))(v10, v11, v18);
    swift_storeEnumTagMultiPayload();
  }
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for SecureConfigPolicy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24A28AE6C);
}

uint64_t sub_24A28AE6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SecureConfigPolicy.SealedHashLoader(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for SecureConfigPolicy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24A28AEEC);
}

uint64_t sub_24A28AEEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SecureConfigPolicy.SealedHashLoader(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for SecureConfigPolicy(uint64_t a1)
{
  return sub_24A1AE704(a1, (uint64_t *)&unk_26B174770);
}

uint64_t sub_24A28AF7C()
{
  uint64_t result = type metadata accessor for SecureConfigPolicy.SealedHashLoader(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

char *initializeBufferWithCopyOfBuffer for SecureConfigPolicy.Error(char *a1, id *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = (char *)*a2;
    *(void *)a1 = *a2;
    a1 = &v12[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 2:
        size_t v13 = (char *)*a2;
        uint64_t v14 = (char *)*a2;
        *(void *)a1 = v13;
        goto LABEL_20;
      case 1:
        type metadata accessor for SEP.SealedHash.Value(0);
        int v15 = swift_getEnumCaseMultiPayload();
        if (v15 == 2 || v15 == 1)
        {
          id v16 = *a2;
          unint64_t v17 = (unint64_t)a2[1];
          sub_24A1A52B0((uint64_t)*a2, v17);
          *(void *)a1 = v16;
          *((void *)a1 + 1) = v17;
        }
        else
        {
          uint64_t v18 = sub_24A2A7390();
          (*(void (**)(char *, id *, uint64_t))(*(void *)(v18 - 8) + 16))(a1, a2, v18);
        }
        swift_storeEnumTagMultiPayload();
        uint64_t v19 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_269779A10) + 48);
        uint64_t v20 = (uint64_t *)&a1[v19];
        uint64_t v21 = (uint64_t *)((char *)a2 + v19);
        int v22 = swift_getEnumCaseMultiPayload();
        if (v22 == 2 || v22 == 1)
        {
          uint64_t v24 = *v21;
          unint64_t v23 = v21[1];
          sub_24A1A52B0(v24, v23);
          *uint64_t v20 = v24;
          v20[1] = v23;
        }
        else
        {
          uint64_t v25 = sub_24A2A7390();
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v25 - 8) + 16))(v20, v21, v25);
        }
        swift_storeEnumTagMultiPayload();
        goto LABEL_20;
      case 0:
        id v8 = *a2;
        unint64_t v9 = (unint64_t)a2[1];
        sub_24A1A52B0((uint64_t)*a2, v9);
        *(void *)a1 = v8;
        *((void *)a1 + 1) = v9;
        uint64_t v10 = (uint64_t)a2[2];
        unint64_t v11 = (unint64_t)a2[3];
        sub_24A1A52B0(v10, v11);
        *((void *)a1 + 2) = v10;
        *((void *)a1 + 3) = v11;
LABEL_20:
        swift_storeEnumTagMultiPayload();
        return a1;
    }
    memcpy(a1, a2, *(void *)(v6 + 64));
  }
  return a1;
}

void destroy for SecureConfigPolicy.Error(uint64_t *a1)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    int v7 = (void *)*a1;
  }
  else
  {
    if (EnumCaseMultiPayload != 1)
    {
      if (EnumCaseMultiPayload) {
        return;
      }
      sub_24A1A5384(*a1, a1[1]);
      uint64_t v3 = a1[2];
      unint64_t v4 = a1[3];
      goto LABEL_21;
    }
    type metadata accessor for SEP.SealedHash.Value(0);
    int v5 = swift_getEnumCaseMultiPayload();
    if (v5 == 2 || v5 == 1)
    {
      sub_24A1A5384(*a1, a1[1]);
    }
    else if (!v5)
    {
      uint64_t v6 = sub_24A2A7390();
      (*(void (**)(uint64_t *, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
    }
    id v8 = (uint64_t *)((char *)a1 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_269779A10) + 48));
    int v9 = swift_getEnumCaseMultiPayload();
    if (v9 == 2 || v9 == 1)
    {
      uint64_t v3 = *v8;
      unint64_t v4 = v8[1];
LABEL_21:
      sub_24A1A5384(v3, v4);
      return;
    }
    if (!v9)
    {
      uint64_t v10 = sub_24A2A7390();
      unint64_t v11 = *(void (**)(uint64_t *, uint64_t))(*(void *)(v10 - 8) + 8);
      v11(v8, v10);
    }
  }
}

void *initializeWithCopy for SecureConfigPolicy.Error(void *a1, uint64_t a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      id v11 = *(id *)a2;
      id v12 = *(id *)a2;
      *a1 = v11;
      goto LABEL_18;
    case 1:
      type metadata accessor for SEP.SealedHash.Value(0);
      int v13 = swift_getEnumCaseMultiPayload();
      if (v13 == 2 || v13 == 1)
      {
        id v14 = *(id *)a2;
        unint64_t v15 = *(void *)(a2 + 8);
        sub_24A1A52B0(*(void *)a2, v15);
        *a1 = v14;
        a1[1] = v15;
      }
      else
      {
        uint64_t v16 = sub_24A2A7390();
        (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16))(a1, a2, v16);
      }
      swift_storeEnumTagMultiPayload();
      uint64_t v17 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_269779A10) + 48);
      uint64_t v18 = (void *)((char *)a1 + v17);
      uint64_t v19 = (uint64_t *)(a2 + v17);
      int v20 = swift_getEnumCaseMultiPayload();
      if (v20 == 2 || v20 == 1)
      {
        uint64_t v22 = *v19;
        unint64_t v21 = v19[1];
        sub_24A1A52B0(v22, v21);
        *uint64_t v18 = v22;
        v18[1] = v21;
      }
      else
      {
        uint64_t v23 = sub_24A2A7390();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v23 - 8) + 16))(v18, v19, v23);
      }
      swift_storeEnumTagMultiPayload();
      goto LABEL_18;
    case 0:
      id v7 = *(id *)a2;
      unint64_t v8 = *(void *)(a2 + 8);
      sub_24A1A52B0(*(void *)a2, v8);
      *a1 = v7;
      a1[1] = v8;
      uint64_t v9 = *(void *)(a2 + 16);
      unint64_t v10 = *(void *)(a2 + 24);
      sub_24A1A52B0(v9, v10);
      a1[2] = v9;
      a1[3] = v10;
LABEL_18:
      swift_storeEnumTagMultiPayload();
      return a1;
  }
  memcpy(a1, (const void *)a2, *(void *)(*(void *)(a3 - 8) + 64));
  return a1;
}

void *assignWithCopy for SecureConfigPolicy.Error(void *a1, uint64_t a2, uint64_t a3)
{
  if (a1 != (void *)a2)
  {
    sub_24A28A364((uint64_t)a1, type metadata accessor for SecureConfigPolicy.Error);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 2:
        id v11 = *(id *)a2;
        id v12 = *(id *)a2;
        *a1 = v11;
        goto LABEL_19;
      case 1:
        type metadata accessor for SEP.SealedHash.Value(0);
        int v13 = swift_getEnumCaseMultiPayload();
        if (v13 == 2 || v13 == 1)
        {
          id v14 = *(id *)a2;
          unint64_t v15 = *(void *)(a2 + 8);
          sub_24A1A52B0(*(void *)a2, v15);
          *a1 = v14;
          a1[1] = v15;
        }
        else
        {
          uint64_t v16 = sub_24A2A7390();
          (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16))(a1, a2, v16);
        }
        swift_storeEnumTagMultiPayload();
        uint64_t v17 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_269779A10) + 48);
        uint64_t v18 = (void *)((char *)a1 + v17);
        uint64_t v19 = (uint64_t *)(a2 + v17);
        int v20 = swift_getEnumCaseMultiPayload();
        if (v20 == 2 || v20 == 1)
        {
          uint64_t v22 = *v19;
          unint64_t v21 = v19[1];
          sub_24A1A52B0(v22, v21);
          *uint64_t v18 = v22;
          v18[1] = v21;
        }
        else
        {
          uint64_t v23 = sub_24A2A7390();
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v23 - 8) + 16))(v18, v19, v23);
        }
        swift_storeEnumTagMultiPayload();
        goto LABEL_19;
      case 0:
        id v7 = *(id *)a2;
        unint64_t v8 = *(void *)(a2 + 8);
        sub_24A1A52B0(*(void *)a2, v8);
        *a1 = v7;
        a1[1] = v8;
        uint64_t v9 = *(void *)(a2 + 16);
        unint64_t v10 = *(void *)(a2 + 24);
        sub_24A1A52B0(v9, v10);
        a1[2] = v9;
        a1[3] = v10;
LABEL_19:
        swift_storeEnumTagMultiPayload();
        return a1;
    }
    memcpy(a1, (const void *)a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

char *initializeWithTake for SecureConfigPolicy.Error(char *a1, char *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for SEP.SealedHash.Value(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
    else
    {
      uint64_t v7 = sub_24A2A7390();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    uint64_t v8 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_269779A10) + 48);
    uint64_t v9 = &a1[v8];
    unint64_t v10 = &a2[v8];
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v9, v10, *(void *)(*(void *)(v6 - 8) + 64));
    }
    else
    {
      uint64_t v11 = sub_24A2A7390();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

char *assignWithTake for SecureConfigPolicy.Error(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_24A28A364((uint64_t)a1, type metadata accessor for SecureConfigPolicy.Error);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for SEP.SealedHash.Value(0);
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
      }
      else
      {
        uint64_t v7 = sub_24A2A7390();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
        swift_storeEnumTagMultiPayload();
      }
      uint64_t v8 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_269779A10) + 48);
      uint64_t v9 = &a1[v8];
      unint64_t v10 = &a2[v8];
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(v9, v10, *(void *)(*(void *)(v6 - 8) + 64));
      }
      else
      {
        uint64_t v11 = sub_24A2A7390();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
        swift_storeEnumTagMultiPayload();
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_24A28BCAC()
{
  uint64_t v3 = " ";
  uint64_t result = type metadata accessor for SEP.SealedHash.Value(319);
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    unint64_t v4 = &v2;
    int v5 = &unk_24A2B1158;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t *sub_24A28BD58(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    uint64_t v7 = type metadata accessor for SEP.SealedHash(0);
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      *(unsigned char *)a1 = *(unsigned char *)a2;
      uint64_t v10 = *(int *)(v7 + 20);
      uint64_t v11 = (uint64_t *)((char *)a1 + v10);
      id v12 = (uint64_t *)((char *)a2 + v10);
      type metadata accessor for SEP.SealedHash.Value(0);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
      {
        uint64_t v15 = *v12;
        unint64_t v14 = v12[1];
        sub_24A1A52B0(v15, v14);
        *uint64_t v11 = v15;
        v11[1] = v14;
      }
      else
      {
        uint64_t v16 = sub_24A2A7390();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v16 - 8) + 16))(v11, v12, v16);
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t _s16CloudAttestation18SecureConfigPolicyVwxx_0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SEP.SealedHash(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(a1, 1, v2);
  if (!result)
  {
    unint64_t v4 = (uint64_t *)(a1 + *(int *)(v2 + 20));
    type metadata accessor for SEP.SealedHash.Value(0);
    uint64_t result = swift_getEnumCaseMultiPayload();
    if (result == 2 || result == 1)
    {
      uint64_t v7 = *v4;
      unint64_t v8 = v4[1];
      return sub_24A1A5384(v7, v8);
    }
    else if (!result)
    {
      uint64_t v5 = sub_24A2A7390();
      uint64_t v6 = *(uint64_t (**)(uint64_t *, uint64_t))(*(void *)(v5 - 8) + 8);
      return v6(v4, v5);
    }
  }
  return result;
}

unsigned char *sub_24A28C034(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SEP.SealedHash(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    *a1 = *a2;
    uint64_t v8 = *(int *)(v6 + 20);
    uint64_t v9 = (uint64_t *)&a1[v8];
    uint64_t v10 = (uint64_t *)&a2[v8];
    type metadata accessor for SEP.SealedHash.Value(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
    {
      uint64_t v13 = *v10;
      unint64_t v12 = v10[1];
      sub_24A1A52B0(v13, v12);
      *uint64_t v9 = v13;
      v9[1] = v12;
    }
    else
    {
      uint64_t v14 = sub_24A2A7390();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v14 - 8) + 16))(v9, v10, v14);
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  return a1;
}

unsigned char *sub_24A28C1D0(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SEP.SealedHash(0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      *a1 = *a2;
      uint64_t v11 = *(int *)(v6 + 20);
      unint64_t v12 = (uint64_t *)&a1[v11];
      uint64_t v13 = (uint64_t *)&a2[v11];
      type metadata accessor for SEP.SealedHash.Value(0);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2 || EnumCaseMultiPayload == 1)
      {
        uint64_t v16 = *v13;
        unint64_t v15 = v13[1];
        sub_24A1A52B0(v16, v15);
        *unint64_t v12 = v16;
        v12[1] = v15;
      }
      else
      {
        uint64_t v23 = sub_24A2A7390();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v23 - 8) + 16))(v12, v13, v23);
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      return a1;
    }
LABEL_8:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  if (v10)
  {
    sub_24A28A364((uint64_t)a1, type metadata accessor for SEP.SealedHash);
    goto LABEL_8;
  }
  *a1 = *a2;
  if (a1 != a2)
  {
    uint64_t v17 = *(int *)(v6 + 20);
    uint64_t v18 = (uint64_t *)&a1[v17];
    uint64_t v19 = (uint64_t *)&a2[v17];
    sub_24A28A364((uint64_t)&a1[v17], type metadata accessor for SEP.SealedHash.Value);
    type metadata accessor for SEP.SealedHash.Value(0);
    int v20 = swift_getEnumCaseMultiPayload();
    if (v20 == 2)
    {
      uint64_t v26 = *v19;
      unint64_t v25 = v19[1];
      sub_24A1A52B0(v26, v25);
      *uint64_t v18 = v26;
      v18[1] = v25;
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      if (v20 == 1)
      {
        uint64_t v22 = *v19;
        unint64_t v21 = v19[1];
        sub_24A1A52B0(v22, v21);
        *uint64_t v18 = v22;
        v18[1] = v21;
      }
      else
      {
        uint64_t v27 = sub_24A2A7390();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v27 - 8) + 16))(v18, v19, v27);
      }
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

unsigned char *sub_24A28C4AC(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SEP.SealedHash(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    *a1 = *a2;
    uint64_t v8 = *(int *)(v6 + 20);
    int v9 = &a1[v8];
    int v10 = &a2[v8];
    uint64_t v11 = type metadata accessor for SEP.SealedHash.Value(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
    }
    else
    {
      uint64_t v12 = sub_24A2A7390();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v12 - 8) + 32))(v9, v10, v12);
      swift_storeEnumTagMultiPayload();
    }
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  return a1;
}

unsigned char *sub_24A28C63C(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SEP.SealedHash(0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      *a1 = *a2;
      if (a1 == a2) {
        return a1;
      }
      uint64_t v17 = *(int *)(v6 + 20);
      uint64_t v18 = &a1[v17];
      a2 += v17;
      sub_24A28A364((uint64_t)&a1[v17], type metadata accessor for SEP.SealedHash.Value);
      uint64_t v19 = type metadata accessor for SEP.SealedHash.Value(0);
      if (!swift_getEnumCaseMultiPayload())
      {
        uint64_t v22 = sub_24A2A7390();
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v22 - 8) + 32))(v18, a2, v22);
        swift_storeEnumTagMultiPayload();
        return a1;
      }
      size_t v15 = *(void *)(*(void *)(v19 - 8) + 64);
      uint64_t v16 = v18;
      goto LABEL_8;
    }
    sub_24A28A364((uint64_t)a1, type metadata accessor for SEP.SealedHash);
LABEL_7:
    size_t v15 = *(void *)(*(void *)(a3 - 8) + 64);
    uint64_t v16 = a1;
LABEL_8:
    memcpy(v16, a2, v15);
    return a1;
  }
  if (v10) {
    goto LABEL_7;
  }
  *a1 = *a2;
  uint64_t v11 = *(int *)(v6 + 20);
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  uint64_t v14 = type metadata accessor for SEP.SealedHash.Value(0);
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(v12, v13, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    uint64_t v20 = sub_24A2A7390();
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v20 - 8) + 32))(v12, v13, v20);
    swift_storeEnumTagMultiPayload();
  }
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  return a1;
}

uint64_t sub_24A28C8D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24A28C8E8);
}

uint64_t sub_24A28C8E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SEP.SealedHash(0);
  unsigned int v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(a1, a2, v4);
  if (v5 >= 2) {
    return v5 - 1;
  }
  else {
    return 0;
  }
}

uint64_t sub_24A28C954(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24A28C968);
}

uint64_t sub_24A28C968(uint64_t a1, int a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = (a2 + 1);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = type metadata accessor for SEP.SealedHash(0);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(a1, v5, a3, v6);
}

uint64_t sub_24A28C9E8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SEP.SealedHash(0);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48);

  return v3(a1, 1, v2);
}

uint64_t sub_24A28CA50(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SEP.SealedHash(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, 1, v4);
}

uint64_t sub_24A28CAC0()
{
  uint64_t result = type metadata accessor for SEP.SealedHash(319);
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t *sub_24A28CB38(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a1;
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = sub_24A2A6E10();
    int v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t sub_24A28CC1C(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = sub_24A2A6E10();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

void *sub_24A28CC94(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = sub_24A2A6E10();
  uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
  swift_bridgeObjectRetain();
  v8(v5, v6, v7);
  return a1;
}

void *sub_24A28CD2C(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_24A2A6E10();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

void *sub_24A28CDC0(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = sub_24A2A6E10();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

void *sub_24A28CE3C(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_24A2A6E10();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t sub_24A28CEC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24A28CEDC);
}

uint64_t sub_24A28CEDC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_24A2A6E10();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_24A28CF8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24A28CFA0);
}

void *sub_24A28CFA0(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_24A2A6E10();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for Proto_SealedHashLedger(uint64_t a1)
{
  return sub_24A1AE704(a1, (uint64_t *)&unk_26B1747F0);
}

uint64_t sub_24A28D068()
{
  return sub_24A2A2A80();
}

uint64_t *sub_24A28D078(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_24A2A6E10();
    uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    uint64_t v9 = *(int *)(a3 + 20);
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for ATLogProofs(0);
    uint64_t v13 = *(void *)(v12 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1742D8);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      uint64_t v63 = v13;
      v8((uint64_t *)v10, (uint64_t *)v11, v7);
      uint64_t v16 = *(int *)(v12 + 20);
      uint64_t v17 = &v10[v16];
      uint64_t v18 = &v11[v16];
      uint64_t v19 = type metadata accessor for LogEntry(0);
      uint64_t v20 = *(void *)(v19 - 8);
      uint64_t v62 = (void (*)(char *, char *, uint64_t))v8;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
      {
        uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174940);
        memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
      }
      else
      {
        uint64_t v60 = v20;
        uint64_t v61 = v10;
        *(void *)uint64_t v17 = *(void *)v18;
        v17[8] = v18[8];
        uint64_t v22 = (void (*)(char *, char *, uint64_t))v8;
        uint64_t v23 = *((void *)v18 + 3);
        *((void *)v17 + 2) = *((void *)v18 + 2);
        unint64_t v24 = *((void *)v18 + 4);
        swift_bridgeObjectRetain();
        sub_24A1A52B0(v23, v24);
        *((void *)v17 + 3) = v23;
        *((void *)v17 + 4) = v24;
        uint64_t v25 = *((void *)v18 + 6);
        *((void *)v17 + 5) = *((void *)v18 + 5);
        *((void *)v17 + 6) = v25;
        v17[56] = v18[56];
        v22(&v17[*(int *)(v19 + 36)], &v18[*(int *)(v19 + 36)], v7);
        uint64_t v26 = *(int *)(v19 + 40);
        uint64_t v27 = &v17[v26];
        uint64_t v28 = &v18[v26];
        uint64_t v29 = type metadata accessor for SignedObject(0);
        uint64_t v30 = *(void *)(v29 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
        {
          uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174320);
          memcpy(v27, v28, *(void *)(*(void *)(v31 - 8) + 64));
          uint64_t v32 = v60;
          uint64_t v10 = v61;
        }
        else
        {
          uint64_t v55 = v30;
          uint64_t v57 = v19;
          uint64_t v58 = v17;
          uint64_t v33 = v27;
          uint64_t v59 = v29;
          uint64_t v34 = *(void *)v28;
          unint64_t v35 = *((void *)v28 + 1);
          sub_24A1A52B0(*(void *)v28, v35);
          *(void *)uint64_t v33 = v34;
          *((void *)v33 + 1) = v35;
          uint64_t v36 = v59;
          v62(&v33[*(int *)(v59 + 20)], &v28[*(int *)(v59 + 20)], v7);
          uint64_t v37 = *(int *)(v59 + 24);
          uint64_t v56 = v33;
          uint64_t v38 = &v33[v37];
          uint64_t v39 = (uint64_t *)&v28[v37];
          uint64_t v40 = type metadata accessor for Signature(0);
          uint64_t v41 = *(void *)(v40 - 8);
          if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
          {
            uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
            memcpy(v38, v39, *(void *)(*(void *)(v42 - 8) + 64));
          }
          else
          {
            uint64_t v43 = *v39;
            unint64_t v44 = v39[1];
            sub_24A1A52B0(*v39, v44);
            *(void *)uint64_t v38 = v43;
            *((void *)v38 + 1) = v44;
            uint64_t v45 = v39[2];
            unint64_t v46 = v39[3];
            sub_24A1A52B0(v45, v46);
            *((void *)v38 + 2) = v45;
            *((void *)v38 + 3) = v46;
            uint64_t v36 = v59;
            *((void *)v38 + 4) = v39[4];
            v38[40] = *((unsigned char *)v39 + 40);
            v62(&v38[*(int *)(v40 + 28)], (char *)v39 + *(int *)(v40 + 28), v7);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
          }
          uint64_t v32 = v60;
          (*(void (**)(char *, void, uint64_t, uint64_t))(v55 + 56))(v56, 0, 1, v36);
          uint64_t v10 = v61;
          uint64_t v19 = v57;
          uint64_t v17 = v58;
        }
        (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(v17, 0, 1, v19);
      }
      uint64_t v47 = *(int *)(v12 + 24);
      unint64_t v48 = &v10[v47];
      unint64_t v49 = &v11[v47];
      uint64_t v50 = type metadata accessor for LogConsistency(0);
      uint64_t v51 = *(void *)(v50 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48))(v49, 1, v50))
      {
        uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1745E0);
        memcpy(v48, v49, *(void *)(*(void *)(v52 - 8) + 64));
      }
      else
      {
        v62(v48, v49, v7);
        *(void *)&v48[*(int *)(v50 + 20)] = *(void *)&v49[*(int *)(v50 + 20)];
        os_log_type_t v53 = *(void (**)(char *, void, uint64_t, uint64_t))(v51 + 56);
        swift_retain();
        v53(v48, 0, 1, v50);
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v63 + 56))(v10, 0, 1, v12);
    }
  }
  return a1;
}

uint64_t sub_24A28D67C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A2A6E10();
  int v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v5(a1, v4);
  uint64_t v6 = a1 + *(int *)(a2 + 20);
  uint64_t v7 = type metadata accessor for ATLogProofs(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7);
  if (!result)
  {
    v5(v6, v4);
    uint64_t v9 = v6 + *(int *)(v7 + 20);
    uint64_t v10 = type metadata accessor for LogEntry(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v9, 1, v10))
    {
      swift_bridgeObjectRelease();
      sub_24A1A5384(*(void *)(v9 + 24), *(void *)(v9 + 32));
      v5(v9 + *(int *)(v10 + 36), v4);
      uint64_t v11 = v9 + *(int *)(v10 + 40);
      uint64_t v12 = type metadata accessor for SignedObject(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48))(v11, 1, v12))
      {
        sub_24A1A5384(*(void *)v11, *(void *)(v11 + 8));
        v5(v11 + *(int *)(v12 + 20), v4);
        uint64_t v13 = v11 + *(int *)(v12 + 24);
        uint64_t v14 = type metadata accessor for Signature(0);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48))(v13, 1, v14))
        {
          sub_24A1A5384(*(void *)v13, *(void *)(v13 + 8));
          sub_24A1A5384(*(void *)(v13 + 16), *(void *)(v13 + 24));
          v5(v13 + *(int *)(v14 + 28), v4);
        }
      }
    }
    uint64_t v15 = v6 + *(int *)(v7 + 24);
    uint64_t v16 = type metadata accessor for LogConsistency(0);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48))(v15, 1, v16);
    if (!result)
    {
      v5(v15, v4);
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_24A28D938(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_24A2A6E10();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = type metadata accessor for ATLogProofs(0);
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1742D8);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    uint64_t v61 = v12;
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v14 = *(int *)(v11 + 20);
    uint64_t v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    uint64_t v17 = type metadata accessor for LogEntry(0);
    uint64_t v18 = *(void *)(v17 - 8);
    uint64_t v60 = (void (*)(char *, char *, uint64_t))v7;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174940);
      memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
    }
    else
    {
      uint64_t v58 = v18;
      uint64_t v59 = v9;
      *(void *)uint64_t v15 = *(void *)v16;
      v15[8] = v16[8];
      uint64_t v20 = (void (*)(char *, char *, uint64_t))v7;
      uint64_t v21 = *((void *)v16 + 3);
      *((void *)v15 + 2) = *((void *)v16 + 2);
      unint64_t v22 = *((void *)v16 + 4);
      swift_bridgeObjectRetain();
      sub_24A1A52B0(v21, v22);
      *((void *)v15 + 3) = v21;
      *((void *)v15 + 4) = v22;
      uint64_t v23 = *((void *)v16 + 6);
      *((void *)v15 + 5) = *((void *)v16 + 5);
      *((void *)v15 + 6) = v23;
      v15[56] = v16[56];
      v20(&v15[*(int *)(v17 + 36)], &v16[*(int *)(v17 + 36)], v6);
      uint64_t v24 = *(int *)(v17 + 40);
      uint64_t v25 = &v15[v24];
      uint64_t v26 = &v16[v24];
      uint64_t v27 = type metadata accessor for SignedObject(0);
      uint64_t v28 = *(void *)(v27 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
      {
        uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174320);
        memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
        uint64_t v30 = v58;
        uint64_t v9 = v59;
      }
      else
      {
        uint64_t v53 = v28;
        uint64_t v55 = v17;
        uint64_t v56 = v15;
        uint64_t v31 = v25;
        uint64_t v57 = v27;
        uint64_t v32 = *(void *)v26;
        unint64_t v33 = *((void *)v26 + 1);
        sub_24A1A52B0(*(void *)v26, v33);
        *(void *)uint64_t v31 = v32;
        *((void *)v31 + 1) = v33;
        uint64_t v34 = v57;
        v60(&v31[*(int *)(v57 + 20)], &v26[*(int *)(v57 + 20)], v6);
        uint64_t v35 = *(int *)(v57 + 24);
        uint64_t v54 = v31;
        uint64_t v36 = &v31[v35];
        uint64_t v37 = (uint64_t *)&v26[v35];
        uint64_t v38 = type metadata accessor for Signature(0);
        uint64_t v39 = *(void *)(v38 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38))
        {
          uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
          memcpy(v36, v37, *(void *)(*(void *)(v40 - 8) + 64));
        }
        else
        {
          uint64_t v41 = *v37;
          unint64_t v42 = v37[1];
          sub_24A1A52B0(*v37, v42);
          *(void *)uint64_t v36 = v41;
          *((void *)v36 + 1) = v42;
          uint64_t v43 = v37[2];
          unint64_t v44 = v37[3];
          sub_24A1A52B0(v43, v44);
          *((void *)v36 + 2) = v43;
          *((void *)v36 + 3) = v44;
          uint64_t v34 = v57;
          *((void *)v36 + 4) = v37[4];
          v36[40] = *((unsigned char *)v37 + 40);
          v60(&v36[*(int *)(v38 + 28)], (char *)v37 + *(int *)(v38 + 28), v6);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
        }
        uint64_t v30 = v58;
        (*(void (**)(char *, void, uint64_t, uint64_t))(v53 + 56))(v54, 0, 1, v34);
        uint64_t v9 = v59;
        uint64_t v17 = v55;
        uint64_t v15 = v56;
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v30 + 56))(v15, 0, 1, v17);
    }
    uint64_t v45 = *(int *)(v11 + 24);
    unint64_t v46 = &v9[v45];
    uint64_t v47 = &v10[v45];
    uint64_t v48 = type metadata accessor for LogConsistency(0);
    uint64_t v49 = *(void *)(v48 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v47, 1, v48))
    {
      uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1745E0);
      memcpy(v46, v47, *(void *)(*(void *)(v50 - 8) + 64));
    }
    else
    {
      v60(v46, v47, v6);
      *(void *)&v46[*(int *)(v48 + 20)] = *(void *)&v47[*(int *)(v48 + 20)];
      uint64_t v51 = *(void (**)(char *, void, uint64_t, uint64_t))(v49 + 56);
      swift_retain();
      v51(v46, 0, 1, v48);
    }
    (*(void (**)(char *, void, uint64_t, uint64_t))(v61 + 56))(v9, 0, 1, v11);
  }
  return a1;
}

uint64_t sub_24A28DEEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_24A2A6E10();
  uint64_t v174 = *(void *)(v6 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v174 + 24);
  uint64_t v173 = v6;
  v7(a1, a2);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = type metadata accessor for ATLogProofs(0);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  uint64_t v14 = v9;
  LODWORD(v9) = v13(v9, 1, v11);
  v175 = v10;
  uint64_t v15 = v10;
  uint64_t v16 = v11;
  int v17 = v13((uint64_t)v15, 1, v11);
  if (!v9)
  {
    v172 = (void (*)(char *, char *, uint64_t))v7;
    if (v17)
    {
      sub_24A28EF84(v14, type metadata accessor for ATLogProofs);
      goto LABEL_7;
    }
    uint64_t v169 = a1;
    ((void (*)(uint64_t, char *, uint64_t))v7)(v14, v175, v173);
    uint64_t v29 = *(int *)(v11 + 20);
    uint64_t v30 = (char *)(v14 + v29);
    uint64_t v31 = &v175[v29];
    uint64_t v32 = type metadata accessor for LogEntry(0);
    uint64_t v33 = *(void *)(v32 - 8);
    uint64_t v34 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v33 + 48);
    int v35 = v34(v30, 1, v32);
    int v36 = v34(v31, 1, v32);
    if (v35)
    {
      if (!v36)
      {
        uint64_t v37 = *(void *)v31;
        v30[8] = v31[8];
        *(void *)uint64_t v30 = v37;
        *((void *)v30 + 2) = *((void *)v31 + 2);
        uint64_t v38 = *((void *)v31 + 3);
        unint64_t v39 = *((void *)v31 + 4);
        swift_bridgeObjectRetain();
        sub_24A1A52B0(v38, v39);
        *((void *)v30 + 3) = v38;
        *((void *)v30 + 4) = v39;
        *((void *)v30 + 5) = *((void *)v31 + 5);
        uint64_t v40 = *((void *)v31 + 6);
        v30[56] = v31[56];
        *((void *)v30 + 6) = v40;
        v163 = *(void (**)(char *, char *, uint64_t))(v174 + 16);
        v163(&v30[*(int *)(v32 + 36)], &v31[*(int *)(v32 + 36)], v173);
        uint64_t v41 = *(int *)(v32 + 40);
        unint64_t v42 = &v30[v41];
        uint64_t v43 = &v31[v41];
        uint64_t v44 = type metadata accessor for SignedObject(0);
        uint64_t v45 = *(void *)(v44 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v43, 1, v44))
        {
          uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174320);
          memcpy(v42, v43, *(void *)(*(void *)(v46 - 8) + 64));
          a1 = v169;
        }
        else
        {
          uint64_t v154 = v45;
          v161 = v42;
          uint64_t v88 = *(void *)v43;
          unint64_t v87 = *((void *)v43 + 1);
          sub_24A1A52B0(*(void *)v43, v87);
          void *v161 = v88;
          uint64_t v89 = v161;
          v161[1] = v87;
          v163((char *)v161 + *(int *)(v44 + 20), &v43[*(int *)(v44 + 20)], v173);
          uint64_t v157 = v44;
          uint64_t v90 = *(int *)(v44 + 24);
          uint64_t v91 = (void *)((char *)v161 + v90);
          uint64_t v92 = &v43[v90];
          uint64_t v93 = type metadata accessor for Signature(0);
          uint64_t v94 = *(void *)(v93 - 8);
          uint64_t v151 = v93;
          if ((*(unsigned int (**)(char *, uint64_t))(v94 + 48))(v92, 1))
          {
            uint64_t v95 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
            memcpy(v91, v92, *(void *)(*(void *)(v95 - 8) + 64));
          }
          else
          {
            unint64_t v108 = *((void *)v92 + 1);
            uint64_t v149 = *(void *)v92;
            sub_24A1A52B0(*(void *)v92, v108);
            *uint64_t v91 = v149;
            v91[1] = v108;
            unint64_t v109 = *((void *)v92 + 3);
            uint64_t v150 = *((void *)v92 + 2);
            sub_24A1A52B0(v150, v109);
            v91[2] = v150;
            v91[3] = v109;
            uint64_t v89 = v161;
            uint64_t v110 = *((void *)v92 + 4);
            *((unsigned char *)v91 + 40) = v92[40];
            v91[4] = v110;
            v163((char *)v91 + *(int *)(v151 + 28), &v92[*(int *)(v151 + 28)], v173);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v94 + 56))(v91, 0, 1, v151);
          }
          (*(void (**)(void *, void, uint64_t, uint64_t))(v154 + 56))(v89, 0, 1, v157);
          a1 = v169;
        }
        (*(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
        goto LABEL_40;
      }
    }
    else
    {
      if (!v36)
      {
        uint64_t v67 = *(void *)v31;
        v30[8] = v31[8];
        *(void *)uint64_t v30 = v67;
        *((void *)v30 + 2) = *((void *)v31 + 2);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t v68 = *((void *)v31 + 3);
        unint64_t v69 = *((void *)v31 + 4);
        sub_24A1A52B0(v68, v69);
        uint64_t v70 = *((void *)v30 + 3);
        unint64_t v71 = *((void *)v30 + 4);
        *((void *)v30 + 3) = v68;
        *((void *)v30 + 4) = v69;
        sub_24A1A5384(v70, v71);
        *((void *)v30 + 5) = *((void *)v31 + 5);
        uint64_t v72 = *((void *)v31 + 6);
        v30[56] = v31[56];
        *((void *)v30 + 6) = v72;
        ((void (*)(char *, char *, uint64_t))v7)(&v30[*(int *)(v32 + 36)], &v31[*(int *)(v32 + 36)], v173);
        uint64_t v73 = *(int *)(v32 + 40);
        uint64_t v74 = (uint64_t *)&v30[v73];
        uint64_t v75 = (uint64_t *)&v31[v73];
        uint64_t v76 = type metadata accessor for SignedObject(0);
        uint64_t v168 = *(void *)(v76 - 8);
        uint64_t v77 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v168 + 48);
        LODWORD(v68) = v77(v74, 1, v76);
        int v78 = v77(v75, 1, v76);
        if (v68)
        {
          a1 = v169;
          if (!v78)
          {
            uint64_t v79 = *v75;
            unint64_t v80 = v75[1];
            sub_24A1A52B0(*v75, v80);
            *uint64_t v74 = v79;
            v74[1] = v80;
            uint64_t v81 = *(void (**)(char *, char *, uint64_t))(v174 + 16);
            v81((char *)v74 + *(int *)(v76 + 20), (char *)v75 + *(int *)(v76 + 20), v173);
            uint64_t v82 = *(int *)(v76 + 24);
            uint64_t v83 = (uint64_t *)((char *)v74 + v82);
            uint64_t v84 = (uint64_t *)((char *)v75 + v82);
            uint64_t v85 = type metadata accessor for Signature(0);
            uint64_t v166 = *(void *)(v85 - 8);
            if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v166 + 48))(v84, 1, v85))
            {
              uint64_t v86 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
              memcpy(v83, v84, *(void *)(*(void *)(v86 - 8) + 64));
            }
            else
            {
              unint64_t v158 = v84[1];
              v162 = v81;
              uint64_t v136 = *v84;
              sub_24A1A52B0(*v84, v158);
              *uint64_t v83 = v136;
              v83[1] = v158;
              uint64_t v137 = v84[2];
              unint64_t v159 = v84[3];
              sub_24A1A52B0(v137, v159);
              v83[2] = v137;
              v83[3] = v159;
              uint64_t v138 = v84[4];
              *((unsigned char *)v83 + 40) = *((unsigned char *)v84 + 40);
              v83[4] = v138;
              v162((char *)v83 + *(int *)(v85 + 28), (char *)v84 + *(int *)(v85 + 28), v173);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v166 + 56))(v83, 0, 1, v85);
            }
            a1 = v169;
            (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v168 + 56))(v74, 0, 1, v76);
            goto LABEL_40;
          }
        }
        else
        {
          a1 = v169;
          if (!v78)
          {
            uint64_t v120 = *v75;
            unint64_t v121 = v75[1];
            sub_24A1A52B0(*v75, v121);
            uint64_t v122 = *v74;
            unint64_t v123 = v74[1];
            *uint64_t v74 = v120;
            v74[1] = v121;
            sub_24A1A5384(v122, v123);
            ((void (*)(char *, char *, uint64_t))v7)((char *)v74 + *(int *)(v76 + 20), (char *)v75 + *(int *)(v76 + 20), v173);
            uint64_t v124 = *(int *)(v76 + 24);
            uint64_t v125 = (uint64_t *)((char *)v74 + v124);
            unint64_t v126 = (char *)v75 + v124;
            uint64_t v127 = type metadata accessor for Signature(0);
            uint64_t v128 = *(void *)(v127 - 8);
            v129 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v128 + 48);
            LODWORD(v120) = v129(v125, 1, v127);
            int v130 = v129((uint64_t *)v126, 1, v127);
            if (v120)
            {
              a1 = v169;
              if (!v130)
              {
                uint64_t v132 = *(void *)v126;
                unint64_t v131 = *((void *)v126 + 1);
                sub_24A1A52B0(*(void *)v126, v131);
                *uint64_t v125 = v132;
                v125[1] = v131;
                uint64_t v134 = *((void *)v126 + 2);
                unint64_t v133 = *((void *)v126 + 3);
                sub_24A1A52B0(v134, v133);
                v125[2] = v134;
                v125[3] = v133;
                uint64_t v135 = *((void *)v126 + 4);
                *((unsigned char *)v125 + 40) = v126[40];
                v125[4] = v135;
                (*(void (**)(char *, char *, uint64_t))(v174 + 16))((char *)v125 + *(int *)(v127 + 28), &v126[*(int *)(v127 + 28)], v173);
                (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v128 + 56))(v125, 0, 1, v127);
                goto LABEL_40;
              }
            }
            else
            {
              a1 = v169;
              if (!v130)
              {
                uint64_t v141 = *(void *)v126;
                unint64_t v140 = *((void *)v126 + 1);
                sub_24A1A52B0(*(void *)v126, v140);
                uint64_t v142 = *v125;
                unint64_t v143 = v125[1];
                *uint64_t v125 = v141;
                v125[1] = v140;
                sub_24A1A5384(v142, v143);
                uint64_t v145 = *((void *)v126 + 2);
                unint64_t v144 = *((void *)v126 + 3);
                sub_24A1A52B0(v145, v144);
                uint64_t v146 = v125[2];
                unint64_t v147 = v125[3];
                v125[2] = v145;
                v125[3] = v144;
                sub_24A1A5384(v146, v147);
                uint64_t v148 = *((void *)v126 + 4);
                *((unsigned char *)v125 + 40) = v126[40];
                v125[4] = v148;
                v172((char *)v125 + *(int *)(v127 + 28), &v126[*(int *)(v127 + 28)], v173);
                goto LABEL_40;
              }
              sub_24A28EF84((uint64_t)v125, type metadata accessor for Signature);
            }
            uint64_t v139 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
            memcpy(v125, v126, *(void *)(*(void *)(v139 - 8) + 64));
            goto LABEL_40;
          }
          sub_24A28EF84((uint64_t)v74, type metadata accessor for SignedObject);
        }
        uint64_t v107 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174320);
        memcpy(v74, v75, *(void *)(*(void *)(v107 - 8) + 64));
LABEL_40:
        uint64_t v111 = *(int *)(v11 + 24);
        uint64_t v112 = v14 + v111;
        uint64_t v113 = &v175[v111];
        uint64_t v114 = type metadata accessor for LogConsistency(0);
        uint64_t v115 = *(void *)(v114 - 8);
        uint64_t v116 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v115 + 48);
        int v117 = v116(v112, 1, v114);
        int v118 = v116((uint64_t)v113, 1, v114);
        if (v117)
        {
          if (!v118)
          {
            (*(void (**)(uint64_t, char *, uint64_t))(v174 + 16))(v112, v113, v173);
            *(void *)(v112 + *(int *)(v114 + 20)) = *(void *)&v113[*(int *)(v114 + 20)];
            long long v119 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v115 + 56);
            swift_retain();
            v119(v112, 0, 1, v114);
            return a1;
          }
        }
        else
        {
          if (!v118)
          {
            v172((char *)v112, v113, v173);
            *(void *)(v112 + *(int *)(v114 + 20)) = *(void *)&v113[*(int *)(v114 + 20)];
            swift_retain();
            swift_release();
            return a1;
          }
          sub_24A28EF84(v112, type metadata accessor for LogConsistency);
        }
        size_t v26 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26B1745E0) - 8) + 64);
        uint64_t v27 = (void *)v112;
        uint64_t v28 = v113;
        goto LABEL_8;
      }
      sub_24A28EF84((uint64_t)v30, type metadata accessor for LogEntry);
    }
    uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174940);
    memcpy(v30, v31, *(void *)(*(void *)(v58 - 8) + 64));
    goto LABEL_40;
  }
  if (v17)
  {
LABEL_7:
    size_t v26 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26B1742D8) - 8) + 64);
    uint64_t v27 = (void *)v14;
    uint64_t v28 = v175;
LABEL_8:
    memcpy(v27, v28, v26);
    return a1;
  }
  v171 = *(void (**)(uint64_t, char *, uint64_t))(v174 + 16);
  v171(v14, v175, v173);
  uint64_t v18 = *(int *)(v11 + 20);
  uint64_t v19 = (void *)(v14 + v18);
  uint64_t v20 = &v175[v18];
  uint64_t v21 = type metadata accessor for LogEntry(0);
  uint64_t v22 = *(void *)(v21 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
  {
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174940);
    memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
    uint64_t v24 = v173;
    uint64_t v25 = v175;
  }
  else
  {
    uint64_t v167 = v22;
    uint64_t v170 = a1;
    uint64_t v47 = *(void *)v20;
    *((unsigned char *)v19 + 8) = v20[8];
    *uint64_t v19 = v47;
    void v19[2] = *((void *)v20 + 2);
    uint64_t v48 = *((void *)v20 + 3);
    unint64_t v49 = *((void *)v20 + 4);
    swift_bridgeObjectRetain();
    sub_24A1A52B0(v48, v49);
    v19[3] = v48;
    v19[4] = v49;
    v19[5] = *((void *)v20 + 5);
    uint64_t v50 = *((void *)v20 + 6);
    *((unsigned char *)v19 + 56) = v20[56];
    v19[6] = v50;
    v171((uint64_t)v19 + *(int *)(v21 + 36), &v20[*(int *)(v21 + 36)], v173);
    uint64_t v51 = *(int *)(v21 + 40);
    uint64_t v52 = (void *)((char *)v19 + v51);
    uint64_t v53 = (uint64_t *)&v20[v51];
    uint64_t v54 = type metadata accessor for SignedObject(0);
    uint64_t v55 = *(void *)(v54 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v55 + 48))(v53, 1, v54))
    {
      uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174320);
      memcpy(v52, v53, *(void *)(*(void *)(v56 - 8) + 64));
      uint64_t v16 = v11;
      a1 = v170;
      uint64_t v24 = v173;
      uint64_t v25 = v175;
      uint64_t v57 = v167;
    }
    else
    {
      uint64_t v156 = v55;
      uint64_t v59 = *v53;
      unint64_t v164 = v53[1];
      sub_24A1A52B0(*v53, v164);
      *uint64_t v52 = v59;
      v52[1] = v164;
      v171((uint64_t)v52 + *(int *)(v54 + 20), (char *)v53 + *(int *)(v54 + 20), v173);
      uint64_t v160 = v54;
      v165 = v52;
      uint64_t v60 = *(int *)(v54 + 24);
      uint64_t v61 = (void *)((char *)v52 + v60);
      uint64_t v62 = (uint64_t *)((char *)v53 + v60);
      uint64_t v63 = type metadata accessor for Signature(0);
      uint64_t v64 = *(void *)(v63 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v64 + 48))(v62, 1, v63))
      {
        uint64_t v65 = v173;
        uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
        memcpy(v61, v62, *(void *)(*(void *)(v66 - 8) + 64));
      }
      else
      {
        uint64_t v152 = *v62;
        uint64_t v155 = v63;
        unint64_t v96 = v62[1];
        sub_24A1A52B0(*v62, v96);
        *uint64_t v61 = v152;
        v61[1] = v96;
        unint64_t v97 = v62[3];
        uint64_t v153 = v62[2];
        sub_24A1A52B0(v153, v97);
        v61[2] = v153;
        v61[3] = v97;
        uint64_t v98 = v62[4];
        *((unsigned char *)v61 + 40) = *((unsigned char *)v62 + 40);
        v61[4] = v98;
        uint64_t v65 = v173;
        v171((uint64_t)v61 + *(int *)(v155 + 28), (char *)v62 + *(int *)(v155 + 28), v173);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v64 + 56))(v61, 0, 1, v155);
      }
      uint64_t v57 = v167;
      uint64_t v16 = v11;
      (*(void (**)(void *, void, uint64_t, uint64_t))(v156 + 56))(v165, 0, 1, v160);
      a1 = v170;
      uint64_t v24 = v65;
      uint64_t v25 = v175;
    }
    (*(void (**)(void *, void, uint64_t, uint64_t))(v57 + 56))(v19, 0, 1, v21);
  }
  uint64_t v99 = *(int *)(v16 + 24);
  uint64_t v100 = (char *)(v14 + v99);
  uint64_t v101 = &v25[v99];
  uint64_t v102 = type metadata accessor for LogConsistency(0);
  uint64_t v103 = *(void *)(v102 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v103 + 48))(v101, 1, v102))
  {
    uint64_t v104 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1745E0);
    memcpy(v100, v101, *(void *)(*(void *)(v104 - 8) + 64));
  }
  else
  {
    v171((uint64_t)v100, v101, v24);
    *(void *)&v100[*(int *)(v102 + 20)] = *(void *)&v101[*(int *)(v102 + 20)];
    char v105 = *(void (**)(char *, void, uint64_t, uint64_t))(v103 + 56);
    swift_retain();
    v105(v100, 0, 1, v102);
  }
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 56))(v14, 0, 1, v16);
  return a1;
}

uint64_t sub_24A28EF84(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_24A28EFE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_24A2A6E10();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = type metadata accessor for ATLogProofs(0);
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1742D8);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v9, (uint64_t)v10, v6);
    uint64_t v14 = *(int *)(v11 + 20);
    uint64_t v45 = (void (*)(char *, char *, uint64_t))v7;
    uint64_t v15 = &v9[v14];
    uint64_t v16 = &v10[v14];
    uint64_t v17 = type metadata accessor for LogEntry(0);
    uint64_t v18 = *(void *)(v17 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174940);
      memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
    }
    else
    {
      uint64_t v42 = v18;
      *(void *)uint64_t v15 = *(void *)v16;
      v15[8] = v16[8];
      *((void *)v15 + 2) = *((void *)v16 + 2);
      *(_OWORD *)(v15 + 24) = *(_OWORD *)(v16 + 24);
      uint64_t v20 = *((void *)v16 + 6);
      *((void *)v15 + 5) = *((void *)v16 + 5);
      *((void *)v15 + 6) = v20;
      v15[56] = v16[56];
      v45(&v15[*(int *)(v17 + 36)], &v16[*(int *)(v17 + 36)], v6);
      uint64_t v21 = *(int *)(v17 + 40);
      uint64_t v43 = v17;
      __dst = &v15[v21];
      uint64_t v22 = &v16[v21];
      uint64_t v23 = type metadata accessor for SignedObject(0);
      uint64_t v24 = *(void *)(v23 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
      {
        uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174320);
        memcpy(__dst, v22, *(void *)(*(void *)(v25 - 8) + 64));
      }
      else
      {
        uint64_t v40 = v24;
        *(_OWORD *)__dst = *(_OWORD *)v22;
        v45(&__dst[*(int *)(v23 + 20)], &v22[*(int *)(v23 + 20)], v6);
        uint64_t v41 = v23;
        uint64_t v26 = *(int *)(v23 + 24);
        uint64_t v27 = &__dst[v26];
        uint64_t v28 = &v22[v26];
        uint64_t v29 = type metadata accessor for Signature(0);
        uint64_t v39 = *(void *)(v29 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v28, 1, v29))
        {
          uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
          memcpy(v27, v28, *(void *)(*(void *)(v30 - 8) + 64));
        }
        else
        {
          long long v31 = *((_OWORD *)v28 + 1);
          *(_OWORD *)uint64_t v27 = *(_OWORD *)v28;
          *((_OWORD *)v27 + 1) = v31;
          *((void *)v27 + 4) = *((void *)v28 + 4);
          v27[40] = v28[40];
          v45(&v27[*(int *)(v29 + 28)], &v28[*(int *)(v29 + 28)], v6);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v39 + 56))(v27, 0, 1, v29);
        }
        (*(void (**)(char *, void, uint64_t, uint64_t))(v40 + 56))(__dst, 0, 1, v41);
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v42 + 56))(v15, 0, 1, v43);
    }
    uint64_t v32 = *(int *)(v11 + 24);
    uint64_t v33 = &v9[v32];
    uint64_t v34 = &v10[v32];
    uint64_t v35 = type metadata accessor for LogConsistency(0);
    uint64_t v36 = *(void *)(v35 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
    {
      uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1745E0);
      memcpy(v33, v34, *(void *)(*(void *)(v37 - 8) + 64));
    }
    else
    {
      v45(v33, v34, v6);
      *(void *)&v33[*(int *)(v35 + 20)] = *(void *)&v34[*(int *)(v35 + 20)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
    }
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  return a1;
}

uint64_t sub_24A28F534(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_24A2A6E10();
  uint64_t v129 = *(void *)(v6 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v129 + 40);
  uint64_t v8 = v6;
  v7(a1, a2);
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = (char *)(a2 + v9);
  uint64_t v12 = type metadata accessor for ATLogProofs(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
  uint64_t v131 = v10;
  LODWORD(v10) = v14(v10, 1, v12);
  __src = v11;
  int v15 = v14((uint64_t)v11, 1, v12);
  if (!v10)
  {
    __dst = (void (*)(uint64_t, char *, uint64_t))v7;
    if (v15)
    {
      sub_24A28EF84(v131, type metadata accessor for ATLogProofs);
      size_t v16 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26B1742D8) - 8) + 64);
      uint64_t v17 = (void *)v131;
      goto LABEL_6;
    }
    uint64_t v125 = a1;
    ((void (*)(uint64_t, char *, uint64_t))v7)(v131, v11, v8);
    uint64_t v27 = *(int *)(v12 + 20);
    uint64_t v28 = (char *)(v131 + v27);
    uint64_t v29 = &v11[v27];
    uint64_t v30 = type metadata accessor for LogEntry(0);
    uint64_t v31 = *(void *)(v30 - 8);
    uint64_t v32 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v31 + 48);
    int v33 = v32(v28, 1, v30);
    int v34 = v32(v29, 1, v30);
    if (v33)
    {
      if (!v34)
      {
        uint64_t v122 = v31;
        *(void *)uint64_t v28 = *(void *)v29;
        v28[8] = v29[8];
        *((void *)v28 + 2) = *((void *)v29 + 2);
        *(_OWORD *)(v28 + 24) = *(_OWORD *)(v29 + 24);
        uint64_t v35 = *((void *)v29 + 6);
        *((void *)v28 + 5) = *((void *)v29 + 5);
        *((void *)v28 + 6) = v35;
        v28[56] = v29[56];
        uint64_t v36 = v8;
        int v117 = *(void (**)(char *, char *, uint64_t))(v129 + 32);
        v117(&v28[*(int *)(v30 + 36)], &v29[*(int *)(v30 + 36)], v8);
        uint64_t v37 = *(int *)(v30 + 40);
        uint64_t v38 = &v28[v37];
        uint64_t v39 = &v29[v37];
        uint64_t v40 = type metadata accessor for SignedObject(0);
        uint64_t v41 = *(void *)(v40 - 8);
        a1 = v125;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
        {
          uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174320);
          memcpy(v38, v39, *(void *)(*(void *)(v42 - 8) + 64));
        }
        else
        {
          uint64_t v116 = v41;
          *(_OWORD *)uint64_t v38 = *(_OWORD *)v39;
          v117(&v38[*(int *)(v40 + 20)], &v39[*(int *)(v40 + 20)], v36);
          uint64_t v72 = *(int *)(v40 + 24);
          uint64_t v73 = &v38[v72];
          uint64_t v74 = &v39[v72];
          uint64_t v75 = type metadata accessor for Signature(0);
          uint64_t v112 = *(void *)(v75 - 8);
          uint64_t v114 = v75;
          if ((*(unsigned int (**)(char *, uint64_t))(v112 + 48))(v74, 1))
          {
            uint64_t v76 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
            memcpy(v73, v74, *(void *)(*(void *)(v76 - 8) + 64));
          }
          else
          {
            long long v86 = *((_OWORD *)v74 + 1);
            *(_OWORD *)uint64_t v73 = *(_OWORD *)v74;
            *((_OWORD *)v73 + 1) = v86;
            *((void *)v73 + 4) = *((void *)v74 + 4);
            v73[40] = v74[40];
            v117(&v73[*(int *)(v114 + 28)], &v74[*(int *)(v114 + 28)], v36);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v112 + 56))(v73, 0, 1, v114);
          }
          (*(void (**)(char *, void, uint64_t, uint64_t))(v116 + 56))(v38, 0, 1, v40);
        }
        (*(void (**)(char *, void, uint64_t, uint64_t))(v122 + 56))(v28, 0, 1, v30);
        goto LABEL_41;
      }
    }
    else
    {
      if (!v34)
      {
        *(void *)uint64_t v28 = *(void *)v29;
        v28[8] = v29[8];
        *((void *)v28 + 2) = *((void *)v29 + 2);
        swift_bridgeObjectRelease();
        uint64_t v56 = *((void *)v28 + 3);
        unint64_t v57 = *((void *)v28 + 4);
        *(_OWORD *)(v28 + 24) = *(_OWORD *)(v29 + 24);
        sub_24A1A5384(v56, v57);
        uint64_t v58 = *((void *)v29 + 6);
        *((void *)v28 + 5) = *((void *)v29 + 5);
        *((void *)v28 + 6) = v58;
        v28[56] = v29[56];
        uint64_t v36 = v8;
        ((void (*)(char *, char *, uint64_t))v7)(&v28[*(int *)(v30 + 36)], &v29[*(int *)(v30 + 36)], v8);
        uint64_t v59 = *(int *)(v30 + 40);
        uint64_t v60 = &v28[v59];
        uint64_t v61 = &v29[v59];
        uint64_t v62 = type metadata accessor for SignedObject(0);
        uint64_t v63 = *(void *)(v62 - 8);
        uint64_t v64 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v63 + 48);
        int v65 = v64(v60, 1, v62);
        int v66 = v64(v61, 1, v62);
        if (v65)
        {
          a1 = v125;
          if (!v66)
          {
            *(_OWORD *)uint64_t v60 = *(_OWORD *)v61;
            unint64_t v121 = *(void (**)(char *, char *, uint64_t))(v129 + 32);
            v121(&v60[*(int *)(v62 + 20)], &v61[*(int *)(v62 + 20)], v36);
            uint64_t v67 = *(int *)(v62 + 24);
            uint64_t v68 = &v60[v67];
            unint64_t v69 = &v61[v67];
            uint64_t v70 = type metadata accessor for Signature(0);
            uint64_t v119 = *(void *)(v70 - 8);
            uint64_t v124 = v70;
            if ((*(unsigned int (**)(char *, uint64_t))(v119 + 48))(v69, 1))
            {
              uint64_t v71 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
              memcpy(v68, v69, *(void *)(*(void *)(v71 - 8) + 64));
            }
            else
            {
              long long v106 = *((_OWORD *)v69 + 1);
              *(_OWORD *)uint64_t v68 = *(_OWORD *)v69;
              *((_OWORD *)v68 + 1) = v106;
              *((void *)v68 + 4) = *((void *)v69 + 4);
              v68[40] = v69[40];
              v121(&v68[*(int *)(v124 + 28)], &v69[*(int *)(v124 + 28)], v36);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v119 + 56))(v68, 0, 1, v124);
            }
            (*(void (**)(char *, void, uint64_t, uint64_t))(v63 + 56))(v60, 0, 1, v62);
            goto LABEL_41;
          }
        }
        else
        {
          a1 = v125;
          if (!v66)
          {
            uint64_t v95 = *(void *)v60;
            unint64_t v96 = *((void *)v60 + 1);
            *(_OWORD *)uint64_t v60 = *(_OWORD *)v61;
            sub_24A1A5384(v95, v96);
            ((void (*)(char *, char *, uint64_t))v7)(&v60[*(int *)(v62 + 20)], &v61[*(int *)(v62 + 20)], v36);
            uint64_t v97 = *(int *)(v62 + 24);
            uint64_t v98 = &v60[v97];
            uint64_t v99 = &v61[v97];
            uint64_t v100 = type metadata accessor for Signature(0);
            uint64_t v101 = *(void *)(v100 - 8);
            uint64_t v102 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v101 + 48);
            int v103 = v102(v98, 1, v100);
            int v104 = v102(v99, 1, v100);
            if (v103)
            {
              a1 = v125;
              if (!v104)
              {
                long long v105 = *((_OWORD *)v99 + 1);
                *(_OWORD *)uint64_t v98 = *(_OWORD *)v99;
                *((_OWORD *)v98 + 1) = v105;
                *((void *)v98 + 4) = *((void *)v99 + 4);
                v98[40] = v99[40];
                (*(void (**)(char *, char *, uint64_t))(v129 + 32))(&v98[*(int *)(v100 + 28)], &v99[*(int *)(v100 + 28)], v36);
                (*(void (**)(char *, void, uint64_t, uint64_t))(v101 + 56))(v98, 0, 1, v100);
                goto LABEL_41;
              }
            }
            else
            {
              a1 = v125;
              if (!v104)
              {
                uint64_t v108 = *(void *)v98;
                unint64_t v109 = *((void *)v98 + 1);
                *(_OWORD *)uint64_t v98 = *(_OWORD *)v99;
                sub_24A1A5384(v108, v109);
                uint64_t v110 = *((void *)v98 + 2);
                unint64_t v111 = *((void *)v98 + 3);
                *((_OWORD *)v98 + 1) = *((_OWORD *)v99 + 1);
                sub_24A1A5384(v110, v111);
                *((void *)v98 + 4) = *((void *)v99 + 4);
                v98[40] = v99[40];
                ((void (*)(char *, char *, uint64_t))v7)(&v98[*(int *)(v100 + 28)], &v99[*(int *)(v100 + 28)], v36);
                goto LABEL_41;
              }
              sub_24A28EF84((uint64_t)v98, type metadata accessor for Signature);
            }
            uint64_t v107 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
            memcpy(v98, v99, *(void *)(*(void *)(v107 - 8) + 64));
            goto LABEL_41;
          }
          sub_24A28EF84((uint64_t)v60, type metadata accessor for SignedObject);
        }
        uint64_t v85 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174320);
        memcpy(v60, v61, *(void *)(*(void *)(v85 - 8) + 64));
LABEL_41:
        uint64_t v87 = *(int *)(v12 + 24);
        uint64_t v88 = v131 + v87;
        uint64_t v89 = &__src[v87];
        uint64_t v90 = type metadata accessor for LogConsistency(0);
        uint64_t v91 = *(void *)(v90 - 8);
        uint64_t v92 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v91 + 48);
        int v93 = v92(v88, 1, v90);
        int v94 = v92((uint64_t)v89, 1, v90);
        if (v93)
        {
          if (!v94)
          {
            (*(void (**)(uint64_t, char *, uint64_t))(v129 + 32))(v88, v89, v36);
            *(void *)(v88 + *(int *)(v90 + 20)) = *(void *)&v89[*(int *)(v90 + 20)];
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v91 + 56))(v88, 0, 1, v90);
            return a1;
          }
        }
        else
        {
          if (!v94)
          {
            __dst(v88, v89, v36);
            *(void *)(v88 + *(int *)(v90 + 20)) = *(void *)&v89[*(int *)(v90 + 20)];
            swift_release();
            return a1;
          }
          sub_24A28EF84(v88, type metadata accessor for LogConsistency);
        }
        size_t v16 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26B1745E0) - 8) + 64);
        uint64_t v17 = (void *)v88;
        uint64_t v18 = v89;
        goto LABEL_7;
      }
      sub_24A28EF84((uint64_t)v28, type metadata accessor for LogEntry);
    }
    uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174940);
    memcpy(v28, v29, *(void *)(*(void *)(v50 - 8) + 64));
    a1 = v125;
    uint64_t v36 = v8;
    goto LABEL_41;
  }
  if (v15)
  {
    size_t v16 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26B1742D8) - 8) + 64);
    uint64_t v17 = (void *)v131;
LABEL_6:
    uint64_t v18 = v11;
LABEL_7:
    memcpy(v17, v18, v16);
    return a1;
  }
  uint64_t v19 = *(void (**)(uint64_t, char *, uint64_t))(v129 + 32);
  v19(v131, v11, v8);
  uint64_t v20 = *(int *)(v12 + 20);
  uint64_t v21 = (void *)(v131 + v20);
  uint64_t v22 = &v11[v20];
  uint64_t v23 = type metadata accessor for LogEntry(0);
  uint64_t v24 = *(void *)(v23 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
  {
    uint64_t v25 = v8;
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174940);
    memcpy(v21, v22, *(void *)(*(void *)(v26 - 8) + 64));
  }
  else
  {
    uint64_t v123 = v24;
    uint64_t v126 = a1;
    *uint64_t v21 = *(void *)v22;
    *((unsigned char *)v21 + 8) = v22[8];
    v21[2] = *((void *)v22 + 2);
    *(_OWORD *)(v21 + 3) = *(_OWORD *)(v22 + 24);
    uint64_t v43 = *((void *)v22 + 6);
    v21[5] = *((void *)v22 + 5);
    v21[6] = v43;
    *((unsigned char *)v21 + 56) = v22[56];
    v19((uint64_t)v21 + *(int *)(v23 + 36), &v22[*(int *)(v23 + 36)], v8);
    uint64_t v44 = *(int *)(v23 + 40);
    __dsta = (_OWORD *)((char *)v21 + v44);
    uint64_t v45 = &v22[v44];
    uint64_t v46 = type metadata accessor for SignedObject(0);
    uint64_t v47 = *(void *)(v46 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v45, 1, v46))
    {
      uint64_t v48 = v123;
      uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174320);
      memcpy(__dsta, v45, *(void *)(*(void *)(v49 - 8) + 64));
    }
    else
    {
      uint64_t v118 = v47;
      _OWORD *__dsta = *(_OWORD *)v45;
      v19((uint64_t)__dsta + *(int *)(v46 + 20), &v45[*(int *)(v46 + 20)], v8);
      uint64_t v51 = *(int *)(v46 + 24);
      uint64_t v52 = (_OWORD *)((char *)__dsta + v51);
      uint64_t v53 = &v45[v51];
      uint64_t v54 = type metadata accessor for Signature(0);
      uint64_t v113 = *(void *)(v54 - 8);
      uint64_t v115 = v54;
      uint64_t v120 = v46;
      if ((*(unsigned int (**)(char *, uint64_t))(v113 + 48))(v53, 1))
      {
        uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
        memcpy(v52, v53, *(void *)(*(void *)(v55 - 8) + 64));
      }
      else
      {
        long long v77 = *((_OWORD *)v53 + 1);
        *uint64_t v52 = *(_OWORD *)v53;
        v52[1] = v77;
        *((void *)v52 + 4) = *((void *)v53 + 4);
        *((unsigned char *)v52 + 40) = v53[40];
        v19((uint64_t)v52 + *(int *)(v115 + 28), &v53[*(int *)(v115 + 28)], v8);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v113 + 56))(v52, 0, 1, v115);
      }
      uint64_t v48 = v123;
      (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v118 + 56))(__dsta, 0, 1, v120);
    }
    a1 = v126;
    uint64_t v25 = v8;
    (*(void (**)(void *, void, uint64_t, uint64_t))(v48 + 56))(v21, 0, 1, v23);
  }
  uint64_t v78 = *(int *)(v12 + 24);
  uint64_t v79 = (char *)(v131 + v78);
  unint64_t v80 = &__src[v78];
  uint64_t v81 = type metadata accessor for LogConsistency(0);
  uint64_t v82 = *(void *)(v81 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v82 + 48))(v80, 1, v81))
  {
    uint64_t v83 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1745E0);
    memcpy(v79, v80, *(void *)(*(void *)(v83 - 8) + 64));
  }
  else
  {
    v19((uint64_t)v79, v80, v25);
    *(void *)&v79[*(int *)(v81 + 20)] = *(void *)&v80[*(int *)(v81 + 20)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v82 + 56))(v79, 0, 1, v81);
  }
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56))(v131, 0, 1, v12);
  return a1;
}

uint64_t sub_24A290474(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24A290488);
}

uint64_t sub_24A290488(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_24A2A6E10();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1742D8);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 20);
    return v11(v13, a2, v12);
  }
}

uint64_t sub_24A290584(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24A290598);
}

uint64_t sub_24A290598(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = sub_24A2A6E10();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, v8);
  }
  else
  {
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1742D8);
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a4 + 20);
    return v13(v15, a2, a2, v14);
  }
}

uint64_t type metadata accessor for Proto_TransparencyProofs(uint64_t a1)
{
  return sub_24A1AE704(a1, (uint64_t *)&unk_26B174870);
}

void sub_24A2906C0()
{
  sub_24A2A6E10();
  if (v0 <= 0x3F)
  {
    sub_24A295E40(319, &qword_26B1742E0, (void (*)(uint64_t))type metadata accessor for ATLogProofs);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t *sub_24A2907A4(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v22 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v22 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_24A1A52B0(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = a2[2];
    unint64_t v10 = a2[3];
    sub_24A1A52B0(v9, v10);
    a1[2] = v9;
    a1[3] = v10;
    a1[4] = a2[4];
    uint64_t v11 = a3[7];
    uint64_t v12 = (char *)a1 + v11;
    uint64_t v13 = (char *)a2 + v11;
    uint64_t v14 = sub_24A2A6E10();
    uint64_t v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16);
    swift_bridgeObjectRetain();
    v15(v12, v13, v14);
    uint64_t v16 = a3[8];
    uint64_t v17 = (uint64_t *)((char *)a1 + v16);
    uint64_t v18 = (uint64_t *)((char *)a2 + v16);
    uint64_t v19 = type metadata accessor for Proto_SealedHashLedger(0);
    uint64_t v20 = *(void *)(v19 - 8);
    uint64_t v102 = v15;
    uint64_t v101 = v14;
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
    {
      uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174800);
      memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      *uint64_t v17 = *v18;
      uint64_t v23 = *(int *)(v19 + 20);
      uint64_t v99 = a1;
      uint64_t v24 = (char *)v17 + v23;
      uint64_t v25 = (char *)v18 + v23;
      swift_bridgeObjectRetain();
      uint64_t v26 = v24;
      a1 = v99;
      v15(v26, v25, v14);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
    }
    uint64_t v27 = a3[9];
    uint64_t v28 = (char *)a1 + v27;
    uint64_t v29 = (char *)a2 + v27;
    uint64_t v30 = sub_24A2A6DC0();
    uint64_t v31 = *(void *)(v30 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
    {
      uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749E0);
      memcpy(v28, v29, *(void *)(*(void *)(v32 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v28, v29, v30);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
    }
    uint64_t v33 = a3[10];
    int v34 = (char *)a1 + v33;
    uint64_t v35 = (char *)a2 + v33;
    uint64_t v36 = type metadata accessor for Proto_TransparencyProofs(0);
    uint64_t v37 = *(void *)(v36 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36))
    {
      uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174880);
      memcpy(v34, v35, *(void *)(*(void *)(v38 - 8) + 64));
    }
    else
    {
      uint64_t v100 = v37;
      v102(v34, v35, v14);
      uint64_t v39 = *(int *)(v36 + 20);
      uint64_t v40 = &v34[v39];
      uint64_t v41 = &v35[v39];
      uint64_t v42 = type metadata accessor for ATLogProofs(0);
      uint64_t v43 = *(void *)(v42 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42))
      {
        uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1742D8);
        memcpy(v40, v41, *(void *)(*(void *)(v44 - 8) + 64));
        uint64_t v45 = v100;
      }
      else
      {
        uint64_t v98 = v43;
        v102(v40, v41, v101);
        uint64_t v97 = v42;
        uint64_t v46 = *(int *)(v42 + 20);
        uint64_t v47 = &v40[v46];
        uint64_t v48 = &v41[v46];
        uint64_t v49 = type metadata accessor for LogEntry(0);
        uint64_t v50 = *(void *)(v49 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48))(v48, 1, v49))
        {
          uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174940);
          memcpy(v47, v48, *(void *)(*(void *)(v51 - 8) + 64));
          uint64_t v52 = v97;
        }
        else
        {
          int v94 = v41;
          uint64_t v95 = v50;
          unint64_t v96 = v40;
          *(void *)uint64_t v47 = *(void *)v48;
          v47[8] = v48[8];
          uint64_t v53 = *((void *)v48 + 3);
          *((void *)v47 + 2) = *((void *)v48 + 2);
          unint64_t v54 = *((void *)v48 + 4);
          swift_bridgeObjectRetain();
          sub_24A1A52B0(v53, v54);
          *((void *)v47 + 3) = v53;
          *((void *)v47 + 4) = v54;
          uint64_t v55 = *((void *)v48 + 6);
          *((void *)v47 + 5) = *((void *)v48 + 5);
          *((void *)v47 + 6) = v55;
          v47[56] = v48[56];
          v102(&v47[*(int *)(v49 + 36)], &v48[*(int *)(v49 + 36)], v101);
          uint64_t v56 = *(int *)(v49 + 40);
          unint64_t v57 = &v47[v56];
          uint64_t v58 = &v48[v56];
          uint64_t v59 = type metadata accessor for SignedObject(0);
          uint64_t v60 = *(void *)(v59 - 8);
          uint64_t v61 = v47;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v60 + 48))(v58, 1, v59))
          {
            uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174320);
            memcpy(v57, v58, *(void *)(*(void *)(v62 - 8) + 64));
            uint64_t v63 = v95;
            uint64_t v40 = v96;
            uint64_t v52 = v97;
            uint64_t v41 = v94;
          }
          else
          {
            uint64_t v91 = v60;
            int v93 = v47;
            uint64_t v64 = v59;
            uint64_t v65 = *(void *)v58;
            unint64_t v66 = *((void *)v58 + 1);
            uint64_t v67 = v57;
            sub_24A1A52B0(*(void *)v58, v66);
            *(void *)unint64_t v57 = v65;
            *((void *)v57 + 1) = v66;
            uint64_t v68 = v57;
            v102(&v57[*(int *)(v64 + 20)], &v58[*(int *)(v64 + 20)], v101);
            uint64_t v92 = v64;
            uint64_t v69 = *(int *)(v64 + 24);
            uint64_t v70 = &v57[v69];
            uint64_t v71 = &v58[v69];
            uint64_t v72 = type metadata accessor for Signature(0);
            uint64_t v90 = *(void *)(v72 - 8);
            uint64_t v73 = (uint64_t *)v71;
            int v74 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v90 + 48))(v71, 1, v72);
            uint64_t v52 = v97;
            if (v74)
            {
              uint64_t v75 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
              memcpy(v70, v73, *(void *)(*(void *)(v75 - 8) + 64));
            }
            else
            {
              unint64_t v76 = v73[1];
              uint64_t v88 = *v73;
              sub_24A1A52B0(*v73, v76);
              *(void *)uint64_t v70 = v88;
              *((void *)v70 + 1) = v76;
              unint64_t v77 = v73[3];
              uint64_t v89 = v73[2];
              sub_24A1A52B0(v89, v77);
              *((void *)v70 + 2) = v89;
              *((void *)v70 + 3) = v77;
              uint64_t v68 = v67;
              *((void *)v70 + 4) = v73[4];
              v70[40] = *((unsigned char *)v73 + 40);
              v102(&v70[*(int *)(v72 + 28)], (char *)v73 + *(int *)(v72 + 28), v101);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v90 + 56))(v70, 0, 1, v72);
            }
            uint64_t v41 = v94;
            uint64_t v63 = v95;
            (*(void (**)(char *, void, uint64_t, uint64_t))(v91 + 56))(v68, 0, 1, v92);
            uint64_t v40 = v96;
            uint64_t v61 = v93;
          }
          (*(void (**)(char *, void, uint64_t, uint64_t))(v63 + 56))(v61, 0, 1, v49);
        }
        uint64_t v78 = *(int *)(v52 + 24);
        uint64_t v79 = v40;
        unint64_t v80 = &v40[v78];
        uint64_t v81 = &v41[v78];
        uint64_t v82 = type metadata accessor for LogConsistency(0);
        uint64_t v83 = *(void *)(v82 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v83 + 48))(v81, 1, v82))
        {
          uint64_t v84 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1745E0);
          memcpy(v80, v81, *(void *)(*(void *)(v84 - 8) + 64));
        }
        else
        {
          v102(v80, v81, v101);
          *(void *)&v80[*(int *)(v82 + 20)] = *(void *)&v81[*(int *)(v82 + 20)];
          uint64_t v85 = *(void (**)(char *, void, uint64_t, uint64_t))(v83 + 56);
          swift_retain();
          v85(v80, 0, 1, v82);
        }
        long long v86 = v79;
        uint64_t v45 = v100;
        (*(void (**)(char *, void, uint64_t, uint64_t))(v98 + 56))(v86, 0, 1, v52);
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v45 + 56))(v34, 0, 1, v36);
    }
  }
  return a1;
}

uint64_t sub_24A291104(uint64_t a1, int *a2)
{
  sub_24A1A5384(*(void *)a1, *(void *)(a1 + 8));
  sub_24A1A5384(*(void *)(a1 + 16), *(void *)(a1 + 24));
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[7];
  uint64_t v5 = sub_24A2A6E10();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v6(v4, v5);
  uint64_t v7 = a1 + a2[8];
  uint64_t v8 = type metadata accessor for Proto_SealedHashLedger(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v7, 1, v8))
  {
    swift_bridgeObjectRelease();
    v6(v7 + *(int *)(v8 + 20), v5);
  }
  uint64_t v9 = a1 + a2[9];
  uint64_t v10 = sub_24A2A6DC0();
  uint64_t v11 = *(void *)(v10 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10)) {
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
  }
  uint64_t v12 = a1 + a2[10];
  uint64_t v13 = type metadata accessor for Proto_TransparencyProofs(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(v12, 1, v13);
  if (!result)
  {
    v6(v12, v5);
    uint64_t v15 = v12 + *(int *)(v13 + 20);
    uint64_t v16 = type metadata accessor for ATLogProofs(0);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48))(v15, 1, v16);
    if (!result)
    {
      v6(v15, v5);
      uint64_t v17 = v15 + *(int *)(v16 + 20);
      uint64_t v18 = type metadata accessor for LogEntry(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 48))(v17, 1, v18))
      {
        swift_bridgeObjectRelease();
        sub_24A1A5384(*(void *)(v17 + 24), *(void *)(v17 + 32));
        v6(v17 + *(int *)(v18 + 36), v5);
        uint64_t v19 = v17 + *(int *)(v18 + 40);
        uint64_t v20 = type metadata accessor for SignedObject(0);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 48))(v19, 1, v20))
        {
          sub_24A1A5384(*(void *)v19, *(void *)(v19 + 8));
          v6(v19 + *(int *)(v20 + 20), v5);
          uint64_t v21 = v19 + *(int *)(v20 + 24);
          uint64_t v22 = type metadata accessor for Signature(0);
          if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 48))(v21, 1, v22))
          {
            sub_24A1A5384(*(void *)v21, *(void *)(v21 + 8));
            sub_24A1A5384(*(void *)(v21 + 16), *(void *)(v21 + 24));
            v6(v21 + *(int *)(v22 + 28), v5);
          }
        }
      }
      uint64_t v23 = v15 + *(int *)(v16 + 24);
      uint64_t v24 = type metadata accessor for LogConsistency(0);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 48))(v23, 1, v24);
      if (!result)
      {
        v6(v23, v5);
        return swift_release();
      }
    }
  }
  return result;
}

uint64_t *sub_24A291540(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_24A1A52B0(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  sub_24A1A52B0(v8, v9);
  a1[2] = v8;
  a1[3] = v9;
  a1[4] = a2[4];
  uint64_t v10 = a3[7];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = sub_24A2A6E10();
  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16);
  swift_bridgeObjectRetain();
  v14(v11, v12, v13);
  uint64_t v15 = a3[8];
  uint64_t v16 = (uint64_t *)((char *)a1 + v15);
  uint64_t v17 = (uint64_t *)((char *)a2 + v15);
  uint64_t v18 = type metadata accessor for Proto_SealedHashLedger(0);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v101 = v14;
  uint64_t v100 = v13;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
  {
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174800);
    memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
  }
  else
  {
    *uint64_t v16 = *v17;
    uint64_t v21 = *(int *)(v18 + 20);
    uint64_t v98 = a3;
    uint64_t v22 = a1;
    uint64_t v23 = (char *)v16 + v21;
    uint64_t v24 = (char *)v17 + v21;
    swift_bridgeObjectRetain();
    uint64_t v25 = v23;
    a1 = v22;
    a3 = v98;
    v14(v25, v24, v13);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  }
  uint64_t v26 = a3[9];
  uint64_t v27 = (char *)a1 + v26;
  uint64_t v28 = (char *)a2 + v26;
  uint64_t v29 = sub_24A2A6DC0();
  uint64_t v30 = *(void *)(v29 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
  {
    uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749E0);
    memcpy(v27, v28, *(void *)(*(void *)(v31 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v27, v28, v29);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
  }
  uint64_t v32 = a3[10];
  uint64_t v33 = (char *)a1 + v32;
  int v34 = (char *)a2 + v32;
  uint64_t v35 = type metadata accessor for Proto_TransparencyProofs(0);
  uint64_t v36 = *(void *)(v35 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
  {
    uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174880);
    memcpy(v33, v34, *(void *)(*(void *)(v37 - 8) + 64));
  }
  else
  {
    uint64_t v99 = v36;
    v101(v33, v34, v13);
    uint64_t v38 = *(int *)(v35 + 20);
    uint64_t v39 = &v33[v38];
    uint64_t v40 = &v34[v38];
    uint64_t v41 = type metadata accessor for ATLogProofs(0);
    uint64_t v42 = *(void *)(v41 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41))
    {
      uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1742D8);
      memcpy(v39, v40, *(void *)(*(void *)(v43 - 8) + 64));
      uint64_t v44 = v99;
    }
    else
    {
      uint64_t v97 = v42;
      v101(v39, v40, v100);
      uint64_t v96 = v41;
      uint64_t v45 = *(int *)(v41 + 20);
      uint64_t v46 = &v39[v45];
      uint64_t v47 = &v40[v45];
      uint64_t v48 = type metadata accessor for LogEntry(0);
      uint64_t v49 = *(void *)(v48 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v47, 1, v48))
      {
        uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174940);
        memcpy(v46, v47, *(void *)(*(void *)(v50 - 8) + 64));
        uint64_t v51 = v96;
      }
      else
      {
        int v94 = v40;
        uint64_t v95 = v49;
        int v93 = v39;
        *(void *)uint64_t v46 = *(void *)v47;
        v46[8] = v47[8];
        uint64_t v52 = *((void *)v47 + 3);
        *((void *)v46 + 2) = *((void *)v47 + 2);
        unint64_t v53 = *((void *)v47 + 4);
        swift_bridgeObjectRetain();
        sub_24A1A52B0(v52, v53);
        *((void *)v46 + 3) = v52;
        *((void *)v46 + 4) = v53;
        uint64_t v54 = *((void *)v47 + 6);
        *((void *)v46 + 5) = *((void *)v47 + 5);
        *((void *)v46 + 6) = v54;
        v46[56] = v47[56];
        v101(&v46[*(int *)(v48 + 36)], &v47[*(int *)(v48 + 36)], v100);
        uint64_t v55 = *(int *)(v48 + 40);
        uint64_t v56 = &v46[v55];
        unint64_t v57 = &v47[v55];
        uint64_t v58 = type metadata accessor for SignedObject(0);
        uint64_t v59 = *(void *)(v58 - 8);
        uint64_t v60 = v46;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v59 + 48))(v57, 1, v58))
        {
          uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174320);
          memcpy(v56, v57, *(void *)(*(void *)(v61 - 8) + 64));
          uint64_t v39 = v93;
          uint64_t v40 = v94;
          uint64_t v51 = v96;
          uint64_t v62 = v95;
        }
        else
        {
          uint64_t v90 = v59;
          uint64_t v92 = v46;
          uint64_t v63 = v58;
          uint64_t v64 = *(void *)v57;
          unint64_t v65 = *((void *)v57 + 1);
          unint64_t v66 = v56;
          sub_24A1A52B0(*(void *)v57, v65);
          *(void *)uint64_t v56 = v64;
          *((void *)v56 + 1) = v65;
          uint64_t v67 = v56;
          v101(&v56[*(int *)(v63 + 20)], &v57[*(int *)(v63 + 20)], v100);
          uint64_t v91 = v63;
          uint64_t v68 = *(int *)(v63 + 24);
          uint64_t v69 = &v56[v68];
          uint64_t v70 = &v57[v68];
          uint64_t v71 = type metadata accessor for Signature(0);
          uint64_t v89 = *(void *)(v71 - 8);
          uint64_t v72 = (uint64_t *)v70;
          int v73 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v89 + 48))(v70, 1, v71);
          uint64_t v51 = v96;
          if (v73)
          {
            uint64_t v74 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
            memcpy(v69, v72, *(void *)(*(void *)(v74 - 8) + 64));
          }
          else
          {
            unint64_t v75 = v72[1];
            uint64_t v87 = *v72;
            sub_24A1A52B0(*v72, v75);
            *(void *)uint64_t v69 = v87;
            *((void *)v69 + 1) = v75;
            unint64_t v76 = v72[3];
            uint64_t v88 = v72[2];
            sub_24A1A52B0(v88, v76);
            *((void *)v69 + 2) = v88;
            *((void *)v69 + 3) = v76;
            uint64_t v67 = v66;
            *((void *)v69 + 4) = v72[4];
            v69[40] = *((unsigned char *)v72 + 40);
            v101(&v69[*(int *)(v71 + 28)], (char *)v72 + *(int *)(v71 + 28), v100);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v89 + 56))(v69, 0, 1, v71);
          }
          uint64_t v40 = v94;
          uint64_t v62 = v95;
          (*(void (**)(char *, void, uint64_t, uint64_t))(v90 + 56))(v67, 0, 1, v91);
          uint64_t v60 = v92;
          uint64_t v39 = v93;
        }
        (*(void (**)(char *, void, uint64_t, uint64_t))(v62 + 56))(v60, 0, 1, v48);
      }
      uint64_t v77 = *(int *)(v51 + 24);
      uint64_t v78 = v39;
      uint64_t v79 = &v39[v77];
      unint64_t v80 = &v40[v77];
      uint64_t v81 = type metadata accessor for LogConsistency(0);
      uint64_t v82 = *(void *)(v81 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v82 + 48))(v80, 1, v81))
      {
        uint64_t v83 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1745E0);
        memcpy(v79, v80, *(void *)(*(void *)(v83 - 8) + 64));
      }
      else
      {
        v101(v79, v80, v100);
        *(void *)&v79[*(int *)(v81 + 20)] = *(void *)&v80[*(int *)(v81 + 20)];
        uint64_t v84 = *(void (**)(char *, void, uint64_t, uint64_t))(v82 + 56);
        swift_retain();
        v84(v79, 0, 1, v81);
      }
      uint64_t v85 = v78;
      uint64_t v44 = v99;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v97 + 56))(v85, 0, 1, v51);
    }
    (*(void (**)(char *, void, uint64_t, uint64_t))(v44 + 56))(v33, 0, 1, v35);
  }
  return a1;
}

uint64_t *sub_24A291E54(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_24A1A52B0(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_24A1A5384(v8, v9);
  uint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  sub_24A1A52B0(v10, v11);
  uint64_t v12 = a1[2];
  unint64_t v13 = a1[3];
  a1[2] = v10;
  a1[3] = v11;
  sub_24A1A5384(v12, v13);
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v14 = a3[7];
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = sub_24A2A6E10();
  uint64_t v263 = *(void *)(v17 - 8);
  uint64_t v264 = v17;
  v265 = *(void (**)(char *, char *))(v263 + 24);
  v265(v15, v16);
  uint64_t v18 = a3[8];
  uint64_t v19 = (uint64_t *)((char *)a1 + v18);
  uint64_t v20 = (uint64_t *)((char *)a2 + v18);
  uint64_t v21 = type metadata accessor for Proto_SealedHashLedger(0);
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v22 + 48);
  int v24 = v23(v19, 1, v21);
  int v25 = v23(v20, 1, v21);
  if (v24)
  {
    if (!v25)
    {
      *uint64_t v19 = *v20;
      uint64_t v26 = *(int *)(v21 + 20);
      uint64_t v27 = (char *)v19 + v26;
      uint64_t v28 = (char *)v20 + v26;
      uint64_t v29 = *(void (**)(char *, char *, uint64_t))(v263 + 16);
      swift_bridgeObjectRetain();
      v29(v27, v28, v264);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v25)
  {
    sub_24A28EF84((uint64_t)v19, type metadata accessor for Proto_SealedHashLedger);
LABEL_6:
    uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174800);
    memcpy(v19, v20, *(void *)(*(void *)(v30 - 8) + 64));
    goto LABEL_7;
  }
  *uint64_t v19 = *v20;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  ((void (*)(char *, char *, uint64_t))v265)((char *)v19 + *(int *)(v21 + 20), (char *)v20 + *(int *)(v21 + 20), v264);
LABEL_7:
  uint64_t v31 = a3[9];
  uint64_t v32 = (char *)a1 + v31;
  uint64_t v33 = (char *)a2 + v31;
  uint64_t v34 = sub_24A2A6DC0();
  uint64_t v35 = *(void *)(v34 - 8);
  uint64_t v36 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v35 + 48);
  int v37 = v36(v32, 1, v34);
  int v38 = v36(v33, 1, v34);
  if (v37)
  {
    if (!v38)
    {
      (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v32, v33, v34);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v38)
  {
    (*(void (**)(char *, uint64_t))(v35 + 8))(v32, v34);
LABEL_12:
    uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749E0);
    memcpy(v32, v33, *(void *)(*(void *)(v39 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v35 + 24))(v32, v33, v34);
LABEL_13:
  uint64_t v40 = a3[10];
  uint64_t v41 = (uint64_t)a1 + v40;
  uint64_t v42 = (char *)a2 + v40;
  uint64_t v43 = type metadata accessor for Proto_TransparencyProofs(0);
  uint64_t v44 = *(void *)(v43 - 8);
  uint64_t v45 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v44 + 48);
  int v46 = v45(v41, 1, v43);
  int v47 = v45((uint64_t)v42, 1, v43);
  if (!v46)
  {
    if (v47)
    {
      sub_24A28EF84(v41, type metadata accessor for Proto_TransparencyProofs);
      goto LABEL_19;
    }
    ((void (*)(uint64_t, char *, uint64_t))v265)(v41, v42, v264);
    uint64_t v59 = *(int *)(v43 + 20);
    uint64_t v60 = v41 + v59;
    uint64_t v61 = &v42[v59];
    uint64_t v62 = type metadata accessor for ATLogProofs(0);
    uint64_t v63 = *(void *)(v62 - 8);
    uint64_t v64 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v63 + 48);
    int v65 = v64(v60, 1, v62);
    int v66 = v64((uint64_t)v61, 1, v62);
    if (v65)
    {
      if (!v66)
      {
        uint64_t v67 = v61;
        uint64_t v68 = *(void (**)(uint64_t, char *, uint64_t))(v263 + 16);
        v68(v60, v67, v264);
        uint64_t v69 = *(int *)(v62 + 20);
        uint64_t v70 = (void *)(v60 + v69);
        v267 = v67;
        uint64_t v71 = &v67[v69];
        uint64_t v72 = type metadata accessor for LogEntry(0);
        uint64_t v73 = *(void *)(v72 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v73 + 48))(v71, 1, v72))
        {
          uint64_t v74 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174940);
          memcpy(v70, v71, *(void *)(*(void *)(v74 - 8) + 64));
          unint64_t v75 = (void (*)(char *, char *, uint64_t))v68;
          unint64_t v76 = v267;
        }
        else
        {
          uint64_t v256 = v73;
          uint64_t v260 = v60;
          uint64_t v115 = *(void *)v71;
          *((unsigned char *)v70 + 8) = v71[8];
          *uint64_t v70 = v115;
          v70[2] = *((void *)v71 + 2);
          uint64_t v116 = *((void *)v71 + 3);
          unint64_t v117 = *((void *)v71 + 4);
          swift_bridgeObjectRetain();
          sub_24A1A52B0(v116, v117);
          v70[3] = v116;
          v70[4] = v117;
          v70[5] = *((void *)v71 + 5);
          uint64_t v118 = *((void *)v71 + 6);
          *((unsigned char *)v70 + 56) = v71[56];
          v70[6] = v118;
          v68((uint64_t)v70 + *(int *)(v72 + 36), &v71[*(int *)(v72 + 36)], v264);
          uint64_t v119 = *(int *)(v72 + 40);
          __dsta = (void *)((char *)v70 + v119);
          uint64_t v120 = (uint64_t *)&v71[v119];
          uint64_t v121 = type metadata accessor for SignedObject(0);
          uint64_t v122 = *(void *)(v121 - 8);
          if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v122 + 48))(v120, 1, v121))
          {
            unint64_t v75 = (void (*)(char *, char *, uint64_t))v68;
            uint64_t v123 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174320);
            memcpy(__dsta, v120, *(void *)(*(void *)(v123 - 8) + 64));
          }
          else
          {
            uint64_t v247 = v122;
            uint64_t v252 = *v120;
            unint64_t v241 = v120[1];
            sub_24A1A52B0(*v120, v241);
            void *__dsta = v252;
            __dsta[1] = v241;
            v68((uint64_t)__dsta + *(int *)(v121 + 20), (char *)v120 + *(int *)(v121 + 20), v264);
            uint64_t v253 = v121;
            uint64_t v135 = *(int *)(v121 + 24);
            uint64_t v136 = (void *)((char *)__dsta + v135);
            uint64_t v137 = (uint64_t *)((char *)v120 + v135);
            uint64_t v138 = type metadata accessor for Signature(0);
            uint64_t v242 = *(void *)(v138 - 8);
            if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v242 + 48))(v137, 1, v138))
            {
              unint64_t v75 = (void (*)(char *, char *, uint64_t))v68;
              uint64_t v139 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
              memcpy(v136, v137, *(void *)(*(void *)(v139 - 8) + 64));
            }
            else
            {
              uint64_t v235 = *v137;
              uint64_t v239 = v138;
              unint64_t v177 = v137[1];
              sub_24A1A52B0(*v137, v177);
              *uint64_t v136 = v235;
              v136[1] = v177;
              unint64_t v178 = v137[3];
              uint64_t v236 = v137[2];
              sub_24A1A52B0(v236, v178);
              v136[2] = v236;
              v136[3] = v178;
              uint64_t v179 = v137[4];
              *((unsigned char *)v136 + 40) = *((unsigned char *)v137 + 40);
              v136[4] = v179;
              unint64_t v75 = (void (*)(char *, char *, uint64_t))v68;
              v68((uint64_t)v136 + *(int *)(v239 + 28), (char *)v137 + *(int *)(v239 + 28), v264);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v242 + 56))(v136, 0, 1, v239);
            }
            (*(void (**)(void *, void, uint64_t, uint64_t))(v247 + 56))(__dsta, 0, 1, v253);
          }
          uint64_t v60 = v260;
          unint64_t v76 = v267;
          (*(void (**)(void *, void, uint64_t, uint64_t))(v256 + 56))(v70, 0, 1, v72);
        }
        uint64_t v180 = *(int *)(v62 + 24);
        v181 = (char *)(v60 + v180);
        v182 = &v76[v180];
        uint64_t v183 = type metadata accessor for LogConsistency(0);
        uint64_t v184 = *(void *)(v183 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v184 + 48))(v182, 1, v183))
        {
          uint64_t v185 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1745E0);
          memcpy(v181, v182, *(void *)(*(void *)(v185 - 8) + 64));
        }
        else
        {
          v75(v181, v182, v264);
          *(void *)&v181[*(int *)(v183 + 20)] = *(void *)&v182[*(int *)(v183 + 20)];
          v186 = *(void (**)(char *, void, uint64_t, uint64_t))(v184 + 56);
          swift_retain();
          v186(v181, 0, 1, v183);
        }
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v63 + 56))(v60, 0, 1, v62);
        return a1;
      }
      goto LABEL_31;
    }
    if (v66)
    {
      sub_24A28EF84(v60, type metadata accessor for ATLogProofs);
LABEL_31:
      size_t v56 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26B1742D8) - 8) + 64);
      unint64_t v57 = (void *)v60;
      uint64_t v58 = v61;
      goto LABEL_20;
    }
    ((void (*)(uint64_t, char *, uint64_t))v265)(v60, v61, v264);
    uint64_t v96 = *(int *)(v62 + 20);
    uint64_t v259 = v60;
    uint64_t v97 = (char *)(v60 + v96);
    uint64_t v98 = &v61[v96];
    uint64_t v99 = type metadata accessor for LogEntry(0);
    uint64_t v100 = *(void *)(v99 - 8);
    uint64_t v101 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v100 + 48);
    int v102 = v101(v97, 1, v99);
    int v103 = v101(v98, 1, v99);
    if (v102)
    {
      uint64_t v104 = v259;
      if (!v103)
      {
        uint64_t v105 = *(void *)v98;
        v97[8] = v98[8];
        *(void *)uint64_t v97 = v105;
        *((void *)v97 + 2) = *((void *)v98 + 2);
        uint64_t v106 = *((void *)v98 + 3);
        unint64_t v107 = *((void *)v98 + 4);
        swift_bridgeObjectRetain();
        sub_24A1A52B0(v106, v107);
        *((void *)v97 + 3) = v106;
        *((void *)v97 + 4) = v107;
        *((void *)v97 + 5) = *((void *)v98 + 5);
        uint64_t v108 = *((void *)v98 + 6);
        v97[56] = v98[56];
        *((void *)v97 + 6) = v108;
        v251 = *(void (**)(char *, char *, uint64_t))(v263 + 16);
        v251(&v97[*(int *)(v99 + 36)], &v98[*(int *)(v99 + 36)], v264);
        uint64_t v109 = *(int *)(v99 + 40);
        uint64_t v110 = &v97[v109];
        unint64_t v111 = &v98[v109];
        uint64_t v112 = type metadata accessor for SignedObject(0);
        uint64_t v113 = *(void *)(v112 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v113 + 48))(v111, 1, v112))
        {
          uint64_t v114 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174320);
          memcpy(v110, v111, *(void *)(*(void *)(v114 - 8) + 64));
        }
        else
        {
          uint64_t v238 = v113;
          v249 = v110;
          uint64_t v169 = *(void *)v111;
          unint64_t v168 = *((void *)v111 + 1);
          sub_24A1A52B0(*(void *)v111, v168);
          void *v249 = v169;
          uint64_t v170 = v249;
          v249[1] = v168;
          v251((char *)v249 + *(int *)(v112 + 20), &v111[*(int *)(v112 + 20)], v264);
          uint64_t v243 = v112;
          uint64_t v171 = *(int *)(v112 + 24);
          v172 = (void *)((char *)v249 + v171);
          uint64_t v173 = (uint64_t *)&v111[v171];
          uint64_t v174 = type metadata accessor for Signature(0);
          uint64_t v175 = *(void *)(v174 - 8);
          uint64_t v234 = v174;
          if ((*(unsigned int (**)(uint64_t *, uint64_t))(v175 + 48))(v173, 1))
          {
            uint64_t v176 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
            memcpy(v172, v173, *(void *)(*(void *)(v176 - 8) + 64));
          }
          else
          {
            unint64_t v187 = v173[1];
            uint64_t v231 = *v173;
            sub_24A1A52B0(*v173, v187);
            void *v172 = v231;
            v172[1] = v187;
            unint64_t v188 = v173[3];
            uint64_t v232 = v173[2];
            sub_24A1A52B0(v232, v188);
            v172[2] = v232;
            v172[3] = v188;
            uint64_t v189 = v173[4];
            *((unsigned char *)v172 + 40) = *((unsigned char *)v173 + 40);
            v172[4] = v189;
            uint64_t v170 = v249;
            v251((char *)v172 + *(int *)(v234 + 28), (char *)v173 + *(int *)(v234 + 28), v264);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v175 + 56))(v172, 0, 1, v234);
          }
          (*(void (**)(void *, void, uint64_t, uint64_t))(v238 + 56))(v170, 0, 1, v243);
        }
        uint64_t v104 = v259;
        uint64_t v134 = (void (*)(uint64_t, char *, uint64_t))v265;
        (*(void (**)(char *, void, uint64_t, uint64_t))(v100 + 56))(v97, 0, 1, v99);
        goto LABEL_77;
      }
    }
    else
    {
      uint64_t v104 = v259;
      if (!v103)
      {
        uint64_t v151 = *(void *)v98;
        v97[8] = v98[8];
        *(void *)uint64_t v97 = v151;
        *((void *)v97 + 2) = *((void *)v98 + 2);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t v152 = *((void *)v98 + 3);
        unint64_t v153 = *((void *)v98 + 4);
        sub_24A1A52B0(v152, v153);
        uint64_t v154 = *((void *)v97 + 3);
        unint64_t v155 = *((void *)v97 + 4);
        *((void *)v97 + 3) = v152;
        *((void *)v97 + 4) = v153;
        sub_24A1A5384(v154, v155);
        *((void *)v97 + 5) = *((void *)v98 + 5);
        uint64_t v156 = *((void *)v98 + 6);
        v97[56] = v98[56];
        *((void *)v97 + 6) = v156;
        ((void (*)(char *, char *, uint64_t))v265)(&v97[*(int *)(v99 + 36)], &v98[*(int *)(v99 + 36)], v264);
        uint64_t v157 = *(int *)(v99 + 40);
        v97 += v157;
        v98 += v157;
        uint64_t v158 = type metadata accessor for SignedObject(0);
        uint64_t v159 = *(void *)(v158 - 8);
        uint64_t v160 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v159 + 48);
        LODWORD(v152) = v160(v97, 1, v158);
        int v161 = v160(v98, 1, v158);
        if (v152)
        {
          uint64_t v104 = v259;
          if (!v161)
          {
            uint64_t v162 = *(void *)v98;
            unint64_t v163 = *((void *)v98 + 1);
            sub_24A1A52B0(*(void *)v98, v163);
            *(void *)uint64_t v97 = v162;
            *((void *)v97 + 1) = v163;
            v257 = *(void (**)(char *, char *, uint64_t))(v263 + 16);
            v257(&v97[*(int *)(v158 + 20)], &v98[*(int *)(v158 + 20)], v264);
            uint64_t v164 = *(int *)(v158 + 24);
            v165 = &v97[v164];
            uint64_t v166 = &v98[v164];
            uint64_t v248 = type metadata accessor for Signature(0);
            uint64_t v254 = *(void *)(v248 - 8);
            if ((*(unsigned int (**)(char *, uint64_t))(v254 + 48))(v166, 1))
            {
              uint64_t v167 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
              memcpy(v165, v166, *(void *)(*(void *)(v167 - 8) + 64));
            }
            else
            {
              uint64_t v215 = *(void *)v166;
              unint64_t v244 = *((void *)v166 + 1);
              sub_24A1A52B0(*(void *)v166, v244);
              *(void *)v165 = v215;
              *((void *)v165 + 1) = v244;
              uint64_t v216 = *((void *)v166 + 2);
              unint64_t v245 = *((void *)v166 + 3);
              sub_24A1A52B0(v216, v245);
              *((void *)v165 + 2) = v216;
              *((void *)v165 + 3) = v245;
              uint64_t v217 = *((void *)v166 + 4);
              v165[40] = v166[40];
              *((void *)v165 + 4) = v217;
              v257(&v165[*(int *)(v248 + 28)], &v166[*(int *)(v248 + 28)], v264);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v254 + 56))(v165, 0, 1, v248);
            }
            uint64_t v104 = v259;
            (*(void (**)(char *, void, uint64_t, uint64_t))(v159 + 56))(v97, 0, 1, v158);
            goto LABEL_46;
          }
        }
        else
        {
          uint64_t v104 = v259;
          if (!v161)
          {
            uint64_t v199 = *(void *)v98;
            unint64_t v200 = *((void *)v98 + 1);
            sub_24A1A52B0(*(void *)v98, v200);
            uint64_t v201 = *(void *)v97;
            unint64_t v202 = *((void *)v97 + 1);
            *(void *)uint64_t v97 = v199;
            *((void *)v97 + 1) = v200;
            sub_24A1A5384(v201, v202);
            ((void (*)(char *, char *, uint64_t))v265)(&v97[*(int *)(v158 + 20)], &v98[*(int *)(v158 + 20)], v264);
            uint64_t v203 = *(int *)(v158 + 24);
            v204 = (uint64_t *)&v97[v203];
            v205 = &v98[v203];
            uint64_t v206 = type metadata accessor for Signature(0);
            uint64_t v207 = *(void *)(v206 - 8);
            v208 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v207 + 48);
            LODWORD(v199) = v208(v204, 1, v206);
            int v209 = v208((uint64_t *)v205, 1, v206);
            if (v199)
            {
              if (!v209)
              {
                uint64_t v210 = *(void *)v205;
                unint64_t v211 = *((void *)v205 + 1);
                sub_24A1A52B0(*(void *)v205, v211);
                uint64_t *v204 = v210;
                v204[1] = v211;
                uint64_t v212 = *((void *)v205 + 2);
                unint64_t v213 = *((void *)v205 + 3);
                sub_24A1A52B0(v212, v213);
                v204[2] = v212;
                v204[3] = v213;
                uint64_t v214 = *((void *)v205 + 4);
                *((unsigned char *)v204 + 40) = v205[40];
                v204[4] = v214;
                (*(void (**)(char *, char *, uint64_t))(v263 + 16))((char *)v204 + *(int *)(v206 + 28), &v205[*(int *)(v206 + 28)], v264);
                (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v207 + 56))(v204, 0, 1, v206);
                uint64_t v104 = v259;
                goto LABEL_46;
              }
            }
            else
            {
              if (!v209)
              {
                uint64_t v219 = *(void *)v205;
                unint64_t v220 = *((void *)v205 + 1);
                sub_24A1A52B0(*(void *)v205, v220);
                uint64_t v221 = *v204;
                unint64_t v222 = v204[1];
                uint64_t *v204 = v219;
                v204[1] = v220;
                sub_24A1A5384(v221, v222);
                uint64_t v223 = *((void *)v205 + 2);
                unint64_t v224 = *((void *)v205 + 3);
                sub_24A1A52B0(v223, v224);
                uint64_t v225 = v204[2];
                unint64_t v226 = v204[3];
                v204[2] = v223;
                v204[3] = v224;
                sub_24A1A5384(v225, v226);
                uint64_t v227 = *((void *)v205 + 4);
                *((unsigned char *)v204 + 40) = v205[40];
                v204[4] = v227;
                uint64_t v134 = (void (*)(uint64_t, char *, uint64_t))v265;
                ((void (*)(char *, char *, uint64_t))v265)((char *)v204 + *(int *)(v206 + 28), &v205[*(int *)(v206 + 28)], v264);
                uint64_t v104 = v259;
                goto LABEL_77;
              }
              sub_24A28EF84((uint64_t)v204, type metadata accessor for Signature);
            }
            uint64_t v218 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
            memcpy(v204, v205, *(void *)(*(void *)(v218 - 8) + 64));
            uint64_t v104 = v259;
            goto LABEL_46;
          }
          sub_24A28EF84((uint64_t)v97, type metadata accessor for SignedObject);
        }
        uint64_t v132 = &qword_26B174320;
LABEL_45:
        uint64_t v133 = __swift_instantiateConcreteTypeFromMangledName(v132);
        memcpy(v97, v98, *(void *)(*(void *)(v133 - 8) + 64));
LABEL_46:
        uint64_t v134 = (void (*)(uint64_t, char *, uint64_t))v265;
LABEL_77:
        uint64_t v190 = *(int *)(v62 + 24);
        uint64_t v191 = v104 + v190;
        v192 = &v61[v190];
        uint64_t v193 = type metadata accessor for LogConsistency(0);
        uint64_t v194 = *(void *)(v193 - 8);
        v195 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v194 + 48);
        int v196 = v195(v191, 1, v193);
        int v197 = v195((uint64_t)v192, 1, v193);
        if (v196)
        {
          if (!v197)
          {
            (*(void (**)(uint64_t, char *, uint64_t))(v263 + 16))(v191, v192, v264);
            *(void *)(v191 + *(int *)(v193 + 20)) = *(void *)&v192[*(int *)(v193 + 20)];
            v198 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v194 + 56);
            swift_retain();
            v198(v191, 0, 1, v193);
            return a1;
          }
        }
        else
        {
          if (!v197)
          {
            v134(v191, v192, v264);
            *(void *)(v191 + *(int *)(v193 + 20)) = *(void *)&v192[*(int *)(v193 + 20)];
            swift_retain();
            swift_release();
            return a1;
          }
          sub_24A28EF84(v191, type metadata accessor for LogConsistency);
        }
        size_t v56 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26B1745E0) - 8) + 64);
        unint64_t v57 = (void *)v191;
        uint64_t v58 = v192;
        goto LABEL_20;
      }
      sub_24A28EF84((uint64_t)v97, type metadata accessor for LogEntry);
    }
    uint64_t v132 = &qword_26B174940;
    goto LABEL_45;
  }
  if (v47)
  {
LABEL_19:
    size_t v56 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26B174880) - 8) + 64);
    unint64_t v57 = (void *)v41;
    uint64_t v58 = v42;
LABEL_20:
    memcpy(v57, v58, v56);
    return a1;
  }
  uint64_t v266 = v44;
  uint64_t v48 = *(void (**)(uint64_t, char *, uint64_t))(v263 + 16);
  v48(v41, v42, v264);
  uint64_t v49 = *(int *)(v43 + 20);
  uint64_t v50 = (char *)(v41 + v49);
  uint64_t v51 = &v42[v49];
  uint64_t v52 = type metadata accessor for ATLogProofs(0);
  uint64_t v53 = *(void *)(v52 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48))(v51, 1, v52))
  {
    uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1742D8);
    memcpy(v50, v51, *(void *)(*(void *)(v54 - 8) + 64));
    uint64_t v55 = v266;
  }
  else
  {
    uint64_t v258 = v53;
    v48((uint64_t)v50, v51, v264);
    __dst = (int *)v52;
    uint64_t v77 = *(int *)(v52 + 20);
    v255 = v50;
    uint64_t v78 = &v50[v77];
    uint64_t v79 = &v51[v77];
    uint64_t v80 = type metadata accessor for LogEntry(0);
    uint64_t v81 = *(void *)(v80 - 8);
    v250 = (void (*)(char *, char *, uint64_t))v48;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v81 + 48))(v79, 1, v80))
    {
      uint64_t v82 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174940);
      memcpy(v78, v79, *(void *)(*(void *)(v82 - 8) + 64));
      uint64_t v83 = v255;
      uint64_t v84 = __dst;
    }
    else
    {
      v240 = v51;
      uint64_t v246 = v81;
      uint64_t v85 = *(void *)v79;
      v78[8] = v79[8];
      *(void *)uint64_t v78 = v85;
      *((void *)v78 + 2) = *((void *)v79 + 2);
      uint64_t v87 = *((void *)v79 + 3);
      unint64_t v86 = *((void *)v79 + 4);
      swift_bridgeObjectRetain();
      sub_24A1A52B0(v87, v86);
      *((void *)v78 + 3) = v87;
      *((void *)v78 + 4) = v86;
      *((void *)v78 + 5) = *((void *)v79 + 5);
      uint64_t v88 = *((void *)v79 + 6);
      v78[56] = v79[56];
      *((void *)v78 + 6) = v88;
      v48((uint64_t)&v78[*(int *)(v80 + 36)], &v79[*(int *)(v80 + 36)], v264);
      uint64_t v89 = *(int *)(v80 + 40);
      uint64_t v90 = &v78[v89];
      uint64_t v91 = &v79[v89];
      uint64_t v92 = type metadata accessor for SignedObject(0);
      uint64_t v93 = *(void *)(v92 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v93 + 48))(v91, 1, v92))
      {
        uint64_t v94 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174320);
        memcpy(v90, v91, *(void *)(*(void *)(v94 - 8) + 64));
        uint64_t v83 = v255;
        uint64_t v84 = __dst;
        uint64_t v51 = v240;
        uint64_t v95 = v246;
      }
      else
      {
        uint64_t v233 = v93;
        uint64_t v237 = v92;
        uint64_t v124 = *(void *)v91;
        unint64_t v125 = *((void *)v91 + 1);
        sub_24A1A52B0(*(void *)v91, v125);
        *(void *)uint64_t v90 = v124;
        *((void *)v90 + 1) = v125;
        v250(&v90[*(int *)(v237 + 20)], &v91[*(int *)(v237 + 20)], v264);
        uint64_t v126 = *(int *)(v237 + 24);
        uint64_t v127 = &v90[v126];
        uint64_t v128 = (uint64_t *)&v91[v126];
        uint64_t v129 = type metadata accessor for Signature(0);
        uint64_t v230 = *(void *)(v129 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v230 + 48))(v128, 1, v129))
        {
          uint64_t v130 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
          memcpy(v127, v128, *(void *)(*(void *)(v130 - 8) + 64));
          uint64_t v83 = v255;
          uint64_t v84 = __dst;
          uint64_t v131 = v237;
          uint64_t v51 = v240;
        }
        else
        {
          unint64_t v140 = v128[1];
          uint64_t v228 = *v128;
          sub_24A1A52B0(*v128, v140);
          *(void *)uint64_t v127 = v228;
          *((void *)v127 + 1) = v140;
          unint64_t v141 = v128[3];
          uint64_t v229 = v128[2];
          sub_24A1A52B0(v229, v141);
          *((void *)v127 + 2) = v229;
          *((void *)v127 + 3) = v141;
          uint64_t v131 = v237;
          uint64_t v142 = v128[4];
          v127[40] = *((unsigned char *)v128 + 40);
          *((void *)v127 + 4) = v142;
          v250(&v127[*(int *)(v129 + 28)], (char *)v128 + *(int *)(v129 + 28), v264);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v230 + 56))(v127, 0, 1, v129);
          uint64_t v83 = v255;
          uint64_t v84 = __dst;
          uint64_t v51 = v240;
        }
        (*(void (**)(char *, void, uint64_t, uint64_t))(v233 + 56))(v90, 0, 1, v131);
        uint64_t v95 = v246;
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v95 + 56))(v78, 0, 1, v80);
    }
    uint64_t v143 = v84[6];
    unint64_t v144 = &v83[v143];
    uint64_t v145 = &v51[v143];
    uint64_t v146 = type metadata accessor for LogConsistency(0);
    uint64_t v147 = *(void *)(v146 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v147 + 48))(v145, 1, v146))
    {
      uint64_t v148 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1745E0);
      memcpy(v144, v145, *(void *)(*(void *)(v148 - 8) + 64));
    }
    else
    {
      v250(v144, v145, v264);
      *(void *)&v144[*(int *)(v146 + 20)] = *(void *)&v145[*(int *)(v146 + 20)];
      uint64_t v149 = *(void (**)(char *, void, uint64_t, uint64_t))(v147 + 56);
      swift_retain();
      v149(v144, 0, 1, v146);
    }
    uint64_t v55 = v266;
    (*(void (**)(char *, void, uint64_t, int *))(v258 + 56))(v83, 0, 1, __dst);
  }
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v55 + 56))(v41, 0, 1, v43);
  return a1;
}

uint64_t sub_24A293830(uint64_t a1, uint64_t a2, int *a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v7 = a3[7];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_24A2A6E10();
  unint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32);
  v11(v8, v9, v10);
  uint64_t v12 = a3[8];
  unint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (void *)(a2 + v12);
  uint64_t v15 = type metadata accessor for Proto_SealedHashLedger(0);
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174800);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    *unint64_t v13 = *v14;
    v11((uint64_t)v13 + *(int *)(v15 + 20), (uint64_t)v14 + *(int *)(v15 + 20), v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  uint64_t v18 = a3[9];
  uint64_t v19 = (void *)(a1 + v18);
  uint64_t v20 = (const void *)(a2 + v18);
  uint64_t v21 = sub_24A2A6DC0();
  uint64_t v22 = *(void *)(v21 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
  {
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749E0);
    memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v22 + 32))(v19, v20, v21);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  }
  uint64_t v24 = a3[10];
  int v25 = (char *)(a1 + v24);
  uint64_t v26 = (char *)(a2 + v24);
  uint64_t v27 = type metadata accessor for Proto_TransparencyProofs(0);
  uint64_t v28 = *(void *)(v27 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
  {
    uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174880);
    memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
  }
  else
  {
    uint64_t v77 = v28;
    v11((uint64_t)v25, (uint64_t)v26, v10);
    uint64_t v30 = *(int *)(v27 + 20);
    uint64_t v31 = &v25[v30];
    uint64_t v32 = &v26[v30];
    uint64_t v33 = type metadata accessor for ATLogProofs(0);
    uint64_t v34 = *(void *)(v33 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
    {
      uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1742D8);
      memcpy(v31, v32, *(void *)(*(void *)(v35 - 8) + 64));
      uint64_t v36 = v77;
    }
    else
    {
      uint64_t v74 = v34;
      v11((uint64_t)v31, (uint64_t)v32, v10);
      uint64_t v75 = v33;
      unint64_t v76 = v31;
      uint64_t v37 = *(int *)(v33 + 20);
      int v38 = &v31[v37];
      uint64_t v39 = v11;
      uint64_t v40 = &v32[v37];
      uint64_t v41 = type metadata accessor for LogEntry(0);
      uint64_t v42 = *(void *)(v41 - 8);
      uint64_t v73 = (void (*)(char *, char *, uint64_t))v39;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41))
      {
        uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174940);
        memcpy(v38, v40, *(void *)(*(void *)(v43 - 8) + 64));
        uint64_t v45 = v75;
        uint64_t v44 = v76;
      }
      else
      {
        uint64_t v72 = v32;
        uint64_t v71 = v42;
        *(void *)int v38 = *(void *)v40;
        v38[8] = v40[8];
        *((void *)v38 + 2) = *((void *)v40 + 2);
        *(_OWORD *)(v38 + 24) = *(_OWORD *)(v40 + 24);
        uint64_t v46 = *((void *)v40 + 6);
        *((void *)v38 + 5) = *((void *)v40 + 5);
        *((void *)v38 + 6) = v46;
        v38[56] = v40[56];
        v39((uint64_t)&v38[*(int *)(v41 + 36)], (uint64_t)&v40[*(int *)(v41 + 36)], v10);
        uint64_t v47 = *(int *)(v41 + 40);
        uint64_t v48 = &v38[v47];
        uint64_t v49 = &v40[v47];
        uint64_t v50 = type metadata accessor for SignedObject(0);
        uint64_t v51 = *(void *)(v50 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48))(v49, 1, v50))
        {
          uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174320);
          memcpy(v48, v49, *(void *)(*(void *)(v52 - 8) + 64));
          uint64_t v45 = v75;
          uint64_t v53 = v71;
          uint64_t v32 = v72;
        }
        else
        {
          uint64_t v68 = v51;
          *(_OWORD *)uint64_t v48 = *(_OWORD *)v49;
          v73(&v48[*(int *)(v50 + 20)], &v49[*(int *)(v50 + 20)], v10);
          uint64_t v69 = v50;
          uint64_t v70 = v48;
          uint64_t v54 = *(int *)(v50 + 24);
          uint64_t v55 = &v48[v54];
          size_t v56 = &v49[v54];
          uint64_t v57 = type metadata accessor for Signature(0);
          uint64_t v58 = *(void *)(v57 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48))(v56, 1, v57))
          {
            uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
            memcpy(v55, v56, *(void *)(*(void *)(v59 - 8) + 64));
          }
          else
          {
            long long v60 = *((_OWORD *)v56 + 1);
            *(_OWORD *)uint64_t v55 = *(_OWORD *)v56;
            *((_OWORD *)v55 + 1) = v60;
            *((void *)v55 + 4) = *((void *)v56 + 4);
            v55[40] = v56[40];
            v73(&v55[*(int *)(v57 + 28)], &v56[*(int *)(v57 + 28)], v10);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v58 + 56))(v55, 0, 1, v57);
          }
          uint64_t v32 = v72;
          (*(void (**)(char *, void, uint64_t, uint64_t))(v68 + 56))(v70, 0, 1, v69);
          uint64_t v45 = v75;
          uint64_t v53 = v71;
        }
        (*(void (**)(char *, void, uint64_t, uint64_t))(v53 + 56))(v38, 0, 1, v41);
        uint64_t v44 = v76;
      }
      uint64_t v61 = *(int *)(v45 + 24);
      uint64_t v62 = &v44[v61];
      uint64_t v63 = &v32[v61];
      uint64_t v64 = type metadata accessor for LogConsistency(0);
      uint64_t v65 = *(void *)(v64 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v65 + 48))(v63, 1, v64))
      {
        uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1745E0);
        memcpy(v62, v63, *(void *)(*(void *)(v66 - 8) + 64));
      }
      else
      {
        v73(v62, v63, v10);
        *(void *)&v62[*(int *)(v64 + 20)] = *(void *)&v63[*(int *)(v64 + 20)];
        (*(void (**)(char *, void, uint64_t, uint64_t))(v65 + 56))(v62, 0, 1, v64);
      }
      uint64_t v36 = v77;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v74 + 56))(v76, 0, 1, v75);
    }
    (*(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56))(v25, 0, 1, v27);
  }
  return a1;
}

uint64_t *sub_24A294088(uint64_t *a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_24A1A5384(v6, v7);
  uint64_t v8 = a1[2];
  unint64_t v9 = a1[3];
  *((_OWORD *)a1 + 1) = *(_OWORD *)(a2 + 16);
  sub_24A1A5384(v8, v9);
  a1[4] = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  uint64_t v10 = a3[7];
  unint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = sub_24A2A6E10();
  uint64_t v203 = *(void (**)(char *, uint64_t))(*(void *)(v13 - 8) + 40);
  uint64_t v206 = v13;
  uint64_t v202 = *(void *)(v13 - 8);
  v203(v11, v12);
  uint64_t v14 = a3[8];
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)(a2 + v14);
  uint64_t v17 = type metadata accessor for Proto_SealedHashLedger(0);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  int v20 = v19(v15, 1, v17);
  int v21 = v19(v16, 1, v17);
  if (v20)
  {
    if (!v21)
    {
      *(void *)uint64_t v15 = *(void *)v16;
      (*(void (**)(char *, char *, uint64_t))(v202 + 32))(&v15[*(int *)(v17 + 20)], &v16[*(int *)(v17 + 20)], v206);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v21)
  {
    sub_24A28EF84((uint64_t)v15, type metadata accessor for Proto_SealedHashLedger);
LABEL_6:
    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174800);
    memcpy(v15, v16, *(void *)(*(void *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  *(void *)uint64_t v15 = *(void *)v16;
  swift_bridgeObjectRelease();
  ((void (*)(char *, char *, uint64_t))v203)(&v15[*(int *)(v17 + 20)], &v16[*(int *)(v17 + 20)], v206);
LABEL_7:
  uint64_t v23 = a3[9];
  uint64_t v24 = (char *)a1 + v23;
  int v25 = (char *)(a2 + v23);
  uint64_t v26 = sub_24A2A6DC0();
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v27 + 48);
  int v29 = v28(v24, 1, v26);
  int v30 = v28(v25, 1, v26);
  if (v29)
  {
    if (!v30)
    {
      (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v24, v25, v26);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v30)
  {
    (*(void (**)(char *, uint64_t))(v27 + 8))(v24, v26);
LABEL_12:
    uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749E0);
    memcpy(v24, v25, *(void *)(*(void *)(v31 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v27 + 40))(v24, v25, v26);
LABEL_13:
  uint64_t v32 = v206;
  uint64_t v33 = a3[10];
  uint64_t v34 = (uint64_t)a1 + v33;
  uint64_t v35 = (char *)(a2 + v33);
  uint64_t v36 = type metadata accessor for Proto_TransparencyProofs(0);
  uint64_t v37 = *(void *)(v36 - 8);
  int v38 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v37 + 48);
  int v39 = v38(v34, 1, v36);
  int v40 = v38((uint64_t)v35, 1, v36);
  if (v39)
  {
    if (!v40)
    {
      v204 = *(void (**)(uint64_t, char *, uint64_t))(v202 + 32);
      v204(v34, v35, v206);
      uint64_t v41 = *(int *)(v36 + 20);
      uint64_t v42 = (char *)(v34 + v41);
      uint64_t v43 = &v35[v41];
      uint64_t v44 = type metadata accessor for ATLogProofs(0);
      uint64_t v45 = *(void *)(v44 - 8);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v43, 1, v44))
      {
        uint64_t v187 = v45;
        v204((uint64_t)v42, v43, v206);
        uint64_t v191 = (int *)v44;
        uint64_t v67 = *(int *)(v44 + 20);
        uint64_t v201 = v42;
        uint64_t v68 = &v42[v67];
        uint64_t v69 = &v43[v67];
        uint64_t v70 = type metadata accessor for LogEntry(0);
        uint64_t v71 = *(void *)(v70 - 8);
        int v196 = v43;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v71 + 48))(v69, 1, v70))
        {
          uint64_t v72 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174940);
          memcpy(v68, v69, *(void *)(*(void *)(v72 - 8) + 64));
          uint64_t v73 = v191;
        }
        else
        {
          uint64_t v179 = v71;
          *(void *)uint64_t v68 = *(void *)v69;
          v68[8] = v69[8];
          *((void *)v68 + 2) = *((void *)v69 + 2);
          *(_OWORD *)(v68 + 24) = *(_OWORD *)(v69 + 24);
          uint64_t v74 = *((void *)v69 + 6);
          *((void *)v68 + 5) = *((void *)v69 + 5);
          *((void *)v68 + 6) = v74;
          v68[56] = v69[56];
          v204((uint64_t)&v68[*(int *)(v70 + 36)], &v69[*(int *)(v70 + 36)], v206);
          uint64_t v75 = *(int *)(v70 + 40);
          __dst = &v68[v75];
          unint64_t v76 = &v69[v75];
          uint64_t v77 = type metadata accessor for SignedObject(0);
          uint64_t v78 = *(void *)(v77 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v78 + 48))(v76, 1, v77))
          {
            uint64_t v79 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174320);
            memcpy(__dst, v76, *(void *)(*(void *)(v79 - 8) + 64));
          }
          else
          {
            uint64_t v175 = v78;
            *(_OWORD *)__dst = *(_OWORD *)v76;
            v204((uint64_t)&__dst[*(int *)(v77 + 20)], &v76[*(int *)(v77 + 20)], v206);
            uint64_t v177 = v77;
            uint64_t v101 = *(int *)(v77 + 24);
            int v102 = &__dst[v101];
            int v103 = &v76[v101];
            uint64_t v104 = type metadata accessor for Signature(0);
            uint64_t v105 = *(void *)(v104 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v105 + 48))(v103, 1, v104))
            {
              uint64_t v106 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
              memcpy(v102, v103, *(void *)(*(void *)(v106 - 8) + 64));
            }
            else
            {
              long long v117 = *((_OWORD *)v103 + 1);
              *(_OWORD *)int v102 = *(_OWORD *)v103;
              *((_OWORD *)v102 + 1) = v117;
              *((void *)v102 + 4) = *((void *)v103 + 4);
              v102[40] = v103[40];
              v204((uint64_t)&v102[*(int *)(v104 + 28)], &v103[*(int *)(v104 + 28)], v206);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v105 + 56))(v102, 0, 1, v104);
            }
            (*(void (**)(char *, void, uint64_t, uint64_t))(v175 + 56))(__dst, 0, 1, v177);
          }
          uint64_t v45 = v187;
          uint64_t v73 = v191;
          (*(void (**)(char *, void, uint64_t, uint64_t))(v179 + 56))(v68, 0, 1, v70);
        }
        uint64_t v118 = v73[6];
        uint64_t v119 = &v201[v118];
        uint64_t v120 = &v196[v118];
        uint64_t v121 = type metadata accessor for LogConsistency(0);
        uint64_t v122 = *(void *)(v121 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v122 + 48))(v120, 1, v121))
        {
          uint64_t v123 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1745E0);
          memcpy(v119, v120, *(void *)(*(void *)(v123 - 8) + 64));
        }
        else
        {
          v204((uint64_t)v119, v120, v206);
          *(void *)&v119[*(int *)(v121 + 20)] = *(void *)&v120[*(int *)(v121 + 20)];
          (*(void (**)(char *, void, uint64_t, uint64_t))(v122 + 56))(v119, 0, 1, v121);
        }
        (*(void (**)(char *, void, uint64_t, int *))(v45 + 56))(v201, 0, 1, v73);
        goto LABEL_57;
      }
      size_t v46 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26B1742D8) - 8) + 64);
      uint64_t v47 = v42;
      goto LABEL_17;
    }
    goto LABEL_20;
  }
  if (!v40)
  {
    ((void (*)(uint64_t, char *, uint64_t))v203)(v34, v35, v206);
    uint64_t v51 = *(int *)(v36 + 20);
    uint64_t v52 = v34 + v51;
    uint64_t v53 = &v35[v51];
    uint64_t v36 = type metadata accessor for ATLogProofs(0);
    uint64_t v37 = *(void *)(v36 - 8);
    uint64_t v54 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v37 + 48);
    int v55 = v54(v52, 1, v36);
    int v56 = v54((uint64_t)v53, 1, v36);
    if (v55)
    {
      if (!v56)
      {
        uint64_t v57 = v53;
        uint64_t v58 = *(void (**)(uint64_t, char *, uint64_t))(v202 + 32);
        v58(v52, v57, v206);
        uint64_t v59 = *(int *)(v36 + 20);
        uint64_t v205 = v52;
        long long v60 = (void *)(v52 + v59);
        unint64_t v200 = v57;
        uint64_t v61 = &v57[v59];
        uint64_t v62 = type metadata accessor for LogEntry(0);
        uint64_t v63 = *(void *)(v62 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v63 + 48))(v61, 1, v62))
        {
          uint64_t v64 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174940);
          memcpy(v60, v61, *(void *)(*(void *)(v64 - 8) + 64));
          uint64_t v65 = (void (*)(char *, char *, uint64_t))v58;
          uint64_t v66 = v200;
        }
        else
        {
          uint64_t v189 = v63;
          *long long v60 = *(void *)v61;
          *((unsigned char *)v60 + 8) = v61[8];
          v60[2] = *((void *)v61 + 2);
          *(_OWORD *)(v60 + 3) = *(_OWORD *)(v61 + 24);
          uint64_t v95 = *((void *)v61 + 6);
          v60[5] = *((void *)v61 + 5);
          v60[6] = v95;
          *((unsigned char *)v60 + 56) = v61[56];
          v58((uint64_t)v60 + *(int *)(v62 + 36), &v61[*(int *)(v62 + 36)], v206);
          uint64_t v96 = *(int *)(v62 + 40);
          v198 = (_OWORD *)((char *)v60 + v96);
          uint64_t v97 = &v61[v96];
          uint64_t v98 = type metadata accessor for SignedObject(0);
          uint64_t v99 = *(void *)(v98 - 8);
          uint64_t v193 = v58;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v99 + 48))(v97, 1, v98))
          {
            uint64_t v100 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174320);
            memcpy(v198, v97, *(void *)(*(void *)(v100 - 8) + 64));
            uint64_t v32 = v206;
          }
          else
          {
            uint64_t v180 = v99;
            _OWORD *v198 = *(_OWORD *)v97;
            v58((uint64_t)v198 + *(int *)(v98 + 20), &v97[*(int *)(v98 + 20)], v206);
            __dsta = (void *)v98;
            uint64_t v111 = *(int *)(v98 + 24);
            uint64_t v112 = (_OWORD *)((char *)v198 + v111);
            uint64_t v113 = &v97[v111];
            uint64_t v114 = type metadata accessor for Signature(0);
            uint64_t v115 = *(void *)(v114 - 8);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v115 + 48))(v113, 1, v114))
            {
              uint64_t v116 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
              memcpy(v112, v113, *(void *)(*(void *)(v116 - 8) + 64));
              uint64_t v32 = v206;
            }
            else
            {
              long long v140 = *((_OWORD *)v113 + 1);
              *uint64_t v112 = *(_OWORD *)v113;
              v112[1] = v140;
              *((void *)v112 + 4) = *((void *)v113 + 4);
              *((unsigned char *)v112 + 40) = v113[40];
              uint64_t v141 = *(int *)(v114 + 28);
              uint64_t v142 = &v113[v141];
              uint64_t v32 = v206;
              v58((uint64_t)v112 + v141, v142, v206);
              (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v115 + 56))(v112, 0, 1, v114);
            }
            (*(void (**)(_OWORD *, void, uint64_t, void *))(v180 + 56))(v198, 0, 1, __dsta);
          }
          uint64_t v66 = v200;
          (*(void (**)(void *, void, uint64_t, uint64_t))(v189 + 56))(v60, 0, 1, v62);
          uint64_t v65 = (void (*)(char *, char *, uint64_t))v193;
        }
        uint64_t v143 = *(int *)(v36 + 24);
        uint64_t v34 = v205;
        unint64_t v144 = (char *)(v205 + v143);
        uint64_t v43 = &v66[v143];
        uint64_t v145 = type metadata accessor for LogConsistency(0);
        uint64_t v146 = *(void *)(v145 - 8);
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v146 + 48))(v43, 1, v145))
        {
          v65(v144, v43, v32);
          *(void *)&v144[*(int *)(v145 + 20)] = *(void *)&v43[*(int *)(v145 + 20)];
          (*(void (**)(char *, void, uint64_t, uint64_t))(v146 + 56))(v144, 0, 1, v145);
          goto LABEL_57;
        }
        size_t v46 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26B1745E0) - 8) + 64);
        uint64_t v47 = v144;
LABEL_17:
        memcpy(v47, v43, v46);
LABEL_57:
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
        return a1;
      }
      goto LABEL_32;
    }
    if (v56)
    {
      sub_24A28EF84(v52, type metadata accessor for ATLogProofs);
LABEL_32:
      size_t v48 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26B1742D8) - 8) + 64);
      uint64_t v49 = (void *)v52;
      uint64_t v50 = v53;
      goto LABEL_21;
    }
    ((void (*)(uint64_t, char *, uint64_t))v203)(v52, v53, v206);
    uint64_t v80 = *(int *)(v36 + 20);
    uint64_t v81 = v52 + v80;
    uint64_t v82 = &v53[v80];
    uint64_t v83 = type metadata accessor for LogEntry(0);
    v192 = *(void **)(v83 - 8);
    uint64_t v84 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v192[6];
    int v85 = v84(v81, 1, v83);
    int v197 = (void *)v83;
    int v86 = v84((uint64_t)v82, 1, v83);
    if (v85)
    {
      if (!v86)
      {
        *(void *)uint64_t v81 = *(void *)v82;
        *(unsigned char *)(v81 + 8) = v82[8];
        *(void *)(v81 + 16) = *((void *)v82 + 2);
        *(_OWORD *)(v81 + 24) = *(_OWORD *)(v82 + 24);
        uint64_t v87 = *((void *)v82 + 6);
        *(void *)(v81 + 40) = *((void *)v82 + 5);
        *(void *)(v81 + 48) = v87;
        *(unsigned char *)(v81 + 56) = v82[56];
        unint64_t v188 = *(void (**)(uint64_t, char *, uint64_t))(v202 + 32);
        v188(v81 + *(int *)(v83 + 36), &v82[*(int *)(v83 + 36)], v206);
        uint64_t v88 = *(int *)(v83 + 40);
        uint64_t v89 = (_OWORD *)(v81 + v88);
        uint64_t v90 = &v82[v88];
        uint64_t v91 = type metadata accessor for SignedObject(0);
        uint64_t v92 = *(void *)(v91 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v92 + 48))(v90, 1, v91))
        {
          uint64_t v93 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174320);
          memcpy(v89, v90, *(void *)(*(void *)(v93 - 8) + 64));
          uint64_t v94 = v192;
        }
        else
        {
          uint64_t v178 = v92;
          *uint64_t v89 = *(_OWORD *)v90;
          v188((uint64_t)v89 + *(int *)(v91 + 20), &v90[*(int *)(v91 + 20)], v206);
          uint64_t v181 = v91;
          __dstb = v89;
          uint64_t v134 = *(int *)(v91 + 24);
          uint64_t v135 = (_OWORD *)((char *)v89 + v134);
          uint64_t v136 = &v90[v134];
          uint64_t v137 = type metadata accessor for Signature(0);
          uint64_t v176 = *(void *)(v137 - 8);
          uint64_t v138 = v137;
          uint64_t v94 = v192;
          if ((*(unsigned int (**)(char *, uint64_t))(v176 + 48))(v136, 1))
          {
            uint64_t v139 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
            memcpy(v135, v136, *(void *)(*(void *)(v139 - 8) + 64));
          }
          else
          {
            long long v151 = *((_OWORD *)v136 + 1);
            *uint64_t v135 = *(_OWORD *)v136;
            v135[1] = v151;
            *((void *)v135 + 4) = *((void *)v136 + 4);
            *((unsigned char *)v135 + 40) = v136[40];
            v188((uint64_t)v135 + *(int *)(v138 + 28), &v136[*(int *)(v138 + 28)], v206);
            (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v176 + 56))(v135, 0, 1, v138);
          }
          (*(void (**)(void *, void, uint64_t, uint64_t))(v178 + 56))(__dstb, 0, 1, v181);
        }
        ((void (*)(uint64_t, void, uint64_t, void *))v94[7])(v81, 0, 1, v197);
        uint64_t v110 = v206;
        goto LABEL_77;
      }
    }
    else
    {
      if (!v86)
      {
        *(void *)uint64_t v81 = *(void *)v82;
        *(unsigned char *)(v81 + 8) = v82[8];
        *(void *)(v81 + 16) = *((void *)v82 + 2);
        swift_bridgeObjectRelease();
        uint64_t v125 = *(void *)(v81 + 24);
        unint64_t v126 = *(void *)(v81 + 32);
        *(_OWORD *)(v81 + 24) = *(_OWORD *)(v82 + 24);
        sub_24A1A5384(v125, v126);
        uint64_t v127 = *((void *)v82 + 6);
        *(void *)(v81 + 40) = *((void *)v82 + 5);
        *(void *)(v81 + 48) = v127;
        *(unsigned char *)(v81 + 56) = v82[56];
        ((void (*)(uint64_t, char *, uint64_t))v203)(v81 + *(int *)(v83 + 36), &v82[*(int *)(v83 + 36)], v206);
        uint64_t v128 = *(int *)(v83 + 40);
        uint64_t v129 = (unint64_t *)(v81 + v128);
        v82 += v128;
        uint64_t v130 = type metadata accessor for SignedObject(0);
        uint64_t v131 = *(void *)(v130 - 8);
        uint64_t v132 = *(uint64_t (**)(unint64_t *, uint64_t, uint64_t))(v131 + 48);
        uint64_t v199 = v129;
        LODWORD(v129) = v132(v129, 1, v130);
        int v133 = v132((unint64_t *)v82, 1, v130);
        if (v129)
        {
          if (!v133)
          {
            *(_OWORD *)uint64_t v199 = *(_OWORD *)v82;
            uint64_t v110 = v206;
            __dstc = *(void (**)(char *, char *, uint64_t))(v202 + 32);
            __dstc((char *)v199 + *(int *)(v130 + 20), &v82[*(int *)(v130 + 20)], v206);
            uint64_t v147 = *(int *)(v130 + 24);
            uint64_t v194 = (_OWORD *)((char *)v199 + v147);
            uint64_t v148 = &v82[v147];
            uint64_t v149 = type metadata accessor for Signature(0);
            uint64_t v182 = *(void *)(v149 - 8);
            uint64_t v190 = v149;
            if ((*(unsigned int (**)(char *, uint64_t))(v182 + 48))(v148, 1))
            {
              uint64_t v150 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8);
              memcpy(v194, v148, *(void *)(*(void *)(v150 - 8) + 64));
            }
            else
            {
              long long v170 = *((_OWORD *)v148 + 1);
              *uint64_t v194 = *(_OWORD *)v148;
              v194[1] = v170;
              *((void *)v194 + 4) = *((void *)v148 + 4);
              *((unsigned char *)v194 + 40) = v148[40];
              __dstc((char *)v194 + *(int *)(v190 + 28), &v148[*(int *)(v190 + 28)], v206);
              (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v182 + 56))(v194, 0, 1, v190);
            }
            (*(void (**)(unint64_t *, void, uint64_t, uint64_t))(v131 + 56))(v199, 0, 1, v130);
            goto LABEL_77;
          }
          size_t v107 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26B174320) - 8) + 64);
          uint64_t v108 = v199;
        }
        else
        {
          if (!v133)
          {
            uint64_t v160 = *v199;
            unint64_t v161 = v199[1];
            *(_OWORD *)uint64_t v199 = *(_OWORD *)v82;
            sub_24A1A5384(v160, v161);
            ((void (*)(char *, char *, uint64_t))v203)((char *)v199 + *(int *)(v130 + 20), &v82[*(int *)(v130 + 20)], v206);
            uint64_t v162 = *(int *)(v130 + 24);
            uint64_t v163 = (uint64_t)v199 + v162;
            uint64_t v164 = &v82[v162];
            uint64_t v165 = type metadata accessor for Signature(0);
            v195 = *(void **)(v165 - 8);
            uint64_t v166 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v195[6];
            int v167 = v166(v163, 1, v165);
            int v168 = v166((uint64_t)v164, 1, v165);
            if (v167)
            {
              if (!v168)
              {
                long long v169 = *((_OWORD *)v164 + 1);
                *(_OWORD *)uint64_t v163 = *(_OWORD *)v164;
                *(_OWORD *)(v163 + 16) = v169;
                *(void *)(v163 + 32) = *((void *)v164 + 4);
                *(unsigned char *)(v163 + 40) = v164[40];
                uint64_t v110 = v206;
                (*(void (**)(uint64_t, char *, uint64_t))(v202 + 32))(v163 + *(int *)(v165 + 28), &v164[*(int *)(v165 + 28)], v206);
                ((void (*)(uint64_t, void, uint64_t, uint64_t))v195[7])(v163, 0, 1, v165);
                goto LABEL_77;
              }
            }
            else
            {
              if (!v168)
              {
                uint64_t v171 = *(void *)v163;
                unint64_t v172 = *(void *)(v163 + 8);
                *(_OWORD *)uint64_t v163 = *(_OWORD *)v164;
                sub_24A1A5384(v171, v172);
                uint64_t v173 = *(void *)(v163 + 16);
                unint64_t v174 = *(void *)(v163 + 24);
                *(_OWORD *)(v163 + 16) = *((_OWORD *)v164 + 1);
                sub_24A1A5384(v173, v174);
                *(void *)(v163 + 32) = *((void *)v164 + 4);
                *(unsigned char *)(v163 + 40) = v164[40];
                uint64_t v110 = v206;
                ((void (*)(uint64_t, char *, uint64_t))v203)(v163 + *(int *)(v165 + 28), &v164[*(int *)(v165 + 28)], v206);
                goto LABEL_77;
              }
              sub_24A28EF84(v163, type metadata accessor for Signature);
            }
            size_t v107 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26B1749B8) - 8) + 64);
            uint64_t v108 = (void *)v163;
            uint64_t v109 = v164;
LABEL_47:
            memcpy(v108, v109, v107);
            uint64_t v110 = v206;
LABEL_77:
            uint64_t v152 = *(int *)(v36 + 24);
            uint64_t v153 = v52 + v152;
            uint64_t v154 = &v53[v152];
            uint64_t v155 = type metadata accessor for LogConsistency(0);
            uint64_t v156 = *(void *)(v155 - 8);
            uint64_t v157 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v156 + 48);
            int v158 = v157(v153, 1, v155);
            int v159 = v157((uint64_t)v154, 1, v155);
            if (v158)
            {
              if (!v159)
              {
                (*(void (**)(uint64_t, char *, uint64_t))(v202 + 32))(v153, v154, v110);
                *(void *)(v153 + *(int *)(v155 + 20)) = *(void *)&v154[*(int *)(v155 + 20)];
                (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v156 + 56))(v153, 0, 1, v155);
                return a1;
              }
            }
            else
            {
              if (!v159)
              {
                ((void (*)(uint64_t, char *, uint64_t))v203)(v153, v154, v110);
                *(void *)(v153 + *(int *)(v155 + 20)) = *(void *)&v154[*(int *)(v155 + 20)];
                swift_release();
                return a1;
              }
              sub_24A28EF84(v153, type metadata accessor for LogConsistency);
            }
            size_t v48 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26B1745E0) - 8) + 64);
            uint64_t v49 = (void *)v153;
            uint64_t v50 = v154;
            goto LABEL_21;
          }
          sub_24A28EF84((uint64_t)v199, type metadata accessor for SignedObject);
          size_t v107 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26B174320) - 8) + 64);
          uint64_t v108 = v199;
        }
LABEL_46:
        uint64_t v109 = v82;
        goto LABEL_47;
      }
      sub_24A28EF84(v81, type metadata accessor for LogEntry);
    }
    size_t v107 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26B174940) - 8) + 64);
    uint64_t v108 = (void *)v81;
    goto LABEL_46;
  }
  sub_24A28EF84(v34, type metadata accessor for Proto_TransparencyProofs);
LABEL_20:
  size_t v48 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26B174880) - 8) + 64);
  uint64_t v49 = (void *)v34;
  uint64_t v50 = v35;
LABEL_21:
  memcpy(v49, v50, v48);
  return a1;
}

uint64_t sub_24A2958A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24A2958BC);
}

uint64_t sub_24A2958BC(uint64_t a1, uint64_t a2, int *a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 32);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  uint64_t v8 = sub_24A2A6E10();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a2)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a3[7];
LABEL_11:
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
    return v14(a1 + v11, a2, v9);
  }
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174800);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a2)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a3[8];
    goto LABEL_11;
  }
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749E0);
  if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a2)
  {
    uint64_t v9 = v13;
    uint64_t v10 = *(void *)(v13 - 8);
    uint64_t v11 = a3[9];
    goto LABEL_11;
  }
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174880);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48);
  uint64_t v17 = v15;
  uint64_t v18 = a1 + a3[10];

  return v16(v18, a2, v17);
}

uint64_t sub_24A295A8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24A295AA0);
}

uint64_t sub_24A295AA0(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 32) = (a2 - 1);
    return result;
  }
  uint64_t v8 = sub_24A2A6E10();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[7];
LABEL_9:
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return v14(v5 + v11, a2, a2, v9);
  }
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174800);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a3)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a4[8];
    goto LABEL_9;
  }
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749E0);
  if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
  {
    uint64_t v9 = v13;
    uint64_t v10 = *(void *)(v13 - 8);
    uint64_t v11 = a4[9];
    goto LABEL_9;
  }
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174880);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
  uint64_t v17 = v15;
  uint64_t v18 = v5 + a4[10];

  return v16(v18, a2, a2, v17);
}

uint64_t type metadata accessor for Proto_AttestationBundle(uint64_t a1)
{
  return sub_24A1AE704(a1, (uint64_t *)&unk_26B174278);
}

void sub_24A295C90()
{
  sub_24A2A6E10();
  if (v0 <= 0x3F)
  {
    sub_24A295E40(319, &qword_26B174808, (void (*)(uint64_t))type metadata accessor for Proto_SealedHashLedger);
    if (v1 <= 0x3F)
    {
      sub_24A295E40(319, &qword_26B1749E8, MEMORY[0x263F502F0]);
      if (v2 <= 0x3F)
      {
        sub_24A295E40(319, &qword_26B174888, (void (*)(uint64_t))type metadata accessor for Proto_TransparencyProofs);
        if (v3 <= 0x3F) {
          swift_initStructMetadata();
        }
      }
    }
  }
}

void sub_24A295E40(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_24A2A7B50();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_24A295E98()
{
  qword_26977A910 = (uint64_t)&unk_26FDFC638;
}

uint64_t sub_24A295EAC@<X0>(void *a1@<X8>)
{
  return sub_24A217308(&qword_269778620, &qword_26977A910, a1);
}

uint64_t sub_24A295ED0(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_24A2A0980();

  return MEMORY[0x270F44AF0](a1, a2, v4);
}

void sub_24A295F20()
{
  qword_26977A918 = (uint64_t)&unk_26FDFC688;
}

uint64_t sub_24A295F34@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = 2;
  BOOL v3 = result == 0;
  if (result == 2) {
    uint64_t v4 = 1;
  }
  else {
    uint64_t v4 = result;
  }
  if (result == 2) {
    BOOL v3 = 1;
  }
  if (result != 4) {
    uint64_t v2 = v4;
  }
  *(void *)a2 = v2;
  if (result == 4) {
    BOOL v3 = 1;
  }
  *(unsigned char *)(a2 + 8) = v3;
  *(unsigned char *)(a2 + 9) = 0;
  return result;
}

uint64_t sub_24A295F74()
{
  return *(void *)v0 << *(unsigned char *)(v0 + 8);
}

uint64_t sub_24A295F84@<X0>(void *a1@<X8>)
{
  return sub_24A217308(&qword_269778628, &qword_26977A918, a1);
}

uint64_t *sub_24A295FA8@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *result;
  BOOL v3 = *result == 0;
  if (*result == 2) {
    uint64_t v4 = 1;
  }
  else {
    uint64_t v4 = *result;
  }
  if (v2 == 2) {
    BOOL v3 = 1;
  }
  BOOL v5 = v2 == 4;
  if (v2 == 4) {
    uint64_t v6 = 2;
  }
  else {
    uint64_t v6 = v4;
  }
  *(void *)a2 = v6;
  char v7 = v5 || v3;
  *(unsigned char *)(a2 + 8) = v7;
  *(unsigned char *)(a2 + 9) = 0;
  return result;
}

void sub_24A295FEC(void *a1@<X8>)
{
  *a1 = *(void *)v1 << *(unsigned char *)(v1 + 8);
}

uint64_t sub_24A296000(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_24A2A3BC8();

  return MEMORY[0x270F44AF0](a1, a2, v4);
}

BOOL sub_24A29604C(uint64_t a1, uint64_t a2)
{
  return *(void *)a1 << *(unsigned char *)(a1 + 8) == *(void *)a2 << *(unsigned char *)(a2 + 8);
}

uint64_t sub_24A296070()
{
  uint64_t v0 = sub_24A2A7130();
  __swift_allocate_value_buffer(v0, qword_26977A920);
  __swift_project_value_buffer(v0, (uint64_t)qword_26977A920);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697787B0);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2697787B8) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_24A2A8A70;
  BOOL v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *BOOL v5 = 0;
  *(void *)unint64_t v6 = "HASH_ALG_UNKNOWN";
  *(void *)(v6 + 8) = 16;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = sub_24A2A7100();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 1;
  *(void *)uint64_t v10 = "HASH_ALG_SHA256";
  *((void *)v10 + 1) = 15;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 2;
  *(void *)uint64_t v11 = "HASH_ALG_SHA384";
  *(void *)(v11 + 8) = 15;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return sub_24A2A7110();
}

uint64_t sub_24A29626C@<X0>(uint64_t a1@<X8>)
{
  return sub_24A1ADE40(&qword_269778630, (uint64_t)qword_26977A920, a1);
}

uint64_t sub_24A296290()
{
  uint64_t v0 = sub_24A2A7130();
  __swift_allocate_value_buffer(v0, qword_26977A938);
  __swift_project_value_buffer(v0, (uint64_t)qword_26977A938);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697787B0);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2697787B8) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_24A2A8A30;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "sep_attestation";
  *(void *)(v6 + 8) = 15;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = sub_24A2A7100();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "ap_ticket";
  *(void *)(v10 + 8) = 9;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "sealed_hashes";
  *((void *)v12 + 1) = 13;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "provisioning_certificate_chain";
  *((void *)v14 + 1) = 30;
  v14[16] = 2;
  v9();
  uint64_t v15 = (void *)(v5 + 4 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *uint64_t v15 = 6;
  *(void *)uint64_t v16 = "key_expiration";
  *((void *)v16 + 1) = 14;
  v16[16] = 2;
  v9();
  uint64_t v17 = (void *)(v5 + 5 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 8;
  *(void *)uint64_t v18 = "transparency_proofs";
  *((void *)v18 + 1) = 19;
  v18[16] = 2;
  v9();
  return sub_24A2A7110();
}

uint64_t sub_24A29654C()
{
  uint64_t result = sub_24A2A6ED0();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
          sub_24A2A6F40();
          break;
        case 3:
          sub_24A29668C();
          break;
        case 4:
          sub_24A2A6F20();
          break;
        case 6:
          sub_24A29673C();
          break;
        case 8:
          sub_24A2967EC();
          break;
        default:
          break;
      }
      uint64_t result = sub_24A2A6ED0();
    }
  }
  return result;
}

uint64_t sub_24A29668C()
{
  return sub_24A2A6FA0();
}

uint64_t sub_24A29673C()
{
  return sub_24A2A6FA0();
}

uint64_t sub_24A2967EC()
{
  return sub_24A2A6FA0();
}

uint64_t sub_24A29689C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  unint64_t v8 = v3[1];
  switch(v8 >> 62)
  {
    case 1uLL:
      if ((int)v7 != v7 >> 32) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 2uLL:
      if (*(void *)(v7 + 16) != *(void *)(v7 + 24)) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 3uLL:
      goto LABEL_8;
    default:
      if ((v8 & 0xFF000000000000) == 0) {
        goto LABEL_8;
      }
LABEL_7:
      uint64_t result = sub_24A2A7090();
      if (!v4)
      {
LABEL_8:
        uint64_t v11 = v3[2];
        unint64_t v12 = v3[3];
        switch(v12 >> 62)
        {
          case 1uLL:
            if ((int)v11 != v11 >> 32) {
              goto LABEL_14;
            }
            goto LABEL_15;
          case 2uLL:
            if (*(void *)(v11 + 16) != *(void *)(v11 + 24)) {
              goto LABEL_14;
            }
            goto LABEL_15;
          case 3uLL:
            goto LABEL_15;
          default:
            if ((v12 & 0xFF000000000000) == 0) {
              goto LABEL_15;
            }
LABEL_14:
            uint64_t result = sub_24A2A7090();
            if (!v4)
            {
LABEL_15:
              uint64_t result = sub_24A296AA0((uint64_t)v3, a1, a2, a3);
              if (!v4)
              {
                if (*(void *)(v3[4] + 16)) {
                  sub_24A2A7080();
                }
                sub_24A296CA4((uint64_t)v3, a1, a2, a3);
                sub_24A296EA8((uint64_t)v3, a1, a2, a3);
                type metadata accessor for Proto_AttestationBundle(0);
                uint64_t result = sub_24A2A6DF0();
              }
            }
            break;
        }
      }
      return result;
  }
}

uint64_t sub_24A296AA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174800);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Proto_SealedHashLedger(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Proto_AttestationBundle(0);
  sub_24A1B2CAC(a1 + *(int *)(v12 + 32), (uint64_t)v7, &qword_26B174800);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_24A1B2D10((uint64_t)v7, &qword_26B174800);
  }
  sub_24A29BF7C((uint64_t)v7, (uint64_t)v11, type metadata accessor for Proto_SealedHashLedger);
  sub_24A29B624(&qword_26B1747E0, (void (*)(uint64_t))type metadata accessor for Proto_SealedHashLedger);
  sub_24A2A70F0();
  return sub_24A28EF84((uint64_t)v11, type metadata accessor for Proto_SealedHashLedger);
}

uint64_t sub_24A296CA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749E0);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_24A2A6DC0();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Proto_AttestationBundle(0);
  sub_24A1B2CAC(a1 + *(int *)(v12 + 36), (uint64_t)v7, &qword_26B1749E0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_24A1B2D10((uint64_t)v7, &qword_26B1749E0);
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v7, v8);
  sub_24A29B624(&qword_26B1749D8, MEMORY[0x263F502F0]);
  sub_24A2A70F0();
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_24A296EA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174880);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Proto_TransparencyProofs(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Proto_AttestationBundle(0);
  sub_24A1B2CAC(a1 + *(int *)(v12 + 40), (uint64_t)v7, &qword_26B174880);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_24A1B2D10((uint64_t)v7, &qword_26B174880);
  }
  sub_24A29BF7C((uint64_t)v7, (uint64_t)v11, type metadata accessor for Proto_TransparencyProofs);
  sub_24A29B624(&qword_26B174860, (void (*)(uint64_t))type metadata accessor for Proto_TransparencyProofs);
  sub_24A2A70F0();
  return sub_24A28EF84((uint64_t)v11, type metadata accessor for Proto_TransparencyProofs);
}

uint64_t sub_24A2970AC@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = xmmword_24A2A8A80;
  *(_OWORD *)(a2 + 16) = xmmword_24A2A8A80;
  *(void *)(a2 + 32) = MEMORY[0x263F8EE78];
  sub_24A2A6E00();
  uint64_t v4 = a2 + a1[8];
  uint64_t v5 = type metadata accessor for Proto_SealedHashLedger(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  uint64_t v6 = a2 + a1[9];
  uint64_t v7 = sub_24A2A6DC0();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  uint64_t v8 = a2 + a1[10];
  uint64_t v9 = type metadata accessor for Proto_TransparencyProofs(0);
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56);

  return v10(v8, 1, 1, v9);
}

unint64_t sub_24A2971E0()
{
  return 0xD000000000000017;
}

uint64_t sub_24A2971FC()
{
  return sub_24A29654C();
}

uint64_t sub_24A297214(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24A29689C(a1, a2, a3);
}

uint64_t sub_24A29722C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A29B624(&qword_26977A240, (void (*)(uint64_t))type metadata accessor for Proto_AttestationBundle);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t sub_24A2972A8@<X0>(uint64_t a1@<X8>)
{
  return sub_24A1ADE40(&qword_269778638, (uint64_t)qword_26977A938, a1);
}

uint64_t sub_24A2972CC(uint64_t a1)
{
  uint64_t v2 = sub_24A29B624(&qword_26B174268, (void (*)(uint64_t))type metadata accessor for Proto_AttestationBundle);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t sub_24A297338()
{
  sub_24A29B624(&qword_26B174268, (void (*)(uint64_t))type metadata accessor for Proto_AttestationBundle);

  return sub_24A2A7010();
}

uint64_t sub_24A2973B4(uint64_t a1)
{
  return sub_24A29AE3C(a1, qword_26977A950, (uint64_t)"slots", 5, MEMORY[0x263F50718]);
}

uint64_t sub_24A2973D4()
{
  return sub_24A2A6EB0();
}

uint64_t sub_24A2974CC()
{
  if (!*(void *)(*(void *)v0 + 16)
    || (sub_24A2A6DE0(),
        type metadata accessor for Proto_SealedHash(0),
        sub_24A29B624(&qword_26B1746B0, (void (*)(uint64_t))type metadata accessor for Proto_SealedHash),
        sub_24A29B624(&qword_26B1746B8, (void (*)(uint64_t))type metadata accessor for Proto_SealedHash),
        uint64_t result = sub_24A2A7030(),
        !v1))
  {
    type metadata accessor for Proto_SealedHashLedger(0);
    return sub_24A2A6DF0();
  }
  return result;
}

uint64_t sub_24A297618@<X0>(unint64_t *a1@<X8>)
{
  *a1 = sub_24A1BBEA8(MEMORY[0x263F8EE78]);
  return sub_24A2A6E00();
}

unint64_t sub_24A297658()
{
  return 0xD000000000000016;
}

uint64_t sub_24A297674(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24A29AF9C(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24A2973D4);
}

uint64_t sub_24A2976A0()
{
  return sub_24A2974CC();
}

uint64_t sub_24A2976B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A29B624(&qword_26977A250, (void (*)(uint64_t))type metadata accessor for Proto_SealedHashLedger);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t sub_24A297734@<X0>(uint64_t a1@<X8>)
{
  return sub_24A1ADE40(&qword_269778640, (uint64_t)qword_26977A950, a1);
}

uint64_t sub_24A297758(uint64_t a1)
{
  uint64_t v2 = sub_24A29B624(&qword_26B1747E0, (void (*)(uint64_t))type metadata accessor for Proto_SealedHashLedger);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t sub_24A2977C4()
{
  sub_24A29B624(&qword_26B1747E0, (void (*)(uint64_t))type metadata accessor for Proto_SealedHashLedger);

  return sub_24A2A7010();
}

uint64_t sub_24A297844()
{
  uint64_t v0 = sub_24A2A7130();
  __swift_allocate_value_buffer(v0, qword_26977A968);
  __swift_project_value_buffer(v0, (uint64_t)qword_26977A968);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697787B0);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2697787B8) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_24A2A8AA0;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *uint64_t v5 = 1;
  *(void *)unint64_t v6 = "hash_alg";
  *(void *)(v6 + 8) = 8;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50728];
  uint64_t v8 = sub_24A2A7100();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "entries";
  *((void *)v10 + 1) = 7;
  v10[16] = 2;
  v9();
  return sub_24A2A7110();
}

uint64_t sub_24A297A04()
{
  uint64_t result = sub_24A2A6ED0();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        type metadata accessor for Proto_SealedHash.Entry(0);
        sub_24A29B624(&qword_26B174688, (void (*)(uint64_t))type metadata accessor for Proto_SealedHash.Entry);
        sub_24A2A6F90();
      }
      else if (result == 1)
      {
        sub_24A2A0980();
        sub_24A2A6F10();
      }
      uint64_t result = sub_24A2A6ED0();
    }
  }
  return result;
}

uint64_t sub_24A297B3C()
{
  if (!*v0 || (sub_24A2A0980(), uint64_t result = sub_24A2A7070(), !v1))
  {
    if (!*(void *)(v0[2] + 16)
      || (type metadata accessor for Proto_SealedHash.Entry(0),
          sub_24A29B624(&qword_26B174688, (void (*)(uint64_t))type metadata accessor for Proto_SealedHash.Entry), uint64_t result = sub_24A2A70E0(), !v1))
    {
      type metadata accessor for Proto_SealedHash(0);
      return sub_24A2A6DF0();
    }
  }
  return result;
}

uint64_t sub_24A297C78@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = MEMORY[0x263F8EE78];
  return sub_24A2A6E00();
}

unint64_t sub_24A297CB0()
{
  return 0xD000000000000010;
}

uint64_t sub_24A297CCC()
{
  return sub_24A297A04();
}

uint64_t sub_24A297CE4()
{
  return sub_24A297B3C();
}

uint64_t sub_24A297CFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A29B624(&qword_26977A270, (void (*)(uint64_t))type metadata accessor for Proto_SealedHash);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t sub_24A297D78@<X0>(uint64_t a1@<X8>)
{
  return sub_24A1ADE40(&qword_269778648, (uint64_t)qword_26977A968, a1);
}

uint64_t sub_24A297D9C(uint64_t a1)
{
  uint64_t v2 = sub_24A29B624(&qword_26B1746B0, (void (*)(uint64_t))type metadata accessor for Proto_SealedHash);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t sub_24A297E08()
{
  sub_24A29B624(&qword_26B1746B0, (void (*)(uint64_t))type metadata accessor for Proto_SealedHash);

  return sub_24A2A7010();
}

uint64_t sub_24A297E88()
{
  uint64_t result = sub_24A2A78C0();
  qword_26977A980 = 0xD000000000000010;
  *(void *)algn_26977A988 = 0x800000024A2B4500;
  return result;
}

uint64_t sub_24A297EF0()
{
  uint64_t v0 = sub_24A2A7130();
  __swift_allocate_value_buffer(v0, qword_26977A990);
  __swift_project_value_buffer(v0, (uint64_t)qword_26977A990);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697787B0);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2697787B8) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_24A2A8AB0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "flags";
  *(void *)(v6 + 8) = 5;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = sub_24A2A7100();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "digest";
  *(void *)(v10 + 8) = 6;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "cryptex";
  *((void *)v12 + 1) = 7;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "cryptex_salt";
  *((void *)v14 + 1) = 12;
  v14[16] = 2;
  v9();
  uint64_t v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 5;
  *(void *)uint64_t v15 = "secure_config";
  *(void *)(v15 + 8) = 13;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return sub_24A2A7110();
}

uint64_t sub_24A298180(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t result = sub_24A2A6ED0();
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          sub_24A2A6F50();
          break;
        case 2:
          sub_24A2A6F40();
          break;
        case 3:
          sub_24A2982A8(v5, a1, a2, a3);
          break;
        case 4:
          sub_24A298820(v5, a1, a2, a3);
          break;
        case 5:
          sub_24A298D9C(v5, a1, a2, a3);
          break;
        default:
          break;
      }
      uint64_t result = sub_24A2A6ED0();
    }
  }
  return result;
}

uint64_t sub_24A2982A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t v4 = type metadata accessor for Proto_Cryptex(0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  int v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174678);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Proto_SealedHash.Entry.OneOf_Info(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174500);
  uint64_t v20 = MEMORY[0x270FA5388](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = v4;
  v24((char *)&v34 - v22, 1, 1, v4);
  uint64_t v35 = v46 + *(int *)(type metadata accessor for Proto_SealedHash.Entry(0) + 24);
  sub_24A1B2CAC(v35, (uint64_t)v11, &qword_26B174678);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    sub_24A1B2D10((uint64_t)v11, &qword_26B174678);
    uint64_t v25 = v12;
LABEL_5:
    uint64_t v28 = v41;
    uint64_t v27 = v42;
    goto LABEL_6;
  }
  uint64_t v26 = (uint64_t)v40;
  sub_24A29BF7C((uint64_t)v11, (uint64_t)v18, type metadata accessor for Proto_SealedHash.Entry.OneOf_Info);
  sub_24A29BF7C((uint64_t)v18, (uint64_t)v16, type metadata accessor for Proto_SealedHash.Entry.OneOf_Info);
  uint64_t v25 = v12;
  if (swift_getEnumCaseMultiPayload())
  {
    sub_24A28EF84((uint64_t)v16, type metadata accessor for Proto_SealedHash.Entry.OneOf_Info);
    goto LABEL_5;
  }
  sub_24A1B2D10((uint64_t)v23, &qword_26B174500);
  sub_24A29BF7C((uint64_t)v16, v26, type metadata accessor for Proto_Cryptex);
  sub_24A29BF7C(v26, (uint64_t)v23, type metadata accessor for Proto_Cryptex);
  uint64_t v28 = v41;
  v24(v23, 0, 1, v41);
  uint64_t v27 = v42;
LABEL_6:
  sub_24A29B624(&qword_26B1744E0, (void (*)(uint64_t))type metadata accessor for Proto_Cryptex);
  sub_24A2A6FA0();
  if (v27) {
    return sub_24A1B2D10((uint64_t)v23, &qword_26B174500);
  }
  uint64_t v30 = v38;
  sub_24A1B2CAC((uint64_t)v23, v38, &qword_26B174500);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v28) == 1)
  {
    sub_24A1B2D10((uint64_t)v23, &qword_26B174500);
    return sub_24A1B2D10(v30, &qword_26B174500);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    sub_24A29BF7C(v31, v37, type metadata accessor for Proto_Cryptex);
    if (v46 != 1) {
      sub_24A2A6EE0();
    }
    sub_24A1B2D10((uint64_t)v23, &qword_26B174500);
    uint64_t v33 = v35;
    sub_24A1B2D10(v35, &qword_26B174678);
    sub_24A29BF7C(v32, v33, type metadata accessor for Proto_Cryptex);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t sub_24A298820(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t v4 = type metadata accessor for Proto_Cryptex.Salt(0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  int v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174678);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Proto_SealedHash.Entry.OneOf_Info(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_26977A280);
  uint64_t v20 = MEMORY[0x270FA5388](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = v4;
  v24((char *)&v34 - v22, 1, 1, v4);
  uint64_t v35 = v46 + *(int *)(type metadata accessor for Proto_SealedHash.Entry(0) + 24);
  sub_24A1B2CAC(v35, (uint64_t)v11, &qword_26B174678);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    sub_24A1B2D10((uint64_t)v11, &qword_26B174678);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    sub_24A29BF7C((uint64_t)v11, (uint64_t)v18, type metadata accessor for Proto_SealedHash.Entry.OneOf_Info);
    sub_24A29BF7C((uint64_t)v18, (uint64_t)v16, type metadata accessor for Proto_SealedHash.Entry.OneOf_Info);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      sub_24A1B2D10((uint64_t)v23, &qword_26977A280);
      sub_24A29BF7C((uint64_t)v16, v26, type metadata accessor for Proto_Cryptex.Salt);
      sub_24A29BF7C(v26, (uint64_t)v23, type metadata accessor for Proto_Cryptex.Salt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    sub_24A28EF84((uint64_t)v16, type metadata accessor for Proto_SealedHash.Entry.OneOf_Info);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  sub_24A29B624(&qword_26977A1E8, (void (*)(uint64_t))type metadata accessor for Proto_Cryptex.Salt);
  sub_24A2A6FA0();
  if (v28) {
    return sub_24A1B2D10((uint64_t)v23, &qword_26977A280);
  }
  uint64_t v30 = v38;
  sub_24A1B2CAC((uint64_t)v23, v38, &qword_26977A280);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    sub_24A1B2D10((uint64_t)v23, &qword_26977A280);
    return sub_24A1B2D10(v30, &qword_26977A280);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    sub_24A29BF7C(v31, v37, type metadata accessor for Proto_Cryptex.Salt);
    if (v46 != 1) {
      sub_24A2A6EE0();
    }
    sub_24A1B2D10((uint64_t)v23, &qword_26977A280);
    uint64_t v33 = v35;
    sub_24A1B2D10(v35, &qword_26B174678);
    sub_24A29BF7C(v32, v33, type metadata accessor for Proto_Cryptex.Salt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t sub_24A298D9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t v4 = type metadata accessor for Proto_SecureConfig(0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  int v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174678);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Proto_SealedHash.Entry.OneOf_Info(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174730);
  uint64_t v20 = MEMORY[0x270FA5388](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = v4;
  v24((char *)&v34 - v22, 1, 1, v4);
  uint64_t v35 = v46 + *(int *)(type metadata accessor for Proto_SealedHash.Entry(0) + 24);
  sub_24A1B2CAC(v35, (uint64_t)v11, &qword_26B174678);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    sub_24A1B2D10((uint64_t)v11, &qword_26B174678);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    sub_24A29BF7C((uint64_t)v11, (uint64_t)v18, type metadata accessor for Proto_SealedHash.Entry.OneOf_Info);
    sub_24A29BF7C((uint64_t)v18, (uint64_t)v16, type metadata accessor for Proto_SealedHash.Entry.OneOf_Info);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      sub_24A1B2D10((uint64_t)v23, &qword_26B174730);
      sub_24A29BF7C((uint64_t)v16, v26, type metadata accessor for Proto_SecureConfig);
      sub_24A29BF7C(v26, (uint64_t)v23, type metadata accessor for Proto_SecureConfig);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    sub_24A28EF84((uint64_t)v16, type metadata accessor for Proto_SealedHash.Entry.OneOf_Info);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  sub_24A29B624(&qword_26B174710, (void (*)(uint64_t))type metadata accessor for Proto_SecureConfig);
  sub_24A2A6FA0();
  if (v28) {
    return sub_24A1B2D10((uint64_t)v23, &qword_26B174730);
  }
  uint64_t v30 = v38;
  sub_24A1B2CAC((uint64_t)v23, v38, &qword_26B174730);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    sub_24A1B2D10((uint64_t)v23, &qword_26B174730);
    return sub_24A1B2D10(v30, &qword_26B174730);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    sub_24A29BF7C(v31, v37, type metadata accessor for Proto_SecureConfig);
    if (v46 != 1) {
      sub_24A2A6EE0();
    }
    sub_24A1B2D10((uint64_t)v23, &qword_26B174730);
    uint64_t v33 = v35;
    sub_24A1B2D10(v35, &qword_26B174678);
    sub_24A29BF7C(v32, v33, type metadata accessor for Proto_SecureConfig);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t sub_24A299318()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174678);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_DWORD *)v0 || (uint64_t result = sub_24A2A70A0(), !v1))
  {
    uint64_t v6 = *(void *)(v0 + 8);
    unint64_t v7 = *(void *)(v0 + 16);
    switch(v7 >> 62)
    {
      case 1uLL:
        if ((int)v6 != v6 >> 32) {
          goto LABEL_9;
        }
        goto LABEL_10;
      case 2uLL:
        if (*(void *)(v6 + 16) != *(void *)(v6 + 24)) {
          goto LABEL_9;
        }
        goto LABEL_10;
      case 3uLL:
        goto LABEL_10;
      default:
        if ((v7 & 0xFF000000000000) == 0) {
          goto LABEL_10;
        }
LABEL_9:
        uint64_t result = sub_24A2A7090();
        if (!v1)
        {
LABEL_10:
          uint64_t v8 = type metadata accessor for Proto_SealedHash.Entry(0);
          sub_24A1B2CAC(v0 + *(int *)(v8 + 24), (uint64_t)v4, &qword_26B174678);
          uint64_t v9 = type metadata accessor for Proto_SealedHash.Entry.OneOf_Info(0);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v4, 1, v9) == 1) {
            goto LABEL_17;
          }
          int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
          if (EnumCaseMultiPayload)
          {
            if (EnumCaseMultiPayload == 1) {
              sub_24A2997A8(v0);
            }
            else {
              sub_24A2999D8(v0);
            }
          }
          else
          {
            sub_24A29957C(v0);
          }
          uint64_t result = sub_24A28EF84((uint64_t)v4, type metadata accessor for Proto_SealedHash.Entry.OneOf_Info);
          if (!v1) {
LABEL_17:
          }
            uint64_t result = sub_24A2A6DF0();
        }
        break;
    }
  }
  return result;
}

uint64_t sub_24A29957C(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174678);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Proto_Cryptex(0);
  MEMORY[0x270FA5388](v5);
  unint64_t v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Proto_SealedHash.Entry(0);
  sub_24A1B2CAC(a1 + *(int *)(v8 + 24), (uint64_t)v4, &qword_26B174678);
  uint64_t v9 = type metadata accessor for Proto_SealedHash.Entry.OneOf_Info(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v4, 1, v9) == 1)
  {
    sub_24A1B2D10((uint64_t)v4, &qword_26B174678);
    __break(1u);
  }
  else if (!swift_getEnumCaseMultiPayload())
  {
    sub_24A29BF7C((uint64_t)v4, (uint64_t)v7, type metadata accessor for Proto_Cryptex);
    sub_24A29B624(&qword_26B1744E0, (void (*)(uint64_t))type metadata accessor for Proto_Cryptex);
    sub_24A2A70F0();
    return sub_24A28EF84((uint64_t)v7, type metadata accessor for Proto_Cryptex);
  }
  uint64_t result = sub_24A28EF84((uint64_t)v4, type metadata accessor for Proto_SealedHash.Entry.OneOf_Info);
  __break(1u);
  return result;
}

uint64_t sub_24A2997A8(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174678);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Proto_Cryptex.Salt(0);
  MEMORY[0x270FA5388](v5);
  unint64_t v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Proto_SealedHash.Entry(0);
  sub_24A1B2CAC(a1 + *(int *)(v8 + 24), (uint64_t)v4, &qword_26B174678);
  uint64_t v9 = type metadata accessor for Proto_SealedHash.Entry.OneOf_Info(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v4, 1, v9) == 1)
  {
    sub_24A1B2D10((uint64_t)v4, &qword_26B174678);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_24A29BF7C((uint64_t)v4, (uint64_t)v7, type metadata accessor for Proto_Cryptex.Salt);
    sub_24A29B624(&qword_26977A1E8, (void (*)(uint64_t))type metadata accessor for Proto_Cryptex.Salt);
    sub_24A2A70F0();
    return sub_24A28EF84((uint64_t)v7, type metadata accessor for Proto_Cryptex.Salt);
  }
  uint64_t result = sub_24A28EF84((uint64_t)v4, type metadata accessor for Proto_SealedHash.Entry.OneOf_Info);
  __break(1u);
  return result;
}

uint64_t sub_24A2999D8(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174678);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Proto_SecureConfig(0);
  MEMORY[0x270FA5388](v5);
  unint64_t v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Proto_SealedHash.Entry(0);
  sub_24A1B2CAC(a1 + *(int *)(v8 + 24), (uint64_t)v4, &qword_26B174678);
  uint64_t v9 = type metadata accessor for Proto_SealedHash.Entry.OneOf_Info(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v4, 1, v9) == 1)
  {
    sub_24A1B2D10((uint64_t)v4, &qword_26B174678);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 2)
  {
    sub_24A29BF7C((uint64_t)v4, (uint64_t)v7, type metadata accessor for Proto_SecureConfig);
    sub_24A29B624(&qword_26B174710, (void (*)(uint64_t))type metadata accessor for Proto_SecureConfig);
    sub_24A2A70F0();
    return sub_24A28EF84((uint64_t)v7, type metadata accessor for Proto_SecureConfig);
  }
  uint64_t result = sub_24A28EF84((uint64_t)v4, type metadata accessor for Proto_SealedHash.Entry.OneOf_Info);
  __break(1u);
  return result;
}

uint64_t sub_24A299C08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = 0;
  *(_OWORD *)(a2 + 8) = xmmword_24A2A8A80;
  uint64_t v2 = a2 + *(int *)(a1 + 24);
  uint64_t v3 = type metadata accessor for Proto_SealedHash.Entry.OneOf_Info(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v2, 1, 1, v3);
  return sub_24A2A6E00();
}

uint64_t sub_24A299C98(uint64_t a1, uint64_t a2)
{
  return sub_24A27A0A4(a1, a2, &qword_269778650, &qword_26977A980);
}

uint64_t sub_24A299CC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24A298180(a1, a2, a3);
}

uint64_t sub_24A299CD8()
{
  return sub_24A299318();
}

uint64_t sub_24A299CF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A29B624(&qword_26977A278, (void (*)(uint64_t))type metadata accessor for Proto_SealedHash.Entry);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t sub_24A299D6C@<X0>(uint64_t a1@<X8>)
{
  return sub_24A1ADE40(&qword_269778658, (uint64_t)qword_26977A990, a1);
}

uint64_t sub_24A299D90(uint64_t a1)
{
  uint64_t v2 = sub_24A29B624(&qword_26B174688, (void (*)(uint64_t))type metadata accessor for Proto_SealedHash.Entry);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t sub_24A299DFC()
{
  sub_24A29B624(&qword_26B174688, (void (*)(uint64_t))type metadata accessor for Proto_SealedHash.Entry);

  return sub_24A2A7010();
}

uint64_t sub_24A299E7C()
{
  uint64_t v0 = sub_24A2A7130();
  __swift_allocate_value_buffer(v0, qword_26977A9A8);
  __swift_project_value_buffer(v0, (uint64_t)qword_26977A9A8);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697787B0);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2697787B8) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_24A2A8A70;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *uint64_t v5 = 0;
  *(void *)unint64_t v6 = "FLAG_NONE";
  *(void *)(v6 + 8) = 9;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = sub_24A2A7100();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "FLAG_RATCHET";
  *((void *)v10 + 1) = 12;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 4;
  *(void *)uint64_t v11 = "FLAG_RATCHET_LOCK";
  *(void *)(v11 + 8) = 17;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return sub_24A2A7110();
}

uint64_t sub_24A29A07C@<X0>(uint64_t a1@<X8>)
{
  return sub_24A1ADE40(&qword_269778660, (uint64_t)qword_26977A9A8, a1);
}

uint64_t sub_24A29A0A0(uint64_t a1)
{
  return sub_24A29AE3C(a1, qword_26977A9C0, (uint64_t)"image4_manifest", 15, MEMORY[0x263F50728]);
}

uint64_t sub_24A29A0C0()
{
  uint64_t v2 = *v0;
  unint64_t v3 = v0[1];
  switch(v3 >> 62)
  {
    case 1uLL:
      if ((int)v2 != v2 >> 32) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 2uLL:
      if (*(void *)(v2 + 16) != *(void *)(v2 + 24)) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 3uLL:
      goto LABEL_8;
    default:
      if ((v3 & 0xFF000000000000) == 0) {
        goto LABEL_8;
      }
LABEL_7:
      uint64_t result = sub_24A2A7090();
      if (!v1)
      {
LABEL_8:
        type metadata accessor for Proto_Cryptex(0);
        return sub_24A2A6DF0();
      }
      return result;
  }
}

uint64_t sub_24A29A1B0()
{
  return 0x72432E6F746F7270;
}

uint64_t sub_24A29A1D4()
{
  return sub_24A29A0C0();
}

uint64_t sub_24A29A1EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A29B624(&qword_26977A288, (void (*)(uint64_t))type metadata accessor for Proto_Cryptex);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t sub_24A29A268@<X0>(uint64_t a1@<X8>)
{
  return sub_24A1ADE40(&qword_269778668, (uint64_t)qword_26977A9C0, a1);
}

uint64_t sub_24A29A28C(uint64_t a1)
{
  uint64_t v2 = sub_24A29B624(&qword_26B1744E0, (void (*)(uint64_t))type metadata accessor for Proto_Cryptex);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t sub_24A29A2F8()
{
  sub_24A29B624(&qword_26B1744E0, (void (*)(uint64_t))type metadata accessor for Proto_Cryptex);

  return sub_24A2A7010();
}

uint64_t sub_24A29A378()
{
  strcpy((char *)v1, "proto.Cryptex");
  HIWORD(v1[1]) = -4864;
  uint64_t result = sub_24A2A78C0();
  qword_26977A9D8 = v1[0];
  unk_26977A9E0 = v1[1];
  return result;
}

uint64_t sub_24A29A3E8()
{
  uint64_t v0 = sub_24A2A7130();
  __swift_allocate_value_buffer(v0, qword_26977A9E8);
  __swift_project_value_buffer(v0, (uint64_t)qword_26977A9E8);
  return sub_24A2A7120();
}

uint64_t sub_24A29A434()
{
  do
    uint64_t result = sub_24A2A6ED0();
  while (!v0 && (v2 & 1) == 0);
  return result;
}

uint64_t sub_24A29A478()
{
  return sub_24A2A6DF0();
}

uint64_t sub_24A29A494(uint64_t a1, uint64_t a2)
{
  return sub_24A27A0A4(a1, a2, &qword_269778670, &qword_26977A9D8);
}

uint64_t sub_24A29A4BC()
{
  return sub_24A29A434();
}

uint64_t sub_24A29A4D4()
{
  return sub_24A29A478();
}

uint64_t sub_24A29A4EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A29B624(&qword_26977A290, (void (*)(uint64_t))type metadata accessor for Proto_Cryptex.Salt);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t sub_24A29A568@<X0>(uint64_t a1@<X8>)
{
  return sub_24A1ADE40(&qword_269778678, (uint64_t)qword_26977A9E8, a1);
}

uint64_t sub_24A29A58C(uint64_t a1)
{
  uint64_t v2 = sub_24A29B624(&qword_26977A1E8, (void (*)(uint64_t))type metadata accessor for Proto_Cryptex.Salt);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t sub_24A29A5F8()
{
  sub_24A29B624(&qword_26977A1E8, (void (*)(uint64_t))type metadata accessor for Proto_Cryptex.Salt);

  return sub_24A2A7010();
}

uint64_t sub_24A29A674(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A2A6E10();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v14 - v9;
  uint64_t v11 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v11((char *)&v14 - v9, a1, v4);
  v11(v8, a2, v4);
  sub_24A29B624(&qword_2697787D0, MEMORY[0x263F50560]);
  LOBYTE(a2) = sub_24A2A77E0();
  uint64_t v12 = *(void (**)(char *, uint64_t))(v5 + 8);
  v12(v8, v4);
  v12(v10, v4);
  return a2 & 1;
}

uint64_t sub_24A29A800()
{
  uint64_t v0 = sub_24A2A7130();
  __swift_allocate_value_buffer(v0, qword_26977AA00);
  __swift_project_value_buffer(v0, (uint64_t)qword_26977AA00);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697787B0);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2697787B8) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_24A2A8AA0;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *uint64_t v5 = 1;
  *(void *)unint64_t v6 = "entry";
  *(void *)(v6 + 8) = 5;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = sub_24A2A7100();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "metadata";
  *((void *)v10 + 1) = 8;
  v10[16] = 2;
  v9();
  return sub_24A2A7110();
}

uint64_t sub_24A29A9B8()
{
  uint64_t result = sub_24A2A6ED0();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        sub_24A2A6DE0();
        sub_24A2A6EC0();
      }
      else if (result == 1)
      {
        sub_24A2A6F40();
      }
      uint64_t result = sub_24A2A6ED0();
    }
  }
  return result;
}

uint64_t sub_24A29AAB0()
{
  uint64_t v2 = *v0;
  unint64_t v3 = v0[1];
  switch(v3 >> 62)
  {
    case 1uLL:
      if ((int)v2 != v2 >> 32) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 2uLL:
      if (*(void *)(v2 + 16) != *(void *)(v2 + 24)) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 3uLL:
      goto LABEL_8;
    default:
      if ((v3 & 0xFF000000000000) == 0) {
        goto LABEL_8;
      }
LABEL_7:
      uint64_t result = sub_24A2A7090();
      if (!v1)
      {
LABEL_8:
        if (!*(void *)(v0[2] + 16) || (sub_24A2A6DE0(), uint64_t result = sub_24A2A7040(), !v1))
        {
          type metadata accessor for Proto_SecureConfig(0);
          return sub_24A2A6DF0();
        }
      }
      return result;
  }
}

uint64_t sub_24A29ABF8@<X0>(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_24A2A8A80;
  *(void *)(a1 + 16) = sub_24A1BC558(MEMORY[0x263F8EE78]);
  return sub_24A2A6E00();
}

unint64_t sub_24A29AC44()
{
  return 0xD000000000000012;
}

uint64_t sub_24A29AC60()
{
  return sub_24A29A9B8();
}

uint64_t sub_24A29AC78()
{
  return sub_24A29AAB0();
}

uint64_t sub_24A29AC90(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A29B624(&qword_26977A298, (void (*)(uint64_t))type metadata accessor for Proto_SecureConfig);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t sub_24A29AD0C@<X0>(uint64_t a1@<X8>)
{
  return sub_24A1ADE40(&qword_269778680, (uint64_t)qword_26977AA00, a1);
}

uint64_t sub_24A29AD30(uint64_t a1)
{
  uint64_t v2 = sub_24A29B624(&qword_26B174710, (void (*)(uint64_t))type metadata accessor for Proto_SecureConfig);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t sub_24A29AD9C()
{
  sub_24A29B624(&qword_26B174710, (void (*)(uint64_t))type metadata accessor for Proto_SecureConfig);

  return sub_24A2A7010();
}

uint64_t sub_24A29AE1C(uint64_t a1)
{
  return sub_24A29AE3C(a1, qword_26977AA18, (uint64_t)"proofs", 6, MEMORY[0x263F50718]);
}

uint64_t sub_24A29AE3C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  uint64_t v9 = sub_24A2A7130();
  __swift_allocate_value_buffer(v9, a2);
  __swift_project_value_buffer(v9, (uint64_t)a2);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697787B0);
  uint64_t v10 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_2697787B8) - 8);
  unint64_t v11 = (*(unsigned __int8 *)(*(void *)v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v10 + 80);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_24A2A8A60;
  unint64_t v13 = v12 + v11 + v10[14];
  *(void *)(v12 + v11) = 1;
  *(void *)unint64_t v13 = a3;
  *(void *)(v13 + 8) = a4;
  *(unsigned char *)(v13 + 16) = 2;
  uint64_t v14 = *a5;
  uint64_t v15 = sub_24A2A7100();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 104))(v13, v14, v15);
  return sub_24A2A7110();
}

uint64_t sub_24A29AF9C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v7 = v4;
  while (1)
  {
    uint64_t result = sub_24A2A6ED0();
    if (v5 || (v12 & 1) != 0) {
      break;
    }
    if (result == 1) {
      a4(a1, v7, a2, a3);
    }
  }
  return result;
}

uint64_t sub_24A29B020()
{
  return sub_24A2A6FA0();
}

uint64_t sub_24A29B0D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_24A29B128(v3, a1, a2, a3);
  if (!v4) {
    return sub_24A2A6DF0();
  }
  return result;
}

uint64_t sub_24A29B128(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1742D8);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for ATLogProofs(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  unint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Proto_TransparencyProofs(0);
  sub_24A1B2CAC(a1 + *(int *)(v12 + 20), (uint64_t)v7, &qword_26B1742D8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_24A1B2D10((uint64_t)v7, &qword_26B1742D8);
  }
  sub_24A29BF7C((uint64_t)v7, (uint64_t)v11, type metadata accessor for ATLogProofs);
  sub_24A29B624((unint64_t *)&qword_26B1742B8, (void (*)(uint64_t))type metadata accessor for ATLogProofs);
  sub_24A2A70F0();
  return sub_24A28EF84((uint64_t)v11, type metadata accessor for ATLogProofs);
}

uint64_t sub_24A29B32C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_24A2A6E00();
  uint64_t v4 = a2 + *(int *)(a1 + 20);
  uint64_t v5 = type metadata accessor for ATLogProofs(0);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);

  return v6(v4, 1, 1, v5);
}

unint64_t sub_24A29B3A8()
{
  return 0xD000000000000018;
}

uint64_t sub_24A29B3C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24A29AF9C(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_24A29B020);
}

uint64_t sub_24A29B3F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_24A29B0D0(a1, a2, a3);
}

uint64_t sub_24A29B408(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A29B624(&qword_26977A248, (void (*)(uint64_t))type metadata accessor for Proto_TransparencyProofs);

  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t sub_24A29B484@<X0>(uint64_t a1@<X8>)
{
  return sub_24A1ADE40(&qword_269778688, (uint64_t)qword_26977AA18, a1);
}

uint64_t sub_24A29B4A8(uint64_t a1)
{
  uint64_t v2 = sub_24A29B624(&qword_26B174860, (void (*)(uint64_t))type metadata accessor for Proto_TransparencyProofs);

  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t sub_24A29B514()
{
  sub_24A29B624(&qword_26B174860, (void (*)(uint64_t))type metadata accessor for Proto_TransparencyProofs);

  return sub_24A2A7010();
}

uint64_t sub_24A29B594()
{
  return sub_24A29B624(&qword_26977A1C0, (void (*)(uint64_t))type metadata accessor for Proto_TransparencyProofs);
}

uint64_t sub_24A29B5DC()
{
  return sub_24A29B624(&qword_26B174860, (void (*)(uint64_t))type metadata accessor for Proto_TransparencyProofs);
}

uint64_t sub_24A29B624(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_24A29B66C()
{
  return sub_24A29B624(&qword_26977A1C8, (void (*)(uint64_t))type metadata accessor for Proto_TransparencyProofs);
}

uint64_t sub_24A29B6B4()
{
  return sub_24A29B624(&qword_26977A1D0, (void (*)(uint64_t))type metadata accessor for Proto_SecureConfig);
}

uint64_t type metadata accessor for Proto_SecureConfig(uint64_t a1)
{
  return sub_24A1AE704(a1, (uint64_t *)&unk_26B174720);
}

uint64_t sub_24A29B71C()
{
  return sub_24A29B624(&qword_26B174710, (void (*)(uint64_t))type metadata accessor for Proto_SecureConfig);
}

uint64_t sub_24A29B764()
{
  return sub_24A29B624(&qword_26977A1D8, (void (*)(uint64_t))type metadata accessor for Proto_SecureConfig);
}

uint64_t sub_24A29B7AC()
{
  return sub_24A29B624(&qword_26B174718, (void (*)(uint64_t))type metadata accessor for Proto_SecureConfig);
}

uint64_t sub_24A29B7F4()
{
  return sub_24A29B624(&qword_26977A1E0, (void (*)(uint64_t))type metadata accessor for Proto_Cryptex.Salt);
}

uint64_t type metadata accessor for Proto_Cryptex.Salt(uint64_t a1)
{
  return sub_24A1AE704(a1, (uint64_t *)&unk_26977A2B0);
}

uint64_t sub_24A29B85C()
{
  return sub_24A29B624(&qword_26977A1E8, (void (*)(uint64_t))type metadata accessor for Proto_Cryptex.Salt);
}

uint64_t sub_24A29B8A4()
{
  return sub_24A29B624(&qword_26977A1F0, (void (*)(uint64_t))type metadata accessor for Proto_Cryptex.Salt);
}

uint64_t sub_24A29B8EC()
{
  return sub_24A29B624(&qword_26977A1F8, (void (*)(uint64_t))type metadata accessor for Proto_Cryptex.Salt);
}

uint64_t sub_24A29B934()
{
  return sub_24A29B624(&qword_26977A200, (void (*)(uint64_t))type metadata accessor for Proto_Cryptex);
}

uint64_t type metadata accessor for Proto_Cryptex(uint64_t a1)
{
  return sub_24A1AE704(a1, (uint64_t *)&unk_26B1744F0);
}

uint64_t sub_24A29B99C()
{
  return sub_24A29B624(&qword_26B1744E0, (void (*)(uint64_t))type metadata accessor for Proto_Cryptex);
}

uint64_t sub_24A29B9E4()
{
  return sub_24A29B624(&qword_26977A208, (void (*)(uint64_t))type metadata accessor for Proto_Cryptex);
}

uint64_t sub_24A29BA2C()
{
  return sub_24A29B624(&qword_26B1744E8, (void (*)(uint64_t))type metadata accessor for Proto_Cryptex);
}

uint64_t sub_24A29BA74()
{
  return sub_24A29B624(&qword_26977A210, (void (*)(uint64_t))type metadata accessor for Proto_SealedHash.Entry);
}

uint64_t type metadata accessor for Proto_SealedHash.Entry(uint64_t a1)
{
  return sub_24A1AE704(a1, (uint64_t *)&unk_26B174698);
}

uint64_t sub_24A29BADC()
{
  return sub_24A29B624(&qword_26B174688, (void (*)(uint64_t))type metadata accessor for Proto_SealedHash.Entry);
}

uint64_t sub_24A29BB24()
{
  return sub_24A29B624(&qword_26977A218, (void (*)(uint64_t))type metadata accessor for Proto_SealedHash.Entry);
}

uint64_t sub_24A29BB6C()
{
  return sub_24A29B624(&qword_26B174690, (void (*)(uint64_t))type metadata accessor for Proto_SealedHash.Entry);
}

uint64_t sub_24A29BBB4()
{
  return sub_24A29B624(&qword_26B1746C0, (void (*)(uint64_t))type metadata accessor for Proto_SealedHash);
}

uint64_t type metadata accessor for Proto_SealedHash(uint64_t a1)
{
  return sub_24A1AE704(a1, (uint64_t *)&unk_26B1746D0);
}

uint64_t sub_24A29BC1C()
{
  return sub_24A29B624(&qword_26B1746B0, (void (*)(uint64_t))type metadata accessor for Proto_SealedHash);
}

uint64_t sub_24A29BC64()
{
  return sub_24A29B624(&qword_26B1746B8, (void (*)(uint64_t))type metadata accessor for Proto_SealedHash);
}

uint64_t sub_24A29BCAC()
{
  return sub_24A29B624(&qword_26B1746C8, (void (*)(uint64_t))type metadata accessor for Proto_SealedHash);
}

uint64_t sub_24A29BCF4()
{
  return sub_24A29B624(&qword_26977A220, (void (*)(uint64_t))type metadata accessor for Proto_SealedHashLedger);
}

uint64_t sub_24A29BD3C()
{
  return sub_24A29B624(&qword_26B1747E0, (void (*)(uint64_t))type metadata accessor for Proto_SealedHashLedger);
}

uint64_t sub_24A29BD84()
{
  return sub_24A29B624(&qword_26977A228, (void (*)(uint64_t))type metadata accessor for Proto_SealedHashLedger);
}

uint64_t sub_24A29BDCC()
{
  return sub_24A29B624(&qword_26B1747E8, (void (*)(uint64_t))type metadata accessor for Proto_SealedHashLedger);
}

uint64_t sub_24A29BE14()
{
  return sub_24A29B624(&qword_26977A230, (void (*)(uint64_t))type metadata accessor for Proto_AttestationBundle);
}

uint64_t sub_24A29BE5C()
{
  return sub_24A29B624(&qword_26B174268, (void (*)(uint64_t))type metadata accessor for Proto_AttestationBundle);
}

uint64_t sub_24A29BEA4()
{
  return sub_24A29B624(&qword_26977A238, (void (*)(uint64_t))type metadata accessor for Proto_AttestationBundle);
}

uint64_t sub_24A29BEEC()
{
  return sub_24A29B624(&qword_26B174868, (void (*)(uint64_t))type metadata accessor for Proto_TransparencyProofs);
}

uint64_t sub_24A29BF34()
{
  return sub_24A29B624(&qword_26B174270, (void (*)(uint64_t))type metadata accessor for Proto_AttestationBundle);
}

uint64_t sub_24A29BF7C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_24A29BFE4(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1;
  }
  uint64_t v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v4 = 0;
  uint64_t v5 = result + 64;
  uint64_t v6 = 1 << *(unsigned char *)(result + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(result + 64);
  int64_t v27 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v9 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v10 = v9 | (v4 << 6);
      goto LABEL_23;
    }
    int64_t v11 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_34;
    }
    if (v11 >= v27) {
      return 1;
    }
    unint64_t v12 = *(void *)(v5 + 8 * v11);
    ++v4;
    if (!v12)
    {
      int64_t v4 = v11 + 1;
      if (v11 + 1 >= v27) {
        return 1;
      }
      unint64_t v12 = *(void *)(v5 + 8 * v4);
      if (!v12)
      {
        int64_t v4 = v11 + 2;
        if (v11 + 2 >= v27) {
          return 1;
        }
        unint64_t v12 = *(void *)(v5 + 8 * v4);
        if (!v12) {
          break;
        }
      }
    }
LABEL_22:
    unint64_t v8 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v4 << 6);
LABEL_23:
    uint64_t v14 = 16 * v10;
    uint64_t v15 = (uint64_t *)(*(void *)(v3 + 48) + v14);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    uint64_t v18 = (uint64_t *)(*(void *)(v3 + 56) + v14);
    uint64_t v20 = *v18;
    uint64_t v19 = v18[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v21 = sub_24A1BE668(v16, v17);
    char v23 = v22;
    swift_bridgeObjectRelease();
    if ((v23 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
    uint64_t v24 = (void *)(*(void *)(a2 + 56) + 16 * v21);
    if (*v24 == v20 && v24[1] == v19)
    {
      uint64_t result = swift_bridgeObjectRelease();
    }
    else
    {
      char v26 = sub_24A2A7E40();
      uint64_t result = swift_bridgeObjectRelease();
      if ((v26 & 1) == 0) {
        return 0;
      }
    }
  }
  int64_t v13 = v11 + 3;
  if (v13 >= v27) {
    return 1;
  }
  unint64_t v12 = *(void *)(v5 + 8 * v13);
  if (v12)
  {
    int64_t v4 = v13;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v4 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v4 >= v27) {
      return 1;
    }
    unint64_t v12 = *(void *)(v5 + 8 * v4);
    ++v13;
    if (v12) {
      goto LABEL_22;
    }
  }
LABEL_34:
  __break(1u);
  return result;
}

uint64_t sub_24A29C1EC(uint64_t a1, uint64_t a2)
{
  __s1[3] = *MEMORY[0x263EF8340];
  uint64_t v234 = type metadata accessor for Proto_SecureConfig(0);
  MEMORY[0x270FA5388](v234);
  uint64_t v247 = (uint64_t *)((char *)&v220 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = type metadata accessor for Proto_Cryptex.Salt(0);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v236 = (uint64_t)&v220 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v235 = type metadata accessor for Proto_Cryptex(0);
  MEMORY[0x270FA5388](v235);
  unint64_t v245 = (uint64_t *)((char *)&v220 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v246 = __swift_instantiateConcreteTypeFromMangledName(&qword_26977A258);
  MEMORY[0x270FA5388](v246);
  unint64_t v9 = (char *)&v220 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Proto_SealedHash.Entry.OneOf_Info(0);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v248 = (uint64_t *)((char *)&v220 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)&v220 - v15;
  uint64_t v17 = MEMORY[0x270FA5388](v14);
  uint64_t v249 = (uint64_t)&v220 - v18;
  MEMORY[0x270FA5388](v17);
  uint64_t v251 = (uint64_t)&v220 - v19;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174678);
  MEMORY[0x270FA5388](v20 - 8);
  char v22 = (char *)&v220 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v252 = __swift_instantiateConcreteTypeFromMangledName(&qword_269778808);
  MEMORY[0x270FA5388](v252);
  uint64_t v257 = (uint64_t)&v220 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v261 = type metadata accessor for Proto_SealedHash.Entry(0);
  uint64_t v239 = *(void *)(v261 - 8);
  uint64_t v24 = MEMORY[0x270FA5388](v261);
  uint64_t v262 = (uint64_t)&v220 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v24);
  int64_t v27 = (_DWORD *)((char *)&v220 - v26);
  uint64_t v243 = type metadata accessor for Proto_SealedHash(0);
  uint64_t v255 = *(void *)(v243 - 8);
  uint64_t v28 = MEMORY[0x270FA5388](v243);
  uint64_t v258 = (uint64_t *)((char *)&v220 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v28);
  uint64_t v259 = (uint64_t)&v220 - v30;
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_26977A260);
  uint64_t v32 = MEMORY[0x270FA5388](v31 - 8);
  uint64_t v34 = (uint64_t *)((char *)&v220 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v32);
  v250 = (uint64_t *)((char *)&v220 - v35);
  if (a1 == a2) {
    return 1;
  }
  if (*(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  uint64_t v237 = v22;
  int64_t v36 = 0;
  uint64_t v227 = 0;
  uint64_t v37 = *(void *)(a1 + 64);
  uint64_t v224 = a1 + 64;
  uint64_t v38 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v39 = -1;
  if (v38 < 64) {
    uint64_t v39 = ~(-1 << v38);
  }
  unint64_t v40 = v39 & v37;
  unint64_t v244 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  int64_t v228 = (unint64_t)(v38 + 63) >> 6;
  int64_t v223 = v228 - 1;
  uint64_t v256 = v34;
  uint64_t v230 = a1;
  uint64_t v225 = v16;
  uint64_t v229 = a2;
  while (1)
  {
    if (v40)
    {
      uint64_t v232 = (v40 - 1) & v40;
      int64_t v233 = v36;
      unint64_t v48 = __clz(__rbit64(v40)) | (v36 << 6);
LABEL_9:
      uint64_t v49 = *(void *)(a1 + 56);
      uint64_t v50 = (void *)(*(void *)(a1 + 48) + 16 * v48);
      uint64_t v51 = v50[1];
      *uint64_t v34 = *v50;
      v34[1] = v51;
      uint64_t v52 = v49 + *(void *)(v255 + 72) * v48;
      uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&qword_26977A268);
      sub_24A2A0918(v52, (uint64_t)v256 + *(int *)(v53 + 48), type metadata accessor for Proto_SealedHash);
      uint64_t v54 = *(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v53 - 8) + 56);
      uint64_t v55 = v53;
      uint64_t v34 = v256;
      v54(v256, 0, 1, v55);
      swift_bridgeObjectRetain();
      goto LABEL_16;
    }
    int64_t v56 = v36 + 1;
    if (__OFADD__(v36, 1)) {
      goto LABEL_268;
    }
    if (v56 >= v228)
    {
      int64_t v233 = v36;
    }
    else
    {
      unint64_t v57 = *(void *)(v224 + 8 * v56);
      if (v57) {
        goto LABEL_13;
      }
      int64_t v213 = v36 + 2;
      if (v36 + 2 >= v228) {
        goto LABEL_244;
      }
      unint64_t v57 = *(void *)(v224 + 8 * v213);
      if (v57) {
        goto LABEL_229;
      }
      int64_t v214 = v36 + 3;
      if (v36 + 3 < v228)
      {
        unint64_t v57 = *(void *)(v224 + 8 * v214);
        if (v57) {
          goto LABEL_232;
        }
        int64_t v213 = v36 + 4;
        if (v36 + 4 >= v228)
        {
          int64_t v233 = v36 + 3;
          goto LABEL_15;
        }
        unint64_t v57 = *(void *)(v224 + 8 * v213);
        if (v57)
        {
LABEL_229:
          int64_t v56 = v213;
          goto LABEL_13;
        }
        int64_t v214 = v36 + 5;
        if (v36 + 5 < v228)
        {
          unint64_t v57 = *(void *)(v224 + 8 * v214);
          if (!v57)
          {
            while (1)
            {
              int64_t v56 = v214 + 1;
              if (__OFADD__(v214, 1))
              {
                __break(1u);
LABEL_305:
                sub_24A2A6900();
                __break(1u);
LABEL_306:
                __break(1u);
LABEL_307:
                __break(1u);
LABEL_308:
                sub_24A2A6900();
                __break(1u);
LABEL_309:
                __break(1u);
LABEL_310:
                __break(1u);
LABEL_311:
                __break(1u);
LABEL_312:
                __break(1u);
LABEL_313:
                __break(1u);
LABEL_314:
                __break(1u);
LABEL_315:
                __break(1u);
LABEL_316:
                __break(1u);
LABEL_317:
                __break(1u);
LABEL_318:
                __break(1u);
                JUMPOUT(0x24A29E294);
              }
              if (v56 >= v228) {
                break;
              }
              unint64_t v57 = *(void *)(v224 + 8 * v56);
              ++v214;
              if (v57) {
                goto LABEL_13;
              }
            }
            int64_t v56 = v223;
LABEL_244:
            int64_t v233 = v56;
            goto LABEL_15;
          }
LABEL_232:
          int64_t v56 = v214;
LABEL_13:
          uint64_t v232 = (v57 - 1) & v57;
          unint64_t v48 = __clz(__rbit64(v57)) + (v56 << 6);
          int64_t v233 = v56;
          goto LABEL_9;
        }
      }
      int64_t v233 = v213;
    }
LABEL_15:
    uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName(&qword_26977A268);
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v58 - 8) + 56))(v34, 1, 1, v58);
    uint64_t v232 = 0;
LABEL_16:
    uint64_t v59 = v250;
    sub_24A2A08B0((uint64_t)v34, (uint64_t)v250);
    uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName(&qword_26977A268);
    BOOL v61 = (*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v60 - 8) + 48))(v59, 1, v60) == 1;
    uint64_t result = v61;
    if (v61) {
      return result;
    }
    BOOL v231 = v61;
    uint64_t v62 = (uint64_t)v59 + *(int *)(v60 + 48);
    uint64_t v63 = *v59;
    uint64_t v64 = v59[1];
    uint64_t v65 = a2;
    uint64_t v66 = v259;
    sub_24A29BF7C(v62, v259, type metadata accessor for Proto_SealedHash);
    unint64_t v67 = sub_24A1BE668(v63, v64);
    char v69 = v68;
    swift_bridgeObjectRelease();
    if ((v69 & 1) == 0) {
      goto LABEL_260;
    }
    uint64_t v70 = *(void *)(v65 + 56) + *(void *)(v255 + 72) * v67;
    uint64_t v71 = v258;
    sub_24A2A0918(v70, (uint64_t)v258, type metadata accessor for Proto_SealedHash);
    uint64_t v72 = *v71;
    uint64_t v73 = *(void *)v66;
    if (*(unsigned char *)(v66 + 8) == 1)
    {
      uint64_t v74 = v9;
      if (v73)
      {
        if (v73 == 1)
        {
          if (v72 != 1) {
            goto LABEL_259;
          }
        }
        else if (v72 != 2)
        {
          goto LABEL_259;
        }
      }
      else if (v72)
      {
        goto LABEL_259;
      }
    }
    else
    {
      uint64_t v74 = v9;
      if (v72 != v73) {
        goto LABEL_259;
      }
    }
    uint64_t v75 = v258[2];
    uint64_t v76 = *(void *)(v259 + 16);
    uint64_t v77 = *(void *)(v75 + 16);
    if (v77 != *(void *)(v76 + 16)) {
      goto LABEL_259;
    }
    if (v77 && v75 != v76) {
      break;
    }
LABEL_6:
    uint64_t v41 = v10;
    uint64_t v42 = (uint64_t)v258;
    uint64_t v43 = v74;
    uint64_t v44 = v259;
    sub_24A2A6E10();
    sub_24A29B624(&qword_2697787D0, MEMORY[0x263F50560]);
    char v45 = sub_24A2A77E0();
    uint64_t v46 = v42;
    uint64_t v10 = v41;
    sub_24A28EF84(v46, type metadata accessor for Proto_SealedHash);
    unint64_t v9 = v43;
    sub_24A28EF84(v44, type metadata accessor for Proto_SealedHash);
    a2 = v229;
    a1 = v230;
    uint64_t v34 = v256;
    int64_t v36 = v233;
    unint64_t v40 = v232;
    uint64_t result = v231;
    if ((v45 & 1) == 0) {
      return result;
    }
  }
  unint64_t v78 = 0;
  unint64_t v79 = (*(unsigned __int8 *)(v239 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v239 + 80);
  uint64_t v238 = *(void *)(v239 + 72);
  uint64_t v260 = v27;
  uint64_t v226 = v10;
  uint64_t v242 = v75;
  uint64_t v241 = v76;
  uint64_t v240 = v77;
  while (2)
  {
    sub_24A2A0918(v75 + v79, (uint64_t)v27, type metadata accessor for Proto_SealedHash.Entry);
    if (v78 >= *(void *)(v76 + 16))
    {
      __break(1u);
LABEL_264:
      __break(1u);
LABEL_265:
      __break(1u);
LABEL_266:
      __break(1u);
LABEL_267:
      __break(1u);
LABEL_268:
      __break(1u);
LABEL_269:
      __break(1u);
LABEL_270:
      __break(1u);
LABEL_271:
      __break(1u);
LABEL_272:
      __break(1u);
LABEL_273:
      __break(1u);
LABEL_274:
      __break(1u);
LABEL_275:
      __break(1u);
LABEL_276:
      __break(1u);
LABEL_277:
      __break(1u);
LABEL_278:
      __break(1u);
LABEL_279:
      __break(1u);
LABEL_280:
      __break(1u);
LABEL_281:
      __break(1u);
LABEL_282:
      __break(1u);
LABEL_283:
      __break(1u);
LABEL_284:
      __break(1u);
LABEL_285:
      __break(1u);
LABEL_286:
      __break(1u);
LABEL_287:
      __break(1u);
LABEL_288:
      __break(1u);
LABEL_289:
      __break(1u);
LABEL_290:
      __break(1u);
LABEL_291:
      __break(1u);
LABEL_292:
      __break(1u);
LABEL_293:
      __break(1u);
LABEL_294:
      __break(1u);
LABEL_295:
      __break(1u);
LABEL_296:
      __break(1u);
LABEL_297:
      __break(1u);
LABEL_298:
      __break(1u);
LABEL_299:
      __break(1u);
LABEL_300:
      __break(1u);
LABEL_301:
      __break(1u);
LABEL_302:
      __break(1u);
LABEL_303:
      __break(1u);
    }
    unint64_t v254 = v79;
    uint64_t v80 = (_DWORD *)v262;
    sub_24A2A0918(v76 + v79, v262, type metadata accessor for Proto_SealedHash.Entry);
    if (*v27 != *v80) {
      goto LABEL_258;
    }
    unint64_t v81 = v78 + 1;
    uint64_t v82 = *((void *)v260 + 1);
    unint64_t v83 = *((void *)v260 + 2);
    uint64_t v85 = *(void *)(v262 + 8);
    unint64_t v84 = *(void *)(v262 + 16);
    uint64_t v86 = 0;
    switch(v83 >> 62)
    {
      case 1uLL:
        LODWORD(v86) = HIDWORD(v82) - v82;
        if (__OFSUB__(HIDWORD(v82), v82)) {
          goto LABEL_264;
        }
        uint64_t v86 = (int)v86;
LABEL_39:
        unint64_t v253 = v81;
        unint64_t v90 = v84 >> 62;
        switch(v84 >> 62)
        {
          case 1uLL:
            LODWORD(v91) = HIDWORD(v85) - v85;
            if (__OFSUB__(HIDWORD(v85), v85)) {
              goto LABEL_266;
            }
            uint64_t v91 = (int)v91;
LABEL_44:
            if (v86 != v91) {
              goto LABEL_258;
            }
            if (v86 < 1) {
              goto LABEL_131;
            }
            break;
          case 2uLL:
            uint64_t v93 = *(void *)(v85 + 16);
            uint64_t v92 = *(void *)(v85 + 24);
            BOOL v89 = __OFSUB__(v92, v93);
            uint64_t v91 = v92 - v93;
            if (!v89) {
              goto LABEL_44;
            }
            goto LABEL_267;
          case 3uLL:
            if (v86) {
              goto LABEL_258;
            }
            goto LABEL_131;
          default:
            uint64_t v91 = BYTE6(v84);
            goto LABEL_44;
        }
        break;
      case 2uLL:
        uint64_t v88 = *(void *)(v82 + 16);
        uint64_t v87 = *(void *)(v82 + 24);
        BOOL v89 = __OFSUB__(v87, v88);
        uint64_t v86 = v87 - v88;
        if (!v89) {
          goto LABEL_39;
        }
        goto LABEL_265;
      case 3uLL:
        goto LABEL_39;
      default:
        uint64_t v86 = BYTE6(v83);
        goto LABEL_39;
    }
    switch(v83 >> 62)
    {
      case 1uLL:
        if ((int)v82 > v82 >> 32) {
          goto LABEL_269;
        }
        sub_24A1A52B0(v82, v83);
        uint64_t v99 = (char *)sub_24A2A68E0();
        if (!v99) {
          goto LABEL_60;
        }
        uint64_t v100 = sub_24A2A6910();
        if (__OFSUB__((int)v82, v100)) {
          goto LABEL_271;
        }
        v99 += (int)v82 - v100;
LABEL_60:
        sub_24A2A6900();
        if (v90)
        {
          unint64_t v222 = v99;
          if (v90 == 1)
          {
            if (v85 >> 32 < (int)v85) {
              goto LABEL_280;
            }
            swift_retain();
            uint64_t v101 = (char *)sub_24A2A68E0();
            if (v101)
            {
              uint64_t v102 = sub_24A2A6910();
              if (__OFSUB__((int)v85, v102)) {
                goto LABEL_295;
              }
              v101 += (int)v85 - v102;
            }
            uint64_t v103 = sub_24A2A6900();
            if (v103 >= (v85 >> 32) - (int)v85) {
              size_t v104 = (v85 >> 32) - (int)v85;
            }
            else {
              size_t v104 = v103;
            }
            uint64_t v10 = v226;
            if (!v222) {
              goto LABEL_306;
            }
            if (!v101) {
              goto LABEL_307;
            }
            int v105 = memcmp(v222, v101, v104);
            sub_24A1A5384(v85, v84);
            uint64_t v106 = v82;
            unint64_t v107 = v83;
LABEL_84:
            sub_24A1A5384(v106, v107);
            if (v105) {
              goto LABEL_258;
            }
          }
          else
          {
            uint64_t v169 = *(void *)(v85 + 16);
            uint64_t v170 = *(void *)(v85 + 24);
            swift_retain();
            swift_retain();
            uint64_t v171 = (char *)sub_24A2A68E0();
            if (v171)
            {
              uint64_t v172 = sub_24A2A6910();
              uint64_t v10 = v226;
              if (__OFSUB__(v169, v172)) {
                goto LABEL_294;
              }
              v171 += v169 - v172;
            }
            else
            {
              uint64_t v10 = v226;
            }
            BOOL v89 = __OFSUB__(v170, v169);
            int64_t v209 = v170 - v169;
            if (v89) {
              goto LABEL_281;
            }
            uint64_t v210 = sub_24A2A6900();
            if (v210 >= v209) {
              size_t v211 = v209;
            }
            else {
              size_t v211 = v210;
            }
            if (!v222) {
              goto LABEL_317;
            }
            if (!v171) {
              goto LABEL_318;
            }
            int v212 = memcmp(v222, v171, v211);
            swift_release();
            swift_release();
            sub_24A1A5384(v82, v83);
            if (v212) {
              goto LABEL_258;
            }
          }
        }
        else
        {
          __s1[0] = v85;
          LOWORD(__s1[1]) = v84;
          BYTE2(__s1[1]) = BYTE2(v84);
          BYTE3(__s1[1]) = BYTE3(v84);
          BYTE4(__s1[1]) = BYTE4(v84);
          BYTE5(__s1[1]) = BYTE5(v84);
          if (!v99) {
            goto LABEL_316;
          }
          int v168 = memcmp(v99, __s1, BYTE6(v84));
          sub_24A1A5384(v82, v83);
          uint64_t v10 = v226;
          if (v168) {
            goto LABEL_258;
          }
        }
        goto LABEL_131;
      case 2uLL:
        unint64_t v222 = v74;
        uint64_t v108 = *(void *)(v82 + 16);
        swift_retain();
        swift_retain();
        uint64_t v109 = sub_24A2A68E0();
        if (v109)
        {
          uint64_t v110 = v109;
          uint64_t v111 = sub_24A2A6910();
          if (__OFSUB__(v108, v111)) {
            goto LABEL_270;
          }
          uint64_t v112 = (const void *)(v110 + v108 - v111);
        }
        else
        {
          uint64_t v112 = 0;
        }
        sub_24A2A6900();
        uint64_t v10 = v226;
        if (!v90)
        {
          __s1[0] = v85;
          LOWORD(__s1[1]) = v84;
          BYTE2(__s1[1]) = BYTE2(v84);
          BYTE3(__s1[1]) = BYTE3(v84);
          BYTE4(__s1[1]) = BYTE4(v84);
          BYTE5(__s1[1]) = BYTE5(v84);
          uint64_t v74 = v222;
          if (!v112) {
            goto LABEL_313;
          }
          int v132 = memcmp(v112, __s1, BYTE6(v84));
          swift_release();
LABEL_130:
          swift_release();
          if (v132) {
            goto LABEL_258;
          }
          goto LABEL_131;
        }
        uint64_t v74 = v222;
        if (v90 != 1)
        {
          uint64_t v133 = *(void *)(v85 + 16);
          uint64_t v134 = *(void *)(v85 + 24);
          swift_retain();
          swift_retain();
          uint64_t v135 = (char *)sub_24A2A68E0();
          if (v135)
          {
            uint64_t v136 = sub_24A2A6910();
            if (__OFSUB__(v133, v136)) {
              goto LABEL_292;
            }
            v135 += v133 - v136;
          }
          BOOL v89 = __OFSUB__(v134, v133);
          int64_t v137 = v134 - v133;
          if (v89) {
            goto LABEL_279;
          }
          uint64_t v138 = sub_24A2A6900();
          if (v138 >= v137) {
            size_t v139 = v137;
          }
          else {
            size_t v139 = v138;
          }
          if (!v112) {
            goto LABEL_314;
          }
          if (!v135) {
            goto LABEL_315;
          }
          int v132 = memcmp(v112, v135, v139);
          swift_release();
          swift_release();
LABEL_129:
          swift_release();
          goto LABEL_130;
        }
        uint64_t v221 = v112;
        if (v85 >> 32 < (int)v85) {
          goto LABEL_274;
        }
        swift_retain();
        long long v117 = (char *)sub_24A2A68E0();
        if (v117)
        {
          uint64_t v118 = sub_24A2A6910();
          if (__OFSUB__((int)v85, v118)) {
            goto LABEL_293;
          }
          v117 += (int)v85 - v118;
        }
        uint64_t v119 = sub_24A2A6900();
        if (v119 >= (v85 >> 32) - (int)v85) {
          size_t v120 = (v85 >> 32) - (int)v85;
        }
        else {
          size_t v120 = v119;
        }
        if (!v221) {
          goto LABEL_309;
        }
        if (!v117) {
          goto LABEL_310;
        }
        int v121 = memcmp(v221, v117, v120);
        sub_24A1A5384(v85, v84);
        swift_release();
        swift_release();
        if (v121) {
          goto LABEL_258;
        }
LABEL_131:
        int64_t v27 = v260;
        uint64_t v140 = *(int *)(v261 + 24);
        uint64_t v141 = v262 + v140;
        uint64_t v142 = v257;
        uint64_t v143 = v257 + *(int *)(v252 + 48);
        sub_24A1B2CAC((uint64_t)v260 + v140, v257, &qword_26B174678);
        sub_24A1B2CAC(v141, v143, &qword_26B174678);
        unint64_t v144 = *v244;
        if ((*v244)(v142, 1, v10) == 1)
        {
          if (v144(v143, 1, v10) != 1)
          {
            uint64_t v217 = &qword_269778808;
            goto LABEL_257;
          }
LABEL_215:
          sub_24A1B2D10(v142, &qword_26B174678);
          uint64_t v207 = v262;
          sub_24A2A6E10();
          sub_24A29B624(&qword_2697787D0, MEMORY[0x263F50560]);
          char v208 = sub_24A2A77E0();
          sub_24A28EF84(v207, type metadata accessor for Proto_SealedHash.Entry);
          sub_24A28EF84((uint64_t)v27, type metadata accessor for Proto_SealedHash.Entry);
          uint64_t v75 = v242;
          uint64_t v76 = v241;
          if ((v208 & 1) == 0) {
            goto LABEL_259;
          }
          unint64_t v78 = v253;
          unint64_t v79 = v254 + v238;
          if (v240 == v253) {
            goto LABEL_6;
          }
          continue;
        }
        uint64_t v145 = (uint64_t)v237;
        sub_24A1B2CAC(v142, (uint64_t)v237, &qword_26B174678);
        if (v144(v143, 1, v10) == 1)
        {
          uint64_t v217 = &qword_269778808;
          goto LABEL_256;
        }
        uint64_t v146 = v251;
        sub_24A29BF7C(v143, v251, type metadata accessor for Proto_SealedHash.Entry.OneOf_Info);
        uint64_t v147 = (uint64_t)&v74[*(int *)(v246 + 48)];
        sub_24A2A0918(v145, (uint64_t)v74, type metadata accessor for Proto_SealedHash.Entry.OneOf_Info);
        sub_24A2A0918(v146, v147, type metadata accessor for Proto_SealedHash.Entry.OneOf_Info);
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload)
        {
          if (EnumCaseMultiPayload == 1)
          {
            uint64_t v149 = v142;
            uint64_t v150 = (uint64_t)v225;
            sub_24A2A0918((uint64_t)v74, (uint64_t)v225, type metadata accessor for Proto_SealedHash.Entry.OneOf_Info);
            if (swift_getEnumCaseMultiPayload() == 1)
            {
              uint64_t v151 = v236;
              sub_24A29BF7C(v147, v236, type metadata accessor for Proto_Cryptex.Salt);
              sub_24A2A6E10();
              sub_24A29B624(&qword_2697787D0, MEMORY[0x263F50560]);
              char v152 = sub_24A2A77E0();
              sub_24A28EF84(v151, type metadata accessor for Proto_Cryptex.Salt);
              sub_24A28EF84(v150, type metadata accessor for Proto_Cryptex.Salt);
              uint64_t v142 = v149;
              if ((v152 & 1) == 0)
              {
                sub_24A28EF84((uint64_t)v74, type metadata accessor for Proto_SealedHash.Entry.OneOf_Info);
                goto LABEL_255;
              }
              goto LABEL_214;
            }
            sub_24A28EF84(v150, type metadata accessor for Proto_Cryptex.Salt);
            uint64_t v142 = v149;
LABEL_254:
            sub_24A1B2D10((uint64_t)v74, &qword_26977A258);
            goto LABEL_255;
          }
          uint64_t v160 = v248;
          sub_24A2A0918((uint64_t)v74, (uint64_t)v248, type metadata accessor for Proto_SealedHash.Entry.OneOf_Info);
          if (swift_getEnumCaseMultiPayload() == 2)
          {
            uint64_t v161 = v147;
            uint64_t v162 = v247;
            sub_24A29BF7C(v161, (uint64_t)v247, type metadata accessor for Proto_SecureConfig);
            uint64_t v163 = *v160;
            unint64_t v164 = v160[1];
            uint64_t v166 = *v162;
            unint64_t v165 = v162[1];
            uint64_t v167 = 0;
            switch(v164 >> 62)
            {
              case 1uLL:
                LODWORD(v167) = HIDWORD(v163) - v163;
                if (__OFSUB__(HIDWORD(v163), v163)) {
                  goto LABEL_284;
                }
                uint64_t v167 = (int)v167;
                break;
              case 2uLL:
                uint64_t v177 = *(void *)(v163 + 16);
                uint64_t v176 = *(void *)(v163 + 24);
                BOOL v89 = __OFSUB__(v176, v177);
                uint64_t v167 = v176 - v177;
                if (!v89) {
                  break;
                }
                goto LABEL_285;
              case 3uLL:
                break;
              default:
                uint64_t v167 = BYTE6(v164);
                break;
            }
            switch(v165 >> 62)
            {
              case 1uLL:
                LODWORD(v178) = HIDWORD(v166) - v166;
                if (__OFSUB__(HIDWORD(v166), v166)) {
                  goto LABEL_288;
                }
                uint64_t v178 = (int)v178;
LABEL_174:
                if (v167 != v178) {
                  goto LABEL_246;
                }
                if (v167 >= 1)
                {
                  switch(v164 >> 62)
                  {
                    case 1uLL:
                      if (v163 >> 32 < (int)v163) {
                        goto LABEL_297;
                      }
                      sub_24A1A52B0(v163, v164);
                      uint64_t v196 = sub_24A2A68E0();
                      if (!v196) {
                        goto LABEL_200;
                      }
                      uint64_t v197 = sub_24A2A6910();
                      if (__OFSUB__((int)v163, v197)) {
                        goto LABEL_302;
                      }
                      v196 += (int)v163 - v197;
LABEL_200:
                      sub_24A2A6900();
                      uint64_t v198 = v196;
                      uint64_t v199 = v227;
                      sub_24A1B0C70(v198, v166, v165, (char *)__s1);
                      uint64_t v227 = v199;
                      sub_24A1A5384(v163, v164);
                      if ((__s1[0] & 1) == 0) {
                        goto LABEL_246;
                      }
                      break;
                    case 2uLL:
                      uint64_t v200 = *(void *)(v163 + 16);
                      uint64_t v201 = *(void *)(v163 + 24);
                      swift_retain();
                      swift_retain();
                      uint64_t v202 = sub_24A2A68E0();
                      if (!v202) {
                        goto LABEL_205;
                      }
                      uint64_t v203 = sub_24A2A6910();
                      if (__OFSUB__(v200, v203)) {
                        goto LABEL_303;
                      }
                      v202 += v200 - v203;
LABEL_205:
                      if (__OFSUB__(v201, v200)) {
                        goto LABEL_299;
                      }
                      sub_24A2A6900();
                      uint64_t v204 = v202;
                      uint64_t v205 = v227;
                      sub_24A1B0C70(v204, v166, v165, (char *)__s1);
                      uint64_t v227 = v205;
                      swift_release();
                      swift_release();
                      if ((__s1[0] & 1) == 0) {
                        goto LABEL_246;
                      }
                      break;
                    case 3uLL:
                      memset(__s1, 0, 14);
                      goto LABEL_209;
                    default:
                      __s1[0] = *v160;
                      LOWORD(__s1[1]) = v164;
                      BYTE2(__s1[1]) = BYTE2(v164);
                      BYTE3(__s1[1]) = BYTE3(v164);
                      BYTE4(__s1[1]) = BYTE4(v164);
                      BYTE5(__s1[1]) = BYTE5(v164);
LABEL_209:
                      uint64_t v206 = v227;
                      sub_24A1B0C70((uint64_t)__s1, v166, v165, (char *)&__s2);
                      uint64_t v227 = v206;
                      if (__s2) {
                        break;
                      }
                      goto LABEL_246;
                  }
                }
LABEL_210:
                if ((sub_24A29BFE4(v248[2], v247[2]) & 1) == 0
                  || (sub_24A2A6E10(), sub_24A29B624(&qword_2697787D0, MEMORY[0x263F50560]), (sub_24A2A77E0() & 1) == 0))
                {
LABEL_246:
                  uint64_t v215 = type metadata accessor for Proto_SecureConfig;
                  sub_24A28EF84((uint64_t)v247, type metadata accessor for Proto_SecureConfig);
                  uint64_t v216 = (uint64_t)v248;
                  goto LABEL_249;
                }
                uint64_t v194 = type metadata accessor for Proto_SecureConfig;
                sub_24A28EF84((uint64_t)v247, type metadata accessor for Proto_SecureConfig);
                uint64_t v195 = (uint64_t)v248;
                break;
              case 2uLL:
                uint64_t v182 = *(void *)(v166 + 16);
                uint64_t v181 = *(void *)(v166 + 24);
                BOOL v89 = __OFSUB__(v181, v182);
                uint64_t v178 = v181 - v182;
                if (!v89) {
                  goto LABEL_174;
                }
                goto LABEL_289;
              case 3uLL:
                if (v167) {
                  goto LABEL_246;
                }
                goto LABEL_210;
              default:
                uint64_t v178 = BYTE6(v165);
                goto LABEL_174;
            }
            goto LABEL_213;
          }
          uint64_t v218 = type metadata accessor for Proto_SecureConfig;
          uint64_t v219 = (uint64_t)v160;
LABEL_253:
          sub_24A28EF84(v219, v218);
          goto LABEL_254;
        }
        sub_24A2A0918((uint64_t)v74, v249, type metadata accessor for Proto_SealedHash.Entry.OneOf_Info);
        if (swift_getEnumCaseMultiPayload())
        {
          uint64_t v218 = type metadata accessor for Proto_Cryptex;
          uint64_t v219 = v249;
          goto LABEL_253;
        }
        uint64_t v153 = v147;
        uint64_t v154 = v245;
        sub_24A29BF7C(v153, (uint64_t)v245, type metadata accessor for Proto_Cryptex);
        uint64_t v155 = *(void *)v249;
        unint64_t v156 = *(void *)(v249 + 8);
        uint64_t v158 = *v154;
        unint64_t v157 = v154[1];
        uint64_t v159 = 0;
        switch(v156 >> 62)
        {
          case 1uLL:
            LODWORD(v159) = HIDWORD(v155) - v155;
            if (__OFSUB__(HIDWORD(v155), v155)) {
              goto LABEL_282;
            }
            uint64_t v159 = (int)v159;
            break;
          case 2uLL:
            uint64_t v174 = *(void *)(v155 + 16);
            uint64_t v173 = *(void *)(v155 + 24);
            BOOL v89 = __OFSUB__(v173, v174);
            uint64_t v159 = v173 - v174;
            if (!v89) {
              break;
            }
            goto LABEL_283;
          case 3uLL:
            break;
          default:
            uint64_t v159 = BYTE6(v156);
            break;
        }
        switch(v157 >> 62)
        {
          case 1uLL:
            LODWORD(v175) = HIDWORD(v158) - v158;
            if (__OFSUB__(HIDWORD(v158), v158)) {
              goto LABEL_286;
            }
            uint64_t v175 = (int)v175;
LABEL_165:
            if (v159 == v175)
            {
              if (v159 >= 1)
              {
                switch(v156 >> 62)
                {
                  case 1uLL:
                    if (v155 >> 32 < (int)v155) {
                      goto LABEL_296;
                    }
                    sub_24A1A52B0(*(void *)v249, *(void *)(v249 + 8));
                    uint64_t v183 = sub_24A2A68E0();
                    if (!v183) {
                      goto LABEL_184;
                    }
                    uint64_t v184 = sub_24A2A6910();
                    if (__OFSUB__((int)v155, v184)) {
                      goto LABEL_300;
                    }
                    v183 += (int)v155 - v184;
LABEL_184:
                    sub_24A2A6900();
                    uint64_t v185 = v183;
                    uint64_t v186 = v227;
                    sub_24A1B0C70(v185, v158, v157, (char *)__s1);
                    uint64_t v227 = v186;
                    sub_24A1A5384(v155, v156);
                    if ((__s1[0] & 1) == 0) {
                      goto LABEL_248;
                    }
                    break;
                  case 2uLL:
                    uint64_t v187 = *(void *)(v155 + 16);
                    uint64_t v188 = *(void *)(v155 + 24);
                    swift_retain();
                    swift_retain();
                    uint64_t v189 = sub_24A2A68E0();
                    if (!v189) {
                      goto LABEL_189;
                    }
                    uint64_t v190 = sub_24A2A6910();
                    if (__OFSUB__(v187, v190)) {
                      goto LABEL_301;
                    }
                    v189 += v187 - v190;
LABEL_189:
                    if (__OFSUB__(v188, v187)) {
                      goto LABEL_298;
                    }
                    sub_24A2A6900();
                    uint64_t v191 = v189;
                    uint64_t v192 = v227;
                    sub_24A1B0C70(v191, v158, v157, (char *)__s1);
                    uint64_t v227 = v192;
                    swift_release();
                    swift_release();
                    if ((__s1[0] & 1) == 0) {
                      goto LABEL_248;
                    }
                    break;
                  case 3uLL:
                    memset(__s1, 0, 14);
                    goto LABEL_193;
                  default:
                    __s1[0] = *(void *)v249;
                    LOWORD(__s1[1]) = v156;
                    BYTE2(__s1[1]) = BYTE2(v156);
                    BYTE3(__s1[1]) = BYTE3(v156);
                    BYTE4(__s1[1]) = BYTE4(v156);
                    BYTE5(__s1[1]) = BYTE5(v156);
LABEL_193:
                    uint64_t v193 = v227;
                    sub_24A1B0C70((uint64_t)__s1, v158, v157, (char *)&__s2);
                    uint64_t v227 = v193;
                    if (__s2) {
                      break;
                    }
                    goto LABEL_248;
                }
              }
LABEL_194:
              sub_24A2A6E10();
              sub_24A29B624(&qword_2697787D0, MEMORY[0x263F50560]);
              if (sub_24A2A77E0())
              {
                uint64_t v194 = type metadata accessor for Proto_Cryptex;
                sub_24A28EF84((uint64_t)v245, type metadata accessor for Proto_Cryptex);
                uint64_t v195 = v249;
LABEL_213:
                sub_24A28EF84(v195, v194);
                uint64_t v142 = v257;
                int64_t v27 = v260;
                uint64_t v145 = (uint64_t)v237;
LABEL_214:
                sub_24A28EF84((uint64_t)v74, type metadata accessor for Proto_SealedHash.Entry.OneOf_Info);
                sub_24A28EF84(v251, type metadata accessor for Proto_SealedHash.Entry.OneOf_Info);
                sub_24A28EF84(v145, type metadata accessor for Proto_SealedHash.Entry.OneOf_Info);
                goto LABEL_215;
              }
            }
LABEL_248:
            uint64_t v215 = type metadata accessor for Proto_Cryptex;
            sub_24A28EF84((uint64_t)v245, type metadata accessor for Proto_Cryptex);
            uint64_t v216 = v249;
LABEL_249:
            sub_24A28EF84(v216, v215);
            sub_24A28EF84((uint64_t)v74, type metadata accessor for Proto_SealedHash.Entry.OneOf_Info);
            uint64_t v142 = v257;
            uint64_t v145 = (uint64_t)v237;
LABEL_255:
            sub_24A28EF84(v251, type metadata accessor for Proto_SealedHash.Entry.OneOf_Info);
            uint64_t v217 = &qword_26B174678;
LABEL_256:
            sub_24A28EF84(v145, type metadata accessor for Proto_SealedHash.Entry.OneOf_Info);
LABEL_257:
            sub_24A1B2D10(v142, v217);
LABEL_258:
            sub_24A28EF84(v262, type metadata accessor for Proto_SealedHash.Entry);
            sub_24A28EF84((uint64_t)v260, type metadata accessor for Proto_SealedHash.Entry);
LABEL_259:
            sub_24A28EF84((uint64_t)v258, type metadata accessor for Proto_SealedHash);
            uint64_t v66 = v259;
LABEL_260:
            sub_24A28EF84(v66, type metadata accessor for Proto_SealedHash);
            return 0;
          case 2uLL:
            uint64_t v180 = *(void *)(v158 + 16);
            uint64_t v179 = *(void *)(v158 + 24);
            BOOL v89 = __OFSUB__(v179, v180);
            uint64_t v175 = v179 - v180;
            if (!v89) {
              goto LABEL_165;
            }
            goto LABEL_287;
          case 3uLL:
            if (v159) {
              goto LABEL_248;
            }
            goto LABEL_194;
          default:
            uint64_t v175 = BYTE6(v157);
            goto LABEL_165;
        }
      case 3uLL:
        memset(__s1, 0, 14);
        if (!v90) {
          goto LABEL_86;
        }
        if (v90 == 1)
        {
          uint64_t v94 = (v85 >> 32) - (int)v85;
          if (v85 >> 32 < (int)v85) {
            goto LABEL_273;
          }
          swift_retain();
          uint64_t v113 = sub_24A2A68E0();
          if (!v113) {
            goto LABEL_308;
          }
          uint64_t v96 = v113;
          uint64_t v114 = sub_24A2A6910();
          uint64_t v98 = (int)v85 - v114;
          if (__OFSUB__((int)v85, v114)) {
            goto LABEL_278;
          }
LABEL_80:
          uint64_t v115 = sub_24A2A6900();
          if (v115 >= v94) {
            size_t v116 = v94;
          }
          else {
            size_t v116 = v115;
          }
          int v105 = memcmp(__s1, (const void *)(v96 + v98), v116);
          uint64_t v106 = v85;
          unint64_t v107 = v84;
          goto LABEL_84;
        }
        uint64_t v128 = *(void *)(v85 + 16);
        uint64_t v129 = *(void *)(v85 + 24);
        swift_retain();
        swift_retain();
        uint64_t v124 = (char *)sub_24A2A68E0();
        if (v124)
        {
          uint64_t v130 = sub_24A2A6910();
          if (__OFSUB__(v128, v130)) {
            goto LABEL_291;
          }
          v124 += v128 - v130;
        }
        BOOL v89 = __OFSUB__(v129, v128);
        int64_t v126 = v129 - v128;
        if (v89) {
          goto LABEL_276;
        }
        uint64_t v127 = sub_24A2A6900();
        if (!v124) {
          goto LABEL_312;
        }
LABEL_113:
        if (v127 >= v126) {
          size_t v131 = v126;
        }
        else {
          size_t v131 = v127;
        }
        int v132 = memcmp(__s1, v124, v131);
        goto LABEL_129;
      default:
        __s1[0] = v82;
        LOWORD(__s1[1]) = v83;
        BYTE2(__s1[1]) = BYTE2(v83);
        BYTE3(__s1[1]) = BYTE3(v83);
        BYTE4(__s1[1]) = BYTE4(v83);
        BYTE5(__s1[1]) = BYTE5(v83);
        if (!v90)
        {
LABEL_86:
          uint64_t __s2 = v85;
          __int16 v264 = v84;
          char v265 = BYTE2(v84);
          char v266 = BYTE3(v84);
          char v267 = BYTE4(v84);
          char v268 = BYTE5(v84);
          if (memcmp(__s1, &__s2, BYTE6(v84))) {
            goto LABEL_258;
          }
          goto LABEL_131;
        }
        if (v90 == 1)
        {
          uint64_t v94 = (v85 >> 32) - (int)v85;
          if (v85 >> 32 < (int)v85) {
            goto LABEL_272;
          }
          swift_retain();
          uint64_t v95 = sub_24A2A68E0();
          if (!v95) {
            goto LABEL_305;
          }
          uint64_t v96 = v95;
          uint64_t v97 = sub_24A2A6910();
          uint64_t v98 = (int)v85 - v97;
          if (__OFSUB__((int)v85, v97)) {
            goto LABEL_277;
          }
          goto LABEL_80;
        }
        uint64_t v122 = *(void *)(v85 + 16);
        uint64_t v123 = *(void *)(v85 + 24);
        swift_retain();
        swift_retain();
        uint64_t v124 = (char *)sub_24A2A68E0();
        if (v124)
        {
          uint64_t v125 = sub_24A2A6910();
          if (__OFSUB__(v122, v125)) {
            goto LABEL_290;
          }
          v124 += v122 - v125;
        }
        BOOL v89 = __OFSUB__(v123, v122);
        int64_t v126 = v123 - v122;
        if (v89) {
          goto LABEL_275;
        }
        uint64_t v127 = sub_24A2A6900();
        if (!v124) {
          goto LABEL_311;
        }
        goto LABEL_113;
    }
  }
}

uint64_t sub_24A29E324(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A2A6E10();
  uint64_t v44 = *(void *)(v4 - 8);
  uint64_t v45 = v4;
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v43 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v42 = (char *)&v39 - v7;
  uint64_t v8 = type metadata accessor for ATLogProofs(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v39 = (uint64_t)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_2697787E0);
  uint64_t v12 = v11 - 8;
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1742D8);
  uint64_t v16 = MEMORY[0x270FA5388](v15 - 8);
  uint64_t v46 = (uint64_t)&v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  uint64_t v20 = (char *)&v39 - v19;
  MEMORY[0x270FA5388](v18);
  char v22 = (char *)&v39 - v21;
  uint64_t v23 = type metadata accessor for Proto_TransparencyProofs(0);
  uint64_t v24 = *(int *)(v23 + 20);
  uint64_t v40 = a1;
  sub_24A1B2CAC(a1 + v24, (uint64_t)v22, &qword_26B1742D8);
  uint64_t v25 = *(int *)(v23 + 20);
  uint64_t v41 = a2;
  sub_24A1B2CAC(a2 + v25, (uint64_t)v20, &qword_26B1742D8);
  uint64_t v26 = (uint64_t)&v14[*(int *)(v12 + 56)];
  sub_24A1B2CAC((uint64_t)v22, (uint64_t)v14, &qword_26B1742D8);
  sub_24A1B2CAC((uint64_t)v20, v26, &qword_26B1742D8);
  int64_t v27 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v27((uint64_t)v14, 1, v8) != 1)
  {
    uint64_t v28 = v46;
    sub_24A1B2CAC((uint64_t)v14, v46, &qword_26B1742D8);
    if (v27(v26, 1, v8) != 1)
    {
      uint64_t v29 = v39;
      sub_24A29BF7C(v26, v39, type metadata accessor for ATLogProofs);
      char v30 = sub_24A1A3EF4(v28, v29);
      sub_24A28EF84(v29, type metadata accessor for ATLogProofs);
      sub_24A1B2D10((uint64_t)v20, &qword_26B1742D8);
      sub_24A1B2D10((uint64_t)v22, &qword_26B1742D8);
      sub_24A28EF84(v28, type metadata accessor for ATLogProofs);
      sub_24A1B2D10((uint64_t)v14, &qword_26B1742D8);
      if (v30) {
        goto LABEL_8;
      }
LABEL_9:
      char v36 = 0;
      return v36 & 1;
    }
    sub_24A1B2D10((uint64_t)v20, &qword_26B1742D8);
    sub_24A1B2D10((uint64_t)v22, &qword_26B1742D8);
    sub_24A28EF84(v28, type metadata accessor for ATLogProofs);
LABEL_6:
    sub_24A1B2D10((uint64_t)v14, &qword_2697787E0);
    goto LABEL_9;
  }
  sub_24A1B2D10((uint64_t)v20, &qword_26B1742D8);
  sub_24A1B2D10((uint64_t)v22, &qword_26B1742D8);
  if (v27(v26, 1, v8) != 1) {
    goto LABEL_6;
  }
  sub_24A1B2D10((uint64_t)v14, &qword_26B1742D8);
LABEL_8:
  uint64_t v32 = v44;
  uint64_t v31 = v45;
  uint64_t v33 = *(void (**)(char *, uint64_t, uint64_t))(v44 + 16);
  uint64_t v34 = v42;
  v33(v42, v40, v45);
  uint64_t v35 = v43;
  v33(v43, v41, v31);
  sub_24A29B624(&qword_2697787D0, MEMORY[0x263F50560]);
  char v36 = sub_24A2A77E0();
  uint64_t v37 = *(void (**)(char *, uint64_t))(v32 + 8);
  v37(v35, v31);
  v37(v34, v31);
  return v36 & 1;
}

uint64_t sub_24A29E814(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = sub_24A2A6E10();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v16 - v9;
  if (sub_24A29C1EC(*a1, *a2))
  {
    uint64_t v11 = type metadata accessor for Proto_SealedHashLedger(0);
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v12(v10, (char *)a1 + *(int *)(v11 + 20), v4);
    v12(v8, (char *)a2 + *(int *)(v11 + 20), v4);
    sub_24A29B624(&qword_2697787D0, MEMORY[0x263F50560]);
    char v13 = sub_24A2A77E0();
    uint64_t v14 = *(void (**)(char *, uint64_t))(v5 + 8);
    v14(v8, v4);
    v14(v10, v4);
  }
  else
  {
    char v13 = 0;
  }
  return v13 & 1;
}

uint64_t sub_24A29E9CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A2A6E10();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v16 - v9;
  if ((sub_24A1B7D80(*(void *)a1, *(void *)(a1 + 8), *(void *)a2, *(void *)(a2 + 8)) & 1) != 0
    && (sub_24A29BFE4(*(void *)(a1 + 16), *(void *)(a2 + 16)) & 1) != 0)
  {
    uint64_t v11 = type metadata accessor for Proto_SecureConfig(0);
    uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v12(v10, a1 + *(int *)(v11 + 24), v4);
    v12(v8, a2 + *(int *)(v11 + 24), v4);
    sub_24A29B624(&qword_2697787D0, MEMORY[0x263F50560]);
    char v13 = sub_24A2A77E0();
    uint64_t v14 = *(void (**)(char *, uint64_t))(v5 + 8);
    v14(v8, v4);
    v14(v10, v4);
  }
  else
  {
    char v13 = 0;
  }
  return v13 & 1;
}

uint64_t sub_24A29EB94(char *a1, uint64_t *a2)
{
  uint64_t v4 = sub_24A2A6E10();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v18 - v9;
  uint64_t v11 = *(void *)a1;
  uint64_t v12 = *a2;
  if (*((unsigned char *)a2 + 8) != 1)
  {
    if (v11 == v12) {
      goto LABEL_11;
    }
    goto LABEL_13;
  }
  if (!v12)
  {
    if (!v11) {
      goto LABEL_11;
    }
LABEL_13:
    char v15 = 0;
    return v15 & 1;
  }
  if (v12 != 1)
  {
    if (v11 == 2) {
      goto LABEL_11;
    }
    goto LABEL_13;
  }
  if (v11 != 1) {
    goto LABEL_13;
  }
LABEL_11:
  if ((sub_24A1AFFAC(*((void *)a1 + 2), a2[2]) & 1) == 0) {
    goto LABEL_13;
  }
  uint64_t v13 = type metadata accessor for Proto_SealedHash(0);
  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
  v14(v10, &a1[*(int *)(v13 + 24)], v4);
  v14(v8, (char *)a2 + *(int *)(v13 + 24), v4);
  sub_24A29B624(&qword_2697787D0, MEMORY[0x263F50560]);
  char v15 = sub_24A2A77E0();
  uint64_t v16 = *(void (**)(char *, uint64_t))(v5 + 8);
  v16(v8, v4);
  v16(v10, v4);
  return v15 & 1;
}

uint64_t sub_24A29ED94(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A2A6E10();
  uint64_t v52 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v42 - v8;
  uint64_t v10 = type metadata accessor for Proto_SealedHash.Entry.OneOf_Info(0);
  uint64_t v53 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_269778808);
  MEMORY[0x270FA5388](v13);
  char v15 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174678);
  uint64_t v17 = MEMORY[0x270FA5388](v16 - 8);
  uint64_t v18 = MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)&v42 - v19;
  MEMORY[0x270FA5388](v18);
  if (*(_DWORD *)a1 != *(_DWORD *)a2) {
    goto LABEL_9;
  }
  uint64_t v50 = (uint64_t)&v42 - v21;
  uint64_t v51 = v15;
  uint64_t v48 = v22;
  uint64_t v49 = v10;
  uint64_t v45 = v12;
  uint64_t v46 = v9;
  uint64_t v23 = v53;
  uint64_t v47 = v7;
  if ((sub_24A1B7D80(*(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a2 + 8), *(void *)(a2 + 16)) & 1) == 0) {
    goto LABEL_9;
  }
  uint64_t v44 = v4;
  uint64_t v24 = type metadata accessor for Proto_SealedHash.Entry(0);
  uint64_t v25 = v50;
  sub_24A1B2CAC(a1 + *(int *)(v24 + 24), v50, &qword_26B174678);
  uint64_t v43 = v24;
  sub_24A1B2CAC(a2 + *(int *)(v24 + 24), (uint64_t)v20, &qword_26B174678);
  uint64_t v26 = (uint64_t)v51;
  uint64_t v27 = (uint64_t)&v51[*(int *)(v13 + 48)];
  sub_24A1B2CAC(v25, (uint64_t)v51, &qword_26B174678);
  sub_24A1B2CAC((uint64_t)v20, v27, &qword_26B174678);
  uint64_t v28 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48);
  uint64_t v29 = v49;
  if (v28(v26, 1, v49) == 1)
  {
    sub_24A1B2D10((uint64_t)v20, &qword_26B174678);
    uint64_t v26 = (uint64_t)v51;
    sub_24A1B2D10(v25, &qword_26B174678);
    if (v28(v27, 1, v29) == 1)
    {
      sub_24A1B2D10(v26, &qword_26B174678);
LABEL_12:
      uint64_t v36 = v43;
      uint64_t v35 = v44;
      uint64_t v37 = v52;
      uint64_t v38 = *(void (**)(char *, uint64_t, uint64_t))(v52 + 16);
      uint64_t v39 = v46;
      v38(v46, a1 + *(int *)(v43 + 28), v44);
      uint64_t v40 = v47;
      v38(v47, a2 + *(int *)(v36 + 28), v35);
      sub_24A29B624(&qword_2697787D0, MEMORY[0x263F50560]);
      char v31 = sub_24A2A77E0();
      uint64_t v41 = *(void (**)(char *, uint64_t))(v37 + 8);
      v41(v40, v35);
      v41(v39, v35);
      return v31 & 1;
    }
    goto LABEL_8;
  }
  uint64_t v30 = v48;
  sub_24A1B2CAC(v26, v48, &qword_26B174678);
  if (v28(v27, 1, v29) == 1)
  {
    sub_24A1B2D10((uint64_t)v20, &qword_26B174678);
    sub_24A1B2D10(v50, &qword_26B174678);
    sub_24A28EF84(v30, type metadata accessor for Proto_SealedHash.Entry.OneOf_Info);
LABEL_8:
    sub_24A1B2D10(v26, &qword_269778808);
    goto LABEL_9;
  }
  uint64_t v33 = (uint64_t)v45;
  sub_24A29BF7C(v27, (uint64_t)v45, type metadata accessor for Proto_SealedHash.Entry.OneOf_Info);
  char v34 = sub_24A29F2E0(v30, v33);
  sub_24A28EF84(v33, type metadata accessor for Proto_SealedHash.Entry.OneOf_Info);
  sub_24A1B2D10((uint64_t)v20, &qword_26B174678);
  sub_24A1B2D10(v50, &qword_26B174678);
  sub_24A28EF84(v30, type metadata accessor for Proto_SealedHash.Entry.OneOf_Info);
  sub_24A1B2D10(v26, &qword_26B174678);
  if (v34) {
    goto LABEL_12;
  }
LABEL_9:
  char v31 = 0;
  return v31 & 1;
}

uint64_t sub_24A29F2E0(uint64_t a1, uint64_t a2)
{
  uint64_t v37 = a2;
  uint64_t v34 = type metadata accessor for Proto_SecureConfig(0);
  MEMORY[0x270FA5388](v34);
  uint64_t v35 = (uint64_t)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Proto_Cryptex.Salt(0);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v36 = (uint64_t)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Proto_Cryptex(0);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Proto_SealedHash.Entry.OneOf_Info(0);
  uint64_t v10 = MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x270FA5388](v10);
  char v15 = (char *)&v34 - v14;
  MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v34 - v16;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_26977A258);
  uint64_t v19 = MEMORY[0x270FA5388](v18 - 8);
  uint64_t v21 = (char *)&v34 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = (uint64_t)&v21[*(int *)(v19 + 56)];
  sub_24A2A0918(a1, (uint64_t)v21, type metadata accessor for Proto_SealedHash.Entry.OneOf_Info);
  sub_24A2A0918(v37, v22, type metadata accessor for Proto_SealedHash.Entry.OneOf_Info);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    sub_24A2A0918((uint64_t)v21, (uint64_t)v17, type metadata accessor for Proto_SealedHash.Entry.OneOf_Info);
    if (swift_getEnumCaseMultiPayload())
    {
      uint64_t v26 = type metadata accessor for Proto_Cryptex;
      uint64_t v27 = (uint64_t)v17;
LABEL_14:
      sub_24A28EF84(v27, v26);
      sub_24A1B2D10((uint64_t)v21, &qword_26977A258);
LABEL_22:
      char v25 = 0;
      return v25 & 1;
    }
    sub_24A29BF7C(v22, (uint64_t)v8, type metadata accessor for Proto_Cryptex);
    if (sub_24A1B7D80(*(void *)v17, *((void *)v17 + 1), *(void *)v8, *((void *)v8 + 1)))
    {
      sub_24A2A6E10();
      sub_24A29B624(&qword_2697787D0, MEMORY[0x263F50560]);
      if (sub_24A2A77E0())
      {
        uint64_t v29 = type metadata accessor for Proto_Cryptex;
        sub_24A28EF84((uint64_t)v8, type metadata accessor for Proto_Cryptex);
        uint64_t v30 = (uint64_t)v17;
        goto LABEL_19;
      }
    }
    char v31 = type metadata accessor for Proto_Cryptex;
    sub_24A28EF84((uint64_t)v8, type metadata accessor for Proto_Cryptex);
    uint64_t v32 = (uint64_t)v17;
LABEL_21:
    sub_24A28EF84(v32, v31);
    sub_24A28EF84((uint64_t)v21, type metadata accessor for Proto_SealedHash.Entry.OneOf_Info);
    goto LABEL_22;
  }
  if (EnumCaseMultiPayload != 1)
  {
    sub_24A2A0918((uint64_t)v21, (uint64_t)v12, type metadata accessor for Proto_SealedHash.Entry.OneOf_Info);
    if (swift_getEnumCaseMultiPayload() != 2)
    {
      uint64_t v26 = type metadata accessor for Proto_SecureConfig;
      uint64_t v27 = (uint64_t)v12;
      goto LABEL_14;
    }
    uint64_t v28 = v35;
    sub_24A29BF7C(v22, v35, type metadata accessor for Proto_SecureConfig);
    if ((sub_24A1B7D80(*(void *)v12, *((void *)v12 + 1), *(void *)v28, *(void *)(v28 + 8)) & 1) != 0
      && (sub_24A29BFE4(*((void *)v12 + 2), *(void *)(v28 + 16)) & 1) != 0)
    {
      sub_24A2A6E10();
      sub_24A29B624(&qword_2697787D0, MEMORY[0x263F50560]);
      if (sub_24A2A77E0())
      {
        uint64_t v29 = type metadata accessor for Proto_SecureConfig;
        sub_24A28EF84(v28, type metadata accessor for Proto_SecureConfig);
        uint64_t v30 = (uint64_t)v12;
LABEL_19:
        sub_24A28EF84(v30, v29);
        sub_24A28EF84((uint64_t)v21, type metadata accessor for Proto_SealedHash.Entry.OneOf_Info);
        char v25 = 1;
        return v25 & 1;
      }
    }
    char v31 = type metadata accessor for Proto_SecureConfig;
    sub_24A28EF84(v28, type metadata accessor for Proto_SecureConfig);
    uint64_t v32 = (uint64_t)v12;
    goto LABEL_21;
  }
  sub_24A2A0918((uint64_t)v21, (uint64_t)v15, type metadata accessor for Proto_SealedHash.Entry.OneOf_Info);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    uint64_t v26 = type metadata accessor for Proto_Cryptex.Salt;
    uint64_t v27 = (uint64_t)v15;
    goto LABEL_14;
  }
  uint64_t v24 = v36;
  sub_24A29BF7C(v22, v36, type metadata accessor for Proto_Cryptex.Salt);
  sub_24A2A6E10();
  sub_24A29B624(&qword_2697787D0, MEMORY[0x263F50560]);
  char v25 = sub_24A2A77E0();
  sub_24A28EF84(v24, type metadata accessor for Proto_Cryptex.Salt);
  sub_24A28EF84((uint64_t)v15, type metadata accessor for Proto_Cryptex.Salt);
  sub_24A28EF84((uint64_t)v21, type metadata accessor for Proto_SealedHash.Entry.OneOf_Info);
  return v25 & 1;
}

uint64_t sub_24A29F938(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A2A6E10();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v16 - v9;
  if (sub_24A1B7D80(*(void *)a1, *(void *)(a1 + 8), *(void *)a2, *(void *)(a2 + 8)))
  {
    uint64_t v11 = type metadata accessor for Proto_Cryptex(0);
    uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v12(v10, a1 + *(int *)(v11 + 20), v4);
    v12(v8, a2 + *(int *)(v11 + 20), v4);
    sub_24A29B624(&qword_2697787D0, MEMORY[0x263F50560]);
    char v13 = sub_24A2A77E0();
    uint64_t v14 = *(void (**)(char *, uint64_t))(v5 + 8);
    v14(v8, v4);
    v14(v10, v4);
  }
  else
  {
    char v13 = 0;
  }
  return v13 & 1;
}

uint64_t _s16CloudAttestation0B6BundleV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v111 = sub_24A2A6E10();
  uint64_t v103 = *(void *)(v111 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v111);
  uint64_t v102 = (char *)&v94 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v101 = (char *)&v94 - v6;
  uint64_t v120 = type metadata accessor for Proto_TransparencyProofs(0);
  uint64_t v107 = *(void *)(v120 - 8);
  MEMORY[0x270FA5388](v120);
  uint64_t v112 = (char *)&v94 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v106 = __swift_instantiateConcreteTypeFromMangledName(&qword_26977A2A0);
  MEMORY[0x270FA5388](v106);
  uint64_t v110 = (char *)&v94 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174880);
  uint64_t v10 = MEMORY[0x270FA5388](v9 - 8);
  uint64_t v104 = (uint64_t)&v94 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v109 = (uint64_t)&v94 - v13;
  MEMORY[0x270FA5388](v12);
  uint64_t v115 = (uint64_t)&v94 - v14;
  uint64_t v15 = sub_24A2A6DC0();
  uint64_t v113 = *(void *)(v15 - 8);
  uint64_t v114 = v15;
  MEMORY[0x270FA5388](v15);
  int v105 = (char *)&v94 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v118 = __swift_instantiateConcreteTypeFromMangledName(&qword_269779D50);
  MEMORY[0x270FA5388](v118);
  uint64_t v116 = (uint64_t)&v94 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1749E0);
  uint64_t v19 = MEMORY[0x270FA5388](v18 - 8);
  uint64_t v108 = (uint64_t)&v94 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = MEMORY[0x270FA5388](v19);
  uint64_t v119 = (uint64_t)&v94 - v22;
  MEMORY[0x270FA5388](v21);
  uint64_t v24 = (char *)&v94 - v23;
  uint64_t v25 = type metadata accessor for Proto_SealedHashLedger(0);
  uint64_t v117 = *(void *)(v25 - 8);
  MEMORY[0x270FA5388](v25);
  uint64_t v27 = (uint64_t *)((char *)&v94 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_26977A2A8);
  MEMORY[0x270FA5388](v28);
  uint64_t v30 = (char *)&v94 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174800);
  uint64_t v32 = MEMORY[0x270FA5388](v31 - 8);
  uint64_t v34 = (uint64_t *)((char *)&v94 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v35 = MEMORY[0x270FA5388](v32);
  uint64_t v37 = (char *)&v94 - v36;
  MEMORY[0x270FA5388](v35);
  uint64_t v39 = (char *)&v94 - v38;
  if ((sub_24A1B7D80(*(void *)a1, *(void *)(a1 + 8), *(void *)a2, *(void *)(a2 + 8)) & 1) == 0) {
    goto LABEL_10;
  }
  uint64_t v99 = v37;
  uint64_t v100 = v39;
  uint64_t v97 = v27;
  uint64_t v98 = v34;
  uint64_t v96 = v24;
  uint64_t v40 = v120;
  if ((sub_24A1B7D80(*(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a2 + 16), *(void *)(a2 + 24)) & 1) == 0) {
    goto LABEL_10;
  }
  uint64_t v41 = type metadata accessor for Proto_AttestationBundle(0);
  uint64_t v42 = *(int *)(v41 + 32);
  uint64_t v94 = a1;
  uint64_t v43 = (uint64_t)v100;
  sub_24A1B2CAC(a1 + v42, (uint64_t)v100, &qword_26B174800);
  uint64_t v44 = *(int *)(v41 + 32);
  uint64_t v95 = a2;
  uint64_t v45 = (uint64_t)v99;
  sub_24A1B2CAC(a2 + v44, (uint64_t)v99, &qword_26B174800);
  uint64_t v46 = (uint64_t)&v30[*(int *)(v28 + 48)];
  sub_24A1B2CAC(v43, (uint64_t)v30, &qword_26B174800);
  sub_24A1B2CAC(v45, v46, &qword_26B174800);
  uint64_t v47 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v117 + 48);
  if (v47((uint64_t)v30, 1, v25) == 1)
  {
    sub_24A1B2D10(v45, &qword_26B174800);
    sub_24A1B2D10(v43, &qword_26B174800);
    int v48 = v47(v46, 1, v25);
    uint64_t v50 = v118;
    uint64_t v49 = v119;
    if (v48 == 1)
    {
      sub_24A1B2D10((uint64_t)v30, &qword_26B174800);
      goto LABEL_14;
    }
    goto LABEL_8;
  }
  uint64_t v51 = v98;
  sub_24A1B2CAC((uint64_t)v30, (uint64_t)v98, &qword_26B174800);
  int v52 = v47(v46, 1, v25);
  uint64_t v50 = v118;
  uint64_t v49 = v119;
  if (v52 == 1)
  {
    sub_24A1B2D10((uint64_t)v99, &qword_26B174800);
    sub_24A1B2D10((uint64_t)v100, &qword_26B174800);
    sub_24A28EF84((uint64_t)v51, type metadata accessor for Proto_SealedHashLedger);
LABEL_8:
    uint64_t v53 = &qword_26977A2A8;
    uint64_t v54 = (uint64_t)v30;
LABEL_9:
    sub_24A1B2D10(v54, v53);
    goto LABEL_10;
  }
  uint64_t v57 = v46;
  uint64_t v58 = v97;
  sub_24A29BF7C(v57, (uint64_t)v97, type metadata accessor for Proto_SealedHashLedger);
  if ((sub_24A29C1EC(*v51, *v58) & 1) == 0)
  {
    sub_24A28EF84((uint64_t)v58, type metadata accessor for Proto_SealedHashLedger);
    sub_24A1B2D10((uint64_t)v99, &qword_26B174800);
    sub_24A1B2D10((uint64_t)v100, &qword_26B174800);
    sub_24A28EF84((uint64_t)v51, type metadata accessor for Proto_SealedHashLedger);
    uint64_t v54 = (uint64_t)v30;
    uint64_t v53 = &qword_26B174800;
    goto LABEL_9;
  }
  sub_24A29B624(&qword_2697787D0, MEMORY[0x263F50560]);
  char v59 = sub_24A2A77E0();
  sub_24A28EF84((uint64_t)v58, type metadata accessor for Proto_SealedHashLedger);
  sub_24A1B2D10((uint64_t)v99, &qword_26B174800);
  sub_24A1B2D10((uint64_t)v100, &qword_26B174800);
  sub_24A28EF84((uint64_t)v51, type metadata accessor for Proto_SealedHashLedger);
  sub_24A1B2D10((uint64_t)v30, &qword_26B174800);
  if ((v59 & 1) == 0) {
    goto LABEL_10;
  }
LABEL_14:
  uint64_t v60 = v94;
  uint64_t v61 = v95;
  if ((sub_24A1AF644(*(void *)(v94 + 32), *(void *)(v95 + 32)) & 1) == 0) {
    goto LABEL_10;
  }
  uint64_t v62 = (uint64_t)v96;
  sub_24A1B2CAC(v60 + *(int *)(v41 + 36), (uint64_t)v96, &qword_26B1749E0);
  uint64_t v118 = v41;
  sub_24A1B2CAC(v61 + *(int *)(v41 + 36), v49, &qword_26B1749E0);
  uint64_t v63 = *(int *)(v50 + 48);
  uint64_t v64 = v49;
  uint64_t v65 = v116;
  uint64_t v66 = v116 + v63;
  sub_24A1B2CAC(v62, v116, &qword_26B1749E0);
  sub_24A1B2CAC(v49, v66, &qword_26B1749E0);
  uint64_t v67 = v113;
  uint64_t v68 = v114;
  char v69 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v113 + 48);
  if (v69(v65, 1, v114) == 1)
  {
    sub_24A1B2D10(v64, &qword_26B1749E0);
    sub_24A1B2D10(v62, &qword_26B1749E0);
    int v70 = v69(v66, 1, v68);
    uint64_t v71 = (uint64_t)v110;
    uint64_t v72 = (uint64_t)v112;
    uint64_t v73 = v115;
    if (v70 == 1)
    {
      sub_24A1B2D10(v116, &qword_26B1749E0);
      goto LABEL_23;
    }
    goto LABEL_21;
  }
  uint64_t v74 = v108;
  sub_24A1B2CAC(v65, v108, &qword_26B1749E0);
  int v75 = v69(v66, 1, v68);
  uint64_t v72 = (uint64_t)v112;
  uint64_t v76 = v68;
  uint64_t v73 = v115;
  if (v75 == 1)
  {
    sub_24A1B2D10(v119, &qword_26B1749E0);
    sub_24A1B2D10((uint64_t)v96, &qword_26B1749E0);
    (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v74, v76);
LABEL_21:
    uint64_t v53 = &qword_269779D50;
    uint64_t v54 = v116;
    goto LABEL_9;
  }
  uint64_t v77 = v105;
  (*(void (**)(char *, uint64_t, uint64_t))(v67 + 32))(v105, v66, v76);
  sub_24A29B624(&qword_269779D60, MEMORY[0x263F502F0]);
  char v78 = sub_24A2A77E0();
  unint64_t v79 = *(void (**)(char *, uint64_t))(v67 + 8);
  v79(v77, v76);
  sub_24A1B2D10(v119, &qword_26B1749E0);
  sub_24A1B2D10((uint64_t)v96, &qword_26B1749E0);
  v79((char *)v74, v76);
  sub_24A1B2D10(v116, &qword_26B1749E0);
  uint64_t v71 = (uint64_t)v110;
  if ((v78 & 1) == 0) {
    goto LABEL_10;
  }
LABEL_23:
  uint64_t v80 = v118;
  sub_24A1B2CAC(v94 + *(int *)(v118 + 40), v73, &qword_26B174880);
  uint64_t v81 = v109;
  sub_24A1B2CAC(v95 + *(int *)(v80 + 40), v109, &qword_26B174880);
  uint64_t v82 = v71 + *(int *)(v106 + 48);
  sub_24A1B2CAC(v73, v71, &qword_26B174880);
  sub_24A1B2CAC(v81, v82, &qword_26B174880);
  unint64_t v83 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v107 + 48);
  if (v83(v71, 1, v40) == 1)
  {
    sub_24A1B2D10(v81, &qword_26B174880);
    sub_24A1B2D10(v73, &qword_26B174880);
    if (v83(v82, 1, v40) == 1)
    {
      sub_24A1B2D10(v71, &qword_26B174880);
LABEL_30:
      uint64_t v86 = v118;
      uint64_t v87 = v103;
      uint64_t v88 = *(void (**)(char *, uint64_t, uint64_t))(v103 + 16);
      BOOL v89 = v101;
      uint64_t v90 = v111;
      v88(v101, v94 + *(int *)(v118 + 28), v111);
      uint64_t v91 = v95 + *(int *)(v86 + 28);
      uint64_t v92 = v102;
      v88(v102, v91, v90);
      sub_24A29B624(&qword_2697787D0, MEMORY[0x263F50560]);
      char v55 = sub_24A2A77E0();
      uint64_t v93 = *(void (**)(char *, uint64_t))(v87 + 8);
      v93(v92, v90);
      v93(v89, v90);
      return v55 & 1;
    }
    goto LABEL_28;
  }
  uint64_t v84 = v104;
  sub_24A1B2CAC(v71, v104, &qword_26B174880);
  if (v83(v82, 1, v40) == 1)
  {
    sub_24A1B2D10(v109, &qword_26B174880);
    sub_24A1B2D10(v115, &qword_26B174880);
    sub_24A28EF84(v84, type metadata accessor for Proto_TransparencyProofs);
LABEL_28:
    uint64_t v53 = &qword_26977A2A0;
    uint64_t v54 = v71;
    goto LABEL_9;
  }
  sub_24A29BF7C(v82, v72, type metadata accessor for Proto_TransparencyProofs);
  char v85 = sub_24A29E324(v84, v72);
  sub_24A28EF84(v72, type metadata accessor for Proto_TransparencyProofs);
  sub_24A1B2D10(v109, &qword_26B174880);
  sub_24A1B2D10(v115, &qword_26B174880);
  sub_24A28EF84(v84, type metadata accessor for Proto_TransparencyProofs);
  sub_24A1B2D10(v71, &qword_26B174880);
  if (v85) {
    goto LABEL_30;
  }
LABEL_10:
  char v55 = 0;
  return v55 & 1;
}

uint64_t type metadata accessor for Proto_SealedHash.Entry.OneOf_Info(uint64_t a1)
{
  return sub_24A1AE704(a1, (uint64_t *)&unk_26B174668);
}

uint64_t sub_24A2A08B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26977A260);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_24A2A0918(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t sub_24A2A0980()
{
  unint64_t result = qword_26B174508;
  if (!qword_26B174508)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B174508);
  }
  return result;
}

uint64_t *sub_24A2A09D4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v9 = *a2;
      unint64_t v10 = a2[1];
      sub_24A1A52B0(*a2, v10);
      *a1 = v9;
      a1[1] = v10;
      a1[2] = a2[2];
      uint64_t v11 = *(int *)(type metadata accessor for Proto_SecureConfig(0) + 24);
      uint64_t v12 = (char *)a1 + v11;
      uint64_t v13 = (char *)a2 + v11;
      uint64_t v14 = sub_24A2A6E10();
      uint64_t v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16);
      swift_bridgeObjectRetain();
      v15(v12, v13, v14);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v7 = sub_24A2A6E10();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    }
    else
    {
      uint64_t v16 = *a2;
      unint64_t v17 = a2[1];
      sub_24A1A52B0(*a2, v17);
      *a1 = v16;
      a1[1] = v17;
      uint64_t v18 = *(int *)(type metadata accessor for Proto_Cryptex(0) + 20);
      uint64_t v19 = (char *)a1 + v18;
      uint64_t v20 = (char *)a2 + v18;
      uint64_t v21 = sub_24A2A6E10();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 16))(v19, v20, v21);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_24A2A0BCC(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 2)
  {
    sub_24A1A5384(*(void *)a1, *(void *)(a1 + 8));
    swift_bridgeObjectRelease();
    uint64_t v3 = *(int *)(type metadata accessor for Proto_SecureConfig(0) + 24);
LABEL_6:
    a1 += v3;
    goto LABEL_7;
  }
  if (result != 1)
  {
    if (result) {
      return result;
    }
    sub_24A1A5384(*(void *)a1, *(void *)(a1 + 8));
    uint64_t v3 = *(int *)(type metadata accessor for Proto_Cryptex(0) + 20);
    goto LABEL_6;
  }
LABEL_7:
  uint64_t v4 = sub_24A2A6E10();
  int v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);

  return v5(a1, v4);
}

uint64_t *sub_24A2A0C8C(uint64_t *a1, uint64_t *a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v6 = *a2;
    unint64_t v7 = a2[1];
    sub_24A1A52B0(*a2, v7);
    *a1 = v6;
    a1[1] = v7;
    a1[2] = a2[2];
    uint64_t v8 = *(int *)(type metadata accessor for Proto_SecureConfig(0) + 24);
    uint64_t v9 = (char *)a1 + v8;
    unint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = sub_24A2A6E10();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    uint64_t v5 = sub_24A2A6E10();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v5 - 8) + 16))(a1, a2, v5);
  }
  else
  {
    uint64_t v13 = *a2;
    unint64_t v14 = a2[1];
    sub_24A1A52B0(*a2, v14);
    *a1 = v13;
    a1[1] = v14;
    uint64_t v15 = *(int *)(type metadata accessor for Proto_Cryptex(0) + 20);
    uint64_t v16 = (char *)a1 + v15;
    unint64_t v17 = (char *)a2 + v15;
    uint64_t v18 = sub_24A2A6E10();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t *sub_24A2A0E34(uint64_t *a1, uint64_t *a2)
{
  if (a1 != a2)
  {
    sub_24A28EF84((uint64_t)a1, type metadata accessor for Proto_SealedHash.Entry.OneOf_Info);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v6 = *a2;
      unint64_t v7 = a2[1];
      sub_24A1A52B0(*a2, v7);
      *a1 = v6;
      a1[1] = v7;
      a1[2] = a2[2];
      uint64_t v8 = *(int *)(type metadata accessor for Proto_SecureConfig(0) + 24);
      uint64_t v9 = (char *)a1 + v8;
      unint64_t v10 = (char *)a2 + v8;
      uint64_t v11 = sub_24A2A6E10();
      uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
      swift_bridgeObjectRetain();
      v12(v9, v10, v11);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v5 = sub_24A2A6E10();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v5 - 8) + 16))(a1, a2, v5);
    }
    else
    {
      uint64_t v13 = *a2;
      unint64_t v14 = a2[1];
      sub_24A1A52B0(*a2, v14);
      *a1 = v13;
      a1[1] = v14;
      uint64_t v15 = *(int *)(type metadata accessor for Proto_Cryptex(0) + 20);
      uint64_t v16 = (char *)a1 + v15;
      unint64_t v17 = (char *)a2 + v15;
      uint64_t v18 = sub_24A2A6E10();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_24A2A1000(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    uint64_t v6 = *(int *)(type metadata accessor for Proto_SecureConfig(0) + 24);
LABEL_6:
    uint64_t v7 = a1 + v6;
    uint64_t v8 = a2 + v6;
    uint64_t v9 = sub_24A2A6E10();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
    goto LABEL_7;
  }
  if (EnumCaseMultiPayload != 1)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    uint64_t v6 = *(int *)(type metadata accessor for Proto_Cryptex(0) + 20);
    goto LABEL_6;
  }
  uint64_t v5 = sub_24A2A6E10();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a1, a2, v5);
LABEL_7:
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_24A2A1114(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_24A28EF84(a1, type metadata accessor for Proto_SealedHash.Entry.OneOf_Info);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      uint64_t v6 = *(int *)(type metadata accessor for Proto_SecureConfig(0) + 24);
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        uint64_t v5 = sub_24A2A6E10();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a1, a2, v5);
LABEL_8:
        swift_storeEnumTagMultiPayload();
        return a1;
      }
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v6 = *(int *)(type metadata accessor for Proto_Cryptex(0) + 20);
    }
    uint64_t v7 = a1 + v6;
    uint64_t v8 = a2 + v6;
    uint64_t v9 = sub_24A2A6E10();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
    goto LABEL_8;
  }
  return a1;
}

uint64_t sub_24A2A124C()
{
  uint64_t result = type metadata accessor for Proto_Cryptex(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = sub_24A2A6E10();
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for Proto_SecureConfig(319);
      if (v3 <= 0x3F)
      {
        swift_initEnumMetadataMultiPayload();
        return 0;
      }
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Proto_HashAlg()
{
  return &type metadata for Proto_HashAlg;
}

uint64_t *sub_24A2A135C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    uint64_t v7 = a2[1];
    unint64_t v8 = a2[2];
    sub_24A1A52B0(v7, v8);
    v4[1] = v7;
    v4[2] = v8;
    uint64_t v9 = *(int *)(a3 + 24);
    unint64_t v10 = (uint64_t *)((char *)v4 + v9);
    uint64_t v11 = (uint64_t *)((char *)a2 + v9);
    uint64_t v12 = type metadata accessor for Proto_SealedHash.Entry.OneOf_Info(0);
    uint64_t v13 = *(void *)(v12 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174678);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2)
      {
        uint64_t v18 = *v11;
        unint64_t v19 = v11[1];
        sub_24A1A52B0(*v11, v19);
        *unint64_t v10 = v18;
        v10[1] = v19;
        void v10[2] = v11[2];
        uint64_t v20 = *(int *)(type metadata accessor for Proto_SecureConfig(0) + 24);
        uint64_t v34 = (char *)v11 + v20;
        uint64_t v35 = (char *)v10 + v20;
        uint64_t v21 = sub_24A2A6E10();
        uint64_t v33 = *(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 16);
        swift_bridgeObjectRetain();
        v33(v35, v34, v21);
      }
      else if (EnumCaseMultiPayload == 1)
      {
        uint64_t v17 = sub_24A2A6E10();
        (*(void (**)(void *, uint64_t *, uint64_t))(*(void *)(v17 - 8) + 16))(v10, v11, v17);
      }
      else
      {
        uint64_t v22 = *v11;
        unint64_t v23 = v11[1];
        sub_24A1A52B0(*v11, v23);
        *unint64_t v10 = v22;
        v10[1] = v23;
        uint64_t v24 = *(int *)(type metadata accessor for Proto_Cryptex(0) + 20);
        uint64_t v25 = (char *)v10 + v24;
        uint64_t v26 = (char *)v11 + v24;
        uint64_t v27 = sub_24A2A6E10();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 16))(v25, v26, v27);
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    uint64_t v28 = *(int *)(a3 + 28);
    uint64_t v29 = (char *)v4 + v28;
    uint64_t v30 = (char *)a2 + v28;
    uint64_t v31 = sub_24A2A6E10();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v31 - 8) + 16))(v29, v30, v31);
  }
  return v4;
}

uint64_t sub_24A2A1664(uint64_t a1, uint64_t a2)
{
  sub_24A1A5384(*(void *)(a1 + 8), *(void *)(a1 + 16));
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for Proto_SealedHash.Entry.OneOf_Info(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5))
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      sub_24A1A5384(*(void *)v4, *(void *)(v4 + 8));
      swift_bridgeObjectRelease();
      uint64_t v7 = *(int *)(type metadata accessor for Proto_SecureConfig(0) + 24);
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
LABEL_8:
        uint64_t v8 = sub_24A2A6E10();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v4, v8);
        goto LABEL_9;
      }
      if (EnumCaseMultiPayload) {
        goto LABEL_9;
      }
      sub_24A1A5384(*(void *)v4, *(void *)(v4 + 8));
      uint64_t v7 = *(int *)(type metadata accessor for Proto_Cryptex(0) + 20);
    }
    v4 += v7;
    goto LABEL_8;
  }
LABEL_9:
  uint64_t v9 = a1 + *(int *)(a2 + 28);
  uint64_t v10 = sub_24A2A6E10();
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8);

  return v11(v9, v10);
}

uint64_t sub_24A2A17C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  unint64_t v7 = *(void *)(a2 + 16);
  sub_24A1A52B0(v6, v7);
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = v7;
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (uint64_t *)(a2 + v8);
  uint64_t v11 = type metadata accessor for Proto_SealedHash.Entry.OneOf_Info(0);
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174678);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v16 = *v10;
      unint64_t v17 = v10[1];
      sub_24A1A52B0(*v10, v17);
      *uint64_t v9 = v16;
      v9[1] = v17;
      v9[2] = v10[2];
      uint64_t v18 = *(int *)(type metadata accessor for Proto_SecureConfig(0) + 24);
      uint64_t v32 = (char *)v10 + v18;
      uint64_t v33 = (char *)v9 + v18;
      uint64_t v19 = sub_24A2A6E10();
      uint64_t v31 = *(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16);
      swift_bridgeObjectRetain();
      v31(v33, v32, v19);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v15 = sub_24A2A6E10();
      (*(void (**)(void *, uint64_t *, uint64_t))(*(void *)(v15 - 8) + 16))(v9, v10, v15);
    }
    else
    {
      uint64_t v20 = *v10;
      unint64_t v21 = v10[1];
      sub_24A1A52B0(*v10, v21);
      *uint64_t v9 = v20;
      v9[1] = v21;
      uint64_t v22 = *(int *)(type metadata accessor for Proto_Cryptex(0) + 20);
      unint64_t v23 = (char *)v9 + v22;
      uint64_t v24 = (char *)v10 + v22;
      uint64_t v25 = sub_24A2A6E10();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 16))(v23, v24, v25);
    }
    swift_storeEnumTagMultiPayload();
    (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  uint64_t v26 = *(int *)(a3 + 28);
  uint64_t v27 = a1 + v26;
  uint64_t v28 = a2 + v26;
  uint64_t v29 = sub_24A2A6E10();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 16))(v27, v28, v29);
  return a1;
}

uint64_t sub_24A2A1A7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  unint64_t v7 = *(void *)(a2 + 16);
  sub_24A1A52B0(v6, v7);
  uint64_t v8 = *(void *)(a1 + 8);
  unint64_t v9 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = v7;
  sub_24A1A5384(v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (uint64_t *)(a1 + v10);
  uint64_t v12 = (uint64_t *)(a2 + v10);
  uint64_t v13 = type metadata accessor for Proto_SealedHash.Entry.OneOf_Info(0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v14 + 48);
  int v16 = v15(v11, 1, v13);
  int v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (!v17)
    {
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2)
      {
        uint64_t v23 = *v12;
        unint64_t v24 = v12[1];
        sub_24A1A52B0(*v12, v24);
        *uint64_t v11 = v23;
        v11[1] = v24;
        void v11[2] = v12[2];
        uint64_t v25 = *(int *)(type metadata accessor for Proto_SecureConfig(0) + 24);
        uint64_t v51 = (char *)v12 + v25;
        int v52 = (char *)v11 + v25;
        uint64_t v26 = sub_24A2A6E10();
        uint64_t v50 = *(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 16);
        swift_bridgeObjectRetain();
        v50(v52, v51, v26);
      }
      else if (EnumCaseMultiPayload == 1)
      {
        uint64_t v19 = sub_24A2A6E10();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v19 - 8) + 16))(v11, v12, v19);
      }
      else
      {
        uint64_t v27 = *v12;
        unint64_t v28 = v12[1];
        sub_24A1A52B0(*v12, v28);
        *uint64_t v11 = v27;
        v11[1] = v28;
        uint64_t v29 = *(int *)(type metadata accessor for Proto_Cryptex(0) + 20);
        uint64_t v30 = (char *)v11 + v29;
        uint64_t v31 = (char *)v12 + v29;
        uint64_t v32 = sub_24A2A6E10();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v32 - 8) + 16))(v30, v31, v32);
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_17;
    }
LABEL_8:
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174678);
    memcpy(v11, v12, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_17;
  }
  if (v17)
  {
    sub_24A28EF84((uint64_t)v11, type metadata accessor for Proto_SealedHash.Entry.OneOf_Info);
    goto LABEL_8;
  }
  if (a1 != a2)
  {
    sub_24A28EF84((uint64_t)v11, type metadata accessor for Proto_SealedHash.Entry.OneOf_Info);
    int v21 = swift_getEnumCaseMultiPayload();
    if (v21 == 2)
    {
      uint64_t v38 = *v12;
      unint64_t v39 = v12[1];
      sub_24A1A52B0(*v12, v39);
      *uint64_t v11 = v38;
      v11[1] = v39;
      void v11[2] = v12[2];
      uint64_t v40 = *(int *)(type metadata accessor for Proto_SecureConfig(0) + 24);
      uint64_t v41 = (char *)v11 + v40;
      uint64_t v53 = (char *)v12 + v40;
      uint64_t v42 = sub_24A2A6E10();
      uint64_t v43 = *(void (**)(char *, char *, uint64_t))(*(void *)(v42 - 8) + 16);
      swift_bridgeObjectRetain();
      v43(v41, v53, v42);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      if (v21 == 1)
      {
        uint64_t v22 = sub_24A2A6E10();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v22 - 8) + 16))(v11, v12, v22);
      }
      else
      {
        uint64_t v44 = *v12;
        unint64_t v45 = v12[1];
        sub_24A1A52B0(*v12, v45);
        *uint64_t v11 = v44;
        v11[1] = v45;
        uint64_t v46 = *(int *)(type metadata accessor for Proto_Cryptex(0) + 20);
        uint64_t v47 = (char *)v11 + v46;
        int v48 = (char *)v12 + v46;
        uint64_t v49 = sub_24A2A6E10();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v49 - 8) + 16))(v47, v48, v49);
      }
      swift_storeEnumTagMultiPayload();
    }
  }
LABEL_17:
  uint64_t v33 = *(int *)(a3 + 28);
  uint64_t v34 = a1 + v33;
  uint64_t v35 = a2 + v33;
  uint64_t v36 = sub_24A2A6E10();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 24))(v34, v35, v36);
  return a1;
}

uint64_t sub_24A2A1F14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v6 = *(int *)(a3 + 24);
  unint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for Proto_SealedHash.Entry.OneOf_Info(0);
  uint64_t v10 = *(void *)(v9 - 8);
  if (!(*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
      v7[2] = v8[2];
      uint64_t v14 = *(int *)(type metadata accessor for Proto_SecureConfig(0) + 24);
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        uint64_t v13 = sub_24A2A6E10();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v13 - 8) + 32))(v7, v8, v13);
LABEL_9:
        swift_storeEnumTagMultiPayload();
        (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
        goto LABEL_10;
      }
      *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
      uint64_t v14 = *(int *)(type metadata accessor for Proto_Cryptex(0) + 20);
    }
    uint64_t v15 = (char *)v7 + v14;
    int v16 = (char *)v8 + v14;
    uint64_t v17 = sub_24A2A6E10();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 32))(v15, v16, v17);
    goto LABEL_9;
  }
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174678);
  memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
LABEL_10:
  uint64_t v18 = *(int *)(a3 + 28);
  uint64_t v19 = a1 + v18;
  uint64_t v20 = a2 + v18;
  uint64_t v21 = sub_24A2A6E10();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 32))(v19, v20, v21);
  return a1;
}

uint64_t sub_24A2A2148(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = *(void *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  sub_24A1A5384(v6, v7);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  uint64_t v11 = type metadata accessor for Proto_SealedHash.Entry.OneOf_Info(0);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  int v14 = v13(v9, 1, v11);
  int v15 = v13(v10, 1, v11);
  if (v14)
  {
    if (!v15)
    {
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 2)
      {
        *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
        v9[2] = v10[2];
        uint64_t v21 = *(int *)(type metadata accessor for Proto_SecureConfig(0) + 24);
      }
      else
      {
        if (EnumCaseMultiPayload == 1)
        {
          uint64_t v17 = sub_24A2A6E10();
          (*(void (**)(void *, void *, uint64_t))(*(void *)(v17 - 8) + 32))(v9, v10, v17);
LABEL_17:
          swift_storeEnumTagMultiPayload();
          (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
          goto LABEL_18;
        }
        *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
        uint64_t v21 = *(int *)(type metadata accessor for Proto_Cryptex(0) + 20);
      }
      uint64_t v22 = (char *)v9 + v21;
      uint64_t v23 = (char *)v10 + v21;
      uint64_t v24 = sub_24A2A6E10();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 32))(v22, v23, v24);
      goto LABEL_17;
    }
    goto LABEL_8;
  }
  if (v15)
  {
    sub_24A28EF84((uint64_t)v9, type metadata accessor for Proto_SealedHash.Entry.OneOf_Info);
LABEL_8:
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174678);
    memcpy(v9, v10, *(void *)(*(void *)(v18 - 8) + 64));
    goto LABEL_18;
  }
  if (a1 != a2)
  {
    sub_24A28EF84((uint64_t)v9, type metadata accessor for Proto_SealedHash.Entry.OneOf_Info);
    int v19 = swift_getEnumCaseMultiPayload();
    if (v19 == 2)
    {
      *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
      v9[2] = v10[2];
      uint64_t v30 = *(int *)(type metadata accessor for Proto_SecureConfig(0) + 24);
      uint64_t v31 = (char *)v9 + v30;
      uint64_t v32 = (char *)v10 + v30;
      uint64_t v33 = sub_24A2A6E10();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v33 - 8) + 32))(v31, v32, v33);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      if (v19 == 1)
      {
        uint64_t v20 = sub_24A2A6E10();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v20 - 8) + 32))(v9, v10, v20);
      }
      else
      {
        *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
        uint64_t v34 = *(int *)(type metadata accessor for Proto_Cryptex(0) + 20);
        uint64_t v35 = (char *)v9 + v34;
        uint64_t v36 = (char *)v10 + v34;
        uint64_t v37 = sub_24A2A6E10();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 32))(v35, v36, v37);
      }
      swift_storeEnumTagMultiPayload();
    }
  }
LABEL_18:
  uint64_t v25 = *(int *)(a3 + 28);
  uint64_t v26 = a1 + v25;
  uint64_t v27 = a2 + v25;
  uint64_t v28 = sub_24A2A6E10();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 40))(v26, v27, v28);
  return a1;
}

uint64_t sub_24A2A2538(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24A2A254C);
}

uint64_t sub_24A2A254C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 12)
  {
    uint64_t v4 = *(void *)(a1 + 16) >> 60;
    if (((4 * v4) & 0xC) != 0) {
      return 16 - ((4 * v4) & 0xC | (v4 >> 2));
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174678);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 24);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_24A2A6E10();
      int v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 28);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t sub_24A2A2688(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24A2A269C);
}

uint64_t sub_24A2A269C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 12)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
  }
  else
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B174678);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 24);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_24A2A6E10();
      int v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 28);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

void sub_24A2A27D4()
{
  sub_24A295E40(319, &qword_26B174680, (void (*)(uint64_t))type metadata accessor for Proto_SealedHash.Entry.OneOf_Info);
  if (v0 <= 0x3F)
  {
    sub_24A2A6E10();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

ValueMetadata *type metadata accessor for Proto_SealedHash.Entry.Flags()
{
  return &type metadata for Proto_SealedHash.Entry.Flags;
}

uint64_t sub_24A2A28E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24A2A28F4);
}

uint64_t sub_24A2A28F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 12)
  {
    uint64_t v4 = *(void *)(a1 + 8) >> 60;
    if (((4 * v4) & 0xC) != 0) {
      return 16 - ((4 * v4) & 0xC | (v4 >> 2));
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = sub_24A2A6E10();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_24A2A29B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24A2A29C4);
}

void *sub_24A2A29C4(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 12)
  {
    *uint64_t result = 0;
    result[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
  }
  else
  {
    uint64_t v7 = sub_24A2A6E10();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_24A2A2A74()
{
  return sub_24A2A2A80();
}

uint64_t sub_24A2A2A80()
{
  uint64_t result = sub_24A2A6E10();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_24A2A2B10(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A2A6E10();
  uint64_t v5 = **(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);

  return v5(a1, a2, v4);
}

uint64_t sub_24A2A2B7C(uint64_t a1)
{
  uint64_t v2 = sub_24A2A6E10();
  unint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(a1, v2);
}

uint64_t sub_24A2A2BE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A2A6E10();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t sub_24A2A2C44(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A2A6E10();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t sub_24A2A2CA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A2A6E10();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t sub_24A2A2D0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A2A6E10();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t sub_24A2A2D70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24A2A2D84);
}

uint64_t sub_24A2A2D84(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A2A6E10();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_24A2A2DF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24A2A2E04);
}

uint64_t sub_24A2A2E04(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_24A2A6E10();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t sub_24A2A2E74()
{
  uint64_t result = sub_24A2A6E10();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_24A2A2F00(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_24A1A52B0(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    a1[2] = a2[2];
    uint64_t v9 = *(int *)(a3 + 24);
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = sub_24A2A6E10();
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    v13(v10, v11, v12);
  }
  return a1;
}

uint64_t sub_24A2A3004(uint64_t a1, uint64_t a2)
{
  sub_24A1A5384(*(void *)a1, *(void *)(a1 + 8));
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = sub_24A2A6E10();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t *sub_24A2A3088(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_24A1A52B0(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  a1[2] = a2[2];
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = sub_24A2A6E10();
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
  swift_bridgeObjectRetain();
  v12(v9, v10, v11);
  return a1;
}

uint64_t *sub_24A2A313C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_24A1A52B0(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_24A1A5384(v8, v9);
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = sub_24A2A6E10();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

uint64_t sub_24A2A31F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = sub_24A2A6E10();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t *sub_24A2A3278(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_24A1A5384(v6, v7);
  a1[2] = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  uint64_t v8 = *(int *)(a3 + 24);
  unint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = sub_24A2A6E10();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t sub_24A2A3318(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_28Tm);
}

uint64_t sub_24A2A3330(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_29Tm);
}

uint64_t sub_24A2A3348()
{
  return sub_24A2A38CC();
}

void *sub_24A2A3354(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *unint64_t v3 = *a2;
    unint64_t v3 = (void *)(v10 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(void *)a1 = *a2;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    *(void *)(a1 + 16) = a2[2];
    uint64_t v5 = *(int *)(a3 + 24);
    uint64_t v6 = a1 + v5;
    uint64_t v7 = (uint64_t)a2 + v5;
    uint64_t v8 = sub_24A2A6E10();
    unint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16);
    swift_bridgeObjectRetain();
    v9(v6, v7, v8);
  }
  return v3;
}

uint64_t sub_24A2A344C(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = sub_24A2A6E10();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t sub_24A2A34C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = sub_24A2A6E10();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16);
  swift_bridgeObjectRetain();
  v8(v5, v6, v7);
  return a1;
}

uint64_t sub_24A2A356C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v6;
  *(void *)(a1 + 16) = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (uint64_t)a2 + v7;
  uint64_t v10 = sub_24A2A6E10();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t sub_24A2A3610(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = sub_24A2A6E10();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t sub_24A2A369C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = sub_24A2A6E10();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t sub_24A2A3738(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_24A2A374C);
}

uint64_t __swift_get_extra_inhabitant_index_28Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_24A2A6E10();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_24A2A3800(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_24A2A3814);
}

uint64_t __swift_store_extra_inhabitant_index_29Tm(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 16) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_24A2A6E10();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 24);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_24A2A38C0()
{
  return sub_24A2A38CC();
}

uint64_t sub_24A2A38CC()
{
  uint64_t result = sub_24A2A6E10();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_24A2A396C()
{
  unint64_t result = qword_26977A2C0;
  if (!qword_26977A2C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26977A2C0);
  }
  return result;
}

uint64_t sub_24A2A39C0()
{
  return sub_24A231268(&qword_26977A2C8, &qword_26977A2D0);
}

unint64_t sub_24A2A39EC()
{
  unint64_t result = qword_26977A2D8;
  if (!qword_26977A2D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26977A2D8);
  }
  return result;
}

unint64_t sub_24A2A3A44()
{
  unint64_t result = qword_26977A2E0;
  if (!qword_26977A2E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26977A2E0);
  }
  return result;
}

unint64_t sub_24A2A3A9C()
{
  unint64_t result = qword_26B174518;
  if (!qword_26B174518)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B174518);
  }
  return result;
}

uint64_t sub_24A2A3AF0()
{
  return sub_24A231268(&qword_26977A2E8, &qword_26977A2F0);
}

unint64_t sub_24A2A3B1C()
{
  unint64_t result = qword_26B174510;
  if (!qword_26B174510)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B174510);
  }
  return result;
}

unint64_t sub_24A2A3B74()
{
  unint64_t result = qword_26B174520;
  if (!qword_26B174520)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B174520);
  }
  return result;
}

unint64_t sub_24A2A3BC8()
{
  unint64_t result = qword_26977A2F8;
  if (!qword_26977A2F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26977A2F8);
  }
  return result;
}

id SWTransparencyVerifier.init()@<X0>(void *a1@<X8>)
{
  if (MEMORY[0x263F80D48]) {
    id result = objc_msgSend(objc_allocWithZone(MEMORY[0x263F80D48]), sel_initWithApplication_, 0);
  }
  else {
    id result = 0;
  }
  *a1 = result;
  return result;
}

uint64_t sub_24A2A3C70()
{
  uint64_t v1 = sub_24A2A71B0();
  MEMORY[0x270FA5388](v1);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), v0, v1);
  sub_24A2A6628(&qword_26B1749F0, MEMORY[0x263F045C0]);
  uint64_t result = sub_24A2A7960();
  uint64_t v5 = v20;
  uint64_t v6 = v21;
  uint64_t v7 = v20[2];
  if (v21 == v7)
  {
    uint64_t v8 = (void *)MEMORY[0x263F8EE78];
LABEL_3:
    swift_bridgeObjectRelease();
    uint64_t v20 = v8;
    __swift_instantiateConcreteTypeFromMangledName(&qword_26B174A98);
    sub_24A231C40();
    uint64_t v9 = sub_24A2A77C0();
    swift_bridgeObjectRelease();
    return v9;
  }
  else
  {
    if (v21 < v7)
    {
      uint64_t v8 = (void *)MEMORY[0x263F8EE78];
      long long v19 = xmmword_24A2A8A60;
      unint64_t v10 = v21;
      while ((v6 & 0x8000000000000000) == 0)
      {
        if (v10 >= v5[2]) {
          goto LABEL_15;
        }
        char v11 = *((unsigned char *)v5 + v10 + 32);
        __swift_instantiateConcreteTypeFromMangledName(&qword_26B174BA0);
        uint64_t v12 = swift_allocObject();
        *(_OWORD *)(v12 + 16) = v19;
        *(void *)(v12 + 56) = MEMORY[0x263F8E778];
        *(void *)(v12 + 64) = MEMORY[0x263F8E7C0];
        *(unsigned char *)(v12 + 32) = v11;
        uint64_t v13 = sub_24A2A7840();
        uint64_t v15 = v14;
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)sub_24A1DECEC(0, v8[2] + 1, 1, v8);
          uint64_t v8 = (void *)result;
        }
        unint64_t v17 = v8[2];
        unint64_t v16 = v8[3];
        if (v17 >= v16 >> 1)
        {
          uint64_t result = (uint64_t)sub_24A1DECEC((void *)(v16 > 1), v17 + 1, 1, v8);
          uint64_t v8 = (void *)result;
        }
        ++v10;
        v8[2] = v17 + 1;
        uint64_t v18 = &v8[2 * v17];
        v18[4] = v13;
        v18[5] = v15;
        if (v7 == v10) {
          goto LABEL_3;
        }
      }
      __break(1u);
LABEL_15:
      __break(1u);
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_24A2A3F08@<X0>(uint64_t a1@<X8>)
{
  v16[1] = a1;
  v16[5] = *MEMORY[0x263EF8340];
  uint64_t v1 = sub_24A2A7360();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  unint64_t v4 = (char *)v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_24A2A76A0();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24A2A7690();
  type metadata accessor for Release();
  sub_24A2A6628(&qword_26B1748F8, (void (*)(uint64_t))type metadata accessor for Release);
  sub_24A2A7680();
  uint64_t v9 = sub_24A2A7660();
  uint64_t v10 = sub_24A1B9574(v9);
  unint64_t v12 = v11;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  sub_24A2A6628(&qword_26B174A10, MEMORY[0x263F047F8]);
  sub_24A2A71A0();
  switch(v12 >> 62)
  {
    case 1uLL:
      if (v10 >> 32 < (int)v10) {
        __break(1u);
      }
      sub_24A1A52B0(v10, v12);
      sub_24A20C570((int)v10, v10 >> 32);
      break;
    case 2uLL:
      uint64_t v13 = *(void *)(v10 + 16);
      uint64_t v14 = *(void *)(v10 + 24);
      sub_24A1A52B0(v10, v12);
      swift_retain();
      swift_retain();
      sub_24A20C570(v13, v14);
      swift_release();
      swift_release();
      break;
    case 3uLL:
      memset(&v16[2], 0, 14);
      goto LABEL_5;
    default:
      v16[2] = v10;
      LOWORD(v16[3]) = v12;
      BYTE2(v16[3]) = BYTE2(v12);
      BYTE3(v16[3]) = BYTE3(v12);
      BYTE4(v16[3]) = BYTE4(v12);
      BYTE5(v16[3]) = BYTE5(v12);
LABEL_5:
      sub_24A2A7170();
      break;
  }
  sub_24A1A5384(v10, v12);
  sub_24A2A7180();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return sub_24A1A5384(v10, v12);
}

uint64_t SWTransparencyVerifier.verifyExpiringInclusion(of:proofs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[25] = a2;
  v4[26] = a3;
  v4[24] = a1;
  uint64_t v5 = sub_24A2A71B0();
  v4[27] = v5;
  v4[28] = *(void *)(v5 - 8);
  v4[29] = swift_task_alloc();
  v4[30] = type metadata accessor for Release();
  v4[31] = swift_task_alloc();
  v4[32] = swift_task_alloc();
  v4[33] = swift_task_alloc();
  uint64_t v6 = sub_24A2A76A0();
  v4[34] = v6;
  v4[35] = *(void *)(v6 - 8);
  uint64_t v7 = swift_task_alloc();
  uint64_t v8 = *v3;
  v4[36] = v7;
  v4[37] = v8;
  return MEMORY[0x270FA2498](sub_24A2A447C, 0, 0);
}

uint64_t sub_24A2A447C()
{
  uint64_t v1 = (void *)v0[37];
  if (v1)
  {
    type metadata accessor for ATLogProofs(0);
    sub_24A2A6628((unint64_t *)&qword_26B1742B8, (void (*)(uint64_t))type metadata accessor for ATLogProofs);
    id v2 = v1;
    uint64_t v3 = sub_24A2A6FE0();
    unint64_t v5 = v4;
    uint64_t v6 = sub_24A2A6AA0();
    v0[38] = v6;
    sub_24A1A5384(v3, v5);
    sub_24A2A7690();
    sub_24A2A6628(&qword_26B1748F8, (void (*)(uint64_t))type metadata accessor for Release);
    sub_24A2A7680();
    uint64_t v8 = v0[35];
    uint64_t v7 = v0[36];
    uint64_t v9 = v0[34];
    uint64_t v10 = sub_24A2A7660();
    uint64_t v11 = sub_24A1B9574(v10);
    unint64_t v13 = v12;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
    uint64_t v14 = sub_24A2A6AA0();
    v0[39] = v14;
    sub_24A1A5384(v11, v13);
    v0[2] = v0;
    v0[7] = v0 + 18;
    v0[3] = sub_24A2A4D04;
    uint64_t v15 = swift_continuation_init();
    v0[10] = MEMORY[0x263EF8330];
    v0[11] = 0x40000000;
    v0[12] = sub_24A2A6214;
    v0[13] = &block_descriptor;
    v0[14] = v15;
    objc_msgSend(v2, sel_verifyExpiringProofs_for_completion_, v6, v14);
    return MEMORY[0x270FA23F0](v0 + 2);
  }
  else
  {
    sub_24A2A637C();
    swift_allocError();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v16 = (uint64_t (*)(void))v0[1];
    return v16();
  }
}

uint64_t sub_24A2A4D04()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 320) = v1;
  if (v1) {
    id v2 = sub_24A2A5BB0;
  }
  else {
    id v2 = sub_24A2A4E14;
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

uint64_t sub_24A2A4E14()
{
  uint64_t v88 = v0;
  uint64_t v1 = *(void **)(v0 + 144);
  id v2 = (SEL **)(v0 + 168);
  uint64_t v3 = *(void **)(v0 + 304);

  uint64_t v4 = (SEL *)&off_265284000;
  id v5 = objc_msgSend(v1, sel_result);
  if (v5)
  {
    if (v5 == (id)1)
    {
      if (qword_26B174810 != -1) {
        swift_once();
      }
      uint64_t v6 = *(void *)(v0 + 264);
      uint64_t v7 = *(void *)(v0 + 200);
      uint64_t v8 = sub_24A2A7160();
      __swift_project_value_buffer(v8, (uint64_t)qword_26B176988);
      sub_24A2A6410(v7, v6);
      uint64_t v9 = sub_24A2A7140();
      os_log_type_t v10 = sub_24A2A7B30();
      if (os_log_type_enabled(v9, v10))
      {
        uint64_t v11 = *(void *)(v0 + 256);
        uint64_t v12 = *(void *)(v0 + 224);
        uint64_t v13 = *(void *)(v0 + 232);
        uint64_t v77 = *(void *)(v0 + 216);
        os_log_type_t type = v10;
        uint64_t v14 = *(void *)(v0 + 264);
        uint64_t v15 = (uint8_t *)swift_slowAlloc();
        os_log_t log = (os_log_t)swift_slowAlloc();
        uint64_t v85 = (uint64_t)log;
        *(_DWORD *)uint64_t v15 = 136446210;
        sub_24A2A6410(v14, v11);
        sub_24A2A7C60();
        swift_bridgeObjectRelease();
        unint64_t v86 = 0xD000000000000010;
        unint64_t v87 = 0x800000024A2B2B70;
        sub_24A2A3F08(v13);
        sub_24A2A3C70();
        (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v13, v77);
        sub_24A2A78C0();
        swift_bridgeObjectRelease();
        sub_24A2A78C0();
        sub_24A2A6474(v11);
        *(void *)(v0 + 184) = sub_24A1C52A8(0xD000000000000010, 0x800000024A2B2B70, &v85);
        sub_24A2A7B70();
        swift_bridgeObjectRelease();
        sub_24A2A6474(v14);
        _os_log_impl(&dword_24A19F000, v9, type, "Invalid transparency proof for: %{public}s", v15, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x24C5C00A0](log, -1, -1);
        MEMORY[0x24C5C00A0](v15, -1, -1);
      }
      else
      {
        sub_24A2A6474(*(void *)(v0 + 264));
      }

      sub_24A1D4614();
      uint64_t v41 = (void *)swift_allocError();
      char v42 = 4;
      *(void *)uint64_t v40 = 4;
    }
    else
    {
      if (qword_26B174810 != -1) {
        swift_once();
      }
      uint64_t v35 = sub_24A2A7160();
      __swift_project_value_buffer(v35, (uint64_t)qword_26B176988);
      uint64_t v36 = v1;
      uint64_t v37 = sub_24A2A7140();
      os_log_type_t v38 = sub_24A2A7B30();
      if (os_log_type_enabled(v37, v38))
      {
        unint64_t v39 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)unint64_t v39 = 134349056;
        id v2 = (SEL **)(v39 + 12);
        *(void *)(v0 + 160) = [v36 result];
        uint64_t v4 = (SEL *)&off_265284000;
        sub_24A2A7B70();

        _os_log_impl(&dword_24A19F000, v37, v38, "Unknown transparency proof validation result: %{public}lu", v39, 0xCu);
        MEMORY[0x24C5C00A0](v39, -1, -1);
      }
      else
      {

        uint64_t v37 = v36;
      }

      unint64_t v46 = (unint64_t)[v36 v4[94]];
      if ((v46 & 0x8000000000000000) != 0)
      {
        __break(1u);
        goto LABEL_52;
      }
      unint64_t v47 = v46;
      sub_24A1D4614();
      uint64_t v41 = (void *)swift_allocError();
      *(void *)uint64_t v40 = v47;
      char v42 = 1;
    }
    *(unsigned char *)(v40 + 8) = v42;
    swift_willThrow();

    *(void *)(v0 + 152) = v41;
    id v48 = v41;
    __swift_instantiateConcreteTypeFromMangledName(&qword_2697789C0);
    sub_24A2A63D0();
    if (!swift_dynamicCast())
    {
LABEL_41:
      uint64_t v71 = *(void **)(v0 + 296);

      sub_24A1D4614();
      swift_allocError();
      *(void *)uint64_t v72 = v41;
      *(unsigned char *)(v72 + 8) = 2;
      swift_willThrow();

LABEL_47:
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      unint64_t v45 = *(uint64_t (**)(void))(v0 + 8);
      goto LABEL_48;
    }
    id v2 = (SEL **)(v0 + 136);
    uint64_t v4 = (SEL *)*(id *)(v0 + 120);
    id v49 = [(SEL *)v4 domain];
    uint64_t v50 = sub_24A2A7800();
    uint64_t v52 = v51;

    if (v50 == 0xD00000000000001CLL && v52 == 0x800000024A2B45C0)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v53 = sub_24A2A7E40();
      swift_bridgeObjectRelease();
      if ((v53 & 1) == 0) {
        goto LABEL_31;
      }
    }
    if ([(SEL *)v4 code] == (id)5)
    {

      if (qword_26B174810 == -1)
      {
LABEL_29:
        uint64_t v54 = sub_24A2A7160();
        __swift_project_value_buffer(v54, (uint64_t)qword_26B176988);
        char v55 = v4;
        int64_t v56 = sub_24A2A7140();
        os_log_type_t v57 = sub_24A2A7B30();
        if (os_log_type_enabled(v56, v57))
        {
          uint64_t v58 = (uint8_t *)swift_slowAlloc();
          uint64_t v84 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v58 = 138543362;
          *id v2 = v55;
          char v59 = v55;
          sub_24A2A7B70();
          *uint64_t v84 = v55;

          _os_log_impl(&dword_24A19F000, v56, v57, "Inclusion proof has expired: %{public}@", v58, 0xCu);
          __swift_instantiateConcreteTypeFromMangledName(&qword_269778BB8);
          swift_arrayDestroy();
          MEMORY[0x24C5C00A0](v84, -1, -1);
          MEMORY[0x24C5C00A0](v58, -1, -1);
        }
        else
        {

          int64_t v56 = v55;
        }
        uint64_t v73 = *(void **)(v0 + 296);

        sub_24A1D4614();
        swift_allocError();
        *(void *)uint64_t v74 = 7;
        *(unsigned char *)(v74 + 8) = 4;
LABEL_46:
        swift_willThrow();

        goto LABEL_47;
      }
LABEL_52:
      swift_once();
      goto LABEL_29;
    }
LABEL_31:

    id v60 = [(SEL *)v4 domain];
    uint64_t v61 = sub_24A2A7800();
    uint64_t v63 = v62;

    if (v61 == 0xD00000000000001DLL && v63 == 0x800000024A2B45E0)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v64 = sub_24A2A7E40();
      swift_bridgeObjectRelease();
      if ((v64 & 1) == 0)
      {
LABEL_40:

        goto LABEL_41;
      }
    }
    if ([(SEL *)v4 code] == (id)7)
    {

      if (qword_26B174810 != -1) {
        swift_once();
      }
      uint64_t v65 = sub_24A2A7160();
      __swift_project_value_buffer(v65, (uint64_t)qword_26B176988);
      char v55 = v4;
      uint64_t v66 = sub_24A2A7140();
      os_log_type_t v67 = sub_24A2A7B30();
      if (os_log_type_enabled(v66, v67))
      {
        uint64_t v68 = (uint8_t *)swift_slowAlloc();
        char v69 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v68 = 138543362;
        *(void *)(v0 + 128) = v55;
        int v70 = v55;
        sub_24A2A7B70();
        *char v69 = v55;

        _os_log_impl(&dword_24A19F000, v66, v67, "Inclusion proof verification failed: %{public}@", v68, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&qword_269778BB8);
        swift_arrayDestroy();
        MEMORY[0x24C5C00A0](v69, -1, -1);
        MEMORY[0x24C5C00A0](v68, -1, -1);
      }
      else
      {

        uint64_t v66 = v55;
      }
      uint64_t v73 = *(void **)(v0 + 296);

      sub_24A1D4614();
      swift_allocError();
      *(void *)uint64_t v75 = 4;
      *(unsigned char *)(v75 + 8) = 4;
      goto LABEL_46;
    }
    goto LABEL_40;
  }
  if (qword_26B174810 != -1) {
    swift_once();
  }
  uint64_t v16 = *(void *)(v0 + 248);
  uint64_t v17 = *(void *)(v0 + 200);
  uint64_t v18 = sub_24A2A7160();
  __swift_project_value_buffer(v18, (uint64_t)qword_26B176988);
  sub_24A2A6410(v17, v16);
  id v19 = v1;
  uint64_t v20 = sub_24A2A7140();
  os_log_type_t v21 = sub_24A2A7B10();
  if (os_log_type_enabled(v20, v21))
  {
    os_log_type_t v83 = v21;
    uint64_t v23 = *(void *)(v0 + 248);
    uint64_t v22 = *(void *)(v0 + 256);
    uint64_t v24 = *(void *)(v0 + 224);
    uint64_t v25 = *(void *)(v0 + 232);
    uint64_t v78 = *(void *)(v0 + 216);
    uint64_t v26 = swift_slowAlloc();
    uint64_t typea = swift_slowAlloc();
    uint64_t v85 = typea;
    *(_DWORD *)uint64_t v26 = 136446466;
    sub_24A2A6410(v23, v22);
    os_log_t loga = v20;
    sub_24A2A7C60();
    swift_bridgeObjectRelease();
    unint64_t v86 = 0xD000000000000010;
    unint64_t v87 = 0x800000024A2B2B70;
    sub_24A2A3F08(v25);
    sub_24A2A3C70();
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v25, v78);
    sub_24A2A78C0();
    swift_bridgeObjectRelease();
    sub_24A2A78C0();
    sub_24A2A6474(v22);
    *(void *)(v0 + 168) = sub_24A1C52A8(0xD000000000000010, 0x800000024A2B2B70, &v85);
    sub_24A2A7B70();
    swift_bridgeObjectRelease();
    sub_24A2A6474(v23);
    *(_WORD *)(v26 + 12) = 2082;
    uint64_t v27 = sub_24A2A6BC0();
    uint64_t v28 = *(void *)(v27 - 8);
    uint64_t v29 = swift_task_alloc();
    id v30 = objc_msgSend(v19, sel_expiry);
    sub_24A2A6BA0();

    sub_24A1CFCD0();
    uint64_t v31 = sub_24A2A7E30();
    unint64_t v33 = v32;
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v29, v27);
    swift_task_dealloc();
    *(void *)(v0 + 176) = sub_24A1C52A8(v31, v33, &v85);
    sub_24A2A7B70();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_24A19F000, loga, v83, "Valid transparency proof for: %{public}s (expires %{public}s", (uint8_t *)v26, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x24C5C00A0](typea, -1, -1);
    MEMORY[0x24C5C00A0](v26, -1, -1);

    uint64_t v34 = (uint64_t)&off_265284000;
  }
  else
  {
    sub_24A2A6474(*(void *)(v0 + 248));

    uint64_t v34 = 0x1F722B000;
  }
  uint64_t v43 = *(void **)(v0 + 296);
  id v44 = [v19 *(SEL *)(v34 + 760)];
  sub_24A2A6BA0();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v45 = *(uint64_t (**)(void))(v0 + 8);
LABEL_48:
  return v45();
}

uint64_t sub_24A2A5BB0()
{
  uint64_t v1 = *(void **)(v0 + 312);
  id v2 = *(void **)(v0 + 304);
  swift_willThrow();

  uint64_t v3 = *(void **)(v0 + 320);
  *(void *)(v0 + 152) = v3;
  id v4 = v3;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2697789C0);
  sub_24A2A63D0();
  if (!swift_dynamicCast()) {
    goto LABEL_21;
  }
  id v5 = *(id *)(v0 + 120);
  id v6 = objc_msgSend(v5, sel_domain);
  uint64_t v7 = sub_24A2A7800();
  uint64_t v9 = v8;

  if (v7 == 0xD00000000000001CLL && v9 == 0x800000024A2B45C0)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v10 = sub_24A2A7E40();
    swift_bridgeObjectRelease();
    if ((v10 & 1) == 0)
    {
LABEL_11:

      id v18 = objc_msgSend(v5, sel_domain);
      uint64_t v19 = sub_24A2A7800();
      uint64_t v21 = v20;

      if (v19 == 0xD00000000000001DLL && v21 == 0x800000024A2B45E0)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        char v22 = sub_24A2A7E40();
        swift_bridgeObjectRelease();
        if ((v22 & 1) == 0)
        {
LABEL_20:

LABEL_21:
          uint64_t v29 = *(void **)(v0 + 296);

          sub_24A1D4614();
          swift_allocError();
          *(void *)uint64_t v30 = v3;
          *(unsigned char *)(v30 + 8) = 2;
          swift_willThrow();

          goto LABEL_27;
        }
      }
      if (objc_msgSend(v5, sel_code) == (id)7)
      {

        if (qword_26B174810 != -1) {
          swift_once();
        }
        uint64_t v23 = sub_24A2A7160();
        __swift_project_value_buffer(v23, (uint64_t)qword_26B176988);
        uint64_t v12 = v5;
        uint64_t v24 = sub_24A2A7140();
        os_log_type_t v25 = sub_24A2A7B30();
        if (os_log_type_enabled(v24, v25))
        {
          uint64_t v26 = (uint8_t *)swift_slowAlloc();
          uint64_t v27 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v26 = 138543362;
          *(void *)(v0 + 128) = v12;
          uint64_t v28 = v12;
          sub_24A2A7B70();
          *uint64_t v27 = v12;

          _os_log_impl(&dword_24A19F000, v24, v25, "Inclusion proof verification failed: %{public}@", v26, 0xCu);
          __swift_instantiateConcreteTypeFromMangledName(&qword_269778BB8);
          swift_arrayDestroy();
          MEMORY[0x24C5C00A0](v27, -1, -1);
          MEMORY[0x24C5C00A0](v26, -1, -1);
        }
        else
        {

          uint64_t v24 = v12;
        }
        uint64_t v31 = *(void **)(v0 + 296);

        sub_24A1D4614();
        swift_allocError();
        *(void *)uint64_t v33 = 4;
        *(unsigned char *)(v33 + 8) = 4;
        goto LABEL_26;
      }
      goto LABEL_20;
    }
  }
  if (objc_msgSend(v5, sel_code) != (id)5) {
    goto LABEL_11;
  }

  if (qword_26B174810 != -1) {
    swift_once();
  }
  uint64_t v11 = sub_24A2A7160();
  __swift_project_value_buffer(v11, (uint64_t)qword_26B176988);
  uint64_t v12 = v5;
  uint64_t v13 = sub_24A2A7140();
  os_log_type_t v14 = sub_24A2A7B30();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v16 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 138543362;
    *(void *)(v0 + 136) = v12;
    uint64_t v17 = v12;
    sub_24A2A7B70();
    *uint64_t v16 = v12;

    _os_log_impl(&dword_24A19F000, v13, v14, "Inclusion proof has expired: %{public}@", v15, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&qword_269778BB8);
    swift_arrayDestroy();
    MEMORY[0x24C5C00A0](v16, -1, -1);
    MEMORY[0x24C5C00A0](v15, -1, -1);
  }
  else
  {

    uint64_t v13 = v12;
  }
  uint64_t v31 = *(void **)(v0 + 296);

  sub_24A1D4614();
  swift_allocError();
  *(void *)uint64_t v32 = 7;
  *(unsigned char *)(v32 + 8) = 4;
LABEL_26:
  swift_willThrow();

LABEL_27:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v34 = *(uint64_t (**)(void))(v0 + 8);
  return v34();
}

uint64_t sub_24A2A6190()
{
  uint64_t v0 = sub_24A2A7160();
  __swift_allocate_value_buffer(v0, qword_26B176988);
  __swift_project_value_buffer(v0, (uint64_t)qword_26B176988);
  return sub_24A2A7150();
}

uint64_t sub_24A2A6214(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2697789C0);
    uint64_t v5 = swift_allocError();
    *id v6 = a3;
    id v7 = a3;
    return MEMORY[0x270FA2410](v3, v5);
  }
  else
  {
    **(void **)(*(void *)(v3 + 64) + 40) = a2;
    id v8 = a2;
    return MEMORY[0x270FA2408](v3);
  }
}

uint64_t sub_24A2A62CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *id v7 = v3;
  v7[1] = sub_24A1C50FC;
  return SWTransparencyVerifier.verifyExpiringInclusion(of:proofs:)(a1, a2, a3);
}

unint64_t sub_24A2A637C()
{
  unint64_t result = qword_26977A308;
  if (!qword_26977A308)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26977A308);
  }
  return result;
}

unint64_t sub_24A2A63D0()
{
  unint64_t result = qword_26977A310;
  if (!qword_26977A310)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_26977A310);
  }
  return result;
}

uint64_t sub_24A2A6410(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Release();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_24A2A6474(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Release();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void **initializeBufferWithCopyOfBuffer for SWTransparencyVerifier(void **a1, void **a2)
{
  uint64_t v3 = *a2;
  *a1 = *a2;
  id v4 = v3;
  return a1;
}

void **assignWithCopy for SWTransparencyVerifier(void **a1, void **a2)
{
  uint64_t v3 = *a1;
  id v4 = *a2;
  *a1 = *a2;
  id v5 = v4;

  return a1;
}

void **assignWithTake for SWTransparencyVerifier(void **a1, void **a2)
{
  uint64_t v3 = *a1;
  *a1 = *a2;

  return a1;
}

uint64_t getEnumTagSinglePayload for SWTransparencyVerifier(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SWTransparencyVerifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SWTransparencyVerifier()
{
  return &type metadata for SWTransparencyVerifier;
}

uint64_t sub_24A2A6628(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *_s5ErrorOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x24A2A6710);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *_s5ErrorOMa_0()
{
  return &_s5ErrorON_0;
}

unint64_t sub_24A2A674C()
{
  return 0xD00000000000002ELL;
}

unint64_t sub_24A2A676C()
{
  unint64_t result = qword_26977A320;
  if (!qword_26977A320)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26977A320);
  }
  return result;
}

uint64_t sub_24A2A67C0()
{
  return MEMORY[0x270EEDBB8]();
}

uint64_t sub_24A2A67D0()
{
  return MEMORY[0x270EEDC58]();
}

uint64_t sub_24A2A67E0()
{
  return MEMORY[0x270EEDC98]();
}

uint64_t sub_24A2A67F0()
{
  return MEMORY[0x270EEDCA8]();
}

uint64_t sub_24A2A6800()
{
  return MEMORY[0x270EEDCB0]();
}

uint64_t sub_24A2A6810()
{
  return MEMORY[0x270EEDDD8]();
}

uint64_t sub_24A2A6820()
{
  return MEMORY[0x270EEDE08]();
}

uint64_t sub_24A2A6830()
{
  return MEMORY[0x270EEDE20]();
}

uint64_t sub_24A2A6840()
{
  return MEMORY[0x270EEDE30]();
}

uint64_t sub_24A2A6850()
{
  return MEMORY[0x270EEDE40]();
}

uint64_t sub_24A2A6860()
{
  return MEMORY[0x270EEDE50]();
}

uint64_t sub_24A2A6870()
{
  return MEMORY[0x270EEDE68]();
}

uint64_t sub_24A2A6880()
{
  return MEMORY[0x270EEDEF0]();
}

uint64_t sub_24A2A6890()
{
  return MEMORY[0x270EEDF28]();
}

uint64_t sub_24A2A68A0()
{
  return MEMORY[0x270EEDF40]();
}

uint64_t sub_24A2A68B0()
{
  return MEMORY[0x270EEE448]();
}

uint64_t sub_24A2A68C0()
{
  return MEMORY[0x270EEE620]();
}

uint64_t sub_24A2A68D0()
{
  return MEMORY[0x270EEE630]();
}

uint64_t sub_24A2A68E0()
{
  return MEMORY[0x270EEE640]();
}

uint64_t sub_24A2A68F0()
{
  return MEMORY[0x270EEE650]();
}

uint64_t sub_24A2A6900()
{
  return MEMORY[0x270EEE660]();
}

uint64_t sub_24A2A6910()
{
  return MEMORY[0x270EEE668]();
}

uint64_t sub_24A2A6920()
{
  return MEMORY[0x270EEE690]();
}

uint64_t sub_24A2A6930()
{
  return MEMORY[0x270EEE918]();
}

uint64_t sub_24A2A6940()
{
  return MEMORY[0x270EEE928]();
}

uint64_t sub_24A2A6950()
{
  return MEMORY[0x270EEE948]();
}

uint64_t sub_24A2A6960()
{
  return MEMORY[0x270EEEA58]();
}

uint64_t sub_24A2A6970()
{
  return MEMORY[0x270EEF838]();
}

uint64_t sub_24A2A6980()
{
  return MEMORY[0x270EEFC18]();
}

uint64_t sub_24A2A6990()
{
  return MEMORY[0x270EEFCA8]();
}

uint64_t sub_24A2A69A0()
{
  return MEMORY[0x270EEFD20]();
}

uint64_t sub_24A2A69B0()
{
  return MEMORY[0x270EEFF08]();
}

uint64_t sub_24A2A69C0()
{
  return MEMORY[0x270EEFF48]();
}

uint64_t sub_24A2A69D0()
{
  return MEMORY[0x270EEFF50]();
}

uint64_t sub_24A2A69E0()
{
  return MEMORY[0x270EEFF70]();
}

uint64_t sub_24A2A69F0()
{
  return MEMORY[0x270EEFFA8]();
}

uint64_t sub_24A2A6A00()
{
  return MEMORY[0x270EEFFD0]();
}

uint64_t sub_24A2A6A10()
{
  return MEMORY[0x270EEFFF8]();
}

uint64_t sub_24A2A6A20()
{
  return MEMORY[0x270EF0040]();
}

uint64_t sub_24A2A6A30()
{
  return MEMORY[0x270EF0058]();
}

uint64_t sub_24A2A6A40()
{
  return MEMORY[0x270EF0068]();
}

uint64_t sub_24A2A6A50()
{
  return MEMORY[0x270EF0080]();
}

uint64_t sub_24A2A6A60()
{
  return MEMORY[0x270EF0088]();
}

uint64_t sub_24A2A6A70()
{
  return MEMORY[0x270EF00B8]();
}

uint64_t sub_24A2A6A80()
{
  return MEMORY[0x270EF00C8]();
}

uint64_t sub_24A2A6A90()
{
  return MEMORY[0x270EF0100]();
}

uint64_t sub_24A2A6AA0()
{
  return MEMORY[0x270EF0128]();
}

uint64_t sub_24A2A6AB0()
{
  return MEMORY[0x270EF0138]();
}

uint64_t sub_24A2A6AC0()
{
  return MEMORY[0x270EF0160]();
}

uint64_t sub_24A2A6AD0()
{
  return MEMORY[0x270EF0170]();
}

uint64_t sub_24A2A6AE0()
{
  return MEMORY[0x270EF0188]();
}

uint64_t sub_24A2A6AF0()
{
  return MEMORY[0x270EF01C8]();
}

uint64_t sub_24A2A6B00()
{
  return MEMORY[0x270EF0230]();
}

uint64_t sub_24A2A6B10()
{
  return MEMORY[0x270EF0240]();
}

uint64_t sub_24A2A6B20()
{
  return MEMORY[0x270EF0298]();
}

uint64_t sub_24A2A6B30()
{
  return MEMORY[0x270EF02A0]();
}

uint64_t sub_24A2A6B40()
{
  return MEMORY[0x270EF0798]();
}

uint64_t sub_24A2A6B50()
{
  return MEMORY[0x270EF0990]();
}

uint64_t sub_24A2A6B60()
{
  return MEMORY[0x270EF09A0]();
}

uint64_t sub_24A2A6B70()
{
  return MEMORY[0x270EF09B0]();
}

uint64_t sub_24A2A6B80()
{
  return MEMORY[0x270EF09D0]();
}

uint64_t sub_24A2A6B90()
{
  return MEMORY[0x270EF0AE8]();
}

uint64_t sub_24A2A6BA0()
{
  return MEMORY[0x270EF0BB0]();
}

uint64_t sub_24A2A6BB0()
{
  return MEMORY[0x270EF0BC0]();
}

uint64_t sub_24A2A6BC0()
{
  return MEMORY[0x270EF0C38]();
}

uint64_t sub_24A2A6BD0()
{
  return MEMORY[0x270EF0C50]();
}

uint64_t sub_24A2A6BE0()
{
  return MEMORY[0x270EF0C60]();
}

uint64_t sub_24A2A6BF0()
{
  return MEMORY[0x270EF0CE8]();
}

uint64_t sub_24A2A6C00()
{
  return MEMORY[0x270EF0D10]();
}

uint64_t sub_24A2A6C10()
{
  return MEMORY[0x270F28690]();
}

uint64_t sub_24A2A6C20()
{
  return MEMORY[0x270F0E340]();
}

uint64_t sub_24A2A6C30()
{
  return MEMORY[0x270F0E348]();
}

uint64_t sub_24A2A6C40()
{
  return MEMORY[0x270F0E350]();
}

uint64_t sub_24A2A6C50()
{
  return MEMORY[0x270F0E358]();
}

uint64_t sub_24A2A6C60()
{
  return MEMORY[0x270F0E360]();
}

uint64_t sub_24A2A6C70()
{
  return MEMORY[0x270F0E368]();
}

uint64_t sub_24A2A6C80()
{
  return MEMORY[0x270FA06B0]();
}

uint64_t sub_24A2A6C90()
{
  return MEMORY[0x270FA06C0]();
}

uint64_t sub_24A2A6CA0()
{
  return MEMORY[0x270FA06D0]();
}

uint64_t sub_24A2A6CB0()
{
  return MEMORY[0x270EFD2A8]();
}

uint64_t sub_24A2A6CC0()
{
  return MEMORY[0x270EFD2B0]();
}

uint64_t sub_24A2A6CD0()
{
  return MEMORY[0x270EFD2B8]();
}

uint64_t sub_24A2A6CE0()
{
  return MEMORY[0x270EFD2C0]();
}

uint64_t sub_24A2A6CF0()
{
  return MEMORY[0x270EFD2C8]();
}

uint64_t sub_24A2A6D00()
{
  return MEMORY[0x270EFD2D0]();
}

uint64_t sub_24A2A6D10()
{
  return MEMORY[0x270EFD2D8]();
}

uint64_t sub_24A2A6D20()
{
  return MEMORY[0x270EFD2E0]();
}

uint64_t sub_24A2A6D30()
{
  return MEMORY[0x270EFD2E8]();
}

uint64_t sub_24A2A6D40()
{
  return MEMORY[0x270EFD2F0]();
}

uint64_t sub_24A2A6D50()
{
  return MEMORY[0x270EFD2F8]();
}

uint64_t sub_24A2A6D60()
{
  return MEMORY[0x270F8C5A8]();
}

uint64_t sub_24A2A6D70()
{
  return MEMORY[0x270F8C5B0]();
}

uint64_t sub_24A2A6D80()
{
  return MEMORY[0x270F8C5B8]();
}

uint64_t sub_24A2A6D90()
{
  return MEMORY[0x270F44678]();
}

uint64_t sub_24A2A6DA0()
{
  return MEMORY[0x270F44680]();
}

uint64_t sub_24A2A6DB0()
{
  return MEMORY[0x270F44698]();
}

uint64_t sub_24A2A6DC0()
{
  return MEMORY[0x270F446A0]();
}

uint64_t sub_24A2A6DD0()
{
  return MEMORY[0x270F449B8]();
}

uint64_t sub_24A2A6DE0()
{
  return MEMORY[0x270F44A00]();
}

uint64_t sub_24A2A6DF0()
{
  return MEMORY[0x270F44A18]();
}

uint64_t sub_24A2A6E00()
{
  return MEMORY[0x270F44A20]();
}

uint64_t sub_24A2A6E10()
{
  return MEMORY[0x270F44A28]();
}

uint64_t sub_24A2A6E20()
{
  return MEMORY[0x270F44A78]();
}

uint64_t sub_24A2A6E30()
{
  return MEMORY[0x270F44A80]();
}

uint64_t sub_24A2A6E40()
{
  return MEMORY[0x270F44A90]();
}

uint64_t sub_24A2A6E50()
{
  return MEMORY[0x270F44A98]();
}

uint64_t sub_24A2A6E60()
{
  return MEMORY[0x270F44AA8]();
}

uint64_t sub_24A2A6E70()
{
  return MEMORY[0x270F44AB0]();
}

uint64_t sub_24A2A6E80()
{
  return MEMORY[0x270F44AD8]();
}

uint64_t sub_24A2A6EB0()
{
  return MEMORY[0x270F44B00]();
}

uint64_t sub_24A2A6EC0()
{
  return MEMORY[0x270F44B08]();
}

uint64_t sub_24A2A6ED0()
{
  return MEMORY[0x270F44B10]();
}

uint64_t sub_24A2A6EE0()
{
  return MEMORY[0x270F44B20]();
}

uint64_t sub_24A2A6EF0()
{
  return MEMORY[0x270F44B30]();
}

uint64_t sub_24A2A6F00()
{
  return MEMORY[0x270F44B40]();
}

uint64_t sub_24A2A6F10()
{
  return MEMORY[0x270F44B50]();
}

uint64_t sub_24A2A6F20()
{
  return MEMORY[0x270F44B58]();
}

uint64_t sub_24A2A6F30()
{
  return MEMORY[0x270F44B78]();
}

uint64_t sub_24A2A6F40()
{
  return MEMORY[0x270F44B80]();
}

uint64_t sub_24A2A6F50()
{
  return MEMORY[0x270F44BA0]();
}

uint64_t sub_24A2A6F60()
{
  return MEMORY[0x270F44BC0]();
}

uint64_t sub_24A2A6F70()
{
  return MEMORY[0x270F44BF8]();
}

uint64_t sub_24A2A6F80()
{
  return MEMORY[0x270F44C18]();
}

uint64_t sub_24A2A6F90()
{
  return MEMORY[0x270F44C20]();
}

uint64_t sub_24A2A6FA0()
{
  return MEMORY[0x270F44C38]();
}

uint64_t sub_24A2A6FB0()
{
  return MEMORY[0x270F44C70]();
}

uint64_t sub_24A2A6FC0()
{
  return MEMORY[0x270F44C78]();
}

uint64_t sub_24A2A6FD0()
{
  return MEMORY[0x270F44C98]();
}

uint64_t sub_24A2A6FE0()
{
  return MEMORY[0x270F44CA8]();
}

uint64_t sub_24A2A6FF0()
{
  return MEMORY[0x270F44CB8]();
}

uint64_t sub_24A2A7010()
{
  return MEMORY[0x270F44CD8]();
}

uint64_t sub_24A2A7020()
{
  return MEMORY[0x270F44CE0]();
}

uint64_t sub_24A2A7030()
{
  return MEMORY[0x270F44D00]();
}

uint64_t sub_24A2A7040()
{
  return MEMORY[0x270F44D08]();
}

uint64_t sub_24A2A7050()
{
  return MEMORY[0x270F44D20]();
}

uint64_t sub_24A2A7060()
{
  return MEMORY[0x270F44D60]();
}

uint64_t sub_24A2A7070()
{
  return MEMORY[0x270F44D68]();
}

uint64_t sub_24A2A7080()
{
  return MEMORY[0x270F44D70]();
}

uint64_t sub_24A2A7090()
{
  return MEMORY[0x270F44D88]();
}

uint64_t sub_24A2A70A0()
{
  return MEMORY[0x270F44D98]();
}

uint64_t sub_24A2A70B0()
{
  return MEMORY[0x270F44DB0]();
}

uint64_t sub_24A2A70C0()
{
  return MEMORY[0x270F44DD8]();
}

uint64_t sub_24A2A70D0()
{
  return MEMORY[0x270F44DE8]();
}

uint64_t sub_24A2A70E0()
{
  return MEMORY[0x270F44DF0]();
}

uint64_t sub_24A2A70F0()
{
  return MEMORY[0x270F44E00]();
}

uint64_t sub_24A2A7100()
{
  return MEMORY[0x270F44E10]();
}

uint64_t sub_24A2A7110()
{
  return MEMORY[0x270F44E18]();
}

uint64_t sub_24A2A7120()
{
  return MEMORY[0x270F44E20]();
}

uint64_t sub_24A2A7130()
{
  return MEMORY[0x270F44E28]();
}

uint64_t sub_24A2A7140()
{
  return MEMORY[0x270FA2E00]();
}

uint64_t sub_24A2A7150()
{
  return MEMORY[0x270FA2E08]();
}

uint64_t sub_24A2A7160()
{
  return MEMORY[0x270FA2E20]();
}

uint64_t sub_24A2A7170()
{
  return MEMORY[0x270EEAA78]();
}

uint64_t sub_24A2A7180()
{
  return MEMORY[0x270EEAA80]();
}

uint64_t sub_24A2A7190()
{
  return MEMORY[0x270EEAA88]();
}

uint64_t sub_24A2A71A0()
{
  return MEMORY[0x270EEAA98]();
}

uint64_t sub_24A2A71B0()
{
  return MEMORY[0x270EEAAA8]();
}

uint64_t sub_24A2A71C0()
{
  return MEMORY[0x270EEAAB0]();
}

uint64_t sub_24A2A71D0()
{
  return MEMORY[0x270EEAAB8]();
}

uint64_t sub_24A2A71E0()
{
  return MEMORY[0x270EEAAF0]();
}

uint64_t sub_24A2A71F0()
{
  return MEMORY[0x270EEAB00]();
}

uint64_t sub_24A2A7200()
{
  return MEMORY[0x270EEAB10]();
}

uint64_t sub_24A2A7210()
{
  return MEMORY[0x270EEAB20]();
}

uint64_t sub_24A2A7220()
{
  return MEMORY[0x270EEAB30]();
}

uint64_t sub_24A2A7230()
{
  return MEMORY[0x270F24E78]();
}

uint64_t sub_24A2A7240()
{
  return MEMORY[0x270EEAB98]();
}

uint64_t sub_24A2A7250()
{
  return MEMORY[0x270EEABF8]();
}

uint64_t sub_24A2A7260()
{
  return MEMORY[0x270EEAC08]();
}

uint64_t sub_24A2A7270()
{
  return MEMORY[0x270EEAD78]();
}

uint64_t sub_24A2A7280()
{
  return MEMORY[0x270EEADA0]();
}

uint64_t sub_24A2A7290()
{
  return MEMORY[0x270EEADD8]();
}

uint64_t sub_24A2A72A0()
{
  return MEMORY[0x270EEADF8]();
}

uint64_t sub_24A2A72B0()
{
  return MEMORY[0x270EEAE08]();
}

uint64_t sub_24A2A72C0()
{
  return MEMORY[0x270EEAE20]();
}

uint64_t sub_24A2A72D0()
{
  return MEMORY[0x270EEAE38]();
}

uint64_t sub_24A2A72E0()
{
  return MEMORY[0x270EEAE60]();
}

uint64_t sub_24A2A72F0()
{
  return MEMORY[0x270EEAE68]();
}

uint64_t sub_24A2A7300()
{
  return MEMORY[0x270EEAEB0]();
}

uint64_t sub_24A2A7310()
{
  return MEMORY[0x270EEAED8]();
}

uint64_t sub_24A2A7320()
{
  return MEMORY[0x270EEAF20]();
}

uint64_t sub_24A2A7330()
{
  return MEMORY[0x270EEAF30]();
}

uint64_t sub_24A2A7340()
{
  return MEMORY[0x270EEAF48]();
}

uint64_t sub_24A2A7350()
{
  return MEMORY[0x270EEAF50]();
}

uint64_t sub_24A2A7360()
{
  return MEMORY[0x270EEB090]();
}

uint64_t sub_24A2A7370()
{
  return MEMORY[0x270EEB098]();
}

uint64_t sub_24A2A7380()
{
  return MEMORY[0x270EEB0A0]();
}

uint64_t sub_24A2A7390()
{
  return MEMORY[0x270EEB0A8]();
}

uint64_t sub_24A2A73A0()
{
  return MEMORY[0x270F79140]();
}

uint64_t sub_24A2A73B0()
{
  return MEMORY[0x270F79148]();
}

uint64_t sub_24A2A73C0()
{
  return MEMORY[0x270F79150]();
}

uint64_t sub_24A2A73D0()
{
  return MEMORY[0x270F79158]();
}

uint64_t sub_24A2A73E0()
{
  return MEMORY[0x270F79160]();
}

uint64_t sub_24A2A73F0()
{
  return MEMORY[0x270F79168]();
}

uint64_t sub_24A2A7400()
{
  return MEMORY[0x270F79170]();
}

uint64_t _s16CloudAttestation7ReleaseV17defaultIdentifier9SwiftASN10gE0VvgZ_0()
{
  return MEMORY[0x270F79178]();
}

uint64_t sub_24A2A7420()
{
  return MEMORY[0x270F79180]();
}

uint64_t sub_24A2A7430()
{
  return MEMORY[0x270F79188]();
}

uint64_t sub_24A2A7440()
{
  return MEMORY[0x270F79190]();
}

uint64_t sub_24A2A7450()
{
  return MEMORY[0x270F79198]();
}

uint64_t sub_24A2A7460()
{
  return MEMORY[0x270F791A0]();
}

uint64_t sub_24A2A7470()
{
  return MEMORY[0x270F791A8]();
}

uint64_t sub_24A2A7480()
{
  return MEMORY[0x270F791B0]();
}

uint64_t sub_24A2A7490()
{
  return MEMORY[0x270F791B8]();
}

uint64_t sub_24A2A74A0()
{
  return MEMORY[0x270F791C0]();
}

uint64_t sub_24A2A74B0()
{
  return MEMORY[0x270F791C8]();
}

uint64_t sub_24A2A74C0()
{
  return MEMORY[0x270F791D0]();
}

uint64_t sub_24A2A74D0()
{
  return MEMORY[0x270F791D8]();
}

uint64_t sub_24A2A74E0()
{
  return MEMORY[0x270F791E0]();
}

uint64_t sub_24A2A74F0()
{
  return MEMORY[0x270F791E8]();
}

uint64_t sub_24A2A7500()
{
  return MEMORY[0x270F791F0]();
}

uint64_t sub_24A2A7510()
{
  return MEMORY[0x270F791F8]();
}

uint64_t sub_24A2A7520()
{
  return MEMORY[0x270F79200]();
}

uint64_t sub_24A2A7530()
{
  return MEMORY[0x270F79208]();
}

uint64_t sub_24A2A7540()
{
  return MEMORY[0x270F79210]();
}

uint64_t sub_24A2A7550()
{
  return MEMORY[0x270F79218]();
}

uint64_t sub_24A2A7560()
{
  return MEMORY[0x270F79220]();
}

uint64_t sub_24A2A7570()
{
  return MEMORY[0x270F79228]();
}

uint64_t sub_24A2A7580()
{
  return MEMORY[0x270F79230]();
}

uint64_t sub_24A2A7590()
{
  return MEMORY[0x270F79238]();
}

uint64_t sub_24A2A75A0()
{
  return MEMORY[0x270F79240]();
}

uint64_t sub_24A2A75B0()
{
  return MEMORY[0x270F79248]();
}

uint64_t sub_24A2A75C0()
{
  return MEMORY[0x270F79250]();
}

uint64_t sub_24A2A75D0()
{
  return MEMORY[0x270F79258]();
}

uint64_t sub_24A2A75E0()
{
  return MEMORY[0x270F79260]();
}

uint64_t sub_24A2A75F0()
{
  return MEMORY[0x270F79268]();
}

uint64_t sub_24A2A7600()
{
  return MEMORY[0x270F79270]();
}

uint64_t sub_24A2A7610()
{
  return MEMORY[0x270F79278]();
}

uint64_t sub_24A2A7620()
{
  return MEMORY[0x270F79280]();
}

uint64_t sub_24A2A7630()
{
  return MEMORY[0x270F79288]();
}

uint64_t sub_24A2A7640()
{
  return MEMORY[0x270F79290]();
}

uint64_t sub_24A2A7650()
{
  return MEMORY[0x270F79298]();
}

uint64_t sub_24A2A7660()
{
  return MEMORY[0x270F792A0]();
}

uint64_t sub_24A2A7670()
{
  return MEMORY[0x270F792A8]();
}

uint64_t sub_24A2A7680()
{
  return MEMORY[0x270F792B0]();
}

uint64_t sub_24A2A7690()
{
  return MEMORY[0x270F792B8]();
}

uint64_t sub_24A2A76A0()
{
  return MEMORY[0x270F792C0]();
}

uint64_t sub_24A2A76B0()
{
  return MEMORY[0x270F792C8]();
}

uint64_t sub_24A2A76C0()
{
  return MEMORY[0x270F792D0]();
}

uint64_t sub_24A2A76D0()
{
  return MEMORY[0x270F792D8]();
}

uint64_t sub_24A2A76E0()
{
  return MEMORY[0x270F792E0]();
}

uint64_t sub_24A2A76F0()
{
  return MEMORY[0x270F792E8]();
}

uint64_t sub_24A2A7700()
{
  return MEMORY[0x270EF1810]();
}

uint64_t sub_24A2A7710()
{
  return MEMORY[0x270F9D068]();
}

uint64_t sub_24A2A7720()
{
  return MEMORY[0x270F9D090]();
}

uint64_t sub_24A2A7730()
{
  return MEMORY[0x270F9D0A8]();
}

uint64_t sub_24A2A7740()
{
  return MEMORY[0x270F9D0B0]();
}

uint64_t sub_24A2A7750()
{
  return MEMORY[0x270F9D120]();
}

uint64_t sub_24A2A7760()
{
  return MEMORY[0x270F9D1D0]();
}

uint64_t sub_24A2A7770()
{
  return MEMORY[0x270F9D208]();
}

uint64_t sub_24A2A7780()
{
  return MEMORY[0x270F9D210]();
}

uint64_t sub_24A2A7790()
{
  return MEMORY[0x270F9D318]();
}

uint64_t sub_24A2A77A0()
{
  return MEMORY[0x270F9D320]();
}

uint64_t sub_24A2A77B0()
{
  return MEMORY[0x270F9D358]();
}

uint64_t sub_24A2A77C0()
{
  return MEMORY[0x270F9D478]();
}

uint64_t sub_24A2A77D0()
{
  return MEMORY[0x270F9D488]();
}

uint64_t sub_24A2A77E0()
{
  return MEMORY[0x270F9D598]();
}

uint64_t sub_24A2A77F0()
{
  return MEMORY[0x270EF19A8]();
}

uint64_t sub_24A2A7800()
{
  return MEMORY[0x270EF19F0]();
}

uint64_t sub_24A2A7810()
{
  return MEMORY[0x270EF1A00]();
}

uint64_t sub_24A2A7820()
{
  return MEMORY[0x270EF1A08]();
}

uint64_t sub_24A2A7830()
{
  return MEMORY[0x270EF1A20]();
}

uint64_t sub_24A2A7840()
{
  return MEMORY[0x270EF1A48]();
}

uint64_t sub_24A2A7850()
{
  return MEMORY[0x270EF1AA0]();
}

uint64_t sub_24A2A7860()
{
  return MEMORY[0x270EF1AD8]();
}

uint64_t sub_24A2A7870()
{
  return MEMORY[0x270F9D5E0]();
}

uint64_t sub_24A2A7880()
{
  return MEMORY[0x270F9D6B0]();
}

uint64_t sub_24A2A7890()
{
  return MEMORY[0x270F9D6B8]();
}

uint64_t sub_24A2A78A0()
{
  return MEMORY[0x270F9D708]();
}

uint64_t sub_24A2A78B0()
{
  return MEMORY[0x270F9D748]();
}

uint64_t sub_24A2A78C0()
{
  return MEMORY[0x270F9D798]();
}

uint64_t sub_24A2A78D0()
{
  return MEMORY[0x270F9D7E0]();
}

uint64_t sub_24A2A78E0()
{
  return MEMORY[0x270F9D7E8]();
}

uint64_t sub_24A2A78F0()
{
  return MEMORY[0x270F9D800]();
}

uint64_t sub_24A2A7900()
{
  return MEMORY[0x270F9D808]();
}

uint64_t sub_24A2A7910()
{
  return MEMORY[0x270F9D810]();
}

uint64_t sub_24A2A7920()
{
  return MEMORY[0x270F9D860]();
}

uint64_t sub_24A2A7930()
{
  return MEMORY[0x270F9D8B0]();
}

uint64_t sub_24A2A7940()
{
  return MEMORY[0x270F9D8E0]();
}

uint64_t sub_24A2A7950()
{
  return MEMORY[0x270F9D8F0]();
}

uint64_t sub_24A2A7960()
{
  return MEMORY[0x270F9D8F8]();
}

uint64_t sub_24A2A7970()
{
  return MEMORY[0x270F9D908]();
}

uint64_t sub_24A2A7980()
{
  return MEMORY[0x270F9D938]();
}

uint64_t sub_24A2A7990()
{
  return MEMORY[0x270F9D978]();
}

uint64_t sub_24A2A79A0()
{
  return MEMORY[0x270F9D990]();
}

uint64_t sub_24A2A79B0()
{
  return MEMORY[0x270F9D9A8]();
}

uint64_t sub_24A2A79C0()
{
  return MEMORY[0x270F9DA40]();
}

uint64_t sub_24A2A79D0()
{
  return MEMORY[0x270F9DA70]();
}

uint64_t sub_24A2A79E0()
{
  return MEMORY[0x270F9DA80]();
}

uint64_t sub_24A2A79F0()
{
  return MEMORY[0x270F9DA98]();
}

uint64_t sub_24A2A7A00()
{
  return MEMORY[0x270F9DB00]();
}

uint64_t sub_24A2A7A10()
{
  return MEMORY[0x270F9DBA0]();
}

uint64_t sub_24A2A7A20()
{
  return MEMORY[0x270EF1B90]();
}

uint64_t sub_24A2A7A30()
{
  return MEMORY[0x270F9DBB0]();
}

uint64_t sub_24A2A7A40()
{
  return MEMORY[0x270F9DBB8]();
}

uint64_t sub_24A2A7A50()
{
  return MEMORY[0x270F9DBF0]();
}

uint64_t sub_24A2A7A60()
{
  return MEMORY[0x270F9DC10]();
}

uint64_t sub_24A2A7A70()
{
  return MEMORY[0x270F9DC20]();
}

uint64_t sub_24A2A7A80()
{
  return MEMORY[0x270F9DC50]();
}

uint64_t sub_24A2A7A90()
{
  return MEMORY[0x270F9DCD8]();
}

uint64_t sub_24A2A7AA0()
{
  return MEMORY[0x270F9DD08]();
}

uint64_t sub_24A2A7AB0()
{
  return MEMORY[0x270F792F0]();
}

uint64_t sub_24A2A7AC0()
{
  return MEMORY[0x270F9DEB0]();
}

uint64_t sub_24A2A7AD0()
{
  return MEMORY[0x270F9DEF0]();
}

uint64_t sub_24A2A7AE0()
{
  return MEMORY[0x270F9DFE8]();
}

uint64_t sub_24A2A7AF0()
{
  return MEMORY[0x270EF1CE8]();
}

uint64_t sub_24A2A7B10()
{
  return MEMORY[0x270FA2E40]();
}

uint64_t sub_24A2A7B20()
{
  return MEMORY[0x270FA2E58]();
}

uint64_t sub_24A2A7B30()
{
  return MEMORY[0x270FA2E60]();
}

uint64_t sub_24A2A7B40()
{
  return MEMORY[0x270FA2E80]();
}

uint64_t sub_24A2A7B50()
{
  return MEMORY[0x270F9E3C0]();
}

uint64_t sub_24A2A7B60()
{
  return MEMORY[0x270F9E518]();
}

uint64_t sub_24A2A7B70()
{
  return MEMORY[0x270F9E530]();
}

uint64_t sub_24A2A7B80()
{
  return MEMORY[0x270F9E560]();
}

uint64_t sub_24A2A7B90()
{
  return MEMORY[0x270EF24A8]();
}

uint64_t sub_24A2A7BA0()
{
  return MEMORY[0x270F9E670]();
}

uint64_t sub_24A2A7BB0()
{
  return MEMORY[0x270EF2600]();
}

uint64_t sub_24A2A7BC0()
{
  return MEMORY[0x270F9E718]();
}

uint64_t sub_24A2A7BD0()
{
  return MEMORY[0x270F9E740]();
}

uint64_t sub_24A2A7BE0()
{
  return MEMORY[0x270F9E750]();
}

uint64_t sub_24A2A7BF0()
{
  return MEMORY[0x270F9E788]();
}

uint64_t sub_24A2A7C10()
{
  return MEMORY[0x270F9E7E8]();
}

uint64_t sub_24A2A7C20()
{
  return MEMORY[0x270F9E7F0]();
}

uint64_t sub_24A2A7C30()
{
  return MEMORY[0x270F9E958]();
}

uint64_t sub_24A2A7C40()
{
  return MEMORY[0x270F9E960]();
}

uint64_t sub_24A2A7C50()
{
  return MEMORY[0x270F9E970]();
}

uint64_t sub_24A2A7C60()
{
  return MEMORY[0x270F9E9A8]();
}

uint64_t sub_24A2A7C70()
{
  return MEMORY[0x270F9E9B0]();
}

uint64_t sub_24A2A7C80()
{
  return MEMORY[0x270F9EA40]();
}

uint64_t sub_24A2A7C90()
{
  return MEMORY[0x270F9EA48]();
}

uint64_t sub_24A2A7CA0()
{
  return MEMORY[0x270F9EB28]();
}

uint64_t sub_24A2A7CB0()
{
  return MEMORY[0x270F9EBD8]();
}

uint64_t sub_24A2A7CC0()
{
  return MEMORY[0x270F9EC48]();
}

uint64_t sub_24A2A7CD0()
{
  return MEMORY[0x270F9EC88]();
}

uint64_t sub_24A2A7CE0()
{
  return MEMORY[0x270F9EC90]();
}

uint64_t sub_24A2A7CF0()
{
  return MEMORY[0x270F9ED68]();
}

uint64_t sub_24A2A7D00()
{
  return MEMORY[0x270F9ED70]();
}

uint64_t sub_24A2A7D10()
{
  return MEMORY[0x270F9EFE8]();
}

uint64_t sub_24A2A7D20()
{
  return MEMORY[0x270F9EFF0]();
}

uint64_t sub_24A2A7D30()
{
  return MEMORY[0x270F9F080]();
}

uint64_t sub_24A2A7D40()
{
  return MEMORY[0x270F9F098]();
}

uint64_t sub_24A2A7D50()
{
  return MEMORY[0x270F9F0A0]();
}

uint64_t sub_24A2A7D60()
{
  return MEMORY[0x270F9F0B0]();
}

uint64_t sub_24A2A7D70()
{
  return MEMORY[0x270F9F0C0]();
}

uint64_t sub_24A2A7D80()
{
  return MEMORY[0x270F9F0D8]();
}

uint64_t sub_24A2A7D90()
{
  return MEMORY[0x270F9F0E0]();
}

uint64_t sub_24A2A7DA0()
{
  return MEMORY[0x270F9F230]();
}

uint64_t sub_24A2A7DB0()
{
  return MEMORY[0x270F9F318]();
}

uint64_t sub_24A2A7DC0()
{
  return MEMORY[0x270F9F3E0]();
}

uint64_t sub_24A2A7DD0()
{
  return MEMORY[0x270F9F3F0]();
}

uint64_t sub_24A2A7DE0()
{
  return MEMORY[0x270F9F418]();
}

uint64_t sub_24A2A7DF0()
{
  return MEMORY[0x270F9F428]();
}

uint64_t sub_24A2A7E00()
{
  return MEMORY[0x270F9F448]();
}

uint64_t sub_24A2A7E10()
{
  return MEMORY[0x270F9F458]();
}

uint64_t sub_24A2A7E20()
{
  return MEMORY[0x270F9F4C8]();
}

uint64_t sub_24A2A7E30()
{
  return MEMORY[0x270F9F4E0]();
}

uint64_t sub_24A2A7E40()
{
  return MEMORY[0x270F9F7D0]();
}

uint64_t sub_24A2A7E50()
{
  return MEMORY[0x270F9F878]();
}

uint64_t sub_24A2A7E60()
{
  return MEMORY[0x270F9F898]();
}

uint64_t sub_24A2A7E70()
{
  return MEMORY[0x270F9FB10]();
}

uint64_t sub_24A2A7E80()
{
  return MEMORY[0x270F9FB18]();
}

uint64_t sub_24A2A7E90()
{
  return MEMORY[0x270EF2660]();
}

uint64_t sub_24A2A7EA0()
{
  return MEMORY[0x270EF2678]();
}

uint64_t sub_24A2A7EB0()
{
  return MEMORY[0x270EF2688]();
}

uint64_t sub_24A2A7EC0()
{
  return MEMORY[0x270F9FB30]();
}

uint64_t sub_24A2A7ED0()
{
  return MEMORY[0x270F9FB38]();
}

uint64_t sub_24A2A7EE0()
{
  return MEMORY[0x270F9FB40]();
}

uint64_t sub_24A2A7EF0()
{
  return MEMORY[0x270F9FB48]();
}

uint64_t sub_24A2A7F00()
{
  return MEMORY[0x270F9FC40]();
}

uint64_t sub_24A2A7F10()
{
  return MEMORY[0x270F9FC48]();
}

uint64_t sub_24A2A7F20()
{
  return MEMORY[0x270F9FC60]();
}

uint64_t sub_24A2A7F30()
{
  return MEMORY[0x270F9FC68]();
}

uint64_t sub_24A2A7F40()
{
  return MEMORY[0x270F9FC78]();
}

uint64_t sub_24A2A7F50()
{
  return MEMORY[0x270F9FC90]();
}

uint64_t sub_24A2A7F60()
{
  return MEMORY[0x270F9FD70]();
}

uint64_t sub_24A2A7F70()
{
  return MEMORY[0x270F9FD88]();
}

uint64_t sub_24A2A7F80()
{
  return MEMORY[0x270F9FD98]();
}

uint64_t sub_24A2A7F90()
{
  return MEMORY[0x270F9FF68]();
}

CFPropertyListRef CFPreferencesCopyAppValue(CFStringRef key, CFStringRef applicationID)
{
  return (CFPropertyListRef)MEMORY[0x270EE4CA8](key, applicationID);
}

kern_return_t IOObjectRelease(io_object_t object)
{
  return MEMORY[0x270EF4820](*(void *)&object);
}

io_registry_entry_t IORegistryEntryCopyFromPath(mach_port_t mainPort, CFStringRef path)
{
  return MEMORY[0x270EF49C0](*(void *)&mainPort, path);
}

CFTypeRef IORegistryEntryCreateCFProperty(io_registry_entry_t entry, CFStringRef key, CFAllocatorRef allocator, IOOptionBits options)
{
  return (CFTypeRef)MEMORY[0x270EF49D8](*(void *)&entry, key, allocator, *(void *)&options);
}

SecAccessControlRef SecAccessControlCreateWithFlags(CFAllocatorRef allocator, CFTypeRef protection, SecAccessControlCreateFlags flags, CFErrorRef *error)
{
  return (SecAccessControlRef)MEMORY[0x270EFD648](allocator, protection, flags, error);
}

CFDataRef SecCertificateCopyData(SecCertificateRef certificate)
{
  return (CFDataRef)MEMORY[0x270EFD718](certificate);
}

uint64_t SecCertificateCopyExtensionValue()
{
  return MEMORY[0x270EFD730]();
}

SecKeyRef SecCertificateCopyKey(SecCertificateRef certificate)
{
  return (SecKeyRef)MEMORY[0x270EFD750](certificate);
}

SecCertificateRef SecCertificateCreateWithData(CFAllocatorRef allocator, CFDataRef data)
{
  return (SecCertificateRef)MEMORY[0x270EFD7E8](allocator, data);
}

CFDataRef SecKeyCopyExternalRepresentation(SecKeyRef key, CFErrorRef *error)
{
  return (CFDataRef)MEMORY[0x270EFD9A8](key, error);
}

SecKeyRef SecKeyCopyPublicKey(SecKeyRef key)
{
  return (SecKeyRef)MEMORY[0x270EFD9D0](key);
}

uint64_t SecKeyCopySystemKey()
{
  return MEMORY[0x270EFD9E8]();
}

uint64_t SecKeyCreateAttestation()
{
  return MEMORY[0x270EFD9F0]();
}

SecKeyRef SecKeyCreateRandomKey(CFDictionaryRef parameters, CFErrorRef *error)
{
  return (SecKeyRef)MEMORY[0x270EFDA48](parameters, error);
}

SecKeyRef SecKeyCreateWithData(CFDataRef keyData, CFDictionaryRef attributes, CFErrorRef *error)
{
  return (SecKeyRef)MEMORY[0x270EFDA58](keyData, attributes, error);
}

uint64_t SecKeySetParameter()
{
  return MEMORY[0x270EFDAC0]();
}

uint64_t SecPolicyCreateDCAttestation()
{
  return MEMORY[0x270EFDB50]();
}

SecPolicyRef SecPolicyCreateRevocation(CFOptionFlags revocationFlags)
{
  return (SecPolicyRef)MEMORY[0x270EFDBA0](revocationFlags);
}

OSStatus SecTrustCreateWithCertificates(CFTypeRef certificates, CFTypeRef policies, SecTrustRef *trust)
{
  return MEMORY[0x270EFDD48](certificates, policies, trust);
}

BOOL SecTrustEvaluateWithError(SecTrustRef trust, CFErrorRef *error)
{
  return MEMORY[0x270EFDD68](trust, error);
}

OSStatus SecTrustSetAnchorCertificates(SecTrustRef trust, CFArrayRef anchorCertificates)
{
  return MEMORY[0x270EFDDA0](trust, anchorCertificates);
}

OSStatus SecTrustSetAnchorCertificatesOnly(SecTrustRef trust, Boolean anchorCertificatesOnly)
{
  return MEMORY[0x270EFDDB0](trust, anchorCertificatesOnly);
}

OSStatus SecTrustSetNetworkFetchAllowed(SecTrustRef trust, Boolean allowFetch)
{
  return MEMORY[0x270EFDDD0](trust, allowFetch);
}

OSStatus SecTrustSetVerifyDate(SecTrustRef trust, CFDateRef verifyDate)
{
  return MEMORY[0x270EFDDF0](trust, verifyDate);
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x270ED7CD8](aBlock);
}

void _Block_release(const void *aBlock)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return MEMORY[0x270FA0158]();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x270FA0160]();
}

uint64_t aks_attest_context_get()
{
  return MEMORY[0x270F0E3D0]();
}

uint64_t aks_attest_context_get_sealed_hash()
{
  return MEMORY[0x270F0E3D8]();
}

uint64_t aks_attest_context_get_uint64()
{
  return MEMORY[0x270F0E3E0]();
}

uint64_t aks_attest_context_init()
{
  return MEMORY[0x270F0E3E8]();
}

uint64_t aks_attest_context_verify()
{
  return MEMORY[0x270F0E3F0]();
}

void bzero(void *a1, size_t a2)
{
}

void free(void *a1)
{
}

uint64_t image4_environment_destroy()
{
  return MEMORY[0x270F99A40]();
}

uint64_t image4_environment_new()
{
  return MEMORY[0x270F99A48]();
}

uint64_t image4_trust_destroy()
{
  return MEMORY[0x270F99A50]();
}

uint64_t image4_trust_evaluate()
{
  return MEMORY[0x270F99A58]();
}

uint64_t image4_trust_new()
{
  return MEMORY[0x270F99A60]();
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x270EDA328](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x270EDA378](ptr);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x270EDA460](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x270EDA470](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x270EDA488](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x270EDA498](__b, *(void *)&__c, __len);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x270F9A538](a1);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x270F9A6D0](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x270F9A6E8](a1, a2);
}

uint64_t self
{
  return MEMORY[0x270F9A730]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x270F9A870](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A890](a1);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x270EDA9D0](oslog, type);
}

uint64_t os_variant_allows_internal_security_policies()
{
  return MEMORY[0x270EDAB10]();
}

uint64_t os_variant_has_internal_content()
{
  return MEMORY[0x270EDAB30]();
}

uint64_t os_variant_is_darwinos()
{
  return MEMORY[0x270EDAB50]();
}

uint64_t swift_allocBox()
{
  return MEMORY[0x270FA0180]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x270FA0190]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x270FA0198]();
}

uint64_t swift_allocateGenericClassMetadata()
{
  return MEMORY[0x270FA01A0]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x270FA01C0]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x270FA01C8]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x270FA01D0]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x270FA01D8]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x270FA01E0]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x270FA01E8]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x270FA01F0]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x270FA01F8]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x270FA0200]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x270FA0208]();
}

uint64_t swift_continuation_init()
{
  return MEMORY[0x270FA23F8]();
}

uint64_t swift_defaultActor_destroy()
{
  return MEMORY[0x270FA2420]();
}

uint64_t swift_defaultActor_initialize()
{
  return MEMORY[0x270FA2428]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x270FA0260]();
}

uint64_t swift_dynamicCastMetatype()
{
  return MEMORY[0x270FA0278]();
}

uint64_t swift_dynamicCastObjCClassUnconditional()
{
  return MEMORY[0x270FA0290]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x270FA02C0]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x270FA02C8]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x270FA02D0]();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return MEMORY[0x270FA02F8]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x270FA0300]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x270FA0338]();
}

uint64_t swift_getErrorValue()
{
  return MEMORY[0x270FA0348]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x270FA0370]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x270FA03B0]();
}

uint64_t swift_getMetatypeMetadata()
{
  return MEMORY[0x270FA03C8]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x270FA03E0]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x270FA03E8]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x270FA0400]();
}

uint64_t swift_getTupleTypeLayout2()
{
  return MEMORY[0x270FA0410]();
}

uint64_t swift_getTupleTypeMetadata()
{
  return MEMORY[0x270FA0420]();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return MEMORY[0x270FA0428]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x270FA0440]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x270FA0448]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x270FA0450]();
}

uint64_t swift_initClassMetadata2()
{
  return MEMORY[0x270FA0458]();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return MEMORY[0x270FA0460]();
}

uint64_t swift_initEnumMetadataSinglePayload()
{
  return MEMORY[0x270FA0470]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x270FA0478]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x270FA0488]();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return MEMORY[0x270FA04C0]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x270FA04C8]();
}

uint64_t swift_makeBoxUnique()
{
  return MEMORY[0x270FA04D8]();
}

uint64_t swift_once()
{
  return MEMORY[0x270FA04F0]();
}

uint64_t swift_release()
{
  return MEMORY[0x270FA0520]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x270FA0528]();
}

uint64_t swift_retain()
{
  return MEMORY[0x270FA0530]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x270FA0550]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x270FA0558]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x270FA0560]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x270FA0578]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x270FA2450]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x270FA2460]();
}

uint64_t swift_unexpectedError()
{
  return MEMORY[0x270FA0588]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x270FA0590]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x270FA05A0]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x270FA0628]();
}