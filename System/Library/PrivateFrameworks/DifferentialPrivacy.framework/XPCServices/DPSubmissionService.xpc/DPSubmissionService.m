void sub_10000460C(id a1)
{
  uint64_t vars8;

  qword_100082B58 = +[NSSet setWithArray:&off_1000799B8];
  _objc_release_x1();
}

void sub_100007D18(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = v8;
  v11 = v10;
  if (v10 && (uint64_t)[v10 statusCode] <= 299)
  {
    v12 = +[_DPLog service];
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134217984;
      id v22 = [v11 statusCode];
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Client has uploaded data successfully: received %ld response", buf, 0xCu);
    }

    v13 = *(void (**)(void))(*(void *)(a1 + 56) + 16);
LABEL_13:
    v13();
    goto LABEL_14;
  }
  v14 = +[_DPLog service];
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
  {
    v18 = *(void **)(a1 + 64);
    id v19 = [v11 statusCode];
    v20 = [v11 allHeaderFields];
    *(_DWORD *)buf = 134218754;
    id v22 = v18;
    __int16 v23 = 2048;
    id v24 = v19;
    __int16 v25 = 2112;
    id v26 = v9;
    __int16 v27 = 2112;
    v28 = v20;
    _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Client failed to upload data, number of retries left: %ld, status: %ld, error: %@, headers in reply: %@", buf, 0x2Au);
  }
  uint64_t v15 = *(void *)(a1 + 64);
  if (!v15)
  {
    if (v11)
    {
      v16 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"Server returned status code: %ld", [v11 statusCode]);
      uint64_t v17 = +[_DPDediscoError errorWithCode:205 description:v16];

      id v9 = (id)v17;
    }
    v13 = *(void (**)(void))(*(void *)(a1 + 56) + 16);
    goto LABEL_13;
  }
  [*(id *)(a1 + 32) _uploadData:*(void *)(a1 + 40) withHeaders:*(void *)(a1 + 48) withRetries:v15 - 1 onCompletion:*(void *)(a1 + 56)];
LABEL_14:
}

void sub_10000806C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = v8;
  v11 = v10;
  if (v7 && !v9 && [v10 statusCode] == (id)200)
  {
    v12 = +[_DPLog service];
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Config file was successfully downloaded.", buf, 2u);
    }

    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
  else
  {
    v13 = +[_DPLog service];
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      uint64_t v14 = *(void *)(a1 + 56);
      *(_DWORD *)buf = 134218498;
      uint64_t v19 = v14;
      __int16 v20 = 2048;
      id v21 = [v11 statusCode];
      __int16 v22 = 2112;
      id v23 = v9;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Client failed to download config file, number of retries left: %ld, status: %ld, error: %@", buf, 0x20u);
    }

    uint64_t v15 = *(void *)(a1 + 56);
    if (v15)
    {
      [*(id *)(a1 + 32) _downloadConfigFromURL:*(void *)(a1 + 40) retries:v15 - 1 onCompletion:*(void *)(a1 + 48)];
    }
    else
    {
      v16 = +[_DPLog service];
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
        sub_1000565A0(v11, (uint64_t)v9, v16);
      }

      if (!v9)
      {
        uint64_t v17 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", @"Client returned status code: %ld", [v11 statusCode]);
        id v9 = +[_DPDediscoError errorWithCode:201 description:v17];
      }
      (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
    }
  }
}

void sub_100008E58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose((const void *)(v35 - 192), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100008E98(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100008EA8(uint64_t a1)
{
}

void sub_100008EB0(uint64_t a1, void *a2, void *a3)
{
  id v11 = a2;
  id v5 = a3;
  v6 = v5;
  if (v5)
  {
    id v7 = (void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
    id v8 = v5;
  }
  else
  {
    id v7 = (void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
    id v8 = v11;
  }
  id v9 = v8;
  id v10 = *v7;
  *id v7 = v9;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_100009BFC(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void sub_100009C18(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0xCu);
}

void sub_100009C30(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x16u);
}

void sub_10000A5DC(id a1)
{
  byte_100082B60 = DiagnosticLogSubmissionEnabled();
}

void sub_10000BE90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 128), 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10000BED8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10000BEE8(uint64_t a1)
{
}

void sub_10000BEF0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = +[_DPLog service];
  id v8 = v7;
  if (v6)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_100056DE4((uint64_t)v6, v8, v9, v10, v11, v12, v13, v14);
    }
  }
  else if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v23 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Config was downloaded successfully", v23, 2u);
  }

  uint64_t v15 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v16 = *(void **)(v15 + 40);
  *(void *)(v15 + 40) = v5;
  id v17 = v5;

  uint64_t v18 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v19 = *(void **)(v18 + 40);
  *(void *)(v18 + 40) = v6;
  id v20 = v6;

  if (v17) {
    BOOL v21 = v6 == 0;
  }
  else {
    BOOL v21 = 0;
  }
  char v22 = v21;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = v22;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_10000C074(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void sub_10000D488(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

void sub_10000DBF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a19, 8);
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v29 - 192), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10000DC44(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10000DC54(uint64_t a1)
{
}

void sub_10000DC5C(uint64_t a1, __SecKey *a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  if (v8)
  {
    if (mobileactivationErrorHasDomainAndErrorCode()) {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
    }
    uint64_t v10 = +[_DPLog service];
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      sub_1000574A0((uint64_t)v8, v10, v11, v12, v13, v14, v15, v16);
    }
  }
  else
  {
    id v17 = [v7 objectAtIndexedSubscript:0];

    CFDataRef v18 = SecCertificateCopyData((SecCertificateRef)v17);
    uint64_t v19 = *(void *)(*(void *)(a1 + 56) + 8);
    id v20 = *(void **)(v19 + 40);
    *(void *)(v19 + 40) = v18;

    BOOL v21 = [v7 objectAtIndexedSubscript:1];

    CFDataRef v22 = SecCertificateCopyData((SecCertificateRef)v21);
    uint64_t v23 = *(void *)(*(void *)(a1 + 64) + 8);
    id v24 = *(void **)(v23 + 40);
    *(void *)(v23 + 40) = v22;

    CFErrorRef error = 0;
    CFDataRef v25 = SecKeyCreateSignature(a2, kSecKeyAlgorithmECDSASignatureMessageX962SHA256, *(CFDataRef *)(a1 + 40), &error);
    uint64_t v26 = *(void *)(*(void *)(a1 + 72) + 8);
    __int16 v27 = *(void **)(v26 + 40);
    *(void *)(v26 + 40) = v25;

    if (error)
    {
      v28 = +[_DPLog service];
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
        sub_100057424((void **)&error, v28, v29, v30, v31, v32, v33, v34);
      }

      uint64_t v35 = *(void *)(*(void *)(a1 + 72) + 8);
      v36 = *(void **)(v35 + 40);
      *(void *)(v35 + 40) = 0;
    }
    if (a2) {
      CFRelease(a2);
    }
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_10000DEA8(id a1)
{
  v3[0] = kDPMetadataDediscoTaskConfigFeaturesOHTTP;
  v3[1] = kDPMetadataDediscoTaskConfigFeaturesPAT;
  v4[0] = &__kCFBooleanTrue;
  v4[1] = &__kCFBooleanTrue;
  uint64_t v1 = +[NSDictionary dictionaryWithObjects:v4 forKeys:v3 count:2];
  v2 = (void *)qword_100082B80;
  qword_100082B80 = v1;
}

void sub_10000EF2C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10000F988(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void sub_10000F9A8(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

int main(int argc, const char **argv, const char **envp)
{
  v3 = +[_DPLog service];
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "starting DPSubmissionService", v8, 2u);
  }

  _set_user_dir_suffix();
  id v4 = NSTemporaryDirectory();
  id v5 = objc_opt_new();
  id v6 = +[NSXPCListener serviceListener];
  [v6 setDelegate:v5];
  [v6 resume];

  return 0;
}

void sub_1000118D4(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

void sub_100012AF4(id a1)
{
  qword_100082B88 = objc_alloc_init(_DPSubmissionService);
  _objc_release_x1();
}

void sub_1000134B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000134F8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_100013508(uint64_t a1)
{
}

void sub_100013510(uint64_t a1, void *a2)
{
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
  id v4 = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

id sub_100015628(uint64_t a1)
{
  return [*v1 addOperation:a1];
}

uint64_t sub_10001563C()
{
  uint64_t v0 = sub_100059020();
  sub_100016FD8(v0, qword_100088520);
  *(void *)sub_100015988(v0, (uint64_t)qword_100088520) = 300;
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(v0 - 8) + 104);
  return v1();
}

uint64_t sub_1000156CC()
{
  uint64_t v0 = sub_100058DD0();
  sub_100016FD8(v0, qword_100088538);
  sub_100015988(v0, (uint64_t)qword_100088538);
  return sub_100058DE0();
}

id _DPDediscoAlgorithmParametersOtherParams.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return [v1 init];
}

id _DPDediscoPCCNetworkingService.init()()
{
  id v1 = v0;
  NSString v2 = sub_1000591D0();
  id v3 = [self containerWithIdentifier:v2];

  id v4 = [v3 publicCloudDatabase];
  id v5 = &v1[OBJC_IVAR____DPDediscoPCCNetworkingService_database];
  *((void *)v5 + 3) = sub_100015948();
  *((void *)v5 + 4) = &protocol witness table for CKDatabase;
  *(void *)id v5 = v4;
  id v6 = &v1[OBJC_IVAR____DPDediscoPCCNetworkingService_serviceName];
  *(void *)id v6 = 0xD000000000000022;
  *((void *)v6 + 1) = 0x8000000100061EE0;
  if (qword_1000809F0 != -1) {
    swift_once();
  }
  uint64_t v7 = sub_100059020();
  uint64_t v8 = sub_100015988(v7, (uint64_t)qword_100088520);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(&v1[OBJC_IVAR____DPDediscoPCCNetworkingService_timeout], v8, v7);

  v10.receiver = v1;
  v10.super_class = (Class)type metadata accessor for _DPDediscoPCCNetworkingService();
  return objc_msgSendSuper2(&v10, "init");
}

unint64_t sub_100015948()
{
  unint64_t result = qword_100080A80;
  if (!qword_100080A80)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100080A80);
  }
  return result;
}

uint64_t sub_100015988(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t type metadata accessor for _DPDediscoPCCNetworkingService()
{
  uint64_t result = qword_100080AB8;
  if (!qword_100080AB8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100015A34(uint64_t a1, uint64_t a2, uint64_t a3, NSObject *a4)
{
  *(void *)(a3 + 16) = a2;
  swift_errorRetain();
  swift_errorRelease();
  dispatch_group_leave(a4);
}

uint64_t sub_100015B80(uint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  v20[0] = a6;
  uint64_t v11 = type metadata accessor for BaaCertificateChain(0);
  uint64_t v21 = *(void *)(v11 - 8);
  __chkstk_darwin();
  uint64_t v13 = (char *)v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *a1;
  unint64_t v15 = a1[1];
  sub_100016E5C(a2, a3);
  sub_100016B2C(v14, v15);
  *a1 = a2;
  a1[1] = a3;
  uint64_t v16 = a1[2];
  unint64_t v17 = a1[3];
  sub_100016E5C(a4, a5);
  sub_100016B2C(v16, v17);
  a1[2] = a4;
  a1[3] = a5;
  v20[4] = v20[0];
  sub_100016ED0(&qword_100080B08, (void (*)(uint64_t))type metadata accessor for BaaCertificateChain);
  sub_100058F60();
  uint64_t v18 = (uint64_t)a1 + *(int *)(type metadata accessor for BaaSignedDonation(0) + 28);
  sub_100016F18(v18, &qword_100080B10);
  sub_100016F74((uint64_t)v13, v18);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v11);
}

uint64_t sub_100015D54(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100058E10();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin();
  uint64_t v7 = &v10[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = a2;
  sub_100016ED0(&qword_100080AF8, (void (*)(uint64_t))&type metadata accessor for Ckcode_ProtectedEnvelope);
  sub_100058F60();
  uint64_t v8 = a1 + *(int *)(type metadata accessor for ProtectedDonation(0) + 20);
  sub_100016F18(v8, &qword_100080B00);
  (*(void (**)(uint64_t, unsigned char *, uint64_t))(v5 + 32))(v8, v7, v4);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

uint64_t sub_100015ED8(uint64_t a1, uint64_t a2)
{
  sub_100058E30();
  __chkstk_darwin();
  (*(void (**)(char *, uint64_t))(v4 + 16))((char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), a2);
  return sub_100058DF0();
}

id _DPDediscoPCCNetworkingService.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for _DPDediscoPCCNetworkingService();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t variable initialization expression of LoadTestExperimentalSetup.donations()
{
  return 0;
}

uint64_t variable initialization expression of ProtectedDonation._baaSignedDonationEnvelope@<X0>(uint64_t a1@<X8>)
{
  return sub_1000160F4((uint64_t (*)(void))&type metadata accessor for Ckcode_ProtectedEnvelope, a1);
}

uint64_t variable initialization expression of BaaCertificateChain.leafCertificate()
{
  return 0;
}

uint64_t variable initialization expression of BaaSignedDonation._baaCertificateChain@<X0>(uint64_t a1@<X8>)
{
  return sub_1000160F4(type metadata accessor for BaaCertificateChain, a1);
}

uint64_t variable initialization expression of DediscoDonation.algorithm()
{
  return 0;
}

Swift::Int __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> TLSEmpty.encodedLength(with:)(Swift::Void_optional with)
{
  return 0;
}

double variable initialization expression of DediscoDonation.AlgorithmParameters.epsilon()
{
  return 0.0;
}

uint64_t variable initialization expression of DediscoDonation._algorithmParameters@<X0>(uint64_t a1@<X8>)
{
  return sub_1000160F4(type metadata accessor for DediscoDonation.AlgorithmParameters, a1);
}

uint64_t sub_1000160F4@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1(0);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56);
  return v4(a2, 1, 1, v3);
}

id sub_100016168(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v45 = a5;
  uint64_t v43 = a4;
  uint64_t v44 = a3;
  uint64_t v41 = a1;
  uint64_t v42 = a2;
  uint64_t v5 = sub_100058E30();
  uint64_t v38 = *(void *)(v5 - 8);
  uint64_t v39 = v5;
  ((void (*)(void))__chkstk_darwin)();
  v49 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for BaaSignedDonation(0);
  ((void (*)(void))__chkstk_darwin)();
  v47 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = sub_100016C98(&qword_100080AC8);
  uint64_t v9 = *(void *)(v40 - 8);
  ((void (*)(void))__chkstk_darwin)();
  uint64_t v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100016C98(&qword_100080AD0);
  uint64_t v13 = *(void *)(v12 - 8);
  ((void (*)(void))__chkstk_darwin)();
  unint64_t v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100016C98(&qword_100080AD8);
  ((void (*)(void))__chkstk_darwin)();
  unint64_t v17 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for ProtectedDonation(0);
  uint64_t v19 = *(void *)(v18 - 8);
  v36 = *(void (**)(char *, uint64_t, uint64_t))(v19 + 56);
  uint64_t v37 = v18;
  uint64_t v35 = v19 + 56;
  v36(v17, 1, 1);
  (*(void (**)(char *, void, uint64_t))(v13 + 104))(v15, enum case for CodeOperation.DestinationServer.default<A, B>(_:), v12);
  objc_allocWithZone((Class)sub_100016C98(&qword_100080AE0));
  swift_bridgeObjectRetain();
  id v20 = (void *)sub_100058DC0();
  id result = [v20 configuration];
  if (result)
  {
    CFDataRef v22 = result;
    [result setPreferAnonymousRequests:1];

    if (qword_1000809F8 != -1) {
      swift_once();
    }
    uint64_t v23 = sub_100058DD0();
    uint64_t v24 = sub_100015988(v23, (uint64_t)qword_100088538);
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v23 - 8) + 16))(v11, v24, v23);
    (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, enum case for CodeOperation.DataProtectionType.SGX<A, B>(_:), v40);
    uint64_t v25 = sub_100058DA0();
    __chkstk_darwin(v25);
    uint64_t v26 = v42;
    *(&v35 - 6) = v41;
    *(&v35 - 5) = v26;
    uint64_t v27 = v45;
    *(&v35 - 4) = v43;
    *(&v35 - 3) = v27;
    *(&v35 - 2) = v44;
    uint64_t v28 = sub_100016ED0(&qword_100080AE8, (void (*)(uint64_t))type metadata accessor for BaaSignedDonation);
    uint64_t v29 = v46;
    uint64_t v30 = (uint64_t)v47;
    sub_100058F60();
    v48[3] = v7;
    v48[4] = v28;
    uint64_t v31 = sub_100016D00(v48);
    sub_100016D64(v30, (uint64_t)v31);
    sub_100058E70();
    uint64_t v32 = v49;
    uint64_t v33 = sub_100058E20();
    if (v29)
    {
      sub_100016DC8(v30);
    }
    else
    {
      __chkstk_darwin(v33);
      *(&v35 - 2) = (uint64_t)v32;
      sub_100016ED0(&qword_100080AF0, (void (*)(uint64_t))type metadata accessor for ProtectedDonation);
      uint64_t v34 = v37;
      sub_100058F60();
      ((void (*)(char *, void, uint64_t, uint64_t))v36)(v17, 0, 1, v34);
      sub_100058DB0();
      sub_100016DC8(v30);
      (*(void (**)(char *, uint64_t))(v38 + 8))(v32, v39);
    }
    return v20;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id _s19DPSubmissionService023_DPDediscoPCCNetworkingB0C18submitSyncronously17serializedPayload19baaCertificateChain0I9Signature7optionsSo7NSErrorCSg10Foundation4DataV_AA017_DPBAACertificateK0CANSo24DediscoNetworkingOptionsVtF_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v33 = a5;
  uint64_t v32 = sub_100059060();
  uint64_t v9 = *(void *)(v32 - 8);
  uint64_t v10 = __chkstk_darwin(v32);
  uint64_t v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v31 - v13;
  unint64_t v15 = dispatch_group_create();
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = 0;
  unint64_t v17 = (void *)(v16 + 16);
  dispatch_group_enter(v15);
  uint64_t v18 = a3;
  uint64_t v19 = v34;
  id v20 = sub_100016168(a1, a2, v18, a4, v33);
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = v16;
  *(void *)(v21 + 24) = v15;
  swift_retain();
  CFDataRef v22 = v15;
  sub_100058D90();
  uint64_t v23 = (void *)(v19 + OBJC_IVAR____DPDediscoPCCNetworkingService_database);
  uint64_t v24 = *(void *)(v19 + OBJC_IVAR____DPDediscoPCCNetworkingService_database + 24);
  uint64_t v25 = *(void *)(v19 + OBJC_IVAR____DPDediscoPCCNetworkingService_database + 32);
  sub_100016C54(v23, v24);
  (*(void (**)(id, uint64_t, uint64_t))(v25 + 8))(v20, v24, v25);

  uint64_t v26 = v32;
  sub_100059040();
  sub_100059050();
  uint64_t v27 = *(void (**)(char *, uint64_t))(v9 + 8);
  v27(v12, v26);
  sub_1000592C0();
  v27(v14, v26);
  if (sub_100059030())
  {
    NSString v28 = sub_1000591D0();
    id v29 = [self errorWithCode:200 description:v28];
    swift_release();
  }
  else
  {
    swift_beginAccess();
    if (*v17)
    {
      swift_errorRetain();
      id v29 = (id)sub_100058D00();

      swift_errorRelease();
      swift_release();
    }
    else
    {
      swift_release();

      return 0;
    }
  }
  return v29;
}

uint64_t sub_100016A80()
{
  return type metadata accessor for _DPDediscoPCCNetworkingService();
}

uint64_t sub_100016A88()
{
  uint64_t result = sub_100059020();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_100016B2C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }
  return swift_release();
}

uint64_t sub_100016B84(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_100016BD4()
{
  swift_errorRelease();
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100016C0C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_100016C4C(uint64_t a1, uint64_t a2)
{
  sub_100015A34(a1, a2, *(void *)(v2 + 16), *(NSObject **)(v2 + 24));
}

void *sub_100016C54(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_100016C98(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_100016CDC(uint64_t *a1)
{
  return sub_100015B80(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48));
}

uint64_t *sub_100016D00(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t sub_100016D64(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BaaSignedDonation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100016DC8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for BaaSignedDonation(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100016E24(uint64_t a1)
{
  return sub_100015D54(a1, *(void *)(v1 + 16));
}

uint64_t sub_100016E40(uint64_t a1)
{
  return sub_100015ED8(a1, *(void *)(v1 + 16));
}

uint64_t sub_100016E5C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }
  return swift_retain();
}

uint64_t sub_100016EB4(uint64_t *a1)
{
  return sub_1000497C4(a1, *(void *)(v1 + 16));
}

uint64_t sub_100016ED0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100016F18(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_100016C98(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100016F74(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BaaCertificateChain(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t *sub_100016FD8(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

id DPPPM_0_2_1_PayloadEncoderShim.init()()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DPPPM_0_2_1_PayloadEncoderShim();
  return objc_msgSendSuper2(&v2, "init");
}

uint64_t type metadata accessor for DPPPM_0_2_1_PayloadEncoderShim()
{
  return self;
}

id DPPPM_0_2_1_PayloadEncoderShim.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DPPPM_0_2_1_PayloadEncoderShim();
  return objc_msgSendSuper2(&v2, "dealloc");
}

unint64_t static DPPPM_0_2_1_PayloadEncoderShim.encodedTaskConfig(taskInfo:leaderAggregatorEndpoint:helperAggregatorEndpoint:timePrecision:maxBatchQueryCount:minBatchSize:maxBatchSize:taskExpiration:encodedVDAFConfig:)(void *a1, void *a2, void *a3, uint64_t a4, __int16 a5, int a6, int a7, unint64_t a8, void *a9)
{
  return sub_10001BE40(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t sub_100017130()
{
  uint64_t result = sub_100023E38();
  if (!v1)
  {
    v4[0] = sub_10003A594(result);
    v4[1] = v3;
    sub_100019AAC(v4, 0xFF00000001uLL, 1, *(void *)v0, *(void *)(v0 + 8));
    sub_100019AAC(v4, 0xFFFF00000001uLL, 1, *(void *)(v0 + 16), *(void *)(v0 + 24));
    sub_100019AAC(v4, 0xFFFF00000001uLL, 1, *(void *)(v0 + 32), *(void *)(v0 + 40));
    sub_100019AAC(v4, 0xFFFF00000001uLL, 1, *(void *)(v0 + 48), *(void *)(v0 + 56));
    sub_100018994(8uLL, (uint64_t)v4, *(void *)(v0 + 64));
    sub_100019AAC(v4, 0xFFFF00000001uLL, 1, *(void *)(v0 + 72), *(void *)(v0 + 80));
    return v4[0];
  }
  return result;
}

uint64_t sub_10001724C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = v4;
  long long v7 = v4[7];
  long long v29 = v4[6];
  long long v30 = v7;
  v31[0] = v4[8];
  *(_OWORD *)((char *)v31 + 9) = *(_OWORD *)((char *)v4 + 137);
  long long v8 = v4[3];
  long long v25 = v4[2];
  long long v26 = v8;
  long long v9 = v4[5];
  long long v27 = v4[4];
  long long v28 = v9;
  long long v10 = v4[1];
  long long v23 = *v4;
  long long v24 = v10;
  uint64_t result = sub_10002F828(a1, a2, a3, a4);
  if (!v5)
  {
    uint64_t v12 = result;
    int v13 = *((unsigned __int16 *)v6 + 84);
    char v14 = *((unsigned char *)v6 + 176);
    uint64_t v15 = *((void *)v6 + 23);
    char v16 = *((unsigned char *)v6 + 192);
    char v17 = *((unsigned char *)v6 + 160);
    LOBYTE(v20[0]) = *((unsigned char *)v6 + 170) & 1;
    char v22 = v14 & 1;
    char v21 = v16 & 1;
    uint64_t result = PPM_0_2_1.RealNumber.RealNumberTypeSelector.encodedLength(with:)(v17, v13 | (LOBYTE(v20[0]) << 16), v14 & 1, v15, v16 & 1);
    uint64_t v18 = result + 1;
    if (__OFADD__(result, 1))
    {
      __break(1u);
    }
    else
    {
      uint64_t result = v12 + v18;
      if (!__OFADD__(v12, v18))
      {
        v20[0] = sub_10003A594(result);
        v20[1] = v19;
        sub_100019EE0((uint64_t)v20);
        return v20[0];
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_100017368()
{
  uint64_t v2 = *v0;
  uint64_t v3 = *((unsigned int *)v0 + 1);
  memcpy(__dst, v0 + 8, sizeof(__dst));
  long long v10 = xmmword_10005DFF0;
  long long v11 = xmmword_10005E000;
  uint64_t v9 = v2 | (v3 << 32);
  uint64_t v12 = 0x100000000000000;
  uint64_t result = PPM_0_2_1.DPConfig.DPMechanismSelector.encodedLength(with:)((uint64_t)&v9);
  if (!v1)
  {
    if (__OFADD__(result++, 1))
    {
      __break(1u);
    }
    else
    {
      v7[0] = sub_10003A594(result);
      v7[1] = v6;
      sub_100018C78(1uLL, (uint64_t)v7, v3);
      sub_10001A1C8((uint64_t)v7, (uint64_t)&v9);
      return v7[0];
    }
  }
  return result;
}

uint64_t sub_10001745C()
{
  LOBYTE(v5[0]) = 1;
  uint64_t result = PPM_0_2_1.VDAFConfig.encodedLength(with:)();
  if (!v1)
  {
    v5[0] = sub_10003A594(result);
    v5[1] = v3;
    sub_100019AAC(v5, 0xFFFF00000001uLL, 1, *(void *)v0, *(void *)(v0 + 8));
    char v4 = *(unsigned char *)(v0 + 16);
    sub_100018C78(4uLL, (uint64_t)v5, *(_DWORD *)(v0 + 20));
    memcpy(__dst, (const void *)(v0 + 24), sizeof(__dst));
    sub_10001AAE4((uint64_t)v5, v4);
    return v5[0];
  }
  return result;
}

uint64_t sub_10001754C()
{
  uint64_t result = PPM_0_2_1.Token.encodedLength(with:)(0, 1);
  if (!v1)
  {
    uint64_t v5 = sub_10003A594(result);
    unint64_t v6 = v3;
    sub_100018F5C(2uLL, (uint64_t)&v5, *v0);
    sub_100019AAC(&v5, 0x2000000020uLL, 1, *((void *)v0 + 1), *((void *)v0 + 2));
    sub_100019AAC(&v5, 0x2000000020uLL, 1, *((void *)v0 + 3), *((void *)v0 + 4));
    sub_10001FA84();
    swift_allocError();
    *(void *)uint64_t v4 = 0xD000000000000052;
    *(void *)(v4 + 8) = 0x8000000100062840;
    *(unsigned char *)(v4 + 16) = 1;
    swift_willThrow();
    return sub_100016B2C(v5, v6);
  }
  return result;
}

uint64_t sub_100017640(uint64_t a1, unint64_t a2)
{
  return sub_1000178C0(a1, a2);
}

uint64_t sub_100017658(uint64_t a1, unint64_t a2)
{
  unint64_t v5 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_12;
      }
      unint64_t v5 = HIDWORD(a1) - (int)a1;
LABEL_6:
      sub_100016E5C(a1, a2);
LABEL_7:
      sub_10003B748(v5, 0x1000000010uLL);
      if (v2) {
        return sub_100016B2C(a1, a2);
      }
      uint64_t v8 = sub_10003B948(0x1000000010);
      sub_100016B2C(a1, a2);
      if (__OFADD__(v5, v8))
      {
        __break(1u);
LABEL_12:
        __break(1u);
LABEL_13:
        __break(1u);
        JUMPOUT(0x10001777CLL);
      }
      v11[0] = sub_10003A594(v5 + v8);
      v11[1] = v9;
      sub_100019AAC(v11, 0x1000000010uLL, 1, a1, a2);
      return v11[0];
    case 2uLL:
      uint64_t v7 = *(void *)(a1 + 16);
      uint64_t v6 = *(void *)(a1 + 24);
      unint64_t v5 = v6 - v7;
      if (!__OFSUB__(v6, v7)) {
        goto LABEL_6;
      }
      goto LABEL_13;
    case 3uLL:
      goto LABEL_7;
    default:
      unint64_t v5 = BYTE6(a2);
      goto LABEL_7;
  }
}

uint64_t sub_10001778C(uint64_t a1, unint64_t a2)
{
  unint64_t v5 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_12;
      }
      unint64_t v5 = HIDWORD(a1) - (int)a1;
LABEL_6:
      sub_100016E5C(a1, a2);
LABEL_7:
      sub_10003B748(v5, 0x2000000020uLL);
      if (v2) {
        return sub_100016B2C(a1, a2);
      }
      uint64_t v8 = sub_10003B948(0x2000000020);
      sub_100016B2C(a1, a2);
      if (__OFADD__(v5, v8))
      {
        __break(1u);
LABEL_12:
        __break(1u);
LABEL_13:
        __break(1u);
        JUMPOUT(0x1000178B0);
      }
      v11[0] = sub_10003A594(v5 + v8);
      v11[1] = v9;
      sub_100019AAC(v11, 0x2000000020uLL, 1, a1, a2);
      return v11[0];
    case 2uLL:
      uint64_t v7 = *(void *)(a1 + 16);
      uint64_t v6 = *(void *)(a1 + 24);
      unint64_t v5 = v6 - v7;
      if (!__OFSUB__(v6, v7)) {
        goto LABEL_6;
      }
      goto LABEL_13;
    case 3uLL:
      goto LABEL_7;
    default:
      unint64_t v5 = BYTE6(a2);
      goto LABEL_7;
  }
}

uint64_t sub_1000178C0(uint64_t a1, unint64_t a2)
{
  unint64_t v5 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_12;
      }
      unint64_t v5 = HIDWORD(a1) - (int)a1;
LABEL_6:
      sub_100016E5C(a1, a2);
LABEL_7:
      sub_10003B748(v5, 0xFFFF00000001uLL);
      if (v2) {
        return sub_100016B2C(a1, a2);
      }
      uint64_t v8 = sub_10003B948(0xFFFF00000001);
      sub_100016B2C(a1, a2);
      if (__OFADD__(v5, v8))
      {
        __break(1u);
LABEL_12:
        __break(1u);
LABEL_13:
        __break(1u);
        JUMPOUT(0x1000179F0);
      }
      v11[0] = sub_10003A594(v5 + v8);
      v11[1] = v9;
      sub_100019AAC(v11, 0xFFFF00000001uLL, 1, a1, a2);
      return v11[0];
    case 2uLL:
      uint64_t v7 = *(void *)(a1 + 16);
      uint64_t v6 = *(void *)(a1 + 24);
      unint64_t v5 = v6 - v7;
      if (!__OFSUB__(v6, v7)) {
        goto LABEL_6;
      }
      goto LABEL_13;
    case 3uLL:
      goto LABEL_7;
    default:
      unint64_t v5 = BYTE6(a2);
      goto LABEL_7;
  }
}

uint64_t sub_100017A00(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v7 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_14;
      }
      unint64_t v7 = HIDWORD(a1) - (int)a1;
LABEL_6:
      sub_100016E5C(a1, a2);
LABEL_7:
      sub_10003B748(v7, 0x1000000010uLL);
      if (v3) {
        return sub_100016B2C(a1, a2);
      }
      uint64_t v10 = sub_10003B948(0x1000000010);
      sub_100016B2C(a1, a2);
      unint64_t v11 = v7 + v10;
      if (__OFADD__(v7, v10))
      {
        __break(1u);
        goto LABEL_13;
      }
      if (__OFADD__(v11, 8))
      {
LABEL_13:
        __break(1u);
LABEL_14:
        __break(1u);
LABEL_15:
        __break(1u);
        JUMPOUT(0x100017B58);
      }
      v14[0] = sub_10003A594(v11 + 8);
      v14[1] = v12;
      sub_100019AAC(v14, 0x1000000010uLL, 1, a1, a2);
      sub_100018994(8uLL, (uint64_t)v14, a3);
      return v14[0];
    case 2uLL:
      uint64_t v9 = *(void *)(a1 + 16);
      uint64_t v8 = *(void *)(a1 + 24);
      unint64_t v7 = v8 - v9;
      if (!__OFSUB__(v8, v9)) {
        goto LABEL_6;
      }
      goto LABEL_15;
    case 3uLL:
      goto LABEL_7;
    default:
      unint64_t v7 = BYTE6(a2);
      goto LABEL_7;
  }
}

uint64_t static DPPPM_0_2_1_PayloadEncoderShim.encodedPINE64VDAFConfig(l2NormBound:numFractionalBits:length:chunkLength:chunkLengthNormEquality:numProofs:wraparoundCheckCount:encodedDPConfig:)(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4, uint64_t a5, unsigned __int8 a6, unsigned __int16 a7, void *a8)
{
  return sub_10001E000(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t static DPPPM_0_2_1_PayloadEncoderShim.encodedPINE32VDAFConfig(l2NormBound:numFractionalBits:length:chunkLength:chunkLengthNormEquality:numProofs:wraparoundCheckCount:encodedDPConfig:)(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4, uint64_t a5, unsigned __int8 a6, unsigned __int16 a7, void *a8)
{
  return sub_10001E374(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t static DPPPM_0_2_1_PayloadEncoderShim.encodedPINE40VDAFConfig(l2NormBound:numFractionalBits:length:chunkLength:chunkLengthNormEquality:numProofs:wraparoundCheckCount:encodedDPConfig:)(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4, uint64_t a5, unsigned __int8 a6, unsigned __int16 a7, void *a8)
{
  return sub_10001E6E8(a1, a2, a3, a4, a5, a6, a7, a8);
}

Class sub_100017F6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int16 a9, void *a10, uint64_t a11, uint64_t (*a12)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, id))
{
  id v18 = a10;
  uint64_t v19 = a12(a3, a4, a5, a6, a7, a8, a9, v18);
  unint64_t v21 = v20;

  v22.super.isa = sub_100058D70().super.isa;
  sub_100016B2C(v19, v21);
  return v22.super.isa;
}

uint64_t static DPPPM_0_2_1_PayloadEncoderShim.encodedReport(reportID:time:publicShare:leaderHPKEConfigID:leaderEnc:leaderPayload:helperHPKEConfigID:helperEnc:helperPayload:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5, void *a6, uint64_t a7, void *a8, void *a9)
{
  uint64_t v29 = sub_10001BC6C(a1);
  unint64_t v13 = v12;
  uint64_t v28 = sub_10001BC6C(a3);
  unint64_t v15 = v14;
  uint64_t v16 = sub_10001BC6C(a5);
  unint64_t v18 = v17;
  uint64_t v19 = sub_10001BC6C(a6);
  unint64_t v21 = v20;
  uint64_t v30 = sub_10001BC6C(a8);
  unint64_t v27 = v22;
  uint64_t v23 = sub_10001BC6C(a9);
  unint64_t v31 = v24;
  uint64_t v33 = v23;
  uint64_t v25 = sub_10001D490();
  sub_100016B2C(v29, v13);
  sub_100016B2C(v28, v15);
  sub_100016B2C(v16, v18);
  sub_100016B2C(v19, v21);
  sub_100016B2C(v30, v27);
  sub_100016B2C(v33, v31);
  return v25;
}

uint64_t static DPPPM_0_2_1_PayloadEncoderShim.encodedInputShareAAD(taskID:reportID:time:publicShare:)(void *a1, void *a2, unint64_t a3, void *a4)
{
  return sub_10001F73C(a1, a2, a3, a4);
}

uint64_t static DPPPM_0_2_1_PayloadEncoderShim.encodedPlaintextInputShare(taskProvExtensionData:payload:)(uint64_t a1, void *a2)
{
  return sub_10001F8CC(a2);
}

unint64_t sub_100018994(unint64_t result, uint64_t a2, unint64_t a3)
{
  unint64_t v3 = result;
  if (result > 8)
  {
    sub_100059370(49);
    swift_bridgeObjectRelease();
    v14._countAndFlagsBits = sub_1000593D0();
    sub_1000591F0(v14);
    swift_bridgeObjectRelease();
    v15._countAndFlagsBits = 0x206E61687420;
    v15._object = (void *)0xE600000000000000;
    sub_1000591F0(v15);
    sub_100059370(19);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v16._object = (void *)0x8000000100062430;
    v16._countAndFlagsBits = 0xD000000000000017;
    sub_1000591F0(v16);
    swift_bridgeObjectRelease();
    sub_10001FA84();
    swift_allocError();
    *(void *)uint64_t v4 = 0xD000000000000029;
    *(void *)(v4 + 8) = 0x80000001000623E0;
    *(unsigned char *)(v4 + 16) = 3;
    return swift_willThrow();
  }
  if (result)
  {
    uint64_t v5 = 0;
    unint64_t v6 = result - 1;
    do
    {
      uint64_t v8 = v6 - v5;
      if (__OFSUB__(v6, v5))
      {
        __break(1u);
LABEL_22:
        __break(1u);
      }
      if ((unint64_t)(v8 - 0x1000000000000000) >> 61 != 7) {
        goto LABEL_22;
      }
      uint64_t v9 = 8 * v8;
      if (v9 >= -64)
      {
        if (v9 > 64) {
          goto LABEL_11;
        }
        if (v9 < 0)
        {
          if ((unint64_t)v9 <= 0xFFFFFFFFFFFFFFC0) {
            LOBYTE(v10) = 0;
          }
          else {
            unint64_t v10 = a3 << (-(char)v9 & 0x38);
          }
        }
        else
        {
          if ((unint64_t)v9 >= 0x40)
          {
LABEL_11:
            char v11 = 0;
            goto LABEL_16;
          }
          unint64_t v10 = a3 >> (v9 & 0x38);
        }
      }
      else
      {
        LOBYTE(v10) = 0;
      }
      char v11 = v10;
LABEL_16:
      ++v5;
      uint64_t v7 = sub_100016C98(&qword_100080B88);
      v13[3] = v7;
      v13[4] = sub_10001FB00();
      LOBYTE(v13[0]) = v11;
      sub_100016C54(v13, v7);
      sub_100058D40();
      uint64_t result = sub_100016B84((uint64_t)v13);
    }
    while (v3 != v5);
  }
  return result;
}

unint64_t sub_100018C78(unint64_t result, uint64_t a2, unsigned int a3)
{
  unint64_t v3 = result;
  if (result > 4)
  {
    sub_100059370(49);
    swift_bridgeObjectRelease();
    v13._countAndFlagsBits = sub_1000593D0();
    sub_1000591F0(v13);
    swift_bridgeObjectRelease();
    v14._countAndFlagsBits = 0x206E61687420;
    v14._object = (void *)0xE600000000000000;
    sub_1000591F0(v14);
    sub_100059370(19);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v15._object = (void *)0x8000000100062450;
    v15._countAndFlagsBits = 0xD000000000000017;
    sub_1000591F0(v15);
    swift_bridgeObjectRelease();
    sub_10001FA84();
    swift_allocError();
    *(void *)uint64_t v4 = 0xD000000000000029;
    *(void *)(v4 + 8) = 0x80000001000623E0;
    *(unsigned char *)(v4 + 16) = 3;
    return swift_willThrow();
  }
  if (result)
  {
    uint64_t v5 = 0;
    unint64_t v6 = result - 1;
    do
    {
      uint64_t v8 = v6 - v5;
      if (__OFSUB__(v6, v5))
      {
        __break(1u);
LABEL_22:
        __break(1u);
      }
      if ((unint64_t)(v8 - 0x1000000000000000) >> 61 != 7) {
        goto LABEL_22;
      }
      uint64_t v9 = 8 * v8;
      if (v9 >= -32)
      {
        if (v9 > 32) {
          goto LABEL_11;
        }
        if (v9 < 0)
        {
          if ((unint64_t)v9 <= 0xFFFFFFFFFFFFFFE0) {
            LOBYTE(v9) = 0;
          }
          else {
            LOBYTE(v9) = a3 << (-(char)v9 & 0x18);
          }
        }
        else
        {
          if ((unint64_t)v9 >= 0x20)
          {
LABEL_11:
            char v10 = 0;
            goto LABEL_16;
          }
          LODWORD(v9) = a3 >> (v9 & 0x18);
        }
      }
      else
      {
        LOBYTE(v9) = 0;
      }
      char v10 = v9;
LABEL_16:
      ++v5;
      uint64_t v7 = sub_100016C98(&qword_100080B88);
      v12[3] = v7;
      v12[4] = sub_10001FB00();
      LOBYTE(v12[0]) = v10;
      sub_100016C54(v12, v7);
      sub_100058D40();
      uint64_t result = sub_100016B84((uint64_t)v12);
    }
    while (v3 != v5);
  }
  return result;
}

unint64_t sub_100018F5C(unint64_t result, uint64_t a2, int a3)
{
  unint64_t v4 = result;
  if (result <= 2)
  {
    if (result)
    {
      unint64_t v6 = (result - 0x1000000000000001) >> 61;
      if (v6 != 7) {
        goto LABEL_21;
      }
      int v3 = a3;
      if (8 * result - 25 < 0xFFFFFFFFFFFFFFDFLL)
      {
LABEL_6:
        LOBYTE(v7) = 0;
        goto LABEL_11;
      }
      unint64_t v6 = 8 * result - 8;
      if ((v6 & 0x8000000000000000) != 0) {
        goto LABEL_22;
      }
      BOOL v8 = v6 >= 0x10;
      int v9 = (unsigned __int16)a3 >> (v6 & 8);
      if (v8) {
        LOBYTE(v7) = 0;
      }
      else {
        LOBYTE(v7) = v9;
      }
      while (1)
      {
LABEL_11:
        uint64_t v10 = sub_100016C98(&qword_100080B88);
        uint64_t v14 = v10;
        unint64_t v15 = sub_10001FB00();
        LOBYTE(v13) = v7;
        sub_100016C54(&v13, v10);
        sub_100058D40();
        uint64_t result = sub_100016B84((uint64_t)&v13);
        if (v4 == 1) {
          return result;
        }
        unint64_t v6 = v4 - 2;
        if (__OFSUB__(v4, 2)) {
          break;
        }
        if ((v4 - 0x1000000000000002) >> 61 == 7)
        {
          v6 *= 8;
          if (v6 - 17 < 0xFFFFFFFFFFFFFFDFLL) {
            goto LABEL_15;
          }
          if ((v6 & 0x8000000000000000) == 0)
          {
            if (v6 <= 0xF)
            {
              int v11 = (unsigned __int16)v3 >> (v6 & 8);
              goto LABEL_19;
            }
LABEL_15:
            LOBYTE(v11) = 0;
LABEL_19:
            uint64_t v12 = sub_100016C98(&qword_100080B88);
            uint64_t v14 = v12;
            unint64_t v15 = sub_10001FB00();
            LOBYTE(v13) = v11;
            sub_100016C54(&v13, v12);
            sub_100058D40();
            return sub_100016B84((uint64_t)&v13);
          }
LABEL_25:
          if (v6 >= 0xFFFFFFFFFFFFFFF1)
          {
            int v11 = v3 << (-(char)v6 & 8);
            goto LABEL_19;
          }
          goto LABEL_15;
        }
LABEL_21:
        __break(1u);
LABEL_22:
        if (v6 <= 0xFFFFFFFFFFFFFFF0) {
          goto LABEL_6;
        }
        int v7 = v3 << (-(char)v6 & 8);
      }
      __break(1u);
      goto LABEL_25;
    }
  }
  else
  {
    sub_100059370(49);
    swift_bridgeObjectRelease();
    v16._countAndFlagsBits = sub_1000593D0();
    sub_1000591F0(v16);
    swift_bridgeObjectRelease();
    v17._countAndFlagsBits = 0x206E61687420;
    v17._object = (void *)0xE600000000000000;
    sub_1000591F0(v17);
    sub_100059370(19);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v18._object = (void *)0x8000000100062410;
    v18._countAndFlagsBits = 0xD000000000000017;
    sub_1000591F0(v18);
    swift_bridgeObjectRelease();
    sub_10001FA84();
    swift_allocError();
    *(void *)uint64_t v5 = 0xD000000000000029;
    *(void *)(v5 + 8) = 0x80000001000623E0;
    *(unsigned char *)(v5 + 16) = 3;
    return swift_willThrow();
  }
  return result;
}

unint64_t sub_100019308(unint64_t result, uint64_t a2, char a3)
{
  if (result <= 1)
  {
    if (result)
    {
      uint64_t v6 = sub_100016C98(&qword_100080B88);
      unint64_t v7 = sub_10001FB00();
      LOBYTE(v5) = a3;
      sub_100016C54(&v5, v6);
      sub_100058D40();
      return sub_100016B84((uint64_t)&v5);
    }
  }
  else
  {
    sub_100059370(49);
    swift_bridgeObjectRelease();
    v8._countAndFlagsBits = sub_1000593D0();
    sub_1000591F0(v8);
    swift_bridgeObjectRelease();
    v9._countAndFlagsBits = 0x206E61687420;
    v9._object = (void *)0xE600000000000000;
    sub_1000591F0(v9);
    sub_100059370(19);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v10._object = (void *)0x8000000100062790;
    v10._countAndFlagsBits = 0xD000000000000016;
    sub_1000591F0(v10);
    swift_bridgeObjectRelease();
    sub_10001FA84();
    swift_allocError();
    *(void *)uint64_t v3 = 0xD000000000000029;
    *(void *)(v3 + 8) = 0x80000001000623E0;
    *(unsigned char *)(v3 + 16) = 3;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_100019538(unint64_t a1, int a2)
{
  if ((a2 & 0x10000) != 0) {
    a1 = 0;
  }
  char v5 = (a2 & 0x10001) != 0;
  long long v6 = v2[2];
  long long v22 = v2[3];
  uint64_t v23 = *((void *)v2 + 8);
  long long v7 = *v2;
  long long v20 = v2[1];
  long long v21 = v6;
  long long v19 = v7;
  uint64_t result = PPM_0_2_1.Token.encodedLength(with:)(a1, v5);
  if (!v3)
  {
    uint64_t v9 = result;
    long long v10 = *(long long *)((char *)v2 + 88);
    long long v15 = *(long long *)((char *)v2 + 72);
    long long v16 = v10;
    long long v17 = *(long long *)((char *)v2 + 104);
    unint64_t v18 = *((void *)v2 + 15);
    uint64_t v11 = sub_10003EF5C();
    BOOL v12 = __OFADD__(v9, v11);
    uint64_t result = v9 + v11;
    if (v12)
    {
      __break(1u);
    }
    else
    {
      v14[0] = sub_10003A594(result);
      v14[1] = v13;
      sub_10001B5D0(v14, a1, v5);
      sub_100018F5C(2uLL, (uint64_t)v14, (unsigned __int16)v15);
      sub_100019AAC(v14, 0xFFFF00000001uLL, 1, *((uint64_t *)&v15 + 1), v16);
      sub_100019AAC(v14, 0x2000000000uLL, 1, *((uint64_t *)&v16 + 1), v17);
      sub_100019AAC(v14, 0xFFFF00000000uLL, 1, *((uint64_t *)&v17 + 1), v18);
      return v14[0];
    }
  }
  return result;
}

uint64_t sub_1000196B4(char a1)
{
  uint64_t result = PPM_0_2_1.VDAFConfig.VDAFTypeSelector.encodedLength(with:)(a1);
  if (!v1)
  {
    unint64_t v4 = result;
    if (result)
    {
      if (result <= 14)
      {
        uint64_t v6 = 0;
        unint64_t v7 = 0;
      }
      else
      {
        sub_100058CF0();
        swift_allocObject();
        uint64_t v5 = sub_100058CE0();
        if (v4 > 0x7FFFFFFE)
        {
          sub_100058D30();
          uint64_t v6 = swift_allocObject();
          unint64_t v7 = v5 | 0x8000000000000000;
          *(void *)(v6 + 16) = 0;
          *(void *)(v6 + 24) = 0;
        }
        else
        {
          uint64_t v6 = 0;
          unint64_t v7 = v5 | 0x4000000000000000;
        }
      }
    }
    else
    {
      uint64_t v6 = 0;
      unint64_t v7 = 0xC000000000000000;
    }
    v8[0] = v6;
    v8[1] = v7;
    sub_10001AAE4((uint64_t)v8, a1);
    return v8[0];
  }
  return result;
}

uint64_t sub_1000197C0(char a1, uint64_t a2, char a3)
{
  char v5 = a2;
  unint64_t v7 = a2 & 0xFFFFFFFF00000000;
  LOBYTE(v13[0]) = a2 & 1;
  char v14 = a3 & 1;
  uint64_t result = PPM_0_2_1.QueryConfig.QueryTypeSelector.encodedLength(with:)(a1, a2 & 1, a3 & 1);
  if (!v3)
  {
    unint64_t v9 = result;
    if (result)
    {
      if (result <= 14)
      {
        uint64_t v11 = 0;
        unint64_t v12 = 0;
      }
      else
      {
        sub_100058CF0();
        swift_allocObject();
        uint64_t v10 = sub_100058CE0();
        if (v9 > 0x7FFFFFFE)
        {
          sub_100058D30();
          uint64_t v11 = swift_allocObject();
          unint64_t v12 = v10 | 0x8000000000000000;
          *(void *)(v11 + 16) = 0;
          *(void *)(v11 + 24) = 0;
        }
        else
        {
          uint64_t v11 = 0;
          unint64_t v12 = v10 | 0x4000000000000000;
        }
      }
    }
    else
    {
      uint64_t v11 = 0;
      unint64_t v12 = 0xC000000000000000;
    }
    v13[0] = v11;
    v13[1] = v12;
    char v14 = v5 & 1;
    sub_10003765C((unint64_t)v13, a1, v7 | v5 & 1, a3 & 1);
    return v13[0];
  }
  return result;
}

uint64_t sub_1000198E8(int a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t result = PPM_0_2_1.PlaintextInputShare.encodedLength(with:)(a1 & 0x1FFFF, a2, a3, a4);
  if (!v4)
  {
    v12[0] = sub_10003A594(result);
    v12[1] = v10;
    int v11 = a1;
    if ((a1 & 0x10000) != 0) {
      int v11 = 0;
    }
    sub_100038604(v12, 0xFFFF00000000uLL, v11 | (((a1 & 0x10100) != 0) << 8), a2);
    sub_100019AAC(v12, 0xFFFFFFFF00000000, 1, a3, a4);
    return v12[0];
  }
  return result;
}

uint64_t sub_1000199B8(uint64_t a1)
{
  uint64_t result = PPM_0_2_1.DPConfig.DPMechanismSelector.encodedLength(with:)(a1);
  if (!v1)
  {
    unint64_t v4 = result;
    if (result)
    {
      if (result <= 14)
      {
        uint64_t v6 = 0;
        unint64_t v7 = 0;
      }
      else
      {
        sub_100058CF0();
        swift_allocObject();
        uint64_t v5 = sub_100058CE0();
        if (v4 > 0x7FFFFFFE)
        {
          sub_100058D30();
          uint64_t v6 = swift_allocObject();
          unint64_t v7 = v5 | 0x8000000000000000;
          *(void *)(v6 + 16) = 0;
          *(void *)(v6 + 24) = 0;
        }
        else
        {
          uint64_t v6 = 0;
          unint64_t v7 = v5 | 0x4000000000000000;
        }
      }
    }
    else
    {
      uint64_t v6 = 0;
      unint64_t v7 = 0xC000000000000000;
    }
    v8[0] = v6;
    v8[1] = v7;
    sub_10001A1C8((uint64_t)v8, a1);
    return v8[0];
  }
  return result;
}

uint64_t sub_100019AAC(uint64_t *a1, unint64_t a2, __int16 a3, uint64_t a4, unint64_t a5)
{
  if ((a3 & 0x100) != 0)
  {
    sub_10001FA84();
    swift_allocError();
    *(void *)uint64_t v14 = 0xD000000000000085;
    *(void *)(v14 + 8) = 0x80000001000627B0;
    *(unsigned char *)(v14 + 16) = 1;
    return swift_willThrow();
  }
  else
  {
    uint64_t result = sub_100025C60(a2, a3, a4, a5);
    if (!v5)
    {
      uint64_t v11 = *a1;
      unint64_t v12 = a1[1];
      uint64_t v13 = 0;
      switch(v12 >> 62)
      {
        case 1uLL:
          LODWORD(v13) = HIDWORD(v11) - v11;
          if (__OFSUB__(HIDWORD(v11), v11)) {
            goto LABEL_24;
          }
          uint64_t v13 = (int)v13;
LABEL_10:
          BOOL v18 = __OFADD__(v13, result);
          Swift::Int v19 = v13 + result;
          if (v18)
          {
            __break(1u);
LABEL_22:
            __break(1u);
LABEL_23:
            __break(1u);
LABEL_24:
            __break(1u);
LABEL_25:
            __break(1u);
LABEL_26:
            __break(1u);
LABEL_27:
            __break(1u);
            JUMPOUT(0x100019C7CLL);
          }
          sub_100058D50(v19);
          int64_t v20 = sub_10003B948(a2);
          if (v20 >= 1)
          {
            LODWORD(v21) = 0;
            switch(a5 >> 62)
            {
              case 1uLL:
                if (__OFSUB__(HIDWORD(a4), a4)) {
                  goto LABEL_26;
                }
                unint64_t v21 = HIDWORD(a4) - (int)a4;
LABEL_17:
                if ((v21 & 0x8000000000000000) != 0) {
                  goto LABEL_22;
                }
                if (HIDWORD(v21)) {
                  goto LABEL_23;
                }
LABEL_19:
                sub_100018C78(v20, (uint64_t)a1, v21);
                break;
              case 2uLL:
                uint64_t v23 = *(void *)(a4 + 16);
                uint64_t v22 = *(void *)(a4 + 24);
                unint64_t v21 = v22 - v23;
                if (!__OFSUB__(v22, v23)) {
                  goto LABEL_17;
                }
                goto LABEL_27;
              case 3uLL:
                goto LABEL_19;
              default:
                LODWORD(v21) = BYTE6(a5);
                goto LABEL_19;
            }
          }
          sub_100016E5C(a4, a5);
          sub_10001B808(a4, a5);
          uint64_t result = sub_100016B2C(a4, a5);
          break;
        case 2uLL:
          uint64_t v17 = v11 + 16;
          uint64_t v16 = *(void *)(v11 + 16);
          uint64_t v15 = *(void *)(v17 + 8);
          BOOL v18 = __OFSUB__(v15, v16);
          uint64_t v13 = v15 - v16;
          if (!v18) {
            goto LABEL_10;
          }
          goto LABEL_25;
        case 3uLL:
          goto LABEL_10;
        default:
          uint64_t v13 = BYTE6(v12);
          goto LABEL_10;
      }
    }
  }
  return result;
}

uint64_t sub_100019C9C(uint64_t a1, char a2, uint64_t a3, char a4, unint64_t a5, char a6)
{
  if (a2 != 4)
  {
    switch(a2)
    {
      case 1:
        if ((a3 & 0x10000) == 0) {
          return sub_100018F5C(2uLL, a1, a3);
        }
        sub_10001FA84();
        swift_allocError();
        break;
      case 2:
        if ((a4 & 1) == 0) {
          return sub_100018C78(4uLL, a1, HIDWORD(a3));
        }
        sub_10001FA84();
        swift_allocError();
        break;
      case 3:
        if ((a6 & 1) == 0) {
          return sub_100018994(8uLL, a1, a5);
        }
        sub_10001FA84();
        swift_allocError();
        break;
      default:
        sub_100059370(31);
        v10._countAndFlagsBits = 0xD00000000000001BLL;
        v10._object = (void *)0x8000000100062180;
        sub_1000591F0(v10);
        sub_100059380();
        v11._countAndFlagsBits = 11872;
        v11._object = (void *)0xE200000000000000;
        sub_1000591F0(v11);
        sub_10001FA84();
        swift_allocError();
        *(void *)uint64_t v6 = 0;
        *(void *)(v6 + 8) = 0xE000000000000000;
LABEL_17:
        char v7 = 4;
        goto LABEL_18;
    }
    *(void *)uint64_t v6 = 0xD000000000000023;
    *(void *)(v6 + 8) = (unint64_t)(v9 - 32) | 0x8000000000000000;
    goto LABEL_17;
  }
  sub_10001FA84();
  swift_allocError();
  *(void *)uint64_t v6 = 0xD000000000000034;
  *(void *)(v6 + 8) = 0x8000000100062140;
  char v7 = 1;
LABEL_18:
  *(unsigned char *)(v6 + 16) = v7;
  return swift_willThrow();
}

unint64_t sub_100019EE0(uint64_t a1)
{
  char v3 = *(unsigned char *)v1;
  uint64_t v4 = *(unsigned __int16 *)(v1 + 8);
  char v5 = *(unsigned char *)(v1 + 10);
  uint64_t v6 = *(unsigned int *)(v1 + 12);
  char v7 = *(unsigned char *)(v1 + 16);
  unint64_t v8 = *(void *)(v1 + 24);
  char v9 = *(unsigned char *)(v1 + 32);
  char v38 = *(unsigned char *)(v1 + 40);
  unsigned int v42 = *(_DWORD *)(v1 + 44);
  uint64_t v40 = *(unsigned __int16 *)(v1 + 48);
  uint64_t v39 = *(unsigned int *)(v1 + 52);
  char v36 = *(unsigned char *)(v1 + 56);
  char v37 = *(unsigned char *)(v1 + 50);
  unint64_t v41 = *(void *)(v1 + 64);
  char v35 = *(unsigned char *)(v1 + 72);
  char v30 = *(unsigned char *)(v1 + 80);
  unsigned int v34 = *(_DWORD *)(v1 + 84);
  uint64_t v32 = *(unsigned __int16 *)(v1 + 88);
  uint64_t v31 = *(unsigned int *)(v1 + 92);
  char v28 = *(unsigned char *)(v1 + 96);
  char v29 = *(unsigned char *)(v1 + 90);
  unint64_t v33 = *(void *)(v1 + 104);
  char v27 = *(unsigned char *)(v1 + 112);
  char v22 = *(unsigned char *)(v1 + 120);
  unsigned int v26 = *(_DWORD *)(v1 + 124);
  uint64_t v24 = *(unsigned __int16 *)(v1 + 128);
  uint64_t v23 = *(unsigned int *)(v1 + 132);
  char v20 = *(unsigned char *)(v1 + 136);
  char v21 = *(unsigned char *)(v1 + 130);
  unint64_t v25 = *(void *)(v1 + 144);
  char v19 = *(unsigned char *)(v1 + 152);
  unint64_t result = sub_100018C78(1uLL, a1, *(_DWORD *)(v1 + 4));
  if (!v2)
  {
    sub_100019C9C(a1, v3, v4 | (v6 << 32) | ((unint64_t)(v5 & 1) << 16), v7 & 1, v8, v9 & 1);
    sub_100018C78(1uLL, a1, v42);
    sub_100019C9C(a1, v38, v40 | (v39 << 32) | ((unint64_t)(v37 & 1) << 16), v36 & 1, v41, v35 & 1);
    sub_100018C78(1uLL, a1, v34);
    sub_100019C9C(a1, v30, v32 | (v31 << 32) | ((unint64_t)(v29 & 1) << 16), v28 & 1, v33, v27 & 1);
    sub_100018C78(1uLL, a1, v26);
    sub_100019C9C(a1, v22, v24 | (v23 << 32) | ((unint64_t)(v21 & 1) << 16), v20 & 1, v25, v19 & 1);
    char v11 = *(unsigned char *)(v1 + 160);
    unsigned int v12 = *(_DWORD *)(v1 + 164);
    uint64_t v13 = *(unsigned __int16 *)(v1 + 168);
    char v14 = *(unsigned char *)(v1 + 170);
    uint64_t v15 = *(unsigned int *)(v1 + 172);
    char v16 = *(unsigned char *)(v1 + 176);
    unint64_t v17 = *(void *)(v1 + 184);
    char v18 = *(unsigned char *)(v1 + 192);
    sub_100018C78(1uLL, a1, v12);
    return sub_100019C9C(a1, v11, v13 | (v15 << 32) | ((unint64_t)(v14 & 1) << 16), v16 & 1, v17, v18 & 1);
  }
  return result;
}

uint64_t sub_10001A1C8(uint64_t a1, uint64_t a2)
{
  sub_10001FBE4(a2, (uint64_t)v19, &qword_100080B58);
  sub_10001FBE4(a2, (uint64_t)v20, &qword_100080B58);
  if (v20[0] == 8)
  {
    sub_10001FA84();
    swift_allocError();
    *(void *)uint64_t v6 = 0xD000000000000034;
    *(void *)(v6 + 8) = 0x8000000100062140;
    char v7 = 1;
  }
  else
  {
    switch(v20[0])
    {
      case 1:
        sub_10001FBE4(v2, (uint64_t)&v21, &qword_100080B80);
        uint64_t result = sub_10001FBE4((uint64_t)&v21, (uint64_t)v68, &qword_100080B80);
        if (v68[0] == 1)
        {
          sub_10001FA84();
          swift_allocError();
          unint64_t v9 = 0xD000000000000020;
          goto LABEL_19;
        }
        return result;
      case 2:
        sub_10001FBE4(v2 + 8, (uint64_t)v22, &qword_100080B78);
        sub_10001FBE4((uint64_t)v22, (uint64_t)&v61, &qword_100080B78);
        LOBYTE(v11) = v61;
        if (v61 == 4)
        {
          sub_10001FA84();
          swift_allocError();
          unint64_t v9 = 0xD00000000000001FLL;
          goto LABEL_19;
        }
        unint64_t v12 = HIDWORD(v61);
        uint64_t v13 = v62;
        char v14 = v63;
        uint64_t v15 = v64;
        char v16 = v65;
        unint64_t v17 = v66;
        char v18 = v67;
        goto LABEL_27;
      case 3:
        sub_10001FBE4(v2 + 48, (uint64_t)v23, &qword_100080B70);
        sub_10001FBE4((uint64_t)v23, (uint64_t)v59, &qword_100080B70);
        if (LOBYTE(v59[0]) == 4)
        {
          sub_10001FA84();
          swift_allocError();
          unint64_t v9 = 0xD000000000000025;
          goto LABEL_19;
        }
        long long v30 = v59[2];
        v31[0] = v60[0];
        *(_OWORD *)((char *)v31 + 9) = *(_OWORD *)((char *)v60 + 9);
        long long v28 = v59[0];
        long long v29 = v59[1];
        return sub_10001C660(a1);
      case 4:
        sub_10001FBE4(v2 + 128, (uint64_t)v24, &qword_100080B68);
        sub_10001FBE4((uint64_t)v24, (uint64_t)&v51, &qword_100080B68);
        unint64_t v11 = v52;
        if (v52 == 4)
        {
          sub_10001FA84();
          swift_allocError();
          unint64_t v9 = 0xD000000000000021;
          goto LABEL_19;
        }
        uint64_t v13 = v53;
        char v14 = v54;
        uint64_t v15 = v55;
        char v16 = v56;
        unint64_t v17 = v57;
        char v18 = v58;
        uint64_t result = sub_100018C78(4uLL, a1, v51);
        if (!v3)
        {
          unint64_t v12 = HIDWORD(v11);
LABEL_27:
          uint64_t result = sub_100018C78(1uLL, a1, v12);
          if (!v3) {
            return sub_100019C9C(a1, v11, v13 | (v15 << 32) | ((unint64_t)(v14 & 1) << 16), v16 & 1, v17, v18 & 1);
          }
        }
        return result;
      case 5:
        sub_10001FBE4(v2 + 176, (uint64_t)v25, &qword_100080B40);
        sub_10001FBE4((uint64_t)v25, (uint64_t)v49, &qword_100080B40);
        if (sub_10001FAEC((unsigned __int8 *)v49) == 1)
        {
          sub_10001FA84();
          swift_allocError();
          unint64_t v9 = 0xD000000000000038;
          goto LABEL_19;
        }
        v31[8] = v49[6];
        v31[9] = v49[7];
        v32[0] = v50[0];
        *(_OWORD *)((char *)v32 + 9) = *(_OWORD *)((char *)v50 + 9);
        v31[4] = v49[2];
        v31[5] = v49[3];
        v31[6] = v49[4];
        v31[7] = v49[5];
        _OWORD v31[2] = v49[0];
        v31[3] = v49[1];
        return sub_10001C77C(a1);
      case 6:
        sub_10001FBE4(v2 + 336, (uint64_t)v26, &qword_100080B48);
        sub_10001FBE4((uint64_t)v26, (uint64_t)v47, &qword_100080B48);
        if (sub_10001FAEC((unsigned __int8 *)v47) == 1)
        {
          sub_10001FA84();
          swift_allocError();
          unint64_t v9 = 0xD000000000000050;
          goto LABEL_19;
        }
        v32[12] = v47[10];
        v32[13] = v47[11];
        char v33 = v48;
        v32[8] = v47[6];
        v32[9] = v47[7];
        v32[10] = v47[8];
        v32[11] = v47[9];
        v32[4] = v47[2];
        v32[5] = v47[3];
        v32[6] = v47[4];
        v32[7] = v47[5];
        v32[2] = v47[0];
        v32[3] = v47[1];
        return sub_100019EE0(a1);
      case 7:
        sub_10001FBE4(v2 + 536, (uint64_t)v27, &qword_100080B50);
        sub_10001FBE4((uint64_t)v27, (uint64_t)v45, &qword_100080B50);
        if (sub_10001FAD8((uint64_t)v45) != 1)
        {
          long long v42 = v45[8];
          long long v43 = v45[9];
          v44[0] = *(_OWORD *)v46;
          *(_OWORD *)((char *)v44 + 9) = *(_OWORD *)&v46[9];
          long long v38 = v45[4];
          long long v39 = v45[5];
          long long v40 = v45[6];
          long long v41 = v45[7];
          long long v34 = v45[0];
          long long v35 = v45[1];
          long long v36 = v45[2];
          long long v37 = v45[3];
          return sub_10001C970(a1);
        }
        sub_10001FA84();
        swift_allocError();
        unint64_t v9 = 0xD000000000000053;
LABEL_19:
        *(void *)uint64_t v6 = v9;
        *(void *)(v6 + 8) = (unint64_t)(v10 - 32) | 0x8000000000000000;
LABEL_20:
        char v7 = 4;
        break;
      default:
        sub_100059370(31);
        v69._object = (void *)0x8000000100062180;
        v69._countAndFlagsBits = 0xD00000000000001BLL;
        sub_1000591F0(v69);
        sub_100059380();
        v70._countAndFlagsBits = 11872;
        v70._object = (void *)0xE200000000000000;
        sub_1000591F0(v70);
        sub_10001FA84();
        swift_allocError();
        *(void *)uint64_t v6 = 0;
        *(void *)(v6 + 8) = 0xE000000000000000;
        goto LABEL_20;
    }
  }
  *(unsigned char *)(v6 + 16) = v7;
  return swift_willThrow();
}

unint64_t sub_10001A8D0(uint64_t a1, uint64_t a2)
{
  sub_10001FBE4(a2, (uint64_t)v31, &qword_100080B98);
  unint64_t v27 = v31[0];
  unint64_t v29 = v31[1];
  unint64_t v6 = v31[3];
  uint64_t v36 = v31[2];
  unint64_t v7 = v31[4];
  char v8 = v32;
  uint64_t v9 = *v2;
  uint64_t v10 = *((unsigned int *)v2 + 1);
  unint64_t result = sub_100018C78(1uLL, a1, *((_DWORD *)v2 + 1));
  if (!v3)
  {
    char v24 = v8;
    unint64_t v12 = v36;
    unint64_t v22 = v6;
    uint64_t v26 = v10;
    unint64_t v20 = v7;
    sub_10001FBE4(a2, (uint64_t)v33, &qword_100080B98);
    if (v33[41])
    {
      unint64_t v13 = 0;
      unint64_t v14 = 0;
      uint64_t v36 = 0;
      unint64_t v15 = 0;
      unint64_t v16 = 0;
      unint64_t v28 = 0x1000000000100;
      uint64_t v30 = 0x100000000000000;
      uint64_t v21 = 256;
      uint64_t v23 = 0x1000000000000;
      uint64_t v25 = 0x10000;
      uint64_t v17 = a1;
    }
    else
    {
      *((void *)&v18 + 1) = v12;
      *(void *)&long long v18 = v29;
      unint64_t v15 = v18 >> 24;
      *((void *)&v18 + 1) = v6;
      *(void *)&long long v18 = v12;
      unint64_t v14 = v18 >> 32;
      uint64_t v19 = v24 & 1;
      unint64_t v28 = (v27 >> 8) & 0x1FFFFFFFF0000 | v33[1] | ((unint64_t)(v33[2] & 1) << 8);
      unint64_t v16 = (unsigned __int16)v29;
      uint64_t v21 = (v29 >> 8) & 0x100;
      uint64_t v25 = (v12 >> 8) & 0x10000;
      uint64_t v36 = (v22 >> 8) & 0xFFFFFF000000;
      uint64_t v23 = (v22 >> 8) & 0x1000000000000;
      uint64_t v30 = v19 << 56;
      uint64_t v17 = a1;
      unint64_t v13 = v20;
    }
    memcpy(__dst, v2 + 8, sizeof(__dst));
    v35[0] = v9 | (v26 << 32);
    v35[1] = v28 | (v16 << 56);
    v35[2] = v21 | (v16 >> 8) | (v15 << 16);
    v35[3] = v25 | HIWORD(v15) | (v14 << 24);
    v35[4] = (v14 >> 40) | (v13 << 56) | v36 | v23;
    v35[5] = v30 | (v13 >> 8);
    return sub_10001A1C8(v17, (uint64_t)v35);
  }
  return result;
}

uint64_t sub_10001AAE4(uint64_t a1, char a2)
{
  if (a2 == 13)
  {
    sub_10001FA84();
    swift_allocError();
    *(void *)uint64_t v4 = 0xD000000000000034;
    *(void *)(v4 + 8) = 0x8000000100062140;
    char v5 = 1;
LABEL_33:
    *(unsigned char *)(v4 + 16) = v5;
    return swift_willThrow();
  }
  else
  {
    switch(a2)
    {
      case 0:
        sub_10001FBE4(v2, (uint64_t)&v30, &qword_100080B80);
        uint64_t result = sub_10001FBE4((uint64_t)&v30, (uint64_t)v104, &qword_100080B80);
        if (v104[0] == 1)
        {
          sub_10001FA84();
          swift_allocError();
          unint64_t v8 = 0xD000000000000027;
          goto LABEL_31;
        }
        return result;
      case 1:
        sub_10001FBE4(v2 + 1, (uint64_t)v31, &qword_100080BD8);
        sub_10001FBE4((uint64_t)v31, (uint64_t)v103, &qword_100080BD8);
        if (v103[1])
        {
          sub_10001FA84();
          swift_allocError();
          unint64_t v8 = 0xD000000000000025;
          goto LABEL_31;
        }
        char v10 = v103[0];
        uint64_t v11 = a1;
        return sub_100019308(1uLL, v11, v10);
      case 2:
        sub_10001FBE4(v2 + 4, (uint64_t)v32, &qword_100080BD0);
        sub_10001FBE4((uint64_t)v32, (uint64_t)&v99, &qword_100080BD0);
        if (v102)
        {
          sub_10001FA84();
          swift_allocError();
          unint64_t v8 = 0xD000000000000029;
          goto LABEL_31;
        }
        char v12 = v100;
        unsigned int v13 = v101;
        uint64_t result = sub_100018C78(4uLL, a1, v99);
        if (v3) {
          return result;
        }
        uint64_t v3 = 0;
        uint64_t result = sub_100019308(1uLL, a1, v12);
        goto LABEL_40;
      case 3:
        sub_10001FBE4(v2 + 20, (uint64_t)v33, &qword_100080BC8);
        sub_10001FBE4((uint64_t)v33, (uint64_t)v97, &qword_100080BC8);
        if (v98)
        {
          sub_10001FA84();
          swift_allocError();
          unint64_t v8 = 0xD00000000000002BLL;
          goto LABEL_31;
        }
        unsigned int v13 = v97[1];
        uint64_t result = sub_100018C78(4uLL, a1, v97[0]);
LABEL_40:
        if (v3) {
          return result;
        }
        uint64_t v14 = a1;
        unsigned int v15 = v13;
        return sub_100018C78(4uLL, v14, v15);
      case 4:
        sub_10001FBE4(v2 + 30, (uint64_t)v34, &qword_100080BC0);
        sub_10001FBE4((uint64_t)v34, (uint64_t)&v95, &qword_100080BC0);
        if (v96)
        {
          sub_10001FA84();
          swift_allocError();
          unint64_t v8 = 0xD000000000000023;
          goto LABEL_31;
        }
        int v16 = v95;
        uint64_t v17 = a1;
        goto LABEL_43;
      case 5:
        sub_10001FBE4(v2 + 36, (uint64_t)v35, &qword_100080BB8);
        sub_10001FBE4((uint64_t)v35, (uint64_t)&v93, &qword_100080BB8);
        if (v94)
        {
          sub_10001FA84();
          swift_allocError();
          unint64_t v8 = 0xD000000000000021;
          goto LABEL_31;
        }
        unsigned int v15 = v93;
        goto LABEL_46;
      case 6:
        sub_10001FBE4(v2 + 44, (uint64_t)v36, &qword_100080BB8);
        sub_10001FBE4((uint64_t)v36, (uint64_t)&v91, &qword_100080BB8);
        if (v92)
        {
          sub_10001FA84();
          swift_allocError();
          unint64_t v8 = 0xD000000000000029;
          goto LABEL_31;
        }
        unsigned int v15 = v91;
LABEL_46:
        uint64_t v14 = a1;
        return sub_100018C78(4uLL, v14, v15);
      case 7:
        sub_10001FBE4(v2 + 56, (uint64_t)v37, &qword_100080BB0);
        sub_10001FBE4((uint64_t)v37, (uint64_t)v89, &qword_100080BB0);
        if (BYTE8(v89[0]) == 4)
        {
          sub_10001FA84();
          swift_allocError();
          unint64_t v8 = 0xD000000000000029;
          goto LABEL_31;
        }
        long long v45 = v89[2];
        long long v46 = v89[3];
        long long v47 = v89[4];
        char v48 = v90;
        long long v43 = v89[0];
        long long v44 = v89[1];
        return sub_10001CBC0(a1);
      case 8:
        sub_10001FBE4(v2 + 140, (uint64_t)v38, &qword_100080BA8);
        sub_10001FBE4((uint64_t)v38, (uint64_t)&v84, &qword_100080BA8);
        if (v88)
        {
          sub_10001FA84();
          swift_allocError();
          unint64_t v8 = 0xD000000000000048;
          goto LABEL_31;
        }
        unsigned int v18 = v84;
        char v19 = v85;
        unsigned int v20 = v86;
        char v21 = v87;
        goto LABEL_51;
      case 9:
        sub_10001FBE4(v2 + 156, (uint64_t)v39, &qword_100080BA8);
        sub_10001FBE4((uint64_t)v39, (uint64_t)&v79, &qword_100080BA8);
        if (v83)
        {
          sub_10001FA84();
          swift_allocError();
          unint64_t v8 = 0xD00000000000004FLL;
          goto LABEL_31;
        }
        unsigned int v18 = v79;
        char v19 = v80;
        unsigned int v20 = v81;
        char v21 = v82;
LABEL_51:
        uint64_t result = sub_100018C78(4uLL, a1, v18);
        if (!v3)
        {
          sub_100019308(1uLL, a1, v19);
          sub_100018C78(4uLL, a1, v20);
          uint64_t v11 = a1;
          char v10 = v21;
          return sub_100019308(1uLL, v11, v10);
        }
        return result;
      case 10:
        sub_10001FBE4(v2 + 176, (uint64_t)v40, &qword_100080BA0);
        sub_10001FBE4((uint64_t)v40, (uint64_t)&v69, &qword_100080BA0);
        if (v78)
        {
          sub_10001FA84();
          swift_allocError();
          unint64_t v8 = 0xD00000000000003BLL;
          goto LABEL_31;
        }
        unint64_t v22 = v69;
        unsigned int v23 = v71;
        unsigned int v106 = v70;
        unsigned int v25 = v72;
        unsigned int v24 = v73;
        char v26 = v74;
        char v27 = v75;
        int v28 = v76;
        int v29 = v77;
        goto LABEL_56;
      case 11:
        sub_10001FBE4(v2 + 208, (uint64_t)v41, &qword_100080BA0);
        sub_10001FBE4((uint64_t)v41, (uint64_t)&v59, &qword_100080BA0);
        if (v68)
        {
          sub_10001FA84();
          swift_allocError();
          unint64_t v8 = 0xD00000000000003BLL;
          goto LABEL_31;
        }
        unint64_t v22 = v59;
        unsigned int v23 = v61;
        unsigned int v106 = v60;
        unsigned int v25 = v62;
        unsigned int v24 = v63;
        char v26 = v64;
        char v27 = v65;
        int v28 = v66;
        int v29 = v67;
        goto LABEL_56;
      case 12:
        sub_10001FBE4(v2 + 240, (uint64_t)v42, &qword_100080BA0);
        sub_10001FBE4((uint64_t)v42, (uint64_t)&v49, &qword_100080BA0);
        if (v58)
        {
          sub_10001FA84();
          swift_allocError();
          unint64_t v8 = 0xD00000000000003BLL;
LABEL_31:
          *(void *)uint64_t v4 = v8;
          *(void *)(v4 + 8) = (unint64_t)(v9 - 32) | 0x8000000000000000;
LABEL_32:
          char v5 = 4;
          goto LABEL_33;
        }
        unint64_t v22 = v49;
        unsigned int v23 = v51;
        unsigned int v106 = v50;
        unsigned int v25 = v52;
        unsigned int v24 = v53;
        char v26 = v54;
        char v27 = v55;
        int v28 = v56;
        int v29 = v57;
LABEL_56:
        uint64_t result = sub_100018994(8uLL, a1, v22);
        if (!v3)
        {
          unsigned int v105 = v23;
          sub_100018C78(4uLL, a1, v106);
          sub_100018C78(4uLL, a1, v105);
          sub_100018C78(4uLL, a1, v25);
          sub_100018C78(4uLL, a1, v24);
          sub_100019308(1uLL, a1, v26);
          sub_100019308(1uLL, a1, v27);
          sub_100018F5C(2uLL, a1, v28);
          uint64_t v17 = a1;
          int v16 = v29;
LABEL_43:
          uint64_t result = sub_100018F5C(2uLL, v17, v16);
        }
        break;
      default:
        sub_100059370(31);
        v107._countAndFlagsBits = 0xD00000000000001BLL;
        v107._object = (void *)0x8000000100062180;
        sub_1000591F0(v107);
        sub_100059380();
        v108._countAndFlagsBits = 11872;
        v108._object = (void *)0xE200000000000000;
        sub_1000591F0(v108);
        sub_10001FA84();
        swift_allocError();
        *(void *)uint64_t v4 = 0;
        *(void *)(v4 + 8) = 0xE000000000000000;
        goto LABEL_32;
    }
  }
  return result;
}

uint64_t sub_10001B4D8(uint64_t *a1)
{
  uint64_t result = sub_100019AAC(a1, 0xFFFF00000001uLL, 1, *(void *)v1, *(void *)(v1 + 8));
  if (!v2)
  {
    char v5 = *(unsigned char *)(v1 + 16);
    sub_100018C78(4uLL, (uint64_t)a1, *(_DWORD *)(v1 + 20));
    memcpy(__dst, (const void *)(v1 + 24), sizeof(__dst));
    return sub_10001AAE4((uint64_t)a1, v5);
  }
  return result;
}

unint64_t sub_10001B5D0(uint64_t *a1, uint64_t a2, char a3)
{
  unint64_t result = sub_100018F5C(2uLL, (uint64_t)a1, *v3);
  if (!v4)
  {
    sub_100019AAC(a1, 0x2000000020uLL, 1, *((void *)v3 + 1), *((void *)v3 + 2));
    sub_100019AAC(a1, 0x2000000020uLL, 1, *((void *)v3 + 3), *((void *)v3 + 4));
    if (a3)
    {
      sub_10001FA84();
      swift_allocError();
      *(void *)uint64_t v9 = 0xD000000000000052;
      *(void *)(v9 + 8) = 0x8000000100062840;
      *(unsigned char *)(v9 + 16) = 1;
      return swift_willThrow();
    }
    else
    {
      sub_100019AAC(a1, a2 | ((unint64_t)a2 << 32), 1, *((void *)v3 + 5), *((void *)v3 + 6));
      return sub_100019AAC(a1, a2 & 0xFFFFFFFF00000000 | HIDWORD(a2), 1, *((void *)v3 + 7), *((void *)v3 + 8));
    }
  }
  return result;
}

unint64_t sub_10001B700(unsigned __int8 a1)
{
  sub_100059460();
  sub_100059470(a1);
  Swift::Int v2 = sub_100059480();
  return sub_10001B768(a1, v2);
}

unint64_t sub_10001B768(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(unsigned __int8 *)(v7 + result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(unsigned __int8 *)(v7 + result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

uint64_t sub_10001B808(uint64_t a1, unint64_t a2)
{
  v10[3] = &type metadata for Data;
  v10[4] = &protocol witness table for Data;
  v10[0] = a1;
  v10[1] = a2;
  uint64_t v4 = sub_100016C54(v10, (uint64_t)&type metadata for Data);
  uint64_t v5 = *v4;
  unint64_t v6 = v4[1];
  switch(v6 >> 62)
  {
    case 1uLL:
      if (v5 >> 32 < (int)v5) {
        __break(1u);
      }
      sub_100016E5C(a1, a2);
      sub_100016E5C(v5, v6);
      sub_10001BA2C((int)v5, v5 >> 32);
      sub_100016B2C(v5, v6);
      break;
    case 2uLL:
      uint64_t v7 = *(void *)(v5 + 16);
      uint64_t v8 = *(void *)(v5 + 24);
      sub_100016E5C(a1, a2);
      swift_retain();
      swift_retain();
      sub_10001BA2C(v7, v8);
      swift_release();
      swift_release();
      break;
    default:
      sub_100016E5C(a1, a2);
      sub_100058D60();
      break;
  }
  return sub_100016B84((uint64_t)v10);
}

uint64_t sub_10001BA2C(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100058CB0();
  if (!result || (uint64_t result = sub_100058CD0(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      sub_100058CC0();
      return sub_100058D60();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10001BAC0(unsigned char *__src, unsigned char *a2)
{
  if (__src) {
    unint64_t v2 = a2 - __src;
  }
  else {
    unint64_t v2 = 0;
  }
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF) {
    goto LABEL_11;
  }
  memset(__dst, 0, sizeof(__dst));
  char v5 = v2;
  if (__src && a2 != __src) {
    memcpy(__dst, __src, a2 - __src);
  }
  return *(void *)__dst;
}

uint64_t sub_10001BB84(uint64_t result, uint64_t a2)
{
  if (!a2)
  {
    swift_release();
    return 0;
  }
  if (a2 > 14)
  {
    if ((unint64_t)a2 < 0x7FFFFFFF) {
      return a2 << 32;
    }
    sub_100058D30();
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = 0;
    *(void *)(v3 + 24) = a2;
    return v3;
  }
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v4 = (unsigned char *)sub_100058CB0();
    if (!v4)
    {
LABEL_10:
      uint64_t v5 = sub_100058CC0();
      if (v5 >= a2) {
        uint64_t v6 = a2;
      }
      else {
        uint64_t v6 = v5;
      }
      uint64_t v7 = &v4[v6];
      if (v4) {
        uint64_t v8 = v7;
      }
      else {
        uint64_t v8 = 0;
      }
      uint64_t v3 = sub_10001BAC0(v4, v8);
      swift_release();
      return v3;
    }
    uint64_t result = sub_100058CD0();
    if (!__OFSUB__(0, result))
    {
      v4 -= result;
      goto LABEL_10;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10001BC6C(void *a1)
{
  uint64_t v2 = sub_100058D20();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = a1;
  id v7 = [v6 bytes];
  id v8 = [v6 length];
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for Data.Deallocator.none(_:), v2);
  sub_100058D10();
  if (v8)
  {
    sub_100058CF0();
    swift_allocObject();
    swift_retain();
    uint64_t v9 = sub_100058CA0();
    uint64_t v10 = sub_10001BB84(v9, (uint64_t)v8);
    swift_release();
  }
  else
  {
    uint64_t v11 = (void (*)(id, void))sub_100058D10();
    v11(v7, 0);
    swift_release();
    swift_release();
    uint64_t v10 = 0;
  }
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v10;
}

unint64_t sub_10001BE40(void *a1, void *a2, void *a3, uint64_t a4, __int16 a5, int a6, int a7, unint64_t a8, void *a9)
{
  unint64_t result = sub_10001C380(2u, &qword_100080A28, &static PPM_0_2_1.QueryType.rangesByEnumVals);
  if (!v9)
  {
    uint64_t v54 = a4;
    __int16 v55 = a5;
    int v56 = a6;
    char v57 = result;
    int v58 = HIDWORD(result);
    char v59 = 1;
    int v60 = a7;
    char v61 = 0;
    uint64_t v19 = sub_10001BC6C(a1);
    unint64_t v21 = v20;
    uint64_t v22 = sub_10001BC6C(a2);
    unint64_t v24 = v23;
    uint64_t v25 = sub_10001BC6C(a3);
    unint64_t v27 = v26;
    uint64_t v28 = sub_100023DEC();
    uint64_t v41 = sub_10003A594(v28);
    unint64_t v42 = v29;
    sub_10003A630((unint64_t)&v41);
    uint64_t v40 = v25;
    uint64_t v30 = v22;
    uint64_t v31 = v41;
    unint64_t v32 = v42;
    uint64_t v33 = sub_10001BC6C(a9);
    uint64_t v43 = v19;
    unint64_t v44 = v21;
    uint64_t v45 = v30;
    unint64_t v46 = v24;
    unint64_t v39 = v24;
    uint64_t v47 = v40;
    unint64_t v48 = v27;
    uint64_t v49 = v31;
    unint64_t v50 = v32;
    unint64_t v62 = v32;
    unint64_t v35 = v34;
    unint64_t v51 = a8;
    uint64_t v52 = v33;
    uint64_t v38 = v33;
    unint64_t v53 = v34;
    uint64_t v36 = sub_100023E38();
    uint64_t v41 = sub_10003A594(v36);
    unint64_t v42 = v37;
    sub_100019AAC(&v41, 0xFF00000001uLL, 1, v19, v21);
    sub_100019AAC(&v41, 0xFFFF00000001uLL, 1, v30, v39);
    sub_100019AAC(&v41, 0xFFFF00000001uLL, 1, v40, v27);
    sub_100019AAC(&v41, 0xFFFF00000001uLL, 1, v31, v62);
    sub_100018994(8uLL, (uint64_t)&v41, a8);
    sub_100019AAC(&v41, 0xFFFF00000001uLL, 1, v38, v35);
    sub_100016B2C(v19, v21);
    sub_100016B2C(v30, v39);
    sub_100016B2C(v40, v27);
    sub_100016B2C(v31, v62);
    sub_100016B2C(v38, v35);
    return v41;
  }
  return result;
}

uint64_t sub_10001C1BC(uint64_t a1)
{
  return a1 & ~(-1 << *(unsigned char *)(v1 + 32));
}

uint64_t sub_10001C1E8()
{
  sub_100059460();
  sub_100059470(0);
  Swift::Int v0 = sub_100059480();
  return sub_10001C1BC(v0);
}

unint64_t sub_10001C240(unsigned __int8 a1)
{
  return sub_10001C380(a1, &qword_100080A08, &static PPM_0_2_1.RealNumberType.rangesByEnumVals);
}

unint64_t sub_10001C280(unsigned __int8 a1)
{
  return sub_10001C380(a1, &qword_100080A10, &static PPM_0_2_1.DPMechanism.rangesByEnumVals);
}

unint64_t sub_10001C2C0(unsigned __int8 a1)
{
  return sub_10001C380(a1, &qword_100080A18, &static PPM_0_2_1.VDAFType.rangesByEnumVals);
}

unint64_t sub_10001C300(unsigned __int8 a1)
{
  return sub_10001C380(a1, &qword_100080A20, &static PPM_0_2_1.Role.rangesByEnumVals);
}

unint64_t sub_10001C340(unsigned __int8 a1)
{
  return sub_10001C380(a1, &qword_100080A28, &static PPM_0_2_1.QueryType.rangesByEnumVals);
}

unint64_t sub_10001C380(unsigned __int8 a1, void *a2, uint64_t *a3)
{
  if (*a2 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v5 = *a3;
  if (*(void *)(v5 + 16))
  {
    unint64_t v6 = sub_10001B700(a1);
    if (v7) {
      return a1 | ((unint64_t)*(unsigned int *)(*(void *)(v5 + 56) + 8 * v6) << 32);
    }
  }
  v10._countAndFlagsBits = 0x203A65756C6176;
  v10._object = (void *)0xE700000000000000;
  sub_1000591F0(v10);
  sub_100059380();
  v11._countAndFlagsBits = 46;
  v11._object = (void *)0xE100000000000000;
  sub_1000591F0(v11);
  v12._countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  sub_1000591F0(v12);
  swift_bridgeObjectRelease();
  sub_10001FA84();
  swift_allocError();
  *(void *)uint64_t v9 = 0xD000000000000036;
  *(void *)(v9 + 8) = 0x8000000100062470;
  *(unsigned char *)(v9 + 16) = 2;
  return swift_willThrow();
}

uint64_t sub_10001C4E4()
{
  return sub_10001C4FC();
}

uint64_t sub_10001C4FC()
{
  if (qword_100080A30 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v0 = static PPM_0_2_1.ExtensionType.rangesByEnumVals;
  if (*(void *)(static PPM_0_2_1.ExtensionType.rangesByEnumVals + 16))
  {
    uint64_t v1 = sub_10001C1E8();
    if (v2) {
      return *(unsigned int *)(*(void *)(v0 + 56) + 8 * v1);
    }
  }
  v5._countAndFlagsBits = 0x203A65756C6176;
  v5._object = (void *)0xE700000000000000;
  sub_1000591F0(v5);
  sub_100059380();
  v6._countAndFlagsBits = 46;
  v6._object = (void *)0xE100000000000000;
  sub_1000591F0(v6);
  v7._countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  sub_1000591F0(v7);
  swift_bridgeObjectRelease();
  sub_10001FA84();
  swift_allocError();
  *(void *)uint64_t v4 = 0xD000000000000036;
  *(void *)(v4 + 8) = 0x8000000100062470;
  *(unsigned char *)(v4 + 16) = 2;
  return swift_willThrow();
}

unint64_t sub_10001C660(uint64_t a1)
{
  char v3 = *(unsigned char *)v1;
  uint64_t v4 = *(unsigned __int16 *)(v1 + 8);
  char v5 = *(unsigned char *)(v1 + 10);
  uint64_t v6 = *(unsigned int *)(v1 + 12);
  char v7 = *(unsigned char *)(v1 + 16);
  unint64_t v8 = *(void *)(v1 + 24);
  char v9 = *(unsigned char *)(v1 + 32);
  unint64_t result = sub_100018C78(1uLL, a1, *(_DWORD *)(v1 + 4));
  if (!v2)
  {
    sub_100019C9C(a1, v3, v4 | (v6 << 32) | ((unint64_t)(v5 & 1) << 16), v7 & 1, v8, v9 & 1);
    char v11 = *(unsigned char *)(v1 + 40);
    unsigned int v12 = *(_DWORD *)(v1 + 44);
    uint64_t v13 = *(unsigned __int16 *)(v1 + 48);
    char v14 = *(unsigned char *)(v1 + 50);
    uint64_t v15 = *(unsigned int *)(v1 + 52);
    char v16 = *(unsigned char *)(v1 + 56);
    unint64_t v17 = *(void *)(v1 + 64);
    char v18 = *(unsigned char *)(v1 + 72);
    sub_100018C78(1uLL, a1, v12);
    return sub_100019C9C(a1, v11, v13 | (v15 << 32) | ((unint64_t)(v14 & 1) << 16), v16 & 1, v17, v18 & 1);
  }
  return result;
}

unint64_t sub_10001C77C(uint64_t a1)
{
  char v3 = *(unsigned char *)v1;
  uint64_t v4 = *(unsigned __int16 *)(v1 + 8);
  char v5 = *(unsigned char *)(v1 + 10);
  uint64_t v6 = *(unsigned int *)(v1 + 12);
  char v7 = *(unsigned char *)(v1 + 16);
  unint64_t v8 = *(void *)(v1 + 24);
  char v9 = *(unsigned char *)(v1 + 32);
  unint64_t result = sub_100018C78(1uLL, a1, *(_DWORD *)(v1 + 4));
  if (!v2)
  {
    sub_100019C9C(a1, v3, v4 | (v6 << 32) | ((unint64_t)(v5 & 1) << 16), v7 & 1, v8, v9 & 1);
    char v11 = *(unsigned char *)(v1 + 40);
    uint64_t v12 = *(unsigned __int16 *)(v1 + 48);
    char v13 = *(unsigned char *)(v1 + 50);
    uint64_t v14 = *(unsigned int *)(v1 + 52);
    char v15 = *(unsigned char *)(v1 + 56);
    unint64_t v16 = *(void *)(v1 + 64);
    char v17 = *(unsigned char *)(v1 + 72);
    sub_100018C78(1uLL, a1, *(_DWORD *)(v1 + 44));
    sub_100019C9C(a1, v11, v12 | (v14 << 32) | ((unint64_t)(v13 & 1) << 16), v15 & 1, v16, v17 & 1);
    char v18 = *(unsigned char *)(v1 + 80);
    uint64_t v19 = *(unsigned __int16 *)(v1 + 88);
    char v20 = *(unsigned char *)(v1 + 90);
    uint64_t v21 = *(unsigned int *)(v1 + 92);
    char v22 = *(unsigned char *)(v1 + 96);
    unint64_t v23 = *(void *)(v1 + 104);
    char v24 = *(unsigned char *)(v1 + 112);
    sub_100018C78(1uLL, a1, *(_DWORD *)(v1 + 84));
    sub_100019C9C(a1, v18, v19 | (v21 << 32) | ((unint64_t)(v20 & 1) << 16), v22 & 1, v23, v24 & 1);
    char v25 = *(unsigned char *)(v1 + 120);
    unsigned int v26 = *(_DWORD *)(v1 + 124);
    uint64_t v27 = *(unsigned __int16 *)(v1 + 128);
    char v28 = *(unsigned char *)(v1 + 130);
    uint64_t v29 = *(unsigned int *)(v1 + 132);
    char v30 = *(unsigned char *)(v1 + 136);
    unint64_t v31 = *(void *)(v1 + 144);
    char v32 = *(unsigned char *)(v1 + 152);
    sub_100018C78(1uLL, a1, v26);
    return sub_100019C9C(a1, v25, v27 | (v29 << 32) | ((unint64_t)(v28 & 1) << 16), v30 & 1, v31, v32 & 1);
  }
  return result;
}

unint64_t sub_10001C970(uint64_t a1)
{
  unint64_t result = sub_100018994(8uLL, a1, *(void *)v1);
  if (!v2)
  {
    sub_100018C78(4uLL, a1, *(_DWORD *)(v1 + 8));
    sub_100018994(8uLL, a1, *(void *)(v1 + 16));
    sub_100018C78(4uLL, a1, *(_DWORD *)(v1 + 24));
    char v5 = *(unsigned char *)(v1 + 32);
    uint64_t v6 = *(unsigned __int16 *)(v1 + 40);
    char v7 = *(unsigned char *)(v1 + 42);
    uint64_t v8 = *(unsigned int *)(v1 + 44);
    char v9 = *(unsigned char *)(v1 + 48);
    unint64_t v31 = *(void *)(v1 + 56);
    char v10 = *(unsigned char *)(v1 + 64);
    sub_100018C78(1uLL, a1, *(_DWORD *)(v1 + 36));
    sub_100019C9C(a1, v5, v6 | (v8 << 32) | ((unint64_t)(v7 & 1) << 16), v9 & 1, v31, v10 & 1);
    char v11 = *(unsigned char *)(v1 + 72);
    uint64_t v12 = *(unsigned __int16 *)(v1 + 80);
    char v13 = *(unsigned char *)(v1 + 82);
    uint64_t v14 = *(unsigned int *)(v1 + 84);
    char v15 = *(unsigned char *)(v1 + 88);
    unint64_t v32 = *(void *)(v1 + 96);
    char v16 = *(unsigned char *)(v1 + 104);
    sub_100018C78(1uLL, a1, *(_DWORD *)(v1 + 76));
    sub_100019C9C(a1, v11, v12 | (v14 << 32) | ((unint64_t)(v13 & 1) << 16), v15 & 1, v32, v16 & 1);
    char v17 = *(unsigned char *)(v1 + 112);
    uint64_t v18 = *(unsigned __int16 *)(v1 + 120);
    char v19 = *(unsigned char *)(v1 + 122);
    uint64_t v20 = *(unsigned int *)(v1 + 124);
    char v21 = *(unsigned char *)(v1 + 128);
    unint64_t v33 = *(void *)(v1 + 136);
    char v22 = *(unsigned char *)(v1 + 144);
    sub_100018C78(1uLL, a1, *(_DWORD *)(v1 + 116));
    sub_100019C9C(a1, v17, v18 | (v20 << 32) | ((unint64_t)(v19 & 1) << 16), v21 & 1, v33, v22 & 1);
    char v23 = *(unsigned char *)(v1 + 152);
    unsigned int v24 = *(_DWORD *)(v1 + 156);
    uint64_t v25 = *(unsigned __int16 *)(v1 + 160);
    char v26 = *(unsigned char *)(v1 + 162);
    uint64_t v27 = *(unsigned int *)(v1 + 164);
    char v28 = *(unsigned char *)(v1 + 168);
    unint64_t v29 = *(void *)(v1 + 176);
    char v30 = *(unsigned char *)(v1 + 184);
    sub_100018C78(1uLL, a1, v24);
    return sub_100019C9C(a1, v23, v25 | (v27 << 32) | ((unint64_t)(v26 & 1) << 16), v28 & 1, v29, v30 & 1);
  }
  return result;
}

unint64_t sub_10001CBC0(uint64_t a1)
{
  unint64_t result = sub_100018C78(4uLL, a1, *(_DWORD *)v1);
  if (!v2)
  {
    sub_100018C78(4uLL, a1, *(_DWORD *)(v1 + 4));
    char v5 = *(unsigned char *)(v1 + 8);
    uint64_t v6 = *(unsigned __int16 *)(v1 + 16);
    char v7 = *(unsigned char *)(v1 + 18);
    uint64_t v8 = *(unsigned int *)(v1 + 20);
    char v9 = *(unsigned char *)(v1 + 24);
    unint64_t v19 = *(void *)(v1 + 32);
    char v10 = *(unsigned char *)(v1 + 40);
    sub_100018C78(1uLL, a1, *(_DWORD *)(v1 + 12));
    sub_100019C9C(a1, v5, v6 | (v8 << 32) | ((unint64_t)(v7 & 1) << 16), v9 & 1, v19, v10 & 1);
    char v11 = *(unsigned char *)(v1 + 48);
    unsigned int v12 = *(_DWORD *)(v1 + 52);
    uint64_t v13 = *(unsigned __int16 *)(v1 + 56);
    char v14 = *(unsigned char *)(v1 + 58);
    uint64_t v15 = *(unsigned int *)(v1 + 60);
    char v16 = *(unsigned char *)(v1 + 64);
    unint64_t v17 = *(void *)(v1 + 72);
    char v18 = *(unsigned char *)(v1 + 80);
    sub_100018C78(1uLL, a1, v12);
    return sub_100019C9C(a1, v11, v13 | (v15 << 32) | ((unint64_t)(v14 & 1) << 16), v16 & 1, v17, v18 & 1);
  }
  return result;
}

uint64_t sub_10001CD08(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v4 = a1 >> 16;
  unint64_t v5 = HIDWORD(a1);
  unint64_t v6 = HIWORD(a1);
  char v9 = a1;
  unint64_t v10 = 0;
  switch(a3 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a2), a2)) {
        goto LABEL_14;
      }
      unint64_t v10 = HIDWORD(a2) - (int)a2;
LABEL_6:
      sub_100016E5C(a2, a3);
LABEL_7:
      sub_10003B748(v10, 0xFFFF00000001uLL);
      if (v3) {
        return sub_100016B2C(a2, a3);
      }
      uint64_t v13 = sub_10003B948(0xFFFF00000001);
      sub_100016B2C(a2, a3);
      unint64_t v14 = v10 + v13;
      if (__OFADD__(v10, v13))
      {
        __break(1u);
        goto LABEL_13;
      }
      if (__OFADD__(v14, 7))
      {
LABEL_13:
        __break(1u);
LABEL_14:
        __break(1u);
LABEL_15:
        __break(1u);
        JUMPOUT(0x10001CEDCLL);
      }
      v17[0] = sub_10003A594(v14 + 7);
      v17[1] = v15;
      sub_100019308(1uLL, (uint64_t)v17, v9);
      sub_100018F5C(2uLL, (uint64_t)v17, v4);
      sub_100018F5C(2uLL, (uint64_t)v17, v5);
      sub_100018F5C(2uLL, (uint64_t)v17, v6);
      sub_100019AAC(v17, 0xFFFF00000001uLL, 1, a2, a3);
      return v17[0];
    case 2uLL:
      uint64_t v12 = *(void *)(a2 + 16);
      uint64_t v11 = *(void *)(a2 + 24);
      unint64_t v10 = v11 - v12;
      if (!__OFSUB__(v11, v12)) {
        goto LABEL_6;
      }
      goto LABEL_15;
    case 3uLL:
      goto LABEL_7;
    default:
      unint64_t v10 = BYTE6(a3);
      goto LABEL_7;
  }
}

uint64_t sub_10001CEEC(unint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  sub_100058CF0();
  swift_allocObject();
  uint64_t v10 = 0;
  unint64_t v11 = sub_100058CE0() | 0x4000000000000000;
  sub_100018994(8uLL, (uint64_t)&v10, a1);
  if (v4) {
    return sub_100016B2C(v10, v11);
  }
  sub_100018C78(4uLL, (uint64_t)&v10, a2);
  sub_100018C78(4uLL, (uint64_t)&v10, HIDWORD(a2));
  sub_100018C78(4uLL, (uint64_t)&v10, a3);
  sub_100018C78(4uLL, (uint64_t)&v10, HIDWORD(a3));
  sub_100019308(1uLL, (uint64_t)&v10, a4);
  sub_100019308(1uLL, (uint64_t)&v10, SBYTE1(a4));
  sub_100018F5C(2uLL, (uint64_t)&v10, a4 >> 16);
  sub_100018F5C(2uLL, (uint64_t)&v10, SHIDWORD(a4));
  return v10;
}

uint64_t sub_10001D06C()
{
  unsigned int v2 = *(_DWORD *)(v0 + 4);
  uint64_t v3 = *(unsigned __int16 *)(v0 + 8);
  unsigned __int8 v4 = *(unsigned char *)(v0 + 10);
  char v5 = *(unsigned char *)(v0 + 16);
  unint64_t v6 = *(void *)(v0 + 24);
  char v7 = *(unsigned char *)(v0 + 32);
  char v8 = *(unsigned char *)v0;
  uint64_t v9 = *(unsigned int *)(v0 + 12);
  LOBYTE(v13[0]) = v4;
  char v15 = v5;
  char v14 = v7;
  uint64_t result = PPM_0_2_1.RealNumber.RealNumberTypeSelector.encodedLength(with:)(v8, v3 | (v4 << 16), v5, v6, v7);
  if (!v1)
  {
    if (__OFADD__(result++, 1))
    {
      __break(1u);
    }
    else
    {
      v13[0] = sub_10003A594(result);
      v13[1] = v12;
      sub_100018C78(1uLL, (uint64_t)v13, v2);
      char v15 = v4;
      char v14 = v5;
      sub_100019C9C((uint64_t)v13, v8, v3 | ((unint64_t)v4 << 16) | (v9 << 32), v5, v6, v7);
      return v13[0];
    }
  }
  return result;
}

uint64_t sub_10001D18C(unint64_t a1)
{
  return sub_10001D964(a1);
}

uint64_t sub_10001D1A4(unsigned int a1)
{
  uint64_t v5 = sub_10003A594(2);
  unint64_t v6 = v3;
  sub_100018C78(2uLL, (uint64_t)&v5, a1);
  uint64_t result = v5;
  if (v1) {
    return sub_100016B2C(v5, v6);
  }
  return result;
}

uint64_t sub_10001D204(uint64_t a1, unint64_t a2)
{
  return sub_10001D664(a1, a2, 0xFFFF00000001uLL);
}

uint64_t sub_10001D224(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = sub_10002FA70(a1, a2, a3, a4);
  if (!v5)
  {
    v16[0] = sub_10003A594(result);
    v16[1] = v7;
    sub_100018C78(4uLL, (uint64_t)v16, *(_DWORD *)v4);
    char v8 = *(unsigned char *)(v4 + 8);
    unsigned int v9 = *(_DWORD *)(v4 + 12);
    uint64_t v10 = *(unsigned __int16 *)(v4 + 16);
    char v11 = *(unsigned char *)(v4 + 18);
    uint64_t v12 = *(unsigned int *)(v4 + 20);
    char v13 = *(unsigned char *)(v4 + 24);
    unint64_t v14 = *(void *)(v4 + 32);
    char v15 = *(unsigned char *)(v4 + 40);
    sub_100018C78(1uLL, (uint64_t)v16, v9);
    char v18 = v11 & 1;
    char v17 = v13 & 1;
    sub_100019C9C((uint64_t)v16, v8, v10 | (v12 << 32) | ((unint64_t)(v11 & 1) << 16), v13 & 1, v14, v15 & 1);
    return v16[0];
  }
  return result;
}

uint64_t sub_10001D328(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v7 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_14;
      }
      unint64_t v7 = HIDWORD(a1) - (int)a1;
LABEL_6:
      sub_100016E5C(a1, a2);
LABEL_7:
      sub_10003B748(v7, 0x1000000010uLL);
      if (v3) {
        return sub_100016B2C(a1, a2);
      }
      uint64_t v10 = sub_10003B948(0x1000000010);
      sub_100016B2C(a1, a2);
      unint64_t v11 = v7 + v10;
      if (__OFADD__(v7, v10))
      {
        __break(1u);
        goto LABEL_13;
      }
      if (__OFADD__(v11, 8))
      {
LABEL_13:
        __break(1u);
LABEL_14:
        __break(1u);
LABEL_15:
        __break(1u);
        JUMPOUT(0x10001D480);
      }
      v14[0] = sub_10003A594(v11 + 8);
      v14[1] = v12;
      sub_100019AAC(v14, 0x1000000010uLL, 1, a1, a2);
      sub_100018994(8uLL, (uint64_t)v14, a3);
      return v14[0];
    case 2uLL:
      uint64_t v9 = *(void *)(a1 + 16);
      uint64_t v8 = *(void *)(a1 + 24);
      unint64_t v7 = v8 - v9;
      if (!__OFSUB__(v8, v9)) {
        goto LABEL_6;
      }
      goto LABEL_15;
    case 3uLL:
      goto LABEL_7;
    default:
      unint64_t v7 = BYTE6(a2);
      goto LABEL_7;
  }
}

uint64_t sub_10001D490()
{
  uint64_t result = sub_100046E54();
  if (!v1)
  {
    v13[0] = sub_10003A594(result);
    v13[1] = v3;
    unint64_t v4 = *(void *)(v0 + 16);
    sub_100019AAC(v13, 0x1000000010uLL, 1, *(void *)v0, *(void *)(v0 + 8));
    sub_100018994(8uLL, (uint64_t)v13, v4);
    sub_100019AAC(v13, 0xFFFFFFFF00000000, 1, *(void *)(v0 + 24), *(void *)(v0 + 32));
    uint64_t v5 = *(void *)(v0 + 48);
    unint64_t v6 = *(void *)(v0 + 56);
    uint64_t v7 = *(void *)(v0 + 64);
    unint64_t v8 = *(void *)(v0 + 72);
    sub_100019308(1uLL, (uint64_t)v13, *(unsigned char *)(v0 + 40));
    sub_100019AAC(v13, 0xFFFF00000001uLL, 1, v5, v6);
    sub_100019AAC(v13, 0xFFFFFFFF00000001, 1, v7, v8);
    uint64_t v9 = *(void *)(v0 + 88);
    unint64_t v10 = *(void *)(v0 + 96);
    uint64_t v11 = *(void *)(v0 + 104);
    unint64_t v12 = *(void *)(v0 + 112);
    sub_100019308(1uLL, (uint64_t)v13, *(unsigned char *)(v0 + 80));
    sub_100019AAC(v13, 0xFFFF00000001uLL, 1, v9, v10);
    sub_100019AAC(v13, 0xFFFFFFFF00000001, 1, v11, v12);
    return v13[0];
  }
  return result;
}

uint64_t sub_10001D62C(uint64_t a1, unint64_t a2)
{
  return sub_10001D664(a1, a2, 0x2000000020uLL);
}

uint64_t sub_10001D648(uint64_t a1, unint64_t a2)
{
  return sub_10001D664(a1, a2, 0x1000000010uLL);
}

uint64_t sub_10001D664(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v7 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_12;
      }
      unint64_t v7 = HIDWORD(a1) - (int)a1;
LABEL_6:
      sub_100016E5C(a1, a2);
LABEL_7:
      sub_10003B748(v7, a3);
      if (v3) {
        return sub_100016B2C(a1, a2);
      }
      uint64_t v10 = sub_10003B948(a3);
      sub_100016B2C(a1, a2);
      if (__OFADD__(v7, v10))
      {
        __break(1u);
LABEL_12:
        __break(1u);
LABEL_13:
        __break(1u);
        JUMPOUT(0x10001D78CLL);
      }
      v13[0] = sub_10003A594(v7 + v10);
      v13[1] = v11;
      sub_100019AAC(v13, a3, 1, a1, a2);
      return v13[0];
    case 2uLL:
      uint64_t v9 = *(void *)(a1 + 16);
      uint64_t v8 = *(void *)(a1 + 24);
      unint64_t v7 = v8 - v9;
      if (!__OFSUB__(v8, v9)) {
        goto LABEL_6;
      }
      goto LABEL_13;
    case 3uLL:
      goto LABEL_7;
    default:
      unint64_t v7 = BYTE6(a2);
      goto LABEL_7;
  }
}

uint64_t sub_10001D79C(unint64_t a1)
{
  unint64_t v2 = HIDWORD(a1);
  uint64_t v5 = sub_10003A594(4);
  unint64_t v6 = v3;
  sub_100018C78(4uLL, (uint64_t)&v5, v2);
  uint64_t result = v5;
  if (v1) {
    return sub_100016B2C(v5, v6);
  }
  return result;
}

uint64_t sub_10001D7FC(unsigned int a1, uint64_t a2, unint64_t a3)
{
  unint64_t v7 = 0;
  switch(a3 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a2), a2)) {
        goto LABEL_14;
      }
      unint64_t v7 = HIDWORD(a2) - (int)a2;
LABEL_6:
      sub_100016E5C(a2, a3);
LABEL_7:
      sub_10003B748(v7, 0xFFFF00000000uLL);
      if (v3) {
        return sub_100016B2C(a2, a3);
      }
      uint64_t v10 = sub_10003B948(0xFFFF00000000);
      sub_100016B2C(a2, a3);
      unint64_t v11 = v7 + v10;
      if (__OFADD__(v7, v10))
      {
        __break(1u);
        goto LABEL_13;
      }
      if (__OFADD__(v11, 2))
      {
LABEL_13:
        __break(1u);
LABEL_14:
        __break(1u);
LABEL_15:
        __break(1u);
        JUMPOUT(0x10001D954);
      }
      v14[0] = sub_10003A594(v11 + 2);
      v14[1] = v12;
      sub_100018C78(2uLL, (uint64_t)v14, a1);
      sub_100019AAC(v14, 0xFFFF00000000uLL, 1, a2, a3);
      return v14[0];
    case 2uLL:
      uint64_t v9 = *(void *)(a2 + 16);
      uint64_t v8 = *(void *)(a2 + 24);
      unint64_t v7 = v8 - v9;
      if (!__OFSUB__(v8, v9)) {
        goto LABEL_6;
      }
      goto LABEL_15;
    case 3uLL:
      goto LABEL_7;
    default:
      unint64_t v7 = BYTE6(a3);
      goto LABEL_7;
  }
}

uint64_t sub_10001D964(unint64_t a1)
{
  unint64_t v2 = HIDWORD(a1);
  uint64_t v5 = sub_10003A594(1);
  unint64_t v6 = v3;
  sub_100018C78(1uLL, (uint64_t)&v5, v2);
  uint64_t result = v5;
  if (v1) {
    return sub_100016B2C(v5, v6);
  }
  return result;
}

uint64_t sub_10001D9C4(int a1, void *a2)
{
  uint64_t v4 = sub_10001BC6C(a2);
  unint64_t v6 = v5;
  unint64_t v7 = sub_10001C380(5u, &qword_100080A18, &static PPM_0_2_1.VDAFType.rangesByEnumVals);
  if (v2) {
    return sub_100016B2C(v4, v6);
  }
  char v8 = v7;
  char v25 = 1;
  char v24 = 1;
  unint64_t v9 = HIDWORD(v7);
  char v23 = 1;
  char v22 = 1;
  char v21 = 1;
  char v20 = 0;
  char v19 = 1;
  char v18 = 1;
  char v17 = 1;
  char v16 = 1;
  char v15 = 1;
  char v14 = 1;
  __int16 v26 = 1;
  char v27 = 1;
  uint64_t v28 = 0;
  int v29 = 0;
  char v30 = 1;
  uint64_t v31 = 0;
  char v32 = 1;
  __int16 v33 = 0;
  char v34 = 1;
  int v35 = a1;
  char v36 = 0;
  int v37 = 0;
  char v38 = 1;
  long long v39 = xmmword_10005E010;
  char v44 = 0;
  long long v43 = 0u;
  long long v42 = 0u;
  long long v41 = 0u;
  long long v40 = 0u;
  uint64_t v45 = 0;
  char v47 = 0;
  int v46 = 0;
  char v48 = 1;
  uint64_t v49 = 0;
  char v51 = 0;
  int v50 = 0;
  char v52 = 1;
  uint64_t v53 = 0;
  uint64_t v54 = 0;
  memset(v55, 0, 14);
  v55[14] = 1;
  uint64_t v56 = 0;
  uint64_t v57 = 0;
  memset(v58, 0, 14);
  v58[14] = 1;
  uint64_t v59 = 0;
  uint64_t v60 = 0;
  memset(v61, 0, 14);
  v61[14] = 1;
  uint64_t v62 = v4;
  unint64_t v63 = v6;
  char v64 = v7;
  int v65 = HIDWORD(v7);
  char v66 = 1;
  __int16 v67 = 256;
  uint64_t v68 = 0;
  int v69 = 0;
  char v70 = 1;
  uint64_t v71 = 0;
  char v72 = 1;
  __int16 v73 = 0;
  char v74 = 1;
  int v75 = a1;
  char v76 = 0;
  int v77 = 0;
  char v78 = 1;
  char v84 = 0;
  long long v82 = 0u;
  long long v83 = 0u;
  long long v80 = 0u;
  long long v81 = 0u;
  long long v79 = xmmword_10005E010;
  uint64_t v85 = 0;
  char v87 = 0;
  int v86 = 0;
  char v88 = 1;
  uint64_t v89 = 0;
  char v91 = 0;
  int v90 = 0;
  char v92 = 1;
  uint64_t v94 = 0;
  memset(v95, 0, 14);
  uint64_t v93 = 0;
  v95[14] = 1;
  uint64_t v97 = 0;
  memset(v98, 0, 14);
  uint64_t v96 = 0;
  v98[14] = 1;
  uint64_t v100 = 0;
  memset(v101, 0, 14);
  uint64_t v99 = 0;
  v101[14] = 1;
  uint64_t v10 = PPM_0_2_1.VDAFConfig.encodedLength(with:)();
  v13[0] = sub_10003A594(v10);
  v13[1] = v11;
  sub_100019AAC(v13, 0xFFFF00000001uLL, 1, v4, v6);
  sub_100018C78(4uLL, (uint64_t)v13, v9);
  sub_10001AAE4((uint64_t)v13, v8);
  sub_100016B2C(v4, v6);
  return v13[0];
}

uint64_t sub_10001DCD0(unsigned int a1, unsigned __int8 a2, int a3, char a4, void *a5)
{
  uint64_t v10 = sub_10001BC6C(a5);
  unint64_t v12 = v11;
  unint64_t v13 = sub_10001C380(9u, &qword_100080A18, &static PPM_0_2_1.VDAFType.rangesByEnumVals);
  if (v5) {
    return sub_100016B2C(v10, v12);
  }
  char v14 = v13;
  char v31 = 1;
  char v30 = 1;
  unint64_t v15 = HIDWORD(v13);
  char v29 = 1;
  char v28 = 1;
  char v27 = 1;
  char v26 = 1;
  char v25 = 1;
  char v24 = 1;
  char v23 = 0;
  char v22 = 1;
  char v21 = 1;
  char v20 = 1;
  __int16 v32 = 1;
  char v33 = 1;
  uint64_t v34 = 0;
  int v35 = 0;
  char v36 = 1;
  uint64_t v37 = 0;
  char v38 = 1;
  __int16 v39 = 0;
  char v40 = 1;
  int v41 = 0;
  char v42 = 1;
  int v43 = 0;
  char v44 = 1;
  long long v45 = xmmword_10005E010;
  char v50 = 0;
  long long v49 = 0u;
  long long v48 = 0u;
  long long v47 = 0u;
  long long v46 = 0u;
  uint64_t v51 = 0;
  char v53 = 0;
  int v52 = 0;
  char v54 = 1;
  unint64_t v55 = a1 | ((unint64_t)a2 << 32);
  char v57 = a4;
  int v56 = a3;
  char v58 = 0;
  uint64_t v59 = 0;
  uint64_t v60 = 0;
  memset(v61, 0, 14);
  v61[14] = 1;
  uint64_t v62 = 0;
  uint64_t v63 = 0;
  memset(v64, 0, 14);
  v64[14] = 1;
  uint64_t v65 = 0;
  uint64_t v66 = 0;
  memset(v67, 0, 14);
  v67[14] = 1;
  uint64_t v68 = v10;
  unint64_t v69 = v12;
  char v70 = v13;
  int v71 = HIDWORD(v13);
  char v72 = 1;
  __int16 v73 = 256;
  uint64_t v74 = 0;
  int v75 = 0;
  char v76 = 1;
  uint64_t v77 = 0;
  char v78 = 1;
  __int16 v79 = 0;
  char v80 = 1;
  int v81 = 0;
  char v82 = 1;
  int v83 = 0;
  char v84 = 1;
  char v90 = 0;
  long long v88 = 0u;
  long long v89 = 0u;
  long long v86 = 0u;
  long long v87 = 0u;
  long long v85 = xmmword_10005E010;
  uint64_t v91 = 0;
  char v93 = 0;
  int v92 = 0;
  char v94 = 1;
  unint64_t v95 = v55;
  char v97 = a4;
  int v96 = a3;
  char v98 = 0;
  uint64_t v100 = 0;
  memset(v101, 0, 14);
  uint64_t v99 = 0;
  v101[14] = 1;
  uint64_t v103 = 0;
  memset(v104, 0, 14);
  uint64_t v102 = 0;
  v104[14] = 1;
  uint64_t v106 = 0;
  memset(v107, 0, 14);
  uint64_t v105 = 0;
  v107[14] = 1;
  uint64_t v16 = PPM_0_2_1.VDAFConfig.encodedLength(with:)();
  v19[0] = sub_10003A594(v16);
  v19[1] = v17;
  sub_100019AAC(v19, 0xFFFF00000001uLL, 1, v10, v12);
  sub_100018C78(4uLL, (uint64_t)v19, v15);
  sub_10001AAE4((uint64_t)v19, v14);
  sub_100016B2C(v10, v12);
  return v19[0];
}

uint64_t sub_10001E000(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4, uint64_t a5, unsigned __int8 a6, unsigned __int16 a7, void *a8)
{
  uint64_t v120 = a1;
  uint64_t v15 = sub_10001BC6C(a8);
  unint64_t v17 = v16;
  unint64_t v18 = sub_10001C380(0xAu, &qword_100080A18, &static PPM_0_2_1.VDAFType.rangesByEnumVals);
  if (v8) {
    return sub_100016B2C(v15, v17);
  }
  char v37 = 1;
  char v36 = 1;
  char v35 = 1;
  char v34 = 1;
  char v33 = 1;
  char v32 = 1;
  char v31 = 1;
  uint64_t v19 = a4;
  unint64_t v20 = HIDWORD(v18);
  char v30 = 1;
  char v29 = 1;
  char v28 = 0;
  char v27 = 1;
  char v26 = 1;
  __int16 v38 = 1;
  char v39 = 1;
  uint64_t v40 = 0;
  int v41 = 0;
  char v42 = 1;
  uint64_t v43 = 0;
  char v44 = 1;
  __int16 v45 = 0;
  char v46 = 1;
  int v47 = 0;
  char v48 = 1;
  int v49 = 0;
  char v50 = 1;
  long long v51 = xmmword_10005E010;
  char v56 = 0;
  long long v55 = 0u;
  long long v54 = 0u;
  long long v53 = 0u;
  long long v52 = 0u;
  uint64_t v57 = 0;
  char v59 = 0;
  int v58 = 0;
  char v60 = 1;
  uint64_t v61 = 0;
  char v63 = 0;
  int v62 = 0;
  char v64 = 1;
  uint64_t v65 = v120;
  unint64_t v66 = a2 | (unint64_t)(a3 << 32);
  uint64_t v67 = v19 | (a5 << 32);
  unsigned __int16 v69 = a7;
  int v68 = a6 | (a7 << 16) | 0x100;
  char v70 = 0;
  uint64_t v71 = 0;
  uint64_t v72 = 0;
  memset(v73, 0, 14);
  v73[14] = 1;
  uint64_t v74 = 0;
  uint64_t v75 = 0;
  memset(v76, 0, 14);
  v76[14] = 1;
  uint64_t v77 = v15;
  unint64_t v78 = v17;
  char v79 = v18;
  int v80 = HIDWORD(v18);
  char v81 = 1;
  __int16 v82 = 256;
  uint64_t v83 = 0;
  int v84 = 0;
  char v85 = 1;
  uint64_t v86 = 0;
  char v87 = 1;
  __int16 v88 = 0;
  char v89 = 1;
  int v90 = 0;
  char v91 = 1;
  int v92 = 0;
  char v93 = 1;
  char v99 = 0;
  long long v97 = 0u;
  long long v98 = 0u;
  long long v95 = 0u;
  long long v96 = 0u;
  long long v94 = xmmword_10005E010;
  uint64_t v100 = 0;
  char v102 = 0;
  int v101 = 0;
  char v103 = 1;
  uint64_t v104 = 0;
  char v106 = 0;
  int v105 = 0;
  char v107 = 1;
  uint64_t v108 = v120;
  unint64_t v109 = v66;
  uint64_t v110 = v67;
  unsigned __int16 v112 = a7;
  int v111 = v68;
  char v113 = 0;
  uint64_t v114 = 0;
  uint64_t v115 = 0;
  memset(v116, 0, 14);
  v116[14] = 1;
  uint64_t v118 = 0;
  memset(v119, 0, 14);
  uint64_t v117 = 0;
  v119[14] = 1;
  char v21 = v18;
  uint64_t v22 = PPM_0_2_1.VDAFConfig.encodedLength(with:)();
  v25[0] = sub_10003A594(v22);
  v25[1] = v23;
  sub_100019AAC(v25, 0xFFFF00000001uLL, 1, v15, v17);
  sub_100018C78(4uLL, (uint64_t)v25, v20);
  sub_10001AAE4((uint64_t)v25, v21);
  sub_100016B2C(v15, v17);
  return v25[0];
}

uint64_t sub_10001E374(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4, uint64_t a5, unsigned __int8 a6, unsigned __int16 a7, void *a8)
{
  uint64_t v120 = a1;
  uint64_t v15 = sub_10001BC6C(a8);
  unint64_t v17 = v16;
  unint64_t v18 = sub_10001C380(0xBu, &qword_100080A18, &static PPM_0_2_1.VDAFType.rangesByEnumVals);
  if (v8) {
    return sub_100016B2C(v15, v17);
  }
  char v37 = 1;
  char v36 = 1;
  char v35 = 1;
  char v34 = 1;
  char v33 = 1;
  char v32 = 1;
  char v31 = 1;
  uint64_t v19 = a4;
  unint64_t v20 = HIDWORD(v18);
  char v30 = 1;
  char v29 = 1;
  char v28 = 1;
  char v27 = 0;
  char v26 = 1;
  __int16 v38 = 1;
  char v39 = 1;
  uint64_t v40 = 0;
  int v41 = 0;
  char v42 = 1;
  uint64_t v43 = 0;
  char v44 = 1;
  __int16 v45 = 0;
  char v46 = 1;
  int v47 = 0;
  char v48 = 1;
  int v49 = 0;
  char v50 = 1;
  long long v51 = xmmword_10005E010;
  char v56 = 0;
  long long v55 = 0u;
  long long v54 = 0u;
  long long v53 = 0u;
  long long v52 = 0u;
  uint64_t v57 = 0;
  char v59 = 0;
  int v58 = 0;
  char v60 = 1;
  uint64_t v61 = 0;
  char v63 = 0;
  int v62 = 0;
  char v64 = 1;
  uint64_t v65 = 0;
  uint64_t v66 = 0;
  memset(v67, 0, 14);
  v67[14] = 1;
  uint64_t v68 = v120;
  unint64_t v69 = a2 | (unint64_t)(a3 << 32);
  uint64_t v70 = v19 | (a5 << 32);
  unsigned __int16 v72 = a7;
  int v71 = a6 | (a7 << 16) | 0x100;
  char v73 = 0;
  uint64_t v74 = 0;
  uint64_t v75 = 0;
  memset(v76, 0, 14);
  v76[14] = 1;
  uint64_t v77 = v15;
  unint64_t v78 = v17;
  char v79 = v18;
  int v80 = HIDWORD(v18);
  char v81 = 1;
  __int16 v82 = 256;
  uint64_t v83 = 0;
  int v84 = 0;
  char v85 = 1;
  uint64_t v86 = 0;
  char v87 = 1;
  __int16 v88 = 0;
  char v89 = 1;
  int v90 = 0;
  char v91 = 1;
  int v92 = 0;
  char v93 = 1;
  char v99 = 0;
  long long v97 = 0u;
  long long v98 = 0u;
  long long v95 = 0u;
  long long v96 = 0u;
  long long v94 = xmmword_10005E010;
  uint64_t v100 = 0;
  char v102 = 0;
  int v101 = 0;
  char v103 = 1;
  uint64_t v104 = 0;
  char v106 = 0;
  int v105 = 0;
  char v107 = 1;
  uint64_t v108 = 0;
  uint64_t v109 = 0;
  memset(v110, 0, 14);
  v110[14] = 1;
  uint64_t v111 = v120;
  unint64_t v112 = v69;
  uint64_t v113 = v70;
  unsigned __int16 v115 = a7;
  int v114 = v71;
  char v116 = 0;
  uint64_t v117 = 0;
  uint64_t v118 = 0;
  memset(v119, 0, 14);
  v119[14] = 1;
  char v21 = v18;
  uint64_t v22 = PPM_0_2_1.VDAFConfig.encodedLength(with:)();
  v25[0] = sub_10003A594(v22);
  v25[1] = v23;
  sub_100019AAC(v25, 0xFFFF00000001uLL, 1, v15, v17);
  sub_100018C78(4uLL, (uint64_t)v25, v20);
  sub_10001AAE4((uint64_t)v25, v21);
  sub_100016B2C(v15, v17);
  return v25[0];
}

uint64_t sub_10001E6E8(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4, uint64_t a5, unsigned __int8 a6, unsigned __int16 a7, void *a8)
{
  uint64_t v120 = a1;
  uint64_t v15 = sub_10001BC6C(a8);
  unint64_t v17 = v16;
  unint64_t v18 = sub_10001C380(0xCu, &qword_100080A18, &static PPM_0_2_1.VDAFType.rangesByEnumVals);
  if (v8) {
    return sub_100016B2C(v15, v17);
  }
  char v37 = 1;
  char v36 = 1;
  char v35 = 1;
  char v34 = 1;
  char v33 = 1;
  char v32 = 1;
  char v31 = 1;
  uint64_t v19 = a4;
  unint64_t v20 = HIDWORD(v18);
  char v30 = 1;
  char v29 = 1;
  char v28 = 1;
  char v27 = 1;
  char v26 = 0;
  __int16 v38 = 1;
  char v39 = 1;
  uint64_t v40 = 0;
  int v41 = 0;
  char v42 = 1;
  uint64_t v43 = 0;
  char v44 = 1;
  __int16 v45 = 0;
  char v46 = 1;
  int v47 = 0;
  char v48 = 1;
  int v49 = 0;
  char v50 = 1;
  long long v51 = xmmword_10005E010;
  char v56 = 0;
  long long v55 = 0u;
  long long v54 = 0u;
  long long v53 = 0u;
  long long v52 = 0u;
  uint64_t v57 = 0;
  char v59 = 0;
  int v58 = 0;
  char v60 = 1;
  uint64_t v61 = 0;
  char v63 = 0;
  int v62 = 0;
  char v64 = 1;
  uint64_t v65 = 0;
  uint64_t v66 = 0;
  memset(v67, 0, 14);
  v67[14] = 1;
  uint64_t v68 = 0;
  uint64_t v69 = 0;
  memset(v70, 0, 14);
  v70[14] = 1;
  uint64_t v71 = v120;
  unint64_t v72 = a2 | (unint64_t)(a3 << 32);
  uint64_t v73 = v19 | (a5 << 32);
  unsigned __int16 v75 = a7;
  int v74 = a6 | (a7 << 16) | 0x100;
  char v76 = 0;
  uint64_t v77 = v15;
  unint64_t v78 = v17;
  char v79 = v18;
  int v80 = HIDWORD(v18);
  char v81 = 1;
  __int16 v82 = 256;
  uint64_t v83 = 0;
  int v84 = 0;
  char v85 = 1;
  uint64_t v86 = 0;
  char v87 = 1;
  __int16 v88 = 0;
  char v89 = 1;
  int v90 = 0;
  char v91 = 1;
  int v92 = 0;
  char v93 = 1;
  char v99 = 0;
  long long v97 = 0u;
  long long v98 = 0u;
  long long v95 = 0u;
  long long v96 = 0u;
  long long v94 = xmmword_10005E010;
  uint64_t v100 = 0;
  char v102 = 0;
  int v101 = 0;
  char v103 = 1;
  uint64_t v104 = 0;
  char v106 = 0;
  int v105 = 0;
  char v107 = 1;
  uint64_t v109 = 0;
  memset(v110, 0, 14);
  uint64_t v108 = 0;
  v110[14] = 1;
  uint64_t v112 = 0;
  memset(v113, 0, 14);
  uint64_t v111 = 0;
  v113[14] = 1;
  uint64_t v114 = v120;
  unint64_t v115 = v72;
  uint64_t v116 = v73;
  unsigned __int16 v118 = a7;
  int v117 = v74;
  char v119 = 0;
  char v21 = v18;
  uint64_t v22 = PPM_0_2_1.VDAFConfig.encodedLength(with:)();
  v25[0] = sub_10003A594(v22);
  v25[1] = v23;
  sub_100019AAC(v25, 0xFFFF00000001uLL, 1, v15, v17);
  sub_100018C78(4uLL, (uint64_t)v25, v20);
  sub_10001AAE4((uint64_t)v25, v21);
  sub_100016B2C(v15, v17);
  return v25[0];
}

unint64_t sub_10001EA54(double a1)
{
  unint64_t result = sub_10001C380(2u, &qword_100080A10, &static PPM_0_2_1.DPMechanism.rangesByEnumVals);
  if (!v1)
  {
    unint64_t v4 = result;
    unint64_t v5 = sub_10001C380(3u, &qword_100080A08, &static PPM_0_2_1.RealNumberType.rangesByEnumVals) & 0xFFFFFFFF000000FFLL;
    sub_10001FA0C((uint64_t)v10);
    sub_10001FA44((uint64_t)v11);
    sub_10001FBA8((uint64_t)v12);
    __src[0] = 1;
    *(void *)&__src[8] = v5;
    *(_OWORD *)&__src[16] = xmmword_10005E020;
    *(double *)&__src[32] = a1;
    __src[40] = 0;
    *(void *)&__src[48] = 4;
    memset(&__src[56], 0, 65);
    *(_OWORD *)&__src[128] = xmmword_10005E010;
    memset(&__src[144], 0, 25);
    sub_10001FBE4((uint64_t)v10, (uint64_t)&__src[176], &qword_100080B40);
    sub_10001FBE4((uint64_t)v11, (uint64_t)&__src[336], &qword_100080B48);
    sub_10001FBE4((uint64_t)v12, (uint64_t)&__src[536], &qword_100080B50);
    memcpy(__dst, __src, sizeof(__dst));
    long long v15 = xmmword_10005DFF0;
    long long v16 = xmmword_10005E000;
    unint64_t v14 = v4 & 0xFFFFFFFF000000FFLL;
    uint64_t v17 = 0x100000000000000;
    uint64_t v6 = PPM_0_2_1.DPConfig.DPMechanismSelector.encodedLength(with:)((uint64_t)&v14);
    BOOL v7 = __OFADD__(v6, 1);
    unint64_t result = v6 + 1;
    if (v7)
    {
      __break(1u);
    }
    else
    {
      v9[0] = sub_10003A594(result);
      v9[1] = v8;
      sub_100018C78(1uLL, (uint64_t)v9, HIDWORD(v4));
      sub_10001A1C8((uint64_t)v9, (uint64_t)&v14);
      return v9[0];
    }
  }
  return result;
}

unint64_t sub_10001EC80()
{
  unint64_t result = sub_10001C380(1u, &qword_100080A10, &static PPM_0_2_1.DPMechanism.rangesByEnumVals);
  if (!v0)
  {
    unint64_t v2 = result;
    sub_10001FA0C((uint64_t)v7);
    sub_10001FA44((uint64_t)v8);
    sub_10001FBA8((uint64_t)v9);
    __src[0] = 0;
    *(void *)&__src[8] = 4;
    memset(&__src[16], 0, 25);
    *(void *)&__src[48] = 4;
    memset(&__src[56], 0, 65);
    *(_OWORD *)&__src[128] = xmmword_10005E010;
    memset(&__src[144], 0, 25);
    sub_10001FBE4((uint64_t)v7, (uint64_t)&__src[176], &qword_100080B40);
    sub_10001FBE4((uint64_t)v8, (uint64_t)&__src[336], &qword_100080B48);
    sub_10001FBE4((uint64_t)v9, (uint64_t)&__src[536], &qword_100080B50);
    memcpy(__dst, __src, sizeof(__dst));
    long long v12 = xmmword_10005DFF0;
    long long v13 = xmmword_10005E000;
    unint64_t v11 = v2 & 0xFFFFFFFF000000FFLL;
    uint64_t v14 = 0x100000000000000;
    uint64_t v3 = PPM_0_2_1.DPConfig.DPMechanismSelector.encodedLength(with:)((uint64_t)&v11);
    BOOL v4 = __OFADD__(v3, 1);
    unint64_t result = v3 + 1;
    if (v4)
    {
      __break(1u);
    }
    else
    {
      v6[0] = sub_10003A594(result);
      v6[1] = v5;
      sub_100018C78(1uLL, (uint64_t)v6, HIDWORD(v2));
      sub_10001A1C8((uint64_t)v6, (uint64_t)&v11);
      return v6[0];
    }
  }
  return result;
}

unint64_t sub_10001EE54(double a1, double a2, double a3, double a4, double a5)
{
  unint64_t result = sub_10001C380(3u, &qword_100080A08, &static PPM_0_2_1.RealNumberType.rangesByEnumVals);
  if (!v5)
  {
    unint64_t v12 = result;
    unint64_t v13 = sub_10001C380(3u, &qword_100080A08, &static PPM_0_2_1.RealNumberType.rangesByEnumVals);
    unint64_t v14 = sub_10001C380(3u, &qword_100080A08, &static PPM_0_2_1.RealNumberType.rangesByEnumVals);
    unint64_t v15 = sub_10001C380(3u, &qword_100080A08, &static PPM_0_2_1.RealNumberType.rangesByEnumVals);
    char v79 = 1;
    char v78 = 1;
    char v77 = 0;
    char v76 = 1;
    char v75 = 1;
    char v74 = 0;
    char v73 = 1;
    char v72 = 1;
    char v71 = 0;
    char v70 = 1;
    char v69 = 1;
    char v68 = 0;
    unint64_t v16 = sub_10001C380(6u, &qword_100080A10, &static PPM_0_2_1.DPMechanism.rangesByEnumVals);
    unint64_t v17 = sub_10001C380(3u, &qword_100080A08, &static PPM_0_2_1.RealNumberType.rangesByEnumVals);
    char v18 = v17;
    unint64_t v23 = HIDWORD(v17);
    sub_10001FA0C((uint64_t)v25);
    v25[174] = 1;
    v25[168] = 1;
    unsigned char v25[160] = 0;
    v26[0] = v12;
    int v27 = HIDWORD(v12);
    __int16 v28 = 0;
    char v29 = v79;
    int v30 = 0;
    char v31 = v78;
    double v32 = a1;
    char v33 = v77;
    char v34 = v13;
    int v35 = HIDWORD(v13);
    __int16 v36 = 0;
    char v37 = v76;
    int v38 = 0;
    char v39 = v75;
    double v40 = a2;
    char v41 = v74;
    char v42 = v14;
    int v43 = HIDWORD(v14);
    __int16 v44 = 0;
    char v45 = v73;
    int v46 = 0;
    char v47 = v72;
    double v48 = a3;
    char v49 = v71;
    char v50 = v15;
    int v51 = HIDWORD(v15);
    __int16 v52 = 0;
    char v53 = v70;
    int v54 = 0;
    char v55 = v69;
    double v56 = a4;
    char v57 = v68;
    char v58 = v18;
    int v59 = v23;
    __int16 v60 = 0;
    char v61 = 1;
    int v62 = 0;
    char v63 = 1;
    double v64 = a5;
    char v65 = 0;
    PPM_0_2_1.QueryType.enumValue.getter(v26, 1, v19);
    sub_10001FBA8((uint64_t)v66);
    __src[0] = 1;
    *(void *)&__src[8] = 4;
    memset(&__src[16], 0, 25);
    *(void *)&__src[48] = 4;
    memset(&__src[56], 0, 65);
    *(_OWORD *)&__src[128] = xmmword_10005E010;
    memset(&__src[144], 0, 25);
    sub_10001FBE4((uint64_t)v25, (uint64_t)&__src[176], &qword_100080B40);
    sub_10001FBE4((uint64_t)v26, (uint64_t)&__src[336], &qword_100080B48);
    sub_10001FBE4((uint64_t)v66, (uint64_t)&__src[536], &qword_100080B50);
    memcpy(__dst, __src, sizeof(__dst));
    long long v81 = xmmword_10005DFF0;
    long long v82 = xmmword_10005E000;
    unint64_t v80 = v16 & 0xFFFFFFFF000000FFLL;
    uint64_t v83 = 0x100000000000000;
    uint64_t v20 = PPM_0_2_1.DPConfig.DPMechanismSelector.encodedLength(with:)((uint64_t)&v80);
    BOOL v21 = __OFADD__(v20, 1);
    unint64_t result = v20 + 1;
    if (v21)
    {
      __break(1u);
    }
    else
    {
      v24[0] = sub_10003A594(result);
      v24[1] = v22;
      sub_100018C78(1uLL, (uint64_t)v24, HIDWORD(v16));
      sub_10001A1C8((uint64_t)v24, (uint64_t)&v80);
      return v24[0];
    }
  }
  return result;
}

unint64_t sub_10001F2F8(uint64_t a1, int a2, uint64_t a3, int a4, double a5, double a6, double a7, double a8)
{
  unint64_t result = sub_10001C380(3u, &qword_100080A08, &static PPM_0_2_1.RealNumberType.rangesByEnumVals);
  if (!v8)
  {
    unint64_t v18 = result;
    unint64_t v19 = sub_10001C380(3u, &qword_100080A08, &static PPM_0_2_1.RealNumberType.rangesByEnumVals);
    unint64_t v20 = sub_10001C380(3u, &qword_100080A08, &static PPM_0_2_1.RealNumberType.rangesByEnumVals);
    unint64_t v85 = sub_10001C380(3u, &qword_100080A08, &static PPM_0_2_1.RealNumberType.rangesByEnumVals);
    char v79 = 1;
    char v78 = 1;
    char v77 = 0;
    char v76 = 1;
    char v75 = 1;
    char v74 = 0;
    char v73 = 1;
    char v72 = 1;
    char v71 = 0;
    char v70 = 1;
    char v69 = 1;
    char v68 = 0;
    unint64_t v26 = HIDWORD(v85);
    unint64_t v27 = sub_10001C380(7u, &qword_100080A10, &static PPM_0_2_1.DPMechanism.rangesByEnumVals);
    sub_10001FA0C((uint64_t)v29);
    sub_10001FA44((uint64_t)v30);
    uint64_t v31 = a1;
    int v32 = a2;
    uint64_t v33 = a3;
    int v34 = a4;
    char v35 = v18;
    int v36 = HIDWORD(v18);
    __int16 v37 = 0;
    char v38 = v79;
    int v39 = 0;
    char v40 = v78;
    double v41 = a5;
    char v42 = v77;
    char v43 = v19;
    int v44 = HIDWORD(v19);
    __int16 v45 = 0;
    char v46 = v76;
    int v47 = 0;
    char v48 = v75;
    double v49 = a6;
    char v50 = v74;
    char v51 = v20;
    int v52 = HIDWORD(v20);
    __int16 v53 = 0;
    char v54 = v73;
    int v55 = 0;
    char v56 = v72;
    double v57 = a7;
    char v58 = v71;
    char v59 = v85;
    int v60 = v26;
    __int16 v61 = 0;
    char v62 = v70;
    int v63 = 0;
    char v64 = v69;
    double v65 = a8;
    char v66 = v68;
    PPM_0_2_1.QueryType.enumValue.getter(&v31, v21, v22);
    __src[0] = 1;
    *(void *)&__src[8] = 4;
    memset(&__src[16], 0, 25);
    *(void *)&__src[48] = 4;
    memset(&__src[56], 0, 65);
    *(_OWORD *)&__src[128] = xmmword_10005E010;
    memset(&__src[144], 0, 25);
    sub_10001FBE4((uint64_t)v29, (uint64_t)&__src[176], &qword_100080B40);
    sub_10001FBE4((uint64_t)v30, (uint64_t)&__src[336], &qword_100080B48);
    sub_10001FBE4((uint64_t)&v31, (uint64_t)&__src[536], &qword_100080B50);
    memcpy(__dst, __src, sizeof(__dst));
    long long v81 = xmmword_10005DFF0;
    long long v82 = xmmword_10005E000;
    unint64_t v80 = v27 & 0xFFFFFFFF000000FFLL;
    uint64_t v83 = 0x100000000000000;
    uint64_t v23 = PPM_0_2_1.DPConfig.DPMechanismSelector.encodedLength(with:)((uint64_t)&v80);
    BOOL v24 = __OFADD__(v23, 1);
    unint64_t result = v23 + 1;
    if (v24)
    {
      __break(1u);
    }
    else
    {
      v28[0] = sub_10003A594(result);
      v28[1] = v25;
      sub_100018C78(1uLL, (uint64_t)v28, HIDWORD(v27));
      sub_10001A1C8((uint64_t)v28, (uint64_t)&v80);
      return v28[0];
    }
  }
  return result;
}

uint64_t sub_10001F73C(void *a1, void *a2, unint64_t a3, void *a4)
{
  uint64_t v8 = sub_10001BC6C(a1);
  unint64_t v10 = v9;
  uint64_t v11 = sub_10001BC6C(a2);
  unint64_t v13 = v12;
  uint64_t v14 = sub_10001BC6C(a4);
  unint64_t v16 = v15;
  void v20[2] = v8;
  v20[3] = v10;
  v20[4] = v11;
  v20[5] = v13;
  void v20[6] = a3;
  v20[7] = v14;
  v20[8] = v15;
  uint64_t v17 = sub_1000468E4();
  if (v4)
  {
    sub_100016B2C(v8, v10);
    sub_100016B2C(v11, v13);
    return sub_100016B2C(v14, v16);
  }
  else
  {
    v20[0] = sub_10003A594(v17);
    v20[1] = v18;
    sub_100019AAC(v20, 0x2000000020uLL, 1, v8, v10);
    sub_100019AAC(v20, 0x1000000010uLL, 1, v11, v13);
    sub_100018994(8uLL, (uint64_t)v20, a3);
    sub_100019AAC(v20, 0xFFFFFFFF00000000, 1, v14, v16);
    sub_100016B2C(v8, v10);
    sub_100016B2C(v11, v13);
    sub_100016B2C(v14, v16);
    return v20[0];
  }
}

uint64_t sub_10001F8CC(void *a1)
{
  sub_100016C98(&qword_100080BE0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10005E030;
  int v4 = sub_10001C4FC();
  if (v1)
  {
    *(void *)(inited + 16) = 0;
    return swift_release();
  }
  else
  {
    *(_DWORD *)(inited + 32) = v4;
    *(_OWORD *)(inited + 40) = xmmword_10005E040;
    uint64_t v6 = sub_10001BC6C(a1);
    unint64_t v8 = v7;
    uint64_t v9 = PPM_0_2_1.PlaintextInputShare.encodedLength(with:)(0x10000, inited, v6, v7);
    v11[0] = sub_10003A594(v9);
    v11[1] = v10;
    sub_100038604(v11, 0xFFFF00000000uLL, 256, inited);
    sub_100019AAC(v11, 0xFFFFFFFF00000000, 1, v6, v8);
    swift_bridgeObjectRelease();
    sub_100016B2C(v6, v8);
    return v11[0];
  }
}

double sub_10001FA0C(uint64_t a1)
{
  *(void *)a1 = 4;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(unsigned char *)(a1 + 152) = 0;
  return result;
}

double sub_10001FA44(uint64_t a1)
{
  *(void *)a1 = 4;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 177) = 0u;
  return result;
}

unint64_t sub_10001FA84()
{
  unint64_t result = qword_100080B60;
  if (!qword_100080B60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100080B60);
  }
  return result;
}

uint64_t sub_10001FAD8(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 32);
  if (v1 >= 4) {
    return v1 - 3;
  }
  else {
    return 0;
  }
}

uint64_t sub_10001FAEC(unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  if (v1 >= 4) {
    return v1 - 3;
  }
  else {
    return 0;
  }
}

unint64_t sub_10001FB00()
{
  unint64_t result = qword_100080B90;
  if (!qword_100080B90)
  {
    sub_10001FB5C(&qword_100080B88);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100080B90);
  }
  return result;
}

uint64_t sub_10001FB5C(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

double sub_10001FBA8(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 32) = 4;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(unsigned char *)(a1 + 184) = 0;
  return result;
}

uint64_t sub_10001FBE4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100016C98(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void *sub_10001FC48(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    void *v3 = *a2;
    uint64_t v3 = (void *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
    uint64_t v5 = *(int *)(a3 + 36);
    uint64_t v6 = a1 + v5;
    uint64_t v7 = (uint64_t)a2 + v5;
    uint64_t v8 = sub_100058E60();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t sub_10001FD24(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 36);
  uint64_t v3 = sub_100058E60();
  int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
  return v4(v2, v3);
}

uint64_t sub_10001FD8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v4 = *(int *)(a3 + 36);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = sub_100058E60();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

uint64_t sub_10001FE18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v4 = *(int *)(a3 + 36);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = sub_100058E60();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

uint64_t sub_10001FEB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v4 = *(int *)(a3 + 36);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = sub_100058E60();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t sub_10001FF40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v4 = *(int *)(a3 + 36);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = sub_100058E60();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t sub_10001FFD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10001FFE8);
}

uint64_t sub_10001FFE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + *(int *)(a3 + 36);
  uint64_t v5 = sub_100058E60();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48);
  return v6(v4, a2, v5);
}

uint64_t sub_100020058(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10002006C);
}

uint64_t sub_10002006C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1 + *(int *)(a4 + 36);
  uint64_t v6 = sub_100058E60();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);
  return v7(v5, a2, a2, v6);
}

uint64_t type metadata accessor for DediscoAlgorithmParametersOtherParams()
{
  uint64_t result = qword_100080C40;
  if (!qword_100080C40) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10002012C()
{
  uint64_t result = sub_100058E60();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1000201DC()
{
  uint64_t v0 = sub_100059010();
  sub_100016FD8(v0, qword_100088558);
  sub_100015988(v0, (uint64_t)qword_100088558);
  sub_100016C98(&qword_100080CB0);
  unint64_t v1 = (int *)(sub_100016C98(&qword_100080CB8) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_10005E090;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "cohort_size";
  *(void *)(v6 + 8) = 11;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v8 = sub_100058FE0();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "sigma";
  *(void *)(v10 + 8) = 5;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  unint64_t v12 = (char *)v11 + v1[14];
  void *v11 = 3;
  *(void *)unint64_t v12 = "pi_rappor_prime";
  *((void *)v12 + 1) = 15;
  v12[16] = 2;
  v9();
  unint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  void *v13 = 4;
  *(void *)uint64_t v14 = "pi_rappor_alpha0";
  *((void *)v14 + 1) = 16;
  v14[16] = 2;
  v9();
  uint64_t v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 5;
  *(void *)uint64_t v15 = "pi_rappor_alpha1";
  *(void *)(v15 + 8) = 16;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return sub_100058FF0();
}

uint64_t sub_100020464()
{
  uint64_t result = sub_100058EA0();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          sub_100058ED0();
          break;
        case 2:
        case 4:
        case 5:
          sub_100058EE0();
          break;
        case 3:
          sub_100058F00();
          break;
        default:
          break;
      }
      uint64_t result = sub_100058EA0();
    }
  }
  return result;
}

uint64_t sub_100020574()
{
  if (!*(void *)v0 || (uint64_t result = sub_100058F90(), !v1))
  {
    if (*(double *)(v0 + 8) == 0.0 || (uint64_t result = sub_100058FA0(), !v1))
    {
      if (!*(_DWORD *)(v0 + 16) || (uint64_t result = sub_100058FC0(), !v1))
      {
        if (*(double *)(v0 + 24) == 0.0 || (uint64_t result = sub_100058FA0(), !v1))
        {
          if (*(double *)(v0 + 32) == 0.0 || (uint64_t result = sub_100058FA0(), !v1))
          {
            type metadata accessor for DediscoAlgorithmParametersOtherParams();
            return sub_100058E40();
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1000206AC@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  return _s19DPSubmissionService5EmptyVACycfC_0();
}

unint64_t sub_1000206D8()
{
  return 0xD000000000000025;
}

uint64_t sub_1000206F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 36);
  uint64_t v5 = sub_100058E60();
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t sub_100020768(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 36);
  uint64_t v5 = sub_100058E60();
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t (*sub_1000207D8())()
{
  return PPM_0_2_1.QueryType.enumValue.getter;
}

uint64_t sub_1000207FC()
{
  return sub_100020464();
}

uint64_t sub_100020814()
{
  return sub_100020574();
}

uint64_t sub_100020830(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100020E08(&qword_100080CA8, (void (*)(uint64_t))type metadata accessor for DediscoAlgorithmParametersOtherParams);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_1000208B0@<X0>(uint64_t a1@<X8>)
{
  if (qword_100080A00 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100059010();
  uint64_t v3 = sub_100015988(v2, (uint64_t)qword_100088558);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);
  return v4(a1, v3, v2);
}

uint64_t sub_100020958(uint64_t a1)
{
  uint64_t v2 = sub_100020E08((unint64_t *)&qword_100080C90, (void (*)(uint64_t))type metadata accessor for DediscoAlgorithmParametersOtherParams);
  return Message.debugDescription.getter(a1, v2);
}

Swift::Int sub_1000209C4()
{
  return sub_100059480();
}

uint64_t sub_100020A1C()
{
  sub_100020E08((unint64_t *)&qword_100080C90, (void (*)(uint64_t))type metadata accessor for DediscoAlgorithmParametersOtherParams);
  return sub_100058F50();
}

Swift::Int sub_100020A98()
{
  return sub_100059480();
}

uint64_t sub_100020AF0()
{
  return sub_100020E08(&qword_100080C88, (void (*)(uint64_t))type metadata accessor for DediscoAlgorithmParametersOtherParams);
}

uint64_t sub_100020B38()
{
  return sub_100020E08((unint64_t *)&qword_100080C90, (void (*)(uint64_t))type metadata accessor for DediscoAlgorithmParametersOtherParams);
}

uint64_t sub_100020B80()
{
  return sub_100020E08(&qword_100080C98, (void (*)(uint64_t))type metadata accessor for DediscoAlgorithmParametersOtherParams);
}

uint64_t sub_100020BC8()
{
  return sub_100020E08(&qword_100080CA0, (void (*)(uint64_t))type metadata accessor for DediscoAlgorithmParametersOtherParams);
}

uint64_t sub_100020C10(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100058E60();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  unint64_t v10 = (char *)&v16 - v9;
  if (*(void *)a1 == *(void *)a2
    && *(double *)(a1 + 8) == *(double *)(a2 + 8)
    && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16)
    && *(double *)(a1 + 24) == *(double *)(a2 + 24)
    && *(double *)(a1 + 32) == *(double *)(a2 + 32))
  {
    uint64_t v11 = type metadata accessor for DediscoAlgorithmParametersOtherParams();
    unint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v12(v10, a1 + *(int *)(v11 + 36), v4);
    v12(v8, a2 + *(int *)(v11 + 36), v4);
    sub_100020E08(&qword_100080CC0, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
    char v13 = sub_1000591C0();
    uint64_t v14 = *(void (**)(char *, uint64_t))(v5 + 8);
    v14(v8, v4);
    v14(v10, v4);
  }
  else
  {
    char v13 = 0;
  }
  return v13 & 1;
}

uint64_t sub_100020E08(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t static CommonUIntTLSNumberType.encodedLength.getter()
{
  return sub_100059390() / 8;
}

uint64_t CommonUIntTLSNumberType.encode<A>(into:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1000223EC(a1, a3, a4, a5, a6);
}

uint64_t sub_100020EB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v75 = a4;
  uint64_t v76 = a6;
  uint64_t v74 = a2;
  uint64_t v10 = *(void *)(*(void *)(a5 + 16) + 8);
  uint64_t v11 = *(void *)(*(void *)(v10 + 24) + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v15 = (char *)v64 - v14;
  uint64_t v66 = *(void *)(a3 - 8);
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v67 = (char *)v64 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v16);
  char v77 = (char *)v64 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  char v78 = (char *)v64 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  int v84 = (char *)v64 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  long long v82 = (char *)v64 - v25;
  __chkstk_darwin(v24);
  char v79 = (char *)v64 - v26;
  if (a1 < 0 || (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(a5 + 8) + 8) + 16))(a3) < a1)
  {
    uint64_t v86 = 0;
    unint64_t v87 = 0xE000000000000000;
    sub_100059370(49);
    swift_bridgeObjectRelease();
    uint64_t v86 = 0xD000000000000029;
    unint64_t v87 = 0x80000001000623E0;
    uint64_t v88 = a1;
    v89._countAndFlagsBits = sub_1000593D0();
    sub_1000591F0(v89);
    swift_bridgeObjectRelease();
    v90._countAndFlagsBits = 0x206E61687420;
    v90._object = (void *)0xE600000000000000;
    sub_1000591F0(v90);
    uint64_t v28 = v86;
    unint64_t v27 = v87;
    uint64_t v86 = 0;
    unint64_t v87 = 0xE000000000000000;
    sub_100059370(19);
    swift_bridgeObjectRelease();
    uint64_t v86 = 0xD000000000000010;
    unint64_t v87 = 0x80000001000629D0;
    v91._countAndFlagsBits = sub_100059490();
    sub_1000591F0(v91);
    swift_bridgeObjectRelease();
    v92._countAndFlagsBits = 46;
    v92._object = (void *)0xE100000000000000;
    sub_1000591F0(v92);
    uint64_t v30 = v86;
    char v29 = (void *)v87;
    uint64_t v86 = v28;
    unint64_t v87 = v27;
    swift_bridgeObjectRetain();
    v93._countAndFlagsBits = v30;
    v93._object = v29;
    sub_1000591F0(v93);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v31 = v86;
    unint64_t v32 = v87;
    sub_10001FA84();
    swift_allocError();
    *(void *)uint64_t v33 = v31;
    *(void *)(v33 + 8) = v32;
    *(unsigned char *)(v33 + 16) = 3;
    return swift_willThrow();
  }
  uint64_t v69 = a3;
  uint64_t result = sub_1000593A0();
  if (!a1)
  {
    char v43 = *(void (**)(char *, uint64_t))(v66 + 8);
    uint64_t v37 = v69;
    return ((uint64_t (*)(char *, uint64_t))v43)(v79, v37);
  }
  char v71 = v15;
  uint64_t v72 = AssociatedTypeWitness;
  uint64_t v73 = v11;
  v64[1] = v6;
  uint64_t v35 = 0;
  uint64_t v70 = a1 - 1;
  int v36 = (void (**)(char *, uint64_t))(v66 + 8);
  char v68 = (void (**)(char *, char *, uint64_t))(v66 + 16);
  double v65 = (void (**)(char *, char *, uint64_t))(v66 + 32);
  uint64_t v66 = (v66 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  uint64_t v37 = v69;
  uint64_t v80 = a1;
  while (1)
  {
    uint64_t v44 = v70 - v35;
    if (__OFSUB__(v70, v35)) {
      break;
    }
    if ((unint64_t)(v44 - 0x1000000000000000) >> 61 != 7) {
      goto LABEL_26;
    }
    uint64_t v83 = v35;
    uint64_t v86 = 8 * v44;
    sub_10002247C();
    sub_100059310();
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    sub_100059410();
    uint64_t v45 = v10;
    char v46 = v78;
    sub_1000593F0();
    sub_100059300();
    int v47 = *v36;
    char v48 = v46;
    uint64_t v10 = v45;
    double v49 = v84;
    (*v36)(v48, v37);
    v47(v49, v37);
    if (sub_100059350())
    {
      sub_100059410();
      sub_1000593F0();
      char v50 = sub_1000591B0();
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v47)(v49, v37);
      if ((v50 & 1) == 0) {
        goto LABEL_27;
      }
    }
    unint64_t v85 = v47;
    char v51 = v82;
    uint64_t v52 = sub_100059340();
    uint64_t v41 = v80;
    if (v52 >= 8)
    {
      (*v68)(v77, v51, v37);
      LOBYTE(v86) = -1;
      char v53 = sub_100059350();
      uint64_t v54 = sub_100059340();
      if (v53)
      {
        if (v54 > 8) {
          goto LABEL_6;
        }
        sub_100059410();
        uint64_t v37 = v69;
        sub_1000593F0();
        int v55 = v77;
        char v56 = sub_100059190();
        double v57 = v85;
        v85(v49, v37);
        unsigned int v58 = v86;
        char v59 = v67;
        (*v65)(v67, v55, v37);
        if (v56)
        {
          unsigned __int8 v60 = sub_100059330();
          uint64_t result = ((uint64_t (*)(char *, uint64_t))v57)(v59, v37);
          BOOL v61 = v58 >= v60;
          uint64_t v41 = v80;
          char v51 = v82;
          if (!v61) {
            goto LABEL_28;
          }
        }
        else
        {
          v57(v59, v37);
          uint64_t v41 = v80;
          char v51 = v82;
        }
      }
      else
      {
        if (v54 >= 9)
        {
LABEL_6:
          sub_1000224D0();
          uint64_t v37 = v69;
          sub_1000592F0();
          char v38 = v77;
          char v39 = sub_1000591A0();
          char v40 = v85;
          v85(v49, v37);
          uint64_t result = ((uint64_t (*)(char *, uint64_t))v40)(v38, v37);
          uint64_t v41 = v80;
          if (v39) {
            goto LABEL_28;
          }
          goto LABEL_7;
        }
        char v62 = v77;
        uint64_t v37 = v69;
        unsigned __int8 v63 = sub_100059330();
        uint64_t result = ((uint64_t (*)(char *, uint64_t))v85)(v62, v37);
        uint64_t v41 = v80;
        if (v86 < v63) {
          goto LABEL_28;
        }
      }
    }
LABEL_7:
    uint64_t v35 = v83 + 1;
    char v42 = sub_100059330();
    char v43 = v85;
    v85(v51, v37);
    LOBYTE(v86) = v42;
    uint64_t result = sub_1000592A0();
    if (v41 == v35) {
      return ((uint64_t (*)(char *, uint64_t))v43)(v79, v37);
    }
  }
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

uint64_t CommonUIntTLSNumberType.init<A>(from:with:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, unint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(a3 + 8) + 8) + 16))(a1);
  return CommonUIntTLSNumberType.init<A>(from:with:encodedLength:)(v10, a1, a2, a3, a4, a5);
}

uint64_t CommonUIntTLSNumberType.init<A>(from:with:encodedLength:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, unint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v54 = a6;
  unint64_t v59 = a5;
  uint64_t AssociatedConformanceWitness = *(void *)(*(void *)(*(void *)(a5 + 8) + 8) + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v53 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v10 = __chkstk_darwin(AssociatedTypeWitness);
  BOOL v61 = (char *)&v49 - v11;
  uint64_t v55 = *(void *)(a2 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  char v51 = (char *)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v52 = (char *)&v49 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  unsigned __int8 v60 = (char *)&v49 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v49 - v19;
  uint64_t v57 = *(void *)(a3 - 8);
  uint64_t v21 = __chkstk_darwin(v18);
  uint64_t v23 = (char *)&v49 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  char v56 = (char *)&v49 - v24;
  if (a1 < 0 || (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(a4 + 8) + 8) + 16))(a2) < a1)
  {
    v63[0] = 0;
    v63[1] = 0xE000000000000000;
    sub_100059370(43);
    swift_bridgeObjectRelease();
    v63[0] = 40;
    v63[1] = 0xE100000000000000;
    uint64_t v64 = a1;
    v65._countAndFlagsBits = sub_1000593D0();
    sub_1000591F0(v65);
    swift_bridgeObjectRelease();
    v66._countAndFlagsBits = 0xD000000000000028;
    v66._object = (void *)0x80000001000629A0;
    sub_1000591F0(v66);
    v67._countAndFlagsBits = v63[0];
    uint64_t v25 = (void *)v63[1];
    v63[0] = 0xD000000000000035;
    v63[1] = 0x8000000100062960;
    v67._object = v25;
    sub_1000591F0(v67);
    swift_bridgeObjectRelease();
    uint64_t v27 = v63[0];
    uint64_t v26 = v63[1];
    strcpy((char *)v63, "number type ");
    BYTE5(v63[1]) = 0;
    HIWORD(v63[1]) = -5120;
    v68._countAndFlagsBits = sub_100059490();
    sub_1000591F0(v68);
    swift_bridgeObjectRelease();
    v69._countAndFlagsBits = 46;
    v69._object = (void *)0xE100000000000000;
    sub_1000591F0(v69);
    uint64_t v29 = v63[0];
    uint64_t v28 = (void *)v63[1];
    v63[0] = v27;
    v63[1] = v26;
    swift_bridgeObjectRetain();
    v70._countAndFlagsBits = v29;
    v70._object = v28;
    sub_1000591F0(v70);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v31 = v63[0];
    uint64_t v30 = v63[1];
    sub_10001FA84();
    swift_allocError();
    *(void *)uint64_t v32 = v31;
    char v33 = 3;
LABEL_4:
    *(void *)(v32 + 8) = v30;
    *(unsigned char *)(v32 + 16) = v33;
    return swift_willThrow();
  }
  if (sub_100059240() < a1)
  {
    v63[0] = 0;
    v63[1] = 0xE000000000000000;
    sub_100059370(44);
    swift_bridgeObjectRelease();
    v63[0] = 0xD00000000000001CLL;
    v63[1] = 0x8000000100062910;
    uint64_t v64 = a1;
    v71._countAndFlagsBits = sub_1000593D0();
    sub_1000591F0(v71);
    swift_bridgeObjectRelease();
    v72._countAndFlagsBits = 0x6F20736574796220;
    v72._object = (void *)0xEE0020666F207475;
    sub_1000591F0(v72);
    uint64_t v36 = v63[0];
    uint64_t v35 = v63[1];
    v63[0] = 0;
    v63[1] = 0xE000000000000000;
    sub_100059370(35);
    swift_bridgeObjectRelease();
    v63[0] = 0xD000000000000020;
    v63[1] = 0x8000000100062930;
    v73._countAndFlagsBits = sub_100059490();
    sub_1000591F0(v73);
    swift_bridgeObjectRelease();
    v74._countAndFlagsBits = 46;
    v74._object = (void *)0xE100000000000000;
    sub_1000591F0(v74);
    uint64_t v38 = v63[0];
    uint64_t v37 = (void *)v63[1];
    v63[0] = v36;
    v63[1] = v35;
    swift_bridgeObjectRetain();
    v75._countAndFlagsBits = v38;
    v75._object = v37;
    sub_1000591F0(v75);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v39 = v63[0];
    uint64_t v30 = v63[1];
    sub_10001FA84();
    swift_allocError();
    char v33 = 0;
    *(void *)uint64_t v32 = v39;
    goto LABEL_4;
  }
  char v40 = v56;
  RandomAccessCollection<>.popFirst(_:)(a1, a3);
  v63[0] = 0;
  unint64_t v59 = sub_10002247C();
  sub_100059360();
  (*(void (**)(char *, char *, uint64_t))(v57 + 16))(v23, v40, a3);
  sub_100059200();
  uint64_t v50 = a3;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  sub_1000592E0();
  char v42 = v51;
  uint64_t v41 = v52;
  if ((v63[0] & 0x100) == 0)
  {
    char v43 = v63[0];
    uint64_t v44 = (void (**)(char *, uint64_t))(v55 + 8);
    uint64_t v45 = (void (**)(char *, char *, uint64_t))(v55 + 32);
    do
    {
      v63[0] = 8;
      sub_100059320();
      LOBYTE(v63[0]) = v43;
      sub_1000224D0();
      sub_100059360();
      char v46 = v60;
      sub_1000593B0();
      int v47 = *v44;
      (*v44)(v42, a2);
      v47(v41, a2);
      v47(v20, a2);
      (*v45)(v20, v46, a2);
      sub_1000592E0();
      char v43 = v63[0];
    }
    while ((v63[0] & 0x100) == 0);
  }
  (*(void (**)(char *, uint64_t))(v53 + 8))(v61, AssociatedTypeWitness);
  uint64_t v48 = v55;
  (*(void (**)(char *, char *, uint64_t))(v55 + 16))(v60, v20, a2);
  sub_100059360();
  (*(void (**)(char *, uint64_t))(v48 + 8))(v20, a2);
  return (*(uint64_t (**)(char *, uint64_t))(v57 + 8))(v56, v50);
}

uint64_t static PPM_0_2_1.ExtensionType.EnumValue.__derived_enum_equals(_:_:)()
{
  return 1;
}

uint64_t sub_100021F74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9 = sub_100022CA4();
  return sub_1000223EC(a1, a5, a3, v9, a4);
}

uint64_t sub_100021FD4@<X0>(uint64_t a1@<X2>, unint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  unint64_t v8 = sub_100022CA4();
  return CommonUIntTLSNumberType.init<A>(from:with:)(a3, a1, v8, a2, a4);
}

uint64_t sub_10002203C()
{
  return 2;
}

uint64_t sub_100022044(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9 = sub_100022C50();
  return sub_1000223EC(a1, a5, a3, v9, a4);
}

uint64_t sub_1000220A4@<X0>(uint64_t a1@<X2>, unint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  unint64_t v8 = sub_100022C50();
  return CommonUIntTLSNumberType.init<A>(from:with:)(a3, a1, v8, a2, a4);
}

uint64_t sub_10002210C()
{
  return 4;
}

uint64_t sub_100022114(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9 = sub_100022BFC();
  return sub_1000223EC(a1, a5, a3, v9, a4);
}

uint64_t sub_100022174@<X0>(uint64_t a1@<X2>, unint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  unint64_t v8 = sub_100022BFC();
  return CommonUIntTLSNumberType.init<A>(from:with:)(a3, a1, v8, a2, a4);
}

Swift::Int __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> PPM_0_2_1.Prio3HistogramConfig.encodedLength(with:)(Swift::Void_optional with)
{
  return 8;
}

uint64_t sub_1000221E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9 = sub_100022BA8();
  return sub_1000223EC(a1, a5, a3, v9, a4);
}

uint64_t sub_100022244@<X0>(uint64_t a1@<X2>, unint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  unint64_t v8 = sub_100022BA8();
  return CommonUIntTLSNumberType.init<A>(from:with:)(a3, a1, v8, a2, a4);
}

DPSubmissionService::UInt24 __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> UInt24.init(val:)(Swift::UInt32 val)
{
  return (DPSubmissionService::UInt24)sub_100022524(*(uint64_t *)&val);
}

uint64_t static UInt24.encodedLength.getter()
{
  return 3;
}

uint64_t UInt24.encode<A>(into:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_100022380(a1, a3, a4, a5);
}

uint64_t UInt24.init<A>(from:with:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return sub_10002261C(a1, a3, a4);
}

BOOL static PPM_0_2_1.ExtensionType.__derived_struct_equals(_:_:)(int a1, int a2)
{
  return a1 == a2;
}

uint64_t sub_10002231C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100022380(a1, *v4, a3, a4);
}

uint64_t sub_100022338@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, _DWORD *a4@<X8>)
{
  uint64_t result = sub_10002261C(a1, a2, a3);
  if (!v4) {
    *a4 = result;
  }
  return result;
}

BOOL sub_10002236C(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_100022380(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7 = sub_100022BFC();
  return sub_100020EB0(3, a1, (uint64_t)&type metadata for UInt32, a3, v7, a4);
}

uint64_t sub_1000223EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(a4 + 8) + 8) + 16))(a2);
  return sub_100020EB0(v10, a1, a2, a3, a4, a5);
}

unint64_t sub_10002247C()
{
  unint64_t result = qword_100080CC8;
  if (!qword_100080CC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100080CC8);
  }
  return result;
}

unint64_t sub_1000224D0()
{
  unint64_t result = qword_100080CD0;
  if (!qword_100080CD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100080CD0);
  }
  return result;
}

uint64_t sub_100022524(uint64_t a1)
{
  if (BYTE3(a1))
  {
    sub_100059370(55);
    v4._object = (void *)0x80000001000629F0;
    v4._countAndFlagsBits = 0xD000000000000034;
    sub_1000591F0(v4);
    v5._countAndFlagsBits = sub_1000593D0();
    sub_1000591F0(v5);
    swift_bridgeObjectRelease();
    v6._countAndFlagsBits = 46;
    v6._object = (void *)0xE100000000000000;
    sub_1000591F0(v6);
    sub_10001FA84();
    swift_allocError();
    *(void *)uint64_t v2 = 0;
    *(void *)(v2 + 8) = 0xE000000000000000;
    *(unsigned char *)(v2 + 16) = 3;
    swift_willThrow();
  }
  return a1;
}

uint64_t sub_10002261C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = sub_100022BFC();
  uint64_t result = CommonUIntTLSNumberType.init<A>(from:with:encodedLength:)(3, (uint64_t)&type metadata for UInt32, a2, v6, a3, (uint64_t)&v8);
  if (!v3) {
    return sub_100022524(v8);
  }
  return result;
}

uint64_t sub_100022698(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100022940(a1, a2, a3, (uint64_t (*)(void))sub_1000226C4, (uint64_t (*)(void))sub_100022718);
}

unint64_t sub_1000226C4()
{
  unint64_t result = qword_100080CD8;
  if (!qword_100080CD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100080CD8);
  }
  return result;
}

unint64_t sub_100022718()
{
  unint64_t result = qword_100080CE0;
  if (!qword_100080CE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100080CE0);
  }
  return result;
}

uint64_t sub_10002276C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100022940(a1, a2, a3, (uint64_t (*)(void))sub_100022798, (uint64_t (*)(void))sub_1000227EC);
}

unint64_t sub_100022798()
{
  unint64_t result = qword_100080D40;
  if (!qword_100080D40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100080D40);
  }
  return result;
}

unint64_t sub_1000227EC()
{
  unint64_t result = qword_100080D48;
  if (!qword_100080D48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100080D48);
  }
  return result;
}

uint64_t sub_100022840(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100022940(a1, a2, a3, (uint64_t (*)(void))sub_10002286C, (uint64_t (*)(void))sub_1000228C0);
}

unint64_t sub_10002286C()
{
  unint64_t result = qword_100080DA8;
  if (!qword_100080DA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100080DA8);
  }
  return result;
}

unint64_t sub_1000228C0()
{
  unint64_t result = qword_100080DB0;
  if (!qword_100080DB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100080DB0);
  }
  return result;
}

uint64_t sub_100022914(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100022940(a1, a2, a3, (uint64_t (*)(void))sub_10002297C, (uint64_t (*)(void))sub_1000229D0);
}

uint64_t sub_100022940(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  *(void *)(a1 + 16) = a4();
  uint64_t result = a5();
  *(void *)(a1 + 24) = result;
  return result;
}

unint64_t sub_10002297C()
{
  unint64_t result = qword_100080E10;
  if (!qword_100080E10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100080E10);
  }
  return result;
}

unint64_t sub_1000229D0()
{
  unint64_t result = qword_100080E18;
  if (!qword_100080E18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100080E18);
  }
  return result;
}

unint64_t sub_100022A24(uint64_t a1)
{
  unint64_t result = sub_100022A4C();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100022A4C()
{
  unint64_t result = qword_100080E78;
  if (!qword_100080E78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100080E78);
  }
  return result;
}

unint64_t sub_100022AA0(uint64_t a1)
{
  unint64_t result = sub_100022AC8();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100022AC8()
{
  unint64_t result = qword_100080E80;
  if (!qword_100080E80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100080E80);
  }
  return result;
}

unint64_t sub_100022B1C(uint64_t a1)
{
  unint64_t result = sub_100022B44();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100022B44()
{
  unint64_t result = qword_100080EE0;
  if (!qword_100080EE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100080EE0);
  }
  return result;
}

ValueMetadata *type metadata accessor for UInt24()
{
  return &type metadata for UInt24;
}

unint64_t sub_100022BA8()
{
  unint64_t result = qword_100080EE8;
  if (!qword_100080EE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100080EE8);
  }
  return result;
}

unint64_t sub_100022BFC()
{
  unint64_t result = qword_100080EF0;
  if (!qword_100080EF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100080EF0);
  }
  return result;
}

unint64_t sub_100022C50()
{
  unint64_t result = qword_100080EF8;
  if (!qword_100080EF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100080EF8);
  }
  return result;
}

unint64_t sub_100022CA4()
{
  unint64_t result = qword_100080F00;
  if (!qword_100080F00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100080F00);
  }
  return result;
}

unint64_t PPM_0_2_1.QueryConfig.QueryTypeSelector.init(time_intervalProp:fixed_sizeProp:)(char a1, uint64_t a2)
{
  return a1 & 1 | (unint64_t)(a2 << 32);
}

uint64_t PPM_0_2_1.QueryConfig.init(timePrecision:maxBatchQueryCount:minBatchSize:queryType:queryTypeSelector:)@<X0>(uint64_t result@<X0>, __int16 a2@<W1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X8>)
{
  *(void *)a7 = result;
  *(_WORD *)(a7 + 8) = a2;
  *(_DWORD *)(a7 + 12) = a3;
  *(unsigned char *)(a7 + 16) = a4;
  *(_DWORD *)(a7 + 20) = HIDWORD(a4);
  *(unsigned char *)(a7 + 24) = a5 & 1;
  *(_DWORD *)(a7 + 28) = HIDWORD(a5);
  *(unsigned char *)(a7 + 32) = a6 & 1;
  return result;
}

__n128 PPM_0_2_1.TaskConfig.init(taskInfo:leaderAggregatorEndpoint:helperAggregatorEndpoint:queryConfig:taskExpiration:vdafConfig:)@<Q0>(unint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, unint64_t a5@<X4>, unint64_t a6@<X5>, unint64_t a7@<X6>, unint64_t a8@<X7>, __n128 *a9@<X8>, __n128 a10, unint64_t a11)
{
  __n128 result = a10;
  a9->n128_u64[0] = a1;
  a9->n128_u64[1] = a2;
  a9[1].n128_u64[0] = a3;
  a9[1].n128_u64[1] = a4;
  a9[2].n128_u64[0] = a5;
  a9[2].n128_u64[1] = a6;
  a9[3].n128_u64[0] = a7;
  a9[3].n128_u64[1] = a8;
  a9[4] = a10;
  a9[5].n128_u64[0] = a11;
  return result;
}

uint64_t PPM_0_2_1.DistributedGaussianWithSubsampledMomentsAccountantConfig.maxCohortSize.getter()
{
  return *(void *)v0;
}

uint64_t PPM_0_2_1.QueryConfig.maxBatchQueryCount.getter()
{
  return *(unsigned __int16 *)(v0 + 8);
}

uint64_t PPM_0_2_1.QueryConfig.minBatchSize.getter()
{
  return *(unsigned int *)(v0 + 12);
}

unint64_t PPM_0_2_1.QueryConfig.queryType.getter()
{
  return *(unsigned __int8 *)(v0 + 16) | ((unint64_t)*(unsigned int *)(v0 + 20) << 32);
}

uint64_t PPM_0_2_1.Extension.CodingParameter.extensionTypeParameter.getter(char a1)
{
  return a1 & 1;
}

uint64_t PPM_0_2_1.QueryConfig.QueryTypeSelector.fixed_sizeProp.getter(uint64_t a1, char a2)
{
  *((void *)&v3 + 1) = a2 & 1;
  *(void *)&long long v3 = a1;
  return v3 >> 32;
}

unint64_t PPM_0_2_1.QueryConfig.QueryTypeSelector.CodingParameter.init(queryType:)(uint64_t a1)
{
  return a1 & 0xFFFFFFFF000000FFLL;
}

uint64_t PPM_0_2_1.QueryConfig.QueryTypeSelector.encodedLength(with:)(char a1, char a2, char a3)
{
  if (a1 != 3)
  {
    if (a1 == 2)
    {
      if ((a3 & 1) == 0) {
        return 4;
      }
      sub_10001FA84();
      swift_allocError();
      *(void *)uint64_t v3 = 0xD000000000000026;
    }
    else
    {
      if (a1 != 1)
      {
        sub_100059370(31);
        v8._object = (void *)0x8000000100062180;
        v8._countAndFlagsBits = 0xD00000000000001BLL;
        sub_1000591F0(v8);
        sub_100059380();
        v9._countAndFlagsBits = 11872;
        v9._object = (void *)0xE200000000000000;
        sub_1000591F0(v9);
        unint64_t v4 = 0xE000000000000000;
        sub_10001FA84();
        swift_allocError();
        *(void *)uint64_t v3 = 0;
LABEL_13:
        char v5 = 4;
        goto LABEL_14;
      }
      if ((a2 & 1) == 0) {
        return 0;
      }
      sub_10001FA84();
      swift_allocError();
      *(void *)uint64_t v3 = 0xD000000000000029;
    }
    unint64_t v4 = (unint64_t)(v7 - 32) | 0x8000000000000000;
    goto LABEL_13;
  }
  sub_10001FA84();
  swift_allocError();
  *(void *)uint64_t v3 = 0xD000000000000034;
  unint64_t v4 = 0x8000000100062140;
  char v5 = 1;
LABEL_14:
  *(void *)(v3 + 8) = v4;
  *(unsigned char *)(v3 + 16) = v5;
  return swift_willThrow();
}

uint64_t PPM_0_2_1.QueryConfig.QueryTypeSelector.encode<A>(into:with:)(uint64_t a1, char a2, char a3, char a4, uint64_t a5, uint64_t a6)
{
  if (a2 != 3)
  {
    if (a2 == 2)
    {
      if ((a4 & 1) == 0)
      {
        unint64_t v12 = sub_100022BFC();
        return sub_1000223EC(a1, (uint64_t)&type metadata for UInt32, a5, v12, a6);
      }
      sub_10001FA84();
      swift_allocError();
      unint64_t v13 = 0xD000000000000026;
    }
    else
    {
      if (a2 != 1)
      {
        sub_100059370(31);
        v15._object = (void *)0x8000000100062180;
        v15._countAndFlagsBits = 0xD00000000000001BLL;
        sub_1000591F0(v15);
        sub_100059380();
        v16._countAndFlagsBits = 11872;
        v16._object = (void *)0xE200000000000000;
        sub_1000591F0(v16);
        sub_10001FA84();
        swift_allocError();
        *(void *)uint64_t v6 = 0;
        *(void *)(v6 + 8) = 0xE000000000000000;
LABEL_13:
        char v7 = 4;
        goto LABEL_14;
      }
      if ((a3 & 1) == 0) {
        return sub_10003A974(a1, a5, a6);
      }
      sub_10001FA84();
      swift_allocError();
      unint64_t v13 = 0xD000000000000029;
    }
    *(void *)uint64_t v6 = v13;
    *(void *)(v6 + 8) = (unint64_t)(v14 - 32) | 0x8000000000000000;
    goto LABEL_13;
  }
  sub_10001FA84();
  swift_allocError();
  *(void *)uint64_t v6 = 0xD000000000000034;
  *(void *)(v6 + 8) = 0x8000000100062140;
  char v7 = 1;
LABEL_14:
  *(unsigned char *)(v6 + 16) = v7;
  return swift_willThrow();
}

uint64_t PPM_0_2_1.QueryConfig.QueryTypeSelector.init<A>(from:with:)(uint64_t a1, char a2, uint64_t a3, unint64_t a4)
{
  if (a2 != 3)
  {
    if (a2 == 1)
    {
      uint64_t result = PPM_0_2_1.QueryType.enumValue.getter(a1, a3, a4);
      if (v4) {
        return result;
      }
      unsigned __int8 v14 = 0;
      unint64_t v13 = 0;
      char v12 = 1;
    }
    else
    {
      if (a2 != 2)
      {
        sub_100059370(31);
        v17._object = (void *)0x8000000100062180;
        v17._countAndFlagsBits = 0xD00000000000001BLL;
        sub_1000591F0(v17);
        char v16 = a2;
        sub_100059380();
        v18._countAndFlagsBits = 11872;
        v18._object = (void *)0xE200000000000000;
        sub_1000591F0(v18);
        sub_10001FA84();
        swift_allocError();
        *(void *)uint64_t v5 = 0;
        *(void *)(v5 + 8) = 0xE000000000000000;
        char v6 = 4;
        goto LABEL_11;
      }
      unint64_t v10 = sub_100022BFC();
      uint64_t result = CommonUIntTLSNumberType.init<A>(from:with:)((uint64_t)&type metadata for UInt32, a3, v10, a4, (uint64_t)&v15);
      if (v4) {
        return result;
      }
      char v12 = 0;
      unint64_t v13 = (unint64_t)v15 << 32;
      unsigned __int8 v14 = 1;
    }
    LOBYTE(v15) = v14;
    char v16 = v12;
    return v13 | v14;
  }
  sub_10001FA84();
  swift_allocError();
  *(void *)uint64_t v5 = 0xD000000000000034;
  *(void *)(v5 + 8) = 0x8000000100062140;
  char v6 = 1;
LABEL_11:
  *(unsigned char *)(v5 + 16) = v6;
  return swift_willThrow();
}

BOOL static PPM_0_2_1.QueryConfig.QueryTypeSelector.__derived_struct_equals(_:_:)(uint64_t a1, char a2, uint64_t a3, char a4)
{
  if (a1)
  {
    if ((a3 & 1) == 0) {
      return 0;
    }
  }
  else if (a3)
  {
    return 0;
  }
  if ((a2 & 1) == 0) {
    return (a4 & 1) == 0 && HIDWORD(a1) == HIDWORD(a3);
  }
  return (a4 & 1) != 0;
}

uint64_t sub_100023408(void *a1)
{
  return PPM_0_2_1.QueryConfig.QueryTypeSelector.encodedLength(with:)(*a1, *v1, v1[8]);
}

uint64_t sub_100023448(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return PPM_0_2_1.QueryConfig.QueryTypeSelector.encode<A>(into:with:)(a1, *a2, *v4, v4[8], a3, a4);
}

uint64_t sub_100023490@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t result = PPM_0_2_1.QueryConfig.QueryTypeSelector.init<A>(from:with:)(a1, *a2, a3, a4);
  if (!v5)
  {
    *(unsigned char *)a5 = result & 1;
    *(_DWORD *)(a5 + 4) = HIDWORD(result);
    *(unsigned char *)(a5 + 8) = v8 & 1;
  }
  return result;
}

uint64_t sub_1000234D4(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)a1)
  {
    if (!*(unsigned char *)a2) {
      return 0;
    }
  }
  else if (*(unsigned char *)a2)
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 8))
  {
    if (*(unsigned char *)(a2 + 8)) {
      return 1;
    }
  }
  else
  {
    if (*(_DWORD *)(a1 + 4) == *(_DWORD *)(a2 + 4)) {
      char v3 = *(unsigned char *)(a2 + 8);
    }
    else {
      char v3 = 1;
    }
    if ((v3 & 1) == 0) {
      return 1;
    }
  }
  return 0;
}

unint64_t PPM_0_2_1.QueryConfig.queryTypeSelector.getter()
{
  return *(unsigned __int8 *)(v0 + 24) | ((unint64_t)*(unsigned int *)(v0 + 28) << 32);
}

uint64_t PPM_0_2_1.Interval.CodingParameter.timeParameter.getter(unsigned int a1)
{
  return (a1 >> 8) & 1;
}

DPSubmissionService::PPM_0_2_1::Interval::CodingParameter __swiftcall PPM_0_2_1.Interval.CodingParameter.init(startParameter:timeParameter:)(Swift::Void_optional startParameter, Swift::Void_optional timeParameter)
{
  return (DPSubmissionService::PPM_0_2_1::Interval::CodingParameter)(startParameter.is_nil | (timeParameter.is_nil << 8));
}

uint64_t PPM_0_2_1.QueryConfig.encodedLength(with:)()
{
  return sub_100023DEC();
}

uint64_t PPM_0_2_1.QueryConfig.encode<A>(into:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000246D0(a1, a3, a4);
}

uint64_t PPM_0_2_1.QueryConfig.init<A>(from:with:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v11 = sub_100022BA8();
  uint64_t result = CommonUIntTLSNumberType.init<A>(from:with:)((uint64_t)&type metadata for UInt64, a3, v11, a4, (uint64_t)&v23);
  if (!v5)
  {
    uint64_t v13 = v23;
    unint64_t v14 = sub_100022C50();
    CommonUIntTLSNumberType.init<A>(from:with:)((uint64_t)&type metadata for UInt16, a3, v14, a4, (uint64_t)&v23);
    __int16 v15 = v23;
    unint64_t v16 = sub_100022BFC();
    CommonUIntTLSNumberType.init<A>(from:with:)((uint64_t)&type metadata for UInt32, a3, v16, a4, (uint64_t)&v23);
    __int16 v22 = v15;
    int v17 = v23;
    unint64_t v18 = sub_100024844();
    TLSEnumType.init<A>(from:with:)(a1, (a2 & 0x10100) != 0, (uint64_t)&type metadata for PPM_0_2_1.QueryType, a3, v18, a4);
    char v19 = v23;
    int v20 = HIDWORD(v23);
    uint64_t result = PPM_0_2_1.QueryConfig.QueryTypeSelector.init<A>(from:with:)(a1, v23, a3, a4);
    *(void *)a5 = v13;
    *(_WORD *)(a5 + 8) = v22;
    *(_DWORD *)(a5 + 12) = v17;
    *(unsigned char *)(a5 + 16) = v19;
    *(_DWORD *)(a5 + 20) = v20;
    *(unsigned char *)(a5 + 24) = result & 1;
    *(_DWORD *)(a5 + 28) = HIDWORD(result);
    *(unsigned char *)(a5 + 32) = v21 & 1;
  }
  return result;
}

uint64_t sub_10002377C()
{
  return sub_100023DEC();
}

uint64_t sub_1000237B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000246D0(a1, a3, a4);
}

double sub_1000237FC@<D0>(uint64_t a1@<X0>, unsigned __int16 *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  PPM_0_2_1.QueryConfig.init<A>(from:with:)(a1, *a2 | (*((unsigned __int8 *)a2 + 2) << 16), a3, a4, (uint64_t)v9);
  if (!v5)
  {
    double result = *(double *)v9;
    long long v8 = v9[1];
    *(_OWORD *)a5 = v9[0];
    *(_OWORD *)(a5 + 16) = v8;
    *(unsigned char *)(a5 + 32) = v10;
  }
  return result;
}

BOOL sub_100023850(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  char v6 = *(unsigned char *)(a1 + 32);
  long long v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  char v8 = *(unsigned char *)(a2 + 32);
  return _s19DPSubmissionService9PPM_0_2_1V11QueryConfigV23__derived_struct_equalsySbAE_AEtFZ_0((uint64_t)v5, (uint64_t)v7);
}

uint64_t PPM_0_2_1.InputShareAAD.taskID.getter()
{
  uint64_t v1 = *(void *)v0;
  sub_100016E5C(*(void *)v0, *(void *)(v0 + 8));
  return v1;
}

uint64_t static PPM_0_2_1.TaskConfig.taskInfoLengthBounds.getter()
{
  return 0xFF00000001;
}

uint64_t PPM_0_2_1.TaskConfig.leaderAggregatorEndpoint.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  sub_100016E5C(v1, *(void *)(v0 + 24));
  return v1;
}

uint64_t PPM_0_2_1.TaskConfig.helperAggregatorEndpoint.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  sub_100016E5C(v1, *(void *)(v0 + 40));
  return v1;
}

uint64_t PPM_0_2_1.TaskConfig.queryConfig.getter()
{
  uint64_t v1 = *(void *)(v0 + 48);
  sub_100016E5C(v1, *(void *)(v0 + 56));
  return v1;
}

uint64_t static PPM_0_2_1.Challenge.issuerNameLengthBounds.getter()
{
  return 0xFFFF00000001;
}

uint64_t PPM_0_2_1.TaskConfig.taskExpiration.getter()
{
  return *(void *)(v0 + 64);
}

uint64_t PPM_0_2_1.TaskConfig.vdafConfig.getter()
{
  uint64_t v1 = *(void *)(v0 + 72);
  sub_100016E5C(v1, *(void *)(v0 + 80));
  return v1;
}

uint64_t PPM_0_2_1.VDAFConfig.CodingParameter.vdafTypeSelector_prio3_histogramParameter.getter(unsigned int a1)
{
  return HIWORD(a1) & 1;
}

uint64_t PPM_0_2_1.TaskConfig.CodingParameter.init(leaderAggregatorEndpointParameter:helperAggregatorEndpointParameter:taskExpirationParameter:)(char a1, char a2, char a3)
{
  return a1 & 1 | ((a2 & 1) << 8) | ((a3 & 1) << 16);
}

uint64_t PPM_0_2_1.TaskConfig.encodedLength(with:)()
{
  return sub_100023E38();
}

unint64_t PPM_0_2_1.TaskConfig.encode<A>(into:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100024540(a1, a3, a4);
}

uint64_t PPM_0_2_1.TaskConfig.init<A>(from:with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, uint64_t a4@<X8>)
{
  unint64_t v9 = sub_100024898();
  uint64_t result = RangeReplaceableCollection<>.init<A>(from:with:)(a1, 0xFF00000001, 1, (uint64_t)&type metadata for Data, a2, v9, a3);
  if (!v4)
  {
    uint64_t v11 = v23;
    uint64_t v21 = sub_100040F74(a1, a2, a3);
    uint64_t v22 = v12;
    uint64_t v18 = sub_100040F74(a1, a2, a3);
    uint64_t v19 = v13;
    uint64_t v20 = *((void *)&v23 + 1);
    RangeReplaceableCollection<>.init<A>(from:with:)(a1, 0xFFFF00000001, 1, (uint64_t)&type metadata for Data, a2, v9, a3);
    long long v17 = v23;
    unint64_t v14 = sub_100022BA8();
    CommonUIntTLSNumberType.init<A>(from:with:)((uint64_t)&type metadata for UInt64, a2, v14, a3, (uint64_t)&v23);
    uint64_t v16 = v23;
    uint64_t result = RangeReplaceableCollection<>.init<A>(from:with:)(a1, 0xFFFF00000001, 1, (uint64_t)&type metadata for Data, a2, v9, a3);
    long long v15 = v23;
    *(void *)a4 = v11;
    *(void *)(a4 + 8) = v20;
    *(void *)(a4 + 16) = v21;
    *(void *)(a4 + 24) = v22;
    *(void *)(a4 + 32) = v18;
    *(void *)(a4 + 40) = v19;
    *(_OWORD *)(a4 + 48) = v17;
    *(void *)(a4 + 64) = v16;
    *(_OWORD *)(a4 + 72) = v15;
  }
  return result;
}

uint64_t sub_100023C70()
{
  return sub_100023E38();
}

unint64_t sub_100023CBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100024540(a1, a3, a4);
}

double sub_100023D10@<D0>(uint64_t a1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, uint64_t a4@<X8>)
{
  PPM_0_2_1.TaskConfig.init<A>(from:with:)(a1, a2, a3, (uint64_t)v9);
  if (!v4)
  {
    long long v7 = v9[3];
    *(_OWORD *)(a4 + 32) = v9[2];
    *(_OWORD *)(a4 + 48) = v7;
    *(_OWORD *)(a4 + 64) = v9[4];
    *(void *)(a4 + 80) = v10;
    double result = *(double *)v9;
    long long v8 = v9[1];
    *(_OWORD *)a4 = v9[0];
    *(_OWORD *)(a4 + 16) = v8;
  }
  return result;
}

uint64_t sub_100023D80(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 48);
  _OWORD v7[2] = *(_OWORD *)(a1 + 32);
  v7[3] = v2;
  v7[4] = *(_OWORD *)(a1 + 64);
  uint64_t v8 = *(void *)(a1 + 80);
  long long v3 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v3;
  long long v4 = *(_OWORD *)(a2 + 48);
  _OWORD v9[2] = *(_OWORD *)(a2 + 32);
  v9[3] = v4;
  v9[4] = *(_OWORD *)(a2 + 64);
  uint64_t v10 = *(void *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v5;
  return _s19DPSubmissionService9PPM_0_2_1V10TaskConfigV23__derived_struct_equalsySbAE_AEtFZ_0((uint64_t *)v7, (uint64_t *)v9) & 1;
}

uint64_t sub_100023DEC()
{
  return PPM_0_2_1.QueryConfig.QueryTypeSelector.encodedLength(with:)(v0[16], v0[24], v0[32]) + 15;
}

uint64_t sub_100023E38()
{
  long long v48 = *v0;
  sub_1000251C8((uint64_t)&v48, (uint64_t)v49);
  sub_1000251C8((uint64_t)v49, (uint64_t)&v50);
  unsigned __int8 v2 = BYTE6(v51);
  unint64_t v3 = 0;
  switch(v51 >> 62)
  {
    case 1uLL:
      v51 &= 0x3FFFFFFFFFFFFFFFuLL;
      if (__OFSUB__(HIDWORD(v50), v50)) {
        goto LABEL_46;
      }
      unint64_t v3 = HIDWORD(v50) - (int)v50;
LABEL_6:
      sub_100025224((uint64_t)&v48);
LABEL_7:
      sub_10003B748(v3, 0xFF00000001uLL);
      if (!v1)
      {
        uint64_t v6 = sub_10003B948(0xFF00000001);
        sub_100025254((uint64_t)&v48);
        unint64_t v7 = v3 + v6;
        if (!__OFADD__(v3, v6))
        {
          long long v45 = v0[1];
          long long v46 = v45;
          sub_1000251C8((uint64_t)&v46, (uint64_t)v47);
          sub_1000251C8((uint64_t)v47, (uint64_t)&v52);
          unsigned __int8 v8 = BYTE6(v53);
          unint64_t v9 = 0;
          switch(v53 >> 62)
          {
            case 1uLL:
              v53 &= 0x3FFFFFFFFFFFFFFFuLL;
              if (__OFSUB__(HIDWORD(v52), v52)) {
                goto LABEL_50;
              }
              unint64_t v9 = HIDWORD(v52) - (int)v52;
LABEL_15:
              sub_100025224((uint64_t)&v45);
LABEL_16:
              sub_10003B748(v9, 0xFFFF00000001uLL);
              uint64_t v12 = sub_10003B948(0xFFFF00000001);
              sub_100025254((uint64_t)&v45);
              unint64_t v13 = v9 + v12;
              if (__OFADD__(v9, v12)) {
                goto LABEL_48;
              }
              BOOL v14 = __OFADD__(v7, v13);
              unint64_t v15 = v7 + v13;
              if (v14) {
                goto LABEL_49;
              }
              long long v42 = v0[2];
              long long v43 = v42;
              sub_1000251C8((uint64_t)&v43, (uint64_t)v44);
              sub_1000251C8((uint64_t)v44, (uint64_t)&v54);
              unsigned __int8 v16 = BYTE6(v55);
              unint64_t v17 = 0;
              switch(v55 >> 62)
              {
                case 1uLL:
                  v55 &= 0x3FFFFFFFFFFFFFFFuLL;
                  if (__OFSUB__(HIDWORD(v54), v54)) {
                    goto LABEL_54;
                  }
                  unint64_t v17 = HIDWORD(v54) - (int)v54;
LABEL_23:
                  sub_100025224((uint64_t)&v42);
LABEL_24:
                  sub_10003B748(v17, 0xFFFF00000001uLL);
                  uint64_t v20 = sub_10003B948(0xFFFF00000001);
                  sub_100025254((uint64_t)&v42);
                  unint64_t v21 = v17 + v20;
                  if (__OFADD__(v17, v20)) {
                    goto LABEL_52;
                  }
                  BOOL v14 = __OFADD__(v15, v21);
                  unint64_t v22 = v15 + v21;
                  if (v14) {
                    goto LABEL_53;
                  }
                  long long v40 = v0[3];
                  sub_1000251C8((uint64_t)&v40, (uint64_t)v41);
                  sub_1000251C8((uint64_t)v41, (uint64_t)&v56);
                  unsigned __int8 v23 = BYTE6(v57);
                  unint64_t v24 = 0;
                  switch(v57 >> 62)
                  {
                    case 1uLL:
                      v57 &= 0x3FFFFFFFFFFFFFFFuLL;
                      if (__OFSUB__(HIDWORD(v56), v56)) {
                        goto LABEL_59;
                      }
                      unint64_t v24 = HIDWORD(v56) - (int)v56;
LABEL_31:
                      sub_100025224((uint64_t)&v40);
LABEL_32:
                      sub_10003B748(v24, 0xFFFF00000001uLL);
                      uint64_t v27 = sub_10003B948(0xFFFF00000001);
                      sub_100025254((uint64_t)&v40);
                      unint64_t v28 = v24 + v27;
                      if (__OFADD__(v24, v27)) {
                        goto LABEL_56;
                      }
                      BOOL v14 = __OFADD__(v22, v28);
                      unint64_t v29 = v22 + v28;
                      if (v14) {
                        goto LABEL_57;
                      }
                      unint64_t v30 = v29 + 8;
                      if (__OFADD__(v29, 8)) {
                        goto LABEL_58;
                      }
                      long long v38 = *(long long *)((char *)v0 + 72);
                      sub_1000251C8((uint64_t)&v38, (uint64_t)v39);
                      sub_1000251C8((uint64_t)v39, (uint64_t)&v58);
                      unsigned __int8 v31 = BYTE6(v59);
                      unint64_t v32 = 0;
                      switch(v59 >> 62)
                      {
                        case 1uLL:
                          v59 &= 0x3FFFFFFFFFFFFFFFuLL;
                          if (__OFSUB__(HIDWORD(v58), v58)) {
                            goto LABEL_62;
                          }
                          unint64_t v32 = HIDWORD(v58) - (int)v58;
LABEL_40:
                          sub_100025224((uint64_t)&v38);
LABEL_41:
                          sub_10003B748(v32, 0xFFFF00000001uLL);
                          uint64_t v36 = sub_10003B948(0xFFFF00000001);
                          sub_100025254((uint64_t)&v38);
                          unint64_t v37 = v32 + v36;
                          if (__OFADD__(v32, v36)) {
                            goto LABEL_61;
                          }
                          uint64_t result = v30 + v37;
                          if (!__OFADD__(v30, v37)) {
                            return result;
                          }
                          __break(1u);
                          break;
                        case 2uLL:
                          v59 &= 0x3FFFFFFFFFFFFFFFuLL;
                          uint64_t v33 = *(void *)(v58 + 16);
                          uint64_t v34 = *(void *)(v58 + 24);
                          unint64_t v32 = v34 - v33;
                          if (!__OFSUB__(v34, v33)) {
                            goto LABEL_40;
                          }
                          goto LABEL_63;
                        case 3uLL:
                          goto LABEL_41;
                        default:
                          v59 &= 0x3FFFFFFFFFFFFFFFuLL;
                          unint64_t v32 = v31;
                          goto LABEL_41;
                      }
                      break;
                    case 2uLL:
                      v57 &= 0x3FFFFFFFFFFFFFFFuLL;
                      uint64_t v25 = *(void *)(v56 + 16);
                      uint64_t v26 = *(void *)(v56 + 24);
                      unint64_t v24 = v26 - v25;
                      if (!__OFSUB__(v26, v25)) {
                        goto LABEL_31;
                      }
                      goto LABEL_60;
                    case 3uLL:
                      goto LABEL_32;
                    default:
                      v57 &= 0x3FFFFFFFFFFFFFFFuLL;
                      unint64_t v24 = v23;
                      goto LABEL_32;
                  }
                  break;
                case 2uLL:
                  v55 &= 0x3FFFFFFFFFFFFFFFuLL;
                  uint64_t v18 = *(void *)(v54 + 16);
                  uint64_t v19 = *(void *)(v54 + 24);
                  unint64_t v17 = v19 - v18;
                  if (!__OFSUB__(v19, v18)) {
                    goto LABEL_23;
                  }
                  goto LABEL_55;
                case 3uLL:
                  goto LABEL_24;
                default:
                  v55 &= 0x3FFFFFFFFFFFFFFFuLL;
                  unint64_t v17 = v16;
                  goto LABEL_24;
              }
              break;
            case 2uLL:
              v53 &= 0x3FFFFFFFFFFFFFFFuLL;
              uint64_t v10 = *(void *)(v52 + 16);
              uint64_t v11 = *(void *)(v52 + 24);
              unint64_t v9 = v11 - v10;
              if (!__OFSUB__(v11, v10)) {
                goto LABEL_15;
              }
              goto LABEL_51;
            case 3uLL:
              goto LABEL_16;
            default:
              v53 &= 0x3FFFFFFFFFFFFFFFuLL;
              unint64_t v9 = v8;
              goto LABEL_16;
          }
        }
        __break(1u);
LABEL_46:
        __break(1u);
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
LABEL_51:
        __break(1u);
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
LABEL_61:
        __break(1u);
LABEL_62:
        __break(1u);
LABEL_63:
        __break(1u);
        JUMPOUT(0x100024338);
      }
      return sub_100025254((uint64_t)&v48);
    case 2uLL:
      v51 &= 0x3FFFFFFFFFFFFFFFuLL;
      uint64_t v4 = *(void *)(v50 + 16);
      uint64_t v5 = *(void *)(v50 + 24);
      unint64_t v3 = v5 - v4;
      if (!__OFSUB__(v5, v4)) {
        goto LABEL_6;
      }
      goto LABEL_47;
    case 3uLL:
      goto LABEL_7;
    default:
      v51 &= 0x3FFFFFFFFFFFFFFFuLL;
      unint64_t v3 = v2;
      goto LABEL_7;
  }
}

uint64_t _s19DPSubmissionService9PPM_0_2_1V10TaskConfigV23__derived_struct_equalsySbAE_AEtFZ_0(uint64_t *a1, uint64_t *a2)
{
  if ((_s19DPSubmissionService9PPM_0_2_1V3UrlV23__derived_struct_equalsySbAE_AEtFZ_0(*a1, a1[1], *a2, a2[1]) & 1) == 0
    || (_s19DPSubmissionService9PPM_0_2_1V3UrlV23__derived_struct_equalsySbAE_AEtFZ_0(a1[2], a1[3], a2[2], a2[3]) & 1) == 0
    || (_s19DPSubmissionService9PPM_0_2_1V3UrlV23__derived_struct_equalsySbAE_AEtFZ_0(a1[4], a1[5], a2[4], a2[5]) & 1) == 0
    || (_s19DPSubmissionService9PPM_0_2_1V3UrlV23__derived_struct_equalsySbAE_AEtFZ_0(a1[6], a1[7], a2[6], a2[7]) & 1) == 0
    || a1[8] != a2[8])
  {
    return 0;
  }
  uint64_t v4 = a1[9];
  unint64_t v5 = a1[10];
  uint64_t v6 = a2[9];
  unint64_t v7 = a2[10];
  return _s19DPSubmissionService9PPM_0_2_1V3UrlV23__derived_struct_equalsySbAE_AEtFZ_0(v4, v5, v6, v7);
}

BOOL _s19DPSubmissionService9PPM_0_2_1V11QueryConfigV23__derived_struct_equalsySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 != *(void *)a2
    || *(unsigned __int16 *)(a1 + 8) != *(unsigned __int16 *)(a2 + 8)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)
    || *(unsigned __int8 *)(a1 + 16) != *(unsigned __int8 *)(a2 + 16)
    || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20))
  {
    return 0;
  }
  uint64_t v7 = *(void *)(a1 + 24);
  char v8 = *(unsigned char *)(a1 + 32);
  uint64_t v4 = *(void *)(a2 + 24);
  char v5 = *(unsigned char *)(a2 + 32);
  sub_100025284((uint64_t)&v7, (uint64_t)&v9);
  sub_100025284((uint64_t)&v4, (uint64_t)&v6);
  sub_100025284((uint64_t)&v9, (uint64_t)&v10);
  if (v10)
  {
    sub_100025284((uint64_t)&v6, (uint64_t)&v11);
    if (v11 != 1) {
      return 0;
    }
  }
  else
  {
    sub_100025284((uint64_t)&v6, (uint64_t)&v11);
    if (v11) {
      return 0;
    }
  }
  char v2 = v5;
  if ((v8 & 1) == 0)
  {
    if (HIDWORD(v7) != HIDWORD(v4)) {
      char v2 = 1;
    }
    return (v2 & 1) == 0;
  }
  return (v5 & 1) != 0;
}

unint64_t sub_100024540(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100024898();
  unint64_t result = RangeReplaceableCollection<>.encode<A>(into:with:)(a1, 0xFF00000001uLL, 1, (uint64_t)&type metadata for Data, a2);
  if (!v4)
  {
    sub_100040E00(a1, v3[2], v3[3], a2, a3);
    sub_100040E00(a1, v3[4], v3[5], a2, a3);
    RangeReplaceableCollection<>.encode<A>(into:with:)(a1, 0xFFFF00000001uLL, 1, (uint64_t)&type metadata for Data, a2);
    unint64_t v9 = sub_100022BA8();
    sub_1000223EC(a1, (uint64_t)&type metadata for UInt64, a2, v9, a3);
    return RangeReplaceableCollection<>.encode<A>(into:with:)(a1, 0xFFFF00000001uLL, 1, (uint64_t)&type metadata for Data, a2);
  }
  return result;
}

uint64_t sub_1000246D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v8 = sub_100022BA8();
  uint64_t result = sub_1000223EC(a1, (uint64_t)&type metadata for UInt64, a2, v8, a3);
  if (!v4)
  {
    unint64_t v10 = sub_100022C50();
    sub_1000223EC(a1, (uint64_t)&type metadata for UInt16, a2, v10, a3);
    unint64_t v11 = sub_100022BFC();
    sub_1000223EC(a1, (uint64_t)&type metadata for UInt32, a2, v11, a3);
    char v12 = v3[16];
    unint64_t v13 = sub_100024844();
    sub_100035128(a1, (uint64_t)&type metadata for PPM_0_2_1.QueryType, a2, v13, a3);
    return PPM_0_2_1.QueryConfig.QueryTypeSelector.encode<A>(into:with:)(a1, v12, v3[24], v3[32], a2, a3);
  }
  return result;
}

unint64_t sub_100024844()
{
  unint64_t result = qword_100080F08;
  if (!qword_100080F08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100080F08);
  }
  return result;
}

unint64_t sub_100024898()
{
  unint64_t result = qword_100080F10;
  if (!qword_100080F10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100080F10);
  }
  return result;
}

unint64_t sub_1000248EC(uint64_t a1)
{
  unint64_t result = sub_100024914();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100024914()
{
  unint64_t result = qword_100080F70;
  if (!qword_100080F70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100080F70);
  }
  return result;
}

unint64_t sub_100024968(uint64_t a1)
{
  unint64_t result = sub_100024990();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100024990()
{
  unint64_t result = qword_100080FD0;
  if (!qword_100080FD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100080FD0);
  }
  return result;
}

unint64_t sub_1000249E4(uint64_t a1)
{
  unint64_t result = sub_100024A0C();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100024A0C()
{
  unint64_t result = qword_100081030;
  if (!qword_100081030)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100081030);
  }
  return result;
}

__n128 _s11QueryConfigVwcp(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t _s11QueryConfigVwet(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  BOOL v4 = v3 >= 3;
  int v5 = v3 - 3;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t _s11QueryConfigVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)__n128 result = a2 - 254;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = a2 + 2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PPM_0_2_1.QueryConfig()
{
  return &type metadata for PPM_0_2_1.QueryConfig;
}

uint64_t _s11QueryConfigV17QueryTypeSelectorVwCP(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)__n128 result = v2;
  return result;
}

uint64_t _s11QueryConfigV17QueryTypeSelectorVwet(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t _s11QueryConfigV17QueryTypeSelectorVwst(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 9) = v3;
  return result;
}

ValueMetadata *type metadata accessor for PPM_0_2_1.QueryConfig.QueryTypeSelector()
{
  return &type metadata for PPM_0_2_1.QueryConfig.QueryTypeSelector;
}

void *initializeBufferWithCopyOfBuffer for PPM_0_2_1.QueryType(void *result, void *a2)
{
  *__n128 result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for PPM_0_2_1.QueryType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && a1[8]) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 3;
  int v5 = v3 - 3;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for PPM_0_2_1.QueryType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(void *)__n128 result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(unsigned char *)__n128 result = a2 + 2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PPM_0_2_1.QueryConfig.QueryTypeSelector.CodingParameter()
{
  return &type metadata for PPM_0_2_1.QueryConfig.QueryTypeSelector.CodingParameter;
}

_WORD *_s11QueryConfigV15CodingParameterVwCP(_WORD *result, _WORD *a2)
{
  *__n128 result = *a2;
  return result;
}

uint64_t _s11QueryConfigV15CodingParameterVwet(unsigned __int16 *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 0xFFFF) <= 0xFFFEFFFF) {
    int v2 = 2;
  }
  else {
    int v2 = 4;
  }
  if ((a2 + 0xFFFF) < 0xFF0000) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 16)) - 0xFFFF;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = a1[1];
      if (!a1[1]) {
        return 0;
      }
      return (*a1 | (v4 << 16)) - 0xFFFF;
    }
    int v4 = *((unsigned __int8 *)a1 + 2);
    if (*((unsigned char *)a1 + 2)) {
      return (*a1 | (v4 << 16)) - 0xFFFF;
    }
  }
  return 0;
}

uint64_t _s11QueryConfigV15CodingParameterVwst(uint64_t result, int a2, int a3)
{
  if ((a3 + 0xFFFF) <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if ((a3 + 0xFFFF) < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    unsigned int v6 = ((a2 - 1) >> 16) + 1;
    *(_WORD *)__n128 result = a2 - 1;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = v6;
        return result;
      case 2:
        *(_WORD *)(result + 2) = v6;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)(result + 2) = v6;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *(unsigned char *)(result + 2) = 0;
      break;
    case 2:
      *(_WORD *)(result + 2) = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100024D54);
    case 4:
      *(_DWORD *)(result + 2) = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for PPM_0_2_1.QueryConfig.CodingParameter()
{
  return &type metadata for PPM_0_2_1.QueryConfig.CodingParameter;
}

uint64_t _s10TaskConfigVwCP(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t _s10TaskConfigVwxx(uint64_t *a1)
{
  sub_100016B2C(*a1, a1[1]);
  sub_100016B2C(a1[2], a1[3]);
  sub_100016B2C(a1[4], a1[5]);
  sub_100016B2C(a1[6], a1[7]);
  uint64_t v2 = a1[9];
  unint64_t v3 = a1[10];
  return sub_100016B2C(v2, v3);
}

uint64_t *_s10TaskConfigVwcp(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_100016E5C(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  uint64_t v6 = a2[2];
  unint64_t v7 = a2[3];
  sub_100016E5C(v6, v7);
  a1[2] = v6;
  a1[3] = v7;
  uint64_t v8 = a2[4];
  unint64_t v9 = a2[5];
  sub_100016E5C(v8, v9);
  a1[4] = v8;
  a1[5] = v9;
  uint64_t v10 = a2[6];
  unint64_t v11 = a2[7];
  sub_100016E5C(v10, v11);
  a1[6] = v10;
  a1[7] = v11;
  uint64_t v12 = a2[9];
  a1[8] = a2[8];
  unint64_t v13 = a2[10];
  sub_100016E5C(v12, v13);
  a1[9] = v12;
  a1[10] = v13;
  return a1;
}

uint64_t *_s10TaskConfigVwca(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_100016E5C(*a2, v5);
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_100016B2C(v6, v7);
  uint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  sub_100016E5C(v8, v9);
  uint64_t v10 = a1[2];
  unint64_t v11 = a1[3];
  a1[2] = v8;
  a1[3] = v9;
  sub_100016B2C(v10, v11);
  uint64_t v12 = a2[4];
  unint64_t v13 = a2[5];
  sub_100016E5C(v12, v13);
  uint64_t v14 = a1[4];
  unint64_t v15 = a1[5];
  a1[4] = v12;
  a1[5] = v13;
  sub_100016B2C(v14, v15);
  uint64_t v16 = a2[6];
  unint64_t v17 = a2[7];
  sub_100016E5C(v16, v17);
  uint64_t v18 = a1[6];
  unint64_t v19 = a1[7];
  a1[6] = v16;
  a1[7] = v17;
  sub_100016B2C(v18, v19);
  a1[8] = a2[8];
  uint64_t v21 = a2[9];
  unint64_t v20 = a2[10];
  sub_100016E5C(v21, v20);
  uint64_t v22 = a1[9];
  unint64_t v23 = a1[10];
  a1[9] = v21;
  a1[10] = v20;
  sub_100016B2C(v22, v23);
  return a1;
}

__n128 _s10TaskConfigVwtk(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t _s10TaskConfigVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_100016B2C(v4, v5);
  uint64_t v6 = *(void *)(a1 + 16);
  unint64_t v7 = *(void *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  sub_100016B2C(v6, v7);
  uint64_t v8 = *(void *)(a1 + 32);
  unint64_t v9 = *(void *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  sub_100016B2C(v8, v9);
  uint64_t v10 = *(void *)(a1 + 48);
  unint64_t v11 = *(void *)(a1 + 56);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  sub_100016B2C(v10, v11);
  uint64_t v12 = *(void *)(a2 + 80);
  uint64_t v13 = *(void *)(a1 + 72);
  unint64_t v14 = *(void *)(a1 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = v12;
  sub_100016B2C(v13, v14);
  return a1;
}

uint64_t _s10TaskConfigVwet(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xD && *(unsigned char *)(a1 + 88)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t _s10TaskConfigVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 13;
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 88) = 1;
    }
  }
  else
  {
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 88) = 0;
    }
    if (a2)
    {
      *(void *)__n128 result = 0;
      *(void *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PPM_0_2_1.TaskConfig()
{
  return &type metadata for PPM_0_2_1.TaskConfig;
}

uint64_t _s10TaskConfigV15CodingParameterVwCP(uint64_t result, __int16 *a2)
{
  __int16 v2 = *a2;
  *(unsigned char *)(result + 2) = *((unsigned char *)a2 + 2);
  *(_WORD *)__n128 result = v2;
  return result;
}

uint64_t _s10TaskConfigV15CodingParameterVwet(unsigned __int16 *a1, int a2)
{
  if (a2)
  {
    if ((a2 + 0x1FFFFFF) >> 24)
    {
      int v2 = *((unsigned __int8 *)a1 + 3);
      if (*((unsigned char *)a1 + 3)) {
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 0xFFFFFF;
      }
    }
    else
    {
      int v2 = *(unsigned __int16 *)((char *)a1 + 3);
      if (*(unsigned __int16 *)((char *)a1 + 3)) {
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 0xFFFFFF;
      }
    }
  }
  return 0;
}

uint64_t _s10TaskConfigV15CodingParameterVwst(uint64_t result, int a2, int a3)
{
  if ((a3 + 0x1FFFFFF) >> 24) {
    int v3 = 1;
  }
  else {
    int v3 = 2;
  }
  if (!a3) {
    int v3 = 0;
  }
  if (a2)
  {
    *(_WORD *)__n128 result = a2 - 1;
    *(unsigned char *)(result + 2) = (a2 - 1) >> 16;
    if (v3)
    {
      unsigned int v4 = ((a2 - 1) >> 24) + 1;
      if (v3 == 2) {
        *(_WORD *)(result + 3) = v4;
      }
      else {
        *(unsigned char *)(result + 3) = v4;
      }
    }
  }
  else if (v3)
  {
    if (v3 == 2) {
      *(_WORD *)(result + 3) = 0;
    }
    else {
      *(unsigned char *)(result + 3) = 0;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PPM_0_2_1.TaskConfig.CodingParameter()
{
  return &type metadata for PPM_0_2_1.TaskConfig.CodingParameter;
}

uint64_t sub_1000251C8(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100025224(uint64_t a1)
{
  return a1;
}

uint64_t sub_100025254(uint64_t a1)
{
  return a1;
}

uint64_t sub_100025284(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100016C98(&qword_100080B80);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

__n128 PPM_0_2_1.VDAFConfig.VDAFTypeSelector.init(prio3_countProp:prio3_sumProp:prio3_sum_vecProp:prio3_histogramProp:poplar1Prop:prio2Prop:prio_plusplusProp:prio_pirapporProp:prio3_sum_vec_field64_multiproof_cmac_aes128Prop:prio3_sum_vec_field64_multiproof_hmac_sha256_aes128Prop:pine_field64_hmac_sha256_aes128Prop:pine_field32_hmac_sha256_aes128Prop:pine_field40_hmac_sha256_aes128Prop:)@<Q0>(char a1@<W0>, __int16 a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, int a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, int a10, char a11, uint64_t a12, uint64_t a13, int a14, char a15, char a16, uint64_t a17, int a18, char a19, char a20,long long a21,uint64_t a22,int a23,__int16 a24,char a25,long long a26,uint64_t a27,int a28,__int16 a29,char a30,__n128 a31,uint64_t a32,int a33,__int16 a34,char a35)
{
  sub_10001FBE4(a12, (uint64_t)v51, &qword_100080BB0);
  char v42 = v52;
  char v63 = HIBYTE(a2) & 1;
  char v62 = BYTE4(a4) & 1;
  char v61 = a6 & 1;
  char v60 = BYTE2(a7) & 1;
  char v59 = BYTE4(a8) & 1;
  char v58 = a11 & 1;
  char v57 = a16 & 1;
  char v56 = a20 & 1;
  char v55 = a25 & 1;
  char v54 = a30 & 1;
  char v53 = a35 & 1;
  long long v43 = v51[0];
  long long v44 = v51[1];
  long long v45 = v51[2];
  long long v46 = v51[3];
  long long v47 = v51[4];
  *(unsigned char *)a9 = a1 & 1;
  *(unsigned char *)(a9 + 1) = a2;
  *(unsigned char *)(a9 + 2) = v63;
  *(void *)(a9 + 4) = a3;
  *(_DWORD *)(a9 + 12) = a4;
  *(unsigned char *)(a9 + 16) = v62;
  *(void *)(a9 + 20) = a5;
  *(unsigned char *)(a9 + 28) = v61;
  *(_WORD *)(a9 + 30) = a7;
  *(unsigned char *)(a9 + 32) = v60;
  *(_DWORD *)(a9 + 36) = a8;
  *(unsigned char *)(a9 + 40) = v59;
  *(_DWORD *)(a9 + 44) = a10;
  *(unsigned char *)(a9 + 48) = v58;
  *(_OWORD *)(a9 + 56) = v43;
  *(_OWORD *)(a9 + 72) = v44;
  *(_OWORD *)(a9 + 88) = v45;
  *(_OWORD *)(a9 + 104) = v46;
  *(_OWORD *)(a9 + 120) = v47;
  *(unsigned char *)(a9 + 136) = v42;
  *(void *)(a9 + 140) = a13;
  *(unsigned char *)(a9 + 152) = a15;
  *(_DWORD *)(a9 + 148) = a14;
  *(unsigned char *)(a9 + 153) = v57;
  *(void *)(a9 + 156) = a17;
  *(unsigned char *)(a9 + 168) = a19;
  *(_DWORD *)(a9 + 164) = a18;
  *(unsigned char *)(a9 + 169) = v56;
  *(_OWORD *)(a9 + 176) = a21;
  *(void *)(a9 + 192) = a22;
  *(_WORD *)(a9 + 204) = a24;
  *(_DWORD *)(a9 + 200) = a23;
  *(unsigned char *)(a9 + 206) = v55;
  *(_OWORD *)(a9 + 208) = a26;
  *(void *)(a9 + 224) = a27;
  *(_WORD *)(a9 + 236) = a29;
  *(_DWORD *)(a9 + 232) = a28;
  *(unsigned char *)(a9 + 238) = v54;
  __n128 result = a31;
  *(__n128 *)(a9 + 240) = a31;
  *(void *)(a9 + 256) = a32;
  *(_WORD *)(a9 + 268) = a34;
  *(_DWORD *)(a9 + 264) = a33;
  *(unsigned char *)(a9 + 270) = v53;
  return result;
}

void *PPM_0_2_1.VDAFConfig.init(dpConfig:vdafType:vdafTypeSelector:)@<X0>(void *__src@<X3>, uint64_t a2@<X0>, uint64_t a3@<X1>, unint64_t a4@<X2>, uint64_t a5@<X8>)
{
  char v5 = a4;
  unint64_t v9 = HIDWORD(a4);
  __n128 result = memcpy((void *)(a5 + 24), __src, 0x10FuLL);
  *(void *)a5 = a2;
  *(void *)(a5 + 8) = a3;
  *(unsigned char *)(a5 + 16) = v5;
  *(_DWORD *)(a5 + 20) = v9;
  return result;
}

unint64_t PPM_0_2_1.Prio3SumVecMultiproofConfig.init(length:bits:chunkLength:numProofs:)(unsigned int a1, unsigned __int8 a2)
{
  return a1 | ((unint64_t)a2 << 32);
}

void *PPM_0_2_1.DPConfig.DPMechanismSelector.init(noneProp:epsProp:eps_deltaProp:renyiProp:aggregator_discrete_gaussianProp:aggregator_discrete_gaussian_client_symmetric_rapporProp:distributed_gaussian_with_subsampled_moments_accountantProp:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  sub_10001FBE4(a7, (uint64_t)v35, &qword_100080B50);
  sub_10001FBE4((uint64_t)v35, (uint64_t)v36, &qword_100080B50);
  sub_10001FBE4(a6, (uint64_t)v34, &qword_100080B48);
  sub_10001FBE4((uint64_t)v34, (uint64_t)v37, &qword_100080B48);
  sub_10001FBE4(a5, (uint64_t)v33, &qword_100080B40);
  sub_10001FBE4((uint64_t)v33, (uint64_t)v38, &qword_100080B40);
  sub_10001FBE4(a4, (uint64_t)v30, &qword_100080B68);
  long long v22 = v30[1];
  long long v23 = v30[0];
  uint64_t v14 = v31;
  LOBYTE(a4) = v32;
  sub_10001FBE4(a3, (uint64_t)v27, &qword_100080B70);
  long long v20 = v27[1];
  long long v21 = v27[0];
  long long v18 = v27[3];
  long long v19 = v27[2];
  uint64_t v15 = v28;
  char v16 = v29;
  sub_10001FBE4(a2, (uint64_t)v25, &qword_100080B78);
  *(_OWORD *)((char *)__src + 8) = v25[0];
  LOBYTE(__src[0]) = a1 & 1;
  *(_OWORD *)((char *)&__src[1] + 8) = v25[1];
  BYTE8(__src[2]) = v26;
  __src[3] = v21;
  __src[4] = v20;
  __src[5] = v19;
  __src[6] = v18;
  *(void *)&__src[7] = v15;
  BYTE8(__src[7]) = v16;
  __src[8] = v23;
  __src[9] = v22;
  *(void *)&__src[10] = v14;
  BYTE8(__src[10]) = a4;
  sub_10001FBE4((uint64_t)v38, (uint64_t)&__src[11], &qword_100080B40);
  sub_10001FBE4((uint64_t)v37, (uint64_t)&__src[21], &qword_100080B48);
  sub_10001FBE4((uint64_t)v36, (uint64_t)&__src[33] + 8, &qword_100080B50);
  return memcpy(a8, __src, 0x2D1uLL);
}

void *PPM_0_2_1.DPConfig.init(dpMechanism:dpMechanismSelector:)@<X0>(unint64_t a1@<X0>, const void *a2@<X1>, uint64_t a3@<X8>)
{
  char v3 = a1;
  unint64_t v5 = HIDWORD(a1);
  __n128 result = memcpy((void *)(a3 + 8), a2, 0x2D1uLL);
  *(unsigned char *)a3 = v3;
  *(_DWORD *)(a3 + 4) = v5;
  return result;
}

uint64_t PPM_0_2_1.AggregatorDiscreteGaussianDpConfig.init(targetCentralEpsilon:targetCentralDelta:sigma:squaredL2Sensitivity:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  char v13 = *(unsigned char *)(a2 + 10) & 1;
  char v12 = *(unsigned char *)(a2 + 16) & 1;
  char v11 = *(unsigned char *)(a2 + 32) & 1;
  char v10 = *(unsigned char *)(a3 + 10) & 1;
  char v9 = *(unsigned char *)(a3 + 16) & 1;
  char v8 = *(unsigned char *)(a3 + 32) & 1;
  char v7 = *(unsigned char *)(a4 + 10) & 1;
  char v6 = *(unsigned char *)(a4 + 16) & 1;
  char v5 = *(unsigned char *)(a4 + 32) & 1;
  *(unsigned char *)a5 = *(unsigned char *)result;
  *(_DWORD *)(a5 + 4) = *(_DWORD *)(result + 4);
  *(_WORD *)(a5 + 8) = *(_WORD *)(result + 8);
  *(unsigned char *)(a5 + 10) = *(unsigned char *)(result + 10) & 1;
  *(_DWORD *)(a5 + 12) = *(_DWORD *)(result + 12);
  *(unsigned char *)(a5 + 16) = *(unsigned char *)(result + 16) & 1;
  *(void *)(a5 + 24) = *(void *)(result + 24);
  *(unsigned char *)(a5 + 40) = *(unsigned char *)a2;
  *(_DWORD *)(a5 + 44) = *(_DWORD *)(a2 + 4);
  *(_WORD *)(a5 + 48) = *(_WORD *)(a2 + 8);
  *(unsigned char *)(a5 + 50) = v13;
  *(_DWORD *)(a5 + 52) = *(_DWORD *)(a2 + 12);
  *(unsigned char *)(a5 + 56) = v12;
  *(void *)(a5 + 64) = *(void *)(a2 + 24);
  *(unsigned char *)(a5 + 72) = v11;
  *(unsigned char *)(a5 + 80) = *(unsigned char *)a3;
  *(_DWORD *)(a5 + 84) = *(_DWORD *)(a3 + 4);
  *(_WORD *)(a5 + 88) = *(_WORD *)(a3 + 8);
  *(unsigned char *)(a5 + 90) = v10;
  *(_DWORD *)(a5 + 92) = *(_DWORD *)(a3 + 12);
  *(unsigned char *)(a5 + 96) = v9;
  *(void *)(a5 + 104) = *(void *)(a3 + 24);
  *(unsigned char *)(a5 + 112) = v8;
  *(unsigned char *)(a5 + 120) = *(unsigned char *)a4;
  *(_DWORD *)(a5 + 124) = *(_DWORD *)(a4 + 4);
  *(_WORD *)(a5 + 128) = *(_WORD *)(a4 + 8);
  *(unsigned char *)(a5 + 130) = v7;
  *(_DWORD *)(a5 + 132) = *(_DWORD *)(a4 + 12);
  *(unsigned char *)(a5 + 136) = v6;
  *(void *)(a5 + 144) = *(void *)(a4 + 24);
  *(unsigned char *)(a5 + 152) = v5;
  *(unsigned char *)(a5 + 32) = *(unsigned char *)(result + 32) & 1;
  return result;
}

__n128 PPM_0_2_1.AggregatorDiscreteGaussianClientSymmetricRapporDpConfig.init(aggDGaussDPConfig:localEpsilon:)@<Q0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  char v3 = *a2;
  int v4 = *((_DWORD *)a2 + 1);
  __int16 v5 = *((_WORD *)a2 + 4);
  char v6 = a2[10];
  int v7 = *((_DWORD *)a2 + 3);
  char v8 = a2[16];
  uint64_t v9 = *((void *)a2 + 3);
  char v10 = a2[32];
  long long v11 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a3 + 96) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a3 + 112) = v11;
  *(_OWORD *)(a3 + 128) = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(a3 + 137) = *(_OWORD *)(a1 + 137);
  long long v12 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a3 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a3 + 48) = v12;
  long long v13 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a3 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a3 + 80) = v13;
  __n128 result = *(__n128 *)a1;
  long long v15 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a1;
  *(_OWORD *)(a3 + 16) = v15;
  *(unsigned char *)(a3 + 160) = v3;
  *(_DWORD *)(a3 + 164) = v4;
  *(_WORD *)(a3 + 168) = v5;
  *(unsigned char *)(a3 + 170) = v6 & 1;
  *(_DWORD *)(a3 + 172) = v7;
  *(unsigned char *)(a3 + 176) = v8 & 1;
  *(void *)(a3 + 184) = v9;
  *(unsigned char *)(a3 + 192) = v10 & 1;
  return result;
}

uint64_t PPM_0_2_1.DistributedGaussianWithSubsampledMomentsAccountantConfig.init(maxCohortSize:numIterations:populationSize:renyiOrder:sigma:sigmaAfterNormalization:targetCentralEpsilon:targetCentralDelta:)@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  char v19 = *(unsigned char *)(a5 + 16) & 1;
  char v18 = *(unsigned char *)(a5 + 32) & 1;
  char v17 = *(unsigned char *)(a6 + 10) & 1;
  char v16 = *(unsigned char *)(a6 + 16) & 1;
  char v15 = *(unsigned char *)(a6 + 32) & 1;
  char v14 = *(unsigned char *)(a7 + 10) & 1;
  char v13 = *(unsigned char *)(a7 + 16) & 1;
  char v12 = *(unsigned char *)(a7 + 32) & 1;
  char v11 = *(unsigned char *)(a8 + 10) & 1;
  char v10 = *(unsigned char *)(a8 + 16) & 1;
  char v9 = *(unsigned char *)(a8 + 32) & 1;
  *(void *)a9 = result;
  *(_DWORD *)(a9 + 8) = a2;
  *(void *)(a9 + 16) = a3;
  *(_DWORD *)(a9 + 24) = a4;
  *(unsigned char *)(a9 + 32) = *(unsigned char *)a5;
  *(_DWORD *)(a9 + 36) = *(_DWORD *)(a5 + 4);
  *(_WORD *)(a9 + 40) = *(_WORD *)(a5 + 8);
  *(_DWORD *)(a9 + 44) = *(_DWORD *)(a5 + 12);
  *(unsigned char *)(a9 + 48) = v19;
  *(void *)(a9 + 56) = *(void *)(a5 + 24);
  *(unsigned char *)(a9 + 64) = v18;
  *(unsigned char *)(a9 + 72) = *(unsigned char *)a6;
  *(_DWORD *)(a9 + 76) = *(_DWORD *)(a6 + 4);
  *(_WORD *)(a9 + 80) = *(_WORD *)(a6 + 8);
  *(unsigned char *)(a9 + 82) = v17;
  *(_DWORD *)(a9 + 84) = *(_DWORD *)(a6 + 12);
  *(unsigned char *)(a9 + 88) = v16;
  *(void *)(a9 + 96) = *(void *)(a6 + 24);
  *(unsigned char *)(a9 + 104) = v15;
  *(unsigned char *)(a9 + 112) = *(unsigned char *)a7;
  *(_DWORD *)(a9 + 116) = *(_DWORD *)(a7 + 4);
  *(_WORD *)(a9 + 120) = *(_WORD *)(a7 + 8);
  *(unsigned char *)(a9 + 122) = v14;
  *(_DWORD *)(a9 + 124) = *(_DWORD *)(a7 + 12);
  *(unsigned char *)(a9 + 128) = v13;
  *(void *)(a9 + 136) = *(void *)(a7 + 24);
  *(unsigned char *)(a9 + 144) = v12;
  *(unsigned char *)(a9 + 152) = *(unsigned char *)a8;
  *(_DWORD *)(a9 + 156) = *(_DWORD *)(a8 + 4);
  *(_WORD *)(a9 + 160) = *(_WORD *)(a8 + 8);
  *(unsigned char *)(a9 + 162) = v11;
  *(_DWORD *)(a9 + 164) = *(_DWORD *)(a8 + 12);
  *(unsigned char *)(a9 + 168) = v10;
  *(void *)(a9 + 176) = *(void *)(a8 + 24);
  *(unsigned char *)(a9 + 184) = v9;
  *(unsigned char *)(a9 + 42) = *(unsigned char *)(a5 + 10) & 1;
  return result;
}

unint64_t PPM_0_2_1.RealNumber.RealNumberTypeSelector.init(float16Prop:float32Prop:float64Prop:)(int a1, uint64_t a2)
{
  return (a2 << 32) | ((unint64_t)(BYTE2(a1) & 1) << 16) | (unsigned __int16)a1;
}

uint64_t PPM_0_2_1.RealNumber.init(realNumberType:realNumberTypeSelector:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  *(unsigned char *)a6 = result;
  *(_DWORD *)(a6 + 4) = HIDWORD(result);
  *(_WORD *)(a6 + 8) = a2;
  *(unsigned char *)(a6 + 10) = BYTE2(a2) & 1;
  *(_DWORD *)(a6 + 12) = HIDWORD(a2);
  *(unsigned char *)(a6 + 16) = a3 & 1;
  *(void *)(a6 + 24) = a4;
  *(unsigned char *)(a6 + 32) = a5 & 1;
  return result;
}

unint64_t sub_100025C60(unint64_t a1, __int16 a2, uint64_t a3, unint64_t a4)
{
  if ((a2 & 0x100) != 0)
  {
    sub_10001FA84();
    swift_allocError();
    *(void *)uint64_t v7 = 0xD000000000000085;
    *(void *)(v7 + 8) = 0x80000001000627B0;
    *(unsigned char *)(v7 + 16) = 1;
    return swift_willThrow();
  }
  else
  {
    unint64_t v6 = 0;
    switch(a4 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(a3), a3)) {
          goto LABEL_12;
        }
        unint64_t v6 = HIDWORD(a3) - (int)a3;
LABEL_8:
        unint64_t result = sub_10003B748(v6, a1);
        if (!v4)
        {
          uint64_t v11 = sub_10003B948(a1);
          BOOL v12 = __OFADD__(v6, v11);
          unint64_t result = v6 + v11;
          if (v12)
          {
            __break(1u);
LABEL_12:
            __break(1u);
LABEL_13:
            __break(1u);
            JUMPOUT(0x100025D60);
          }
        }
        return result;
      case 2uLL:
        uint64_t v10 = *(void *)(a3 + 16);
        uint64_t v9 = *(void *)(a3 + 24);
        unint64_t v6 = v9 - v10;
        if (!__OFSUB__(v9, v10)) {
          goto LABEL_8;
        }
        goto LABEL_13;
      case 3uLL:
        goto LABEL_8;
      default:
        unint64_t v6 = BYTE6(a4);
        goto LABEL_8;
    }
  }
}

uint64_t static PPM_0_2_1.QueryType.maxValue.getter()
{
  return 255;
}

_UNKNOWN **static PPM_0_2_1.RealNumberType.EnumValue.allCases.getter()
{
  return &off_100075538;
}

void sub_100025D90(void *a1@<X8>)
{
  *a1 = &off_100075560;
}

unint64_t sub_100025DA0()
{
  unint64_t result = sub_1000465E0((uint64_t)&off_1000753F0);
  static PPM_0_2_1.RealNumberType.rangesByEnumVals = result;
  return result;
}

uint64_t *PPM_0_2_1.RealNumberType.rangesByEnumVals.unsafeMutableAddressor()
{
  if (qword_100080A08 != -1) {
    swift_once();
  }
  return &static PPM_0_2_1.RealNumberType.rangesByEnumVals;
}

uint64_t static PPM_0_2_1.RealNumberType.rangesByEnumVals.getter()
{
  return sub_10002A970(&qword_100080A08);
}

uint64_t static PPM_0_2_1.RealNumberType.rangesByEnumVals.setter(uint64_t a1)
{
  return sub_10002A9F0(a1, &qword_100080A08, &static PPM_0_2_1.RealNumberType.rangesByEnumVals);
}

uint64_t (*static PPM_0_2_1.RealNumberType.rangesByEnumVals.modify())()
{
  if (qword_100080A08 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_100025EE8(uint64_t a1, uint64_t a2)
{
  return sub_10002AB20(a1, a2, &qword_100080A08);
}

unint64_t PPM_0_2_1.DPConfig.DPMechanismSelector.CodingParameter.dpMechanism.getter()
{
  return *v0 | ((unint64_t)*((unsigned int *)v0 + 1) << 32);
}

uint64_t PPM_0_2_1.Report.CodingParameter.reportMetadataParameter.getter(int a1)
{
  return a1 & 0x1FFFF;
}

uint64_t PPM_0_2_1.RealNumber.RealNumberTypeSelector.float64Prop.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t PPM_0_2_1.RealNumber.RealNumberTypeSelector.encodedLength(with:)(char a1, int a2, char a3, uint64_t a4, char a5)
{
  if (a1 != 4)
  {
    switch(a1)
    {
      case 3:
        if ((a5 & 1) == 0) {
          return 8;
        }
        sub_10001FA84();
        swift_allocError();
        *(void *)uint64_t v5 = 0xD000000000000023;
        break;
      case 2:
        if ((a3 & 1) == 0) {
          return 4;
        }
        sub_10001FA84();
        swift_allocError();
        *(void *)uint64_t v5 = 0xD000000000000023;
        break;
      case 1:
        if ((a2 & 0x10000) == 0) {
          return 2;
        }
        sub_10001FA84();
        swift_allocError();
        *(void *)uint64_t v5 = 0xD000000000000023;
        break;
      default:
        sub_100059370(31);
        v10._countAndFlagsBits = 0xD00000000000001BLL;
        v10._object = (void *)0x8000000100062180;
        sub_1000591F0(v10);
        sub_100059380();
        v11._countAndFlagsBits = 11872;
        v11._object = (void *)0xE200000000000000;
        sub_1000591F0(v11);
        unint64_t v6 = 0xE000000000000000;
        sub_10001FA84();
        swift_allocError();
        *(void *)uint64_t v5 = 0;
LABEL_17:
        char v7 = 4;
        goto LABEL_18;
    }
    unint64_t v6 = (unint64_t)(v9 - 32) | 0x8000000000000000;
    goto LABEL_17;
  }
  sub_10001FA84();
  swift_allocError();
  *(void *)uint64_t v5 = 0xD000000000000034;
  unint64_t v6 = 0x8000000100062140;
  char v7 = 1;
LABEL_18:
  *(void *)(v5 + 8) = v6;
  *(unsigned char *)(v5 + 16) = v7;
  return swift_willThrow();
}

uint64_t PPM_0_2_1.RealNumber.RealNumberTypeSelector.encode<A>(into:with:)(uint64_t a1, char a2, int a3, char a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  if (a2 != 4)
  {
    switch(a2)
    {
      case 3:
        if ((a6 & 1) == 0)
        {
          unint64_t v13 = sub_100022BA8();
          char v14 = &type metadata for UInt64;
          return sub_1000223EC(a1, (uint64_t)v14, a7, v13, a8);
        }
        sub_10001FA84();
        swift_allocError();
        break;
      case 2:
        if ((a4 & 1) == 0)
        {
          unint64_t v13 = sub_100022BFC();
          char v14 = &type metadata for UInt32;
          return sub_1000223EC(a1, (uint64_t)v14, a7, v13, a8);
        }
        sub_10001FA84();
        swift_allocError();
        break;
      case 1:
        if ((a3 & 0x10000) == 0)
        {
          unint64_t v13 = sub_100022C50();
          char v14 = &type metadata for UInt16;
          return sub_1000223EC(a1, (uint64_t)v14, a7, v13, a8);
        }
        sub_10001FA84();
        swift_allocError();
        break;
      default:
        sub_100059370(31);
        v17._countAndFlagsBits = 0xD00000000000001BLL;
        v17._object = (void *)0x8000000100062180;
        sub_1000591F0(v17);
        sub_100059380();
        v18._countAndFlagsBits = 11872;
        v18._object = (void *)0xE200000000000000;
        sub_1000591F0(v18);
        sub_10001FA84();
        swift_allocError();
        *(void *)uint64_t v8 = 0;
        *(void *)(v8 + 8) = 0xE000000000000000;
LABEL_18:
        char v9 = 4;
        goto LABEL_19;
    }
    *(void *)uint64_t v8 = 0xD000000000000023;
    *(void *)(v8 + 8) = (unint64_t)(v16 - 32) | 0x8000000000000000;
    goto LABEL_18;
  }
  sub_10001FA84();
  swift_allocError();
  *(void *)uint64_t v8 = 0xD000000000000034;
  *(void *)(v8 + 8) = 0x8000000100062140;
  char v9 = 1;
LABEL_19:
  *(unsigned char *)(v8 + 16) = v9;
  return swift_willThrow();
}

unint64_t PPM_0_2_1.RealNumber.RealNumberTypeSelector.init<A>(from:with:)(uint64_t a1, char a2, uint64_t a3, unint64_t a4)
{
  switch(a2)
  {
    case 4:
      sub_10001FA84();
      swift_allocError();
      *(void *)uint64_t v5 = 0xD000000000000034;
      *(void *)(v5 + 8) = 0x8000000100062140;
      char v6 = 1;
LABEL_3:
      *(unsigned char *)(v5 + 16) = v6;
      return swift_willThrow();
    case 1:
      unint64_t v16 = sub_100022C50();
      unint64_t result = CommonUIntTLSNumberType.init<A>(from:with:)((uint64_t)&type metadata for UInt16, a3, v16, a4, (uint64_t)&v18);
      if (!v4)
      {
        unsigned __int8 v14 = 0;
        unint64_t v13 = 0;
        uint64_t v12 = (unsigned __int16)v18;
        char v15 = 1;
        goto LABEL_14;
      }
      break;
    case 2:
      unint64_t v17 = sub_100022BFC();
      unint64_t result = CommonUIntTLSNumberType.init<A>(from:with:)((uint64_t)&type metadata for UInt32, a3, v17, a4, (uint64_t)&v18);
      if (!v4)
      {
        uint64_t v12 = 0;
        char v15 = 0;
        unint64_t v13 = (unint64_t)v18 << 32;
        unsigned __int8 v14 = 1;
        goto LABEL_14;
      }
      break;
    case 3:
      unint64_t v11 = sub_100022BA8();
      unint64_t result = CommonUIntTLSNumberType.init<A>(from:with:)((uint64_t)&type metadata for UInt64, a3, v11, a4, (uint64_t)&v18);
      if (!v4)
      {
        uint64_t v12 = 0;
        unint64_t v13 = 0;
        unsigned __int8 v14 = 1;
        char v15 = 1;
LABEL_14:
        LOBYTE(v18) = v14;
        char v19 = v15;
        return v13 | ((unint64_t)v14 << 16) | v12;
      }
      break;
    default:
      sub_100059370(31);
      v20._object = (void *)0x8000000100062180;
      v20._countAndFlagsBits = 0xD00000000000001BLL;
      sub_1000591F0(v20);
      char v19 = a2;
      sub_100059380();
      v21._countAndFlagsBits = 11872;
      v21._object = (void *)0xE200000000000000;
      sub_1000591F0(v21);
      sub_10001FA84();
      swift_allocError();
      *(void *)uint64_t v5 = 0;
      *(void *)(v5 + 8) = 0xE000000000000000;
      char v6 = 4;
      goto LABEL_3;
  }
  return result;
}

uint64_t static PPM_0_2_1.RealNumber.RealNumberTypeSelector.__derived_struct_equals(_:_:)(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, char a6, uint64_t a7, char a8)
{
  return sub_10002E15C(a1 & 0xFFFFFFFF0000FFFFLL | ((unint64_t)(BYTE2(a1) & 1) << 16), a2 & 1, a3, a4 & 1, a5 & 0xFFFFFFFF0000FFFFLL | ((unint64_t)(BYTE2(a5) & 1) << 16), a6 & 1, a7, a8 & 1);
}

uint64_t sub_1000266BC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return PPM_0_2_1.RealNumber.RealNumberTypeSelector.encodedLength(with:)(*a1, *v4 | (*((unsigned __int8 *)v4 + 2) << 16), *((unsigned char *)v4 + 8), a4, *((unsigned char *)v4 + 24));
}

uint64_t sub_10002670C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return PPM_0_2_1.RealNumber.RealNumberTypeSelector.encode<A>(into:with:)(a1, *a2, *v4 | (*((unsigned __int8 *)v4 + 2) << 16), *((unsigned char *)v4 + 8), *((void *)v4 + 2), *((unsigned char *)v4 + 24), a3, a4);
}

unint64_t sub_100026768@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t result = PPM_0_2_1.RealNumber.RealNumberTypeSelector.init<A>(from:with:)(a1, *a2, a3, a4);
  if (!v5)
  {
    *(_WORD *)a5 = result;
    *(unsigned char *)(a5 + 2) = BYTE2(result) & 1;
    *(_DWORD *)(a5 + 4) = HIDWORD(result);
    *(unsigned char *)(a5 + 8) = v8 & 1;
    *(void *)(a5 + 16) = v9;
    *(unsigned char *)(a5 + 24) = v10 & 1;
  }
  return result;
}

uint64_t sub_1000267BC(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return sub_10002E15C(*a1 | ((unint64_t)*((unsigned int *)a1 + 1) << 32) | ((unint64_t)*((unsigned __int8 *)a1 + 2) << 16), *((unsigned char *)a1 + 8), *((void *)a1 + 2), *((unsigned char *)a1 + 24), *a2 | ((unint64_t)*((unsigned int *)a2 + 1) << 32) | ((unint64_t)*((unsigned __int8 *)a2 + 2) << 16), *((unsigned char *)a2 + 8), *((void *)a2 + 2), *((unsigned char *)a2 + 24));
}

unint64_t PPM_0_2_1.RealNumber.realNumberTypeSelector.getter()
{
  return *(unsigned __int16 *)(v0 + 8) | ((unint64_t)*(unsigned int *)(v0 + 12) << 32) | ((unint64_t)*(unsigned __int8 *)(v0 + 10) << 16);
}

uint64_t PPM_0_2_1.RealNumber.encodedLength(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10002FDEC(a1, a2, a3, a4);
}

uint64_t PPM_0_2_1.RealNumber.encode<A>(into:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100030080(a1, a3, a4);
}

unint64_t PPM_0_2_1.RealNumber.init<A>(from:with:)@<X0>(uint64_t a1@<X0>, __int16 a2@<W1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  BOOL v10 = (a2 & 0x101) != 0;
  unint64_t v11 = sub_100030150();
  unint64_t result = TLSEnumType.init<A>(from:with:)(a1, v10, (uint64_t)&type metadata for PPM_0_2_1.RealNumberType, a3, v11, a4);
  if (!v5)
  {
    unint64_t result = PPM_0_2_1.RealNumber.RealNumberTypeSelector.init<A>(from:with:)(a1, v16, a3, a4);
    *(unsigned char *)a5 = v16;
    *(_DWORD *)(a5 + 4) = v17;
    *(_WORD *)(a5 + 8) = result;
    *(unsigned char *)(a5 + 10) = BYTE2(result) & 1;
    *(_DWORD *)(a5 + 12) = HIDWORD(result);
    *(unsigned char *)(a5 + 16) = v13 & 1;
    *(void *)(a5 + 24) = v14;
    *(unsigned char *)(a5 + 32) = v15 & 1;
  }
  return result;
}

uint64_t sub_10002697C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10002FDEC(a1, a2, a3, a4);
}

uint64_t sub_1000269B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100030080(a1, a3, a4);
}

double sub_1000269FC@<D0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  PPM_0_2_1.RealNumber.init<A>(from:with:)(a1, *a2 | (a2[1] << 8), a3, a4, (uint64_t)v9);
  if (!v5)
  {
    double result = *(double *)v9;
    long long v8 = v9[1];
    *(_OWORD *)a5 = v9[0];
    *(_OWORD *)(a5 + 16) = v8;
    *(unsigned char *)(a5 + 32) = v10;
  }
  return result;
}

uint64_t sub_100026A50(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  char v6 = *(unsigned char *)(a1 + 32);
  long long v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  char v8 = *(unsigned char *)(a2 + 32);
  return _s19DPSubmissionService9PPM_0_2_1V10RealNumberV23__derived_struct_equalsySbAE_AEtFZ_0((unsigned __int8 *)v5, (unsigned __int8 *)v7) & 1;
}

BOOL static PPM_0_2_1.Role.EnumValue.__derived_enum_equals(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void PPM_0_2_1.Role.EnumValue.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

_UNKNOWN **static PPM_0_2_1.DPMechanism.EnumValue.allCases.getter()
{
  return &off_100075588;
}

BOOL sub_100026AE0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void sub_100026AF4()
{
  sub_100059470(*v0);
}

void sub_100026B20(void *a1@<X8>)
{
  *a1 = &off_100075588;
}

unint64_t sub_100026B30()
{
  unint64_t result = sub_100046600((uint64_t)&off_100075440);
  static PPM_0_2_1.DPMechanism.rangesByEnumVals = result;
  return result;
}

uint64_t *PPM_0_2_1.DPMechanism.rangesByEnumVals.unsafeMutableAddressor()
{
  if (qword_100080A10 != -1) {
    swift_once();
  }
  return &static PPM_0_2_1.DPMechanism.rangesByEnumVals;
}

uint64_t static PPM_0_2_1.DPMechanism.rangesByEnumVals.getter()
{
  return sub_10002A970(&qword_100080A10);
}

uint64_t static PPM_0_2_1.DPMechanism.rangesByEnumVals.setter(uint64_t a1)
{
  return sub_10002A9F0(a1, &qword_100080A10, &static PPM_0_2_1.DPMechanism.rangesByEnumVals);
}

uint64_t (*static PPM_0_2_1.DPMechanism.rangesByEnumVals.modify())()
{
  if (qword_100080A10 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return j__swift_endAccess;
}

unint64_t PPM_0_2_1.Token.CodingParameter.Nk.getter(unint64_t a1)
{
  return HIDWORD(a1);
}

DPSubmissionService::PPM_0_2_1::Role __swiftcall PPM_0_2_1.Role.init(enumValue:rawValue:)(DPSubmissionService::PPM_0_2_1::Role::EnumValue enumValue, Swift::UInt32 rawValue)
{
  return (DPSubmissionService::PPM_0_2_1::Role)(enumValue | (*(void *)&rawValue << 32));
}

uint64_t sub_100026C8C(uint64_t a1, uint64_t a2)
{
  return sub_10002AB20(a1, a2, &qword_100080A10);
}

void sub_100026CB0(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t PPM_0_2_1.PrioPiRapporConfig.prime.getter()
{
  return *(unsigned int *)(v0 + 4);
}

unsigned char *sub_100026CC4@<X0>(unsigned char *result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(unsigned char *)a3 = *result;
  *(_DWORD *)(a3 + 4) = a2;
  return result;
}

BOOL sub_100026CD4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2 && *((_DWORD *)a1 + 1) == *((_DWORD *)a2 + 1);
}

void PPM_0_2_1.AggregatorDiscreteGaussianDpConfig.targetCentralEpsilon.getter(uint64_t a1@<X8>)
{
  int v2 = *(_DWORD *)(v1 + 4);
  __int16 v3 = *(_WORD *)(v1 + 8);
  char v4 = *(unsigned char *)(v1 + 10);
  int v5 = *(_DWORD *)(v1 + 12);
  char v6 = *(unsigned char *)(v1 + 16);
  uint64_t v7 = *(void *)(v1 + 24);
  char v8 = *(unsigned char *)(v1 + 32);
  *(unsigned char *)a1 = *(unsigned char *)v1;
  *(_DWORD *)(a1 + 4) = v2;
  *(_WORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 10) = v4;
  *(_DWORD *)(a1 + 12) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(unsigned char *)(a1 + 32) = v8;
}

void PPM_0_2_1.AggregatorDiscreteGaussianDpConfig.targetCentralDelta.getter(uint64_t a1@<X8>)
{
  int v2 = *(_DWORD *)(v1 + 44);
  __int16 v3 = *(_WORD *)(v1 + 48);
  char v4 = *(unsigned char *)(v1 + 50);
  int v5 = *(_DWORD *)(v1 + 52);
  char v6 = *(unsigned char *)(v1 + 56);
  uint64_t v7 = *(void *)(v1 + 64);
  char v8 = *(unsigned char *)(v1 + 72);
  *(unsigned char *)a1 = *(unsigned char *)(v1 + 40);
  *(_DWORD *)(a1 + 4) = v2;
  *(_WORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 10) = v4;
  *(_DWORD *)(a1 + 12) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(unsigned char *)(a1 + 32) = v8;
}

uint64_t PPM_0_2_1.AggregatorDiscreteGaussianDpConfig.CodingParameter.targetCentralEpsilonParameter.getter(__int16 a1)
{
  return a1 & 0x1FF;
}

uint64_t PPM_0_2_1.EpsDeltaDPConfig.CodingParameter.deltaParameter.getter(unsigned int a1)
{
  return BYTE2(a1) | ((HIBYTE(a1) & 1) << 8);
}

uint64_t PPM_0_2_1.EpsDeltaDPConfig.encodedLength(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10002F9A4(a1, a2, a3, a4);
}

uint64_t PPM_0_2_1.EpsDeltaDPConfig.encode<A>(into:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10003060C(a1, a3, a4);
}

uint64_t PPM_0_2_1.EpsDeltaDPConfig.init(epsilon:delta:)@<X0>(char *a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  char v3 = *a2;
  int v4 = *((_DWORD *)a2 + 1);
  __int16 v5 = *((_WORD *)a2 + 4);
  char v6 = a2[10];
  int v7 = *((_DWORD *)a2 + 3);
  char v8 = a2[16];
  uint64_t v9 = *((void *)a2 + 3);
  char v10 = a2[32];
  char v11 = *a1;
  int v12 = *((_DWORD *)a1 + 1);
  __int16 v13 = *((_WORD *)a1 + 4);
  char v14 = a1[10];
  int v15 = *((_DWORD *)a1 + 3);
  char v16 = a1[16];
  uint64_t v17 = *((void *)a1 + 3);
  uint64_t result = a1[32];
  *(unsigned char *)a3 = v11;
  *(_DWORD *)(a3 + 4) = v12;
  *(_WORD *)(a3 + 8) = v13;
  *(unsigned char *)(a3 + 10) = v14 & 1;
  *(_DWORD *)(a3 + 12) = v15;
  *(unsigned char *)(a3 + 16) = v16 & 1;
  *(void *)(a3 + 24) = v17;
  *(unsigned char *)(a3 + 32) = result & 1;
  *(unsigned char *)(a3 + 40) = v3;
  *(_DWORD *)(a3 + 44) = v4;
  *(_WORD *)(a3 + 48) = v5;
  *(unsigned char *)(a3 + 50) = v6 & 1;
  *(_DWORD *)(a3 + 52) = v7;
  *(unsigned char *)(a3 + 56) = v8 & 1;
  *(void *)(a3 + 64) = v9;
  *(unsigned char *)(a3 + 72) = v10 & 1;
  return result;
}

unint64_t PPM_0_2_1.EpsDeltaDPConfig.init<A>(from:with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8 = a2;
  int v11 = ((a2 & (unint64_t)&_mh_execute_header) >> 32) | (a2 >> 8);
  if ((a2 & (unint64_t)&_mh_execute_header) != 0) {
    LOWORD(a2) = 0;
  }
  else {
    LOWORD(a2) = a2;
  }
  unint64_t result = PPM_0_2_1.RealNumber.init<A>(from:with:)(a1, a2 & 0xFEFF | ((v11 & 1) << 8), a3, a4, (uint64_t)v29);
  if (!v5)
  {
    char v13 = v29[0];
    int v14 = v30;
    __int16 v15 = v31;
    char v16 = v32;
    int v45 = v33;
    char v28 = v34;
    uint64_t v27 = v35;
    char v26 = v36;
    if ((v8 & (unint64_t)&_mh_execute_header) != 0) {
      __int16 v17 = 0;
    }
    else {
      __int16 v17 = BYTE2(v8);
    }
    unint64_t result = PPM_0_2_1.RealNumber.init<A>(from:with:)(a1, v17 & 0xFEFF | (((unsigned __int16)(((v8 & (unint64_t)&_mh_execute_header) >> 32) | BYTE3(v8)) & 1u) << 8), a3, a4, (uint64_t)v37);
    char v18 = v37[0];
    int v19 = v38;
    __int16 v20 = v39;
    char v21 = v40;
    int v22 = v41;
    char v23 = v42;
    uint64_t v24 = v43;
    char v25 = v44;
    *(unsigned char *)a5 = v13;
    *(_DWORD *)(a5 + 4) = v14;
    *(_WORD *)(a5 + 8) = v15;
    *(unsigned char *)(a5 + 10) = v16;
    *(_DWORD *)(a5 + 12) = v45;
    *(unsigned char *)(a5 + 16) = v28;
    *(void *)(a5 + 24) = v27;
    *(unsigned char *)(a5 + 32) = v26;
    *(unsigned char *)(a5 + 40) = v18;
    *(_DWORD *)(a5 + 44) = v19;
    *(_WORD *)(a5 + 48) = v20;
    *(unsigned char *)(a5 + 50) = v21;
    *(_DWORD *)(a5 + 52) = v22;
    *(unsigned char *)(a5 + 56) = v23;
    *(void *)(a5 + 64) = v24;
    *(unsigned char *)(a5 + 72) = v25;
  }
  return result;
}

uint64_t sub_100026FD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10002F9A4(a1, a2, a3, a4);
}

uint64_t sub_10002701C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10003060C(a1, a3, a4);
}

__n128 sub_100027068@<Q0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7 = *a2;
  unsigned __int8 v12 = *((unsigned char *)a2 + 4);
  PPM_0_2_1.EpsDeltaDPConfig.init<A>(from:with:)(a1, v7 | ((unint64_t)v12 << 32), a3, a4, (uint64_t)v10);
  if (!v5)
  {
    long long v9 = v11[0];
    *(_OWORD *)(a5 + 32) = v10[2];
    *(_OWORD *)(a5 + 48) = v9;
    *(_OWORD *)(a5 + 57) = *(_OWORD *)((char *)v11 + 9);
    __n128 result = (__n128)v10[1];
    *(_OWORD *)a5 = v10[0];
    *(__n128 *)(a5 + 16) = result;
  }
  return result;
}

uint64_t sub_1000270C8(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[3];
  _OWORD v7[2] = a1[2];
  v8[0] = v2;
  *(_OWORD *)((char *)v8 + 9) = *(_OWORD *)((char *)a1 + 57);
  long long v3 = a1[1];
  v7[0] = *a1;
  v7[1] = v3;
  long long v4 = a2[3];
  _OWORD v9[2] = a2[2];
  v10[0] = v4;
  *(_OWORD *)((char *)v10 + 9) = *(_OWORD *)((char *)a2 + 57);
  long long v5 = a2[1];
  v9[0] = *a2;
  v9[1] = v5;
  return _s19DPSubmissionService9PPM_0_2_1V16EpsDeltaDPConfigV23__derived_struct_equalsySbAE_AEtFZ_0((unsigned __int8 *)v7, (unsigned __int8 *)v9) & 1;
}

uint64_t PPM_0_2_1.PrioPiRapporConfig.dimension.getter()
{
  return *v0;
}

void PPM_0_2_1.PrioPiRapporConfig.alpha0.getter(uint64_t a1@<X8>)
{
  int v2 = *(_DWORD *)(v1 + 12);
  __int16 v3 = *(_WORD *)(v1 + 16);
  char v4 = *(unsigned char *)(v1 + 18);
  int v5 = *(_DWORD *)(v1 + 20);
  char v6 = *(unsigned char *)(v1 + 24);
  uint64_t v7 = *(void *)(v1 + 32);
  char v8 = *(unsigned char *)(v1 + 40);
  *(unsigned char *)a1 = *(unsigned char *)(v1 + 8);
  *(_DWORD *)(a1 + 4) = v2;
  *(_WORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 10) = v4;
  *(_DWORD *)(a1 + 12) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(unsigned char *)(a1 + 32) = v8;
}

uint64_t PPM_0_2_1.RenyiDPConfig.encodedLength(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10002FA70(a1, a2, a3, a4);
}

uint64_t PPM_0_2_1.RenyiDPConfig.encode<A>(into:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100030568(a1, a3, a4);
}

uint64_t PPM_0_2_1.RenyiDPConfig.init(renyiOrder:sigma:)@<X0>(uint64_t result@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  char v3 = *a2;
  int v4 = *((_DWORD *)a2 + 1);
  __int16 v5 = *((_WORD *)a2 + 4);
  char v6 = a2[10];
  int v7 = *((_DWORD *)a2 + 3);
  char v8 = a2[16];
  uint64_t v9 = *((void *)a2 + 3);
  char v10 = a2[32];
  *(_DWORD *)a3 = result;
  *(unsigned char *)(a3 + 8) = v3;
  *(_DWORD *)(a3 + 12) = v4;
  *(_WORD *)(a3 + 16) = v5;
  *(unsigned char *)(a3 + 18) = v6 & 1;
  *(_DWORD *)(a3 + 20) = v7;
  *(unsigned char *)(a3 + 24) = v8 & 1;
  *(void *)(a3 + 32) = v9;
  *(unsigned char *)(a3 + 40) = v10 & 1;
  return result;
}

unint64_t PPM_0_2_1.RenyiDPConfig.init<A>(from:with:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v11 = sub_100022BFC();
  unint64_t result = CommonUIntTLSNumberType.init<A>(from:with:)((uint64_t)&type metadata for UInt32, a3, v11, a4, (uint64_t)&v31);
  if (!v5)
  {
    int v13 = v31;
    __int16 v14 = a2;
    if ((a2 & 0x10000) != 0) {
      __int16 v14 = 0;
    }
    unint64_t result = PPM_0_2_1.RealNumber.init<A>(from:with:)(a1, v14 | (unsigned __int16)(((a2 & 0x10100) != 0) << 8), a3, a4, (uint64_t)v23);
    char v15 = v23[0];
    int v16 = v24;
    __int16 v17 = v25;
    char v18 = v26;
    int v19 = v27;
    char v20 = v28;
    uint64_t v21 = v29;
    char v22 = v30;
    *(_DWORD *)a5 = v13;
    *(unsigned char *)(a5 + 8) = v15;
    *(_DWORD *)(a5 + 12) = v16;
    *(_WORD *)(a5 + 16) = v17;
    *(unsigned char *)(a5 + 18) = v18;
    *(_DWORD *)(a5 + 20) = v19;
    *(unsigned char *)(a5 + 24) = v20;
    *(void *)(a5 + 32) = v21;
    *(unsigned char *)(a5 + 40) = v22;
  }
  return result;
}

uint64_t sub_100027308(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10002FA70(a1, a2, a3, a4);
}

uint64_t sub_100027344(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100030568(a1, a3, a4);
}

double sub_100027388@<D0>(uint64_t a1@<X0>, unsigned __int16 *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  PPM_0_2_1.RenyiDPConfig.init<A>(from:with:)(a1, *a2 | (*((unsigned __int8 *)a2 + 2) << 16), a3, a4, (uint64_t)&v9);
  if (!v5)
  {
    long long v8 = v10[0];
    *a5 = v9;
    a5[1] = v8;
    double result = *(double *)((char *)v10 + 9);
    *(_OWORD *)((char *)a5 + 25) = *(_OWORD *)((char *)v10 + 9);
  }
  return result;
}

uint64_t sub_1000273D8(long long *a1, long long *a2)
{
  long long v2 = a1[1];
  long long v5 = *a1;
  v6[0] = v2;
  *(_OWORD *)((char *)v6 + 9) = *(long long *)((char *)a1 + 25);
  long long v3 = a2[1];
  long long v7 = *a2;
  v8[0] = v3;
  *(_OWORD *)((char *)v8 + 9) = *(long long *)((char *)a2 + 25);
  return _s19DPSubmissionService9PPM_0_2_1V13RenyiDPConfigV23__derived_struct_equalsySbAE_AEtFZ_0((uint64_t)&v5, (uint64_t)&v7) & 1;
}

void PPM_0_2_1.AggregatorDiscreteGaussianDpConfig.sigma.getter(uint64_t a1@<X8>)
{
  int v2 = *(_DWORD *)(v1 + 84);
  __int16 v3 = *(_WORD *)(v1 + 88);
  char v4 = *(unsigned char *)(v1 + 90);
  int v5 = *(_DWORD *)(v1 + 92);
  char v6 = *(unsigned char *)(v1 + 96);
  uint64_t v7 = *(void *)(v1 + 104);
  char v8 = *(unsigned char *)(v1 + 112);
  *(unsigned char *)a1 = *(unsigned char *)(v1 + 80);
  *(_DWORD *)(a1 + 4) = v2;
  *(_WORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 10) = v4;
  *(_DWORD *)(a1 + 12) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(unsigned char *)(a1 + 32) = v8;
}

void PPM_0_2_1.AggregatorDiscreteGaussianDpConfig.squaredL2Sensitivity.getter(uint64_t a1@<X8>)
{
  int v2 = *(_DWORD *)(v1 + 124);
  __int16 v3 = *(_WORD *)(v1 + 128);
  char v4 = *(unsigned char *)(v1 + 130);
  int v5 = *(_DWORD *)(v1 + 132);
  char v6 = *(unsigned char *)(v1 + 136);
  uint64_t v7 = *(void *)(v1 + 144);
  char v8 = *(unsigned char *)(v1 + 152);
  *(unsigned char *)a1 = *(unsigned char *)(v1 + 120);
  *(_DWORD *)(a1 + 4) = v2;
  *(_WORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 10) = v4;
  *(_DWORD *)(a1 + 12) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(unsigned char *)(a1 + 32) = v8;
}

uint64_t PPM_0_2_1.AggregatorDiscreteGaussianDpConfig.CodingParameter.targetCentralDeltaParameter.getter(int a1)
{
  return BYTE2(a1) | ((HIBYTE(a1) & 1) << 8);
}

unint64_t PPM_0_2_1.AggregatorDiscreteGaussianDpConfig.CodingParameter.sigmaParameter.getter(unint64_t a1)
{
  return BYTE4(a1) | (((a1 >> 40) & 1) << 8);
}

uint64_t PPM_0_2_1.AggregatorDiscreteGaussianDpConfig.CodingParameter.squaredL2SensitivityParameter.getter(uint64_t a1)
{
  return BYTE6(a1) | ((HIBYTE(a1) & 1) << 8);
}

uint64_t PPM_0_2_1.AggregatorDiscreteGaussianDpConfig.encodedLength(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10002F828(a1, a2, a3, a4);
}

uint64_t PPM_0_2_1.AggregatorDiscreteGaussianDpConfig.encode<A>(into:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_100030694(a1, a4, a5);
}

unint64_t PPM_0_2_1.AggregatorDiscreteGaussianDpConfig.init<A>(from:with:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unsigned __int16 a3@<W2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X8>)
{
  if (a3) {
    unsigned __int8 v13 = 0;
  }
  else {
    unsigned __int8 v13 = a2;
  }
  unint64_t result = PPM_0_2_1.RealNumber.init<A>(from:with:)(a1, v13 | (unsigned __int16)(((a3 | (unsigned __int16)(a2 >> 8)) & 1) << 8), a4, a5, (uint64_t)v45);
  if (!v6)
  {
    int v15 = v46;
    __int16 v39 = v47;
    char v40 = v45[0];
    char v16 = v48;
    int v38 = v49;
    char v17 = v50;
    uint64_t v37 = v51;
    char v41 = v52;
    unsigned __int8 v18 = BYTE2(a2);
    if (a3) {
      unsigned __int8 v18 = 0;
    }
    PPM_0_2_1.RealNumber.init<A>(from:with:)(a1, v18 | (((a3 | BYTE3(a2)) & 1) << 8), a4, a5, (uint64_t)v53);
    int v34 = v54;
    char v35 = v53[0];
    __int16 v33 = v55;
    int v36 = v57;
    char v30 = v58;
    char v31 = v56;
    unint64_t v19 = HIDWORD(a2);
    uint64_t v32 = v59;
    char v29 = v60;
    if (a3) {
      LOBYTE(v19) = 0;
    }
    PPM_0_2_1.RealNumber.init<A>(from:with:)(a1, v19 | (((a3 | BYTE5(a2)) & 1) << 8), a4, a5, (uint64_t)v61);
    int v26 = v62;
    char v27 = v61[0];
    __int16 v25 = v63;
    int v28 = v65;
    char v22 = v66;
    char v23 = v64;
    unint64_t v20 = HIWORD(a2);
    uint64_t v24 = v67;
    char v21 = v68;
    if (a3) {
      LOBYTE(v20) = 0;
    }
    unint64_t result = PPM_0_2_1.RealNumber.init<A>(from:with:)(a1, v20 | (unsigned __int16)(((a3 | HIBYTE(a2)) & 1) << 8), a4, a5, (uint64_t)v69);
    char v44 = v72;
    char v43 = v74;
    char v42 = v76;
    *(unsigned char *)a6 = v40;
    *(_DWORD *)(a6 + 4) = v15;
    *(_WORD *)(a6 + 8) = v39;
    *(unsigned char *)(a6 + 10) = v16;
    *(_DWORD *)(a6 + 12) = v38;
    *(unsigned char *)(a6 + 16) = v17;
    *(void *)(a6 + 24) = v37;
    *(unsigned char *)(a6 + 40) = v35;
    *(_DWORD *)(a6 + 44) = v34;
    *(_WORD *)(a6 + 48) = v33;
    *(unsigned char *)(a6 + 50) = v31;
    *(_DWORD *)(a6 + 52) = v36;
    *(unsigned char *)(a6 + 56) = v30;
    *(void *)(a6 + 64) = v32;
    *(unsigned char *)(a6 + 72) = v29;
    *(unsigned char *)(a6 + 80) = v27;
    *(_DWORD *)(a6 + 84) = v26;
    *(_WORD *)(a6 + 88) = v25;
    *(unsigned char *)(a6 + 90) = v23;
    *(_DWORD *)(a6 + 92) = v28;
    *(unsigned char *)(a6 + 96) = v22;
    *(void *)(a6 + 104) = v24;
    *(unsigned char *)(a6 + 112) = v21;
    *(unsigned char *)(a6 + 120) = v69[0];
    *(_DWORD *)(a6 + 124) = v70;
    *(_WORD *)(a6 + 128) = v71;
    *(unsigned char *)(a6 + 130) = v44;
    *(_DWORD *)(a6 + 132) = v73;
    *(unsigned char *)(a6 + 136) = v43;
    *(void *)(a6 + 144) = v75;
    *(unsigned char *)(a6 + 152) = v42;
    *(unsigned char *)(a6 + 32) = v41;
  }
  return result;
}

uint64_t sub_100027850(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10002F828(a1, a2, a3, a4);
}

uint64_t sub_1000278AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100030694(a1, a3, a4);
}

double sub_100027910@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  PPM_0_2_1.AggregatorDiscreteGaussianDpConfig.init<A>(from:with:)(a1, *(void *)a2, *(unsigned __int8 *)(a2 + 8), a3, a4, (uint64_t)v12);
  if (!v5)
  {
    long long v8 = v12[7];
    a5[6] = v12[6];
    a5[7] = v8;
    a5[8] = v13[0];
    *(_OWORD *)((char *)a5 + 137) = *(_OWORD *)((char *)v13 + 9);
    long long v9 = v12[3];
    a5[2] = v12[2];
    a5[3] = v9;
    long long v10 = v12[5];
    a5[4] = v12[4];
    a5[5] = v10;
    double result = *(double *)v12;
    long long v11 = v12[1];
    *a5 = v12[0];
    a5[1] = v11;
  }
  return result;
}

uint64_t sub_100027988(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[7];
  v11[6] = a1[6];
  v11[7] = v2;
  v12[0] = a1[8];
  *(_OWORD *)((char *)v12 + 9) = *(_OWORD *)((char *)a1 + 137);
  long long v3 = a1[3];
  _OWORD v11[2] = a1[2];
  uint64_t v11[3] = v3;
  long long v4 = a1[5];
  v11[4] = a1[4];
  v11[5] = v4;
  long long v5 = a1[1];
  v11[0] = *a1;
  v11[1] = v5;
  long long v6 = a2[7];
  v13[6] = a2[6];
  v13[7] = v6;
  v14[0] = a2[8];
  *(_OWORD *)((char *)v14 + 9) = *(_OWORD *)((char *)a2 + 137);
  long long v7 = a2[3];
  _OWORD v13[2] = a2[2];
  v13[3] = v7;
  long long v8 = a2[5];
  v13[4] = a2[4];
  void v13[5] = v8;
  long long v9 = a2[1];
  v13[0] = *a2;
  v13[1] = v9;
  return _s19DPSubmissionService9PPM_0_2_1V34AggregatorDiscreteGaussianDpConfigV23__derived_struct_equalsySbAE_AEtFZ_0((unsigned __int8 *)v11, (unsigned __int8 *)v13) & 1;
}

__n128 PPM_0_2_1.AggregatorDiscreteGaussianClientSymmetricRapporDpConfig.aggDGaussDPConfig.getter@<Q0>(_OWORD *a1@<X8>)
{
  long long v2 = *(_OWORD *)(v1 + 112);
  a1[6] = *(_OWORD *)(v1 + 96);
  a1[7] = v2;
  a1[8] = *(_OWORD *)(v1 + 128);
  *(_OWORD *)((char *)a1 + 137) = *(_OWORD *)(v1 + 137);
  long long v3 = *(_OWORD *)(v1 + 48);
  a1[2] = *(_OWORD *)(v1 + 32);
  a1[3] = v3;
  long long v4 = *(_OWORD *)(v1 + 80);
  a1[4] = *(_OWORD *)(v1 + 64);
  a1[5] = v4;
  __n128 result = *(__n128 *)v1;
  long long v6 = *(_OWORD *)(v1 + 16);
  *a1 = *(_OWORD *)v1;
  a1[1] = v6;
  return result;
}

void PPM_0_2_1.AggregatorDiscreteGaussianClientSymmetricRapporDpConfig.localEpsilon.getter(uint64_t a1@<X8>)
{
  int v2 = *(_DWORD *)(v1 + 164);
  __int16 v3 = *(_WORD *)(v1 + 168);
  char v4 = *(unsigned char *)(v1 + 170);
  int v5 = *(_DWORD *)(v1 + 172);
  char v6 = *(unsigned char *)(v1 + 176);
  uint64_t v7 = *(void *)(v1 + 184);
  char v8 = *(unsigned char *)(v1 + 192);
  *(unsigned char *)a1 = *(unsigned char *)(v1 + 160);
  *(_DWORD *)(a1 + 4) = v2;
  *(_WORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 10) = v4;
  *(_DWORD *)(a1 + 12) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(unsigned char *)(a1 + 32) = v8;
}

uint64_t PPM_0_2_1.AggregatorDiscreteGaussianClientSymmetricRapporDpConfig.CodingParameter.localEpsilonParameter.getter(uint64_t a1, unsigned int a2)
{
  HIDWORD(v3) = HIWORD(a2) & 1;
  LODWORD(v3) = a2 << 16;
  return (v3 >> 24);
}

uint64_t PPM_0_2_1.AggregatorDiscreteGaussianClientSymmetricRapporDpConfig.encodedLength(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10002FAD8(a1, a2, a3, a4);
}

uint64_t PPM_0_2_1.AggregatorDiscreteGaussianClientSymmetricRapporDpConfig.encode<A>(into:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_100030770(a1, a4, a5);
}

double PPM_0_2_1.AggregatorDiscreteGaussianClientSymmetricRapporDpConfig.init<A>(from:with:)@<D0>(uint64_t a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X8>)
{
  if ((a3 & 0x1000000) != 0) {
    a2 = 0;
  }
  PPM_0_2_1.AggregatorDiscreteGaussianDpConfig.init<A>(from:with:)(a1, a2, (a3 & 0x1000001) != 0, a4, a5, (uint64_t)v26);
  if (!v6)
  {
    __int16 v13 = BYTE1(a3);
    if ((a3 & 0x1000000) != 0) {
      __int16 v13 = 0;
    }
    PPM_0_2_1.RealNumber.init<A>(from:with:)(a1, v13 | (((a3 & 0x1010000) != 0) << 8), a4, a5, (uint64_t)v28);
    char v14 = v28[0];
    int v15 = v29;
    __int16 v16 = v30;
    char v17 = v31;
    int v18 = v32;
    char v19 = v33;
    uint64_t v20 = v34;
    char v21 = v35;
    long long v22 = v26[7];
    *(_OWORD *)(a6 + 96) = v26[6];
    *(_OWORD *)(a6 + 112) = v22;
    *(_OWORD *)(a6 + 128) = v27[0];
    *(_OWORD *)(a6 + 137) = *(_OWORD *)((char *)v27 + 9);
    long long v23 = v26[3];
    *(_OWORD *)(a6 + 32) = v26[2];
    *(_OWORD *)(a6 + 48) = v23;
    long long v24 = v26[5];
    *(_OWORD *)(a6 + 64) = v26[4];
    *(_OWORD *)(a6 + 80) = v24;
    double result = *(double *)v26;
    long long v25 = v26[1];
    *(_OWORD *)a6 = v26[0];
    *(_OWORD *)(a6 + 16) = v25;
    *(unsigned char *)(a6 + 160) = v14;
    *(_DWORD *)(a6 + 164) = v15;
    *(_WORD *)(a6 + 168) = v16;
    *(unsigned char *)(a6 + 170) = v17;
    *(_DWORD *)(a6 + 172) = v18;
    *(unsigned char *)(a6 + 176) = v19;
    *(void *)(a6 + 184) = v20;
    *(unsigned char *)(a6 + 192) = v21;
  }
  return result;
}

uint64_t sub_100027C50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10002FAD8(a1, a2, a3, a4);
}

uint64_t sub_100027CB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100030770(a1, a3, a4);
}

__n128 sub_100027D20@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  result.n128_f64[0] = PPM_0_2_1.AggregatorDiscreteGaussianClientSymmetricRapporDpConfig.init<A>(from:with:)(a1, *(void *)a2, *(unsigned __int16 *)(a2 + 8) | (*(unsigned __int8 *)(a2 + 10) << 16) | (*(unsigned __int8 *)(a2 + 11) << 24), a3, a4, (uint64_t)v13);
  if (!v5)
  {
    long long v8 = v13[11];
    *(_OWORD *)(a5 + 160) = v13[10];
    *(_OWORD *)(a5 + 176) = v8;
    *(unsigned char *)(a5 + 192) = v14;
    long long v9 = v13[7];
    *(_OWORD *)(a5 + 96) = v13[6];
    *(_OWORD *)(a5 + 112) = v9;
    long long v10 = v13[9];
    *(_OWORD *)(a5 + 128) = v13[8];
    *(_OWORD *)(a5 + 144) = v10;
    long long v11 = v13[3];
    *(_OWORD *)(a5 + 32) = v13[2];
    *(_OWORD *)(a5 + 48) = v11;
    long long v12 = v13[5];
    *(_OWORD *)(a5 + 64) = v13[4];
    *(_OWORD *)(a5 + 80) = v12;
    __n128 result = (__n128)v13[1];
    *(_OWORD *)a5 = v13[0];
    *(__n128 *)(a5 + 16) = result;
  }
  return result;
}

uint64_t sub_100027DC4(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 176);
  v15[10] = *(_OWORD *)(a1 + 160);
  v15[11] = v2;
  char v16 = *(unsigned char *)(a1 + 192);
  long long v3 = *(_OWORD *)(a1 + 112);
  v15[6] = *(_OWORD *)(a1 + 96);
  v15[7] = v3;
  long long v4 = *(_OWORD *)(a1 + 144);
  v15[8] = *(_OWORD *)(a1 + 128);
  v15[9] = v4;
  long long v5 = *(_OWORD *)(a1 + 48);
  v15[2] = *(_OWORD *)(a1 + 32);
  v15[3] = v5;
  long long v6 = *(_OWORD *)(a1 + 80);
  v15[4] = *(_OWORD *)(a1 + 64);
  v15[5] = v6;
  long long v7 = *(_OWORD *)(a1 + 16);
  v15[0] = *(_OWORD *)a1;
  v15[1] = v7;
  long long v8 = *(_OWORD *)(a2 + 176);
  v17[10] = *(_OWORD *)(a2 + 160);
  v17[11] = v8;
  char v18 = *(unsigned char *)(a2 + 192);
  long long v9 = *(_OWORD *)(a2 + 112);
  v17[6] = *(_OWORD *)(a2 + 96);
  v17[7] = v9;
  long long v10 = *(_OWORD *)(a2 + 144);
  v17[8] = *(_OWORD *)(a2 + 128);
  v17[9] = v10;
  long long v11 = *(_OWORD *)(a2 + 48);
  uint64_t v17[2] = *(_OWORD *)(a2 + 32);
  v17[3] = v11;
  long long v12 = *(_OWORD *)(a2 + 80);
  v17[4] = *(_OWORD *)(a2 + 64);
  v17[5] = v12;
  long long v13 = *(_OWORD *)(a2 + 16);
  v17[0] = *(_OWORD *)a2;
  v17[1] = v13;
  return _s19DPSubmissionService9PPM_0_2_1V55AggregatorDiscreteGaussianClientSymmetricRapporDpConfigV23__derived_struct_equalsySbAE_AEtFZ_0((uint64_t)v15, (uint64_t)v17) & 1;
}

uint64_t PPM_0_2_1.DistributedGaussianWithSubsampledMomentsAccountantConfig.numIterations.getter()
{
  return *(unsigned int *)(v0 + 8);
}

uint64_t PPM_0_2_1.DistributedGaussianWithSubsampledMomentsAccountantConfig.populationSize.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t PPM_0_2_1.DistributedGaussianWithSubsampledMomentsAccountantConfig.renyiOrder.getter()
{
  return *(unsigned int *)(v0 + 24);
}

void PPM_0_2_1.DistributedGaussianWithSubsampledMomentsAccountantConfig.sigma.getter(uint64_t a1@<X8>)
{
  int v2 = *(_DWORD *)(v1 + 36);
  __int16 v3 = *(_WORD *)(v1 + 40);
  char v4 = *(unsigned char *)(v1 + 42);
  int v5 = *(_DWORD *)(v1 + 44);
  char v6 = *(unsigned char *)(v1 + 48);
  uint64_t v7 = *(void *)(v1 + 56);
  char v8 = *(unsigned char *)(v1 + 64);
  *(unsigned char *)a1 = *(unsigned char *)(v1 + 32);
  *(_DWORD *)(a1 + 4) = v2;
  *(_WORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 10) = v4;
  *(_DWORD *)(a1 + 12) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(unsigned char *)(a1 + 32) = v8;
}

void PPM_0_2_1.DistributedGaussianWithSubsampledMomentsAccountantConfig.sigmaAfterNormalization.getter(uint64_t a1@<X8>)
{
  int v2 = *(_DWORD *)(v1 + 76);
  __int16 v3 = *(_WORD *)(v1 + 80);
  char v4 = *(unsigned char *)(v1 + 82);
  int v5 = *(_DWORD *)(v1 + 84);
  char v6 = *(unsigned char *)(v1 + 88);
  uint64_t v7 = *(void *)(v1 + 96);
  char v8 = *(unsigned char *)(v1 + 104);
  *(unsigned char *)a1 = *(unsigned char *)(v1 + 72);
  *(_DWORD *)(a1 + 4) = v2;
  *(_WORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 10) = v4;
  *(_DWORD *)(a1 + 12) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(unsigned char *)(a1 + 32) = v8;
}

void PPM_0_2_1.DistributedGaussianWithSubsampledMomentsAccountantConfig.targetCentralEpsilon.getter(uint64_t a1@<X8>)
{
  int v2 = *(_DWORD *)(v1 + 116);
  __int16 v3 = *(_WORD *)(v1 + 120);
  char v4 = *(unsigned char *)(v1 + 122);
  int v5 = *(_DWORD *)(v1 + 124);
  char v6 = *(unsigned char *)(v1 + 128);
  uint64_t v7 = *(void *)(v1 + 136);
  char v8 = *(unsigned char *)(v1 + 144);
  *(unsigned char *)a1 = *(unsigned char *)(v1 + 112);
  *(_DWORD *)(a1 + 4) = v2;
  *(_WORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 10) = v4;
  *(_DWORD *)(a1 + 12) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(unsigned char *)(a1 + 32) = v8;
}

void PPM_0_2_1.DistributedGaussianWithSubsampledMomentsAccountantConfig.targetCentralDelta.getter(uint64_t a1@<X8>)
{
  int v2 = *(_DWORD *)(v1 + 156);
  __int16 v3 = *(_WORD *)(v1 + 160);
  char v4 = *(unsigned char *)(v1 + 162);
  int v5 = *(_DWORD *)(v1 + 164);
  char v6 = *(unsigned char *)(v1 + 168);
  uint64_t v7 = *(void *)(v1 + 176);
  char v8 = *(unsigned char *)(v1 + 184);
  *(unsigned char *)a1 = *(unsigned char *)(v1 + 152);
  *(_DWORD *)(a1 + 4) = v2;
  *(_WORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 10) = v4;
  *(_DWORD *)(a1 + 12) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(unsigned char *)(a1 + 32) = v8;
}

unint64_t _s19DPSubmissionService9PPM_0_2_1V56DistributedGaussianWithSubsampledMomentsAccountantConfigV15CodingParameterV05sigmaL00m18AfterNormalizationL0020targetCentralEpsilonL00pq5DeltaL0AgC10RealNumberVAFVSg_A3OtcfC_0(__int16 a1, __int16 a2, __int16 a3, __int16 a4)
{
  return ((unint64_t)a4 << 48) | ((unint64_t)(HIBYTE(a4) & 1) << 56) | ((unint64_t)(HIBYTE(a3) & 1) << 40) | ((unint64_t)a3 << 32) | ((unint64_t)(HIBYTE(a2) & 1) << 24) | ((unint64_t)a2 << 16) | ((unint64_t)(HIBYTE(a1) & 1) << 8) | a1;
}

uint64_t PPM_0_2_1.DistributedGaussianWithSubsampledMomentsAccountantConfig.encodedLength(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10002FBA4(a1, a2, a3, a4);
}

uint64_t PPM_0_2_1.DistributedGaussianWithSubsampledMomentsAccountantConfig.encode<A>(into:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_100030814(a1, a4, a5);
}

unint64_t PPM_0_2_1.DistributedGaussianWithSubsampledMomentsAccountantConfig.init<A>(from:with:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unsigned __int16 a3@<W2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X8>)
{
  unint64_t v13 = sub_100022BA8();
  unint64_t v50 = a5;
  unint64_t result = CommonUIntTLSNumberType.init<A>(from:with:)((uint64_t)&type metadata for UInt64, a4, v13, a5, (uint64_t)&v86);
  if (!v6)
  {
    unsigned __int16 v49 = a3;
    uint64_t v15 = v86;
    unint64_t v16 = sub_100022BFC();
    CommonUIntTLSNumberType.init<A>(from:with:)((uint64_t)&type metadata for UInt32, a4, v16, a5, (uint64_t)&v86);
    uint64_t v48 = v15;
    int v17 = v86;
    CommonUIntTLSNumberType.init<A>(from:with:)((uint64_t)&type metadata for UInt64, a4, v13, a5, (uint64_t)&v86);
    uint64_t v18 = v86;
    CommonUIntTLSNumberType.init<A>(from:with:)((uint64_t)&type metadata for UInt32, a4, v16, a5, (uint64_t)&v86);
    int v19 = v86;
    if (v49) {
      unsigned __int8 v20 = 0;
    }
    else {
      unsigned __int8 v20 = a2;
    }
    PPM_0_2_1.RealNumber.init<A>(from:with:)(a1, v20 | (((v49 | (unsigned __int16)(a2 >> 8)) & 1) << 8), a4, v50, (uint64_t)v54);
    int v44 = v55;
    char v45 = v54[0];
    char v47 = v57;
    int v42 = v58;
    __int16 v43 = v56;
    uint64_t v46 = v60;
    char v40 = v61;
    char v41 = v59;
    unsigned __int8 v21 = BYTE2(a2);
    if (v49) {
      unsigned __int8 v21 = 0;
    }
    PPM_0_2_1.RealNumber.init<A>(from:with:)(a1, v21 | (((v49 | BYTE3(a2)) & 1) << 8), a4, v50, (uint64_t)v62);
    int v37 = v63;
    char v38 = v62[0];
    __int16 v36 = v64;
    int v39 = v66;
    char v33 = v67;
    char v34 = v65;
    unint64_t v22 = HIDWORD(a2);
    uint64_t v35 = v68;
    char v32 = v69;
    if (v49) {
      LOBYTE(v22) = 0;
    }
    PPM_0_2_1.RealNumber.init<A>(from:with:)(a1, v22 | (((v49 | BYTE5(a2)) & 1) << 8), a4, v50, (uint64_t)v70);
    int v29 = v71;
    char v30 = v70[0];
    __int16 v28 = v72;
    int v31 = v74;
    char v25 = v75;
    char v26 = v73;
    unint64_t v23 = HIWORD(a2);
    uint64_t v27 = v76;
    char v24 = v77;
    if (v49) {
      LOBYTE(v23) = 0;
    }
    unint64_t result = PPM_0_2_1.RealNumber.init<A>(from:with:)(a1, v23 | (unsigned __int16)(((v49 | HIBYTE(a2)) & 1) << 8), a4, v50, (uint64_t)v78);
    char v53 = v81;
    char v52 = v83;
    char v51 = v85;
    *(void *)a6 = v48;
    *(_DWORD *)(a6 + 8) = v17;
    *(void *)(a6 + 16) = v18;
    *(_DWORD *)(a6 + 24) = v19;
    *(unsigned char *)(a6 + 32) = v45;
    *(_DWORD *)(a6 + 36) = v44;
    *(_WORD *)(a6 + 40) = v43;
    *(_DWORD *)(a6 + 44) = v42;
    *(unsigned char *)(a6 + 48) = v41;
    *(void *)(a6 + 56) = v46;
    *(unsigned char *)(a6 + 64) = v40;
    *(unsigned char *)(a6 + 72) = v38;
    *(_DWORD *)(a6 + 76) = v37;
    *(_WORD *)(a6 + 80) = v36;
    *(unsigned char *)(a6 + 82) = v34;
    *(_DWORD *)(a6 + 84) = v39;
    *(unsigned char *)(a6 + 88) = v33;
    *(void *)(a6 + 96) = v35;
    *(unsigned char *)(a6 + 104) = v32;
    *(unsigned char *)(a6 + 112) = v30;
    *(_DWORD *)(a6 + 116) = v29;
    *(_WORD *)(a6 + 120) = v28;
    *(unsigned char *)(a6 + 122) = v26;
    *(_DWORD *)(a6 + 124) = v31;
    *(unsigned char *)(a6 + 128) = v25;
    *(void *)(a6 + 136) = v27;
    *(unsigned char *)(a6 + 144) = v24;
    *(unsigned char *)(a6 + 152) = v78[0];
    *(_DWORD *)(a6 + 156) = v79;
    *(_WORD *)(a6 + 160) = v80;
    *(unsigned char *)(a6 + 162) = v53;
    *(_DWORD *)(a6 + 164) = v82;
    *(unsigned char *)(a6 + 168) = v52;
    *(void *)(a6 + 176) = v84;
    *(unsigned char *)(a6 + 184) = v51;
    *(unsigned char *)(a6 + 42) = v47;
  }
  return result;
}

uint64_t sub_100028494(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10002FBA4(a1, a2, a3, a4);
}

uint64_t sub_1000284F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100030814(a1, a3, a4);
}

double sub_100028564@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  PPM_0_2_1.DistributedGaussianWithSubsampledMomentsAccountantConfig.init<A>(from:with:)(a1, *(void *)a2, *(unsigned __int8 *)(a2 + 8), a3, a4, (uint64_t)v13);
  if (!v5)
  {
    long long v8 = v21;
    a5[8] = v20;
    a5[9] = v8;
    a5[10] = v22[0];
    *(_OWORD *)((char *)a5 + 169) = *(_OWORD *)((char *)v22 + 9);
    long long v9 = v17;
    a5[4] = v16;
    a5[5] = v9;
    long long v10 = v19;
    a5[6] = v18;
    a5[7] = v10;
    long long v11 = v13[1];
    *a5 = v13[0];
    a5[1] = v11;
    double result = *(double *)&v14;
    long long v12 = v15;
    a5[2] = v14;
    a5[3] = v12;
  }
  return result;
}

uint64_t sub_1000285E4(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[9];
  _OWORD v13[8] = a1[8];
  v13[9] = v2;
  v14[0] = a1[10];
  *(_OWORD *)((char *)v14 + 9) = *(_OWORD *)((char *)a1 + 169);
  long long v3 = a1[5];
  v13[4] = a1[4];
  void v13[5] = v3;
  long long v4 = a1[7];
  v13[6] = a1[6];
  v13[7] = v4;
  long long v5 = a1[1];
  v13[0] = *a1;
  v13[1] = v5;
  long long v6 = a1[3];
  _OWORD v13[2] = a1[2];
  v13[3] = v6;
  long long v7 = a2[9];
  v15[8] = a2[8];
  v15[9] = v7;
  v16[0] = a2[10];
  *(_OWORD *)((char *)v16 + 9) = *(_OWORD *)((char *)a2 + 169);
  long long v8 = a2[5];
  v15[4] = a2[4];
  v15[5] = v8;
  long long v9 = a2[7];
  v15[6] = a2[6];
  v15[7] = v9;
  long long v10 = a2[1];
  v15[0] = *a2;
  v15[1] = v10;
  long long v11 = a2[3];
  v15[2] = a2[2];
  v15[3] = v11;
  return _s19DPSubmissionService9PPM_0_2_1V56DistributedGaussianWithSubsampledMomentsAccountantConfigV23__derived_struct_equalsySbAE_AEtFZ_0((uint64_t)v13, (uint64_t)v15) & 1;
}

uint64_t PPM_0_2_1.DPConfig.DPMechanismSelector.noneProp.getter()
{
  return *v0;
}

__n128 PPM_0_2_1.DPConfig.DPMechanismSelector.epsProp.getter@<Q0>(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 40);
  __n128 result = *(__n128 *)(v1 + 8);
  long long v4 = *(_OWORD *)(v1 + 24);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 32) = v2;
  return result;
}

__n128 PPM_0_2_1.DPConfig.DPMechanismSelector.eps_deltaProp.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 112);
  char v3 = *(unsigned char *)(v1 + 120);
  long long v4 = *(_OWORD *)(v1 + 64);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(a1 + 16) = v4;
  __n128 result = *(__n128 *)(v1 + 80);
  long long v6 = *(_OWORD *)(v1 + 96);
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v6;
  *(void *)(a1 + 64) = v2;
  *(unsigned char *)(a1 + 72) = v3;
  return result;
}

__n128 PPM_0_2_1.DPConfig.DPMechanismSelector.renyiProp.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 160);
  char v3 = *(unsigned char *)(v1 + 168);
  __n128 result = *(__n128 *)(v1 + 128);
  long long v5 = *(_OWORD *)(v1 + 144);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v5;
  *(void *)(a1 + 32) = v2;
  *(unsigned char *)(a1 + 40) = v3;
  return result;
}

uint64_t PPM_0_2_1.DPConfig.DPMechanismSelector.aggregator_discrete_gaussianProp.getter@<X0>(uint64_t a1@<X8>)
{
  sub_10001FBE4(v1 + 176, (uint64_t)v4, &qword_100080B40);
  return sub_10001FBE4((uint64_t)v4, a1, &qword_100080B40);
}

uint64_t PPM_0_2_1.DPConfig.DPMechanismSelector.aggregator_discrete_gaussian_client_symmetric_rapporProp.getter@<X0>(uint64_t a1@<X8>)
{
  sub_10001FBE4(v1 + 336, (uint64_t)v4, &qword_100080B48);
  return sub_10001FBE4((uint64_t)v4, a1, &qword_100080B48);
}

uint64_t PPM_0_2_1.DPConfig.DPMechanismSelector.distributed_gaussian_with_subsampled_moments_accountantProp.getter@<X0>(uint64_t a1@<X8>)
{
  sub_10001FBE4(v1 + 536, (uint64_t)v4, &qword_100080B50);
  return sub_10001FBE4((uint64_t)v4, a1, &qword_100080B50);
}

uint64_t PPM_0_2_1.DPConfig.DPMechanismSelector.CodingParameter.epsParameter.getter()
{
  return *(unsigned __int8 *)(v0 + 8) | (*(unsigned __int8 *)(v0 + 9) << 8);
}

unint64_t PPM_0_2_1.DPConfig.DPMechanismSelector.CodingParameter.eps_deltaParameter.getter()
{
  return *(unsigned int *)(v0 + 10) | ((unint64_t)*(unsigned __int8 *)(v0 + 14) << 32);
}

uint64_t PPM_0_2_1.DPConfig.DPMechanismSelector.CodingParameter.renyiParameter.getter()
{
  return *(unsigned __int16 *)(v0 + 15) | (*(unsigned __int8 *)(v0 + 17) << 16);
}

uint64_t PPM_0_2_1.DPConfig.DPMechanismSelector.CodingParameter.aggregator_discrete_gaussianParameter.getter()
{
  return *(void *)(v0 + 18);
}

uint64_t PPM_0_2_1.DPConfig.DPMechanismSelector.CodingParameter.aggregator_discrete_gaussian_client_symmetric_rapporParameter.getter()
{
  return *(void *)(v0 + 27);
}

uint64_t PPM_0_2_1.DPConfig.DPMechanismSelector.CodingParameter.distributed_gaussian_with_subsampled_moments_accountantParameter.getter()
{
  return *(void *)(v0 + 39);
}

uint64_t PPM_0_2_1.DPConfig.DPMechanismSelector.CodingParameter.init(dpMechanism:epsParameter:eps_deltaParameter:renyiParameter:aggregator_discrete_gaussianParameter:aggregator_discrete_gaussian_client_symmetric_rapporParameter:distributed_gaussian_with_subsampled_moments_accountantParameter:)@<X0>(uint64_t result@<X0>, __int16 a2@<W1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, uint64_t a10, char a11)
{
  *(unsigned char *)a9 = result;
  *(_DWORD *)(a9 + 4) = HIDWORD(result);
  *(unsigned char *)(a9 + 8) = a2;
  *(unsigned char *)(a9 + 9) = HIBYTE(a2) & 1;
  *(_DWORD *)(a9 + 10) = a3;
  *(unsigned char *)(a9 + 14) = BYTE4(a3) & 1;
  *(_WORD *)(a9 + 15) = a4;
  *(unsigned char *)(a9 + 17) = BYTE2(a4) & 1;
  *(void *)(a9 + 18) = a5;
  *(unsigned char *)(a9 + 26) = a6 & 1;
  *(void *)(a9 + 27) = a7;
  *(_WORD *)(a9 + 35) = a8;
  *(unsigned char *)(a9 + 37) = BYTE2(a8);
  *(unsigned char *)(a9 + 38) = HIBYTE(a8) & 1;
  *(void *)(a9 + 39) = a10;
  *(unsigned char *)(a9 + 47) = a11 & 1;
  return result;
}

uint64_t PPM_0_2_1.DPConfig.DPMechanismSelector.encodedLength(with:)(uint64_t a1)
{
  sub_10001FBE4(a1, (uint64_t)v29, &qword_100080B58);
  if (v29[0] == 8)
  {
    sub_10001FA84();
    swift_allocError();
    *(void *)uint64_t v3 = 0xD000000000000034;
    *(void *)(v3 + 8) = 0x8000000100062140;
    char v4 = 1;
LABEL_21:
    *(unsigned char *)(v3 + 16) = v4;
    return swift_willThrow();
  }
  else
  {
    switch(v29[0])
    {
      case 1:
        sub_10001FBE4(v1, (uint64_t)&v30, &qword_100080B80);
        sub_10001FBE4((uint64_t)&v30, (uint64_t)&v70, &qword_100080B80);
        if (v70 == 1)
        {
          sub_10001FA84();
          swift_allocError();
          unint64_t v5 = 0xD000000000000020;
          goto LABEL_19;
        }
        uint64_t result = 0;
        break;
      case 2:
        sub_10001FBE4(v1 + 8, (uint64_t)v31, &qword_100080B78);
        sub_10001FBE4((uint64_t)v31, (uint64_t)&v65, &qword_100080B78);
        if (v65 == 4)
        {
          sub_10001FA84();
          swift_allocError();
          unint64_t v5 = 0xD00000000000001FLL;
          goto LABEL_19;
        }
        uint64_t result = PPM_0_2_1.RealNumber.RealNumberTypeSelector.encodedLength(with:)(v65, v66 | ((v67 & 1) << 16), v68 & 1, v7, v69 & 1);
        if (!v2) {
          ++result;
        }
        break;
      case 3:
        sub_10001FBE4(v1 + 48, (uint64_t)v32, &qword_100080B70);
        uint64_t v8 = sub_10001FBE4((uint64_t)v32, (uint64_t)v63, &qword_100080B70);
        if (LOBYTE(v63[0]) == 4)
        {
          sub_10001FA84();
          swift_allocError();
          unint64_t v5 = 0xD000000000000025;
          goto LABEL_19;
        }
        long long v39 = v63[2];
        v40[0] = v64[0];
        *(_OWORD *)((char *)v40 + 9) = *(_OWORD *)((char *)v64 + 9);
        long long v37 = v63[0];
        long long v38 = v63[1];
        uint64_t result = sub_10002F9A4(v8, v9, v10, v11);
        break;
      case 4:
        sub_10001FBE4(v1 + 128, (uint64_t)v33, &qword_100080B68);
        uint64_t v12 = sub_10001FBE4((uint64_t)v33, (uint64_t)&v61, &qword_100080B68);
        if (BYTE8(v61) == 4)
        {
          sub_10001FA84();
          swift_allocError();
          unint64_t v5 = 0xD000000000000021;
          goto LABEL_19;
        }
        v40[2] = v61;
        v41[0] = v62[0];
        *(_OWORD *)((char *)v41 + 9) = *(_OWORD *)((char *)v62 + 9);
        uint64_t result = sub_10002FA70(v12, v13, v14, v15);
        break;
      case 5:
        sub_10001FBE4(v1 + 176, (uint64_t)v34, &qword_100080B40);
        sub_10001FBE4((uint64_t)v34, (uint64_t)v59, &qword_100080B40);
        uint64_t v16 = sub_10001FAEC((unsigned __int8 *)v59);
        if (v16 == 1)
        {
          sub_10001FA84();
          swift_allocError();
          unint64_t v5 = 0xD000000000000038;
          goto LABEL_19;
        }
        v41[8] = v59[6];
        v41[9] = v59[7];
        v42[0] = v60[0];
        *(_OWORD *)((char *)v42 + 9) = *(_OWORD *)((char *)v60 + 9);
        v41[4] = v59[2];
        v41[5] = v59[3];
        v41[6] = v59[4];
        v41[7] = v59[5];
        v41[2] = v59[0];
        v41[3] = v59[1];
        uint64_t result = sub_10002F828(v16, v17, v18, v19);
        break;
      case 6:
        sub_10001FBE4(v1 + 336, (uint64_t)v35, &qword_100080B48);
        sub_10001FBE4((uint64_t)v35, (uint64_t)v57, &qword_100080B48);
        uint64_t v20 = sub_10001FAEC((unsigned __int8 *)v57);
        if (v20 == 1)
        {
          sub_10001FA84();
          swift_allocError();
          unint64_t v5 = 0xD000000000000050;
          goto LABEL_19;
        }
        v42[12] = v57[10];
        v42[13] = v57[11];
        char v43 = v58;
        v42[8] = v57[6];
        v42[9] = v57[7];
        v42[10] = v57[8];
        v42[11] = v57[9];
        v42[4] = v57[2];
        v42[5] = v57[3];
        v42[6] = v57[4];
        v42[7] = v57[5];
        v42[2] = v57[0];
        v42[3] = v57[1];
        uint64_t result = sub_10002FAD8(v20, v21, v22, v23);
        break;
      case 7:
        sub_10001FBE4(v1 + 536, (uint64_t)v36, &qword_100080B50);
        sub_10001FBE4((uint64_t)v36, (uint64_t)v55, &qword_100080B50);
        uint64_t v24 = sub_10001FAD8((uint64_t)v55);
        if (v24 == 1)
        {
          sub_10001FA84();
          swift_allocError();
          unint64_t v5 = 0xD000000000000053;
LABEL_19:
          *(void *)uint64_t v3 = v5;
          *(void *)(v3 + 8) = (unint64_t)(v6 - 32) | 0x8000000000000000;
          goto LABEL_20;
        }
        long long v52 = v55[8];
        long long v53 = v55[9];
        v54[0] = *(_OWORD *)v56;
        *(_OWORD *)((char *)v54 + 9) = *(_OWORD *)&v56[9];
        long long v48 = v55[4];
        long long v49 = v55[5];
        long long v50 = v55[6];
        long long v51 = v55[7];
        long long v44 = v55[0];
        long long v45 = v55[1];
        long long v46 = v55[2];
        long long v47 = v55[3];
        uint64_t result = sub_10002FBA4(v24, v25, v26, v27);
        break;
      default:
        sub_100059370(31);
        v71._object = (void *)0x8000000100062180;
        v71._countAndFlagsBits = 0xD00000000000001BLL;
        sub_1000591F0(v71);
        sub_100059380();
        v72._countAndFlagsBits = 11872;
        v72._object = (void *)0xE200000000000000;
        sub_1000591F0(v72);
        sub_10001FA84();
        swift_allocError();
        *(void *)uint64_t v3 = 0;
        *(void *)(v3 + 8) = 0xE000000000000000;
LABEL_20:
        char v4 = 4;
        goto LABEL_21;
    }
  }
  return result;
}

uint64_t PPM_0_2_1.DPConfig.DPMechanismSelector.encode<A>(into:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_10001FBE4(a2, (uint64_t)v13, &qword_100080B58);
  if (v13[0] == 8)
  {
    sub_10001FA84();
    swift_allocError();
    *(void *)uint64_t v8 = 0xD000000000000034;
    *(void *)(v8 + 8) = 0x8000000100062140;
    char v9 = 1;
LABEL_21:
    *(unsigned char *)(v8 + 16) = v9;
    return swift_willThrow();
  }
  else
  {
    switch(v13[0])
    {
      case 1:
        sub_10001FBE4(v4, (uint64_t)&v14, &qword_100080B80);
        sub_10001FBE4((uint64_t)&v14, (uint64_t)v54, &qword_100080B80);
        if (v54[0])
        {
          sub_10001FA84();
          swift_allocError();
          unint64_t v10 = 0xD000000000000020;
          goto LABEL_19;
        }
        uint64_t result = sub_10003A974(a1, a3, a4);
        break;
      case 2:
        sub_10001FBE4(v4 + 8, (uint64_t)v15, &qword_100080B78);
        sub_10001FBE4((uint64_t)v15, (uint64_t)v52, &qword_100080B78);
        if (LOBYTE(v52[0]) == 4)
        {
          sub_10001FA84();
          swift_allocError();
          unint64_t v10 = 0xD00000000000001FLL;
          goto LABEL_19;
        }
        long long v21 = v52[0];
        long long v22 = v52[1];
        char v23 = v53;
        uint64_t result = sub_100030080(a1, a3, a4);
        break;
      case 3:
        sub_10001FBE4(v4 + 48, (uint64_t)v16, &qword_100080B70);
        sub_10001FBE4((uint64_t)v16, (uint64_t)v50, &qword_100080B70);
        if (LOBYTE(v50[0]) == 4)
        {
          sub_10001FA84();
          swift_allocError();
          unint64_t v10 = 0xD000000000000025;
          goto LABEL_19;
        }
        long long v26 = v50[2];
        v27[0] = v51[0];
        *(_OWORD *)((char *)v27 + 9) = *(_OWORD *)((char *)v51 + 9);
        long long v24 = v50[0];
        long long v25 = v50[1];
        uint64_t result = sub_10003060C(a1, a3, a4);
        break;
      case 4:
        sub_10001FBE4(v4 + 128, (uint64_t)v17, &qword_100080B68);
        sub_10001FBE4((uint64_t)v17, (uint64_t)&v48, &qword_100080B68);
        if (BYTE8(v48) == 4)
        {
          sub_10001FA84();
          swift_allocError();
          unint64_t v10 = 0xD000000000000021;
          goto LABEL_19;
        }
        _OWORD v27[2] = v48;
        v28[0] = v49[0];
        *(_OWORD *)((char *)v28 + 9) = *(_OWORD *)((char *)v49 + 9);
        uint64_t result = sub_100030568(a1, a3, a4);
        break;
      case 5:
        sub_10001FBE4(v4 + 176, (uint64_t)v18, &qword_100080B40);
        sub_10001FBE4((uint64_t)v18, (uint64_t)v46, &qword_100080B40);
        if (sub_10001FAEC((unsigned __int8 *)v46) == 1)
        {
          sub_10001FA84();
          swift_allocError();
          unint64_t v10 = 0xD000000000000038;
          goto LABEL_19;
        }
        v28[8] = v46[6];
        v28[9] = v46[7];
        v29[0] = v47[0];
        *(_OWORD *)((char *)v29 + 9) = *(_OWORD *)((char *)v47 + 9);
        unsigned char v28[4] = v46[2];
        v28[5] = v46[3];
        v28[6] = v46[4];
        v28[7] = v46[5];
        void v28[2] = v46[0];
        v28[3] = v46[1];
        uint64_t result = sub_100030694(a1, a3, a4);
        break;
      case 6:
        sub_10001FBE4(v4 + 336, (uint64_t)v19, &qword_100080B48);
        sub_10001FBE4((uint64_t)v19, (uint64_t)v44, &qword_100080B48);
        if (sub_10001FAEC((unsigned __int8 *)v44) == 1)
        {
          sub_10001FA84();
          swift_allocError();
          unint64_t v10 = 0xD000000000000050;
          goto LABEL_19;
        }
        v29[12] = v44[10];
        v29[13] = v44[11];
        char v30 = v45;
        v29[8] = v44[6];
        v29[9] = v44[7];
        v29[10] = v44[8];
        v29[11] = v44[9];
        unsigned char v29[4] = v44[2];
        v29[5] = v44[3];
        v29[6] = v44[4];
        v29[7] = v44[5];
        v29[2] = v44[0];
        v29[3] = v44[1];
        uint64_t result = sub_100030770(a1, a3, a4);
        break;
      case 7:
        sub_10001FBE4(v4 + 536, (uint64_t)v20, &qword_100080B50);
        sub_10001FBE4((uint64_t)v20, (uint64_t)v42, &qword_100080B50);
        if (sub_10001FAD8((uint64_t)v42) == 1)
        {
          sub_10001FA84();
          swift_allocError();
          unint64_t v10 = 0xD000000000000053;
LABEL_19:
          *(void *)uint64_t v8 = v10;
          *(void *)(v8 + 8) = (unint64_t)(v11 - 32) | 0x8000000000000000;
          goto LABEL_20;
        }
        long long v39 = v42[8];
        long long v40 = v42[9];
        v41[0] = v43[0];
        *(_OWORD *)((char *)v41 + 9) = *(_OWORD *)((char *)v43 + 9);
        long long v35 = v42[4];
        long long v36 = v42[5];
        long long v37 = v42[6];
        long long v38 = v42[7];
        long long v31 = v42[0];
        long long v32 = v42[1];
        long long v33 = v42[2];
        long long v34 = v42[3];
        uint64_t result = sub_100030814(a1, a3, a4);
        break;
      default:
        sub_100059370(31);
        v55._object = (void *)0x8000000100062180;
        v55._countAndFlagsBits = 0xD00000000000001BLL;
        sub_1000591F0(v55);
        sub_100059380();
        v56._countAndFlagsBits = 11872;
        v56._object = (void *)0xE200000000000000;
        sub_1000591F0(v56);
        sub_10001FA84();
        swift_allocError();
        *(void *)uint64_t v8 = 0;
        *(void *)(v8 + 8) = 0xE000000000000000;
LABEL_20:
        char v9 = 4;
        goto LABEL_21;
    }
  }
  return result;
}

void PPM_0_2_1.DPConfig.DPMechanismSelector.init<A>(from:with:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, void *a5@<X8>)
{
  sub_10001FBE4(a2, (uint64_t)v100, &qword_100080B58);
  unint64_t v8 = v101;
  uint64_t v9 = v102;
  uint64_t v11 = v103;
  unint64_t v10 = v104;
  uint64_t v12 = v105;
  sub_10001FBE4(a2, (uint64_t)v106, &qword_100080B58);
  if (v106[0] == 8)
  {
    sub_10001FA84();
    swift_allocError();
    *(void *)uint64_t v13 = 0xD000000000000034;
    *(void *)(v13 + 8) = 0x8000000100062140;
    char v14 = 1;
LABEL_3:
    *(unsigned char *)(v13 + 16) = v14;
    swift_willThrow();
  }
  else
  {
    uint64_t v15 = v107;
    switch(v106[0])
    {
      case 1:
        PPM_0_2_1.QueryType.enumValue.getter(a1, a3, a4);
        if (v15) {
          return;
        }
        sub_10001FA0C((uint64_t)v53);
        sub_10001FA44((uint64_t)v55);
        sub_10001FBA8((uint64_t)v57);
        __src[0] = 0;
        *(void *)&__src[8] = 4;
        memset(&__src[16], 0, 25);
        *(void *)&__src[48] = 4;
        long long v16 = 0uLL;
        *(_OWORD *)&__src[56] = 0u;
        goto LABEL_31;
      case 2:
        PPM_0_2_1.RealNumber.init<A>(from:with:)(a1, v8 & 0x1FF, a3, a4, (uint64_t)v61);
        if (v15) {
          return;
        }
        uint64_t v18 = v66;
        uint64_t v19 = v67;
        char v20 = v68;
        unint64_t v21 = v61[0] | ((unint64_t)v62 << 32);
        uint64_t v22 = 0x10000;
        if (!v64) {
          uint64_t v22 = 0;
        }
        unint64_t v23 = v22 | v63 | ((unint64_t)v65 << 32);
        sub_10001FA0C((uint64_t)v53);
        sub_10001FA44((uint64_t)v55);
        sub_10001FBA8((uint64_t)v57);
        __src[0] = 1;
        *(void *)&__src[8] = v21;
        *(void *)&__src[16] = v23;
        *(void *)&__src[24] = v18;
        *(void *)&__src[32] = v19;
        __src[40] = v20;
        *(void *)&__src[48] = 4;
        memset(&__src[56], 0, 65);
        *(_OWORD *)&__src[128] = xmmword_10005E010;
        memset(&__src[144], 0, 24);
        goto LABEL_32;
      case 3:
        PPM_0_2_1.EpsDeltaDPConfig.init<A>(from:with:)(a1, (v8 >> 16) | ((HIWORD(v8) & 1) << 32), a3, a4, (uint64_t)v69);
        if (v15) {
          return;
        }
        uint64_t v107 = v74;
        uint64_t v52 = v75;
        uint64_t v50 = v76;
        uint64_t v48 = v82;
        uint64_t v24 = v83;
        char v25 = v84;
        unint64_t v26 = v69[0] | ((unint64_t)v70 << 32);
        uint64_t v27 = 0x10000;
        if (v72) {
          uint64_t v28 = 0x10000;
        }
        else {
          uint64_t v28 = 0;
        }
        unint64_t v29 = v28 | v71 | ((unint64_t)v73 << 32);
        unint64_t v30 = v77 | ((unint64_t)v78 << 32);
        if (!v80) {
          uint64_t v27 = 0;
        }
        unint64_t v31 = v27 | v79 | ((unint64_t)v81 << 32);
        sub_10001FA0C((uint64_t)v53);
        sub_10001FA44((uint64_t)v55);
        sub_10001FBA8((uint64_t)v57);
        __src[0] = 1;
        *(void *)&__src[8] = 4;
        memset(&__src[16], 0, 25);
        *(void *)&__src[48] = v26;
        *(void *)&__src[56] = v29;
        *(void *)&__src[64] = v107;
        *(void *)&__src[72] = v52;
        *(void *)&__src[80] = v50;
        *(void *)&__src[88] = v30;
        *(void *)&__src[96] = v31;
        *(void *)&__src[104] = v48;
        *(void *)&__src[112] = v24;
        __src[120] = v25;
        *(_OWORD *)&__src[128] = xmmword_10005E010;
        memset(&__src[144], 0, 24);
        goto LABEL_32;
      case 4:
        PPM_0_2_1.RenyiDPConfig.init<A>(from:with:)(a1, HIBYTE(v8) | (unsigned __int16)(v9 << 8) | (((v9 >> 8) & 1) << 16), a3, a4, (uint64_t)&v85);
        if (v15) {
          return;
        }
        uint64_t v32 = v85;
        uint64_t v33 = v91;
        uint64_t v34 = v92;
        char v35 = v93;
        unint64_t v36 = v86 | ((unint64_t)v87 << 32);
        uint64_t v37 = 0x10000;
        if (!v89) {
          uint64_t v37 = 0;
        }
        unint64_t v38 = v37 | v88 | ((unint64_t)v90 << 32);
        sub_10001FA0C((uint64_t)v53);
        sub_10001FA44((uint64_t)v55);
        sub_10001FBA8((uint64_t)v57);
        __src[0] = 1;
        *(void *)&__src[8] = 4;
        memset(&__src[16], 0, 25);
        *(void *)&__src[48] = 4;
        memset(&__src[56], 0, 65);
        *(void *)&__src[128] = v32;
        *(void *)&__src[136] = v36;
        *(void *)&__src[144] = v38;
        *(void *)&__src[152] = v33;
        *(void *)&__src[160] = v34;
        __src[168] = v35;
        goto LABEL_33;
      case 5:
        *((void *)&v39 + 1) = v11;
        *(void *)&long long v39 = v9;
        PPM_0_2_1.AggregatorDiscreteGaussianDpConfig.init<A>(from:with:)(a1, v39 >> 16, BYTE2(v11) & 1, a3, a4, (uint64_t)v94);
        if (v15) {
          return;
        }
        v53[6] = v94[6];
        v53[7] = v94[7];
        v54[0] = v95[0];
        *(_OWORD *)((char *)v54 + 9) = *(_OWORD *)((char *)v95 + 9);
        v53[2] = v94[2];
        v53[3] = v94[3];
        unsigned char v53[4] = v94[4];
        v53[5] = v94[5];
        v53[0] = v94[0];
        v53[1] = v94[1];
        PPM_0_2_1.QueryType.enumValue.getter(v53, v40, v41);
        sub_10001FA44((uint64_t)v55);
        goto LABEL_27;
      case 6:
        *((void *)&v42 + 1) = v10;
        *(void *)&long long v42 = v11;
        __src[0] = BYTE6(v10) & 1;
        PPM_0_2_1.AggregatorDiscreteGaussianClientSymmetricRapporDpConfig.init<A>(from:with:)(a1, v42 >> 24, (v10 >> 24) & 0xFFFFFF | ((BYTE6(v10) & 1) << 24), a3, a4, (uint64_t)v96);
        if (v15) {
          return;
        }
        sub_10001FA0C((uint64_t)v53);
        _OWORD v55[10] = v96[10];
        v55[11] = v96[11];
        char v56 = v97;
        v55[6] = v96[6];
        v55[7] = v96[7];
        v55[8] = v96[8];
        v55[9] = v96[9];
        v55[2] = v96[2];
        v55[3] = v96[3];
        v55[4] = v96[4];
        v55[5] = v96[5];
        v55[0] = v96[0];
        v55[1] = v96[1];
        PPM_0_2_1.QueryType.enumValue.getter(v55, v43, v44);
LABEL_27:
        sub_10001FBA8((uint64_t)v57);
        break;
      case 7:
        *((void *)&v45 + 1) = v12;
        *(void *)&long long v45 = v10;
        PPM_0_2_1.DistributedGaussianWithSubsampledMomentsAccountantConfig.init<A>(from:with:)(a1, v45 >> 56, HIBYTE(v12) & 1, a3, a4, (uint64_t)v98);
        if (v15) {
          return;
        }
        sub_10001FA0C((uint64_t)v53);
        sub_10001FA44((uint64_t)v55);
        v57[8] = v98[8];
        v57[9] = v98[9];
        v58[0] = v99[0];
        *(_OWORD *)((char *)v58 + 9) = *(_OWORD *)((char *)v99 + 9);
        v57[4] = v98[4];
        v57[5] = v98[5];
        v57[6] = v98[6];
        v57[7] = v98[7];
        v57[0] = v98[0];
        v57[1] = v98[1];
        v57[2] = v98[2];
        v57[3] = v98[3];
        PPM_0_2_1.QueryType.enumValue.getter(v57, v46, v47);
        break;
      default:
        *(void *)&v94[0] = 0;
        *((void *)&v94[0] + 1) = 0xE000000000000000;
        sub_100059370(31);
        v108._object = (void *)0x8000000100062180;
        v108._countAndFlagsBits = 0xD00000000000001BLL;
        sub_1000591F0(v108);
        LOBYTE(v55[0]) = v57;
        sub_100059380();
        v109._countAndFlagsBits = 11872;
        v109._object = (void *)0xE200000000000000;
        sub_1000591F0(v109);
        long long v17 = v94[0];
        sub_10001FA84();
        swift_allocError();
        *(_OWORD *)uint64_t v13 = v17;
        char v14 = 4;
        goto LABEL_3;
    }
    __src[0] = 1;
    *(void *)&__src[8] = 4;
    memset(&__src[16], 0, 25);
    *(void *)&__src[48] = 4;
    long long v16 = 0uLL;
    *(_OWORD *)&__src[56] = 0u;
LABEL_31:
    *(_OWORD *)&__src[72] = v16;
    *(_OWORD *)&__src[88] = v16;
    *(_OWORD *)&__src[104] = v16;
    __src[120] = 0;
    *(_OWORD *)&__src[128] = xmmword_10005E010;
    memset(&__src[144], 0, 24);
LABEL_32:
    __src[168] = 0;
LABEL_33:
    sub_10001FBE4((uint64_t)v53, (uint64_t)&__src[176], &qword_100080B40);
    sub_10001FBE4((uint64_t)v55, (uint64_t)&__src[336], &qword_100080B48);
    sub_10001FBE4((uint64_t)v57, (uint64_t)&__src[536], &qword_100080B50);
    memcpy(__dst, __src, sizeof(__dst));
    memcpy(a5, __dst, 0x2D1uLL);
  }
}

uint64_t sub_100029CE8(uint64_t a1)
{
  sub_10001FBE4(a1, (uint64_t)v3, &qword_100080B58);
  memcpy(__dst, v1, sizeof(__dst));
  return PPM_0_2_1.DPConfig.DPMechanismSelector.encodedLength(with:)((uint64_t)v3);
}

uint64_t sub_100029D48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_10001FBE4(a2, (uint64_t)v9, &qword_100080B58);
  memcpy(__dst, v4, sizeof(__dst));
  return PPM_0_2_1.DPConfig.DPMechanismSelector.encode<A>(into:with:)(a1, (uint64_t)v9, a3, a4);
}

void sub_100029DD0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, void *a5@<X8>)
{
  sub_10001FBE4(a2, (uint64_t)v11, &qword_100080B58);
  PPM_0_2_1.DPConfig.DPMechanismSelector.init<A>(from:with:)(a1, (uint64_t)v11, a3, a4, __src);
  if (!v5) {
    memcpy(a5, __src, 0x2D1uLL);
  }
}

uint64_t sub_100029E68(void *__src, const void *a2)
{
  memcpy(v4, __src, 0x2D1uLL);
  memcpy(__dst, a2, 0x2D1uLL);
  return _s19DPSubmissionService9PPM_0_2_1V8DPConfigV19DPMechanismSelectorV23__derived_struct_equalsySbAG_AGtFZ_0((uint64_t)v4, (uint64_t)__dst) & 1;
}

void *PPM_0_2_1.DPConfig.dpMechanismSelector.getter@<X0>(void *a1@<X8>)
{
  return memcpy(a1, (const void *)(v1 + 8), 0x2D1uLL);
}

uint64_t PPM_0_2_1.DPConfig.CodingParameter.dpMechanismSelector_epsParameter.getter()
{
  return *(unsigned __int8 *)(v0 + 1) | (*(unsigned __int8 *)(v0 + 2) << 8);
}

unint64_t PPM_0_2_1.DPConfig.CodingParameter.dpMechanismSelector_eps_deltaParameter.getter()
{
  return *(unsigned int *)(v0 + 3) | ((unint64_t)*(unsigned __int8 *)(v0 + 7) << 32);
}

uint64_t PPM_0_2_1.DPConfig.CodingParameter.dpMechanismSelector_renyiParameter.getter()
{
  return *(unsigned __int16 *)(v0 + 8) | (*(unsigned __int8 *)(v0 + 10) << 16);
}

uint64_t PPM_0_2_1.DPConfig.CodingParameter.dpMechanismSelector_aggregator_discrete_gaussianParameter.getter()
{
  return *(void *)(v0 + 11);
}

uint64_t PPM_0_2_1.DPConfig.CodingParameter.dpMechanismSelector_aggregator_discrete_gaussian_client_symmetric_rapporParameter.getter()
{
  return *(void *)(v0 + 20);
}

uint64_t PPM_0_2_1.DPConfig.CodingParameter.dpMechanismSelector_distributed_gaussian_with_subsampled_moments_accountantParameter.getter()
{
  return *(void *)(v0 + 32);
}

uint64_t PPM_0_2_1.DPConfig.CodingParameter.init(dpMechanismParameter:dpMechanismSelector_epsParameter:dpMechanismSelector_eps_deltaParameter:dpMechanismSelector_renyiParameter:dpMechanismSelector_aggregator_discrete_gaussianParameter:dpMechanismSelector_aggregator_discrete_gaussian_client_symmetric_rapporParameter:dpMechanismSelector_distributed_gaussian_with_subsampled_moments_accountantParameter:)@<X0>(uint64_t result@<X0>, __int16 a2@<W1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, uint64_t a10, char a11)
{
  *(unsigned char *)a9 = result & 1;
  *(unsigned char *)(a9 + 1) = a2;
  *(unsigned char *)(a9 + 2) = HIBYTE(a2) & 1;
  *(_DWORD *)(a9 + 3) = a3;
  *(unsigned char *)(a9 + 7) = BYTE4(a3) & 1;
  *(_WORD *)(a9 + 8) = a4;
  *(unsigned char *)(a9 + 10) = BYTE2(a4) & 1;
  *(void *)(a9 + 11) = a5;
  *(unsigned char *)(a9 + 19) = a6 & 1;
  *(void *)(a9 + 20) = a7;
  *(_WORD *)(a9 + 28) = a8;
  *(unsigned char *)(a9 + 30) = BYTE2(a8);
  *(unsigned char *)(a9 + 31) = HIBYTE(a8) & 1;
  *(void *)(a9 + 32) = a10;
  *(unsigned char *)(a9 + 40) = a11 & 1;
  return result;
}

uint64_t PPM_0_2_1.DPConfig.encodedLength(with:)(uint64_t a1)
{
  sub_10001FBE4(a1, (uint64_t)v26, &qword_100080B98);
  unint64_t v3 = v26[0];
  unint64_t v4 = v26[1];
  unint64_t v5 = v26[2];
  unint64_t v6 = v26[3];
  unint64_t v7 = v26[4];
  char v8 = v27;
  sub_10001FBE4(a1, (uint64_t)v28, &qword_100080B98);
  if (v28[41])
  {
    unint64_t v7 = 0;
    unint64_t v9 = 0;
    unint64_t v10 = 0;
    unint64_t v11 = 0;
    unint64_t v12 = 0x1000000000100;
    uint64_t v13 = 0x1000000000000;
    uint64_t v24 = 0x100000000000000;
    uint64_t v25 = 0;
    uint64_t v14 = 256;
    uint64_t v23 = 0x10000;
  }
  else
  {
    *((void *)&v15 + 1) = v5;
    *(void *)&long long v15 = v4;
    unint64_t v10 = v15 >> 24;
    *((void *)&v15 + 1) = v6;
    *(void *)&long long v15 = v5;
    unint64_t v9 = v15 >> 32;
    uint64_t v16 = v8 & 1;
    unint64_t v12 = (v3 >> 8) & 0x1FFFFFFFF0000 | v28[1] | ((unint64_t)(v28[2] & 1) << 8);
    unint64_t v11 = (unsigned __int16)v4;
    uint64_t v14 = (v4 >> 8) & 0x100;
    uint64_t v25 = (v6 >> 8) & 0xFFFFFF000000;
    uint64_t v13 = (v6 >> 8) & 0x1000000000000;
    uint64_t v23 = (v5 >> 8) & 0x10000;
    uint64_t v24 = v16 << 56;
  }
  uint64_t v17 = *v1;
  uint64_t v18 = v1 + 8;
  uint64_t v19 = *((unsigned int *)v1 + 1);
  memcpy(__dst, v18, sizeof(__dst));
  v30[0] = v17 | (v19 << 32);
  v30[1] = v12 | (v11 << 56);
  _OWORD v30[2] = v14 | (v11 >> 8) | (v10 << 16);
  v30[3] = v23 | HIWORD(v10) | (v9 << 24);
  v30[4] = (v9 >> 40) | (v7 << 56) | v25 | v13;
  v30[5] = v24 | (v7 >> 8);
  uint64_t v20 = v30[8];
  uint64_t result = PPM_0_2_1.DPConfig.DPMechanismSelector.encodedLength(with:)((uint64_t)v30);
  if (!v20 && __OFADD__(result++, 1)) {
    __break(1u);
  }
  return result;
}

uint64_t PPM_0_2_1.DPConfig.encode<A>(into:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_10001FBE4(a2, (uint64_t)v37, &qword_100080B98);
  unint64_t v30 = v37[0];
  unint64_t v31 = v37[1];
  unint64_t v32 = v37[3];
  unint64_t v34 = v37[4];
  unint64_t v35 = v37[2];
  char v29 = v38;
  uint64_t v10 = *v4;
  uint64_t v11 = *((unsigned int *)v4 + 1);
  unsigned __int8 v42 = *v4;
  int v43 = v11;
  unint64_t v12 = sub_100030A18();
  uint64_t result = sub_100035128(a1, (uint64_t)&type metadata for PPM_0_2_1.DPMechanism, a3, v12, a4);
  if (!v5)
  {
    uint64_t v24 = v4;
    uint64_t v25 = v11;
    uint64_t v26 = v10;
    uint64_t v27 = a3;
    uint64_t v28 = a4;
    sub_10001FBE4(a2, (uint64_t)v39, &qword_100080B98);
    if (v39[41])
    {
      unint64_t v23 = 0;
      uint64_t v36 = 0;
      unint64_t v14 = 0;
      unint64_t v15 = 0;
      unint64_t v16 = 0x1000000000100;
      uint64_t v17 = 0x1000000000000;
      unint64_t v33 = 0x100000000000000;
      uint64_t v18 = 256;
      uint64_t v19 = 0x10000;
      uint64_t v20 = a1;
      unint64_t v21 = 0;
    }
    else
    {
      *((void *)&v22 + 1) = v35;
      *(void *)&long long v22 = v31;
      unint64_t v14 = v22 >> 24;
      *((void *)&v22 + 1) = v32;
      *(void *)&long long v22 = v35;
      unint64_t v23 = v22 >> 32;
      unint64_t v16 = (v30 >> 8) & 0x1FFFFFFFF0000 | v39[1] | ((unint64_t)(v39[2] & 1) << 8);
      unint64_t v15 = (unsigned __int16)v31;
      uint64_t v18 = (v31 >> 8) & 0x100;
      uint64_t v19 = (v35 >> 8) & 0x10000;
      uint64_t v36 = (v32 >> 8) & 0xFFFFFF000000;
      uint64_t v17 = (v32 >> 8) & 0x1000000000000;
      unint64_t v33 = (unint64_t)(v29 & 1) << 56;
      uint64_t v20 = a1;
      unint64_t v21 = v34;
    }
    memcpy(__dst, v24 + 8, sizeof(__dst));
    v41[0] = v26 | (v25 << 32);
    v41[1] = v16 | (v15 << 56);
    _OWORD v41[2] = v18 | (v15 >> 8) | (v14 << 16);
    v41[3] = v19 | HIWORD(v14) | (v23 << 24);
    v41[4] = (v23 >> 40) | (v21 << 56) | v36 | v17;
    v41[5] = v33 | (v21 >> 8);
    return PPM_0_2_1.DPConfig.DPMechanismSelector.encode<A>(into:with:)(v20, (uint64_t)v41, v27, v28);
  }
  return result;
}

void PPM_0_2_1.DPConfig.init<A>(from:with:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  sub_10001FBE4(a2, (uint64_t)v38, &qword_100080B98);
  unint64_t v33 = v38[1];
  unint64_t v34 = v38[0];
  unint64_t v35 = v38[2];
  unint64_t v10 = v38[3];
  unint64_t v11 = v38[4];
  char v12 = v39;
  sub_10001FBE4(a2, (uint64_t)v41, &qword_100080B98);
  char v13 = v41[41] | v41[0];
  unint64_t v14 = sub_100030A18();
  TLSEnumType.init<A>(from:with:)(a1, v13 & 1, (uint64_t)&type metadata for PPM_0_2_1.DPMechanism, a3, v14, a4);
  if (!v5)
  {
    uint64_t v31 = a3;
    uint64_t v32 = a1;
    uint64_t v15 = v43;
    uint64_t v16 = v44;
    sub_10001FBE4(a2, (uint64_t)v40, &qword_100080B98);
    if (v40[41])
    {
      unint64_t v17 = 0;
      unint64_t v18 = 0;
      uint64_t v19 = 0;
      unint64_t v20 = 0;
      unint64_t v21 = 0;
      unint64_t v22 = 0x1000000000100;
      uint64_t v23 = 0x1000000000000;
      unint64_t v24 = 0x100000000000000;
      uint64_t v25 = 256;
      uint64_t v26 = 0x10000;
      unint64_t v28 = a4;
      uint64_t v27 = v31;
      uint64_t v29 = v32;
    }
    else
    {
      *((void *)&v30 + 1) = v35;
      *(void *)&long long v30 = v33;
      unint64_t v20 = v30 >> 24;
      *((void *)&v30 + 1) = v10;
      *(void *)&long long v30 = v35;
      unint64_t v18 = v30 >> 32;
      unint64_t v22 = (v34 >> 8) & 0x1FFFFFFFF0000 | v40[1] | ((unint64_t)(v40[2] & 1) << 8);
      unint64_t v21 = (unsigned __int16)v33;
      uint64_t v25 = (v33 >> 8) & 0x100;
      uint64_t v26 = (v35 >> 8) & 0x10000;
      uint64_t v19 = (v10 >> 8) & 0xFFFFFF000000;
      uint64_t v23 = (v10 >> 8) & 0x1000000000000;
      unint64_t v24 = (unint64_t)(v12 & 1) << 56;
      unint64_t v28 = a4;
      uint64_t v27 = v31;
      uint64_t v29 = v32;
      unint64_t v17 = v11;
    }
    v42[0] = v15 | (v16 << 32);
    v42[1] = v22 | (v21 << 56);
    v42[2] = v25 | (v21 >> 8) | (v20 << 16);
    v42[3] = v26 | HIWORD(v20) | (v18 << 24);
    v42[4] = (v18 >> 40) | (v17 << 56) | v19 | v23;
    v42[5] = v24 | (v17 >> 8);
    PPM_0_2_1.DPConfig.DPMechanismSelector.init<A>(from:with:)(v29, (uint64_t)v42, v27, v28, __src);
    memcpy((void *)(a5 + 8), __src, 0x2D1uLL);
    *(unsigned char *)a5 = v15;
    *(_DWORD *)(a5 + 4) = v16;
  }
}

uint64_t static PPM_0_2_1.DPConfig.__derived_struct_equals(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 == *a2 && *((_DWORD *)a1 + 1) == *((_DWORD *)a2 + 1))
  {
    memcpy(__dst, a1 + 8, 0x2D1uLL);
    memcpy(v5, a2 + 8, 0x2D1uLL);
    char v3 = _s19DPSubmissionService9PPM_0_2_1V8DPConfigV19DPMechanismSelectorV23__derived_struct_equalsySbAG_AGtFZ_0((uint64_t)__dst, (uint64_t)v5);
  }
  else
  {
    char v3 = 0;
  }
  return v3 & 1;
}

uint64_t sub_10002A60C(uint64_t a1)
{
  sub_10001FBE4(a1, (uint64_t)v2, &qword_100080B98);
  return PPM_0_2_1.DPConfig.encodedLength(with:)((uint64_t)v2);
}

uint64_t sub_10002A650(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_10001FBE4(a2, (uint64_t)v8, &qword_100080B98);
  return PPM_0_2_1.DPConfig.encode<A>(into:with:)(a1, (uint64_t)v8, a3, a4);
}

void sub_10002A6BC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, void *a5@<X8>)
{
  sub_10001FBE4(a2, (uint64_t)v11, &qword_100080B98);
  PPM_0_2_1.DPConfig.init<A>(from:with:)(a1, (uint64_t)v11, a3, a4, (uint64_t)__src);
  if (!v5) {
    memcpy(a5, __src, 0x2D9uLL);
  }
}

uint64_t sub_10002A754(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v3 = *a1;
  int v4 = *((_DWORD *)a1 + 1);
  memcpy(v10, a1 + 8, 0x2D1uLL);
  int v5 = *a2;
  int v6 = *((_DWORD *)a2 + 1);
  memcpy(__dst, a2 + 8, 0x2D1uLL);
  if (v3 == v5 && v4 == v6) {
    char v8 = _s19DPSubmissionService9PPM_0_2_1V8DPConfigV19DPMechanismSelectorV23__derived_struct_equalsySbAG_AGtFZ_0((uint64_t)v10, (uint64_t)__dst);
  }
  else {
    char v8 = 0;
  }
  return v8 & 1;
}

uint64_t static PPM_0_2_1.VDAFType.maxValue.getter()
{
  return 0xFFFFFFFFLL;
}

_UNKNOWN **static PPM_0_2_1.VDAFType.EnumValue.allCases.getter()
{
  return &off_1000755B0;
}

Swift::Int _s19DPSubmissionService9PPM_0_2_1V9QueryTypeV9EnumValueO04hashG0Sivg_0(unsigned __int8 a1)
{
  return sub_100059480();
}

Swift::Int sub_10002A83C()
{
  Swift::UInt v1 = *v0;
  sub_100059460();
  sub_100059470(v1);
  return sub_100059480();
}

Swift::Int sub_10002A884()
{
  Swift::UInt v1 = *v0;
  sub_100059460();
  sub_100059470(v1);
  return sub_100059480();
}

void sub_10002A8C8(void *a1@<X8>)
{
  *a1 = &off_1000755B0;
}

unint64_t sub_10002A8D8()
{
  unint64_t result = sub_1000465C0((uint64_t)&off_100075330);
  static PPM_0_2_1.VDAFType.rangesByEnumVals = result;
  return result;
}

uint64_t *PPM_0_2_1.VDAFType.rangesByEnumVals.unsafeMutableAddressor()
{
  if (qword_100080A18 != -1) {
    swift_once();
  }
  return &static PPM_0_2_1.VDAFType.rangesByEnumVals;
}

uint64_t static PPM_0_2_1.VDAFType.rangesByEnumVals.getter()
{
  return sub_10002A970(&qword_100080A18);
}

uint64_t sub_10002A970(void *a1)
{
  if (*a1 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t static PPM_0_2_1.VDAFType.rangesByEnumVals.setter(uint64_t a1)
{
  return sub_10002A9F0(a1, &qword_100080A18, &static PPM_0_2_1.VDAFType.rangesByEnumVals);
}

uint64_t sub_10002A9F0(uint64_t a1, void *a2, void *a3)
{
  if (*a2 != -1) {
    swift_once();
  }
  swift_beginAccess();
  *a3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static PPM_0_2_1.VDAFType.rangesByEnumVals.modify())()
{
  if (qword_100080A18 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return j_j__swift_endAccess;
}

BOOL _s19DPSubmissionService9PPM_0_2_1V9QueryTypeV23__derived_struct_equalsySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  return a2 == a1 && HIDWORD(a1) == HIDWORD(a2);
}

uint64_t sub_10002AAFC(uint64_t a1, uint64_t a2)
{
  return sub_10002AB20(a1, a2, &qword_100080A18);
}

uint64_t sub_10002AB20(uint64_t a1, uint64_t a2, void *a3)
{
  if (*a3 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

void PPM_0_2_1.PrioPiRapporConfig.alpha1.getter(uint64_t a1@<X8>)
{
  int v2 = *(_DWORD *)(v1 + 52);
  __int16 v3 = *(_WORD *)(v1 + 56);
  char v4 = *(unsigned char *)(v1 + 58);
  int v5 = *(_DWORD *)(v1 + 60);
  char v6 = *(unsigned char *)(v1 + 64);
  uint64_t v7 = *(void *)(v1 + 72);
  char v8 = *(unsigned char *)(v1 + 80);
  *(unsigned char *)a1 = *(unsigned char *)(v1 + 48);
  *(_DWORD *)(a1 + 4) = v2;
  *(_WORD *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 10) = v4;
  *(_DWORD *)(a1 + 12) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(unsigned char *)(a1 + 32) = v8;
}

uint64_t _s19DPSubmissionService9PPM_0_2_1V18PrioPiRapporConfigV15CodingParameterV06alpha0I006alpha1I0AgC10RealNumberVAFVSg_AMtcfC_0(unsigned int a1, unsigned int a2)
{
  return (a2 << 16) & 0xFEFFFE00 | (((a2 >> 8) & 1) << 24) | (((a1 >> 8) & 1) << 8) | a1;
}

uint64_t PPM_0_2_1.PrioPiRapporConfig.encodedLength(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10002FD20(a1, a2, a3, a4);
}

uint64_t PPM_0_2_1.PrioPiRapporConfig.encode<A>(into:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10003033C(a1, a3, a4);
}

uint64_t PPM_0_2_1.PrioPiRapporConfig.init(dimension:prime:alpha0:alpha1:)@<X0>(uint64_t result@<X0>, int a2@<W1>, char *a3@<X2>, char *a4@<X3>, uint64_t a5@<X8>)
{
  char v5 = *a4;
  int v6 = *((_DWORD *)a4 + 1);
  __int16 v7 = *((_WORD *)a4 + 4);
  char v8 = a4[10];
  int v9 = *((_DWORD *)a4 + 3);
  char v10 = a4[16];
  uint64_t v11 = *((void *)a4 + 3);
  char v12 = a4[32];
  char v13 = *a3;
  int v14 = *((_DWORD *)a3 + 1);
  __int16 v15 = *((_WORD *)a3 + 4);
  char v16 = a3[10];
  int v17 = *((_DWORD *)a3 + 3);
  char v18 = a3[16];
  uint64_t v19 = *((void *)a3 + 3);
  char v20 = a3[32];
  *(_DWORD *)a5 = result;
  *(_DWORD *)(a5 + 4) = a2;
  *(unsigned char *)(a5 + 8) = v13;
  *(_DWORD *)(a5 + 12) = v14;
  *(_WORD *)(a5 + 16) = v15;
  *(unsigned char *)(a5 + 18) = v16 & 1;
  *(_DWORD *)(a5 + 20) = v17;
  *(unsigned char *)(a5 + 24) = v18 & 1;
  *(void *)(a5 + 32) = v19;
  *(unsigned char *)(a5 + 40) = v20 & 1;
  *(unsigned char *)(a5 + 48) = v5;
  *(_DWORD *)(a5 + 52) = v6;
  *(_WORD *)(a5 + 56) = v7;
  *(unsigned char *)(a5 + 58) = v8 & 1;
  *(_DWORD *)(a5 + 60) = v9;
  *(unsigned char *)(a5 + 64) = v10 & 1;
  *(void *)(a5 + 72) = v11;
  *(unsigned char *)(a5 + 80) = v12 & 1;
  return result;
}

unint64_t PPM_0_2_1.PrioPiRapporConfig.init<A>(from:with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v11 = sub_100022BFC();
  unint64_t result = CommonUIntTLSNumberType.init<A>(from:with:)((uint64_t)&type metadata for UInt32, a3, v11, a4, (uint64_t)&v49);
  if (!v5)
  {
    int v13 = v49;
    CommonUIntTLSNumberType.init<A>(from:with:)((uint64_t)&type metadata for UInt32, a3, v11, a4, (uint64_t)&v49);
    int v14 = v49;
    if ((a2 & (unint64_t)&_mh_execute_header) != 0) {
      __int16 v15 = 0;
    }
    else {
      __int16 v15 = a2;
    }
    PPM_0_2_1.RealNumber.init<A>(from:with:)(a1, v15 & 0xFEFF | ((((unsigned __int16)((a2 & (unint64_t)&_mh_execute_header) >> 32) | (unsigned __int16)(a2 >> 8)) & 1) << 8), a3, a4, (uint64_t)v33);
    char v16 = v33[0];
    int v17 = v34;
    char v31 = v36;
    __int16 v32 = v35;
    char v29 = v38;
    int v30 = v37;
    uint64_t v28 = v39;
    char v27 = v40;
    if ((a2 & (unint64_t)&_mh_execute_header) != 0) {
      __int16 v18 = 0;
    }
    else {
      __int16 v18 = BYTE2(a2);
    }
    unint64_t result = PPM_0_2_1.RealNumber.init<A>(from:with:)(a1, v18 & 0xFEFF | (((unsigned __int16)(((a2 & (unint64_t)&_mh_execute_header) >> 32) | BYTE3(a2)) & 1u) << 8), a3, a4, (uint64_t)v41);
    char v19 = v41[0];
    int v20 = v42;
    __int16 v21 = v43;
    char v22 = v44;
    int v23 = v45;
    char v24 = v46;
    uint64_t v25 = v47;
    char v26 = v48;
    *(_DWORD *)a5 = v13;
    *(_DWORD *)(a5 + 4) = v14;
    *(unsigned char *)(a5 + 8) = v16;
    *(_DWORD *)(a5 + 12) = v17;
    *(_WORD *)(a5 + 16) = v32;
    *(unsigned char *)(a5 + 18) = v31;
    *(_DWORD *)(a5 + 20) = v30;
    *(unsigned char *)(a5 + 24) = v29;
    *(void *)(a5 + 32) = v28;
    *(unsigned char *)(a5 + 40) = v27;
    *(unsigned char *)(a5 + 48) = v19;
    *(_DWORD *)(a5 + 52) = v20;
    *(_WORD *)(a5 + 56) = v21;
    *(unsigned char *)(a5 + 58) = v22;
    *(_DWORD *)(a5 + 60) = v23;
    *(unsigned char *)(a5 + 64) = v24;
    *(void *)(a5 + 72) = v25;
    *(unsigned char *)(a5 + 80) = v26;
  }
  return result;
}

uint64_t sub_10002AEB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10002FD20(a1, a2, a3, a4);
}

uint64_t sub_10002AF04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10003033C(a1, a3, a4);
}

double sub_10002AF58@<D0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7 = *a2;
  unsigned __int8 v13 = *((unsigned char *)a2 + 4);
  PPM_0_2_1.PrioPiRapporConfig.init<A>(from:with:)(a1, v7 | ((unint64_t)v13 << 32), a3, a4, (uint64_t)v11);
  if (!v5)
  {
    long long v9 = v11[3];
    *(_OWORD *)(a5 + 32) = v11[2];
    *(_OWORD *)(a5 + 48) = v9;
    *(_OWORD *)(a5 + 64) = v11[4];
    *(unsigned char *)(a5 + 80) = v12;
    double result = *(double *)v11;
    long long v10 = v11[1];
    *(_OWORD *)a5 = v11[0];
    *(_OWORD *)(a5 + 16) = v10;
  }
  return result;
}

uint64_t sub_10002AFC8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 48);
  _OWORD v7[2] = *(_OWORD *)(a1 + 32);
  _OWORD v7[3] = v2;
  v7[4] = *(_OWORD *)(a1 + 64);
  char v8 = *(unsigned char *)(a1 + 80);
  long long v3 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v3;
  long long v4 = *(_OWORD *)(a2 + 48);
  _OWORD v9[2] = *(_OWORD *)(a2 + 32);
  _OWORD v9[3] = v4;
  v9[4] = *(_OWORD *)(a2 + 64);
  char v10 = *(unsigned char *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v5;
  return _s19DPSubmissionService9PPM_0_2_1V18PrioPiRapporConfigV23__derived_struct_equalsySbAE_AEtFZ_0((uint64_t)v7, (uint64_t)v9) & 1;
}

uint64_t PPM_0_2_1.Prio3HistogramConfig.encode<A>(into:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_100030298(a1, a3, a4, a5);
}

unint64_t PPM_0_2_1.Token.CodingParameter.init(Nid:Nk:)(unsigned int a1, uint64_t a2)
{
  return a1 | (unint64_t)(a2 << 32);
}

unint64_t PPM_0_2_1.Prio3HistogramConfig.init<A>(from:with:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return sub_100030E20(a1, a3, a4);
}

BOOL static PPM_0_2_1.Prio3HistogramConfig.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t sub_10002B090(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100030298(a1, *v4, a3, a4);
}

unint64_t sub_10002B0AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, unint64_t *a4@<X8>)
{
  unint64_t result = sub_100030E20(a1, a2, a3);
  if (!v4) {
    *a4 = result;
  }
  return result;
}

BOOL sub_10002B0E0(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t PPM_0_2_1.Interval.time.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

Swift::Int __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> PPM_0_2_1.Prio3SumVecConfig.encodedLength(with:)(Swift::Void_optional with)
{
  return 9;
}

uint64_t PPM_0_2_1.Prio3SumVecConfig.encode<A>(into:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1000301A4(a1, a3 & 0xFFFFFFFFFFLL, a4, a5, a6);
}

unint64_t PPM_0_2_1.Prio3SumVecConfig.init(length:bits:chunkLength:)(unsigned int a1, unsigned __int8 a2)
{
  return a1 | ((unint64_t)a2 << 32);
}

uint64_t PPM_0_2_1.Prio3SumVecConfig.init<A>(from:with:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return sub_100030D14(a1, a3, a4) & 0xFFFFFFFFFFLL;
}

BOOL static PPM_0_2_1.Prio3SumVecConfig.__derived_struct_equals(_:_:)(uint64_t a1, int a2, uint64_t a3, int a4)
{
  return (a1 & 0xFFFFFFFFFFLL) == (a3 & 0xFFFFFFFFFFLL) && a2 == a4;
}

uint64_t sub_10002B188(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000301A4(a1, *v4 | ((unint64_t)*((unsigned __int8 *)v4 + 4) << 32), v4[2], a3, a4);
}

uint64_t sub_10002B1B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t result = sub_100030D14(a1, a2, a3);
  if (!v4)
  {
    *(_DWORD *)a4 = result;
    *(unsigned char *)(a4 + 4) = BYTE4(result);
    *(_DWORD *)(a4 + 8) = v7;
  }
  return result;
}

BOOL sub_10002B1F8(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)a1 == *(_DWORD *)a2
      && *(unsigned __int8 *)(a1 + 4) == *(unsigned __int8 *)(a2 + 4)
      && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8);
}

unint64_t PPM_0_2_1.Prio3SumVecMultiproofConfig.numProofs.getter(uint64_t a1, unint64_t a2)
{
  return HIDWORD(a2);
}

Swift::Int __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> PPM_0_2_1.Prio3SumVecMultiproofConfig.encodedLength(with:)(Swift::Void_optional with)
{
  return 10;
}

uint64_t PPM_0_2_1.Prio3SumVecMultiproofConfig.encode<A>(into:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_10003043C(a1, a3 & 0xFFFFFFFFFFLL, a4 & 0xFFFFFFFFFFLL, a5, a6);
}

uint64_t PPM_0_2_1.Prio3SumVecMultiproofConfig.init<A>(from:with:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return sub_100030ED8(a1, a3, a4) & 0xFFFFFFFFFFLL;
}

BOOL static PPM_0_2_1.Prio3SumVecMultiproofConfig.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (a1 & 0xFFFFFFFFFFLL) == (a3 & 0xFFFFFFFFFFLL) && a2 == a4 && BYTE4(a2) == BYTE4(a4);
}

uint64_t sub_10002B2C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10003043C(a1, *v4 | ((unint64_t)*((unsigned __int8 *)v4 + 4) << 32), v4[2] | ((unint64_t)*((unsigned __int8 *)v4 + 12) << 32), a3, a4);
}

uint64_t sub_10002B2FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t result = sub_100030ED8(a1, a2, a3);
  if (!v4)
  {
    *(_DWORD *)a4 = result;
    *(unsigned char *)(a4 + 4) = BYTE4(result);
    *(_DWORD *)(a4 + 8) = v7;
    *(unsigned char *)(a4 + 12) = BYTE4(v7);
  }
  return result;
}

BOOL sub_10002B344(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)a1 == *(_DWORD *)a2
      && *(unsigned __int8 *)(a1 + 4) == *(unsigned __int8 *)(a2 + 4)
      && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
      && *(unsigned __int8 *)(a1 + 12) == *(unsigned __int8 *)(a2 + 12);
}

uint64_t PPM_0_2_1.ReportMetadata.time.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

unint64_t PPM_0_2_1.PINEConfig.chunkLengthNormEquality.getter(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return HIDWORD(a3);
}

uint64_t PPM_0_2_1.PINEConfig.numProofs.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a4;
}

unint64_t PPM_0_2_1.PINEConfig.numProofsNormEquality.getter(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return a4 >> 8;
}

unint64_t PPM_0_2_1.PINEConfig.numWrChecks.getter(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return a4 >> 16;
}

unint64_t PPM_0_2_1.PINEConfig.numWrSuccesses.getter(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return HIDWORD(a4);
}

Swift::Int __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> PPM_0_2_1.PINEConfig.encodedLength(with:)(Swift::Void_optional with)
{
  return 30;
}

uint64_t PPM_0_2_1.PINEConfig.encode<A>(into:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_10002FE48(a1, a3, a4, a5, a6 & 0xFFFFFFFFFFFFLL, a7, a8);
}

uint64_t PPM_0_2_1.PINEConfig.init<A>(from:with:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t result = sub_100030A6C(a1, a3, a4);
  if (v4) {
    return v6 & 0xFFFFFFFFFFFFLL;
  }
  return result;
}

BOOL static PPM_0_2_1.PINEConfig.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_10002E0D4(a1, a2, a3, a4 & 0xFFFFFFFFFFFFLL, a5, a6, a7, a8 & 0xFFFFFFFFFFFFLL);
}

uint64_t sub_10002B438(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10002FE48(a1, *(void *)v4, *(void *)(v4 + 8), *(void *)(v4 + 16), *(unsigned int *)(v4 + 24) | ((unint64_t)*(unsigned __int16 *)(v4 + 28) << 32), a3, a4);
}

uint64_t sub_10002B46C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t result = sub_100030A6C(a1, a2, a3);
  if (!v4)
  {
    *(void *)a4 = result;
    *(void *)(a4 + 8) = v7;
    *(void *)(a4 + 16) = v8;
    *(_DWORD *)(a4 + 24) = v9;
    *(_WORD *)(a4 + 28) = WORD2(v9);
  }
  return result;
}

BOOL sub_10002B4CC(uint64_t a1, uint64_t a2)
{
  return sub_10002E0D4(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(unsigned int *)(a1 + 24) | ((unint64_t)*(unsigned __int16 *)(a1 + 28) << 32), *(void *)a2, *(void *)(a2 + 8), *(void *)(a2 + 16), *(unsigned int *)(a2 + 24) | ((unint64_t)*(unsigned __int16 *)(a2 + 28) << 32));
}

uint64_t PPM_0_2_1.VDAFConfig.VDAFTypeSelector.prio3_sum_vecProp.getter()
{
  return *(void *)(v0 + 4);
}

uint64_t PPM_0_2_1.VDAFConfig.VDAFTypeSelector.prio3_histogramProp.getter()
{
  return *(void *)(v0 + 20);
}

uint64_t PPM_0_2_1.VDAFConfig.VDAFTypeSelector.poplar1Prop.getter()
{
  return *(unsigned __int16 *)(v0 + 30) | (*(unsigned __int8 *)(v0 + 32) << 16);
}

unint64_t PPM_0_2_1.VDAFConfig.VDAFTypeSelector.prio2Prop.getter()
{
  return *(unsigned int *)(v0 + 36) | ((unint64_t)*(unsigned __int8 *)(v0 + 40) << 32);
}

unint64_t PPM_0_2_1.VDAFConfig.VDAFTypeSelector.prio_plusplusProp.getter()
{
  return *(unsigned int *)(v0 + 44) | ((unint64_t)*(unsigned __int8 *)(v0 + 48) << 32);
}

__n128 PPM_0_2_1.VDAFConfig.VDAFTypeSelector.prio_pirapporProp.getter@<Q0>(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 136);
  long long v3 = *(_OWORD *)(v1 + 72);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 56);
  *(_OWORD *)(a1 + 16) = v3;
  long long v4 = *(_OWORD *)(v1 + 104);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v1 + 88);
  *(_OWORD *)(a1 + 48) = v4;
  __n128 result = *(__n128 *)(v1 + 120);
  *(__n128 *)(a1 + 64) = result;
  *(unsigned char *)(a1 + 80) = v2;
  return result;
}

uint64_t PPM_0_2_1.VDAFConfig.VDAFTypeSelector.prio3_sum_vec_field64_multiproof_cmac_aes128Prop.getter()
{
  return *(void *)(v0 + 140);
}

uint64_t PPM_0_2_1.VDAFConfig.VDAFTypeSelector.prio3_sum_vec_field64_multiproof_hmac_sha256_aes128Prop.getter()
{
  return *(void *)(v0 + 156);
}

uint64_t PPM_0_2_1.VDAFConfig.VDAFTypeSelector.pine_field64_hmac_sha256_aes128Prop.getter()
{
  return *(void *)(v0 + 176);
}

uint64_t PPM_0_2_1.VDAFConfig.VDAFTypeSelector.pine_field32_hmac_sha256_aes128Prop.getter()
{
  return *(void *)(v0 + 208);
}

uint64_t PPM_0_2_1.VDAFConfig.VDAFTypeSelector.pine_field40_hmac_sha256_aes128Prop.getter()
{
  return *(void *)(v0 + 240);
}

uint64_t PPM_0_2_1.VDAFConfig.VDAFTypeSelector.CodingParameter.prio3_sum_vecParameter.getter(uint64_t a1, char a2)
{
  return a2 & 1;
}

uint64_t PPM_0_2_1.VDAFConfig.VDAFTypeSelector.CodingParameter.prio3_histogramParameter.getter(uint64_t a1, unsigned int a2)
{
  return (a2 >> 8) & 1;
}

uint64_t PPM_0_2_1.VDAFConfig.VDAFTypeSelector.CodingParameter.prio_pirapporParameter.getter(uint64_t a1, unint64_t a2)
{
  return (a2 >> 16) | ((HIWORD(a2) & 1) << 32);
}

uint64_t PPM_0_2_1.VDAFConfig.VDAFTypeSelector.CodingParameter.prio3_sum_vec_field64_multiproof_cmac_aes128Parameter.getter(uint64_t a1, unint64_t a2)
{
  return HIBYTE(a2) & 1;
}

uint64_t PPM_0_2_1.VDAFConfig.VDAFTypeSelector.CodingParameter.prio3_sum_vec_field64_multiproof_hmac_sha256_aes128Parameter.getter(uint64_t a1, uint64_t a2, char a3)
{
  return a3 & 1;
}

uint64_t PPM_0_2_1.VDAFConfig.VDAFTypeSelector.CodingParameter.pine_field64_hmac_sha256_aes128Parameter.getter(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return (a3 >> 8) & 1;
}

uint64_t PPM_0_2_1.VDAFConfig.VDAFTypeSelector.CodingParameter.pine_field32_hmac_sha256_aes128Parameter.getter(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return HIWORD(a3) & 1;
}

uint64_t PPM_0_2_1.VDAFConfig.VDAFTypeSelector.CodingParameter.pine_field40_hmac_sha256_aes128Parameter.getter(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return HIBYTE(a3) & 1;
}

unint64_t PPM_0_2_1.VDAFConfig.VDAFTypeSelector.CodingParameter.init(vdafType:prio3_sum_vecParameter:prio3_histogramParameter:prio_pirapporParameter:prio3_sum_vec_field64_multiproof_cmac_aes128Parameter:prio3_sum_vec_field64_multiproof_hmac_sha256_aes128Parameter:pine_field64_hmac_sha256_aes128Parameter:pine_field32_hmac_sha256_aes128Parameter:pine_field40_hmac_sha256_aes128Parameter:)(uint64_t a1)
{
  return a1 & 0xFFFFFFFF000000FFLL;
}

uint64_t PPM_0_2_1.VDAFConfig.VDAFTypeSelector.encodedLength(with:)(char a1)
{
  if (a1 == 13)
  {
    sub_10001FA84();
    swift_allocError();
    *(void *)uint64_t v3 = 0xD000000000000034;
    *(void *)(v3 + 8) = 0x8000000100062140;
    char v4 = 1;
  }
  else
  {
    switch(a1)
    {
      case 0:
        sub_10001FBE4((uint64_t)v1, (uint64_t)&v25, &qword_100080B80);
        sub_10001FBE4((uint64_t)&v25, (uint64_t)&v53, &qword_100080B80);
        if (v53 == 1)
        {
          sub_10001FA84();
          swift_allocError();
          unint64_t v5 = 0xD000000000000027;
          goto LABEL_31;
        }
        return 0;
      case 1:
        uint64_t v7 = (uint64_t)v1 + 1;
        uint64_t v1 = &qword_100080BD8;
        sub_10001FBE4(v7, (uint64_t)v26, &qword_100080BD8);
        sub_10001FBE4((uint64_t)v26, (uint64_t)v52, &qword_100080BD8);
        if (v52[1] == 1)
        {
          sub_10001FA84();
          swift_allocError();
          unint64_t v5 = 0xD000000000000025;
          goto LABEL_31;
        }
        return 1;
      case 2:
        uint64_t v8 = (uint64_t)v1 + 4;
        uint64_t v1 = &qword_100080BD0;
        sub_10001FBE4(v8, (uint64_t)v27, &qword_100080BD0);
        sub_10001FBE4((uint64_t)v27, (uint64_t)v51, &qword_100080BD0);
        if (v51[12] == 1)
        {
          sub_10001FA84();
          swift_allocError();
          unint64_t v5 = 0xD000000000000029;
          goto LABEL_31;
        }
        return 9;
      case 3:
        uint64_t v9 = (uint64_t)v1 + 20;
        uint64_t v1 = &qword_100080BC8;
        sub_10001FBE4(v9, (uint64_t)v28, &qword_100080BC8);
        sub_10001FBE4((uint64_t)v28, (uint64_t)v50, &qword_100080BC8);
        if (v50[8] == 1)
        {
          sub_10001FA84();
          swift_allocError();
          unint64_t v5 = 0xD00000000000002BLL;
          goto LABEL_31;
        }
        return 8;
      case 4:
        uint64_t v10 = (uint64_t)v1 + 30;
        uint64_t v1 = &qword_100080BC0;
        sub_10001FBE4(v10, (uint64_t)v29, &qword_100080BC0);
        sub_10001FBE4((uint64_t)v29, (uint64_t)v49, &qword_100080BC0);
        if (v49[2] == 1)
        {
          sub_10001FA84();
          swift_allocError();
          unint64_t v5 = 0xD000000000000023;
          goto LABEL_31;
        }
        return 2;
      case 5:
        sub_10001FBE4((uint64_t)v1 + 36, (uint64_t)v30, &qword_100080BB8);
        sub_10001FBE4((uint64_t)v30, (uint64_t)v48, &qword_100080BB8);
        uint64_t v1 = (uint64_t *)4;
        if (v48[4] == 1)
        {
          sub_10001FA84();
          swift_allocError();
          *(void *)uint64_t v11 = 0xD000000000000021;
          *(void *)(v11 + 8) = 0x8000000100062670;
          *(unsigned char *)(v11 + 16) = 4;
          goto LABEL_34;
        }
        return (uint64_t)v1;
      case 6:
        sub_10001FBE4((uint64_t)v1 + 44, (uint64_t)v31, &qword_100080BB8);
        sub_10001FBE4((uint64_t)v31, (uint64_t)v47, &qword_100080BB8);
        uint64_t v1 = (uint64_t *)4;
        if (v47[4] == 1)
        {
          sub_10001FA84();
          swift_allocError();
          *(void *)uint64_t v12 = 0xD000000000000029;
          *(void *)(v12 + 8) = 0x8000000100062640;
          *(unsigned char *)(v12 + 16) = 4;
          goto LABEL_34;
        }
        return (uint64_t)v1;
      case 7:
        uint64_t v13 = (uint64_t)(v1 + 7);
        uint64_t v1 = &qword_100080BB0;
        sub_10001FBE4(v13, (uint64_t)v32, &qword_100080BB0);
        uint64_t v14 = sub_10001FBE4((uint64_t)v32, (uint64_t)v45, &qword_100080BB0);
        if (BYTE8(v45[0]) == 4)
        {
          sub_10001FA84();
          swift_allocError();
          unint64_t v5 = 0xD000000000000029;
          goto LABEL_31;
        }
        v38[2] = v45[2];
        v38[3] = v45[3];
        v38[4] = v45[4];
        char v39 = v46;
        v38[0] = v45[0];
        v38[1] = v45[1];
        uint64_t v1 = (uint64_t *)v38;
        uint64_t v24 = sub_10002FD20(v14, v15, v16, v17);
        if (!v2) {
          return v24;
        }
        return (uint64_t)v1;
      case 8:
        uint64_t v18 = (uint64_t)v1 + 140;
        uint64_t v1 = &qword_100080BA8;
        sub_10001FBE4(v18, (uint64_t)v33, &qword_100080BA8);
        sub_10001FBE4((uint64_t)v33, (uint64_t)v44, &qword_100080BA8);
        if (v44[13] != 1) {
          return 10;
        }
        sub_10001FA84();
        swift_allocError();
        unint64_t v5 = 0xD000000000000048;
        goto LABEL_31;
      case 9:
        uint64_t v19 = (uint64_t)v1 + 156;
        uint64_t v1 = &qword_100080BA8;
        sub_10001FBE4(v19, (uint64_t)v34, &qword_100080BA8);
        sub_10001FBE4((uint64_t)v34, (uint64_t)v43, &qword_100080BA8);
        if (v43[13] == 1)
        {
          sub_10001FA84();
          swift_allocError();
          unint64_t v5 = 0xD00000000000004FLL;
          goto LABEL_31;
        }
        return 10;
      case 10:
        uint64_t v20 = (uint64_t)(v1 + 22);
        uint64_t v1 = &qword_100080BA0;
        sub_10001FBE4(v20, (uint64_t)v35, &qword_100080BA0);
        sub_10001FBE4((uint64_t)v35, (uint64_t)v42, &qword_100080BA0);
        if (v42[30] != 1) {
          return 30;
        }
        sub_10001FA84();
        swift_allocError();
        unint64_t v5 = 0xD00000000000003BLL;
        goto LABEL_31;
      case 11:
        uint64_t v21 = (uint64_t)(v1 + 26);
        uint64_t v1 = &qword_100080BA0;
        sub_10001FBE4(v21, (uint64_t)v36, &qword_100080BA0);
        sub_10001FBE4((uint64_t)v36, (uint64_t)v41, &qword_100080BA0);
        if (v41[30] != 1) {
          return 30;
        }
        sub_10001FA84();
        swift_allocError();
        unint64_t v5 = 0xD00000000000003BLL;
        goto LABEL_31;
      case 12:
        uint64_t v22 = (uint64_t)(v1 + 30);
        uint64_t v1 = &qword_100080BA0;
        sub_10001FBE4(v22, (uint64_t)v37, &qword_100080BA0);
        sub_10001FBE4((uint64_t)v37, (uint64_t)v40, &qword_100080BA0);
        if (v40[30] != 1) {
          return 30;
        }
        sub_10001FA84();
        swift_allocError();
        unint64_t v5 = 0xD00000000000003BLL;
LABEL_31:
        *(void *)uint64_t v3 = v5;
        *(void *)(v3 + 8) = (unint64_t)(v6 - 32) | 0x8000000000000000;
LABEL_32:
        char v4 = 4;
        break;
      default:
        sub_100059370(31);
        v54._countAndFlagsBits = 0xD00000000000001BLL;
        v54._object = (void *)0x8000000100062180;
        sub_1000591F0(v54);
        sub_100059380();
        v55._countAndFlagsBits = 11872;
        v55._object = (void *)0xE200000000000000;
        sub_1000591F0(v55);
        uint64_t v1 = 0;
        sub_10001FA84();
        swift_allocError();
        *(void *)uint64_t v3 = 0;
        *(void *)(v3 + 8) = 0xE000000000000000;
        goto LABEL_32;
    }
  }
  *(unsigned char *)(v3 + 16) = v4;
LABEL_34:
  swift_willThrow();
  return (uint64_t)v1;
}

uint64_t PPM_0_2_1.VDAFConfig.VDAFTypeSelector.encode<A>(into:with:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a2 == 13)
  {
    sub_10001FA84();
    swift_allocError();
    *(void *)uint64_t v7 = 0xD000000000000034;
    *(void *)(v7 + 8) = 0x8000000100062140;
    char v8 = 1;
LABEL_33:
    *(unsigned char *)(v7 + 16) = v8;
    return swift_willThrow();
  }
  else
  {
    switch(a2)
    {
      case 0:
        sub_10001FBE4(v6, (uint64_t)&v26, &qword_100080B80);
        sub_10001FBE4((uint64_t)&v26, (uint64_t)&v79, &qword_100080B80);
        if (v79)
        {
          sub_10001FA84();
          swift_allocError();
          unint64_t v12 = 0xD000000000000027;
          goto LABEL_31;
        }
        return sub_10003A974(a1, a5, a6);
      case 1:
        sub_10001FBE4(v6 + 1, (uint64_t)v27, &qword_100080BD8);
        sub_10001FBE4((uint64_t)v27, (uint64_t)v78, &qword_100080BD8);
        if (v78[1])
        {
          sub_10001FA84();
          swift_allocError();
          unint64_t v12 = 0xD000000000000025;
          goto LABEL_31;
        }
        unint64_t v15 = sub_100022CA4();
        uint64_t v16 = &type metadata for UInt8;
        return sub_1000223EC(a1, (uint64_t)v16, a5, v15, a6);
      case 2:
        sub_10001FBE4(v6 + 4, (uint64_t)v28, &qword_100080BD0);
        sub_10001FBE4((uint64_t)v28, (uint64_t)&v74, &qword_100080BD0);
        if (v77)
        {
          sub_10001FA84();
          swift_allocError();
          unint64_t v12 = 0xD000000000000029;
          goto LABEL_31;
        }
        return sub_1000301A4(a1, v74 | ((unint64_t)v75 << 32), v76, a5, a6);
      case 3:
        sub_10001FBE4(v6 + 20, (uint64_t)v29, &qword_100080BC8);
        sub_10001FBE4((uint64_t)v29, (uint64_t)&v72, &qword_100080BC8);
        if (v73)
        {
          sub_10001FA84();
          swift_allocError();
          unint64_t v12 = 0xD00000000000002BLL;
          goto LABEL_31;
        }
        return sub_100030298(a1, v72, a5, a6);
      case 4:
        sub_10001FBE4(v6 + 30, (uint64_t)v30, &qword_100080BC0);
        sub_10001FBE4((uint64_t)v30, (uint64_t)v71, &qword_100080BC0);
        if (v71[2])
        {
          sub_10001FA84();
          swift_allocError();
          unint64_t v12 = 0xD000000000000023;
          goto LABEL_31;
        }
        unint64_t v15 = sub_100022C50();
        uint64_t v16 = &type metadata for UInt16;
        return sub_1000223EC(a1, (uint64_t)v16, a5, v15, a6);
      case 5:
        sub_10001FBE4(v6 + 36, (uint64_t)v31, &qword_100080BB8);
        sub_10001FBE4((uint64_t)v31, (uint64_t)v70, &qword_100080BB8);
        if ((v70[4] & 1) == 0) {
          goto LABEL_39;
        }
        sub_10001FA84();
        swift_allocError();
        unint64_t v12 = 0xD000000000000021;
        goto LABEL_31;
      case 6:
        sub_10001FBE4(v6 + 44, (uint64_t)v32, &qword_100080BB8);
        sub_10001FBE4((uint64_t)v32, (uint64_t)v69, &qword_100080BB8);
        if (v69[4])
        {
          sub_10001FA84();
          swift_allocError();
          unint64_t v12 = 0xD000000000000029;
          goto LABEL_31;
        }
LABEL_39:
        unint64_t v15 = sub_100022BFC();
        uint64_t v16 = &type metadata for UInt32;
        return sub_1000223EC(a1, (uint64_t)v16, a5, v15, a6);
      case 7:
        sub_10001FBE4(v6 + 56, (uint64_t)v33, &qword_100080BB0);
        sub_10001FBE4((uint64_t)v33, (uint64_t)v67, &qword_100080BB0);
        if (BYTE8(v67[0]) == 4)
        {
          sub_10001FA84();
          swift_allocError();
          unint64_t v12 = 0xD000000000000029;
          goto LABEL_31;
        }
        long long v41 = v67[2];
        long long v42 = v67[3];
        long long v43 = v67[4];
        char v44 = v68;
        long long v39 = v67[0];
        long long v40 = v67[1];
        return sub_10003033C(a1, a5, a6);
      case 8:
        sub_10001FBE4(v6 + 140, (uint64_t)v34, &qword_100080BA8);
        sub_10001FBE4((uint64_t)v34, (uint64_t)&v62, &qword_100080BA8);
        if (v66)
        {
          sub_10001FA84();
          swift_allocError();
          unint64_t v12 = 0xD000000000000048;
          goto LABEL_31;
        }
        uint64_t v17 = v62;
        uint64_t v18 = v63;
        uint64_t v19 = v64;
        uint64_t v20 = v65;
        return sub_10003043C(a1, v17 | (v18 << 32), v19 | (v20 << 32), a5, a6);
      case 9:
        sub_10001FBE4(v6 + 156, (uint64_t)v35, &qword_100080BA8);
        sub_10001FBE4((uint64_t)v35, (uint64_t)&v57, &qword_100080BA8);
        if (v61)
        {
          sub_10001FA84();
          swift_allocError();
          unint64_t v12 = 0xD00000000000004FLL;
          goto LABEL_31;
        }
        uint64_t v17 = v57;
        uint64_t v18 = v58;
        uint64_t v19 = v59;
        uint64_t v20 = v60;
        return sub_10003043C(a1, v17 | (v18 << 32), v19 | (v20 << 32), a5, a6);
      case 10:
        sub_10001FBE4(v6 + 176, (uint64_t)v36, &qword_100080BA0);
        sub_10001FBE4((uint64_t)v36, (uint64_t)v53, &qword_100080BA0);
        if (v56)
        {
          sub_10001FA84();
          swift_allocError();
          unint64_t v12 = 0xD00000000000003BLL;
          goto LABEL_31;
        }
        uint64_t v21 = v53[0];
        uint64_t v22 = v53[1];
        uint64_t v23 = v53[2];
        uint64_t v24 = v55;
        uint64_t v25 = v54;
        goto LABEL_48;
      case 11:
        sub_10001FBE4(v6 + 208, (uint64_t)v37, &qword_100080BA0);
        sub_10001FBE4((uint64_t)v37, (uint64_t)v49, &qword_100080BA0);
        if (v52)
        {
          sub_10001FA84();
          swift_allocError();
          unint64_t v12 = 0xD00000000000003BLL;
          goto LABEL_31;
        }
        uint64_t v21 = v49[0];
        uint64_t v22 = v49[1];
        uint64_t v23 = v49[2];
        uint64_t v24 = v51;
        uint64_t v25 = v50;
        goto LABEL_48;
      case 12:
        sub_10001FBE4(v6 + 240, (uint64_t)v38, &qword_100080BA0);
        sub_10001FBE4((uint64_t)v38, (uint64_t)v45, &qword_100080BA0);
        if (v48)
        {
          sub_10001FA84();
          swift_allocError();
          unint64_t v12 = 0xD00000000000003BLL;
LABEL_31:
          *(void *)uint64_t v7 = v12;
          *(void *)(v7 + 8) = (unint64_t)(v13 - 32) | 0x8000000000000000;
LABEL_32:
          char v8 = 4;
          goto LABEL_33;
        }
        uint64_t v21 = v45[0];
        uint64_t v22 = v45[1];
        uint64_t v23 = v45[2];
        uint64_t v24 = v47;
        uint64_t v25 = v46;
LABEL_48:
        uint64_t result = sub_10002FE48(a1, v21, v22, v23, v25 | (v24 << 32), a5, a6);
        break;
      default:
        sub_100059370(31);
        v80._countAndFlagsBits = 0xD00000000000001BLL;
        v80._object = (void *)0x8000000100062180;
        sub_1000591F0(v80);
        sub_100059380();
        v81._countAndFlagsBits = 11872;
        v81._object = (void *)0xE200000000000000;
        sub_1000591F0(v81);
        sub_10001FA84();
        swift_allocError();
        *(void *)uint64_t v7 = 0;
        *(void *)(v7 + 8) = 0xE000000000000000;
        goto LABEL_32;
    }
  }
  return result;
}

uint64_t PPM_0_2_1.VDAFConfig.VDAFTypeSelector.init<A>(from:with:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, unint64_t a3@<X2>, uint64_t a4@<X4>, unint64_t a5@<X5>, uint64_t a6@<X8>)
{
  if (a2 == 13)
  {
    sub_10001FA84();
    swift_allocError();
    *(void *)uint64_t v7 = 0xD000000000000034;
    *(void *)(v7 + 8) = 0x8000000100062140;
    char v8 = 1;
LABEL_3:
    *(unsigned char *)(v7 + 16) = v8;
    return swift_willThrow();
  }
  else
  {
    switch(a2)
    {
      case 0:
        uint64_t result = PPM_0_2_1.QueryType.enumValue.getter(a1, a4, a5);
        if (v6) {
          return result;
        }
        char v13 = 0;
        int v108 = 0;
        uint64_t v73 = 0;
        uint64_t v69 = 0;
        unsigned int v107 = 0;
        int v70 = 0;
        uint64_t v71 = 0;
        uint64_t v58 = 0;
        uint64_t v59 = 0;
        unint64_t v65 = 0;
        unint64_t v66 = 0;
        uint64_t v60 = 0;
        unint64_t v61 = 0;
        uint64_t v72 = 0;
        uint64_t v14 = 0;
        uint64_t v63 = 0;
        uint64_t v64 = 0;
        char v15 = 0;
        uint64_t v67 = 0;
        uint64_t v68 = 0;
        uint64_t v16 = 0;
        uint64_t v17 = 0;
        uint64_t v62 = 0;
        uint64_t v18 = 0;
        uint64_t v19 = 0;
        uint64_t v20 = 0;
        uint64_t v21 = 0;
        uint64_t v22 = 0;
        uint64_t v23 = 0;
        uint64_t v24 = 0;
        uint64_t v25 = 0;
        uint64_t v26 = 0;
        uint64_t v27 = 0;
        LOBYTE(v78) = 0;
        char v28 = 1;
        char v29 = 1;
        char v30 = 1;
        char v31 = 1;
        char v32 = 1;
        char v33 = 1;
        unint64_t v34 = 4;
        goto LABEL_34;
      case 1:
        unint64_t v35 = sub_100022CA4();
        char v13 = 1;
        uint64_t result = CommonUIntTLSNumberType.init<A>(from:with:)((uint64_t)&type metadata for UInt8, a4, v35, a5, (uint64_t)&v78);
        if (v6) {
          return result;
        }
        char v28 = 0;
        uint64_t v73 = 0;
        uint64_t v69 = 0;
        unsigned int v107 = 0;
        int v70 = 0;
        uint64_t v71 = 0;
        uint64_t v58 = 0;
        uint64_t v59 = 0;
        unint64_t v65 = 0;
        unint64_t v66 = 0;
        uint64_t v60 = 0;
        unint64_t v61 = 0;
        uint64_t v72 = 0;
        uint64_t v14 = 0;
        uint64_t v63 = 0;
        uint64_t v64 = 0;
        char v15 = 0;
        uint64_t v67 = 0;
        uint64_t v68 = 0;
        uint64_t v16 = 0;
        uint64_t v17 = 0;
        uint64_t v62 = 0;
        uint64_t v18 = 0;
        uint64_t v19 = 0;
        uint64_t v20 = 0;
        uint64_t v21 = 0;
        uint64_t v22 = 0;
        uint64_t v23 = 0;
        uint64_t v24 = 0;
        uint64_t v25 = 0;
        uint64_t v26 = 0;
        uint64_t v27 = 0;
        int v108 = v78;
        char v36 = 1;
        char v29 = 1;
        char v30 = 1;
        char v31 = 1;
        unint64_t v34 = 4;
        goto LABEL_20;
      case 2:
        uint64_t result = sub_100030D14(a1, a4, a5);
        if (v6) {
          return result;
        }
        uint64_t v38 = result;
        int v108 = 0;
        char v39 = 0;
        uint64_t v69 = 0;
        unsigned int v107 = 0;
        int v70 = 0;
        LODWORD(v71) = 0;
        uint64_t v58 = 0;
        uint64_t v59 = 0;
        unint64_t v65 = 0;
        unint64_t v66 = 0;
        uint64_t v60 = 0;
        unint64_t v61 = 0;
        uint64_t v72 = 0;
        uint64_t v14 = 0;
        uint64_t v63 = 0;
        uint64_t v64 = 0;
        char v15 = 0;
        uint64_t v67 = 0;
        uint64_t v68 = 0;
        uint64_t v16 = 0;
        uint64_t v17 = 0;
        uint64_t v62 = 0;
        uint64_t v18 = 0;
        uint64_t v19 = 0;
        uint64_t v20 = 0;
        uint64_t v21 = 0;
        uint64_t v22 = 0;
        uint64_t v23 = 0;
        uint64_t v24 = 0;
        uint64_t v25 = 0;
        uint64_t v26 = 0;
        uint64_t v27 = 0;
        char v13 = 1;
        LOBYTE(v78) = 1;
        uint64_t v73 = v38 & 0xFFFFFFFFFFLL;
        char v29 = 1;
        char v30 = 1;
        char v31 = 1;
        char v32 = 1;
        HIDWORD(v71) = v37;
        char v33 = 1;
        unint64_t v34 = 4;
        char v28 = 1;
        goto LABEL_42;
      case 3:
        uint64_t result = sub_100030E20(a1, a4, a5);
        if (v6) {
          return result;
        }
        int v108 = 0;
        uint64_t v73 = 0;
        char v40 = 0;
        unsigned int v107 = 0;
        int v70 = 0;
        uint64_t v71 = 0;
        uint64_t v58 = 0;
        uint64_t v59 = 0;
        unint64_t v65 = 0;
        unint64_t v66 = 0;
        uint64_t v60 = 0;
        unint64_t v61 = 0;
        uint64_t v72 = 0;
        uint64_t v14 = 0;
        uint64_t v63 = 0;
        uint64_t v64 = 0;
        char v15 = 0;
        uint64_t v67 = 0;
        uint64_t v68 = 0;
        uint64_t v16 = 0;
        uint64_t v17 = 0;
        uint64_t v62 = 0;
        uint64_t v18 = 0;
        uint64_t v19 = 0;
        uint64_t v20 = 0;
        uint64_t v21 = 0;
        uint64_t v22 = 0;
        uint64_t v23 = 0;
        uint64_t v24 = 0;
        uint64_t v25 = 0;
        uint64_t v26 = 0;
        uint64_t v27 = 0;
        char v13 = 1;
        LOBYTE(v78) = 1;
        char v29 = 1;
        char v30 = 1;
        char v31 = 1;
        char v32 = 1;
        char v33 = 1;
        unint64_t v34 = 4;
        char v28 = 1;
        uint64_t v69 = result;
        char v39 = 1;
        goto LABEL_43;
      case 4:
        unint64_t v41 = sub_100022C50();
        char v13 = 1;
        uint64_t result = CommonUIntTLSNumberType.init<A>(from:with:)((uint64_t)&type metadata for UInt16, a4, v41, a5, (uint64_t)&v78);
        if (v6) {
          return result;
        }
        int v108 = 0;
        uint64_t v72 = 0;
        uint64_t v73 = 0;
        uint64_t v71 = 0;
        uint64_t v68 = 0;
        uint64_t v69 = 0;
        char v42 = 0;
        int v70 = 0;
        uint64_t v58 = 0;
        uint64_t v59 = 0;
        unint64_t v65 = 0;
        unint64_t v66 = 0;
        uint64_t v60 = 0;
        unint64_t v61 = 0;
        uint64_t v14 = 0;
        uint64_t v63 = 0;
        uint64_t v64 = 0;
        char v15 = 0;
        uint64_t v16 = 0;
        uint64_t v67 = 0;
        uint64_t v17 = 0;
        uint64_t v62 = 0;
        uint64_t v18 = 0;
        uint64_t v19 = 0;
        uint64_t v20 = 0;
        uint64_t v21 = 0;
        uint64_t v22 = 0;
        uint64_t v23 = 0;
        uint64_t v24 = 0;
        uint64_t v25 = 0;
        uint64_t v26 = 0;
        uint64_t v27 = 0;
        unsigned int v107 = (unsigned __int16)v78;
        char v36 = 1;
        char v29 = 1;
        char v30 = 1;
        char v31 = 1;
        unint64_t v34 = 4;
        char v28 = 1;
        char v32 = 1;
        char v39 = 1;
        char v40 = 1;
        goto LABEL_21;
      case 5:
        unint64_t v43 = sub_100022BFC();
        char v13 = 1;
        uint64_t result = CommonUIntTLSNumberType.init<A>(from:with:)((uint64_t)&type metadata for UInt32, a4, v43, a5, (uint64_t)&v78);
        if (v6) {
          return result;
        }
        int v108 = 0;
        uint64_t v73 = 0;
        uint64_t v69 = 0;
        unsigned int v107 = 0;
        char v44 = 0;
        int v70 = 0;
        uint64_t v58 = 0;
        uint64_t v59 = 0;
        unint64_t v65 = 0;
        unint64_t v66 = 0;
        uint64_t v60 = 0;
        unint64_t v61 = 0;
        uint64_t v72 = 0;
        uint64_t v14 = 0;
        uint64_t v63 = 0;
        uint64_t v64 = 0;
        char v15 = 0;
        uint64_t v67 = 0;
        uint64_t v68 = 0;
        uint64_t v16 = 0;
        uint64_t v17 = 0;
        uint64_t v62 = 0;
        uint64_t v18 = 0;
        uint64_t v19 = 0;
        uint64_t v20 = 0;
        uint64_t v21 = 0;
        uint64_t v22 = 0;
        uint64_t v23 = 0;
        uint64_t v24 = 0;
        uint64_t v25 = 0;
        uint64_t v26 = 0;
        uint64_t v27 = 0;
        uint64_t v71 = v78;
        char v36 = 1;
        char v29 = 1;
        char v30 = 1;
        char v31 = 1;
        unint64_t v34 = 4;
        char v28 = 1;
        char v32 = 1;
        char v39 = 1;
        char v40 = 1;
        char v33 = 1;
        char v42 = 1;
        goto LABEL_44;
      case 6:
        unint64_t v45 = sub_100022BFC();
        char v13 = 1;
        uint64_t result = CommonUIntTLSNumberType.init<A>(from:with:)((uint64_t)&type metadata for UInt32, a4, v45, a5, (uint64_t)&v78);
        if (v6) {
          return result;
        }
        int v108 = 0;
        uint64_t v73 = 0;
        uint64_t v69 = 0;
        unsigned int v107 = 0;
        uint64_t v71 = 0;
        uint64_t v58 = 0;
        uint64_t v59 = 0;
        unint64_t v65 = 0;
        unint64_t v66 = 0;
        uint64_t v60 = 0;
        unint64_t v61 = 0;
        uint64_t v72 = 0;
        uint64_t v14 = 0;
        uint64_t v63 = 0;
        uint64_t v64 = 0;
        char v15 = 0;
        uint64_t v67 = 0;
        uint64_t v68 = 0;
        uint64_t v16 = 0;
        uint64_t v17 = 0;
        uint64_t v62 = 0;
        uint64_t v18 = 0;
        uint64_t v19 = 0;
        uint64_t v20 = 0;
        uint64_t v21 = 0;
        uint64_t v22 = 0;
        uint64_t v23 = 0;
        uint64_t v24 = 0;
        uint64_t v25 = 0;
        uint64_t v26 = 0;
        uint64_t v27 = 0;
        int v70 = v78;
        char v36 = 0;
        char v29 = 1;
        char v30 = 1;
        unint64_t v34 = 4;
        char v31 = 1;
        char v28 = 1;
LABEL_20:
        char v39 = 1;
        char v32 = 1;
        char v40 = 1;
        char v42 = 1;
LABEL_21:
        char v33 = 1;
        char v44 = 1;
        goto LABEL_44;
      case 7:
        uint64_t result = PPM_0_2_1.PrioPiRapporConfig.init<A>(from:with:)(a1, (a3 >> 16) | ((HIWORD(a3) & 1) << 32), a4, a5, (uint64_t)&v90);
        if (v6) {
          return result;
        }
        int v108 = 0;
        uint64_t v73 = 0;
        uint64_t v69 = 0;
        unsigned int v107 = 0;
        int v70 = 0;
        uint64_t v71 = 0;
        uint64_t v67 = 0;
        uint64_t v68 = 0;
        uint64_t v16 = 0;
        uint64_t v17 = 0;
        uint64_t v64 = 0;
        uint64_t v62 = 0;
        uint64_t v18 = 0;
        uint64_t v19 = 0;
        uint64_t v20 = 0;
        uint64_t v21 = 0;
        uint64_t v22 = 0;
        uint64_t v23 = 0;
        uint64_t v24 = 0;
        uint64_t v25 = 0;
        uint64_t v26 = 0;
        uint64_t v27 = 0;
        uint64_t v72 = v97;
        uint64_t v46 = 0x10000;
        if (v94) {
          uint64_t v47 = 0x10000;
        }
        else {
          uint64_t v47 = 0;
        }
        uint64_t v48 = v47 | v93;
        uint64_t v63 = v105;
        if (!v102) {
          uint64_t v46 = 0;
        }
        unint64_t v34 = v91 | ((unint64_t)v92 << 32);
        unint64_t v66 = v48 | ((unint64_t)v95 << 32);
        unint64_t v65 = v99 | ((unint64_t)v100 << 32);
        char v13 = 1;
        LOBYTE(v78) = 1;
        unint64_t v61 = v46 | v101 | ((unint64_t)v103 << 32);
        char v28 = 1;
        char v39 = 1;
        uint64_t v58 = v90;
        char v40 = 1;
        char v42 = 1;
        uint64_t v60 = v96;
        char v44 = 1;
        char v36 = 1;
        uint64_t v59 = v98;
        char v29 = 1;
        char v30 = 1;
        uint64_t v14 = v104;
        char v31 = 1;
        char v32 = 1;
        char v33 = 1;
        char v15 = v106;
        goto LABEL_44;
      case 8:
        uint64_t result = sub_100030ED8(a1, a4, a5);
        if (v6) {
          return result;
        }
        uint64_t v16 = v49;
        int v108 = 0;
        uint64_t v73 = 0;
        uint64_t v69 = 0;
        unsigned int v107 = 0;
        int v70 = 0;
        uint64_t v71 = 0;
        uint64_t v58 = 0;
        uint64_t v59 = 0;
        unint64_t v65 = 0;
        unint64_t v66 = 0;
        uint64_t v60 = 0;
        unint64_t v61 = 0;
        uint64_t v72 = 0;
        uint64_t v14 = 0;
        uint64_t v63 = 0;
        uint64_t v64 = 0;
        char v15 = 0;
        uint64_t v67 = 0;
        uint64_t v17 = 0;
        uint64_t v62 = 0;
        uint64_t v18 = 0;
        uint64_t v19 = 0;
        uint64_t v20 = 0;
        uint64_t v21 = 0;
        uint64_t v22 = 0;
        uint64_t v23 = 0;
        uint64_t v24 = 0;
        uint64_t v25 = 0;
        uint64_t v26 = 0;
        uint64_t v27 = 0;
        char v13 = 1;
        LOBYTE(v78) = 1;
        char v77 = 0;
        char v76 = 1;
        uint64_t v68 = result & 0xFFFFFFFFFFLL;
        goto LABEL_33;
      case 9:
        uint64_t result = sub_100030ED8(a1, a4, a5);
        if (v6) {
          return result;
        }
        uint64_t v17 = v50;
        int v108 = 0;
        uint64_t v73 = 0;
        uint64_t v69 = 0;
        unsigned int v107 = 0;
        int v70 = 0;
        uint64_t v71 = 0;
        uint64_t v58 = 0;
        uint64_t v59 = 0;
        unint64_t v65 = 0;
        unint64_t v66 = 0;
        uint64_t v60 = 0;
        unint64_t v61 = 0;
        uint64_t v72 = 0;
        uint64_t v14 = 0;
        uint64_t v63 = 0;
        uint64_t v64 = 0;
        char v15 = 0;
        uint64_t v68 = 0;
        uint64_t v16 = 0;
        uint64_t v62 = 0;
        uint64_t v18 = 0;
        uint64_t v19 = 0;
        uint64_t v20 = 0;
        uint64_t v21 = 0;
        uint64_t v22 = 0;
        uint64_t v23 = 0;
        uint64_t v24 = 0;
        uint64_t v25 = 0;
        uint64_t v26 = 0;
        uint64_t v27 = 0;
        char v13 = 1;
        LOBYTE(v78) = 1;
        char v77 = 1;
        char v76 = 0;
        uint64_t v67 = result & 0xFFFFFFFFFFLL;
LABEL_33:
        char v29 = v77;
        char v30 = v76;
        char v31 = 1;
        char v32 = 1;
        char v33 = 1;
        unint64_t v34 = 4;
        char v28 = 1;
LABEL_34:
        char v39 = 1;
        goto LABEL_42;
      case 10:
        uint64_t result = sub_100030A6C(a1, a4, a5);
        if (v6) {
          return result;
        }
        int v108 = 0;
        uint64_t v73 = 0;
        uint64_t v69 = 0;
        unsigned int v107 = 0;
        int v70 = 0;
        uint64_t v71 = 0;
        uint64_t v58 = 0;
        uint64_t v59 = 0;
        unint64_t v65 = 0;
        unint64_t v66 = 0;
        uint64_t v60 = 0;
        unint64_t v61 = 0;
        uint64_t v72 = 0;
        uint64_t v14 = 0;
        uint64_t v63 = 0;
        char v15 = 0;
        uint64_t v67 = 0;
        uint64_t v68 = 0;
        uint64_t v16 = 0;
        uint64_t v17 = 0;
        uint64_t v20 = 0;
        uint64_t v21 = 0;
        uint64_t v22 = 0;
        uint64_t v23 = 0;
        uint64_t v24 = 0;
        uint64_t v25 = 0;
        uint64_t v26 = 0;
        uint64_t v27 = 0;
        char v13 = 1;
        LOBYTE(v78) = 1;
        char v29 = 1;
        char v30 = 1;
        char v31 = 0;
        unint64_t v34 = 4;
        char v32 = 1;
        char v28 = 1;
        uint64_t v64 = result;
        char v39 = 1;
        uint64_t v62 = v51;
        char v33 = 1;
        goto LABEL_42;
      case 11:
        uint64_t result = sub_100030A6C(a1, a4, a5);
        if (v6) {
          return result;
        }
        uint64_t v20 = result;
        uint64_t v21 = v52;
        uint64_t v22 = v53;
        uint64_t v23 = v54;
        int v108 = 0;
        uint64_t v73 = 0;
        uint64_t v69 = 0;
        unsigned int v107 = 0;
        int v70 = 0;
        uint64_t v71 = 0;
        uint64_t v58 = 0;
        uint64_t v59 = 0;
        unint64_t v65 = 0;
        unint64_t v66 = 0;
        uint64_t v60 = 0;
        unint64_t v61 = 0;
        uint64_t v72 = 0;
        uint64_t v14 = 0;
        uint64_t v63 = 0;
        uint64_t v64 = 0;
        char v15 = 0;
        uint64_t v67 = 0;
        uint64_t v68 = 0;
        uint64_t v16 = 0;
        uint64_t v17 = 0;
        uint64_t v62 = 0;
        uint64_t v18 = 0;
        uint64_t v19 = 0;
        uint64_t v24 = 0;
        uint64_t v25 = 0;
        uint64_t v26 = 0;
        uint64_t v27 = 0;
        char v13 = 1;
        LOBYTE(v78) = 1;
        char v75 = 0;
        char v74 = 1;
        goto LABEL_41;
      case 12:
        uint64_t result = sub_100030A6C(a1, a4, a5);
        if (v6) {
          return result;
        }
        uint64_t v24 = result;
        uint64_t v25 = v55;
        uint64_t v26 = v56;
        uint64_t v27 = v57;
        int v108 = 0;
        uint64_t v73 = 0;
        uint64_t v69 = 0;
        unsigned int v107 = 0;
        int v70 = 0;
        uint64_t v71 = 0;
        uint64_t v58 = 0;
        uint64_t v59 = 0;
        unint64_t v65 = 0;
        unint64_t v66 = 0;
        uint64_t v60 = 0;
        unint64_t v61 = 0;
        uint64_t v72 = 0;
        uint64_t v14 = 0;
        uint64_t v63 = 0;
        uint64_t v64 = 0;
        char v15 = 0;
        uint64_t v67 = 0;
        uint64_t v68 = 0;
        uint64_t v16 = 0;
        uint64_t v17 = 0;
        uint64_t v62 = 0;
        uint64_t v18 = 0;
        uint64_t v19 = 0;
        uint64_t v20 = 0;
        uint64_t v21 = 0;
        uint64_t v22 = 0;
        uint64_t v23 = 0;
        char v13 = 1;
        LOBYTE(v78) = 1;
        char v75 = 1;
        char v74 = 0;
LABEL_41:
        char v29 = 1;
        char v30 = 1;
        char v31 = 1;
        unint64_t v34 = 4;
        char v32 = v75;
        char v28 = 1;
        char v39 = 1;
        char v33 = v74;
LABEL_42:
        char v40 = 1;
LABEL_43:
        char v42 = 1;
        char v44 = 1;
        char v36 = 1;
LABEL_44:
        *(unsigned char *)a6 = v13;
        *(unsigned char *)(a6 + 1) = v108;
        *(unsigned char *)(a6 + 2) = v28;
        *(void *)(a6 + 4) = v73;
        *(_DWORD *)(a6 + 12) = HIDWORD(v71);
        *(unsigned char *)(a6 + 16) = v39;
        *(void *)(a6 + 20) = v69;
        *(unsigned char *)(a6 + 28) = v40;
        uint64_t result = v107;
        *(_WORD *)(a6 + 30) = v107;
        *(unsigned char *)(a6 + 32) = v42;
        *(_DWORD *)(a6 + 36) = v71;
        *(unsigned char *)(a6 + 40) = v44;
        *(_DWORD *)(a6 + 44) = v70;
        *(unsigned char *)(a6 + 48) = v36;
        *(void *)(a6 + 56) = v58;
        *(void *)(a6 + 64) = v34;
        *(_WORD *)(a6 + 17) = v88;
        *(unsigned char *)(a6 + 19) = v89;
        *(_WORD *)(a6 + 33) = v86;
        *(unsigned char *)(a6 + 35) = v87;
        *(_WORD *)(a6 + 41) = v84;
        *(unsigned char *)(a6 + 43) = v85;
        *(_DWORD *)(a6 + 49) = *(_DWORD *)v83;
        *(_DWORD *)(a6 + 52) = *(_DWORD *)&v83[3];
        *(void *)(a6 + 72) = v66;
        *(void *)(a6 + 80) = v60;
        *(void *)(a6 + 88) = v72;
        *(void *)(a6 + 96) = v59;
        *(void *)(a6 + 104) = v65;
        *(void *)(a6 + 112) = v61;
        *(void *)(a6 + 120) = v14;
        *(void *)(a6 + 128) = v63;
        *(unsigned char *)(a6 + 136) = v15;
        *(unsigned char *)(a6 + 139) = v82;
        *(_WORD *)(a6 + 137) = v81;
        *(void *)(a6 + 140) = v68;
        *(_DWORD *)(a6 + 148) = v16;
        *(unsigned char *)(a6 + 152) = BYTE4(v16);
        *(unsigned char *)(a6 + 153) = v29;
        *(void *)(a6 + 156) = v67;
        *(_DWORD *)(a6 + 164) = v17;
        *(unsigned char *)(a6 + 168) = BYTE4(v17);
        *(unsigned char *)(a6 + 169) = v30;
        *(_DWORD *)(a6 + 170) = v79;
        *(_WORD *)(a6 + 174) = v80;
        *(void *)(a6 + 176) = v64;
        *(void *)(a6 + 184) = v62;
        *(void *)(a6 + 192) = v18;
        *(_WORD *)(a6 + 204) = WORD2(v19);
        *(_DWORD *)(a6 + 200) = v19;
        *(unsigned char *)(a6 + 206) = v31;
        *(void *)(a6 + 208) = v20;
        *(void *)(a6 + 216) = v21;
        *(void *)(a6 + 224) = v22;
        *(_WORD *)(a6 + 236) = WORD2(v23);
        *(_DWORD *)(a6 + 232) = v23;
        *(unsigned char *)(a6 + 238) = v32;
        *(void *)(a6 + 240) = v24;
        *(void *)(a6 + 248) = v25;
        *(void *)(a6 + 256) = v26;
        *(_WORD *)(a6 + 268) = WORD2(v27);
        *(_DWORD *)(a6 + 264) = v27;
        *(unsigned char *)(a6 + 270) = v33;
        break;
      default:
        sub_100059370(31);
        v109._object = (void *)0x8000000100062180;
        v109._countAndFlagsBits = 0xD00000000000001BLL;
        sub_1000591F0(v109);
        sub_100059380();
        v110._countAndFlagsBits = 11872;
        v110._object = (void *)0xE200000000000000;
        sub_1000591F0(v110);
        sub_10001FA84();
        swift_allocError();
        *(void *)uint64_t v7 = 0;
        *(void *)(v7 + 8) = 0xE000000000000000;
        char v8 = 4;
        goto LABEL_3;
    }
  }
  return result;
}

uint64_t sub_10002D7B4(uint64_t *a1)
{
  uint64_t v2 = *a1;
  memcpy(v4, v1, sizeof(v4));
  return PPM_0_2_1.VDAFConfig.VDAFTypeSelector.encodedLength(with:)(v2);
}

uint64_t sub_10002D808(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *a2;
  memcpy(v12, v4, sizeof(v12));
  return PPM_0_2_1.VDAFConfig.VDAFTypeSelector.encode<A>(into:with:)(a1, v8, v9, v10, a3, a4);
}

void *sub_10002D884@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t result = (void *)PPM_0_2_1.VDAFConfig.VDAFTypeSelector.init<A>(from:with:)(a1, *a2, a2[1], a3, a4, (uint64_t)v8);
  if (!v5) {
    return memcpy(a5, v8, 0x10FuLL);
  }
  return result;
}

uint64_t sub_10002D8E8(void *__src, const void *a2)
{
  memcpy(v4, __src, 0x10FuLL);
  memcpy(__dst, a2, 0x10FuLL);
  return _s19DPSubmissionService9PPM_0_2_1V10VDAFConfigV16VDAFTypeSelectorV23__derived_struct_equalsySbAG_AGtFZ_0((uint64_t)v4, (uint64_t)__dst) & 1;
}

void *PPM_0_2_1.VDAFConfig.vdafTypeSelector.getter@<X0>(void *a1@<X8>)
{
  return memcpy(a1, (const void *)(v1 + 24), 0x10FuLL);
}

uint64_t PPM_0_2_1.VDAFConfig.CodingParameter.vdafTypeSelector_prio_pirapporParameter.getter(unint64_t a1)
{
  return (a1 >> 24) | ((HIBYTE(a1) & 1) << 32);
}

uint64_t PPM_0_2_1.VDAFConfig.CodingParameter.vdafTypeSelector_pine_field64_hmac_sha256_aes128Parameter.getter(uint64_t a1, unsigned int a2)
{
  return HIWORD(a2) & 1;
}

uint64_t PPM_0_2_1.VDAFConfig.CodingParameter.vdafTypeSelector_pine_field32_hmac_sha256_aes128Parameter.getter(uint64_t a1, unsigned int a2)
{
  return HIBYTE(a2) & 1;
}

uint64_t PPM_0_2_1.VDAFConfig.CodingParameter.vdafTypeSelector_pine_field40_hmac_sha256_aes128Parameter.getter(uint64_t a1, unint64_t a2)
{
  return HIDWORD(a2) & 1;
}

unint64_t PPM_0_2_1.VDAFConfig.CodingParameter.init(vdafTypeParameter:vdafTypeSelector_prio3_sum_vecParameter:vdafTypeSelector_prio3_histogramParameter:vdafTypeSelector_prio_pirapporParameter:vdafTypeSelector_prio3_sum_vec_field64_multiproof_cmac_aes128Parameter:vdafTypeSelector_prio3_sum_vec_field64_multiproof_hmac_sha256_aes128Parameter:vdafTypeSelector_pine_field64_hmac_sha256_aes128Parameter:vdafTypeSelector_pine_field32_hmac_sha256_aes128Parameter:vdafTypeSelector_pine_field40_hmac_sha256_aes128Parameter:)(char a1, char a2, char a3, unint64_t a4)
{
  return ((unint64_t)a4 << 24) | ((HIDWORD(a4) & 1) << 56) | ((unint64_t)(a3 & 1) << 16) | ((unint64_t)(a2 & 1) << 8) | a1 & 1;
}

uint64_t PPM_0_2_1.VDAFConfig.encodedLength(with:)()
{
  long long v14 = *(_OWORD *)v0;
  sub_1000251C8((uint64_t)&v14, (uint64_t)v15);
  sub_1000251C8((uint64_t)v15, (uint64_t)&v16);
  unsigned __int8 v2 = BYTE6(v17);
  unint64_t v3 = 0;
  switch(v17 >> 62)
  {
    case 1uLL:
      v17 &= 0x3FFFFFFFFFFFFFFFuLL;
      if (__OFSUB__(HIDWORD(v16), v16)) {
        goto LABEL_16;
      }
      unint64_t v3 = HIDWORD(v16) - (int)v16;
LABEL_6:
      sub_100025224(v0);
LABEL_7:
      sub_10003B748(v3, 0xFFFF00000001uLL);
      if (v1) {
        return sub_100025254(v0);
      }
      uint64_t v7 = sub_10003B948(0xFFFF00000001);
      sub_100025254(v0);
      unint64_t v8 = v3 + v7;
      if (__OFADD__(v3, v7)) {
        goto LABEL_14;
      }
      unint64_t v9 = v8 + 4;
      if (__OFADD__(v8, 4)) {
        goto LABEL_15;
      }
      char v10 = *(unsigned char *)(v0 + 16);
      memcpy(v13, (const void *)(v0 + 24), sizeof(v13));
      uint64_t v11 = PPM_0_2_1.VDAFConfig.VDAFTypeSelector.encodedLength(with:)(v10);
      BOOL v12 = __OFADD__(v9, v11);
      uint64_t result = v9 + v11;
      if (v12)
      {
        __break(1u);
LABEL_14:
        __break(1u);
LABEL_15:
        __break(1u);
LABEL_16:
        __break(1u);
LABEL_17:
        __break(1u);
        JUMPOUT(0x10002DB8CLL);
      }
      return result;
    case 2uLL:
      v17 &= 0x3FFFFFFFFFFFFFFFuLL;
      uint64_t v4 = *(void *)(v16 + 16);
      uint64_t v5 = *(void *)(v16 + 24);
      unint64_t v3 = v5 - v4;
      if (!__OFSUB__(v5, v4)) {
        goto LABEL_6;
      }
      goto LABEL_17;
    case 3uLL:
      goto LABEL_7;
    default:
      v17 &= 0x3FFFFFFFFFFFFFFFuLL;
      unint64_t v3 = v2;
      goto LABEL_7;
  }
}

unint64_t PPM_0_2_1.VDAFConfig.encode<A>(into:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_100024898();
  unint64_t result = RangeReplaceableCollection<>.encode<A>(into:with:)(a1, 0xFFFF00000001uLL, 1, (uint64_t)&type metadata for Data, a4);
  if (!v6)
  {
    char v11 = *(unsigned char *)(v5 + 16);
    unint64_t v12 = sub_10003102C();
    sub_100035128(a1, (uint64_t)&type metadata for PPM_0_2_1.VDAFType, a4, v12, a5);
    memcpy(__dst, (const void *)(v5 + 24), sizeof(__dst));
    return PPM_0_2_1.VDAFConfig.VDAFTypeSelector.encode<A>(into:with:)(a1, v11, v13, v14, a4, a5);
  }
  return result;
}

uint64_t PPM_0_2_1.VDAFConfig.init<A>(from:with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X8>)
{
  unint64_t v13 = sub_100024898();
  uint64_t result = RangeReplaceableCollection<>.init<A>(from:with:)(a1, 0xFFFF00000001, 1, (uint64_t)&type metadata for Data, a4, v13, a5);
  if (!v6)
  {
    unint64_t v15 = sub_10003102C();
    TLSEnumType.init<A>(from:with:)(a1, (a3 & 0x10000000000 | a2 & 1) != 0, (uint64_t)&type metadata for PPM_0_2_1.VDAFType, a4, v15, a5);
    *((void *)&v16 + 1) = a3;
    *(void *)&long long v16 = a2;
    unint64_t v17 = (v16 >> 8) & 0x101FFFFFFFF0101;
    if ((a3 & 0x10000000000) != 0) {
      unint64_t v18 = 0x101000000000101;
    }
    else {
      unint64_t v18 = v17;
    }
    PPM_0_2_1.VDAFConfig.VDAFTypeSelector.init<A>(from:with:)(a1, v19, v18, a4, a5, (uint64_t)__src);
    uint64_t result = (uint64_t)memcpy((void *)(a6 + 24), __src, 0x10FuLL);
    *(void *)a6 = v19;
    *(void *)(a6 + 8) = v20;
    *(unsigned char *)(a6 + 16) = v19;
    *(_DWORD *)(a6 + 20) = HIDWORD(v19);
  }
  return result;
}

uint64_t static PPM_0_2_1.VDAFConfig.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((_s19DPSubmissionService9PPM_0_2_1V3UrlV23__derived_struct_equalsySbAE_AEtFZ_0(*(void *)a1, *(void *)(a1 + 8), *(void *)a2, *(void *)(a2 + 8)) & 1) != 0&& *(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16)&& *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20))
  {
    memcpy(__dst, (const void *)(a1 + 24), 0x10FuLL);
    memcpy(v6, (const void *)(a2 + 24), 0x10FuLL);
    char v4 = _s19DPSubmissionService9PPM_0_2_1V10VDAFConfigV16VDAFTypeSelectorV23__derived_struct_equalsySbAG_AGtFZ_0((uint64_t)__dst, (uint64_t)v6);
  }
  else
  {
    char v4 = 0;
  }
  return v4 & 1;
}

uint64_t sub_10002DED4(uint64_t a1)
{
  char v2 = *(unsigned char *)(a1 + 13);
  memcpy(__dst, v1, 0x127uLL);
  __dst[311] = v2;
  return PPM_0_2_1.VDAFConfig.encodedLength(with:)();
}

unint64_t sub_10002DF4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return PPM_0_2_1.VDAFConfig.encode<A>(into:with:)(a1, *(void *)a2, *(unsigned int *)(a2 + 8) | ((unint64_t)*(unsigned __int8 *)(a2 + 12) << 32) | ((unint64_t)*(unsigned __int8 *)(a2 + 13) << 40), a3, a4);
}

void *sub_10002DF98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v7 = *(void *)a2;
  unint64_t v8 = *(unsigned int *)(a2 + 8) | ((unint64_t)*(unsigned __int8 *)(a2 + 12) << 32);
  unsigned __int8 v11 = *(unsigned char *)(a2 + 13);
  uint64_t result = (void *)PPM_0_2_1.VDAFConfig.init<A>(from:with:)(a1, v7, v8 | ((unint64_t)v11 << 40), a3, a4, (uint64_t)__src);
  if (!v5) {
    return memcpy(a5, __src, 0x127uLL);
  }
  return result;
}

uint64_t sub_10002E018(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a1;
  unint64_t v4 = *(void *)(a1 + 8);
  int v5 = *(unsigned __int8 *)(a1 + 16);
  int v6 = *(_DWORD *)(a1 + 20);
  memcpy(v16, (const void *)(a1 + 24), 0x10FuLL);
  uint64_t v7 = *(void *)a2;
  unint64_t v8 = *(void *)(a2 + 8);
  int v9 = *(unsigned __int8 *)(a2 + 16);
  char v10 = (const void *)(a2 + 24);
  int v11 = *(_DWORD *)(a2 + 20);
  memcpy(__dst, v10, 0x10FuLL);
  char v12 = _s19DPSubmissionService9PPM_0_2_1V3UrlV23__derived_struct_equalsySbAE_AEtFZ_0(v3, v4, v7, v8);
  char v13 = 0;
  if ((v12 & 1) != 0 && v5 == v9 && v6 == v11) {
    char v13 = _s19DPSubmissionService9PPM_0_2_1V10VDAFConfigV16VDAFTypeSelectorV23__derived_struct_equalsySbAG_AGtFZ_0((uint64_t)v16, (uint64_t)__dst);
  }
  return v13 & 1;
}

BOOL sub_10002E0D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL result = 0;
  if (a1 == a5 && a2 == a6 && a3 == a7 && a4 == a8)
  {
    BOOL v10 = WORD1(a4) == WORD1(a8) && WORD2(a4) == WORD2(a8);
    return BYTE1(a4) == BYTE1(a8) && v10;
  }
  return result;
}

uint64_t sub_10002E15C(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, char a6, uint64_t a7, char a8)
{
  if ((a1 & 0x10000) != 0)
  {
    if ((a5 & 0x10000) == 0) {
      return 0;
    }
    goto LABEL_6;
  }
  uint64_t result = 0;
  if ((a5 & 0x10000) == 0 && (unsigned __int16)a1 == (unsigned __int16)a5)
  {
LABEL_6:
    if ((a2 & 1) == 0)
    {
      uint64_t result = 0;
      if ((a6 & 1) != 0 || HIDWORD(a1) != HIDWORD(a5)) {
        return result;
      }
      goto LABEL_11;
    }
    if (a6)
    {
LABEL_11:
      if (a4)
      {
        if (a8) {
          return 1;
        }
      }
      else if ((a8 & 1) == 0 && a3 == a7)
      {
        return 1;
      }
    }
    return 0;
  }
  return result;
}

uint64_t _s19DPSubmissionService9PPM_0_2_1V10RealNumberV23__derived_struct_equalsySbAE_AEtFZ_0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 != *a2 || *((_DWORD *)a1 + 1) != *((_DWORD *)a2 + 1)) {
    return 0;
  }
  if (a1[10])
  {
    if ((a2[10] & 1) == 0) {
      return 0;
    }
  }
  else if ((a2[10] & 1) != 0 || *((unsigned __int16 *)a1 + 4) != *((unsigned __int16 *)a2 + 4))
  {
    return 0;
  }
  if (a1[16])
  {
    if ((a2[16] & 1) == 0) {
      return 0;
    }
  }
  else if ((a2[16] & 1) != 0 || *((_DWORD *)a1 + 3) != *((_DWORD *)a2 + 3))
  {
    return 0;
  }
  if (a1[32])
  {
    if (a2[32]) {
      return 1;
    }
  }
  else if ((a2[32] & 1) == 0 && *((void *)a1 + 3) == *((void *)a2 + 3))
  {
    return 1;
  }
  return 0;
}

uint64_t _s19DPSubmissionService9PPM_0_2_1V18PrioPiRapporConfigV23__derived_struct_equalsySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 != *(_DWORD *)a2
    || *(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4)
    || *(unsigned __int8 *)(a1 + 8) != *(unsigned __int8 *)(a2 + 8)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12))
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 18))
  {
    if ((*(unsigned char *)(a2 + 18) & 1) == 0) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 18) & 1) != 0 || *(unsigned __int16 *)(a1 + 16) != *(unsigned __int16 *)(a2 + 16))
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 24))
  {
    if ((*(unsigned char *)(a2 + 24) & 1) == 0) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 24) & 1) != 0 || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20))
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 40))
  {
    if ((*(unsigned char *)(a2 + 40) & 1) == 0) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 40) & 1) != 0 || *(void *)(a1 + 32) != *(void *)(a2 + 32))
  {
    return 0;
  }
  if (*(unsigned __int8 *)(a1 + 48) != *(unsigned __int8 *)(a2 + 48) || *(_DWORD *)(a1 + 52) != *(_DWORD *)(a2 + 52)) {
    return 0;
  }
  if (*(unsigned char *)(a1 + 58))
  {
    if ((*(unsigned char *)(a2 + 58) & 1) == 0) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 58) & 1) != 0 || *(unsigned __int16 *)(a1 + 56) != *(unsigned __int16 *)(a2 + 56))
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 64))
  {
    if ((*(unsigned char *)(a2 + 64) & 1) == 0) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 64) & 1) != 0 || *(_DWORD *)(a1 + 60) != *(_DWORD *)(a2 + 60))
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 80))
  {
    if (*(unsigned char *)(a2 + 80)) {
      return 1;
    }
  }
  else if ((*(unsigned char *)(a2 + 80) & 1) == 0 && *(void *)(a1 + 72) == *(void *)(a2 + 72))
  {
    return 1;
  }
  return 0;
}

uint64_t _s19DPSubmissionService9PPM_0_2_1V10VDAFConfigV16VDAFTypeSelectorV23__derived_struct_equalsySbAG_AGtFZ_0(uint64_t a1, uint64_t a2)
{
  sub_10001FBE4(a1, (uint64_t)&v26, &qword_100080B80);
  sub_10001FBE4(a2, (uint64_t)&v25, &qword_100080B80);
  sub_10001FBE4((uint64_t)&v26, (uint64_t)&v61, &qword_100080B80);
  if (v61)
  {
    sub_10001FBE4((uint64_t)&v25, (uint64_t)&v62, &qword_100080B80);
    if (v62 != 1) {
      return 0;
    }
  }
  else
  {
    sub_10001FBE4((uint64_t)&v25, (uint64_t)&v62, &qword_100080B80);
    if (v62) {
      return 0;
    }
  }
  char v4 = *(unsigned char *)(a2 + 2);
  if (*(unsigned char *)(a1 + 2))
  {
    if (!*(unsigned char *)(a2 + 2)) {
      return 0;
    }
  }
  else
  {
    if (*(unsigned __int8 *)(a1 + 1) != *(unsigned __int8 *)(a2 + 1)) {
      char v4 = 1;
    }
    if (v4) {
      return 0;
    }
  }
  if (*(unsigned char *)(a1 + 16))
  {
    if (!*(unsigned char *)(a2 + 16)) {
      return 0;
    }
  }
  else
  {
    if (*(unsigned char *)(a2 + 16)) {
      return 0;
    }
    uint64_t result = 0;
    if ((*(void *)(a1 + 4) & 0xFFFFFFFFFFLL) != (*(void *)(a2 + 4) & 0xFFFFFFFFFFLL)
      || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12))
    {
      return result;
    }
  }
  char v6 = *(unsigned char *)(a2 + 28);
  if (*(unsigned char *)(a1 + 28))
  {
    if (!*(unsigned char *)(a2 + 28)) {
      return 0;
    }
  }
  else
  {
    if (*(void *)(a1 + 20) != *(void *)(a2 + 20)) {
      char v6 = 1;
    }
    if (v6) {
      return 0;
    }
  }
  char v7 = *(unsigned char *)(a2 + 32);
  if (*(unsigned char *)(a1 + 32))
  {
    if (!*(unsigned char *)(a2 + 32)) {
      return 0;
    }
  }
  else
  {
    if (*(unsigned __int16 *)(a1 + 30) != *(unsigned __int16 *)(a2 + 30)) {
      char v7 = 1;
    }
    if (v7) {
      return 0;
    }
  }
  char v8 = *(unsigned char *)(a2 + 40);
  if (*(unsigned char *)(a1 + 40))
  {
    if (!*(unsigned char *)(a2 + 40)) {
      return 0;
    }
  }
  else
  {
    if (*(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36)) {
      char v8 = 1;
    }
    if (v8) {
      return 0;
    }
  }
  char v9 = *(unsigned char *)(a2 + 48);
  if (*(unsigned char *)(a1 + 48))
  {
    if (!*(unsigned char *)(a2 + 48)) {
      return 0;
    }
  }
  else
  {
    if (*(_DWORD *)(a1 + 44) != *(_DWORD *)(a2 + 44)) {
      char v9 = 1;
    }
    if (v9) {
      return 0;
    }
  }
  uint64_t v10 = *(void *)(a1 + 64);
  uint64_t v11 = *(void *)(a2 + 64);
  if (v10 == 4)
  {
    if (v11 != 4) {
      return 0;
    }
  }
  else
  {
    if (v11 == 4) {
      return 0;
    }
    uint64_t v12 = *(void *)(a1 + 56);
    uint64_t v27 = v12;
    uint64_t v13 = *(void *)(a1 + 72);
    uint64_t v14 = *(void *)(a1 + 80);
    char v28 = v10;
    int v29 = HIDWORD(v10);
    char v31 = BYTE2(v13) & 1;
    __int16 v30 = v13;
    int v32 = HIDWORD(v13);
    char v33 = v14 & 1;
    uint64_t v15 = *(void *)(a1 + 96);
    uint64_t v34 = *(void *)(a1 + 88);
    char v35 = v15 & 1;
    uint64_t v16 = *(void *)(a1 + 104);
    uint64_t v17 = *(void *)(a1 + 112);
    char v36 = v16;
    int v37 = HIDWORD(v16);
    __int16 v38 = v17;
    char v39 = BYTE2(v17) & 1;
    int v40 = HIDWORD(v17);
    uint64_t v18 = *(void *)(a1 + 128);
    char v41 = *(void *)(a1 + 120) & 1;
    LOBYTE(v16) = *(unsigned char *)(a1 + 136);
    uint64_t v42 = v18;
    uint64_t v19 = *(void *)(a2 + 56);
    char v43 = v16 & 1;
    uint64_t v44 = v19;
    uint64_t v20 = *(void *)(a2 + 72);
    uint64_t v21 = *(void *)(a2 + 80);
    char v45 = v11;
    int v46 = HIDWORD(v11);
    __int16 v47 = v20;
    char v48 = BYTE2(v20) & 1;
    int v49 = HIDWORD(v20);
    uint64_t v22 = *(void *)(a2 + 104);
    uint64_t v23 = *(void *)(a2 + 112);
    char v50 = v21 & 1;
    int v54 = HIDWORD(v22);
    int v57 = HIDWORD(v23);
    uint64_t v59 = *(void *)(a2 + 128);
    uint64_t v24 = *(void *)(a2 + 96);
    uint64_t v51 = *(void *)(a2 + 88);
    char v52 = v24 & 1;
    char v53 = v22;
    __int16 v55 = v23;
    char v56 = BYTE2(v23) & 1;
    char v58 = *(void *)(a2 + 120) & 1;
    char v60 = *(unsigned char *)(a2 + 136) & 1;
    if ((_s19DPSubmissionService9PPM_0_2_1V18PrioPiRapporConfigV23__derived_struct_equalsySbAE_AEtFZ_0((uint64_t)&v27, (uint64_t)&v44) & 1) == 0)return 0; {
  }
    }
  if (*(unsigned char *)(a1 + 153))
  {
    if (!*(unsigned char *)(a2 + 153)) {
      return 0;
    }
  }
  else
  {
    if (*(unsigned char *)(a2 + 153)) {
      return 0;
    }
    uint64_t result = 0;
    if ((*(void *)(a1 + 140) & 0xFFFFFFFFFFLL) != (*(void *)(a2 + 140) & 0xFFFFFFFFFFLL)
      || __PAIR64__(*(unsigned __int8 *)(a1 + 152), *(_DWORD *)(a1 + 148)) != __PAIR64__(*(unsigned __int8 *)(a2 + 152), *(_DWORD *)(a2 + 148)))
    {
      return result;
    }
  }
  if (*(unsigned char *)(a1 + 169))
  {
    if (!*(unsigned char *)(a2 + 169)) {
      return 0;
    }
LABEL_58:
    if (*(unsigned char *)(a1 + 206))
    {
      if (!*(unsigned char *)(a2 + 206)) {
        return 0;
      }
    }
    else if ((*(unsigned char *)(a2 + 206) & 1) != 0 {
           || !sub_10002E0D4(*(void *)(a1 + 176), *(void *)(a1 + 184), *(void *)(a1 + 192), (*(unsigned int *)(a1 + 200) | ((unint64_t)*(unsigned __int16 *)(a1 + 204) << 32)) & 0xFFFFFFFFFFFFLL, *(void *)(a2 + 176), *(void *)(a2 + 184), *(void *)(a2 + 192), (*(unsigned int *)(a2 + 200) | ((unint64_t)*(unsigned __int16 *)(a2 + 204) << 32)) & 0xFFFFFFFFFFFFLL))
    }
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 238))
    {
      if (!*(unsigned char *)(a2 + 238)) {
        return 0;
      }
    }
    else if ((*(unsigned char *)(a2 + 238) & 1) != 0 {
           || !sub_10002E0D4(*(void *)(a1 + 208), *(void *)(a1 + 216), *(void *)(a1 + 224), (*(unsigned int *)(a1 + 232) | ((unint64_t)*(unsigned __int16 *)(a1 + 236) << 32)) & 0xFFFFFFFFFFFFLL, *(void *)(a2 + 208), *(void *)(a2 + 216), *(void *)(a2 + 224), (*(unsigned int *)(a2 + 232) | ((unint64_t)*(unsigned __int16 *)(a2 + 236) << 32)) & 0xFFFFFFFFFFFFLL))
    }
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 270))
    {
      if ((*(unsigned char *)(a2 + 270) & 1) == 0) {
        return 0;
      }
    }
    else if ((*(unsigned char *)(a2 + 270) & 1) != 0 {
           || !sub_10002E0D4(*(void *)(a1 + 240), *(void *)(a1 + 248), *(void *)(a1 + 256), (*(unsigned int *)(a1 + 264) | ((unint64_t)*(unsigned __int16 *)(a1 + 268) << 32)) & 0xFFFFFFFFFFFFLL, *(void *)(a2 + 240), *(void *)(a2 + 248), *(void *)(a2 + 256), (*(unsigned int *)(a2 + 264) | ((unint64_t)*(unsigned __int16 *)(a2 + 268) << 32)) & 0xFFFFFFFFFFFFLL))
    }
    {
      return 0;
    }
    return 1;
  }
  if (*(unsigned char *)(a2 + 169)) {
    return 0;
  }
  uint64_t result = 0;
  if ((*(void *)(a1 + 156) & 0xFFFFFFFFFFLL) == (*(void *)(a2 + 156) & 0xFFFFFFFFFFLL)
    && __PAIR64__(*(unsigned __int8 *)(a1 + 168), *(_DWORD *)(a1 + 164)) == __PAIR64__(*(unsigned __int8 *)(a2 + 168), *(_DWORD *)(a2 + 164)))
  {
    goto LABEL_58;
  }
  return result;
}

uint64_t _s19DPSubmissionService9PPM_0_2_1V13RenyiDPConfigV23__derived_struct_equalsySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 != *(_DWORD *)a2
    || *(unsigned __int8 *)(a1 + 8) != *(unsigned __int8 *)(a2 + 8)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12))
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 18))
  {
    if ((*(unsigned char *)(a2 + 18) & 1) == 0) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 18) & 1) != 0 || *(unsigned __int16 *)(a1 + 16) != *(unsigned __int16 *)(a2 + 16))
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 24))
  {
    if ((*(unsigned char *)(a2 + 24) & 1) == 0) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 24) & 1) != 0 || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20))
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 40))
  {
    if (*(unsigned char *)(a2 + 40)) {
      return 1;
    }
  }
  else if ((*(unsigned char *)(a2 + 40) & 1) == 0 && *(void *)(a1 + 32) == *(void *)(a2 + 32))
  {
    return 1;
  }
  return 0;
}

uint64_t _s19DPSubmissionService9PPM_0_2_1V16EpsDeltaDPConfigV23__derived_struct_equalsySbAE_AEtFZ_0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 != *a2 || *((_DWORD *)a1 + 1) != *((_DWORD *)a2 + 1)) {
    return 0;
  }
  if (a1[10])
  {
    if ((a2[10] & 1) == 0) {
      return 0;
    }
  }
  else if ((a2[10] & 1) != 0 || *((unsigned __int16 *)a1 + 4) != *((unsigned __int16 *)a2 + 4))
  {
    return 0;
  }
  if (a1[16])
  {
    if ((a2[16] & 1) == 0) {
      return 0;
    }
  }
  else if ((a2[16] & 1) != 0 || *((_DWORD *)a1 + 3) != *((_DWORD *)a2 + 3))
  {
    return 0;
  }
  if (a1[32])
  {
    if ((a2[32] & 1) == 0) {
      return 0;
    }
  }
  else if ((a2[32] & 1) != 0 || *((void *)a1 + 3) != *((void *)a2 + 3))
  {
    return 0;
  }
  if (a1[40] != a2[40] || *((_DWORD *)a1 + 11) != *((_DWORD *)a2 + 11)) {
    return 0;
  }
  if (a1[50])
  {
    if ((a2[50] & 1) == 0) {
      return 0;
    }
  }
  else if ((a2[50] & 1) != 0 || *((unsigned __int16 *)a1 + 24) != *((unsigned __int16 *)a2 + 24))
  {
    return 0;
  }
  if (a1[56])
  {
    if ((a2[56] & 1) == 0) {
      return 0;
    }
  }
  else if ((a2[56] & 1) != 0 || *((_DWORD *)a1 + 13) != *((_DWORD *)a2 + 13))
  {
    return 0;
  }
  if (a1[72])
  {
    if (a2[72]) {
      return 1;
    }
  }
  else if ((a2[72] & 1) == 0 && *((void *)a1 + 8) == *((void *)a2 + 8))
  {
    return 1;
  }
  return 0;
}

uint64_t _s19DPSubmissionService9PPM_0_2_1V34AggregatorDiscreteGaussianDpConfigV23__derived_struct_equalsySbAE_AEtFZ_0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 != *a2 || *((_DWORD *)a1 + 1) != *((_DWORD *)a2 + 1)) {
    goto LABEL_53;
  }
  if (a1[10])
  {
    if ((a2[10] & 1) == 0) {
      goto LABEL_53;
    }
    goto LABEL_8;
  }
  char v2 = 0;
  if ((a2[10] & 1) == 0 && *((unsigned __int16 *)a1 + 4) == *((unsigned __int16 *)a2 + 4))
  {
LABEL_8:
    if (a1[16])
    {
      if ((a2[16] & 1) == 0) {
        goto LABEL_53;
      }
    }
    else
    {
      char v2 = 0;
      if ((a2[16] & 1) != 0 || *((_DWORD *)a1 + 3) != *((_DWORD *)a2 + 3)) {
        return v2 & 1;
      }
    }
    if (a1[32])
    {
      if ((a2[32] & 1) == 0) {
        goto LABEL_53;
      }
    }
    else
    {
      char v2 = 0;
      if ((a2[32] & 1) != 0 || *((void *)a1 + 3) != *((void *)a2 + 3)) {
        return v2 & 1;
      }
    }
    if (a1[40] != a2[40] || *((_DWORD *)a1 + 11) != *((_DWORD *)a2 + 11)) {
      goto LABEL_53;
    }
    if (a1[50])
    {
      if ((a2[50] & 1) == 0) {
        goto LABEL_53;
      }
    }
    else
    {
      char v2 = 0;
      if ((a2[50] & 1) != 0 || *((unsigned __int16 *)a1 + 24) != *((unsigned __int16 *)a2 + 24)) {
        return v2 & 1;
      }
    }
    if (a1[56])
    {
      if ((a2[56] & 1) == 0) {
        goto LABEL_53;
      }
    }
    else
    {
      char v2 = 0;
      if ((a2[56] & 1) != 0 || *((_DWORD *)a1 + 13) != *((_DWORD *)a2 + 13)) {
        return v2 & 1;
      }
    }
    if (a1[72])
    {
      if ((a2[72] & 1) == 0) {
        goto LABEL_53;
      }
    }
    else
    {
      char v2 = 0;
      if ((a2[72] & 1) != 0 || *((void *)a1 + 8) != *((void *)a2 + 8)) {
        return v2 & 1;
      }
    }
    if (a1[80] != a2[80] || *((_DWORD *)a1 + 21) != *((_DWORD *)a2 + 21)) {
      goto LABEL_53;
    }
    if (a1[90])
    {
      if ((a2[90] & 1) == 0) {
        goto LABEL_53;
      }
    }
    else
    {
      char v2 = 0;
      if ((a2[90] & 1) != 0 || *((unsigned __int16 *)a1 + 44) != *((unsigned __int16 *)a2 + 44)) {
        return v2 & 1;
      }
    }
    if (a1[96])
    {
      if ((a2[96] & 1) == 0) {
        goto LABEL_53;
      }
    }
    else
    {
      char v2 = 0;
      if ((a2[96] & 1) != 0 || *((_DWORD *)a1 + 23) != *((_DWORD *)a2 + 23)) {
        return v2 & 1;
      }
    }
    if ((a1[112] & 1) == 0)
    {
      char v2 = 0;
      if ((a2[112] & 1) != 0 || *((void *)a1 + 13) != *((void *)a2 + 13)) {
        return v2 & 1;
      }
LABEL_52:
      long long v3 = *(_OWORD *)(a1 + 136);
      v8[0] = *(_OWORD *)(a1 + 120);
      v8[1] = v3;
      unsigned __int8 v9 = a1[152];
      long long v4 = *(_OWORD *)(a2 + 136);
      v6[0] = *(_OWORD *)(a2 + 120);
      v6[1] = v4;
      unsigned __int8 v7 = a2[152];
      char v2 = _s19DPSubmissionService9PPM_0_2_1V10RealNumberV23__derived_struct_equalsySbAE_AEtFZ_0((unsigned __int8 *)v8, (unsigned __int8 *)v6);
      return v2 & 1;
    }
    if (a2[112]) {
      goto LABEL_52;
    }
LABEL_53:
    char v2 = 0;
  }
  return v2 & 1;
}

uint64_t _s19DPSubmissionService9PPM_0_2_1V55AggregatorDiscreteGaussianClientSymmetricRapporDpConfigV23__derived_struct_equalsySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a1 + 112);
  v15[6] = *(_OWORD *)(a1 + 96);
  v15[7] = v4;
  v16[0] = *(_OWORD *)(a1 + 128);
  *(_OWORD *)((char *)v16 + 9) = *(_OWORD *)(a1 + 137);
  long long v5 = *(_OWORD *)(a1 + 48);
  v15[2] = *(_OWORD *)(a1 + 32);
  v15[3] = v5;
  long long v6 = *(_OWORD *)(a1 + 80);
  v15[4] = *(_OWORD *)(a1 + 64);
  v15[5] = v6;
  long long v7 = *(_OWORD *)(a1 + 16);
  v15[0] = *(_OWORD *)a1;
  v15[1] = v7;
  long long v8 = *(_OWORD *)(a2 + 112);
  v13[6] = *(_OWORD *)(a2 + 96);
  v13[7] = v8;
  v14[0] = *(_OWORD *)(a2 + 128);
  *(_OWORD *)((char *)v14 + 9) = *(_OWORD *)(a2 + 137);
  long long v9 = *(_OWORD *)(a2 + 48);
  _OWORD v13[2] = *(_OWORD *)(a2 + 32);
  v13[3] = v9;
  long long v10 = *(_OWORD *)(a2 + 80);
  v13[4] = *(_OWORD *)(a2 + 64);
  void v13[5] = v10;
  long long v11 = *(_OWORD *)(a2 + 16);
  v13[0] = *(_OWORD *)a2;
  v13[1] = v11;
  if ((_s19DPSubmissionService9PPM_0_2_1V34AggregatorDiscreteGaussianDpConfigV23__derived_struct_equalsySbAE_AEtFZ_0((unsigned __int8 *)v15, (unsigned __int8 *)v13) & 1) == 0|| *(unsigned __int8 *)(a1 + 160) != *(unsigned __int8 *)(a2 + 160)|| *(_DWORD *)(a1 + 164) != *(_DWORD *)(a2 + 164))
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 170))
  {
    if ((*(unsigned char *)(a2 + 170) & 1) == 0) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 170) & 1) != 0 || *(unsigned __int16 *)(a1 + 168) != *(unsigned __int16 *)(a2 + 168))
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 176))
  {
    if ((*(unsigned char *)(a2 + 176) & 1) == 0) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 176) & 1) != 0 || *(_DWORD *)(a1 + 172) != *(_DWORD *)(a2 + 172))
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 192))
  {
    if (*(unsigned char *)(a2 + 192)) {
      return 1;
    }
  }
  else if ((*(unsigned char *)(a2 + 192) & 1) == 0 && *(void *)(a1 + 184) == *(void *)(a2 + 184))
  {
    return 1;
  }
  return 0;
}

uint64_t _s19DPSubmissionService9PPM_0_2_1V56DistributedGaussianWithSubsampledMomentsAccountantConfigV23__derived_struct_equalsySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 != *(void *)a2
    || *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(void *)(a1 + 16) != *(void *)(a2 + 16)
    || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24)
    || *(unsigned __int8 *)(a1 + 32) != *(unsigned __int8 *)(a2 + 32)
    || *(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36))
  {
    goto LABEL_25;
  }
  int v4 = *(_DWORD *)(a1 + 44);
  char v5 = *(unsigned char *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 56);
  char v7 = *(unsigned char *)(a1 + 64);
  if (*(unsigned char *)(a1 + 42))
  {
    if ((*(unsigned char *)(a2 + 42) & 1) == 0) {
      goto LABEL_25;
    }
    goto LABEL_12;
  }
  char v8 = 0;
  if ((*(unsigned char *)(a2 + 42) & 1) == 0 && *(unsigned __int16 *)(a1 + 40) == *(unsigned __int16 *)(a2 + 40))
  {
LABEL_12:
    if (v5)
    {
      if ((*(unsigned char *)(a2 + 48) & 1) == 0) {
        goto LABEL_25;
      }
    }
    else
    {
      char v8 = 0;
      if ((*(unsigned char *)(a2 + 48) & 1) != 0 || v4 != *(_DWORD *)(a2 + 44)) {
        return v8 & 1;
      }
    }
    if (v7)
    {
      if ((*(unsigned char *)(a2 + 64) & 1) == 0) {
        goto LABEL_25;
      }
    }
    else
    {
      char v8 = 0;
      if ((*(unsigned char *)(a2 + 64) & 1) != 0 || v6 != *(void *)(a2 + 56)) {
        return v8 & 1;
      }
    }
    long long v9 = *(_OWORD *)(a1 + 88);
    v26[0] = *(_OWORD *)(a1 + 72);
    v26[1] = v9;
    char v27 = *(unsigned char *)(a1 + 104);
    long long v10 = *(_OWORD *)(a2 + 88);
    v24[0] = *(_OWORD *)(a2 + 72);
    v24[1] = v10;
    char v25 = *(unsigned char *)(a2 + 104);
    if (_s19DPSubmissionService9PPM_0_2_1V10RealNumberV23__derived_struct_equalsySbAE_AEtFZ_0((unsigned __int8 *)v26, (unsigned __int8 *)v24))
    {
      long long v11 = *(_OWORD *)(a1 + 128);
      v22[0] = *(_OWORD *)(a1 + 112);
      v22[1] = v11;
      char v23 = *(unsigned char *)(a1 + 144);
      long long v12 = *(_OWORD *)(a2 + 128);
      v20[0] = *(_OWORD *)(a2 + 112);
      v20[1] = v12;
      char v21 = *(unsigned char *)(a2 + 144);
      if (_s19DPSubmissionService9PPM_0_2_1V10RealNumberV23__derived_struct_equalsySbAE_AEtFZ_0((unsigned __int8 *)v22, (unsigned __int8 *)v20))
      {
        long long v13 = *(_OWORD *)(a1 + 168);
        v18[0] = *(_OWORD *)(a1 + 152);
        v18[1] = v13;
        char v19 = *(unsigned char *)(a1 + 184);
        long long v14 = *(_OWORD *)(a2 + 168);
        v16[0] = *(_OWORD *)(a2 + 152);
        v16[1] = v14;
        char v17 = *(unsigned char *)(a2 + 184);
        char v8 = _s19DPSubmissionService9PPM_0_2_1V10RealNumberV23__derived_struct_equalsySbAE_AEtFZ_0((unsigned __int8 *)v18, (unsigned __int8 *)v16);
        return v8 & 1;
      }
    }
LABEL_25:
    char v8 = 0;
  }
  return v8 & 1;
}

uint64_t _s19DPSubmissionService9PPM_0_2_1V8DPConfigV19DPMechanismSelectorV23__derived_struct_equalsySbAG_AGtFZ_0(uint64_t a1, uint64_t a2)
{
  sub_10001FBE4(a1, (uint64_t)&v66, &qword_100080B80);
  sub_10001FBE4(a2, (uint64_t)&v65, &qword_100080B80);
  sub_10001FBE4((uint64_t)&v66, (uint64_t)&v115, &qword_100080B80);
  if (v115)
  {
    sub_10001FBE4((uint64_t)&v65, (uint64_t)v116, &qword_100080B80);
    if (v116[0] != 1) {
      return 0;
    }
  }
  else
  {
    sub_10001FBE4((uint64_t)&v65, (uint64_t)v116, &qword_100080B80);
    if (v116[0]) {
      return 0;
    }
  }
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a2 + 8);
  if (v4 == 4)
  {
    if (v5 != 4) {
      return 0;
    }
  }
  else
  {
    if (v5 == 4) {
      return 0;
    }
    uint64_t result = 0;
    if (v5 != v4 || HIDWORD(v4) != HIDWORD(v5)) {
      return result;
    }
    uint64_t v9 = *(void *)(a1 + 16);
    uint64_t v10 = *(void *)(a2 + 16);
    uint64_t v11 = *(void *)(a2 + 24);
    if ((v9 & 0x10000) != 0)
    {
      if ((v10 & 0x10000) == 0) {
        return 0;
      }
    }
    else
    {
      uint64_t result = 0;
      if ((v10 & 0x10000) != 0 || (unsigned __int16)*(void *)(a1 + 16) != (unsigned __int16)v10) {
        return result;
      }
    }
    if (*(void *)(a1 + 24))
    {
      if ((v11 & 1) == 0) {
        return 0;
      }
    }
    else
    {
      uint64_t result = 0;
      if ((v11 & 1) != 0 || HIDWORD(v9) != HIDWORD(v10)) {
        return result;
      }
    }
    if (*(unsigned char *)(a1 + 40))
    {
      if ((*(unsigned char *)(a2 + 40) & 1) == 0) {
        return 0;
      }
    }
    else
    {
      uint64_t result = 0;
      if ((*(unsigned char *)(a2 + 40) & 1) != 0 || *(void *)(a1 + 32) != *(void *)(a2 + 32)) {
        return result;
      }
    }
  }
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = *(void *)(a2 + 48);
  if (v6 == 4)
  {
    if (v7 != 4) {
      return 0;
    }
  }
  else
  {
    if (v7 == 4) {
      return 0;
    }
    uint64_t v12 = *(void *)(a1 + 56);
    uint64_t v13 = *(void *)(a1 + 64);
    uint64_t v14 = *(void *)(a1 + 72);
    uint64_t v15 = *(void *)(a1 + 80);
    uint64_t v16 = *(void *)(a1 + 88);
    uint64_t v17 = *(void *)(a1 + 96);
    uint64_t v19 = *(void *)(a1 + 104);
    uint64_t v18 = *(void *)(a1 + 112);
    char v20 = *(unsigned char *)(a1 + 120);
    uint64_t v21 = *(void *)(a2 + 56);
    uint64_t v22 = *(void *)(a2 + 64);
    uint64_t v24 = *(void *)(a2 + 72);
    uint64_t v23 = *(void *)(a2 + 80);
    uint64_t v26 = *(void *)(a2 + 88);
    uint64_t v25 = *(void *)(a2 + 96);
    uint64_t v27 = *(void *)(a2 + 104);
    uint64_t v34 = *(void *)(a2 + 112);
    char v28 = *(unsigned char *)(a2 + 120);
    v83[0] = v6;
    int v84 = HIDWORD(v6);
    __int16 v85 = v12;
    char v86 = BYTE2(v12) & 1;
    int v87 = HIDWORD(v12);
    char v88 = v13 & 1;
    uint64_t v89 = v14;
    char v90 = v15 & 1;
    char v91 = v16;
    int v92 = HIDWORD(v16);
    __int16 v93 = v17;
    char v94 = BYTE2(v17) & 1;
    int v95 = HIDWORD(v17);
    char v96 = v19 & 1;
    uint64_t v97 = v18;
    char v98 = v20 & 1;
    v99[0] = v7;
    int v100 = HIDWORD(v7);
    __int16 v101 = v21;
    char v102 = BYTE2(v21) & 1;
    int v103 = HIDWORD(v21);
    char v104 = v22 & 1;
    uint64_t v105 = v24;
    char v106 = v23 & 1;
    char v107 = v26;
    int v108 = HIDWORD(v26);
    __int16 v109 = v25;
    char v110 = BYTE2(v25) & 1;
    int v111 = HIDWORD(v25);
    char v112 = v27 & 1;
    uint64_t v113 = v34;
    char v114 = v28 & 1;
    if ((_s19DPSubmissionService9PPM_0_2_1V16EpsDeltaDPConfigV23__derived_struct_equalsySbAE_AEtFZ_0(v83, v99) & 1) == 0) {
      return 0;
    }
  }
  uint64_t v29 = *(void *)(a1 + 136);
  uint64_t v30 = *(void *)(a2 + 136);
  if (v29 == 4)
  {
    if (v30 == 4) {
      goto LABEL_21;
    }
    return 0;
  }
  if (v30 == 4) {
    return 0;
  }
  uint64_t result = 0;
  if (*(void *)(a1 + 128) == *(void *)(a2 + 128)
    && v30 == v29
    && HIDWORD(v29) == HIDWORD(v30))
  {
    uint64_t v31 = *(void *)(a1 + 144);
    uint64_t v32 = *(void *)(a2 + 144);
    uint64_t v33 = *(void *)(a2 + 152);
    if ((v31 & 0x10000) != 0)
    {
      if ((v32 & 0x10000) == 0) {
        return 0;
      }
    }
    else
    {
      uint64_t result = 0;
      if ((v32 & 0x10000) != 0 || (unsigned __int16)*(void *)(a1 + 144) != (unsigned __int16)v32) {
        return result;
      }
    }
    if (*(void *)(a1 + 152))
    {
      if ((v33 & 1) == 0) {
        return 0;
      }
    }
    else
    {
      uint64_t result = 0;
      if ((v33 & 1) != 0 || HIDWORD(v31) != HIDWORD(v32)) {
        return result;
      }
    }
    if (*(unsigned char *)(a1 + 168))
    {
      if ((*(unsigned char *)(a2 + 168) & 1) == 0) {
        return 0;
      }
    }
    else
    {
      uint64_t result = 0;
      if ((*(unsigned char *)(a2 + 168) & 1) != 0 || *(void *)(a1 + 160) != *(void *)(a2 + 160)) {
        return result;
      }
    }
LABEL_21:
    sub_10001FBE4(a1 + 176, (uint64_t)v62, &qword_100080B40);
    sub_10001FBE4(a2 + 176, (uint64_t)v63, &qword_100080B40);
    sub_10001FBE4((uint64_t)v62, (uint64_t)v64, &qword_100080B40);
    if (sub_10001FAEC(v64) == 1)
    {
      sub_10001FBE4((uint64_t)v63, (uint64_t)v77, &qword_100080B40);
      if (sub_10001FAEC((unsigned __int8 *)v77) != 1) {
        return 0;
      }
    }
    else
    {
      sub_10001FBE4((uint64_t)v63, (uint64_t)v77, &qword_100080B40);
      if (sub_10001FAEC((unsigned __int8 *)v77) == 1) {
        return 0;
      }
      sub_10001FBE4((uint64_t)v62, (uint64_t)v60, &qword_100080B40);
      v79[6] = v60[6];
      v79[7] = v60[7];
      v80[0] = v61[0];
      *(_OWORD *)((char *)v80 + 9) = *(_OWORD *)((char *)v61 + 9);
      v79[2] = v60[2];
      v79[3] = v60[3];
      v79[4] = v60[4];
      v79[5] = v60[5];
      v79[0] = v60[0];
      v79[1] = v60[1];
      sub_10001FBE4((uint64_t)v63, (uint64_t)&v67, &qword_100080B40);
      v81[6] = v73;
      v81[7] = v74;
      v82[0] = v75[0];
      *(_OWORD *)((char *)v82 + 9) = *(_OWORD *)((char *)v75 + 9);
      v81[2] = v69;
      v81[3] = v70;
      v81[4] = v71;
      v81[5] = v72;
      v81[0] = v67;
      v81[1] = v68;
      if ((_s19DPSubmissionService9PPM_0_2_1V34AggregatorDiscreteGaussianDpConfigV23__derived_struct_equalsySbAE_AEtFZ_0((unsigned __int8 *)v79, (unsigned __int8 *)v81) & 1) == 0)return 0; {
    }
      }
    sub_10001FBE4(a1 + 336, (uint64_t)v58, &qword_100080B48);
    sub_10001FBE4(a2 + 336, (uint64_t)v59, &qword_100080B48);
    sub_10001FBE4((uint64_t)v58, (uint64_t)v60, &qword_100080B48);
    if (sub_10001FAEC((unsigned __int8 *)v60) == 1)
    {
      sub_10001FBE4((uint64_t)v59, (uint64_t)v77, &qword_100080B48);
      if (sub_10001FAEC((unsigned __int8 *)v77) != 1) {
        return 0;
      }
    }
    else
    {
      sub_10001FBE4((uint64_t)v59, (uint64_t)v49, &qword_100080B48);
      if (sub_10001FAEC((unsigned __int8 *)v49) == 1) {
        return 0;
      }
      sub_10001FBE4((uint64_t)v58, (uint64_t)v35, &qword_100080B48);
      v75[2] = v35[10];
      v75[3] = v35[11];
      char v76 = v36;
      long long v73 = v35[6];
      long long v74 = v35[7];
      v75[0] = v35[8];
      v75[1] = v35[9];
      long long v69 = v35[2];
      long long v70 = v35[3];
      long long v71 = v35[4];
      long long v72 = v35[5];
      long long v67 = v35[0];
      long long v68 = v35[1];
      sub_10001FBE4((uint64_t)v59, (uint64_t)&v37, &qword_100080B48);
      v77[10] = *(_OWORD *)v47;
      v77[11] = *(_OWORD *)&v47[16];
      char v78 = v48;
      v77[6] = v43;
      v77[7] = v44;
      v77[8] = v45;
      v77[9] = v46;
      v77[2] = v39;
      v77[3] = v40;
      v77[4] = v41;
      v77[5] = v42;
      v77[0] = v37;
      v77[1] = v38;
      if ((_s19DPSubmissionService9PPM_0_2_1V55AggregatorDiscreteGaussianClientSymmetricRapporDpConfigV23__derived_struct_equalsySbAE_AEtFZ_0((uint64_t)&v67, (uint64_t)v77) & 1) == 0)return 0; {
    }
      }
    sub_10001FBE4(a1 + 536, (uint64_t)v56, &qword_100080B50);
    sub_10001FBE4(a2 + 536, (uint64_t)v57, &qword_100080B50);
    sub_10001FBE4((uint64_t)v56, (uint64_t)v35, &qword_100080B50);
    if (sub_10001FAD8((uint64_t)v35) == 1)
    {
      sub_10001FBE4((uint64_t)v57, (uint64_t)v49, &qword_100080B50);
      if (sub_10001FAD8((uint64_t)v49) != 1) {
        return 0;
      }
    }
    else
    {
      sub_10001FBE4((uint64_t)v57, (uint64_t)v55, &qword_100080B50);
      if (sub_10001FAD8((uint64_t)v55) == 1) {
        return 0;
      }
      sub_10001FBE4((uint64_t)v56, (uint64_t)v51, &qword_100080B50);
      long long v45 = v51[8];
      long long v46 = v51[9];
      *(_OWORD *)__int16 v47 = v52[0];
      *(_OWORD *)&v47[9] = *(_OWORD *)((char *)v52 + 9);
      long long v41 = v51[4];
      long long v42 = v51[5];
      long long v43 = v51[6];
      long long v44 = v51[7];
      long long v37 = v51[0];
      long long v38 = v51[1];
      long long v39 = v51[2];
      long long v40 = v51[3];
      sub_10001FBE4((uint64_t)v57, (uint64_t)v53, &qword_100080B50);
      _OWORD v49[8] = v53[8];
      v49[9] = v53[9];
      *(_OWORD *)char v50 = v54[0];
      *(_OWORD *)&v50[9] = *(_OWORD *)((char *)v54 + 9);
      unsigned char v49[4] = v53[4];
      v49[5] = v53[5];
      v49[6] = v53[6];
      v49[7] = v53[7];
      v49[0] = v53[0];
      v49[1] = v53[1];
      _OWORD v49[2] = v53[2];
      void v49[3] = v53[3];
      if ((_s19DPSubmissionService9PPM_0_2_1V56DistributedGaussianWithSubsampledMomentsAccountantConfigV23__derived_struct_equalsySbAE_AEtFZ_0((uint64_t)&v37, (uint64_t)v49) & 1) == 0)return 0; {
    }
      }
    return 1;
  }
  return result;
}

uint64_t sub_10002F828(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = PPM_0_2_1.RealNumber.RealNumberTypeSelector.encodedLength(with:)(*(unsigned char *)v4, *(unsigned __int16 *)(v4 + 8) | ((*(unsigned char *)(v4 + 10) & 1) << 16), *(unsigned char *)(v4 + 16) & 1, a4, *(unsigned char *)(v4 + 32) & 1);
  if (!v5)
  {
    uint64_t v8 = result;
    uint64_t v9 = PPM_0_2_1.RealNumber.RealNumberTypeSelector.encodedLength(with:)(*(unsigned char *)(v4 + 40), *(unsigned __int16 *)(v4 + 48) | ((*(unsigned char *)(v4 + 50) & 1) << 16), *(unsigned char *)(v4 + 56) & 1, v7, *(unsigned char *)(v4 + 72) & 1);
    uint64_t v11 = PPM_0_2_1.RealNumber.RealNumberTypeSelector.encodedLength(with:)(*(unsigned char *)(v4 + 80), *(unsigned __int16 *)(v4 + 88) | ((*(unsigned char *)(v4 + 90) & 1) << 16), *(unsigned char *)(v4 + 96) & 1, v10, *(unsigned char *)(v4 + 112) & 1);
    return v8
         + v9
         + v11
         + PPM_0_2_1.RealNumber.RealNumberTypeSelector.encodedLength(with:)(*(unsigned char *)(v4 + 120), *(unsigned __int16 *)(v4 + 128) | ((*(unsigned char *)(v4 + 130) & 1) << 16), *(unsigned char *)(v4 + 136) & 1, v12, *(unsigned char *)(v4 + 152) & 1)+ 4;
  }
  return result;
}

uint64_t sub_10002F9A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = PPM_0_2_1.RealNumber.RealNumberTypeSelector.encodedLength(with:)(*(unsigned char *)v4, *(unsigned __int16 *)(v4 + 8) | ((*(unsigned char *)(v4 + 10) & 1) << 16), *(unsigned char *)(v4 + 16) & 1, a4, *(unsigned char *)(v4 + 32) & 1);
  if (!v5) {
    result += PPM_0_2_1.RealNumber.RealNumberTypeSelector.encodedLength(with:)(*(unsigned char *)(v4 + 40), *(unsigned __int16 *)(v4 + 48) | ((*(unsigned char *)(v4 + 50) & 1) << 16), *(unsigned char *)(v4 + 56) & 1, v7, *(unsigned char *)(v4 + 72) & 1)+ 2;
  }
  return result;
}

uint64_t sub_10002FA70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return PPM_0_2_1.RealNumber.RealNumberTypeSelector.encodedLength(with:)(*(unsigned char *)(v4 + 8), *(unsigned __int16 *)(v4 + 16) | ((*(unsigned char *)(v4 + 18) & 1) << 16), *(unsigned char *)(v4 + 24) & 1, a4, *(unsigned char *)(v4 + 40) & 1)+ 5;
}

uint64_t sub_10002FAD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = sub_10002F828(a1, a2, a3, a4);
  if (!v5)
  {
    uint64_t v8 = result;
    uint64_t v9 = PPM_0_2_1.RealNumber.RealNumberTypeSelector.encodedLength(with:)(*(unsigned char *)(v4 + 160), *(unsigned __int16 *)(v4 + 168) | ((*(unsigned char *)(v4 + 170) & 1) << 16), *(unsigned char *)(v4 + 176) & 1, v7, *(unsigned char *)(v4 + 192) & 1);
    BOOL v10 = __OFADD__(v8, v9 + 1);
    uint64_t result = v8 + v9 + 1;
    if (v10) {
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_10002FBA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = PPM_0_2_1.RealNumber.RealNumberTypeSelector.encodedLength(with:)(*(unsigned char *)(v4 + 32), *(unsigned __int16 *)(v4 + 40) | ((*(unsigned char *)(v4 + 42) & 1) << 16), *(unsigned char *)(v4 + 48) & 1, a4, *(unsigned char *)(v4 + 64) & 1);
  if (!v5)
  {
    uint64_t v8 = result;
    uint64_t v9 = PPM_0_2_1.RealNumber.RealNumberTypeSelector.encodedLength(with:)(*(unsigned char *)(v4 + 72), *(unsigned __int16 *)(v4 + 80) | ((*(unsigned char *)(v4 + 82) & 1) << 16), *(unsigned char *)(v4 + 88) & 1, v7, *(unsigned char *)(v4 + 104) & 1);
    uint64_t v11 = PPM_0_2_1.RealNumber.RealNumberTypeSelector.encodedLength(with:)(*(unsigned char *)(v4 + 112), *(unsigned __int16 *)(v4 + 120) | ((*(unsigned char *)(v4 + 122) & 1) << 16), *(unsigned char *)(v4 + 128) & 1, v10, *(unsigned char *)(v4 + 144) & 1);
    return v8
         + v9
         + v11
         + PPM_0_2_1.RealNumber.RealNumberTypeSelector.encodedLength(with:)(*(unsigned char *)(v4 + 152), *(unsigned __int16 *)(v4 + 160) | ((*(unsigned char *)(v4 + 162) & 1) << 16), *(unsigned char *)(v4 + 168) & 1, v12, *(unsigned char *)(v4 + 184) & 1)+ 28;
  }
  return result;
}

uint64_t sub_10002FD20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = PPM_0_2_1.RealNumber.RealNumberTypeSelector.encodedLength(with:)(*(unsigned char *)(v4 + 8), *(unsigned __int16 *)(v4 + 16) | ((*(unsigned char *)(v4 + 18) & 1) << 16), *(unsigned char *)(v4 + 24) & 1, a4, *(unsigned char *)(v4 + 40) & 1);
  if (!v5) {
    result += PPM_0_2_1.RealNumber.RealNumberTypeSelector.encodedLength(with:)(*(unsigned char *)(v4 + 48), *(unsigned __int16 *)(v4 + 56) | ((*(unsigned char *)(v4 + 58) & 1) << 16), *(unsigned char *)(v4 + 64) & 1, v7, *(unsigned char *)(v4 + 80) & 1)+ 10;
  }
  return result;
}

uint64_t sub_10002FDEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return PPM_0_2_1.RealNumber.RealNumberTypeSelector.encodedLength(with:)(*(unsigned char *)v4, *(unsigned __int16 *)(v4 + 8) | (*(unsigned __int8 *)(v4 + 10) << 16), *(unsigned char *)(v4 + 16), a4, *(unsigned char *)(v4 + 32))+ 1;
}

uint64_t sub_10002FE48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unint64_t v11 = sub_100022BA8();
  uint64_t result = sub_1000223EC(a1, (uint64_t)&type metadata for UInt64, a6, v11, a7);
  if (!v7)
  {
    unint64_t v13 = sub_100022BFC();
    sub_1000223EC(a1, (uint64_t)&type metadata for UInt32, a6, v13, a7);
    sub_1000223EC(a1, (uint64_t)&type metadata for UInt32, a6, v13, a7);
    sub_1000223EC(a1, (uint64_t)&type metadata for UInt32, a6, v13, a7);
    sub_1000223EC(a1, (uint64_t)&type metadata for UInt32, a6, v13, a7);
    unint64_t v14 = sub_100022CA4();
    sub_1000223EC(a1, (uint64_t)&type metadata for UInt8, a6, v14, a7);
    sub_1000223EC(a1, (uint64_t)&type metadata for UInt8, a6, v14, a7);
    unint64_t v15 = sub_100022C50();
    sub_1000223EC(a1, (uint64_t)&type metadata for UInt16, a6, v15, a7);
    return sub_1000223EC(a1, (uint64_t)&type metadata for UInt16, a6, v15, a7);
  }
  return result;
}

uint64_t sub_100030080(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v8 = *(unsigned char *)v3;
  unint64_t v9 = sub_100030150();
  uint64_t result = sub_100035128(a1, (uint64_t)&type metadata for PPM_0_2_1.RealNumberType, a2, v9, a3);
  if (!v4) {
    return PPM_0_2_1.RealNumber.RealNumberTypeSelector.encode<A>(into:with:)(a1, v8, *(unsigned __int16 *)(v3 + 8) | (*(unsigned __int8 *)(v3 + 10) << 16), *(unsigned char *)(v3 + 16), *(void *)(v3 + 24), *(unsigned char *)(v3 + 32), a2, a3);
  }
  return result;
}

unint64_t sub_100030150()
{
  unint64_t result = qword_100081038;
  if (!qword_100081038)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100081038);
  }
  return result;
}

uint64_t sub_1000301A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9 = sub_100022BFC();
  uint64_t result = sub_1000223EC(a1, (uint64_t)&type metadata for UInt32, a4, v9, a5);
  if (!v5)
  {
    unint64_t v11 = sub_100022CA4();
    sub_1000223EC(a1, (uint64_t)&type metadata for UInt8, a4, v11, a5);
    return sub_1000223EC(a1, (uint64_t)&type metadata for UInt32, a4, v9, a5);
  }
  return result;
}

uint64_t sub_100030298(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = sub_100022BFC();
  uint64_t result = sub_1000223EC(a1, (uint64_t)&type metadata for UInt32, a3, v8, a4);
  if (!v4) {
    return sub_1000223EC(a1, (uint64_t)&type metadata for UInt32, a3, v8, a4);
  }
  return result;
}

uint64_t sub_10003033C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v7 = sub_100022BFC();
  uint64_t result = sub_1000223EC(a1, (uint64_t)&type metadata for UInt32, a2, v7, a3);
  if (!v3)
  {
    sub_1000223EC(a1, (uint64_t)&type metadata for UInt32, a2, v7, a3);
    sub_100030080(a1, a2, a3);
    return sub_100030080(a1, a2, a3);
  }
  return result;
}

uint64_t sub_10003043C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9 = sub_100022BFC();
  uint64_t result = sub_1000223EC(a1, (uint64_t)&type metadata for UInt32, a4, v9, a5);
  if (!v5)
  {
    unint64_t v11 = sub_100022CA4();
    sub_1000223EC(a1, (uint64_t)&type metadata for UInt8, a4, v11, a5);
    sub_1000223EC(a1, (uint64_t)&type metadata for UInt32, a4, v9, a5);
    return sub_1000223EC(a1, (uint64_t)&type metadata for UInt8, a4, v11, a5);
  }
  return result;
}

uint64_t sub_100030568(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v7 = sub_100022BFC();
  uint64_t result = sub_1000223EC(a1, (uint64_t)&type metadata for UInt32, a2, v7, a3);
  if (!v3) {
    return sub_100030080(a1, a2, a3);
  }
  return result;
}

uint64_t sub_10003060C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_100030080(a1, a2, a3);
  if (!v3) {
    return sub_100030080(a1, a2, a3);
  }
  return result;
}

uint64_t sub_100030694(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_100030080(a1, a2, a3);
  if (!v3)
  {
    sub_100030080(a1, a2, a3);
    sub_100030080(a1, a2, a3);
    return sub_100030080(a1, a2, a3);
  }
  return result;
}

uint64_t sub_100030770(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_100030694(a1, a2, a3);
  if (!v3) {
    return sub_100030080(a1, a2, a3);
  }
  return result;
}

uint64_t sub_100030814(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v7 = sub_100022BA8();
  uint64_t result = sub_1000223EC(a1, (uint64_t)&type metadata for UInt64, a2, v7, a3);
  if (!v3)
  {
    unint64_t v9 = sub_100022BFC();
    sub_1000223EC(a1, (uint64_t)&type metadata for UInt32, a2, v9, a3);
    sub_1000223EC(a1, (uint64_t)&type metadata for UInt64, a2, v7, a3);
    sub_1000223EC(a1, (uint64_t)&type metadata for UInt32, a2, v9, a3);
    sub_100030080(a1, a2, a3);
    sub_100030080(a1, a2, a3);
    sub_100030080(a1, a2, a3);
    return sub_100030080(a1, a2, a3);
  }
  return result;
}

unint64_t sub_100030A18()
{
  unint64_t result = qword_100081040;
  if (!qword_100081040)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100081040);
  }
  return result;
}

uint64_t sub_100030A6C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v7 = sub_100022BA8();
  CommonUIntTLSNumberType.init<A>(from:with:)((uint64_t)&type metadata for UInt64, a2, v7, a3, (uint64_t)&v12);
  if (!v3)
  {
    uint64_t v4 = v12;
    unint64_t v8 = sub_100022BFC();
    CommonUIntTLSNumberType.init<A>(from:with:)((uint64_t)&type metadata for UInt32, a2, v8, a3, (uint64_t)&v12);
    CommonUIntTLSNumberType.init<A>(from:with:)((uint64_t)&type metadata for UInt32, a2, v8, a3, (uint64_t)&v12);
    CommonUIntTLSNumberType.init<A>(from:with:)((uint64_t)&type metadata for UInt32, a2, v8, a3, (uint64_t)&v12);
    CommonUIntTLSNumberType.init<A>(from:with:)((uint64_t)&type metadata for UInt32, a2, v8, a3, (uint64_t)&v12);
    unint64_t v9 = sub_100022CA4();
    CommonUIntTLSNumberType.init<A>(from:with:)((uint64_t)&type metadata for UInt8, a2, v9, a3, (uint64_t)&v12);
    CommonUIntTLSNumberType.init<A>(from:with:)((uint64_t)&type metadata for UInt8, a2, v9, a3, (uint64_t)&v12);
    unint64_t v10 = sub_100022C50();
    CommonUIntTLSNumberType.init<A>(from:with:)((uint64_t)&type metadata for UInt16, a2, v10, a3, (uint64_t)&v12);
    CommonUIntTLSNumberType.init<A>(from:with:)((uint64_t)&type metadata for UInt16, a2, v10, a3, (uint64_t)&v12);
  }
  return v4;
}

uint64_t sub_100030D14(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = sub_100022BFC();
  uint64_t result = CommonUIntTLSNumberType.init<A>(from:with:)((uint64_t)&type metadata for UInt32, a2, v6, a3, (uint64_t)&v13);
  if (!v3)
  {
    uint64_t v8 = v13;
    unint64_t v9 = sub_100022CA4();
    CommonUIntTLSNumberType.init<A>(from:with:)((uint64_t)&type metadata for UInt8, a2, v9, a3, (uint64_t)&v12);
    uint64_t v10 = v12;
    CommonUIntTLSNumberType.init<A>(from:with:)((uint64_t)&type metadata for UInt32, a2, v6, a3, (uint64_t)&v11);
    return v8 | (v10 << 32);
  }
  return result;
}

unint64_t sub_100030E20(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = sub_100022BFC();
  unint64_t result = CommonUIntTLSNumberType.init<A>(from:with:)((uint64_t)&type metadata for UInt32, a2, v6, a3, (uint64_t)&v10);
  if (!v3)
  {
    uint64_t v8 = v10;
    CommonUIntTLSNumberType.init<A>(from:with:)((uint64_t)&type metadata for UInt32, a2, v6, a3, (uint64_t)&v9);
    return v8 | ((unint64_t)v9 << 32);
  }
  return result;
}

uint64_t sub_100030ED8(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = sub_100022BFC();
  uint64_t result = CommonUIntTLSNumberType.init<A>(from:with:)((uint64_t)&type metadata for UInt32, a2, v6, a3, (uint64_t)&v14);
  if (!v3)
  {
    uint64_t v8 = v14;
    unint64_t v9 = sub_100022CA4();
    CommonUIntTLSNumberType.init<A>(from:with:)((uint64_t)&type metadata for UInt8, a2, v9, a3, (uint64_t)&v13);
    uint64_t v10 = v13;
    CommonUIntTLSNumberType.init<A>(from:with:)((uint64_t)&type metadata for UInt32, a2, v6, a3, (uint64_t)&v11);
    CommonUIntTLSNumberType.init<A>(from:with:)((uint64_t)&type metadata for UInt8, a2, v9, a3, (uint64_t)&v12);
    return v8 | (v10 << 32);
  }
  return result;
}

unint64_t sub_10003102C()
{
  unint64_t result = qword_100081048;
  if (!qword_100081048)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100081048);
  }
  return result;
}

unint64_t sub_100031084()
{
  unint64_t result = qword_100081050;
  if (!qword_100081050)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100081050);
  }
  return result;
}

uint64_t sub_1000310D8()
{
  return sub_100031AA4(&qword_100081058, &qword_100081060);
}

unint64_t sub_100031104()
{
  unint64_t result = qword_100081068;
  if (!qword_100081068)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100081068);
  }
  return result;
}

unint64_t sub_10003115C()
{
  unint64_t result = qword_100081070;
  if (!qword_100081070)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100081070);
  }
  return result;
}

unint64_t sub_1000311B0(uint64_t a1)
{
  unint64_t result = sub_1000311D8();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000311D8()
{
  unint64_t result = qword_1000810D8;
  if (!qword_1000810D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000810D8);
  }
  return result;
}

unint64_t sub_10003122C(uint64_t a1)
{
  unint64_t result = sub_100031254();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100031254()
{
  unint64_t result = qword_1000810E0;
  if (!qword_1000810E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000810E0);
  }
  return result;
}

unint64_t sub_1000312A8(uint64_t a1)
{
  unint64_t result = sub_1000312D0();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000312D0()
{
  unint64_t result = qword_100081140;
  if (!qword_100081140)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100081140);
  }
  return result;
}

unint64_t sub_100031324(uint64_t a1)
{
  unint64_t result = sub_10003134C();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10003134C()
{
  unint64_t result = qword_1000811A0;
  if (!qword_1000811A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000811A0);
  }
  return result;
}

unint64_t sub_1000313A0(uint64_t a1)
{
  unint64_t result = sub_1000313C8();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000313C8()
{
  unint64_t result = qword_100081200;
  if (!qword_100081200)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100081200);
  }
  return result;
}

unint64_t sub_100031420()
{
  unint64_t result = qword_100081208;
  if (!qword_100081208)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100081208);
  }
  return result;
}

uint64_t sub_100031474()
{
  return sub_100031AA4(&qword_100081210, &qword_100081218);
}

unint64_t sub_1000314A0()
{
  unint64_t result = qword_100081220;
  if (!qword_100081220)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100081220);
  }
  return result;
}

unint64_t sub_1000314F8()
{
  unint64_t result = qword_100081228;
  if (!qword_100081228)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100081228);
  }
  return result;
}

unint64_t sub_10003154C(uint64_t a1)
{
  unint64_t result = sub_100031574();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100031574()
{
  unint64_t result = qword_100081290;
  if (!qword_100081290)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100081290);
  }
  return result;
}

unint64_t sub_1000315C8(uint64_t a1)
{
  unint64_t result = sub_1000315F0();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000315F0()
{
  unint64_t result = qword_100081298;
  if (!qword_100081298)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100081298);
  }
  return result;
}

unint64_t sub_100031644(uint64_t a1)
{
  unint64_t result = sub_10003166C();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10003166C()
{
  unint64_t result = qword_1000812F8;
  if (!qword_1000812F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000812F8);
  }
  return result;
}

unint64_t sub_1000316C0(uint64_t a1)
{
  unint64_t result = sub_1000316E8();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000316E8()
{
  unint64_t result = qword_100081358;
  if (!qword_100081358)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100081358);
  }
  return result;
}

unint64_t sub_10003173C(uint64_t a1)
{
  unint64_t result = sub_100031764();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100031764()
{
  unint64_t result = qword_1000813B8;
  if (!qword_1000813B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000813B8);
  }
  return result;
}

unint64_t sub_1000317B8(uint64_t a1)
{
  unint64_t result = sub_1000317E0();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000317E0()
{
  unint64_t result = qword_100081418;
  if (!qword_100081418)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100081418);
  }
  return result;
}

unint64_t sub_100031834(uint64_t a1)
{
  unint64_t result = sub_10003185C();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10003185C()
{
  unint64_t result = qword_100081478;
  if (!qword_100081478)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100081478);
  }
  return result;
}

unint64_t sub_1000318B0(uint64_t a1)
{
  unint64_t result = sub_1000318D8();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000318D8()
{
  unint64_t result = qword_1000814D8;
  if (!qword_1000814D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000814D8);
  }
  return result;
}

unint64_t sub_10003192C(uint64_t a1)
{
  unint64_t result = sub_100031954();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100031954()
{
  unint64_t result = qword_100081538;
  if (!qword_100081538)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100081538);
  }
  return result;
}

unint64_t sub_1000319A8(uint64_t a1)
{
  unint64_t result = sub_1000319D0();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000319D0()
{
  unint64_t result = qword_100081598;
  if (!qword_100081598)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100081598);
  }
  return result;
}

unint64_t sub_100031A28()
{
  unint64_t result = qword_1000815A0;
  if (!qword_1000815A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000815A0);
  }
  return result;
}

uint64_t sub_100031A7C()
{
  return sub_100031AA4(&qword_1000815A8, &qword_1000815B0);
}

uint64_t sub_100031AA4(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10001FB5C(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100031AF8()
{
  unint64_t result = qword_1000815B8;
  if (!qword_1000815B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000815B8);
  }
  return result;
}

unint64_t sub_100031B50()
{
  unint64_t result = qword_1000815C0;
  if (!qword_1000815C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000815C0);
  }
  return result;
}

unint64_t sub_100031BA4(uint64_t a1)
{
  unint64_t result = sub_100031BCC();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100031BCC()
{
  unint64_t result = qword_100081628;
  if (!qword_100081628)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100081628);
  }
  return result;
}

unint64_t sub_100031C20(uint64_t a1)
{
  unint64_t result = sub_100031C48();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100031C48()
{
  unint64_t result = qword_100081630;
  if (!qword_100081630)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100081630);
  }
  return result;
}

unint64_t sub_100031C9C(uint64_t a1)
{
  unint64_t result = sub_100031CC4();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100031CC4()
{
  unint64_t result = qword_100081690;
  if (!qword_100081690)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100081690);
  }
  return result;
}

unint64_t sub_100031D18(uint64_t a1)
{
  unint64_t result = sub_100031D40();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100031D40()
{
  unint64_t result = qword_1000816F0;
  if (!qword_1000816F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000816F0);
  }
  return result;
}

unint64_t sub_100031D94(uint64_t a1)
{
  unint64_t result = sub_100031DBC();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100031DBC()
{
  unint64_t result = qword_100081750;
  if (!qword_100081750)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100081750);
  }
  return result;
}

unint64_t sub_100031E10(uint64_t a1)
{
  unint64_t result = sub_100031E38();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100031E38()
{
  unint64_t result = qword_1000817B0;
  if (!qword_1000817B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000817B0);
  }
  return result;
}

unint64_t sub_100031E8C(uint64_t a1)
{
  unint64_t result = sub_100031EB4();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100031EB4()
{
  unint64_t result = qword_100081810;
  if (!qword_100081810)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100081810);
  }
  return result;
}

unint64_t sub_100031F08(uint64_t a1)
{
  unint64_t result = sub_100031F30();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100031F30()
{
  unint64_t result = qword_100081870;
  if (!qword_100081870)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100081870);
  }
  return result;
}

unint64_t sub_100031F84(uint64_t a1)
{
  unint64_t result = sub_100031FAC();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100031FAC()
{
  unint64_t result = qword_1000818D0;
  if (!qword_1000818D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000818D0);
  }
  return result;
}

unint64_t sub_100032000(uint64_t a1)
{
  unint64_t result = sub_100032028();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100032028()
{
  unint64_t result = qword_100081930;
  if (!qword_100081930)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100081930);
  }
  return result;
}

ValueMetadata *type metadata accessor for PPM_0_2_1.RealNumberType()
{
  return &type metadata for PPM_0_2_1.RealNumberType;
}

unsigned char *initializeBufferWithCopyOfBuffer for PPM_0_2_1.QueryType.EnumValue(unsigned char *result, unsigned char *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t _s14RealNumberTypeV9EnumValueOwet(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *_s14RealNumberTypeV9EnumValueOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000321FCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PPM_0_2_1.RealNumberType.EnumValue()
{
  return &type metadata for PPM_0_2_1.RealNumberType.EnumValue;
}

uint64_t _s10RealNumberVwet(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && a1[33]) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 4;
  int v5 = v3 - 4;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t _s10RealNumberVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)unint64_t result = a2 - 253;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2) {
      *(unsigned char *)unint64_t result = a2 + 3;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PPM_0_2_1.RealNumber()
{
  return &type metadata for PPM_0_2_1.RealNumber;
}

__n128 _s10RealNumberV22RealNumberTypeSelectorVwcp(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t _s10RealNumberV22RealNumberTypeSelectorVwet(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t _s10RealNumberV22RealNumberTypeSelectorVwst(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 25) = v3;
  return result;
}

ValueMetadata *type metadata accessor for PPM_0_2_1.RealNumber.RealNumberTypeSelector()
{
  return &type metadata for PPM_0_2_1.RealNumber.RealNumberTypeSelector;
}

uint64_t getEnumTagSinglePayload for PPM_0_2_1.Role(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && a1[8]) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 4;
  int v5 = v3 - 4;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for PPM_0_2_1.Role(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(void *)__n128 result = a2 - 253;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(unsigned char *)__n128 result = a2 + 3;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PPM_0_2_1.RealNumber.RealNumberTypeSelector.CodingParameter()
{
  return &type metadata for PPM_0_2_1.RealNumber.RealNumberTypeSelector.CodingParameter;
}

ValueMetadata *type metadata accessor for PPM_0_2_1.RealNumber.CodingParameter()
{
  return &type metadata for PPM_0_2_1.RealNumber.CodingParameter;
}

uint64_t _s11DPMechanismVwet(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xF9 && a1[8]) {
    return (*(_DWORD *)a1 + 249);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 8;
  int v5 = v3 - 8;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t _s11DPMechanismVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF8)
  {
    *(void *)__n128 result = a2 - 249;
    if (a3 >= 0xF9) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0xF9) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(unsigned char *)__n128 result = a2 + 7;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PPM_0_2_1.DPMechanism()
{
  return &type metadata for PPM_0_2_1.DPMechanism;
}

uint64_t _s11DPMechanismV9EnumValueOwet(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF9) {
    goto LABEL_17;
  }
  if (a2 + 7 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 7) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 7;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 8;
  int v8 = v6 - 8;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *_s11DPMechanismV9EnumValueOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *__n128 result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000325D8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 7;
        break;
    }
  }
  return result;
}

uint64_t sub_100032600(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_100032608(unsigned char *result, char a2)
{
  *__n128 result = a2;
  return result;
}

ValueMetadata *type metadata accessor for PPM_0_2_1.DPMechanism.EnumValue()
{
  return &type metadata for PPM_0_2_1.DPMechanism.EnumValue;
}

__n128 _s16EpsDeltaDPConfigVwcp(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t _s16EpsDeltaDPConfigVwet(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && a1[73]) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 4;
  int v5 = v3 - 4;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t _s16EpsDeltaDPConfigVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 72) = 0;
    *(void *)__n128 result = a2 - 253;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 73) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 73) = 0;
    }
    if (a2) {
      *(unsigned char *)__n128 result = a2 + 3;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PPM_0_2_1.EpsDeltaDPConfig()
{
  return &type metadata for PPM_0_2_1.EpsDeltaDPConfig;
}

_DWORD *_s16EpsDeltaDPConfigV15CodingParameterVwCP(_DWORD *result, _DWORD *a2)
{
  *__n128 result = *a2;
  return result;
}

uint64_t _s16EpsDeltaDPConfigV15CodingParameterVwet(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 4)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t _s16EpsDeltaDPConfigV15CodingParameterVwst(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_DWORD *)__n128 result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 4) = v3;
  return result;
}

ValueMetadata *type metadata accessor for PPM_0_2_1.EpsDeltaDPConfig.CodingParameter()
{
  return &type metadata for PPM_0_2_1.EpsDeltaDPConfig.CodingParameter;
}

__n128 _s13RenyiDPConfigVwcp(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t _s13RenyiDPConfigVwet(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 41)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  BOOL v4 = v3 >= 4;
  int v5 = v3 - 4;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t _s13RenyiDPConfigVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 40) = 0;
    *(void *)__n128 result = a2 - 253;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 41) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = a2 + 3;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PPM_0_2_1.RenyiDPConfig()
{
  return &type metadata for PPM_0_2_1.RenyiDPConfig;
}

uint64_t _s13RenyiDPConfigV15CodingParameterVwst(uint64_t result, int a2, int a3)
{
  if ((a3 + 0xFFFF) <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if ((a3 + 0xFFFF) < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    unsigned int v6 = ((a2 - 1) >> 16) + 1;
    *(_WORD *)__n128 result = a2 - 1;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = v6;
        return result;
      case 2:
        *(_WORD *)(result + 2) = v6;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)(result + 2) = v6;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *(unsigned char *)(result + 2) = 0;
      break;
    case 2:
      *(_WORD *)(result + 2) = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1000328C0);
    case 4:
      *(_DWORD *)(result + 2) = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for PPM_0_2_1.RenyiDPConfig.CodingParameter()
{
  return &type metadata for PPM_0_2_1.RenyiDPConfig.CodingParameter;
}

__n128 _s34AggregatorDiscreteGaussianDpConfigVwcp(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  __n128 result = *(__n128 *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 137) = *(_OWORD *)(a2 + 137);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t _s34AggregatorDiscreteGaussianDpConfigVwet(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && a1[153]) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 4;
  int v5 = v3 - 4;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t _s34AggregatorDiscreteGaussianDpConfigVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 152) = 0;
    *(void *)__n128 result = a2 - 253;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 153) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 153) = 0;
    }
    if (a2) {
      *(unsigned char *)__n128 result = a2 + 3;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PPM_0_2_1.AggregatorDiscreteGaussianDpConfig()
{
  return &type metadata for PPM_0_2_1.AggregatorDiscreteGaussianDpConfig;
}

void *_s34AggregatorDiscreteGaussianDpConfigV15CodingParameterVwCP(void *result, void *a2)
{
  *__n128 result = *a2;
  return result;
}

uint64_t _s34AggregatorDiscreteGaussianDpConfigV15CodingParameterVwst(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 8) = v3;
  return result;
}

ValueMetadata *type metadata accessor for PPM_0_2_1.AggregatorDiscreteGaussianDpConfig.CodingParameter()
{
  return &type metadata for PPM_0_2_1.AggregatorDiscreteGaussianDpConfig.CodingParameter;
}

__n128 _s55AggregatorDiscreteGaussianClientSymmetricRapporDpConfigVwcp(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  long long v5 = *(_OWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = v6;
  __n128 result = *(__n128 *)(a2 + 144);
  long long v9 = *(_OWORD *)(a2 + 160);
  long long v10 = *(_OWORD *)(a2 + 176);
  *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 176) = v10;
  *(__n128 *)(a1 + 144) = result;
  return result;
}

uint64_t _s55AggregatorDiscreteGaussianClientSymmetricRapporDpConfigVwet(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && a1[193]) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 4;
  int v5 = v3 - 4;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t _s55AggregatorDiscreteGaussianClientSymmetricRapporDpConfigVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(void *)(result + 184) = 0;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 192) = 0;
    *(void *)__n128 result = a2 - 253;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 193) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 193) = 0;
    }
    if (a2) {
      *(unsigned char *)__n128 result = a2 + 3;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PPM_0_2_1.AggregatorDiscreteGaussianClientSymmetricRapporDpConfig()
{
  return &type metadata for PPM_0_2_1.AggregatorDiscreteGaussianClientSymmetricRapporDpConfig;
}

uint64_t _s55AggregatorDiscreteGaussianClientSymmetricRapporDpConfigV15CodingParameterVwCP(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_DWORD *)(result + 7) = *(_DWORD *)((char *)a2 + 7);
  *(void *)__n128 result = v2;
  return result;
}

uint64_t _s55AggregatorDiscreteGaussianClientSymmetricRapporDpConfigV15CodingParameterVwet(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 11)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t _s55AggregatorDiscreteGaussianClientSymmetricRapporDpConfigV15CodingParameterVwst(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(unsigned char *)(result + 10) = 0;
    *(_WORD *)(result + 8) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 11) = v3;
  return result;
}

ValueMetadata *type metadata accessor for PPM_0_2_1.AggregatorDiscreteGaussianClientSymmetricRapporDpConfig.CodingParameter()
{
  return &type metadata for PPM_0_2_1.AggregatorDiscreteGaussianClientSymmetricRapporDpConfig.CodingParameter;
}

__n128 _s56DistributedGaussianWithSubsampledMomentsAccountantConfigVwcp(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  long long v5 = a2[4];
  long long v6 = a2[5];
  long long v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  __n128 result = (__n128)a2[8];
  long long v9 = a2[9];
  long long v10 = a2[10];
  *(_OWORD *)(a1 + 169) = *(long long *)((char *)a2 + 169);
  *(_OWORD *)(a1 + 144) = v9;
  *(_OWORD *)(a1 + 160) = v10;
  *(__n128 *)(a1 + 128) = result;
  return result;
}

uint64_t _s56DistributedGaussianWithSubsampledMomentsAccountantConfigVwet(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 185)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
  BOOL v4 = v3 >= 4;
  int v5 = v3 - 4;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t _s56DistributedGaussianWithSubsampledMomentsAccountantConfigVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 184) = 0;
    *(void *)__n128 result = a2 - 253;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 185) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 185) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 32) = a2 + 3;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PPM_0_2_1.DistributedGaussianWithSubsampledMomentsAccountantConfig()
{
  return &type metadata for PPM_0_2_1.DistributedGaussianWithSubsampledMomentsAccountantConfig;
}

ValueMetadata *type metadata accessor for PPM_0_2_1.DistributedGaussianWithSubsampledMomentsAccountantConfig.CodingParameter()
{
  return &type metadata for PPM_0_2_1.DistributedGaussianWithSubsampledMomentsAccountantConfig.CodingParameter;
}

void *_s8DPConfigVwcp(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x2D9uLL);
}

uint64_t _s8DPConfigVwet(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFC && *(unsigned char *)(a1 + 729)) {
    return (*(_DWORD *)a1 + 252);
  }
  if (*(unsigned __int8 *)(a1 + 16) <= 4u) {
    int v3 = 4;
  }
  else {
    int v3 = *(unsigned __int8 *)(a1 + 16);
  }
  int v4 = v3 - 5;
  if (*(unsigned __int8 *)(a1 + 16) < 4u) {
    int v5 = -1;
  }
  else {
    int v5 = v4;
  }
  return (v5 + 1);
}

uint64_t _s8DPConfigVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 728) = 0;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)__n128 result = a2 - 252;
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 729) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 729) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = a2 + 4;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PPM_0_2_1.DPConfig()
{
  return &type metadata for PPM_0_2_1.DPConfig;
}

void *_s8DPConfigV19DPMechanismSelectorVwcp(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x2D1uLL);
}

uint64_t _s8DPConfigV19DPMechanismSelectorVwet(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFC && *(unsigned char *)(a1 + 721)) {
    return (*(_DWORD *)a1 + 252);
  }
  if (*(unsigned __int8 *)(a1 + 8) <= 4u) {
    int v3 = 4;
  }
  else {
    int v3 = *(unsigned __int8 *)(a1 + 8);
  }
  int v4 = v3 - 5;
  if (*(unsigned __int8 *)(a1 + 8) < 4u) {
    int v5 = -1;
  }
  else {
    int v5 = v4;
  }
  return (v5 + 1);
}

uint64_t _s8DPConfigV19DPMechanismSelectorVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(void *)(result + 712) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 720) = 0;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)__n128 result = a2 - 252;
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 721) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 721) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = a2 + 4;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PPM_0_2_1.DPConfig.DPMechanismSelector()
{
  return &type metadata for PPM_0_2_1.DPConfig.DPMechanismSelector;
}

__n128 _s8DPConfigV19DPMechanismSelectorV15CodingParameterVwcp(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t _s8DPConfigV19DPMechanismSelectorV15CodingParameterVwet(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xF9 && a1[48]) {
    return (*(_DWORD *)a1 + 249);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 8;
  int v5 = v3 - 8;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t _s8DPConfigV19DPMechanismSelectorV15CodingParameterVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF8)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 249;
    if (a3 >= 0xF9) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if (a3 >= 0xF9) {
      *(unsigned char *)(result + 48) = 0;
    }
    if (a2) {
      *(unsigned char *)__n128 result = a2 + 7;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PPM_0_2_1.DPConfig.DPMechanismSelector.CodingParameter()
{
  return &type metadata for PPM_0_2_1.DPConfig.DPMechanismSelector.CodingParameter;
}

__n128 _s8DPConfigV15CodingParameterVwcp(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t _s8DPConfigV15CodingParameterVwet(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 41)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t _s8DPConfigV15CodingParameterVwst(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 40) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 41) = v3;
  return result;
}

ValueMetadata *type metadata accessor for PPM_0_2_1.DPConfig.CodingParameter()
{
  return &type metadata for PPM_0_2_1.DPConfig.CodingParameter;
}

uint64_t _s8VDAFTypeVwet(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xF4 && a1[8]) {
    return (*(_DWORD *)a1 + 244);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 0xD;
  int v5 = v3 - 13;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t _s8VDAFTypeVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF3)
  {
    *(void *)__n128 result = a2 - 244;
    if (a3 >= 0xF4) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0xF4) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(unsigned char *)__n128 result = a2 + 12;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PPM_0_2_1.VDAFType()
{
  return &type metadata for PPM_0_2_1.VDAFType;
}

uint64_t _s8VDAFTypeV9EnumValueOwet(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF4) {
    goto LABEL_17;
  }
  if (a2 + 12 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 12) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 12;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 12;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 12;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xD;
  int v8 = v6 - 13;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *_s8VDAFTypeV9EnumValueOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 12 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 12) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF3)
  {
    unsigned int v6 = ((a2 - 244) >> 8) + 1;
    *__n128 result = a2 + 12;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000332CCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 12;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PPM_0_2_1.VDAFType.EnumValue()
{
  return &type metadata for PPM_0_2_1.VDAFType.EnumValue;
}

__n128 _s18PrioPiRapporConfigVwcp(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t _s18PrioPiRapporConfigVwet(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 81)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  BOOL v4 = v3 >= 4;
  int v5 = v3 - 4;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t _s18PrioPiRapporConfigVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 80) = 0;
    *(void *)__n128 result = a2 - 253;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 81) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 81) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = a2 + 3;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PPM_0_2_1.PrioPiRapporConfig()
{
  return &type metadata for PPM_0_2_1.PrioPiRapporConfig;
}

ValueMetadata *type metadata accessor for PPM_0_2_1.PrioPiRapporConfig.CodingParameter()
{
  return &type metadata for PPM_0_2_1.PrioPiRapporConfig.CodingParameter;
}

uint64_t _s20Prio3HistogramConfigVwet(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

ValueMetadata *type metadata accessor for PPM_0_2_1.Prio3HistogramConfig()
{
  return &type metadata for PPM_0_2_1.Prio3HistogramConfig;
}

uint64_t _s17Prio3SumVecConfigVwCP(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  *(void *)__n128 result = v2;
  return result;
}

uint64_t _s17Prio3SumVecConfigVwet(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 12)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t _s17Prio3SumVecConfigVwst(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_DWORD *)(result + 8) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 12) = v3;
  return result;
}

ValueMetadata *type metadata accessor for PPM_0_2_1.Prio3SumVecConfig()
{
  return &type metadata for PPM_0_2_1.Prio3SumVecConfig;
}

void *_s27Prio3SumVecMultiproofConfigVwCP(void *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(void *)((char *)result + 5) = *(uint64_t *)((char *)a2 + 5);
  *__n128 result = v2;
  return result;
}

uint64_t _s27Prio3SumVecMultiproofConfigVwst(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(unsigned char *)(result + 12) = 0;
    *(_DWORD *)(result + 8) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 13) = v3;
  return result;
}

ValueMetadata *type metadata accessor for PPM_0_2_1.Prio3SumVecMultiproofConfig()
{
  return &type metadata for PPM_0_2_1.Prio3SumVecMultiproofConfig;
}

__n128 _s10PINEConfigVwcp(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 14) = *(_OWORD *)(a2 + 14);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t _s10PINEConfigVwet(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 30)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t _s10PINEConfigVwst(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(_WORD *)(result + 28) = 0;
    *(_DWORD *)(result + 24) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 30) = v3;
  return result;
}

ValueMetadata *type metadata accessor for PPM_0_2_1.PINEConfig()
{
  return &type metadata for PPM_0_2_1.PINEConfig;
}

uint64_t destroy for PPM_0_2_1.Url(uint64_t a1)
{
  return sub_100016B2C(*(void *)a1, *(void *)(a1 + 8));
}

uint64_t *_s10VDAFConfigVwcp(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_100016E5C(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  a1[2] = a2[2];
  memcpy(a1 + 3, a2 + 3, 0x10FuLL);
  return a1;
}

uint64_t _s10VDAFConfigVwca(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_100016E5C(*a2, v5);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  sub_100016B2C(v6, v7);
  *(unsigned char *)(a1 + 16) = *((unsigned char *)v2 + 16);
  *(_DWORD *)(a1 + 20) = *((_DWORD *)v2 + 5);
  char v8 = *((unsigned char *)v2 + 24);
  v2 += 3;
  *(unsigned char *)(a1 + 24) = v8;
  *(_WORD *)(a1 + 25) = *(_WORD *)((char *)v2 + 1);
  uint64_t v9 = *(uint64_t *)((char *)v2 + 4);
  *(void *)(a1 + 33) = *(uint64_t *)((char *)v2 + 9);
  *(void *)(a1 + 28) = v9;
  uint64_t v10 = *(uint64_t *)((char *)v2 + 20);
  *(unsigned char *)(a1 + 52) = *((unsigned char *)v2 + 28);
  *(void *)(a1 + 44) = v10;
  LOWORD(v10) = *((_WORD *)v2 + 15);
  *(unsigned char *)(a1 + 56) = *((unsigned char *)v2 + 32);
  *(_WORD *)(a1 + 54) = v10;
  LODWORD(v10) = *((_DWORD *)v2 + 9);
  *(unsigned char *)(a1 + 64) = *((unsigned char *)v2 + 40);
  *(_DWORD *)(a1 + 60) = v10;
  LODWORD(v10) = *((_DWORD *)v2 + 11);
  *(unsigned char *)(a1 + 72) = *((unsigned char *)v2 + 48);
  *(_DWORD *)(a1 + 68) = v10;
  long long v11 = *(_OWORD *)(v2 + 13);
  long long v12 = *(_OWORD *)(v2 + 15);
  long long v13 = *(_OWORD *)(v2 + 11);
  *(unsigned char *)(a1 + 160) = *((unsigned char *)v2 + 136);
  *(_OWORD *)(a1 + 128) = v11;
  *(_OWORD *)(a1 + 144) = v12;
  *(_OWORD *)(a1 + 112) = v13;
  long long v14 = *(_OWORD *)(v2 + 9);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(v2 + 7);
  *(_OWORD *)(a1 + 96) = v14;
  uint64_t v15 = *(uint64_t *)((char *)v2 + 140);
  *(void *)(a1 + 170) = *(uint64_t *)((char *)v2 + 146);
  *(void *)(a1 + 164) = v15;
  uint64_t v16 = *(uint64_t *)((char *)v2 + 156);
  *(void *)(a1 + 186) = *(uint64_t *)((char *)v2 + 162);
  *(void *)(a1 + 180) = v16;
  long long v17 = *((_OWORD *)v2 + 11);
  *(_OWORD *)(a1 + 215) = *(_OWORD *)((char *)v2 + 191);
  *(_OWORD *)(a1 + 200) = v17;
  long long v18 = *((_OWORD *)v2 + 13);
  *(_OWORD *)(a1 + 247) = *(_OWORD *)((char *)v2 + 223);
  *(_OWORD *)(a1 + 232) = v18;
  long long v19 = *((_OWORD *)v2 + 15);
  *(_OWORD *)(a1 + 279) = *(_OWORD *)((char *)v2 + 255);
  *(_OWORD *)(a1 + 264) = v19;
  return a1;
}

void *_s10VDAFConfigVwtk(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x127uLL);
}

uint64_t _s10VDAFConfigVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_100016B2C(v4, v5);
  char v6 = *(unsigned char *)(a2 + 24);
  a2 += 24;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 - 8);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 - 4);
  *(unsigned char *)(a1 + 24) = v6;
  *(_WORD *)(a1 + 25) = *(_WORD *)(a2 + 1);
  *(void *)(a1 + 28) = *(void *)(a2 + 4);
  *(void *)(a1 + 33) = *(void *)(a2 + 9);
  *(void *)(a1 + 44) = *(void *)(a2 + 20);
  *(unsigned char *)(a1 + 52) = *(unsigned char *)(a2 + 28);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 32);
  *(_WORD *)(a1 + 54) = *(_WORD *)(a2 + 30);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 36);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 40);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 44);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 48);
  long long v7 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 120);
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 136);
  long long v8 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 96) = v8;
  *(void *)(a1 + 170) = *(void *)(a2 + 146);
  *(void *)(a1 + 164) = *(void *)(a2 + 140);
  *(void *)(a1 + 186) = *(void *)(a2 + 162);
  *(void *)(a1 + 180) = *(void *)(a2 + 156);
  *(_OWORD *)(a1 + 215) = *(_OWORD *)(a2 + 191);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 247) = *(_OWORD *)(a2 + 223);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 208);
  long long v9 = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 279) = *(_OWORD *)(a2 + 255);
  *(_OWORD *)(a1 + 264) = v9;
  return a1;
}

uint64_t _s10VDAFConfigVwet(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFC && *(unsigned char *)(a1 + 295)) {
    return (*(_DWORD *)a1 + 252);
  }
  if (*(unsigned __int8 *)(a1 + 88) <= 4u) {
    int v3 = 4;
  }
  else {
    int v3 = *(unsigned __int8 *)(a1 + 88);
  }
  int v4 = v3 - 5;
  if (*(unsigned __int8 *)(a1 + 88) < 4u) {
    int v5 = -1;
  }
  else {
    int v5 = v4;
  }
  return (v5 + 1);
}

uint64_t _s10VDAFConfigVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(void *)(result + 280) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 294) = 0;
    *(_WORD *)(result + 292) = 0;
    *(_DWORD *)(result + 288) = 0;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)__n128 result = a2 - 252;
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 295) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 295) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 88) = a2 + 4;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PPM_0_2_1.VDAFConfig()
{
  return &type metadata for PPM_0_2_1.VDAFConfig;
}

void *_s10VDAFConfigV16VDAFTypeSelectorVwcp(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x10FuLL);
}

uint64_t _s10VDAFConfigV16VDAFTypeSelectorVwet(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFC && *(unsigned char *)(a1 + 271)) {
    return (*(_DWORD *)a1 + 252);
  }
  if (*(unsigned __int8 *)(a1 + 64) <= 4u) {
    int v3 = 4;
  }
  else {
    int v3 = *(unsigned __int8 *)(a1 + 64);
  }
  int v4 = v3 - 5;
  if (*(unsigned __int8 *)(a1 + 64) < 4u) {
    int v5 = -1;
  }
  else {
    int v5 = v4;
  }
  return (v5 + 1);
}

uint64_t _s10VDAFConfigV16VDAFTypeSelectorVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 270) = 0;
    *(_WORD *)(result + 268) = 0;
    *(_DWORD *)(result + 264) = 0;
    *(void *)__n128 result = a2 - 252;
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 271) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 271) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 64) = a2 + 4;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PPM_0_2_1.VDAFConfig.VDAFTypeSelector()
{
  return &type metadata for PPM_0_2_1.VDAFConfig.VDAFTypeSelector;
}

__n128 _s10VDAFConfigV16VDAFTypeSelectorV15CodingParameterVwCP(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u32[0] = a2[1].n128_u32[0];
  *a1 = result;
  return result;
}

uint64_t _s10VDAFConfigV16VDAFTypeSelectorV15CodingParameterVwet(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xF4 && a1[20]) {
    return (*(_DWORD *)a1 + 244);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 0xD;
  int v5 = v3 - 13;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t _s10VDAFConfigV16VDAFTypeSelectorV15CodingParameterVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF3)
  {
    *(_DWORD *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 244;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xF4) {
      *(unsigned char *)(result + 20) = 1;
    }
  }
  else
  {
    if (a3 >= 0xF4) {
      *(unsigned char *)(result + 20) = 0;
    }
    if (a2) {
      *(unsigned char *)__n128 result = a2 + 12;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PPM_0_2_1.VDAFConfig.VDAFTypeSelector.CodingParameter()
{
  return &type metadata for PPM_0_2_1.VDAFConfig.VDAFTypeSelector.CodingParameter;
}

void *_s10VDAFConfigV15CodingParameterVwCP(void *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(void *)((char *)result + 5) = *(uint64_t *)((char *)a2 + 5);
  *__n128 result = v2;
  return result;
}

uint64_t _s10VDAFConfigV15CodingParameterVwet(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 13)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

ValueMetadata *type metadata accessor for PPM_0_2_1.VDAFConfig.CodingParameter()
{
  return &type metadata for PPM_0_2_1.VDAFConfig.CodingParameter;
}

id _DPDediscoAlgorithmParameters.__allocating_init(dimension:epsilon:otherParams:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  long long v9 = (char *)objc_allocWithZone(v4);
  *(void *)&v9[OBJC_IVAR____DPDediscoAlgorithmParameters_dimension] = a1;
  *(double *)&v9[OBJC_IVAR____DPDediscoAlgorithmParameters_epsilon] = a4;
  uint64_t v10 = &v9[OBJC_IVAR____DPDediscoAlgorithmParameters_otherParams];
  *(void *)uint64_t v10 = a2;
  *((void *)v10 + 1) = a3;
  v12.receiver = v9;
  v12.super_class = v4;
  return objc_msgSendSuper2(&v12, "init");
}

id _DPDediscoAlgorithmParameters.init(dimension:epsilon:otherParams:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  *(void *)&v4[OBJC_IVAR____DPDediscoAlgorithmParameters_dimension] = a1;
  *(double *)&v4[OBJC_IVAR____DPDediscoAlgorithmParameters_epsilon] = a4;
  int v5 = &v4[OBJC_IVAR____DPDediscoAlgorithmParameters_otherParams];
  *(void *)int v5 = a2;
  *((void *)v5 + 1) = a3;
  v7.receiver = v4;
  v7.super_class = (Class)type metadata accessor for _DPDediscoAlgorithmParameters();
  return objc_msgSendSuper2(&v7, "init");
}

uint64_t type metadata accessor for _DPDediscoAlgorithmParameters()
{
  return self;
}

id _DPDediscoAlgorithmParameters.__allocating_init(dimension:epsilon:)(uint64_t a1, double a2)
{
  int v5 = (char *)objc_allocWithZone(v2);
  *(void *)&v5[OBJC_IVAR____DPDediscoAlgorithmParameters_dimension] = a1;
  *(double *)&v5[OBJC_IVAR____DPDediscoAlgorithmParameters_epsilon] = a2;
  *(_OWORD *)&v5[OBJC_IVAR____DPDediscoAlgorithmParameters_otherParams] = xmmword_10005EF00;
  v7.receiver = v5;
  v7.super_class = v2;
  return objc_msgSendSuper2(&v7, "init");
}

id _DPDediscoAlgorithmParameters.init(dimension:epsilon:)(uint64_t a1, double a2)
{
  *(void *)&v2[OBJC_IVAR____DPDediscoAlgorithmParameters_dimension] = a1;
  *(double *)&v2[OBJC_IVAR____DPDediscoAlgorithmParameters_epsilon] = a2;
  *(_OWORD *)&v2[OBJC_IVAR____DPDediscoAlgorithmParameters_otherParams] = xmmword_10005EF00;
  v4.receiver = v2;
  v4.super_class = (Class)type metadata accessor for _DPDediscoAlgorithmParameters();
  return objc_msgSendSuper2(&v4, "init");
}

void *sub_100033E64(void *result, uint64_t a2)
{
  *__n128 result = *(void *)(a2 + OBJC_IVAR____DPDediscoAlgorithmParameters_dimension);
  result[1] = *(void *)(a2 + OBJC_IVAR____DPDediscoAlgorithmParameters_epsilon);
  uint64_t v2 = (uint64_t *)(a2 + OBJC_IVAR____DPDediscoAlgorithmParameters_otherParams);
  unint64_t v3 = *(void *)(a2 + OBJC_IVAR____DPDediscoAlgorithmParameters_otherParams + 8);
  if (v3 >> 60 != 15)
  {
    objc_super v4 = result;
    uint64_t v5 = *v2;
    uint64_t v6 = result[2];
    unint64_t v7 = result[3];
    sub_100016E5C(*v2, *(void *)(a2 + OBJC_IVAR____DPDediscoAlgorithmParameters_otherParams + 8));
    __n128 result = (void *)sub_100016B2C(v6, v7);
    uint64_t v4[2] = v5;
    v4[3] = v3;
  }
  return result;
}

void _DPDediscoAlgorithmParameters.init()()
{
}

id _DPDediscoAlgorithmParameters.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for _DPDediscoAlgorithmParameters();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_100033FA4(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_100016B2C(a1, a2);
  }
  return a1;
}

uint64_t TLSEnumType.init(enumValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v18 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v10 = (char *)&v18 - v9;
  (*(void (**)(uint64_t, uint64_t))(a3 + 48))(a2, a3);
  sub_100016C98(&qword_100081978);
  uint64_t v11 = a1;
  swift_getAssociatedConformanceWitness();
  sub_100059170();
  swift_bridgeObjectRelease();
  if (v20)
  {
    uint64_t v19 = 0;
    unint64_t v20 = 0xE000000000000000;
    v21._countAndFlagsBits = 0x203A65756C6176;
    v21._object = (void *)0xE700000000000000;
    sub_1000591F0(v21);
    sub_1000593E0();
    v22._countAndFlagsBits = 46;
    v22._object = (void *)0xE100000000000000;
    sub_1000591F0(v22);
    v23._countAndFlagsBits = v19;
    objc_super v12 = (void *)v20;
    uint64_t v19 = 0xD000000000000036;
    unint64_t v20 = 0x8000000100062470;
    v23._object = v12;
    sub_1000591F0(v23);
    swift_bridgeObjectRelease();
    uint64_t v13 = v19;
    unint64_t v14 = v20;
    sub_10001FA84();
    swift_allocError();
    *(void *)uint64_t v15 = v13;
    *(void *)(v15 + 8) = v14;
    *(unsigned char *)(v15 + 16) = 2;
    swift_willThrow();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v11, AssociatedTypeWitness);
  }
  else
  {
    uint64_t v17 = v19;
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, AssociatedTypeWitness);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(a3 + 88))(v10, v17, a2, a3);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(a1, AssociatedTypeWitness);
  }
}

uint64_t TLSEnumType.encode<A>(into:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_100035128(a1, a3, a4, a5, a6);
}

uint64_t TLSEnumType.init<A>(from:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)(a5 + 8) + 16))(a3);
  unint64_t v12 = sub_100022BFC();
  uint64_t result = CommonUIntTLSNumberType.init<A>(from:with:encodedLength:)(v11, (uint64_t)&type metadata for UInt32, a4, v12, a6, (uint64_t)&v14);
  if (!v6) {
    return (*(uint64_t (**)(void, uint64_t, uint64_t))(a5 + 80))(v14, a3, a5);
  }
  return result;
}

uint64_t sub_10003434C@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100034ECC(a1, (uint64_t (*)(void))sub_10001C240, a2);
}

uint64_t sub_100034378@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100034B40(a1, &qword_100080A08, &static PPM_0_2_1.RealNumberType.rangesByEnumVals, a2);
}

uint64_t TLSEnumType.init(rawValue:)@<X0>(unsigned int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v60 = a1;
  uint64_t v45 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v8 = __chkstk_darwin(AssociatedTypeWitness);
  long long v44 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v42 - v10;
  sub_10001FB5C(&qword_100081978);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v57 = sub_1000592D0();
  __int16 v55 = *(void (***)(char *, char *, uint64_t))(v57 - 8);
  uint64_t v13 = __chkstk_darwin(v57);
  uint64_t v15 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v42 - v16;
  uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 48);
  uint64_t v46 = a2;
  uint64_t v47 = a3;
  uint64_t result = v18(a2, a3);
  int64_t v20 = 0;
  uint64_t v21 = *(void *)(result + 64);
  uint64_t v48 = result + 64;
  uint64_t v22 = 1 << *(unsigned char *)(result + 32);
  uint64_t v23 = -1;
  if (v22 < 64) {
    uint64_t v23 = ~(-1 << v22);
  }
  unint64_t v24 = v23 & v21;
  uint64_t v51 = (void (**)(char *, char *, uint64_t))(v7 + 16);
  uint64_t v52 = result;
  v55 += 4;
  uint64_t v56 = TupleTypeMetadata2 - 8;
  int64_t v49 = (unint64_t)(v22 + 63) >> 6;
  uint64_t v50 = v7;
  char v53 = (void (**)(char *, char *, uint64_t))(v7 + 32);
  int v54 = (void (**)(char *, uint64_t))(v7 + 8);
  int64_t v43 = v49 - 1;
  if ((v23 & v21) == 0) {
    goto LABEL_6;
  }
LABEL_4:
  unint64_t v25 = __clz(__rbit64(v24));
  v24 &= v24 - 1;
  int64_t v26 = v20;
  unint64_t v27 = v25 | (v20 << 6);
LABEL_5:
  uint64_t v28 = v52;
  (*(void (**)(char *, unint64_t, uint64_t))(v50 + 16))(v15, *(void *)(v52 + 48) + *(void *)(v50 + 72) * v27, AssociatedTypeWitness);
  uint64_t v29 = 0;
  *(void *)&v15[*(int *)(TupleTypeMetadata2 + 48)] = *(void *)(*(void *)(v28 + 56) + 8 * v27);
  while (1)
  {
    while (1)
    {
LABEL_12:
      uint64_t v32 = *(void *)(TupleTypeMetadata2 - 8);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v32 + 56))(v15, v29, 1, TupleTypeMetadata2);
      (*v55)(v17, v15, v57);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v17, 1, TupleTypeMetadata2) == 1)
      {
        swift_release();
        unint64_t v58 = 0;
        unint64_t v59 = 0xE000000000000000;
        sub_100059370(48);
        swift_bridgeObjectRelease();
        unint64_t v58 = 0xD00000000000002ELL;
        unint64_t v59 = 0x8000000100062B10;
        unsigned int v61 = v60;
        v62._countAndFlagsBits = sub_1000593D0();
        sub_1000591F0(v62);
        swift_bridgeObjectRelease();
        unint64_t v38 = v58;
        unint64_t v39 = v59;
        sub_10001FA84();
        swift_allocError();
        *(void *)uint64_t v40 = v38;
        *(void *)(v40 + 8) = v39;
        *(unsigned char *)(v40 + 16) = 2;
        return swift_willThrow();
      }
      uint64_t v33 = &v17[*(int *)(TupleTypeMetadata2 + 48)];
      unsigned int v34 = *(_DWORD *)v33;
      unsigned int v35 = *((_DWORD *)v33 + 1);
      (*v53)(v11, v17, AssociatedTypeWitness);
      if (v34 <= v60 && v35 >= v60)
      {
        long long v41 = v44;
        (*v51)(v44, v11, AssociatedTypeWitness);
        (*(void (**)(char *, void, uint64_t))(v47 + 88))(v41, v60, v46);
        (*v54)(v11, AssociatedTypeWitness);
        return swift_release();
      }
      uint64_t result = ((uint64_t (*)(char *, uint64_t))*v54)(v11, AssociatedTypeWitness);
      int64_t v20 = v26;
      if (v24) {
        goto LABEL_4;
      }
LABEL_6:
      int64_t v30 = v20 + 1;
      if (__OFADD__(v20, 1))
      {
        __break(1u);
        goto LABEL_34;
      }
      if (v30 >= v49)
      {
        int64_t v26 = v20;
        goto LABEL_11;
      }
      unint64_t v31 = *(void *)(v48 + 8 * v30);
      if (v31) {
        goto LABEL_9;
      }
      int64_t v26 = v20 + 2;
      if (v20 + 2 < v49) {
        break;
      }
      unint64_t v24 = 0;
      uint64_t v29 = 1;
      int64_t v26 = v20 + 1;
    }
    unint64_t v31 = *(void *)(v48 + 8 * v26);
    if (v31)
    {
      int64_t v30 = v20 + 2;
LABEL_9:
      unint64_t v24 = (v31 - 1) & v31;
      unint64_t v27 = __clz(__rbit64(v31)) + (v30 << 6);
      int64_t v26 = v30;
      goto LABEL_5;
    }
    uint64_t v37 = v20 + 3;
    if (v20 + 3 < v49) {
      break;
    }
LABEL_11:
    unint64_t v24 = 0;
    uint64_t v29 = 1;
  }
  unint64_t v31 = *(void *)(v48 + 8 * v37);
  if (v31)
  {
    int64_t v30 = v20 + 3;
    goto LABEL_9;
  }
  while (1)
  {
    int64_t v30 = v37 + 1;
    if (__OFADD__(v37, 1)) {
      break;
    }
    if (v30 >= v49)
    {
      unint64_t v24 = 0;
      uint64_t v29 = 1;
      int64_t v26 = v43;
      goto LABEL_12;
    }
    unint64_t v31 = *(void *)(v48 + 8 * v30);
    ++v37;
    if (v31) {
      goto LABEL_9;
    }
  }
LABEL_34:
  __break(1u);
  return result;
}

uint64_t static TLSEnumType.encodedLength.getter(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(void))(a2 + 40))();
  double v3 = ceil((double)(32 - __clz(result)) * 0.125);
  if ((~*(void *)&v3 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v3 <= -9.22337204e18)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v3 < 9.22337204e18) {
    return (uint64_t)v3;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t sub_100034A14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9 = sub_100030150();
  return sub_100035128(a1, a5, a3, v9, a4);
}

uint64_t sub_100034A74(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v9 = sub_100030150();
  return TLSEnumType.init<A>(from:with:)(a1, v10, a5, a3, v9, a4);
}

uint64_t sub_100034ADC@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100034ECC(a1, (uint64_t (*)(void))sub_10001C280, a2);
}

uint64_t sub_100034B08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100034B40(a1, &qword_100080A10, &static PPM_0_2_1.DPMechanism.rangesByEnumVals, a2);
}

uint64_t sub_100034B40@<X0>(uint64_t a1@<X0>, void *a2@<X3>, uint64_t *a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t result = sub_100035454(a1, a2, a3);
  if (!v4)
  {
    *(unsigned char *)a4 = result;
    *(_DWORD *)(a4 + 4) = HIDWORD(result);
  }
  return result;
}

uint64_t sub_100034B80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9 = sub_100030A18();
  return sub_100035128(a1, a5, a3, v9, a4);
}

uint64_t sub_100034BE0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v9 = sub_100030A18();
  return TLSEnumType.init<A>(from:with:)(a1, v10, a5, a3, v9, a4);
}

uint64_t sub_100034C48@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100034ECC(a1, (uint64_t (*)(void))sub_10001C2C0, a2);
}

uint64_t sub_100034C74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100034B40(a1, &qword_100080A18, &static PPM_0_2_1.VDAFType.rangesByEnumVals, a2);
}

uint64_t sub_100034CAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9 = sub_10003102C();
  return sub_100035128(a1, a5, a3, v9, a4);
}

uint64_t sub_100034D0C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v9 = sub_10003102C();
  return TLSEnumType.init<A>(from:with:)(a1, v10, a5, a3, v9, a4);
}

uint64_t sub_100034D74@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100034ECC(a1, (uint64_t (*)(void))sub_10001C300, a2);
}

uint64_t sub_100034DA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100034B40(a1, &qword_100080A20, &static PPM_0_2_1.Role.rangesByEnumVals, a2);
}

uint64_t sub_100034DD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9 = sub_100035664();
  return sub_100035128(a1, a5, a3, v9, a4);
}

uint64_t sub_100034E38(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v9 = sub_100035664();
  return TLSEnumType.init<A>(from:with:)(a1, v10, a5, a3, v9, a4);
}

uint64_t sub_100034EA0@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100034ECC(a1, (uint64_t (*)(void))sub_10001C340, a2);
}

uint64_t sub_100034ECC@<X0>(unsigned __int8 *a1@<X0>, uint64_t (*a2)(void)@<X3>, uint64_t a3@<X8>)
{
  uint64_t result = a2(*a1);
  if (!v3)
  {
    *(unsigned char *)a3 = result;
    *(_DWORD *)(a3 + 4) = HIDWORD(result);
  }
  return result;
}

uint64_t sub_100034F08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100034B40(a1, &qword_100080A28, &static PPM_0_2_1.QueryType.rangesByEnumVals, a2);
}

uint64_t sub_100034F40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9 = sub_100024844();
  return sub_100035128(a1, a5, a3, v9, a4);
}

uint64_t sub_100034FA0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v9 = sub_100024844();
  return TLSEnumType.init<A>(from:with:)(a1, v10, a5, a3, v9, a4);
}

uint64_t sub_100035008@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result = sub_10001C4E4();
  if (!v1) {
    *a1 = result;
  }
  return result;
}

uint64_t sub_100035034@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result = sub_100035238(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_100035060(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9 = sub_1000351E4();
  return sub_100035128(a1, a5, a3, v9, a4);
}

uint64_t sub_1000350C0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v9 = sub_1000351E4();
  return TLSEnumType.init<A>(from:with:)(a1, v10, a5, a3, v9, a4);
}

uint64_t sub_100035128(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  (*(void (**)(uint64_t, uint64_t))(a4 + 64))(a2, a4);
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)(a4 + 8) + 16))(a2);
  unint64_t v11 = sub_100022BFC();
  return sub_100020EB0(v10, a1, (uint64_t)&type metadata for UInt32, a3, v11, a5);
}

unint64_t sub_1000351E4()
{
  unint64_t result = qword_100081980;
  if (!qword_100081980)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100081980);
  }
  return result;
}

uint64_t sub_100035238(uint64_t a1)
{
  if (qword_100080A30 != -1) {
LABEL_27:
  }
    swift_once();
  swift_beginAccess();
  int64_t v2 = 0;
  uint64_t v3 = static PPM_0_2_1.ExtensionType.rangesByEnumVals + 64;
  uint64_t v4 = 1 << *(unsigned char *)(static PPM_0_2_1.ExtensionType.rangesByEnumVals + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(static PPM_0_2_1.ExtensionType.rangesByEnumVals + 64);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  while (v6)
  {
    unint64_t v8 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
    unint64_t v9 = v8 | (v2 << 6);
LABEL_6:
    uint64_t v10 = (unsigned int *)(*(void *)(static PPM_0_2_1.ExtensionType.rangesByEnumVals + 56) + 8 * v9);
    unsigned int v12 = *v10;
    unsigned int v11 = v10[1];
    if (v12 <= a1 && v11 >= a1) {
      return a1;
    }
  }
  int64_t v14 = v2 + 1;
  if (__OFADD__(v2, 1))
  {
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (v14 >= v7) {
    goto LABEL_23;
  }
  unint64_t v15 = *(void *)(v3 + 8 * v14);
  ++v2;
  if (v15) {
    goto LABEL_22;
  }
  int64_t v2 = v14 + 1;
  if (v14 + 1 >= v7) {
    goto LABEL_23;
  }
  unint64_t v15 = *(void *)(v3 + 8 * v2);
  if (v15)
  {
LABEL_22:
    unint64_t v17 = __clz(__rbit64(v15));
    unint64_t v6 = (v15 - 1) & v15;
    unint64_t v9 = v17 + (v2 << 6);
    goto LABEL_6;
  }
  int64_t v16 = v14 + 2;
  if (v16 < v7)
  {
    unint64_t v15 = *(void *)(v3 + 8 * v16);
    if (!v15)
    {
      while (1)
      {
        int64_t v2 = v16 + 1;
        if (__OFADD__(v16, 1)) {
          goto LABEL_26;
        }
        if (v2 >= v7) {
          goto LABEL_23;
        }
        unint64_t v15 = *(void *)(v3 + 8 * v2);
        ++v16;
        if (v15) {
          goto LABEL_22;
        }
      }
    }
    int64_t v2 = v16;
    goto LABEL_22;
  }
LABEL_23:
  sub_100059370(48);
  swift_bridgeObjectRelease();
  v20._countAndFlagsBits = sub_1000593D0();
  sub_1000591F0(v20);
  swift_bridgeObjectRelease();
  sub_10001FA84();
  swift_allocError();
  *(void *)uint64_t v18 = 0xD00000000000002ELL;
  *(void *)(v18 + 8) = 0x8000000100062B10;
  *(unsigned char *)(v18 + 16) = 2;
  swift_willThrow();
  return a1;
}

uint64_t sub_100035454(uint64_t a1, void *a2, uint64_t *a3)
{
  if (*a2 != -1) {
LABEL_27:
  }
    swift_once();
  swift_beginAccess();
  int64_t v5 = 0;
  uint64_t v6 = *a3;
  uint64_t v7 = *a3 + 64;
  uint64_t v8 = 1 << *(unsigned char *)(*a3 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & *(void *)(*a3 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  while (v10)
  {
    unint64_t v12 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    unint64_t v13 = v12 | (v5 << 6);
LABEL_6:
    int64_t v14 = (unsigned int *)(*(void *)(v6 + 56) + 8 * v13);
    unsigned int v16 = *v14;
    unsigned int v15 = v14[1];
    if (v16 <= a1 && v15 >= a1) {
      return *(unsigned __int8 *)(*(void *)(v6 + 48) + v13) | (unint64_t)(a1 << 32);
    }
  }
  int64_t v18 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (v18 >= v11) {
    goto LABEL_24;
  }
  unint64_t v19 = *(void *)(v7 + 8 * v18);
  ++v5;
  if (v19) {
    goto LABEL_22;
  }
  int64_t v5 = v18 + 1;
  if (v18 + 1 >= v11) {
    goto LABEL_24;
  }
  unint64_t v19 = *(void *)(v7 + 8 * v5);
  if (v19)
  {
LABEL_22:
    unint64_t v21 = __clz(__rbit64(v19));
    unint64_t v10 = (v19 - 1) & v19;
    unint64_t v13 = v21 + (v5 << 6);
    goto LABEL_6;
  }
  int64_t v20 = v18 + 2;
  if (v20 < v11)
  {
    unint64_t v19 = *(void *)(v7 + 8 * v20);
    if (!v19)
    {
      while (1)
      {
        int64_t v5 = v20 + 1;
        if (__OFADD__(v20, 1)) {
          goto LABEL_26;
        }
        if (v5 >= v11) {
          goto LABEL_24;
        }
        unint64_t v19 = *(void *)(v7 + 8 * v5);
        ++v20;
        if (v19) {
          goto LABEL_22;
        }
      }
    }
    int64_t v5 = v20;
    goto LABEL_22;
  }
LABEL_24:
  sub_100059370(48);
  swift_bridgeObjectRelease();
  v24._countAndFlagsBits = sub_1000593D0();
  sub_1000591F0(v24);
  swift_bridgeObjectRelease();
  sub_10001FA84();
  swift_allocError();
  *(void *)uint64_t v23 = 0xD00000000000002ELL;
  *(void *)(v23 + 8) = 0x8000000100062B10;
  *(unsigned char *)(v23 + 16) = 2;
  return swift_willThrow();
}

unint64_t sub_100035664()
{
  unint64_t result = qword_100081988;
  if (!qword_100081988)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100081988);
  }
  return result;
}

id _DPDediscoPayload.__allocating_init(collectionId:algorithm:algorithmParameters:fsEncryptedShare:dsEncryptedShare:fsPublicKey:dsPublicKey:versionHash:report:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  Swift::String v24 = (char *)objc_allocWithZone(v17);
  unint64_t v25 = &v24[OBJC_IVAR____DPDediscoPayload_collectionId];
  *(void *)unint64_t v25 = a1;
  *((void *)v25 + 1) = a2;
  int64_t v26 = &v24[OBJC_IVAR____DPDediscoPayload_algorithm];
  *(void *)int64_t v26 = a3;
  *((void *)v26 + 1) = a4;
  *(void *)&v24[OBJC_IVAR____DPDediscoPayload_algorithmParameters] = a5;
  unint64_t v27 = &v24[OBJC_IVAR____DPDediscoPayload_fsEncryptedShare];
  *(void *)unint64_t v27 = a6;
  *((void *)v27 + 1) = a7;
  uint64_t v28 = &v24[OBJC_IVAR____DPDediscoPayload_dsEncryptedShare];
  *(void *)uint64_t v28 = a8;
  *((void *)v28 + 1) = a9;
  uint64_t v29 = &v24[OBJC_IVAR____DPDediscoPayload_fsPublicKey];
  *(void *)uint64_t v29 = a10;
  *((void *)v29 + 1) = a11;
  int64_t v30 = &v24[OBJC_IVAR____DPDediscoPayload_dsPublicKey];
  *(void *)int64_t v30 = a12;
  *((void *)v30 + 1) = a13;
  unint64_t v31 = &v24[OBJC_IVAR____DPDediscoPayload_versionHash];
  *(void *)unint64_t v31 = a14;
  *((void *)v31 + 1) = a15;
  uint64_t v32 = &v24[OBJC_IVAR____DPDediscoPayload_report];
  *(void *)uint64_t v32 = a16;
  *((void *)v32 + 1) = a17;
  v36.receiver = v24;
  v36.super_class = v17;
  return objc_msgSendSuper2(&v36, "init");
}

id _DPDediscoPayload.init(collectionId:algorithm:algorithmParameters:fsEncryptedShare:dsEncryptedShare:fsPublicKey:dsPublicKey:versionHash:report:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  int64_t v18 = &v17[OBJC_IVAR____DPDediscoPayload_collectionId];
  *(void *)int64_t v18 = a1;
  *((void *)v18 + 1) = a2;
  unint64_t v19 = &v17[OBJC_IVAR____DPDediscoPayload_algorithm];
  *(void *)unint64_t v19 = a3;
  *((void *)v19 + 1) = a4;
  *(void *)&v17[OBJC_IVAR____DPDediscoPayload_algorithmParameters] = a5;
  int64_t v20 = &v17[OBJC_IVAR____DPDediscoPayload_fsEncryptedShare];
  *(void *)int64_t v20 = a6;
  *((void *)v20 + 1) = a7;
  unint64_t v21 = &v17[OBJC_IVAR____DPDediscoPayload_dsEncryptedShare];
  *(void *)unint64_t v21 = a8;
  *((void *)v21 + 1) = a9;
  uint64_t v22 = &v17[OBJC_IVAR____DPDediscoPayload_fsPublicKey];
  *(void *)uint64_t v22 = a10;
  *((void *)v22 + 1) = a11;
  uint64_t v23 = &v17[OBJC_IVAR____DPDediscoPayload_dsPublicKey];
  *(void *)uint64_t v23 = a12;
  *((void *)v23 + 1) = a13;
  Swift::String v24 = &v17[OBJC_IVAR____DPDediscoPayload_versionHash];
  *(void *)Swift::String v24 = a14;
  *((void *)v24 + 1) = a15;
  unint64_t v25 = &v17[OBJC_IVAR____DPDediscoPayload_report];
  *(void *)unint64_t v25 = a16;
  *((void *)v25 + 1) = a17;
  v27.receiver = v17;
  v27.super_class = (Class)type metadata accessor for _DPDediscoPayload();
  return objc_msgSendSuper2(&v27, "init");
}

uint64_t type metadata accessor for _DPDediscoPayload()
{
  return self;
}

uint64_t sub_100035AA4(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DediscoDonation.AlgorithmParameters(0);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(a2 + OBJC_IVAR____DPDediscoPayload_collectionId);
  uint64_t v8 = *(void *)(a2 + OBJC_IVAR____DPDediscoPayload_collectionId + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *a1 = v9;
  a1[1] = v8;
  uint64_t v11 = *(void *)(a2 + OBJC_IVAR____DPDediscoPayload_algorithm);
  uint64_t v10 = *(void *)(a2 + OBJC_IVAR____DPDediscoPayload_algorithm + 8);
  swift_bridgeObjectRetain();
  uint64_t v12 = swift_bridgeObjectRelease();
  a1[2] = v11;
  a1[3] = v10;
  unint64_t v13 = *(void **)(a2 + OBJC_IVAR____DPDediscoPayload_algorithmParameters);
  if (v13)
  {
    v37[1] = v37;
    __chkstk_darwin(v12);
    v37[-2] = v13;
    sub_1000363B8(&qword_100081A08, (void (*)(uint64_t))type metadata accessor for DediscoDonation.AlgorithmParameters);
    id v38 = v13;
    sub_100058F60();
    uint64_t v14 = (uint64_t)a1 + *(int *)(type metadata accessor for DediscoDonation(0) + 52);
    sub_100036400(v14);
    sub_100036460((uint64_t)v7, v14);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v14, 0, 1, v4);
  }
  unsigned int v15 = (uint64_t *)(a2 + OBJC_IVAR____DPDediscoPayload_fsEncryptedShare);
  unint64_t v16 = *(void *)(a2 + OBJC_IVAR____DPDediscoPayload_fsEncryptedShare + 8);
  if (v16 >> 60 != 15)
  {
    uint64_t v17 = *v15;
    uint64_t v18 = a1[4];
    unint64_t v19 = a1[5];
    sub_100016E5C(*v15, *(void *)(a2 + OBJC_IVAR____DPDediscoPayload_fsEncryptedShare + 8));
    sub_100016B2C(v18, v19);
    a1[4] = v17;
    a1[5] = v16;
  }
  int64_t v20 = (uint64_t *)(a2 + OBJC_IVAR____DPDediscoPayload_dsEncryptedShare);
  unint64_t v21 = *(void *)(a2 + OBJC_IVAR____DPDediscoPayload_dsEncryptedShare + 8);
  if (v21 >> 60 != 15)
  {
    uint64_t v22 = *v20;
    uint64_t v23 = a1[6];
    unint64_t v24 = a1[7];
    sub_100016E5C(*v20, *(void *)(a2 + OBJC_IVAR____DPDediscoPayload_dsEncryptedShare + 8));
    sub_100016B2C(v23, v24);
    a1[6] = v22;
    a1[7] = v21;
  }
  uint64_t v25 = *(void *)(a2 + OBJC_IVAR____DPDediscoPayload_fsPublicKey);
  uint64_t v26 = *(void *)(a2 + OBJC_IVAR____DPDediscoPayload_fsPublicKey + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = v25;
  a1[9] = v26;
  uint64_t v27 = *(void *)(a2 + OBJC_IVAR____DPDediscoPayload_dsPublicKey);
  uint64_t v28 = *(void *)(a2 + OBJC_IVAR____DPDediscoPayload_dsPublicKey + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[10] = v27;
  a1[11] = v28;
  uint64_t v29 = *(void *)(a2 + OBJC_IVAR____DPDediscoPayload_versionHash);
  uint64_t v30 = *(void *)(a2 + OBJC_IVAR____DPDediscoPayload_versionHash + 8);
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  a1[12] = v29;
  a1[13] = v30;
  uint64_t v32 = (uint64_t *)(a2 + OBJC_IVAR____DPDediscoPayload_report);
  unint64_t v33 = *(void *)(a2 + OBJC_IVAR____DPDediscoPayload_report + 8);
  if (v33 >> 60 != 15)
  {
    uint64_t v34 = *v32;
    uint64_t v35 = a1[14];
    unint64_t v36 = a1[15];
    sub_100016E5C(*v32, v33);
    uint64_t result = sub_100016B2C(v35, v36);
    a1[14] = v34;
    a1[15] = v33;
  }
  return result;
}

uint64_t _DPDediscoPayload.serialize()()
{
  uint64_t v1 = type metadata accessor for DediscoDonation(0);
  __chkstk_darwin(v1);
  uint64_t v3 = &v6[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = v0;
  sub_1000363B8(&qword_1000819D8, (void (*)(uint64_t))type metadata accessor for DediscoDonation);
  sub_100058F60();
  uint64_t v4 = sub_100058F30();
  sub_100035F40((uint64_t)v3);
  return v4;
}

uint64_t sub_100035F24(void *a1)
{
  return sub_100035AA4(a1, *(void *)(v1 + 16));
}

uint64_t sub_100035F40(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DediscoDonation(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void _DPDediscoPayload.init()()
{
}

id _DPDediscoPayload.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for _DPDediscoPayload();
  return objc_msgSendSuper2(&v2, "dealloc");
}

void *sub_10003639C(void *a1)
{
  return sub_100033E64(a1, *(void *)(v1 + 16));
}

uint64_t sub_1000363B8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100036400(uint64_t a1)
{
  uint64_t v2 = sub_100016C98(&qword_100081A10);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100036460(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DediscoDonation.AlgorithmParameters(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000364C4(void *a1)
{
  return sub_100035F24(a1);
}

uint64_t RandomAccessCollection<>.popFirst(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 - 8);
  __chkstk_darwin(a1);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v2, a2);
  sub_100059250();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 32))(v6, v2, a2);
  return sub_100059260();
}

uint64_t TLSCodable.encodedBytes()(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = sub_1000592D0();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v11 - v7;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))((char *)&v11 - v7, 1, 1, AssociatedTypeWitness);
  uint64_t v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(a2 + 56))(v8, a1, a2);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return v9;
}

uint64_t TLSEmpty.init<A>(from:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return PPM_0_2_1.QueryType.enumValue.getter(a1, a3, a4);
}

Swift::Int __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> TLSTypeWithFixedEncodedLength.encodedLength(with:)(Swift::Void_optional with)
{
  return (*(uint64_t (**)())(v1 + 16))();
}

uint64_t sub_1000367CC()
{
  uint64_t result = PPM_0_2_1.RealNumber.RealNumberTypeSelector.encodedLength(with:)(*(unsigned char *)v0, *(unsigned __int16 *)(v0 + 8) | (*(unsigned __int8 *)(v0 + 10) << 16), *(unsigned char *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
  uint64_t v3 = result;
  if (!v1)
  {
    ++result;
    if (__OFADD__(v3, 1)) {
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_10003683C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = sub_10002F828(a1, a2, a3, a4);
  if (!v5)
  {
    uint64_t v7 = result;
    uint64_t result = PPM_0_2_1.RealNumber.RealNumberTypeSelector.encodedLength(with:)(*(unsigned char *)(v4 + 160), *(unsigned __int16 *)(v4 + 168) | ((*(unsigned char *)(v4 + 170) & 1) << 16), *(unsigned char *)(v4 + 176) & 1, *(void *)(v4 + 184), *(unsigned char *)(v4 + 192) & 1);
    uint64_t v8 = result + 1;
    if (!__OFADD__(result, 1))
    {
      uint64_t result = v7 + v8;
      if (!__OFADD__(v7, v8)) {
        return result;
      }
      __break(1u);
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_100036914()
{
  uint64_t v2 = *v0;
  uint64_t v3 = v0 + 8;
  uint64_t v4 = *((unsigned int *)v0 + 1);
  memcpy(__dst, v3, sizeof(__dst));
  long long v9 = xmmword_10005DFF0;
  long long v10 = xmmword_10005E000;
  uint64_t v8 = v2 | (v4 << 32);
  uint64_t v11 = 0x100000000000000;
  uint64_t result = PPM_0_2_1.DPConfig.DPMechanismSelector.encodedLength(with:)((uint64_t)&v8);
  if (!v1 && __OFADD__(result++, 1)) {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000369B4(uint64_t a1, unint64_t a2)
{
  unint64_t v5 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_12;
      }
      unint64_t v5 = HIDWORD(a1) - (int)a1;
LABEL_6:
      sub_100016E5C(a1, a2);
LABEL_7:
      sub_10003B748(v5, 0x1000000010uLL);
      if (v2) {
        return sub_100016B2C(a1, a2);
      }
      uint64_t v9 = sub_10003B948(0x1000000010);
      sub_100016B2C(a1, a2);
      uint64_t result = v5 + v9;
      if (__OFADD__(v5, v9))
      {
        __break(1u);
LABEL_12:
        __break(1u);
LABEL_13:
        __break(1u);
        JUMPOUT(0x100036AA0);
      }
      return result;
    case 2uLL:
      uint64_t v7 = *(void *)(a1 + 16);
      uint64_t v6 = *(void *)(a1 + 24);
      unint64_t v5 = v6 - v7;
      if (!__OFSUB__(v6, v7)) {
        goto LABEL_6;
      }
      goto LABEL_13;
    case 3uLL:
      goto LABEL_7;
    default:
      unint64_t v5 = BYTE6(a2);
      goto LABEL_7;
  }
}

uint64_t sub_100036AB0(uint64_t a1, unint64_t a2)
{
  unint64_t v5 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_12;
      }
      unint64_t v5 = HIDWORD(a1) - (int)a1;
LABEL_6:
      sub_100016E5C(a1, a2);
LABEL_7:
      sub_10003B748(v5, 0x2000000020uLL);
      if (v2) {
        return sub_100016B2C(a1, a2);
      }
      uint64_t v9 = sub_10003B948(0x2000000020);
      sub_100016B2C(a1, a2);
      uint64_t result = v5 + v9;
      if (__OFADD__(v5, v9))
      {
        __break(1u);
LABEL_12:
        __break(1u);
LABEL_13:
        __break(1u);
        JUMPOUT(0x100036B9CLL);
      }
      return result;
    case 2uLL:
      uint64_t v7 = *(void *)(a1 + 16);
      uint64_t v6 = *(void *)(a1 + 24);
      unint64_t v5 = v6 - v7;
      if (!__OFSUB__(v6, v7)) {
        goto LABEL_6;
      }
      goto LABEL_13;
    case 3uLL:
      goto LABEL_7;
    default:
      unint64_t v5 = BYTE6(a2);
      goto LABEL_7;
  }
}

uint64_t sub_100036BAC(uint64_t a1, unint64_t a2)
{
  unint64_t v5 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_12;
      }
      unint64_t v5 = HIDWORD(a1) - (int)a1;
LABEL_6:
      sub_100016E5C(a1, a2);
LABEL_7:
      sub_10003B748(v5, 0xFFFF00000001uLL);
      if (v2) {
        return sub_100016B2C(a1, a2);
      }
      uint64_t v9 = sub_10003B948(0xFFFF00000001);
      sub_100016B2C(a1, a2);
      uint64_t result = v5 + v9;
      if (__OFADD__(v5, v9))
      {
        __break(1u);
LABEL_12:
        __break(1u);
LABEL_13:
        __break(1u);
        JUMPOUT(0x100036CA0);
      }
      return result;
    case 2uLL:
      uint64_t v7 = *(void *)(a1 + 16);
      uint64_t v6 = *(void *)(a1 + 24);
      unint64_t v5 = v6 - v7;
      if (!__OFSUB__(v6, v7)) {
        goto LABEL_6;
      }
      goto LABEL_13;
    case 3uLL:
      goto LABEL_7;
    default:
      unint64_t v5 = BYTE6(a2);
      goto LABEL_7;
  }
}

uint64_t sub_100036CB0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = 0;
  switch(a3 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a2), a2)) {
        goto LABEL_14;
      }
      unint64_t v6 = HIDWORD(a2) - (int)a2;
LABEL_6:
      sub_100016E5C(a2, a3);
LABEL_7:
      sub_10003B748(v6, 0xFFFF00000001uLL);
      if (v3) {
        return sub_100016B2C(a2, a3);
      }
      uint64_t v10 = sub_10003B948(0xFFFF00000001);
      sub_100016B2C(a2, a3);
      unint64_t v11 = v6 + v10;
      if (__OFADD__(v6, v10))
      {
        __break(1u);
        goto LABEL_13;
      }
      uint64_t result = v11 + 7;
      if (__OFADD__(v11, 7))
      {
LABEL_13:
        __break(1u);
LABEL_14:
        __break(1u);
LABEL_15:
        __break(1u);
        JUMPOUT(0x100036DB0);
      }
      return result;
    case 2uLL:
      uint64_t v8 = *(void *)(a2 + 16);
      uint64_t v7 = *(void *)(a2 + 24);
      unint64_t v6 = v7 - v8;
      if (!__OFSUB__(v7, v8)) {
        goto LABEL_6;
      }
      goto LABEL_15;
    case 3uLL:
      goto LABEL_7;
    default:
      unint64_t v6 = BYTE6(a3);
      goto LABEL_7;
  }
}

uint64_t sub_100036DC0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = 0;
  switch(a3 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a2), a2)) {
        goto LABEL_14;
      }
      unint64_t v6 = HIDWORD(a2) - (int)a2;
LABEL_6:
      sub_100016E5C(a2, a3);
LABEL_7:
      sub_10003B748(v6, 0xFFFF00000000uLL);
      if (v3) {
        return sub_100016B2C(a2, a3);
      }
      uint64_t v10 = sub_10003B948(0xFFFF00000000);
      sub_100016B2C(a2, a3);
      unint64_t v11 = v6 + v10;
      if (__OFADD__(v6, v10))
      {
        __break(1u);
        goto LABEL_13;
      }
      uint64_t result = v11 + 2;
      if (__OFADD__(v11, 2))
      {
LABEL_13:
        __break(1u);
LABEL_14:
        __break(1u);
LABEL_15:
        __break(1u);
        JUMPOUT(0x100036EB8);
      }
      return result;
    case 2uLL:
      uint64_t v8 = *(void *)(a2 + 16);
      uint64_t v7 = *(void *)(a2 + 24);
      unint64_t v6 = v7 - v8;
      if (!__OFSUB__(v7, v8)) {
        goto LABEL_6;
      }
      goto LABEL_15;
    case 3uLL:
      goto LABEL_7;
    default:
      unint64_t v6 = BYTE6(a3);
      goto LABEL_7;
  }
}

uint64_t sub_100036EC8(uint64_t a1, unint64_t a2)
{
  unint64_t v5 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_14;
      }
      unint64_t v5 = HIDWORD(a1) - (int)a1;
LABEL_6:
      sub_100016E5C(a1, a2);
LABEL_7:
      sub_10003B748(v5, 0x1000000010uLL);
      if (v2) {
        return sub_100016B2C(a1, a2);
      }
      uint64_t v9 = sub_10003B948(0x1000000010);
      sub_100016B2C(a1, a2);
      unint64_t v10 = v5 + v9;
      if (__OFADD__(v5, v9))
      {
        __break(1u);
        goto LABEL_13;
      }
      uint64_t result = v10 + 8;
      if (__OFADD__(v10, 8))
      {
LABEL_13:
        __break(1u);
LABEL_14:
        __break(1u);
LABEL_15:
        __break(1u);
        JUMPOUT(0x100036FC0);
      }
      return result;
    case 2uLL:
      uint64_t v7 = *(void *)(a1 + 16);
      uint64_t v6 = *(void *)(a1 + 24);
      unint64_t v5 = v6 - v7;
      if (!__OFSUB__(v6, v7)) {
        goto LABEL_6;
      }
      goto LABEL_15;
    case 3uLL:
      goto LABEL_7;
    default:
      unint64_t v5 = BYTE6(a2);
      goto LABEL_7;
  }
}

Swift::Int __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> TLSCodable.encodedLength()()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = sub_1000592D0();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v11 - v7;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))((char *)&v11 - v7, 1, 1, AssociatedTypeWitness);
  Swift::Int v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v2 + 24))(v8, v3, v2);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return v9;
}

uint64_t sub_10003712C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return TLSCodable.encode<A>(into:)(a1, a4, a2, a5, a3);
}

uint64_t TLSCodable.encode<A>(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = sub_1000592D0();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v16 - v13;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))((char *)&v16 - v13, 1, 1, AssociatedTypeWitness);
  (*(void (**)(uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 40))(a1, v14, a3, a5, a2, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

uint64_t sub_1000372DC()
{
  char v2 = *v0;
  v4[0] = 0;
  sub_100019308(1uLL, (uint64_t)v4, v2);
  uint64_t result = v4[0];
  if (v1) {
    return sub_100016B2C(v4[0], v4[1]);
  }
  return result;
}

uint64_t TLSCodable.encodedBytes(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (*(uint64_t (**)(void))(a3 + 24))();
  if (!v3)
  {
    v11[0] = sub_10003A594(result);
    v11[1] = v8;
    Swift::Int v9 = *(void (**)(void *, uint64_t, void *, unint64_t, uint64_t, uint64_t))(a3 + 40);
    unint64_t v10 = sub_100024898();
    v9(v11, a1, &type metadata for Data, v10, a2, a3);
    return v11[0];
  }
  return result;
}

uint64_t sub_1000373D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return TLSCodable.init<A>(from:)(a1, a4, a2, a5, a3);
}

uint64_t TLSCodable.init<A>(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = sub_1000592D0();
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v15 - v12;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))((char *)&v15 - v12, 1, 1, AssociatedTypeWitness);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 72))(a1, v13, a3, a5, a2, a4);
}

uint64_t sub_10003752C()
{
  int v2 = *v0;
  v4[0] = 0;
  sub_100018F5C(2uLL, (uint64_t)v4, v2);
  uint64_t result = v4[0];
  if (v1) {
    return sub_100016B2C(v4[0], v4[1]);
  }
  return result;
}

uint64_t sub_100037578()
{
  unsigned int v2 = *v0;
  v4[0] = 0;
  sub_100018C78(4uLL, (uint64_t)v4, v2);
  uint64_t result = v4[0];
  if (v1) {
    return sub_100016B2C(v4[0], v4[1]);
  }
  return result;
}

uint64_t sub_1000375C4()
{
  unint64_t v2 = *v0;
  v4[0] = 0;
  sub_100018994(8uLL, (uint64_t)v4, v2);
  uint64_t result = v4[0];
  if (v1) {
    return sub_100016B2C(v4[0], v4[1]);
  }
  return result;
}

uint64_t sub_100037610()
{
  unsigned int v2 = *v0;
  v4[0] = 0;
  sub_100018C78(3uLL, (uint64_t)v4, v2);
  uint64_t result = v4[0];
  if (v1) {
    return sub_100016B2C(v4[0], v4[1]);
  }
  return result;
}

unint64_t sub_10003765C(unint64_t result, char a2, uint64_t a3, char a4)
{
  if (a2 != 3)
  {
    if (a2 == 1)
    {
      if ((a3 & 1) == 0) {
        return result;
      }
      sub_10001FA84();
      swift_allocError();
      unint64_t v6 = 0xD000000000000029;
    }
    else
    {
      if (a2 != 2)
      {
        sub_100059370(31);
        v8._object = (void *)0x8000000100062180;
        v8._countAndFlagsBits = 0xD00000000000001BLL;
        sub_1000591F0(v8);
        sub_100059380();
        v9._countAndFlagsBits = 11872;
        v9._object = (void *)0xE200000000000000;
        sub_1000591F0(v9);
        sub_10001FA84();
        swift_allocError();
        *(void *)uint64_t v4 = 0;
        *(void *)(v4 + 8) = 0xE000000000000000;
LABEL_12:
        char v5 = 4;
        goto LABEL_13;
      }
      if ((a4 & 1) == 0) {
        return sub_100018C78(4uLL, result, HIDWORD(a3));
      }
      sub_10001FA84();
      swift_allocError();
      unint64_t v6 = 0xD000000000000026;
    }
    *(void *)uint64_t v4 = v6;
    *(void *)(v4 + 8) = (unint64_t)(v7 - 32) | 0x8000000000000000;
    goto LABEL_12;
  }
  sub_10001FA84();
  swift_allocError();
  *(void *)uint64_t v4 = 0xD000000000000034;
  *(void *)(v4 + 8) = 0x8000000100062140;
  char v5 = 1;
LABEL_13:
  *(unsigned char *)(v4 + 16) = v5;
  return swift_willThrow();
}

uint64_t sub_100037848()
{
  sub_10001FA84();
  swift_allocError();
  *(void *)uint64_t v0 = 0xD000000000000034;
  *(void *)(v0 + 8) = 0x8000000100062140;
  *(unsigned char *)(v0 + 16) = 1;
  return swift_willThrow();
}

uint64_t sub_1000378B4(void *a1)
{
  return sub_1000197C0(*a1, *v1 | ((unint64_t)*((unsigned int *)v1 + 1) << 32), v1[8]);
}

uint64_t sub_1000378F4()
{
  return sub_1000197C0(3, *v0 | ((unint64_t)*((unsigned int *)v0 + 1) << 32), v0[8]);
}

uint64_t sub_100037934()
{
  long long v2 = v0[1];
  long long v6 = *v0;
  long long v7 = v2;
  char v8 = *((unsigned char *)v0 + 32);
  uint64_t result = sub_100023DEC();
  if (!v1)
  {
    v5[0] = sub_10003A594(result);
    v5[1] = v4;
    sub_10003A630((unint64_t)v5);
    return v5[0];
  }
  return result;
}

uint64_t sub_1000379A4()
{
  return sub_100017130();
}

uint64_t sub_1000379F0()
{
  return sub_10001D18C(*v0 | ((unint64_t)*((unsigned int *)v0 + 1) << 32));
}

uint64_t sub_100037A14(uint64_t a1, uint64_t a2)
{
  return sub_100039E0C(a1, a2, sub_10001D18C);
}

uint64_t sub_100037A40(uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *v1;
  unsigned __int8 v5 = *((unsigned char *)v1 + 2);
  char v6 = *((unsigned char *)v1 + 8);
  unint64_t v7 = *((void *)v1 + 2);
  char v8 = *((unsigned char *)v1 + 24);
  uint64_t v9 = *((unsigned int *)v1 + 1);
  LOBYTE(v12[0]) = v5;
  char v14 = v6;
  char v13 = v8;
  uint64_t result = PPM_0_2_1.RealNumber.RealNumberTypeSelector.encodedLength(with:)(v3, v4 | (v5 << 16), v6, v7, v8);
  if (!v2)
  {
    v12[0] = sub_10003A594(result);
    v12[1] = v11;
    char v14 = v5;
    char v13 = v6;
    sub_100019C9C((uint64_t)v12, v3, v4 | ((unint64_t)v5 << 16) | (v9 << 32), v6, v7, v8);
    return v12[0];
  }
  return result;
}

uint64_t sub_100037B20()
{
  return sub_1000367CC();
}

uint64_t sub_100037B5C()
{
  return sub_10001D06C();
}

uint64_t sub_100037B98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v6 = v4[3];
  long long v13 = v4[2];
  v14[0] = v6;
  *(_OWORD *)((char *)v14 + 9) = *(long long *)((char *)v4 + 57);
  long long v7 = v4[1];
  long long v11 = *v4;
  long long v12 = v7;
  uint64_t result = sub_10002F9A4(a1, a2, a3, a4);
  if (!v5)
  {
    v10[0] = sub_10003A594(result);
    v10[1] = v9;
    sub_10001C660((uint64_t)v10);
    return v10[0];
  }
  return result;
}

uint64_t sub_100037C10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10001D224(a1, a2, a3, a4);
}

uint64_t sub_100037C4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v6 = v4[7];
  long long v19 = v4[6];
  long long v20 = v6;
  v21[0] = v4[8];
  *(_OWORD *)((char *)v21 + 9) = *(long long *)((char *)v4 + 137);
  long long v7 = v4[3];
  long long v15 = v4[2];
  long long v16 = v7;
  long long v8 = v4[5];
  long long v17 = v4[4];
  long long v18 = v8;
  long long v9 = v4[1];
  long long v13 = *v4;
  long long v14 = v9;
  uint64_t result = sub_10002F828(a1, a2, a3, a4);
  if (!v5)
  {
    v12[0] = sub_10003A594(result);
    v12[1] = v11;
    sub_10001C77C((uint64_t)v12);
    return v12[0];
  }
  return result;
}

uint64_t sub_100037CDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10003683C(a1, a2, a3, a4);
}

uint64_t sub_100037D40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v6 = v4[10];
  long long v7 = v4[11];
  long long v8 = v4[8];
  long long v26 = v4[9];
  long long v27 = v6;
  long long v28 = v7;
  long long v10 = v4[6];
  long long v9 = v4[7];
  char v29 = *((unsigned char *)v4 + 192);
  long long v24 = v9;
  long long v25 = v8;
  long long v11 = v4[3];
  long long v19 = v4[2];
  long long v20 = v11;
  long long v12 = v4[4];
  long long v22 = v4[5];
  long long v23 = v10;
  long long v21 = v12;
  long long v13 = v4[1];
  long long v17 = *v4;
  long long v18 = v13;
  uint64_t result = sub_10002FAD8(a1, a2, a3, a4);
  if (!v5)
  {
    v16[0] = sub_10003A594(result);
    v16[1] = v15;
    sub_100019EE0((uint64_t)v16);
    return v16[0];
  }
  return result;
}

uint64_t sub_100037E18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10001724C(a1, a2, a3, a4);
}

uint64_t sub_100037E7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v6 = v4[9];
  long long v22 = v4[8];
  long long v23 = v6;
  v24[0] = v4[10];
  *(_OWORD *)((char *)v24 + 9) = *(long long *)((char *)v4 + 169);
  long long v7 = v4[5];
  long long v18 = v4[4];
  long long v19 = v7;
  long long v8 = v4[7];
  long long v20 = v4[6];
  long long v21 = v8;
  long long v9 = v4[1];
  long long v14 = *v4;
  long long v15 = v9;
  long long v10 = v4[3];
  long long v16 = v4[2];
  long long v17 = v10;
  uint64_t result = sub_10002FBA4(a1, a2, a3, a4);
  if (!v5)
  {
    v13[0] = sub_10003A594(result);
    v13[1] = v12;
    sub_10001C970((uint64_t)v13);
    return v13[0];
  }
  return result;
}

uint64_t sub_100037F14(uint64_t a1)
{
  sub_10001FBE4(a1, (uint64_t)v3, &qword_100080B58);
  memcpy(__dst, v1, sizeof(__dst));
  return sub_1000199B8((uint64_t)v3);
}

uint64_t sub_100037F74()
{
  memcpy(__dst, v0, sizeof(__dst));
  uint64_t v2 = 8;
  long long v3 = 0u;
  long long v4 = 0u;
  uint64_t v5 = 0;
  return sub_1000199B8((uint64_t)&v2);
}

uint64_t sub_100037FD8()
{
  memcpy(v2, v0, sizeof(v2));
  return sub_100036914();
}

uint64_t sub_100038024(uint64_t a1)
{
  sub_10001FBE4(a1, (uint64_t)v6, &qword_100080B98);
  memcpy(__dst, v1, sizeof(__dst));
  uint64_t result = PPM_0_2_1.DPConfig.encodedLength(with:)((uint64_t)v6);
  if (!v2)
  {
    v5[0] = sub_10003A594(result);
    v5[1] = v4;
    sub_10001A8D0((uint64_t)v5, (uint64_t)v6);
    return v5[0];
  }
  return result;
}

uint64_t sub_1000380BC()
{
  memcpy(v2, v0, sizeof(v2));
  return sub_100017368();
}

uint64_t sub_100038108()
{
  return sub_10001D79C(*v0 | ((unint64_t)*((unsigned int *)v0 + 1) << 32));
}

uint64_t sub_10003812C(uint64_t a1, uint64_t a2)
{
  return sub_100039E0C(a1, a2, sub_10001D79C);
}

uint64_t sub_100038158(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v6 = v4[3];
  long long v13 = v4[2];
  long long v14 = v6;
  long long v15 = v4[4];
  char v16 = *((unsigned char *)v4 + 80);
  long long v7 = v4[1];
  long long v11 = *v4;
  long long v12 = v7;
  uint64_t result = sub_10002FD20(a1, a2, a3, a4);
  if (!v5)
  {
    v10[0] = sub_10003A594(result);
    v10[1] = v9;
    sub_10001CBC0((uint64_t)v10);
    return v10[0];
  }
  return result;
}

uint64_t sub_1000381D8()
{
  unsigned int v2 = *v0;
  unsigned int v3 = v0[1];
  uint64_t v5 = 0;
  unint64_t v6 = 0;
  sub_100018C78(4uLL, (uint64_t)&v5, v2);
  if (v1) {
    return sub_100016B2C(v5, v6);
  }
  sub_100018C78(4uLL, (uint64_t)&v5, v3);
  return v5;
}

uint64_t sub_100038248()
{
  unsigned int v2 = *(_DWORD *)v0;
  char v3 = *(unsigned char *)(v0 + 4);
  unsigned int v4 = *(_DWORD *)(v0 + 8);
  v6[0] = 0;
  sub_100018C78(4uLL, (uint64_t)v6, v2);
  if (v1) {
    return sub_100016B2C(v6[0], v6[1]);
  }
  sub_100019308(1uLL, (uint64_t)v6, v3);
  sub_100018C78(4uLL, (uint64_t)v6, v4);
  return v6[0];
}

uint64_t sub_1000382E4()
{
  unsigned int v2 = *(_DWORD *)v0;
  char v3 = *(unsigned char *)(v0 + 4);
  unsigned int v4 = *(_DWORD *)(v0 + 8);
  char v5 = *(unsigned char *)(v0 + 12);
  uint64_t v7 = 0;
  unint64_t v8 = 0;
  sub_100018C78(4uLL, (uint64_t)&v7, v2);
  if (v1) {
    return sub_100016B2C(v7, v8);
  }
  sub_100019308(1uLL, (uint64_t)&v7, v3);
  sub_100018C78(4uLL, (uint64_t)&v7, v4);
  sub_100019308(1uLL, (uint64_t)&v7, v5);
  return v7;
}

uint64_t sub_1000383A0()
{
  return sub_10001CEEC(*(void *)v0, *(void *)(v0 + 8), *(void *)(v0 + 16), *(unsigned int *)(v0 + 24) | ((unint64_t)*(unsigned __int16 *)(v0 + 28) << 32));
}

uint64_t sub_1000383CC(uint64_t *a1)
{
  uint64_t v2 = *a1;
  memcpy(v4, v1, sizeof(v4));
  return sub_1000196B4(v2);
}

uint64_t sub_100038434()
{
  memcpy(v2, v0, sizeof(v2));
  return sub_1000196B4(13);
}

uint64_t sub_10003848C()
{
  memcpy(__dst, v0, 0x127uLL);
  __dst[311] = 1;
  return PPM_0_2_1.VDAFConfig.encodedLength(with:)();
}

uint64_t sub_1000384EC(uint64_t a1)
{
  char v3 = *(unsigned char *)(a1 + 13);
  memcpy(__dst, v1, sizeof(__dst));
  LOBYTE(v6[0]) = v3;
  uint64_t result = PPM_0_2_1.VDAFConfig.encodedLength(with:)();
  if (!v2)
  {
    v6[0] = sub_10003A594(result);
    v6[1] = v5;
    sub_10001B4D8(v6);
    return v6[0];
  }
  return result;
}

uint64_t sub_1000385A8()
{
  memcpy(__dst, v0, sizeof(__dst));
  return sub_10001745C();
}

uint64_t sub_100038604(uint64_t *a1, unint64_t a2, int a3, uint64_t a4)
{
  if ((a3 & 0x10000) != 0)
  {
    sub_10001FA84();
    swift_allocError();
    *(void *)uint64_t v11 = 0xD000000000000085;
    *(void *)(v11 + 8) = 0x80000001000627B0;
    char v12 = 1;
LABEL_5:
    *(unsigned char *)(v11 + 16) = v12;
    return swift_willThrow();
  }
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  uint64_t v10 = 0;
  switch(v7 >> 62)
  {
    case 1uLL:
      BOOL v14 = __OFSUB__(HIDWORD(v6), v6);
      int v15 = HIDWORD(v6) - v6;
      if (v14) {
        goto LABEL_90;
      }
      uint64_t v10 = v15;
LABEL_9:
      uint64_t result = sub_1000429E0(a2, (unsigned __int16)a3, a4);
      if (v4) {
        return result;
      }
      uint64_t v19 = result;
      BOOL v14 = __OFADD__(v10, result);
      Swift::Int v20 = v10 + result;
      if (v14) {
        goto LABEL_80;
      }
      sub_100058D50(v20);
      uint64_t result = sub_10003B948(a2);
      unint64_t v21 = v19 - result;
      if (__OFSUB__(v19, result)) {
        goto LABEL_81;
      }
      uint64_t v22 = result;
      if (result < 1) {
        goto LABEL_17;
      }
      if ((v21 & 0x8000000000000000) != 0) {
        goto LABEL_92;
      }
      if (HIDWORD(v21)) {
        goto LABEL_93;
      }
      uint64_t result = sub_100018C78(result, (uint64_t)a1, (int)v19 - (int)result);
LABEL_17:
      if (!*(void *)(a4 + 16)) {
        goto LABEL_51;
      }
      uint64_t v23 = *(void *)(a4 + 16);
      uint64_t v68 = v22;
      unint64_t v69 = v21;
      uint64_t v70 = v10;
      swift_bridgeObjectRetain();
      long long v24 = (unint64_t *)(a4 + 48);
      uint64_t v25 = v23;
      break;
    case 2uLL:
      uint64_t v18 = v6 + 16;
      uint64_t v16 = *(void *)(v6 + 16);
      uint64_t v17 = *(void *)(v18 + 8);
      uint64_t v10 = v17 - v16;
      if (!__OFSUB__(v17, v16)) {
        goto LABEL_9;
      }
      goto LABEL_91;
    case 3uLL:
      goto LABEL_9;
    default:
      uint64_t v10 = BYTE6(v7);
      goto LABEL_9;
  }
  while (2)
  {
    uint64_t v27 = *(v24 - 1);
    unint64_t v26 = *v24;
    unsigned int v28 = *((_DWORD *)v24 - 4);
    sub_100016E5C(v27, *v24);
    sub_100018C78(2uLL, (uint64_t)a1, v28);
    v24 += 3;
    unint64_t v29 = 0;
    switch(v26 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(v27), v27)) {
          goto LABEL_82;
        }
        unint64_t v29 = HIDWORD(v27) - (int)v27;
LABEL_26:
        sub_10003B748(v29, 0xFFFF00000000uLL);
        unint64_t v32 = v29 + 2;
        if (__OFADD__(v29, 2))
        {
          __break(1u);
LABEL_77:
          __break(1u);
LABEL_78:
          __break(1u);
LABEL_79:
          __break(1u);
LABEL_80:
          __break(1u);
LABEL_81:
          __break(1u);
LABEL_82:
          __break(1u);
LABEL_83:
          __break(1u);
LABEL_84:
          __break(1u);
LABEL_85:
          __break(1u);
LABEL_86:
          __break(1u);
LABEL_87:
          __break(1u);
LABEL_88:
          __break(1u);
LABEL_89:
          __break(1u);
LABEL_90:
          __break(1u);
LABEL_91:
          __break(1u);
LABEL_92:
          __break(1u);
LABEL_93:
          __break(1u);
LABEL_94:
          __break(1u);
LABEL_95:
          __break(1u);
LABEL_96:
          __break(1u);
LABEL_97:
          __break(1u);
LABEL_98:
          __break(1u);
LABEL_99:
          __break(1u);
LABEL_100:
          __break(1u);
LABEL_101:
          __break(1u);
LABEL_102:
          __break(1u);
          goto LABEL_103;
        }
        uint64_t v33 = *a1;
        unint64_t v34 = a1[1];
        uint64_t v35 = 0;
        switch(v34 >> 62)
        {
          case 1uLL:
            LODWORD(v35) = HIDWORD(v33) - v33;
            if (__OFSUB__(HIDWORD(v33), v33)) {
              goto LABEL_84;
            }
            uint64_t v35 = (int)v35;
LABEL_32:
            if (__OFADD__(v35, v32)) {
              goto LABEL_77;
            }
            sub_100058D50(v35 + v32);
            LODWORD(v39) = 0;
            switch(v26 >> 62)
            {
              case 1uLL:
                if (__OFSUB__(HIDWORD(v27), v27)) {
                  goto LABEL_86;
                }
                unint64_t v39 = HIDWORD(v27) - (int)v27;
LABEL_38:
                if ((v39 & 0x8000000000000000) != 0) {
                  goto LABEL_78;
                }
                if (HIDWORD(v39)) {
                  goto LABEL_79;
                }
LABEL_40:
                sub_100018C78(2uLL, (uint64_t)a1, v39);
                char v76 = &type metadata for Data;
                char v77 = &protocol witness table for Data;
                uint64_t v74 = v27;
                unint64_t v75 = v26;
                uint64_t v42 = sub_100016C54(&v74, (uint64_t)&type metadata for Data);
                uint64_t v43 = *v42;
                unint64_t v44 = v42[1];
                switch(v44 >> 62)
                {
                  case 1uLL:
                    long long v73 = v24;
                    if (v43 >> 32 < (int)v43) {
                      goto LABEL_88;
                    }
                    sub_100016E5C(v27, v26);
                    sub_100016E5C(v43, v44);
                    if (sub_100058CB0() && __OFSUB__((int)v43, sub_100058CD0())) {
                      goto LABEL_94;
                    }
                    sub_100058CC0();
                    sub_100058D60();
                    sub_100016B2C(v43, v44);
                    break;
                  case 2uLL:
                    uint64_t v72 = v25;
                    long long v73 = v24;
                    uint64_t v45 = *(void *)(v43 + 16);
                    uint64_t v71 = *(void *)(v43 + 24);
                    sub_100016E5C(v27, v26);
                    swift_retain();
                    swift_retain();
                    if (sub_100058CB0() && __OFSUB__(v45, sub_100058CD0())) {
                      goto LABEL_95;
                    }
                    if (__OFSUB__(v71, v45)) {
                      goto LABEL_89;
                    }
                    sub_100058CC0();
                    sub_100058D60();
                    swift_release();
                    swift_release();
                    uint64_t v25 = v72;
                    break;
                  default:
                    sub_100016E5C(v27, v26);
                    sub_100058D60();
                    goto LABEL_20;
                }
                long long v24 = v73;
LABEL_20:
                sub_100016B84((uint64_t)&v74);
                sub_100016B2C(v27, v26);
                if (--v25) {
                  continue;
                }
                uint64_t result = swift_bridgeObjectRelease();
                unint64_t v21 = v69;
                uint64_t v10 = v70;
                uint64_t v22 = v68;
                break;
              case 2uLL:
                uint64_t v41 = *(void *)(v27 + 16);
                uint64_t v40 = *(void *)(v27 + 24);
                unint64_t v39 = v40 - v41;
                if (!__OFSUB__(v40, v41)) {
                  goto LABEL_38;
                }
                goto LABEL_87;
              case 3uLL:
                goto LABEL_40;
              default:
                LODWORD(v39) = BYTE6(v26);
                goto LABEL_40;
            }
            break;
          case 2uLL:
            uint64_t v38 = v33 + 16;
            uint64_t v37 = *(void *)(v33 + 16);
            uint64_t v36 = *(void *)(v38 + 8);
            BOOL v14 = __OFSUB__(v36, v37);
            uint64_t v35 = v36 - v37;
            if (!v14) {
              goto LABEL_32;
            }
            goto LABEL_85;
          case 3uLL:
            goto LABEL_32;
          default:
            uint64_t v35 = BYTE6(v34);
            goto LABEL_32;
        }
LABEL_51:
        uint64_t v46 = *a1;
        unint64_t v47 = a1[1];
        unint64_t v48 = v47 >> 62;
        uint64_t v49 = 0;
        switch(v47 >> 62)
        {
          case 1uLL:
            LODWORD(v49) = HIDWORD(v46) - v46;
            if (__OFSUB__(HIDWORD(v46), v46)) {
              goto LABEL_99;
            }
            uint64_t v49 = (int)v49;
LABEL_56:
            BOOL v14 = __OFSUB__(v49, v10);
            uint64_t v52 = v49 - v10;
            if (v14) {
              goto LABEL_96;
            }
            uint64_t v53 = v52 - v22;
            if (__OFSUB__(v52, v22)) {
              goto LABEL_97;
            }
            break;
          case 2uLL:
            uint64_t v51 = *(void *)(v46 + 16);
            uint64_t v50 = *(void *)(v46 + 24);
            BOOL v14 = __OFSUB__(v50, v51);
            uint64_t v49 = v50 - v51;
            if (!v14) {
              goto LABEL_56;
            }
            goto LABEL_100;
          case 3uLL:
            goto LABEL_56;
          default:
            uint64_t v49 = BYTE6(v47);
            goto LABEL_56;
        }
        switch((int)v48)
        {
          case 1:
            LODWORD(v54) = HIDWORD(v46) - v46;
            if (__OFSUB__(HIDWORD(v46), v46)) {
              goto LABEL_101;
            }
            uint64_t v54 = (int)v54;
LABEL_63:
            if (v54 < v10) {
              goto LABEL_75;
            }
            if (v48)
            {
              if (v48 == 1)
              {
                LODWORD(v57) = HIDWORD(v46) - v46;
                if (__OFSUB__(HIDWORD(v46), v46))
                {
LABEL_103:
                  __break(1u);
LABEL_104:
                  __break(1u);
                }
                uint64_t v57 = (int)v57;
              }
              else
              {
                uint64_t v60 = v46 + 16;
                uint64_t v59 = *(void *)(v46 + 16);
                uint64_t v58 = *(void *)(v60 + 8);
                BOOL v14 = __OFSUB__(v58, v59);
                uint64_t v57 = v58 - v59;
                if (v14) {
                  goto LABEL_104;
                }
              }
            }
            else
            {
              uint64_t v57 = BYTE6(v47);
            }
LABEL_72:
            BOOL v14 = __OFSUB__(v57, v10);
            uint64_t v61 = v57 - v10;
            if (v14) {
              goto LABEL_98;
            }
            if (v61 < v22 || v53 != v21)
            {
LABEL_75:
              uint64_t v74 = 0;
              unint64_t v75 = 0xE000000000000000;
              sub_100059370(19);
              uint64_t v62 = sub_1000593D0();
              unint64_t v64 = v63;
              swift_bridgeObjectRelease();
              uint64_t v74 = v62;
              unint64_t v75 = v64;
              v78._countAndFlagsBits = 0x616574736E69202CLL;
              v78._object = (void *)0xEE0020746F672064;
              sub_1000591F0(v78);
              v79._countAndFlagsBits = sub_1000593D0();
              sub_1000591F0(v79);
              swift_bridgeObjectRelease();
              v80._countAndFlagsBits = 46;
              v80._object = (void *)0xE100000000000000;
              sub_1000591F0(v80);
              v81._countAndFlagsBits = v74;
              char v65 = (void *)v75;
              uint64_t v74 = 0xD000000000000027;
              unint64_t v75 = 0x8000000100062C30;
              v81._object = v65;
              sub_1000591F0(v81);
              swift_bridgeObjectRelease();
              uint64_t v66 = v74;
              unint64_t v67 = v75;
              sub_10001FA84();
              swift_allocError();
              *(void *)uint64_t v11 = v66;
              *(void *)(v11 + 8) = v67;
              char v12 = 5;
              goto LABEL_5;
            }
            return result;
          case 2:
            uint64_t v56 = *(void *)(v46 + 16);
            uint64_t v55 = *(void *)(v46 + 24);
            BOOL v14 = __OFSUB__(v55, v56);
            uint64_t v54 = v55 - v56;
            if (!v14) {
              goto LABEL_63;
            }
            goto LABEL_102;
          case 3:
            if (v10 > 0) {
              goto LABEL_75;
            }
            uint64_t v57 = 0;
            goto LABEL_72;
          default:
            uint64_t v54 = BYTE6(v47);
            goto LABEL_63;
        }
      case 2uLL:
        uint64_t v31 = *(void *)(v27 + 16);
        uint64_t v30 = *(void *)(v27 + 24);
        unint64_t v29 = v30 - v31;
        if (!__OFSUB__(v30, v31)) {
          goto LABEL_26;
        }
        goto LABEL_83;
      case 3uLL:
        goto LABEL_26;
      default:
        unint64_t v29 = BYTE6(v26);
        goto LABEL_26;
    }
  }
}

uint64_t sub_100038EC8(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((a3 & 0x1000000000000) != 0)
  {
    sub_10001FA84();
    swift_allocError();
    *(void *)uint64_t v11 = 0xD000000000000085;
    *(void *)(v11 + 8) = 0x80000001000627B0;
    char v12 = 1;
  }
  else
  {
    uint64_t v6 = *a1;
    unint64_t v7 = a1[1];
    uint64_t v10 = 0;
    switch(v7 >> 62)
    {
      case 1uLL:
        BOOL v14 = __OFSUB__(HIDWORD(v6), v6);
        int v15 = HIDWORD(v6) - v6;
        if (v14) {
          goto LABEL_81;
        }
        uint64_t v10 = v15;
LABEL_9:
        LOBYTE(v76) = 0;
        uint64_t result = sub_100042D68(a2, a3 & 0xFFFFFFFFFFFFLL, a4);
        if (v4) {
          return result;
        }
        uint64_t v19 = result;
        BOOL v14 = __OFADD__(v10, result);
        Swift::Int v20 = v10 + result;
        if (v14) {
          goto LABEL_79;
        }
        sub_100058D50(v20);
        int64_t v21 = sub_10003B948(a2);
        unint64_t v22 = v19 - v21;
        if (__OFSUB__(v19, v21)) {
          goto LABEL_80;
        }
        int64_t v23 = v21;
        if (v21 <= 0) {
          goto LABEL_17;
        }
        if ((v22 & 0x8000000000000000) != 0) {
          goto LABEL_83;
        }
        if (HIDWORD(v22)) {
          goto LABEL_84;
        }
        sub_100018C78(v21, (uint64_t)a1, v19 - v21);
LABEL_17:
        unint64_t v72 = v22;
        int64_t v73 = v23;
        uint64_t v74 = v10;
        uint64_t v24 = *(void *)(a4 + 16);
        swift_bridgeObjectRetain();
        if (v24)
        {
          uint64_t v25 = a4 + 32;
          while (2)
          {
            uint64_t v75 = v24;
            int v26 = *(unsigned __int16 *)(v25 + 2);
            int v27 = *(unsigned __int16 *)(v25 + 4);
            int v28 = *(unsigned __int16 *)(v25 + 6);
            uint64_t v30 = *(void *)(v25 + 8);
            unint64_t v29 = *(void *)(v25 + 16);
            char v31 = *(unsigned char *)v25;
            sub_100016E5C(v30, v29);
            sub_100019308(1uLL, (uint64_t)a1, v31);
            sub_100018F5C(2uLL, (uint64_t)a1, v26);
            sub_100018F5C(2uLL, (uint64_t)a1, v27);
            sub_100018F5C(2uLL, (uint64_t)a1, v28);
            v25 += 24;
            unint64_t v32 = 0;
            switch(v29 >> 62)
            {
              case 1uLL:
                if (__OFSUB__(HIDWORD(v30), v30)) {
                  goto LABEL_85;
                }
                unint64_t v32 = HIDWORD(v30) - (int)v30;
LABEL_26:
                sub_10003B748(v32, 0xFFFF00000001uLL);
                unint64_t v35 = v32 + 2;
                if (__OFADD__(v32, 2))
                {
                  __break(1u);
                }
                else
                {
                  uint64_t v36 = *a1;
                  unint64_t v37 = a1[1];
                  uint64_t v38 = 0;
                  switch(v37 >> 62)
                  {
                    case 1uLL:
                      LODWORD(v38) = HIDWORD(v36) - v36;
                      if (__OFSUB__(HIDWORD(v36), v36)) {
                        goto LABEL_87;
                      }
                      uint64_t v38 = (int)v38;
LABEL_32:
                      if (!__OFADD__(v38, v35))
                      {
                        sub_100058D50(v38 + v35);
                        LODWORD(v42) = 0;
                        switch(v29 >> 62)
                        {
                          case 1uLL:
                            if (__OFSUB__(HIDWORD(v30), v30)) {
                              goto LABEL_89;
                            }
                            unint64_t v42 = HIDWORD(v30) - (int)v30;
LABEL_38:
                            if ((v42 & 0x8000000000000000) != 0) {
                              goto LABEL_77;
                            }
                            if (HIDWORD(v42)) {
                              goto LABEL_78;
                            }
LABEL_40:
                            sub_100018C78(2uLL, (uint64_t)a1, v42);
                            Swift::String v78 = &type metadata for Data;
                            Swift::String v79 = &protocol witness table for Data;
                            uint64_t v76 = v30;
                            unint64_t v77 = v29;
                            uint64_t v45 = sub_100016C54(&v76, (uint64_t)&type metadata for Data);
                            uint64_t v47 = *v45;
                            unint64_t v46 = v45[1];
                            switch(v46 >> 62)
                            {
                              case 1uLL:
                                if (v47 >> 32 < (int)v47) {
                                  goto LABEL_91;
                                }
                                sub_100016E5C(v30, v29);
                                sub_100016E5C(v47, v46);
                                if (sub_100058CB0() && __OFSUB__((int)v47, sub_100058CD0())) {
                                  goto LABEL_96;
                                }
                                sub_100058CC0();
                                sub_100058D60();
                                sub_100016B2C(v47, v46);
                                break;
                              case 2uLL:
                                uint64_t v48 = *(void *)(v47 + 16);
                                uint64_t v71 = *(void *)(v47 + 24);
                                sub_100016E5C(v30, v29);
                                swift_retain();
                                swift_retain();
                                if (sub_100058CB0() && __OFSUB__(v48, sub_100058CD0())) {
                                  goto LABEL_95;
                                }
                                if (__OFSUB__(v71, v48)) {
                                  goto LABEL_92;
                                }
                                sub_100058CC0();
                                sub_100058D60();
                                swift_release();
                                swift_release();
                                break;
                              default:
                                sub_100016E5C(v30, v29);
                                sub_100058D60();
                                break;
                            }
                            sub_100016B84((uint64_t)&v76);
                            sub_100016B2C(v30, v29);
                            --v24;
                            if (v75 != 1) {
                              continue;
                            }
                            goto LABEL_50;
                          case 2uLL:
                            uint64_t v44 = *(void *)(v30 + 16);
                            uint64_t v43 = *(void *)(v30 + 24);
                            unint64_t v42 = v43 - v44;
                            if (!__OFSUB__(v43, v44)) {
                              goto LABEL_38;
                            }
                            goto LABEL_90;
                          case 3uLL:
                            goto LABEL_40;
                          default:
                            LODWORD(v42) = BYTE6(v29);
                            goto LABEL_40;
                        }
                      }
                      break;
                    case 2uLL:
                      uint64_t v41 = v36 + 16;
                      uint64_t v40 = *(void *)(v36 + 16);
                      uint64_t v39 = *(void *)(v41 + 8);
                      BOOL v14 = __OFSUB__(v39, v40);
                      uint64_t v38 = v39 - v40;
                      if (!v14) {
                        goto LABEL_32;
                      }
                      goto LABEL_88;
                    case 3uLL:
                      goto LABEL_32;
                    default:
                      uint64_t v38 = BYTE6(v37);
                      goto LABEL_32;
                  }
                }
                __break(1u);
LABEL_77:
                __break(1u);
LABEL_78:
                __break(1u);
                break;
              case 2uLL:
                uint64_t v34 = *(void *)(v30 + 16);
                uint64_t v33 = *(void *)(v30 + 24);
                unint64_t v32 = v33 - v34;
                if (!__OFSUB__(v33, v34)) {
                  goto LABEL_26;
                }
                goto LABEL_86;
              case 3uLL:
                goto LABEL_26;
              default:
                unint64_t v32 = BYTE6(v29);
                goto LABEL_26;
            }
            break;
          }
LABEL_79:
          __break(1u);
LABEL_80:
          __break(1u);
LABEL_81:
          __break(1u);
LABEL_82:
          __break(1u);
LABEL_83:
          __break(1u);
LABEL_84:
          __break(1u);
LABEL_85:
          __break(1u);
LABEL_86:
          __break(1u);
LABEL_87:
          __break(1u);
LABEL_88:
          __break(1u);
LABEL_89:
          __break(1u);
LABEL_90:
          __break(1u);
LABEL_91:
          __break(1u);
LABEL_92:
          __break(1u);
LABEL_93:
          __break(1u);
LABEL_94:
          __break(1u);
LABEL_95:
          __break(1u);
LABEL_96:
          __break(1u);
LABEL_97:
          __break(1u);
LABEL_98:
          __break(1u);
LABEL_99:
          __break(1u);
LABEL_100:
          __break(1u);
LABEL_101:
          __break(1u);
          goto LABEL_102;
        }
LABEL_50:
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v49 = *a1;
        unint64_t v50 = a1[1];
        unint64_t v51 = v50 >> 62;
        uint64_t v52 = 0;
        switch(v50 >> 62)
        {
          case 1uLL:
            LODWORD(v52) = HIDWORD(v49) - v49;
            if (__OFSUB__(HIDWORD(v49), v49)) {
              goto LABEL_98;
            }
            uint64_t v52 = (int)v52;
LABEL_55:
            BOOL v14 = __OFSUB__(v52, v74);
            uint64_t v55 = v52 - v74;
            if (v14) {
              goto LABEL_93;
            }
            uint64_t v56 = v55 - v73;
            if (__OFSUB__(v55, v73)) {
              goto LABEL_94;
            }
            break;
          case 2uLL:
            uint64_t v54 = *(void *)(v49 + 16);
            uint64_t v53 = *(void *)(v49 + 24);
            BOOL v14 = __OFSUB__(v53, v54);
            uint64_t v52 = v53 - v54;
            if (!v14) {
              goto LABEL_55;
            }
            goto LABEL_99;
          case 3uLL:
            goto LABEL_55;
          default:
            uint64_t v52 = BYTE6(v50);
            goto LABEL_55;
        }
        switch((int)v51)
        {
          case 1:
            LODWORD(v57) = HIDWORD(v49) - v49;
            if (__OFSUB__(HIDWORD(v49), v49)) {
              goto LABEL_100;
            }
            uint64_t v57 = (int)v57;
LABEL_62:
            if (v57 < v74) {
              goto LABEL_74;
            }
            if (v51)
            {
              if (v51 == 1)
              {
                LODWORD(v60) = HIDWORD(v49) - v49;
                if (__OFSUB__(HIDWORD(v49), v49))
                {
LABEL_102:
                  __break(1u);
LABEL_103:
                  __break(1u);
                }
                uint64_t v60 = (int)v60;
              }
              else
              {
                uint64_t v63 = v49 + 16;
                uint64_t v62 = *(void *)(v49 + 16);
                uint64_t v61 = *(void *)(v63 + 8);
                BOOL v14 = __OFSUB__(v61, v62);
                uint64_t v60 = v61 - v62;
                if (v14) {
                  goto LABEL_103;
                }
              }
            }
            else
            {
              uint64_t v60 = BYTE6(v50);
            }
LABEL_71:
            BOOL v14 = __OFSUB__(v60, v74);
            int64_t v64 = v60 - v74;
            if (v14) {
              goto LABEL_97;
            }
            if (v64 >= v73 && v56 == v72) {
              return result;
            }
LABEL_74:
            uint64_t v76 = 0;
            unint64_t v77 = 0xE000000000000000;
            sub_100059370(19);
            uint64_t v65 = sub_1000593D0();
            unint64_t v67 = v66;
            swift_bridgeObjectRelease();
            uint64_t v76 = v65;
            unint64_t v77 = v67;
            v80._countAndFlagsBits = 0x616574736E69202CLL;
            v80._object = (void *)0xEE0020746F672064;
            sub_1000591F0(v80);
            v81._countAndFlagsBits = sub_1000593D0();
            sub_1000591F0(v81);
            swift_bridgeObjectRelease();
            v82._countAndFlagsBits = 46;
            v82._object = (void *)0xE100000000000000;
            sub_1000591F0(v82);
            v83._countAndFlagsBits = v76;
            uint64_t v68 = (void *)v77;
            uint64_t v76 = 0xD000000000000027;
            unint64_t v77 = 0x8000000100062C30;
            v83._object = v68;
            sub_1000591F0(v83);
            swift_bridgeObjectRelease();
            uint64_t v69 = v76;
            unint64_t v70 = v77;
            sub_10001FA84();
            swift_allocError();
            *(void *)uint64_t v11 = v69;
            *(void *)(v11 + 8) = v70;
            char v12 = 5;
            break;
          case 2:
            uint64_t v59 = *(void *)(v49 + 16);
            uint64_t v58 = *(void *)(v49 + 24);
            BOOL v14 = __OFSUB__(v58, v59);
            uint64_t v57 = v58 - v59;
            if (!v14) {
              goto LABEL_62;
            }
            goto LABEL_101;
          case 3:
            if (v74 > 0) {
              goto LABEL_74;
            }
            uint64_t v60 = 0;
            goto LABEL_71;
          default:
            uint64_t v57 = BYTE6(v50);
            goto LABEL_62;
        }
        break;
      case 2uLL:
        uint64_t v18 = v6 + 16;
        uint64_t v16 = *(void *)(v6 + 16);
        uint64_t v17 = *(void *)(v18 + 8);
        uint64_t v10 = v17 - v16;
        if (!__OFSUB__(v17, v16)) {
          goto LABEL_9;
        }
        goto LABEL_82;
      case 3uLL:
        goto LABEL_9;
      default:
        uint64_t v10 = BYTE6(v7);
        goto LABEL_9;
    }
  }
  *(unsigned char *)(v11 + 16) = v12;
  return swift_willThrow();
}

Swift::Int sub_1000397F0()
{
  return TLSCodable.encodedLength()();
}

uint64_t sub_100039808(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return TLSCodable.encodedBytes(with:)(a1, a2, a3);
}

uint64_t sub_100039820(uint64_t a1, uint64_t a2)
{
  return TLSCodable.encodedBytes()(a1, a2);
}

uint64_t sub_100039838()
{
  sub_10001FA84();
  swift_allocError();
  *(void *)uint64_t v0 = 0xD000000000000085;
  *(void *)(v0 + 8) = 0x80000001000627B0;
  *(unsigned char *)(v0 + 16) = 1;
  return swift_willThrow();
}

unint64_t sub_1000398A4(uint64_t a1)
{
  unint64_t v3 = *(void *)a1;
  uint64_t v4 = *v1;
  unint64_t v5 = v1[1];
  __int16 v6 = *(unsigned __int8 *)(a1 + 8) | (*(unsigned __int8 *)(a1 + 9) << 8);
  unint64_t result = sub_100025C60(*(void *)a1, v6, *v1, v5);
  if (!v2)
  {
    v9[0] = sub_10003A594(result);
    v9[1] = v8;
    sub_100019AAC(v9, v3, v6, v4, v5);
    return v9[0];
  }
  return result;
}

uint64_t sub_100039940()
{
  uint64_t result = PPM_0_2_1.Token.encodedLength(with:)(0, 1);
  if (!v0)
  {
    uint64_t v2 = result;
    uint64_t v3 = sub_10003EF5C();
    BOOL v4 = __OFADD__(v2, v3);
    uint64_t result = v2 + v3;
    if (v4) {
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_1000399C8(uint64_t a1)
{
  return sub_100019538(*(void *)a1, *(unsigned __int16 *)(a1 + 8) | (*(unsigned __int8 *)(a1 + 10) << 16));
}

uint64_t sub_100039A28()
{
  return sub_100019538(0, 0x10000);
}

uint64_t sub_100039A7C()
{
  return PPM_0_2_1.Token.encodedLength(with:)(0, 1);
}

uint64_t sub_100039AC8(uint64_t a1)
{
  unint64_t v3 = *(void *)a1;
  char v4 = *(unsigned char *)(a1 + 8);
  long long v5 = v1[3];
  long long v12 = v1[2];
  long long v13 = v5;
  uint64_t v14 = *((void *)v1 + 8);
  long long v6 = v1[1];
  long long v10 = *v1;
  long long v11 = v6;
  uint64_t result = PPM_0_2_1.Token.encodedLength(with:)(v3, v4);
  if (!v2)
  {
    v9[0] = sub_10003A594(result);
    v9[1] = v8;
    sub_10001B5D0(v9, v3, v4);
    return v9[0];
  }
  return result;
}

uint64_t sub_100039B60()
{
  return sub_10001754C();
}

uint64_t sub_100039BA4()
{
  return sub_10003EF5C();
}

uint64_t sub_100039BE8()
{
  long long v2 = v0[1];
  long long v6 = *v0;
  long long v7 = v2;
  long long v8 = v0[2];
  unint64_t v9 = *((void *)v0 + 6);
  uint64_t result = sub_10003EF5C();
  if (!v1)
  {
    v5[0] = sub_10003A594(result);
    v5[1] = v4;
    sub_100018F5C(2uLL, (uint64_t)v5, (unsigned __int16)v6);
    sub_100019AAC(v5, 0xFFFF00000001uLL, 1, *((uint64_t *)&v6 + 1), v7);
    sub_100019AAC(v5, 0x2000000000uLL, 1, *((uint64_t *)&v7 + 1), v8);
    sub_100019AAC(v5, 0xFFFF00000000uLL, 1, *((uint64_t *)&v8 + 1), v9);
    return v5[0];
  }
  return result;
}

uint64_t sub_100039CD0()
{
  return sub_10001D204(*(void *)v0, *(void *)(v0 + 8));
}

uint64_t sub_100039CEC()
{
  return sub_100017640(*(void *)v0, *(void *)(v0 + 8));
}

Swift::Int __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> PPM_0_2_1.Interval.encodedLength(with:)(DPSubmissionService::PPM_0_2_1::Interval::CodingParameter_optional with)
{
  return 16;
}

uint64_t sub_100039D10()
{
  unint64_t v3 = *v0;
  unint64_t v2 = v0[1];
  sub_100058CF0();
  swift_allocObject();
  uint64_t v5 = 0;
  unint64_t v6 = sub_100058CE0() | 0x4000000000000000;
  sub_100018994(8uLL, (uint64_t)&v5, v3);
  if (v1) {
    return sub_100016B2C(v5, v6);
  }
  sub_100018994(8uLL, (uint64_t)&v5, v2);
  return v5;
}

uint64_t sub_100039DB8()
{
  return sub_1000369B4(*(void *)v0, *(void *)(v0 + 8));
}

uint64_t sub_100039DD4()
{
  return sub_10001D648(*(void *)v0, *(void *)(v0 + 8));
}

uint64_t sub_100039DF0()
{
  return sub_100017658(*(void *)v0, *(void *)(v0 + 8));
}

uint64_t sub_100039E0C(uint64_t a1, uint64_t a2, uint64_t (*a3)(unint64_t))
{
  return a3(*v3 | ((unint64_t)*((unsigned int *)v3 + 1) << 32));
}

uint64_t sub_100039E34()
{
  return sub_100036AB0(*(void *)v0, *(void *)(v0 + 8));
}

uint64_t sub_100039E50()
{
  return sub_10001D62C(*(void *)v0, *(void *)(v0 + 8));
}

uint64_t sub_100039E6C()
{
  return sub_10001778C(*(void *)v0, *(void *)(v0 + 8));
}

uint64_t sub_100039E88()
{
  return sub_100036BAC(*(void *)v0, *(void *)(v0 + 8));
}

uint64_t sub_100039EA4()
{
  return sub_100036CB0(*v0 | ((unint64_t)*((unsigned __int16 *)v0 + 1) << 16) | ((unint64_t)*((unsigned __int16 *)v0+ 2) << 32) | ((unint64_t)*((unsigned __int16 *)v0 + 3) << 48), *((void *)v0 + 1), *((void *)v0 + 2));
}

uint64_t sub_100039EDC()
{
  return sub_10001CD08(*v0 | ((unint64_t)*((unsigned __int16 *)v0 + 1) << 16) | ((unint64_t)*((unsigned __int16 *)v0+ 2) << 32) | ((unint64_t)*((unsigned __int16 *)v0 + 3) << 48), *((void *)v0 + 1), *((void *)v0 + 2));
}

unint64_t sub_100039F14()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  unint64_t v2 = sub_100042D68(0xFFFF00000001uLL, 0x10000000000, v1);
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_100039F7C(unsigned int *a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = 0x10000000000;
  if (!*((unsigned char *)a1 + 5)) {
    uint64_t v4 = 0;
  }
  unint64_t v5 = v4 | *a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32);
  swift_bridgeObjectRetain();
  LOBYTE(v9[0]) = 0;
  unint64_t v6 = sub_100042D68(0xFFFF00000001uLL, v5, v3);
  uint64_t result = swift_bridgeObjectRelease();
  if (!v2)
  {
    v9[0] = sub_10003A594(v6);
    v9[1] = v8;
    sub_100038EC8(v9, 0xFFFF00000001uLL, v5, v3);
    return v9[0];
  }
  return result;
}

uint64_t sub_10003A048()
{
  uint64_t v2 = *v0;
  swift_bridgeObjectRetain();
  LOBYTE(v6[0]) = 0;
  unint64_t v3 = sub_100042D68(0xFFFF00000001uLL, 0x10000000000, v2);
  uint64_t result = swift_bridgeObjectRelease();
  if (!v1)
  {
    v6[0] = sub_10003A594(v3);
    v6[1] = v5;
    sub_100038EC8(v6, 0xFFFF00000001uLL, 0x10000000000, v2);
    return v6[0];
  }
  return result;
}

uint64_t sub_10003A0F8()
{
  return sub_100046C20();
}

uint64_t sub_10003A134()
{
  long long v2 = v0[1];
  long long v6 = *v0;
  long long v7 = v2;
  unint64_t v8 = *((void *)v0 + 4);
  uint64_t result = sub_100046C20();
  if (!v1)
  {
    v5[0] = sub_10003A594(result);
    v5[1] = v4;
    sub_100019308(1uLL, (uint64_t)v5, v6);
    sub_100019AAC(v5, 0xFFFF00000001uLL, 1, *((uint64_t *)&v6 + 1), v7);
    sub_100019AAC(v5, 0xFFFFFFFF00000001, 1, *((uint64_t *)&v7 + 1), v8);
    return v5[0];
  }
  return result;
}

uint64_t sub_10003A1F4()
{
  return sub_10001D1A4(*v0);
}

uint64_t sub_10003A210()
{
  return sub_100036DC0(*v0, *((void *)v0 + 1), *((void *)v0 + 2));
}

uint64_t sub_10003A230()
{
  return sub_10001D7FC(*(_DWORD *)v0, *(void *)(v0 + 8), *(void *)(v0 + 16));
}

uint64_t sub_10003A250()
{
  return sub_100036EC8(*(void *)v0, *(void *)(v0 + 8));
}

uint64_t sub_10003A270()
{
  return sub_10001D328(*(void *)v0, *(void *)(v0 + 8), *(void *)(v0 + 16));
}

uint64_t sub_10003A290()
{
  return sub_100017A00(*(void *)v0, *(void *)(v0 + 8), *(void *)(v0 + 16));
}

uint64_t sub_10003A2B0()
{
  return sub_100046E54();
}

uint64_t sub_10003A304()
{
  return sub_10001D490();
}

uint64_t sub_10003A358()
{
  return PPM_0_2_1.PlaintextInputShare.encodedLength(with:)(0x10000, *(void *)v0, *(void *)(v0 + 8), *(void *)(v0 + 16));
}

uint64_t sub_10003A384(unsigned __int16 *a1)
{
  return sub_1000198E8(*a1 | (*((unsigned __int8 *)a1 + 2) << 16), *(void *)v1, *(void *)(v1 + 8), *(void *)(v1 + 16));
}

uint64_t sub_10003A3B8()
{
  uint64_t v2 = *v0;
  uint64_t v3 = v0[1];
  unint64_t v4 = v0[2];
  uint64_t result = PPM_0_2_1.PlaintextInputShare.encodedLength(with:)(0x10000, *v0, v3, v4);
  if (!v1)
  {
    v7[0] = sub_10003A594(result);
    v7[1] = v6;
    sub_100038604(v7, 0xFFFF00000000uLL, 256, v2);
    sub_100019AAC(v7, 0xFFFFFFFF00000000, 1, v3, v4);
    return v7[0];
  }
  return result;
}

uint64_t sub_10003A468()
{
  return sub_1000468E4();
}

uint64_t sub_10003A4AC()
{
  long long v2 = v0[1];
  long long v7 = *v0;
  long long v8 = v2;
  long long v9 = v0[2];
  unint64_t v10 = *((void *)v0 + 6);
  uint64_t result = sub_1000468E4();
  if (!v1)
  {
    v6[0] = sub_10003A594(result);
    v6[1] = v4;
    sub_100019AAC(v6, 0x2000000020uLL, 1, v7, *((unint64_t *)&v7 + 1));
    unint64_t v5 = v9;
    sub_100019AAC(v6, 0x1000000010uLL, 1, v8, *((unint64_t *)&v8 + 1));
    sub_100018994(8uLL, (uint64_t)v6, v5);
    sub_100019AAC(v6, 0xFFFFFFFF00000000, 1, *((uint64_t *)&v9 + 1), v10);
    return v6[0];
  }
  return result;
}

uint64_t sub_10003A594(uint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    if (result < 15)
    {
      return 0;
    }
    else
    {
      sub_100058CF0();
      swift_allocObject();
      sub_100058CE0();
      if (v1 >= 0x7FFFFFFF)
      {
        sub_100058D30();
        uint64_t result = swift_allocObject();
        *(void *)(result + 16) = 0;
        *(void *)(result + 24) = 0;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

unint64_t sub_10003A630(unint64_t a1)
{
  unint64_t result = sub_100018994(8uLL, a1, *(void *)v1);
  if (!v2)
  {
    sub_100018F5C(2uLL, a1, *(unsigned __int16 *)(v1 + 8));
    sub_100018C78(4uLL, a1, *(_DWORD *)(v1 + 12));
    char v5 = *(unsigned char *)(v1 + 16);
    sub_100018C78(1uLL, a1, *(_DWORD *)(v1 + 20));
    return sub_10003765C(a1, v5, *(unsigned __int8 *)(v1 + 24) | ((unint64_t)*(unsigned int *)(v1 + 28) << 32), *(unsigned char *)(v1 + 32));
  }
  return result;
}

unint64_t sub_10003A6E0(uint64_t a1)
{
  unint64_t result = sub_10003A708();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10003A708()
{
  unint64_t result = qword_100081A70;
  if (!qword_100081A70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100081A70);
  }
  return result;
}

uint64_t sub_10003A760(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 5u) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for TLSCodecError(uint64_t a1)
{
  return sub_10003A788(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t sub_10003A788(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 5u) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t _s19DPSubmissionService13TLSCodecErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  sub_10003A760(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for TLSCodecError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  sub_10003A760(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  unsigned __int8 v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  sub_10003A788(v6, v7, v8);
  return a1;
}

__n128 initializeWithTake for TLSCodecError(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for TLSCodecError(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  unsigned __int8 v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  sub_10003A788(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for TLSCodecError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFB && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 251);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 5) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TLSCodecError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFA)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 251;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFB) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFB) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_10003A92C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_10003A934(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for TLSCodecError()
{
  return &type metadata for TLSCodecError;
}

ValueMetadata *type metadata accessor for TLSEmpty()
{
  return &type metadata for TLSEmpty;
}

uint64_t sub_10003A95C()
{
  return sub_100039E88();
}

uint64_t sub_10003A974(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PPM_0_2_1.QueryType.enumValue.getter(a1, a2, a3);
}

uint64_t TLSEmpty.encode<A>(into:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return TLSEmpty.init<A>(from:with:)(a1, a2, a3, a4);
}

id _DPDediscoAlgorithmParametersOtherParams.__allocating_init(cohortSize:sigma:)(uint64_t a1, double a2)
{
  id v5 = objc_allocWithZone(v2);
  return [v5 initWithCohortSize:a1 sigma:0 piRapporPrime:a2 piRapporAlpha0:0.0 piRapporAlpha1:0.0];
}

id _DPDediscoAlgorithmParametersOtherParams.init(cohortSize:sigma:)(uint64_t a1, double a2)
{
  return [v2 initWithCohortSize:a1 sigma:0 piRapporPrime:a2 piRapporAlpha0:0.0 piRapporAlpha1:0.0];
}

id _DPDediscoAlgorithmParametersOtherParams.__allocating_init(piRapporPrime:piRapporAlpha0:piRapporAlpha1:)(uint64_t a1, double a2, double a3)
{
  id v7 = objc_allocWithZone(v3);
  return [v7 initWithCohortSize:0 sigma:a1 piRapporPrime:0.0 piRapporAlpha0:a2 piRapporAlpha1:a3];
}

id _DPDediscoAlgorithmParametersOtherParams.init(piRapporPrime:piRapporAlpha0:piRapporAlpha1:)(uint64_t a1, double a2, double a3)
{
  return [v3 initWithCohortSize:0 sigma:a1 piRapporPrime:0.0 piRapporAlpha0:a2 piRapporAlpha1:a3];
}

id _DPDediscoAlgorithmParametersOtherParams.__allocating_init(cohortSize:sigma:piRapporPrime:piRapporAlpha0:piRapporAlpha1:)(uint64_t a1, int a2, double a3, double a4, double a5)
{
  long long v11 = (char *)objc_allocWithZone(v5);
  *(void *)&v11[OBJC_IVAR____DPDediscoAlgorithmParametersOtherParams_cohortSize] = a1;
  *(double *)&v11[OBJC_IVAR____DPDediscoAlgorithmParametersOtherParams_sigma] = a3;
  *(_DWORD *)&v11[OBJC_IVAR____DPDediscoAlgorithmParametersOtherParams_piRapporPrime] = a2;
  *(double *)&v11[OBJC_IVAR____DPDediscoAlgorithmParametersOtherParams_piRapporAlpha0] = a4;
  *(double *)&v11[OBJC_IVAR____DPDediscoAlgorithmParametersOtherParams_piRapporAlpha1] = a5;
  v13.receiver = v11;
  v13.super_class = v5;
  return objc_msgSendSuper2(&v13, "init");
}

id _DPDediscoAlgorithmParametersOtherParams.init(cohortSize:sigma:piRapporPrime:piRapporAlpha0:piRapporAlpha1:)(uint64_t a1, int a2, double a3, double a4, double a5)
{
  *(void *)&v5[OBJC_IVAR____DPDediscoAlgorithmParametersOtherParams_cohortSize] = a1;
  *(double *)&v5[OBJC_IVAR____DPDediscoAlgorithmParametersOtherParams_sigma] = a3;
  *(_DWORD *)&v5[OBJC_IVAR____DPDediscoAlgorithmParametersOtherParams_piRapporPrime] = a2;
  *(double *)&v5[OBJC_IVAR____DPDediscoAlgorithmParametersOtherParams_piRapporAlpha0] = a4;
  *(double *)&v5[OBJC_IVAR____DPDediscoAlgorithmParametersOtherParams_piRapporAlpha1] = a5;
  v7.receiver = v5;
  v7.super_class = (Class)type metadata accessor for _DPDediscoAlgorithmParametersOtherParams();
  return objc_msgSendSuper2(&v7, "init");
}

uint64_t type metadata accessor for _DPDediscoAlgorithmParametersOtherParams()
{
  return self;
}

uint64_t _DPDediscoAlgorithmParametersOtherParams.serialize()()
{
  uint64_t v1 = type metadata accessor for DediscoAlgorithmParametersOtherParams();
  __chkstk_darwin(v1);
  unsigned int v3 = &v6[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = v0;
  sub_10003ADA8();
  sub_100058F60();
  uint64_t v4 = sub_100058F30();
  sub_10003AE00((uint64_t)v3);
  return v4;
}

double sub_10003AD90(uint64_t a1)
{
  return sub_10003B068(a1);
}

unint64_t sub_10003ADA8()
{
  unint64_t result = qword_100080C90;
  if (!qword_100080C90)
  {
    type metadata accessor for DediscoAlgorithmParametersOtherParams();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100080C90);
  }
  return result;
}

uint64_t sub_10003AE00(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DediscoAlgorithmParametersOtherParams();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void _DPDediscoAlgorithmParametersOtherParams.init()()
{
}

id _DPDediscoAlgorithmParametersOtherParams.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for _DPDediscoAlgorithmParametersOtherParams();
  return objc_msgSendSuper2(&v2, "dealloc");
}

double sub_10003B068(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)a1 = *(void *)(v2 + OBJC_IVAR____DPDediscoAlgorithmParametersOtherParams_cohortSize);
  *(void *)(a1 + 8) = *(void *)(v2 + OBJC_IVAR____DPDediscoAlgorithmParametersOtherParams_sigma);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(v2 + OBJC_IVAR____DPDediscoAlgorithmParametersOtherParams_piRapporPrime);
  *(void *)(a1 + 24) = *(void *)(v2 + OBJC_IVAR____DPDediscoAlgorithmParametersOtherParams_piRapporAlpha0);
  double result = *(double *)(v2 + OBJC_IVAR____DPDediscoAlgorithmParametersOtherParams_piRapporAlpha1);
  *(double *)(a1 + 32) = result;
  return result;
}

unint64_t RangeReplaceableCollection<>.encodedLength(with:)(unint64_t a1, __int16 a2)
{
  if ((a2 & 0x100) != 0) {
    goto LABEL_6;
  }
  unint64_t v4 = sub_100059240();
  unint64_t result = sub_10003B748(v4, a1);
  if (!v2)
  {
    uint64_t v6 = sub_10003B948(a1);
    BOOL v7 = __OFADD__(v4, v6);
    unint64_t result = v4 + v6;
    if (v7)
    {
      __break(1u);
LABEL_6:
      sub_10001FA84();
      swift_allocError();
      *(void *)uint64_t v8 = 0xD000000000000085;
      *(void *)(v8 + 8) = 0x80000001000627B0;
      *(unsigned char *)(v8 + 16) = 1;
      return swift_willThrow();
    }
  }
  return result;
}

unint64_t RangeReplaceableCollection<>.encode<A>(into:with:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = v5;
  __chkstk_darwin(a1);
  uint64_t v17 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((v12 & 0x100) != 0)
  {
    sub_10001FA84();
    swift_allocError();
    *(void *)uint64_t v27 = 0xD000000000000085;
    *(void *)(v27 + 8) = 0x80000001000627B0;
    *(unsigned char *)(v27 + 16) = 1;
    return swift_willThrow();
  }
  else
  {
    uint64_t v29 = v15;
    uint64_t v30 = v13;
    uint64_t v31 = v14;
    unint64_t result = RangeReplaceableCollection<>.encodedLength(with:)(a2, v12);
    if (!v6)
    {
      unint64_t v19 = result;
      uint64_t v20 = a1;
      uint64_t v21 = v31;
      uint64_t v22 = sub_100059240();
      BOOL v23 = __OFADD__(v22, v19);
      unint64_t result = v22 + v19;
      if (v23)
      {
        __break(1u);
      }
      else
      {
        uint64_t v28 = v20;
        sub_100059280();
        uint64_t v24 = sub_10003B948(a2);
        if (v24 < 1)
        {
LABEL_10:
          (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v17, v7, a4);
          return sub_100059290();
        }
        uint64_t v25 = v24;
        unint64_t result = sub_100059240();
        if ((result & 0x8000000000000000) == 0)
        {
          if (!HIDWORD(result))
          {
            int v32 = result;
            unint64_t v26 = sub_100022BFC();
            sub_100020EB0(v25, v28, (uint64_t)&type metadata for UInt32, a5, v26, v21);
            goto LABEL_10;
          }
          goto LABEL_13;
        }
      }
      __break(1u);
LABEL_13:
      __break(1u);
    }
  }
  return result;
}

uint64_t RangeReplaceableCollection<>.init<A>(from:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v12 = *(void *)(a5 - 8);
  uint64_t v13 = __chkstk_darwin(a1);
  uint64_t v15 = (char *)v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v20 = (char *)v34 - v19;
  if ((v21 & 0x100) != 0)
  {
    sub_10001FA84();
    swift_allocError();
    *(void *)uint64_t v33 = 0xD000000000000085;
    *(void *)(v33 + 8) = 0x80000001000627B0;
    *(unsigned char *)(v33 + 16) = 1;
  }
  else
  {
    v34[2] = v18;
    v34[3] = v16;
    unsigned char v34[4] = v7;
    v34[5] = v17;
    uint64_t v22 = sub_10003B948(a2);
    if (v22)
    {
      uint64_t v23 = v22;
      unint64_t v24 = sub_100022BFC();
      uint64_t result = CommonUIntTLSNumberType.init<A>(from:with:encodedLength:)(v23, (uint64_t)&type metadata for UInt32, a5, v24, a7, (uint64_t)&v35);
      if (v8) {
        return result;
      }
      LODWORD(a2) = v35;
    }
    v34[1] = *(void *)(*(void *)(a7 + 8) + 8);
    if (sub_100059240() >= a2)
    {
      RandomAccessCollection<>.popFirst(_:)(a2, a5);
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v20, a5);
      sub_1000592B0();
      return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v20, a5);
    }
    unint64_t v35 = 0;
    unint64_t v36 = 0xE000000000000000;
    sub_100059370(32);
    swift_bridgeObjectRelease();
    unint64_t v35 = 0xD000000000000012;
    unint64_t v36 = 0x8000000100062D40;
    LODWORD(v37) = a2;
    v38._countAndFlagsBits = sub_1000593D0();
    sub_1000591F0(v38);
    swift_bridgeObjectRelease();
    v39._countAndFlagsBits = 0x7720736574796220;
    v39._object = (void *)0xEC000000206E6568;
    sub_1000591F0(v39);
    unint64_t v27 = v35;
    unint64_t v26 = v36;
    unint64_t v35 = 0;
    unint64_t v36 = 0xE000000000000000;
    sub_100059370(45);
    swift_bridgeObjectRelease();
    unint64_t v35 = 0xD000000000000024;
    unint64_t v36 = 0x8000000100062D60;
    uint64_t v37 = sub_100059240();
    v40._countAndFlagsBits = sub_1000593D0();
    sub_1000591F0(v40);
    swift_bridgeObjectRelease();
    v41._countAndFlagsBits = 0x2E736574796220;
    v41._object = (void *)0xE700000000000000;
    sub_1000591F0(v41);
    uint64_t v29 = v35;
    uint64_t v28 = (void *)v36;
    unint64_t v35 = v27;
    unint64_t v36 = v26;
    swift_bridgeObjectRetain();
    v42._countAndFlagsBits = v29;
    v42._object = v28;
    sub_1000591F0(v42);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v30 = v35;
    unint64_t v31 = v36;
    sub_10001FA84();
    swift_allocError();
    *(void *)uint64_t v32 = v30;
    *(void *)(v32 + 8) = v31;
    *(unsigned char *)(v32 + 16) = 0;
  }
  return swift_willThrow();
}

unint64_t sub_10003B748(unint64_t result, unint64_t a2)
{
  int v2 = a2;
  unint64_t v3 = HIDWORD(a2);
  if ((result & 0x8000000000000000) != 0) {
    goto LABEL_5;
  }
  if (HIDWORD(result))
  {
    __break(1u);
    return result;
  }
  if (result < a2 || HIDWORD(a2) < result)
  {
LABEL_5:
    HIDWORD(v5._object) = -335544320;
    sub_100059370(54);
    v8._object = (void *)0x8000000100062E60;
    v8._countAndFlagsBits = 0xD000000000000032;
    sub_1000591F0(v8);
    int v7 = v2;
    int v6 = v3;
    sub_100059380();
    v9._countAndFlagsBits = 3026478;
    v9._object = (void *)0xE300000000000000;
    sub_1000591F0(v9);
    sub_100059380();
    v10._countAndFlagsBits = 0;
    v10._object = (void *)0xE000000000000000;
    sub_1000591F0(v10);
    swift_bridgeObjectRelease();
    v11._countAndFlagsBits = 8236;
    v11._object = (void *)0xE200000000000000;
    sub_1000591F0(v11);
    strcpy((char *)&v5, "instead got ");
    v12._countAndFlagsBits = sub_1000593D0();
    sub_1000591F0(v12);
    swift_bridgeObjectRelease();
    v13._countAndFlagsBits = 46;
    v13._object = (void *)0xE100000000000000;
    sub_1000591F0(v13);
    swift_bridgeObjectRetain();
    sub_1000591F0(v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10001FA84();
    swift_allocError();
    *(void *)uint64_t v4 = 0;
    *(void *)(v4 + 8) = 0xE000000000000000;
    *(unsigned char *)(v4 + 16) = 5;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_10003B948(uint64_t result)
{
  uint64_t v1 = (HIDWORD(result) - result);
  if (HIDWORD(result) < result) {
    uint64_t v1 = -(uint64_t)(result - HIDWORD(result));
  }
  if (!v1) {
    return 0;
  }
  double v2 = ceil((double)(32 - __clz(HIDWORD(result))) * 0.125);
  if ((~*(void *)&v2 & 0x7FF0000000000000) != 0)
  {
    if (v2 > -9.22337204e18)
    {
      if (v2 < 9.22337204e18) {
        return (uint64_t)v2;
      }
      goto LABEL_11;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t RangeReplaceableCollection<>.encodedLength(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v34 = a1;
  uint64_t v32 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v31 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  unint64_t v30 = (char *)&v28 - v6;
  sub_10001FB5C(&qword_100081978);
  uint64_t v29 = *(void *)(a4 + 8);
  swift_getAssociatedTypeWitness();
  uint64_t v7 = sub_1000592D0();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v9 = sub_1000592D0();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  Swift::String v13 = (uint64_t *)((char *)&v28 - v12);
  uint64_t v14 = *(void *)(v7 - 8);
  __chkstk_darwin(v11);
  uint64_t v16 = (char *)&v28 - v15;
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v10 + 16))(v13, v34, v9);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 48))(v13, 1, TupleTypeMetadata2) == 1)
  {
    (*(void (**)(uint64_t *, uint64_t))(v10 + 8))(v13, v9);
    sub_10001FA84();
    swift_allocError();
    *(void *)uint64_t v17 = 0xD000000000000085;
    *(void *)(v17 + 8) = 0x80000001000627B0;
    *(unsigned char *)(v17 + 16) = 1;
    return swift_willThrow();
  }
  uint64_t v34 = *v13;
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, (char *)v13 + *(int *)(TupleTypeMetadata2 + 48), v7);
  if (sub_100059240())
  {
    uint64_t v19 = sub_100059240();
    uint64_t v36 = 0;
    uint64_t v20 = (void (*)(char *, void))sub_100059270();
    __int16 v21 = v30;
    uint64_t v22 = v31;
    (*(void (**)(char *))(v31 + 16))(v30);
    v20(v35, 0);
    uint64_t v23 = v33;
    uint64_t v24 = (*(uint64_t (**)(char *, uint64_t))(v29 + 24))(v16, AssociatedTypeWitness);
    if (v23)
    {
      (*(void (**)(char *, uint64_t))(v22 + 8))(v21, AssociatedTypeWitness);
      return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v7);
    }
    uint64_t v26 = v24;
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v21, AssociatedTypeWitness);
    uint64_t v25 = v19 * v26;
    if ((unsigned __int128)(v19 * (__int128)v26) >> 64 != (v19 * v26) >> 63) {
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v25 = 0;
  }
  uint64_t v27 = sub_10003B948(v34);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v7);
  uint64_t result = v25 + v27;
  if (__OFADD__(v25, v27))
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  return result;
}

uint64_t RangeReplaceableCollection<>.encodedLength(with:)(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v52 = a1;
  uint64_t v7 = *(void *)(*(void *)(a3 + 8) + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v49 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  uint64_t v53 = (char *)&v41 - v9;
  uint64_t v10 = sub_1000592D0();
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  uint64_t v54 = (char *)&v41 - v12;
  uint64_t v47 = *(void *)(a2 - 8);
  __chkstk_darwin(v11);
  unint64_t v46 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = v7;
  uint64_t AssociatedConformanceWitness = a2;
  uint64_t v57 = swift_getAssociatedTypeWitness();
  uint64_t v45 = *(void *)(v57 - 8);
  __chkstk_darwin(v57);
  uint64_t v56 = (char *)&v41 - v14;
  sub_10001FB5C(&qword_100081978);
  uint64_t v55 = a4;
  swift_getAssociatedTypeWitness();
  uint64_t v15 = sub_1000592D0();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v17 = sub_1000592D0();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = __chkstk_darwin(v17);
  __int16 v21 = (unsigned int *)((char *)&v41 - v20);
  uint64_t v22 = *(void *)(v15 - 8);
  __chkstk_darwin(v19);
  uint64_t v24 = (char *)&v41 - v23;
  (*(void (**)(unsigned int *, char *, uint64_t))(v18 + 16))(v21, v52, v17);
  if ((*(unsigned int (**)(unsigned int *, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 48))(v21, 1, TupleTypeMetadata2) == 1)
  {
    (*(void (**)(unsigned int *, uint64_t))(v18 + 8))(v21, v17);
    sub_10001FA84();
    swift_allocError();
    *(void *)uint64_t v25 = 0xD000000000000085;
    *(void *)(v25 + 8) = 0x80000001000627B0;
    *(unsigned char *)(v25 + 16) = 1;
    return swift_willThrow();
  }
  else
  {
    uint64_t v42 = *v21;
    uint64_t v43 = v15;
    uint64_t v41 = v21[1];
    uint64_t v27 = (char *)v21 + *(int *)(TupleTypeMetadata2 + 48);
    uint64_t v44 = v22;
    uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v22 + 32);
    uint64_t v52 = v24;
    v28(v24, v27, v15);
    (*(void (**)(char *, uint64_t, uint64_t))(v47 + 16))(v46, v48, AssociatedConformanceWitness);
    sub_100059200();
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    unint64_t v29 = 0;
    unint64_t v30 = (unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48);
    uint64_t v31 = (void (**)(char *, char *, uint64_t))(v49 + 32);
    uint64_t v32 = (void (**)(char *, uint64_t))(v49 + 8);
    while (1)
    {
      uint64_t v33 = v54;
      sub_1000592E0();
      if ((*v30)(v33, 1, AssociatedTypeWitness) == 1) {
        break;
      }
      uint64_t v34 = v53;
      (*v31)(v53, v33, AssociatedTypeWitness);
      uint64_t v35 = (*(uint64_t (**)(char *, uint64_t))(v55 + 24))(v52, AssociatedTypeWitness);
      if (v4)
      {
        (*v32)(v34, AssociatedTypeWitness);
        (*(void (**)(char *, uint64_t))(v45 + 8))(v56, v57);
        return (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v52, v43);
      }
      uint64_t v36 = v35;
      (*v32)(v34, AssociatedTypeWitness);
      BOOL v37 = __OFADD__(v29, v36);
      v29 += v36;
      if (v37)
      {
        __break(1u);
        break;
      }
    }
    (*(void (**)(char *, uint64_t))(v45 + 8))(v56, v57);
    unint64_t v38 = v42 | (v41 << 32);
    sub_10003B748(v29, v38);
    Swift::String v39 = (uint64_t (**)(char *, uint64_t))(v44 + 8);
    if (v4)
    {
      return (*v39)(v52, v43);
    }
    else
    {
      uint64_t v40 = sub_10003B948(v38);
      (*v39)(v52, v43);
      uint64_t result = v29 + v40;
      if (__OFADD__(v29, v40)) {
        __break(1u);
      }
    }
  }
  return result;
}

uint64_t RangeReplaceableCollection<>.encode<A>(into:with:)(uint64_t a1, char *a2, void *a3, uint64_t a4, unsigned int (*a5)(void, void, void), uint64_t a6, uint64_t a7)
{
  uint64_t v79 = a6;
  uint64_t v80 = a1;
  uint64_t v81 = a4;
  int64_t v73 = a5;
  uint64_t v10 = *(void *)(*((void *)a5 + 1) + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v69 = *(void *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  unint64_t v72 = (char *)&v59 - v12;
  uint64_t v13 = sub_1000592D0();
  uint64_t v14 = __chkstk_darwin(v13 - 8);
  uint64_t v71 = (char *)&v59 - v15;
  uint64_t v66 = *(a3 - 1);
  __chkstk_darwin(v14);
  uint64_t v65 = (char *)&v59 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v67 = v10;
  uint64_t v77 = swift_getAssociatedTypeWitness();
  uint64_t v68 = *(void *)(v77 - 8);
  __chkstk_darwin(v77);
  uint64_t v76 = (char *)&v59 - v17;
  sub_10001FB5C(&qword_100081978);
  uint64_t v78 = a7;
  uint64_t v70 = AssociatedTypeWitness;
  swift_getAssociatedTypeWitness();
  uint64_t v18 = sub_1000592D0();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v20 = sub_1000592D0();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v24 = (uint64_t *)((char *)&v59 - v23);
  uint64_t v25 = *(void *)(v18 - 8);
  __chkstk_darwin(v22);
  uint64_t v27 = (char *)&v59 - v26;
  (*(void (**)(uint64_t *, char *, uint64_t))(v21 + 16))(v24, a2, v20);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 48))(v24, 1, TupleTypeMetadata2) == 1)
  {
    (*(void (**)(uint64_t *, uint64_t))(v21 + 8))(v24, v20);
    sub_10001FA84();
    swift_allocError();
    *(void *)uint64_t v28 = 0xD000000000000085;
    *(void *)(v28 + 8) = 0x80000001000627B0;
    *(unsigned char *)(v28 + 16) = 1;
    return swift_willThrow();
  }
  uint64_t v64 = *v24;
  (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v27, (char *)v24 + *(int *)(TupleTypeMetadata2 + 48), v18);
  uint64_t v30 = *(void *)(v79 + 8);
  uint64_t v31 = sub_100059240();
  uint64_t v32 = v74;
  uint64_t v33 = RangeReplaceableCollection<>.encodedLength(with:)(a2, (uint64_t)a3, (uint64_t)v73, v78);
  if (v32) {
    return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v27, v18);
  }
  uint64_t v34 = v64;
  int64_t v73 = (unsigned int (*)(void, void, void))a3;
  uint64_t v62 = v30;
  uint64_t v74 = v27;
  uint64_t v63 = v25;
  uint64_t v35 = v33;
  BOOL v36 = __OFADD__(v31, v33);
  uint64_t result = v31 + v33;
  if (v36)
  {
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v61 = v31;
  sub_100059280();
  uint64_t result = sub_10003B948(v34);
  BOOL v36 = __OFSUB__(v35, result);
  unint64_t v37 = v35 - result;
  Swift::String v39 = v71;
  unint64_t v38 = v72;
  uint64_t v40 = v70;
  if (v36)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v41 = AssociatedConformanceWitness;
  uint64_t v42 = v73;
  uint64_t v64 = result;
  if (result >= 1)
  {
    if ((v37 & 0x8000000000000000) == 0)
    {
      uint64_t v43 = v79;
      if (!HIDWORD(v37))
      {
        LODWORD(v82) = v37;
        unint64_t v44 = sub_100022BFC();
        sub_100020EB0(v64, v80, (uint64_t)&type metadata for UInt32, v81, v44, v43);
        unint64_t v59 = v37;
        uint64_t v41 = AssociatedConformanceWitness;
        goto LABEL_12;
      }
LABEL_26:
      __break(1u);
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  unint64_t v59 = v37;
LABEL_12:
  uint64_t v60 = v18;
  (*(void (**)(char *, uint64_t, unsigned int (*)(void, void, void)))(v66 + 16))(v65, v41, v42);
  sub_100059200();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  sub_1000592E0();
  uint64_t v45 = v69;
  int64_t v73 = *(unsigned int (**)(void, void, void))(v69 + 48);
  if (v73(v39, 1, v40) != 1)
  {
    uint64_t v69 = *(void *)(v45 + 32);
    do
    {
      ((void (*)(char *, char *, uint64_t))v69)(v38, v39, v40);
      (*(void (**)(uint64_t, char *, uint64_t, uint64_t, uint64_t))(v78 + 40))(v80, v74, v81, v79, v40);
      (*(void (**)(char *, uint64_t))(v45 + 8))(v38, v40);
      sub_1000592E0();
    }
    while (v73(v39, 1, v40) != 1);
  }
  (*(void (**)(char *, uint64_t))(v68 + 8))(v76, v77);
  uint64_t result = sub_100059240();
  uint64_t v46 = v61;
  uint64_t v47 = result - v61;
  if (__OFSUB__(result, v61)) {
    goto LABEL_27;
  }
  uint64_t v48 = v63;
  unint64_t v49 = v47 - v64;
  uint64_t v50 = v60;
  unint64_t v51 = v74;
  if (__OFSUB__(v47, v64))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (sub_100059240() < v46)
  {
LABEL_18:
    uint64_t v82 = 0;
    unint64_t v83 = 0xE000000000000000;
    sub_100059370(19);
    unint64_t v84 = v59;
    uint64_t v52 = sub_1000593D0();
    unint64_t v54 = v53;
    swift_bridgeObjectRelease();
    uint64_t v82 = v52;
    unint64_t v83 = v54;
    v85._countAndFlagsBits = 0x616574736E69202CLL;
    v85._object = (void *)0xEE0020746F672064;
    sub_1000591F0(v85);
    unint64_t v84 = v49;
    v86._countAndFlagsBits = sub_1000593D0();
    sub_1000591F0(v86);
    swift_bridgeObjectRelease();
    v87._countAndFlagsBits = 46;
    v87._object = (void *)0xE100000000000000;
    sub_1000591F0(v87);
    v88._countAndFlagsBits = v82;
    uint64_t v55 = (void *)v83;
    uint64_t v82 = 0xD000000000000027;
    unint64_t v83 = 0x8000000100062C30;
    v88._object = v55;
    sub_1000591F0(v88);
    swift_bridgeObjectRelease();
    uint64_t v56 = v82;
    unint64_t v57 = v83;
    sub_10001FA84();
    swift_allocError();
    *(void *)uint64_t v58 = v56;
    *(void *)(v58 + 8) = v57;
    *(unsigned char *)(v58 + 16) = 5;
    swift_willThrow();
    return (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v51, v50);
  }
  uint64_t result = sub_100059240();
  if (!__OFSUB__(result, v46))
  {
    if (result - v46 >= v64 && v49 == v59) {
      return (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v51, v50);
    }
    goto LABEL_18;
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t RangeReplaceableCollection<>.init<A>(from:with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  unint64_t v88 = a6;
  uint64_t v89 = a1;
  uint64_t v90 = a4;
  uint64_t v73 = a8;
  uint64_t v75 = a5;
  uint64_t v74 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v76 = *(void (***)(char *, char *))(AssociatedTypeWitness - 8);
  uint64_t v11 = __chkstk_darwin(AssociatedTypeWitness);
  unint64_t v84 = (char *)&v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  Swift::String v86 = (char *)&v68 - v13;
  sub_10001FB5C(&qword_100081978);
  uint64_t v87 = a7;
  unint64_t v83 = (char *)AssociatedTypeWitness;
  swift_getAssociatedTypeWitness();
  uint64_t v14 = sub_1000592D0();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v16 = sub_1000592D0();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v20 = (uint64_t *)((char *)&v68 - v19);
  uint64_t v21 = *(void *)(v14 - 8);
  uint64_t v22 = __chkstk_darwin(v18);
  Swift::String v85 = (char *)&v68 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  uint64_t v25 = (char *)&v68 - v24;
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v17 + 16))(v20, a2, v16);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 48))(v20, 1, TupleTypeMetadata2) == 1)
  {
    uint64_t v26 = *(void (**)(uint64_t *, uint64_t))(v17 + 8);
    v26(v20, v16);
    sub_10001FA84();
    swift_allocError();
    *(void *)uint64_t v27 = 0xD000000000000085;
    *(void *)(v27 + 8) = 0x80000001000627B0;
    *(unsigned char *)(v27 + 16) = 1;
    swift_willThrow();
    return ((uint64_t (*)(uint64_t, uint64_t))v26)(a2, v16);
  }
  uint64_t v72 = a2;
  uint64_t v70 = v16;
  uint64_t v71 = v17;
  uint64_t v29 = *v20;
  (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v25, (char *)v20 + *(int *)(TupleTypeMetadata2 + 48), v14);
  uint64_t v30 = sub_10003B948(v29);
  if (v30)
  {
    uint64_t v31 = v30;
    unint64_t v32 = sub_100022BFC();
    unint64_t v33 = v88;
    uint64_t v34 = v81;
    CommonUIntTLSNumberType.init<A>(from:with:encodedLength:)(v31, (uint64_t)&type metadata for UInt32, v90, v32, v88, (uint64_t)&v92);
    uint64_t v35 = v34;
    BOOL v36 = v83;
    if (v34)
    {
      (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v72, v70);
      return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v25, v14);
    }
    uint64_t v82 = v14;
    LODWORD(v29) = v92;
  }
  else
  {
    uint64_t v82 = v14;
    BOOL v36 = v83;
    unint64_t v33 = v88;
    uint64_t v35 = v81;
  }
  unint64_t v83 = v25;
  uint64_t v81 = *(void *)(*(void *)(v33 + 8) + 8);
  uint64_t v37 = sub_100059240();
  uint64_t v38 = sub_100059160();
  uint64_t v94 = v38;
  uint64_t v69 = v21;
  if (v29)
  {
    unsigned int v39 = 0;
    uint64_t v79 = *(void (**)(uint64_t, char *, uint64_t, unint64_t, char *, uint64_t))(v87 + 72);
    uint64_t v80 = v87 + 72;
    uint64_t v77 = *(void (**)(char *, char *, uint64_t))(v21 + 16);
    uint64_t v78 = v21 + 16;
    uint64_t v40 = (void (**)(char *, char *, char *))(v76 + 2);
    ++v76;
    while (1)
    {
      uint64_t v41 = v85;
      v77(v85, v83, v82);
      v79(v89, v41, v90, v88, v36, v87);
      if (v35)
      {
        (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v72, v70);
        swift_bridgeObjectRelease();
        return (*(uint64_t (**)(char *, uint64_t))(v69 + 8))(v83, v82);
      }
      uint64_t result = sub_100059240();
      BOOL v42 = __OFSUB__(v37, result);
      unint64_t v43 = v37 - result;
      if (v42) {
        break;
      }
      if ((v43 & 0x8000000000000000) != 0)
      {
        unsigned int v44 = v29 - v39;
        swift_bridgeObjectRelease();
        if (v29 < v39)
        {
          __break(1u);
LABEL_23:
          swift_bridgeObjectRelease();
        }
        uint64_t v51 = v71;
        LODWORD(v91) = v44;
        unint64_t v92 = sub_1000593D0();
        unint64_t v93 = v52;
        v95._countAndFlagsBits = 0x616574736E69202CLL;
        v95._object = (void *)0xEA00000000002064;
        sub_1000591F0(v95);
        v96._countAndFlagsBits = v92;
        unint64_t v53 = (void *)v93;
        unint64_t v92 = 0xD00000000000008ELL;
        unint64_t v93 = 0x8000000100062DD0;
        v96._object = v53;
        sub_1000591F0(v96);
        swift_bridgeObjectRelease();
        unint64_t v55 = v92;
        unint64_t v54 = v93;
        unint64_t v92 = 544501607;
        unint64_t v93 = 0xE400000000000000;
        unint64_t v91 = v43;
        v97._countAndFlagsBits = sub_1000593D0();
        sub_1000591F0(v97);
        swift_bridgeObjectRelease();
        v98._countAndFlagsBits = 46;
        v98._object = (void *)0xE100000000000000;
        sub_1000591F0(v98);
        uint64_t v56 = v92;
        unint64_t v57 = (void *)v93;
        unint64_t v92 = v55;
        unint64_t v93 = v54;
        swift_bridgeObjectRetain();
        v99._countAndFlagsBits = v56;
        v99._object = v57;
        sub_1000591F0(v99);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v58 = v92;
        unint64_t v59 = v93;
        sub_10001FA84();
        swift_allocError();
        *(void *)uint64_t v60 = v58;
        *(void *)(v60 + 8) = v59;
        *(unsigned char *)(v60 + 16) = 5;
        swift_willThrow();
        (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v72, v70);
        (*v76)(v86, v36);
        return (*(uint64_t (**)(char *, uint64_t))(v69 + 8))(v83, v82);
      }
      if (HIDWORD(v43)) {
        goto LABEL_29;
      }
      unsigned int v44 = v29 - v39;
      if (v29 < v39) {
        goto LABEL_30;
      }
      if (v44 < v43) {
        goto LABEL_23;
      }
      BOOL v45 = __CFADD__(v39, v43);
      v39 += v43;
      if (v45) {
        goto LABEL_31;
      }
      uint64_t v46 = result;
      uint64_t v47 = v86;
      (*v40)(v84, v86, v36);
      sub_100059230();
      sub_100059220();
      (*v76)(v47, v36);
      uint64_t v37 = v46;
      if (v39 >= v29)
      {
        uint64_t v38 = v94;
        if (v39 == v29) {
          goto LABEL_19;
        }
        swift_bridgeObjectRelease();
        unint64_t v92 = 0;
        unint64_t v93 = 0xE000000000000000;
        sub_100059370(19);
        LODWORD(v91) = v29;
        uint64_t v61 = sub_1000593D0();
        unint64_t v63 = v62;
        swift_bridgeObjectRelease();
        unint64_t v92 = v61;
        unint64_t v93 = v63;
        v100._countAndFlagsBits = 0x616574736E69202CLL;
        v100._object = (void *)0xEE0020746F672064;
        sub_1000591F0(v100);
        LODWORD(v91) = v39;
        v101._countAndFlagsBits = sub_1000593D0();
        sub_1000591F0(v101);
        swift_bridgeObjectRelease();
        v102._countAndFlagsBits = 46;
        v102._object = (void *)0xE100000000000000;
        sub_1000591F0(v102);
        v103._countAndFlagsBits = v92;
        uint64_t v64 = (void *)v93;
        unint64_t v92 = 0xD000000000000031;
        unint64_t v93 = 0x8000000100062D90;
        v103._object = v64;
        sub_1000591F0(v103);
        swift_bridgeObjectRelease();
        unint64_t v65 = v92;
        unint64_t v66 = v93;
        sub_10001FA84();
        swift_allocError();
        *(void *)uint64_t v67 = v65;
        *(void *)(v67 + 8) = v66;
        *(unsigned char *)(v67 + 16) = 5;
        swift_willThrow();
        (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v72, v70);
        return (*(uint64_t (**)(char *, uint64_t))(v69 + 8))(v83, v82);
      }
    }
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
  }
  else
  {
LABEL_19:
    uint64_t v48 = v72;
    uint64_t v49 = v82;
    uint64_t v50 = v70;
    unint64_t v92 = v38;
    sub_100059230();
    swift_getWitnessTable();
    sub_1000592B0();
    (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v48, v50);
    return (*(uint64_t (**)(char *, uint64_t))(v69 + 8))(v83, v49);
  }
  return result;
}

uint64_t sub_10003D774(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  uint64_t WitnessTable = swift_getWitnessTable();
  return RangeReplaceableCollection<>.encodedLength(with:)(a1, a2, WitnessTable, v5);
}

uint64_t sub_10003D7D8(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  uint64_t v11 = *(void *)(a6 - 8);
  uint64_t WitnessTable = (unsigned int (*)(void, void, void))swift_getWitnessTable();
  return RangeReplaceableCollection<>.encode<A>(into:with:)(a1, a2, a5, a3, WitnessTable, a4, v11);
}

uint64_t sub_10003D868@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v13 = *(void *)(a6 - 8);
  uint64_t WitnessTable = swift_getWitnessTable();
  return RangeReplaceableCollection<>.init<A>(from:with:)(a1, a2, a5, a3, WitnessTable, a4, v13, a7);
}

uint64_t sub_10003D900(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10003D954(uint64_t a1)
{
  return sub_100025C60(*(void *)a1, *(unsigned __int8 *)(a1 + 8) | (unsigned __int16)(*(unsigned __int8 *)(a1 + 9) << 8), *(void *)v1, *(void *)(v1 + 8));
}

unint64_t sub_10003D98C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v8 = *(void *)a2;
  int v9 = *(unsigned __int8 *)(a2 + 8);
  int v10 = *(unsigned __int8 *)(a2 + 9);
  sub_100024898();
  return RangeReplaceableCollection<>.encode<A>(into:with:)(a1, v8, v9 | (v10 << 8), a5, a3);
}

uint64_t sub_10003DA10(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(void *)a2;
  int v10 = *(unsigned __int8 *)(a2 + 8);
  int v11 = *(unsigned __int8 *)(a2 + 9);
  unint64_t v12 = sub_100024898();
  return RangeReplaceableCollection<>.init<A>(from:with:)(a1, v9, v10 | (v11 << 8), a5, a3, v12, a4);
}

unint64_t sub_10003DA9C(uint64_t a1)
{
  unint64_t result = sub_10003DAC4();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10003DAC4()
{
  unint64_t result = qword_100081B78;
  if (!qword_100081B78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100081B78);
  }
  return result;
}

uint64_t PPM_0_2_1.ReportAuth.token.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10003DB24(v1, a1);
}

uint64_t sub_10003DB24(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t PPM_0_2_1.ReportAuth.challenge.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10003DB68(v1 + 72, a1);
}

uint64_t sub_10003DB68(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t PPM_0_2_1.ReportAuth.encodedLength(with:)(unint64_t a1, int a2)
{
  if ((a2 & 0x10000) != 0) {
    a1 = 0;
  }
  uint64_t result = PPM_0_2_1.Token.encodedLength(with:)(a1, (a2 & 0x10001) != 0);
  if (!v2)
  {
    uint64_t v4 = result;
    uint64_t v5 = sub_10003EF5C();
    BOOL v6 = __OFADD__(v4, v5);
    uint64_t result = v4 + v5;
    if (v6) {
      __break(1u);
    }
  }
  return result;
}

uint64_t PPM_0_2_1.Token.encodedLength(with:)(unint64_t a1, char a2)
{
  long long v43 = *(_OWORD *)(v2 + 8);
  sub_1000251C8((uint64_t)&v43, (uint64_t)v44);
  sub_1000251C8((uint64_t)v44, (uint64_t)&v45);
  unsigned __int8 v6 = BYTE6(v46);
  unint64_t v7 = 0;
  switch(v46 >> 62)
  {
    case 1uLL:
      v46 &= 0x3FFFFFFFFFFFFFFFuLL;
      if (__OFSUB__(HIDWORD(v45), v45)) {
        goto LABEL_41;
      }
      unint64_t v7 = HIDWORD(v45) - (int)v45;
LABEL_6:
      sub_100025224((uint64_t)&v43);
LABEL_7:
      sub_10003B748(v7, 0x2000000020uLL);
      if (v3) {
        return sub_100025254((uint64_t)&v43);
      }
      uint64_t v10 = sub_10003B948(0x2000000020);
      sub_100025254((uint64_t)&v43);
      unint64_t v11 = v7 + v10;
      if (__OFADD__(v7, v10)) {
        goto LABEL_39;
      }
      unint64_t v12 = v11 + 2;
      if (__OFADD__(v11, 2)) {
        goto LABEL_40;
      }
      long long v41 = *(_OWORD *)(v2 + 24);
      sub_1000251C8((uint64_t)&v41, (uint64_t)v42);
      sub_1000251C8((uint64_t)v42, (uint64_t)&v47);
      unsigned __int8 v13 = BYTE6(v48);
      unint64_t v14 = 0;
      switch(v48 >> 62)
      {
        case 1uLL:
          v48 &= 0x3FFFFFFFFFFFFFFFuLL;
          if (__OFSUB__(HIDWORD(v47), v47)) {
            goto LABEL_45;
          }
          unint64_t v14 = HIDWORD(v47) - (int)v47;
LABEL_16:
          sub_100025224((uint64_t)&v41);
LABEL_17:
          sub_10003B748(v14, 0x2000000020uLL);
          uint64_t v18 = sub_10003B948(0x2000000020);
          sub_100025254((uint64_t)&v41);
          unint64_t v19 = v14 + v18;
          if (__OFADD__(v14, v18)) {
            goto LABEL_43;
          }
          BOOL v20 = __OFADD__(v12, v19);
          unint64_t v21 = v12 + v19;
          if (v20) {
            goto LABEL_44;
          }
          if ((a2 & 1) == 0)
          {
            long long v39 = *(_OWORD *)(v2 + 40);
            sub_1000251C8((uint64_t)&v39, (uint64_t)v40);
            sub_1000251C8((uint64_t)v40, (uint64_t)&v49);
            unsigned __int8 v22 = BYTE6(v50);
            unint64_t v23 = 0;
            switch(v50 >> 62)
            {
              case 1uLL:
                v50 &= 0x3FFFFFFFFFFFFFFFuLL;
                if (__OFSUB__(HIDWORD(v49), v49)) {
                  goto LABEL_49;
                }
                unint64_t v23 = HIDWORD(v49) - (int)v49;
LABEL_26:
                sub_100025224((uint64_t)&v39);
LABEL_27:
                sub_10003B748(v23, a1 | ((unint64_t)a1 << 32));
                uint64_t v27 = sub_10003B948(a1 | ((unint64_t)a1 << 32));
                sub_100025254((uint64_t)&v39);
                unint64_t v28 = v23 + v27;
                if (__OFADD__(v23, v27)) {
                  goto LABEL_47;
                }
                unint64_t v29 = v21 + v28;
                if (__OFADD__(v21, v28)) {
                  goto LABEL_48;
                }
                long long v37 = *(_OWORD *)(v2 + 56);
                sub_1000251C8((uint64_t)&v37, (uint64_t)v38);
                sub_1000251C8((uint64_t)v38, (uint64_t)&v51);
                unsigned __int8 v30 = BYTE6(v52);
                unint64_t v31 = 0;
                switch(v52 >> 62)
                {
                  case 1uLL:
                    v52 &= 0x3FFFFFFFFFFFFFFFuLL;
                    if (__OFSUB__(HIDWORD(v51), v51)) {
                      goto LABEL_52;
                    }
                    unint64_t v31 = HIDWORD(v51) - (int)v51;
LABEL_34:
                    sub_100025224((uint64_t)&v37);
LABEL_35:
                    unint64_t v34 = a1 & 0xFFFFFFFF00000000 | HIDWORD(a1);
                    sub_10003B748(v31, v34);
                    uint64_t v35 = sub_10003B948(v34);
                    sub_100025254((uint64_t)&v37);
                    unint64_t v36 = v31 + v35;
                    if (__OFADD__(v31, v35)) {
                      goto LABEL_51;
                    }
                    uint64_t result = v29 + v36;
                    if (!__OFADD__(v29, v36)) {
                      return result;
                    }
                    __break(1u);
                    break;
                  case 2uLL:
                    v52 &= 0x3FFFFFFFFFFFFFFFuLL;
                    uint64_t v32 = *(void *)(v51 + 16);
                    uint64_t v33 = *(void *)(v51 + 24);
                    unint64_t v31 = v33 - v32;
                    if (!__OFSUB__(v33, v32)) {
                      goto LABEL_34;
                    }
                    goto LABEL_53;
                  case 3uLL:
                    goto LABEL_35;
                  default:
                    v52 &= 0x3FFFFFFFFFFFFFFFuLL;
                    unint64_t v31 = v30;
                    goto LABEL_35;
                }
                break;
              case 2uLL:
                v50 &= 0x3FFFFFFFFFFFFFFFuLL;
                uint64_t v25 = *(void *)(v49 + 16);
                uint64_t v26 = *(void *)(v49 + 24);
                unint64_t v23 = v26 - v25;
                if (!__OFSUB__(v26, v25)) {
                  goto LABEL_26;
                }
                goto LABEL_50;
              case 3uLL:
                goto LABEL_27;
              default:
                v50 &= 0x3FFFFFFFFFFFFFFFuLL;
                unint64_t v23 = v22;
                goto LABEL_27;
            }
LABEL_39:
            __break(1u);
LABEL_40:
            __break(1u);
LABEL_41:
            __break(1u);
LABEL_42:
            __break(1u);
LABEL_43:
            __break(1u);
LABEL_44:
            __break(1u);
LABEL_45:
            __break(1u);
LABEL_46:
            __break(1u);
LABEL_47:
            __break(1u);
LABEL_48:
            __break(1u);
LABEL_49:
            __break(1u);
LABEL_50:
            __break(1u);
LABEL_51:
            __break(1u);
LABEL_52:
            __break(1u);
LABEL_53:
            __break(1u);
            JUMPOUT(0x10003E098);
          }
          sub_10001FA84();
          swift_allocError();
          *(void *)uint64_t v24 = 0xD000000000000052;
          *(void *)(v24 + 8) = 0x8000000100062840;
          *(unsigned char *)(v24 + 16) = 1;
          return swift_willThrow();
        case 2uLL:
          v48 &= 0x3FFFFFFFFFFFFFFFuLL;
          uint64_t v15 = *(void *)(v47 + 16);
          uint64_t v16 = *(void *)(v47 + 24);
          unint64_t v14 = v16 - v15;
          if (!__OFSUB__(v16, v15)) {
            goto LABEL_16;
          }
          goto LABEL_46;
        case 3uLL:
          goto LABEL_17;
        default:
          v48 &= 0x3FFFFFFFFFFFFFFFuLL;
          unint64_t v14 = v13;
          goto LABEL_17;
      }
    case 2uLL:
      v46 &= 0x3FFFFFFFFFFFFFFFuLL;
      uint64_t v8 = *(void *)(v45 + 16);
      uint64_t v9 = *(void *)(v45 + 24);
      unint64_t v7 = v9 - v8;
      if (!__OFSUB__(v9, v8)) {
        goto LABEL_6;
      }
      goto LABEL_42;
    case 3uLL:
      goto LABEL_7;
    default:
      v46 &= 0x3FFFFFFFFFFFFFFFuLL;
      unint64_t v7 = v6;
      goto LABEL_7;
  }
}

Swift::Int __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> PPM_0_2_1.Challenge.encodedLength(with:)(Swift::Void_optional with)
{
  return sub_10003EF5C();
}

unint64_t PPM_0_2_1.ReportAuth.encode<A>(into:with:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  if ((a3 & 0x10000) != 0) {
    a2 = 0;
  }
  unint64_t result = PPM_0_2_1.Token.encode<A>(into:with:)(a1, a2, (a3 & 0x10001) != 0, a4, a5);
  if (!v5) {
    return sub_10003F294(a1, a4, a5);
  }
  return result;
}

unint64_t PPM_0_2_1.Token.encode<A>(into:with:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  unint64_t v11 = sub_100022C50();
  unint64_t result = sub_1000223EC(a1, (uint64_t)&type metadata for UInt16, a4, v11, a5);
  if (!v5)
  {
    sub_100024898();
    RangeReplaceableCollection<>.encode<A>(into:with:)(a1, 0x2000000020uLL, 1, (uint64_t)&type metadata for Data, a4);
    RangeReplaceableCollection<>.encode<A>(into:with:)(a1, 0x2000000020uLL, 1, (uint64_t)&type metadata for Data, a4);
    if (a3)
    {
      sub_10001FA84();
      swift_allocError();
      *(void *)uint64_t v13 = 0xD000000000000052;
      *(void *)(v13 + 8) = 0x8000000100062840;
      *(unsigned char *)(v13 + 16) = 1;
      return swift_willThrow();
    }
    else
    {
      RangeReplaceableCollection<>.encode<A>(into:with:)(a1, a2 | ((unint64_t)a2 << 32), 1, (uint64_t)&type metadata for Data, a4);
      return RangeReplaceableCollection<>.encode<A>(into:with:)(a1, a2 & 0xFFFFFFFF00000000 | HIDWORD(a2), 1, (uint64_t)&type metadata for Data, a4);
    }
  }
  return result;
}

unint64_t PPM_0_2_1.Challenge.encode<A>(into:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10003F294(a1, a3, a4);
}

__n128 PPM_0_2_1.ReportAuth.init(token:challenge:)@<Q0>(uint64_t a1@<X0>, __int16 *a2@<X1>, uint64_t a3@<X8>)
{
  __int16 v3 = *a2;
  *(_WORD *)a3 = *(_WORD *)a1;
  *(_OWORD *)(a3 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a3 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a3 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a3 + 56) = *(_OWORD *)(a1 + 56);
  *(_WORD *)(a3 + 72) = v3;
  long long v4 = *(_OWORD *)(a2 + 12);
  *(_OWORD *)(a3 + 80) = *(_OWORD *)(a2 + 4);
  *(_OWORD *)(a3 + 96) = v4;
  __n128 result = *(__n128 *)(a2 + 20);
  *(__n128 *)(a3 + 112) = result;
  return result;
}

uint64_t PPM_0_2_1.ReportAuth.init<A>(from:with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X8>)
{
  if ((a3 & 0x10000) != 0) {
    a2 = 0;
  }
  uint64_t result = PPM_0_2_1.Token.init<A>(from:with:)(a1, a2, (a3 & 0x10001) != 0, a4, a5, (uint64_t)&v23);
  if (!v6)
  {
    __int16 v12 = v23;
    uint64_t v13 = v24;
    uint64_t v14 = v25;
    uint64_t v15 = v26;
    uint64_t v36 = v27;
    uint64_t v21 = v29;
    uint64_t v22 = v28;
    uint64_t v19 = v31;
    uint64_t v20 = v30;
    uint64_t result = sub_10003F3DC(a1, a4, a5, (uint64_t)&v32);
    __int16 v16 = v32;
    *(_WORD *)a6 = v12;
    *(void *)(a6 + 8) = v13;
    *(void *)(a6 + 16) = v14;
    uint64_t v17 = v36;
    *(void *)(a6 + 24) = v15;
    *(void *)(a6 + 32) = v17;
    *(void *)(a6 + 40) = v22;
    *(void *)(a6 + 48) = v21;
    *(void *)(a6 + 56) = v20;
    *(void *)(a6 + 64) = v19;
    *(_WORD *)(a6 + 72) = v16;
    long long v18 = v34;
    *(_OWORD *)(a6 + 80) = v33;
    *(_OWORD *)(a6 + 96) = v18;
    *(_OWORD *)(a6 + 112) = v35;
  }
  return result;
}

uint64_t PPM_0_2_1.Token.init<A>(from:with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X8>)
{
  unint64_t v13 = sub_100022C50();
  uint64_t result = CommonUIntTLSNumberType.init<A>(from:with:)((uint64_t)&type metadata for UInt16, a4, v13, a5, (uint64_t)&v25);
  if (!v6)
  {
    uint64_t v24 = a6;
    int v15 = (unsigned __int16)v25;
    unint64_t v16 = sub_100024898();
    RangeReplaceableCollection<>.init<A>(from:with:)(a1, 0x2000000020, 1, (uint64_t)&type metadata for Data, a4, v16, a5);
    int v26 = v15;
    unint64_t v17 = *((void *)&v25 + 1);
    uint64_t v23 = v25;
    RangeReplaceableCollection<>.init<A>(from:with:)(a1, 0x2000000020, 1, (uint64_t)&type metadata for Data, a4, v16, a5);
    long long v18 = v25;
    if (a3)
    {
      sub_10001FA84();
      swift_allocError();
      *(void *)uint64_t v20 = 0xD000000000000052;
      *(void *)(v20 + 8) = 0x8000000100062840;
      *(unsigned char *)(v20 + 16) = 1;
      swift_willThrow();
      sub_100016B2C(v18, *((unint64_t *)&v18 + 1));
      return sub_100016B2C(v23, v17);
    }
    else
    {
      uint64_t v19 = v25;
      RangeReplaceableCollection<>.init<A>(from:with:)(a1, a2 | ((unint64_t)a2 << 32), 1, (uint64_t)&type metadata for Data, a4, v16, a5);
      long long v22 = v25;
      uint64_t result = RangeReplaceableCollection<>.init<A>(from:with:)(a1, a2 & 0xFFFFFFFF00000000 | HIDWORD(a2), 1, (uint64_t)&type metadata for Data, a4, v16, a5);
      long long v21 = v25;
      *(_WORD *)uint64_t v24 = v26;
      *(void *)(v24 + 8) = v23;
      *(void *)(v24 + 16) = v17;
      *(void *)(v24 + 24) = v19;
      *(void *)(v24 + 32) = *((void *)&v18 + 1);
      *(_OWORD *)(v24 + 40) = v22;
      *(_OWORD *)(v24 + 56) = v21;
    }
  }
  return result;
}

double PPM_0_2_1.Challenge.init<A>(from:with:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, uint64_t a4@<X8>)
{
  sub_10003F3DC(a1, a2, a3, (uint64_t)v8);
  if (!v4)
  {
    long long v7 = v8[1];
    *(_OWORD *)a4 = v8[0];
    *(_OWORD *)(a4 + 16) = v7;
    double result = *(double *)&v9;
    *(_OWORD *)(a4 + 32) = v9;
    *(void *)(a4 + 48) = v10;
  }
  return result;
}

uint64_t static PPM_0_2_1.Token.__derived_struct_equals(_:_:)(void *a1, void *a2)
{
  if (*(unsigned __int16 *)a1 != *(unsigned __int16 *)a2
    || (_s19DPSubmissionService9PPM_0_2_1V3UrlV23__derived_struct_equalsySbAE_AEtFZ_0(a1[1], a1[2], a2[1], a2[2]) & 1) == 0
    || (_s19DPSubmissionService9PPM_0_2_1V3UrlV23__derived_struct_equalsySbAE_AEtFZ_0(a1[3], a1[4], a2[3], a2[4]) & 1) == 0
    || (_s19DPSubmissionService9PPM_0_2_1V3UrlV23__derived_struct_equalsySbAE_AEtFZ_0(a1[5], a1[6], a2[5], a2[6]) & 1) == 0)
  {
    return 0;
  }
  uint64_t v4 = a1[7];
  unint64_t v5 = a1[8];
  uint64_t v6 = a2[7];
  unint64_t v7 = a2[8];
  return _s19DPSubmissionService9PPM_0_2_1V3UrlV23__derived_struct_equalsySbAE_AEtFZ_0(v4, v5, v6, v7);
}

uint64_t static PPM_0_2_1.Challenge.__derived_struct_equals(_:_:)(void *a1, void *a2)
{
  if (*(unsigned __int16 *)a1 != *(unsigned __int16 *)a2
    || (_s19DPSubmissionService9PPM_0_2_1V3UrlV23__derived_struct_equalsySbAE_AEtFZ_0(a1[1], a1[2], a2[1], a2[2]) & 1) == 0
    || (_s19DPSubmissionService9PPM_0_2_1V3UrlV23__derived_struct_equalsySbAE_AEtFZ_0(a1[3], a1[4], a2[3], a2[4]) & 1) == 0)
  {
    return 0;
  }
  uint64_t v4 = a1[5];
  unint64_t v5 = a1[6];
  uint64_t v6 = a2[5];
  unint64_t v7 = a2[6];
  return _s19DPSubmissionService9PPM_0_2_1V3UrlV23__derived_struct_equalsySbAE_AEtFZ_0(v4, v5, v6, v7);
}

uint64_t sub_10003E8AC(uint64_t a1)
{
  __int16 v2 = *(_WORD *)(a1 + 8);
  char v3 = *(unsigned char *)(a1 + 10);
  if (v3) {
    unint64_t v4 = 0;
  }
  else {
    unint64_t v4 = *(void *)a1;
  }
  uint64_t result = PPM_0_2_1.Token.encodedLength(with:)(v4, (v3 | v2) & 1);
  if (!v1)
  {
    uint64_t v6 = result;
    uint64_t v7 = sub_10003EF5C();
    BOOL v8 = __OFADD__(v6, v7);
    uint64_t result = v6 + v7;
    if (v8) {
      __break(1u);
    }
  }
  return result;
}

unint64_t sub_10003E92C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return PPM_0_2_1.ReportAuth.encode<A>(into:with:)(a1, *(void *)a2, *(unsigned __int16 *)(a2 + 8) | (*(unsigned __int8 *)(a2 + 10) << 16), a3, a4);
}

double sub_10003E968@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  PPM_0_2_1.ReportAuth.init<A>(from:with:)(a1, *(void *)a2, *(unsigned __int16 *)(a2 + 8) | (*(unsigned __int8 *)(a2 + 10) << 16), a3, a4, (uint64_t)v12);
  if (!v5)
  {
    long long v8 = v16;
    a5[4] = v15;
    a5[5] = v8;
    long long v9 = v18;
    a5[6] = v17;
    a5[7] = v9;
    long long v10 = v12[1];
    *a5 = v12[0];
    a5[1] = v10;
    double result = *(double *)&v13;
    long long v11 = v14;
    a5[2] = v13;
    a5[3] = v11;
  }
  return result;
}

BOOL sub_10003E9D8(_OWORD *a1, long long *a2)
{
  long long v2 = a1[5];
  v13[4] = a1[4];
  void v13[5] = v2;
  long long v3 = a1[7];
  v13[6] = a1[6];
  v13[7] = v3;
  long long v4 = a1[1];
  v13[0] = *a1;
  v13[1] = v4;
  long long v5 = a1[3];
  void v13[2] = a1[2];
  v13[3] = v5;
  long long v6 = *a2;
  long long v7 = a2[1];
  long long v8 = a2[3];
  _OWORD v14[2] = a2[2];
  v14[3] = v8;
  v14[0] = v6;
  v14[1] = v7;
  long long v9 = a2[4];
  long long v10 = a2[5];
  long long v11 = a2[7];
  v14[6] = a2[6];
  v14[7] = v11;
  v14[4] = v9;
  v14[5] = v10;
  return _s19DPSubmissionService9PPM_0_2_1V10ReportAuthV23__derived_struct_equalsySbAE_AEtFZ_0((unsigned __int16 *)v13, (unsigned __int16 *)v14);
}

uint64_t PPM_0_2_1.Challenge.tokenType.getter()
{
  return *v0;
}

uint64_t PPM_0_2_1.Challenge.issuerName.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  sub_100016E5C(v1, *(void *)(v0 + 16));
  return v1;
}

uint64_t static PPM_0_2_1.TaskID.lengthBounds.getter()
{
  return 0x2000000020;
}

uint64_t PPM_0_2_1.Challenge.redemptionContext.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  sub_100016E5C(v1, *(void *)(v0 + 32));
  return v1;
}

uint64_t PPM_0_2_1.Challenge.originInfo.getter()
{
  uint64_t v1 = *(void *)(v0 + 40);
  sub_100016E5C(v1, *(void *)(v0 + 48));
  return v1;
}

uint64_t PPM_0_2_1.Token.authenticator.getter()
{
  uint64_t v1 = *(void *)(v0 + 56);
  sub_100016E5C(v1, *(void *)(v0 + 64));
  return v1;
}

uint64_t PPM_0_2_1.Token.init(tokenType:nonce:challengeDigest:tokenKeyID:authenticator:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  *(_WORD *)a9 = result;
  *(void *)(a9 + 8) = a2;
  *(void *)(a9 + 16) = a3;
  *(void *)(a9 + 24) = a4;
  *(void *)(a9 + 32) = a5;
  *(void *)(a9 + 40) = a6;
  *(void *)(a9 + 48) = a7;
  *(void *)(a9 + 56) = a8;
  *(void *)(a9 + 64) = a10;
  return result;
}

uint64_t sub_10003EB48(uint64_t a1)
{
  return PPM_0_2_1.Token.encodedLength(with:)(*(void *)a1, *(unsigned char *)(a1 + 8));
}

unint64_t sub_10003EB6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return PPM_0_2_1.Token.encode<A>(into:with:)(a1, *(void *)a2, *(unsigned char *)(a2 + 8), a3, a4);
}

__n128 sub_10003EB98@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  PPM_0_2_1.Token.init<A>(from:with:)(a1, *(void *)a2, *(unsigned char *)(a2 + 8), a3, a4, (uint64_t)v9);
  if (!v5)
  {
    long long v8 = v9[3];
    *(_OWORD *)(a5 + 32) = v9[2];
    *(_OWORD *)(a5 + 48) = v8;
    *(void *)(a5 + 64) = v10;
    __n128 result = (__n128)v9[1];
    *(_OWORD *)a5 = v9[0];
    *(__n128 *)(a5 + 16) = result;
  }
  return result;
}

uint64_t sub_10003EC00(void *a1, void *a2)
{
  if (*(unsigned __int16 *)a1 != *(unsigned __int16 *)a2) {
    return 0;
  }
  uint64_t v2 = a1[3];
  unint64_t v3 = a1[4];
  uint64_t v4 = a1[5];
  unint64_t v5 = a1[6];
  unint64_t v13 = a1[8];
  uint64_t v14 = a1[7];
  uint64_t v6 = a2[3];
  unint64_t v7 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v9 = a2[6];
  uint64_t v10 = a2[7];
  unint64_t v11 = a2[8];
  if ((_s19DPSubmissionService9PPM_0_2_1V3UrlV23__derived_struct_equalsySbAE_AEtFZ_0(a1[1], a1[2], a2[1], a2[2]) & 1) == 0
    || (_s19DPSubmissionService9PPM_0_2_1V3UrlV23__derived_struct_equalsySbAE_AEtFZ_0(v2, v3, v6, v7) & 1) == 0
    || (_s19DPSubmissionService9PPM_0_2_1V3UrlV23__derived_struct_equalsySbAE_AEtFZ_0(v4, v5, v8, v9) & 1) == 0)
  {
    return 0;
  }
  return _s19DPSubmissionService9PPM_0_2_1V3UrlV23__derived_struct_equalsySbAE_AEtFZ_0(v14, v13, v10, v11);
}

uint64_t static PPM_0_2_1.Challenge.redemptionContextLengthBounds.getter()
{
  return 0x2000000000;
}

uint64_t static PPM_0_2_1.Extension.extensionDataLengthBounds.getter()
{
  return 0xFFFF00000000;
}

uint64_t PPM_0_2_1.Challenge.init(tokenType:issuerName:redemptionContext:originInfo:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  *(_WORD *)a8 = result;
  *(void *)(a8 + 8) = a2;
  *(void *)(a8 + 16) = a3;
  *(void *)(a8 + 24) = a4;
  *(void *)(a8 + 32) = a5;
  *(void *)(a8 + 40) = a6;
  *(void *)(a8 + 48) = a7;
  return result;
}

unint64_t sub_10003ED18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10003F294(a1, a3, a4);
}

uint64_t sub_10003ED64(void *a1, void *a2)
{
  if (*(unsigned __int16 *)a1 != *(unsigned __int16 *)a2) {
    return 0;
  }
  uint64_t v2 = a1[3];
  unint64_t v3 = a1[4];
  uint64_t v4 = a1[5];
  unint64_t v5 = a1[6];
  uint64_t v6 = a2[3];
  unint64_t v7 = a2[4];
  uint64_t v8 = a2[5];
  unint64_t v9 = a2[6];
  if ((_s19DPSubmissionService9PPM_0_2_1V3UrlV23__derived_struct_equalsySbAE_AEtFZ_0(a1[1], a1[2], a2[1], a2[2]) & 1) == 0
    || (_s19DPSubmissionService9PPM_0_2_1V3UrlV23__derived_struct_equalsySbAE_AEtFZ_0(v2, v3, v6, v7) & 1) == 0)
  {
    return 0;
  }
  return _s19DPSubmissionService9PPM_0_2_1V3UrlV23__derived_struct_equalsySbAE_AEtFZ_0(v4, v5, v8, v9);
}

BOOL _s19DPSubmissionService9PPM_0_2_1V10ReportAuthV23__derived_struct_equalsySbAE_AEtFZ_0(unsigned __int16 *a1, unsigned __int16 *a2)
{
  if (*a1 != *a2) {
    return 0;
  }
  uint64_t v4 = *((void *)a1 + 5);
  unint64_t v23 = *((void *)a1 + 4);
  uint64_t v24 = *((void *)a1 + 3);
  unint64_t v5 = *((void *)a1 + 6);
  uint64_t v6 = *((void *)a1 + 7);
  unint64_t v7 = *((void *)a1 + 8);
  uint64_t v8 = *((void *)a2 + 5);
  unint64_t v21 = *((void *)a2 + 4);
  uint64_t v22 = *((void *)a2 + 3);
  unint64_t v9 = *((void *)a2 + 6);
  uint64_t v10 = *((void *)a2 + 7);
  unint64_t v11 = *((void *)a2 + 8);
  if ((_s19DPSubmissionService9PPM_0_2_1V3UrlV23__derived_struct_equalsySbAE_AEtFZ_0(*((void *)a1 + 1), *((void *)a1 + 2), *((void *)a2 + 1), *((void *)a2 + 2)) & 1) == 0)return 0; {
  if ((_s19DPSubmissionService9PPM_0_2_1V3UrlV23__derived_struct_equalsySbAE_AEtFZ_0(v24, v23, v22, v21) & 1) == 0)
  }
    return 0;
  if ((_s19DPSubmissionService9PPM_0_2_1V3UrlV23__derived_struct_equalsySbAE_AEtFZ_0(v4, v5, v8, v9) & 1) == 0) {
    return 0;
  }
  if ((_s19DPSubmissionService9PPM_0_2_1V3UrlV23__derived_struct_equalsySbAE_AEtFZ_0(v6, v7, v10, v11) & 1) == 0) {
    return 0;
  }
  if (a1[36] != a2[36]) {
    return 0;
  }
  uint64_t v12 = *((void *)a1 + 12);
  unint64_t v13 = *((void *)a1 + 13);
  uint64_t v14 = *((void *)a1 + 14);
  unint64_t v15 = *((void *)a1 + 15);
  uint64_t v16 = *((void *)a2 + 12);
  unint64_t v17 = *((void *)a2 + 13);
  uint64_t v18 = *((void *)a2 + 14);
  unint64_t v19 = *((void *)a2 + 15);
  if ((_s19DPSubmissionService9PPM_0_2_1V3UrlV23__derived_struct_equalsySbAE_AEtFZ_0(*((void *)a1 + 10), *((void *)a1 + 11), *((void *)a2 + 10), *((void *)a2 + 11)) & 1) == 0)return 0; {
  return (_s19DPSubmissionService9PPM_0_2_1V3UrlV23__derived_struct_equalsySbAE_AEtFZ_0(v12, v13, v16, v17) & 1) != 0
  }
      && (_s19DPSubmissionService9PPM_0_2_1V3UrlV23__derived_struct_equalsySbAE_AEtFZ_0(v14, v15, v18, v19) & 1) != 0;
}

uint64_t sub_10003EF5C()
{
  long long v27 = *(_OWORD *)(v0 + 8);
  sub_1000251C8((uint64_t)&v27, (uint64_t)v28);
  sub_1000251C8((uint64_t)v28, (uint64_t)&v29);
  unsigned __int8 v2 = BYTE6(v30);
  unint64_t v3 = 0;
  switch(v30 >> 62)
  {
    case 1uLL:
      v30 &= 0x3FFFFFFFFFFFFFFFuLL;
      if (__OFSUB__(HIDWORD(v29), v29)) {
        goto LABEL_31;
      }
      unint64_t v3 = HIDWORD(v29) - (int)v29;
LABEL_6:
      sub_100025224((uint64_t)&v27);
LABEL_7:
      sub_10003B748(v3, 0xFFFF00000001uLL);
      if (!v1)
      {
        uint64_t v6 = sub_10003B948(0xFFFF00000001);
        sub_100025254((uint64_t)&v27);
        unint64_t v7 = v3 + v6;
        if (!__OFADD__(v3, v6))
        {
          unint64_t v8 = v7 + 2;
          if (__OFADD__(v7, 2))
          {
LABEL_30:
            __break(1u);
LABEL_31:
            __break(1u);
LABEL_32:
            __break(1u);
LABEL_33:
            __break(1u);
LABEL_34:
            __break(1u);
LABEL_35:
            __break(1u);
LABEL_36:
            __break(1u);
LABEL_37:
            __break(1u);
LABEL_38:
            __break(1u);
LABEL_39:
            __break(1u);
            JUMPOUT(0x10003F264);
          }
          long long v25 = *(_OWORD *)(v0 + 24);
          sub_1000251C8((uint64_t)&v25, (uint64_t)v26);
          sub_1000251C8((uint64_t)v26, (uint64_t)&v31);
          unsigned __int8 v9 = BYTE6(v32);
          unint64_t v10 = 0;
          switch(v32 >> 62)
          {
            case 1uLL:
              v32 &= 0x3FFFFFFFFFFFFFFFuLL;
              if (__OFSUB__(HIDWORD(v31), v31)) {
                goto LABEL_35;
              }
              unint64_t v10 = HIDWORD(v31) - (int)v31;
LABEL_16:
              sub_100025224((uint64_t)&v25);
LABEL_17:
              sub_10003B748(v10, 0x2000000000uLL);
              uint64_t v13 = sub_10003B948(0x2000000000);
              sub_100025254((uint64_t)&v25);
              unint64_t v14 = v10 + v13;
              if (__OFADD__(v10, v13)) {
                goto LABEL_33;
              }
              unint64_t v15 = v8 + v14;
              if (__OFADD__(v8, v14)) {
                goto LABEL_34;
              }
              long long v23 = *(_OWORD *)(v0 + 40);
              sub_1000251C8((uint64_t)&v23, (uint64_t)v24);
              sub_1000251C8((uint64_t)v24, (uint64_t)&v33);
              unsigned __int8 v16 = BYTE6(v34);
              unint64_t v17 = 0;
              switch(v34 >> 62)
              {
                case 1uLL:
                  v34 &= 0x3FFFFFFFFFFFFFFFuLL;
                  if (__OFSUB__(HIDWORD(v33), v33)) {
                    goto LABEL_38;
                  }
                  unint64_t v17 = HIDWORD(v33) - (int)v33;
LABEL_24:
                  sub_100025224((uint64_t)&v23);
LABEL_25:
                  sub_10003B748(v17, 0xFFFF00000000uLL);
                  uint64_t v21 = sub_10003B948(0xFFFF00000000);
                  sub_100025254((uint64_t)&v23);
                  unint64_t v22 = v17 + v21;
                  if (__OFADD__(v17, v21)) {
                    goto LABEL_37;
                  }
                  uint64_t result = v15 + v22;
                  if (!__OFADD__(v15, v22)) {
                    return result;
                  }
                  __break(1u);
                  break;
                case 2uLL:
                  v34 &= 0x3FFFFFFFFFFFFFFFuLL;
                  uint64_t v18 = *(void *)(v33 + 16);
                  uint64_t v19 = *(void *)(v33 + 24);
                  unint64_t v17 = v19 - v18;
                  if (!__OFSUB__(v19, v18)) {
                    goto LABEL_24;
                  }
                  goto LABEL_39;
                case 3uLL:
                  goto LABEL_25;
                default:
                  v34 &= 0x3FFFFFFFFFFFFFFFuLL;
                  unint64_t v17 = v16;
                  goto LABEL_25;
              }
              break;
            case 2uLL:
              v32 &= 0x3FFFFFFFFFFFFFFFuLL;
              uint64_t v11 = *(void *)(v31 + 16);
              uint64_t v12 = *(void *)(v31 + 24);
              unint64_t v10 = v12 - v11;
              if (!__OFSUB__(v12, v11)) {
                goto LABEL_16;
              }
              goto LABEL_36;
            case 3uLL:
              goto LABEL_17;
            default:
              v32 &= 0x3FFFFFFFFFFFFFFFuLL;
              unint64_t v10 = v9;
              goto LABEL_17;
          }
        }
        __break(1u);
        goto LABEL_30;
      }
      return sub_100025254((uint64_t)&v27);
    case 2uLL:
      v30 &= 0x3FFFFFFFFFFFFFFFuLL;
      uint64_t v4 = *(void *)(v29 + 16);
      uint64_t v5 = *(void *)(v29 + 24);
      unint64_t v3 = v5 - v4;
      if (!__OFSUB__(v5, v4)) {
        goto LABEL_6;
      }
      goto LABEL_32;
    case 3uLL:
      goto LABEL_7;
    default:
      v30 &= 0x3FFFFFFFFFFFFFFFuLL;
      unint64_t v3 = v2;
      goto LABEL_7;
  }
}

unint64_t sub_10003F294(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v7 = sub_100022C50();
  unint64_t result = sub_1000223EC(a1, (uint64_t)&type metadata for UInt16, a2, v7, a3);
  if (!v3)
  {
    sub_100024898();
    RangeReplaceableCollection<>.encode<A>(into:with:)(a1, 0xFFFF00000001uLL, 1, (uint64_t)&type metadata for Data, a2);
    RangeReplaceableCollection<>.encode<A>(into:with:)(a1, 0x2000000000uLL, 1, (uint64_t)&type metadata for Data, a2);
    return RangeReplaceableCollection<>.encode<A>(into:with:)(a1, 0xFFFF00000000uLL, 1, (uint64_t)&type metadata for Data, a2);
  }
  return result;
}

uint64_t sub_10003F3DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v9 = sub_100022C50();
  uint64_t result = CommonUIntTLSNumberType.init<A>(from:with:)((uint64_t)&type metadata for UInt16, a2, v9, a3, (uint64_t)&v16);
  if (!v4)
  {
    int v11 = (unsigned __int16)v16;
    unint64_t v12 = sub_100024898();
    RangeReplaceableCollection<>.init<A>(from:with:)(a1, 0xFFFF00000001, 1, (uint64_t)&type metadata for Data, a2, v12, a3);
    int v17 = v11;
    long long v13 = v16;
    RangeReplaceableCollection<>.init<A>(from:with:)(a1, 0x2000000000, 1, (uint64_t)&type metadata for Data, a2, v12, a3);
    long long v14 = v16;
    uint64_t result = RangeReplaceableCollection<>.init<A>(from:with:)(a1, 0xFFFF00000000, 1, (uint64_t)&type metadata for Data, a2, v12, a3);
    long long v15 = v16;
    *(_WORD *)a4 = v17;
    *(_OWORD *)(a4 + 8) = v13;
    *(_OWORD *)(a4 + 24) = v14;
    *(_OWORD *)(a4 + 40) = v15;
  }
  return result;
}

void *sub_10003F580(void *a1)
{
  uint64_t v2 = a1[3];
  unint64_t v3 = a1[4];
  uint64_t v4 = a1[5];
  unint64_t v5 = a1[6];
  uint64_t v6 = a1[7];
  unint64_t v7 = a1[8];
  sub_100016B2C(a1[1], a1[2]);
  sub_100016B2C(v2, v3);
  sub_100016B2C(v4, v5);
  sub_100016B2C(v6, v7);
  return a1;
}

unint64_t sub_10003F5F8(uint64_t a1)
{
  unint64_t result = sub_10003F620();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10003F620()
{
  unint64_t result = qword_100081BD8;
  if (!qword_100081BD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100081BD8);
  }
  return result;
}

unint64_t sub_10003F674(uint64_t a1)
{
  unint64_t result = sub_10003F69C();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10003F69C()
{
  unint64_t result = qword_100081C38;
  if (!qword_100081C38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100081C38);
  }
  return result;
}

unint64_t sub_10003F6F0(uint64_t a1)
{
  unint64_t result = sub_10003F718();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10003F718()
{
  unint64_t result = qword_100081C98;
  if (!qword_100081C98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100081C98);
  }
  return result;
}

uint64_t _s10ReportAuthVwxx(void *a1)
{
  sub_100016B2C(a1[1], a1[2]);
  sub_100016B2C(a1[3], a1[4]);
  sub_100016B2C(a1[5], a1[6]);
  sub_100016B2C(a1[7], a1[8]);
  sub_100016B2C(a1[10], a1[11]);
  sub_100016B2C(a1[12], a1[13]);
  uint64_t v2 = a1[14];
  unint64_t v3 = a1[15];
  return sub_100016B2C(v2, v3);
}

uint64_t _s10ReportAuthVwcp(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unint64_t v5 = *(void *)(a2 + 16);
  sub_100016E5C(v4, v5);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  uint64_t v6 = *(void *)(a2 + 24);
  unint64_t v7 = *(void *)(a2 + 32);
  sub_100016E5C(v6, v7);
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  uint64_t v8 = *(void *)(a2 + 40);
  unint64_t v9 = *(void *)(a2 + 48);
  sub_100016E5C(v8, v9);
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  uint64_t v10 = *(void *)(a2 + 56);
  unint64_t v11 = *(void *)(a2 + 64);
  sub_100016E5C(v10, v11);
  *(void *)(a1 + 56) = v10;
  *(void *)(a1 + 64) = v11;
  *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
  uint64_t v12 = *(void *)(a2 + 80);
  unint64_t v13 = *(void *)(a2 + 88);
  sub_100016E5C(v12, v13);
  *(void *)(a1 + 80) = v12;
  *(void *)(a1 + 88) = v13;
  uint64_t v14 = *(void *)(a2 + 96);
  unint64_t v15 = *(void *)(a2 + 104);
  sub_100016E5C(v14, v15);
  *(void *)(a1 + 96) = v14;
  *(void *)(a1 + 104) = v15;
  uint64_t v17 = *(void *)(a2 + 112);
  unint64_t v16 = *(void *)(a2 + 120);
  sub_100016E5C(v17, v16);
  *(void *)(a1 + 112) = v17;
  *(void *)(a1 + 120) = v16;
  return a1;
}

uint64_t _s10ReportAuthVwca(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unint64_t v5 = *(void *)(a2 + 16);
  sub_100016E5C(v4, v5);
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  sub_100016B2C(v6, v7);
  uint64_t v8 = *(void *)(a2 + 24);
  unint64_t v9 = *(void *)(a2 + 32);
  sub_100016E5C(v8, v9);
  uint64_t v10 = *(void *)(a1 + 24);
  unint64_t v11 = *(void *)(a1 + 32);
  *(void *)(a1 + 24) = v8;
  *(void *)(a1 + 32) = v9;
  sub_100016B2C(v10, v11);
  uint64_t v12 = *(void *)(a2 + 40);
  unint64_t v13 = *(void *)(a2 + 48);
  sub_100016E5C(v12, v13);
  uint64_t v14 = *(void *)(a1 + 40);
  unint64_t v15 = *(void *)(a1 + 48);
  *(void *)(a1 + 40) = v12;
  *(void *)(a1 + 48) = v13;
  sub_100016B2C(v14, v15);
  uint64_t v16 = *(void *)(a2 + 56);
  unint64_t v17 = *(void *)(a2 + 64);
  sub_100016E5C(v16, v17);
  uint64_t v18 = *(void *)(a1 + 56);
  unint64_t v19 = *(void *)(a1 + 64);
  *(void *)(a1 + 56) = v16;
  *(void *)(a1 + 64) = v17;
  sub_100016B2C(v18, v19);
  *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
  uint64_t v20 = *(void *)(a2 + 80);
  unint64_t v21 = *(void *)(a2 + 88);
  sub_100016E5C(v20, v21);
  uint64_t v22 = *(void *)(a1 + 80);
  unint64_t v23 = *(void *)(a1 + 88);
  *(void *)(a1 + 80) = v20;
  *(void *)(a1 + 88) = v21;
  sub_100016B2C(v22, v23);
  uint64_t v24 = *(void *)(a2 + 96);
  unint64_t v25 = *(void *)(a2 + 104);
  sub_100016E5C(v24, v25);
  uint64_t v26 = *(void *)(a1 + 96);
  unint64_t v27 = *(void *)(a1 + 104);
  *(void *)(a1 + 96) = v24;
  *(void *)(a1 + 104) = v25;
  sub_100016B2C(v26, v27);
  uint64_t v29 = *(void *)(a2 + 112);
  unint64_t v28 = *(void *)(a2 + 120);
  sub_100016E5C(v29, v28);
  uint64_t v30 = *(void *)(a1 + 112);
  unint64_t v31 = *(void *)(a1 + 120);
  *(void *)(a1 + 112) = v29;
  *(void *)(a1 + 120) = v28;
  sub_100016B2C(v30, v31);
  return a1;
}

__n128 _s10ReportAuthVwtk(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  long long v6 = a2[5];
  long long v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 64) = result;
  *(_OWORD *)(a1 + 80) = v6;
  return result;
}

uint64_t _s10ReportAuthVwta(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = *(void *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  sub_100016B2C(v4, v5);
  uint64_t v6 = *(void *)(a1 + 24);
  unint64_t v7 = *(void *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  sub_100016B2C(v6, v7);
  uint64_t v8 = *(void *)(a1 + 40);
  unint64_t v9 = *(void *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  sub_100016B2C(v8, v9);
  uint64_t v10 = *(void *)(a1 + 56);
  unint64_t v11 = *(void *)(a1 + 64);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  sub_100016B2C(v10, v11);
  *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
  uint64_t v12 = *(void *)(a1 + 80);
  unint64_t v13 = *(void *)(a1 + 88);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  sub_100016B2C(v12, v13);
  uint64_t v14 = *(void *)(a1 + 96);
  unint64_t v15 = *(void *)(a1 + 104);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  sub_100016B2C(v14, v15);
  uint64_t v16 = *(void *)(a1 + 112);
  unint64_t v17 = *(void *)(a1 + 120);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  sub_100016B2C(v16, v17);
  return a1;
}

uint64_t _s10ReportAuthVwet(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xD && *(unsigned char *)(a1 + 128)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 16) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 16) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t _s10ReportAuthVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 13;
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 128) = 1;
    }
  }
  else
  {
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 128) = 0;
    }
    if (a2)
    {
      *(void *)(result + 8) = 0;
      *(void *)(result + 16) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PPM_0_2_1.ReportAuth()
{
  return &type metadata for PPM_0_2_1.ReportAuth;
}

uint64_t _s10ReportAuthV15CodingParameterVwCP(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_WORD *)(result + 8) = *((_WORD *)a2 + 4);
  *(void *)__n128 result = v2;
  return result;
}

uint64_t _s10ReportAuthV15CodingParameterVwet(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 10)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t _s10ReportAuthV15CodingParameterVwst(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_WORD *)(result + 8) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 10) = v3;
  return result;
}

ValueMetadata *type metadata accessor for PPM_0_2_1.ReportAuth.CodingParameter()
{
  return &type metadata for PPM_0_2_1.ReportAuth.CodingParameter;
}

uint64_t _s5TokenVwxx(void *a1)
{
  sub_100016B2C(a1[1], a1[2]);
  sub_100016B2C(a1[3], a1[4]);
  sub_100016B2C(a1[5], a1[6]);
  uint64_t v2 = a1[7];
  unint64_t v3 = a1[8];
  return sub_100016B2C(v2, v3);
}

uint64_t _s5TokenVwcp(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unint64_t v5 = *(void *)(a2 + 16);
  sub_100016E5C(v4, v5);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  uint64_t v6 = *(void *)(a2 + 24);
  unint64_t v7 = *(void *)(a2 + 32);
  sub_100016E5C(v6, v7);
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  uint64_t v8 = *(void *)(a2 + 40);
  unint64_t v9 = *(void *)(a2 + 48);
  sub_100016E5C(v8, v9);
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  uint64_t v11 = *(void *)(a2 + 56);
  unint64_t v10 = *(void *)(a2 + 64);
  sub_100016E5C(v11, v10);
  *(void *)(a1 + 56) = v11;
  *(void *)(a1 + 64) = v10;
  return a1;
}

uint64_t _s5TokenVwca(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unint64_t v5 = *(void *)(a2 + 16);
  sub_100016E5C(v4, v5);
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  sub_100016B2C(v6, v7);
  uint64_t v8 = *(void *)(a2 + 24);
  unint64_t v9 = *(void *)(a2 + 32);
  sub_100016E5C(v8, v9);
  uint64_t v10 = *(void *)(a1 + 24);
  unint64_t v11 = *(void *)(a1 + 32);
  *(void *)(a1 + 24) = v8;
  *(void *)(a1 + 32) = v9;
  sub_100016B2C(v10, v11);
  uint64_t v12 = *(void *)(a2 + 40);
  unint64_t v13 = *(void *)(a2 + 48);
  sub_100016E5C(v12, v13);
  uint64_t v14 = *(void *)(a1 + 40);
  unint64_t v15 = *(void *)(a1 + 48);
  *(void *)(a1 + 40) = v12;
  *(void *)(a1 + 48) = v13;
  sub_100016B2C(v14, v15);
  uint64_t v17 = *(void *)(a2 + 56);
  unint64_t v16 = *(void *)(a2 + 64);
  sub_100016E5C(v17, v16);
  uint64_t v18 = *(void *)(a1 + 56);
  unint64_t v19 = *(void *)(a1 + 64);
  *(void *)(a1 + 56) = v17;
  *(void *)(a1 + 64) = v16;
  sub_100016B2C(v18, v19);
  return a1;
}

__n128 _s5TokenVwtk(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t _s5TokenVwta(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = *(void *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  sub_100016B2C(v4, v5);
  uint64_t v6 = *(void *)(a1 + 24);
  unint64_t v7 = *(void *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  sub_100016B2C(v6, v7);
  uint64_t v8 = *(void *)(a1 + 40);
  unint64_t v9 = *(void *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  sub_100016B2C(v8, v9);
  uint64_t v10 = *(void *)(a1 + 56);
  unint64_t v11 = *(void *)(a1 + 64);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  sub_100016B2C(v10, v11);
  return a1;
}

uint64_t _s5TokenVwet(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xD && *(unsigned char *)(a1 + 72)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 16) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 16) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t _s5TokenVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)__n128 result = a2 - 13;
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 72) = 1;
    }
  }
  else
  {
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 72) = 0;
    }
    if (a2)
    {
      *(void *)(result + 8) = 0;
      *(void *)(result + 16) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PPM_0_2_1.Token()
{
  return &type metadata for PPM_0_2_1.Token;
}

ValueMetadata *type metadata accessor for PPM_0_2_1.Token.CodingParameter()
{
  return &type metadata for PPM_0_2_1.Token.CodingParameter;
}

uint64_t _s9ChallengeVwxx(void *a1)
{
  sub_100016B2C(a1[1], a1[2]);
  sub_100016B2C(a1[3], a1[4]);
  uint64_t v2 = a1[5];
  unint64_t v3 = a1[6];
  return sub_100016B2C(v2, v3);
}

uint64_t _s9ChallengeVwcp(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unint64_t v5 = *(void *)(a2 + 16);
  sub_100016E5C(v4, v5);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  uint64_t v6 = *(void *)(a2 + 24);
  unint64_t v7 = *(void *)(a2 + 32);
  sub_100016E5C(v6, v7);
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  uint64_t v9 = *(void *)(a2 + 40);
  unint64_t v8 = *(void *)(a2 + 48);
  sub_100016E5C(v9, v8);
  *(void *)(a1 + 40) = v9;
  *(void *)(a1 + 48) = v8;
  return a1;
}

uint64_t _s9ChallengeVwca(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unint64_t v5 = *(void *)(a2 + 16);
  sub_100016E5C(v4, v5);
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  sub_100016B2C(v6, v7);
  uint64_t v8 = *(void *)(a2 + 24);
  unint64_t v9 = *(void *)(a2 + 32);
  sub_100016E5C(v8, v9);
  uint64_t v10 = *(void *)(a1 + 24);
  unint64_t v11 = *(void *)(a1 + 32);
  *(void *)(a1 + 24) = v8;
  *(void *)(a1 + 32) = v9;
  sub_100016B2C(v10, v11);
  uint64_t v13 = *(void *)(a2 + 40);
  unint64_t v12 = *(void *)(a2 + 48);
  sub_100016E5C(v13, v12);
  uint64_t v14 = *(void *)(a1 + 40);
  unint64_t v15 = *(void *)(a1 + 48);
  *(void *)(a1 + 40) = v13;
  *(void *)(a1 + 48) = v12;
  sub_100016B2C(v14, v15);
  return a1;
}

__n128 _s9ChallengeVwtk(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t _s9ChallengeVwta(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = *(void *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  sub_100016B2C(v4, v5);
  uint64_t v6 = *(void *)(a1 + 24);
  unint64_t v7 = *(void *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  sub_100016B2C(v6, v7);
  uint64_t v8 = *(void *)(a1 + 40);
  unint64_t v9 = *(void *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  sub_100016B2C(v8, v9);
  return a1;
}

uint64_t _s9ChallengeVwet(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xD && *(unsigned char *)(a1 + 56)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 16) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 16) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t _s9ChallengeVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 13;
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 56) = 0;
    }
    if (a2)
    {
      *(void *)(result + 8) = 0;
      *(void *)(result + 16) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PPM_0_2_1.Challenge()
{
  return &type metadata for PPM_0_2_1.Challenge;
}

Swift::Int __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> PPM_0_2_1.Url.encodedLength(with:)(Swift::Void_optional with)
{
  return sub_100040D00(v1, v2, 0xFFFF00000001uLL);
}

unint64_t PPM_0_2_1.Url.encode<A>(into:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_100040E58(a1, a3, a4, a5, a6, 0xFFFF00000001uLL);
}

uint64_t PPM_0_2_1.Url.init<A>(from:with:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return sub_100040FCC(a1, a3, a4, 0xFFFF00000001);
}

uint64_t PPM_0_2_1.Url.data.getter(uint64_t a1, unint64_t a2)
{
  return a1;
}

uint64_t sub_1000401E0()
{
  return sub_100040D00(*(void *)v0, *(void *)(v0 + 8), 0xFFFF00000001uLL);
}

unint64_t sub_100040204(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100040E58(a1, *v4, v4[1], a3, a4, 0xFFFF00000001uLL);
}

uint64_t sub_100040230@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  return sub_1000404C0(a1, a2, a3, 0xFFFF00000001, a4);
}

uint64_t sub_100040250(uint64_t a1, uint64_t a2)
{
  return _s19DPSubmissionService9PPM_0_2_1V3UrlV23__derived_struct_equalsySbAE_AEtFZ_0(*(void *)a1, *(void *)(a1 + 8), *(void *)a2, *(void *)(a2 + 8));
}

uint64_t PPM_0_2_1.Interval.encode<A>(into:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_100040ED4(a1, a3, a4, a5, a6);
}

uint64_t PPM_0_2_1.Interval.init<A>(from:with:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = v4;
  unint64_t v8 = sub_100022BA8();
  CommonUIntTLSNumberType.init<A>(from:with:)((uint64_t)&type metadata for UInt64, a3, v8, a4, (uint64_t)&v10);
  if (!v4)
  {
    uint64_t v5 = v10;
    CommonUIntTLSNumberType.init<A>(from:with:)((uint64_t)&type metadata for UInt64, a3, v8, a4, (uint64_t)&v10);
  }
  return v5;
}

BOOL static PPM_0_2_1.Interval.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a1 == a3 && a2 == a4;
}

uint64_t sub_10004036C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100040ED4(a1, *v4, v4[1], a3, a4);
}

uint64_t sub_100040390@<X0>(uint64_t a1@<X0>, unsigned __int16 *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t result = PPM_0_2_1.Interval.init<A>(from:with:)(a1, *a2 | (*((unsigned __int8 *)a2 + 2) << 16), a3, a4);
  if (!v5)
  {
    *a5 = result;
    a5[1] = v8;
  }
  return result;
}

BOOL sub_1000403C8(void *a1, void *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

uint64_t static PPM_0_2_1.ReportID.lengthBounds.getter()
{
  return 0x1000000010;
}

Swift::Int __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> PPM_0_2_1.ReportID.encodedLength(with:)(Swift::Void_optional with)
{
  return sub_100040D00(v1, v2, 0x1000000010uLL);
}

unint64_t PPM_0_2_1.ReportID.encode<A>(into:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_100040E58(a1, a3, a4, a5, a6, 0x1000000010uLL);
}

uint64_t PPM_0_2_1.ReportID.init<A>(from:with:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return sub_100040FCC(a1, a3, a4, 0x1000000010);
}

uint64_t sub_10004045C()
{
  return sub_100040D00(*(void *)v0, *(void *)(v0 + 8), 0x1000000010uLL);
}

unint64_t sub_10004047C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100040E58(a1, *v4, v4[1], a3, a4, 0x1000000010uLL);
}

uint64_t sub_1000404A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  return sub_1000404C0(a1, a2, a3, 0x1000000010, a4);
}

uint64_t sub_1000404C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, uint64_t a4@<X6>, uint64_t *a5@<X8>)
{
  uint64_t result = sub_100040FCC(a1, a2, a3, a4);
  if (!v5)
  {
    *a5 = result;
    a5[1] = v8;
  }
  return result;
}

_UNKNOWN **static PPM_0_2_1.Role.EnumValue.allCases.getter()
{
  return &off_1000755E0;
}

void sub_100040504(void *a1@<X8>)
{
  *a1 = &off_100075608;
}

unint64_t sub_100040514()
{
  unint64_t result = sub_1000466E8((uint64_t)&off_1000754E8);
  static PPM_0_2_1.Role.rangesByEnumVals = result;
  return result;
}

uint64_t *PPM_0_2_1.Role.rangesByEnumVals.unsafeMutableAddressor()
{
  if (qword_100080A20 != -1) {
    swift_once();
  }
  return &static PPM_0_2_1.Role.rangesByEnumVals;
}

uint64_t static PPM_0_2_1.Role.rangesByEnumVals.getter()
{
  return sub_10002A970(&qword_100080A20);
}

uint64_t static PPM_0_2_1.Role.rangesByEnumVals.setter(uint64_t a1)
{
  return sub_10002A9F0(a1, &qword_100080A20, &static PPM_0_2_1.Role.rangesByEnumVals);
}

uint64_t (*static PPM_0_2_1.Role.rangesByEnumVals.modify())()
{
  if (qword_100080A20 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t sub_100040658(uint64_t a1, uint64_t a2)
{
  return sub_10002AB20(a1, a2, &qword_100080A20);
}

_UNKNOWN **static PPM_0_2_1.QueryType.EnumValue.allCases.getter()
{
  return &off_100075630;
}

void sub_100040688(void *a1@<X8>)
{
  *a1 = &off_100075658;
}

unint64_t sub_100040698()
{
  unint64_t result = sub_1000465A0((uint64_t)&off_1000752E8);
  static PPM_0_2_1.QueryType.rangesByEnumVals = result;
  return result;
}

uint64_t *PPM_0_2_1.QueryType.rangesByEnumVals.unsafeMutableAddressor()
{
  if (qword_100080A28 != -1) {
    swift_once();
  }
  return &static PPM_0_2_1.QueryType.rangesByEnumVals;
}

uint64_t static PPM_0_2_1.QueryType.rangesByEnumVals.getter()
{
  return sub_10002A970(&qword_100080A28);
}

uint64_t static PPM_0_2_1.QueryType.rangesByEnumVals.setter(uint64_t a1)
{
  return sub_10002A9F0(a1, &qword_100080A28, &static PPM_0_2_1.QueryType.rangesByEnumVals);
}

uint64_t (*static PPM_0_2_1.QueryType.rangesByEnumVals.modify())()
{
  if (qword_100080A28 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_1000407DC(uint64_t a1, uint64_t a2)
{
  return sub_10002AB20(a1, a2, &qword_100080A28);
}

Swift::Int __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> PPM_0_2_1.TaskID.encodedLength(with:)(Swift::Void_optional with)
{
  return sub_100040D00(v1, v2, 0x2000000020uLL);
}

unint64_t PPM_0_2_1.TaskID.encode<A>(into:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_100040E58(a1, a3, a4, a5, a6, 0x2000000020uLL);
}

uint64_t PPM_0_2_1.TaskID.init<A>(from:with:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return sub_100040FCC(a1, a3, a4, 0x2000000020);
}

uint64_t sub_100040874()
{
  return sub_100040D00(*(void *)v0, *(void *)(v0 + 8), 0x2000000020uLL);
}

unint64_t sub_100040894(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100040E58(a1, *v4, v4[1], a3, a4, 0x2000000020uLL);
}

uint64_t sub_1000408BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  return sub_1000404C0(a1, a2, a3, 0x2000000020, a4);
}

uint64_t sub_1000408D8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t __s1 = a1;
  __int16 v9 = a2;
  char v10 = BYTE2(a2);
  char v11 = BYTE3(a2);
  char v12 = BYTE4(a2);
  char v13 = BYTE5(a2);
  sub_10004632C((uint64_t)&__s1, a3, a4, &v7);
  if (!v4) {
    char v5 = v7;
  }
  return v5 & 1;
}

uint64_t sub_1000409B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t result = sub_100058CB0();
  uint64_t v11 = result;
  if (result)
  {
    uint64_t result = sub_100058CD0();
    if (__OFSUB__(a1, result))
    {
LABEL_9:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  sub_100058CC0();
  sub_10004632C(v11, a4, a5, &v13);
  if (!v5) {
    char v12 = v13;
  }
  return v12 & 1;
}

uint64_t _s19DPSubmissionService9PPM_0_2_1V3UrlV23__derived_struct_equalsySbAE_AEtFZ_0(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v8) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
        JUMPOUT(0x100040CD0);
      }
      uint64_t v8 = (int)v8;
LABEL_6:
      switch(a4 >> 62)
      {
        case 1uLL:
          LODWORD(v12) = HIDWORD(a3) - a3;
          if (__OFSUB__(HIDWORD(a3), a3)) {
            goto LABEL_27;
          }
          uint64_t v12 = (int)v12;
LABEL_11:
          if (v8 == v12)
          {
            if (v8 < 1)
            {
              char v17 = 1;
            }
            else
            {
              switch(a2 >> 62)
              {
                case 1uLL:
                  if (a1 >> 32 < (int)a1) {
                    goto LABEL_29;
                  }
                  sub_100016E5C(a3, a4);
                  sub_100016E5C(a1, a2);
                  char v17 = sub_1000409B0((int)a1, a1 >> 32, a2 & 0x3FFFFFFFFFFFFFFFLL, a3, a4);
                  sub_100016B2C(a3, a4);
                  uint64_t v18 = a1;
                  unint64_t v19 = a2;
                  break;
                case 2uLL:
                  uint64_t v20 = a2 & 0x3FFFFFFFFFFFFFFFLL;
                  uint64_t v21 = *(void *)(a1 + 16);
                  uint64_t v22 = *(void *)(a1 + 24);
                  sub_100016E5C(a3, a4);
                  swift_retain();
                  swift_retain();
                  char v17 = sub_1000409B0(v21, v22, v20, a3, a4);
                  sub_100016B2C(a3, a4);
                  swift_release();
                  swift_release();
                  return v17 & 1;
                case 3uLL:
                  sub_100016E5C(a3, a4);
                  uint64_t v16 = 0;
                  uint64_t v15 = 0;
                  goto LABEL_22;
                default:
                  sub_100016E5C(a3, a4);
                  uint64_t v15 = a2 & 0xFFFFFFFFFFFFFFLL;
                  uint64_t v16 = a1;
LABEL_22:
                  char v17 = sub_1000408D8(v16, v15, a3, a4);
                  uint64_t v18 = a3;
                  unint64_t v19 = a4;
                  break;
              }
              sub_100016B2C(v18, v19);
            }
          }
          else
          {
            char v17 = 0;
          }
          return v17 & 1;
        case 2uLL:
          uint64_t v14 = *(void *)(a3 + 16);
          uint64_t v13 = *(void *)(a3 + 24);
          BOOL v11 = __OFSUB__(v13, v14);
          uint64_t v12 = v13 - v14;
          if (!v11) {
            goto LABEL_11;
          }
          goto LABEL_28;
        case 3uLL:
          char v17 = v8 == 0;
          return v17 & 1;
        default:
          uint64_t v12 = BYTE6(a4);
          goto LABEL_11;
      }
    case 2uLL:
      uint64_t v10 = *(void *)(a1 + 16);
      uint64_t v9 = *(void *)(a1 + 24);
      BOOL v11 = __OFSUB__(v9, v10);
      uint64_t v8 = v9 - v10;
      if (!v11) {
        goto LABEL_6;
      }
      goto LABEL_26;
    case 3uLL:
      goto LABEL_6;
    default:
      uint64_t v8 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_100040D00(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v7 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_12;
      }
      unint64_t v7 = HIDWORD(a1) - (int)a1;
LABEL_6:
      sub_100016E5C(a1, a2);
LABEL_7:
      sub_10003B748(v7, a3);
      if (v3) {
        return sub_100016B2C(a1, a2);
      }
      uint64_t v11 = sub_10003B948(a3);
      sub_100016B2C(a1, a2);
      uint64_t result = v7 + v11;
      if (__OFADD__(v7, v11))
      {
        __break(1u);
LABEL_12:
        __break(1u);
LABEL_13:
        __break(1u);
        JUMPOUT(0x100040DF0);
      }
      return result;
    case 2uLL:
      uint64_t v9 = *(void *)(a1 + 16);
      uint64_t v8 = *(void *)(a1 + 24);
      unint64_t v7 = v8 - v9;
      if (!__OFSUB__(v8, v9)) {
        goto LABEL_6;
      }
      goto LABEL_13;
    case 3uLL:
      goto LABEL_7;
    default:
      unint64_t v7 = BYTE6(a2);
      goto LABEL_7;
  }
}

unint64_t sub_100040E00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_100040E58(a1, a2, a3, a4, a5, 0xFFFF00000001uLL);
}

unint64_t sub_100040E20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_100040E58(a1, a2, a3, a4, a5, 0x2000000020uLL);
}

unint64_t sub_100040E3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_100040E58(a1, a2, a3, a4, a5, 0x1000000010uLL);
}

unint64_t sub_100040E58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  return RangeReplaceableCollection<>.encode<A>(into:with:)(a1, a6, 1, (uint64_t)&type metadata for Data, a4);
}

uint64_t sub_100040ED4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9 = sub_100022BA8();
  uint64_t result = sub_1000223EC(a1, (uint64_t)&type metadata for UInt64, a4, v9, a5);
  if (!v5) {
    return sub_1000223EC(a1, (uint64_t)&type metadata for UInt64, a4, v9, a5);
  }
  return result;
}

uint64_t sub_100040F74(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_100040FCC(a1, a2, a3, 0xFFFF00000001);
}

uint64_t sub_100040F94(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_100040FCC(a1, a2, a3, 0x2000000020);
}

uint64_t sub_100040FB0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_100040FCC(a1, a2, a3, 0x1000000010);
}

uint64_t sub_100040FCC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v9 = sub_100024898();
  uint64_t result = RangeReplaceableCollection<>.init<A>(from:with:)(a1, a4, 1, (uint64_t)&type metadata for Data, a2, v9, a3);
  if (!v4) {
    return v11;
  }
  return result;
}

unint64_t sub_100041054(uint64_t a1)
{
  unint64_t result = sub_10004107C();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10004107C()
{
  unint64_t result = qword_100081CF8;
  if (!qword_100081CF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100081CF8);
  }
  return result;
}

unint64_t sub_1000410D0(uint64_t a1)
{
  unint64_t result = sub_1000410F8();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000410F8()
{
  unint64_t result = qword_100081D58;
  if (!qword_100081D58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100081D58);
  }
  return result;
}

unint64_t sub_10004114C(uint64_t a1)
{
  unint64_t result = sub_100041174();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100041174()
{
  unint64_t result = qword_100081DB8;
  if (!qword_100081DB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100081DB8);
  }
  return result;
}

unint64_t sub_1000411CC()
{
  unint64_t result = qword_100081DC0;
  if (!qword_100081DC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100081DC0);
  }
  return result;
}

uint64_t sub_100041220()
{
  return sub_100031AA4(&qword_100081DC8, &qword_100081DD0);
}

unint64_t sub_10004124C()
{
  unint64_t result = qword_100081DD8;
  if (!qword_100081DD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100081DD8);
  }
  return result;
}

unint64_t sub_1000412A4()
{
  unint64_t result = qword_100081DE0;
  if (!qword_100081DE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100081DE0);
  }
  return result;
}

unint64_t sub_1000412F8(uint64_t a1)
{
  unint64_t result = sub_100041320();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100041320()
{
  unint64_t result = qword_100081E48;
  if (!qword_100081E48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100081E48);
  }
  return result;
}

unint64_t sub_100041374(uint64_t a1)
{
  unint64_t result = sub_10004139C();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10004139C()
{
  unint64_t result = qword_100081E50;
  if (!qword_100081E50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100081E50);
  }
  return result;
}

unint64_t sub_1000413F0(uint64_t a1)
{
  unint64_t result = sub_100041418();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100041418()
{
  unint64_t result = qword_100081EB0;
  if (!qword_100081EB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100081EB0);
  }
  return result;
}

unint64_t sub_100041470()
{
  unint64_t result = qword_100081EB8;
  if (!qword_100081EB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100081EB8);
  }
  return result;
}

uint64_t sub_1000414C4()
{
  return sub_100031AA4(&qword_100081EC0, &qword_100081EC8);
}

unint64_t sub_1000414F0()
{
  unint64_t result = qword_100081ED0;
  if (!qword_100081ED0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100081ED0);
  }
  return result;
}

unint64_t sub_100041548()
{
  unint64_t result = qword_100081ED8;
  if (!qword_100081ED8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100081ED8);
  }
  return result;
}

unint64_t sub_10004159C(uint64_t a1)
{
  unint64_t result = sub_1000415C4();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000415C4()
{
  unint64_t result = qword_100081F40;
  if (!qword_100081F40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100081F40);
  }
  return result;
}

unint64_t sub_100041618(uint64_t a1)
{
  unint64_t result = sub_100041640();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100041640()
{
  unint64_t result = qword_100081F48;
  if (!qword_100081F48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100081F48);
  }
  return result;
}

unint64_t sub_100041694(uint64_t a1)
{
  unint64_t result = sub_1000416BC();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000416BC()
{
  unint64_t result = qword_100081FA8;
  if (!qword_100081FA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100081FA8);
  }
  return result;
}

unint64_t sub_100041710(uint64_t a1)
{
  unint64_t result = sub_100041738();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100041738()
{
  unint64_t result = qword_100082008;
  if (!qword_100082008)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100082008);
  }
  return result;
}

ValueMetadata *type metadata accessor for PPM_0_2_1()
{
  return &type metadata for PPM_0_2_1;
}

uint64_t *initializeBufferWithCopyOfBuffer for PPM_0_2_1.Url(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  sub_100016E5C(*a2, v4);
  *a1 = v3;
  a1[1] = v4;
  return a1;
}

__n128 initializeWithTake for PPM_0_2_1.Url(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t *assignWithTake for PPM_0_2_1.Url(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_100016B2C(v3, v4);
  return a1;
}

ValueMetadata *type metadata accessor for PPM_0_2_1.Url()
{
  return &type metadata for PPM_0_2_1.Url;
}

uint64_t getEnumTagSinglePayload for PPM_0_2_1.Interval(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for PPM_0_2_1.Interval(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for PPM_0_2_1.Interval()
{
  return &type metadata for PPM_0_2_1.Interval;
}

uint64_t storeEnumTagSinglePayload for PPM_0_2_1.Interval.CodingParameter(uint64_t result, int a2, int a3)
{
  if ((a3 + 0xFFFF) <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if ((a3 + 0xFFFF) < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    unsigned int v6 = ((a2 - 1) >> 16) + 1;
    *(_WORD *)__n128 result = a2 - 1;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = v6;
        return result;
      case 2:
        *(_WORD *)(result + 2) = v6;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)(result + 2) = v6;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *(unsigned char *)(result + 2) = 0;
      break;
    case 2:
      *(_WORD *)(result + 2) = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x10004194CLL);
    case 4:
      *(_DWORD *)(result + 2) = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for PPM_0_2_1.Interval.CodingParameter()
{
  return &type metadata for PPM_0_2_1.Interval.CodingParameter;
}

ValueMetadata *type metadata accessor for PPM_0_2_1.ReportID()
{
  return &type metadata for PPM_0_2_1.ReportID;
}

ValueMetadata *type metadata accessor for PPM_0_2_1.Role()
{
  return &type metadata for PPM_0_2_1.Role;
}

unsigned char *storeEnumTagSinglePayload for PPM_0_2_1.Role.EnumValue(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *__n128 result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100041A70);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PPM_0_2_1.Role.EnumValue()
{
  return &type metadata for PPM_0_2_1.Role.EnumValue;
}

ValueMetadata *type metadata accessor for PPM_0_2_1.QueryType()
{
  return &type metadata for PPM_0_2_1.QueryType;
}

uint64_t getEnumTagSinglePayload for PPM_0_2_1.QueryType.EnumValue(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for PPM_0_2_1.QueryType.EnumValue(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *__n128 result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100041C14);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PPM_0_2_1.QueryType.EnumValue()
{
  return &type metadata for PPM_0_2_1.QueryType.EnumValue;
}

uint64_t *_s13HPKEPublicKeyVwca(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  sub_100016E5C(*a2, v4);
  uint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  *a1 = v3;
  a1[1] = v4;
  sub_100016B2C(v5, v6);
  return a1;
}

uint64_t _s13HPKEPublicKeyVwet(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xD && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t _s13HPKEPublicKeyVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)__n128 result = a2 - 13;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2)
    {
      *(void *)__n128 result = 0;
      *(void *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PPM_0_2_1.TaskID()
{
  return &type metadata for PPM_0_2_1.TaskID;
}

void *static _DPDediscoHPKEEncryption.encrypt(publicKey:info:inputShare:additionalData:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1000422D0(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t static _DPDediscoHPKEEncryption.generatePublicKey()()
{
  uint64_t v0 = sub_100059120();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  unsigned int v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100059150();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  BOOL v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100059140();
  sub_100059130();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  uint64_t v8 = sub_100059100();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v8;
}

id _DPDediscoHPKEEncryption.init()()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for _DPDediscoHPKEEncryption();
  return objc_msgSendSuper2(&v2, "init");
}

id _DPDediscoHPKEEncryption.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for _DPDediscoHPKEEncryption();
  return objc_msgSendSuper2(&v2, "dealloc");
}

void *sub_1000422D0(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v44 = a7;
  uint64_t v45 = a8;
  unint64_t v43 = a6;
  uint64_t v42 = a5;
  uint64_t v52 = a3;
  unint64_t v53 = a4;
  uint64_t v56 = a1;
  unint64_t v57 = a2;
  uint64_t v8 = sub_1000590F0();
  uint64_t v46 = *(void *)(v8 - 8);
  uint64_t v47 = v8;
  __chkstk_darwin(v8);
  unint64_t v54 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100059120();
  uint64_t v50 = *(void *)(v10 - 8);
  uint64_t v51 = v10;
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v49 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  unint64_t v59 = (char *)&v42 - v13;
  uint64_t v55 = sub_1000590B0();
  uint64_t v14 = *(void *)(v55 - 8);
  __chkstk_darwin(v55);
  uint64_t v16 = (char *)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_100059090();
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v42 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_1000590A0();
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v24 = (char *)&v42 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = sub_100059080();
  uint64_t v60 = *(void *)(v65 - 8);
  uint64_t v25 = __chkstk_darwin(v65);
  unint64_t v48 = (char *)&v42 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  unint64_t v28 = (char *)&v42 - v27;
  (*(void (**)(char *, void, uint64_t))(v22 + 104))(v24, enum case for HPKE.KEM.P256_HKDF_SHA256(_:), v21);
  (*(void (**)(char *, void, uint64_t))(v18 + 104))(v20, enum case for HPKE.KDF.HKDF_SHA256(_:), v17);
  (*(void (**)(char *, void, uint64_t))(v14 + 104))(v16, enum case for HPKE.AEAD.AES_GCM_128(_:), v55);
  uint64_t v29 = v59;
  sub_100059070();
  uint64_t v63 = v56;
  unint64_t v64 = v57;
  sub_100016E5C(v56, v57);
  uint64_t v30 = v58;
  sub_100059110();
  if (v30)
  {
    (*(void (**)(char *, uint64_t))(v60 + 8))(v28, v65);
  }
  else
  {
    uint64_t v31 = v50;
    uint64_t v32 = v51;
    (*(void (**)(char *, void *, uint64_t))(v50 + 16))(v49, v29, v51);
    (*(void (**)(char *, char *, uint64_t))(v60 + 16))(v48, v28, v65);
    sub_100016E5C(v52, v53);
    sub_1000590C0();
    uint64_t v33 = v32;
    unint64_t v58 = v28;
    uint64_t v35 = v60;
    uint64_t v63 = v42;
    unint64_t v64 = v43;
    uint64_t v61 = v44;
    uint64_t v62 = v45;
    sub_10004292C();
    uint64_t v36 = sub_1000590E0();
    uint64_t v38 = v37;
    sub_100016C98(&qword_100082040);
    uint64_t v39 = swift_allocObject();
    uint64_t v40 = v54;
    uint64_t v29 = (void *)v39;
    *(_OWORD *)(v39 + 16) = xmmword_10005F580;
    *(void *)(v39 + 32) = sub_1000590D0();
    v29[5] = v41;
    v29[6] = v36;
    v29[7] = v38;
    (*(void (**)(char *, uint64_t))(v46 + 8))(v40, v47);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v59, v33);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v58, v65);
  }
  return v29;
}

uint64_t type metadata accessor for _DPDediscoHPKEEncryption()
{
  return self;
}

unint64_t sub_10004292C()
{
  unint64_t result = qword_100082038;
  if (!qword_100082038)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100082038);
  }
  return result;
}

uint64_t PPM_0_2_1.HPKECiphertext.init(configID:enc:payload:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  *(unsigned char *)a6 = result;
  *(void *)(a6 + 8) = a2;
  *(void *)(a6 + 16) = a3;
  *(void *)(a6 + 24) = a4;
  *(void *)(a6 + 32) = a5;
  return result;
}

__n128 PPM_0_2_1.Report.init(reportMetadata:publicShare:leaderEncryptedInputShare:helperEncryptedInputShare:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char *a6@<X5>, char *a7@<X6>, uint64_t a8@<X8>)
{
  char v8 = *a7;
  char v9 = *a6;
  *(void *)a8 = a1;
  *(void *)(a8 + 8) = a2;
  *(void *)(a8 + 16) = a3;
  *(void *)(a8 + 24) = a4;
  *(void *)(a8 + 32) = a5;
  *(unsigned char *)(a8 + 40) = v9;
  long long v10 = *(_OWORD *)(a6 + 24);
  *(_OWORD *)(a8 + 48) = *(_OWORD *)(a6 + 8);
  *(_OWORD *)(a8 + 64) = v10;
  *(unsigned char *)(a8 + 80) = v8;
  *(_OWORD *)(a8 + 88) = *(_OWORD *)(a7 + 8);
  __n128 result = *(__n128 *)(a7 + 24);
  *(__n128 *)(a8 + 104) = result;
  return result;
}

uint64_t PPM_0_2_1.InputShareAAD.init(taskID:reportMetadata:publicShare:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  *a8 = result;
  a8[1] = a2;
  a8[2] = a3;
  a8[3] = a4;
  a8[4] = a5;
  a8[5] = a6;
  a8[6] = a7;
  return result;
}

unint64_t sub_1000429E0(unint64_t a1, int a2, uint64_t a3)
{
  if ((a2 & 0x10000) != 0)
  {
    sub_10001FA84();
    swift_allocError();
    *(void *)uint64_t v16 = 0xD000000000000085;
    *(void *)(v16 + 8) = 0x80000001000627B0;
    *(unsigned char *)(v16 + 16) = 1;
    return swift_willThrow();
  }
  else
  {
    uint64_t v8 = *(void *)(a3 + 16);
    if (v8)
    {
      swift_bridgeObjectRetain();
      unint64_t v9 = 0;
      long long v10 = (unint64_t *)(a3 + 48);
      while (2)
      {
        uint64_t v4 = *(v10 - 1);
        unint64_t v5 = *v10;
        unint64_t v11 = *v10 >> 62;
        v10 += 3;
        unint64_t v12 = 0;
        switch(v11)
        {
          case 1uLL:
            if (__OFSUB__(HIDWORD(v4), v4)) {
              goto LABEL_25;
            }
            unint64_t v12 = HIDWORD(v4) - (int)v4;
LABEL_9:
            sub_100016E5C(v4, v5);
            sub_100016E5C(v4, v5);
            if ((v12 & 0x8000000000000000) != 0) {
              goto LABEL_21;
            }
            if (HIDWORD(v12))
            {
              __break(1u);
LABEL_24:
              __break(1u);
LABEL_25:
              __break(1u);
LABEL_26:
              __break(1u);
              JUMPOUT(0x100042D58);
            }
            if (v12 >= 0x10000) {
              goto LABEL_21;
            }
LABEL_12:
            sub_100016B2C(v4, v5);
            sub_100016B2C(v4, v5);
            BOOL v15 = __OFADD__(v9, v12 + 4);
            v9 += v12 + 4;
            if (v15) {
              goto LABEL_24;
            }
            if (--v8) {
              continue;
            }
            swift_bridgeObjectRelease();
            break;
          case 2uLL:
            uint64_t v14 = *(void *)(v4 + 16);
            uint64_t v13 = *(void *)(v4 + 24);
            unint64_t v12 = v13 - v14;
            if (!__OFSUB__(v13, v14)) {
              goto LABEL_9;
            }
            goto LABEL_26;
          case 3uLL:
            goto LABEL_12;
          default:
            unint64_t v12 = BYTE6(v5);
            goto LABEL_12;
        }
        break;
      }
    }
    else
    {
      unint64_t v9 = 0;
    }
    unint64_t result = sub_10003B748(v9, a1);
    if (!v3)
    {
      uint64_t v18 = sub_10003B948(a1);
      BOOL v15 = __OFADD__(v9, v18);
      unint64_t result = v9 + v18;
      if (v15)
      {
        __break(1u);
LABEL_21:
        HIDWORD(v20._object) = -335544320;
        sub_100059370(54);
        v23._object = (void *)0x8000000100062E60;
        v23._countAndFlagsBits = 0xD000000000000032;
        sub_1000591F0(v23);
        int v21 = 0xFFFF;
        int v22 = 0;
        sub_100059380();
        v24._countAndFlagsBits = 3026478;
        v24._object = (void *)0xE300000000000000;
        sub_1000591F0(v24);
        sub_100059380();
        v25._countAndFlagsBits = 0;
        v25._object = (void *)0xE000000000000000;
        sub_1000591F0(v25);
        swift_bridgeObjectRelease();
        v26._countAndFlagsBits = 8236;
        v26._object = (void *)0xE200000000000000;
        sub_1000591F0(v26);
        strcpy((char *)&v20, "instead got ");
        v27._countAndFlagsBits = sub_1000593D0();
        sub_1000591F0(v27);
        swift_bridgeObjectRelease();
        v28._countAndFlagsBits = 46;
        v28._object = (void *)0xE100000000000000;
        sub_1000591F0(v28);
        swift_bridgeObjectRetain();
        sub_1000591F0(v20);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_10001FA84();
        swift_allocError();
        *(void *)uint64_t v19 = 0;
        *(void *)(v19 + 8) = 0xE000000000000000;
        *(unsigned char *)(v19 + 16) = 5;
        swift_willThrow();
        sub_100016B2C(v4, v5);
        sub_100016B2C(v4, v5);
        return swift_bridgeObjectRelease();
      }
    }
  }
  return result;
}

unint64_t sub_100042D68(unint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a2 & 0x1000000000000) != 0)
  {
    sub_10001FA84();
    swift_allocError();
    *(void *)uint64_t v17 = 0xD000000000000085;
    *(void *)(v17 + 8) = 0x80000001000627B0;
    *(unsigned char *)(v17 + 16) = 1;
    return swift_willThrow();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 + 16);
    if (v6)
    {
      swift_bridgeObjectRetain();
      unint64_t v7 = 0;
      uint64_t v8 = (unint64_t *)(a3 + 48);
      while (2)
      {
        uint64_t v9 = *(v8 - 1);
        unint64_t v10 = *v8;
        unint64_t v11 = *v8 >> 62;
        v8 += 3;
        unint64_t v12 = 0;
        switch(v11)
        {
          case 1uLL:
            if (__OFSUB__(HIDWORD(v9), v9)) {
              goto LABEL_27;
            }
            unint64_t v12 = HIDWORD(v9) - (int)v9;
LABEL_9:
            sub_100016E5C(v9, v10);
            sub_100016E5C(v9, v10);
LABEL_10:
            sub_10003B748(v12, 0xFFFF00000001uLL);
            sub_100016B2C(v9, v10);
            sub_100016B2C(v9, v10);
            if (v3) {
              return swift_bridgeObjectRelease();
            }
            if (__OFADD__(v12, 2))
            {
              __break(1u);
LABEL_25:
              __break(1u);
LABEL_26:
              __break(1u);
LABEL_27:
              __break(1u);
LABEL_28:
              __break(1u);
              JUMPOUT(0x100042F3CLL);
            }
            unint64_t v15 = v12 + 9;
            if (__OFADD__(v12 + 2, 7)) {
              goto LABEL_25;
            }
            BOOL v16 = __OFADD__(v7, v15);
            v7 += v15;
            if (v16) {
              goto LABEL_26;
            }
            if (--v6) {
              continue;
            }
            swift_bridgeObjectRelease();
            break;
          case 2uLL:
            uint64_t v14 = *(void *)(v9 + 16);
            uint64_t v13 = *(void *)(v9 + 24);
            unint64_t v12 = v13 - v14;
            if (!__OFSUB__(v13, v14)) {
              goto LABEL_9;
            }
            goto LABEL_28;
          case 3uLL:
            goto LABEL_10;
          default:
            unint64_t v12 = BYTE6(v10);
            goto LABEL_10;
        }
        break;
      }
    }
    else
    {
      unint64_t v7 = 0;
    }
    unint64_t result = sub_10003B748(v7, a1);
    if (!v3)
    {
      uint64_t v19 = sub_10003B948(a1);
      BOOL v16 = __OFADD__(v7, v19);
      unint64_t result = v7 + v19;
      if (v16)
      {
        __break(1u);
        return swift_bridgeObjectRelease();
      }
    }
  }
  return result;
}

Swift::Int __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> PPM_0_2_1.HPKEPublicKey.encodedLength(with:)(Swift::Void_optional with)
{
  return sub_10004720C(v1, v2);
}

unint64_t PPM_0_2_1.HPKEPublicKey.encode<A>(into:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_100047520(a1, a3, a4, a5);
}

uint64_t PPM_0_2_1.HPKEPublicKey.init<A>(from:with:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return sub_100047B04(a1, a3, a4);
}

uint64_t sub_100042FB4()
{
  return sub_10004720C(*(void *)v0, *(void *)(v0 + 8));
}

unint64_t sub_100042FD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100047520(a1, *v3, v3[1], a3);
}

uint64_t sub_100042FF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t result = sub_100047B04(a1, a2, a3);
  if (!v4)
  {
    *a4 = result;
    a4[1] = v7;
  }
  return result;
}

unint64_t PPM_0_2_1.HPKEConfig.kemID.getter(unint64_t a1)
{
  return a1 >> 16;
}

unint64_t PPM_0_2_1.HPKEConfig.aeadID.getter(unint64_t a1)
{
  return HIWORD(a1);
}

uint64_t PPM_0_2_1.Extension.extensionData.getter(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return a2;
}

uint64_t PPM_0_2_1.HPKEConfig.CodingParameter.aeadIDParameter.getter(unsigned int a1)
{
  return HIBYTE(a1) & 1;
}

uint64_t PPM_0_2_1.HPKEConfig.CodingParameter.publicKeyParameter.getter(unint64_t a1)
{
  return HIDWORD(a1) & 1;
}

unint64_t PPM_0_2_1.HPKEConfig.CodingParameter.init(idParameter:kemIDParameter:kdfIDParameter:aeadIDParameter:publicKeyParameter:)(char a1, char a2, char a3, char a4, char a5)
{
  return a1 & 1 | ((unint64_t)(a2 & 1) << 8) | ((unint64_t)(a3 & 1) << 16) | ((unint64_t)(a4 & 1) << 24) | ((unint64_t)(a5 & 1) << 32);
}

uint64_t PPM_0_2_1.HPKEConfig.encodedLength(with:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return sub_1000470FC(a2 & 0xFFFFFFFFFFFF00FFLL, a3, a4);
}

unint64_t PPM_0_2_1.HPKEConfig.encode<A>(into:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_10004759C(a1, a3 & 0xFFFFFFFFFFFF00FFLL, a4, a5, a6, a7);
}

unint64_t PPM_0_2_1.HPKEConfig.init(id:kemID:kdfID:aeadID:publicKey:)(unsigned __int8 a1, unsigned __int16 a2, unsigned __int16 a3, uint64_t a4)
{
  return a1 | ((unint64_t)a2 << 16) | ((unint64_t)a3 << 32) | (a4 << 48);
}

uint64_t PPM_0_2_1.HPKEConfig.init<A>(from:with:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v8 = sub_100022CA4();
  uint64_t result = CommonUIntTLSNumberType.init<A>(from:with:)((uint64_t)&type metadata for UInt8, a3, v8, a4, (uint64_t)&v18);
  if (!v4)
  {
    uint64_t v14 = v18;
    unint64_t v10 = sub_100022C50();
    CommonUIntTLSNumberType.init<A>(from:with:)((uint64_t)&type metadata for UInt16, a3, v10, a4, (uint64_t)&v17);
    uint64_t v11 = v17;
    CommonUIntTLSNumberType.init<A>(from:with:)((uint64_t)&type metadata for UInt16, a3, v10, a4, (uint64_t)&v16);
    uint64_t v12 = v16;
    CommonUIntTLSNumberType.init<A>(from:with:)((uint64_t)&type metadata for UInt16, a3, v10, a4, (uint64_t)&v15);
    uint64_t v13 = v15;
    sub_100047B04(a1, a3, a4);
    return v14 | (v11 << 16) | (v12 << 32) | (v13 << 48);
  }
  return result;
}

uint64_t static PPM_0_2_1.HPKEConfig.__derived_struct_equals(_:_:)(unint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  if (a1 == a4 && a1 >> 16 == a4 >> 16) {
    return _s19DPSubmissionService9PPM_0_2_1V3UrlV23__derived_struct_equalsySbAE_AEtFZ_0(a2, a3, a5, a6);
  }
  else {
    return 0;
  }
}

uint64_t sub_10004334C()
{
  return sub_1000470FC(*v0 | ((unint64_t)*((unsigned __int16 *)v0 + 1) << 16) | ((unint64_t)*((unsigned __int16 *)v0+ 2) << 32) | ((unint64_t)*((unsigned __int16 *)v0 + 3) << 48), *((void *)v0 + 1), *((void *)v0 + 2));
}

unint64_t sub_100043384(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10004759C(a1, *v4 | ((unint64_t)*((unsigned __int16 *)v4 + 1) << 16) | ((unint64_t)*((unsigned __int16 *)v4+ 2) << 32) | ((unint64_t)*((unsigned __int16 *)v4 + 3) << 48), *((void *)v4 + 1), *((void *)v4 + 2), a3, a4);
}

uint64_t sub_1000433C4@<X0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t result = PPM_0_2_1.HPKEConfig.init<A>(from:with:)(a1, *a2 | ((unint64_t)*((unsigned __int8 *)a2 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)a2+ 5) << 40), a3, a4);
  if (!v5)
  {
    *(unsigned char *)a5 = result;
    *(_WORD *)(a5 + 2) = WORD1(result);
    *(_WORD *)(a5 + 4) = WORD2(result);
    *(_WORD *)(a5 + 6) = HIWORD(result);
    *(void *)(a5 + 8) = v8;
    *(void *)(a5 + 16) = v9;
  }
  return result;
}

uint64_t sub_100043428(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 == *a2
    && *((unsigned __int16 *)a1 + 1) == *((unsigned __int16 *)a2 + 1)
    && *((unsigned __int16 *)a1 + 2) == *((unsigned __int16 *)a2 + 2)
    && *((unsigned __int16 *)a1 + 3) == *((unsigned __int16 *)a2 + 3))
  {
    return _s19DPSubmissionService9PPM_0_2_1V3UrlV23__derived_struct_equalsySbAE_AEtFZ_0(*((void *)a1 + 1), *((void *)a1 + 2), *((void *)a2 + 1), *((void *)a2 + 2));
  }
  else
  {
    return 0;
  }
}

unint64_t PPM_0_2_1.HPKEConfigList.encodedLength(with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 & 0x1FFFFFFFFFFLL;
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_100042D68(0xFFFF00000001uLL, v3, a2);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t PPM_0_2_1.HPKEConfigList.encode<A>(into:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v16 = a3;
  uint64_t v12 = 0xFFFF00000001;
  __int16 v14 = WORD2(a2) & 0x1FF;
  int v13 = a2;
  char v15 = 0;
  uint64_t v8 = (void *)sub_100016C98(&qword_100082048);
  uint64_t v9 = (unsigned int (*)(void, void, void))sub_100047F30(&qword_100082050, &qword_100082048);
  unint64_t v10 = sub_100047B84();
  return RangeReplaceableCollection<>.encode<A>(into:with:)(a1, (char *)&v12, v8, a4, v9, a5, v10);
}

uint64_t PPM_0_2_1.HPKEConfigList.init<A>(from:with:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v9 = sub_100016C98(&qword_100082048);
  uint64_t v13 = 0xFFFF00000001;
  __int16 v15 = WORD2(a2) & 0x1FF;
  int v14 = a2;
  char v16 = 0;
  uint64_t v10 = sub_100047F30(&qword_100082050, &qword_100082048);
  unint64_t v11 = sub_100047B84();
  uint64_t result = RangeReplaceableCollection<>.init<A>(from:with:)(a1, (uint64_t)&v13, v9, a3, v10, a4, v11, (uint64_t)&v17);
  if (!v4) {
    return v17;
  }
  return result;
}

uint64_t sub_100043694(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v2 && a1 != a2)
  {
    uint64_t v3 = (unint64_t *)(a2 + 48);
    uint64_t v4 = (unint64_t *)(a1 + 48);
    while (*((_DWORD *)v4 - 4) == *((_DWORD *)v3 - 4))
    {
      uint64_t v5 = *(v4 - 1);
      unint64_t v6 = *v4;
      uint64_t v8 = *(v3 - 1);
      unint64_t v7 = *v3;
      v3 += 3;
      v4 += 3;
      uint64_t v9 = 0;
      switch(v6 >> 62)
      {
        case 1uLL:
          LODWORD(v9) = HIDWORD(v5) - v5;
          if (__OFSUB__(HIDWORD(v5), v5))
          {
            __break(1u);
LABEL_121:
            __break(1u);
LABEL_122:
            __break(1u);
LABEL_123:
            __break(1u);
LABEL_124:
            __break(1u);
LABEL_125:
            __break(1u);
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
LABEL_134:
            __break(1u);
LABEL_135:
            __break(1u);
LABEL_136:
            __break(1u);
LABEL_137:
            __break(1u);
LABEL_138:
            __break(1u);
LABEL_139:
            __break(1u);
LABEL_140:
            __break(1u);
LABEL_141:
            __break(1u);
LABEL_142:
            __break(1u);
          }
          uint64_t v9 = (int)v9;
LABEL_13:
          unint64_t v13 = v7 >> 62;
          switch(v7 >> 62)
          {
            case 1uLL:
              LODWORD(v14) = HIDWORD(v8) - v8;
              if (__OFSUB__(HIDWORD(v8), v8)) {
                goto LABEL_122;
              }
              uint64_t v14 = (int)v14;
LABEL_18:
              if (v9 != v14) {
                return 0;
              }
              if (v9 < 1) {
                goto LABEL_6;
              }
              break;
            case 2uLL:
              uint64_t v16 = *(void *)(v8 + 16);
              uint64_t v15 = *(void *)(v8 + 24);
              BOOL v12 = __OFSUB__(v15, v16);
              uint64_t v14 = v15 - v16;
              if (!v12) {
                goto LABEL_18;
              }
              goto LABEL_123;
            case 3uLL:
              if (!v9) {
                goto LABEL_6;
              }
              sub_100016E5C(v8, v7);
              return 0;
            default:
              uint64_t v14 = BYTE6(v7);
              goto LABEL_18;
          }
          break;
        case 2uLL:
          uint64_t v11 = *(void *)(v5 + 16);
          uint64_t v10 = *(void *)(v5 + 24);
          BOOL v12 = __OFSUB__(v10, v11);
          uint64_t v9 = v10 - v11;
          if (!v12) {
            goto LABEL_13;
          }
          goto LABEL_121;
        case 3uLL:
          goto LABEL_13;
        default:
          uint64_t v9 = BYTE6(v6);
          goto LABEL_13;
      }
      switch(v6 >> 62)
      {
        case 1uLL:
          if ((int)v5 > v5 >> 32) {
            goto LABEL_124;
          }
          sub_100016E5C(v8, v7);
          unint64_t v78 = v6;
          sub_100016E5C(v5, v6);
          int v22 = (char *)sub_100058CB0();
          if (!v22) {
            goto LABEL_32;
          }
          uint64_t v23 = sub_100058CD0();
          if (__OFSUB__((int)v5, v23)) {
            goto LABEL_126;
          }
          v22 += (int)v5 - v23;
LABEL_32:
          sub_100058CC0();
          if (v13)
          {
            uint64_t __s1 = v22;
            if (v13 == 1)
            {
              if (v8 >> 32 < (int)v8) {
                goto LABEL_134;
              }
              swift_retain();
              Swift::String v24 = (char *)sub_100058CB0();
              if (v24)
              {
                uint64_t v25 = sub_100058CD0();
                if (__OFSUB__((int)v8, v25)) {
                  goto LABEL_142;
                }
                v24 += (int)v8 - v25;
              }
              unint64_t v26 = v78;
              uint64_t v27 = sub_100058CC0();
              if (v27 >= (v8 >> 32) - (int)v8) {
                size_t v28 = (v8 >> 32) - (int)v8;
              }
              else {
                size_t v28 = v27;
              }
              if (!__s1) {
                goto LABEL_144;
              }
              if (!v24) {
                goto LABEL_145;
              }
              int v29 = memcmp(__s1, v24, v28);
              sub_100016B2C(v8, v7);
              goto LABEL_72;
            }
            uint64_t v67 = *(void *)(v8 + 16);
            uint64_t v66 = *(void *)(v8 + 24);
            swift_retain();
            swift_retain();
            uint64_t v68 = sub_100058CB0();
            if (v68)
            {
              uint64_t v69 = sub_100058CD0();
              if (__OFSUB__(v67, v69)) {
                goto LABEL_141;
              }
              v68 += v67 - v69;
            }
            BOOL v12 = __OFSUB__(v66, v67);
            uint64_t v70 = v66 - v67;
            if (v12) {
              goto LABEL_136;
            }
            uint64_t v71 = sub_100058CC0();
            if (v71 >= v70) {
              size_t v72 = v70;
            }
            else {
              size_t v72 = v71;
            }
            uint64_t v55 = __s1;
            if (!__s1) {
              goto LABEL_155;
            }
            if (!v68) {
              goto LABEL_156;
            }
            size_t v54 = v72;
            uint64_t v56 = (const void *)v68;
LABEL_116:
            int v73 = memcmp(v55, v56, v54);
            swift_release();
            swift_release();
            sub_100016B2C(v8, v7);
            sub_100016B2C(v5, v78);
            if (v73) {
              return 0;
            }
          }
          else
          {
            v85[0] = v8;
            LOWORD(v85[1]) = v7;
            BYTE2(v85[1]) = BYTE2(v7);
            BYTE3(v85[1]) = BYTE3(v7);
            BYTE4(v85[1]) = BYTE4(v7);
            BYTE5(v85[1]) = BYTE5(v7);
            if (!v22) {
              goto LABEL_154;
            }
            int v65 = memcmp(v22, v85, BYTE6(v7));
            sub_100016B2C(v5, v78);
            if (v65) {
              return 0;
            }
          }
          goto LABEL_6;
        case 2uLL:
          unint64_t v30 = v6;
          uint64_t v31 = *(void *)(v5 + 16);
          sub_100016E5C(v8, v7);
          sub_100016E5C(v5, v30);
          uint64_t v76 = v5;
          swift_retain();
          swift_retain();
          uint64_t v32 = sub_100058CB0();
          if (v32)
          {
            uint64_t v33 = v32;
            uint64_t v34 = sub_100058CD0();
            if (__OFSUB__(v31, v34)) {
              goto LABEL_125;
            }
            uint64_t v35 = (void *)(v33 + v31 - v34);
          }
          else
          {
            uint64_t v35 = 0;
          }
          sub_100058CC0();
          if (v13)
          {
            uint64_t v75 = v35;
            if (v13 == 1)
            {
              if (v8 >> 32 < (int)v8) {
                goto LABEL_129;
              }
              swift_retain();
              uint64_t v41 = (char *)sub_100058CB0();
              if (v41)
              {
                uint64_t v42 = sub_100058CD0();
                if (__OFSUB__((int)v8, v42)) {
                  goto LABEL_140;
                }
                v41 += (int)v8 - v42;
              }
              unint64_t v26 = v30;
              uint64_t v43 = sub_100058CC0();
              if (v43 >= (v8 >> 32) - (int)v8) {
                size_t v44 = (v8 >> 32) - (int)v8;
              }
              else {
                size_t v44 = v43;
              }
              if (!v35) {
                goto LABEL_147;
              }
              if (!v41) {
                goto LABEL_148;
              }
              int v29 = memcmp(v35, v41, v44);
              sub_100016B2C(v8, v7);
              swift_release();
              uint64_t v5 = v76;
              swift_release();
LABEL_72:
              sub_100016B2C(v8, v7);
              sub_100016B2C(v5, v26);
              if (v29) {
                return 0;
              }
            }
            else
            {
              uint64_t v59 = *(void *)(v8 + 16);
              uint64_t v58 = *(void *)(v8 + 24);
              swift_retain();
              swift_retain();
              uint64_t v60 = (char *)sub_100058CB0();
              if (v60)
              {
                uint64_t v61 = sub_100058CD0();
                if (__OFSUB__(v59, v61)) {
                  goto LABEL_139;
                }
                v60 += v59 - v61;
              }
              if (__OFSUB__(v58, v59)) {
                goto LABEL_135;
              }
              uint64_t v62 = sub_100058CC0();
              if (v62 >= v58 - v59) {
                size_t v63 = v58 - v59;
              }
              else {
                size_t v63 = v62;
              }
              if (!v75) {
                goto LABEL_152;
              }
              if (!v60) {
                goto LABEL_153;
              }
              int v64 = memcmp(v75, v60, v63);
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              sub_100016B2C(v8, v7);
              sub_100016B2C(v76, v30);
              if (v64) {
                return 0;
              }
            }
          }
          else
          {
            v85[0] = v8;
            LOWORD(v85[1]) = v7;
            BYTE2(v85[1]) = BYTE2(v7);
            BYTE3(v85[1]) = BYTE3(v7);
            BYTE4(v85[1]) = BYTE4(v7);
            BYTE5(v85[1]) = BYTE5(v7);
            if (!v35) {
              goto LABEL_151;
            }
            int v57 = memcmp(v35, v85, BYTE6(v7));
            swift_release();
            swift_release();
            sub_100016B2C(v8, v7);
            sub_100016B2C(v76, v30);
            if (v57) {
              return 0;
            }
          }
LABEL_6:
          if (!--v2) {
            return 1;
          }
          break;
        case 3uLL:
          memset(v85, 0, 14);
          if (!v13) {
            goto LABEL_57;
          }
          unint64_t v78 = v6;
          if (v13 == 1)
          {
            uint64_t v17 = (v8 >> 32) - (int)v8;
            if (v8 >> 32 < (int)v8) {
              goto LABEL_128;
            }
            sub_100016E5C(v8, v7);
            sub_100016E5C(v5, v6);
            uint64_t v36 = sub_100058CB0();
            if (!v36) {
              goto LABEL_146;
            }
            uint64_t v19 = v36;
            uint64_t v37 = sub_100058CD0();
            uint64_t v21 = (int)v8 - v37;
            if (__OFSUB__((int)v8, v37)) {
              goto LABEL_133;
            }
LABEL_52:
            uint64_t v38 = sub_100058CC0();
            if (v38 >= v17) {
              size_t v39 = v17;
            }
            else {
              size_t v39 = v38;
            }
            int v40 = memcmp(v85, (const void *)(v19 + v21), v39);
            sub_100016B2C(v8, v7);
            sub_100016B2C(v5, v78);
            if (v40) {
              return 0;
            }
            goto LABEL_6;
          }
          uint64_t v51 = *(void *)(v8 + 16);
          uint64_t v52 = *(void *)(v8 + 24);
          sub_100016E5C(v8, v7);
          sub_100016E5C(v5, v6);
          swift_retain();
          swift_retain();
          uint64_t v47 = sub_100058CB0();
          if (v47)
          {
            uint64_t v53 = sub_100058CD0();
            if (__OFSUB__(v51, v53)) {
              goto LABEL_138;
            }
            v47 += v51 - v53;
          }
          BOOL v12 = __OFSUB__(v52, v51);
          int64_t v49 = v52 - v51;
          if (v12) {
            goto LABEL_131;
          }
          uint64_t v50 = sub_100058CC0();
          if (!v47) {
            goto LABEL_150;
          }
LABEL_85:
          if (v50 >= v49) {
            size_t v54 = v49;
          }
          else {
            size_t v54 = v50;
          }
          uint64_t v55 = v85;
          uint64_t v56 = (const void *)v47;
          goto LABEL_116;
        default:
          v85[0] = v5;
          LOWORD(v85[1]) = v6;
          BYTE2(v85[1]) = BYTE2(v6);
          BYTE3(v85[1]) = BYTE3(v6);
          BYTE4(v85[1]) = BYTE4(v6);
          BYTE5(v85[1]) = BYTE5(v6);
          if (!v13)
          {
LABEL_57:
            uint64_t __s2 = v8;
            __int16 v80 = v7;
            char v81 = BYTE2(v7);
            char v82 = BYTE3(v7);
            char v83 = BYTE4(v7);
            char v84 = BYTE5(v7);
            sub_100016E5C(v8, v7);
            if (memcmp(v85, &__s2, BYTE6(v7))) {
              return 0;
            }
            goto LABEL_6;
          }
          unint64_t v78 = v6;
          if (v13 == 1)
          {
            uint64_t v17 = (v8 >> 32) - (int)v8;
            if (v8 >> 32 < (int)v8) {
              goto LABEL_127;
            }
            sub_100016E5C(v8, v7);
            sub_100016E5C(v5, v6);
            uint64_t v18 = sub_100058CB0();
            if (!v18)
            {
              sub_100058CC0();
              __break(1u);
LABEL_144:
              __break(1u);
LABEL_145:
              __break(1u);
LABEL_146:
              sub_100058CC0();
              __break(1u);
LABEL_147:
              __break(1u);
LABEL_148:
              __break(1u);
LABEL_149:
              __break(1u);
LABEL_150:
              __break(1u);
LABEL_151:
              __break(1u);
LABEL_152:
              __break(1u);
LABEL_153:
              __break(1u);
LABEL_154:
              __break(1u);
LABEL_155:
              __break(1u);
LABEL_156:
              __break(1u);
              JUMPOUT(0x100044040);
            }
            uint64_t v19 = v18;
            uint64_t v20 = sub_100058CD0();
            uint64_t v21 = (int)v8 - v20;
            if (__OFSUB__((int)v8, v20)) {
              goto LABEL_132;
            }
            goto LABEL_52;
          }
          uint64_t v45 = *(void *)(v8 + 16);
          uint64_t v46 = *(void *)(v8 + 24);
          sub_100016E5C(v8, v7);
          sub_100016E5C(v5, v6);
          swift_retain();
          swift_retain();
          uint64_t v47 = sub_100058CB0();
          if (v47)
          {
            uint64_t v48 = sub_100058CD0();
            if (__OFSUB__(v45, v48)) {
              goto LABEL_137;
            }
            v47 += v45 - v48;
          }
          BOOL v12 = __OFSUB__(v46, v45);
          int64_t v49 = v46 - v45;
          if (v12) {
            goto LABEL_130;
          }
          uint64_t v50 = sub_100058CC0();
          if (!v47) {
            goto LABEL_149;
          }
          goto LABEL_85;
      }
    }
    return 0;
  }
  return 1;
}

uint64_t _s19DPSubmissionService9PPM_0_2_1V14HPKEConfigListV23__derived_struct_equalsySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v2)
  {
    uint64_t v3 = a1;
    if (a1 != a2)
    {
      uint64_t v4 = 0;
      uint64_t v82 = a2;
      while (1)
      {
        uint64_t v5 = v3 + v4;
        uint64_t v6 = a2 + v4;
        BOOL v7 = *(unsigned __int8 *)(v3 + v4 + 32) == *(unsigned __int8 *)(a2 + v4 + 32)
          && *(unsigned __int16 *)(v3 + v4 + 34) == *(unsigned __int16 *)(a2 + v4 + 34);
        BOOL v8 = v7 && *(unsigned __int16 *)(v3 + v4 + 36) == *(unsigned __int16 *)(a2 + v4 + 36);
        if (!v8 || *(unsigned __int16 *)(v3 + v4 + 38) != *(unsigned __int16 *)(a2 + v4 + 38)) {
          return 0;
        }
        uint64_t v11 = *(void *)(v5 + 40);
        unint64_t v10 = *(void *)(v5 + 48);
        uint64_t v13 = *(void *)(v6 + 40);
        unint64_t v12 = *(void *)(v6 + 48);
        uint64_t v14 = 0;
        switch(v10 >> 62)
        {
          case 1uLL:
            LODWORD(v14) = HIDWORD(v11) - v11;
            if (__OFSUB__(HIDWORD(v11), v11))
            {
              __break(1u);
LABEL_131:
              __break(1u);
LABEL_132:
              __break(1u);
LABEL_133:
              __break(1u);
LABEL_134:
              __break(1u);
LABEL_135:
              __break(1u);
LABEL_136:
              __break(1u);
LABEL_137:
              __break(1u);
LABEL_138:
              __break(1u);
LABEL_139:
              __break(1u);
LABEL_140:
              __break(1u);
LABEL_141:
              __break(1u);
LABEL_142:
              __break(1u);
LABEL_143:
              __break(1u);
LABEL_144:
              __break(1u);
LABEL_145:
              __break(1u);
LABEL_146:
              __break(1u);
LABEL_147:
              __break(1u);
LABEL_148:
              __break(1u);
LABEL_149:
              __break(1u);
LABEL_150:
              __break(1u);
LABEL_151:
              __break(1u);
LABEL_152:
              __break(1u);
            }
            uint64_t v14 = (int)v14;
LABEL_23:
            unint64_t v18 = v12 >> 62;
            switch(v12 >> 62)
            {
              case 1uLL:
                LODWORD(v19) = HIDWORD(v13) - v13;
                if (__OFSUB__(HIDWORD(v13), v13)) {
                  goto LABEL_132;
                }
                uint64_t v19 = (int)v19;
LABEL_28:
                if (v14 != v19) {
                  return 0;
                }
                if (v14 < 1) {
                  goto LABEL_6;
                }
                break;
              case 2uLL:
                uint64_t v21 = *(void *)(v13 + 16);
                uint64_t v20 = *(void *)(v13 + 24);
                BOOL v17 = __OFSUB__(v20, v21);
                uint64_t v19 = v20 - v21;
                if (!v17) {
                  goto LABEL_28;
                }
                goto LABEL_133;
              case 3uLL:
                if (!v14) {
                  goto LABEL_6;
                }
                sub_100016E5C(v13, v12);
                return 0;
              default:
                uint64_t v19 = BYTE6(v12);
                goto LABEL_28;
            }
            break;
          case 2uLL:
            uint64_t v16 = *(void *)(v11 + 16);
            uint64_t v15 = *(void *)(v11 + 24);
            BOOL v17 = __OFSUB__(v15, v16);
            uint64_t v14 = v15 - v16;
            if (!v17) {
              goto LABEL_23;
            }
            goto LABEL_131;
          case 3uLL:
            goto LABEL_23;
          default:
            uint64_t v14 = BYTE6(v10);
            goto LABEL_23;
        }
        switch(v10 >> 62)
        {
          case 1uLL:
            if ((int)v11 > v11 >> 32) {
              goto LABEL_134;
            }
            sub_100016E5C(v13, v12);
            sub_100016E5C(v11, v10);
            uint64_t v27 = (char *)sub_100058CB0();
            if (!v27) {
              goto LABEL_42;
            }
            uint64_t v28 = sub_100058CD0();
            if (__OFSUB__((int)v11, v28)) {
              goto LABEL_136;
            }
            v27 += (int)v11 - v28;
LABEL_42:
            sub_100058CC0();
            if (!v18)
            {
              __s1[0] = v13;
              LOWORD(__s1[1]) = v12;
              BYTE2(__s1[1]) = BYTE2(v12);
              BYTE3(__s1[1]) = BYTE3(v12);
              BYTE4(__s1[1]) = BYTE4(v12);
              BYTE5(__s1[1]) = BYTE5(v12);
              if (!v27) {
                goto LABEL_164;
              }
              int v33 = memcmp(v27, __s1, BYTE6(v12));
              goto LABEL_112;
            }
            if (v18 == 1)
            {
              if (v13 >> 32 < (int)v13) {
                goto LABEL_145;
              }
              swift_retain();
              int v29 = (char *)sub_100058CB0();
              if (v29)
              {
                uint64_t v30 = sub_100058CD0();
                if (__OFSUB__((int)v13, v30)) {
                  goto LABEL_152;
                }
                v29 += (int)v13 - v30;
              }
              uint64_t v31 = sub_100058CC0();
              if (v31 >= (v13 >> 32) - (int)v13) {
                size_t v32 = (v13 >> 32) - (int)v13;
              }
              else {
                size_t v32 = v31;
              }
              if (!v27) {
                goto LABEL_154;
              }
              if (!v29) {
                goto LABEL_155;
              }
              int v33 = memcmp(v27, v29, v32);
              sub_100016B2C(v13, v12);
              goto LABEL_81;
            }
            uint64_t v69 = *(void *)(v13 + 16);
            uint64_t v80 = *(void *)(v13 + 24);
            swift_retain();
            swift_retain();
            uint64_t v70 = sub_100058CB0();
            if (v70)
            {
              uint64_t v71 = sub_100058CD0();
              uint64_t v72 = v69 - v71;
              if (__OFSUB__(v69, v71)) {
                goto LABEL_151;
              }
              uint64_t v73 = v69;
              uint64_t v74 = v27;
              v70 += v72;
            }
            else
            {
              uint64_t v73 = v69;
              uint64_t v74 = v27;
            }
            uint64_t v75 = v80 - v73;
            if (__OFSUB__(v80, v73)) {
              goto LABEL_146;
            }
            uint64_t v76 = sub_100058CC0();
            if (v76 >= v75) {
              size_t v77 = v75;
            }
            else {
              size_t v77 = v76;
            }
            if (!v74) {
              goto LABEL_165;
            }
            if (!v70) {
              goto LABEL_166;
            }
            size_t v57 = v77;
            uint64_t v58 = v74;
            uint64_t v59 = (const void *)v70;
LABEL_125:
            int v60 = memcmp(v58, v59, v57);
            swift_release();
            goto LABEL_126;
          case 2uLL:
            uint64_t v34 = *(void *)(v11 + 16);
            sub_100016E5C(v13, v12);
            sub_100016E5C(v11, v10);
            swift_retain();
            swift_retain();
            uint64_t v35 = sub_100058CB0();
            if (v35)
            {
              uint64_t v36 = v35;
              uint64_t v37 = sub_100058CD0();
              if (__OFSUB__(v34, v37)) {
                goto LABEL_135;
              }
              uint64_t v38 = (void *)(v36 + v34 - v37);
            }
            else
            {
              uint64_t v38 = 0;
            }
            sub_100058CC0();
            if (v18)
            {
              uint64_t v79 = v38;
              if (v18 == 1)
              {
                if (v13 >> 32 < (int)v13) {
                  goto LABEL_141;
                }
                swift_retain();
                size_t v44 = (char *)sub_100058CB0();
                if (v44)
                {
                  uint64_t v45 = sub_100058CD0();
                  if (__OFSUB__((int)v13, v45)) {
                    goto LABEL_150;
                  }
                  v44 += (int)v13 - v45;
                }
                uint64_t v46 = sub_100058CC0();
                if (v46 >= (v13 >> 32) - (int)v13) {
                  size_t v47 = (v13 >> 32) - (int)v13;
                }
                else {
                  size_t v47 = v46;
                }
                if (!v38) {
                  goto LABEL_157;
                }
                if (!v44) {
                  goto LABEL_158;
                }
                int v33 = memcmp(v38, v44, v47);
                sub_100016B2C(v13, v12);
                swift_release();
                swift_release();
LABEL_81:
                sub_100016B2C(v13, v12);
LABEL_112:
                sub_100016B2C(v11, v10);
                uint64_t v3 = a1;
                a2 = v82;
                if (v33) {
                  return 0;
                }
              }
              else
              {
                uint64_t v62 = *(void *)(v13 + 16);
                uint64_t v61 = *(void *)(v13 + 24);
                swift_retain();
                swift_retain();
                size_t v63 = (char *)sub_100058CB0();
                if (v63)
                {
                  uint64_t v64 = sub_100058CD0();
                  if (__OFSUB__(v62, v64)) {
                    goto LABEL_149;
                  }
                  v63 += v62 - v64;
                }
                BOOL v17 = __OFSUB__(v61, v62);
                int64_t v65 = v61 - v62;
                if (v17) {
                  goto LABEL_144;
                }
                uint64_t v66 = sub_100058CC0();
                if (v66 >= v65) {
                  size_t v67 = v65;
                }
                else {
                  size_t v67 = v66;
                }
                if (!v79) {
                  goto LABEL_162;
                }
                if (!v63) {
                  goto LABEL_163;
                }
                int v68 = memcmp(v79, v63, v67);
                swift_release();
                swift_release();
                swift_release();
                swift_release();
                sub_100016B2C(v13, v12);
                sub_100016B2C(v11, v10);
                uint64_t v3 = a1;
                a2 = v82;
                if (v68) {
                  return 0;
                }
              }
            }
            else
            {
              __s1[0] = v13;
              LOWORD(__s1[1]) = v12;
              BYTE2(__s1[1]) = BYTE2(v12);
              BYTE3(__s1[1]) = BYTE3(v12);
              BYTE4(__s1[1]) = BYTE4(v12);
              BYTE5(__s1[1]) = BYTE5(v12);
              if (!v38) {
                goto LABEL_161;
              }
              int v60 = memcmp(v38, __s1, BYTE6(v12));
              swift_release();
LABEL_126:
              swift_release();
              sub_100016B2C(v13, v12);
              sub_100016B2C(v11, v10);
              uint64_t v3 = a1;
              a2 = v82;
              if (v60) {
                return 0;
              }
            }
LABEL_6:
            v4 += 24;
            if (!--v2) {
              return 1;
            }
            break;
          case 3uLL:
            memset(__s1, 0, 14);
            if (!v18) {
              goto LABEL_66;
            }
            if (v18 == 1)
            {
              uint64_t v22 = (v13 >> 32) - (int)v13;
              if (v13 >> 32 < (int)v13) {
                goto LABEL_138;
              }
              sub_100016E5C(v13, v12);
              sub_100016E5C(v11, v10);
              uint64_t v39 = sub_100058CB0();
              if (!v39) {
                goto LABEL_156;
              }
              uint64_t v24 = v39;
              uint64_t v40 = sub_100058CD0();
              uint64_t v26 = (int)v13 - v40;
              if (__OFSUB__((int)v13, v40)) {
                goto LABEL_140;
              }
LABEL_62:
              uint64_t v41 = sub_100058CC0();
              if (v41 >= v22) {
                size_t v42 = v22;
              }
              else {
                size_t v42 = v41;
              }
              int v33 = memcmp(__s1, (const void *)(v24 + v26), v42);
              goto LABEL_81;
            }
            uint64_t v54 = *(void *)(v13 + 16);
            uint64_t v55 = *(void *)(v13 + 24);
            sub_100016E5C(v13, v12);
            sub_100016E5C(v11, v10);
            swift_retain();
            swift_retain();
            uint64_t v50 = sub_100058CB0();
            if (v50)
            {
              uint64_t v56 = sub_100058CD0();
              if (__OFSUB__(v54, v56)) {
                goto LABEL_148;
              }
              v50 += v54 - v56;
            }
            BOOL v17 = __OFSUB__(v55, v54);
            int64_t v52 = v55 - v54;
            if (v17) {
              goto LABEL_143;
            }
            uint64_t v53 = sub_100058CC0();
            if (!v50) {
              goto LABEL_160;
            }
LABEL_93:
            if (v53 >= v52) {
              size_t v57 = v52;
            }
            else {
              size_t v57 = v53;
            }
            uint64_t v58 = __s1;
            uint64_t v59 = (const void *)v50;
            goto LABEL_125;
          default:
            __s1[0] = *(void *)(v5 + 40);
            LOWORD(__s1[1]) = v10;
            BYTE2(__s1[1]) = BYTE2(v10);
            BYTE3(__s1[1]) = BYTE3(v10);
            BYTE4(__s1[1]) = BYTE4(v10);
            BYTE5(__s1[1]) = BYTE5(v10);
            if (!v18)
            {
LABEL_66:
              uint64_t __s2 = v13;
              __int16 v84 = v12;
              char v85 = BYTE2(v12);
              char v86 = BYTE3(v12);
              char v87 = BYTE4(v12);
              char v88 = BYTE5(v12);
              sub_100016E5C(v13, v12);
              int v43 = memcmp(__s1, &__s2, BYTE6(v12));
              uint64_t v3 = a1;
              a2 = v82;
              if (v43) {
                return 0;
              }
              goto LABEL_6;
            }
            if (v18 == 1)
            {
              uint64_t v22 = (v13 >> 32) - (int)v13;
              if (v13 >> 32 < (int)v13) {
                goto LABEL_137;
              }
              sub_100016E5C(v13, v12);
              sub_100016E5C(v11, v10);
              uint64_t v23 = sub_100058CB0();
              if (!v23)
              {
                sub_100058CC0();
                __break(1u);
LABEL_154:
                __break(1u);
LABEL_155:
                __break(1u);
LABEL_156:
                sub_100058CC0();
                __break(1u);
LABEL_157:
                __break(1u);
LABEL_158:
                __break(1u);
LABEL_159:
                __break(1u);
LABEL_160:
                __break(1u);
LABEL_161:
                __break(1u);
LABEL_162:
                __break(1u);
LABEL_163:
                __break(1u);
LABEL_164:
                __break(1u);
LABEL_165:
                __break(1u);
LABEL_166:
                __break(1u);
                JUMPOUT(0x1000449ECLL);
              }
              uint64_t v24 = v23;
              uint64_t v25 = sub_100058CD0();
              uint64_t v26 = (int)v13 - v25;
              if (__OFSUB__((int)v13, v25)) {
                goto LABEL_139;
              }
              goto LABEL_62;
            }
            uint64_t v48 = *(void *)(v13 + 16);
            uint64_t v49 = *(void *)(v13 + 24);
            sub_100016E5C(v13, v12);
            sub_100016E5C(v11, v10);
            swift_retain();
            swift_retain();
            uint64_t v50 = sub_100058CB0();
            if (v50)
            {
              uint64_t v51 = sub_100058CD0();
              if (__OFSUB__(v48, v51)) {
                goto LABEL_147;
              }
              v50 += v48 - v51;
            }
            BOOL v17 = __OFSUB__(v49, v48);
            int64_t v52 = v49 - v48;
            if (v17) {
              goto LABEL_142;
            }
            uint64_t v53 = sub_100058CC0();
            if (!v50) {
              goto LABEL_159;
            }
            goto LABEL_93;
        }
      }
    }
  }
  return 1;
}

unint64_t sub_100044A1C(unsigned int *a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = 0x10000000000;
  if (!*((unsigned char *)a1 + 5)) {
    uint64_t v3 = 0;
  }
  unint64_t v4 = v3 | *a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32);
  swift_bridgeObjectRetain();
  unint64_t v5 = sub_100042D68(0xFFFF00000001uLL, v4, v2);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_100044AA0(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  return PPM_0_2_1.HPKEConfigList.encode<A>(into:with:)(a1, *a2 | ((unint64_t)*((unsigned __int8 *)a2 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)a2 + 5) << 40), *v4, a3, a4);
}

uint64_t sub_100044AE8@<X0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t result = PPM_0_2_1.HPKEConfigList.init<A>(from:with:)(a1, *a2 | ((unint64_t)*((unsigned __int8 *)a2 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)a2+ 5) << 40), a3, a4);
  if (!v5) {
    *a5 = result;
  }
  return result;
}

uint64_t sub_100044B30(uint64_t *a1, uint64_t *a2)
{
  return _s19DPSubmissionService9PPM_0_2_1V14HPKEConfigListV23__derived_struct_equalsySbAE_AEtFZ_0(*a1, *a2);
}

unint64_t static PPM_0_2_1.HPKECiphertext.payloadLengthBounds.getter()
{
  return 0xFFFFFFFF00000001;
}

uint64_t PPM_0_2_1.HPKECiphertext.encodedLength(with:)()
{
  return sub_100046C20();
}

unint64_t PPM_0_2_1.HPKECiphertext.encode<A>(into:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100047830(a1, a3, a4);
}

uint64_t PPM_0_2_1.HPKECiphertext.init<A>(from:with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, uint64_t a4@<X8>)
{
  unint64_t v9 = sub_100022CA4();
  uint64_t result = CommonUIntTLSNumberType.init<A>(from:with:)((uint64_t)&type metadata for UInt8, a2, v9, a3, (uint64_t)&v15);
  if (!v4)
  {
    char v11 = v15;
    unint64_t v12 = sub_100024898();
    RangeReplaceableCollection<>.init<A>(from:with:)(a1, 0xFFFF00000001, 1, (uint64_t)&type metadata for Data, a2, v12, a3);
    long long v13 = v15;
    uint64_t result = RangeReplaceableCollection<>.init<A>(from:with:)(a1, 0xFFFFFFFF00000001, 1, (uint64_t)&type metadata for Data, a2, v12, a3);
    long long v14 = v15;
    *(unsigned char *)a4 = v11;
    *(_OWORD *)(a4 + 8) = v13;
    *(_OWORD *)(a4 + 24) = v14;
  }
  return result;
}

uint64_t static PPM_0_2_1.HPKECiphertext.__derived_struct_equals(_:_:)(void *a1, void *a2)
{
  if (*(unsigned __int8 *)a1 != *(unsigned __int8 *)a2
    || (_s19DPSubmissionService9PPM_0_2_1V3UrlV23__derived_struct_equalsySbAE_AEtFZ_0(a1[1], a1[2], a2[1], a2[2]) & 1) == 0)
  {
    return 0;
  }
  uint64_t v4 = a1[3];
  unint64_t v5 = a1[4];
  uint64_t v6 = a2[3];
  unint64_t v7 = a2[4];
  return _s19DPSubmissionService9PPM_0_2_1V3UrlV23__derived_struct_equalsySbAE_AEtFZ_0(v4, v5, v6, v7);
}

unint64_t sub_100044D38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100047830(a1, a3, a4);
}

double sub_100044D7C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, uint64_t a4@<X8>)
{
  PPM_0_2_1.HPKECiphertext.init<A>(from:with:)(a1, a2, a3, (uint64_t)v8);
  if (!v4)
  {
    double result = *(double *)v8;
    long long v7 = v8[1];
    *(_OWORD *)a4 = v8[0];
    *(_OWORD *)(a4 + 16) = v7;
    *(void *)(a4 + 32) = v9;
  }
  return result;
}

uint64_t sub_100044DD0(void *a1, void *a2)
{
  if (*(unsigned __int8 *)a1 != *(unsigned __int8 *)a2) {
    return 0;
  }
  uint64_t v2 = a1[3];
  unint64_t v3 = a1[4];
  uint64_t v4 = a2[3];
  unint64_t v5 = a2[4];
  if ((_s19DPSubmissionService9PPM_0_2_1V3UrlV23__derived_struct_equalsySbAE_AEtFZ_0(a1[1], a1[2], a2[1], a2[2]) & 1) == 0) {
    return 0;
  }
  return _s19DPSubmissionService9PPM_0_2_1V3UrlV23__derived_struct_equalsySbAE_AEtFZ_0(v2, v3, v4, v5);
}

uint64_t static PPM_0_2_1.ExtensionType.maxValue.getter()
{
  return 0xFFFFLL;
}

void PPM_0_2_1.ExtensionType.EnumValue.hash(into:)()
{
}

_UNKNOWN **static PPM_0_2_1.ExtensionType.EnumValue.allCases.getter()
{
  return &off_100075680;
}

Swift::Int PPM_0_2_1.ExtensionType.EnumValue.hashValue.getter()
{
  return sub_100059480();
}

Swift::Int sub_100044ED0()
{
  return sub_100059480();
}

void sub_100044F10(void *a1@<X8>)
{
  *a1 = &off_1000756A8;
}

unint64_t sub_100044F20()
{
  unint64_t result = sub_100046620((uint64_t)&off_1000754C0);
  static PPM_0_2_1.ExtensionType.rangesByEnumVals = result;
  return result;
}

uint64_t *PPM_0_2_1.ExtensionType.rangesByEnumVals.unsafeMutableAddressor()
{
  if (qword_100080A30 != -1) {
    swift_once();
  }
  return &static PPM_0_2_1.ExtensionType.rangesByEnumVals;
}

uint64_t static PPM_0_2_1.ExtensionType.rangesByEnumVals.getter()
{
  if (qword_100080A30 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t static PPM_0_2_1.ExtensionType.rangesByEnumVals.setter(uint64_t a1)
{
  if (qword_100080A30 != -1) {
    swift_once();
  }
  swift_beginAccess();
  static PPM_0_2_1.ExtensionType.rangesByEnumVals = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static PPM_0_2_1.ExtensionType.rangesByEnumVals.modify())()
{
  if (qword_100080A30 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return j__swift_endAccess;
}

void sub_100045114(int a1@<W1>, _DWORD *a2@<X8>)
{
  *a2 = a1;
}

uint64_t PPM_0_2_1.Extension.encodedLength(with:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return sub_100047418(a2, a3, a4);
}

unint64_t PPM_0_2_1.Extension.encode<A>(into:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_100047A40(a1, a3, a4, a5, a6, a7);
}

uint64_t PPM_0_2_1.Extension.init<A>(from:with:)(uint64_t a1, __int16 a2, uint64_t a3, unint64_t a4)
{
  BOOL v9 = (a2 & 0x101) != 0;
  unint64_t v10 = sub_1000351E4();
  TLSEnumType.init<A>(from:with:)(a1, v9, (uint64_t)&type metadata for PPM_0_2_1.ExtensionType, a3, v10, a4);
  if (!v4)
  {
    uint64_t v5 = v13;
    unint64_t v11 = sub_100024898();
    RangeReplaceableCollection<>.init<A>(from:with:)(a1, 0xFFFF00000000, 1, (uint64_t)&type metadata for Data, a3, v11, a4);
  }
  return v5;
}

uint64_t static PPM_0_2_1.Extension.__derived_struct_equals(_:_:)(int a1, uint64_t a2, unint64_t a3, int a4, uint64_t a5, unint64_t a6)
{
  if (a1 == a4) {
    return _s19DPSubmissionService9PPM_0_2_1V3UrlV23__derived_struct_equalsySbAE_AEtFZ_0(a2, a3, a5, a6);
  }
  else {
    return 0;
  }
}

uint64_t sub_100045268()
{
  return sub_100047418(*v0, *((void *)v0 + 1), *((void *)v0 + 2));
}

unint64_t sub_100045288(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100047A40(a1, *v4, *((void *)v4 + 1), *((void *)v4 + 2), a3, a4);
}

uint64_t sub_1000452B0@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t result = PPM_0_2_1.Extension.init<A>(from:with:)(a1, *a2 | (unsigned __int16)(a2[1] << 8), a3, a4);
  if (!v5)
  {
    *(_DWORD *)a5 = result;
    *(void *)(a5 + 8) = v8;
    *(void *)(a5 + 16) = v9;
  }
  return result;
}

uint64_t sub_1000452EC(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 == *(_DWORD *)a2) {
    return _s19DPSubmissionService9PPM_0_2_1V3UrlV23__derived_struct_equalsySbAE_AEtFZ_0(*(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a2 + 8), *(void *)(a2 + 16));
  }
  else {
    return 0;
  }
}

uint64_t PPM_0_2_1.ReportMetadata.encodedLength(with:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_100047310(a2, a3);
}

unint64_t PPM_0_2_1.ReportMetadata.encode<A>(into:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1000476F0(a1, a3, a4, a5, a6, a7);
}

uint64_t PPM_0_2_1.ReportMetadata.init<A>(from:with:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = sub_100040FB0(a1, a3, a4);
  if (!v4)
  {
    uint64_t v5 = v8;
    unint64_t v9 = sub_100022BA8();
    CommonUIntTLSNumberType.init<A>(from:with:)((uint64_t)&type metadata for UInt64, a3, v9, a4, (uint64_t)&v11);
  }
  return v5;
}

uint64_t static PPM_0_2_1.ReportMetadata.__derived_struct_equals(_:_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  return _s19DPSubmissionService9PPM_0_2_1V3UrlV23__derived_struct_equalsySbAE_AEtFZ_0(a1, a2, a4, a5) & (a3 == a6);
}

uint64_t sub_100045464()
{
  return sub_100047310(*(void *)v0, *(void *)(v0 + 8));
}

unint64_t sub_100045484(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000476F0(a1, *v4, v4[1], v4[2], a3, a4);
}

uint64_t sub_1000454AC@<X0>(uint64_t a1@<X0>, unsigned __int16 *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t result = PPM_0_2_1.ReportMetadata.init<A>(from:with:)(a1, *a2 | (*((unsigned __int8 *)a2 + 2) << 16), a3, a4);
  if (!v5)
  {
    *a5 = result;
    a5[1] = v8;
    a5[2] = v9;
  }
  return result;
}

uint64_t sub_1000454E8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a2[2];
  return _s19DPSubmissionService9PPM_0_2_1V3UrlV23__derived_struct_equalsySbAE_AEtFZ_0(*a1, a1[1], *a2, a2[1]) & (v2 == v3);
}

uint64_t PPM_0_2_1.Report.reportMetadata.getter()
{
  uint64_t v1 = *(void *)v0;
  sub_100016E5C(*(void *)v0, *(void *)(v0 + 8));
  return v1;
}

unint64_t static PPM_0_2_1.Report.publicShareLengthBounds.getter()
{
  return 0xFFFFFFFF00000000;
}

uint64_t PPM_0_2_1.Report.leaderEncryptedInputShare.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100047BD8(v1 + 40, a1);
}

uint64_t PPM_0_2_1.Report.helperEncryptedInputShare.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100047BD8(v1 + 80, a1);
}

unint64_t PPM_0_2_1.Report.CodingParameter.leaderEncryptedInputShareParameter.getter(uint64_t a1)
{
  return (a1 & 0x1FFFFFFFFuLL) >> 24;
}

unint64_t PPM_0_2_1.Report.CodingParameter.helperEncryptedInputShareParameter.getter(unint64_t a1)
{
  return BYTE5(a1) | ((HIWORD(a1) & 1) << 8);
}

unint64_t PPM_0_2_1.Report.CodingParameter.init(reportMetadataParameter:leaderEncryptedInputShareParameter:helperEncryptedInputShareParameter:)(int a1, __int16 a2, __int16 a3)
{
  return ((unint64_t)a3 << 40) | ((unint64_t)(HIBYTE(a3) & 1) << 48) | ((unint64_t)(HIBYTE(a2) & 1) << 32) | ((unint64_t)a2 << 24) | ((unint64_t)(BYTE2(a1) & 1) << 16) | (unsigned __int16)a1;
}

uint64_t PPM_0_2_1.Report.encodedLength(with:)()
{
  return sub_100046E54();
}

unint64_t PPM_0_2_1.Report.encode<A>(into:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10004793C(a1, a3, a4);
}

uint64_t PPM_0_2_1.Report.init<A>(from:with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int v10 = (unsigned __int16)a2;
  if ((a2 & 0x100000000000000) != 0) {
    int v10 = 0;
  }
  uint64_t result = PPM_0_2_1.ReportMetadata.init<A>(from:with:)(a1, v10 | (((a2 & 0x100000000010000) != 0) << 16), a3, a4);
  if (!v5)
  {
    uint64_t v14 = result;
    uint64_t v15 = v12;
    uint64_t v16 = v13;
    uint64_t v26 = a5;
    unint64_t v17 = sub_100024898();
    RangeReplaceableCollection<>.init<A>(from:with:)(a1, 0xFFFFFFFF00000000, 1, (uint64_t)&type metadata for Data, a3, v17, a4);
    PPM_0_2_1.HPKECiphertext.init<A>(from:with:)(a1, a3, a4, (uint64_t)v29);
    char v18 = v29[0];
    uint64_t v24 = v31;
    uint64_t v25 = v30;
    uint64_t v22 = v33;
    uint64_t v23 = v32;
    uint64_t result = PPM_0_2_1.HPKECiphertext.init<A>(from:with:)(a1, a3, a4, (uint64_t)v34);
    char v19 = v34[0];
    long long v20 = v35;
    long long v21 = v36;
    *(void *)uint64_t v26 = v14;
    *(void *)(v26 + 8) = v15;
    *(void *)(v26 + 16) = v16;
    *(void *)(v26 + 24) = v27;
    *(void *)(v26 + 32) = v28;
    *(unsigned char *)(v26 + 40) = v18;
    *(void *)(v26 + 48) = v25;
    *(void *)(v26 + 56) = v24;
    *(void *)(v26 + 64) = v23;
    *(void *)(v26 + 72) = v22;
    *(unsigned char *)(v26 + 80) = v19;
    *(_OWORD *)(v26 + 88) = v20;
    *(_OWORD *)(v26 + 104) = v21;
  }
  return result;
}

unint64_t sub_100045848(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10004793C(a1, a3, a4);
}

double sub_1000458A4@<D0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v7 = *a2 | ((unint64_t)(*((unsigned __int16 *)a2 + 2) | (*((unsigned __int8 *)a2 + 6) << 16)) << 32);
  unsigned __int8 v19 = *((unsigned char *)a2 + 7);
  PPM_0_2_1.Report.init<A>(from:with:)(a1, v7 | ((unint64_t)v19 << 56), a3, a4, (uint64_t)v12);
  if (!v5)
  {
    long long v9 = v16;
    *(_OWORD *)(a5 + 64) = v15;
    *(_OWORD *)(a5 + 80) = v9;
    *(_OWORD *)(a5 + 96) = v17;
    *(void *)(a5 + 112) = v18;
    long long v10 = v12[1];
    *(_OWORD *)a5 = v12[0];
    *(_OWORD *)(a5 + 16) = v10;
    double result = *(double *)&v13;
    long long v11 = v14;
    *(_OWORD *)(a5 + 32) = v13;
    *(_OWORD *)(a5 + 48) = v11;
  }
  return result;
}

uint64_t sub_100045930(uint64_t a1, long long *a2)
{
  long long v2 = *(_OWORD *)(a1 + 80);
  v12[4] = *(_OWORD *)(a1 + 64);
  void v12[5] = v2;
  v12[6] = *(_OWORD *)(a1 + 96);
  uint64_t v13 = *(void *)(a1 + 112);
  long long v3 = *(_OWORD *)(a1 + 16);
  v12[0] = *(_OWORD *)a1;
  v12[1] = v3;
  long long v4 = *(_OWORD *)(a1 + 48);
  _OWORD v12[2] = *(_OWORD *)(a1 + 32);
  v12[3] = v4;
  long long v5 = *a2;
  long long v6 = a2[1];
  long long v7 = a2[3];
  _OWORD v14[2] = a2[2];
  v14[3] = v7;
  v14[0] = v5;
  v14[1] = v6;
  long long v8 = a2[4];
  long long v9 = a2[5];
  long long v10 = a2[6];
  uint64_t v15 = *((void *)a2 + 14);
  v14[5] = v9;
  v14[6] = v10;
  v14[4] = v8;
  return _s19DPSubmissionService9PPM_0_2_1V6ReportV23__derived_struct_equalsySbAE_AEtFZ_0((uint64_t)v12, (uint64_t)v14) & 1;
}

uint64_t PPM_0_2_1.PlaintextInputShare.encodedLength(with:)(int a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  int v8 = a1;
  if ((a1 & 0x10000) != 0) {
    int v8 = 0;
  }
  int v9 = v8 | (((a1 & 0x10100) != 0) << 8);
  swift_bridgeObjectRetain();
  unint64_t v10 = sub_1000429E0(0xFFFF00000000uLL, v9, a2);
  uint64_t result = swift_bridgeObjectRelease();
  if (!v4)
  {
    unint64_t v12 = 0;
    switch(a4 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(a3), a3)) {
          goto LABEL_17;
        }
        unint64_t v12 = HIDWORD(a3) - (int)a3;
LABEL_9:
        sub_100016E5C(a3, a4);
LABEL_10:
        sub_10003B748(v12, 0xFFFFFFFF00000000);
        uint64_t v15 = sub_10003B948(0xFFFFFFFF00000000);
        sub_100016B2C(a3, a4);
        unint64_t v16 = v12 + v15;
        if (__OFADD__(v12, v15)) {
          goto LABEL_16;
        }
        uint64_t result = v10 + v16;
        if (__OFADD__(v10, v16))
        {
          __break(1u);
LABEL_16:
          __break(1u);
LABEL_17:
          __break(1u);
LABEL_18:
          __break(1u);
          JUMPOUT(0x100045AFCLL);
        }
        return result;
      case 2uLL:
        uint64_t v14 = *(void *)(a3 + 16);
        uint64_t v13 = *(void *)(a3 + 24);
        unint64_t v12 = v13 - v14;
        if (!__OFSUB__(v13, v14)) {
          goto LABEL_9;
        }
        goto LABEL_18;
      case 3uLL:
        goto LABEL_10;
      default:
        unint64_t v12 = BYTE6(a4);
        goto LABEL_10;
    }
  }
  return result;
}

unint64_t PPM_0_2_1.PlaintextInputShare.encode<A>(into:with:)(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v20 = a3;
  __int16 v13 = a2;
  if ((a2 & 0x10000) != 0) {
    __int16 v13 = 0;
  }
  uint64_t v18 = 0xFFFF00000000;
  LOWORD(v19) = v13 | (((a2 & 0x10100) != 0) << 8);
  BYTE2(v19) = 0;
  uint64_t v14 = (void *)sub_100016C98(&qword_100082060);
  uint64_t v15 = (unsigned int (*)(void, void, void))sub_100047F30(&qword_100082068, &qword_100082060);
  unint64_t v16 = sub_100047C58();
  unint64_t result = RangeReplaceableCollection<>.encode<A>(into:with:)(a1, (char *)&v18, v14, a6, v15, a7, v16);
  if (!v7)
  {
    uint64_t v18 = a4;
    uint64_t v19 = a5;
    sub_100024898();
    return RangeReplaceableCollection<>.encode<A>(into:with:)(a1, 0xFFFFFFFF00000000, 1, (uint64_t)&type metadata for Data, a6);
  }
  return result;
}

uint64_t *PPM_0_2_1.PlaintextInputShare.init<A>(from:with:)(uint64_t a1, int a2, uint64_t a3, unint64_t a4)
{
  __int16 v9 = a2;
  __int16 v10 = (a2 & 0x10100) != 0;
  long long v11 = &qword_100082060;
  uint64_t v12 = sub_100016C98(&qword_100082060);
  if ((a2 & 0x10000) != 0) {
    __int16 v13 = 0;
  }
  else {
    __int16 v13 = v9;
  }
  uint64_t v18 = 0xFFFF00000000;
  __int16 v19 = v13 | (v10 << 8);
  char v20 = 0;
  uint64_t v14 = sub_100047F30(&qword_100082068, &qword_100082060);
  unint64_t v15 = sub_100047C58();
  RangeReplaceableCollection<>.init<A>(from:with:)(a1, (uint64_t)&v18, v12, a3, v14, a4, v15, (uint64_t)&v21);
  if (!v4)
  {
    long long v11 = v21;
    unint64_t v16 = sub_100024898();
    RangeReplaceableCollection<>.init<A>(from:with:)(a1, 0xFFFFFFFF00000000, 1, (uint64_t)&type metadata for Data, a3, v16, a4);
  }
  return v11;
}

uint64_t static PPM_0_2_1.PlaintextInputShare.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if ((sub_100043694(a1, a4) & 1) == 0) {
    return 0;
  }
  return _s19DPSubmissionService9PPM_0_2_1V3UrlV23__derived_struct_equalsySbAE_AEtFZ_0(a2, a3, a5, a6);
}

uint64_t sub_100045E0C(unsigned __int16 *a1)
{
  return PPM_0_2_1.PlaintextInputShare.encodedLength(with:)(*a1 | (*((unsigned __int8 *)a1 + 2) << 16), *(void *)v1, *(void *)(v1 + 8), *(void *)(v1 + 16));
}

unint64_t sub_100045E40(uint64_t a1, unsigned __int16 *a2, uint64_t a3, uint64_t a4)
{
  return PPM_0_2_1.PlaintextInputShare.encode<A>(into:with:)(a1, *a2 | (*((unsigned __int8 *)a2 + 2) << 16), *v4, v4[1], v4[2], a3, a4);
}

uint64_t *sub_100045E7C@<X0>(uint64_t a1@<X0>, unsigned __int16 *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t **a5@<X8>)
{
  unint64_t result = PPM_0_2_1.PlaintextInputShare.init<A>(from:with:)(a1, *a2 | (*((unsigned __int8 *)a2 + 2) << 16), a3, a4);
  if (!v5)
  {
    *a5 = result;
    a5[1] = v8;
    a5[2] = v9;
  }
  return result;
}

uint64_t sub_100045EB8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = a1[1];
  unint64_t v3 = a1[2];
  uint64_t v4 = a2[1];
  unint64_t v5 = a2[2];
  if ((sub_100043694(*a1, *a2) & 1) == 0) {
    return 0;
  }
  return _s19DPSubmissionService9PPM_0_2_1V3UrlV23__derived_struct_equalsySbAE_AEtFZ_0(v2, v3, v4, v5);
}

uint64_t PPM_0_2_1.InputShareAAD.reportMetadata.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  sub_100016E5C(v1, *(void *)(v0 + 24));
  return v1;
}

uint64_t PPM_0_2_1.InputShareAAD.CodingParameter.reportMetadataParameter.getter(unsigned int a1)
{
  return (unsigned __int16)(a1 >> 8) | ((HIBYTE(a1) & 1) << 16);
}

uint64_t PPM_0_2_1.InputShareAAD.CodingParameter.init(taskIDParameter:reportMetadataParameter:)(char a1, unsigned int a2)
{
  return ((unsigned __int16)a2 << 8) & 0xFEFFFFFE | ((HIWORD(a2) & 1) << 24) | a1 & 1;
}

uint64_t PPM_0_2_1.InputShareAAD.encodedLength(with:)()
{
  return sub_1000468E4();
}

unint64_t PPM_0_2_1.InputShareAAD.encode<A>(into:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100047774(a1, a3, a4);
}

uint64_t PPM_0_2_1.InputShareAAD.init<A>(from:with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t result = sub_100040F94(a1, a3, a4);
  if (!v5)
  {
    uint64_t v13 = result;
    uint64_t v14 = v12;
    int v15 = (unsigned __int16)(a2 >> 8);
    if ((a2 & (unint64_t)&_mh_execute_header) != 0) {
      int v15 = 0;
    }
    uint64_t v16 = PPM_0_2_1.ReportMetadata.init<A>(from:with:)(a1, v15 | (((a2 & 0x101000000) != 0) << 16), a3, a4);
    uint64_t v18 = v17;
    uint64_t v21 = v19;
    unint64_t v20 = sub_100024898();
    uint64_t result = RangeReplaceableCollection<>.init<A>(from:with:)(a1, 0xFFFFFFFF00000000, 1, (uint64_t)&type metadata for Data, a3, v20, a4);
    *(void *)a5 = v13;
    *(void *)(a5 + 8) = v14;
    *(void *)(a5 + 16) = v16;
    *(void *)(a5 + 24) = v18;
    *(void *)(a5 + 32) = v21;
    *(_OWORD *)(a5 + 40) = v22;
  }
  return result;
}

uint64_t static PPM_0_2_1.InputShareAAD.__derived_struct_equals(_:_:)(uint64_t *a1, uint64_t *a2)
{
  if ((_s19DPSubmissionService9PPM_0_2_1V3UrlV23__derived_struct_equalsySbAE_AEtFZ_0(*a1, a1[1], *a2, a2[1]) & 1) == 0) {
    return 0;
  }
  uint64_t v4 = a1[4];
  uint64_t v5 = a2[4];
  if ((_s19DPSubmissionService9PPM_0_2_1V3UrlV23__derived_struct_equalsySbAE_AEtFZ_0(a1[2], a1[3], a2[2], a2[3]) & 1) == 0
    || v4 != v5)
  {
    return 0;
  }
  uint64_t v6 = a1[5];
  unint64_t v7 = a1[6];
  uint64_t v8 = a2[5];
  unint64_t v9 = a2[6];
  return _s19DPSubmissionService9PPM_0_2_1V3UrlV23__derived_struct_equalsySbAE_AEtFZ_0(v6, v7, v8, v9);
}

unint64_t sub_1000461B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100047774(a1, a3, a4);
}

double sub_1000461FC@<D0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7 = *a2;
  unsigned __int8 v13 = *((unsigned char *)a2 + 4);
  PPM_0_2_1.InputShareAAD.init<A>(from:with:)(a1, v7 | ((unint64_t)v13 << 32), a3, a4, (uint64_t)v10);
  if (!v5)
  {
    long long v9 = v10[1];
    *(_OWORD *)a5 = v10[0];
    *(_OWORD *)(a5 + 16) = v9;
    double result = *(double *)&v11;
    *(_OWORD *)(a5 + 32) = v11;
    *(void *)(a5 + 48) = v12;
  }
  return result;
}

uint64_t sub_100046260(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = a1[2];
  unint64_t v3 = a1[3];
  uint64_t v5 = a1[4];
  uint64_t v4 = a1[5];
  unint64_t v6 = a1[6];
  uint64_t v7 = a2[2];
  unint64_t v8 = a2[3];
  uint64_t v10 = a2[4];
  uint64_t v9 = a2[5];
  unint64_t v11 = a2[6];
  if ((_s19DPSubmissionService9PPM_0_2_1V3UrlV23__derived_struct_equalsySbAE_AEtFZ_0(*a1, a1[1], *a2, a2[1]) & 1) == 0
    || (_s19DPSubmissionService9PPM_0_2_1V3UrlV23__derived_struct_equalsySbAE_AEtFZ_0(v2, v3, v7, v8) & 1) == 0
    || v5 != v10)
  {
    return 0;
  }
  return _s19DPSubmissionService9PPM_0_2_1V3UrlV23__derived_struct_equalsySbAE_AEtFZ_0(v4, v6, v9, v11);
}

uint64_t sub_10004632C@<X0>(uint64_t __s1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, char *a4@<X8>)
{
  uint64_t v7 = (const void *)__s1;
  switch(a3 >> 62)
  {
    case 1uLL:
      uint64_t v9 = (a2 >> 32) - (int)a2;
      if (a2 >> 32 < (int)a2)
      {
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
      sub_100016E5C(a2, a3);
      uint64_t v10 = (char *)sub_100058CB0();
      if (!v10) {
        goto LABEL_8;
      }
      uint64_t v11 = sub_100058CD0();
      if (__OFSUB__((int)a2, v11)) {
LABEL_33:
      }
        __break(1u);
      v10 += (int)a2 - v11;
LABEL_8:
      uint64_t v12 = sub_100058CC0();
      if (v12 >= v9) {
        size_t v13 = (a2 >> 32) - (int)a2;
      }
      else {
        size_t v13 = v12;
      }
      if (!v7)
      {
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        JUMPOUT(0x100046590);
      }
      if (!v10) {
        goto LABEL_36;
      }
      int v14 = memcmp(v7, v10, v13);
      uint64_t __s1 = sub_100016B2C(a2, a3);
      BOOL v8 = v14 == 0;
LABEL_24:
      char v24 = v8;
LABEL_29:
      *a4 = v24;
      return __s1;
    case 2uLL:
      uint64_t v15 = *(void *)(a2 + 16);
      uint64_t v16 = *(void *)(a2 + 24);
      swift_retain();
      swift_retain();
      uint64_t v17 = (char *)sub_100058CB0();
      if (!v17) {
        goto LABEL_17;
      }
      uint64_t v18 = sub_100058CD0();
      if (__OFSUB__(v15, v18)) {
        goto LABEL_32;
      }
      v17 += v15 - v18;
LABEL_17:
      BOOL v19 = __OFSUB__(v16, v15);
      int64_t v20 = v16 - v15;
      if (v19) {
        goto LABEL_31;
      }
      uint64_t v21 = sub_100058CC0();
      if (v21 >= v20) {
        size_t v22 = v20;
      }
      else {
        size_t v22 = v21;
      }
      if (!v7) {
        goto LABEL_37;
      }
      if (!v17) {
        goto LABEL_38;
      }
      int v23 = memcmp(v7, v17, v22);
      swift_release();
      uint64_t __s1 = swift_release();
      BOOL v8 = v23 == 0;
      goto LABEL_24;
    case 3uLL:
      if (!__s1) {
        goto LABEL_39;
      }
      char v24 = 1;
      goto LABEL_29;
    default:
      uint64_t __s2 = a2;
      __int16 v26 = a3;
      char v27 = BYTE2(a3);
      char v28 = BYTE3(a3);
      char v29 = BYTE4(a3);
      char v30 = BYTE5(a3);
      if (__s1)
      {
        uint64_t __s1 = memcmp((const void *)__s1, &__s2, BYTE6(a3));
        BOOL v8 = __s1 == 0;
        goto LABEL_24;
      }
      __break(1u);
      goto LABEL_35;
  }
}

unint64_t sub_1000465A0(uint64_t a1)
{
  return sub_100046708(a1, &qword_1000824D8, (uint64_t (*)(void))sub_10001B6FC);
}

unint64_t sub_1000465C0(uint64_t a1)
{
  return sub_100046708(a1, &qword_1000824E8, (uint64_t (*)(void))sub_10001B6FC);
}

unint64_t sub_1000465E0(uint64_t a1)
{
  return sub_100046708(a1, &qword_1000824F8, (uint64_t (*)(void))sub_10001B6FC);
}

unint64_t sub_100046600(uint64_t a1)
{
  return sub_100046708(a1, &qword_1000824F0, (uint64_t (*)(void))sub_10001B6FC);
}

unint64_t sub_100046620(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100016C98(&qword_1000824D0);
    uint64_t v3 = sub_1000593C0();
    for (i = (uint64_t *)(a1 + 32); ; ++i)
    {
      uint64_t v5 = *i;
      unint64_t result = sub_10001C1E8();
      if (v7) {
        break;
      }
      *(void *)(v3 + 64 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
      *(void *)(*(void *)(v3 + 56) + 8 * result) = v5;
      uint64_t v8 = *(void *)(v3 + 16);
      BOOL v9 = __OFADD__(v8, 1);
      uint64_t v10 = v8 + 1;
      if (v9) {
        goto LABEL_10;
      }
      *(void *)(v3 + 16) = v10;
      if (!--v1) {
        return v3;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  return result;
}

unint64_t sub_1000466E8(uint64_t a1)
{
  return sub_100046708(a1, &qword_1000824E0, (uint64_t (*)(void))sub_10001B6FC);
}

unint64_t sub_100046708(uint64_t a1, uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    sub_100016C98(a2);
    unint64_t v6 = (void *)sub_1000593C0();
    for (i = (void *)(a1 + 36); ; i = (void *)((char *)i + 12))
    {
      unsigned __int8 v8 = *((unsigned char *)i - 4);
      uint64_t v9 = *i;
      unint64_t result = a3(v8);
      if (v11) {
        break;
      }
      *(void *)((char *)v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(unsigned char *)(v6[6] + result) = v8;
      *(void *)(v6[7] + 8 * result) = v9;
      uint64_t v12 = v6[2];
      BOOL v13 = __OFADD__(v12, 1);
      uint64_t v14 = v12 + 1;
      if (v13) {
        goto LABEL_10;
      }
      uint64_t v6[2] = v14;
      if (!--v3) {
        return (unint64_t)v6;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  return result;
}

uint64_t _s19DPSubmissionService9PPM_0_2_1V6ReportV23__derived_struct_equalsySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = _s19DPSubmissionService9PPM_0_2_1V3UrlV23__derived_struct_equalsySbAE_AEtFZ_0(*(void *)a1, *(void *)(a1 + 8), *(void *)a2, *(void *)(a2 + 8));
  uint64_t result = 0;
  if ((v6 & 1) != 0 && v4 == v5)
  {
    if ((_s19DPSubmissionService9PPM_0_2_1V3UrlV23__derived_struct_equalsySbAE_AEtFZ_0(*(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a2 + 24), *(void *)(a2 + 32)) & 1) == 0)return 0; {
    if (*(unsigned __int8 *)(a1 + 40) != *(unsigned __int8 *)(a2 + 40))
    }
      return 0;
    uint64_t v8 = *(void *)(a1 + 64);
    unint64_t v9 = *(void *)(a1 + 72);
    uint64_t v10 = *(void *)(a2 + 64);
    unint64_t v11 = *(void *)(a2 + 72);
    if ((_s19DPSubmissionService9PPM_0_2_1V3UrlV23__derived_struct_equalsySbAE_AEtFZ_0(*(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a2 + 48), *(void *)(a2 + 56)) & 1) == 0)return 0; {
    if ((_s19DPSubmissionService9PPM_0_2_1V3UrlV23__derived_struct_equalsySbAE_AEtFZ_0(v8, v9, v10, v11) & 1) != 0
    }
      && *(unsigned __int8 *)(a1 + 80) == *(unsigned __int8 *)(a2 + 80)
      && (uint64_t v12 = *(void *)(a1 + 104),
          unint64_t v13 = *(void *)(a1 + 112),
          uint64_t v14 = *(void *)(a2 + 104),
          unint64_t v15 = *(void *)(a2 + 112),
          (_s19DPSubmissionService9PPM_0_2_1V3UrlV23__derived_struct_equalsySbAE_AEtFZ_0(*(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a2 + 88), *(void *)(a2 + 96)) & 1) != 0)&& (_s19DPSubmissionService9PPM_0_2_1V3UrlV23__derived_struct_equalsySbAE_AEtFZ_0(v12, v13, v14, v15) & 1) != 0)
    {
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1000468E4()
{
  long long v31 = *v0;
  long long v32 = v31;
  sub_1000251C8((uint64_t)&v32, (uint64_t)v33);
  sub_1000251C8((uint64_t)v33, (uint64_t)&v34);
  unsigned __int8 v2 = BYTE6(v35);
  unint64_t v3 = 0;
  switch(v35 >> 62)
  {
    case 1uLL:
      v35 &= 0x3FFFFFFFFFFFFFFFuLL;
      if (__OFSUB__(HIDWORD(v34), v34)) {
        goto LABEL_30;
      }
      unint64_t v3 = HIDWORD(v34) - (int)v34;
LABEL_6:
      sub_100025224((uint64_t)&v31);
LABEL_7:
      sub_10003B748(v3, 0x2000000020uLL);
      if (!v1)
      {
        uint64_t v6 = sub_10003B948(0x2000000020);
        sub_100025254((uint64_t)&v31);
        unint64_t v7 = v3 + v6;
        if (!__OFADD__(v3, v6))
        {
          long long v26 = v0[1];
          uint64_t v27 = *((void *)v0 + 4);
          long long v28 = v26;
          long long v29 = v26;
          sub_1000251C8((uint64_t)&v29, (uint64_t)v30);
          sub_1000251C8((uint64_t)v30, (uint64_t)&v36);
          unsigned __int8 v8 = BYTE6(v37);
          unint64_t v9 = 0;
          switch(v37 >> 62)
          {
            case 1uLL:
              v37 &= 0x3FFFFFFFFFFFFFFFuLL;
              if (__OFSUB__(HIDWORD(v36), v36)) {
                goto LABEL_35;
              }
              unint64_t v9 = HIDWORD(v36) - (int)v36;
LABEL_15:
              sub_100025224((uint64_t)&v28);
LABEL_16:
              sub_10003B748(v9, 0x1000000010uLL);
              uint64_t v12 = sub_10003B948(0x1000000010);
              sub_100025254((uint64_t)&v26);
              unint64_t v13 = v9 + v12;
              if (__OFADD__(v9, v12)) {
                goto LABEL_32;
              }
              BOOL v14 = __OFADD__(v13, 8);
              unint64_t v15 = v13 + 8;
              if (v14) {
                goto LABEL_33;
              }
              unint64_t v16 = v7 + v15;
              if (__OFADD__(v7, v15)) {
                goto LABEL_34;
              }
              long long v24 = *(long long *)((char *)v0 + 40);
              sub_1000251C8((uint64_t)&v24, (uint64_t)v25);
              sub_1000251C8((uint64_t)v25, (uint64_t)&v38);
              unsigned __int8 v17 = BYTE6(v39);
              unint64_t v18 = 0;
              switch(v39 >> 62)
              {
                case 1uLL:
                  v39 &= 0x3FFFFFFFFFFFFFFFuLL;
                  if (__OFSUB__(HIDWORD(v38), v38)) {
                    goto LABEL_38;
                  }
                  unint64_t v18 = HIDWORD(v38) - (int)v38;
LABEL_24:
                  sub_100025224((uint64_t)&v24);
LABEL_25:
                  sub_10003B748(v18, 0xFFFFFFFF00000000);
                  uint64_t v22 = sub_10003B948(0xFFFFFFFF00000000);
                  sub_100025254((uint64_t)&v24);
                  unint64_t v23 = v18 + v22;
                  if (__OFADD__(v18, v22)) {
                    goto LABEL_37;
                  }
                  uint64_t result = v16 + v23;
                  if (!__OFADD__(v16, v23)) {
                    return result;
                  }
                  __break(1u);
                  break;
                case 2uLL:
                  v39 &= 0x3FFFFFFFFFFFFFFFuLL;
                  uint64_t v19 = *(void *)(v38 + 16);
                  uint64_t v20 = *(void *)(v38 + 24);
                  unint64_t v18 = v20 - v19;
                  if (!__OFSUB__(v20, v19)) {
                    goto LABEL_24;
                  }
                  goto LABEL_39;
                case 3uLL:
                  goto LABEL_25;
                default:
                  v39 &= 0x3FFFFFFFFFFFFFFFuLL;
                  unint64_t v18 = v17;
                  goto LABEL_25;
              }
              break;
            case 2uLL:
              v37 &= 0x3FFFFFFFFFFFFFFFuLL;
              uint64_t v10 = *(void *)(v36 + 16);
              uint64_t v11 = *(void *)(v36 + 24);
              unint64_t v9 = v11 - v10;
              if (!__OFSUB__(v11, v10)) {
                goto LABEL_15;
              }
              goto LABEL_36;
            case 3uLL:
              goto LABEL_16;
            default:
              v37 &= 0x3FFFFFFFFFFFFFFFuLL;
              unint64_t v9 = v8;
              goto LABEL_16;
          }
        }
        __break(1u);
LABEL_30:
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        JUMPOUT(0x100046BF0);
      }
      return sub_100025254((uint64_t)&v31);
    case 2uLL:
      v35 &= 0x3FFFFFFFFFFFFFFFuLL;
      uint64_t v4 = *(void *)(v34 + 16);
      uint64_t v5 = *(void *)(v34 + 24);
      unint64_t v3 = v5 - v4;
      if (!__OFSUB__(v5, v4)) {
        goto LABEL_6;
      }
      goto LABEL_31;
    case 3uLL:
      goto LABEL_7;
    default:
      v35 &= 0x3FFFFFFFFFFFFFFFuLL;
      unint64_t v3 = v2;
      goto LABEL_7;
  }
}

uint64_t sub_100046C20()
{
  long long v18 = *(_OWORD *)(v0 + 8);
  sub_1000251C8((uint64_t)&v18, (uint64_t)v19);
  sub_1000251C8((uint64_t)v19, (uint64_t)&v20);
  unsigned __int8 v2 = BYTE6(v21);
  unint64_t v3 = 0;
  switch(v21 >> 62)
  {
    case 1uLL:
      v21 &= 0x3FFFFFFFFFFFFFFFuLL;
      if (__OFSUB__(HIDWORD(v20), v20)) {
        goto LABEL_23;
      }
      unint64_t v3 = HIDWORD(v20) - (int)v20;
LABEL_6:
      sub_100025224((uint64_t)&v18);
LABEL_7:
      sub_10003B748(v3, 0xFFFF00000001uLL);
      if (!v1)
      {
        uint64_t v6 = sub_10003B948(0xFFFF00000001);
        sub_100025254((uint64_t)&v18);
        unint64_t v7 = v3 + v6;
        if (!__OFADD__(v3, v6))
        {
          unint64_t v8 = v7 + 1;
          if (__OFADD__(v7, 1))
          {
LABEL_22:
            __break(1u);
LABEL_23:
            __break(1u);
LABEL_24:
            __break(1u);
LABEL_25:
            __break(1u);
LABEL_26:
            __break(1u);
LABEL_27:
            __break(1u);
            JUMPOUT(0x100046E34);
          }
          long long v16 = *(_OWORD *)(v0 + 24);
          sub_1000251C8((uint64_t)&v16, (uint64_t)v17);
          sub_1000251C8((uint64_t)v17, (uint64_t)&v22);
          unsigned __int8 v9 = BYTE6(v23);
          unint64_t v10 = 0;
          switch(v23 >> 62)
          {
            case 1uLL:
              v23 &= 0x3FFFFFFFFFFFFFFFuLL;
              if (__OFSUB__(HIDWORD(v22), v22)) {
                goto LABEL_26;
              }
              unint64_t v10 = HIDWORD(v22) - (int)v22;
LABEL_16:
              sub_100025224((uint64_t)&v16);
LABEL_17:
              sub_10003B748(v10, 0xFFFFFFFF00000001);
              uint64_t v14 = sub_10003B948(0xFFFFFFFF00000001);
              sub_100025254((uint64_t)&v16);
              unint64_t v15 = v10 + v14;
              if (__OFADD__(v10, v14)) {
                goto LABEL_25;
              }
              uint64_t result = v8 + v15;
              if (!__OFADD__(v8, v15)) {
                return result;
              }
              __break(1u);
              break;
            case 2uLL:
              v23 &= 0x3FFFFFFFFFFFFFFFuLL;
              uint64_t v11 = *(void *)(v22 + 16);
              uint64_t v12 = *(void *)(v22 + 24);
              unint64_t v10 = v12 - v11;
              if (!__OFSUB__(v12, v11)) {
                goto LABEL_16;
              }
              goto LABEL_27;
            case 3uLL:
              goto LABEL_17;
            default:
              v23 &= 0x3FFFFFFFFFFFFFFFuLL;
              unint64_t v10 = v9;
              goto LABEL_17;
          }
        }
        __break(1u);
        goto LABEL_22;
      }
      return sub_100025254((uint64_t)&v18);
    case 2uLL:
      v21 &= 0x3FFFFFFFFFFFFFFFuLL;
      uint64_t v4 = *(void *)(v20 + 16);
      uint64_t v5 = *(void *)(v20 + 24);
      unint64_t v3 = v5 - v4;
      if (!__OFSUB__(v5, v4)) {
        goto LABEL_6;
      }
      goto LABEL_24;
    case 3uLL:
      goto LABEL_7;
    default:
      v21 &= 0x3FFFFFFFFFFFFFFFuLL;
      unint64_t v3 = v2;
      goto LABEL_7;
  }
}

uint64_t sub_100046E54()
{
  unsigned __int8 v2 = v0;
  long long v24 = *v0;
  uint64_t v25 = *((void *)v0 + 2);
  long long v26 = v24;
  long long v27 = v24;
  sub_1000251C8((uint64_t)&v27, (uint64_t)v28);
  sub_1000251C8((uint64_t)v28, (uint64_t)&v29);
  unsigned __int8 v3 = BYTE6(v30);
  unint64_t v4 = 0;
  switch(v30 >> 62)
  {
    case 1uLL:
      v30 &= 0x3FFFFFFFFFFFFFFFuLL;
      if (__OFSUB__(HIDWORD(v29), v29)) {
        goto LABEL_25;
      }
      unint64_t v4 = HIDWORD(v29) - (int)v29;
LABEL_6:
      sub_100025224((uint64_t)&v26);
LABEL_7:
      sub_10003B748(v4, 0x1000000010uLL);
      if (!v1)
      {
        uint64_t v7 = sub_10003B948(0x1000000010);
        sub_100025254((uint64_t)&v24);
        unint64_t v8 = v4 + v7;
        if (!__OFADD__(v4, v7))
        {
          unint64_t v9 = v8 + 8;
          if (__OFADD__(v8, 8))
          {
LABEL_24:
            __break(1u);
LABEL_25:
            __break(1u);
LABEL_26:
            __break(1u);
LABEL_27:
            __break(1u);
LABEL_28:
            __break(1u);
LABEL_29:
            __break(1u);
LABEL_30:
            __break(1u);
LABEL_31:
            __break(1u);
            JUMPOUT(0x1000470DCLL);
          }
          long long v22 = *(long long *)((char *)v2 + 24);
          sub_1000251C8((uint64_t)&v22, (uint64_t)v23);
          sub_1000251C8((uint64_t)v23, (uint64_t)&v31);
          unsigned __int8 v10 = BYTE6(v32);
          unint64_t v11 = 0;
          switch(v32 >> 62)
          {
            case 1uLL:
              v32 &= 0x3FFFFFFFFFFFFFFFuLL;
              if (__OFSUB__(HIDWORD(v31), v31)) {
                goto LABEL_29;
              }
              unint64_t v11 = HIDWORD(v31) - (int)v31;
LABEL_16:
              sub_100025224((uint64_t)&v22);
LABEL_17:
              sub_10003B748(v11, 0xFFFFFFFF00000000);
              uint64_t v15 = sub_10003B948(0xFFFFFFFF00000000);
              sub_100025254((uint64_t)&v22);
              unint64_t v16 = v11 + v15;
              if (__OFADD__(v11, v15)) {
                goto LABEL_27;
              }
              unint64_t v17 = v9 + v16;
              if (__OFADD__(v9, v16)) {
                goto LABEL_28;
              }
              uint64_t v18 = sub_100046C20();
              BOOL v19 = __OFADD__(v17, v18);
              unint64_t v20 = v17 + v18;
              if (v19) {
                goto LABEL_31;
              }
              uint64_t v21 = sub_100046C20();
              BOOL v19 = __OFADD__(v20, v21);
              uint64_t result = v20 + v21;
              if (!v19) {
                return result;
              }
              __break(1u);
              break;
            case 2uLL:
              v32 &= 0x3FFFFFFFFFFFFFFFuLL;
              uint64_t v12 = *(void *)(v31 + 16);
              uint64_t v13 = *(void *)(v31 + 24);
              unint64_t v11 = v13 - v12;
              if (!__OFSUB__(v13, v12)) {
                goto LABEL_16;
              }
              goto LABEL_30;
            case 3uLL:
              goto LABEL_17;
            default:
              v32 &= 0x3FFFFFFFFFFFFFFFuLL;
              unint64_t v11 = v10;
              goto LABEL_17;
          }
        }
        __break(1u);
        goto LABEL_24;
      }
      return sub_100025254((uint64_t)&v24);
    case 2uLL:
      v30 &= 0x3FFFFFFFFFFFFFFFuLL;
      uint64_t v5 = *(void *)(v29 + 16);
      uint64_t v6 = *(void *)(v29 + 24);
      unint64_t v4 = v6 - v5;
      if (!__OFSUB__(v6, v5)) {
        goto LABEL_6;
      }
      goto LABEL_26;
    case 3uLL:
      goto LABEL_7;
    default:
      v30 &= 0x3FFFFFFFFFFFFFFFuLL;
      unint64_t v4 = v3;
      goto LABEL_7;
  }
}

uint64_t sub_1000470FC(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = 0;
  switch(a3 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a2), a2)) {
        goto LABEL_14;
      }
      unint64_t v6 = HIDWORD(a2) - (int)a2;
LABEL_6:
      sub_100016E5C(a2, a3);
LABEL_7:
      sub_10003B748(v6, 0xFFFF00000001uLL);
      if (v3) {
        return sub_100016B2C(a2, a3);
      }
      uint64_t v10 = sub_10003B948(0xFFFF00000001);
      sub_100016B2C(a2, a3);
      unint64_t v11 = v6 + v10;
      if (__OFADD__(v6, v10))
      {
        __break(1u);
        goto LABEL_13;
      }
      uint64_t result = v11 + 7;
      if (__OFADD__(v11, 7))
      {
LABEL_13:
        __break(1u);
LABEL_14:
        __break(1u);
LABEL_15:
        __break(1u);
        JUMPOUT(0x1000471FCLL);
      }
      return result;
    case 2uLL:
      uint64_t v8 = *(void *)(a2 + 16);
      uint64_t v7 = *(void *)(a2 + 24);
      unint64_t v6 = v7 - v8;
      if (!__OFSUB__(v7, v8)) {
        goto LABEL_6;
      }
      goto LABEL_15;
    case 3uLL:
      goto LABEL_7;
    default:
      unint64_t v6 = BYTE6(a3);
      goto LABEL_7;
  }
}

uint64_t sub_10004720C(uint64_t a1, unint64_t a2)
{
  unint64_t v5 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_12;
      }
      unint64_t v5 = HIDWORD(a1) - (int)a1;
LABEL_6:
      sub_100016E5C(a1, a2);
LABEL_7:
      sub_10003B748(v5, 0xFFFF00000001uLL);
      if (v2) {
        return sub_100016B2C(a1, a2);
      }
      uint64_t v9 = sub_10003B948(0xFFFF00000001);
      sub_100016B2C(a1, a2);
      uint64_t result = v5 + v9;
      if (__OFADD__(v5, v9))
      {
        __break(1u);
LABEL_12:
        __break(1u);
LABEL_13:
        __break(1u);
        JUMPOUT(0x100047300);
      }
      return result;
    case 2uLL:
      uint64_t v7 = *(void *)(a1 + 16);
      uint64_t v6 = *(void *)(a1 + 24);
      unint64_t v5 = v6 - v7;
      if (!__OFSUB__(v6, v7)) {
        goto LABEL_6;
      }
      goto LABEL_13;
    case 3uLL:
      goto LABEL_7;
    default:
      unint64_t v5 = BYTE6(a2);
      goto LABEL_7;
  }
}

uint64_t sub_100047310(uint64_t a1, unint64_t a2)
{
  unint64_t v5 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_14;
      }
      unint64_t v5 = HIDWORD(a1) - (int)a1;
LABEL_6:
      sub_100016E5C(a1, a2);
LABEL_7:
      sub_10003B748(v5, 0x1000000010uLL);
      if (v2) {
        return sub_100016B2C(a1, a2);
      }
      uint64_t v9 = sub_10003B948(0x1000000010);
      sub_100016B2C(a1, a2);
      unint64_t v10 = v5 + v9;
      if (__OFADD__(v5, v9))
      {
        __break(1u);
        goto LABEL_13;
      }
      uint64_t result = v10 + 8;
      if (__OFADD__(v10, 8))
      {
LABEL_13:
        __break(1u);
LABEL_14:
        __break(1u);
LABEL_15:
        __break(1u);
        JUMPOUT(0x100047408);
      }
      return result;
    case 2uLL:
      uint64_t v7 = *(void *)(a1 + 16);
      uint64_t v6 = *(void *)(a1 + 24);
      unint64_t v5 = v6 - v7;
      if (!__OFSUB__(v6, v7)) {
        goto LABEL_6;
      }
      goto LABEL_15;
    case 3uLL:
      goto LABEL_7;
    default:
      unint64_t v5 = BYTE6(a2);
      goto LABEL_7;
  }
}

uint64_t sub_100047418(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = 0;
  switch(a3 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a2), a2)) {
        goto LABEL_14;
      }
      unint64_t v6 = HIDWORD(a2) - (int)a2;
LABEL_6:
      sub_100016E5C(a2, a3);
LABEL_7:
      sub_10003B748(v6, 0xFFFF00000000uLL);
      if (v3) {
        return sub_100016B2C(a2, a3);
      }
      uint64_t v10 = sub_10003B948(0xFFFF00000000);
      sub_100016B2C(a2, a3);
      unint64_t v11 = v6 + v10;
      if (__OFADD__(v6, v10))
      {
        __break(1u);
        goto LABEL_13;
      }
      uint64_t result = v11 + 2;
      if (__OFADD__(v11, 2))
      {
LABEL_13:
        __break(1u);
LABEL_14:
        __break(1u);
LABEL_15:
        __break(1u);
        JUMPOUT(0x100047510);
      }
      return result;
    case 2uLL:
      uint64_t v8 = *(void *)(a2 + 16);
      uint64_t v7 = *(void *)(a2 + 24);
      unint64_t v6 = v7 - v8;
      if (!__OFSUB__(v7, v8)) {
        goto LABEL_6;
      }
      goto LABEL_15;
    case 3uLL:
      goto LABEL_7;
    default:
      unint64_t v6 = BYTE6(a3);
      goto LABEL_7;
  }
}

unint64_t sub_100047520(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return RangeReplaceableCollection<>.encode<A>(into:with:)(a1, 0xFFFF00000001uLL, 1, (uint64_t)&type metadata for Data, a4);
}

unint64_t sub_10004759C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v12 = sub_100022CA4();
  unint64_t result = sub_1000223EC(a1, (uint64_t)&type metadata for UInt8, a5, v12, a6);
  if (!v6)
  {
    unint64_t v14 = sub_100022C50();
    sub_1000223EC(a1, (uint64_t)&type metadata for UInt16, a5, v14, a6);
    sub_1000223EC(a1, (uint64_t)&type metadata for UInt16, a5, v14, a6);
    sub_1000223EC(a1, (uint64_t)&type metadata for UInt16, a5, v14, a6);
    return sub_100047520(a1, a3, a4, a5);
  }
  return result;
}

unint64_t sub_1000476F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t result = sub_100040E3C(a1, a2, a3, a5, a6);
  if (!v6)
  {
    unint64_t v11 = sub_100022BA8();
    return sub_1000223EC(a1, (uint64_t)&type metadata for UInt64, a5, v11, a6);
  }
  return result;
}

unint64_t sub_100047774(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t result = sub_100040E20(a1, *v3, v3[1], a2, a3);
  if (!v4)
  {
    sub_1000476F0(a1, v3[2], v3[3], v3[4], a2, a3);
    sub_100024898();
    return RangeReplaceableCollection<>.encode<A>(into:with:)(a1, 0xFFFFFFFF00000000, 1, (uint64_t)&type metadata for Data, a2);
  }
  return result;
}

unint64_t sub_100047830(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v7 = sub_100022CA4();
  unint64_t result = sub_1000223EC(a1, (uint64_t)&type metadata for UInt8, a2, v7, a3);
  if (!v3)
  {
    sub_100024898();
    RangeReplaceableCollection<>.encode<A>(into:with:)(a1, 0xFFFF00000001uLL, 1, (uint64_t)&type metadata for Data, a2);
    return RangeReplaceableCollection<>.encode<A>(into:with:)(a1, 0xFFFFFFFF00000001, 1, (uint64_t)&type metadata for Data, a2);
  }
  return result;
}

unint64_t sub_10004793C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t result = sub_1000476F0(a1, *v3, v3[1], v3[2], a2, a3);
  if (!v4)
  {
    sub_100024898();
    RangeReplaceableCollection<>.encode<A>(into:with:)(a1, 0xFFFFFFFF00000000, 1, (uint64_t)&type metadata for Data, a2);
    sub_100047830(a1, a2, a3);
    return sub_100047830(a1, a2, a3);
  }
  return result;
}

unint64_t sub_100047A40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v10 = sub_1000351E4();
  unint64_t result = sub_100035128(a1, (uint64_t)&type metadata for PPM_0_2_1.ExtensionType, a5, v10, a6);
  if (!v6)
  {
    sub_100024898();
    return RangeReplaceableCollection<>.encode<A>(into:with:)(a1, 0xFFFF00000000uLL, 1, (uint64_t)&type metadata for Data, a5);
  }
  return result;
}

uint64_t sub_100047B04(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v7 = sub_100024898();
  uint64_t result = RangeReplaceableCollection<>.init<A>(from:with:)(a1, 0xFFFF00000001, 1, (uint64_t)&type metadata for Data, a2, v7, a3);
  if (!v3) {
    return v9;
  }
  return result;
}

unint64_t sub_100047B84()
{
  unint64_t result = qword_100082058;
  if (!qword_100082058)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100082058);
  }
  return result;
}

uint64_t sub_100047BD8(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *sub_100047C10(void *a1)
{
  uint64_t v2 = a1[3];
  unint64_t v3 = a1[4];
  sub_100016B2C(a1[1], a1[2]);
  sub_100016B2C(v2, v3);
  return a1;
}

unint64_t sub_100047C58()
{
  unint64_t result = qword_100082070;
  if (!qword_100082070)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100082070);
  }
  return result;
}

unint64_t sub_100047CAC(uint64_t a1)
{
  unint64_t result = sub_100047CD4();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100047CD4()
{
  unint64_t result = qword_1000820D0;
  if (!qword_1000820D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000820D0);
  }
  return result;
}

unint64_t sub_100047D28(uint64_t a1)
{
  unint64_t result = sub_100047D50();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100047D50()
{
  unint64_t result = qword_100082130;
  if (!qword_100082130)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100082130);
  }
  return result;
}

unint64_t sub_100047DA4(uint64_t a1)
{
  unint64_t result = sub_100047DCC();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100047DCC()
{
  unint64_t result = qword_100082190;
  if (!qword_100082190)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100082190);
  }
  return result;
}

unint64_t sub_100047E20(uint64_t a1)
{
  unint64_t result = sub_100047E48();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100047E48()
{
  unint64_t result = qword_1000821F0;
  if (!qword_1000821F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000821F0);
  }
  return result;
}

unint64_t sub_100047EA0()
{
  unint64_t result = qword_1000821F8;
  if (!qword_1000821F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000821F8);
  }
  return result;
}

uint64_t sub_100047EF4()
{
  return sub_100047F30(&qword_100082200, &qword_100082208);
}

uint64_t sub_100047F30(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10001FB5C(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100047F78()
{
  unint64_t result = qword_100082210;
  if (!qword_100082210)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100082210);
  }
  return result;
}

unint64_t sub_100047FD0()
{
  unint64_t result = qword_100082218;
  if (!qword_100082218)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100082218);
  }
  return result;
}

unint64_t sub_100048024(uint64_t a1)
{
  unint64_t result = sub_10004804C();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10004804C()
{
  unint64_t result = qword_100082280;
  if (!qword_100082280)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100082280);
  }
  return result;
}

unint64_t sub_1000480A0(uint64_t a1)
{
  unint64_t result = sub_1000480C8();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000480C8()
{
  unint64_t result = qword_100082288;
  if (!qword_100082288)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100082288);
  }
  return result;
}

unint64_t sub_10004811C(uint64_t a1)
{
  unint64_t result = sub_100048144();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100048144()
{
  unint64_t result = qword_1000822E8;
  if (!qword_1000822E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000822E8);
  }
  return result;
}

unint64_t sub_100048198(uint64_t a1)
{
  unint64_t result = sub_1000481C0();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000481C0()
{
  unint64_t result = qword_100082348;
  if (!qword_100082348)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100082348);
  }
  return result;
}

unint64_t sub_100048214(uint64_t a1)
{
  unint64_t result = sub_10004823C();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10004823C()
{
  unint64_t result = qword_1000823A8;
  if (!qword_1000823A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000823A8);
  }
  return result;
}

unint64_t sub_100048290(uint64_t a1)
{
  unint64_t result = sub_1000482B8();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000482B8()
{
  unint64_t result = qword_100082408;
  if (!qword_100082408)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100082408);
  }
  return result;
}

unint64_t sub_10004830C(uint64_t a1)
{
  unint64_t result = sub_100048334();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100048334()
{
  unint64_t result = qword_100082468;
  if (!qword_100082468)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100082468);
  }
  return result;
}

unint64_t sub_100048388(uint64_t a1)
{
  unint64_t result = sub_1000483B0();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000483B0()
{
  unint64_t result = qword_1000824C8;
  if (!qword_1000824C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000824C8);
  }
  return result;
}

ValueMetadata *type metadata accessor for PPM_0_2_1.HPKEPublicKey()
{
  return &type metadata for PPM_0_2_1.HPKEPublicKey;
}

uint64_t _s10HPKEConfigVwxx(uint64_t a1)
{
  return sub_100016B2C(*(void *)(a1 + 8), *(void *)(a1 + 16));
}

uint64_t _s10HPKEConfigVwCP_0(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_WORD *)(a1 + 2) = *(_WORD *)(a2 + 2);
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  uint64_t v3 = *(void *)(a2 + 8);
  unint64_t v4 = *(void *)(a2 + 16);
  sub_100016E5C(v3, v4);
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  return a1;
}

uint64_t _s10HPKEConfigVwca(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_WORD *)(a1 + 2) = *(_WORD *)(a2 + 2);
  *(_WORD *)(a1 + 4) = *(_WORD *)(a2 + 4);
  *(_WORD *)(a1 + 6) = *(_WORD *)(a2 + 6);
  uint64_t v3 = *(void *)(a2 + 8);
  unint64_t v4 = *(void *)(a2 + 16);
  sub_100016E5C(v3, v4);
  uint64_t v5 = *(void *)(a1 + 8);
  unint64_t v6 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  sub_100016B2C(v5, v6);
  return a1;
}

__n128 _s10HPKEConfigVwtk(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t _s10HPKEConfigVwta(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_WORD *)(a1 + 2) = *(_WORD *)(a2 + 2);
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  uint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  sub_100016B2C(v3, v4);
  return a1;
}

ValueMetadata *type metadata accessor for PPM_0_2_1.HPKEConfig()
{
  return &type metadata for PPM_0_2_1.HPKEConfig;
}

uint64_t _s10HPKEConfigV15CodingParameterVwCP(uint64_t result, int *a2)
{
  int v2 = *a2;
  *(unsigned char *)(result + 4) = *((unsigned char *)a2 + 4);
  *(_DWORD *)__n128 result = v2;
  return result;
}

uint64_t _s10HPKEConfigV15CodingParameterVwet(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 5)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t _s10HPKEConfigV15CodingParameterVwst(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(unsigned char *)(result + 4) = 0;
    *(_DWORD *)__n128 result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 5) = v3;
  return result;
}

ValueMetadata *type metadata accessor for PPM_0_2_1.HPKEConfig.CodingParameter()
{
  return &type metadata for PPM_0_2_1.HPKEConfig.CodingParameter;
}

ValueMetadata *type metadata accessor for PPM_0_2_1.HPKEConfigList()
{
  return &type metadata for PPM_0_2_1.HPKEConfigList;
}

uint64_t _s14HPKECiphertextVwxx(void *a1)
{
  sub_100016B2C(a1[1], a1[2]);
  uint64_t v2 = a1[3];
  unint64_t v3 = a1[4];
  return sub_100016B2C(v2, v3);
}

uint64_t _s14HPKECiphertextVwcp(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unint64_t v5 = *(void *)(a2 + 16);
  sub_100016E5C(v4, v5);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  uint64_t v7 = *(void *)(a2 + 24);
  unint64_t v6 = *(void *)(a2 + 32);
  sub_100016E5C(v7, v6);
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v6;
  return a1;
}

uint64_t _s14HPKECiphertextVwca(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unint64_t v5 = *(void *)(a2 + 16);
  sub_100016E5C(v4, v5);
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  sub_100016B2C(v6, v7);
  uint64_t v9 = *(void *)(a2 + 24);
  unint64_t v8 = *(void *)(a2 + 32);
  sub_100016E5C(v9, v8);
  uint64_t v10 = *(void *)(a1 + 24);
  unint64_t v11 = *(void *)(a1 + 32);
  *(void *)(a1 + 24) = v9;
  *(void *)(a1 + 32) = v8;
  sub_100016B2C(v10, v11);
  return a1;
}

__n128 _s14HPKECiphertextVwtk(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t _s14HPKECiphertextVwta(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = *(void *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  sub_100016B2C(v4, v5);
  uint64_t v6 = *(void *)(a1 + 24);
  unint64_t v7 = *(void *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  sub_100016B2C(v6, v7);
  return a1;
}

uint64_t _s14HPKECiphertextVwet(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xD && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 16) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 16) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t _s14HPKECiphertextVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 - 13;
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 40) = 0;
    }
    if (a2)
    {
      *(void *)(result + 8) = 0;
      *(void *)(result + 16) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PPM_0_2_1.HPKECiphertext()
{
  return &type metadata for PPM_0_2_1.HPKECiphertext;
}

ValueMetadata *type metadata accessor for PPM_0_2_1.HPKECiphertext.CodingParameter()
{
  return &type metadata for PPM_0_2_1.HPKECiphertext.CodingParameter;
}

ValueMetadata *type metadata accessor for PPM_0_2_1.ExtensionType()
{
  return &type metadata for PPM_0_2_1.ExtensionType;
}

uint64_t _s13ExtensionTypeV9EnumValueOwet(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *_s13ExtensionTypeV9EnumValueOwst(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *__n128 result = a2;
        return result;
      case 2:
        *(_WORD *)__n128 result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)__n128 result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *__n128 result = 0;
      break;
    case 2:
      *(_WORD *)__n128 result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100048928);
    case 4:
      *(_DWORD *)__n128 result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for PPM_0_2_1.ExtensionType.EnumValue()
{
  return &type metadata for PPM_0_2_1.ExtensionType.EnumValue;
}

uint64_t sub_100048964(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  unint64_t v4 = *(void *)(a2 + 16);
  sub_100016E5C(v3, v4);
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  return a1;
}

uint64_t _s9ExtensionVwca(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  unint64_t v4 = *(void *)(a2 + 16);
  sub_100016E5C(v3, v4);
  uint64_t v5 = *(void *)(a1 + 8);
  unint64_t v6 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  sub_100016B2C(v5, v6);
  return a1;
}

uint64_t _s9ExtensionVwta(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  sub_100016B2C(v3, v4);
  return a1;
}

uint64_t _s10HPKEConfigVwet_0(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xD && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 16) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 16) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t _s10HPKEConfigVwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 13;
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2)
    {
      *(void *)(result + 8) = 0;
      *(void *)(result + 16) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PPM_0_2_1.Extension()
{
  return &type metadata for PPM_0_2_1.Extension;
}

ValueMetadata *type metadata accessor for PPM_0_2_1.Extension.CodingParameter()
{
  return &type metadata for PPM_0_2_1.Extension.CodingParameter;
}

uint64_t *sub_100048B08(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_100016E5C(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  a1[2] = a2[2];
  return a1;
}

uint64_t *_s14ReportMetadataVwca(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_100016E5C(*a2, v5);
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_100016B2C(v6, v7);
  a1[2] = a2[2];
  return a1;
}

uint64_t *_s14ReportMetadataVwta(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_100016B2C(v4, v5);
  a1[2] = *(void *)(a2 + 16);
  return a1;
}

uint64_t _s14ReportMetadataVwet(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xD && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t _s14ReportMetadataVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 13;
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2)
    {
      *(void *)__n128 result = 0;
      *(void *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PPM_0_2_1.ReportMetadata()
{
  return &type metadata for PPM_0_2_1.ReportMetadata;
}

ValueMetadata *type metadata accessor for PPM_0_2_1.ReportMetadata.CodingParameter()
{
  return &type metadata for PPM_0_2_1.ReportMetadata.CodingParameter;
}

uint64_t _s6ReportVwxx(uint64_t *a1)
{
  sub_100016B2C(*a1, a1[1]);
  sub_100016B2C(a1[3], a1[4]);
  sub_100016B2C(a1[6], a1[7]);
  sub_100016B2C(a1[8], a1[9]);
  sub_100016B2C(a1[11], a1[12]);
  uint64_t v2 = a1[13];
  unint64_t v3 = a1[14];
  return sub_100016B2C(v2, v3);
}

uint64_t _s6ReportVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  sub_100016E5C(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  unint64_t v7 = *(void *)(a2 + 32);
  sub_100016E5C(v6, v7);
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v8 = *(void *)(a2 + 48);
  unint64_t v9 = *(void *)(a2 + 56);
  sub_100016E5C(v8, v9);
  *(void *)(a1 + 48) = v8;
  *(void *)(a1 + 56) = v9;
  uint64_t v10 = *(void *)(a2 + 64);
  unint64_t v11 = *(void *)(a2 + 72);
  sub_100016E5C(v10, v11);
  *(void *)(a1 + 64) = v10;
  *(void *)(a1 + 72) = v11;
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  uint64_t v12 = *(void *)(a2 + 88);
  unint64_t v13 = *(void *)(a2 + 96);
  sub_100016E5C(v12, v13);
  *(void *)(a1 + 88) = v12;
  *(void *)(a1 + 96) = v13;
  uint64_t v15 = *(void *)(a2 + 104);
  unint64_t v14 = *(void *)(a2 + 112);
  sub_100016E5C(v15, v14);
  *(void *)(a1 + 104) = v15;
  *(void *)(a1 + 112) = v14;
  return a1;
}

uint64_t _s6ReportVwca(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  sub_100016E5C(*(void *)a2, v5);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  sub_100016B2C(v6, v7);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 24);
  unint64_t v9 = *(void *)(a2 + 32);
  sub_100016E5C(v8, v9);
  uint64_t v10 = *(void *)(a1 + 24);
  unint64_t v11 = *(void *)(a1 + 32);
  *(void *)(a1 + 24) = v8;
  *(void *)(a1 + 32) = v9;
  sub_100016B2C(v10, v11);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v12 = *(void *)(a2 + 48);
  unint64_t v13 = *(void *)(a2 + 56);
  sub_100016E5C(v12, v13);
  uint64_t v14 = *(void *)(a1 + 48);
  unint64_t v15 = *(void *)(a1 + 56);
  *(void *)(a1 + 48) = v12;
  *(void *)(a1 + 56) = v13;
  sub_100016B2C(v14, v15);
  uint64_t v16 = *(void *)(a2 + 64);
  unint64_t v17 = *(void *)(a2 + 72);
  sub_100016E5C(v16, v17);
  uint64_t v18 = *(void *)(a1 + 64);
  unint64_t v19 = *(void *)(a1 + 72);
  *(void *)(a1 + 64) = v16;
  *(void *)(a1 + 72) = v17;
  sub_100016B2C(v18, v19);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  uint64_t v20 = *(void *)(a2 + 88);
  unint64_t v21 = *(void *)(a2 + 96);
  sub_100016E5C(v20, v21);
  uint64_t v22 = *(void *)(a1 + 88);
  unint64_t v23 = *(void *)(a1 + 96);
  *(void *)(a1 + 88) = v20;
  *(void *)(a1 + 96) = v21;
  sub_100016B2C(v22, v23);
  uint64_t v25 = *(void *)(a2 + 104);
  unint64_t v24 = *(void *)(a2 + 112);
  sub_100016E5C(v25, v24);
  uint64_t v26 = *(void *)(a1 + 104);
  unint64_t v27 = *(void *)(a1 + 112);
  *(void *)(a1 + 104) = v25;
  *(void *)(a1 + 112) = v24;
  sub_100016B2C(v26, v27);
  return a1;
}

__n128 _s6ReportVwtk(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  long long v6 = a2[5];
  long long v7 = a2[6];
  *(void *)(a1 + 112) = *((void *)a2 + 14);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t _s6ReportVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_100016B2C(v4, v5);
  uint64_t v6 = *(void *)(a2 + 32);
  uint64_t v7 = *(void *)(a1 + 24);
  unint64_t v8 = *(void *)(a1 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = v6;
  sub_100016B2C(v7, v8);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v9 = *(void *)(a1 + 48);
  unint64_t v10 = *(void *)(a1 + 56);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  sub_100016B2C(v9, v10);
  uint64_t v11 = *(void *)(a1 + 64);
  unint64_t v12 = *(void *)(a1 + 72);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  sub_100016B2C(v11, v12);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  uint64_t v13 = *(void *)(a1 + 88);
  unint64_t v14 = *(void *)(a1 + 96);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  sub_100016B2C(v13, v14);
  uint64_t v15 = *(void *)(a1 + 104);
  unint64_t v16 = *(void *)(a1 + 112);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  sub_100016B2C(v15, v16);
  return a1;
}

uint64_t _s6ReportVwet(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xD && *(unsigned char *)(a1 + 120)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t _s6ReportVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 13;
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 120) = 1;
    }
  }
  else
  {
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 120) = 0;
    }
    if (a2)
    {
      *(void *)__n128 result = 0;
      *(void *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PPM_0_2_1.Report()
{
  return &type metadata for PPM_0_2_1.Report;
}

_DWORD *_s6ReportV15CodingParameterVwCP(_DWORD *result, int *a2)
{
  int v2 = *a2;
  *(_DWORD *)((char *)result + 3) = *(int *)((char *)a2 + 3);
  *__n128 result = v2;
  return result;
}

uint64_t _s6ReportV15CodingParameterVwet(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 7)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t _s6ReportV15CodingParameterVwst(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(unsigned char *)(result + 6) = 0;
    *(_WORD *)(result + 4) = 0;
    *(_DWORD *)__n128 result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 7) = v3;
  return result;
}

ValueMetadata *type metadata accessor for PPM_0_2_1.Report.CodingParameter()
{
  return &type metadata for PPM_0_2_1.Report.CodingParameter;
}

uint64_t _s19PlaintextInputShareVwxx(uint64_t a1)
{
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = *(void *)(a1 + 16);
  return sub_100016B2C(v2, v3);
}

void *_s19PlaintextInputShareVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  unint64_t v4 = a2[2];
  swift_bridgeObjectRetain();
  sub_100016E5C(v3, v4);
  a1[1] = v3;
  a1[2] = v4;
  return a1;
}

void *_s19PlaintextInputShareVwca(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[1];
  unint64_t v4 = a2[2];
  sub_100016E5C(v5, v4);
  uint64_t v6 = a1[1];
  unint64_t v7 = a1[2];
  a1[1] = v5;
  a1[2] = v4;
  sub_100016B2C(v6, v7);
  return a1;
}

void *_s19PlaintextInputShareVwta(void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = a1[1];
  unint64_t v5 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  sub_100016B2C(v4, v5);
  return a1;
}

uint64_t _s19PlaintextInputShareVwet(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s19PlaintextInputShareVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PPM_0_2_1.PlaintextInputShare()
{
  return &type metadata for PPM_0_2_1.PlaintextInputShare;
}

uint64_t _s14ReportMetadataV15CodingParameterVwst_0(uint64_t result, int a2, int a3)
{
  if ((a3 + 0xFFFF) <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if ((a3 + 0xFFFF) < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    unsigned int v6 = ((a2 - 1) >> 16) + 1;
    *(_WORD *)__n128 result = a2 - 1;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = v6;
        return result;
      case 2:
        *(_WORD *)(result + 2) = v6;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)(result + 2) = v6;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *(unsigned char *)(result + 2) = 0;
      break;
    case 2:
      *(_WORD *)(result + 2) = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100049360);
    case 4:
      *(_DWORD *)(result + 2) = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for PPM_0_2_1.PlaintextInputShare.CodingParameter()
{
  return &type metadata for PPM_0_2_1.PlaintextInputShare.CodingParameter;
}

uint64_t _s13InputShareAADVwxx(uint64_t *a1)
{
  sub_100016B2C(*a1, a1[1]);
  sub_100016B2C(a1[2], a1[3]);
  uint64_t v2 = a1[5];
  unint64_t v3 = a1[6];
  return sub_100016B2C(v2, v3);
}

uint64_t *_s13InputShareAADVwcp(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_100016E5C(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  uint64_t v6 = a2[2];
  unint64_t v7 = a2[3];
  sub_100016E5C(v6, v7);
  a1[2] = v6;
  a1[3] = v7;
  uint64_t v8 = a2[5];
  a1[4] = a2[4];
  unint64_t v9 = a2[6];
  sub_100016E5C(v8, v9);
  a1[5] = v8;
  a1[6] = v9;
  return a1;
}

uint64_t *_s13InputShareAADVwca(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_100016E5C(*a2, v5);
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_100016B2C(v6, v7);
  uint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  sub_100016E5C(v8, v9);
  uint64_t v10 = a1[2];
  unint64_t v11 = a1[3];
  a1[2] = v8;
  a1[3] = v9;
  sub_100016B2C(v10, v11);
  a1[4] = a2[4];
  uint64_t v13 = a2[5];
  unint64_t v12 = a2[6];
  sub_100016E5C(v13, v12);
  uint64_t v14 = a1[5];
  unint64_t v15 = a1[6];
  a1[5] = v13;
  a1[6] = v12;
  sub_100016B2C(v14, v15);
  return a1;
}

uint64_t _s13InputShareAADVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_100016B2C(v4, v5);
  uint64_t v6 = *(void *)(a1 + 16);
  unint64_t v7 = *(void *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  sub_100016B2C(v6, v7);
  uint64_t v8 = *(void *)(a2 + 48);
  uint64_t v9 = *(void *)(a1 + 40);
  unint64_t v10 = *(void *)(a1 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = v8;
  sub_100016B2C(v9, v10);
  return a1;
}

uint64_t _s13InputShareAADVwet(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xD && *(unsigned char *)(a1 + 56)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t _s13InputShareAADVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 13;
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 56) = 0;
    }
    if (a2)
    {
      *(void *)__n128 result = 0;
      *(void *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PPM_0_2_1.InputShareAAD()
{
  return &type metadata for PPM_0_2_1.InputShareAAD;
}

ValueMetadata *type metadata accessor for PPM_0_2_1.InputShareAAD.CodingParameter()
{
  return &type metadata for PPM_0_2_1.InputShareAAD.CodingParameter;
}

id _DPBAACertificateChain.__allocating_init(intermediateCertificate:leafCertificate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (char *)objc_allocWithZone(v4);
  unint64_t v10 = &v9[OBJC_IVAR____DPBAACertificateChain_intermediateCertificate];
  *(void *)unint64_t v10 = a1;
  *((void *)v10 + 1) = a2;
  unint64_t v11 = &v9[OBJC_IVAR____DPBAACertificateChain_leafCertificate];
  *(void *)unint64_t v11 = a3;
  *((void *)v11 + 1) = a4;
  v13.receiver = v9;
  v13.super_class = v4;
  return objc_msgSendSuper2(&v13, "init");
}

id _DPBAACertificateChain.init(intermediateCertificate:leafCertificate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5 = &v4[OBJC_IVAR____DPBAACertificateChain_intermediateCertificate];
  *(void *)unint64_t v5 = a1;
  *((void *)v5 + 1) = a2;
  uint64_t v6 = &v4[OBJC_IVAR____DPBAACertificateChain_leafCertificate];
  *(void *)uint64_t v6 = a3;
  *((void *)v6 + 1) = a4;
  v8.receiver = v4;
  v8.super_class = (Class)type metadata accessor for _DPBAACertificateChain();
  return objc_msgSendSuper2(&v8, "init");
}

uint64_t type metadata accessor for _DPBAACertificateChain()
{
  return self;
}

uint64_t sub_1000497C4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + OBJC_IVAR____DPBAACertificateChain_intermediateCertificate);
  unint64_t v5 = *(void *)(a2 + OBJC_IVAR____DPBAACertificateChain_intermediateCertificate + 8);
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  sub_100016E5C(v4, v5);
  sub_100016B2C(v6, v7);
  *a1 = v4;
  a1[1] = v5;
  uint64_t v8 = a2 + OBJC_IVAR____DPBAACertificateChain_leafCertificate;
  uint64_t v9 = *(void *)(a2 + OBJC_IVAR____DPBAACertificateChain_leafCertificate);
  unint64_t v10 = *(void *)(v8 + 8);
  uint64_t v11 = a1[2];
  unint64_t v12 = a1[3];
  sub_100016E5C(v9, v10);
  uint64_t result = sub_100016B2C(v11, v12);
  a1[2] = v9;
  a1[3] = v10;
  return result;
}

void _DPBAACertificateChain.init()()
{
}

id _DPBAACertificateChain.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for _DPBAACertificateChain();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t BaaSignedDonation.baaCertificateChain.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for BaaSignedDonation(0) + 28);
  sub_100016F18(v3, &qword_100080B10);
  sub_100049C00(a1, v3, type metadata accessor for BaaCertificateChain);
  uint64_t v4 = type metadata accessor for BaaCertificateChain(0);
  unint64_t v5 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(v3, 0, 1, v4);
}

uint64_t type metadata accessor for BaaSignedDonation(uint64_t a1)
{
  return sub_10005165C(a1, (uint64_t *)&unk_100082798);
}

uint64_t type metadata accessor for BaaCertificateChain(uint64_t a1)
{
  return sub_10005165C(a1, qword_100082838);
}

uint64_t ProtectedDonation.baaSignedDonationEnvelope.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for ProtectedDonation(0) + 20);
  sub_100016F18(v3, &qword_100080B00);
  uint64_t v4 = sub_100058E10();
  uint64_t v7 = *(void *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v3, a1, v4);
  unint64_t v5 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56);
  return v5(v3, 0, 1, v4);
}

uint64_t type metadata accessor for ProtectedDonation(uint64_t a1)
{
  return sub_10005165C(a1, (uint64_t *)&unk_100082700);
}

uint64_t DediscoDonation.algorithmParameters.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for DediscoDonation(0) + 52);
  sub_100016F18(v3, &qword_100081A10);
  sub_100049C00(a1, v3, type metadata accessor for DediscoDonation.AlgorithmParameters);
  uint64_t v4 = type metadata accessor for DediscoDonation.AlgorithmParameters(0);
  unint64_t v5 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(v3, 0, 1, v4);
}

uint64_t type metadata accessor for DediscoDonation(uint64_t a1)
{
  return sub_10005165C(a1, (uint64_t *)&unk_1000828D0);
}

uint64_t sub_100049C00(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for DediscoDonation.AlgorithmParameters(uint64_t a1)
{
  return sub_10005165C(a1, qword_100082988);
}

uint64_t LoadTestExperimentalSetup.parallelism.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*Empty.unknownFields.modify())(void, void, void)
{
  return PPM_0_2_1.QueryType.enumValue.getter;
}

uint64_t LoadTestExperimentalSetup.payloadSize.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 4) = result;
  return result;
}

uint64_t (*LoadTestExperimentalSetup.payloadSize.modify())(void, void, void)
{
  return PPM_0_2_1.QueryType.enumValue.getter;
}

uint64_t LoadTestExperimentalSetup.donations.setter(uint64_t result)
{
  *(_DWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*LoadTestExperimentalSetup.donations.modify())(void, void, void)
{
  return PPM_0_2_1.QueryType.enumValue.getter;
}

uint64_t LoadTestExperimentalSetup.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10004B704(type metadata accessor for LoadTestExperimentalSetup, a1);
}

uint64_t type metadata accessor for LoadTestExperimentalSetup(uint64_t a1)
{
  return sub_10005165C(a1, qword_100082668);
}

uint64_t LoadTestExperimentalSetup.unknownFields.setter(uint64_t a1)
{
  return sub_10004B79C(a1, type metadata accessor for LoadTestExperimentalSetup);
}

uint64_t (*LoadTestExperimentalSetup.unknownFields.modify())(void, void, void)
{
  return PPM_0_2_1.QueryType.enumValue.getter;
}

uint64_t LoadTestExperimentalSetup.init()@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  type metadata accessor for LoadTestExperimentalSetup(0);
  return _s19DPSubmissionService5EmptyVACycfC_0();
}

uint64_t ProtectedDonation.baaSignedDonationEnvelope.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100016C98(&qword_100080B00);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for ProtectedDonation(0);
  sub_10004AD18(v1 + *(int *)(v6 + 20), (uint64_t)v5, &qword_100080B00);
  uint64_t v7 = sub_100058E10();
  uint64_t v8 = *(void *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v7) != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 32))(a1, v5, v7);
  }
  sub_100058E00();
  return sub_100016F18((uint64_t)v5, &qword_100080B00);
}

void (*ProtectedDonation.baaSignedDonationEnvelope.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  void *v3 = v1;
  uint64_t v4 = sub_100016C98(&qword_100080B00);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = sub_100058E10();
  void v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for ProtectedDonation(0) + 20);
  *((_DWORD *)v3 + 12) = v11;
  sub_10004AD18(v1 + v11, (uint64_t)v5, &qword_100080B00);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    sub_100058E00();
    sub_100016F18((uint64_t)v5, &qword_100080B00);
  }
  else
  {
    (*(void (**)(void *, void *, uint64_t))(v8 + 32))(v10, v5, v6);
  }
  return sub_10004A08C;
}

void sub_10004A08C(uint64_t a1, char a2)
{
  objc_super v2 = *(void **)a1;
  uint64_t v3 = *(int *)(*(void *)a1 + 48);
  uint64_t v4 = *(void **)(*(void *)a1 + 32);
  uint64_t v5 = *(void **)(*(void *)a1 + 40);
  uint64_t v6 = *(void *)(*(void *)a1 + 16);
  uint64_t v7 = *(void *)(*(void *)a1 + 24);
  uint64_t v8 = *(void **)(*(void *)a1 + 8);
  uint64_t v9 = **(void **)a1 + v3;
  if (a2)
  {
    (*(void (**)(void, void *, uint64_t))(v7 + 16))(*(void *)(*(void *)a1 + 32), v5, v6);
    sub_100016F18(v9, &qword_100080B00);
    (*(void (**)(uint64_t, void *, uint64_t))(v7 + 32))(v9, v4, v6);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
    (*(void (**)(void *, uint64_t))(v7 + 8))(v5, v6);
  }
  else
  {
    sub_100016F18(**(void **)a1 + v3, &qword_100080B00);
    (*(void (**)(uint64_t, void *, uint64_t))(v7 + 32))(v9, v5, v6);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
  }
  free(v5);
  free(v4);
  free(v8);
  free(v2);
}

BOOL ProtectedDonation.hasBaaSignedDonationEnvelope.getter()
{
  uint64_t v1 = sub_100016C98(&qword_100080B00);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for ProtectedDonation(0);
  sub_10004AD18(v0 + *(int *)(v4 + 20), (uint64_t)v3, &qword_100080B00);
  uint64_t v5 = sub_100058E10();
  BOOL v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  sub_100016F18((uint64_t)v3, &qword_100080B00);
  return v6;
}

Swift::Void __swiftcall ProtectedDonation.clearBaaSignedDonationEnvelope()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for ProtectedDonation(0) + 20);
  sub_100016F18(v1, &qword_100080B00);
  uint64_t v2 = sub_100058E10();
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);
  v3(v1, 1, 1, v2);
}

uint64_t ProtectedDonation.init()@<X0>(uint64_t a1@<X8>)
{
  _s19DPSubmissionService5EmptyVACycfC_0();
  uint64_t v2 = a1 + *(int *)(type metadata accessor for ProtectedDonation(0) + 20);
  uint64_t v3 = sub_100058E10();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56);
  return v4(v2, 1, 1, v3);
}

uint64_t BaaSignedDonation.serialisedDediscoDonation.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100016B2C(*(void *)v2, *(void *)(v2 + 8));
  *(void *)uint64_t v2 = a1;
  *(void *)(v2 + 8) = a2;
  return result;
}

uint64_t (*BaaCertificateChain.leafCertificate.modify())(void, void, void)
{
  return PPM_0_2_1.QueryType.enumValue.getter;
}

uint64_t BaaSignedDonation.baaCertificateChain.getter@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v3 = sub_100016C98(&qword_100080B10);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for BaaSignedDonation(0);
  sub_10004AD18(v1 + *(int *)(v6 + 28), (uint64_t)v5, &qword_100080B10);
  uint64_t v7 = type metadata accessor for BaaCertificateChain(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return sub_100049C00((uint64_t)v5, (uint64_t)a1, type metadata accessor for BaaCertificateChain);
  }
  *a1 = xmmword_10005E040;
  a1[1] = xmmword_10005E040;
  _s19DPSubmissionService5EmptyVACycfC_0();
  return sub_100016F18((uint64_t)v5, &qword_100080B10);
}

uint64_t BaaCertificateChain.init()@<X0>(_OWORD *a1@<X8>)
{
  *a1 = xmmword_10005E040;
  a1[1] = xmmword_10005E040;
  type metadata accessor for BaaCertificateChain(0);
  return _s19DPSubmissionService5EmptyVACycfC_0();
}

void (*BaaSignedDonation.baaCertificateChain.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  void *v3 = v1;
  uint64_t v4 = sub_100016C98(&qword_100080B10);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for BaaCertificateChain(0);
  void v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for BaaSignedDonation(0) + 28);
  *((_DWORD *)v3 + 12) = v11;
  sub_10004AD18(v1 + v11, (uint64_t)v5, &qword_100080B10);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    *uint64_t v10 = xmmword_10005E040;
    v10[1] = xmmword_10005E040;
    _s19DPSubmissionService5EmptyVACycfC_0();
    sub_100016F18((uint64_t)v5, &qword_100080B10);
  }
  else
  {
    sub_100049C00((uint64_t)v5, (uint64_t)v10, type metadata accessor for BaaCertificateChain);
  }
  return sub_10004A738;
}

void sub_10004A738(uint64_t a1, char a2)
{
}

BOOL BaaSignedDonation.hasBaaCertificateChain.getter()
{
  uint64_t v1 = sub_100016C98(&qword_100080B10);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for BaaSignedDonation(0);
  sub_10004AD18(v0 + *(int *)(v4 + 28), (uint64_t)v3, &qword_100080B10);
  uint64_t v5 = type metadata accessor for BaaCertificateChain(0);
  BOOL v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  sub_100016F18((uint64_t)v3, &qword_100080B10);
  return v6;
}

Swift::Void __swiftcall BaaSignedDonation.clearBaaCertificateChain()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for BaaSignedDonation(0) + 28);
  sub_100016F18(v1, &qword_100080B10);
  uint64_t v2 = type metadata accessor for BaaCertificateChain(0);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);
  v3(v1, 1, 1, v2);
}

uint64_t BaaSignedDonation.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10004A9EC(type metadata accessor for BaaSignedDonation, a1);
}

uint64_t BaaSignedDonation.unknownFields.setter(uint64_t a1)
{
  return sub_10004AA84(a1, type metadata accessor for BaaSignedDonation);
}

uint64_t (*BaaSignedDonation.unknownFields.modify())(void, void, void)
{
  return PPM_0_2_1.QueryType.enumValue.getter;
}

uint64_t BaaSignedDonation.init()@<X0>(_OWORD *a1@<X8>)
{
  *a1 = xmmword_10005E040;
  a1[1] = xmmword_10005E040;
  uint64_t v2 = type metadata accessor for BaaSignedDonation(0);
  _s19DPSubmissionService5EmptyVACycfC_0();
  uint64_t v3 = (char *)a1 + *(int *)(v2 + 28);
  uint64_t v4 = type metadata accessor for BaaCertificateChain(0);
  uint64_t v5 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(v3, 1, 1, v4);
}

uint64_t BaaCertificateChain.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10004A9EC(type metadata accessor for BaaCertificateChain, a1);
}

uint64_t sub_10004A9EC@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1(0) + 24);
  uint64_t v5 = sub_100058E60();
  BOOL v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t BaaCertificateChain.unknownFields.setter(uint64_t a1)
{
  return sub_10004AA84(a1, type metadata accessor for BaaCertificateChain);
}

uint64_t sub_10004AA84(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = v2 + *(int *)(a2(0) + 24);
  uint64_t v5 = sub_100058E60();
  BOOL v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t (*BaaCertificateChain.unknownFields.modify())(void, void, void)
{
  return PPM_0_2_1.QueryType.enumValue.getter;
}

uint64_t DediscoDonation.algorithm.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t DediscoDonation.algorithm.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t DediscoDonation.algorithmParameters.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = sub_100016C98(&qword_100081A10);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DediscoDonation(0);
  sub_10004AD18(v1 + *(int *)(v6 + 52), (uint64_t)v5, &qword_100081A10);
  uint64_t v7 = type metadata accessor for DediscoDonation.AlgorithmParameters(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return sub_100049C00((uint64_t)v5, (uint64_t)a1, type metadata accessor for DediscoDonation.AlgorithmParameters);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0xC000000000000000;
  _s19DPSubmissionService5EmptyVACycfC_0();
  return sub_100016F18((uint64_t)v5, &qword_100081A10);
}

uint64_t DediscoDonation.AlgorithmParameters.init()@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0xC000000000000000;
  type metadata accessor for DediscoDonation.AlgorithmParameters(0);
  return _s19DPSubmissionService5EmptyVACycfC_0();
}

uint64_t sub_10004AD18(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100016C98(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void (*DediscoDonation.algorithmParameters.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  void *v3 = v1;
  uint64_t v4 = sub_100016C98(&qword_100081A10);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[1] = v5;
  uint64_t v6 = type metadata accessor for DediscoDonation.AlgorithmParameters(0);
  void v3[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  v3[3] = v7;
  size_t v9 = *(void *)(v7 + 64);
  v3[4] = malloc(v9);
  uint64_t v10 = malloc(v9);
  v3[5] = v10;
  uint64_t v11 = *(int *)(type metadata accessor for DediscoDonation(0) + 52);
  *((_DWORD *)v3 + 12) = v11;
  sub_10004AD18(v1 + v11, (uint64_t)v5, &qword_100081A10);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v6) == 1)
  {
    *uint64_t v10 = 0;
    v10[1] = 0;
    _OWORD v10[2] = 0;
    _OWORD v10[3] = 0xC000000000000000;
    _s19DPSubmissionService5EmptyVACycfC_0();
    sub_100016F18((uint64_t)v5, &qword_100081A10);
  }
  else
  {
    sub_100049C00((uint64_t)v5, (uint64_t)v10, type metadata accessor for DediscoDonation.AlgorithmParameters);
  }
  return sub_10004AF18;
}

void sub_10004AF18(uint64_t a1, char a2)
{
}

void sub_10004AF38(uint64_t a1, char a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6 = *(void **)a1;
  uint64_t v7 = *(int *)(*(void *)a1 + 48);
  uint64_t v8 = *(void **)(*(void *)a1 + 32);
  size_t v9 = *(void **)(*(void *)a1 + 40);
  uint64_t v10 = *(void *)(*(void *)a1 + 16);
  uint64_t v11 = *(void *)(*(void *)a1 + 24);
  unint64_t v12 = *(void **)(*(void *)a1 + 8);
  uint64_t v13 = **(void **)a1 + v7;
  if (a2)
  {
    sub_10004B05C(*(void *)(*(void *)a1 + 40), (uint64_t)v8, a4);
    sub_100016F18(v13, a3);
    sub_100049C00((uint64_t)v8, v13, a4);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))(v13, 0, 1, v10);
    sub_10004B0C4((uint64_t)v9, a4);
  }
  else
  {
    sub_100016F18(**(void **)a1 + v7, a3);
    sub_100049C00((uint64_t)v9, v13, a4);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))(v13, 0, 1, v10);
  }
  free(v9);
  free(v8);
  free(v12);
  free(v6);
}

uint64_t sub_10004B05C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10004B0C4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

BOOL DediscoDonation.hasAlgorithmParameters.getter()
{
  uint64_t v1 = sub_100016C98(&qword_100081A10);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for DediscoDonation(0);
  sub_10004AD18(v0 + *(int *)(v4 + 52), (uint64_t)v3, &qword_100081A10);
  uint64_t v5 = type metadata accessor for DediscoDonation.AlgorithmParameters(0);
  BOOL v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  sub_100016F18((uint64_t)v3, &qword_100081A10);
  return v6;
}

Swift::Void __swiftcall DediscoDonation.clearAlgorithmParameters()()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for DediscoDonation(0) + 52);
  sub_100016F18(v1, &qword_100081A10);
  uint64_t v2 = type metadata accessor for DediscoDonation.AlgorithmParameters(0);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);
  v3(v1, 1, 1, v2);
}

uint64_t DediscoDonation.fsEncryptedShare.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100016B2C(*(void *)(v2 + 32), *(void *)(v2 + 40));
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = a2;
  return result;
}

uint64_t (*DediscoDonation.fsEncryptedShare.modify())(void, void, void)
{
  return PPM_0_2_1.QueryType.enumValue.getter;
}

uint64_t DediscoDonation.dsEncryptedShare.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100016B2C(*(void *)(v2 + 48), *(void *)(v2 + 56));
  *(void *)(v2 + 48) = a1;
  *(void *)(v2 + 56) = a2;
  return result;
}

uint64_t (*DediscoDonation.dsEncryptedShare.modify())(void, void, void)
{
  return PPM_0_2_1.QueryType.enumValue.getter;
}

uint64_t DediscoDonation.fsPublicKey.getter()
{
  uint64_t v1 = *(void *)(v0 + 64);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t DediscoDonation.fsPublicKey.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 64) = a1;
  *(void *)(v2 + 72) = a2;
  return result;
}

uint64_t (*DediscoDonation.fsPublicKey.modify())(void, void, void)
{
  return PPM_0_2_1.QueryType.enumValue.getter;
}

uint64_t DediscoDonation.dsPublicKey.getter()
{
  uint64_t v1 = *(void *)(v0 + 80);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t DediscoDonation.dsPublicKey.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 80) = a1;
  *(void *)(v2 + 88) = a2;
  return result;
}

uint64_t (*DediscoDonation.dsPublicKey.modify())(void, void, void)
{
  return PPM_0_2_1.QueryType.enumValue.getter;
}

uint64_t DediscoDonation.versionHash.getter()
{
  uint64_t v1 = *(void *)(v0 + 96);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t DediscoDonation.versionHash.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 96) = a1;
  *(void *)(v2 + 104) = a2;
  return result;
}

uint64_t (*DediscoDonation.versionHash.modify())(void, void, void)
{
  return PPM_0_2_1.QueryType.enumValue.getter;
}

uint64_t DediscoDonation.report.getter()
{
  uint64_t v1 = *(void *)(v0 + 112);
  sub_100016E5C(v1, *(void *)(v0 + 120));
  return v1;
}

uint64_t DediscoDonation.report.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100016B2C(*(void *)(v2 + 112), *(void *)(v2 + 120));
  *(void *)(v2 + 112) = a1;
  *(void *)(v2 + 120) = a2;
  return result;
}

uint64_t (*DediscoDonation.report.modify())(void, void, void)
{
  return PPM_0_2_1.QueryType.enumValue.getter;
}

uint64_t DediscoDonation.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for DediscoDonation(0) + 48);
  uint64_t v4 = sub_100058E60();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t DediscoDonation.unknownFields.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for DediscoDonation(0) + 48);
  uint64_t v4 = sub_100058E60();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);
  return v5(v3, a1, v4);
}

uint64_t (*DediscoDonation.unknownFields.modify())(void, void, void)
{
  return PPM_0_2_1.QueryType.enumValue.getter;
}

uint64_t DediscoDonation.AlgorithmParameters.dimension.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

double DediscoDonation.AlgorithmParameters.epsilon.getter()
{
  return *(double *)(v0 + 8);
}

void DediscoDonation.AlgorithmParameters.epsilon.setter(double a1)
{
  *(double *)(v1 + 8) = a1;
}

uint64_t DediscoDonation.AlgorithmParameters.otherParams.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100016B2C(*(void *)(v2 + 16), *(void *)(v2 + 24));
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t DediscoDonation.AlgorithmParameters.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10004B704(type metadata accessor for DediscoDonation.AlgorithmParameters, a1);
}

uint64_t sub_10004B704@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1(0) + 28);
  uint64_t v5 = sub_100058E60();
  BOOL v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t DediscoDonation.AlgorithmParameters.unknownFields.setter(uint64_t a1)
{
  return sub_10004B79C(a1, type metadata accessor for DediscoDonation.AlgorithmParameters);
}

uint64_t sub_10004B79C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = v2 + *(int *)(a2(0) + 28);
  uint64_t v5 = sub_100058E60();
  BOOL v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t (*DediscoDonation.AlgorithmParameters.unknownFields.modify())(void, void, void)
{
  return PPM_0_2_1.QueryType.enumValue.getter;
}

uint64_t DediscoDonation.init()@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0xE000000000000000;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0xE000000000000000;
  *(_OWORD *)(a1 + 32) = xmmword_10005E040;
  *(_OWORD *)(a1 + 48) = xmmword_10005E040;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0xE000000000000000;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0xE000000000000000;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0xE000000000000000;
  *(_OWORD *)(a1 + 112) = xmmword_10005E040;
  uint64_t v2 = type metadata accessor for DediscoDonation(0);
  _s19DPSubmissionService5EmptyVACycfC_0();
  uint64_t v3 = a1 + *(int *)(v2 + 52);
  uint64_t v4 = type metadata accessor for DediscoDonation.AlgorithmParameters(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(v3, 1, 1, v4);
}

uint64_t CollectionID.collectionID.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CollectionID.collectionID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  void *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t CollectionID.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for CollectionID(0) + 20);
  uint64_t v4 = sub_100058E60();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t type metadata accessor for CollectionID(uint64_t a1)
{
  return sub_10005165C(a1, qword_100082A20);
}

uint64_t CollectionID.unknownFields.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for CollectionID(0) + 20);
  uint64_t v4 = sub_100058E60();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);
  return v5(v3, a1, v4);
}

uint64_t (*CollectionID.unknownFields.modify())(void, void, void)
{
  return PPM_0_2_1.QueryType.enumValue.getter;
}

uint64_t CollectionID.init()@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  type metadata accessor for CollectionID(0);
  return _s19DPSubmissionService5EmptyVACycfC_0();
}

uint64_t _s19DPSubmissionService5EmptyV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvg_0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_100058E60();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);
  return v4(a1, v1, v3);
}

uint64_t _s19DPSubmissionService5EmptyV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvs_0(uint64_t a1)
{
  uint64_t v3 = sub_100058E60();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40);
  return v4(v1, a1, v3);
}

void *LoadTestExperimentalSetup.protoMessageName.unsafeMutableAddressor()
{
  return &static LoadTestExperimentalSetup.protoMessageName;
}

unint64_t static LoadTestExperimentalSetup.protoMessageName.getter()
{
  return 0xD000000000000019;
}

uint64_t sub_10004BC08()
{
  uint64_t v0 = sub_100059010();
  sub_100016FD8(v0, static LoadTestExperimentalSetup._protobuf_nameMap);
  sub_100015988(v0, (uint64_t)static LoadTestExperimentalSetup._protobuf_nameMap);
  sub_100016C98(&qword_100080CB0);
  uint64_t v1 = (int *)(sub_100016C98(&qword_100080CB8) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_10005FA10;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *uint64_t v5 = 1;
  *(void *)unint64_t v6 = "parallelism";
  *(void *)(v6 + 8) = 11;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = sub_100058FE0();
  size_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "payload_size";
  *((void *)v10 + 1) = 12;
  unsigned char v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "donations";
  *(void *)(v11 + 8) = 9;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return sub_100058FF0();
}

uint64_t LoadTestExperimentalSetup._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_10004F758(&qword_100080A38, (uint64_t)static LoadTestExperimentalSetup._protobuf_nameMap);
}

uint64_t static LoadTestExperimentalSetup._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10004F7D0(&qword_100080A38, (uint64_t)static LoadTestExperimentalSetup._protobuf_nameMap, a1);
}

uint64_t LoadTestExperimentalSetup.decodeMessage<A>(decoder:)()
{
  uint64_t result = sub_100058EA0();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 3 || result == 2 || result == 1) {
        sub_100058EC0();
      }
      uint64_t result = sub_100058EA0();
    }
  }
  return result;
}

uint64_t LoadTestExperimentalSetup.traverse<A>(visitor:)()
{
  if (!*v0 || (uint64_t result = sub_100058F80(), !v1))
  {
    if (!v0[1] || (uint64_t result = sub_100058F80(), !v1))
    {
      if (!v0[2] || (uint64_t result = sub_100058F80(), !v1))
      {
        type metadata accessor for LoadTestExperimentalSetup(0);
        return sub_100058E40();
      }
    }
  }
  return result;
}

Swift::Int LoadTestExperimentalSetup.hashValue.getter()
{
  return sub_10004FA98((void (*)(void))type metadata accessor for LoadTestExperimentalSetup, &qword_100082538, (void (*)(uint64_t))type metadata accessor for LoadTestExperimentalSetup);
}

uint64_t sub_10004C034@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  return _s19DPSubmissionService5EmptyVACycfC_0();
}

uint64_t (*sub_10004C064())(void, void, void)
{
  return PPM_0_2_1.QueryType.enumValue.getter;
}

uint64_t sub_10004C088()
{
  return LoadTestExperimentalSetup.decodeMessage<A>(decoder:)();
}

uint64_t sub_10004C0A0()
{
  return LoadTestExperimentalSetup.traverse<A>(visitor:)();
}

uint64_t sub_10004C0B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100050644(&qword_100082B20, (void (*)(uint64_t))type metadata accessor for LoadTestExperimentalSetup);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10004C134@<X0>(uint64_t a1@<X8>)
{
  return sub_10004FBF0(&qword_100080A38, (uint64_t)static LoadTestExperimentalSetup._protobuf_nameMap, a1);
}

uint64_t sub_10004C158(uint64_t a1)
{
  uint64_t v2 = sub_100050644(&qword_100082580, (void (*)(uint64_t))type metadata accessor for LoadTestExperimentalSetup);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10004C1C8()
{
  sub_100050644(&qword_100082580, (void (*)(uint64_t))type metadata accessor for LoadTestExperimentalSetup);
  return sub_100058F50();
}

void *ProtectedDonation.protoMessageName.unsafeMutableAddressor()
{
  return &static ProtectedDonation.protoMessageName;
}

unint64_t static ProtectedDonation.protoMessageName.getter()
{
  return 0xD000000000000011;
}

uint64_t sub_10004C270(uint64_t a1)
{
  return sub_10004F0E0(a1, static ProtectedDonation._protobuf_nameMap, (uint64_t)"baa_signed_donation_envelope", 28);
}

uint64_t ProtectedDonation._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_10004F758(&qword_100080A40, (uint64_t)static ProtectedDonation._protobuf_nameMap);
}

uint64_t static ProtectedDonation._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10004F7D0(&qword_100080A40, (uint64_t)static ProtectedDonation._protobuf_nameMap, a1);
}

uint64_t ProtectedDonation.decodeMessage<A>(decoder:)()
{
  while (1)
  {
    uint64_t result = sub_100058EA0();
    if (v0 || (v2 & 1) != 0) {
      break;
    }
    if (result == 1) {
      sub_10004C344();
    }
  }
  return result;
}

uint64_t sub_10004C344()
{
  return sub_100058F10();
}

uint64_t ProtectedDonation.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_10004C44C(v3, a1, a2, a3);
  if (!v4) {
    return sub_100058E40();
  }
  return result;
}

uint64_t sub_10004C44C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = sub_100016C98(&qword_100080B00);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100058E10();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for ProtectedDonation(0);
  sub_10004AD18(a1 + *(int *)(v12 + 20), (uint64_t)v7, &qword_100080B00);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_100016F18((uint64_t)v7, &qword_100080B00);
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v7, v8);
  sub_100050644(&qword_100080AF8, (void (*)(uint64_t))&type metadata accessor for Ckcode_ProtectedEnvelope);
  sub_100058FD0();
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

Swift::Int ProtectedDonation.hashValue.getter()
{
  return sub_10004FA98((void (*)(void))type metadata accessor for ProtectedDonation, &qword_100082540, (void (*)(uint64_t))type metadata accessor for ProtectedDonation);
}

uint64_t sub_10004C69C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _s19DPSubmissionService5EmptyVACycfC_0();
  uint64_t v4 = a2 + *(int *)(a1 + 20);
  uint64_t v5 = sub_100058E10();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
  return v6(v4, 1, 1, v5);
}

uint64_t sub_10004C718()
{
  return ProtectedDonation.decodeMessage<A>(decoder:)();
}

uint64_t sub_10004C730(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return ProtectedDonation.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_10004C748(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100050644(&qword_100082B18, (void (*)(uint64_t))type metadata accessor for ProtectedDonation);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10004C7C4@<X0>(uint64_t a1@<X8>)
{
  return sub_10004FBF0(&qword_100080A40, (uint64_t)static ProtectedDonation._protobuf_nameMap, a1);
}

uint64_t sub_10004C7E8(uint64_t a1)
{
  uint64_t v2 = sub_100050644(&qword_100080AF0, (void (*)(uint64_t))type metadata accessor for ProtectedDonation);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10004C854()
{
  sub_100050644(&qword_100080AF0, (void (*)(uint64_t))type metadata accessor for ProtectedDonation);
  return sub_100058F50();
}

void *BaaSignedDonation.protoMessageName.unsafeMutableAddressor()
{
  return &static BaaSignedDonation.protoMessageName;
}

unint64_t static BaaSignedDonation.protoMessageName.getter()
{
  return 0xD000000000000011;
}

uint64_t sub_10004C8F8()
{
  uint64_t v0 = sub_100059010();
  sub_100016FD8(v0, static BaaSignedDonation._protobuf_nameMap);
  sub_100015988(v0, (uint64_t)static BaaSignedDonation._protobuf_nameMap);
  sub_100016C98(&qword_100080CB0);
  uint64_t v1 = (int *)(sub_100016C98(&qword_100080CB8) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_10005FA10;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *uint64_t v5 = 1;
  *(void *)unint64_t v6 = "serialised_dedisco_donation";
  *(void *)(v6 + 8) = 27;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v8 = sub_100058FE0();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "serialised_dedisco_donation_signature";
  *((void *)v10 + 1) = 37;
  unsigned char v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "baa_certificate_chain";
  *(void *)(v11 + 8) = 21;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return sub_100058FF0();
}

uint64_t BaaSignedDonation._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_10004F758(&qword_100080A48, (uint64_t)static BaaSignedDonation._protobuf_nameMap);
}

uint64_t static BaaSignedDonation._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10004F7D0(&qword_100080A48, (uint64_t)static BaaSignedDonation._protobuf_nameMap, a1);
}

uint64_t BaaSignedDonation.decodeMessage<A>(decoder:)()
{
  uint64_t result = sub_100058EA0();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 3)
      {
        sub_10004CBFC();
      }
      else if (result == 2 || result == 1)
      {
        sub_100058EB0();
      }
      uint64_t result = sub_100058EA0();
    }
  }
  return result;
}

uint64_t sub_10004CBFC()
{
  return sub_100058F10();
}

uint64_t BaaSignedDonation.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  unint64_t v8 = v3[1];
  switch(v8 >> 62)
  {
    case 1uLL:
      if ((int)v7 != v7 >> 32) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 2uLL:
      if (*(void *)(v7 + 16) != *(void *)(v7 + 24)) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 3uLL:
      goto LABEL_8;
    default:
      if ((v8 & 0xFF000000000000) == 0) {
        goto LABEL_8;
      }
LABEL_7:
      uint64_t result = sub_100058F70();
      if (!v4)
      {
LABEL_8:
        uint64_t v11 = v3[2];
        unint64_t v12 = v3[3];
        switch(v12 >> 62)
        {
          case 1uLL:
            if ((int)v11 != v11 >> 32) {
              goto LABEL_14;
            }
            goto LABEL_15;
          case 2uLL:
            if (*(void *)(v11 + 16) != *(void *)(v11 + 24)) {
              goto LABEL_14;
            }
            goto LABEL_15;
          case 3uLL:
            goto LABEL_15;
          default:
            if ((v12 & 0xFF000000000000) == 0) {
              goto LABEL_15;
            }
LABEL_14:
            uint64_t result = sub_100058F70();
            if (!v4)
            {
LABEL_15:
              uint64_t result = sub_10004CE40((uint64_t)v3, a1, a2, a3);
              if (!v4)
              {
                type metadata accessor for BaaSignedDonation(0);
                uint64_t result = sub_100058E40();
              }
            }
            break;
        }
      }
      return result;
  }
}

uint64_t sub_10004CE40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = sub_100016C98(&qword_100080B10);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for BaaCertificateChain(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for BaaSignedDonation(0);
  sub_10004AD18(a1 + *(int *)(v12 + 28), (uint64_t)v7, &qword_100080B10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_100016F18((uint64_t)v7, &qword_100080B10);
  }
  sub_100049C00((uint64_t)v7, (uint64_t)v11, type metadata accessor for BaaCertificateChain);
  sub_100050644(&qword_100080B08, (void (*)(uint64_t))type metadata accessor for BaaCertificateChain);
  sub_100058FD0();
  return sub_10004B0C4((uint64_t)v11, type metadata accessor for BaaCertificateChain);
}

Swift::Int BaaSignedDonation.hashValue.getter()
{
  return sub_10004FA98((void (*)(void))type metadata accessor for BaaSignedDonation, &qword_100082548, (void (*)(uint64_t))type metadata accessor for BaaSignedDonation);
}

uint64_t sub_10004D084@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  *a2 = xmmword_10005E040;
  a2[1] = xmmword_10005E040;
  _s19DPSubmissionService5EmptyVACycfC_0();
  uint64_t v4 = (char *)a2 + *(int *)(a1 + 28);
  uint64_t v5 = type metadata accessor for BaaCertificateChain(0);
  uint64_t v6 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
  return v6(v4, 1, 1, v5);
}

uint64_t (*sub_10004D11C())(void, void, void)
{
  return PPM_0_2_1.QueryType.enumValue.getter;
}

uint64_t sub_10004D140()
{
  return BaaSignedDonation.decodeMessage<A>(decoder:)();
}

uint64_t sub_10004D158(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return BaaSignedDonation.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_10004D170(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100050644(&qword_100082B10, (void (*)(uint64_t))type metadata accessor for BaaSignedDonation);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10004D1EC@<X0>(uint64_t a1@<X8>)
{
  return sub_10004FBF0(&qword_100080A48, (uint64_t)static BaaSignedDonation._protobuf_nameMap, a1);
}

uint64_t sub_10004D210(uint64_t a1)
{
  uint64_t v2 = sub_100050644(&qword_100080AE8, (void (*)(uint64_t))type metadata accessor for BaaSignedDonation);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10004D27C()
{
  sub_100050644(&qword_100080AE8, (void (*)(uint64_t))type metadata accessor for BaaSignedDonation);
  return sub_100058F50();
}

void *BaaCertificateChain.protoMessageName.unsafeMutableAddressor()
{
  return &static BaaCertificateChain.protoMessageName;
}

unint64_t static BaaCertificateChain.protoMessageName.getter()
{
  return 0xD000000000000013;
}

uint64_t sub_10004D320()
{
  uint64_t v0 = sub_100059010();
  sub_100016FD8(v0, static BaaCertificateChain._protobuf_nameMap);
  sub_100015988(v0, (uint64_t)static BaaCertificateChain._protobuf_nameMap);
  sub_100016C98(&qword_100080CB0);
  uint64_t v1 = (int *)(sub_100016C98(&qword_100080CB8) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_10005F580;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *uint64_t v5 = 1;
  *(void *)unint64_t v6 = "intermediate_certificate";
  *(void *)(v6 + 8) = 24;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v8 = sub_100058FE0();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "leaf_certificate";
  *((void *)v10 + 1) = 16;
  unsigned char v10[16] = 2;
  v9();
  return sub_100058FF0();
}

uint64_t BaaCertificateChain._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_10004F758(&qword_100080A50, (uint64_t)static BaaCertificateChain._protobuf_nameMap);
}

uint64_t static BaaCertificateChain._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10004F7D0(&qword_100080A50, (uint64_t)static BaaCertificateChain._protobuf_nameMap, a1);
}

uint64_t BaaCertificateChain.decodeMessage<A>(decoder:)()
{
  uint64_t result = sub_100058EA0();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2 || result == 1) {
        sub_100058EB0();
      }
      uint64_t result = sub_100058EA0();
    }
  }
  return result;
}

uint64_t BaaCertificateChain.traverse<A>(visitor:)()
{
  uint64_t v2 = *v0;
  unint64_t v3 = v0[1];
  switch(v3 >> 62)
  {
    case 1uLL:
      if ((int)v2 != v2 >> 32) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 2uLL:
      if (*(void *)(v2 + 16) != *(void *)(v2 + 24)) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 3uLL:
      goto LABEL_8;
    default:
      if ((v3 & 0xFF000000000000) == 0) {
        goto LABEL_8;
      }
LABEL_7:
      uint64_t result = sub_100058F70();
      if (!v1)
      {
LABEL_8:
        uint64_t v5 = v0[2];
        unint64_t v6 = v0[3];
        switch(v6 >> 62)
        {
          case 1uLL:
            if ((int)v5 != v5 >> 32) {
              goto LABEL_14;
            }
            goto LABEL_15;
          case 2uLL:
            if (*(void *)(v5 + 16) != *(void *)(v5 + 24)) {
              goto LABEL_14;
            }
            goto LABEL_15;
          case 3uLL:
            goto LABEL_15;
          default:
            if ((v6 & 0xFF000000000000) == 0) {
              goto LABEL_15;
            }
LABEL_14:
            uint64_t result = sub_100058F70();
            if (!v1)
            {
LABEL_15:
              type metadata accessor for BaaCertificateChain(0);
              uint64_t result = sub_100058E40();
            }
            break;
        }
      }
      return result;
  }
}

Swift::Int BaaCertificateChain.hashValue.getter()
{
  return sub_10004FA98((void (*)(void))type metadata accessor for BaaCertificateChain, &qword_100082550, (void (*)(uint64_t))type metadata accessor for BaaCertificateChain);
}

uint64_t sub_10004D774@<X0>(_OWORD *a1@<X8>)
{
  *a1 = xmmword_10005E040;
  a1[1] = xmmword_10005E040;
  return _s19DPSubmissionService5EmptyVACycfC_0();
}

uint64_t sub_10004D7A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 24);
  uint64_t v5 = sub_100058E60();
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t sub_10004D810(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 24);
  uint64_t v5 = sub_100058E60();
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t sub_10004D880()
{
  return BaaCertificateChain.decodeMessage<A>(decoder:)();
}

uint64_t sub_10004D898()
{
  return BaaCertificateChain.traverse<A>(visitor:)();
}

uint64_t sub_10004D8B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100050644(&qword_100082B08, (void (*)(uint64_t))type metadata accessor for BaaCertificateChain);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10004D92C@<X0>(uint64_t a1@<X8>)
{
  return sub_10004FBF0(&qword_100080A50, (uint64_t)static BaaCertificateChain._protobuf_nameMap, a1);
}

uint64_t sub_10004D950(uint64_t a1)
{
  uint64_t v2 = sub_100050644(&qword_100080B08, (void (*)(uint64_t))type metadata accessor for BaaCertificateChain);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10004D9BC()
{
  sub_100050644(&qword_100080B08, (void (*)(uint64_t))type metadata accessor for BaaCertificateChain);
  return sub_100058F50();
}

void *DediscoDonation.protoMessageName.unsafeMutableAddressor()
{
  return &static DediscoDonation.protoMessageName;
}

uint64_t static DediscoDonation.protoMessageName.getter()
{
  return 0x446F637369646544;
}

uint64_t sub_10004DA68()
{
  uint64_t v0 = sub_100059010();
  sub_100016FD8(v0, static DediscoDonation._protobuf_nameMap);
  sub_100015988(v0, (uint64_t)static DediscoDonation._protobuf_nameMap);
  sub_100016C98(&qword_100080CB0);
  uint64_t v1 = (int *)(sub_100016C98(&qword_100080CB8) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_10005FA20;
  unint64_t v4 = v24 + v3;
  unint64_t v5 = v24 + v3 + v1[14];
  *(void *)(v24 + v3) = 1;
  *(void *)unint64_t v5 = "collection_id";
  *(void *)(v5 + 8) = 13;
  *(unsigned char *)(v5 + 16) = 2;
  uint64_t v6 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v7 = sub_100058FE0();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  unint64_t v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)unint64_t v9 = "algorithm";
  *(void *)(v9 + 8) = 9;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  uint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *uint64_t v10 = 3;
  *(void *)uint64_t v11 = "algorithm_parameters";
  *((void *)v11 + 1) = 20;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  void *v12 = 4;
  *(void *)uint64_t v13 = "fs_encrypted_share";
  *((void *)v13 + 1) = 18;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  unint64_t v15 = (char *)v14 + v1[14];
  void *v14 = 5;
  *(void *)unint64_t v15 = "ds_encrypted_share";
  *((void *)v15 + 1) = 18;
  unsigned char v15[16] = 2;
  v8();
  unint64_t v16 = (void *)(v4 + 5 * v2);
  unint64_t v17 = (char *)v16 + v1[14];
  void *v16 = 6;
  *(void *)unint64_t v17 = "fs_public_key";
  *((void *)v17 + 1) = 13;
  unsigned char v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  unint64_t v19 = (char *)v18 + v1[14];
  void *v18 = 7;
  *(void *)unint64_t v19 = "ds_public_key";
  *((void *)v19 + 1) = 13;
  unsigned char v19[16] = 2;
  v8();
  uint64_t v20 = (void *)(v4 + 7 * v2);
  unint64_t v21 = (char *)v20 + v1[14];
  void *v20 = 8;
  *(void *)unint64_t v21 = "version_hash";
  *((void *)v21 + 1) = 12;
  v21[16] = 2;
  v8();
  uint64_t v22 = v4 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 9;
  *(void *)uint64_t v22 = "report";
  *(void *)(v22 + 8) = 6;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  return sub_100058FF0();
}

uint64_t DediscoDonation._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_10004F758(&qword_100080A58, (uint64_t)static DediscoDonation._protobuf_nameMap);
}

uint64_t static DediscoDonation._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10004F7D0(&qword_100080A58, (uint64_t)static DediscoDonation._protobuf_nameMap, a1);
}

uint64_t DediscoDonation.decodeMessage<A>(decoder:)()
{
  uint64_t result = sub_100058EA0();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
        case 6:
        case 7:
        case 8:
          sub_100058EF0();
          break;
        case 3:
          sub_10004DF94();
          break;
        case 4:
        case 5:
        case 9:
          sub_100058EB0();
          break;
        default:
          break;
      }
      uint64_t result = sub_100058EA0();
    }
  }
  return result;
}

uint64_t sub_10004DF94()
{
  return sub_100058F10();
}

uint64_t DediscoDonation.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = v3;
  unint64_t v9 = v5[1];
  uint64_t v10 = HIBYTE(v9) & 0xF;
  if ((v9 & 0x2000000000000000) == 0) {
    uint64_t v10 = *v5 & 0xFFFFFFFFFFFFLL;
  }
  if (!v10 || (uint64_t result = sub_100058FB0(), !v4))
  {
    unint64_t v12 = v5[3];
    uint64_t v13 = HIBYTE(v12) & 0xF;
    if ((v12 & 0x2000000000000000) == 0) {
      uint64_t v13 = v5[2] & 0xFFFFFFFFFFFFLL;
    }
    if (!v13 || (uint64_t result = sub_100058FB0(), !v4))
    {
      uint64_t result = sub_10004E354((uint64_t)v5, a1, a2, a3);
      if (!v4)
      {
        uint64_t v14 = v5[4];
        unint64_t v15 = v5[5];
        switch(v15 >> 62)
        {
          case 1uLL:
            if ((int)v14 != v14 >> 32) {
              goto LABEL_17;
            }
            break;
          case 2uLL:
            if (*(void *)(v14 + 16) != *(void *)(v14 + 24)) {
              goto LABEL_17;
            }
            break;
          case 3uLL:
            break;
          default:
            if ((v15 & 0xFF000000000000) != 0) {
LABEL_17:
            }
              sub_100058F70();
            break;
        }
        uint64_t v16 = v5[6];
        unint64_t v17 = v5[7];
        switch(v17 >> 62)
        {
          case 1uLL:
            if ((int)v16 != v16 >> 32) {
              goto LABEL_24;
            }
            break;
          case 2uLL:
            if (*(void *)(v16 + 16) != *(void *)(v16 + 24)) {
              goto LABEL_24;
            }
            break;
          case 3uLL:
            break;
          default:
            if ((v17 & 0xFF000000000000) != 0) {
LABEL_24:
            }
              sub_100058F70();
            break;
        }
        unint64_t v18 = v5[9];
        uint64_t v19 = HIBYTE(v18) & 0xF;
        if ((v18 & 0x2000000000000000) == 0) {
          uint64_t v19 = v5[8] & 0xFFFFFFFFFFFFLL;
        }
        if (v19) {
          sub_100058FB0();
        }
        unint64_t v20 = v5[11];
        uint64_t v21 = HIBYTE(v20) & 0xF;
        if ((v20 & 0x2000000000000000) == 0) {
          uint64_t v21 = v5[10] & 0xFFFFFFFFFFFFLL;
        }
        if (v21) {
          sub_100058FB0();
        }
        unint64_t v22 = v5[13];
        uint64_t v23 = HIBYTE(v22) & 0xF;
        if ((v22 & 0x2000000000000000) == 0) {
          uint64_t v23 = v5[12] & 0xFFFFFFFFFFFFLL;
        }
        if (v23) {
          sub_100058FB0();
        }
        uint64_t v24 = v5[14];
        unint64_t v25 = v5[15];
        switch(v25 >> 62)
        {
          case 1uLL:
            uint64_t v26 = (int)v24;
            uint64_t v27 = v24 >> 32;
            goto LABEL_42;
          case 2uLL:
            uint64_t v26 = *(void *)(v24 + 16);
            uint64_t v27 = *(void *)(v24 + 24);
LABEL_42:
            if (v26 != v27) {
              goto LABEL_43;
            }
            goto LABEL_44;
          case 3uLL:
            goto LABEL_44;
          default:
            if ((v25 & 0xFF000000000000) == 0) {
              goto LABEL_44;
            }
LABEL_43:
            sub_100058F70();
LABEL_44:
            type metadata accessor for DediscoDonation(0);
            uint64_t result = sub_100058E40();
            break;
        }
      }
    }
  }
  return result;
}

uint64_t sub_10004E354(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[1] = a4;
  uint64_t v5 = sub_100016C98(&qword_100081A10);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DediscoDonation.AlgorithmParameters(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DediscoDonation(0);
  sub_10004AD18(a1 + *(int *)(v12 + 52), (uint64_t)v7, &qword_100081A10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    return sub_100016F18((uint64_t)v7, &qword_100081A10);
  }
  sub_100049C00((uint64_t)v7, (uint64_t)v11, type metadata accessor for DediscoDonation.AlgorithmParameters);
  sub_100050644(&qword_100081A08, (void (*)(uint64_t))type metadata accessor for DediscoDonation.AlgorithmParameters);
  sub_100058FD0();
  return sub_10004B0C4((uint64_t)v11, type metadata accessor for DediscoDonation.AlgorithmParameters);
}

Swift::Int DediscoDonation.hashValue.getter()
{
  return sub_10004FA98((void (*)(void))type metadata accessor for DediscoDonation, &qword_100082558, (void (*)(uint64_t))type metadata accessor for DediscoDonation);
}

uint64_t sub_10004E598@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0xE000000000000000;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0xE000000000000000;
  *(_OWORD *)(a2 + 32) = xmmword_10005E040;
  *(_OWORD *)(a2 + 48) = xmmword_10005E040;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0xE000000000000000;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0xE000000000000000;
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0xE000000000000000;
  *(_OWORD *)(a2 + 112) = xmmword_10005E040;
  _s19DPSubmissionService5EmptyVACycfC_0();
  uint64_t v4 = a2 + *(int *)(a1 + 52);
  uint64_t v5 = type metadata accessor for DediscoDonation.AlgorithmParameters(0);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
  return v6(v4, 1, 1, v5);
}

uint64_t sub_10004E644@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 48);
  uint64_t v5 = sub_100058E60();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t sub_10004E6B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 48);
  uint64_t v5 = sub_100058E60();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t (*sub_10004E724())(void, void, void)
{
  return PPM_0_2_1.QueryType.enumValue.getter;
}

uint64_t sub_10004E748()
{
  return DediscoDonation.decodeMessage<A>(decoder:)();
}

uint64_t sub_10004E760(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return DediscoDonation.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_10004E778(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100050644(&qword_100082B00, (void (*)(uint64_t))type metadata accessor for DediscoDonation);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10004E7F4@<X0>(uint64_t a1@<X8>)
{
  return sub_10004FBF0(&qword_100080A58, (uint64_t)static DediscoDonation._protobuf_nameMap, a1);
}

uint64_t sub_10004E818(uint64_t a1)
{
  uint64_t v2 = sub_100050644(&qword_1000819D8, (void (*)(uint64_t))type metadata accessor for DediscoDonation);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10004E884()
{
  sub_100050644(&qword_1000819D8, (void (*)(uint64_t))type metadata accessor for DediscoDonation);
  return sub_100058F50();
}

void *DediscoDonation.AlgorithmParameters.protoMessageName.unsafeMutableAddressor()
{
  return &static DediscoDonation.AlgorithmParameters.protoMessageName;
}

unint64_t static DediscoDonation.AlgorithmParameters.protoMessageName.getter()
{
  return 0xD000000000000023;
}

uint64_t sub_10004E928()
{
  uint64_t v0 = sub_100059010();
  sub_100016FD8(v0, static DediscoDonation.AlgorithmParameters._protobuf_nameMap);
  sub_100015988(v0, (uint64_t)static DediscoDonation.AlgorithmParameters._protobuf_nameMap);
  sub_100016C98(&qword_100080CB0);
  uint64_t v1 = (int *)(sub_100016C98(&qword_100080CB8) - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_10005FA10;
  uint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  *uint64_t v5 = 1;
  *(void *)unint64_t v6 = "dimension";
  *(void *)(v6 + 8) = 9;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = enum case for _NameMap.NameDescription.same(_:);
  uint64_t v8 = sub_100058FE0();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  uint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)uint64_t v10 = "epsilon";
  *((void *)v10 + 1) = 7;
  unsigned char v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "other_params";
  *(void *)(v11 + 8) = 12;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return sub_100058FF0();
}

uint64_t DediscoDonation.AlgorithmParameters._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_10004F758(&qword_100080A60, (uint64_t)static DediscoDonation.AlgorithmParameters._protobuf_nameMap);
}

uint64_t static DediscoDonation.AlgorithmParameters._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10004F7D0(&qword_100080A60, (uint64_t)static DediscoDonation.AlgorithmParameters._protobuf_nameMap, a1);
}

uint64_t DediscoDonation.AlgorithmParameters.decodeMessage<A>(decoder:)()
{
  uint64_t result = sub_100058EA0();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 3:
          sub_100058EB0();
          break;
        case 2:
          sub_100058EE0();
          break;
        case 1:
          sub_100058ED0();
          break;
      }
      uint64_t result = sub_100058EA0();
    }
  }
  return result;
}

uint64_t DediscoDonation.AlgorithmParameters.traverse<A>(visitor:)()
{
  if (!*(void *)v0 || (uint64_t result = sub_100058F90(), !v1))
  {
    if (*(double *)(v0 + 8) == 0.0 || (uint64_t result = sub_100058FA0(), !v1))
    {
      uint64_t v3 = *(void *)(v0 + 16);
      unint64_t v4 = *(void *)(v0 + 24);
      switch(v4 >> 62)
      {
        case 1uLL:
          if ((int)v3 != v3 >> 32) {
            goto LABEL_12;
          }
          goto LABEL_13;
        case 2uLL:
          if (*(void *)(v3 + 16) != *(void *)(v3 + 24)) {
            goto LABEL_12;
          }
          goto LABEL_13;
        case 3uLL:
          goto LABEL_13;
        default:
          if ((v4 & 0xFF000000000000) == 0) {
            goto LABEL_13;
          }
LABEL_12:
          uint64_t result = sub_100058F70();
          if (!v1)
          {
LABEL_13:
            type metadata accessor for DediscoDonation.AlgorithmParameters(0);
            uint64_t result = sub_100058E40();
          }
          break;
      }
    }
  }
  return result;
}

Swift::Int DediscoDonation.AlgorithmParameters.hashValue.getter()
{
  return sub_10004FA98((void (*)(void))type metadata accessor for DediscoDonation.AlgorithmParameters, &qword_100082560, (void (*)(uint64_t))type metadata accessor for DediscoDonation.AlgorithmParameters);
}

uint64_t sub_10004EDD8@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0xC000000000000000;
  return _s19DPSubmissionService5EmptyVACycfC_0();
}

uint64_t sub_10004EE04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 28);
  uint64_t v5 = sub_100058E60();
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t sub_10004EE74(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 28);
  uint64_t v5 = sub_100058E60();
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t sub_10004EEE4()
{
  return DediscoDonation.AlgorithmParameters.decodeMessage<A>(decoder:)();
}

uint64_t sub_10004EEFC()
{
  return DediscoDonation.AlgorithmParameters.traverse<A>(visitor:)();
}

uint64_t sub_10004EF14(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100050644(&qword_100082AF8, (void (*)(uint64_t))type metadata accessor for DediscoDonation.AlgorithmParameters);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10004EF90@<X0>(uint64_t a1@<X8>)
{
  return sub_10004FBF0(&qword_100080A60, (uint64_t)static DediscoDonation.AlgorithmParameters._protobuf_nameMap, a1);
}

uint64_t sub_10004EFB4(uint64_t a1)
{
  uint64_t v2 = sub_100050644(&qword_100081A08, (void (*)(uint64_t))type metadata accessor for DediscoDonation.AlgorithmParameters);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10004F020()
{
  sub_100050644(&qword_100081A08, (void (*)(uint64_t))type metadata accessor for DediscoDonation.AlgorithmParameters);
  return sub_100058F50();
}

const char *CollectionID.protoMessageName.unsafeMutableAddressor()
{
  return "CollectionID";
}

uint64_t static CollectionID.protoMessageName.getter()
{
  return 0x697463656C6C6F43;
}

uint64_t sub_10004F0C8(uint64_t a1)
{
  return sub_10004F0E0(a1, static CollectionID._protobuf_nameMap, (uint64_t)"collection_id", 13);
}

uint64_t sub_10004F0E0(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = sub_100059010();
  sub_100016FD8(v7, a2);
  sub_100015988(v7, (uint64_t)a2);
  sub_100016C98(&qword_100080CB0);
  uint64_t v8 = (int *)(sub_100016C98(&qword_100080CB8) - 8);
  unint64_t v9 = (*(unsigned __int8 *)(*(void *)v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v8 + 80);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_10005E030;
  unint64_t v11 = v10 + v9 + v8[14];
  *(void *)(v10 + v9) = 1;
  *(void *)unint64_t v11 = a3;
  *(void *)(v11 + 8) = a4;
  *(unsigned char *)(v11 + 16) = 2;
  uint64_t v12 = enum case for _NameMap.NameDescription.standard(_:);
  uint64_t v13 = sub_100058FE0();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 104))(v11, v12, v13);
  return sub_100058FF0();
}

uint64_t CollectionID._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_10004F758(&qword_100080A68, (uint64_t)static CollectionID._protobuf_nameMap);
}

uint64_t static CollectionID._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10004F7D0(&qword_100080A68, (uint64_t)static CollectionID._protobuf_nameMap, a1);
}

uint64_t CollectionID.decodeMessage<A>(decoder:)()
{
  while (1)
  {
    uint64_t result = sub_100058EA0();
    if (v0 || (v2 & 1) != 0) {
      break;
    }
    if (result == 1) {
      sub_100058EF0();
    }
  }
  return result;
}

uint64_t CollectionID.traverse<A>(visitor:)()
{
  unint64_t v2 = v0[1];
  uint64_t v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0) {
    uint64_t v3 = *v0 & 0xFFFFFFFFFFFFLL;
  }
  if (!v3 || (uint64_t result = sub_100058FB0(), !v1))
  {
    type metadata accessor for CollectionID(0);
    return sub_100058E40();
  }
  return result;
}

Swift::Int CollectionID.hashValue.getter()
{
  return sub_10004FA98((void (*)(void))type metadata accessor for CollectionID, &qword_100082568, (void (*)(uint64_t))type metadata accessor for CollectionID);
}

uint64_t sub_10004F3E4@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  return _s19DPSubmissionService5EmptyVACycfC_0();
}

uint64_t sub_10004F40C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 20);
  uint64_t v5 = sub_100058E60();
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t sub_10004F47C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 20);
  uint64_t v5 = sub_100058E60();
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t (*sub_10004F4EC())(void, void, void)
{
  return PPM_0_2_1.QueryType.enumValue.getter;
}

uint64_t sub_10004F510()
{
  return CollectionID.decodeMessage<A>(decoder:)();
}

uint64_t sub_10004F528()
{
  return CollectionID.traverse<A>(visitor:)();
}

uint64_t sub_10004F540(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100050644(&qword_100082AF0, (void (*)(uint64_t))type metadata accessor for CollectionID);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10004F5BC@<X0>(uint64_t a1@<X8>)
{
  return sub_10004FBF0(&qword_100080A68, (uint64_t)static CollectionID._protobuf_nameMap, a1);
}

uint64_t sub_10004F5E0(uint64_t a1)
{
  uint64_t v2 = sub_100050644(&qword_1000825E8, (void (*)(uint64_t))type metadata accessor for CollectionID);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10004F64C()
{
  sub_100050644(&qword_1000825E8, (void (*)(uint64_t))type metadata accessor for CollectionID);
  return sub_100058F50();
}

const char *Empty.protoMessageName.unsafeMutableAddressor()
{
  return "Empty";
}

uint64_t static Empty.protoMessageName.getter()
{
  return 0x7974706D45;
}

uint64_t sub_10004F6E8()
{
  uint64_t v0 = sub_100059010();
  sub_100016FD8(v0, static Empty._protobuf_nameMap);
  sub_100015988(v0, (uint64_t)static Empty._protobuf_nameMap);
  return sub_100059000();
}

uint64_t Empty._protobuf_nameMap.unsafeMutableAddressor()
{
  return sub_10004F758(&qword_100080A70, (uint64_t)static Empty._protobuf_nameMap);
}

uint64_t sub_10004F758(void *a1, uint64_t a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v3 = sub_100059010();
  return sub_100015988(v3, a2);
}

uint64_t static Empty._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_10004F7D0(&qword_100080A70, (uint64_t)static Empty._protobuf_nameMap, a1);
}

uint64_t sub_10004F7D0@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = sub_100059010();
  uint64_t v6 = sub_100015988(v5, a2);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v7(a3, v6, v5);
}

uint64_t Empty.decodeMessage<A>(decoder:)()
{
  do
    uint64_t result = sub_100058EA0();
  while (!v0 && (v2 & 1) == 0);
  return result;
}

uint64_t Empty.traverse<A>(visitor:)()
{
  return sub_100058E40();
}

uint64_t static Empty.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100058E60();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v14 - v9;
  unint64_t v11 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v11((char *)&v14 - v9, a1, v4);
  v11(v8, a2, v4);
  sub_100050644(&qword_100080CC0, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
  LOBYTE(a2) = sub_1000591C0();
  uint64_t v12 = *(void (**)(char *, uint64_t))(v5 + 8);
  v12(v8, v4);
  v12(v10, v4);
  return a2 & 1;
}

Swift::Int Empty.hashValue.getter()
{
  return sub_10004FA98((void (*)(void))type metadata accessor for Empty, &qword_100082570, (void (*)(uint64_t))type metadata accessor for Empty);
}

Swift::Int sub_10004FA98(void (*a1)(void), unint64_t *a2, void (*a3)(uint64_t))
{
  return sub_100059480();
}

uint64_t sub_10004FB20()
{
  return Empty.decodeMessage<A>(decoder:)();
}

uint64_t sub_10004FB38()
{
  return Empty.traverse<A>(visitor:)();
}

uint64_t sub_10004FB50(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100050644(&qword_100082AE8, (void (*)(uint64_t))type metadata accessor for Empty);
  return _MessageImplementationBase.isEqualTo(message:)(a1, a2, v4);
}

uint64_t sub_10004FBCC@<X0>(uint64_t a1@<X8>)
{
  return sub_10004FBF0(&qword_100080A70, (uint64_t)static Empty._protobuf_nameMap, a1);
}

uint64_t sub_10004FBF0@<X0>(void *a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = sub_100059010();
  uint64_t v6 = sub_100015988(v5, a2);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v7(a3, v6, v5);
}

uint64_t sub_10004FC8C(uint64_t a1)
{
  uint64_t v2 = sub_100050644(&qword_100082600, (void (*)(uint64_t))type metadata accessor for Empty);
  return Message.debugDescription.getter(a1, v2);
}

uint64_t sub_10004FCF8()
{
  sub_100050644(&qword_100082600, (void (*)(uint64_t))type metadata accessor for Empty);
  return sub_100058F50();
}

uint64_t _s19DPSubmissionService25LoadTestExperimentalSetupV2eeoiySbAC_ACtFZ_0(char *a1, char *a2)
{
  uint64_t v4 = sub_100058E60();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v16 - v9;
  if (*(_DWORD *)a1 == *(_DWORD *)a2
    && *((_DWORD *)a1 + 1) == *((_DWORD *)a2 + 1)
    && *((_DWORD *)a1 + 2) == *((_DWORD *)a2 + 2))
  {
    uint64_t TestExperimentalSetup = type metadata accessor for LoadTestExperimentalSetup(0);
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v12(v10, &a1[*(int *)(TestExperimentalSetup + 28)], v4);
    v12(v8, &a2[*(int *)(TestExperimentalSetup + 28)], v4);
    sub_100050644(&qword_100080CC0, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
    char v13 = sub_1000591C0();
    uint64_t v14 = *(void (**)(char *, uint64_t))(v5 + 8);
    v14(v8, v4);
    v14(v10, v4);
  }
  else
  {
    char v13 = 0;
  }
  return v13 & 1;
}

uint64_t _s19DPSubmissionService19BaaCertificateChainV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100058E60();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v16 - v9;
  if (_s19DPSubmissionService9PPM_0_2_1V3UrlV23__derived_struct_equalsySbAE_AEtFZ_0(*(void *)a1, *(void *)(a1 + 8), *(void *)a2, *(void *)(a2 + 8)) & 1) != 0&& (_s19DPSubmissionService9PPM_0_2_1V3UrlV23__derived_struct_equalsySbAE_AEtFZ_0(*(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a2 + 16), *(void *)(a2 + 24)))
  {
    uint64_t v11 = type metadata accessor for BaaCertificateChain(0);
    uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v12(v10, a1 + *(int *)(v11 + 24), v4);
    v12(v8, a2 + *(int *)(v11 + 24), v4);
    sub_100050644(&qword_100080CC0, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
    char v13 = sub_1000591C0();
    uint64_t v14 = *(void (**)(char *, uint64_t))(v5 + 8);
    v14(v8, v4);
    v14(v10, v4);
  }
  else
  {
    char v13 = 0;
  }
  return v13 & 1;
}

uint64_t _s19DPSubmissionService17ProtectedDonationV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100058E60();
  uint64_t v47 = *(void *)(v4 - 8);
  uint64_t v48 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v46 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v45 = (char *)&v42 - v7;
  uint64_t v8 = sub_100058E10();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  size_t v42 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100016C98(&qword_100082B38);
  uint64_t v12 = v11 - 8;
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100016C98(&qword_100080B00);
  uint64_t v16 = __chkstk_darwin(v15 - 8);
  uint64_t v49 = (uint64_t)&v42 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v16);
  unint64_t v20 = (char *)&v42 - v19;
  __chkstk_darwin(v18);
  unint64_t v22 = (char *)&v42 - v21;
  uint64_t v23 = type metadata accessor for ProtectedDonation(0);
  uint64_t v24 = *(int *)(v23 + 20);
  uint64_t v43 = a1;
  uint64_t v25 = a1 + v24;
  uint64_t v26 = v9;
  sub_10004AD18(v25, (uint64_t)v22, &qword_100080B00);
  uint64_t v27 = *(int *)(v23 + 20);
  uint64_t v44 = a2;
  sub_10004AD18(a2 + v27, (uint64_t)v20, &qword_100080B00);
  uint64_t v28 = (uint64_t)&v14[*(int *)(v12 + 56)];
  sub_10004AD18((uint64_t)v22, (uint64_t)v14, &qword_100080B00);
  sub_10004AD18((uint64_t)v20, v28, &qword_100080B00);
  uint64_t v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v29((uint64_t)v14, 1, v8) != 1)
  {
    uint64_t v30 = v49;
    sub_10004AD18((uint64_t)v14, v49, &qword_100080B00);
    if (v29(v28, 1, v8) != 1)
    {
      uint64_t v31 = v42;
      (*(void (**)(char *, uint64_t, uint64_t))(v26 + 32))(v42, v28, v8);
      sub_100050644((unint64_t *)&unk_100082B40, (void (*)(uint64_t))&type metadata accessor for Ckcode_ProtectedEnvelope);
      char v32 = sub_1000591C0();
      uint64_t v33 = *(void (**)(char *, uint64_t))(v26 + 8);
      v33(v31, v8);
      sub_100016F18((uint64_t)v20, &qword_100080B00);
      sub_100016F18((uint64_t)v22, &qword_100080B00);
      v33((char *)v30, v8);
      sub_100016F18((uint64_t)v14, &qword_100080B00);
      if (v32) {
        goto LABEL_8;
      }
LABEL_9:
      char v39 = 0;
      return v39 & 1;
    }
    sub_100016F18((uint64_t)v20, &qword_100080B00);
    sub_100016F18((uint64_t)v22, &qword_100080B00);
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v30, v8);
LABEL_6:
    sub_100016F18((uint64_t)v14, &qword_100082B38);
    goto LABEL_9;
  }
  sub_100016F18((uint64_t)v20, &qword_100080B00);
  sub_100016F18((uint64_t)v22, &qword_100080B00);
  if (v29(v28, 1, v8) != 1) {
    goto LABEL_6;
  }
  sub_100016F18((uint64_t)v14, &qword_100080B00);
LABEL_8:
  uint64_t v35 = v47;
  uint64_t v34 = v48;
  uint64_t v36 = *(void (**)(char *, uint64_t, uint64_t))(v47 + 16);
  unint64_t v37 = v45;
  v36(v45, v43, v48);
  uint64_t v38 = v46;
  v36(v46, v44, v34);
  sub_100050644(&qword_100080CC0, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
  char v39 = sub_1000591C0();
  uint64_t v40 = *(void (**)(char *, uint64_t))(v35 + 8);
  v40(v38, v34);
  v40(v37, v34);
  return v39 & 1;
}

uint64_t sub_100050644(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s19DPSubmissionService17BaaSignedDonationV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100058E60();
  uint64_t v54 = *(void *)(v4 - 8);
  uint64_t v55 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v53 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v47 - v7;
  uint64_t v9 = type metadata accessor for BaaCertificateChain(0);
  uint64_t v56 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100016C98(&qword_100082B30);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100016C98(&qword_100080B10);
  uint64_t v16 = __chkstk_darwin(v15 - 8);
  uint64_t v18 = (char *)&v47 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = (char *)&v47 - v20;
  __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v47 - v22;
  if ((_s19DPSubmissionService9PPM_0_2_1V3UrlV23__derived_struct_equalsySbAE_AEtFZ_0(*(void *)a1, *(void *)(a1 + 8), *(void *)a2, *(void *)(a2 + 8)) & 1) == 0)goto LABEL_16; {
  uint64_t v51 = v18;
  }
  int64_t v52 = v21;
  uint64_t v49 = v11;
  uint64_t v50 = v8;
  if ((_s19DPSubmissionService9PPM_0_2_1V3UrlV23__derived_struct_equalsySbAE_AEtFZ_0(*(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a2 + 16), *(void *)(a2 + 24)) & 1) == 0)goto LABEL_16; {
  uint64_t v24 = a2;
  }
  uint64_t v25 = a1;
  uint64_t v26 = type metadata accessor for BaaSignedDonation(0);
  uint64_t v27 = (uint64_t)v23;
  sub_10004AD18(a1 + *(int *)(v26 + 28), (uint64_t)v23, &qword_100080B10);
  uint64_t v28 = (uint64_t)v52;
  sub_10004AD18(v24 + *(int *)(v26 + 28), (uint64_t)v52, &qword_100080B10);
  uint64_t v29 = (uint64_t)&v14[*(int *)(v12 + 48)];
  sub_10004AD18(v27, (uint64_t)v14, &qword_100080B10);
  sub_10004AD18(v28, v29, &qword_100080B10);
  uint64_t v30 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v56 + 48);
  int v31 = v30(v14, 1, v9);
  uint64_t v48 = v26;
  if (v31 != 1)
  {
    uint64_t v41 = (uint64_t)v51;
    sub_10004AD18((uint64_t)v14, (uint64_t)v51, &qword_100080B10);
    if (v30((char *)v29, 1, v9) != 1)
    {
      uint64_t v56 = v25;
      uint64_t v44 = (uint64_t)v49;
      sub_100049C00(v29, (uint64_t)v49, type metadata accessor for BaaCertificateChain);
      if (_s19DPSubmissionService9PPM_0_2_1V3UrlV23__derived_struct_equalsySbAE_AEtFZ_0(*(void *)v41, *(void *)(v41 + 8), *(void *)v44, *(void *)(v44 + 8)) & 1) != 0&& (_s19DPSubmissionService9PPM_0_2_1V3UrlV23__derived_struct_equalsySbAE_AEtFZ_0(*(void *)(v41 + 16), *(void *)(v41 + 24), *(void *)(v44 + 16), *(void *)(v44 + 24)))
      {
        sub_100050644(&qword_100080CC0, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
        char v45 = sub_1000591C0();
        sub_10004B0C4(v44, type metadata accessor for BaaCertificateChain);
        sub_100016F18(v28, &qword_100080B10);
        sub_100016F18(v27, &qword_100080B10);
        sub_10004B0C4(v41, type metadata accessor for BaaCertificateChain);
        sub_100016F18((uint64_t)v14, &qword_100080B10);
        uint64_t v25 = v56;
        if (v45) {
          goto LABEL_6;
        }
LABEL_16:
        char v39 = 0;
        return v39 & 1;
      }
      sub_10004B0C4(v44, type metadata accessor for BaaCertificateChain);
      sub_100016F18(v28, &qword_100080B10);
      sub_100016F18(v27, &qword_100080B10);
      sub_10004B0C4(v41, type metadata accessor for BaaCertificateChain);
      uint64_t v43 = (uint64_t)v14;
      size_t v42 = &qword_100080B10;
LABEL_15:
      sub_100016F18(v43, v42);
      goto LABEL_16;
    }
    sub_100016F18(v28, &qword_100080B10);
    sub_100016F18(v27, &qword_100080B10);
    sub_10004B0C4(v41, type metadata accessor for BaaCertificateChain);
LABEL_9:
    size_t v42 = &qword_100082B30;
    uint64_t v43 = (uint64_t)v14;
    goto LABEL_15;
  }
  sub_100016F18(v28, &qword_100080B10);
  sub_100016F18(v27, &qword_100080B10);
  if (v30((char *)v29, 1, v9) != 1) {
    goto LABEL_9;
  }
  sub_100016F18((uint64_t)v14, &qword_100080B10);
LABEL_6:
  uint64_t v32 = v48;
  uint64_t v34 = v54;
  uint64_t v33 = v55;
  uint64_t v35 = *(void (**)(char *, uint64_t, uint64_t))(v54 + 16);
  uint64_t v36 = v50;
  v35(v50, v25 + *(int *)(v48 + 24), v55);
  uint64_t v37 = v24 + *(int *)(v32 + 24);
  uint64_t v38 = v53;
  v35(v53, v37, v33);
  sub_100050644(&qword_100080CC0, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
  char v39 = sub_1000591C0();
  uint64_t v40 = *(void (**)(char *, uint64_t))(v34 + 8);
  v40(v38, v33);
  v40(v36, v33);
  return v39 & 1;
}

uint64_t _s19DPSubmissionService15DediscoDonationV2eeoiySbAC_ACtFZ_0(void *a1, void *a2)
{
  uint64_t v4 = sub_100058E60();
  uint64_t v44 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v43 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  size_t v42 = (char *)&v39 - v7;
  uint64_t v8 = type metadata accessor for DediscoDonation.AlgorithmParameters(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v45 = (uint64_t)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100016C98(&qword_100082B28);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100016C98(&qword_100081A10);
  uint64_t v15 = __chkstk_darwin(v14 - 8);
  uint64_t v46 = (uint64_t)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v39 - v18;
  __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v39 - v20;
  if (*a1 != *a2 || a1[1] != a2[1])
  {
    char v22 = 0;
    if ((sub_100059400() & 1) == 0) {
      return v22 & 1;
    }
  }
  if (a1[2] != a2[2] || a1[3] != a2[3])
  {
    char v22 = 0;
    if ((sub_100059400() & 1) == 0) {
      return v22 & 1;
    }
  }
  uint64_t v41 = v4;
  uint64_t v23 = type metadata accessor for DediscoDonation(0);
  sub_10004AD18((uint64_t)a1 + *(int *)(v23 + 52), (uint64_t)v21, &qword_100081A10);
  uint64_t v40 = v23;
  sub_10004AD18((uint64_t)a2 + *(int *)(v23 + 52), (uint64_t)v19, &qword_100081A10);
  uint64_t v24 = (uint64_t)&v13[*(int *)(v11 + 48)];
  sub_10004AD18((uint64_t)v21, (uint64_t)v13, &qword_100081A10);
  sub_10004AD18((uint64_t)v19, v24, &qword_100081A10);
  uint64_t v25 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v25((uint64_t)v13, 1, v8) == 1)
  {
    sub_100016F18((uint64_t)v19, &qword_100081A10);
    sub_100016F18((uint64_t)v21, &qword_100081A10);
    if (v25(v24, 1, v8) == 1)
    {
      sub_100016F18((uint64_t)v13, &qword_100081A10);
      goto LABEL_14;
    }
LABEL_12:
    sub_100016F18((uint64_t)v13, &qword_100082B28);
    goto LABEL_27;
  }
  uint64_t v26 = v46;
  sub_10004AD18((uint64_t)v13, v46, &qword_100081A10);
  if (v25(v24, 1, v8) == 1)
  {
    sub_100016F18((uint64_t)v19, &qword_100081A10);
    sub_100016F18((uint64_t)v21, &qword_100081A10);
    sub_10004B0C4(v26, type metadata accessor for DediscoDonation.AlgorithmParameters);
    goto LABEL_12;
  }
  uint64_t v27 = v45;
  sub_100049C00(v24, v45, type metadata accessor for DediscoDonation.AlgorithmParameters);
  char v28 = _s19DPSubmissionService15DediscoDonationV19AlgorithmParametersV2eeoiySbAE_AEtFZ_0(v26, v27);
  sub_10004B0C4(v27, type metadata accessor for DediscoDonation.AlgorithmParameters);
  sub_100016F18((uint64_t)v19, &qword_100081A10);
  sub_100016F18((uint64_t)v21, &qword_100081A10);
  sub_10004B0C4(v26, type metadata accessor for DediscoDonation.AlgorithmParameters);
  sub_100016F18((uint64_t)v13, &qword_100081A10);
  if ((v28 & 1) == 0) {
    goto LABEL_27;
  }
LABEL_14:
  if ((_s19DPSubmissionService9PPM_0_2_1V3UrlV23__derived_struct_equalsySbAE_AEtFZ_0(a1[4], a1[5], a2[4], a2[5]) & 1) == 0
    || (_s19DPSubmissionService9PPM_0_2_1V3UrlV23__derived_struct_equalsySbAE_AEtFZ_0(a1[6], a1[7], a2[6], a2[7]) & 1) == 0)
  {
    goto LABEL_27;
  }
  uint64_t v29 = v41;
  if (a1[8] == a2[8] && a1[9] == a2[9] || (char v22 = 0, (sub_100059400() & 1) != 0))
  {
    if (a1[10] == a2[10] && a1[11] == a2[11] || (char v22 = 0, (sub_100059400() & 1) != 0))
    {
      if (a1[12] == a2[12] && a1[13] == a2[13] || (char v22 = 0, (sub_100059400() & 1) != 0))
      {
        if (_s19DPSubmissionService9PPM_0_2_1V3UrlV23__derived_struct_equalsySbAE_AEtFZ_0(a1[14], a1[15], a2[14], a2[15]))
        {
          uint64_t v30 = v40;
          int v31 = (char *)a1 + *(int *)(v40 + 48);
          uint64_t v32 = v44;
          uint64_t v33 = *(void (**)(char *, char *, uint64_t))(v44 + 16);
          uint64_t v34 = v42;
          v33(v42, v31, v29);
          uint64_t v35 = (char *)a2 + *(int *)(v30 + 48);
          uint64_t v36 = v43;
          v33(v43, v35, v29);
          sub_100050644(&qword_100080CC0, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
          char v22 = sub_1000591C0();
          uint64_t v37 = *(void (**)(char *, uint64_t))(v32 + 8);
          v37(v36, v29);
          v37(v34, v29);
          return v22 & 1;
        }
LABEL_27:
        char v22 = 0;
      }
    }
  }
  return v22 & 1;
}

uint64_t _s19DPSubmissionService15DediscoDonationV19AlgorithmParametersV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100058E60();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v16 - v9;
  if (*(void *)a1 == *(void *)a2
    && *(double *)(a1 + 8) == *(double *)(a2 + 8)
    && (_s19DPSubmissionService9PPM_0_2_1V3UrlV23__derived_struct_equalsySbAE_AEtFZ_0(*(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a2 + 16), *(void *)(a2 + 24)) & 1) != 0)
  {
    uint64_t v11 = type metadata accessor for DediscoDonation.AlgorithmParameters(0);
    uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v12(v10, a1 + *(int *)(v11 + 28), v4);
    v12(v8, a2 + *(int *)(v11 + 28), v4);
    sub_100050644(&qword_100080CC0, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
    char v13 = sub_1000591C0();
    uint64_t v14 = *(void (**)(char *, uint64_t))(v5 + 8);
    v14(v8, v4);
    v14(v10, v4);
  }
  else
  {
    char v13 = 0;
  }
  return v13 & 1;
}

uint64_t _s19DPSubmissionService12CollectionIDV2eeoiySbAC_ACtFZ_0(char *a1, char *a2)
{
  uint64_t v4 = sub_100058E60();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v17 - v9;
  BOOL v11 = *(void *)a1 == *(void *)a2 && *((void *)a1 + 1) == *((void *)a2 + 1);
  if (v11 || (char v12 = 0, (sub_100059400() & 1) != 0))
  {
    uint64_t v13 = type metadata accessor for CollectionID(0);
    uint64_t v14 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v14(v10, &a1[*(int *)(v13 + 20)], v4);
    v14(v8, &a2[*(int *)(v13 + 20)], v4);
    sub_100050644(&qword_100080CC0, (void (*)(uint64_t))&type metadata accessor for UnknownStorage);
    char v12 = sub_1000591C0();
    uint64_t v15 = *(void (**)(char *, uint64_t))(v5 + 8);
    v15(v8, v4);
    v15(v10, v4);
  }
  return v12 & 1;
}

uint64_t type metadata accessor for Empty(uint64_t a1)
{
  return sub_10005165C(a1, qword_100082AB0);
}

uint64_t sub_10005165C(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100051694()
{
  return sub_100050644(&qword_100082578, (void (*)(uint64_t))type metadata accessor for LoadTestExperimentalSetup);
}

uint64_t sub_1000516DC()
{
  return sub_100050644(&qword_100082580, (void (*)(uint64_t))type metadata accessor for LoadTestExperimentalSetup);
}

uint64_t sub_100051724()
{
  return sub_100050644(&qword_100082538, (void (*)(uint64_t))type metadata accessor for LoadTestExperimentalSetup);
}

uint64_t sub_10005176C()
{
  return sub_100050644(&qword_100082588, (void (*)(uint64_t))type metadata accessor for LoadTestExperimentalSetup);
}

uint64_t sub_1000517B4()
{
  return sub_100050644(&qword_100082590, (void (*)(uint64_t))type metadata accessor for ProtectedDonation);
}

uint64_t sub_1000517FC()
{
  return sub_100050644(&qword_100080AF0, (void (*)(uint64_t))type metadata accessor for ProtectedDonation);
}

uint64_t sub_100051844()
{
  return sub_100050644(&qword_100082540, (void (*)(uint64_t))type metadata accessor for ProtectedDonation);
}

uint64_t sub_10005188C()
{
  return sub_100050644(&qword_100082598, (void (*)(uint64_t))type metadata accessor for ProtectedDonation);
}

uint64_t sub_1000518D4()
{
  return sub_100050644(&qword_1000825A0, (void (*)(uint64_t))type metadata accessor for BaaSignedDonation);
}

uint64_t sub_10005191C()
{
  return sub_100050644(&qword_100080AE8, (void (*)(uint64_t))type metadata accessor for BaaSignedDonation);
}

uint64_t sub_100051964()
{
  return sub_100050644(&qword_100082548, (void (*)(uint64_t))type metadata accessor for BaaSignedDonation);
}

uint64_t sub_1000519AC()
{
  return sub_100050644(&qword_1000825A8, (void (*)(uint64_t))type metadata accessor for BaaSignedDonation);
}

uint64_t sub_1000519F4()
{
  return sub_100050644(&qword_1000825B0, (void (*)(uint64_t))type metadata accessor for BaaCertificateChain);
}

uint64_t sub_100051A3C()
{
  return sub_100050644(&qword_100080B08, (void (*)(uint64_t))type metadata accessor for BaaCertificateChain);
}

uint64_t sub_100051A84()
{
  return sub_100050644(&qword_100082550, (void (*)(uint64_t))type metadata accessor for BaaCertificateChain);
}

uint64_t sub_100051ACC()
{
  return sub_100050644(&qword_1000825B8, (void (*)(uint64_t))type metadata accessor for BaaCertificateChain);
}

uint64_t sub_100051B14()
{
  return sub_100050644(&qword_1000825C0, (void (*)(uint64_t))type metadata accessor for DediscoDonation);
}

uint64_t sub_100051B5C()
{
  return sub_100050644(&qword_1000819D8, (void (*)(uint64_t))type metadata accessor for DediscoDonation);
}

uint64_t sub_100051BA4()
{
  return sub_100050644(&qword_100082558, (void (*)(uint64_t))type metadata accessor for DediscoDonation);
}

uint64_t sub_100051BEC()
{
  return sub_100050644(&qword_1000825C8, (void (*)(uint64_t))type metadata accessor for DediscoDonation);
}

uint64_t sub_100051C34()
{
  return sub_100050644(&qword_1000825D0, (void (*)(uint64_t))type metadata accessor for DediscoDonation.AlgorithmParameters);
}

uint64_t sub_100051C7C()
{
  return sub_100050644(&qword_100081A08, (void (*)(uint64_t))type metadata accessor for DediscoDonation.AlgorithmParameters);
}

uint64_t sub_100051CC4()
{
  return sub_100050644(&qword_100082560, (void (*)(uint64_t))type metadata accessor for DediscoDonation.AlgorithmParameters);
}

uint64_t sub_100051D0C()
{
  return sub_100050644(&qword_1000825D8, (void (*)(uint64_t))type metadata accessor for DediscoDonation.AlgorithmParameters);
}

uint64_t sub_100051D54()
{
  return sub_100050644(&qword_1000825E0, (void (*)(uint64_t))type metadata accessor for CollectionID);
}

uint64_t sub_100051D9C()
{
  return sub_100050644(&qword_1000825E8, (void (*)(uint64_t))type metadata accessor for CollectionID);
}

uint64_t sub_100051DE4()
{
  return sub_100050644(&qword_100082568, (void (*)(uint64_t))type metadata accessor for CollectionID);
}

uint64_t sub_100051E2C()
{
  return sub_100050644(&qword_1000825F0, (void (*)(uint64_t))type metadata accessor for CollectionID);
}

uint64_t sub_100051E74()
{
  return sub_100050644(&qword_1000825F8, (void (*)(uint64_t))type metadata accessor for Empty);
}

uint64_t sub_100051EBC()
{
  return sub_100050644(&qword_100082600, (void (*)(uint64_t))type metadata accessor for Empty);
}

uint64_t sub_100051F04()
{
  return sub_100050644(&qword_100082570, (void (*)(uint64_t))type metadata accessor for Empty);
}

uint64_t sub_100051F4C()
{
  return sub_100050644(&qword_100082608, (void (*)(uint64_t))type metadata accessor for Empty);
}

void *initializeBufferWithCopyOfBuffer for LoadTestExperimentalSetup(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    void *v3 = *a2;
    uint64_t v3 = (void *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(void *)a1 = *a2;
    *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
    uint64_t v5 = *(int *)(a3 + 28);
    uint64_t v6 = a1 + v5;
    uint64_t v7 = (uint64_t)a2 + v5;
    uint64_t v8 = sub_100058E60();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t destroy for LoadTestExperimentalSetup(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 28);
  uint64_t v3 = sub_100058E60();
  int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
  return v4(v2, v3);
}

uint64_t initializeWithCopy for LoadTestExperimentalSetup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = sub_100058E60();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

_DWORD *assignWithCopy for LoadTestExperimentalSetup(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = sub_100058E60();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

uint64_t initializeWithTake for LoadTestExperimentalSetup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = sub_100058E60();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for LoadTestExperimentalSetup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = sub_100058E60();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for LoadTestExperimentalSetup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000522FC);
}

uint64_t sub_1000522FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + *(int *)(a3 + 28);
  uint64_t v5 = sub_100058E60();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48);
  return v6(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for LoadTestExperimentalSetup(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100052380);
}

uint64_t sub_100052380(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1 + *(int *)(a4 + 28);
  uint64_t v6 = sub_100058E60();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);
  return v7(v5, a2, a2, v6);
}

uint64_t sub_1000523F4()
{
  return sub_100055B0C();
}

uint64_t *initializeBufferWithCopyOfBuffer for ProtectedDonation(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_100058E60();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = sub_100058E10();
    uint64_t v12 = *(void *)(v11 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
    {
      uint64_t v13 = sub_100016C98(&qword_100080B00);
      memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
  }
  return a1;
}

uint64_t destroy for ProtectedDonation(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100058E60();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = sub_100058E10();
  uint64_t v9 = *(void *)(v6 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v5, 1, v6);
  if (!result)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 8);
    return v8(v5, v6);
  }
  return result;
}

uint64_t initializeWithCopy for ProtectedDonation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100058E60();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = sub_100058E10();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    uint64_t v12 = sub_100016C98(&qword_100080B00);
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  return a1;
}

uint64_t assignWithCopy for ProtectedDonation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100058E60();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = sub_100058E10();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 24))(v8, v9, v10);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    uint64_t v15 = sub_100016C98(&qword_100080B00);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v11 + 16))(v8, v9, v10);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  return a1;
}

uint64_t initializeWithTake for ProtectedDonation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100058E60();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = sub_100058E10();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    uint64_t v12 = sub_100016C98(&qword_100080B00);
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  return a1;
}

uint64_t assignWithTake for ProtectedDonation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100058E60();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = sub_100058E10();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 40))(v8, v9, v10);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    uint64_t v15 = sub_100016C98(&qword_100080B00);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v11 + 32))(v8, v9, v10);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for ProtectedDonation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100052CC8);
}

uint64_t sub_100052CC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100058E60();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = sub_100016C98(&qword_100080B00);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 20);
    return v11(v13, a2, v12);
  }
}

uint64_t storeEnumTagSinglePayload for ProtectedDonation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100052DD8);
}

uint64_t sub_100052DD8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = sub_100058E60();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, v8);
  }
  else
  {
    uint64_t v12 = sub_100016C98(&qword_100080B00);
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a4 + 20);
    return v13(v15, a2, a2, v14);
  }
}

void sub_100052EE0()
{
  sub_100058E60();
  if (v0 <= 0x3F)
  {
    sub_100053E70(319, (unint64_t *)&unk_100082710, (void (*)(uint64_t))&type metadata accessor for Ckcode_ProtectedEnvelope);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for BaaSignedDonation(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v22 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v22 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_100016E5C(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = a2[2];
    unint64_t v10 = a2[3];
    sub_100016E5C(v9, v10);
    a1[2] = v9;
    a1[3] = v10;
    uint64_t v11 = *(int *)(a3 + 24);
    uint64_t v12 = (char *)a1 + v11;
    uint64_t v13 = (char *)a2 + v11;
    uint64_t v14 = sub_100058E60();
    uint64_t v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16);
    v15(v12, v13, v14);
    uint64_t v16 = *(int *)(a3 + 28);
    uint64_t v17 = (uint64_t *)((char *)a1 + v16);
    uint64_t v18 = (uint64_t *)((char *)a2 + v16);
    uint64_t v19 = type metadata accessor for BaaCertificateChain(0);
    uint64_t v20 = *(void *)(v19 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
    {
      uint64_t v21 = sub_100016C98(&qword_100080B10);
      memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      uint64_t v23 = *v18;
      unint64_t v24 = v18[1];
      sub_100016E5C(*v18, v24);
      *uint64_t v17 = v23;
      v17[1] = v24;
      uint64_t v25 = v18[2];
      unint64_t v26 = v18[3];
      sub_100016E5C(v25, v26);
      uint64_t v17[2] = v25;
      v17[3] = v26;
      v15((char *)v17 + *(int *)(v19 + 24), (char *)v18 + *(int *)(v19 + 24), v14);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
    }
  }
  return a1;
}

uint64_t destroy for BaaSignedDonation(uint64_t a1, uint64_t a2)
{
  sub_100016B2C(*(void *)a1, *(void *)(a1 + 8));
  sub_100016B2C(*(void *)(a1 + 16), *(void *)(a1 + 24));
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = sub_100058E60();
  unint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v10(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 28);
  uint64_t v7 = type metadata accessor for BaaCertificateChain(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7);
  if (!result)
  {
    sub_100016B2C(*(void *)v6, *(void *)(v6 + 8));
    sub_100016B2C(*(void *)(v6 + 16), *(void *)(v6 + 24));
    uint64_t v9 = v6 + *(int *)(v7 + 24);
    return ((uint64_t (*)(uint64_t, uint64_t))v10)(v9, v5);
  }
  return result;
}

uint64_t *initializeWithCopy for BaaSignedDonation(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_100016E5C(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  sub_100016E5C(v8, v9);
  a1[2] = v8;
  a1[3] = v9;
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = sub_100058E60();
  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16);
  v14(v11, v12, v13);
  uint64_t v15 = *(int *)(a3 + 28);
  uint64_t v16 = (uint64_t *)((char *)a1 + v15);
  uint64_t v17 = (uint64_t *)((char *)a2 + v15);
  uint64_t v18 = type metadata accessor for BaaCertificateChain(0);
  uint64_t v19 = *(void *)(v18 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
  {
    uint64_t v20 = sub_100016C98(&qword_100080B10);
    memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
  }
  else
  {
    uint64_t v21 = *v17;
    unint64_t v22 = v17[1];
    sub_100016E5C(*v17, v22);
    void *v16 = v21;
    v16[1] = v22;
    uint64_t v23 = v17[2];
    unint64_t v24 = v17[3];
    sub_100016E5C(v23, v24);
    void v16[2] = v23;
    v16[3] = v24;
    v14((char *)v16 + *(int *)(v18 + 24), (char *)v17 + *(int *)(v18 + 24), v13);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  }
  return a1;
}

uint64_t *assignWithCopy for BaaSignedDonation(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_100016E5C(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_100016B2C(v8, v9);
  uint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  sub_100016E5C(v10, v11);
  uint64_t v12 = a1[2];
  unint64_t v13 = a1[3];
  a1[2] = v10;
  a1[3] = v11;
  sub_100016B2C(v12, v13);
  uint64_t v14 = *(int *)(a3 + 24);
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = sub_100058E60();
  uint64_t v40 = *(void *)(v17 - 8);
  uint64_t v41 = v17;
  uint64_t v18 = *(void (**)(char *, char *))(v40 + 24);
  v18(v15, v16);
  uint64_t v19 = *(int *)(a3 + 28);
  uint64_t v20 = (uint64_t *)((char *)a1 + v19);
  uint64_t v21 = (uint64_t *)((char *)a2 + v19);
  uint64_t v22 = type metadata accessor for BaaCertificateChain(0);
  uint64_t v23 = *(void *)(v22 - 8);
  unint64_t v24 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v23 + 48);
  LODWORD(v16) = v24(v20, 1, v22);
  int v25 = v24(v21, 1, v22);
  if (!v16)
  {
    if (!v25)
    {
      uint64_t v32 = *v21;
      unint64_t v33 = v21[1];
      sub_100016E5C(*v21, v33);
      uint64_t v34 = *v20;
      unint64_t v35 = v20[1];
      uint64_t *v20 = v32;
      v20[1] = v33;
      sub_100016B2C(v34, v35);
      uint64_t v36 = v21[2];
      unint64_t v37 = v21[3];
      sub_100016E5C(v36, v37);
      uint64_t v38 = v20[2];
      unint64_t v39 = v20[3];
      _OWORD v20[2] = v36;
      v20[3] = v37;
      sub_100016B2C(v38, v39);
      ((void (*)(char *, char *, uint64_t))v18)((char *)v20 + *(int *)(v22 + 24), (char *)v21 + *(int *)(v22 + 24), v41);
      return a1;
    }
    sub_10004B0C4((uint64_t)v20, type metadata accessor for BaaCertificateChain);
    goto LABEL_6;
  }
  if (v25)
  {
LABEL_6:
    uint64_t v30 = sub_100016C98(&qword_100080B10);
    memcpy(v20, v21, *(void *)(*(void *)(v30 - 8) + 64));
    return a1;
  }
  uint64_t v26 = *v21;
  unint64_t v27 = v21[1];
  sub_100016E5C(*v21, v27);
  uint64_t *v20 = v26;
  v20[1] = v27;
  uint64_t v28 = v21[2];
  unint64_t v29 = v21[3];
  sub_100016E5C(v28, v29);
  _OWORD v20[2] = v28;
  v20[3] = v29;
  (*(void (**)(char *, char *, uint64_t))(v40 + 16))((char *)v20 + *(int *)(v22 + 24), (char *)v21 + *(int *)(v22 + 24), v41);
  (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  return a1;
}

_OWORD *initializeWithTake for BaaSignedDonation(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = (char *)a1 + v7;
  unint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = sub_100058E60();
  unint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32);
  v11(v8, v9, v10);
  uint64_t v12 = *(int *)(a3 + 28);
  unint64_t v13 = (_OWORD *)((char *)a1 + v12);
  uint64_t v14 = (_OWORD *)((char *)a2 + v12);
  uint64_t v15 = type metadata accessor for BaaCertificateChain(0);
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    uint64_t v17 = sub_100016C98(&qword_100080B10);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    long long v18 = v14[1];
    _OWORD *v13 = *v14;
    v13[1] = v18;
    v11((char *)v13 + *(int *)(v15 + 24), (char *)v14 + *(int *)(v15 + 24), v10);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  return a1;
}

uint64_t *assignWithTake for BaaSignedDonation(uint64_t *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_100016B2C(v6, v7);
  uint64_t v8 = a1[2];
  unint64_t v9 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  sub_100016B2C(v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  unint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = sub_100058E60();
  uint64_t v29 = *(void *)(v13 - 8);
  uint64_t v30 = v13;
  uint64_t v14 = *(void (**)(char *, char *))(v29 + 40);
  v14(v11, v12);
  uint64_t v15 = *(int *)(a3 + 28);
  uint64_t v16 = (uint64_t *)((char *)a1 + v15);
  uint64_t v17 = (uint64_t *)((char *)a2 + v15);
  uint64_t v18 = type metadata accessor for BaaCertificateChain(0);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v19 + 48);
  LODWORD(v12) = v20(v16, 1, v18);
  int v21 = v20(v17, 1, v18);
  if (!v12)
  {
    if (!v21)
    {
      uint64_t v25 = *v16;
      unint64_t v26 = v16[1];
      *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
      sub_100016B2C(v25, v26);
      uint64_t v27 = v16[2];
      unint64_t v28 = v16[3];
      *((_OWORD *)v16 + 1) = *((_OWORD *)v17 + 1);
      sub_100016B2C(v27, v28);
      ((void (*)(char *, char *, uint64_t))v14)((char *)v16 + *(int *)(v18 + 24), (char *)v17 + *(int *)(v18 + 24), v30);
      return a1;
    }
    sub_10004B0C4((uint64_t)v16, type metadata accessor for BaaCertificateChain);
    goto LABEL_6;
  }
  if (v21)
  {
LABEL_6:
    uint64_t v23 = sub_100016C98(&qword_100080B10);
    memcpy(v16, v17, *(void *)(*(void *)(v23 - 8) + 64));
    return a1;
  }
  long long v22 = *((_OWORD *)v17 + 1);
  *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
  *((_OWORD *)v16 + 1) = v22;
  (*(void (**)(char *, char *, uint64_t))(v29 + 32))((char *)v16 + *(int *)(v18 + 24), (char *)v17 + *(int *)(v18 + 24), v30);
  (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  return a1;
}

uint64_t getEnumTagSinglePayload for BaaSignedDonation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100053AF8);
}

uint64_t sub_100053AF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 12)
  {
    uint64_t v4 = *(void *)(a1 + 8) >> 60;
    if (((4 * v4) & 0xC) != 0) {
      return 16 - ((4 * v4) & 0xC | (v4 >> 2));
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = sub_100058E60();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 24);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_100016C98(&qword_100080B10);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 28);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t storeEnumTagSinglePayload for BaaSignedDonation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100053C48);
}

void *sub_100053C48(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 12)
  {
    *uint64_t result = 0;
    result[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
  }
  else
  {
    uint64_t v8 = sub_100058E60();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = (char *)v5 + *(int *)(a4 + 24);
      uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return (void *)v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_100016C98(&qword_100080B10);
      uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = (char *)v5 + *(int *)(a4 + 28);
      return (void *)v14(v16, a2, a2, v15);
    }
  }
  return result;
}

void sub_100053D80()
{
  sub_100058E60();
  if (v0 <= 0x3F)
  {
    sub_100053E70(319, (unint64_t *)&unk_1000827A8, (void (*)(uint64_t))type metadata accessor for BaaCertificateChain);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void sub_100053E70(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_1000592D0();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for BaaCertificateChain(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_100016E5C(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = a2[2];
    unint64_t v10 = a2[3];
    sub_100016E5C(v9, v10);
    a1[2] = v9;
    a1[3] = v10;
    uint64_t v11 = *(int *)(a3 + 24);
    uint64_t v12 = (char *)a1 + v11;
    uint64_t v13 = (char *)a2 + v11;
    uint64_t v14 = sub_100058E60();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
  }
  return a1;
}

uint64_t destroy for BaaCertificateChain(uint64_t a1, uint64_t a2)
{
  sub_100016B2C(*(void *)a1, *(void *)(a1 + 8));
  sub_100016B2C(*(void *)(a1 + 16), *(void *)(a1 + 24));
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = sub_100058E60();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

uint64_t *initializeWithCopy for BaaCertificateChain(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_100016E5C(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  sub_100016E5C(v8, v9);
  a1[2] = v8;
  a1[3] = v9;
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = sub_100058E60();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
  return a1;
}

uint64_t *assignWithCopy for BaaCertificateChain(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_100016E5C(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_100016B2C(v8, v9);
  uint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  sub_100016E5C(v10, v11);
  uint64_t v12 = a1[2];
  unint64_t v13 = a1[3];
  a1[2] = v10;
  a1[3] = v11;
  sub_100016B2C(v12, v13);
  uint64_t v14 = *(int *)(a3 + 24);
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = sub_100058E60();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 24))(v15, v16, v17);
  return a1;
}

_OWORD *initializeWithTake for BaaCertificateChain(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = (char *)a1 + v5;
  unint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = sub_100058E60();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t *assignWithTake for BaaCertificateChain(uint64_t *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_100016B2C(v6, v7);
  uint64_t v8 = a1[2];
  unint64_t v9 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  sub_100016B2C(v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  unint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = sub_100058E60();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 40))(v11, v12, v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for BaaCertificateChain(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000542DC);
}

uint64_t sub_1000542DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 12)
  {
    uint64_t v4 = *(void *)(a1 + 8) >> 60;
    if (((4 * v4) & 0xC) != 0) {
      return 16 - ((4 * v4) & 0xC | (v4 >> 2));
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = sub_100058E60();
    unint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for BaaCertificateChain(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000543AC);
}

void *sub_1000543AC(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 12)
  {
    *uint64_t result = 0;
    result[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
  }
  else
  {
    uint64_t v7 = sub_100058E60();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 24);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_10005445C()
{
  uint64_t result = sub_100058E60();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for DediscoDonation(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v29 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v29 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    uint64_t v9 = a2[4];
    unint64_t v10 = a2[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100016E5C(v9, v10);
    a1[4] = v9;
    a1[5] = v10;
    uint64_t v11 = a2[6];
    unint64_t v12 = a2[7];
    sub_100016E5C(v11, v12);
    a1[6] = v11;
    a1[7] = v12;
    uint64_t v13 = a2[9];
    a1[8] = a2[8];
    a1[9] = v13;
    uint64_t v14 = a2[11];
    a1[10] = a2[10];
    a1[11] = v14;
    uint64_t v15 = a2[13];
    a1[12] = a2[12];
    a1[13] = v15;
    uint64_t v16 = a2[14];
    unint64_t v17 = a2[15];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100016E5C(v16, v17);
    a1[14] = v16;
    a1[15] = v17;
    uint64_t v18 = *(int *)(a3 + 48);
    uint64_t v19 = (char *)a1 + v18;
    uint64_t v20 = (char *)a2 + v18;
    uint64_t v21 = sub_100058E60();
    long long v22 = *(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 16);
    v22(v19, v20, v21);
    uint64_t v23 = *(int *)(a3 + 52);
    unint64_t v24 = (uint64_t *)((char *)a1 + v23);
    uint64_t v25 = (uint64_t *)((char *)a2 + v23);
    uint64_t v26 = type metadata accessor for DediscoDonation.AlgorithmParameters(0);
    uint64_t v27 = *(void *)(v26 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
    {
      uint64_t v28 = sub_100016C98(&qword_100081A10);
      memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
    }
    else
    {
      *(_OWORD *)unint64_t v24 = *(_OWORD *)v25;
      uint64_t v30 = v25[2];
      unint64_t v31 = v25[3];
      sub_100016E5C(v30, v31);
      _OWORD v24[2] = v30;
      v24[3] = v31;
      v22((char *)v24 + *(int *)(v26 + 28), (char *)v25 + *(int *)(v26 + 28), v21);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
    }
  }
  return a1;
}

uint64_t destroy for DediscoDonation(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100016B2C(*(void *)(a1 + 32), *(void *)(a1 + 40));
  sub_100016B2C(*(void *)(a1 + 48), *(void *)(a1 + 56));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100016B2C(*(void *)(a1 + 112), *(void *)(a1 + 120));
  uint64_t v4 = a1 + *(int *)(a2 + 48);
  uint64_t v5 = sub_100058E60();
  unint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v10(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 52);
  uint64_t v7 = type metadata accessor for DediscoDonation.AlgorithmParameters(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7);
  if (!result)
  {
    sub_100016B2C(*(void *)(v6 + 16), *(void *)(v6 + 24));
    uint64_t v9 = v6 + *(int *)(v7 + 28);
    return ((uint64_t (*)(uint64_t, uint64_t))v10)(v9, v5);
  }
  return result;
}

void *initializeWithCopy for DediscoDonation(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  uint64_t v8 = a2[4];
  unint64_t v9 = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100016E5C(v8, v9);
  a1[4] = v8;
  a1[5] = v9;
  uint64_t v10 = a2[6];
  unint64_t v11 = a2[7];
  sub_100016E5C(v10, v11);
  a1[6] = v10;
  a1[7] = v11;
  uint64_t v12 = a2[9];
  a1[8] = a2[8];
  a1[9] = v12;
  uint64_t v13 = a2[11];
  a1[10] = a2[10];
  a1[11] = v13;
  uint64_t v14 = a2[13];
  a1[12] = a2[12];
  a1[13] = v14;
  uint64_t v15 = a2[14];
  unint64_t v16 = a2[15];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100016E5C(v15, v16);
  a1[14] = v15;
  a1[15] = v16;
  uint64_t v17 = *(int *)(a3 + 48);
  uint64_t v18 = (char *)a1 + v17;
  uint64_t v19 = (char *)a2 + v17;
  uint64_t v20 = sub_100058E60();
  uint64_t v21 = *(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16);
  v21(v18, v19, v20);
  uint64_t v22 = *(int *)(a3 + 52);
  uint64_t v23 = (void *)((char *)a1 + v22);
  unint64_t v24 = (void *)((char *)a2 + v22);
  uint64_t v25 = type metadata accessor for DediscoDonation.AlgorithmParameters(0);
  uint64_t v26 = *(void *)(v25 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
  {
    uint64_t v27 = sub_100016C98(&qword_100081A10);
    memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64));
  }
  else
  {
    *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
    uint64_t v28 = v24[2];
    unint64_t v29 = v24[3];
    sub_100016E5C(v28, v29);
    v23[2] = v28;
    v23[3] = v29;
    v21((char *)v23 + *(int *)(v25 + 28), (char *)v24 + *(int *)(v25 + 28), v20);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
  }
  return a1;
}

void *assignWithCopy for DediscoDonation(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[4];
  unint64_t v7 = a2[5];
  sub_100016E5C(v6, v7);
  uint64_t v8 = a1[4];
  unint64_t v9 = a1[5];
  a1[4] = v6;
  a1[5] = v7;
  sub_100016B2C(v8, v9);
  uint64_t v10 = a2[6];
  unint64_t v11 = a2[7];
  sub_100016E5C(v10, v11);
  uint64_t v12 = a1[6];
  unint64_t v13 = a1[7];
  a1[6] = v10;
  a1[7] = v11;
  sub_100016B2C(v12, v13);
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[10] = a2[10];
  a1[11] = a2[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[12] = a2[12];
  a1[13] = a2[13];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v14 = a2[14];
  unint64_t v15 = a2[15];
  sub_100016E5C(v14, v15);
  uint64_t v16 = a1[14];
  unint64_t v17 = a1[15];
  a1[14] = v14;
  a1[15] = v15;
  sub_100016B2C(v16, v17);
  uint64_t v18 = *(int *)(a3 + 48);
  uint64_t v19 = (char *)a1 + v18;
  uint64_t v20 = (char *)a2 + v18;
  uint64_t v21 = sub_100058E60();
  uint64_t v38 = *(void *)(v21 - 8);
  uint64_t v39 = v21;
  uint64_t v22 = *(void (**)(char *, char *))(v38 + 24);
  v22(v19, v20);
  uint64_t v23 = *(int *)(a3 + 52);
  unint64_t v24 = (void *)((char *)a1 + v23);
  uint64_t v25 = (void *)((char *)a2 + v23);
  uint64_t v26 = type metadata accessor for DediscoDonation.AlgorithmParameters(0);
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v27 + 48);
  LODWORD(v20) = v28(v24, 1, v26);
  int v29 = v28(v25, 1, v26);
  if (!v20)
  {
    if (!v29)
    {
      *unint64_t v24 = *v25;
      v24[1] = v25[1];
      uint64_t v34 = v25[2];
      unint64_t v35 = v25[3];
      sub_100016E5C(v34, v35);
      uint64_t v36 = v24[2];
      unint64_t v37 = v24[3];
      _OWORD v24[2] = v34;
      v24[3] = v35;
      sub_100016B2C(v36, v37);
      ((void (*)(char *, char *, uint64_t))v22)((char *)v24 + *(int *)(v26 + 28), (char *)v25 + *(int *)(v26 + 28), v39);
      return a1;
    }
    sub_10004B0C4((uint64_t)v24, type metadata accessor for DediscoDonation.AlgorithmParameters);
    goto LABEL_6;
  }
  if (v29)
  {
LABEL_6:
    uint64_t v32 = sub_100016C98(&qword_100081A10);
    memcpy(v24, v25, *(void *)(*(void *)(v32 - 8) + 64));
    return a1;
  }
  *unint64_t v24 = *v25;
  v24[1] = v25[1];
  uint64_t v30 = v25[2];
  unint64_t v31 = v25[3];
  sub_100016E5C(v30, v31);
  _OWORD v24[2] = v30;
  v24[3] = v31;
  (*(void (**)(char *, char *, uint64_t))(v38 + 16))((char *)v24 + *(int *)(v26 + 28), (char *)v25 + *(int *)(v26 + 28), v39);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  return a1;
}

_OWORD *initializeWithTake for DediscoDonation(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  long long v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  long long v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  long long v9 = a2[7];
  uint64_t v10 = *(int *)(a3 + 48);
  unint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  a1[6] = a2[6];
  a1[7] = v9;
  uint64_t v13 = sub_100058E60();
  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32);
  v14(v11, v12, v13);
  uint64_t v15 = *(int *)(a3 + 52);
  uint64_t v16 = (_OWORD *)((char *)a1 + v15);
  unint64_t v17 = (_OWORD *)((char *)a2 + v15);
  uint64_t v18 = type metadata accessor for DediscoDonation.AlgorithmParameters(0);
  uint64_t v19 = *(void *)(v18 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
  {
    uint64_t v20 = sub_100016C98(&qword_100081A10);
    memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
  }
  else
  {
    long long v21 = v17[1];
    _OWORD *v16 = *v17;
    v16[1] = v21;
    v14((char *)v16 + *(int *)(v18 + 28), (char *)v17 + *(int *)(v18 + 28), v13);
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  }
  return a1;
}

void *assignWithTake for DediscoDonation(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 24);
  a1[2] = *(void *)(a2 + 16);
  a1[3] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a1[4];
  unint64_t v9 = a1[5];
  *((_OWORD *)a1 + 2) = *(_OWORD *)(a2 + 32);
  sub_100016B2C(v8, v9);
  uint64_t v10 = a1[6];
  unint64_t v11 = a1[7];
  *((_OWORD *)a1 + 3) = *(_OWORD *)(a2 + 48);
  sub_100016B2C(v10, v11);
  uint64_t v12 = *(void *)(a2 + 72);
  a1[8] = *(void *)(a2 + 64);
  a1[9] = v12;
  swift_bridgeObjectRelease();
  uint64_t v13 = *(void *)(a2 + 88);
  a1[10] = *(void *)(a2 + 80);
  a1[11] = v13;
  swift_bridgeObjectRelease();
  uint64_t v14 = *(void *)(a2 + 104);
  a1[12] = *(void *)(a2 + 96);
  a1[13] = v14;
  swift_bridgeObjectRelease();
  uint64_t v15 = a1[14];
  unint64_t v16 = a1[15];
  *((_OWORD *)a1 + 7) = *(_OWORD *)(a2 + 112);
  sub_100016B2C(v15, v16);
  uint64_t v17 = *(int *)(a3 + 48);
  uint64_t v18 = (char *)a1 + v17;
  uint64_t v19 = a2 + v17;
  uint64_t v20 = sub_100058E60();
  uint64_t v34 = *(void *)(v20 - 8);
  uint64_t v35 = v20;
  long long v21 = *(void (**)(char *, uint64_t))(v34 + 40);
  v21(v18, v19);
  uint64_t v22 = *(int *)(a3 + 52);
  uint64_t v23 = (void *)((char *)a1 + v22);
  unint64_t v24 = (_OWORD *)(a2 + v22);
  uint64_t v25 = type metadata accessor for DediscoDonation.AlgorithmParameters(0);
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v27 = *(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(v26 + 48);
  LODWORD(v19) = v27(v23, 1, v25);
  int v28 = v27(v24, 1, v25);
  if (!v19)
  {
    if (!v28)
    {
      *uint64_t v23 = *(void *)v24;
      v23[1] = *((void *)v24 + 1);
      uint64_t v32 = v23[2];
      unint64_t v33 = v23[3];
      *((_OWORD *)v23 + 1) = v24[1];
      sub_100016B2C(v32, v33);
      ((void (*)(char *, char *, uint64_t))v21)((char *)v23 + *(int *)(v25 + 28), (char *)v24 + *(int *)(v25 + 28), v35);
      return a1;
    }
    sub_10004B0C4((uint64_t)v23, type metadata accessor for DediscoDonation.AlgorithmParameters);
    goto LABEL_6;
  }
  if (v28)
  {
LABEL_6:
    uint64_t v30 = sub_100016C98(&qword_100081A10);
    memcpy(v23, v24, *(void *)(*(void *)(v30 - 8) + 64));
    return a1;
  }
  long long v29 = v24[1];
  *(_OWORD *)uint64_t v23 = *v24;
  *((_OWORD *)v23 + 1) = v29;
  (*(void (**)(char *, char *, uint64_t))(v34 + 32))((char *)v23 + *(int *)(v25 + 28), (char *)v24 + *(int *)(v25 + 28), v35);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
  return a1;
}

uint64_t getEnumTagSinglePayload for DediscoDonation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10005520C);
}

uint64_t sub_10005520C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_100058E60();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 48);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_100016C98(&qword_100081A10);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 52);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t storeEnumTagSinglePayload for DediscoDonation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100055350);
}

uint64_t sub_100055350(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v8 = sub_100058E60();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 48);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_100016C98(&qword_100081A10);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 52);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

void sub_100055480()
{
  sub_100058E60();
  if (v0 <= 0x3F)
  {
    sub_100053E70(319, (unint64_t *)&unk_1000828E0, (void (*)(uint64_t))type metadata accessor for DediscoDonation.AlgorithmParameters);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for DediscoDonation.AlgorithmParameters(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *unint64_t v4 = *a2;
    unint64_t v4 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    uint64_t v7 = a2[2];
    unint64_t v8 = a2[3];
    sub_100016E5C(v7, v8);
    uint64_t v4[2] = v7;
    v4[3] = v8;
    uint64_t v9 = *(int *)(a3 + 28);
    uint64_t v10 = (char *)v4 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = sub_100058E60();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
  }
  return v4;
}

uint64_t destroy for DediscoDonation.AlgorithmParameters(uint64_t a1, uint64_t a2)
{
  sub_100016B2C(*(void *)(a1 + 16), *(void *)(a1 + 24));
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = sub_100058E60();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

uint64_t initializeWithCopy for DediscoDonation.AlgorithmParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  unint64_t v7 = *(void *)(a2 + 24);
  sub_100016E5C(v6, v7);
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  uint64_t v8 = *(int *)(a3 + 28);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = sub_100058E60();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  return a1;
}

void *assignWithCopy for DediscoDonation.AlgorithmParameters(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v6 = a2[2];
  unint64_t v7 = a2[3];
  sub_100016E5C(v6, v7);
  uint64_t v8 = a1[2];
  unint64_t v9 = a1[3];
  a1[2] = v6;
  a1[3] = v7;
  sub_100016B2C(v8, v9);
  uint64_t v10 = *(int *)(a3 + 28);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = sub_100058E60();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

_OWORD *initializeWithTake for DediscoDonation.AlgorithmParameters(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 28);
  uint64_t v6 = (char *)a1 + v5;
  unint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = sub_100058E60();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

void *assignWithTake for DediscoDonation.AlgorithmParameters(void *a1, uint64_t a2, uint64_t a3)
{
  *a1 = *(void *)a2;
  a1[1] = *(void *)(a2 + 8);
  uint64_t v6 = a1[2];
  unint64_t v7 = a1[3];
  *((_OWORD *)a1 + 1) = *(_OWORD *)(a2 + 16);
  sub_100016B2C(v6, v7);
  uint64_t v8 = *(int *)(a3 + 28);
  unint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = sub_100058E60();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for DediscoDonation.AlgorithmParameters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100055970);
}

uint64_t sub_100055970(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 12)
  {
    uint64_t v4 = *(void *)(a1 + 24) >> 60;
    if (((4 * v4) & 0xC) != 0) {
      return 16 - ((4 * v4) & 0xC | (v4 >> 2));
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = sub_100058E60();
    unint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 28);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for DediscoDonation.AlgorithmParameters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100055A40);
}

uint64_t sub_100055A40(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 12)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
  }
  else
  {
    uint64_t v7 = sub_100058E60();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 28);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_100055AF0()
{
  return sub_100055B0C();
}

uint64_t sub_100055B0C()
{
  uint64_t result = sub_100058E60();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for CollectionID(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    uint64_t *v3 = *a2;
    uint64_t v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = sub_100058E60();
    uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t destroy for CollectionID(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = sub_100058E60();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

void *initializeWithCopy for CollectionID(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = sub_100058E60();
  uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

void *assignWithCopy for CollectionID(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_100058E60();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_OWORD *initializeWithTake for CollectionID(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = sub_100058E60();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

void *assignWithTake for CollectionID(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = sub_100058E60();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for CollectionID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100055F50);
}

uint64_t sub_100055F50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_100058E60();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for CollectionID(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100056014);
}

uint64_t sub_100056014(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_100058E60();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_1000560BC()
{
  uint64_t result = sub_100058E60();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for Empty(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100058E60();
  uint64_t v5 = **(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);
  return v5(a1, a2, v4);
}

uint64_t destroy for Empty(uint64_t a1)
{
  uint64_t v2 = sub_100058E60();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  return v3(a1, v2);
}

uint64_t initializeWithCopy for Empty(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100058E60();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for Empty(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100058E60();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for Empty(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100058E60();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for Empty(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100058E60();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for Empty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000563C8);
}

uint64_t sub_1000563C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100058E60();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);
  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for Empty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100056448);
}

uint64_t sub_100056448(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100058E60();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(a1, a2, a2, v4);
}

uint64_t sub_1000564B8()
{
  uint64_t result = sub_100058E60();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void sub_10005655C(os_log_t log)
{
  *(_WORD *)unint64_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "ReportAuth extension is only enabled on DAP-09.", v1, 2u);
}

void sub_1000565A0(void *a1, uint64_t a2, NSObject *a3)
{
  int v5 = 134218242;
  id v6 = [a1 statusCode];
  __int16 v7 = 2112;
  uint64_t v8 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "Client failed to download config file; status: %ld, error: %@",
    (uint8_t *)&v5,
    0x16u);
}

void sub_10005663C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100056674(uint8_t *a1, uint64_t a2, void *a3, NSObject *a4)
{
  uint64_t v4 = *(void *)(*(void *)a2 + 40);
  *(_DWORD *)a1 = 138412290;
  *a3 = v4;
  sub_100009C18((void *)&_mh_execute_header, a4, (uint64_t)a3, "Failed to fetch a token with error: %@.", a1);
}

void sub_1000566C0(void *a1, NSObject *a2)
{
  uint64_t v3 = [a1 localizedDescription];
  int v5 = 138412290;
  id v6 = v3;
  sub_100009C18((void *)&_mh_execute_header, a2, v4, "Failed to read the JSON token fields with error %@.", (uint8_t *)&v5);
}

void sub_100056750(uint64_t a1, NSObject *a2, uint64_t a3)
{
  int v3 = 138412290;
  uint64_t v4 = a1;
  sub_100009C18((void *)&_mh_execute_header, a2, a3, "Failed to create NSData from Base-64 encoded string %@", (uint8_t *)&v3);
}

void sub_1000567C0()
{
  sub_100009BE4();
  sub_100009C30((void *)&_mh_execute_header, v0, v1, "Failed to write tokens to file at path %@ with error:%@.");
}

void sub_100056828(uint64_t a1, NSObject *a2, uint64_t a3)
{
  int v3 = 138412290;
  uint64_t v4 = a1;
  sub_100009C18((void *)&_mh_execute_header, a2, a3, "Failed to serialize token array with error: %@", (uint8_t *)&v3);
}

void sub_100056898()
{
  sub_100009BE4();
  sub_100009C30((void *)&_mh_execute_header, v0, v1, "Failed to create directory at path %@ with error %@.");
}

void sub_100056900(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100056938(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100056970(os_log_t log)
{
  *(_WORD *)os_log_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Cannot create _DPReportAuth - empty challenge or token", v1, 2u);
}

void sub_1000569B4(os_log_t log)
{
  int v1 = 138412290;
  CFStringRef v2 = @"Cannot encode DAP extension - total length exceeds UINT16_MAX";
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "%@", (uint8_t *)&v1, 0xCu);
}

void sub_100056A38(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "PPM version is not specified in donation metadata. Using default PPM version %@ to upload the donation.", (uint8_t *)&v2, 0xCu);
}

void sub_100056AB0(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Malformed PPM version in donation metadata, error: %@", (uint8_t *)&v2, 0xCu);
}

void sub_100056B28(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Using PPM compatible version %@ to upload the donation.", (uint8_t *)&v2, 0xCu);
}

void sub_100056BA0(os_log_t log)
{
  int v1 = 134217984;
  uint64_t v2 = 15;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Failed to download config: timeout on client (%lld sec)", (uint8_t *)&v1, 0xCu);
}

void sub_100056C20(void *a1, NSObject *a2)
{
  uint64_t v3 = [a1 localizedDescription];
  int v4 = 138412290;
  int v5 = v3;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Error in reading config file: %@", (uint8_t *)&v4, 0xCu);
}

void sub_100056CB8(os_log_t log)
{
  *(_WORD *)int v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Reached maximum retries. Failed to download the config file.", v1, 2u);
}

void sub_100056CFC(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100056D70(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100056DE4(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100056E50(os_log_t log)
{
  int v1 = 138412290;
  CFStringRef v2 = @"Failed to upload DAP payload: leader URL is empty";
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "%@", (uint8_t *)&v1, 0xCu);
}

void sub_100056ED4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100056F4C()
{
  sub_10000D474();
  sub_10000D488((void *)&_mh_execute_header, v0, v1, "%@ error: %@", v2, v3, v4, v5, 2u);
}

void sub_100056FC0(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100057038()
{
  sub_10000D474();
  sub_10000D488((void *)&_mh_execute_header, v0, v1, "%@ error: %@", v2, v3, v4, v5, 2u);
}

void sub_1000570AC()
{
  sub_10000D474();
  sub_10000D488((void *)&_mh_execute_header, v0, v1, "%@ error: %@", v2, v3, v4, v5, 2u);
}

void sub_100057120()
{
  sub_10000D474();
  sub_10000D488((void *)&_mh_execute_header, v0, v1, "%@ error: %@", v2, v3, v4, v5, 2u);
}

void sub_100057194(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100057200(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Failed to extract certificates from the chain!", v1, 2u);
}

void sub_100057244(int a1, NSObject *a2)
{
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Failed to create a trust object from certificate chain: %d", (uint8_t *)v2, 8u);
}

void sub_1000572BC(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Error: public key string is not a valid base64 encoding.", v1, 2u);
}

void sub_100057300(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10005736C(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Encountered non-recoverable error while trying to get a BAA signature. Will not retry.", v1, 2u);
}

void sub_1000573B0(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100057424(void **a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a1;
  sub_10000C074((void *)&_mh_execute_header, a2, a3, "Failed to sign data: %@", a5, a6, a7, a8, 2u);
}

void sub_1000574A0(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10005750C(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "%@", (uint8_t *)&v2, 0xCu);
}

void sub_100057584(void *a1)
{
  uint64_t v1 = [a1 path];
  sub_10000F97C();
  sub_10000F988((void *)&_mh_execute_header, v2, v3, "No data found in file path %@ to retrieve token.", v4, v5, v6, v7, v8);
}

void sub_100057608(void *a1)
{
  uint64_t v1 = [a1 localizedDescription];
  sub_10000F97C();
  sub_10000F988((void *)&_mh_execute_header, v2, v3, "Failed to deserialize token data with error %@.", v4, v5, v6, v7, v8);
}

void sub_10005768C()
{
  sub_10000F97C();
  sub_10000C074((void *)&_mh_execute_header, v0, v1, "Failed to retrieve challenge data from challenge string filePath=%@.", v2, v3, v4, v5, v6);
}

void sub_1000576F4()
{
  sub_10000F97C();
  sub_10000C074((void *)&_mh_execute_header, v0, v1, "Failed to retrieve token data from token string  filePath=%@.", v2, v3, v4, v5, v6);
}

void sub_10005775C(void *a1)
{
  uint64_t v1 = [a1 tokensDirectoryPath];
  sub_10000F9A8((void *)&_mh_execute_header, v2, v3, "No file found in path %@ to retrieve token for aggregator %@.", v4, v5, v6, v7, 2u);
}

void sub_1000577FC(void *a1)
{
  uint64_t v1 = [a1 tokensDirectoryPath];
  sub_10000F97C();
  sub_10000F988((void *)&_mh_execute_header, v2, v3, "All token files are empty at path %@. No token was retrieved.", v4, v5, v6, v7, v8);
}

void sub_100057880(uint64_t a1, void *a2)
{
  uint8_t v8 = [a2 localizedDescription];
  sub_10000F9A8((void *)&_mh_execute_header, v2, v3, "Failed to remove token bucket file %@ in submission service with error %@.", v4, v5, v6, v7, 2u);
}

void sub_100057924()
{
  sub_10000F97C();
  sub_10000C074((void *)&_mh_execute_header, v0, v1, "Failed to update token file at path %@.", v2, v3, v4, v5, v6);
}

void sub_10005798C()
{
  sub_10000F97C();
  sub_10000C074((void *)&_mh_execute_header, v0, v1, "Failed to serialize token array with error: %@", v2, v3, v4, v5, v6);
}

void sub_1000579F4()
{
  sub_10000F97C();
  sub_10000C074((void *)&_mh_execute_header, v0, v1, "%@", v2, v3, v4, v5, v6);
}

void sub_100057A5C()
{
  sub_100009BE4();
  sub_100009C30((void *)&_mh_execute_header, v0, v1, "Failed to update token file at path %@ - %@");
}

void sub_100057AC4()
{
  sub_100009BE4();
  sub_100009C30((void *)&_mh_execute_header, v0, v1, "Failed to fetch tokens on-demand: unable to open records file %@: %@");
}

void sub_100057B2C()
{
  sub_100009BE4();
  sub_100009C30((void *)&_mh_execute_header, v0, v1, "Failed to parse json file %@: %@");
}

void sub_100057B94(os_log_t log)
{
  *(_WORD *)os_log_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "On demand fetching failed - unable to get private access token configuration", v1, 2u);
}

void sub_100057BD8(os_log_t log)
{
  *(_WORD *)os_log_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "On-demand token fetching failed to initialize fetcher service", v1, 2u);
}

void sub_100057C1C()
{
  sub_10000F97C();
  sub_10000C074((void *)&_mh_execute_header, v0, v1, "On demand fetching not allowed. Error: %@", v2, v3, v4, v5, v6);
}

void sub_100057C84()
{
  sub_10000F97C();
  sub_10000C074((void *)&_mh_execute_header, v0, v1, "Unable to download config, error: %@", v2, v3, v4, v5, v6);
}

void sub_100057CEC()
{
  sub_10000F97C();
  sub_10000C074((void *)&_mh_execute_header, v0, v1, "Unable to generate payload for donation, error: %@", v2, v3, v4, v5, v6);
}

void sub_100057D54(uint64_t a1, NSObject *a2)
{
  int v2 = 138412546;
  CFStringRef v3 = @"Unable to serialize payload dictionary.";
  __int16 v4 = 2112;
  uint64_t v5 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "%@ error: %@", (uint8_t *)&v2, 0x16u);
}

void sub_100057DE0(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100057E58()
{
  sub_10000F97C();
  sub_10000C074((void *)&_mh_execute_header, v0, v1, "Failed to upload DAP Payload: %@", v2, v3, v4, v5, v6);
}

void sub_100057EC0()
{
}

void sub_100057EEC(void *a1)
{
  uint64_t v1 = [a1 key];
  sub_10000F97C();
  sub_1000118D4((void *)&_mh_execute_header, v2, v3, "Submitting via V2 for key=%@", v4, v5, v6, v7, v8);
}

void sub_100057F70(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100057FE8()
{
  sub_10000F97C();
  sub_10000C074((void *)&_mh_execute_header, v0, v1, "Payload submission was unsuccessful, error: %@", v2, v3, v4, v5, v6);
}

void sub_100058050(void *a1)
{
  uint64_t v1 = [a1 key];
  sub_10000F97C();
  sub_1000118D4((void *)&_mh_execute_header, v2, v3, "Submitting via V1 for key=%@", v4, v5, v6, v7, v8);
}

void sub_1000580D4()
{
  sub_10000F97C();
  sub_10000C074((void *)&_mh_execute_header, v0, v1, "Upload rejected: unable to determine OHTTP flag: %@", v2, v3, v4, v5, v6);
}

void sub_10005813C()
{
  sub_10000F97C();
  sub_10000C074((void *)&_mh_execute_header, v0, v1, "Unable to extract public keys from config, error: %@", v2, v3, v4, v5, v6);
}

void sub_1000581A4()
{
  sub_10000F97C();
  sub_10000C074((void *)&_mh_execute_header, v0, v1, "Failed to serialize DediscoAlgorithmParametersOtherParams: %@", v2, v3, v4, v5, v6);
}

void sub_10005820C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100058284()
{
  sub_10000F97C();
  sub_10000C074((void *)&_mh_execute_header, v0, v1, "Error encrypting: %@", v2, v3, v4, v5, v6);
}

void sub_1000582EC()
{
  sub_10000F97C();
  sub_10000C074((void *)&_mh_execute_header, v0, v1, "Error extracting base64 representation from public key: %@", v2, v3, v4, v5, v6);
}

void sub_100058354(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000583CC(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3 = 138412546;
  uint64_t v4 = a1;
  __int16 v5 = 2112;
  uint64_t v6 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "%@ error: %@", (uint8_t *)&v3, 0x16u);
}

void sub_100058454(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000584CC(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100058544(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000585BC(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100058634(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000586A0(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100058718(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100058784(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Failed to initialize _DPDediscoPayloadUploader: nil upload URL", v1, 2u);
}

void sub_1000587C8(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10005883C()
{
  sub_10000F97C();
  __int16 v3 = 2112;
  uint64_t v4 = v0;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "Failed to upload to DAP report to %@, error: %@", v2, 0x16u);
}

void sub_1000588C8()
{
  sub_10000F97C();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "dap-taskprov: %@", v1, 0xCu);
}

void sub_10005893C()
{
  sub_10000F97C();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "dap-reportauth: %@", v1, 0xCu);
}

void sub_1000589B0(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Error: zero length private access token plist file from %@", (uint8_t *)&v2, 0xCu);
}

void sub_100058A28(uint64_t a1, NSObject *a2)
{
  int v2 = 138412290;
  uint64_t v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Failed to deserialize the configuration: %@", (uint8_t *)&v2, 0xCu);
}

void sub_100058AA0(os_log_t log)
{
  *(_WORD *)os_log_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "No valid private access token issuer configured", v1, 2u);
}

void sub_100058AE4(os_log_t log)
{
  *(_WORD *)os_log_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Error: Unable to persist token refresh hours - failed to create defaults", v1, 2u);
}

void sub_100058B28(os_log_t log)
{
  *(_WORD *)os_log_t v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Report requires no Private Access Token", v1, 2u);
}

void sub_100058B6C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100058BE4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_100058C5C(os_log_t log)
{
  *(_WORD *)os_log_t v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Token type not supported.", v1, 2u);
}

uint64_t sub_100058CA0()
{
  return __DataStorage.init(bytes:length:copy:deallocator:offset:)();
}

uint64_t sub_100058CB0()
{
  return __DataStorage._bytes.getter();
}

uint64_t sub_100058CC0()
{
  return __DataStorage._length.getter();
}

uint64_t sub_100058CD0()
{
  return __DataStorage._offset.getter();
}

uint64_t sub_100058CE0()
{
  return __DataStorage.init(capacity:)();
}

uint64_t sub_100058CF0()
{
  return type metadata accessor for __DataStorage();
}

uint64_t sub_100058D00()
{
  return _convertErrorToNSError(_:)();
}

uint64_t sub_100058D10()
{
  return Data.Deallocator._deallocator.getter();
}

uint64_t sub_100058D20()
{
  return type metadata accessor for Data.Deallocator();
}

uint64_t sub_100058D30()
{
  return type metadata accessor for Data.RangeReference();
}

uint64_t sub_100058D40()
{
  return Data._Representation.replaceSubrange(_:with:count:)();
}

void sub_100058D50(Swift::Int a1)
{
}

uint64_t sub_100058D60()
{
  return Data._Representation.append(contentsOf:)();
}

NSData sub_100058D70()
{
  return Data._bridgeToObjectiveC()();
}

uint64_t sub_100058D80()
{
  return static Data._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_100058D90()
{
  return dispatch thunk of CodeOperation.codeOperationCompletionBlock.setter();
}

uint64_t sub_100058DA0()
{
  return dispatch thunk of CodeOperation.dataProtectionType.setter();
}

uint64_t sub_100058DB0()
{
  return dispatch thunk of CodeOperation.request.setter();
}

uint64_t sub_100058DC0()
{
  return CodeOperation.init(service:functionName:request:destinationServer:)();
}

uint64_t sub_100058DD0()
{
  return type metadata accessor for RemoteMeasurement();
}

uint64_t sub_100058DE0()
{
  return RemoteMeasurement.init(_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:_:)();
}

uint64_t sub_100058DF0()
{
  return Ckcode_ProtectedEnvelope.value.setter();
}

uint64_t sub_100058E00()
{
  return Ckcode_ProtectedEnvelope.init()();
}

uint64_t sub_100058E10()
{
  return type metadata accessor for Ckcode_ProtectedEnvelope();
}

uint64_t sub_100058E20()
{
  return Google_Protobuf_Any.init(message:partial:typePrefix:)();
}

uint64_t sub_100058E30()
{
  return type metadata accessor for Google_Protobuf_Any();
}

uint64_t sub_100058E40()
{
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t _s19DPSubmissionService5EmptyVACycfC_0()
{
  return UnknownStorage.init()();
}

uint64_t sub_100058E60()
{
  return type metadata accessor for UnknownStorage();
}

uint64_t sub_100058E70()
{
  return defaultAnyTypeURLPrefix.getter();
}

uint64_t sub_100058E80()
{
  return _MessageImplementationBase._protobuf_generated_isEqualTo(other:)();
}

uint64_t sub_100058EA0()
{
  return dispatch thunk of Decoder.nextFieldNumber()();
}

uint64_t sub_100058EB0()
{
  return dispatch thunk of Decoder.decodeSingularBytesField(value:)();
}

uint64_t sub_100058EC0()
{
  return dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
}

uint64_t sub_100058ED0()
{
  return dispatch thunk of Decoder.decodeSingularInt64Field(value:)();
}

uint64_t sub_100058EE0()
{
  return dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
}

uint64_t sub_100058EF0()
{
  return dispatch thunk of Decoder.decodeSingularStringField(value:)();
}

uint64_t sub_100058F00()
{
  return dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
}

uint64_t sub_100058F10()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t sub_100058F20()
{
  return Message.isInitialized.getter();
}

uint64_t sub_100058F30()
{
  return Message.serializedData(partial:)();
}

uint64_t sub_100058F50()
{
  return Message.hash(into:)();
}

uint64_t sub_100058F60()
{
  return static Message.with(_:)();
}

uint64_t sub_100058F70()
{
  return dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
}

uint64_t sub_100058F80()
{
  return dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
}

uint64_t sub_100058F90()
{
  return dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)();
}

uint64_t sub_100058FA0()
{
  return dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
}

uint64_t sub_100058FB0()
{
  return dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
}

uint64_t sub_100058FC0()
{
  return dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
}

uint64_t sub_100058FD0()
{
  return dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
}

uint64_t sub_100058FE0()
{
  return type metadata accessor for _NameMap.NameDescription();
}

uint64_t sub_100058FF0()
{
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_100059000()
{
  return _NameMap.init()();
}

uint64_t sub_100059010()
{
  return type metadata accessor for _NameMap();
}

uint64_t sub_100059020()
{
  return type metadata accessor for DispatchTimeInterval();
}

uint64_t sub_100059030()
{
  return static DispatchTimeoutResult.== infix(_:_:)();
}

uint64_t sub_100059040()
{
  return static DispatchTime.now()();
}

uint64_t sub_100059050()
{
  return DispatchTime.advanced(by:)();
}

uint64_t sub_100059060()
{
  return type metadata accessor for DispatchTime();
}

uint64_t sub_100059070()
{
  return HPKE.Ciphersuite.init(kem:kdf:aead:)();
}

uint64_t sub_100059080()
{
  return type metadata accessor for HPKE.Ciphersuite();
}

uint64_t sub_100059090()
{
  return type metadata accessor for HPKE.KDF();
}

uint64_t sub_1000590A0()
{
  return type metadata accessor for HPKE.KEM();
}

uint64_t sub_1000590B0()
{
  return type metadata accessor for HPKE.AEAD();
}

uint64_t sub_1000590C0()
{
  return HPKE.Sender.init<A>(recipientKey:ciphersuite:info:)();
}

uint64_t sub_1000590D0()
{
  return HPKE.Sender.encapsulatedKey.getter();
}

uint64_t sub_1000590E0()
{
  return HPKE.Sender.seal<A, B>(_:authenticating:)();
}

uint64_t sub_1000590F0()
{
  return type metadata accessor for HPKE.Sender();
}

uint64_t sub_100059100()
{
  return P256.KeyAgreement.PublicKey.x963Representation.getter();
}

uint64_t sub_100059110()
{
  return P256.KeyAgreement.PublicKey.init<A>(x963Representation:)();
}

uint64_t sub_100059120()
{
  return type metadata accessor for P256.KeyAgreement.PublicKey();
}

uint64_t sub_100059130()
{
  return P256.KeyAgreement.PrivateKey.publicKey.getter();
}

uint64_t sub_100059140()
{
  return P256.KeyAgreement.PrivateKey.init()();
}

uint64_t sub_100059150()
{
  return type metadata accessor for P256.KeyAgreement.PrivateKey();
}

uint64_t sub_100059160()
{
  return Array.init()();
}

uint64_t sub_100059170()
{
  return Dictionary.subscript.getter();
}

uint64_t sub_100059180()
{
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t sub_100059190()
{
  return dispatch thunk of static Comparable.> infix(_:_:)();
}

uint64_t sub_1000591A0()
{
  return dispatch thunk of static Comparable.< infix(_:_:)();
}

uint64_t sub_1000591B0()
{
  return dispatch thunk of static Comparable.>= infix(_:_:)();
}

uint64_t sub_1000591C0()
{
  return dispatch thunk of static Equatable.== infix(_:_:)();
}

NSString sub_1000591D0()
{
  return String._bridgeToObjectiveC()();
}

uint64_t sub_1000591E0()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

void sub_1000591F0(Swift::String a1)
{
}

uint64_t sub_100059200()
{
  return dispatch thunk of Sequence.makeIterator()();
}

NSArray sub_100059210()
{
  return Array._bridgeToObjectiveC()();
}

uint64_t sub_100059220()
{
  return Array.append(_:)();
}

uint64_t sub_100059230()
{
  return type metadata accessor for Array();
}

uint64_t sub_100059240()
{
  return dispatch thunk of Collection.count.getter();
}

uint64_t sub_100059250()
{
  return Collection.prefix(_:)();
}

uint64_t sub_100059260()
{
  return Collection.dropFirst(_:)();
}

uint64_t sub_100059270()
{
  return dispatch thunk of Collection.subscript.read();
}

uint64_t sub_100059280()
{
  return dispatch thunk of RangeReplaceableCollection.reserveCapacity(_:)();
}

uint64_t sub_100059290()
{
  return dispatch thunk of RangeReplaceableCollection.append<A>(contentsOf:)();
}

uint64_t sub_1000592A0()
{
  return dispatch thunk of RangeReplaceableCollection.append(_:)();
}

uint64_t sub_1000592B0()
{
  return dispatch thunk of RangeReplaceableCollection.init<A>(_:)();
}

uint64_t sub_1000592C0()
{
  return OS_dispatch_group.wait(timeout:)();
}

uint64_t sub_1000592D0()
{
  return type metadata accessor for Optional();
}

uint64_t sub_1000592E0()
{
  return dispatch thunk of IteratorProtocol.next()();
}

uint64_t sub_1000592F0()
{
  return dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)();
}

uint64_t sub_100059300()
{
  return dispatch thunk of static BinaryInteger.& infix(_:_:)();
}

uint64_t sub_100059310()
{
  return dispatch thunk of static BinaryInteger.>> infix<A>(_:_:)();
}

uint64_t sub_100059320()
{
  return dispatch thunk of static BinaryInteger.<< infix<A>(_:_:)();
}

uint64_t sub_100059330()
{
  return dispatch thunk of BinaryInteger._lowWord.getter();
}

uint64_t sub_100059340()
{
  return dispatch thunk of BinaryInteger.bitWidth.getter();
}

uint64_t sub_100059350()
{
  return dispatch thunk of static BinaryInteger.isSigned.getter();
}

uint64_t sub_100059360()
{
  return dispatch thunk of BinaryInteger.init<A>(_:)();
}

void sub_100059370(Swift::Int a1)
{
}

uint64_t sub_100059380()
{
  return _print_unlocked<A, B>(_:_:)();
}

uint64_t sub_100059390()
{
  return dispatch thunk of static FixedWidthInteger.bitWidth.getter();
}

uint64_t sub_1000593A0()
{
  return dispatch thunk of FixedWidthInteger.littleEndian.getter();
}

uint64_t sub_1000593B0()
{
  return dispatch thunk of static AdditiveArithmetic.+ infix(_:_:)();
}

uint64_t sub_1000593C0()
{
  return static _DictionaryStorage.allocate(capacity:)();
}

uint64_t sub_1000593D0()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t sub_1000593E0()
{
  return DefaultStringInterpolation.appendInterpolation<A>(_:)();
}

uint64_t sub_1000593F0()
{
  return dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)();
}

uint64_t sub_100059400()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t sub_100059410()
{
  return dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)();
}

uint64_t sub_100059420()
{
  return Error._getEmbeddedNSError()();
}

uint64_t sub_100059430()
{
  return Error._code.getter();
}

uint64_t sub_100059440()
{
  return Error._domain.getter();
}

uint64_t sub_100059450()
{
  return Error._userInfo.getter();
}

uint64_t sub_100059460()
{
  return Hasher.init(_seed:)();
}

void sub_100059470(Swift::UInt a1)
{
}

Swift::Int sub_100059480()
{
  return Hasher._finalize()();
}

uint64_t sub_100059490()
{
  return _typeName(_:qualified:)();
}

unsigned __int8 *__cdecl CC_SHA256(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return _CC_SHA256(data, len, md);
}

void CFRelease(CFTypeRef cf)
{
}

uint64_t DeviceIdentityIsSupported()
{
  return _DeviceIdentityIsSupported();
}

uint64_t DeviceIdentityIssueClientCertificateWithCompletion()
{
  return _DeviceIdentityIssueClientCertificateWithCompletion();
}

uint64_t DeviceIdentityUCRTAttestationSupported()
{
  return _DeviceIdentityUCRTAttestationSupported();
}

uint64_t DiagnosticLogSubmissionEnabled()
{
  return _DiagnosticLogSubmissionEnabled();
}

NSString *__cdecl NSStringFromSelector(SEL aSelector)
{
  return _NSStringFromSelector(aSelector);
}

NSString *NSTemporaryDirectory(void)
{
  return _NSTemporaryDirectory();
}

CFDataRef SecCertificateCopyData(SecCertificateRef certificate)
{
  return _SecCertificateCopyData(certificate);
}

uint64_t SecCertificateCreateWithPEM()
{
  return _SecCertificateCreateWithPEM();
}

CFDataRef SecKeyCopyExternalRepresentation(SecKeyRef key, CFErrorRef *error)
{
  return _SecKeyCopyExternalRepresentation(key, error);
}

CFDataRef SecKeyCreateEncryptedData(SecKeyRef key, SecKeyAlgorithm algorithm, CFDataRef plaintext, CFErrorRef *error)
{
  return _SecKeyCreateEncryptedData(key, algorithm, plaintext, error);
}

CFDataRef SecKeyCreateSignature(SecKeyRef key, SecKeyAlgorithm algorithm, CFDataRef dataToSign, CFErrorRef *error)
{
  return _SecKeyCreateSignature(key, algorithm, dataToSign, error);
}

SecKeyRef SecKeyCreateWithData(CFDataRef keyData, CFDictionaryRef attributes, CFErrorRef *error)
{
  return _SecKeyCreateWithData(keyData, attributes, error);
}

Boolean SecKeyVerifySignature(SecKeyRef key, SecKeyAlgorithm algorithm, CFDataRef signedData, CFDataRef signature, CFErrorRef *error)
{
  return _SecKeyVerifySignature(key, algorithm, signedData, signature, error);
}

uint64_t SecPolicyCreateApplePinned()
{
  return _SecPolicyCreateApplePinned();
}

uint64_t SecPolicyCreatePPMAggregatorConfigSigning()
{
  return _SecPolicyCreatePPMAggregatorConfigSigning();
}

SecKeyRef SecTrustCopyKey(SecTrustRef trust)
{
  return _SecTrustCopyKey(trust);
}

OSStatus SecTrustCreateWithCertificates(CFTypeRef certificates, CFTypeRef policies, SecTrustRef *trust)
{
  return _SecTrustCreateWithCertificates(certificates, policies, trust);
}

BOOL SecTrustEvaluateWithError(SecTrustRef trust, CFErrorRef *error)
{
  return _SecTrustEvaluateWithError(trust, error);
}

OSStatus SecTrustSetVerifyDate(SecTrustRef trust, CFDateRef verifyDate)
{
  return _SecTrustSetVerifyDate(trust, verifyDate);
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

uint64_t _DPMetadataIsV2()
{
  return __DPMetadataIsV2();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _set_user_dir_suffix()
{
  return __set_user_dir_suffix();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return __swift_stdlib_reportUnimplementedInitializer();
}

void arc4random_buf(void *__buf, size_t __nbytes)
{
}

uint32_t arc4random_uniform(uint32_t __upper_bound)
{
  return _arc4random_uniform(__upper_bound);
}

dispatch_group_t dispatch_group_create(void)
{
  return _dispatch_group_create();
}

void dispatch_group_enter(dispatch_group_t group)
{
}

void dispatch_group_leave(dispatch_group_t group)
{
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return _dispatch_queue_attr_make_with_autorelease_frequency(attr, frequency);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return _dispatch_queue_create(label, attr);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return _dispatch_semaphore_create(value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return _dispatch_semaphore_signal(dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return _dispatch_semaphore_wait(dsema, timeout);
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return _dispatch_time(when, delta);
}

void free(void *a1)
{
}

void *__cdecl malloc(size_t __size)
{
  return _malloc(__size);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return _memcmp(__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return _memcpy(__dst, __src, __n);
}

uint64_t mobileactivationErrorHasDomainAndErrorCode()
{
  return _mobileactivationErrorHasDomainAndErrorCode();
}

id objc_alloc(Class a1)
{
  return _[a1 alloc];
}

id objc_allocWithZone(Class a1)
{
  return _objc_allocWithZone(a1);
}

uint64_t objc_alloc_init()
{
  return _objc_alloc_init();
}

id objc_autorelease(id a1)
{
  return _objc_autorelease(a1);
}

{
}

{
}

id objc_autoreleaseReturnValue(id a1)
{
  return _objc_autoreleaseReturnValue(a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return _objc_claimAutoreleasedReturnValue();
}

void objc_enumerationMutation(id obj)
{
}

void objc_exception_throw(id exception)
{
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return _[a1 a2];
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return _objc_msgSendSuper2(a1, a2);
}

uint64_t objc_opt_class()
{
  return _objc_opt_class();
}

uint64_t objc_opt_isKindOfClass()
{
  return _objc_opt_isKindOfClass();
}

uint64_t objc_opt_new()
{
  return _objc_opt_new();
}

uint64_t self
{
  return _self;
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return _objc_retain(a1);
}

id objc_retainAutorelease(id a1)
{
  return _a1;
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return _a1;
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return _a1;
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_storeStrong(id *location, id obj)
{
}

int objc_sync_enter(id obj)
{
  return _objc_sync_enter(obj);
}

int objc_sync_exit(id obj)
{
  return _objc_sync_exit(obj);
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return _objc_unsafeClaimAutoreleasedReturnValue(a1);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return _os_log_type_enabled(oslog, type);
}

uint64_t reportCoreAnalyticsUploadEvent()
{
  return _reportCoreAnalyticsUploadEvent();
}

unsigned int sleep(unsigned int a1)
{
  return _sleep(a1);
}

uint64_t swift_allocBox()
{
  return _swift_allocBox();
}

uint64_t swift_allocError()
{
  return _swift_allocError();
}

uint64_t swift_allocObject()
{
  return _swift_allocObject();
}

uint64_t swift_beginAccess()
{
  return _swift_beginAccess();
}

uint64_t swift_bridgeObjectRelease()
{
  return _swift_bridgeObjectRelease();
}

uint64_t swift_bridgeObjectRetain()
{
  return _swift_bridgeObjectRetain();
}

uint64_t swift_endAccess()
{
  return _swift_endAccess();
}

uint64_t swift_errorRelease()
{
  return _swift_errorRelease();
}

uint64_t swift_errorRetain()
{
  return _swift_errorRetain();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return _swift_getAssociatedConformanceWitness();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return _swift_getAssociatedTypeWitness();
}

uint64_t swift_getObjCClassMetadata()
{
  return _swift_getObjCClassMetadata();
}

uint64_t swift_getSingletonMetadata()
{
  return _swift_getSingletonMetadata();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return _swift_getTupleTypeMetadata2();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return _swift_getTypeByMangledNameInContext2();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return _swift_getTypeByMangledNameInContextInMetadataState2();
}

uint64_t swift_getWitnessTable()
{
  return _swift_getWitnessTable();
}

uint64_t swift_initStackObject()
{
  return _swift_initStackObject();
}

uint64_t swift_initStructMetadata()
{
  return _swift_initStructMetadata();
}

uint64_t swift_once()
{
  return _swift_once();
}

uint64_t swift_release()
{
  return _swift_release();
}

uint64_t swift_retain()
{
  return _swift_retain();
}

uint64_t swift_slowAlloc()
{
  return _swift_slowAlloc();
}

uint64_t swift_updateClassMetadata2()
{
  return _swift_updateClassMetadata2();
}

uint64_t swift_willThrow()
{
  return _swift_willThrow();
}

id objc_msgSend_JSONObjectWithData_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "JSONObjectWithData:options:error:");
}

id objc_msgSend_URLWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLWithString:");
}

id objc_msgSend__dataUploadRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_dataUploadRequest:");
}

id objc_msgSend__downloadConfigFromURL_retries_onCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_downloadConfigFromURL:retries:onCompletion:");
}

id objc_msgSend__session(void *a1, const char *a2, ...)
{
  return _[a1 _session];
}

id objc_msgSend__setPrivacyProxyFailClosed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setPrivacyProxyFailClosed:");
}

id objc_msgSend__uploadData_withHeaders_withRetries_onCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_uploadData:withHeaders:withRetries:onCompletion:");
}

id objc_msgSend_addObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObject:");
}

id objc_msgSend_aggregators(void *a1, const char *a2, ...)
{
  return _[a1 aggregators];
}

id objc_msgSend_algorithmParameters(void *a1, const char *a2, ...)
{
  return _[a1 algorithmParameters];
}

id objc_msgSend_algorithmParamsForDonation_dediscoOtherParams_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "algorithmParamsForDonation:dediscoOtherParams:");
}

id objc_msgSend_allHeaderFields(void *a1, const char *a2, ...)
{
  return _[a1 allHeaderFields];
}

id objc_msgSend_allKeys(void *a1, const char *a2, ...)
{
  return _[a1 allKeys];
}

id objc_msgSend_allowOnDemandFetchingForDate_maxDailyOnDemand_withError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allowOnDemandFetchingForDate:maxDailyOnDemand:withError:");
}

id objc_msgSend_appendBytes_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendBytes:length:");
}

id objc_msgSend_appendData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendData:");
}

id objc_msgSend_appendFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendFormat:");
}

id objc_msgSend_appendString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendString:");
}

id objc_msgSend_arrayWithObjects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObjects:count:");
}

id objc_msgSend_attributesOfItemAtPath_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attributesOfItemAtPath:error:");
}

id objc_msgSend_baaCertificateBackoffDate(void *a1, const char *a2, ...)
{
  return _[a1 baaCertificateBackoffDate];
}

id objc_msgSend_baaCertificateChainFromBAASignature_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "baaCertificateChainFromBAASignature:");
}

id objc_msgSend_backgroundSession(void *a1, const char *a2, ...)
{
  return _[a1 backgroundSession];
}

id objc_msgSend_backgroundSessionConfigurationWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backgroundSessionConfigurationWithIdentifier:");
}

id objc_msgSend_base64EncodedStringWithOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "base64EncodedStringWithOptions:");
}

id objc_msgSend_base64PublicKeyRepresentationFromSecKeyRef_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "base64PublicKeyRepresentationFromSecKeyRef:");
}

id objc_msgSend_baseURL(void *a1, const char *a2, ...)
{
  return _[a1 baseURL];
}

id objc_msgSend_BOOLForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "BOOLForKey:");
}

id objc_msgSend_BOOLValue(void *a1, const char *a2, ...)
{
  return _[a1 BOOLValue];
}

id objc_msgSend_buffer(void *a1, const char *a2, ...)
{
  return _[a1 buffer];
}

id objc_msgSend_buildHTTPHeadersWithPayload_withEncoder_withError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buildHTTPHeadersWithPayload:withEncoder:withError:");
}

id objc_msgSend_bytes(void *a1, const char *a2, ...)
{
  return _[a1 bytes];
}

id objc_msgSend_challenge(void *a1, const char *a2, ...)
{
  return _[a1 challenge];
}

id objc_msgSend_code(void *a1, const char *a2, ...)
{
  return _[a1 code];
}

id objc_msgSend_collectionID(void *a1, const char *a2, ...)
{
  return _[a1 collectionID];
}

id objc_msgSend_compare_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "compare:");
}

id objc_msgSend_config(void *a1, const char *a2, ...)
{
  return _[a1 config];
}

id objc_msgSend_configurationURL(void *a1, const char *a2, ...)
{
  return _[a1 configurationURL];
}

id objc_msgSend_constructTrust_policy_overrideVerifyDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "constructTrust:policy:overrideVerifyDate:");
}

id objc_msgSend_containsObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsObject:");
}

id objc_msgSend_copy(void *a1, const char *a2, ...)
{
  return _[a1 copy];
}

id objc_msgSend_count(void *a1, const char *a2, ...)
{
  return _[a1 count];
}

id objc_msgSend_countByEnumeratingWithState_objects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countByEnumeratingWithState:objects:count:");
}

id objc_msgSend_createAndPersist(void *a1, const char *a2, ...)
{
  return _[a1 createAndPersist];
}

id objc_msgSend_createDirectoryAtPath_withIntermediateDirectories_attributes_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createDirectoryAtPath:withIntermediateDirectories:attributes:error:");
}

id objc_msgSend_createUploadClientWithURL_withHeaders_uploadWithOHTTP_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createUploadClientWithURL:withHeaders:uploadWithOHTTP:");
}

id objc_msgSend_currentQueue(void *a1, const char *a2, ...)
{
  return _[a1 currentQueue];
}

id objc_msgSend_dapVersion(void *a1, const char *a2, ...)
{
  return _[a1 dapVersion];
}

id objc_msgSend_data(void *a1, const char *a2, ...)
{
  return _[a1 data];
}

id objc_msgSend_dataTaskWithURL_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataTaskWithURL:completionHandler:");
}

id objc_msgSend_dataUsingEncoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataUsingEncoding:");
}

id objc_msgSend_dataWithBytes_length_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithBytes:length:");
}

id objc_msgSend_dataWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithCapacity:");
}

id objc_msgSend_dataWithContentsOfFile_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithContentsOfFile:options:error:");
}

id objc_msgSend_dataWithContentsOfURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithContentsOfURL:");
}

id objc_msgSend_dataWithJSONObject_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithJSONObject:options:error:");
}

id objc_msgSend_dataWithLength_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithLength:");
}

id objc_msgSend_date(void *a1, const char *a2, ...)
{
  return _[a1 date];
}

id objc_msgSend_dateByAddingTimeInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateByAddingTimeInterval:");
}

id objc_msgSend_dateWithTimeIntervalSince1970_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateWithTimeIntervalSince1970:");
}

id objc_msgSend_decodeDAPEncodedConfig_withError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "decodeDAPEncodedConfig:withError:");
}

id objc_msgSend_dediscoManagerV1(void *a1, const char *a2, ...)
{
  return _[a1 dediscoManagerV1];
}

id objc_msgSend_dediscoManagerV2(void *a1, const char *a2, ...)
{
  return _[a1 dediscoManagerV2];
}

id objc_msgSend_dediscoPayloadWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dediscoPayloadWithError:");
}

id objc_msgSend_dediscoVersionForDonation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dediscoVersionForDonation:");
}

id objc_msgSend_defaultHeaders(void *a1, const char *a2, ...)
{
  return _[a1 defaultHeaders];
}

id objc_msgSend_defaultManager(void *a1, const char *a2, ...)
{
  return _[a1 defaultManager];
}

id objc_msgSend_defaultMethod(void *a1, const char *a2, ...)
{
  return _[a1 defaultMethod];
}

id objc_msgSend_defaultSessionConfiguration(void *a1, const char *a2, ...)
{
  return _[a1 defaultSessionConfiguration];
}

id objc_msgSend_defaultValueForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultValueForKey:");
}

id objc_msgSend_derivedMaxBatchSizeFromDonationMetadata_minBatchSize_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "derivedMaxBatchSizeFromDonationMetadata:minBatchSize:error:");
}

id objc_msgSend_derivedMinBatchSize(void *a1, const char *a2, ...)
{
  return _[a1 derivedMinBatchSize];
}

id objc_msgSend_derivedTaskExpiration(void *a1, const char *a2, ...)
{
  return _[a1 derivedTaskExpiration];
}

id objc_msgSend_destinationPublicKey(void *a1, const char *a2, ...)
{
  return _[a1 destinationPublicKey];
}

id objc_msgSend_dictionaryWithObjects_forKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithObjects:forKeys:");
}

id objc_msgSend_dictionaryWithObjects_forKeys_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithObjects:forKeys:count:");
}

id objc_msgSend_dimension(void *a1, const char *a2, ...)
{
  return _[a1 dimension];
}

id objc_msgSend_doesNotRecognizeSelector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "doesNotRecognizeSelector:");
}

id objc_msgSend_domain(void *a1, const char *a2, ...)
{
  return _[a1 domain];
}

id objc_msgSend_donateEventToBitacoraForKey_eventPhase_uuid_succeeded_errorCode_errorMessage_aggregateFunction_count_telemetryAllowed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "donateEventToBitacoraForKey:eventPhase:uuid:succeeded:errorCode:errorMessage:aggregateFunction:count:telemetryAllowed:");
}

id objc_msgSend_donateTokenCountToBitacoraForAggregator_dirPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "donateTokenCountToBitacoraForAggregator:dirPath:");
}

id objc_msgSend_donation(void *a1, const char *a2, ...)
{
  return _[a1 donation];
}

id objc_msgSend_doubleValue(void *a1, const char *a2, ...)
{
  return _[a1 doubleValue];
}

id objc_msgSend_downloadConfigFromURL_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "downloadConfigFromURL:completion:");
}

id objc_msgSend_downloadConfigSynchronously(void *a1, const char *a2, ...)
{
  return _[a1 downloadConfigSynchronously];
}

id objc_msgSend_downloadConfigSynchronouslyWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "downloadConfigSynchronouslyWithError:");
}

id objc_msgSend_downloadTaskWithURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "downloadTaskWithURL:");
}

id objc_msgSend_encodeExtensionsWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeExtensionsWithError:");
}

id objc_msgSend_encodeHPKECipherTextWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeHPKECipherTextWithError:");
}

id objc_msgSend_encodePublicShare(void *a1, const char *a2, ...)
{
  return _[a1 encodePublicShare];
}

id objc_msgSend_encodeReportID(void *a1, const char *a2, ...)
{
  return _[a1 encodeReportID];
}

id objc_msgSend_encodeReportMetadataWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeReportMetadataWithError:");
}

id objc_msgSend_encodeWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodeWithError:");
}

id objc_msgSend_encodedAdditionalDataWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodedAdditionalDataWithError:");
}

id objc_msgSend_encodedAggregatorDiscreteGaussianClientSymmetricRAPPORDPConfigWithTargetCentralEpsilon_targetCentralDelta_sigma_squaredL2Sensitivity_localEpsilon_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodedAggregatorDiscreteGaussianClientSymmetricRAPPORDPConfigWithTargetCentralEpsilon:targetCentralDelta:sigma:squaredL2Sensitivity:localEpsilon:error:");
}

id objc_msgSend_encodedDPConfigWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodedDPConfigWithError:");
}

id objc_msgSend_encodedEpsDPConfigWithEpsilon_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodedEpsDPConfigWithEpsilon:error:");
}

id objc_msgSend_encodedGaussianWithSubsampledMomentsAccountantConfigWithMaxCohortSize_numIterations_populationSize_renyiOrder_sigma_sigmaAfterNormalization_targetCentralEpsilon_targetCentralDelta_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodedGaussianWithSubsampledMomentsAccountantConfigWithMaxCohortSize:numIterations:populationSize:renyiOrder:sigma:sigmaAfterNormalization:targetCentralEpsilon:targetCentralDelta:error:");
}

id objc_msgSend_encodedInfoForServerRole_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodedInfoForServerRole:");
}

id objc_msgSend_encodedInputShareAADWithTaskID_reportID_time_publicShare_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodedInputShareAADWithTaskID:reportID:time:publicShare:error:");
}

id objc_msgSend_encodedNoneDPConfigAndReturnError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodedNoneDPConfigAndReturnError:");
}

id objc_msgSend_encodedPINE32VDAFConfigWithL2NormBound_numFractionalBits_length_chunkLength_chunkLengthNormEquality_numProofs_wraparoundCheckCount_encodedDPConfig_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodedPINE32VDAFConfigWithL2NormBound:numFractionalBits:length:chunkLength:chunkLengthNormEquality:numProofs:wraparoundCheckCount:encodedDPConfig:error:");
}

id objc_msgSend_encodedPINE40VDAFConfigWithL2NormBound_numFractionalBits_length_chunkLength_chunkLengthNormEquality_numProofs_wraparoundCheckCount_encodedDPConfig_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodedPINE40VDAFConfigWithL2NormBound:numFractionalBits:length:chunkLength:chunkLengthNormEquality:numProofs:wraparoundCheckCount:encodedDPConfig:error:");
}

id objc_msgSend_encodedPINE64VDAFConfigWithL2NormBound_numFractionalBits_length_chunkLength_chunkLengthNormEquality_numProofs_wraparoundCheckCount_encodedDPConfig_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodedPINE64VDAFConfigWithL2NormBound:numFractionalBits:length:chunkLength:chunkLengthNormEquality:numProofs:wraparoundCheckCount:encodedDPConfig:error:");
}

id objc_msgSend_encodedPlaintextInputShareForServerRole_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodedPlaintextInputShareForServerRole:error:");
}

id objc_msgSend_encodedPlaintextInputShareWithTaskProvExtensionData_payload_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodedPlaintextInputShareWithTaskProvExtensionData:payload:error:");
}

id objc_msgSend_encodedPrio2VDAFConfigWithLength_encodedDPConfig_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodedPrio2VDAFConfigWithLength:encodedDPConfig:error:");
}

id objc_msgSend_encodedPrio3SumVectorVDAFConfigWithLength_bits_chunkLength_numProofs_encodedDPConfig_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodedPrio3SumVectorVDAFConfigWithLength:bits:chunkLength:numProofs:encodedDPConfig:error:");
}

id objc_msgSend_encodedQueryConfig(void *a1, const char *a2, ...)
{
  return _[a1 encodedQueryConfig];
}

id objc_msgSend_encodedReportAuthExtensionDataWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodedReportAuthExtensionDataWithError:");
}

id objc_msgSend_encodedReportWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodedReportWithError:");
}

id objc_msgSend_encodedReportWithReportID_time_publicShare_leaderHPKEConfigID_leaderEnc_leaderPayload_helperHPKEConfigID_helperEnc_helperPayload_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodedReportWithReportID:time:publicShare:leaderHPKEConfigID:leaderEnc:leaderPayload:helperHPKEConfigID:helperEnc:helperPayload:error:");
}

id objc_msgSend_encodedTaskConfig(void *a1, const char *a2, ...)
{
  return _[a1 encodedTaskConfig];
}

id objc_msgSend_encodedTaskConfigWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodedTaskConfigWithError:");
}

id objc_msgSend_encodedTaskConfigWithTaskInfo_leaderAggregatorEndpoint_helperAggregatorEndpoint_timePrecision_maxBatchQueryCount_minBatchSize_maxBatchSize_taskExpiration_encodedVDAFConfig_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodedTaskConfigWithTaskInfo:leaderAggregatorEndpoint:helperAggregatorEndpoint:timePrecision:maxBatchQueryCount:minBatchSize:maxBatchSize:taskExpiration:encodedVDAFConfig:error:");
}

id objc_msgSend_encodedTaskProvExtensionDataWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodedTaskProvExtensionDataWithError:");
}

id objc_msgSend_encodedVDAFConfig(void *a1, const char *a2, ...)
{
  return _[a1 encodedVDAFConfig];
}

id objc_msgSend_encodedVDAFConfigWithEncodedDPConfig_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encodedVDAFConfigWithEncodedDPConfig:error:");
}

id objc_msgSend_encoderForDonation_keys_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encoderForDonation:keys:error:");
}

id objc_msgSend_encryptHelperSharesWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encryptHelperSharesWithError:");
}

id objc_msgSend_encryptLeaderSharesWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encryptLeaderSharesWithError:");
}

id objc_msgSend_encryptWithKey_data_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encryptWithKey:data:");
}

id objc_msgSend_encryptWithPublicKey_info_inputShare_additionalData_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encryptWithPublicKey:info:inputShare:additionalData:error:");
}

id objc_msgSend_encryptedHelperShares(void *a1, const char *a2, ...)
{
  return _[a1 encryptedHelperShares];
}

id objc_msgSend_encryptedLeaderShares(void *a1, const char *a2, ...)
{
  return _[a1 encryptedLeaderShares];
}

id objc_msgSend_encryptedShareForServerRole_publicKey_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "encryptedShareForServerRole:publicKey:error:");
}

id objc_msgSend_enumeratorAtPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumeratorAtPath:");
}

id objc_msgSend_error(void *a1, const char *a2, ...)
{
  return _[a1 error];
}

id objc_msgSend_errorWithCode_description_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorWithCode:description:");
}

id objc_msgSend_errorWithCode_underlyingError_description_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorWithCode:underlyingError:description:");
}

id objc_msgSend_exceptionWithName_reason_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "exceptionWithName:reason:userInfo:");
}

id objc_msgSend_extensions(void *a1, const char *a2, ...)
{
  return _[a1 extensions];
}

id objc_msgSend_extractCertificatesFromChain_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "extractCertificatesFromChain:");
}

id objc_msgSend_extractPublicKeyFromString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "extractPublicKeyFromString:");
}

id objc_msgSend_extractTokenFieldsFromConfig_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "extractTokenFieldsFromConfig:");
}

id objc_msgSend_facilitatorPublicKey(void *a1, const char *a2, ...)
{
  return _[a1 facilitatorPublicKey];
}

id objc_msgSend_fetchMultipleChallengeTokenPairForAggregator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchMultipleChallengeTokenPairForAggregator:");
}

id objc_msgSend_fetchTokenWithQueue_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchTokenWithQueue:completionHandler:");
}

id objc_msgSend_fetchTokens(void *a1, const char *a2, ...)
{
  return _[a1 fetchTokens];
}

id objc_msgSend_fileCreationDate(void *a1, const char *a2, ...)
{
  return _[a1 fileCreationDate];
}

id objc_msgSend_fileExistsAtPath_isDirectory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileExistsAtPath:isDirectory:");
}

id objc_msgSend_fileSize(void *a1, const char *a2, ...)
{
  return _[a1 fileSize];
}

id objc_msgSend_fileURLWithPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileURLWithPath:");
}

id objc_msgSend_filesInDirectory_withPrefix_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "filesInDirectory:withPrefix:");
}

id objc_msgSend_floatValue(void *a1, const char *a2, ...)
{
  return _[a1 floatValue];
}

id objc_msgSend_framework(void *a1, const char *a2, ...)
{
  return _[a1 framework];
}

id objc_msgSend_getCollectionId(void *a1, const char *a2, ...)
{
  return _[a1 getCollectionId];
}

id objc_msgSend_getLeaderServerName(void *a1, const char *a2, ...)
{
  return _[a1 getLeaderServerName];
}

id objc_msgSend_getPreferredIssuerFromPlist_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getPreferredIssuerFromPlist:");
}

id objc_msgSend_getReport(void *a1, const char *a2, ...)
{
  return _[a1 getReport];
}

id objc_msgSend_handleDediscoDonation_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleDediscoDonation:error:");
}

id objc_msgSend_hasPrefix_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasPrefix:");
}

id objc_msgSend_hasSuffix_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasSuffix:");
}

id objc_msgSend_helperHPKEConfigID(void *a1, const char *a2, ...)
{
  return _[a1 helperHPKEConfigID];
}

id objc_msgSend_helperURL(void *a1, const char *a2, ...)
{
  return _[a1 helperURL];
}

id objc_msgSend_host(void *a1, const char *a2, ...)
{
  return _[a1 host];
}

id objc_msgSend_hpkeCipherText(void *a1, const char *a2, ...)
{
  return _[a1 hpkeCipherText];
}

id objc_msgSend_initWithBase64EncodedString_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBase64EncodedString:options:");
}

id objc_msgSend_initWithBaseURL_useOHTTP_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBaseURL:useOHTTP:");
}

id objc_msgSend_initWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCapacity:");
}

id objc_msgSend_initWithChallenge_token_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithChallenge:token:");
}

id objc_msgSend_initWithChallenge_tokenKey_originNameKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithChallenge:tokenKey:originNameKey:");
}

id objc_msgSend_initWithCohortSize_sigma_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCohortSize:sigma:");
}

id objc_msgSend_initWithCollectionId_algorithm_algorithmParameters_fsEncryptedShare_dsEncryptedShare_fsPublicKey_dsPublicKey_versionHash_report_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCollectionId:algorithm:algorithmParameters:fsEncryptedShare:dsEncryptedShare:fsPublicKey:dsPublicKey:versionHash:report:");
}

id objc_msgSend_initWithData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithData:");
}

id objc_msgSend_initWithData_encoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithData:encoding:");
}

id objc_msgSend_initWithDestinationKey_facilitatorPublicKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDestinationKey:facilitatorPublicKey:");
}

id objc_msgSend_initWithDestinationKey_facilitatorPublicKey_keysMetadataArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDestinationKey:facilitatorPublicKey:keysMetadataArray:");
}

id objc_msgSend_initWithDeviceSignature_leafCertificate_intermediateCertificate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDeviceSignature:leafCertificate:intermediateCertificate:");
}

id objc_msgSend_initWithDimension_epsilon_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDimension:epsilon:");
}

id objc_msgSend_initWithDimension_epsilon_otherParams_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDimension:epsilon:otherParams:");
}

id objc_msgSend_initWithDomain_configurationURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDomain:configurationURL:");
}

id objc_msgSend_initWithDomain_retries_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDomain:retries:");
}

id objc_msgSend_initWithDomain_retries_method_tlsTrustPinningPolicyName_defaultHeaders_uploadWithOHTTP_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDomain:retries:method:tlsTrustPinningPolicyName:defaultHeaders:uploadWithOHTTP:");
}

id objc_msgSend_initWithDonation_keys_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDonation:keys:error:");
}

id objc_msgSend_initWithDonation_keys_taskProv_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDonation:keys:taskProv:error:");
}

id objc_msgSend_initWithDonation_leaderURL_helperURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDonation:leaderURL:helperURL:error:");
}

id objc_msgSend_initWithIntermediateCertificate_leafCertificate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIntermediateCertificate:leafCertificate:");
}

id objc_msgSend_initWithIssuer_origin_redemptionContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithIssuer:origin:redemptionContext:");
}

id objc_msgSend_initWithMajorVersion_minorVersion_patchVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMajorVersion:minorVersion:patchVersion:");
}

id objc_msgSend_initWithNetworkingService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithNetworkingService:");
}

id objc_msgSend_initWithPiRapporPrime_piRapporAlpha0_piRapporAlpha1_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPiRapporPrime:piRapporAlpha0:piRapporAlpha1:");
}

id objc_msgSend_initWithString_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithString:error:");
}

id objc_msgSend_initWithToken_withChallenge_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithToken:withChallenge:");
}

id objc_msgSend_initWithTokenConfig_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTokenConfig:");
}

id objc_msgSend_initWithTokenPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTokenPath:");
}

id objc_msgSend_initWithURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithURL:");
}

id objc_msgSend_inputShareInfoString(void *a1, const char *a2, ...)
{
  return _[a1 inputShareInfoString];
}

id objc_msgSend_integerForKey_minValue_maxValue_defaultValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "integerForKey:minValue:maxValue:defaultValue:");
}

id objc_msgSend_integerValue(void *a1, const char *a2, ...)
{
  return _[a1 integerValue];
}

id objc_msgSend_interfaceWithProtocol_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "interfaceWithProtocol:");
}

id objc_msgSend_intermediateCertificate(void *a1, const char *a2, ...)
{
  return _[a1 intermediateCertificate];
}

id objc_msgSend_invalidate(void *a1, const char *a2, ...)
{
  return _[a1 invalidate];
}

id objc_msgSend_invalidateAndCancel(void *a1, const char *a2, ...)
{
  return _[a1 invalidateAndCancel];
}

id objc_msgSend_isBackwardCompatibleWithVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isBackwardCompatibleWithVersion:");
}

id objc_msgSend_isDonationValidWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isDonationValidWithError:");
}

id objc_msgSend_isEqual_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqual:");
}

id objc_msgSend_isEqualToString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToString:");
}

id objc_msgSend_isInternalBuild(void *a1, const char *a2, ...)
{
  return _[a1 isInternalBuild];
}

id objc_msgSend_isOHTTPEnabledWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isOHTTPEnabledWithError:");
}

id objc_msgSend_isPrivateAccessTokenEnabledWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isPrivateAccessTokenEnabledWithError:");
}

id objc_msgSend_isRunningAsLaunchDaemon(void *a1, const char *a2, ...)
{
  return _[a1 isRunningAsLaunchDaemon];
}

id objc_msgSend_isTaskConfigValidWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isTaskConfigValidWithError:");
}

id objc_msgSend_isTelemetryAllowed(void *a1, const char *a2, ...)
{
  return _[a1 isTelemetryAllowed];
}

id objc_msgSend_issuer(void *a1, const char *a2, ...)
{
  return _[a1 issuer];
}

id objc_msgSend_issuerURL(void *a1, const char *a2, ...)
{
  return _[a1 issuerURL];
}

id objc_msgSend_key(void *a1, const char *a2, ...)
{
  return _[a1 key];
}

id objc_msgSend_keys(void *a1, const char *a2, ...)
{
  return _[a1 keys];
}

id objc_msgSend_keysFromConfigurationFile_overrideVerifyDate_dediscoServerNames_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keysFromConfigurationFile:overrideVerifyDate:dediscoServerNames:error:");
}

id objc_msgSend_keysMetadataArray(void *a1, const char *a2, ...)
{
  return _[a1 keysMetadataArray];
}

id objc_msgSend_leaderHPKEConfigID(void *a1, const char *a2, ...)
{
  return _[a1 leaderHPKEConfigID];
}

id objc_msgSend_leaderURL(void *a1, const char *a2, ...)
{
  return _[a1 leaderURL];
}

id objc_msgSend_leafCertificate(void *a1, const char *a2, ...)
{
  return _[a1 leafCertificate];
}

id objc_msgSend_length(void *a1, const char *a2, ...)
{
  return _[a1 length];
}

id objc_msgSend_localizedCaseInsensitiveContainsString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedCaseInsensitiveContainsString:");
}

id objc_msgSend_localizedDescription(void *a1, const char *a2, ...)
{
  return _[a1 localizedDescription];
}

id objc_msgSend_logAndStoreInError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logAndStoreInError:");
}

id objc_msgSend_longLongValue(void *a1, const char *a2, ...)
{
  return _[a1 longLongValue];
}

id objc_msgSend_matchesInString_options_range_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "matchesInString:options:range:");
}

id objc_msgSend_maxBatchSize(void *a1, const char *a2, ...)
{
  return _[a1 maxBatchSize];
}

id objc_msgSend_maxDailyOnDemand(void *a1, const char *a2, ...)
{
  return _[a1 maxDailyOnDemand];
}

id objc_msgSend_maxRetries(void *a1, const char *a2, ...)
{
  return _[a1 maxRetries];
}

id objc_msgSend_metadata(void *a1, const char *a2, ...)
{
  return _[a1 metadata];
}

id objc_msgSend_minBatchSize(void *a1, const char *a2, ...)
{
  return _[a1 minBatchSize];
}

id objc_msgSend_mutableBytes(void *a1, const char *a2, ...)
{
  return _[a1 mutableBytes];
}

id objc_msgSend_mutableCopy(void *a1, const char *a2, ...)
{
  return _[a1 mutableCopy];
}

id objc_msgSend_networkingClient(void *a1, const char *a2, ...)
{
  return _[a1 networkingClient];
}

id objc_msgSend_networkingService(void *a1, const char *a2, ...)
{
  return _[a1 networkingService];
}

id objc_msgSend_nextObject(void *a1, const char *a2, ...)
{
  return _[a1 nextObject];
}

id objc_msgSend_now(void *a1, const char *a2, ...)
{
  return _[a1 now];
}

id objc_msgSend_numberWithBool_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithBool:");
}

id objc_msgSend_numberWithChar_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithChar:");
}

id objc_msgSend_numberWithDouble_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithDouble:");
}

id objc_msgSend_numberWithUnsignedShort_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "numberWithUnsignedShort:");
}

id objc_msgSend_objectAtIndexedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectAtIndexedSubscript:");
}

id objc_msgSend_objectForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKey:");
}

id objc_msgSend_objectForKeyedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "objectForKeyedSubscript:");
}

id objc_msgSend_onDemandReportAuthForAggregator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "onDemandReportAuthForAggregator:");
}

id objc_msgSend_origin(void *a1, const char *a2, ...)
{
  return _[a1 origin];
}

id objc_msgSend_path(void *a1, const char *a2, ...)
{
  return _[a1 path];
}

id objc_msgSend_payloadEncoderForDonation_keys_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "payloadEncoderForDonation:keys:error:");
}

id objc_msgSend_payloadForDonation_keys_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "payloadForDonation:keys:error:");
}

id objc_msgSend_persistTokenRefreshHours(void *a1, const char *a2, ...)
{
  return _[a1 persistTokenRefreshHours];
}

id objc_msgSend_processIdentifier(void *a1, const char *a2, ...)
{
  return _[a1 processIdentifier];
}

id objc_msgSend_processInfo(void *a1, const char *a2, ...)
{
  return _[a1 processInfo];
}

id objc_msgSend_propertyListWithData_options_format_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "propertyListWithData:options:format:error:");
}

id objc_msgSend_publicShare(void *a1, const char *a2, ...)
{
  return _[a1 publicShare];
}

id objc_msgSend_queue(void *a1, const char *a2, ...)
{
  return _[a1 queue];
}

id objc_msgSend_randomFileForAggregator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "randomFileForAggregator:");
}

id objc_msgSend_randomTokenForAggregator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "randomTokenForAggregator:");
}

id objc_msgSend_range(void *a1, const char *a2, ...)
{
  return _[a1 range];
}

id objc_msgSend_redemptionContext(void *a1, const char *a2, ...)
{
  return _[a1 redemptionContext];
}

id objc_msgSend_regularExpressionWithPattern_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "regularExpressionWithPattern:options:error:");
}

id objc_msgSend_removeItemAtURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeItemAtURL:error:");
}

id objc_msgSend_removeObjectAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectAtIndex:");
}

id objc_msgSend_removeObjectForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "removeObjectForKey:");
}

id objc_msgSend_report(void *a1, const char *a2, ...)
{
  return _[a1 report];
}

id objc_msgSend_reportAuthForAggregator_withError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reportAuthForAggregator:withError:");
}

id objc_msgSend_reportID(void *a1, const char *a2, ...)
{
  return _[a1 reportID];
}

id objc_msgSend_reportMetadata(void *a1, const char *a2, ...)
{
  return _[a1 reportMetadata];
}

id objc_msgSend_reportMetricsForEvent_withMetrics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "reportMetricsForEvent:withMetrics:");
}

id objc_msgSend_requestWithURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "requestWithURL:");
}

id objc_msgSend_requiredClasses(void *a1, const char *a2, ...)
{
  return _[a1 requiredClasses];
}

id objc_msgSend_response(void *a1, const char *a2, ...)
{
  return _[a1 response];
}

id objc_msgSend_resume(void *a1, const char *a2, ...)
{
  return _[a1 resume];
}

id objc_msgSend_retries(void *a1, const char *a2, ...)
{
  return _[a1 retries];
}

id objc_msgSend_saveTokens_toFileInPath_forAggregator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "saveTokens:toFileInPath:forAggregator:");
}

id objc_msgSend_secondsSinceEpochWithPrecision(void *a1, const char *a2, ...)
{
  return _[a1 secondsSinceEpochWithPrecision];
}

id objc_msgSend_semanticVersionFromDediscoVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "semanticVersionFromDediscoVersion:");
}

id objc_msgSend_serializeAndReturnError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "serializeAndReturnError:");
}

id objc_msgSend_serializeOtherParamsWithMetadata_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "serializeOtherParamsWithMetadata:error:");
}

id objc_msgSend_serializePayload_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "serializePayload:error:");
}

id objc_msgSend_serverAlgorithm(void *a1, const char *a2, ...)
{
  return _[a1 serverAlgorithm];
}

id objc_msgSend_service(void *a1, const char *a2, ...)
{
  return _[a1 service];
}

id objc_msgSend_serviceListener(void *a1, const char *a2, ...)
{
  return _[a1 serviceListener];
}

id objc_msgSend_sessionWithConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sessionWithConfiguration:");
}

id objc_msgSend_sessionWithConfiguration_delegate_delegateQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sessionWithConfiguration:delegate:delegateQueue:");
}

id objc_msgSend_setBAACertificateBackoffDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBAACertificateBackoffDate:");
}

id objc_msgSend_setBundleID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setBundleID:");
}

id objc_msgSend_setByAddingObjectsFromArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setByAddingObjectsFromArray:");
}

id objc_msgSend_setClasses_forSelector_argumentIndex_ofReply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setClasses:forSelector:argumentIndex:ofReply:");
}

id objc_msgSend_setData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setData:");
}

id objc_msgSend_setDateFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDateFormat:");
}

id objc_msgSend_setDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setDelegate:");
}

id objc_msgSend_setEncodedTaskConfig_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEncodedTaskConfig:");
}

id objc_msgSend_setEncryptedHelperShares_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEncryptedHelperShares:");
}

id objc_msgSend_setEncryptedLeaderShares_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setEncryptedLeaderShares:");
}

id objc_msgSend_setExportedInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExportedInterface:");
}

id objc_msgSend_setExportedObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExportedObject:");
}

id objc_msgSend_setExtensions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setExtensions:");
}

id objc_msgSend_setHTTPMethod_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHTTPMethod:");
}

id objc_msgSend_setHpkeCipherText_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setHpkeCipherText:");
}

id objc_msgSend_setInteger_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setInteger:forKey:");
}

id objc_msgSend_setMaxRetries_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setMaxRetries:");
}

id objc_msgSend_setObject_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forKey:");
}

id objc_msgSend_setObject_forKeyedSubscript_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setObject:forKeyedSubscript:");
}

id objc_msgSend_setPublicShare_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setPublicShare:");
}

id objc_msgSend_setReport_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReport:");
}

id objc_msgSend_setReportID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReportID:");
}

id objc_msgSend_setReportMetadata_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setReportMetadata:");
}

id objc_msgSend_setRequestCachePolicy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setRequestCachePolicy:");
}

id objc_msgSend_setSystemClient_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setSystemClient:");
}

id objc_msgSend_setTaskID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTaskID:");
}

id objc_msgSend_setTokenFields_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setTokenFields:");
}

id objc_msgSend_setURLCache_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setURLCache:");
}

id objc_msgSend_setValue_forHTTPHeaderField_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValue:forHTTPHeaderField:");
}

id objc_msgSend_setValue_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setValue:forKey:");
}

id objc_msgSend_setWithArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithArray:");
}

id objc_msgSend_setWithObjects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "setWithObjects:");
}

id objc_msgSend_set_tlsTrustPinningPolicyName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "set_tlsTrustPinningPolicyName:");
}

id objc_msgSend_set_usesNWLoader_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "set_usesNWLoader:");
}

id objc_msgSend_share1(void *a1, const char *a2, ...)
{
  return _[a1 share1];
}

id objc_msgSend_share2(void *a1, const char *a2, ...)
{
  return _[a1 share2];
}

id objc_msgSend_sharedInstance(void *a1, const char *a2, ...)
{
  return _[a1 sharedInstance];
}

id objc_msgSend_signPayloadData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "signPayloadData:");
}

id objc_msgSend_signWithDeviceIdentity_canRecover_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "signWithDeviceIdentity:canRecover:");
}

id objc_msgSend_signature(void *a1, const char *a2, ...)
{
  return _[a1 signature];
}

id objc_msgSend_signatureWithDeviceSignature_leafCertificate_intermediateCertificate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "signatureWithDeviceSignature:leafCertificate:intermediateCertificate:");
}

id objc_msgSend_skipDescendents(void *a1, const char *a2, ...)
{
  return _[a1 skipDescendents];
}

id objc_msgSend_sleepForSeconds_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "sleepForSeconds:");
}

id objc_msgSend_standardUserDefaults(void *a1, const char *a2, ...)
{
  return _[a1 standardUserDefaults];
}

id objc_msgSend_startDownload(void *a1, const char *a2, ...)
{
  return _[a1 startDownload];
}

id objc_msgSend_statusCode(void *a1, const char *a2, ...)
{
  return _[a1 statusCode];
}

id objc_msgSend_stringByAppendingFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByAppendingFormat:");
}

id objc_msgSend_stringByAppendingPathComponent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByAppendingPathComponent:");
}

id objc_msgSend_stringByDeletingLastPathComponent(void *a1, const char *a2, ...)
{
  return _[a1 stringByDeletingLastPathComponent];
}

id objc_msgSend_stringByReplacingOccurrencesOfString_withString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringByReplacingOccurrencesOfString:withString:");
}

id objc_msgSend_stringForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringForKey:");
}

id objc_msgSend_stringFromDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringFromDate:");
}

id objc_msgSend_stringWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "stringWithFormat:");
}

id objc_msgSend_submissionServiceAccessEntitlement(void *a1, const char *a2, ...)
{
  return _[a1 submissionServiceAccessEntitlement];
}

id objc_msgSend_submitSyncronouslyWithSerializedPayload_baaCertificateChain_baaSignature_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "submitSyncronouslyWithSerializedPayload:baaCertificateChain:baaSignature:options:");
}

id objc_msgSend_substringToIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "substringToIndex:");
}

id objc_msgSend_substringWithRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "substringWithRange:");
}

id objc_msgSend_synchronize(void *a1, const char *a2, ...)
{
  return _[a1 synchronize];
}

id objc_msgSend_synthesizeWithTokenType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "synthesizeWithTokenType:");
}

id objc_msgSend_systemUptime(void *a1, const char *a2, ...)
{
  return _[a1 systemUptime];
}

id objc_msgSend_taskExpiration(void *a1, const char *a2, ...)
{
  return _[a1 taskExpiration];
}

id objc_msgSend_taskID(void *a1, const char *a2, ...)
{
  return _[a1 taskID];
}

id objc_msgSend_taskIDWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "taskIDWithError:");
}

id objc_msgSend_taskInfo(void *a1, const char *a2, ...)
{
  return _[a1 taskInfo];
}

id objc_msgSend_taskInfoWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "taskInfoWithError:");
}

id objc_msgSend_taskProv(void *a1, const char *a2, ...)
{
  return _[a1 taskProv];
}

id objc_msgSend_taskProvFromDonation_leaderURL_helperURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "taskProvFromDonation:leaderURL:helperURL:error:");
}

id objc_msgSend_time(void *a1, const char *a2, ...)
{
  return _[a1 time];
}

id objc_msgSend_timeIntervalSince1970(void *a1, const char *a2, ...)
{
  return _[a1 timeIntervalSince1970];
}

id objc_msgSend_toBase64URLEncoded_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "toBase64URLEncoded:");
}

id objc_msgSend_token(void *a1, const char *a2, ...)
{
  return _[a1 token];
}

id objc_msgSend_tokenFields(void *a1, const char *a2, ...)
{
  return _[a1 tokenFields];
}

id objc_msgSend_tokenRefreshHours(void *a1, const char *a2, ...)
{
  return _[a1 tokenRefreshHours];
}

id objc_msgSend_tokenRefreshHoursKeyName(void *a1, const char *a2, ...)
{
  return _[a1 tokenRefreshHoursKeyName];
}

id objc_msgSend_tokensDirectoryPath(void *a1, const char *a2, ...)
{
  return _[a1 tokensDirectoryPath];
}

id objc_msgSend_tokensPerRefresh(void *a1, const char *a2, ...)
{
  return _[a1 tokensPerRefresh];
}

id objc_msgSend_unsignedCharValue(void *a1, const char *a2, ...)
{
  return _[a1 unsignedCharValue];
}

id objc_msgSend_unsignedIntValue(void *a1, const char *a2, ...)
{
  return _[a1 unsignedIntValue];
}

id objc_msgSend_unsignedIntegerValue(void *a1, const char *a2, ...)
{
  return _[a1 unsignedIntegerValue];
}

id objc_msgSend_unsignedLongLongValue(void *a1, const char *a2, ...)
{
  return _[a1 unsignedLongLongValue];
}

id objc_msgSend_unsignedLongValue(void *a1, const char *a2, ...)
{
  return _[a1 unsignedLongValue];
}

id objc_msgSend_unsignedShortValue(void *a1, const char *a2, ...)
{
  return _[a1 unsignedShortValue];
}

id objc_msgSend_updateTokenFileWithTokenArray_inPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "updateTokenFileWithTokenArray:inPath:");
}

id objc_msgSend_uploadDAPPayload_withEncoder_withKeys_useOHTTP_telemetryAllowed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uploadDAPPayload:withEncoder:withKeys:useOHTTP:telemetryAllowed:");
}

id objc_msgSend_uploadData_withHeaders_onCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uploadData:withHeaders:onCompletion:");
}

id objc_msgSend_uploadPayload_withEncoder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uploadPayload:withEncoder:");
}

id objc_msgSend_uploadSerializedPayload_baaCertificateChain_baaSignature_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uploadSerializedPayload:baaCertificateChain:baaSignature:options:");
}

id objc_msgSend_uploadTaskWithRequest_fromData_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uploadTaskWithRequest:fromData:completionHandler:");
}

id objc_msgSend_uploadWithHTTPBody_withHTTPHeaders_withFullURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "uploadWithHTTPBody:withHTTPHeaders:withFullURL:");
}

id objc_msgSend_uploadWithOHTTP(void *a1, const char *a2, ...)
{
  return _[a1 uploadWithOHTTP];
}

id objc_msgSend_url(void *a1, const char *a2, ...)
{
  return _[a1 url];
}

id objc_msgSend_useOHTTP(void *a1, const char *a2, ...)
{
  return _[a1 useOHTTP];
}

id objc_msgSend_validatePINEParametersWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "validatePINEParametersWithError:");
}

id objc_msgSend_valueForEntitlement_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "valueForEntitlement:");
}

id objc_msgSend_vdafType(void *a1, const char *a2, ...)
{
  return _[a1 vdafType];
}

id objc_msgSend_vdafTypeFromDonation_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "vdafTypeFromDonation:error:");
}

id objc_msgSend_verifySignature_data_certificate_overrideVerifyDate_isAppleServer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "verifySignature:data:certificate:overrideVerifyDate:isAppleServer:");
}

id objc_msgSend_wait(void *a1, const char *a2, ...)
{
  return _[a1 wait];
}

id objc_msgSend_writeFloat32_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeFloat32:");
}

id objc_msgSend_writeToFile_atomically_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeToFile:atomically:");
}

id objc_msgSend_writeToFile_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeToFile:options:error:");
}

id objc_msgSend_writeUChar_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeUChar:");
}

id objc_msgSend_writeUInt16_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeUInt16:");
}

id objc_msgSend_writeUInt32_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeUInt32:");
}

id objc_msgSend_writeUInt64_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "writeUInt64:");
}